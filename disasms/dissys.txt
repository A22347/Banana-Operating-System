
packages/system/32/0001/system.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <beginx(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <beginx(void*)+0xd>	1000000d: R_386_PC32	begin(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <memcmp(void*, void*, unsigned long)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 10             	sub    esp,0x10
1000001d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000020:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000026:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000029:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000002c:	8d 50 ff             	lea    edx,[eax-0x1]
1000002f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000032:	85 c0                	test   eax,eax
10000034:	74 12                	je     10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000036:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000039:	8a 10                	mov    dl,BYTE PTR [eax]
1000003b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000003e:	8a 00                	mov    al,BYTE PTR [eax]
10000040:	38 c2                	cmp    dl,al
10000042:	75 04                	jne    10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000044:	b0 01                	mov    al,0x1
10000046:	eb 02                	jmp    1000004a <memcmp(void*, void*, unsigned long)+0x33>
10000048:	b0 00                	mov    al,0x0
1000004a:	84 c0                	test   al,al
1000004c:	74 08                	je     10000056 <memcmp(void*, void*, unsigned long)+0x3f>
1000004e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000051:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
10000054:	eb d3                	jmp    10000029 <memcmp(void*, void*, unsigned long)+0x12>
10000056:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000059:	8a 00                	mov    al,BYTE PTR [eax]
1000005b:	0f b6 d0             	movzx  edx,al
1000005e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000061:	8a 00                	mov    al,BYTE PTR [eax]
10000063:	0f b6 c0             	movzx  eax,al
10000066:	29 c2                	sub    edx,eax
10000068:	89 d0                	mov    eax,edx
1000006a:	c9                   	leave  
1000006b:	c3                   	ret    

1000006c <memmove>:
1000006c:	55                   	push   ebp
1000006d:	89 e5                	mov    ebp,esp
1000006f:	83 ec 10             	sub    esp,0x10
10000072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000075:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000007b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000007e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000081:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
10000084:	76 1b                	jbe    100000a1 <memmove+0x35>
10000086:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
1000008a:	74 46                	je     100000d2 <memmove+0x66>
1000008c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000008f:	8a 10                	mov    dl,BYTE PTR [eax]
10000091:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000094:	88 10                	mov    BYTE PTR [eax],dl
10000096:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000099:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
1000009c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000009f:	eb e5                	jmp    10000086 <memmove+0x1a>
100000a1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000a4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
100000a7:	73 29                	jae    100000d2 <memmove+0x66>
100000a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000ac:	48                   	dec    eax
100000ad:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
100000b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000b3:	48                   	dec    eax
100000b4:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
100000b7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000bb:	74 15                	je     100000d2 <memmove+0x66>
100000bd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000c0:	8a 10                	mov    dl,BYTE PTR [eax]
100000c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000c5:	88 10                	mov    BYTE PTR [eax],dl
100000c7:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100000ca:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
100000cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000d0:	eb e5                	jmp    100000b7 <memmove+0x4b>
100000d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d5:	c9                   	leave  
100000d6:	c3                   	ret    

100000d7 <memset>:
100000d7:	55                   	push   ebp
100000d8:	89 e5                	mov    ebp,esp
100000da:	83 ec 10             	sub    esp,0x10
100000dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100000e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000e7:	74 12                	je     100000fb <memset+0x24>
100000e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100000ec:	88 c2                	mov    dl,al
100000ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000f1:	88 10                	mov    BYTE PTR [eax],dl
100000f3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100000f6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000f9:	eb e8                	jmp    100000e3 <memset+0xc>
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	c9                   	leave  
100000ff:	c3                   	ret    

10000100 <strlen>:
10000100:	55                   	push   ebp
10000101:	89 e5                	mov    ebp,esp
10000103:	83 ec 10             	sub    esp,0x10
10000106:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000110:	8a 00                	mov    al,BYTE PTR [eax]
10000112:	84 c0                	test   al,al
10000114:	74 0c                	je     10000122 <strlen+0x22>
10000116:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000119:	40                   	inc    eax
1000011a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000011d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
10000120:	eb eb                	jmp    1000010d <strlen+0xd>
10000122:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000125:	c9                   	leave  
10000126:	c3                   	ret    

10000127 <strpbrk(char const*, char const*)>:
10000127:	55                   	push   ebp
10000128:	89 e5                	mov    ebp,esp
1000012a:	83 ec 10             	sub    esp,0x10
1000012d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000130:	8a 00                	mov    al,BYTE PTR [eax]
10000132:	84 c0                	test   al,al
10000134:	74 30                	je     10000166 <strpbrk(char const*, char const*)+0x3f>
10000136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000139:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000013c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000013f:	8a 00                	mov    al,BYTE PTR [eax]
10000141:	84 c0                	test   al,al
10000143:	74 18                	je     1000015d <strpbrk(char const*, char const*)+0x36>
10000145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000148:	8a 10                	mov    dl,BYTE PTR [eax]
1000014a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000014d:	8a 00                	mov    al,BYTE PTR [eax]
1000014f:	38 c2                	cmp    dl,al
10000151:	75 05                	jne    10000158 <strpbrk(char const*, char const*)+0x31>
10000153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000156:	eb 13                	jmp    1000016b <strpbrk(char const*, char const*)+0x44>
10000158:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
1000015b:	eb df                	jmp    1000013c <strpbrk(char const*, char const*)+0x15>
1000015d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000160:	40                   	inc    eax
10000161:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000164:	eb c7                	jmp    1000012d <strpbrk(char const*, char const*)+0x6>
10000166:	b8 00 00 00 00       	mov    eax,0x0
1000016b:	c9                   	leave  
1000016c:	c3                   	ret    

1000016d <strtok>:
1000016d:	55                   	push   ebp
1000016e:	89 e5                	mov    ebp,esp
10000170:	83 ec 10             	sub    esp,0x10
10000173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000176:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000179:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000017c:	85 c0                	test   eax,eax
1000017e:	75 18                	jne    10000198 <strtok+0x2b>
10000180:	a1 00 00 00 00       	mov    eax,ds:0x0	10000181: R_386_32	SavedPtr
10000185:	85 c0                	test   eax,eax
10000187:	75 07                	jne    10000190 <strtok+0x23>
10000189:	b8 00 00 00 00       	mov    eax,0x0
1000018e:	eb 6f                	jmp    100001ff <strtok+0x92>
10000190:	a1 00 00 00 00       	mov    eax,ds:0x0	10000191: R_386_32	SavedPtr
10000195:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000198:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000019b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000019e:	50                   	push   eax
1000019f:	e8 fc ff ff ff       	call   100001a0 <strtok+0x33>	100001a0: R_386_PC32	strpbrk(char const*, char const*)
100001a4:	83 c4 08             	add    esp,0x8
100001a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100001a8: R_386_32	SavedPtr
100001ac:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001ae: R_386_32	SavedPtr
100001b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001b5:	39 c2                	cmp    edx,eax
100001b7:	75 22                	jne    100001db <strtok+0x6e>
100001b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001bc:	8d 50 01             	lea    edx,[eax+0x1]
100001bf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100001c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100001cb:	50                   	push   eax
100001cc:	e8 fc ff ff ff       	call   100001cd <strtok+0x60>	100001cd: R_386_PC32	strpbrk(char const*, char const*)
100001d1:	83 c4 08             	add    esp,0x8
100001d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100001d5: R_386_32	SavedPtr
100001d9:	eb d1                	jmp    100001ac <strtok+0x3f>
100001db:	a1 00 00 00 00       	mov    eax,ds:0x0	100001dc: R_386_32	SavedPtr
100001e0:	85 c0                	test   eax,eax
100001e2:	74 16                	je     100001fa <strtok+0x8d>
100001e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e5: R_386_32	SavedPtr
100001e9:	8d 50 01             	lea    edx,[eax+0x1]
100001ec:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100001ee: R_386_32	SavedPtr
100001f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001f8:	eb 05                	jmp    100001ff <strtok+0x92>
100001fa:	b8 00 00 00 00       	mov    eax,0x0
100001ff:	c9                   	leave  
10000200:	c3                   	ret    

10000201 <strcpy>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	83 ec 10             	sub    esp,0x10
10000207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000020a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000020d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000210:	8a 00                	mov    al,BYTE PTR [eax]
10000212:	84 c0                	test   al,al
10000214:	74 12                	je     10000228 <strcpy+0x27>
10000216:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000219:	8a 10                	mov    dl,BYTE PTR [eax]
1000021b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000021e:	88 10                	mov    BYTE PTR [eax],dl
10000220:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000223:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10000226:	eb e5                	jmp    1000020d <strcpy+0xc>
10000228:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000022b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000022e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000231:	c9                   	leave  
10000232:	c3                   	ret    

10000233 <strncpyxx(char*, char const*, unsigned long)>:
10000233:	55                   	push   ebp
10000234:	89 e5                	mov    ebp,esp
10000236:	83 ec 10             	sub    esp,0x10
10000239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000242:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000245:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000249:	74 23                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000024b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000024e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000251:	8d 42 01             	lea    eax,[edx+0x1]
10000254:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000025a:	8d 48 01             	lea    ecx,[eax+0x1]
1000025d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
10000260:	8a 12                	mov    dl,BYTE PTR [edx]
10000262:	88 10                	mov    BYTE PTR [eax],dl
10000264:	8a 00                	mov    al,BYTE PTR [eax]
10000266:	84 c0                	test   al,al
10000268:	74 04                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000026a:	b0 01                	mov    al,0x1
1000026c:	eb 02                	jmp    10000270 <strncpyxx(char*, char const*, unsigned long)+0x3d>
1000026e:	b0 00                	mov    al,0x0
10000270:	84 c0                	test   al,al
10000272:	74 02                	je     10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000274:	eb cf                	jmp    10000245 <strncpyxx(char*, char const*, unsigned long)+0x12>
10000276:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000279:	8d 50 ff             	lea    edx,[eax-0x1]
1000027c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
1000027f:	85 c0                	test   eax,eax
10000281:	0f 95 c0             	setne  al
10000284:	84 c0                	test   al,al
10000286:	74 0b                	je     10000293 <strncpyxx(char*, char const*, unsigned long)+0x60>
10000288:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000028b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000028e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000291:	eb e3                	jmp    10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000296:	c9                   	leave  
10000297:	c3                   	ret    

10000298 <strcmp>:
10000298:	55                   	push   ebp
10000299:	89 e5                	mov    ebp,esp
1000029b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029e:	8a 10                	mov    dl,BYTE PTR [eax]
100002a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a3:	8a 00                	mov    al,BYTE PTR [eax]
100002a5:	38 c2                	cmp    dl,al
100002a7:	75 20                	jne    100002c9 <strcmp+0x31>
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	8d 50 01             	lea    edx,[eax+0x1]
100002af:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
100002b2:	8a 00                	mov    al,BYTE PTR [eax]
100002b4:	84 c0                	test   al,al
100002b6:	0f 94 c0             	sete   al
100002b9:	84 c0                	test   al,al
100002bb:	74 07                	je     100002c4 <strcmp+0x2c>
100002bd:	b8 00 00 00 00       	mov    eax,0x0
100002c2:	eb 19                	jmp    100002dd <strcmp+0x45>
100002c4:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100002c7:	eb d2                	jmp    1000029b <strcmp+0x3>
100002c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002cc:	8a 00                	mov    al,BYTE PTR [eax]
100002ce:	0f b6 d0             	movzx  edx,al
100002d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002d4:	8a 00                	mov    al,BYTE PTR [eax]
100002d6:	0f b6 c0             	movzx  eax,al
100002d9:	29 c2                	sub    edx,eax
100002db:	89 d0                	mov    eax,edx
100002dd:	5d                   	pop    ebp
100002de:	c3                   	ret    

100002df <strchr(char const*, int)>:
100002df:	55                   	push   ebp
100002e0:	89 e5                	mov    ebp,esp
100002e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e5:	8a 00                	mov    al,BYTE PTR [eax]
100002e7:	84 c0                	test   al,al
100002e9:	74 16                	je     10000301 <strchr(char const*, int)+0x22>
100002eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ee:	8a 00                	mov    al,BYTE PTR [eax]
100002f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002f3:	38 d0                	cmp    al,dl
100002f5:	75 05                	jne    100002fc <strchr(char const*, int)+0x1d>
100002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fa:	eb 0a                	jmp    10000306 <strchr(char const*, int)+0x27>
100002fc:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
100002ff:	eb e1                	jmp    100002e2 <strchr(char const*, int)+0x3>
10000301:	b8 00 00 00 00       	mov    eax,0x0
10000306:	5d                   	pop    ebp
10000307:	c3                   	ret    

10000308 <strncmp>:
10000308:	55                   	push   ebp
10000309:	89 e5                	mov    ebp,esp
1000030b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000030e:	8d 50 ff             	lea    edx,[eax-0x1]
10000311:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000314:	85 c0                	test   eax,eax
10000316:	74 12                	je     1000032a <strncmp+0x22>
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	8a 10                	mov    dl,BYTE PTR [eax]
1000031d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000320:	8a 00                	mov    al,BYTE PTR [eax]
10000322:	38 c2                	cmp    dl,al
10000324:	75 04                	jne    1000032a <strncmp+0x22>
10000326:	b0 01                	mov    al,0x1
10000328:	eb 02                	jmp    1000032c <strncmp+0x24>
1000032a:	b0 00                	mov    al,0x0
1000032c:	84 c0                	test   al,al
1000032e:	74 20                	je     10000350 <strncmp+0x48>
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8d 50 01             	lea    edx,[eax+0x1]
10000336:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
10000339:	8a 00                	mov    al,BYTE PTR [eax]
1000033b:	84 c0                	test   al,al
1000033d:	0f 94 c0             	sete   al
10000340:	84 c0                	test   al,al
10000342:	74 07                	je     1000034b <strncmp+0x43>
10000344:	b8 00 00 00 00       	mov    eax,0x0
10000349:	eb 19                	jmp    10000364 <strncmp+0x5c>
1000034b:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000034e:	eb bb                	jmp    1000030b <strncmp+0x3>
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8a 00                	mov    al,BYTE PTR [eax]
10000355:	0f b6 d0             	movzx  edx,al
10000358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000035b:	8a 00                	mov    al,BYTE PTR [eax]
1000035d:	0f b6 c0             	movzx  eax,al
10000360:	29 c2                	sub    edx,eax
10000362:	89 d0                	mov    eax,edx
10000364:	5d                   	pop    ebp
10000365:	c3                   	ret    

10000366 <strcat>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 10             	sub    esp,0x10
1000036c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000372:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000375:	8d 50 01             	lea    edx,[eax+0x1]
10000378:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000037b:	8a 00                	mov    al,BYTE PTR [eax]
1000037d:	84 c0                	test   al,al
1000037f:	0f 95 c0             	setne  al
10000382:	84 c0                	test   al,al
10000384:	74 02                	je     10000388 <strcat+0x22>
10000386:	eb ea                	jmp    10000372 <strcat+0xc>
10000388:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
1000038b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000038e:	8d 42 01             	lea    eax,[edx+0x1]
10000391:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000394:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000397:	8d 48 01             	lea    ecx,[eax+0x1]
1000039a:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
1000039d:	8a 12                	mov    dl,BYTE PTR [edx]
1000039f:	88 10                	mov    BYTE PTR [eax],dl
100003a1:	8a 00                	mov    al,BYTE PTR [eax]
100003a3:	84 c0                	test   al,al
100003a5:	0f 95 c0             	setne  al
100003a8:	84 c0                	test   al,al
100003aa:	74 02                	je     100003ae <strcat+0x48>
100003ac:	eb dd                	jmp    1000038b <strcat+0x25>
100003ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b1:	c9                   	leave  
100003b2:	c3                   	ret    

100003b3 <strncat(char*, char const*, unsigned long)>:
100003b3:	55                   	push   ebp
100003b4:	89 e5                	mov    ebp,esp
100003b6:	83 ec 10             	sub    esp,0x10
100003b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100003bd:	74 5c                	je     1000041b <strncat(char*, char const*, unsigned long)+0x68>
100003bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003c8:	8d 50 01             	lea    edx,[eax+0x1]
100003cb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100003ce:	8a 00                	mov    al,BYTE PTR [eax]
100003d0:	84 c0                	test   al,al
100003d2:	0f 95 c0             	setne  al
100003d5:	84 c0                	test   al,al
100003d7:	74 02                	je     100003db <strncat(char*, char const*, unsigned long)+0x28>
100003d9:	eb ea                	jmp    100003c5 <strncat(char*, char const*, unsigned long)+0x12>
100003db:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100003de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e1:	8d 42 01             	lea    eax,[edx+0x1]
100003e4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100003e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003ea:	8d 48 01             	lea    ecx,[eax+0x1]
100003ed:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
100003f0:	8a 12                	mov    dl,BYTE PTR [edx]
100003f2:	88 10                	mov    BYTE PTR [eax],dl
100003f4:	8a 00                	mov    al,BYTE PTR [eax]
100003f6:	84 c0                	test   al,al
100003f8:	74 0d                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
100003fa:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100003fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000401:	74 04                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
10000403:	b0 01                	mov    al,0x1
10000405:	eb 02                	jmp    10000409 <strncat(char*, char const*, unsigned long)+0x56>
10000407:	b0 00                	mov    al,0x0
10000409:	84 c0                	test   al,al
1000040b:	74 02                	je     1000040f <strncat(char*, char const*, unsigned long)+0x5c>
1000040d:	eb cf                	jmp    100003de <strncat(char*, char const*, unsigned long)+0x2b>
1000040f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000413:	75 06                	jne    1000041b <strncat(char*, char const*, unsigned long)+0x68>
10000415:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000418:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000041b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041e:	c9                   	leave  
1000041f:	c3                   	ret    

10000420 <strstr(char*, char*)>:
10000420:	55                   	push   ebp
10000421:	89 e5                	mov    ebp,esp
10000423:	83 ec 10             	sub    esp,0x10
10000426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000429:	e8 fc ff ff ff       	call   1000042a <strstr(char*, char*)+0xa>	1000042a: R_386_PC32	strlen
1000042e:	83 c4 04             	add    esp,0x4
10000431:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000434:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
10000438:	75 05                	jne    1000043f <strstr(char*, char*)+0x1f>
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	eb 3f                	jmp    1000047e <strstr(char*, char*)+0x5e>
1000043f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000442:	50                   	push   eax
10000443:	e8 fc ff ff ff       	call   10000444 <strstr(char*, char*)+0x24>	10000444: R_386_PC32	strlen
10000448:	83 c4 04             	add    esp,0x4
1000044b:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
1000044e:	77 29                	ja     10000479 <strstr(char*, char*)+0x59>
10000450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000453:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
10000456:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000459:	50                   	push   eax
1000045a:	e8 fc ff ff ff       	call   1000045b <strstr(char*, char*)+0x3b>	1000045b: R_386_PC32	memcmp(void*, void*, unsigned long)
1000045f:	83 c4 0c             	add    esp,0xc
10000462:	85 c0                	test   eax,eax
10000464:	0f 94 c0             	sete   al
10000467:	84 c0                	test   al,al
10000469:	74 05                	je     10000470 <strstr(char*, char*)+0x50>
1000046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000046e:	eb 0e                	jmp    1000047e <strstr(char*, char*)+0x5e>
10000470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000473:	40                   	inc    eax
10000474:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000477:	eb c6                	jmp    1000043f <strstr(char*, char*)+0x1f>
10000479:	b8 00 00 00 00       	mov    eax,0x0
1000047e:	c9                   	leave  
1000047f:	c3                   	ret    

10000480 <rmtree(char*)>:
10000480:	55                   	push   ebp
10000481:	89 e5                	mov    ebp,esp
10000483:	53                   	push   ebx
10000484:	81 ec 64 02 00 00    	sub    esp,0x264
1000048a:	68 2c 01 00 00       	push   0x12c
1000048f:	6a 00                	push   0x0
10000491:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000497:	50                   	push   eax
10000498:	e8 fc ff ff ff       	call   10000499 <rmtree(char*)+0x19>	10000499: R_386_PC32	memset
1000049d:	83 c4 0c             	add    esp,0xc
100004a0:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
100004a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100004a9:	83 ec 0c             	sub    esp,0xc
100004ac:	68 14 01 00 00       	push   0x114
100004b1:	e8 fc ff ff ff       	call   100004b2 <rmtree(char*)+0x32>	100004b2: R_386_PC32	operator new(unsigned long)
100004b6:	83 c4 10             	add    esp,0x10
100004b9:	89 c3                	mov    ebx,eax
100004bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
100004c0:	8b 00                	mov    eax,DWORD PTR [eax]
100004c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
100004c5:	83 ec 04             	sub    esp,0x4
100004c8:	50                   	push   eax
100004c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004cc:	53                   	push   ebx
100004cd:	e8 fc ff ff ff       	call   100004ce <rmtree(char*)+0x4e>	100004ce: R_386_PC32	Directory::Directory(char const*, Process*)
100004d2:	83 c4 10             	add    esp,0x10
100004d5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
100004d8:	83 ec 0c             	sub    esp,0xc
100004db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004de:	e8 fc ff ff ff       	call   100004df <rmtree(char*)+0x5f>	100004df: R_386_PC32	Directory::open()
100004e3:	83 c4 10             	add    esp,0x10
100004e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004e9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100004ed:	74 24                	je     10000513 <rmtree(char*)+0x93>
100004ef:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004f3:	0f 84 8b 01 00 00    	je     10000684 <rmtree(char*)+0x204>
100004f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004fc:	8b 00                	mov    eax,DWORD PTR [eax]
100004fe:	83 c0 08             	add    eax,0x8
10000501:	8b 00                	mov    eax,DWORD PTR [eax]
10000503:	83 ec 0c             	sub    esp,0xc
10000506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000509:	ff d0                	call   eax
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	e9 72 01 00 00       	jmp    10000685 <rmtree(char*)+0x205>
10000513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000516:	8b 00                	mov    eax,DWORD PTR [eax]
10000518:	83 c0 0c             	add    eax,0xc
1000051b:	8b 00                	mov    eax,DWORD PTR [eax]
1000051d:	83 ec 0c             	sub    esp,0xc
10000520:	8d 95 a4 fd ff ff    	lea    edx,[ebp-0x25c]
10000526:	52                   	push   edx
10000527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000052a:	6a 00                	push   0x0
1000052c:	68 10 01 00 00       	push   0x110
10000531:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000534:	ff d0                	call   eax
10000536:	83 c4 20             	add    esp,0x20
10000539:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
1000053c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000540:	0f 85 04 01 00 00    	jne    1000064a <rmtree(char*)+0x1ca>
10000546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000549:	83 c0 10             	add    eax,0x10
1000054c:	83 ec 08             	sub    esp,0x8
1000054f:	68 74 af 00 10       	push   0x1000af74	10000550: R_386_32	.text
10000554:	50                   	push   eax
10000555:	e8 fc ff ff ff       	call   10000556 <rmtree(char*)+0xd6>	10000556: R_386_PC32	strcmp
1000055a:	83 c4 10             	add    esp,0x10
1000055d:	85 c0                	test   eax,eax
1000055f:	74 b2                	je     10000513 <rmtree(char*)+0x93>
10000561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000564:	83 c0 10             	add    eax,0x10
10000567:	83 ec 08             	sub    esp,0x8
1000056a:	68 76 af 00 10       	push   0x1000af76	1000056b: R_386_32	.text
1000056f:	50                   	push   eax
10000570:	e8 fc ff ff ff       	call   10000571 <rmtree(char*)+0xf1>	10000571: R_386_PC32	strcmp
10000575:	83 c4 10             	add    esp,0x10
10000578:	85 c0                	test   eax,eax
1000057a:	74 97                	je     10000513 <rmtree(char*)+0x93>
1000057c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000057f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000582:	83 e0 02             	and    eax,0x2
10000585:	85 c0                	test   eax,eax
10000587:	74 17                	je     100005a0 <rmtree(char*)+0x120>
10000589:	83 ec 0c             	sub    esp,0xc
1000058c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000592:	50                   	push   eax
10000593:	e8 fc ff ff ff       	call   10000594 <rmtree(char*)+0x114>	10000594: R_386_PC32	rmtree(char*)
10000598:	83 c4 10             	add    esp,0x10
1000059b:	e9 73 ff ff ff       	jmp    10000513 <rmtree(char*)+0x93>
100005a0:	83 ec 08             	sub    esp,0x8
100005a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005a6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005ac:	50                   	push   eax
100005ad:	e8 fc ff ff ff       	call   100005ae <rmtree(char*)+0x12e>	100005ae: R_386_PC32	strcpy
100005b2:	83 c4 10             	add    esp,0x10
100005b5:	83 ec 08             	sub    esp,0x8
100005b8:	68 79 af 00 10       	push   0x1000af79	100005b9: R_386_32	.text
100005bd:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005c3:	50                   	push   eax
100005c4:	e8 fc ff ff ff       	call   100005c5 <rmtree(char*)+0x145>	100005c5: R_386_PC32	strcat
100005c9:	83 c4 10             	add    esp,0x10
100005cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100005cf:	83 c0 10             	add    eax,0x10
100005d2:	83 ec 08             	sub    esp,0x8
100005d5:	50                   	push   eax
100005d6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005dc:	50                   	push   eax
100005dd:	e8 fc ff ff ff       	call   100005de <rmtree(char*)+0x15e>	100005de: R_386_PC32	strcat
100005e2:	83 c4 10             	add    esp,0x10
100005e5:	83 ec 0c             	sub    esp,0xc
100005e8:	68 14 01 00 00       	push   0x114
100005ed:	e8 fc ff ff ff       	call   100005ee <rmtree(char*)+0x16e>	100005ee: R_386_PC32	operator new(unsigned long)
100005f2:	83 c4 10             	add    esp,0x10
100005f5:	89 c3                	mov    ebx,eax
100005f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
100005fc:	8b 00                	mov    eax,DWORD PTR [eax]
100005fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
10000601:	83 ec 04             	sub    esp,0x4
10000604:	50                   	push   eax
10000605:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
1000060b:	50                   	push   eax
1000060c:	53                   	push   ebx
1000060d:	e8 fc ff ff ff       	call   1000060e <rmtree(char*)+0x18e>	1000060e: R_386_PC32	File::File(char const*, Process*)
10000612:	83 c4 10             	add    esp,0x10
10000615:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000618:	83 ec 0c             	sub    esp,0xc
1000061b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000061e:	e8 fc ff ff ff       	call   1000061f <rmtree(char*)+0x19f>	1000061f: R_386_PC32	File::unlink()
10000623:	83 c4 10             	add    esp,0x10
10000626:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000062a:	0f 84 e3 fe ff ff    	je     10000513 <rmtree(char*)+0x93>
10000630:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000633:	8b 00                	mov    eax,DWORD PTR [eax]
10000635:	83 c0 08             	add    eax,0x8
10000638:	8b 00                	mov    eax,DWORD PTR [eax]
1000063a:	83 ec 0c             	sub    esp,0xc
1000063d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000640:	ff d0                	call   eax
10000642:	83 c4 10             	add    esp,0x10
10000645:	e9 c9 fe ff ff       	jmp    10000513 <rmtree(char*)+0x93>
1000064a:	90                   	nop
1000064b:	83 ec 0c             	sub    esp,0xc
1000064e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000651:	e8 fc ff ff ff       	call   10000652 <rmtree(char*)+0x1d2>	10000652: R_386_PC32	Directory::close()
10000656:	83 c4 10             	add    esp,0x10
10000659:	83 ec 0c             	sub    esp,0xc
1000065c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000065f:	e8 fc ff ff ff       	call   10000660 <rmtree(char*)+0x1e0>	10000660: R_386_PC32	Directory::unlink()
10000664:	83 c4 10             	add    esp,0x10
10000667:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000066b:	74 18                	je     10000685 <rmtree(char*)+0x205>
1000066d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000670:	8b 00                	mov    eax,DWORD PTR [eax]
10000672:	83 c0 08             	add    eax,0x8
10000675:	8b 00                	mov    eax,DWORD PTR [eax]
10000677:	83 ec 0c             	sub    esp,0xc
1000067a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000067d:	ff d0                	call   eax
1000067f:	83 c4 10             	add    esp,0x10
10000682:	eb 01                	jmp    10000685 <rmtree(char*)+0x205>
10000684:	90                   	nop
10000685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000688:	c9                   	leave  
10000689:	c3                   	ret    

1000068a <mkdir(char const*, int)>:
1000068a:	55                   	push   ebp
1000068b:	89 e5                	mov    ebp,esp
1000068d:	53                   	push   ebx
1000068e:	83 ec 14             	sub    esp,0x14
10000691:	83 ec 0c             	sub    esp,0xc
10000694:	68 14 01 00 00       	push   0x114
10000699:	e8 fc ff ff ff       	call   1000069a <mkdir(char const*, int)+0x10>	1000069a: R_386_PC32	operator new(unsigned long)
1000069e:	83 c4 10             	add    esp,0x10
100006a1:	89 c3                	mov    ebx,eax
100006a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100006a4: R_386_32	kernelProcess
100006a8:	83 ec 04             	sub    esp,0x4
100006ab:	50                   	push   eax
100006ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006af:	53                   	push   ebx
100006b0:	e8 fc ff ff ff       	call   100006b1 <mkdir(char const*, int)+0x27>	100006b1: R_386_PC32	Directory::Directory(char const*, Process*)
100006b5:	83 c4 10             	add    esp,0x10
100006b8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100006bb:	83 ec 0c             	sub    esp,0xc
100006be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006c1:	e8 fc ff ff ff       	call   100006c2 <mkdir(char const*, int)+0x38>	100006c2: R_386_PC32	Directory::create()
100006c6:	83 c4 10             	add    esp,0x10
100006c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100006cd:	74 15                	je     100006e4 <mkdir(char const*, int)+0x5a>
100006cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100006d2:	8b 00                	mov    eax,DWORD PTR [eax]
100006d4:	83 c0 08             	add    eax,0x8
100006d7:	8b 00                	mov    eax,DWORD PTR [eax]
100006d9:	83 ec 0c             	sub    esp,0xc
100006dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006df:	ff d0                	call   eax
100006e1:	83 c4 10             	add    esp,0x10
100006e4:	b8 00 00 00 00       	mov    eax,0x0
100006e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100006ec:	c9                   	leave  
100006ed:	c3                   	ret    

100006ee <copytree(char*, char*)>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	53                   	push   ebx
100006f2:	81 ec 54 01 00 00    	sub    esp,0x154
100006f8:	83 ec 0c             	sub    esp,0xc
100006fb:	68 90 01 00 00       	push   0x190
10000700:	e8 fc ff ff ff       	call   10000701 <copytree(char*, char*)+0x13>	10000701: R_386_PC32	malloc
10000705:	83 c4 10             	add    esp,0x10
10000708:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000070b:	83 ec 0c             	sub    esp,0xc
1000070e:	68 90 01 00 00       	push   0x190
10000713:	e8 fc ff ff ff       	call   10000714 <copytree(char*, char*)+0x26>	10000714: R_386_PC32	malloc
10000718:	83 c4 10             	add    esp,0x10
1000071b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000071e:	83 ec 04             	sub    esp,0x4
10000721:	68 90 01 00 00       	push   0x190
10000726:	6a 00                	push   0x0
10000728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000072b:	e8 fc ff ff ff       	call   1000072c <copytree(char*, char*)+0x3e>	1000072c: R_386_PC32	memset
10000730:	83 c4 10             	add    esp,0x10
10000733:	83 ec 04             	sub    esp,0x4
10000736:	68 90 01 00 00       	push   0x190
1000073b:	6a 00                	push   0x0
1000073d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000740:	e8 fc ff ff ff       	call   10000741 <copytree(char*, char*)+0x53>	10000741: R_386_PC32	memset
10000745:	83 c4 10             	add    esp,0x10
10000748:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000074e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000751:	83 ec 0c             	sub    esp,0xc
10000754:	68 14 01 00 00       	push   0x114
10000759:	e8 fc ff ff ff       	call   1000075a <copytree(char*, char*)+0x6c>	1000075a: R_386_PC32	operator new(unsigned long)
1000075e:	83 c4 10             	add    esp,0x10
10000761:	89 c3                	mov    ebx,eax
10000763:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000768:	8b 00                	mov    eax,DWORD PTR [eax]
1000076a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
1000076d:	83 ec 04             	sub    esp,0x4
10000770:	50                   	push   eax
10000771:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000774:	53                   	push   ebx
10000775:	e8 fc ff ff ff       	call   10000776 <copytree(char*, char*)+0x88>	10000776: R_386_PC32	Directory::Directory(char const*, Process*)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000780:	83 ec 0c             	sub    esp,0xc
10000783:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000786:	e8 fc ff ff ff       	call   10000787 <copytree(char*, char*)+0x99>	10000787: R_386_PC32	Directory::open()
1000078b:	83 c4 10             	add    esp,0x10
1000078e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000791:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10000795:	74 34                	je     100007cb <copytree(char*, char*)+0xdd>
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	68 7b af 00 10       	push   0x1000af7b	1000079b: R_386_32	.text
1000079f:	e8 fc ff ff ff       	call   100007a0 <copytree(char*, char*)+0xb2>	100007a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100007a4:	83 c4 10             	add    esp,0x10
100007a7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
100007ab:	0f 84 90 03 00 00    	je     10000b41 <copytree(char*, char*)+0x453>
100007b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007b4:	8b 00                	mov    eax,DWORD PTR [eax]
100007b6:	83 c0 08             	add    eax,0x8
100007b9:	8b 00                	mov    eax,DWORD PTR [eax]
100007bb:	83 ec 0c             	sub    esp,0xc
100007be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007c1:	ff d0                	call   eax
100007c3:	83 c4 10             	add    esp,0x10
100007c6:	e9 76 03 00 00       	jmp    10000b41 <copytree(char*, char*)+0x453>
100007cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007ce:	8b 00                	mov    eax,DWORD PTR [eax]
100007d0:	83 c0 0c             	add    eax,0xc
100007d3:	8b 00                	mov    eax,DWORD PTR [eax]
100007d5:	83 ec 0c             	sub    esp,0xc
100007d8:	8d 95 b8 fe ff ff    	lea    edx,[ebp-0x148]
100007de:	52                   	push   edx
100007df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100007e2:	6a 00                	push   0x0
100007e4:	68 10 01 00 00       	push   0x110
100007e9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007ec:	ff d0                	call   eax
100007ee:	83 c4 20             	add    esp,0x20
100007f1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007f4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100007f8:	0f 85 fb 02 00 00    	jne    10000af9 <copytree(char*, char*)+0x40b>
100007fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000801:	83 c0 10             	add    eax,0x10
10000804:	83 ec 08             	sub    esp,0x8
10000807:	68 74 af 00 10       	push   0x1000af74	10000808: R_386_32	.text
1000080c:	50                   	push   eax
1000080d:	e8 fc ff ff ff       	call   1000080e <copytree(char*, char*)+0x120>	1000080e: R_386_PC32	strcmp
10000812:	83 c4 10             	add    esp,0x10
10000815:	85 c0                	test   eax,eax
10000817:	74 b2                	je     100007cb <copytree(char*, char*)+0xdd>
10000819:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000081c:	83 c0 10             	add    eax,0x10
1000081f:	83 ec 08             	sub    esp,0x8
10000822:	68 76 af 00 10       	push   0x1000af76	10000823: R_386_32	.text
10000827:	50                   	push   eax
10000828:	e8 fc ff ff ff       	call   10000829 <copytree(char*, char*)+0x13b>	10000829: R_386_PC32	strcmp
1000082d:	83 c4 10             	add    esp,0x10
10000830:	85 c0                	test   eax,eax
10000832:	74 97                	je     100007cb <copytree(char*, char*)+0xdd>
10000834:	83 ec 08             	sub    esp,0x8
10000837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000083d:	e8 fc ff ff ff       	call   1000083e <copytree(char*, char*)+0x150>	1000083e: R_386_PC32	strcpy
10000842:	83 c4 10             	add    esp,0x10
10000845:	83 ec 08             	sub    esp,0x8
10000848:	68 79 af 00 10       	push   0x1000af79	10000849: R_386_32	.text
1000084d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000850:	e8 fc ff ff ff       	call   10000851 <copytree(char*, char*)+0x163>	10000851: R_386_PC32	strcat
10000855:	83 c4 10             	add    esp,0x10
10000858:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000085b:	83 c0 10             	add    eax,0x10
1000085e:	83 ec 08             	sub    esp,0x8
10000861:	50                   	push   eax
10000862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000865:	e8 fc ff ff ff       	call   10000866 <copytree(char*, char*)+0x178>	10000866: R_386_PC32	strcat
1000086a:	83 c4 10             	add    esp,0x10
1000086d:	83 ec 08             	sub    esp,0x8
10000870:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000873:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000876:	e8 fc ff ff ff       	call   10000877 <copytree(char*, char*)+0x189>	10000877: R_386_PC32	strcpy
1000087b:	83 c4 10             	add    esp,0x10
1000087e:	83 ec 08             	sub    esp,0x8
10000881:	68 79 af 00 10       	push   0x1000af79	10000882: R_386_32	.text
10000886:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000889:	e8 fc ff ff ff       	call   1000088a <copytree(char*, char*)+0x19c>	1000088a: R_386_PC32	strcat
1000088e:	83 c4 10             	add    esp,0x10
10000891:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000894:	83 c0 10             	add    eax,0x10
10000897:	83 ec 08             	sub    esp,0x8
1000089a:	50                   	push   eax
1000089b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000089e:	e8 fc ff ff ff       	call   1000089f <copytree(char*, char*)+0x1b1>	1000089f: R_386_PC32	strcat
100008a3:	83 c4 10             	add    esp,0x10
100008a6:	83 ec 04             	sub    esp,0x4
100008a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100008af:	68 95 af 00 10       	push   0x1000af95	100008b0: R_386_32	.text
100008b4:	e8 fc ff ff ff       	call   100008b5 <copytree(char*, char*)+0x1c7>	100008b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100008b9:	83 c4 10             	add    esp,0x10
100008bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100008bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100008c2:	83 e0 02             	and    eax,0x2
100008c5:	85 c0                	test   eax,eax
100008c7:	74 47                	je     10000910 <copytree(char*, char*)+0x222>
100008c9:	83 ec 08             	sub    esp,0x8
100008cc:	68 c0 01 00 00       	push   0x1c0
100008d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008d4:	e8 fc ff ff ff       	call   100008d5 <copytree(char*, char*)+0x1e7>	100008d5: R_386_PC32	mkdir(char const*, int)
100008d9:	83 c4 10             	add    esp,0x10
100008dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100008df:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100008e3:	74 15                	je     100008fa <copytree(char*, char*)+0x20c>
100008e5:	83 ec 0c             	sub    esp,0xc
100008e8:	68 9f af 00 10       	push   0x1000af9f	100008e9: R_386_32	.text
100008ed:	e8 fc ff ff ff       	call   100008ee <copytree(char*, char*)+0x200>	100008ee: R_386_PC32	KePanic(char const*)
100008f2:	83 c4 10             	add    esp,0x10
100008f5:	e9 d1 fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
100008fa:	83 ec 08             	sub    esp,0x8
100008fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000903:	e8 fc ff ff ff       	call   10000904 <copytree(char*, char*)+0x216>	10000904: R_386_PC32	copytree(char*, char*)
10000908:	83 c4 10             	add    esp,0x10
1000090b:	e9 bb fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000910:	83 ec 0c             	sub    esp,0xc
10000913:	68 14 01 00 00       	push   0x114
10000918:	e8 fc ff ff ff       	call   10000919 <copytree(char*, char*)+0x22b>	10000919: R_386_PC32	operator new(unsigned long)
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 c3                	mov    ebx,eax
10000922:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000927:	8b 00                	mov    eax,DWORD PTR [eax]
10000929:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
1000092c:	83 ec 04             	sub    esp,0x4
1000092f:	50                   	push   eax
10000930:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000933:	53                   	push   ebx
10000934:	e8 fc ff ff ff       	call   10000935 <copytree(char*, char*)+0x247>	10000935: R_386_PC32	File::File(char const*, Process*)
10000939:	83 c4 10             	add    esp,0x10
1000093c:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000093f:	83 ec 08             	sub    esp,0x8
10000942:	6a 01                	push   0x1
10000944:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000947:	e8 fc ff ff ff       	call   10000948 <copytree(char*, char*)+0x25a>	10000948: R_386_PC32	File::open(FileOpenMode)
1000094c:	83 c4 10             	add    esp,0x10
1000094f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000953:	75 15                	jne    1000096a <copytree(char*, char*)+0x27c>
10000955:	83 ec 0c             	sub    esp,0xc
10000958:	68 b0 af 00 10       	push   0x1000afb0	10000959: R_386_32	.text
1000095d:	e8 fc ff ff ff       	call   1000095e <copytree(char*, char*)+0x270>	1000095e: R_386_PC32	KePanic(char const*)
10000962:	83 c4 10             	add    esp,0x10
10000965:	e9 8a 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
1000096a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000096e:	0f 84 57 fe ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000974:	83 ec 0c             	sub    esp,0xc
10000977:	68 14 01 00 00       	push   0x114
1000097c:	e8 fc ff ff ff       	call   1000097d <copytree(char*, char*)+0x28f>	1000097d: R_386_PC32	operator new(unsigned long)
10000981:	83 c4 10             	add    esp,0x10
10000984:	89 c3                	mov    ebx,eax
10000986:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000098b:	8b 00                	mov    eax,DWORD PTR [eax]
1000098d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
10000990:	83 ec 04             	sub    esp,0x4
10000993:	50                   	push   eax
10000994:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000997:	53                   	push   ebx
10000998:	e8 fc ff ff ff       	call   10000999 <copytree(char*, char*)+0x2ab>	10000999: R_386_PC32	File::File(char const*, Process*)
1000099d:	83 c4 10             	add    esp,0x10
100009a0:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
100009a3:	83 ec 08             	sub    esp,0x8
100009a6:	6a 12                	push   0x12
100009a8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009ab:	e8 fc ff ff ff       	call   100009ac <copytree(char*, char*)+0x2be>	100009ac: R_386_PC32	File::open(FileOpenMode)
100009b0:	83 c4 10             	add    esp,0x10
100009b3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
100009b7:	75 23                	jne    100009dc <copytree(char*, char*)+0x2ee>
100009b9:	83 ec 0c             	sub    esp,0xc
100009bc:	68 b0 af 00 10       	push   0x1000afb0	100009bd: R_386_32	.text
100009c1:	e8 fc ff ff ff       	call   100009c2 <copytree(char*, char*)+0x2d4>	100009c2: R_386_PC32	KePanic(char const*)
100009c6:	83 c4 10             	add    esp,0x10
100009c9:	83 ec 0c             	sub    esp,0xc
100009cc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009cf:	e8 fc ff ff ff       	call   100009d0 <copytree(char*, char*)+0x2e2>	100009d0: R_386_PC32	File::close()
100009d4:	83 c4 10             	add    esp,0x10
100009d7:	e9 18 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
100009dc:	83 ec 0c             	sub    esp,0xc
100009df:	68 00 10 00 00       	push   0x1000
100009e4:	e8 fc ff ff ff       	call   100009e5 <copytree(char*, char*)+0x2f7>	100009e5: R_386_PC32	malloc
100009e9:	83 c4 10             	add    esp,0x10
100009ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100009ef:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
100009f3:	75 31                	jne    10000a26 <copytree(char*, char*)+0x338>
100009f5:	83 ec 0c             	sub    esp,0xc
100009f8:	68 bf af 00 10       	push   0x1000afbf	100009f9: R_386_32	.text
100009fd:	e8 fc ff ff ff       	call   100009fe <copytree(char*, char*)+0x310>	100009fe: R_386_PC32	KePanic(char const*)
10000a02:	83 c4 10             	add    esp,0x10
10000a05:	83 ec 0c             	sub    esp,0xc
10000a08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000a0b:	e8 fc ff ff ff       	call   10000a0c <copytree(char*, char*)+0x31e>	10000a0c: R_386_PC32	free
10000a10:	83 c4 10             	add    esp,0x10
10000a13:	83 ec 0c             	sub    esp,0xc
10000a16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000a19:	e8 fc ff ff ff       	call   10000a1a <copytree(char*, char*)+0x32c>	10000a1a: R_386_PC32	free
10000a1e:	83 c4 10             	add    esp,0x10
10000a21:	e9 1c 01 00 00       	jmp    10000b42 <copytree(char*, char*)+0x454>
10000a26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000a29:	8b 00                	mov    eax,DWORD PTR [eax]
10000a2b:	83 c0 0c             	add    eax,0xc
10000a2e:	8b 00                	mov    eax,DWORD PTR [eax]
10000a30:	83 ec 0c             	sub    esp,0xc
10000a33:	8d 95 b4 fe ff ff    	lea    edx,[ebp-0x14c]
10000a39:	52                   	push   edx
10000a3a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a3d:	6a 00                	push   0x0
10000a3f:	68 00 10 00 00       	push   0x1000
10000a44:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000a47:	ff d0                	call   eax
10000a49:	83 c4 20             	add    esp,0x20
10000a4c:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a4f:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000a53:	75 37                	jne    10000a8c <copytree(char*, char*)+0x39e>
10000a55:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a58:	8b 00                	mov    eax,DWORD PTR [eax]
10000a5a:	83 c0 10             	add    eax,0x10
10000a5d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a5f:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a65:	99                   	cdq    
10000a66:	83 ec 0c             	sub    esp,0xc
10000a69:	8d 9d b0 fe ff ff    	lea    ebx,[ebp-0x150]
10000a6f:	53                   	push   ebx
10000a70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a73:	52                   	push   edx
10000a74:	50                   	push   eax
10000a75:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a78:	ff d1                	call   ecx
10000a7a:	83 c4 20             	add    esp,0x20
10000a7d:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a83:	3d 00 10 00 00       	cmp    eax,0x1000
10000a88:	75 05                	jne    10000a8f <copytree(char*, char*)+0x3a1>
10000a8a:	eb 9a                	jmp    10000a26 <copytree(char*, char*)+0x338>
10000a8c:	90                   	nop
10000a8d:	eb 01                	jmp    10000a90 <copytree(char*, char*)+0x3a2>
10000a8f:	90                   	nop
10000a90:	83 ec 0c             	sub    esp,0xc
10000a93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a96:	e8 fc ff ff ff       	call   10000a97 <copytree(char*, char*)+0x3a9>	10000a97: R_386_PC32	free
10000a9b:	83 c4 10             	add    esp,0x10
10000a9e:	83 ec 0c             	sub    esp,0xc
10000aa1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000aa4:	e8 fc ff ff ff       	call   10000aa5 <copytree(char*, char*)+0x3b7>	10000aa5: R_386_PC32	File::close()
10000aa9:	83 c4 10             	add    esp,0x10
10000aac:	83 ec 0c             	sub    esp,0xc
10000aaf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <copytree(char*, char*)+0x3c5>	10000ab3: R_386_PC32	File::close()
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000abe:	74 15                	je     10000ad5 <copytree(char*, char*)+0x3e7>
10000ac0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000ac3:	8b 00                	mov    eax,DWORD PTR [eax]
10000ac5:	83 c0 08             	add    eax,0x8
10000ac8:	8b 00                	mov    eax,DWORD PTR [eax]
10000aca:	83 ec 0c             	sub    esp,0xc
10000acd:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ad0:	ff d0                	call   eax
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10000ad9:	0f 84 ec fc ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000adf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000ae2:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae4:	83 c0 08             	add    eax,0x8
10000ae7:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae9:	83 ec 0c             	sub    esp,0xc
10000aec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000aef:	ff d0                	call   eax
10000af1:	83 c4 10             	add    esp,0x10
10000af4:	e9 d2 fc ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000af9:	90                   	nop
10000afa:	83 ec 0c             	sub    esp,0xc
10000afd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000b00:	e8 fc ff ff ff       	call   10000b01 <copytree(char*, char*)+0x413>	10000b01: R_386_PC32	free
10000b05:	83 c4 10             	add    esp,0x10
10000b08:	83 ec 0c             	sub    esp,0xc
10000b0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000b0e:	e8 fc ff ff ff       	call   10000b0f <copytree(char*, char*)+0x421>	10000b0f: R_386_PC32	free
10000b13:	83 c4 10             	add    esp,0x10
10000b16:	83 ec 0c             	sub    esp,0xc
10000b19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b1c:	e8 fc ff ff ff       	call   10000b1d <copytree(char*, char*)+0x42f>	10000b1d: R_386_PC32	Directory::close()
10000b21:	83 c4 10             	add    esp,0x10
10000b24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000b28:	74 18                	je     10000b42 <copytree(char*, char*)+0x454>
10000b2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000b2d:	8b 00                	mov    eax,DWORD PTR [eax]
10000b2f:	83 c0 08             	add    eax,0x8
10000b32:	8b 00                	mov    eax,DWORD PTR [eax]
10000b34:	83 ec 0c             	sub    esp,0xc
10000b37:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b3a:	ff d0                	call   eax
10000b3c:	83 c4 10             	add    esp,0x10
10000b3f:	eb 01                	jmp    10000b42 <copytree(char*, char*)+0x454>
10000b41:	90                   	nop
10000b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000b45:	c9                   	leave  
10000b46:	c3                   	ret    

10000b47 <backupTree(char*, unsigned short)>:
10000b47:	55                   	push   ebp
10000b48:	89 e5                	mov    ebp,esp
10000b4a:	57                   	push   edi
10000b4b:	56                   	push   esi
10000b4c:	53                   	push   ebx
10000b4d:	81 ec 8c 12 00 00    	sub    esp,0x128c
10000b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000b56:	66 89 85 74 ed ff ff 	mov    WORD PTR [ebp-0x128c],ax
10000b5d:	83 ec 0c             	sub    esp,0xc
10000b60:	68 90 01 00 00       	push   0x190
10000b65:	e8 fc ff ff ff       	call   10000b66 <backupTree(char*, unsigned short)+0x1f>	10000b66: R_386_PC32	malloc
10000b6a:	83 c4 10             	add    esp,0x10
10000b6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000b70:	83 ec 04             	sub    esp,0x4
10000b73:	68 90 01 00 00       	push   0x190
10000b78:	6a 00                	push   0x0
10000b7a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000b7d:	e8 fc ff ff ff       	call   10000b7e <backupTree(char*, unsigned short)+0x37>	10000b7e: R_386_PC32	memset
10000b82:	83 c4 10             	add    esp,0x10
10000b85:	8d 85 a8 fe ff ff    	lea    eax,[ebp-0x158]
10000b8b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000b8e:	83 ec 0c             	sub    esp,0xc
10000b91:	68 14 01 00 00       	push   0x114
10000b96:	e8 fc ff ff ff       	call   10000b97 <backupTree(char*, unsigned short)+0x50>	10000b97: R_386_PC32	operator new(unsigned long)
10000b9b:	83 c4 10             	add    esp,0x10
10000b9e:	89 c3                	mov    ebx,eax
10000ba0:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ba5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
10000baa:	83 ec 04             	sub    esp,0x4
10000bad:	50                   	push   eax
10000bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bb1:	53                   	push   ebx
10000bb2:	e8 fc ff ff ff       	call   10000bb3 <backupTree(char*, unsigned short)+0x6c>	10000bb3: R_386_PC32	Directory::Directory(char const*, Process*)
10000bb7:	83 c4 10             	add    esp,0x10
10000bba:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000bbd:	83 ec 0c             	sub    esp,0xc
10000bc0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bc3:	e8 fc ff ff ff       	call   10000bc4 <backupTree(char*, unsigned short)+0x7d>	10000bc4: R_386_PC32	Directory::open()
10000bc8:	83 c4 10             	add    esp,0x10
10000bcb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000bce:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000bd2:	74 34                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000bd4:	83 ec 0c             	sub    esp,0xc
10000bd7:	68 7b af 00 10       	push   0x1000af7b	10000bd8: R_386_32	.text
10000bdc:	e8 fc ff ff ff       	call   10000bdd <backupTree(char*, unsigned short)+0x96>	10000bdd: R_386_PC32	Dbg::kprintf(char const*, ...)
10000be1:	83 c4 10             	add    esp,0x10
10000be4:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10000be8:	0f 84 c8 05 00 00    	je     100011b6 <backupTree(char*, unsigned short)+0x66f>
10000bee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000bf1:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf3:	83 c0 08             	add    eax,0x8
10000bf6:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf8:	83 ec 0c             	sub    esp,0xc
10000bfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bfe:	ff d0                	call   eax
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	e9 af 05 00 00       	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
10000c08:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c0b:	8b 00                	mov    eax,DWORD PTR [eax]
10000c0d:	83 c0 0c             	add    eax,0xc
10000c10:	8b 00                	mov    eax,DWORD PTR [eax]
10000c12:	83 ec 0c             	sub    esp,0xc
10000c15:	8d 95 a4 fe ff ff    	lea    edx,[ebp-0x15c]
10000c1b:	52                   	push   edx
10000c1c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c1f:	6a 00                	push   0x0
10000c21:	68 10 01 00 00       	push   0x110
10000c26:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c29:	ff d0                	call   eax
10000c2b:	83 c4 20             	add    esp,0x20
10000c2e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c31:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10000c35:	0f 85 41 05 00 00    	jne    1000117c <backupTree(char*, unsigned short)+0x635>
10000c3b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c3e:	83 c0 10             	add    eax,0x10
10000c41:	83 ec 08             	sub    esp,0x8
10000c44:	68 74 af 00 10       	push   0x1000af74	10000c45: R_386_32	.text
10000c49:	50                   	push   eax
10000c4a:	e8 fc ff ff ff       	call   10000c4b <backupTree(char*, unsigned short)+0x104>	10000c4b: R_386_PC32	strcmp
10000c4f:	83 c4 10             	add    esp,0x10
10000c52:	85 c0                	test   eax,eax
10000c54:	74 b2                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c59:	83 c0 10             	add    eax,0x10
10000c5c:	83 ec 08             	sub    esp,0x8
10000c5f:	68 76 af 00 10       	push   0x1000af76	10000c60: R_386_32	.text
10000c64:	50                   	push   eax
10000c65:	e8 fc ff ff ff       	call   10000c66 <backupTree(char*, unsigned short)+0x11f>	10000c66: R_386_PC32	strcmp
10000c6a:	83 c4 10             	add    esp,0x10
10000c6d:	85 c0                	test   eax,eax
10000c6f:	74 97                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c71:	83 ec 08             	sub    esp,0x8
10000c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c77:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c7a:	e8 fc ff ff ff       	call   10000c7b <backupTree(char*, unsigned short)+0x134>	10000c7b: R_386_PC32	strcpy
10000c7f:	83 c4 10             	add    esp,0x10
10000c82:	83 ec 08             	sub    esp,0x8
10000c85:	68 79 af 00 10       	push   0x1000af79	10000c86: R_386_32	.text
10000c8a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c8d:	e8 fc ff ff ff       	call   10000c8e <backupTree(char*, unsigned short)+0x147>	10000c8e: R_386_PC32	strcat
10000c92:	83 c4 10             	add    esp,0x10
10000c95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c98:	83 c0 10             	add    eax,0x10
10000c9b:	83 ec 08             	sub    esp,0x8
10000c9e:	50                   	push   eax
10000c9f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ca2:	e8 fc ff ff ff       	call   10000ca3 <backupTree(char*, unsigned short)+0x15c>	10000ca3: R_386_PC32	strcat
10000ca7:	83 c4 10             	add    esp,0x10
10000caa:	66 c7 45 e6 bc ad    	mov    WORD PTR [ebp-0x1a],0xadbc
10000cb0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10000cb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000cba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cbd:	01 d0                	add    eax,edx
10000cbf:	83 c0 10             	add    eax,0x10
10000cc2:	8a 00                	mov    al,BYTE PTR [eax]
10000cc4:	84 c0                	test   al,al
10000cc6:	74 3c                	je     10000d04 <backupTree(char*, unsigned short)+0x1bd>
10000cc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000ccb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cce:	01 d0                	add    eax,edx
10000cd0:	83 c0 10             	add    eax,0x10
10000cd3:	8a 00                	mov    al,BYTE PTR [eax]
10000cd5:	66 0f be d0          	movsx  dx,al
10000cd9:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000cdd:	31 d0                	xor    eax,edx
10000cdf:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000ce3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000ce7:	c1 e0 03             	shl    eax,0x3
10000cea:	89 c2                	mov    edx,eax
10000cec:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000cf0:	c1 f8 0d             	sar    eax,0xd
10000cf3:	09 d0                	or     eax,edx
10000cf5:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000cf9:	66 81 6d e6 f1 06    	sub    WORD PTR [ebp-0x1a],0x6f1
10000cff:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10000d02:	eb b3                	jmp    10000cb7 <backupTree(char*, unsigned short)+0x170>
10000d04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000d0a:	83 e0 02             	and    eax,0x2
10000d0d:	85 c0                	test   eax,eax
10000d0f:	74 37                	je     10000d48 <backupTree(char*, unsigned short)+0x201>
10000d11:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d14:	83 c0 10             	add    eax,0x10
10000d17:	83 ec 08             	sub    esp,0x8
10000d1a:	68 c9 af 00 10       	push   0x1000afc9	10000d1b: R_386_32	.text
10000d1f:	50                   	push   eax
10000d20:	e8 fc ff ff ff       	call   10000d21 <backupTree(char*, unsigned short)+0x1da>	10000d21: R_386_PC32	strcmp
10000d25:	83 c4 10             	add    esp,0x10
10000d28:	85 c0                	test   eax,eax
10000d2a:	0f 84 d8 fe ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d30:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000d34:	83 ec 08             	sub    esp,0x8
10000d37:	50                   	push   eax
10000d38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000d3b:	e8 fc ff ff ff       	call   10000d3c <backupTree(char*, unsigned short)+0x1f5>	10000d3c: R_386_PC32	backupTree(char*, unsigned short)
10000d40:	83 c4 10             	add    esp,0x10
10000d43:	e9 c0 fe ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d48:	c6 85 a3 fe ff ff 00 	mov    BYTE PTR [ebp-0x15d],0x0
10000d4f:	83 ec 08             	sub    esp,0x8
10000d52:	68 d0 af 00 10       	push   0x1000afd0	10000d53: R_386_32	.text
10000d57:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d5d:	50                   	push   eax
10000d5e:	e8 fc ff ff ff       	call   10000d5f <backupTree(char*, unsigned short)+0x218>	10000d5f: R_386_PC32	strcpy
10000d63:	83 c4 10             	add    esp,0x10
10000d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10000d6c:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000d72:	83 ec 08             	sub    esp,0x8
10000d75:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000d7b:	50                   	push   eax
10000d7c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d82:	50                   	push   eax
10000d83:	e8 fc ff ff ff       	call   10000d84 <backupTree(char*, unsigned short)+0x23d>	10000d84: R_386_PC32	strcat
10000d88:	83 c4 10             	add    esp,0x10
10000d8b:	83 ec 04             	sub    esp,0x4
10000d8e:	6a 09                	push   0x9
10000d90:	6a 00                	push   0x0
10000d92:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000d98:	50                   	push   eax
10000d99:	e8 fc ff ff ff       	call   10000d9a <backupTree(char*, unsigned short)+0x253>	10000d9a: R_386_PC32	memset
10000d9e:	83 c4 10             	add    esp,0x10
10000da1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000da4:	83 c0 10             	add    eax,0x10
10000da7:	83 ec 04             	sub    esp,0x4
10000daa:	6a 08                	push   0x8
10000dac:	50                   	push   eax
10000dad:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000db3:	50                   	push   eax
10000db4:	e8 fc ff ff ff       	call   10000db5 <backupTree(char*, unsigned short)+0x26e>	10000db5: R_386_PC32	strncpyxx(char*, char const*, unsigned long)
10000db9:	83 c4 10             	add    esp,0x10
10000dbc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000dc3:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000dc7:	0f 8f c5 00 00 00    	jg     10000e92 <backupTree(char*, unsigned short)+0x34b>
10000dcd:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000dd3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000dd6:	01 d0                	add    eax,edx
10000dd8:	8a 00                	mov    al,BYTE PTR [eax]
10000dda:	3c 60                	cmp    al,0x60
10000ddc:	7e 30                	jle    10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000dde:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000de4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000de7:	01 d0                	add    eax,edx
10000de9:	8a 00                	mov    al,BYTE PTR [eax]
10000deb:	3c 7a                	cmp    al,0x7a
10000ded:	7f 1f                	jg     10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000def:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000df5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000df8:	01 d0                	add    eax,edx
10000dfa:	8a 00                	mov    al,BYTE PTR [eax]
10000dfc:	83 e8 20             	sub    eax,0x20
10000dff:	88 c2                	mov    dl,al
10000e01:	8d 8d 99 fe ff ff    	lea    ecx,[ebp-0x167]
10000e07:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e0a:	01 c8                	add    eax,ecx
10000e0c:	88 10                	mov    BYTE PTR [eax],dl
10000e0e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e17:	01 d0                	add    eax,edx
10000e19:	8a 00                	mov    al,BYTE PTR [eax]
10000e1b:	3c 59                	cmp    al,0x59
10000e1d:	75 0e                	jne    10000e2d <backupTree(char*, unsigned short)+0x2e6>
10000e1f:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e25:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e28:	01 d0                	add    eax,edx
10000e2a:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e2d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e33:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e36:	01 d0                	add    eax,edx
10000e38:	8a 00                	mov    al,BYTE PTR [eax]
10000e3a:	3c 5a                	cmp    al,0x5a
10000e3c:	75 0e                	jne    10000e4c <backupTree(char*, unsigned short)+0x305>
10000e3e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e47:	01 d0                	add    eax,edx
10000e49:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e4c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e52:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e55:	01 d0                	add    eax,edx
10000e57:	8a 00                	mov    al,BYTE PTR [eax]
10000e59:	3c 20                	cmp    al,0x20
10000e5b:	75 0e                	jne    10000e6b <backupTree(char*, unsigned short)+0x324>
10000e5d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e63:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e66:	01 d0                	add    eax,edx
10000e68:	c6 00 59             	mov    BYTE PTR [eax],0x59
10000e6b:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e74:	01 d0                	add    eax,edx
10000e76:	8a 00                	mov    al,BYTE PTR [eax]
10000e78:	3c 2e                	cmp    al,0x2e
10000e7a:	75 0e                	jne    10000e8a <backupTree(char*, unsigned short)+0x343>
10000e7c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e82:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e85:	01 d0                	add    eax,edx
10000e87:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10000e8a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10000e8d:	e9 31 ff ff ff       	jmp    10000dc3 <backupTree(char*, unsigned short)+0x27c>
10000e92:	83 ec 08             	sub    esp,0x8
10000e95:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000e9b:	50                   	push   eax
10000e9c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ea2:	50                   	push   eax
10000ea3:	e8 fc ff ff ff       	call   10000ea4 <backupTree(char*, unsigned short)+0x35d>	10000ea4: R_386_PC32	strcat
10000ea8:	83 c4 10             	add    esp,0x10
10000eab:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000eae:	83 c0 10             	add    eax,0x10
10000eb1:	83 ec 0c             	sub    esp,0xc
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <backupTree(char*, unsigned short)+0x36f>	10000eb6: R_386_PC32	strlen
10000eba:	83 c4 10             	add    esp,0x10
10000ebd:	83 c0 41             	add    eax,0x41
10000ec0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000ec6:	83 ec 08             	sub    esp,0x8
10000ec9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000ecf:	50                   	push   eax
10000ed0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ed6:	50                   	push   eax
10000ed7:	e8 fc ff ff ff       	call   10000ed8 <backupTree(char*, unsigned short)+0x391>	10000ed8: R_386_PC32	strcat
10000edc:	83 c4 10             	add    esp,0x10
10000edf:	83 ec 08             	sub    esp,0x8
10000ee2:	68 74 af 00 10       	push   0x1000af74	10000ee3: R_386_32	.text
10000ee7:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000eed:	50                   	push   eax
10000eee:	e8 fc ff ff ff       	call   10000eef <backupTree(char*, unsigned short)+0x3a8>	10000eef: R_386_PC32	strcat
10000ef3:	83 c4 10             	add    esp,0x10
10000ef6:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000efa:	25 65 07 00 00       	and    eax,0x765
10000eff:	33 85 74 ed ff ff    	xor    eax,DWORD PTR [ebp-0x128c]
10000f05:	66 89 45 c6          	mov    WORD PTR [ebp-0x3a],ax
10000f09:	8d 85 88 fe ff ff    	lea    eax,[ebp-0x178]
10000f0f:	bb e9 af 00 10       	mov    ebx,0x1000afe9	10000f10: R_386_32	.text
10000f14:	ba 11 00 00 00       	mov    edx,0x11
10000f19:	89 c7                	mov    edi,eax
10000f1b:	89 de                	mov    esi,ebx
10000f1d:	89 d1                	mov    ecx,edx
10000f1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000f21:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f25:	83 e0 0f             	and    eax,0xf
10000f28:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f2f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f35:	83 ec 08             	sub    esp,0x8
10000f38:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f3e:	50                   	push   eax
10000f3f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f45:	50                   	push   eax
10000f46:	e8 fc ff ff ff       	call   10000f47 <backupTree(char*, unsigned short)+0x400>	10000f47: R_386_PC32	strcat
10000f4b:	83 c4 10             	add    esp,0x10
10000f4e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f52:	c1 f8 04             	sar    eax,0x4
10000f55:	83 e0 0f             	and    eax,0xf
10000f58:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f5f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f65:	83 ec 08             	sub    esp,0x8
10000f68:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f6e:	50                   	push   eax
10000f6f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f75:	50                   	push   eax
10000f76:	e8 fc ff ff ff       	call   10000f77 <backupTree(char*, unsigned short)+0x430>	10000f77: R_386_PC32	strcat
10000f7b:	83 c4 10             	add    esp,0x10
10000f7e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f82:	c1 f8 08             	sar    eax,0x8
10000f85:	83 e0 0f             	and    eax,0xf
10000f88:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f8f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f95:	83 ec 08             	sub    esp,0x8
10000f98:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f9e:	50                   	push   eax
10000f9f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fa5:	50                   	push   eax
10000fa6:	e8 fc ff ff ff       	call   10000fa7 <backupTree(char*, unsigned short)+0x460>	10000fa7: R_386_PC32	strcat
10000fab:	83 c4 10             	add    esp,0x10
10000fae:	66 8b 45 c6          	mov    ax,WORD PTR [ebp-0x3a]
10000fb2:	66 c1 e8 0c          	shr    ax,0xc
10000fb6:	0f b7 c0             	movzx  eax,ax
10000fb9:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000fc0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000fc6:	83 ec 08             	sub    esp,0x8
10000fc9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000fcf:	50                   	push   eax
10000fd0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fd6:	50                   	push   eax
10000fd7:	e8 fc ff ff ff       	call   10000fd8 <backupTree(char*, unsigned short)+0x491>	10000fd8: R_386_PC32	strcat
10000fdc:	83 c4 10             	add    esp,0x10
10000fdf:	83 ec 0c             	sub    esp,0xc
10000fe2:	68 14 01 00 00       	push   0x114
10000fe7:	e8 fc ff ff ff       	call   10000fe8 <backupTree(char*, unsigned short)+0x4a1>	10000fe8: R_386_PC32	operator new(unsigned long)
10000fec:	83 c4 10             	add    esp,0x10
10000fef:	89 c3                	mov    ebx,eax
10000ff1:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ff6:	8b 00                	mov    eax,DWORD PTR [eax]
10000ff8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
10000ffb:	83 ec 04             	sub    esp,0x4
10000ffe:	50                   	push   eax
10000fff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001002:	53                   	push   ebx
10001003:	e8 fc ff ff ff       	call   10001004 <backupTree(char*, unsigned short)+0x4bd>	10001004: R_386_PC32	File::File(char const*, Process*)
10001008:	83 c4 10             	add    esp,0x10
1000100b:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
1000100e:	83 ec 08             	sub    esp,0x8
10001011:	6a 01                	push   0x1
10001013:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001016:	e8 fc ff ff ff       	call   10001017 <backupTree(char*, unsigned short)+0x4d0>	10001017: R_386_PC32	File::open(FileOpenMode)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001022:	75 15                	jne    10001039 <backupTree(char*, unsigned short)+0x4f2>
10001024:	83 ec 0c             	sub    esp,0xc
10001027:	68 b0 af 00 10       	push   0x1000afb0	10001028: R_386_32	.text
1000102c:	e8 fc ff ff ff       	call   1000102d <backupTree(char*, unsigned short)+0x4e6>	1000102d: R_386_PC32	KePanic(char const*)
10001031:	83 c4 10             	add    esp,0x10
10001034:	e9 3e 01 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
10001039:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
1000103d:	0f 84 c5 fb ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001043:	83 ec 0c             	sub    esp,0xc
10001046:	68 14 01 00 00       	push   0x114
1000104b:	e8 fc ff ff ff       	call   1000104c <backupTree(char*, unsigned short)+0x505>	1000104c: R_386_PC32	operator new(unsigned long)
10001050:	83 c4 10             	add    esp,0x10
10001053:	89 c3                	mov    ebx,eax
10001055:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000105a:	8b 00                	mov    eax,DWORD PTR [eax]
1000105c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
1000105f:	83 ec 04             	sub    esp,0x4
10001062:	50                   	push   eax
10001063:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10001069:	50                   	push   eax
1000106a:	53                   	push   ebx
1000106b:	e8 fc ff ff ff       	call   1000106c <backupTree(char*, unsigned short)+0x525>	1000106c: R_386_PC32	File::File(char const*, Process*)
10001070:	83 c4 10             	add    esp,0x10
10001073:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10001076:	83 ec 08             	sub    esp,0x8
10001079:	6a 12                	push   0x12
1000107b:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000107e:	e8 fc ff ff ff       	call   1000107f <backupTree(char*, unsigned short)+0x538>	1000107f: R_386_PC32	File::open(FileOpenMode)
10001083:	83 c4 10             	add    esp,0x10
10001086:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000108a:	75 23                	jne    100010af <backupTree(char*, unsigned short)+0x568>
1000108c:	83 ec 0c             	sub    esp,0xc
1000108f:	68 b0 af 00 10       	push   0x1000afb0	10001090: R_386_32	.text
10001094:	e8 fc ff ff ff       	call   10001095 <backupTree(char*, unsigned short)+0x54e>	10001095: R_386_PC32	KePanic(char const*)
10001099:	83 c4 10             	add    esp,0x10
1000109c:	83 ec 0c             	sub    esp,0xc
1000109f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
100010a2:	e8 fc ff ff ff       	call   100010a3 <backupTree(char*, unsigned short)+0x55c>	100010a3: R_386_PC32	File::close()
100010a7:	83 c4 10             	add    esp,0x10
100010aa:	e9 c8 00 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
100010af:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100010b2:	8b 00                	mov    eax,DWORD PTR [eax]
100010b4:	83 c0 0c             	add    eax,0xc
100010b7:	8b 00                	mov    eax,DWORD PTR [eax]
100010b9:	83 ec 0c             	sub    esp,0xc
100010bc:	8d 95 84 fe ff ff    	lea    edx,[ebp-0x17c]
100010c2:	52                   	push   edx
100010c3:	8d 95 80 ee ff ff    	lea    edx,[ebp-0x1180]
100010c9:	52                   	push   edx
100010ca:	6a 00                	push   0x0
100010cc:	68 00 10 00 00       	push   0x1000
100010d1:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100010d4:	ff d0                	call   eax
100010d6:	83 c4 20             	add    esp,0x20
100010d9:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100010dc:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100010e0:	75 3b                	jne    1000111d <backupTree(char*, unsigned short)+0x5d6>
100010e2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100010e5:	8b 00                	mov    eax,DWORD PTR [eax]
100010e7:	83 c0 10             	add    eax,0x10
100010ea:	8b 08                	mov    ecx,DWORD PTR [eax]
100010ec:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
100010f2:	99                   	cdq    
100010f3:	83 ec 0c             	sub    esp,0xc
100010f6:	8d 9d 80 fe ff ff    	lea    ebx,[ebp-0x180]
100010fc:	53                   	push   ebx
100010fd:	8d 9d 80 ee ff ff    	lea    ebx,[ebp-0x1180]
10001103:	53                   	push   ebx
10001104:	52                   	push   edx
10001105:	50                   	push   eax
10001106:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001109:	ff d1                	call   ecx
1000110b:	83 c4 20             	add    esp,0x20
1000110e:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
10001114:	3d 00 10 00 00       	cmp    eax,0x1000
10001119:	75 05                	jne    10001120 <backupTree(char*, unsigned short)+0x5d9>
1000111b:	eb 92                	jmp    100010af <backupTree(char*, unsigned short)+0x568>
1000111d:	90                   	nop
1000111e:	eb 01                	jmp    10001121 <backupTree(char*, unsigned short)+0x5da>
10001120:	90                   	nop
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001127:	e8 fc ff ff ff       	call   10001128 <backupTree(char*, unsigned short)+0x5e1>	10001128: R_386_PC32	File::close()
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	83 ec 0c             	sub    esp,0xc
10001132:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001135:	e8 fc ff ff ff       	call   10001136 <backupTree(char*, unsigned short)+0x5ef>	10001136: R_386_PC32	File::close()
1000113a:	83 c4 10             	add    esp,0x10
1000113d:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001141:	74 15                	je     10001158 <backupTree(char*, unsigned short)+0x611>
10001143:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001146:	8b 00                	mov    eax,DWORD PTR [eax]
10001148:	83 c0 08             	add    eax,0x8
1000114b:	8b 00                	mov    eax,DWORD PTR [eax]
1000114d:	83 ec 0c             	sub    esp,0xc
10001150:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001153:	ff d0                	call   eax
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000115c:	0f 84 a6 fa ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001162:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10001165:	8b 00                	mov    eax,DWORD PTR [eax]
10001167:	83 c0 08             	add    eax,0x8
1000116a:	8b 00                	mov    eax,DWORD PTR [eax]
1000116c:	83 ec 0c             	sub    esp,0xc
1000116f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001172:	ff d0                	call   eax
10001174:	83 c4 10             	add    esp,0x10
10001177:	e9 8c fa ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
1000117c:	90                   	nop
1000117d:	83 ec 0c             	sub    esp,0xc
10001180:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001183:	e8 fc ff ff ff       	call   10001184 <backupTree(char*, unsigned short)+0x63d>	10001184: R_386_PC32	free
10001188:	83 c4 10             	add    esp,0x10
1000118b:	83 ec 0c             	sub    esp,0xc
1000118e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001191:	e8 fc ff ff ff       	call   10001192 <backupTree(char*, unsigned short)+0x64b>	10001192: R_386_PC32	Directory::close()
10001196:	83 c4 10             	add    esp,0x10
10001199:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
1000119d:	74 18                	je     100011b7 <backupTree(char*, unsigned short)+0x670>
1000119f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100011a2:	8b 00                	mov    eax,DWORD PTR [eax]
100011a4:	83 c0 08             	add    eax,0x8
100011a7:	8b 00                	mov    eax,DWORD PTR [eax]
100011a9:	83 ec 0c             	sub    esp,0xc
100011ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011af:	ff d0                	call   eax
100011b1:	83 c4 10             	add    esp,0x10
100011b4:	eb 01                	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
100011b6:	90                   	nop
100011b7:	8d 65 f4             	lea    esp,[ebp-0xc]
100011ba:	5b                   	pop    ebx
100011bb:	5e                   	pop    esi
100011bc:	5f                   	pop    edi
100011bd:	5d                   	pop    ebp
100011be:	c3                   	ret    

100011bf <createUser(char const*)>:
100011bf:	55                   	push   ebp
100011c0:	89 e5                	mov    ebp,esp
100011c2:	81 ec 08 01 00 00    	sub    esp,0x108
100011c8:	68 fa af 00 10       	push   0x1000affa	100011c9: R_386_32	.text
100011cd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011d3:	50                   	push   eax
100011d4:	e8 fc ff ff ff       	call   100011d5 <createUser(char const*)+0x16>	100011d5: R_386_PC32	strcpy
100011d9:	83 c4 08             	add    esp,0x8
100011dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011df:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011e5:	50                   	push   eax
100011e6:	e8 fc ff ff ff       	call   100011e7 <createUser(char const*)+0x28>	100011e7: R_386_PC32	strcat
100011eb:	83 c4 08             	add    esp,0x8
100011ee:	83 ec 08             	sub    esp,0x8
100011f1:	68 c0 01 00 00       	push   0x1c0
100011f6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011fc:	50                   	push   eax
100011fd:	e8 fc ff ff ff       	call   100011fe <createUser(char const*)+0x3f>	100011fe: R_386_PC32	mkdir(char const*, int)
10001202:	83 c4 10             	add    esp,0x10
10001205:	83 ec 08             	sub    esp,0x8
10001208:	68 04 b0 00 10       	push   0x1000b004	10001209: R_386_32	.text
1000120d:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001213:	50                   	push   eax
10001214:	e8 fc ff ff ff       	call   10001215 <createUser(char const*)+0x56>	10001215: R_386_PC32	strcat
10001219:	83 c4 10             	add    esp,0x10
1000121c:	83 ec 08             	sub    esp,0x8
1000121f:	68 c0 01 00 00       	push   0x1c0
10001224:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000122a:	50                   	push   eax
1000122b:	e8 fc ff ff ff       	call   1000122c <createUser(char const*)+0x6d>	1000122c: R_386_PC32	mkdir(char const*, int)
10001230:	83 c4 10             	add    esp,0x10
10001233:	83 ec 08             	sub    esp,0x8
10001236:	68 fa af 00 10       	push   0x1000affa	10001237: R_386_32	.text
1000123b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001241:	50                   	push   eax
10001242:	e8 fc ff ff ff       	call   10001243 <createUser(char const*)+0x84>	10001243: R_386_PC32	strcpy
10001247:	83 c4 10             	add    esp,0x10
1000124a:	83 ec 08             	sub    esp,0x8
1000124d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001250:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001256:	50                   	push   eax
10001257:	e8 fc ff ff ff       	call   10001258 <createUser(char const*)+0x99>	10001258: R_386_PC32	strcat
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	83 ec 08             	sub    esp,0x8
10001262:	68 0d b0 00 10       	push   0x1000b00d	10001263: R_386_32	.text
10001267:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000126d:	50                   	push   eax
1000126e:	e8 fc ff ff ff       	call   1000126f <createUser(char const*)+0xb0>	1000126f: R_386_PC32	strcat
10001273:	83 c4 10             	add    esp,0x10
10001276:	83 ec 08             	sub    esp,0x8
10001279:	68 c0 01 00 00       	push   0x1c0
1000127e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001284:	50                   	push   eax
10001285:	e8 fc ff ff ff       	call   10001286 <createUser(char const*)+0xc7>	10001286: R_386_PC32	mkdir(char const*, int)
1000128a:	83 c4 10             	add    esp,0x10
1000128d:	83 ec 08             	sub    esp,0x8
10001290:	68 fa af 00 10       	push   0x1000affa	10001291: R_386_32	.text
10001295:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000129b:	50                   	push   eax
1000129c:	e8 fc ff ff ff       	call   1000129d <createUser(char const*)+0xde>	1000129d: R_386_PC32	strcpy
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	83 ec 08             	sub    esp,0x8
100012a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012aa:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012b0:	50                   	push   eax
100012b1:	e8 fc ff ff ff       	call   100012b2 <createUser(char const*)+0xf3>	100012b2: R_386_PC32	strcat
100012b6:	83 c4 10             	add    esp,0x10
100012b9:	83 ec 08             	sub    esp,0x8
100012bc:	68 18 b0 00 10       	push   0x1000b018	100012bd: R_386_32	.text
100012c1:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012c7:	50                   	push   eax
100012c8:	e8 fc ff ff ff       	call   100012c9 <createUser(char const*)+0x10a>	100012c9: R_386_PC32	strcat
100012cd:	83 c4 10             	add    esp,0x10
100012d0:	83 ec 08             	sub    esp,0x8
100012d3:	68 c0 01 00 00       	push   0x1c0
100012d8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <createUser(char const*)+0x121>	100012e0: R_386_PC32	mkdir(char const*, int)
100012e4:	83 c4 10             	add    esp,0x10
100012e7:	83 ec 08             	sub    esp,0x8
100012ea:	68 fa af 00 10       	push   0x1000affa	100012eb: R_386_32	.text
100012ef:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012f5:	50                   	push   eax
100012f6:	e8 fc ff ff ff       	call   100012f7 <createUser(char const*)+0x138>	100012f7: R_386_PC32	strcpy
100012fb:	83 c4 10             	add    esp,0x10
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001304:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000130a:	50                   	push   eax
1000130b:	e8 fc ff ff ff       	call   1000130c <createUser(char const*)+0x14d>	1000130c: R_386_PC32	strcat
10001310:	83 c4 10             	add    esp,0x10
10001313:	83 ec 08             	sub    esp,0x8
10001316:	68 23 b0 00 10       	push   0x1000b023	10001317: R_386_32	.text
1000131b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001321:	50                   	push   eax
10001322:	e8 fc ff ff ff       	call   10001323 <createUser(char const*)+0x164>	10001323: R_386_PC32	strcat
10001327:	83 c4 10             	add    esp,0x10
1000132a:	83 ec 08             	sub    esp,0x8
1000132d:	68 c0 01 00 00       	push   0x1c0
10001332:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001338:	50                   	push   eax
10001339:	e8 fc ff ff ff       	call   1000133a <createUser(char const*)+0x17b>	1000133a: R_386_PC32	mkdir(char const*, int)
1000133e:	83 c4 10             	add    esp,0x10
10001341:	83 ec 08             	sub    esp,0x8
10001344:	68 fa af 00 10       	push   0x1000affa	10001345: R_386_32	.text
10001349:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000134f:	50                   	push   eax
10001350:	e8 fc ff ff ff       	call   10001351 <createUser(char const*)+0x192>	10001351: R_386_PC32	strcpy
10001355:	83 c4 10             	add    esp,0x10
10001358:	83 ec 08             	sub    esp,0x8
1000135b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000135e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001364:	50                   	push   eax
10001365:	e8 fc ff ff ff       	call   10001366 <createUser(char const*)+0x1a7>	10001366: R_386_PC32	strcat
1000136a:	83 c4 10             	add    esp,0x10
1000136d:	83 ec 08             	sub    esp,0x8
10001370:	68 2d b0 00 10       	push   0x1000b02d	10001371: R_386_32	.text
10001375:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000137b:	50                   	push   eax
1000137c:	e8 fc ff ff ff       	call   1000137d <createUser(char const*)+0x1be>	1000137d: R_386_PC32	strcat
10001381:	83 c4 10             	add    esp,0x10
10001384:	83 ec 08             	sub    esp,0x8
10001387:	68 c0 01 00 00       	push   0x1c0
1000138c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001392:	50                   	push   eax
10001393:	e8 fc ff ff ff       	call   10001394 <createUser(char const*)+0x1d5>	10001394: R_386_PC32	mkdir(char const*, int)
10001398:	83 c4 10             	add    esp,0x10
1000139b:	83 ec 08             	sub    esp,0x8
1000139e:	68 fa af 00 10       	push   0x1000affa	1000139f: R_386_32	.text
100013a3:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013a9:	50                   	push   eax
100013aa:	e8 fc ff ff ff       	call   100013ab <createUser(char const*)+0x1ec>	100013ab: R_386_PC32	strcpy
100013af:	83 c4 10             	add    esp,0x10
100013b2:	83 ec 08             	sub    esp,0x8
100013b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013b8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013be:	50                   	push   eax
100013bf:	e8 fc ff ff ff       	call   100013c0 <createUser(char const*)+0x201>	100013c0: R_386_PC32	strcat
100013c4:	83 c4 10             	add    esp,0x10
100013c7:	83 ec 08             	sub    esp,0x8
100013ca:	68 38 b0 00 10       	push   0x1000b038	100013cb: R_386_32	.text
100013cf:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013d5:	50                   	push   eax
100013d6:	e8 fc ff ff ff       	call   100013d7 <createUser(char const*)+0x218>	100013d7: R_386_PC32	strcat
100013db:	83 c4 10             	add    esp,0x10
100013de:	83 ec 08             	sub    esp,0x8
100013e1:	68 c0 01 00 00       	push   0x1c0
100013e6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013ec:	50                   	push   eax
100013ed:	e8 fc ff ff ff       	call   100013ee <createUser(char const*)+0x22f>	100013ee: R_386_PC32	mkdir(char const*, int)
100013f2:	83 c4 10             	add    esp,0x10
100013f5:	83 ec 08             	sub    esp,0x8
100013f8:	68 fa af 00 10       	push   0x1000affa	100013f9: R_386_32	.text
100013fd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001403:	50                   	push   eax
10001404:	e8 fc ff ff ff       	call   10001405 <createUser(char const*)+0x246>	10001405: R_386_PC32	strcpy
10001409:	83 c4 10             	add    esp,0x10
1000140c:	83 ec 08             	sub    esp,0x8
1000140f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001412:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001418:	50                   	push   eax
10001419:	e8 fc ff ff ff       	call   1000141a <createUser(char const*)+0x25b>	1000141a: R_386_PC32	strcat
1000141e:	83 c4 10             	add    esp,0x10
10001421:	83 ec 08             	sub    esp,0x8
10001424:	68 3f b0 00 10       	push   0x1000b03f	10001425: R_386_32	.text
10001429:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000142f:	50                   	push   eax
10001430:	e8 fc ff ff ff       	call   10001431 <createUser(char const*)+0x272>	10001431: R_386_PC32	strcat
10001435:	83 c4 10             	add    esp,0x10
10001438:	83 ec 08             	sub    esp,0x8
1000143b:	68 c0 01 00 00       	push   0x1c0
10001440:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001446:	50                   	push   eax
10001447:	e8 fc ff ff ff       	call   10001448 <createUser(char const*)+0x289>	10001448: R_386_PC32	mkdir(char const*, int)
1000144c:	83 c4 10             	add    esp,0x10
1000144f:	83 ec 08             	sub    esp,0x8
10001452:	68 47 b0 00 10       	push   0x1000b047	10001453: R_386_32	.text
10001457:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000145d:	50                   	push   eax
1000145e:	e8 fc ff ff ff       	call   1000145f <createUser(char const*)+0x2a0>	1000145f: R_386_PC32	strcpy
10001463:	83 c4 10             	add    esp,0x10
10001466:	83 ec 08             	sub    esp,0x8
10001469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000146c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001472:	50                   	push   eax
10001473:	e8 fc ff ff ff       	call   10001474 <createUser(char const*)+0x2b5>	10001474: R_386_PC32	strcat
10001478:	83 c4 10             	add    esp,0x10
1000147b:	83 ec 08             	sub    esp,0x8
1000147e:	68 c0 01 00 00       	push   0x1c0
10001483:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001489:	50                   	push   eax
1000148a:	e8 fc ff ff ff       	call   1000148b <createUser(char const*)+0x2cc>	1000148b: R_386_PC32	mkdir(char const*, int)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	83 ec 08             	sub    esp,0x8
10001495:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000149b:	50                   	push   eax
1000149c:	68 60 b0 00 10       	push   0x1000b060	1000149d: R_386_32	.text
100014a1:	e8 fc ff ff ff       	call   100014a2 <createUser(char const*)+0x2e3>	100014a2: R_386_PC32	copytree(char*, char*)
100014a6:	83 c4 10             	add    esp,0x10
100014a9:	90                   	nop
100014aa:	c9                   	leave  
100014ab:	c3                   	ret    

100014ac <drawBootScreen()>:
100014ac:	55                   	push   ebp
100014ad:	89 e5                	mov    ebp,esp
100014af:	83 ec 18             	sub    esp,0x18
100014b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100014b3: R_386_32	term
100014b7:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	100014b9: R_386_32	safemode
100014bd:	84 d2                	test   dl,dl
100014bf:	74 07                	je     100014c8 <drawBootScreen()+0x1c>
100014c1:	ba 00 00 00 00       	mov    edx,0x0
100014c6:	eb 05                	jmp    100014cd <drawBootScreen()+0x21>
100014c8:	ba 0b 00 00 00       	mov    edx,0xb
100014cd:	83 ec 08             	sub    esp,0x8
100014d0:	52                   	push   edx
100014d1:	50                   	push   eax
100014d2:	e8 fc ff ff ff       	call   100014d3 <drawBootScreen()+0x27>	100014d3: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
100014d7:	83 c4 10             	add    esp,0x10
100014da:	a1 00 00 00 00       	mov    eax,ds:0x0	100014db: R_386_32	term
100014df:	83 ec 08             	sub    esp,0x8
100014e2:	6a 00                	push   0x0
100014e4:	50                   	push   eax
100014e5:	e8 fc ff ff ff       	call   100014e6 <drawBootScreen()+0x3a>	100014e6: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
100014ea:	83 c4 10             	add    esp,0x10
100014ed:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ee: R_386_32	term
100014f2:	83 ec 0c             	sub    esp,0xc
100014f5:	50                   	push   eax
100014f6:	e8 fc ff ff ff       	call   100014f7 <drawBootScreen()+0x4b>	100014f7: R_386_PC32	VgaText::clearScreen()
100014fb:	83 c4 10             	add    esp,0x10
100014fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ff: R_386_32	term
10001503:	83 ec 08             	sub    esp,0x8
10001506:	68 7f b0 00 10       	push   0x1000b07f	10001507: R_386_32	.text
1000150b:	50                   	push   eax
1000150c:	e8 fc ff ff ff       	call   1000150d <drawBootScreen()+0x61>	1000150d: R_386_PC32	VgaText::setTitle(char*)
10001511:	83 c4 10             	add    esp,0x10
10001514:	a1 00 00 00 00       	mov    eax,ds:0x0	10001515: R_386_32	term
10001519:	83 ec 08             	sub    esp,0x8
1000151c:	6a 00                	push   0x0
1000151e:	50                   	push   eax
1000151f:	e8 fc ff ff ff       	call   10001520 <drawBootScreen()+0x74>	10001520: R_386_PC32	VgaText::setTitleColour(VgaColour)
10001524:	83 c4 10             	add    esp,0x10
10001527:	a1 00 00 00 00       	mov    eax,ds:0x0	10001528: R_386_32	term
1000152c:	83 ec 08             	sub    esp,0x8
1000152f:	6a 00                	push   0x0
10001531:	50                   	push   eax
10001532:	e8 fc ff ff ff       	call   10001533 <drawBootScreen()+0x87>	10001533: R_386_PC32	VgaText::setTitleTextColour(VgaColour)
10001537:	83 c4 10             	add    esp,0x10
1000153a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000153b: R_386_32	term
1000153f:	83 ec 04             	sub    esp,0x4
10001542:	6a 00                	push   0x0
10001544:	6a 00                	push   0x0
10001546:	50                   	push   eax
10001547:	e8 fc ff ff ff       	call   10001548 <drawBootScreen()+0x9c>	10001548: R_386_PC32	VgaText::setCursor(int, int)
1000154c:	83 c4 10             	add    esp,0x10
1000154f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001556:	83 7d f4 4f          	cmp    DWORD PTR [ebp-0xc],0x4f
1000155a:	7f 19                	jg     10001575 <drawBootScreen()+0xc9>
1000155c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000155d: R_386_32	term
10001561:	6a 00                	push   0x0
10001563:	6a 00                	push   0x0
10001565:	6a 20                	push   0x20
10001567:	50                   	push   eax
10001568:	e8 fc ff ff ff       	call   10001569 <drawBootScreen()+0xbd>	10001569: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000156d:	83 c4 10             	add    esp,0x10
10001570:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001573:	eb e1                	jmp    10001556 <drawBootScreen()+0xaa>
10001575:	a0 00 00 00 00       	mov    al,ds:0x0	10001576: R_386_32	showSidebar
1000157a:	84 c0                	test   al,al
1000157c:	0f 84 e7 00 00 00    	je     10001669 <drawBootScreen()+0x1bd>
10001582:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10001589:	83 7d f0 18          	cmp    DWORD PTR [ebp-0x10],0x18
1000158d:	7f 41                	jg     100015d0 <drawBootScreen()+0x124>
1000158f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001590: R_386_32	term
10001594:	83 ec 04             	sub    esp,0x4
10001597:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000159a:	6a 00                	push   0x0
1000159c:	50                   	push   eax
1000159d:	e8 fc ff ff ff       	call   1000159e <drawBootScreen()+0xf2>	1000159e: R_386_PC32	VgaText::setCursor(int, int)
100015a2:	83 c4 10             	add    esp,0x10
100015a5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100015ac:	83 7d ec 0f          	cmp    DWORD PTR [ebp-0x14],0xf
100015b0:	7f 19                	jg     100015cb <drawBootScreen()+0x11f>
100015b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100015b3: R_386_32	term
100015b7:	6a 00                	push   0x0
100015b9:	6a 00                	push   0x0
100015bb:	6a 20                	push   0x20
100015bd:	50                   	push   eax
100015be:	e8 fc ff ff ff       	call   100015bf <drawBootScreen()+0x113>	100015bf: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100015c3:	83 c4 10             	add    esp,0x10
100015c6:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100015c9:	eb e1                	jmp    100015ac <drawBootScreen()+0x100>
100015cb:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100015ce:	eb b9                	jmp    10001589 <drawBootScreen()+0xdd>
100015d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100015d1: R_386_32	term
100015d5:	83 ec 04             	sub    esp,0x4
100015d8:	6a 01                	push   0x1
100015da:	6a 01                	push   0x1
100015dc:	50                   	push   eax
100015dd:	e8 fc ff ff ff       	call   100015de <drawBootScreen()+0x132>	100015de: R_386_PC32	VgaText::setCursor(int, int)
100015e2:	83 c4 10             	add    esp,0x10
100015e5:	a0 00 00 00 00       	mov    al,ds:0x0	100015e6: R_386_32	safemode
100015ea:	83 f0 01             	xor    eax,0x1
100015ed:	84 c0                	test   al,al
100015ef:	74 17                	je     10001608 <drawBootScreen()+0x15c>
100015f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100015f2: R_386_32	term
100015f6:	6a 00                	push   0x0
100015f8:	6a 0f                	push   0xf
100015fa:	68 80 b0 00 10       	push   0x1000b080	100015fb: R_386_32	.text
100015ff:	50                   	push   eax
10001600:	e8 fc ff ff ff       	call   10001601 <drawBootScreen()+0x155>	10001601: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001605:	83 c4 10             	add    esp,0x10
10001608:	a1 00 00 00 00       	mov    eax,ds:0x0	10001609: R_386_32	term
1000160d:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	1000160f: R_386_32	safemode
10001613:	84 d2                	test   dl,dl
10001615:	74 07                	je     1000161e <drawBootScreen()+0x172>
10001617:	ba 0f 00 00 00       	mov    edx,0xf
1000161c:	eb 05                	jmp    10001623 <drawBootScreen()+0x177>
1000161e:	ba 0e 00 00 00       	mov    edx,0xe
10001623:	6a 00                	push   0x0
10001625:	52                   	push   edx
10001626:	68 03 b1 00 10       	push   0x1000b103	10001627: R_386_32	.text
1000162b:	50                   	push   eax
1000162c:	e8 fc ff ff ff       	call   1000162d <drawBootScreen()+0x181>	1000162d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001631:	83 c4 10             	add    esp,0x10
10001634:	a0 00 00 00 00       	mov    al,ds:0x0	10001635: R_386_32	safemode
10001639:	84 c0                	test   al,al
1000163b:	74 2c                	je     10001669 <drawBootScreen()+0x1bd>
1000163d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000163e: R_386_32	term
10001642:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10001644: R_386_32	safemode
10001648:	84 d2                	test   dl,dl
1000164a:	74 07                	je     10001653 <drawBootScreen()+0x1a7>
1000164c:	ba 0f 00 00 00       	mov    edx,0xf
10001651:	eb 05                	jmp    10001658 <drawBootScreen()+0x1ac>
10001653:	ba 0e 00 00 00       	mov    edx,0xe
10001658:	6a 00                	push   0x0
1000165a:	52                   	push   edx
1000165b:	68 21 b1 00 10       	push   0x1000b121	1000165c: R_386_32	.text
10001660:	50                   	push   eax
10001661:	e8 fc ff ff ff       	call   10001662 <drawBootScreen()+0x1b6>	10001662: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001666:	83 c4 10             	add    esp,0x10
10001669:	a1 00 00 00 00       	mov    eax,ds:0x0	1000166a: R_386_32	term
1000166e:	83 ec 08             	sub    esp,0x8
10001671:	6a 0f                	push   0xf
10001673:	50                   	push   eax
10001674:	e8 fc ff ff ff       	call   10001675 <drawBootScreen()+0x1c9>	10001675: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
10001679:	83 c4 10             	add    esp,0x10
1000167c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000167d: R_386_32	term
10001681:	83 ec 08             	sub    esp,0x8
10001684:	6a 00                	push   0x0
10001686:	50                   	push   eax
10001687:	e8 fc ff ff ff       	call   10001688 <drawBootScreen()+0x1dc>	10001688: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
1000168c:	83 c4 10             	add    esp,0x10
1000168f:	90                   	nop
10001690:	c9                   	leave  
10001691:	c3                   	ret    

10001692 <drawBasicWindowX(int, int, int, int, char const*, bool)>:
10001692:	55                   	push   ebp
10001693:	89 e5                	mov    ebp,esp
10001695:	53                   	push   ebx
10001696:	83 ec 34             	sub    esp,0x34
10001699:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
1000169c:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
1000169f:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100016a2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100016a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100016ac:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
100016af:	7d 6c                	jge    1000171d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x8b>
100016b1:	a1 00 00 00 00       	mov    eax,ds:0x0	100016b2: R_386_32	term
100016b6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100016b9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100016bc:	01 ca                	add    edx,ecx
100016be:	83 ec 04             	sub    esp,0x4
100016c1:	52                   	push   edx
100016c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016c5:	50                   	push   eax
100016c6:	e8 fc ff ff ff       	call   100016c7 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x35>	100016c7: R_386_PC32	VgaText::setCursor(int, int)
100016cb:	83 c4 10             	add    esp,0x10
100016ce:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100016d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100016d8:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100016db:	7d 3b                	jge    10001718 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x86>
100016dd:	a1 00 00 00 00       	mov    eax,ds:0x0	100016de: R_386_32	term
100016e2:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100016e6:	74 07                	je     100016ef <drawBasicWindowX(int, int, int, int, char const*, bool)+0x5d>
100016e8:	b9 07 00 00 00       	mov    ecx,0x7
100016ed:	eb 05                	jmp    100016f4 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x62>
100016ef:	b9 0f 00 00 00       	mov    ecx,0xf
100016f4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100016f8:	74 07                	je     10001701 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x6f>
100016fa:	ba 07 00 00 00       	mov    edx,0x7
100016ff:	eb 05                	jmp    10001706 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x74>
10001701:	ba 0f 00 00 00       	mov    edx,0xf
10001706:	51                   	push   ecx
10001707:	52                   	push   edx
10001708:	6a 20                	push   0x20
1000170a:	50                   	push   eax
1000170b:	e8 fc ff ff ff       	call   1000170c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x7a>	1000170c: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001710:	83 c4 10             	add    esp,0x10
10001713:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10001716:	eb bd                	jmp    100016d5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x43>
10001718:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000171b:	eb 8c                	jmp    100016a9 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17>
1000171d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000171e: R_386_32	term
10001722:	83 ec 04             	sub    esp,0x4
10001725:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001728:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000172b:	50                   	push   eax
1000172c:	e8 fc ff ff ff       	call   1000172d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x9b>	1000172d: R_386_PC32	VgaText::setCursor(int, int)
10001731:	83 c4 10             	add    esp,0x10
10001734:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
1000173b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000173e:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001741:	7d 43                	jge    10001786 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xf4>
10001743:	a1 00 00 00 00       	mov    eax,ds:0x0	10001744: R_386_32	term
10001748:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	1000174a: R_386_32	safemode
1000174e:	84 d2                	test   dl,dl
10001750:	74 07                	je     10001759 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xc7>
10001752:	b9 00 00 00 00       	mov    ecx,0x0
10001757:	eb 05                	jmp    1000175e <drawBasicWindowX(int, int, int, int, char const*, bool)+0xcc>
10001759:	b9 01 00 00 00       	mov    ecx,0x1
1000175e:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10001760: R_386_32	safemode
10001764:	84 d2                	test   dl,dl
10001766:	74 07                	je     1000176f <drawBasicWindowX(int, int, int, int, char const*, bool)+0xdd>
10001768:	ba 00 00 00 00       	mov    edx,0x0
1000176d:	eb 05                	jmp    10001774 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe2>
1000176f:	ba 01 00 00 00       	mov    edx,0x1
10001774:	51                   	push   ecx
10001775:	52                   	push   edx
10001776:	6a 20                	push   0x20
10001778:	50                   	push   eax
10001779:	e8 fc ff ff ff       	call   1000177a <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe8>	1000177a: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000177e:	83 c4 10             	add    esp,0x10
10001781:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
10001784:	eb b5                	jmp    1000173b <drawBasicWindowX(int, int, int, int, char const*, bool)+0xa9>
10001786:	a1 00 00 00 00       	mov    eax,ds:0x0	10001787: R_386_32	term
1000178b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000178e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001791:	01 d1                	add    ecx,edx
10001793:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001796:	42                   	inc    edx
10001797:	83 ec 04             	sub    esp,0x4
1000179a:	51                   	push   ecx
1000179b:	52                   	push   edx
1000179c:	50                   	push   eax
1000179d:	e8 fc ff ff ff       	call   1000179e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x10c>	1000179e: R_386_PC32	VgaText::setCursor(int, int)
100017a2:	83 c4 10             	add    esp,0x10
100017a5:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
100017ac:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100017af:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100017b2:	7d 43                	jge    100017f7 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x165>
100017b4:	a1 00 00 00 00       	mov    eax,ds:0x0	100017b5: R_386_32	term
100017b9:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	100017bb: R_386_32	safemode
100017bf:	84 d2                	test   dl,dl
100017c1:	74 07                	je     100017ca <drawBasicWindowX(int, int, int, int, char const*, bool)+0x138>
100017c3:	b9 00 00 00 00       	mov    ecx,0x0
100017c8:	eb 05                	jmp    100017cf <drawBasicWindowX(int, int, int, int, char const*, bool)+0x13d>
100017ca:	b9 03 00 00 00       	mov    ecx,0x3
100017cf:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	100017d1: R_386_32	safemode
100017d5:	84 d2                	test   dl,dl
100017d7:	74 07                	je     100017e0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x14e>
100017d9:	ba 00 00 00 00       	mov    edx,0x0
100017de:	eb 05                	jmp    100017e5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x153>
100017e0:	ba 03 00 00 00       	mov    edx,0x3
100017e5:	51                   	push   ecx
100017e6:	52                   	push   edx
100017e7:	6a 20                	push   0x20
100017e9:	50                   	push   eax
100017ea:	e8 fc ff ff ff       	call   100017eb <drawBasicWindowX(int, int, int, int, char const*, bool)+0x159>	100017eb: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100017ef:	83 c4 10             	add    esp,0x10
100017f2:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
100017f5:	eb b5                	jmp    100017ac <drawBasicWindowX(int, int, int, int, char const*, bool)+0x11a>
100017f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100017fa:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100017fd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001800:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001803:	01 d0                	add    eax,edx
10001805:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001808:	0f 8d b3 00 00 00    	jge    100018c1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x22f>
1000180e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000180f: R_386_32	term
10001813:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001816:	8d 4a 01             	lea    ecx,[edx+0x1]
10001819:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
1000181c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000181f:	01 da                	add    edx,ebx
10001821:	83 ec 04             	sub    esp,0x4
10001824:	51                   	push   ecx
10001825:	52                   	push   edx
10001826:	50                   	push   eax
10001827:	e8 fc ff ff ff       	call   10001828 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x196>	10001828: R_386_PC32	VgaText::setCursor(int, int)
1000182c:	83 c4 10             	add    esp,0x10
1000182f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001830: R_386_32	term
10001834:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10001836: R_386_32	safemode
1000183a:	84 d2                	test   dl,dl
1000183c:	74 07                	je     10001845 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b3>
1000183e:	b9 00 00 00 00       	mov    ecx,0x0
10001843:	eb 05                	jmp    1000184a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b8>
10001845:	b9 03 00 00 00       	mov    ecx,0x3
1000184a:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	1000184c: R_386_32	safemode
10001850:	84 d2                	test   dl,dl
10001852:	74 07                	je     1000185b <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1c9>
10001854:	ba 00 00 00 00       	mov    edx,0x0
10001859:	eb 05                	jmp    10001860 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1ce>
1000185b:	ba 03 00 00 00       	mov    edx,0x3
10001860:	51                   	push   ecx
10001861:	52                   	push   edx
10001862:	6a 20                	push   0x20
10001864:	50                   	push   eax
10001865:	e8 fc ff ff ff       	call   10001866 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1d4>	10001866: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000186a:	83 c4 10             	add    esp,0x10
1000186d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001870:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001873:	01 d0                	add    eax,edx
10001875:	48                   	dec    eax
10001876:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001879:	74 3e                	je     100018b9 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x227>
1000187b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000187c: R_386_32	term
10001880:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001883:	42                   	inc    edx
10001884:	83 ec 04             	sub    esp,0x4
10001887:	52                   	push   edx
10001888:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000188b:	50                   	push   eax
1000188c:	e8 fc ff ff ff       	call   1000188d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1fb>	1000188d: R_386_PC32	VgaText::setCursor(int, int)
10001891:	83 c4 10             	add    esp,0x10
10001894:	a1 00 00 00 00       	mov    eax,ds:0x0	10001895: R_386_32	term
10001899:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000189d:	74 07                	je     100018a6 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x214>
1000189f:	ba 07 00 00 00       	mov    edx,0x7
100018a4:	eb 05                	jmp    100018ab <drawBasicWindowX(int, int, int, int, char const*, bool)+0x219>
100018a6:	ba 0f 00 00 00       	mov    edx,0xf
100018ab:	52                   	push   edx
100018ac:	6a 00                	push   0x0
100018ae:	6a dd                	push   0xffffffdd
100018b0:	50                   	push   eax
100018b1:	e8 fc ff ff ff       	call   100018b2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x220>	100018b2: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100018b6:	83 c4 10             	add    esp,0x10
100018b9:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100018bc:	e9 3c ff ff ff       	jmp    100017fd <drawBasicWindowX(int, int, int, int, char const*, bool)+0x16b>
100018c1:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100018c4:	83 ec 0c             	sub    esp,0xc
100018c7:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100018ca:	e8 fc ff ff ff       	call   100018cb <drawBasicWindowX(int, int, int, int, char const*, bool)+0x239>	100018cb: R_386_PC32	strlen
100018cf:	83 c4 10             	add    esp,0x10
100018d2:	29 c3                	sub    ebx,eax
100018d4:	89 d8                	mov    eax,ebx
100018d6:	d1 e8                	shr    eax,1
100018d8:	48                   	dec    eax
100018d9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100018dc:	a1 00 00 00 00       	mov    eax,ds:0x0	100018dd: R_386_32	term
100018e1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100018e4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100018e7:	01 ca                	add    edx,ecx
100018e9:	83 ec 04             	sub    esp,0x4
100018ec:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100018ef:	52                   	push   edx
100018f0:	50                   	push   eax
100018f1:	e8 fc ff ff ff       	call   100018f2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x260>	100018f2: R_386_PC32	VgaText::setCursor(int, int)
100018f6:	83 c4 10             	add    esp,0x10
100018f9:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10001900:	83 ec 0c             	sub    esp,0xc
10001903:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001906:	e8 fc ff ff ff       	call   10001907 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x275>	10001907: R_386_PC32	strlen
1000190b:	83 c4 10             	add    esp,0x10
1000190e:	89 c2                	mov    edx,eax
10001910:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001913:	39 c2                	cmp    edx,eax
10001915:	76 3a                	jbe    10001951 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x2bf>
10001917:	a1 00 00 00 00       	mov    eax,ds:0x0	10001918: R_386_32	term
1000191c:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	1000191e: R_386_32	safemode
10001922:	84 d2                	test   dl,dl
10001924:	74 07                	je     1000192d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x29b>
10001926:	b9 00 00 00 00       	mov    ecx,0x0
1000192b:	eb 05                	jmp    10001932 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x2a0>
1000192d:	b9 01 00 00 00       	mov    ecx,0x1
10001932:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
10001935:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001938:	01 da                	add    edx,ebx
1000193a:	8a 12                	mov    dl,BYTE PTR [edx]
1000193c:	0f be d2             	movsx  edx,dl
1000193f:	51                   	push   ecx
10001940:	6a 0f                	push   0xf
10001942:	52                   	push   edx
10001943:	50                   	push   eax
10001944:	e8 fc ff ff ff       	call   10001945 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x2b3>	10001945: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001949:	83 c4 10             	add    esp,0x10
1000194c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
1000194f:	eb af                	jmp    10001900 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x26e>
10001951:	90                   	nop
10001952:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001955:	c9                   	leave  
10001956:	c3                   	ret    

10001957 <drawBasicWindow(int, int, int, int, char const*)>:
10001957:	55                   	push   ebp
10001958:	89 e5                	mov    ebp,esp
1000195a:	83 ec 08             	sub    esp,0x8
1000195d:	83 ec 08             	sub    esp,0x8
10001960:	6a 00                	push   0x0
10001962:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001965:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10001968:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000196b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000196e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001971:	e8 fc ff ff ff       	call   10001972 <drawBasicWindow(int, int, int, int, char const*)+0x1b>	10001972: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10001976:	83 c4 20             	add    esp,0x20
10001979:	90                   	nop
1000197a:	c9                   	leave  
1000197b:	c3                   	ret    

1000197c <lookupHex(char)>:
1000197c:	55                   	push   ebp
1000197d:	89 e5                	mov    ebp,esp
1000197f:	83 ec 04             	sub    esp,0x4
10001982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001985:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
10001988:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
1000198c:	7e 0f                	jle    1000199d <lookupHex(char)+0x21>
1000198e:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
10001992:	7f 09                	jg     1000199d <lookupHex(char)+0x21>
10001994:	0f be 45 fc          	movsx  eax,BYTE PTR [ebp-0x4]
10001998:	83 e8 30             	sub    eax,0x30
1000199b:	eb 1c                	jmp    100019b9 <lookupHex(char)+0x3d>
1000199d:	80 7d fc 40          	cmp    BYTE PTR [ebp-0x4],0x40
100019a1:	7e 0f                	jle    100019b2 <lookupHex(char)+0x36>
100019a3:	80 7d fc 46          	cmp    BYTE PTR [ebp-0x4],0x46
100019a7:	7f 09                	jg     100019b2 <lookupHex(char)+0x36>
100019a9:	0f be 45 fc          	movsx  eax,BYTE PTR [ebp-0x4]
100019ad:	83 e8 37             	sub    eax,0x37
100019b0:	eb 07                	jmp    100019b9 <lookupHex(char)+0x3d>
100019b2:	0f be 45 fc          	movsx  eax,BYTE PTR [ebp-0x4]
100019b6:	83 e8 57             	sub    eax,0x57
100019b9:	c9                   	leave  
100019ba:	c3                   	ret    

100019bb <runRemoteInstall(void*)>:
100019bb:	55                   	push   ebp
100019bc:	89 e5                	mov    ebp,esp
100019be:	56                   	push   esi
100019bf:	53                   	push   ebx
100019c0:	83 ec 40             	sub    esp,0x40
100019c3:	f0 ff 0d 00 00 00 00 	lock dec DWORD PTR ds:0x0	100019c6: R_386_32	irqDisableCounter
100019ca:	a1 00 00 00 00       	mov    eax,ds:0x0	100019cb: R_386_32	irqDisableCounter
100019cf:	85 c0                	test   eax,eax
100019d1:	75 01                	jne    100019d4 <runRemoteInstall(void*)+0x19>
100019d3:	fb                   	sti    
100019d4:	c7 05 00 00 00 00 00 28 00 00 	mov    DWORD PTR ds:0x0,0x2800	100019d6: R_386_32	remoteInstallScript
100019de:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100019e5:	6a 0c                	push   0xc
100019e7:	6a 00                	push   0x0
100019e9:	8d 45 c4             	lea    eax,[ebp-0x3c]
100019ec:	50                   	push   eax
100019ed:	e8 fc ff ff ff       	call   100019ee <runRemoteInstall(void*)+0x33>	100019ee: R_386_PC32	memset
100019f2:	83 c4 0c             	add    esp,0xc
100019f5:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100019f7: R_386_32	remoteInstallScript
100019fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100019fe:	01 d0                	add    eax,edx
10001a00:	8a 00                	mov    al,BYTE PTR [eax]
10001a02:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
10001a05:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a06: R_386_32	remoteInstallScript
10001a0a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001a0d:	42                   	inc    edx
10001a0e:	01 d0                	add    eax,edx
10001a10:	8a 00                	mov    al,BYTE PTR [eax]
10001a12:	88 45 e2             	mov    BYTE PTR [ebp-0x1e],al
10001a15:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a16: R_386_32	remoteInstallScript
10001a1a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001a1d:	83 c2 02             	add    edx,0x2
10001a20:	01 d0                	add    eax,edx
10001a22:	8a 00                	mov    al,BYTE PTR [eax]
10001a24:	88 45 e1             	mov    BYTE PTR [ebp-0x1f],al
10001a27:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a28: R_386_32	remoteInstallScript
10001a2c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001a2f:	83 c2 03             	add    edx,0x3
10001a32:	01 d0                	add    eax,edx
10001a34:	8a 00                	mov    al,BYTE PTR [eax]
10001a36:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
10001a39:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a3a: R_386_32	remoteInstallScript
10001a3e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001a41:	83 c2 04             	add    edx,0x4
10001a44:	01 d0                	add    eax,edx
10001a46:	8a 00                	mov    al,BYTE PTR [eax]
10001a48:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
10001a4b:	0f be 75 df          	movsx  esi,BYTE PTR [ebp-0x21]
10001a4f:	0f be 5d e0          	movsx  ebx,BYTE PTR [ebp-0x20]
10001a53:	0f be 4d e1          	movsx  ecx,BYTE PTR [ebp-0x1f]
10001a57:	0f be 55 e2          	movsx  edx,BYTE PTR [ebp-0x1e]
10001a5b:	0f be 45 e3          	movsx  eax,BYTE PTR [ebp-0x1d]
10001a5f:	83 ec 08             	sub    esp,0x8
10001a62:	56                   	push   esi
10001a63:	53                   	push   ebx
10001a64:	51                   	push   ecx
10001a65:	52                   	push   edx
10001a66:	50                   	push   eax
10001a67:	68 36 b1 00 10       	push   0x1000b136	10001a68: R_386_32	.text
10001a6c:	e8 fc ff ff ff       	call   10001a6d <runRemoteInstall(void*)+0xb2>	10001a6d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a71:	83 c4 20             	add    esp,0x20
10001a74:	80 7d e3 73          	cmp    BYTE PTR [ebp-0x1d],0x73
10001a78:	75 11                	jne    10001a8b <runRemoteInstall(void*)+0xd0>
10001a7a:	8a 45 e2             	mov    al,BYTE PTR [ebp-0x1e]
10001a7d:	a2 00 00 00 00       	mov    ds:0x0,al	10001a7e: R_386_32	installKey
10001a82:	83 45 f4 02          	add    DWORD PTR [ebp-0xc],0x2
10001a86:	e9 6a ff ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001a8b:	80 7d e3 46          	cmp    BYTE PTR [ebp-0x1d],0x46
10001a8f:	74 0a                	je     10001a9b <runRemoteInstall(void*)+0xe0>
10001a91:	80 7d e3 66          	cmp    BYTE PTR [ebp-0x1d],0x66
10001a95:	0f 85 e4 00 00 00    	jne    10001b7f <runRemoteInstall(void*)+0x1c4>
10001a9b:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10001aa2:	0f be 45 e1          	movsx  eax,BYTE PTR [ebp-0x1f]
10001aa6:	83 ec 0c             	sub    esp,0xc
10001aa9:	50                   	push   eax
10001aaa:	e8 fc ff ff ff       	call   10001aab <runRemoteInstall(void*)+0xf0>	10001aab: R_386_PC32	lookupHex(char)
10001aaf:	83 c4 10             	add    esp,0x10
10001ab2:	c1 e0 08             	shl    eax,0x8
10001ab5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001ab8:	0f be 45 e0          	movsx  eax,BYTE PTR [ebp-0x20]
10001abc:	83 ec 0c             	sub    esp,0xc
10001abf:	50                   	push   eax
10001ac0:	e8 fc ff ff ff       	call   10001ac1 <runRemoteInstall(void*)+0x106>	10001ac1: R_386_PC32	lookupHex(char)
10001ac5:	83 c4 10             	add    esp,0x10
10001ac8:	c1 e0 04             	shl    eax,0x4
10001acb:	01 45 d0             	add    DWORD PTR [ebp-0x30],eax
10001ace:	0f be 45 df          	movsx  eax,BYTE PTR [ebp-0x21]
10001ad2:	83 ec 0c             	sub    esp,0xc
10001ad5:	50                   	push   eax
10001ad6:	e8 fc ff ff ff       	call   10001ad7 <runRemoteInstall(void*)+0x11c>	10001ad7: R_386_PC32	lookupHex(char)
10001adb:	83 c4 10             	add    esp,0x10
10001ade:	01 45 d0             	add    DWORD PTR [ebp-0x30],eax
10001ae1:	83 45 f4 05          	add    DWORD PTR [ebp-0xc],0x5
10001ae5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001aec:	80 7d e2 30          	cmp    BYTE PTR [ebp-0x1e],0x30
10001af0:	75 06                	jne    10001af8 <runRemoteInstall(void*)+0x13d>
10001af2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001af5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001af8:	80 7d e2 31          	cmp    BYTE PTR [ebp-0x1e],0x31
10001afc:	75 06                	jne    10001b04 <runRemoteInstall(void*)+0x149>
10001afe:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10001b01:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001b04:	80 7d e2 32          	cmp    BYTE PTR [ebp-0x1e],0x32
10001b08:	75 06                	jne    10001b10 <runRemoteInstall(void*)+0x155>
10001b0a:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001b0d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001b10:	80 7d e2 33          	cmp    BYTE PTR [ebp-0x1e],0x33
10001b14:	75 06                	jne    10001b1c <runRemoteInstall(void*)+0x161>
10001b16:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10001b19:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001b1c:	80 7d e2 34          	cmp    BYTE PTR [ebp-0x1e],0x34
10001b20:	75 0b                	jne    10001b2d <runRemoteInstall(void*)+0x172>
10001b22:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b23: R_386_32	term
10001b27:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10001b2a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001b2d:	80 7d e2 35          	cmp    BYTE PTR [ebp-0x1e],0x35
10001b31:	75 0b                	jne    10001b3e <runRemoteInstall(void*)+0x183>
10001b33:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b34: R_386_32	term
10001b38:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10001b3b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001b3e:	80 7d e3 46          	cmp    BYTE PTR [ebp-0x1d],0x46
10001b42:	75 11                	jne    10001b55 <runRemoteInstall(void*)+0x19a>
10001b44:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10001b47:	3b 45 d0             	cmp    eax,DWORD PTR [ebp-0x30]
10001b4a:	75 09                	jne    10001b55 <runRemoteInstall(void*)+0x19a>
10001b4c:	83 45 f4 05          	add    DWORD PTR [ebp-0xc],0x5
10001b50:	e9 7c 05 00 00       	jmp    100020d1 <runRemoteInstall(void*)+0x716>
10001b55:	80 7d e3 66          	cmp    BYTE PTR [ebp-0x1d],0x66
10001b59:	0f 85 72 05 00 00    	jne    100020d1 <runRemoteInstall(void*)+0x716>
10001b5f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10001b62:	3b 45 d0             	cmp    eax,DWORD PTR [ebp-0x30]
10001b65:	0f 84 66 05 00 00    	je     100020d1 <runRemoteInstall(void*)+0x716>
10001b6b:	83 ec 08             	sub    esp,0x8
10001b6e:	6a 00                	push   0x0
10001b70:	6a 64                	push   0x64
10001b72:	e8 fc ff ff ff       	call   10001b73 <runRemoteInstall(void*)+0x1b8>	10001b73: R_386_PC32	milliTenthSleep(unsigned long long)
10001b77:	83 c4 10             	add    esp,0x10
10001b7a:	e9 23 ff ff ff       	jmp    10001aa2 <runRemoteInstall(void*)+0xe7>
10001b7f:	80 7d e3 7b          	cmp    BYTE PTR [ebp-0x1d],0x7b
10001b83:	75 4a                	jne    10001bcf <runRemoteInstall(void*)+0x214>
10001b85:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001b88:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10001b8a: R_386_32	remoteInstallScript
10001b8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001b91:	8d 50 01             	lea    edx,[eax+0x1]
10001b94:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001b97:	01 c8                	add    eax,ecx
10001b99:	8a 00                	mov    al,BYTE PTR [eax]
10001b9b:	88 45 de             	mov    BYTE PTR [ebp-0x22],al
10001b9e:	80 7d de 7d          	cmp    BYTE PTR [ebp-0x22],0x7d
10001ba2:	0f 84 2f 05 00 00    	je     100020d7 <runRemoteInstall(void*)+0x71c>
10001ba8:	8a 45 de             	mov    al,BYTE PTR [ebp-0x22]
10001bab:	a2 00 00 00 00       	mov    ds:0x0,al	10001bac: R_386_32	installKey
10001bb0:	a0 00 00 00 00       	mov    al,ds:0x0	10001bb1: R_386_32	installKey
10001bb5:	84 c0                	test   al,al
10001bb7:	0f 95 c0             	setne  al
10001bba:	84 c0                	test   al,al
10001bbc:	74 ca                	je     10001b88 <runRemoteInstall(void*)+0x1cd>
10001bbe:	83 ec 08             	sub    esp,0x8
10001bc1:	6a 00                	push   0x0
10001bc3:	6a 64                	push   0x64
10001bc5:	e8 fc ff ff ff       	call   10001bc6 <runRemoteInstall(void*)+0x20b>	10001bc6: R_386_PC32	milliTenthSleep(unsigned long long)
10001bca:	83 c4 10             	add    esp,0x10
10001bcd:	eb e1                	jmp    10001bb0 <runRemoteInstall(void*)+0x1f5>
10001bcf:	80 7d e3 71          	cmp    BYTE PTR [ebp-0x1d],0x71
10001bd3:	75 2d                	jne    10001c02 <runRemoteInstall(void*)+0x247>
10001bd5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001bd8:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	10001bda: R_386_32	installKey
10001bdf:	a0 00 00 00 00       	mov    al,ds:0x0	10001be0: R_386_32	installKey
10001be4:	84 c0                	test   al,al
10001be6:	0f 95 c0             	setne  al
10001be9:	84 c0                	test   al,al
10001beb:	0f 84 04 fe ff ff    	je     100019f5 <runRemoteInstall(void*)+0x3a>
10001bf1:	83 ec 08             	sub    esp,0x8
10001bf4:	6a 00                	push   0x0
10001bf6:	6a 64                	push   0x64
10001bf8:	e8 fc ff ff ff       	call   10001bf9 <runRemoteInstall(void*)+0x23e>	10001bf9: R_386_PC32	milliTenthSleep(unsigned long long)
10001bfd:	83 c4 10             	add    esp,0x10
10001c00:	eb dd                	jmp    10001bdf <runRemoteInstall(void*)+0x224>
10001c02:	80 7d e3 57          	cmp    BYTE PTR [ebp-0x1d],0x57
10001c06:	0f 85 86 00 00 00    	jne    10001c92 <runRemoteInstall(void*)+0x2d7>
10001c0c:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001c10:	83 ec 0c             	sub    esp,0xc
10001c13:	50                   	push   eax
10001c14:	e8 fc ff ff ff       	call   10001c15 <runRemoteInstall(void*)+0x25a>	10001c15: R_386_PC32	lookupHex(char)
10001c19:	83 c4 10             	add    esp,0x10
10001c1c:	c1 e0 04             	shl    eax,0x4
10001c1f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001c22:	0f be 45 e1          	movsx  eax,BYTE PTR [ebp-0x1f]
10001c26:	83 ec 0c             	sub    esp,0xc
10001c29:	50                   	push   eax
10001c2a:	e8 fc ff ff ff       	call   10001c2b <runRemoteInstall(void*)+0x270>	10001c2b: R_386_PC32	lookupHex(char)
10001c2f:	83 c4 10             	add    esp,0x10
10001c32:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
10001c35:	83 45 f4 03          	add    DWORD PTR [ebp-0xc],0x3
10001c39:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
10001c3c:	89 d0                	mov    eax,edx
10001c3e:	c1 e0 02             	shl    eax,0x2
10001c41:	01 d0                	add    eax,edx
10001c43:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10001c4a:	01 d0                	add    eax,edx
10001c4c:	c1 e0 02             	shl    eax,0x2
10001c4f:	83 ec 08             	sub    esp,0x8
10001c52:	50                   	push   eax
10001c53:	68 44 b1 00 10       	push   0x1000b144	10001c54: R_386_32	.text
10001c58:	e8 fc ff ff ff       	call   10001c59 <runRemoteInstall(void*)+0x29e>	10001c59: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c5d:	83 c4 10             	add    esp,0x10
10001c60:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
10001c63:	89 d0                	mov    eax,edx
10001c65:	c1 e0 02             	shl    eax,0x2
10001c68:	01 d0                	add    eax,edx
10001c6a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10001c71:	01 d0                	add    eax,edx
10001c73:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10001c7a:	01 d0                	add    eax,edx
10001c7c:	c1 e0 03             	shl    eax,0x3
10001c7f:	99                   	cdq    
10001c80:	83 ec 08             	sub    esp,0x8
10001c83:	52                   	push   edx
10001c84:	50                   	push   eax
10001c85:	e8 fc ff ff ff       	call   10001c86 <runRemoteInstall(void*)+0x2cb>	10001c86: R_386_PC32	milliTenthSleep(unsigned long long)
10001c8a:	83 c4 10             	add    esp,0x10
10001c8d:	e9 63 fd ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001c92:	80 7d e3 67          	cmp    BYTE PTR [ebp-0x1d],0x67
10001c96:	75 60                	jne    10001cf8 <runRemoteInstall(void*)+0x33d>
10001c98:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001c9c:	83 ec 0c             	sub    esp,0xc
10001c9f:	50                   	push   eax
10001ca0:	e8 fc ff ff ff       	call   10001ca1 <runRemoteInstall(void*)+0x2e6>	10001ca1: R_386_PC32	lookupHex(char)
10001ca5:	83 c4 10             	add    esp,0x10
10001ca8:	c1 e0 0c             	shl    eax,0xc
10001cab:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001cae:	0f be 45 e1          	movsx  eax,BYTE PTR [ebp-0x1f]
10001cb2:	83 ec 0c             	sub    esp,0xc
10001cb5:	50                   	push   eax
10001cb6:	e8 fc ff ff ff       	call   10001cb7 <runRemoteInstall(void*)+0x2fc>	10001cb7: R_386_PC32	lookupHex(char)
10001cbb:	83 c4 10             	add    esp,0x10
10001cbe:	c1 e0 08             	shl    eax,0x8
10001cc1:	01 45 d4             	add    DWORD PTR [ebp-0x2c],eax
10001cc4:	0f be 45 e0          	movsx  eax,BYTE PTR [ebp-0x20]
10001cc8:	83 ec 0c             	sub    esp,0xc
10001ccb:	50                   	push   eax
10001ccc:	e8 fc ff ff ff       	call   10001ccd <runRemoteInstall(void*)+0x312>	10001ccd: R_386_PC32	lookupHex(char)
10001cd1:	83 c4 10             	add    esp,0x10
10001cd4:	c1 e0 04             	shl    eax,0x4
10001cd7:	01 45 d4             	add    DWORD PTR [ebp-0x2c],eax
10001cda:	0f be 45 df          	movsx  eax,BYTE PTR [ebp-0x21]
10001cde:	83 ec 0c             	sub    esp,0xc
10001ce1:	50                   	push   eax
10001ce2:	e8 fc ff ff ff       	call   10001ce3 <runRemoteInstall(void*)+0x328>	10001ce3: R_386_PC32	lookupHex(char)
10001ce7:	83 c4 10             	add    esp,0x10
10001cea:	01 45 d4             	add    DWORD PTR [ebp-0x2c],eax
10001ced:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10001cf0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001cf3:	e9 fd fc ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001cf8:	80 7d e3 4e          	cmp    BYTE PTR [ebp-0x1d],0x4e
10001cfc:	75 08                	jne    10001d06 <runRemoteInstall(void*)+0x34b>
10001cfe:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001d01:	e9 ef fc ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001d06:	80 7d e3 58          	cmp    BYTE PTR [ebp-0x1d],0x58
10001d0a:	75 1b                	jne    10001d27 <runRemoteInstall(void*)+0x36c>
10001d0c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001d0e: R_386_32	remoteInstall
10001d13:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001d15: R_386_32	blockUserTyping
10001d1a:	90                   	nop
10001d1b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001d1d: R_386_32	blockUserTyping
10001d22:	e9 b6 03 00 00       	jmp    100020dd <runRemoteInstall(void*)+0x722>
10001d27:	80 7d e3 53          	cmp    BYTE PTR [ebp-0x1d],0x53
10001d2b:	0f 85 80 00 00 00    	jne    10001db1 <runRemoteInstall(void*)+0x3f6>
10001d31:	0f be 45 e1          	movsx  eax,BYTE PTR [ebp-0x1f]
10001d35:	83 ec 0c             	sub    esp,0xc
10001d38:	50                   	push   eax
10001d39:	e8 fc ff ff ff       	call   10001d3a <runRemoteInstall(void*)+0x37f>	10001d3a: R_386_PC32	lookupHex(char)
10001d3e:	83 c4 10             	add    esp,0x10
10001d41:	89 c2                	mov    edx,eax
10001d43:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001d47:	83 e8 31             	sub    eax,0x31
10001d4a:	c1 e2 08             	shl    edx,0x8
10001d4d:	89 54 85 c4          	mov    DWORD PTR [ebp+eax*4-0x3c],edx
10001d51:	0f be 45 e0          	movsx  eax,BYTE PTR [ebp-0x20]
10001d55:	83 ec 0c             	sub    esp,0xc
10001d58:	50                   	push   eax
10001d59:	e8 fc ff ff ff       	call   10001d5a <runRemoteInstall(void*)+0x39f>	10001d5a: R_386_PC32	lookupHex(char)
10001d5e:	83 c4 10             	add    esp,0x10
10001d61:	c1 e0 04             	shl    eax,0x4
10001d64:	89 c1                	mov    ecx,eax
10001d66:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001d6a:	83 e8 31             	sub    eax,0x31
10001d6d:	8b 54 85 c4          	mov    edx,DWORD PTR [ebp+eax*4-0x3c]
10001d71:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001d75:	83 e8 31             	sub    eax,0x31
10001d78:	01 ca                	add    edx,ecx
10001d7a:	89 54 85 c4          	mov    DWORD PTR [ebp+eax*4-0x3c],edx
10001d7e:	0f be 45 df          	movsx  eax,BYTE PTR [ebp-0x21]
10001d82:	83 ec 0c             	sub    esp,0xc
10001d85:	50                   	push   eax
10001d86:	e8 fc ff ff ff       	call   10001d87 <runRemoteInstall(void*)+0x3cc>	10001d87: R_386_PC32	lookupHex(char)
10001d8b:	83 c4 10             	add    esp,0x10
10001d8e:	89 c1                	mov    ecx,eax
10001d90:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001d94:	83 e8 31             	sub    eax,0x31
10001d97:	8b 54 85 c4          	mov    edx,DWORD PTR [ebp+eax*4-0x3c]
10001d9b:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001d9f:	83 e8 31             	sub    eax,0x31
10001da2:	01 ca                	add    edx,ecx
10001da4:	89 54 85 c4          	mov    DWORD PTR [ebp+eax*4-0x3c],edx
10001da8:	83 45 f4 05          	add    DWORD PTR [ebp-0xc],0x5
10001dac:	e9 44 fc ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001db1:	80 7d e3 2b          	cmp    BYTE PTR [ebp-0x1d],0x2b
10001db5:	75 19                	jne    10001dd0 <runRemoteInstall(void*)+0x415>
10001db7:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001dbb:	83 e8 31             	sub    eax,0x31
10001dbe:	8b 54 85 c4          	mov    edx,DWORD PTR [ebp+eax*4-0x3c]
10001dc2:	42                   	inc    edx
10001dc3:	89 54 85 c4          	mov    DWORD PTR [ebp+eax*4-0x3c],edx
10001dc7:	83 45 f4 02          	add    DWORD PTR [ebp-0xc],0x2
10001dcb:	e9 25 fc ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001dd0:	80 7d e3 2d          	cmp    BYTE PTR [ebp-0x1d],0x2d
10001dd4:	75 19                	jne    10001def <runRemoteInstall(void*)+0x434>
10001dd6:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001dda:	83 e8 31             	sub    eax,0x31
10001ddd:	8b 54 85 c4          	mov    edx,DWORD PTR [ebp+eax*4-0x3c]
10001de1:	4a                   	dec    edx
10001de2:	89 54 85 c4          	mov    DWORD PTR [ebp+eax*4-0x3c],edx
10001de6:	83 45 f4 02          	add    DWORD PTR [ebp-0xc],0x2
10001dea:	e9 06 fc ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001def:	80 7d e3 30          	cmp    BYTE PTR [ebp-0x1d],0x30
10001df3:	75 18                	jne    10001e0d <runRemoteInstall(void*)+0x452>
10001df5:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001df9:	83 e8 31             	sub    eax,0x31
10001dfc:	c7 44 85 c4 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x3c],0x0
10001e04:	83 45 f4 02          	add    DWORD PTR [ebp-0xc],0x2
10001e08:	e9 e8 fb ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001e0d:	80 7d e3 3c          	cmp    BYTE PTR [ebp-0x1d],0x3c
10001e11:	0f 85 86 00 00 00    	jne    10001e9d <runRemoteInstall(void*)+0x4e2>
10001e17:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10001e1e:	80 7d e1 30          	cmp    BYTE PTR [ebp-0x1f],0x30
10001e22:	75 06                	jne    10001e2a <runRemoteInstall(void*)+0x46f>
10001e24:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001e27:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001e2a:	80 7d e1 31          	cmp    BYTE PTR [ebp-0x1f],0x31
10001e2e:	75 06                	jne    10001e36 <runRemoteInstall(void*)+0x47b>
10001e30:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10001e33:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001e36:	80 7d e1 32          	cmp    BYTE PTR [ebp-0x1f],0x32
10001e3a:	75 06                	jne    10001e42 <runRemoteInstall(void*)+0x487>
10001e3c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001e3f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001e42:	80 7d e1 33          	cmp    BYTE PTR [ebp-0x1f],0x33
10001e46:	75 06                	jne    10001e4e <runRemoteInstall(void*)+0x493>
10001e48:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10001e4b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001e4e:	80 7d e1 35          	cmp    BYTE PTR [ebp-0x1f],0x35
10001e52:	75 0b                	jne    10001e5f <runRemoteInstall(void*)+0x4a4>
10001e54:	a1 00 00 00 00       	mov    eax,ds:0x0	10001e55: R_386_32	term
10001e59:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10001e5c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001e5f:	80 7d e1 36          	cmp    BYTE PTR [ebp-0x1f],0x36
10001e63:	75 0b                	jne    10001e70 <runRemoteInstall(void*)+0x4b5>
10001e65:	a1 00 00 00 00       	mov    eax,ds:0x0	10001e66: R_386_32	term
10001e6a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10001e6d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001e70:	80 7d e2 31          	cmp    BYTE PTR [ebp-0x1e],0x31
10001e74:	75 06                	jne    10001e7c <runRemoteInstall(void*)+0x4c1>
10001e76:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001e79:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001e7c:	80 7d e2 32          	cmp    BYTE PTR [ebp-0x1e],0x32
10001e80:	75 06                	jne    10001e88 <runRemoteInstall(void*)+0x4cd>
10001e82:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001e85:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10001e88:	80 7d e2 33          	cmp    BYTE PTR [ebp-0x1e],0x33
10001e8c:	75 06                	jne    10001e94 <runRemoteInstall(void*)+0x4d9>
10001e8e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001e91:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001e94:	83 45 f4 03          	add    DWORD PTR [ebp-0xc],0x3
10001e98:	e9 58 fb ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001e9d:	80 7d e3 3e          	cmp    BYTE PTR [ebp-0x1d],0x3e
10001ea1:	0f 85 8f 00 00 00    	jne    10001f36 <runRemoteInstall(void*)+0x57b>
10001ea7:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10001eae:	80 7d e1 30          	cmp    BYTE PTR [ebp-0x1f],0x30
10001eb2:	75 06                	jne    10001eba <runRemoteInstall(void*)+0x4ff>
10001eb4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001eb7:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001eba:	80 7d e1 31          	cmp    BYTE PTR [ebp-0x1f],0x31
10001ebe:	75 06                	jne    10001ec6 <runRemoteInstall(void*)+0x50b>
10001ec0:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10001ec3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001ec6:	80 7d e1 32          	cmp    BYTE PTR [ebp-0x1f],0x32
10001eca:	75 06                	jne    10001ed2 <runRemoteInstall(void*)+0x517>
10001ecc:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001ecf:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001ed2:	80 7d e1 33          	cmp    BYTE PTR [ebp-0x1f],0x33
10001ed6:	75 06                	jne    10001ede <runRemoteInstall(void*)+0x523>
10001ed8:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10001edb:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001ede:	80 7d e1 35          	cmp    BYTE PTR [ebp-0x1f],0x35
10001ee2:	75 0b                	jne    10001eef <runRemoteInstall(void*)+0x534>
10001ee4:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ee5: R_386_32	term
10001ee9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10001eec:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001eef:	80 7d e1 36          	cmp    BYTE PTR [ebp-0x1f],0x36
10001ef3:	75 0b                	jne    10001f00 <runRemoteInstall(void*)+0x545>
10001ef5:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ef6: R_386_32	term
10001efa:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10001efd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001f00:	80 7d e2 31          	cmp    BYTE PTR [ebp-0x1e],0x31
10001f04:	75 09                	jne    10001f0f <runRemoteInstall(void*)+0x554>
10001f06:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10001f09:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
10001f0c:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001f0f:	80 7d e2 32          	cmp    BYTE PTR [ebp-0x1e],0x32
10001f13:	75 09                	jne    10001f1e <runRemoteInstall(void*)+0x563>
10001f15:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001f18:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
10001f1b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10001f1e:	80 7d e2 33          	cmp    BYTE PTR [ebp-0x1e],0x33
10001f22:	75 09                	jne    10001f2d <runRemoteInstall(void*)+0x572>
10001f24:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10001f27:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
10001f2a:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001f2d:	83 45 f4 03          	add    DWORD PTR [ebp-0xc],0x3
10001f31:	e9 bf fa ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001f36:	80 7d e3 63          	cmp    BYTE PTR [ebp-0x1d],0x63
10001f3a:	75 0f                	jne    10001f4b <runRemoteInstall(void*)+0x590>
10001f3c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001f3e: R_386_32	installKey
10001f43:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001f46:	e9 aa fa ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001f4b:	80 7d e3 62          	cmp    BYTE PTR [ebp-0x1d],0x62
10001f4f:	75 0f                	jne    10001f60 <runRemoteInstall(void*)+0x5a5>
10001f51:	c6 05 00 00 00 00 08 	mov    BYTE PTR ds:0x0,0x8	10001f53: R_386_32	installKey
10001f58:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001f5b:	e9 95 fa ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001f60:	80 7d e3 6e          	cmp    BYTE PTR [ebp-0x1d],0x6e
10001f64:	75 0f                	jne    10001f75 <runRemoteInstall(void*)+0x5ba>
10001f66:	c6 05 00 00 00 00 0a 	mov    BYTE PTR ds:0x0,0xa	10001f68: R_386_32	installKey
10001f6d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001f70:	e9 80 fa ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001f75:	80 7d e3 25          	cmp    BYTE PTR [ebp-0x1d],0x25
10001f79:	75 0f                	jne    10001f8a <runRemoteInstall(void*)+0x5cf>
10001f7b:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10001f7d: R_386_32	blockUserTyping
10001f82:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001f85:	e9 6b fa ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001f8a:	80 7d e3 24          	cmp    BYTE PTR [ebp-0x1d],0x24
10001f8e:	75 0f                	jne    10001f9f <runRemoteInstall(void*)+0x5e4>
10001f90:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001f92: R_386_32	blockUserTyping
10001f97:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001f9a:	e9 56 fa ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001f9f:	80 7d e3 75          	cmp    BYTE PTR [ebp-0x1d],0x75
10001fa3:	75 0f                	jne    10001fb4 <runRemoteInstall(void*)+0x5f9>
10001fa5:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10001fa7: R_386_32	installKey
10001fac:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001faf:	e9 41 fa ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001fb4:	80 7d e3 64          	cmp    BYTE PTR [ebp-0x1d],0x64
10001fb8:	75 0f                	jne    10001fc9 <runRemoteInstall(void*)+0x60e>
10001fba:	c6 05 00 00 00 00 02 	mov    BYTE PTR ds:0x0,0x2	10001fbc: R_386_32	installKey
10001fc1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001fc4:	e9 2c fa ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001fc9:	80 7d e3 6c          	cmp    BYTE PTR [ebp-0x1d],0x6c
10001fcd:	75 0f                	jne    10001fde <runRemoteInstall(void*)+0x623>
10001fcf:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	10001fd1: R_386_32	installKey
10001fd6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001fd9:	e9 17 fa ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001fde:	80 7d e3 72          	cmp    BYTE PTR [ebp-0x1d],0x72
10001fe2:	75 0f                	jne    10001ff3 <runRemoteInstall(void*)+0x638>
10001fe4:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	10001fe6: R_386_32	installKey
10001feb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001fee:	e9 02 fa ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001ff3:	80 7d e3 70          	cmp    BYTE PTR [ebp-0x1d],0x70
10001ff7:	75 0f                	jne    10002008 <runRemoteInstall(void*)+0x64d>
10001ff9:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	10001ffb: R_386_32	installKey
10002000:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002003:	e9 ed f9 ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10002008:	80 7d e3 50          	cmp    BYTE PTR [ebp-0x1d],0x50
1000200c:	75 0f                	jne    1000201d <runRemoteInstall(void*)+0x662>
1000200e:	c6 05 00 00 00 00 7e 	mov    BYTE PTR ds:0x0,0x7e	10002010: R_386_32	installKey
10002015:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002018:	e9 d8 f9 ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
1000201d:	80 7d e3 74          	cmp    BYTE PTR [ebp-0x1d],0x74
10002021:	75 0f                	jne    10002032 <runRemoteInstall(void*)+0x677>
10002023:	c6 05 00 00 00 00 09 	mov    BYTE PTR ds:0x0,0x9	10002025: R_386_32	installKey
1000202a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000202d:	e9 c3 f9 ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10002032:	80 7d e3 54          	cmp    BYTE PTR [ebp-0x1d],0x54
10002036:	75 0f                	jne    10002047 <runRemoteInstall(void*)+0x68c>
10002038:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	1000203a: R_386_32	installKey
1000203f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002042:	e9 ae f9 ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10002047:	80 7d e3 65          	cmp    BYTE PTR [ebp-0x1d],0x65
1000204b:	75 0f                	jne    1000205c <runRemoteInstall(void*)+0x6a1>
1000204d:	c6 05 00 00 00 00 1b 	mov    BYTE PTR ds:0x0,0x1b	1000204f: R_386_32	installKey
10002054:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002057:	e9 99 f9 ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
1000205c:	80 7d e3 6b          	cmp    BYTE PTR [ebp-0x1d],0x6b
10002060:	75 13                	jne    10002075 <runRemoteInstall(void*)+0x6ba>
10002062:	a0 00 00 00 00       	mov    al,ds:0x0	10002063: R_386_32	installKey
10002067:	0f be c0             	movsx  eax,al
1000206a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000206d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002070:	e9 80 f9 ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10002075:	80 7d e3 77          	cmp    BYTE PTR [ebp-0x1d],0x77
10002079:	75 26                	jne    100020a1 <runRemoteInstall(void*)+0x6e6>
1000207b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000207e:	a0 00 00 00 00       	mov    al,ds:0x0	1000207f: R_386_32	installKey
10002083:	84 c0                	test   al,al
10002085:	0f 95 c0             	setne  al
10002088:	84 c0                	test   al,al
1000208a:	0f 84 65 f9 ff ff    	je     100019f5 <runRemoteInstall(void*)+0x3a>
10002090:	83 ec 08             	sub    esp,0x8
10002093:	6a 00                	push   0x0
10002095:	6a 32                	push   0x32
10002097:	e8 fc ff ff ff       	call   10002098 <runRemoteInstall(void*)+0x6dd>	10002098: R_386_PC32	milliTenthSleep(unsigned long long)
1000209c:	83 c4 10             	add    esp,0x10
1000209f:	eb dd                	jmp    1000207e <runRemoteInstall(void*)+0x6c3>
100020a1:	80 7d e3 2f          	cmp    BYTE PTR [ebp-0x1d],0x2f
100020a5:	0f 85 4a f9 ff ff    	jne    100019f5 <runRemoteInstall(void*)+0x3a>
100020ab:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100020ae:	a0 00 00 00 00       	mov    al,ds:0x0	100020af: R_386_32	installKey
100020b3:	84 c0                	test   al,al
100020b5:	0f 94 c0             	sete   al
100020b8:	84 c0                	test   al,al
100020ba:	0f 84 35 f9 ff ff    	je     100019f5 <runRemoteInstall(void*)+0x3a>
100020c0:	83 ec 08             	sub    esp,0x8
100020c3:	6a 00                	push   0x0
100020c5:	6a 32                	push   0x32
100020c7:	e8 fc ff ff ff       	call   100020c8 <runRemoteInstall(void*)+0x70d>	100020c8: R_386_PC32	milliTenthSleep(unsigned long long)
100020cc:	83 c4 10             	add    esp,0x10
100020cf:	eb dd                	jmp    100020ae <runRemoteInstall(void*)+0x6f3>
100020d1:	90                   	nop
100020d2:	e9 1e f9 ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
100020d7:	90                   	nop
100020d8:	e9 18 f9 ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
100020dd:	83 ec 08             	sub    esp,0x8
100020e0:	6a 00                	push   0x0
100020e2:	6a 05                	push   0x5
100020e4:	e8 fc ff ff ff       	call   100020e5 <runRemoteInstall(void*)+0x72a>	100020e5: R_386_PC32	sleep(unsigned long long)
100020e9:	83 c4 10             	add    esp,0x10
100020ec:	eb ef                	jmp    100020dd <runRemoteInstall(void*)+0x722>

100020ee <bootInstallKeybrd(KeyboardToken, bool*)>:
100020ee:	55                   	push   ebp
100020ef:	89 e5                	mov    ebp,esp
100020f1:	a0 00 00 00 00       	mov    al,ds:0x0	100020f2: R_386_32	blockUserTyping
100020f6:	84 c0                	test   al,al
100020f8:	0f 85 b6 00 00 00    	jne    100021b4 <bootInstallKeybrd(KeyboardToken, bool*)+0xc6>
100020fe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10002101:	05 04 01 00 00       	add    eax,0x104
10002106:	8a 00                	mov    al,BYTE PTR [eax]
10002108:	84 c0                	test   al,al
1000210a:	74 15                	je     10002121 <bootInstallKeybrd(KeyboardToken, bool*)+0x33>
1000210c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000210f:	66 83 f8 09          	cmp    ax,0x9
10002113:	75 0c                	jne    10002121 <bootInstallKeybrd(KeyboardToken, bool*)+0x33>
10002115:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	10002117: R_386_32	installKey
1000211c:	e9 97 00 00 00       	jmp    100021b8 <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
10002121:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
10002124:	84 c0                	test   al,al
10002126:	0f 85 8b 00 00 00    	jne    100021b7 <bootInstallKeybrd(KeyboardToken, bool*)+0xc9>
1000212c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000212f:	66 3d 0a 02          	cmp    ax,0x20a
10002133:	75 09                	jne    1000213e <bootInstallKeybrd(KeyboardToken, bool*)+0x50>
10002135:	c6 05 00 00 00 00 1b 	mov    BYTE PTR ds:0x0,0x1b	10002137: R_386_32	installKey
1000213c:	eb 7a                	jmp    100021b8 <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
1000213e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002141:	66 3d 0d 02          	cmp    ax,0x20d
10002145:	75 09                	jne    10002150 <bootInstallKeybrd(KeyboardToken, bool*)+0x62>
10002147:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	10002149: R_386_32	installKey
1000214e:	eb 68                	jmp    100021b8 <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
10002150:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002153:	66 3d 0e 02          	cmp    ax,0x20e
10002157:	75 09                	jne    10002162 <bootInstallKeybrd(KeyboardToken, bool*)+0x74>
10002159:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	1000215b: R_386_32	installKey
10002160:	eb 56                	jmp    100021b8 <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
10002162:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002165:	66 3d 0b 02          	cmp    ax,0x20b
10002169:	75 09                	jne    10002174 <bootInstallKeybrd(KeyboardToken, bool*)+0x86>
1000216b:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	1000216d: R_386_32	installKey
10002172:	eb 44                	jmp    100021b8 <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
10002174:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002177:	66 3d 0c 02          	cmp    ax,0x20c
1000217b:	75 09                	jne    10002186 <bootInstallKeybrd(KeyboardToken, bool*)+0x98>
1000217d:	c6 05 00 00 00 00 02 	mov    BYTE PTR ds:0x0,0x2	1000217f: R_386_32	installKey
10002184:	eb 32                	jmp    100021b8 <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
10002186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002189:	66 3d 04 02          	cmp    ax,0x204
1000218d:	75 09                	jne    10002198 <bootInstallKeybrd(KeyboardToken, bool*)+0xaa>
1000218f:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	10002191: R_386_32	installKey
10002196:	eb 20                	jmp    100021b8 <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
10002198:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000219b:	66 3d 05 02          	cmp    ax,0x205
1000219f:	75 09                	jne    100021aa <bootInstallKeybrd(KeyboardToken, bool*)+0xbc>
100021a1:	c6 05 00 00 00 00 7e 	mov    BYTE PTR ds:0x0,0x7e	100021a3: R_386_32	installKey
100021a8:	eb 0e                	jmp    100021b8 <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
100021aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021ad:	a2 00 00 00 00       	mov    ds:0x0,al	100021ae: R_386_32	installKey
100021b2:	eb 04                	jmp    100021b8 <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
100021b4:	90                   	nop
100021b5:	eb 01                	jmp    100021b8 <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
100021b7:	90                   	nop
100021b8:	5d                   	pop    ebp
100021b9:	c3                   	ret    

100021ba <bootInstallTasks(int)>:
100021ba:	55                   	push   ebp
100021bb:	89 e5                	mov    ebp,esp
100021bd:	83 ec 08             	sub    esp,0x8
100021c0:	a1 00 00 00 00       	mov    eax,ds:0x0	100021c1: R_386_32	term
100021c5:	83 ec 04             	sub    esp,0x4
100021c8:	6a 08                	push   0x8
100021ca:	6a 18                	push   0x18
100021cc:	50                   	push   eax
100021cd:	e8 fc ff ff ff       	call   100021ce <bootInstallTasks(int)+0x14>	100021ce: R_386_PC32	VgaText::setCursor(int, int)
100021d2:	83 c4 10             	add    esp,0x10
100021d5:	a1 00 00 00 00       	mov    eax,ds:0x0	100021d6: R_386_32	term
100021da:	83 ec 08             	sub    esp,0x8
100021dd:	68 5c b1 00 10       	push   0x1000b15c	100021de: R_386_32	.text
100021e2:	50                   	push   eax
100021e3:	e8 fc ff ff ff       	call   100021e4 <bootInstallTasks(int)+0x2a>	100021e4: R_386_PC32	VgaText::puts(char const*)
100021e8:	83 c4 10             	add    esp,0x10
100021eb:	a1 00 00 00 00       	mov    eax,ds:0x0	100021ec: R_386_32	term
100021f0:	83 ec 04             	sub    esp,0x4
100021f3:	6a 0a                	push   0xa
100021f5:	6a 1a                	push   0x1a
100021f7:	50                   	push   eax
100021f8:	e8 fc ff ff ff       	call   100021f9 <bootInstallTasks(int)+0x3f>	100021f9: R_386_PC32	VgaText::setCursor(int, int)
100021fd:	83 c4 10             	add    esp,0x10
10002200:	a1 00 00 00 00       	mov    eax,ds:0x0	10002201: R_386_32	term
10002205:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10002209:	75 07                	jne    10002212 <bootInstallTasks(int)+0x58>
1000220b:	ba 84 b1 00 10       	mov    edx,0x1000b184	1000220c: R_386_32	.text
10002210:	eb 05                	jmp    10002217 <bootInstallTasks(int)+0x5d>
10002212:	ba 87 b1 00 10       	mov    edx,0x1000b187	10002213: R_386_32	.text
10002217:	83 ec 08             	sub    esp,0x8
1000221a:	52                   	push   edx
1000221b:	50                   	push   eax
1000221c:	e8 fc ff ff ff       	call   1000221d <bootInstallTasks(int)+0x63>	1000221d: R_386_PC32	VgaText::puts(char const*)
10002221:	83 c4 10             	add    esp,0x10
10002224:	a1 00 00 00 00       	mov    eax,ds:0x0	10002225: R_386_32	term
10002229:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
1000222d:	78 07                	js     10002236 <bootInstallTasks(int)+0x7c>
1000222f:	ba 00 00 00 00       	mov    edx,0x0
10002234:	eb 05                	jmp    1000223b <bootInstallTasks(int)+0x81>
10002236:	ba 07 00 00 00       	mov    edx,0x7
1000223b:	6a 0f                	push   0xf
1000223d:	52                   	push   edx
1000223e:	68 8a b1 00 10       	push   0x1000b18a	1000223f: R_386_32	.text
10002243:	50                   	push   eax
10002244:	e8 fc ff ff ff       	call   10002245 <bootInstallTasks(int)+0x8b>	10002245: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002249:	83 c4 10             	add    esp,0x10
1000224c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000224d: R_386_32	term
10002251:	83 ec 04             	sub    esp,0x4
10002254:	6a 0b                	push   0xb
10002256:	6a 1a                	push   0x1a
10002258:	50                   	push   eax
10002259:	e8 fc ff ff ff       	call   1000225a <bootInstallTasks(int)+0xa0>	1000225a: R_386_PC32	VgaText::setCursor(int, int)
1000225e:	83 c4 10             	add    esp,0x10
10002261:	a1 00 00 00 00       	mov    eax,ds:0x0	10002262: R_386_32	term
10002266:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
1000226a:	75 07                	jne    10002273 <bootInstallTasks(int)+0xb9>
1000226c:	ba 84 b1 00 10       	mov    edx,0x1000b184	1000226d: R_386_32	.text
10002271:	eb 05                	jmp    10002278 <bootInstallTasks(int)+0xbe>
10002273:	ba 87 b1 00 10       	mov    edx,0x1000b187	10002274: R_386_32	.text
10002278:	83 ec 08             	sub    esp,0x8
1000227b:	52                   	push   edx
1000227c:	50                   	push   eax
1000227d:	e8 fc ff ff ff       	call   1000227e <bootInstallTasks(int)+0xc4>	1000227e: R_386_PC32	VgaText::puts(char const*)
10002282:	83 c4 10             	add    esp,0x10
10002285:	a1 00 00 00 00       	mov    eax,ds:0x0	10002286: R_386_32	term
1000228a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
1000228e:	7e 07                	jle    10002297 <bootInstallTasks(int)+0xdd>
10002290:	ba 00 00 00 00       	mov    edx,0x0
10002295:	eb 05                	jmp    1000229c <bootInstallTasks(int)+0xe2>
10002297:	ba 07 00 00 00       	mov    edx,0x7
1000229c:	6a 0f                	push   0xf
1000229e:	52                   	push   edx
1000229f:	68 a2 b1 00 10       	push   0x1000b1a2	100022a0: R_386_32	.text
100022a4:	50                   	push   eax
100022a5:	e8 fc ff ff ff       	call   100022a6 <bootInstallTasks(int)+0xec>	100022a6: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100022aa:	83 c4 10             	add    esp,0x10
100022ad:	a1 00 00 00 00       	mov    eax,ds:0x0	100022ae: R_386_32	term
100022b2:	83 ec 04             	sub    esp,0x4
100022b5:	6a 0c                	push   0xc
100022b7:	6a 1a                	push   0x1a
100022b9:	50                   	push   eax
100022ba:	e8 fc ff ff ff       	call   100022bb <bootInstallTasks(int)+0x101>	100022bb: R_386_PC32	VgaText::setCursor(int, int)
100022bf:	83 c4 10             	add    esp,0x10
100022c2:	a1 00 00 00 00       	mov    eax,ds:0x0	100022c3: R_386_32	term
100022c7:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
100022cb:	75 07                	jne    100022d4 <bootInstallTasks(int)+0x11a>
100022cd:	ba 84 b1 00 10       	mov    edx,0x1000b184	100022ce: R_386_32	.text
100022d2:	eb 05                	jmp    100022d9 <bootInstallTasks(int)+0x11f>
100022d4:	ba 87 b1 00 10       	mov    edx,0x1000b187	100022d5: R_386_32	.text
100022d9:	83 ec 08             	sub    esp,0x8
100022dc:	52                   	push   edx
100022dd:	50                   	push   eax
100022de:	e8 fc ff ff ff       	call   100022df <bootInstallTasks(int)+0x125>	100022df: R_386_PC32	VgaText::puts(char const*)
100022e3:	83 c4 10             	add    esp,0x10
100022e6:	a1 00 00 00 00       	mov    eax,ds:0x0	100022e7: R_386_32	term
100022eb:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
100022ef:	7e 07                	jle    100022f8 <bootInstallTasks(int)+0x13e>
100022f1:	ba 00 00 00 00       	mov    edx,0x0
100022f6:	eb 05                	jmp    100022fd <bootInstallTasks(int)+0x143>
100022f8:	ba 07 00 00 00       	mov    edx,0x7
100022fd:	6a 0f                	push   0xf
100022ff:	52                   	push   edx
10002300:	68 b8 b1 00 10       	push   0x1000b1b8	10002301: R_386_32	.text
10002305:	50                   	push   eax
10002306:	e8 fc ff ff ff       	call   10002307 <bootInstallTasks(int)+0x14d>	10002307: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000230b:	83 c4 10             	add    esp,0x10
1000230e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000230f: R_386_32	term
10002313:	83 ec 04             	sub    esp,0x4
10002316:	6a 0d                	push   0xd
10002318:	6a 1a                	push   0x1a
1000231a:	50                   	push   eax
1000231b:	e8 fc ff ff ff       	call   1000231c <bootInstallTasks(int)+0x162>	1000231c: R_386_PC32	VgaText::setCursor(int, int)
10002320:	83 c4 10             	add    esp,0x10
10002323:	a1 00 00 00 00       	mov    eax,ds:0x0	10002324: R_386_32	term
10002328:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
1000232c:	75 07                	jne    10002335 <bootInstallTasks(int)+0x17b>
1000232e:	ba 84 b1 00 10       	mov    edx,0x1000b184	1000232f: R_386_32	.text
10002333:	eb 05                	jmp    1000233a <bootInstallTasks(int)+0x180>
10002335:	ba 87 b1 00 10       	mov    edx,0x1000b187	10002336: R_386_32	.text
1000233a:	83 ec 08             	sub    esp,0x8
1000233d:	52                   	push   edx
1000233e:	50                   	push   eax
1000233f:	e8 fc ff ff ff       	call   10002340 <bootInstallTasks(int)+0x186>	10002340: R_386_PC32	VgaText::puts(char const*)
10002344:	83 c4 10             	add    esp,0x10
10002347:	a1 00 00 00 00       	mov    eax,ds:0x0	10002348: R_386_32	term
1000234c:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10002350:	7e 07                	jle    10002359 <bootInstallTasks(int)+0x19f>
10002352:	ba 00 00 00 00       	mov    edx,0x0
10002357:	eb 05                	jmp    1000235e <bootInstallTasks(int)+0x1a4>
10002359:	ba 07 00 00 00       	mov    edx,0x7
1000235e:	6a 0f                	push   0xf
10002360:	52                   	push   edx
10002361:	68 ce b1 00 10       	push   0x1000b1ce	10002362: R_386_32	.text
10002366:	50                   	push   eax
10002367:	e8 fc ff ff ff       	call   10002368 <bootInstallTasks(int)+0x1ae>	10002368: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000236c:	83 c4 10             	add    esp,0x10
1000236f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002370: R_386_32	term
10002374:	83 ec 04             	sub    esp,0x4
10002377:	6a 0e                	push   0xe
10002379:	6a 1a                	push   0x1a
1000237b:	50                   	push   eax
1000237c:	e8 fc ff ff ff       	call   1000237d <bootInstallTasks(int)+0x1c3>	1000237d: R_386_PC32	VgaText::setCursor(int, int)
10002381:	83 c4 10             	add    esp,0x10
10002384:	a1 00 00 00 00       	mov    eax,ds:0x0	10002385: R_386_32	term
10002389:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
1000238d:	75 07                	jne    10002396 <bootInstallTasks(int)+0x1dc>
1000238f:	ba 84 b1 00 10       	mov    edx,0x1000b184	10002390: R_386_32	.text
10002394:	eb 05                	jmp    1000239b <bootInstallTasks(int)+0x1e1>
10002396:	ba 87 b1 00 10       	mov    edx,0x1000b187	10002397: R_386_32	.text
1000239b:	83 ec 08             	sub    esp,0x8
1000239e:	52                   	push   edx
1000239f:	50                   	push   eax
100023a0:	e8 fc ff ff ff       	call   100023a1 <bootInstallTasks(int)+0x1e7>	100023a1: R_386_PC32	VgaText::puts(char const*)
100023a5:	83 c4 10             	add    esp,0x10
100023a8:	a1 00 00 00 00       	mov    eax,ds:0x0	100023a9: R_386_32	term
100023ad:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
100023b1:	7e 07                	jle    100023ba <bootInstallTasks(int)+0x200>
100023b3:	ba 00 00 00 00       	mov    edx,0x0
100023b8:	eb 05                	jmp    100023bf <bootInstallTasks(int)+0x205>
100023ba:	ba 07 00 00 00       	mov    edx,0x7
100023bf:	6a 0f                	push   0xf
100023c1:	52                   	push   edx
100023c2:	68 e2 b1 00 10       	push   0x1000b1e2	100023c3: R_386_32	.text
100023c7:	50                   	push   eax
100023c8:	e8 fc ff ff ff       	call   100023c9 <bootInstallTasks(int)+0x20f>	100023c9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100023cd:	83 c4 10             	add    esp,0x10
100023d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100023d1: R_386_32	term
100023d5:	83 ec 04             	sub    esp,0x4
100023d8:	6a 0f                	push   0xf
100023da:	6a 1a                	push   0x1a
100023dc:	50                   	push   eax
100023dd:	e8 fc ff ff ff       	call   100023de <bootInstallTasks(int)+0x224>	100023de: R_386_PC32	VgaText::setCursor(int, int)
100023e2:	83 c4 10             	add    esp,0x10
100023e5:	a1 00 00 00 00       	mov    eax,ds:0x0	100023e6: R_386_32	term
100023ea:	83 7d 08 05          	cmp    DWORD PTR [ebp+0x8],0x5
100023ee:	75 07                	jne    100023f7 <bootInstallTasks(int)+0x23d>
100023f0:	ba 84 b1 00 10       	mov    edx,0x1000b184	100023f1: R_386_32	.text
100023f5:	eb 05                	jmp    100023fc <bootInstallTasks(int)+0x242>
100023f7:	ba 87 b1 00 10       	mov    edx,0x1000b187	100023f8: R_386_32	.text
100023fc:	83 ec 08             	sub    esp,0x8
100023ff:	52                   	push   edx
10002400:	50                   	push   eax
10002401:	e8 fc ff ff ff       	call   10002402 <bootInstallTasks(int)+0x248>	10002402: R_386_PC32	VgaText::puts(char const*)
10002406:	83 c4 10             	add    esp,0x10
10002409:	a1 00 00 00 00       	mov    eax,ds:0x0	1000240a: R_386_32	term
1000240e:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10002412:	7e 07                	jle    1000241b <bootInstallTasks(int)+0x261>
10002414:	ba 00 00 00 00       	mov    edx,0x0
10002419:	eb 05                	jmp    10002420 <bootInstallTasks(int)+0x266>
1000241b:	ba 07 00 00 00       	mov    edx,0x7
10002420:	6a 0f                	push   0xf
10002422:	52                   	push   edx
10002423:	68 fa b1 00 10       	push   0x1000b1fa	10002424: R_386_32	.text
10002428:	50                   	push   eax
10002429:	e8 fc ff ff ff       	call   1000242a <bootInstallTasks(int)+0x270>	1000242a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000242e:	83 c4 10             	add    esp,0x10
10002431:	90                   	nop
10002432:	c9                   	leave  
10002433:	c3                   	ret    

10002434 <ror(unsigned long long, int, int)>:
10002434:	55                   	push   ebp
10002435:	89 e5                	mov    ebp,esp
10002437:	56                   	push   esi
10002438:	53                   	push   ebx
10002439:	83 ec 20             	sub    esp,0x20
1000243c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000243f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10002442:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002445:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002448:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000244b:	ba 01 00 00 00       	mov    edx,0x1
10002450:	88 c1                	mov    cl,al
10002452:	d3 e2                	shl    edx,cl
10002454:	89 d0                	mov    eax,edx
10002456:	48                   	dec    eax
10002457:	99                   	cdq    
10002458:	89 c1                	mov    ecx,eax
1000245a:	23 4d e0             	and    ecx,DWORD PTR [ebp-0x20]
1000245d:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10002460:	89 d0                	mov    eax,edx
10002462:	23 45 e4             	and    eax,DWORD PTR [ebp-0x1c]
10002465:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10002468:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
1000246b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000246e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10002471:	0f ad d0             	shrd   eax,edx,cl
10002474:	d3 ea                	shr    edx,cl
10002476:	f6 c1 20             	test   cl,0x20
10002479:	74 04                	je     1000247f <ror(unsigned long long, int, int)+0x4b>
1000247b:	89 d0                	mov    eax,edx
1000247d:	31 d2                	xor    edx,edx
1000247f:	89 c3                	mov    ebx,eax
10002481:	89 d6                	mov    esi,edx
10002483:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10002486:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
10002489:	89 c1                	mov    ecx,eax
1000248b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000248e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002491:	0f a5 c2             	shld   edx,eax,cl
10002494:	d3 e0                	shl    eax,cl
10002496:	f6 c1 20             	test   cl,0x20
10002499:	74 04                	je     1000249f <ror(unsigned long long, int, int)+0x6b>
1000249b:	89 c2                	mov    edx,eax
1000249d:	31 c0                	xor    eax,eax
1000249f:	89 d1                	mov    ecx,edx
100024a1:	89 c2                	mov    edx,eax
100024a3:	89 d8                	mov    eax,ebx
100024a5:	09 d0                	or     eax,edx
100024a7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100024aa:	89 f0                	mov    eax,esi
100024ac:	09 c8                	or     eax,ecx
100024ae:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100024b1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100024b4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100024b7:	83 c4 20             	add    esp,0x20
100024ba:	5b                   	pop    ebx
100024bb:	5e                   	pop    esi
100024bc:	5d                   	pop    ebp
100024bd:	c3                   	ret    

100024be <swapBits(unsigned long long, unsigned long long, unsigned long long)>:
100024be:	55                   	push   ebp
100024bf:	89 e5                	mov    ebp,esp
100024c1:	56                   	push   esi
100024c2:	53                   	push   ebx
100024c3:	83 ec 40             	sub    esp,0x40
100024c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024c9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100024cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100024cf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100024d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100024d5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
100024d8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100024db:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100024de:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100024e1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100024e4:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
100024e7:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100024ea:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
100024ed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024f0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100024f3:	0f ad d0             	shrd   eax,edx,cl
100024f6:	d3 ea                	shr    edx,cl
100024f8:	f6 c1 20             	test   cl,0x20
100024fb:	74 04                	je     10002501 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x43>
100024fd:	89 d0                	mov    eax,edx
100024ff:	31 d2                	xor    edx,edx
10002501:	89 c3                	mov    ebx,eax
10002503:	89 d6                	mov    esi,edx
10002505:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10002508:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000250b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000250e:	0f ad d0             	shrd   eax,edx,cl
10002511:	d3 ea                	shr    edx,cl
10002513:	f6 c1 20             	test   cl,0x20
10002516:	74 04                	je     1000251c <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x5e>
10002518:	89 d0                	mov    eax,edx
1000251a:	31 d2                	xor    edx,edx
1000251c:	89 d1                	mov    ecx,edx
1000251e:	89 c2                	mov    edx,eax
10002520:	89 d8                	mov    eax,ebx
10002522:	31 d0                	xor    eax,edx
10002524:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10002527:	89 f0                	mov    eax,esi
10002529:	31 c8                	xor    eax,ecx
1000252b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
1000252e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10002531:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10002534:	89 c6                	mov    esi,eax
10002536:	83 e6 01             	and    esi,0x1
10002539:	89 75 c8             	mov    DWORD PTR [ebp-0x38],esi
1000253c:	89 d0                	mov    eax,edx
1000253e:	83 e0 00             	and    eax,0x0
10002541:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10002544:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10002547:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
1000254a:	89 c3                	mov    ebx,eax
1000254c:	80 f7 00             	xor    bh,0x0
1000254f:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
10002552:	89 d0                	mov    eax,edx
10002554:	80 f4 00             	xor    ah,0x0
10002557:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
1000255a:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
1000255d:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10002560:	89 c8                	mov    eax,ecx
10002562:	09 d0                	or     eax,edx
10002564:	85 c0                	test   eax,eax
10002566:	74 62                	je     100025ca <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x10c>
10002568:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
1000256b:	b8 01 00 00 00       	mov    eax,0x1
10002570:	ba 00 00 00 00       	mov    edx,0x0
10002575:	0f a5 c2             	shld   edx,eax,cl
10002578:	d3 e0                	shl    eax,cl
1000257a:	f6 c1 20             	test   cl,0x20
1000257d:	74 04                	je     10002583 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xc5>
1000257f:	89 c2                	mov    edx,eax
10002581:	31 c0                	xor    eax,eax
10002583:	89 c3                	mov    ebx,eax
10002585:	89 d6                	mov    esi,edx
10002587:	89 d8                	mov    eax,ebx
10002589:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
1000258c:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
1000258f:	89 f0                	mov    eax,esi
10002591:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10002594:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10002597:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
1000259a:	b8 01 00 00 00       	mov    eax,0x1
1000259f:	ba 00 00 00 00       	mov    edx,0x0
100025a4:	0f a5 c2             	shld   edx,eax,cl
100025a7:	d3 e0                	shl    eax,cl
100025a9:	f6 c1 20             	test   cl,0x20
100025ac:	74 04                	je     100025b2 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xf4>
100025ae:	89 c2                	mov    edx,eax
100025b0:	31 c0                	xor    eax,eax
100025b2:	89 c1                	mov    ecx,eax
100025b4:	89 d3                	mov    ebx,edx
100025b6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100025b9:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
100025bc:	89 c6                	mov    esi,eax
100025be:	31 ce                	xor    esi,ecx
100025c0:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
100025c3:	31 d3                	xor    ebx,edx
100025c5:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
100025c8:	eb 0c                	jmp    100025d6 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x118>
100025ca:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100025cd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100025d0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100025d3:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
100025d6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100025d9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100025dc:	83 c4 40             	add    esp,0x40
100025df:	5b                   	pop    ebx
100025e0:	5e                   	pop    esi
100025e1:	5d                   	pop    ebp
100025e2:	c3                   	ret    

100025e3 <getChecksum(unsigned int)>:
100025e3:	55                   	push   ebp
100025e4:	89 e5                	mov    ebp,esp
100025e6:	56                   	push   esi
100025e7:	53                   	push   ebx
100025e8:	83 ec 20             	sub    esp,0x20
100025eb:	66 c7 45 f6 49 4e    	mov    WORD PTR [ebp-0xa],0x4e49
100025f1:	66 c7 45 f4 79 6e    	mov    WORD PTR [ebp-0xc],0x6e79
100025f7:	66 c7 45 f2 67 61    	mov    WORD PTR [ebp-0xe],0x6167
100025fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002600:	c1 e8 10             	shr    eax,0x10
10002603:	89 c1                	mov    ecx,eax
10002605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002608:	89 c2                	mov    edx,eax
1000260a:	89 d0                	mov    eax,edx
1000260c:	c1 e0 06             	shl    eax,0x6
1000260f:	29 d0                	sub    eax,edx
10002611:	c1 e0 04             	shl    eax,0x4
10002614:	01 d0                	add    eax,edx
10002616:	31 c8                	xor    eax,ecx
10002618:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
1000261c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10002620:	0f 84 b1 00 00 00    	je     100026d7 <getChecksum(unsigned int)+0xf4>
10002626:	b8 f4 02 00 00       	mov    eax,0x2f4
1000262b:	ba 00 00 00 00       	mov    edx,0x0
10002630:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10002633:	89 c3                	mov    ebx,eax
10002635:	be 00 00 00 00       	mov    esi,0x0
1000263a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000263d:	ba 00 00 00 00       	mov    edx,0x0
10002642:	6a 1d                	push   0x1d
10002644:	6a 05                	push   0x5
10002646:	52                   	push   edx
10002647:	50                   	push   eax
10002648:	e8 fc ff ff ff       	call   10002649 <getChecksum(unsigned int)+0x66>	10002649: R_386_PC32	ror(unsigned long long, int, int)
1000264d:	83 c4 10             	add    esp,0x10
10002650:	05 52 3f 04 00       	add    eax,0x43f52
10002655:	83 d2 00             	adc    edx,0x0
10002658:	89 d9                	mov    ecx,ebx
1000265a:	31 c1                	xor    ecx,eax
1000265c:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
1000265f:	31 d6                	xor    esi,edx
10002661:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
10002664:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10002667:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
1000266b:	66 0f af c2          	imul   ax,dx
1000266f:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
10002673:	b8 ea 00 00 00       	mov    eax,0xea
10002678:	ba 00 00 00 00       	mov    edx,0x0
1000267d:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10002680:	89 c3                	mov    ebx,eax
10002682:	be 00 00 00 00       	mov    esi,0x0
10002687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000268a:	ba 00 00 00 00       	mov    edx,0x0
1000268f:	6a 1f                	push   0x1f
10002691:	6a 03                	push   0x3
10002693:	52                   	push   edx
10002694:	50                   	push   eax
10002695:	e8 fc ff ff ff       	call   10002696 <getChecksum(unsigned int)+0xb3>	10002696: R_386_PC32	ror(unsigned long long, int, int)
1000269a:	83 c4 10             	add    esp,0x10
1000269d:	05 05 db 09 00       	add    eax,0x9db05
100026a2:	83 d2 00             	adc    edx,0x0
100026a5:	89 d9                	mov    ecx,ebx
100026a7:	31 c1                	xor    ecx,eax
100026a9:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
100026ac:	31 d6                	xor    esi,edx
100026ae:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100026b1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100026b4:	66 29 45 f4          	sub    WORD PTR [ebp-0xc],ax
100026b8:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
100026bc:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
100026bf:	25 d2 04 00 00       	and    eax,0x4d2
100026c4:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
100026c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100026cb:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
100026cf:	d1 6d 08             	shr    DWORD PTR [ebp+0x8],1
100026d2:	e9 45 ff ff ff       	jmp    1000261c <getChecksum(unsigned int)+0x39>
100026d7:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
100026db:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
100026de:	66 33 45 f2          	xor    ax,WORD PTR [ebp-0xe]
100026e2:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
100026e5:	0f b7 c0             	movzx  eax,ax
100026e8:	25 ff 7f 00 00       	and    eax,0x7fff
100026ed:	8d 65 f8             	lea    esp,[ebp-0x8]
100026f0:	5b                   	pop    ebx
100026f1:	5e                   	pop    esi
100026f2:	5d                   	pop    ebp
100026f3:	c3                   	ret    

100026f4 <createKey(char*, unsigned int)>:
100026f4:	55                   	push   ebp
100026f5:	89 e5                	mov    ebp,esp
100026f7:	53                   	push   ebx
100026f8:	83 ec 34             	sub    esp,0x34
100026fb:	68 0c b2 00 10       	push   0x1000b20c	100026fc: R_386_32	.text
10002700:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002703:	e8 fc ff ff ff       	call   10002704 <createKey(char*, unsigned int)+0x10>	10002704: R_386_PC32	strcpy
10002708:	83 c4 08             	add    esp,0x8
1000270b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000270e:	bb 00 00 00 00       	mov    ebx,0x0
10002713:	89 c8                	mov    eax,ecx
10002715:	89 da                	mov    edx,ebx
10002717:	0f a4 c2 0f          	shld   edx,eax,0xf
1000271b:	c1 e0 0f             	shl    eax,0xf
1000271e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002721:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10002724:	83 ec 04             	sub    esp,0x4
10002727:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000272a:	e8 fc ff ff ff       	call   1000272b <createKey(char*, unsigned int)+0x37>	1000272b: R_386_PC32	getChecksum(unsigned int)
1000272f:	83 c4 08             	add    esp,0x8
10002732:	ba 00 00 00 00       	mov    edx,0x0
10002737:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
1000273a:	09 55 f4             	or     DWORD PTR [ebp-0xc],edx
1000273d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10002744:	81 7d ec db 24 00 00 	cmp    DWORD PTR [ebp-0x14],0x24db
1000274b:	7f 7f                	jg     100027cc <createKey(char*, unsigned int)+0xd8>
1000274d:	81 75 f0 95 38 e4 b5 	xor    DWORD PTR [ebp-0x10],0xb5e43895
10002754:	83 75 f4 37          	xor    DWORD PTR [ebp-0xc],0x37
10002758:	6a 00                	push   0x0
1000275a:	6a 08                	push   0x8
1000275c:	6a 00                	push   0x0
1000275e:	6a 03                	push   0x3
10002760:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10002763:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10002766:	e8 fc ff ff ff       	call   10002767 <createKey(char*, unsigned int)+0x73>	10002767: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000276b:	83 c4 18             	add    esp,0x18
1000276e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002771:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10002774:	6a 00                	push   0x0
10002776:	6a 0c                	push   0xc
10002778:	6a 00                	push   0x0
1000277a:	6a 0d                	push   0xd
1000277c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000277f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10002782:	e8 fc ff ff ff       	call   10002783 <createKey(char*, unsigned int)+0x8f>	10002783: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002787:	83 c4 18             	add    esp,0x18
1000278a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000278d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10002790:	6a 00                	push   0x0
10002792:	6a 16                	push   0x16
10002794:	6a 00                	push   0x0
10002796:	6a 25                	push   0x25
10002798:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000279b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000279e:	e8 fc ff ff ff       	call   1000279f <createKey(char*, unsigned int)+0xab>	1000279f: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
100027a3:	83 c4 18             	add    esp,0x18
100027a6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100027a9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
100027ac:	6a 2a                	push   0x2a
100027ae:	6a 13                	push   0x13
100027b0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100027b3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100027b6:	e8 fc ff ff ff       	call   100027b7 <createKey(char*, unsigned int)+0xc3>	100027b7: R_386_PC32	ror(unsigned long long, int, int)
100027bb:	83 c4 10             	add    esp,0x10
100027be:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100027c1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
100027c4:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100027c7:	e9 78 ff ff ff       	jmp    10002744 <createKey(char*, unsigned int)+0x50>
100027cc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027cf:	83 e0 0f             	and    eax,0xf
100027d2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
100027d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027d8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100027db:	0f ac d0 04          	shrd   eax,edx,0x4
100027df:	c1 ea 04             	shr    edx,0x4
100027e2:	89 c1                	mov    ecx,eax
100027e4:	89 d3                	mov    ebx,edx
100027e6:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
100027e9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100027ec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027ef:	83 e0 0f             	and    eax,0xf
100027f2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100027f5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027f8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100027fb:	0f ac d0 04          	shrd   eax,edx,0x4
100027ff:	c1 ea 04             	shr    edx,0x4
10002802:	89 c1                	mov    ecx,eax
10002804:	89 d3                	mov    ebx,edx
10002806:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10002809:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
1000280c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000280f:	83 e0 0f             	and    eax,0xf
10002812:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10002815:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002818:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000281b:	0f ac d0 04          	shrd   eax,edx,0x4
1000281f:	c1 ea 04             	shr    edx,0x4
10002822:	89 c1                	mov    ecx,eax
10002824:	89 d3                	mov    ebx,edx
10002826:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10002829:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
1000282c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000282f:	25 ff 03 00 00       	and    eax,0x3ff
10002834:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10002837:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000283a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000283d:	0f ac d0 0a          	shrd   eax,edx,0xa
10002841:	c1 ea 0a             	shr    edx,0xa
10002844:	89 c1                	mov    ecx,eax
10002846:	89 d3                	mov    ebx,edx
10002848:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
1000284b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
1000284e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002851:	25 ff 03 00 00       	and    eax,0x3ff
10002856:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002859:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000285c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000285f:	0f ac d0 0a          	shrd   eax,edx,0xa
10002863:	c1 ea 0a             	shr    edx,0xa
10002866:	89 c1                	mov    ecx,eax
10002868:	89 d3                	mov    ebx,edx
1000286a:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
1000286d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002870:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002873:	25 ff 03 00 00       	and    eax,0x3ff
10002878:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
1000287b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000287e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002881:	0f ac d0 0a          	shrd   eax,edx,0xa
10002885:	c1 ea 0a             	shr    edx,0xa
10002888:	89 c1                	mov    ecx,eax
1000288a:	89 d3                	mov    ebx,edx
1000288c:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
1000288f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002892:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002895:	05 00 00 00 00       	add    eax,0x0	10002896: R_386_32	lookupA
1000289a:	8a 10                	mov    dl,BYTE PTR [eax]
1000289c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000289f:	88 10                	mov    BYTE PTR [eax],dl
100028a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100028a4:	8d 50 01             	lea    edx,[eax+0x1]
100028a7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100028aa:	05 00 00 00 00       	add    eax,0x0	100028ab: R_386_32	lookupA
100028af:	8a 00                	mov    al,BYTE PTR [eax]
100028b1:	88 02                	mov    BYTE PTR [edx],al
100028b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100028b6:	8d 50 0f             	lea    edx,[eax+0xf]
100028b9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100028bc:	05 00 00 00 00       	add    eax,0x0	100028bd: R_386_32	lookupA
100028c1:	8a 00                	mov    al,BYTE PTR [eax]
100028c3:	88 02                	mov    BYTE PTR [edx],al
100028c5:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
100028c8:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100028cd:	f7 e9                	imul   ecx
100028cf:	c1 fa 05             	sar    edx,0x5
100028d2:	89 c8                	mov    eax,ecx
100028d4:	c1 f8 1f             	sar    eax,0x1f
100028d7:	29 c2                	sub    edx,eax
100028d9:	89 d0                	mov    eax,edx
100028db:	b9 0a 00 00 00       	mov    ecx,0xa
100028e0:	99                   	cdq    
100028e1:	f7 f9                	idiv   ecx
100028e3:	89 d0                	mov    eax,edx
100028e5:	8d 50 30             	lea    edx,[eax+0x30]
100028e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100028eb:	83 c0 03             	add    eax,0x3
100028ee:	88 10                	mov    BYTE PTR [eax],dl
100028f0:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
100028f3:	b8 67 66 66 66       	mov    eax,0x66666667
100028f8:	f7 e9                	imul   ecx
100028fa:	c1 fa 02             	sar    edx,0x2
100028fd:	89 c8                	mov    eax,ecx
100028ff:	c1 f8 1f             	sar    eax,0x1f
10002902:	89 d1                	mov    ecx,edx
10002904:	29 c1                	sub    ecx,eax
10002906:	b8 67 66 66 66       	mov    eax,0x66666667
1000290b:	f7 e9                	imul   ecx
1000290d:	c1 fa 02             	sar    edx,0x2
10002910:	89 c8                	mov    eax,ecx
10002912:	c1 f8 1f             	sar    eax,0x1f
10002915:	29 c2                	sub    edx,eax
10002917:	89 d0                	mov    eax,edx
10002919:	c1 e0 02             	shl    eax,0x2
1000291c:	01 d0                	add    eax,edx
1000291e:	01 c0                	add    eax,eax
10002920:	29 c1                	sub    ecx,eax
10002922:	89 ca                	mov    edx,ecx
10002924:	88 d0                	mov    al,dl
10002926:	8d 50 30             	lea    edx,[eax+0x30]
10002929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000292c:	83 c0 04             	add    eax,0x4
1000292f:	88 10                	mov    BYTE PTR [eax],dl
10002931:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10002934:	b9 0a 00 00 00       	mov    ecx,0xa
10002939:	99                   	cdq    
1000293a:	f7 f9                	idiv   ecx
1000293c:	89 d0                	mov    eax,edx
1000293e:	8d 50 30             	lea    edx,[eax+0x30]
10002941:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002944:	83 c0 05             	add    eax,0x5
10002947:	88 10                	mov    BYTE PTR [eax],dl
10002949:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
1000294c:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002951:	f7 e9                	imul   ecx
10002953:	c1 fa 05             	sar    edx,0x5
10002956:	89 c8                	mov    eax,ecx
10002958:	c1 f8 1f             	sar    eax,0x1f
1000295b:	29 c2                	sub    edx,eax
1000295d:	89 d0                	mov    eax,edx
1000295f:	b9 0a 00 00 00       	mov    ecx,0xa
10002964:	99                   	cdq    
10002965:	f7 f9                	idiv   ecx
10002967:	89 d0                	mov    eax,edx
10002969:	8d 50 30             	lea    edx,[eax+0x30]
1000296c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000296f:	83 c0 07             	add    eax,0x7
10002972:	88 10                	mov    BYTE PTR [eax],dl
10002974:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10002977:	b8 67 66 66 66       	mov    eax,0x66666667
1000297c:	f7 e9                	imul   ecx
1000297e:	c1 fa 02             	sar    edx,0x2
10002981:	89 c8                	mov    eax,ecx
10002983:	c1 f8 1f             	sar    eax,0x1f
10002986:	89 d1                	mov    ecx,edx
10002988:	29 c1                	sub    ecx,eax
1000298a:	b8 67 66 66 66       	mov    eax,0x66666667
1000298f:	f7 e9                	imul   ecx
10002991:	c1 fa 02             	sar    edx,0x2
10002994:	89 c8                	mov    eax,ecx
10002996:	c1 f8 1f             	sar    eax,0x1f
10002999:	29 c2                	sub    edx,eax
1000299b:	89 d0                	mov    eax,edx
1000299d:	c1 e0 02             	shl    eax,0x2
100029a0:	01 d0                	add    eax,edx
100029a2:	01 c0                	add    eax,eax
100029a4:	29 c1                	sub    ecx,eax
100029a6:	89 ca                	mov    edx,ecx
100029a8:	88 d0                	mov    al,dl
100029aa:	8d 50 30             	lea    edx,[eax+0x30]
100029ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029b0:	83 c0 08             	add    eax,0x8
100029b3:	88 10                	mov    BYTE PTR [eax],dl
100029b5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100029b8:	b9 0a 00 00 00       	mov    ecx,0xa
100029bd:	99                   	cdq    
100029be:	f7 f9                	idiv   ecx
100029c0:	89 d0                	mov    eax,edx
100029c2:	8d 50 30             	lea    edx,[eax+0x30]
100029c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029c8:	83 c0 09             	add    eax,0x9
100029cb:	88 10                	mov    BYTE PTR [eax],dl
100029cd:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
100029d0:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100029d5:	f7 e9                	imul   ecx
100029d7:	c1 fa 05             	sar    edx,0x5
100029da:	89 c8                	mov    eax,ecx
100029dc:	c1 f8 1f             	sar    eax,0x1f
100029df:	29 c2                	sub    edx,eax
100029e1:	89 d0                	mov    eax,edx
100029e3:	b9 0a 00 00 00       	mov    ecx,0xa
100029e8:	99                   	cdq    
100029e9:	f7 f9                	idiv   ecx
100029eb:	89 d0                	mov    eax,edx
100029ed:	8d 50 30             	lea    edx,[eax+0x30]
100029f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029f3:	83 c0 0b             	add    eax,0xb
100029f6:	88 10                	mov    BYTE PTR [eax],dl
100029f8:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
100029fb:	b8 67 66 66 66       	mov    eax,0x66666667
10002a00:	f7 e9                	imul   ecx
10002a02:	c1 fa 02             	sar    edx,0x2
10002a05:	89 c8                	mov    eax,ecx
10002a07:	c1 f8 1f             	sar    eax,0x1f
10002a0a:	89 d1                	mov    ecx,edx
10002a0c:	29 c1                	sub    ecx,eax
10002a0e:	b8 67 66 66 66       	mov    eax,0x66666667
10002a13:	f7 e9                	imul   ecx
10002a15:	c1 fa 02             	sar    edx,0x2
10002a18:	89 c8                	mov    eax,ecx
10002a1a:	c1 f8 1f             	sar    eax,0x1f
10002a1d:	29 c2                	sub    edx,eax
10002a1f:	89 d0                	mov    eax,edx
10002a21:	c1 e0 02             	shl    eax,0x2
10002a24:	01 d0                	add    eax,edx
10002a26:	01 c0                	add    eax,eax
10002a28:	29 c1                	sub    ecx,eax
10002a2a:	89 ca                	mov    edx,ecx
10002a2c:	88 d0                	mov    al,dl
10002a2e:	8d 50 30             	lea    edx,[eax+0x30]
10002a31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a34:	83 c0 0c             	add    eax,0xc
10002a37:	88 10                	mov    BYTE PTR [eax],dl
10002a39:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10002a3c:	b9 0a 00 00 00       	mov    ecx,0xa
10002a41:	99                   	cdq    
10002a42:	f7 f9                	idiv   ecx
10002a44:	89 d0                	mov    eax,edx
10002a46:	8d 50 30             	lea    edx,[eax+0x30]
10002a49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a4c:	83 c0 0d             	add    eax,0xd
10002a4f:	88 10                	mov    BYTE PTR [eax],dl
10002a51:	90                   	nop
10002a52:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002a55:	c9                   	leave  
10002a56:	c3                   	ret    

10002a57 <retrieveBits(char*)>:
10002a57:	55                   	push   ebp
10002a58:	89 e5                	mov    ebp,esp
10002a5a:	57                   	push   edi
10002a5b:	56                   	push   esi
10002a5c:	53                   	push   ebx
10002a5d:	83 ec 4c             	sub    esp,0x4c
10002a60:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
10002a67:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10002a6e:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [ebp-0x1c],0xffffffff
10002a75:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10002a7c:	83 7d e0 0f          	cmp    DWORD PTR [ebp-0x20],0xf
10002a80:	7f 54                	jg     10002ad6 <retrieveBits(char*)+0x7f>
10002a82:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002a85:	05 00 00 00 00       	add    eax,0x0	10002a86: R_386_32	lookupA
10002a8a:	8a 10                	mov    dl,BYTE PTR [eax]
10002a8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a8f:	8a 00                	mov    al,BYTE PTR [eax]
10002a91:	38 c2                	cmp    dl,al
10002a93:	75 06                	jne    10002a9b <retrieveBits(char*)+0x44>
10002a95:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002a98:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10002a9b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002a9e:	05 00 00 00 00       	add    eax,0x0	10002a9f: R_386_32	lookupB
10002aa3:	8a 10                	mov    dl,BYTE PTR [eax]
10002aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002aa8:	40                   	inc    eax
10002aa9:	8a 00                	mov    al,BYTE PTR [eax]
10002aab:	38 c2                	cmp    dl,al
10002aad:	75 06                	jne    10002ab5 <retrieveBits(char*)+0x5e>
10002aaf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002ab2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10002ab5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002ab8:	05 00 00 00 00       	add    eax,0x0	10002ab9: R_386_32	lookupC
10002abd:	8a 10                	mov    dl,BYTE PTR [eax]
10002abf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ac2:	83 c0 0f             	add    eax,0xf
10002ac5:	8a 00                	mov    al,BYTE PTR [eax]
10002ac7:	38 c2                	cmp    dl,al
10002ac9:	75 06                	jne    10002ad1 <retrieveBits(char*)+0x7a>
10002acb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002ace:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002ad1:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10002ad4:	eb a6                	jmp    10002a7c <retrieveBits(char*)+0x25>
10002ad6:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
10002ada:	74 0c                	je     10002ae8 <retrieveBits(char*)+0x91>
10002adc:	83 7d e8 ff          	cmp    DWORD PTR [ebp-0x18],0xffffffff
10002ae0:	74 06                	je     10002ae8 <retrieveBits(char*)+0x91>
10002ae2:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10002ae6:	75 0f                	jne    10002af7 <retrieveBits(char*)+0xa0>
10002ae8:	b8 00 00 00 00       	mov    eax,0x0
10002aed:	ba 00 00 00 00       	mov    edx,0x0
10002af2:	e9 02 02 00 00       	jmp    10002cf9 <retrieveBits(char*)+0x2a2>
10002af7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002afa:	83 c0 03             	add    eax,0x3
10002afd:	8a 00                	mov    al,BYTE PTR [eax]
10002aff:	0f be c0             	movsx  eax,al
10002b02:	8d 50 d0             	lea    edx,[eax-0x30]
10002b05:	89 d0                	mov    eax,edx
10002b07:	c1 e0 02             	shl    eax,0x2
10002b0a:	01 d0                	add    eax,edx
10002b0c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002b13:	01 d0                	add    eax,edx
10002b15:	c1 e0 02             	shl    eax,0x2
10002b18:	89 c6                	mov    esi,eax
10002b1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b1d:	83 c0 04             	add    eax,0x4
10002b20:	8a 00                	mov    al,BYTE PTR [eax]
10002b22:	0f be c0             	movsx  eax,al
10002b25:	8d 50 d0             	lea    edx,[eax-0x30]
10002b28:	89 d0                	mov    eax,edx
10002b2a:	c1 e0 02             	shl    eax,0x2
10002b2d:	01 d0                	add    eax,edx
10002b2f:	01 c0                	add    eax,eax
10002b31:	8d 14 06             	lea    edx,[esi+eax*1]
10002b34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b37:	83 c0 05             	add    eax,0x5
10002b3a:	8a 00                	mov    al,BYTE PTR [eax]
10002b3c:	0f be c0             	movsx  eax,al
10002b3f:	83 e8 30             	sub    eax,0x30
10002b42:	01 d0                	add    eax,edx
10002b44:	99                   	cdq    
10002b45:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10002b48:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10002b4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b4e:	83 c0 07             	add    eax,0x7
10002b51:	8a 00                	mov    al,BYTE PTR [eax]
10002b53:	0f be c0             	movsx  eax,al
10002b56:	8d 50 d0             	lea    edx,[eax-0x30]
10002b59:	89 d0                	mov    eax,edx
10002b5b:	c1 e0 02             	shl    eax,0x2
10002b5e:	01 d0                	add    eax,edx
10002b60:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002b67:	01 d0                	add    eax,edx
10002b69:	c1 e0 02             	shl    eax,0x2
10002b6c:	89 c6                	mov    esi,eax
10002b6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b71:	83 c0 08             	add    eax,0x8
10002b74:	8a 00                	mov    al,BYTE PTR [eax]
10002b76:	0f be c0             	movsx  eax,al
10002b79:	8d 50 d0             	lea    edx,[eax-0x30]
10002b7c:	89 d0                	mov    eax,edx
10002b7e:	c1 e0 02             	shl    eax,0x2
10002b81:	01 d0                	add    eax,edx
10002b83:	01 c0                	add    eax,eax
10002b85:	8d 14 06             	lea    edx,[esi+eax*1]
10002b88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b8b:	83 c0 09             	add    eax,0x9
10002b8e:	8a 00                	mov    al,BYTE PTR [eax]
10002b90:	0f be c0             	movsx  eax,al
10002b93:	83 e8 30             	sub    eax,0x30
10002b96:	01 d0                	add    eax,edx
10002b98:	99                   	cdq    
10002b99:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10002b9c:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
10002b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ba2:	83 c0 0b             	add    eax,0xb
10002ba5:	8a 00                	mov    al,BYTE PTR [eax]
10002ba7:	0f be c0             	movsx  eax,al
10002baa:	8d 50 d0             	lea    edx,[eax-0x30]
10002bad:	89 d0                	mov    eax,edx
10002baf:	c1 e0 02             	shl    eax,0x2
10002bb2:	01 d0                	add    eax,edx
10002bb4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002bbb:	01 d0                	add    eax,edx
10002bbd:	c1 e0 02             	shl    eax,0x2
10002bc0:	89 c6                	mov    esi,eax
10002bc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bc5:	83 c0 0c             	add    eax,0xc
10002bc8:	8a 00                	mov    al,BYTE PTR [eax]
10002bca:	0f be c0             	movsx  eax,al
10002bcd:	8d 50 d0             	lea    edx,[eax-0x30]
10002bd0:	89 d0                	mov    eax,edx
10002bd2:	c1 e0 02             	shl    eax,0x2
10002bd5:	01 d0                	add    eax,edx
10002bd7:	01 c0                	add    eax,eax
10002bd9:	8d 14 06             	lea    edx,[esi+eax*1]
10002bdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bdf:	83 c0 0d             	add    eax,0xd
10002be2:	8a 00                	mov    al,BYTE PTR [eax]
10002be4:	0f be c0             	movsx  eax,al
10002be7:	83 e8 30             	sub    eax,0x30
10002bea:	01 d0                	add    eax,edx
10002bec:	99                   	cdq    
10002bed:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002bf0:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10002bf3:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002bf6:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10002bf9:	0f a4 c2 0a          	shld   edx,eax,0xa
10002bfd:	c1 e0 0a             	shl    eax,0xa
10002c00:	89 c6                	mov    esi,eax
10002c02:	89 d7                	mov    edi,edx
10002c04:	89 f0                	mov    eax,esi
10002c06:	0b 45 c8             	or     eax,DWORD PTR [ebp-0x38]
10002c09:	89 c1                	mov    ecx,eax
10002c0b:	89 f8                	mov    eax,edi
10002c0d:	0b 45 cc             	or     eax,DWORD PTR [ebp-0x34]
10002c10:	89 c3                	mov    ebx,eax
10002c12:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002c15:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10002c18:	0f a4 c2 14          	shld   edx,eax,0x14
10002c1c:	c1 e0 14             	shl    eax,0x14
10002c1f:	89 ce                	mov    esi,ecx
10002c21:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10002c24:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10002c27:	0b 75 a8             	or     esi,DWORD PTR [ebp-0x58]
10002c2a:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10002c2d:	89 d8                	mov    eax,ebx
10002c2f:	0b 45 ac             	or     eax,DWORD PTR [ebp-0x54]
10002c32:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10002c35:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002c38:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002c3b:	0f a4 c2 0c          	shld   edx,eax,0xc
10002c3f:	c1 e0 0c             	shl    eax,0xc
10002c42:	89 c3                	mov    ebx,eax
10002c44:	89 d6                	mov    esi,edx
10002c46:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
10002c49:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10002c4c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002c4f:	c1 e0 04             	shl    eax,0x4
10002c52:	0b 45 ec             	or     eax,DWORD PTR [ebp-0x14]
10002c55:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10002c58:	c1 e2 08             	shl    edx,0x8
10002c5b:	09 d0                	or     eax,edx
10002c5d:	99                   	cdq    
10002c5e:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
10002c61:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
10002c64:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10002c6b:	81 7d d4 db 24 00 00 	cmp    DWORD PTR [ebp-0x2c],0x24db
10002c72:	7f 7f                	jg     10002cf3 <retrieveBits(char*)+0x29c>
10002c74:	6a 2a                	push   0x2a
10002c76:	6a 13                	push   0x13
10002c78:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002c7b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002c7e:	e8 fc ff ff ff       	call   10002c7f <retrieveBits(char*)+0x228>	10002c7f: R_386_PC32	ror(unsigned long long, int, int)
10002c83:	83 c4 10             	add    esp,0x10
10002c86:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002c89:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002c8c:	6a 00                	push   0x0
10002c8e:	6a 08                	push   0x8
10002c90:	6a 00                	push   0x0
10002c92:	6a 03                	push   0x3
10002c94:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002c97:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002c9a:	e8 fc ff ff ff       	call   10002c9b <retrieveBits(char*)+0x244>	10002c9b: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002c9f:	83 c4 18             	add    esp,0x18
10002ca2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002ca5:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002ca8:	6a 00                	push   0x0
10002caa:	6a 0c                	push   0xc
10002cac:	6a 00                	push   0x0
10002cae:	6a 0d                	push   0xd
10002cb0:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002cb3:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002cb6:	e8 fc ff ff ff       	call   10002cb7 <retrieveBits(char*)+0x260>	10002cb7: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002cbb:	83 c4 18             	add    esp,0x18
10002cbe:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002cc1:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002cc4:	6a 00                	push   0x0
10002cc6:	6a 16                	push   0x16
10002cc8:	6a 00                	push   0x0
10002cca:	6a 25                	push   0x25
10002ccc:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002ccf:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002cd2:	e8 fc ff ff ff       	call   10002cd3 <retrieveBits(char*)+0x27c>	10002cd3: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002cd7:	83 c4 18             	add    esp,0x18
10002cda:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002cdd:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002ce0:	81 75 d8 95 38 e4 b5 	xor    DWORD PTR [ebp-0x28],0xb5e43895
10002ce7:	83 75 dc 37          	xor    DWORD PTR [ebp-0x24],0x37
10002ceb:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10002cee:	e9 78 ff ff ff       	jmp    10002c6b <retrieveBits(char*)+0x214>
10002cf3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002cf6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002cf9:	8d 65 f4             	lea    esp,[ebp-0xc]
10002cfc:	5b                   	pop    ebx
10002cfd:	5e                   	pop    esi
10002cfe:	5f                   	pop    edi
10002cff:	5d                   	pop    ebp
10002d00:	c3                   	ret    

10002d01 <checkKey(char*)>:
10002d01:	55                   	push   ebp
10002d02:	89 e5                	mov    ebp,esp
10002d04:	53                   	push   ebx
10002d05:	83 ec 14             	sub    esp,0x14
10002d08:	83 ec 04             	sub    esp,0x4
10002d0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002d0e:	e8 fc ff ff ff       	call   10002d0f <checkKey(char*)+0xe>	10002d0f: R_386_PC32	retrieveBits(char*)
10002d13:	83 c4 08             	add    esp,0x8
10002d16:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002d19:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10002d1c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002d1f:	25 ff 7f 00 00       	and    eax,0x7fff
10002d24:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10002d27:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002d2a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002d2d:	0f ac d0 0f          	shrd   eax,edx,0xf
10002d31:	c1 ea 0f             	shr    edx,0xf
10002d34:	89 c1                	mov    ecx,eax
10002d36:	89 d3                	mov    ebx,edx
10002d38:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
10002d3b:	83 ec 04             	sub    esp,0x4
10002d3e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002d41:	e8 fc ff ff ff       	call   10002d42 <checkKey(char*)+0x41>	10002d42: R_386_PC32	getChecksum(unsigned int)
10002d46:	83 c4 08             	add    esp,0x8
10002d49:	39 45 ec             	cmp    DWORD PTR [ebp-0x14],eax
10002d4c:	0f 95 c0             	setne  al
10002d4f:	84 c0                	test   al,al
10002d51:	74 07                	je     10002d5a <checkKey(char*)+0x59>
10002d53:	b8 00 00 00 00       	mov    eax,0x0
10002d58:	eb 06                	jmp    10002d60 <checkKey(char*)+0x5f>
10002d5a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002d5d:	83 e0 07             	and    eax,0x7
10002d60:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002d63:	c9                   	leave  
10002d64:	c3                   	ret    

10002d65 <changeKeyType(char*, int)>:
10002d65:	55                   	push   ebp
10002d66:	89 e5                	mov    ebp,esp
10002d68:	83 ec 10             	sub    esp,0x10
10002d6b:	83 ec 04             	sub    esp,0x4
10002d6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002d71:	e8 fc ff ff ff       	call   10002d72 <changeKeyType(char*, int)+0xd>	10002d72: R_386_PC32	retrieveBits(char*)
10002d76:	83 c4 08             	add    esp,0x8
10002d79:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10002d7c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10002d7f:	83 65 f8 f8          	and    DWORD PTR [ebp-0x8],0xfffffff8
10002d83:	83 65 fc ff          	and    DWORD PTR [ebp-0x4],0xffffffff
10002d87:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002d8a:	99                   	cdq    
10002d8b:	09 45 f8             	or     DWORD PTR [ebp-0x8],eax
10002d8e:	09 55 fc             	or     DWORD PTR [ebp-0x4],edx
10002d91:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10002d94:	50                   	push   eax
10002d95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002d98:	e8 fc ff ff ff       	call   10002d99 <changeKeyType(char*, int)+0x34>	10002d99: R_386_PC32	createKey(char*, unsigned int)
10002d9d:	83 c4 08             	add    esp,0x8
10002da0:	83 ec 04             	sub    esp,0x4
10002da3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002da6:	e8 fc ff ff ff       	call   10002da7 <changeKeyType(char*, int)+0x42>	10002da7: R_386_PC32	checkKey(char*)
10002dab:	83 c4 08             	add    esp,0x8
10002dae:	85 c0                	test   eax,eax
10002db0:	0f 95 c0             	setne  al
10002db3:	c9                   	leave  
10002db4:	c3                   	ret    

10002db5 <checkExtendedKey(char*)>:
10002db5:	55                   	push   ebp
10002db6:	89 e5                	mov    ebp,esp
10002db8:	83 ec 20             	sub    esp,0x20
10002dbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002dbe:	8a 00                	mov    al,BYTE PTR [eax]
10002dc0:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10002dc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002dc6:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
10002dc9:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
10002dcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002dcf:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10002dd2:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10002dd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002dd8:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
10002ddb:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10002dde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002de1:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10002de4:	88 45 f0             	mov    BYTE PTR [ebp-0x10],al
10002de7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002dea:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
10002ded:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10002df0:	c6 45 f2 2d          	mov    BYTE PTR [ebp-0xe],0x2d
10002df4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002df7:	8a 40 06             	mov    al,BYTE PTR [eax+0x6]
10002dfa:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10002dfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e00:	8a 40 07             	mov    al,BYTE PTR [eax+0x7]
10002e03:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10002e06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e09:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
10002e0c:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10002e0f:	c6 45 f6 2d          	mov    BYTE PTR [ebp-0xa],0x2d
10002e13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e16:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10002e19:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10002e1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e1f:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
10002e22:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
10002e25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e28:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
10002e2b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
10002e2e:	c6 45 fa 2d          	mov    BYTE PTR [ebp-0x6],0x2d
10002e32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e35:	8a 40 0f             	mov    al,BYTE PTR [eax+0xf]
10002e38:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10002e3b:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002e3e:	48                   	dec    eax
10002e3f:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10002e42:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002e45:	3c 2f                	cmp    al,0x2f
10002e47:	75 04                	jne    10002e4d <checkExtendedKey(char*)+0x98>
10002e49:	c6 45 ef 39          	mov    BYTE PTR [ebp-0x11],0x39
10002e4d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002e50:	48                   	dec    eax
10002e51:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10002e54:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002e57:	3c 2f                	cmp    al,0x2f
10002e59:	75 04                	jne    10002e5f <checkExtendedKey(char*)+0xaa>
10002e5b:	c6 45 f5 39          	mov    BYTE PTR [ebp-0xb],0x39
10002e5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e62:	83 c0 0d             	add    eax,0xd
10002e65:	8a 10                	mov    dl,BYTE PTR [eax]
10002e67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e6a:	83 c0 0c             	add    eax,0xc
10002e6d:	8a 00                	mov    al,BYTE PTR [eax]
10002e6f:	38 c2                	cmp    dl,al
10002e71:	74 0a                	je     10002e7d <checkExtendedKey(char*)+0xc8>
10002e73:	b8 00 00 00 00       	mov    eax,0x0
10002e78:	e9 d6 00 00 00       	jmp    10002f53 <checkExtendedKey(char*)+0x19e>
10002e7d:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002e80:	3c 2f                	cmp    al,0x2f
10002e82:	7e 07                	jle    10002e8b <checkExtendedKey(char*)+0xd6>
10002e84:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002e87:	3c 39                	cmp    al,0x39
10002e89:	7e 0a                	jle    10002e95 <checkExtendedKey(char*)+0xe0>
10002e8b:	b8 00 00 00 00       	mov    eax,0x0
10002e90:	e9 be 00 00 00       	jmp    10002f53 <checkExtendedKey(char*)+0x19e>
10002e95:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002e98:	3c 2f                	cmp    al,0x2f
10002e9a:	7e 07                	jle    10002ea3 <checkExtendedKey(char*)+0xee>
10002e9c:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002e9f:	3c 39                	cmp    al,0x39
10002ea1:	7e 0a                	jle    10002ead <checkExtendedKey(char*)+0xf8>
10002ea3:	b8 00 00 00 00       	mov    eax,0x0
10002ea8:	e9 a6 00 00 00       	jmp    10002f53 <checkExtendedKey(char*)+0x19e>
10002ead:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002eb0:	3c 2f                	cmp    al,0x2f
10002eb2:	7e 07                	jle    10002ebb <checkExtendedKey(char*)+0x106>
10002eb4:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002eb7:	3c 39                	cmp    al,0x39
10002eb9:	7e 0a                	jle    10002ec5 <checkExtendedKey(char*)+0x110>
10002ebb:	b8 00 00 00 00       	mov    eax,0x0
10002ec0:	e9 8e 00 00 00       	jmp    10002f53 <checkExtendedKey(char*)+0x19e>
10002ec5:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10002ec8:	3c 2f                	cmp    al,0x2f
10002eca:	7e 07                	jle    10002ed3 <checkExtendedKey(char*)+0x11e>
10002ecc:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10002ecf:	3c 39                	cmp    al,0x39
10002ed1:	7e 07                	jle    10002eda <checkExtendedKey(char*)+0x125>
10002ed3:	b8 00 00 00 00       	mov    eax,0x0
10002ed8:	eb 79                	jmp    10002f53 <checkExtendedKey(char*)+0x19e>
10002eda:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
10002edd:	3c 2f                	cmp    al,0x2f
10002edf:	7e 07                	jle    10002ee8 <checkExtendedKey(char*)+0x133>
10002ee1:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
10002ee4:	3c 39                	cmp    al,0x39
10002ee6:	7e 07                	jle    10002eef <checkExtendedKey(char*)+0x13a>
10002ee8:	b8 00 00 00 00       	mov    eax,0x0
10002eed:	eb 64                	jmp    10002f53 <checkExtendedKey(char*)+0x19e>
10002eef:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002ef2:	3c 2f                	cmp    al,0x2f
10002ef4:	7e 07                	jle    10002efd <checkExtendedKey(char*)+0x148>
10002ef6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002ef9:	3c 39                	cmp    al,0x39
10002efb:	7e 07                	jle    10002f04 <checkExtendedKey(char*)+0x14f>
10002efd:	b8 00 00 00 00       	mov    eax,0x0
10002f02:	eb 4f                	jmp    10002f53 <checkExtendedKey(char*)+0x19e>
10002f04:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10002f07:	3c 2f                	cmp    al,0x2f
10002f09:	7e 07                	jle    10002f12 <checkExtendedKey(char*)+0x15d>
10002f0b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10002f0e:	3c 39                	cmp    al,0x39
10002f10:	7e 07                	jle    10002f19 <checkExtendedKey(char*)+0x164>
10002f12:	b8 00 00 00 00       	mov    eax,0x0
10002f17:	eb 3a                	jmp    10002f53 <checkExtendedKey(char*)+0x19e>
10002f19:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
10002f1c:	3c 2f                	cmp    al,0x2f
10002f1e:	7e 07                	jle    10002f27 <checkExtendedKey(char*)+0x172>
10002f20:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
10002f23:	3c 39                	cmp    al,0x39
10002f25:	7e 07                	jle    10002f2e <checkExtendedKey(char*)+0x179>
10002f27:	b8 00 00 00 00       	mov    eax,0x0
10002f2c:	eb 25                	jmp    10002f53 <checkExtendedKey(char*)+0x19e>
10002f2e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
10002f31:	3c 2f                	cmp    al,0x2f
10002f33:	7e 07                	jle    10002f3c <checkExtendedKey(char*)+0x187>
10002f35:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
10002f38:	3c 39                	cmp    al,0x39
10002f3a:	7e 07                	jle    10002f43 <checkExtendedKey(char*)+0x18e>
10002f3c:	b8 00 00 00 00       	mov    eax,0x0
10002f41:	eb 10                	jmp    10002f53 <checkExtendedKey(char*)+0x19e>
10002f43:	83 ec 04             	sub    esp,0x4
10002f46:	8d 45 ec             	lea    eax,[ebp-0x14]
10002f49:	50                   	push   eax
10002f4a:	e8 fc ff ff ff       	call   10002f4b <checkExtendedKey(char*)+0x196>	10002f4b: R_386_PC32	checkKey(char*)
10002f4f:	83 c4 08             	add    esp,0x8
10002f52:	90                   	nop
10002f53:	c9                   	leave  
10002f54:	c3                   	ret    

10002f55 <loadTimezoneStrings()>:
10002f55:	55                   	push   ebp
10002f56:	89 e5                	mov    ebp,esp
10002f58:	53                   	push   ebx
10002f59:	83 ec 34             	sub    esp,0x34
10002f5c:	83 ec 0c             	sub    esp,0xc
10002f5f:	68 14 01 00 00       	push   0x114
10002f64:	e8 fc ff ff ff       	call   10002f65 <loadTimezoneStrings()+0x10>	10002f65: R_386_PC32	operator new(unsigned long)
10002f69:	83 c4 10             	add    esp,0x10
10002f6c:	89 c3                	mov    ebx,eax
10002f6e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002f6f: R_386_32	kernelProcess
10002f73:	83 ec 04             	sub    esp,0x4
10002f76:	50                   	push   eax
10002f77:	68 20 b2 00 10       	push   0x1000b220	10002f78: R_386_32	.text
10002f7c:	53                   	push   ebx
10002f7d:	e8 fc ff ff ff       	call   10002f7e <loadTimezoneStrings()+0x29>	10002f7e: R_386_PC32	File::File(char const*, Process*)
10002f82:	83 c4 10             	add    esp,0x10
10002f85:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10002f88:	83 ec 08             	sub    esp,0x8
10002f8b:	6a 01                	push   0x1
10002f8d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002f90:	e8 fc ff ff ff       	call   10002f91 <loadTimezoneStrings()+0x3c>	10002f91: R_386_PC32	File::open(FileOpenMode)
10002f95:	83 c4 10             	add    esp,0x10
10002f98:	83 ec 04             	sub    esp,0x4
10002f9b:	8d 45 d7             	lea    eax,[ebp-0x29]
10002f9e:	50                   	push   eax
10002f9f:	8d 45 d8             	lea    eax,[ebp-0x28]
10002fa2:	50                   	push   eax
10002fa3:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002fa6:	e8 fc ff ff ff       	call   10002fa7 <loadTimezoneStrings()+0x52>	10002fa7: R_386_PC32	File::stat(unsigned long long*, bool*)
10002fab:	83 c4 10             	add    esp,0x10
10002fae:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002fb1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002fb4:	83 ec 0c             	sub    esp,0xc
10002fb7:	50                   	push   eax
10002fb8:	e8 fc ff ff ff       	call   10002fb9 <loadTimezoneStrings()+0x64>	10002fb9: R_386_PC32	malloc
10002fbd:	83 c4 10             	add    esp,0x10
10002fc0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002fc3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002fc6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002fc9:	83 ec 04             	sub    esp,0x4
10002fcc:	50                   	push   eax
10002fcd:	6a 00                	push   0x0
10002fcf:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002fd2:	e8 fc ff ff ff       	call   10002fd3 <loadTimezoneStrings()+0x7e>	10002fd3: R_386_PC32	memset
10002fd7:	83 c4 10             	add    esp,0x10
10002fda:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002fdd:	8b 00                	mov    eax,DWORD PTR [eax]
10002fdf:	83 c0 0c             	add    eax,0xc
10002fe2:	8b 08                	mov    ecx,DWORD PTR [eax]
10002fe4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002fe7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002fea:	83 ec 0c             	sub    esp,0xc
10002fed:	8d 5d d0             	lea    ebx,[ebp-0x30]
10002ff0:	53                   	push   ebx
10002ff1:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002ff4:	52                   	push   edx
10002ff5:	50                   	push   eax
10002ff6:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002ff9:	ff d1                	call   ecx
10002ffb:	83 c4 20             	add    esp,0x20
10002ffe:	83 ec 0c             	sub    esp,0xc
10003001:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10003004:	e8 fc ff ff ff       	call   10003005 <loadTimezoneStrings()+0xb0>	10003005: R_386_PC32	File::close()
10003009:	83 c4 10             	add    esp,0x10
1000300c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10003013:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000301a:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
10003021:	7f 39                	jg     1000305c <loadTimezoneStrings()+0x107>
10003023:	83 ec 0c             	sub    esp,0xc
10003026:	6a 78                	push   0x78
10003028:	e8 fc ff ff ff       	call   10003029 <loadTimezoneStrings()+0xd4>	10003029: R_386_PC32	malloc
1000302d:	83 c4 10             	add    esp,0x10
10003030:	89 c2                	mov    edx,eax
10003032:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003035:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	10003038: R_386_32	timezoneStrings
1000303c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000303f:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10003042: R_386_32	timezoneStrings
10003046:	83 ec 08             	sub    esp,0x8
10003049:	68 3f b2 00 10       	push   0x1000b23f	1000304a: R_386_32	.text
1000304e:	50                   	push   eax
1000304f:	e8 fc ff ff ff       	call   10003050 <loadTimezoneStrings()+0xfb>	10003050: R_386_PC32	strcpy
10003054:	83 c4 10             	add    esp,0x10
10003057:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
1000305a:	eb be                	jmp    1000301a <loadTimezoneStrings()+0xc5>
1000305c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10003063:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10003066:	8d 50 01             	lea    edx,[eax+0x1]
10003069:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
1000306c:	89 c2                	mov    edx,eax
1000306e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003071:	01 d0                	add    eax,edx
10003073:	8a 00                	mov    al,BYTE PTR [eax]
10003075:	88 45 ce             	mov    BYTE PTR [ebp-0x32],al
10003078:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
1000307c:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
1000307f:	3c 0d                	cmp    al,0xd
10003081:	0f 84 2a 01 00 00    	je     100031b1 <loadTimezoneStrings()+0x25c>
10003087:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
1000308a:	3c 09                	cmp    al,0x9
1000308c:	75 3c                	jne    100030ca <loadTimezoneStrings()+0x175>
1000308e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003091:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10003094: R_386_32	timezoneStrings
10003098:	83 ec 0c             	sub    esp,0xc
1000309b:	50                   	push   eax
1000309c:	e8 fc ff ff ff       	call   1000309d <loadTimezoneStrings()+0x148>	1000309d: R_386_PC32	strlen
100030a1:	83 c4 10             	add    esp,0x10
100030a4:	83 f8 08             	cmp    eax,0x8
100030a7:	0f 87 0a 01 00 00    	ja     100031b7 <loadTimezoneStrings()+0x262>
100030ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100030b0:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100030b3: R_386_32	timezoneStrings
100030b7:	83 ec 08             	sub    esp,0x8
100030ba:	68 3f b2 00 10       	push   0x1000b23f	100030bb: R_386_32	.text
100030bf:	50                   	push   eax
100030c0:	e8 fc ff ff ff       	call   100030c1 <loadTimezoneStrings()+0x16c>	100030c1: R_386_PC32	strcat
100030c5:	83 c4 10             	add    esp,0x10
100030c8:	eb c4                	jmp    1000308e <loadTimezoneStrings()+0x139>
100030ca:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
100030cd:	3c 0a                	cmp    al,0xa
100030cf:	75 67                	jne    10003138 <loadTimezoneStrings()+0x1e3>
100030d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100030d4:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100030d7: R_386_32	timezoneStrings
100030db:	83 ec 0c             	sub    esp,0xc
100030de:	50                   	push   eax
100030df:	e8 fc ff ff ff       	call   100030e0 <loadTimezoneStrings()+0x18b>	100030e0: R_386_PC32	strlen
100030e4:	83 c4 10             	add    esp,0x10
100030e7:	83 f8 35             	cmp    eax,0x35
100030ea:	77 1d                	ja     10003109 <loadTimezoneStrings()+0x1b4>
100030ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100030ef:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100030f2: R_386_32	timezoneStrings
100030f6:	83 ec 08             	sub    esp,0x8
100030f9:	68 3f b2 00 10       	push   0x1000b23f	100030fa: R_386_32	.text
100030fe:	50                   	push   eax
100030ff:	e8 fc ff ff ff       	call   10003100 <loadTimezoneStrings()+0x1ab>	10003100: R_386_PC32	strcat
10003104:	83 c4 10             	add    esp,0x10
10003107:	eb c8                	jmp    100030d1 <loadTimezoneStrings()+0x17c>
10003109:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000310c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000310f:	99                   	cdq    
10003110:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10003113:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
10003116:	39 c8                	cmp    eax,ecx
10003118:	89 d0                	mov    eax,edx
1000311a:	19 d8                	sbb    eax,ebx
1000311c:	0f 82 9b 00 00 00    	jb     100031bd <loadTimezoneStrings()+0x268>
10003122:	83 ec 0c             	sub    esp,0xc
10003125:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10003128:	e8 fc ff ff ff       	call   10003129 <loadTimezoneStrings()+0x1d4>	10003129: R_386_PC32	free
1000312d:	83 c4 10             	add    esp,0x10
10003130:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003133:	e9 8b 00 00 00       	jmp    100031c3 <loadTimezoneStrings()+0x26e>
10003138:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000313b:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000313e: R_386_32	timezoneStrings
10003142:	83 ec 0c             	sub    esp,0xc
10003145:	50                   	push   eax
10003146:	e8 fc ff ff ff       	call   10003147 <loadTimezoneStrings()+0x1f2>	10003147: R_386_PC32	strlen
1000314b:	83 c4 10             	add    esp,0x10
1000314e:	83 f8 31             	cmp    eax,0x31
10003151:	77 1f                	ja     10003172 <loadTimezoneStrings()+0x21d>
10003153:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003156:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10003159: R_386_32	timezoneStrings
1000315d:	83 ec 08             	sub    esp,0x8
10003160:	8d 55 ce             	lea    edx,[ebp-0x32]
10003163:	52                   	push   edx
10003164:	50                   	push   eax
10003165:	e8 fc ff ff ff       	call   10003166 <loadTimezoneStrings()+0x211>	10003166: R_386_PC32	strcat
1000316a:	83 c4 10             	add    esp,0x10
1000316d:	e9 f1 fe ff ff       	jmp    10003063 <loadTimezoneStrings()+0x10e>
10003172:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003175:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10003178: R_386_32	timezoneStrings
1000317c:	83 ec 0c             	sub    esp,0xc
1000317f:	50                   	push   eax
10003180:	e8 fc ff ff ff       	call   10003181 <loadTimezoneStrings()+0x22c>	10003181: R_386_PC32	strlen
10003185:	83 c4 10             	add    esp,0x10
10003188:	83 f8 32             	cmp    eax,0x32
1000318b:	0f 85 d2 fe ff ff    	jne    10003063 <loadTimezoneStrings()+0x10e>
10003191:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003194:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10003197: R_386_32	timezoneStrings
1000319b:	83 ec 08             	sub    esp,0x8
1000319e:	68 41 b2 00 10       	push   0x1000b241	1000319f: R_386_32	.text
100031a3:	50                   	push   eax
100031a4:	e8 fc ff ff ff       	call   100031a5 <loadTimezoneStrings()+0x250>	100031a5: R_386_PC32	strcat
100031a9:	83 c4 10             	add    esp,0x10
100031ac:	e9 b2 fe ff ff       	jmp    10003063 <loadTimezoneStrings()+0x10e>
100031b1:	90                   	nop
100031b2:	e9 ac fe ff ff       	jmp    10003063 <loadTimezoneStrings()+0x10e>
100031b7:	90                   	nop
100031b8:	e9 a6 fe ff ff       	jmp    10003063 <loadTimezoneStrings()+0x10e>
100031bd:	90                   	nop
100031be:	e9 a0 fe ff ff       	jmp    10003063 <loadTimezoneStrings()+0x10e>
100031c3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100031c6:	c9                   	leave  
100031c7:	c3                   	ret    

100031c8 <_bcrypt_rand>:
100031c8:	55                   	push   ebp
100031c9:	89 e5                	mov    ebp,esp
100031cb:	83 ec 08             	sub    esp,0x8
100031ce:	e8 fc ff ff ff       	call   100031cf <_bcrypt_rand+0x7>	100031cf: R_386_PC32	KeRand()
100031d3:	c9                   	leave  
100031d4:	c3                   	ret    

100031d5 <firstRun(bool)>:
100031d5:	55                   	push   ebp
100031d6:	89 e5                	mov    ebp,esp
100031d8:	57                   	push   edi
100031d9:	56                   	push   esi
100031da:	53                   	push   ebx
100031db:	81 ec 5c 01 00 00    	sub    esp,0x15c
100031e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100031e4:	88 85 a4 fe ff ff    	mov    BYTE PTR [ebp-0x15c],al
100031ea:	a1 00 00 00 00       	mov    eax,ds:0x0	100031eb: R_386_32	keBootSettings
100031ef:	25 00 80 00 00       	and    eax,0x8000
100031f4:	85 c0                	test   eax,eax
100031f6:	0f 95 c0             	setne  al
100031f9:	a2 00 00 00 00       	mov    ds:0x0,al	100031fa: R_386_32	remoteInstall
100031fe:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003200: R_386_32	remoteInstall
10003205:	a0 00 00 00 00       	mov    al,ds:0x0	10003206: R_386_32	remoteInstall
1000320a:	84 c0                	test   al,al
1000320c:	74 1f                	je     1000322d <firstRun(bool)+0x58>
1000320e:	b8 00 20 00 c2       	mov    eax,0xc2002000
10003213:	8b 00                	mov    eax,DWORD PTR [eax]
10003215:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
10003218:	68 80 00 00 00       	push   0x80
1000321d:	6a 00                	push   0x0
1000321f:	68 00 00 00 00       	push   0x0	10003220: R_386_32	runRemoteInstall(void*)
10003224:	50                   	push   eax
10003225:	e8 fc ff ff ff       	call   10003226 <firstRun(bool)+0x51>	10003226: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
1000322a:	83 c4 10             	add    esp,0x10
1000322d:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
10003233:	83 f0 01             	xor    eax,0x1
10003236:	a2 00 00 00 00       	mov    ds:0x0,al	10003237: R_386_32	showSidebar
1000323b:	a0 00 00 00 00       	mov    al,ds:0x0	1000323c: R_386_32	createNewUserMode
10003240:	84 c0                	test   al,al
10003242:	74 5b                	je     1000329f <firstRun(bool)+0xca>
10003244:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003246: R_386_32	showSidebar
1000324b:	83 ec 08             	sub    esp,0x8
1000324e:	68 7f b0 00 10       	push   0x1000b07f	1000324f: R_386_32	.text
10003253:	68 00 00 00 00       	push   0x0	10003254: R_386_32	currName
10003258:	e8 fc ff ff ff       	call   10003259 <firstRun(bool)+0x84>	10003259: R_386_PC32	strcpy
1000325d:	83 c4 10             	add    esp,0x10
10003260:	83 ec 08             	sub    esp,0x8
10003263:	68 7f b0 00 10       	push   0x1000b07f	10003264: R_386_32	.text
10003268:	68 00 00 00 00       	push   0x0	10003269: R_386_32	currComp
1000326d:	e8 fc ff ff ff       	call   1000326e <firstRun(bool)+0x99>	1000326e: R_386_PC32	strcpy
10003272:	83 c4 10             	add    esp,0x10
10003275:	83 ec 08             	sub    esp,0x8
10003278:	68 7f b0 00 10       	push   0x1000b07f	10003279: R_386_32	.text
1000327d:	68 00 00 00 00       	push   0x0	1000327e: R_386_32	passwbufA
10003282:	e8 fc ff ff ff       	call   10003283 <firstRun(bool)+0xae>	10003283: R_386_PC32	strcpy
10003287:	83 c4 10             	add    esp,0x10
1000328a:	83 ec 08             	sub    esp,0x8
1000328d:	68 7f b0 00 10       	push   0x1000b07f	1000328e: R_386_32	.text
10003292:	68 00 00 00 00       	push   0x0	10003293: R_386_32	passwbufB
10003297:	e8 fc ff ff ff       	call   10003298 <firstRun(bool)+0xc3>	10003298: R_386_PC32	strcpy
1000329c:	83 c4 10             	add    esp,0x10
1000329f:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100032a1: R_386_32	guiKeyboardHandler
	100032a5: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
100032a9:	83 ec 0c             	sub    esp,0xc
100032ac:	68 48 b2 00 10       	push   0x1000b248	100032ad: R_386_32	.text
100032b1:	e8 fc ff ff ff       	call   100032b2 <firstRun(bool)+0xdd>	100032b2: R_386_PC32	KeSetBootMessage(char const*)
100032b6:	83 c4 10             	add    esp,0x10
100032b9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100032bb: R_386_32	VgaText::hiddenOut
100032c0:	a1 00 00 00 00       	mov    eax,ds:0x0	100032c1: R_386_32	activeTerminal
100032c5:	83 ec 08             	sub    esp,0x8
100032c8:	68 71 b2 00 10       	push   0x1000b271	100032c9: R_386_32	.text
100032cd:	50                   	push   eax
100032ce:	e8 fc ff ff ff       	call   100032cf <firstRun(bool)+0xfa>	100032cf: R_386_PC32	VgaText::puts(char const*)
100032d3:	83 c4 10             	add    esp,0x10
100032d6:	a1 00 00 00 00       	mov    eax,ds:0x0	100032d7: R_386_32	kernelProcess
100032db:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
100032e1:	83 ec 08             	sub    esp,0x8
100032e4:	68 71 b2 00 10       	push   0x1000b271	100032e5: R_386_32	.text
100032e9:	50                   	push   eax
100032ea:	e8 fc ff ff ff       	call   100032eb <firstRun(bool)+0x116>	100032eb: R_386_PC32	VgaText::puts(char const*)
100032ef:	83 c4 10             	add    esp,0x10
100032f2:	83 ec 0c             	sub    esp,0xc
100032f5:	68 84 01 00 00       	push   0x184
100032fa:	e8 fc ff ff ff       	call   100032fb <firstRun(bool)+0x126>	100032fb: R_386_PC32	operator new(unsigned long)
100032ff:	83 c4 10             	add    esp,0x10
10003302:	89 c3                	mov    ebx,eax
10003304:	83 ec 08             	sub    esp,0x8
10003307:	68 78 b2 00 10       	push   0x1000b278	10003308: R_386_32	.text
1000330c:	53                   	push   ebx
1000330d:	e8 fc ff ff ff       	call   1000330e <firstRun(bool)+0x139>	1000330e: R_386_PC32	VgaText::VgaText(char const*)
10003312:	83 c4 10             	add    esp,0x10
10003315:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10003317: R_386_32	term
1000331b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000331c: R_386_32	term
10003320:	83 ec 0c             	sub    esp,0xc
10003323:	50                   	push   eax
10003324:	e8 fc ff ff ff       	call   10003325 <firstRun(bool)+0x150>	10003325: R_386_PC32	setActiveTerminal(VgaText*)
10003329:	83 c4 10             	add    esp,0x10
1000332c:	e8 fc ff ff ff       	call   1000332d <firstRun(bool)+0x158>	1000332d: R_386_PC32	drawBootScreen()
10003331:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003338:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
1000333f:	74 17                	je     10003358 <firstRun(bool)+0x183>
10003341:	83 ec 08             	sub    esp,0x8
10003344:	68 7d b2 00 10       	push   0x1000b27d	10003345: R_386_32	.text
10003349:	68 00 00 00 00       	push   0x0	1000334a: R_386_32	pkeybuf
1000334e:	e8 fc ff ff ff       	call   1000334f <firstRun(bool)+0x17a>	1000334f: R_386_PC32	strcpy
10003353:	83 c4 10             	add    esp,0x10
10003356:	eb 15                	jmp    1000336d <firstRun(bool)+0x198>
10003358:	83 ec 08             	sub    esp,0x8
1000335b:	68 8e b2 00 10       	push   0x1000b28e	1000335c: R_386_32	.text
10003360:	68 00 00 00 00       	push   0x0	10003361: R_386_32	pkeybuf
10003365:	e8 fc ff ff ff       	call   10003366 <firstRun(bool)+0x191>	10003366: R_386_PC32	strcpy
1000336a:	83 c4 10             	add    esp,0x10
1000336d:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
10003373:	83 f0 01             	xor    eax,0x1
10003376:	84 c0                	test   al,al
10003378:	0f 84 82 1d 00 00    	je     10005100 <firstRun(bool)+0x1f2b>
1000337e:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10003385:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003387: R_386_32	tzsel
1000338f:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003391: R_386_32	modesel
10003399:	eb 01                	jmp    1000339c <firstRun(bool)+0x1c7>
1000339b:	90                   	nop
1000339c:	e8 fc ff ff ff       	call   1000339d <firstRun(bool)+0x1c8>	1000339d: R_386_PC32	drawBootScreen()
100033a1:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100033a8:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100033aa: R_386_32	installKey
100033af:	a0 00 00 00 00       	mov    al,ds:0x0	100033b0: R_386_32	createNewUserMode
100033b4:	84 c0                	test   al,al
100033b6:	74 07                	je     100033bf <firstRun(bool)+0x1ea>
100033b8:	b8 9f b2 00 10       	mov    eax,0x1000b29f	100033b9: R_386_32	.text
100033bd:	eb 05                	jmp    100033c4 <firstRun(bool)+0x1ef>
100033bf:	b8 af b2 00 10       	mov    eax,0x1000b2af	100033c0: R_386_32	.text
100033c4:	83 ec 0c             	sub    esp,0xc
100033c7:	50                   	push   eax
100033c8:	6a 12                	push   0x12
100033ca:	6a 32                	push   0x32
100033cc:	6a 03                	push   0x3
100033ce:	6a 16                	push   0x16
100033d0:	e8 fc ff ff ff       	call   100033d1 <firstRun(bool)+0x1fc>	100033d1: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100033d5:	83 c4 20             	add    esp,0x20
100033d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100033d9: R_386_32	term
100033dd:	83 ec 04             	sub    esp,0x4
100033e0:	6a 06                	push   0x6
100033e2:	6a 18                	push   0x18
100033e4:	50                   	push   eax
100033e5:	e8 fc ff ff ff       	call   100033e6 <firstRun(bool)+0x211>	100033e6: R_386_PC32	VgaText::setCursor(int, int)
100033ea:	83 c4 10             	add    esp,0x10
100033ed:	a1 00 00 00 00       	mov    eax,ds:0x0	100033ee: R_386_32	term
100033f2:	83 ec 08             	sub    esp,0x8
100033f5:	68 bc b2 00 10       	push   0x1000b2bc	100033f6: R_386_32	.text
100033fa:	50                   	push   eax
100033fb:	e8 fc ff ff ff       	call   100033fc <firstRun(bool)+0x227>	100033fc: R_386_PC32	VgaText::puts(char const*)
10003400:	83 c4 10             	add    esp,0x10
10003403:	a1 00 00 00 00       	mov    eax,ds:0x0	10003404: R_386_32	term
10003408:	83 ec 04             	sub    esp,0x4
1000340b:	6a 07                	push   0x7
1000340d:	6a 18                	push   0x18
1000340f:	50                   	push   eax
10003410:	e8 fc ff ff ff       	call   10003411 <firstRun(bool)+0x23c>	10003411: R_386_PC32	VgaText::setCursor(int, int)
10003415:	83 c4 10             	add    esp,0x10
10003418:	a1 00 00 00 00       	mov    eax,ds:0x0	10003419: R_386_32	term
1000341d:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	1000341f: R_386_32	createNewUserMode
10003423:	84 d2                	test   dl,dl
10003425:	74 07                	je     1000342e <firstRun(bool)+0x259>
10003427:	ba ec b2 00 10       	mov    edx,0x1000b2ec	10003428: R_386_32	.text
1000342c:	eb 05                	jmp    10003433 <firstRun(bool)+0x25e>
1000342e:	ba 0e b3 00 10       	mov    edx,0x1000b30e	1000342f: R_386_32	.text
10003433:	83 ec 08             	sub    esp,0x8
10003436:	52                   	push   edx
10003437:	50                   	push   eax
10003438:	e8 fc ff ff ff       	call   10003439 <firstRun(bool)+0x264>	10003439: R_386_PC32	VgaText::puts(char const*)
1000343d:	83 c4 10             	add    esp,0x10
10003440:	a1 00 00 00 00       	mov    eax,ds:0x0	10003441: R_386_32	term
10003445:	83 ec 04             	sub    esp,0x4
10003448:	6a 09                	push   0x9
1000344a:	6a 18                	push   0x18
1000344c:	50                   	push   eax
1000344d:	e8 fc ff ff ff       	call   1000344e <firstRun(bool)+0x279>	1000344e: R_386_PC32	VgaText::setCursor(int, int)
10003452:	83 c4 10             	add    esp,0x10
10003455:	a1 00 00 00 00       	mov    eax,ds:0x0	10003456: R_386_32	term
1000345a:	83 ec 08             	sub    esp,0x8
1000345d:	68 1e b3 00 10       	push   0x1000b31e	1000345e: R_386_32	.text
10003462:	50                   	push   eax
10003463:	e8 fc ff ff ff       	call   10003464 <firstRun(bool)+0x28f>	10003464: R_386_PC32	VgaText::puts(char const*)
10003468:	83 c4 10             	add    esp,0x10
1000346b:	a0 00 00 00 00       	mov    al,ds:0x0	1000346c: R_386_32	createNewUserMode
10003470:	83 f0 01             	xor    eax,0x1
10003473:	84 c0                	test   al,al
10003475:	74 2b                	je     100034a2 <firstRun(bool)+0x2cd>
10003477:	a1 00 00 00 00       	mov    eax,ds:0x0	10003478: R_386_32	term
1000347c:	83 ec 04             	sub    esp,0x4
1000347f:	6a 0b                	push   0xb
10003481:	6a 18                	push   0x18
10003483:	50                   	push   eax
10003484:	e8 fc ff ff ff       	call   10003485 <firstRun(bool)+0x2b0>	10003485: R_386_PC32	VgaText::setCursor(int, int)
10003489:	83 c4 10             	add    esp,0x10
1000348c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000348d: R_386_32	term
10003491:	83 ec 08             	sub    esp,0x8
10003494:	68 23 b3 00 10       	push   0x1000b323	10003495: R_386_32	.text
10003499:	50                   	push   eax
1000349a:	e8 fc ff ff ff       	call   1000349b <firstRun(bool)+0x2c6>	1000349b: R_386_PC32	VgaText::puts(char const*)
1000349f:	83 c4 10             	add    esp,0x10
100034a2:	a1 00 00 00 00       	mov    eax,ds:0x0	100034a3: R_386_32	term
100034a7:	83 ec 04             	sub    esp,0x4
100034aa:	6a 0d                	push   0xd
100034ac:	6a 18                	push   0x18
100034ae:	50                   	push   eax
100034af:	e8 fc ff ff ff       	call   100034b0 <firstRun(bool)+0x2db>	100034b0: R_386_PC32	VgaText::setCursor(int, int)
100034b4:	83 c4 10             	add    esp,0x10
100034b7:	a1 00 00 00 00       	mov    eax,ds:0x0	100034b8: R_386_32	term
100034bc:	83 ec 08             	sub    esp,0x8
100034bf:	68 2b b3 00 10       	push   0x1000b32b	100034c0: R_386_32	.text
100034c4:	50                   	push   eax
100034c5:	e8 fc ff ff ff       	call   100034c6 <firstRun(bool)+0x2f1>	100034c6: R_386_PC32	VgaText::puts(char const*)
100034ca:	83 c4 10             	add    esp,0x10
100034cd:	a1 00 00 00 00       	mov    eax,ds:0x0	100034ce: R_386_32	term
100034d2:	83 ec 04             	sub    esp,0x4
100034d5:	6a 0f                	push   0xf
100034d7:	6a 18                	push   0x18
100034d9:	50                   	push   eax
100034da:	e8 fc ff ff ff       	call   100034db <firstRun(bool)+0x306>	100034db: R_386_PC32	VgaText::setCursor(int, int)
100034df:	83 c4 10             	add    esp,0x10
100034e2:	a1 00 00 00 00       	mov    eax,ds:0x0	100034e3: R_386_32	term
100034e7:	83 ec 08             	sub    esp,0x8
100034ea:	68 34 b3 00 10       	push   0x1000b334	100034eb: R_386_32	.text
100034ef:	50                   	push   eax
100034f0:	e8 fc ff ff ff       	call   100034f1 <firstRun(bool)+0x31c>	100034f1: R_386_PC32	VgaText::puts(char const*)
100034f5:	83 c4 10             	add    esp,0x10
100034f8:	a1 00 00 00 00       	mov    eax,ds:0x0	100034f9: R_386_32	term
100034fd:	83 ec 04             	sub    esp,0x4
10003500:	6a 10                	push   0x10
10003502:	6a 18                	push   0x18
10003504:	50                   	push   eax
10003505:	e8 fc ff ff ff       	call   10003506 <firstRun(bool)+0x331>	10003506: R_386_PC32	VgaText::setCursor(int, int)
1000350a:	83 c4 10             	add    esp,0x10
1000350d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000350e: R_386_32	term
10003512:	83 ec 08             	sub    esp,0x8
10003515:	68 3c b3 00 10       	push   0x1000b33c	10003516: R_386_32	.text
1000351a:	50                   	push   eax
1000351b:	e8 fc ff ff ff       	call   1000351c <firstRun(bool)+0x347>	1000351c: R_386_PC32	VgaText::puts(char const*)
10003520:	83 c4 10             	add    esp,0x10
10003523:	a1 00 00 00 00       	mov    eax,ds:0x0	10003524: R_386_32	term
10003528:	83 ec 04             	sub    esp,0x4
1000352b:	6a 09                	push   0x9
1000352d:	6a 21                	push   0x21
1000352f:	50                   	push   eax
10003530:	e8 fc ff ff ff       	call   10003531 <firstRun(bool)+0x35c>	10003531: R_386_PC32	VgaText::setCursor(int, int)
10003535:	83 c4 10             	add    esp,0x10
10003538:	a1 00 00 00 00       	mov    eax,ds:0x0	10003539: R_386_32	term
1000353d:	6a 07                	push   0x7
1000353f:	6a 00                	push   0x0
10003541:	68 48 b3 00 10       	push   0x1000b348	10003542: R_386_32	.text
10003546:	50                   	push   eax
10003547:	e8 fc ff ff ff       	call   10003548 <firstRun(bool)+0x373>	10003548: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000354c:	83 c4 10             	add    esp,0x10
1000354f:	a1 00 00 00 00       	mov    eax,ds:0x0	10003550: R_386_32	term
10003554:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10003558:	75 07                	jne    10003561 <firstRun(bool)+0x38c>
1000355a:	ba 6d b3 00 10       	mov    edx,0x1000b36d	1000355b: R_386_32	.text
1000355f:	eb 05                	jmp    10003566 <firstRun(bool)+0x391>
10003561:	ba 70 b3 00 10       	mov    edx,0x1000b370	10003562: R_386_32	.text
10003566:	6a 0f                	push   0xf
10003568:	6a 00                	push   0x0
1000356a:	52                   	push   edx
1000356b:	50                   	push   eax
1000356c:	e8 fc ff ff ff       	call   1000356d <firstRun(bool)+0x398>	1000356d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003571:	83 c4 10             	add    esp,0x10
10003574:	a1 00 00 00 00       	mov    eax,ds:0x0	10003575: R_386_32	term
10003579:	83 ec 08             	sub    esp,0x8
1000357c:	6a 21                	push   0x21
1000357e:	50                   	push   eax
1000357f:	e8 fc ff ff ff       	call   10003580 <firstRun(bool)+0x3ab>	10003580: R_386_PC32	VgaText::setCursorX(int)
10003584:	83 c4 10             	add    esp,0x10
10003587:	a1 00 00 00 00       	mov    eax,ds:0x0	10003588: R_386_32	term
1000358c:	6a 07                	push   0x7
1000358e:	6a 00                	push   0x0
10003590:	68 00 00 00 00       	push   0x0	10003591: R_386_32	currName
10003595:	50                   	push   eax
10003596:	e8 fc ff ff ff       	call   10003597 <firstRun(bool)+0x3c2>	10003597: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000359b:	83 c4 10             	add    esp,0x10
1000359e:	a0 00 00 00 00       	mov    al,ds:0x0	1000359f: R_386_32	createNewUserMode
100035a3:	83 f0 01             	xor    eax,0x1
100035a6:	84 c0                	test   al,al
100035a8:	74 7b                	je     10003625 <firstRun(bool)+0x450>
100035aa:	a1 00 00 00 00       	mov    eax,ds:0x0	100035ab: R_386_32	term
100035af:	83 ec 04             	sub    esp,0x4
100035b2:	6a 0b                	push   0xb
100035b4:	6a 21                	push   0x21
100035b6:	50                   	push   eax
100035b7:	e8 fc ff ff ff       	call   100035b8 <firstRun(bool)+0x3e3>	100035b8: R_386_PC32	VgaText::setCursor(int, int)
100035bc:	83 c4 10             	add    esp,0x10
100035bf:	a1 00 00 00 00       	mov    eax,ds:0x0	100035c0: R_386_32	term
100035c4:	6a 07                	push   0x7
100035c6:	6a 00                	push   0x0
100035c8:	68 48 b3 00 10       	push   0x1000b348	100035c9: R_386_32	.text
100035cd:	50                   	push   eax
100035ce:	e8 fc ff ff ff       	call   100035cf <firstRun(bool)+0x3fa>	100035cf: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100035d3:	83 c4 10             	add    esp,0x10
100035d6:	a1 00 00 00 00       	mov    eax,ds:0x0	100035d7: R_386_32	term
100035db:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
100035df:	75 07                	jne    100035e8 <firstRun(bool)+0x413>
100035e1:	ba 6d b3 00 10       	mov    edx,0x1000b36d	100035e2: R_386_32	.text
100035e6:	eb 05                	jmp    100035ed <firstRun(bool)+0x418>
100035e8:	ba 70 b3 00 10       	mov    edx,0x1000b370	100035e9: R_386_32	.text
100035ed:	6a 0f                	push   0xf
100035ef:	6a 00                	push   0x0
100035f1:	52                   	push   edx
100035f2:	50                   	push   eax
100035f3:	e8 fc ff ff ff       	call   100035f4 <firstRun(bool)+0x41f>	100035f4: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100035f8:	83 c4 10             	add    esp,0x10
100035fb:	a1 00 00 00 00       	mov    eax,ds:0x0	100035fc: R_386_32	term
10003600:	83 ec 08             	sub    esp,0x8
10003603:	6a 21                	push   0x21
10003605:	50                   	push   eax
10003606:	e8 fc ff ff ff       	call   10003607 <firstRun(bool)+0x432>	10003607: R_386_PC32	VgaText::setCursorX(int)
1000360b:	83 c4 10             	add    esp,0x10
1000360e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000360f: R_386_32	term
10003613:	6a 07                	push   0x7
10003615:	6a 00                	push   0x0
10003617:	68 00 00 00 00       	push   0x0	10003618: R_386_32	currComp
1000361c:	50                   	push   eax
1000361d:	e8 fc ff ff ff       	call   1000361e <firstRun(bool)+0x449>	1000361e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003622:	83 c4 10             	add    esp,0x10
10003625:	a1 00 00 00 00       	mov    eax,ds:0x0	10003626: R_386_32	term
1000362a:	83 ec 04             	sub    esp,0x4
1000362d:	6a 0d                	push   0xd
1000362f:	6a 21                	push   0x21
10003631:	50                   	push   eax
10003632:	e8 fc ff ff ff       	call   10003633 <firstRun(bool)+0x45e>	10003633: R_386_PC32	VgaText::setCursor(int, int)
10003637:	83 c4 10             	add    esp,0x10
1000363a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000363b: R_386_32	term
1000363f:	6a 07                	push   0x7
10003641:	6a 00                	push   0x0
10003643:	68 48 b3 00 10       	push   0x1000b348	10003644: R_386_32	.text
10003648:	50                   	push   eax
10003649:	e8 fc ff ff ff       	call   1000364a <firstRun(bool)+0x475>	1000364a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000364e:	83 c4 10             	add    esp,0x10
10003651:	a1 00 00 00 00       	mov    eax,ds:0x0	10003652: R_386_32	term
10003656:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
1000365a:	75 07                	jne    10003663 <firstRun(bool)+0x48e>
1000365c:	ba 6d b3 00 10       	mov    edx,0x1000b36d	1000365d: R_386_32	.text
10003661:	eb 05                	jmp    10003668 <firstRun(bool)+0x493>
10003663:	ba 70 b3 00 10       	mov    edx,0x1000b370	10003664: R_386_32	.text
10003668:	6a 0f                	push   0xf
1000366a:	6a 00                	push   0x0
1000366c:	52                   	push   edx
1000366d:	50                   	push   eax
1000366e:	e8 fc ff ff ff       	call   1000366f <firstRun(bool)+0x49a>	1000366f: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003673:	83 c4 10             	add    esp,0x10
10003676:	a1 00 00 00 00       	mov    eax,ds:0x0	10003677: R_386_32	term
1000367b:	83 ec 08             	sub    esp,0x8
1000367e:	6a 21                	push   0x21
10003680:	50                   	push   eax
10003681:	e8 fc ff ff ff       	call   10003682 <firstRun(bool)+0x4ad>	10003682: R_386_PC32	VgaText::setCursorX(int)
10003686:	83 c4 10             	add    esp,0x10
10003689:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10003690:	83 ec 0c             	sub    esp,0xc
10003693:	68 00 00 00 00       	push   0x0	10003694: R_386_32	passwbufA
10003698:	e8 fc ff ff ff       	call   10003699 <firstRun(bool)+0x4c4>	10003699: R_386_PC32	strlen
1000369d:	83 c4 10             	add    esp,0x10
100036a0:	89 c2                	mov    edx,eax
100036a2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100036a5:	39 c2                	cmp    edx,eax
100036a7:	76 1c                	jbe    100036c5 <firstRun(bool)+0x4f0>
100036a9:	a1 00 00 00 00       	mov    eax,ds:0x0	100036aa: R_386_32	term
100036ae:	6a 07                	push   0x7
100036b0:	6a 00                	push   0x0
100036b2:	68 74 b3 00 10       	push   0x1000b374	100036b3: R_386_32	.text
100036b7:	50                   	push   eax
100036b8:	e8 fc ff ff ff       	call   100036b9 <firstRun(bool)+0x4e4>	100036b9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100036bd:	83 c4 10             	add    esp,0x10
100036c0:	ff 45 d8             	inc    DWORD PTR [ebp-0x28]
100036c3:	eb cb                	jmp    10003690 <firstRun(bool)+0x4bb>
100036c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100036c6: R_386_32	term
100036ca:	83 ec 04             	sub    esp,0x4
100036cd:	6a 0f                	push   0xf
100036cf:	6a 21                	push   0x21
100036d1:	50                   	push   eax
100036d2:	e8 fc ff ff ff       	call   100036d3 <firstRun(bool)+0x4fe>	100036d3: R_386_PC32	VgaText::setCursor(int, int)
100036d7:	83 c4 10             	add    esp,0x10
100036da:	a1 00 00 00 00       	mov    eax,ds:0x0	100036db: R_386_32	term
100036df:	6a 07                	push   0x7
100036e1:	6a 00                	push   0x0
100036e3:	68 48 b3 00 10       	push   0x1000b348	100036e4: R_386_32	.text
100036e8:	50                   	push   eax
100036e9:	e8 fc ff ff ff       	call   100036ea <firstRun(bool)+0x515>	100036ea: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100036ee:	83 c4 10             	add    esp,0x10
100036f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100036f2: R_386_32	term
100036f6:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
100036fa:	75 07                	jne    10003703 <firstRun(bool)+0x52e>
100036fc:	ba 6d b3 00 10       	mov    edx,0x1000b36d	100036fd: R_386_32	.text
10003701:	eb 05                	jmp    10003708 <firstRun(bool)+0x533>
10003703:	ba 70 b3 00 10       	mov    edx,0x1000b370	10003704: R_386_32	.text
10003708:	6a 0f                	push   0xf
1000370a:	6a 00                	push   0x0
1000370c:	52                   	push   edx
1000370d:	50                   	push   eax
1000370e:	e8 fc ff ff ff       	call   1000370f <firstRun(bool)+0x53a>	1000370f: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003713:	83 c4 10             	add    esp,0x10
10003716:	a1 00 00 00 00       	mov    eax,ds:0x0	10003717: R_386_32	term
1000371b:	83 ec 08             	sub    esp,0x8
1000371e:	6a 21                	push   0x21
10003720:	50                   	push   eax
10003721:	e8 fc ff ff ff       	call   10003722 <firstRun(bool)+0x54d>	10003722: R_386_PC32	VgaText::setCursorX(int)
10003726:	83 c4 10             	add    esp,0x10
10003729:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10003730:	83 ec 0c             	sub    esp,0xc
10003733:	68 00 00 00 00       	push   0x0	10003734: R_386_32	passwbufB
10003738:	e8 fc ff ff ff       	call   10003739 <firstRun(bool)+0x564>	10003739: R_386_PC32	strlen
1000373d:	83 c4 10             	add    esp,0x10
10003740:	89 c2                	mov    edx,eax
10003742:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10003745:	39 c2                	cmp    edx,eax
10003747:	76 1c                	jbe    10003765 <firstRun(bool)+0x590>
10003749:	a1 00 00 00 00       	mov    eax,ds:0x0	1000374a: R_386_32	term
1000374e:	6a 07                	push   0x7
10003750:	6a 00                	push   0x0
10003752:	68 74 b3 00 10       	push   0x1000b374	10003753: R_386_32	.text
10003757:	50                   	push   eax
10003758:	e8 fc ff ff ff       	call   10003759 <firstRun(bool)+0x584>	10003759: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000375d:	83 c4 10             	add    esp,0x10
10003760:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10003763:	eb cb                	jmp    10003730 <firstRun(bool)+0x55b>
10003765:	a1 00 00 00 00       	mov    eax,ds:0x0	10003766: R_386_32	term
1000376a:	83 ec 04             	sub    esp,0x4
1000376d:	6a 14                	push   0x14
1000376f:	6a 18                	push   0x18
10003771:	50                   	push   eax
10003772:	e8 fc ff ff ff       	call   10003773 <firstRun(bool)+0x59e>	10003773: R_386_PC32	VgaText::setCursor(int, int)
10003777:	83 c4 10             	add    esp,0x10
1000377a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000377b: R_386_32	term
1000377f:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10003781: R_386_32	safemode
10003785:	84 d2                	test   dl,dl
10003787:	74 07                	je     10003790 <firstRun(bool)+0x5bb>
10003789:	b9 00 00 00 00       	mov    ecx,0x0
1000378e:	eb 05                	jmp    10003795 <firstRun(bool)+0x5c0>
10003790:	b9 08 00 00 00       	mov    ecx,0x8
10003795:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10003799:	75 07                	jne    100037a2 <firstRun(bool)+0x5cd>
1000379b:	ba 76 b3 00 10       	mov    edx,0x1000b376	1000379c: R_386_32	.text
100037a0:	eb 05                	jmp    100037a7 <firstRun(bool)+0x5d2>
100037a2:	ba 8c b3 00 10       	mov    edx,0x1000b38c	100037a3: R_386_32	.text
100037a7:	6a 0f                	push   0xf
100037a9:	51                   	push   ecx
100037aa:	52                   	push   edx
100037ab:	50                   	push   eax
100037ac:	e8 fc ff ff ff       	call   100037ad <firstRun(bool)+0x5d8>	100037ad: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100037b1:	83 c4 10             	add    esp,0x10
100037b4:	a1 00 00 00 00       	mov    eax,ds:0x0	100037b5: R_386_32	term
100037b9:	83 ec 04             	sub    esp,0x4
100037bc:	6a 14                	push   0x14
100037be:	6a 3c                	push   0x3c
100037c0:	50                   	push   eax
100037c1:	e8 fc ff ff ff       	call   100037c2 <firstRun(bool)+0x5ed>	100037c2: R_386_PC32	VgaText::setCursor(int, int)
100037c6:	83 c4 10             	add    esp,0x10
100037c9:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
100037cd:	74 19                	je     100037e8 <firstRun(bool)+0x613>
100037cf:	a1 00 00 00 00       	mov    eax,ds:0x0	100037d0: R_386_32	term
100037d4:	6a 08                	push   0x8
100037d6:	6a 0f                	push   0xf
100037d8:	68 a3 b3 00 10       	push   0x1000b3a3	100037d9: R_386_32	.text
100037dd:	50                   	push   eax
100037de:	e8 fc ff ff ff       	call   100037df <firstRun(bool)+0x60a>	100037df: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100037e3:	83 c4 10             	add    esp,0x10
100037e6:	eb 2c                	jmp    10003814 <firstRun(bool)+0x63f>
100037e8:	a1 00 00 00 00       	mov    eax,ds:0x0	100037e9: R_386_32	term
100037ed:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	100037ef: R_386_32	safemode
100037f3:	84 d2                	test   dl,dl
100037f5:	74 07                	je     100037fe <firstRun(bool)+0x629>
100037f7:	ba 00 00 00 00       	mov    edx,0x0
100037fc:	eb 05                	jmp    10003803 <firstRun(bool)+0x62e>
100037fe:	ba 01 00 00 00       	mov    edx,0x1
10003803:	52                   	push   edx
10003804:	6a 0f                	push   0xf
10003806:	68 a3 b3 00 10       	push   0x1000b3a3	10003807: R_386_32	.text
1000380b:	50                   	push   eax
1000380c:	e8 fc ff ff ff       	call   1000380d <firstRun(bool)+0x638>	1000380d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003811:	83 c4 10             	add    esp,0x10
10003814:	a1 00 00 00 00       	mov    eax,ds:0x0	10003815: R_386_32	term
10003819:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
1000381d:	75 07                	jne    10003826 <firstRun(bool)+0x651>
1000381f:	ba ac b3 00 10       	mov    edx,0x1000b3ac	10003820: R_386_32	.text
10003824:	eb 05                	jmp    1000382b <firstRun(bool)+0x656>
10003826:	ba 70 b3 00 10       	mov    edx,0x1000b370	10003827: R_386_32	.text
1000382b:	6a 0f                	push   0xf
1000382d:	6a 00                	push   0x0
1000382f:	52                   	push   edx
10003830:	50                   	push   eax
10003831:	e8 fc ff ff ff       	call   10003832 <firstRun(bool)+0x65d>	10003832: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003836:	83 c4 10             	add    esp,0x10
10003839:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
1000383d:	75 28                	jne    10003867 <firstRun(bool)+0x692>
1000383f:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10003841: R_386_32	term
10003845:	83 ec 0c             	sub    esp,0xc
10003848:	68 00 00 00 00       	push   0x0	10003849: R_386_32	currName
1000384d:	e8 fc ff ff ff       	call   1000384e <firstRun(bool)+0x679>	1000384e: R_386_PC32	strlen
10003852:	83 c4 10             	add    esp,0x10
10003855:	83 c0 21             	add    eax,0x21
10003858:	83 ec 04             	sub    esp,0x4
1000385b:	6a 09                	push   0x9
1000385d:	50                   	push   eax
1000385e:	53                   	push   ebx
1000385f:	e8 fc ff ff ff       	call   10003860 <firstRun(bool)+0x68b>	10003860: R_386_PC32	VgaText::setCursor(int, int)
10003864:	83 c4 10             	add    esp,0x10
10003867:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
1000386b:	75 28                	jne    10003895 <firstRun(bool)+0x6c0>
1000386d:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	1000386f: R_386_32	term
10003873:	83 ec 0c             	sub    esp,0xc
10003876:	68 00 00 00 00       	push   0x0	10003877: R_386_32	currComp
1000387b:	e8 fc ff ff ff       	call   1000387c <firstRun(bool)+0x6a7>	1000387c: R_386_PC32	strlen
10003880:	83 c4 10             	add    esp,0x10
10003883:	83 c0 21             	add    eax,0x21
10003886:	83 ec 04             	sub    esp,0x4
10003889:	6a 0b                	push   0xb
1000388b:	50                   	push   eax
1000388c:	53                   	push   ebx
1000388d:	e8 fc ff ff ff       	call   1000388e <firstRun(bool)+0x6b9>	1000388e: R_386_PC32	VgaText::setCursor(int, int)
10003892:	83 c4 10             	add    esp,0x10
10003895:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10003899:	75 28                	jne    100038c3 <firstRun(bool)+0x6ee>
1000389b:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	1000389d: R_386_32	term
100038a1:	83 ec 0c             	sub    esp,0xc
100038a4:	68 00 00 00 00       	push   0x0	100038a5: R_386_32	passwbufA
100038a9:	e8 fc ff ff ff       	call   100038aa <firstRun(bool)+0x6d5>	100038aa: R_386_PC32	strlen
100038ae:	83 c4 10             	add    esp,0x10
100038b1:	83 c0 21             	add    eax,0x21
100038b4:	83 ec 04             	sub    esp,0x4
100038b7:	6a 0d                	push   0xd
100038b9:	50                   	push   eax
100038ba:	53                   	push   ebx
100038bb:	e8 fc ff ff ff       	call   100038bc <firstRun(bool)+0x6e7>	100038bc: R_386_PC32	VgaText::setCursor(int, int)
100038c0:	83 c4 10             	add    esp,0x10
100038c3:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
100038c7:	75 28                	jne    100038f1 <firstRun(bool)+0x71c>
100038c9:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100038cb: R_386_32	term
100038cf:	83 ec 0c             	sub    esp,0xc
100038d2:	68 00 00 00 00       	push   0x0	100038d3: R_386_32	passwbufB
100038d7:	e8 fc ff ff ff       	call   100038d8 <firstRun(bool)+0x703>	100038d8: R_386_PC32	strlen
100038dc:	83 c4 10             	add    esp,0x10
100038df:	83 c0 21             	add    eax,0x21
100038e2:	83 ec 04             	sub    esp,0x4
100038e5:	6a 0f                	push   0xf
100038e7:	50                   	push   eax
100038e8:	53                   	push   ebx
100038e9:	e8 fc ff ff ff       	call   100038ea <firstRun(bool)+0x715>	100038ea: R_386_PC32	VgaText::setCursor(int, int)
100038ee:	83 c4 10             	add    esp,0x10
100038f1:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
100038f5:	75 15                	jne    1000390c <firstRun(bool)+0x737>
100038f7:	a1 00 00 00 00       	mov    eax,ds:0x0	100038f8: R_386_32	term
100038fc:	83 ec 04             	sub    esp,0x4
100038ff:	6a 02                	push   0x2
10003901:	6a 00                	push   0x0
10003903:	50                   	push   eax
10003904:	e8 fc ff ff ff       	call   10003905 <firstRun(bool)+0x730>	10003905: R_386_PC32	VgaText::setCursor(int, int)
10003909:	83 c4 10             	add    esp,0x10
1000390c:	a0 00 00 00 00       	mov    al,ds:0x0	1000390d: R_386_32	installKey
10003911:	84 c0                	test   al,al
10003913:	0f 94 c0             	sete   al
10003916:	84 c0                	test   al,al
10003918:	74 02                	je     1000391c <firstRun(bool)+0x747>
1000391a:	eb f0                	jmp    1000390c <firstRun(bool)+0x737>
1000391c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000391d: R_386_32	term
10003921:	05 82 00 00 00       	add    eax,0x82
10003926:	83 ec 04             	sub    esp,0x4
10003929:	6a 10                	push   0x10
1000392b:	6a 00                	push   0x0
1000392d:	50                   	push   eax
1000392e:	e8 fc ff ff ff       	call   1000392f <firstRun(bool)+0x75a>	1000392f: R_386_PC32	memset
10003933:	83 c4 10             	add    esp,0x10
10003936:	a1 00 00 00 00       	mov    eax,ds:0x0	10003937: R_386_32	term
1000393b:	05 02 01 00 00       	add    eax,0x102
10003940:	83 ec 04             	sub    esp,0x4
10003943:	6a 10                	push   0x10
10003945:	6a 00                	push   0x0
10003947:	50                   	push   eax
10003948:	e8 fc ff ff ff       	call   10003949 <firstRun(bool)+0x774>	10003949: R_386_PC32	memset
1000394d:	83 c4 10             	add    esp,0x10
10003950:	a0 00 00 00 00       	mov    al,ds:0x0	10003951: R_386_32	installKey
10003955:	3c 09                	cmp    al,0x9
10003957:	74 09                	je     10003962 <firstRun(bool)+0x78d>
10003959:	a0 00 00 00 00       	mov    al,ds:0x0	1000395a: R_386_32	installKey
1000395e:	3c 0a                	cmp    al,0xa
10003960:	75 04                	jne    10003966 <firstRun(bool)+0x791>
10003962:	b0 01                	mov    al,0x1
10003964:	eb 02                	jmp    10003968 <firstRun(bool)+0x793>
10003966:	b0 00                	mov    al,0x0
10003968:	84 c0                	test   al,al
1000396a:	0f 84 c8 00 00 00    	je     10003a38 <firstRun(bool)+0x863>
10003970:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10003974:	75 0d                	jne    10003983 <firstRun(bool)+0x7ae>
10003976:	a0 00 00 00 00       	mov    al,ds:0x0	10003977: R_386_32	installKey
1000397b:	3c 0a                	cmp    al,0xa
1000397d:	75 04                	jne    10003983 <firstRun(bool)+0x7ae>
1000397f:	b0 01                	mov    al,0x1
10003981:	eb 02                	jmp    10003985 <firstRun(bool)+0x7b0>
10003983:	b0 00                	mov    al,0x0
10003985:	84 c0                	test   al,al
10003987:	74 72                	je     100039fb <firstRun(bool)+0x826>
10003989:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000398b: R_386_32	installKey
10003990:	83 ec 08             	sub    esp,0x8
10003993:	68 00 00 00 00       	push   0x0	10003994: R_386_32	passwbufB
10003998:	68 00 00 00 00       	push   0x0	10003999: R_386_32	passwbufA
1000399d:	e8 fc ff ff ff       	call   1000399e <firstRun(bool)+0x7c9>	1000399e: R_386_PC32	strcmp
100039a2:	83 c4 10             	add    esp,0x10
100039a5:	85 c0                	test   eax,eax
100039a7:	75 21                	jne    100039ca <firstRun(bool)+0x7f5>
100039a9:	83 ec 0c             	sub    esp,0xc
100039ac:	68 00 00 00 00       	push   0x0	100039ad: R_386_32	currName
100039b1:	e8 fc ff ff ff       	call   100039b2 <firstRun(bool)+0x7dd>	100039b2: R_386_PC32	strlen
100039b6:	83 c4 10             	add    esp,0x10
100039b9:	85 c0                	test   eax,eax
100039bb:	0f 85 26 03 00 00    	jne    10003ce7 <firstRun(bool)+0xb12>
100039c1:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100039c8:	eb 57                	jmp    10003a21 <firstRun(bool)+0x84c>
100039ca:	c7 45 e0 02 00 00 00 	mov    DWORD PTR [ebp-0x20],0x2
100039d1:	83 ec 04             	sub    esp,0x4
100039d4:	6a 30                	push   0x30
100039d6:	6a 00                	push   0x0
100039d8:	68 00 00 00 00       	push   0x0	100039d9: R_386_32	passwbufA
100039dd:	e8 fc ff ff ff       	call   100039de <firstRun(bool)+0x809>	100039de: R_386_PC32	memset
100039e2:	83 c4 10             	add    esp,0x10
100039e5:	83 ec 04             	sub    esp,0x4
100039e8:	6a 30                	push   0x30
100039ea:	6a 00                	push   0x0
100039ec:	68 00 00 00 00       	push   0x0	100039ed: R_386_32	passwbufB
100039f1:	e8 fc ff ff ff       	call   100039f2 <firstRun(bool)+0x81d>	100039f2: R_386_PC32	memset
100039f6:	83 c4 10             	add    esp,0x10
100039f9:	eb 26                	jmp    10003a21 <firstRun(bool)+0x84c>
100039fb:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
100039fe:	a0 00 00 00 00       	mov    al,ds:0x0	100039ff: R_386_32	createNewUserMode
10003a03:	84 c0                	test   al,al
10003a05:	74 0d                	je     10003a14 <firstRun(bool)+0x83f>
10003a07:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003a0b:	75 07                	jne    10003a14 <firstRun(bool)+0x83f>
10003a0d:	c7 45 e0 02 00 00 00 	mov    DWORD PTR [ebp-0x20],0x2
10003a14:	83 7d e0 05          	cmp    DWORD PTR [ebp-0x20],0x5
10003a18:	75 07                	jne    10003a21 <firstRun(bool)+0x84c>
10003a1a:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003a21:	83 ec 08             	sub    esp,0x8
10003a24:	6a 00                	push   0x0
10003a26:	68 2c 01 00 00       	push   0x12c
10003a2b:	e8 fc ff ff ff       	call   10003a2c <firstRun(bool)+0x857>	10003a2c: R_386_PC32	milliTenthSleep(unsigned long long)
10003a30:	83 c4 10             	add    esp,0x10
10003a33:	e9 a3 02 00 00       	jmp    10003cdb <firstRun(bool)+0xb06>
10003a38:	a0 00 00 00 00       	mov    al,ds:0x0	10003a39: R_386_32	installKey
10003a3d:	3c 1f                	cmp    al,0x1f
10003a3f:	7e 0d                	jle    10003a4e <firstRun(bool)+0x879>
10003a41:	a0 00 00 00 00       	mov    al,ds:0x0	10003a42: R_386_32	installKey
10003a46:	3c 7f                	cmp    al,0x7f
10003a48:	74 04                	je     10003a4e <firstRun(bool)+0x879>
10003a4a:	b0 01                	mov    al,0x1
10003a4c:	eb 02                	jmp    10003a50 <firstRun(bool)+0x87b>
10003a4e:	b0 00                	mov    al,0x0
10003a50:	84 c0                	test   al,al
10003a52:	0f 84 39 01 00 00    	je     10003b91 <firstRun(bool)+0x9bc>
10003a58:	a0 00 00 00 00       	mov    al,ds:0x0	10003a59: R_386_32	installKey
10003a5d:	88 85 c6 fe ff ff    	mov    BYTE PTR [ebp-0x13a],al
10003a63:	c6 85 c7 fe ff ff 00 	mov    BYTE PTR [ebp-0x139],0x0
10003a6a:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10003a6e:	75 7e                	jne    10003aee <firstRun(bool)+0x919>
10003a70:	83 ec 0c             	sub    esp,0xc
10003a73:	68 00 00 00 00       	push   0x0	10003a74: R_386_32	currName
10003a78:	e8 fc ff ff ff       	call   10003a79 <firstRun(bool)+0x8a4>	10003a79: R_386_PC32	strlen
10003a7d:	83 c4 10             	add    esp,0x10
10003a80:	83 f8 22             	cmp    eax,0x22
10003a83:	77 69                	ja     10003aee <firstRun(bool)+0x919>
10003a85:	a0 00 00 00 00       	mov    al,ds:0x0	10003a86: R_386_32	installKey
10003a8a:	3c 40                	cmp    al,0x40
10003a8c:	7e 09                	jle    10003a97 <firstRun(bool)+0x8c2>
10003a8e:	a0 00 00 00 00       	mov    al,ds:0x0	10003a8f: R_386_32	installKey
10003a93:	3c 59                	cmp    al,0x59
10003a95:	7f 36                	jg     10003acd <firstRun(bool)+0x8f8>
10003a97:	a0 00 00 00 00       	mov    al,ds:0x0	10003a98: R_386_32	installKey
10003a9c:	3c 60                	cmp    al,0x60
10003a9e:	7e 09                	jle    10003aa9 <firstRun(bool)+0x8d4>
10003aa0:	a0 00 00 00 00       	mov    al,ds:0x0	10003aa1: R_386_32	installKey
10003aa5:	3c 79                	cmp    al,0x79
10003aa7:	7f 24                	jg     10003acd <firstRun(bool)+0x8f8>
10003aa9:	a0 00 00 00 00       	mov    al,ds:0x0	10003aaa: R_386_32	installKey
10003aae:	3c 2f                	cmp    al,0x2f
10003ab0:	7e 09                	jle    10003abb <firstRun(bool)+0x8e6>
10003ab2:	a0 00 00 00 00       	mov    al,ds:0x0	10003ab3: R_386_32	installKey
10003ab7:	3c 38                	cmp    al,0x38
10003ab9:	7f 12                	jg     10003acd <firstRun(bool)+0x8f8>
10003abb:	a0 00 00 00 00       	mov    al,ds:0x0	10003abc: R_386_32	installKey
10003ac0:	3c 5f                	cmp    al,0x5f
10003ac2:	74 09                	je     10003acd <firstRun(bool)+0x8f8>
10003ac4:	a0 00 00 00 00       	mov    al,ds:0x0	10003ac5: R_386_32	installKey
10003ac9:	3c 20                	cmp    al,0x20
10003acb:	75 04                	jne    10003ad1 <firstRun(bool)+0x8fc>
10003acd:	b0 01                	mov    al,0x1
10003acf:	eb 02                	jmp    10003ad3 <firstRun(bool)+0x8fe>
10003ad1:	b0 00                	mov    al,0x0
10003ad3:	84 c0                	test   al,al
10003ad5:	74 17                	je     10003aee <firstRun(bool)+0x919>
10003ad7:	83 ec 08             	sub    esp,0x8
10003ada:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003ae0:	50                   	push   eax
10003ae1:	68 00 00 00 00       	push   0x0	10003ae2: R_386_32	currName
10003ae6:	e8 fc ff ff ff       	call   10003ae7 <firstRun(bool)+0x912>	10003ae7: R_386_PC32	strcat
10003aeb:	83 c4 10             	add    esp,0x10
10003aee:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003af2:	75 2c                	jne    10003b20 <firstRun(bool)+0x94b>
10003af4:	83 ec 0c             	sub    esp,0xc
10003af7:	68 00 00 00 00       	push   0x0	10003af8: R_386_32	currComp
10003afc:	e8 fc ff ff ff       	call   10003afd <firstRun(bool)+0x928>	10003afd: R_386_PC32	strlen
10003b01:	83 c4 10             	add    esp,0x10
10003b04:	83 f8 22             	cmp    eax,0x22
10003b07:	77 17                	ja     10003b20 <firstRun(bool)+0x94b>
10003b09:	83 ec 08             	sub    esp,0x8
10003b0c:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003b12:	50                   	push   eax
10003b13:	68 00 00 00 00       	push   0x0	10003b14: R_386_32	currComp
10003b18:	e8 fc ff ff ff       	call   10003b19 <firstRun(bool)+0x944>	10003b19: R_386_PC32	strcat
10003b1d:	83 c4 10             	add    esp,0x10
10003b20:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10003b24:	75 2c                	jne    10003b52 <firstRun(bool)+0x97d>
10003b26:	83 ec 0c             	sub    esp,0xc
10003b29:	68 00 00 00 00       	push   0x0	10003b2a: R_386_32	passwbufA
10003b2e:	e8 fc ff ff ff       	call   10003b2f <firstRun(bool)+0x95a>	10003b2f: R_386_PC32	strlen
10003b33:	83 c4 10             	add    esp,0x10
10003b36:	83 f8 22             	cmp    eax,0x22
10003b39:	77 17                	ja     10003b52 <firstRun(bool)+0x97d>
10003b3b:	83 ec 08             	sub    esp,0x8
10003b3e:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003b44:	50                   	push   eax
10003b45:	68 00 00 00 00       	push   0x0	10003b46: R_386_32	passwbufA
10003b4a:	e8 fc ff ff ff       	call   10003b4b <firstRun(bool)+0x976>	10003b4b: R_386_PC32	strcat
10003b4f:	83 c4 10             	add    esp,0x10
10003b52:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10003b56:	0f 85 7f 01 00 00    	jne    10003cdb <firstRun(bool)+0xb06>
10003b5c:	83 ec 0c             	sub    esp,0xc
10003b5f:	68 00 00 00 00       	push   0x0	10003b60: R_386_32	passwbufB
10003b64:	e8 fc ff ff ff       	call   10003b65 <firstRun(bool)+0x990>	10003b65: R_386_PC32	strlen
10003b69:	83 c4 10             	add    esp,0x10
10003b6c:	83 f8 22             	cmp    eax,0x22
10003b6f:	0f 87 66 01 00 00    	ja     10003cdb <firstRun(bool)+0xb06>
10003b75:	83 ec 08             	sub    esp,0x8
10003b78:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003b7e:	50                   	push   eax
10003b7f:	68 00 00 00 00       	push   0x0	10003b80: R_386_32	passwbufB
10003b84:	e8 fc ff ff ff       	call   10003b85 <firstRun(bool)+0x9b0>	10003b85: R_386_PC32	strcat
10003b89:	83 c4 10             	add    esp,0x10
10003b8c:	e9 4a 01 00 00       	jmp    10003cdb <firstRun(bool)+0xb06>
10003b91:	a0 00 00 00 00       	mov    al,ds:0x0	10003b92: R_386_32	installKey
10003b96:	3c 1b                	cmp    al,0x1b
10003b98:	75 0d                	jne    10003ba7 <firstRun(bool)+0x9d2>
10003b9a:	a0 00 00 00 00       	mov    al,ds:0x0	10003b9b: R_386_32	createNewUserMode
10003b9f:	84 c0                	test   al,al
10003ba1:	74 04                	je     10003ba7 <firstRun(bool)+0x9d2>
10003ba3:	b0 01                	mov    al,0x1
10003ba5:	eb 02                	jmp    10003ba9 <firstRun(bool)+0x9d4>
10003ba7:	b0 00                	mov    al,0x0
10003ba9:	84 c0                	test   al,al
10003bab:	74 0c                	je     10003bb9 <firstRun(bool)+0x9e4>
10003bad:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003baf: R_386_32	createNewUserMode
10003bb4:	e9 19 1d 00 00       	jmp    100058d2 <firstRun(bool)+0x26fd>
10003bb9:	a0 00 00 00 00       	mov    al,ds:0x0	10003bba: R_386_32	installKey
10003bbe:	3c 08                	cmp    al,0x8
10003bc0:	0f 94 c0             	sete   al
10003bc3:	84 c0                	test   al,al
10003bc5:	0f 84 ca 00 00 00    	je     10003c95 <firstRun(bool)+0xac0>
10003bcb:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10003bcf:	75 2c                	jne    10003bfd <firstRun(bool)+0xa28>
10003bd1:	83 ec 0c             	sub    esp,0xc
10003bd4:	68 00 00 00 00       	push   0x0	10003bd5: R_386_32	currName
10003bd9:	e8 fc ff ff ff       	call   10003bda <firstRun(bool)+0xa05>	10003bda: R_386_PC32	strlen
10003bde:	83 c4 10             	add    esp,0x10
10003be1:	85 c0                	test   eax,eax
10003be3:	74 18                	je     10003bfd <firstRun(bool)+0xa28>
10003be5:	83 ec 0c             	sub    esp,0xc
10003be8:	68 00 00 00 00       	push   0x0	10003be9: R_386_32	currName
10003bed:	e8 fc ff ff ff       	call   10003bee <firstRun(bool)+0xa19>	10003bee: R_386_PC32	strlen
10003bf2:	83 c4 10             	add    esp,0x10
10003bf5:	48                   	dec    eax
10003bf6:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003bf8: R_386_32	currName
10003bfd:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003c01:	75 2c                	jne    10003c2f <firstRun(bool)+0xa5a>
10003c03:	83 ec 0c             	sub    esp,0xc
10003c06:	68 00 00 00 00       	push   0x0	10003c07: R_386_32	currComp
10003c0b:	e8 fc ff ff ff       	call   10003c0c <firstRun(bool)+0xa37>	10003c0c: R_386_PC32	strlen
10003c10:	83 c4 10             	add    esp,0x10
10003c13:	85 c0                	test   eax,eax
10003c15:	74 18                	je     10003c2f <firstRun(bool)+0xa5a>
10003c17:	83 ec 0c             	sub    esp,0xc
10003c1a:	68 00 00 00 00       	push   0x0	10003c1b: R_386_32	currComp
10003c1f:	e8 fc ff ff ff       	call   10003c20 <firstRun(bool)+0xa4b>	10003c20: R_386_PC32	strlen
10003c24:	83 c4 10             	add    esp,0x10
10003c27:	48                   	dec    eax
10003c28:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003c2a: R_386_32	currComp
10003c2f:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10003c33:	75 2c                	jne    10003c61 <firstRun(bool)+0xa8c>
10003c35:	83 ec 0c             	sub    esp,0xc
10003c38:	68 00 00 00 00       	push   0x0	10003c39: R_386_32	passwbufA
10003c3d:	e8 fc ff ff ff       	call   10003c3e <firstRun(bool)+0xa69>	10003c3e: R_386_PC32	strlen
10003c42:	83 c4 10             	add    esp,0x10
10003c45:	85 c0                	test   eax,eax
10003c47:	74 18                	je     10003c61 <firstRun(bool)+0xa8c>
10003c49:	83 ec 0c             	sub    esp,0xc
10003c4c:	68 00 00 00 00       	push   0x0	10003c4d: R_386_32	passwbufA
10003c51:	e8 fc ff ff ff       	call   10003c52 <firstRun(bool)+0xa7d>	10003c52: R_386_PC32	strlen
10003c56:	83 c4 10             	add    esp,0x10
10003c59:	48                   	dec    eax
10003c5a:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003c5c: R_386_32	passwbufA
10003c61:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10003c65:	75 74                	jne    10003cdb <firstRun(bool)+0xb06>
10003c67:	83 ec 0c             	sub    esp,0xc
10003c6a:	68 00 00 00 00       	push   0x0	10003c6b: R_386_32	passwbufB
10003c6f:	e8 fc ff ff ff       	call   10003c70 <firstRun(bool)+0xa9b>	10003c70: R_386_PC32	strlen
10003c74:	83 c4 10             	add    esp,0x10
10003c77:	85 c0                	test   eax,eax
10003c79:	74 60                	je     10003cdb <firstRun(bool)+0xb06>
10003c7b:	83 ec 0c             	sub    esp,0xc
10003c7e:	68 00 00 00 00       	push   0x0	10003c7f: R_386_32	passwbufB
10003c83:	e8 fc ff ff ff       	call   10003c84 <firstRun(bool)+0xaaf>	10003c84: R_386_PC32	strlen
10003c88:	83 c4 10             	add    esp,0x10
10003c8b:	48                   	dec    eax
10003c8c:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003c8e: R_386_32	passwbufB
10003c93:	eb 46                	jmp    10003cdb <firstRun(bool)+0xb06>
10003c95:	a0 00 00 00 00       	mov    al,ds:0x0	10003c96: R_386_32	installKey
10003c9a:	3c 7f                	cmp    al,0x7f
10003c9c:	0f 94 c0             	sete   al
10003c9f:	84 c0                	test   al,al
10003ca1:	74 38                	je     10003cdb <firstRun(bool)+0xb06>
10003ca3:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
10003ca6:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
10003caa:	75 07                	jne    10003cb3 <firstRun(bool)+0xade>
10003cac:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003cb3:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003cb7:	75 10                	jne    10003cc9 <firstRun(bool)+0xaf4>
10003cb9:	a0 00 00 00 00       	mov    al,ds:0x0	10003cba: R_386_32	createNewUserMode
10003cbe:	84 c0                	test   al,al
10003cc0:	74 07                	je     10003cc9 <firstRun(bool)+0xaf4>
10003cc2:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003cc9:	83 ec 08             	sub    esp,0x8
10003ccc:	6a 00                	push   0x0
10003cce:	68 2c 01 00 00       	push   0x12c
10003cd3:	e8 fc ff ff ff       	call   10003cd4 <firstRun(bool)+0xaff>	10003cd4: R_386_PC32	milliTenthSleep(unsigned long long)
10003cd8:	83 c4 10             	add    esp,0x10
10003cdb:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003cdd: R_386_32	installKey
10003ce2:	e9 3c f8 ff ff       	jmp    10003523 <firstRun(bool)+0x34e>
10003ce7:	90                   	nop
10003ce8:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003cea: R_386_32	installKey
10003cef:	83 ec 08             	sub    esp,0x8
10003cf2:	6a 00                	push   0x0
10003cf4:	68 d0 07 00 00       	push   0x7d0
10003cf9:	e8 fc ff ff ff       	call   10003cfa <firstRun(bool)+0xb25>	10003cfa: R_386_PC32	milliTenthSleep(unsigned long long)
10003cfe:	83 c4 10             	add    esp,0x10
10003d01:	e8 fc ff ff ff       	call   10003d02 <firstRun(bool)+0xb2d>	10003d02: R_386_PC32	drawBootScreen()
10003d06:	c7 45 bc 08 00 00 00 	mov    DWORD PTR [ebp-0x44],0x8
10003d0d:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003d0f: R_386_32	_bcrypt_errno
10003d17:	83 ec 08             	sub    esp,0x8
10003d1a:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10003d20:	50                   	push   eax
10003d21:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10003d24:	e8 fc ff ff ff       	call   10003d25 <firstRun(bool)+0xb50>	10003d25: R_386_PC32	bcrypt_gensalt
10003d29:	83 c4 10             	add    esp,0x10
10003d2c:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10003d2f:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10003d33:	75 09                	jne    10003d3e <firstRun(bool)+0xb69>
10003d35:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d36: R_386_32	_bcrypt_errno
10003d3a:	85 c0                	test   eax,eax
10003d3c:	74 5e                	je     10003d9c <firstRun(bool)+0xbc7>
10003d3e:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003d45:	83 ec 08             	sub    esp,0x8
10003d48:	68 b0 b3 00 10       	push   0x1000b3b0	10003d49: R_386_32	.text
10003d4d:	68 00 00 00 00       	push   0x0	10003d4e: R_386_32	currName
10003d52:	e8 fc ff ff ff       	call   10003d53 <firstRun(bool)+0xb7e>	10003d53: R_386_PC32	strcpy
10003d57:	83 c4 10             	add    esp,0x10
10003d5a:	83 ec 08             	sub    esp,0x8
10003d5d:	68 bf b3 00 10       	push   0x1000b3bf	10003d5e: R_386_32	.text
10003d62:	68 00 00 00 00       	push   0x0	10003d63: R_386_32	currComp
10003d67:	e8 fc ff ff ff       	call   10003d68 <firstRun(bool)+0xb93>	10003d68: R_386_PC32	strcpy
10003d6c:	83 c4 10             	add    esp,0x10
10003d6f:	83 ec 04             	sub    esp,0x4
10003d72:	6a 50                	push   0x50
10003d74:	6a 00                	push   0x0
10003d76:	68 00 00 00 00       	push   0x0	10003d77: R_386_32	passwbufA
10003d7b:	e8 fc ff ff ff       	call   10003d7c <firstRun(bool)+0xba7>	10003d7c: R_386_PC32	memset
10003d80:	83 c4 10             	add    esp,0x10
10003d83:	83 ec 04             	sub    esp,0x4
10003d86:	6a 50                	push   0x50
10003d88:	6a 00                	push   0x0
10003d8a:	68 00 00 00 00       	push   0x0	10003d8b: R_386_32	passwbufB
10003d8f:	e8 fc ff ff ff       	call   10003d90 <firstRun(bool)+0xbbb>	10003d90: R_386_PC32	memset
10003d94:	83 c4 10             	add    esp,0x10
10003d97:	e9 00 f6 ff ff       	jmp    1000339c <firstRun(bool)+0x1c7>
10003d9c:	83 ec 08             	sub    esp,0x8
10003d9f:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10003da5:	50                   	push   eax
10003da6:	68 00 00 00 00       	push   0x0	10003da7: R_386_32	passwsalt
10003dab:	e8 fc ff ff ff       	call   10003dac <firstRun(bool)+0xbd7>	10003dac: R_386_PC32	strcpy
10003db0:	83 c4 10             	add    esp,0x10
10003db3:	83 ec 04             	sub    esp,0x4
10003db6:	68 00 00 00 00       	push   0x0	10003db7: R_386_32	passwhash
10003dbb:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10003dc1:	50                   	push   eax
10003dc2:	68 00 00 00 00       	push   0x0	10003dc3: R_386_32	passwbufA
10003dc7:	e8 fc ff ff ff       	call   10003dc8 <firstRun(bool)+0xbf3>	10003dc8: R_386_PC32	bcrypt_hashpw
10003dcc:	83 c4 10             	add    esp,0x10
10003dcf:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10003dd2:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10003dd6:	75 09                	jne    10003de1 <firstRun(bool)+0xc0c>
10003dd8:	a1 00 00 00 00       	mov    eax,ds:0x0	10003dd9: R_386_32	_bcrypt_errno
10003ddd:	85 c0                	test   eax,eax
10003ddf:	74 5e                	je     10003e3f <firstRun(bool)+0xc6a>
10003de1:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003de8:	83 ec 08             	sub    esp,0x8
10003deb:	68 b0 b3 00 10       	push   0x1000b3b0	10003dec: R_386_32	.text
10003df0:	68 00 00 00 00       	push   0x0	10003df1: R_386_32	currName
10003df5:	e8 fc ff ff ff       	call   10003df6 <firstRun(bool)+0xc21>	10003df6: R_386_PC32	strcpy
10003dfa:	83 c4 10             	add    esp,0x10
10003dfd:	83 ec 08             	sub    esp,0x8
10003e00:	68 d1 b3 00 10       	push   0x1000b3d1	10003e01: R_386_32	.text
10003e05:	68 00 00 00 00       	push   0x0	10003e06: R_386_32	currComp
10003e0a:	e8 fc ff ff ff       	call   10003e0b <firstRun(bool)+0xc36>	10003e0b: R_386_PC32	strcpy
10003e0f:	83 c4 10             	add    esp,0x10
10003e12:	83 ec 04             	sub    esp,0x4
10003e15:	6a 50                	push   0x50
10003e17:	6a 00                	push   0x0
10003e19:	68 00 00 00 00       	push   0x0	10003e1a: R_386_32	passwbufA
10003e1e:	e8 fc ff ff ff       	call   10003e1f <firstRun(bool)+0xc4a>	10003e1f: R_386_PC32	memset
10003e23:	83 c4 10             	add    esp,0x10
10003e26:	83 ec 04             	sub    esp,0x4
10003e29:	6a 50                	push   0x50
10003e2b:	6a 00                	push   0x0
10003e2d:	68 00 00 00 00       	push   0x0	10003e2e: R_386_32	passwbufB
10003e32:	e8 fc ff ff ff       	call   10003e33 <firstRun(bool)+0xc5e>	10003e33: R_386_PC32	memset
10003e37:	83 c4 10             	add    esp,0x10
10003e3a:	e9 5d f5 ff ff       	jmp    1000339c <firstRun(bool)+0x1c7>
10003e3f:	83 ec 04             	sub    esp,0x4
10003e42:	6a 50                	push   0x50
10003e44:	6a 00                	push   0x0
10003e46:	68 00 00 00 00       	push   0x0	10003e47: R_386_32	passwbufA
10003e4b:	e8 fc ff ff ff       	call   10003e4c <firstRun(bool)+0xc77>	10003e4c: R_386_PC32	memset
10003e50:	83 c4 10             	add    esp,0x10
10003e53:	83 ec 04             	sub    esp,0x4
10003e56:	6a 50                	push   0x50
10003e58:	6a 00                	push   0x0
10003e5a:	68 00 00 00 00       	push   0x0	10003e5b: R_386_32	passwbufB
10003e5f:	e8 fc ff ff ff       	call   10003e60 <firstRun(bool)+0xc8b>	10003e60: R_386_PC32	memset
10003e64:	83 c4 10             	add    esp,0x10
10003e67:	a0 00 00 00 00       	mov    al,ds:0x0	10003e68: R_386_32	createNewUserMode
10003e6c:	84 c0                	test   al,al
10003e6e:	74 16                	je     10003e86 <firstRun(bool)+0xcb1>
10003e70:	83 ec 0c             	sub    esp,0xc
10003e73:	68 00 00 00 00       	push   0x0	10003e74: R_386_32	currName
10003e78:	e8 fc ff ff ff       	call   10003e79 <firstRun(bool)+0xca4>	10003e79: R_386_PC32	createUser(char const*)
10003e7d:	83 c4 10             	add    esp,0x10
10003e80:	90                   	nop
10003e81:	e9 4c 1a 00 00       	jmp    100058d2 <firstRun(bool)+0x26fd>
10003e86:	83 ec 08             	sub    esp,0x8
10003e89:	6a 00                	push   0x0
10003e8b:	68 d0 07 00 00       	push   0x7d0
10003e90:	e8 fc ff ff ff       	call   10003e91 <firstRun(bool)+0xcbc>	10003e91: R_386_PC32	milliTenthSleep(unsigned long long)
10003e95:	83 c4 10             	add    esp,0x10
10003e98:	eb 01                	jmp    10003e9b <firstRun(bool)+0xcc6>
10003e9a:	90                   	nop
10003e9b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003e9d: R_386_32	installKey
10003ea2:	e8 fc ff ff ff       	call   10003ea3 <firstRun(bool)+0xcce>	10003ea3: R_386_PC32	drawBootScreen()
10003ea7:	83 ec 0c             	sub    esp,0xc
10003eaa:	68 e3 b3 00 10       	push   0x1000b3e3	10003eab: R_386_32	.text
10003eaf:	6a 0d                	push   0xd
10003eb1:	6a 32                	push   0x32
10003eb3:	6a 02                	push   0x2
10003eb5:	6a 16                	push   0x16
10003eb7:	e8 fc ff ff ff       	call   10003eb8 <firstRun(bool)+0xce3>	10003eb8: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003ebc:	83 c4 20             	add    esp,0x20
10003ebf:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ec0: R_386_32	Krnl::computer
10003ec4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
10003eca:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ecb: R_386_32	Krnl::computer
10003ecf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10003ed5:	8b 00                	mov    eax,DWORD PTR [eax]
10003ed7:	83 c0 28             	add    eax,0x28
10003eda:	8b 00                	mov    eax,DWORD PTR [eax]
10003edc:	8d 95 98 fe ff ff    	lea    edx,[ebp-0x168]
10003ee2:	83 ec 08             	sub    esp,0x8
10003ee5:	51                   	push   ecx
10003ee6:	52                   	push   edx
10003ee7:	ff d0                	call   eax
10003ee9:	83 c4 0c             	add    esp,0xc
10003eec:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [ebp-0x168]
10003ef2:	8b 95 9c fe ff ff    	mov    edx,DWORD PTR [ebp-0x164]
10003ef8:	89 85 d4 fe ff ff    	mov    DWORD PTR [ebp-0x12c],eax
10003efe:	89 95 d8 fe ff ff    	mov    DWORD PTR [ebp-0x128],edx
10003f04:	83 ec 08             	sub    esp,0x8
10003f07:	68 f1 b3 00 10       	push   0x1000b3f1	10003f08: R_386_32	.text
10003f0c:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003f12:	50                   	push   eax
10003f13:	e8 fc ff ff ff       	call   10003f14 <firstRun(bool)+0xd3f>	10003f14: R_386_PC32	strcpy
10003f18:	83 c4 10             	add    esp,0x10
10003f1b:	8a 85 d4 fe ff ff    	mov    al,BYTE PTR [ebp-0x12c]
10003f21:	0f b6 d0             	movzx  edx,al
10003f24:	89 d0                	mov    eax,edx
10003f26:	c1 e0 02             	shl    eax,0x2
10003f29:	01 d0                	add    eax,edx
10003f2b:	c1 e0 03             	shl    eax,0x3
10003f2e:	01 d0                	add    eax,edx
10003f30:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f37:	01 d0                	add    eax,edx
10003f39:	66 c1 e8 08          	shr    ax,0x8
10003f3d:	c0 e8 03             	shr    al,0x3
10003f40:	83 c0 30             	add    eax,0x30
10003f43:	88 85 40 ff ff ff    	mov    BYTE PTR [ebp-0xc0],al
10003f49:	8a 8d d4 fe ff ff    	mov    cl,BYTE PTR [ebp-0x12c]
10003f4f:	0f b6 d1             	movzx  edx,cl
10003f52:	89 d0                	mov    eax,edx
10003f54:	c1 e0 02             	shl    eax,0x2
10003f57:	01 d0                	add    eax,edx
10003f59:	c1 e0 03             	shl    eax,0x3
10003f5c:	01 d0                	add    eax,edx
10003f5e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f65:	01 d0                	add    eax,edx
10003f67:	66 c1 e8 08          	shr    ax,0x8
10003f6b:	88 c2                	mov    dl,al
10003f6d:	c0 ea 03             	shr    dl,0x3
10003f70:	88 d0                	mov    al,dl
10003f72:	c1 e0 02             	shl    eax,0x2
10003f75:	01 d0                	add    eax,edx
10003f77:	d1 e0                	shl    eax,1
10003f79:	29 c1                	sub    ecx,eax
10003f7b:	88 ca                	mov    dl,cl
10003f7d:	8d 42 30             	lea    eax,[edx+0x30]
10003f80:	88 85 41 ff ff ff    	mov    BYTE PTR [ebp-0xbf],al
10003f86:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
10003f8c:	0f b6 c8             	movzx  ecx,al
10003f8f:	b8 67 66 66 66       	mov    eax,0x66666667
10003f94:	f7 e9                	imul   ecx
10003f96:	c1 fa 02             	sar    edx,0x2
10003f99:	89 c8                	mov    eax,ecx
10003f9b:	c1 f8 1f             	sar    eax,0x1f
10003f9e:	29 c2                	sub    edx,eax
10003fa0:	89 d0                	mov    eax,edx
10003fa2:	83 c0 30             	add    eax,0x30
10003fa5:	88 85 43 ff ff ff    	mov    BYTE PTR [ebp-0xbd],al
10003fab:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
10003fb1:	0f b6 c8             	movzx  ecx,al
10003fb4:	b8 67 66 66 66       	mov    eax,0x66666667
10003fb9:	f7 e9                	imul   ecx
10003fbb:	c1 fa 02             	sar    edx,0x2
10003fbe:	89 c8                	mov    eax,ecx
10003fc0:	c1 f8 1f             	sar    eax,0x1f
10003fc3:	29 c2                	sub    edx,eax
10003fc5:	89 d0                	mov    eax,edx
10003fc7:	c1 e0 02             	shl    eax,0x2
10003fca:	01 d0                	add    eax,edx
10003fcc:	01 c0                	add    eax,eax
10003fce:	29 c1                	sub    ecx,eax
10003fd0:	89 ca                	mov    edx,ecx
10003fd2:	88 d0                	mov    al,dl
10003fd4:	83 c0 30             	add    eax,0x30
10003fd7:	88 85 44 ff ff ff    	mov    BYTE PTR [ebp-0xbc],al
10003fdd:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003fe4:	0f b7 c8             	movzx  ecx,ax
10003fe7:	b8 d3 4d 62 10       	mov    eax,0x10624dd3
10003fec:	f7 e9                	imul   ecx
10003fee:	c1 fa 06             	sar    edx,0x6
10003ff1:	89 c8                	mov    eax,ecx
10003ff3:	c1 f8 1f             	sar    eax,0x1f
10003ff6:	29 c2                	sub    edx,eax
10003ff8:	89 d0                	mov    eax,edx
10003ffa:	b9 0a 00 00 00       	mov    ecx,0xa
10003fff:	99                   	cdq    
10004000:	f7 f9                	idiv   ecx
10004002:	89 d0                	mov    eax,edx
10004004:	83 c0 30             	add    eax,0x30
10004007:	88 85 46 ff ff ff    	mov    BYTE PTR [ebp-0xba],al
1000400d:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10004014:	0f b7 c8             	movzx  ecx,ax
10004017:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
1000401c:	f7 e9                	imul   ecx
1000401e:	c1 fa 05             	sar    edx,0x5
10004021:	89 c8                	mov    eax,ecx
10004023:	c1 f8 1f             	sar    eax,0x1f
10004026:	29 c2                	sub    edx,eax
10004028:	89 d0                	mov    eax,edx
1000402a:	b9 0a 00 00 00       	mov    ecx,0xa
1000402f:	99                   	cdq    
10004030:	f7 f9                	idiv   ecx
10004032:	89 d0                	mov    eax,edx
10004034:	83 c0 30             	add    eax,0x30
10004037:	88 85 47 ff ff ff    	mov    BYTE PTR [ebp-0xb9],al
1000403d:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10004044:	0f b7 c8             	movzx  ecx,ax
10004047:	b8 67 66 66 66       	mov    eax,0x66666667
1000404c:	f7 e9                	imul   ecx
1000404e:	c1 fa 02             	sar    edx,0x2
10004051:	89 c8                	mov    eax,ecx
10004053:	c1 f8 1f             	sar    eax,0x1f
10004056:	89 d1                	mov    ecx,edx
10004058:	29 c1                	sub    ecx,eax
1000405a:	b8 67 66 66 66       	mov    eax,0x66666667
1000405f:	f7 e9                	imul   ecx
10004061:	c1 fa 02             	sar    edx,0x2
10004064:	89 c8                	mov    eax,ecx
10004066:	c1 f8 1f             	sar    eax,0x1f
10004069:	29 c2                	sub    edx,eax
1000406b:	89 d0                	mov    eax,edx
1000406d:	c1 e0 02             	shl    eax,0x2
10004070:	01 d0                	add    eax,edx
10004072:	01 c0                	add    eax,eax
10004074:	29 c1                	sub    ecx,eax
10004076:	89 ca                	mov    edx,ecx
10004078:	88 d0                	mov    al,dl
1000407a:	83 c0 30             	add    eax,0x30
1000407d:	88 85 48 ff ff ff    	mov    BYTE PTR [ebp-0xb8],al
10004083:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
1000408a:	0f b7 c0             	movzx  eax,ax
1000408d:	b9 0a 00 00 00       	mov    ecx,0xa
10004092:	99                   	cdq    
10004093:	f7 f9                	idiv   ecx
10004095:	89 d0                	mov    eax,edx
10004097:	83 c0 30             	add    eax,0x30
1000409a:	88 85 49 ff ff ff    	mov    BYTE PTR [ebp-0xb7],al
100040a0:	8a 85 d8 fe ff ff    	mov    al,BYTE PTR [ebp-0x128]
100040a6:	0f b6 d0             	movzx  edx,al
100040a9:	89 d0                	mov    eax,edx
100040ab:	c1 e0 02             	shl    eax,0x2
100040ae:	01 d0                	add    eax,edx
100040b0:	c1 e0 03             	shl    eax,0x3
100040b3:	01 d0                	add    eax,edx
100040b5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100040bc:	01 d0                	add    eax,edx
100040be:	66 c1 e8 08          	shr    ax,0x8
100040c2:	c0 e8 03             	shr    al,0x3
100040c5:	83 c0 30             	add    eax,0x30
100040c8:	88 85 4b ff ff ff    	mov    BYTE PTR [ebp-0xb5],al
100040ce:	8a 8d d8 fe ff ff    	mov    cl,BYTE PTR [ebp-0x128]
100040d4:	0f b6 d1             	movzx  edx,cl
100040d7:	89 d0                	mov    eax,edx
100040d9:	c1 e0 02             	shl    eax,0x2
100040dc:	01 d0                	add    eax,edx
100040de:	c1 e0 03             	shl    eax,0x3
100040e1:	01 d0                	add    eax,edx
100040e3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100040ea:	01 d0                	add    eax,edx
100040ec:	66 c1 e8 08          	shr    ax,0x8
100040f0:	88 c2                	mov    dl,al
100040f2:	c0 ea 03             	shr    dl,0x3
100040f5:	88 d0                	mov    al,dl
100040f7:	c1 e0 02             	shl    eax,0x2
100040fa:	01 d0                	add    eax,edx
100040fc:	d1 e0                	shl    eax,1
100040fe:	29 c1                	sub    ecx,eax
10004100:	88 ca                	mov    dl,cl
10004102:	8d 42 30             	lea    eax,[edx+0x30]
10004105:	88 85 4c ff ff ff    	mov    BYTE PTR [ebp-0xb4],al
1000410b:	8a 85 d9 fe ff ff    	mov    al,BYTE PTR [ebp-0x127]
10004111:	0f b6 d0             	movzx  edx,al
10004114:	89 d0                	mov    eax,edx
10004116:	c1 e0 02             	shl    eax,0x2
10004119:	01 d0                	add    eax,edx
1000411b:	c1 e0 03             	shl    eax,0x3
1000411e:	01 d0                	add    eax,edx
10004120:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10004127:	01 d0                	add    eax,edx
10004129:	66 c1 e8 08          	shr    ax,0x8
1000412d:	c0 e8 03             	shr    al,0x3
10004130:	83 c0 30             	add    eax,0x30
10004133:	88 85 4e ff ff ff    	mov    BYTE PTR [ebp-0xb2],al
10004139:	8a 8d d9 fe ff ff    	mov    cl,BYTE PTR [ebp-0x127]
1000413f:	0f b6 d1             	movzx  edx,cl
10004142:	89 d0                	mov    eax,edx
10004144:	c1 e0 02             	shl    eax,0x2
10004147:	01 d0                	add    eax,edx
10004149:	c1 e0 03             	shl    eax,0x3
1000414c:	01 d0                	add    eax,edx
1000414e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10004155:	01 d0                	add    eax,edx
10004157:	66 c1 e8 08          	shr    ax,0x8
1000415b:	88 c2                	mov    dl,al
1000415d:	c0 ea 03             	shr    dl,0x3
10004160:	88 d0                	mov    al,dl
10004162:	c1 e0 02             	shl    eax,0x2
10004165:	01 d0                	add    eax,edx
10004167:	d1 e0                	shl    eax,1
10004169:	29 c1                	sub    ecx,eax
1000416b:	88 ca                	mov    dl,cl
1000416d:	8d 42 30             	lea    eax,[edx+0x30]
10004170:	88 85 4f ff ff ff    	mov    BYTE PTR [ebp-0xb1],al
10004176:	8a 85 da fe ff ff    	mov    al,BYTE PTR [ebp-0x126]
1000417c:	0f b6 d0             	movzx  edx,al
1000417f:	89 d0                	mov    eax,edx
10004181:	c1 e0 02             	shl    eax,0x2
10004184:	01 d0                	add    eax,edx
10004186:	c1 e0 03             	shl    eax,0x3
10004189:	01 d0                	add    eax,edx
1000418b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10004192:	01 d0                	add    eax,edx
10004194:	66 c1 e8 08          	shr    ax,0x8
10004198:	c0 e8 03             	shr    al,0x3
1000419b:	83 c0 30             	add    eax,0x30
1000419e:	88 85 51 ff ff ff    	mov    BYTE PTR [ebp-0xaf],al
100041a4:	8a 8d da fe ff ff    	mov    cl,BYTE PTR [ebp-0x126]
100041aa:	0f b6 d1             	movzx  edx,cl
100041ad:	89 d0                	mov    eax,edx
100041af:	c1 e0 02             	shl    eax,0x2
100041b2:	01 d0                	add    eax,edx
100041b4:	c1 e0 03             	shl    eax,0x3
100041b7:	01 d0                	add    eax,edx
100041b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100041c0:	01 d0                	add    eax,edx
100041c2:	66 c1 e8 08          	shr    ax,0x8
100041c6:	88 c2                	mov    dl,al
100041c8:	c0 ea 03             	shr    dl,0x3
100041cb:	88 d0                	mov    al,dl
100041cd:	c1 e0 02             	shl    eax,0x2
100041d0:	01 d0                	add    eax,edx
100041d2:	d1 e0                	shl    eax,1
100041d4:	29 c1                	sub    ecx,eax
100041d6:	88 ca                	mov    dl,cl
100041d8:	8d 42 30             	lea    eax,[edx+0x30]
100041db:	88 85 52 ff ff ff    	mov    BYTE PTR [ebp-0xae],al
100041e1:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100041e8:	a1 00 00 00 00       	mov    eax,ds:0x0	100041e9: R_386_32	term
100041ed:	83 ec 04             	sub    esp,0x4
100041f0:	6a 05                	push   0x5
100041f2:	6a 18                	push   0x18
100041f4:	50                   	push   eax
100041f5:	e8 fc ff ff ff       	call   100041f6 <firstRun(bool)+0x1021>	100041f6: R_386_PC32	VgaText::setCursor(int, int)
100041fa:	83 c4 10             	add    esp,0x10
100041fd:	a1 00 00 00 00       	mov    eax,ds:0x0	100041fe: R_386_32	term
10004202:	83 ec 08             	sub    esp,0x8
10004205:	68 08 b4 00 10       	push   0x1000b408	10004206: R_386_32	.text
1000420a:	50                   	push   eax
1000420b:	e8 fc ff ff ff       	call   1000420c <firstRun(bool)+0x1037>	1000420c: R_386_PC32	VgaText::puts(char const*)
10004210:	83 c4 10             	add    esp,0x10
10004213:	a1 00 00 00 00       	mov    eax,ds:0x0	10004214: R_386_32	term
10004218:	83 ec 04             	sub    esp,0x4
1000421b:	6a 06                	push   0x6
1000421d:	6a 18                	push   0x18
1000421f:	50                   	push   eax
10004220:	e8 fc ff ff ff       	call   10004221 <firstRun(bool)+0x104c>	10004221: R_386_PC32	VgaText::setCursor(int, int)
10004225:	83 c4 10             	add    esp,0x10
10004228:	a1 00 00 00 00       	mov    eax,ds:0x0	10004229: R_386_32	term
1000422d:	83 ec 08             	sub    esp,0x8
10004230:	68 30 b4 00 10       	push   0x1000b430	10004231: R_386_32	.text
10004235:	50                   	push   eax
10004236:	e8 fc ff ff ff       	call   10004237 <firstRun(bool)+0x1062>	10004237: R_386_PC32	VgaText::puts(char const*)
1000423b:	83 c4 10             	add    esp,0x10
1000423e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000423f: R_386_32	term
10004243:	83 ec 04             	sub    esp,0x4
10004246:	6a 09                	push   0x9
10004248:	6a 1a                	push   0x1a
1000424a:	50                   	push   eax
1000424b:	e8 fc ff ff ff       	call   1000424c <firstRun(bool)+0x1077>	1000424c: R_386_PC32	VgaText::setCursor(int, int)
10004250:	83 c4 10             	add    esp,0x10
10004253:	a1 00 00 00 00       	mov    eax,ds:0x0	10004254: R_386_32	term
10004258:	6a 0f                	push   0xf
1000425a:	6a 07                	push   0x7
1000425c:	68 46 b4 00 10       	push   0x1000b446	1000425d: R_386_32	.text
10004261:	50                   	push   eax
10004262:	e8 fc ff ff ff       	call   10004263 <firstRun(bool)+0x108e>	10004263: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004267:	83 c4 10             	add    esp,0x10
1000426a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000426b: R_386_32	term
1000426f:	83 ec 04             	sub    esp,0x4
10004272:	6a 18                	push   0x18
10004274:	6a 11                	push   0x11
10004276:	50                   	push   eax
10004277:	e8 fc ff ff ff       	call   10004278 <firstRun(bool)+0x10a3>	10004278: R_386_PC32	VgaText::setCursor(int, int)
1000427c:	83 c4 10             	add    esp,0x10
1000427f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004280: R_386_32	term
10004284:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10004286: R_386_32	safemode
1000428a:	84 d2                	test   dl,dl
1000428c:	74 07                	je     10004295 <firstRun(bool)+0x10c0>
1000428e:	b9 00 00 00 00       	mov    ecx,0x0
10004293:	eb 05                	jmp    1000429a <firstRun(bool)+0x10c5>
10004295:	b9 0b 00 00 00       	mov    ecx,0xb
1000429a:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	1000429c: R_386_32	safemode
100042a0:	84 d2                	test   dl,dl
100042a2:	74 07                	je     100042ab <firstRun(bool)+0x10d6>
100042a4:	ba 0f 00 00 00       	mov    edx,0xf
100042a9:	eb 05                	jmp    100042b0 <firstRun(bool)+0x10db>
100042ab:	ba 03 00 00 00       	mov    edx,0x3
100042b0:	51                   	push   ecx
100042b1:	52                   	push   edx
100042b2:	68 5a b4 00 10       	push   0x1000b45a	100042b3: R_386_32	.text
100042b7:	50                   	push   eax
100042b8:	e8 fc ff ff ff       	call   100042b9 <firstRun(bool)+0x10e4>	100042b9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100042bd:	83 c4 10             	add    esp,0x10
100042c0:	a1 00 00 00 00       	mov    eax,ds:0x0	100042c1: R_386_32	term
100042c5:	83 ec 04             	sub    esp,0x4
100042c8:	6a 08                	push   0x8
100042ca:	6a 1a                	push   0x1a
100042cc:	50                   	push   eax
100042cd:	e8 fc ff ff ff       	call   100042ce <firstRun(bool)+0x10f9>	100042ce: R_386_PC32	VgaText::setCursor(int, int)
100042d2:	83 c4 10             	add    esp,0x10
100042d5:	a1 00 00 00 00       	mov    eax,ds:0x0	100042d6: R_386_32	term
100042da:	83 ec 08             	sub    esp,0x8
100042dd:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100042e3:	52                   	push   edx
100042e4:	50                   	push   eax
100042e5:	e8 fc ff ff ff       	call   100042e6 <firstRun(bool)+0x1111>	100042e6: R_386_PC32	VgaText::puts(char const*)
100042ea:	83 c4 10             	add    esp,0x10
100042ed:	a1 00 00 00 00       	mov    eax,ds:0x0	100042ee: R_386_32	term
100042f2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100042f5:	83 c2 1a             	add    edx,0x1a
100042f8:	83 ec 04             	sub    esp,0x4
100042fb:	6a 08                	push   0x8
100042fd:	52                   	push   edx
100042fe:	50                   	push   eax
100042ff:	e8 fc ff ff ff       	call   10004300 <firstRun(bool)+0x112b>	10004300: R_386_PC32	VgaText::setCursor(int, int)
10004304:	83 c4 10             	add    esp,0x10
10004307:	a1 00 00 00 00       	mov    eax,ds:0x0	10004308: R_386_32	term
1000430c:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10004312:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004315:	01 ca                	add    edx,ecx
10004317:	8a 12                	mov    dl,BYTE PTR [edx]
10004319:	0f be d2             	movsx  edx,dl
1000431c:	6a 00                	push   0x0
1000431e:	6a 0f                	push   0xf
10004320:	52                   	push   edx
10004321:	50                   	push   eax
10004322:	e8 fc ff ff ff       	call   10004323 <firstRun(bool)+0x114e>	10004323: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004327:	83 c4 10             	add    esp,0x10
1000432a:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
10004330:	0f be c0             	movsx  eax,al
10004333:	8d 50 d0             	lea    edx,[eax-0x30]
10004336:	89 d0                	mov    eax,edx
10004338:	c1 e0 02             	shl    eax,0x2
1000433b:	01 d0                	add    eax,edx
1000433d:	01 c0                	add    eax,eax
1000433f:	89 c2                	mov    edx,eax
10004341:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
10004347:	0f be c0             	movsx  eax,al
1000434a:	83 e8 30             	sub    eax,0x30
1000434d:	01 d0                	add    eax,edx
1000434f:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10004352:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
10004355:	b9 0c 00 00 00       	mov    ecx,0xc
1000435a:	99                   	cdq    
1000435b:	f7 f9                	idiv   ecx
1000435d:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
10004360:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10004364:	75 07                	jne    1000436d <firstRun(bool)+0x1198>
10004366:	c7 45 d0 0c 00 00 00 	mov    DWORD PTR [ebp-0x30],0xc
1000436d:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
10004373:	0f be c0             	movsx  eax,al
10004376:	8d 50 d0             	lea    edx,[eax-0x30]
10004379:	89 d0                	mov    eax,edx
1000437b:	c1 e0 02             	shl    eax,0x2
1000437e:	01 d0                	add    eax,edx
10004380:	01 c0                	add    eax,eax
10004382:	89 c2                	mov    edx,eax
10004384:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
1000438a:	0f be c0             	movsx  eax,al
1000438d:	83 e8 30             	sub    eax,0x30
10004390:	01 d0                	add    eax,edx
10004392:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
10004395:	83 ec 04             	sub    esp,0x4
10004398:	6a 10                	push   0x10
1000439a:	6a 00                	push   0x0
1000439c:	8d 85 b6 fe ff ff    	lea    eax,[ebp-0x14a]
100043a2:	50                   	push   eax
100043a3:	e8 fc ff ff ff       	call   100043a4 <firstRun(bool)+0x11cf>	100043a4: R_386_PC32	memset
100043a8:	83 c4 10             	add    esp,0x10
100043ab:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [ebp-0x54],0x0
100043b2:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100043b5:	8d 50 01             	lea    edx,[eax+0x1]
100043b8:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100043bb:	c6 84 05 b6 fe ff ff 28 	mov    BYTE PTR [ebp+eax*1-0x14a],0x28
100043c3:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
100043c6:	b8 67 66 66 66       	mov    eax,0x66666667
100043cb:	f7 e9                	imul   ecx
100043cd:	c1 fa 02             	sar    edx,0x2
100043d0:	89 c8                	mov    eax,ecx
100043d2:	c1 f8 1f             	sar    eax,0x1f
100043d5:	29 c2                	sub    edx,eax
100043d7:	89 d0                	mov    eax,edx
100043d9:	8d 48 30             	lea    ecx,[eax+0x30]
100043dc:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100043df:	8d 50 01             	lea    edx,[eax+0x1]
100043e2:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100043e5:	88 ca                	mov    dl,cl
100043e7:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
100043ee:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
100043f1:	b8 67 66 66 66       	mov    eax,0x66666667
100043f6:	f7 e9                	imul   ecx
100043f8:	c1 fa 02             	sar    edx,0x2
100043fb:	89 c8                	mov    eax,ecx
100043fd:	c1 f8 1f             	sar    eax,0x1f
10004400:	29 c2                	sub    edx,eax
10004402:	89 d0                	mov    eax,edx
10004404:	c1 e0 02             	shl    eax,0x2
10004407:	01 d0                	add    eax,edx
10004409:	01 c0                	add    eax,eax
1000440b:	29 c1                	sub    ecx,eax
1000440d:	89 ca                	mov    edx,ecx
1000440f:	88 d0                	mov    al,dl
10004411:	8d 48 30             	lea    ecx,[eax+0x30]
10004414:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10004417:	8d 50 01             	lea    edx,[eax+0x1]
1000441a:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
1000441d:	88 ca                	mov    dl,cl
1000441f:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10004426:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10004429:	8d 50 01             	lea    edx,[eax+0x1]
1000442c:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
1000442f:	c6 84 05 b6 fe ff ff 3a 	mov    BYTE PTR [ebp+eax*1-0x14a],0x3a
10004437:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
1000443a:	b8 67 66 66 66       	mov    eax,0x66666667
1000443f:	f7 e9                	imul   ecx
10004441:	c1 fa 02             	sar    edx,0x2
10004444:	89 c8                	mov    eax,ecx
10004446:	c1 f8 1f             	sar    eax,0x1f
10004449:	29 c2                	sub    edx,eax
1000444b:	89 d0                	mov    eax,edx
1000444d:	8d 48 30             	lea    ecx,[eax+0x30]
10004450:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10004453:	8d 50 01             	lea    edx,[eax+0x1]
10004456:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10004459:	88 ca                	mov    dl,cl
1000445b:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10004462:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10004465:	b8 67 66 66 66       	mov    eax,0x66666667
1000446a:	f7 e9                	imul   ecx
1000446c:	c1 fa 02             	sar    edx,0x2
1000446f:	89 c8                	mov    eax,ecx
10004471:	c1 f8 1f             	sar    eax,0x1f
10004474:	29 c2                	sub    edx,eax
10004476:	89 d0                	mov    eax,edx
10004478:	c1 e0 02             	shl    eax,0x2
1000447b:	01 d0                	add    eax,edx
1000447d:	01 c0                	add    eax,eax
1000447f:	29 c1                	sub    ecx,eax
10004481:	89 ca                	mov    edx,ecx
10004483:	88 d0                	mov    al,dl
10004485:	8d 48 30             	lea    ecx,[eax+0x30]
10004488:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
1000448b:	8d 50 01             	lea    edx,[eax+0x1]
1000448e:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10004491:	88 ca                	mov    dl,cl
10004493:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
1000449a:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
1000449d:	8d 50 01             	lea    edx,[eax+0x1]
100044a0:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100044a3:	c6 84 05 b6 fe ff ff 20 	mov    BYTE PTR [ebp+eax*1-0x14a],0x20
100044ab:	83 7d b4 0b          	cmp    DWORD PTR [ebp-0x4c],0xb
100044af:	7e 04                	jle    100044b5 <firstRun(bool)+0x12e0>
100044b1:	b2 50                	mov    dl,0x50
100044b3:	eb 02                	jmp    100044b7 <firstRun(bool)+0x12e2>
100044b5:	b2 41                	mov    dl,0x41
100044b7:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100044ba:	8d 48 01             	lea    ecx,[eax+0x1]
100044bd:	89 4d ac             	mov    DWORD PTR [ebp-0x54],ecx
100044c0:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
100044c7:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100044ca:	8d 50 01             	lea    edx,[eax+0x1]
100044cd:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100044d0:	c6 84 05 b6 fe ff ff 4d 	mov    BYTE PTR [ebp+eax*1-0x14a],0x4d
100044d8:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100044db:	8d 50 01             	lea    edx,[eax+0x1]
100044de:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100044e1:	c6 84 05 b6 fe ff ff 29 	mov    BYTE PTR [ebp+eax*1-0x14a],0x29
100044e9:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100044eb: R_386_32	term
100044ef:	83 ec 0c             	sub    esp,0xc
100044f2:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
100044f8:	50                   	push   eax
100044f9:	e8 fc ff ff ff       	call   100044fa <firstRun(bool)+0x1325>	100044fa: R_386_PC32	strlen
100044fe:	83 c4 10             	add    esp,0x10
10004501:	83 c0 1e             	add    eax,0x1e
10004504:	83 ec 04             	sub    esp,0x4
10004507:	6a 08                	push   0x8
10004509:	50                   	push   eax
1000450a:	53                   	push   ebx
1000450b:	e8 fc ff ff ff       	call   1000450c <firstRun(bool)+0x1337>	1000450c: R_386_PC32	VgaText::setCursor(int, int)
10004510:	83 c4 10             	add    esp,0x10
10004513:	a1 00 00 00 00       	mov    eax,ds:0x0	10004514: R_386_32	term
10004518:	83 ec 08             	sub    esp,0x8
1000451b:	8d 95 b6 fe ff ff    	lea    edx,[ebp-0x14a]
10004521:	52                   	push   edx
10004522:	50                   	push   eax
10004523:	e8 fc ff ff ff       	call   10004524 <firstRun(bool)+0x134f>	10004524: R_386_PC32	VgaText::puts(char const*)
10004528:	83 c4 10             	add    esp,0x10
1000452b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000452c: R_386_32	term
10004530:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004533:	83 c2 1a             	add    edx,0x1a
10004536:	83 ec 04             	sub    esp,0x4
10004539:	6a 08                	push   0x8
1000453b:	52                   	push   edx
1000453c:	50                   	push   eax
1000453d:	e8 fc ff ff ff       	call   1000453e <firstRun(bool)+0x1369>	1000453e: R_386_PC32	VgaText::setCursor(int, int)
10004542:	83 c4 10             	add    esp,0x10
10004545:	a0 00 00 00 00       	mov    al,ds:0x0	10004546: R_386_32	installKey
1000454a:	84 c0                	test   al,al
1000454c:	0f 94 c0             	sete   al
1000454f:	84 c0                	test   al,al
10004551:	74 02                	je     10004555 <firstRun(bool)+0x1380>
10004553:	eb f0                	jmp    10004545 <firstRun(bool)+0x1370>
10004555:	a1 00 00 00 00       	mov    eax,ds:0x0	10004556: R_386_32	term
1000455a:	05 82 00 00 00       	add    eax,0x82
1000455f:	83 ec 04             	sub    esp,0x4
10004562:	6a 10                	push   0x10
10004564:	6a 00                	push   0x0
10004566:	50                   	push   eax
10004567:	e8 fc ff ff ff       	call   10004568 <firstRun(bool)+0x1393>	10004568: R_386_PC32	memset
1000456c:	83 c4 10             	add    esp,0x10
1000456f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004570: R_386_32	term
10004574:	05 02 01 00 00       	add    eax,0x102
10004579:	83 ec 04             	sub    esp,0x4
1000457c:	6a 10                	push   0x10
1000457e:	6a 00                	push   0x0
10004580:	50                   	push   eax
10004581:	e8 fc ff ff ff       	call   10004582 <firstRun(bool)+0x13ad>	10004582: R_386_PC32	memset
10004586:	83 c4 10             	add    esp,0x10
10004589:	a0 00 00 00 00       	mov    al,ds:0x0	1000458a: R_386_32	installKey
1000458e:	3c 03                	cmp    al,0x3
10004590:	74 09                	je     1000459b <firstRun(bool)+0x13c6>
10004592:	a0 00 00 00 00       	mov    al,ds:0x0	10004593: R_386_32	installKey
10004597:	3c 08                	cmp    al,0x8
10004599:	75 04                	jne    1000459f <firstRun(bool)+0x13ca>
1000459b:	b0 01                	mov    al,0x1
1000459d:	eb 02                	jmp    100045a1 <firstRun(bool)+0x13cc>
1000459f:	b0 00                	mov    al,0x0
100045a1:	84 c0                	test   al,al
100045a3:	74 58                	je     100045fd <firstRun(bool)+0x1428>
100045a5:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
100045a8:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
100045ac:	75 16                	jne    100045c4 <firstRun(bool)+0x13ef>
100045ae:	83 ec 0c             	sub    esp,0xc
100045b1:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
100045b7:	50                   	push   eax
100045b8:	e8 fc ff ff ff       	call   100045b9 <firstRun(bool)+0x13e4>	100045b9: R_386_PC32	strlen
100045bd:	83 c4 10             	add    esp,0x10
100045c0:	48                   	dec    eax
100045c1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100045c4:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100045ca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100045cd:	01 d0                	add    eax,edx
100045cf:	8a 00                	mov    al,BYTE PTR [eax]
100045d1:	3c 20                	cmp    al,0x20
100045d3:	74 d0                	je     100045a5 <firstRun(bool)+0x13d0>
100045d5:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100045db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100045de:	01 d0                	add    eax,edx
100045e0:	8a 00                	mov    al,BYTE PTR [eax]
100045e2:	3c 2f                	cmp    al,0x2f
100045e4:	74 bf                	je     100045a5 <firstRun(bool)+0x13d0>
100045e6:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100045ec:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100045ef:	01 d0                	add    eax,edx
100045f1:	8a 00                	mov    al,BYTE PTR [eax]
100045f3:	3c 3a                	cmp    al,0x3a
100045f5:	0f 85 f8 04 00 00    	jne    10004af3 <firstRun(bool)+0x191e>
100045fb:	eb a8                	jmp    100045a5 <firstRun(bool)+0x13d0>
100045fd:	a0 00 00 00 00       	mov    al,ds:0x0	100045fe: R_386_32	installKey
10004602:	3c 2f                	cmp    al,0x2f
10004604:	7e 09                	jle    1000460f <firstRun(bool)+0x143a>
10004606:	a0 00 00 00 00       	mov    al,ds:0x0	10004607: R_386_32	installKey
1000460b:	3c 39                	cmp    al,0x39
1000460d:	7e 12                	jle    10004621 <firstRun(bool)+0x144c>
1000460f:	a0 00 00 00 00       	mov    al,ds:0x0	10004610: R_386_32	installKey
10004614:	3c 20                	cmp    al,0x20
10004616:	74 09                	je     10004621 <firstRun(bool)+0x144c>
10004618:	a0 00 00 00 00       	mov    al,ds:0x0	10004619: R_386_32	installKey
1000461d:	3c 04                	cmp    al,0x4
1000461f:	75 04                	jne    10004625 <firstRun(bool)+0x1450>
10004621:	b0 01                	mov    al,0x1
10004623:	eb 02                	jmp    10004627 <firstRun(bool)+0x1452>
10004625:	b0 00                	mov    al,0x0
10004627:	84 c0                	test   al,al
10004629:	0f 84 cf 01 00 00    	je     100047fe <firstRun(bool)+0x1629>
1000462f:	a0 00 00 00 00       	mov    al,ds:0x0	10004630: R_386_32	installKey
10004634:	3c 2f                	cmp    al,0x2f
10004636:	7e 0d                	jle    10004645 <firstRun(bool)+0x1470>
10004638:	a0 00 00 00 00       	mov    al,ds:0x0	10004639: R_386_32	installKey
1000463d:	3c 39                	cmp    al,0x39
1000463f:	7f 04                	jg     10004645 <firstRun(bool)+0x1470>
10004641:	b0 01                	mov    al,0x1
10004643:	eb 02                	jmp    10004647 <firstRun(bool)+0x1472>
10004645:	b0 00                	mov    al,0x0
10004647:	84 c0                	test   al,al
10004649:	0f 84 51 01 00 00    	je     100047a0 <firstRun(bool)+0x15cb>
1000464f:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10004653:	75 0d                	jne    10004662 <firstRun(bool)+0x148d>
10004655:	a0 00 00 00 00       	mov    al,ds:0x0	10004656: R_386_32	installKey
1000465a:	3c 33                	cmp    al,0x33
1000465c:	7e 04                	jle    10004662 <firstRun(bool)+0x148d>
1000465e:	b0 01                	mov    al,0x1
10004660:	eb 02                	jmp    10004664 <firstRun(bool)+0x148f>
10004662:	b0 00                	mov    al,0x0
10004664:	84 c0                	test   al,al
10004666:	74 28                	je     10004690 <firstRun(bool)+0x14bb>
10004668:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000466b:	8d 50 01             	lea    edx,[eax+0x1]
1000466e:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10004671:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10004679:	a0 00 00 00 00       	mov    al,ds:0x0	1000467a: R_386_32	installKey
1000467e:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10004684:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004687:	01 ca                	add    edx,ecx
10004689:	88 02                	mov    BYTE PTR [edx],al
1000468b:	e9 10 01 00 00       	jmp    100047a0 <firstRun(bool)+0x15cb>
10004690:	83 7d e4 03          	cmp    DWORD PTR [ebp-0x1c],0x3
10004694:	75 0d                	jne    100046a3 <firstRun(bool)+0x14ce>
10004696:	a0 00 00 00 00       	mov    al,ds:0x0	10004697: R_386_32	installKey
1000469b:	3c 31                	cmp    al,0x31
1000469d:	7e 04                	jle    100046a3 <firstRun(bool)+0x14ce>
1000469f:	b0 01                	mov    al,0x1
100046a1:	eb 02                	jmp    100046a5 <firstRun(bool)+0x14d0>
100046a3:	b0 00                	mov    al,0x0
100046a5:	84 c0                	test   al,al
100046a7:	74 28                	je     100046d1 <firstRun(bool)+0x14fc>
100046a9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100046ac:	8d 50 01             	lea    edx,[eax+0x1]
100046af:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
100046b2:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
100046ba:	a0 00 00 00 00       	mov    al,ds:0x0	100046bb: R_386_32	installKey
100046bf:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
100046c5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100046c8:	01 ca                	add    edx,ecx
100046ca:	88 02                	mov    BYTE PTR [edx],al
100046cc:	e9 cf 00 00 00       	jmp    100047a0 <firstRun(bool)+0x15cb>
100046d1:	83 7d e4 0b          	cmp    DWORD PTR [ebp-0x1c],0xb
100046d5:	75 0d                	jne    100046e4 <firstRun(bool)+0x150f>
100046d7:	a0 00 00 00 00       	mov    al,ds:0x0	100046d8: R_386_32	installKey
100046dc:	3c 32                	cmp    al,0x32
100046de:	7e 04                	jle    100046e4 <firstRun(bool)+0x150f>
100046e0:	b0 01                	mov    al,0x1
100046e2:	eb 02                	jmp    100046e6 <firstRun(bool)+0x1511>
100046e4:	b0 00                	mov    al,0x0
100046e6:	84 c0                	test   al,al
100046e8:	74 28                	je     10004712 <firstRun(bool)+0x153d>
100046ea:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100046ed:	8d 50 01             	lea    edx,[eax+0x1]
100046f0:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
100046f3:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
100046fb:	a0 00 00 00 00       	mov    al,ds:0x0	100046fc: R_386_32	installKey
10004700:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10004706:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004709:	01 ca                	add    edx,ecx
1000470b:	88 02                	mov    BYTE PTR [edx],al
1000470d:	e9 8e 00 00 00       	jmp    100047a0 <firstRun(bool)+0x15cb>
10004712:	83 7d e4 0e          	cmp    DWORD PTR [ebp-0x1c],0xe
10004716:	75 0d                	jne    10004725 <firstRun(bool)+0x1550>
10004718:	a0 00 00 00 00       	mov    al,ds:0x0	10004719: R_386_32	installKey
1000471d:	3c 35                	cmp    al,0x35
1000471f:	7e 04                	jle    10004725 <firstRun(bool)+0x1550>
10004721:	b0 01                	mov    al,0x1
10004723:	eb 02                	jmp    10004727 <firstRun(bool)+0x1552>
10004725:	b0 00                	mov    al,0x0
10004727:	84 c0                	test   al,al
10004729:	74 25                	je     10004750 <firstRun(bool)+0x157b>
1000472b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000472e:	8d 50 01             	lea    edx,[eax+0x1]
10004731:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10004734:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
1000473c:	a0 00 00 00 00       	mov    al,ds:0x0	1000473d: R_386_32	installKey
10004741:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10004747:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000474a:	01 ca                	add    edx,ecx
1000474c:	88 02                	mov    BYTE PTR [edx],al
1000474e:	eb 50                	jmp    100047a0 <firstRun(bool)+0x15cb>
10004750:	83 7d e4 11          	cmp    DWORD PTR [ebp-0x1c],0x11
10004754:	75 0d                	jne    10004763 <firstRun(bool)+0x158e>
10004756:	a0 00 00 00 00       	mov    al,ds:0x0	10004757: R_386_32	installKey
1000475b:	3c 35                	cmp    al,0x35
1000475d:	7e 04                	jle    10004763 <firstRun(bool)+0x158e>
1000475f:	b0 01                	mov    al,0x1
10004761:	eb 02                	jmp    10004765 <firstRun(bool)+0x1590>
10004763:	b0 00                	mov    al,0x0
10004765:	84 c0                	test   al,al
10004767:	74 25                	je     1000478e <firstRun(bool)+0x15b9>
10004769:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000476c:	8d 50 01             	lea    edx,[eax+0x1]
1000476f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10004772:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
1000477a:	a0 00 00 00 00       	mov    al,ds:0x0	1000477b: R_386_32	installKey
1000477f:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10004785:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004788:	01 ca                	add    edx,ecx
1000478a:	88 02                	mov    BYTE PTR [edx],al
1000478c:	eb 12                	jmp    100047a0 <firstRun(bool)+0x15cb>
1000478e:	a0 00 00 00 00       	mov    al,ds:0x0	1000478f: R_386_32	installKey
10004793:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10004799:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000479c:	01 ca                	add    edx,ecx
1000479e:	88 02                	mov    BYTE PTR [edx],al
100047a0:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100047a3:	83 ec 0c             	sub    esp,0xc
100047a6:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
100047ac:	50                   	push   eax
100047ad:	e8 fc ff ff ff       	call   100047ae <firstRun(bool)+0x15d9>	100047ae: R_386_PC32	strlen
100047b2:	83 c4 10             	add    esp,0x10
100047b5:	89 c2                	mov    edx,eax
100047b7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100047ba:	39 c2                	cmp    edx,eax
100047bc:	77 07                	ja     100047c5 <firstRun(bool)+0x15f0>
100047be:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100047c5:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100047cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100047ce:	01 d0                	add    eax,edx
100047d0:	8a 00                	mov    al,BYTE PTR [eax]
100047d2:	3c 20                	cmp    al,0x20
100047d4:	74 ca                	je     100047a0 <firstRun(bool)+0x15cb>
100047d6:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100047dc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100047df:	01 d0                	add    eax,edx
100047e1:	8a 00                	mov    al,BYTE PTR [eax]
100047e3:	3c 2f                	cmp    al,0x2f
100047e5:	74 b9                	je     100047a0 <firstRun(bool)+0x15cb>
100047e7:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100047ed:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100047f0:	01 d0                	add    eax,edx
100047f2:	8a 00                	mov    al,BYTE PTR [eax]
100047f4:	3c 3a                	cmp    al,0x3a
100047f6:	0f 85 f7 02 00 00    	jne    10004af3 <firstRun(bool)+0x191e>
100047fc:	eb a2                	jmp    100047a0 <firstRun(bool)+0x15cb>
100047fe:	a0 00 00 00 00       	mov    al,ds:0x0	100047ff: R_386_32	installKey
10004803:	3c 0a                	cmp    al,0xa
10004805:	0f 94 c0             	sete   al
10004808:	84 c0                	test   al,al
1000480a:	0f 84 d1 02 00 00    	je     10004ae1 <firstRun(bool)+0x190c>
10004810:	8a 85 40 ff ff ff    	mov    al,BYTE PTR [ebp-0xc0]
10004816:	0f be c0             	movsx  eax,al
10004819:	8d 50 d0             	lea    edx,[eax-0x30]
1000481c:	89 d0                	mov    eax,edx
1000481e:	c1 e0 02             	shl    eax,0x2
10004821:	01 d0                	add    eax,edx
10004823:	01 c0                	add    eax,eax
10004825:	89 c2                	mov    edx,eax
10004827:	8a 85 41 ff ff ff    	mov    al,BYTE PTR [ebp-0xbf]
1000482d:	0f be c0             	movsx  eax,al
10004830:	83 e8 30             	sub    eax,0x30
10004833:	01 d0                	add    eax,edx
10004835:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10004838:	8a 85 43 ff ff ff    	mov    al,BYTE PTR [ebp-0xbd]
1000483e:	0f be c0             	movsx  eax,al
10004841:	8d 50 d0             	lea    edx,[eax-0x30]
10004844:	89 d0                	mov    eax,edx
10004846:	c1 e0 02             	shl    eax,0x2
10004849:	01 d0                	add    eax,edx
1000484b:	01 c0                	add    eax,eax
1000484d:	89 c2                	mov    edx,eax
1000484f:	8a 85 44 ff ff ff    	mov    al,BYTE PTR [ebp-0xbc]
10004855:	0f be c0             	movsx  eax,al
10004858:	83 e8 30             	sub    eax,0x30
1000485b:	01 d0                	add    eax,edx
1000485d:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10004860:	8a 85 46 ff ff ff    	mov    al,BYTE PTR [ebp-0xba]
10004866:	0f be c0             	movsx  eax,al
10004869:	8d 50 d0             	lea    edx,[eax-0x30]
1000486c:	89 d0                	mov    eax,edx
1000486e:	c1 e0 02             	shl    eax,0x2
10004871:	01 d0                	add    eax,edx
10004873:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000487a:	01 d0                	add    eax,edx
1000487c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10004883:	01 d0                	add    eax,edx
10004885:	c1 e0 03             	shl    eax,0x3
10004888:	89 c1                	mov    ecx,eax
1000488a:	8a 85 47 ff ff ff    	mov    al,BYTE PTR [ebp-0xb9]
10004890:	0f be c0             	movsx  eax,al
10004893:	8d 50 d0             	lea    edx,[eax-0x30]
10004896:	89 d0                	mov    eax,edx
10004898:	c1 e0 02             	shl    eax,0x2
1000489b:	01 d0                	add    eax,edx
1000489d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100048a4:	01 d0                	add    eax,edx
100048a6:	c1 e0 02             	shl    eax,0x2
100048a9:	01 c1                	add    ecx,eax
100048ab:	8a 85 48 ff ff ff    	mov    al,BYTE PTR [ebp-0xb8]
100048b1:	0f be c0             	movsx  eax,al
100048b4:	8d 50 d0             	lea    edx,[eax-0x30]
100048b7:	89 d0                	mov    eax,edx
100048b9:	c1 e0 02             	shl    eax,0x2
100048bc:	01 d0                	add    eax,edx
100048be:	01 c0                	add    eax,eax
100048c0:	8d 14 01             	lea    edx,[ecx+eax*1]
100048c3:	8a 85 49 ff ff ff    	mov    al,BYTE PTR [ebp-0xb7]
100048c9:	0f be c0             	movsx  eax,al
100048cc:	83 e8 30             	sub    eax,0x30
100048cf:	01 d0                	add    eax,edx
100048d1:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
100048d4:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
100048da:	0f be c0             	movsx  eax,al
100048dd:	8d 50 d0             	lea    edx,[eax-0x30]
100048e0:	89 d0                	mov    eax,edx
100048e2:	c1 e0 02             	shl    eax,0x2
100048e5:	01 d0                	add    eax,edx
100048e7:	01 c0                	add    eax,eax
100048e9:	89 c2                	mov    edx,eax
100048eb:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
100048f1:	0f be c0             	movsx  eax,al
100048f4:	83 e8 30             	sub    eax,0x30
100048f7:	01 d0                	add    eax,edx
100048f9:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
100048fc:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
10004902:	0f be c0             	movsx  eax,al
10004905:	8d 50 d0             	lea    edx,[eax-0x30]
10004908:	89 d0                	mov    eax,edx
1000490a:	c1 e0 02             	shl    eax,0x2
1000490d:	01 d0                	add    eax,edx
1000490f:	01 c0                	add    eax,eax
10004911:	89 c2                	mov    edx,eax
10004913:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
10004919:	0f be c0             	movsx  eax,al
1000491c:	83 e8 30             	sub    eax,0x30
1000491f:	01 d0                	add    eax,edx
10004921:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10004924:	8a 85 51 ff ff ff    	mov    al,BYTE PTR [ebp-0xaf]
1000492a:	0f be c0             	movsx  eax,al
1000492d:	8d 50 d0             	lea    edx,[eax-0x30]
10004930:	89 d0                	mov    eax,edx
10004932:	c1 e0 02             	shl    eax,0x2
10004935:	01 d0                	add    eax,edx
10004937:	01 c0                	add    eax,eax
10004939:	89 c2                	mov    edx,eax
1000493b:	8a 85 52 ff ff ff    	mov    al,BYTE PTR [ebp-0xae]
10004941:	0f be c0             	movsx  eax,al
10004944:	83 e8 30             	sub    eax,0x30
10004947:	01 d0                	add    eax,edx
10004949:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
1000494c:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
1000494f:	83 e0 03             	and    eax,0x3
10004952:	85 c0                	test   eax,eax
10004954:	75 1f                	jne    10004975 <firstRun(bool)+0x17a0>
10004956:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10004959:	b9 19 00 00 00       	mov    ecx,0x19
1000495e:	99                   	cdq    
1000495f:	f7 f9                	idiv   ecx
10004961:	89 d0                	mov    eax,edx
10004963:	85 c0                	test   eax,eax
10004965:	75 0a                	jne    10004971 <firstRun(bool)+0x179c>
10004967:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
1000496a:	83 e0 0f             	and    eax,0xf
1000496d:	85 c0                	test   eax,eax
1000496f:	75 04                	jne    10004975 <firstRun(bool)+0x17a0>
10004971:	b0 01                	mov    al,0x1
10004973:	eb 02                	jmp    10004977 <firstRun(bool)+0x17a2>
10004975:	b0 00                	mov    al,0x0
10004977:	88 45 93             	mov    BYTE PTR [ebp-0x6d],al
1000497a:	83 7d a8 1f          	cmp    DWORD PTR [ebp-0x58],0x1f
1000497e:	7e 0c                	jle    1000498c <firstRun(bool)+0x17b7>
10004980:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004987:	e9 67 01 00 00       	jmp    10004af3 <firstRun(bool)+0x191e>
1000498c:	83 7d a8 1e          	cmp    DWORD PTR [ebp-0x58],0x1e
10004990:	7e 2a                	jle    100049bc <firstRun(bool)+0x17e7>
10004992:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
10004996:	74 18                	je     100049b0 <firstRun(bool)+0x17db>
10004998:	83 7d a4 04          	cmp    DWORD PTR [ebp-0x5c],0x4
1000499c:	74 12                	je     100049b0 <firstRun(bool)+0x17db>
1000499e:	83 7d a4 06          	cmp    DWORD PTR [ebp-0x5c],0x6
100049a2:	74 0c                	je     100049b0 <firstRun(bool)+0x17db>
100049a4:	83 7d a4 09          	cmp    DWORD PTR [ebp-0x5c],0x9
100049a8:	74 06                	je     100049b0 <firstRun(bool)+0x17db>
100049aa:	83 7d a4 0b          	cmp    DWORD PTR [ebp-0x5c],0xb
100049ae:	75 0c                	jne    100049bc <firstRun(bool)+0x17e7>
100049b0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100049b7:	e9 37 01 00 00       	jmp    10004af3 <firstRun(bool)+0x191e>
100049bc:	83 7d a8 1d          	cmp    DWORD PTR [ebp-0x58],0x1d
100049c0:	75 1c                	jne    100049de <firstRun(bool)+0x1809>
100049c2:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
100049c6:	75 16                	jne    100049de <firstRun(bool)+0x1809>
100049c8:	8a 45 93             	mov    al,BYTE PTR [ebp-0x6d]
100049cb:	83 f0 01             	xor    eax,0x1
100049ce:	84 c0                	test   al,al
100049d0:	74 0c                	je     100049de <firstRun(bool)+0x1809>
100049d2:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100049d9:	e9 15 01 00 00       	jmp    10004af3 <firstRun(bool)+0x191e>
100049de:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
100049e2:	75 0c                	jne    100049f0 <firstRun(bool)+0x181b>
100049e4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100049eb:	e9 03 01 00 00       	jmp    10004af3 <firstRun(bool)+0x191e>
100049f0:	83 7d a4 0c          	cmp    DWORD PTR [ebp-0x5c],0xc
100049f4:	7f 06                	jg     100049fc <firstRun(bool)+0x1827>
100049f6:	83 7d a4 00          	cmp    DWORD PTR [ebp-0x5c],0x0
100049fa:	75 0c                	jne    10004a08 <firstRun(bool)+0x1833>
100049fc:	c7 45 e4 03 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x3
10004a03:	e9 eb 00 00 00       	jmp    10004af3 <firstRun(bool)+0x191e>
10004a08:	81 7d a0 b7 0b 00 00 	cmp    DWORD PTR [ebp-0x60],0xbb7
10004a0f:	7f 09                	jg     10004a1a <firstRun(bool)+0x1845>
10004a11:	81 7d a0 b1 07 00 00 	cmp    DWORD PTR [ebp-0x60],0x7b1
10004a18:	7f 0c                	jg     10004a26 <firstRun(bool)+0x1851>
10004a1a:	c7 45 e4 06 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x6
10004a21:	e9 cd 00 00 00       	jmp    10004af3 <firstRun(bool)+0x191e>
10004a26:	83 7d 9c 17          	cmp    DWORD PTR [ebp-0x64],0x17
10004a2a:	7e 0c                	jle    10004a38 <firstRun(bool)+0x1863>
10004a2c:	c7 45 e4 0b 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xb
10004a33:	e9 bb 00 00 00       	jmp    10004af3 <firstRun(bool)+0x191e>
10004a38:	83 7d 98 3b          	cmp    DWORD PTR [ebp-0x68],0x3b
10004a3c:	7e 0c                	jle    10004a4a <firstRun(bool)+0x1875>
10004a3e:	c7 45 e4 0e 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xe
10004a45:	e9 a9 00 00 00       	jmp    10004af3 <firstRun(bool)+0x191e>
10004a4a:	83 7d 94 3b          	cmp    DWORD PTR [ebp-0x6c],0x3b
10004a4e:	7e 0c                	jle    10004a5c <firstRun(bool)+0x1887>
10004a50:	c7 45 e4 11 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x11
10004a57:	e9 97 00 00 00       	jmp    10004af3 <firstRun(bool)+0x191e>
10004a5c:	8b 45 98             	mov    eax,DWORD PTR [ebp-0x68]
10004a5f:	88 85 d9 fe ff ff    	mov    BYTE PTR [ebp-0x127],al
10004a65:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
10004a68:	88 85 da fe ff ff    	mov    BYTE PTR [ebp-0x126],al
10004a6e:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
10004a71:	88 85 d8 fe ff ff    	mov    BYTE PTR [ebp-0x128],al
10004a77:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10004a7a:	88 85 d4 fe ff ff    	mov    BYTE PTR [ebp-0x12c],al
10004a80:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
10004a83:	88 85 d5 fe ff ff    	mov    BYTE PTR [ebp-0x12b],al
10004a89:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10004a8c:	66 89 85 d6 fe ff ff 	mov    WORD PTR [ebp-0x12a],ax
10004a93:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a94: R_386_32	Krnl::computer
10004a98:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
10004a9e:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a9f: R_386_32	Krnl::computer
10004aa3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004aa9:	8b 00                	mov    eax,DWORD PTR [eax]
10004aab:	83 c0 30             	add    eax,0x30
10004aae:	8b 00                	mov    eax,DWORD PTR [eax]
10004ab0:	83 ec 04             	sub    esp,0x4
10004ab3:	ff b5 d8 fe ff ff    	push   DWORD PTR [ebp-0x128]
10004ab9:	ff b5 d4 fe ff ff    	push   DWORD PTR [ebp-0x12c]
10004abf:	52                   	push   edx
10004ac0:	ff d0                	call   eax
10004ac2:	83 c4 10             	add    esp,0x10
10004ac5:	90                   	nop
10004ac6:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004ac8: R_386_32	installKey
10004acd:	83 ec 08             	sub    esp,0x8
10004ad0:	6a 00                	push   0x0
10004ad2:	68 a0 0f 00 00       	push   0xfa0
10004ad7:	e8 fc ff ff ff       	call   10004ad8 <firstRun(bool)+0x1903>	10004ad8: R_386_PC32	milliTenthSleep(unsigned long long)
10004adc:	83 c4 10             	add    esp,0x10
10004adf:	eb 31                	jmp    10004b12 <firstRun(bool)+0x193d>
10004ae1:	a0 00 00 00 00       	mov    al,ds:0x0	10004ae2: R_386_32	installKey
10004ae6:	3c 1b                	cmp    al,0x1b
10004ae8:	0f 94 c0             	sete   al
10004aeb:	84 c0                	test   al,al
10004aed:	0f 85 a8 e8 ff ff    	jne    1000339b <firstRun(bool)+0x1c6>
10004af3:	83 ec 08             	sub    esp,0x8
10004af6:	6a 00                	push   0x0
10004af8:	68 f4 01 00 00       	push   0x1f4
10004afd:	e8 fc ff ff ff       	call   10004afe <firstRun(bool)+0x1929>	10004afe: R_386_PC32	milliTenthSleep(unsigned long long)
10004b02:	83 c4 10             	add    esp,0x10
10004b05:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004b07: R_386_32	installKey
10004b0c:	e9 af f7 ff ff       	jmp    100042c0 <firstRun(bool)+0x10eb>
10004b11:	90                   	nop
10004b12:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004b14: R_386_32	installKey
10004b19:	a0 00 00 00 00       	mov    al,ds:0x0	10004b1a: R_386_32	firstTimeEnteringTimezone
10004b1e:	84 c0                	test   al,al
10004b20:	74 18                	je     10004b3a <firstRun(bool)+0x1965>
10004b22:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004b24: R_386_32	firstTimeEnteringTimezone
10004b29:	c7 05 00 00 00 00 3b 00 00 00 	mov    DWORD PTR ds:0x0,0x3b	10004b2b: R_386_32	tzsel
10004b33:	c7 45 dc 30 00 00 00 	mov    DWORD PTR [ebp-0x24],0x30
10004b3a:	e8 fc ff ff ff       	call   10004b3b <firstRun(bool)+0x1966>	10004b3b: R_386_PC32	drawBootScreen()
10004b3f:	83 ec 0c             	sub    esp,0xc
10004b42:	68 e3 b3 00 10       	push   0x1000b3e3	10004b43: R_386_32	.text
10004b47:	6a 14                	push   0x14
10004b49:	6a 3c                	push   0x3c
10004b4b:	6a 01                	push   0x1
10004b4d:	6a 12                	push   0x12
10004b4f:	e8 fc ff ff ff       	call   10004b50 <firstRun(bool)+0x197b>	10004b50: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004b54:	83 c4 20             	add    esp,0x20
10004b57:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b58: R_386_32	term
10004b5c:	83 ec 04             	sub    esp,0x4
10004b5f:	6a 04                	push   0x4
10004b61:	6a 14                	push   0x14
10004b63:	50                   	push   eax
10004b64:	e8 fc ff ff ff       	call   10004b65 <firstRun(bool)+0x1990>	10004b65: R_386_PC32	VgaText::setCursor(int, int)
10004b69:	83 c4 10             	add    esp,0x10
10004b6c:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b6d: R_386_32	term
10004b71:	83 ec 08             	sub    esp,0x8
10004b74:	68 70 b4 00 10       	push   0x1000b470	10004b75: R_386_32	.text
10004b79:	50                   	push   eax
10004b7a:	e8 fc ff ff ff       	call   10004b7b <firstRun(bool)+0x19a6>	10004b7b: R_386_PC32	VgaText::puts(char const*)
10004b7f:	83 c4 10             	add    esp,0x10
10004b82:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b83: R_386_32	term
10004b87:	83 ec 04             	sub    esp,0x4
10004b8a:	6a 18                	push   0x18
10004b8c:	6a 11                	push   0x11
10004b8e:	50                   	push   eax
10004b8f:	e8 fc ff ff ff       	call   10004b90 <firstRun(bool)+0x19bb>	10004b90: R_386_PC32	VgaText::setCursor(int, int)
10004b94:	83 c4 10             	add    esp,0x10
10004b97:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b98: R_386_32	term
10004b9c:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10004b9e: R_386_32	safemode
10004ba2:	84 d2                	test   dl,dl
10004ba4:	74 07                	je     10004bad <firstRun(bool)+0x19d8>
10004ba6:	b9 00 00 00 00       	mov    ecx,0x0
10004bab:	eb 05                	jmp    10004bb2 <firstRun(bool)+0x19dd>
10004bad:	b9 0b 00 00 00       	mov    ecx,0xb
10004bb2:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10004bb4: R_386_32	safemode
10004bb8:	84 d2                	test   dl,dl
10004bba:	74 07                	je     10004bc3 <firstRun(bool)+0x19ee>
10004bbc:	ba 0f 00 00 00       	mov    edx,0xf
10004bc1:	eb 05                	jmp    10004bc8 <firstRun(bool)+0x19f3>
10004bc3:	ba 03 00 00 00       	mov    edx,0x3
10004bc8:	51                   	push   ecx
10004bc9:	52                   	push   edx
10004bca:	68 5a b4 00 10       	push   0x1000b45a	10004bcb: R_386_32	.text
10004bcf:	50                   	push   eax
10004bd0:	e8 fc ff ff ff       	call   10004bd1 <firstRun(bool)+0x19fc>	10004bd1: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004bd5:	83 c4 10             	add    esp,0x10
10004bd8:	e8 fc ff ff ff       	call   10004bd9 <firstRun(bool)+0x1a04>	10004bd9: R_386_PC32	loadTimezoneStrings()
10004bdd:	89 45 8c             	mov    DWORD PTR [ebp-0x74],eax
10004be0:	b8 d2 00 00 00       	mov    eax,0xd2
10004be5:	99                   	cdq    
10004be6:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
10004be9:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
10004bec:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
10004bf3:	83 7d cc 0d          	cmp    DWORD PTR [ebp-0x34],0xd
10004bf7:	7f 32                	jg     10004c2b <firstRun(bool)+0x1a56>
10004bf9:	a1 00 00 00 00       	mov    eax,ds:0x0	10004bfa: R_386_32	term
10004bfe:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10004c01:	83 c2 07             	add    edx,0x7
10004c04:	83 ec 04             	sub    esp,0x4
10004c07:	52                   	push   edx
10004c08:	6a 4b                	push   0x4b
10004c0a:	50                   	push   eax
10004c0b:	e8 fc ff ff ff       	call   10004c0c <firstRun(bool)+0x1a37>	10004c0c: R_386_PC32	VgaText::setCursor(int, int)
10004c10:	83 c4 10             	add    esp,0x10
10004c13:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c14: R_386_32	term
10004c18:	83 ec 08             	sub    esp,0x8
10004c1b:	6a 20                	push   0x20
10004c1d:	50                   	push   eax
10004c1e:	e8 fc ff ff ff       	call   10004c1f <firstRun(bool)+0x1a4a>	10004c1f: R_386_PC32	VgaText::putchar(char)
10004c23:	83 c4 10             	add    esp,0x10
10004c26:	ff 45 cc             	inc    DWORD PTR [ebp-0x34]
10004c29:	eb c8                	jmp    10004bf3 <firstRun(bool)+0x1a1e>
10004c2b:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
10004c32:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10004c35:	3b 45 88             	cmp    eax,DWORD PTR [ebp-0x78]
10004c38:	7d 48                	jge    10004c82 <firstRun(bool)+0x1aad>
10004c3a:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004c3c: R_386_32	term
10004c40:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10004c43:	8d 58 07             	lea    ebx,[eax+0x7]
10004c46:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10004c49:	89 d0                	mov    eax,edx
10004c4b:	01 c0                	add    eax,eax
10004c4d:	01 d0                	add    eax,edx
10004c4f:	01 c0                	add    eax,eax
10004c51:	01 d0                	add    eax,edx
10004c53:	01 c0                	add    eax,eax
10004c55:	99                   	cdq    
10004c56:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
10004c59:	01 d8                	add    eax,ebx
10004c5b:	83 ec 04             	sub    esp,0x4
10004c5e:	50                   	push   eax
10004c5f:	6a 4b                	push   0x4b
10004c61:	51                   	push   ecx
10004c62:	e8 fc ff ff ff       	call   10004c63 <firstRun(bool)+0x1a8e>	10004c63: R_386_PC32	VgaText::setCursor(int, int)
10004c67:	83 c4 10             	add    esp,0x10
10004c6a:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c6b: R_386_32	term
10004c6f:	83 ec 08             	sub    esp,0x8
10004c72:	6a db                	push   0xffffffdb
10004c74:	50                   	push   eax
10004c75:	e8 fc ff ff ff       	call   10004c76 <firstRun(bool)+0x1aa1>	10004c76: R_386_PC32	VgaText::putchar(char)
10004c7a:	83 c4 10             	add    esp,0x10
10004c7d:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
10004c80:	eb b0                	jmp    10004c32 <firstRun(bool)+0x1a5d>
10004c82:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c83: R_386_32	term
10004c87:	83 ec 04             	sub    esp,0x4
10004c8a:	6a 06                	push   0x6
10004c8c:	6a 4b                	push   0x4b
10004c8e:	50                   	push   eax
10004c8f:	e8 fc ff ff ff       	call   10004c90 <firstRun(bool)+0x1abb>	10004c90: R_386_PC32	VgaText::setCursor(int, int)
10004c94:	83 c4 10             	add    esp,0x10
10004c97:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c98: R_386_32	term
10004c9c:	83 ec 08             	sub    esp,0x8
10004c9f:	6a 1e                	push   0x1e
10004ca1:	50                   	push   eax
10004ca2:	e8 fc ff ff ff       	call   10004ca3 <firstRun(bool)+0x1ace>	10004ca3: R_386_PC32	VgaText::putchar(char)
10004ca7:	83 c4 10             	add    esp,0x10
10004caa:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cab: R_386_32	term
10004caf:	83 ec 04             	sub    esp,0x4
10004cb2:	6a 14                	push   0x14
10004cb4:	6a 4b                	push   0x4b
10004cb6:	50                   	push   eax
10004cb7:	e8 fc ff ff ff       	call   10004cb8 <firstRun(bool)+0x1ae3>	10004cb8: R_386_PC32	VgaText::setCursor(int, int)
10004cbc:	83 c4 10             	add    esp,0x10
10004cbf:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cc0: R_386_32	term
10004cc4:	83 ec 08             	sub    esp,0x8
10004cc7:	6a 1f                	push   0x1f
10004cc9:	50                   	push   eax
10004cca:	e8 fc ff ff ff       	call   10004ccb <firstRun(bool)+0x1af6>	10004ccb: R_386_PC32	VgaText::putchar(char)
10004ccf:	83 c4 10             	add    esp,0x10
10004cd2:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
10004cd9:	83 7d c4 0e          	cmp    DWORD PTR [ebp-0x3c],0xe
10004cdd:	7f 7e                	jg     10004d5d <firstRun(bool)+0x1b88>
10004cdf:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ce0: R_386_32	term
10004ce4:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10004ce7:	83 c2 06             	add    edx,0x6
10004cea:	83 ec 04             	sub    esp,0x4
10004ced:	52                   	push   edx
10004cee:	6a 14                	push   0x14
10004cf0:	50                   	push   eax
10004cf1:	e8 fc ff ff ff       	call   10004cf2 <firstRun(bool)+0x1b1d>	10004cf2: R_386_PC32	VgaText::setCursor(int, int)
10004cf6:	83 c4 10             	add    esp,0x10
10004cf9:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cfa: R_386_32	term
10004cfe:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10004d01:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10004d04:	01 d1                	add    ecx,edx
10004d06:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004d08: R_386_32	tzsel
10004d0c:	39 d1                	cmp    ecx,edx
10004d0e:	75 07                	jne    10004d17 <firstRun(bool)+0x1b42>
10004d10:	bb 00 00 00 00       	mov    ebx,0x0
10004d15:	eb 05                	jmp    10004d1c <firstRun(bool)+0x1b47>
10004d17:	bb 0f 00 00 00       	mov    ebx,0xf
10004d1c:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10004d1f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10004d22:	01 d1                	add    ecx,edx
10004d24:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004d26: R_386_32	tzsel
10004d2a:	39 d1                	cmp    ecx,edx
10004d2c:	75 07                	jne    10004d35 <firstRun(bool)+0x1b60>
10004d2e:	b9 0f 00 00 00       	mov    ecx,0xf
10004d33:	eb 05                	jmp    10004d3a <firstRun(bool)+0x1b65>
10004d35:	b9 00 00 00 00       	mov    ecx,0x0
10004d3a:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
10004d3d:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10004d40:	01 f2                	add    edx,esi
10004d42:	8b 14 95 00 00 00 00 	mov    edx,DWORD PTR [edx*4+0x0]	10004d45: R_386_32	timezoneStrings
10004d49:	53                   	push   ebx
10004d4a:	51                   	push   ecx
10004d4b:	52                   	push   edx
10004d4c:	50                   	push   eax
10004d4d:	e8 fc ff ff ff       	call   10004d4e <firstRun(bool)+0x1b79>	10004d4e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004d52:	83 c4 10             	add    esp,0x10
10004d55:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
10004d58:	e9 7c ff ff ff       	jmp    10004cd9 <firstRun(bool)+0x1b04>
10004d5d:	a0 00 00 00 00       	mov    al,ds:0x0	10004d5e: R_386_32	installKey
10004d62:	84 c0                	test   al,al
10004d64:	0f 94 c0             	sete   al
10004d67:	84 c0                	test   al,al
10004d69:	74 02                	je     10004d6d <firstRun(bool)+0x1b98>
10004d6b:	eb f0                	jmp    10004d5d <firstRun(bool)+0x1b88>
10004d6d:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d6e: R_386_32	term
10004d72:	05 82 00 00 00       	add    eax,0x82
10004d77:	83 ec 04             	sub    esp,0x4
10004d7a:	6a 04                	push   0x4
10004d7c:	6a 00                	push   0x0
10004d7e:	50                   	push   eax
10004d7f:	e8 fc ff ff ff       	call   10004d80 <firstRun(bool)+0x1bab>	10004d80: R_386_PC32	memset
10004d84:	83 c4 10             	add    esp,0x10
10004d87:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d88: R_386_32	term
10004d8c:	05 02 01 00 00       	add    eax,0x102
10004d91:	83 ec 04             	sub    esp,0x4
10004d94:	6a 04                	push   0x4
10004d96:	6a 00                	push   0x0
10004d98:	50                   	push   eax
10004d99:	e8 fc ff ff ff       	call   10004d9a <firstRun(bool)+0x1bc5>	10004d9a: R_386_PC32	memset
10004d9e:	83 c4 10             	add    esp,0x10
10004da1:	a0 00 00 00 00       	mov    al,ds:0x0	10004da2: R_386_32	installKey
10004da6:	3c 01                	cmp    al,0x1
10004da8:	0f 94 c0             	sete   al
10004dab:	84 c0                	test   al,al
10004dad:	74 41                	je     10004df0 <firstRun(bool)+0x1c1b>
10004daf:	a1 00 00 00 00       	mov    eax,ds:0x0	10004db0: R_386_32	tzsel
10004db4:	48                   	dec    eax
10004db5:	a3 00 00 00 00       	mov    ds:0x0,eax	10004db6: R_386_32	tzsel
10004dba:	a1 00 00 00 00       	mov    eax,ds:0x0	10004dbb: R_386_32	tzsel
10004dbf:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
10004dc2:	83 f8 04             	cmp    eax,0x4
10004dc5:	7f 03                	jg     10004dca <firstRun(bool)+0x1bf5>
10004dc7:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10004dca:	a1 00 00 00 00       	mov    eax,ds:0x0	10004dcb: R_386_32	tzsel
10004dcf:	85 c0                	test   eax,eax
10004dd1:	79 0a                	jns    10004ddd <firstRun(bool)+0x1c08>
10004dd3:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004dd5: R_386_32	tzsel
10004ddd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10004de1:	0f 89 82 00 00 00    	jns    10004e69 <firstRun(bool)+0x1c94>
10004de7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10004dee:	eb 79                	jmp    10004e69 <firstRun(bool)+0x1c94>
10004df0:	a0 00 00 00 00       	mov    al,ds:0x0	10004df1: R_386_32	installKey
10004df5:	3c 02                	cmp    al,0x2
10004df7:	0f 94 c0             	sete   al
10004dfa:	84 c0                	test   al,al
10004dfc:	74 4b                	je     10004e49 <firstRun(bool)+0x1c74>
10004dfe:	a1 00 00 00 00       	mov    eax,ds:0x0	10004dff: R_386_32	tzsel
10004e03:	40                   	inc    eax
10004e04:	a3 00 00 00 00       	mov    ds:0x0,eax	10004e05: R_386_32	tzsel
10004e09:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e0a: R_386_32	tzsel
10004e0e:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
10004e11:	83 f8 0a             	cmp    eax,0xa
10004e14:	7e 03                	jle    10004e19 <firstRun(bool)+0x1c44>
10004e16:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10004e19:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004e1c:	8d 50 ff             	lea    edx,[eax-0x1]
10004e1f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e20: R_386_32	tzsel
10004e24:	39 c2                	cmp    edx,eax
10004e26:	7f 0b                	jg     10004e33 <firstRun(bool)+0x1c5e>
10004e28:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004e2b:	83 e8 02             	sub    eax,0x2
10004e2e:	a3 00 00 00 00       	mov    ds:0x0,eax	10004e2f: R_386_32	tzsel
10004e33:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004e36:	83 e8 0f             	sub    eax,0xf
10004e39:	39 45 dc             	cmp    DWORD PTR [ebp-0x24],eax
10004e3c:	7c 2b                	jl     10004e69 <firstRun(bool)+0x1c94>
10004e3e:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004e41:	83 e8 10             	sub    eax,0x10
10004e44:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10004e47:	eb 20                	jmp    10004e69 <firstRun(bool)+0x1c94>
10004e49:	a0 00 00 00 00       	mov    al,ds:0x0	10004e4a: R_386_32	installKey
10004e4e:	3c 0a                	cmp    al,0xa
10004e50:	0f 94 c0             	sete   al
10004e53:	84 c0                	test   al,al
10004e55:	75 30                	jne    10004e87 <firstRun(bool)+0x1cb2>
10004e57:	a0 00 00 00 00       	mov    al,ds:0x0	10004e58: R_386_32	installKey
10004e5c:	3c 1b                	cmp    al,0x1b
10004e5e:	0f 94 c0             	sete   al
10004e61:	84 c0                	test   al,al
10004e63:	0f 85 31 f0 ff ff    	jne    10003e9a <firstRun(bool)+0xcc5>
10004e69:	83 ec 08             	sub    esp,0x8
10004e6c:	6a 00                	push   0x0
10004e6e:	68 f4 01 00 00       	push   0x1f4
10004e73:	e8 fc ff ff ff       	call   10004e74 <firstRun(bool)+0x1c9f>	10004e74: R_386_PC32	milliTenthSleep(unsigned long long)
10004e78:	83 c4 10             	add    esp,0x10
10004e7b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004e7d: R_386_32	installKey
10004e82:	e9 65 fd ff ff       	jmp    10004bec <firstRun(bool)+0x1a17>
10004e87:	90                   	nop
10004e88:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004e8a: R_386_32	installKey
10004e8f:	83 ec 08             	sub    esp,0x8
10004e92:	6a 00                	push   0x0
10004e94:	68 a0 0f 00 00       	push   0xfa0
10004e99:	e8 fc ff ff ff       	call   10004e9a <firstRun(bool)+0x1cc5>	10004e9a: R_386_PC32	milliTenthSleep(unsigned long long)
10004e9e:	83 c4 10             	add    esp,0x10
10004ea1:	eb 01                	jmp    10004ea4 <firstRun(bool)+0x1ccf>
10004ea3:	90                   	nop
10004ea4:	e8 fc ff ff ff       	call   10004ea5 <firstRun(bool)+0x1cd0>	10004ea5: R_386_PC32	drawBootScreen()
10004ea9:	83 ec 08             	sub    esp,0x8
10004eac:	6a 00                	push   0x0
10004eae:	68 58 1b 00 00       	push   0x1b58
10004eb3:	e8 fc ff ff ff       	call   10004eb4 <firstRun(bool)+0x1cdf>	10004eb4: R_386_PC32	milliTenthSleep(unsigned long long)
10004eb8:	83 c4 10             	add    esp,0x10
10004ebb:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004ebd: R_386_32	installKey
10004ec2:	e8 fc ff ff ff       	call   10004ec3 <firstRun(bool)+0x1cee>	10004ec3: R_386_PC32	drawBootScreen()
10004ec7:	83 ec 0c             	sub    esp,0xc
10004eca:	68 a2 b4 00 10       	push   0x1000b4a2	10004ecb: R_386_32	.text
10004ecf:	6a 10                	push   0x10
10004ed1:	6a 37                	push   0x37
10004ed3:	6a 03                	push   0x3
10004ed5:	6a 14                	push   0x14
10004ed7:	e8 fc ff ff ff       	call   10004ed8 <firstRun(bool)+0x1d03>	10004ed8: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004edc:	83 c4 20             	add    esp,0x20
10004edf:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ee0: R_386_32	term
10004ee4:	83 ec 04             	sub    esp,0x4
10004ee7:	6a 06                	push   0x6
10004ee9:	6a 16                	push   0x16
10004eeb:	50                   	push   eax
10004eec:	e8 fc ff ff ff       	call   10004eed <firstRun(bool)+0x1d18>	10004eed: R_386_PC32	VgaText::setCursor(int, int)
10004ef1:	83 c4 10             	add    esp,0x10
10004ef4:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ef5: R_386_32	term
10004ef9:	83 ec 08             	sub    esp,0x8
10004efc:	68 b4 b4 00 10       	push   0x1000b4b4	10004efd: R_386_32	.text
10004f01:	50                   	push   eax
10004f02:	e8 fc ff ff ff       	call   10004f03 <firstRun(bool)+0x1d2e>	10004f03: R_386_PC32	VgaText::puts(char const*)
10004f07:	83 c4 10             	add    esp,0x10
10004f0a:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f0b: R_386_32	term
10004f0f:	83 ec 04             	sub    esp,0x4
10004f12:	6a 07                	push   0x7
10004f14:	6a 16                	push   0x16
10004f16:	50                   	push   eax
10004f17:	e8 fc ff ff ff       	call   10004f18 <firstRun(bool)+0x1d43>	10004f18: R_386_PC32	VgaText::setCursor(int, int)
10004f1c:	83 c4 10             	add    esp,0x10
10004f1f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f20: R_386_32	term
10004f24:	83 ec 08             	sub    esp,0x8
10004f27:	68 e8 b4 00 10       	push   0x1000b4e8	10004f28: R_386_32	.text
10004f2c:	50                   	push   eax
10004f2d:	e8 fc ff ff ff       	call   10004f2e <firstRun(bool)+0x1d59>	10004f2e: R_386_PC32	VgaText::puts(char const*)
10004f32:	83 c4 10             	add    esp,0x10
10004f35:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f36: R_386_32	term
10004f3a:	83 ec 04             	sub    esp,0x4
10004f3d:	6a 18                	push   0x18
10004f3f:	6a 11                	push   0x11
10004f41:	50                   	push   eax
10004f42:	e8 fc ff ff ff       	call   10004f43 <firstRun(bool)+0x1d6e>	10004f43: R_386_PC32	VgaText::setCursor(int, int)
10004f47:	83 c4 10             	add    esp,0x10
10004f4a:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f4b: R_386_32	term
10004f4f:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10004f51: R_386_32	safemode
10004f55:	84 d2                	test   dl,dl
10004f57:	74 07                	je     10004f60 <firstRun(bool)+0x1d8b>
10004f59:	b9 00 00 00 00       	mov    ecx,0x0
10004f5e:	eb 05                	jmp    10004f65 <firstRun(bool)+0x1d90>
10004f60:	b9 0b 00 00 00       	mov    ecx,0xb
10004f65:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10004f67: R_386_32	safemode
10004f6b:	84 d2                	test   dl,dl
10004f6d:	74 07                	je     10004f76 <firstRun(bool)+0x1da1>
10004f6f:	ba 0f 00 00 00       	mov    edx,0xf
10004f74:	eb 05                	jmp    10004f7b <firstRun(bool)+0x1da6>
10004f76:	ba 03 00 00 00       	mov    edx,0x3
10004f7b:	51                   	push   ecx
10004f7c:	52                   	push   edx
10004f7d:	68 5a b4 00 10       	push   0x1000b45a	10004f7e: R_386_32	.text
10004f82:	50                   	push   eax
10004f83:	e8 fc ff ff ff       	call   10004f84 <firstRun(bool)+0x1daf>	10004f84: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004f88:	83 c4 10             	add    esp,0x10
10004f8b:	c7 45 8c 03 00 00 00 	mov    DWORD PTR [ebp-0x74],0x3
10004f92:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10004f98:	bb 6c b7 00 10       	mov    ebx,0x1000b76c	10004f99: R_386_32	.text
10004f9d:	ba 03 00 00 00       	mov    edx,0x3
10004fa2:	89 c7                	mov    edi,eax
10004fa4:	89 de                	mov    esi,ebx
10004fa6:	89 d1                	mov    ecx,edx
10004fa8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004faa:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
10004fb1:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10004fb4:	3b 45 8c             	cmp    eax,DWORD PTR [ebp-0x74]
10004fb7:	7d 68                	jge    10005021 <firstRun(bool)+0x1e4c>
10004fb9:	a1 00 00 00 00       	mov    eax,ds:0x0	10004fba: R_386_32	term
10004fbe:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
10004fc1:	83 c2 09             	add    edx,0x9
10004fc4:	83 ec 04             	sub    esp,0x4
10004fc7:	52                   	push   edx
10004fc8:	6a 16                	push   0x16
10004fca:	50                   	push   eax
10004fcb:	e8 fc ff ff ff       	call   10004fcc <firstRun(bool)+0x1df7>	10004fcc: R_386_PC32	VgaText::setCursor(int, int)
10004fd0:	83 c4 10             	add    esp,0x10
10004fd3:	a1 00 00 00 00       	mov    eax,ds:0x0	10004fd4: R_386_32	term
10004fd8:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004fda: R_386_32	modesel
10004fde:	39 55 c0             	cmp    DWORD PTR [ebp-0x40],edx
10004fe1:	75 07                	jne    10004fea <firstRun(bool)+0x1e15>
10004fe3:	bb 00 00 00 00       	mov    ebx,0x0
10004fe8:	eb 05                	jmp    10004fef <firstRun(bool)+0x1e1a>
10004fea:	bb 0f 00 00 00       	mov    ebx,0xf
10004fef:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004ff1: R_386_32	modesel
10004ff5:	39 55 c0             	cmp    DWORD PTR [ebp-0x40],edx
10004ff8:	75 07                	jne    10005001 <firstRun(bool)+0x1e2c>
10004ffa:	b9 0f 00 00 00       	mov    ecx,0xf
10004fff:	eb 05                	jmp    10005006 <firstRun(bool)+0x1e31>
10005001:	b9 00 00 00 00       	mov    ecx,0x0
10005006:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
10005009:	8b 94 95 c8 fe ff ff 	mov    edx,DWORD PTR [ebp+edx*4-0x138]
10005010:	53                   	push   ebx
10005011:	51                   	push   ecx
10005012:	52                   	push   edx
10005013:	50                   	push   eax
10005014:	e8 fc ff ff ff       	call   10005015 <firstRun(bool)+0x1e40>	10005015: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10005019:	83 c4 10             	add    esp,0x10
1000501c:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
1000501f:	eb 90                	jmp    10004fb1 <firstRun(bool)+0x1ddc>
10005021:	a0 00 00 00 00       	mov    al,ds:0x0	10005022: R_386_32	installKey
10005026:	84 c0                	test   al,al
10005028:	0f 94 c0             	sete   al
1000502b:	84 c0                	test   al,al
1000502d:	74 02                	je     10005031 <firstRun(bool)+0x1e5c>
1000502f:	eb f0                	jmp    10005021 <firstRun(bool)+0x1e4c>
10005031:	a1 00 00 00 00       	mov    eax,ds:0x0	10005032: R_386_32	term
10005036:	05 82 00 00 00       	add    eax,0x82
1000503b:	83 ec 04             	sub    esp,0x4
1000503e:	6a 04                	push   0x4
10005040:	6a 00                	push   0x0
10005042:	50                   	push   eax
10005043:	e8 fc ff ff ff       	call   10005044 <firstRun(bool)+0x1e6f>	10005044: R_386_PC32	memset
10005048:	83 c4 10             	add    esp,0x10
1000504b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000504c: R_386_32	term
10005050:	05 02 01 00 00       	add    eax,0x102
10005055:	83 ec 04             	sub    esp,0x4
10005058:	6a 04                	push   0x4
1000505a:	6a 00                	push   0x0
1000505c:	50                   	push   eax
1000505d:	e8 fc ff ff ff       	call   1000505e <firstRun(bool)+0x1e89>	1000505e: R_386_PC32	memset
10005062:	83 c4 10             	add    esp,0x10
10005065:	a0 00 00 00 00       	mov    al,ds:0x0	10005066: R_386_32	installKey
1000506a:	3c 01                	cmp    al,0x1
1000506c:	0f 94 c0             	sete   al
1000506f:	84 c0                	test   al,al
10005071:	74 20                	je     10005093 <firstRun(bool)+0x1ebe>
10005073:	a1 00 00 00 00       	mov    eax,ds:0x0	10005074: R_386_32	modesel
10005078:	48                   	dec    eax
10005079:	a3 00 00 00 00       	mov    ds:0x0,eax	1000507a: R_386_32	modesel
1000507e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000507f: R_386_32	modesel
10005083:	85 c0                	test   eax,eax
10005085:	79 5a                	jns    100050e1 <firstRun(bool)+0x1f0c>
10005087:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005089: R_386_32	modesel
10005091:	eb 4e                	jmp    100050e1 <firstRun(bool)+0x1f0c>
10005093:	a0 00 00 00 00       	mov    al,ds:0x0	10005094: R_386_32	installKey
10005098:	3c 02                	cmp    al,0x2
1000509a:	0f 94 c0             	sete   al
1000509d:	84 c0                	test   al,al
1000509f:	74 20                	je     100050c1 <firstRun(bool)+0x1eec>
100050a1:	a1 00 00 00 00       	mov    eax,ds:0x0	100050a2: R_386_32	modesel
100050a6:	40                   	inc    eax
100050a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100050a8: R_386_32	modesel
100050ac:	a1 00 00 00 00       	mov    eax,ds:0x0	100050ad: R_386_32	modesel
100050b1:	39 45 8c             	cmp    DWORD PTR [ebp-0x74],eax
100050b4:	7f 2b                	jg     100050e1 <firstRun(bool)+0x1f0c>
100050b6:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100050b9:	48                   	dec    eax
100050ba:	a3 00 00 00 00       	mov    ds:0x0,eax	100050bb: R_386_32	modesel
100050bf:	eb 20                	jmp    100050e1 <firstRun(bool)+0x1f0c>
100050c1:	a0 00 00 00 00       	mov    al,ds:0x0	100050c2: R_386_32	installKey
100050c6:	3c 0a                	cmp    al,0xa
100050c8:	0f 94 c0             	sete   al
100050cb:	84 c0                	test   al,al
100050cd:	75 30                	jne    100050ff <firstRun(bool)+0x1f2a>
100050cf:	a0 00 00 00 00       	mov    al,ds:0x0	100050d0: R_386_32	installKey
100050d4:	3c 1b                	cmp    al,0x1b
100050d6:	0f 94 c0             	sete   al
100050d9:	84 c0                	test   al,al
100050db:	0f 85 30 fa ff ff    	jne    10004b11 <firstRun(bool)+0x193c>
100050e1:	83 ec 08             	sub    esp,0x8
100050e4:	6a 00                	push   0x0
100050e6:	68 f4 01 00 00       	push   0x1f4
100050eb:	e8 fc ff ff ff       	call   100050ec <firstRun(bool)+0x1f17>	100050ec: R_386_PC32	milliTenthSleep(unsigned long long)
100050f0:	83 c4 10             	add    esp,0x10
100050f3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100050f5: R_386_32	installKey
100050fa:	e9 ab fe ff ff       	jmp    10004faa <firstRun(bool)+0x1dd5>
100050ff:	90                   	nop
10005100:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10005107:	0f 84 ff 00 00 00    	je     1000520c <firstRun(bool)+0x2037>
1000510d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000510f: R_386_32	showSidebar
10005114:	a1 00 00 00 00       	mov    eax,ds:0x0	10005115: R_386_32	term
10005119:	83 ec 0c             	sub    esp,0xc
1000511c:	50                   	push   eax
1000511d:	e8 fc ff ff ff       	call   1000511e <firstRun(bool)+0x1f49>	1000511e: R_386_PC32	setActiveTerminal(VgaText*)
10005122:	83 c4 10             	add    esp,0x10
10005125:	e8 fc ff ff ff       	call   10005126 <firstRun(bool)+0x1f51>	10005126: R_386_PC32	drawBootScreen()
1000512a:	83 ec 0c             	sub    esp,0xc
1000512d:	68 1d b5 00 10       	push   0x1000b51d	1000512e: R_386_32	.text
10005132:	6a 0d                	push   0xd
10005134:	6a 32                	push   0x32
10005136:	6a 05                	push   0x5
10005138:	6a 16                	push   0x16
1000513a:	e8 fc ff ff ff       	call   1000513b <firstRun(bool)+0x1f66>	1000513b: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000513f:	83 c4 20             	add    esp,0x20
10005142:	a1 00 00 00 00       	mov    eax,ds:0x0	10005143: R_386_32	term
10005147:	83 ec 04             	sub    esp,0x4
1000514a:	6a 08                	push   0x8
1000514c:	6a 18                	push   0x18
1000514e:	50                   	push   eax
1000514f:	e8 fc ff ff ff       	call   10005150 <firstRun(bool)+0x1f7b>	10005150: R_386_PC32	VgaText::setCursor(int, int)
10005154:	83 c4 10             	add    esp,0x10
10005157:	a1 00 00 00 00       	mov    eax,ds:0x0	10005158: R_386_32	term
1000515c:	83 ec 08             	sub    esp,0x8
1000515f:	68 34 b5 00 10       	push   0x1000b534	10005160: R_386_32	.text
10005164:	50                   	push   eax
10005165:	e8 fc ff ff ff       	call   10005166 <firstRun(bool)+0x1f91>	10005166: R_386_PC32	VgaText::puts(char const*)
1000516a:	83 c4 10             	add    esp,0x10
1000516d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000516e: R_386_32	term
10005172:	83 ec 04             	sub    esp,0x4
10005175:	6a 0a                	push   0xa
10005177:	6a 18                	push   0x18
10005179:	50                   	push   eax
1000517a:	e8 fc ff ff ff       	call   1000517b <firstRun(bool)+0x1fa6>	1000517b: R_386_PC32	VgaText::setCursor(int, int)
1000517f:	83 c4 10             	add    esp,0x10
10005182:	a1 00 00 00 00       	mov    eax,ds:0x0	10005183: R_386_32	term
10005187:	83 ec 08             	sub    esp,0x8
1000518a:	68 5c b5 00 10       	push   0x1000b55c	1000518b: R_386_32	.text
1000518f:	50                   	push   eax
10005190:	e8 fc ff ff ff       	call   10005191 <firstRun(bool)+0x1fbc>	10005191: R_386_PC32	VgaText::puts(char const*)
10005195:	83 c4 10             	add    esp,0x10
10005198:	a1 00 00 00 00       	mov    eax,ds:0x0	10005199: R_386_32	term
1000519d:	83 ec 04             	sub    esp,0x4
100051a0:	6a 0b                	push   0xb
100051a2:	6a 18                	push   0x18
100051a4:	50                   	push   eax
100051a5:	e8 fc ff ff ff       	call   100051a6 <firstRun(bool)+0x1fd1>	100051a6: R_386_PC32	VgaText::setCursor(int, int)
100051aa:	83 c4 10             	add    esp,0x10
100051ad:	a1 00 00 00 00       	mov    eax,ds:0x0	100051ae: R_386_32	term
100051b2:	83 ec 08             	sub    esp,0x8
100051b5:	68 85 b5 00 10       	push   0x1000b585	100051b6: R_386_32	.text
100051ba:	50                   	push   eax
100051bb:	e8 fc ff ff ff       	call   100051bc <firstRun(bool)+0x1fe7>	100051bc: R_386_PC32	VgaText::puts(char const*)
100051c0:	83 c4 10             	add    esp,0x10
100051c3:	a1 00 00 00 00       	mov    eax,ds:0x0	100051c4: R_386_32	term
100051c8:	83 ec 04             	sub    esp,0x4
100051cb:	6a 0e                	push   0xe
100051cd:	6a 18                	push   0x18
100051cf:	50                   	push   eax
100051d0:	e8 fc ff ff ff       	call   100051d1 <firstRun(bool)+0x1ffc>	100051d1: R_386_PC32	VgaText::setCursor(int, int)
100051d5:	83 c4 10             	add    esp,0x10
100051d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100051d9: R_386_32	term
100051dd:	83 ec 08             	sub    esp,0x8
100051e0:	68 94 b5 00 10       	push   0x1000b594	100051e1: R_386_32	.text
100051e5:	50                   	push   eax
100051e6:	e8 fc ff ff ff       	call   100051e7 <firstRun(bool)+0x2012>	100051e7: R_386_PC32	VgaText::puts(char const*)
100051eb:	83 c4 10             	add    esp,0x10
100051ee:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100051f0: R_386_32	installKey
100051f5:	a0 00 00 00 00       	mov    al,ds:0x0	100051f6: R_386_32	installKey
100051fa:	84 c0                	test   al,al
100051fc:	0f 94 c0             	sete   al
100051ff:	84 c0                	test   al,al
10005201:	74 02                	je     10005205 <firstRun(bool)+0x2030>
10005203:	eb f0                	jmp    100051f5 <firstRun(bool)+0x2020>
10005205:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005207: R_386_32	installKey
1000520c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000520e: R_386_32	installKey
10005213:	83 ec 08             	sub    esp,0x8
10005216:	6a 00                	push   0x0
10005218:	68 84 03 00 00       	push   0x384
1000521d:	e8 fc ff ff ff       	call   1000521e <firstRun(bool)+0x2049>	1000521e: R_386_PC32	milliTenthSleep(unsigned long long)
10005222:	83 c4 10             	add    esp,0x10
10005225:	e8 fc ff ff ff       	call   10005226 <firstRun(bool)+0x2051>	10005226: R_386_PC32	drawBootScreen()
1000522a:	83 ec 08             	sub    esp,0x8
1000522d:	6a 00                	push   0x0
1000522f:	68 18 2e 00 00       	push   0x2e18
10005234:	e8 fc ff ff ff       	call   10005235 <firstRun(bool)+0x2060>	10005235: R_386_PC32	milliTenthSleep(unsigned long long)
10005239:	83 c4 10             	add    esp,0x10
1000523c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10005243:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005245: R_386_32	installKey
1000524a:	e8 fc ff ff ff       	call   1000524b <firstRun(bool)+0x2076>	1000524b: R_386_PC32	drawBootScreen()
1000524f:	83 ec 0c             	sub    esp,0xc
10005252:	68 be b5 00 10       	push   0x1000b5be	10005253: R_386_32	.text
10005257:	6a 0e                	push   0xe
10005259:	6a 32                	push   0x32
1000525b:	6a 02                	push   0x2
1000525d:	6a 16                	push   0x16
1000525f:	e8 fc ff ff ff       	call   10005260 <firstRun(bool)+0x208b>	10005260: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005264:	83 c4 20             	add    esp,0x20
10005267:	a1 00 00 00 00       	mov    eax,ds:0x0	10005268: R_386_32	term
1000526c:	83 ec 04             	sub    esp,0x4
1000526f:	6a 18                	push   0x18
10005271:	6a 11                	push   0x11
10005273:	50                   	push   eax
10005274:	e8 fc ff ff ff       	call   10005275 <firstRun(bool)+0x20a0>	10005275: R_386_PC32	VgaText::setCursor(int, int)
10005279:	83 c4 10             	add    esp,0x10
1000527c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000527d: R_386_32	term
10005281:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10005283: R_386_32	safemode
10005287:	84 d2                	test   dl,dl
10005289:	74 07                	je     10005292 <firstRun(bool)+0x20bd>
1000528b:	b9 00 00 00 00       	mov    ecx,0x0
10005290:	eb 05                	jmp    10005297 <firstRun(bool)+0x20c2>
10005292:	b9 0b 00 00 00       	mov    ecx,0xb
10005297:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10005299: R_386_32	safemode
1000529d:	84 d2                	test   dl,dl
1000529f:	74 07                	je     100052a8 <firstRun(bool)+0x20d3>
100052a1:	ba 0f 00 00 00       	mov    edx,0xf
100052a6:	eb 05                	jmp    100052ad <firstRun(bool)+0x20d8>
100052a8:	ba 03 00 00 00       	mov    edx,0x3
100052ad:	51                   	push   ecx
100052ae:	52                   	push   edx
100052af:	68 5a b4 00 10       	push   0x1000b45a	100052b0: R_386_32	.text
100052b4:	50                   	push   eax
100052b5:	e8 fc ff ff ff       	call   100052b6 <firstRun(bool)+0x20e1>	100052b6: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100052ba:	83 c4 10             	add    esp,0x10
100052bd:	a1 00 00 00 00       	mov    eax,ds:0x0	100052be: R_386_32	term
100052c2:	83 ec 04             	sub    esp,0x4
100052c5:	6a 05                	push   0x5
100052c7:	6a 18                	push   0x18
100052c9:	50                   	push   eax
100052ca:	e8 fc ff ff ff       	call   100052cb <firstRun(bool)+0x20f6>	100052cb: R_386_PC32	VgaText::setCursor(int, int)
100052cf:	83 c4 10             	add    esp,0x10
100052d2:	a1 00 00 00 00       	mov    eax,ds:0x0	100052d3: R_386_32	term
100052d7:	83 ec 08             	sub    esp,0x8
100052da:	68 cc b5 00 10       	push   0x1000b5cc	100052db: R_386_32	.text
100052df:	50                   	push   eax
100052e0:	e8 fc ff ff ff       	call   100052e1 <firstRun(bool)+0x210c>	100052e1: R_386_PC32	VgaText::puts(char const*)
100052e5:	83 c4 10             	add    esp,0x10
100052e8:	a1 00 00 00 00       	mov    eax,ds:0x0	100052e9: R_386_32	term
100052ed:	83 ec 04             	sub    esp,0x4
100052f0:	6a 06                	push   0x6
100052f2:	6a 18                	push   0x18
100052f4:	50                   	push   eax
100052f5:	e8 fc ff ff ff       	call   100052f6 <firstRun(bool)+0x2121>	100052f6: R_386_PC32	VgaText::setCursor(int, int)
100052fa:	83 c4 10             	add    esp,0x10
100052fd:	a1 00 00 00 00       	mov    eax,ds:0x0	100052fe: R_386_32	term
10005302:	83 ec 08             	sub    esp,0x8
10005305:	68 30 b4 00 10       	push   0x1000b430	10005306: R_386_32	.text
1000530a:	50                   	push   eax
1000530b:	e8 fc ff ff ff       	call   1000530c <firstRun(bool)+0x2137>	1000530c: R_386_PC32	VgaText::puts(char const*)
10005310:	83 c4 10             	add    esp,0x10
10005313:	c6 05 10 00 00 00 00 	mov    BYTE PTR ds:0x10,0x0	10005315: R_386_32	pkeybuf
1000531a:	c6 05 11 00 00 00 00 	mov    BYTE PTR ds:0x11,0x0	1000531c: R_386_32	pkeybuf
10005321:	a1 00 00 00 00       	mov    eax,ds:0x0	10005322: R_386_32	term
10005326:	83 ec 04             	sub    esp,0x4
10005329:	6a 08                	push   0x8
1000532b:	6a 1c                	push   0x1c
1000532d:	50                   	push   eax
1000532e:	e8 fc ff ff ff       	call   1000532f <firstRun(bool)+0x215a>	1000532f: R_386_PC32	VgaText::setCursor(int, int)
10005333:	83 c4 10             	add    esp,0x10
10005336:	a1 00 00 00 00       	mov    eax,ds:0x0	10005337: R_386_32	term
1000533b:	83 ec 08             	sub    esp,0x8
1000533e:	68 00 00 00 00       	push   0x0	1000533f: R_386_32	pkeybuf
10005343:	50                   	push   eax
10005344:	e8 fc ff ff ff       	call   10005345 <firstRun(bool)+0x2170>	10005345: R_386_PC32	VgaText::puts(char const*)
10005349:	83 c4 10             	add    esp,0x10
1000534c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000534d: R_386_32	term
10005351:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10005354:	83 c2 1c             	add    edx,0x1c
10005357:	83 ec 04             	sub    esp,0x4
1000535a:	6a 08                	push   0x8
1000535c:	52                   	push   edx
1000535d:	50                   	push   eax
1000535e:	e8 fc ff ff ff       	call   1000535f <firstRun(bool)+0x218a>	1000535f: R_386_PC32	VgaText::setCursor(int, int)
10005363:	83 c4 10             	add    esp,0x10
10005366:	a1 00 00 00 00       	mov    eax,ds:0x0	10005367: R_386_32	term
1000536b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000536e:	81 c2 00 00 00 00    	add    edx,0x0	10005370: R_386_32	pkeybuf
10005374:	8a 12                	mov    dl,BYTE PTR [edx]
10005376:	0f be d2             	movsx  edx,dl
10005379:	6a 00                	push   0x0
1000537b:	6a 0f                	push   0xf
1000537d:	52                   	push   edx
1000537e:	50                   	push   eax
1000537f:	e8 fc ff ff ff       	call   10005380 <firstRun(bool)+0x21ab>	10005380: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10005384:	83 c4 10             	add    esp,0x10
10005387:	a1 00 00 00 00       	mov    eax,ds:0x0	10005388: R_386_32	term
1000538c:	83 ec 04             	sub    esp,0x4
1000538f:	6a 08                	push   0x8
10005391:	6a 2c                	push   0x2c
10005393:	50                   	push   eax
10005394:	e8 fc ff ff ff       	call   10005395 <firstRun(bool)+0x21c0>	10005395: R_386_PC32	VgaText::setCursor(int, int)
10005399:	83 c4 10             	add    esp,0x10
1000539c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000539d: R_386_32	term
100053a1:	6a 0f                	push   0xf
100053a3:	6a 0f                	push   0xf
100053a5:	6a 20                	push   0x20
100053a7:	50                   	push   eax
100053a8:	e8 fc ff ff ff       	call   100053a9 <firstRun(bool)+0x21d4>	100053a9: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100053ad:	83 c4 10             	add    esp,0x10
100053b0:	a1 00 00 00 00       	mov    eax,ds:0x0	100053b1: R_386_32	term
100053b5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100053b8:	83 c2 1c             	add    edx,0x1c
100053bb:	83 ec 04             	sub    esp,0x4
100053be:	6a 08                	push   0x8
100053c0:	52                   	push   edx
100053c1:	50                   	push   eax
100053c2:	e8 fc ff ff ff       	call   100053c3 <firstRun(bool)+0x21ee>	100053c3: R_386_PC32	VgaText::setCursor(int, int)
100053c7:	83 c4 10             	add    esp,0x10
100053ca:	a0 00 00 00 00       	mov    al,ds:0x0	100053cb: R_386_32	installKey
100053cf:	84 c0                	test   al,al
100053d1:	0f 94 c0             	sete   al
100053d4:	84 c0                	test   al,al
100053d6:	74 02                	je     100053da <firstRun(bool)+0x2205>
100053d8:	eb f0                	jmp    100053ca <firstRun(bool)+0x21f5>
100053da:	a1 00 00 00 00       	mov    eax,ds:0x0	100053db: R_386_32	term
100053df:	05 82 00 00 00       	add    eax,0x82
100053e4:	83 ec 04             	sub    esp,0x4
100053e7:	6a 10                	push   0x10
100053e9:	6a 00                	push   0x0
100053eb:	50                   	push   eax
100053ec:	e8 fc ff ff ff       	call   100053ed <firstRun(bool)+0x2218>	100053ed: R_386_PC32	memset
100053f1:	83 c4 10             	add    esp,0x10
100053f4:	a1 00 00 00 00       	mov    eax,ds:0x0	100053f5: R_386_32	term
100053f9:	05 02 01 00 00       	add    eax,0x102
100053fe:	83 ec 04             	sub    esp,0x4
10005401:	6a 10                	push   0x10
10005403:	6a 00                	push   0x0
10005405:	50                   	push   eax
10005406:	e8 fc ff ff ff       	call   10005407 <firstRun(bool)+0x2232>	10005407: R_386_PC32	memset
1000540b:	83 c4 10             	add    esp,0x10
1000540e:	a0 00 00 00 00       	mov    al,ds:0x0	1000540f: R_386_32	installKey
10005413:	3c 03                	cmp    al,0x3
10005415:	74 09                	je     10005420 <firstRun(bool)+0x224b>
10005417:	a0 00 00 00 00       	mov    al,ds:0x0	10005418: R_386_32	installKey
1000541c:	3c 08                	cmp    al,0x8
1000541e:	75 04                	jne    10005424 <firstRun(bool)+0x224f>
10005420:	b0 01                	mov    al,0x1
10005422:	eb 02                	jmp    10005426 <firstRun(bool)+0x2251>
10005424:	b0 00                	mov    al,0x0
10005426:	84 c0                	test   al,al
10005428:	74 31                	je     1000545b <firstRun(bool)+0x2286>
1000542a:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
1000542d:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10005431:	75 14                	jne    10005447 <firstRun(bool)+0x2272>
10005433:	83 ec 0c             	sub    esp,0xc
10005436:	68 00 00 00 00       	push   0x0	10005437: R_386_32	pkeybuf
1000543b:	e8 fc ff ff ff       	call   1000543c <firstRun(bool)+0x2267>	1000543c: R_386_PC32	strlen
10005440:	83 c4 10             	add    esp,0x10
10005443:	48                   	dec    eax
10005444:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10005447:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000544a:	05 00 00 00 00       	add    eax,0x0	1000544b: R_386_32	pkeybuf
1000544f:	8a 00                	mov    al,BYTE PTR [eax]
10005451:	3c 2d                	cmp    al,0x2d
10005453:	0f 85 7b 03 00 00    	jne    100057d4 <firstRun(bool)+0x25ff>
10005459:	eb cf                	jmp    1000542a <firstRun(bool)+0x2255>
1000545b:	a0 00 00 00 00       	mov    al,ds:0x0	1000545c: R_386_32	installKey
10005460:	3c 2f                	cmp    al,0x2f
10005462:	7e 09                	jle    1000546d <firstRun(bool)+0x2298>
10005464:	a0 00 00 00 00       	mov    al,ds:0x0	10005465: R_386_32	installKey
10005469:	3c 39                	cmp    al,0x39
1000546b:	7e 36                	jle    100054a3 <firstRun(bool)+0x22ce>
1000546d:	a0 00 00 00 00       	mov    al,ds:0x0	1000546e: R_386_32	installKey
10005472:	3c 40                	cmp    al,0x40
10005474:	7e 09                	jle    1000547f <firstRun(bool)+0x22aa>
10005476:	a0 00 00 00 00       	mov    al,ds:0x0	10005477: R_386_32	installKey
1000547b:	3c 5a                	cmp    al,0x5a
1000547d:	7e 24                	jle    100054a3 <firstRun(bool)+0x22ce>
1000547f:	a0 00 00 00 00       	mov    al,ds:0x0	10005480: R_386_32	installKey
10005484:	3c 60                	cmp    al,0x60
10005486:	7e 09                	jle    10005491 <firstRun(bool)+0x22bc>
10005488:	a0 00 00 00 00       	mov    al,ds:0x0	10005489: R_386_32	installKey
1000548d:	3c 7a                	cmp    al,0x7a
1000548f:	7e 12                	jle    100054a3 <firstRun(bool)+0x22ce>
10005491:	a0 00 00 00 00       	mov    al,ds:0x0	10005492: R_386_32	installKey
10005496:	3c 20                	cmp    al,0x20
10005498:	74 09                	je     100054a3 <firstRun(bool)+0x22ce>
1000549a:	a0 00 00 00 00       	mov    al,ds:0x0	1000549b: R_386_32	installKey
1000549f:	3c 04                	cmp    al,0x4
100054a1:	75 04                	jne    100054a7 <firstRun(bool)+0x22d2>
100054a3:	b0 01                	mov    al,0x1
100054a5:	eb 02                	jmp    100054a9 <firstRun(bool)+0x22d4>
100054a7:	b0 00                	mov    al,0x0
100054a9:	84 c0                	test   al,al
100054ab:	0f 84 a3 00 00 00    	je     10005554 <firstRun(bool)+0x237f>
100054b1:	a0 00 00 00 00       	mov    al,ds:0x0	100054b2: R_386_32	installKey
100054b6:	3c 2f                	cmp    al,0x2f
100054b8:	7e 09                	jle    100054c3 <firstRun(bool)+0x22ee>
100054ba:	a0 00 00 00 00       	mov    al,ds:0x0	100054bb: R_386_32	installKey
100054bf:	3c 39                	cmp    al,0x39
100054c1:	7e 24                	jle    100054e7 <firstRun(bool)+0x2312>
100054c3:	a0 00 00 00 00       	mov    al,ds:0x0	100054c4: R_386_32	installKey
100054c8:	3c 40                	cmp    al,0x40
100054ca:	7e 09                	jle    100054d5 <firstRun(bool)+0x2300>
100054cc:	a0 00 00 00 00       	mov    al,ds:0x0	100054cd: R_386_32	installKey
100054d1:	3c 5a                	cmp    al,0x5a
100054d3:	7e 12                	jle    100054e7 <firstRun(bool)+0x2312>
100054d5:	a0 00 00 00 00       	mov    al,ds:0x0	100054d6: R_386_32	installKey
100054da:	3c 60                	cmp    al,0x60
100054dc:	7e 0d                	jle    100054eb <firstRun(bool)+0x2316>
100054de:	a0 00 00 00 00       	mov    al,ds:0x0	100054df: R_386_32	installKey
100054e3:	3c 7a                	cmp    al,0x7a
100054e5:	7f 04                	jg     100054eb <firstRun(bool)+0x2316>
100054e7:	b0 01                	mov    al,0x1
100054e9:	eb 02                	jmp    100054ed <firstRun(bool)+0x2318>
100054eb:	b0 00                	mov    al,0x0
100054ed:	84 c0                	test   al,al
100054ef:	74 2c                	je     1000551d <firstRun(bool)+0x2348>
100054f1:	a0 00 00 00 00       	mov    al,ds:0x0	100054f2: R_386_32	installKey
100054f6:	3c 60                	cmp    al,0x60
100054f8:	7e 13                	jle    1000550d <firstRun(bool)+0x2338>
100054fa:	a0 00 00 00 00       	mov    al,ds:0x0	100054fb: R_386_32	installKey
100054ff:	3c 7a                	cmp    al,0x7a
10005501:	7f 0a                	jg     1000550d <firstRun(bool)+0x2338>
10005503:	a0 00 00 00 00       	mov    al,ds:0x0	10005504: R_386_32	installKey
10005508:	83 e8 20             	sub    eax,0x20
1000550b:	eb 05                	jmp    10005512 <firstRun(bool)+0x233d>
1000550d:	a0 00 00 00 00       	mov    al,ds:0x0	1000550e: R_386_32	installKey
10005512:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10005515:	81 c2 00 00 00 00    	add    edx,0x0	10005517: R_386_32	pkeybuf
1000551b:	88 02                	mov    BYTE PTR [edx],al
1000551d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10005520:	83 ec 0c             	sub    esp,0xc
10005523:	68 00 00 00 00       	push   0x0	10005524: R_386_32	pkeybuf
10005528:	e8 fc ff ff ff       	call   10005529 <firstRun(bool)+0x2354>	10005529: R_386_PC32	strlen
1000552d:	83 c4 10             	add    esp,0x10
10005530:	89 c2                	mov    edx,eax
10005532:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10005535:	39 c2                	cmp    edx,eax
10005537:	77 07                	ja     10005540 <firstRun(bool)+0x236b>
10005539:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10005540:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10005543:	05 00 00 00 00       	add    eax,0x0	10005544: R_386_32	pkeybuf
10005548:	8a 00                	mov    al,BYTE PTR [eax]
1000554a:	3c 2d                	cmp    al,0x2d
1000554c:	0f 85 82 02 00 00    	jne    100057d4 <firstRun(bool)+0x25ff>
10005552:	eb c9                	jmp    1000551d <firstRun(bool)+0x2348>
10005554:	a0 00 00 00 00       	mov    al,ds:0x0	10005555: R_386_32	installKey
10005559:	3c 1b                	cmp    al,0x1b
1000555b:	0f 94 c0             	sete   al
1000555e:	84 c0                	test   al,al
10005560:	0f 85 3d f9 ff ff    	jne    10004ea3 <firstRun(bool)+0x1cce>
10005566:	a0 00 00 00 00       	mov    al,ds:0x0	10005567: R_386_32	installKey
1000556b:	3c 0a                	cmp    al,0xa
1000556d:	0f 94 c0             	sete   al
10005570:	84 c0                	test   al,al
10005572:	0f 84 5c 02 00 00    	je     100057d4 <firstRun(bool)+0x25ff>
10005578:	83 ec 0c             	sub    esp,0xc
1000557b:	68 00 00 00 00       	push   0x0	1000557c: R_386_32	pkeybuf
10005580:	e8 fc ff ff ff       	call   10005581 <firstRun(bool)+0x23ac>	10005581: R_386_PC32	checkExtendedKey(char*)
10005585:	83 c4 10             	add    esp,0x10
10005588:	85 c0                	test   eax,eax
1000558a:	0f 95 c0             	setne  al
1000558d:	88 45 87             	mov    BYTE PTR [ebp-0x79],al
10005590:	80 7d 87 00          	cmp    BYTE PTR [ebp-0x79],0x0
10005594:	74 61                	je     100055f7 <firstRun(bool)+0x2422>
10005596:	83 ec 08             	sub    esp,0x8
10005599:	6a 00                	push   0x0
1000559b:	68 f0 0a 00 00       	push   0xaf0
100055a0:	e8 fc ff ff ff       	call   100055a1 <firstRun(bool)+0x23cc>	100055a1: R_386_PC32	milliTenthSleep(unsigned long long)
100055a5:	83 c4 10             	add    esp,0x10
100055a8:	e8 fc ff ff ff       	call   100055a9 <firstRun(bool)+0x23d4>	100055a9: R_386_PC32	drawBootScreen()
100055ad:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100055af: R_386_32	installKey
100055b4:	83 ec 08             	sub    esp,0x8
100055b7:	6a 00                	push   0x0
100055b9:	68 84 03 00 00       	push   0x384
100055be:	e8 fc ff ff ff       	call   100055bf <firstRun(bool)+0x23ea>	100055bf: R_386_PC32	milliTenthSleep(unsigned long long)
100055c3:	83 c4 10             	add    esp,0x10
100055c6:	e8 fc ff ff ff       	call   100055c7 <firstRun(bool)+0x23f2>	100055c7: R_386_PC32	drawBootScreen()
100055cb:	83 ec 08             	sub    esp,0x8
100055ce:	6a 00                	push   0x0
100055d0:	68 c0 12 00 00       	push   0x12c0
100055d5:	e8 fc ff ff ff       	call   100055d6 <firstRun(bool)+0x2401>	100055d6: R_386_PC32	milliTenthSleep(unsigned long long)
100055da:	83 c4 10             	add    esp,0x10
100055dd:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100055df: R_386_32	installKey
100055e4:	90                   	nop
100055e5:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
100055ec:	0f 84 ee 01 00 00    	je     100057e0 <firstRun(bool)+0x260b>
100055f2:	e9 db 02 00 00       	jmp    100058d2 <firstRun(bool)+0x26fd>
100055f7:	83 ec 08             	sub    esp,0x8
100055fa:	6a 00                	push   0x0
100055fc:	68 f0 0a 00 00       	push   0xaf0
10005601:	e8 fc ff ff ff       	call   10005602 <firstRun(bool)+0x242d>	10005602: R_386_PC32	milliTenthSleep(unsigned long long)
10005606:	83 c4 10             	add    esp,0x10
10005609:	e8 fc ff ff ff       	call   1000560a <firstRun(bool)+0x2435>	1000560a: R_386_PC32	drawBootScreen()
1000560e:	83 ec 08             	sub    esp,0x8
10005611:	6a 01                	push   0x1
10005613:	68 be b5 00 10       	push   0x1000b5be	10005614: R_386_32	.text
10005618:	6a 0e                	push   0xe
1000561a:	6a 32                	push   0x32
1000561c:	6a 02                	push   0x2
1000561e:	6a 16                	push   0x16
10005620:	e8 fc ff ff ff       	call   10005621 <firstRun(bool)+0x244c>	10005621: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10005625:	83 c4 20             	add    esp,0x20
10005628:	a1 00 00 00 00       	mov    eax,ds:0x0	10005629: R_386_32	term
1000562d:	83 ec 04             	sub    esp,0x4
10005630:	6a 05                	push   0x5
10005632:	6a 18                	push   0x18
10005634:	50                   	push   eax
10005635:	e8 fc ff ff ff       	call   10005636 <firstRun(bool)+0x2461>	10005636: R_386_PC32	VgaText::setCursor(int, int)
1000563a:	83 c4 10             	add    esp,0x10
1000563d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000563e: R_386_32	term
10005642:	6a 07                	push   0x7
10005644:	6a 00                	push   0x0
10005646:	68 cc b5 00 10       	push   0x1000b5cc	10005647: R_386_32	.text
1000564b:	50                   	push   eax
1000564c:	e8 fc ff ff ff       	call   1000564d <firstRun(bool)+0x2478>	1000564d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10005651:	83 c4 10             	add    esp,0x10
10005654:	a1 00 00 00 00       	mov    eax,ds:0x0	10005655: R_386_32	term
10005659:	83 ec 04             	sub    esp,0x4
1000565c:	6a 06                	push   0x6
1000565e:	6a 18                	push   0x18
10005660:	50                   	push   eax
10005661:	e8 fc ff ff ff       	call   10005662 <firstRun(bool)+0x248d>	10005662: R_386_PC32	VgaText::setCursor(int, int)
10005666:	83 c4 10             	add    esp,0x10
10005669:	a1 00 00 00 00       	mov    eax,ds:0x0	1000566a: R_386_32	term
1000566e:	6a 07                	push   0x7
10005670:	6a 00                	push   0x0
10005672:	68 30 b4 00 10       	push   0x1000b430	10005673: R_386_32	.text
10005677:	50                   	push   eax
10005678:	e8 fc ff ff ff       	call   10005679 <firstRun(bool)+0x24a4>	10005679: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000567d:	83 c4 10             	add    esp,0x10
10005680:	a1 00 00 00 00       	mov    eax,ds:0x0	10005681: R_386_32	term
10005685:	83 ec 04             	sub    esp,0x4
10005688:	6a 08                	push   0x8
1000568a:	6a 1c                	push   0x1c
1000568c:	50                   	push   eax
1000568d:	e8 fc ff ff ff       	call   1000568e <firstRun(bool)+0x24b9>	1000568e: R_386_PC32	VgaText::setCursor(int, int)
10005692:	83 c4 10             	add    esp,0x10
10005695:	a1 00 00 00 00       	mov    eax,ds:0x0	10005696: R_386_32	term
1000569a:	6a 07                	push   0x7
1000569c:	6a 00                	push   0x0
1000569e:	68 00 00 00 00       	push   0x0	1000569f: R_386_32	pkeybuf
100056a3:	50                   	push   eax
100056a4:	e8 fc ff ff ff       	call   100056a5 <firstRun(bool)+0x24d0>	100056a5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100056a9:	83 c4 10             	add    esp,0x10
100056ac:	a1 00 00 00 00       	mov    eax,ds:0x0	100056ad: R_386_32	term
100056b1:	83 ec 04             	sub    esp,0x4
100056b4:	6a 08                	push   0x8
100056b6:	6a 2c                	push   0x2c
100056b8:	50                   	push   eax
100056b9:	e8 fc ff ff ff       	call   100056ba <firstRun(bool)+0x24e5>	100056ba: R_386_PC32	VgaText::setCursor(int, int)
100056be:	83 c4 10             	add    esp,0x10
100056c1:	a1 00 00 00 00       	mov    eax,ds:0x0	100056c2: R_386_32	term
100056c6:	6a 07                	push   0x7
100056c8:	6a 07                	push   0x7
100056ca:	6a 20                	push   0x20
100056cc:	50                   	push   eax
100056cd:	e8 fc ff ff ff       	call   100056ce <firstRun(bool)+0x24f9>	100056ce: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100056d2:	83 c4 10             	add    esp,0x10
100056d5:	a1 00 00 00 00       	mov    eax,ds:0x0	100056d6: R_386_32	term
100056da:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100056dd:	83 c2 1c             	add    edx,0x1c
100056e0:	83 ec 04             	sub    esp,0x4
100056e3:	6a 08                	push   0x8
100056e5:	52                   	push   edx
100056e6:	50                   	push   eax
100056e7:	e8 fc ff ff ff       	call   100056e8 <firstRun(bool)+0x2513>	100056e8: R_386_PC32	VgaText::setCursor(int, int)
100056ec:	83 c4 10             	add    esp,0x10
100056ef:	83 ec 0c             	sub    esp,0xc
100056f2:	68 1d b5 00 10       	push   0x1000b51d	100056f3: R_386_32	.text
100056f7:	6a 0b                	push   0xb
100056f9:	6a 2b                	push   0x2b
100056fb:	6a 0a                	push   0xa
100056fd:	6a 22                	push   0x22
100056ff:	e8 fc ff ff ff       	call   10005700 <firstRun(bool)+0x252b>	10005700: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005704:	83 c4 20             	add    esp,0x20
10005707:	a1 00 00 00 00       	mov    eax,ds:0x0	10005708: R_386_32	term
1000570c:	83 ec 04             	sub    esp,0x4
1000570f:	6a 0d                	push   0xd
10005711:	6a 24                	push   0x24
10005713:	50                   	push   eax
10005714:	e8 fc ff ff ff       	call   10005715 <firstRun(bool)+0x2540>	10005715: R_386_PC32	VgaText::setCursor(int, int)
10005719:	83 c4 10             	add    esp,0x10
1000571c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000571d: R_386_32	term
10005721:	83 ec 08             	sub    esp,0x8
10005724:	68 f4 b5 00 10       	push   0x1000b5f4	10005725: R_386_32	.text
10005729:	50                   	push   eax
1000572a:	e8 fc ff ff ff       	call   1000572b <firstRun(bool)+0x2556>	1000572b: R_386_PC32	VgaText::puts(char const*)
1000572f:	83 c4 10             	add    esp,0x10
10005732:	a1 00 00 00 00       	mov    eax,ds:0x0	10005733: R_386_32	term
10005737:	83 ec 04             	sub    esp,0x4
1000573a:	6a 0f                	push   0xf
1000573c:	6a 24                	push   0x24
1000573e:	50                   	push   eax
1000573f:	e8 fc ff ff ff       	call   10005740 <firstRun(bool)+0x256b>	10005740: R_386_PC32	VgaText::setCursor(int, int)
10005744:	83 c4 10             	add    esp,0x10
10005747:	a1 00 00 00 00       	mov    eax,ds:0x0	10005748: R_386_32	term
1000574c:	83 ec 08             	sub    esp,0x8
1000574f:	68 1c b6 00 10       	push   0x1000b61c	10005750: R_386_32	.text
10005754:	50                   	push   eax
10005755:	e8 fc ff ff ff       	call   10005756 <firstRun(bool)+0x2581>	10005756: R_386_PC32	VgaText::puts(char const*)
1000575a:	83 c4 10             	add    esp,0x10
1000575d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000575e: R_386_32	term
10005762:	83 ec 04             	sub    esp,0x4
10005765:	6a 10                	push   0x10
10005767:	6a 24                	push   0x24
10005769:	50                   	push   eax
1000576a:	e8 fc ff ff ff       	call   1000576b <firstRun(bool)+0x2596>	1000576b: R_386_PC32	VgaText::setCursor(int, int)
1000576f:	83 c4 10             	add    esp,0x10
10005772:	a1 00 00 00 00       	mov    eax,ds:0x0	10005773: R_386_32	term
10005777:	83 ec 08             	sub    esp,0x8
1000577a:	68 40 b6 00 10       	push   0x1000b640	1000577b: R_386_32	.text
1000577f:	50                   	push   eax
10005780:	e8 fc ff ff ff       	call   10005781 <firstRun(bool)+0x25ac>	10005781: R_386_PC32	VgaText::puts(char const*)
10005785:	83 c4 10             	add    esp,0x10
10005788:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000578a: R_386_32	installKey
1000578f:	83 ec 08             	sub    esp,0x8
10005792:	6a 00                	push   0x0
10005794:	68 94 11 00 00       	push   0x1194
10005799:	e8 fc ff ff ff       	call   1000579a <firstRun(bool)+0x25c5>	1000579a: R_386_PC32	milliTenthSleep(unsigned long long)
1000579e:	83 c4 10             	add    esp,0x10
100057a1:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100057a3: R_386_32	installKey
100057a8:	a0 00 00 00 00       	mov    al,ds:0x0	100057a9: R_386_32	installKey
100057ad:	84 c0                	test   al,al
100057af:	0f 94 c0             	sete   al
100057b2:	84 c0                	test   al,al
100057b4:	74 02                	je     100057b8 <firstRun(bool)+0x25e3>
100057b6:	eb f0                	jmp    100057a8 <firstRun(bool)+0x25d3>
100057b8:	e8 fc ff ff ff       	call   100057b9 <firstRun(bool)+0x25e4>	100057b9: R_386_PC32	drawBootScreen()
100057bd:	83 ec 08             	sub    esp,0x8
100057c0:	6a 00                	push   0x0
100057c2:	68 9c 18 00 00       	push   0x189c
100057c7:	e8 fc ff ff ff       	call   100057c8 <firstRun(bool)+0x25f3>	100057c8: R_386_PC32	milliTenthSleep(unsigned long long)
100057cc:	83 c4 10             	add    esp,0x10
100057cf:	e9 6f fa ff ff       	jmp    10005243 <firstRun(bool)+0x206e>
100057d4:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100057d6: R_386_32	installKey
100057db:	e9 33 fb ff ff       	jmp    10005313 <firstRun(bool)+0x213e>
100057e0:	e8 fc ff ff ff       	call   100057e1 <firstRun(bool)+0x260c>	100057e1: R_386_PC32	drawBootScreen()
100057e5:	83 ec 0c             	sub    esp,0xc
100057e8:	68 61 b6 00 10       	push   0x1000b661	100057e9: R_386_32	.text
100057ed:	6a 0d                	push   0xd
100057ef:	6a 32                	push   0x32
100057f1:	6a 05                	push   0x5
100057f3:	6a 16                	push   0x16
100057f5:	e8 fc ff ff ff       	call   100057f6 <firstRun(bool)+0x2621>	100057f6: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100057fa:	83 c4 20             	add    esp,0x20
100057fd:	83 ec 0c             	sub    esp,0xc
10005800:	6a 00                	push   0x0
10005802:	e8 fc ff ff ff       	call   10005803 <firstRun(bool)+0x262e>	10005803: R_386_PC32	bootInstallTasks(int)
10005807:	83 c4 10             	add    esp,0x10
1000580a:	83 ec 0c             	sub    esp,0xc
1000580d:	68 7c b6 00 10       	push   0x1000b67c	1000580e: R_386_32	.text
10005812:	e8 fc ff ff ff       	call   10005813 <firstRun(bool)+0x263e>	10005813: R_386_PC32	Dbg::kprintf(char const*, ...)
10005817:	83 c4 10             	add    esp,0x10
1000581a:	c7 45 80 0c 00 00 00 	mov    DWORD PTR [ebp-0x80],0xc
10005821:	83 ec 0c             	sub    esp,0xc
10005824:	ff 75 80             	push   DWORD PTR [ebp-0x80]
10005827:	e8 fc ff ff ff       	call   10005828 <firstRun(bool)+0x2653>	10005828: R_386_PC32	Virt::setupPageSwapping(int)
1000582c:	83 c4 10             	add    esp,0x10
1000582f:	83 ec 0c             	sub    esp,0xc
10005832:	6a 01                	push   0x1
10005834:	e8 fc ff ff ff       	call   10005835 <firstRun(bool)+0x2660>	10005835: R_386_PC32	bootInstallTasks(int)
10005839:	83 c4 10             	add    esp,0x10
1000583c:	83 ec 0c             	sub    esp,0xc
1000583f:	68 9c b6 00 10       	push   0x1000b69c	10005840: R_386_32	.text
10005844:	e8 fc ff ff ff       	call   10005845 <firstRun(bool)+0x2670>	10005845: R_386_PC32	rmtree(char*)
10005849:	83 c4 10             	add    esp,0x10
1000584c:	83 ec 0c             	sub    esp,0xc
1000584f:	68 b6 b6 00 10       	push   0x1000b6b6	10005850: R_386_32	.text
10005854:	e8 fc ff ff ff       	call   10005855 <firstRun(bool)+0x2680>	10005855: R_386_PC32	rmtree(char*)
10005859:	83 c4 10             	add    esp,0x10
1000585c:	83 ec 08             	sub    esp,0x8
1000585f:	68 c0 01 00 00       	push   0x1c0
10005864:	68 9c b6 00 10       	push   0x1000b69c	10005865: R_386_32	.text
10005869:	e8 fc ff ff ff       	call   1000586a <firstRun(bool)+0x2695>	1000586a: R_386_PC32	mkdir(char const*, int)
1000586e:	83 c4 10             	add    esp,0x10
10005871:	83 ec 08             	sub    esp,0x8
10005874:	68 c0 01 00 00       	push   0x1c0
10005879:	68 b6 b6 00 10       	push   0x1000b6b6	1000587a: R_386_32	.text
1000587e:	e8 fc ff ff ff       	call   1000587f <firstRun(bool)+0x26aa>	1000587f: R_386_PC32	mkdir(char const*, int)
10005883:	83 c4 10             	add    esp,0x10
10005886:	83 ec 08             	sub    esp,0x8
10005889:	68 9c b6 00 10       	push   0x1000b69c	1000588a: R_386_32	.text
1000588e:	68 d0 b6 00 10       	push   0x1000b6d0	1000588f: R_386_32	.text
10005893:	e8 fc ff ff ff       	call   10005894 <firstRun(bool)+0x26bf>	10005894: R_386_PC32	copytree(char*, char*)
10005898:	83 c4 10             	add    esp,0x10
1000589b:	83 ec 0c             	sub    esp,0xc
1000589e:	6a 02                	push   0x2
100058a0:	e8 fc ff ff ff       	call   100058a1 <firstRun(bool)+0x26cc>	100058a1: R_386_PC32	bootInstallTasks(int)
100058a5:	83 c4 10             	add    esp,0x10
100058a8:	83 ec 0c             	sub    esp,0xc
100058ab:	68 00 00 00 00       	push   0x0	100058ac: R_386_32	currName
100058b0:	e8 fc ff ff ff       	call   100058b1 <firstRun(bool)+0x26dc>	100058b1: R_386_PC32	createUser(char const*)
100058b5:	83 c4 10             	add    esp,0x10
100058b8:	83 ec 0c             	sub    esp,0xc
100058bb:	6a 03                	push   0x3
100058bd:	e8 fc ff ff ff       	call   100058be <firstRun(bool)+0x26e9>	100058be: R_386_PC32	bootInstallTasks(int)
100058c2:	83 c4 10             	add    esp,0x10
100058c5:	a0 00 00 00 00       	mov    al,ds:0x0	100058c6: R_386_32	safemode
100058ca:	83 f0 01             	xor    eax,0x1
100058cd:	a2 00 00 00 00       	mov    ds:0x0,al	100058ce: R_386_32	VgaText::hiddenOut
100058d2:	8d 65 f4             	lea    esp,[ebp-0xc]
100058d5:	5b                   	pop    ebx
100058d6:	5e                   	pop    esi
100058d7:	5f                   	pop    edi
100058d8:	5d                   	pop    ebp
100058d9:	c3                   	ret    

100058da <loadExtensions()>:
100058da:	55                   	push   ebp
100058db:	89 e5                	mov    ebp,esp
100058dd:	83 ec 08             	sub    esp,0x8
100058e0:	83 ec 0c             	sub    esp,0xc
100058e3:	68 78 b7 00 10       	push   0x1000b778	100058e4: R_386_32	.text
100058e8:	e8 fc ff ff ff       	call   100058e9 <loadExtensions()+0xf>	100058e9: R_386_PC32	KeSetBootMessage(char const*)
100058ed:	83 c4 10             	add    esp,0x10
100058f0:	90                   	nop
100058f1:	c9                   	leave  
100058f2:	c3                   	ret    

100058f3 <rgtree(Reghive_Tag*, int, int)>:
100058f3:	55                   	push   ebp
100058f4:	89 e5                	mov    ebp,esp
100058f6:	53                   	push   ebx
100058f7:	83 ec 44             	sub    esp,0x44
100058fa:	83 7d 0c 01          	cmp    DWORD PTR [ebp+0xc],0x1
100058fe:	75 16                	jne    10005916 <rgtree(Reghive_Tag*, int, int)+0x23>
10005900:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10005904:	75 10                	jne    10005916 <rgtree(Reghive_Tag*, int, int)+0x23>
10005906:	83 ec 0c             	sub    esp,0xc
10005909:	68 8e b7 00 10       	push   0x1000b78e	1000590a: R_386_32	.text
1000590e:	e8 fc ff ff ff       	call   1000590f <rgtree(Reghive_Tag*, int, int)+0x1c>	1000590f: R_386_PC32	Dbg::kprintf(char const*, ...)
10005913:	83 c4 10             	add    esp,0x10
10005916:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
1000591a:	0f 8e a9 00 00 00    	jle    100059c9 <rgtree(Reghive_Tag*, int, int)+0xd6>
10005920:	83 ec 04             	sub    esp,0x4
10005923:	6a 32                	push   0x32
10005925:	6a 00                	push   0x0
10005927:	8d 45 be             	lea    eax,[ebp-0x42]
1000592a:	50                   	push   eax
1000592b:	e8 fc ff ff ff       	call   1000592c <rgtree(Reghive_Tag*, int, int)+0x39>	1000592c: R_386_PC32	memset
10005930:	83 c4 10             	add    esp,0x10
10005933:	83 ec 04             	sub    esp,0x4
10005936:	8d 45 be             	lea    eax,[ebp-0x42]
10005939:	50                   	push   eax
1000593a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000593d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005940:	e8 fc ff ff ff       	call   10005941 <rgtree(Reghive_Tag*, int, int)+0x4e>	10005941: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
10005945:	83 c4 10             	add    esp,0x10
10005948:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000594b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10005952:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10005955:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10005958:	7d 15                	jge    1000596f <rgtree(Reghive_Tag*, int, int)+0x7c>
1000595a:	83 ec 0c             	sub    esp,0xc
1000595d:	68 3f b2 00 10       	push   0x1000b23f	1000595e: R_386_32	.text
10005962:	e8 fc ff ff ff       	call   10005963 <rgtree(Reghive_Tag*, int, int)+0x70>	10005963: R_386_PC32	Dbg::kprintf(char const*, ...)
10005967:	83 c4 10             	add    esp,0x10
1000596a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000596d:	eb e3                	jmp    10005952 <rgtree(Reghive_Tag*, int, int)+0x5f>
1000596f:	83 ec 08             	sub    esp,0x8
10005972:	8d 45 be             	lea    eax,[ebp-0x42]
10005975:	50                   	push   eax
10005976:	68 93 b7 00 10       	push   0x1000b793	10005977: R_386_32	.text
1000597b:	e8 fc ff ff ff       	call   1000597c <rgtree(Reghive_Tag*, int, int)+0x89>	1000597c: R_386_PC32	Dbg::kprintf(char const*, ...)
10005980:	83 c4 10             	add    esp,0x10
10005983:	83 7d f0 4e          	cmp    DWORD PTR [ebp-0x10],0x4e
10005987:	75 27                	jne    100059b0 <rgtree(Reghive_Tag*, int, int)+0xbd>
10005989:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000598c:	8d 58 04             	lea    ebx,[eax+0x4]
1000598f:	83 ec 08             	sub    esp,0x8
10005992:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10005995:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005998:	e8 fc ff ff ff       	call   10005999 <rgtree(Reghive_Tag*, int, int)+0xa6>	10005999: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000599d:	83 c4 10             	add    esp,0x10
100059a0:	83 ec 04             	sub    esp,0x4
100059a3:	53                   	push   ebx
100059a4:	50                   	push   eax
100059a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100059a8:	e8 fc ff ff ff       	call   100059a9 <rgtree(Reghive_Tag*, int, int)+0xb6>	100059a9: R_386_PC32	rgtree(Reghive_Tag*, int, int)
100059ad:	83 c4 10             	add    esp,0x10
100059b0:	83 ec 08             	sub    esp,0x8
100059b3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100059b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100059b9:	e8 fc ff ff ff       	call   100059ba <rgtree(Reghive_Tag*, int, int)+0xc7>	100059ba: R_386_PC32	CmGetNext(Reghive_Tag*, int)
100059be:	83 c4 10             	add    esp,0x10
100059c1:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100059c4:	e9 4d ff ff ff       	jmp    10005916 <rgtree(Reghive_Tag*, int, int)+0x23>
100059c9:	90                   	nop
100059ca:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100059cd:	c9                   	leave  
100059ce:	c3                   	ret    

100059cf <getRegsafeName(char*, char*)>:
100059cf:	55                   	push   ebp
100059d0:	89 e5                	mov    ebp,esp
100059d2:	83 ec 10             	sub    esp,0x10
100059d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100059d8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100059db:	e8 fc ff ff ff       	call   100059dc <getRegsafeName(char*, char*)+0xd>	100059dc: R_386_PC32	strcpy
100059e0:	83 c4 08             	add    esp,0x8
100059e3:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
100059ea:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
100059ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100059f0:	01 d0                	add    eax,edx
100059f2:	8a 00                	mov    al,BYTE PTR [eax]
100059f4:	84 c0                	test   al,al
100059f6:	74 7f                	je     10005a77 <getRegsafeName(char*, char*)+0xa8>
100059f8:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
100059fb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100059fe:	01 d0                	add    eax,edx
10005a00:	8a 00                	mov    al,BYTE PTR [eax]
10005a02:	3c 60                	cmp    al,0x60
10005a04:	7e 42                	jle    10005a48 <getRegsafeName(char*, char*)+0x79>
10005a06:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005a09:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005a0c:	01 d0                	add    eax,edx
10005a0e:	8a 00                	mov    al,BYTE PTR [eax]
10005a10:	3c 7a                	cmp    al,0x7a
10005a12:	7f 34                	jg     10005a48 <getRegsafeName(char*, char*)+0x79>
10005a14:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005a17:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005a1a:	01 d0                	add    eax,edx
10005a1c:	8a 00                	mov    al,BYTE PTR [eax]
10005a1e:	8d 48 9f             	lea    ecx,[eax-0x61]
10005a21:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005a24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005a27:	01 d0                	add    eax,edx
10005a29:	88 ca                	mov    dl,cl
10005a2b:	88 10                	mov    BYTE PTR [eax],dl
10005a2d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005a30:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005a33:	01 d0                	add    eax,edx
10005a35:	8a 00                	mov    al,BYTE PTR [eax]
10005a37:	8d 48 41             	lea    ecx,[eax+0x41]
10005a3a:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005a3d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005a40:	01 d0                	add    eax,edx
10005a42:	88 ca                	mov    dl,cl
10005a44:	88 10                	mov    BYTE PTR [eax],dl
10005a46:	eb 27                	jmp    10005a6f <getRegsafeName(char*, char*)+0xa0>
10005a48:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005a4b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005a4e:	01 d0                	add    eax,edx
10005a50:	8a 00                	mov    al,BYTE PTR [eax]
10005a52:	3c 40                	cmp    al,0x40
10005a54:	7e 0e                	jle    10005a64 <getRegsafeName(char*, char*)+0x95>
10005a56:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005a59:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005a5c:	01 d0                	add    eax,edx
10005a5e:	8a 00                	mov    al,BYTE PTR [eax]
10005a60:	3c 5a                	cmp    al,0x5a
10005a62:	7e 0b                	jle    10005a6f <getRegsafeName(char*, char*)+0xa0>
10005a64:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005a67:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005a6a:	01 d0                	add    eax,edx
10005a6c:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10005a6f:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10005a72:	e9 73 ff ff ff       	jmp    100059ea <getRegsafeName(char*, char*)+0x1b>
10005a77:	90                   	nop
10005a78:	c9                   	leave  
10005a79:	c3                   	ret    

10005a7a <begin(void*)>:
10005a7a:	55                   	push   ebp
10005a7b:	89 e5                	mov    ebp,esp
10005a7d:	57                   	push   edi
10005a7e:	56                   	push   esi
10005a7f:	53                   	push   ebx
10005a80:	81 ec 6c 07 00 00    	sub    esp,0x76c
10005a86:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
10005a8a:	a1 00 00 00 00       	mov    eax,ds:0x0	10005a8b: R_386_32	keBootSettings
10005a8f:	83 e0 02             	and    eax,0x2
10005a92:	85 c0                	test   eax,eax
10005a94:	0f 95 c0             	setne  al
10005a97:	a2 00 00 00 00       	mov    ds:0x0,al	10005a98: R_386_32	safemode
10005a9c:	83 ec 0c             	sub    esp,0xc
10005a9f:	68 14 01 00 00       	push   0x114
10005aa4:	e8 fc ff ff ff       	call   10005aa5 <begin(void*)+0x2b>	10005aa5: R_386_PC32	operator new(unsigned long)
10005aa9:	83 c4 10             	add    esp,0x10
10005aac:	89 c3                	mov    ebx,eax
10005aae:	a1 00 00 00 00       	mov    eax,ds:0x0	10005aaf: R_386_32	kernelProcess
10005ab3:	83 ec 04             	sub    esp,0x4
10005ab6:	50                   	push   eax
10005ab7:	68 98 b7 00 10       	push   0x1000b798	10005ab8: R_386_32	.text
10005abc:	53                   	push   ebx
10005abd:	e8 fc ff ff ff       	call   10005abe <begin(void*)+0x44>	10005abe: R_386_PC32	File::File(char const*, Process*)
10005ac2:	83 c4 10             	add    esp,0x10
10005ac5:	89 5d b4             	mov    DWORD PTR [ebp-0x4c],ebx
10005ac8:	83 7d b4 00          	cmp    DWORD PTR [ebp-0x4c],0x0
10005acc:	75 10                	jne    10005ade <begin(void*)+0x64>
10005ace:	83 ec 0c             	sub    esp,0xc
10005ad1:	68 b6 b7 00 10       	push   0x1000b7b6	10005ad2: R_386_32	.text
10005ad6:	e8 fc ff ff ff       	call   10005ad7 <begin(void*)+0x5d>	10005ad7: R_386_PC32	KePanic(char const*)
10005adb:	83 c4 10             	add    esp,0x10
10005ade:	83 ec 08             	sub    esp,0x8
10005ae1:	6a 01                	push   0x1
10005ae3:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10005ae6:	e8 fc ff ff ff       	call   10005ae7 <begin(void*)+0x6d>	10005ae7: R_386_PC32	File::open(FileOpenMode)
10005aeb:	83 c4 10             	add    esp,0x10
10005aee:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
10005af1:	83 7d b0 00          	cmp    DWORD PTR [ebp-0x50],0x0
10005af5:	75 10                	jne    10005b07 <begin(void*)+0x8d>
10005af7:	83 ec 0c             	sub    esp,0xc
10005afa:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10005afd:	e8 fc ff ff ff       	call   10005afe <begin(void*)+0x84>	10005afe: R_386_PC32	File::close()
10005b02:	83 c4 10             	add    esp,0x10
10005b05:	eb 04                	jmp    10005b0b <begin(void*)+0x91>
10005b07:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
10005b0b:	83 7d b4 00          	cmp    DWORD PTR [ebp-0x4c],0x0
10005b0f:	74 15                	je     10005b26 <begin(void*)+0xac>
10005b11:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
10005b14:	8b 00                	mov    eax,DWORD PTR [eax]
10005b16:	83 c0 08             	add    eax,0x8
10005b19:	8b 00                	mov    eax,DWORD PTR [eax]
10005b1b:	83 ec 0c             	sub    esp,0xc
10005b1e:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10005b21:	ff d0                	call   eax
10005b23:	83 c4 10             	add    esp,0x10
10005b26:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10005b28: R_386_32	KeIsPreemptionOn
10005b2d:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10005b31:	74 0f                	je     10005b42 <begin(void*)+0xc8>
10005b33:	83 ec 0c             	sub    esp,0xc
10005b36:	6a 00                	push   0x0
10005b38:	e8 fc ff ff ff       	call   10005b39 <begin(void*)+0xbf>	10005b39: R_386_PC32	firstRun(bool)
10005b3d:	83 c4 10             	add    esp,0x10
10005b40:	eb 05                	jmp    10005b47 <begin(void*)+0xcd>
10005b42:	e8 fc ff ff ff       	call   10005b43 <begin(void*)+0xc9>	10005b43: R_386_PC32	loadExtensions()
10005b47:	8d 45 88             	lea    eax,[ebp-0x78]
10005b4a:	bb b4 bd 00 10       	mov    ebx,0x1000bdb4	10005b4b: R_386_32	.text
10005b4f:	ba 04 00 00 00       	mov    edx,0x4
10005b54:	89 c7                	mov    edi,eax
10005b56:	89 de                	mov    esi,ebx
10005b58:	89 d1                	mov    ecx,edx
10005b5a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005b5c:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10005b60:	0f 84 01 14 00 00    	je     10006f67 <begin(void*)+0x14ed>
10005b66:	83 ec 0c             	sub    esp,0xc
10005b69:	68 c4 07 00 00       	push   0x7c4
10005b6e:	e8 fc ff ff ff       	call   10005b6f <begin(void*)+0xf5>	10005b6f: R_386_PC32	operator new(unsigned long)
10005b73:	83 c4 10             	add    esp,0x10
10005b76:	89 c3                	mov    ebx,eax
10005b78:	8d 45 88             	lea    eax,[ebp-0x78]
10005b7b:	50                   	push   eax
10005b7c:	6a 00                	push   0x0
10005b7e:	68 c6 b7 00 10       	push   0x1000b7c6	10005b7f: R_386_32	.text
10005b83:	53                   	push   ebx
10005b84:	e8 fc ff ff ff       	call   10005b85 <begin(void*)+0x10b>	10005b85: R_386_PC32	Process::Process(char const*, Process*, char**)
10005b89:	83 c4 10             	add    esp,0x10
10005b8c:	89 5d ac             	mov    DWORD PTR [ebp-0x54],ebx
10005b8f:	83 ec 0c             	sub    esp,0xc
10005b92:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10005b95:	e8 fc ff ff ff       	call   10005b96 <begin(void*)+0x11c>	10005b96: R_386_PC32	Process::createUserThread()
10005b9a:	83 c4 10             	add    esp,0x10
10005b9d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005b9f: R_386_32	VgaText::hiddenOut
10005ba4:	a1 00 00 00 00       	mov    eax,ds:0x0	10005ba5: R_386_32	term
10005ba9:	83 ec 0c             	sub    esp,0xc
10005bac:	50                   	push   eax
10005bad:	e8 fc ff ff ff       	call   10005bae <begin(void*)+0x134>	10005bae: R_386_PC32	setActiveTerminal(VgaText*)
10005bb2:	83 c4 10             	add    esp,0x10
10005bb5:	e8 fc ff ff ff       	call   10005bb6 <begin(void*)+0x13c>	10005bb6: R_386_PC32	drawBootScreen()
10005bba:	83 ec 0c             	sub    esp,0xc
10005bbd:	68 61 b6 00 10       	push   0x1000b661	10005bbe: R_386_32	.text
10005bc2:	6a 0d                	push   0xd
10005bc4:	6a 32                	push   0x32
10005bc6:	6a 05                	push   0x5
10005bc8:	6a 16                	push   0x16
10005bca:	e8 fc ff ff ff       	call   10005bcb <begin(void*)+0x151>	10005bcb: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005bcf:	83 c4 20             	add    esp,0x20
10005bd2:	83 ec 0c             	sub    esp,0xc
10005bd5:	6a 03                	push   0x3
10005bd7:	e8 fc ff ff ff       	call   10005bd8 <begin(void*)+0x15e>	10005bd8: R_386_PC32	bootInstallTasks(int)
10005bdc:	83 c4 10             	add    esp,0x10
10005bdf:	a0 00 00 00 00       	mov    al,ds:0x0	10005be0: R_386_32	safemode
10005be4:	83 f0 01             	xor    eax,0x1
10005be7:	a2 00 00 00 00       	mov    ds:0x0,al	10005be8: R_386_32	VgaText::hiddenOut
10005bec:	a0 00 00 00 00       	mov    al,ds:0x0	10005bed: R_386_32	safemode
10005bf1:	84 c0                	test   al,al
10005bf3:	74 43                	je     10005c38 <begin(void*)+0x1be>
10005bf5:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10005bf8:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
10005bfe:	83 ec 0c             	sub    esp,0xc
10005c01:	50                   	push   eax
10005c02:	e8 fc ff ff ff       	call   10005c03 <begin(void*)+0x189>	10005c03: R_386_PC32	setActiveTerminal(VgaText*)
10005c07:	83 c4 10             	add    esp,0x10
10005c0a:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10005c0d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
10005c13:	83 ec 08             	sub    esp,0x8
10005c16:	6a 00                	push   0x0
10005c18:	50                   	push   eax
10005c19:	e8 fc ff ff ff       	call   10005c1a <begin(void*)+0x1a0>	10005c1a: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
10005c1e:	83 c4 10             	add    esp,0x10
10005c21:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10005c24:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
10005c2a:	83 ec 08             	sub    esp,0x8
10005c2d:	6a 0f                	push   0xf
10005c2f:	50                   	push   eax
10005c30:	e8 fc ff ff ff       	call   10005c31 <begin(void*)+0x1b7>	10005c31: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
10005c35:	83 c4 10             	add    esp,0x10
10005c38:	83 ec 0c             	sub    esp,0xc
10005c3b:	68 14 01 00 00       	push   0x114
10005c40:	e8 fc ff ff ff       	call   10005c41 <begin(void*)+0x1c7>	10005c41: R_386_PC32	operator new(unsigned long)
10005c45:	83 c4 10             	add    esp,0x10
10005c48:	89 c3                	mov    ebx,eax
10005c4a:	a1 00 00 00 00       	mov    eax,ds:0x0	10005c4b: R_386_32	kernelProcess
10005c4f:	83 ec 04             	sub    esp,0x4
10005c52:	50                   	push   eax
10005c53:	68 e3 b7 00 10       	push   0x1000b7e3	10005c54: R_386_32	.text
10005c58:	53                   	push   ebx
10005c59:	e8 fc ff ff ff       	call   10005c5a <begin(void*)+0x1e0>	10005c5a: R_386_PC32	File::File(char const*, Process*)
10005c5e:	83 c4 10             	add    esp,0x10
10005c61:	89 5d a8             	mov    DWORD PTR [ebp-0x58],ebx
10005c64:	83 ec 08             	sub    esp,0x8
10005c67:	6a 01                	push   0x1
10005c69:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005c6c:	e8 fc ff ff ff       	call   10005c6d <begin(void*)+0x1f3>	10005c6d: R_386_PC32	File::open(FileOpenMode)
10005c71:	83 c4 10             	add    esp,0x10
10005c74:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10005c77:	83 7d a4 00          	cmp    DWORD PTR [ebp-0x5c],0x0
10005c7b:	75 39                	jne    10005cb6 <begin(void*)+0x23c>
10005c7d:	83 ec 0c             	sub    esp,0xc
10005c80:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005c83:	e8 fc ff ff ff       	call   10005c84 <begin(void*)+0x20a>	10005c84: R_386_PC32	File::close()
10005c88:	83 c4 10             	add    esp,0x10
10005c8b:	83 ec 0c             	sub    esp,0xc
10005c8e:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005c91:	e8 fc ff ff ff       	call   10005c92 <begin(void*)+0x218>	10005c92: R_386_PC32	File::unlink()
10005c96:	83 c4 10             	add    esp,0x10
10005c99:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
10005c9d:	74 46                	je     10005ce5 <begin(void*)+0x26b>
10005c9f:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10005ca2:	8b 00                	mov    eax,DWORD PTR [eax]
10005ca4:	83 c0 08             	add    eax,0x8
10005ca7:	8b 00                	mov    eax,DWORD PTR [eax]
10005ca9:	83 ec 0c             	sub    esp,0xc
10005cac:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005caf:	ff d0                	call   eax
10005cb1:	83 c4 10             	add    esp,0x10
10005cb4:	eb 2f                	jmp    10005ce5 <begin(void*)+0x26b>
10005cb6:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
10005cba:	74 15                	je     10005cd1 <begin(void*)+0x257>
10005cbc:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10005cbf:	8b 00                	mov    eax,DWORD PTR [eax]
10005cc1:	83 c0 08             	add    eax,0x8
10005cc4:	8b 00                	mov    eax,DWORD PTR [eax]
10005cc6:	83 ec 0c             	sub    esp,0xc
10005cc9:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005ccc:	ff d0                	call   eax
10005cce:	83 c4 10             	add    esp,0x10
10005cd1:	83 ec 08             	sub    esp,0x8
10005cd4:	6a 00                	push   0x0
10005cd6:	6a 01                	push   0x1
10005cd8:	e8 fc ff ff ff       	call   10005cd9 <begin(void*)+0x25f>	10005cd9: R_386_PC32	sleep(unsigned long long)
10005cdd:	83 c4 10             	add    esp,0x10
10005ce0:	e9 53 ff ff ff       	jmp    10005c38 <begin(void*)+0x1be>
10005ce5:	90                   	nop
10005ce6:	83 ec 08             	sub    esp,0x8
10005ce9:	6a 00                	push   0x0
10005ceb:	6a 01                	push   0x1
10005ced:	e8 fc ff ff ff       	call   10005cee <begin(void*)+0x274>	10005cee: R_386_PC32	sleep(unsigned long long)
10005cf2:	83 c4 10             	add    esp,0x10
10005cf5:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005cf7: R_386_32	VgaText::hiddenOut
10005cfc:	a1 00 00 00 00       	mov    eax,ds:0x0	10005cfd: R_386_32	term
10005d01:	83 ec 0c             	sub    esp,0xc
10005d04:	50                   	push   eax
10005d05:	e8 fc ff ff ff       	call   10005d06 <begin(void*)+0x28c>	10005d06: R_386_PC32	setActiveTerminal(VgaText*)
10005d0a:	83 c4 10             	add    esp,0x10
10005d0d:	e8 fc ff ff ff       	call   10005d0e <begin(void*)+0x294>	10005d0e: R_386_PC32	drawBootScreen()
10005d12:	83 ec 0c             	sub    esp,0xc
10005d15:	68 61 b6 00 10       	push   0x1000b661	10005d16: R_386_32	.text
10005d1a:	6a 0d                	push   0xd
10005d1c:	6a 32                	push   0x32
10005d1e:	6a 05                	push   0x5
10005d20:	6a 16                	push   0x16
10005d22:	e8 fc ff ff ff       	call   10005d23 <begin(void*)+0x2a9>	10005d23: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005d27:	83 c4 20             	add    esp,0x20
10005d2a:	83 ec 0c             	sub    esp,0xc
10005d2d:	6a 04                	push   0x4
10005d2f:	e8 fc ff ff ff       	call   10005d30 <begin(void*)+0x2b6>	10005d30: R_386_PC32	bootInstallTasks(int)
10005d34:	83 c4 10             	add    esp,0x10
10005d37:	eb 01                	jmp    10005d3a <begin(void*)+0x2c0>
10005d39:	90                   	nop
10005d3a:	83 ec 0c             	sub    esp,0xc
10005d3d:	6a 05                	push   0x5
10005d3f:	e8 fc ff ff ff       	call   10005d40 <begin(void*)+0x2c6>	10005d40: R_386_PC32	bootInstallTasks(int)
10005d44:	83 c4 10             	add    esp,0x10
10005d47:	83 ec 0c             	sub    esp,0xc
10005d4a:	68 f0 b7 00 10       	push   0x1000b7f0	10005d4b: R_386_32	.text
10005d4f:	e8 fc ff ff ff       	call   10005d50 <begin(void*)+0x2d6>	10005d50: R_386_PC32	CmOpen(char const*)
10005d54:	83 c4 10             	add    esp,0x10
10005d57:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10005d5a:	a0 00 00 00 00       	mov    al,ds:0x0	10005d5b: R_386_32	createNewUserMode
10005d5f:	83 f0 01             	xor    eax,0x1
10005d62:	84 c0                	test   al,al
10005d64:	74 15                	je     10005d7b <begin(void*)+0x301>
10005d66:	83 ec 04             	sub    esp,0x4
10005d69:	68 15 b8 00 10       	push   0x1000b815	10005d6a: R_386_32	.text
10005d6e:	6a 00                	push   0x0
10005d70:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005d73:	e8 fc ff ff ff       	call   10005d74 <begin(void*)+0x2fa>	10005d74: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005d78:	83 c4 10             	add    esp,0x10
10005d7b:	83 ec 08             	sub    esp,0x8
10005d7e:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10005d84:	50                   	push   eax
10005d85:	68 00 00 00 00       	push   0x0	10005d86: R_386_32	currName
10005d8a:	e8 fc ff ff ff       	call   10005d8b <begin(void*)+0x311>	10005d8b: R_386_PC32	getRegsafeName(char*, char*)
10005d8f:	83 c4 10             	add    esp,0x10
10005d92:	83 ec 08             	sub    esp,0x8
10005d95:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10005d9b:	50                   	push   eax
10005d9c:	68 1c b8 00 10       	push   0x1000b81c	10005d9d: R_386_32	.text
10005da1:	e8 fc ff ff ff       	call   10005da2 <begin(void*)+0x328>	10005da2: R_386_PC32	Dbg::kprintf(char const*, ...)
10005da6:	83 c4 10             	add    esp,0x10
10005da9:	83 ec 08             	sub    esp,0x8
10005dac:	68 2e b8 00 10       	push   0x1000b82e	10005dad: R_386_32	.text
10005db1:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10005db7:	50                   	push   eax
10005db8:	e8 fc ff ff ff       	call   10005db9 <begin(void*)+0x33f>	10005db9: R_386_PC32	strcpy
10005dbd:	83 c4 10             	add    esp,0x10
10005dc0:	83 ec 08             	sub    esp,0x8
10005dc3:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10005dc9:	50                   	push   eax
10005dca:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10005dd0:	50                   	push   eax
10005dd1:	e8 fc ff ff ff       	call   10005dd2 <begin(void*)+0x358>	10005dd2: R_386_PC32	strcat
10005dd6:	83 c4 10             	add    esp,0x10
10005dd9:	83 ec 08             	sub    esp,0x8
10005ddc:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10005de2:	50                   	push   eax
10005de3:	68 3c b8 00 10       	push   0x1000b83c	10005de4: R_386_32	.text
10005de8:	e8 fc ff ff ff       	call   10005de9 <begin(void*)+0x36f>	10005de9: R_386_PC32	Dbg::kprintf(char const*, ...)
10005ded:	83 c4 10             	add    esp,0x10
10005df0:	a0 00 00 00 00       	mov    al,ds:0x0	10005df1: R_386_32	createNewUserMode
10005df5:	83 f0 01             	xor    eax,0x1
10005df8:	84 c0                	test   al,al
10005dfa:	0f 84 60 03 00 00    	je     10006160 <begin(void*)+0x6e6>
10005e00:	83 ec 08             	sub    esp,0x8
10005e03:	68 15 b8 00 10       	push   0x1000b815	10005e04: R_386_32	.text
10005e08:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e0b:	e8 fc ff ff ff       	call   10005e0c <begin(void*)+0x392>	10005e0c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005e10:	83 c4 10             	add    esp,0x10
10005e13:	83 ec 08             	sub    esp,0x8
10005e16:	50                   	push   eax
10005e17:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e1a:	e8 fc ff ff ff       	call   10005e1b <begin(void*)+0x3a1>	10005e1b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005e1f:	83 c4 10             	add    esp,0x10
10005e22:	83 ec 04             	sub    esp,0x4
10005e25:	68 4f b8 00 10       	push   0x1000b84f	10005e26: R_386_32	.text
10005e2a:	50                   	push   eax
10005e2b:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e2e:	e8 fc ff ff ff       	call   10005e2f <begin(void*)+0x3b5>	10005e2f: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005e33:	83 c4 10             	add    esp,0x10
10005e36:	83 ec 08             	sub    esp,0x8
10005e39:	68 15 b8 00 10       	push   0x1000b815	10005e3a: R_386_32	.text
10005e3e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e41:	e8 fc ff ff ff       	call   10005e42 <begin(void*)+0x3c8>	10005e42: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005e46:	83 c4 10             	add    esp,0x10
10005e49:	83 ec 08             	sub    esp,0x8
10005e4c:	50                   	push   eax
10005e4d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e50:	e8 fc ff ff ff       	call   10005e51 <begin(void*)+0x3d7>	10005e51: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005e55:	83 c4 10             	add    esp,0x10
10005e58:	83 ec 04             	sub    esp,0x4
10005e5b:	68 55 b8 00 10       	push   0x1000b855	10005e5c: R_386_32	.text
10005e60:	50                   	push   eax
10005e61:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e64:	e8 fc ff ff ff       	call   10005e65 <begin(void*)+0x3eb>	10005e65: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005e69:	83 c4 10             	add    esp,0x10
10005e6c:	83 ec 08             	sub    esp,0x8
10005e6f:	68 15 b8 00 10       	push   0x1000b815	10005e70: R_386_32	.text
10005e74:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e77:	e8 fc ff ff ff       	call   10005e78 <begin(void*)+0x3fe>	10005e78: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005e7c:	83 c4 10             	add    esp,0x10
10005e7f:	83 ec 08             	sub    esp,0x8
10005e82:	50                   	push   eax
10005e83:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e86:	e8 fc ff ff ff       	call   10005e87 <begin(void*)+0x40d>	10005e87: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005e8b:	83 c4 10             	add    esp,0x10
10005e8e:	83 ec 04             	sub    esp,0x4
10005e91:	68 5a b8 00 10       	push   0x1000b85a	10005e92: R_386_32	.text
10005e96:	50                   	push   eax
10005e97:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e9a:	e8 fc ff ff ff       	call   10005e9b <begin(void*)+0x421>	10005e9b: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005e9f:	83 c4 10             	add    esp,0x10
10005ea2:	83 ec 08             	sub    esp,0x8
10005ea5:	68 15 b8 00 10       	push   0x1000b815	10005ea6: R_386_32	.text
10005eaa:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005ead:	e8 fc ff ff ff       	call   10005eae <begin(void*)+0x434>	10005eae: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005eb2:	83 c4 10             	add    esp,0x10
10005eb5:	83 ec 08             	sub    esp,0x8
10005eb8:	50                   	push   eax
10005eb9:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005ebc:	e8 fc ff ff ff       	call   10005ebd <begin(void*)+0x443>	10005ebd: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005ec1:	83 c4 10             	add    esp,0x10
10005ec4:	83 ec 04             	sub    esp,0x4
10005ec7:	68 5f b8 00 10       	push   0x1000b85f	10005ec8: R_386_32	.text
10005ecc:	50                   	push   eax
10005ecd:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005ed0:	e8 fc ff ff ff       	call   10005ed1 <begin(void*)+0x457>	10005ed1: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005ed5:	83 c4 10             	add    esp,0x10
10005ed8:	83 ec 08             	sub    esp,0x8
10005edb:	68 15 b8 00 10       	push   0x1000b815	10005edc: R_386_32	.text
10005ee0:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005ee3:	e8 fc ff ff ff       	call   10005ee4 <begin(void*)+0x46a>	10005ee4: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005ee8:	83 c4 10             	add    esp,0x10
10005eeb:	83 ec 08             	sub    esp,0x8
10005eee:	50                   	push   eax
10005eef:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005ef2:	e8 fc ff ff ff       	call   10005ef3 <begin(void*)+0x479>	10005ef3: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005ef7:	83 c4 10             	add    esp,0x10
10005efa:	83 ec 04             	sub    esp,0x4
10005efd:	68 65 b8 00 10       	push   0x1000b865	10005efe: R_386_32	.text
10005f02:	50                   	push   eax
10005f03:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f06:	e8 fc ff ff ff       	call   10005f07 <begin(void*)+0x48d>	10005f07: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005f0b:	83 c4 10             	add    esp,0x10
10005f0e:	83 ec 08             	sub    esp,0x8
10005f11:	68 6f b8 00 10       	push   0x1000b86f	10005f12: R_386_32	.text
10005f16:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f19:	e8 fc ff ff ff       	call   10005f1a <begin(void*)+0x4a0>	10005f1a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005f1e:	83 c4 10             	add    esp,0x10
10005f21:	83 ec 08             	sub    esp,0x8
10005f24:	50                   	push   eax
10005f25:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f28:	e8 fc ff ff ff       	call   10005f29 <begin(void*)+0x4af>	10005f29: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005f2d:	83 c4 10             	add    esp,0x10
10005f30:	83 ec 04             	sub    esp,0x4
10005f33:	68 80 b8 00 10       	push   0x1000b880	10005f34: R_386_32	.text
10005f38:	50                   	push   eax
10005f39:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f3c:	e8 fc ff ff ff       	call   10005f3d <begin(void*)+0x4c3>	10005f3d: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005f41:	83 c4 10             	add    esp,0x10
10005f44:	83 ec 08             	sub    esp,0x8
10005f47:	68 6f b8 00 10       	push   0x1000b86f	10005f48: R_386_32	.text
10005f4c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f4f:	e8 fc ff ff ff       	call   10005f50 <begin(void*)+0x4d6>	10005f50: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005f54:	83 c4 10             	add    esp,0x10
10005f57:	83 ec 08             	sub    esp,0x8
10005f5a:	50                   	push   eax
10005f5b:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f5e:	e8 fc ff ff ff       	call   10005f5f <begin(void*)+0x4e5>	10005f5f: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005f63:	83 c4 10             	add    esp,0x10
10005f66:	83 ec 04             	sub    esp,0x4
10005f69:	68 85 b8 00 10       	push   0x1000b885	10005f6a: R_386_32	.text
10005f6e:	50                   	push   eax
10005f6f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f72:	e8 fc ff ff ff       	call   10005f73 <begin(void*)+0x4f9>	10005f73: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005f77:	83 c4 10             	add    esp,0x10
10005f7a:	83 ec 08             	sub    esp,0x8
10005f7d:	68 6f b8 00 10       	push   0x1000b86f	10005f7e: R_386_32	.text
10005f82:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f85:	e8 fc ff ff ff       	call   10005f86 <begin(void*)+0x50c>	10005f86: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005f8a:	83 c4 10             	add    esp,0x10
10005f8d:	83 ec 08             	sub    esp,0x8
10005f90:	50                   	push   eax
10005f91:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f94:	e8 fc ff ff ff       	call   10005f95 <begin(void*)+0x51b>	10005f95: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005f99:	83 c4 10             	add    esp,0x10
10005f9c:	83 ec 04             	sub    esp,0x4
10005f9f:	68 8a b8 00 10       	push   0x1000b88a	10005fa0: R_386_32	.text
10005fa4:	50                   	push   eax
10005fa5:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005fa8:	e8 fc ff ff ff       	call   10005fa9 <begin(void*)+0x52f>	10005fa9: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005fad:	83 c4 10             	add    esp,0x10
10005fb0:	83 ec 08             	sub    esp,0x8
10005fb3:	68 6f b8 00 10       	push   0x1000b86f	10005fb4: R_386_32	.text
10005fb8:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005fbb:	e8 fc ff ff ff       	call   10005fbc <begin(void*)+0x542>	10005fbc: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005fc0:	83 c4 10             	add    esp,0x10
10005fc3:	83 ec 08             	sub    esp,0x8
10005fc6:	50                   	push   eax
10005fc7:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005fca:	e8 fc ff ff ff       	call   10005fcb <begin(void*)+0x551>	10005fcb: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005fcf:	83 c4 10             	add    esp,0x10
10005fd2:	83 ec 04             	sub    esp,0x4
10005fd5:	68 90 b8 00 10       	push   0x1000b890	10005fd6: R_386_32	.text
10005fda:	50                   	push   eax
10005fdb:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005fde:	e8 fc ff ff ff       	call   10005fdf <begin(void*)+0x565>	10005fdf: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005fe3:	83 c4 10             	add    esp,0x10
10005fe6:	83 ec 08             	sub    esp,0x8
10005fe9:	68 6f b8 00 10       	push   0x1000b86f	10005fea: R_386_32	.text
10005fee:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005ff1:	e8 fc ff ff ff       	call   10005ff2 <begin(void*)+0x578>	10005ff2: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005ff6:	83 c4 10             	add    esp,0x10
10005ff9:	83 ec 08             	sub    esp,0x8
10005ffc:	50                   	push   eax
10005ffd:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006000:	e8 fc ff ff ff       	call   10006001 <begin(void*)+0x587>	10006001: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006005:	83 c4 10             	add    esp,0x10
10006008:	83 ec 04             	sub    esp,0x4
1000600b:	68 95 b8 00 10       	push   0x1000b895	1000600c: R_386_32	.text
10006010:	50                   	push   eax
10006011:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006014:	e8 fc ff ff ff       	call   10006015 <begin(void*)+0x59b>	10006015: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10006019:	83 c4 10             	add    esp,0x10
1000601c:	83 ec 08             	sub    esp,0x8
1000601f:	68 6f b8 00 10       	push   0x1000b86f	10006020: R_386_32	.text
10006024:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006027:	e8 fc ff ff ff       	call   10006028 <begin(void*)+0x5ae>	10006028: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000602c:	83 c4 10             	add    esp,0x10
1000602f:	83 ec 08             	sub    esp,0x8
10006032:	50                   	push   eax
10006033:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006036:	e8 fc ff ff ff       	call   10006037 <begin(void*)+0x5bd>	10006037: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000603b:	83 c4 10             	add    esp,0x10
1000603e:	83 ec 04             	sub    esp,0x4
10006041:	68 9b b8 00 10       	push   0x1000b89b	10006042: R_386_32	.text
10006046:	50                   	push   eax
10006047:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000604a:	e8 fc ff ff ff       	call   1000604b <begin(void*)+0x5d1>	1000604b: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000604f:	83 c4 10             	add    esp,0x10
10006052:	83 ec 08             	sub    esp,0x8
10006055:	68 6f b8 00 10       	push   0x1000b86f	10006056: R_386_32	.text
1000605a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000605d:	e8 fc ff ff ff       	call   1000605e <begin(void*)+0x5e4>	1000605e: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006062:	83 c4 10             	add    esp,0x10
10006065:	83 ec 08             	sub    esp,0x8
10006068:	50                   	push   eax
10006069:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000606c:	e8 fc ff ff ff       	call   1000606d <begin(void*)+0x5f3>	1000606d: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006071:	83 c4 10             	add    esp,0x10
10006074:	83 ec 04             	sub    esp,0x4
10006077:	68 a6 b8 00 10       	push   0x1000b8a6	10006078: R_386_32	.text
1000607c:	50                   	push   eax
1000607d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006080:	e8 fc ff ff ff       	call   10006081 <begin(void*)+0x607>	10006081: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10006085:	83 c4 10             	add    esp,0x10
10006088:	83 ec 08             	sub    esp,0x8
1000608b:	68 b1 b8 00 10       	push   0x1000b8b1	1000608c: R_386_32	.text
10006090:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006093:	e8 fc ff ff ff       	call   10006094 <begin(void*)+0x61a>	10006094: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006098:	83 c4 10             	add    esp,0x10
1000609b:	83 ec 08             	sub    esp,0x8
1000609e:	50                   	push   eax
1000609f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100060a2:	e8 fc ff ff ff       	call   100060a3 <begin(void*)+0x629>	100060a3: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100060a7:	83 c4 10             	add    esp,0x10
100060aa:	83 ec 04             	sub    esp,0x4
100060ad:	68 bd b8 00 10       	push   0x1000b8bd	100060ae: R_386_32	.text
100060b2:	50                   	push   eax
100060b3:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100060b6:	e8 fc ff ff ff       	call   100060b7 <begin(void*)+0x63d>	100060b7: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100060bb:	83 c4 10             	add    esp,0x10
100060be:	83 ec 08             	sub    esp,0x8
100060c1:	68 c6 b8 00 10       	push   0x1000b8c6	100060c2: R_386_32	.text
100060c6:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100060c9:	e8 fc ff ff ff       	call   100060ca <begin(void*)+0x650>	100060ca: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100060ce:	83 c4 10             	add    esp,0x10
100060d1:	83 ec 08             	sub    esp,0x8
100060d4:	50                   	push   eax
100060d5:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100060d8:	e8 fc ff ff ff       	call   100060d9 <begin(void*)+0x65f>	100060d9: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100060dd:	83 c4 10             	add    esp,0x10
100060e0:	83 ec 04             	sub    esp,0x4
100060e3:	68 d3 b8 00 10       	push   0x1000b8d3	100060e4: R_386_32	.text
100060e8:	50                   	push   eax
100060e9:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100060ec:	e8 fc ff ff ff       	call   100060ed <begin(void*)+0x673>	100060ed: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100060f1:	83 c4 10             	add    esp,0x10
100060f4:	83 ec 08             	sub    esp,0x8
100060f7:	68 c6 b8 00 10       	push   0x1000b8c6	100060f8: R_386_32	.text
100060fc:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100060ff:	e8 fc ff ff ff       	call   10006100 <begin(void*)+0x686>	10006100: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006104:	83 c4 10             	add    esp,0x10
10006107:	83 ec 08             	sub    esp,0x8
1000610a:	50                   	push   eax
1000610b:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000610e:	e8 fc ff ff ff       	call   1000610f <begin(void*)+0x695>	1000610f: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006113:	83 c4 10             	add    esp,0x10
10006116:	83 ec 04             	sub    esp,0x4
10006119:	68 d8 b8 00 10       	push   0x1000b8d8	1000611a: R_386_32	.text
1000611e:	50                   	push   eax
1000611f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006122:	e8 fc ff ff ff       	call   10006123 <begin(void*)+0x6a9>	10006123: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006127:	83 c4 10             	add    esp,0x10
1000612a:	83 ec 08             	sub    esp,0x8
1000612d:	68 c6 b8 00 10       	push   0x1000b8c6	1000612e: R_386_32	.text
10006132:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006135:	e8 fc ff ff ff       	call   10006136 <begin(void*)+0x6bc>	10006136: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000613a:	83 c4 10             	add    esp,0x10
1000613d:	83 ec 08             	sub    esp,0x8
10006140:	50                   	push   eax
10006141:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006144:	e8 fc ff ff ff       	call   10006145 <begin(void*)+0x6cb>	10006145: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006149:	83 c4 10             	add    esp,0x10
1000614c:	83 ec 04             	sub    esp,0x4
1000614f:	68 e0 b8 00 10       	push   0x1000b8e0	10006150: R_386_32	.text
10006154:	50                   	push   eax
10006155:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006158:	e8 fc ff ff ff       	call   10006159 <begin(void*)+0x6df>	10006159: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000615d:	83 c4 10             	add    esp,0x10
10006160:	83 ec 08             	sub    esp,0x8
10006163:	68 eb b8 00 10       	push   0x1000b8eb	10006164: R_386_32	.text
10006168:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000616b:	e8 fc ff ff ff       	call   1000616c <begin(void*)+0x6f2>	1000616c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006170:	83 c4 10             	add    esp,0x10
10006173:	83 ec 08             	sub    esp,0x8
10006176:	50                   	push   eax
10006177:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000617a:	e8 fc ff ff ff       	call   1000617b <begin(void*)+0x701>	1000617b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000617f:	83 c4 10             	add    esp,0x10
10006182:	83 ec 04             	sub    esp,0x4
10006185:	8d 95 48 ff ff ff    	lea    edx,[ebp-0xb8]
1000618b:	52                   	push   edx
1000618c:	50                   	push   eax
1000618d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006190:	e8 fc ff ff ff       	call   10006191 <begin(void*)+0x717>	10006191: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10006195:	83 c4 10             	add    esp,0x10
10006198:	83 ec 08             	sub    esp,0x8
1000619b:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100061a1:	50                   	push   eax
100061a2:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100061a5:	e8 fc ff ff ff       	call   100061a6 <begin(void*)+0x72c>	100061a6: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100061aa:	83 c4 10             	add    esp,0x10
100061ad:	83 ec 08             	sub    esp,0x8
100061b0:	50                   	push   eax
100061b1:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100061b4:	e8 fc ff ff ff       	call   100061b5 <begin(void*)+0x73b>	100061b5: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100061b9:	83 c4 10             	add    esp,0x10
100061bc:	83 ec 04             	sub    esp,0x4
100061bf:	68 f8 b8 00 10       	push   0x1000b8f8	100061c0: R_386_32	.text
100061c4:	50                   	push   eax
100061c5:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100061c8:	e8 fc ff ff ff       	call   100061c9 <begin(void*)+0x74f>	100061c9: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100061cd:	83 c4 10             	add    esp,0x10
100061d0:	83 ec 08             	sub    esp,0x8
100061d3:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100061d9:	50                   	push   eax
100061da:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100061dd:	e8 fc ff ff ff       	call   100061de <begin(void*)+0x764>	100061de: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100061e2:	83 c4 10             	add    esp,0x10
100061e5:	83 ec 08             	sub    esp,0x8
100061e8:	50                   	push   eax
100061e9:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100061ec:	e8 fc ff ff ff       	call   100061ed <begin(void*)+0x773>	100061ed: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100061f1:	83 c4 10             	add    esp,0x10
100061f4:	83 ec 04             	sub    esp,0x4
100061f7:	68 fd b8 00 10       	push   0x1000b8fd	100061f8: R_386_32	.text
100061fc:	50                   	push   eax
100061fd:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006200:	e8 fc ff ff ff       	call   10006201 <begin(void*)+0x787>	10006201: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006205:	83 c4 10             	add    esp,0x10
10006208:	83 ec 08             	sub    esp,0x8
1000620b:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006211:	50                   	push   eax
10006212:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006215:	e8 fc ff ff ff       	call   10006216 <begin(void*)+0x79c>	10006216: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000621a:	83 c4 10             	add    esp,0x10
1000621d:	83 ec 08             	sub    esp,0x8
10006220:	50                   	push   eax
10006221:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006224:	e8 fc ff ff ff       	call   10006225 <begin(void*)+0x7ab>	10006225: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006229:	83 c4 10             	add    esp,0x10
1000622c:	83 ec 04             	sub    esp,0x4
1000622f:	68 06 b9 00 10       	push   0x1000b906	10006230: R_386_32	.text
10006234:	50                   	push   eax
10006235:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006238:	e8 fc ff ff ff       	call   10006239 <begin(void*)+0x7bf>	10006239: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000623d:	83 c4 10             	add    esp,0x10
10006240:	83 ec 08             	sub    esp,0x8
10006243:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006249:	50                   	push   eax
1000624a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000624d:	e8 fc ff ff ff       	call   1000624e <begin(void*)+0x7d4>	1000624e: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006252:	83 c4 10             	add    esp,0x10
10006255:	83 ec 08             	sub    esp,0x8
10006258:	50                   	push   eax
10006259:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000625c:	e8 fc ff ff ff       	call   1000625d <begin(void*)+0x7e3>	1000625d: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006261:	83 c4 10             	add    esp,0x10
10006264:	83 ec 04             	sub    esp,0x4
10006267:	68 12 b9 00 10       	push   0x1000b912	10006268: R_386_32	.text
1000626c:	50                   	push   eax
1000626d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006270:	e8 fc ff ff ff       	call   10006271 <begin(void*)+0x7f7>	10006271: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006275:	83 c4 10             	add    esp,0x10
10006278:	83 ec 08             	sub    esp,0x8
1000627b:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006281:	50                   	push   eax
10006282:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006285:	e8 fc ff ff ff       	call   10006286 <begin(void*)+0x80c>	10006286: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000628a:	83 c4 10             	add    esp,0x10
1000628d:	83 ec 08             	sub    esp,0x8
10006290:	50                   	push   eax
10006291:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006294:	e8 fc ff ff ff       	call   10006295 <begin(void*)+0x81b>	10006295: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006299:	83 c4 10             	add    esp,0x10
1000629c:	83 ec 04             	sub    esp,0x4
1000629f:	68 1a b9 00 10       	push   0x1000b91a	100062a0: R_386_32	.text
100062a4:	50                   	push   eax
100062a5:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100062a8:	e8 fc ff ff ff       	call   100062a9 <begin(void*)+0x82f>	100062a9: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100062ad:	83 c4 10             	add    esp,0x10
100062b0:	83 ec 08             	sub    esp,0x8
100062b3:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100062b9:	50                   	push   eax
100062ba:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100062bd:	e8 fc ff ff ff       	call   100062be <begin(void*)+0x844>	100062be: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100062c2:	83 c4 10             	add    esp,0x10
100062c5:	83 ec 08             	sub    esp,0x8
100062c8:	50                   	push   eax
100062c9:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100062cc:	e8 fc ff ff ff       	call   100062cd <begin(void*)+0x853>	100062cd: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100062d1:	83 c4 10             	add    esp,0x10
100062d4:	83 ec 04             	sub    esp,0x4
100062d7:	68 24 b9 00 10       	push   0x1000b924	100062d8: R_386_32	.text
100062dc:	50                   	push   eax
100062dd:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100062e0:	e8 fc ff ff ff       	call   100062e1 <begin(void*)+0x867>	100062e1: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100062e5:	83 c4 10             	add    esp,0x10
100062e8:	83 ec 08             	sub    esp,0x8
100062eb:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100062f1:	50                   	push   eax
100062f2:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100062f5:	e8 fc ff ff ff       	call   100062f6 <begin(void*)+0x87c>	100062f6: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100062fa:	83 c4 10             	add    esp,0x10
100062fd:	83 ec 08             	sub    esp,0x8
10006300:	50                   	push   eax
10006301:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006304:	e8 fc ff ff ff       	call   10006305 <begin(void*)+0x88b>	10006305: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006309:	83 c4 10             	add    esp,0x10
1000630c:	83 ec 04             	sub    esp,0x4
1000630f:	68 2e b9 00 10       	push   0x1000b92e	10006310: R_386_32	.text
10006314:	50                   	push   eax
10006315:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006318:	e8 fc ff ff ff       	call   10006319 <begin(void*)+0x89f>	10006319: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000631d:	83 c4 10             	add    esp,0x10
10006320:	83 ec 08             	sub    esp,0x8
10006323:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006329:	50                   	push   eax
1000632a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000632d:	e8 fc ff ff ff       	call   1000632e <begin(void*)+0x8b4>	1000632e: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006332:	83 c4 10             	add    esp,0x10
10006335:	83 ec 08             	sub    esp,0x8
10006338:	50                   	push   eax
10006339:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000633c:	e8 fc ff ff ff       	call   1000633d <begin(void*)+0x8c3>	1000633d: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006341:	83 c4 10             	add    esp,0x10
10006344:	83 ec 04             	sub    esp,0x4
10006347:	68 37 b9 00 10       	push   0x1000b937	10006348: R_386_32	.text
1000634c:	50                   	push   eax
1000634d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006350:	e8 fc ff ff ff       	call   10006351 <begin(void*)+0x8d7>	10006351: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006355:	83 c4 10             	add    esp,0x10
10006358:	83 ec 08             	sub    esp,0x8
1000635b:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006361:	50                   	push   eax
10006362:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006365:	e8 fc ff ff ff       	call   10006366 <begin(void*)+0x8ec>	10006366: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000636a:	83 c4 10             	add    esp,0x10
1000636d:	83 ec 08             	sub    esp,0x8
10006370:	50                   	push   eax
10006371:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006374:	e8 fc ff ff ff       	call   10006375 <begin(void*)+0x8fb>	10006375: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006379:	83 c4 10             	add    esp,0x10
1000637c:	83 ec 04             	sub    esp,0x4
1000637f:	68 3e b9 00 10       	push   0x1000b93e	10006380: R_386_32	.text
10006384:	50                   	push   eax
10006385:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006388:	e8 fc ff ff ff       	call   10006389 <begin(void*)+0x90f>	10006389: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000638d:	83 c4 10             	add    esp,0x10
10006390:	83 ec 08             	sub    esp,0x8
10006393:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006399:	50                   	push   eax
1000639a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000639d:	e8 fc ff ff ff       	call   1000639e <begin(void*)+0x924>	1000639e: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100063a2:	83 c4 10             	add    esp,0x10
100063a5:	83 ec 08             	sub    esp,0x8
100063a8:	50                   	push   eax
100063a9:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100063ac:	e8 fc ff ff ff       	call   100063ad <begin(void*)+0x933>	100063ad: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100063b1:	83 c4 10             	add    esp,0x10
100063b4:	83 ec 04             	sub    esp,0x4
100063b7:	68 44 b9 00 10       	push   0x1000b944	100063b8: R_386_32	.text
100063bc:	50                   	push   eax
100063bd:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100063c0:	e8 fc ff ff ff       	call   100063c1 <begin(void*)+0x947>	100063c1: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100063c5:	83 c4 10             	add    esp,0x10
100063c8:	a0 00 00 00 00       	mov    al,ds:0x0	100063c9: R_386_32	createNewUserMode
100063cd:	83 f0 01             	xor    eax,0x1
100063d0:	84 c0                	test   al,al
100063d2:	0f 84 be 03 00 00    	je     10006796 <begin(void*)+0xd1c>
100063d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100063d9: R_386_32	modesel
100063dd:	89 c3                	mov    ebx,eax
100063df:	89 c6                	mov    esi,eax
100063e1:	c1 fe 1f             	sar    esi,0x1f
100063e4:	83 ec 08             	sub    esp,0x8
100063e7:	68 4f b9 00 10       	push   0x1000b94f	100063e8: R_386_32	.text
100063ec:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100063ef:	e8 fc ff ff ff       	call   100063f0 <begin(void*)+0x976>	100063f0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100063f4:	83 c4 10             	add    esp,0x10
100063f7:	83 ec 08             	sub    esp,0x8
100063fa:	50                   	push   eax
100063fb:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100063fe:	e8 fc ff ff ff       	call   100063ff <begin(void*)+0x985>	100063ff: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006403:	83 c4 10             	add    esp,0x10
10006406:	83 ec 08             	sub    esp,0x8
10006409:	6a 6a                	push   0x6a
1000640b:	56                   	push   esi
1000640c:	53                   	push   ebx
1000640d:	68 5b b9 00 10       	push   0x1000b95b	1000640e: R_386_32	.text
10006412:	50                   	push   eax
10006413:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006416:	e8 fc ff ff ff       	call   10006417 <begin(void*)+0x99d>	10006417: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
1000641b:	83 c4 20             	add    esp,0x20
1000641e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000641f: R_386_32	tzsel
10006423:	89 c3                	mov    ebx,eax
10006425:	89 c6                	mov    esi,eax
10006427:	c1 fe 1f             	sar    esi,0x1f
1000642a:	83 ec 08             	sub    esp,0x8
1000642d:	68 b1 b8 00 10       	push   0x1000b8b1	1000642e: R_386_32	.text
10006432:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006435:	e8 fc ff ff ff       	call   10006436 <begin(void*)+0x9bc>	10006436: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000643a:	83 c4 10             	add    esp,0x10
1000643d:	83 ec 08             	sub    esp,0x8
10006440:	50                   	push   eax
10006441:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006444:	e8 fc ff ff ff       	call   10006445 <begin(void*)+0x9cb>	10006445: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006449:	83 c4 10             	add    esp,0x10
1000644c:	83 ec 08             	sub    esp,0x8
1000644f:	6a 6a                	push   0x6a
10006451:	56                   	push   esi
10006452:	53                   	push   ebx
10006453:	68 63 b9 00 10       	push   0x1000b963	10006454: R_386_32	.text
10006458:	50                   	push   eax
10006459:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000645c:	e8 fc ff ff ff       	call   1000645d <begin(void*)+0x9e3>	1000645d: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
10006461:	83 c4 20             	add    esp,0x20
10006464:	a1 00 00 00 00       	mov    eax,ds:0x0	10006465: R_386_32	tzsel
10006469:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000646c: R_386_32	timezoneStrings
10006470:	8d 58 01             	lea    ebx,[eax+0x1]
10006473:	83 ec 08             	sub    esp,0x8
10006476:	68 6e b9 00 10       	push   0x1000b96e	10006477: R_386_32	.text
1000647b:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000647e:	e8 fc ff ff ff       	call   1000647f <begin(void*)+0xa05>	1000647f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006483:	83 c4 10             	add    esp,0x10
10006486:	83 ec 04             	sub    esp,0x4
10006489:	53                   	push   ebx
1000648a:	50                   	push   eax
1000648b:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000648e:	e8 fc ff ff ff       	call   1000648f <begin(void*)+0xa15>	1000648f: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006493:	83 c4 10             	add    esp,0x10
10006496:	83 ec 08             	sub    esp,0x8
10006499:	68 83 b9 00 10       	push   0x1000b983	1000649a: R_386_32	.text
1000649e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100064a1:	e8 fc ff ff ff       	call   100064a2 <begin(void*)+0xa28>	100064a2: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100064a6:	83 c4 10             	add    esp,0x10
100064a9:	83 ec 04             	sub    esp,0x4
100064ac:	68 00 00 00 00       	push   0x0	100064ad: R_386_32	currName
100064b1:	50                   	push   eax
100064b2:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100064b5:	e8 fc ff ff ff       	call   100064b6 <begin(void*)+0xa3c>	100064b6: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100064ba:	83 c4 10             	add    esp,0x10
100064bd:	83 ec 08             	sub    esp,0x8
100064c0:	68 95 b9 00 10       	push   0x1000b995	100064c1: R_386_32	.text
100064c5:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100064c8:	e8 fc ff ff ff       	call   100064c9 <begin(void*)+0xa4f>	100064c9: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100064cd:	83 c4 10             	add    esp,0x10
100064d0:	83 ec 04             	sub    esp,0x4
100064d3:	68 00 00 00 00       	push   0x0	100064d4: R_386_32	currComp
100064d8:	50                   	push   eax
100064d9:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100064dc:	e8 fc ff ff ff       	call   100064dd <begin(void*)+0xa63>	100064dd: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100064e1:	83 c4 10             	add    esp,0x10
100064e4:	83 ec 08             	sub    esp,0x8
100064e7:	68 aa b9 00 10       	push   0x1000b9aa	100064e8: R_386_32	.text
100064ec:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100064ef:	e8 fc ff ff ff       	call   100064f0 <begin(void*)+0xa76>	100064f0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100064f4:	83 c4 10             	add    esp,0x10
100064f7:	83 ec 04             	sub    esp,0x4
100064fa:	68 00 00 00 00       	push   0x0	100064fb: R_386_32	pkeybuf
100064ff:	50                   	push   eax
10006500:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006503:	e8 fc ff ff ff       	call   10006504 <begin(void*)+0xa8a>	10006504: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006508:	83 c4 10             	add    esp,0x10
1000650b:	83 ec 08             	sub    esp,0x8
1000650e:	68 c2 b9 00 10       	push   0x1000b9c2	1000650f: R_386_32	.text
10006513:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006516:	e8 fc ff ff ff       	call   10006517 <begin(void*)+0xa9d>	10006517: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000651b:	83 c4 10             	add    esp,0x10
1000651e:	83 ec 08             	sub    esp,0x8
10006521:	50                   	push   eax
10006522:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006525:	e8 fc ff ff ff       	call   10006526 <begin(void*)+0xaac>	10006526: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000652a:	83 c4 10             	add    esp,0x10
1000652d:	83 ec 04             	sub    esp,0x4
10006530:	68 d8 b9 00 10       	push   0x1000b9d8	10006531: R_386_32	.text
10006535:	50                   	push   eax
10006536:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006539:	e8 fc ff ff ff       	call   1000653a <begin(void*)+0xac0>	1000653a: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000653e:	83 c4 10             	add    esp,0x10
10006541:	83 ec 08             	sub    esp,0x8
10006544:	68 dc b9 00 10       	push   0x1000b9dc	10006545: R_386_32	.text
10006549:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000654c:	e8 fc ff ff ff       	call   1000654d <begin(void*)+0xad3>	1000654d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006551:	83 c4 10             	add    esp,0x10
10006554:	83 ec 08             	sub    esp,0x8
10006557:	50                   	push   eax
10006558:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000655b:	e8 fc ff ff ff       	call   1000655c <begin(void*)+0xae2>	1000655c: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006560:	83 c4 10             	add    esp,0x10
10006563:	83 ec 04             	sub    esp,0x4
10006566:	68 d8 b9 00 10       	push   0x1000b9d8	10006567: R_386_32	.text
1000656b:	50                   	push   eax
1000656c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000656f:	e8 fc ff ff ff       	call   10006570 <begin(void*)+0xaf6>	10006570: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006574:	83 c4 10             	add    esp,0x10
10006577:	83 ec 08             	sub    esp,0x8
1000657a:	68 f3 b9 00 10       	push   0x1000b9f3	1000657b: R_386_32	.text
1000657f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006582:	e8 fc ff ff ff       	call   10006583 <begin(void*)+0xb09>	10006583: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006587:	83 c4 10             	add    esp,0x10
1000658a:	83 ec 08             	sub    esp,0x8
1000658d:	50                   	push   eax
1000658e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006591:	e8 fc ff ff ff       	call   10006592 <begin(void*)+0xb18>	10006592: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006596:	83 c4 10             	add    esp,0x10
10006599:	83 ec 04             	sub    esp,0x4
1000659c:	68 d8 b9 00 10       	push   0x1000b9d8	1000659d: R_386_32	.text
100065a1:	50                   	push   eax
100065a2:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100065a5:	e8 fc ff ff ff       	call   100065a6 <begin(void*)+0xb2c>	100065a6: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100065aa:	83 c4 10             	add    esp,0x10
100065ad:	83 ec 08             	sub    esp,0x8
100065b0:	68 09 ba 00 10       	push   0x1000ba09	100065b1: R_386_32	.text
100065b5:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100065b8:	e8 fc ff ff ff       	call   100065b9 <begin(void*)+0xb3f>	100065b9: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100065bd:	83 c4 10             	add    esp,0x10
100065c0:	83 ec 08             	sub    esp,0x8
100065c3:	50                   	push   eax
100065c4:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100065c7:	e8 fc ff ff ff       	call   100065c8 <begin(void*)+0xb4e>	100065c8: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100065cc:	83 c4 10             	add    esp,0x10
100065cf:	83 ec 04             	sub    esp,0x4
100065d2:	68 d8 b9 00 10       	push   0x1000b9d8	100065d3: R_386_32	.text
100065d7:	50                   	push   eax
100065d8:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100065db:	e8 fc ff ff ff       	call   100065dc <begin(void*)+0xb62>	100065dc: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100065e0:	83 c4 10             	add    esp,0x10
100065e3:	83 ec 08             	sub    esp,0x8
100065e6:	68 1f ba 00 10       	push   0x1000ba1f	100065e7: R_386_32	.text
100065eb:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100065ee:	e8 fc ff ff ff       	call   100065ef <begin(void*)+0xb75>	100065ef: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100065f3:	83 c4 10             	add    esp,0x10
100065f6:	83 ec 08             	sub    esp,0x8
100065f9:	50                   	push   eax
100065fa:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100065fd:	e8 fc ff ff ff       	call   100065fe <begin(void*)+0xb84>	100065fe: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006602:	83 c4 10             	add    esp,0x10
10006605:	83 ec 04             	sub    esp,0x4
10006608:	68 d8 b9 00 10       	push   0x1000b9d8	10006609: R_386_32	.text
1000660d:	50                   	push   eax
1000660e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006611:	e8 fc ff ff ff       	call   10006612 <begin(void*)+0xb98>	10006612: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006616:	83 c4 10             	add    esp,0x10
10006619:	83 ec 08             	sub    esp,0x8
1000661c:	68 36 ba 00 10       	push   0x1000ba36	1000661d: R_386_32	.text
10006621:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006624:	e8 fc ff ff ff       	call   10006625 <begin(void*)+0xbab>	10006625: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006629:	83 c4 10             	add    esp,0x10
1000662c:	83 ec 04             	sub    esp,0x4
1000662f:	68 50 ba 00 10       	push   0x1000ba50	10006630: R_386_32	.text
10006634:	50                   	push   eax
10006635:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006638:	e8 fc ff ff ff       	call   10006639 <begin(void*)+0xbbf>	10006639: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000663d:	83 c4 10             	add    esp,0x10
10006640:	83 ec 08             	sub    esp,0x8
10006643:	68 70 ba 00 10       	push   0x1000ba70	10006644: R_386_32	.text
10006648:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000664b:	e8 fc ff ff ff       	call   1000664c <begin(void*)+0xbd2>	1000664c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006650:	83 c4 10             	add    esp,0x10
10006653:	83 ec 04             	sub    esp,0x4
10006656:	68 8b ba 00 10       	push   0x1000ba8b	10006657: R_386_32	.text
1000665b:	50                   	push   eax
1000665c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000665f:	e8 fc ff ff ff       	call   10006660 <begin(void*)+0xbe6>	10006660: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006664:	83 c4 10             	add    esp,0x10
10006667:	83 ec 08             	sub    esp,0x8
1000666a:	68 99 ba 00 10       	push   0x1000ba99	1000666b: R_386_32	.text
1000666f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006672:	e8 fc ff ff ff       	call   10006673 <begin(void*)+0xbf9>	10006673: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006677:	83 c4 10             	add    esp,0x10
1000667a:	83 ec 04             	sub    esp,0x4
1000667d:	68 b3 ba 00 10       	push   0x1000bab3	1000667e: R_386_32	.text
10006682:	50                   	push   eax
10006683:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006686:	e8 fc ff ff ff       	call   10006687 <begin(void*)+0xc0d>	10006687: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000668b:	83 c4 10             	add    esp,0x10
1000668e:	83 ec 08             	sub    esp,0x8
10006691:	68 cb ba 00 10       	push   0x1000bacb	10006692: R_386_32	.text
10006696:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006699:	e8 fc ff ff ff       	call   1000669a <begin(void*)+0xc20>	1000669a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000669e:	83 c4 10             	add    esp,0x10
100066a1:	83 ec 04             	sub    esp,0x4
100066a4:	68 b3 ba 00 10       	push   0x1000bab3	100066a5: R_386_32	.text
100066a9:	50                   	push   eax
100066aa:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100066ad:	e8 fc ff ff ff       	call   100066ae <begin(void*)+0xc34>	100066ae: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100066b2:	83 c4 10             	add    esp,0x10
100066b5:	83 ec 08             	sub    esp,0x8
100066b8:	68 e5 ba 00 10       	push   0x1000bae5	100066b9: R_386_32	.text
100066bd:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100066c0:	e8 fc ff ff ff       	call   100066c1 <begin(void*)+0xc47>	100066c1: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100066c5:	83 c4 10             	add    esp,0x10
100066c8:	83 ec 04             	sub    esp,0x4
100066cb:	68 b3 ba 00 10       	push   0x1000bab3	100066cc: R_386_32	.text
100066d0:	50                   	push   eax
100066d1:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100066d4:	e8 fc ff ff ff       	call   100066d5 <begin(void*)+0xc5b>	100066d5: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100066d9:	83 c4 10             	add    esp,0x10
100066dc:	83 ec 08             	sub    esp,0x8
100066df:	68 c2 b9 00 10       	push   0x1000b9c2	100066e0: R_386_32	.text
100066e4:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100066e7:	e8 fc ff ff ff       	call   100066e8 <begin(void*)+0xc6e>	100066e8: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100066ec:	83 c4 10             	add    esp,0x10
100066ef:	83 ec 08             	sub    esp,0x8
100066f2:	50                   	push   eax
100066f3:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100066f6:	e8 fc ff ff ff       	call   100066f7 <begin(void*)+0xc7d>	100066f7: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100066fb:	83 c4 10             	add    esp,0x10
100066fe:	83 ec 04             	sub    esp,0x4
10006701:	68 00 bb 00 10       	push   0x1000bb00	10006702: R_386_32	.text
10006706:	50                   	push   eax
10006707:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000670a:	e8 fc ff ff ff       	call   1000670b <begin(void*)+0xc91>	1000670b: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000670f:	83 c4 10             	add    esp,0x10
10006712:	83 ec 08             	sub    esp,0x8
10006715:	68 dc b9 00 10       	push   0x1000b9dc	10006716: R_386_32	.text
1000671a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000671d:	e8 fc ff ff ff       	call   1000671e <begin(void*)+0xca4>	1000671e: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006722:	83 c4 10             	add    esp,0x10
10006725:	83 ec 08             	sub    esp,0x8
10006728:	50                   	push   eax
10006729:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000672c:	e8 fc ff ff ff       	call   1000672d <begin(void*)+0xcb3>	1000672d: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006731:	83 c4 10             	add    esp,0x10
10006734:	83 ec 04             	sub    esp,0x4
10006737:	68 00 bb 00 10       	push   0x1000bb00	10006738: R_386_32	.text
1000673c:	50                   	push   eax
1000673d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006740:	e8 fc ff ff ff       	call   10006741 <begin(void*)+0xcc7>	10006741: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006745:	83 c4 10             	add    esp,0x10
10006748:	83 ec 08             	sub    esp,0x8
1000674b:	68 04 bb 00 10       	push   0x1000bb04	1000674c: R_386_32	.text
10006750:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006753:	e8 fc ff ff ff       	call   10006754 <begin(void*)+0xcda>	10006754: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006758:	83 c4 10             	add    esp,0x10
1000675b:	83 ec 04             	sub    esp,0x4
1000675e:	68 1e bb 00 10       	push   0x1000bb1e	1000675f: R_386_32	.text
10006763:	50                   	push   eax
10006764:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006767:	e8 fc ff ff ff       	call   10006768 <begin(void*)+0xcee>	10006768: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000676c:	83 c4 10             	add    esp,0x10
1000676f:	83 ec 08             	sub    esp,0x8
10006772:	68 3c bb 00 10       	push   0x1000bb3c	10006773: R_386_32	.text
10006777:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000677a:	e8 fc ff ff ff       	call   1000677b <begin(void*)+0xd01>	1000677b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000677f:	83 c4 10             	add    esp,0x10
10006782:	83 ec 04             	sub    esp,0x4
10006785:	68 57 bb 00 10       	push   0x1000bb57	10006786: R_386_32	.text
1000678a:	50                   	push   eax
1000678b:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000678e:	e8 fc ff ff ff       	call   1000678f <begin(void*)+0xd15>	1000678f: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006793:	83 c4 10             	add    esp,0x10
10006796:	83 ec 08             	sub    esp,0x8
10006799:	68 2e b8 00 10       	push   0x1000b82e	1000679a: R_386_32	.text
1000679e:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100067a4:	50                   	push   eax
100067a5:	e8 fc ff ff ff       	call   100067a6 <begin(void*)+0xd2c>	100067a6: R_386_PC32	strcpy
100067aa:	83 c4 10             	add    esp,0x10
100067ad:	83 ec 08             	sub    esp,0x8
100067b0:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
100067b6:	50                   	push   eax
100067b7:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100067bd:	50                   	push   eax
100067be:	e8 fc ff ff ff       	call   100067bf <begin(void*)+0xd45>	100067bf: R_386_PC32	strcat
100067c3:	83 c4 10             	add    esp,0x10
100067c6:	83 ec 08             	sub    esp,0x8
100067c9:	68 67 bb 00 10       	push   0x1000bb67	100067ca: R_386_32	.text
100067ce:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100067d4:	50                   	push   eax
100067d5:	e8 fc ff ff ff       	call   100067d6 <begin(void*)+0xd5c>	100067d6: R_386_PC32	strcat
100067da:	83 c4 10             	add    esp,0x10
100067dd:	83 ec 08             	sub    esp,0x8
100067e0:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100067e6:	50                   	push   eax
100067e7:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100067ea:	e8 fc ff ff ff       	call   100067eb <begin(void*)+0xd71>	100067eb: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100067ef:	83 c4 10             	add    esp,0x10
100067f2:	83 ec 04             	sub    esp,0x4
100067f5:	68 00 00 00 00       	push   0x0	100067f6: R_386_32	passwhash
100067fa:	50                   	push   eax
100067fb:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100067fe:	e8 fc ff ff ff       	call   100067ff <begin(void*)+0xd85>	100067ff: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006803:	83 c4 10             	add    esp,0x10
10006806:	83 ec 08             	sub    esp,0x8
10006809:	68 2e b8 00 10       	push   0x1000b82e	1000680a: R_386_32	.text
1000680e:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006814:	50                   	push   eax
10006815:	e8 fc ff ff ff       	call   10006816 <begin(void*)+0xd9c>	10006816: R_386_PC32	strcpy
1000681a:	83 c4 10             	add    esp,0x10
1000681d:	83 ec 08             	sub    esp,0x8
10006820:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006826:	50                   	push   eax
10006827:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000682d:	50                   	push   eax
1000682e:	e8 fc ff ff ff       	call   1000682f <begin(void*)+0xdb5>	1000682f: R_386_PC32	strcat
10006833:	83 c4 10             	add    esp,0x10
10006836:	83 ec 08             	sub    esp,0x8
10006839:	68 71 bb 00 10       	push   0x1000bb71	1000683a: R_386_32	.text
1000683e:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006844:	50                   	push   eax
10006845:	e8 fc ff ff ff       	call   10006846 <begin(void*)+0xdcc>	10006846: R_386_PC32	strcat
1000684a:	83 c4 10             	add    esp,0x10
1000684d:	83 ec 08             	sub    esp,0x8
10006850:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006856:	50                   	push   eax
10006857:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000685a:	e8 fc ff ff ff       	call   1000685b <begin(void*)+0xde1>	1000685b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000685f:	83 c4 10             	add    esp,0x10
10006862:	83 ec 04             	sub    esp,0x4
10006865:	68 00 00 00 00       	push   0x0	10006866: R_386_32	passwsalt
1000686a:	50                   	push   eax
1000686b:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000686e:	e8 fc ff ff ff       	call   1000686f <begin(void*)+0xdf5>	1000686f: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006873:	83 c4 10             	add    esp,0x10
10006876:	83 ec 08             	sub    esp,0x8
10006879:	68 2e b8 00 10       	push   0x1000b82e	1000687a: R_386_32	.text
1000687e:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006884:	50                   	push   eax
10006885:	e8 fc ff ff ff       	call   10006886 <begin(void*)+0xe0c>	10006886: R_386_PC32	strcpy
1000688a:	83 c4 10             	add    esp,0x10
1000688d:	83 ec 08             	sub    esp,0x8
10006890:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006896:	50                   	push   eax
10006897:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000689d:	50                   	push   eax
1000689e:	e8 fc ff ff ff       	call   1000689f <begin(void*)+0xe25>	1000689f: R_386_PC32	strcat
100068a3:	83 c4 10             	add    esp,0x10
100068a6:	83 ec 08             	sub    esp,0x8
100068a9:	68 77 bb 00 10       	push   0x1000bb77	100068aa: R_386_32	.text
100068ae:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100068b4:	50                   	push   eax
100068b5:	e8 fc ff ff ff       	call   100068b6 <begin(void*)+0xe3c>	100068b6: R_386_PC32	strcat
100068ba:	83 c4 10             	add    esp,0x10
100068bd:	83 ec 08             	sub    esp,0x8
100068c0:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100068c6:	50                   	push   eax
100068c7:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100068ca:	e8 fc ff ff ff       	call   100068cb <begin(void*)+0xe51>	100068cb: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100068cf:	83 c4 10             	add    esp,0x10
100068d2:	83 ec 04             	sub    esp,0x4
100068d5:	68 00 00 00 00       	push   0x0	100068d6: R_386_32	currName
100068da:	50                   	push   eax
100068db:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100068de:	e8 fc ff ff ff       	call   100068df <begin(void*)+0xe65>	100068df: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100068e3:	83 c4 10             	add    esp,0x10
100068e6:	83 ec 08             	sub    esp,0x8
100068e9:	68 fa af 00 10       	push   0x1000affa	100068ea: R_386_32	.text
100068ee:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
100068f4:	50                   	push   eax
100068f5:	e8 fc ff ff ff       	call   100068f6 <begin(void*)+0xe7c>	100068f6: R_386_PC32	strcpy
100068fa:	83 c4 10             	add    esp,0x10
100068fd:	83 ec 08             	sub    esp,0x8
10006900:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006906:	50                   	push   eax
10006907:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
1000690d:	50                   	push   eax
1000690e:	e8 fc ff ff ff       	call   1000690f <begin(void*)+0xe95>	1000690f: R_386_PC32	strcat
10006913:	83 c4 10             	add    esp,0x10
10006916:	83 ec 08             	sub    esp,0x8
10006919:	68 04 b0 00 10       	push   0x1000b004	1000691a: R_386_32	.text
1000691e:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006924:	50                   	push   eax
10006925:	e8 fc ff ff ff       	call   10006926 <begin(void*)+0xeac>	10006926: R_386_PC32	strcat
1000692a:	83 c4 10             	add    esp,0x10
1000692d:	83 ec 08             	sub    esp,0x8
10006930:	68 2e b8 00 10       	push   0x1000b82e	10006931: R_386_32	.text
10006935:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000693b:	50                   	push   eax
1000693c:	e8 fc ff ff ff       	call   1000693d <begin(void*)+0xec3>	1000693d: R_386_PC32	strcpy
10006941:	83 c4 10             	add    esp,0x10
10006944:	83 ec 08             	sub    esp,0x8
10006947:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
1000694d:	50                   	push   eax
1000694e:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006954:	50                   	push   eax
10006955:	e8 fc ff ff ff       	call   10006956 <begin(void*)+0xedc>	10006956: R_386_PC32	strcat
1000695a:	83 c4 10             	add    esp,0x10
1000695d:	83 ec 08             	sub    esp,0x8
10006960:	68 84 bb 00 10       	push   0x1000bb84	10006961: R_386_32	.text
10006965:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000696b:	50                   	push   eax
1000696c:	e8 fc ff ff ff       	call   1000696d <begin(void*)+0xef3>	1000696d: R_386_PC32	strcat
10006971:	83 c4 10             	add    esp,0x10
10006974:	83 ec 08             	sub    esp,0x8
10006977:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000697d:	50                   	push   eax
1000697e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006981:	e8 fc ff ff ff       	call   10006982 <begin(void*)+0xf08>	10006982: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006986:	83 c4 10             	add    esp,0x10
10006989:	83 ec 04             	sub    esp,0x4
1000698c:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
10006992:	52                   	push   edx
10006993:	50                   	push   eax
10006994:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006997:	e8 fc ff ff ff       	call   10006998 <begin(void*)+0xf1e>	10006998: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000699c:	83 c4 10             	add    esp,0x10
1000699f:	83 ec 08             	sub    esp,0x8
100069a2:	68 fa af 00 10       	push   0x1000affa	100069a3: R_386_32	.text
100069a7:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
100069ad:	50                   	push   eax
100069ae:	e8 fc ff ff ff       	call   100069af <begin(void*)+0xf35>	100069af: R_386_PC32	strcpy
100069b3:	83 c4 10             	add    esp,0x10
100069b6:	83 ec 08             	sub    esp,0x8
100069b9:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
100069bf:	50                   	push   eax
100069c0:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
100069c6:	50                   	push   eax
100069c7:	e8 fc ff ff ff       	call   100069c8 <begin(void*)+0xf4e>	100069c8: R_386_PC32	strcat
100069cc:	83 c4 10             	add    esp,0x10
100069cf:	83 ec 08             	sub    esp,0x8
100069d2:	68 0d b0 00 10       	push   0x1000b00d	100069d3: R_386_32	.text
100069d7:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
100069dd:	50                   	push   eax
100069de:	e8 fc ff ff ff       	call   100069df <begin(void*)+0xf65>	100069df: R_386_PC32	strcat
100069e3:	83 c4 10             	add    esp,0x10
100069e6:	83 ec 08             	sub    esp,0x8
100069e9:	68 2e b8 00 10       	push   0x1000b82e	100069ea: R_386_32	.text
100069ee:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100069f4:	50                   	push   eax
100069f5:	e8 fc ff ff ff       	call   100069f6 <begin(void*)+0xf7c>	100069f6: R_386_PC32	strcpy
100069fa:	83 c4 10             	add    esp,0x10
100069fd:	83 ec 08             	sub    esp,0x8
10006a00:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006a06:	50                   	push   eax
10006a07:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006a0d:	50                   	push   eax
10006a0e:	e8 fc ff ff ff       	call   10006a0f <begin(void*)+0xf95>	10006a0f: R_386_PC32	strcat
10006a13:	83 c4 10             	add    esp,0x10
10006a16:	83 ec 08             	sub    esp,0x8
10006a19:	68 8d bb 00 10       	push   0x1000bb8d	10006a1a: R_386_32	.text
10006a1e:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006a24:	50                   	push   eax
10006a25:	e8 fc ff ff ff       	call   10006a26 <begin(void*)+0xfac>	10006a26: R_386_PC32	strcat
10006a2a:	83 c4 10             	add    esp,0x10
10006a2d:	83 ec 08             	sub    esp,0x8
10006a30:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006a36:	50                   	push   eax
10006a37:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006a3a:	e8 fc ff ff ff       	call   10006a3b <begin(void*)+0xfc1>	10006a3b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006a3f:	83 c4 10             	add    esp,0x10
10006a42:	83 ec 04             	sub    esp,0x4
10006a45:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
10006a4b:	52                   	push   edx
10006a4c:	50                   	push   eax
10006a4d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006a50:	e8 fc ff ff ff       	call   10006a51 <begin(void*)+0xfd7>	10006a51: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006a55:	83 c4 10             	add    esp,0x10
10006a58:	83 ec 08             	sub    esp,0x8
10006a5b:	68 fa af 00 10       	push   0x1000affa	10006a5c: R_386_32	.text
10006a60:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006a66:	50                   	push   eax
10006a67:	e8 fc ff ff ff       	call   10006a68 <begin(void*)+0xfee>	10006a68: R_386_PC32	strcpy
10006a6c:	83 c4 10             	add    esp,0x10
10006a6f:	83 ec 08             	sub    esp,0x8
10006a72:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006a78:	50                   	push   eax
10006a79:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006a7f:	50                   	push   eax
10006a80:	e8 fc ff ff ff       	call   10006a81 <begin(void*)+0x1007>	10006a81: R_386_PC32	strcat
10006a85:	83 c4 10             	add    esp,0x10
10006a88:	83 ec 08             	sub    esp,0x8
10006a8b:	68 18 b0 00 10       	push   0x1000b018	10006a8c: R_386_32	.text
10006a90:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006a96:	50                   	push   eax
10006a97:	e8 fc ff ff ff       	call   10006a98 <begin(void*)+0x101e>	10006a98: R_386_PC32	strcat
10006a9c:	83 c4 10             	add    esp,0x10
10006a9f:	83 ec 08             	sub    esp,0x8
10006aa2:	68 2e b8 00 10       	push   0x1000b82e	10006aa3: R_386_32	.text
10006aa7:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006aad:	50                   	push   eax
10006aae:	e8 fc ff ff ff       	call   10006aaf <begin(void*)+0x1035>	10006aaf: R_386_PC32	strcpy
10006ab3:	83 c4 10             	add    esp,0x10
10006ab6:	83 ec 08             	sub    esp,0x8
10006ab9:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006abf:	50                   	push   eax
10006ac0:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006ac6:	50                   	push   eax
10006ac7:	e8 fc ff ff ff       	call   10006ac8 <begin(void*)+0x104e>	10006ac8: R_386_PC32	strcat
10006acc:	83 c4 10             	add    esp,0x10
10006acf:	83 ec 08             	sub    esp,0x8
10006ad2:	68 98 bb 00 10       	push   0x1000bb98	10006ad3: R_386_32	.text
10006ad7:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006add:	50                   	push   eax
10006ade:	e8 fc ff ff ff       	call   10006adf <begin(void*)+0x1065>	10006adf: R_386_PC32	strcat
10006ae3:	83 c4 10             	add    esp,0x10
10006ae6:	83 ec 08             	sub    esp,0x8
10006ae9:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006aef:	50                   	push   eax
10006af0:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006af3:	e8 fc ff ff ff       	call   10006af4 <begin(void*)+0x107a>	10006af4: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006af8:	83 c4 10             	add    esp,0x10
10006afb:	83 ec 04             	sub    esp,0x4
10006afe:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
10006b04:	52                   	push   edx
10006b05:	50                   	push   eax
10006b06:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006b09:	e8 fc ff ff ff       	call   10006b0a <begin(void*)+0x1090>	10006b0a: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006b0e:	83 c4 10             	add    esp,0x10
10006b11:	83 ec 08             	sub    esp,0x8
10006b14:	68 fa af 00 10       	push   0x1000affa	10006b15: R_386_32	.text
10006b19:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006b1f:	50                   	push   eax
10006b20:	e8 fc ff ff ff       	call   10006b21 <begin(void*)+0x10a7>	10006b21: R_386_PC32	strcpy
10006b25:	83 c4 10             	add    esp,0x10
10006b28:	83 ec 08             	sub    esp,0x8
10006b2b:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006b31:	50                   	push   eax
10006b32:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006b38:	50                   	push   eax
10006b39:	e8 fc ff ff ff       	call   10006b3a <begin(void*)+0x10c0>	10006b3a: R_386_PC32	strcat
10006b3e:	83 c4 10             	add    esp,0x10
10006b41:	83 ec 08             	sub    esp,0x8
10006b44:	68 23 b0 00 10       	push   0x1000b023	10006b45: R_386_32	.text
10006b49:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006b4f:	50                   	push   eax
10006b50:	e8 fc ff ff ff       	call   10006b51 <begin(void*)+0x10d7>	10006b51: R_386_PC32	strcat
10006b55:	83 c4 10             	add    esp,0x10
10006b58:	83 ec 08             	sub    esp,0x8
10006b5b:	68 2e b8 00 10       	push   0x1000b82e	10006b5c: R_386_32	.text
10006b60:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006b66:	50                   	push   eax
10006b67:	e8 fc ff ff ff       	call   10006b68 <begin(void*)+0x10ee>	10006b68: R_386_PC32	strcpy
10006b6c:	83 c4 10             	add    esp,0x10
10006b6f:	83 ec 08             	sub    esp,0x8
10006b72:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006b78:	50                   	push   eax
10006b79:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006b7f:	50                   	push   eax
10006b80:	e8 fc ff ff ff       	call   10006b81 <begin(void*)+0x1107>	10006b81: R_386_PC32	strcat
10006b85:	83 c4 10             	add    esp,0x10
10006b88:	83 ec 08             	sub    esp,0x8
10006b8b:	68 a3 bb 00 10       	push   0x1000bba3	10006b8c: R_386_32	.text
10006b90:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006b96:	50                   	push   eax
10006b97:	e8 fc ff ff ff       	call   10006b98 <begin(void*)+0x111e>	10006b98: R_386_PC32	strcat
10006b9c:	83 c4 10             	add    esp,0x10
10006b9f:	83 ec 08             	sub    esp,0x8
10006ba2:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006ba8:	50                   	push   eax
10006ba9:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006bac:	e8 fc ff ff ff       	call   10006bad <begin(void*)+0x1133>	10006bad: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006bb1:	83 c4 10             	add    esp,0x10
10006bb4:	83 ec 04             	sub    esp,0x4
10006bb7:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
10006bbd:	52                   	push   edx
10006bbe:	50                   	push   eax
10006bbf:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006bc2:	e8 fc ff ff ff       	call   10006bc3 <begin(void*)+0x1149>	10006bc3: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006bc7:	83 c4 10             	add    esp,0x10
10006bca:	83 ec 08             	sub    esp,0x8
10006bcd:	68 fa af 00 10       	push   0x1000affa	10006bce: R_386_32	.text
10006bd2:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006bd8:	50                   	push   eax
10006bd9:	e8 fc ff ff ff       	call   10006bda <begin(void*)+0x1160>	10006bda: R_386_PC32	strcpy
10006bde:	83 c4 10             	add    esp,0x10
10006be1:	83 ec 08             	sub    esp,0x8
10006be4:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006bea:	50                   	push   eax
10006beb:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006bf1:	50                   	push   eax
10006bf2:	e8 fc ff ff ff       	call   10006bf3 <begin(void*)+0x1179>	10006bf3: R_386_PC32	strcat
10006bf7:	83 c4 10             	add    esp,0x10
10006bfa:	83 ec 08             	sub    esp,0x8
10006bfd:	68 3f b0 00 10       	push   0x1000b03f	10006bfe: R_386_32	.text
10006c02:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006c08:	50                   	push   eax
10006c09:	e8 fc ff ff ff       	call   10006c0a <begin(void*)+0x1190>	10006c0a: R_386_PC32	strcat
10006c0e:	83 c4 10             	add    esp,0x10
10006c11:	83 ec 08             	sub    esp,0x8
10006c14:	68 2e b8 00 10       	push   0x1000b82e	10006c15: R_386_32	.text
10006c19:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006c1f:	50                   	push   eax
10006c20:	e8 fc ff ff ff       	call   10006c21 <begin(void*)+0x11a7>	10006c21: R_386_PC32	strcpy
10006c25:	83 c4 10             	add    esp,0x10
10006c28:	83 ec 08             	sub    esp,0x8
10006c2b:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006c31:	50                   	push   eax
10006c32:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006c38:	50                   	push   eax
10006c39:	e8 fc ff ff ff       	call   10006c3a <begin(void*)+0x11c0>	10006c3a: R_386_PC32	strcat
10006c3e:	83 c4 10             	add    esp,0x10
10006c41:	83 ec 08             	sub    esp,0x8
10006c44:	68 ad bb 00 10       	push   0x1000bbad	10006c45: R_386_32	.text
10006c49:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006c4f:	50                   	push   eax
10006c50:	e8 fc ff ff ff       	call   10006c51 <begin(void*)+0x11d7>	10006c51: R_386_PC32	strcat
10006c55:	83 c4 10             	add    esp,0x10
10006c58:	83 ec 08             	sub    esp,0x8
10006c5b:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006c61:	50                   	push   eax
10006c62:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006c65:	e8 fc ff ff ff       	call   10006c66 <begin(void*)+0x11ec>	10006c66: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006c6a:	83 c4 10             	add    esp,0x10
10006c6d:	83 ec 04             	sub    esp,0x4
10006c70:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
10006c76:	52                   	push   edx
10006c77:	50                   	push   eax
10006c78:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006c7b:	e8 fc ff ff ff       	call   10006c7c <begin(void*)+0x1202>	10006c7c: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006c80:	83 c4 10             	add    esp,0x10
10006c83:	83 ec 08             	sub    esp,0x8
10006c86:	68 fa af 00 10       	push   0x1000affa	10006c87: R_386_32	.text
10006c8b:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006c91:	50                   	push   eax
10006c92:	e8 fc ff ff ff       	call   10006c93 <begin(void*)+0x1219>	10006c93: R_386_PC32	strcpy
10006c97:	83 c4 10             	add    esp,0x10
10006c9a:	83 ec 08             	sub    esp,0x8
10006c9d:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006ca3:	50                   	push   eax
10006ca4:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006caa:	50                   	push   eax
10006cab:	e8 fc ff ff ff       	call   10006cac <begin(void*)+0x1232>	10006cac: R_386_PC32	strcat
10006cb0:	83 c4 10             	add    esp,0x10
10006cb3:	83 ec 08             	sub    esp,0x8
10006cb6:	68 38 b0 00 10       	push   0x1000b038	10006cb7: R_386_32	.text
10006cbb:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006cc1:	50                   	push   eax
10006cc2:	e8 fc ff ff ff       	call   10006cc3 <begin(void*)+0x1249>	10006cc3: R_386_PC32	strcat
10006cc7:	83 c4 10             	add    esp,0x10
10006cca:	83 ec 08             	sub    esp,0x8
10006ccd:	68 2e b8 00 10       	push   0x1000b82e	10006cce: R_386_32	.text
10006cd2:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006cd8:	50                   	push   eax
10006cd9:	e8 fc ff ff ff       	call   10006cda <begin(void*)+0x1260>	10006cda: R_386_PC32	strcpy
10006cde:	83 c4 10             	add    esp,0x10
10006ce1:	83 ec 08             	sub    esp,0x8
10006ce4:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006cea:	50                   	push   eax
10006ceb:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006cf1:	50                   	push   eax
10006cf2:	e8 fc ff ff ff       	call   10006cf3 <begin(void*)+0x1279>	10006cf3: R_386_PC32	strcat
10006cf7:	83 c4 10             	add    esp,0x10
10006cfa:	83 ec 08             	sub    esp,0x8
10006cfd:	68 b5 bb 00 10       	push   0x1000bbb5	10006cfe: R_386_32	.text
10006d02:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006d08:	50                   	push   eax
10006d09:	e8 fc ff ff ff       	call   10006d0a <begin(void*)+0x1290>	10006d0a: R_386_PC32	strcat
10006d0e:	83 c4 10             	add    esp,0x10
10006d11:	83 ec 08             	sub    esp,0x8
10006d14:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006d1a:	50                   	push   eax
10006d1b:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006d1e:	e8 fc ff ff ff       	call   10006d1f <begin(void*)+0x12a5>	10006d1f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006d23:	83 c4 10             	add    esp,0x10
10006d26:	83 ec 04             	sub    esp,0x4
10006d29:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
10006d2f:	52                   	push   edx
10006d30:	50                   	push   eax
10006d31:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006d34:	e8 fc ff ff ff       	call   10006d35 <begin(void*)+0x12bb>	10006d35: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006d39:	83 c4 10             	add    esp,0x10
10006d3c:	83 ec 08             	sub    esp,0x8
10006d3f:	68 fa af 00 10       	push   0x1000affa	10006d40: R_386_32	.text
10006d44:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006d4a:	50                   	push   eax
10006d4b:	e8 fc ff ff ff       	call   10006d4c <begin(void*)+0x12d2>	10006d4c: R_386_PC32	strcpy
10006d50:	83 c4 10             	add    esp,0x10
10006d53:	83 ec 08             	sub    esp,0x8
10006d56:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006d5c:	50                   	push   eax
10006d5d:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006d63:	50                   	push   eax
10006d64:	e8 fc ff ff ff       	call   10006d65 <begin(void*)+0x12eb>	10006d65: R_386_PC32	strcat
10006d69:	83 c4 10             	add    esp,0x10
10006d6c:	83 ec 08             	sub    esp,0x8
10006d6f:	68 2d b0 00 10       	push   0x1000b02d	10006d70: R_386_32	.text
10006d74:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006d7a:	50                   	push   eax
10006d7b:	e8 fc ff ff ff       	call   10006d7c <begin(void*)+0x1302>	10006d7c: R_386_PC32	strcat
10006d80:	83 c4 10             	add    esp,0x10
10006d83:	83 ec 08             	sub    esp,0x8
10006d86:	68 2e b8 00 10       	push   0x1000b82e	10006d87: R_386_32	.text
10006d8b:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006d91:	50                   	push   eax
10006d92:	e8 fc ff ff ff       	call   10006d93 <begin(void*)+0x1319>	10006d93: R_386_PC32	strcpy
10006d97:	83 c4 10             	add    esp,0x10
10006d9a:	83 ec 08             	sub    esp,0x8
10006d9d:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006da3:	50                   	push   eax
10006da4:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006daa:	50                   	push   eax
10006dab:	e8 fc ff ff ff       	call   10006dac <begin(void*)+0x1332>	10006dac: R_386_PC32	strcat
10006db0:	83 c4 10             	add    esp,0x10
10006db3:	83 ec 08             	sub    esp,0x8
10006db6:	68 bc bb 00 10       	push   0x1000bbbc	10006db7: R_386_32	.text
10006dbb:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006dc1:	50                   	push   eax
10006dc2:	e8 fc ff ff ff       	call   10006dc3 <begin(void*)+0x1349>	10006dc3: R_386_PC32	strcat
10006dc7:	83 c4 10             	add    esp,0x10
10006dca:	83 ec 08             	sub    esp,0x8
10006dcd:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006dd3:	50                   	push   eax
10006dd4:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006dd7:	e8 fc ff ff ff       	call   10006dd8 <begin(void*)+0x135e>	10006dd8: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006ddc:	83 c4 10             	add    esp,0x10
10006ddf:	83 ec 04             	sub    esp,0x4
10006de2:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
10006de8:	52                   	push   edx
10006de9:	50                   	push   eax
10006dea:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006ded:	e8 fc ff ff ff       	call   10006dee <begin(void*)+0x1374>	10006dee: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006df2:	83 c4 10             	add    esp,0x10
10006df5:	83 ec 0c             	sub    esp,0xc
10006df8:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006dfb:	e8 fc ff ff ff       	call   10006dfc <begin(void*)+0x1382>	10006dfc: R_386_PC32	CmClose(Reghive_Tag*)
10006e00:	83 c4 10             	add    esp,0x10
10006e03:	a0 00 00 00 00       	mov    al,ds:0x0	10006e04: R_386_32	createNewUserMode
10006e08:	84 c0                	test   al,al
10006e0a:	0f 85 4c 08 00 00    	jne    1000765c <begin(void*)+0x1be2>
10006e10:	a1 00 00 00 00       	mov    eax,ds:0x0	10006e11: R_386_32	Krnl::computer
10006e15:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
10006e1b:	a1 00 00 00 00       	mov    eax,ds:0x0	10006e1c: R_386_32	Krnl::computer
10006e20:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10006e26:	8b 00                	mov    eax,DWORD PTR [eax]
10006e28:	83 c0 24             	add    eax,0x24
10006e2b:	8b 00                	mov    eax,DWORD PTR [eax]
10006e2d:	83 ec 0c             	sub    esp,0xc
10006e30:	52                   	push   edx
10006e31:	ff d0                	call   eax
10006e33:	83 c4 10             	add    esp,0x10
10006e36:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10006e39:	a1 00 00 00 00       	mov    eax,ds:0x0	10006e3a: R_386_32	tzsel
10006e3e:	83 ec 0c             	sub    esp,0xc
10006e41:	50                   	push   eax
10006e42:	e8 fc ff ff ff       	call   10006e43 <begin(void*)+0x13c9>	10006e43: R_386_PC32	KeSetTimezone(int)
10006e47:	83 c4 10             	add    esp,0x10
10006e4a:	a1 00 00 00 00       	mov    eax,ds:0x0	10006e4b: R_386_32	Krnl::computer
10006e4f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
10006e55:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
10006e58:	ba 00 00 00 00       	mov    edx,0x0
10006e5d:	83 ec 04             	sub    esp,0x4
10006e60:	52                   	push   edx
10006e61:	50                   	push   eax
10006e62:	51                   	push   ecx
10006e63:	e8 fc ff ff ff       	call   10006e64 <begin(void*)+0x13ea>	10006e64: R_386_PC32	Clock::setTimeInSecondsLocal(unsigned long long)
10006e68:	83 c4 10             	add    esp,0x10
10006e6b:	83 ec 0c             	sub    esp,0xc
10006e6e:	68 c8 bb 00 10       	push   0x1000bbc8	10006e6f: R_386_32	.text
10006e73:	e8 fc ff ff ff       	call   10006e74 <begin(void*)+0x13fa>	10006e74: R_386_PC32	Dbg::kprintf(char const*, ...)
10006e78:	83 c4 10             	add    esp,0x10
10006e7b:	a1 00 00 00 00       	mov    eax,ds:0x0	10006e7c: R_386_32	term
10006e80:	83 ec 0c             	sub    esp,0xc
10006e83:	50                   	push   eax
10006e84:	e8 fc ff ff ff       	call   10006e85 <begin(void*)+0x140b>	10006e85: R_386_PC32	setActiveTerminal(VgaText*)
10006e89:	83 c4 10             	add    esp,0x10
10006e8c:	e8 fc ff ff ff       	call   10006e8d <begin(void*)+0x1413>	10006e8d: R_386_PC32	drawBootScreen()
10006e91:	83 ec 0c             	sub    esp,0xc
10006e94:	68 61 b6 00 10       	push   0x1000b661	10006e95: R_386_32	.text
10006e99:	6a 0d                	push   0xd
10006e9b:	6a 32                	push   0x32
10006e9d:	6a 05                	push   0x5
10006e9f:	6a 16                	push   0x16
10006ea1:	e8 fc ff ff ff       	call   10006ea2 <begin(void*)+0x1428>	10006ea2: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10006ea6:	83 c4 20             	add    esp,0x20
10006ea9:	a1 00 00 00 00       	mov    eax,ds:0x0	10006eaa: R_386_32	term
10006eae:	83 ec 04             	sub    esp,0x4
10006eb1:	6a 08                	push   0x8
10006eb3:	6a 18                	push   0x18
10006eb5:	50                   	push   eax
10006eb6:	e8 fc ff ff ff       	call   10006eb7 <begin(void*)+0x143d>	10006eb7: R_386_PC32	VgaText::setCursor(int, int)
10006ebb:	83 c4 10             	add    esp,0x10
10006ebe:	a1 00 00 00 00       	mov    eax,ds:0x0	10006ebf: R_386_32	term
10006ec3:	83 ec 08             	sub    esp,0x8
10006ec6:	68 f0 bb 00 10       	push   0x1000bbf0	10006ec7: R_386_32	.text
10006ecb:	50                   	push   eax
10006ecc:	e8 fc ff ff ff       	call   10006ecd <begin(void*)+0x1453>	10006ecd: R_386_PC32	VgaText::puts(char const*)
10006ed1:	83 c4 10             	add    esp,0x10
10006ed4:	a1 00 00 00 00       	mov    eax,ds:0x0	10006ed5: R_386_32	term
10006ed9:	83 ec 04             	sub    esp,0x4
10006edc:	6a 0a                	push   0xa
10006ede:	6a 18                	push   0x18
10006ee0:	50                   	push   eax
10006ee1:	e8 fc ff ff ff       	call   10006ee2 <begin(void*)+0x1468>	10006ee2: R_386_PC32	VgaText::setCursor(int, int)
10006ee6:	83 c4 10             	add    esp,0x10
10006ee9:	a1 00 00 00 00       	mov    eax,ds:0x0	10006eea: R_386_32	term
10006eee:	83 ec 08             	sub    esp,0x8
10006ef1:	68 18 bc 00 10       	push   0x1000bc18	10006ef2: R_386_32	.text
10006ef6:	50                   	push   eax
10006ef7:	e8 fc ff ff ff       	call   10006ef8 <begin(void*)+0x147e>	10006ef8: R_386_PC32	VgaText::puts(char const*)
10006efc:	83 c4 10             	add    esp,0x10
10006eff:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f00: R_386_32	term
10006f04:	83 ec 04             	sub    esp,0x4
10006f07:	6a 0b                	push   0xb
10006f09:	6a 18                	push   0x18
10006f0b:	50                   	push   eax
10006f0c:	e8 fc ff ff ff       	call   10006f0d <begin(void*)+0x1493>	10006f0d: R_386_PC32	VgaText::setCursor(int, int)
10006f11:	83 c4 10             	add    esp,0x10
10006f14:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f15: R_386_32	term
10006f19:	83 ec 08             	sub    esp,0x8
10006f1c:	68 44 bc 00 10       	push   0x1000bc44	10006f1d: R_386_32	.text
10006f21:	50                   	push   eax
10006f22:	e8 fc ff ff ff       	call   10006f23 <begin(void*)+0x14a9>	10006f23: R_386_PC32	VgaText::puts(char const*)
10006f27:	83 c4 10             	add    esp,0x10
10006f2a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006f2c: R_386_32	installKey
10006f31:	a0 00 00 00 00       	mov    al,ds:0x0	10006f32: R_386_32	installKey
10006f36:	84 c0                	test   al,al
10006f38:	0f 94 c0             	sete   al
10006f3b:	84 c0                	test   al,al
10006f3d:	74 02                	je     10006f41 <begin(void*)+0x14c7>
10006f3f:	eb f0                	jmp    10006f31 <begin(void*)+0x14b7>
10006f41:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006f43: R_386_32	installKey
10006f48:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f49: R_386_32	term
10006f4d:	83 ec 04             	sub    esp,0x4
10006f50:	6a 0c                	push   0xc
10006f52:	6a 18                	push   0x18
10006f54:	50                   	push   eax
10006f55:	e8 fc ff ff ff       	call   10006f56 <begin(void*)+0x14dc>	10006f56: R_386_PC32	VgaText::setCursor(int, int)
10006f5a:	83 c4 10             	add    esp,0x10
10006f5d:	e8 fc ff ff ff       	call   10006f5e <begin(void*)+0x14e4>	10006f5e: R_386_PC32	KeRestart()
10006f62:	e9 5d 0e 00 00       	jmp    10007dc4 <begin(void*)+0x234a>
10006f67:	e8 fc ff ff ff       	call   10006f68 <begin(void*)+0x14ee>	10006f68: R_386_PC32	KeLoadTimezone()
10006f6c:	e8 fc ff ff ff       	call   10006f6d <begin(void*)+0x14f3>	10006f6d: R_386_PC32	KeInitialiseLocale()
10006f71:	83 ec 0c             	sub    esp,0xc
10006f74:	68 f0 b7 00 10       	push   0x1000b7f0	10006f75: R_386_32	.text
10006f79:	e8 fc ff ff ff       	call   10006f7a <begin(void*)+0x1500>	10006f7a: R_386_PC32	CmOpen(char const*)
10006f7e:	83 c4 10             	add    esp,0x10
10006f81:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10006f84:	83 ec 08             	sub    esp,0x8
10006f87:	68 aa b9 00 10       	push   0x1000b9aa	10006f88: R_386_32	.text
10006f8c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006f8f:	e8 fc ff ff ff       	call   10006f90 <begin(void*)+0x1516>	10006f90: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006f94:	83 c4 10             	add    esp,0x10
10006f97:	83 ec 04             	sub    esp,0x4
10006f9a:	8d 95 d4 fc ff ff    	lea    edx,[ebp-0x32c]
10006fa0:	52                   	push   edx
10006fa1:	50                   	push   eax
10006fa2:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006fa5:	e8 fc ff ff ff       	call   10006fa6 <begin(void*)+0x152c>	10006fa6: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006faa:	83 c4 10             	add    esp,0x10
10006fad:	83 ec 08             	sub    esp,0x8
10006fb0:	68 56 bc 00 10       	push   0x1000bc56	10006fb1: R_386_32	.text
10006fb5:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006fb8:	e8 fc ff ff ff       	call   10006fb9 <begin(void*)+0x153f>	10006fb9: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006fbd:	83 c4 10             	add    esp,0x10
10006fc0:	83 ec 04             	sub    esp,0x4
10006fc3:	8d 95 c8 fc ff ff    	lea    edx,[ebp-0x338]
10006fc9:	52                   	push   edx
10006fca:	50                   	push   eax
10006fcb:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006fce:	e8 fc ff ff ff       	call   10006fcf <begin(void*)+0x1555>	10006fcf: R_386_PC32	CmGetInteger(Reghive_Tag*, int, unsigned long long*)
10006fd3:	83 c4 10             	add    esp,0x10
10006fd6:	83 ec 0c             	sub    esp,0xc
10006fd9:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006fdc:	e8 fc ff ff ff       	call   10006fdd <begin(void*)+0x1563>	10006fdd: R_386_PC32	CmClose(Reghive_Tag*)
10006fe1:	83 c4 10             	add    esp,0x10
10006fe4:	83 ec 0c             	sub    esp,0xc
10006fe7:	8d 85 d4 fc ff ff    	lea    eax,[ebp-0x32c]
10006fed:	50                   	push   eax
10006fee:	e8 fc ff ff ff       	call   10006fef <begin(void*)+0x1575>	10006fef: R_386_PC32	checkExtendedKey(char*)
10006ff3:	83 c4 10             	add    esp,0x10
10006ff6:	85 c0                	test   eax,eax
10006ff8:	0f 94 c0             	sete   al
10006ffb:	84 c0                	test   al,al
10006ffd:	0f 84 bd 01 00 00    	je     100071c0 <begin(void*)+0x1746>
10007003:	83 ec 0c             	sub    esp,0xc
10007006:	6a 01                	push   0x1
10007008:	e8 fc ff ff ff       	call   10007009 <begin(void*)+0x158f>	10007009: R_386_PC32	firstRun(bool)
1000700d:	83 c4 10             	add    esp,0x10
10007010:	83 ec 0c             	sub    esp,0xc
10007013:	68 f0 b7 00 10       	push   0x1000b7f0	10007014: R_386_32	.text
10007018:	e8 fc ff ff ff       	call   10007019 <begin(void*)+0x159f>	10007019: R_386_PC32	CmOpen(char const*)
1000701d:	83 c4 10             	add    esp,0x10
10007020:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10007023:	83 ec 04             	sub    esp,0x4
10007026:	68 15 b8 00 10       	push   0x1000b815	10007027: R_386_32	.text
1000702b:	6a 00                	push   0x0
1000702d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007030:	e8 fc ff ff ff       	call   10007031 <begin(void*)+0x15b7>	10007031: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10007035:	83 c4 10             	add    esp,0x10
10007038:	83 ec 08             	sub    esp,0x8
1000703b:	68 15 b8 00 10       	push   0x1000b815	1000703c: R_386_32	.text
10007040:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007043:	e8 fc ff ff ff       	call   10007044 <begin(void*)+0x15ca>	10007044: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10007048:	83 c4 10             	add    esp,0x10
1000704b:	83 ec 08             	sub    esp,0x8
1000704e:	50                   	push   eax
1000704f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007052:	e8 fc ff ff ff       	call   10007053 <begin(void*)+0x15d9>	10007053: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10007057:	83 c4 10             	add    esp,0x10
1000705a:	83 ec 04             	sub    esp,0x4
1000705d:	68 4f b8 00 10       	push   0x1000b84f	1000705e: R_386_32	.text
10007062:	50                   	push   eax
10007063:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007066:	e8 fc ff ff ff       	call   10007067 <begin(void*)+0x15ed>	10007067: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000706b:	83 c4 10             	add    esp,0x10
1000706e:	83 ec 08             	sub    esp,0x8
10007071:	68 c6 b8 00 10       	push   0x1000b8c6	10007072: R_386_32	.text
10007076:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007079:	e8 fc ff ff ff       	call   1000707a <begin(void*)+0x1600>	1000707a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000707e:	83 c4 10             	add    esp,0x10
10007081:	83 ec 08             	sub    esp,0x8
10007084:	50                   	push   eax
10007085:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007088:	e8 fc ff ff ff       	call   10007089 <begin(void*)+0x160f>	10007089: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000708d:	83 c4 10             	add    esp,0x10
10007090:	83 ec 04             	sub    esp,0x4
10007093:	68 e0 b8 00 10       	push   0x1000b8e0	10007094: R_386_32	.text
10007098:	50                   	push   eax
10007099:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000709c:	e8 fc ff ff ff       	call   1000709d <begin(void*)+0x1623>	1000709d: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100070a1:	83 c4 10             	add    esp,0x10
100070a4:	83 ec 08             	sub    esp,0x8
100070a7:	68 aa b9 00 10       	push   0x1000b9aa	100070a8: R_386_32	.text
100070ac:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100070af:	e8 fc ff ff ff       	call   100070b0 <begin(void*)+0x1636>	100070b0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100070b4:	83 c4 10             	add    esp,0x10
100070b7:	83 ec 04             	sub    esp,0x4
100070ba:	68 00 00 00 00       	push   0x0	100070bb: R_386_32	pkeybuf
100070bf:	50                   	push   eax
100070c0:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100070c3:	e8 fc ff ff ff       	call   100070c4 <begin(void*)+0x164a>	100070c4: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100070c8:	83 c4 10             	add    esp,0x10
100070cb:	83 ec 0c             	sub    esp,0xc
100070ce:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100070d1:	e8 fc ff ff ff       	call   100070d2 <begin(void*)+0x1658>	100070d2: R_386_PC32	CmClose(Reghive_Tag*)
100070d6:	83 c4 10             	add    esp,0x10
100070d9:	a1 00 00 00 00       	mov    eax,ds:0x0	100070da: R_386_32	term
100070de:	83 ec 0c             	sub    esp,0xc
100070e1:	50                   	push   eax
100070e2:	e8 fc ff ff ff       	call   100070e3 <begin(void*)+0x1669>	100070e3: R_386_PC32	setActiveTerminal(VgaText*)
100070e7:	83 c4 10             	add    esp,0x10
100070ea:	e8 fc ff ff ff       	call   100070eb <begin(void*)+0x1671>	100070eb: R_386_PC32	drawBootScreen()
100070ef:	83 ec 0c             	sub    esp,0xc
100070f2:	68 6a bc 00 10       	push   0x1000bc6a	100070f3: R_386_32	.text
100070f7:	6a 0d                	push   0xd
100070f9:	6a 32                	push   0x32
100070fb:	6a 05                	push   0x5
100070fd:	6a 16                	push   0x16
100070ff:	e8 fc ff ff ff       	call   10007100 <begin(void*)+0x1686>	10007100: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10007104:	83 c4 20             	add    esp,0x20
10007107:	a1 00 00 00 00       	mov    eax,ds:0x0	10007108: R_386_32	term
1000710c:	83 ec 04             	sub    esp,0x4
1000710f:	6a 08                	push   0x8
10007111:	6a 18                	push   0x18
10007113:	50                   	push   eax
10007114:	e8 fc ff ff ff       	call   10007115 <begin(void*)+0x169b>	10007115: R_386_PC32	VgaText::setCursor(int, int)
10007119:	83 c4 10             	add    esp,0x10
1000711c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000711d: R_386_32	term
10007121:	83 ec 08             	sub    esp,0x8
10007124:	68 80 bc 00 10       	push   0x1000bc80	10007125: R_386_32	.text
10007129:	50                   	push   eax
1000712a:	e8 fc ff ff ff       	call   1000712b <begin(void*)+0x16b1>	1000712b: R_386_PC32	VgaText::puts(char const*)
1000712f:	83 c4 10             	add    esp,0x10
10007132:	a1 00 00 00 00       	mov    eax,ds:0x0	10007133: R_386_32	term
10007137:	83 ec 04             	sub    esp,0x4
1000713a:	6a 0a                	push   0xa
1000713c:	6a 18                	push   0x18
1000713e:	50                   	push   eax
1000713f:	e8 fc ff ff ff       	call   10007140 <begin(void*)+0x16c6>	10007140: R_386_PC32	VgaText::setCursor(int, int)
10007144:	83 c4 10             	add    esp,0x10
10007147:	a1 00 00 00 00       	mov    eax,ds:0x0	10007148: R_386_32	term
1000714c:	83 ec 08             	sub    esp,0x8
1000714f:	68 18 bc 00 10       	push   0x1000bc18	10007150: R_386_32	.text
10007154:	50                   	push   eax
10007155:	e8 fc ff ff ff       	call   10007156 <begin(void*)+0x16dc>	10007156: R_386_PC32	VgaText::puts(char const*)
1000715a:	83 c4 10             	add    esp,0x10
1000715d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000715e: R_386_32	term
10007162:	83 ec 04             	sub    esp,0x4
10007165:	6a 0b                	push   0xb
10007167:	6a 18                	push   0x18
10007169:	50                   	push   eax
1000716a:	e8 fc ff ff ff       	call   1000716b <begin(void*)+0x16f1>	1000716b: R_386_PC32	VgaText::setCursor(int, int)
1000716f:	83 c4 10             	add    esp,0x10
10007172:	a1 00 00 00 00       	mov    eax,ds:0x0	10007173: R_386_32	term
10007177:	83 ec 08             	sub    esp,0x8
1000717a:	68 44 bc 00 10       	push   0x1000bc44	1000717b: R_386_32	.text
1000717f:	50                   	push   eax
10007180:	e8 fc ff ff ff       	call   10007181 <begin(void*)+0x1707>	10007181: R_386_PC32	VgaText::puts(char const*)
10007185:	83 c4 10             	add    esp,0x10
10007188:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000718a: R_386_32	installKey
1000718f:	a0 00 00 00 00       	mov    al,ds:0x0	10007190: R_386_32	installKey
10007194:	84 c0                	test   al,al
10007196:	0f 94 c0             	sete   al
10007199:	84 c0                	test   al,al
1000719b:	74 02                	je     1000719f <begin(void*)+0x1725>
1000719d:	eb f0                	jmp    1000718f <begin(void*)+0x1715>
1000719f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100071a1: R_386_32	installKey
100071a6:	a1 00 00 00 00       	mov    eax,ds:0x0	100071a7: R_386_32	term
100071ab:	83 ec 04             	sub    esp,0x4
100071ae:	6a 0c                	push   0xc
100071b0:	6a 18                	push   0x18
100071b2:	50                   	push   eax
100071b3:	e8 fc ff ff ff       	call   100071b4 <begin(void*)+0x173a>	100071b4: R_386_PC32	VgaText::setCursor(int, int)
100071b8:	83 c4 10             	add    esp,0x10
100071bb:	e8 fc ff ff ff       	call   100071bc <begin(void*)+0x1742>	100071bc: R_386_PC32	KeRestart()
100071c0:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100071c2: R_386_32	showSidebar
100071c7:	83 ec 0c             	sub    esp,0xc
100071ca:	68 84 01 00 00       	push   0x184
100071cf:	e8 fc ff ff ff       	call   100071d0 <begin(void*)+0x1756>	100071d0: R_386_PC32	operator new(unsigned long)
100071d4:	83 c4 10             	add    esp,0x10
100071d7:	89 c3                	mov    ebx,eax
100071d9:	83 ec 08             	sub    esp,0x8
100071dc:	68 78 b2 00 10       	push   0x1000b278	100071dd: R_386_32	.text
100071e1:	53                   	push   ebx
100071e2:	e8 fc ff ff ff       	call   100071e3 <begin(void*)+0x1769>	100071e3: R_386_PC32	VgaText::VgaText(char const*)
100071e7:	83 c4 10             	add    esp,0x10
100071ea:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100071ec: R_386_32	term
100071f0:	a1 00 00 00 00       	mov    eax,ds:0x0	100071f1: R_386_32	term
100071f5:	83 ec 0c             	sub    esp,0xc
100071f8:	50                   	push   eax
100071f9:	e8 fc ff ff ff       	call   100071fa <begin(void*)+0x1780>	100071fa: R_386_PC32	setActiveTerminal(VgaText*)
100071fe:	83 c4 10             	add    esp,0x10
10007201:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10007208:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
1000720f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007211: R_386_32	installKey
10007216:	83 ec 04             	sub    esp,0x4
10007219:	68 80 00 00 00       	push   0x80
1000721e:	6a 00                	push   0x0
10007220:	8d 85 40 f9 ff ff    	lea    eax,[ebp-0x6c0]
10007226:	50                   	push   eax
10007227:	e8 fc ff ff ff       	call   10007228 <begin(void*)+0x17ae>	10007228: R_386_PC32	memset
1000722c:	83 c4 10             	add    esp,0x10
1000722f:	83 ec 04             	sub    esp,0x4
10007232:	68 80 00 00 00       	push   0x80
10007237:	6a 00                	push   0x0
10007239:	8d 85 c0 f9 ff ff    	lea    eax,[ebp-0x640]
1000723f:	50                   	push   eax
10007240:	e8 fc ff ff ff       	call   10007241 <begin(void*)+0x17c7>	10007241: R_386_PC32	memset
10007245:	83 c4 10             	add    esp,0x10
10007248:	83 ec 0c             	sub    esp,0xc
1000724b:	68 f0 b7 00 10       	push   0x1000b7f0	1000724c: R_386_32	.text
10007250:	e8 fc ff ff ff       	call   10007251 <begin(void*)+0x17d7>	10007251: R_386_PC32	CmOpen(char const*)
10007255:	83 c4 10             	add    esp,0x10
10007258:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
1000725b:	83 ec 08             	sub    esp,0x8
1000725e:	68 eb b8 00 10       	push   0x1000b8eb	1000725f: R_386_32	.text
10007263:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007266:	e8 fc ff ff ff       	call   10007267 <begin(void*)+0x17ed>	10007267: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000726b:	83 c4 10             	add    esp,0x10
1000726e:	83 ec 08             	sub    esp,0x8
10007271:	50                   	push   eax
10007272:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007275:	e8 fc ff ff ff       	call   10007276 <begin(void*)+0x17fc>	10007276: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000727a:	83 c4 10             	add    esp,0x10
1000727d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10007280:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10007284:	0f 84 88 01 00 00    	je     10007412 <begin(void*)+0x1998>
1000728a:	83 ec 04             	sub    esp,0x4
1000728d:	6a 50                	push   0x50
1000728f:	6a 00                	push   0x0
10007291:	8d 85 a0 f8 ff ff    	lea    eax,[ebp-0x760]
10007297:	50                   	push   eax
10007298:	e8 fc ff ff ff       	call   10007299 <begin(void*)+0x181f>	10007299: R_386_PC32	memset
1000729d:	83 c4 10             	add    esp,0x10
100072a0:	83 ec 04             	sub    esp,0x4
100072a3:	8d 85 a0 f8 ff ff    	lea    eax,[ebp-0x760]
100072a9:	50                   	push   eax
100072aa:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100072ad:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100072b0:	e8 fc ff ff ff       	call   100072b1 <begin(void*)+0x1837>	100072b1: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
100072b5:	83 c4 10             	add    esp,0x10
100072b8:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
100072bb:	83 7d 98 4e          	cmp    DWORD PTR [ebp-0x68],0x4e
100072bf:	0f 85 34 01 00 00    	jne    100073f9 <begin(void*)+0x197f>
100072c5:	83 ec 0c             	sub    esp,0xc
100072c8:	6a 50                	push   0x50
100072ca:	e8 fc ff ff ff       	call   100072cb <begin(void*)+0x1851>	100072cb: R_386_PC32	malloc
100072cf:	83 c4 10             	add    esp,0x10
100072d2:	89 c2                	mov    edx,eax
100072d4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100072d7:	89 94 85 c0 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x640],edx
100072de:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100072e1:	8b 84 85 c0 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x640]
100072e8:	83 ec 08             	sub    esp,0x8
100072eb:	8d 95 a0 f8 ff ff    	lea    edx,[ebp-0x760]
100072f1:	52                   	push   edx
100072f2:	50                   	push   eax
100072f3:	e8 fc ff ff ff       	call   100072f4 <begin(void*)+0x187a>	100072f4: R_386_PC32	strcpy
100072f8:	83 c4 10             	add    esp,0x10
100072fb:	83 ec 08             	sub    esp,0x8
100072fe:	68 2e b8 00 10       	push   0x1000b82e	100072ff: R_386_32	.text
10007303:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10007309:	50                   	push   eax
1000730a:	e8 fc ff ff ff       	call   1000730b <begin(void*)+0x1891>	1000730b: R_386_PC32	strcpy
1000730f:	83 c4 10             	add    esp,0x10
10007312:	83 ec 08             	sub    esp,0x8
10007315:	8d 85 a0 f8 ff ff    	lea    eax,[ebp-0x760]
1000731b:	50                   	push   eax
1000731c:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10007322:	50                   	push   eax
10007323:	e8 fc ff ff ff       	call   10007324 <begin(void*)+0x18aa>	10007324: R_386_PC32	strcat
10007328:	83 c4 10             	add    esp,0x10
1000732b:	83 ec 08             	sub    esp,0x8
1000732e:	68 77 bb 00 10       	push   0x1000bb77	1000732f: R_386_32	.text
10007333:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10007339:	50                   	push   eax
1000733a:	e8 fc ff ff ff       	call   1000733b <begin(void*)+0x18c1>	1000733b: R_386_PC32	strcat
1000733f:	83 c4 10             	add    esp,0x10
10007342:	83 ec 08             	sub    esp,0x8
10007345:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
1000734b:	50                   	push   eax
1000734c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000734f:	e8 fc ff ff ff       	call   10007350 <begin(void*)+0x18d6>	10007350: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10007354:	83 c4 10             	add    esp,0x10
10007357:	83 ec 04             	sub    esp,0x4
1000735a:	8d 95 a0 f8 ff ff    	lea    edx,[ebp-0x760]
10007360:	52                   	push   edx
10007361:	50                   	push   eax
10007362:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007365:	e8 fc ff ff ff       	call   10007366 <begin(void*)+0x18ec>	10007366: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
1000736a:	83 c4 10             	add    esp,0x10
1000736d:	83 ec 0c             	sub    esp,0xc
10007370:	6a 50                	push   0x50
10007372:	e8 fc ff ff ff       	call   10007373 <begin(void*)+0x18f9>	10007373: R_386_PC32	malloc
10007377:	83 c4 10             	add    esp,0x10
1000737a:	89 c2                	mov    edx,eax
1000737c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000737f:	89 94 85 40 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x6c0],edx
10007386:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10007389:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
10007390:	83 ec 08             	sub    esp,0x8
10007393:	68 3f b2 00 10       	push   0x1000b23f	10007394: R_386_32	.text
10007398:	50                   	push   eax
10007399:	e8 fc ff ff ff       	call   1000739a <begin(void*)+0x1920>	1000739a: R_386_PC32	strcpy
1000739e:	83 c4 10             	add    esp,0x10
100073a1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100073a4:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
100073ab:	83 ec 08             	sub    esp,0x8
100073ae:	8d 95 a0 f8 ff ff    	lea    edx,[ebp-0x760]
100073b4:	52                   	push   edx
100073b5:	50                   	push   eax
100073b6:	e8 fc ff ff ff       	call   100073b7 <begin(void*)+0x193d>	100073b7: R_386_PC32	strcat
100073bb:	83 c4 10             	add    esp,0x10
100073be:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100073c1:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
100073c8:	83 ec 0c             	sub    esp,0xc
100073cb:	50                   	push   eax
100073cc:	e8 fc ff ff ff       	call   100073cd <begin(void*)+0x1953>	100073cd: R_386_PC32	strlen
100073d1:	83 c4 10             	add    esp,0x10
100073d4:	83 f8 31             	cmp    eax,0x31
100073d7:	77 1d                	ja     100073f6 <begin(void*)+0x197c>
100073d9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100073dc:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
100073e3:	83 ec 08             	sub    esp,0x8
100073e6:	68 3f b2 00 10       	push   0x1000b23f	100073e7: R_386_32	.text
100073eb:	50                   	push   eax
100073ec:	e8 fc ff ff ff       	call   100073ed <begin(void*)+0x1973>	100073ed: R_386_PC32	strcat
100073f1:	83 c4 10             	add    esp,0x10
100073f4:	eb c8                	jmp    100073be <begin(void*)+0x1944>
100073f6:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
100073f9:	83 ec 08             	sub    esp,0x8
100073fc:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100073ff:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007402:	e8 fc ff ff ff       	call   10007403 <begin(void*)+0x1989>	10007403: R_386_PC32	CmGetNext(Reghive_Tag*, int)
10007407:	83 c4 10             	add    esp,0x10
1000740a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000740d:	e9 6e fe ff ff       	jmp    10007280 <begin(void*)+0x1806>
10007412:	83 ec 0c             	sub    esp,0xc
10007415:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007418:	e8 fc ff ff ff       	call   10007419 <begin(void*)+0x199f>	10007419: R_386_PC32	CmClose(Reghive_Tag*)
1000741d:	83 c4 10             	add    esp,0x10
10007420:	83 ec 0c             	sub    esp,0xc
10007423:	6a 50                	push   0x50
10007425:	e8 fc ff ff ff       	call   10007426 <begin(void*)+0x19ac>	10007426: R_386_PC32	malloc
1000742a:	83 c4 10             	add    esp,0x10
1000742d:	89 c2                	mov    edx,eax
1000742f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10007432:	89 94 85 40 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x6c0],edx
10007439:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000743c:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
10007443:	83 ec 08             	sub    esp,0x8
10007446:	68 a4 bc 00 10       	push   0x1000bca4	10007447: R_386_32	.text
1000744b:	50                   	push   eax
1000744c:	e8 fc ff ff ff       	call   1000744d <begin(void*)+0x19d3>	1000744d: R_386_PC32	strcpy
10007451:	83 c4 10             	add    esp,0x10
10007454:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10007457:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10007459: R_386_32	guiKeyboardHandler
	1000745d: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
10007461:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007463: R_386_32	installKey
10007468:	e8 fc ff ff ff       	call   10007469 <begin(void*)+0x19ef>	10007469: R_386_PC32	drawBootScreen()
1000746d:	83 ec 0c             	sub    esp,0xc
10007470:	68 d7 bc 00 10       	push   0x1000bcd7	10007471: R_386_32	.text
10007475:	6a 10                	push   0x10
10007477:	6a 39                	push   0x39
10007479:	6a 03                	push   0x3
1000747b:	6a 0c                	push   0xc
1000747d:	e8 fc ff ff ff       	call   1000747e <begin(void*)+0x1a04>	1000747e: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10007482:	83 c4 20             	add    esp,0x20
10007485:	a1 00 00 00 00       	mov    eax,ds:0x0	10007486: R_386_32	term
1000748a:	83 ec 04             	sub    esp,0x4
1000748d:	6a 06                	push   0x6
1000748f:	6a 0e                	push   0xe
10007491:	50                   	push   eax
10007492:	e8 fc ff ff ff       	call   10007493 <begin(void*)+0x1a19>	10007493: R_386_PC32	VgaText::setCursor(int, int)
10007497:	83 c4 10             	add    esp,0x10
1000749a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000749b: R_386_32	term
1000749f:	6a 0f                	push   0xf
100074a1:	6a 00                	push   0x0
100074a3:	68 e0 bc 00 10       	push   0x1000bce0	100074a4: R_386_32	.text
100074a8:	50                   	push   eax
100074a9:	e8 fc ff ff ff       	call   100074aa <begin(void*)+0x1a30>	100074aa: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100074ae:	83 c4 10             	add    esp,0x10
100074b1:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
100074b5:	75 0c                	jne    100074c3 <begin(void*)+0x1a49>
100074b7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100074be:	e9 25 01 00 00       	jmp    100075e8 <begin(void*)+0x1b6e>
100074c3:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
100074ca:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100074cd:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
100074d0:	7d 63                	jge    10007535 <begin(void*)+0x1abb>
100074d2:	a1 00 00 00 00       	mov    eax,ds:0x0	100074d3: R_386_32	term
100074d7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
100074da:	83 c2 08             	add    edx,0x8
100074dd:	83 ec 04             	sub    esp,0x4
100074e0:	52                   	push   edx
100074e1:	6a 0f                	push   0xf
100074e3:	50                   	push   eax
100074e4:	e8 fc ff ff ff       	call   100074e5 <begin(void*)+0x1a6b>	100074e5: R_386_PC32	VgaText::setCursor(int, int)
100074e9:	83 c4 10             	add    esp,0x10
100074ec:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100074ee: R_386_32	term
100074f2:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100074f5:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
100074f8:	75 07                	jne    10007501 <begin(void*)+0x1a87>
100074fa:	b9 00 00 00 00       	mov    ecx,0x0
100074ff:	eb 05                	jmp    10007506 <begin(void*)+0x1a8c>
10007501:	b9 0f 00 00 00       	mov    ecx,0xf
10007506:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10007509:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
1000750c:	75 07                	jne    10007515 <begin(void*)+0x1a9b>
1000750e:	ba 0f 00 00 00       	mov    edx,0xf
10007513:	eb 05                	jmp    1000751a <begin(void*)+0x1aa0>
10007515:	ba 00 00 00 00       	mov    edx,0x0
1000751a:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
1000751d:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
10007524:	51                   	push   ecx
10007525:	52                   	push   edx
10007526:	50                   	push   eax
10007527:	53                   	push   ebx
10007528:	e8 fc ff ff ff       	call   10007529 <begin(void*)+0x1aaf>	10007529: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000752d:	83 c4 10             	add    esp,0x10
10007530:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10007533:	eb 95                	jmp    100074ca <begin(void*)+0x1a50>
10007535:	a0 00 00 00 00       	mov    al,ds:0x0	10007536: R_386_32	installKey
1000753a:	84 c0                	test   al,al
1000753c:	0f 94 c0             	sete   al
1000753f:	84 c0                	test   al,al
10007541:	74 02                	je     10007545 <begin(void*)+0x1acb>
10007543:	eb f0                	jmp    10007535 <begin(void*)+0x1abb>
10007545:	a1 00 00 00 00       	mov    eax,ds:0x0	10007546: R_386_32	term
1000754a:	05 82 00 00 00       	add    eax,0x82
1000754f:	83 ec 04             	sub    esp,0x4
10007552:	6a 04                	push   0x4
10007554:	6a 00                	push   0x0
10007556:	50                   	push   eax
10007557:	e8 fc ff ff ff       	call   10007558 <begin(void*)+0x1ade>	10007558: R_386_PC32	memset
1000755c:	83 c4 10             	add    esp,0x10
1000755f:	a1 00 00 00 00       	mov    eax,ds:0x0	10007560: R_386_32	term
10007564:	05 02 01 00 00       	add    eax,0x102
10007569:	83 ec 04             	sub    esp,0x4
1000756c:	6a 04                	push   0x4
1000756e:	6a 00                	push   0x0
10007570:	50                   	push   eax
10007571:	e8 fc ff ff ff       	call   10007572 <begin(void*)+0x1af8>	10007572: R_386_PC32	memset
10007576:	83 c4 10             	add    esp,0x10
10007579:	a0 00 00 00 00       	mov    al,ds:0x0	1000757a: R_386_32	installKey
1000757e:	3c 01                	cmp    al,0x1
10007580:	0f 94 c0             	sete   al
10007583:	84 c0                	test   al,al
10007585:	74 12                	je     10007599 <begin(void*)+0x1b1f>
10007587:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
1000758a:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
1000758e:	79 39                	jns    100075c9 <begin(void*)+0x1b4f>
10007590:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10007597:	eb 30                	jmp    100075c9 <begin(void*)+0x1b4f>
10007599:	a0 00 00 00 00       	mov    al,ds:0x0	1000759a: R_386_32	installKey
1000759e:	3c 02                	cmp    al,0x2
100075a0:	0f 94 c0             	sete   al
100075a3:	84 c0                	test   al,al
100075a5:	74 14                	je     100075bb <begin(void*)+0x1b41>
100075a7:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
100075aa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100075ad:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
100075b0:	7f 17                	jg     100075c9 <begin(void*)+0x1b4f>
100075b2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100075b5:	48                   	dec    eax
100075b6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100075b9:	eb 0e                	jmp    100075c9 <begin(void*)+0x1b4f>
100075bb:	a0 00 00 00 00       	mov    al,ds:0x0	100075bc: R_386_32	installKey
100075c0:	3c 0a                	cmp    al,0xa
100075c2:	0f 94 c0             	sete   al
100075c5:	84 c0                	test   al,al
100075c7:	75 1e                	jne    100075e7 <begin(void*)+0x1b6d>
100075c9:	83 ec 08             	sub    esp,0x8
100075cc:	6a 00                	push   0x0
100075ce:	68 f4 01 00 00       	push   0x1f4
100075d3:	e8 fc ff ff ff       	call   100075d4 <begin(void*)+0x1b5a>	100075d4: R_386_PC32	milliTenthSleep(unsigned long long)
100075d8:	83 c4 10             	add    esp,0x10
100075db:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100075dd: R_386_32	installKey
100075e2:	e9 ca fe ff ff       	jmp    100074b1 <begin(void*)+0x1a37>
100075e7:	90                   	nop
100075e8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100075eb:	48                   	dec    eax
100075ec:	39 45 dc             	cmp    DWORD PTR [ebp-0x24],eax
100075ef:	0f 85 af 00 00 00    	jne    100076a4 <begin(void*)+0x1c2a>
100075f5:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100075f7: R_386_32	createNewUserMode
100075fc:	83 ec 0c             	sub    esp,0xc
100075ff:	6a 00                	push   0x0
10007601:	e8 fc ff ff ff       	call   10007602 <begin(void*)+0x1b88>	10007602: R_386_PC32	firstRun(bool)
10007606:	83 c4 10             	add    esp,0x10
10007609:	a0 00 00 00 00       	mov    al,ds:0x0	1000760a: R_386_32	createNewUserMode
1000760e:	83 f0 01             	xor    eax,0x1
10007611:	84 c0                	test   al,al
10007613:	0f 84 20 e7 ff ff    	je     10005d39 <begin(void*)+0x2bf>
10007619:	a1 00 00 00 00       	mov    eax,ds:0x0	1000761a: R_386_32	term
1000761e:	05 82 00 00 00       	add    eax,0x82
10007623:	83 ec 04             	sub    esp,0x4
10007626:	6a 04                	push   0x4
10007628:	6a 00                	push   0x0
1000762a:	50                   	push   eax
1000762b:	e8 fc ff ff ff       	call   1000762c <begin(void*)+0x1bb2>	1000762c: R_386_PC32	memset
10007630:	83 c4 10             	add    esp,0x10
10007633:	a1 00 00 00 00       	mov    eax,ds:0x0	10007634: R_386_32	term
10007638:	05 02 01 00 00       	add    eax,0x102
1000763d:	83 ec 04             	sub    esp,0x4
10007640:	6a 04                	push   0x4
10007642:	6a 00                	push   0x0
10007644:	50                   	push   eax
10007645:	e8 fc ff ff ff       	call   10007646 <begin(void*)+0x1bcc>	10007646: R_386_PC32	memset
1000764a:	83 c4 10             	add    esp,0x10
1000764d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000764f: R_386_32	installKey
10007654:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10007657:	e9 ac fb ff ff       	jmp    10007208 <begin(void*)+0x178e>
1000765c:	90                   	nop
1000765d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000765f: R_386_32	createNewUserMode
10007664:	a1 00 00 00 00       	mov    eax,ds:0x0	10007665: R_386_32	term
10007669:	05 82 00 00 00       	add    eax,0x82
1000766e:	83 ec 04             	sub    esp,0x4
10007671:	6a 04                	push   0x4
10007673:	6a 00                	push   0x0
10007675:	50                   	push   eax
10007676:	e8 fc ff ff ff       	call   10007677 <begin(void*)+0x1bfd>	10007677: R_386_PC32	memset
1000767b:	83 c4 10             	add    esp,0x10
1000767e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000767f: R_386_32	term
10007683:	05 02 01 00 00       	add    eax,0x102
10007688:	83 ec 04             	sub    esp,0x4
1000768b:	6a 04                	push   0x4
1000768d:	6a 00                	push   0x0
1000768f:	50                   	push   eax
10007690:	e8 fc ff ff ff       	call   10007691 <begin(void*)+0x1c17>	10007691: R_386_PC32	memset
10007695:	83 c4 10             	add    esp,0x10
10007698:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000769a: R_386_32	installKey
1000769f:	e9 64 fb ff ff       	jmp    10007208 <begin(void*)+0x178e>
100076a4:	83 ec 08             	sub    esp,0x8
100076a7:	68 2e b8 00 10       	push   0x1000b82e	100076a8: R_386_32	.text
100076ac:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
100076b2:	50                   	push   eax
100076b3:	e8 fc ff ff ff       	call   100076b4 <begin(void*)+0x1c3a>	100076b4: R_386_PC32	strcpy
100076b8:	83 c4 10             	add    esp,0x10
100076bb:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100076be:	8b 84 85 c0 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x640]
100076c5:	83 ec 08             	sub    esp,0x8
100076c8:	50                   	push   eax
100076c9:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
100076cf:	50                   	push   eax
100076d0:	e8 fc ff ff ff       	call   100076d1 <begin(void*)+0x1c57>	100076d1: R_386_PC32	strcat
100076d5:	83 c4 10             	add    esp,0x10
100076d8:	83 ec 08             	sub    esp,0x8
100076db:	68 67 bb 00 10       	push   0x1000bb67	100076dc: R_386_32	.text
100076e0:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
100076e6:	50                   	push   eax
100076e7:	e8 fc ff ff ff       	call   100076e8 <begin(void*)+0x1c6e>	100076e8: R_386_PC32	strcat
100076ec:	83 c4 10             	add    esp,0x10
100076ef:	83 ec 0c             	sub    esp,0xc
100076f2:	68 f0 b7 00 10       	push   0x1000b7f0	100076f3: R_386_32	.text
100076f7:	e8 fc ff ff ff       	call   100076f8 <begin(void*)+0x1c7e>	100076f8: R_386_PC32	CmOpen(char const*)
100076fc:	83 c4 10             	add    esp,0x10
100076ff:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10007702:	83 ec 08             	sub    esp,0x8
10007705:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
1000770b:	50                   	push   eax
1000770c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000770f:	e8 fc ff ff ff       	call   10007710 <begin(void*)+0x1c96>	10007710: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10007714:	83 c4 10             	add    esp,0x10
10007717:	83 ec 04             	sub    esp,0x4
1000771a:	8d 95 c2 fa ff ff    	lea    edx,[ebp-0x53e]
10007720:	52                   	push   edx
10007721:	50                   	push   eax
10007722:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007725:	e8 fc ff ff ff       	call   10007726 <begin(void*)+0x1cac>	10007726: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
1000772a:	83 c4 10             	add    esp,0x10
1000772d:	83 ec 08             	sub    esp,0x8
10007730:	68 2e b8 00 10       	push   0x1000b82e	10007731: R_386_32	.text
10007735:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
1000773b:	50                   	push   eax
1000773c:	e8 fc ff ff ff       	call   1000773d <begin(void*)+0x1cc3>	1000773d: R_386_PC32	strcpy
10007741:	83 c4 10             	add    esp,0x10
10007744:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10007747:	8b 84 85 c0 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x640]
1000774e:	83 ec 08             	sub    esp,0x8
10007751:	50                   	push   eax
10007752:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007758:	50                   	push   eax
10007759:	e8 fc ff ff ff       	call   1000775a <begin(void*)+0x1ce0>	1000775a: R_386_PC32	strcat
1000775e:	83 c4 10             	add    esp,0x10
10007761:	83 ec 08             	sub    esp,0x8
10007764:	68 71 bb 00 10       	push   0x1000bb71	10007765: R_386_32	.text
10007769:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
1000776f:	50                   	push   eax
10007770:	e8 fc ff ff ff       	call   10007771 <begin(void*)+0x1cf7>	10007771: R_386_PC32	strcat
10007775:	83 c4 10             	add    esp,0x10
10007778:	83 ec 08             	sub    esp,0x8
1000777b:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007781:	50                   	push   eax
10007782:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007785:	e8 fc ff ff ff       	call   10007786 <begin(void*)+0x1d0c>	10007786: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000778a:	83 c4 10             	add    esp,0x10
1000778d:	83 ec 04             	sub    esp,0x4
10007790:	8d 95 f0 f8 ff ff    	lea    edx,[ebp-0x710]
10007796:	52                   	push   edx
10007797:	50                   	push   eax
10007798:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000779b:	e8 fc ff ff ff       	call   1000779c <begin(void*)+0x1d22>	1000779c: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
100077a0:	83 c4 10             	add    esp,0x10
100077a3:	83 ec 0c             	sub    esp,0xc
100077a6:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100077a9:	e8 fc ff ff ff       	call   100077aa <begin(void*)+0x1d30>	100077aa: R_386_PC32	CmClose(Reghive_Tag*)
100077ae:	83 c4 10             	add    esp,0x10
100077b1:	83 ec 04             	sub    esp,0x4
100077b4:	68 80 00 00 00       	push   0x80
100077b9:	6a 00                	push   0x0
100077bb:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
100077c1:	50                   	push   eax
100077c2:	e8 fc ff ff ff       	call   100077c3 <begin(void*)+0x1d49>	100077c3: R_386_PC32	memset
100077c7:	83 c4 10             	add    esp,0x10
100077ca:	e8 fc ff ff ff       	call   100077cb <begin(void*)+0x1d51>	100077cb: R_386_PC32	drawBootScreen()
100077cf:	83 ec 08             	sub    esp,0x8
100077d2:	6a 01                	push   0x1
100077d4:	68 d7 bc 00 10       	push   0x1000bcd7	100077d5: R_386_32	.text
100077d9:	6a 10                	push   0x10
100077db:	6a 39                	push   0x39
100077dd:	6a 03                	push   0x3
100077df:	6a 0c                	push   0xc
100077e1:	e8 fc ff ff ff       	call   100077e2 <begin(void*)+0x1d68>	100077e2: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
100077e6:	83 c4 20             	add    esp,0x20
100077e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100077ea: R_386_32	term
100077ee:	83 ec 04             	sub    esp,0x4
100077f1:	6a 06                	push   0x6
100077f3:	6a 0e                	push   0xe
100077f5:	50                   	push   eax
100077f6:	e8 fc ff ff ff       	call   100077f7 <begin(void*)+0x1d7d>	100077f7: R_386_PC32	VgaText::setCursor(int, int)
100077fb:	83 c4 10             	add    esp,0x10
100077fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100077ff: R_386_32	term
10007803:	6a 07                	push   0x7
10007805:	6a 00                	push   0x0
10007807:	68 e0 bc 00 10       	push   0x1000bce0	10007808: R_386_32	.text
1000780c:	50                   	push   eax
1000780d:	e8 fc ff ff ff       	call   1000780e <begin(void*)+0x1d94>	1000780e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10007812:	83 c4 10             	add    esp,0x10
10007815:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10007819:	7e 72                	jle    1000788d <begin(void*)+0x1e13>
1000781b:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10007822:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10007825:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10007828:	7d 63                	jge    1000788d <begin(void*)+0x1e13>
1000782a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000782b: R_386_32	term
1000782f:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
10007832:	83 c2 08             	add    edx,0x8
10007835:	83 ec 04             	sub    esp,0x4
10007838:	52                   	push   edx
10007839:	6a 0f                	push   0xf
1000783b:	50                   	push   eax
1000783c:	e8 fc ff ff ff       	call   1000783d <begin(void*)+0x1dc3>	1000783d: R_386_PC32	VgaText::setCursor(int, int)
10007841:	83 c4 10             	add    esp,0x10
10007844:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10007846: R_386_32	term
1000784a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
1000784d:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10007850:	75 07                	jne    10007859 <begin(void*)+0x1ddf>
10007852:	b9 00 00 00 00       	mov    ecx,0x0
10007857:	eb 05                	jmp    1000785e <begin(void*)+0x1de4>
10007859:	b9 07 00 00 00       	mov    ecx,0x7
1000785e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10007861:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10007864:	75 07                	jne    1000786d <begin(void*)+0x1df3>
10007866:	ba 07 00 00 00       	mov    edx,0x7
1000786b:	eb 05                	jmp    10007872 <begin(void*)+0x1df8>
1000786d:	ba 00 00 00 00       	mov    edx,0x0
10007872:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10007875:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
1000787c:	51                   	push   ecx
1000787d:	52                   	push   edx
1000787e:	50                   	push   eax
1000787f:	53                   	push   ebx
10007880:	e8 fc ff ff ff       	call   10007881 <begin(void*)+0x1e07>	10007881: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10007885:	83 c4 10             	add    esp,0x10
10007888:	ff 45 d0             	inc    DWORD PTR [ebp-0x30]
1000788b:	eb 95                	jmp    10007822 <begin(void*)+0x1da8>
1000788d:	83 ec 0c             	sub    esp,0xc
10007890:	68 d7 bc 00 10       	push   0x1000bcd7	10007891: R_386_32	.text
10007895:	6a 0b                	push   0xb
10007897:	6a 2d                	push   0x2d
10007899:	6a 0a                	push   0xa
1000789b:	6a 1c                	push   0x1c
1000789d:	e8 fc ff ff ff       	call   1000789e <begin(void*)+0x1e24>	1000789e: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100078a2:	83 c4 20             	add    esp,0x20
100078a5:	c6 45 cf 01          	mov    BYTE PTR [ebp-0x31],0x1
100078a9:	83 ec 04             	sub    esp,0x4
100078ac:	8d 85 42 fb ff ff    	lea    eax,[ebp-0x4be]
100078b2:	50                   	push   eax
100078b3:	8d 85 f0 f8 ff ff    	lea    eax,[ebp-0x710]
100078b9:	50                   	push   eax
100078ba:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
100078c0:	50                   	push   eax
100078c1:	e8 fc ff ff ff       	call   100078c2 <begin(void*)+0x1e48>	100078c2: R_386_PC32	bcrypt_hashpw
100078c6:	83 c4 10             	add    esp,0x10
100078c9:	83 ec 08             	sub    esp,0x8
100078cc:	8d 85 42 fb ff ff    	lea    eax,[ebp-0x4be]
100078d2:	50                   	push   eax
100078d3:	8d 85 c2 fa ff ff    	lea    eax,[ebp-0x53e]
100078d9:	50                   	push   eax
100078da:	e8 fc ff ff ff       	call   100078db <begin(void*)+0x1e61>	100078db: R_386_PC32	strcmp
100078df:	83 c4 10             	add    esp,0x10
100078e2:	85 c0                	test   eax,eax
100078e4:	75 04                	jne    100078ea <begin(void*)+0x1e70>
100078e6:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
100078ea:	83 ec 04             	sub    esp,0x4
100078ed:	68 80 00 00 00       	push   0x80
100078f2:	6a 00                	push   0x0
100078f4:	8d 85 42 fb ff ff    	lea    eax,[ebp-0x4be]
100078fa:	50                   	push   eax
100078fb:	e8 fc ff ff ff       	call   100078fc <begin(void*)+0x1e82>	100078fc: R_386_PC32	memset
10007900:	83 c4 10             	add    esp,0x10
10007903:	80 7d cf 00          	cmp    BYTE PTR [ebp-0x31],0x0
10007907:	0f 84 9c 02 00 00    	je     10007ba9 <begin(void*)+0x212f>
1000790d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000790e: R_386_32	term
10007912:	83 ec 04             	sub    esp,0x4
10007915:	6a 0d                	push   0xd
10007917:	6a 1e                	push   0x1e
10007919:	50                   	push   eax
1000791a:	e8 fc ff ff ff       	call   1000791b <begin(void*)+0x1ea1>	1000791b: R_386_PC32	VgaText::setCursor(int, int)
1000791f:	83 c4 10             	add    esp,0x10
10007922:	a1 00 00 00 00       	mov    eax,ds:0x0	10007923: R_386_32	term
10007927:	83 ec 08             	sub    esp,0x8
1000792a:	68 10 bd 00 10       	push   0x1000bd10	1000792b: R_386_32	.text
1000792f:	50                   	push   eax
10007930:	e8 fc ff ff ff       	call   10007931 <begin(void*)+0x1eb7>	10007931: R_386_PC32	VgaText::puts(char const*)
10007935:	83 c4 10             	add    esp,0x10
10007938:	a1 00 00 00 00       	mov    eax,ds:0x0	10007939: R_386_32	term
1000793d:	83 ec 04             	sub    esp,0x4
10007940:	6a 0e                	push   0xe
10007942:	6a 1e                	push   0x1e
10007944:	50                   	push   eax
10007945:	e8 fc ff ff ff       	call   10007946 <begin(void*)+0x1ecc>	10007946: R_386_PC32	VgaText::setCursor(int, int)
1000794a:	83 c4 10             	add    esp,0x10
1000794d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000794e: R_386_32	term
10007952:	83 ec 08             	sub    esp,0x8
10007955:	68 3a bd 00 10       	push   0x1000bd3a	10007956: R_386_32	.text
1000795a:	50                   	push   eax
1000795b:	e8 fc ff ff ff       	call   1000795c <begin(void*)+0x1ee2>	1000795c: R_386_PC32	VgaText::puts(char const*)
10007960:	83 c4 10             	add    esp,0x10
10007963:	a1 00 00 00 00       	mov    eax,ds:0x0	10007964: R_386_32	term
10007968:	83 ec 04             	sub    esp,0x4
1000796b:	6a 10                	push   0x10
1000796d:	6a 1e                	push   0x1e
1000796f:	50                   	push   eax
10007970:	e8 fc ff ff ff       	call   10007971 <begin(void*)+0x1ef7>	10007971: R_386_PC32	VgaText::setCursor(int, int)
10007975:	83 c4 10             	add    esp,0x10
10007978:	a1 00 00 00 00       	mov    eax,ds:0x0	10007979: R_386_32	term
1000797d:	6a 07                	push   0x7
1000797f:	6a 00                	push   0x0
10007981:	68 48 b3 00 10       	push   0x1000b348	10007982: R_386_32	.text
10007986:	50                   	push   eax
10007987:	e8 fc ff ff ff       	call   10007988 <begin(void*)+0x1f0e>	10007988: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000798c:	83 c4 10             	add    esp,0x10
1000798f:	a1 00 00 00 00       	mov    eax,ds:0x0	10007990: R_386_32	term
10007994:	83 ec 08             	sub    esp,0x8
10007997:	6a 1e                	push   0x1e
10007999:	50                   	push   eax
1000799a:	e8 fc ff ff ff       	call   1000799b <begin(void*)+0x1f21>	1000799b: R_386_PC32	VgaText::setCursorX(int)
1000799f:	83 c4 10             	add    esp,0x10
100079a2:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
100079a9:	83 ec 0c             	sub    esp,0xc
100079ac:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
100079b2:	50                   	push   eax
100079b3:	e8 fc ff ff ff       	call   100079b4 <begin(void*)+0x1f3a>	100079b4: R_386_PC32	strlen
100079b8:	83 c4 10             	add    esp,0x10
100079bb:	89 c2                	mov    edx,eax
100079bd:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
100079c0:	39 c2                	cmp    edx,eax
100079c2:	76 1c                	jbe    100079e0 <begin(void*)+0x1f66>
100079c4:	a1 00 00 00 00       	mov    eax,ds:0x0	100079c5: R_386_32	term
100079c9:	6a 07                	push   0x7
100079cb:	6a 00                	push   0x0
100079cd:	68 74 b3 00 10       	push   0x1000b374	100079ce: R_386_32	.text
100079d2:	50                   	push   eax
100079d3:	e8 fc ff ff ff       	call   100079d4 <begin(void*)+0x1f5a>	100079d4: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100079d8:	83 c4 10             	add    esp,0x10
100079db:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
100079de:	eb c9                	jmp    100079a9 <begin(void*)+0x1f2f>
100079e0:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100079e2: R_386_32	term
100079e6:	83 ec 0c             	sub    esp,0xc
100079e9:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
100079ef:	50                   	push   eax
100079f0:	e8 fc ff ff ff       	call   100079f1 <begin(void*)+0x1f77>	100079f1: R_386_PC32	strlen
100079f5:	83 c4 10             	add    esp,0x10
100079f8:	83 c0 1e             	add    eax,0x1e
100079fb:	83 ec 04             	sub    esp,0x4
100079fe:	6a 10                	push   0x10
10007a00:	50                   	push   eax
10007a01:	53                   	push   ebx
10007a02:	e8 fc ff ff ff       	call   10007a03 <begin(void*)+0x1f89>	10007a03: R_386_PC32	VgaText::setCursor(int, int)
10007a07:	83 c4 10             	add    esp,0x10
10007a0a:	a0 00 00 00 00       	mov    al,ds:0x0	10007a0b: R_386_32	installKey
10007a0f:	84 c0                	test   al,al
10007a11:	0f 94 c0             	sete   al
10007a14:	84 c0                	test   al,al
10007a16:	74 02                	je     10007a1a <begin(void*)+0x1fa0>
10007a18:	eb f0                	jmp    10007a0a <begin(void*)+0x1f90>
10007a1a:	a1 00 00 00 00       	mov    eax,ds:0x0	10007a1b: R_386_32	term
10007a1f:	05 82 00 00 00       	add    eax,0x82
10007a24:	83 ec 04             	sub    esp,0x4
10007a27:	6a 10                	push   0x10
10007a29:	6a 00                	push   0x0
10007a2b:	50                   	push   eax
10007a2c:	e8 fc ff ff ff       	call   10007a2d <begin(void*)+0x1fb3>	10007a2d: R_386_PC32	memset
10007a31:	83 c4 10             	add    esp,0x10
10007a34:	a1 00 00 00 00       	mov    eax,ds:0x0	10007a35: R_386_32	term
10007a39:	05 02 01 00 00       	add    eax,0x102
10007a3e:	83 ec 04             	sub    esp,0x4
10007a41:	6a 10                	push   0x10
10007a43:	6a 00                	push   0x0
10007a45:	50                   	push   eax
10007a46:	e8 fc ff ff ff       	call   10007a47 <begin(void*)+0x1fcd>	10007a47: R_386_PC32	memset
10007a4b:	83 c4 10             	add    esp,0x10
10007a4e:	a0 00 00 00 00       	mov    al,ds:0x0	10007a4f: R_386_32	installKey
10007a53:	3c 0a                	cmp    al,0xa
10007a55:	0f 94 c0             	sete   al
10007a58:	84 c0                	test   al,al
10007a5a:	0f 84 88 00 00 00    	je     10007ae8 <begin(void*)+0x206e>
10007a60:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007a62: R_386_32	installKey
10007a67:	83 ec 04             	sub    esp,0x4
10007a6a:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10007a70:	50                   	push   eax
10007a71:	8d 85 f0 f8 ff ff    	lea    eax,[ebp-0x710]
10007a77:	50                   	push   eax
10007a78:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007a7e:	50                   	push   eax
10007a7f:	e8 fc ff ff ff       	call   10007a80 <begin(void*)+0x2006>	10007a80: R_386_PC32	bcrypt_hashpw
10007a84:	83 c4 10             	add    esp,0x10
10007a87:	8d 85 f0 f8 ff ff    	lea    eax,[ebp-0x710]
10007a8d:	50                   	push   eax
10007a8e:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10007a94:	50                   	push   eax
10007a95:	8d 85 c2 fa ff ff    	lea    eax,[ebp-0x53e]
10007a9b:	50                   	push   eax
10007a9c:	68 54 bd 00 10       	push   0x1000bd54	10007a9d: R_386_32	.text
10007aa1:	e8 fc ff ff ff       	call   10007aa2 <begin(void*)+0x2028>	10007aa2: R_386_PC32	Dbg::kprintf(char const*, ...)
10007aa6:	83 c4 10             	add    esp,0x10
10007aa9:	83 ec 08             	sub    esp,0x8
10007aac:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10007ab2:	50                   	push   eax
10007ab3:	8d 85 c2 fa ff ff    	lea    eax,[ebp-0x53e]
10007ab9:	50                   	push   eax
10007aba:	e8 fc ff ff ff       	call   10007abb <begin(void*)+0x2041>	10007abb: R_386_PC32	strcmp
10007abf:	83 c4 10             	add    esp,0x10
10007ac2:	85 c0                	test   eax,eax
10007ac4:	0f 84 de 00 00 00    	je     10007ba8 <begin(void*)+0x212e>
10007aca:	83 ec 04             	sub    esp,0x4
10007acd:	68 80 00 00 00       	push   0x80
10007ad2:	6a 00                	push   0x0
10007ad4:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10007ada:	50                   	push   eax
10007adb:	e8 fc ff ff ff       	call   10007adc <begin(void*)+0x2062>	10007adc: R_386_PC32	memset
10007ae0:	83 c4 10             	add    esp,0x10
10007ae3:	e9 b4 00 00 00       	jmp    10007b9c <begin(void*)+0x2122>
10007ae8:	a0 00 00 00 00       	mov    al,ds:0x0	10007ae9: R_386_32	installKey
10007aed:	3c 1f                	cmp    al,0x1f
10007aef:	7e 0d                	jle    10007afe <begin(void*)+0x2084>
10007af1:	a0 00 00 00 00       	mov    al,ds:0x0	10007af2: R_386_32	installKey
10007af6:	3c 7f                	cmp    al,0x7f
10007af8:	74 04                	je     10007afe <begin(void*)+0x2084>
10007afa:	b0 01                	mov    al,0x1
10007afc:	eb 02                	jmp    10007b00 <begin(void*)+0x2086>
10007afe:	b0 00                	mov    al,0x0
10007b00:	84 c0                	test   al,al
10007b02:	74 44                	je     10007b48 <begin(void*)+0x20ce>
10007b04:	a0 00 00 00 00       	mov    al,ds:0x0	10007b05: R_386_32	installKey
10007b09:	88 85 c2 fc ff ff    	mov    BYTE PTR [ebp-0x33e],al
10007b0f:	c6 85 c3 fc ff ff 00 	mov    BYTE PTR [ebp-0x33d],0x0
10007b16:	83 ec 0c             	sub    esp,0xc
10007b19:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007b1f:	50                   	push   eax
10007b20:	e8 fc ff ff ff       	call   10007b21 <begin(void*)+0x20a7>	10007b21: R_386_PC32	strlen
10007b25:	83 c4 10             	add    esp,0x10
10007b28:	83 f8 22             	cmp    eax,0x22
10007b2b:	77 6f                	ja     10007b9c <begin(void*)+0x2122>
10007b2d:	83 ec 08             	sub    esp,0x8
10007b30:	8d 85 c2 fc ff ff    	lea    eax,[ebp-0x33e]
10007b36:	50                   	push   eax
10007b37:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007b3d:	50                   	push   eax
10007b3e:	e8 fc ff ff ff       	call   10007b3f <begin(void*)+0x20c5>	10007b3f: R_386_PC32	strcat
10007b43:	83 c4 10             	add    esp,0x10
10007b46:	eb 54                	jmp    10007b9c <begin(void*)+0x2122>
10007b48:	a0 00 00 00 00       	mov    al,ds:0x0	10007b49: R_386_32	installKey
10007b4d:	3c 08                	cmp    al,0x8
10007b4f:	0f 94 c0             	sete   al
10007b52:	84 c0                	test   al,al
10007b54:	74 33                	je     10007b89 <begin(void*)+0x210f>
10007b56:	83 ec 0c             	sub    esp,0xc
10007b59:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007b5f:	50                   	push   eax
10007b60:	e8 fc ff ff ff       	call   10007b61 <begin(void*)+0x20e7>	10007b61: R_386_PC32	strlen
10007b65:	83 c4 10             	add    esp,0x10
10007b68:	85 c0                	test   eax,eax
10007b6a:	74 30                	je     10007b9c <begin(void*)+0x2122>
10007b6c:	83 ec 0c             	sub    esp,0xc
10007b6f:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007b75:	50                   	push   eax
10007b76:	e8 fc ff ff ff       	call   10007b77 <begin(void*)+0x20fd>	10007b77: R_386_PC32	strlen
10007b7b:	83 c4 10             	add    esp,0x10
10007b7e:	48                   	dec    eax
10007b7f:	c6 84 05 42 fa ff ff 00 	mov    BYTE PTR [ebp+eax*1-0x5be],0x0
10007b87:	eb 13                	jmp    10007b9c <begin(void*)+0x2122>
10007b89:	a0 00 00 00 00       	mov    al,ds:0x0	10007b8a: R_386_32	installKey
10007b8e:	3c 1b                	cmp    al,0x1b
10007b90:	0f 94 c0             	sete   al
10007b93:	84 c0                	test   al,al
10007b95:	74 05                	je     10007b9c <begin(void*)+0x2122>
10007b97:	e9 c5 f8 ff ff       	jmp    10007461 <begin(void*)+0x19e7>
10007b9c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007b9e: R_386_32	installKey
10007ba3:	e9 5b fd ff ff       	jmp    10007903 <begin(void*)+0x1e89>
10007ba8:	90                   	nop
10007ba9:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10007bab: R_386_32	guiKeyboardHandler
10007bb3:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
10007bba:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007bbd:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10007bc0:	7d 69                	jge    10007c2b <begin(void*)+0x21b1>
10007bc2:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007bc5:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
10007bcc:	85 c0                	test   eax,eax
10007bce:	74 24                	je     10007bf4 <begin(void*)+0x217a>
10007bd0:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007bd3:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
10007bda:	83 ec 0c             	sub    esp,0xc
10007bdd:	50                   	push   eax
10007bde:	e8 fc ff ff ff       	call   10007bdf <begin(void*)+0x2165>	10007bdf: R_386_PC32	free
10007be3:	83 c4 10             	add    esp,0x10
10007be6:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007be9:	c7 84 85 40 f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x6c0],0x0
10007bf4:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007bf7:	8b 84 85 c0 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x640]
10007bfe:	85 c0                	test   eax,eax
10007c00:	74 24                	je     10007c26 <begin(void*)+0x21ac>
10007c02:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007c05:	8b 84 85 c0 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x640]
10007c0c:	83 ec 0c             	sub    esp,0xc
10007c0f:	50                   	push   eax
10007c10:	e8 fc ff ff ff       	call   10007c11 <begin(void*)+0x2197>	10007c11: R_386_PC32	free
10007c15:	83 c4 10             	add    esp,0x10
10007c18:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007c1b:	c7 84 85 c0 f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x640],0x0
10007c26:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
10007c29:	eb 8f                	jmp    10007bba <begin(void*)+0x2140>
10007c2b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007c2d: R_386_32	VgaText::hiddenOut
10007c32:	83 ec 0c             	sub    esp,0xc
10007c35:	68 c4 07 00 00       	push   0x7c4
10007c3a:	e8 fc ff ff ff       	call   10007c3b <begin(void*)+0x21c1>	10007c3b: R_386_PC32	operator new(unsigned long)
10007c3f:	83 c4 10             	add    esp,0x10
10007c42:	89 c3                	mov    ebx,eax
10007c44:	6a 00                	push   0x0
10007c46:	6a 00                	push   0x0
10007c48:	68 c6 b7 00 10       	push   0x1000b7c6	10007c49: R_386_32	.text
10007c4d:	53                   	push   ebx
10007c4e:	e8 fc ff ff ff       	call   10007c4f <begin(void*)+0x21d5>	10007c4f: R_386_PC32	Process::Process(char const*, Process*, char**)
10007c53:	83 c4 10             	add    esp,0x10
10007c56:	89 5d ac             	mov    DWORD PTR [ebp-0x54],ebx
10007c59:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10007c5c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
10007c62:	83 ec 0c             	sub    esp,0xc
10007c65:	50                   	push   eax
10007c66:	e8 fc ff ff ff       	call   10007c67 <begin(void*)+0x21ed>	10007c67: R_386_PC32	setActiveTerminal(VgaText*)
10007c6b:	83 c4 10             	add    esp,0x10
10007c6e:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
10007c75:	83 7d c0 18          	cmp    DWORD PTR [ebp-0x40],0x18
10007c79:	7f 2e                	jg     10007ca9 <begin(void*)+0x222f>
10007c7b:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [ebp-0x44],0x0
10007c82:	83 7d bc 4f          	cmp    DWORD PTR [ebp-0x44],0x4f
10007c86:	7f 1c                	jg     10007ca4 <begin(void*)+0x222a>
10007c88:	83 ec 0c             	sub    esp,0xc
10007c8b:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10007c8e:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10007c91:	6a 00                	push   0x0
10007c93:	6a 07                	push   0x7
10007c95:	6a 20                	push   0x20
10007c97:	e8 fc ff ff ff       	call   10007c98 <begin(void*)+0x221e>	10007c98: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
10007c9c:	83 c4 20             	add    esp,0x20
10007c9f:	ff 45 bc             	inc    DWORD PTR [ebp-0x44]
10007ca2:	eb de                	jmp    10007c82 <begin(void*)+0x2208>
10007ca4:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
10007ca7:	eb cc                	jmp    10007c75 <begin(void*)+0x21fb>
10007ca9:	a0 00 00 00 00       	mov    al,ds:0x0	10007caa: R_386_32	safemode
10007cae:	84 c0                	test   al,al
10007cb0:	74 40                	je     10007cf2 <begin(void*)+0x2278>
10007cb2:	c7 45 b8 00 00 00 00 	mov    DWORD PTR [ebp-0x48],0x0
10007cb9:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10007cbc:	05 c4 bd 00 10       	add    eax,0x1000bdc4	10007cbd: R_386_32	.text
10007cc1:	8a 00                	mov    al,BYTE PTR [eax]
10007cc3:	84 c0                	test   al,al
10007cc5:	74 2b                	je     10007cf2 <begin(void*)+0x2278>
10007cc7:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10007cca:	8d 50 44             	lea    edx,[eax+0x44]
10007ccd:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10007cd0:	05 c4 bd 00 10       	add    eax,0x1000bdc4	10007cd1: R_386_32	.text
10007cd5:	8a 00                	mov    al,BYTE PTR [eax]
10007cd7:	0f be c0             	movsx  eax,al
10007cda:	83 ec 0c             	sub    esp,0xc
10007cdd:	6a 17                	push   0x17
10007cdf:	52                   	push   edx
10007ce0:	6a 00                	push   0x0
10007ce2:	6a 0f                	push   0xf
10007ce4:	50                   	push   eax
10007ce5:	e8 fc ff ff ff       	call   10007ce6 <begin(void*)+0x226c>	10007ce6: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
10007cea:	83 c4 20             	add    esp,0x20
10007ced:	ff 45 b8             	inc    DWORD PTR [ebp-0x48]
10007cf0:	eb c7                	jmp    10007cb9 <begin(void*)+0x223f>
10007cf2:	83 ec 0c             	sub    esp,0xc
10007cf5:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10007cf8:	e8 fc ff ff ff       	call   10007cf9 <begin(void*)+0x227f>	10007cf9: R_386_PC32	Process::createUserThread()
10007cfd:	83 c4 10             	add    esp,0x10
10007d00:	a0 00 00 00 00       	mov    al,ds:0x0	10007d01: R_386_32	safemode
10007d05:	83 f0 01             	xor    eax,0x1
10007d08:	84 c0                	test   al,al
10007d0a:	0f 84 9a 00 00 00    	je     10007daa <begin(void*)+0x2330>
10007d10:	8b 85 c8 fc ff ff    	mov    eax,DWORD PTR [ebp-0x338]
10007d16:	8b 95 cc fc ff ff    	mov    edx,DWORD PTR [ebp-0x334]
10007d1c:	89 c6                	mov    esi,eax
10007d1e:	83 f6 01             	xor    esi,0x1
10007d21:	89 b5 90 f8 ff ff    	mov    DWORD PTR [ebp-0x770],esi
10007d27:	89 d0                	mov    eax,edx
10007d29:	80 f4 00             	xor    ah,0x0
10007d2c:	89 85 94 f8 ff ff    	mov    DWORD PTR [ebp-0x76c],eax
10007d32:	8b b5 90 f8 ff ff    	mov    esi,DWORD PTR [ebp-0x770]
10007d38:	8b bd 94 f8 ff ff    	mov    edi,DWORD PTR [ebp-0x76c]
10007d3e:	89 f8                	mov    eax,edi
10007d40:	09 f0                	or     eax,esi
10007d42:	85 c0                	test   eax,eax
10007d44:	75 17                	jne    10007d5d <begin(void*)+0x22e3>
10007d46:	a1 00 00 00 00       	mov    eax,ds:0x0	10007d47: R_386_32	kernelProcess
10007d4b:	6a 01                	push   0x1
10007d4d:	6a 00                	push   0x0
10007d4f:	68 00 00 00 00       	push   0x0	10007d50: R_386_32	startGUI(void*)
10007d54:	50                   	push   eax
10007d55:	e8 fc ff ff ff       	call   10007d56 <begin(void*)+0x22dc>	10007d56: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10007d5a:	83 c4 10             	add    esp,0x10
10007d5d:	8b 85 c8 fc ff ff    	mov    eax,DWORD PTR [ebp-0x338]
10007d63:	8b 95 cc fc ff ff    	mov    edx,DWORD PTR [ebp-0x334]
10007d69:	89 c7                	mov    edi,eax
10007d6b:	83 f7 02             	xor    edi,0x2
10007d6e:	89 bd 88 f8 ff ff    	mov    DWORD PTR [ebp-0x778],edi
10007d74:	89 d0                	mov    eax,edx
10007d76:	80 f4 00             	xor    ah,0x0
10007d79:	89 85 8c f8 ff ff    	mov    DWORD PTR [ebp-0x774],eax
10007d7f:	8b b5 88 f8 ff ff    	mov    esi,DWORD PTR [ebp-0x778]
10007d85:	8b bd 8c f8 ff ff    	mov    edi,DWORD PTR [ebp-0x774]
10007d8b:	89 f8                	mov    eax,edi
10007d8d:	09 f0                	or     eax,esi
10007d8f:	85 c0                	test   eax,eax
10007d91:	75 17                	jne    10007daa <begin(void*)+0x2330>
10007d93:	a1 00 00 00 00       	mov    eax,ds:0x0	10007d94: R_386_32	kernelProcess
10007d98:	6a 01                	push   0x1
10007d9a:	6a 00                	push   0x0
10007d9c:	68 00 00 00 00       	push   0x0	10007d9d: R_386_32	startGUIVESA(void*)
10007da1:	50                   	push   eax
10007da2:	e8 fc ff ff ff       	call   10007da3 <begin(void*)+0x2329>	10007da3: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10007da7:	83 c4 10             	add    esp,0x10
10007daa:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10007dad:	8b 00                	mov    eax,DWORD PTR [eax]
10007daf:	83 ec 04             	sub    esp,0x4
10007db2:	6a 00                	push   0x0
10007db4:	8d 95 c4 fc ff ff    	lea    edx,[ebp-0x33c]
10007dba:	52                   	push   edx
10007dbb:	50                   	push   eax
10007dbc:	e8 fc ff ff ff       	call   10007dbd <begin(void*)+0x2343>	10007dbd: R_386_PC32	waitTask(int, int*, int)
10007dc1:	83 c4 10             	add    esp,0x10
10007dc4:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10007dc6: R_386_32	Krnl::computer
10007dca:	a1 00 00 00 00       	mov    eax,ds:0x0	10007dcb: R_386_32	Krnl::computer
10007dcf:	8b 00                	mov    eax,DWORD PTR [eax]
10007dd1:	83 c0 0c             	add    eax,0xc
10007dd4:	8b 00                	mov    eax,DWORD PTR [eax]
10007dd6:	6a 00                	push   0x0
10007dd8:	6a 00                	push   0x0
10007dda:	6a 00                	push   0x0
10007ddc:	52                   	push   edx
10007ddd:	ff d0                	call   eax
10007ddf:	83 c4 10             	add    esp,0x10
10007de2:	83 ec 0c             	sub    esp,0xc
10007de5:	68 74 bd 00 10       	push   0x1000bd74	10007de6: R_386_32	.text
10007dea:	e8 fc ff ff ff       	call   10007deb <begin(void*)+0x2371>	10007deb: R_386_PC32	KePanic(char const*)
10007def:	83 c4 10             	add    esp,0x10
10007df2:	eb fe                	jmp    10007df2 <begin(void*)+0x2378>

10007df4 <clean>:
10007df4:	57                   	push   edi
10007df5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10007df9:	b0 00                	mov    al,0x0
10007dfb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10007dff:	f3 aa                	rep stos BYTE PTR es:[edi],al
10007e01:	5f                   	pop    edi
10007e02:	c3                   	ret    

10007e03 <BF_decode>:
10007e03:	55                   	push   ebp
10007e04:	57                   	push   edi
10007e05:	56                   	push   esi
10007e06:	53                   	push   ebx
10007e07:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10007e0b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10007e0f:	89 d6                	mov    esi,edx
10007e11:	03 74 24 1c          	add    esi,DWORD PTR [esp+0x1c]
10007e15:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
10007e18:	83 e8 20             	sub    eax,0x20
10007e1b:	83 f8 5f             	cmp    eax,0x5f
10007e1e:	0f 87 a3 00 00 00    	ja     10007ec7 <BF_decode+0xc4>
10007e24:	8a 80 80 cf 00 10    	mov    al,BYTE PTR [eax+0x1000cf80]	10007e26: R_386_32	.data
10007e2a:	3c 3f                	cmp    al,0x3f
10007e2c:	0f 87 9f 00 00 00    	ja     10007ed1 <BF_decode+0xce>
10007e32:	0f b6 4b 01          	movzx  ecx,BYTE PTR [ebx+0x1]
10007e36:	83 e9 20             	sub    ecx,0x20
10007e39:	83 f9 5f             	cmp    ecx,0x5f
10007e3c:	0f 87 96 00 00 00    	ja     10007ed8 <BF_decode+0xd5>
10007e42:	8a 89 80 cf 00 10    	mov    cl,BYTE PTR [ecx+0x1000cf80]	10007e44: R_386_32	.data
10007e48:	0f b6 f9             	movzx  edi,cl
10007e4b:	83 ff 3f             	cmp    edi,0x3f
10007e4e:	0f 87 8b 00 00 00    	ja     10007edf <BF_decode+0xdc>
10007e54:	c1 e0 02             	shl    eax,0x2
10007e57:	c1 ef 04             	shr    edi,0x4
10007e5a:	09 f8                	or     eax,edi
10007e5c:	88 02                	mov    BYTE PTR [edx],al
10007e5e:	89 d7                	mov    edi,edx
10007e60:	8d 42 01             	lea    eax,[edx+0x1]
10007e63:	39 c6                	cmp    esi,eax
10007e65:	76 7f                	jbe    10007ee6 <BF_decode+0xe3>
10007e67:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
10007e6b:	83 e8 20             	sub    eax,0x20
10007e6e:	83 f8 5f             	cmp    eax,0x5f
10007e71:	77 7a                	ja     10007eed <BF_decode+0xea>
10007e73:	8a 80 80 cf 00 10    	mov    al,BYTE PTR [eax+0x1000cf80]	10007e75: R_386_32	.data
10007e79:	0f b6 e8             	movzx  ebp,al
10007e7c:	83 fd 3f             	cmp    ebp,0x3f
10007e7f:	77 73                	ja     10007ef4 <BF_decode+0xf1>
10007e81:	c1 e1 04             	shl    ecx,0x4
10007e84:	c1 ed 02             	shr    ebp,0x2
10007e87:	09 e9                	or     ecx,ebp
10007e89:	88 4a 01             	mov    BYTE PTR [edx+0x1],cl
10007e8c:	8d 52 02             	lea    edx,[edx+0x2]
10007e8f:	39 d6                	cmp    esi,edx
10007e91:	76 68                	jbe    10007efb <BF_decode+0xf8>
10007e93:	83 c3 04             	add    ebx,0x4
10007e96:	0f b6 53 ff          	movzx  edx,BYTE PTR [ebx-0x1]
10007e9a:	83 ea 20             	sub    edx,0x20
10007e9d:	83 fa 5f             	cmp    edx,0x5f
10007ea0:	77 60                	ja     10007f02 <BF_decode+0xff>
10007ea2:	8a 8a 80 cf 00 10    	mov    cl,BYTE PTR [edx+0x1000cf80]	10007ea4: R_386_32	.data
10007ea8:	80 f9 3f             	cmp    cl,0x3f
10007eab:	77 5c                	ja     10007f09 <BF_decode+0x106>
10007ead:	8d 57 03             	lea    edx,[edi+0x3]
10007eb0:	c1 e0 06             	shl    eax,0x6
10007eb3:	09 c1                	or     ecx,eax
10007eb5:	88 4a ff             	mov    BYTE PTR [edx-0x1],cl
10007eb8:	39 d6                	cmp    esi,edx
10007eba:	0f 87 55 ff ff ff    	ja     10007e15 <BF_decode+0x12>
10007ec0:	b8 00 00 00 00       	mov    eax,0x0
10007ec5:	eb 05                	jmp    10007ecc <BF_decode+0xc9>
10007ec7:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007ecc:	5b                   	pop    ebx
10007ecd:	5e                   	pop    esi
10007ece:	5f                   	pop    edi
10007ecf:	5d                   	pop    ebp
10007ed0:	c3                   	ret    
10007ed1:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007ed6:	eb f4                	jmp    10007ecc <BF_decode+0xc9>
10007ed8:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007edd:	eb ed                	jmp    10007ecc <BF_decode+0xc9>
10007edf:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007ee4:	eb e6                	jmp    10007ecc <BF_decode+0xc9>
10007ee6:	b8 00 00 00 00       	mov    eax,0x0
10007eeb:	eb df                	jmp    10007ecc <BF_decode+0xc9>
10007eed:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007ef2:	eb d8                	jmp    10007ecc <BF_decode+0xc9>
10007ef4:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007ef9:	eb d1                	jmp    10007ecc <BF_decode+0xc9>
10007efb:	b8 00 00 00 00       	mov    eax,0x0
10007f00:	eb ca                	jmp    10007ecc <BF_decode+0xc9>
10007f02:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007f07:	eb c3                	jmp    10007ecc <BF_decode+0xc9>
10007f09:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007f0e:	eb bc                	jmp    10007ecc <BF_decode+0xc9>

10007f10 <BF_encode>:
10007f10:	55                   	push   ebp
10007f11:	57                   	push   edi
10007f12:	56                   	push   esi
10007f13:	53                   	push   ebx
10007f14:	83 ec 04             	sub    esp,0x4
10007f17:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10007f1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10007f1f:	89 c7                	mov    edi,eax
10007f21:	03 7c 24 20          	add    edi,DWORD PTR [esp+0x20]
10007f25:	89 3c 24             	mov    DWORD PTR [esp],edi
10007f28:	0f b6 10             	movzx  edx,BYTE PTR [eax]
10007f2b:	89 d6                	mov    esi,edx
10007f2d:	c1 ee 02             	shr    esi,0x2
10007f30:	8a 9e 20 cf 00 10    	mov    bl,BYTE PTR [esi+0x1000cf20]	10007f32: R_386_32	.data
10007f36:	88 19                	mov    BYTE PTR [ecx],bl
10007f38:	c1 e2 04             	shl    edx,0x4
10007f3b:	83 e2 30             	and    edx,0x30
10007f3e:	89 c7                	mov    edi,eax
10007f40:	8d 70 01             	lea    esi,[eax+0x1]
10007f43:	39 34 24             	cmp    DWORD PTR [esp],esi
10007f46:	76 51                	jbe    10007f99 <BF_encode+0x89>
10007f48:	0f b6 70 01          	movzx  esi,BYTE PTR [eax+0x1]
10007f4c:	89 f5                	mov    ebp,esi
10007f4e:	c1 ed 04             	shr    ebp,0x4
10007f51:	09 ea                	or     edx,ebp
10007f53:	8a 9a 20 cf 00 10    	mov    bl,BYTE PTR [edx+0x1000cf20]	10007f55: R_386_32	.data
10007f59:	88 59 01             	mov    BYTE PTR [ecx+0x1],bl
10007f5c:	c1 e6 02             	shl    esi,0x2
10007f5f:	83 e6 3c             	and    esi,0x3c
10007f62:	83 c0 02             	add    eax,0x2
10007f65:	39 04 24             	cmp    DWORD PTR [esp],eax
10007f68:	76 40                	jbe    10007faa <BF_encode+0x9a>
10007f6a:	8d 47 03             	lea    eax,[edi+0x3]
10007f6d:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
10007f70:	0f b6 d3             	movzx  edx,bl
10007f73:	c1 ea 06             	shr    edx,0x6
10007f76:	09 f2                	or     edx,esi
10007f78:	8a 92 20 cf 00 10    	mov    dl,BYTE PTR [edx+0x1000cf20]	10007f7a: R_386_32	.data
10007f7e:	88 51 02             	mov    BYTE PTR [ecx+0x2],dl
10007f81:	83 c1 04             	add    ecx,0x4
10007f84:	89 da                	mov    edx,ebx
10007f86:	83 e2 3f             	and    edx,0x3f
10007f89:	8a 9a 20 cf 00 10    	mov    bl,BYTE PTR [edx+0x1000cf20]	10007f8b: R_386_32	.data
10007f8f:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
10007f92:	39 04 24             	cmp    DWORD PTR [esp],eax
10007f95:	77 91                	ja     10007f28 <BF_encode+0x18>
10007f97:	eb 09                	jmp    10007fa2 <BF_encode+0x92>
10007f99:	8a 82 20 cf 00 10    	mov    al,BYTE PTR [edx+0x1000cf20]	10007f9b: R_386_32	.data
10007f9f:	88 41 01             	mov    BYTE PTR [ecx+0x1],al
10007fa2:	83 c4 04             	add    esp,0x4
10007fa5:	5b                   	pop    ebx
10007fa6:	5e                   	pop    esi
10007fa7:	5f                   	pop    edi
10007fa8:	5d                   	pop    ebp
10007fa9:	c3                   	ret    
10007faa:	8a 86 20 cf 00 10    	mov    al,BYTE PTR [esi+0x1000cf20]	10007fac: R_386_32	.data
10007fb0:	88 41 02             	mov    BYTE PTR [ecx+0x2],al
10007fb3:	eb ed                	jmp    10007fa2 <BF_encode+0x92>

10007fb5 <BF_swap>:
10007fb5:	53                   	push   ebx
10007fb6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10007fba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10007fbe:	80 3d e0 cf 00 10 00 	cmp    BYTE PTR ds:0x1000cfe0,0x0	10007fc0: R_386_32	.data
10007fc5:	74 23                	je     10007fea <BF_swap+0x35>
10007fc7:	8b 01                	mov    eax,DWORD PTR [ecx]
10007fc9:	c1 c0 10             	rol    eax,0x10
10007fcc:	83 c1 04             	add    ecx,0x4
10007fcf:	89 c2                	mov    edx,eax
10007fd1:	c1 e2 08             	shl    edx,0x8
10007fd4:	81 e2 00 ff 00 ff    	and    edx,0xff00ff00
10007fda:	c1 e8 08             	shr    eax,0x8
10007fdd:	25 ff 00 ff 00       	and    eax,0xff00ff
10007fe2:	09 d0                	or     eax,edx
10007fe4:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
10007fe7:	4b                   	dec    ebx
10007fe8:	75 dd                	jne    10007fc7 <BF_swap+0x12>
10007fea:	5b                   	pop    ebx
10007feb:	c3                   	ret    

10007fec <BF_set_key>:
10007fec:	55                   	push   ebp
10007fed:	57                   	push   edi
10007fee:	56                   	push   esi
10007fef:	53                   	push   ebx
10007ff0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10007ff4:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
10007ff8:	89 f9                	mov    ecx,edi
10007ffa:	be 00 00 00 00       	mov    esi,0x0
10007fff:	eb 2d                	jmp    1000802e <BF_set_key+0x42>
10008001:	89 f9                	mov    ecx,edi
10008003:	4a                   	dec    edx
10008004:	74 10                	je     10008016 <BF_set_key+0x2a>
10008006:	c1 e0 08             	shl    eax,0x8
10008009:	0f b6 19             	movzx  ebx,BYTE PTR [ecx]
1000800c:	09 d8                	or     eax,ebx
1000800e:	80 39 00             	cmp    BYTE PTR [ecx],0x0
10008011:	74 ee                	je     10008001 <BF_set_key+0x15>
10008013:	41                   	inc    ecx
10008014:	eb ed                	jmp    10008003 <BF_set_key+0x17>
10008016:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
1000801a:	89 04 b2             	mov    DWORD PTR [edx+esi*4],eax
1000801d:	33 04 b5 c0 ce 00 10 	xor    eax,DWORD PTR [esi*4+0x1000cec0]	10008020: R_386_32	.data
10008024:	89 44 b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],eax
10008028:	46                   	inc    esi
10008029:	83 fe 12             	cmp    esi,0x12
1000802c:	74 0c                	je     1000803a <BF_set_key+0x4e>
1000802e:	ba 04 00 00 00       	mov    edx,0x4
10008033:	b8 00 00 00 00       	mov    eax,0x0
10008038:	eb cc                	jmp    10008006 <BF_set_key+0x1a>
1000803a:	5b                   	pop    ebx
1000803b:	5e                   	pop    esi
1000803c:	5f                   	pop    edi
1000803d:	5d                   	pop    ebp
1000803e:	c3                   	ret    

1000803f <_crypt_blowfish_rn>:
1000803f:	55                   	push   ebp
10008040:	57                   	push   edi
10008041:	56                   	push   esi
10008042:	53                   	push   ebx
10008043:	81 ec 00 11 00 00    	sub    esp,0x1100
10008049:	83 bc 24 20 11 00 00 3c 	cmp    DWORD PTR [esp+0x1120],0x3c
10008051:	0f 8e 9e 2d 00 00    	jle    1000adf5 <_crypt_blowfish_rn+0x2db6>
10008057:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
1000805e:	80 38 24             	cmp    BYTE PTR [eax],0x24
10008061:	0f 85 a8 2d 00 00    	jne    1000ae0f <_crypt_blowfish_rn+0x2dd0>
10008067:	80 78 01 32          	cmp    BYTE PTR [eax+0x1],0x32
1000806b:	0f 85 9e 2d 00 00    	jne    1000ae0f <_crypt_blowfish_rn+0x2dd0>
10008071:	80 78 02 61          	cmp    BYTE PTR [eax+0x2],0x61
10008075:	0f 85 94 2d 00 00    	jne    1000ae0f <_crypt_blowfish_rn+0x2dd0>
1000807b:	80 78 03 24          	cmp    BYTE PTR [eax+0x3],0x24
1000807f:	0f 85 8a 2d 00 00    	jne    1000ae0f <_crypt_blowfish_rn+0x2dd0>
10008085:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10008088:	8d 50 d0             	lea    edx,[eax-0x30]
1000808b:	80 fa 03             	cmp    dl,0x3
1000808e:	0f 87 7b 2d 00 00    	ja     1000ae0f <_crypt_blowfish_rn+0x2dd0>
10008094:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
1000809b:	8a 53 05             	mov    dl,BYTE PTR [ebx+0x5]
1000809e:	8d 4a d0             	lea    ecx,[edx-0x30]
100080a1:	80 f9 09             	cmp    cl,0x9
100080a4:	0f 87 65 2d 00 00    	ja     1000ae0f <_crypt_blowfish_rn+0x2dd0>
100080aa:	3c 33                	cmp    al,0x33
100080ac:	0f 84 54 2d 00 00    	je     1000ae06 <_crypt_blowfish_rn+0x2dc7>
100080b2:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
100080b9:	80 7b 06 24          	cmp    BYTE PTR [ebx+0x6],0x24
100080bd:	0f 85 4c 2d 00 00    	jne    1000ae0f <_crypt_blowfish_rn+0x2dd0>
100080c3:	0f be c0             	movsx  eax,al
100080c6:	8d 84 80 10 ff ff ff 	lea    eax,[eax+eax*4-0xf0]
100080cd:	01 c0                	add    eax,eax
100080cf:	0f be d2             	movsx  edx,dl
100080d2:	8d 4c 10 d0          	lea    ecx,[eax+edx*1-0x30]
100080d6:	b8 01 00 00 00       	mov    eax,0x1
100080db:	d3 e0                	shl    eax,cl
100080dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100080e1:	83 f8 0f             	cmp    eax,0xf
100080e4:	0f 86 3f 2d 00 00    	jbe    1000ae29 <_crypt_blowfish_rn+0x2dea>
100080ea:	6a 10                	push   0x10
100080ec:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
100080f3:	83 c0 07             	add    eax,0x7
100080f6:	50                   	push   eax
100080f7:	8d 84 24 f0 10 00 00 	lea    eax,[esp+0x10f0]
100080fe:	50                   	push   eax
100080ff:	e8 ff fc ff ff       	call   10007e03 <BF_decode>
10008104:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10008108:	83 c4 0c             	add    esp,0xc
1000810b:	85 c0                	test   eax,eax
1000810d:	0f 85 16 2d 00 00    	jne    1000ae29 <_crypt_blowfish_rn+0x2dea>
10008113:	6a 04                	push   0x4
10008115:	8d 5c 24 5c          	lea    ebx,[esp+0x5c]
10008119:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
10008120:	50                   	push   eax
10008121:	e8 8f fe ff ff       	call   10007fb5 <BF_swap>
10008126:	8d 84 24 60 10 00 00 	lea    eax,[esp+0x1060]
1000812d:	50                   	push   eax
1000812e:	8d 84 24 ac 10 00 00 	lea    eax,[esp+0x10ac]
10008135:	50                   	push   eax
10008136:	ff b4 24 24 11 00 00 	push   DWORD PTR [esp+0x1124]
1000813d:	e8 aa fe ff ff       	call   10007fec <BF_set_key>
10008142:	be c0 be 00 10       	mov    esi,0x1000bec0	10008143: R_386_32	.data
10008147:	b9 00 04 00 00       	mov    ecx,0x400
1000814c:	89 df                	mov    edi,ebx
1000814e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10008150:	83 c4 14             	add    esp,0x14
10008153:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10008157:	89 04 24             	mov    DWORD PTR [esp],eax
1000815a:	bb 00 00 00 00       	mov    ebx,0x0
1000815f:	b8 00 00 00 00       	mov    eax,0x0
10008164:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10008167:	83 e1 02             	and    ecx,0x2
1000816a:	8d 91 24 04 00 00    	lea    edx,[ecx+0x424]
10008170:	8b 54 94 58          	mov    edx,DWORD PTR [esp+edx*4+0x58]
10008174:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
1000817b:	31 c2                	xor    edx,eax
1000817d:	89 d7                	mov    edi,edx
1000817f:	c1 ef 06             	shr    edi,0x6
10008182:	89 d5                	mov    ebp,edx
10008184:	c1 ed 0e             	shr    ebp,0xe
10008187:	89 d0                	mov    eax,edx
10008189:	c1 e8 16             	shr    eax,0x16
1000818c:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008193:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008199:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000819f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100081a5:	25 fc 03 00 00       	and    eax,0x3fc
100081aa:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100081ae:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100081b5:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100081bc:	81 c1 25 04 00 00    	add    ecx,0x425
100081c2:	8b 4c 8c 58          	mov    ecx,DWORD PTR [esp+ecx*4+0x58]
100081c6:	33 8c 24 5c 10 00 00 	xor    ecx,DWORD PTR [esp+0x105c]
100081cd:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100081d4:	31 c8                	xor    eax,ecx
100081d6:	31 c3                	xor    ebx,eax
100081d8:	89 d8                	mov    eax,ebx
100081da:	c1 e8 06             	shr    eax,0x6
100081dd:	89 c1                	mov    ecx,eax
100081df:	89 df                	mov    edi,ebx
100081e1:	c1 ef 0e             	shr    edi,0xe
100081e4:	89 d8                	mov    eax,ebx
100081e6:	c1 e8 16             	shr    eax,0x16
100081e9:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100081f0:	81 e6 fc 03 00 00    	and    esi,0x3fc
100081f6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100081fc:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008202:	25 fc 03 00 00       	and    eax,0x3fc
10008207:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000820b:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10008212:	33 84 0c 58 08 00 00 	xor    eax,DWORD PTR [esp+ecx*1+0x858]
10008219:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
10008220:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008227:	89 c1                	mov    ecx,eax
10008229:	31 d1                	xor    ecx,edx
1000822b:	89 ca                	mov    edx,ecx
1000822d:	c1 ea 06             	shr    edx,0x6
10008230:	89 cf                	mov    edi,ecx
10008232:	c1 ef 0e             	shr    edi,0xe
10008235:	89 c8                	mov    eax,ecx
10008237:	c1 e8 16             	shr    eax,0x16
1000823a:	8d 34 8d 00 00 00 00 	lea    esi,[ecx*4+0x0]
10008241:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008247:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000824d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008253:	25 fc 03 00 00       	and    eax,0x3fc
10008258:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000825c:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10008263:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000826a:	33 9c 24 64 10 00 00 	xor    ebx,DWORD PTR [esp+0x1064]
10008271:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008278:	89 c2                	mov    edx,eax
1000827a:	31 da                	xor    edx,ebx
1000827c:	89 d6                	mov    esi,edx
1000827e:	c1 ee 06             	shr    esi,0x6
10008281:	89 d7                	mov    edi,edx
10008283:	c1 ef 0e             	shr    edi,0xe
10008286:	89 d0                	mov    eax,edx
10008288:	c1 e8 16             	shr    eax,0x16
1000828b:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10008292:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008298:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000829e:	81 e7 fc 03 00 00    	and    edi,0x3fc
100082a4:	25 fc 03 00 00       	and    eax,0x3fc
100082a9:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100082ad:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
100082b4:	33 84 34 58 08 00 00 	xor    eax,DWORD PTR [esp+esi*1+0x858]
100082bb:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
100082c2:	03 84 1c 58 0c 00 00 	add    eax,DWORD PTR [esp+ebx*1+0xc58]
100082c9:	31 c8                	xor    eax,ecx
100082cb:	89 c3                	mov    ebx,eax
100082cd:	c1 eb 06             	shr    ebx,0x6
100082d0:	89 c7                	mov    edi,eax
100082d2:	c1 ef 0e             	shr    edi,0xe
100082d5:	89 c6                	mov    esi,eax
100082d7:	c1 ee 16             	shr    esi,0x16
100082da:	89 f1                	mov    ecx,esi
100082dc:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100082e3:	81 e6 fc 03 00 00    	and    esi,0x3fc
100082e9:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100082ef:	81 e7 fc 03 00 00    	and    edi,0x3fc
100082f5:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100082fb:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100082ff:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10008306:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
1000830d:	33 94 24 6c 10 00 00 	xor    edx,DWORD PTR [esp+0x106c]
10008314:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000831b:	31 ca                	xor    edx,ecx
1000831d:	89 d6                	mov    esi,edx
1000831f:	c1 ee 06             	shr    esi,0x6
10008322:	89 d7                	mov    edi,edx
10008324:	c1 ef 0e             	shr    edi,0xe
10008327:	89 d3                	mov    ebx,edx
10008329:	c1 eb 16             	shr    ebx,0x16
1000832c:	89 d9                	mov    ecx,ebx
1000832e:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10008335:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000833b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008341:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008347:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000834d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008351:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10008358:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
1000835f:	33 84 24 70 10 00 00 	xor    eax,DWORD PTR [esp+0x1070]
10008366:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
1000836d:	31 c8                	xor    eax,ecx
1000836f:	89 c6                	mov    esi,eax
10008371:	c1 ee 06             	shr    esi,0x6
10008374:	89 c7                	mov    edi,eax
10008376:	c1 ef 0e             	shr    edi,0xe
10008379:	89 c3                	mov    ebx,eax
1000837b:	c1 eb 16             	shr    ebx,0x16
1000837e:	89 d9                	mov    ecx,ebx
10008380:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10008387:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000838d:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008393:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008399:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000839f:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100083a3:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100083aa:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100083b1:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
100083b8:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
100083bf:	31 ca                	xor    edx,ecx
100083c1:	89 d6                	mov    esi,edx
100083c3:	c1 ee 06             	shr    esi,0x6
100083c6:	89 d7                	mov    edi,edx
100083c8:	c1 ef 0e             	shr    edi,0xe
100083cb:	89 d3                	mov    ebx,edx
100083cd:	c1 eb 16             	shr    ebx,0x16
100083d0:	89 d9                	mov    ecx,ebx
100083d2:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
100083d9:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100083df:	81 e6 fc 03 00 00    	and    esi,0x3fc
100083e5:	81 e7 fc 03 00 00    	and    edi,0x3fc
100083eb:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100083f1:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100083f5:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100083fc:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10008403:	33 84 24 78 10 00 00 	xor    eax,DWORD PTR [esp+0x1078]
1000840a:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10008411:	31 c8                	xor    eax,ecx
10008413:	89 c6                	mov    esi,eax
10008415:	c1 ee 06             	shr    esi,0x6
10008418:	89 c7                	mov    edi,eax
1000841a:	c1 ef 0e             	shr    edi,0xe
1000841d:	89 c3                	mov    ebx,eax
1000841f:	c1 eb 16             	shr    ebx,0x16
10008422:	89 d9                	mov    ecx,ebx
10008424:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
1000842b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008431:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008437:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000843d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008443:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008447:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
1000844e:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10008455:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
1000845c:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10008463:	31 ca                	xor    edx,ecx
10008465:	89 d6                	mov    esi,edx
10008467:	c1 ee 06             	shr    esi,0x6
1000846a:	89 d7                	mov    edi,edx
1000846c:	c1 ef 0e             	shr    edi,0xe
1000846f:	89 d3                	mov    ebx,edx
10008471:	c1 eb 16             	shr    ebx,0x16
10008474:	89 d9                	mov    ecx,ebx
10008476:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
1000847d:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008483:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008489:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000848f:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008495:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008499:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100084a0:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100084a7:	33 84 24 80 10 00 00 	xor    eax,DWORD PTR [esp+0x1080]
100084ae:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
100084b5:	31 c8                	xor    eax,ecx
100084b7:	89 c6                	mov    esi,eax
100084b9:	c1 ee 06             	shr    esi,0x6
100084bc:	89 c7                	mov    edi,eax
100084be:	c1 ef 0e             	shr    edi,0xe
100084c1:	89 c3                	mov    ebx,eax
100084c3:	c1 eb 16             	shr    ebx,0x16
100084c6:	89 d9                	mov    ecx,ebx
100084c8:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
100084cf:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100084d5:	81 e6 fc 03 00 00    	and    esi,0x3fc
100084db:	81 e7 fc 03 00 00    	and    edi,0x3fc
100084e1:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100084e7:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100084eb:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100084f2:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100084f9:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10008500:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10008507:	31 ca                	xor    edx,ecx
10008509:	89 d6                	mov    esi,edx
1000850b:	c1 ee 06             	shr    esi,0x6
1000850e:	89 d7                	mov    edi,edx
10008510:	c1 ef 0e             	shr    edi,0xe
10008513:	89 d3                	mov    ebx,edx
10008515:	c1 eb 16             	shr    ebx,0x16
10008518:	89 d9                	mov    ecx,ebx
1000851a:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10008521:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008527:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000852d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008533:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008539:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000853d:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10008544:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
1000854b:	33 84 24 88 10 00 00 	xor    eax,DWORD PTR [esp+0x1088]
10008552:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10008559:	31 c8                	xor    eax,ecx
1000855b:	89 c6                	mov    esi,eax
1000855d:	c1 ee 06             	shr    esi,0x6
10008560:	89 c7                	mov    edi,eax
10008562:	c1 ef 0e             	shr    edi,0xe
10008565:	89 c3                	mov    ebx,eax
10008567:	c1 eb 16             	shr    ebx,0x16
1000856a:	89 d9                	mov    ecx,ebx
1000856c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10008573:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008579:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000857f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008585:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000858b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000858f:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10008596:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
1000859d:	33 94 24 8c 10 00 00 	xor    edx,DWORD PTR [esp+0x108c]
100085a4:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
100085ab:	31 ca                	xor    edx,ecx
100085ad:	89 d3                	mov    ebx,edx
100085af:	c1 eb 06             	shr    ebx,0x6
100085b2:	89 d7                	mov    edi,edx
100085b4:	c1 ef 0e             	shr    edi,0xe
100085b7:	89 d6                	mov    esi,edx
100085b9:	c1 ee 16             	shr    esi,0x16
100085bc:	89 f1                	mov    ecx,esi
100085be:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100085c5:	81 e6 fc 03 00 00    	and    esi,0x3fc
100085cb:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100085d1:	81 e7 fc 03 00 00    	and    edi,0x3fc
100085d7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100085dd:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100085e1:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100085e8:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
100085ef:	33 84 24 90 10 00 00 	xor    eax,DWORD PTR [esp+0x1090]
100085f6:	89 cb                	mov    ebx,ecx
100085f8:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100085ff:	31 d8                	xor    eax,ebx
10008601:	89 c6                	mov    esi,eax
10008603:	c1 ee 06             	shr    esi,0x6
10008606:	89 c7                	mov    edi,eax
10008608:	c1 ef 0e             	shr    edi,0xe
1000860b:	89 c3                	mov    ebx,eax
1000860d:	c1 eb 16             	shr    ebx,0x16
10008610:	89 d9                	mov    ecx,ebx
10008612:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10008619:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000861f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008625:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000862b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008631:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008635:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
1000863c:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10008643:	33 94 24 94 10 00 00 	xor    edx,DWORD PTR [esp+0x1094]
1000864a:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10008651:	31 ca                	xor    edx,ecx
10008653:	89 d3                	mov    ebx,edx
10008655:	c1 eb 06             	shr    ebx,0x6
10008658:	89 d7                	mov    edi,edx
1000865a:	c1 ef 0e             	shr    edi,0xe
1000865d:	89 d6                	mov    esi,edx
1000865f:	c1 ee 16             	shr    esi,0x16
10008662:	89 f1                	mov    ecx,esi
10008664:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000866b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008671:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008677:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000867d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008683:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008687:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
1000868e:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10008695:	33 84 24 98 10 00 00 	xor    eax,DWORD PTR [esp+0x1098]
1000869c:	89 cb                	mov    ebx,ecx
1000869e:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100086a5:	31 c3                	xor    ebx,eax
100086a7:	89 d0                	mov    eax,edx
100086a9:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
100086b0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
100086b3:	89 84 8c 58 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x1058],eax
100086ba:	89 9c 8c 5c 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x105c],ebx
100086c1:	83 c1 02             	add    ecx,0x2
100086c4:	89 0c 24             	mov    DWORD PTR [esp],ecx
100086c7:	83 f9 12             	cmp    ecx,0x12
100086ca:	0f 85 94 fa ff ff    	jne    10008164 <_crypt_blowfish_rn+0x125>
100086d0:	8d 4c 24 58          	lea    ecx,[esp+0x58]
100086d4:	83 c1 10             	add    ecx,0x10
100086d7:	8b 94 24 f0 10 00 00 	mov    edx,DWORD PTR [esp+0x10f0]
100086de:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
100086e5:	31 c2                	xor    edx,eax
100086e7:	89 d7                	mov    edi,edx
100086e9:	c1 ef 06             	shr    edi,0x6
100086ec:	89 d5                	mov    ebp,edx
100086ee:	c1 ed 0e             	shr    ebp,0xe
100086f1:	89 d0                	mov    eax,edx
100086f3:	c1 e8 16             	shr    eax,0x16
100086f6:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100086fd:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008703:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008709:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000870f:	25 fc 03 00 00       	and    eax,0x3fc
10008714:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008718:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000871f:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008726:	89 c7                	mov    edi,eax
10008728:	8b 84 24 f4 10 00 00 	mov    eax,DWORD PTR [esp+0x10f4]
1000872f:	33 84 24 5c 10 00 00 	xor    eax,DWORD PTR [esp+0x105c]
10008736:	03 bc 34 58 0c 00 00 	add    edi,DWORD PTR [esp+esi*1+0xc58]
1000873d:	31 f8                	xor    eax,edi
1000873f:	31 d8                	xor    eax,ebx
10008741:	89 c7                	mov    edi,eax
10008743:	c1 ef 06             	shr    edi,0x6
10008746:	89 c5                	mov    ebp,eax
10008748:	c1 ed 0e             	shr    ebp,0xe
1000874b:	89 c3                	mov    ebx,eax
1000874d:	c1 eb 16             	shr    ebx,0x16
10008750:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008757:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000875d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008763:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008769:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000876f:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008773:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000877a:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008781:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
10008788:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000878f:	31 da                	xor    edx,ebx
10008791:	89 d7                	mov    edi,edx
10008793:	c1 ef 06             	shr    edi,0x6
10008796:	89 d5                	mov    ebp,edx
10008798:	c1 ed 0e             	shr    ebp,0xe
1000879b:	89 d3                	mov    ebx,edx
1000879d:	c1 eb 16             	shr    ebx,0x16
100087a0:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100087a7:	81 e6 fc 03 00 00    	and    esi,0x3fc
100087ad:	81 e7 fc 03 00 00    	and    edi,0x3fc
100087b3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100087b9:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100087bf:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100087c3:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100087ca:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100087d1:	33 84 24 64 10 00 00 	xor    eax,DWORD PTR [esp+0x1064]
100087d8:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100087df:	31 d8                	xor    eax,ebx
100087e1:	89 c7                	mov    edi,eax
100087e3:	c1 ef 06             	shr    edi,0x6
100087e6:	89 c5                	mov    ebp,eax
100087e8:	c1 ed 0e             	shr    ebp,0xe
100087eb:	89 c3                	mov    ebx,eax
100087ed:	c1 eb 16             	shr    ebx,0x16
100087f0:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100087f7:	81 e6 fc 03 00 00    	and    esi,0x3fc
100087fd:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008803:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008809:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000880f:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008813:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000881a:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008821:	33 94 24 68 10 00 00 	xor    edx,DWORD PTR [esp+0x1068]
10008828:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000882f:	31 da                	xor    edx,ebx
10008831:	89 d7                	mov    edi,edx
10008833:	c1 ef 06             	shr    edi,0x6
10008836:	89 d5                	mov    ebp,edx
10008838:	c1 ed 0e             	shr    ebp,0xe
1000883b:	89 d3                	mov    ebx,edx
1000883d:	c1 eb 16             	shr    ebx,0x16
10008840:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008847:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000884d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008853:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008859:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000885f:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008863:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000886a:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008871:	33 84 24 6c 10 00 00 	xor    eax,DWORD PTR [esp+0x106c]
10008878:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000887f:	31 d8                	xor    eax,ebx
10008881:	89 c7                	mov    edi,eax
10008883:	c1 ef 06             	shr    edi,0x6
10008886:	89 c5                	mov    ebp,eax
10008888:	c1 ed 0e             	shr    ebp,0xe
1000888b:	89 c3                	mov    ebx,eax
1000888d:	c1 eb 16             	shr    ebx,0x16
10008890:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008897:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000889d:	81 e7 fc 03 00 00    	and    edi,0x3fc
100088a3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100088a9:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100088af:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100088b3:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100088ba:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100088c1:	33 94 24 70 10 00 00 	xor    edx,DWORD PTR [esp+0x1070]
100088c8:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100088cf:	31 da                	xor    edx,ebx
100088d1:	89 d7                	mov    edi,edx
100088d3:	c1 ef 06             	shr    edi,0x6
100088d6:	89 d5                	mov    ebp,edx
100088d8:	c1 ed 0e             	shr    ebp,0xe
100088db:	89 d3                	mov    ebx,edx
100088dd:	c1 eb 16             	shr    ebx,0x16
100088e0:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100088e7:	81 e6 fc 03 00 00    	and    esi,0x3fc
100088ed:	81 e7 fc 03 00 00    	and    edi,0x3fc
100088f3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100088f9:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100088ff:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008903:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000890a:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008911:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10008918:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000891f:	31 d8                	xor    eax,ebx
10008921:	89 c7                	mov    edi,eax
10008923:	c1 ef 06             	shr    edi,0x6
10008926:	89 c5                	mov    ebp,eax
10008928:	c1 ed 0e             	shr    ebp,0xe
1000892b:	89 c3                	mov    ebx,eax
1000892d:	c1 eb 16             	shr    ebx,0x16
10008930:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008937:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000893d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008943:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008949:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000894f:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008953:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000895a:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008961:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10008968:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000896f:	31 da                	xor    edx,ebx
10008971:	89 d7                	mov    edi,edx
10008973:	c1 ef 06             	shr    edi,0x6
10008976:	89 d5                	mov    ebp,edx
10008978:	c1 ed 0e             	shr    ebp,0xe
1000897b:	89 d3                	mov    ebx,edx
1000897d:	c1 eb 16             	shr    ebx,0x16
10008980:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008987:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000898d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008993:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008999:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000899f:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100089a3:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100089aa:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100089b1:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
100089b8:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100089bf:	31 d8                	xor    eax,ebx
100089c1:	89 c7                	mov    edi,eax
100089c3:	c1 ef 06             	shr    edi,0x6
100089c6:	89 c5                	mov    ebp,eax
100089c8:	c1 ed 0e             	shr    ebp,0xe
100089cb:	89 c3                	mov    ebx,eax
100089cd:	c1 eb 16             	shr    ebx,0x16
100089d0:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100089d7:	81 e6 fc 03 00 00    	and    esi,0x3fc
100089dd:	81 e7 fc 03 00 00    	and    edi,0x3fc
100089e3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100089e9:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100089ef:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100089f3:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100089fa:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008a01:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10008a08:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008a0f:	31 da                	xor    edx,ebx
10008a11:	89 d7                	mov    edi,edx
10008a13:	c1 ef 06             	shr    edi,0x6
10008a16:	89 d5                	mov    ebp,edx
10008a18:	c1 ed 0e             	shr    ebp,0xe
10008a1b:	89 d3                	mov    ebx,edx
10008a1d:	c1 eb 16             	shr    ebx,0x16
10008a20:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008a27:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008a2d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a33:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a39:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008a3f:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008a43:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008a4a:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008a51:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10008a58:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008a5f:	31 d8                	xor    eax,ebx
10008a61:	89 c7                	mov    edi,eax
10008a63:	c1 ef 06             	shr    edi,0x6
10008a66:	89 c5                	mov    ebp,eax
10008a68:	c1 ed 0e             	shr    ebp,0xe
10008a6b:	89 c3                	mov    ebx,eax
10008a6d:	c1 eb 16             	shr    ebx,0x16
10008a70:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008a77:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008a7d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a83:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a89:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008a8f:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008a93:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008a9a:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008aa1:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10008aa8:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008aaf:	31 da                	xor    edx,ebx
10008ab1:	89 d7                	mov    edi,edx
10008ab3:	c1 ef 06             	shr    edi,0x6
10008ab6:	89 d5                	mov    ebp,edx
10008ab8:	c1 ed 0e             	shr    ebp,0xe
10008abb:	89 d3                	mov    ebx,edx
10008abd:	c1 eb 16             	shr    ebx,0x16
10008ac0:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008ac7:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008acd:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008ad3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ad9:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008adf:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008ae3:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008aea:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008af1:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10008af8:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008aff:	31 d8                	xor    eax,ebx
10008b01:	89 c7                	mov    edi,eax
10008b03:	c1 ef 06             	shr    edi,0x6
10008b06:	89 c5                	mov    ebp,eax
10008b08:	c1 ed 0e             	shr    ebp,0xe
10008b0b:	89 c3                	mov    ebx,eax
10008b0d:	c1 eb 16             	shr    ebx,0x16
10008b10:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008b17:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008b1d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b23:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b29:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008b2f:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008b33:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008b3a:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008b41:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10008b48:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008b4f:	31 da                	xor    edx,ebx
10008b51:	89 d7                	mov    edi,edx
10008b53:	c1 ef 06             	shr    edi,0x6
10008b56:	89 d5                	mov    ebp,edx
10008b58:	c1 ed 0e             	shr    ebp,0xe
10008b5b:	89 d3                	mov    ebx,edx
10008b5d:	c1 eb 16             	shr    ebx,0x16
10008b60:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008b67:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008b6d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b73:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b79:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008b7f:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008b83:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008b8a:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008b91:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10008b98:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008b9f:	31 d8                	xor    eax,ebx
10008ba1:	89 c6                	mov    esi,eax
10008ba3:	c1 ee 06             	shr    esi,0x6
10008ba6:	89 c5                	mov    ebp,eax
10008ba8:	c1 ed 0e             	shr    ebp,0xe
10008bab:	89 c3                	mov    ebx,eax
10008bad:	c1 eb 16             	shr    ebx,0x16
10008bb0:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008bb7:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008bbd:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008bc3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008bc9:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008bcf:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008bd3:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008bda:	33 9c 34 58 08 00 00 	xor    ebx,DWORD PTR [esp+esi*1+0x858]
10008be1:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10008be8:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10008bef:	31 da                	xor    edx,ebx
10008bf1:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10008bf8:	89 41 f0             	mov    DWORD PTR [ecx-0x10],eax
10008bfb:	89 51 f4             	mov    DWORD PTR [ecx-0xc],edx
10008bfe:	8b 9c 24 e8 10 00 00 	mov    ebx,DWORD PTR [esp+0x10e8]
10008c05:	33 9c 24 58 10 00 00 	xor    ebx,DWORD PTR [esp+0x1058]
10008c0c:	31 d8                	xor    eax,ebx
10008c0e:	89 c5                	mov    ebp,eax
10008c10:	c1 ed 06             	shr    ebp,0x6
10008c13:	89 c6                	mov    esi,eax
10008c15:	c1 ee 0e             	shr    esi,0xe
10008c18:	89 c3                	mov    ebx,eax
10008c1a:	c1 eb 16             	shr    ebx,0x16
10008c1d:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008c24:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c2a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c30:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008c36:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008c3c:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008c40:	03 9c 34 58 04 00 00 	add    ebx,DWORD PTR [esp+esi*1+0x458]
10008c47:	33 9c 2c 58 08 00 00 	xor    ebx,DWORD PTR [esp+ebp*1+0x858]
10008c4e:	8b b4 24 ec 10 00 00 	mov    esi,DWORD PTR [esp+0x10ec]
10008c55:	33 b4 24 5c 10 00 00 	xor    esi,DWORD PTR [esp+0x105c]
10008c5c:	31 f2                	xor    edx,esi
10008c5e:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10008c65:	89 de                	mov    esi,ebx
10008c67:	31 d6                	xor    esi,edx
10008c69:	89 f5                	mov    ebp,esi
10008c6b:	c1 ed 06             	shr    ebp,0x6
10008c6e:	89 f3                	mov    ebx,esi
10008c70:	c1 eb 0e             	shr    ebx,0xe
10008c73:	89 f2                	mov    edx,esi
10008c75:	c1 ea 16             	shr    edx,0x16
10008c78:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008c7f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c85:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c8b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008c91:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008c97:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008c9b:	03 94 1c 58 04 00 00 	add    edx,DWORD PTR [esp+ebx*1+0x458]
10008ca2:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
10008ca9:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10008cb0:	89 d3                	mov    ebx,edx
10008cb2:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10008cb9:	31 c3                	xor    ebx,eax
10008cbb:	89 df                	mov    edi,ebx
10008cbd:	c1 ef 06             	shr    edi,0x6
10008cc0:	89 dd                	mov    ebp,ebx
10008cc2:	c1 ed 0e             	shr    ebp,0xe
10008cc5:	89 da                	mov    edx,ebx
10008cc7:	c1 ea 16             	shr    edx,0x16
10008cca:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
10008cd1:	25 fc 03 00 00       	and    eax,0x3fc
10008cd6:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008cdc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ce2:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008ce8:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008cec:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008cf3:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008cfa:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
10008d01:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
10008d08:	31 d6                	xor    esi,edx
10008d0a:	89 f0                	mov    eax,esi
10008d0c:	c1 e8 06             	shr    eax,0x6
10008d0f:	89 f5                	mov    ebp,esi
10008d11:	c1 ed 0e             	shr    ebp,0xe
10008d14:	89 f2                	mov    edx,esi
10008d16:	c1 ea 16             	shr    edx,0x16
10008d19:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008d20:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d26:	25 fc 03 00 00       	and    eax,0x3fc
10008d2b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d31:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008d37:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008d3b:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008d42:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
10008d49:	33 9c 24 68 10 00 00 	xor    ebx,DWORD PTR [esp+0x1068]
10008d50:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10008d57:	31 d3                	xor    ebx,edx
10008d59:	89 dd                	mov    ebp,ebx
10008d5b:	c1 ed 06             	shr    ebp,0x6
10008d5e:	89 da                	mov    edx,ebx
10008d60:	c1 ea 0e             	shr    edx,0xe
10008d63:	89 d8                	mov    eax,ebx
10008d65:	c1 e8 16             	shr    eax,0x16
10008d68:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
10008d6f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d75:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d7b:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008d81:	25 fc 03 00 00       	and    eax,0x3fc
10008d86:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008d8a:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10008d91:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10008d98:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
10008d9f:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008da6:	89 c2                	mov    edx,eax
10008da8:	31 f2                	xor    edx,esi
10008daa:	89 d7                	mov    edi,edx
10008dac:	c1 ef 06             	shr    edi,0x6
10008daf:	89 d5                	mov    ebp,edx
10008db1:	c1 ed 0e             	shr    ebp,0xe
10008db4:	89 d0                	mov    eax,edx
10008db6:	c1 e8 16             	shr    eax,0x16
10008db9:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008dc0:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008dc6:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008dcc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008dd2:	25 fc 03 00 00       	and    eax,0x3fc
10008dd7:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008ddb:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008de2:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008de9:	33 9c 24 70 10 00 00 	xor    ebx,DWORD PTR [esp+0x1070]
10008df0:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008df7:	31 c3                	xor    ebx,eax
10008df9:	89 df                	mov    edi,ebx
10008dfb:	c1 ef 06             	shr    edi,0x6
10008dfe:	89 dd                	mov    ebp,ebx
10008e00:	c1 ed 0e             	shr    ebp,0xe
10008e03:	89 d8                	mov    eax,ebx
10008e05:	c1 e8 16             	shr    eax,0x16
10008e08:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10008e0f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008e15:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e1b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e21:	25 fc 03 00 00       	and    eax,0x3fc
10008e26:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008e2a:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008e31:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008e38:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10008e3f:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008e46:	31 c2                	xor    edx,eax
10008e48:	89 d7                	mov    edi,edx
10008e4a:	c1 ef 06             	shr    edi,0x6
10008e4d:	89 d5                	mov    ebp,edx
10008e4f:	c1 ed 0e             	shr    ebp,0xe
10008e52:	89 d0                	mov    eax,edx
10008e54:	c1 e8 16             	shr    eax,0x16
10008e57:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008e5e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008e64:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e6a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e70:	25 fc 03 00 00       	and    eax,0x3fc
10008e75:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008e79:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008e80:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008e87:	33 9c 24 78 10 00 00 	xor    ebx,DWORD PTR [esp+0x1078]
10008e8e:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008e95:	31 c3                	xor    ebx,eax
10008e97:	89 df                	mov    edi,ebx
10008e99:	c1 ef 06             	shr    edi,0x6
10008e9c:	89 dd                	mov    ebp,ebx
10008e9e:	c1 ed 0e             	shr    ebp,0xe
10008ea1:	89 d8                	mov    eax,ebx
10008ea3:	c1 e8 16             	shr    eax,0x16
10008ea6:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10008ead:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008eb3:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008eb9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ebf:	25 fc 03 00 00       	and    eax,0x3fc
10008ec4:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008ec8:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008ecf:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008ed6:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10008edd:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008ee4:	31 c2                	xor    edx,eax
10008ee6:	89 d7                	mov    edi,edx
10008ee8:	c1 ef 06             	shr    edi,0x6
10008eeb:	89 d5                	mov    ebp,edx
10008eed:	c1 ed 0e             	shr    ebp,0xe
10008ef0:	89 d0                	mov    eax,edx
10008ef2:	c1 e8 16             	shr    eax,0x16
10008ef5:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008efc:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008f02:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f08:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f0e:	25 fc 03 00 00       	and    eax,0x3fc
10008f13:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008f17:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008f1e:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008f25:	33 9c 24 80 10 00 00 	xor    ebx,DWORD PTR [esp+0x1080]
10008f2c:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008f33:	31 c3                	xor    ebx,eax
10008f35:	89 df                	mov    edi,ebx
10008f37:	c1 ef 06             	shr    edi,0x6
10008f3a:	89 dd                	mov    ebp,ebx
10008f3c:	c1 ed 0e             	shr    ebp,0xe
10008f3f:	89 d8                	mov    eax,ebx
10008f41:	c1 e8 16             	shr    eax,0x16
10008f44:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10008f4b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008f51:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f57:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f5d:	25 fc 03 00 00       	and    eax,0x3fc
10008f62:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008f66:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008f6d:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008f74:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10008f7b:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008f82:	31 d0                	xor    eax,edx
10008f84:	89 c7                	mov    edi,eax
10008f86:	c1 ef 06             	shr    edi,0x6
10008f89:	89 c5                	mov    ebp,eax
10008f8b:	c1 ed 0e             	shr    ebp,0xe
10008f8e:	89 c2                	mov    edx,eax
10008f90:	c1 ea 16             	shr    edx,0x16
10008f93:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008f9a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008fa0:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008fa6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008fac:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008fb2:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008fb6:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008fbd:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008fc4:	33 9c 24 88 10 00 00 	xor    ebx,DWORD PTR [esp+0x1088]
10008fcb:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008fd2:	31 d3                	xor    ebx,edx
10008fd4:	89 df                	mov    edi,ebx
10008fd6:	c1 ef 06             	shr    edi,0x6
10008fd9:	89 dd                	mov    ebp,ebx
10008fdb:	c1 ed 0e             	shr    ebp,0xe
10008fde:	89 da                	mov    edx,ebx
10008fe0:	c1 ea 16             	shr    edx,0x16
10008fe3:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10008fea:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008ff0:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008ff6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ffc:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009002:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009006:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000900d:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009014:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
1000901b:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10009022:	31 d0                	xor    eax,edx
10009024:	89 c7                	mov    edi,eax
10009026:	c1 ef 06             	shr    edi,0x6
10009029:	89 c5                	mov    ebp,eax
1000902b:	c1 ed 0e             	shr    ebp,0xe
1000902e:	89 c2                	mov    edx,eax
10009030:	c1 ea 16             	shr    edx,0x16
10009033:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000903a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009040:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009046:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000904c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009052:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009056:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000905d:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009064:	33 9c 24 90 10 00 00 	xor    ebx,DWORD PTR [esp+0x1090]
1000906b:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10009072:	31 d3                	xor    ebx,edx
10009074:	89 df                	mov    edi,ebx
10009076:	c1 ef 06             	shr    edi,0x6
10009079:	89 dd                	mov    ebp,ebx
1000907b:	c1 ed 0e             	shr    ebp,0xe
1000907e:	89 da                	mov    edx,ebx
10009080:	c1 ea 16             	shr    edx,0x16
10009083:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
1000908a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009090:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009096:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000909c:	81 e2 fc 03 00 00    	and    edx,0x3fc
100090a2:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100090a6:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100090ad:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100090b4:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
100090bb:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100090c2:	31 d0                	xor    eax,edx
100090c4:	89 c7                	mov    edi,eax
100090c6:	c1 ef 06             	shr    edi,0x6
100090c9:	89 c5                	mov    ebp,eax
100090cb:	c1 ed 0e             	shr    ebp,0xe
100090ce:	89 c2                	mov    edx,eax
100090d0:	c1 ea 16             	shr    edx,0x16
100090d3:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100090da:	81 e6 fc 03 00 00    	and    esi,0x3fc
100090e0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100090e6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100090ec:	81 e2 fc 03 00 00    	and    edx,0x3fc
100090f2:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100090f6:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100090fd:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009104:	33 9c 24 98 10 00 00 	xor    ebx,DWORD PTR [esp+0x1098]
1000910b:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10009112:	31 d3                	xor    ebx,edx
10009114:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
1000911b:	89 41 f8             	mov    DWORD PTR [ecx-0x8],eax
1000911e:	89 59 fc             	mov    DWORD PTR [ecx-0x4],ebx
10009121:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10009128:	39 d1                	cmp    ecx,edx
1000912a:	0f 85 a4 f5 ff ff    	jne    100086d4 <_crypt_blowfish_rn+0x695>
10009130:	8b 84 24 a0 10 00 00 	mov    eax,DWORD PTR [esp+0x10a0]
10009137:	31 84 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],eax
1000913e:	8b 84 24 a4 10 00 00 	mov    eax,DWORD PTR [esp+0x10a4]
10009145:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
1000914c:	8b 84 24 a8 10 00 00 	mov    eax,DWORD PTR [esp+0x10a8]
10009153:	31 84 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],eax
1000915a:	8b 84 24 ac 10 00 00 	mov    eax,DWORD PTR [esp+0x10ac]
10009161:	31 84 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],eax
10009168:	8b 84 24 b0 10 00 00 	mov    eax,DWORD PTR [esp+0x10b0]
1000916f:	31 84 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],eax
10009176:	8b 84 24 b4 10 00 00 	mov    eax,DWORD PTR [esp+0x10b4]
1000917d:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
10009184:	8b 84 24 b8 10 00 00 	mov    eax,DWORD PTR [esp+0x10b8]
1000918b:	31 84 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],eax
10009192:	8b 84 24 bc 10 00 00 	mov    eax,DWORD PTR [esp+0x10bc]
10009199:	31 84 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],eax
100091a0:	8b 84 24 c0 10 00 00 	mov    eax,DWORD PTR [esp+0x10c0]
100091a7:	31 84 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],eax
100091ae:	8b 84 24 c4 10 00 00 	mov    eax,DWORD PTR [esp+0x10c4]
100091b5:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
100091bc:	8b 84 24 c8 10 00 00 	mov    eax,DWORD PTR [esp+0x10c8]
100091c3:	31 84 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],eax
100091ca:	8b 84 24 cc 10 00 00 	mov    eax,DWORD PTR [esp+0x10cc]
100091d1:	31 84 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],eax
100091d8:	8b 84 24 d0 10 00 00 	mov    eax,DWORD PTR [esp+0x10d0]
100091df:	31 84 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],eax
100091e6:	8b 84 24 d4 10 00 00 	mov    eax,DWORD PTR [esp+0x10d4]
100091ed:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
100091f4:	8b 84 24 d8 10 00 00 	mov    eax,DWORD PTR [esp+0x10d8]
100091fb:	31 84 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],eax
10009202:	8b 84 24 dc 10 00 00 	mov    eax,DWORD PTR [esp+0x10dc]
10009209:	31 84 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],eax
10009210:	8b 84 24 e0 10 00 00 	mov    eax,DWORD PTR [esp+0x10e0]
10009217:	31 84 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],eax
1000921e:	8b 84 24 e4 10 00 00 	mov    eax,DWORD PTR [esp+0x10e4]
10009225:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
1000922c:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
10009233:	b9 00 00 00 00       	mov    ecx,0x0
10009238:	b8 00 00 00 00       	mov    eax,0x0
1000923d:	83 c3 08             	add    ebx,0x8
10009240:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10009247:	89 c7                	mov    edi,eax
10009249:	c1 ef 06             	shr    edi,0x6
1000924c:	89 c5                	mov    ebp,eax
1000924e:	c1 ed 0e             	shr    ebp,0xe
10009251:	89 c2                	mov    edx,eax
10009253:	c1 ea 16             	shr    edx,0x16
10009256:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000925d:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009263:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009269:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000926f:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009275:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009279:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009280:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009287:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000928e:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10009295:	31 ca                	xor    edx,ecx
10009297:	89 d5                	mov    ebp,edx
10009299:	c1 ed 06             	shr    ebp,0x6
1000929c:	89 d6                	mov    esi,edx
1000929e:	c1 ee 0e             	shr    esi,0xe
100092a1:	89 d1                	mov    ecx,edx
100092a3:	c1 e9 16             	shr    ecx,0x16
100092a6:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
100092ad:	81 e7 fc 03 00 00    	and    edi,0x3fc
100092b3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100092b9:	81 e6 fc 03 00 00    	and    esi,0x3fc
100092bf:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100092c5:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100092c9:	03 8c 34 58 04 00 00 	add    ecx,DWORD PTR [esp+esi*1+0x458]
100092d0:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
100092d7:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
100092de:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
100092e5:	31 c8                	xor    eax,ecx
100092e7:	89 c7                	mov    edi,eax
100092e9:	c1 ef 06             	shr    edi,0x6
100092ec:	89 c5                	mov    ebp,eax
100092ee:	c1 ed 0e             	shr    ebp,0xe
100092f1:	89 c1                	mov    ecx,eax
100092f3:	c1 e9 16             	shr    ecx,0x16
100092f6:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100092fd:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009303:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009309:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000930f:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009315:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009319:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009320:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009327:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
1000932e:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009335:	31 d1                	xor    ecx,edx
10009337:	89 cd                	mov    ebp,ecx
10009339:	c1 ed 06             	shr    ebp,0x6
1000933c:	89 ce                	mov    esi,ecx
1000933e:	c1 ee 0e             	shr    esi,0xe
10009341:	89 ca                	mov    edx,ecx
10009343:	c1 ea 16             	shr    edx,0x16
10009346:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000934d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009353:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009359:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000935f:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009365:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009369:	03 94 34 58 04 00 00 	add    edx,DWORD PTR [esp+esi*1+0x458]
10009370:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
10009377:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
1000937e:	89 d6                	mov    esi,edx
10009380:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10009387:	31 c6                	xor    esi,eax
10009389:	89 f2                	mov    edx,esi
1000938b:	c1 ea 06             	shr    edx,0x6
1000938e:	89 f5                	mov    ebp,esi
10009390:	c1 ed 0e             	shr    ebp,0xe
10009393:	89 f0                	mov    eax,esi
10009395:	c1 e8 16             	shr    eax,0x16
10009398:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000939f:	81 e7 fc 03 00 00    	and    edi,0x3fc
100093a5:	81 e2 fc 03 00 00    	and    edx,0x3fc
100093ab:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100093b1:	25 fc 03 00 00       	and    eax,0x3fc
100093b6:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100093ba:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100093c1:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
100093c8:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
100093cf:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100093d6:	31 c8                	xor    eax,ecx
100093d8:	89 c7                	mov    edi,eax
100093da:	c1 ef 06             	shr    edi,0x6
100093dd:	89 c5                	mov    ebp,eax
100093df:	c1 ed 0e             	shr    ebp,0xe
100093e2:	89 c2                	mov    edx,eax
100093e4:	c1 ea 16             	shr    edx,0x16
100093e7:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
100093ee:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100093f4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100093fa:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009400:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009406:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000940a:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009411:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009418:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
1000941f:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009426:	31 f2                	xor    edx,esi
10009428:	89 d7                	mov    edi,edx
1000942a:	c1 ef 06             	shr    edi,0x6
1000942d:	89 d5                	mov    ebp,edx
1000942f:	c1 ed 0e             	shr    ebp,0xe
10009432:	89 d1                	mov    ecx,edx
10009434:	c1 e9 16             	shr    ecx,0x16
10009437:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000943e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009444:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000944a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009450:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009456:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000945a:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009461:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009468:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
1000946f:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009476:	31 c8                	xor    eax,ecx
10009478:	89 c7                	mov    edi,eax
1000947a:	c1 ef 06             	shr    edi,0x6
1000947d:	89 c5                	mov    ebp,eax
1000947f:	c1 ed 0e             	shr    ebp,0xe
10009482:	89 c1                	mov    ecx,eax
10009484:	c1 e9 16             	shr    ecx,0x16
10009487:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000948e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009494:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000949a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100094a0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100094a6:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100094aa:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100094b1:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100094b8:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
100094bf:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100094c6:	31 ca                	xor    edx,ecx
100094c8:	89 d7                	mov    edi,edx
100094ca:	c1 ef 06             	shr    edi,0x6
100094cd:	89 d5                	mov    ebp,edx
100094cf:	c1 ed 0e             	shr    ebp,0xe
100094d2:	89 d1                	mov    ecx,edx
100094d4:	c1 e9 16             	shr    ecx,0x16
100094d7:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100094de:	81 e6 fc 03 00 00    	and    esi,0x3fc
100094e4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100094ea:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100094f0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100094f6:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100094fa:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009501:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009508:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
1000950f:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009516:	31 c8                	xor    eax,ecx
10009518:	89 c7                	mov    edi,eax
1000951a:	c1 ef 06             	shr    edi,0x6
1000951d:	89 c5                	mov    ebp,eax
1000951f:	c1 ed 0e             	shr    ebp,0xe
10009522:	89 c1                	mov    ecx,eax
10009524:	c1 e9 16             	shr    ecx,0x16
10009527:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000952e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009534:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000953a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009540:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009546:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000954a:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009551:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009558:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
1000955f:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009566:	31 ca                	xor    edx,ecx
10009568:	89 d7                	mov    edi,edx
1000956a:	c1 ef 06             	shr    edi,0x6
1000956d:	89 d5                	mov    ebp,edx
1000956f:	c1 ed 0e             	shr    ebp,0xe
10009572:	89 d1                	mov    ecx,edx
10009574:	c1 e9 16             	shr    ecx,0x16
10009577:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000957e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009584:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000958a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009590:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009596:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000959a:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100095a1:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100095a8:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
100095af:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100095b6:	31 c8                	xor    eax,ecx
100095b8:	89 c7                	mov    edi,eax
100095ba:	c1 ef 06             	shr    edi,0x6
100095bd:	89 c5                	mov    ebp,eax
100095bf:	c1 ed 0e             	shr    ebp,0xe
100095c2:	89 c1                	mov    ecx,eax
100095c4:	c1 e9 16             	shr    ecx,0x16
100095c7:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100095ce:	81 e6 fc 03 00 00    	and    esi,0x3fc
100095d4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100095da:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100095e0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100095e6:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100095ea:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100095f1:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100095f8:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
100095ff:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009606:	31 ca                	xor    edx,ecx
10009608:	89 d7                	mov    edi,edx
1000960a:	c1 ef 06             	shr    edi,0x6
1000960d:	89 d5                	mov    ebp,edx
1000960f:	c1 ed 0e             	shr    ebp,0xe
10009612:	89 d1                	mov    ecx,edx
10009614:	c1 e9 16             	shr    ecx,0x16
10009617:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000961e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009624:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000962a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009630:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009636:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000963a:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009641:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009648:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
1000964f:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009656:	31 c8                	xor    eax,ecx
10009658:	89 c7                	mov    edi,eax
1000965a:	c1 ef 06             	shr    edi,0x6
1000965d:	89 c5                	mov    ebp,eax
1000965f:	c1 ed 0e             	shr    ebp,0xe
10009662:	89 c1                	mov    ecx,eax
10009664:	c1 e9 16             	shr    ecx,0x16
10009667:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000966e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009674:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000967a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009680:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009686:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000968a:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009691:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009698:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
1000969f:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100096a6:	31 ca                	xor    edx,ecx
100096a8:	89 d7                	mov    edi,edx
100096aa:	c1 ef 06             	shr    edi,0x6
100096ad:	89 d5                	mov    ebp,edx
100096af:	c1 ed 0e             	shr    ebp,0xe
100096b2:	89 d6                	mov    esi,edx
100096b4:	c1 ee 16             	shr    esi,0x16
100096b7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
100096be:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100096c4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100096ca:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100096d0:	81 e6 fc 03 00 00    	and    esi,0x3fc
100096d6:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
100096da:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
100096e1:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
100096e8:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
100096ef:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
100096f6:	31 f0                	xor    eax,esi
100096f8:	89 c5                	mov    ebp,eax
100096fa:	c1 ed 06             	shr    ebp,0x6
100096fd:	89 c1                	mov    ecx,eax
100096ff:	c1 e9 0e             	shr    ecx,0xe
10009702:	89 c6                	mov    esi,eax
10009704:	c1 ee 16             	shr    esi,0x16
10009707:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000970e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009714:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000971a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009720:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009726:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000972a:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
10009731:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10009738:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
1000973f:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10009746:	89 f1                	mov    ecx,esi
10009748:	31 d1                	xor    ecx,edx
1000974a:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10009751:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10009754:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
10009757:	8d b4 24 a0 10 00 00 	lea    esi,[esp+0x10a0]
1000975e:	39 f3                	cmp    ebx,esi
10009760:	0f 85 d7 fa ff ff    	jne    1000923d <_crypt_blowfish_rn+0x11fe>
10009766:	8d 5c 24 58          	lea    ebx,[esp+0x58]
1000976a:	83 c3 08             	add    ebx,0x8
1000976d:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10009774:	89 c7                	mov    edi,eax
10009776:	c1 ef 06             	shr    edi,0x6
10009779:	89 c5                	mov    ebp,eax
1000977b:	c1 ed 0e             	shr    ebp,0xe
1000977e:	89 c2                	mov    edx,eax
10009780:	c1 ea 16             	shr    edx,0x16
10009783:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000978a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009790:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009796:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000979c:	81 e2 fc 03 00 00    	and    edx,0x3fc
100097a2:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100097a6:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100097ad:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100097b4:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100097bb:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
100097c2:	31 ca                	xor    edx,ecx
100097c4:	89 d7                	mov    edi,edx
100097c6:	c1 ef 06             	shr    edi,0x6
100097c9:	89 d5                	mov    ebp,edx
100097cb:	c1 ed 0e             	shr    ebp,0xe
100097ce:	89 d1                	mov    ecx,edx
100097d0:	c1 e9 16             	shr    ecx,0x16
100097d3:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100097da:	81 e6 fc 03 00 00    	and    esi,0x3fc
100097e0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100097e6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100097ec:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100097f2:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100097f6:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100097fd:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009804:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
1000980b:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009812:	31 c1                	xor    ecx,eax
10009814:	89 cd                	mov    ebp,ecx
10009816:	c1 ed 06             	shr    ebp,0x6
10009819:	89 c8                	mov    eax,ecx
1000981b:	c1 e8 0e             	shr    eax,0xe
1000981e:	89 ce                	mov    esi,ecx
10009820:	c1 ee 16             	shr    esi,0x16
10009823:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000982a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009830:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009836:	25 fc 03 00 00       	and    eax,0x3fc
1000983b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009841:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10009845:	03 b4 04 58 04 00 00 	add    esi,DWORD PTR [esp+eax*1+0x458]
1000984c:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10009853:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
1000985a:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10009861:	31 d6                	xor    esi,edx
10009863:	89 f5                	mov    ebp,esi
10009865:	c1 ed 06             	shr    ebp,0x6
10009868:	89 f2                	mov    edx,esi
1000986a:	c1 ea 0e             	shr    edx,0xe
1000986d:	89 f0                	mov    eax,esi
1000986f:	c1 e8 16             	shr    eax,0x16
10009872:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009879:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000987f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009885:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000988b:	25 fc 03 00 00       	and    eax,0x3fc
10009890:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009894:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
1000989b:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
100098a2:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
100098a9:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100098b0:	31 c1                	xor    ecx,eax
100098b2:	89 ca                	mov    edx,ecx
100098b4:	c1 ea 06             	shr    edx,0x6
100098b7:	89 cd                	mov    ebp,ecx
100098b9:	c1 ed 0e             	shr    ebp,0xe
100098bc:	89 c8                	mov    eax,ecx
100098be:	c1 e8 16             	shr    eax,0x16
100098c1:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100098c8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100098ce:	81 e2 fc 03 00 00    	and    edx,0x3fc
100098d4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100098da:	25 fc 03 00 00       	and    eax,0x3fc
100098df:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100098e3:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100098ea:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
100098f1:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
100098f8:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100098ff:	31 f0                	xor    eax,esi
10009901:	89 c7                	mov    edi,eax
10009903:	c1 ef 06             	shr    edi,0x6
10009906:	89 c5                	mov    ebp,eax
10009908:	c1 ed 0e             	shr    ebp,0xe
1000990b:	89 c2                	mov    edx,eax
1000990d:	c1 ea 16             	shr    edx,0x16
10009910:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009917:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000991d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009923:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009929:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000992f:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009933:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000993a:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009941:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
10009948:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000994f:	31 ca                	xor    edx,ecx
10009951:	89 d7                	mov    edi,edx
10009953:	c1 ef 06             	shr    edi,0x6
10009956:	89 d5                	mov    ebp,edx
10009958:	c1 ed 0e             	shr    ebp,0xe
1000995b:	89 d1                	mov    ecx,edx
1000995d:	c1 e9 16             	shr    ecx,0x16
10009960:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009967:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000996d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009973:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009979:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000997f:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009983:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000998a:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009991:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10009998:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000999f:	31 c8                	xor    eax,ecx
100099a1:	89 c7                	mov    edi,eax
100099a3:	c1 ef 06             	shr    edi,0x6
100099a6:	89 c5                	mov    ebp,eax
100099a8:	c1 ed 0e             	shr    ebp,0xe
100099ab:	89 c1                	mov    ecx,eax
100099ad:	c1 e9 16             	shr    ecx,0x16
100099b0:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100099b7:	81 e6 fc 03 00 00    	and    esi,0x3fc
100099bd:	81 e7 fc 03 00 00    	and    edi,0x3fc
100099c3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100099c9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100099cf:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100099d3:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100099da:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100099e1:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
100099e8:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100099ef:	31 ca                	xor    edx,ecx
100099f1:	89 d7                	mov    edi,edx
100099f3:	c1 ef 06             	shr    edi,0x6
100099f6:	89 d5                	mov    ebp,edx
100099f8:	c1 ed 0e             	shr    ebp,0xe
100099fb:	89 d1                	mov    ecx,edx
100099fd:	c1 e9 16             	shr    ecx,0x16
10009a00:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009a07:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009a0d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009a13:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009a19:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009a1f:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009a23:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009a2a:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009a31:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10009a38:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009a3f:	31 c8                	xor    eax,ecx
10009a41:	89 c7                	mov    edi,eax
10009a43:	c1 ef 06             	shr    edi,0x6
10009a46:	89 c5                	mov    ebp,eax
10009a48:	c1 ed 0e             	shr    ebp,0xe
10009a4b:	89 c1                	mov    ecx,eax
10009a4d:	c1 e9 16             	shr    ecx,0x16
10009a50:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009a57:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009a5d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009a63:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009a69:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009a6f:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009a73:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009a7a:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009a81:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10009a88:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009a8f:	31 ca                	xor    edx,ecx
10009a91:	89 d7                	mov    edi,edx
10009a93:	c1 ef 06             	shr    edi,0x6
10009a96:	89 d5                	mov    ebp,edx
10009a98:	c1 ed 0e             	shr    ebp,0xe
10009a9b:	89 d1                	mov    ecx,edx
10009a9d:	c1 e9 16             	shr    ecx,0x16
10009aa0:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009aa7:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009aad:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009ab3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ab9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009abf:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009ac3:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009aca:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009ad1:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10009ad8:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009adf:	31 c8                	xor    eax,ecx
10009ae1:	89 c7                	mov    edi,eax
10009ae3:	c1 ef 06             	shr    edi,0x6
10009ae6:	89 c5                	mov    ebp,eax
10009ae8:	c1 ed 0e             	shr    ebp,0xe
10009aeb:	89 c1                	mov    ecx,eax
10009aed:	c1 e9 16             	shr    ecx,0x16
10009af0:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009af7:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009afd:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009b03:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009b09:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009b0f:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009b13:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009b1a:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009b21:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10009b28:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009b2f:	31 ca                	xor    edx,ecx
10009b31:	89 d7                	mov    edi,edx
10009b33:	c1 ef 06             	shr    edi,0x6
10009b36:	89 d5                	mov    ebp,edx
10009b38:	c1 ed 0e             	shr    ebp,0xe
10009b3b:	89 d1                	mov    ecx,edx
10009b3d:	c1 e9 16             	shr    ecx,0x16
10009b40:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009b47:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009b4d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009b53:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009b59:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009b5f:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009b63:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009b6a:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009b71:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10009b78:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009b7f:	31 c8                	xor    eax,ecx
10009b81:	89 c7                	mov    edi,eax
10009b83:	c1 ef 06             	shr    edi,0x6
10009b86:	89 c5                	mov    ebp,eax
10009b88:	c1 ed 0e             	shr    ebp,0xe
10009b8b:	89 c1                	mov    ecx,eax
10009b8d:	c1 e9 16             	shr    ecx,0x16
10009b90:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009b97:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009b9d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009ba3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ba9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009baf:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009bb3:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009bba:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009bc1:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10009bc8:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009bcf:	31 ca                	xor    edx,ecx
10009bd1:	89 d7                	mov    edi,edx
10009bd3:	c1 ef 06             	shr    edi,0x6
10009bd6:	89 d5                	mov    ebp,edx
10009bd8:	c1 ed 0e             	shr    ebp,0xe
10009bdb:	89 d6                	mov    esi,edx
10009bdd:	c1 ee 16             	shr    esi,0x16
10009be0:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10009be7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009bed:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009bf3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009bf9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009bff:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10009c03:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10009c0a:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10009c11:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10009c18:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10009c1f:	31 f0                	xor    eax,esi
10009c21:	89 c5                	mov    ebp,eax
10009c23:	c1 ed 06             	shr    ebp,0x6
10009c26:	89 c1                	mov    ecx,eax
10009c28:	c1 e9 0e             	shr    ecx,0xe
10009c2b:	89 c6                	mov    esi,eax
10009c2d:	c1 ee 16             	shr    esi,0x16
10009c30:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10009c37:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009c3d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009c43:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009c49:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009c4f:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10009c53:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
10009c5a:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10009c61:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10009c68:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10009c6f:	89 f1                	mov    ecx,esi
10009c71:	31 d1                	xor    ecx,edx
10009c73:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10009c7a:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10009c7d:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
10009c80:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10009c87:	39 d3                	cmp    ebx,edx
10009c89:	0f 85 db fa ff ff    	jne    1000976a <_crypt_blowfish_rn+0x172b>
10009c8f:	8b 94 24 e8 10 00 00 	mov    edx,DWORD PTR [esp+0x10e8]
10009c96:	8b 84 24 ec 10 00 00 	mov    eax,DWORD PTR [esp+0x10ec]
10009c9d:	8b 9c 24 f0 10 00 00 	mov    ebx,DWORD PTR [esp+0x10f0]
10009ca4:	8b 8c 24 f4 10 00 00 	mov    ecx,DWORD PTR [esp+0x10f4]
10009cab:	31 94 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],edx
10009cb2:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
10009cb9:	31 9c 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],ebx
10009cc0:	31 8c 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],ecx
10009cc7:	31 94 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],edx
10009cce:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
10009cd5:	31 9c 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],ebx
10009cdc:	31 8c 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],ecx
10009ce3:	31 94 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],edx
10009cea:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
10009cf1:	31 9c 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],ebx
10009cf8:	31 8c 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],ecx
10009cff:	31 94 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],edx
10009d06:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
10009d0d:	31 9c 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],ebx
10009d14:	31 8c 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],ecx
10009d1b:	31 94 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],edx
10009d22:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
10009d29:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
10009d30:	be 00 00 00 00       	mov    esi,0x0
10009d35:	b8 00 00 00 00       	mov    eax,0x0
10009d3a:	83 c3 08             	add    ebx,0x8
10009d3d:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10009d44:	89 c7                	mov    edi,eax
10009d46:	c1 ef 06             	shr    edi,0x6
10009d49:	89 c5                	mov    ebp,eax
10009d4b:	c1 ed 0e             	shr    ebp,0xe
10009d4e:	89 c2                	mov    edx,eax
10009d50:	c1 ea 16             	shr    edx,0x16
10009d53:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009d5a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009d60:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009d66:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009d6c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009d72:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009d76:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009d7d:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009d84:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009d8b:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10009d92:	31 d6                	xor    esi,edx
10009d94:	89 f7                	mov    edi,esi
10009d96:	c1 ef 06             	shr    edi,0x6
10009d99:	89 f5                	mov    ebp,esi
10009d9b:	c1 ed 0e             	shr    ebp,0xe
10009d9e:	89 f1                	mov    ecx,esi
10009da0:	c1 e9 16             	shr    ecx,0x16
10009da3:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009daa:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009db0:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009db6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009dbc:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009dc2:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009dc6:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009dcd:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009dd4:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10009ddb:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009de2:	31 c8                	xor    eax,ecx
10009de4:	89 c5                	mov    ebp,eax
10009de6:	c1 ed 06             	shr    ebp,0x6
10009de9:	89 c2                	mov    edx,eax
10009deb:	c1 ea 0e             	shr    edx,0xe
10009dee:	89 c1                	mov    ecx,eax
10009df0:	c1 e9 16             	shr    ecx,0x16
10009df3:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10009dfa:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009e00:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009e06:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009e0c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009e12:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009e16:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
10009e1d:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10009e24:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
10009e2b:	89 ca                	mov    edx,ecx
10009e2d:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10009e34:	31 d6                	xor    esi,edx
10009e36:	89 f7                	mov    edi,esi
10009e38:	c1 ef 06             	shr    edi,0x6
10009e3b:	89 f5                	mov    ebp,esi
10009e3d:	c1 ed 0e             	shr    ebp,0xe
10009e40:	89 f1                	mov    ecx,esi
10009e42:	c1 e9 16             	shr    ecx,0x16
10009e45:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009e4c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009e52:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009e58:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009e5e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009e64:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009e68:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009e6f:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009e76:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
10009e7d:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009e84:	31 c1                	xor    ecx,eax
10009e86:	89 cd                	mov    ebp,ecx
10009e88:	c1 ed 06             	shr    ebp,0x6
10009e8b:	89 ca                	mov    edx,ecx
10009e8d:	c1 ea 0e             	shr    edx,0xe
10009e90:	89 c8                	mov    eax,ecx
10009e92:	c1 e8 16             	shr    eax,0x16
10009e95:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009e9c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009ea2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ea8:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009eae:	25 fc 03 00 00       	and    eax,0x3fc
10009eb3:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009eb7:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10009ebe:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009ec5:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
10009ecc:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009ed3:	89 c2                	mov    edx,eax
10009ed5:	31 f2                	xor    edx,esi
10009ed7:	89 d5                	mov    ebp,edx
10009ed9:	c1 ed 06             	shr    ebp,0x6
10009edc:	89 d6                	mov    esi,edx
10009ede:	c1 ee 0e             	shr    esi,0xe
10009ee1:	89 d0                	mov    eax,edx
10009ee3:	c1 e8 16             	shr    eax,0x16
10009ee6:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
10009eed:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009ef3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ef9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009eff:	25 fc 03 00 00       	and    eax,0x3fc
10009f04:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009f08:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
10009f0f:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009f16:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
10009f1d:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009f24:	89 c6                	mov    esi,eax
10009f26:	31 ce                	xor    esi,ecx
10009f28:	89 f7                	mov    edi,esi
10009f2a:	c1 ef 06             	shr    edi,0x6
10009f2d:	89 f5                	mov    ebp,esi
10009f2f:	c1 ed 0e             	shr    ebp,0xe
10009f32:	89 f0                	mov    eax,esi
10009f34:	c1 e8 16             	shr    eax,0x16
10009f37:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10009f3e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009f44:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009f4a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009f50:	25 fc 03 00 00       	and    eax,0x3fc
10009f55:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009f59:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009f60:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10009f67:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10009f6e:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10009f75:	31 c2                	xor    edx,eax
10009f77:	89 d7                	mov    edi,edx
10009f79:	c1 ef 06             	shr    edi,0x6
10009f7c:	89 d5                	mov    ebp,edx
10009f7e:	c1 ed 0e             	shr    ebp,0xe
10009f81:	89 d0                	mov    eax,edx
10009f83:	c1 e8 16             	shr    eax,0x16
10009f86:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10009f8d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009f93:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009f99:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009f9f:	25 fc 03 00 00       	and    eax,0x3fc
10009fa4:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009fa8:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009faf:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10009fb6:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
10009fbd:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10009fc4:	31 c6                	xor    esi,eax
10009fc6:	89 f7                	mov    edi,esi
10009fc8:	c1 ef 06             	shr    edi,0x6
10009fcb:	89 f5                	mov    ebp,esi
10009fcd:	c1 ed 0e             	shr    ebp,0xe
10009fd0:	89 f0                	mov    eax,esi
10009fd2:	c1 e8 16             	shr    eax,0x16
10009fd5:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10009fdc:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009fe2:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009fe8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009fee:	25 fc 03 00 00       	and    eax,0x3fc
10009ff3:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009ff7:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009ffe:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000a005:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
1000a00c:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
1000a013:	31 c2                	xor    edx,eax
1000a015:	89 d7                	mov    edi,edx
1000a017:	c1 ef 06             	shr    edi,0x6
1000a01a:	89 d5                	mov    ebp,edx
1000a01c:	c1 ed 0e             	shr    ebp,0xe
1000a01f:	89 d0                	mov    eax,edx
1000a021:	c1 e8 16             	shr    eax,0x16
1000a024:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000a02b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a031:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a037:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a03d:	25 fc 03 00 00       	and    eax,0x3fc
1000a042:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a046:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a04d:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000a054:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
1000a05b:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
1000a062:	31 c6                	xor    esi,eax
1000a064:	89 f7                	mov    edi,esi
1000a066:	c1 ef 06             	shr    edi,0x6
1000a069:	89 f5                	mov    ebp,esi
1000a06b:	c1 ed 0e             	shr    ebp,0xe
1000a06e:	89 f0                	mov    eax,esi
1000a070:	c1 e8 16             	shr    eax,0x16
1000a073:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
1000a07a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a080:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a086:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a08c:	25 fc 03 00 00       	and    eax,0x3fc
1000a091:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a095:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a09c:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000a0a3:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
1000a0aa:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
1000a0b1:	31 d0                	xor    eax,edx
1000a0b3:	89 c7                	mov    edi,eax
1000a0b5:	c1 ef 06             	shr    edi,0x6
1000a0b8:	89 c5                	mov    ebp,eax
1000a0ba:	c1 ed 0e             	shr    ebp,0xe
1000a0bd:	89 c2                	mov    edx,eax
1000a0bf:	c1 ea 16             	shr    edx,0x16
1000a0c2:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a0c9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a0cf:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a0d5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a0db:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a0e1:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a0e5:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a0ec:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a0f3:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
1000a0fa:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a101:	31 d6                	xor    esi,edx
1000a103:	89 f7                	mov    edi,esi
1000a105:	c1 ef 06             	shr    edi,0x6
1000a108:	89 f5                	mov    ebp,esi
1000a10a:	c1 ed 0e             	shr    ebp,0xe
1000a10d:	89 f2                	mov    edx,esi
1000a10f:	c1 ea 16             	shr    edx,0x16
1000a112:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
1000a119:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a11f:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a125:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a12b:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a131:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a135:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a13c:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a143:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
1000a14a:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a151:	31 d0                	xor    eax,edx
1000a153:	89 c7                	mov    edi,eax
1000a155:	c1 ef 06             	shr    edi,0x6
1000a158:	89 c5                	mov    ebp,eax
1000a15a:	c1 ed 0e             	shr    ebp,0xe
1000a15d:	89 c2                	mov    edx,eax
1000a15f:	c1 ea 16             	shr    edx,0x16
1000a162:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a169:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a16f:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a175:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a17b:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a181:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a185:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a18c:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a193:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
1000a19a:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a1a1:	31 d6                	xor    esi,edx
1000a1a3:	89 f2                	mov    edx,esi
1000a1a5:	c1 ea 06             	shr    edx,0x6
1000a1a8:	89 f5                	mov    ebp,esi
1000a1aa:	c1 ed 0e             	shr    ebp,0xe
1000a1ad:	89 f1                	mov    ecx,esi
1000a1af:	c1 e9 16             	shr    ecx,0x16
1000a1b2:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000a1b9:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a1bf:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a1c5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a1cb:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a1d1:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a1d5:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a1dc:	33 8c 14 58 08 00 00 	xor    ecx,DWORD PTR [esp+edx*1+0x858]
1000a1e3:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
1000a1ea:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
1000a1f1:	31 c8                	xor    eax,ecx
1000a1f3:	89 c5                	mov    ebp,eax
1000a1f5:	c1 ed 06             	shr    ebp,0x6
1000a1f8:	89 c2                	mov    edx,eax
1000a1fa:	c1 ea 0e             	shr    edx,0xe
1000a1fd:	89 c1                	mov    ecx,eax
1000a1ff:	c1 e9 16             	shr    ecx,0x16
1000a202:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000a209:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a20f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a215:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a21b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a221:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a225:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
1000a22c:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
1000a233:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
1000a23a:	89 ca                	mov    edx,ecx
1000a23c:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
1000a243:	31 d6                	xor    esi,edx
1000a245:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
1000a24c:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
1000a24f:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
1000a252:	8d bc 24 a0 10 00 00 	lea    edi,[esp+0x10a0]
1000a259:	39 fb                	cmp    ebx,edi
1000a25b:	0f 85 d9 fa ff ff    	jne    10009d3a <_crypt_blowfish_rn+0x1cfb>
1000a261:	8d 5c 24 58          	lea    ebx,[esp+0x58]
1000a265:	83 c3 08             	add    ebx,0x8
1000a268:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
1000a26f:	89 c7                	mov    edi,eax
1000a271:	c1 ef 06             	shr    edi,0x6
1000a274:	89 c5                	mov    ebp,eax
1000a276:	c1 ed 0e             	shr    ebp,0xe
1000a279:	89 c2                	mov    edx,eax
1000a27b:	c1 ea 16             	shr    edx,0x16
1000a27e:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a285:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a28b:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a291:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a297:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a29d:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a2a1:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a2a8:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a2af:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a2b6:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
1000a2bd:	31 f2                	xor    edx,esi
1000a2bf:	89 d7                	mov    edi,edx
1000a2c1:	c1 ef 06             	shr    edi,0x6
1000a2c4:	89 d5                	mov    ebp,edx
1000a2c6:	c1 ed 0e             	shr    ebp,0xe
1000a2c9:	89 d6                	mov    esi,edx
1000a2cb:	c1 ee 16             	shr    esi,0x16
1000a2ce:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000a2d5:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a2db:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a2e1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a2e7:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a2ed:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000a2f1:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
1000a2f8:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
1000a2ff:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
1000a306:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
1000a30d:	31 c6                	xor    esi,eax
1000a30f:	89 f7                	mov    edi,esi
1000a311:	c1 ef 06             	shr    edi,0x6
1000a314:	89 f5                	mov    ebp,esi
1000a316:	c1 ed 0e             	shr    ebp,0xe
1000a319:	89 f1                	mov    ecx,esi
1000a31b:	c1 e9 16             	shr    ecx,0x16
1000a31e:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
1000a325:	25 fc 03 00 00       	and    eax,0x3fc
1000a32a:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a330:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a336:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a33c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a340:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a347:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a34e:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
1000a355:	03 8c 04 58 0c 00 00 	add    ecx,DWORD PTR [esp+eax*1+0xc58]
1000a35c:	31 d1                	xor    ecx,edx
1000a35e:	89 c8                	mov    eax,ecx
1000a360:	c1 e8 06             	shr    eax,0x6
1000a363:	89 cd                	mov    ebp,ecx
1000a365:	c1 ed 0e             	shr    ebp,0xe
1000a368:	89 ca                	mov    edx,ecx
1000a36a:	c1 ea 16             	shr    edx,0x16
1000a36d:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000a374:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a37a:	25 fc 03 00 00       	and    eax,0x3fc
1000a37f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a385:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a38b:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a38f:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a396:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
1000a39d:	33 b4 24 68 10 00 00 	xor    esi,DWORD PTR [esp+0x1068]
1000a3a4:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
1000a3ab:	31 d6                	xor    esi,edx
1000a3ad:	89 f2                	mov    edx,esi
1000a3af:	c1 ea 06             	shr    edx,0x6
1000a3b2:	89 f5                	mov    ebp,esi
1000a3b4:	c1 ed 0e             	shr    ebp,0xe
1000a3b7:	89 f0                	mov    eax,esi
1000a3b9:	c1 e8 16             	shr    eax,0x16
1000a3bc:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000a3c3:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a3c9:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a3cf:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a3d5:	25 fc 03 00 00       	and    eax,0x3fc
1000a3da:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a3de:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a3e5:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000a3ec:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
1000a3f3:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000a3fa:	31 c1                	xor    ecx,eax
1000a3fc:	89 c8                	mov    eax,ecx
1000a3fe:	c1 e8 06             	shr    eax,0x6
1000a401:	89 cd                	mov    ebp,ecx
1000a403:	c1 ed 0e             	shr    ebp,0xe
1000a406:	89 ca                	mov    edx,ecx
1000a408:	c1 ea 16             	shr    edx,0x16
1000a40b:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000a412:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a418:	25 fc 03 00 00       	and    eax,0x3fc
1000a41d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a423:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a429:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a42d:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a434:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
1000a43b:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
1000a442:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
1000a449:	31 d6                	xor    esi,edx
1000a44b:	89 f2                	mov    edx,esi
1000a44d:	c1 ea 06             	shr    edx,0x6
1000a450:	89 f5                	mov    ebp,esi
1000a452:	c1 ed 0e             	shr    ebp,0xe
1000a455:	89 f0                	mov    eax,esi
1000a457:	c1 e8 16             	shr    eax,0x16
1000a45a:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000a461:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a467:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a46d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a473:	25 fc 03 00 00       	and    eax,0x3fc
1000a478:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a47c:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a483:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000a48a:	33 8c 24 74 10 00 00 	xor    ecx,DWORD PTR [esp+0x1074]
1000a491:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000a498:	31 c1                	xor    ecx,eax
1000a49a:	89 cf                	mov    edi,ecx
1000a49c:	c1 ef 06             	shr    edi,0x6
1000a49f:	89 cd                	mov    ebp,ecx
1000a4a1:	c1 ed 0e             	shr    ebp,0xe
1000a4a4:	89 ca                	mov    edx,ecx
1000a4a6:	c1 ea 16             	shr    edx,0x16
1000a4a9:	8d 04 8d 00 00 00 00 	lea    eax,[ecx*4+0x0]
1000a4b0:	25 fc 03 00 00       	and    eax,0x3fc
1000a4b5:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a4bb:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a4c1:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a4c7:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a4cb:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a4d2:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a4d9:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
1000a4e0:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
1000a4e7:	31 d6                	xor    esi,edx
1000a4e9:	89 f2                	mov    edx,esi
1000a4eb:	c1 ea 06             	shr    edx,0x6
1000a4ee:	89 f5                	mov    ebp,esi
1000a4f0:	c1 ed 0e             	shr    ebp,0xe
1000a4f3:	89 f0                	mov    eax,esi
1000a4f5:	c1 e8 16             	shr    eax,0x16
1000a4f8:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000a4ff:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a505:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a50b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a511:	25 fc 03 00 00       	and    eax,0x3fc
1000a516:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a51a:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a521:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000a528:	33 8c 24 7c 10 00 00 	xor    ecx,DWORD PTR [esp+0x107c]
1000a52f:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000a536:	31 c8                	xor    eax,ecx
1000a538:	89 c7                	mov    edi,eax
1000a53a:	c1 ef 06             	shr    edi,0x6
1000a53d:	89 c5                	mov    ebp,eax
1000a53f:	c1 ed 0e             	shr    ebp,0xe
1000a542:	89 c2                	mov    edx,eax
1000a544:	c1 ea 16             	shr    edx,0x16
1000a547:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a54e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a554:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a55a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a560:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a566:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a56a:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a571:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a578:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
1000a57f:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a586:	31 d6                	xor    esi,edx
1000a588:	89 f7                	mov    edi,esi
1000a58a:	c1 ef 06             	shr    edi,0x6
1000a58d:	89 f5                	mov    ebp,esi
1000a58f:	c1 ed 0e             	shr    ebp,0xe
1000a592:	89 f1                	mov    ecx,esi
1000a594:	c1 e9 16             	shr    ecx,0x16
1000a597:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
1000a59e:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a5a4:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a5aa:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a5b0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a5b6:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a5ba:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a5c1:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a5c8:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
1000a5cf:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
1000a5d6:	31 c8                	xor    eax,ecx
1000a5d8:	89 c7                	mov    edi,eax
1000a5da:	c1 ef 06             	shr    edi,0x6
1000a5dd:	89 c5                	mov    ebp,eax
1000a5df:	c1 ed 0e             	shr    ebp,0xe
1000a5e2:	89 c2                	mov    edx,eax
1000a5e4:	c1 ea 16             	shr    edx,0x16
1000a5e7:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a5ee:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a5f4:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a5fa:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a600:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a606:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a60a:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a611:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a618:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
1000a61f:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a626:	31 d6                	xor    esi,edx
1000a628:	89 f7                	mov    edi,esi
1000a62a:	c1 ef 06             	shr    edi,0x6
1000a62d:	89 f5                	mov    ebp,esi
1000a62f:	c1 ed 0e             	shr    ebp,0xe
1000a632:	89 f1                	mov    ecx,esi
1000a634:	c1 e9 16             	shr    ecx,0x16
1000a637:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
1000a63e:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a644:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a64a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a650:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a656:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a65a:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a661:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a668:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
1000a66f:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
1000a676:	31 c8                	xor    eax,ecx
1000a678:	89 c7                	mov    edi,eax
1000a67a:	c1 ef 06             	shr    edi,0x6
1000a67d:	89 c5                	mov    ebp,eax
1000a67f:	c1 ed 0e             	shr    ebp,0xe
1000a682:	89 c2                	mov    edx,eax
1000a684:	c1 ea 16             	shr    edx,0x16
1000a687:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a68e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a694:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a69a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a6a0:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a6a6:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a6aa:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a6b1:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a6b8:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
1000a6bf:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a6c6:	31 d6                	xor    esi,edx
1000a6c8:	89 f7                	mov    edi,esi
1000a6ca:	c1 ef 06             	shr    edi,0x6
1000a6cd:	89 f5                	mov    ebp,esi
1000a6cf:	c1 ed 0e             	shr    ebp,0xe
1000a6d2:	89 f1                	mov    ecx,esi
1000a6d4:	c1 e9 16             	shr    ecx,0x16
1000a6d7:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
1000a6de:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a6e4:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a6ea:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a6f0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a6f6:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a6fa:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a701:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a708:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
1000a70f:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
1000a716:	31 c8                	xor    eax,ecx
1000a718:	89 c7                	mov    edi,eax
1000a71a:	c1 ef 06             	shr    edi,0x6
1000a71d:	89 c5                	mov    ebp,eax
1000a71f:	c1 ed 0e             	shr    ebp,0xe
1000a722:	89 c2                	mov    edx,eax
1000a724:	c1 ea 16             	shr    edx,0x16
1000a727:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a72e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a734:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a73a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a740:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a746:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a74a:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a751:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a758:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
1000a75f:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a766:	31 d6                	xor    esi,edx
1000a768:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
1000a76f:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
1000a772:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
1000a775:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
1000a77c:	39 d3                	cmp    ebx,edx
1000a77e:	0f 85 e1 fa ff ff    	jne    1000a265 <_crypt_blowfish_rn+0x2226>
1000a784:	ff 4c 24 04          	dec    DWORD PTR [esp+0x4]
1000a788:	0f 85 a2 e9 ff ff    	jne    10009130 <_crypt_blowfish_rn+0x10f1>
1000a78e:	8b 84 24 58 10 00 00 	mov    eax,DWORD PTR [esp+0x1058]
1000a795:	89 04 24             	mov    DWORD PTR [esp],eax
1000a798:	8b 84 24 5c 10 00 00 	mov    eax,DWORD PTR [esp+0x105c]
1000a79f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000a7a3:	8b 84 24 60 10 00 00 	mov    eax,DWORD PTR [esp+0x1060]
1000a7aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000a7ae:	8b 84 24 64 10 00 00 	mov    eax,DWORD PTR [esp+0x1064]
1000a7b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000a7b9:	8b 84 24 68 10 00 00 	mov    eax,DWORD PTR [esp+0x1068]
1000a7c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000a7c4:	8b 84 24 6c 10 00 00 	mov    eax,DWORD PTR [esp+0x106c]
1000a7cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000a7cf:	8b 84 24 70 10 00 00 	mov    eax,DWORD PTR [esp+0x1070]
1000a7d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000a7da:	8b 84 24 74 10 00 00 	mov    eax,DWORD PTR [esp+0x1074]
1000a7e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000a7e5:	8b 84 24 78 10 00 00 	mov    eax,DWORD PTR [esp+0x1078]
1000a7ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000a7f0:	8b 84 24 7c 10 00 00 	mov    eax,DWORD PTR [esp+0x107c]
1000a7f7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000a7fb:	8b 84 24 80 10 00 00 	mov    eax,DWORD PTR [esp+0x1080]
1000a802:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000a806:	8b 84 24 84 10 00 00 	mov    eax,DWORD PTR [esp+0x1084]
1000a80d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000a811:	8b 84 24 88 10 00 00 	mov    eax,DWORD PTR [esp+0x1088]
1000a818:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
1000a81c:	8b 84 24 8c 10 00 00 	mov    eax,DWORD PTR [esp+0x108c]
1000a823:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
1000a827:	8b 84 24 90 10 00 00 	mov    eax,DWORD PTR [esp+0x1090]
1000a82e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000a832:	8b 84 24 94 10 00 00 	mov    eax,DWORD PTR [esp+0x1094]
1000a839:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
1000a83d:	8b 84 24 98 10 00 00 	mov    eax,DWORD PTR [esp+0x1098]
1000a844:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
1000a848:	8b 84 24 9c 10 00 00 	mov    eax,DWORD PTR [esp+0x109c]
1000a84f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
1000a853:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
1000a857:	89 5c 24 4c          	mov    DWORD PTR [esp+0x4c],ebx
1000a85b:	8b 04 9d a0 be 00 10 	mov    eax,DWORD PTR [ebx*4+0x1000bea0]	1000a85e: R_386_32	.data
1000a862:	8b 0c 9d a4 be 00 10 	mov    ecx,DWORD PTR [ebx*4+0x1000bea4]	1000a865: R_386_32	.data
1000a869:	bb 40 00 00 00       	mov    ebx,0x40
1000a86e:	33 04 24             	xor    eax,DWORD PTR [esp]
1000a871:	89 c7                	mov    edi,eax
1000a873:	c1 ef 06             	shr    edi,0x6
1000a876:	89 c5                	mov    ebp,eax
1000a878:	c1 ed 0e             	shr    ebp,0xe
1000a87b:	89 c2                	mov    edx,eax
1000a87d:	c1 ea 16             	shr    edx,0x16
1000a880:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a887:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a88d:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a893:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a899:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a89f:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a8a3:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a8aa:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a8b1:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000a8b8:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
1000a8bc:	31 ca                	xor    edx,ecx
1000a8be:	89 d7                	mov    edi,edx
1000a8c0:	c1 ef 06             	shr    edi,0x6
1000a8c3:	89 d5                	mov    ebp,edx
1000a8c5:	c1 ed 0e             	shr    ebp,0xe
1000a8c8:	89 d1                	mov    ecx,edx
1000a8ca:	c1 e9 16             	shr    ecx,0x16
1000a8cd:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000a8d4:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a8da:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a8e0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a8e6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a8ec:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a8f0:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a8f7:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a8fe:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
1000a902:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a909:	31 c1                	xor    ecx,eax
1000a90b:	89 cd                	mov    ebp,ecx
1000a90d:	c1 ed 06             	shr    ebp,0x6
1000a910:	89 ce                	mov    esi,ecx
1000a912:	c1 ee 0e             	shr    esi,0xe
1000a915:	89 c8                	mov    eax,ecx
1000a917:	c1 e8 16             	shr    eax,0x16
1000a91a:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000a921:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a927:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a92d:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a933:	25 fc 03 00 00       	and    eax,0x3fc
1000a938:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a93c:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
1000a943:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
1000a94a:	33 54 24 0c          	xor    edx,DWORD PTR [esp+0xc]
1000a94e:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000a955:	89 c6                	mov    esi,eax
1000a957:	31 d6                	xor    esi,edx
1000a959:	89 f5                	mov    ebp,esi
1000a95b:	c1 ed 06             	shr    ebp,0x6
1000a95e:	89 f2                	mov    edx,esi
1000a960:	c1 ea 0e             	shr    edx,0xe
1000a963:	89 f0                	mov    eax,esi
1000a965:	c1 e8 16             	shr    eax,0x16
1000a968:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000a96f:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a975:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a97b:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a981:	25 fc 03 00 00       	and    eax,0x3fc
1000a986:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a98a:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
1000a991:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
1000a998:	33 4c 24 10          	xor    ecx,DWORD PTR [esp+0x10]
1000a99c:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000a9a3:	31 c1                	xor    ecx,eax
1000a9a5:	89 ca                	mov    edx,ecx
1000a9a7:	c1 ea 06             	shr    edx,0x6
1000a9aa:	89 cd                	mov    ebp,ecx
1000a9ac:	c1 ed 0e             	shr    ebp,0xe
1000a9af:	89 c8                	mov    eax,ecx
1000a9b1:	c1 e8 16             	shr    eax,0x16
1000a9b4:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000a9bb:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a9c1:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a9c7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a9cd:	25 fc 03 00 00       	and    eax,0x3fc
1000a9d2:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a9d6:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a9dd:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000a9e4:	33 74 24 14          	xor    esi,DWORD PTR [esp+0x14]
1000a9e8:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000a9ef:	31 f0                	xor    eax,esi
1000a9f1:	89 c7                	mov    edi,eax
1000a9f3:	c1 ef 06             	shr    edi,0x6
1000a9f6:	89 c5                	mov    ebp,eax
1000a9f8:	c1 ed 0e             	shr    ebp,0xe
1000a9fb:	89 c2                	mov    edx,eax
1000a9fd:	c1 ea 16             	shr    edx,0x16
1000aa00:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000aa07:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000aa0d:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000aa13:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000aa19:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000aa1f:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000aa23:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000aa2a:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000aa31:	33 4c 24 18          	xor    ecx,DWORD PTR [esp+0x18]
1000aa35:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000aa3c:	31 ca                	xor    edx,ecx
1000aa3e:	89 d7                	mov    edi,edx
1000aa40:	c1 ef 06             	shr    edi,0x6
1000aa43:	89 d5                	mov    ebp,edx
1000aa45:	c1 ed 0e             	shr    ebp,0xe
1000aa48:	89 d1                	mov    ecx,edx
1000aa4a:	c1 e9 16             	shr    ecx,0x16
1000aa4d:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000aa54:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000aa5a:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000aa60:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000aa66:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000aa6c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000aa70:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000aa77:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000aa7e:	33 44 24 1c          	xor    eax,DWORD PTR [esp+0x1c]
1000aa82:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000aa89:	31 c8                	xor    eax,ecx
1000aa8b:	89 c7                	mov    edi,eax
1000aa8d:	c1 ef 06             	shr    edi,0x6
1000aa90:	89 c5                	mov    ebp,eax
1000aa92:	c1 ed 0e             	shr    ebp,0xe
1000aa95:	89 c1                	mov    ecx,eax
1000aa97:	c1 e9 16             	shr    ecx,0x16
1000aa9a:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000aaa1:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000aaa7:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000aaad:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000aab3:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000aab9:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000aabd:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000aac4:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000aacb:	33 54 24 20          	xor    edx,DWORD PTR [esp+0x20]
1000aacf:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000aad6:	31 ca                	xor    edx,ecx
1000aad8:	89 d7                	mov    edi,edx
1000aada:	c1 ef 06             	shr    edi,0x6
1000aadd:	89 d5                	mov    ebp,edx
1000aadf:	c1 ed 0e             	shr    ebp,0xe
1000aae2:	89 d1                	mov    ecx,edx
1000aae4:	c1 e9 16             	shr    ecx,0x16
1000aae7:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000aaee:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000aaf4:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000aafa:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000ab00:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000ab06:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000ab0a:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000ab11:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000ab18:	33 44 24 24          	xor    eax,DWORD PTR [esp+0x24]
1000ab1c:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000ab23:	31 c8                	xor    eax,ecx
1000ab25:	89 c7                	mov    edi,eax
1000ab27:	c1 ef 06             	shr    edi,0x6
1000ab2a:	89 c5                	mov    ebp,eax
1000ab2c:	c1 ed 0e             	shr    ebp,0xe
1000ab2f:	89 c1                	mov    ecx,eax
1000ab31:	c1 e9 16             	shr    ecx,0x16
1000ab34:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000ab3b:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000ab41:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000ab47:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000ab4d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000ab53:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000ab57:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000ab5e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000ab65:	33 54 24 28          	xor    edx,DWORD PTR [esp+0x28]
1000ab69:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000ab70:	31 ca                	xor    edx,ecx
1000ab72:	89 d7                	mov    edi,edx
1000ab74:	c1 ef 06             	shr    edi,0x6
1000ab77:	89 d5                	mov    ebp,edx
1000ab79:	c1 ed 0e             	shr    ebp,0xe
1000ab7c:	89 d1                	mov    ecx,edx
1000ab7e:	c1 e9 16             	shr    ecx,0x16
1000ab81:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000ab88:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000ab8e:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000ab94:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000ab9a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000aba0:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000aba4:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000abab:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000abb2:	33 44 24 2c          	xor    eax,DWORD PTR [esp+0x2c]
1000abb6:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000abbd:	31 c8                	xor    eax,ecx
1000abbf:	89 c7                	mov    edi,eax
1000abc1:	c1 ef 06             	shr    edi,0x6
1000abc4:	89 c5                	mov    ebp,eax
1000abc6:	c1 ed 0e             	shr    ebp,0xe
1000abc9:	89 c1                	mov    ecx,eax
1000abcb:	c1 e9 16             	shr    ecx,0x16
1000abce:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000abd5:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000abdb:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000abe1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000abe7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000abed:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000abf1:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000abf8:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000abff:	33 54 24 30          	xor    edx,DWORD PTR [esp+0x30]
1000ac03:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000ac0a:	31 ca                	xor    edx,ecx
1000ac0c:	89 d7                	mov    edi,edx
1000ac0e:	c1 ef 06             	shr    edi,0x6
1000ac11:	89 d5                	mov    ebp,edx
1000ac13:	c1 ed 0e             	shr    ebp,0xe
1000ac16:	89 d1                	mov    ecx,edx
1000ac18:	c1 e9 16             	shr    ecx,0x16
1000ac1b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000ac22:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000ac28:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000ac2e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000ac34:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000ac3a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000ac3e:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000ac45:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000ac4c:	33 44 24 34          	xor    eax,DWORD PTR [esp+0x34]
1000ac50:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000ac57:	31 c8                	xor    eax,ecx
1000ac59:	89 c7                	mov    edi,eax
1000ac5b:	c1 ef 06             	shr    edi,0x6
1000ac5e:	89 c5                	mov    ebp,eax
1000ac60:	c1 ed 0e             	shr    ebp,0xe
1000ac63:	89 c1                	mov    ecx,eax
1000ac65:	c1 e9 16             	shr    ecx,0x16
1000ac68:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000ac6f:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000ac75:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000ac7b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000ac81:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000ac87:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000ac8b:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000ac92:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000ac99:	33 54 24 38          	xor    edx,DWORD PTR [esp+0x38]
1000ac9d:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000aca4:	31 ca                	xor    edx,ecx
1000aca6:	89 d7                	mov    edi,edx
1000aca8:	c1 ef 06             	shr    edi,0x6
1000acab:	89 d5                	mov    ebp,edx
1000acad:	c1 ed 0e             	shr    ebp,0xe
1000acb0:	89 d6                	mov    esi,edx
1000acb2:	c1 ee 16             	shr    esi,0x16
1000acb5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000acbc:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000acc2:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000acc8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000acce:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000acd4:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000acd8:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
1000acdf:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
1000ace6:	33 44 24 3c          	xor    eax,DWORD PTR [esp+0x3c]
1000acea:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
1000acf1:	31 f0                	xor    eax,esi
1000acf3:	89 c5                	mov    ebp,eax
1000acf5:	c1 ed 06             	shr    ebp,0x6
1000acf8:	89 c1                	mov    ecx,eax
1000acfa:	c1 e9 0e             	shr    ecx,0xe
1000acfd:	89 c6                	mov    esi,eax
1000acff:	c1 ee 16             	shr    esi,0x16
1000ad02:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000ad09:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000ad0f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000ad15:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000ad1b:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000ad21:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000ad25:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
1000ad2c:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
1000ad33:	33 54 24 40          	xor    edx,DWORD PTR [esp+0x40]
1000ad37:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
1000ad3e:	89 f1                	mov    ecx,esi
1000ad40:	31 d1                	xor    ecx,edx
1000ad42:	33 44 24 44          	xor    eax,DWORD PTR [esp+0x44]
1000ad46:	4b                   	dec    ebx
1000ad47:	0f 85 21 fb ff ff    	jne    1000a86e <_crypt_blowfish_rn+0x282f>
1000ad4d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
1000ad51:	89 84 9c e8 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10e8],eax
1000ad58:	89 8c 9c ec 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10ec],ecx
1000ad5f:	83 44 24 48 02       	add    DWORD PTR [esp+0x48],0x2
1000ad64:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000ad68:	83 f8 06             	cmp    eax,0x6
1000ad6b:	0f 85 e2 fa ff ff    	jne    1000a853 <_crypt_blowfish_rn+0x2814>
1000ad71:	b9 07 00 00 00       	mov    ecx,0x7
1000ad76:	8b bc 24 1c 11 00 00 	mov    edi,DWORD PTR [esp+0x111c]
1000ad7d:	8b b4 24 18 11 00 00 	mov    esi,DWORD PTR [esp+0x1118]
1000ad84:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000ad86:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
1000ad8d:	0f be 40 1c          	movsx  eax,BYTE PTR [eax+0x1c]
1000ad91:	8a 80 60 cf 00 10    	mov    al,BYTE PTR [eax+0x1000cf60]	1000ad93: R_386_32	.data
1000ad97:	83 e0 30             	and    eax,0x30
1000ad9a:	8a 80 20 cf 00 10    	mov    al,BYTE PTR [eax+0x1000cf20]	1000ad9c: R_386_32	.data
1000ada0:	88 04 24             	mov    BYTE PTR [esp],al
1000ada3:	8b 9c 24 1c 11 00 00 	mov    ebx,DWORD PTR [esp+0x111c]
1000adaa:	88 43 1c             	mov    BYTE PTR [ebx+0x1c],al
1000adad:	6a 06                	push   0x6
1000adaf:	8d 74 24 5c          	lea    esi,[esp+0x5c]
1000adb3:	8d 9c 24 ec 10 00 00 	lea    ebx,[esp+0x10ec]
1000adba:	53                   	push   ebx
1000adbb:	e8 f5 d1 ff ff       	call   10007fb5 <BF_swap>
1000adc0:	6a 17                	push   0x17
1000adc2:	53                   	push   ebx
1000adc3:	8b 84 24 2c 11 00 00 	mov    eax,DWORD PTR [esp+0x112c]
1000adca:	83 c0 1d             	add    eax,0x1d
1000adcd:	50                   	push   eax
1000adce:	e8 3d d1 ff ff       	call   10007f10 <BF_encode>
1000add3:	8b 84 24 30 11 00 00 	mov    eax,DWORD PTR [esp+0x1130]
1000adda:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
1000adde:	68 a8 10 00 00       	push   0x10a8
1000ade3:	56                   	push   esi
1000ade4:	e8 0b d0 ff ff       	call   10007df4 <clean>
1000ade9:	83 c4 1c             	add    esp,0x1c
1000adec:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
1000adf3:	eb 29                	jmp    1000ae1e <_crypt_blowfish_rn+0x2ddf>
1000adf5:	c7 05 00 00 00 00 22 00 00 00 	mov    DWORD PTR ds:0x0,0x22	1000adf7: R_386_32	_bcrypt_errno
1000adff:	b8 00 00 00 00       	mov    eax,0x0
1000ae04:	eb 18                	jmp    1000ae1e <_crypt_blowfish_rn+0x2ddf>
1000ae06:	80 fa 31             	cmp    dl,0x31
1000ae09:	0f 8e a3 d2 ff ff    	jle    100080b2 <_crypt_blowfish_rn+0x73>
1000ae0f:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000ae11: R_386_32	_bcrypt_errno
1000ae19:	b8 00 00 00 00       	mov    eax,0x0
1000ae1e:	81 c4 00 11 00 00    	add    esp,0x1100
1000ae24:	5b                   	pop    ebx
1000ae25:	5e                   	pop    esi
1000ae26:	5f                   	pop    edi
1000ae27:	5d                   	pop    ebp
1000ae28:	c3                   	ret    
1000ae29:	6a 10                	push   0x10
1000ae2b:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
1000ae32:	50                   	push   eax
1000ae33:	e8 bc cf ff ff       	call   10007df4 <clean>
1000ae38:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000ae3a: R_386_32	_bcrypt_errno
1000ae42:	83 c4 08             	add    esp,0x8
1000ae45:	b8 00 00 00 00       	mov    eax,0x0
1000ae4a:	eb d2                	jmp    1000ae1e <_crypt_blowfish_rn+0x2ddf>

1000ae4c <_crypt_gensalt_blowfish_rn>:
1000ae4c:	53                   	push   ebx
1000ae4d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000ae51:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000ae55:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
1000ae5a:	7e 19                	jle    1000ae75 <_crypt_gensalt_blowfish_rn+0x29>
1000ae5c:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
1000ae61:	0f 8e 88 00 00 00    	jle    1000aeef <_crypt_gensalt_blowfish_rn+0xa3>
1000ae67:	85 c9                	test   ecx,ecx
1000ae69:	74 33                	je     1000ae9e <_crypt_gensalt_blowfish_rn+0x52>
1000ae6b:	8d 41 fc             	lea    eax,[ecx-0x4]
1000ae6e:	83 f8 1b             	cmp    eax,0x1b
1000ae71:	76 30                	jbe    1000aea3 <_crypt_gensalt_blowfish_rn+0x57>
1000ae73:	eb 07                	jmp    1000ae7c <_crypt_gensalt_blowfish_rn+0x30>
1000ae75:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000ae7a:	7e 03                	jle    1000ae7f <_crypt_gensalt_blowfish_rn+0x33>
1000ae7c:	c6 03 00             	mov    BYTE PTR [ebx],0x0
1000ae7f:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
1000ae84:	7e 11                	jle    1000ae97 <_crypt_gensalt_blowfish_rn+0x4b>
1000ae86:	b8 16 00 00 00       	mov    eax,0x16
1000ae8b:	a3 00 00 00 00       	mov    ds:0x0,eax	1000ae8c: R_386_32	_bcrypt_errno
1000ae90:	b8 00 00 00 00       	mov    eax,0x0
1000ae95:	eb 56                	jmp    1000aeed <_crypt_gensalt_blowfish_rn+0xa1>
1000ae97:	b8 22 00 00 00       	mov    eax,0x22
1000ae9c:	eb ed                	jmp    1000ae8b <_crypt_gensalt_blowfish_rn+0x3f>
1000ae9e:	b9 05 00 00 00       	mov    ecx,0x5
1000aea3:	c6 03 24             	mov    BYTE PTR [ebx],0x24
1000aea6:	c6 43 01 32          	mov    BYTE PTR [ebx+0x1],0x32
1000aeaa:	c6 43 02 61          	mov    BYTE PTR [ebx+0x2],0x61
1000aeae:	c6 43 03 24          	mov    BYTE PTR [ebx+0x3],0x24
1000aeb2:	b8 cd cc cc cc       	mov    eax,0xcccccccd
1000aeb7:	f7 e1                	mul    ecx
1000aeb9:	89 d0                	mov    eax,edx
1000aebb:	c1 e8 03             	shr    eax,0x3
1000aebe:	8d 50 30             	lea    edx,[eax+0x30]
1000aec1:	88 53 04             	mov    BYTE PTR [ebx+0x4],dl
1000aec4:	8d 04 80             	lea    eax,[eax+eax*4]
1000aec7:	01 c0                	add    eax,eax
1000aec9:	29 c1                	sub    ecx,eax
1000aecb:	83 c1 30             	add    ecx,0x30
1000aece:	88 4b 05             	mov    BYTE PTR [ebx+0x5],cl
1000aed1:	c6 43 06 24          	mov    BYTE PTR [ebx+0x6],0x24
1000aed5:	6a 10                	push   0x10
1000aed7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000aedb:	8d 43 07             	lea    eax,[ebx+0x7]
1000aede:	50                   	push   eax
1000aedf:	e8 2c d0 ff ff       	call   10007f10 <BF_encode>
1000aee4:	c6 43 1d 00          	mov    BYTE PTR [ebx+0x1d],0x0
1000aee8:	83 c4 0c             	add    esp,0xc
1000aeeb:	89 d8                	mov    eax,ebx
1000aeed:	5b                   	pop    ebx
1000aeee:	c3                   	ret    
1000aeef:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000aef4:	7f 86                	jg     1000ae7c <_crypt_gensalt_blowfish_rn+0x30>
1000aef6:	b8 22 00 00 00       	mov    eax,0x22
1000aefb:	eb 8e                	jmp    1000ae8b <_crypt_gensalt_blowfish_rn+0x3f>

1000aefd <bcrypt_gensalt>:
1000aefd:	57                   	push   edi
1000aefe:	56                   	push   esi
1000aeff:	53                   	push   ebx
1000af00:	83 ec 10             	sub    esp,0x10
1000af03:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000af07:	89 e3                	mov    ebx,esp
1000af09:	8d 74 24 10          	lea    esi,[esp+0x10]
1000af0d:	e8 fc ff ff ff       	call   1000af0e <bcrypt_gensalt+0x11>	1000af0e: R_386_PC32	_bcrypt_rand
1000af12:	88 03                	mov    BYTE PTR [ebx],al
1000af14:	43                   	inc    ebx
1000af15:	39 f3                	cmp    ebx,esi
1000af17:	75 f4                	jne    1000af0d <bcrypt_gensalt+0x10>
1000af19:	8d 47 fc             	lea    eax,[edi-0x4]
1000af1c:	83 f8 1b             	cmp    eax,0x1b
1000af1f:	76 05                	jbe    1000af26 <bcrypt_gensalt+0x29>
1000af21:	bf 0c 00 00 00       	mov    edi,0xc
1000af26:	83 ec 0c             	sub    esp,0xc
1000af29:	6a 40                	push   0x40
1000af2b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
1000af2f:	6a 10                	push   0x10
1000af31:	8d 44 24 18          	lea    eax,[esp+0x18]
1000af35:	50                   	push   eax
1000af36:	57                   	push   edi
1000af37:	e8 10 ff ff ff       	call   1000ae4c <_crypt_gensalt_blowfish_rn>
1000af3c:	85 c0                	test   eax,eax
1000af3e:	0f 94 c0             	sete   al
1000af41:	0f b6 c0             	movzx  eax,al
1000af44:	83 c4 30             	add    esp,0x30
1000af47:	5b                   	pop    ebx
1000af48:	5e                   	pop    esi
1000af49:	5f                   	pop    edi
1000af4a:	c3                   	ret    

1000af4b <bcrypt_hashpw>:
1000af4b:	6a 40                	push   0x40
1000af4d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000af51:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000af55:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000af59:	e8 e1 d0 ff ff       	call   1000803f <_crypt_blowfish_rn>
1000af5e:	83 c4 10             	add    esp,0x10
1000af61:	85 c0                	test   eax,eax
1000af63:	0f 94 c0             	sete   al
1000af66:	0f b6 c0             	movzx  eax,al
1000af69:	c3                   	ret    
1000af6a:	66 90                	xchg   ax,ax

1000af6c <TERMINAL_KEYBUFFER_IN_SIZE>:
1000af6c:	80 00 00 00                                         ....

1000af70 <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000af70:	80 00 00 00 2e 00 2e 2e 00 2f 00 43 6f 75 6c 64     ........./.Could
1000af80:	6e 27 74 20 6f 70 65 6e 20 62 61 73 65 20 70 61     n't open base pa
1000af90:	74 68 2e 0a 00 25 73 20 2d 3e 20 25 73 0a 00 43     th...%s -> %s..C
1000afa0:	4f 55 4c 44 20 4e 4f 54 20 43 52 45 41 54 45 00     OULD NOT CREATE.
1000afb0:	43 4f 55 4c 44 20 4e 4f 54 20 43 4f 50 59 00 4e     COULD NOT COPY.N
1000afc0:	4f 20 4d 45 4d 4f 52 59 00 42 61 63 6b 75 70 00     O MEMORY.Backup.
1000afd0:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000afe0:	2f 42 61 63 6b 75 70 2f 00 30 31 32 33 34 35 36     /Backup/.0123456
1000aff0:	37 38 39 41 42 43 44 45 46 00 43 3a 2f 55 73 65     789ABCDEF.C:/Use
1000b000:	72 73 2f 00 2f 44 65 73 6b 74 6f 70 00 2f 44 6f     rs/./Desktop./Do
1000b010:	63 75 6d 65 6e 74 73 00 2f 44 6f 77 6e 6c 6f 61     cuments./Downloa
1000b020:	64 73 00 2f 50 69 63 74 75 72 65 73 00 2f 54 72     ds./Pictures./Tr
1000b030:	61 73 68 20 42 69 6e 00 2f 4d 75 73 69 63 00 2f     ash Bin./Music./
1000b040:	4d 6f 76 69 65 73 00 43 3a 2f 42 61 6e 61 6e 61     Movies.C:/Banana
1000b050:	2f 52 65 67 69 73 74 72 79 2f 55 73 65 72 2f 00     /Registry/User/.
1000b060:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000b070:	72 79 2f 44 65 66 61 75 6c 74 55 73 65 72 00 00     ry/DefaultUser..
1000b080:	43 68 65 63 6b 69 6e 67 0a 20 73 79 73 74 65 6d     Checking. system
1000b090:	0a 20 72 65 71 75 69 72 65 6d 65 6e 74 73 0a 0a     . requirements..
1000b0a0:	20 4c 65 67 61 6c 0a 20 6e 6f 74 69 63 65 73 0a      Legal. notices.
1000b0b0:	0a 20 43 68 6f 6f 73 69 6e 67 20 61 0a 20 70 61     . Choosing a. pa
1000b0c0:	72 74 69 74 69 6f 6e 0a 0a 20 46 6f 72 6d 61 74     rtition.. Format
1000b0d0:	74 69 6e 67 0a 0a 20 43 6f 70 79 69 6e 67 20 66     ting.. Copying f
1000b0e0:	69 6c 65 73 0a 0a 20 52 65 73 74 61 72 74 69 6e     iles.. Restartin
1000b0f0:	67 0a 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72     g. your computer
1000b100:	0a 0a 00 20 46 69 6e 61 6c 69 73 69 6e 67 20 74     ... Finalising t
1000b110:	68 65 0a 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     he. installation
1000b120:	00 0a 0a 0a 0a 0a 0a 0a 0a 20 20 20 53 41 46 45     .........   SAFE
1000b130:	20 4d 4f 44 45 00 25 63 3a 20 25 63 25 63 25 63      MODE.%c: %c%c%c
1000b140:	25 63 0a 00 77 61 69 74 69 6e 67 20 25 64 20 6d     %c..waiting %d m
1000b150:	69 6c 6c 69 73 65 63 0a 00 00 00 00 50 6c 65 61     illisec.....Plea
1000b160:	73 65 20 77 61 69 74 20 77 68 69 6c 65 20 74 68     se wait while th
1000b170:	65 20 69 6e 73 74 61 6c 6c 20 66 69 6e 69 73 68     e install finish
1000b180:	65 73 2e 00 10 20 00 20 20 00 41 6c 6c 6f 63 61     es... .  .Alloca
1000b190:	74 69 6e 67 20 74 68 65 20 73 77 61 70 66 69 6c     ting the swapfil
1000b1a0:	65 00 55 70 64 61 74 69 6e 67 20 74 68 65 20 72     e.Updating the r
1000b1b0:	65 67 69 73 74 72 79 00 43 72 65 61 74 69 6e 67     egistry.Creating
1000b1c0:	20 75 73 65 72 20 61 63 63 6f 75 6e 74 00 49 6e      user account.In
1000b1d0:	73 74 61 6c 6c 69 6e 67 20 70 61 63 6b 61 67 65     stalling package
1000b1e0:	73 00 42 61 63 6b 69 6e 67 20 75 70 20 73 79 73     s.Backing up sys
1000b1f0:	74 65 6d 20 66 69 6c 65 73 00 46 69 6e 69 73 68     tem files.Finish
1000b200:	69 6e 67 20 74 6f 75 63 68 65 73 00 51 51 2d 30     ing touches.QQ-0
1000b210:	30 30 2d 30 30 30 2d 30 30 30 2d 51 00 00 00 00     00-000-000-Q....
1000b220:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000b230:	2f 74 69 6d 65 7a 6f 6e 65 73 2e 74 78 74 00 20     /timezones.txt. 
1000b240:	00 2e 2e 2e 20 00 00 00 53 65 74 74 69 6e 67 20     .... ...Setting 
1000b250:	75 70 20 74 68 65 20 73 79 73 74 65 6d 20 66 6f     up the system fo
1000b260:	72 20 74 68 65 20 66 69 72 73 74 20 74 69 6d 65     r the first time
1000b270:	00 0a 0a 0a 0a 0a 0a 00 54 65 73 74 00 41 41 2d     ........Test.AA-
1000b280:	30 30 30 30 30 2d 30 30 30 30 30 2d 41 00 57 57     00000-00000-A.WW
1000b290:	2d 38 38 33 38 38 2d 35 35 35 35 35 2d 4e 00 43     -88388-55555-N.C
1000b2a0:	72 65 61 74 65 20 4e 65 77 20 55 73 65 72 00 42     reate New User.B
1000b2b0:	61 6e 61 6e 61 20 53 65 74 75 70 00 50 6c 65 61     anana Setup.Plea
1000b2c0:	73 65 20 65 6e 74 65 72 20 79 6f 75 72 20 64 65     se enter your de
1000b2d0:	74 61 69 6c 73 2e 20 50 72 65 73 73 20 54 41 42     tails. Press TAB
1000b2e0:	20 74 6f 20 73 77 69 74 63 68 00 00 62 65 74 77      to switch..betw
1000b2f0:	65 65 6e 20 66 69 65 6c 64 73 2c 20 6f 72 20 45     een fields, or E
1000b300:	53 43 20 74 6f 20 63 61 6e 63 65 6c 2e 00 62 65     SC to cancel..be
1000b310:	74 77 65 65 6e 20 66 69 65 6c 64 73 2e 00 4e 61     tween fields..Na
1000b320:	6d 65 00 43 6f 6d 70 61 6e 79 00 50 61 73 73 77     me.Company.Passw
1000b330:	6f 72 64 00 43 6f 6e 66 69 72 6d 00 70 61 73 73     ord.Confirm.pass
1000b340:	77 6f 72 64 00 00 00 00 20 20 20 20 20 20 20 20     word....        
1000b350:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000b360:	20 20 20 20 20 20 20 20 20 20 20 20 00 20 11 00                 . ..
1000b370:	20 20 20 00 2a 00 50 72 65 73 73 20 45 4e 54 45        .*.Press ENTE
1000b380:	52 20 74 6f 20 73 75 62 6d 69 74 00 20 20 20 20     R to submit.    
1000b390:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000b3a0:	20 20 00 20 20 20 4f 4b 20 20 20 00 20 20 11 00       .   OK   .  ..
1000b3b0:	43 4f 55 4c 44 20 4e 4f 54 20 53 41 56 45 00 59     COULD NOT SAVE.Y
1000b3c0:	4f 55 52 20 50 41 53 53 57 4f 52 44 20 28 41 29     OUR PASSWORD (A)
1000b3d0:	00 59 4f 55 52 20 50 41 53 53 57 4f 52 44 20 28     .YOUR PASSWORD (
1000b3e0:	42 29 00 44 61 74 65 20 61 6e 64 20 54 69 6d 65     B).Date and Time
1000b3f0:	00 31 34 2f 30 35 2f 32 30 32 31 20 31 38 3a 35     .14/05/2021 18:5
1000b400:	35 3a 30 30 00 00 00 00 50 6c 65 61 73 65 20 65     5:00....Please e
1000b410:	6e 74 65 72 20 74 68 65 20 63 75 72 72 65 6e 74     nter the current
1000b420:	20 64 61 74 65 20 61 6e 64 20 74 69 6d 65 2c 00      date and time,.
1000b430:	61 6e 64 20 74 68 65 6e 20 70 72 65 73 73 20 45     and then press E
1000b440:	4e 54 45 52 2e 00 44 44 2f 4d 4d 2f 59 59 59 59     NTER..DD/MM/YYYY
1000b450:	20 48 48 3a 4d 4d 3a 53 53 00 45 53 43 3a 20 47      HH:MM:SS.ESC: G
1000b460:	6f 20 62 61 63 6b 20 61 20 73 63 72 65 65 6e 00     o back a screen.
1000b470:	50 6c 65 61 73 65 20 73 65 6c 65 63 74 20 79 6f     Please select yo
1000b480:	75 72 20 74 69 6d 65 7a 6f 6e 65 20 61 6e 64 20     ur timezone and 
1000b490:	74 68 65 6e 20 70 72 65 73 73 20 45 4e 54 45 52     then press ENTER
1000b4a0:	2e 00 55 73 65 72 20 49 6e 74 65 72 66 61 63 65     ..User Interface
1000b4b0:	00 00 00 00 50 6c 65 61 73 65 20 73 65 6c 65 63     ....Please selec
1000b4c0:	74 20 74 68 65 20 75 73 65 72 20 69 6e 74 65 72     t the user inter
1000b4d0:	66 61 63 65 20 79 6f 75 20 77 61 6e 74 20 42 61     face you want Ba
1000b4e0:	6e 61 6e 61 00 00 00 00 74 6f 20 62 6f 6f 74 20     nana....to boot 
1000b4f0:	69 6e 74 6f 20 62 79 20 64 65 66 61 75 6c 74 20     into by default 
1000b500:	77 68 65 6e 20 79 6f 75 20 73 74 61 72 74 20 74     when you start t
1000b510:	68 65 20 63 6f 6d 70 75 74 65 72 2e 00 49 6e 76     he computer..Inv
1000b520:	61 6c 69 64 20 50 72 6f 64 75 63 74 20 4b 65 79     alid Product Key
1000b530:	00 00 00 00 59 6f 75 20 64 6f 20 6e 6f 74 20 68     ....You do not h
1000b540:	61 76 65 20 61 20 76 61 6c 69 64 20 70 72 6f 64     ave a valid prod
1000b550:	75 63 74 20 6b 65 79 2e 0a 00 00 00 59 6f 75 20     uct key.....You 
1000b560:	6e 65 65 64 20 61 20 76 61 6c 69 64 20 70 72 6f     need a valid pro
1000b570:	64 75 63 74 20 6b 65 79 20 69 6e 20 6f 72 64 65     duct key in orde
1000b580:	72 20 74 6f 00 75 73 65 20 42 61 6e 61 6e 61 2e     r to.use Banana.
1000b590:	00 00 00 00 50 72 65 73 73 20 45 4e 54 45 52 20     ....Press ENTER 
1000b5a0:	74 6f 20 72 65 2d 65 6e 74 65 72 20 79 6f 75 72     to re-enter your
1000b5b0:	20 70 72 6f 64 75 63 74 20 6b 65 79 2e 00 50 72      product key..Pr
1000b5c0:	6f 64 75 63 74 20 4b 65 79 00 00 00 50 6c 65 61     oduct Key...Plea
1000b5d0:	73 65 20 65 6e 74 65 72 20 79 6f 75 72 20 70 72     se enter your pr
1000b5e0:	6f 64 75 63 74 20 6b 65 79 20 62 65 6c 6f 77 2c     oduct key below,
1000b5f0:	00 00 00 00 54 68 65 20 65 6e 74 65 72 65 64 20     ....The entered 
1000b600:	70 72 6f 64 75 63 74 20 6b 65 79 20 77 61 73 20     product key was 
1000b610:	69 6e 76 61 6c 69 64 2e 00 00 00 00 50 72 65 73     invalid.....Pres
1000b620:	73 20 61 6e 79 20 6b 65 79 20 74 6f 20 63 6f 6e     s any key to con
1000b630:	74 69 6e 75 65 20 61 6e 64 20 74 68 65 6e 00 00     tinue and then..
1000b640:	65 6e 74 65 72 20 74 68 65 20 70 72 6f 64 75 63     enter the produc
1000b650:	74 20 6b 65 79 20 63 6f 72 72 65 63 74 6c 79 2e     t key correctly.
1000b660:	00 46 69 6e 61 6c 69 73 69 6e 67 20 49 6e 73 74     .Finalising Inst
1000b670:	61 6c 6c 61 74 69 6f 6e 00 00 00 00 53 59 53 54     allation....SYST
1000b680:	45 4d 2e 44 4c 4c 20 54 4f 44 4f 3a 20 72 65 67     EM.DLL TODO: reg
1000b690:	69 73 74 72 79 20 72 65 61 64 0a 00 43 3a 2f 42     istry read..C:/B
1000b6a0:	61 6e 61 6e 61 2f 52 65 67 69 73 74 72 79 2f 53     anana/Registry/S
1000b6b0:	79 73 74 65 6d 00 43 3a 2f 42 61 6e 61 6e 61 2f     ystem.C:/Banana/
1000b6c0:	52 65 67 69 73 74 72 79 2f 55 73 65 72 00 00 00     Registry/User...
1000b6d0:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000b6e0:	72 79 2f 44 65 66 61 75 6c 74 53 79 73 74 65 6d     ry/DefaultSystem
1000b6f0:	00 00 00 00 20 42 6f 6f 74 20 74 6f 20 63 6f 6d     .... Boot to com
1000b700:	6d 61 6e 64 20 6c 69 6e 65 20 20 20 20 20 20 20     mand line       
1000b710:	20 20 20 20 20 20 20 20 00 00 00 00 20 42 6f 6f             .... Boo
1000b720:	74 20 74 6f 20 67 72 61 70 68 69 63 61 6c 20 69     t to graphical i
1000b730:	6e 74 65 72 66 61 63 65 20 28 56 47 41 29 20 20     nterface (VGA)  
1000b740:	00 00 00 00 20 42 6f 6f 74 20 74 6f 20 67 72 61     .... Boot to gra
1000b750:	70 68 69 63 61 6c 20 69 6e 74 65 72 66 61 63 65     phical interface
1000b760:	20 28 56 45 53 41 29 20 00 00 00 00 f4 b6 00 10      (VESA) ........	1000b76c: R_386_32	.text
1000b770:	1c b7 00 10 44 b7 00 10 4c 6f 61 64 69 6e 67 20     ....D...Loading 	1000b770: R_386_32	.text
	1000b774: R_386_32	.text
1000b780:	65 78 74 65 6e 73 69 6f 6e 73 2e 2e 2e 00 0a 0a     extensions......
1000b790:	3a 0a 00 2f 25 73 0a 00 43 3a 2f 42 61 6e 61 6e     :../%s..C:/Banan
1000b7a0:	61 2f 53 79 73 74 65 6d 2f 73 65 74 75 70 69 73     a/System/setupis
1000b7b0:	64 2e 6f 6e 65 00 53 59 53 49 4e 49 54 20 46 41     d.one.SYSINIT FA
1000b7c0:	49 4c 55 52 45 00 43 3a 2f 42 61 6e 61 6e 61 2f     ILURE.C:/Banana/
1000b7d0:	53 79 73 74 65 6d 2f 63 6f 6d 6d 61 6e 64 2e 65     System/command.e
1000b7e0:	78 65 00 43 3a 2f 44 45 2e 42 55 47 00 00 00 00     xe.C:/DE.BUG....
1000b7f0:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000b800:	72 79 2f 53 79 73 74 65 6d 2f 53 59 53 54 45 4d     ry/System/SYSTEM
1000b810:	2e 52 45 47 00 42 41 4e 41 4e 41 00 72 65 67 73     .REG.BANANA.regs
1000b820:	61 66 65 6e 61 6d 65 20 3d 20 25 73 0a 00 42 41     afename = %s..BA
1000b830:	4e 41 4e 41 2f 55 53 45 52 53 2f 00 75 73 65 72     NANA/USERS/.user
1000b840:	42 61 73 65 50 61 74 68 20 3d 20 25 73 0a 00 53     BasePath = %s..S
1000b850:	45 54 55 50 00 42 4f 4f 54 00 54 49 4d 45 00 55     ETUP.BOOT.TIME.U
1000b860:	53 45 52 53 00 46 49 4c 45 41 53 53 4f 43 00 42     SERS.FILEASSOC.B
1000b870:	41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43 00     ANANA/FILEASSOC.
1000b880:	4f 50 45 4e 00 45 44 49 54 00 50 52 49 4e 54 00     OPEN.EDIT.PRINT.
1000b890:	49 43 4f 4e 00 44 45 53 43 52 00 43 55 53 54 4f     ICON.DESCR.CUSTO
1000b8a0:	4d 56 45 52 42 00 43 55 53 54 4f 4d 50 52 4f 47     MVERB.CUSTOMPROG
1000b8b0:	00 42 41 4e 41 4e 41 2f 54 49 4d 45 00 54 49 4d     .BANANA/TIME.TIM
1000b8c0:	45 5a 4f 4e 45 00 42 41 4e 41 4e 41 2f 53 45 54     EZONE.BANANA/SET
1000b8d0:	55 50 00 4e 41 4d 45 00 43 4f 4d 50 41 4e 59 00     UP.NAME.COMPANY.
1000b8e0:	50 52 4f 44 55 43 54 4b 45 59 00 42 41 4e 41 4e     PRODUCTKEY.BANAN
1000b8f0:	41 2f 55 53 45 52 53 00 53 41 4c 54 00 50 41 53     A/USERS.SALT.PAS
1000b900:	53 57 4f 52 44 00 44 49 53 50 4c 41 59 4e 41 4d     SWORD.DISPLAYNAM
1000b910:	45 00 44 45 53 4b 54 4f 50 00 44 4f 43 55 4d 45     E.DESKTOP.DOCUME
1000b920:	4e 54 53 00 44 4f 57 4e 4c 4f 41 44 53 00 50 49     NTS.DOWNLOADS.PI
1000b930:	43 54 55 52 45 53 00 4d 4f 56 49 45 53 00 4d 55     CTURES.MOVIES.MU
1000b940:	53 49 43 00 52 45 43 59 43 4c 45 42 49 4e 00 42     SIC.RECYCLEBIN.B
1000b950:	41 4e 41 4e 41 2f 42 4f 4f 54 00 41 55 54 4f 47     ANANA/BOOT.AUTOG
1000b960:	55 49 00 54 49 4d 45 5a 4f 4e 45 49 44 00 42 41     UI.TIMEZONEID.BA
1000b970:	4e 41 4e 41 2f 54 49 4d 45 2f 54 49 4d 45 5a 4f     NANA/TIME/TIMEZO
1000b980:	4e 45 00 42 41 4e 41 4e 41 2f 53 45 54 55 50 2f     NE.BANANA/SETUP/
1000b990:	4e 41 4d 45 00 42 41 4e 41 4e 41 2f 53 45 54 55     NAME.BANANA/SETU
1000b9a0:	50 2f 43 4f 4d 50 41 4e 59 00 42 41 4e 41 4e 41     P/COMPANY.BANANA
1000b9b0:	2f 53 45 54 55 50 2f 50 52 4f 44 55 43 54 4b 45     /SETUP/PRODUCTKE
1000b9c0:	59 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53     Y.BANANA/FILEASS
1000b9d0:	4f 43 2f 49 43 4f 4e 00 54 58 54 00 42 41 4e 41     OC/ICON.TXT.BANA
1000b9e0:	4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f 44 45 53     NA/FILEASSOC/DES
1000b9f0:	43 52 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53     CR.BANANA/FILEAS
1000ba00:	53 4f 43 2f 4f 50 45 4e 00 42 41 4e 41 4e 41 2f     SOC/OPEN.BANANA/
1000ba10:	46 49 4c 45 41 53 53 4f 43 2f 45 44 49 54 00 42     FILEASSOC/EDIT.B
1000ba20:	41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f     ANANA/FILEASSOC/
1000ba30:	50 52 49 4e 54 00 42 41 4e 41 4e 41 2f 46 49 4c     PRINT.BANANA/FIL
1000ba40:	45 41 53 53 4f 43 2f 49 43 4f 4e 2f 54 58 54 00     EASSOC/ICON/TXT.
1000ba50:	43 3a 2f 42 61 6e 61 6e 61 2f 49 63 6f 6e 73 2f     C:/Banana/Icons/
1000ba60:	63 6f 6c 6f 75 72 2f 74 65 78 74 2e 74 67 61 00     colour/text.tga.
1000ba70:	42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43     BANANA/FILEASSOC
1000ba80:	2f 44 45 53 43 52 2f 54 58 54 00 54 65 78 74 20     /DESCR/TXT.Text 
1000ba90:	44 6f 63 75 6d 65 6e 74 00 42 41 4e 41 4e 41 2f     Document.BANANA/
1000baa0:	46 49 4c 45 41 53 53 4f 43 2f 4f 50 45 4e 2f 54     FILEASSOC/OPEN/T
1000bab0:	58 54 00 43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73     XT.C:/Banana/Sys
1000bac0:	74 65 6d 2f 74 65 2e 65 78 65 00 42 41 4e 41 4e     tem/te.exe.BANAN
1000bad0:	41 2f 46 49 4c 45 41 53 53 4f 43 2f 45 44 49 54     A/FILEASSOC/EDIT
1000bae0:	2f 54 58 54 00 42 41 4e 41 4e 41 2f 46 49 4c 45     /TXT.BANANA/FILE
1000baf0:	41 53 53 4f 43 2f 50 52 49 4e 54 2f 54 58 54 00     ASSOC/PRINT/TXT.
1000bb00:	49 53 4f 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41     ISO.BANANA/FILEA
1000bb10:	53 53 4f 43 2f 49 43 4f 4e 2f 49 53 4f 00 43 3a     SSOC/ICON/ISO.C:
1000bb20:	2f 42 61 6e 61 6e 61 2f 49 63 6f 6e 73 2f 63 6f     /Banana/Icons/co
1000bb30:	6c 6f 75 72 2f 63 64 2e 74 67 61 00 42 41 4e 41     lour/cd.tga.BANA
1000bb40:	4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f 44 45 53     NA/FILEASSOC/DES
1000bb50:	43 52 2f 49 53 4f 00 44 69 73 63 20 49 6d 61 67     CR/ISO.Disc Imag
1000bb60:	65 20 46 69 6c 65 00 2f 50 41 53 53 57 4f 52 44     e File./PASSWORD
1000bb70:	00 2f 53 41 4c 54 00 2f 44 49 53 50 4c 41 59 4e     ./SALT./DISPLAYN
1000bb80:	41 4d 45 00 2f 44 45 53 4b 54 4f 50 00 2f 44 4f     AME./DESKTOP./DO
1000bb90:	43 55 4d 45 4e 54 53 00 2f 44 4f 57 4e 4c 4f 41     CUMENTS./DOWNLOA
1000bba0:	44 53 00 2f 50 49 43 54 55 52 45 53 00 2f 4d 4f     DS./PICTURES./MO
1000bbb0:	56 49 45 53 00 2f 4d 55 53 49 43 00 2f 52 45 43     VIES./MUSIC./REC
1000bbc0:	59 43 4c 45 42 49 4e 00 54 4f 44 4f 3a 20 64 65     YCLEBIN.TODO: de
1000bbd0:	74 65 63 74 20 6e 6f 72 6d 61 6c 20 6b 65 72 6e     tect normal kern
1000bbe0:	65 6c 20 76 73 20 4b 52 4e 4c 50 32 0a 00 00 00     el vs KRNLP2....
1000bbf0:	54 68 65 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     The installation
1000bc00:	20 68 61 73 20 62 65 65 6e 20 63 6f 6d 70 6c 65      has been comple
1000bc10:	74 65 64 2e 0a 00 00 00 50 6c 65 61 73 65 20 70     ted.....Please p
1000bc20:	72 65 73 73 20 45 4e 54 45 52 20 74 6f 20 72 65     ress ENTER to re
1000bc30:	73 74 61 72 74 20 79 6f 75 72 20 63 6f 6d 70 75     start your compu
1000bc40:	74 65 72 00 61 6e 64 20 73 74 61 72 74 20 42 61     ter.and start Ba
1000bc50:	6e 61 6e 61 2e 00 42 41 4e 41 4e 41 2f 42 4f 4f     nana..BANANA/BOO
1000bc60:	54 2f 41 55 54 4f 47 55 49 00 50 72 6f 64 75 63     T/AUTOGUI.Produc
1000bc70:	74 20 4b 65 79 20 55 70 64 61 74 65 64 00 00 00     t Key Updated...
1000bc80:	59 6f 75 72 20 70 72 6f 64 75 63 74 20 6b 65 79     Your product key
1000bc90:	20 68 61 73 20 62 65 65 6e 20 75 70 64 61 74 65      has been update
1000bca0:	64 2e 0a 00 20 43 72 65 61 74 65 20 6e 65 77 20     d... Create new 
1000bcb0:	75 73 65 72 2e 2e 2e 20 20 20 20 20 20 20 20 20     user...         
1000bcc0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000bcd0:	20 20 20 20 20 20 00 4c 6f 67 69 6e 00 00 00 00           .Login....
1000bce0:	50 6c 65 61 73 65 20 73 65 6c 65 63 74 20 79 6f     Please select yo
1000bcf0:	75 72 20 75 73 65 72 6e 61 6d 65 20 61 6e 64 20     ur username and 
1000bd00:	70 72 65 73 73 20 45 4e 54 45 52 2e 00 00 00 00     press ENTER.....
1000bd10:	50 6c 65 61 73 65 20 74 79 70 65 20 79 6f 75 72     Please type your
1000bd20:	20 70 61 73 73 77 6f 72 64 20 61 6e 64 20 70 72      password and pr
1000bd30:	65 73 73 20 45 4e 54 45 52 00 6f 72 20 70 72 65     ess ENTER.or pre
1000bd40:	73 73 20 45 53 43 20 74 6f 20 67 6f 20 62 61 63     ss ESC to go bac
1000bd50:	6b 2e 00 00 52 45 51 55 49 52 45 44 3a 20 25 73     k...REQUIRED: %s
1000bd60:	0a 47 4f 54 3a 20 25 73 0a 53 41 4c 54 3a 20 25     .GOT: %s.SALT: %
1000bd70:	73 0a 00 00 49 74 20 69 73 20 73 61 66 65 20 74     s...It is safe t
1000bd80:	6f 20 74 75 72 6e 20 6f 66 66 20 79 6f 75 72 20     o turn off your 
1000bd90:	50 43 00 63 61 6c 6c 00 43 3a 2f 42 61 6e 61 6e     PC.call.C:/Banan
1000bda0:	61 2f 53 79 73 74 65 6d 2f 69 6e 69 74 2e 62 61     a/System/init.ba
1000bdb0:	74 00 00 00 c6 b7 00 10 93 bd 00 10 98 bd 00 10     t...............	1000bdb4: R_386_32	.text
	1000bdb8: R_386_32	.text
	1000bdbc: R_386_32	.text
1000bdc0:	00 00 00 00 20 53 41 46 45 20 4d 4f 44 45 00        .... SAFE MODE.
