
packages/system/32/0001/system.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <beginx(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <beginx(void*)+0xd>	1000000d: R_386_PC32	begin(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <memcmp(void*, void*, unsigned long)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 10             	sub    esp,0x10
1000001d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000020:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000026:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000029:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000002c:	8d 50 ff             	lea    edx,[eax-0x1]
1000002f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000032:	85 c0                	test   eax,eax
10000034:	74 12                	je     10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000036:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000039:	8a 10                	mov    dl,BYTE PTR [eax]
1000003b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000003e:	8a 00                	mov    al,BYTE PTR [eax]
10000040:	38 c2                	cmp    dl,al
10000042:	75 04                	jne    10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000044:	b0 01                	mov    al,0x1
10000046:	eb 02                	jmp    1000004a <memcmp(void*, void*, unsigned long)+0x33>
10000048:	b0 00                	mov    al,0x0
1000004a:	84 c0                	test   al,al
1000004c:	74 08                	je     10000056 <memcmp(void*, void*, unsigned long)+0x3f>
1000004e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000051:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
10000054:	eb d3                	jmp    10000029 <memcmp(void*, void*, unsigned long)+0x12>
10000056:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000059:	8a 00                	mov    al,BYTE PTR [eax]
1000005b:	0f b6 d0             	movzx  edx,al
1000005e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000061:	8a 00                	mov    al,BYTE PTR [eax]
10000063:	0f b6 c0             	movzx  eax,al
10000066:	29 c2                	sub    edx,eax
10000068:	89 d0                	mov    eax,edx
1000006a:	c9                   	leave  
1000006b:	c3                   	ret    

1000006c <memmove>:
1000006c:	55                   	push   ebp
1000006d:	89 e5                	mov    ebp,esp
1000006f:	83 ec 10             	sub    esp,0x10
10000072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000075:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000007b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000007e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000081:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
10000084:	76 1b                	jbe    100000a1 <memmove+0x35>
10000086:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
1000008a:	74 46                	je     100000d2 <memmove+0x66>
1000008c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000008f:	8a 10                	mov    dl,BYTE PTR [eax]
10000091:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000094:	88 10                	mov    BYTE PTR [eax],dl
10000096:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000099:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
1000009c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000009f:	eb e5                	jmp    10000086 <memmove+0x1a>
100000a1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000a4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
100000a7:	73 29                	jae    100000d2 <memmove+0x66>
100000a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000ac:	48                   	dec    eax
100000ad:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
100000b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000b3:	48                   	dec    eax
100000b4:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
100000b7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000bb:	74 15                	je     100000d2 <memmove+0x66>
100000bd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000c0:	8a 10                	mov    dl,BYTE PTR [eax]
100000c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000c5:	88 10                	mov    BYTE PTR [eax],dl
100000c7:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100000ca:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
100000cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000d0:	eb e5                	jmp    100000b7 <memmove+0x4b>
100000d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d5:	c9                   	leave  
100000d6:	c3                   	ret    

100000d7 <memset>:
100000d7:	55                   	push   ebp
100000d8:	89 e5                	mov    ebp,esp
100000da:	83 ec 10             	sub    esp,0x10
100000dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100000e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000e7:	74 12                	je     100000fb <memset+0x24>
100000e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100000ec:	88 c2                	mov    dl,al
100000ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000f1:	88 10                	mov    BYTE PTR [eax],dl
100000f3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100000f6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000f9:	eb e8                	jmp    100000e3 <memset+0xc>
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	c9                   	leave  
100000ff:	c3                   	ret    

10000100 <strlen>:
10000100:	55                   	push   ebp
10000101:	89 e5                	mov    ebp,esp
10000103:	83 ec 10             	sub    esp,0x10
10000106:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000110:	8a 00                	mov    al,BYTE PTR [eax]
10000112:	84 c0                	test   al,al
10000114:	74 0c                	je     10000122 <strlen+0x22>
10000116:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000119:	40                   	inc    eax
1000011a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000011d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
10000120:	eb eb                	jmp    1000010d <strlen+0xd>
10000122:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000125:	c9                   	leave  
10000126:	c3                   	ret    

10000127 <strpbrk(char const*, char const*)>:
10000127:	55                   	push   ebp
10000128:	89 e5                	mov    ebp,esp
1000012a:	83 ec 10             	sub    esp,0x10
1000012d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000130:	8a 00                	mov    al,BYTE PTR [eax]
10000132:	84 c0                	test   al,al
10000134:	74 30                	je     10000166 <strpbrk(char const*, char const*)+0x3f>
10000136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000139:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000013c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000013f:	8a 00                	mov    al,BYTE PTR [eax]
10000141:	84 c0                	test   al,al
10000143:	74 18                	je     1000015d <strpbrk(char const*, char const*)+0x36>
10000145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000148:	8a 10                	mov    dl,BYTE PTR [eax]
1000014a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000014d:	8a 00                	mov    al,BYTE PTR [eax]
1000014f:	38 c2                	cmp    dl,al
10000151:	75 05                	jne    10000158 <strpbrk(char const*, char const*)+0x31>
10000153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000156:	eb 13                	jmp    1000016b <strpbrk(char const*, char const*)+0x44>
10000158:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
1000015b:	eb df                	jmp    1000013c <strpbrk(char const*, char const*)+0x15>
1000015d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000160:	40                   	inc    eax
10000161:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000164:	eb c7                	jmp    1000012d <strpbrk(char const*, char const*)+0x6>
10000166:	b8 00 00 00 00       	mov    eax,0x0
1000016b:	c9                   	leave  
1000016c:	c3                   	ret    

1000016d <strtok>:
1000016d:	55                   	push   ebp
1000016e:	89 e5                	mov    ebp,esp
10000170:	83 ec 10             	sub    esp,0x10
10000173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000176:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000179:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000017c:	85 c0                	test   eax,eax
1000017e:	75 18                	jne    10000198 <strtok+0x2b>
10000180:	a1 00 00 00 00       	mov    eax,ds:0x0	10000181: R_386_32	SavedPtr
10000185:	85 c0                	test   eax,eax
10000187:	75 07                	jne    10000190 <strtok+0x23>
10000189:	b8 00 00 00 00       	mov    eax,0x0
1000018e:	eb 6f                	jmp    100001ff <strtok+0x92>
10000190:	a1 00 00 00 00       	mov    eax,ds:0x0	10000191: R_386_32	SavedPtr
10000195:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000198:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000019b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000019e:	50                   	push   eax
1000019f:	e8 fc ff ff ff       	call   100001a0 <strtok+0x33>	100001a0: R_386_PC32	strpbrk(char const*, char const*)
100001a4:	83 c4 08             	add    esp,0x8
100001a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100001a8: R_386_32	SavedPtr
100001ac:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001ae: R_386_32	SavedPtr
100001b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001b5:	39 c2                	cmp    edx,eax
100001b7:	75 22                	jne    100001db <strtok+0x6e>
100001b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001bc:	8d 50 01             	lea    edx,[eax+0x1]
100001bf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100001c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100001cb:	50                   	push   eax
100001cc:	e8 fc ff ff ff       	call   100001cd <strtok+0x60>	100001cd: R_386_PC32	strpbrk(char const*, char const*)
100001d1:	83 c4 08             	add    esp,0x8
100001d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100001d5: R_386_32	SavedPtr
100001d9:	eb d1                	jmp    100001ac <strtok+0x3f>
100001db:	a1 00 00 00 00       	mov    eax,ds:0x0	100001dc: R_386_32	SavedPtr
100001e0:	85 c0                	test   eax,eax
100001e2:	74 16                	je     100001fa <strtok+0x8d>
100001e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e5: R_386_32	SavedPtr
100001e9:	8d 50 01             	lea    edx,[eax+0x1]
100001ec:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100001ee: R_386_32	SavedPtr
100001f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001f8:	eb 05                	jmp    100001ff <strtok+0x92>
100001fa:	b8 00 00 00 00       	mov    eax,0x0
100001ff:	c9                   	leave  
10000200:	c3                   	ret    

10000201 <strcpy>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	83 ec 10             	sub    esp,0x10
10000207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000020a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000020d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000210:	8a 00                	mov    al,BYTE PTR [eax]
10000212:	84 c0                	test   al,al
10000214:	74 12                	je     10000228 <strcpy+0x27>
10000216:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000219:	8a 10                	mov    dl,BYTE PTR [eax]
1000021b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000021e:	88 10                	mov    BYTE PTR [eax],dl
10000220:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000223:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10000226:	eb e5                	jmp    1000020d <strcpy+0xc>
10000228:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000022b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000022e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000231:	c9                   	leave  
10000232:	c3                   	ret    

10000233 <strncpyxx(char*, char const*, unsigned long)>:
10000233:	55                   	push   ebp
10000234:	89 e5                	mov    ebp,esp
10000236:	83 ec 10             	sub    esp,0x10
10000239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000242:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000245:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000249:	74 23                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000024b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000024e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000251:	8d 42 01             	lea    eax,[edx+0x1]
10000254:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000025a:	8d 48 01             	lea    ecx,[eax+0x1]
1000025d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
10000260:	8a 12                	mov    dl,BYTE PTR [edx]
10000262:	88 10                	mov    BYTE PTR [eax],dl
10000264:	8a 00                	mov    al,BYTE PTR [eax]
10000266:	84 c0                	test   al,al
10000268:	74 04                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000026a:	b0 01                	mov    al,0x1
1000026c:	eb 02                	jmp    10000270 <strncpyxx(char*, char const*, unsigned long)+0x3d>
1000026e:	b0 00                	mov    al,0x0
10000270:	84 c0                	test   al,al
10000272:	74 02                	je     10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000274:	eb cf                	jmp    10000245 <strncpyxx(char*, char const*, unsigned long)+0x12>
10000276:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000279:	8d 50 ff             	lea    edx,[eax-0x1]
1000027c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
1000027f:	85 c0                	test   eax,eax
10000281:	0f 95 c0             	setne  al
10000284:	84 c0                	test   al,al
10000286:	74 0b                	je     10000293 <strncpyxx(char*, char const*, unsigned long)+0x60>
10000288:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000028b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000028e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000291:	eb e3                	jmp    10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000296:	c9                   	leave  
10000297:	c3                   	ret    

10000298 <strcmp>:
10000298:	55                   	push   ebp
10000299:	89 e5                	mov    ebp,esp
1000029b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029e:	8a 10                	mov    dl,BYTE PTR [eax]
100002a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a3:	8a 00                	mov    al,BYTE PTR [eax]
100002a5:	38 c2                	cmp    dl,al
100002a7:	75 20                	jne    100002c9 <strcmp+0x31>
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	8d 50 01             	lea    edx,[eax+0x1]
100002af:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
100002b2:	8a 00                	mov    al,BYTE PTR [eax]
100002b4:	84 c0                	test   al,al
100002b6:	0f 94 c0             	sete   al
100002b9:	84 c0                	test   al,al
100002bb:	74 07                	je     100002c4 <strcmp+0x2c>
100002bd:	b8 00 00 00 00       	mov    eax,0x0
100002c2:	eb 19                	jmp    100002dd <strcmp+0x45>
100002c4:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100002c7:	eb d2                	jmp    1000029b <strcmp+0x3>
100002c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002cc:	8a 00                	mov    al,BYTE PTR [eax]
100002ce:	0f b6 d0             	movzx  edx,al
100002d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002d4:	8a 00                	mov    al,BYTE PTR [eax]
100002d6:	0f b6 c0             	movzx  eax,al
100002d9:	29 c2                	sub    edx,eax
100002db:	89 d0                	mov    eax,edx
100002dd:	5d                   	pop    ebp
100002de:	c3                   	ret    

100002df <strchr(char const*, int)>:
100002df:	55                   	push   ebp
100002e0:	89 e5                	mov    ebp,esp
100002e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e5:	8a 00                	mov    al,BYTE PTR [eax]
100002e7:	84 c0                	test   al,al
100002e9:	74 16                	je     10000301 <strchr(char const*, int)+0x22>
100002eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ee:	8a 00                	mov    al,BYTE PTR [eax]
100002f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002f3:	38 d0                	cmp    al,dl
100002f5:	75 05                	jne    100002fc <strchr(char const*, int)+0x1d>
100002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fa:	eb 0a                	jmp    10000306 <strchr(char const*, int)+0x27>
100002fc:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
100002ff:	eb e1                	jmp    100002e2 <strchr(char const*, int)+0x3>
10000301:	b8 00 00 00 00       	mov    eax,0x0
10000306:	5d                   	pop    ebp
10000307:	c3                   	ret    

10000308 <strncmp>:
10000308:	55                   	push   ebp
10000309:	89 e5                	mov    ebp,esp
1000030b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000030e:	8d 50 ff             	lea    edx,[eax-0x1]
10000311:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000314:	85 c0                	test   eax,eax
10000316:	74 12                	je     1000032a <strncmp+0x22>
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	8a 10                	mov    dl,BYTE PTR [eax]
1000031d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000320:	8a 00                	mov    al,BYTE PTR [eax]
10000322:	38 c2                	cmp    dl,al
10000324:	75 04                	jne    1000032a <strncmp+0x22>
10000326:	b0 01                	mov    al,0x1
10000328:	eb 02                	jmp    1000032c <strncmp+0x24>
1000032a:	b0 00                	mov    al,0x0
1000032c:	84 c0                	test   al,al
1000032e:	74 20                	je     10000350 <strncmp+0x48>
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8d 50 01             	lea    edx,[eax+0x1]
10000336:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
10000339:	8a 00                	mov    al,BYTE PTR [eax]
1000033b:	84 c0                	test   al,al
1000033d:	0f 94 c0             	sete   al
10000340:	84 c0                	test   al,al
10000342:	74 07                	je     1000034b <strncmp+0x43>
10000344:	b8 00 00 00 00       	mov    eax,0x0
10000349:	eb 19                	jmp    10000364 <strncmp+0x5c>
1000034b:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000034e:	eb bb                	jmp    1000030b <strncmp+0x3>
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8a 00                	mov    al,BYTE PTR [eax]
10000355:	0f b6 d0             	movzx  edx,al
10000358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000035b:	8a 00                	mov    al,BYTE PTR [eax]
1000035d:	0f b6 c0             	movzx  eax,al
10000360:	29 c2                	sub    edx,eax
10000362:	89 d0                	mov    eax,edx
10000364:	5d                   	pop    ebp
10000365:	c3                   	ret    

10000366 <strcat>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 10             	sub    esp,0x10
1000036c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000372:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000375:	8d 50 01             	lea    edx,[eax+0x1]
10000378:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000037b:	8a 00                	mov    al,BYTE PTR [eax]
1000037d:	84 c0                	test   al,al
1000037f:	0f 95 c0             	setne  al
10000382:	84 c0                	test   al,al
10000384:	74 02                	je     10000388 <strcat+0x22>
10000386:	eb ea                	jmp    10000372 <strcat+0xc>
10000388:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
1000038b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000038e:	8d 42 01             	lea    eax,[edx+0x1]
10000391:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000394:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000397:	8d 48 01             	lea    ecx,[eax+0x1]
1000039a:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
1000039d:	8a 12                	mov    dl,BYTE PTR [edx]
1000039f:	88 10                	mov    BYTE PTR [eax],dl
100003a1:	8a 00                	mov    al,BYTE PTR [eax]
100003a3:	84 c0                	test   al,al
100003a5:	0f 95 c0             	setne  al
100003a8:	84 c0                	test   al,al
100003aa:	74 02                	je     100003ae <strcat+0x48>
100003ac:	eb dd                	jmp    1000038b <strcat+0x25>
100003ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b1:	c9                   	leave  
100003b2:	c3                   	ret    

100003b3 <strncat(char*, char const*, unsigned long)>:
100003b3:	55                   	push   ebp
100003b4:	89 e5                	mov    ebp,esp
100003b6:	83 ec 10             	sub    esp,0x10
100003b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100003bd:	74 5c                	je     1000041b <strncat(char*, char const*, unsigned long)+0x68>
100003bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003c8:	8d 50 01             	lea    edx,[eax+0x1]
100003cb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100003ce:	8a 00                	mov    al,BYTE PTR [eax]
100003d0:	84 c0                	test   al,al
100003d2:	0f 95 c0             	setne  al
100003d5:	84 c0                	test   al,al
100003d7:	74 02                	je     100003db <strncat(char*, char const*, unsigned long)+0x28>
100003d9:	eb ea                	jmp    100003c5 <strncat(char*, char const*, unsigned long)+0x12>
100003db:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100003de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e1:	8d 42 01             	lea    eax,[edx+0x1]
100003e4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100003e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003ea:	8d 48 01             	lea    ecx,[eax+0x1]
100003ed:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
100003f0:	8a 12                	mov    dl,BYTE PTR [edx]
100003f2:	88 10                	mov    BYTE PTR [eax],dl
100003f4:	8a 00                	mov    al,BYTE PTR [eax]
100003f6:	84 c0                	test   al,al
100003f8:	74 0d                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
100003fa:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100003fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000401:	74 04                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
10000403:	b0 01                	mov    al,0x1
10000405:	eb 02                	jmp    10000409 <strncat(char*, char const*, unsigned long)+0x56>
10000407:	b0 00                	mov    al,0x0
10000409:	84 c0                	test   al,al
1000040b:	74 02                	je     1000040f <strncat(char*, char const*, unsigned long)+0x5c>
1000040d:	eb cf                	jmp    100003de <strncat(char*, char const*, unsigned long)+0x2b>
1000040f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000413:	75 06                	jne    1000041b <strncat(char*, char const*, unsigned long)+0x68>
10000415:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000418:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000041b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041e:	c9                   	leave  
1000041f:	c3                   	ret    

10000420 <strstr(char*, char*)>:
10000420:	55                   	push   ebp
10000421:	89 e5                	mov    ebp,esp
10000423:	83 ec 10             	sub    esp,0x10
10000426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000429:	e8 fc ff ff ff       	call   1000042a <strstr(char*, char*)+0xa>	1000042a: R_386_PC32	strlen
1000042e:	83 c4 04             	add    esp,0x4
10000431:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000434:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
10000438:	75 05                	jne    1000043f <strstr(char*, char*)+0x1f>
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	eb 3f                	jmp    1000047e <strstr(char*, char*)+0x5e>
1000043f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000442:	50                   	push   eax
10000443:	e8 fc ff ff ff       	call   10000444 <strstr(char*, char*)+0x24>	10000444: R_386_PC32	strlen
10000448:	83 c4 04             	add    esp,0x4
1000044b:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
1000044e:	77 29                	ja     10000479 <strstr(char*, char*)+0x59>
10000450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000453:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
10000456:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000459:	50                   	push   eax
1000045a:	e8 fc ff ff ff       	call   1000045b <strstr(char*, char*)+0x3b>	1000045b: R_386_PC32	memcmp(void*, void*, unsigned long)
1000045f:	83 c4 0c             	add    esp,0xc
10000462:	85 c0                	test   eax,eax
10000464:	0f 94 c0             	sete   al
10000467:	84 c0                	test   al,al
10000469:	74 05                	je     10000470 <strstr(char*, char*)+0x50>
1000046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000046e:	eb 0e                	jmp    1000047e <strstr(char*, char*)+0x5e>
10000470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000473:	40                   	inc    eax
10000474:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000477:	eb c6                	jmp    1000043f <strstr(char*, char*)+0x1f>
10000479:	b8 00 00 00 00       	mov    eax,0x0
1000047e:	c9                   	leave  
1000047f:	c3                   	ret    

10000480 <rmtree(char*)>:
10000480:	55                   	push   ebp
10000481:	89 e5                	mov    ebp,esp
10000483:	53                   	push   ebx
10000484:	81 ec 64 02 00 00    	sub    esp,0x264
1000048a:	68 2c 01 00 00       	push   0x12c
1000048f:	6a 00                	push   0x0
10000491:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000497:	50                   	push   eax
10000498:	e8 fc ff ff ff       	call   10000499 <rmtree(char*)+0x19>	10000499: R_386_PC32	memset
1000049d:	83 c4 0c             	add    esp,0xc
100004a0:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
100004a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100004a9:	83 ec 0c             	sub    esp,0xc
100004ac:	68 14 01 00 00       	push   0x114
100004b1:	e8 fc ff ff ff       	call   100004b2 <rmtree(char*)+0x32>	100004b2: R_386_PC32	operator new(unsigned long)
100004b6:	83 c4 10             	add    esp,0x10
100004b9:	89 c3                	mov    ebx,eax
100004bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
100004c0:	8b 00                	mov    eax,DWORD PTR [eax]
100004c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
100004c5:	83 ec 04             	sub    esp,0x4
100004c8:	50                   	push   eax
100004c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004cc:	53                   	push   ebx
100004cd:	e8 fc ff ff ff       	call   100004ce <rmtree(char*)+0x4e>	100004ce: R_386_PC32	Directory::Directory(char const*, Process*)
100004d2:	83 c4 10             	add    esp,0x10
100004d5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
100004d8:	83 ec 0c             	sub    esp,0xc
100004db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004de:	e8 fc ff ff ff       	call   100004df <rmtree(char*)+0x5f>	100004df: R_386_PC32	Directory::open()
100004e3:	83 c4 10             	add    esp,0x10
100004e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004e9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100004ed:	74 24                	je     10000513 <rmtree(char*)+0x93>
100004ef:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004f3:	0f 84 8b 01 00 00    	je     10000684 <rmtree(char*)+0x204>
100004f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004fc:	8b 00                	mov    eax,DWORD PTR [eax]
100004fe:	83 c0 08             	add    eax,0x8
10000501:	8b 00                	mov    eax,DWORD PTR [eax]
10000503:	83 ec 0c             	sub    esp,0xc
10000506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000509:	ff d0                	call   eax
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	e9 72 01 00 00       	jmp    10000685 <rmtree(char*)+0x205>
10000513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000516:	8b 00                	mov    eax,DWORD PTR [eax]
10000518:	83 c0 0c             	add    eax,0xc
1000051b:	8b 00                	mov    eax,DWORD PTR [eax]
1000051d:	83 ec 0c             	sub    esp,0xc
10000520:	8d 95 a4 fd ff ff    	lea    edx,[ebp-0x25c]
10000526:	52                   	push   edx
10000527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000052a:	6a 00                	push   0x0
1000052c:	68 10 01 00 00       	push   0x110
10000531:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000534:	ff d0                	call   eax
10000536:	83 c4 20             	add    esp,0x20
10000539:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
1000053c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000540:	0f 85 04 01 00 00    	jne    1000064a <rmtree(char*)+0x1ca>
10000546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000549:	83 c0 10             	add    eax,0x10
1000054c:	83 ec 08             	sub    esp,0x8
1000054f:	68 10 a5 00 10       	push   0x1000a510	10000550: R_386_32	.text
10000554:	50                   	push   eax
10000555:	e8 fc ff ff ff       	call   10000556 <rmtree(char*)+0xd6>	10000556: R_386_PC32	strcmp
1000055a:	83 c4 10             	add    esp,0x10
1000055d:	85 c0                	test   eax,eax
1000055f:	74 b2                	je     10000513 <rmtree(char*)+0x93>
10000561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000564:	83 c0 10             	add    eax,0x10
10000567:	83 ec 08             	sub    esp,0x8
1000056a:	68 12 a5 00 10       	push   0x1000a512	1000056b: R_386_32	.text
1000056f:	50                   	push   eax
10000570:	e8 fc ff ff ff       	call   10000571 <rmtree(char*)+0xf1>	10000571: R_386_PC32	strcmp
10000575:	83 c4 10             	add    esp,0x10
10000578:	85 c0                	test   eax,eax
1000057a:	74 97                	je     10000513 <rmtree(char*)+0x93>
1000057c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000057f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000582:	83 e0 02             	and    eax,0x2
10000585:	85 c0                	test   eax,eax
10000587:	74 17                	je     100005a0 <rmtree(char*)+0x120>
10000589:	83 ec 0c             	sub    esp,0xc
1000058c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000592:	50                   	push   eax
10000593:	e8 fc ff ff ff       	call   10000594 <rmtree(char*)+0x114>	10000594: R_386_PC32	rmtree(char*)
10000598:	83 c4 10             	add    esp,0x10
1000059b:	e9 73 ff ff ff       	jmp    10000513 <rmtree(char*)+0x93>
100005a0:	83 ec 08             	sub    esp,0x8
100005a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005a6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005ac:	50                   	push   eax
100005ad:	e8 fc ff ff ff       	call   100005ae <rmtree(char*)+0x12e>	100005ae: R_386_PC32	strcpy
100005b2:	83 c4 10             	add    esp,0x10
100005b5:	83 ec 08             	sub    esp,0x8
100005b8:	68 15 a5 00 10       	push   0x1000a515	100005b9: R_386_32	.text
100005bd:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005c3:	50                   	push   eax
100005c4:	e8 fc ff ff ff       	call   100005c5 <rmtree(char*)+0x145>	100005c5: R_386_PC32	strcat
100005c9:	83 c4 10             	add    esp,0x10
100005cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100005cf:	83 c0 10             	add    eax,0x10
100005d2:	83 ec 08             	sub    esp,0x8
100005d5:	50                   	push   eax
100005d6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005dc:	50                   	push   eax
100005dd:	e8 fc ff ff ff       	call   100005de <rmtree(char*)+0x15e>	100005de: R_386_PC32	strcat
100005e2:	83 c4 10             	add    esp,0x10
100005e5:	83 ec 0c             	sub    esp,0xc
100005e8:	68 14 01 00 00       	push   0x114
100005ed:	e8 fc ff ff ff       	call   100005ee <rmtree(char*)+0x16e>	100005ee: R_386_PC32	operator new(unsigned long)
100005f2:	83 c4 10             	add    esp,0x10
100005f5:	89 c3                	mov    ebx,eax
100005f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
100005fc:	8b 00                	mov    eax,DWORD PTR [eax]
100005fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
10000601:	83 ec 04             	sub    esp,0x4
10000604:	50                   	push   eax
10000605:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
1000060b:	50                   	push   eax
1000060c:	53                   	push   ebx
1000060d:	e8 fc ff ff ff       	call   1000060e <rmtree(char*)+0x18e>	1000060e: R_386_PC32	File::File(char const*, Process*)
10000612:	83 c4 10             	add    esp,0x10
10000615:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000618:	83 ec 0c             	sub    esp,0xc
1000061b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000061e:	e8 fc ff ff ff       	call   1000061f <rmtree(char*)+0x19f>	1000061f: R_386_PC32	File::unlink()
10000623:	83 c4 10             	add    esp,0x10
10000626:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000062a:	0f 84 e3 fe ff ff    	je     10000513 <rmtree(char*)+0x93>
10000630:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000633:	8b 00                	mov    eax,DWORD PTR [eax]
10000635:	83 c0 08             	add    eax,0x8
10000638:	8b 00                	mov    eax,DWORD PTR [eax]
1000063a:	83 ec 0c             	sub    esp,0xc
1000063d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000640:	ff d0                	call   eax
10000642:	83 c4 10             	add    esp,0x10
10000645:	e9 c9 fe ff ff       	jmp    10000513 <rmtree(char*)+0x93>
1000064a:	90                   	nop
1000064b:	83 ec 0c             	sub    esp,0xc
1000064e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000651:	e8 fc ff ff ff       	call   10000652 <rmtree(char*)+0x1d2>	10000652: R_386_PC32	Directory::close()
10000656:	83 c4 10             	add    esp,0x10
10000659:	83 ec 0c             	sub    esp,0xc
1000065c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000065f:	e8 fc ff ff ff       	call   10000660 <rmtree(char*)+0x1e0>	10000660: R_386_PC32	Directory::unlink()
10000664:	83 c4 10             	add    esp,0x10
10000667:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000066b:	74 18                	je     10000685 <rmtree(char*)+0x205>
1000066d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000670:	8b 00                	mov    eax,DWORD PTR [eax]
10000672:	83 c0 08             	add    eax,0x8
10000675:	8b 00                	mov    eax,DWORD PTR [eax]
10000677:	83 ec 0c             	sub    esp,0xc
1000067a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000067d:	ff d0                	call   eax
1000067f:	83 c4 10             	add    esp,0x10
10000682:	eb 01                	jmp    10000685 <rmtree(char*)+0x205>
10000684:	90                   	nop
10000685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000688:	c9                   	leave  
10000689:	c3                   	ret    

1000068a <mkdir(char const*, int)>:
1000068a:	55                   	push   ebp
1000068b:	89 e5                	mov    ebp,esp
1000068d:	53                   	push   ebx
1000068e:	83 ec 14             	sub    esp,0x14
10000691:	83 ec 0c             	sub    esp,0xc
10000694:	68 14 01 00 00       	push   0x114
10000699:	e8 fc ff ff ff       	call   1000069a <mkdir(char const*, int)+0x10>	1000069a: R_386_PC32	operator new(unsigned long)
1000069e:	83 c4 10             	add    esp,0x10
100006a1:	89 c3                	mov    ebx,eax
100006a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100006a4: R_386_32	kernelProcess
100006a8:	83 ec 04             	sub    esp,0x4
100006ab:	50                   	push   eax
100006ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006af:	53                   	push   ebx
100006b0:	e8 fc ff ff ff       	call   100006b1 <mkdir(char const*, int)+0x27>	100006b1: R_386_PC32	Directory::Directory(char const*, Process*)
100006b5:	83 c4 10             	add    esp,0x10
100006b8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100006bb:	83 ec 0c             	sub    esp,0xc
100006be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006c1:	e8 fc ff ff ff       	call   100006c2 <mkdir(char const*, int)+0x38>	100006c2: R_386_PC32	Directory::create()
100006c6:	83 c4 10             	add    esp,0x10
100006c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100006cd:	74 15                	je     100006e4 <mkdir(char const*, int)+0x5a>
100006cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100006d2:	8b 00                	mov    eax,DWORD PTR [eax]
100006d4:	83 c0 08             	add    eax,0x8
100006d7:	8b 00                	mov    eax,DWORD PTR [eax]
100006d9:	83 ec 0c             	sub    esp,0xc
100006dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006df:	ff d0                	call   eax
100006e1:	83 c4 10             	add    esp,0x10
100006e4:	b8 00 00 00 00       	mov    eax,0x0
100006e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100006ec:	c9                   	leave  
100006ed:	c3                   	ret    

100006ee <copytree(char*, char*)>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	53                   	push   ebx
100006f2:	81 ec 54 01 00 00    	sub    esp,0x154
100006f8:	83 ec 0c             	sub    esp,0xc
100006fb:	68 90 01 00 00       	push   0x190
10000700:	e8 fc ff ff ff       	call   10000701 <copytree(char*, char*)+0x13>	10000701: R_386_PC32	malloc
10000705:	83 c4 10             	add    esp,0x10
10000708:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000070b:	83 ec 0c             	sub    esp,0xc
1000070e:	68 90 01 00 00       	push   0x190
10000713:	e8 fc ff ff ff       	call   10000714 <copytree(char*, char*)+0x26>	10000714: R_386_PC32	malloc
10000718:	83 c4 10             	add    esp,0x10
1000071b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000071e:	83 ec 04             	sub    esp,0x4
10000721:	68 90 01 00 00       	push   0x190
10000726:	6a 00                	push   0x0
10000728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000072b:	e8 fc ff ff ff       	call   1000072c <copytree(char*, char*)+0x3e>	1000072c: R_386_PC32	memset
10000730:	83 c4 10             	add    esp,0x10
10000733:	83 ec 04             	sub    esp,0x4
10000736:	68 90 01 00 00       	push   0x190
1000073b:	6a 00                	push   0x0
1000073d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000740:	e8 fc ff ff ff       	call   10000741 <copytree(char*, char*)+0x53>	10000741: R_386_PC32	memset
10000745:	83 c4 10             	add    esp,0x10
10000748:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000074e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000751:	83 ec 0c             	sub    esp,0xc
10000754:	68 14 01 00 00       	push   0x114
10000759:	e8 fc ff ff ff       	call   1000075a <copytree(char*, char*)+0x6c>	1000075a: R_386_PC32	operator new(unsigned long)
1000075e:	83 c4 10             	add    esp,0x10
10000761:	89 c3                	mov    ebx,eax
10000763:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000768:	8b 00                	mov    eax,DWORD PTR [eax]
1000076a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
1000076d:	83 ec 04             	sub    esp,0x4
10000770:	50                   	push   eax
10000771:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000774:	53                   	push   ebx
10000775:	e8 fc ff ff ff       	call   10000776 <copytree(char*, char*)+0x88>	10000776: R_386_PC32	Directory::Directory(char const*, Process*)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000780:	83 ec 0c             	sub    esp,0xc
10000783:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000786:	e8 fc ff ff ff       	call   10000787 <copytree(char*, char*)+0x99>	10000787: R_386_PC32	Directory::open()
1000078b:	83 c4 10             	add    esp,0x10
1000078e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000791:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10000795:	74 34                	je     100007cb <copytree(char*, char*)+0xdd>
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	68 17 a5 00 10       	push   0x1000a517	1000079b: R_386_32	.text
1000079f:	e8 fc ff ff ff       	call   100007a0 <copytree(char*, char*)+0xb2>	100007a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100007a4:	83 c4 10             	add    esp,0x10
100007a7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
100007ab:	0f 84 90 03 00 00    	je     10000b41 <copytree(char*, char*)+0x453>
100007b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007b4:	8b 00                	mov    eax,DWORD PTR [eax]
100007b6:	83 c0 08             	add    eax,0x8
100007b9:	8b 00                	mov    eax,DWORD PTR [eax]
100007bb:	83 ec 0c             	sub    esp,0xc
100007be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007c1:	ff d0                	call   eax
100007c3:	83 c4 10             	add    esp,0x10
100007c6:	e9 76 03 00 00       	jmp    10000b41 <copytree(char*, char*)+0x453>
100007cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007ce:	8b 00                	mov    eax,DWORD PTR [eax]
100007d0:	83 c0 0c             	add    eax,0xc
100007d3:	8b 00                	mov    eax,DWORD PTR [eax]
100007d5:	83 ec 0c             	sub    esp,0xc
100007d8:	8d 95 b8 fe ff ff    	lea    edx,[ebp-0x148]
100007de:	52                   	push   edx
100007df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100007e2:	6a 00                	push   0x0
100007e4:	68 10 01 00 00       	push   0x110
100007e9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007ec:	ff d0                	call   eax
100007ee:	83 c4 20             	add    esp,0x20
100007f1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007f4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100007f8:	0f 85 fb 02 00 00    	jne    10000af9 <copytree(char*, char*)+0x40b>
100007fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000801:	83 c0 10             	add    eax,0x10
10000804:	83 ec 08             	sub    esp,0x8
10000807:	68 10 a5 00 10       	push   0x1000a510	10000808: R_386_32	.text
1000080c:	50                   	push   eax
1000080d:	e8 fc ff ff ff       	call   1000080e <copytree(char*, char*)+0x120>	1000080e: R_386_PC32	strcmp
10000812:	83 c4 10             	add    esp,0x10
10000815:	85 c0                	test   eax,eax
10000817:	74 b2                	je     100007cb <copytree(char*, char*)+0xdd>
10000819:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000081c:	83 c0 10             	add    eax,0x10
1000081f:	83 ec 08             	sub    esp,0x8
10000822:	68 12 a5 00 10       	push   0x1000a512	10000823: R_386_32	.text
10000827:	50                   	push   eax
10000828:	e8 fc ff ff ff       	call   10000829 <copytree(char*, char*)+0x13b>	10000829: R_386_PC32	strcmp
1000082d:	83 c4 10             	add    esp,0x10
10000830:	85 c0                	test   eax,eax
10000832:	74 97                	je     100007cb <copytree(char*, char*)+0xdd>
10000834:	83 ec 08             	sub    esp,0x8
10000837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000083d:	e8 fc ff ff ff       	call   1000083e <copytree(char*, char*)+0x150>	1000083e: R_386_PC32	strcpy
10000842:	83 c4 10             	add    esp,0x10
10000845:	83 ec 08             	sub    esp,0x8
10000848:	68 15 a5 00 10       	push   0x1000a515	10000849: R_386_32	.text
1000084d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000850:	e8 fc ff ff ff       	call   10000851 <copytree(char*, char*)+0x163>	10000851: R_386_PC32	strcat
10000855:	83 c4 10             	add    esp,0x10
10000858:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000085b:	83 c0 10             	add    eax,0x10
1000085e:	83 ec 08             	sub    esp,0x8
10000861:	50                   	push   eax
10000862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000865:	e8 fc ff ff ff       	call   10000866 <copytree(char*, char*)+0x178>	10000866: R_386_PC32	strcat
1000086a:	83 c4 10             	add    esp,0x10
1000086d:	83 ec 08             	sub    esp,0x8
10000870:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000873:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000876:	e8 fc ff ff ff       	call   10000877 <copytree(char*, char*)+0x189>	10000877: R_386_PC32	strcpy
1000087b:	83 c4 10             	add    esp,0x10
1000087e:	83 ec 08             	sub    esp,0x8
10000881:	68 15 a5 00 10       	push   0x1000a515	10000882: R_386_32	.text
10000886:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000889:	e8 fc ff ff ff       	call   1000088a <copytree(char*, char*)+0x19c>	1000088a: R_386_PC32	strcat
1000088e:	83 c4 10             	add    esp,0x10
10000891:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000894:	83 c0 10             	add    eax,0x10
10000897:	83 ec 08             	sub    esp,0x8
1000089a:	50                   	push   eax
1000089b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000089e:	e8 fc ff ff ff       	call   1000089f <copytree(char*, char*)+0x1b1>	1000089f: R_386_PC32	strcat
100008a3:	83 c4 10             	add    esp,0x10
100008a6:	83 ec 04             	sub    esp,0x4
100008a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100008af:	68 31 a5 00 10       	push   0x1000a531	100008b0: R_386_32	.text
100008b4:	e8 fc ff ff ff       	call   100008b5 <copytree(char*, char*)+0x1c7>	100008b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100008b9:	83 c4 10             	add    esp,0x10
100008bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100008bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100008c2:	83 e0 02             	and    eax,0x2
100008c5:	85 c0                	test   eax,eax
100008c7:	74 47                	je     10000910 <copytree(char*, char*)+0x222>
100008c9:	83 ec 08             	sub    esp,0x8
100008cc:	68 c0 01 00 00       	push   0x1c0
100008d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008d4:	e8 fc ff ff ff       	call   100008d5 <copytree(char*, char*)+0x1e7>	100008d5: R_386_PC32	mkdir(char const*, int)
100008d9:	83 c4 10             	add    esp,0x10
100008dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100008df:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100008e3:	74 15                	je     100008fa <copytree(char*, char*)+0x20c>
100008e5:	83 ec 0c             	sub    esp,0xc
100008e8:	68 3b a5 00 10       	push   0x1000a53b	100008e9: R_386_32	.text
100008ed:	e8 fc ff ff ff       	call   100008ee <copytree(char*, char*)+0x200>	100008ee: R_386_PC32	KePanic(char const*)
100008f2:	83 c4 10             	add    esp,0x10
100008f5:	e9 d1 fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
100008fa:	83 ec 08             	sub    esp,0x8
100008fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000903:	e8 fc ff ff ff       	call   10000904 <copytree(char*, char*)+0x216>	10000904: R_386_PC32	copytree(char*, char*)
10000908:	83 c4 10             	add    esp,0x10
1000090b:	e9 bb fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000910:	83 ec 0c             	sub    esp,0xc
10000913:	68 14 01 00 00       	push   0x114
10000918:	e8 fc ff ff ff       	call   10000919 <copytree(char*, char*)+0x22b>	10000919: R_386_PC32	operator new(unsigned long)
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 c3                	mov    ebx,eax
10000922:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000927:	8b 00                	mov    eax,DWORD PTR [eax]
10000929:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
1000092c:	83 ec 04             	sub    esp,0x4
1000092f:	50                   	push   eax
10000930:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000933:	53                   	push   ebx
10000934:	e8 fc ff ff ff       	call   10000935 <copytree(char*, char*)+0x247>	10000935: R_386_PC32	File::File(char const*, Process*)
10000939:	83 c4 10             	add    esp,0x10
1000093c:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000093f:	83 ec 08             	sub    esp,0x8
10000942:	6a 01                	push   0x1
10000944:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000947:	e8 fc ff ff ff       	call   10000948 <copytree(char*, char*)+0x25a>	10000948: R_386_PC32	File::open(FileOpenMode)
1000094c:	83 c4 10             	add    esp,0x10
1000094f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000953:	75 15                	jne    1000096a <copytree(char*, char*)+0x27c>
10000955:	83 ec 0c             	sub    esp,0xc
10000958:	68 4c a5 00 10       	push   0x1000a54c	10000959: R_386_32	.text
1000095d:	e8 fc ff ff ff       	call   1000095e <copytree(char*, char*)+0x270>	1000095e: R_386_PC32	KePanic(char const*)
10000962:	83 c4 10             	add    esp,0x10
10000965:	e9 8a 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
1000096a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000096e:	0f 84 57 fe ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000974:	83 ec 0c             	sub    esp,0xc
10000977:	68 14 01 00 00       	push   0x114
1000097c:	e8 fc ff ff ff       	call   1000097d <copytree(char*, char*)+0x28f>	1000097d: R_386_PC32	operator new(unsigned long)
10000981:	83 c4 10             	add    esp,0x10
10000984:	89 c3                	mov    ebx,eax
10000986:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000098b:	8b 00                	mov    eax,DWORD PTR [eax]
1000098d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
10000990:	83 ec 04             	sub    esp,0x4
10000993:	50                   	push   eax
10000994:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000997:	53                   	push   ebx
10000998:	e8 fc ff ff ff       	call   10000999 <copytree(char*, char*)+0x2ab>	10000999: R_386_PC32	File::File(char const*, Process*)
1000099d:	83 c4 10             	add    esp,0x10
100009a0:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
100009a3:	83 ec 08             	sub    esp,0x8
100009a6:	6a 12                	push   0x12
100009a8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009ab:	e8 fc ff ff ff       	call   100009ac <copytree(char*, char*)+0x2be>	100009ac: R_386_PC32	File::open(FileOpenMode)
100009b0:	83 c4 10             	add    esp,0x10
100009b3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
100009b7:	75 23                	jne    100009dc <copytree(char*, char*)+0x2ee>
100009b9:	83 ec 0c             	sub    esp,0xc
100009bc:	68 4c a5 00 10       	push   0x1000a54c	100009bd: R_386_32	.text
100009c1:	e8 fc ff ff ff       	call   100009c2 <copytree(char*, char*)+0x2d4>	100009c2: R_386_PC32	KePanic(char const*)
100009c6:	83 c4 10             	add    esp,0x10
100009c9:	83 ec 0c             	sub    esp,0xc
100009cc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009cf:	e8 fc ff ff ff       	call   100009d0 <copytree(char*, char*)+0x2e2>	100009d0: R_386_PC32	File::close()
100009d4:	83 c4 10             	add    esp,0x10
100009d7:	e9 18 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
100009dc:	83 ec 0c             	sub    esp,0xc
100009df:	68 00 10 00 00       	push   0x1000
100009e4:	e8 fc ff ff ff       	call   100009e5 <copytree(char*, char*)+0x2f7>	100009e5: R_386_PC32	malloc
100009e9:	83 c4 10             	add    esp,0x10
100009ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100009ef:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
100009f3:	75 31                	jne    10000a26 <copytree(char*, char*)+0x338>
100009f5:	83 ec 0c             	sub    esp,0xc
100009f8:	68 5b a5 00 10       	push   0x1000a55b	100009f9: R_386_32	.text
100009fd:	e8 fc ff ff ff       	call   100009fe <copytree(char*, char*)+0x310>	100009fe: R_386_PC32	KePanic(char const*)
10000a02:	83 c4 10             	add    esp,0x10
10000a05:	83 ec 0c             	sub    esp,0xc
10000a08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000a0b:	e8 fc ff ff ff       	call   10000a0c <copytree(char*, char*)+0x31e>	10000a0c: R_386_PC32	free
10000a10:	83 c4 10             	add    esp,0x10
10000a13:	83 ec 0c             	sub    esp,0xc
10000a16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000a19:	e8 fc ff ff ff       	call   10000a1a <copytree(char*, char*)+0x32c>	10000a1a: R_386_PC32	free
10000a1e:	83 c4 10             	add    esp,0x10
10000a21:	e9 1c 01 00 00       	jmp    10000b42 <copytree(char*, char*)+0x454>
10000a26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000a29:	8b 00                	mov    eax,DWORD PTR [eax]
10000a2b:	83 c0 0c             	add    eax,0xc
10000a2e:	8b 00                	mov    eax,DWORD PTR [eax]
10000a30:	83 ec 0c             	sub    esp,0xc
10000a33:	8d 95 b4 fe ff ff    	lea    edx,[ebp-0x14c]
10000a39:	52                   	push   edx
10000a3a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a3d:	6a 00                	push   0x0
10000a3f:	68 00 10 00 00       	push   0x1000
10000a44:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000a47:	ff d0                	call   eax
10000a49:	83 c4 20             	add    esp,0x20
10000a4c:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a4f:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000a53:	75 37                	jne    10000a8c <copytree(char*, char*)+0x39e>
10000a55:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a58:	8b 00                	mov    eax,DWORD PTR [eax]
10000a5a:	83 c0 10             	add    eax,0x10
10000a5d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a5f:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a65:	99                   	cdq    
10000a66:	83 ec 0c             	sub    esp,0xc
10000a69:	8d 9d b0 fe ff ff    	lea    ebx,[ebp-0x150]
10000a6f:	53                   	push   ebx
10000a70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a73:	52                   	push   edx
10000a74:	50                   	push   eax
10000a75:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a78:	ff d1                	call   ecx
10000a7a:	83 c4 20             	add    esp,0x20
10000a7d:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a83:	3d 00 10 00 00       	cmp    eax,0x1000
10000a88:	75 05                	jne    10000a8f <copytree(char*, char*)+0x3a1>
10000a8a:	eb 9a                	jmp    10000a26 <copytree(char*, char*)+0x338>
10000a8c:	90                   	nop
10000a8d:	eb 01                	jmp    10000a90 <copytree(char*, char*)+0x3a2>
10000a8f:	90                   	nop
10000a90:	83 ec 0c             	sub    esp,0xc
10000a93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a96:	e8 fc ff ff ff       	call   10000a97 <copytree(char*, char*)+0x3a9>	10000a97: R_386_PC32	free
10000a9b:	83 c4 10             	add    esp,0x10
10000a9e:	83 ec 0c             	sub    esp,0xc
10000aa1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000aa4:	e8 fc ff ff ff       	call   10000aa5 <copytree(char*, char*)+0x3b7>	10000aa5: R_386_PC32	File::close()
10000aa9:	83 c4 10             	add    esp,0x10
10000aac:	83 ec 0c             	sub    esp,0xc
10000aaf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <copytree(char*, char*)+0x3c5>	10000ab3: R_386_PC32	File::close()
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000abe:	74 15                	je     10000ad5 <copytree(char*, char*)+0x3e7>
10000ac0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000ac3:	8b 00                	mov    eax,DWORD PTR [eax]
10000ac5:	83 c0 08             	add    eax,0x8
10000ac8:	8b 00                	mov    eax,DWORD PTR [eax]
10000aca:	83 ec 0c             	sub    esp,0xc
10000acd:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ad0:	ff d0                	call   eax
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10000ad9:	0f 84 ec fc ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000adf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000ae2:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae4:	83 c0 08             	add    eax,0x8
10000ae7:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae9:	83 ec 0c             	sub    esp,0xc
10000aec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000aef:	ff d0                	call   eax
10000af1:	83 c4 10             	add    esp,0x10
10000af4:	e9 d2 fc ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000af9:	90                   	nop
10000afa:	83 ec 0c             	sub    esp,0xc
10000afd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000b00:	e8 fc ff ff ff       	call   10000b01 <copytree(char*, char*)+0x413>	10000b01: R_386_PC32	free
10000b05:	83 c4 10             	add    esp,0x10
10000b08:	83 ec 0c             	sub    esp,0xc
10000b0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000b0e:	e8 fc ff ff ff       	call   10000b0f <copytree(char*, char*)+0x421>	10000b0f: R_386_PC32	free
10000b13:	83 c4 10             	add    esp,0x10
10000b16:	83 ec 0c             	sub    esp,0xc
10000b19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b1c:	e8 fc ff ff ff       	call   10000b1d <copytree(char*, char*)+0x42f>	10000b1d: R_386_PC32	Directory::close()
10000b21:	83 c4 10             	add    esp,0x10
10000b24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000b28:	74 18                	je     10000b42 <copytree(char*, char*)+0x454>
10000b2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000b2d:	8b 00                	mov    eax,DWORD PTR [eax]
10000b2f:	83 c0 08             	add    eax,0x8
10000b32:	8b 00                	mov    eax,DWORD PTR [eax]
10000b34:	83 ec 0c             	sub    esp,0xc
10000b37:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b3a:	ff d0                	call   eax
10000b3c:	83 c4 10             	add    esp,0x10
10000b3f:	eb 01                	jmp    10000b42 <copytree(char*, char*)+0x454>
10000b41:	90                   	nop
10000b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000b45:	c9                   	leave  
10000b46:	c3                   	ret    

10000b47 <backupTree(char*, unsigned short)>:
10000b47:	55                   	push   ebp
10000b48:	89 e5                	mov    ebp,esp
10000b4a:	57                   	push   edi
10000b4b:	56                   	push   esi
10000b4c:	53                   	push   ebx
10000b4d:	81 ec 8c 12 00 00    	sub    esp,0x128c
10000b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000b56:	66 89 85 74 ed ff ff 	mov    WORD PTR [ebp-0x128c],ax
10000b5d:	83 ec 0c             	sub    esp,0xc
10000b60:	68 90 01 00 00       	push   0x190
10000b65:	e8 fc ff ff ff       	call   10000b66 <backupTree(char*, unsigned short)+0x1f>	10000b66: R_386_PC32	malloc
10000b6a:	83 c4 10             	add    esp,0x10
10000b6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000b70:	83 ec 04             	sub    esp,0x4
10000b73:	68 90 01 00 00       	push   0x190
10000b78:	6a 00                	push   0x0
10000b7a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000b7d:	e8 fc ff ff ff       	call   10000b7e <backupTree(char*, unsigned short)+0x37>	10000b7e: R_386_PC32	memset
10000b82:	83 c4 10             	add    esp,0x10
10000b85:	8d 85 a8 fe ff ff    	lea    eax,[ebp-0x158]
10000b8b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000b8e:	83 ec 0c             	sub    esp,0xc
10000b91:	68 14 01 00 00       	push   0x114
10000b96:	e8 fc ff ff ff       	call   10000b97 <backupTree(char*, unsigned short)+0x50>	10000b97: R_386_PC32	operator new(unsigned long)
10000b9b:	83 c4 10             	add    esp,0x10
10000b9e:	89 c3                	mov    ebx,eax
10000ba0:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ba5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
10000baa:	83 ec 04             	sub    esp,0x4
10000bad:	50                   	push   eax
10000bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bb1:	53                   	push   ebx
10000bb2:	e8 fc ff ff ff       	call   10000bb3 <backupTree(char*, unsigned short)+0x6c>	10000bb3: R_386_PC32	Directory::Directory(char const*, Process*)
10000bb7:	83 c4 10             	add    esp,0x10
10000bba:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000bbd:	83 ec 0c             	sub    esp,0xc
10000bc0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bc3:	e8 fc ff ff ff       	call   10000bc4 <backupTree(char*, unsigned short)+0x7d>	10000bc4: R_386_PC32	Directory::open()
10000bc8:	83 c4 10             	add    esp,0x10
10000bcb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000bce:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000bd2:	74 34                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000bd4:	83 ec 0c             	sub    esp,0xc
10000bd7:	68 17 a5 00 10       	push   0x1000a517	10000bd8: R_386_32	.text
10000bdc:	e8 fc ff ff ff       	call   10000bdd <backupTree(char*, unsigned short)+0x96>	10000bdd: R_386_PC32	Dbg::kprintf(char const*, ...)
10000be1:	83 c4 10             	add    esp,0x10
10000be4:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10000be8:	0f 84 c8 05 00 00    	je     100011b6 <backupTree(char*, unsigned short)+0x66f>
10000bee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000bf1:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf3:	83 c0 08             	add    eax,0x8
10000bf6:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf8:	83 ec 0c             	sub    esp,0xc
10000bfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bfe:	ff d0                	call   eax
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	e9 af 05 00 00       	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
10000c08:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c0b:	8b 00                	mov    eax,DWORD PTR [eax]
10000c0d:	83 c0 0c             	add    eax,0xc
10000c10:	8b 00                	mov    eax,DWORD PTR [eax]
10000c12:	83 ec 0c             	sub    esp,0xc
10000c15:	8d 95 a4 fe ff ff    	lea    edx,[ebp-0x15c]
10000c1b:	52                   	push   edx
10000c1c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c1f:	6a 00                	push   0x0
10000c21:	68 10 01 00 00       	push   0x110
10000c26:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c29:	ff d0                	call   eax
10000c2b:	83 c4 20             	add    esp,0x20
10000c2e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c31:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10000c35:	0f 85 41 05 00 00    	jne    1000117c <backupTree(char*, unsigned short)+0x635>
10000c3b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c3e:	83 c0 10             	add    eax,0x10
10000c41:	83 ec 08             	sub    esp,0x8
10000c44:	68 10 a5 00 10       	push   0x1000a510	10000c45: R_386_32	.text
10000c49:	50                   	push   eax
10000c4a:	e8 fc ff ff ff       	call   10000c4b <backupTree(char*, unsigned short)+0x104>	10000c4b: R_386_PC32	strcmp
10000c4f:	83 c4 10             	add    esp,0x10
10000c52:	85 c0                	test   eax,eax
10000c54:	74 b2                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c59:	83 c0 10             	add    eax,0x10
10000c5c:	83 ec 08             	sub    esp,0x8
10000c5f:	68 12 a5 00 10       	push   0x1000a512	10000c60: R_386_32	.text
10000c64:	50                   	push   eax
10000c65:	e8 fc ff ff ff       	call   10000c66 <backupTree(char*, unsigned short)+0x11f>	10000c66: R_386_PC32	strcmp
10000c6a:	83 c4 10             	add    esp,0x10
10000c6d:	85 c0                	test   eax,eax
10000c6f:	74 97                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c71:	83 ec 08             	sub    esp,0x8
10000c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c77:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c7a:	e8 fc ff ff ff       	call   10000c7b <backupTree(char*, unsigned short)+0x134>	10000c7b: R_386_PC32	strcpy
10000c7f:	83 c4 10             	add    esp,0x10
10000c82:	83 ec 08             	sub    esp,0x8
10000c85:	68 15 a5 00 10       	push   0x1000a515	10000c86: R_386_32	.text
10000c8a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c8d:	e8 fc ff ff ff       	call   10000c8e <backupTree(char*, unsigned short)+0x147>	10000c8e: R_386_PC32	strcat
10000c92:	83 c4 10             	add    esp,0x10
10000c95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c98:	83 c0 10             	add    eax,0x10
10000c9b:	83 ec 08             	sub    esp,0x8
10000c9e:	50                   	push   eax
10000c9f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ca2:	e8 fc ff ff ff       	call   10000ca3 <backupTree(char*, unsigned short)+0x15c>	10000ca3: R_386_PC32	strcat
10000ca7:	83 c4 10             	add    esp,0x10
10000caa:	66 c7 45 e6 bc ad    	mov    WORD PTR [ebp-0x1a],0xadbc
10000cb0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10000cb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000cba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cbd:	01 d0                	add    eax,edx
10000cbf:	83 c0 10             	add    eax,0x10
10000cc2:	8a 00                	mov    al,BYTE PTR [eax]
10000cc4:	84 c0                	test   al,al
10000cc6:	74 3c                	je     10000d04 <backupTree(char*, unsigned short)+0x1bd>
10000cc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000ccb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cce:	01 d0                	add    eax,edx
10000cd0:	83 c0 10             	add    eax,0x10
10000cd3:	8a 00                	mov    al,BYTE PTR [eax]
10000cd5:	66 0f be d0          	movsx  dx,al
10000cd9:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000cdd:	31 d0                	xor    eax,edx
10000cdf:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000ce3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000ce7:	c1 e0 03             	shl    eax,0x3
10000cea:	89 c2                	mov    edx,eax
10000cec:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000cf0:	c1 f8 0d             	sar    eax,0xd
10000cf3:	09 d0                	or     eax,edx
10000cf5:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000cf9:	66 81 6d e6 f1 06    	sub    WORD PTR [ebp-0x1a],0x6f1
10000cff:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10000d02:	eb b3                	jmp    10000cb7 <backupTree(char*, unsigned short)+0x170>
10000d04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000d0a:	83 e0 02             	and    eax,0x2
10000d0d:	85 c0                	test   eax,eax
10000d0f:	74 37                	je     10000d48 <backupTree(char*, unsigned short)+0x201>
10000d11:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d14:	83 c0 10             	add    eax,0x10
10000d17:	83 ec 08             	sub    esp,0x8
10000d1a:	68 65 a5 00 10       	push   0x1000a565	10000d1b: R_386_32	.text
10000d1f:	50                   	push   eax
10000d20:	e8 fc ff ff ff       	call   10000d21 <backupTree(char*, unsigned short)+0x1da>	10000d21: R_386_PC32	strcmp
10000d25:	83 c4 10             	add    esp,0x10
10000d28:	85 c0                	test   eax,eax
10000d2a:	0f 84 d8 fe ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d30:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000d34:	83 ec 08             	sub    esp,0x8
10000d37:	50                   	push   eax
10000d38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000d3b:	e8 fc ff ff ff       	call   10000d3c <backupTree(char*, unsigned short)+0x1f5>	10000d3c: R_386_PC32	backupTree(char*, unsigned short)
10000d40:	83 c4 10             	add    esp,0x10
10000d43:	e9 c0 fe ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d48:	c6 85 a3 fe ff ff 00 	mov    BYTE PTR [ebp-0x15d],0x0
10000d4f:	83 ec 08             	sub    esp,0x8
10000d52:	68 6c a5 00 10       	push   0x1000a56c	10000d53: R_386_32	.text
10000d57:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d5d:	50                   	push   eax
10000d5e:	e8 fc ff ff ff       	call   10000d5f <backupTree(char*, unsigned short)+0x218>	10000d5f: R_386_PC32	strcpy
10000d63:	83 c4 10             	add    esp,0x10
10000d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10000d6c:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000d72:	83 ec 08             	sub    esp,0x8
10000d75:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000d7b:	50                   	push   eax
10000d7c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d82:	50                   	push   eax
10000d83:	e8 fc ff ff ff       	call   10000d84 <backupTree(char*, unsigned short)+0x23d>	10000d84: R_386_PC32	strcat
10000d88:	83 c4 10             	add    esp,0x10
10000d8b:	83 ec 04             	sub    esp,0x4
10000d8e:	6a 09                	push   0x9
10000d90:	6a 00                	push   0x0
10000d92:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000d98:	50                   	push   eax
10000d99:	e8 fc ff ff ff       	call   10000d9a <backupTree(char*, unsigned short)+0x253>	10000d9a: R_386_PC32	memset
10000d9e:	83 c4 10             	add    esp,0x10
10000da1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000da4:	83 c0 10             	add    eax,0x10
10000da7:	83 ec 04             	sub    esp,0x4
10000daa:	6a 08                	push   0x8
10000dac:	50                   	push   eax
10000dad:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000db3:	50                   	push   eax
10000db4:	e8 fc ff ff ff       	call   10000db5 <backupTree(char*, unsigned short)+0x26e>	10000db5: R_386_PC32	strncpyxx(char*, char const*, unsigned long)
10000db9:	83 c4 10             	add    esp,0x10
10000dbc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000dc3:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000dc7:	0f 8f c5 00 00 00    	jg     10000e92 <backupTree(char*, unsigned short)+0x34b>
10000dcd:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000dd3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000dd6:	01 d0                	add    eax,edx
10000dd8:	8a 00                	mov    al,BYTE PTR [eax]
10000dda:	3c 60                	cmp    al,0x60
10000ddc:	7e 30                	jle    10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000dde:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000de4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000de7:	01 d0                	add    eax,edx
10000de9:	8a 00                	mov    al,BYTE PTR [eax]
10000deb:	3c 7a                	cmp    al,0x7a
10000ded:	7f 1f                	jg     10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000def:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000df5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000df8:	01 d0                	add    eax,edx
10000dfa:	8a 00                	mov    al,BYTE PTR [eax]
10000dfc:	83 e8 20             	sub    eax,0x20
10000dff:	88 c2                	mov    dl,al
10000e01:	8d 8d 99 fe ff ff    	lea    ecx,[ebp-0x167]
10000e07:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e0a:	01 c8                	add    eax,ecx
10000e0c:	88 10                	mov    BYTE PTR [eax],dl
10000e0e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e17:	01 d0                	add    eax,edx
10000e19:	8a 00                	mov    al,BYTE PTR [eax]
10000e1b:	3c 59                	cmp    al,0x59
10000e1d:	75 0e                	jne    10000e2d <backupTree(char*, unsigned short)+0x2e6>
10000e1f:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e25:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e28:	01 d0                	add    eax,edx
10000e2a:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e2d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e33:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e36:	01 d0                	add    eax,edx
10000e38:	8a 00                	mov    al,BYTE PTR [eax]
10000e3a:	3c 5a                	cmp    al,0x5a
10000e3c:	75 0e                	jne    10000e4c <backupTree(char*, unsigned short)+0x305>
10000e3e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e47:	01 d0                	add    eax,edx
10000e49:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e4c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e52:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e55:	01 d0                	add    eax,edx
10000e57:	8a 00                	mov    al,BYTE PTR [eax]
10000e59:	3c 20                	cmp    al,0x20
10000e5b:	75 0e                	jne    10000e6b <backupTree(char*, unsigned short)+0x324>
10000e5d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e63:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e66:	01 d0                	add    eax,edx
10000e68:	c6 00 59             	mov    BYTE PTR [eax],0x59
10000e6b:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e74:	01 d0                	add    eax,edx
10000e76:	8a 00                	mov    al,BYTE PTR [eax]
10000e78:	3c 2e                	cmp    al,0x2e
10000e7a:	75 0e                	jne    10000e8a <backupTree(char*, unsigned short)+0x343>
10000e7c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e82:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e85:	01 d0                	add    eax,edx
10000e87:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10000e8a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10000e8d:	e9 31 ff ff ff       	jmp    10000dc3 <backupTree(char*, unsigned short)+0x27c>
10000e92:	83 ec 08             	sub    esp,0x8
10000e95:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000e9b:	50                   	push   eax
10000e9c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ea2:	50                   	push   eax
10000ea3:	e8 fc ff ff ff       	call   10000ea4 <backupTree(char*, unsigned short)+0x35d>	10000ea4: R_386_PC32	strcat
10000ea8:	83 c4 10             	add    esp,0x10
10000eab:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000eae:	83 c0 10             	add    eax,0x10
10000eb1:	83 ec 0c             	sub    esp,0xc
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <backupTree(char*, unsigned short)+0x36f>	10000eb6: R_386_PC32	strlen
10000eba:	83 c4 10             	add    esp,0x10
10000ebd:	83 c0 41             	add    eax,0x41
10000ec0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000ec6:	83 ec 08             	sub    esp,0x8
10000ec9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000ecf:	50                   	push   eax
10000ed0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ed6:	50                   	push   eax
10000ed7:	e8 fc ff ff ff       	call   10000ed8 <backupTree(char*, unsigned short)+0x391>	10000ed8: R_386_PC32	strcat
10000edc:	83 c4 10             	add    esp,0x10
10000edf:	83 ec 08             	sub    esp,0x8
10000ee2:	68 10 a5 00 10       	push   0x1000a510	10000ee3: R_386_32	.text
10000ee7:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000eed:	50                   	push   eax
10000eee:	e8 fc ff ff ff       	call   10000eef <backupTree(char*, unsigned short)+0x3a8>	10000eef: R_386_PC32	strcat
10000ef3:	83 c4 10             	add    esp,0x10
10000ef6:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000efa:	25 65 07 00 00       	and    eax,0x765
10000eff:	33 85 74 ed ff ff    	xor    eax,DWORD PTR [ebp-0x128c]
10000f05:	66 89 45 c6          	mov    WORD PTR [ebp-0x3a],ax
10000f09:	8d 85 88 fe ff ff    	lea    eax,[ebp-0x178]
10000f0f:	bb 85 a5 00 10       	mov    ebx,0x1000a585	10000f10: R_386_32	.text
10000f14:	ba 11 00 00 00       	mov    edx,0x11
10000f19:	89 c7                	mov    edi,eax
10000f1b:	89 de                	mov    esi,ebx
10000f1d:	89 d1                	mov    ecx,edx
10000f1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000f21:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f25:	83 e0 0f             	and    eax,0xf
10000f28:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f2f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f35:	83 ec 08             	sub    esp,0x8
10000f38:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f3e:	50                   	push   eax
10000f3f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f45:	50                   	push   eax
10000f46:	e8 fc ff ff ff       	call   10000f47 <backupTree(char*, unsigned short)+0x400>	10000f47: R_386_PC32	strcat
10000f4b:	83 c4 10             	add    esp,0x10
10000f4e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f52:	c1 f8 04             	sar    eax,0x4
10000f55:	83 e0 0f             	and    eax,0xf
10000f58:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f5f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f65:	83 ec 08             	sub    esp,0x8
10000f68:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f6e:	50                   	push   eax
10000f6f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f75:	50                   	push   eax
10000f76:	e8 fc ff ff ff       	call   10000f77 <backupTree(char*, unsigned short)+0x430>	10000f77: R_386_PC32	strcat
10000f7b:	83 c4 10             	add    esp,0x10
10000f7e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f82:	c1 f8 08             	sar    eax,0x8
10000f85:	83 e0 0f             	and    eax,0xf
10000f88:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f8f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f95:	83 ec 08             	sub    esp,0x8
10000f98:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f9e:	50                   	push   eax
10000f9f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fa5:	50                   	push   eax
10000fa6:	e8 fc ff ff ff       	call   10000fa7 <backupTree(char*, unsigned short)+0x460>	10000fa7: R_386_PC32	strcat
10000fab:	83 c4 10             	add    esp,0x10
10000fae:	66 8b 45 c6          	mov    ax,WORD PTR [ebp-0x3a]
10000fb2:	66 c1 e8 0c          	shr    ax,0xc
10000fb6:	0f b7 c0             	movzx  eax,ax
10000fb9:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000fc0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000fc6:	83 ec 08             	sub    esp,0x8
10000fc9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000fcf:	50                   	push   eax
10000fd0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fd6:	50                   	push   eax
10000fd7:	e8 fc ff ff ff       	call   10000fd8 <backupTree(char*, unsigned short)+0x491>	10000fd8: R_386_PC32	strcat
10000fdc:	83 c4 10             	add    esp,0x10
10000fdf:	83 ec 0c             	sub    esp,0xc
10000fe2:	68 14 01 00 00       	push   0x114
10000fe7:	e8 fc ff ff ff       	call   10000fe8 <backupTree(char*, unsigned short)+0x4a1>	10000fe8: R_386_PC32	operator new(unsigned long)
10000fec:	83 c4 10             	add    esp,0x10
10000fef:	89 c3                	mov    ebx,eax
10000ff1:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ff6:	8b 00                	mov    eax,DWORD PTR [eax]
10000ff8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
10000ffb:	83 ec 04             	sub    esp,0x4
10000ffe:	50                   	push   eax
10000fff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001002:	53                   	push   ebx
10001003:	e8 fc ff ff ff       	call   10001004 <backupTree(char*, unsigned short)+0x4bd>	10001004: R_386_PC32	File::File(char const*, Process*)
10001008:	83 c4 10             	add    esp,0x10
1000100b:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
1000100e:	83 ec 08             	sub    esp,0x8
10001011:	6a 01                	push   0x1
10001013:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001016:	e8 fc ff ff ff       	call   10001017 <backupTree(char*, unsigned short)+0x4d0>	10001017: R_386_PC32	File::open(FileOpenMode)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001022:	75 15                	jne    10001039 <backupTree(char*, unsigned short)+0x4f2>
10001024:	83 ec 0c             	sub    esp,0xc
10001027:	68 4c a5 00 10       	push   0x1000a54c	10001028: R_386_32	.text
1000102c:	e8 fc ff ff ff       	call   1000102d <backupTree(char*, unsigned short)+0x4e6>	1000102d: R_386_PC32	KePanic(char const*)
10001031:	83 c4 10             	add    esp,0x10
10001034:	e9 3e 01 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
10001039:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
1000103d:	0f 84 c5 fb ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001043:	83 ec 0c             	sub    esp,0xc
10001046:	68 14 01 00 00       	push   0x114
1000104b:	e8 fc ff ff ff       	call   1000104c <backupTree(char*, unsigned short)+0x505>	1000104c: R_386_PC32	operator new(unsigned long)
10001050:	83 c4 10             	add    esp,0x10
10001053:	89 c3                	mov    ebx,eax
10001055:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000105a:	8b 00                	mov    eax,DWORD PTR [eax]
1000105c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
1000105f:	83 ec 04             	sub    esp,0x4
10001062:	50                   	push   eax
10001063:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10001069:	50                   	push   eax
1000106a:	53                   	push   ebx
1000106b:	e8 fc ff ff ff       	call   1000106c <backupTree(char*, unsigned short)+0x525>	1000106c: R_386_PC32	File::File(char const*, Process*)
10001070:	83 c4 10             	add    esp,0x10
10001073:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10001076:	83 ec 08             	sub    esp,0x8
10001079:	6a 12                	push   0x12
1000107b:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000107e:	e8 fc ff ff ff       	call   1000107f <backupTree(char*, unsigned short)+0x538>	1000107f: R_386_PC32	File::open(FileOpenMode)
10001083:	83 c4 10             	add    esp,0x10
10001086:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000108a:	75 23                	jne    100010af <backupTree(char*, unsigned short)+0x568>
1000108c:	83 ec 0c             	sub    esp,0xc
1000108f:	68 4c a5 00 10       	push   0x1000a54c	10001090: R_386_32	.text
10001094:	e8 fc ff ff ff       	call   10001095 <backupTree(char*, unsigned short)+0x54e>	10001095: R_386_PC32	KePanic(char const*)
10001099:	83 c4 10             	add    esp,0x10
1000109c:	83 ec 0c             	sub    esp,0xc
1000109f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
100010a2:	e8 fc ff ff ff       	call   100010a3 <backupTree(char*, unsigned short)+0x55c>	100010a3: R_386_PC32	File::close()
100010a7:	83 c4 10             	add    esp,0x10
100010aa:	e9 c8 00 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
100010af:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100010b2:	8b 00                	mov    eax,DWORD PTR [eax]
100010b4:	83 c0 0c             	add    eax,0xc
100010b7:	8b 00                	mov    eax,DWORD PTR [eax]
100010b9:	83 ec 0c             	sub    esp,0xc
100010bc:	8d 95 84 fe ff ff    	lea    edx,[ebp-0x17c]
100010c2:	52                   	push   edx
100010c3:	8d 95 80 ee ff ff    	lea    edx,[ebp-0x1180]
100010c9:	52                   	push   edx
100010ca:	6a 00                	push   0x0
100010cc:	68 00 10 00 00       	push   0x1000
100010d1:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100010d4:	ff d0                	call   eax
100010d6:	83 c4 20             	add    esp,0x20
100010d9:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100010dc:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100010e0:	75 3b                	jne    1000111d <backupTree(char*, unsigned short)+0x5d6>
100010e2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100010e5:	8b 00                	mov    eax,DWORD PTR [eax]
100010e7:	83 c0 10             	add    eax,0x10
100010ea:	8b 08                	mov    ecx,DWORD PTR [eax]
100010ec:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
100010f2:	99                   	cdq    
100010f3:	83 ec 0c             	sub    esp,0xc
100010f6:	8d 9d 80 fe ff ff    	lea    ebx,[ebp-0x180]
100010fc:	53                   	push   ebx
100010fd:	8d 9d 80 ee ff ff    	lea    ebx,[ebp-0x1180]
10001103:	53                   	push   ebx
10001104:	52                   	push   edx
10001105:	50                   	push   eax
10001106:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001109:	ff d1                	call   ecx
1000110b:	83 c4 20             	add    esp,0x20
1000110e:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
10001114:	3d 00 10 00 00       	cmp    eax,0x1000
10001119:	75 05                	jne    10001120 <backupTree(char*, unsigned short)+0x5d9>
1000111b:	eb 92                	jmp    100010af <backupTree(char*, unsigned short)+0x568>
1000111d:	90                   	nop
1000111e:	eb 01                	jmp    10001121 <backupTree(char*, unsigned short)+0x5da>
10001120:	90                   	nop
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001127:	e8 fc ff ff ff       	call   10001128 <backupTree(char*, unsigned short)+0x5e1>	10001128: R_386_PC32	File::close()
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	83 ec 0c             	sub    esp,0xc
10001132:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001135:	e8 fc ff ff ff       	call   10001136 <backupTree(char*, unsigned short)+0x5ef>	10001136: R_386_PC32	File::close()
1000113a:	83 c4 10             	add    esp,0x10
1000113d:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001141:	74 15                	je     10001158 <backupTree(char*, unsigned short)+0x611>
10001143:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001146:	8b 00                	mov    eax,DWORD PTR [eax]
10001148:	83 c0 08             	add    eax,0x8
1000114b:	8b 00                	mov    eax,DWORD PTR [eax]
1000114d:	83 ec 0c             	sub    esp,0xc
10001150:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001153:	ff d0                	call   eax
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000115c:	0f 84 a6 fa ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001162:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10001165:	8b 00                	mov    eax,DWORD PTR [eax]
10001167:	83 c0 08             	add    eax,0x8
1000116a:	8b 00                	mov    eax,DWORD PTR [eax]
1000116c:	83 ec 0c             	sub    esp,0xc
1000116f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001172:	ff d0                	call   eax
10001174:	83 c4 10             	add    esp,0x10
10001177:	e9 8c fa ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
1000117c:	90                   	nop
1000117d:	83 ec 0c             	sub    esp,0xc
10001180:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001183:	e8 fc ff ff ff       	call   10001184 <backupTree(char*, unsigned short)+0x63d>	10001184: R_386_PC32	free
10001188:	83 c4 10             	add    esp,0x10
1000118b:	83 ec 0c             	sub    esp,0xc
1000118e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001191:	e8 fc ff ff ff       	call   10001192 <backupTree(char*, unsigned short)+0x64b>	10001192: R_386_PC32	Directory::close()
10001196:	83 c4 10             	add    esp,0x10
10001199:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
1000119d:	74 18                	je     100011b7 <backupTree(char*, unsigned short)+0x670>
1000119f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100011a2:	8b 00                	mov    eax,DWORD PTR [eax]
100011a4:	83 c0 08             	add    eax,0x8
100011a7:	8b 00                	mov    eax,DWORD PTR [eax]
100011a9:	83 ec 0c             	sub    esp,0xc
100011ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011af:	ff d0                	call   eax
100011b1:	83 c4 10             	add    esp,0x10
100011b4:	eb 01                	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
100011b6:	90                   	nop
100011b7:	8d 65 f4             	lea    esp,[ebp-0xc]
100011ba:	5b                   	pop    ebx
100011bb:	5e                   	pop    esi
100011bc:	5f                   	pop    edi
100011bd:	5d                   	pop    ebp
100011be:	c3                   	ret    

100011bf <createUser(char const*)>:
100011bf:	55                   	push   ebp
100011c0:	89 e5                	mov    ebp,esp
100011c2:	81 ec 08 01 00 00    	sub    esp,0x108
100011c8:	68 96 a5 00 10       	push   0x1000a596	100011c9: R_386_32	.text
100011cd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011d3:	50                   	push   eax
100011d4:	e8 fc ff ff ff       	call   100011d5 <createUser(char const*)+0x16>	100011d5: R_386_PC32	strcpy
100011d9:	83 c4 08             	add    esp,0x8
100011dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011df:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011e5:	50                   	push   eax
100011e6:	e8 fc ff ff ff       	call   100011e7 <createUser(char const*)+0x28>	100011e7: R_386_PC32	strcat
100011eb:	83 c4 08             	add    esp,0x8
100011ee:	83 ec 08             	sub    esp,0x8
100011f1:	68 c0 01 00 00       	push   0x1c0
100011f6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011fc:	50                   	push   eax
100011fd:	e8 fc ff ff ff       	call   100011fe <createUser(char const*)+0x3f>	100011fe: R_386_PC32	mkdir(char const*, int)
10001202:	83 c4 10             	add    esp,0x10
10001205:	83 ec 08             	sub    esp,0x8
10001208:	68 a0 a5 00 10       	push   0x1000a5a0	10001209: R_386_32	.text
1000120d:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001213:	50                   	push   eax
10001214:	e8 fc ff ff ff       	call   10001215 <createUser(char const*)+0x56>	10001215: R_386_PC32	strcat
10001219:	83 c4 10             	add    esp,0x10
1000121c:	83 ec 08             	sub    esp,0x8
1000121f:	68 c0 01 00 00       	push   0x1c0
10001224:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000122a:	50                   	push   eax
1000122b:	e8 fc ff ff ff       	call   1000122c <createUser(char const*)+0x6d>	1000122c: R_386_PC32	mkdir(char const*, int)
10001230:	83 c4 10             	add    esp,0x10
10001233:	83 ec 08             	sub    esp,0x8
10001236:	68 96 a5 00 10       	push   0x1000a596	10001237: R_386_32	.text
1000123b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001241:	50                   	push   eax
10001242:	e8 fc ff ff ff       	call   10001243 <createUser(char const*)+0x84>	10001243: R_386_PC32	strcpy
10001247:	83 c4 10             	add    esp,0x10
1000124a:	83 ec 08             	sub    esp,0x8
1000124d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001250:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001256:	50                   	push   eax
10001257:	e8 fc ff ff ff       	call   10001258 <createUser(char const*)+0x99>	10001258: R_386_PC32	strcat
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	83 ec 08             	sub    esp,0x8
10001262:	68 a9 a5 00 10       	push   0x1000a5a9	10001263: R_386_32	.text
10001267:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000126d:	50                   	push   eax
1000126e:	e8 fc ff ff ff       	call   1000126f <createUser(char const*)+0xb0>	1000126f: R_386_PC32	strcat
10001273:	83 c4 10             	add    esp,0x10
10001276:	83 ec 08             	sub    esp,0x8
10001279:	68 c0 01 00 00       	push   0x1c0
1000127e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001284:	50                   	push   eax
10001285:	e8 fc ff ff ff       	call   10001286 <createUser(char const*)+0xc7>	10001286: R_386_PC32	mkdir(char const*, int)
1000128a:	83 c4 10             	add    esp,0x10
1000128d:	83 ec 08             	sub    esp,0x8
10001290:	68 96 a5 00 10       	push   0x1000a596	10001291: R_386_32	.text
10001295:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000129b:	50                   	push   eax
1000129c:	e8 fc ff ff ff       	call   1000129d <createUser(char const*)+0xde>	1000129d: R_386_PC32	strcpy
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	83 ec 08             	sub    esp,0x8
100012a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012aa:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012b0:	50                   	push   eax
100012b1:	e8 fc ff ff ff       	call   100012b2 <createUser(char const*)+0xf3>	100012b2: R_386_PC32	strcat
100012b6:	83 c4 10             	add    esp,0x10
100012b9:	83 ec 08             	sub    esp,0x8
100012bc:	68 b4 a5 00 10       	push   0x1000a5b4	100012bd: R_386_32	.text
100012c1:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012c7:	50                   	push   eax
100012c8:	e8 fc ff ff ff       	call   100012c9 <createUser(char const*)+0x10a>	100012c9: R_386_PC32	strcat
100012cd:	83 c4 10             	add    esp,0x10
100012d0:	83 ec 08             	sub    esp,0x8
100012d3:	68 c0 01 00 00       	push   0x1c0
100012d8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <createUser(char const*)+0x121>	100012e0: R_386_PC32	mkdir(char const*, int)
100012e4:	83 c4 10             	add    esp,0x10
100012e7:	83 ec 08             	sub    esp,0x8
100012ea:	68 96 a5 00 10       	push   0x1000a596	100012eb: R_386_32	.text
100012ef:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012f5:	50                   	push   eax
100012f6:	e8 fc ff ff ff       	call   100012f7 <createUser(char const*)+0x138>	100012f7: R_386_PC32	strcpy
100012fb:	83 c4 10             	add    esp,0x10
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001304:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000130a:	50                   	push   eax
1000130b:	e8 fc ff ff ff       	call   1000130c <createUser(char const*)+0x14d>	1000130c: R_386_PC32	strcat
10001310:	83 c4 10             	add    esp,0x10
10001313:	83 ec 08             	sub    esp,0x8
10001316:	68 bf a5 00 10       	push   0x1000a5bf	10001317: R_386_32	.text
1000131b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001321:	50                   	push   eax
10001322:	e8 fc ff ff ff       	call   10001323 <createUser(char const*)+0x164>	10001323: R_386_PC32	strcat
10001327:	83 c4 10             	add    esp,0x10
1000132a:	83 ec 08             	sub    esp,0x8
1000132d:	68 c0 01 00 00       	push   0x1c0
10001332:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001338:	50                   	push   eax
10001339:	e8 fc ff ff ff       	call   1000133a <createUser(char const*)+0x17b>	1000133a: R_386_PC32	mkdir(char const*, int)
1000133e:	83 c4 10             	add    esp,0x10
10001341:	83 ec 08             	sub    esp,0x8
10001344:	68 96 a5 00 10       	push   0x1000a596	10001345: R_386_32	.text
10001349:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000134f:	50                   	push   eax
10001350:	e8 fc ff ff ff       	call   10001351 <createUser(char const*)+0x192>	10001351: R_386_PC32	strcpy
10001355:	83 c4 10             	add    esp,0x10
10001358:	83 ec 08             	sub    esp,0x8
1000135b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000135e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001364:	50                   	push   eax
10001365:	e8 fc ff ff ff       	call   10001366 <createUser(char const*)+0x1a7>	10001366: R_386_PC32	strcat
1000136a:	83 c4 10             	add    esp,0x10
1000136d:	83 ec 08             	sub    esp,0x8
10001370:	68 c9 a5 00 10       	push   0x1000a5c9	10001371: R_386_32	.text
10001375:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000137b:	50                   	push   eax
1000137c:	e8 fc ff ff ff       	call   1000137d <createUser(char const*)+0x1be>	1000137d: R_386_PC32	strcat
10001381:	83 c4 10             	add    esp,0x10
10001384:	83 ec 08             	sub    esp,0x8
10001387:	68 c0 01 00 00       	push   0x1c0
1000138c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001392:	50                   	push   eax
10001393:	e8 fc ff ff ff       	call   10001394 <createUser(char const*)+0x1d5>	10001394: R_386_PC32	mkdir(char const*, int)
10001398:	83 c4 10             	add    esp,0x10
1000139b:	83 ec 08             	sub    esp,0x8
1000139e:	68 96 a5 00 10       	push   0x1000a596	1000139f: R_386_32	.text
100013a3:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013a9:	50                   	push   eax
100013aa:	e8 fc ff ff ff       	call   100013ab <createUser(char const*)+0x1ec>	100013ab: R_386_PC32	strcpy
100013af:	83 c4 10             	add    esp,0x10
100013b2:	83 ec 08             	sub    esp,0x8
100013b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013b8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013be:	50                   	push   eax
100013bf:	e8 fc ff ff ff       	call   100013c0 <createUser(char const*)+0x201>	100013c0: R_386_PC32	strcat
100013c4:	83 c4 10             	add    esp,0x10
100013c7:	83 ec 08             	sub    esp,0x8
100013ca:	68 d4 a5 00 10       	push   0x1000a5d4	100013cb: R_386_32	.text
100013cf:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013d5:	50                   	push   eax
100013d6:	e8 fc ff ff ff       	call   100013d7 <createUser(char const*)+0x218>	100013d7: R_386_PC32	strcat
100013db:	83 c4 10             	add    esp,0x10
100013de:	83 ec 08             	sub    esp,0x8
100013e1:	68 c0 01 00 00       	push   0x1c0
100013e6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013ec:	50                   	push   eax
100013ed:	e8 fc ff ff ff       	call   100013ee <createUser(char const*)+0x22f>	100013ee: R_386_PC32	mkdir(char const*, int)
100013f2:	83 c4 10             	add    esp,0x10
100013f5:	83 ec 08             	sub    esp,0x8
100013f8:	68 96 a5 00 10       	push   0x1000a596	100013f9: R_386_32	.text
100013fd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001403:	50                   	push   eax
10001404:	e8 fc ff ff ff       	call   10001405 <createUser(char const*)+0x246>	10001405: R_386_PC32	strcpy
10001409:	83 c4 10             	add    esp,0x10
1000140c:	83 ec 08             	sub    esp,0x8
1000140f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001412:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001418:	50                   	push   eax
10001419:	e8 fc ff ff ff       	call   1000141a <createUser(char const*)+0x25b>	1000141a: R_386_PC32	strcat
1000141e:	83 c4 10             	add    esp,0x10
10001421:	83 ec 08             	sub    esp,0x8
10001424:	68 db a5 00 10       	push   0x1000a5db	10001425: R_386_32	.text
10001429:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000142f:	50                   	push   eax
10001430:	e8 fc ff ff ff       	call   10001431 <createUser(char const*)+0x272>	10001431: R_386_PC32	strcat
10001435:	83 c4 10             	add    esp,0x10
10001438:	83 ec 08             	sub    esp,0x8
1000143b:	68 c0 01 00 00       	push   0x1c0
10001440:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001446:	50                   	push   eax
10001447:	e8 fc ff ff ff       	call   10001448 <createUser(char const*)+0x289>	10001448: R_386_PC32	mkdir(char const*, int)
1000144c:	83 c4 10             	add    esp,0x10
1000144f:	83 ec 08             	sub    esp,0x8
10001452:	68 e3 a5 00 10       	push   0x1000a5e3	10001453: R_386_32	.text
10001457:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000145d:	50                   	push   eax
1000145e:	e8 fc ff ff ff       	call   1000145f <createUser(char const*)+0x2a0>	1000145f: R_386_PC32	strcpy
10001463:	83 c4 10             	add    esp,0x10
10001466:	83 ec 08             	sub    esp,0x8
10001469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000146c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001472:	50                   	push   eax
10001473:	e8 fc ff ff ff       	call   10001474 <createUser(char const*)+0x2b5>	10001474: R_386_PC32	strcat
10001478:	83 c4 10             	add    esp,0x10
1000147b:	83 ec 08             	sub    esp,0x8
1000147e:	68 c0 01 00 00       	push   0x1c0
10001483:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001489:	50                   	push   eax
1000148a:	e8 fc ff ff ff       	call   1000148b <createUser(char const*)+0x2cc>	1000148b: R_386_PC32	mkdir(char const*, int)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	83 ec 08             	sub    esp,0x8
10001495:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000149b:	50                   	push   eax
1000149c:	68 fc a5 00 10       	push   0x1000a5fc	1000149d: R_386_32	.text
100014a1:	e8 fc ff ff ff       	call   100014a2 <createUser(char const*)+0x2e3>	100014a2: R_386_PC32	copytree(char*, char*)
100014a6:	83 c4 10             	add    esp,0x10
100014a9:	90                   	nop
100014aa:	c9                   	leave  
100014ab:	c3                   	ret    

100014ac <drawBootScreen()>:
100014ac:	55                   	push   ebp
100014ad:	89 e5                	mov    ebp,esp
100014af:	83 ec 18             	sub    esp,0x18
100014b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100014b3: R_386_32	term
100014b7:	83 ec 08             	sub    esp,0x8
100014ba:	6a 0b                	push   0xb
100014bc:	50                   	push   eax
100014bd:	e8 fc ff ff ff       	call   100014be <drawBootScreen()+0x12>	100014be: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
100014c2:	83 c4 10             	add    esp,0x10
100014c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100014c6: R_386_32	term
100014ca:	83 ec 08             	sub    esp,0x8
100014cd:	6a 00                	push   0x0
100014cf:	50                   	push   eax
100014d0:	e8 fc ff ff ff       	call   100014d1 <drawBootScreen()+0x25>	100014d1: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
100014d5:	83 c4 10             	add    esp,0x10
100014d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100014d9: R_386_32	term
100014dd:	83 ec 0c             	sub    esp,0xc
100014e0:	50                   	push   eax
100014e1:	e8 fc ff ff ff       	call   100014e2 <drawBootScreen()+0x36>	100014e2: R_386_PC32	VgaText::clearScreen()
100014e6:	83 c4 10             	add    esp,0x10
100014e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ea: R_386_32	term
100014ee:	83 ec 08             	sub    esp,0x8
100014f1:	68 1b a6 00 10       	push   0x1000a61b	100014f2: R_386_32	.text
100014f6:	50                   	push   eax
100014f7:	e8 fc ff ff ff       	call   100014f8 <drawBootScreen()+0x4c>	100014f8: R_386_PC32	VgaText::setTitle(char*)
100014fc:	83 c4 10             	add    esp,0x10
100014ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10001500: R_386_32	term
10001504:	83 ec 08             	sub    esp,0x8
10001507:	6a 00                	push   0x0
10001509:	50                   	push   eax
1000150a:	e8 fc ff ff ff       	call   1000150b <drawBootScreen()+0x5f>	1000150b: R_386_PC32	VgaText::setTitleColour(VgaColour)
1000150f:	83 c4 10             	add    esp,0x10
10001512:	a1 00 00 00 00       	mov    eax,ds:0x0	10001513: R_386_32	term
10001517:	83 ec 08             	sub    esp,0x8
1000151a:	6a 00                	push   0x0
1000151c:	50                   	push   eax
1000151d:	e8 fc ff ff ff       	call   1000151e <drawBootScreen()+0x72>	1000151e: R_386_PC32	VgaText::setTitleTextColour(VgaColour)
10001522:	83 c4 10             	add    esp,0x10
10001525:	a1 00 00 00 00       	mov    eax,ds:0x0	10001526: R_386_32	term
1000152a:	83 ec 04             	sub    esp,0x4
1000152d:	6a 00                	push   0x0
1000152f:	6a 00                	push   0x0
10001531:	50                   	push   eax
10001532:	e8 fc ff ff ff       	call   10001533 <drawBootScreen()+0x87>	10001533: R_386_PC32	VgaText::setCursor(int, int)
10001537:	83 c4 10             	add    esp,0x10
1000153a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001541:	83 7d f4 4f          	cmp    DWORD PTR [ebp-0xc],0x4f
10001545:	7f 19                	jg     10001560 <drawBootScreen()+0xb4>
10001547:	a1 00 00 00 00       	mov    eax,ds:0x0	10001548: R_386_32	term
1000154c:	6a 00                	push   0x0
1000154e:	6a 00                	push   0x0
10001550:	6a 20                	push   0x20
10001552:	50                   	push   eax
10001553:	e8 fc ff ff ff       	call   10001554 <drawBootScreen()+0xa8>	10001554: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001558:	83 c4 10             	add    esp,0x10
1000155b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000155e:	eb e1                	jmp    10001541 <drawBootScreen()+0x95>
10001560:	a0 00 00 00 00       	mov    al,ds:0x0	10001561: R_386_32	showSidebar
10001565:	84 c0                	test   al,al
10001567:	0f 84 91 00 00 00    	je     100015fe <drawBootScreen()+0x152>
1000156d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10001574:	83 7d f0 18          	cmp    DWORD PTR [ebp-0x10],0x18
10001578:	7f 41                	jg     100015bb <drawBootScreen()+0x10f>
1000157a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000157b: R_386_32	term
1000157f:	83 ec 04             	sub    esp,0x4
10001582:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001585:	6a 00                	push   0x0
10001587:	50                   	push   eax
10001588:	e8 fc ff ff ff       	call   10001589 <drawBootScreen()+0xdd>	10001589: R_386_PC32	VgaText::setCursor(int, int)
1000158d:	83 c4 10             	add    esp,0x10
10001590:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001597:	83 7d ec 0f          	cmp    DWORD PTR [ebp-0x14],0xf
1000159b:	7f 19                	jg     100015b6 <drawBootScreen()+0x10a>
1000159d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000159e: R_386_32	term
100015a2:	6a 00                	push   0x0
100015a4:	6a 00                	push   0x0
100015a6:	6a 20                	push   0x20
100015a8:	50                   	push   eax
100015a9:	e8 fc ff ff ff       	call   100015aa <drawBootScreen()+0xfe>	100015aa: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100015ae:	83 c4 10             	add    esp,0x10
100015b1:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100015b4:	eb e1                	jmp    10001597 <drawBootScreen()+0xeb>
100015b6:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100015b9:	eb b9                	jmp    10001574 <drawBootScreen()+0xc8>
100015bb:	a1 00 00 00 00       	mov    eax,ds:0x0	100015bc: R_386_32	term
100015c0:	83 ec 04             	sub    esp,0x4
100015c3:	6a 01                	push   0x1
100015c5:	6a 01                	push   0x1
100015c7:	50                   	push   eax
100015c8:	e8 fc ff ff ff       	call   100015c9 <drawBootScreen()+0x11d>	100015c9: R_386_PC32	VgaText::setCursor(int, int)
100015cd:	83 c4 10             	add    esp,0x10
100015d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100015d1: R_386_32	term
100015d5:	6a 00                	push   0x0
100015d7:	6a 0f                	push   0xf
100015d9:	68 1c a6 00 10       	push   0x1000a61c	100015da: R_386_32	.text
100015de:	50                   	push   eax
100015df:	e8 fc ff ff ff       	call   100015e0 <drawBootScreen()+0x134>	100015e0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015e4:	83 c4 10             	add    esp,0x10
100015e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100015e8: R_386_32	term
100015ec:	6a 00                	push   0x0
100015ee:	6a 0e                	push   0xe
100015f0:	68 9f a6 00 10       	push   0x1000a69f	100015f1: R_386_32	.text
100015f5:	50                   	push   eax
100015f6:	e8 fc ff ff ff       	call   100015f7 <drawBootScreen()+0x14b>	100015f7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015fb:	83 c4 10             	add    esp,0x10
100015fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100015ff: R_386_32	term
10001603:	83 ec 08             	sub    esp,0x8
10001606:	6a 0f                	push   0xf
10001608:	50                   	push   eax
10001609:	e8 fc ff ff ff       	call   1000160a <drawBootScreen()+0x15e>	1000160a: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
1000160e:	83 c4 10             	add    esp,0x10
10001611:	a1 00 00 00 00       	mov    eax,ds:0x0	10001612: R_386_32	term
10001616:	83 ec 08             	sub    esp,0x8
10001619:	6a 00                	push   0x0
1000161b:	50                   	push   eax
1000161c:	e8 fc ff ff ff       	call   1000161d <drawBootScreen()+0x171>	1000161d: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
10001621:	83 c4 10             	add    esp,0x10
10001624:	90                   	nop
10001625:	c9                   	leave  
10001626:	c3                   	ret    

10001627 <drawBasicWindowX(int, int, int, int, char const*, bool)>:
10001627:	55                   	push   ebp
10001628:	89 e5                	mov    ebp,esp
1000162a:	53                   	push   ebx
1000162b:	83 ec 34             	sub    esp,0x34
1000162e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001631:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
10001634:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10001637:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000163e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001641:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
10001644:	7d 6c                	jge    100016b2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x8b>
10001646:	a1 00 00 00 00       	mov    eax,ds:0x0	10001647: R_386_32	term
1000164b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000164e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001651:	01 ca                	add    edx,ecx
10001653:	83 ec 04             	sub    esp,0x4
10001656:	52                   	push   edx
10001657:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000165a:	50                   	push   eax
1000165b:	e8 fc ff ff ff       	call   1000165c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x35>	1000165c: R_386_PC32	VgaText::setCursor(int, int)
10001660:	83 c4 10             	add    esp,0x10
10001663:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000166a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000166d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001670:	7d 3b                	jge    100016ad <drawBasicWindowX(int, int, int, int, char const*, bool)+0x86>
10001672:	a1 00 00 00 00       	mov    eax,ds:0x0	10001673: R_386_32	term
10001677:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000167b:	74 07                	je     10001684 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x5d>
1000167d:	b9 07 00 00 00       	mov    ecx,0x7
10001682:	eb 05                	jmp    10001689 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x62>
10001684:	b9 0f 00 00 00       	mov    ecx,0xf
10001689:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000168d:	74 07                	je     10001696 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x6f>
1000168f:	ba 07 00 00 00       	mov    edx,0x7
10001694:	eb 05                	jmp    1000169b <drawBasicWindowX(int, int, int, int, char const*, bool)+0x74>
10001696:	ba 0f 00 00 00       	mov    edx,0xf
1000169b:	51                   	push   ecx
1000169c:	52                   	push   edx
1000169d:	6a 20                	push   0x20
1000169f:	50                   	push   eax
100016a0:	e8 fc ff ff ff       	call   100016a1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x7a>	100016a1: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016a5:	83 c4 10             	add    esp,0x10
100016a8:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100016ab:	eb bd                	jmp    1000166a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x43>
100016ad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100016b0:	eb 8c                	jmp    1000163e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17>
100016b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100016b3: R_386_32	term
100016b7:	83 ec 04             	sub    esp,0x4
100016ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100016bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016c0:	50                   	push   eax
100016c1:	e8 fc ff ff ff       	call   100016c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x9b>	100016c2: R_386_PC32	VgaText::setCursor(int, int)
100016c6:	83 c4 10             	add    esp,0x10
100016c9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100016d0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100016d3:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100016d6:	7d 19                	jge    100016f1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xca>
100016d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100016d9: R_386_32	term
100016dd:	6a 01                	push   0x1
100016df:	6a 01                	push   0x1
100016e1:	6a 20                	push   0x20
100016e3:	50                   	push   eax
100016e4:	e8 fc ff ff ff       	call   100016e5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xbe>	100016e5: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016e9:	83 c4 10             	add    esp,0x10
100016ec:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100016ef:	eb df                	jmp    100016d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xa9>
100016f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100016f2: R_386_32	term
100016f6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100016f9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100016fc:	01 d1                	add    ecx,edx
100016fe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001701:	42                   	inc    edx
10001702:	83 ec 04             	sub    esp,0x4
10001705:	51                   	push   ecx
10001706:	52                   	push   edx
10001707:	50                   	push   eax
10001708:	e8 fc ff ff ff       	call   10001709 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe2>	10001709: R_386_PC32	VgaText::setCursor(int, int)
1000170d:	83 c4 10             	add    esp,0x10
10001710:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10001717:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000171a:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
1000171d:	7d 19                	jge    10001738 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x111>
1000171f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001720: R_386_32	term
10001724:	6a 03                	push   0x3
10001726:	6a 03                	push   0x3
10001728:	6a 20                	push   0x20
1000172a:	50                   	push   eax
1000172b:	e8 fc ff ff ff       	call   1000172c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x105>	1000172c: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001730:	83 c4 10             	add    esp,0x10
10001733:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10001736:	eb df                	jmp    10001717 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xf0>
10001738:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000173b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000173e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001741:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001744:	01 d0                	add    eax,edx
10001746:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001749:	0f 8d 89 00 00 00    	jge    100017d8 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b1>
1000174f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001750: R_386_32	term
10001754:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001757:	8d 4a 01             	lea    ecx,[edx+0x1]
1000175a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
1000175d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001760:	01 da                	add    edx,ebx
10001762:	83 ec 04             	sub    esp,0x4
10001765:	51                   	push   ecx
10001766:	52                   	push   edx
10001767:	50                   	push   eax
10001768:	e8 fc ff ff ff       	call   10001769 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x142>	10001769: R_386_PC32	VgaText::setCursor(int, int)
1000176d:	83 c4 10             	add    esp,0x10
10001770:	a1 00 00 00 00       	mov    eax,ds:0x0	10001771: R_386_32	term
10001775:	6a 03                	push   0x3
10001777:	6a 03                	push   0x3
10001779:	6a 20                	push   0x20
1000177b:	50                   	push   eax
1000177c:	e8 fc ff ff ff       	call   1000177d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x156>	1000177d: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001781:	83 c4 10             	add    esp,0x10
10001784:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001787:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000178a:	01 d0                	add    eax,edx
1000178c:	48                   	dec    eax
1000178d:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001790:	74 3e                	je     100017d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a9>
10001792:	a1 00 00 00 00       	mov    eax,ds:0x0	10001793: R_386_32	term
10001797:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000179a:	42                   	inc    edx
1000179b:	83 ec 04             	sub    esp,0x4
1000179e:	52                   	push   edx
1000179f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100017a2:	50                   	push   eax
100017a3:	e8 fc ff ff ff       	call   100017a4 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17d>	100017a4: R_386_PC32	VgaText::setCursor(int, int)
100017a8:	83 c4 10             	add    esp,0x10
100017ab:	a1 00 00 00 00       	mov    eax,ds:0x0	100017ac: R_386_32	term
100017b0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100017b4:	74 07                	je     100017bd <drawBasicWindowX(int, int, int, int, char const*, bool)+0x196>
100017b6:	ba 07 00 00 00       	mov    edx,0x7
100017bb:	eb 05                	jmp    100017c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x19b>
100017bd:	ba 0f 00 00 00       	mov    edx,0xf
100017c2:	52                   	push   edx
100017c3:	6a 00                	push   0x0
100017c5:	6a dd                	push   0xffffffdd
100017c7:	50                   	push   eax
100017c8:	e8 fc ff ff ff       	call   100017c9 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a2>	100017c9: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100017cd:	83 c4 10             	add    esp,0x10
100017d0:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100017d3:	e9 66 ff ff ff       	jmp    1000173e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x117>
100017d8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100017db:	83 ec 0c             	sub    esp,0xc
100017de:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100017e1:	e8 fc ff ff ff       	call   100017e2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1bb>	100017e2: R_386_PC32	strlen
100017e6:	83 c4 10             	add    esp,0x10
100017e9:	29 c3                	sub    ebx,eax
100017eb:	89 d8                	mov    eax,ebx
100017ed:	d1 e8                	shr    eax,1
100017ef:	48                   	dec    eax
100017f0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100017f3:	a1 00 00 00 00       	mov    eax,ds:0x0	100017f4: R_386_32	term
100017f8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100017fb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100017fe:	01 ca                	add    edx,ecx
10001800:	83 ec 04             	sub    esp,0x4
10001803:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001806:	52                   	push   edx
10001807:	50                   	push   eax
10001808:	e8 fc ff ff ff       	call   10001809 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1e2>	10001809: R_386_PC32	VgaText::setCursor(int, int)
1000180d:	83 c4 10             	add    esp,0x10
10001810:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10001817:	83 ec 0c             	sub    esp,0xc
1000181a:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000181d:	e8 fc ff ff ff       	call   1000181e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f7>	1000181e: R_386_PC32	strlen
10001822:	83 c4 10             	add    esp,0x10
10001825:	89 c2                	mov    edx,eax
10001827:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000182a:	39 c2                	cmp    edx,eax
1000182c:	76 25                	jbe    10001853 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x22c>
1000182e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000182f: R_386_32	term
10001833:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001836:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001839:	01 ca                	add    edx,ecx
1000183b:	8a 12                	mov    dl,BYTE PTR [edx]
1000183d:	0f be d2             	movsx  edx,dl
10001840:	6a 01                	push   0x1
10001842:	6a 0f                	push   0xf
10001844:	52                   	push   edx
10001845:	50                   	push   eax
10001846:	e8 fc ff ff ff       	call   10001847 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x220>	10001847: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000184b:	83 c4 10             	add    esp,0x10
1000184e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10001851:	eb c4                	jmp    10001817 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f0>
10001853:	90                   	nop
10001854:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001857:	c9                   	leave  
10001858:	c3                   	ret    

10001859 <drawBasicWindow(int, int, int, int, char const*)>:
10001859:	55                   	push   ebp
1000185a:	89 e5                	mov    ebp,esp
1000185c:	83 ec 08             	sub    esp,0x8
1000185f:	83 ec 08             	sub    esp,0x8
10001862:	6a 00                	push   0x0
10001864:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001867:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000186a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000186d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001870:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001873:	e8 fc ff ff ff       	call   10001874 <drawBasicWindow(int, int, int, int, char const*)+0x1b>	10001874: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10001878:	83 c4 20             	add    esp,0x20
1000187b:	90                   	nop
1000187c:	c9                   	leave  
1000187d:	c3                   	ret    

1000187e <bootInstallKeybrd(KeyboardToken, bool*)>:
1000187e:	55                   	push   ebp
1000187f:	89 e5                	mov    ebp,esp
10001881:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001884:	05 04 01 00 00       	add    eax,0x104
10001889:	8a 00                	mov    al,BYTE PTR [eax]
1000188b:	84 c0                	test   al,al
1000188d:	74 15                	je     100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
1000188f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001892:	66 83 f8 09          	cmp    ax,0x9
10001896:	75 0c                	jne    100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
10001898:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	1000189a: R_386_32	installKey
1000189f:	e9 94 00 00 00       	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018a4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
100018a7:	84 c0                	test   al,al
100018a9:	0f 85 88 00 00 00    	jne    10001937 <bootInstallKeybrd(KeyboardToken, bool*)+0xb9>
100018af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b2:	66 3d 0a 02          	cmp    ax,0x20a
100018b6:	75 09                	jne    100018c1 <bootInstallKeybrd(KeyboardToken, bool*)+0x43>
100018b8:	c6 05 00 00 00 00 1b 	mov    BYTE PTR ds:0x0,0x1b	100018ba: R_386_32	installKey
100018bf:	eb 77                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018c4:	66 3d 0d 02          	cmp    ax,0x20d
100018c8:	75 09                	jne    100018d3 <bootInstallKeybrd(KeyboardToken, bool*)+0x55>
100018ca:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	100018cc: R_386_32	installKey
100018d1:	eb 65                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018d6:	66 3d 0e 02          	cmp    ax,0x20e
100018da:	75 09                	jne    100018e5 <bootInstallKeybrd(KeyboardToken, bool*)+0x67>
100018dc:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	100018de: R_386_32	installKey
100018e3:	eb 53                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018e8:	66 3d 0b 02          	cmp    ax,0x20b
100018ec:	75 09                	jne    100018f7 <bootInstallKeybrd(KeyboardToken, bool*)+0x79>
100018ee:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100018f0: R_386_32	installKey
100018f5:	eb 41                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018fa:	66 3d 0c 02          	cmp    ax,0x20c
100018fe:	75 09                	jne    10001909 <bootInstallKeybrd(KeyboardToken, bool*)+0x8b>
10001900:	c6 05 00 00 00 00 02 	mov    BYTE PTR ds:0x0,0x2	10001902: R_386_32	installKey
10001907:	eb 2f                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000190c:	66 3d 05 02          	cmp    ax,0x205
10001910:	75 09                	jne    1000191b <bootInstallKeybrd(KeyboardToken, bool*)+0x9d>
10001912:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	10001914: R_386_32	installKey
10001919:	eb 1d                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000191b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000191e:	66 3d 05 02          	cmp    ax,0x205
10001922:	75 09                	jne    1000192d <bootInstallKeybrd(KeyboardToken, bool*)+0xaf>
10001924:	c6 05 00 00 00 00 7e 	mov    BYTE PTR ds:0x0,0x7e	10001926: R_386_32	installKey
1000192b:	eb 0b                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000192d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001930:	a2 00 00 00 00       	mov    ds:0x0,al	10001931: R_386_32	installKey
10001935:	eb 01                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001937:	90                   	nop
10001938:	5d                   	pop    ebp
10001939:	c3                   	ret    

1000193a <bootInstallTasks(int)>:
1000193a:	55                   	push   ebp
1000193b:	89 e5                	mov    ebp,esp
1000193d:	83 ec 08             	sub    esp,0x8
10001940:	a1 00 00 00 00       	mov    eax,ds:0x0	10001941: R_386_32	term
10001945:	83 ec 04             	sub    esp,0x4
10001948:	6a 08                	push   0x8
1000194a:	6a 18                	push   0x18
1000194c:	50                   	push   eax
1000194d:	e8 fc ff ff ff       	call   1000194e <bootInstallTasks(int)+0x14>	1000194e: R_386_PC32	VgaText::setCursor(int, int)
10001952:	83 c4 10             	add    esp,0x10
10001955:	a1 00 00 00 00       	mov    eax,ds:0x0	10001956: R_386_32	term
1000195a:	83 ec 08             	sub    esp,0x8
1000195d:	68 c0 a6 00 10       	push   0x1000a6c0	1000195e: R_386_32	.text
10001962:	50                   	push   eax
10001963:	e8 fc ff ff ff       	call   10001964 <bootInstallTasks(int)+0x2a>	10001964: R_386_PC32	VgaText::puts(char const*)
10001968:	83 c4 10             	add    esp,0x10
1000196b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000196c: R_386_32	term
10001970:	83 ec 04             	sub    esp,0x4
10001973:	6a 0a                	push   0xa
10001975:	6a 1a                	push   0x1a
10001977:	50                   	push   eax
10001978:	e8 fc ff ff ff       	call   10001979 <bootInstallTasks(int)+0x3f>	10001979: R_386_PC32	VgaText::setCursor(int, int)
1000197d:	83 c4 10             	add    esp,0x10
10001980:	a1 00 00 00 00       	mov    eax,ds:0x0	10001981: R_386_32	term
10001985:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001989:	75 07                	jne    10001992 <bootInstallTasks(int)+0x58>
1000198b:	ba e8 a6 00 10       	mov    edx,0x1000a6e8	1000198c: R_386_32	.text
10001990:	eb 05                	jmp    10001997 <bootInstallTasks(int)+0x5d>
10001992:	ba eb a6 00 10       	mov    edx,0x1000a6eb	10001993: R_386_32	.text
10001997:	83 ec 08             	sub    esp,0x8
1000199a:	52                   	push   edx
1000199b:	50                   	push   eax
1000199c:	e8 fc ff ff ff       	call   1000199d <bootInstallTasks(int)+0x63>	1000199d: R_386_PC32	VgaText::puts(char const*)
100019a1:	83 c4 10             	add    esp,0x10
100019a4:	a1 00 00 00 00       	mov    eax,ds:0x0	100019a5: R_386_32	term
100019a9:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
100019ad:	78 07                	js     100019b6 <bootInstallTasks(int)+0x7c>
100019af:	ba 00 00 00 00       	mov    edx,0x0
100019b4:	eb 05                	jmp    100019bb <bootInstallTasks(int)+0x81>
100019b6:	ba 07 00 00 00       	mov    edx,0x7
100019bb:	6a 0f                	push   0xf
100019bd:	52                   	push   edx
100019be:	68 ee a6 00 10       	push   0x1000a6ee	100019bf: R_386_32	.text
100019c3:	50                   	push   eax
100019c4:	e8 fc ff ff ff       	call   100019c5 <bootInstallTasks(int)+0x8b>	100019c5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100019c9:	83 c4 10             	add    esp,0x10
100019cc:	a1 00 00 00 00       	mov    eax,ds:0x0	100019cd: R_386_32	term
100019d1:	83 ec 04             	sub    esp,0x4
100019d4:	6a 0b                	push   0xb
100019d6:	6a 1a                	push   0x1a
100019d8:	50                   	push   eax
100019d9:	e8 fc ff ff ff       	call   100019da <bootInstallTasks(int)+0xa0>	100019da: R_386_PC32	VgaText::setCursor(int, int)
100019de:	83 c4 10             	add    esp,0x10
100019e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100019e2: R_386_32	term
100019e6:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
100019ea:	75 07                	jne    100019f3 <bootInstallTasks(int)+0xb9>
100019ec:	ba e8 a6 00 10       	mov    edx,0x1000a6e8	100019ed: R_386_32	.text
100019f1:	eb 05                	jmp    100019f8 <bootInstallTasks(int)+0xbe>
100019f3:	ba eb a6 00 10       	mov    edx,0x1000a6eb	100019f4: R_386_32	.text
100019f8:	83 ec 08             	sub    esp,0x8
100019fb:	52                   	push   edx
100019fc:	50                   	push   eax
100019fd:	e8 fc ff ff ff       	call   100019fe <bootInstallTasks(int)+0xc4>	100019fe: R_386_PC32	VgaText::puts(char const*)
10001a02:	83 c4 10             	add    esp,0x10
10001a05:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a06: R_386_32	term
10001a0a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001a0e:	7e 07                	jle    10001a17 <bootInstallTasks(int)+0xdd>
10001a10:	ba 00 00 00 00       	mov    edx,0x0
10001a15:	eb 05                	jmp    10001a1c <bootInstallTasks(int)+0xe2>
10001a17:	ba 07 00 00 00       	mov    edx,0x7
10001a1c:	6a 0f                	push   0xf
10001a1e:	52                   	push   edx
10001a1f:	68 06 a7 00 10       	push   0x1000a706	10001a20: R_386_32	.text
10001a24:	50                   	push   eax
10001a25:	e8 fc ff ff ff       	call   10001a26 <bootInstallTasks(int)+0xec>	10001a26: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a2a:	83 c4 10             	add    esp,0x10
10001a2d:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a2e: R_386_32	term
10001a32:	83 ec 04             	sub    esp,0x4
10001a35:	6a 0c                	push   0xc
10001a37:	6a 1a                	push   0x1a
10001a39:	50                   	push   eax
10001a3a:	e8 fc ff ff ff       	call   10001a3b <bootInstallTasks(int)+0x101>	10001a3b: R_386_PC32	VgaText::setCursor(int, int)
10001a3f:	83 c4 10             	add    esp,0x10
10001a42:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a43: R_386_32	term
10001a47:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001a4b:	75 07                	jne    10001a54 <bootInstallTasks(int)+0x11a>
10001a4d:	ba e8 a6 00 10       	mov    edx,0x1000a6e8	10001a4e: R_386_32	.text
10001a52:	eb 05                	jmp    10001a59 <bootInstallTasks(int)+0x11f>
10001a54:	ba eb a6 00 10       	mov    edx,0x1000a6eb	10001a55: R_386_32	.text
10001a59:	83 ec 08             	sub    esp,0x8
10001a5c:	52                   	push   edx
10001a5d:	50                   	push   eax
10001a5e:	e8 fc ff ff ff       	call   10001a5f <bootInstallTasks(int)+0x125>	10001a5f: R_386_PC32	VgaText::puts(char const*)
10001a63:	83 c4 10             	add    esp,0x10
10001a66:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a67: R_386_32	term
10001a6b:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
10001a6f:	7e 07                	jle    10001a78 <bootInstallTasks(int)+0x13e>
10001a71:	ba 00 00 00 00       	mov    edx,0x0
10001a76:	eb 05                	jmp    10001a7d <bootInstallTasks(int)+0x143>
10001a78:	ba 07 00 00 00       	mov    edx,0x7
10001a7d:	6a 0f                	push   0xf
10001a7f:	52                   	push   edx
10001a80:	68 1c a7 00 10       	push   0x1000a71c	10001a81: R_386_32	.text
10001a85:	50                   	push   eax
10001a86:	e8 fc ff ff ff       	call   10001a87 <bootInstallTasks(int)+0x14d>	10001a87: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a8b:	83 c4 10             	add    esp,0x10
10001a8e:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a8f: R_386_32	term
10001a93:	83 ec 04             	sub    esp,0x4
10001a96:	6a 0d                	push   0xd
10001a98:	6a 1a                	push   0x1a
10001a9a:	50                   	push   eax
10001a9b:	e8 fc ff ff ff       	call   10001a9c <bootInstallTasks(int)+0x162>	10001a9c: R_386_PC32	VgaText::setCursor(int, int)
10001aa0:	83 c4 10             	add    esp,0x10
10001aa3:	a1 00 00 00 00       	mov    eax,ds:0x0	10001aa4: R_386_32	term
10001aa8:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001aac:	75 07                	jne    10001ab5 <bootInstallTasks(int)+0x17b>
10001aae:	ba e8 a6 00 10       	mov    edx,0x1000a6e8	10001aaf: R_386_32	.text
10001ab3:	eb 05                	jmp    10001aba <bootInstallTasks(int)+0x180>
10001ab5:	ba eb a6 00 10       	mov    edx,0x1000a6eb	10001ab6: R_386_32	.text
10001aba:	83 ec 08             	sub    esp,0x8
10001abd:	52                   	push   edx
10001abe:	50                   	push   eax
10001abf:	e8 fc ff ff ff       	call   10001ac0 <bootInstallTasks(int)+0x186>	10001ac0: R_386_PC32	VgaText::puts(char const*)
10001ac4:	83 c4 10             	add    esp,0x10
10001ac7:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ac8: R_386_32	term
10001acc:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001ad0:	7e 07                	jle    10001ad9 <bootInstallTasks(int)+0x19f>
10001ad2:	ba 00 00 00 00       	mov    edx,0x0
10001ad7:	eb 05                	jmp    10001ade <bootInstallTasks(int)+0x1a4>
10001ad9:	ba 07 00 00 00       	mov    edx,0x7
10001ade:	6a 0f                	push   0xf
10001ae0:	52                   	push   edx
10001ae1:	68 32 a7 00 10       	push   0x1000a732	10001ae2: R_386_32	.text
10001ae6:	50                   	push   eax
10001ae7:	e8 fc ff ff ff       	call   10001ae8 <bootInstallTasks(int)+0x1ae>	10001ae8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001aec:	83 c4 10             	add    esp,0x10
10001aef:	a1 00 00 00 00       	mov    eax,ds:0x0	10001af0: R_386_32	term
10001af4:	83 ec 04             	sub    esp,0x4
10001af7:	6a 0e                	push   0xe
10001af9:	6a 1a                	push   0x1a
10001afb:	50                   	push   eax
10001afc:	e8 fc ff ff ff       	call   10001afd <bootInstallTasks(int)+0x1c3>	10001afd: R_386_PC32	VgaText::setCursor(int, int)
10001b01:	83 c4 10             	add    esp,0x10
10001b04:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b05: R_386_32	term
10001b09:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b0d:	75 07                	jne    10001b16 <bootInstallTasks(int)+0x1dc>
10001b0f:	ba e8 a6 00 10       	mov    edx,0x1000a6e8	10001b10: R_386_32	.text
10001b14:	eb 05                	jmp    10001b1b <bootInstallTasks(int)+0x1e1>
10001b16:	ba eb a6 00 10       	mov    edx,0x1000a6eb	10001b17: R_386_32	.text
10001b1b:	83 ec 08             	sub    esp,0x8
10001b1e:	52                   	push   edx
10001b1f:	50                   	push   eax
10001b20:	e8 fc ff ff ff       	call   10001b21 <bootInstallTasks(int)+0x1e7>	10001b21: R_386_PC32	VgaText::puts(char const*)
10001b25:	83 c4 10             	add    esp,0x10
10001b28:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b29: R_386_32	term
10001b2d:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001b31:	7e 07                	jle    10001b3a <bootInstallTasks(int)+0x200>
10001b33:	ba 00 00 00 00       	mov    edx,0x0
10001b38:	eb 05                	jmp    10001b3f <bootInstallTasks(int)+0x205>
10001b3a:	ba 07 00 00 00       	mov    edx,0x7
10001b3f:	6a 0f                	push   0xf
10001b41:	52                   	push   edx
10001b42:	68 46 a7 00 10       	push   0x1000a746	10001b43: R_386_32	.text
10001b47:	50                   	push   eax
10001b48:	e8 fc ff ff ff       	call   10001b49 <bootInstallTasks(int)+0x20f>	10001b49: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001b4d:	83 c4 10             	add    esp,0x10
10001b50:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b51: R_386_32	term
10001b55:	83 ec 04             	sub    esp,0x4
10001b58:	6a 0f                	push   0xf
10001b5a:	6a 1a                	push   0x1a
10001b5c:	50                   	push   eax
10001b5d:	e8 fc ff ff ff       	call   10001b5e <bootInstallTasks(int)+0x224>	10001b5e: R_386_PC32	VgaText::setCursor(int, int)
10001b62:	83 c4 10             	add    esp,0x10
10001b65:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b66: R_386_32	term
10001b6a:	83 7d 08 05          	cmp    DWORD PTR [ebp+0x8],0x5
10001b6e:	75 07                	jne    10001b77 <bootInstallTasks(int)+0x23d>
10001b70:	ba e8 a6 00 10       	mov    edx,0x1000a6e8	10001b71: R_386_32	.text
10001b75:	eb 05                	jmp    10001b7c <bootInstallTasks(int)+0x242>
10001b77:	ba eb a6 00 10       	mov    edx,0x1000a6eb	10001b78: R_386_32	.text
10001b7c:	83 ec 08             	sub    esp,0x8
10001b7f:	52                   	push   edx
10001b80:	50                   	push   eax
10001b81:	e8 fc ff ff ff       	call   10001b82 <bootInstallTasks(int)+0x248>	10001b82: R_386_PC32	VgaText::puts(char const*)
10001b86:	83 c4 10             	add    esp,0x10
10001b89:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b8a: R_386_32	term
10001b8e:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b92:	7e 07                	jle    10001b9b <bootInstallTasks(int)+0x261>
10001b94:	ba 00 00 00 00       	mov    edx,0x0
10001b99:	eb 05                	jmp    10001ba0 <bootInstallTasks(int)+0x266>
10001b9b:	ba 07 00 00 00       	mov    edx,0x7
10001ba0:	6a 0f                	push   0xf
10001ba2:	52                   	push   edx
10001ba3:	68 5e a7 00 10       	push   0x1000a75e	10001ba4: R_386_32	.text
10001ba8:	50                   	push   eax
10001ba9:	e8 fc ff ff ff       	call   10001baa <bootInstallTasks(int)+0x270>	10001baa: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001bae:	83 c4 10             	add    esp,0x10
10001bb1:	90                   	nop
10001bb2:	c9                   	leave  
10001bb3:	c3                   	ret    

10001bb4 <ror(unsigned long long, int, int)>:
10001bb4:	55                   	push   ebp
10001bb5:	89 e5                	mov    ebp,esp
10001bb7:	56                   	push   esi
10001bb8:	53                   	push   ebx
10001bb9:	83 ec 20             	sub    esp,0x20
10001bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bbf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001bc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001bc5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001bc8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001bcb:	ba 01 00 00 00       	mov    edx,0x1
10001bd0:	88 c1                	mov    cl,al
10001bd2:	d3 e2                	shl    edx,cl
10001bd4:	89 d0                	mov    eax,edx
10001bd6:	48                   	dec    eax
10001bd7:	99                   	cdq    
10001bd8:	89 c1                	mov    ecx,eax
10001bda:	23 4d e0             	and    ecx,DWORD PTR [ebp-0x20]
10001bdd:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001be0:	89 d0                	mov    eax,edx
10001be2:	23 45 e4             	and    eax,DWORD PTR [ebp-0x1c]
10001be5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001be8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10001beb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001bee:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001bf1:	0f ad d0             	shrd   eax,edx,cl
10001bf4:	d3 ea                	shr    edx,cl
10001bf6:	f6 c1 20             	test   cl,0x20
10001bf9:	74 04                	je     10001bff <ror(unsigned long long, int, int)+0x4b>
10001bfb:	89 d0                	mov    eax,edx
10001bfd:	31 d2                	xor    edx,edx
10001bff:	89 c3                	mov    ebx,eax
10001c01:	89 d6                	mov    esi,edx
10001c03:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c06:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
10001c09:	89 c1                	mov    ecx,eax
10001c0b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c0e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c11:	0f a5 c2             	shld   edx,eax,cl
10001c14:	d3 e0                	shl    eax,cl
10001c16:	f6 c1 20             	test   cl,0x20
10001c19:	74 04                	je     10001c1f <ror(unsigned long long, int, int)+0x6b>
10001c1b:	89 c2                	mov    edx,eax
10001c1d:	31 c0                	xor    eax,eax
10001c1f:	89 d1                	mov    ecx,edx
10001c21:	89 c2                	mov    edx,eax
10001c23:	89 d8                	mov    eax,ebx
10001c25:	09 d0                	or     eax,edx
10001c27:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001c2a:	89 f0                	mov    eax,esi
10001c2c:	09 c8                	or     eax,ecx
10001c2e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001c31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001c34:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001c37:	83 c4 20             	add    esp,0x20
10001c3a:	5b                   	pop    ebx
10001c3b:	5e                   	pop    esi
10001c3c:	5d                   	pop    ebp
10001c3d:	c3                   	ret    

10001c3e <swapBits(unsigned long long, unsigned long long, unsigned long long)>:
10001c3e:	55                   	push   ebp
10001c3f:	89 e5                	mov    ebp,esp
10001c41:	56                   	push   esi
10001c42:	53                   	push   ebx
10001c43:	83 ec 40             	sub    esp,0x40
10001c46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c49:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001c4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001c4f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001c52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001c55:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001c58:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c5b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001c5e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001c61:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001c64:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001c67:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001c6a:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001c6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c70:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c73:	0f ad d0             	shrd   eax,edx,cl
10001c76:	d3 ea                	shr    edx,cl
10001c78:	f6 c1 20             	test   cl,0x20
10001c7b:	74 04                	je     10001c81 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x43>
10001c7d:	89 d0                	mov    eax,edx
10001c7f:	31 d2                	xor    edx,edx
10001c81:	89 c3                	mov    ebx,eax
10001c83:	89 d6                	mov    esi,edx
10001c85:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001c88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c8b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c8e:	0f ad d0             	shrd   eax,edx,cl
10001c91:	d3 ea                	shr    edx,cl
10001c93:	f6 c1 20             	test   cl,0x20
10001c96:	74 04                	je     10001c9c <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x5e>
10001c98:	89 d0                	mov    eax,edx
10001c9a:	31 d2                	xor    edx,edx
10001c9c:	89 d1                	mov    ecx,edx
10001c9e:	89 c2                	mov    edx,eax
10001ca0:	89 d8                	mov    eax,ebx
10001ca2:	31 d0                	xor    eax,edx
10001ca4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001ca7:	89 f0                	mov    eax,esi
10001ca9:	31 c8                	xor    eax,ecx
10001cab:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001cae:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001cb1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001cb4:	89 c6                	mov    esi,eax
10001cb6:	83 e6 01             	and    esi,0x1
10001cb9:	89 75 c8             	mov    DWORD PTR [ebp-0x38],esi
10001cbc:	89 d0                	mov    eax,edx
10001cbe:	83 e0 00             	and    eax,0x0
10001cc1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001cc4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001cc7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10001cca:	89 c3                	mov    ebx,eax
10001ccc:	80 f7 00             	xor    bh,0x0
10001ccf:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
10001cd2:	89 d0                	mov    eax,edx
10001cd4:	80 f4 00             	xor    ah,0x0
10001cd7:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001cda:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10001cdd:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10001ce0:	89 c8                	mov    eax,ecx
10001ce2:	09 d0                	or     eax,edx
10001ce4:	85 c0                	test   eax,eax
10001ce6:	74 62                	je     10001d4a <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x10c>
10001ce8:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001ceb:	b8 01 00 00 00       	mov    eax,0x1
10001cf0:	ba 00 00 00 00       	mov    edx,0x0
10001cf5:	0f a5 c2             	shld   edx,eax,cl
10001cf8:	d3 e0                	shl    eax,cl
10001cfa:	f6 c1 20             	test   cl,0x20
10001cfd:	74 04                	je     10001d03 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xc5>
10001cff:	89 c2                	mov    edx,eax
10001d01:	31 c0                	xor    eax,eax
10001d03:	89 c3                	mov    ebx,eax
10001d05:	89 d6                	mov    esi,edx
10001d07:	89 d8                	mov    eax,ebx
10001d09:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001d0c:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10001d0f:	89 f0                	mov    eax,esi
10001d11:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001d14:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001d17:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001d1a:	b8 01 00 00 00       	mov    eax,0x1
10001d1f:	ba 00 00 00 00       	mov    edx,0x0
10001d24:	0f a5 c2             	shld   edx,eax,cl
10001d27:	d3 e0                	shl    eax,cl
10001d29:	f6 c1 20             	test   cl,0x20
10001d2c:	74 04                	je     10001d32 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xf4>
10001d2e:	89 c2                	mov    edx,eax
10001d30:	31 c0                	xor    eax,eax
10001d32:	89 c1                	mov    ecx,eax
10001d34:	89 d3                	mov    ebx,edx
10001d36:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001d39:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10001d3c:	89 c6                	mov    esi,eax
10001d3e:	31 ce                	xor    esi,ecx
10001d40:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10001d43:	31 d3                	xor    ebx,edx
10001d45:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10001d48:	eb 0c                	jmp    10001d56 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x118>
10001d4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001d4d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001d50:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001d53:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10001d56:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001d59:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001d5c:	83 c4 40             	add    esp,0x40
10001d5f:	5b                   	pop    ebx
10001d60:	5e                   	pop    esi
10001d61:	5d                   	pop    ebp
10001d62:	c3                   	ret    

10001d63 <getChecksum(unsigned int)>:
10001d63:	55                   	push   ebp
10001d64:	89 e5                	mov    ebp,esp
10001d66:	56                   	push   esi
10001d67:	53                   	push   ebx
10001d68:	83 ec 20             	sub    esp,0x20
10001d6b:	66 c7 45 f6 49 4e    	mov    WORD PTR [ebp-0xa],0x4e49
10001d71:	66 c7 45 f4 79 6e    	mov    WORD PTR [ebp-0xc],0x6e79
10001d77:	66 c7 45 f2 67 61    	mov    WORD PTR [ebp-0xe],0x6167
10001d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d80:	c1 e8 10             	shr    eax,0x10
10001d83:	89 c1                	mov    ecx,eax
10001d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d88:	89 c2                	mov    edx,eax
10001d8a:	89 d0                	mov    eax,edx
10001d8c:	c1 e0 06             	shl    eax,0x6
10001d8f:	29 d0                	sub    eax,edx
10001d91:	c1 e0 04             	shl    eax,0x4
10001d94:	01 d0                	add    eax,edx
10001d96:	31 c8                	xor    eax,ecx
10001d98:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
10001d9c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001da0:	0f 84 b1 00 00 00    	je     10001e57 <getChecksum(unsigned int)+0xf4>
10001da6:	b8 f4 02 00 00       	mov    eax,0x2f4
10001dab:	ba 00 00 00 00       	mov    edx,0x0
10001db0:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001db3:	89 c3                	mov    ebx,eax
10001db5:	be 00 00 00 00       	mov    esi,0x0
10001dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dbd:	ba 00 00 00 00       	mov    edx,0x0
10001dc2:	6a 1d                	push   0x1d
10001dc4:	6a 05                	push   0x5
10001dc6:	52                   	push   edx
10001dc7:	50                   	push   eax
10001dc8:	e8 fc ff ff ff       	call   10001dc9 <getChecksum(unsigned int)+0x66>	10001dc9: R_386_PC32	ror(unsigned long long, int, int)
10001dcd:	83 c4 10             	add    esp,0x10
10001dd0:	05 52 3f 04 00       	add    eax,0x43f52
10001dd5:	83 d2 00             	adc    edx,0x0
10001dd8:	89 d9                	mov    ecx,ebx
10001dda:	31 c1                	xor    ecx,eax
10001ddc:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
10001ddf:	31 d6                	xor    esi,edx
10001de1:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
10001de4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001de7:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001deb:	66 0f af c2          	imul   ax,dx
10001def:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
10001df3:	b8 ea 00 00 00       	mov    eax,0xea
10001df8:	ba 00 00 00 00       	mov    edx,0x0
10001dfd:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001e00:	89 c3                	mov    ebx,eax
10001e02:	be 00 00 00 00       	mov    esi,0x0
10001e07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e0a:	ba 00 00 00 00       	mov    edx,0x0
10001e0f:	6a 1f                	push   0x1f
10001e11:	6a 03                	push   0x3
10001e13:	52                   	push   edx
10001e14:	50                   	push   eax
10001e15:	e8 fc ff ff ff       	call   10001e16 <getChecksum(unsigned int)+0xb3>	10001e16: R_386_PC32	ror(unsigned long long, int, int)
10001e1a:	83 c4 10             	add    esp,0x10
10001e1d:	05 05 db 09 00       	add    eax,0x9db05
10001e22:	83 d2 00             	adc    edx,0x0
10001e25:	89 d9                	mov    ecx,ebx
10001e27:	31 c1                	xor    ecx,eax
10001e29:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
10001e2c:	31 d6                	xor    esi,edx
10001e2e:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10001e31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001e34:	66 29 45 f4          	sub    WORD PTR [ebp-0xc],ax
10001e38:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e3c:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e3f:	25 d2 04 00 00       	and    eax,0x4d2
10001e44:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e4b:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e4f:	d1 6d 08             	shr    DWORD PTR [ebp+0x8],1
10001e52:	e9 45 ff ff ff       	jmp    10001d9c <getChecksum(unsigned int)+0x39>
10001e57:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e5b:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e5e:	66 33 45 f2          	xor    ax,WORD PTR [ebp-0xe]
10001e62:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001e65:	0f b7 c0             	movzx  eax,ax
10001e68:	25 ff 7f 00 00       	and    eax,0x7fff
10001e6d:	8d 65 f8             	lea    esp,[ebp-0x8]
10001e70:	5b                   	pop    ebx
10001e71:	5e                   	pop    esi
10001e72:	5d                   	pop    ebp
10001e73:	c3                   	ret    

10001e74 <createKey(char*, unsigned int)>:
10001e74:	55                   	push   ebp
10001e75:	89 e5                	mov    ebp,esp
10001e77:	53                   	push   ebx
10001e78:	83 ec 34             	sub    esp,0x34
10001e7b:	68 70 a7 00 10       	push   0x1000a770	10001e7c: R_386_32	.text
10001e80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e83:	e8 fc ff ff ff       	call   10001e84 <createKey(char*, unsigned int)+0x10>	10001e84: R_386_PC32	strcpy
10001e88:	83 c4 08             	add    esp,0x8
10001e8b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10001e8e:	bb 00 00 00 00       	mov    ebx,0x0
10001e93:	89 c8                	mov    eax,ecx
10001e95:	89 da                	mov    edx,ebx
10001e97:	0f a4 c2 0f          	shld   edx,eax,0xf
10001e9b:	c1 e0 0f             	shl    eax,0xf
10001e9e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ea1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ea4:	83 ec 04             	sub    esp,0x4
10001ea7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001eaa:	e8 fc ff ff ff       	call   10001eab <createKey(char*, unsigned int)+0x37>	10001eab: R_386_PC32	getChecksum(unsigned int)
10001eaf:	83 c4 08             	add    esp,0x8
10001eb2:	ba 00 00 00 00       	mov    edx,0x0
10001eb7:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
10001eba:	09 55 f4             	or     DWORD PTR [ebp-0xc],edx
10001ebd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001ec4:	81 7d ec db 24 00 00 	cmp    DWORD PTR [ebp-0x14],0x24db
10001ecb:	7f 7f                	jg     10001f4c <createKey(char*, unsigned int)+0xd8>
10001ecd:	81 75 f0 95 38 e4 b5 	xor    DWORD PTR [ebp-0x10],0xb5e43895
10001ed4:	83 75 f4 37          	xor    DWORD PTR [ebp-0xc],0x37
10001ed8:	6a 00                	push   0x0
10001eda:	6a 08                	push   0x8
10001edc:	6a 00                	push   0x0
10001ede:	6a 03                	push   0x3
10001ee0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ee3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001ee6:	e8 fc ff ff ff       	call   10001ee7 <createKey(char*, unsigned int)+0x73>	10001ee7: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001eeb:	83 c4 18             	add    esp,0x18
10001eee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ef1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ef4:	6a 00                	push   0x0
10001ef6:	6a 0c                	push   0xc
10001ef8:	6a 00                	push   0x0
10001efa:	6a 0d                	push   0xd
10001efc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001eff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f02:	e8 fc ff ff ff       	call   10001f03 <createKey(char*, unsigned int)+0x8f>	10001f03: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f07:	83 c4 18             	add    esp,0x18
10001f0a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f0d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f10:	6a 00                	push   0x0
10001f12:	6a 16                	push   0x16
10001f14:	6a 00                	push   0x0
10001f16:	6a 25                	push   0x25
10001f18:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f1b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f1e:	e8 fc ff ff ff       	call   10001f1f <createKey(char*, unsigned int)+0xab>	10001f1f: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f23:	83 c4 18             	add    esp,0x18
10001f26:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f29:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f2c:	6a 2a                	push   0x2a
10001f2e:	6a 13                	push   0x13
10001f30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f33:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f36:	e8 fc ff ff ff       	call   10001f37 <createKey(char*, unsigned int)+0xc3>	10001f37: R_386_PC32	ror(unsigned long long, int, int)
10001f3b:	83 c4 10             	add    esp,0x10
10001f3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f41:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f44:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
10001f47:	e9 78 ff ff ff       	jmp    10001ec4 <createKey(char*, unsigned int)+0x50>
10001f4c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f4f:	83 e0 0f             	and    eax,0xf
10001f52:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001f55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f58:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f5b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f5f:	c1 ea 04             	shr    edx,0x4
10001f62:	89 c1                	mov    ecx,eax
10001f64:	89 d3                	mov    ebx,edx
10001f66:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f69:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f6c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f6f:	83 e0 0f             	and    eax,0xf
10001f72:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001f75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f78:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f7b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f7f:	c1 ea 04             	shr    edx,0x4
10001f82:	89 c1                	mov    ecx,eax
10001f84:	89 d3                	mov    ebx,edx
10001f86:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f89:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f8f:	83 e0 0f             	and    eax,0xf
10001f92:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001f95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f98:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f9b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f9f:	c1 ea 04             	shr    edx,0x4
10001fa2:	89 c1                	mov    ecx,eax
10001fa4:	89 d3                	mov    ebx,edx
10001fa6:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fa9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001faf:	25 ff 03 00 00       	and    eax,0x3ff
10001fb4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001fb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fbd:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fc1:	c1 ea 0a             	shr    edx,0xa
10001fc4:	89 c1                	mov    ecx,eax
10001fc6:	89 d3                	mov    ebx,edx
10001fc8:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fcb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fd1:	25 ff 03 00 00       	and    eax,0x3ff
10001fd6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001fd9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fdc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fdf:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fe3:	c1 ea 0a             	shr    edx,0xa
10001fe6:	89 c1                	mov    ecx,eax
10001fe8:	89 d3                	mov    ebx,edx
10001fea:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fed:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001ff0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ff3:	25 ff 03 00 00       	and    eax,0x3ff
10001ff8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001ffb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ffe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002001:	0f ac d0 0a          	shrd   eax,edx,0xa
10002005:	c1 ea 0a             	shr    edx,0xa
10002008:	89 c1                	mov    ecx,eax
1000200a:	89 d3                	mov    ebx,edx
1000200c:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
1000200f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002012:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002015:	05 00 00 00 00       	add    eax,0x0	10002016: R_386_32	lookupA
1000201a:	8a 10                	mov    dl,BYTE PTR [eax]
1000201c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000201f:	88 10                	mov    BYTE PTR [eax],dl
10002021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002024:	8d 50 01             	lea    edx,[eax+0x1]
10002027:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000202a:	05 00 00 00 00       	add    eax,0x0	1000202b: R_386_32	lookupA
1000202f:	8a 00                	mov    al,BYTE PTR [eax]
10002031:	88 02                	mov    BYTE PTR [edx],al
10002033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002036:	8d 50 0f             	lea    edx,[eax+0xf]
10002039:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000203c:	05 00 00 00 00       	add    eax,0x0	1000203d: R_386_32	lookupA
10002041:	8a 00                	mov    al,BYTE PTR [eax]
10002043:	88 02                	mov    BYTE PTR [edx],al
10002045:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002048:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
1000204d:	f7 e9                	imul   ecx
1000204f:	c1 fa 05             	sar    edx,0x5
10002052:	89 c8                	mov    eax,ecx
10002054:	c1 f8 1f             	sar    eax,0x1f
10002057:	29 c2                	sub    edx,eax
10002059:	89 d0                	mov    eax,edx
1000205b:	b9 0a 00 00 00       	mov    ecx,0xa
10002060:	99                   	cdq    
10002061:	f7 f9                	idiv   ecx
10002063:	89 d0                	mov    eax,edx
10002065:	8d 50 30             	lea    edx,[eax+0x30]
10002068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000206b:	83 c0 03             	add    eax,0x3
1000206e:	88 10                	mov    BYTE PTR [eax],dl
10002070:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002073:	b8 67 66 66 66       	mov    eax,0x66666667
10002078:	f7 e9                	imul   ecx
1000207a:	c1 fa 02             	sar    edx,0x2
1000207d:	89 c8                	mov    eax,ecx
1000207f:	c1 f8 1f             	sar    eax,0x1f
10002082:	89 d1                	mov    ecx,edx
10002084:	29 c1                	sub    ecx,eax
10002086:	b8 67 66 66 66       	mov    eax,0x66666667
1000208b:	f7 e9                	imul   ecx
1000208d:	c1 fa 02             	sar    edx,0x2
10002090:	89 c8                	mov    eax,ecx
10002092:	c1 f8 1f             	sar    eax,0x1f
10002095:	29 c2                	sub    edx,eax
10002097:	89 d0                	mov    eax,edx
10002099:	c1 e0 02             	shl    eax,0x2
1000209c:	01 d0                	add    eax,edx
1000209e:	01 c0                	add    eax,eax
100020a0:	29 c1                	sub    ecx,eax
100020a2:	89 ca                	mov    edx,ecx
100020a4:	88 d0                	mov    al,dl
100020a6:	8d 50 30             	lea    edx,[eax+0x30]
100020a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ac:	83 c0 04             	add    eax,0x4
100020af:	88 10                	mov    BYTE PTR [eax],dl
100020b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100020b4:	b9 0a 00 00 00       	mov    ecx,0xa
100020b9:	99                   	cdq    
100020ba:	f7 f9                	idiv   ecx
100020bc:	89 d0                	mov    eax,edx
100020be:	8d 50 30             	lea    edx,[eax+0x30]
100020c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020c4:	83 c0 05             	add    eax,0x5
100020c7:	88 10                	mov    BYTE PTR [eax],dl
100020c9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020cc:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100020d1:	f7 e9                	imul   ecx
100020d3:	c1 fa 05             	sar    edx,0x5
100020d6:	89 c8                	mov    eax,ecx
100020d8:	c1 f8 1f             	sar    eax,0x1f
100020db:	29 c2                	sub    edx,eax
100020dd:	89 d0                	mov    eax,edx
100020df:	b9 0a 00 00 00       	mov    ecx,0xa
100020e4:	99                   	cdq    
100020e5:	f7 f9                	idiv   ecx
100020e7:	89 d0                	mov    eax,edx
100020e9:	8d 50 30             	lea    edx,[eax+0x30]
100020ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ef:	83 c0 07             	add    eax,0x7
100020f2:	88 10                	mov    BYTE PTR [eax],dl
100020f4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020f7:	b8 67 66 66 66       	mov    eax,0x66666667
100020fc:	f7 e9                	imul   ecx
100020fe:	c1 fa 02             	sar    edx,0x2
10002101:	89 c8                	mov    eax,ecx
10002103:	c1 f8 1f             	sar    eax,0x1f
10002106:	89 d1                	mov    ecx,edx
10002108:	29 c1                	sub    ecx,eax
1000210a:	b8 67 66 66 66       	mov    eax,0x66666667
1000210f:	f7 e9                	imul   ecx
10002111:	c1 fa 02             	sar    edx,0x2
10002114:	89 c8                	mov    eax,ecx
10002116:	c1 f8 1f             	sar    eax,0x1f
10002119:	29 c2                	sub    edx,eax
1000211b:	89 d0                	mov    eax,edx
1000211d:	c1 e0 02             	shl    eax,0x2
10002120:	01 d0                	add    eax,edx
10002122:	01 c0                	add    eax,eax
10002124:	29 c1                	sub    ecx,eax
10002126:	89 ca                	mov    edx,ecx
10002128:	88 d0                	mov    al,dl
1000212a:	8d 50 30             	lea    edx,[eax+0x30]
1000212d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002130:	83 c0 08             	add    eax,0x8
10002133:	88 10                	mov    BYTE PTR [eax],dl
10002135:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002138:	b9 0a 00 00 00       	mov    ecx,0xa
1000213d:	99                   	cdq    
1000213e:	f7 f9                	idiv   ecx
10002140:	89 d0                	mov    eax,edx
10002142:	8d 50 30             	lea    edx,[eax+0x30]
10002145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002148:	83 c0 09             	add    eax,0x9
1000214b:	88 10                	mov    BYTE PTR [eax],dl
1000214d:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10002150:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002155:	f7 e9                	imul   ecx
10002157:	c1 fa 05             	sar    edx,0x5
1000215a:	89 c8                	mov    eax,ecx
1000215c:	c1 f8 1f             	sar    eax,0x1f
1000215f:	29 c2                	sub    edx,eax
10002161:	89 d0                	mov    eax,edx
10002163:	b9 0a 00 00 00       	mov    ecx,0xa
10002168:	99                   	cdq    
10002169:	f7 f9                	idiv   ecx
1000216b:	89 d0                	mov    eax,edx
1000216d:	8d 50 30             	lea    edx,[eax+0x30]
10002170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002173:	83 c0 0b             	add    eax,0xb
10002176:	88 10                	mov    BYTE PTR [eax],dl
10002178:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
1000217b:	b8 67 66 66 66       	mov    eax,0x66666667
10002180:	f7 e9                	imul   ecx
10002182:	c1 fa 02             	sar    edx,0x2
10002185:	89 c8                	mov    eax,ecx
10002187:	c1 f8 1f             	sar    eax,0x1f
1000218a:	89 d1                	mov    ecx,edx
1000218c:	29 c1                	sub    ecx,eax
1000218e:	b8 67 66 66 66       	mov    eax,0x66666667
10002193:	f7 e9                	imul   ecx
10002195:	c1 fa 02             	sar    edx,0x2
10002198:	89 c8                	mov    eax,ecx
1000219a:	c1 f8 1f             	sar    eax,0x1f
1000219d:	29 c2                	sub    edx,eax
1000219f:	89 d0                	mov    eax,edx
100021a1:	c1 e0 02             	shl    eax,0x2
100021a4:	01 d0                	add    eax,edx
100021a6:	01 c0                	add    eax,eax
100021a8:	29 c1                	sub    ecx,eax
100021aa:	89 ca                	mov    edx,ecx
100021ac:	88 d0                	mov    al,dl
100021ae:	8d 50 30             	lea    edx,[eax+0x30]
100021b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021b4:	83 c0 0c             	add    eax,0xc
100021b7:	88 10                	mov    BYTE PTR [eax],dl
100021b9:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100021bc:	b9 0a 00 00 00       	mov    ecx,0xa
100021c1:	99                   	cdq    
100021c2:	f7 f9                	idiv   ecx
100021c4:	89 d0                	mov    eax,edx
100021c6:	8d 50 30             	lea    edx,[eax+0x30]
100021c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021cc:	83 c0 0d             	add    eax,0xd
100021cf:	88 10                	mov    BYTE PTR [eax],dl
100021d1:	90                   	nop
100021d2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100021d5:	c9                   	leave  
100021d6:	c3                   	ret    

100021d7 <retrieveBits(char*)>:
100021d7:	55                   	push   ebp
100021d8:	89 e5                	mov    ebp,esp
100021da:	57                   	push   edi
100021db:	56                   	push   esi
100021dc:	53                   	push   ebx
100021dd:	83 ec 4c             	sub    esp,0x4c
100021e0:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
100021e7:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
100021ee:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [ebp-0x1c],0xffffffff
100021f5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100021fc:	83 7d e0 0f          	cmp    DWORD PTR [ebp-0x20],0xf
10002200:	7f 54                	jg     10002256 <retrieveBits(char*)+0x7f>
10002202:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002205:	05 00 00 00 00       	add    eax,0x0	10002206: R_386_32	lookupA
1000220a:	8a 10                	mov    dl,BYTE PTR [eax]
1000220c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000220f:	8a 00                	mov    al,BYTE PTR [eax]
10002211:	38 c2                	cmp    dl,al
10002213:	75 06                	jne    1000221b <retrieveBits(char*)+0x44>
10002215:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002218:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000221b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000221e:	05 00 00 00 00       	add    eax,0x0	1000221f: R_386_32	lookupB
10002223:	8a 10                	mov    dl,BYTE PTR [eax]
10002225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002228:	40                   	inc    eax
10002229:	8a 00                	mov    al,BYTE PTR [eax]
1000222b:	38 c2                	cmp    dl,al
1000222d:	75 06                	jne    10002235 <retrieveBits(char*)+0x5e>
1000222f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002232:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10002235:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002238:	05 00 00 00 00       	add    eax,0x0	10002239: R_386_32	lookupC
1000223d:	8a 10                	mov    dl,BYTE PTR [eax]
1000223f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002242:	83 c0 0f             	add    eax,0xf
10002245:	8a 00                	mov    al,BYTE PTR [eax]
10002247:	38 c2                	cmp    dl,al
10002249:	75 06                	jne    10002251 <retrieveBits(char*)+0x7a>
1000224b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000224e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002251:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10002254:	eb a6                	jmp    100021fc <retrieveBits(char*)+0x25>
10002256:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
1000225a:	74 0c                	je     10002268 <retrieveBits(char*)+0x91>
1000225c:	83 7d e8 ff          	cmp    DWORD PTR [ebp-0x18],0xffffffff
10002260:	74 06                	je     10002268 <retrieveBits(char*)+0x91>
10002262:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10002266:	75 0f                	jne    10002277 <retrieveBits(char*)+0xa0>
10002268:	b8 00 00 00 00       	mov    eax,0x0
1000226d:	ba 00 00 00 00       	mov    edx,0x0
10002272:	e9 02 02 00 00       	jmp    10002479 <retrieveBits(char*)+0x2a2>
10002277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000227a:	83 c0 03             	add    eax,0x3
1000227d:	8a 00                	mov    al,BYTE PTR [eax]
1000227f:	0f be c0             	movsx  eax,al
10002282:	8d 50 d0             	lea    edx,[eax-0x30]
10002285:	89 d0                	mov    eax,edx
10002287:	c1 e0 02             	shl    eax,0x2
1000228a:	01 d0                	add    eax,edx
1000228c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002293:	01 d0                	add    eax,edx
10002295:	c1 e0 02             	shl    eax,0x2
10002298:	89 c6                	mov    esi,eax
1000229a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000229d:	83 c0 04             	add    eax,0x4
100022a0:	8a 00                	mov    al,BYTE PTR [eax]
100022a2:	0f be c0             	movsx  eax,al
100022a5:	8d 50 d0             	lea    edx,[eax-0x30]
100022a8:	89 d0                	mov    eax,edx
100022aa:	c1 e0 02             	shl    eax,0x2
100022ad:	01 d0                	add    eax,edx
100022af:	01 c0                	add    eax,eax
100022b1:	8d 14 06             	lea    edx,[esi+eax*1]
100022b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022b7:	83 c0 05             	add    eax,0x5
100022ba:	8a 00                	mov    al,BYTE PTR [eax]
100022bc:	0f be c0             	movsx  eax,al
100022bf:	83 e8 30             	sub    eax,0x30
100022c2:	01 d0                	add    eax,edx
100022c4:	99                   	cdq    
100022c5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100022c8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100022cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022ce:	83 c0 07             	add    eax,0x7
100022d1:	8a 00                	mov    al,BYTE PTR [eax]
100022d3:	0f be c0             	movsx  eax,al
100022d6:	8d 50 d0             	lea    edx,[eax-0x30]
100022d9:	89 d0                	mov    eax,edx
100022db:	c1 e0 02             	shl    eax,0x2
100022de:	01 d0                	add    eax,edx
100022e0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100022e7:	01 d0                	add    eax,edx
100022e9:	c1 e0 02             	shl    eax,0x2
100022ec:	89 c6                	mov    esi,eax
100022ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022f1:	83 c0 08             	add    eax,0x8
100022f4:	8a 00                	mov    al,BYTE PTR [eax]
100022f6:	0f be c0             	movsx  eax,al
100022f9:	8d 50 d0             	lea    edx,[eax-0x30]
100022fc:	89 d0                	mov    eax,edx
100022fe:	c1 e0 02             	shl    eax,0x2
10002301:	01 d0                	add    eax,edx
10002303:	01 c0                	add    eax,eax
10002305:	8d 14 06             	lea    edx,[esi+eax*1]
10002308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000230b:	83 c0 09             	add    eax,0x9
1000230e:	8a 00                	mov    al,BYTE PTR [eax]
10002310:	0f be c0             	movsx  eax,al
10002313:	83 e8 30             	sub    eax,0x30
10002316:	01 d0                	add    eax,edx
10002318:	99                   	cdq    
10002319:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
1000231c:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
1000231f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002322:	83 c0 0b             	add    eax,0xb
10002325:	8a 00                	mov    al,BYTE PTR [eax]
10002327:	0f be c0             	movsx  eax,al
1000232a:	8d 50 d0             	lea    edx,[eax-0x30]
1000232d:	89 d0                	mov    eax,edx
1000232f:	c1 e0 02             	shl    eax,0x2
10002332:	01 d0                	add    eax,edx
10002334:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000233b:	01 d0                	add    eax,edx
1000233d:	c1 e0 02             	shl    eax,0x2
10002340:	89 c6                	mov    esi,eax
10002342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002345:	83 c0 0c             	add    eax,0xc
10002348:	8a 00                	mov    al,BYTE PTR [eax]
1000234a:	0f be c0             	movsx  eax,al
1000234d:	8d 50 d0             	lea    edx,[eax-0x30]
10002350:	89 d0                	mov    eax,edx
10002352:	c1 e0 02             	shl    eax,0x2
10002355:	01 d0                	add    eax,edx
10002357:	01 c0                	add    eax,eax
10002359:	8d 14 06             	lea    edx,[esi+eax*1]
1000235c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000235f:	83 c0 0d             	add    eax,0xd
10002362:	8a 00                	mov    al,BYTE PTR [eax]
10002364:	0f be c0             	movsx  eax,al
10002367:	83 e8 30             	sub    eax,0x30
1000236a:	01 d0                	add    eax,edx
1000236c:	99                   	cdq    
1000236d:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002370:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10002373:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002376:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10002379:	0f a4 c2 0a          	shld   edx,eax,0xa
1000237d:	c1 e0 0a             	shl    eax,0xa
10002380:	89 c6                	mov    esi,eax
10002382:	89 d7                	mov    edi,edx
10002384:	89 f0                	mov    eax,esi
10002386:	0b 45 c8             	or     eax,DWORD PTR [ebp-0x38]
10002389:	89 c1                	mov    ecx,eax
1000238b:	89 f8                	mov    eax,edi
1000238d:	0b 45 cc             	or     eax,DWORD PTR [ebp-0x34]
10002390:	89 c3                	mov    ebx,eax
10002392:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002395:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10002398:	0f a4 c2 14          	shld   edx,eax,0x14
1000239c:	c1 e0 14             	shl    eax,0x14
1000239f:	89 ce                	mov    esi,ecx
100023a1:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
100023a4:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100023a7:	0b 75 a8             	or     esi,DWORD PTR [ebp-0x58]
100023aa:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
100023ad:	89 d8                	mov    eax,ebx
100023af:	0b 45 ac             	or     eax,DWORD PTR [ebp-0x54]
100023b2:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100023b5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100023b8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100023bb:	0f a4 c2 0c          	shld   edx,eax,0xc
100023bf:	c1 e0 0c             	shl    eax,0xc
100023c2:	89 c3                	mov    ebx,eax
100023c4:	89 d6                	mov    esi,edx
100023c6:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
100023c9:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100023cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100023cf:	c1 e0 04             	shl    eax,0x4
100023d2:	0b 45 ec             	or     eax,DWORD PTR [ebp-0x14]
100023d5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100023d8:	c1 e2 08             	shl    edx,0x8
100023db:	09 d0                	or     eax,edx
100023dd:	99                   	cdq    
100023de:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
100023e1:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
100023e4:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
100023eb:	81 7d d4 db 24 00 00 	cmp    DWORD PTR [ebp-0x2c],0x24db
100023f2:	7f 7f                	jg     10002473 <retrieveBits(char*)+0x29c>
100023f4:	6a 2a                	push   0x2a
100023f6:	6a 13                	push   0x13
100023f8:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023fb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023fe:	e8 fc ff ff ff       	call   100023ff <retrieveBits(char*)+0x228>	100023ff: R_386_PC32	ror(unsigned long long, int, int)
10002403:	83 c4 10             	add    esp,0x10
10002406:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002409:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
1000240c:	6a 00                	push   0x0
1000240e:	6a 08                	push   0x8
10002410:	6a 00                	push   0x0
10002412:	6a 03                	push   0x3
10002414:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002417:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000241a:	e8 fc ff ff ff       	call   1000241b <retrieveBits(char*)+0x244>	1000241b: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000241f:	83 c4 18             	add    esp,0x18
10002422:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002425:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002428:	6a 00                	push   0x0
1000242a:	6a 0c                	push   0xc
1000242c:	6a 00                	push   0x0
1000242e:	6a 0d                	push   0xd
10002430:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002433:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002436:	e8 fc ff ff ff       	call   10002437 <retrieveBits(char*)+0x260>	10002437: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000243b:	83 c4 18             	add    esp,0x18
1000243e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002441:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002444:	6a 00                	push   0x0
10002446:	6a 16                	push   0x16
10002448:	6a 00                	push   0x0
1000244a:	6a 25                	push   0x25
1000244c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000244f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002452:	e8 fc ff ff ff       	call   10002453 <retrieveBits(char*)+0x27c>	10002453: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002457:	83 c4 18             	add    esp,0x18
1000245a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000245d:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002460:	81 75 d8 95 38 e4 b5 	xor    DWORD PTR [ebp-0x28],0xb5e43895
10002467:	83 75 dc 37          	xor    DWORD PTR [ebp-0x24],0x37
1000246b:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
1000246e:	e9 78 ff ff ff       	jmp    100023eb <retrieveBits(char*)+0x214>
10002473:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002476:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002479:	8d 65 f4             	lea    esp,[ebp-0xc]
1000247c:	5b                   	pop    ebx
1000247d:	5e                   	pop    esi
1000247e:	5f                   	pop    edi
1000247f:	5d                   	pop    ebp
10002480:	c3                   	ret    

10002481 <checkKey(char*)>:
10002481:	55                   	push   ebp
10002482:	89 e5                	mov    ebp,esp
10002484:	53                   	push   ebx
10002485:	83 ec 14             	sub    esp,0x14
10002488:	83 ec 04             	sub    esp,0x4
1000248b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000248e:	e8 fc ff ff ff       	call   1000248f <checkKey(char*)+0xe>	1000248f: R_386_PC32	retrieveBits(char*)
10002493:	83 c4 08             	add    esp,0x8
10002496:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002499:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000249c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000249f:	25 ff 7f 00 00       	and    eax,0x7fff
100024a4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100024a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024aa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100024ad:	0f ac d0 0f          	shrd   eax,edx,0xf
100024b1:	c1 ea 0f             	shr    edx,0xf
100024b4:	89 c1                	mov    ecx,eax
100024b6:	89 d3                	mov    ebx,edx
100024b8:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
100024bb:	83 ec 04             	sub    esp,0x4
100024be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100024c1:	e8 fc ff ff ff       	call   100024c2 <checkKey(char*)+0x41>	100024c2: R_386_PC32	getChecksum(unsigned int)
100024c6:	83 c4 08             	add    esp,0x8
100024c9:	39 45 ec             	cmp    DWORD PTR [ebp-0x14],eax
100024cc:	0f 95 c0             	setne  al
100024cf:	84 c0                	test   al,al
100024d1:	74 07                	je     100024da <checkKey(char*)+0x59>
100024d3:	b8 00 00 00 00       	mov    eax,0x0
100024d8:	eb 06                	jmp    100024e0 <checkKey(char*)+0x5f>
100024da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024dd:	83 e0 07             	and    eax,0x7
100024e0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100024e3:	c9                   	leave  
100024e4:	c3                   	ret    

100024e5 <changeKeyType(char*, int)>:
100024e5:	55                   	push   ebp
100024e6:	89 e5                	mov    ebp,esp
100024e8:	83 ec 10             	sub    esp,0x10
100024eb:	83 ec 04             	sub    esp,0x4
100024ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024f1:	e8 fc ff ff ff       	call   100024f2 <changeKeyType(char*, int)+0xd>	100024f2: R_386_PC32	retrieveBits(char*)
100024f6:	83 c4 08             	add    esp,0x8
100024f9:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
100024fc:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100024ff:	83 65 f8 f8          	and    DWORD PTR [ebp-0x8],0xfffffff8
10002503:	83 65 fc ff          	and    DWORD PTR [ebp-0x4],0xffffffff
10002507:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000250a:	99                   	cdq    
1000250b:	09 45 f8             	or     DWORD PTR [ebp-0x8],eax
1000250e:	09 55 fc             	or     DWORD PTR [ebp-0x4],edx
10002511:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10002514:	50                   	push   eax
10002515:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002518:	e8 fc ff ff ff       	call   10002519 <changeKeyType(char*, int)+0x34>	10002519: R_386_PC32	createKey(char*, unsigned int)
1000251d:	83 c4 08             	add    esp,0x8
10002520:	83 ec 04             	sub    esp,0x4
10002523:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002526:	e8 fc ff ff ff       	call   10002527 <changeKeyType(char*, int)+0x42>	10002527: R_386_PC32	checkKey(char*)
1000252b:	83 c4 08             	add    esp,0x8
1000252e:	85 c0                	test   eax,eax
10002530:	0f 95 c0             	setne  al
10002533:	c9                   	leave  
10002534:	c3                   	ret    

10002535 <checkExtendedKey(char*)>:
10002535:	55                   	push   ebp
10002536:	89 e5                	mov    ebp,esp
10002538:	83 ec 20             	sub    esp,0x20
1000253b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000253e:	8a 00                	mov    al,BYTE PTR [eax]
10002540:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10002543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002546:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
10002549:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
1000254c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000254f:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10002552:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10002555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002558:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
1000255b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000255e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002561:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10002564:	88 45 f0             	mov    BYTE PTR [ebp-0x10],al
10002567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000256a:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
1000256d:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10002570:	c6 45 f2 2d          	mov    BYTE PTR [ebp-0xe],0x2d
10002574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002577:	8a 40 06             	mov    al,BYTE PTR [eax+0x6]
1000257a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000257d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002580:	8a 40 07             	mov    al,BYTE PTR [eax+0x7]
10002583:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10002586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002589:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
1000258c:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
1000258f:	c6 45 f6 2d          	mov    BYTE PTR [ebp-0xa],0x2d
10002593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002596:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10002599:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000259c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000259f:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
100025a2:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
100025a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025a8:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
100025ab:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
100025ae:	c6 45 fa 2d          	mov    BYTE PTR [ebp-0x6],0x2d
100025b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025b5:	8a 40 0f             	mov    al,BYTE PTR [eax+0xf]
100025b8:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
100025bb:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025be:	48                   	dec    eax
100025bf:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100025c2:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025c5:	3c 2f                	cmp    al,0x2f
100025c7:	75 04                	jne    100025cd <checkExtendedKey(char*)+0x98>
100025c9:	c6 45 ef 39          	mov    BYTE PTR [ebp-0x11],0x39
100025cd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d0:	48                   	dec    eax
100025d1:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
100025d4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d7:	3c 2f                	cmp    al,0x2f
100025d9:	75 04                	jne    100025df <checkExtendedKey(char*)+0xaa>
100025db:	c6 45 f5 39          	mov    BYTE PTR [ebp-0xb],0x39
100025df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025e2:	83 c0 0d             	add    eax,0xd
100025e5:	8a 10                	mov    dl,BYTE PTR [eax]
100025e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025ea:	83 c0 0c             	add    eax,0xc
100025ed:	8a 00                	mov    al,BYTE PTR [eax]
100025ef:	38 c2                	cmp    dl,al
100025f1:	74 0a                	je     100025fd <checkExtendedKey(char*)+0xc8>
100025f3:	b8 00 00 00 00       	mov    eax,0x0
100025f8:	e9 d6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100025fd:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002600:	3c 2f                	cmp    al,0x2f
10002602:	7e 07                	jle    1000260b <checkExtendedKey(char*)+0xd6>
10002604:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002607:	3c 39                	cmp    al,0x39
10002609:	7e 0a                	jle    10002615 <checkExtendedKey(char*)+0xe0>
1000260b:	b8 00 00 00 00       	mov    eax,0x0
10002610:	e9 be 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002615:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002618:	3c 2f                	cmp    al,0x2f
1000261a:	7e 07                	jle    10002623 <checkExtendedKey(char*)+0xee>
1000261c:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
1000261f:	3c 39                	cmp    al,0x39
10002621:	7e 0a                	jle    1000262d <checkExtendedKey(char*)+0xf8>
10002623:	b8 00 00 00 00       	mov    eax,0x0
10002628:	e9 a6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000262d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002630:	3c 2f                	cmp    al,0x2f
10002632:	7e 07                	jle    1000263b <checkExtendedKey(char*)+0x106>
10002634:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002637:	3c 39                	cmp    al,0x39
10002639:	7e 0a                	jle    10002645 <checkExtendedKey(char*)+0x110>
1000263b:	b8 00 00 00 00       	mov    eax,0x0
10002640:	e9 8e 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002645:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10002648:	3c 2f                	cmp    al,0x2f
1000264a:	7e 07                	jle    10002653 <checkExtendedKey(char*)+0x11e>
1000264c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000264f:	3c 39                	cmp    al,0x39
10002651:	7e 07                	jle    1000265a <checkExtendedKey(char*)+0x125>
10002653:	b8 00 00 00 00       	mov    eax,0x0
10002658:	eb 79                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000265a:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
1000265d:	3c 2f                	cmp    al,0x2f
1000265f:	7e 07                	jle    10002668 <checkExtendedKey(char*)+0x133>
10002661:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
10002664:	3c 39                	cmp    al,0x39
10002666:	7e 07                	jle    1000266f <checkExtendedKey(char*)+0x13a>
10002668:	b8 00 00 00 00       	mov    eax,0x0
1000266d:	eb 64                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000266f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002672:	3c 2f                	cmp    al,0x2f
10002674:	7e 07                	jle    1000267d <checkExtendedKey(char*)+0x148>
10002676:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002679:	3c 39                	cmp    al,0x39
1000267b:	7e 07                	jle    10002684 <checkExtendedKey(char*)+0x14f>
1000267d:	b8 00 00 00 00       	mov    eax,0x0
10002682:	eb 4f                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002684:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10002687:	3c 2f                	cmp    al,0x2f
10002689:	7e 07                	jle    10002692 <checkExtendedKey(char*)+0x15d>
1000268b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000268e:	3c 39                	cmp    al,0x39
10002690:	7e 07                	jle    10002699 <checkExtendedKey(char*)+0x164>
10002692:	b8 00 00 00 00       	mov    eax,0x0
10002697:	eb 3a                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002699:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
1000269c:	3c 2f                	cmp    al,0x2f
1000269e:	7e 07                	jle    100026a7 <checkExtendedKey(char*)+0x172>
100026a0:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
100026a3:	3c 39                	cmp    al,0x39
100026a5:	7e 07                	jle    100026ae <checkExtendedKey(char*)+0x179>
100026a7:	b8 00 00 00 00       	mov    eax,0x0
100026ac:	eb 25                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026ae:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b1:	3c 2f                	cmp    al,0x2f
100026b3:	7e 07                	jle    100026bc <checkExtendedKey(char*)+0x187>
100026b5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b8:	3c 39                	cmp    al,0x39
100026ba:	7e 07                	jle    100026c3 <checkExtendedKey(char*)+0x18e>
100026bc:	b8 00 00 00 00       	mov    eax,0x0
100026c1:	eb 10                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026c3:	83 ec 04             	sub    esp,0x4
100026c6:	8d 45 ec             	lea    eax,[ebp-0x14]
100026c9:	50                   	push   eax
100026ca:	e8 fc ff ff ff       	call   100026cb <checkExtendedKey(char*)+0x196>	100026cb: R_386_PC32	checkKey(char*)
100026cf:	83 c4 08             	add    esp,0x8
100026d2:	90                   	nop
100026d3:	c9                   	leave  
100026d4:	c3                   	ret    

100026d5 <loadTimezoneStrings()>:
100026d5:	55                   	push   ebp
100026d6:	89 e5                	mov    ebp,esp
100026d8:	53                   	push   ebx
100026d9:	83 ec 34             	sub    esp,0x34
100026dc:	83 ec 0c             	sub    esp,0xc
100026df:	68 14 01 00 00       	push   0x114
100026e4:	e8 fc ff ff ff       	call   100026e5 <loadTimezoneStrings()+0x10>	100026e5: R_386_PC32	operator new(unsigned long)
100026e9:	83 c4 10             	add    esp,0x10
100026ec:	89 c3                	mov    ebx,eax
100026ee:	a1 00 00 00 00       	mov    eax,ds:0x0	100026ef: R_386_32	kernelProcess
100026f3:	83 ec 04             	sub    esp,0x4
100026f6:	50                   	push   eax
100026f7:	68 84 a7 00 10       	push   0x1000a784	100026f8: R_386_32	.text
100026fc:	53                   	push   ebx
100026fd:	e8 fc ff ff ff       	call   100026fe <loadTimezoneStrings()+0x29>	100026fe: R_386_PC32	File::File(char const*, Process*)
10002702:	83 c4 10             	add    esp,0x10
10002705:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10002708:	83 ec 08             	sub    esp,0x8
1000270b:	6a 01                	push   0x1
1000270d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002710:	e8 fc ff ff ff       	call   10002711 <loadTimezoneStrings()+0x3c>	10002711: R_386_PC32	File::open(FileOpenMode)
10002715:	83 c4 10             	add    esp,0x10
10002718:	83 ec 04             	sub    esp,0x4
1000271b:	8d 45 d7             	lea    eax,[ebp-0x29]
1000271e:	50                   	push   eax
1000271f:	8d 45 d8             	lea    eax,[ebp-0x28]
10002722:	50                   	push   eax
10002723:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002726:	e8 fc ff ff ff       	call   10002727 <loadTimezoneStrings()+0x52>	10002727: R_386_PC32	File::stat(unsigned long long*, bool*)
1000272b:	83 c4 10             	add    esp,0x10
1000272e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002731:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002734:	83 ec 0c             	sub    esp,0xc
10002737:	50                   	push   eax
10002738:	e8 fc ff ff ff       	call   10002739 <loadTimezoneStrings()+0x64>	10002739: R_386_PC32	malloc
1000273d:	83 c4 10             	add    esp,0x10
10002740:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002743:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002746:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002749:	83 ec 04             	sub    esp,0x4
1000274c:	50                   	push   eax
1000274d:	6a 00                	push   0x0
1000274f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002752:	e8 fc ff ff ff       	call   10002753 <loadTimezoneStrings()+0x7e>	10002753: R_386_PC32	memset
10002757:	83 c4 10             	add    esp,0x10
1000275a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000275d:	8b 00                	mov    eax,DWORD PTR [eax]
1000275f:	83 c0 0c             	add    eax,0xc
10002762:	8b 08                	mov    ecx,DWORD PTR [eax]
10002764:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002767:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
1000276a:	83 ec 0c             	sub    esp,0xc
1000276d:	8d 5d d0             	lea    ebx,[ebp-0x30]
10002770:	53                   	push   ebx
10002771:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002774:	52                   	push   edx
10002775:	50                   	push   eax
10002776:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002779:	ff d1                	call   ecx
1000277b:	83 c4 20             	add    esp,0x20
1000277e:	83 ec 0c             	sub    esp,0xc
10002781:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002784:	e8 fc ff ff ff       	call   10002785 <loadTimezoneStrings()+0xb0>	10002785: R_386_PC32	File::close()
10002789:	83 c4 10             	add    esp,0x10
1000278c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10002793:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000279a:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
100027a1:	7f 39                	jg     100027dc <loadTimezoneStrings()+0x107>
100027a3:	83 ec 0c             	sub    esp,0xc
100027a6:	6a 78                	push   0x78
100027a8:	e8 fc ff ff ff       	call   100027a9 <loadTimezoneStrings()+0xd4>	100027a9: R_386_PC32	malloc
100027ad:	83 c4 10             	add    esp,0x10
100027b0:	89 c2                	mov    edx,eax
100027b2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027b5:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	100027b8: R_386_32	timezoneStrings
100027bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027bf:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100027c2: R_386_32	timezoneStrings
100027c6:	83 ec 08             	sub    esp,0x8
100027c9:	68 a3 a7 00 10       	push   0x1000a7a3	100027ca: R_386_32	.text
100027ce:	50                   	push   eax
100027cf:	e8 fc ff ff ff       	call   100027d0 <loadTimezoneStrings()+0xfb>	100027d0: R_386_PC32	strcpy
100027d4:	83 c4 10             	add    esp,0x10
100027d7:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100027da:	eb be                	jmp    1000279a <loadTimezoneStrings()+0xc5>
100027dc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100027e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100027e6:	8d 50 01             	lea    edx,[eax+0x1]
100027e9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
100027ec:	89 c2                	mov    edx,eax
100027ee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100027f1:	01 d0                	add    eax,edx
100027f3:	8a 00                	mov    al,BYTE PTR [eax]
100027f5:	88 45 ce             	mov    BYTE PTR [ebp-0x32],al
100027f8:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
100027fc:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
100027ff:	3c 0d                	cmp    al,0xd
10002801:	0f 84 2a 01 00 00    	je     10002931 <loadTimezoneStrings()+0x25c>
10002807:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
1000280a:	3c 09                	cmp    al,0x9
1000280c:	75 3c                	jne    1000284a <loadTimezoneStrings()+0x175>
1000280e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002811:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002814: R_386_32	timezoneStrings
10002818:	83 ec 0c             	sub    esp,0xc
1000281b:	50                   	push   eax
1000281c:	e8 fc ff ff ff       	call   1000281d <loadTimezoneStrings()+0x148>	1000281d: R_386_PC32	strlen
10002821:	83 c4 10             	add    esp,0x10
10002824:	83 f8 08             	cmp    eax,0x8
10002827:	0f 87 0a 01 00 00    	ja     10002937 <loadTimezoneStrings()+0x262>
1000282d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002830:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002833: R_386_32	timezoneStrings
10002837:	83 ec 08             	sub    esp,0x8
1000283a:	68 a3 a7 00 10       	push   0x1000a7a3	1000283b: R_386_32	.text
1000283f:	50                   	push   eax
10002840:	e8 fc ff ff ff       	call   10002841 <loadTimezoneStrings()+0x16c>	10002841: R_386_PC32	strcat
10002845:	83 c4 10             	add    esp,0x10
10002848:	eb c4                	jmp    1000280e <loadTimezoneStrings()+0x139>
1000284a:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
1000284d:	3c 0a                	cmp    al,0xa
1000284f:	75 67                	jne    100028b8 <loadTimezoneStrings()+0x1e3>
10002851:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002854:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002857: R_386_32	timezoneStrings
1000285b:	83 ec 0c             	sub    esp,0xc
1000285e:	50                   	push   eax
1000285f:	e8 fc ff ff ff       	call   10002860 <loadTimezoneStrings()+0x18b>	10002860: R_386_PC32	strlen
10002864:	83 c4 10             	add    esp,0x10
10002867:	83 f8 35             	cmp    eax,0x35
1000286a:	77 1d                	ja     10002889 <loadTimezoneStrings()+0x1b4>
1000286c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000286f:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002872: R_386_32	timezoneStrings
10002876:	83 ec 08             	sub    esp,0x8
10002879:	68 a3 a7 00 10       	push   0x1000a7a3	1000287a: R_386_32	.text
1000287e:	50                   	push   eax
1000287f:	e8 fc ff ff ff       	call   10002880 <loadTimezoneStrings()+0x1ab>	10002880: R_386_PC32	strcat
10002884:	83 c4 10             	add    esp,0x10
10002887:	eb c8                	jmp    10002851 <loadTimezoneStrings()+0x17c>
10002889:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000288c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000288f:	99                   	cdq    
10002890:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10002893:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
10002896:	39 c8                	cmp    eax,ecx
10002898:	89 d0                	mov    eax,edx
1000289a:	19 d8                	sbb    eax,ebx
1000289c:	0f 82 9b 00 00 00    	jb     1000293d <loadTimezoneStrings()+0x268>
100028a2:	83 ec 0c             	sub    esp,0xc
100028a5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
100028a8:	e8 fc ff ff ff       	call   100028a9 <loadTimezoneStrings()+0x1d4>	100028a9: R_386_PC32	free
100028ad:	83 c4 10             	add    esp,0x10
100028b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028b3:	e9 8b 00 00 00       	jmp    10002943 <loadTimezoneStrings()+0x26e>
100028b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028bb:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028be: R_386_32	timezoneStrings
100028c2:	83 ec 0c             	sub    esp,0xc
100028c5:	50                   	push   eax
100028c6:	e8 fc ff ff ff       	call   100028c7 <loadTimezoneStrings()+0x1f2>	100028c7: R_386_PC32	strlen
100028cb:	83 c4 10             	add    esp,0x10
100028ce:	83 f8 31             	cmp    eax,0x31
100028d1:	77 1f                	ja     100028f2 <loadTimezoneStrings()+0x21d>
100028d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028d6:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028d9: R_386_32	timezoneStrings
100028dd:	83 ec 08             	sub    esp,0x8
100028e0:	8d 55 ce             	lea    edx,[ebp-0x32]
100028e3:	52                   	push   edx
100028e4:	50                   	push   eax
100028e5:	e8 fc ff ff ff       	call   100028e6 <loadTimezoneStrings()+0x211>	100028e6: R_386_PC32	strcat
100028ea:	83 c4 10             	add    esp,0x10
100028ed:	e9 f1 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
100028f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028f5:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028f8: R_386_32	timezoneStrings
100028fc:	83 ec 0c             	sub    esp,0xc
100028ff:	50                   	push   eax
10002900:	e8 fc ff ff ff       	call   10002901 <loadTimezoneStrings()+0x22c>	10002901: R_386_PC32	strlen
10002905:	83 c4 10             	add    esp,0x10
10002908:	83 f8 32             	cmp    eax,0x32
1000290b:	0f 85 d2 fe ff ff    	jne    100027e3 <loadTimezoneStrings()+0x10e>
10002911:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002914:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002917: R_386_32	timezoneStrings
1000291b:	83 ec 08             	sub    esp,0x8
1000291e:	68 a5 a7 00 10       	push   0x1000a7a5	1000291f: R_386_32	.text
10002923:	50                   	push   eax
10002924:	e8 fc ff ff ff       	call   10002925 <loadTimezoneStrings()+0x250>	10002925: R_386_PC32	strcat
10002929:	83 c4 10             	add    esp,0x10
1000292c:	e9 b2 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002931:	90                   	nop
10002932:	e9 ac fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002937:	90                   	nop
10002938:	e9 a6 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
1000293d:	90                   	nop
1000293e:	e9 a0 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002943:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002946:	c9                   	leave  
10002947:	c3                   	ret    

10002948 <_bcrypt_rand>:
10002948:	55                   	push   ebp
10002949:	89 e5                	mov    ebp,esp
1000294b:	83 ec 08             	sub    esp,0x8
1000294e:	e8 fc ff ff ff       	call   1000294f <_bcrypt_rand+0x7>	1000294f: R_386_PC32	KeRand()
10002953:	c9                   	leave  
10002954:	c3                   	ret    

10002955 <firstRun(bool)>:
10002955:	55                   	push   ebp
10002956:	89 e5                	mov    ebp,esp
10002958:	57                   	push   edi
10002959:	56                   	push   esi
1000295a:	53                   	push   ebx
1000295b:	81 ec 5c 01 00 00    	sub    esp,0x15c
10002961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002964:	88 85 a4 fe ff ff    	mov    BYTE PTR [ebp-0x15c],al
1000296a:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
10002970:	83 f0 01             	xor    eax,0x1
10002973:	a2 00 00 00 00       	mov    ds:0x0,al	10002974: R_386_32	showSidebar
10002978:	a0 00 00 00 00       	mov    al,ds:0x0	10002979: R_386_32	createNewUserMode
1000297d:	84 c0                	test   al,al
1000297f:	74 4f                	je     100029d0 <firstRun(bool)+0x7b>
10002981:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002983: R_386_32	showSidebar
10002988:	68 1b a6 00 10       	push   0x1000a61b	10002989: R_386_32	.text
1000298d:	68 00 00 00 00       	push   0x0	1000298e: R_386_32	currName
10002992:	e8 fc ff ff ff       	call   10002993 <firstRun(bool)+0x3e>	10002993: R_386_PC32	strcpy
10002997:	83 c4 08             	add    esp,0x8
1000299a:	68 1b a6 00 10       	push   0x1000a61b	1000299b: R_386_32	.text
1000299f:	68 00 00 00 00       	push   0x0	100029a0: R_386_32	currComp
100029a4:	e8 fc ff ff ff       	call   100029a5 <firstRun(bool)+0x50>	100029a5: R_386_PC32	strcpy
100029a9:	83 c4 08             	add    esp,0x8
100029ac:	68 1b a6 00 10       	push   0x1000a61b	100029ad: R_386_32	.text
100029b1:	68 00 00 00 00       	push   0x0	100029b2: R_386_32	passwbufA
100029b6:	e8 fc ff ff ff       	call   100029b7 <firstRun(bool)+0x62>	100029b7: R_386_PC32	strcpy
100029bb:	83 c4 08             	add    esp,0x8
100029be:	68 1b a6 00 10       	push   0x1000a61b	100029bf: R_386_32	.text
100029c3:	68 00 00 00 00       	push   0x0	100029c4: R_386_32	passwbufB
100029c8:	e8 fc ff ff ff       	call   100029c9 <firstRun(bool)+0x74>	100029c9: R_386_PC32	strcpy
100029cd:	83 c4 08             	add    esp,0x8
100029d0:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100029d2: R_386_32	guiKeyboardHandler
	100029d6: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
100029da:	83 ec 0c             	sub    esp,0xc
100029dd:	68 ac a7 00 10       	push   0x1000a7ac	100029de: R_386_32	.text
100029e2:	e8 fc ff ff ff       	call   100029e3 <firstRun(bool)+0x8e>	100029e3: R_386_PC32	KeSetBootMessage(char const*)
100029e7:	83 c4 10             	add    esp,0x10
100029ea:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100029ec: R_386_32	VgaText::hiddenOut
100029f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100029f2: R_386_32	activeTerminal
100029f6:	83 ec 08             	sub    esp,0x8
100029f9:	68 d5 a7 00 10       	push   0x1000a7d5	100029fa: R_386_32	.text
100029fe:	50                   	push   eax
100029ff:	e8 fc ff ff ff       	call   10002a00 <firstRun(bool)+0xab>	10002a00: R_386_PC32	VgaText::puts(char const*)
10002a04:	83 c4 10             	add    esp,0x10
10002a07:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a08: R_386_32	kernelProcess
10002a0c:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
10002a12:	83 ec 08             	sub    esp,0x8
10002a15:	68 d5 a7 00 10       	push   0x1000a7d5	10002a16: R_386_32	.text
10002a1a:	50                   	push   eax
10002a1b:	e8 fc ff ff ff       	call   10002a1c <firstRun(bool)+0xc7>	10002a1c: R_386_PC32	VgaText::puts(char const*)
10002a20:	83 c4 10             	add    esp,0x10
10002a23:	83 ec 0c             	sub    esp,0xc
10002a26:	68 84 01 00 00       	push   0x184
10002a2b:	e8 fc ff ff ff       	call   10002a2c <firstRun(bool)+0xd7>	10002a2c: R_386_PC32	operator new(unsigned long)
10002a30:	83 c4 10             	add    esp,0x10
10002a33:	89 c3                	mov    ebx,eax
10002a35:	83 ec 08             	sub    esp,0x8
10002a38:	68 dc a7 00 10       	push   0x1000a7dc	10002a39: R_386_32	.text
10002a3d:	53                   	push   ebx
10002a3e:	e8 fc ff ff ff       	call   10002a3f <firstRun(bool)+0xea>	10002a3f: R_386_PC32	VgaText::VgaText(char const*)
10002a43:	83 c4 10             	add    esp,0x10
10002a46:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10002a48: R_386_32	term
10002a4c:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a4d: R_386_32	term
10002a51:	83 ec 0c             	sub    esp,0xc
10002a54:	50                   	push   eax
10002a55:	e8 fc ff ff ff       	call   10002a56 <firstRun(bool)+0x101>	10002a56: R_386_PC32	setActiveTerminal(VgaText*)
10002a5a:	83 c4 10             	add    esp,0x10
10002a5d:	e8 fc ff ff ff       	call   10002a5e <firstRun(bool)+0x109>	10002a5e: R_386_PC32	drawBootScreen()
10002a62:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10002a69:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10002a70:	74 17                	je     10002a89 <firstRun(bool)+0x134>
10002a72:	83 ec 08             	sub    esp,0x8
10002a75:	68 e1 a7 00 10       	push   0x1000a7e1	10002a76: R_386_32	.text
10002a7a:	68 00 00 00 00       	push   0x0	10002a7b: R_386_32	pkeybuf
10002a7f:	e8 fc ff ff ff       	call   10002a80 <firstRun(bool)+0x12b>	10002a80: R_386_PC32	strcpy
10002a84:	83 c4 10             	add    esp,0x10
10002a87:	eb 15                	jmp    10002a9e <firstRun(bool)+0x149>
10002a89:	83 ec 08             	sub    esp,0x8
10002a8c:	68 f2 a7 00 10       	push   0x1000a7f2	10002a8d: R_386_32	.text
10002a91:	68 00 00 00 00       	push   0x0	10002a92: R_386_32	pkeybuf
10002a96:	e8 fc ff ff ff       	call   10002a97 <firstRun(bool)+0x142>	10002a97: R_386_PC32	strcpy
10002a9b:	83 c4 10             	add    esp,0x10
10002a9e:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
10002aa4:	83 f0 01             	xor    eax,0x1
10002aa7:	84 c0                	test   al,al
10002aa9:	0f 84 da 1c 00 00    	je     10004789 <firstRun(bool)+0x1e34>
10002aaf:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10002ab6:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002ab8: R_386_32	tzsel
10002ac0:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002ac2: R_386_32	modesel
10002aca:	eb 01                	jmp    10002acd <firstRun(bool)+0x178>
10002acc:	90                   	nop
10002acd:	e8 fc ff ff ff       	call   10002ace <firstRun(bool)+0x179>	10002ace: R_386_PC32	drawBootScreen()
10002ad2:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10002ad9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002adb: R_386_32	installKey
10002ae0:	a0 00 00 00 00       	mov    al,ds:0x0	10002ae1: R_386_32	createNewUserMode
10002ae5:	84 c0                	test   al,al
10002ae7:	74 07                	je     10002af0 <firstRun(bool)+0x19b>
10002ae9:	b8 03 a8 00 10       	mov    eax,0x1000a803	10002aea: R_386_32	.text
10002aee:	eb 05                	jmp    10002af5 <firstRun(bool)+0x1a0>
10002af0:	b8 13 a8 00 10       	mov    eax,0x1000a813	10002af1: R_386_32	.text
10002af5:	83 ec 0c             	sub    esp,0xc
10002af8:	50                   	push   eax
10002af9:	6a 12                	push   0x12
10002afb:	6a 32                	push   0x32
10002afd:	6a 03                	push   0x3
10002aff:	6a 16                	push   0x16
10002b01:	e8 fc ff ff ff       	call   10002b02 <firstRun(bool)+0x1ad>	10002b02: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10002b06:	83 c4 20             	add    esp,0x20
10002b09:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b0a: R_386_32	term
10002b0e:	83 ec 04             	sub    esp,0x4
10002b11:	6a 06                	push   0x6
10002b13:	6a 18                	push   0x18
10002b15:	50                   	push   eax
10002b16:	e8 fc ff ff ff       	call   10002b17 <firstRun(bool)+0x1c2>	10002b17: R_386_PC32	VgaText::setCursor(int, int)
10002b1b:	83 c4 10             	add    esp,0x10
10002b1e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b1f: R_386_32	term
10002b23:	83 ec 08             	sub    esp,0x8
10002b26:	68 20 a8 00 10       	push   0x1000a820	10002b27: R_386_32	.text
10002b2b:	50                   	push   eax
10002b2c:	e8 fc ff ff ff       	call   10002b2d <firstRun(bool)+0x1d8>	10002b2d: R_386_PC32	VgaText::puts(char const*)
10002b31:	83 c4 10             	add    esp,0x10
10002b34:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b35: R_386_32	term
10002b39:	83 ec 04             	sub    esp,0x4
10002b3c:	6a 07                	push   0x7
10002b3e:	6a 18                	push   0x18
10002b40:	50                   	push   eax
10002b41:	e8 fc ff ff ff       	call   10002b42 <firstRun(bool)+0x1ed>	10002b42: R_386_PC32	VgaText::setCursor(int, int)
10002b46:	83 c4 10             	add    esp,0x10
10002b49:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b4a: R_386_32	term
10002b4e:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10002b50: R_386_32	createNewUserMode
10002b54:	84 d2                	test   dl,dl
10002b56:	74 07                	je     10002b5f <firstRun(bool)+0x20a>
10002b58:	ba 50 a8 00 10       	mov    edx,0x1000a850	10002b59: R_386_32	.text
10002b5d:	eb 05                	jmp    10002b64 <firstRun(bool)+0x20f>
10002b5f:	ba 72 a8 00 10       	mov    edx,0x1000a872	10002b60: R_386_32	.text
10002b64:	83 ec 08             	sub    esp,0x8
10002b67:	52                   	push   edx
10002b68:	50                   	push   eax
10002b69:	e8 fc ff ff ff       	call   10002b6a <firstRun(bool)+0x215>	10002b6a: R_386_PC32	VgaText::puts(char const*)
10002b6e:	83 c4 10             	add    esp,0x10
10002b71:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b72: R_386_32	term
10002b76:	83 ec 04             	sub    esp,0x4
10002b79:	6a 09                	push   0x9
10002b7b:	6a 18                	push   0x18
10002b7d:	50                   	push   eax
10002b7e:	e8 fc ff ff ff       	call   10002b7f <firstRun(bool)+0x22a>	10002b7f: R_386_PC32	VgaText::setCursor(int, int)
10002b83:	83 c4 10             	add    esp,0x10
10002b86:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b87: R_386_32	term
10002b8b:	83 ec 08             	sub    esp,0x8
10002b8e:	68 82 a8 00 10       	push   0x1000a882	10002b8f: R_386_32	.text
10002b93:	50                   	push   eax
10002b94:	e8 fc ff ff ff       	call   10002b95 <firstRun(bool)+0x240>	10002b95: R_386_PC32	VgaText::puts(char const*)
10002b99:	83 c4 10             	add    esp,0x10
10002b9c:	a0 00 00 00 00       	mov    al,ds:0x0	10002b9d: R_386_32	createNewUserMode
10002ba1:	83 f0 01             	xor    eax,0x1
10002ba4:	84 c0                	test   al,al
10002ba6:	74 2b                	je     10002bd3 <firstRun(bool)+0x27e>
10002ba8:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ba9: R_386_32	term
10002bad:	83 ec 04             	sub    esp,0x4
10002bb0:	6a 0b                	push   0xb
10002bb2:	6a 18                	push   0x18
10002bb4:	50                   	push   eax
10002bb5:	e8 fc ff ff ff       	call   10002bb6 <firstRun(bool)+0x261>	10002bb6: R_386_PC32	VgaText::setCursor(int, int)
10002bba:	83 c4 10             	add    esp,0x10
10002bbd:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bbe: R_386_32	term
10002bc2:	83 ec 08             	sub    esp,0x8
10002bc5:	68 87 a8 00 10       	push   0x1000a887	10002bc6: R_386_32	.text
10002bca:	50                   	push   eax
10002bcb:	e8 fc ff ff ff       	call   10002bcc <firstRun(bool)+0x277>	10002bcc: R_386_PC32	VgaText::puts(char const*)
10002bd0:	83 c4 10             	add    esp,0x10
10002bd3:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bd4: R_386_32	term
10002bd8:	83 ec 04             	sub    esp,0x4
10002bdb:	6a 0d                	push   0xd
10002bdd:	6a 18                	push   0x18
10002bdf:	50                   	push   eax
10002be0:	e8 fc ff ff ff       	call   10002be1 <firstRun(bool)+0x28c>	10002be1: R_386_PC32	VgaText::setCursor(int, int)
10002be5:	83 c4 10             	add    esp,0x10
10002be8:	a1 00 00 00 00       	mov    eax,ds:0x0	10002be9: R_386_32	term
10002bed:	83 ec 08             	sub    esp,0x8
10002bf0:	68 8f a8 00 10       	push   0x1000a88f	10002bf1: R_386_32	.text
10002bf5:	50                   	push   eax
10002bf6:	e8 fc ff ff ff       	call   10002bf7 <firstRun(bool)+0x2a2>	10002bf7: R_386_PC32	VgaText::puts(char const*)
10002bfb:	83 c4 10             	add    esp,0x10
10002bfe:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bff: R_386_32	term
10002c03:	83 ec 04             	sub    esp,0x4
10002c06:	6a 0f                	push   0xf
10002c08:	6a 18                	push   0x18
10002c0a:	50                   	push   eax
10002c0b:	e8 fc ff ff ff       	call   10002c0c <firstRun(bool)+0x2b7>	10002c0c: R_386_PC32	VgaText::setCursor(int, int)
10002c10:	83 c4 10             	add    esp,0x10
10002c13:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c14: R_386_32	term
10002c18:	83 ec 08             	sub    esp,0x8
10002c1b:	68 98 a8 00 10       	push   0x1000a898	10002c1c: R_386_32	.text
10002c20:	50                   	push   eax
10002c21:	e8 fc ff ff ff       	call   10002c22 <firstRun(bool)+0x2cd>	10002c22: R_386_PC32	VgaText::puts(char const*)
10002c26:	83 c4 10             	add    esp,0x10
10002c29:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c2a: R_386_32	term
10002c2e:	83 ec 04             	sub    esp,0x4
10002c31:	6a 10                	push   0x10
10002c33:	6a 18                	push   0x18
10002c35:	50                   	push   eax
10002c36:	e8 fc ff ff ff       	call   10002c37 <firstRun(bool)+0x2e2>	10002c37: R_386_PC32	VgaText::setCursor(int, int)
10002c3b:	83 c4 10             	add    esp,0x10
10002c3e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c3f: R_386_32	term
10002c43:	83 ec 08             	sub    esp,0x8
10002c46:	68 a0 a8 00 10       	push   0x1000a8a0	10002c47: R_386_32	.text
10002c4b:	50                   	push   eax
10002c4c:	e8 fc ff ff ff       	call   10002c4d <firstRun(bool)+0x2f8>	10002c4d: R_386_PC32	VgaText::puts(char const*)
10002c51:	83 c4 10             	add    esp,0x10
10002c54:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c55: R_386_32	term
10002c59:	83 ec 04             	sub    esp,0x4
10002c5c:	6a 09                	push   0x9
10002c5e:	6a 21                	push   0x21
10002c60:	50                   	push   eax
10002c61:	e8 fc ff ff ff       	call   10002c62 <firstRun(bool)+0x30d>	10002c62: R_386_PC32	VgaText::setCursor(int, int)
10002c66:	83 c4 10             	add    esp,0x10
10002c69:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c6a: R_386_32	term
10002c6e:	6a 07                	push   0x7
10002c70:	6a 00                	push   0x0
10002c72:	68 ac a8 00 10       	push   0x1000a8ac	10002c73: R_386_32	.text
10002c77:	50                   	push   eax
10002c78:	e8 fc ff ff ff       	call   10002c79 <firstRun(bool)+0x324>	10002c79: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c7d:	83 c4 10             	add    esp,0x10
10002c80:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c81: R_386_32	term
10002c85:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10002c89:	75 07                	jne    10002c92 <firstRun(bool)+0x33d>
10002c8b:	ba d1 a8 00 10       	mov    edx,0x1000a8d1	10002c8c: R_386_32	.text
10002c90:	eb 05                	jmp    10002c97 <firstRun(bool)+0x342>
10002c92:	ba d4 a8 00 10       	mov    edx,0x1000a8d4	10002c93: R_386_32	.text
10002c97:	6a 0f                	push   0xf
10002c99:	6a 00                	push   0x0
10002c9b:	52                   	push   edx
10002c9c:	50                   	push   eax
10002c9d:	e8 fc ff ff ff       	call   10002c9e <firstRun(bool)+0x349>	10002c9e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ca2:	83 c4 10             	add    esp,0x10
10002ca5:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ca6: R_386_32	term
10002caa:	83 ec 08             	sub    esp,0x8
10002cad:	6a 21                	push   0x21
10002caf:	50                   	push   eax
10002cb0:	e8 fc ff ff ff       	call   10002cb1 <firstRun(bool)+0x35c>	10002cb1: R_386_PC32	VgaText::setCursorX(int)
10002cb5:	83 c4 10             	add    esp,0x10
10002cb8:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cb9: R_386_32	term
10002cbd:	6a 07                	push   0x7
10002cbf:	6a 00                	push   0x0
10002cc1:	68 00 00 00 00       	push   0x0	10002cc2: R_386_32	currName
10002cc6:	50                   	push   eax
10002cc7:	e8 fc ff ff ff       	call   10002cc8 <firstRun(bool)+0x373>	10002cc8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ccc:	83 c4 10             	add    esp,0x10
10002ccf:	a0 00 00 00 00       	mov    al,ds:0x0	10002cd0: R_386_32	createNewUserMode
10002cd4:	83 f0 01             	xor    eax,0x1
10002cd7:	84 c0                	test   al,al
10002cd9:	74 7b                	je     10002d56 <firstRun(bool)+0x401>
10002cdb:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cdc: R_386_32	term
10002ce0:	83 ec 04             	sub    esp,0x4
10002ce3:	6a 0b                	push   0xb
10002ce5:	6a 21                	push   0x21
10002ce7:	50                   	push   eax
10002ce8:	e8 fc ff ff ff       	call   10002ce9 <firstRun(bool)+0x394>	10002ce9: R_386_PC32	VgaText::setCursor(int, int)
10002ced:	83 c4 10             	add    esp,0x10
10002cf0:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cf1: R_386_32	term
10002cf5:	6a 07                	push   0x7
10002cf7:	6a 00                	push   0x0
10002cf9:	68 ac a8 00 10       	push   0x1000a8ac	10002cfa: R_386_32	.text
10002cfe:	50                   	push   eax
10002cff:	e8 fc ff ff ff       	call   10002d00 <firstRun(bool)+0x3ab>	10002d00: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d04:	83 c4 10             	add    esp,0x10
10002d07:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d08: R_386_32	term
10002d0c:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10002d10:	75 07                	jne    10002d19 <firstRun(bool)+0x3c4>
10002d12:	ba d1 a8 00 10       	mov    edx,0x1000a8d1	10002d13: R_386_32	.text
10002d17:	eb 05                	jmp    10002d1e <firstRun(bool)+0x3c9>
10002d19:	ba d4 a8 00 10       	mov    edx,0x1000a8d4	10002d1a: R_386_32	.text
10002d1e:	6a 0f                	push   0xf
10002d20:	6a 00                	push   0x0
10002d22:	52                   	push   edx
10002d23:	50                   	push   eax
10002d24:	e8 fc ff ff ff       	call   10002d25 <firstRun(bool)+0x3d0>	10002d25: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d29:	83 c4 10             	add    esp,0x10
10002d2c:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d2d: R_386_32	term
10002d31:	83 ec 08             	sub    esp,0x8
10002d34:	6a 21                	push   0x21
10002d36:	50                   	push   eax
10002d37:	e8 fc ff ff ff       	call   10002d38 <firstRun(bool)+0x3e3>	10002d38: R_386_PC32	VgaText::setCursorX(int)
10002d3c:	83 c4 10             	add    esp,0x10
10002d3f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d40: R_386_32	term
10002d44:	6a 07                	push   0x7
10002d46:	6a 00                	push   0x0
10002d48:	68 00 00 00 00       	push   0x0	10002d49: R_386_32	currComp
10002d4d:	50                   	push   eax
10002d4e:	e8 fc ff ff ff       	call   10002d4f <firstRun(bool)+0x3fa>	10002d4f: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d53:	83 c4 10             	add    esp,0x10
10002d56:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d57: R_386_32	term
10002d5b:	83 ec 04             	sub    esp,0x4
10002d5e:	6a 0d                	push   0xd
10002d60:	6a 21                	push   0x21
10002d62:	50                   	push   eax
10002d63:	e8 fc ff ff ff       	call   10002d64 <firstRun(bool)+0x40f>	10002d64: R_386_PC32	VgaText::setCursor(int, int)
10002d68:	83 c4 10             	add    esp,0x10
10002d6b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d6c: R_386_32	term
10002d70:	6a 07                	push   0x7
10002d72:	6a 00                	push   0x0
10002d74:	68 ac a8 00 10       	push   0x1000a8ac	10002d75: R_386_32	.text
10002d79:	50                   	push   eax
10002d7a:	e8 fc ff ff ff       	call   10002d7b <firstRun(bool)+0x426>	10002d7b: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d7f:	83 c4 10             	add    esp,0x10
10002d82:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d83: R_386_32	term
10002d87:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10002d8b:	75 07                	jne    10002d94 <firstRun(bool)+0x43f>
10002d8d:	ba d1 a8 00 10       	mov    edx,0x1000a8d1	10002d8e: R_386_32	.text
10002d92:	eb 05                	jmp    10002d99 <firstRun(bool)+0x444>
10002d94:	ba d4 a8 00 10       	mov    edx,0x1000a8d4	10002d95: R_386_32	.text
10002d99:	6a 0f                	push   0xf
10002d9b:	6a 00                	push   0x0
10002d9d:	52                   	push   edx
10002d9e:	50                   	push   eax
10002d9f:	e8 fc ff ff ff       	call   10002da0 <firstRun(bool)+0x44b>	10002da0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002da4:	83 c4 10             	add    esp,0x10
10002da7:	a1 00 00 00 00       	mov    eax,ds:0x0	10002da8: R_386_32	term
10002dac:	83 ec 08             	sub    esp,0x8
10002daf:	6a 21                	push   0x21
10002db1:	50                   	push   eax
10002db2:	e8 fc ff ff ff       	call   10002db3 <firstRun(bool)+0x45e>	10002db3: R_386_PC32	VgaText::setCursorX(int)
10002db7:	83 c4 10             	add    esp,0x10
10002dba:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10002dc1:	83 ec 0c             	sub    esp,0xc
10002dc4:	68 00 00 00 00       	push   0x0	10002dc5: R_386_32	passwbufA
10002dc9:	e8 fc ff ff ff       	call   10002dca <firstRun(bool)+0x475>	10002dca: R_386_PC32	strlen
10002dce:	83 c4 10             	add    esp,0x10
10002dd1:	89 c2                	mov    edx,eax
10002dd3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002dd6:	39 c2                	cmp    edx,eax
10002dd8:	76 1c                	jbe    10002df6 <firstRun(bool)+0x4a1>
10002dda:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ddb: R_386_32	term
10002ddf:	6a 07                	push   0x7
10002de1:	6a 00                	push   0x0
10002de3:	68 d8 a8 00 10       	push   0x1000a8d8	10002de4: R_386_32	.text
10002de8:	50                   	push   eax
10002de9:	e8 fc ff ff ff       	call   10002dea <firstRun(bool)+0x495>	10002dea: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002dee:	83 c4 10             	add    esp,0x10
10002df1:	ff 45 d8             	inc    DWORD PTR [ebp-0x28]
10002df4:	eb cb                	jmp    10002dc1 <firstRun(bool)+0x46c>
10002df6:	a1 00 00 00 00       	mov    eax,ds:0x0	10002df7: R_386_32	term
10002dfb:	83 ec 04             	sub    esp,0x4
10002dfe:	6a 0f                	push   0xf
10002e00:	6a 21                	push   0x21
10002e02:	50                   	push   eax
10002e03:	e8 fc ff ff ff       	call   10002e04 <firstRun(bool)+0x4af>	10002e04: R_386_PC32	VgaText::setCursor(int, int)
10002e08:	83 c4 10             	add    esp,0x10
10002e0b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e0c: R_386_32	term
10002e10:	6a 07                	push   0x7
10002e12:	6a 00                	push   0x0
10002e14:	68 ac a8 00 10       	push   0x1000a8ac	10002e15: R_386_32	.text
10002e19:	50                   	push   eax
10002e1a:	e8 fc ff ff ff       	call   10002e1b <firstRun(bool)+0x4c6>	10002e1b: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e1f:	83 c4 10             	add    esp,0x10
10002e22:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e23: R_386_32	term
10002e27:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10002e2b:	75 07                	jne    10002e34 <firstRun(bool)+0x4df>
10002e2d:	ba d1 a8 00 10       	mov    edx,0x1000a8d1	10002e2e: R_386_32	.text
10002e32:	eb 05                	jmp    10002e39 <firstRun(bool)+0x4e4>
10002e34:	ba d4 a8 00 10       	mov    edx,0x1000a8d4	10002e35: R_386_32	.text
10002e39:	6a 0f                	push   0xf
10002e3b:	6a 00                	push   0x0
10002e3d:	52                   	push   edx
10002e3e:	50                   	push   eax
10002e3f:	e8 fc ff ff ff       	call   10002e40 <firstRun(bool)+0x4eb>	10002e40: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e44:	83 c4 10             	add    esp,0x10
10002e47:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e48: R_386_32	term
10002e4c:	83 ec 08             	sub    esp,0x8
10002e4f:	6a 21                	push   0x21
10002e51:	50                   	push   eax
10002e52:	e8 fc ff ff ff       	call   10002e53 <firstRun(bool)+0x4fe>	10002e53: R_386_PC32	VgaText::setCursorX(int)
10002e57:	83 c4 10             	add    esp,0x10
10002e5a:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10002e61:	83 ec 0c             	sub    esp,0xc
10002e64:	68 00 00 00 00       	push   0x0	10002e65: R_386_32	passwbufB
10002e69:	e8 fc ff ff ff       	call   10002e6a <firstRun(bool)+0x515>	10002e6a: R_386_PC32	strlen
10002e6e:	83 c4 10             	add    esp,0x10
10002e71:	89 c2                	mov    edx,eax
10002e73:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10002e76:	39 c2                	cmp    edx,eax
10002e78:	76 1c                	jbe    10002e96 <firstRun(bool)+0x541>
10002e7a:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e7b: R_386_32	term
10002e7f:	6a 07                	push   0x7
10002e81:	6a 00                	push   0x0
10002e83:	68 d8 a8 00 10       	push   0x1000a8d8	10002e84: R_386_32	.text
10002e88:	50                   	push   eax
10002e89:	e8 fc ff ff ff       	call   10002e8a <firstRun(bool)+0x535>	10002e8a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e8e:	83 c4 10             	add    esp,0x10
10002e91:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10002e94:	eb cb                	jmp    10002e61 <firstRun(bool)+0x50c>
10002e96:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e97: R_386_32	term
10002e9b:	83 ec 04             	sub    esp,0x4
10002e9e:	6a 14                	push   0x14
10002ea0:	6a 18                	push   0x18
10002ea2:	50                   	push   eax
10002ea3:	e8 fc ff ff ff       	call   10002ea4 <firstRun(bool)+0x54f>	10002ea4: R_386_PC32	VgaText::setCursor(int, int)
10002ea8:	83 c4 10             	add    esp,0x10
10002eab:	a1 00 00 00 00       	mov    eax,ds:0x0	10002eac: R_386_32	term
10002eb0:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002eb4:	75 07                	jne    10002ebd <firstRun(bool)+0x568>
10002eb6:	ba da a8 00 10       	mov    edx,0x1000a8da	10002eb7: R_386_32	.text
10002ebb:	eb 05                	jmp    10002ec2 <firstRun(bool)+0x56d>
10002ebd:	ba f0 a8 00 10       	mov    edx,0x1000a8f0	10002ebe: R_386_32	.text
10002ec2:	6a 0f                	push   0xf
10002ec4:	6a 08                	push   0x8
10002ec6:	52                   	push   edx
10002ec7:	50                   	push   eax
10002ec8:	e8 fc ff ff ff       	call   10002ec9 <firstRun(bool)+0x574>	10002ec9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ecd:	83 c4 10             	add    esp,0x10
10002ed0:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ed1: R_386_32	term
10002ed5:	83 ec 04             	sub    esp,0x4
10002ed8:	6a 14                	push   0x14
10002eda:	6a 3c                	push   0x3c
10002edc:	50                   	push   eax
10002edd:	e8 fc ff ff ff       	call   10002ede <firstRun(bool)+0x589>	10002ede: R_386_PC32	VgaText::setCursor(int, int)
10002ee2:	83 c4 10             	add    esp,0x10
10002ee5:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002ee9:	74 19                	je     10002f04 <firstRun(bool)+0x5af>
10002eeb:	a1 00 00 00 00       	mov    eax,ds:0x0	10002eec: R_386_32	term
10002ef0:	6a 08                	push   0x8
10002ef2:	6a 0f                	push   0xf
10002ef4:	68 07 a9 00 10       	push   0x1000a907	10002ef5: R_386_32	.text
10002ef9:	50                   	push   eax
10002efa:	e8 fc ff ff ff       	call   10002efb <firstRun(bool)+0x5a6>	10002efb: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002eff:	83 c4 10             	add    esp,0x10
10002f02:	eb 17                	jmp    10002f1b <firstRun(bool)+0x5c6>
10002f04:	a1 00 00 00 00       	mov    eax,ds:0x0	10002f05: R_386_32	term
10002f09:	6a 01                	push   0x1
10002f0b:	6a 0f                	push   0xf
10002f0d:	68 07 a9 00 10       	push   0x1000a907	10002f0e: R_386_32	.text
10002f12:	50                   	push   eax
10002f13:	e8 fc ff ff ff       	call   10002f14 <firstRun(bool)+0x5bf>	10002f14: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002f18:	83 c4 10             	add    esp,0x10
10002f1b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002f1c: R_386_32	term
10002f20:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002f24:	75 07                	jne    10002f2d <firstRun(bool)+0x5d8>
10002f26:	ba 10 a9 00 10       	mov    edx,0x1000a910	10002f27: R_386_32	.text
10002f2b:	eb 05                	jmp    10002f32 <firstRun(bool)+0x5dd>
10002f2d:	ba d4 a8 00 10       	mov    edx,0x1000a8d4	10002f2e: R_386_32	.text
10002f32:	6a 0f                	push   0xf
10002f34:	6a 00                	push   0x0
10002f36:	52                   	push   edx
10002f37:	50                   	push   eax
10002f38:	e8 fc ff ff ff       	call   10002f39 <firstRun(bool)+0x5e4>	10002f39: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002f3d:	83 c4 10             	add    esp,0x10
10002f40:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10002f44:	75 28                	jne    10002f6e <firstRun(bool)+0x619>
10002f46:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f48: R_386_32	term
10002f4c:	83 ec 0c             	sub    esp,0xc
10002f4f:	68 00 00 00 00       	push   0x0	10002f50: R_386_32	currName
10002f54:	e8 fc ff ff ff       	call   10002f55 <firstRun(bool)+0x600>	10002f55: R_386_PC32	strlen
10002f59:	83 c4 10             	add    esp,0x10
10002f5c:	83 c0 21             	add    eax,0x21
10002f5f:	83 ec 04             	sub    esp,0x4
10002f62:	6a 09                	push   0x9
10002f64:	50                   	push   eax
10002f65:	53                   	push   ebx
10002f66:	e8 fc ff ff ff       	call   10002f67 <firstRun(bool)+0x612>	10002f67: R_386_PC32	VgaText::setCursor(int, int)
10002f6b:	83 c4 10             	add    esp,0x10
10002f6e:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10002f72:	75 28                	jne    10002f9c <firstRun(bool)+0x647>
10002f74:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f76: R_386_32	term
10002f7a:	83 ec 0c             	sub    esp,0xc
10002f7d:	68 00 00 00 00       	push   0x0	10002f7e: R_386_32	currComp
10002f82:	e8 fc ff ff ff       	call   10002f83 <firstRun(bool)+0x62e>	10002f83: R_386_PC32	strlen
10002f87:	83 c4 10             	add    esp,0x10
10002f8a:	83 c0 21             	add    eax,0x21
10002f8d:	83 ec 04             	sub    esp,0x4
10002f90:	6a 0b                	push   0xb
10002f92:	50                   	push   eax
10002f93:	53                   	push   ebx
10002f94:	e8 fc ff ff ff       	call   10002f95 <firstRun(bool)+0x640>	10002f95: R_386_PC32	VgaText::setCursor(int, int)
10002f99:	83 c4 10             	add    esp,0x10
10002f9c:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10002fa0:	75 28                	jne    10002fca <firstRun(bool)+0x675>
10002fa2:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002fa4: R_386_32	term
10002fa8:	83 ec 0c             	sub    esp,0xc
10002fab:	68 00 00 00 00       	push   0x0	10002fac: R_386_32	passwbufA
10002fb0:	e8 fc ff ff ff       	call   10002fb1 <firstRun(bool)+0x65c>	10002fb1: R_386_PC32	strlen
10002fb5:	83 c4 10             	add    esp,0x10
10002fb8:	83 c0 21             	add    eax,0x21
10002fbb:	83 ec 04             	sub    esp,0x4
10002fbe:	6a 0d                	push   0xd
10002fc0:	50                   	push   eax
10002fc1:	53                   	push   ebx
10002fc2:	e8 fc ff ff ff       	call   10002fc3 <firstRun(bool)+0x66e>	10002fc3: R_386_PC32	VgaText::setCursor(int, int)
10002fc7:	83 c4 10             	add    esp,0x10
10002fca:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10002fce:	75 28                	jne    10002ff8 <firstRun(bool)+0x6a3>
10002fd0:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002fd2: R_386_32	term
10002fd6:	83 ec 0c             	sub    esp,0xc
10002fd9:	68 00 00 00 00       	push   0x0	10002fda: R_386_32	passwbufB
10002fde:	e8 fc ff ff ff       	call   10002fdf <firstRun(bool)+0x68a>	10002fdf: R_386_PC32	strlen
10002fe3:	83 c4 10             	add    esp,0x10
10002fe6:	83 c0 21             	add    eax,0x21
10002fe9:	83 ec 04             	sub    esp,0x4
10002fec:	6a 0f                	push   0xf
10002fee:	50                   	push   eax
10002fef:	53                   	push   ebx
10002ff0:	e8 fc ff ff ff       	call   10002ff1 <firstRun(bool)+0x69c>	10002ff1: R_386_PC32	VgaText::setCursor(int, int)
10002ff5:	83 c4 10             	add    esp,0x10
10002ff8:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002ffc:	75 15                	jne    10003013 <firstRun(bool)+0x6be>
10002ffe:	a1 00 00 00 00       	mov    eax,ds:0x0	10002fff: R_386_32	term
10003003:	83 ec 04             	sub    esp,0x4
10003006:	6a 02                	push   0x2
10003008:	6a 00                	push   0x0
1000300a:	50                   	push   eax
1000300b:	e8 fc ff ff ff       	call   1000300c <firstRun(bool)+0x6b7>	1000300c: R_386_PC32	VgaText::setCursor(int, int)
10003010:	83 c4 10             	add    esp,0x10
10003013:	a0 00 00 00 00       	mov    al,ds:0x0	10003014: R_386_32	installKey
10003018:	84 c0                	test   al,al
1000301a:	0f 94 c0             	sete   al
1000301d:	84 c0                	test   al,al
1000301f:	74 02                	je     10003023 <firstRun(bool)+0x6ce>
10003021:	eb f0                	jmp    10003013 <firstRun(bool)+0x6be>
10003023:	a1 00 00 00 00       	mov    eax,ds:0x0	10003024: R_386_32	term
10003028:	05 82 00 00 00       	add    eax,0x82
1000302d:	83 ec 04             	sub    esp,0x4
10003030:	6a 10                	push   0x10
10003032:	6a 00                	push   0x0
10003034:	50                   	push   eax
10003035:	e8 fc ff ff ff       	call   10003036 <firstRun(bool)+0x6e1>	10003036: R_386_PC32	memset
1000303a:	83 c4 10             	add    esp,0x10
1000303d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000303e: R_386_32	term
10003042:	05 02 01 00 00       	add    eax,0x102
10003047:	83 ec 04             	sub    esp,0x4
1000304a:	6a 10                	push   0x10
1000304c:	6a 00                	push   0x0
1000304e:	50                   	push   eax
1000304f:	e8 fc ff ff ff       	call   10003050 <firstRun(bool)+0x6fb>	10003050: R_386_PC32	memset
10003054:	83 c4 10             	add    esp,0x10
10003057:	a0 00 00 00 00       	mov    al,ds:0x0	10003058: R_386_32	installKey
1000305c:	3c 09                	cmp    al,0x9
1000305e:	74 09                	je     10003069 <firstRun(bool)+0x714>
10003060:	a0 00 00 00 00       	mov    al,ds:0x0	10003061: R_386_32	installKey
10003065:	3c 0a                	cmp    al,0xa
10003067:	75 04                	jne    1000306d <firstRun(bool)+0x718>
10003069:	b0 01                	mov    al,0x1
1000306b:	eb 02                	jmp    1000306f <firstRun(bool)+0x71a>
1000306d:	b0 00                	mov    al,0x0
1000306f:	84 c0                	test   al,al
10003071:	0f 84 c8 00 00 00    	je     1000313f <firstRun(bool)+0x7ea>
10003077:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
1000307b:	75 0d                	jne    1000308a <firstRun(bool)+0x735>
1000307d:	a0 00 00 00 00       	mov    al,ds:0x0	1000307e: R_386_32	installKey
10003082:	3c 0a                	cmp    al,0xa
10003084:	75 04                	jne    1000308a <firstRun(bool)+0x735>
10003086:	b0 01                	mov    al,0x1
10003088:	eb 02                	jmp    1000308c <firstRun(bool)+0x737>
1000308a:	b0 00                	mov    al,0x0
1000308c:	84 c0                	test   al,al
1000308e:	74 72                	je     10003102 <firstRun(bool)+0x7ad>
10003090:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003092: R_386_32	installKey
10003097:	83 ec 08             	sub    esp,0x8
1000309a:	68 00 00 00 00       	push   0x0	1000309b: R_386_32	passwbufB
1000309f:	68 00 00 00 00       	push   0x0	100030a0: R_386_32	passwbufA
100030a4:	e8 fc ff ff ff       	call   100030a5 <firstRun(bool)+0x750>	100030a5: R_386_PC32	strcmp
100030a9:	83 c4 10             	add    esp,0x10
100030ac:	85 c0                	test   eax,eax
100030ae:	75 21                	jne    100030d1 <firstRun(bool)+0x77c>
100030b0:	83 ec 0c             	sub    esp,0xc
100030b3:	68 00 00 00 00       	push   0x0	100030b4: R_386_32	currName
100030b8:	e8 fc ff ff ff       	call   100030b9 <firstRun(bool)+0x764>	100030b9: R_386_PC32	strlen
100030bd:	83 c4 10             	add    esp,0x10
100030c0:	85 c0                	test   eax,eax
100030c2:	0f 85 26 03 00 00    	jne    100033ee <firstRun(bool)+0xa99>
100030c8:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100030cf:	eb 57                	jmp    10003128 <firstRun(bool)+0x7d3>
100030d1:	c7 45 e0 02 00 00 00 	mov    DWORD PTR [ebp-0x20],0x2
100030d8:	83 ec 04             	sub    esp,0x4
100030db:	6a 30                	push   0x30
100030dd:	6a 00                	push   0x0
100030df:	68 00 00 00 00       	push   0x0	100030e0: R_386_32	passwbufA
100030e4:	e8 fc ff ff ff       	call   100030e5 <firstRun(bool)+0x790>	100030e5: R_386_PC32	memset
100030e9:	83 c4 10             	add    esp,0x10
100030ec:	83 ec 04             	sub    esp,0x4
100030ef:	6a 30                	push   0x30
100030f1:	6a 00                	push   0x0
100030f3:	68 00 00 00 00       	push   0x0	100030f4: R_386_32	passwbufB
100030f8:	e8 fc ff ff ff       	call   100030f9 <firstRun(bool)+0x7a4>	100030f9: R_386_PC32	memset
100030fd:	83 c4 10             	add    esp,0x10
10003100:	eb 26                	jmp    10003128 <firstRun(bool)+0x7d3>
10003102:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10003105:	a0 00 00 00 00       	mov    al,ds:0x0	10003106: R_386_32	createNewUserMode
1000310a:	84 c0                	test   al,al
1000310c:	74 0d                	je     1000311b <firstRun(bool)+0x7c6>
1000310e:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003112:	75 07                	jne    1000311b <firstRun(bool)+0x7c6>
10003114:	c7 45 e0 02 00 00 00 	mov    DWORD PTR [ebp-0x20],0x2
1000311b:	83 7d e0 05          	cmp    DWORD PTR [ebp-0x20],0x5
1000311f:	75 07                	jne    10003128 <firstRun(bool)+0x7d3>
10003121:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003128:	83 ec 08             	sub    esp,0x8
1000312b:	6a 00                	push   0x0
1000312d:	68 2c 01 00 00       	push   0x12c
10003132:	e8 fc ff ff ff       	call   10003133 <firstRun(bool)+0x7de>	10003133: R_386_PC32	milliTenthSleep(unsigned long long)
10003137:	83 c4 10             	add    esp,0x10
1000313a:	e9 a3 02 00 00       	jmp    100033e2 <firstRun(bool)+0xa8d>
1000313f:	a0 00 00 00 00       	mov    al,ds:0x0	10003140: R_386_32	installKey
10003144:	3c 1f                	cmp    al,0x1f
10003146:	7e 0d                	jle    10003155 <firstRun(bool)+0x800>
10003148:	a0 00 00 00 00       	mov    al,ds:0x0	10003149: R_386_32	installKey
1000314d:	3c 7f                	cmp    al,0x7f
1000314f:	74 04                	je     10003155 <firstRun(bool)+0x800>
10003151:	b0 01                	mov    al,0x1
10003153:	eb 02                	jmp    10003157 <firstRun(bool)+0x802>
10003155:	b0 00                	mov    al,0x0
10003157:	84 c0                	test   al,al
10003159:	0f 84 39 01 00 00    	je     10003298 <firstRun(bool)+0x943>
1000315f:	a0 00 00 00 00       	mov    al,ds:0x0	10003160: R_386_32	installKey
10003164:	88 85 c6 fe ff ff    	mov    BYTE PTR [ebp-0x13a],al
1000316a:	c6 85 c7 fe ff ff 00 	mov    BYTE PTR [ebp-0x139],0x0
10003171:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10003175:	75 7e                	jne    100031f5 <firstRun(bool)+0x8a0>
10003177:	83 ec 0c             	sub    esp,0xc
1000317a:	68 00 00 00 00       	push   0x0	1000317b: R_386_32	currName
1000317f:	e8 fc ff ff ff       	call   10003180 <firstRun(bool)+0x82b>	10003180: R_386_PC32	strlen
10003184:	83 c4 10             	add    esp,0x10
10003187:	83 f8 22             	cmp    eax,0x22
1000318a:	77 69                	ja     100031f5 <firstRun(bool)+0x8a0>
1000318c:	a0 00 00 00 00       	mov    al,ds:0x0	1000318d: R_386_32	installKey
10003191:	3c 40                	cmp    al,0x40
10003193:	7e 09                	jle    1000319e <firstRun(bool)+0x849>
10003195:	a0 00 00 00 00       	mov    al,ds:0x0	10003196: R_386_32	installKey
1000319a:	3c 59                	cmp    al,0x59
1000319c:	7f 36                	jg     100031d4 <firstRun(bool)+0x87f>
1000319e:	a0 00 00 00 00       	mov    al,ds:0x0	1000319f: R_386_32	installKey
100031a3:	3c 60                	cmp    al,0x60
100031a5:	7e 09                	jle    100031b0 <firstRun(bool)+0x85b>
100031a7:	a0 00 00 00 00       	mov    al,ds:0x0	100031a8: R_386_32	installKey
100031ac:	3c 79                	cmp    al,0x79
100031ae:	7f 24                	jg     100031d4 <firstRun(bool)+0x87f>
100031b0:	a0 00 00 00 00       	mov    al,ds:0x0	100031b1: R_386_32	installKey
100031b5:	3c 2f                	cmp    al,0x2f
100031b7:	7e 09                	jle    100031c2 <firstRun(bool)+0x86d>
100031b9:	a0 00 00 00 00       	mov    al,ds:0x0	100031ba: R_386_32	installKey
100031be:	3c 38                	cmp    al,0x38
100031c0:	7f 12                	jg     100031d4 <firstRun(bool)+0x87f>
100031c2:	a0 00 00 00 00       	mov    al,ds:0x0	100031c3: R_386_32	installKey
100031c7:	3c 5f                	cmp    al,0x5f
100031c9:	74 09                	je     100031d4 <firstRun(bool)+0x87f>
100031cb:	a0 00 00 00 00       	mov    al,ds:0x0	100031cc: R_386_32	installKey
100031d0:	3c 20                	cmp    al,0x20
100031d2:	75 04                	jne    100031d8 <firstRun(bool)+0x883>
100031d4:	b0 01                	mov    al,0x1
100031d6:	eb 02                	jmp    100031da <firstRun(bool)+0x885>
100031d8:	b0 00                	mov    al,0x0
100031da:	84 c0                	test   al,al
100031dc:	74 17                	je     100031f5 <firstRun(bool)+0x8a0>
100031de:	83 ec 08             	sub    esp,0x8
100031e1:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
100031e7:	50                   	push   eax
100031e8:	68 00 00 00 00       	push   0x0	100031e9: R_386_32	currName
100031ed:	e8 fc ff ff ff       	call   100031ee <firstRun(bool)+0x899>	100031ee: R_386_PC32	strcat
100031f2:	83 c4 10             	add    esp,0x10
100031f5:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
100031f9:	75 2c                	jne    10003227 <firstRun(bool)+0x8d2>
100031fb:	83 ec 0c             	sub    esp,0xc
100031fe:	68 00 00 00 00       	push   0x0	100031ff: R_386_32	currComp
10003203:	e8 fc ff ff ff       	call   10003204 <firstRun(bool)+0x8af>	10003204: R_386_PC32	strlen
10003208:	83 c4 10             	add    esp,0x10
1000320b:	83 f8 22             	cmp    eax,0x22
1000320e:	77 17                	ja     10003227 <firstRun(bool)+0x8d2>
10003210:	83 ec 08             	sub    esp,0x8
10003213:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003219:	50                   	push   eax
1000321a:	68 00 00 00 00       	push   0x0	1000321b: R_386_32	currComp
1000321f:	e8 fc ff ff ff       	call   10003220 <firstRun(bool)+0x8cb>	10003220: R_386_PC32	strcat
10003224:	83 c4 10             	add    esp,0x10
10003227:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
1000322b:	75 2c                	jne    10003259 <firstRun(bool)+0x904>
1000322d:	83 ec 0c             	sub    esp,0xc
10003230:	68 00 00 00 00       	push   0x0	10003231: R_386_32	passwbufA
10003235:	e8 fc ff ff ff       	call   10003236 <firstRun(bool)+0x8e1>	10003236: R_386_PC32	strlen
1000323a:	83 c4 10             	add    esp,0x10
1000323d:	83 f8 22             	cmp    eax,0x22
10003240:	77 17                	ja     10003259 <firstRun(bool)+0x904>
10003242:	83 ec 08             	sub    esp,0x8
10003245:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
1000324b:	50                   	push   eax
1000324c:	68 00 00 00 00       	push   0x0	1000324d: R_386_32	passwbufA
10003251:	e8 fc ff ff ff       	call   10003252 <firstRun(bool)+0x8fd>	10003252: R_386_PC32	strcat
10003256:	83 c4 10             	add    esp,0x10
10003259:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
1000325d:	0f 85 7f 01 00 00    	jne    100033e2 <firstRun(bool)+0xa8d>
10003263:	83 ec 0c             	sub    esp,0xc
10003266:	68 00 00 00 00       	push   0x0	10003267: R_386_32	passwbufB
1000326b:	e8 fc ff ff ff       	call   1000326c <firstRun(bool)+0x917>	1000326c: R_386_PC32	strlen
10003270:	83 c4 10             	add    esp,0x10
10003273:	83 f8 22             	cmp    eax,0x22
10003276:	0f 87 66 01 00 00    	ja     100033e2 <firstRun(bool)+0xa8d>
1000327c:	83 ec 08             	sub    esp,0x8
1000327f:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003285:	50                   	push   eax
10003286:	68 00 00 00 00       	push   0x0	10003287: R_386_32	passwbufB
1000328b:	e8 fc ff ff ff       	call   1000328c <firstRun(bool)+0x937>	1000328c: R_386_PC32	strcat
10003290:	83 c4 10             	add    esp,0x10
10003293:	e9 4a 01 00 00       	jmp    100033e2 <firstRun(bool)+0xa8d>
10003298:	a0 00 00 00 00       	mov    al,ds:0x0	10003299: R_386_32	installKey
1000329d:	3c 1b                	cmp    al,0x1b
1000329f:	75 0d                	jne    100032ae <firstRun(bool)+0x959>
100032a1:	a0 00 00 00 00       	mov    al,ds:0x0	100032a2: R_386_32	createNewUserMode
100032a6:	84 c0                	test   al,al
100032a8:	74 04                	je     100032ae <firstRun(bool)+0x959>
100032aa:	b0 01                	mov    al,0x1
100032ac:	eb 02                	jmp    100032b0 <firstRun(bool)+0x95b>
100032ae:	b0 00                	mov    al,0x0
100032b0:	84 c0                	test   al,al
100032b2:	74 0c                	je     100032c0 <firstRun(bool)+0x96b>
100032b4:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100032b6: R_386_32	createNewUserMode
100032bb:	e9 6b 1c 00 00       	jmp    10004f2b <firstRun(bool)+0x25d6>
100032c0:	a0 00 00 00 00       	mov    al,ds:0x0	100032c1: R_386_32	installKey
100032c5:	3c 08                	cmp    al,0x8
100032c7:	0f 94 c0             	sete   al
100032ca:	84 c0                	test   al,al
100032cc:	0f 84 ca 00 00 00    	je     1000339c <firstRun(bool)+0xa47>
100032d2:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100032d6:	75 2c                	jne    10003304 <firstRun(bool)+0x9af>
100032d8:	83 ec 0c             	sub    esp,0xc
100032db:	68 00 00 00 00       	push   0x0	100032dc: R_386_32	currName
100032e0:	e8 fc ff ff ff       	call   100032e1 <firstRun(bool)+0x98c>	100032e1: R_386_PC32	strlen
100032e5:	83 c4 10             	add    esp,0x10
100032e8:	85 c0                	test   eax,eax
100032ea:	74 18                	je     10003304 <firstRun(bool)+0x9af>
100032ec:	83 ec 0c             	sub    esp,0xc
100032ef:	68 00 00 00 00       	push   0x0	100032f0: R_386_32	currName
100032f4:	e8 fc ff ff ff       	call   100032f5 <firstRun(bool)+0x9a0>	100032f5: R_386_PC32	strlen
100032f9:	83 c4 10             	add    esp,0x10
100032fc:	48                   	dec    eax
100032fd:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	100032ff: R_386_32	currName
10003304:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003308:	75 2c                	jne    10003336 <firstRun(bool)+0x9e1>
1000330a:	83 ec 0c             	sub    esp,0xc
1000330d:	68 00 00 00 00       	push   0x0	1000330e: R_386_32	currComp
10003312:	e8 fc ff ff ff       	call   10003313 <firstRun(bool)+0x9be>	10003313: R_386_PC32	strlen
10003317:	83 c4 10             	add    esp,0x10
1000331a:	85 c0                	test   eax,eax
1000331c:	74 18                	je     10003336 <firstRun(bool)+0x9e1>
1000331e:	83 ec 0c             	sub    esp,0xc
10003321:	68 00 00 00 00       	push   0x0	10003322: R_386_32	currComp
10003326:	e8 fc ff ff ff       	call   10003327 <firstRun(bool)+0x9d2>	10003327: R_386_PC32	strlen
1000332b:	83 c4 10             	add    esp,0x10
1000332e:	48                   	dec    eax
1000332f:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003331: R_386_32	currComp
10003336:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
1000333a:	75 2c                	jne    10003368 <firstRun(bool)+0xa13>
1000333c:	83 ec 0c             	sub    esp,0xc
1000333f:	68 00 00 00 00       	push   0x0	10003340: R_386_32	passwbufA
10003344:	e8 fc ff ff ff       	call   10003345 <firstRun(bool)+0x9f0>	10003345: R_386_PC32	strlen
10003349:	83 c4 10             	add    esp,0x10
1000334c:	85 c0                	test   eax,eax
1000334e:	74 18                	je     10003368 <firstRun(bool)+0xa13>
10003350:	83 ec 0c             	sub    esp,0xc
10003353:	68 00 00 00 00       	push   0x0	10003354: R_386_32	passwbufA
10003358:	e8 fc ff ff ff       	call   10003359 <firstRun(bool)+0xa04>	10003359: R_386_PC32	strlen
1000335d:	83 c4 10             	add    esp,0x10
10003360:	48                   	dec    eax
10003361:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003363: R_386_32	passwbufA
10003368:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
1000336c:	75 74                	jne    100033e2 <firstRun(bool)+0xa8d>
1000336e:	83 ec 0c             	sub    esp,0xc
10003371:	68 00 00 00 00       	push   0x0	10003372: R_386_32	passwbufB
10003376:	e8 fc ff ff ff       	call   10003377 <firstRun(bool)+0xa22>	10003377: R_386_PC32	strlen
1000337b:	83 c4 10             	add    esp,0x10
1000337e:	85 c0                	test   eax,eax
10003380:	74 60                	je     100033e2 <firstRun(bool)+0xa8d>
10003382:	83 ec 0c             	sub    esp,0xc
10003385:	68 00 00 00 00       	push   0x0	10003386: R_386_32	passwbufB
1000338a:	e8 fc ff ff ff       	call   1000338b <firstRun(bool)+0xa36>	1000338b: R_386_PC32	strlen
1000338f:	83 c4 10             	add    esp,0x10
10003392:	48                   	dec    eax
10003393:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003395: R_386_32	passwbufB
1000339a:	eb 46                	jmp    100033e2 <firstRun(bool)+0xa8d>
1000339c:	a0 00 00 00 00       	mov    al,ds:0x0	1000339d: R_386_32	installKey
100033a1:	3c 7f                	cmp    al,0x7f
100033a3:	0f 94 c0             	sete   al
100033a6:	84 c0                	test   al,al
100033a8:	74 38                	je     100033e2 <firstRun(bool)+0xa8d>
100033aa:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
100033ad:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
100033b1:	75 07                	jne    100033ba <firstRun(bool)+0xa65>
100033b3:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100033ba:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
100033be:	75 10                	jne    100033d0 <firstRun(bool)+0xa7b>
100033c0:	a0 00 00 00 00       	mov    al,ds:0x0	100033c1: R_386_32	createNewUserMode
100033c5:	84 c0                	test   al,al
100033c7:	74 07                	je     100033d0 <firstRun(bool)+0xa7b>
100033c9:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100033d0:	83 ec 08             	sub    esp,0x8
100033d3:	6a 00                	push   0x0
100033d5:	68 2c 01 00 00       	push   0x12c
100033da:	e8 fc ff ff ff       	call   100033db <firstRun(bool)+0xa86>	100033db: R_386_PC32	milliTenthSleep(unsigned long long)
100033df:	83 c4 10             	add    esp,0x10
100033e2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100033e4: R_386_32	installKey
100033e9:	e9 66 f8 ff ff       	jmp    10002c54 <firstRun(bool)+0x2ff>
100033ee:	90                   	nop
100033ef:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100033f1: R_386_32	installKey
100033f6:	83 ec 08             	sub    esp,0x8
100033f9:	6a 00                	push   0x0
100033fb:	68 d0 07 00 00       	push   0x7d0
10003400:	e8 fc ff ff ff       	call   10003401 <firstRun(bool)+0xaac>	10003401: R_386_PC32	milliTenthSleep(unsigned long long)
10003405:	83 c4 10             	add    esp,0x10
10003408:	e8 fc ff ff ff       	call   10003409 <firstRun(bool)+0xab4>	10003409: R_386_PC32	drawBootScreen()
1000340d:	c7 45 bc 08 00 00 00 	mov    DWORD PTR [ebp-0x44],0x8
10003414:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003416: R_386_32	_bcrypt_errno
1000341e:	83 ec 08             	sub    esp,0x8
10003421:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10003427:	50                   	push   eax
10003428:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000342b:	e8 fc ff ff ff       	call   1000342c <firstRun(bool)+0xad7>	1000342c: R_386_PC32	bcrypt_gensalt
10003430:	83 c4 10             	add    esp,0x10
10003433:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10003436:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
1000343a:	75 09                	jne    10003445 <firstRun(bool)+0xaf0>
1000343c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000343d: R_386_32	_bcrypt_errno
10003441:	85 c0                	test   eax,eax
10003443:	74 5e                	je     100034a3 <firstRun(bool)+0xb4e>
10003445:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
1000344c:	83 ec 08             	sub    esp,0x8
1000344f:	68 14 a9 00 10       	push   0x1000a914	10003450: R_386_32	.text
10003454:	68 00 00 00 00       	push   0x0	10003455: R_386_32	currName
10003459:	e8 fc ff ff ff       	call   1000345a <firstRun(bool)+0xb05>	1000345a: R_386_PC32	strcpy
1000345e:	83 c4 10             	add    esp,0x10
10003461:	83 ec 08             	sub    esp,0x8
10003464:	68 23 a9 00 10       	push   0x1000a923	10003465: R_386_32	.text
10003469:	68 00 00 00 00       	push   0x0	1000346a: R_386_32	currComp
1000346e:	e8 fc ff ff ff       	call   1000346f <firstRun(bool)+0xb1a>	1000346f: R_386_PC32	strcpy
10003473:	83 c4 10             	add    esp,0x10
10003476:	83 ec 04             	sub    esp,0x4
10003479:	6a 50                	push   0x50
1000347b:	6a 00                	push   0x0
1000347d:	68 00 00 00 00       	push   0x0	1000347e: R_386_32	passwbufA
10003482:	e8 fc ff ff ff       	call   10003483 <firstRun(bool)+0xb2e>	10003483: R_386_PC32	memset
10003487:	83 c4 10             	add    esp,0x10
1000348a:	83 ec 04             	sub    esp,0x4
1000348d:	6a 50                	push   0x50
1000348f:	6a 00                	push   0x0
10003491:	68 00 00 00 00       	push   0x0	10003492: R_386_32	passwbufB
10003496:	e8 fc ff ff ff       	call   10003497 <firstRun(bool)+0xb42>	10003497: R_386_PC32	memset
1000349b:	83 c4 10             	add    esp,0x10
1000349e:	e9 2a f6 ff ff       	jmp    10002acd <firstRun(bool)+0x178>
100034a3:	83 ec 08             	sub    esp,0x8
100034a6:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
100034ac:	50                   	push   eax
100034ad:	68 00 00 00 00       	push   0x0	100034ae: R_386_32	passwsalt
100034b2:	e8 fc ff ff ff       	call   100034b3 <firstRun(bool)+0xb5e>	100034b3: R_386_PC32	strcpy
100034b7:	83 c4 10             	add    esp,0x10
100034ba:	83 ec 04             	sub    esp,0x4
100034bd:	68 00 00 00 00       	push   0x0	100034be: R_386_32	passwhash
100034c2:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
100034c8:	50                   	push   eax
100034c9:	68 00 00 00 00       	push   0x0	100034ca: R_386_32	passwbufA
100034ce:	e8 fc ff ff ff       	call   100034cf <firstRun(bool)+0xb7a>	100034cf: R_386_PC32	bcrypt_hashpw
100034d3:	83 c4 10             	add    esp,0x10
100034d6:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100034d9:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100034dd:	75 09                	jne    100034e8 <firstRun(bool)+0xb93>
100034df:	a1 00 00 00 00       	mov    eax,ds:0x0	100034e0: R_386_32	_bcrypt_errno
100034e4:	85 c0                	test   eax,eax
100034e6:	74 5e                	je     10003546 <firstRun(bool)+0xbf1>
100034e8:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100034ef:	83 ec 08             	sub    esp,0x8
100034f2:	68 14 a9 00 10       	push   0x1000a914	100034f3: R_386_32	.text
100034f7:	68 00 00 00 00       	push   0x0	100034f8: R_386_32	currName
100034fc:	e8 fc ff ff ff       	call   100034fd <firstRun(bool)+0xba8>	100034fd: R_386_PC32	strcpy
10003501:	83 c4 10             	add    esp,0x10
10003504:	83 ec 08             	sub    esp,0x8
10003507:	68 35 a9 00 10       	push   0x1000a935	10003508: R_386_32	.text
1000350c:	68 00 00 00 00       	push   0x0	1000350d: R_386_32	currComp
10003511:	e8 fc ff ff ff       	call   10003512 <firstRun(bool)+0xbbd>	10003512: R_386_PC32	strcpy
10003516:	83 c4 10             	add    esp,0x10
10003519:	83 ec 04             	sub    esp,0x4
1000351c:	6a 50                	push   0x50
1000351e:	6a 00                	push   0x0
10003520:	68 00 00 00 00       	push   0x0	10003521: R_386_32	passwbufA
10003525:	e8 fc ff ff ff       	call   10003526 <firstRun(bool)+0xbd1>	10003526: R_386_PC32	memset
1000352a:	83 c4 10             	add    esp,0x10
1000352d:	83 ec 04             	sub    esp,0x4
10003530:	6a 50                	push   0x50
10003532:	6a 00                	push   0x0
10003534:	68 00 00 00 00       	push   0x0	10003535: R_386_32	passwbufB
10003539:	e8 fc ff ff ff       	call   1000353a <firstRun(bool)+0xbe5>	1000353a: R_386_PC32	memset
1000353e:	83 c4 10             	add    esp,0x10
10003541:	e9 87 f5 ff ff       	jmp    10002acd <firstRun(bool)+0x178>
10003546:	83 ec 04             	sub    esp,0x4
10003549:	6a 50                	push   0x50
1000354b:	6a 00                	push   0x0
1000354d:	68 00 00 00 00       	push   0x0	1000354e: R_386_32	passwbufA
10003552:	e8 fc ff ff ff       	call   10003553 <firstRun(bool)+0xbfe>	10003553: R_386_PC32	memset
10003557:	83 c4 10             	add    esp,0x10
1000355a:	83 ec 04             	sub    esp,0x4
1000355d:	6a 50                	push   0x50
1000355f:	6a 00                	push   0x0
10003561:	68 00 00 00 00       	push   0x0	10003562: R_386_32	passwbufB
10003566:	e8 fc ff ff ff       	call   10003567 <firstRun(bool)+0xc12>	10003567: R_386_PC32	memset
1000356b:	83 c4 10             	add    esp,0x10
1000356e:	a0 00 00 00 00       	mov    al,ds:0x0	1000356f: R_386_32	createNewUserMode
10003573:	84 c0                	test   al,al
10003575:	74 16                	je     1000358d <firstRun(bool)+0xc38>
10003577:	83 ec 0c             	sub    esp,0xc
1000357a:	68 00 00 00 00       	push   0x0	1000357b: R_386_32	currName
1000357f:	e8 fc ff ff ff       	call   10003580 <firstRun(bool)+0xc2b>	10003580: R_386_PC32	createUser(char const*)
10003584:	83 c4 10             	add    esp,0x10
10003587:	90                   	nop
10003588:	e9 9e 19 00 00       	jmp    10004f2b <firstRun(bool)+0x25d6>
1000358d:	83 ec 08             	sub    esp,0x8
10003590:	6a 00                	push   0x0
10003592:	68 d0 07 00 00       	push   0x7d0
10003597:	e8 fc ff ff ff       	call   10003598 <firstRun(bool)+0xc43>	10003598: R_386_PC32	milliTenthSleep(unsigned long long)
1000359c:	83 c4 10             	add    esp,0x10
1000359f:	eb 01                	jmp    100035a2 <firstRun(bool)+0xc4d>
100035a1:	90                   	nop
100035a2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100035a4: R_386_32	installKey
100035a9:	e8 fc ff ff ff       	call   100035aa <firstRun(bool)+0xc55>	100035aa: R_386_PC32	drawBootScreen()
100035ae:	83 ec 0c             	sub    esp,0xc
100035b1:	68 47 a9 00 10       	push   0x1000a947	100035b2: R_386_32	.text
100035b6:	6a 0d                	push   0xd
100035b8:	6a 32                	push   0x32
100035ba:	6a 02                	push   0x2
100035bc:	6a 16                	push   0x16
100035be:	e8 fc ff ff ff       	call   100035bf <firstRun(bool)+0xc6a>	100035bf: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100035c3:	83 c4 20             	add    esp,0x20
100035c6:	a1 00 00 00 00       	mov    eax,ds:0x0	100035c7: R_386_32	Krnl::computer
100035cb:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
100035d1:	a1 00 00 00 00       	mov    eax,ds:0x0	100035d2: R_386_32	Krnl::computer
100035d6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100035dc:	8b 00                	mov    eax,DWORD PTR [eax]
100035de:	83 c0 28             	add    eax,0x28
100035e1:	8b 00                	mov    eax,DWORD PTR [eax]
100035e3:	8d 95 98 fe ff ff    	lea    edx,[ebp-0x168]
100035e9:	83 ec 08             	sub    esp,0x8
100035ec:	51                   	push   ecx
100035ed:	52                   	push   edx
100035ee:	ff d0                	call   eax
100035f0:	83 c4 0c             	add    esp,0xc
100035f3:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [ebp-0x168]
100035f9:	8b 95 9c fe ff ff    	mov    edx,DWORD PTR [ebp-0x164]
100035ff:	89 85 d4 fe ff ff    	mov    DWORD PTR [ebp-0x12c],eax
10003605:	89 95 d8 fe ff ff    	mov    DWORD PTR [ebp-0x128],edx
1000360b:	83 ec 08             	sub    esp,0x8
1000360e:	68 55 a9 00 10       	push   0x1000a955	1000360f: R_386_32	.text
10003613:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003619:	50                   	push   eax
1000361a:	e8 fc ff ff ff       	call   1000361b <firstRun(bool)+0xcc6>	1000361b: R_386_PC32	strcpy
1000361f:	83 c4 10             	add    esp,0x10
10003622:	8a 85 d4 fe ff ff    	mov    al,BYTE PTR [ebp-0x12c]
10003628:	0f b6 d0             	movzx  edx,al
1000362b:	89 d0                	mov    eax,edx
1000362d:	c1 e0 02             	shl    eax,0x2
10003630:	01 d0                	add    eax,edx
10003632:	c1 e0 03             	shl    eax,0x3
10003635:	01 d0                	add    eax,edx
10003637:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000363e:	01 d0                	add    eax,edx
10003640:	66 c1 e8 08          	shr    ax,0x8
10003644:	c0 e8 03             	shr    al,0x3
10003647:	83 c0 30             	add    eax,0x30
1000364a:	88 85 40 ff ff ff    	mov    BYTE PTR [ebp-0xc0],al
10003650:	8a 8d d4 fe ff ff    	mov    cl,BYTE PTR [ebp-0x12c]
10003656:	0f b6 d1             	movzx  edx,cl
10003659:	89 d0                	mov    eax,edx
1000365b:	c1 e0 02             	shl    eax,0x2
1000365e:	01 d0                	add    eax,edx
10003660:	c1 e0 03             	shl    eax,0x3
10003663:	01 d0                	add    eax,edx
10003665:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000366c:	01 d0                	add    eax,edx
1000366e:	66 c1 e8 08          	shr    ax,0x8
10003672:	88 c2                	mov    dl,al
10003674:	c0 ea 03             	shr    dl,0x3
10003677:	88 d0                	mov    al,dl
10003679:	c1 e0 02             	shl    eax,0x2
1000367c:	01 d0                	add    eax,edx
1000367e:	d1 e0                	shl    eax,1
10003680:	29 c1                	sub    ecx,eax
10003682:	88 ca                	mov    dl,cl
10003684:	8d 42 30             	lea    eax,[edx+0x30]
10003687:	88 85 41 ff ff ff    	mov    BYTE PTR [ebp-0xbf],al
1000368d:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
10003693:	0f b6 c8             	movzx  ecx,al
10003696:	b8 67 66 66 66       	mov    eax,0x66666667
1000369b:	f7 e9                	imul   ecx
1000369d:	c1 fa 02             	sar    edx,0x2
100036a0:	89 c8                	mov    eax,ecx
100036a2:	c1 f8 1f             	sar    eax,0x1f
100036a5:	29 c2                	sub    edx,eax
100036a7:	89 d0                	mov    eax,edx
100036a9:	83 c0 30             	add    eax,0x30
100036ac:	88 85 43 ff ff ff    	mov    BYTE PTR [ebp-0xbd],al
100036b2:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
100036b8:	0f b6 c8             	movzx  ecx,al
100036bb:	b8 67 66 66 66       	mov    eax,0x66666667
100036c0:	f7 e9                	imul   ecx
100036c2:	c1 fa 02             	sar    edx,0x2
100036c5:	89 c8                	mov    eax,ecx
100036c7:	c1 f8 1f             	sar    eax,0x1f
100036ca:	29 c2                	sub    edx,eax
100036cc:	89 d0                	mov    eax,edx
100036ce:	c1 e0 02             	shl    eax,0x2
100036d1:	01 d0                	add    eax,edx
100036d3:	01 c0                	add    eax,eax
100036d5:	29 c1                	sub    ecx,eax
100036d7:	89 ca                	mov    edx,ecx
100036d9:	88 d0                	mov    al,dl
100036db:	83 c0 30             	add    eax,0x30
100036de:	88 85 44 ff ff ff    	mov    BYTE PTR [ebp-0xbc],al
100036e4:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
100036eb:	0f b7 c8             	movzx  ecx,ax
100036ee:	b8 d3 4d 62 10       	mov    eax,0x10624dd3
100036f3:	f7 e9                	imul   ecx
100036f5:	c1 fa 06             	sar    edx,0x6
100036f8:	89 c8                	mov    eax,ecx
100036fa:	c1 f8 1f             	sar    eax,0x1f
100036fd:	29 c2                	sub    edx,eax
100036ff:	89 d0                	mov    eax,edx
10003701:	b9 0a 00 00 00       	mov    ecx,0xa
10003706:	99                   	cdq    
10003707:	f7 f9                	idiv   ecx
10003709:	89 d0                	mov    eax,edx
1000370b:	83 c0 30             	add    eax,0x30
1000370e:	88 85 46 ff ff ff    	mov    BYTE PTR [ebp-0xba],al
10003714:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
1000371b:	0f b7 c8             	movzx  ecx,ax
1000371e:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10003723:	f7 e9                	imul   ecx
10003725:	c1 fa 05             	sar    edx,0x5
10003728:	89 c8                	mov    eax,ecx
1000372a:	c1 f8 1f             	sar    eax,0x1f
1000372d:	29 c2                	sub    edx,eax
1000372f:	89 d0                	mov    eax,edx
10003731:	b9 0a 00 00 00       	mov    ecx,0xa
10003736:	99                   	cdq    
10003737:	f7 f9                	idiv   ecx
10003739:	89 d0                	mov    eax,edx
1000373b:	83 c0 30             	add    eax,0x30
1000373e:	88 85 47 ff ff ff    	mov    BYTE PTR [ebp-0xb9],al
10003744:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
1000374b:	0f b7 c8             	movzx  ecx,ax
1000374e:	b8 67 66 66 66       	mov    eax,0x66666667
10003753:	f7 e9                	imul   ecx
10003755:	c1 fa 02             	sar    edx,0x2
10003758:	89 c8                	mov    eax,ecx
1000375a:	c1 f8 1f             	sar    eax,0x1f
1000375d:	89 d1                	mov    ecx,edx
1000375f:	29 c1                	sub    ecx,eax
10003761:	b8 67 66 66 66       	mov    eax,0x66666667
10003766:	f7 e9                	imul   ecx
10003768:	c1 fa 02             	sar    edx,0x2
1000376b:	89 c8                	mov    eax,ecx
1000376d:	c1 f8 1f             	sar    eax,0x1f
10003770:	29 c2                	sub    edx,eax
10003772:	89 d0                	mov    eax,edx
10003774:	c1 e0 02             	shl    eax,0x2
10003777:	01 d0                	add    eax,edx
10003779:	01 c0                	add    eax,eax
1000377b:	29 c1                	sub    ecx,eax
1000377d:	89 ca                	mov    edx,ecx
1000377f:	88 d0                	mov    al,dl
10003781:	83 c0 30             	add    eax,0x30
10003784:	88 85 48 ff ff ff    	mov    BYTE PTR [ebp-0xb8],al
1000378a:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003791:	0f b7 c0             	movzx  eax,ax
10003794:	b9 0a 00 00 00       	mov    ecx,0xa
10003799:	99                   	cdq    
1000379a:	f7 f9                	idiv   ecx
1000379c:	89 d0                	mov    eax,edx
1000379e:	83 c0 30             	add    eax,0x30
100037a1:	88 85 49 ff ff ff    	mov    BYTE PTR [ebp-0xb7],al
100037a7:	8a 85 d8 fe ff ff    	mov    al,BYTE PTR [ebp-0x128]
100037ad:	0f b6 d0             	movzx  edx,al
100037b0:	89 d0                	mov    eax,edx
100037b2:	c1 e0 02             	shl    eax,0x2
100037b5:	01 d0                	add    eax,edx
100037b7:	c1 e0 03             	shl    eax,0x3
100037ba:	01 d0                	add    eax,edx
100037bc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100037c3:	01 d0                	add    eax,edx
100037c5:	66 c1 e8 08          	shr    ax,0x8
100037c9:	c0 e8 03             	shr    al,0x3
100037cc:	83 c0 30             	add    eax,0x30
100037cf:	88 85 4b ff ff ff    	mov    BYTE PTR [ebp-0xb5],al
100037d5:	8a 8d d8 fe ff ff    	mov    cl,BYTE PTR [ebp-0x128]
100037db:	0f b6 d1             	movzx  edx,cl
100037de:	89 d0                	mov    eax,edx
100037e0:	c1 e0 02             	shl    eax,0x2
100037e3:	01 d0                	add    eax,edx
100037e5:	c1 e0 03             	shl    eax,0x3
100037e8:	01 d0                	add    eax,edx
100037ea:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100037f1:	01 d0                	add    eax,edx
100037f3:	66 c1 e8 08          	shr    ax,0x8
100037f7:	88 c2                	mov    dl,al
100037f9:	c0 ea 03             	shr    dl,0x3
100037fc:	88 d0                	mov    al,dl
100037fe:	c1 e0 02             	shl    eax,0x2
10003801:	01 d0                	add    eax,edx
10003803:	d1 e0                	shl    eax,1
10003805:	29 c1                	sub    ecx,eax
10003807:	88 ca                	mov    dl,cl
10003809:	8d 42 30             	lea    eax,[edx+0x30]
1000380c:	88 85 4c ff ff ff    	mov    BYTE PTR [ebp-0xb4],al
10003812:	8a 85 d9 fe ff ff    	mov    al,BYTE PTR [ebp-0x127]
10003818:	0f b6 d0             	movzx  edx,al
1000381b:	89 d0                	mov    eax,edx
1000381d:	c1 e0 02             	shl    eax,0x2
10003820:	01 d0                	add    eax,edx
10003822:	c1 e0 03             	shl    eax,0x3
10003825:	01 d0                	add    eax,edx
10003827:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000382e:	01 d0                	add    eax,edx
10003830:	66 c1 e8 08          	shr    ax,0x8
10003834:	c0 e8 03             	shr    al,0x3
10003837:	83 c0 30             	add    eax,0x30
1000383a:	88 85 4e ff ff ff    	mov    BYTE PTR [ebp-0xb2],al
10003840:	8a 8d d9 fe ff ff    	mov    cl,BYTE PTR [ebp-0x127]
10003846:	0f b6 d1             	movzx  edx,cl
10003849:	89 d0                	mov    eax,edx
1000384b:	c1 e0 02             	shl    eax,0x2
1000384e:	01 d0                	add    eax,edx
10003850:	c1 e0 03             	shl    eax,0x3
10003853:	01 d0                	add    eax,edx
10003855:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000385c:	01 d0                	add    eax,edx
1000385e:	66 c1 e8 08          	shr    ax,0x8
10003862:	88 c2                	mov    dl,al
10003864:	c0 ea 03             	shr    dl,0x3
10003867:	88 d0                	mov    al,dl
10003869:	c1 e0 02             	shl    eax,0x2
1000386c:	01 d0                	add    eax,edx
1000386e:	d1 e0                	shl    eax,1
10003870:	29 c1                	sub    ecx,eax
10003872:	88 ca                	mov    dl,cl
10003874:	8d 42 30             	lea    eax,[edx+0x30]
10003877:	88 85 4f ff ff ff    	mov    BYTE PTR [ebp-0xb1],al
1000387d:	8a 85 da fe ff ff    	mov    al,BYTE PTR [ebp-0x126]
10003883:	0f b6 d0             	movzx  edx,al
10003886:	89 d0                	mov    eax,edx
10003888:	c1 e0 02             	shl    eax,0x2
1000388b:	01 d0                	add    eax,edx
1000388d:	c1 e0 03             	shl    eax,0x3
10003890:	01 d0                	add    eax,edx
10003892:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003899:	01 d0                	add    eax,edx
1000389b:	66 c1 e8 08          	shr    ax,0x8
1000389f:	c0 e8 03             	shr    al,0x3
100038a2:	83 c0 30             	add    eax,0x30
100038a5:	88 85 51 ff ff ff    	mov    BYTE PTR [ebp-0xaf],al
100038ab:	8a 8d da fe ff ff    	mov    cl,BYTE PTR [ebp-0x126]
100038b1:	0f b6 d1             	movzx  edx,cl
100038b4:	89 d0                	mov    eax,edx
100038b6:	c1 e0 02             	shl    eax,0x2
100038b9:	01 d0                	add    eax,edx
100038bb:	c1 e0 03             	shl    eax,0x3
100038be:	01 d0                	add    eax,edx
100038c0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100038c7:	01 d0                	add    eax,edx
100038c9:	66 c1 e8 08          	shr    ax,0x8
100038cd:	88 c2                	mov    dl,al
100038cf:	c0 ea 03             	shr    dl,0x3
100038d2:	88 d0                	mov    al,dl
100038d4:	c1 e0 02             	shl    eax,0x2
100038d7:	01 d0                	add    eax,edx
100038d9:	d1 e0                	shl    eax,1
100038db:	29 c1                	sub    ecx,eax
100038dd:	88 ca                	mov    dl,cl
100038df:	8d 42 30             	lea    eax,[edx+0x30]
100038e2:	88 85 52 ff ff ff    	mov    BYTE PTR [ebp-0xae],al
100038e8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100038ef:	a1 00 00 00 00       	mov    eax,ds:0x0	100038f0: R_386_32	term
100038f4:	83 ec 04             	sub    esp,0x4
100038f7:	6a 05                	push   0x5
100038f9:	6a 18                	push   0x18
100038fb:	50                   	push   eax
100038fc:	e8 fc ff ff ff       	call   100038fd <firstRun(bool)+0xfa8>	100038fd: R_386_PC32	VgaText::setCursor(int, int)
10003901:	83 c4 10             	add    esp,0x10
10003904:	a1 00 00 00 00       	mov    eax,ds:0x0	10003905: R_386_32	term
10003909:	83 ec 08             	sub    esp,0x8
1000390c:	68 6c a9 00 10       	push   0x1000a96c	1000390d: R_386_32	.text
10003911:	50                   	push   eax
10003912:	e8 fc ff ff ff       	call   10003913 <firstRun(bool)+0xfbe>	10003913: R_386_PC32	VgaText::puts(char const*)
10003917:	83 c4 10             	add    esp,0x10
1000391a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000391b: R_386_32	term
1000391f:	83 ec 04             	sub    esp,0x4
10003922:	6a 06                	push   0x6
10003924:	6a 18                	push   0x18
10003926:	50                   	push   eax
10003927:	e8 fc ff ff ff       	call   10003928 <firstRun(bool)+0xfd3>	10003928: R_386_PC32	VgaText::setCursor(int, int)
1000392c:	83 c4 10             	add    esp,0x10
1000392f:	a1 00 00 00 00       	mov    eax,ds:0x0	10003930: R_386_32	term
10003934:	83 ec 08             	sub    esp,0x8
10003937:	68 94 a9 00 10       	push   0x1000a994	10003938: R_386_32	.text
1000393c:	50                   	push   eax
1000393d:	e8 fc ff ff ff       	call   1000393e <firstRun(bool)+0xfe9>	1000393e: R_386_PC32	VgaText::puts(char const*)
10003942:	83 c4 10             	add    esp,0x10
10003945:	a1 00 00 00 00       	mov    eax,ds:0x0	10003946: R_386_32	term
1000394a:	83 ec 04             	sub    esp,0x4
1000394d:	6a 09                	push   0x9
1000394f:	6a 1a                	push   0x1a
10003951:	50                   	push   eax
10003952:	e8 fc ff ff ff       	call   10003953 <firstRun(bool)+0xffe>	10003953: R_386_PC32	VgaText::setCursor(int, int)
10003957:	83 c4 10             	add    esp,0x10
1000395a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000395b: R_386_32	term
1000395f:	6a 0f                	push   0xf
10003961:	6a 07                	push   0x7
10003963:	68 aa a9 00 10       	push   0x1000a9aa	10003964: R_386_32	.text
10003968:	50                   	push   eax
10003969:	e8 fc ff ff ff       	call   1000396a <firstRun(bool)+0x1015>	1000396a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000396e:	83 c4 10             	add    esp,0x10
10003971:	a1 00 00 00 00       	mov    eax,ds:0x0	10003972: R_386_32	term
10003976:	83 ec 04             	sub    esp,0x4
10003979:	6a 18                	push   0x18
1000397b:	6a 11                	push   0x11
1000397d:	50                   	push   eax
1000397e:	e8 fc ff ff ff       	call   1000397f <firstRun(bool)+0x102a>	1000397f: R_386_PC32	VgaText::setCursor(int, int)
10003983:	83 c4 10             	add    esp,0x10
10003986:	a1 00 00 00 00       	mov    eax,ds:0x0	10003987: R_386_32	term
1000398b:	6a 0b                	push   0xb
1000398d:	6a 03                	push   0x3
1000398f:	68 be a9 00 10       	push   0x1000a9be	10003990: R_386_32	.text
10003994:	50                   	push   eax
10003995:	e8 fc ff ff ff       	call   10003996 <firstRun(bool)+0x1041>	10003996: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000399a:	83 c4 10             	add    esp,0x10
1000399d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000399e: R_386_32	term
100039a2:	83 ec 04             	sub    esp,0x4
100039a5:	6a 08                	push   0x8
100039a7:	6a 1a                	push   0x1a
100039a9:	50                   	push   eax
100039aa:	e8 fc ff ff ff       	call   100039ab <firstRun(bool)+0x1056>	100039ab: R_386_PC32	VgaText::setCursor(int, int)
100039af:	83 c4 10             	add    esp,0x10
100039b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100039b3: R_386_32	term
100039b7:	83 ec 08             	sub    esp,0x8
100039ba:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100039c0:	52                   	push   edx
100039c1:	50                   	push   eax
100039c2:	e8 fc ff ff ff       	call   100039c3 <firstRun(bool)+0x106e>	100039c3: R_386_PC32	VgaText::puts(char const*)
100039c7:	83 c4 10             	add    esp,0x10
100039ca:	a1 00 00 00 00       	mov    eax,ds:0x0	100039cb: R_386_32	term
100039cf:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100039d2:	83 c2 1a             	add    edx,0x1a
100039d5:	83 ec 04             	sub    esp,0x4
100039d8:	6a 08                	push   0x8
100039da:	52                   	push   edx
100039db:	50                   	push   eax
100039dc:	e8 fc ff ff ff       	call   100039dd <firstRun(bool)+0x1088>	100039dd: R_386_PC32	VgaText::setCursor(int, int)
100039e1:	83 c4 10             	add    esp,0x10
100039e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100039e5: R_386_32	term
100039e9:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
100039ef:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100039f2:	01 ca                	add    edx,ecx
100039f4:	8a 12                	mov    dl,BYTE PTR [edx]
100039f6:	0f be d2             	movsx  edx,dl
100039f9:	6a 00                	push   0x0
100039fb:	6a 0f                	push   0xf
100039fd:	52                   	push   edx
100039fe:	50                   	push   eax
100039ff:	e8 fc ff ff ff       	call   10003a00 <firstRun(bool)+0x10ab>	10003a00: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10003a04:	83 c4 10             	add    esp,0x10
10003a07:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
10003a0d:	0f be c0             	movsx  eax,al
10003a10:	8d 50 d0             	lea    edx,[eax-0x30]
10003a13:	89 d0                	mov    eax,edx
10003a15:	c1 e0 02             	shl    eax,0x2
10003a18:	01 d0                	add    eax,edx
10003a1a:	01 c0                	add    eax,eax
10003a1c:	89 c2                	mov    edx,eax
10003a1e:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
10003a24:	0f be c0             	movsx  eax,al
10003a27:	83 e8 30             	sub    eax,0x30
10003a2a:	01 d0                	add    eax,edx
10003a2c:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10003a2f:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
10003a32:	b9 0c 00 00 00       	mov    ecx,0xc
10003a37:	99                   	cdq    
10003a38:	f7 f9                	idiv   ecx
10003a3a:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
10003a3d:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10003a41:	75 07                	jne    10003a4a <firstRun(bool)+0x10f5>
10003a43:	c7 45 d0 0c 00 00 00 	mov    DWORD PTR [ebp-0x30],0xc
10003a4a:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
10003a50:	0f be c0             	movsx  eax,al
10003a53:	8d 50 d0             	lea    edx,[eax-0x30]
10003a56:	89 d0                	mov    eax,edx
10003a58:	c1 e0 02             	shl    eax,0x2
10003a5b:	01 d0                	add    eax,edx
10003a5d:	01 c0                	add    eax,eax
10003a5f:	89 c2                	mov    edx,eax
10003a61:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
10003a67:	0f be c0             	movsx  eax,al
10003a6a:	83 e8 30             	sub    eax,0x30
10003a6d:	01 d0                	add    eax,edx
10003a6f:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
10003a72:	83 ec 04             	sub    esp,0x4
10003a75:	6a 10                	push   0x10
10003a77:	6a 00                	push   0x0
10003a79:	8d 85 b6 fe ff ff    	lea    eax,[ebp-0x14a]
10003a7f:	50                   	push   eax
10003a80:	e8 fc ff ff ff       	call   10003a81 <firstRun(bool)+0x112c>	10003a81: R_386_PC32	memset
10003a85:	83 c4 10             	add    esp,0x10
10003a88:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [ebp-0x54],0x0
10003a8f:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a92:	8d 50 01             	lea    edx,[eax+0x1]
10003a95:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a98:	c6 84 05 b6 fe ff ff 28 	mov    BYTE PTR [ebp+eax*1-0x14a],0x28
10003aa0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
10003aa3:	b8 67 66 66 66       	mov    eax,0x66666667
10003aa8:	f7 e9                	imul   ecx
10003aaa:	c1 fa 02             	sar    edx,0x2
10003aad:	89 c8                	mov    eax,ecx
10003aaf:	c1 f8 1f             	sar    eax,0x1f
10003ab2:	29 c2                	sub    edx,eax
10003ab4:	89 d0                	mov    eax,edx
10003ab6:	8d 48 30             	lea    ecx,[eax+0x30]
10003ab9:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003abc:	8d 50 01             	lea    edx,[eax+0x1]
10003abf:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003ac2:	88 ca                	mov    dl,cl
10003ac4:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003acb:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
10003ace:	b8 67 66 66 66       	mov    eax,0x66666667
10003ad3:	f7 e9                	imul   ecx
10003ad5:	c1 fa 02             	sar    edx,0x2
10003ad8:	89 c8                	mov    eax,ecx
10003ada:	c1 f8 1f             	sar    eax,0x1f
10003add:	29 c2                	sub    edx,eax
10003adf:	89 d0                	mov    eax,edx
10003ae1:	c1 e0 02             	shl    eax,0x2
10003ae4:	01 d0                	add    eax,edx
10003ae6:	01 c0                	add    eax,eax
10003ae8:	29 c1                	sub    ecx,eax
10003aea:	89 ca                	mov    edx,ecx
10003aec:	88 d0                	mov    al,dl
10003aee:	8d 48 30             	lea    ecx,[eax+0x30]
10003af1:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003af4:	8d 50 01             	lea    edx,[eax+0x1]
10003af7:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003afa:	88 ca                	mov    dl,cl
10003afc:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003b03:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b06:	8d 50 01             	lea    edx,[eax+0x1]
10003b09:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b0c:	c6 84 05 b6 fe ff ff 3a 	mov    BYTE PTR [ebp+eax*1-0x14a],0x3a
10003b14:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10003b17:	b8 67 66 66 66       	mov    eax,0x66666667
10003b1c:	f7 e9                	imul   ecx
10003b1e:	c1 fa 02             	sar    edx,0x2
10003b21:	89 c8                	mov    eax,ecx
10003b23:	c1 f8 1f             	sar    eax,0x1f
10003b26:	29 c2                	sub    edx,eax
10003b28:	89 d0                	mov    eax,edx
10003b2a:	8d 48 30             	lea    ecx,[eax+0x30]
10003b2d:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b30:	8d 50 01             	lea    edx,[eax+0x1]
10003b33:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b36:	88 ca                	mov    dl,cl
10003b38:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003b3f:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10003b42:	b8 67 66 66 66       	mov    eax,0x66666667
10003b47:	f7 e9                	imul   ecx
10003b49:	c1 fa 02             	sar    edx,0x2
10003b4c:	89 c8                	mov    eax,ecx
10003b4e:	c1 f8 1f             	sar    eax,0x1f
10003b51:	29 c2                	sub    edx,eax
10003b53:	89 d0                	mov    eax,edx
10003b55:	c1 e0 02             	shl    eax,0x2
10003b58:	01 d0                	add    eax,edx
10003b5a:	01 c0                	add    eax,eax
10003b5c:	29 c1                	sub    ecx,eax
10003b5e:	89 ca                	mov    edx,ecx
10003b60:	88 d0                	mov    al,dl
10003b62:	8d 48 30             	lea    ecx,[eax+0x30]
10003b65:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b68:	8d 50 01             	lea    edx,[eax+0x1]
10003b6b:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b6e:	88 ca                	mov    dl,cl
10003b70:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003b77:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b7a:	8d 50 01             	lea    edx,[eax+0x1]
10003b7d:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b80:	c6 84 05 b6 fe ff ff 20 	mov    BYTE PTR [ebp+eax*1-0x14a],0x20
10003b88:	83 7d b4 0b          	cmp    DWORD PTR [ebp-0x4c],0xb
10003b8c:	7e 04                	jle    10003b92 <firstRun(bool)+0x123d>
10003b8e:	b2 50                	mov    dl,0x50
10003b90:	eb 02                	jmp    10003b94 <firstRun(bool)+0x123f>
10003b92:	b2 41                	mov    dl,0x41
10003b94:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b97:	8d 48 01             	lea    ecx,[eax+0x1]
10003b9a:	89 4d ac             	mov    DWORD PTR [ebp-0x54],ecx
10003b9d:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003ba4:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003ba7:	8d 50 01             	lea    edx,[eax+0x1]
10003baa:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003bad:	c6 84 05 b6 fe ff ff 4d 	mov    BYTE PTR [ebp+eax*1-0x14a],0x4d
10003bb5:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003bb8:	8d 50 01             	lea    edx,[eax+0x1]
10003bbb:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003bbe:	c6 84 05 b6 fe ff ff 29 	mov    BYTE PTR [ebp+eax*1-0x14a],0x29
10003bc6:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10003bc8: R_386_32	term
10003bcc:	83 ec 0c             	sub    esp,0xc
10003bcf:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003bd5:	50                   	push   eax
10003bd6:	e8 fc ff ff ff       	call   10003bd7 <firstRun(bool)+0x1282>	10003bd7: R_386_PC32	strlen
10003bdb:	83 c4 10             	add    esp,0x10
10003bde:	83 c0 1e             	add    eax,0x1e
10003be1:	83 ec 04             	sub    esp,0x4
10003be4:	6a 08                	push   0x8
10003be6:	50                   	push   eax
10003be7:	53                   	push   ebx
10003be8:	e8 fc ff ff ff       	call   10003be9 <firstRun(bool)+0x1294>	10003be9: R_386_PC32	VgaText::setCursor(int, int)
10003bed:	83 c4 10             	add    esp,0x10
10003bf0:	a1 00 00 00 00       	mov    eax,ds:0x0	10003bf1: R_386_32	term
10003bf5:	83 ec 08             	sub    esp,0x8
10003bf8:	8d 95 b6 fe ff ff    	lea    edx,[ebp-0x14a]
10003bfe:	52                   	push   edx
10003bff:	50                   	push   eax
10003c00:	e8 fc ff ff ff       	call   10003c01 <firstRun(bool)+0x12ac>	10003c01: R_386_PC32	VgaText::puts(char const*)
10003c05:	83 c4 10             	add    esp,0x10
10003c08:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c09: R_386_32	term
10003c0d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003c10:	83 c2 1a             	add    edx,0x1a
10003c13:	83 ec 04             	sub    esp,0x4
10003c16:	6a 08                	push   0x8
10003c18:	52                   	push   edx
10003c19:	50                   	push   eax
10003c1a:	e8 fc ff ff ff       	call   10003c1b <firstRun(bool)+0x12c6>	10003c1b: R_386_PC32	VgaText::setCursor(int, int)
10003c1f:	83 c4 10             	add    esp,0x10
10003c22:	a0 00 00 00 00       	mov    al,ds:0x0	10003c23: R_386_32	installKey
10003c27:	84 c0                	test   al,al
10003c29:	0f 94 c0             	sete   al
10003c2c:	84 c0                	test   al,al
10003c2e:	74 02                	je     10003c32 <firstRun(bool)+0x12dd>
10003c30:	eb f0                	jmp    10003c22 <firstRun(bool)+0x12cd>
10003c32:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c33: R_386_32	term
10003c37:	05 82 00 00 00       	add    eax,0x82
10003c3c:	83 ec 04             	sub    esp,0x4
10003c3f:	6a 10                	push   0x10
10003c41:	6a 00                	push   0x0
10003c43:	50                   	push   eax
10003c44:	e8 fc ff ff ff       	call   10003c45 <firstRun(bool)+0x12f0>	10003c45: R_386_PC32	memset
10003c49:	83 c4 10             	add    esp,0x10
10003c4c:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c4d: R_386_32	term
10003c51:	05 02 01 00 00       	add    eax,0x102
10003c56:	83 ec 04             	sub    esp,0x4
10003c59:	6a 10                	push   0x10
10003c5b:	6a 00                	push   0x0
10003c5d:	50                   	push   eax
10003c5e:	e8 fc ff ff ff       	call   10003c5f <firstRun(bool)+0x130a>	10003c5f: R_386_PC32	memset
10003c63:	83 c4 10             	add    esp,0x10
10003c66:	a0 00 00 00 00       	mov    al,ds:0x0	10003c67: R_386_32	installKey
10003c6b:	3c 03                	cmp    al,0x3
10003c6d:	74 09                	je     10003c78 <firstRun(bool)+0x1323>
10003c6f:	a0 00 00 00 00       	mov    al,ds:0x0	10003c70: R_386_32	installKey
10003c74:	3c 08                	cmp    al,0x8
10003c76:	75 04                	jne    10003c7c <firstRun(bool)+0x1327>
10003c78:	b0 01                	mov    al,0x1
10003c7a:	eb 02                	jmp    10003c7e <firstRun(bool)+0x1329>
10003c7c:	b0 00                	mov    al,0x0
10003c7e:	84 c0                	test   al,al
10003c80:	74 58                	je     10003cda <firstRun(bool)+0x1385>
10003c82:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
10003c85:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10003c89:	75 16                	jne    10003ca1 <firstRun(bool)+0x134c>
10003c8b:	83 ec 0c             	sub    esp,0xc
10003c8e:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003c94:	50                   	push   eax
10003c95:	e8 fc ff ff ff       	call   10003c96 <firstRun(bool)+0x1341>	10003c96: R_386_PC32	strlen
10003c9a:	83 c4 10             	add    esp,0x10
10003c9d:	48                   	dec    eax
10003c9e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10003ca1:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003ca7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003caa:	01 d0                	add    eax,edx
10003cac:	8a 00                	mov    al,BYTE PTR [eax]
10003cae:	3c 20                	cmp    al,0x20
10003cb0:	74 d0                	je     10003c82 <firstRun(bool)+0x132d>
10003cb2:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003cb8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003cbb:	01 d0                	add    eax,edx
10003cbd:	8a 00                	mov    al,BYTE PTR [eax]
10003cbf:	3c 2f                	cmp    al,0x2f
10003cc1:	74 bf                	je     10003c82 <firstRun(bool)+0x132d>
10003cc3:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003cc9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003ccc:	01 d0                	add    eax,edx
10003cce:	8a 00                	mov    al,BYTE PTR [eax]
10003cd0:	3c 3a                	cmp    al,0x3a
10003cd2:	0f 85 f8 04 00 00    	jne    100041d0 <firstRun(bool)+0x187b>
10003cd8:	eb a8                	jmp    10003c82 <firstRun(bool)+0x132d>
10003cda:	a0 00 00 00 00       	mov    al,ds:0x0	10003cdb: R_386_32	installKey
10003cdf:	3c 2f                	cmp    al,0x2f
10003ce1:	7e 09                	jle    10003cec <firstRun(bool)+0x1397>
10003ce3:	a0 00 00 00 00       	mov    al,ds:0x0	10003ce4: R_386_32	installKey
10003ce8:	3c 39                	cmp    al,0x39
10003cea:	7e 12                	jle    10003cfe <firstRun(bool)+0x13a9>
10003cec:	a0 00 00 00 00       	mov    al,ds:0x0	10003ced: R_386_32	installKey
10003cf1:	3c 20                	cmp    al,0x20
10003cf3:	74 09                	je     10003cfe <firstRun(bool)+0x13a9>
10003cf5:	a0 00 00 00 00       	mov    al,ds:0x0	10003cf6: R_386_32	installKey
10003cfa:	3c 04                	cmp    al,0x4
10003cfc:	75 04                	jne    10003d02 <firstRun(bool)+0x13ad>
10003cfe:	b0 01                	mov    al,0x1
10003d00:	eb 02                	jmp    10003d04 <firstRun(bool)+0x13af>
10003d02:	b0 00                	mov    al,0x0
10003d04:	84 c0                	test   al,al
10003d06:	0f 84 cf 01 00 00    	je     10003edb <firstRun(bool)+0x1586>
10003d0c:	a0 00 00 00 00       	mov    al,ds:0x0	10003d0d: R_386_32	installKey
10003d11:	3c 2f                	cmp    al,0x2f
10003d13:	7e 0d                	jle    10003d22 <firstRun(bool)+0x13cd>
10003d15:	a0 00 00 00 00       	mov    al,ds:0x0	10003d16: R_386_32	installKey
10003d1a:	3c 39                	cmp    al,0x39
10003d1c:	7f 04                	jg     10003d22 <firstRun(bool)+0x13cd>
10003d1e:	b0 01                	mov    al,0x1
10003d20:	eb 02                	jmp    10003d24 <firstRun(bool)+0x13cf>
10003d22:	b0 00                	mov    al,0x0
10003d24:	84 c0                	test   al,al
10003d26:	0f 84 51 01 00 00    	je     10003e7d <firstRun(bool)+0x1528>
10003d2c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10003d30:	75 0d                	jne    10003d3f <firstRun(bool)+0x13ea>
10003d32:	a0 00 00 00 00       	mov    al,ds:0x0	10003d33: R_386_32	installKey
10003d37:	3c 33                	cmp    al,0x33
10003d39:	7e 04                	jle    10003d3f <firstRun(bool)+0x13ea>
10003d3b:	b0 01                	mov    al,0x1
10003d3d:	eb 02                	jmp    10003d41 <firstRun(bool)+0x13ec>
10003d3f:	b0 00                	mov    al,0x0
10003d41:	84 c0                	test   al,al
10003d43:	74 28                	je     10003d6d <firstRun(bool)+0x1418>
10003d45:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d48:	8d 50 01             	lea    edx,[eax+0x1]
10003d4b:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003d4e:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003d56:	a0 00 00 00 00       	mov    al,ds:0x0	10003d57: R_386_32	installKey
10003d5b:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003d61:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003d64:	01 ca                	add    edx,ecx
10003d66:	88 02                	mov    BYTE PTR [edx],al
10003d68:	e9 10 01 00 00       	jmp    10003e7d <firstRun(bool)+0x1528>
10003d6d:	83 7d e4 03          	cmp    DWORD PTR [ebp-0x1c],0x3
10003d71:	75 0d                	jne    10003d80 <firstRun(bool)+0x142b>
10003d73:	a0 00 00 00 00       	mov    al,ds:0x0	10003d74: R_386_32	installKey
10003d78:	3c 31                	cmp    al,0x31
10003d7a:	7e 04                	jle    10003d80 <firstRun(bool)+0x142b>
10003d7c:	b0 01                	mov    al,0x1
10003d7e:	eb 02                	jmp    10003d82 <firstRun(bool)+0x142d>
10003d80:	b0 00                	mov    al,0x0
10003d82:	84 c0                	test   al,al
10003d84:	74 28                	je     10003dae <firstRun(bool)+0x1459>
10003d86:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d89:	8d 50 01             	lea    edx,[eax+0x1]
10003d8c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003d8f:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003d97:	a0 00 00 00 00       	mov    al,ds:0x0	10003d98: R_386_32	installKey
10003d9c:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003da2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003da5:	01 ca                	add    edx,ecx
10003da7:	88 02                	mov    BYTE PTR [edx],al
10003da9:	e9 cf 00 00 00       	jmp    10003e7d <firstRun(bool)+0x1528>
10003dae:	83 7d e4 0b          	cmp    DWORD PTR [ebp-0x1c],0xb
10003db2:	75 0d                	jne    10003dc1 <firstRun(bool)+0x146c>
10003db4:	a0 00 00 00 00       	mov    al,ds:0x0	10003db5: R_386_32	installKey
10003db9:	3c 32                	cmp    al,0x32
10003dbb:	7e 04                	jle    10003dc1 <firstRun(bool)+0x146c>
10003dbd:	b0 01                	mov    al,0x1
10003dbf:	eb 02                	jmp    10003dc3 <firstRun(bool)+0x146e>
10003dc1:	b0 00                	mov    al,0x0
10003dc3:	84 c0                	test   al,al
10003dc5:	74 28                	je     10003def <firstRun(bool)+0x149a>
10003dc7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003dca:	8d 50 01             	lea    edx,[eax+0x1]
10003dcd:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003dd0:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003dd8:	a0 00 00 00 00       	mov    al,ds:0x0	10003dd9: R_386_32	installKey
10003ddd:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003de3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003de6:	01 ca                	add    edx,ecx
10003de8:	88 02                	mov    BYTE PTR [edx],al
10003dea:	e9 8e 00 00 00       	jmp    10003e7d <firstRun(bool)+0x1528>
10003def:	83 7d e4 0e          	cmp    DWORD PTR [ebp-0x1c],0xe
10003df3:	75 0d                	jne    10003e02 <firstRun(bool)+0x14ad>
10003df5:	a0 00 00 00 00       	mov    al,ds:0x0	10003df6: R_386_32	installKey
10003dfa:	3c 35                	cmp    al,0x35
10003dfc:	7e 04                	jle    10003e02 <firstRun(bool)+0x14ad>
10003dfe:	b0 01                	mov    al,0x1
10003e00:	eb 02                	jmp    10003e04 <firstRun(bool)+0x14af>
10003e02:	b0 00                	mov    al,0x0
10003e04:	84 c0                	test   al,al
10003e06:	74 25                	je     10003e2d <firstRun(bool)+0x14d8>
10003e08:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e0b:	8d 50 01             	lea    edx,[eax+0x1]
10003e0e:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003e11:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003e19:	a0 00 00 00 00       	mov    al,ds:0x0	10003e1a: R_386_32	installKey
10003e1e:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003e24:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003e27:	01 ca                	add    edx,ecx
10003e29:	88 02                	mov    BYTE PTR [edx],al
10003e2b:	eb 50                	jmp    10003e7d <firstRun(bool)+0x1528>
10003e2d:	83 7d e4 11          	cmp    DWORD PTR [ebp-0x1c],0x11
10003e31:	75 0d                	jne    10003e40 <firstRun(bool)+0x14eb>
10003e33:	a0 00 00 00 00       	mov    al,ds:0x0	10003e34: R_386_32	installKey
10003e38:	3c 35                	cmp    al,0x35
10003e3a:	7e 04                	jle    10003e40 <firstRun(bool)+0x14eb>
10003e3c:	b0 01                	mov    al,0x1
10003e3e:	eb 02                	jmp    10003e42 <firstRun(bool)+0x14ed>
10003e40:	b0 00                	mov    al,0x0
10003e42:	84 c0                	test   al,al
10003e44:	74 25                	je     10003e6b <firstRun(bool)+0x1516>
10003e46:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e49:	8d 50 01             	lea    edx,[eax+0x1]
10003e4c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003e4f:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003e57:	a0 00 00 00 00       	mov    al,ds:0x0	10003e58: R_386_32	installKey
10003e5c:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003e62:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003e65:	01 ca                	add    edx,ecx
10003e67:	88 02                	mov    BYTE PTR [edx],al
10003e69:	eb 12                	jmp    10003e7d <firstRun(bool)+0x1528>
10003e6b:	a0 00 00 00 00       	mov    al,ds:0x0	10003e6c: R_386_32	installKey
10003e70:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003e76:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003e79:	01 ca                	add    edx,ecx
10003e7b:	88 02                	mov    BYTE PTR [edx],al
10003e7d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10003e80:	83 ec 0c             	sub    esp,0xc
10003e83:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003e89:	50                   	push   eax
10003e8a:	e8 fc ff ff ff       	call   10003e8b <firstRun(bool)+0x1536>	10003e8b: R_386_PC32	strlen
10003e8f:	83 c4 10             	add    esp,0x10
10003e92:	89 c2                	mov    edx,eax
10003e94:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e97:	39 c2                	cmp    edx,eax
10003e99:	77 07                	ja     10003ea2 <firstRun(bool)+0x154d>
10003e9b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003ea2:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003ea8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003eab:	01 d0                	add    eax,edx
10003ead:	8a 00                	mov    al,BYTE PTR [eax]
10003eaf:	3c 20                	cmp    al,0x20
10003eb1:	74 ca                	je     10003e7d <firstRun(bool)+0x1528>
10003eb3:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003eb9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003ebc:	01 d0                	add    eax,edx
10003ebe:	8a 00                	mov    al,BYTE PTR [eax]
10003ec0:	3c 2f                	cmp    al,0x2f
10003ec2:	74 b9                	je     10003e7d <firstRun(bool)+0x1528>
10003ec4:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003eca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003ecd:	01 d0                	add    eax,edx
10003ecf:	8a 00                	mov    al,BYTE PTR [eax]
10003ed1:	3c 3a                	cmp    al,0x3a
10003ed3:	0f 85 f7 02 00 00    	jne    100041d0 <firstRun(bool)+0x187b>
10003ed9:	eb a2                	jmp    10003e7d <firstRun(bool)+0x1528>
10003edb:	a0 00 00 00 00       	mov    al,ds:0x0	10003edc: R_386_32	installKey
10003ee0:	3c 0a                	cmp    al,0xa
10003ee2:	0f 94 c0             	sete   al
10003ee5:	84 c0                	test   al,al
10003ee7:	0f 84 d1 02 00 00    	je     100041be <firstRun(bool)+0x1869>
10003eed:	8a 85 40 ff ff ff    	mov    al,BYTE PTR [ebp-0xc0]
10003ef3:	0f be c0             	movsx  eax,al
10003ef6:	8d 50 d0             	lea    edx,[eax-0x30]
10003ef9:	89 d0                	mov    eax,edx
10003efb:	c1 e0 02             	shl    eax,0x2
10003efe:	01 d0                	add    eax,edx
10003f00:	01 c0                	add    eax,eax
10003f02:	89 c2                	mov    edx,eax
10003f04:	8a 85 41 ff ff ff    	mov    al,BYTE PTR [ebp-0xbf]
10003f0a:	0f be c0             	movsx  eax,al
10003f0d:	83 e8 30             	sub    eax,0x30
10003f10:	01 d0                	add    eax,edx
10003f12:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10003f15:	8a 85 43 ff ff ff    	mov    al,BYTE PTR [ebp-0xbd]
10003f1b:	0f be c0             	movsx  eax,al
10003f1e:	8d 50 d0             	lea    edx,[eax-0x30]
10003f21:	89 d0                	mov    eax,edx
10003f23:	c1 e0 02             	shl    eax,0x2
10003f26:	01 d0                	add    eax,edx
10003f28:	01 c0                	add    eax,eax
10003f2a:	89 c2                	mov    edx,eax
10003f2c:	8a 85 44 ff ff ff    	mov    al,BYTE PTR [ebp-0xbc]
10003f32:	0f be c0             	movsx  eax,al
10003f35:	83 e8 30             	sub    eax,0x30
10003f38:	01 d0                	add    eax,edx
10003f3a:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10003f3d:	8a 85 46 ff ff ff    	mov    al,BYTE PTR [ebp-0xba]
10003f43:	0f be c0             	movsx  eax,al
10003f46:	8d 50 d0             	lea    edx,[eax-0x30]
10003f49:	89 d0                	mov    eax,edx
10003f4b:	c1 e0 02             	shl    eax,0x2
10003f4e:	01 d0                	add    eax,edx
10003f50:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f57:	01 d0                	add    eax,edx
10003f59:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f60:	01 d0                	add    eax,edx
10003f62:	c1 e0 03             	shl    eax,0x3
10003f65:	89 c1                	mov    ecx,eax
10003f67:	8a 85 47 ff ff ff    	mov    al,BYTE PTR [ebp-0xb9]
10003f6d:	0f be c0             	movsx  eax,al
10003f70:	8d 50 d0             	lea    edx,[eax-0x30]
10003f73:	89 d0                	mov    eax,edx
10003f75:	c1 e0 02             	shl    eax,0x2
10003f78:	01 d0                	add    eax,edx
10003f7a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f81:	01 d0                	add    eax,edx
10003f83:	c1 e0 02             	shl    eax,0x2
10003f86:	01 c1                	add    ecx,eax
10003f88:	8a 85 48 ff ff ff    	mov    al,BYTE PTR [ebp-0xb8]
10003f8e:	0f be c0             	movsx  eax,al
10003f91:	8d 50 d0             	lea    edx,[eax-0x30]
10003f94:	89 d0                	mov    eax,edx
10003f96:	c1 e0 02             	shl    eax,0x2
10003f99:	01 d0                	add    eax,edx
10003f9b:	01 c0                	add    eax,eax
10003f9d:	8d 14 01             	lea    edx,[ecx+eax*1]
10003fa0:	8a 85 49 ff ff ff    	mov    al,BYTE PTR [ebp-0xb7]
10003fa6:	0f be c0             	movsx  eax,al
10003fa9:	83 e8 30             	sub    eax,0x30
10003fac:	01 d0                	add    eax,edx
10003fae:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10003fb1:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
10003fb7:	0f be c0             	movsx  eax,al
10003fba:	8d 50 d0             	lea    edx,[eax-0x30]
10003fbd:	89 d0                	mov    eax,edx
10003fbf:	c1 e0 02             	shl    eax,0x2
10003fc2:	01 d0                	add    eax,edx
10003fc4:	01 c0                	add    eax,eax
10003fc6:	89 c2                	mov    edx,eax
10003fc8:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
10003fce:	0f be c0             	movsx  eax,al
10003fd1:	83 e8 30             	sub    eax,0x30
10003fd4:	01 d0                	add    eax,edx
10003fd6:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10003fd9:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
10003fdf:	0f be c0             	movsx  eax,al
10003fe2:	8d 50 d0             	lea    edx,[eax-0x30]
10003fe5:	89 d0                	mov    eax,edx
10003fe7:	c1 e0 02             	shl    eax,0x2
10003fea:	01 d0                	add    eax,edx
10003fec:	01 c0                	add    eax,eax
10003fee:	89 c2                	mov    edx,eax
10003ff0:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
10003ff6:	0f be c0             	movsx  eax,al
10003ff9:	83 e8 30             	sub    eax,0x30
10003ffc:	01 d0                	add    eax,edx
10003ffe:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10004001:	8a 85 51 ff ff ff    	mov    al,BYTE PTR [ebp-0xaf]
10004007:	0f be c0             	movsx  eax,al
1000400a:	8d 50 d0             	lea    edx,[eax-0x30]
1000400d:	89 d0                	mov    eax,edx
1000400f:	c1 e0 02             	shl    eax,0x2
10004012:	01 d0                	add    eax,edx
10004014:	01 c0                	add    eax,eax
10004016:	89 c2                	mov    edx,eax
10004018:	8a 85 52 ff ff ff    	mov    al,BYTE PTR [ebp-0xae]
1000401e:	0f be c0             	movsx  eax,al
10004021:	83 e8 30             	sub    eax,0x30
10004024:	01 d0                	add    eax,edx
10004026:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
10004029:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
1000402c:	83 e0 03             	and    eax,0x3
1000402f:	85 c0                	test   eax,eax
10004031:	75 1f                	jne    10004052 <firstRun(bool)+0x16fd>
10004033:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10004036:	b9 19 00 00 00       	mov    ecx,0x19
1000403b:	99                   	cdq    
1000403c:	f7 f9                	idiv   ecx
1000403e:	89 d0                	mov    eax,edx
10004040:	85 c0                	test   eax,eax
10004042:	75 0a                	jne    1000404e <firstRun(bool)+0x16f9>
10004044:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10004047:	83 e0 0f             	and    eax,0xf
1000404a:	85 c0                	test   eax,eax
1000404c:	75 04                	jne    10004052 <firstRun(bool)+0x16fd>
1000404e:	b0 01                	mov    al,0x1
10004050:	eb 02                	jmp    10004054 <firstRun(bool)+0x16ff>
10004052:	b0 00                	mov    al,0x0
10004054:	88 45 93             	mov    BYTE PTR [ebp-0x6d],al
10004057:	83 7d a8 1f          	cmp    DWORD PTR [ebp-0x58],0x1f
1000405b:	7e 0c                	jle    10004069 <firstRun(bool)+0x1714>
1000405d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004064:	e9 67 01 00 00       	jmp    100041d0 <firstRun(bool)+0x187b>
10004069:	83 7d a8 1e          	cmp    DWORD PTR [ebp-0x58],0x1e
1000406d:	7e 2a                	jle    10004099 <firstRun(bool)+0x1744>
1000406f:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
10004073:	74 18                	je     1000408d <firstRun(bool)+0x1738>
10004075:	83 7d a4 04          	cmp    DWORD PTR [ebp-0x5c],0x4
10004079:	74 12                	je     1000408d <firstRun(bool)+0x1738>
1000407b:	83 7d a4 06          	cmp    DWORD PTR [ebp-0x5c],0x6
1000407f:	74 0c                	je     1000408d <firstRun(bool)+0x1738>
10004081:	83 7d a4 09          	cmp    DWORD PTR [ebp-0x5c],0x9
10004085:	74 06                	je     1000408d <firstRun(bool)+0x1738>
10004087:	83 7d a4 0b          	cmp    DWORD PTR [ebp-0x5c],0xb
1000408b:	75 0c                	jne    10004099 <firstRun(bool)+0x1744>
1000408d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004094:	e9 37 01 00 00       	jmp    100041d0 <firstRun(bool)+0x187b>
10004099:	83 7d a8 1d          	cmp    DWORD PTR [ebp-0x58],0x1d
1000409d:	75 1c                	jne    100040bb <firstRun(bool)+0x1766>
1000409f:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
100040a3:	75 16                	jne    100040bb <firstRun(bool)+0x1766>
100040a5:	8a 45 93             	mov    al,BYTE PTR [ebp-0x6d]
100040a8:	83 f0 01             	xor    eax,0x1
100040ab:	84 c0                	test   al,al
100040ad:	74 0c                	je     100040bb <firstRun(bool)+0x1766>
100040af:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100040b6:	e9 15 01 00 00       	jmp    100041d0 <firstRun(bool)+0x187b>
100040bb:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
100040bf:	75 0c                	jne    100040cd <firstRun(bool)+0x1778>
100040c1:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100040c8:	e9 03 01 00 00       	jmp    100041d0 <firstRun(bool)+0x187b>
100040cd:	83 7d a4 0c          	cmp    DWORD PTR [ebp-0x5c],0xc
100040d1:	7f 06                	jg     100040d9 <firstRun(bool)+0x1784>
100040d3:	83 7d a4 00          	cmp    DWORD PTR [ebp-0x5c],0x0
100040d7:	75 0c                	jne    100040e5 <firstRun(bool)+0x1790>
100040d9:	c7 45 e4 03 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x3
100040e0:	e9 eb 00 00 00       	jmp    100041d0 <firstRun(bool)+0x187b>
100040e5:	81 7d a0 b7 0b 00 00 	cmp    DWORD PTR [ebp-0x60],0xbb7
100040ec:	7f 09                	jg     100040f7 <firstRun(bool)+0x17a2>
100040ee:	81 7d a0 b1 07 00 00 	cmp    DWORD PTR [ebp-0x60],0x7b1
100040f5:	7f 0c                	jg     10004103 <firstRun(bool)+0x17ae>
100040f7:	c7 45 e4 06 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x6
100040fe:	e9 cd 00 00 00       	jmp    100041d0 <firstRun(bool)+0x187b>
10004103:	83 7d 9c 17          	cmp    DWORD PTR [ebp-0x64],0x17
10004107:	7e 0c                	jle    10004115 <firstRun(bool)+0x17c0>
10004109:	c7 45 e4 0b 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xb
10004110:	e9 bb 00 00 00       	jmp    100041d0 <firstRun(bool)+0x187b>
10004115:	83 7d 98 3b          	cmp    DWORD PTR [ebp-0x68],0x3b
10004119:	7e 0c                	jle    10004127 <firstRun(bool)+0x17d2>
1000411b:	c7 45 e4 0e 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xe
10004122:	e9 a9 00 00 00       	jmp    100041d0 <firstRun(bool)+0x187b>
10004127:	83 7d 94 3b          	cmp    DWORD PTR [ebp-0x6c],0x3b
1000412b:	7e 0c                	jle    10004139 <firstRun(bool)+0x17e4>
1000412d:	c7 45 e4 11 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x11
10004134:	e9 97 00 00 00       	jmp    100041d0 <firstRun(bool)+0x187b>
10004139:	8b 45 98             	mov    eax,DWORD PTR [ebp-0x68]
1000413c:	88 85 d9 fe ff ff    	mov    BYTE PTR [ebp-0x127],al
10004142:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
10004145:	88 85 da fe ff ff    	mov    BYTE PTR [ebp-0x126],al
1000414b:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
1000414e:	88 85 d8 fe ff ff    	mov    BYTE PTR [ebp-0x128],al
10004154:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10004157:	88 85 d4 fe ff ff    	mov    BYTE PTR [ebp-0x12c],al
1000415d:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
10004160:	88 85 d5 fe ff ff    	mov    BYTE PTR [ebp-0x12b],al
10004166:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10004169:	66 89 85 d6 fe ff ff 	mov    WORD PTR [ebp-0x12a],ax
10004170:	a1 00 00 00 00       	mov    eax,ds:0x0	10004171: R_386_32	Krnl::computer
10004175:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
1000417b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000417c: R_386_32	Krnl::computer
10004180:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004186:	8b 00                	mov    eax,DWORD PTR [eax]
10004188:	83 c0 30             	add    eax,0x30
1000418b:	8b 00                	mov    eax,DWORD PTR [eax]
1000418d:	83 ec 04             	sub    esp,0x4
10004190:	ff b5 d8 fe ff ff    	push   DWORD PTR [ebp-0x128]
10004196:	ff b5 d4 fe ff ff    	push   DWORD PTR [ebp-0x12c]
1000419c:	52                   	push   edx
1000419d:	ff d0                	call   eax
1000419f:	83 c4 10             	add    esp,0x10
100041a2:	90                   	nop
100041a3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100041a5: R_386_32	installKey
100041aa:	83 ec 08             	sub    esp,0x8
100041ad:	6a 00                	push   0x0
100041af:	68 a0 0f 00 00       	push   0xfa0
100041b4:	e8 fc ff ff ff       	call   100041b5 <firstRun(bool)+0x1860>	100041b5: R_386_PC32	milliTenthSleep(unsigned long long)
100041b9:	83 c4 10             	add    esp,0x10
100041bc:	eb 31                	jmp    100041ef <firstRun(bool)+0x189a>
100041be:	a0 00 00 00 00       	mov    al,ds:0x0	100041bf: R_386_32	installKey
100041c3:	3c 1b                	cmp    al,0x1b
100041c5:	0f 94 c0             	sete   al
100041c8:	84 c0                	test   al,al
100041ca:	0f 85 fc e8 ff ff    	jne    10002acc <firstRun(bool)+0x177>
100041d0:	83 ec 08             	sub    esp,0x8
100041d3:	6a 00                	push   0x0
100041d5:	68 f4 01 00 00       	push   0x1f4
100041da:	e8 fc ff ff ff       	call   100041db <firstRun(bool)+0x1886>	100041db: R_386_PC32	milliTenthSleep(unsigned long long)
100041df:	83 c4 10             	add    esp,0x10
100041e2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100041e4: R_386_32	installKey
100041e9:	e9 af f7 ff ff       	jmp    1000399d <firstRun(bool)+0x1048>
100041ee:	90                   	nop
100041ef:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100041f1: R_386_32	installKey
100041f6:	a0 00 00 00 00       	mov    al,ds:0x0	100041f7: R_386_32	firstTimeEnteringTimezone
100041fb:	84 c0                	test   al,al
100041fd:	74 18                	je     10004217 <firstRun(bool)+0x18c2>
100041ff:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004201: R_386_32	firstTimeEnteringTimezone
10004206:	c7 05 00 00 00 00 3b 00 00 00 	mov    DWORD PTR ds:0x0,0x3b	10004208: R_386_32	tzsel
10004210:	c7 45 dc 30 00 00 00 	mov    DWORD PTR [ebp-0x24],0x30
10004217:	e8 fc ff ff ff       	call   10004218 <firstRun(bool)+0x18c3>	10004218: R_386_PC32	drawBootScreen()
1000421c:	83 ec 0c             	sub    esp,0xc
1000421f:	68 47 a9 00 10       	push   0x1000a947	10004220: R_386_32	.text
10004224:	6a 14                	push   0x14
10004226:	6a 3c                	push   0x3c
10004228:	6a 01                	push   0x1
1000422a:	6a 12                	push   0x12
1000422c:	e8 fc ff ff ff       	call   1000422d <firstRun(bool)+0x18d8>	1000422d: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004231:	83 c4 20             	add    esp,0x20
10004234:	a1 00 00 00 00       	mov    eax,ds:0x0	10004235: R_386_32	term
10004239:	83 ec 04             	sub    esp,0x4
1000423c:	6a 04                	push   0x4
1000423e:	6a 14                	push   0x14
10004240:	50                   	push   eax
10004241:	e8 fc ff ff ff       	call   10004242 <firstRun(bool)+0x18ed>	10004242: R_386_PC32	VgaText::setCursor(int, int)
10004246:	83 c4 10             	add    esp,0x10
10004249:	a1 00 00 00 00       	mov    eax,ds:0x0	1000424a: R_386_32	term
1000424e:	83 ec 08             	sub    esp,0x8
10004251:	68 d4 a9 00 10       	push   0x1000a9d4	10004252: R_386_32	.text
10004256:	50                   	push   eax
10004257:	e8 fc ff ff ff       	call   10004258 <firstRun(bool)+0x1903>	10004258: R_386_PC32	VgaText::puts(char const*)
1000425c:	83 c4 10             	add    esp,0x10
1000425f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004260: R_386_32	term
10004264:	83 ec 04             	sub    esp,0x4
10004267:	6a 18                	push   0x18
10004269:	6a 11                	push   0x11
1000426b:	50                   	push   eax
1000426c:	e8 fc ff ff ff       	call   1000426d <firstRun(bool)+0x1918>	1000426d: R_386_PC32	VgaText::setCursor(int, int)
10004271:	83 c4 10             	add    esp,0x10
10004274:	a1 00 00 00 00       	mov    eax,ds:0x0	10004275: R_386_32	term
10004279:	6a 0b                	push   0xb
1000427b:	6a 03                	push   0x3
1000427d:	68 be a9 00 10       	push   0x1000a9be	1000427e: R_386_32	.text
10004282:	50                   	push   eax
10004283:	e8 fc ff ff ff       	call   10004284 <firstRun(bool)+0x192f>	10004284: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004288:	83 c4 10             	add    esp,0x10
1000428b:	e8 fc ff ff ff       	call   1000428c <firstRun(bool)+0x1937>	1000428c: R_386_PC32	loadTimezoneStrings()
10004290:	89 45 8c             	mov    DWORD PTR [ebp-0x74],eax
10004293:	b8 d2 00 00 00       	mov    eax,0xd2
10004298:	99                   	cdq    
10004299:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
1000429c:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
1000429f:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
100042a6:	83 7d cc 0d          	cmp    DWORD PTR [ebp-0x34],0xd
100042aa:	7f 32                	jg     100042de <firstRun(bool)+0x1989>
100042ac:	a1 00 00 00 00       	mov    eax,ds:0x0	100042ad: R_386_32	term
100042b1:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
100042b4:	83 c2 07             	add    edx,0x7
100042b7:	83 ec 04             	sub    esp,0x4
100042ba:	52                   	push   edx
100042bb:	6a 4b                	push   0x4b
100042bd:	50                   	push   eax
100042be:	e8 fc ff ff ff       	call   100042bf <firstRun(bool)+0x196a>	100042bf: R_386_PC32	VgaText::setCursor(int, int)
100042c3:	83 c4 10             	add    esp,0x10
100042c6:	a1 00 00 00 00       	mov    eax,ds:0x0	100042c7: R_386_32	term
100042cb:	83 ec 08             	sub    esp,0x8
100042ce:	6a 20                	push   0x20
100042d0:	50                   	push   eax
100042d1:	e8 fc ff ff ff       	call   100042d2 <firstRun(bool)+0x197d>	100042d2: R_386_PC32	VgaText::putchar(char)
100042d6:	83 c4 10             	add    esp,0x10
100042d9:	ff 45 cc             	inc    DWORD PTR [ebp-0x34]
100042dc:	eb c8                	jmp    100042a6 <firstRun(bool)+0x1951>
100042de:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
100042e5:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
100042e8:	3b 45 88             	cmp    eax,DWORD PTR [ebp-0x78]
100042eb:	7d 48                	jge    10004335 <firstRun(bool)+0x19e0>
100042ed:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100042ef: R_386_32	term
100042f3:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
100042f6:	8d 58 07             	lea    ebx,[eax+0x7]
100042f9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100042fc:	89 d0                	mov    eax,edx
100042fe:	01 c0                	add    eax,eax
10004300:	01 d0                	add    eax,edx
10004302:	01 c0                	add    eax,eax
10004304:	01 d0                	add    eax,edx
10004306:	01 c0                	add    eax,eax
10004308:	99                   	cdq    
10004309:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
1000430c:	01 d8                	add    eax,ebx
1000430e:	83 ec 04             	sub    esp,0x4
10004311:	50                   	push   eax
10004312:	6a 4b                	push   0x4b
10004314:	51                   	push   ecx
10004315:	e8 fc ff ff ff       	call   10004316 <firstRun(bool)+0x19c1>	10004316: R_386_PC32	VgaText::setCursor(int, int)
1000431a:	83 c4 10             	add    esp,0x10
1000431d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000431e: R_386_32	term
10004322:	83 ec 08             	sub    esp,0x8
10004325:	6a db                	push   0xffffffdb
10004327:	50                   	push   eax
10004328:	e8 fc ff ff ff       	call   10004329 <firstRun(bool)+0x19d4>	10004329: R_386_PC32	VgaText::putchar(char)
1000432d:	83 c4 10             	add    esp,0x10
10004330:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
10004333:	eb b0                	jmp    100042e5 <firstRun(bool)+0x1990>
10004335:	a1 00 00 00 00       	mov    eax,ds:0x0	10004336: R_386_32	term
1000433a:	83 ec 04             	sub    esp,0x4
1000433d:	6a 06                	push   0x6
1000433f:	6a 4b                	push   0x4b
10004341:	50                   	push   eax
10004342:	e8 fc ff ff ff       	call   10004343 <firstRun(bool)+0x19ee>	10004343: R_386_PC32	VgaText::setCursor(int, int)
10004347:	83 c4 10             	add    esp,0x10
1000434a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000434b: R_386_32	term
1000434f:	83 ec 08             	sub    esp,0x8
10004352:	6a 1e                	push   0x1e
10004354:	50                   	push   eax
10004355:	e8 fc ff ff ff       	call   10004356 <firstRun(bool)+0x1a01>	10004356: R_386_PC32	VgaText::putchar(char)
1000435a:	83 c4 10             	add    esp,0x10
1000435d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000435e: R_386_32	term
10004362:	83 ec 04             	sub    esp,0x4
10004365:	6a 14                	push   0x14
10004367:	6a 4b                	push   0x4b
10004369:	50                   	push   eax
1000436a:	e8 fc ff ff ff       	call   1000436b <firstRun(bool)+0x1a16>	1000436b: R_386_PC32	VgaText::setCursor(int, int)
1000436f:	83 c4 10             	add    esp,0x10
10004372:	a1 00 00 00 00       	mov    eax,ds:0x0	10004373: R_386_32	term
10004377:	83 ec 08             	sub    esp,0x8
1000437a:	6a 1f                	push   0x1f
1000437c:	50                   	push   eax
1000437d:	e8 fc ff ff ff       	call   1000437e <firstRun(bool)+0x1a29>	1000437e: R_386_PC32	VgaText::putchar(char)
10004382:	83 c4 10             	add    esp,0x10
10004385:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
1000438c:	83 7d c4 0e          	cmp    DWORD PTR [ebp-0x3c],0xe
10004390:	7f 7e                	jg     10004410 <firstRun(bool)+0x1abb>
10004392:	a1 00 00 00 00       	mov    eax,ds:0x0	10004393: R_386_32	term
10004397:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
1000439a:	83 c2 06             	add    edx,0x6
1000439d:	83 ec 04             	sub    esp,0x4
100043a0:	52                   	push   edx
100043a1:	6a 14                	push   0x14
100043a3:	50                   	push   eax
100043a4:	e8 fc ff ff ff       	call   100043a5 <firstRun(bool)+0x1a50>	100043a5: R_386_PC32	VgaText::setCursor(int, int)
100043a9:	83 c4 10             	add    esp,0x10
100043ac:	a1 00 00 00 00       	mov    eax,ds:0x0	100043ad: R_386_32	term
100043b1:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
100043b4:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
100043b7:	01 d1                	add    ecx,edx
100043b9:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100043bb: R_386_32	tzsel
100043bf:	39 d1                	cmp    ecx,edx
100043c1:	75 07                	jne    100043ca <firstRun(bool)+0x1a75>
100043c3:	bb 00 00 00 00       	mov    ebx,0x0
100043c8:	eb 05                	jmp    100043cf <firstRun(bool)+0x1a7a>
100043ca:	bb 0f 00 00 00       	mov    ebx,0xf
100043cf:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
100043d2:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
100043d5:	01 d1                	add    ecx,edx
100043d7:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100043d9: R_386_32	tzsel
100043dd:	39 d1                	cmp    ecx,edx
100043df:	75 07                	jne    100043e8 <firstRun(bool)+0x1a93>
100043e1:	b9 0f 00 00 00       	mov    ecx,0xf
100043e6:	eb 05                	jmp    100043ed <firstRun(bool)+0x1a98>
100043e8:	b9 00 00 00 00       	mov    ecx,0x0
100043ed:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
100043f0:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
100043f3:	01 f2                	add    edx,esi
100043f5:	8b 14 95 00 00 00 00 	mov    edx,DWORD PTR [edx*4+0x0]	100043f8: R_386_32	timezoneStrings
100043fc:	53                   	push   ebx
100043fd:	51                   	push   ecx
100043fe:	52                   	push   edx
100043ff:	50                   	push   eax
10004400:	e8 fc ff ff ff       	call   10004401 <firstRun(bool)+0x1aac>	10004401: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004405:	83 c4 10             	add    esp,0x10
10004408:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
1000440b:	e9 7c ff ff ff       	jmp    1000438c <firstRun(bool)+0x1a37>
10004410:	a0 00 00 00 00       	mov    al,ds:0x0	10004411: R_386_32	installKey
10004415:	84 c0                	test   al,al
10004417:	0f 94 c0             	sete   al
1000441a:	84 c0                	test   al,al
1000441c:	74 02                	je     10004420 <firstRun(bool)+0x1acb>
1000441e:	eb f0                	jmp    10004410 <firstRun(bool)+0x1abb>
10004420:	a1 00 00 00 00       	mov    eax,ds:0x0	10004421: R_386_32	term
10004425:	05 82 00 00 00       	add    eax,0x82
1000442a:	83 ec 04             	sub    esp,0x4
1000442d:	6a 04                	push   0x4
1000442f:	6a 00                	push   0x0
10004431:	50                   	push   eax
10004432:	e8 fc ff ff ff       	call   10004433 <firstRun(bool)+0x1ade>	10004433: R_386_PC32	memset
10004437:	83 c4 10             	add    esp,0x10
1000443a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000443b: R_386_32	term
1000443f:	05 02 01 00 00       	add    eax,0x102
10004444:	83 ec 04             	sub    esp,0x4
10004447:	6a 04                	push   0x4
10004449:	6a 00                	push   0x0
1000444b:	50                   	push   eax
1000444c:	e8 fc ff ff ff       	call   1000444d <firstRun(bool)+0x1af8>	1000444d: R_386_PC32	memset
10004451:	83 c4 10             	add    esp,0x10
10004454:	a0 00 00 00 00       	mov    al,ds:0x0	10004455: R_386_32	installKey
10004459:	3c 01                	cmp    al,0x1
1000445b:	0f 94 c0             	sete   al
1000445e:	84 c0                	test   al,al
10004460:	74 41                	je     100044a3 <firstRun(bool)+0x1b4e>
10004462:	a1 00 00 00 00       	mov    eax,ds:0x0	10004463: R_386_32	tzsel
10004467:	48                   	dec    eax
10004468:	a3 00 00 00 00       	mov    ds:0x0,eax	10004469: R_386_32	tzsel
1000446d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000446e: R_386_32	tzsel
10004472:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
10004475:	83 f8 04             	cmp    eax,0x4
10004478:	7f 03                	jg     1000447d <firstRun(bool)+0x1b28>
1000447a:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
1000447d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000447e: R_386_32	tzsel
10004482:	85 c0                	test   eax,eax
10004484:	79 0a                	jns    10004490 <firstRun(bool)+0x1b3b>
10004486:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004488: R_386_32	tzsel
10004490:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10004494:	0f 89 82 00 00 00    	jns    1000451c <firstRun(bool)+0x1bc7>
1000449a:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100044a1:	eb 79                	jmp    1000451c <firstRun(bool)+0x1bc7>
100044a3:	a0 00 00 00 00       	mov    al,ds:0x0	100044a4: R_386_32	installKey
100044a8:	3c 02                	cmp    al,0x2
100044aa:	0f 94 c0             	sete   al
100044ad:	84 c0                	test   al,al
100044af:	74 4b                	je     100044fc <firstRun(bool)+0x1ba7>
100044b1:	a1 00 00 00 00       	mov    eax,ds:0x0	100044b2: R_386_32	tzsel
100044b6:	40                   	inc    eax
100044b7:	a3 00 00 00 00       	mov    ds:0x0,eax	100044b8: R_386_32	tzsel
100044bc:	a1 00 00 00 00       	mov    eax,ds:0x0	100044bd: R_386_32	tzsel
100044c1:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
100044c4:	83 f8 0a             	cmp    eax,0xa
100044c7:	7e 03                	jle    100044cc <firstRun(bool)+0x1b77>
100044c9:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
100044cc:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100044cf:	8d 50 ff             	lea    edx,[eax-0x1]
100044d2:	a1 00 00 00 00       	mov    eax,ds:0x0	100044d3: R_386_32	tzsel
100044d7:	39 c2                	cmp    edx,eax
100044d9:	7f 0b                	jg     100044e6 <firstRun(bool)+0x1b91>
100044db:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100044de:	83 e8 02             	sub    eax,0x2
100044e1:	a3 00 00 00 00       	mov    ds:0x0,eax	100044e2: R_386_32	tzsel
100044e6:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100044e9:	83 e8 0f             	sub    eax,0xf
100044ec:	39 45 dc             	cmp    DWORD PTR [ebp-0x24],eax
100044ef:	7c 2b                	jl     1000451c <firstRun(bool)+0x1bc7>
100044f1:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100044f4:	83 e8 10             	sub    eax,0x10
100044f7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100044fa:	eb 20                	jmp    1000451c <firstRun(bool)+0x1bc7>
100044fc:	a0 00 00 00 00       	mov    al,ds:0x0	100044fd: R_386_32	installKey
10004501:	3c 0a                	cmp    al,0xa
10004503:	0f 94 c0             	sete   al
10004506:	84 c0                	test   al,al
10004508:	75 30                	jne    1000453a <firstRun(bool)+0x1be5>
1000450a:	a0 00 00 00 00       	mov    al,ds:0x0	1000450b: R_386_32	installKey
1000450f:	3c 1b                	cmp    al,0x1b
10004511:	0f 94 c0             	sete   al
10004514:	84 c0                	test   al,al
10004516:	0f 85 85 f0 ff ff    	jne    100035a1 <firstRun(bool)+0xc4c>
1000451c:	83 ec 08             	sub    esp,0x8
1000451f:	6a 00                	push   0x0
10004521:	68 f4 01 00 00       	push   0x1f4
10004526:	e8 fc ff ff ff       	call   10004527 <firstRun(bool)+0x1bd2>	10004527: R_386_PC32	milliTenthSleep(unsigned long long)
1000452b:	83 c4 10             	add    esp,0x10
1000452e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004530: R_386_32	installKey
10004535:	e9 65 fd ff ff       	jmp    1000429f <firstRun(bool)+0x194a>
1000453a:	90                   	nop
1000453b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000453d: R_386_32	installKey
10004542:	83 ec 08             	sub    esp,0x8
10004545:	6a 00                	push   0x0
10004547:	68 a0 0f 00 00       	push   0xfa0
1000454c:	e8 fc ff ff ff       	call   1000454d <firstRun(bool)+0x1bf8>	1000454d: R_386_PC32	milliTenthSleep(unsigned long long)
10004551:	83 c4 10             	add    esp,0x10
10004554:	eb 01                	jmp    10004557 <firstRun(bool)+0x1c02>
10004556:	90                   	nop
10004557:	e8 fc ff ff ff       	call   10004558 <firstRun(bool)+0x1c03>	10004558: R_386_PC32	drawBootScreen()
1000455c:	83 ec 08             	sub    esp,0x8
1000455f:	6a 00                	push   0x0
10004561:	68 58 1b 00 00       	push   0x1b58
10004566:	e8 fc ff ff ff       	call   10004567 <firstRun(bool)+0x1c12>	10004567: R_386_PC32	milliTenthSleep(unsigned long long)
1000456b:	83 c4 10             	add    esp,0x10
1000456e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004570: R_386_32	installKey
10004575:	e8 fc ff ff ff       	call   10004576 <firstRun(bool)+0x1c21>	10004576: R_386_PC32	drawBootScreen()
1000457a:	83 ec 0c             	sub    esp,0xc
1000457d:	68 06 aa 00 10       	push   0x1000aa06	1000457e: R_386_32	.text
10004582:	6a 10                	push   0x10
10004584:	6a 37                	push   0x37
10004586:	6a 03                	push   0x3
10004588:	6a 14                	push   0x14
1000458a:	e8 fc ff ff ff       	call   1000458b <firstRun(bool)+0x1c36>	1000458b: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000458f:	83 c4 20             	add    esp,0x20
10004592:	a1 00 00 00 00       	mov    eax,ds:0x0	10004593: R_386_32	term
10004597:	83 ec 04             	sub    esp,0x4
1000459a:	6a 06                	push   0x6
1000459c:	6a 16                	push   0x16
1000459e:	50                   	push   eax
1000459f:	e8 fc ff ff ff       	call   100045a0 <firstRun(bool)+0x1c4b>	100045a0: R_386_PC32	VgaText::setCursor(int, int)
100045a4:	83 c4 10             	add    esp,0x10
100045a7:	a1 00 00 00 00       	mov    eax,ds:0x0	100045a8: R_386_32	term
100045ac:	83 ec 08             	sub    esp,0x8
100045af:	68 18 aa 00 10       	push   0x1000aa18	100045b0: R_386_32	.text
100045b4:	50                   	push   eax
100045b5:	e8 fc ff ff ff       	call   100045b6 <firstRun(bool)+0x1c61>	100045b6: R_386_PC32	VgaText::puts(char const*)
100045ba:	83 c4 10             	add    esp,0x10
100045bd:	a1 00 00 00 00       	mov    eax,ds:0x0	100045be: R_386_32	term
100045c2:	83 ec 04             	sub    esp,0x4
100045c5:	6a 07                	push   0x7
100045c7:	6a 16                	push   0x16
100045c9:	50                   	push   eax
100045ca:	e8 fc ff ff ff       	call   100045cb <firstRun(bool)+0x1c76>	100045cb: R_386_PC32	VgaText::setCursor(int, int)
100045cf:	83 c4 10             	add    esp,0x10
100045d2:	a1 00 00 00 00       	mov    eax,ds:0x0	100045d3: R_386_32	term
100045d7:	83 ec 08             	sub    esp,0x8
100045da:	68 4c aa 00 10       	push   0x1000aa4c	100045db: R_386_32	.text
100045df:	50                   	push   eax
100045e0:	e8 fc ff ff ff       	call   100045e1 <firstRun(bool)+0x1c8c>	100045e1: R_386_PC32	VgaText::puts(char const*)
100045e5:	83 c4 10             	add    esp,0x10
100045e8:	a1 00 00 00 00       	mov    eax,ds:0x0	100045e9: R_386_32	term
100045ed:	83 ec 04             	sub    esp,0x4
100045f0:	6a 18                	push   0x18
100045f2:	6a 11                	push   0x11
100045f4:	50                   	push   eax
100045f5:	e8 fc ff ff ff       	call   100045f6 <firstRun(bool)+0x1ca1>	100045f6: R_386_PC32	VgaText::setCursor(int, int)
100045fa:	83 c4 10             	add    esp,0x10
100045fd:	a1 00 00 00 00       	mov    eax,ds:0x0	100045fe: R_386_32	term
10004602:	6a 0b                	push   0xb
10004604:	6a 03                	push   0x3
10004606:	68 be a9 00 10       	push   0x1000a9be	10004607: R_386_32	.text
1000460b:	50                   	push   eax
1000460c:	e8 fc ff ff ff       	call   1000460d <firstRun(bool)+0x1cb8>	1000460d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004611:	83 c4 10             	add    esp,0x10
10004614:	c7 45 8c 03 00 00 00 	mov    DWORD PTR [ebp-0x74],0x3
1000461b:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10004621:	bb d0 ac 00 10       	mov    ebx,0x1000acd0	10004622: R_386_32	.text
10004626:	ba 03 00 00 00       	mov    edx,0x3
1000462b:	89 c7                	mov    edi,eax
1000462d:	89 de                	mov    esi,ebx
1000462f:	89 d1                	mov    ecx,edx
10004631:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004633:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
1000463a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
1000463d:	3b 45 8c             	cmp    eax,DWORD PTR [ebp-0x74]
10004640:	7d 68                	jge    100046aa <firstRun(bool)+0x1d55>
10004642:	a1 00 00 00 00       	mov    eax,ds:0x0	10004643: R_386_32	term
10004647:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
1000464a:	83 c2 09             	add    edx,0x9
1000464d:	83 ec 04             	sub    esp,0x4
10004650:	52                   	push   edx
10004651:	6a 16                	push   0x16
10004653:	50                   	push   eax
10004654:	e8 fc ff ff ff       	call   10004655 <firstRun(bool)+0x1d00>	10004655: R_386_PC32	VgaText::setCursor(int, int)
10004659:	83 c4 10             	add    esp,0x10
1000465c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000465d: R_386_32	term
10004661:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004663: R_386_32	modesel
10004667:	39 55 c0             	cmp    DWORD PTR [ebp-0x40],edx
1000466a:	75 07                	jne    10004673 <firstRun(bool)+0x1d1e>
1000466c:	bb 00 00 00 00       	mov    ebx,0x0
10004671:	eb 05                	jmp    10004678 <firstRun(bool)+0x1d23>
10004673:	bb 0f 00 00 00       	mov    ebx,0xf
10004678:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000467a: R_386_32	modesel
1000467e:	39 55 c0             	cmp    DWORD PTR [ebp-0x40],edx
10004681:	75 07                	jne    1000468a <firstRun(bool)+0x1d35>
10004683:	b9 0f 00 00 00       	mov    ecx,0xf
10004688:	eb 05                	jmp    1000468f <firstRun(bool)+0x1d3a>
1000468a:	b9 00 00 00 00       	mov    ecx,0x0
1000468f:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
10004692:	8b 94 95 c8 fe ff ff 	mov    edx,DWORD PTR [ebp+edx*4-0x138]
10004699:	53                   	push   ebx
1000469a:	51                   	push   ecx
1000469b:	52                   	push   edx
1000469c:	50                   	push   eax
1000469d:	e8 fc ff ff ff       	call   1000469e <firstRun(bool)+0x1d49>	1000469e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100046a2:	83 c4 10             	add    esp,0x10
100046a5:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
100046a8:	eb 90                	jmp    1000463a <firstRun(bool)+0x1ce5>
100046aa:	a0 00 00 00 00       	mov    al,ds:0x0	100046ab: R_386_32	installKey
100046af:	84 c0                	test   al,al
100046b1:	0f 94 c0             	sete   al
100046b4:	84 c0                	test   al,al
100046b6:	74 02                	je     100046ba <firstRun(bool)+0x1d65>
100046b8:	eb f0                	jmp    100046aa <firstRun(bool)+0x1d55>
100046ba:	a1 00 00 00 00       	mov    eax,ds:0x0	100046bb: R_386_32	term
100046bf:	05 82 00 00 00       	add    eax,0x82
100046c4:	83 ec 04             	sub    esp,0x4
100046c7:	6a 04                	push   0x4
100046c9:	6a 00                	push   0x0
100046cb:	50                   	push   eax
100046cc:	e8 fc ff ff ff       	call   100046cd <firstRun(bool)+0x1d78>	100046cd: R_386_PC32	memset
100046d1:	83 c4 10             	add    esp,0x10
100046d4:	a1 00 00 00 00       	mov    eax,ds:0x0	100046d5: R_386_32	term
100046d9:	05 02 01 00 00       	add    eax,0x102
100046de:	83 ec 04             	sub    esp,0x4
100046e1:	6a 04                	push   0x4
100046e3:	6a 00                	push   0x0
100046e5:	50                   	push   eax
100046e6:	e8 fc ff ff ff       	call   100046e7 <firstRun(bool)+0x1d92>	100046e7: R_386_PC32	memset
100046eb:	83 c4 10             	add    esp,0x10
100046ee:	a0 00 00 00 00       	mov    al,ds:0x0	100046ef: R_386_32	installKey
100046f3:	3c 01                	cmp    al,0x1
100046f5:	0f 94 c0             	sete   al
100046f8:	84 c0                	test   al,al
100046fa:	74 20                	je     1000471c <firstRun(bool)+0x1dc7>
100046fc:	a1 00 00 00 00       	mov    eax,ds:0x0	100046fd: R_386_32	modesel
10004701:	48                   	dec    eax
10004702:	a3 00 00 00 00       	mov    ds:0x0,eax	10004703: R_386_32	modesel
10004707:	a1 00 00 00 00       	mov    eax,ds:0x0	10004708: R_386_32	modesel
1000470c:	85 c0                	test   eax,eax
1000470e:	79 5a                	jns    1000476a <firstRun(bool)+0x1e15>
10004710:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004712: R_386_32	modesel
1000471a:	eb 4e                	jmp    1000476a <firstRun(bool)+0x1e15>
1000471c:	a0 00 00 00 00       	mov    al,ds:0x0	1000471d: R_386_32	installKey
10004721:	3c 02                	cmp    al,0x2
10004723:	0f 94 c0             	sete   al
10004726:	84 c0                	test   al,al
10004728:	74 20                	je     1000474a <firstRun(bool)+0x1df5>
1000472a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000472b: R_386_32	modesel
1000472f:	40                   	inc    eax
10004730:	a3 00 00 00 00       	mov    ds:0x0,eax	10004731: R_386_32	modesel
10004735:	a1 00 00 00 00       	mov    eax,ds:0x0	10004736: R_386_32	modesel
1000473a:	39 45 8c             	cmp    DWORD PTR [ebp-0x74],eax
1000473d:	7f 2b                	jg     1000476a <firstRun(bool)+0x1e15>
1000473f:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004742:	48                   	dec    eax
10004743:	a3 00 00 00 00       	mov    ds:0x0,eax	10004744: R_386_32	modesel
10004748:	eb 20                	jmp    1000476a <firstRun(bool)+0x1e15>
1000474a:	a0 00 00 00 00       	mov    al,ds:0x0	1000474b: R_386_32	installKey
1000474f:	3c 0a                	cmp    al,0xa
10004751:	0f 94 c0             	sete   al
10004754:	84 c0                	test   al,al
10004756:	75 30                	jne    10004788 <firstRun(bool)+0x1e33>
10004758:	a0 00 00 00 00       	mov    al,ds:0x0	10004759: R_386_32	installKey
1000475d:	3c 1b                	cmp    al,0x1b
1000475f:	0f 94 c0             	sete   al
10004762:	84 c0                	test   al,al
10004764:	0f 85 84 fa ff ff    	jne    100041ee <firstRun(bool)+0x1899>
1000476a:	83 ec 08             	sub    esp,0x8
1000476d:	6a 00                	push   0x0
1000476f:	68 f4 01 00 00       	push   0x1f4
10004774:	e8 fc ff ff ff       	call   10004775 <firstRun(bool)+0x1e20>	10004775: R_386_PC32	milliTenthSleep(unsigned long long)
10004779:	83 c4 10             	add    esp,0x10
1000477c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000477e: R_386_32	installKey
10004783:	e9 ab fe ff ff       	jmp    10004633 <firstRun(bool)+0x1cde>
10004788:	90                   	nop
10004789:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10004790:	0f 84 ff 00 00 00    	je     10004895 <firstRun(bool)+0x1f40>
10004796:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004798: R_386_32	showSidebar
1000479d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000479e: R_386_32	term
100047a2:	83 ec 0c             	sub    esp,0xc
100047a5:	50                   	push   eax
100047a6:	e8 fc ff ff ff       	call   100047a7 <firstRun(bool)+0x1e52>	100047a7: R_386_PC32	setActiveTerminal(VgaText*)
100047ab:	83 c4 10             	add    esp,0x10
100047ae:	e8 fc ff ff ff       	call   100047af <firstRun(bool)+0x1e5a>	100047af: R_386_PC32	drawBootScreen()
100047b3:	83 ec 0c             	sub    esp,0xc
100047b6:	68 81 aa 00 10       	push   0x1000aa81	100047b7: R_386_32	.text
100047bb:	6a 0d                	push   0xd
100047bd:	6a 32                	push   0x32
100047bf:	6a 05                	push   0x5
100047c1:	6a 16                	push   0x16
100047c3:	e8 fc ff ff ff       	call   100047c4 <firstRun(bool)+0x1e6f>	100047c4: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100047c8:	83 c4 20             	add    esp,0x20
100047cb:	a1 00 00 00 00       	mov    eax,ds:0x0	100047cc: R_386_32	term
100047d0:	83 ec 04             	sub    esp,0x4
100047d3:	6a 08                	push   0x8
100047d5:	6a 18                	push   0x18
100047d7:	50                   	push   eax
100047d8:	e8 fc ff ff ff       	call   100047d9 <firstRun(bool)+0x1e84>	100047d9: R_386_PC32	VgaText::setCursor(int, int)
100047dd:	83 c4 10             	add    esp,0x10
100047e0:	a1 00 00 00 00       	mov    eax,ds:0x0	100047e1: R_386_32	term
100047e5:	83 ec 08             	sub    esp,0x8
100047e8:	68 98 aa 00 10       	push   0x1000aa98	100047e9: R_386_32	.text
100047ed:	50                   	push   eax
100047ee:	e8 fc ff ff ff       	call   100047ef <firstRun(bool)+0x1e9a>	100047ef: R_386_PC32	VgaText::puts(char const*)
100047f3:	83 c4 10             	add    esp,0x10
100047f6:	a1 00 00 00 00       	mov    eax,ds:0x0	100047f7: R_386_32	term
100047fb:	83 ec 04             	sub    esp,0x4
100047fe:	6a 0a                	push   0xa
10004800:	6a 18                	push   0x18
10004802:	50                   	push   eax
10004803:	e8 fc ff ff ff       	call   10004804 <firstRun(bool)+0x1eaf>	10004804: R_386_PC32	VgaText::setCursor(int, int)
10004808:	83 c4 10             	add    esp,0x10
1000480b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000480c: R_386_32	term
10004810:	83 ec 08             	sub    esp,0x8
10004813:	68 c0 aa 00 10       	push   0x1000aac0	10004814: R_386_32	.text
10004818:	50                   	push   eax
10004819:	e8 fc ff ff ff       	call   1000481a <firstRun(bool)+0x1ec5>	1000481a: R_386_PC32	VgaText::puts(char const*)
1000481e:	83 c4 10             	add    esp,0x10
10004821:	a1 00 00 00 00       	mov    eax,ds:0x0	10004822: R_386_32	term
10004826:	83 ec 04             	sub    esp,0x4
10004829:	6a 0b                	push   0xb
1000482b:	6a 18                	push   0x18
1000482d:	50                   	push   eax
1000482e:	e8 fc ff ff ff       	call   1000482f <firstRun(bool)+0x1eda>	1000482f: R_386_PC32	VgaText::setCursor(int, int)
10004833:	83 c4 10             	add    esp,0x10
10004836:	a1 00 00 00 00       	mov    eax,ds:0x0	10004837: R_386_32	term
1000483b:	83 ec 08             	sub    esp,0x8
1000483e:	68 e9 aa 00 10       	push   0x1000aae9	1000483f: R_386_32	.text
10004843:	50                   	push   eax
10004844:	e8 fc ff ff ff       	call   10004845 <firstRun(bool)+0x1ef0>	10004845: R_386_PC32	VgaText::puts(char const*)
10004849:	83 c4 10             	add    esp,0x10
1000484c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000484d: R_386_32	term
10004851:	83 ec 04             	sub    esp,0x4
10004854:	6a 0e                	push   0xe
10004856:	6a 18                	push   0x18
10004858:	50                   	push   eax
10004859:	e8 fc ff ff ff       	call   1000485a <firstRun(bool)+0x1f05>	1000485a: R_386_PC32	VgaText::setCursor(int, int)
1000485e:	83 c4 10             	add    esp,0x10
10004861:	a1 00 00 00 00       	mov    eax,ds:0x0	10004862: R_386_32	term
10004866:	83 ec 08             	sub    esp,0x8
10004869:	68 f8 aa 00 10       	push   0x1000aaf8	1000486a: R_386_32	.text
1000486e:	50                   	push   eax
1000486f:	e8 fc ff ff ff       	call   10004870 <firstRun(bool)+0x1f1b>	10004870: R_386_PC32	VgaText::puts(char const*)
10004874:	83 c4 10             	add    esp,0x10
10004877:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004879: R_386_32	installKey
1000487e:	a0 00 00 00 00       	mov    al,ds:0x0	1000487f: R_386_32	installKey
10004883:	84 c0                	test   al,al
10004885:	0f 94 c0             	sete   al
10004888:	84 c0                	test   al,al
1000488a:	74 02                	je     1000488e <firstRun(bool)+0x1f39>
1000488c:	eb f0                	jmp    1000487e <firstRun(bool)+0x1f29>
1000488e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004890: R_386_32	installKey
10004895:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004897: R_386_32	installKey
1000489c:	83 ec 08             	sub    esp,0x8
1000489f:	6a 00                	push   0x0
100048a1:	68 84 03 00 00       	push   0x384
100048a6:	e8 fc ff ff ff       	call   100048a7 <firstRun(bool)+0x1f52>	100048a7: R_386_PC32	milliTenthSleep(unsigned long long)
100048ab:	83 c4 10             	add    esp,0x10
100048ae:	e8 fc ff ff ff       	call   100048af <firstRun(bool)+0x1f5a>	100048af: R_386_PC32	drawBootScreen()
100048b3:	83 ec 08             	sub    esp,0x8
100048b6:	6a 00                	push   0x0
100048b8:	68 18 2e 00 00       	push   0x2e18
100048bd:	e8 fc ff ff ff       	call   100048be <firstRun(bool)+0x1f69>	100048be: R_386_PC32	milliTenthSleep(unsigned long long)
100048c2:	83 c4 10             	add    esp,0x10
100048c5:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100048cc:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100048ce: R_386_32	installKey
100048d3:	e8 fc ff ff ff       	call   100048d4 <firstRun(bool)+0x1f7f>	100048d4: R_386_PC32	drawBootScreen()
100048d8:	83 ec 0c             	sub    esp,0xc
100048db:	68 22 ab 00 10       	push   0x1000ab22	100048dc: R_386_32	.text
100048e0:	6a 0e                	push   0xe
100048e2:	6a 32                	push   0x32
100048e4:	6a 02                	push   0x2
100048e6:	6a 16                	push   0x16
100048e8:	e8 fc ff ff ff       	call   100048e9 <firstRun(bool)+0x1f94>	100048e9: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100048ed:	83 c4 20             	add    esp,0x20
100048f0:	a1 00 00 00 00       	mov    eax,ds:0x0	100048f1: R_386_32	term
100048f5:	83 ec 04             	sub    esp,0x4
100048f8:	6a 18                	push   0x18
100048fa:	6a 11                	push   0x11
100048fc:	50                   	push   eax
100048fd:	e8 fc ff ff ff       	call   100048fe <firstRun(bool)+0x1fa9>	100048fe: R_386_PC32	VgaText::setCursor(int, int)
10004902:	83 c4 10             	add    esp,0x10
10004905:	a1 00 00 00 00       	mov    eax,ds:0x0	10004906: R_386_32	term
1000490a:	6a 0b                	push   0xb
1000490c:	6a 03                	push   0x3
1000490e:	68 be a9 00 10       	push   0x1000a9be	1000490f: R_386_32	.text
10004913:	50                   	push   eax
10004914:	e8 fc ff ff ff       	call   10004915 <firstRun(bool)+0x1fc0>	10004915: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004919:	83 c4 10             	add    esp,0x10
1000491c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000491d: R_386_32	term
10004921:	83 ec 04             	sub    esp,0x4
10004924:	6a 05                	push   0x5
10004926:	6a 18                	push   0x18
10004928:	50                   	push   eax
10004929:	e8 fc ff ff ff       	call   1000492a <firstRun(bool)+0x1fd5>	1000492a: R_386_PC32	VgaText::setCursor(int, int)
1000492e:	83 c4 10             	add    esp,0x10
10004931:	a1 00 00 00 00       	mov    eax,ds:0x0	10004932: R_386_32	term
10004936:	83 ec 08             	sub    esp,0x8
10004939:	68 30 ab 00 10       	push   0x1000ab30	1000493a: R_386_32	.text
1000493e:	50                   	push   eax
1000493f:	e8 fc ff ff ff       	call   10004940 <firstRun(bool)+0x1feb>	10004940: R_386_PC32	VgaText::puts(char const*)
10004944:	83 c4 10             	add    esp,0x10
10004947:	a1 00 00 00 00       	mov    eax,ds:0x0	10004948: R_386_32	term
1000494c:	83 ec 04             	sub    esp,0x4
1000494f:	6a 06                	push   0x6
10004951:	6a 18                	push   0x18
10004953:	50                   	push   eax
10004954:	e8 fc ff ff ff       	call   10004955 <firstRun(bool)+0x2000>	10004955: R_386_PC32	VgaText::setCursor(int, int)
10004959:	83 c4 10             	add    esp,0x10
1000495c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000495d: R_386_32	term
10004961:	83 ec 08             	sub    esp,0x8
10004964:	68 94 a9 00 10       	push   0x1000a994	10004965: R_386_32	.text
10004969:	50                   	push   eax
1000496a:	e8 fc ff ff ff       	call   1000496b <firstRun(bool)+0x2016>	1000496b: R_386_PC32	VgaText::puts(char const*)
1000496f:	83 c4 10             	add    esp,0x10
10004972:	c6 05 10 00 00 00 00 	mov    BYTE PTR ds:0x10,0x0	10004974: R_386_32	pkeybuf
10004979:	c6 05 11 00 00 00 00 	mov    BYTE PTR ds:0x11,0x0	1000497b: R_386_32	pkeybuf
10004980:	a1 00 00 00 00       	mov    eax,ds:0x0	10004981: R_386_32	term
10004985:	83 ec 04             	sub    esp,0x4
10004988:	6a 08                	push   0x8
1000498a:	6a 1c                	push   0x1c
1000498c:	50                   	push   eax
1000498d:	e8 fc ff ff ff       	call   1000498e <firstRun(bool)+0x2039>	1000498e: R_386_PC32	VgaText::setCursor(int, int)
10004992:	83 c4 10             	add    esp,0x10
10004995:	a1 00 00 00 00       	mov    eax,ds:0x0	10004996: R_386_32	term
1000499a:	83 ec 08             	sub    esp,0x8
1000499d:	68 00 00 00 00       	push   0x0	1000499e: R_386_32	pkeybuf
100049a2:	50                   	push   eax
100049a3:	e8 fc ff ff ff       	call   100049a4 <firstRun(bool)+0x204f>	100049a4: R_386_PC32	VgaText::puts(char const*)
100049a8:	83 c4 10             	add    esp,0x10
100049ab:	a1 00 00 00 00       	mov    eax,ds:0x0	100049ac: R_386_32	term
100049b0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100049b3:	83 c2 1c             	add    edx,0x1c
100049b6:	83 ec 04             	sub    esp,0x4
100049b9:	6a 08                	push   0x8
100049bb:	52                   	push   edx
100049bc:	50                   	push   eax
100049bd:	e8 fc ff ff ff       	call   100049be <firstRun(bool)+0x2069>	100049be: R_386_PC32	VgaText::setCursor(int, int)
100049c2:	83 c4 10             	add    esp,0x10
100049c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100049c6: R_386_32	term
100049ca:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100049cd:	81 c2 00 00 00 00    	add    edx,0x0	100049cf: R_386_32	pkeybuf
100049d3:	8a 12                	mov    dl,BYTE PTR [edx]
100049d5:	0f be d2             	movsx  edx,dl
100049d8:	6a 00                	push   0x0
100049da:	6a 0f                	push   0xf
100049dc:	52                   	push   edx
100049dd:	50                   	push   eax
100049de:	e8 fc ff ff ff       	call   100049df <firstRun(bool)+0x208a>	100049df: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100049e3:	83 c4 10             	add    esp,0x10
100049e6:	a1 00 00 00 00       	mov    eax,ds:0x0	100049e7: R_386_32	term
100049eb:	83 ec 04             	sub    esp,0x4
100049ee:	6a 08                	push   0x8
100049f0:	6a 2c                	push   0x2c
100049f2:	50                   	push   eax
100049f3:	e8 fc ff ff ff       	call   100049f4 <firstRun(bool)+0x209f>	100049f4: R_386_PC32	VgaText::setCursor(int, int)
100049f8:	83 c4 10             	add    esp,0x10
100049fb:	a1 00 00 00 00       	mov    eax,ds:0x0	100049fc: R_386_32	term
10004a00:	6a 0f                	push   0xf
10004a02:	6a 0f                	push   0xf
10004a04:	6a 20                	push   0x20
10004a06:	50                   	push   eax
10004a07:	e8 fc ff ff ff       	call   10004a08 <firstRun(bool)+0x20b3>	10004a08: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004a0c:	83 c4 10             	add    esp,0x10
10004a0f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a10: R_386_32	term
10004a14:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004a17:	83 c2 1c             	add    edx,0x1c
10004a1a:	83 ec 04             	sub    esp,0x4
10004a1d:	6a 08                	push   0x8
10004a1f:	52                   	push   edx
10004a20:	50                   	push   eax
10004a21:	e8 fc ff ff ff       	call   10004a22 <firstRun(bool)+0x20cd>	10004a22: R_386_PC32	VgaText::setCursor(int, int)
10004a26:	83 c4 10             	add    esp,0x10
10004a29:	a0 00 00 00 00       	mov    al,ds:0x0	10004a2a: R_386_32	installKey
10004a2e:	84 c0                	test   al,al
10004a30:	0f 94 c0             	sete   al
10004a33:	84 c0                	test   al,al
10004a35:	74 02                	je     10004a39 <firstRun(bool)+0x20e4>
10004a37:	eb f0                	jmp    10004a29 <firstRun(bool)+0x20d4>
10004a39:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a3a: R_386_32	term
10004a3e:	05 82 00 00 00       	add    eax,0x82
10004a43:	83 ec 04             	sub    esp,0x4
10004a46:	6a 10                	push   0x10
10004a48:	6a 00                	push   0x0
10004a4a:	50                   	push   eax
10004a4b:	e8 fc ff ff ff       	call   10004a4c <firstRun(bool)+0x20f7>	10004a4c: R_386_PC32	memset
10004a50:	83 c4 10             	add    esp,0x10
10004a53:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a54: R_386_32	term
10004a58:	05 02 01 00 00       	add    eax,0x102
10004a5d:	83 ec 04             	sub    esp,0x4
10004a60:	6a 10                	push   0x10
10004a62:	6a 00                	push   0x0
10004a64:	50                   	push   eax
10004a65:	e8 fc ff ff ff       	call   10004a66 <firstRun(bool)+0x2111>	10004a66: R_386_PC32	memset
10004a6a:	83 c4 10             	add    esp,0x10
10004a6d:	a0 00 00 00 00       	mov    al,ds:0x0	10004a6e: R_386_32	installKey
10004a72:	3c 03                	cmp    al,0x3
10004a74:	74 09                	je     10004a7f <firstRun(bool)+0x212a>
10004a76:	a0 00 00 00 00       	mov    al,ds:0x0	10004a77: R_386_32	installKey
10004a7b:	3c 08                	cmp    al,0x8
10004a7d:	75 04                	jne    10004a83 <firstRun(bool)+0x212e>
10004a7f:	b0 01                	mov    al,0x1
10004a81:	eb 02                	jmp    10004a85 <firstRun(bool)+0x2130>
10004a83:	b0 00                	mov    al,0x0
10004a85:	84 c0                	test   al,al
10004a87:	74 31                	je     10004aba <firstRun(bool)+0x2165>
10004a89:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
10004a8c:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10004a90:	75 14                	jne    10004aa6 <firstRun(bool)+0x2151>
10004a92:	83 ec 0c             	sub    esp,0xc
10004a95:	68 00 00 00 00       	push   0x0	10004a96: R_386_32	pkeybuf
10004a9a:	e8 fc ff ff ff       	call   10004a9b <firstRun(bool)+0x2146>	10004a9b: R_386_PC32	strlen
10004a9f:	83 c4 10             	add    esp,0x10
10004aa2:	48                   	dec    eax
10004aa3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10004aa6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004aa9:	05 00 00 00 00       	add    eax,0x0	10004aaa: R_386_32	pkeybuf
10004aae:	8a 00                	mov    al,BYTE PTR [eax]
10004ab0:	3c 2d                	cmp    al,0x2d
10004ab2:	0f 85 7b 03 00 00    	jne    10004e33 <firstRun(bool)+0x24de>
10004ab8:	eb cf                	jmp    10004a89 <firstRun(bool)+0x2134>
10004aba:	a0 00 00 00 00       	mov    al,ds:0x0	10004abb: R_386_32	installKey
10004abf:	3c 2f                	cmp    al,0x2f
10004ac1:	7e 09                	jle    10004acc <firstRun(bool)+0x2177>
10004ac3:	a0 00 00 00 00       	mov    al,ds:0x0	10004ac4: R_386_32	installKey
10004ac8:	3c 39                	cmp    al,0x39
10004aca:	7e 36                	jle    10004b02 <firstRun(bool)+0x21ad>
10004acc:	a0 00 00 00 00       	mov    al,ds:0x0	10004acd: R_386_32	installKey
10004ad1:	3c 40                	cmp    al,0x40
10004ad3:	7e 09                	jle    10004ade <firstRun(bool)+0x2189>
10004ad5:	a0 00 00 00 00       	mov    al,ds:0x0	10004ad6: R_386_32	installKey
10004ada:	3c 5a                	cmp    al,0x5a
10004adc:	7e 24                	jle    10004b02 <firstRun(bool)+0x21ad>
10004ade:	a0 00 00 00 00       	mov    al,ds:0x0	10004adf: R_386_32	installKey
10004ae3:	3c 60                	cmp    al,0x60
10004ae5:	7e 09                	jle    10004af0 <firstRun(bool)+0x219b>
10004ae7:	a0 00 00 00 00       	mov    al,ds:0x0	10004ae8: R_386_32	installKey
10004aec:	3c 7a                	cmp    al,0x7a
10004aee:	7e 12                	jle    10004b02 <firstRun(bool)+0x21ad>
10004af0:	a0 00 00 00 00       	mov    al,ds:0x0	10004af1: R_386_32	installKey
10004af5:	3c 20                	cmp    al,0x20
10004af7:	74 09                	je     10004b02 <firstRun(bool)+0x21ad>
10004af9:	a0 00 00 00 00       	mov    al,ds:0x0	10004afa: R_386_32	installKey
10004afe:	3c 04                	cmp    al,0x4
10004b00:	75 04                	jne    10004b06 <firstRun(bool)+0x21b1>
10004b02:	b0 01                	mov    al,0x1
10004b04:	eb 02                	jmp    10004b08 <firstRun(bool)+0x21b3>
10004b06:	b0 00                	mov    al,0x0
10004b08:	84 c0                	test   al,al
10004b0a:	0f 84 a3 00 00 00    	je     10004bb3 <firstRun(bool)+0x225e>
10004b10:	a0 00 00 00 00       	mov    al,ds:0x0	10004b11: R_386_32	installKey
10004b15:	3c 2f                	cmp    al,0x2f
10004b17:	7e 09                	jle    10004b22 <firstRun(bool)+0x21cd>
10004b19:	a0 00 00 00 00       	mov    al,ds:0x0	10004b1a: R_386_32	installKey
10004b1e:	3c 39                	cmp    al,0x39
10004b20:	7e 24                	jle    10004b46 <firstRun(bool)+0x21f1>
10004b22:	a0 00 00 00 00       	mov    al,ds:0x0	10004b23: R_386_32	installKey
10004b27:	3c 40                	cmp    al,0x40
10004b29:	7e 09                	jle    10004b34 <firstRun(bool)+0x21df>
10004b2b:	a0 00 00 00 00       	mov    al,ds:0x0	10004b2c: R_386_32	installKey
10004b30:	3c 5a                	cmp    al,0x5a
10004b32:	7e 12                	jle    10004b46 <firstRun(bool)+0x21f1>
10004b34:	a0 00 00 00 00       	mov    al,ds:0x0	10004b35: R_386_32	installKey
10004b39:	3c 60                	cmp    al,0x60
10004b3b:	7e 0d                	jle    10004b4a <firstRun(bool)+0x21f5>
10004b3d:	a0 00 00 00 00       	mov    al,ds:0x0	10004b3e: R_386_32	installKey
10004b42:	3c 7a                	cmp    al,0x7a
10004b44:	7f 04                	jg     10004b4a <firstRun(bool)+0x21f5>
10004b46:	b0 01                	mov    al,0x1
10004b48:	eb 02                	jmp    10004b4c <firstRun(bool)+0x21f7>
10004b4a:	b0 00                	mov    al,0x0
10004b4c:	84 c0                	test   al,al
10004b4e:	74 2c                	je     10004b7c <firstRun(bool)+0x2227>
10004b50:	a0 00 00 00 00       	mov    al,ds:0x0	10004b51: R_386_32	installKey
10004b55:	3c 60                	cmp    al,0x60
10004b57:	7e 13                	jle    10004b6c <firstRun(bool)+0x2217>
10004b59:	a0 00 00 00 00       	mov    al,ds:0x0	10004b5a: R_386_32	installKey
10004b5e:	3c 7a                	cmp    al,0x7a
10004b60:	7f 0a                	jg     10004b6c <firstRun(bool)+0x2217>
10004b62:	a0 00 00 00 00       	mov    al,ds:0x0	10004b63: R_386_32	installKey
10004b67:	83 e8 20             	sub    eax,0x20
10004b6a:	eb 05                	jmp    10004b71 <firstRun(bool)+0x221c>
10004b6c:	a0 00 00 00 00       	mov    al,ds:0x0	10004b6d: R_386_32	installKey
10004b71:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004b74:	81 c2 00 00 00 00    	add    edx,0x0	10004b76: R_386_32	pkeybuf
10004b7a:	88 02                	mov    BYTE PTR [edx],al
10004b7c:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10004b7f:	83 ec 0c             	sub    esp,0xc
10004b82:	68 00 00 00 00       	push   0x0	10004b83: R_386_32	pkeybuf
10004b87:	e8 fc ff ff ff       	call   10004b88 <firstRun(bool)+0x2233>	10004b88: R_386_PC32	strlen
10004b8c:	83 c4 10             	add    esp,0x10
10004b8f:	89 c2                	mov    edx,eax
10004b91:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004b94:	39 c2                	cmp    edx,eax
10004b96:	77 07                	ja     10004b9f <firstRun(bool)+0x224a>
10004b98:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004b9f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004ba2:	05 00 00 00 00       	add    eax,0x0	10004ba3: R_386_32	pkeybuf
10004ba7:	8a 00                	mov    al,BYTE PTR [eax]
10004ba9:	3c 2d                	cmp    al,0x2d
10004bab:	0f 85 82 02 00 00    	jne    10004e33 <firstRun(bool)+0x24de>
10004bb1:	eb c9                	jmp    10004b7c <firstRun(bool)+0x2227>
10004bb3:	a0 00 00 00 00       	mov    al,ds:0x0	10004bb4: R_386_32	installKey
10004bb8:	3c 1b                	cmp    al,0x1b
10004bba:	0f 94 c0             	sete   al
10004bbd:	84 c0                	test   al,al
10004bbf:	0f 85 91 f9 ff ff    	jne    10004556 <firstRun(bool)+0x1c01>
10004bc5:	a0 00 00 00 00       	mov    al,ds:0x0	10004bc6: R_386_32	installKey
10004bca:	3c 0a                	cmp    al,0xa
10004bcc:	0f 94 c0             	sete   al
10004bcf:	84 c0                	test   al,al
10004bd1:	0f 84 5c 02 00 00    	je     10004e33 <firstRun(bool)+0x24de>
10004bd7:	83 ec 0c             	sub    esp,0xc
10004bda:	68 00 00 00 00       	push   0x0	10004bdb: R_386_32	pkeybuf
10004bdf:	e8 fc ff ff ff       	call   10004be0 <firstRun(bool)+0x228b>	10004be0: R_386_PC32	checkExtendedKey(char*)
10004be4:	83 c4 10             	add    esp,0x10
10004be7:	85 c0                	test   eax,eax
10004be9:	0f 95 c0             	setne  al
10004bec:	88 45 87             	mov    BYTE PTR [ebp-0x79],al
10004bef:	80 7d 87 00          	cmp    BYTE PTR [ebp-0x79],0x0
10004bf3:	74 61                	je     10004c56 <firstRun(bool)+0x2301>
10004bf5:	83 ec 08             	sub    esp,0x8
10004bf8:	6a 00                	push   0x0
10004bfa:	68 f0 0a 00 00       	push   0xaf0
10004bff:	e8 fc ff ff ff       	call   10004c00 <firstRun(bool)+0x22ab>	10004c00: R_386_PC32	milliTenthSleep(unsigned long long)
10004c04:	83 c4 10             	add    esp,0x10
10004c07:	e8 fc ff ff ff       	call   10004c08 <firstRun(bool)+0x22b3>	10004c08: R_386_PC32	drawBootScreen()
10004c0c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004c0e: R_386_32	installKey
10004c13:	83 ec 08             	sub    esp,0x8
10004c16:	6a 00                	push   0x0
10004c18:	68 84 03 00 00       	push   0x384
10004c1d:	e8 fc ff ff ff       	call   10004c1e <firstRun(bool)+0x22c9>	10004c1e: R_386_PC32	milliTenthSleep(unsigned long long)
10004c22:	83 c4 10             	add    esp,0x10
10004c25:	e8 fc ff ff ff       	call   10004c26 <firstRun(bool)+0x22d1>	10004c26: R_386_PC32	drawBootScreen()
10004c2a:	83 ec 08             	sub    esp,0x8
10004c2d:	6a 00                	push   0x0
10004c2f:	68 c0 12 00 00       	push   0x12c0
10004c34:	e8 fc ff ff ff       	call   10004c35 <firstRun(bool)+0x22e0>	10004c35: R_386_PC32	milliTenthSleep(unsigned long long)
10004c39:	83 c4 10             	add    esp,0x10
10004c3c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004c3e: R_386_32	installKey
10004c43:	90                   	nop
10004c44:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10004c4b:	0f 84 ee 01 00 00    	je     10004e3f <firstRun(bool)+0x24ea>
10004c51:	e9 d5 02 00 00       	jmp    10004f2b <firstRun(bool)+0x25d6>
10004c56:	83 ec 08             	sub    esp,0x8
10004c59:	6a 00                	push   0x0
10004c5b:	68 f0 0a 00 00       	push   0xaf0
10004c60:	e8 fc ff ff ff       	call   10004c61 <firstRun(bool)+0x230c>	10004c61: R_386_PC32	milliTenthSleep(unsigned long long)
10004c65:	83 c4 10             	add    esp,0x10
10004c68:	e8 fc ff ff ff       	call   10004c69 <firstRun(bool)+0x2314>	10004c69: R_386_PC32	drawBootScreen()
10004c6d:	83 ec 08             	sub    esp,0x8
10004c70:	6a 01                	push   0x1
10004c72:	68 22 ab 00 10       	push   0x1000ab22	10004c73: R_386_32	.text
10004c77:	6a 0e                	push   0xe
10004c79:	6a 32                	push   0x32
10004c7b:	6a 02                	push   0x2
10004c7d:	6a 16                	push   0x16
10004c7f:	e8 fc ff ff ff       	call   10004c80 <firstRun(bool)+0x232b>	10004c80: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10004c84:	83 c4 20             	add    esp,0x20
10004c87:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c88: R_386_32	term
10004c8c:	83 ec 04             	sub    esp,0x4
10004c8f:	6a 05                	push   0x5
10004c91:	6a 18                	push   0x18
10004c93:	50                   	push   eax
10004c94:	e8 fc ff ff ff       	call   10004c95 <firstRun(bool)+0x2340>	10004c95: R_386_PC32	VgaText::setCursor(int, int)
10004c99:	83 c4 10             	add    esp,0x10
10004c9c:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c9d: R_386_32	term
10004ca1:	6a 07                	push   0x7
10004ca3:	6a 00                	push   0x0
10004ca5:	68 30 ab 00 10       	push   0x1000ab30	10004ca6: R_386_32	.text
10004caa:	50                   	push   eax
10004cab:	e8 fc ff ff ff       	call   10004cac <firstRun(bool)+0x2357>	10004cac: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004cb0:	83 c4 10             	add    esp,0x10
10004cb3:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cb4: R_386_32	term
10004cb8:	83 ec 04             	sub    esp,0x4
10004cbb:	6a 06                	push   0x6
10004cbd:	6a 18                	push   0x18
10004cbf:	50                   	push   eax
10004cc0:	e8 fc ff ff ff       	call   10004cc1 <firstRun(bool)+0x236c>	10004cc1: R_386_PC32	VgaText::setCursor(int, int)
10004cc5:	83 c4 10             	add    esp,0x10
10004cc8:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cc9: R_386_32	term
10004ccd:	6a 07                	push   0x7
10004ccf:	6a 00                	push   0x0
10004cd1:	68 94 a9 00 10       	push   0x1000a994	10004cd2: R_386_32	.text
10004cd6:	50                   	push   eax
10004cd7:	e8 fc ff ff ff       	call   10004cd8 <firstRun(bool)+0x2383>	10004cd8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004cdc:	83 c4 10             	add    esp,0x10
10004cdf:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ce0: R_386_32	term
10004ce4:	83 ec 04             	sub    esp,0x4
10004ce7:	6a 08                	push   0x8
10004ce9:	6a 1c                	push   0x1c
10004ceb:	50                   	push   eax
10004cec:	e8 fc ff ff ff       	call   10004ced <firstRun(bool)+0x2398>	10004ced: R_386_PC32	VgaText::setCursor(int, int)
10004cf1:	83 c4 10             	add    esp,0x10
10004cf4:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cf5: R_386_32	term
10004cf9:	6a 07                	push   0x7
10004cfb:	6a 00                	push   0x0
10004cfd:	68 00 00 00 00       	push   0x0	10004cfe: R_386_32	pkeybuf
10004d02:	50                   	push   eax
10004d03:	e8 fc ff ff ff       	call   10004d04 <firstRun(bool)+0x23af>	10004d04: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004d08:	83 c4 10             	add    esp,0x10
10004d0b:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d0c: R_386_32	term
10004d10:	83 ec 04             	sub    esp,0x4
10004d13:	6a 08                	push   0x8
10004d15:	6a 2c                	push   0x2c
10004d17:	50                   	push   eax
10004d18:	e8 fc ff ff ff       	call   10004d19 <firstRun(bool)+0x23c4>	10004d19: R_386_PC32	VgaText::setCursor(int, int)
10004d1d:	83 c4 10             	add    esp,0x10
10004d20:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d21: R_386_32	term
10004d25:	6a 07                	push   0x7
10004d27:	6a 07                	push   0x7
10004d29:	6a 20                	push   0x20
10004d2b:	50                   	push   eax
10004d2c:	e8 fc ff ff ff       	call   10004d2d <firstRun(bool)+0x23d8>	10004d2d: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004d31:	83 c4 10             	add    esp,0x10
10004d34:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d35: R_386_32	term
10004d39:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004d3c:	83 c2 1c             	add    edx,0x1c
10004d3f:	83 ec 04             	sub    esp,0x4
10004d42:	6a 08                	push   0x8
10004d44:	52                   	push   edx
10004d45:	50                   	push   eax
10004d46:	e8 fc ff ff ff       	call   10004d47 <firstRun(bool)+0x23f2>	10004d47: R_386_PC32	VgaText::setCursor(int, int)
10004d4b:	83 c4 10             	add    esp,0x10
10004d4e:	83 ec 0c             	sub    esp,0xc
10004d51:	68 81 aa 00 10       	push   0x1000aa81	10004d52: R_386_32	.text
10004d56:	6a 0b                	push   0xb
10004d58:	6a 2b                	push   0x2b
10004d5a:	6a 0a                	push   0xa
10004d5c:	6a 22                	push   0x22
10004d5e:	e8 fc ff ff ff       	call   10004d5f <firstRun(bool)+0x240a>	10004d5f: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004d63:	83 c4 20             	add    esp,0x20
10004d66:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d67: R_386_32	term
10004d6b:	83 ec 04             	sub    esp,0x4
10004d6e:	6a 0d                	push   0xd
10004d70:	6a 24                	push   0x24
10004d72:	50                   	push   eax
10004d73:	e8 fc ff ff ff       	call   10004d74 <firstRun(bool)+0x241f>	10004d74: R_386_PC32	VgaText::setCursor(int, int)
10004d78:	83 c4 10             	add    esp,0x10
10004d7b:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d7c: R_386_32	term
10004d80:	83 ec 08             	sub    esp,0x8
10004d83:	68 58 ab 00 10       	push   0x1000ab58	10004d84: R_386_32	.text
10004d88:	50                   	push   eax
10004d89:	e8 fc ff ff ff       	call   10004d8a <firstRun(bool)+0x2435>	10004d8a: R_386_PC32	VgaText::puts(char const*)
10004d8e:	83 c4 10             	add    esp,0x10
10004d91:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d92: R_386_32	term
10004d96:	83 ec 04             	sub    esp,0x4
10004d99:	6a 0f                	push   0xf
10004d9b:	6a 24                	push   0x24
10004d9d:	50                   	push   eax
10004d9e:	e8 fc ff ff ff       	call   10004d9f <firstRun(bool)+0x244a>	10004d9f: R_386_PC32	VgaText::setCursor(int, int)
10004da3:	83 c4 10             	add    esp,0x10
10004da6:	a1 00 00 00 00       	mov    eax,ds:0x0	10004da7: R_386_32	term
10004dab:	83 ec 08             	sub    esp,0x8
10004dae:	68 80 ab 00 10       	push   0x1000ab80	10004daf: R_386_32	.text
10004db3:	50                   	push   eax
10004db4:	e8 fc ff ff ff       	call   10004db5 <firstRun(bool)+0x2460>	10004db5: R_386_PC32	VgaText::puts(char const*)
10004db9:	83 c4 10             	add    esp,0x10
10004dbc:	a1 00 00 00 00       	mov    eax,ds:0x0	10004dbd: R_386_32	term
10004dc1:	83 ec 04             	sub    esp,0x4
10004dc4:	6a 10                	push   0x10
10004dc6:	6a 24                	push   0x24
10004dc8:	50                   	push   eax
10004dc9:	e8 fc ff ff ff       	call   10004dca <firstRun(bool)+0x2475>	10004dca: R_386_PC32	VgaText::setCursor(int, int)
10004dce:	83 c4 10             	add    esp,0x10
10004dd1:	a1 00 00 00 00       	mov    eax,ds:0x0	10004dd2: R_386_32	term
10004dd6:	83 ec 08             	sub    esp,0x8
10004dd9:	68 a4 ab 00 10       	push   0x1000aba4	10004dda: R_386_32	.text
10004dde:	50                   	push   eax
10004ddf:	e8 fc ff ff ff       	call   10004de0 <firstRun(bool)+0x248b>	10004de0: R_386_PC32	VgaText::puts(char const*)
10004de4:	83 c4 10             	add    esp,0x10
10004de7:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004de9: R_386_32	installKey
10004dee:	83 ec 08             	sub    esp,0x8
10004df1:	6a 00                	push   0x0
10004df3:	68 94 11 00 00       	push   0x1194
10004df8:	e8 fc ff ff ff       	call   10004df9 <firstRun(bool)+0x24a4>	10004df9: R_386_PC32	milliTenthSleep(unsigned long long)
10004dfd:	83 c4 10             	add    esp,0x10
10004e00:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004e02: R_386_32	installKey
10004e07:	a0 00 00 00 00       	mov    al,ds:0x0	10004e08: R_386_32	installKey
10004e0c:	84 c0                	test   al,al
10004e0e:	0f 94 c0             	sete   al
10004e11:	84 c0                	test   al,al
10004e13:	74 02                	je     10004e17 <firstRun(bool)+0x24c2>
10004e15:	eb f0                	jmp    10004e07 <firstRun(bool)+0x24b2>
10004e17:	e8 fc ff ff ff       	call   10004e18 <firstRun(bool)+0x24c3>	10004e18: R_386_PC32	drawBootScreen()
10004e1c:	83 ec 08             	sub    esp,0x8
10004e1f:	6a 00                	push   0x0
10004e21:	68 9c 18 00 00       	push   0x189c
10004e26:	e8 fc ff ff ff       	call   10004e27 <firstRun(bool)+0x24d2>	10004e27: R_386_PC32	milliTenthSleep(unsigned long long)
10004e2b:	83 c4 10             	add    esp,0x10
10004e2e:	e9 99 fa ff ff       	jmp    100048cc <firstRun(bool)+0x1f77>
10004e33:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004e35: R_386_32	installKey
10004e3a:	e9 33 fb ff ff       	jmp    10004972 <firstRun(bool)+0x201d>
10004e3f:	e8 fc ff ff ff       	call   10004e40 <firstRun(bool)+0x24eb>	10004e40: R_386_PC32	drawBootScreen()
10004e44:	83 ec 0c             	sub    esp,0xc
10004e47:	68 c5 ab 00 10       	push   0x1000abc5	10004e48: R_386_32	.text
10004e4c:	6a 0d                	push   0xd
10004e4e:	6a 32                	push   0x32
10004e50:	6a 05                	push   0x5
10004e52:	6a 16                	push   0x16
10004e54:	e8 fc ff ff ff       	call   10004e55 <firstRun(bool)+0x2500>	10004e55: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004e59:	83 c4 20             	add    esp,0x20
10004e5c:	83 ec 0c             	sub    esp,0xc
10004e5f:	6a 00                	push   0x0
10004e61:	e8 fc ff ff ff       	call   10004e62 <firstRun(bool)+0x250d>	10004e62: R_386_PC32	bootInstallTasks(int)
10004e66:	83 c4 10             	add    esp,0x10
10004e69:	83 ec 0c             	sub    esp,0xc
10004e6c:	68 e0 ab 00 10       	push   0x1000abe0	10004e6d: R_386_32	.text
10004e71:	e8 fc ff ff ff       	call   10004e72 <firstRun(bool)+0x251d>	10004e72: R_386_PC32	Dbg::kprintf(char const*, ...)
10004e76:	83 c4 10             	add    esp,0x10
10004e79:	c7 45 80 0c 00 00 00 	mov    DWORD PTR [ebp-0x80],0xc
10004e80:	83 ec 0c             	sub    esp,0xc
10004e83:	ff 75 80             	push   DWORD PTR [ebp-0x80]
10004e86:	e8 fc ff ff ff       	call   10004e87 <firstRun(bool)+0x2532>	10004e87: R_386_PC32	Virt::setupPageSwapping(int)
10004e8b:	83 c4 10             	add    esp,0x10
10004e8e:	83 ec 0c             	sub    esp,0xc
10004e91:	6a 01                	push   0x1
10004e93:	e8 fc ff ff ff       	call   10004e94 <firstRun(bool)+0x253f>	10004e94: R_386_PC32	bootInstallTasks(int)
10004e98:	83 c4 10             	add    esp,0x10
10004e9b:	83 ec 0c             	sub    esp,0xc
10004e9e:	68 00 ac 00 10       	push   0x1000ac00	10004e9f: R_386_32	.text
10004ea3:	e8 fc ff ff ff       	call   10004ea4 <firstRun(bool)+0x254f>	10004ea4: R_386_PC32	rmtree(char*)
10004ea8:	83 c4 10             	add    esp,0x10
10004eab:	83 ec 0c             	sub    esp,0xc
10004eae:	68 1a ac 00 10       	push   0x1000ac1a	10004eaf: R_386_32	.text
10004eb3:	e8 fc ff ff ff       	call   10004eb4 <firstRun(bool)+0x255f>	10004eb4: R_386_PC32	rmtree(char*)
10004eb8:	83 c4 10             	add    esp,0x10
10004ebb:	83 ec 08             	sub    esp,0x8
10004ebe:	68 c0 01 00 00       	push   0x1c0
10004ec3:	68 00 ac 00 10       	push   0x1000ac00	10004ec4: R_386_32	.text
10004ec8:	e8 fc ff ff ff       	call   10004ec9 <firstRun(bool)+0x2574>	10004ec9: R_386_PC32	mkdir(char const*, int)
10004ecd:	83 c4 10             	add    esp,0x10
10004ed0:	83 ec 08             	sub    esp,0x8
10004ed3:	68 c0 01 00 00       	push   0x1c0
10004ed8:	68 1a ac 00 10       	push   0x1000ac1a	10004ed9: R_386_32	.text
10004edd:	e8 fc ff ff ff       	call   10004ede <firstRun(bool)+0x2589>	10004ede: R_386_PC32	mkdir(char const*, int)
10004ee2:	83 c4 10             	add    esp,0x10
10004ee5:	83 ec 08             	sub    esp,0x8
10004ee8:	68 00 ac 00 10       	push   0x1000ac00	10004ee9: R_386_32	.text
10004eed:	68 34 ac 00 10       	push   0x1000ac34	10004eee: R_386_32	.text
10004ef2:	e8 fc ff ff ff       	call   10004ef3 <firstRun(bool)+0x259e>	10004ef3: R_386_PC32	copytree(char*, char*)
10004ef7:	83 c4 10             	add    esp,0x10
10004efa:	83 ec 0c             	sub    esp,0xc
10004efd:	6a 02                	push   0x2
10004eff:	e8 fc ff ff ff       	call   10004f00 <firstRun(bool)+0x25ab>	10004f00: R_386_PC32	bootInstallTasks(int)
10004f04:	83 c4 10             	add    esp,0x10
10004f07:	83 ec 0c             	sub    esp,0xc
10004f0a:	68 00 00 00 00       	push   0x0	10004f0b: R_386_32	currName
10004f0f:	e8 fc ff ff ff       	call   10004f10 <firstRun(bool)+0x25bb>	10004f10: R_386_PC32	createUser(char const*)
10004f14:	83 c4 10             	add    esp,0x10
10004f17:	83 ec 0c             	sub    esp,0xc
10004f1a:	6a 03                	push   0x3
10004f1c:	e8 fc ff ff ff       	call   10004f1d <firstRun(bool)+0x25c8>	10004f1d: R_386_PC32	bootInstallTasks(int)
10004f21:	83 c4 10             	add    esp,0x10
10004f24:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10004f26: R_386_32	VgaText::hiddenOut
10004f2b:	8d 65 f4             	lea    esp,[ebp-0xc]
10004f2e:	5b                   	pop    ebx
10004f2f:	5e                   	pop    esi
10004f30:	5f                   	pop    edi
10004f31:	5d                   	pop    ebp
10004f32:	c3                   	ret    

10004f33 <loadExtensions()>:
10004f33:	55                   	push   ebp
10004f34:	89 e5                	mov    ebp,esp
10004f36:	83 ec 08             	sub    esp,0x8
10004f39:	83 ec 0c             	sub    esp,0xc
10004f3c:	68 dc ac 00 10       	push   0x1000acdc	10004f3d: R_386_32	.text
10004f41:	e8 fc ff ff ff       	call   10004f42 <loadExtensions()+0xf>	10004f42: R_386_PC32	KeSetBootMessage(char const*)
10004f46:	83 c4 10             	add    esp,0x10
10004f49:	90                   	nop
10004f4a:	c9                   	leave  
10004f4b:	c3                   	ret    

10004f4c <rgtree(Reghive_Tag*, int, int)>:
10004f4c:	55                   	push   ebp
10004f4d:	89 e5                	mov    ebp,esp
10004f4f:	53                   	push   ebx
10004f50:	83 ec 44             	sub    esp,0x44
10004f53:	83 7d 0c 01          	cmp    DWORD PTR [ebp+0xc],0x1
10004f57:	75 16                	jne    10004f6f <rgtree(Reghive_Tag*, int, int)+0x23>
10004f59:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10004f5d:	75 10                	jne    10004f6f <rgtree(Reghive_Tag*, int, int)+0x23>
10004f5f:	83 ec 0c             	sub    esp,0xc
10004f62:	68 f2 ac 00 10       	push   0x1000acf2	10004f63: R_386_32	.text
10004f67:	e8 fc ff ff ff       	call   10004f68 <rgtree(Reghive_Tag*, int, int)+0x1c>	10004f68: R_386_PC32	Dbg::kprintf(char const*, ...)
10004f6c:	83 c4 10             	add    esp,0x10
10004f6f:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
10004f73:	0f 8e a9 00 00 00    	jle    10005022 <rgtree(Reghive_Tag*, int, int)+0xd6>
10004f79:	83 ec 04             	sub    esp,0x4
10004f7c:	6a 32                	push   0x32
10004f7e:	6a 00                	push   0x0
10004f80:	8d 45 be             	lea    eax,[ebp-0x42]
10004f83:	50                   	push   eax
10004f84:	e8 fc ff ff ff       	call   10004f85 <rgtree(Reghive_Tag*, int, int)+0x39>	10004f85: R_386_PC32	memset
10004f89:	83 c4 10             	add    esp,0x10
10004f8c:	83 ec 04             	sub    esp,0x4
10004f8f:	8d 45 be             	lea    eax,[ebp-0x42]
10004f92:	50                   	push   eax
10004f93:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004f96:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004f99:	e8 fc ff ff ff       	call   10004f9a <rgtree(Reghive_Tag*, int, int)+0x4e>	10004f9a: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
10004f9e:	83 c4 10             	add    esp,0x10
10004fa1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10004fa4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10004fab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10004fae:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10004fb1:	7d 15                	jge    10004fc8 <rgtree(Reghive_Tag*, int, int)+0x7c>
10004fb3:	83 ec 0c             	sub    esp,0xc
10004fb6:	68 a3 a7 00 10       	push   0x1000a7a3	10004fb7: R_386_32	.text
10004fbb:	e8 fc ff ff ff       	call   10004fbc <rgtree(Reghive_Tag*, int, int)+0x70>	10004fbc: R_386_PC32	Dbg::kprintf(char const*, ...)
10004fc0:	83 c4 10             	add    esp,0x10
10004fc3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10004fc6:	eb e3                	jmp    10004fab <rgtree(Reghive_Tag*, int, int)+0x5f>
10004fc8:	83 ec 08             	sub    esp,0x8
10004fcb:	8d 45 be             	lea    eax,[ebp-0x42]
10004fce:	50                   	push   eax
10004fcf:	68 f7 ac 00 10       	push   0x1000acf7	10004fd0: R_386_32	.text
10004fd4:	e8 fc ff ff ff       	call   10004fd5 <rgtree(Reghive_Tag*, int, int)+0x89>	10004fd5: R_386_PC32	Dbg::kprintf(char const*, ...)
10004fd9:	83 c4 10             	add    esp,0x10
10004fdc:	83 7d f0 4e          	cmp    DWORD PTR [ebp-0x10],0x4e
10004fe0:	75 27                	jne    10005009 <rgtree(Reghive_Tag*, int, int)+0xbd>
10004fe2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10004fe5:	8d 58 04             	lea    ebx,[eax+0x4]
10004fe8:	83 ec 08             	sub    esp,0x8
10004feb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004fee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004ff1:	e8 fc ff ff ff       	call   10004ff2 <rgtree(Reghive_Tag*, int, int)+0xa6>	10004ff2: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004ff6:	83 c4 10             	add    esp,0x10
10004ff9:	83 ec 04             	sub    esp,0x4
10004ffc:	53                   	push   ebx
10004ffd:	50                   	push   eax
10004ffe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005001:	e8 fc ff ff ff       	call   10005002 <rgtree(Reghive_Tag*, int, int)+0xb6>	10005002: R_386_PC32	rgtree(Reghive_Tag*, int, int)
10005006:	83 c4 10             	add    esp,0x10
10005009:	83 ec 08             	sub    esp,0x8
1000500c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000500f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005012:	e8 fc ff ff ff       	call   10005013 <rgtree(Reghive_Tag*, int, int)+0xc7>	10005013: R_386_PC32	CmGetNext(Reghive_Tag*, int)
10005017:	83 c4 10             	add    esp,0x10
1000501a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
1000501d:	e9 4d ff ff ff       	jmp    10004f6f <rgtree(Reghive_Tag*, int, int)+0x23>
10005022:	90                   	nop
10005023:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10005026:	c9                   	leave  
10005027:	c3                   	ret    

10005028 <getRegsafeName(char*, char*)>:
10005028:	55                   	push   ebp
10005029:	89 e5                	mov    ebp,esp
1000502b:	83 ec 10             	sub    esp,0x10
1000502e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005031:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10005034:	e8 fc ff ff ff       	call   10005035 <getRegsafeName(char*, char*)+0xd>	10005035: R_386_PC32	strcpy
10005039:	83 c4 08             	add    esp,0x8
1000503c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10005043:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005046:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005049:	01 d0                	add    eax,edx
1000504b:	8a 00                	mov    al,BYTE PTR [eax]
1000504d:	84 c0                	test   al,al
1000504f:	74 7f                	je     100050d0 <getRegsafeName(char*, char*)+0xa8>
10005051:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005054:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005057:	01 d0                	add    eax,edx
10005059:	8a 00                	mov    al,BYTE PTR [eax]
1000505b:	3c 60                	cmp    al,0x60
1000505d:	7e 42                	jle    100050a1 <getRegsafeName(char*, char*)+0x79>
1000505f:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005062:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005065:	01 d0                	add    eax,edx
10005067:	8a 00                	mov    al,BYTE PTR [eax]
10005069:	3c 7a                	cmp    al,0x7a
1000506b:	7f 34                	jg     100050a1 <getRegsafeName(char*, char*)+0x79>
1000506d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005070:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005073:	01 d0                	add    eax,edx
10005075:	8a 00                	mov    al,BYTE PTR [eax]
10005077:	8d 48 9f             	lea    ecx,[eax-0x61]
1000507a:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
1000507d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005080:	01 d0                	add    eax,edx
10005082:	88 ca                	mov    dl,cl
10005084:	88 10                	mov    BYTE PTR [eax],dl
10005086:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005089:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000508c:	01 d0                	add    eax,edx
1000508e:	8a 00                	mov    al,BYTE PTR [eax]
10005090:	8d 48 41             	lea    ecx,[eax+0x41]
10005093:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005096:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005099:	01 d0                	add    eax,edx
1000509b:	88 ca                	mov    dl,cl
1000509d:	88 10                	mov    BYTE PTR [eax],dl
1000509f:	eb 27                	jmp    100050c8 <getRegsafeName(char*, char*)+0xa0>
100050a1:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
100050a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100050a7:	01 d0                	add    eax,edx
100050a9:	8a 00                	mov    al,BYTE PTR [eax]
100050ab:	3c 40                	cmp    al,0x40
100050ad:	7e 0e                	jle    100050bd <getRegsafeName(char*, char*)+0x95>
100050af:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
100050b2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100050b5:	01 d0                	add    eax,edx
100050b7:	8a 00                	mov    al,BYTE PTR [eax]
100050b9:	3c 5a                	cmp    al,0x5a
100050bb:	7e 0b                	jle    100050c8 <getRegsafeName(char*, char*)+0xa0>
100050bd:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
100050c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100050c3:	01 d0                	add    eax,edx
100050c5:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
100050c8:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100050cb:	e9 73 ff ff ff       	jmp    10005043 <getRegsafeName(char*, char*)+0x1b>
100050d0:	90                   	nop
100050d1:	c9                   	leave  
100050d2:	c3                   	ret    

100050d3 <begin(void*)>:
100050d3:	55                   	push   ebp
100050d4:	89 e5                	mov    ebp,esp
100050d6:	57                   	push   edi
100050d7:	56                   	push   esi
100050d8:	53                   	push   ebx
100050d9:	81 ec 5c 07 00 00    	sub    esp,0x75c
100050df:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
100050e3:	83 ec 0c             	sub    esp,0xc
100050e6:	68 14 01 00 00       	push   0x114
100050eb:	e8 fc ff ff ff       	call   100050ec <begin(void*)+0x19>	100050ec: R_386_PC32	operator new(unsigned long)
100050f0:	83 c4 10             	add    esp,0x10
100050f3:	89 c3                	mov    ebx,eax
100050f5:	a1 00 00 00 00       	mov    eax,ds:0x0	100050f6: R_386_32	kernelProcess
100050fa:	83 ec 04             	sub    esp,0x4
100050fd:	50                   	push   eax
100050fe:	68 fc ac 00 10       	push   0x1000acfc	100050ff: R_386_32	.text
10005103:	53                   	push   ebx
10005104:	e8 fc ff ff ff       	call   10005105 <begin(void*)+0x32>	10005105: R_386_PC32	File::File(char const*, Process*)
10005109:	83 c4 10             	add    esp,0x10
1000510c:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
1000510f:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10005113:	75 10                	jne    10005125 <begin(void*)+0x52>
10005115:	83 ec 0c             	sub    esp,0xc
10005118:	68 1a ad 00 10       	push   0x1000ad1a	10005119: R_386_32	.text
1000511d:	e8 fc ff ff ff       	call   1000511e <begin(void*)+0x4b>	1000511e: R_386_PC32	KePanic(char const*)
10005122:	83 c4 10             	add    esp,0x10
10005125:	83 ec 08             	sub    esp,0x8
10005128:	6a 01                	push   0x1
1000512a:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
1000512d:	e8 fc ff ff ff       	call   1000512e <begin(void*)+0x5b>	1000512e: R_386_PC32	File::open(FileOpenMode)
10005132:	83 c4 10             	add    esp,0x10
10005135:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10005138:	83 7d b4 00          	cmp    DWORD PTR [ebp-0x4c],0x0
1000513c:	75 10                	jne    1000514e <begin(void*)+0x7b>
1000513e:	83 ec 0c             	sub    esp,0xc
10005141:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
10005144:	e8 fc ff ff ff       	call   10005145 <begin(void*)+0x72>	10005145: R_386_PC32	File::close()
10005149:	83 c4 10             	add    esp,0x10
1000514c:	eb 04                	jmp    10005152 <begin(void*)+0x7f>
1000514e:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
10005152:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10005156:	74 15                	je     1000516d <begin(void*)+0x9a>
10005158:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
1000515b:	8b 00                	mov    eax,DWORD PTR [eax]
1000515d:	83 c0 08             	add    eax,0x8
10005160:	8b 00                	mov    eax,DWORD PTR [eax]
10005162:	83 ec 0c             	sub    esp,0xc
10005165:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
10005168:	ff d0                	call   eax
1000516a:	83 c4 10             	add    esp,0x10
1000516d:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	1000516f: R_386_32	KeIsPreemptionOn
10005174:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10005178:	74 0f                	je     10005189 <begin(void*)+0xb6>
1000517a:	83 ec 0c             	sub    esp,0xc
1000517d:	6a 00                	push   0x0
1000517f:	e8 fc ff ff ff       	call   10005180 <begin(void*)+0xad>	10005180: R_386_PC32	firstRun(bool)
10005184:	83 c4 10             	add    esp,0x10
10005187:	eb 05                	jmp    1000518e <begin(void*)+0xbb>
10005189:	e8 fc ff ff ff       	call   1000518a <begin(void*)+0xb7>	1000518a: R_386_PC32	loadExtensions()
1000518e:	8d 45 8c             	lea    eax,[ebp-0x74]
10005191:	bb 18 b3 00 10       	mov    ebx,0x1000b318	10005192: R_386_32	.text
10005196:	ba 04 00 00 00       	mov    edx,0x4
1000519b:	89 c7                	mov    edi,eax
1000519d:	89 de                	mov    esi,ebx
1000519f:	89 d1                	mov    ecx,edx
100051a1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100051a3:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
100051a7:	0f 84 af 13 00 00    	je     1000655c <begin(void*)+0x1489>
100051ad:	83 ec 0c             	sub    esp,0xc
100051b0:	68 84 07 00 00       	push   0x784
100051b5:	e8 fc ff ff ff       	call   100051b6 <begin(void*)+0xe3>	100051b6: R_386_PC32	operator new(unsigned long)
100051ba:	83 c4 10             	add    esp,0x10
100051bd:	89 c3                	mov    ebx,eax
100051bf:	8d 45 8c             	lea    eax,[ebp-0x74]
100051c2:	50                   	push   eax
100051c3:	6a 00                	push   0x0
100051c5:	68 2a ad 00 10       	push   0x1000ad2a	100051c6: R_386_32	.text
100051ca:	53                   	push   ebx
100051cb:	e8 fc ff ff ff       	call   100051cc <begin(void*)+0xf9>	100051cc: R_386_PC32	Process::Process(char const*, Process*, char**)
100051d0:	83 c4 10             	add    esp,0x10
100051d3:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
100051d6:	83 ec 0c             	sub    esp,0xc
100051d9:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
100051dc:	e8 fc ff ff ff       	call   100051dd <begin(void*)+0x10a>	100051dd: R_386_PC32	Process::createUserThread()
100051e1:	83 c4 10             	add    esp,0x10
100051e4:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100051e6: R_386_32	VgaText::hiddenOut
100051eb:	a1 00 00 00 00       	mov    eax,ds:0x0	100051ec: R_386_32	term
100051f0:	83 ec 0c             	sub    esp,0xc
100051f3:	50                   	push   eax
100051f4:	e8 fc ff ff ff       	call   100051f5 <begin(void*)+0x122>	100051f5: R_386_PC32	setActiveTerminal(VgaText*)
100051f9:	83 c4 10             	add    esp,0x10
100051fc:	e8 fc ff ff ff       	call   100051fd <begin(void*)+0x12a>	100051fd: R_386_PC32	drawBootScreen()
10005201:	83 ec 0c             	sub    esp,0xc
10005204:	68 c5 ab 00 10       	push   0x1000abc5	10005205: R_386_32	.text
10005209:	6a 0d                	push   0xd
1000520b:	6a 32                	push   0x32
1000520d:	6a 05                	push   0x5
1000520f:	6a 16                	push   0x16
10005211:	e8 fc ff ff ff       	call   10005212 <begin(void*)+0x13f>	10005212: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005216:	83 c4 20             	add    esp,0x20
10005219:	83 ec 0c             	sub    esp,0xc
1000521c:	6a 03                	push   0x3
1000521e:	e8 fc ff ff ff       	call   1000521f <begin(void*)+0x14c>	1000521f: R_386_PC32	bootInstallTasks(int)
10005223:	83 c4 10             	add    esp,0x10
10005226:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10005228: R_386_32	VgaText::hiddenOut
1000522d:	83 ec 0c             	sub    esp,0xc
10005230:	68 14 01 00 00       	push   0x114
10005235:	e8 fc ff ff ff       	call   10005236 <begin(void*)+0x163>	10005236: R_386_PC32	operator new(unsigned long)
1000523a:	83 c4 10             	add    esp,0x10
1000523d:	89 c3                	mov    ebx,eax
1000523f:	a1 00 00 00 00       	mov    eax,ds:0x0	10005240: R_386_32	kernelProcess
10005244:	83 ec 04             	sub    esp,0x4
10005247:	50                   	push   eax
10005248:	68 47 ad 00 10       	push   0x1000ad47	10005249: R_386_32	.text
1000524d:	53                   	push   ebx
1000524e:	e8 fc ff ff ff       	call   1000524f <begin(void*)+0x17c>	1000524f: R_386_PC32	File::File(char const*, Process*)
10005253:	83 c4 10             	add    esp,0x10
10005256:	89 5d ac             	mov    DWORD PTR [ebp-0x54],ebx
10005259:	83 ec 08             	sub    esp,0x8
1000525c:	6a 01                	push   0x1
1000525e:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10005261:	e8 fc ff ff ff       	call   10005262 <begin(void*)+0x18f>	10005262: R_386_PC32	File::open(FileOpenMode)
10005266:	83 c4 10             	add    esp,0x10
10005269:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
1000526c:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
10005270:	75 39                	jne    100052ab <begin(void*)+0x1d8>
10005272:	83 ec 0c             	sub    esp,0xc
10005275:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10005278:	e8 fc ff ff ff       	call   10005279 <begin(void*)+0x1a6>	10005279: R_386_PC32	File::close()
1000527d:	83 c4 10             	add    esp,0x10
10005280:	83 ec 0c             	sub    esp,0xc
10005283:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10005286:	e8 fc ff ff ff       	call   10005287 <begin(void*)+0x1b4>	10005287: R_386_PC32	File::unlink()
1000528b:	83 c4 10             	add    esp,0x10
1000528e:	83 7d ac 00          	cmp    DWORD PTR [ebp-0x54],0x0
10005292:	74 46                	je     100052da <begin(void*)+0x207>
10005294:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10005297:	8b 00                	mov    eax,DWORD PTR [eax]
10005299:	83 c0 08             	add    eax,0x8
1000529c:	8b 00                	mov    eax,DWORD PTR [eax]
1000529e:	83 ec 0c             	sub    esp,0xc
100052a1:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
100052a4:	ff d0                	call   eax
100052a6:	83 c4 10             	add    esp,0x10
100052a9:	eb 2f                	jmp    100052da <begin(void*)+0x207>
100052ab:	83 7d ac 00          	cmp    DWORD PTR [ebp-0x54],0x0
100052af:	74 15                	je     100052c6 <begin(void*)+0x1f3>
100052b1:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100052b4:	8b 00                	mov    eax,DWORD PTR [eax]
100052b6:	83 c0 08             	add    eax,0x8
100052b9:	8b 00                	mov    eax,DWORD PTR [eax]
100052bb:	83 ec 0c             	sub    esp,0xc
100052be:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
100052c1:	ff d0                	call   eax
100052c3:	83 c4 10             	add    esp,0x10
100052c6:	83 ec 08             	sub    esp,0x8
100052c9:	6a 00                	push   0x0
100052cb:	6a 01                	push   0x1
100052cd:	e8 fc ff ff ff       	call   100052ce <begin(void*)+0x1fb>	100052ce: R_386_PC32	sleep(unsigned long long)
100052d2:	83 c4 10             	add    esp,0x10
100052d5:	e9 53 ff ff ff       	jmp    1000522d <begin(void*)+0x15a>
100052da:	90                   	nop
100052db:	83 ec 08             	sub    esp,0x8
100052de:	6a 00                	push   0x0
100052e0:	6a 01                	push   0x1
100052e2:	e8 fc ff ff ff       	call   100052e3 <begin(void*)+0x210>	100052e3: R_386_PC32	sleep(unsigned long long)
100052e7:	83 c4 10             	add    esp,0x10
100052ea:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100052ec: R_386_32	VgaText::hiddenOut
100052f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100052f2: R_386_32	term
100052f6:	83 ec 0c             	sub    esp,0xc
100052f9:	50                   	push   eax
100052fa:	e8 fc ff ff ff       	call   100052fb <begin(void*)+0x228>	100052fb: R_386_PC32	setActiveTerminal(VgaText*)
100052ff:	83 c4 10             	add    esp,0x10
10005302:	e8 fc ff ff ff       	call   10005303 <begin(void*)+0x230>	10005303: R_386_PC32	drawBootScreen()
10005307:	83 ec 0c             	sub    esp,0xc
1000530a:	68 c5 ab 00 10       	push   0x1000abc5	1000530b: R_386_32	.text
1000530f:	6a 0d                	push   0xd
10005311:	6a 32                	push   0x32
10005313:	6a 05                	push   0x5
10005315:	6a 16                	push   0x16
10005317:	e8 fc ff ff ff       	call   10005318 <begin(void*)+0x245>	10005318: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000531c:	83 c4 20             	add    esp,0x20
1000531f:	83 ec 0c             	sub    esp,0xc
10005322:	6a 04                	push   0x4
10005324:	e8 fc ff ff ff       	call   10005325 <begin(void*)+0x252>	10005325: R_386_PC32	bootInstallTasks(int)
10005329:	83 c4 10             	add    esp,0x10
1000532c:	eb 01                	jmp    1000532f <begin(void*)+0x25c>
1000532e:	90                   	nop
1000532f:	83 ec 0c             	sub    esp,0xc
10005332:	6a 05                	push   0x5
10005334:	e8 fc ff ff ff       	call   10005335 <begin(void*)+0x262>	10005335: R_386_PC32	bootInstallTasks(int)
10005339:	83 c4 10             	add    esp,0x10
1000533c:	83 ec 0c             	sub    esp,0xc
1000533f:	68 54 ad 00 10       	push   0x1000ad54	10005340: R_386_32	.text
10005344:	e8 fc ff ff ff       	call   10005345 <begin(void*)+0x272>	10005345: R_386_PC32	CmOpen(char const*)
10005349:	83 c4 10             	add    esp,0x10
1000534c:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
1000534f:	a0 00 00 00 00       	mov    al,ds:0x0	10005350: R_386_32	createNewUserMode
10005354:	83 f0 01             	xor    eax,0x1
10005357:	84 c0                	test   al,al
10005359:	74 15                	je     10005370 <begin(void*)+0x29d>
1000535b:	83 ec 04             	sub    esp,0x4
1000535e:	68 79 ad 00 10       	push   0x1000ad79	1000535f: R_386_32	.text
10005363:	6a 00                	push   0x0
10005365:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005368:	e8 fc ff ff ff       	call   10005369 <begin(void*)+0x296>	10005369: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000536d:	83 c4 10             	add    esp,0x10
10005370:	83 ec 08             	sub    esp,0x8
10005373:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10005379:	50                   	push   eax
1000537a:	68 00 00 00 00       	push   0x0	1000537b: R_386_32	currName
1000537f:	e8 fc ff ff ff       	call   10005380 <begin(void*)+0x2ad>	10005380: R_386_PC32	getRegsafeName(char*, char*)
10005384:	83 c4 10             	add    esp,0x10
10005387:	83 ec 08             	sub    esp,0x8
1000538a:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10005390:	50                   	push   eax
10005391:	68 80 ad 00 10       	push   0x1000ad80	10005392: R_386_32	.text
10005396:	e8 fc ff ff ff       	call   10005397 <begin(void*)+0x2c4>	10005397: R_386_PC32	Dbg::kprintf(char const*, ...)
1000539b:	83 c4 10             	add    esp,0x10
1000539e:	83 ec 08             	sub    esp,0x8
100053a1:	68 92 ad 00 10       	push   0x1000ad92	100053a2: R_386_32	.text
100053a6:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100053ac:	50                   	push   eax
100053ad:	e8 fc ff ff ff       	call   100053ae <begin(void*)+0x2db>	100053ae: R_386_PC32	strcpy
100053b2:	83 c4 10             	add    esp,0x10
100053b5:	83 ec 08             	sub    esp,0x8
100053b8:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
100053be:	50                   	push   eax
100053bf:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100053c5:	50                   	push   eax
100053c6:	e8 fc ff ff ff       	call   100053c7 <begin(void*)+0x2f4>	100053c7: R_386_PC32	strcat
100053cb:	83 c4 10             	add    esp,0x10
100053ce:	83 ec 08             	sub    esp,0x8
100053d1:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100053d7:	50                   	push   eax
100053d8:	68 a0 ad 00 10       	push   0x1000ada0	100053d9: R_386_32	.text
100053dd:	e8 fc ff ff ff       	call   100053de <begin(void*)+0x30b>	100053de: R_386_PC32	Dbg::kprintf(char const*, ...)
100053e2:	83 c4 10             	add    esp,0x10
100053e5:	a0 00 00 00 00       	mov    al,ds:0x0	100053e6: R_386_32	createNewUserMode
100053ea:	83 f0 01             	xor    eax,0x1
100053ed:	84 c0                	test   al,al
100053ef:	0f 84 60 03 00 00    	je     10005755 <begin(void*)+0x682>
100053f5:	83 ec 08             	sub    esp,0x8
100053f8:	68 79 ad 00 10       	push   0x1000ad79	100053f9: R_386_32	.text
100053fd:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005400:	e8 fc ff ff ff       	call   10005401 <begin(void*)+0x32e>	10005401: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005405:	83 c4 10             	add    esp,0x10
10005408:	83 ec 08             	sub    esp,0x8
1000540b:	50                   	push   eax
1000540c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000540f:	e8 fc ff ff ff       	call   10005410 <begin(void*)+0x33d>	10005410: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005414:	83 c4 10             	add    esp,0x10
10005417:	83 ec 04             	sub    esp,0x4
1000541a:	68 b3 ad 00 10       	push   0x1000adb3	1000541b: R_386_32	.text
1000541f:	50                   	push   eax
10005420:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005423:	e8 fc ff ff ff       	call   10005424 <begin(void*)+0x351>	10005424: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005428:	83 c4 10             	add    esp,0x10
1000542b:	83 ec 08             	sub    esp,0x8
1000542e:	68 79 ad 00 10       	push   0x1000ad79	1000542f: R_386_32	.text
10005433:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005436:	e8 fc ff ff ff       	call   10005437 <begin(void*)+0x364>	10005437: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000543b:	83 c4 10             	add    esp,0x10
1000543e:	83 ec 08             	sub    esp,0x8
10005441:	50                   	push   eax
10005442:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005445:	e8 fc ff ff ff       	call   10005446 <begin(void*)+0x373>	10005446: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000544a:	83 c4 10             	add    esp,0x10
1000544d:	83 ec 04             	sub    esp,0x4
10005450:	68 b9 ad 00 10       	push   0x1000adb9	10005451: R_386_32	.text
10005455:	50                   	push   eax
10005456:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005459:	e8 fc ff ff ff       	call   1000545a <begin(void*)+0x387>	1000545a: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000545e:	83 c4 10             	add    esp,0x10
10005461:	83 ec 08             	sub    esp,0x8
10005464:	68 79 ad 00 10       	push   0x1000ad79	10005465: R_386_32	.text
10005469:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000546c:	e8 fc ff ff ff       	call   1000546d <begin(void*)+0x39a>	1000546d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005471:	83 c4 10             	add    esp,0x10
10005474:	83 ec 08             	sub    esp,0x8
10005477:	50                   	push   eax
10005478:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000547b:	e8 fc ff ff ff       	call   1000547c <begin(void*)+0x3a9>	1000547c: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005480:	83 c4 10             	add    esp,0x10
10005483:	83 ec 04             	sub    esp,0x4
10005486:	68 be ad 00 10       	push   0x1000adbe	10005487: R_386_32	.text
1000548b:	50                   	push   eax
1000548c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000548f:	e8 fc ff ff ff       	call   10005490 <begin(void*)+0x3bd>	10005490: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005494:	83 c4 10             	add    esp,0x10
10005497:	83 ec 08             	sub    esp,0x8
1000549a:	68 79 ad 00 10       	push   0x1000ad79	1000549b: R_386_32	.text
1000549f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054a2:	e8 fc ff ff ff       	call   100054a3 <begin(void*)+0x3d0>	100054a3: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100054a7:	83 c4 10             	add    esp,0x10
100054aa:	83 ec 08             	sub    esp,0x8
100054ad:	50                   	push   eax
100054ae:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054b1:	e8 fc ff ff ff       	call   100054b2 <begin(void*)+0x3df>	100054b2: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100054b6:	83 c4 10             	add    esp,0x10
100054b9:	83 ec 04             	sub    esp,0x4
100054bc:	68 c3 ad 00 10       	push   0x1000adc3	100054bd: R_386_32	.text
100054c1:	50                   	push   eax
100054c2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054c5:	e8 fc ff ff ff       	call   100054c6 <begin(void*)+0x3f3>	100054c6: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100054ca:	83 c4 10             	add    esp,0x10
100054cd:	83 ec 08             	sub    esp,0x8
100054d0:	68 79 ad 00 10       	push   0x1000ad79	100054d1: R_386_32	.text
100054d5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054d8:	e8 fc ff ff ff       	call   100054d9 <begin(void*)+0x406>	100054d9: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100054dd:	83 c4 10             	add    esp,0x10
100054e0:	83 ec 08             	sub    esp,0x8
100054e3:	50                   	push   eax
100054e4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054e7:	e8 fc ff ff ff       	call   100054e8 <begin(void*)+0x415>	100054e8: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100054ec:	83 c4 10             	add    esp,0x10
100054ef:	83 ec 04             	sub    esp,0x4
100054f2:	68 c9 ad 00 10       	push   0x1000adc9	100054f3: R_386_32	.text
100054f7:	50                   	push   eax
100054f8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054fb:	e8 fc ff ff ff       	call   100054fc <begin(void*)+0x429>	100054fc: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005500:	83 c4 10             	add    esp,0x10
10005503:	83 ec 08             	sub    esp,0x8
10005506:	68 d3 ad 00 10       	push   0x1000add3	10005507: R_386_32	.text
1000550b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000550e:	e8 fc ff ff ff       	call   1000550f <begin(void*)+0x43c>	1000550f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005513:	83 c4 10             	add    esp,0x10
10005516:	83 ec 08             	sub    esp,0x8
10005519:	50                   	push   eax
1000551a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000551d:	e8 fc ff ff ff       	call   1000551e <begin(void*)+0x44b>	1000551e: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005522:	83 c4 10             	add    esp,0x10
10005525:	83 ec 04             	sub    esp,0x4
10005528:	68 e4 ad 00 10       	push   0x1000ade4	10005529: R_386_32	.text
1000552d:	50                   	push   eax
1000552e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005531:	e8 fc ff ff ff       	call   10005532 <begin(void*)+0x45f>	10005532: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005536:	83 c4 10             	add    esp,0x10
10005539:	83 ec 08             	sub    esp,0x8
1000553c:	68 d3 ad 00 10       	push   0x1000add3	1000553d: R_386_32	.text
10005541:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005544:	e8 fc ff ff ff       	call   10005545 <begin(void*)+0x472>	10005545: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005549:	83 c4 10             	add    esp,0x10
1000554c:	83 ec 08             	sub    esp,0x8
1000554f:	50                   	push   eax
10005550:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005553:	e8 fc ff ff ff       	call   10005554 <begin(void*)+0x481>	10005554: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005558:	83 c4 10             	add    esp,0x10
1000555b:	83 ec 04             	sub    esp,0x4
1000555e:	68 e9 ad 00 10       	push   0x1000ade9	1000555f: R_386_32	.text
10005563:	50                   	push   eax
10005564:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005567:	e8 fc ff ff ff       	call   10005568 <begin(void*)+0x495>	10005568: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000556c:	83 c4 10             	add    esp,0x10
1000556f:	83 ec 08             	sub    esp,0x8
10005572:	68 d3 ad 00 10       	push   0x1000add3	10005573: R_386_32	.text
10005577:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000557a:	e8 fc ff ff ff       	call   1000557b <begin(void*)+0x4a8>	1000557b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000557f:	83 c4 10             	add    esp,0x10
10005582:	83 ec 08             	sub    esp,0x8
10005585:	50                   	push   eax
10005586:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005589:	e8 fc ff ff ff       	call   1000558a <begin(void*)+0x4b7>	1000558a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000558e:	83 c4 10             	add    esp,0x10
10005591:	83 ec 04             	sub    esp,0x4
10005594:	68 ee ad 00 10       	push   0x1000adee	10005595: R_386_32	.text
10005599:	50                   	push   eax
1000559a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000559d:	e8 fc ff ff ff       	call   1000559e <begin(void*)+0x4cb>	1000559e: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100055a2:	83 c4 10             	add    esp,0x10
100055a5:	83 ec 08             	sub    esp,0x8
100055a8:	68 d3 ad 00 10       	push   0x1000add3	100055a9: R_386_32	.text
100055ad:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055b0:	e8 fc ff ff ff       	call   100055b1 <begin(void*)+0x4de>	100055b1: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100055b5:	83 c4 10             	add    esp,0x10
100055b8:	83 ec 08             	sub    esp,0x8
100055bb:	50                   	push   eax
100055bc:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055bf:	e8 fc ff ff ff       	call   100055c0 <begin(void*)+0x4ed>	100055c0: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100055c4:	83 c4 10             	add    esp,0x10
100055c7:	83 ec 04             	sub    esp,0x4
100055ca:	68 f4 ad 00 10       	push   0x1000adf4	100055cb: R_386_32	.text
100055cf:	50                   	push   eax
100055d0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055d3:	e8 fc ff ff ff       	call   100055d4 <begin(void*)+0x501>	100055d4: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100055d8:	83 c4 10             	add    esp,0x10
100055db:	83 ec 08             	sub    esp,0x8
100055de:	68 d3 ad 00 10       	push   0x1000add3	100055df: R_386_32	.text
100055e3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055e6:	e8 fc ff ff ff       	call   100055e7 <begin(void*)+0x514>	100055e7: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100055eb:	83 c4 10             	add    esp,0x10
100055ee:	83 ec 08             	sub    esp,0x8
100055f1:	50                   	push   eax
100055f2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055f5:	e8 fc ff ff ff       	call   100055f6 <begin(void*)+0x523>	100055f6: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100055fa:	83 c4 10             	add    esp,0x10
100055fd:	83 ec 04             	sub    esp,0x4
10005600:	68 f9 ad 00 10       	push   0x1000adf9	10005601: R_386_32	.text
10005605:	50                   	push   eax
10005606:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005609:	e8 fc ff ff ff       	call   1000560a <begin(void*)+0x537>	1000560a: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000560e:	83 c4 10             	add    esp,0x10
10005611:	83 ec 08             	sub    esp,0x8
10005614:	68 d3 ad 00 10       	push   0x1000add3	10005615: R_386_32	.text
10005619:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000561c:	e8 fc ff ff ff       	call   1000561d <begin(void*)+0x54a>	1000561d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005621:	83 c4 10             	add    esp,0x10
10005624:	83 ec 08             	sub    esp,0x8
10005627:	50                   	push   eax
10005628:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000562b:	e8 fc ff ff ff       	call   1000562c <begin(void*)+0x559>	1000562c: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005630:	83 c4 10             	add    esp,0x10
10005633:	83 ec 04             	sub    esp,0x4
10005636:	68 ff ad 00 10       	push   0x1000adff	10005637: R_386_32	.text
1000563b:	50                   	push   eax
1000563c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000563f:	e8 fc ff ff ff       	call   10005640 <begin(void*)+0x56d>	10005640: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005644:	83 c4 10             	add    esp,0x10
10005647:	83 ec 08             	sub    esp,0x8
1000564a:	68 d3 ad 00 10       	push   0x1000add3	1000564b: R_386_32	.text
1000564f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005652:	e8 fc ff ff ff       	call   10005653 <begin(void*)+0x580>	10005653: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005657:	83 c4 10             	add    esp,0x10
1000565a:	83 ec 08             	sub    esp,0x8
1000565d:	50                   	push   eax
1000565e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005661:	e8 fc ff ff ff       	call   10005662 <begin(void*)+0x58f>	10005662: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005666:	83 c4 10             	add    esp,0x10
10005669:	83 ec 04             	sub    esp,0x4
1000566c:	68 0a ae 00 10       	push   0x1000ae0a	1000566d: R_386_32	.text
10005671:	50                   	push   eax
10005672:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005675:	e8 fc ff ff ff       	call   10005676 <begin(void*)+0x5a3>	10005676: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000567a:	83 c4 10             	add    esp,0x10
1000567d:	83 ec 08             	sub    esp,0x8
10005680:	68 15 ae 00 10       	push   0x1000ae15	10005681: R_386_32	.text
10005685:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005688:	e8 fc ff ff ff       	call   10005689 <begin(void*)+0x5b6>	10005689: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000568d:	83 c4 10             	add    esp,0x10
10005690:	83 ec 08             	sub    esp,0x8
10005693:	50                   	push   eax
10005694:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005697:	e8 fc ff ff ff       	call   10005698 <begin(void*)+0x5c5>	10005698: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000569c:	83 c4 10             	add    esp,0x10
1000569f:	83 ec 04             	sub    esp,0x4
100056a2:	68 21 ae 00 10       	push   0x1000ae21	100056a3: R_386_32	.text
100056a7:	50                   	push   eax
100056a8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056ab:	e8 fc ff ff ff       	call   100056ac <begin(void*)+0x5d9>	100056ac: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100056b0:	83 c4 10             	add    esp,0x10
100056b3:	83 ec 08             	sub    esp,0x8
100056b6:	68 2a ae 00 10       	push   0x1000ae2a	100056b7: R_386_32	.text
100056bb:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056be:	e8 fc ff ff ff       	call   100056bf <begin(void*)+0x5ec>	100056bf: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100056c3:	83 c4 10             	add    esp,0x10
100056c6:	83 ec 08             	sub    esp,0x8
100056c9:	50                   	push   eax
100056ca:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056cd:	e8 fc ff ff ff       	call   100056ce <begin(void*)+0x5fb>	100056ce: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100056d2:	83 c4 10             	add    esp,0x10
100056d5:	83 ec 04             	sub    esp,0x4
100056d8:	68 37 ae 00 10       	push   0x1000ae37	100056d9: R_386_32	.text
100056dd:	50                   	push   eax
100056de:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056e1:	e8 fc ff ff ff       	call   100056e2 <begin(void*)+0x60f>	100056e2: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100056e6:	83 c4 10             	add    esp,0x10
100056e9:	83 ec 08             	sub    esp,0x8
100056ec:	68 2a ae 00 10       	push   0x1000ae2a	100056ed: R_386_32	.text
100056f1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056f4:	e8 fc ff ff ff       	call   100056f5 <begin(void*)+0x622>	100056f5: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100056f9:	83 c4 10             	add    esp,0x10
100056fc:	83 ec 08             	sub    esp,0x8
100056ff:	50                   	push   eax
10005700:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005703:	e8 fc ff ff ff       	call   10005704 <begin(void*)+0x631>	10005704: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005708:	83 c4 10             	add    esp,0x10
1000570b:	83 ec 04             	sub    esp,0x4
1000570e:	68 3c ae 00 10       	push   0x1000ae3c	1000570f: R_386_32	.text
10005713:	50                   	push   eax
10005714:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005717:	e8 fc ff ff ff       	call   10005718 <begin(void*)+0x645>	10005718: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000571c:	83 c4 10             	add    esp,0x10
1000571f:	83 ec 08             	sub    esp,0x8
10005722:	68 2a ae 00 10       	push   0x1000ae2a	10005723: R_386_32	.text
10005727:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000572a:	e8 fc ff ff ff       	call   1000572b <begin(void*)+0x658>	1000572b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000572f:	83 c4 10             	add    esp,0x10
10005732:	83 ec 08             	sub    esp,0x8
10005735:	50                   	push   eax
10005736:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005739:	e8 fc ff ff ff       	call   1000573a <begin(void*)+0x667>	1000573a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000573e:	83 c4 10             	add    esp,0x10
10005741:	83 ec 04             	sub    esp,0x4
10005744:	68 44 ae 00 10       	push   0x1000ae44	10005745: R_386_32	.text
10005749:	50                   	push   eax
1000574a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000574d:	e8 fc ff ff ff       	call   1000574e <begin(void*)+0x67b>	1000574e: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005752:	83 c4 10             	add    esp,0x10
10005755:	83 ec 08             	sub    esp,0x8
10005758:	68 4f ae 00 10       	push   0x1000ae4f	10005759: R_386_32	.text
1000575d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005760:	e8 fc ff ff ff       	call   10005761 <begin(void*)+0x68e>	10005761: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005765:	83 c4 10             	add    esp,0x10
10005768:	83 ec 08             	sub    esp,0x8
1000576b:	50                   	push   eax
1000576c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000576f:	e8 fc ff ff ff       	call   10005770 <begin(void*)+0x69d>	10005770: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005774:	83 c4 10             	add    esp,0x10
10005777:	83 ec 04             	sub    esp,0x4
1000577a:	8d 95 4c ff ff ff    	lea    edx,[ebp-0xb4]
10005780:	52                   	push   edx
10005781:	50                   	push   eax
10005782:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005785:	e8 fc ff ff ff       	call   10005786 <begin(void*)+0x6b3>	10005786: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000578a:	83 c4 10             	add    esp,0x10
1000578d:	83 ec 08             	sub    esp,0x8
10005790:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005796:	50                   	push   eax
10005797:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000579a:	e8 fc ff ff ff       	call   1000579b <begin(void*)+0x6c8>	1000579b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000579f:	83 c4 10             	add    esp,0x10
100057a2:	83 ec 08             	sub    esp,0x8
100057a5:	50                   	push   eax
100057a6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057a9:	e8 fc ff ff ff       	call   100057aa <begin(void*)+0x6d7>	100057aa: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100057ae:	83 c4 10             	add    esp,0x10
100057b1:	83 ec 04             	sub    esp,0x4
100057b4:	68 5c ae 00 10       	push   0x1000ae5c	100057b5: R_386_32	.text
100057b9:	50                   	push   eax
100057ba:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057bd:	e8 fc ff ff ff       	call   100057be <begin(void*)+0x6eb>	100057be: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100057c2:	83 c4 10             	add    esp,0x10
100057c5:	83 ec 08             	sub    esp,0x8
100057c8:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100057ce:	50                   	push   eax
100057cf:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057d2:	e8 fc ff ff ff       	call   100057d3 <begin(void*)+0x700>	100057d3: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100057d7:	83 c4 10             	add    esp,0x10
100057da:	83 ec 08             	sub    esp,0x8
100057dd:	50                   	push   eax
100057de:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057e1:	e8 fc ff ff ff       	call   100057e2 <begin(void*)+0x70f>	100057e2: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100057e6:	83 c4 10             	add    esp,0x10
100057e9:	83 ec 04             	sub    esp,0x4
100057ec:	68 61 ae 00 10       	push   0x1000ae61	100057ed: R_386_32	.text
100057f1:	50                   	push   eax
100057f2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057f5:	e8 fc ff ff ff       	call   100057f6 <begin(void*)+0x723>	100057f6: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100057fa:	83 c4 10             	add    esp,0x10
100057fd:	83 ec 08             	sub    esp,0x8
10005800:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005806:	50                   	push   eax
10005807:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000580a:	e8 fc ff ff ff       	call   1000580b <begin(void*)+0x738>	1000580b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000580f:	83 c4 10             	add    esp,0x10
10005812:	83 ec 08             	sub    esp,0x8
10005815:	50                   	push   eax
10005816:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005819:	e8 fc ff ff ff       	call   1000581a <begin(void*)+0x747>	1000581a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000581e:	83 c4 10             	add    esp,0x10
10005821:	83 ec 04             	sub    esp,0x4
10005824:	68 6a ae 00 10       	push   0x1000ae6a	10005825: R_386_32	.text
10005829:	50                   	push   eax
1000582a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000582d:	e8 fc ff ff ff       	call   1000582e <begin(void*)+0x75b>	1000582e: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005832:	83 c4 10             	add    esp,0x10
10005835:	83 ec 08             	sub    esp,0x8
10005838:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
1000583e:	50                   	push   eax
1000583f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005842:	e8 fc ff ff ff       	call   10005843 <begin(void*)+0x770>	10005843: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005847:	83 c4 10             	add    esp,0x10
1000584a:	83 ec 08             	sub    esp,0x8
1000584d:	50                   	push   eax
1000584e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005851:	e8 fc ff ff ff       	call   10005852 <begin(void*)+0x77f>	10005852: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005856:	83 c4 10             	add    esp,0x10
10005859:	83 ec 04             	sub    esp,0x4
1000585c:	68 76 ae 00 10       	push   0x1000ae76	1000585d: R_386_32	.text
10005861:	50                   	push   eax
10005862:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005865:	e8 fc ff ff ff       	call   10005866 <begin(void*)+0x793>	10005866: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000586a:	83 c4 10             	add    esp,0x10
1000586d:	83 ec 08             	sub    esp,0x8
10005870:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005876:	50                   	push   eax
10005877:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000587a:	e8 fc ff ff ff       	call   1000587b <begin(void*)+0x7a8>	1000587b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000587f:	83 c4 10             	add    esp,0x10
10005882:	83 ec 08             	sub    esp,0x8
10005885:	50                   	push   eax
10005886:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005889:	e8 fc ff ff ff       	call   1000588a <begin(void*)+0x7b7>	1000588a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000588e:	83 c4 10             	add    esp,0x10
10005891:	83 ec 04             	sub    esp,0x4
10005894:	68 7e ae 00 10       	push   0x1000ae7e	10005895: R_386_32	.text
10005899:	50                   	push   eax
1000589a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000589d:	e8 fc ff ff ff       	call   1000589e <begin(void*)+0x7cb>	1000589e: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100058a2:	83 c4 10             	add    esp,0x10
100058a5:	83 ec 08             	sub    esp,0x8
100058a8:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100058ae:	50                   	push   eax
100058af:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058b2:	e8 fc ff ff ff       	call   100058b3 <begin(void*)+0x7e0>	100058b3: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100058b7:	83 c4 10             	add    esp,0x10
100058ba:	83 ec 08             	sub    esp,0x8
100058bd:	50                   	push   eax
100058be:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058c1:	e8 fc ff ff ff       	call   100058c2 <begin(void*)+0x7ef>	100058c2: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100058c6:	83 c4 10             	add    esp,0x10
100058c9:	83 ec 04             	sub    esp,0x4
100058cc:	68 88 ae 00 10       	push   0x1000ae88	100058cd: R_386_32	.text
100058d1:	50                   	push   eax
100058d2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058d5:	e8 fc ff ff ff       	call   100058d6 <begin(void*)+0x803>	100058d6: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100058da:	83 c4 10             	add    esp,0x10
100058dd:	83 ec 08             	sub    esp,0x8
100058e0:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100058e6:	50                   	push   eax
100058e7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058ea:	e8 fc ff ff ff       	call   100058eb <begin(void*)+0x818>	100058eb: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100058ef:	83 c4 10             	add    esp,0x10
100058f2:	83 ec 08             	sub    esp,0x8
100058f5:	50                   	push   eax
100058f6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058f9:	e8 fc ff ff ff       	call   100058fa <begin(void*)+0x827>	100058fa: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100058fe:	83 c4 10             	add    esp,0x10
10005901:	83 ec 04             	sub    esp,0x4
10005904:	68 92 ae 00 10       	push   0x1000ae92	10005905: R_386_32	.text
10005909:	50                   	push   eax
1000590a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000590d:	e8 fc ff ff ff       	call   1000590e <begin(void*)+0x83b>	1000590e: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005912:	83 c4 10             	add    esp,0x10
10005915:	83 ec 08             	sub    esp,0x8
10005918:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
1000591e:	50                   	push   eax
1000591f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005922:	e8 fc ff ff ff       	call   10005923 <begin(void*)+0x850>	10005923: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005927:	83 c4 10             	add    esp,0x10
1000592a:	83 ec 08             	sub    esp,0x8
1000592d:	50                   	push   eax
1000592e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005931:	e8 fc ff ff ff       	call   10005932 <begin(void*)+0x85f>	10005932: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005936:	83 c4 10             	add    esp,0x10
10005939:	83 ec 04             	sub    esp,0x4
1000593c:	68 9b ae 00 10       	push   0x1000ae9b	1000593d: R_386_32	.text
10005941:	50                   	push   eax
10005942:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005945:	e8 fc ff ff ff       	call   10005946 <begin(void*)+0x873>	10005946: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000594a:	83 c4 10             	add    esp,0x10
1000594d:	83 ec 08             	sub    esp,0x8
10005950:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005956:	50                   	push   eax
10005957:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000595a:	e8 fc ff ff ff       	call   1000595b <begin(void*)+0x888>	1000595b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000595f:	83 c4 10             	add    esp,0x10
10005962:	83 ec 08             	sub    esp,0x8
10005965:	50                   	push   eax
10005966:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005969:	e8 fc ff ff ff       	call   1000596a <begin(void*)+0x897>	1000596a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000596e:	83 c4 10             	add    esp,0x10
10005971:	83 ec 04             	sub    esp,0x4
10005974:	68 a2 ae 00 10       	push   0x1000aea2	10005975: R_386_32	.text
10005979:	50                   	push   eax
1000597a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000597d:	e8 fc ff ff ff       	call   1000597e <begin(void*)+0x8ab>	1000597e: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005982:	83 c4 10             	add    esp,0x10
10005985:	83 ec 08             	sub    esp,0x8
10005988:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
1000598e:	50                   	push   eax
1000598f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005992:	e8 fc ff ff ff       	call   10005993 <begin(void*)+0x8c0>	10005993: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005997:	83 c4 10             	add    esp,0x10
1000599a:	83 ec 08             	sub    esp,0x8
1000599d:	50                   	push   eax
1000599e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059a1:	e8 fc ff ff ff       	call   100059a2 <begin(void*)+0x8cf>	100059a2: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100059a6:	83 c4 10             	add    esp,0x10
100059a9:	83 ec 04             	sub    esp,0x4
100059ac:	68 a8 ae 00 10       	push   0x1000aea8	100059ad: R_386_32	.text
100059b1:	50                   	push   eax
100059b2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059b5:	e8 fc ff ff ff       	call   100059b6 <begin(void*)+0x8e3>	100059b6: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100059ba:	83 c4 10             	add    esp,0x10
100059bd:	a0 00 00 00 00       	mov    al,ds:0x0	100059be: R_386_32	createNewUserMode
100059c2:	83 f0 01             	xor    eax,0x1
100059c5:	84 c0                	test   al,al
100059c7:	0f 84 be 03 00 00    	je     10005d8b <begin(void*)+0xcb8>
100059cd:	a1 00 00 00 00       	mov    eax,ds:0x0	100059ce: R_386_32	modesel
100059d2:	89 c3                	mov    ebx,eax
100059d4:	89 c6                	mov    esi,eax
100059d6:	c1 fe 1f             	sar    esi,0x1f
100059d9:	83 ec 08             	sub    esp,0x8
100059dc:	68 b3 ae 00 10       	push   0x1000aeb3	100059dd: R_386_32	.text
100059e1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059e4:	e8 fc ff ff ff       	call   100059e5 <begin(void*)+0x912>	100059e5: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100059e9:	83 c4 10             	add    esp,0x10
100059ec:	83 ec 08             	sub    esp,0x8
100059ef:	50                   	push   eax
100059f0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059f3:	e8 fc ff ff ff       	call   100059f4 <begin(void*)+0x921>	100059f4: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100059f8:	83 c4 10             	add    esp,0x10
100059fb:	83 ec 08             	sub    esp,0x8
100059fe:	6a 6a                	push   0x6a
10005a00:	56                   	push   esi
10005a01:	53                   	push   ebx
10005a02:	68 bf ae 00 10       	push   0x1000aebf	10005a03: R_386_32	.text
10005a07:	50                   	push   eax
10005a08:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a0b:	e8 fc ff ff ff       	call   10005a0c <begin(void*)+0x939>	10005a0c: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
10005a10:	83 c4 20             	add    esp,0x20
10005a13:	a1 00 00 00 00       	mov    eax,ds:0x0	10005a14: R_386_32	tzsel
10005a18:	89 c3                	mov    ebx,eax
10005a1a:	89 c6                	mov    esi,eax
10005a1c:	c1 fe 1f             	sar    esi,0x1f
10005a1f:	83 ec 08             	sub    esp,0x8
10005a22:	68 15 ae 00 10       	push   0x1000ae15	10005a23: R_386_32	.text
10005a27:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a2a:	e8 fc ff ff ff       	call   10005a2b <begin(void*)+0x958>	10005a2b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a2f:	83 c4 10             	add    esp,0x10
10005a32:	83 ec 08             	sub    esp,0x8
10005a35:	50                   	push   eax
10005a36:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a39:	e8 fc ff ff ff       	call   10005a3a <begin(void*)+0x967>	10005a3a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005a3e:	83 c4 10             	add    esp,0x10
10005a41:	83 ec 08             	sub    esp,0x8
10005a44:	6a 6a                	push   0x6a
10005a46:	56                   	push   esi
10005a47:	53                   	push   ebx
10005a48:	68 c7 ae 00 10       	push   0x1000aec7	10005a49: R_386_32	.text
10005a4d:	50                   	push   eax
10005a4e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a51:	e8 fc ff ff ff       	call   10005a52 <begin(void*)+0x97f>	10005a52: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
10005a56:	83 c4 20             	add    esp,0x20
10005a59:	a1 00 00 00 00       	mov    eax,ds:0x0	10005a5a: R_386_32	tzsel
10005a5e:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10005a61: R_386_32	timezoneStrings
10005a65:	8d 58 01             	lea    ebx,[eax+0x1]
10005a68:	83 ec 08             	sub    esp,0x8
10005a6b:	68 d2 ae 00 10       	push   0x1000aed2	10005a6c: R_386_32	.text
10005a70:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a73:	e8 fc ff ff ff       	call   10005a74 <begin(void*)+0x9a1>	10005a74: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a78:	83 c4 10             	add    esp,0x10
10005a7b:	83 ec 04             	sub    esp,0x4
10005a7e:	53                   	push   ebx
10005a7f:	50                   	push   eax
10005a80:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a83:	e8 fc ff ff ff       	call   10005a84 <begin(void*)+0x9b1>	10005a84: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005a88:	83 c4 10             	add    esp,0x10
10005a8b:	83 ec 08             	sub    esp,0x8
10005a8e:	68 e7 ae 00 10       	push   0x1000aee7	10005a8f: R_386_32	.text
10005a93:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a96:	e8 fc ff ff ff       	call   10005a97 <begin(void*)+0x9c4>	10005a97: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a9b:	83 c4 10             	add    esp,0x10
10005a9e:	83 ec 04             	sub    esp,0x4
10005aa1:	68 00 00 00 00       	push   0x0	10005aa2: R_386_32	currName
10005aa6:	50                   	push   eax
10005aa7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005aaa:	e8 fc ff ff ff       	call   10005aab <begin(void*)+0x9d8>	10005aab: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005aaf:	83 c4 10             	add    esp,0x10
10005ab2:	83 ec 08             	sub    esp,0x8
10005ab5:	68 f9 ae 00 10       	push   0x1000aef9	10005ab6: R_386_32	.text
10005aba:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005abd:	e8 fc ff ff ff       	call   10005abe <begin(void*)+0x9eb>	10005abe: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005ac2:	83 c4 10             	add    esp,0x10
10005ac5:	83 ec 04             	sub    esp,0x4
10005ac8:	68 00 00 00 00       	push   0x0	10005ac9: R_386_32	currComp
10005acd:	50                   	push   eax
10005ace:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ad1:	e8 fc ff ff ff       	call   10005ad2 <begin(void*)+0x9ff>	10005ad2: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005ad6:	83 c4 10             	add    esp,0x10
10005ad9:	83 ec 08             	sub    esp,0x8
10005adc:	68 0e af 00 10       	push   0x1000af0e	10005add: R_386_32	.text
10005ae1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ae4:	e8 fc ff ff ff       	call   10005ae5 <begin(void*)+0xa12>	10005ae5: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005ae9:	83 c4 10             	add    esp,0x10
10005aec:	83 ec 04             	sub    esp,0x4
10005aef:	68 00 00 00 00       	push   0x0	10005af0: R_386_32	pkeybuf
10005af4:	50                   	push   eax
10005af5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005af8:	e8 fc ff ff ff       	call   10005af9 <begin(void*)+0xa26>	10005af9: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005afd:	83 c4 10             	add    esp,0x10
10005b00:	83 ec 08             	sub    esp,0x8
10005b03:	68 26 af 00 10       	push   0x1000af26	10005b04: R_386_32	.text
10005b08:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b0b:	e8 fc ff ff ff       	call   10005b0c <begin(void*)+0xa39>	10005b0c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b10:	83 c4 10             	add    esp,0x10
10005b13:	83 ec 08             	sub    esp,0x8
10005b16:	50                   	push   eax
10005b17:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b1a:	e8 fc ff ff ff       	call   10005b1b <begin(void*)+0xa48>	10005b1b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005b1f:	83 c4 10             	add    esp,0x10
10005b22:	83 ec 04             	sub    esp,0x4
10005b25:	68 3c af 00 10       	push   0x1000af3c	10005b26: R_386_32	.text
10005b2a:	50                   	push   eax
10005b2b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b2e:	e8 fc ff ff ff       	call   10005b2f <begin(void*)+0xa5c>	10005b2f: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005b33:	83 c4 10             	add    esp,0x10
10005b36:	83 ec 08             	sub    esp,0x8
10005b39:	68 40 af 00 10       	push   0x1000af40	10005b3a: R_386_32	.text
10005b3e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b41:	e8 fc ff ff ff       	call   10005b42 <begin(void*)+0xa6f>	10005b42: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b46:	83 c4 10             	add    esp,0x10
10005b49:	83 ec 08             	sub    esp,0x8
10005b4c:	50                   	push   eax
10005b4d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b50:	e8 fc ff ff ff       	call   10005b51 <begin(void*)+0xa7e>	10005b51: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005b55:	83 c4 10             	add    esp,0x10
10005b58:	83 ec 04             	sub    esp,0x4
10005b5b:	68 3c af 00 10       	push   0x1000af3c	10005b5c: R_386_32	.text
10005b60:	50                   	push   eax
10005b61:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b64:	e8 fc ff ff ff       	call   10005b65 <begin(void*)+0xa92>	10005b65: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005b69:	83 c4 10             	add    esp,0x10
10005b6c:	83 ec 08             	sub    esp,0x8
10005b6f:	68 57 af 00 10       	push   0x1000af57	10005b70: R_386_32	.text
10005b74:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b77:	e8 fc ff ff ff       	call   10005b78 <begin(void*)+0xaa5>	10005b78: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b7c:	83 c4 10             	add    esp,0x10
10005b7f:	83 ec 08             	sub    esp,0x8
10005b82:	50                   	push   eax
10005b83:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b86:	e8 fc ff ff ff       	call   10005b87 <begin(void*)+0xab4>	10005b87: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005b8b:	83 c4 10             	add    esp,0x10
10005b8e:	83 ec 04             	sub    esp,0x4
10005b91:	68 3c af 00 10       	push   0x1000af3c	10005b92: R_386_32	.text
10005b96:	50                   	push   eax
10005b97:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b9a:	e8 fc ff ff ff       	call   10005b9b <begin(void*)+0xac8>	10005b9b: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005b9f:	83 c4 10             	add    esp,0x10
10005ba2:	83 ec 08             	sub    esp,0x8
10005ba5:	68 6d af 00 10       	push   0x1000af6d	10005ba6: R_386_32	.text
10005baa:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bad:	e8 fc ff ff ff       	call   10005bae <begin(void*)+0xadb>	10005bae: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005bb2:	83 c4 10             	add    esp,0x10
10005bb5:	83 ec 08             	sub    esp,0x8
10005bb8:	50                   	push   eax
10005bb9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bbc:	e8 fc ff ff ff       	call   10005bbd <begin(void*)+0xaea>	10005bbd: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005bc1:	83 c4 10             	add    esp,0x10
10005bc4:	83 ec 04             	sub    esp,0x4
10005bc7:	68 3c af 00 10       	push   0x1000af3c	10005bc8: R_386_32	.text
10005bcc:	50                   	push   eax
10005bcd:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bd0:	e8 fc ff ff ff       	call   10005bd1 <begin(void*)+0xafe>	10005bd1: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005bd5:	83 c4 10             	add    esp,0x10
10005bd8:	83 ec 08             	sub    esp,0x8
10005bdb:	68 83 af 00 10       	push   0x1000af83	10005bdc: R_386_32	.text
10005be0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005be3:	e8 fc ff ff ff       	call   10005be4 <begin(void*)+0xb11>	10005be4: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005be8:	83 c4 10             	add    esp,0x10
10005beb:	83 ec 08             	sub    esp,0x8
10005bee:	50                   	push   eax
10005bef:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bf2:	e8 fc ff ff ff       	call   10005bf3 <begin(void*)+0xb20>	10005bf3: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005bf7:	83 c4 10             	add    esp,0x10
10005bfa:	83 ec 04             	sub    esp,0x4
10005bfd:	68 3c af 00 10       	push   0x1000af3c	10005bfe: R_386_32	.text
10005c02:	50                   	push   eax
10005c03:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c06:	e8 fc ff ff ff       	call   10005c07 <begin(void*)+0xb34>	10005c07: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005c0b:	83 c4 10             	add    esp,0x10
10005c0e:	83 ec 08             	sub    esp,0x8
10005c11:	68 9a af 00 10       	push   0x1000af9a	10005c12: R_386_32	.text
10005c16:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c19:	e8 fc ff ff ff       	call   10005c1a <begin(void*)+0xb47>	10005c1a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c1e:	83 c4 10             	add    esp,0x10
10005c21:	83 ec 04             	sub    esp,0x4
10005c24:	68 b4 af 00 10       	push   0x1000afb4	10005c25: R_386_32	.text
10005c29:	50                   	push   eax
10005c2a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c2d:	e8 fc ff ff ff       	call   10005c2e <begin(void*)+0xb5b>	10005c2e: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005c32:	83 c4 10             	add    esp,0x10
10005c35:	83 ec 08             	sub    esp,0x8
10005c38:	68 d4 af 00 10       	push   0x1000afd4	10005c39: R_386_32	.text
10005c3d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c40:	e8 fc ff ff ff       	call   10005c41 <begin(void*)+0xb6e>	10005c41: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c45:	83 c4 10             	add    esp,0x10
10005c48:	83 ec 04             	sub    esp,0x4
10005c4b:	68 ef af 00 10       	push   0x1000afef	10005c4c: R_386_32	.text
10005c50:	50                   	push   eax
10005c51:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c54:	e8 fc ff ff ff       	call   10005c55 <begin(void*)+0xb82>	10005c55: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005c59:	83 c4 10             	add    esp,0x10
10005c5c:	83 ec 08             	sub    esp,0x8
10005c5f:	68 fd af 00 10       	push   0x1000affd	10005c60: R_386_32	.text
10005c64:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c67:	e8 fc ff ff ff       	call   10005c68 <begin(void*)+0xb95>	10005c68: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c6c:	83 c4 10             	add    esp,0x10
10005c6f:	83 ec 04             	sub    esp,0x4
10005c72:	68 17 b0 00 10       	push   0x1000b017	10005c73: R_386_32	.text
10005c77:	50                   	push   eax
10005c78:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c7b:	e8 fc ff ff ff       	call   10005c7c <begin(void*)+0xba9>	10005c7c: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005c80:	83 c4 10             	add    esp,0x10
10005c83:	83 ec 08             	sub    esp,0x8
10005c86:	68 2f b0 00 10       	push   0x1000b02f	10005c87: R_386_32	.text
10005c8b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c8e:	e8 fc ff ff ff       	call   10005c8f <begin(void*)+0xbbc>	10005c8f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c93:	83 c4 10             	add    esp,0x10
10005c96:	83 ec 04             	sub    esp,0x4
10005c99:	68 17 b0 00 10       	push   0x1000b017	10005c9a: R_386_32	.text
10005c9e:	50                   	push   eax
10005c9f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ca2:	e8 fc ff ff ff       	call   10005ca3 <begin(void*)+0xbd0>	10005ca3: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005ca7:	83 c4 10             	add    esp,0x10
10005caa:	83 ec 08             	sub    esp,0x8
10005cad:	68 49 b0 00 10       	push   0x1000b049	10005cae: R_386_32	.text
10005cb2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cb5:	e8 fc ff ff ff       	call   10005cb6 <begin(void*)+0xbe3>	10005cb6: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005cba:	83 c4 10             	add    esp,0x10
10005cbd:	83 ec 04             	sub    esp,0x4
10005cc0:	68 17 b0 00 10       	push   0x1000b017	10005cc1: R_386_32	.text
10005cc5:	50                   	push   eax
10005cc6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cc9:	e8 fc ff ff ff       	call   10005cca <begin(void*)+0xbf7>	10005cca: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005cce:	83 c4 10             	add    esp,0x10
10005cd1:	83 ec 08             	sub    esp,0x8
10005cd4:	68 26 af 00 10       	push   0x1000af26	10005cd5: R_386_32	.text
10005cd9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cdc:	e8 fc ff ff ff       	call   10005cdd <begin(void*)+0xc0a>	10005cdd: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005ce1:	83 c4 10             	add    esp,0x10
10005ce4:	83 ec 08             	sub    esp,0x8
10005ce7:	50                   	push   eax
10005ce8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ceb:	e8 fc ff ff ff       	call   10005cec <begin(void*)+0xc19>	10005cec: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005cf0:	83 c4 10             	add    esp,0x10
10005cf3:	83 ec 04             	sub    esp,0x4
10005cf6:	68 64 b0 00 10       	push   0x1000b064	10005cf7: R_386_32	.text
10005cfb:	50                   	push   eax
10005cfc:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cff:	e8 fc ff ff ff       	call   10005d00 <begin(void*)+0xc2d>	10005d00: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005d04:	83 c4 10             	add    esp,0x10
10005d07:	83 ec 08             	sub    esp,0x8
10005d0a:	68 40 af 00 10       	push   0x1000af40	10005d0b: R_386_32	.text
10005d0f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d12:	e8 fc ff ff ff       	call   10005d13 <begin(void*)+0xc40>	10005d13: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005d17:	83 c4 10             	add    esp,0x10
10005d1a:	83 ec 08             	sub    esp,0x8
10005d1d:	50                   	push   eax
10005d1e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d21:	e8 fc ff ff ff       	call   10005d22 <begin(void*)+0xc4f>	10005d22: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005d26:	83 c4 10             	add    esp,0x10
10005d29:	83 ec 04             	sub    esp,0x4
10005d2c:	68 64 b0 00 10       	push   0x1000b064	10005d2d: R_386_32	.text
10005d31:	50                   	push   eax
10005d32:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d35:	e8 fc ff ff ff       	call   10005d36 <begin(void*)+0xc63>	10005d36: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005d3a:	83 c4 10             	add    esp,0x10
10005d3d:	83 ec 08             	sub    esp,0x8
10005d40:	68 68 b0 00 10       	push   0x1000b068	10005d41: R_386_32	.text
10005d45:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d48:	e8 fc ff ff ff       	call   10005d49 <begin(void*)+0xc76>	10005d49: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005d4d:	83 c4 10             	add    esp,0x10
10005d50:	83 ec 04             	sub    esp,0x4
10005d53:	68 82 b0 00 10       	push   0x1000b082	10005d54: R_386_32	.text
10005d58:	50                   	push   eax
10005d59:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d5c:	e8 fc ff ff ff       	call   10005d5d <begin(void*)+0xc8a>	10005d5d: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005d61:	83 c4 10             	add    esp,0x10
10005d64:	83 ec 08             	sub    esp,0x8
10005d67:	68 a0 b0 00 10       	push   0x1000b0a0	10005d68: R_386_32	.text
10005d6c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d6f:	e8 fc ff ff ff       	call   10005d70 <begin(void*)+0xc9d>	10005d70: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005d74:	83 c4 10             	add    esp,0x10
10005d77:	83 ec 04             	sub    esp,0x4
10005d7a:	68 bb b0 00 10       	push   0x1000b0bb	10005d7b: R_386_32	.text
10005d7f:	50                   	push   eax
10005d80:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d83:	e8 fc ff ff ff       	call   10005d84 <begin(void*)+0xcb1>	10005d84: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005d88:	83 c4 10             	add    esp,0x10
10005d8b:	83 ec 08             	sub    esp,0x8
10005d8e:	68 92 ad 00 10       	push   0x1000ad92	10005d8f: R_386_32	.text
10005d93:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005d99:	50                   	push   eax
10005d9a:	e8 fc ff ff ff       	call   10005d9b <begin(void*)+0xcc8>	10005d9b: R_386_PC32	strcpy
10005d9f:	83 c4 10             	add    esp,0x10
10005da2:	83 ec 08             	sub    esp,0x8
10005da5:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10005dab:	50                   	push   eax
10005dac:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005db2:	50                   	push   eax
10005db3:	e8 fc ff ff ff       	call   10005db4 <begin(void*)+0xce1>	10005db4: R_386_PC32	strcat
10005db8:	83 c4 10             	add    esp,0x10
10005dbb:	83 ec 08             	sub    esp,0x8
10005dbe:	68 cb b0 00 10       	push   0x1000b0cb	10005dbf: R_386_32	.text
10005dc3:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005dc9:	50                   	push   eax
10005dca:	e8 fc ff ff ff       	call   10005dcb <begin(void*)+0xcf8>	10005dcb: R_386_PC32	strcat
10005dcf:	83 c4 10             	add    esp,0x10
10005dd2:	83 ec 08             	sub    esp,0x8
10005dd5:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005ddb:	50                   	push   eax
10005ddc:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ddf:	e8 fc ff ff ff       	call   10005de0 <begin(void*)+0xd0d>	10005de0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005de4:	83 c4 10             	add    esp,0x10
10005de7:	83 ec 04             	sub    esp,0x4
10005dea:	68 00 00 00 00       	push   0x0	10005deb: R_386_32	passwhash
10005def:	50                   	push   eax
10005df0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005df3:	e8 fc ff ff ff       	call   10005df4 <begin(void*)+0xd21>	10005df4: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005df8:	83 c4 10             	add    esp,0x10
10005dfb:	83 ec 08             	sub    esp,0x8
10005dfe:	68 92 ad 00 10       	push   0x1000ad92	10005dff: R_386_32	.text
10005e03:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005e09:	50                   	push   eax
10005e0a:	e8 fc ff ff ff       	call   10005e0b <begin(void*)+0xd38>	10005e0b: R_386_PC32	strcpy
10005e0f:	83 c4 10             	add    esp,0x10
10005e12:	83 ec 08             	sub    esp,0x8
10005e15:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10005e1b:	50                   	push   eax
10005e1c:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005e22:	50                   	push   eax
10005e23:	e8 fc ff ff ff       	call   10005e24 <begin(void*)+0xd51>	10005e24: R_386_PC32	strcat
10005e28:	83 c4 10             	add    esp,0x10
10005e2b:	83 ec 08             	sub    esp,0x8
10005e2e:	68 d5 b0 00 10       	push   0x1000b0d5	10005e2f: R_386_32	.text
10005e33:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005e39:	50                   	push   eax
10005e3a:	e8 fc ff ff ff       	call   10005e3b <begin(void*)+0xd68>	10005e3b: R_386_PC32	strcat
10005e3f:	83 c4 10             	add    esp,0x10
10005e42:	83 ec 08             	sub    esp,0x8
10005e45:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005e4b:	50                   	push   eax
10005e4c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005e4f:	e8 fc ff ff ff       	call   10005e50 <begin(void*)+0xd7d>	10005e50: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005e54:	83 c4 10             	add    esp,0x10
10005e57:	83 ec 04             	sub    esp,0x4
10005e5a:	68 00 00 00 00       	push   0x0	10005e5b: R_386_32	passwsalt
10005e5f:	50                   	push   eax
10005e60:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005e63:	e8 fc ff ff ff       	call   10005e64 <begin(void*)+0xd91>	10005e64: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005e68:	83 c4 10             	add    esp,0x10
10005e6b:	83 ec 08             	sub    esp,0x8
10005e6e:	68 92 ad 00 10       	push   0x1000ad92	10005e6f: R_386_32	.text
10005e73:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005e79:	50                   	push   eax
10005e7a:	e8 fc ff ff ff       	call   10005e7b <begin(void*)+0xda8>	10005e7b: R_386_PC32	strcpy
10005e7f:	83 c4 10             	add    esp,0x10
10005e82:	83 ec 08             	sub    esp,0x8
10005e85:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10005e8b:	50                   	push   eax
10005e8c:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005e92:	50                   	push   eax
10005e93:	e8 fc ff ff ff       	call   10005e94 <begin(void*)+0xdc1>	10005e94: R_386_PC32	strcat
10005e98:	83 c4 10             	add    esp,0x10
10005e9b:	83 ec 08             	sub    esp,0x8
10005e9e:	68 db b0 00 10       	push   0x1000b0db	10005e9f: R_386_32	.text
10005ea3:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005ea9:	50                   	push   eax
10005eaa:	e8 fc ff ff ff       	call   10005eab <begin(void*)+0xdd8>	10005eab: R_386_PC32	strcat
10005eaf:	83 c4 10             	add    esp,0x10
10005eb2:	83 ec 08             	sub    esp,0x8
10005eb5:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005ebb:	50                   	push   eax
10005ebc:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ebf:	e8 fc ff ff ff       	call   10005ec0 <begin(void*)+0xded>	10005ec0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005ec4:	83 c4 10             	add    esp,0x10
10005ec7:	83 ec 04             	sub    esp,0x4
10005eca:	68 00 00 00 00       	push   0x0	10005ecb: R_386_32	currName
10005ecf:	50                   	push   eax
10005ed0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ed3:	e8 fc ff ff ff       	call   10005ed4 <begin(void*)+0xe01>	10005ed4: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005ed8:	83 c4 10             	add    esp,0x10
10005edb:	83 ec 08             	sub    esp,0x8
10005ede:	68 96 a5 00 10       	push   0x1000a596	10005edf: R_386_32	.text
10005ee3:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10005ee9:	50                   	push   eax
10005eea:	e8 fc ff ff ff       	call   10005eeb <begin(void*)+0xe18>	10005eeb: R_386_PC32	strcpy
10005eef:	83 c4 10             	add    esp,0x10
10005ef2:	83 ec 08             	sub    esp,0x8
10005ef5:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10005efb:	50                   	push   eax
10005efc:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10005f02:	50                   	push   eax
10005f03:	e8 fc ff ff ff       	call   10005f04 <begin(void*)+0xe31>	10005f04: R_386_PC32	strcat
10005f08:	83 c4 10             	add    esp,0x10
10005f0b:	83 ec 08             	sub    esp,0x8
10005f0e:	68 a0 a5 00 10       	push   0x1000a5a0	10005f0f: R_386_32	.text
10005f13:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10005f19:	50                   	push   eax
10005f1a:	e8 fc ff ff ff       	call   10005f1b <begin(void*)+0xe48>	10005f1b: R_386_PC32	strcat
10005f1f:	83 c4 10             	add    esp,0x10
10005f22:	83 ec 08             	sub    esp,0x8
10005f25:	68 92 ad 00 10       	push   0x1000ad92	10005f26: R_386_32	.text
10005f2a:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005f30:	50                   	push   eax
10005f31:	e8 fc ff ff ff       	call   10005f32 <begin(void*)+0xe5f>	10005f32: R_386_PC32	strcpy
10005f36:	83 c4 10             	add    esp,0x10
10005f39:	83 ec 08             	sub    esp,0x8
10005f3c:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10005f42:	50                   	push   eax
10005f43:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005f49:	50                   	push   eax
10005f4a:	e8 fc ff ff ff       	call   10005f4b <begin(void*)+0xe78>	10005f4b: R_386_PC32	strcat
10005f4f:	83 c4 10             	add    esp,0x10
10005f52:	83 ec 08             	sub    esp,0x8
10005f55:	68 e8 b0 00 10       	push   0x1000b0e8	10005f56: R_386_32	.text
10005f5a:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005f60:	50                   	push   eax
10005f61:	e8 fc ff ff ff       	call   10005f62 <begin(void*)+0xe8f>	10005f62: R_386_PC32	strcat
10005f66:	83 c4 10             	add    esp,0x10
10005f69:	83 ec 08             	sub    esp,0x8
10005f6c:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005f72:	50                   	push   eax
10005f73:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005f76:	e8 fc ff ff ff       	call   10005f77 <begin(void*)+0xea4>	10005f77: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005f7b:	83 c4 10             	add    esp,0x10
10005f7e:	83 ec 04             	sub    esp,0x4
10005f81:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
10005f87:	52                   	push   edx
10005f88:	50                   	push   eax
10005f89:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005f8c:	e8 fc ff ff ff       	call   10005f8d <begin(void*)+0xeba>	10005f8d: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005f91:	83 c4 10             	add    esp,0x10
10005f94:	83 ec 08             	sub    esp,0x8
10005f97:	68 96 a5 00 10       	push   0x1000a596	10005f98: R_386_32	.text
10005f9c:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10005fa2:	50                   	push   eax
10005fa3:	e8 fc ff ff ff       	call   10005fa4 <begin(void*)+0xed1>	10005fa4: R_386_PC32	strcpy
10005fa8:	83 c4 10             	add    esp,0x10
10005fab:	83 ec 08             	sub    esp,0x8
10005fae:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10005fb4:	50                   	push   eax
10005fb5:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10005fbb:	50                   	push   eax
10005fbc:	e8 fc ff ff ff       	call   10005fbd <begin(void*)+0xeea>	10005fbd: R_386_PC32	strcat
10005fc1:	83 c4 10             	add    esp,0x10
10005fc4:	83 ec 08             	sub    esp,0x8
10005fc7:	68 a9 a5 00 10       	push   0x1000a5a9	10005fc8: R_386_32	.text
10005fcc:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10005fd2:	50                   	push   eax
10005fd3:	e8 fc ff ff ff       	call   10005fd4 <begin(void*)+0xf01>	10005fd4: R_386_PC32	strcat
10005fd8:	83 c4 10             	add    esp,0x10
10005fdb:	83 ec 08             	sub    esp,0x8
10005fde:	68 92 ad 00 10       	push   0x1000ad92	10005fdf: R_386_32	.text
10005fe3:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005fe9:	50                   	push   eax
10005fea:	e8 fc ff ff ff       	call   10005feb <begin(void*)+0xf18>	10005feb: R_386_PC32	strcpy
10005fef:	83 c4 10             	add    esp,0x10
10005ff2:	83 ec 08             	sub    esp,0x8
10005ff5:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10005ffb:	50                   	push   eax
10005ffc:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10006002:	50                   	push   eax
10006003:	e8 fc ff ff ff       	call   10006004 <begin(void*)+0xf31>	10006004: R_386_PC32	strcat
10006008:	83 c4 10             	add    esp,0x10
1000600b:	83 ec 08             	sub    esp,0x8
1000600e:	68 f1 b0 00 10       	push   0x1000b0f1	1000600f: R_386_32	.text
10006013:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10006019:	50                   	push   eax
1000601a:	e8 fc ff ff ff       	call   1000601b <begin(void*)+0xf48>	1000601b: R_386_PC32	strcat
1000601f:	83 c4 10             	add    esp,0x10
10006022:	83 ec 08             	sub    esp,0x8
10006025:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
1000602b:	50                   	push   eax
1000602c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000602f:	e8 fc ff ff ff       	call   10006030 <begin(void*)+0xf5d>	10006030: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006034:	83 c4 10             	add    esp,0x10
10006037:	83 ec 04             	sub    esp,0x4
1000603a:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
10006040:	52                   	push   edx
10006041:	50                   	push   eax
10006042:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006045:	e8 fc ff ff ff       	call   10006046 <begin(void*)+0xf73>	10006046: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000604a:	83 c4 10             	add    esp,0x10
1000604d:	83 ec 08             	sub    esp,0x8
10006050:	68 96 a5 00 10       	push   0x1000a596	10006051: R_386_32	.text
10006055:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000605b:	50                   	push   eax
1000605c:	e8 fc ff ff ff       	call   1000605d <begin(void*)+0xf8a>	1000605d: R_386_PC32	strcpy
10006061:	83 c4 10             	add    esp,0x10
10006064:	83 ec 08             	sub    esp,0x8
10006067:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
1000606d:	50                   	push   eax
1000606e:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006074:	50                   	push   eax
10006075:	e8 fc ff ff ff       	call   10006076 <begin(void*)+0xfa3>	10006076: R_386_PC32	strcat
1000607a:	83 c4 10             	add    esp,0x10
1000607d:	83 ec 08             	sub    esp,0x8
10006080:	68 b4 a5 00 10       	push   0x1000a5b4	10006081: R_386_32	.text
10006085:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000608b:	50                   	push   eax
1000608c:	e8 fc ff ff ff       	call   1000608d <begin(void*)+0xfba>	1000608d: R_386_PC32	strcat
10006091:	83 c4 10             	add    esp,0x10
10006094:	83 ec 08             	sub    esp,0x8
10006097:	68 92 ad 00 10       	push   0x1000ad92	10006098: R_386_32	.text
1000609c:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100060a2:	50                   	push   eax
100060a3:	e8 fc ff ff ff       	call   100060a4 <begin(void*)+0xfd1>	100060a4: R_386_PC32	strcpy
100060a8:	83 c4 10             	add    esp,0x10
100060ab:	83 ec 08             	sub    esp,0x8
100060ae:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
100060b4:	50                   	push   eax
100060b5:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100060bb:	50                   	push   eax
100060bc:	e8 fc ff ff ff       	call   100060bd <begin(void*)+0xfea>	100060bd: R_386_PC32	strcat
100060c1:	83 c4 10             	add    esp,0x10
100060c4:	83 ec 08             	sub    esp,0x8
100060c7:	68 fc b0 00 10       	push   0x1000b0fc	100060c8: R_386_32	.text
100060cc:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100060d2:	50                   	push   eax
100060d3:	e8 fc ff ff ff       	call   100060d4 <begin(void*)+0x1001>	100060d4: R_386_PC32	strcat
100060d8:	83 c4 10             	add    esp,0x10
100060db:	83 ec 08             	sub    esp,0x8
100060de:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100060e4:	50                   	push   eax
100060e5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100060e8:	e8 fc ff ff ff       	call   100060e9 <begin(void*)+0x1016>	100060e9: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100060ed:	83 c4 10             	add    esp,0x10
100060f0:	83 ec 04             	sub    esp,0x4
100060f3:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
100060f9:	52                   	push   edx
100060fa:	50                   	push   eax
100060fb:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100060fe:	e8 fc ff ff ff       	call   100060ff <begin(void*)+0x102c>	100060ff: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006103:	83 c4 10             	add    esp,0x10
10006106:	83 ec 08             	sub    esp,0x8
10006109:	68 96 a5 00 10       	push   0x1000a596	1000610a: R_386_32	.text
1000610e:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006114:	50                   	push   eax
10006115:	e8 fc ff ff ff       	call   10006116 <begin(void*)+0x1043>	10006116: R_386_PC32	strcpy
1000611a:	83 c4 10             	add    esp,0x10
1000611d:	83 ec 08             	sub    esp,0x8
10006120:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006126:	50                   	push   eax
10006127:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000612d:	50                   	push   eax
1000612e:	e8 fc ff ff ff       	call   1000612f <begin(void*)+0x105c>	1000612f: R_386_PC32	strcat
10006133:	83 c4 10             	add    esp,0x10
10006136:	83 ec 08             	sub    esp,0x8
10006139:	68 bf a5 00 10       	push   0x1000a5bf	1000613a: R_386_32	.text
1000613e:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006144:	50                   	push   eax
10006145:	e8 fc ff ff ff       	call   10006146 <begin(void*)+0x1073>	10006146: R_386_PC32	strcat
1000614a:	83 c4 10             	add    esp,0x10
1000614d:	83 ec 08             	sub    esp,0x8
10006150:	68 92 ad 00 10       	push   0x1000ad92	10006151: R_386_32	.text
10006155:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
1000615b:	50                   	push   eax
1000615c:	e8 fc ff ff ff       	call   1000615d <begin(void*)+0x108a>	1000615d: R_386_PC32	strcpy
10006161:	83 c4 10             	add    esp,0x10
10006164:	83 ec 08             	sub    esp,0x8
10006167:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
1000616d:	50                   	push   eax
1000616e:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10006174:	50                   	push   eax
10006175:	e8 fc ff ff ff       	call   10006176 <begin(void*)+0x10a3>	10006176: R_386_PC32	strcat
1000617a:	83 c4 10             	add    esp,0x10
1000617d:	83 ec 08             	sub    esp,0x8
10006180:	68 07 b1 00 10       	push   0x1000b107	10006181: R_386_32	.text
10006185:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
1000618b:	50                   	push   eax
1000618c:	e8 fc ff ff ff       	call   1000618d <begin(void*)+0x10ba>	1000618d: R_386_PC32	strcat
10006191:	83 c4 10             	add    esp,0x10
10006194:	83 ec 08             	sub    esp,0x8
10006197:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
1000619d:	50                   	push   eax
1000619e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100061a1:	e8 fc ff ff ff       	call   100061a2 <begin(void*)+0x10cf>	100061a2: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100061a6:	83 c4 10             	add    esp,0x10
100061a9:	83 ec 04             	sub    esp,0x4
100061ac:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
100061b2:	52                   	push   edx
100061b3:	50                   	push   eax
100061b4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100061b7:	e8 fc ff ff ff       	call   100061b8 <begin(void*)+0x10e5>	100061b8: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100061bc:	83 c4 10             	add    esp,0x10
100061bf:	83 ec 08             	sub    esp,0x8
100061c2:	68 96 a5 00 10       	push   0x1000a596	100061c3: R_386_32	.text
100061c7:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100061cd:	50                   	push   eax
100061ce:	e8 fc ff ff ff       	call   100061cf <begin(void*)+0x10fc>	100061cf: R_386_PC32	strcpy
100061d3:	83 c4 10             	add    esp,0x10
100061d6:	83 ec 08             	sub    esp,0x8
100061d9:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
100061df:	50                   	push   eax
100061e0:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100061e6:	50                   	push   eax
100061e7:	e8 fc ff ff ff       	call   100061e8 <begin(void*)+0x1115>	100061e8: R_386_PC32	strcat
100061ec:	83 c4 10             	add    esp,0x10
100061ef:	83 ec 08             	sub    esp,0x8
100061f2:	68 db a5 00 10       	push   0x1000a5db	100061f3: R_386_32	.text
100061f7:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100061fd:	50                   	push   eax
100061fe:	e8 fc ff ff ff       	call   100061ff <begin(void*)+0x112c>	100061ff: R_386_PC32	strcat
10006203:	83 c4 10             	add    esp,0x10
10006206:	83 ec 08             	sub    esp,0x8
10006209:	68 92 ad 00 10       	push   0x1000ad92	1000620a: R_386_32	.text
1000620e:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10006214:	50                   	push   eax
10006215:	e8 fc ff ff ff       	call   10006216 <begin(void*)+0x1143>	10006216: R_386_PC32	strcpy
1000621a:	83 c4 10             	add    esp,0x10
1000621d:	83 ec 08             	sub    esp,0x8
10006220:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006226:	50                   	push   eax
10006227:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
1000622d:	50                   	push   eax
1000622e:	e8 fc ff ff ff       	call   1000622f <begin(void*)+0x115c>	1000622f: R_386_PC32	strcat
10006233:	83 c4 10             	add    esp,0x10
10006236:	83 ec 08             	sub    esp,0x8
10006239:	68 11 b1 00 10       	push   0x1000b111	1000623a: R_386_32	.text
1000623e:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10006244:	50                   	push   eax
10006245:	e8 fc ff ff ff       	call   10006246 <begin(void*)+0x1173>	10006246: R_386_PC32	strcat
1000624a:	83 c4 10             	add    esp,0x10
1000624d:	83 ec 08             	sub    esp,0x8
10006250:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10006256:	50                   	push   eax
10006257:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000625a:	e8 fc ff ff ff       	call   1000625b <begin(void*)+0x1188>	1000625b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000625f:	83 c4 10             	add    esp,0x10
10006262:	83 ec 04             	sub    esp,0x4
10006265:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
1000626b:	52                   	push   edx
1000626c:	50                   	push   eax
1000626d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006270:	e8 fc ff ff ff       	call   10006271 <begin(void*)+0x119e>	10006271: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006275:	83 c4 10             	add    esp,0x10
10006278:	83 ec 08             	sub    esp,0x8
1000627b:	68 96 a5 00 10       	push   0x1000a596	1000627c: R_386_32	.text
10006280:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006286:	50                   	push   eax
10006287:	e8 fc ff ff ff       	call   10006288 <begin(void*)+0x11b5>	10006288: R_386_PC32	strcpy
1000628c:	83 c4 10             	add    esp,0x10
1000628f:	83 ec 08             	sub    esp,0x8
10006292:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006298:	50                   	push   eax
10006299:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000629f:	50                   	push   eax
100062a0:	e8 fc ff ff ff       	call   100062a1 <begin(void*)+0x11ce>	100062a1: R_386_PC32	strcat
100062a5:	83 c4 10             	add    esp,0x10
100062a8:	83 ec 08             	sub    esp,0x8
100062ab:	68 d4 a5 00 10       	push   0x1000a5d4	100062ac: R_386_32	.text
100062b0:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100062b6:	50                   	push   eax
100062b7:	e8 fc ff ff ff       	call   100062b8 <begin(void*)+0x11e5>	100062b8: R_386_PC32	strcat
100062bc:	83 c4 10             	add    esp,0x10
100062bf:	83 ec 08             	sub    esp,0x8
100062c2:	68 92 ad 00 10       	push   0x1000ad92	100062c3: R_386_32	.text
100062c7:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100062cd:	50                   	push   eax
100062ce:	e8 fc ff ff ff       	call   100062cf <begin(void*)+0x11fc>	100062cf: R_386_PC32	strcpy
100062d3:	83 c4 10             	add    esp,0x10
100062d6:	83 ec 08             	sub    esp,0x8
100062d9:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
100062df:	50                   	push   eax
100062e0:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100062e6:	50                   	push   eax
100062e7:	e8 fc ff ff ff       	call   100062e8 <begin(void*)+0x1215>	100062e8: R_386_PC32	strcat
100062ec:	83 c4 10             	add    esp,0x10
100062ef:	83 ec 08             	sub    esp,0x8
100062f2:	68 19 b1 00 10       	push   0x1000b119	100062f3: R_386_32	.text
100062f7:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100062fd:	50                   	push   eax
100062fe:	e8 fc ff ff ff       	call   100062ff <begin(void*)+0x122c>	100062ff: R_386_PC32	strcat
10006303:	83 c4 10             	add    esp,0x10
10006306:	83 ec 08             	sub    esp,0x8
10006309:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
1000630f:	50                   	push   eax
10006310:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006313:	e8 fc ff ff ff       	call   10006314 <begin(void*)+0x1241>	10006314: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006318:	83 c4 10             	add    esp,0x10
1000631b:	83 ec 04             	sub    esp,0x4
1000631e:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
10006324:	52                   	push   edx
10006325:	50                   	push   eax
10006326:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006329:	e8 fc ff ff ff       	call   1000632a <begin(void*)+0x1257>	1000632a: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000632e:	83 c4 10             	add    esp,0x10
10006331:	83 ec 08             	sub    esp,0x8
10006334:	68 96 a5 00 10       	push   0x1000a596	10006335: R_386_32	.text
10006339:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000633f:	50                   	push   eax
10006340:	e8 fc ff ff ff       	call   10006341 <begin(void*)+0x126e>	10006341: R_386_PC32	strcpy
10006345:	83 c4 10             	add    esp,0x10
10006348:	83 ec 08             	sub    esp,0x8
1000634b:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006351:	50                   	push   eax
10006352:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006358:	50                   	push   eax
10006359:	e8 fc ff ff ff       	call   1000635a <begin(void*)+0x1287>	1000635a: R_386_PC32	strcat
1000635e:	83 c4 10             	add    esp,0x10
10006361:	83 ec 08             	sub    esp,0x8
10006364:	68 c9 a5 00 10       	push   0x1000a5c9	10006365: R_386_32	.text
10006369:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000636f:	50                   	push   eax
10006370:	e8 fc ff ff ff       	call   10006371 <begin(void*)+0x129e>	10006371: R_386_PC32	strcat
10006375:	83 c4 10             	add    esp,0x10
10006378:	83 ec 08             	sub    esp,0x8
1000637b:	68 92 ad 00 10       	push   0x1000ad92	1000637c: R_386_32	.text
10006380:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10006386:	50                   	push   eax
10006387:	e8 fc ff ff ff       	call   10006388 <begin(void*)+0x12b5>	10006388: R_386_PC32	strcpy
1000638c:	83 c4 10             	add    esp,0x10
1000638f:	83 ec 08             	sub    esp,0x8
10006392:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006398:	50                   	push   eax
10006399:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
1000639f:	50                   	push   eax
100063a0:	e8 fc ff ff ff       	call   100063a1 <begin(void*)+0x12ce>	100063a1: R_386_PC32	strcat
100063a5:	83 c4 10             	add    esp,0x10
100063a8:	83 ec 08             	sub    esp,0x8
100063ab:	68 20 b1 00 10       	push   0x1000b120	100063ac: R_386_32	.text
100063b0:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100063b6:	50                   	push   eax
100063b7:	e8 fc ff ff ff       	call   100063b8 <begin(void*)+0x12e5>	100063b8: R_386_PC32	strcat
100063bc:	83 c4 10             	add    esp,0x10
100063bf:	83 ec 08             	sub    esp,0x8
100063c2:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100063c8:	50                   	push   eax
100063c9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100063cc:	e8 fc ff ff ff       	call   100063cd <begin(void*)+0x12fa>	100063cd: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100063d1:	83 c4 10             	add    esp,0x10
100063d4:	83 ec 04             	sub    esp,0x4
100063d7:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
100063dd:	52                   	push   edx
100063de:	50                   	push   eax
100063df:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100063e2:	e8 fc ff ff ff       	call   100063e3 <begin(void*)+0x1310>	100063e3: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100063e7:	83 c4 10             	add    esp,0x10
100063ea:	83 ec 0c             	sub    esp,0xc
100063ed:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100063f0:	e8 fc ff ff ff       	call   100063f1 <begin(void*)+0x131e>	100063f1: R_386_PC32	CmClose(Reghive_Tag*)
100063f5:	83 c4 10             	add    esp,0x10
100063f8:	a0 00 00 00 00       	mov    al,ds:0x0	100063f9: R_386_32	createNewUserMode
100063fd:	84 c0                	test   al,al
100063ff:	0f 85 4c 08 00 00    	jne    10006c51 <begin(void*)+0x1b7e>
10006405:	a1 00 00 00 00       	mov    eax,ds:0x0	10006406: R_386_32	Krnl::computer
1000640a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
10006410:	a1 00 00 00 00       	mov    eax,ds:0x0	10006411: R_386_32	Krnl::computer
10006415:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
1000641b:	8b 00                	mov    eax,DWORD PTR [eax]
1000641d:	83 c0 24             	add    eax,0x24
10006420:	8b 00                	mov    eax,DWORD PTR [eax]
10006422:	83 ec 0c             	sub    esp,0xc
10006425:	52                   	push   edx
10006426:	ff d0                	call   eax
10006428:	83 c4 10             	add    esp,0x10
1000642b:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
1000642e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000642f: R_386_32	tzsel
10006433:	83 ec 0c             	sub    esp,0xc
10006436:	50                   	push   eax
10006437:	e8 fc ff ff ff       	call   10006438 <begin(void*)+0x1365>	10006438: R_386_PC32	KeSetTimezone(int)
1000643c:	83 c4 10             	add    esp,0x10
1000643f:	a1 00 00 00 00       	mov    eax,ds:0x0	10006440: R_386_32	Krnl::computer
10006444:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
1000644a:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
1000644d:	ba 00 00 00 00       	mov    edx,0x0
10006452:	83 ec 04             	sub    esp,0x4
10006455:	52                   	push   edx
10006456:	50                   	push   eax
10006457:	51                   	push   ecx
10006458:	e8 fc ff ff ff       	call   10006459 <begin(void*)+0x1386>	10006459: R_386_PC32	Clock::setTimeInSecondsLocal(unsigned long long)
1000645d:	83 c4 10             	add    esp,0x10
10006460:	83 ec 0c             	sub    esp,0xc
10006463:	68 2c b1 00 10       	push   0x1000b12c	10006464: R_386_32	.text
10006468:	e8 fc ff ff ff       	call   10006469 <begin(void*)+0x1396>	10006469: R_386_PC32	Dbg::kprintf(char const*, ...)
1000646d:	83 c4 10             	add    esp,0x10
10006470:	a1 00 00 00 00       	mov    eax,ds:0x0	10006471: R_386_32	term
10006475:	83 ec 0c             	sub    esp,0xc
10006478:	50                   	push   eax
10006479:	e8 fc ff ff ff       	call   1000647a <begin(void*)+0x13a7>	1000647a: R_386_PC32	setActiveTerminal(VgaText*)
1000647e:	83 c4 10             	add    esp,0x10
10006481:	e8 fc ff ff ff       	call   10006482 <begin(void*)+0x13af>	10006482: R_386_PC32	drawBootScreen()
10006486:	83 ec 0c             	sub    esp,0xc
10006489:	68 c5 ab 00 10       	push   0x1000abc5	1000648a: R_386_32	.text
1000648e:	6a 0d                	push   0xd
10006490:	6a 32                	push   0x32
10006492:	6a 05                	push   0x5
10006494:	6a 16                	push   0x16
10006496:	e8 fc ff ff ff       	call   10006497 <begin(void*)+0x13c4>	10006497: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000649b:	83 c4 20             	add    esp,0x20
1000649e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000649f: R_386_32	term
100064a3:	83 ec 04             	sub    esp,0x4
100064a6:	6a 08                	push   0x8
100064a8:	6a 18                	push   0x18
100064aa:	50                   	push   eax
100064ab:	e8 fc ff ff ff       	call   100064ac <begin(void*)+0x13d9>	100064ac: R_386_PC32	VgaText::setCursor(int, int)
100064b0:	83 c4 10             	add    esp,0x10
100064b3:	a1 00 00 00 00       	mov    eax,ds:0x0	100064b4: R_386_32	term
100064b8:	83 ec 08             	sub    esp,0x8
100064bb:	68 54 b1 00 10       	push   0x1000b154	100064bc: R_386_32	.text
100064c0:	50                   	push   eax
100064c1:	e8 fc ff ff ff       	call   100064c2 <begin(void*)+0x13ef>	100064c2: R_386_PC32	VgaText::puts(char const*)
100064c6:	83 c4 10             	add    esp,0x10
100064c9:	a1 00 00 00 00       	mov    eax,ds:0x0	100064ca: R_386_32	term
100064ce:	83 ec 04             	sub    esp,0x4
100064d1:	6a 0a                	push   0xa
100064d3:	6a 18                	push   0x18
100064d5:	50                   	push   eax
100064d6:	e8 fc ff ff ff       	call   100064d7 <begin(void*)+0x1404>	100064d7: R_386_PC32	VgaText::setCursor(int, int)
100064db:	83 c4 10             	add    esp,0x10
100064de:	a1 00 00 00 00       	mov    eax,ds:0x0	100064df: R_386_32	term
100064e3:	83 ec 08             	sub    esp,0x8
100064e6:	68 7c b1 00 10       	push   0x1000b17c	100064e7: R_386_32	.text
100064eb:	50                   	push   eax
100064ec:	e8 fc ff ff ff       	call   100064ed <begin(void*)+0x141a>	100064ed: R_386_PC32	VgaText::puts(char const*)
100064f1:	83 c4 10             	add    esp,0x10
100064f4:	a1 00 00 00 00       	mov    eax,ds:0x0	100064f5: R_386_32	term
100064f9:	83 ec 04             	sub    esp,0x4
100064fc:	6a 0b                	push   0xb
100064fe:	6a 18                	push   0x18
10006500:	50                   	push   eax
10006501:	e8 fc ff ff ff       	call   10006502 <begin(void*)+0x142f>	10006502: R_386_PC32	VgaText::setCursor(int, int)
10006506:	83 c4 10             	add    esp,0x10
10006509:	a1 00 00 00 00       	mov    eax,ds:0x0	1000650a: R_386_32	term
1000650e:	83 ec 08             	sub    esp,0x8
10006511:	68 a8 b1 00 10       	push   0x1000b1a8	10006512: R_386_32	.text
10006516:	50                   	push   eax
10006517:	e8 fc ff ff ff       	call   10006518 <begin(void*)+0x1445>	10006518: R_386_PC32	VgaText::puts(char const*)
1000651c:	83 c4 10             	add    esp,0x10
1000651f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006521: R_386_32	installKey
10006526:	a0 00 00 00 00       	mov    al,ds:0x0	10006527: R_386_32	installKey
1000652b:	84 c0                	test   al,al
1000652d:	0f 94 c0             	sete   al
10006530:	84 c0                	test   al,al
10006532:	74 02                	je     10006536 <begin(void*)+0x1463>
10006534:	eb f0                	jmp    10006526 <begin(void*)+0x1453>
10006536:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006538: R_386_32	installKey
1000653d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000653e: R_386_32	term
10006542:	83 ec 04             	sub    esp,0x4
10006545:	6a 0c                	push   0xc
10006547:	6a 18                	push   0x18
10006549:	50                   	push   eax
1000654a:	e8 fc ff ff ff       	call   1000654b <begin(void*)+0x1478>	1000654b: R_386_PC32	VgaText::setCursor(int, int)
1000654f:	83 c4 10             	add    esp,0x10
10006552:	e8 fc ff ff ff       	call   10006553 <begin(void*)+0x1480>	10006553: R_386_PC32	KeRestart()
10006557:	e9 04 0e 00 00       	jmp    10007360 <begin(void*)+0x228d>
1000655c:	e8 fc ff ff ff       	call   1000655d <begin(void*)+0x148a>	1000655d: R_386_PC32	KeLoadTimezone()
10006561:	e8 fc ff ff ff       	call   10006562 <begin(void*)+0x148f>	10006562: R_386_PC32	KeInitialiseLocale()
10006566:	83 ec 0c             	sub    esp,0xc
10006569:	68 54 ad 00 10       	push   0x1000ad54	1000656a: R_386_32	.text
1000656e:	e8 fc ff ff ff       	call   1000656f <begin(void*)+0x149c>	1000656f: R_386_PC32	CmOpen(char const*)
10006573:	83 c4 10             	add    esp,0x10
10006576:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10006579:	83 ec 08             	sub    esp,0x8
1000657c:	68 0e af 00 10       	push   0x1000af0e	1000657d: R_386_32	.text
10006581:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006584:	e8 fc ff ff ff       	call   10006585 <begin(void*)+0x14b2>	10006585: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006589:	83 c4 10             	add    esp,0x10
1000658c:	83 ec 04             	sub    esp,0x4
1000658f:	8d 95 d8 fc ff ff    	lea    edx,[ebp-0x328]
10006595:	52                   	push   edx
10006596:	50                   	push   eax
10006597:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000659a:	e8 fc ff ff ff       	call   1000659b <begin(void*)+0x14c8>	1000659b: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
1000659f:	83 c4 10             	add    esp,0x10
100065a2:	83 ec 08             	sub    esp,0x8
100065a5:	68 ba b1 00 10       	push   0x1000b1ba	100065a6: R_386_32	.text
100065aa:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100065ad:	e8 fc ff ff ff       	call   100065ae <begin(void*)+0x14db>	100065ae: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100065b2:	83 c4 10             	add    esp,0x10
100065b5:	83 ec 04             	sub    esp,0x4
100065b8:	8d 95 d0 fc ff ff    	lea    edx,[ebp-0x330]
100065be:	52                   	push   edx
100065bf:	50                   	push   eax
100065c0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100065c3:	e8 fc ff ff ff       	call   100065c4 <begin(void*)+0x14f1>	100065c4: R_386_PC32	CmGetInteger(Reghive_Tag*, int, unsigned long long*)
100065c8:	83 c4 10             	add    esp,0x10
100065cb:	83 ec 0c             	sub    esp,0xc
100065ce:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100065d1:	e8 fc ff ff ff       	call   100065d2 <begin(void*)+0x14ff>	100065d2: R_386_PC32	CmClose(Reghive_Tag*)
100065d6:	83 c4 10             	add    esp,0x10
100065d9:	83 ec 0c             	sub    esp,0xc
100065dc:	8d 85 d8 fc ff ff    	lea    eax,[ebp-0x328]
100065e2:	50                   	push   eax
100065e3:	e8 fc ff ff ff       	call   100065e4 <begin(void*)+0x1511>	100065e4: R_386_PC32	checkExtendedKey(char*)
100065e8:	83 c4 10             	add    esp,0x10
100065eb:	85 c0                	test   eax,eax
100065ed:	0f 94 c0             	sete   al
100065f0:	84 c0                	test   al,al
100065f2:	0f 84 bd 01 00 00    	je     100067b5 <begin(void*)+0x16e2>
100065f8:	83 ec 0c             	sub    esp,0xc
100065fb:	6a 01                	push   0x1
100065fd:	e8 fc ff ff ff       	call   100065fe <begin(void*)+0x152b>	100065fe: R_386_PC32	firstRun(bool)
10006602:	83 c4 10             	add    esp,0x10
10006605:	83 ec 0c             	sub    esp,0xc
10006608:	68 54 ad 00 10       	push   0x1000ad54	10006609: R_386_32	.text
1000660d:	e8 fc ff ff ff       	call   1000660e <begin(void*)+0x153b>	1000660e: R_386_PC32	CmOpen(char const*)
10006612:	83 c4 10             	add    esp,0x10
10006615:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10006618:	83 ec 04             	sub    esp,0x4
1000661b:	68 79 ad 00 10       	push   0x1000ad79	1000661c: R_386_32	.text
10006620:	6a 00                	push   0x0
10006622:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006625:	e8 fc ff ff ff       	call   10006626 <begin(void*)+0x1553>	10006626: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000662a:	83 c4 10             	add    esp,0x10
1000662d:	83 ec 08             	sub    esp,0x8
10006630:	68 79 ad 00 10       	push   0x1000ad79	10006631: R_386_32	.text
10006635:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006638:	e8 fc ff ff ff       	call   10006639 <begin(void*)+0x1566>	10006639: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000663d:	83 c4 10             	add    esp,0x10
10006640:	83 ec 08             	sub    esp,0x8
10006643:	50                   	push   eax
10006644:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006647:	e8 fc ff ff ff       	call   10006648 <begin(void*)+0x1575>	10006648: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000664c:	83 c4 10             	add    esp,0x10
1000664f:	83 ec 04             	sub    esp,0x4
10006652:	68 b3 ad 00 10       	push   0x1000adb3	10006653: R_386_32	.text
10006657:	50                   	push   eax
10006658:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000665b:	e8 fc ff ff ff       	call   1000665c <begin(void*)+0x1589>	1000665c: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10006660:	83 c4 10             	add    esp,0x10
10006663:	83 ec 08             	sub    esp,0x8
10006666:	68 2a ae 00 10       	push   0x1000ae2a	10006667: R_386_32	.text
1000666b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000666e:	e8 fc ff ff ff       	call   1000666f <begin(void*)+0x159c>	1000666f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006673:	83 c4 10             	add    esp,0x10
10006676:	83 ec 08             	sub    esp,0x8
10006679:	50                   	push   eax
1000667a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000667d:	e8 fc ff ff ff       	call   1000667e <begin(void*)+0x15ab>	1000667e: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006682:	83 c4 10             	add    esp,0x10
10006685:	83 ec 04             	sub    esp,0x4
10006688:	68 44 ae 00 10       	push   0x1000ae44	10006689: R_386_32	.text
1000668d:	50                   	push   eax
1000668e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006691:	e8 fc ff ff ff       	call   10006692 <begin(void*)+0x15bf>	10006692: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006696:	83 c4 10             	add    esp,0x10
10006699:	83 ec 08             	sub    esp,0x8
1000669c:	68 0e af 00 10       	push   0x1000af0e	1000669d: R_386_32	.text
100066a1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100066a4:	e8 fc ff ff ff       	call   100066a5 <begin(void*)+0x15d2>	100066a5: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100066a9:	83 c4 10             	add    esp,0x10
100066ac:	83 ec 04             	sub    esp,0x4
100066af:	68 00 00 00 00       	push   0x0	100066b0: R_386_32	pkeybuf
100066b4:	50                   	push   eax
100066b5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100066b8:	e8 fc ff ff ff       	call   100066b9 <begin(void*)+0x15e6>	100066b9: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100066bd:	83 c4 10             	add    esp,0x10
100066c0:	83 ec 0c             	sub    esp,0xc
100066c3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100066c6:	e8 fc ff ff ff       	call   100066c7 <begin(void*)+0x15f4>	100066c7: R_386_PC32	CmClose(Reghive_Tag*)
100066cb:	83 c4 10             	add    esp,0x10
100066ce:	a1 00 00 00 00       	mov    eax,ds:0x0	100066cf: R_386_32	term
100066d3:	83 ec 0c             	sub    esp,0xc
100066d6:	50                   	push   eax
100066d7:	e8 fc ff ff ff       	call   100066d8 <begin(void*)+0x1605>	100066d8: R_386_PC32	setActiveTerminal(VgaText*)
100066dc:	83 c4 10             	add    esp,0x10
100066df:	e8 fc ff ff ff       	call   100066e0 <begin(void*)+0x160d>	100066e0: R_386_PC32	drawBootScreen()
100066e4:	83 ec 0c             	sub    esp,0xc
100066e7:	68 ce b1 00 10       	push   0x1000b1ce	100066e8: R_386_32	.text
100066ec:	6a 0d                	push   0xd
100066ee:	6a 32                	push   0x32
100066f0:	6a 05                	push   0x5
100066f2:	6a 16                	push   0x16
100066f4:	e8 fc ff ff ff       	call   100066f5 <begin(void*)+0x1622>	100066f5: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100066f9:	83 c4 20             	add    esp,0x20
100066fc:	a1 00 00 00 00       	mov    eax,ds:0x0	100066fd: R_386_32	term
10006701:	83 ec 04             	sub    esp,0x4
10006704:	6a 08                	push   0x8
10006706:	6a 18                	push   0x18
10006708:	50                   	push   eax
10006709:	e8 fc ff ff ff       	call   1000670a <begin(void*)+0x1637>	1000670a: R_386_PC32	VgaText::setCursor(int, int)
1000670e:	83 c4 10             	add    esp,0x10
10006711:	a1 00 00 00 00       	mov    eax,ds:0x0	10006712: R_386_32	term
10006716:	83 ec 08             	sub    esp,0x8
10006719:	68 e4 b1 00 10       	push   0x1000b1e4	1000671a: R_386_32	.text
1000671e:	50                   	push   eax
1000671f:	e8 fc ff ff ff       	call   10006720 <begin(void*)+0x164d>	10006720: R_386_PC32	VgaText::puts(char const*)
10006724:	83 c4 10             	add    esp,0x10
10006727:	a1 00 00 00 00       	mov    eax,ds:0x0	10006728: R_386_32	term
1000672c:	83 ec 04             	sub    esp,0x4
1000672f:	6a 0a                	push   0xa
10006731:	6a 18                	push   0x18
10006733:	50                   	push   eax
10006734:	e8 fc ff ff ff       	call   10006735 <begin(void*)+0x1662>	10006735: R_386_PC32	VgaText::setCursor(int, int)
10006739:	83 c4 10             	add    esp,0x10
1000673c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000673d: R_386_32	term
10006741:	83 ec 08             	sub    esp,0x8
10006744:	68 7c b1 00 10       	push   0x1000b17c	10006745: R_386_32	.text
10006749:	50                   	push   eax
1000674a:	e8 fc ff ff ff       	call   1000674b <begin(void*)+0x1678>	1000674b: R_386_PC32	VgaText::puts(char const*)
1000674f:	83 c4 10             	add    esp,0x10
10006752:	a1 00 00 00 00       	mov    eax,ds:0x0	10006753: R_386_32	term
10006757:	83 ec 04             	sub    esp,0x4
1000675a:	6a 0b                	push   0xb
1000675c:	6a 18                	push   0x18
1000675e:	50                   	push   eax
1000675f:	e8 fc ff ff ff       	call   10006760 <begin(void*)+0x168d>	10006760: R_386_PC32	VgaText::setCursor(int, int)
10006764:	83 c4 10             	add    esp,0x10
10006767:	a1 00 00 00 00       	mov    eax,ds:0x0	10006768: R_386_32	term
1000676c:	83 ec 08             	sub    esp,0x8
1000676f:	68 a8 b1 00 10       	push   0x1000b1a8	10006770: R_386_32	.text
10006774:	50                   	push   eax
10006775:	e8 fc ff ff ff       	call   10006776 <begin(void*)+0x16a3>	10006776: R_386_PC32	VgaText::puts(char const*)
1000677a:	83 c4 10             	add    esp,0x10
1000677d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000677f: R_386_32	installKey
10006784:	a0 00 00 00 00       	mov    al,ds:0x0	10006785: R_386_32	installKey
10006789:	84 c0                	test   al,al
1000678b:	0f 94 c0             	sete   al
1000678e:	84 c0                	test   al,al
10006790:	74 02                	je     10006794 <begin(void*)+0x16c1>
10006792:	eb f0                	jmp    10006784 <begin(void*)+0x16b1>
10006794:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006796: R_386_32	installKey
1000679b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000679c: R_386_32	term
100067a0:	83 ec 04             	sub    esp,0x4
100067a3:	6a 0c                	push   0xc
100067a5:	6a 18                	push   0x18
100067a7:	50                   	push   eax
100067a8:	e8 fc ff ff ff       	call   100067a9 <begin(void*)+0x16d6>	100067a9: R_386_PC32	VgaText::setCursor(int, int)
100067ad:	83 c4 10             	add    esp,0x10
100067b0:	e8 fc ff ff ff       	call   100067b1 <begin(void*)+0x16de>	100067b1: R_386_PC32	KeRestart()
100067b5:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100067b7: R_386_32	showSidebar
100067bc:	83 ec 0c             	sub    esp,0xc
100067bf:	68 84 01 00 00       	push   0x184
100067c4:	e8 fc ff ff ff       	call   100067c5 <begin(void*)+0x16f2>	100067c5: R_386_PC32	operator new(unsigned long)
100067c9:	83 c4 10             	add    esp,0x10
100067cc:	89 c3                	mov    ebx,eax
100067ce:	83 ec 08             	sub    esp,0x8
100067d1:	68 dc a7 00 10       	push   0x1000a7dc	100067d2: R_386_32	.text
100067d6:	53                   	push   ebx
100067d7:	e8 fc ff ff ff       	call   100067d8 <begin(void*)+0x1705>	100067d8: R_386_PC32	VgaText::VgaText(char const*)
100067dc:	83 c4 10             	add    esp,0x10
100067df:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100067e1: R_386_32	term
100067e5:	a1 00 00 00 00       	mov    eax,ds:0x0	100067e6: R_386_32	term
100067ea:	83 ec 0c             	sub    esp,0xc
100067ed:	50                   	push   eax
100067ee:	e8 fc ff ff ff       	call   100067ef <begin(void*)+0x171c>	100067ef: R_386_PC32	setActiveTerminal(VgaText*)
100067f3:	83 c4 10             	add    esp,0x10
100067f6:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100067fd:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10006804:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006806: R_386_32	installKey
1000680b:	83 ec 04             	sub    esp,0x4
1000680e:	68 80 00 00 00       	push   0x80
10006813:	6a 00                	push   0x0
10006815:	8d 85 48 f9 ff ff    	lea    eax,[ebp-0x6b8]
1000681b:	50                   	push   eax
1000681c:	e8 fc ff ff ff       	call   1000681d <begin(void*)+0x174a>	1000681d: R_386_PC32	memset
10006821:	83 c4 10             	add    esp,0x10
10006824:	83 ec 04             	sub    esp,0x4
10006827:	68 80 00 00 00       	push   0x80
1000682c:	6a 00                	push   0x0
1000682e:	8d 85 c8 f9 ff ff    	lea    eax,[ebp-0x638]
10006834:	50                   	push   eax
10006835:	e8 fc ff ff ff       	call   10006836 <begin(void*)+0x1763>	10006836: R_386_PC32	memset
1000683a:	83 c4 10             	add    esp,0x10
1000683d:	83 ec 0c             	sub    esp,0xc
10006840:	68 54 ad 00 10       	push   0x1000ad54	10006841: R_386_32	.text
10006845:	e8 fc ff ff ff       	call   10006846 <begin(void*)+0x1773>	10006846: R_386_PC32	CmOpen(char const*)
1000684a:	83 c4 10             	add    esp,0x10
1000684d:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10006850:	83 ec 08             	sub    esp,0x8
10006853:	68 4f ae 00 10       	push   0x1000ae4f	10006854: R_386_32	.text
10006858:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000685b:	e8 fc ff ff ff       	call   1000685c <begin(void*)+0x1789>	1000685c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006860:	83 c4 10             	add    esp,0x10
10006863:	83 ec 08             	sub    esp,0x8
10006866:	50                   	push   eax
10006867:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000686a:	e8 fc ff ff ff       	call   1000686b <begin(void*)+0x1798>	1000686b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000686f:	83 c4 10             	add    esp,0x10
10006872:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10006875:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10006879:	0f 84 88 01 00 00    	je     10006a07 <begin(void*)+0x1934>
1000687f:	83 ec 04             	sub    esp,0x4
10006882:	6a 50                	push   0x50
10006884:	6a 00                	push   0x0
10006886:	8d 85 a8 f8 ff ff    	lea    eax,[ebp-0x758]
1000688c:	50                   	push   eax
1000688d:	e8 fc ff ff ff       	call   1000688e <begin(void*)+0x17bb>	1000688e: R_386_PC32	memset
10006892:	83 c4 10             	add    esp,0x10
10006895:	83 ec 04             	sub    esp,0x4
10006898:	8d 85 a8 f8 ff ff    	lea    eax,[ebp-0x758]
1000689e:	50                   	push   eax
1000689f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100068a2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100068a5:	e8 fc ff ff ff       	call   100068a6 <begin(void*)+0x17d3>	100068a6: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
100068aa:	83 c4 10             	add    esp,0x10
100068ad:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
100068b0:	83 7d 9c 4e          	cmp    DWORD PTR [ebp-0x64],0x4e
100068b4:	0f 85 34 01 00 00    	jne    100069ee <begin(void*)+0x191b>
100068ba:	83 ec 0c             	sub    esp,0xc
100068bd:	6a 50                	push   0x50
100068bf:	e8 fc ff ff ff       	call   100068c0 <begin(void*)+0x17ed>	100068c0: R_386_PC32	malloc
100068c4:	83 c4 10             	add    esp,0x10
100068c7:	89 c2                	mov    edx,eax
100068c9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100068cc:	89 94 85 c8 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x638],edx
100068d3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100068d6:	8b 84 85 c8 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x638]
100068dd:	83 ec 08             	sub    esp,0x8
100068e0:	8d 95 a8 f8 ff ff    	lea    edx,[ebp-0x758]
100068e6:	52                   	push   edx
100068e7:	50                   	push   eax
100068e8:	e8 fc ff ff ff       	call   100068e9 <begin(void*)+0x1816>	100068e9: R_386_PC32	strcpy
100068ed:	83 c4 10             	add    esp,0x10
100068f0:	83 ec 08             	sub    esp,0x8
100068f3:	68 92 ad 00 10       	push   0x1000ad92	100068f4: R_386_32	.text
100068f8:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100068fe:	50                   	push   eax
100068ff:	e8 fc ff ff ff       	call   10006900 <begin(void*)+0x182d>	10006900: R_386_PC32	strcpy
10006904:	83 c4 10             	add    esp,0x10
10006907:	83 ec 08             	sub    esp,0x8
1000690a:	8d 85 a8 f8 ff ff    	lea    eax,[ebp-0x758]
10006910:	50                   	push   eax
10006911:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006917:	50                   	push   eax
10006918:	e8 fc ff ff ff       	call   10006919 <begin(void*)+0x1846>	10006919: R_386_PC32	strcat
1000691d:	83 c4 10             	add    esp,0x10
10006920:	83 ec 08             	sub    esp,0x8
10006923:	68 db b0 00 10       	push   0x1000b0db	10006924: R_386_32	.text
10006928:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000692e:	50                   	push   eax
1000692f:	e8 fc ff ff ff       	call   10006930 <begin(void*)+0x185d>	10006930: R_386_PC32	strcat
10006934:	83 c4 10             	add    esp,0x10
10006937:	83 ec 08             	sub    esp,0x8
1000693a:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006940:	50                   	push   eax
10006941:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006944:	e8 fc ff ff ff       	call   10006945 <begin(void*)+0x1872>	10006945: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006949:	83 c4 10             	add    esp,0x10
1000694c:	83 ec 04             	sub    esp,0x4
1000694f:	8d 95 a8 f8 ff ff    	lea    edx,[ebp-0x758]
10006955:	52                   	push   edx
10006956:	50                   	push   eax
10006957:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000695a:	e8 fc ff ff ff       	call   1000695b <begin(void*)+0x1888>	1000695b: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
1000695f:	83 c4 10             	add    esp,0x10
10006962:	83 ec 0c             	sub    esp,0xc
10006965:	6a 50                	push   0x50
10006967:	e8 fc ff ff ff       	call   10006968 <begin(void*)+0x1895>	10006968: R_386_PC32	malloc
1000696c:	83 c4 10             	add    esp,0x10
1000696f:	89 c2                	mov    edx,eax
10006971:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006974:	89 94 85 48 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x6b8],edx
1000697b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000697e:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10006985:	83 ec 08             	sub    esp,0x8
10006988:	68 a3 a7 00 10       	push   0x1000a7a3	10006989: R_386_32	.text
1000698d:	50                   	push   eax
1000698e:	e8 fc ff ff ff       	call   1000698f <begin(void*)+0x18bc>	1000698f: R_386_PC32	strcpy
10006993:	83 c4 10             	add    esp,0x10
10006996:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006999:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
100069a0:	83 ec 08             	sub    esp,0x8
100069a3:	8d 95 a8 f8 ff ff    	lea    edx,[ebp-0x758]
100069a9:	52                   	push   edx
100069aa:	50                   	push   eax
100069ab:	e8 fc ff ff ff       	call   100069ac <begin(void*)+0x18d9>	100069ac: R_386_PC32	strcat
100069b0:	83 c4 10             	add    esp,0x10
100069b3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100069b6:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
100069bd:	83 ec 0c             	sub    esp,0xc
100069c0:	50                   	push   eax
100069c1:	e8 fc ff ff ff       	call   100069c2 <begin(void*)+0x18ef>	100069c2: R_386_PC32	strlen
100069c6:	83 c4 10             	add    esp,0x10
100069c9:	83 f8 31             	cmp    eax,0x31
100069cc:	77 1d                	ja     100069eb <begin(void*)+0x1918>
100069ce:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100069d1:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
100069d8:	83 ec 08             	sub    esp,0x8
100069db:	68 a3 a7 00 10       	push   0x1000a7a3	100069dc: R_386_32	.text
100069e0:	50                   	push   eax
100069e1:	e8 fc ff ff ff       	call   100069e2 <begin(void*)+0x190f>	100069e2: R_386_PC32	strcat
100069e6:	83 c4 10             	add    esp,0x10
100069e9:	eb c8                	jmp    100069b3 <begin(void*)+0x18e0>
100069eb:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
100069ee:	83 ec 08             	sub    esp,0x8
100069f1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100069f4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100069f7:	e8 fc ff ff ff       	call   100069f8 <begin(void*)+0x1925>	100069f8: R_386_PC32	CmGetNext(Reghive_Tag*, int)
100069fc:	83 c4 10             	add    esp,0x10
100069ff:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10006a02:	e9 6e fe ff ff       	jmp    10006875 <begin(void*)+0x17a2>
10006a07:	83 ec 0c             	sub    esp,0xc
10006a0a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006a0d:	e8 fc ff ff ff       	call   10006a0e <begin(void*)+0x193b>	10006a0e: R_386_PC32	CmClose(Reghive_Tag*)
10006a12:	83 c4 10             	add    esp,0x10
10006a15:	83 ec 0c             	sub    esp,0xc
10006a18:	6a 50                	push   0x50
10006a1a:	e8 fc ff ff ff       	call   10006a1b <begin(void*)+0x1948>	10006a1b: R_386_PC32	malloc
10006a1f:	83 c4 10             	add    esp,0x10
10006a22:	89 c2                	mov    edx,eax
10006a24:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006a27:	89 94 85 48 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x6b8],edx
10006a2e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006a31:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10006a38:	83 ec 08             	sub    esp,0x8
10006a3b:	68 08 b2 00 10       	push   0x1000b208	10006a3c: R_386_32	.text
10006a40:	50                   	push   eax
10006a41:	e8 fc ff ff ff       	call   10006a42 <begin(void*)+0x196f>	10006a42: R_386_PC32	strcpy
10006a46:	83 c4 10             	add    esp,0x10
10006a49:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10006a4c:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10006a4e: R_386_32	guiKeyboardHandler
	10006a52: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
10006a56:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006a58: R_386_32	installKey
10006a5d:	e8 fc ff ff ff       	call   10006a5e <begin(void*)+0x198b>	10006a5e: R_386_PC32	drawBootScreen()
10006a62:	83 ec 0c             	sub    esp,0xc
10006a65:	68 3b b2 00 10       	push   0x1000b23b	10006a66: R_386_32	.text
10006a6a:	6a 10                	push   0x10
10006a6c:	6a 39                	push   0x39
10006a6e:	6a 03                	push   0x3
10006a70:	6a 0c                	push   0xc
10006a72:	e8 fc ff ff ff       	call   10006a73 <begin(void*)+0x19a0>	10006a73: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10006a77:	83 c4 20             	add    esp,0x20
10006a7a:	a1 00 00 00 00       	mov    eax,ds:0x0	10006a7b: R_386_32	term
10006a7f:	83 ec 04             	sub    esp,0x4
10006a82:	6a 06                	push   0x6
10006a84:	6a 0e                	push   0xe
10006a86:	50                   	push   eax
10006a87:	e8 fc ff ff ff       	call   10006a88 <begin(void*)+0x19b5>	10006a88: R_386_PC32	VgaText::setCursor(int, int)
10006a8c:	83 c4 10             	add    esp,0x10
10006a8f:	a1 00 00 00 00       	mov    eax,ds:0x0	10006a90: R_386_32	term
10006a94:	6a 0f                	push   0xf
10006a96:	6a 00                	push   0x0
10006a98:	68 44 b2 00 10       	push   0x1000b244	10006a99: R_386_32	.text
10006a9d:	50                   	push   eax
10006a9e:	e8 fc ff ff ff       	call   10006a9f <begin(void*)+0x19cc>	10006a9f: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006aa3:	83 c4 10             	add    esp,0x10
10006aa6:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10006aaa:	75 0c                	jne    10006ab8 <begin(void*)+0x19e5>
10006aac:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10006ab3:	e9 25 01 00 00       	jmp    10006bdd <begin(void*)+0x1b0a>
10006ab8:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10006abf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006ac2:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10006ac5:	7d 63                	jge    10006b2a <begin(void*)+0x1a57>
10006ac7:	a1 00 00 00 00       	mov    eax,ds:0x0	10006ac8: R_386_32	term
10006acc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10006acf:	83 c2 08             	add    edx,0x8
10006ad2:	83 ec 04             	sub    esp,0x4
10006ad5:	52                   	push   edx
10006ad6:	6a 0f                	push   0xf
10006ad8:	50                   	push   eax
10006ad9:	e8 fc ff ff ff       	call   10006ada <begin(void*)+0x1a07>	10006ada: R_386_PC32	VgaText::setCursor(int, int)
10006ade:	83 c4 10             	add    esp,0x10
10006ae1:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10006ae3: R_386_32	term
10006ae7:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006aea:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006aed:	75 07                	jne    10006af6 <begin(void*)+0x1a23>
10006aef:	b9 00 00 00 00       	mov    ecx,0x0
10006af4:	eb 05                	jmp    10006afb <begin(void*)+0x1a28>
10006af6:	b9 0f 00 00 00       	mov    ecx,0xf
10006afb:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006afe:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006b01:	75 07                	jne    10006b0a <begin(void*)+0x1a37>
10006b03:	ba 0f 00 00 00       	mov    edx,0xf
10006b08:	eb 05                	jmp    10006b0f <begin(void*)+0x1a3c>
10006b0a:	ba 00 00 00 00       	mov    edx,0x0
10006b0f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006b12:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10006b19:	51                   	push   ecx
10006b1a:	52                   	push   edx
10006b1b:	50                   	push   eax
10006b1c:	53                   	push   ebx
10006b1d:	e8 fc ff ff ff       	call   10006b1e <begin(void*)+0x1a4b>	10006b1e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006b22:	83 c4 10             	add    esp,0x10
10006b25:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10006b28:	eb 95                	jmp    10006abf <begin(void*)+0x19ec>
10006b2a:	a0 00 00 00 00       	mov    al,ds:0x0	10006b2b: R_386_32	installKey
10006b2f:	84 c0                	test   al,al
10006b31:	0f 94 c0             	sete   al
10006b34:	84 c0                	test   al,al
10006b36:	74 02                	je     10006b3a <begin(void*)+0x1a67>
10006b38:	eb f0                	jmp    10006b2a <begin(void*)+0x1a57>
10006b3a:	a1 00 00 00 00       	mov    eax,ds:0x0	10006b3b: R_386_32	term
10006b3f:	05 82 00 00 00       	add    eax,0x82
10006b44:	83 ec 04             	sub    esp,0x4
10006b47:	6a 04                	push   0x4
10006b49:	6a 00                	push   0x0
10006b4b:	50                   	push   eax
10006b4c:	e8 fc ff ff ff       	call   10006b4d <begin(void*)+0x1a7a>	10006b4d: R_386_PC32	memset
10006b51:	83 c4 10             	add    esp,0x10
10006b54:	a1 00 00 00 00       	mov    eax,ds:0x0	10006b55: R_386_32	term
10006b59:	05 02 01 00 00       	add    eax,0x102
10006b5e:	83 ec 04             	sub    esp,0x4
10006b61:	6a 04                	push   0x4
10006b63:	6a 00                	push   0x0
10006b65:	50                   	push   eax
10006b66:	e8 fc ff ff ff       	call   10006b67 <begin(void*)+0x1a94>	10006b67: R_386_PC32	memset
10006b6b:	83 c4 10             	add    esp,0x10
10006b6e:	a0 00 00 00 00       	mov    al,ds:0x0	10006b6f: R_386_32	installKey
10006b73:	3c 01                	cmp    al,0x1
10006b75:	0f 94 c0             	sete   al
10006b78:	84 c0                	test   al,al
10006b7a:	74 12                	je     10006b8e <begin(void*)+0x1abb>
10006b7c:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10006b7f:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10006b83:	79 39                	jns    10006bbe <begin(void*)+0x1aeb>
10006b85:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10006b8c:	eb 30                	jmp    10006bbe <begin(void*)+0x1aeb>
10006b8e:	a0 00 00 00 00       	mov    al,ds:0x0	10006b8f: R_386_32	installKey
10006b93:	3c 02                	cmp    al,0x2
10006b95:	0f 94 c0             	sete   al
10006b98:	84 c0                	test   al,al
10006b9a:	74 14                	je     10006bb0 <begin(void*)+0x1add>
10006b9c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10006b9f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006ba2:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006ba5:	7f 17                	jg     10006bbe <begin(void*)+0x1aeb>
10006ba7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006baa:	48                   	dec    eax
10006bab:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10006bae:	eb 0e                	jmp    10006bbe <begin(void*)+0x1aeb>
10006bb0:	a0 00 00 00 00       	mov    al,ds:0x0	10006bb1: R_386_32	installKey
10006bb5:	3c 0a                	cmp    al,0xa
10006bb7:	0f 94 c0             	sete   al
10006bba:	84 c0                	test   al,al
10006bbc:	75 1e                	jne    10006bdc <begin(void*)+0x1b09>
10006bbe:	83 ec 08             	sub    esp,0x8
10006bc1:	6a 00                	push   0x0
10006bc3:	68 f4 01 00 00       	push   0x1f4
10006bc8:	e8 fc ff ff ff       	call   10006bc9 <begin(void*)+0x1af6>	10006bc9: R_386_PC32	milliTenthSleep(unsigned long long)
10006bcd:	83 c4 10             	add    esp,0x10
10006bd0:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006bd2: R_386_32	installKey
10006bd7:	e9 ca fe ff ff       	jmp    10006aa6 <begin(void*)+0x19d3>
10006bdc:	90                   	nop
10006bdd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006be0:	48                   	dec    eax
10006be1:	39 45 dc             	cmp    DWORD PTR [ebp-0x24],eax
10006be4:	0f 85 af 00 00 00    	jne    10006c99 <begin(void*)+0x1bc6>
10006bea:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10006bec: R_386_32	createNewUserMode
10006bf1:	83 ec 0c             	sub    esp,0xc
10006bf4:	6a 00                	push   0x0
10006bf6:	e8 fc ff ff ff       	call   10006bf7 <begin(void*)+0x1b24>	10006bf7: R_386_PC32	firstRun(bool)
10006bfb:	83 c4 10             	add    esp,0x10
10006bfe:	a0 00 00 00 00       	mov    al,ds:0x0	10006bff: R_386_32	createNewUserMode
10006c03:	83 f0 01             	xor    eax,0x1
10006c06:	84 c0                	test   al,al
10006c08:	0f 84 20 e7 ff ff    	je     1000532e <begin(void*)+0x25b>
10006c0e:	a1 00 00 00 00       	mov    eax,ds:0x0	10006c0f: R_386_32	term
10006c13:	05 82 00 00 00       	add    eax,0x82
10006c18:	83 ec 04             	sub    esp,0x4
10006c1b:	6a 04                	push   0x4
10006c1d:	6a 00                	push   0x0
10006c1f:	50                   	push   eax
10006c20:	e8 fc ff ff ff       	call   10006c21 <begin(void*)+0x1b4e>	10006c21: R_386_PC32	memset
10006c25:	83 c4 10             	add    esp,0x10
10006c28:	a1 00 00 00 00       	mov    eax,ds:0x0	10006c29: R_386_32	term
10006c2d:	05 02 01 00 00       	add    eax,0x102
10006c32:	83 ec 04             	sub    esp,0x4
10006c35:	6a 04                	push   0x4
10006c37:	6a 00                	push   0x0
10006c39:	50                   	push   eax
10006c3a:	e8 fc ff ff ff       	call   10006c3b <begin(void*)+0x1b68>	10006c3b: R_386_PC32	memset
10006c3f:	83 c4 10             	add    esp,0x10
10006c42:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006c44: R_386_32	installKey
10006c49:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10006c4c:	e9 ac fb ff ff       	jmp    100067fd <begin(void*)+0x172a>
10006c51:	90                   	nop
10006c52:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006c54: R_386_32	createNewUserMode
10006c59:	a1 00 00 00 00       	mov    eax,ds:0x0	10006c5a: R_386_32	term
10006c5e:	05 82 00 00 00       	add    eax,0x82
10006c63:	83 ec 04             	sub    esp,0x4
10006c66:	6a 04                	push   0x4
10006c68:	6a 00                	push   0x0
10006c6a:	50                   	push   eax
10006c6b:	e8 fc ff ff ff       	call   10006c6c <begin(void*)+0x1b99>	10006c6c: R_386_PC32	memset
10006c70:	83 c4 10             	add    esp,0x10
10006c73:	a1 00 00 00 00       	mov    eax,ds:0x0	10006c74: R_386_32	term
10006c78:	05 02 01 00 00       	add    eax,0x102
10006c7d:	83 ec 04             	sub    esp,0x4
10006c80:	6a 04                	push   0x4
10006c82:	6a 00                	push   0x0
10006c84:	50                   	push   eax
10006c85:	e8 fc ff ff ff       	call   10006c86 <begin(void*)+0x1bb3>	10006c86: R_386_PC32	memset
10006c8a:	83 c4 10             	add    esp,0x10
10006c8d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006c8f: R_386_32	installKey
10006c94:	e9 64 fb ff ff       	jmp    100067fd <begin(void*)+0x172a>
10006c99:	83 ec 08             	sub    esp,0x8
10006c9c:	68 92 ad 00 10       	push   0x1000ad92	10006c9d: R_386_32	.text
10006ca1:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006ca7:	50                   	push   eax
10006ca8:	e8 fc ff ff ff       	call   10006ca9 <begin(void*)+0x1bd6>	10006ca9: R_386_PC32	strcpy
10006cad:	83 c4 10             	add    esp,0x10
10006cb0:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006cb3:	8b 84 85 c8 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x638]
10006cba:	83 ec 08             	sub    esp,0x8
10006cbd:	50                   	push   eax
10006cbe:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006cc4:	50                   	push   eax
10006cc5:	e8 fc ff ff ff       	call   10006cc6 <begin(void*)+0x1bf3>	10006cc6: R_386_PC32	strcat
10006cca:	83 c4 10             	add    esp,0x10
10006ccd:	83 ec 08             	sub    esp,0x8
10006cd0:	68 cb b0 00 10       	push   0x1000b0cb	10006cd1: R_386_32	.text
10006cd5:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006cdb:	50                   	push   eax
10006cdc:	e8 fc ff ff ff       	call   10006cdd <begin(void*)+0x1c0a>	10006cdd: R_386_PC32	strcat
10006ce1:	83 c4 10             	add    esp,0x10
10006ce4:	83 ec 0c             	sub    esp,0xc
10006ce7:	68 54 ad 00 10       	push   0x1000ad54	10006ce8: R_386_32	.text
10006cec:	e8 fc ff ff ff       	call   10006ced <begin(void*)+0x1c1a>	10006ced: R_386_PC32	CmOpen(char const*)
10006cf1:	83 c4 10             	add    esp,0x10
10006cf4:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10006cf7:	83 ec 08             	sub    esp,0x8
10006cfa:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006d00:	50                   	push   eax
10006d01:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006d04:	e8 fc ff ff ff       	call   10006d05 <begin(void*)+0x1c32>	10006d05: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006d09:	83 c4 10             	add    esp,0x10
10006d0c:	83 ec 04             	sub    esp,0x4
10006d0f:	8d 95 ca fa ff ff    	lea    edx,[ebp-0x536]
10006d15:	52                   	push   edx
10006d16:	50                   	push   eax
10006d17:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006d1a:	e8 fc ff ff ff       	call   10006d1b <begin(void*)+0x1c48>	10006d1b: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006d1f:	83 c4 10             	add    esp,0x10
10006d22:	83 ec 08             	sub    esp,0x8
10006d25:	68 92 ad 00 10       	push   0x1000ad92	10006d26: R_386_32	.text
10006d2a:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006d30:	50                   	push   eax
10006d31:	e8 fc ff ff ff       	call   10006d32 <begin(void*)+0x1c5f>	10006d32: R_386_PC32	strcpy
10006d36:	83 c4 10             	add    esp,0x10
10006d39:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006d3c:	8b 84 85 c8 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x638]
10006d43:	83 ec 08             	sub    esp,0x8
10006d46:	50                   	push   eax
10006d47:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006d4d:	50                   	push   eax
10006d4e:	e8 fc ff ff ff       	call   10006d4f <begin(void*)+0x1c7c>	10006d4f: R_386_PC32	strcat
10006d53:	83 c4 10             	add    esp,0x10
10006d56:	83 ec 08             	sub    esp,0x8
10006d59:	68 d5 b0 00 10       	push   0x1000b0d5	10006d5a: R_386_32	.text
10006d5e:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006d64:	50                   	push   eax
10006d65:	e8 fc ff ff ff       	call   10006d66 <begin(void*)+0x1c93>	10006d66: R_386_PC32	strcat
10006d6a:	83 c4 10             	add    esp,0x10
10006d6d:	83 ec 08             	sub    esp,0x8
10006d70:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006d76:	50                   	push   eax
10006d77:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006d7a:	e8 fc ff ff ff       	call   10006d7b <begin(void*)+0x1ca8>	10006d7b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006d7f:	83 c4 10             	add    esp,0x10
10006d82:	83 ec 04             	sub    esp,0x4
10006d85:	8d 95 f8 f8 ff ff    	lea    edx,[ebp-0x708]
10006d8b:	52                   	push   edx
10006d8c:	50                   	push   eax
10006d8d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006d90:	e8 fc ff ff ff       	call   10006d91 <begin(void*)+0x1cbe>	10006d91: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006d95:	83 c4 10             	add    esp,0x10
10006d98:	83 ec 0c             	sub    esp,0xc
10006d9b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006d9e:	e8 fc ff ff ff       	call   10006d9f <begin(void*)+0x1ccc>	10006d9f: R_386_PC32	CmClose(Reghive_Tag*)
10006da3:	83 c4 10             	add    esp,0x10
10006da6:	83 ec 04             	sub    esp,0x4
10006da9:	68 80 00 00 00       	push   0x80
10006dae:	6a 00                	push   0x0
10006db0:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006db6:	50                   	push   eax
10006db7:	e8 fc ff ff ff       	call   10006db8 <begin(void*)+0x1ce5>	10006db8: R_386_PC32	memset
10006dbc:	83 c4 10             	add    esp,0x10
10006dbf:	e8 fc ff ff ff       	call   10006dc0 <begin(void*)+0x1ced>	10006dc0: R_386_PC32	drawBootScreen()
10006dc4:	83 ec 08             	sub    esp,0x8
10006dc7:	6a 01                	push   0x1
10006dc9:	68 3b b2 00 10       	push   0x1000b23b	10006dca: R_386_32	.text
10006dce:	6a 10                	push   0x10
10006dd0:	6a 39                	push   0x39
10006dd2:	6a 03                	push   0x3
10006dd4:	6a 0c                	push   0xc
10006dd6:	e8 fc ff ff ff       	call   10006dd7 <begin(void*)+0x1d04>	10006dd7: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10006ddb:	83 c4 20             	add    esp,0x20
10006dde:	a1 00 00 00 00       	mov    eax,ds:0x0	10006ddf: R_386_32	term
10006de3:	83 ec 04             	sub    esp,0x4
10006de6:	6a 06                	push   0x6
10006de8:	6a 0e                	push   0xe
10006dea:	50                   	push   eax
10006deb:	e8 fc ff ff ff       	call   10006dec <begin(void*)+0x1d19>	10006dec: R_386_PC32	VgaText::setCursor(int, int)
10006df0:	83 c4 10             	add    esp,0x10
10006df3:	a1 00 00 00 00       	mov    eax,ds:0x0	10006df4: R_386_32	term
10006df8:	6a 07                	push   0x7
10006dfa:	6a 00                	push   0x0
10006dfc:	68 44 b2 00 10       	push   0x1000b244	10006dfd: R_386_32	.text
10006e01:	50                   	push   eax
10006e02:	e8 fc ff ff ff       	call   10006e03 <begin(void*)+0x1d30>	10006e03: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006e07:	83 c4 10             	add    esp,0x10
10006e0a:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10006e0e:	7e 72                	jle    10006e82 <begin(void*)+0x1daf>
10006e10:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10006e17:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006e1a:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10006e1d:	7d 63                	jge    10006e82 <begin(void*)+0x1daf>
10006e1f:	a1 00 00 00 00       	mov    eax,ds:0x0	10006e20: R_386_32	term
10006e24:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
10006e27:	83 c2 08             	add    edx,0x8
10006e2a:	83 ec 04             	sub    esp,0x4
10006e2d:	52                   	push   edx
10006e2e:	6a 0f                	push   0xf
10006e30:	50                   	push   eax
10006e31:	e8 fc ff ff ff       	call   10006e32 <begin(void*)+0x1d5f>	10006e32: R_386_PC32	VgaText::setCursor(int, int)
10006e36:	83 c4 10             	add    esp,0x10
10006e39:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10006e3b: R_386_32	term
10006e3f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006e42:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006e45:	75 07                	jne    10006e4e <begin(void*)+0x1d7b>
10006e47:	b9 00 00 00 00       	mov    ecx,0x0
10006e4c:	eb 05                	jmp    10006e53 <begin(void*)+0x1d80>
10006e4e:	b9 07 00 00 00       	mov    ecx,0x7
10006e53:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006e56:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006e59:	75 07                	jne    10006e62 <begin(void*)+0x1d8f>
10006e5b:	ba 07 00 00 00       	mov    edx,0x7
10006e60:	eb 05                	jmp    10006e67 <begin(void*)+0x1d94>
10006e62:	ba 00 00 00 00       	mov    edx,0x0
10006e67:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006e6a:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10006e71:	51                   	push   ecx
10006e72:	52                   	push   edx
10006e73:	50                   	push   eax
10006e74:	53                   	push   ebx
10006e75:	e8 fc ff ff ff       	call   10006e76 <begin(void*)+0x1da3>	10006e76: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006e7a:	83 c4 10             	add    esp,0x10
10006e7d:	ff 45 d0             	inc    DWORD PTR [ebp-0x30]
10006e80:	eb 95                	jmp    10006e17 <begin(void*)+0x1d44>
10006e82:	83 ec 0c             	sub    esp,0xc
10006e85:	68 3b b2 00 10       	push   0x1000b23b	10006e86: R_386_32	.text
10006e8a:	6a 0b                	push   0xb
10006e8c:	6a 2d                	push   0x2d
10006e8e:	6a 0a                	push   0xa
10006e90:	6a 1c                	push   0x1c
10006e92:	e8 fc ff ff ff       	call   10006e93 <begin(void*)+0x1dc0>	10006e93: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10006e97:	83 c4 20             	add    esp,0x20
10006e9a:	c6 45 cf 01          	mov    BYTE PTR [ebp-0x31],0x1
10006e9e:	83 ec 04             	sub    esp,0x4
10006ea1:	8d 85 4a fb ff ff    	lea    eax,[ebp-0x4b6]
10006ea7:	50                   	push   eax
10006ea8:	8d 85 f8 f8 ff ff    	lea    eax,[ebp-0x708]
10006eae:	50                   	push   eax
10006eaf:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006eb5:	50                   	push   eax
10006eb6:	e8 fc ff ff ff       	call   10006eb7 <begin(void*)+0x1de4>	10006eb7: R_386_PC32	bcrypt_hashpw
10006ebb:	83 c4 10             	add    esp,0x10
10006ebe:	83 ec 08             	sub    esp,0x8
10006ec1:	8d 85 4a fb ff ff    	lea    eax,[ebp-0x4b6]
10006ec7:	50                   	push   eax
10006ec8:	8d 85 ca fa ff ff    	lea    eax,[ebp-0x536]
10006ece:	50                   	push   eax
10006ecf:	e8 fc ff ff ff       	call   10006ed0 <begin(void*)+0x1dfd>	10006ed0: R_386_PC32	strcmp
10006ed4:	83 c4 10             	add    esp,0x10
10006ed7:	85 c0                	test   eax,eax
10006ed9:	75 04                	jne    10006edf <begin(void*)+0x1e0c>
10006edb:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
10006edf:	83 ec 04             	sub    esp,0x4
10006ee2:	68 80 00 00 00       	push   0x80
10006ee7:	6a 00                	push   0x0
10006ee9:	8d 85 4a fb ff ff    	lea    eax,[ebp-0x4b6]
10006eef:	50                   	push   eax
10006ef0:	e8 fc ff ff ff       	call   10006ef1 <begin(void*)+0x1e1e>	10006ef1: R_386_PC32	memset
10006ef5:	83 c4 10             	add    esp,0x10
10006ef8:	80 7d cf 00          	cmp    BYTE PTR [ebp-0x31],0x0
10006efc:	0f 84 9c 02 00 00    	je     1000719e <begin(void*)+0x20cb>
10006f02:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f03: R_386_32	term
10006f07:	83 ec 04             	sub    esp,0x4
10006f0a:	6a 0d                	push   0xd
10006f0c:	6a 1e                	push   0x1e
10006f0e:	50                   	push   eax
10006f0f:	e8 fc ff ff ff       	call   10006f10 <begin(void*)+0x1e3d>	10006f10: R_386_PC32	VgaText::setCursor(int, int)
10006f14:	83 c4 10             	add    esp,0x10
10006f17:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f18: R_386_32	term
10006f1c:	83 ec 08             	sub    esp,0x8
10006f1f:	68 74 b2 00 10       	push   0x1000b274	10006f20: R_386_32	.text
10006f24:	50                   	push   eax
10006f25:	e8 fc ff ff ff       	call   10006f26 <begin(void*)+0x1e53>	10006f26: R_386_PC32	VgaText::puts(char const*)
10006f2a:	83 c4 10             	add    esp,0x10
10006f2d:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f2e: R_386_32	term
10006f32:	83 ec 04             	sub    esp,0x4
10006f35:	6a 0e                	push   0xe
10006f37:	6a 1e                	push   0x1e
10006f39:	50                   	push   eax
10006f3a:	e8 fc ff ff ff       	call   10006f3b <begin(void*)+0x1e68>	10006f3b: R_386_PC32	VgaText::setCursor(int, int)
10006f3f:	83 c4 10             	add    esp,0x10
10006f42:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f43: R_386_32	term
10006f47:	83 ec 08             	sub    esp,0x8
10006f4a:	68 9e b2 00 10       	push   0x1000b29e	10006f4b: R_386_32	.text
10006f4f:	50                   	push   eax
10006f50:	e8 fc ff ff ff       	call   10006f51 <begin(void*)+0x1e7e>	10006f51: R_386_PC32	VgaText::puts(char const*)
10006f55:	83 c4 10             	add    esp,0x10
10006f58:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f59: R_386_32	term
10006f5d:	83 ec 04             	sub    esp,0x4
10006f60:	6a 10                	push   0x10
10006f62:	6a 1e                	push   0x1e
10006f64:	50                   	push   eax
10006f65:	e8 fc ff ff ff       	call   10006f66 <begin(void*)+0x1e93>	10006f66: R_386_PC32	VgaText::setCursor(int, int)
10006f6a:	83 c4 10             	add    esp,0x10
10006f6d:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f6e: R_386_32	term
10006f72:	6a 07                	push   0x7
10006f74:	6a 00                	push   0x0
10006f76:	68 ac a8 00 10       	push   0x1000a8ac	10006f77: R_386_32	.text
10006f7b:	50                   	push   eax
10006f7c:	e8 fc ff ff ff       	call   10006f7d <begin(void*)+0x1eaa>	10006f7d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006f81:	83 c4 10             	add    esp,0x10
10006f84:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f85: R_386_32	term
10006f89:	83 ec 08             	sub    esp,0x8
10006f8c:	6a 1e                	push   0x1e
10006f8e:	50                   	push   eax
10006f8f:	e8 fc ff ff ff       	call   10006f90 <begin(void*)+0x1ebd>	10006f90: R_386_PC32	VgaText::setCursorX(int)
10006f94:	83 c4 10             	add    esp,0x10
10006f97:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
10006f9e:	83 ec 0c             	sub    esp,0xc
10006fa1:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006fa7:	50                   	push   eax
10006fa8:	e8 fc ff ff ff       	call   10006fa9 <begin(void*)+0x1ed6>	10006fa9: R_386_PC32	strlen
10006fad:	83 c4 10             	add    esp,0x10
10006fb0:	89 c2                	mov    edx,eax
10006fb2:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10006fb5:	39 c2                	cmp    edx,eax
10006fb7:	76 1c                	jbe    10006fd5 <begin(void*)+0x1f02>
10006fb9:	a1 00 00 00 00       	mov    eax,ds:0x0	10006fba: R_386_32	term
10006fbe:	6a 07                	push   0x7
10006fc0:	6a 00                	push   0x0
10006fc2:	68 d8 a8 00 10       	push   0x1000a8d8	10006fc3: R_386_32	.text
10006fc7:	50                   	push   eax
10006fc8:	e8 fc ff ff ff       	call   10006fc9 <begin(void*)+0x1ef6>	10006fc9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006fcd:	83 c4 10             	add    esp,0x10
10006fd0:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
10006fd3:	eb c9                	jmp    10006f9e <begin(void*)+0x1ecb>
10006fd5:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10006fd7: R_386_32	term
10006fdb:	83 ec 0c             	sub    esp,0xc
10006fde:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006fe4:	50                   	push   eax
10006fe5:	e8 fc ff ff ff       	call   10006fe6 <begin(void*)+0x1f13>	10006fe6: R_386_PC32	strlen
10006fea:	83 c4 10             	add    esp,0x10
10006fed:	83 c0 1e             	add    eax,0x1e
10006ff0:	83 ec 04             	sub    esp,0x4
10006ff3:	6a 10                	push   0x10
10006ff5:	50                   	push   eax
10006ff6:	53                   	push   ebx
10006ff7:	e8 fc ff ff ff       	call   10006ff8 <begin(void*)+0x1f25>	10006ff8: R_386_PC32	VgaText::setCursor(int, int)
10006ffc:	83 c4 10             	add    esp,0x10
10006fff:	a0 00 00 00 00       	mov    al,ds:0x0	10007000: R_386_32	installKey
10007004:	84 c0                	test   al,al
10007006:	0f 94 c0             	sete   al
10007009:	84 c0                	test   al,al
1000700b:	74 02                	je     1000700f <begin(void*)+0x1f3c>
1000700d:	eb f0                	jmp    10006fff <begin(void*)+0x1f2c>
1000700f:	a1 00 00 00 00       	mov    eax,ds:0x0	10007010: R_386_32	term
10007014:	05 82 00 00 00       	add    eax,0x82
10007019:	83 ec 04             	sub    esp,0x4
1000701c:	6a 10                	push   0x10
1000701e:	6a 00                	push   0x0
10007020:	50                   	push   eax
10007021:	e8 fc ff ff ff       	call   10007022 <begin(void*)+0x1f4f>	10007022: R_386_PC32	memset
10007026:	83 c4 10             	add    esp,0x10
10007029:	a1 00 00 00 00       	mov    eax,ds:0x0	1000702a: R_386_32	term
1000702e:	05 02 01 00 00       	add    eax,0x102
10007033:	83 ec 04             	sub    esp,0x4
10007036:	6a 10                	push   0x10
10007038:	6a 00                	push   0x0
1000703a:	50                   	push   eax
1000703b:	e8 fc ff ff ff       	call   1000703c <begin(void*)+0x1f69>	1000703c: R_386_PC32	memset
10007040:	83 c4 10             	add    esp,0x10
10007043:	a0 00 00 00 00       	mov    al,ds:0x0	10007044: R_386_32	installKey
10007048:	3c 0a                	cmp    al,0xa
1000704a:	0f 94 c0             	sete   al
1000704d:	84 c0                	test   al,al
1000704f:	0f 84 88 00 00 00    	je     100070dd <begin(void*)+0x200a>
10007055:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007057: R_386_32	installKey
1000705c:	83 ec 04             	sub    esp,0x4
1000705f:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10007065:	50                   	push   eax
10007066:	8d 85 f8 f8 ff ff    	lea    eax,[ebp-0x708]
1000706c:	50                   	push   eax
1000706d:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10007073:	50                   	push   eax
10007074:	e8 fc ff ff ff       	call   10007075 <begin(void*)+0x1fa2>	10007075: R_386_PC32	bcrypt_hashpw
10007079:	83 c4 10             	add    esp,0x10
1000707c:	8d 85 f8 f8 ff ff    	lea    eax,[ebp-0x708]
10007082:	50                   	push   eax
10007083:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10007089:	50                   	push   eax
1000708a:	8d 85 ca fa ff ff    	lea    eax,[ebp-0x536]
10007090:	50                   	push   eax
10007091:	68 b8 b2 00 10       	push   0x1000b2b8	10007092: R_386_32	.text
10007096:	e8 fc ff ff ff       	call   10007097 <begin(void*)+0x1fc4>	10007097: R_386_PC32	Dbg::kprintf(char const*, ...)
1000709b:	83 c4 10             	add    esp,0x10
1000709e:	83 ec 08             	sub    esp,0x8
100070a1:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100070a7:	50                   	push   eax
100070a8:	8d 85 ca fa ff ff    	lea    eax,[ebp-0x536]
100070ae:	50                   	push   eax
100070af:	e8 fc ff ff ff       	call   100070b0 <begin(void*)+0x1fdd>	100070b0: R_386_PC32	strcmp
100070b4:	83 c4 10             	add    esp,0x10
100070b7:	85 c0                	test   eax,eax
100070b9:	0f 84 de 00 00 00    	je     1000719d <begin(void*)+0x20ca>
100070bf:	83 ec 04             	sub    esp,0x4
100070c2:	68 80 00 00 00       	push   0x80
100070c7:	6a 00                	push   0x0
100070c9:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100070cf:	50                   	push   eax
100070d0:	e8 fc ff ff ff       	call   100070d1 <begin(void*)+0x1ffe>	100070d1: R_386_PC32	memset
100070d5:	83 c4 10             	add    esp,0x10
100070d8:	e9 b4 00 00 00       	jmp    10007191 <begin(void*)+0x20be>
100070dd:	a0 00 00 00 00       	mov    al,ds:0x0	100070de: R_386_32	installKey
100070e2:	3c 1f                	cmp    al,0x1f
100070e4:	7e 0d                	jle    100070f3 <begin(void*)+0x2020>
100070e6:	a0 00 00 00 00       	mov    al,ds:0x0	100070e7: R_386_32	installKey
100070eb:	3c 7f                	cmp    al,0x7f
100070ed:	74 04                	je     100070f3 <begin(void*)+0x2020>
100070ef:	b0 01                	mov    al,0x1
100070f1:	eb 02                	jmp    100070f5 <begin(void*)+0x2022>
100070f3:	b0 00                	mov    al,0x0
100070f5:	84 c0                	test   al,al
100070f7:	74 44                	je     1000713d <begin(void*)+0x206a>
100070f9:	a0 00 00 00 00       	mov    al,ds:0x0	100070fa: R_386_32	installKey
100070fe:	88 85 ca fc ff ff    	mov    BYTE PTR [ebp-0x336],al
10007104:	c6 85 cb fc ff ff 00 	mov    BYTE PTR [ebp-0x335],0x0
1000710b:	83 ec 0c             	sub    esp,0xc
1000710e:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10007114:	50                   	push   eax
10007115:	e8 fc ff ff ff       	call   10007116 <begin(void*)+0x2043>	10007116: R_386_PC32	strlen
1000711a:	83 c4 10             	add    esp,0x10
1000711d:	83 f8 22             	cmp    eax,0x22
10007120:	77 6f                	ja     10007191 <begin(void*)+0x20be>
10007122:	83 ec 08             	sub    esp,0x8
10007125:	8d 85 ca fc ff ff    	lea    eax,[ebp-0x336]
1000712b:	50                   	push   eax
1000712c:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10007132:	50                   	push   eax
10007133:	e8 fc ff ff ff       	call   10007134 <begin(void*)+0x2061>	10007134: R_386_PC32	strcat
10007138:	83 c4 10             	add    esp,0x10
1000713b:	eb 54                	jmp    10007191 <begin(void*)+0x20be>
1000713d:	a0 00 00 00 00       	mov    al,ds:0x0	1000713e: R_386_32	installKey
10007142:	3c 08                	cmp    al,0x8
10007144:	0f 94 c0             	sete   al
10007147:	84 c0                	test   al,al
10007149:	74 33                	je     1000717e <begin(void*)+0x20ab>
1000714b:	83 ec 0c             	sub    esp,0xc
1000714e:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10007154:	50                   	push   eax
10007155:	e8 fc ff ff ff       	call   10007156 <begin(void*)+0x2083>	10007156: R_386_PC32	strlen
1000715a:	83 c4 10             	add    esp,0x10
1000715d:	85 c0                	test   eax,eax
1000715f:	74 30                	je     10007191 <begin(void*)+0x20be>
10007161:	83 ec 0c             	sub    esp,0xc
10007164:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
1000716a:	50                   	push   eax
1000716b:	e8 fc ff ff ff       	call   1000716c <begin(void*)+0x2099>	1000716c: R_386_PC32	strlen
10007170:	83 c4 10             	add    esp,0x10
10007173:	48                   	dec    eax
10007174:	c6 84 05 4a fa ff ff 00 	mov    BYTE PTR [ebp+eax*1-0x5b6],0x0
1000717c:	eb 13                	jmp    10007191 <begin(void*)+0x20be>
1000717e:	a0 00 00 00 00       	mov    al,ds:0x0	1000717f: R_386_32	installKey
10007183:	3c 1b                	cmp    al,0x1b
10007185:	0f 94 c0             	sete   al
10007188:	84 c0                	test   al,al
1000718a:	74 05                	je     10007191 <begin(void*)+0x20be>
1000718c:	e9 c5 f8 ff ff       	jmp    10006a56 <begin(void*)+0x1983>
10007191:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007193: R_386_32	installKey
10007198:	e9 5b fd ff ff       	jmp    10006ef8 <begin(void*)+0x1e25>
1000719d:	90                   	nop
1000719e:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100071a0: R_386_32	guiKeyboardHandler
100071a8:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
100071af:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071b2:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
100071b5:	7d 69                	jge    10007220 <begin(void*)+0x214d>
100071b7:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071ba:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
100071c1:	85 c0                	test   eax,eax
100071c3:	74 24                	je     100071e9 <begin(void*)+0x2116>
100071c5:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071c8:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
100071cf:	83 ec 0c             	sub    esp,0xc
100071d2:	50                   	push   eax
100071d3:	e8 fc ff ff ff       	call   100071d4 <begin(void*)+0x2101>	100071d4: R_386_PC32	free
100071d8:	83 c4 10             	add    esp,0x10
100071db:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071de:	c7 84 85 48 f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x6b8],0x0
100071e9:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071ec:	8b 84 85 c8 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x638]
100071f3:	85 c0                	test   eax,eax
100071f5:	74 24                	je     1000721b <begin(void*)+0x2148>
100071f7:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071fa:	8b 84 85 c8 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x638]
10007201:	83 ec 0c             	sub    esp,0xc
10007204:	50                   	push   eax
10007205:	e8 fc ff ff ff       	call   10007206 <begin(void*)+0x2133>	10007206: R_386_PC32	free
1000720a:	83 c4 10             	add    esp,0x10
1000720d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007210:	c7 84 85 c8 f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x638],0x0
1000721b:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
1000721e:	eb 8f                	jmp    100071af <begin(void*)+0x20dc>
10007220:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007222: R_386_32	VgaText::hiddenOut
10007227:	83 ec 0c             	sub    esp,0xc
1000722a:	68 84 07 00 00       	push   0x784
1000722f:	e8 fc ff ff ff       	call   10007230 <begin(void*)+0x215d>	10007230: R_386_PC32	operator new(unsigned long)
10007234:	83 c4 10             	add    esp,0x10
10007237:	89 c3                	mov    ebx,eax
10007239:	6a 00                	push   0x0
1000723b:	6a 00                	push   0x0
1000723d:	68 2a ad 00 10       	push   0x1000ad2a	1000723e: R_386_32	.text
10007242:	53                   	push   ebx
10007243:	e8 fc ff ff ff       	call   10007244 <begin(void*)+0x2171>	10007244: R_386_PC32	Process::Process(char const*, Process*, char**)
10007248:	83 c4 10             	add    esp,0x10
1000724b:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
1000724e:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
10007251:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
10007257:	83 ec 0c             	sub    esp,0xc
1000725a:	50                   	push   eax
1000725b:	e8 fc ff ff ff       	call   1000725c <begin(void*)+0x2189>	1000725c: R_386_PC32	setActiveTerminal(VgaText*)
10007260:	83 c4 10             	add    esp,0x10
10007263:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
1000726a:	83 7d c0 18          	cmp    DWORD PTR [ebp-0x40],0x18
1000726e:	7f 2e                	jg     1000729e <begin(void*)+0x21cb>
10007270:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [ebp-0x44],0x0
10007277:	83 7d bc 4f          	cmp    DWORD PTR [ebp-0x44],0x4f
1000727b:	7f 1c                	jg     10007299 <begin(void*)+0x21c6>
1000727d:	83 ec 0c             	sub    esp,0xc
10007280:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10007283:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10007286:	6a 00                	push   0x0
10007288:	6a 07                	push   0x7
1000728a:	6a 20                	push   0x20
1000728c:	e8 fc ff ff ff       	call   1000728d <begin(void*)+0x21ba>	1000728d: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
10007291:	83 c4 20             	add    esp,0x20
10007294:	ff 45 bc             	inc    DWORD PTR [ebp-0x44]
10007297:	eb de                	jmp    10007277 <begin(void*)+0x21a4>
10007299:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
1000729c:	eb cc                	jmp    1000726a <begin(void*)+0x2197>
1000729e:	83 ec 0c             	sub    esp,0xc
100072a1:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
100072a4:	e8 fc ff ff ff       	call   100072a5 <begin(void*)+0x21d2>	100072a5: R_386_PC32	Process::createUserThread()
100072a9:	83 c4 10             	add    esp,0x10
100072ac:	8b 85 d0 fc ff ff    	mov    eax,DWORD PTR [ebp-0x330]
100072b2:	8b 95 d4 fc ff ff    	mov    edx,DWORD PTR [ebp-0x32c]
100072b8:	89 c6                	mov    esi,eax
100072ba:	83 f6 01             	xor    esi,0x1
100072bd:	89 b5 a0 f8 ff ff    	mov    DWORD PTR [ebp-0x760],esi
100072c3:	89 d0                	mov    eax,edx
100072c5:	80 f4 00             	xor    ah,0x0
100072c8:	89 85 a4 f8 ff ff    	mov    DWORD PTR [ebp-0x75c],eax
100072ce:	8b b5 a0 f8 ff ff    	mov    esi,DWORD PTR [ebp-0x760]
100072d4:	8b bd a4 f8 ff ff    	mov    edi,DWORD PTR [ebp-0x75c]
100072da:	89 f8                	mov    eax,edi
100072dc:	09 f0                	or     eax,esi
100072de:	85 c0                	test   eax,eax
100072e0:	75 17                	jne    100072f9 <begin(void*)+0x2226>
100072e2:	a1 00 00 00 00       	mov    eax,ds:0x0	100072e3: R_386_32	kernelProcess
100072e7:	6a 01                	push   0x1
100072e9:	6a 00                	push   0x0
100072eb:	68 00 00 00 00       	push   0x0	100072ec: R_386_32	startGUI(void*)
100072f0:	50                   	push   eax
100072f1:	e8 fc ff ff ff       	call   100072f2 <begin(void*)+0x221f>	100072f2: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
100072f6:	83 c4 10             	add    esp,0x10
100072f9:	8b 85 d0 fc ff ff    	mov    eax,DWORD PTR [ebp-0x330]
100072ff:	8b 95 d4 fc ff ff    	mov    edx,DWORD PTR [ebp-0x32c]
10007305:	89 c7                	mov    edi,eax
10007307:	83 f7 02             	xor    edi,0x2
1000730a:	89 bd 98 f8 ff ff    	mov    DWORD PTR [ebp-0x768],edi
10007310:	89 d0                	mov    eax,edx
10007312:	80 f4 00             	xor    ah,0x0
10007315:	89 85 9c f8 ff ff    	mov    DWORD PTR [ebp-0x764],eax
1000731b:	8b b5 98 f8 ff ff    	mov    esi,DWORD PTR [ebp-0x768]
10007321:	8b bd 9c f8 ff ff    	mov    edi,DWORD PTR [ebp-0x764]
10007327:	89 f8                	mov    eax,edi
10007329:	09 f0                	or     eax,esi
1000732b:	85 c0                	test   eax,eax
1000732d:	75 17                	jne    10007346 <begin(void*)+0x2273>
1000732f:	a1 00 00 00 00       	mov    eax,ds:0x0	10007330: R_386_32	kernelProcess
10007334:	6a 01                	push   0x1
10007336:	6a 00                	push   0x0
10007338:	68 00 00 00 00       	push   0x0	10007339: R_386_32	startGUIVESA(void*)
1000733d:	50                   	push   eax
1000733e:	e8 fc ff ff ff       	call   1000733f <begin(void*)+0x226c>	1000733f: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10007343:	83 c4 10             	add    esp,0x10
10007346:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
10007349:	8b 00                	mov    eax,DWORD PTR [eax]
1000734b:	83 ec 04             	sub    esp,0x4
1000734e:	6a 00                	push   0x0
10007350:	8d 95 cc fc ff ff    	lea    edx,[ebp-0x334]
10007356:	52                   	push   edx
10007357:	50                   	push   eax
10007358:	e8 fc ff ff ff       	call   10007359 <begin(void*)+0x2286>	10007359: R_386_PC32	waitTask(int, int*, int)
1000735d:	83 c4 10             	add    esp,0x10
10007360:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10007362: R_386_32	Krnl::computer
10007366:	a1 00 00 00 00       	mov    eax,ds:0x0	10007367: R_386_32	Krnl::computer
1000736b:	8b 00                	mov    eax,DWORD PTR [eax]
1000736d:	83 c0 0c             	add    eax,0xc
10007370:	8b 00                	mov    eax,DWORD PTR [eax]
10007372:	6a 00                	push   0x0
10007374:	6a 00                	push   0x0
10007376:	6a 00                	push   0x0
10007378:	52                   	push   edx
10007379:	ff d0                	call   eax
1000737b:	83 c4 10             	add    esp,0x10
1000737e:	83 ec 0c             	sub    esp,0xc
10007381:	68 d8 b2 00 10       	push   0x1000b2d8	10007382: R_386_32	.text
10007386:	e8 fc ff ff ff       	call   10007387 <begin(void*)+0x22b4>	10007387: R_386_PC32	KePanic(char const*)
1000738b:	83 c4 10             	add    esp,0x10
1000738e:	eb fe                	jmp    1000738e <begin(void*)+0x22bb>

10007390 <clean>:
10007390:	57                   	push   edi
10007391:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10007395:	b0 00                	mov    al,0x0
10007397:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
1000739b:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000739d:	5f                   	pop    edi
1000739e:	c3                   	ret    

1000739f <BF_decode>:
1000739f:	55                   	push   ebp
100073a0:	57                   	push   edi
100073a1:	56                   	push   esi
100073a2:	53                   	push   ebx
100073a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100073a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100073ab:	89 d6                	mov    esi,edx
100073ad:	03 74 24 1c          	add    esi,DWORD PTR [esp+0x1c]
100073b1:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
100073b4:	83 e8 20             	sub    eax,0x20
100073b7:	83 f8 5f             	cmp    eax,0x5f
100073ba:	0f 87 a3 00 00 00    	ja     10007463 <BF_decode+0xc4>
100073c0:	8a 80 e0 c4 00 10    	mov    al,BYTE PTR [eax+0x1000c4e0]	100073c2: R_386_32	.data
100073c6:	3c 3f                	cmp    al,0x3f
100073c8:	0f 87 9f 00 00 00    	ja     1000746d <BF_decode+0xce>
100073ce:	0f b6 4b 01          	movzx  ecx,BYTE PTR [ebx+0x1]
100073d2:	83 e9 20             	sub    ecx,0x20
100073d5:	83 f9 5f             	cmp    ecx,0x5f
100073d8:	0f 87 96 00 00 00    	ja     10007474 <BF_decode+0xd5>
100073de:	8a 89 e0 c4 00 10    	mov    cl,BYTE PTR [ecx+0x1000c4e0]	100073e0: R_386_32	.data
100073e4:	0f b6 f9             	movzx  edi,cl
100073e7:	83 ff 3f             	cmp    edi,0x3f
100073ea:	0f 87 8b 00 00 00    	ja     1000747b <BF_decode+0xdc>
100073f0:	c1 e0 02             	shl    eax,0x2
100073f3:	c1 ef 04             	shr    edi,0x4
100073f6:	09 f8                	or     eax,edi
100073f8:	88 02                	mov    BYTE PTR [edx],al
100073fa:	89 d7                	mov    edi,edx
100073fc:	8d 42 01             	lea    eax,[edx+0x1]
100073ff:	39 c6                	cmp    esi,eax
10007401:	76 7f                	jbe    10007482 <BF_decode+0xe3>
10007403:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
10007407:	83 e8 20             	sub    eax,0x20
1000740a:	83 f8 5f             	cmp    eax,0x5f
1000740d:	77 7a                	ja     10007489 <BF_decode+0xea>
1000740f:	8a 80 e0 c4 00 10    	mov    al,BYTE PTR [eax+0x1000c4e0]	10007411: R_386_32	.data
10007415:	0f b6 e8             	movzx  ebp,al
10007418:	83 fd 3f             	cmp    ebp,0x3f
1000741b:	77 73                	ja     10007490 <BF_decode+0xf1>
1000741d:	c1 e1 04             	shl    ecx,0x4
10007420:	c1 ed 02             	shr    ebp,0x2
10007423:	09 e9                	or     ecx,ebp
10007425:	88 4a 01             	mov    BYTE PTR [edx+0x1],cl
10007428:	8d 52 02             	lea    edx,[edx+0x2]
1000742b:	39 d6                	cmp    esi,edx
1000742d:	76 68                	jbe    10007497 <BF_decode+0xf8>
1000742f:	83 c3 04             	add    ebx,0x4
10007432:	0f b6 53 ff          	movzx  edx,BYTE PTR [ebx-0x1]
10007436:	83 ea 20             	sub    edx,0x20
10007439:	83 fa 5f             	cmp    edx,0x5f
1000743c:	77 60                	ja     1000749e <BF_decode+0xff>
1000743e:	8a 8a e0 c4 00 10    	mov    cl,BYTE PTR [edx+0x1000c4e0]	10007440: R_386_32	.data
10007444:	80 f9 3f             	cmp    cl,0x3f
10007447:	77 5c                	ja     100074a5 <BF_decode+0x106>
10007449:	8d 57 03             	lea    edx,[edi+0x3]
1000744c:	c1 e0 06             	shl    eax,0x6
1000744f:	09 c1                	or     ecx,eax
10007451:	88 4a ff             	mov    BYTE PTR [edx-0x1],cl
10007454:	39 d6                	cmp    esi,edx
10007456:	0f 87 55 ff ff ff    	ja     100073b1 <BF_decode+0x12>
1000745c:	b8 00 00 00 00       	mov    eax,0x0
10007461:	eb 05                	jmp    10007468 <BF_decode+0xc9>
10007463:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007468:	5b                   	pop    ebx
10007469:	5e                   	pop    esi
1000746a:	5f                   	pop    edi
1000746b:	5d                   	pop    ebp
1000746c:	c3                   	ret    
1000746d:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007472:	eb f4                	jmp    10007468 <BF_decode+0xc9>
10007474:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007479:	eb ed                	jmp    10007468 <BF_decode+0xc9>
1000747b:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007480:	eb e6                	jmp    10007468 <BF_decode+0xc9>
10007482:	b8 00 00 00 00       	mov    eax,0x0
10007487:	eb df                	jmp    10007468 <BF_decode+0xc9>
10007489:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000748e:	eb d8                	jmp    10007468 <BF_decode+0xc9>
10007490:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007495:	eb d1                	jmp    10007468 <BF_decode+0xc9>
10007497:	b8 00 00 00 00       	mov    eax,0x0
1000749c:	eb ca                	jmp    10007468 <BF_decode+0xc9>
1000749e:	b8 ff ff ff ff       	mov    eax,0xffffffff
100074a3:	eb c3                	jmp    10007468 <BF_decode+0xc9>
100074a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
100074aa:	eb bc                	jmp    10007468 <BF_decode+0xc9>

100074ac <BF_encode>:
100074ac:	55                   	push   ebp
100074ad:	57                   	push   edi
100074ae:	56                   	push   esi
100074af:	53                   	push   ebx
100074b0:	83 ec 04             	sub    esp,0x4
100074b3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
100074b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100074bb:	89 c7                	mov    edi,eax
100074bd:	03 7c 24 20          	add    edi,DWORD PTR [esp+0x20]
100074c1:	89 3c 24             	mov    DWORD PTR [esp],edi
100074c4:	0f b6 10             	movzx  edx,BYTE PTR [eax]
100074c7:	89 d6                	mov    esi,edx
100074c9:	c1 ee 02             	shr    esi,0x2
100074cc:	8a 9e 80 c4 00 10    	mov    bl,BYTE PTR [esi+0x1000c480]	100074ce: R_386_32	.data
100074d2:	88 19                	mov    BYTE PTR [ecx],bl
100074d4:	c1 e2 04             	shl    edx,0x4
100074d7:	83 e2 30             	and    edx,0x30
100074da:	89 c7                	mov    edi,eax
100074dc:	8d 70 01             	lea    esi,[eax+0x1]
100074df:	39 34 24             	cmp    DWORD PTR [esp],esi
100074e2:	76 51                	jbe    10007535 <BF_encode+0x89>
100074e4:	0f b6 70 01          	movzx  esi,BYTE PTR [eax+0x1]
100074e8:	89 f5                	mov    ebp,esi
100074ea:	c1 ed 04             	shr    ebp,0x4
100074ed:	09 ea                	or     edx,ebp
100074ef:	8a 9a 80 c4 00 10    	mov    bl,BYTE PTR [edx+0x1000c480]	100074f1: R_386_32	.data
100074f5:	88 59 01             	mov    BYTE PTR [ecx+0x1],bl
100074f8:	c1 e6 02             	shl    esi,0x2
100074fb:	83 e6 3c             	and    esi,0x3c
100074fe:	83 c0 02             	add    eax,0x2
10007501:	39 04 24             	cmp    DWORD PTR [esp],eax
10007504:	76 40                	jbe    10007546 <BF_encode+0x9a>
10007506:	8d 47 03             	lea    eax,[edi+0x3]
10007509:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
1000750c:	0f b6 d3             	movzx  edx,bl
1000750f:	c1 ea 06             	shr    edx,0x6
10007512:	09 f2                	or     edx,esi
10007514:	8a 92 80 c4 00 10    	mov    dl,BYTE PTR [edx+0x1000c480]	10007516: R_386_32	.data
1000751a:	88 51 02             	mov    BYTE PTR [ecx+0x2],dl
1000751d:	83 c1 04             	add    ecx,0x4
10007520:	89 da                	mov    edx,ebx
10007522:	83 e2 3f             	and    edx,0x3f
10007525:	8a 9a 80 c4 00 10    	mov    bl,BYTE PTR [edx+0x1000c480]	10007527: R_386_32	.data
1000752b:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
1000752e:	39 04 24             	cmp    DWORD PTR [esp],eax
10007531:	77 91                	ja     100074c4 <BF_encode+0x18>
10007533:	eb 09                	jmp    1000753e <BF_encode+0x92>
10007535:	8a 82 80 c4 00 10    	mov    al,BYTE PTR [edx+0x1000c480]	10007537: R_386_32	.data
1000753b:	88 41 01             	mov    BYTE PTR [ecx+0x1],al
1000753e:	83 c4 04             	add    esp,0x4
10007541:	5b                   	pop    ebx
10007542:	5e                   	pop    esi
10007543:	5f                   	pop    edi
10007544:	5d                   	pop    ebp
10007545:	c3                   	ret    
10007546:	8a 86 80 c4 00 10    	mov    al,BYTE PTR [esi+0x1000c480]	10007548: R_386_32	.data
1000754c:	88 41 02             	mov    BYTE PTR [ecx+0x2],al
1000754f:	eb ed                	jmp    1000753e <BF_encode+0x92>

10007551 <BF_swap>:
10007551:	53                   	push   ebx
10007552:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10007556:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
1000755a:	80 3d 40 c5 00 10 00 	cmp    BYTE PTR ds:0x1000c540,0x0	1000755c: R_386_32	.data
10007561:	74 23                	je     10007586 <BF_swap+0x35>
10007563:	8b 01                	mov    eax,DWORD PTR [ecx]
10007565:	c1 c0 10             	rol    eax,0x10
10007568:	83 c1 04             	add    ecx,0x4
1000756b:	89 c2                	mov    edx,eax
1000756d:	c1 e2 08             	shl    edx,0x8
10007570:	81 e2 00 ff 00 ff    	and    edx,0xff00ff00
10007576:	c1 e8 08             	shr    eax,0x8
10007579:	25 ff 00 ff 00       	and    eax,0xff00ff
1000757e:	09 d0                	or     eax,edx
10007580:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
10007583:	4b                   	dec    ebx
10007584:	75 dd                	jne    10007563 <BF_swap+0x12>
10007586:	5b                   	pop    ebx
10007587:	c3                   	ret    

10007588 <BF_set_key>:
10007588:	55                   	push   ebp
10007589:	57                   	push   edi
1000758a:	56                   	push   esi
1000758b:	53                   	push   ebx
1000758c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10007590:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
10007594:	89 f9                	mov    ecx,edi
10007596:	be 00 00 00 00       	mov    esi,0x0
1000759b:	eb 2d                	jmp    100075ca <BF_set_key+0x42>
1000759d:	89 f9                	mov    ecx,edi
1000759f:	4a                   	dec    edx
100075a0:	74 10                	je     100075b2 <BF_set_key+0x2a>
100075a2:	c1 e0 08             	shl    eax,0x8
100075a5:	0f b6 19             	movzx  ebx,BYTE PTR [ecx]
100075a8:	09 d8                	or     eax,ebx
100075aa:	80 39 00             	cmp    BYTE PTR [ecx],0x0
100075ad:	74 ee                	je     1000759d <BF_set_key+0x15>
100075af:	41                   	inc    ecx
100075b0:	eb ed                	jmp    1000759f <BF_set_key+0x17>
100075b2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100075b6:	89 04 b2             	mov    DWORD PTR [edx+esi*4],eax
100075b9:	33 04 b5 20 c4 00 10 	xor    eax,DWORD PTR [esi*4+0x1000c420]	100075bc: R_386_32	.data
100075c0:	89 44 b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],eax
100075c4:	46                   	inc    esi
100075c5:	83 fe 12             	cmp    esi,0x12
100075c8:	74 0c                	je     100075d6 <BF_set_key+0x4e>
100075ca:	ba 04 00 00 00       	mov    edx,0x4
100075cf:	b8 00 00 00 00       	mov    eax,0x0
100075d4:	eb cc                	jmp    100075a2 <BF_set_key+0x1a>
100075d6:	5b                   	pop    ebx
100075d7:	5e                   	pop    esi
100075d8:	5f                   	pop    edi
100075d9:	5d                   	pop    ebp
100075da:	c3                   	ret    

100075db <_crypt_blowfish_rn>:
100075db:	55                   	push   ebp
100075dc:	57                   	push   edi
100075dd:	56                   	push   esi
100075de:	53                   	push   ebx
100075df:	81 ec 00 11 00 00    	sub    esp,0x1100
100075e5:	83 bc 24 20 11 00 00 3c 	cmp    DWORD PTR [esp+0x1120],0x3c
100075ed:	0f 8e 9e 2d 00 00    	jle    1000a391 <_crypt_blowfish_rn+0x2db6>
100075f3:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
100075fa:	80 38 24             	cmp    BYTE PTR [eax],0x24
100075fd:	0f 85 a8 2d 00 00    	jne    1000a3ab <_crypt_blowfish_rn+0x2dd0>
10007603:	80 78 01 32          	cmp    BYTE PTR [eax+0x1],0x32
10007607:	0f 85 9e 2d 00 00    	jne    1000a3ab <_crypt_blowfish_rn+0x2dd0>
1000760d:	80 78 02 61          	cmp    BYTE PTR [eax+0x2],0x61
10007611:	0f 85 94 2d 00 00    	jne    1000a3ab <_crypt_blowfish_rn+0x2dd0>
10007617:	80 78 03 24          	cmp    BYTE PTR [eax+0x3],0x24
1000761b:	0f 85 8a 2d 00 00    	jne    1000a3ab <_crypt_blowfish_rn+0x2dd0>
10007621:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10007624:	8d 50 d0             	lea    edx,[eax-0x30]
10007627:	80 fa 03             	cmp    dl,0x3
1000762a:	0f 87 7b 2d 00 00    	ja     1000a3ab <_crypt_blowfish_rn+0x2dd0>
10007630:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
10007637:	8a 53 05             	mov    dl,BYTE PTR [ebx+0x5]
1000763a:	8d 4a d0             	lea    ecx,[edx-0x30]
1000763d:	80 f9 09             	cmp    cl,0x9
10007640:	0f 87 65 2d 00 00    	ja     1000a3ab <_crypt_blowfish_rn+0x2dd0>
10007646:	3c 33                	cmp    al,0x33
10007648:	0f 84 54 2d 00 00    	je     1000a3a2 <_crypt_blowfish_rn+0x2dc7>
1000764e:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
10007655:	80 7b 06 24          	cmp    BYTE PTR [ebx+0x6],0x24
10007659:	0f 85 4c 2d 00 00    	jne    1000a3ab <_crypt_blowfish_rn+0x2dd0>
1000765f:	0f be c0             	movsx  eax,al
10007662:	8d 84 80 10 ff ff ff 	lea    eax,[eax+eax*4-0xf0]
10007669:	01 c0                	add    eax,eax
1000766b:	0f be d2             	movsx  edx,dl
1000766e:	8d 4c 10 d0          	lea    ecx,[eax+edx*1-0x30]
10007672:	b8 01 00 00 00       	mov    eax,0x1
10007677:	d3 e0                	shl    eax,cl
10007679:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000767d:	83 f8 0f             	cmp    eax,0xf
10007680:	0f 86 3f 2d 00 00    	jbe    1000a3c5 <_crypt_blowfish_rn+0x2dea>
10007686:	6a 10                	push   0x10
10007688:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
1000768f:	83 c0 07             	add    eax,0x7
10007692:	50                   	push   eax
10007693:	8d 84 24 f0 10 00 00 	lea    eax,[esp+0x10f0]
1000769a:	50                   	push   eax
1000769b:	e8 ff fc ff ff       	call   1000739f <BF_decode>
100076a0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
100076a4:	83 c4 0c             	add    esp,0xc
100076a7:	85 c0                	test   eax,eax
100076a9:	0f 85 16 2d 00 00    	jne    1000a3c5 <_crypt_blowfish_rn+0x2dea>
100076af:	6a 04                	push   0x4
100076b1:	8d 5c 24 5c          	lea    ebx,[esp+0x5c]
100076b5:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
100076bc:	50                   	push   eax
100076bd:	e8 8f fe ff ff       	call   10007551 <BF_swap>
100076c2:	8d 84 24 60 10 00 00 	lea    eax,[esp+0x1060]
100076c9:	50                   	push   eax
100076ca:	8d 84 24 ac 10 00 00 	lea    eax,[esp+0x10ac]
100076d1:	50                   	push   eax
100076d2:	ff b4 24 24 11 00 00 	push   DWORD PTR [esp+0x1124]
100076d9:	e8 aa fe ff ff       	call   10007588 <BF_set_key>
100076de:	be 20 b4 00 10       	mov    esi,0x1000b420	100076df: R_386_32	.data
100076e3:	b9 00 04 00 00       	mov    ecx,0x400
100076e8:	89 df                	mov    edi,ebx
100076ea:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100076ec:	83 c4 14             	add    esp,0x14
100076ef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100076f3:	89 04 24             	mov    DWORD PTR [esp],eax
100076f6:	bb 00 00 00 00       	mov    ebx,0x0
100076fb:	b8 00 00 00 00       	mov    eax,0x0
10007700:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10007703:	83 e1 02             	and    ecx,0x2
10007706:	8d 91 24 04 00 00    	lea    edx,[ecx+0x424]
1000770c:	8b 54 94 58          	mov    edx,DWORD PTR [esp+edx*4+0x58]
10007710:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
10007717:	31 c2                	xor    edx,eax
10007719:	89 d7                	mov    edi,edx
1000771b:	c1 ef 06             	shr    edi,0x6
1000771e:	89 d5                	mov    ebp,edx
10007720:	c1 ed 0e             	shr    ebp,0xe
10007723:	89 d0                	mov    eax,edx
10007725:	c1 e8 16             	shr    eax,0x16
10007728:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000772f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007735:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000773b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007741:	25 fc 03 00 00       	and    eax,0x3fc
10007746:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000774a:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007751:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007758:	81 c1 25 04 00 00    	add    ecx,0x425
1000775e:	8b 4c 8c 58          	mov    ecx,DWORD PTR [esp+ecx*4+0x58]
10007762:	33 8c 24 5c 10 00 00 	xor    ecx,DWORD PTR [esp+0x105c]
10007769:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10007770:	31 c8                	xor    eax,ecx
10007772:	31 c3                	xor    ebx,eax
10007774:	89 d8                	mov    eax,ebx
10007776:	c1 e8 06             	shr    eax,0x6
10007779:	89 c1                	mov    ecx,eax
1000777b:	89 df                	mov    edi,ebx
1000777d:	c1 ef 0e             	shr    edi,0xe
10007780:	89 d8                	mov    eax,ebx
10007782:	c1 e8 16             	shr    eax,0x16
10007785:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
1000778c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007792:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007798:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000779e:	25 fc 03 00 00       	and    eax,0x3fc
100077a3:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100077a7:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
100077ae:	33 84 0c 58 08 00 00 	xor    eax,DWORD PTR [esp+ecx*1+0x858]
100077b5:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
100077bc:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100077c3:	89 c1                	mov    ecx,eax
100077c5:	31 d1                	xor    ecx,edx
100077c7:	89 ca                	mov    edx,ecx
100077c9:	c1 ea 06             	shr    edx,0x6
100077cc:	89 cf                	mov    edi,ecx
100077ce:	c1 ef 0e             	shr    edi,0xe
100077d1:	89 c8                	mov    eax,ecx
100077d3:	c1 e8 16             	shr    eax,0x16
100077d6:	8d 34 8d 00 00 00 00 	lea    esi,[ecx*4+0x0]
100077dd:	81 e6 fc 03 00 00    	and    esi,0x3fc
100077e3:	81 e2 fc 03 00 00    	and    edx,0x3fc
100077e9:	81 e7 fc 03 00 00    	and    edi,0x3fc
100077ef:	25 fc 03 00 00       	and    eax,0x3fc
100077f4:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100077f8:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
100077ff:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10007806:	33 9c 24 64 10 00 00 	xor    ebx,DWORD PTR [esp+0x1064]
1000780d:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10007814:	89 c2                	mov    edx,eax
10007816:	31 da                	xor    edx,ebx
10007818:	89 d6                	mov    esi,edx
1000781a:	c1 ee 06             	shr    esi,0x6
1000781d:	89 d7                	mov    edi,edx
1000781f:	c1 ef 0e             	shr    edi,0xe
10007822:	89 d0                	mov    eax,edx
10007824:	c1 e8 16             	shr    eax,0x16
10007827:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
1000782e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007834:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000783a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007840:	25 fc 03 00 00       	and    eax,0x3fc
10007845:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007849:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10007850:	33 84 34 58 08 00 00 	xor    eax,DWORD PTR [esp+esi*1+0x858]
10007857:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
1000785e:	03 84 1c 58 0c 00 00 	add    eax,DWORD PTR [esp+ebx*1+0xc58]
10007865:	31 c8                	xor    eax,ecx
10007867:	89 c3                	mov    ebx,eax
10007869:	c1 eb 06             	shr    ebx,0x6
1000786c:	89 c7                	mov    edi,eax
1000786e:	c1 ef 0e             	shr    edi,0xe
10007871:	89 c6                	mov    esi,eax
10007873:	c1 ee 16             	shr    esi,0x16
10007876:	89 f1                	mov    ecx,esi
10007878:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000787f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007885:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000788b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007891:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007897:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000789b:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100078a2:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
100078a9:	33 94 24 6c 10 00 00 	xor    edx,DWORD PTR [esp+0x106c]
100078b0:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100078b7:	31 ca                	xor    edx,ecx
100078b9:	89 d6                	mov    esi,edx
100078bb:	c1 ee 06             	shr    esi,0x6
100078be:	89 d7                	mov    edi,edx
100078c0:	c1 ef 0e             	shr    edi,0xe
100078c3:	89 d3                	mov    ebx,edx
100078c5:	c1 eb 16             	shr    ebx,0x16
100078c8:	89 d9                	mov    ecx,ebx
100078ca:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
100078d1:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100078d7:	81 e6 fc 03 00 00    	and    esi,0x3fc
100078dd:	81 e7 fc 03 00 00    	and    edi,0x3fc
100078e3:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100078e9:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100078ed:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100078f4:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100078fb:	33 84 24 70 10 00 00 	xor    eax,DWORD PTR [esp+0x1070]
10007902:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007909:	31 c8                	xor    eax,ecx
1000790b:	89 c6                	mov    esi,eax
1000790d:	c1 ee 06             	shr    esi,0x6
10007910:	89 c7                	mov    edi,eax
10007912:	c1 ef 0e             	shr    edi,0xe
10007915:	89 c3                	mov    ebx,eax
10007917:	c1 eb 16             	shr    ebx,0x16
1000791a:	89 d9                	mov    ecx,ebx
1000791c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007923:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007929:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000792f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007935:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000793b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000793f:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007946:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
1000794d:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10007954:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
1000795b:	31 ca                	xor    edx,ecx
1000795d:	89 d6                	mov    esi,edx
1000795f:	c1 ee 06             	shr    esi,0x6
10007962:	89 d7                	mov    edi,edx
10007964:	c1 ef 0e             	shr    edi,0xe
10007967:	89 d3                	mov    ebx,edx
10007969:	c1 eb 16             	shr    ebx,0x16
1000796c:	89 d9                	mov    ecx,ebx
1000796e:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10007975:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000797b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007981:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007987:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000798d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007991:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007998:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
1000799f:	33 84 24 78 10 00 00 	xor    eax,DWORD PTR [esp+0x1078]
100079a6:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
100079ad:	31 c8                	xor    eax,ecx
100079af:	89 c6                	mov    esi,eax
100079b1:	c1 ee 06             	shr    esi,0x6
100079b4:	89 c7                	mov    edi,eax
100079b6:	c1 ef 0e             	shr    edi,0xe
100079b9:	89 c3                	mov    ebx,eax
100079bb:	c1 eb 16             	shr    ebx,0x16
100079be:	89 d9                	mov    ecx,ebx
100079c0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
100079c7:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100079cd:	81 e6 fc 03 00 00    	and    esi,0x3fc
100079d3:	81 e7 fc 03 00 00    	and    edi,0x3fc
100079d9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100079df:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100079e3:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100079ea:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100079f1:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
100079f8:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
100079ff:	31 ca                	xor    edx,ecx
10007a01:	89 d6                	mov    esi,edx
10007a03:	c1 ee 06             	shr    esi,0x6
10007a06:	89 d7                	mov    edi,edx
10007a08:	c1 ef 0e             	shr    edi,0xe
10007a0b:	89 d3                	mov    ebx,edx
10007a0d:	c1 eb 16             	shr    ebx,0x16
10007a10:	89 d9                	mov    ecx,ebx
10007a12:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10007a19:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007a1f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007a25:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007a2b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007a31:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007a35:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007a3c:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007a43:	33 84 24 80 10 00 00 	xor    eax,DWORD PTR [esp+0x1080]
10007a4a:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007a51:	31 c8                	xor    eax,ecx
10007a53:	89 c6                	mov    esi,eax
10007a55:	c1 ee 06             	shr    esi,0x6
10007a58:	89 c7                	mov    edi,eax
10007a5a:	c1 ef 0e             	shr    edi,0xe
10007a5d:	89 c3                	mov    ebx,eax
10007a5f:	c1 eb 16             	shr    ebx,0x16
10007a62:	89 d9                	mov    ecx,ebx
10007a64:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007a6b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007a71:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007a77:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007a7d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007a83:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007a87:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007a8e:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007a95:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10007a9c:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007aa3:	31 ca                	xor    edx,ecx
10007aa5:	89 d6                	mov    esi,edx
10007aa7:	c1 ee 06             	shr    esi,0x6
10007aaa:	89 d7                	mov    edi,edx
10007aac:	c1 ef 0e             	shr    edi,0xe
10007aaf:	89 d3                	mov    ebx,edx
10007ab1:	c1 eb 16             	shr    ebx,0x16
10007ab4:	89 d9                	mov    ecx,ebx
10007ab6:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10007abd:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007ac3:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007ac9:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007acf:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007ad5:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007ad9:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007ae0:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007ae7:	33 84 24 88 10 00 00 	xor    eax,DWORD PTR [esp+0x1088]
10007aee:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007af5:	31 c8                	xor    eax,ecx
10007af7:	89 c6                	mov    esi,eax
10007af9:	c1 ee 06             	shr    esi,0x6
10007afc:	89 c7                	mov    edi,eax
10007afe:	c1 ef 0e             	shr    edi,0xe
10007b01:	89 c3                	mov    ebx,eax
10007b03:	c1 eb 16             	shr    ebx,0x16
10007b06:	89 d9                	mov    ecx,ebx
10007b08:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007b0f:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007b15:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007b1b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007b21:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007b27:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007b2b:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007b32:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007b39:	33 94 24 8c 10 00 00 	xor    edx,DWORD PTR [esp+0x108c]
10007b40:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007b47:	31 ca                	xor    edx,ecx
10007b49:	89 d3                	mov    ebx,edx
10007b4b:	c1 eb 06             	shr    ebx,0x6
10007b4e:	89 d7                	mov    edi,edx
10007b50:	c1 ef 0e             	shr    edi,0xe
10007b53:	89 d6                	mov    esi,edx
10007b55:	c1 ee 16             	shr    esi,0x16
10007b58:	89 f1                	mov    ecx,esi
10007b5a:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007b61:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007b67:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007b6d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007b73:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007b79:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007b7d:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007b84:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10007b8b:	33 84 24 90 10 00 00 	xor    eax,DWORD PTR [esp+0x1090]
10007b92:	89 cb                	mov    ebx,ecx
10007b94:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007b9b:	31 d8                	xor    eax,ebx
10007b9d:	89 c6                	mov    esi,eax
10007b9f:	c1 ee 06             	shr    esi,0x6
10007ba2:	89 c7                	mov    edi,eax
10007ba4:	c1 ef 0e             	shr    edi,0xe
10007ba7:	89 c3                	mov    ebx,eax
10007ba9:	c1 eb 16             	shr    ebx,0x16
10007bac:	89 d9                	mov    ecx,ebx
10007bae:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007bb5:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007bbb:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007bc1:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007bc7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007bcd:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007bd1:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007bd8:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007bdf:	33 94 24 94 10 00 00 	xor    edx,DWORD PTR [esp+0x1094]
10007be6:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007bed:	31 ca                	xor    edx,ecx
10007bef:	89 d3                	mov    ebx,edx
10007bf1:	c1 eb 06             	shr    ebx,0x6
10007bf4:	89 d7                	mov    edi,edx
10007bf6:	c1 ef 0e             	shr    edi,0xe
10007bf9:	89 d6                	mov    esi,edx
10007bfb:	c1 ee 16             	shr    esi,0x16
10007bfe:	89 f1                	mov    ecx,esi
10007c00:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007c07:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007c0d:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007c13:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007c19:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007c1f:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007c23:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007c2a:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10007c31:	33 84 24 98 10 00 00 	xor    eax,DWORD PTR [esp+0x1098]
10007c38:	89 cb                	mov    ebx,ecx
10007c3a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007c41:	31 c3                	xor    ebx,eax
10007c43:	89 d0                	mov    eax,edx
10007c45:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10007c4c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10007c4f:	89 84 8c 58 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x1058],eax
10007c56:	89 9c 8c 5c 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x105c],ebx
10007c5d:	83 c1 02             	add    ecx,0x2
10007c60:	89 0c 24             	mov    DWORD PTR [esp],ecx
10007c63:	83 f9 12             	cmp    ecx,0x12
10007c66:	0f 85 94 fa ff ff    	jne    10007700 <_crypt_blowfish_rn+0x125>
10007c6c:	8d 4c 24 58          	lea    ecx,[esp+0x58]
10007c70:	83 c1 10             	add    ecx,0x10
10007c73:	8b 94 24 f0 10 00 00 	mov    edx,DWORD PTR [esp+0x10f0]
10007c7a:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
10007c81:	31 c2                	xor    edx,eax
10007c83:	89 d7                	mov    edi,edx
10007c85:	c1 ef 06             	shr    edi,0x6
10007c88:	89 d5                	mov    ebp,edx
10007c8a:	c1 ed 0e             	shr    ebp,0xe
10007c8d:	89 d0                	mov    eax,edx
10007c8f:	c1 e8 16             	shr    eax,0x16
10007c92:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007c99:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007c9f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007ca5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007cab:	25 fc 03 00 00       	and    eax,0x3fc
10007cb0:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007cb4:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007cbb:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007cc2:	89 c7                	mov    edi,eax
10007cc4:	8b 84 24 f4 10 00 00 	mov    eax,DWORD PTR [esp+0x10f4]
10007ccb:	33 84 24 5c 10 00 00 	xor    eax,DWORD PTR [esp+0x105c]
10007cd2:	03 bc 34 58 0c 00 00 	add    edi,DWORD PTR [esp+esi*1+0xc58]
10007cd9:	31 f8                	xor    eax,edi
10007cdb:	31 d8                	xor    eax,ebx
10007cdd:	89 c7                	mov    edi,eax
10007cdf:	c1 ef 06             	shr    edi,0x6
10007ce2:	89 c5                	mov    ebp,eax
10007ce4:	c1 ed 0e             	shr    ebp,0xe
10007ce7:	89 c3                	mov    ebx,eax
10007ce9:	c1 eb 16             	shr    ebx,0x16
10007cec:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007cf3:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007cf9:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007cff:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007d05:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007d0b:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007d0f:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007d16:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007d1d:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
10007d24:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007d2b:	31 da                	xor    edx,ebx
10007d2d:	89 d7                	mov    edi,edx
10007d2f:	c1 ef 06             	shr    edi,0x6
10007d32:	89 d5                	mov    ebp,edx
10007d34:	c1 ed 0e             	shr    ebp,0xe
10007d37:	89 d3                	mov    ebx,edx
10007d39:	c1 eb 16             	shr    ebx,0x16
10007d3c:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007d43:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007d49:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007d4f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007d55:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007d5b:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007d5f:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007d66:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007d6d:	33 84 24 64 10 00 00 	xor    eax,DWORD PTR [esp+0x1064]
10007d74:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007d7b:	31 d8                	xor    eax,ebx
10007d7d:	89 c7                	mov    edi,eax
10007d7f:	c1 ef 06             	shr    edi,0x6
10007d82:	89 c5                	mov    ebp,eax
10007d84:	c1 ed 0e             	shr    ebp,0xe
10007d87:	89 c3                	mov    ebx,eax
10007d89:	c1 eb 16             	shr    ebx,0x16
10007d8c:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007d93:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007d99:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007d9f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007da5:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007dab:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007daf:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007db6:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007dbd:	33 94 24 68 10 00 00 	xor    edx,DWORD PTR [esp+0x1068]
10007dc4:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007dcb:	31 da                	xor    edx,ebx
10007dcd:	89 d7                	mov    edi,edx
10007dcf:	c1 ef 06             	shr    edi,0x6
10007dd2:	89 d5                	mov    ebp,edx
10007dd4:	c1 ed 0e             	shr    ebp,0xe
10007dd7:	89 d3                	mov    ebx,edx
10007dd9:	c1 eb 16             	shr    ebx,0x16
10007ddc:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007de3:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007de9:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007def:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007df5:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007dfb:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007dff:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007e06:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007e0d:	33 84 24 6c 10 00 00 	xor    eax,DWORD PTR [esp+0x106c]
10007e14:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007e1b:	31 d8                	xor    eax,ebx
10007e1d:	89 c7                	mov    edi,eax
10007e1f:	c1 ef 06             	shr    edi,0x6
10007e22:	89 c5                	mov    ebp,eax
10007e24:	c1 ed 0e             	shr    ebp,0xe
10007e27:	89 c3                	mov    ebx,eax
10007e29:	c1 eb 16             	shr    ebx,0x16
10007e2c:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007e33:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007e39:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007e3f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007e45:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007e4b:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007e4f:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007e56:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007e5d:	33 94 24 70 10 00 00 	xor    edx,DWORD PTR [esp+0x1070]
10007e64:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007e6b:	31 da                	xor    edx,ebx
10007e6d:	89 d7                	mov    edi,edx
10007e6f:	c1 ef 06             	shr    edi,0x6
10007e72:	89 d5                	mov    ebp,edx
10007e74:	c1 ed 0e             	shr    ebp,0xe
10007e77:	89 d3                	mov    ebx,edx
10007e79:	c1 eb 16             	shr    ebx,0x16
10007e7c:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007e83:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007e89:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007e8f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007e95:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007e9b:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007e9f:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007ea6:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007ead:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10007eb4:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007ebb:	31 d8                	xor    eax,ebx
10007ebd:	89 c7                	mov    edi,eax
10007ebf:	c1 ef 06             	shr    edi,0x6
10007ec2:	89 c5                	mov    ebp,eax
10007ec4:	c1 ed 0e             	shr    ebp,0xe
10007ec7:	89 c3                	mov    ebx,eax
10007ec9:	c1 eb 16             	shr    ebx,0x16
10007ecc:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007ed3:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007ed9:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007edf:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007ee5:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007eeb:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007eef:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007ef6:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007efd:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10007f04:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007f0b:	31 da                	xor    edx,ebx
10007f0d:	89 d7                	mov    edi,edx
10007f0f:	c1 ef 06             	shr    edi,0x6
10007f12:	89 d5                	mov    ebp,edx
10007f14:	c1 ed 0e             	shr    ebp,0xe
10007f17:	89 d3                	mov    ebx,edx
10007f19:	c1 eb 16             	shr    ebx,0x16
10007f1c:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007f23:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007f29:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007f2f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007f35:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007f3b:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007f3f:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007f46:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007f4d:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10007f54:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007f5b:	31 d8                	xor    eax,ebx
10007f5d:	89 c7                	mov    edi,eax
10007f5f:	c1 ef 06             	shr    edi,0x6
10007f62:	89 c5                	mov    ebp,eax
10007f64:	c1 ed 0e             	shr    ebp,0xe
10007f67:	89 c3                	mov    ebx,eax
10007f69:	c1 eb 16             	shr    ebx,0x16
10007f6c:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007f73:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007f79:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007f7f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007f85:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007f8b:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007f8f:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007f96:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007f9d:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10007fa4:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007fab:	31 da                	xor    edx,ebx
10007fad:	89 d7                	mov    edi,edx
10007faf:	c1 ef 06             	shr    edi,0x6
10007fb2:	89 d5                	mov    ebp,edx
10007fb4:	c1 ed 0e             	shr    ebp,0xe
10007fb7:	89 d3                	mov    ebx,edx
10007fb9:	c1 eb 16             	shr    ebx,0x16
10007fbc:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007fc3:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007fc9:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007fcf:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007fd5:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007fdb:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007fdf:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007fe6:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007fed:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10007ff4:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007ffb:	31 d8                	xor    eax,ebx
10007ffd:	89 c7                	mov    edi,eax
10007fff:	c1 ef 06             	shr    edi,0x6
10008002:	89 c5                	mov    ebp,eax
10008004:	c1 ed 0e             	shr    ebp,0xe
10008007:	89 c3                	mov    ebx,eax
10008009:	c1 eb 16             	shr    ebx,0x16
1000800c:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008013:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008019:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000801f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008025:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000802b:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
1000802f:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008036:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000803d:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10008044:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000804b:	31 da                	xor    edx,ebx
1000804d:	89 d7                	mov    edi,edx
1000804f:	c1 ef 06             	shr    edi,0x6
10008052:	89 d5                	mov    ebp,edx
10008054:	c1 ed 0e             	shr    ebp,0xe
10008057:	89 d3                	mov    ebx,edx
10008059:	c1 eb 16             	shr    ebx,0x16
1000805c:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008063:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008069:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000806f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008075:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000807b:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
1000807f:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008086:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000808d:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10008094:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000809b:	31 d8                	xor    eax,ebx
1000809d:	89 c7                	mov    edi,eax
1000809f:	c1 ef 06             	shr    edi,0x6
100080a2:	89 c5                	mov    ebp,eax
100080a4:	c1 ed 0e             	shr    ebp,0xe
100080a7:	89 c3                	mov    ebx,eax
100080a9:	c1 eb 16             	shr    ebx,0x16
100080ac:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100080b3:	81 e6 fc 03 00 00    	and    esi,0x3fc
100080b9:	81 e7 fc 03 00 00    	and    edi,0x3fc
100080bf:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100080c5:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100080cb:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100080cf:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100080d6:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100080dd:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
100080e4:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100080eb:	31 da                	xor    edx,ebx
100080ed:	89 d7                	mov    edi,edx
100080ef:	c1 ef 06             	shr    edi,0x6
100080f2:	89 d5                	mov    ebp,edx
100080f4:	c1 ed 0e             	shr    ebp,0xe
100080f7:	89 d3                	mov    ebx,edx
100080f9:	c1 eb 16             	shr    ebx,0x16
100080fc:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008103:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008109:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000810f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008115:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000811b:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
1000811f:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008126:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000812d:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10008134:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000813b:	31 d8                	xor    eax,ebx
1000813d:	89 c6                	mov    esi,eax
1000813f:	c1 ee 06             	shr    esi,0x6
10008142:	89 c5                	mov    ebp,eax
10008144:	c1 ed 0e             	shr    ebp,0xe
10008147:	89 c3                	mov    ebx,eax
10008149:	c1 eb 16             	shr    ebx,0x16
1000814c:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008153:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008159:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000815f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008165:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000816b:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
1000816f:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008176:	33 9c 34 58 08 00 00 	xor    ebx,DWORD PTR [esp+esi*1+0x858]
1000817d:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10008184:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
1000818b:	31 da                	xor    edx,ebx
1000818d:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10008194:	89 41 f0             	mov    DWORD PTR [ecx-0x10],eax
10008197:	89 51 f4             	mov    DWORD PTR [ecx-0xc],edx
1000819a:	8b 9c 24 e8 10 00 00 	mov    ebx,DWORD PTR [esp+0x10e8]
100081a1:	33 9c 24 58 10 00 00 	xor    ebx,DWORD PTR [esp+0x1058]
100081a8:	31 d8                	xor    eax,ebx
100081aa:	89 c5                	mov    ebp,eax
100081ac:	c1 ed 06             	shr    ebp,0x6
100081af:	89 c6                	mov    esi,eax
100081b1:	c1 ee 0e             	shr    esi,0xe
100081b4:	89 c3                	mov    ebx,eax
100081b6:	c1 eb 16             	shr    ebx,0x16
100081b9:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100081c0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100081c6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100081cc:	81 e6 fc 03 00 00    	and    esi,0x3fc
100081d2:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100081d8:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100081dc:	03 9c 34 58 04 00 00 	add    ebx,DWORD PTR [esp+esi*1+0x458]
100081e3:	33 9c 2c 58 08 00 00 	xor    ebx,DWORD PTR [esp+ebp*1+0x858]
100081ea:	8b b4 24 ec 10 00 00 	mov    esi,DWORD PTR [esp+0x10ec]
100081f1:	33 b4 24 5c 10 00 00 	xor    esi,DWORD PTR [esp+0x105c]
100081f8:	31 f2                	xor    edx,esi
100081fa:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10008201:	89 de                	mov    esi,ebx
10008203:	31 d6                	xor    esi,edx
10008205:	89 f5                	mov    ebp,esi
10008207:	c1 ed 06             	shr    ebp,0x6
1000820a:	89 f3                	mov    ebx,esi
1000820c:	c1 eb 0e             	shr    ebx,0xe
1000820f:	89 f2                	mov    edx,esi
10008211:	c1 ea 16             	shr    edx,0x16
10008214:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000821b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008221:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008227:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000822d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008233:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008237:	03 94 1c 58 04 00 00 	add    edx,DWORD PTR [esp+ebx*1+0x458]
1000823e:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
10008245:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
1000824c:	89 d3                	mov    ebx,edx
1000824e:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10008255:	31 c3                	xor    ebx,eax
10008257:	89 df                	mov    edi,ebx
10008259:	c1 ef 06             	shr    edi,0x6
1000825c:	89 dd                	mov    ebp,ebx
1000825e:	c1 ed 0e             	shr    ebp,0xe
10008261:	89 da                	mov    edx,ebx
10008263:	c1 ea 16             	shr    edx,0x16
10008266:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
1000826d:	25 fc 03 00 00       	and    eax,0x3fc
10008272:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008278:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000827e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008284:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008288:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000828f:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008296:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
1000829d:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
100082a4:	31 d6                	xor    esi,edx
100082a6:	89 f0                	mov    eax,esi
100082a8:	c1 e8 06             	shr    eax,0x6
100082ab:	89 f5                	mov    ebp,esi
100082ad:	c1 ed 0e             	shr    ebp,0xe
100082b0:	89 f2                	mov    edx,esi
100082b2:	c1 ea 16             	shr    edx,0x16
100082b5:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100082bc:	81 e7 fc 03 00 00    	and    edi,0x3fc
100082c2:	25 fc 03 00 00       	and    eax,0x3fc
100082c7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100082cd:	81 e2 fc 03 00 00    	and    edx,0x3fc
100082d3:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100082d7:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100082de:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
100082e5:	33 9c 24 68 10 00 00 	xor    ebx,DWORD PTR [esp+0x1068]
100082ec:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
100082f3:	31 d3                	xor    ebx,edx
100082f5:	89 dd                	mov    ebp,ebx
100082f7:	c1 ed 06             	shr    ebp,0x6
100082fa:	89 da                	mov    edx,ebx
100082fc:	c1 ea 0e             	shr    edx,0xe
100082ff:	89 d8                	mov    eax,ebx
10008301:	c1 e8 16             	shr    eax,0x16
10008304:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
1000830b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008311:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008317:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000831d:	25 fc 03 00 00       	and    eax,0x3fc
10008322:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008326:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
1000832d:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10008334:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
1000833b:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008342:	89 c2                	mov    edx,eax
10008344:	31 f2                	xor    edx,esi
10008346:	89 d7                	mov    edi,edx
10008348:	c1 ef 06             	shr    edi,0x6
1000834b:	89 d5                	mov    ebp,edx
1000834d:	c1 ed 0e             	shr    ebp,0xe
10008350:	89 d0                	mov    eax,edx
10008352:	c1 e8 16             	shr    eax,0x16
10008355:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000835c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008362:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008368:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000836e:	25 fc 03 00 00       	and    eax,0x3fc
10008373:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008377:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000837e:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008385:	33 9c 24 70 10 00 00 	xor    ebx,DWORD PTR [esp+0x1070]
1000838c:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008393:	31 c3                	xor    ebx,eax
10008395:	89 df                	mov    edi,ebx
10008397:	c1 ef 06             	shr    edi,0x6
1000839a:	89 dd                	mov    ebp,ebx
1000839c:	c1 ed 0e             	shr    ebp,0xe
1000839f:	89 d8                	mov    eax,ebx
100083a1:	c1 e8 16             	shr    eax,0x16
100083a4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100083ab:	81 e6 fc 03 00 00    	and    esi,0x3fc
100083b1:	81 e7 fc 03 00 00    	and    edi,0x3fc
100083b7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100083bd:	25 fc 03 00 00       	and    eax,0x3fc
100083c2:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100083c6:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100083cd:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100083d4:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
100083db:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100083e2:	31 c2                	xor    edx,eax
100083e4:	89 d7                	mov    edi,edx
100083e6:	c1 ef 06             	shr    edi,0x6
100083e9:	89 d5                	mov    ebp,edx
100083eb:	c1 ed 0e             	shr    ebp,0xe
100083ee:	89 d0                	mov    eax,edx
100083f0:	c1 e8 16             	shr    eax,0x16
100083f3:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100083fa:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008400:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008406:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000840c:	25 fc 03 00 00       	and    eax,0x3fc
10008411:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008415:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000841c:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008423:	33 9c 24 78 10 00 00 	xor    ebx,DWORD PTR [esp+0x1078]
1000842a:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008431:	31 c3                	xor    ebx,eax
10008433:	89 df                	mov    edi,ebx
10008435:	c1 ef 06             	shr    edi,0x6
10008438:	89 dd                	mov    ebp,ebx
1000843a:	c1 ed 0e             	shr    ebp,0xe
1000843d:	89 d8                	mov    eax,ebx
1000843f:	c1 e8 16             	shr    eax,0x16
10008442:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10008449:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000844f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008455:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000845b:	25 fc 03 00 00       	and    eax,0x3fc
10008460:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008464:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000846b:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008472:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10008479:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008480:	31 c2                	xor    edx,eax
10008482:	89 d7                	mov    edi,edx
10008484:	c1 ef 06             	shr    edi,0x6
10008487:	89 d5                	mov    ebp,edx
10008489:	c1 ed 0e             	shr    ebp,0xe
1000848c:	89 d0                	mov    eax,edx
1000848e:	c1 e8 16             	shr    eax,0x16
10008491:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008498:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000849e:	81 e7 fc 03 00 00    	and    edi,0x3fc
100084a4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100084aa:	25 fc 03 00 00       	and    eax,0x3fc
100084af:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100084b3:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100084ba:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100084c1:	33 9c 24 80 10 00 00 	xor    ebx,DWORD PTR [esp+0x1080]
100084c8:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100084cf:	31 c3                	xor    ebx,eax
100084d1:	89 df                	mov    edi,ebx
100084d3:	c1 ef 06             	shr    edi,0x6
100084d6:	89 dd                	mov    ebp,ebx
100084d8:	c1 ed 0e             	shr    ebp,0xe
100084db:	89 d8                	mov    eax,ebx
100084dd:	c1 e8 16             	shr    eax,0x16
100084e0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100084e7:	81 e6 fc 03 00 00    	and    esi,0x3fc
100084ed:	81 e7 fc 03 00 00    	and    edi,0x3fc
100084f3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100084f9:	25 fc 03 00 00       	and    eax,0x3fc
100084fe:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008502:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008509:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008510:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10008517:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
1000851e:	31 d0                	xor    eax,edx
10008520:	89 c7                	mov    edi,eax
10008522:	c1 ef 06             	shr    edi,0x6
10008525:	89 c5                	mov    ebp,eax
10008527:	c1 ed 0e             	shr    ebp,0xe
1000852a:	89 c2                	mov    edx,eax
1000852c:	c1 ea 16             	shr    edx,0x16
1000852f:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008536:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000853c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008542:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008548:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000854e:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008552:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008559:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008560:	33 9c 24 88 10 00 00 	xor    ebx,DWORD PTR [esp+0x1088]
10008567:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000856e:	31 d3                	xor    ebx,edx
10008570:	89 df                	mov    edi,ebx
10008572:	c1 ef 06             	shr    edi,0x6
10008575:	89 dd                	mov    ebp,ebx
10008577:	c1 ed 0e             	shr    ebp,0xe
1000857a:	89 da                	mov    edx,ebx
1000857c:	c1 ea 16             	shr    edx,0x16
1000857f:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10008586:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000858c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008592:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008598:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000859e:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100085a2:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100085a9:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100085b0:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
100085b7:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100085be:	31 d0                	xor    eax,edx
100085c0:	89 c7                	mov    edi,eax
100085c2:	c1 ef 06             	shr    edi,0x6
100085c5:	89 c5                	mov    ebp,eax
100085c7:	c1 ed 0e             	shr    ebp,0xe
100085ca:	89 c2                	mov    edx,eax
100085cc:	c1 ea 16             	shr    edx,0x16
100085cf:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100085d6:	81 e6 fc 03 00 00    	and    esi,0x3fc
100085dc:	81 e7 fc 03 00 00    	and    edi,0x3fc
100085e2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100085e8:	81 e2 fc 03 00 00    	and    edx,0x3fc
100085ee:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100085f2:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100085f9:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008600:	33 9c 24 90 10 00 00 	xor    ebx,DWORD PTR [esp+0x1090]
10008607:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000860e:	31 d3                	xor    ebx,edx
10008610:	89 df                	mov    edi,ebx
10008612:	c1 ef 06             	shr    edi,0x6
10008615:	89 dd                	mov    ebp,ebx
10008617:	c1 ed 0e             	shr    ebp,0xe
1000861a:	89 da                	mov    edx,ebx
1000861c:	c1 ea 16             	shr    edx,0x16
1000861f:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10008626:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000862c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008632:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008638:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000863e:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008642:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008649:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008650:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10008657:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000865e:	31 d0                	xor    eax,edx
10008660:	89 c7                	mov    edi,eax
10008662:	c1 ef 06             	shr    edi,0x6
10008665:	89 c5                	mov    ebp,eax
10008667:	c1 ed 0e             	shr    ebp,0xe
1000866a:	89 c2                	mov    edx,eax
1000866c:	c1 ea 16             	shr    edx,0x16
1000866f:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008676:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000867c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008682:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008688:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000868e:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008692:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008699:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100086a0:	33 9c 24 98 10 00 00 	xor    ebx,DWORD PTR [esp+0x1098]
100086a7:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100086ae:	31 d3                	xor    ebx,edx
100086b0:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
100086b7:	89 41 f8             	mov    DWORD PTR [ecx-0x8],eax
100086ba:	89 59 fc             	mov    DWORD PTR [ecx-0x4],ebx
100086bd:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
100086c4:	39 d1                	cmp    ecx,edx
100086c6:	0f 85 a4 f5 ff ff    	jne    10007c70 <_crypt_blowfish_rn+0x695>
100086cc:	8b 84 24 a0 10 00 00 	mov    eax,DWORD PTR [esp+0x10a0]
100086d3:	31 84 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],eax
100086da:	8b 84 24 a4 10 00 00 	mov    eax,DWORD PTR [esp+0x10a4]
100086e1:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
100086e8:	8b 84 24 a8 10 00 00 	mov    eax,DWORD PTR [esp+0x10a8]
100086ef:	31 84 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],eax
100086f6:	8b 84 24 ac 10 00 00 	mov    eax,DWORD PTR [esp+0x10ac]
100086fd:	31 84 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],eax
10008704:	8b 84 24 b0 10 00 00 	mov    eax,DWORD PTR [esp+0x10b0]
1000870b:	31 84 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],eax
10008712:	8b 84 24 b4 10 00 00 	mov    eax,DWORD PTR [esp+0x10b4]
10008719:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
10008720:	8b 84 24 b8 10 00 00 	mov    eax,DWORD PTR [esp+0x10b8]
10008727:	31 84 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],eax
1000872e:	8b 84 24 bc 10 00 00 	mov    eax,DWORD PTR [esp+0x10bc]
10008735:	31 84 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],eax
1000873c:	8b 84 24 c0 10 00 00 	mov    eax,DWORD PTR [esp+0x10c0]
10008743:	31 84 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],eax
1000874a:	8b 84 24 c4 10 00 00 	mov    eax,DWORD PTR [esp+0x10c4]
10008751:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
10008758:	8b 84 24 c8 10 00 00 	mov    eax,DWORD PTR [esp+0x10c8]
1000875f:	31 84 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],eax
10008766:	8b 84 24 cc 10 00 00 	mov    eax,DWORD PTR [esp+0x10cc]
1000876d:	31 84 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],eax
10008774:	8b 84 24 d0 10 00 00 	mov    eax,DWORD PTR [esp+0x10d0]
1000877b:	31 84 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],eax
10008782:	8b 84 24 d4 10 00 00 	mov    eax,DWORD PTR [esp+0x10d4]
10008789:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
10008790:	8b 84 24 d8 10 00 00 	mov    eax,DWORD PTR [esp+0x10d8]
10008797:	31 84 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],eax
1000879e:	8b 84 24 dc 10 00 00 	mov    eax,DWORD PTR [esp+0x10dc]
100087a5:	31 84 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],eax
100087ac:	8b 84 24 e0 10 00 00 	mov    eax,DWORD PTR [esp+0x10e0]
100087b3:	31 84 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],eax
100087ba:	8b 84 24 e4 10 00 00 	mov    eax,DWORD PTR [esp+0x10e4]
100087c1:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
100087c8:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
100087cf:	b9 00 00 00 00       	mov    ecx,0x0
100087d4:	b8 00 00 00 00       	mov    eax,0x0
100087d9:	83 c3 08             	add    ebx,0x8
100087dc:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
100087e3:	89 c7                	mov    edi,eax
100087e5:	c1 ef 06             	shr    edi,0x6
100087e8:	89 c5                	mov    ebp,eax
100087ea:	c1 ed 0e             	shr    ebp,0xe
100087ed:	89 c2                	mov    edx,eax
100087ef:	c1 ea 16             	shr    edx,0x16
100087f2:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100087f9:	81 e6 fc 03 00 00    	and    esi,0x3fc
100087ff:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008805:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000880b:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008811:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008815:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000881c:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008823:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000882a:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10008831:	31 ca                	xor    edx,ecx
10008833:	89 d5                	mov    ebp,edx
10008835:	c1 ed 06             	shr    ebp,0x6
10008838:	89 d6                	mov    esi,edx
1000883a:	c1 ee 0e             	shr    esi,0xe
1000883d:	89 d1                	mov    ecx,edx
1000883f:	c1 e9 16             	shr    ecx,0x16
10008842:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
10008849:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000884f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008855:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000885b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008861:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008865:	03 8c 34 58 04 00 00 	add    ecx,DWORD PTR [esp+esi*1+0x458]
1000886c:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10008873:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
1000887a:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
10008881:	31 c8                	xor    eax,ecx
10008883:	89 c7                	mov    edi,eax
10008885:	c1 ef 06             	shr    edi,0x6
10008888:	89 c5                	mov    ebp,eax
1000888a:	c1 ed 0e             	shr    ebp,0xe
1000888d:	89 c1                	mov    ecx,eax
1000888f:	c1 e9 16             	shr    ecx,0x16
10008892:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008899:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000889f:	81 e7 fc 03 00 00    	and    edi,0x3fc
100088a5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100088ab:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100088b1:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100088b5:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100088bc:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100088c3:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
100088ca:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100088d1:	31 d1                	xor    ecx,edx
100088d3:	89 cd                	mov    ebp,ecx
100088d5:	c1 ed 06             	shr    ebp,0x6
100088d8:	89 ce                	mov    esi,ecx
100088da:	c1 ee 0e             	shr    esi,0xe
100088dd:	89 ca                	mov    edx,ecx
100088df:	c1 ea 16             	shr    edx,0x16
100088e2:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100088e9:	81 e7 fc 03 00 00    	and    edi,0x3fc
100088ef:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100088f5:	81 e6 fc 03 00 00    	and    esi,0x3fc
100088fb:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008901:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008905:	03 94 34 58 04 00 00 	add    edx,DWORD PTR [esp+esi*1+0x458]
1000890c:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
10008913:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
1000891a:	89 d6                	mov    esi,edx
1000891c:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10008923:	31 c6                	xor    esi,eax
10008925:	89 f2                	mov    edx,esi
10008927:	c1 ea 06             	shr    edx,0x6
1000892a:	89 f5                	mov    ebp,esi
1000892c:	c1 ed 0e             	shr    ebp,0xe
1000892f:	89 f0                	mov    eax,esi
10008931:	c1 e8 16             	shr    eax,0x16
10008934:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000893b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008941:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008947:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000894d:	25 fc 03 00 00       	and    eax,0x3fc
10008952:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008956:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000895d:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10008964:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
1000896b:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008972:	31 c8                	xor    eax,ecx
10008974:	89 c7                	mov    edi,eax
10008976:	c1 ef 06             	shr    edi,0x6
10008979:	89 c5                	mov    ebp,eax
1000897b:	c1 ed 0e             	shr    ebp,0xe
1000897e:	89 c2                	mov    edx,eax
10008980:	c1 ea 16             	shr    edx,0x16
10008983:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000898a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008990:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008996:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000899c:	81 e2 fc 03 00 00    	and    edx,0x3fc
100089a2:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100089a6:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100089ad:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100089b4:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
100089bb:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100089c2:	31 f2                	xor    edx,esi
100089c4:	89 d7                	mov    edi,edx
100089c6:	c1 ef 06             	shr    edi,0x6
100089c9:	89 d5                	mov    ebp,edx
100089cb:	c1 ed 0e             	shr    ebp,0xe
100089ce:	89 d1                	mov    ecx,edx
100089d0:	c1 e9 16             	shr    ecx,0x16
100089d3:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100089da:	81 e6 fc 03 00 00    	and    esi,0x3fc
100089e0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100089e6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100089ec:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100089f2:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100089f6:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100089fd:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008a04:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10008a0b:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008a12:	31 c8                	xor    eax,ecx
10008a14:	89 c7                	mov    edi,eax
10008a16:	c1 ef 06             	shr    edi,0x6
10008a19:	89 c5                	mov    ebp,eax
10008a1b:	c1 ed 0e             	shr    ebp,0xe
10008a1e:	89 c1                	mov    ecx,eax
10008a20:	c1 e9 16             	shr    ecx,0x16
10008a23:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008a2a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008a30:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a36:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a3c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008a42:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008a46:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008a4d:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008a54:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10008a5b:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008a62:	31 ca                	xor    edx,ecx
10008a64:	89 d7                	mov    edi,edx
10008a66:	c1 ef 06             	shr    edi,0x6
10008a69:	89 d5                	mov    ebp,edx
10008a6b:	c1 ed 0e             	shr    ebp,0xe
10008a6e:	89 d1                	mov    ecx,edx
10008a70:	c1 e9 16             	shr    ecx,0x16
10008a73:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008a7a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008a80:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a86:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a8c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008a92:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008a96:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008a9d:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008aa4:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10008aab:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008ab2:	31 c8                	xor    eax,ecx
10008ab4:	89 c7                	mov    edi,eax
10008ab6:	c1 ef 06             	shr    edi,0x6
10008ab9:	89 c5                	mov    ebp,eax
10008abb:	c1 ed 0e             	shr    ebp,0xe
10008abe:	89 c1                	mov    ecx,eax
10008ac0:	c1 e9 16             	shr    ecx,0x16
10008ac3:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008aca:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008ad0:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008ad6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008adc:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008ae2:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008ae6:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008aed:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008af4:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10008afb:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008b02:	31 ca                	xor    edx,ecx
10008b04:	89 d7                	mov    edi,edx
10008b06:	c1 ef 06             	shr    edi,0x6
10008b09:	89 d5                	mov    ebp,edx
10008b0b:	c1 ed 0e             	shr    ebp,0xe
10008b0e:	89 d1                	mov    ecx,edx
10008b10:	c1 e9 16             	shr    ecx,0x16
10008b13:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008b1a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008b20:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b26:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b2c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008b32:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008b36:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008b3d:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008b44:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10008b4b:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008b52:	31 c8                	xor    eax,ecx
10008b54:	89 c7                	mov    edi,eax
10008b56:	c1 ef 06             	shr    edi,0x6
10008b59:	89 c5                	mov    ebp,eax
10008b5b:	c1 ed 0e             	shr    ebp,0xe
10008b5e:	89 c1                	mov    ecx,eax
10008b60:	c1 e9 16             	shr    ecx,0x16
10008b63:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008b6a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008b70:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b76:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b7c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008b82:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008b86:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008b8d:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008b94:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10008b9b:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008ba2:	31 ca                	xor    edx,ecx
10008ba4:	89 d7                	mov    edi,edx
10008ba6:	c1 ef 06             	shr    edi,0x6
10008ba9:	89 d5                	mov    ebp,edx
10008bab:	c1 ed 0e             	shr    ebp,0xe
10008bae:	89 d1                	mov    ecx,edx
10008bb0:	c1 e9 16             	shr    ecx,0x16
10008bb3:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008bba:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008bc0:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008bc6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008bcc:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008bd2:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008bd6:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008bdd:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008be4:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10008beb:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008bf2:	31 c8                	xor    eax,ecx
10008bf4:	89 c7                	mov    edi,eax
10008bf6:	c1 ef 06             	shr    edi,0x6
10008bf9:	89 c5                	mov    ebp,eax
10008bfb:	c1 ed 0e             	shr    ebp,0xe
10008bfe:	89 c1                	mov    ecx,eax
10008c00:	c1 e9 16             	shr    ecx,0x16
10008c03:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008c0a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008c10:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c16:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c1c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008c22:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008c26:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008c2d:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008c34:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10008c3b:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008c42:	31 ca                	xor    edx,ecx
10008c44:	89 d7                	mov    edi,edx
10008c46:	c1 ef 06             	shr    edi,0x6
10008c49:	89 d5                	mov    ebp,edx
10008c4b:	c1 ed 0e             	shr    ebp,0xe
10008c4e:	89 d6                	mov    esi,edx
10008c50:	c1 ee 16             	shr    esi,0x16
10008c53:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10008c5a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008c60:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c66:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c6c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008c72:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008c76:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10008c7d:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10008c84:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10008c8b:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10008c92:	31 f0                	xor    eax,esi
10008c94:	89 c5                	mov    ebp,eax
10008c96:	c1 ed 06             	shr    ebp,0x6
10008c99:	89 c1                	mov    ecx,eax
10008c9b:	c1 e9 0e             	shr    ecx,0xe
10008c9e:	89 c6                	mov    esi,eax
10008ca0:	c1 ee 16             	shr    esi,0x16
10008ca3:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008caa:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008cb0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008cb6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008cbc:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008cc2:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008cc6:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
10008ccd:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10008cd4:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10008cdb:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10008ce2:	89 f1                	mov    ecx,esi
10008ce4:	31 d1                	xor    ecx,edx
10008ce6:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10008ced:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10008cf0:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
10008cf3:	8d b4 24 a0 10 00 00 	lea    esi,[esp+0x10a0]
10008cfa:	39 f3                	cmp    ebx,esi
10008cfc:	0f 85 d7 fa ff ff    	jne    100087d9 <_crypt_blowfish_rn+0x11fe>
10008d02:	8d 5c 24 58          	lea    ebx,[esp+0x58]
10008d06:	83 c3 08             	add    ebx,0x8
10008d09:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10008d10:	89 c7                	mov    edi,eax
10008d12:	c1 ef 06             	shr    edi,0x6
10008d15:	89 c5                	mov    ebp,eax
10008d17:	c1 ed 0e             	shr    ebp,0xe
10008d1a:	89 c2                	mov    edx,eax
10008d1c:	c1 ea 16             	shr    edx,0x16
10008d1f:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008d26:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008d2c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d32:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d38:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008d3e:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008d42:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008d49:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008d50:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008d57:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10008d5e:	31 ca                	xor    edx,ecx
10008d60:	89 d7                	mov    edi,edx
10008d62:	c1 ef 06             	shr    edi,0x6
10008d65:	89 d5                	mov    ebp,edx
10008d67:	c1 ed 0e             	shr    ebp,0xe
10008d6a:	89 d1                	mov    ecx,edx
10008d6c:	c1 e9 16             	shr    ecx,0x16
10008d6f:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008d76:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008d7c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d82:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d88:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008d8e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008d92:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008d99:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008da0:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10008da7:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008dae:	31 c1                	xor    ecx,eax
10008db0:	89 cd                	mov    ebp,ecx
10008db2:	c1 ed 06             	shr    ebp,0x6
10008db5:	89 c8                	mov    eax,ecx
10008db7:	c1 e8 0e             	shr    eax,0xe
10008dba:	89 ce                	mov    esi,ecx
10008dbc:	c1 ee 16             	shr    esi,0x16
10008dbf:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10008dc6:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008dcc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008dd2:	25 fc 03 00 00       	and    eax,0x3fc
10008dd7:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008ddd:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008de1:	03 b4 04 58 04 00 00 	add    esi,DWORD PTR [esp+eax*1+0x458]
10008de8:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10008def:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10008df6:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10008dfd:	31 d6                	xor    esi,edx
10008dff:	89 f5                	mov    ebp,esi
10008e01:	c1 ed 06             	shr    ebp,0x6
10008e04:	89 f2                	mov    edx,esi
10008e06:	c1 ea 0e             	shr    edx,0xe
10008e09:	89 f0                	mov    eax,esi
10008e0b:	c1 e8 16             	shr    eax,0x16
10008e0e:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008e15:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e1b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e21:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008e27:	25 fc 03 00 00       	and    eax,0x3fc
10008e2c:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008e30:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10008e37:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10008e3e:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
10008e45:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008e4c:	31 c1                	xor    ecx,eax
10008e4e:	89 ca                	mov    edx,ecx
10008e50:	c1 ea 06             	shr    edx,0x6
10008e53:	89 cd                	mov    ebp,ecx
10008e55:	c1 ed 0e             	shr    ebp,0xe
10008e58:	89 c8                	mov    eax,ecx
10008e5a:	c1 e8 16             	shr    eax,0x16
10008e5d:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10008e64:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e6a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008e70:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e76:	25 fc 03 00 00       	and    eax,0x3fc
10008e7b:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008e7f:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008e86:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10008e8d:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
10008e94:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008e9b:	31 f0                	xor    eax,esi
10008e9d:	89 c7                	mov    edi,eax
10008e9f:	c1 ef 06             	shr    edi,0x6
10008ea2:	89 c5                	mov    ebp,eax
10008ea4:	c1 ed 0e             	shr    ebp,0xe
10008ea7:	89 c2                	mov    edx,eax
10008ea9:	c1 ea 16             	shr    edx,0x16
10008eac:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008eb3:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008eb9:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008ebf:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ec5:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008ecb:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008ecf:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008ed6:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008edd:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
10008ee4:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008eeb:	31 ca                	xor    edx,ecx
10008eed:	89 d7                	mov    edi,edx
10008eef:	c1 ef 06             	shr    edi,0x6
10008ef2:	89 d5                	mov    ebp,edx
10008ef4:	c1 ed 0e             	shr    ebp,0xe
10008ef7:	89 d1                	mov    ecx,edx
10008ef9:	c1 e9 16             	shr    ecx,0x16
10008efc:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008f03:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008f09:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f0f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f15:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008f1b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008f1f:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008f26:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008f2d:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10008f34:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008f3b:	31 c8                	xor    eax,ecx
10008f3d:	89 c7                	mov    edi,eax
10008f3f:	c1 ef 06             	shr    edi,0x6
10008f42:	89 c5                	mov    ebp,eax
10008f44:	c1 ed 0e             	shr    ebp,0xe
10008f47:	89 c1                	mov    ecx,eax
10008f49:	c1 e9 16             	shr    ecx,0x16
10008f4c:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008f53:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008f59:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f5f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f65:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008f6b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008f6f:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008f76:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008f7d:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10008f84:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008f8b:	31 ca                	xor    edx,ecx
10008f8d:	89 d7                	mov    edi,edx
10008f8f:	c1 ef 06             	shr    edi,0x6
10008f92:	89 d5                	mov    ebp,edx
10008f94:	c1 ed 0e             	shr    ebp,0xe
10008f97:	89 d1                	mov    ecx,edx
10008f99:	c1 e9 16             	shr    ecx,0x16
10008f9c:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008fa3:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008fa9:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008faf:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008fb5:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008fbb:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008fbf:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008fc6:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008fcd:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10008fd4:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008fdb:	31 c8                	xor    eax,ecx
10008fdd:	89 c7                	mov    edi,eax
10008fdf:	c1 ef 06             	shr    edi,0x6
10008fe2:	89 c5                	mov    ebp,eax
10008fe4:	c1 ed 0e             	shr    ebp,0xe
10008fe7:	89 c1                	mov    ecx,eax
10008fe9:	c1 e9 16             	shr    ecx,0x16
10008fec:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008ff3:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008ff9:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008fff:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009005:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000900b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000900f:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009016:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000901d:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10009024:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000902b:	31 ca                	xor    edx,ecx
1000902d:	89 d7                	mov    edi,edx
1000902f:	c1 ef 06             	shr    edi,0x6
10009032:	89 d5                	mov    ebp,edx
10009034:	c1 ed 0e             	shr    ebp,0xe
10009037:	89 d1                	mov    ecx,edx
10009039:	c1 e9 16             	shr    ecx,0x16
1000903c:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009043:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009049:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000904f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009055:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000905b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000905f:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009066:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000906d:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10009074:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000907b:	31 c8                	xor    eax,ecx
1000907d:	89 c7                	mov    edi,eax
1000907f:	c1 ef 06             	shr    edi,0x6
10009082:	89 c5                	mov    ebp,eax
10009084:	c1 ed 0e             	shr    ebp,0xe
10009087:	89 c1                	mov    ecx,eax
10009089:	c1 e9 16             	shr    ecx,0x16
1000908c:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009093:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009099:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000909f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100090a5:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100090ab:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100090af:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100090b6:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100090bd:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
100090c4:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100090cb:	31 ca                	xor    edx,ecx
100090cd:	89 d7                	mov    edi,edx
100090cf:	c1 ef 06             	shr    edi,0x6
100090d2:	89 d5                	mov    ebp,edx
100090d4:	c1 ed 0e             	shr    ebp,0xe
100090d7:	89 d1                	mov    ecx,edx
100090d9:	c1 e9 16             	shr    ecx,0x16
100090dc:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100090e3:	81 e6 fc 03 00 00    	and    esi,0x3fc
100090e9:	81 e7 fc 03 00 00    	and    edi,0x3fc
100090ef:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100090f5:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100090fb:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100090ff:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009106:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000910d:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10009114:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000911b:	31 c8                	xor    eax,ecx
1000911d:	89 c7                	mov    edi,eax
1000911f:	c1 ef 06             	shr    edi,0x6
10009122:	89 c5                	mov    ebp,eax
10009124:	c1 ed 0e             	shr    ebp,0xe
10009127:	89 c1                	mov    ecx,eax
10009129:	c1 e9 16             	shr    ecx,0x16
1000912c:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009133:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009139:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000913f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009145:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000914b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000914f:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009156:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000915d:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10009164:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000916b:	31 ca                	xor    edx,ecx
1000916d:	89 d7                	mov    edi,edx
1000916f:	c1 ef 06             	shr    edi,0x6
10009172:	89 d5                	mov    ebp,edx
10009174:	c1 ed 0e             	shr    ebp,0xe
10009177:	89 d6                	mov    esi,edx
10009179:	c1 ee 16             	shr    esi,0x16
1000917c:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10009183:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009189:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000918f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009195:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000919b:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000919f:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
100091a6:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
100091ad:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
100091b4:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
100091bb:	31 f0                	xor    eax,esi
100091bd:	89 c5                	mov    ebp,eax
100091bf:	c1 ed 06             	shr    ebp,0x6
100091c2:	89 c1                	mov    ecx,eax
100091c4:	c1 e9 0e             	shr    ecx,0xe
100091c7:	89 c6                	mov    esi,eax
100091c9:	c1 ee 16             	shr    esi,0x16
100091cc:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100091d3:	81 e7 fc 03 00 00    	and    edi,0x3fc
100091d9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100091df:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100091e5:	81 e6 fc 03 00 00    	and    esi,0x3fc
100091eb:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
100091ef:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
100091f6:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
100091fd:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10009204:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
1000920b:	89 f1                	mov    ecx,esi
1000920d:	31 d1                	xor    ecx,edx
1000920f:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10009216:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10009219:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
1000921c:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10009223:	39 d3                	cmp    ebx,edx
10009225:	0f 85 db fa ff ff    	jne    10008d06 <_crypt_blowfish_rn+0x172b>
1000922b:	8b 94 24 e8 10 00 00 	mov    edx,DWORD PTR [esp+0x10e8]
10009232:	8b 84 24 ec 10 00 00 	mov    eax,DWORD PTR [esp+0x10ec]
10009239:	8b 9c 24 f0 10 00 00 	mov    ebx,DWORD PTR [esp+0x10f0]
10009240:	8b 8c 24 f4 10 00 00 	mov    ecx,DWORD PTR [esp+0x10f4]
10009247:	31 94 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],edx
1000924e:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
10009255:	31 9c 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],ebx
1000925c:	31 8c 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],ecx
10009263:	31 94 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],edx
1000926a:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
10009271:	31 9c 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],ebx
10009278:	31 8c 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],ecx
1000927f:	31 94 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],edx
10009286:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
1000928d:	31 9c 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],ebx
10009294:	31 8c 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],ecx
1000929b:	31 94 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],edx
100092a2:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
100092a9:	31 9c 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],ebx
100092b0:	31 8c 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],ecx
100092b7:	31 94 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],edx
100092be:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
100092c5:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
100092cc:	be 00 00 00 00       	mov    esi,0x0
100092d1:	b8 00 00 00 00       	mov    eax,0x0
100092d6:	83 c3 08             	add    ebx,0x8
100092d9:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
100092e0:	89 c7                	mov    edi,eax
100092e2:	c1 ef 06             	shr    edi,0x6
100092e5:	89 c5                	mov    ebp,eax
100092e7:	c1 ed 0e             	shr    ebp,0xe
100092ea:	89 c2                	mov    edx,eax
100092ec:	c1 ea 16             	shr    edx,0x16
100092ef:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
100092f6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100092fc:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009302:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009308:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000930e:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009312:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009319:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009320:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009327:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
1000932e:	31 d6                	xor    esi,edx
10009330:	89 f7                	mov    edi,esi
10009332:	c1 ef 06             	shr    edi,0x6
10009335:	89 f5                	mov    ebp,esi
10009337:	c1 ed 0e             	shr    ebp,0xe
1000933a:	89 f1                	mov    ecx,esi
1000933c:	c1 e9 16             	shr    ecx,0x16
1000933f:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009346:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000934c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009352:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009358:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000935e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009362:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009369:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009370:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10009377:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
1000937e:	31 c8                	xor    eax,ecx
10009380:	89 c5                	mov    ebp,eax
10009382:	c1 ed 06             	shr    ebp,0x6
10009385:	89 c2                	mov    edx,eax
10009387:	c1 ea 0e             	shr    edx,0xe
1000938a:	89 c1                	mov    ecx,eax
1000938c:	c1 e9 16             	shr    ecx,0x16
1000938f:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10009396:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000939c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100093a2:	81 e2 fc 03 00 00    	and    edx,0x3fc
100093a8:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100093ae:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100093b2:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
100093b9:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
100093c0:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
100093c7:	89 ca                	mov    edx,ecx
100093c9:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
100093d0:	31 d6                	xor    esi,edx
100093d2:	89 f7                	mov    edi,esi
100093d4:	c1 ef 06             	shr    edi,0x6
100093d7:	89 f5                	mov    ebp,esi
100093d9:	c1 ed 0e             	shr    ebp,0xe
100093dc:	89 f1                	mov    ecx,esi
100093de:	c1 e9 16             	shr    ecx,0x16
100093e1:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
100093e8:	81 e2 fc 03 00 00    	and    edx,0x3fc
100093ee:	81 e7 fc 03 00 00    	and    edi,0x3fc
100093f4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100093fa:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009400:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009404:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000940b:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009412:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
10009419:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009420:	31 c1                	xor    ecx,eax
10009422:	89 cd                	mov    ebp,ecx
10009424:	c1 ed 06             	shr    ebp,0x6
10009427:	89 ca                	mov    edx,ecx
10009429:	c1 ea 0e             	shr    edx,0xe
1000942c:	89 c8                	mov    eax,ecx
1000942e:	c1 e8 16             	shr    eax,0x16
10009431:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009438:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000943e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009444:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000944a:	25 fc 03 00 00       	and    eax,0x3fc
1000944f:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009453:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
1000945a:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009461:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
10009468:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000946f:	89 c2                	mov    edx,eax
10009471:	31 f2                	xor    edx,esi
10009473:	89 d5                	mov    ebp,edx
10009475:	c1 ed 06             	shr    ebp,0x6
10009478:	89 d6                	mov    esi,edx
1000947a:	c1 ee 0e             	shr    esi,0xe
1000947d:	89 d0                	mov    eax,edx
1000947f:	c1 e8 16             	shr    eax,0x16
10009482:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
10009489:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000948f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009495:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000949b:	25 fc 03 00 00       	and    eax,0x3fc
100094a0:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100094a4:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
100094ab:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
100094b2:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
100094b9:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100094c0:	89 c6                	mov    esi,eax
100094c2:	31 ce                	xor    esi,ecx
100094c4:	89 f7                	mov    edi,esi
100094c6:	c1 ef 06             	shr    edi,0x6
100094c9:	89 f5                	mov    ebp,esi
100094cb:	c1 ed 0e             	shr    ebp,0xe
100094ce:	89 f0                	mov    eax,esi
100094d0:	c1 e8 16             	shr    eax,0x16
100094d3:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
100094da:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100094e0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100094e6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100094ec:	25 fc 03 00 00       	and    eax,0x3fc
100094f1:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100094f5:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100094fc:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10009503:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
1000950a:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10009511:	31 c2                	xor    edx,eax
10009513:	89 d7                	mov    edi,edx
10009515:	c1 ef 06             	shr    edi,0x6
10009518:	89 d5                	mov    ebp,edx
1000951a:	c1 ed 0e             	shr    ebp,0xe
1000951d:	89 d0                	mov    eax,edx
1000951f:	c1 e8 16             	shr    eax,0x16
10009522:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10009529:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000952f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009535:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000953b:	25 fc 03 00 00       	and    eax,0x3fc
10009540:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009544:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000954b:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10009552:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
10009559:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10009560:	31 c6                	xor    esi,eax
10009562:	89 f7                	mov    edi,esi
10009564:	c1 ef 06             	shr    edi,0x6
10009567:	89 f5                	mov    ebp,esi
10009569:	c1 ed 0e             	shr    ebp,0xe
1000956c:	89 f0                	mov    eax,esi
1000956e:	c1 e8 16             	shr    eax,0x16
10009571:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10009578:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000957e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009584:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000958a:	25 fc 03 00 00       	and    eax,0x3fc
1000958f:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009593:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000959a:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100095a1:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
100095a8:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
100095af:	31 c2                	xor    edx,eax
100095b1:	89 d7                	mov    edi,edx
100095b3:	c1 ef 06             	shr    edi,0x6
100095b6:	89 d5                	mov    ebp,edx
100095b8:	c1 ed 0e             	shr    ebp,0xe
100095bb:	89 d0                	mov    eax,edx
100095bd:	c1 e8 16             	shr    eax,0x16
100095c0:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
100095c7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100095cd:	81 e7 fc 03 00 00    	and    edi,0x3fc
100095d3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100095d9:	25 fc 03 00 00       	and    eax,0x3fc
100095de:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100095e2:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100095e9:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100095f0:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
100095f7:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
100095fe:	31 c6                	xor    esi,eax
10009600:	89 f7                	mov    edi,esi
10009602:	c1 ef 06             	shr    edi,0x6
10009605:	89 f5                	mov    ebp,esi
10009607:	c1 ed 0e             	shr    ebp,0xe
1000960a:	89 f0                	mov    eax,esi
1000960c:	c1 e8 16             	shr    eax,0x16
1000960f:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10009616:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000961c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009622:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009628:	25 fc 03 00 00       	and    eax,0x3fc
1000962d:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009631:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009638:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000963f:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10009646:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
1000964d:	31 d0                	xor    eax,edx
1000964f:	89 c7                	mov    edi,eax
10009651:	c1 ef 06             	shr    edi,0x6
10009654:	89 c5                	mov    ebp,eax
10009656:	c1 ed 0e             	shr    ebp,0xe
10009659:	89 c2                	mov    edx,eax
1000965b:	c1 ea 16             	shr    edx,0x16
1000965e:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009665:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000966b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009671:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009677:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000967d:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009681:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009688:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000968f:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
10009696:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000969d:	31 d6                	xor    esi,edx
1000969f:	89 f7                	mov    edi,esi
100096a1:	c1 ef 06             	shr    edi,0x6
100096a4:	89 f5                	mov    ebp,esi
100096a6:	c1 ed 0e             	shr    ebp,0xe
100096a9:	89 f2                	mov    edx,esi
100096ab:	c1 ea 16             	shr    edx,0x16
100096ae:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
100096b5:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100096bb:	81 e7 fc 03 00 00    	and    edi,0x3fc
100096c1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100096c7:	81 e2 fc 03 00 00    	and    edx,0x3fc
100096cd:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100096d1:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100096d8:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100096df:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
100096e6:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100096ed:	31 d0                	xor    eax,edx
100096ef:	89 c7                	mov    edi,eax
100096f1:	c1 ef 06             	shr    edi,0x6
100096f4:	89 c5                	mov    ebp,eax
100096f6:	c1 ed 0e             	shr    ebp,0xe
100096f9:	89 c2                	mov    edx,eax
100096fb:	c1 ea 16             	shr    edx,0x16
100096fe:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009705:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000970b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009711:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009717:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000971d:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009721:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009728:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000972f:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
10009736:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000973d:	31 d6                	xor    esi,edx
1000973f:	89 f2                	mov    edx,esi
10009741:	c1 ea 06             	shr    edx,0x6
10009744:	89 f5                	mov    ebp,esi
10009746:	c1 ed 0e             	shr    ebp,0xe
10009749:	89 f1                	mov    ecx,esi
1000974b:	c1 e9 16             	shr    ecx,0x16
1000974e:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009755:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000975b:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009761:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009767:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000976d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009771:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009778:	33 8c 14 58 08 00 00 	xor    ecx,DWORD PTR [esp+edx*1+0x858]
1000977f:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10009786:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
1000978d:	31 c8                	xor    eax,ecx
1000978f:	89 c5                	mov    ebp,eax
10009791:	c1 ed 06             	shr    ebp,0x6
10009794:	89 c2                	mov    edx,eax
10009796:	c1 ea 0e             	shr    edx,0xe
10009799:	89 c1                	mov    ecx,eax
1000979b:	c1 e9 16             	shr    ecx,0x16
1000979e:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100097a5:	81 e7 fc 03 00 00    	and    edi,0x3fc
100097ab:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100097b1:	81 e2 fc 03 00 00    	and    edx,0x3fc
100097b7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100097bd:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100097c1:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
100097c8:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
100097cf:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
100097d6:	89 ca                	mov    edx,ecx
100097d8:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
100097df:	31 d6                	xor    esi,edx
100097e1:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
100097e8:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
100097eb:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
100097ee:	8d bc 24 a0 10 00 00 	lea    edi,[esp+0x10a0]
100097f5:	39 fb                	cmp    ebx,edi
100097f7:	0f 85 d9 fa ff ff    	jne    100092d6 <_crypt_blowfish_rn+0x1cfb>
100097fd:	8d 5c 24 58          	lea    ebx,[esp+0x58]
10009801:	83 c3 08             	add    ebx,0x8
10009804:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
1000980b:	89 c7                	mov    edi,eax
1000980d:	c1 ef 06             	shr    edi,0x6
10009810:	89 c5                	mov    ebp,eax
10009812:	c1 ed 0e             	shr    ebp,0xe
10009815:	89 c2                	mov    edx,eax
10009817:	c1 ea 16             	shr    edx,0x16
1000981a:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009821:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009827:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000982d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009833:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009839:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000983d:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009844:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000984b:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009852:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10009859:	31 f2                	xor    edx,esi
1000985b:	89 d7                	mov    edi,edx
1000985d:	c1 ef 06             	shr    edi,0x6
10009860:	89 d5                	mov    ebp,edx
10009862:	c1 ed 0e             	shr    ebp,0xe
10009865:	89 d6                	mov    esi,edx
10009867:	c1 ee 16             	shr    esi,0x16
1000986a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10009871:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009877:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000987d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009883:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009889:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000988d:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10009894:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
1000989b:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
100098a2:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
100098a9:	31 c6                	xor    esi,eax
100098ab:	89 f7                	mov    edi,esi
100098ad:	c1 ef 06             	shr    edi,0x6
100098b0:	89 f5                	mov    ebp,esi
100098b2:	c1 ed 0e             	shr    ebp,0xe
100098b5:	89 f1                	mov    ecx,esi
100098b7:	c1 e9 16             	shr    ecx,0x16
100098ba:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
100098c1:	25 fc 03 00 00       	and    eax,0x3fc
100098c6:	81 e7 fc 03 00 00    	and    edi,0x3fc
100098cc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100098d2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100098d8:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100098dc:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100098e3:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100098ea:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
100098f1:	03 8c 04 58 0c 00 00 	add    ecx,DWORD PTR [esp+eax*1+0xc58]
100098f8:	31 d1                	xor    ecx,edx
100098fa:	89 c8                	mov    eax,ecx
100098fc:	c1 e8 06             	shr    eax,0x6
100098ff:	89 cd                	mov    ebp,ecx
10009901:	c1 ed 0e             	shr    ebp,0xe
10009904:	89 ca                	mov    edx,ecx
10009906:	c1 ea 16             	shr    edx,0x16
10009909:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009910:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009916:	25 fc 03 00 00       	and    eax,0x3fc
1000991b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009921:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009927:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000992b:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009932:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
10009939:	33 b4 24 68 10 00 00 	xor    esi,DWORD PTR [esp+0x1068]
10009940:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10009947:	31 d6                	xor    esi,edx
10009949:	89 f2                	mov    edx,esi
1000994b:	c1 ea 06             	shr    edx,0x6
1000994e:	89 f5                	mov    ebp,esi
10009950:	c1 ed 0e             	shr    ebp,0xe
10009953:	89 f0                	mov    eax,esi
10009955:	c1 e8 16             	shr    eax,0x16
10009958:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000995f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009965:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000996b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009971:	25 fc 03 00 00       	and    eax,0x3fc
10009976:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000997a:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009981:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10009988:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
1000998f:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009996:	31 c1                	xor    ecx,eax
10009998:	89 c8                	mov    eax,ecx
1000999a:	c1 e8 06             	shr    eax,0x6
1000999d:	89 cd                	mov    ebp,ecx
1000999f:	c1 ed 0e             	shr    ebp,0xe
100099a2:	89 ca                	mov    edx,ecx
100099a4:	c1 ea 16             	shr    edx,0x16
100099a7:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100099ae:	81 e7 fc 03 00 00    	and    edi,0x3fc
100099b4:	25 fc 03 00 00       	and    eax,0x3fc
100099b9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100099bf:	81 e2 fc 03 00 00    	and    edx,0x3fc
100099c5:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100099c9:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100099d0:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
100099d7:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
100099de:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
100099e5:	31 d6                	xor    esi,edx
100099e7:	89 f2                	mov    edx,esi
100099e9:	c1 ea 06             	shr    edx,0x6
100099ec:	89 f5                	mov    ebp,esi
100099ee:	c1 ed 0e             	shr    ebp,0xe
100099f1:	89 f0                	mov    eax,esi
100099f3:	c1 e8 16             	shr    eax,0x16
100099f6:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100099fd:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009a03:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009a09:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009a0f:	25 fc 03 00 00       	and    eax,0x3fc
10009a14:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009a18:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009a1f:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10009a26:	33 8c 24 74 10 00 00 	xor    ecx,DWORD PTR [esp+0x1074]
10009a2d:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009a34:	31 c1                	xor    ecx,eax
10009a36:	89 cf                	mov    edi,ecx
10009a38:	c1 ef 06             	shr    edi,0x6
10009a3b:	89 cd                	mov    ebp,ecx
10009a3d:	c1 ed 0e             	shr    ebp,0xe
10009a40:	89 ca                	mov    edx,ecx
10009a42:	c1 ea 16             	shr    edx,0x16
10009a45:	8d 04 8d 00 00 00 00 	lea    eax,[ecx*4+0x0]
10009a4c:	25 fc 03 00 00       	and    eax,0x3fc
10009a51:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009a57:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009a5d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009a63:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009a67:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009a6e:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009a75:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
10009a7c:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
10009a83:	31 d6                	xor    esi,edx
10009a85:	89 f2                	mov    edx,esi
10009a87:	c1 ea 06             	shr    edx,0x6
10009a8a:	89 f5                	mov    ebp,esi
10009a8c:	c1 ed 0e             	shr    ebp,0xe
10009a8f:	89 f0                	mov    eax,esi
10009a91:	c1 e8 16             	shr    eax,0x16
10009a94:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009a9b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009aa1:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009aa7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009aad:	25 fc 03 00 00       	and    eax,0x3fc
10009ab2:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009ab6:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009abd:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10009ac4:	33 8c 24 7c 10 00 00 	xor    ecx,DWORD PTR [esp+0x107c]
10009acb:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009ad2:	31 c8                	xor    eax,ecx
10009ad4:	89 c7                	mov    edi,eax
10009ad6:	c1 ef 06             	shr    edi,0x6
10009ad9:	89 c5                	mov    ebp,eax
10009adb:	c1 ed 0e             	shr    ebp,0xe
10009ade:	89 c2                	mov    edx,eax
10009ae0:	c1 ea 16             	shr    edx,0x16
10009ae3:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009aea:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009af0:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009af6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009afc:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009b02:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009b06:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009b0d:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009b14:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
10009b1b:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009b22:	31 d6                	xor    esi,edx
10009b24:	89 f7                	mov    edi,esi
10009b26:	c1 ef 06             	shr    edi,0x6
10009b29:	89 f5                	mov    ebp,esi
10009b2b:	c1 ed 0e             	shr    ebp,0xe
10009b2e:	89 f1                	mov    ecx,esi
10009b30:	c1 e9 16             	shr    ecx,0x16
10009b33:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009b3a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009b40:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009b46:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009b4c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009b52:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009b56:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009b5d:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009b64:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10009b6b:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009b72:	31 c8                	xor    eax,ecx
10009b74:	89 c7                	mov    edi,eax
10009b76:	c1 ef 06             	shr    edi,0x6
10009b79:	89 c5                	mov    ebp,eax
10009b7b:	c1 ed 0e             	shr    ebp,0xe
10009b7e:	89 c2                	mov    edx,eax
10009b80:	c1 ea 16             	shr    edx,0x16
10009b83:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009b8a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009b90:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009b96:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009b9c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009ba2:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009ba6:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009bad:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009bb4:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
10009bbb:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009bc2:	31 d6                	xor    esi,edx
10009bc4:	89 f7                	mov    edi,esi
10009bc6:	c1 ef 06             	shr    edi,0x6
10009bc9:	89 f5                	mov    ebp,esi
10009bcb:	c1 ed 0e             	shr    ebp,0xe
10009bce:	89 f1                	mov    ecx,esi
10009bd0:	c1 e9 16             	shr    ecx,0x16
10009bd3:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009bda:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009be0:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009be6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009bec:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009bf2:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009bf6:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009bfd:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009c04:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10009c0b:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009c12:	31 c8                	xor    eax,ecx
10009c14:	89 c7                	mov    edi,eax
10009c16:	c1 ef 06             	shr    edi,0x6
10009c19:	89 c5                	mov    ebp,eax
10009c1b:	c1 ed 0e             	shr    ebp,0xe
10009c1e:	89 c2                	mov    edx,eax
10009c20:	c1 ea 16             	shr    edx,0x16
10009c23:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009c2a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009c30:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009c36:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009c3c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009c42:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009c46:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009c4d:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009c54:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
10009c5b:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009c62:	31 d6                	xor    esi,edx
10009c64:	89 f7                	mov    edi,esi
10009c66:	c1 ef 06             	shr    edi,0x6
10009c69:	89 f5                	mov    ebp,esi
10009c6b:	c1 ed 0e             	shr    ebp,0xe
10009c6e:	89 f1                	mov    ecx,esi
10009c70:	c1 e9 16             	shr    ecx,0x16
10009c73:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009c7a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009c80:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009c86:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009c8c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009c92:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009c96:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009c9d:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009ca4:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10009cab:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009cb2:	31 c8                	xor    eax,ecx
10009cb4:	89 c7                	mov    edi,eax
10009cb6:	c1 ef 06             	shr    edi,0x6
10009cb9:	89 c5                	mov    ebp,eax
10009cbb:	c1 ed 0e             	shr    ebp,0xe
10009cbe:	89 c2                	mov    edx,eax
10009cc0:	c1 ea 16             	shr    edx,0x16
10009cc3:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009cca:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009cd0:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009cd6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009cdc:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009ce2:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009ce6:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009ced:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009cf4:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
10009cfb:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009d02:	31 d6                	xor    esi,edx
10009d04:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10009d0b:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10009d0e:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
10009d11:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10009d18:	39 d3                	cmp    ebx,edx
10009d1a:	0f 85 e1 fa ff ff    	jne    10009801 <_crypt_blowfish_rn+0x2226>
10009d20:	ff 4c 24 04          	dec    DWORD PTR [esp+0x4]
10009d24:	0f 85 a2 e9 ff ff    	jne    100086cc <_crypt_blowfish_rn+0x10f1>
10009d2a:	8b 84 24 58 10 00 00 	mov    eax,DWORD PTR [esp+0x1058]
10009d31:	89 04 24             	mov    DWORD PTR [esp],eax
10009d34:	8b 84 24 5c 10 00 00 	mov    eax,DWORD PTR [esp+0x105c]
10009d3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10009d3f:	8b 84 24 60 10 00 00 	mov    eax,DWORD PTR [esp+0x1060]
10009d46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10009d4a:	8b 84 24 64 10 00 00 	mov    eax,DWORD PTR [esp+0x1064]
10009d51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10009d55:	8b 84 24 68 10 00 00 	mov    eax,DWORD PTR [esp+0x1068]
10009d5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10009d60:	8b 84 24 6c 10 00 00 	mov    eax,DWORD PTR [esp+0x106c]
10009d67:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10009d6b:	8b 84 24 70 10 00 00 	mov    eax,DWORD PTR [esp+0x1070]
10009d72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10009d76:	8b 84 24 74 10 00 00 	mov    eax,DWORD PTR [esp+0x1074]
10009d7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10009d81:	8b 84 24 78 10 00 00 	mov    eax,DWORD PTR [esp+0x1078]
10009d88:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10009d8c:	8b 84 24 7c 10 00 00 	mov    eax,DWORD PTR [esp+0x107c]
10009d93:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10009d97:	8b 84 24 80 10 00 00 	mov    eax,DWORD PTR [esp+0x1080]
10009d9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10009da2:	8b 84 24 84 10 00 00 	mov    eax,DWORD PTR [esp+0x1084]
10009da9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10009dad:	8b 84 24 88 10 00 00 	mov    eax,DWORD PTR [esp+0x1088]
10009db4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10009db8:	8b 84 24 8c 10 00 00 	mov    eax,DWORD PTR [esp+0x108c]
10009dbf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10009dc3:	8b 84 24 90 10 00 00 	mov    eax,DWORD PTR [esp+0x1090]
10009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10009dce:	8b 84 24 94 10 00 00 	mov    eax,DWORD PTR [esp+0x1094]
10009dd5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10009dd9:	8b 84 24 98 10 00 00 	mov    eax,DWORD PTR [esp+0x1098]
10009de0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10009de4:	8b 84 24 9c 10 00 00 	mov    eax,DWORD PTR [esp+0x109c]
10009deb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10009def:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
10009df3:	89 5c 24 4c          	mov    DWORD PTR [esp+0x4c],ebx
10009df7:	8b 04 9d 00 b4 00 10 	mov    eax,DWORD PTR [ebx*4+0x1000b400]	10009dfa: R_386_32	.data
10009dfe:	8b 0c 9d 04 b4 00 10 	mov    ecx,DWORD PTR [ebx*4+0x1000b404]	10009e01: R_386_32	.data
10009e05:	bb 40 00 00 00       	mov    ebx,0x40
10009e0a:	33 04 24             	xor    eax,DWORD PTR [esp]
10009e0d:	89 c7                	mov    edi,eax
10009e0f:	c1 ef 06             	shr    edi,0x6
10009e12:	89 c5                	mov    ebp,eax
10009e14:	c1 ed 0e             	shr    ebp,0xe
10009e17:	89 c2                	mov    edx,eax
10009e19:	c1 ea 16             	shr    edx,0x16
10009e1c:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009e23:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009e29:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009e2f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009e35:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009e3b:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009e3f:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009e46:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009e4d:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10009e54:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
10009e58:	31 ca                	xor    edx,ecx
10009e5a:	89 d7                	mov    edi,edx
10009e5c:	c1 ef 06             	shr    edi,0x6
10009e5f:	89 d5                	mov    ebp,edx
10009e61:	c1 ed 0e             	shr    ebp,0xe
10009e64:	89 d1                	mov    ecx,edx
10009e66:	c1 e9 16             	shr    ecx,0x16
10009e69:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009e70:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009e76:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009e7c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009e82:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009e88:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009e8c:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009e93:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009e9a:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
10009e9e:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009ea5:	31 c1                	xor    ecx,eax
10009ea7:	89 cd                	mov    ebp,ecx
10009ea9:	c1 ed 06             	shr    ebp,0x6
10009eac:	89 ce                	mov    esi,ecx
10009eae:	c1 ee 0e             	shr    esi,0xe
10009eb1:	89 c8                	mov    eax,ecx
10009eb3:	c1 e8 16             	shr    eax,0x16
10009eb6:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009ebd:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009ec3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ec9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009ecf:	25 fc 03 00 00       	and    eax,0x3fc
10009ed4:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009ed8:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
10009edf:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009ee6:	33 54 24 0c          	xor    edx,DWORD PTR [esp+0xc]
10009eea:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009ef1:	89 c6                	mov    esi,eax
10009ef3:	31 d6                	xor    esi,edx
10009ef5:	89 f5                	mov    ebp,esi
10009ef7:	c1 ed 06             	shr    ebp,0x6
10009efa:	89 f2                	mov    edx,esi
10009efc:	c1 ea 0e             	shr    edx,0xe
10009eff:	89 f0                	mov    eax,esi
10009f01:	c1 e8 16             	shr    eax,0x16
10009f04:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009f0b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009f11:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009f17:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009f1d:	25 fc 03 00 00       	and    eax,0x3fc
10009f22:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009f26:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10009f2d:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009f34:	33 4c 24 10          	xor    ecx,DWORD PTR [esp+0x10]
10009f38:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009f3f:	31 c1                	xor    ecx,eax
10009f41:	89 ca                	mov    edx,ecx
10009f43:	c1 ea 06             	shr    edx,0x6
10009f46:	89 cd                	mov    ebp,ecx
10009f48:	c1 ed 0e             	shr    ebp,0xe
10009f4b:	89 c8                	mov    eax,ecx
10009f4d:	c1 e8 16             	shr    eax,0x16
10009f50:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009f57:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009f5d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009f63:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009f69:	25 fc 03 00 00       	and    eax,0x3fc
10009f6e:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009f72:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009f79:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10009f80:	33 74 24 14          	xor    esi,DWORD PTR [esp+0x14]
10009f84:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009f8b:	31 f0                	xor    eax,esi
10009f8d:	89 c7                	mov    edi,eax
10009f8f:	c1 ef 06             	shr    edi,0x6
10009f92:	89 c5                	mov    ebp,eax
10009f94:	c1 ed 0e             	shr    ebp,0xe
10009f97:	89 c2                	mov    edx,eax
10009f99:	c1 ea 16             	shr    edx,0x16
10009f9c:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009fa3:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009fa9:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009faf:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009fb5:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009fbb:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009fbf:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009fc6:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009fcd:	33 4c 24 18          	xor    ecx,DWORD PTR [esp+0x18]
10009fd1:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10009fd8:	31 ca                	xor    edx,ecx
10009fda:	89 d7                	mov    edi,edx
10009fdc:	c1 ef 06             	shr    edi,0x6
10009fdf:	89 d5                	mov    ebp,edx
10009fe1:	c1 ed 0e             	shr    ebp,0xe
10009fe4:	89 d1                	mov    ecx,edx
10009fe6:	c1 e9 16             	shr    ecx,0x16
10009fe9:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009ff0:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009ff6:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009ffc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a002:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a008:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a00c:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a013:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a01a:	33 44 24 1c          	xor    eax,DWORD PTR [esp+0x1c]
1000a01e:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a025:	31 c8                	xor    eax,ecx
1000a027:	89 c7                	mov    edi,eax
1000a029:	c1 ef 06             	shr    edi,0x6
1000a02c:	89 c5                	mov    ebp,eax
1000a02e:	c1 ed 0e             	shr    ebp,0xe
1000a031:	89 c1                	mov    ecx,eax
1000a033:	c1 e9 16             	shr    ecx,0x16
1000a036:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a03d:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a043:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a049:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a04f:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a055:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a059:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a060:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a067:	33 54 24 20          	xor    edx,DWORD PTR [esp+0x20]
1000a06b:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a072:	31 ca                	xor    edx,ecx
1000a074:	89 d7                	mov    edi,edx
1000a076:	c1 ef 06             	shr    edi,0x6
1000a079:	89 d5                	mov    ebp,edx
1000a07b:	c1 ed 0e             	shr    ebp,0xe
1000a07e:	89 d1                	mov    ecx,edx
1000a080:	c1 e9 16             	shr    ecx,0x16
1000a083:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000a08a:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a090:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a096:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a09c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a0a2:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a0a6:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a0ad:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a0b4:	33 44 24 24          	xor    eax,DWORD PTR [esp+0x24]
1000a0b8:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a0bf:	31 c8                	xor    eax,ecx
1000a0c1:	89 c7                	mov    edi,eax
1000a0c3:	c1 ef 06             	shr    edi,0x6
1000a0c6:	89 c5                	mov    ebp,eax
1000a0c8:	c1 ed 0e             	shr    ebp,0xe
1000a0cb:	89 c1                	mov    ecx,eax
1000a0cd:	c1 e9 16             	shr    ecx,0x16
1000a0d0:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a0d7:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a0dd:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a0e3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a0e9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a0ef:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a0f3:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a0fa:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a101:	33 54 24 28          	xor    edx,DWORD PTR [esp+0x28]
1000a105:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a10c:	31 ca                	xor    edx,ecx
1000a10e:	89 d7                	mov    edi,edx
1000a110:	c1 ef 06             	shr    edi,0x6
1000a113:	89 d5                	mov    ebp,edx
1000a115:	c1 ed 0e             	shr    ebp,0xe
1000a118:	89 d1                	mov    ecx,edx
1000a11a:	c1 e9 16             	shr    ecx,0x16
1000a11d:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000a124:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a12a:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a130:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a136:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a13c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a140:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a147:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a14e:	33 44 24 2c          	xor    eax,DWORD PTR [esp+0x2c]
1000a152:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a159:	31 c8                	xor    eax,ecx
1000a15b:	89 c7                	mov    edi,eax
1000a15d:	c1 ef 06             	shr    edi,0x6
1000a160:	89 c5                	mov    ebp,eax
1000a162:	c1 ed 0e             	shr    ebp,0xe
1000a165:	89 c1                	mov    ecx,eax
1000a167:	c1 e9 16             	shr    ecx,0x16
1000a16a:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a171:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a177:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a17d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a183:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a189:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a18d:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a194:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a19b:	33 54 24 30          	xor    edx,DWORD PTR [esp+0x30]
1000a19f:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a1a6:	31 ca                	xor    edx,ecx
1000a1a8:	89 d7                	mov    edi,edx
1000a1aa:	c1 ef 06             	shr    edi,0x6
1000a1ad:	89 d5                	mov    ebp,edx
1000a1af:	c1 ed 0e             	shr    ebp,0xe
1000a1b2:	89 d1                	mov    ecx,edx
1000a1b4:	c1 e9 16             	shr    ecx,0x16
1000a1b7:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000a1be:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a1c4:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a1ca:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a1d0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a1d6:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a1da:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a1e1:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a1e8:	33 44 24 34          	xor    eax,DWORD PTR [esp+0x34]
1000a1ec:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a1f3:	31 c8                	xor    eax,ecx
1000a1f5:	89 c7                	mov    edi,eax
1000a1f7:	c1 ef 06             	shr    edi,0x6
1000a1fa:	89 c5                	mov    ebp,eax
1000a1fc:	c1 ed 0e             	shr    ebp,0xe
1000a1ff:	89 c1                	mov    ecx,eax
1000a201:	c1 e9 16             	shr    ecx,0x16
1000a204:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a20b:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a211:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a217:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a21d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a223:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a227:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a22e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a235:	33 54 24 38          	xor    edx,DWORD PTR [esp+0x38]
1000a239:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a240:	31 ca                	xor    edx,ecx
1000a242:	89 d7                	mov    edi,edx
1000a244:	c1 ef 06             	shr    edi,0x6
1000a247:	89 d5                	mov    ebp,edx
1000a249:	c1 ed 0e             	shr    ebp,0xe
1000a24c:	89 d6                	mov    esi,edx
1000a24e:	c1 ee 16             	shr    esi,0x16
1000a251:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000a258:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a25e:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a264:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a26a:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a270:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000a274:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
1000a27b:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
1000a282:	33 44 24 3c          	xor    eax,DWORD PTR [esp+0x3c]
1000a286:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
1000a28d:	31 f0                	xor    eax,esi
1000a28f:	89 c5                	mov    ebp,eax
1000a291:	c1 ed 06             	shr    ebp,0x6
1000a294:	89 c1                	mov    ecx,eax
1000a296:	c1 e9 0e             	shr    ecx,0xe
1000a299:	89 c6                	mov    esi,eax
1000a29b:	c1 ee 16             	shr    esi,0x16
1000a29e:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000a2a5:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a2ab:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a2b1:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a2b7:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a2bd:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000a2c1:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
1000a2c8:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
1000a2cf:	33 54 24 40          	xor    edx,DWORD PTR [esp+0x40]
1000a2d3:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
1000a2da:	89 f1                	mov    ecx,esi
1000a2dc:	31 d1                	xor    ecx,edx
1000a2de:	33 44 24 44          	xor    eax,DWORD PTR [esp+0x44]
1000a2e2:	4b                   	dec    ebx
1000a2e3:	0f 85 21 fb ff ff    	jne    10009e0a <_crypt_blowfish_rn+0x282f>
1000a2e9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
1000a2ed:	89 84 9c e8 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10e8],eax
1000a2f4:	89 8c 9c ec 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10ec],ecx
1000a2fb:	83 44 24 48 02       	add    DWORD PTR [esp+0x48],0x2
1000a300:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000a304:	83 f8 06             	cmp    eax,0x6
1000a307:	0f 85 e2 fa ff ff    	jne    10009def <_crypt_blowfish_rn+0x2814>
1000a30d:	b9 07 00 00 00       	mov    ecx,0x7
1000a312:	8b bc 24 1c 11 00 00 	mov    edi,DWORD PTR [esp+0x111c]
1000a319:	8b b4 24 18 11 00 00 	mov    esi,DWORD PTR [esp+0x1118]
1000a320:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000a322:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
1000a329:	0f be 40 1c          	movsx  eax,BYTE PTR [eax+0x1c]
1000a32d:	8a 80 c0 c4 00 10    	mov    al,BYTE PTR [eax+0x1000c4c0]	1000a32f: R_386_32	.data
1000a333:	83 e0 30             	and    eax,0x30
1000a336:	8a 80 80 c4 00 10    	mov    al,BYTE PTR [eax+0x1000c480]	1000a338: R_386_32	.data
1000a33c:	88 04 24             	mov    BYTE PTR [esp],al
1000a33f:	8b 9c 24 1c 11 00 00 	mov    ebx,DWORD PTR [esp+0x111c]
1000a346:	88 43 1c             	mov    BYTE PTR [ebx+0x1c],al
1000a349:	6a 06                	push   0x6
1000a34b:	8d 74 24 5c          	lea    esi,[esp+0x5c]
1000a34f:	8d 9c 24 ec 10 00 00 	lea    ebx,[esp+0x10ec]
1000a356:	53                   	push   ebx
1000a357:	e8 f5 d1 ff ff       	call   10007551 <BF_swap>
1000a35c:	6a 17                	push   0x17
1000a35e:	53                   	push   ebx
1000a35f:	8b 84 24 2c 11 00 00 	mov    eax,DWORD PTR [esp+0x112c]
1000a366:	83 c0 1d             	add    eax,0x1d
1000a369:	50                   	push   eax
1000a36a:	e8 3d d1 ff ff       	call   100074ac <BF_encode>
1000a36f:	8b 84 24 30 11 00 00 	mov    eax,DWORD PTR [esp+0x1130]
1000a376:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
1000a37a:	68 a8 10 00 00       	push   0x10a8
1000a37f:	56                   	push   esi
1000a380:	e8 0b d0 ff ff       	call   10007390 <clean>
1000a385:	83 c4 1c             	add    esp,0x1c
1000a388:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
1000a38f:	eb 29                	jmp    1000a3ba <_crypt_blowfish_rn+0x2ddf>
1000a391:	c7 05 00 00 00 00 22 00 00 00 	mov    DWORD PTR ds:0x0,0x22	1000a393: R_386_32	_bcrypt_errno
1000a39b:	b8 00 00 00 00       	mov    eax,0x0
1000a3a0:	eb 18                	jmp    1000a3ba <_crypt_blowfish_rn+0x2ddf>
1000a3a2:	80 fa 31             	cmp    dl,0x31
1000a3a5:	0f 8e a3 d2 ff ff    	jle    1000764e <_crypt_blowfish_rn+0x73>
1000a3ab:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000a3ad: R_386_32	_bcrypt_errno
1000a3b5:	b8 00 00 00 00       	mov    eax,0x0
1000a3ba:	81 c4 00 11 00 00    	add    esp,0x1100
1000a3c0:	5b                   	pop    ebx
1000a3c1:	5e                   	pop    esi
1000a3c2:	5f                   	pop    edi
1000a3c3:	5d                   	pop    ebp
1000a3c4:	c3                   	ret    
1000a3c5:	6a 10                	push   0x10
1000a3c7:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
1000a3ce:	50                   	push   eax
1000a3cf:	e8 bc cf ff ff       	call   10007390 <clean>
1000a3d4:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000a3d6: R_386_32	_bcrypt_errno
1000a3de:	83 c4 08             	add    esp,0x8
1000a3e1:	b8 00 00 00 00       	mov    eax,0x0
1000a3e6:	eb d2                	jmp    1000a3ba <_crypt_blowfish_rn+0x2ddf>

1000a3e8 <_crypt_gensalt_blowfish_rn>:
1000a3e8:	53                   	push   ebx
1000a3e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000a3ed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000a3f1:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
1000a3f6:	7e 19                	jle    1000a411 <_crypt_gensalt_blowfish_rn+0x29>
1000a3f8:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
1000a3fd:	0f 8e 88 00 00 00    	jle    1000a48b <_crypt_gensalt_blowfish_rn+0xa3>
1000a403:	85 c9                	test   ecx,ecx
1000a405:	74 33                	je     1000a43a <_crypt_gensalt_blowfish_rn+0x52>
1000a407:	8d 41 fc             	lea    eax,[ecx-0x4]
1000a40a:	83 f8 1b             	cmp    eax,0x1b
1000a40d:	76 30                	jbe    1000a43f <_crypt_gensalt_blowfish_rn+0x57>
1000a40f:	eb 07                	jmp    1000a418 <_crypt_gensalt_blowfish_rn+0x30>
1000a411:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000a416:	7e 03                	jle    1000a41b <_crypt_gensalt_blowfish_rn+0x33>
1000a418:	c6 03 00             	mov    BYTE PTR [ebx],0x0
1000a41b:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
1000a420:	7e 11                	jle    1000a433 <_crypt_gensalt_blowfish_rn+0x4b>
1000a422:	b8 16 00 00 00       	mov    eax,0x16
1000a427:	a3 00 00 00 00       	mov    ds:0x0,eax	1000a428: R_386_32	_bcrypt_errno
1000a42c:	b8 00 00 00 00       	mov    eax,0x0
1000a431:	eb 56                	jmp    1000a489 <_crypt_gensalt_blowfish_rn+0xa1>
1000a433:	b8 22 00 00 00       	mov    eax,0x22
1000a438:	eb ed                	jmp    1000a427 <_crypt_gensalt_blowfish_rn+0x3f>
1000a43a:	b9 05 00 00 00       	mov    ecx,0x5
1000a43f:	c6 03 24             	mov    BYTE PTR [ebx],0x24
1000a442:	c6 43 01 32          	mov    BYTE PTR [ebx+0x1],0x32
1000a446:	c6 43 02 61          	mov    BYTE PTR [ebx+0x2],0x61
1000a44a:	c6 43 03 24          	mov    BYTE PTR [ebx+0x3],0x24
1000a44e:	b8 cd cc cc cc       	mov    eax,0xcccccccd
1000a453:	f7 e1                	mul    ecx
1000a455:	89 d0                	mov    eax,edx
1000a457:	c1 e8 03             	shr    eax,0x3
1000a45a:	8d 50 30             	lea    edx,[eax+0x30]
1000a45d:	88 53 04             	mov    BYTE PTR [ebx+0x4],dl
1000a460:	8d 04 80             	lea    eax,[eax+eax*4]
1000a463:	01 c0                	add    eax,eax
1000a465:	29 c1                	sub    ecx,eax
1000a467:	83 c1 30             	add    ecx,0x30
1000a46a:	88 4b 05             	mov    BYTE PTR [ebx+0x5],cl
1000a46d:	c6 43 06 24          	mov    BYTE PTR [ebx+0x6],0x24
1000a471:	6a 10                	push   0x10
1000a473:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a477:	8d 43 07             	lea    eax,[ebx+0x7]
1000a47a:	50                   	push   eax
1000a47b:	e8 2c d0 ff ff       	call   100074ac <BF_encode>
1000a480:	c6 43 1d 00          	mov    BYTE PTR [ebx+0x1d],0x0
1000a484:	83 c4 0c             	add    esp,0xc
1000a487:	89 d8                	mov    eax,ebx
1000a489:	5b                   	pop    ebx
1000a48a:	c3                   	ret    
1000a48b:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000a490:	7f 86                	jg     1000a418 <_crypt_gensalt_blowfish_rn+0x30>
1000a492:	b8 22 00 00 00       	mov    eax,0x22
1000a497:	eb 8e                	jmp    1000a427 <_crypt_gensalt_blowfish_rn+0x3f>

1000a499 <bcrypt_gensalt>:
1000a499:	57                   	push   edi
1000a49a:	56                   	push   esi
1000a49b:	53                   	push   ebx
1000a49c:	83 ec 10             	sub    esp,0x10
1000a49f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000a4a3:	89 e3                	mov    ebx,esp
1000a4a5:	8d 74 24 10          	lea    esi,[esp+0x10]
1000a4a9:	e8 fc ff ff ff       	call   1000a4aa <bcrypt_gensalt+0x11>	1000a4aa: R_386_PC32	_bcrypt_rand
1000a4ae:	88 03                	mov    BYTE PTR [ebx],al
1000a4b0:	43                   	inc    ebx
1000a4b1:	39 f3                	cmp    ebx,esi
1000a4b3:	75 f4                	jne    1000a4a9 <bcrypt_gensalt+0x10>
1000a4b5:	8d 47 fc             	lea    eax,[edi-0x4]
1000a4b8:	83 f8 1b             	cmp    eax,0x1b
1000a4bb:	76 05                	jbe    1000a4c2 <bcrypt_gensalt+0x29>
1000a4bd:	bf 0c 00 00 00       	mov    edi,0xc
1000a4c2:	83 ec 0c             	sub    esp,0xc
1000a4c5:	6a 40                	push   0x40
1000a4c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
1000a4cb:	6a 10                	push   0x10
1000a4cd:	8d 44 24 18          	lea    eax,[esp+0x18]
1000a4d1:	50                   	push   eax
1000a4d2:	57                   	push   edi
1000a4d3:	e8 10 ff ff ff       	call   1000a3e8 <_crypt_gensalt_blowfish_rn>
1000a4d8:	85 c0                	test   eax,eax
1000a4da:	0f 94 c0             	sete   al
1000a4dd:	0f b6 c0             	movzx  eax,al
1000a4e0:	83 c4 30             	add    esp,0x30
1000a4e3:	5b                   	pop    ebx
1000a4e4:	5e                   	pop    esi
1000a4e5:	5f                   	pop    edi
1000a4e6:	c3                   	ret    

1000a4e7 <bcrypt_hashpw>:
1000a4e7:	6a 40                	push   0x40
1000a4e9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a4ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a4f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a4f5:	e8 e1 d0 ff ff       	call   100075db <_crypt_blowfish_rn>
1000a4fa:	83 c4 10             	add    esp,0x10
1000a4fd:	85 c0                	test   eax,eax
1000a4ff:	0f 94 c0             	sete   al
1000a502:	0f b6 c0             	movzx  eax,al
1000a505:	c3                   	ret    
1000a506:	66 90                	xchg   ax,ax

1000a508 <TERMINAL_KEYBUFFER_IN_SIZE>:
1000a508:	80 00 00 00                                         ....

1000a50c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000a50c:	80 00 00 00 2e 00 2e 2e 00 2f 00 43 6f 75 6c 64     ........./.Could
1000a51c:	6e 27 74 20 6f 70 65 6e 20 62 61 73 65 20 70 61     n't open base pa
1000a52c:	74 68 2e 0a 00 25 73 20 2d 3e 20 25 73 0a 00 43     th...%s -> %s..C
1000a53c:	4f 55 4c 44 20 4e 4f 54 20 43 52 45 41 54 45 00     OULD NOT CREATE.
1000a54c:	43 4f 55 4c 44 20 4e 4f 54 20 43 4f 50 59 00 4e     COULD NOT COPY.N
1000a55c:	4f 20 4d 45 4d 4f 52 59 00 42 61 63 6b 75 70 00     O MEMORY.Backup.
1000a56c:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000a57c:	2f 42 61 63 6b 75 70 2f 00 30 31 32 33 34 35 36     /Backup/.0123456
1000a58c:	37 38 39 41 42 43 44 45 46 00 43 3a 2f 55 73 65     789ABCDEF.C:/Use
1000a59c:	72 73 2f 00 2f 44 65 73 6b 74 6f 70 00 2f 44 6f     rs/./Desktop./Do
1000a5ac:	63 75 6d 65 6e 74 73 00 2f 44 6f 77 6e 6c 6f 61     cuments./Downloa
1000a5bc:	64 73 00 2f 50 69 63 74 75 72 65 73 00 2f 54 72     ds./Pictures./Tr
1000a5cc:	61 73 68 20 42 69 6e 00 2f 4d 75 73 69 63 00 2f     ash Bin./Music./
1000a5dc:	4d 6f 76 69 65 73 00 43 3a 2f 42 61 6e 61 6e 61     Movies.C:/Banana
1000a5ec:	2f 52 65 67 69 73 74 72 79 2f 55 73 65 72 2f 00     /Registry/User/.
1000a5fc:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000a60c:	72 79 2f 44 65 66 61 75 6c 74 55 73 65 72 00 00     ry/DefaultUser..
1000a61c:	43 68 65 63 6b 69 6e 67 0a 20 73 79 73 74 65 6d     Checking. system
1000a62c:	0a 20 72 65 71 75 69 72 65 6d 65 6e 74 73 0a 0a     . requirements..
1000a63c:	20 4c 65 67 61 6c 0a 20 6e 6f 74 69 63 65 73 0a      Legal. notices.
1000a64c:	0a 20 43 68 6f 6f 73 69 6e 67 20 61 0a 20 70 61     . Choosing a. pa
1000a65c:	72 74 69 74 69 6f 6e 0a 0a 20 46 6f 72 6d 61 74     rtition.. Format
1000a66c:	74 69 6e 67 0a 0a 20 43 6f 70 79 69 6e 67 20 66     ting.. Copying f
1000a67c:	69 6c 65 73 0a 0a 20 52 65 73 74 61 72 74 69 6e     iles.. Restartin
1000a68c:	67 0a 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72     g. your computer
1000a69c:	0a 0a 00 20 46 69 6e 61 6c 69 73 69 6e 67 20 74     ... Finalising t
1000a6ac:	68 65 0a 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     he. installation
1000a6bc:	00 00 00 00 50 6c 65 61 73 65 20 77 61 69 74 20     ....Please wait 
1000a6cc:	77 68 69 6c 65 20 74 68 65 20 69 6e 73 74 61 6c     while the instal
1000a6dc:	6c 20 66 69 6e 69 73 68 65 73 2e 00 10 20 00 20     l finishes... . 
1000a6ec:	20 00 41 6c 6c 6f 63 61 74 69 6e 67 20 74 68 65      .Allocating the
1000a6fc:	20 73 77 61 70 66 69 6c 65 00 55 70 64 61 74 69      swapfile.Updati
1000a70c:	6e 67 20 74 68 65 20 72 65 67 69 73 74 72 79 00     ng the registry.
1000a71c:	43 72 65 61 74 69 6e 67 20 75 73 65 72 20 61 63     Creating user ac
1000a72c:	63 6f 75 6e 74 00 49 6e 73 74 61 6c 6c 69 6e 67     count.Installing
1000a73c:	20 70 61 63 6b 61 67 65 73 00 42 61 63 6b 69 6e      packages.Backin
1000a74c:	67 20 75 70 20 73 79 73 74 65 6d 20 66 69 6c 65     g up system file
1000a75c:	73 00 46 69 6e 69 73 68 69 6e 67 20 74 6f 75 63     s.Finishing touc
1000a76c:	68 65 73 00 51 51 2d 30 30 30 2d 30 30 30 2d 30     hes.QQ-000-000-0
1000a77c:	30 30 2d 51 00 00 00 00 43 3a 2f 42 61 6e 61 6e     00-Q....C:/Banan
1000a78c:	61 2f 53 79 73 74 65 6d 2f 74 69 6d 65 7a 6f 6e     a/System/timezon
1000a79c:	65 73 2e 74 78 74 00 20 00 2e 2e 2e 20 00 00 00     es.txt. .... ...
1000a7ac:	53 65 74 74 69 6e 67 20 75 70 20 74 68 65 20 73     Setting up the s
1000a7bc:	79 73 74 65 6d 20 66 6f 72 20 74 68 65 20 66 69     ystem for the fi
1000a7cc:	72 73 74 20 74 69 6d 65 00 0a 0a 0a 0a 0a 0a 00     rst time........
1000a7dc:	54 65 73 74 00 41 41 2d 30 30 30 30 30 2d 30 30     Test.AA-00000-00
1000a7ec:	30 30 30 2d 41 00 57 57 2d 38 38 33 38 38 2d 35     000-A.WW-88388-5
1000a7fc:	35 35 35 35 2d 4e 00 43 72 65 61 74 65 20 4e 65     5555-N.Create Ne
1000a80c:	77 20 55 73 65 72 00 42 61 6e 61 6e 61 20 53 65     w User.Banana Se
1000a81c:	74 75 70 00 50 6c 65 61 73 65 20 65 6e 74 65 72     tup.Please enter
1000a82c:	20 79 6f 75 72 20 64 65 74 61 69 6c 73 2e 20 50      your details. P
1000a83c:	72 65 73 73 20 54 41 42 20 74 6f 20 73 77 69 74     ress TAB to swit
1000a84c:	63 68 00 00 62 65 74 77 65 65 6e 20 66 69 65 6c     ch..between fiel
1000a85c:	64 73 2c 20 6f 72 20 45 53 43 20 74 6f 20 63 61     ds, or ESC to ca
1000a86c:	6e 63 65 6c 2e 00 62 65 74 77 65 65 6e 20 66 69     ncel..between fi
1000a87c:	65 6c 64 73 2e 00 4e 61 6d 65 00 43 6f 6d 70 61     elds..Name.Compa
1000a88c:	6e 79 00 50 61 73 73 77 6f 72 64 00 43 6f 6e 66     ny.Password.Conf
1000a89c:	69 72 6d 00 70 61 73 73 77 6f 72 64 00 00 00 00     irm.password....
1000a8ac:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000a8bc:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000a8cc:	20 20 20 20 00 20 11 00 20 20 20 00 2a 00 50 72         . ..   .*.Pr
1000a8dc:	65 73 73 20 45 4e 54 45 52 20 74 6f 20 73 75 62     ess ENTER to sub
1000a8ec:	6d 69 74 00 20 20 20 20 20 20 20 20 20 20 20 20     mit.            
1000a8fc:	20 20 20 20 20 20 20 20 20 20 00 20 20 20 4f 4b               .   OK
1000a90c:	20 20 20 00 20 20 11 00 43 4f 55 4c 44 20 4e 4f        .  ..COULD NO
1000a91c:	54 20 53 41 56 45 00 59 4f 55 52 20 50 41 53 53     T SAVE.YOUR PASS
1000a92c:	57 4f 52 44 20 28 41 29 00 59 4f 55 52 20 50 41     WORD (A).YOUR PA
1000a93c:	53 53 57 4f 52 44 20 28 42 29 00 44 61 74 65 20     SSWORD (B).Date 
1000a94c:	61 6e 64 20 54 69 6d 65 00 31 34 2f 30 35 2f 32     and Time.14/05/2
1000a95c:	30 32 31 20 31 38 3a 35 35 3a 30 30 00 00 00 00     021 18:55:00....
1000a96c:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 74 68 65     Please enter the
1000a97c:	20 63 75 72 72 65 6e 74 20 64 61 74 65 20 61 6e      current date an
1000a98c:	64 20 74 69 6d 65 2c 00 61 6e 64 20 74 68 65 6e     d time,.and then
1000a99c:	20 70 72 65 73 73 20 45 4e 54 45 52 2e 00 44 44      press ENTER..DD
1000a9ac:	2f 4d 4d 2f 59 59 59 59 20 48 48 3a 4d 4d 3a 53     /MM/YYYY HH:MM:S
1000a9bc:	53 00 45 53 43 3a 20 47 6f 20 62 61 63 6b 20 61     S.ESC: Go back a
1000a9cc:	20 73 63 72 65 65 6e 00 50 6c 65 61 73 65 20 73      screen.Please s
1000a9dc:	65 6c 65 63 74 20 79 6f 75 72 20 74 69 6d 65 7a     elect your timez
1000a9ec:	6f 6e 65 20 61 6e 64 20 74 68 65 6e 20 70 72 65     one and then pre
1000a9fc:	73 73 20 45 4e 54 45 52 2e 00 55 73 65 72 20 49     ss ENTER..User I
1000aa0c:	6e 74 65 72 66 61 63 65 00 00 00 00 50 6c 65 61     nterface....Plea
1000aa1c:	73 65 20 73 65 6c 65 63 74 20 74 68 65 20 75 73     se select the us
1000aa2c:	65 72 20 69 6e 74 65 72 66 61 63 65 20 79 6f 75     er interface you
1000aa3c:	20 77 61 6e 74 20 42 61 6e 61 6e 61 00 00 00 00      want Banana....
1000aa4c:	74 6f 20 62 6f 6f 74 20 69 6e 74 6f 20 62 79 20     to boot into by 
1000aa5c:	64 65 66 61 75 6c 74 20 77 68 65 6e 20 79 6f 75     default when you
1000aa6c:	20 73 74 61 72 74 20 74 68 65 20 63 6f 6d 70 75      start the compu
1000aa7c:	74 65 72 2e 00 49 6e 76 61 6c 69 64 20 50 72 6f     ter..Invalid Pro
1000aa8c:	64 75 63 74 20 4b 65 79 00 00 00 00 59 6f 75 20     duct Key....You 
1000aa9c:	64 6f 20 6e 6f 74 20 68 61 76 65 20 61 20 76 61     do not have a va
1000aaac:	6c 69 64 20 70 72 6f 64 75 63 74 20 6b 65 79 2e     lid product key.
1000aabc:	0a 00 00 00 59 6f 75 20 6e 65 65 64 20 61 20 76     ....You need a v
1000aacc:	61 6c 69 64 20 70 72 6f 64 75 63 74 20 6b 65 79     alid product key
1000aadc:	20 69 6e 20 6f 72 64 65 72 20 74 6f 00 75 73 65      in order to.use
1000aaec:	20 42 61 6e 61 6e 61 2e 00 00 00 00 50 72 65 73      Banana.....Pres
1000aafc:	73 20 45 4e 54 45 52 20 74 6f 20 72 65 2d 65 6e     s ENTER to re-en
1000ab0c:	74 65 72 20 79 6f 75 72 20 70 72 6f 64 75 63 74     ter your product
1000ab1c:	20 6b 65 79 2e 00 50 72 6f 64 75 63 74 20 4b 65      key..Product Ke
1000ab2c:	79 00 00 00 50 6c 65 61 73 65 20 65 6e 74 65 72     y...Please enter
1000ab3c:	20 79 6f 75 72 20 70 72 6f 64 75 63 74 20 6b 65      your product ke
1000ab4c:	79 20 62 65 6c 6f 77 2c 00 00 00 00 54 68 65 20     y below,....The 
1000ab5c:	65 6e 74 65 72 65 64 20 70 72 6f 64 75 63 74 20     entered product 
1000ab6c:	6b 65 79 20 77 61 73 20 69 6e 76 61 6c 69 64 2e     key was invalid.
1000ab7c:	00 00 00 00 50 72 65 73 73 20 61 6e 79 20 6b 65     ....Press any ke
1000ab8c:	79 20 74 6f 20 63 6f 6e 74 69 6e 75 65 20 61 6e     y to continue an
1000ab9c:	64 20 74 68 65 6e 00 00 65 6e 74 65 72 20 74 68     d then..enter th
1000abac:	65 20 70 72 6f 64 75 63 74 20 6b 65 79 20 63 6f     e product key co
1000abbc:	72 72 65 63 74 6c 79 2e 00 46 69 6e 61 6c 69 73     rrectly..Finalis
1000abcc:	69 6e 67 20 49 6e 73 74 61 6c 6c 61 74 69 6f 6e     ing Installation
1000abdc:	00 00 00 00 53 59 53 54 45 4d 2e 44 4c 4c 20 54     ....SYSTEM.DLL T
1000abec:	4f 44 4f 3a 20 72 65 67 69 73 74 72 79 20 72 65     ODO: registry re
1000abfc:	61 64 0a 00 43 3a 2f 42 61 6e 61 6e 61 2f 52 65     ad..C:/Banana/Re
1000ac0c:	67 69 73 74 72 79 2f 53 79 73 74 65 6d 00 43 3a     gistry/System.C:
1000ac1c:	2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74 72 79     /Banana/Registry
1000ac2c:	2f 55 73 65 72 00 00 00 43 3a 2f 42 61 6e 61 6e     /User...C:/Banan
1000ac3c:	61 2f 52 65 67 69 73 74 72 79 2f 44 65 66 61 75     a/Registry/Defau
1000ac4c:	6c 74 53 79 73 74 65 6d 00 00 00 00 20 42 6f 6f     ltSystem.... Boo
1000ac5c:	74 20 74 6f 20 63 6f 6d 6d 61 6e 64 20 6c 69 6e     t to command lin
1000ac6c:	65 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     e               
1000ac7c:	00 00 00 00 20 42 6f 6f 74 20 74 6f 20 67 72 61     .... Boot to gra
1000ac8c:	70 68 69 63 61 6c 20 69 6e 74 65 72 66 61 63 65     phical interface
1000ac9c:	20 28 56 47 41 29 20 20 00 00 00 00 20 42 6f 6f      (VGA)  .... Boo
1000acac:	74 20 74 6f 20 67 72 61 70 68 69 63 61 6c 20 69     t to graphical i
1000acbc:	6e 74 65 72 66 61 63 65 20 28 56 45 53 41 29 20     nterface (VESA) 
1000accc:	00 00 00 00 58 ac 00 10 80 ac 00 10 a8 ac 00 10     ....X...........	1000acd0: R_386_32	.text
	1000acd4: R_386_32	.text
	1000acd8: R_386_32	.text
1000acdc:	4c 6f 61 64 69 6e 67 20 65 78 74 65 6e 73 69 6f     Loading extensio
1000acec:	6e 73 2e 2e 2e 00 0a 0a 3a 0a 00 2f 25 73 0a 00     ns......:../%s..
1000acfc:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000ad0c:	2f 73 65 74 75 70 69 73 64 2e 6f 6e 65 00 53 59     /setupisd.one.SY
1000ad1c:	53 49 4e 49 54 20 46 41 49 4c 55 52 45 00 43 3a     SINIT FAILURE.C:
1000ad2c:	2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 63     /Banana/System/c
1000ad3c:	6f 6d 6d 61 6e 64 2e 65 78 65 00 43 3a 2f 44 45     ommand.exe.C:/DE
1000ad4c:	2e 42 55 47 00 00 00 00 43 3a 2f 42 61 6e 61 6e     .BUG....C:/Banan
1000ad5c:	61 2f 52 65 67 69 73 74 72 79 2f 53 79 73 74 65     a/Registry/Syste
1000ad6c:	6d 2f 53 59 53 54 45 4d 2e 52 45 47 00 42 41 4e     m/SYSTEM.REG.BAN
1000ad7c:	41 4e 41 00 72 65 67 73 61 66 65 6e 61 6d 65 20     ANA.regsafename 
1000ad8c:	3d 20 25 73 0a 00 42 41 4e 41 4e 41 2f 55 53 45     = %s..BANANA/USE
1000ad9c:	52 53 2f 00 75 73 65 72 42 61 73 65 50 61 74 68     RS/.userBasePath
1000adac:	20 3d 20 25 73 0a 00 53 45 54 55 50 00 42 4f 4f      = %s..SETUP.BOO
1000adbc:	54 00 54 49 4d 45 00 55 53 45 52 53 00 46 49 4c     T.TIME.USERS.FIL
1000adcc:	45 41 53 53 4f 43 00 42 41 4e 41 4e 41 2f 46 49     EASSOC.BANANA/FI
1000addc:	4c 45 41 53 53 4f 43 00 4f 50 45 4e 00 45 44 49     LEASSOC.OPEN.EDI
1000adec:	54 00 50 52 49 4e 54 00 49 43 4f 4e 00 44 45 53     T.PRINT.ICON.DES
1000adfc:	43 52 00 43 55 53 54 4f 4d 56 45 52 42 00 43 55     CR.CUSTOMVERB.CU
1000ae0c:	53 54 4f 4d 50 52 4f 47 00 42 41 4e 41 4e 41 2f     STOMPROG.BANANA/
1000ae1c:	54 49 4d 45 00 54 49 4d 45 5a 4f 4e 45 00 42 41     TIME.TIMEZONE.BA
1000ae2c:	4e 41 4e 41 2f 53 45 54 55 50 00 4e 41 4d 45 00     NANA/SETUP.NAME.
1000ae3c:	43 4f 4d 50 41 4e 59 00 50 52 4f 44 55 43 54 4b     COMPANY.PRODUCTK
1000ae4c:	45 59 00 42 41 4e 41 4e 41 2f 55 53 45 52 53 00     EY.BANANA/USERS.
1000ae5c:	53 41 4c 54 00 50 41 53 53 57 4f 52 44 00 44 49     SALT.PASSWORD.DI
1000ae6c:	53 50 4c 41 59 4e 41 4d 45 00 44 45 53 4b 54 4f     SPLAYNAME.DESKTO
1000ae7c:	50 00 44 4f 43 55 4d 45 4e 54 53 00 44 4f 57 4e     P.DOCUMENTS.DOWN
1000ae8c:	4c 4f 41 44 53 00 50 49 43 54 55 52 45 53 00 4d     LOADS.PICTURES.M
1000ae9c:	4f 56 49 45 53 00 4d 55 53 49 43 00 52 45 43 59     OVIES.MUSIC.RECY
1000aeac:	43 4c 45 42 49 4e 00 42 41 4e 41 4e 41 2f 42 4f     CLEBIN.BANANA/BO
1000aebc:	4f 54 00 41 55 54 4f 47 55 49 00 54 49 4d 45 5a     OT.AUTOGUI.TIMEZ
1000aecc:	4f 4e 45 49 44 00 42 41 4e 41 4e 41 2f 54 49 4d     ONEID.BANANA/TIM
1000aedc:	45 2f 54 49 4d 45 5a 4f 4e 45 00 42 41 4e 41 4e     E/TIMEZONE.BANAN
1000aeec:	41 2f 53 45 54 55 50 2f 4e 41 4d 45 00 42 41 4e     A/SETUP/NAME.BAN
1000aefc:	41 4e 41 2f 53 45 54 55 50 2f 43 4f 4d 50 41 4e     ANA/SETUP/COMPAN
1000af0c:	59 00 42 41 4e 41 4e 41 2f 53 45 54 55 50 2f 50     Y.BANANA/SETUP/P
1000af1c:	52 4f 44 55 43 54 4b 45 59 00 42 41 4e 41 4e 41     RODUCTKEY.BANANA
1000af2c:	2f 46 49 4c 45 41 53 53 4f 43 2f 49 43 4f 4e 00     /FILEASSOC/ICON.
1000af3c:	54 58 54 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41     TXT.BANANA/FILEA
1000af4c:	53 53 4f 43 2f 44 45 53 43 52 00 42 41 4e 41 4e     SSOC/DESCR.BANAN
1000af5c:	41 2f 46 49 4c 45 41 53 53 4f 43 2f 4f 50 45 4e     A/FILEASSOC/OPEN
1000af6c:	00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f     .BANANA/FILEASSO
1000af7c:	43 2f 45 44 49 54 00 42 41 4e 41 4e 41 2f 46 49     C/EDIT.BANANA/FI
1000af8c:	4c 45 41 53 53 4f 43 2f 50 52 49 4e 54 00 42 41     LEASSOC/PRINT.BA
1000af9c:	4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f 49     NANA/FILEASSOC/I
1000afac:	43 4f 4e 2f 54 58 54 00 43 3a 2f 42 61 6e 61 6e     CON/TXT.C:/Banan
1000afbc:	61 2f 49 63 6f 6e 73 2f 63 6f 6c 6f 75 72 2f 74     a/Icons/colour/t
1000afcc:	65 78 74 2e 74 67 61 00 42 41 4e 41 4e 41 2f 46     ext.tga.BANANA/F
1000afdc:	49 4c 45 41 53 53 4f 43 2f 44 45 53 43 52 2f 54     ILEASSOC/DESCR/T
1000afec:	58 54 00 54 65 78 74 20 44 6f 63 75 6d 65 6e 74     XT.Text Document
1000affc:	00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f     .BANANA/FILEASSO
1000b00c:	43 2f 4f 50 45 4e 2f 54 58 54 00 43 3a 2f 42 61     C/OPEN/TXT.C:/Ba
1000b01c:	6e 61 6e 61 2f 53 79 73 74 65 6d 2f 74 65 2e 65     nana/System/te.e
1000b02c:	78 65 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53     xe.BANANA/FILEAS
1000b03c:	53 4f 43 2f 45 44 49 54 2f 54 58 54 00 42 41 4e     SOC/EDIT/TXT.BAN
1000b04c:	41 4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f 50 52     ANA/FILEASSOC/PR
1000b05c:	49 4e 54 2f 54 58 54 00 49 53 4f 00 42 41 4e 41     INT/TXT.ISO.BANA
1000b06c:	4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f 49 43 4f     NA/FILEASSOC/ICO
1000b07c:	4e 2f 49 53 4f 00 43 3a 2f 42 61 6e 61 6e 61 2f     N/ISO.C:/Banana/
1000b08c:	49 63 6f 6e 73 2f 63 6f 6c 6f 75 72 2f 63 64 2e     Icons/colour/cd.
1000b09c:	74 67 61 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41     tga.BANANA/FILEA
1000b0ac:	53 53 4f 43 2f 44 45 53 43 52 2f 49 53 4f 00 44     SSOC/DESCR/ISO.D
1000b0bc:	69 73 63 20 49 6d 61 67 65 20 46 69 6c 65 00 2f     isc Image File./
1000b0cc:	50 41 53 53 57 4f 52 44 00 2f 53 41 4c 54 00 2f     PASSWORD./SALT./
1000b0dc:	44 49 53 50 4c 41 59 4e 41 4d 45 00 2f 44 45 53     DISPLAYNAME./DES
1000b0ec:	4b 54 4f 50 00 2f 44 4f 43 55 4d 45 4e 54 53 00     KTOP./DOCUMENTS.
1000b0fc:	2f 44 4f 57 4e 4c 4f 41 44 53 00 2f 50 49 43 54     /DOWNLOADS./PICT
1000b10c:	55 52 45 53 00 2f 4d 4f 56 49 45 53 00 2f 4d 55     URES./MOVIES./MU
1000b11c:	53 49 43 00 2f 52 45 43 59 43 4c 45 42 49 4e 00     SIC./RECYCLEBIN.
1000b12c:	54 4f 44 4f 3a 20 64 65 74 65 63 74 20 6e 6f 72     TODO: detect nor
1000b13c:	6d 61 6c 20 6b 65 72 6e 65 6c 20 76 73 20 4b 52     mal kernel vs KR
1000b14c:	4e 4c 50 32 0a 00 00 00 54 68 65 20 69 6e 73 74     NLP2....The inst
1000b15c:	61 6c 6c 61 74 69 6f 6e 20 68 61 73 20 62 65 65     allation has bee
1000b16c:	6e 20 63 6f 6d 70 6c 65 74 65 64 2e 0a 00 00 00     n completed.....
1000b17c:	50 6c 65 61 73 65 20 70 72 65 73 73 20 45 4e 54     Please press ENT
1000b18c:	45 52 20 74 6f 20 72 65 73 74 61 72 74 20 79 6f     ER to restart yo
1000b19c:	75 72 20 63 6f 6d 70 75 74 65 72 00 61 6e 64 20     ur computer.and 
1000b1ac:	73 74 61 72 74 20 42 61 6e 61 6e 61 2e 00 42 41     start Banana..BA
1000b1bc:	4e 41 4e 41 2f 42 4f 4f 54 2f 41 55 54 4f 47 55     NANA/BOOT/AUTOGU
1000b1cc:	49 00 50 72 6f 64 75 63 74 20 4b 65 79 20 55 70     I.Product Key Up
1000b1dc:	64 61 74 65 64 00 00 00 59 6f 75 72 20 70 72 6f     dated...Your pro
1000b1ec:	64 75 63 74 20 6b 65 79 20 68 61 73 20 62 65 65     duct key has bee
1000b1fc:	6e 20 75 70 64 61 74 65 64 2e 0a 00 20 43 72 65     n updated... Cre
1000b20c:	61 74 65 20 6e 65 77 20 75 73 65 72 2e 2e 2e 20     ate new user... 
1000b21c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000b22c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00 4c                   .L
1000b23c:	6f 67 69 6e 00 00 00 00 50 6c 65 61 73 65 20 73     ogin....Please s
1000b24c:	65 6c 65 63 74 20 79 6f 75 72 20 75 73 65 72 6e     elect your usern
1000b25c:	61 6d 65 20 61 6e 64 20 70 72 65 73 73 20 45 4e     ame and press EN
1000b26c:	54 45 52 2e 00 00 00 00 50 6c 65 61 73 65 20 74     TER.....Please t
1000b27c:	79 70 65 20 79 6f 75 72 20 70 61 73 73 77 6f 72     ype your passwor
1000b28c:	64 20 61 6e 64 20 70 72 65 73 73 20 45 4e 54 45     d and press ENTE
1000b29c:	52 00 6f 72 20 70 72 65 73 73 20 45 53 43 20 74     R.or press ESC t
1000b2ac:	6f 20 67 6f 20 62 61 63 6b 2e 00 00 52 45 51 55     o go back...REQU
1000b2bc:	49 52 45 44 3a 20 25 73 0a 47 4f 54 3a 20 25 73     IRED: %s.GOT: %s
1000b2cc:	0a 53 41 4c 54 3a 20 25 73 0a 00 00 49 74 20 69     .SALT: %s...It i
1000b2dc:	73 20 73 61 66 65 20 74 6f 20 74 75 72 6e 20 6f     s safe to turn o
1000b2ec:	66 66 20 79 6f 75 72 20 50 43 00 63 61 6c 6c 00     ff your PC.call.
1000b2fc:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000b30c:	2f 69 6e 69 74 2e 62 61 74 00 00 00 2a ad 00 10     /init.bat...*...	1000b318: R_386_32	.text
1000b31c:	f7 b2 00 10 fc b2 00 10 00 00 00 00                 ............	1000b31c: R_386_32	.text
	1000b320: R_386_32	.text
