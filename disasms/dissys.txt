
packages/system/32/0001/system.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <beginx(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <beginx(void*)+0xd>	1000000d: R_386_PC32	begin(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <memcmp(void*, void*, unsigned long)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 10             	sub    esp,0x10
1000001d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000020:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000026:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000029:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000002c:	8d 50 ff             	lea    edx,[eax-0x1]
1000002f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000032:	85 c0                	test   eax,eax
10000034:	74 12                	je     10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000036:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000039:	8a 10                	mov    dl,BYTE PTR [eax]
1000003b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000003e:	8a 00                	mov    al,BYTE PTR [eax]
10000040:	38 c2                	cmp    dl,al
10000042:	75 04                	jne    10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000044:	b0 01                	mov    al,0x1
10000046:	eb 02                	jmp    1000004a <memcmp(void*, void*, unsigned long)+0x33>
10000048:	b0 00                	mov    al,0x0
1000004a:	84 c0                	test   al,al
1000004c:	74 08                	je     10000056 <memcmp(void*, void*, unsigned long)+0x3f>
1000004e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000051:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
10000054:	eb d3                	jmp    10000029 <memcmp(void*, void*, unsigned long)+0x12>
10000056:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000059:	8a 00                	mov    al,BYTE PTR [eax]
1000005b:	0f b6 d0             	movzx  edx,al
1000005e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000061:	8a 00                	mov    al,BYTE PTR [eax]
10000063:	0f b6 c0             	movzx  eax,al
10000066:	29 c2                	sub    edx,eax
10000068:	89 d0                	mov    eax,edx
1000006a:	c9                   	leave  
1000006b:	c3                   	ret    

1000006c <memmove>:
1000006c:	55                   	push   ebp
1000006d:	89 e5                	mov    ebp,esp
1000006f:	83 ec 10             	sub    esp,0x10
10000072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000075:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000007b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000007e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000081:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
10000084:	76 1b                	jbe    100000a1 <memmove+0x35>
10000086:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
1000008a:	74 46                	je     100000d2 <memmove+0x66>
1000008c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000008f:	8a 10                	mov    dl,BYTE PTR [eax]
10000091:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000094:	88 10                	mov    BYTE PTR [eax],dl
10000096:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000099:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
1000009c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000009f:	eb e5                	jmp    10000086 <memmove+0x1a>
100000a1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000a4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
100000a7:	73 29                	jae    100000d2 <memmove+0x66>
100000a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000ac:	48                   	dec    eax
100000ad:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
100000b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000b3:	48                   	dec    eax
100000b4:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
100000b7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000bb:	74 15                	je     100000d2 <memmove+0x66>
100000bd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000c0:	8a 10                	mov    dl,BYTE PTR [eax]
100000c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000c5:	88 10                	mov    BYTE PTR [eax],dl
100000c7:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100000ca:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
100000cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000d0:	eb e5                	jmp    100000b7 <memmove+0x4b>
100000d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d5:	c9                   	leave  
100000d6:	c3                   	ret    

100000d7 <memset>:
100000d7:	55                   	push   ebp
100000d8:	89 e5                	mov    ebp,esp
100000da:	83 ec 10             	sub    esp,0x10
100000dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100000e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000e7:	74 12                	je     100000fb <memset+0x24>
100000e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100000ec:	88 c2                	mov    dl,al
100000ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000f1:	88 10                	mov    BYTE PTR [eax],dl
100000f3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100000f6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000f9:	eb e8                	jmp    100000e3 <memset+0xc>
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	c9                   	leave  
100000ff:	c3                   	ret    

10000100 <strlen>:
10000100:	55                   	push   ebp
10000101:	89 e5                	mov    ebp,esp
10000103:	83 ec 10             	sub    esp,0x10
10000106:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000110:	8a 00                	mov    al,BYTE PTR [eax]
10000112:	84 c0                	test   al,al
10000114:	74 0c                	je     10000122 <strlen+0x22>
10000116:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000119:	40                   	inc    eax
1000011a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000011d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
10000120:	eb eb                	jmp    1000010d <strlen+0xd>
10000122:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000125:	c9                   	leave  
10000126:	c3                   	ret    

10000127 <strpbrk(char const*, char const*)>:
10000127:	55                   	push   ebp
10000128:	89 e5                	mov    ebp,esp
1000012a:	83 ec 10             	sub    esp,0x10
1000012d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000130:	8a 00                	mov    al,BYTE PTR [eax]
10000132:	84 c0                	test   al,al
10000134:	74 30                	je     10000166 <strpbrk(char const*, char const*)+0x3f>
10000136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000139:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000013c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000013f:	8a 00                	mov    al,BYTE PTR [eax]
10000141:	84 c0                	test   al,al
10000143:	74 18                	je     1000015d <strpbrk(char const*, char const*)+0x36>
10000145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000148:	8a 10                	mov    dl,BYTE PTR [eax]
1000014a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000014d:	8a 00                	mov    al,BYTE PTR [eax]
1000014f:	38 c2                	cmp    dl,al
10000151:	75 05                	jne    10000158 <strpbrk(char const*, char const*)+0x31>
10000153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000156:	eb 13                	jmp    1000016b <strpbrk(char const*, char const*)+0x44>
10000158:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
1000015b:	eb df                	jmp    1000013c <strpbrk(char const*, char const*)+0x15>
1000015d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000160:	40                   	inc    eax
10000161:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000164:	eb c7                	jmp    1000012d <strpbrk(char const*, char const*)+0x6>
10000166:	b8 00 00 00 00       	mov    eax,0x0
1000016b:	c9                   	leave  
1000016c:	c3                   	ret    

1000016d <strtok>:
1000016d:	55                   	push   ebp
1000016e:	89 e5                	mov    ebp,esp
10000170:	83 ec 10             	sub    esp,0x10
10000173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000176:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000179:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000017c:	85 c0                	test   eax,eax
1000017e:	75 18                	jne    10000198 <strtok+0x2b>
10000180:	a1 00 00 00 00       	mov    eax,ds:0x0	10000181: R_386_32	SavedPtr
10000185:	85 c0                	test   eax,eax
10000187:	75 07                	jne    10000190 <strtok+0x23>
10000189:	b8 00 00 00 00       	mov    eax,0x0
1000018e:	eb 6f                	jmp    100001ff <strtok+0x92>
10000190:	a1 00 00 00 00       	mov    eax,ds:0x0	10000191: R_386_32	SavedPtr
10000195:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000198:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000019b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000019e:	50                   	push   eax
1000019f:	e8 fc ff ff ff       	call   100001a0 <strtok+0x33>	100001a0: R_386_PC32	strpbrk(char const*, char const*)
100001a4:	83 c4 08             	add    esp,0x8
100001a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100001a8: R_386_32	SavedPtr
100001ac:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001ae: R_386_32	SavedPtr
100001b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001b5:	39 c2                	cmp    edx,eax
100001b7:	75 22                	jne    100001db <strtok+0x6e>
100001b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001bc:	8d 50 01             	lea    edx,[eax+0x1]
100001bf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100001c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100001cb:	50                   	push   eax
100001cc:	e8 fc ff ff ff       	call   100001cd <strtok+0x60>	100001cd: R_386_PC32	strpbrk(char const*, char const*)
100001d1:	83 c4 08             	add    esp,0x8
100001d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100001d5: R_386_32	SavedPtr
100001d9:	eb d1                	jmp    100001ac <strtok+0x3f>
100001db:	a1 00 00 00 00       	mov    eax,ds:0x0	100001dc: R_386_32	SavedPtr
100001e0:	85 c0                	test   eax,eax
100001e2:	74 16                	je     100001fa <strtok+0x8d>
100001e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e5: R_386_32	SavedPtr
100001e9:	8d 50 01             	lea    edx,[eax+0x1]
100001ec:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100001ee: R_386_32	SavedPtr
100001f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001f8:	eb 05                	jmp    100001ff <strtok+0x92>
100001fa:	b8 00 00 00 00       	mov    eax,0x0
100001ff:	c9                   	leave  
10000200:	c3                   	ret    

10000201 <strcpy>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	83 ec 10             	sub    esp,0x10
10000207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000020a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000020d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000210:	8a 00                	mov    al,BYTE PTR [eax]
10000212:	84 c0                	test   al,al
10000214:	74 12                	je     10000228 <strcpy+0x27>
10000216:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000219:	8a 10                	mov    dl,BYTE PTR [eax]
1000021b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000021e:	88 10                	mov    BYTE PTR [eax],dl
10000220:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000223:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10000226:	eb e5                	jmp    1000020d <strcpy+0xc>
10000228:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000022b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000022e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000231:	c9                   	leave  
10000232:	c3                   	ret    

10000233 <strncpyxx(char*, char const*, unsigned long)>:
10000233:	55                   	push   ebp
10000234:	89 e5                	mov    ebp,esp
10000236:	83 ec 10             	sub    esp,0x10
10000239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000242:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000245:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000249:	74 23                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000024b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000024e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000251:	8d 42 01             	lea    eax,[edx+0x1]
10000254:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000025a:	8d 48 01             	lea    ecx,[eax+0x1]
1000025d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
10000260:	8a 12                	mov    dl,BYTE PTR [edx]
10000262:	88 10                	mov    BYTE PTR [eax],dl
10000264:	8a 00                	mov    al,BYTE PTR [eax]
10000266:	84 c0                	test   al,al
10000268:	74 04                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000026a:	b0 01                	mov    al,0x1
1000026c:	eb 02                	jmp    10000270 <strncpyxx(char*, char const*, unsigned long)+0x3d>
1000026e:	b0 00                	mov    al,0x0
10000270:	84 c0                	test   al,al
10000272:	74 02                	je     10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000274:	eb cf                	jmp    10000245 <strncpyxx(char*, char const*, unsigned long)+0x12>
10000276:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000279:	8d 50 ff             	lea    edx,[eax-0x1]
1000027c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
1000027f:	85 c0                	test   eax,eax
10000281:	0f 95 c0             	setne  al
10000284:	84 c0                	test   al,al
10000286:	74 0b                	je     10000293 <strncpyxx(char*, char const*, unsigned long)+0x60>
10000288:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000028b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000028e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000291:	eb e3                	jmp    10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000296:	c9                   	leave  
10000297:	c3                   	ret    

10000298 <strcmp>:
10000298:	55                   	push   ebp
10000299:	89 e5                	mov    ebp,esp
1000029b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029e:	8a 10                	mov    dl,BYTE PTR [eax]
100002a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a3:	8a 00                	mov    al,BYTE PTR [eax]
100002a5:	38 c2                	cmp    dl,al
100002a7:	75 20                	jne    100002c9 <strcmp+0x31>
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	8d 50 01             	lea    edx,[eax+0x1]
100002af:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
100002b2:	8a 00                	mov    al,BYTE PTR [eax]
100002b4:	84 c0                	test   al,al
100002b6:	0f 94 c0             	sete   al
100002b9:	84 c0                	test   al,al
100002bb:	74 07                	je     100002c4 <strcmp+0x2c>
100002bd:	b8 00 00 00 00       	mov    eax,0x0
100002c2:	eb 19                	jmp    100002dd <strcmp+0x45>
100002c4:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100002c7:	eb d2                	jmp    1000029b <strcmp+0x3>
100002c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002cc:	8a 00                	mov    al,BYTE PTR [eax]
100002ce:	0f b6 d0             	movzx  edx,al
100002d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002d4:	8a 00                	mov    al,BYTE PTR [eax]
100002d6:	0f b6 c0             	movzx  eax,al
100002d9:	29 c2                	sub    edx,eax
100002db:	89 d0                	mov    eax,edx
100002dd:	5d                   	pop    ebp
100002de:	c3                   	ret    

100002df <strchr(char const*, int)>:
100002df:	55                   	push   ebp
100002e0:	89 e5                	mov    ebp,esp
100002e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e5:	8a 00                	mov    al,BYTE PTR [eax]
100002e7:	84 c0                	test   al,al
100002e9:	74 16                	je     10000301 <strchr(char const*, int)+0x22>
100002eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ee:	8a 00                	mov    al,BYTE PTR [eax]
100002f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002f3:	38 d0                	cmp    al,dl
100002f5:	75 05                	jne    100002fc <strchr(char const*, int)+0x1d>
100002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fa:	eb 0a                	jmp    10000306 <strchr(char const*, int)+0x27>
100002fc:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
100002ff:	eb e1                	jmp    100002e2 <strchr(char const*, int)+0x3>
10000301:	b8 00 00 00 00       	mov    eax,0x0
10000306:	5d                   	pop    ebp
10000307:	c3                   	ret    

10000308 <strncmp>:
10000308:	55                   	push   ebp
10000309:	89 e5                	mov    ebp,esp
1000030b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000030e:	8d 50 ff             	lea    edx,[eax-0x1]
10000311:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000314:	85 c0                	test   eax,eax
10000316:	74 12                	je     1000032a <strncmp+0x22>
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	8a 10                	mov    dl,BYTE PTR [eax]
1000031d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000320:	8a 00                	mov    al,BYTE PTR [eax]
10000322:	38 c2                	cmp    dl,al
10000324:	75 04                	jne    1000032a <strncmp+0x22>
10000326:	b0 01                	mov    al,0x1
10000328:	eb 02                	jmp    1000032c <strncmp+0x24>
1000032a:	b0 00                	mov    al,0x0
1000032c:	84 c0                	test   al,al
1000032e:	74 20                	je     10000350 <strncmp+0x48>
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8d 50 01             	lea    edx,[eax+0x1]
10000336:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
10000339:	8a 00                	mov    al,BYTE PTR [eax]
1000033b:	84 c0                	test   al,al
1000033d:	0f 94 c0             	sete   al
10000340:	84 c0                	test   al,al
10000342:	74 07                	je     1000034b <strncmp+0x43>
10000344:	b8 00 00 00 00       	mov    eax,0x0
10000349:	eb 19                	jmp    10000364 <strncmp+0x5c>
1000034b:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000034e:	eb bb                	jmp    1000030b <strncmp+0x3>
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8a 00                	mov    al,BYTE PTR [eax]
10000355:	0f b6 d0             	movzx  edx,al
10000358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000035b:	8a 00                	mov    al,BYTE PTR [eax]
1000035d:	0f b6 c0             	movzx  eax,al
10000360:	29 c2                	sub    edx,eax
10000362:	89 d0                	mov    eax,edx
10000364:	5d                   	pop    ebp
10000365:	c3                   	ret    

10000366 <strcat>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 10             	sub    esp,0x10
1000036c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000372:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000375:	8d 50 01             	lea    edx,[eax+0x1]
10000378:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000037b:	8a 00                	mov    al,BYTE PTR [eax]
1000037d:	84 c0                	test   al,al
1000037f:	0f 95 c0             	setne  al
10000382:	84 c0                	test   al,al
10000384:	74 02                	je     10000388 <strcat+0x22>
10000386:	eb ea                	jmp    10000372 <strcat+0xc>
10000388:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
1000038b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000038e:	8d 42 01             	lea    eax,[edx+0x1]
10000391:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000394:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000397:	8d 48 01             	lea    ecx,[eax+0x1]
1000039a:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
1000039d:	8a 12                	mov    dl,BYTE PTR [edx]
1000039f:	88 10                	mov    BYTE PTR [eax],dl
100003a1:	8a 00                	mov    al,BYTE PTR [eax]
100003a3:	84 c0                	test   al,al
100003a5:	0f 95 c0             	setne  al
100003a8:	84 c0                	test   al,al
100003aa:	74 02                	je     100003ae <strcat+0x48>
100003ac:	eb dd                	jmp    1000038b <strcat+0x25>
100003ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b1:	c9                   	leave  
100003b2:	c3                   	ret    

100003b3 <strncat(char*, char const*, unsigned long)>:
100003b3:	55                   	push   ebp
100003b4:	89 e5                	mov    ebp,esp
100003b6:	83 ec 10             	sub    esp,0x10
100003b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100003bd:	74 5c                	je     1000041b <strncat(char*, char const*, unsigned long)+0x68>
100003bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003c8:	8d 50 01             	lea    edx,[eax+0x1]
100003cb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100003ce:	8a 00                	mov    al,BYTE PTR [eax]
100003d0:	84 c0                	test   al,al
100003d2:	0f 95 c0             	setne  al
100003d5:	84 c0                	test   al,al
100003d7:	74 02                	je     100003db <strncat(char*, char const*, unsigned long)+0x28>
100003d9:	eb ea                	jmp    100003c5 <strncat(char*, char const*, unsigned long)+0x12>
100003db:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100003de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e1:	8d 42 01             	lea    eax,[edx+0x1]
100003e4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100003e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003ea:	8d 48 01             	lea    ecx,[eax+0x1]
100003ed:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
100003f0:	8a 12                	mov    dl,BYTE PTR [edx]
100003f2:	88 10                	mov    BYTE PTR [eax],dl
100003f4:	8a 00                	mov    al,BYTE PTR [eax]
100003f6:	84 c0                	test   al,al
100003f8:	74 0d                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
100003fa:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100003fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000401:	74 04                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
10000403:	b0 01                	mov    al,0x1
10000405:	eb 02                	jmp    10000409 <strncat(char*, char const*, unsigned long)+0x56>
10000407:	b0 00                	mov    al,0x0
10000409:	84 c0                	test   al,al
1000040b:	74 02                	je     1000040f <strncat(char*, char const*, unsigned long)+0x5c>
1000040d:	eb cf                	jmp    100003de <strncat(char*, char const*, unsigned long)+0x2b>
1000040f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000413:	75 06                	jne    1000041b <strncat(char*, char const*, unsigned long)+0x68>
10000415:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000418:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000041b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041e:	c9                   	leave  
1000041f:	c3                   	ret    

10000420 <strstr(char*, char*)>:
10000420:	55                   	push   ebp
10000421:	89 e5                	mov    ebp,esp
10000423:	83 ec 10             	sub    esp,0x10
10000426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000429:	e8 fc ff ff ff       	call   1000042a <strstr(char*, char*)+0xa>	1000042a: R_386_PC32	strlen
1000042e:	83 c4 04             	add    esp,0x4
10000431:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000434:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
10000438:	75 05                	jne    1000043f <strstr(char*, char*)+0x1f>
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	eb 3f                	jmp    1000047e <strstr(char*, char*)+0x5e>
1000043f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000442:	50                   	push   eax
10000443:	e8 fc ff ff ff       	call   10000444 <strstr(char*, char*)+0x24>	10000444: R_386_PC32	strlen
10000448:	83 c4 04             	add    esp,0x4
1000044b:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
1000044e:	77 29                	ja     10000479 <strstr(char*, char*)+0x59>
10000450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000453:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
10000456:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000459:	50                   	push   eax
1000045a:	e8 fc ff ff ff       	call   1000045b <strstr(char*, char*)+0x3b>	1000045b: R_386_PC32	memcmp(void*, void*, unsigned long)
1000045f:	83 c4 0c             	add    esp,0xc
10000462:	85 c0                	test   eax,eax
10000464:	0f 94 c0             	sete   al
10000467:	84 c0                	test   al,al
10000469:	74 05                	je     10000470 <strstr(char*, char*)+0x50>
1000046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000046e:	eb 0e                	jmp    1000047e <strstr(char*, char*)+0x5e>
10000470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000473:	40                   	inc    eax
10000474:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000477:	eb c6                	jmp    1000043f <strstr(char*, char*)+0x1f>
10000479:	b8 00 00 00 00       	mov    eax,0x0
1000047e:	c9                   	leave  
1000047f:	c3                   	ret    

10000480 <rmtree(char*)>:
10000480:	55                   	push   ebp
10000481:	89 e5                	mov    ebp,esp
10000483:	53                   	push   ebx
10000484:	81 ec 64 02 00 00    	sub    esp,0x264
1000048a:	68 2c 01 00 00       	push   0x12c
1000048f:	6a 00                	push   0x0
10000491:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000497:	50                   	push   eax
10000498:	e8 fc ff ff ff       	call   10000499 <rmtree(char*)+0x19>	10000499: R_386_PC32	memset
1000049d:	83 c4 0c             	add    esp,0xc
100004a0:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
100004a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100004a9:	83 ec 0c             	sub    esp,0xc
100004ac:	68 14 01 00 00       	push   0x114
100004b1:	e8 fc ff ff ff       	call   100004b2 <rmtree(char*)+0x32>	100004b2: R_386_PC32	operator new(unsigned long)
100004b6:	83 c4 10             	add    esp,0x10
100004b9:	89 c3                	mov    ebx,eax
100004bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
100004c0:	8b 00                	mov    eax,DWORD PTR [eax]
100004c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
100004c5:	83 ec 04             	sub    esp,0x4
100004c8:	50                   	push   eax
100004c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004cc:	53                   	push   ebx
100004cd:	e8 fc ff ff ff       	call   100004ce <rmtree(char*)+0x4e>	100004ce: R_386_PC32	Directory::Directory(char const*, Process*)
100004d2:	83 c4 10             	add    esp,0x10
100004d5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
100004d8:	83 ec 0c             	sub    esp,0xc
100004db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004de:	e8 fc ff ff ff       	call   100004df <rmtree(char*)+0x5f>	100004df: R_386_PC32	Directory::open()
100004e3:	83 c4 10             	add    esp,0x10
100004e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004e9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100004ed:	74 24                	je     10000513 <rmtree(char*)+0x93>
100004ef:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004f3:	0f 84 8b 01 00 00    	je     10000684 <rmtree(char*)+0x204>
100004f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004fc:	8b 00                	mov    eax,DWORD PTR [eax]
100004fe:	83 c0 08             	add    eax,0x8
10000501:	8b 00                	mov    eax,DWORD PTR [eax]
10000503:	83 ec 0c             	sub    esp,0xc
10000506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000509:	ff d0                	call   eax
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	e9 72 01 00 00       	jmp    10000685 <rmtree(char*)+0x205>
10000513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000516:	8b 00                	mov    eax,DWORD PTR [eax]
10000518:	83 c0 0c             	add    eax,0xc
1000051b:	8b 00                	mov    eax,DWORD PTR [eax]
1000051d:	83 ec 0c             	sub    esp,0xc
10000520:	8d 95 a4 fd ff ff    	lea    edx,[ebp-0x25c]
10000526:	52                   	push   edx
10000527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000052a:	6a 00                	push   0x0
1000052c:	68 10 01 00 00       	push   0x110
10000531:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000534:	ff d0                	call   eax
10000536:	83 c4 20             	add    esp,0x20
10000539:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
1000053c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000540:	0f 85 04 01 00 00    	jne    1000064a <rmtree(char*)+0x1ca>
10000546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000549:	83 c0 10             	add    eax,0x10
1000054c:	83 ec 08             	sub    esp,0x8
1000054f:	68 14 a5 00 10       	push   0x1000a514	10000550: R_386_32	.text
10000554:	50                   	push   eax
10000555:	e8 fc ff ff ff       	call   10000556 <rmtree(char*)+0xd6>	10000556: R_386_PC32	strcmp
1000055a:	83 c4 10             	add    esp,0x10
1000055d:	85 c0                	test   eax,eax
1000055f:	74 b2                	je     10000513 <rmtree(char*)+0x93>
10000561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000564:	83 c0 10             	add    eax,0x10
10000567:	83 ec 08             	sub    esp,0x8
1000056a:	68 16 a5 00 10       	push   0x1000a516	1000056b: R_386_32	.text
1000056f:	50                   	push   eax
10000570:	e8 fc ff ff ff       	call   10000571 <rmtree(char*)+0xf1>	10000571: R_386_PC32	strcmp
10000575:	83 c4 10             	add    esp,0x10
10000578:	85 c0                	test   eax,eax
1000057a:	74 97                	je     10000513 <rmtree(char*)+0x93>
1000057c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000057f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000582:	83 e0 02             	and    eax,0x2
10000585:	85 c0                	test   eax,eax
10000587:	74 17                	je     100005a0 <rmtree(char*)+0x120>
10000589:	83 ec 0c             	sub    esp,0xc
1000058c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000592:	50                   	push   eax
10000593:	e8 fc ff ff ff       	call   10000594 <rmtree(char*)+0x114>	10000594: R_386_PC32	rmtree(char*)
10000598:	83 c4 10             	add    esp,0x10
1000059b:	e9 73 ff ff ff       	jmp    10000513 <rmtree(char*)+0x93>
100005a0:	83 ec 08             	sub    esp,0x8
100005a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005a6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005ac:	50                   	push   eax
100005ad:	e8 fc ff ff ff       	call   100005ae <rmtree(char*)+0x12e>	100005ae: R_386_PC32	strcpy
100005b2:	83 c4 10             	add    esp,0x10
100005b5:	83 ec 08             	sub    esp,0x8
100005b8:	68 19 a5 00 10       	push   0x1000a519	100005b9: R_386_32	.text
100005bd:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005c3:	50                   	push   eax
100005c4:	e8 fc ff ff ff       	call   100005c5 <rmtree(char*)+0x145>	100005c5: R_386_PC32	strcat
100005c9:	83 c4 10             	add    esp,0x10
100005cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100005cf:	83 c0 10             	add    eax,0x10
100005d2:	83 ec 08             	sub    esp,0x8
100005d5:	50                   	push   eax
100005d6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005dc:	50                   	push   eax
100005dd:	e8 fc ff ff ff       	call   100005de <rmtree(char*)+0x15e>	100005de: R_386_PC32	strcat
100005e2:	83 c4 10             	add    esp,0x10
100005e5:	83 ec 0c             	sub    esp,0xc
100005e8:	68 14 01 00 00       	push   0x114
100005ed:	e8 fc ff ff ff       	call   100005ee <rmtree(char*)+0x16e>	100005ee: R_386_PC32	operator new(unsigned long)
100005f2:	83 c4 10             	add    esp,0x10
100005f5:	89 c3                	mov    ebx,eax
100005f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
100005fc:	8b 00                	mov    eax,DWORD PTR [eax]
100005fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000601:	83 ec 04             	sub    esp,0x4
10000604:	50                   	push   eax
10000605:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
1000060b:	50                   	push   eax
1000060c:	53                   	push   ebx
1000060d:	e8 fc ff ff ff       	call   1000060e <rmtree(char*)+0x18e>	1000060e: R_386_PC32	File::File(char const*, Process*)
10000612:	83 c4 10             	add    esp,0x10
10000615:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000618:	83 ec 0c             	sub    esp,0xc
1000061b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000061e:	e8 fc ff ff ff       	call   1000061f <rmtree(char*)+0x19f>	1000061f: R_386_PC32	File::unlink()
10000623:	83 c4 10             	add    esp,0x10
10000626:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000062a:	0f 84 e3 fe ff ff    	je     10000513 <rmtree(char*)+0x93>
10000630:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000633:	8b 00                	mov    eax,DWORD PTR [eax]
10000635:	83 c0 08             	add    eax,0x8
10000638:	8b 00                	mov    eax,DWORD PTR [eax]
1000063a:	83 ec 0c             	sub    esp,0xc
1000063d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000640:	ff d0                	call   eax
10000642:	83 c4 10             	add    esp,0x10
10000645:	e9 c9 fe ff ff       	jmp    10000513 <rmtree(char*)+0x93>
1000064a:	90                   	nop
1000064b:	83 ec 0c             	sub    esp,0xc
1000064e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000651:	e8 fc ff ff ff       	call   10000652 <rmtree(char*)+0x1d2>	10000652: R_386_PC32	Directory::close()
10000656:	83 c4 10             	add    esp,0x10
10000659:	83 ec 0c             	sub    esp,0xc
1000065c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000065f:	e8 fc ff ff ff       	call   10000660 <rmtree(char*)+0x1e0>	10000660: R_386_PC32	Directory::unlink()
10000664:	83 c4 10             	add    esp,0x10
10000667:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000066b:	74 18                	je     10000685 <rmtree(char*)+0x205>
1000066d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000670:	8b 00                	mov    eax,DWORD PTR [eax]
10000672:	83 c0 08             	add    eax,0x8
10000675:	8b 00                	mov    eax,DWORD PTR [eax]
10000677:	83 ec 0c             	sub    esp,0xc
1000067a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000067d:	ff d0                	call   eax
1000067f:	83 c4 10             	add    esp,0x10
10000682:	eb 01                	jmp    10000685 <rmtree(char*)+0x205>
10000684:	90                   	nop
10000685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000688:	c9                   	leave  
10000689:	c3                   	ret    

1000068a <mkdir(char const*, int)>:
1000068a:	55                   	push   ebp
1000068b:	89 e5                	mov    ebp,esp
1000068d:	53                   	push   ebx
1000068e:	83 ec 14             	sub    esp,0x14
10000691:	83 ec 0c             	sub    esp,0xc
10000694:	68 14 01 00 00       	push   0x114
10000699:	e8 fc ff ff ff       	call   1000069a <mkdir(char const*, int)+0x10>	1000069a: R_386_PC32	operator new(unsigned long)
1000069e:	83 c4 10             	add    esp,0x10
100006a1:	89 c3                	mov    ebx,eax
100006a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100006a4: R_386_32	kernelProcess
100006a8:	83 ec 04             	sub    esp,0x4
100006ab:	50                   	push   eax
100006ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006af:	53                   	push   ebx
100006b0:	e8 fc ff ff ff       	call   100006b1 <mkdir(char const*, int)+0x27>	100006b1: R_386_PC32	Directory::Directory(char const*, Process*)
100006b5:	83 c4 10             	add    esp,0x10
100006b8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100006bb:	83 ec 0c             	sub    esp,0xc
100006be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006c1:	e8 fc ff ff ff       	call   100006c2 <mkdir(char const*, int)+0x38>	100006c2: R_386_PC32	Directory::create()
100006c6:	83 c4 10             	add    esp,0x10
100006c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100006cd:	74 15                	je     100006e4 <mkdir(char const*, int)+0x5a>
100006cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100006d2:	8b 00                	mov    eax,DWORD PTR [eax]
100006d4:	83 c0 08             	add    eax,0x8
100006d7:	8b 00                	mov    eax,DWORD PTR [eax]
100006d9:	83 ec 0c             	sub    esp,0xc
100006dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006df:	ff d0                	call   eax
100006e1:	83 c4 10             	add    esp,0x10
100006e4:	b8 00 00 00 00       	mov    eax,0x0
100006e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100006ec:	c9                   	leave  
100006ed:	c3                   	ret    

100006ee <copytree(char*, char*)>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	53                   	push   ebx
100006f2:	81 ec 54 01 00 00    	sub    esp,0x154
100006f8:	83 ec 0c             	sub    esp,0xc
100006fb:	68 90 01 00 00       	push   0x190
10000700:	e8 fc ff ff ff       	call   10000701 <copytree(char*, char*)+0x13>	10000701: R_386_PC32	malloc
10000705:	83 c4 10             	add    esp,0x10
10000708:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000070b:	83 ec 0c             	sub    esp,0xc
1000070e:	68 90 01 00 00       	push   0x190
10000713:	e8 fc ff ff ff       	call   10000714 <copytree(char*, char*)+0x26>	10000714: R_386_PC32	malloc
10000718:	83 c4 10             	add    esp,0x10
1000071b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000071e:	83 ec 04             	sub    esp,0x4
10000721:	68 90 01 00 00       	push   0x190
10000726:	6a 00                	push   0x0
10000728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000072b:	e8 fc ff ff ff       	call   1000072c <copytree(char*, char*)+0x3e>	1000072c: R_386_PC32	memset
10000730:	83 c4 10             	add    esp,0x10
10000733:	83 ec 04             	sub    esp,0x4
10000736:	68 90 01 00 00       	push   0x190
1000073b:	6a 00                	push   0x0
1000073d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000740:	e8 fc ff ff ff       	call   10000741 <copytree(char*, char*)+0x53>	10000741: R_386_PC32	memset
10000745:	83 c4 10             	add    esp,0x10
10000748:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000074e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000751:	83 ec 0c             	sub    esp,0xc
10000754:	68 14 01 00 00       	push   0x114
10000759:	e8 fc ff ff ff       	call   1000075a <copytree(char*, char*)+0x6c>	1000075a: R_386_PC32	operator new(unsigned long)
1000075e:	83 c4 10             	add    esp,0x10
10000761:	89 c3                	mov    ebx,eax
10000763:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000768:	8b 00                	mov    eax,DWORD PTR [eax]
1000076a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000076d:	83 ec 04             	sub    esp,0x4
10000770:	50                   	push   eax
10000771:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000774:	53                   	push   ebx
10000775:	e8 fc ff ff ff       	call   10000776 <copytree(char*, char*)+0x88>	10000776: R_386_PC32	Directory::Directory(char const*, Process*)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000780:	83 ec 0c             	sub    esp,0xc
10000783:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000786:	e8 fc ff ff ff       	call   10000787 <copytree(char*, char*)+0x99>	10000787: R_386_PC32	Directory::open()
1000078b:	83 c4 10             	add    esp,0x10
1000078e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000791:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10000795:	74 34                	je     100007cb <copytree(char*, char*)+0xdd>
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	68 1b a5 00 10       	push   0x1000a51b	1000079b: R_386_32	.text
1000079f:	e8 fc ff ff ff       	call   100007a0 <copytree(char*, char*)+0xb2>	100007a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100007a4:	83 c4 10             	add    esp,0x10
100007a7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
100007ab:	0f 84 90 03 00 00    	je     10000b41 <copytree(char*, char*)+0x453>
100007b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007b4:	8b 00                	mov    eax,DWORD PTR [eax]
100007b6:	83 c0 08             	add    eax,0x8
100007b9:	8b 00                	mov    eax,DWORD PTR [eax]
100007bb:	83 ec 0c             	sub    esp,0xc
100007be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007c1:	ff d0                	call   eax
100007c3:	83 c4 10             	add    esp,0x10
100007c6:	e9 76 03 00 00       	jmp    10000b41 <copytree(char*, char*)+0x453>
100007cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007ce:	8b 00                	mov    eax,DWORD PTR [eax]
100007d0:	83 c0 0c             	add    eax,0xc
100007d3:	8b 00                	mov    eax,DWORD PTR [eax]
100007d5:	83 ec 0c             	sub    esp,0xc
100007d8:	8d 95 b8 fe ff ff    	lea    edx,[ebp-0x148]
100007de:	52                   	push   edx
100007df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100007e2:	6a 00                	push   0x0
100007e4:	68 10 01 00 00       	push   0x110
100007e9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007ec:	ff d0                	call   eax
100007ee:	83 c4 20             	add    esp,0x20
100007f1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007f4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100007f8:	0f 85 fb 02 00 00    	jne    10000af9 <copytree(char*, char*)+0x40b>
100007fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000801:	83 c0 10             	add    eax,0x10
10000804:	83 ec 08             	sub    esp,0x8
10000807:	68 14 a5 00 10       	push   0x1000a514	10000808: R_386_32	.text
1000080c:	50                   	push   eax
1000080d:	e8 fc ff ff ff       	call   1000080e <copytree(char*, char*)+0x120>	1000080e: R_386_PC32	strcmp
10000812:	83 c4 10             	add    esp,0x10
10000815:	85 c0                	test   eax,eax
10000817:	74 b2                	je     100007cb <copytree(char*, char*)+0xdd>
10000819:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000081c:	83 c0 10             	add    eax,0x10
1000081f:	83 ec 08             	sub    esp,0x8
10000822:	68 16 a5 00 10       	push   0x1000a516	10000823: R_386_32	.text
10000827:	50                   	push   eax
10000828:	e8 fc ff ff ff       	call   10000829 <copytree(char*, char*)+0x13b>	10000829: R_386_PC32	strcmp
1000082d:	83 c4 10             	add    esp,0x10
10000830:	85 c0                	test   eax,eax
10000832:	74 97                	je     100007cb <copytree(char*, char*)+0xdd>
10000834:	83 ec 08             	sub    esp,0x8
10000837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000083d:	e8 fc ff ff ff       	call   1000083e <copytree(char*, char*)+0x150>	1000083e: R_386_PC32	strcpy
10000842:	83 c4 10             	add    esp,0x10
10000845:	83 ec 08             	sub    esp,0x8
10000848:	68 19 a5 00 10       	push   0x1000a519	10000849: R_386_32	.text
1000084d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000850:	e8 fc ff ff ff       	call   10000851 <copytree(char*, char*)+0x163>	10000851: R_386_PC32	strcat
10000855:	83 c4 10             	add    esp,0x10
10000858:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000085b:	83 c0 10             	add    eax,0x10
1000085e:	83 ec 08             	sub    esp,0x8
10000861:	50                   	push   eax
10000862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000865:	e8 fc ff ff ff       	call   10000866 <copytree(char*, char*)+0x178>	10000866: R_386_PC32	strcat
1000086a:	83 c4 10             	add    esp,0x10
1000086d:	83 ec 08             	sub    esp,0x8
10000870:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000873:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000876:	e8 fc ff ff ff       	call   10000877 <copytree(char*, char*)+0x189>	10000877: R_386_PC32	strcpy
1000087b:	83 c4 10             	add    esp,0x10
1000087e:	83 ec 08             	sub    esp,0x8
10000881:	68 19 a5 00 10       	push   0x1000a519	10000882: R_386_32	.text
10000886:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000889:	e8 fc ff ff ff       	call   1000088a <copytree(char*, char*)+0x19c>	1000088a: R_386_PC32	strcat
1000088e:	83 c4 10             	add    esp,0x10
10000891:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000894:	83 c0 10             	add    eax,0x10
10000897:	83 ec 08             	sub    esp,0x8
1000089a:	50                   	push   eax
1000089b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000089e:	e8 fc ff ff ff       	call   1000089f <copytree(char*, char*)+0x1b1>	1000089f: R_386_PC32	strcat
100008a3:	83 c4 10             	add    esp,0x10
100008a6:	83 ec 04             	sub    esp,0x4
100008a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100008af:	68 35 a5 00 10       	push   0x1000a535	100008b0: R_386_32	.text
100008b4:	e8 fc ff ff ff       	call   100008b5 <copytree(char*, char*)+0x1c7>	100008b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100008b9:	83 c4 10             	add    esp,0x10
100008bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100008bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100008c2:	83 e0 02             	and    eax,0x2
100008c5:	85 c0                	test   eax,eax
100008c7:	74 47                	je     10000910 <copytree(char*, char*)+0x222>
100008c9:	83 ec 08             	sub    esp,0x8
100008cc:	68 c0 01 00 00       	push   0x1c0
100008d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008d4:	e8 fc ff ff ff       	call   100008d5 <copytree(char*, char*)+0x1e7>	100008d5: R_386_PC32	mkdir(char const*, int)
100008d9:	83 c4 10             	add    esp,0x10
100008dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100008df:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100008e3:	74 15                	je     100008fa <copytree(char*, char*)+0x20c>
100008e5:	83 ec 0c             	sub    esp,0xc
100008e8:	68 3f a5 00 10       	push   0x1000a53f	100008e9: R_386_32	.text
100008ed:	e8 fc ff ff ff       	call   100008ee <copytree(char*, char*)+0x200>	100008ee: R_386_PC32	KePanic(char const*)
100008f2:	83 c4 10             	add    esp,0x10
100008f5:	e9 d1 fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
100008fa:	83 ec 08             	sub    esp,0x8
100008fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000903:	e8 fc ff ff ff       	call   10000904 <copytree(char*, char*)+0x216>	10000904: R_386_PC32	copytree(char*, char*)
10000908:	83 c4 10             	add    esp,0x10
1000090b:	e9 bb fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000910:	83 ec 0c             	sub    esp,0xc
10000913:	68 14 01 00 00       	push   0x114
10000918:	e8 fc ff ff ff       	call   10000919 <copytree(char*, char*)+0x22b>	10000919: R_386_PC32	operator new(unsigned long)
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 c3                	mov    ebx,eax
10000922:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000927:	8b 00                	mov    eax,DWORD PTR [eax]
10000929:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000092c:	83 ec 04             	sub    esp,0x4
1000092f:	50                   	push   eax
10000930:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000933:	53                   	push   ebx
10000934:	e8 fc ff ff ff       	call   10000935 <copytree(char*, char*)+0x247>	10000935: R_386_PC32	File::File(char const*, Process*)
10000939:	83 c4 10             	add    esp,0x10
1000093c:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000093f:	83 ec 08             	sub    esp,0x8
10000942:	6a 01                	push   0x1
10000944:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000947:	e8 fc ff ff ff       	call   10000948 <copytree(char*, char*)+0x25a>	10000948: R_386_PC32	File::open(FileOpenMode)
1000094c:	83 c4 10             	add    esp,0x10
1000094f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000953:	75 15                	jne    1000096a <copytree(char*, char*)+0x27c>
10000955:	83 ec 0c             	sub    esp,0xc
10000958:	68 50 a5 00 10       	push   0x1000a550	10000959: R_386_32	.text
1000095d:	e8 fc ff ff ff       	call   1000095e <copytree(char*, char*)+0x270>	1000095e: R_386_PC32	KePanic(char const*)
10000962:	83 c4 10             	add    esp,0x10
10000965:	e9 8a 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
1000096a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000096e:	0f 84 57 fe ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000974:	83 ec 0c             	sub    esp,0xc
10000977:	68 14 01 00 00       	push   0x114
1000097c:	e8 fc ff ff ff       	call   1000097d <copytree(char*, char*)+0x28f>	1000097d: R_386_PC32	operator new(unsigned long)
10000981:	83 c4 10             	add    esp,0x10
10000984:	89 c3                	mov    ebx,eax
10000986:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000098b:	8b 00                	mov    eax,DWORD PTR [eax]
1000098d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000990:	83 ec 04             	sub    esp,0x4
10000993:	50                   	push   eax
10000994:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000997:	53                   	push   ebx
10000998:	e8 fc ff ff ff       	call   10000999 <copytree(char*, char*)+0x2ab>	10000999: R_386_PC32	File::File(char const*, Process*)
1000099d:	83 c4 10             	add    esp,0x10
100009a0:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
100009a3:	83 ec 08             	sub    esp,0x8
100009a6:	6a 12                	push   0x12
100009a8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009ab:	e8 fc ff ff ff       	call   100009ac <copytree(char*, char*)+0x2be>	100009ac: R_386_PC32	File::open(FileOpenMode)
100009b0:	83 c4 10             	add    esp,0x10
100009b3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
100009b7:	75 23                	jne    100009dc <copytree(char*, char*)+0x2ee>
100009b9:	83 ec 0c             	sub    esp,0xc
100009bc:	68 50 a5 00 10       	push   0x1000a550	100009bd: R_386_32	.text
100009c1:	e8 fc ff ff ff       	call   100009c2 <copytree(char*, char*)+0x2d4>	100009c2: R_386_PC32	KePanic(char const*)
100009c6:	83 c4 10             	add    esp,0x10
100009c9:	83 ec 0c             	sub    esp,0xc
100009cc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009cf:	e8 fc ff ff ff       	call   100009d0 <copytree(char*, char*)+0x2e2>	100009d0: R_386_PC32	File::close()
100009d4:	83 c4 10             	add    esp,0x10
100009d7:	e9 18 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
100009dc:	83 ec 0c             	sub    esp,0xc
100009df:	68 00 10 00 00       	push   0x1000
100009e4:	e8 fc ff ff ff       	call   100009e5 <copytree(char*, char*)+0x2f7>	100009e5: R_386_PC32	malloc
100009e9:	83 c4 10             	add    esp,0x10
100009ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100009ef:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
100009f3:	75 31                	jne    10000a26 <copytree(char*, char*)+0x338>
100009f5:	83 ec 0c             	sub    esp,0xc
100009f8:	68 5f a5 00 10       	push   0x1000a55f	100009f9: R_386_32	.text
100009fd:	e8 fc ff ff ff       	call   100009fe <copytree(char*, char*)+0x310>	100009fe: R_386_PC32	KePanic(char const*)
10000a02:	83 c4 10             	add    esp,0x10
10000a05:	83 ec 0c             	sub    esp,0xc
10000a08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000a0b:	e8 fc ff ff ff       	call   10000a0c <copytree(char*, char*)+0x31e>	10000a0c: R_386_PC32	free
10000a10:	83 c4 10             	add    esp,0x10
10000a13:	83 ec 0c             	sub    esp,0xc
10000a16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000a19:	e8 fc ff ff ff       	call   10000a1a <copytree(char*, char*)+0x32c>	10000a1a: R_386_PC32	free
10000a1e:	83 c4 10             	add    esp,0x10
10000a21:	e9 1c 01 00 00       	jmp    10000b42 <copytree(char*, char*)+0x454>
10000a26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000a29:	8b 00                	mov    eax,DWORD PTR [eax]
10000a2b:	83 c0 0c             	add    eax,0xc
10000a2e:	8b 00                	mov    eax,DWORD PTR [eax]
10000a30:	83 ec 0c             	sub    esp,0xc
10000a33:	8d 95 b4 fe ff ff    	lea    edx,[ebp-0x14c]
10000a39:	52                   	push   edx
10000a3a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a3d:	6a 00                	push   0x0
10000a3f:	68 00 10 00 00       	push   0x1000
10000a44:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000a47:	ff d0                	call   eax
10000a49:	83 c4 20             	add    esp,0x20
10000a4c:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a4f:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000a53:	75 37                	jne    10000a8c <copytree(char*, char*)+0x39e>
10000a55:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a58:	8b 00                	mov    eax,DWORD PTR [eax]
10000a5a:	83 c0 10             	add    eax,0x10
10000a5d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a5f:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a65:	99                   	cdq    
10000a66:	83 ec 0c             	sub    esp,0xc
10000a69:	8d 9d b0 fe ff ff    	lea    ebx,[ebp-0x150]
10000a6f:	53                   	push   ebx
10000a70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a73:	52                   	push   edx
10000a74:	50                   	push   eax
10000a75:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a78:	ff d1                	call   ecx
10000a7a:	83 c4 20             	add    esp,0x20
10000a7d:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a83:	3d 00 10 00 00       	cmp    eax,0x1000
10000a88:	75 05                	jne    10000a8f <copytree(char*, char*)+0x3a1>
10000a8a:	eb 9a                	jmp    10000a26 <copytree(char*, char*)+0x338>
10000a8c:	90                   	nop
10000a8d:	eb 01                	jmp    10000a90 <copytree(char*, char*)+0x3a2>
10000a8f:	90                   	nop
10000a90:	83 ec 0c             	sub    esp,0xc
10000a93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a96:	e8 fc ff ff ff       	call   10000a97 <copytree(char*, char*)+0x3a9>	10000a97: R_386_PC32	free
10000a9b:	83 c4 10             	add    esp,0x10
10000a9e:	83 ec 0c             	sub    esp,0xc
10000aa1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000aa4:	e8 fc ff ff ff       	call   10000aa5 <copytree(char*, char*)+0x3b7>	10000aa5: R_386_PC32	File::close()
10000aa9:	83 c4 10             	add    esp,0x10
10000aac:	83 ec 0c             	sub    esp,0xc
10000aaf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <copytree(char*, char*)+0x3c5>	10000ab3: R_386_PC32	File::close()
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000abe:	74 15                	je     10000ad5 <copytree(char*, char*)+0x3e7>
10000ac0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000ac3:	8b 00                	mov    eax,DWORD PTR [eax]
10000ac5:	83 c0 08             	add    eax,0x8
10000ac8:	8b 00                	mov    eax,DWORD PTR [eax]
10000aca:	83 ec 0c             	sub    esp,0xc
10000acd:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ad0:	ff d0                	call   eax
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10000ad9:	0f 84 ec fc ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000adf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000ae2:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae4:	83 c0 08             	add    eax,0x8
10000ae7:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae9:	83 ec 0c             	sub    esp,0xc
10000aec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000aef:	ff d0                	call   eax
10000af1:	83 c4 10             	add    esp,0x10
10000af4:	e9 d2 fc ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000af9:	90                   	nop
10000afa:	83 ec 0c             	sub    esp,0xc
10000afd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000b00:	e8 fc ff ff ff       	call   10000b01 <copytree(char*, char*)+0x413>	10000b01: R_386_PC32	free
10000b05:	83 c4 10             	add    esp,0x10
10000b08:	83 ec 0c             	sub    esp,0xc
10000b0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000b0e:	e8 fc ff ff ff       	call   10000b0f <copytree(char*, char*)+0x421>	10000b0f: R_386_PC32	free
10000b13:	83 c4 10             	add    esp,0x10
10000b16:	83 ec 0c             	sub    esp,0xc
10000b19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b1c:	e8 fc ff ff ff       	call   10000b1d <copytree(char*, char*)+0x42f>	10000b1d: R_386_PC32	Directory::close()
10000b21:	83 c4 10             	add    esp,0x10
10000b24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000b28:	74 18                	je     10000b42 <copytree(char*, char*)+0x454>
10000b2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000b2d:	8b 00                	mov    eax,DWORD PTR [eax]
10000b2f:	83 c0 08             	add    eax,0x8
10000b32:	8b 00                	mov    eax,DWORD PTR [eax]
10000b34:	83 ec 0c             	sub    esp,0xc
10000b37:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b3a:	ff d0                	call   eax
10000b3c:	83 c4 10             	add    esp,0x10
10000b3f:	eb 01                	jmp    10000b42 <copytree(char*, char*)+0x454>
10000b41:	90                   	nop
10000b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000b45:	c9                   	leave  
10000b46:	c3                   	ret    

10000b47 <backupTree(char*, unsigned short)>:
10000b47:	55                   	push   ebp
10000b48:	89 e5                	mov    ebp,esp
10000b4a:	57                   	push   edi
10000b4b:	56                   	push   esi
10000b4c:	53                   	push   ebx
10000b4d:	81 ec 8c 12 00 00    	sub    esp,0x128c
10000b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000b56:	66 89 85 74 ed ff ff 	mov    WORD PTR [ebp-0x128c],ax
10000b5d:	83 ec 0c             	sub    esp,0xc
10000b60:	68 90 01 00 00       	push   0x190
10000b65:	e8 fc ff ff ff       	call   10000b66 <backupTree(char*, unsigned short)+0x1f>	10000b66: R_386_PC32	malloc
10000b6a:	83 c4 10             	add    esp,0x10
10000b6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000b70:	83 ec 04             	sub    esp,0x4
10000b73:	68 90 01 00 00       	push   0x190
10000b78:	6a 00                	push   0x0
10000b7a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000b7d:	e8 fc ff ff ff       	call   10000b7e <backupTree(char*, unsigned short)+0x37>	10000b7e: R_386_PC32	memset
10000b82:	83 c4 10             	add    esp,0x10
10000b85:	8d 85 a8 fe ff ff    	lea    eax,[ebp-0x158]
10000b8b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000b8e:	83 ec 0c             	sub    esp,0xc
10000b91:	68 14 01 00 00       	push   0x114
10000b96:	e8 fc ff ff ff       	call   10000b97 <backupTree(char*, unsigned short)+0x50>	10000b97: R_386_PC32	operator new(unsigned long)
10000b9b:	83 c4 10             	add    esp,0x10
10000b9e:	89 c3                	mov    ebx,eax
10000ba0:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ba5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000baa:	83 ec 04             	sub    esp,0x4
10000bad:	50                   	push   eax
10000bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bb1:	53                   	push   ebx
10000bb2:	e8 fc ff ff ff       	call   10000bb3 <backupTree(char*, unsigned short)+0x6c>	10000bb3: R_386_PC32	Directory::Directory(char const*, Process*)
10000bb7:	83 c4 10             	add    esp,0x10
10000bba:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000bbd:	83 ec 0c             	sub    esp,0xc
10000bc0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bc3:	e8 fc ff ff ff       	call   10000bc4 <backupTree(char*, unsigned short)+0x7d>	10000bc4: R_386_PC32	Directory::open()
10000bc8:	83 c4 10             	add    esp,0x10
10000bcb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000bce:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000bd2:	74 34                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000bd4:	83 ec 0c             	sub    esp,0xc
10000bd7:	68 1b a5 00 10       	push   0x1000a51b	10000bd8: R_386_32	.text
10000bdc:	e8 fc ff ff ff       	call   10000bdd <backupTree(char*, unsigned short)+0x96>	10000bdd: R_386_PC32	Dbg::kprintf(char const*, ...)
10000be1:	83 c4 10             	add    esp,0x10
10000be4:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10000be8:	0f 84 c8 05 00 00    	je     100011b6 <backupTree(char*, unsigned short)+0x66f>
10000bee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000bf1:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf3:	83 c0 08             	add    eax,0x8
10000bf6:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf8:	83 ec 0c             	sub    esp,0xc
10000bfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bfe:	ff d0                	call   eax
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	e9 af 05 00 00       	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
10000c08:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c0b:	8b 00                	mov    eax,DWORD PTR [eax]
10000c0d:	83 c0 0c             	add    eax,0xc
10000c10:	8b 00                	mov    eax,DWORD PTR [eax]
10000c12:	83 ec 0c             	sub    esp,0xc
10000c15:	8d 95 a4 fe ff ff    	lea    edx,[ebp-0x15c]
10000c1b:	52                   	push   edx
10000c1c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c1f:	6a 00                	push   0x0
10000c21:	68 10 01 00 00       	push   0x110
10000c26:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c29:	ff d0                	call   eax
10000c2b:	83 c4 20             	add    esp,0x20
10000c2e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c31:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10000c35:	0f 85 41 05 00 00    	jne    1000117c <backupTree(char*, unsigned short)+0x635>
10000c3b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c3e:	83 c0 10             	add    eax,0x10
10000c41:	83 ec 08             	sub    esp,0x8
10000c44:	68 14 a5 00 10       	push   0x1000a514	10000c45: R_386_32	.text
10000c49:	50                   	push   eax
10000c4a:	e8 fc ff ff ff       	call   10000c4b <backupTree(char*, unsigned short)+0x104>	10000c4b: R_386_PC32	strcmp
10000c4f:	83 c4 10             	add    esp,0x10
10000c52:	85 c0                	test   eax,eax
10000c54:	74 b2                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c59:	83 c0 10             	add    eax,0x10
10000c5c:	83 ec 08             	sub    esp,0x8
10000c5f:	68 16 a5 00 10       	push   0x1000a516	10000c60: R_386_32	.text
10000c64:	50                   	push   eax
10000c65:	e8 fc ff ff ff       	call   10000c66 <backupTree(char*, unsigned short)+0x11f>	10000c66: R_386_PC32	strcmp
10000c6a:	83 c4 10             	add    esp,0x10
10000c6d:	85 c0                	test   eax,eax
10000c6f:	74 97                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c71:	83 ec 08             	sub    esp,0x8
10000c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c77:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c7a:	e8 fc ff ff ff       	call   10000c7b <backupTree(char*, unsigned short)+0x134>	10000c7b: R_386_PC32	strcpy
10000c7f:	83 c4 10             	add    esp,0x10
10000c82:	83 ec 08             	sub    esp,0x8
10000c85:	68 19 a5 00 10       	push   0x1000a519	10000c86: R_386_32	.text
10000c8a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c8d:	e8 fc ff ff ff       	call   10000c8e <backupTree(char*, unsigned short)+0x147>	10000c8e: R_386_PC32	strcat
10000c92:	83 c4 10             	add    esp,0x10
10000c95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c98:	83 c0 10             	add    eax,0x10
10000c9b:	83 ec 08             	sub    esp,0x8
10000c9e:	50                   	push   eax
10000c9f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ca2:	e8 fc ff ff ff       	call   10000ca3 <backupTree(char*, unsigned short)+0x15c>	10000ca3: R_386_PC32	strcat
10000ca7:	83 c4 10             	add    esp,0x10
10000caa:	66 c7 45 e6 bc ad    	mov    WORD PTR [ebp-0x1a],0xadbc
10000cb0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10000cb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000cba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cbd:	01 d0                	add    eax,edx
10000cbf:	83 c0 10             	add    eax,0x10
10000cc2:	8a 00                	mov    al,BYTE PTR [eax]
10000cc4:	84 c0                	test   al,al
10000cc6:	74 3c                	je     10000d04 <backupTree(char*, unsigned short)+0x1bd>
10000cc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000ccb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cce:	01 d0                	add    eax,edx
10000cd0:	83 c0 10             	add    eax,0x10
10000cd3:	8a 00                	mov    al,BYTE PTR [eax]
10000cd5:	66 0f be d0          	movsx  dx,al
10000cd9:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000cdd:	31 d0                	xor    eax,edx
10000cdf:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000ce3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000ce7:	c1 e0 03             	shl    eax,0x3
10000cea:	89 c2                	mov    edx,eax
10000cec:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000cf0:	c1 f8 0d             	sar    eax,0xd
10000cf3:	09 d0                	or     eax,edx
10000cf5:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000cf9:	66 81 6d e6 f1 06    	sub    WORD PTR [ebp-0x1a],0x6f1
10000cff:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10000d02:	eb b3                	jmp    10000cb7 <backupTree(char*, unsigned short)+0x170>
10000d04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000d0a:	83 e0 02             	and    eax,0x2
10000d0d:	85 c0                	test   eax,eax
10000d0f:	74 37                	je     10000d48 <backupTree(char*, unsigned short)+0x201>
10000d11:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d14:	83 c0 10             	add    eax,0x10
10000d17:	83 ec 08             	sub    esp,0x8
10000d1a:	68 69 a5 00 10       	push   0x1000a569	10000d1b: R_386_32	.text
10000d1f:	50                   	push   eax
10000d20:	e8 fc ff ff ff       	call   10000d21 <backupTree(char*, unsigned short)+0x1da>	10000d21: R_386_PC32	strcmp
10000d25:	83 c4 10             	add    esp,0x10
10000d28:	85 c0                	test   eax,eax
10000d2a:	0f 84 d8 fe ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d30:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000d34:	83 ec 08             	sub    esp,0x8
10000d37:	50                   	push   eax
10000d38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000d3b:	e8 fc ff ff ff       	call   10000d3c <backupTree(char*, unsigned short)+0x1f5>	10000d3c: R_386_PC32	backupTree(char*, unsigned short)
10000d40:	83 c4 10             	add    esp,0x10
10000d43:	e9 c0 fe ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d48:	c6 85 a3 fe ff ff 00 	mov    BYTE PTR [ebp-0x15d],0x0
10000d4f:	83 ec 08             	sub    esp,0x8
10000d52:	68 70 a5 00 10       	push   0x1000a570	10000d53: R_386_32	.text
10000d57:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d5d:	50                   	push   eax
10000d5e:	e8 fc ff ff ff       	call   10000d5f <backupTree(char*, unsigned short)+0x218>	10000d5f: R_386_PC32	strcpy
10000d63:	83 c4 10             	add    esp,0x10
10000d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10000d6c:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000d72:	83 ec 08             	sub    esp,0x8
10000d75:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000d7b:	50                   	push   eax
10000d7c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d82:	50                   	push   eax
10000d83:	e8 fc ff ff ff       	call   10000d84 <backupTree(char*, unsigned short)+0x23d>	10000d84: R_386_PC32	strcat
10000d88:	83 c4 10             	add    esp,0x10
10000d8b:	83 ec 04             	sub    esp,0x4
10000d8e:	6a 09                	push   0x9
10000d90:	6a 00                	push   0x0
10000d92:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000d98:	50                   	push   eax
10000d99:	e8 fc ff ff ff       	call   10000d9a <backupTree(char*, unsigned short)+0x253>	10000d9a: R_386_PC32	memset
10000d9e:	83 c4 10             	add    esp,0x10
10000da1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000da4:	83 c0 10             	add    eax,0x10
10000da7:	83 ec 04             	sub    esp,0x4
10000daa:	6a 08                	push   0x8
10000dac:	50                   	push   eax
10000dad:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000db3:	50                   	push   eax
10000db4:	e8 fc ff ff ff       	call   10000db5 <backupTree(char*, unsigned short)+0x26e>	10000db5: R_386_PC32	strncpyxx(char*, char const*, unsigned long)
10000db9:	83 c4 10             	add    esp,0x10
10000dbc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000dc3:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000dc7:	0f 8f c5 00 00 00    	jg     10000e92 <backupTree(char*, unsigned short)+0x34b>
10000dcd:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000dd3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000dd6:	01 d0                	add    eax,edx
10000dd8:	8a 00                	mov    al,BYTE PTR [eax]
10000dda:	3c 60                	cmp    al,0x60
10000ddc:	7e 30                	jle    10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000dde:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000de4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000de7:	01 d0                	add    eax,edx
10000de9:	8a 00                	mov    al,BYTE PTR [eax]
10000deb:	3c 7a                	cmp    al,0x7a
10000ded:	7f 1f                	jg     10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000def:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000df5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000df8:	01 d0                	add    eax,edx
10000dfa:	8a 00                	mov    al,BYTE PTR [eax]
10000dfc:	83 e8 20             	sub    eax,0x20
10000dff:	88 c2                	mov    dl,al
10000e01:	8d 8d 99 fe ff ff    	lea    ecx,[ebp-0x167]
10000e07:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e0a:	01 c8                	add    eax,ecx
10000e0c:	88 10                	mov    BYTE PTR [eax],dl
10000e0e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e17:	01 d0                	add    eax,edx
10000e19:	8a 00                	mov    al,BYTE PTR [eax]
10000e1b:	3c 59                	cmp    al,0x59
10000e1d:	75 0e                	jne    10000e2d <backupTree(char*, unsigned short)+0x2e6>
10000e1f:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e25:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e28:	01 d0                	add    eax,edx
10000e2a:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e2d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e33:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e36:	01 d0                	add    eax,edx
10000e38:	8a 00                	mov    al,BYTE PTR [eax]
10000e3a:	3c 5a                	cmp    al,0x5a
10000e3c:	75 0e                	jne    10000e4c <backupTree(char*, unsigned short)+0x305>
10000e3e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e47:	01 d0                	add    eax,edx
10000e49:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e4c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e52:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e55:	01 d0                	add    eax,edx
10000e57:	8a 00                	mov    al,BYTE PTR [eax]
10000e59:	3c 20                	cmp    al,0x20
10000e5b:	75 0e                	jne    10000e6b <backupTree(char*, unsigned short)+0x324>
10000e5d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e63:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e66:	01 d0                	add    eax,edx
10000e68:	c6 00 59             	mov    BYTE PTR [eax],0x59
10000e6b:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e74:	01 d0                	add    eax,edx
10000e76:	8a 00                	mov    al,BYTE PTR [eax]
10000e78:	3c 2e                	cmp    al,0x2e
10000e7a:	75 0e                	jne    10000e8a <backupTree(char*, unsigned short)+0x343>
10000e7c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e82:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e85:	01 d0                	add    eax,edx
10000e87:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10000e8a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10000e8d:	e9 31 ff ff ff       	jmp    10000dc3 <backupTree(char*, unsigned short)+0x27c>
10000e92:	83 ec 08             	sub    esp,0x8
10000e95:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000e9b:	50                   	push   eax
10000e9c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ea2:	50                   	push   eax
10000ea3:	e8 fc ff ff ff       	call   10000ea4 <backupTree(char*, unsigned short)+0x35d>	10000ea4: R_386_PC32	strcat
10000ea8:	83 c4 10             	add    esp,0x10
10000eab:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000eae:	83 c0 10             	add    eax,0x10
10000eb1:	83 ec 0c             	sub    esp,0xc
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <backupTree(char*, unsigned short)+0x36f>	10000eb6: R_386_PC32	strlen
10000eba:	83 c4 10             	add    esp,0x10
10000ebd:	83 c0 41             	add    eax,0x41
10000ec0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000ec6:	83 ec 08             	sub    esp,0x8
10000ec9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000ecf:	50                   	push   eax
10000ed0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ed6:	50                   	push   eax
10000ed7:	e8 fc ff ff ff       	call   10000ed8 <backupTree(char*, unsigned short)+0x391>	10000ed8: R_386_PC32	strcat
10000edc:	83 c4 10             	add    esp,0x10
10000edf:	83 ec 08             	sub    esp,0x8
10000ee2:	68 14 a5 00 10       	push   0x1000a514	10000ee3: R_386_32	.text
10000ee7:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000eed:	50                   	push   eax
10000eee:	e8 fc ff ff ff       	call   10000eef <backupTree(char*, unsigned short)+0x3a8>	10000eef: R_386_PC32	strcat
10000ef3:	83 c4 10             	add    esp,0x10
10000ef6:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000efa:	25 65 07 00 00       	and    eax,0x765
10000eff:	33 85 74 ed ff ff    	xor    eax,DWORD PTR [ebp-0x128c]
10000f05:	66 89 45 c6          	mov    WORD PTR [ebp-0x3a],ax
10000f09:	8d 85 88 fe ff ff    	lea    eax,[ebp-0x178]
10000f0f:	bb 89 a5 00 10       	mov    ebx,0x1000a589	10000f10: R_386_32	.text
10000f14:	ba 11 00 00 00       	mov    edx,0x11
10000f19:	89 c7                	mov    edi,eax
10000f1b:	89 de                	mov    esi,ebx
10000f1d:	89 d1                	mov    ecx,edx
10000f1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000f21:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f25:	83 e0 0f             	and    eax,0xf
10000f28:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f2f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f35:	83 ec 08             	sub    esp,0x8
10000f38:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f3e:	50                   	push   eax
10000f3f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f45:	50                   	push   eax
10000f46:	e8 fc ff ff ff       	call   10000f47 <backupTree(char*, unsigned short)+0x400>	10000f47: R_386_PC32	strcat
10000f4b:	83 c4 10             	add    esp,0x10
10000f4e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f52:	c1 f8 04             	sar    eax,0x4
10000f55:	83 e0 0f             	and    eax,0xf
10000f58:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f5f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f65:	83 ec 08             	sub    esp,0x8
10000f68:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f6e:	50                   	push   eax
10000f6f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f75:	50                   	push   eax
10000f76:	e8 fc ff ff ff       	call   10000f77 <backupTree(char*, unsigned short)+0x430>	10000f77: R_386_PC32	strcat
10000f7b:	83 c4 10             	add    esp,0x10
10000f7e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f82:	c1 f8 08             	sar    eax,0x8
10000f85:	83 e0 0f             	and    eax,0xf
10000f88:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f8f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f95:	83 ec 08             	sub    esp,0x8
10000f98:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f9e:	50                   	push   eax
10000f9f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fa5:	50                   	push   eax
10000fa6:	e8 fc ff ff ff       	call   10000fa7 <backupTree(char*, unsigned short)+0x460>	10000fa7: R_386_PC32	strcat
10000fab:	83 c4 10             	add    esp,0x10
10000fae:	66 8b 45 c6          	mov    ax,WORD PTR [ebp-0x3a]
10000fb2:	66 c1 e8 0c          	shr    ax,0xc
10000fb6:	0f b7 c0             	movzx  eax,ax
10000fb9:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000fc0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000fc6:	83 ec 08             	sub    esp,0x8
10000fc9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000fcf:	50                   	push   eax
10000fd0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fd6:	50                   	push   eax
10000fd7:	e8 fc ff ff ff       	call   10000fd8 <backupTree(char*, unsigned short)+0x491>	10000fd8: R_386_PC32	strcat
10000fdc:	83 c4 10             	add    esp,0x10
10000fdf:	83 ec 0c             	sub    esp,0xc
10000fe2:	68 14 01 00 00       	push   0x114
10000fe7:	e8 fc ff ff ff       	call   10000fe8 <backupTree(char*, unsigned short)+0x4a1>	10000fe8: R_386_PC32	operator new(unsigned long)
10000fec:	83 c4 10             	add    esp,0x10
10000fef:	89 c3                	mov    ebx,eax
10000ff1:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ff6:	8b 00                	mov    eax,DWORD PTR [eax]
10000ff8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000ffb:	83 ec 04             	sub    esp,0x4
10000ffe:	50                   	push   eax
10000fff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001002:	53                   	push   ebx
10001003:	e8 fc ff ff ff       	call   10001004 <backupTree(char*, unsigned short)+0x4bd>	10001004: R_386_PC32	File::File(char const*, Process*)
10001008:	83 c4 10             	add    esp,0x10
1000100b:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
1000100e:	83 ec 08             	sub    esp,0x8
10001011:	6a 01                	push   0x1
10001013:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001016:	e8 fc ff ff ff       	call   10001017 <backupTree(char*, unsigned short)+0x4d0>	10001017: R_386_PC32	File::open(FileOpenMode)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001022:	75 15                	jne    10001039 <backupTree(char*, unsigned short)+0x4f2>
10001024:	83 ec 0c             	sub    esp,0xc
10001027:	68 50 a5 00 10       	push   0x1000a550	10001028: R_386_32	.text
1000102c:	e8 fc ff ff ff       	call   1000102d <backupTree(char*, unsigned short)+0x4e6>	1000102d: R_386_PC32	KePanic(char const*)
10001031:	83 c4 10             	add    esp,0x10
10001034:	e9 3e 01 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
10001039:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
1000103d:	0f 84 c5 fb ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001043:	83 ec 0c             	sub    esp,0xc
10001046:	68 14 01 00 00       	push   0x114
1000104b:	e8 fc ff ff ff       	call   1000104c <backupTree(char*, unsigned short)+0x505>	1000104c: R_386_PC32	operator new(unsigned long)
10001050:	83 c4 10             	add    esp,0x10
10001053:	89 c3                	mov    ebx,eax
10001055:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000105a:	8b 00                	mov    eax,DWORD PTR [eax]
1000105c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000105f:	83 ec 04             	sub    esp,0x4
10001062:	50                   	push   eax
10001063:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10001069:	50                   	push   eax
1000106a:	53                   	push   ebx
1000106b:	e8 fc ff ff ff       	call   1000106c <backupTree(char*, unsigned short)+0x525>	1000106c: R_386_PC32	File::File(char const*, Process*)
10001070:	83 c4 10             	add    esp,0x10
10001073:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10001076:	83 ec 08             	sub    esp,0x8
10001079:	6a 12                	push   0x12
1000107b:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000107e:	e8 fc ff ff ff       	call   1000107f <backupTree(char*, unsigned short)+0x538>	1000107f: R_386_PC32	File::open(FileOpenMode)
10001083:	83 c4 10             	add    esp,0x10
10001086:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000108a:	75 23                	jne    100010af <backupTree(char*, unsigned short)+0x568>
1000108c:	83 ec 0c             	sub    esp,0xc
1000108f:	68 50 a5 00 10       	push   0x1000a550	10001090: R_386_32	.text
10001094:	e8 fc ff ff ff       	call   10001095 <backupTree(char*, unsigned short)+0x54e>	10001095: R_386_PC32	KePanic(char const*)
10001099:	83 c4 10             	add    esp,0x10
1000109c:	83 ec 0c             	sub    esp,0xc
1000109f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
100010a2:	e8 fc ff ff ff       	call   100010a3 <backupTree(char*, unsigned short)+0x55c>	100010a3: R_386_PC32	File::close()
100010a7:	83 c4 10             	add    esp,0x10
100010aa:	e9 c8 00 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
100010af:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100010b2:	8b 00                	mov    eax,DWORD PTR [eax]
100010b4:	83 c0 0c             	add    eax,0xc
100010b7:	8b 00                	mov    eax,DWORD PTR [eax]
100010b9:	83 ec 0c             	sub    esp,0xc
100010bc:	8d 95 84 fe ff ff    	lea    edx,[ebp-0x17c]
100010c2:	52                   	push   edx
100010c3:	8d 95 80 ee ff ff    	lea    edx,[ebp-0x1180]
100010c9:	52                   	push   edx
100010ca:	6a 00                	push   0x0
100010cc:	68 00 10 00 00       	push   0x1000
100010d1:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100010d4:	ff d0                	call   eax
100010d6:	83 c4 20             	add    esp,0x20
100010d9:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100010dc:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100010e0:	75 3b                	jne    1000111d <backupTree(char*, unsigned short)+0x5d6>
100010e2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100010e5:	8b 00                	mov    eax,DWORD PTR [eax]
100010e7:	83 c0 10             	add    eax,0x10
100010ea:	8b 08                	mov    ecx,DWORD PTR [eax]
100010ec:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
100010f2:	99                   	cdq    
100010f3:	83 ec 0c             	sub    esp,0xc
100010f6:	8d 9d 80 fe ff ff    	lea    ebx,[ebp-0x180]
100010fc:	53                   	push   ebx
100010fd:	8d 9d 80 ee ff ff    	lea    ebx,[ebp-0x1180]
10001103:	53                   	push   ebx
10001104:	52                   	push   edx
10001105:	50                   	push   eax
10001106:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001109:	ff d1                	call   ecx
1000110b:	83 c4 20             	add    esp,0x20
1000110e:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
10001114:	3d 00 10 00 00       	cmp    eax,0x1000
10001119:	75 05                	jne    10001120 <backupTree(char*, unsigned short)+0x5d9>
1000111b:	eb 92                	jmp    100010af <backupTree(char*, unsigned short)+0x568>
1000111d:	90                   	nop
1000111e:	eb 01                	jmp    10001121 <backupTree(char*, unsigned short)+0x5da>
10001120:	90                   	nop
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001127:	e8 fc ff ff ff       	call   10001128 <backupTree(char*, unsigned short)+0x5e1>	10001128: R_386_PC32	File::close()
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	83 ec 0c             	sub    esp,0xc
10001132:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001135:	e8 fc ff ff ff       	call   10001136 <backupTree(char*, unsigned short)+0x5ef>	10001136: R_386_PC32	File::close()
1000113a:	83 c4 10             	add    esp,0x10
1000113d:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001141:	74 15                	je     10001158 <backupTree(char*, unsigned short)+0x611>
10001143:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001146:	8b 00                	mov    eax,DWORD PTR [eax]
10001148:	83 c0 08             	add    eax,0x8
1000114b:	8b 00                	mov    eax,DWORD PTR [eax]
1000114d:	83 ec 0c             	sub    esp,0xc
10001150:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001153:	ff d0                	call   eax
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000115c:	0f 84 a6 fa ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001162:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10001165:	8b 00                	mov    eax,DWORD PTR [eax]
10001167:	83 c0 08             	add    eax,0x8
1000116a:	8b 00                	mov    eax,DWORD PTR [eax]
1000116c:	83 ec 0c             	sub    esp,0xc
1000116f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001172:	ff d0                	call   eax
10001174:	83 c4 10             	add    esp,0x10
10001177:	e9 8c fa ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
1000117c:	90                   	nop
1000117d:	83 ec 0c             	sub    esp,0xc
10001180:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001183:	e8 fc ff ff ff       	call   10001184 <backupTree(char*, unsigned short)+0x63d>	10001184: R_386_PC32	free
10001188:	83 c4 10             	add    esp,0x10
1000118b:	83 ec 0c             	sub    esp,0xc
1000118e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001191:	e8 fc ff ff ff       	call   10001192 <backupTree(char*, unsigned short)+0x64b>	10001192: R_386_PC32	Directory::close()
10001196:	83 c4 10             	add    esp,0x10
10001199:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
1000119d:	74 18                	je     100011b7 <backupTree(char*, unsigned short)+0x670>
1000119f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100011a2:	8b 00                	mov    eax,DWORD PTR [eax]
100011a4:	83 c0 08             	add    eax,0x8
100011a7:	8b 00                	mov    eax,DWORD PTR [eax]
100011a9:	83 ec 0c             	sub    esp,0xc
100011ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011af:	ff d0                	call   eax
100011b1:	83 c4 10             	add    esp,0x10
100011b4:	eb 01                	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
100011b6:	90                   	nop
100011b7:	8d 65 f4             	lea    esp,[ebp-0xc]
100011ba:	5b                   	pop    ebx
100011bb:	5e                   	pop    esi
100011bc:	5f                   	pop    edi
100011bd:	5d                   	pop    ebp
100011be:	c3                   	ret    

100011bf <createUser(char const*)>:
100011bf:	55                   	push   ebp
100011c0:	89 e5                	mov    ebp,esp
100011c2:	81 ec 08 01 00 00    	sub    esp,0x108
100011c8:	68 9a a5 00 10       	push   0x1000a59a	100011c9: R_386_32	.text
100011cd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011d3:	50                   	push   eax
100011d4:	e8 fc ff ff ff       	call   100011d5 <createUser(char const*)+0x16>	100011d5: R_386_PC32	strcpy
100011d9:	83 c4 08             	add    esp,0x8
100011dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011df:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011e5:	50                   	push   eax
100011e6:	e8 fc ff ff ff       	call   100011e7 <createUser(char const*)+0x28>	100011e7: R_386_PC32	strcat
100011eb:	83 c4 08             	add    esp,0x8
100011ee:	83 ec 08             	sub    esp,0x8
100011f1:	68 c0 01 00 00       	push   0x1c0
100011f6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011fc:	50                   	push   eax
100011fd:	e8 fc ff ff ff       	call   100011fe <createUser(char const*)+0x3f>	100011fe: R_386_PC32	mkdir(char const*, int)
10001202:	83 c4 10             	add    esp,0x10
10001205:	83 ec 08             	sub    esp,0x8
10001208:	68 a4 a5 00 10       	push   0x1000a5a4	10001209: R_386_32	.text
1000120d:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001213:	50                   	push   eax
10001214:	e8 fc ff ff ff       	call   10001215 <createUser(char const*)+0x56>	10001215: R_386_PC32	strcat
10001219:	83 c4 10             	add    esp,0x10
1000121c:	83 ec 08             	sub    esp,0x8
1000121f:	68 c0 01 00 00       	push   0x1c0
10001224:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000122a:	50                   	push   eax
1000122b:	e8 fc ff ff ff       	call   1000122c <createUser(char const*)+0x6d>	1000122c: R_386_PC32	mkdir(char const*, int)
10001230:	83 c4 10             	add    esp,0x10
10001233:	83 ec 08             	sub    esp,0x8
10001236:	68 9a a5 00 10       	push   0x1000a59a	10001237: R_386_32	.text
1000123b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001241:	50                   	push   eax
10001242:	e8 fc ff ff ff       	call   10001243 <createUser(char const*)+0x84>	10001243: R_386_PC32	strcpy
10001247:	83 c4 10             	add    esp,0x10
1000124a:	83 ec 08             	sub    esp,0x8
1000124d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001250:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001256:	50                   	push   eax
10001257:	e8 fc ff ff ff       	call   10001258 <createUser(char const*)+0x99>	10001258: R_386_PC32	strcat
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	83 ec 08             	sub    esp,0x8
10001262:	68 ad a5 00 10       	push   0x1000a5ad	10001263: R_386_32	.text
10001267:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000126d:	50                   	push   eax
1000126e:	e8 fc ff ff ff       	call   1000126f <createUser(char const*)+0xb0>	1000126f: R_386_PC32	strcat
10001273:	83 c4 10             	add    esp,0x10
10001276:	83 ec 08             	sub    esp,0x8
10001279:	68 c0 01 00 00       	push   0x1c0
1000127e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001284:	50                   	push   eax
10001285:	e8 fc ff ff ff       	call   10001286 <createUser(char const*)+0xc7>	10001286: R_386_PC32	mkdir(char const*, int)
1000128a:	83 c4 10             	add    esp,0x10
1000128d:	83 ec 08             	sub    esp,0x8
10001290:	68 9a a5 00 10       	push   0x1000a59a	10001291: R_386_32	.text
10001295:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000129b:	50                   	push   eax
1000129c:	e8 fc ff ff ff       	call   1000129d <createUser(char const*)+0xde>	1000129d: R_386_PC32	strcpy
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	83 ec 08             	sub    esp,0x8
100012a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012aa:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012b0:	50                   	push   eax
100012b1:	e8 fc ff ff ff       	call   100012b2 <createUser(char const*)+0xf3>	100012b2: R_386_PC32	strcat
100012b6:	83 c4 10             	add    esp,0x10
100012b9:	83 ec 08             	sub    esp,0x8
100012bc:	68 b8 a5 00 10       	push   0x1000a5b8	100012bd: R_386_32	.text
100012c1:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012c7:	50                   	push   eax
100012c8:	e8 fc ff ff ff       	call   100012c9 <createUser(char const*)+0x10a>	100012c9: R_386_PC32	strcat
100012cd:	83 c4 10             	add    esp,0x10
100012d0:	83 ec 08             	sub    esp,0x8
100012d3:	68 c0 01 00 00       	push   0x1c0
100012d8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <createUser(char const*)+0x121>	100012e0: R_386_PC32	mkdir(char const*, int)
100012e4:	83 c4 10             	add    esp,0x10
100012e7:	83 ec 08             	sub    esp,0x8
100012ea:	68 9a a5 00 10       	push   0x1000a59a	100012eb: R_386_32	.text
100012ef:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012f5:	50                   	push   eax
100012f6:	e8 fc ff ff ff       	call   100012f7 <createUser(char const*)+0x138>	100012f7: R_386_PC32	strcpy
100012fb:	83 c4 10             	add    esp,0x10
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001304:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000130a:	50                   	push   eax
1000130b:	e8 fc ff ff ff       	call   1000130c <createUser(char const*)+0x14d>	1000130c: R_386_PC32	strcat
10001310:	83 c4 10             	add    esp,0x10
10001313:	83 ec 08             	sub    esp,0x8
10001316:	68 c3 a5 00 10       	push   0x1000a5c3	10001317: R_386_32	.text
1000131b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001321:	50                   	push   eax
10001322:	e8 fc ff ff ff       	call   10001323 <createUser(char const*)+0x164>	10001323: R_386_PC32	strcat
10001327:	83 c4 10             	add    esp,0x10
1000132a:	83 ec 08             	sub    esp,0x8
1000132d:	68 c0 01 00 00       	push   0x1c0
10001332:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001338:	50                   	push   eax
10001339:	e8 fc ff ff ff       	call   1000133a <createUser(char const*)+0x17b>	1000133a: R_386_PC32	mkdir(char const*, int)
1000133e:	83 c4 10             	add    esp,0x10
10001341:	83 ec 08             	sub    esp,0x8
10001344:	68 9a a5 00 10       	push   0x1000a59a	10001345: R_386_32	.text
10001349:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000134f:	50                   	push   eax
10001350:	e8 fc ff ff ff       	call   10001351 <createUser(char const*)+0x192>	10001351: R_386_PC32	strcpy
10001355:	83 c4 10             	add    esp,0x10
10001358:	83 ec 08             	sub    esp,0x8
1000135b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000135e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001364:	50                   	push   eax
10001365:	e8 fc ff ff ff       	call   10001366 <createUser(char const*)+0x1a7>	10001366: R_386_PC32	strcat
1000136a:	83 c4 10             	add    esp,0x10
1000136d:	83 ec 08             	sub    esp,0x8
10001370:	68 cd a5 00 10       	push   0x1000a5cd	10001371: R_386_32	.text
10001375:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000137b:	50                   	push   eax
1000137c:	e8 fc ff ff ff       	call   1000137d <createUser(char const*)+0x1be>	1000137d: R_386_PC32	strcat
10001381:	83 c4 10             	add    esp,0x10
10001384:	83 ec 08             	sub    esp,0x8
10001387:	68 c0 01 00 00       	push   0x1c0
1000138c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001392:	50                   	push   eax
10001393:	e8 fc ff ff ff       	call   10001394 <createUser(char const*)+0x1d5>	10001394: R_386_PC32	mkdir(char const*, int)
10001398:	83 c4 10             	add    esp,0x10
1000139b:	83 ec 08             	sub    esp,0x8
1000139e:	68 9a a5 00 10       	push   0x1000a59a	1000139f: R_386_32	.text
100013a3:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013a9:	50                   	push   eax
100013aa:	e8 fc ff ff ff       	call   100013ab <createUser(char const*)+0x1ec>	100013ab: R_386_PC32	strcpy
100013af:	83 c4 10             	add    esp,0x10
100013b2:	83 ec 08             	sub    esp,0x8
100013b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013b8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013be:	50                   	push   eax
100013bf:	e8 fc ff ff ff       	call   100013c0 <createUser(char const*)+0x201>	100013c0: R_386_PC32	strcat
100013c4:	83 c4 10             	add    esp,0x10
100013c7:	83 ec 08             	sub    esp,0x8
100013ca:	68 d8 a5 00 10       	push   0x1000a5d8	100013cb: R_386_32	.text
100013cf:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013d5:	50                   	push   eax
100013d6:	e8 fc ff ff ff       	call   100013d7 <createUser(char const*)+0x218>	100013d7: R_386_PC32	strcat
100013db:	83 c4 10             	add    esp,0x10
100013de:	83 ec 08             	sub    esp,0x8
100013e1:	68 c0 01 00 00       	push   0x1c0
100013e6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013ec:	50                   	push   eax
100013ed:	e8 fc ff ff ff       	call   100013ee <createUser(char const*)+0x22f>	100013ee: R_386_PC32	mkdir(char const*, int)
100013f2:	83 c4 10             	add    esp,0x10
100013f5:	83 ec 08             	sub    esp,0x8
100013f8:	68 9a a5 00 10       	push   0x1000a59a	100013f9: R_386_32	.text
100013fd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001403:	50                   	push   eax
10001404:	e8 fc ff ff ff       	call   10001405 <createUser(char const*)+0x246>	10001405: R_386_PC32	strcpy
10001409:	83 c4 10             	add    esp,0x10
1000140c:	83 ec 08             	sub    esp,0x8
1000140f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001412:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001418:	50                   	push   eax
10001419:	e8 fc ff ff ff       	call   1000141a <createUser(char const*)+0x25b>	1000141a: R_386_PC32	strcat
1000141e:	83 c4 10             	add    esp,0x10
10001421:	83 ec 08             	sub    esp,0x8
10001424:	68 df a5 00 10       	push   0x1000a5df	10001425: R_386_32	.text
10001429:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000142f:	50                   	push   eax
10001430:	e8 fc ff ff ff       	call   10001431 <createUser(char const*)+0x272>	10001431: R_386_PC32	strcat
10001435:	83 c4 10             	add    esp,0x10
10001438:	83 ec 08             	sub    esp,0x8
1000143b:	68 c0 01 00 00       	push   0x1c0
10001440:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001446:	50                   	push   eax
10001447:	e8 fc ff ff ff       	call   10001448 <createUser(char const*)+0x289>	10001448: R_386_PC32	mkdir(char const*, int)
1000144c:	83 c4 10             	add    esp,0x10
1000144f:	83 ec 08             	sub    esp,0x8
10001452:	68 e7 a5 00 10       	push   0x1000a5e7	10001453: R_386_32	.text
10001457:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000145d:	50                   	push   eax
1000145e:	e8 fc ff ff ff       	call   1000145f <createUser(char const*)+0x2a0>	1000145f: R_386_PC32	strcpy
10001463:	83 c4 10             	add    esp,0x10
10001466:	83 ec 08             	sub    esp,0x8
10001469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000146c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001472:	50                   	push   eax
10001473:	e8 fc ff ff ff       	call   10001474 <createUser(char const*)+0x2b5>	10001474: R_386_PC32	strcat
10001478:	83 c4 10             	add    esp,0x10
1000147b:	83 ec 08             	sub    esp,0x8
1000147e:	68 c0 01 00 00       	push   0x1c0
10001483:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001489:	50                   	push   eax
1000148a:	e8 fc ff ff ff       	call   1000148b <createUser(char const*)+0x2cc>	1000148b: R_386_PC32	mkdir(char const*, int)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	83 ec 08             	sub    esp,0x8
10001495:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000149b:	50                   	push   eax
1000149c:	68 00 a6 00 10       	push   0x1000a600	1000149d: R_386_32	.text
100014a1:	e8 fc ff ff ff       	call   100014a2 <createUser(char const*)+0x2e3>	100014a2: R_386_PC32	copytree(char*, char*)
100014a6:	83 c4 10             	add    esp,0x10
100014a9:	90                   	nop
100014aa:	c9                   	leave  
100014ab:	c3                   	ret    

100014ac <drawBootScreen()>:
100014ac:	55                   	push   ebp
100014ad:	89 e5                	mov    ebp,esp
100014af:	83 ec 18             	sub    esp,0x18
100014b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100014b3: R_386_32	term
100014b7:	83 ec 08             	sub    esp,0x8
100014ba:	6a 0b                	push   0xb
100014bc:	50                   	push   eax
100014bd:	e8 fc ff ff ff       	call   100014be <drawBootScreen()+0x12>	100014be: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
100014c2:	83 c4 10             	add    esp,0x10
100014c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100014c6: R_386_32	term
100014ca:	83 ec 08             	sub    esp,0x8
100014cd:	6a 00                	push   0x0
100014cf:	50                   	push   eax
100014d0:	e8 fc ff ff ff       	call   100014d1 <drawBootScreen()+0x25>	100014d1: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
100014d5:	83 c4 10             	add    esp,0x10
100014d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100014d9: R_386_32	term
100014dd:	83 ec 0c             	sub    esp,0xc
100014e0:	50                   	push   eax
100014e1:	e8 fc ff ff ff       	call   100014e2 <drawBootScreen()+0x36>	100014e2: R_386_PC32	VgaText::clearScreen()
100014e6:	83 c4 10             	add    esp,0x10
100014e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ea: R_386_32	term
100014ee:	83 ec 08             	sub    esp,0x8
100014f1:	68 1f a6 00 10       	push   0x1000a61f	100014f2: R_386_32	.text
100014f6:	50                   	push   eax
100014f7:	e8 fc ff ff ff       	call   100014f8 <drawBootScreen()+0x4c>	100014f8: R_386_PC32	VgaText::setTitle(char*)
100014fc:	83 c4 10             	add    esp,0x10
100014ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10001500: R_386_32	term
10001504:	83 ec 08             	sub    esp,0x8
10001507:	6a 00                	push   0x0
10001509:	50                   	push   eax
1000150a:	e8 fc ff ff ff       	call   1000150b <drawBootScreen()+0x5f>	1000150b: R_386_PC32	VgaText::setTitleColour(VgaColour)
1000150f:	83 c4 10             	add    esp,0x10
10001512:	a1 00 00 00 00       	mov    eax,ds:0x0	10001513: R_386_32	term
10001517:	83 ec 08             	sub    esp,0x8
1000151a:	6a 00                	push   0x0
1000151c:	50                   	push   eax
1000151d:	e8 fc ff ff ff       	call   1000151e <drawBootScreen()+0x72>	1000151e: R_386_PC32	VgaText::setTitleTextColour(VgaColour)
10001522:	83 c4 10             	add    esp,0x10
10001525:	a1 00 00 00 00       	mov    eax,ds:0x0	10001526: R_386_32	term
1000152a:	83 ec 04             	sub    esp,0x4
1000152d:	6a 00                	push   0x0
1000152f:	6a 00                	push   0x0
10001531:	50                   	push   eax
10001532:	e8 fc ff ff ff       	call   10001533 <drawBootScreen()+0x87>	10001533: R_386_PC32	VgaText::setCursor(int, int)
10001537:	83 c4 10             	add    esp,0x10
1000153a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001541:	83 7d f4 4f          	cmp    DWORD PTR [ebp-0xc],0x4f
10001545:	7f 19                	jg     10001560 <drawBootScreen()+0xb4>
10001547:	a1 00 00 00 00       	mov    eax,ds:0x0	10001548: R_386_32	term
1000154c:	6a 00                	push   0x0
1000154e:	6a 00                	push   0x0
10001550:	6a 20                	push   0x20
10001552:	50                   	push   eax
10001553:	e8 fc ff ff ff       	call   10001554 <drawBootScreen()+0xa8>	10001554: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001558:	83 c4 10             	add    esp,0x10
1000155b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000155e:	eb e1                	jmp    10001541 <drawBootScreen()+0x95>
10001560:	a0 00 00 00 00       	mov    al,ds:0x0	10001561: R_386_32	showSidebar
10001565:	84 c0                	test   al,al
10001567:	0f 84 91 00 00 00    	je     100015fe <drawBootScreen()+0x152>
1000156d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10001574:	83 7d f0 18          	cmp    DWORD PTR [ebp-0x10],0x18
10001578:	7f 41                	jg     100015bb <drawBootScreen()+0x10f>
1000157a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000157b: R_386_32	term
1000157f:	83 ec 04             	sub    esp,0x4
10001582:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001585:	6a 00                	push   0x0
10001587:	50                   	push   eax
10001588:	e8 fc ff ff ff       	call   10001589 <drawBootScreen()+0xdd>	10001589: R_386_PC32	VgaText::setCursor(int, int)
1000158d:	83 c4 10             	add    esp,0x10
10001590:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001597:	83 7d ec 0f          	cmp    DWORD PTR [ebp-0x14],0xf
1000159b:	7f 19                	jg     100015b6 <drawBootScreen()+0x10a>
1000159d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000159e: R_386_32	term
100015a2:	6a 00                	push   0x0
100015a4:	6a 00                	push   0x0
100015a6:	6a 20                	push   0x20
100015a8:	50                   	push   eax
100015a9:	e8 fc ff ff ff       	call   100015aa <drawBootScreen()+0xfe>	100015aa: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100015ae:	83 c4 10             	add    esp,0x10
100015b1:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100015b4:	eb e1                	jmp    10001597 <drawBootScreen()+0xeb>
100015b6:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100015b9:	eb b9                	jmp    10001574 <drawBootScreen()+0xc8>
100015bb:	a1 00 00 00 00       	mov    eax,ds:0x0	100015bc: R_386_32	term
100015c0:	83 ec 04             	sub    esp,0x4
100015c3:	6a 01                	push   0x1
100015c5:	6a 01                	push   0x1
100015c7:	50                   	push   eax
100015c8:	e8 fc ff ff ff       	call   100015c9 <drawBootScreen()+0x11d>	100015c9: R_386_PC32	VgaText::setCursor(int, int)
100015cd:	83 c4 10             	add    esp,0x10
100015d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100015d1: R_386_32	term
100015d5:	6a 00                	push   0x0
100015d7:	6a 0f                	push   0xf
100015d9:	68 20 a6 00 10       	push   0x1000a620	100015da: R_386_32	.text
100015de:	50                   	push   eax
100015df:	e8 fc ff ff ff       	call   100015e0 <drawBootScreen()+0x134>	100015e0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015e4:	83 c4 10             	add    esp,0x10
100015e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100015e8: R_386_32	term
100015ec:	6a 00                	push   0x0
100015ee:	6a 0e                	push   0xe
100015f0:	68 a3 a6 00 10       	push   0x1000a6a3	100015f1: R_386_32	.text
100015f5:	50                   	push   eax
100015f6:	e8 fc ff ff ff       	call   100015f7 <drawBootScreen()+0x14b>	100015f7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015fb:	83 c4 10             	add    esp,0x10
100015fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100015ff: R_386_32	term
10001603:	83 ec 08             	sub    esp,0x8
10001606:	6a 0f                	push   0xf
10001608:	50                   	push   eax
10001609:	e8 fc ff ff ff       	call   1000160a <drawBootScreen()+0x15e>	1000160a: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
1000160e:	83 c4 10             	add    esp,0x10
10001611:	a1 00 00 00 00       	mov    eax,ds:0x0	10001612: R_386_32	term
10001616:	83 ec 08             	sub    esp,0x8
10001619:	6a 00                	push   0x0
1000161b:	50                   	push   eax
1000161c:	e8 fc ff ff ff       	call   1000161d <drawBootScreen()+0x171>	1000161d: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
10001621:	83 c4 10             	add    esp,0x10
10001624:	90                   	nop
10001625:	c9                   	leave  
10001626:	c3                   	ret    

10001627 <drawBasicWindowX(int, int, int, int, char const*, bool)>:
10001627:	55                   	push   ebp
10001628:	89 e5                	mov    ebp,esp
1000162a:	53                   	push   ebx
1000162b:	83 ec 34             	sub    esp,0x34
1000162e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001631:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
10001634:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10001637:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000163e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001641:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
10001644:	7d 6c                	jge    100016b2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x8b>
10001646:	a1 00 00 00 00       	mov    eax,ds:0x0	10001647: R_386_32	term
1000164b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000164e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001651:	01 ca                	add    edx,ecx
10001653:	83 ec 04             	sub    esp,0x4
10001656:	52                   	push   edx
10001657:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000165a:	50                   	push   eax
1000165b:	e8 fc ff ff ff       	call   1000165c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x35>	1000165c: R_386_PC32	VgaText::setCursor(int, int)
10001660:	83 c4 10             	add    esp,0x10
10001663:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000166a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000166d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001670:	7d 3b                	jge    100016ad <drawBasicWindowX(int, int, int, int, char const*, bool)+0x86>
10001672:	a1 00 00 00 00       	mov    eax,ds:0x0	10001673: R_386_32	term
10001677:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000167b:	74 07                	je     10001684 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x5d>
1000167d:	b9 07 00 00 00       	mov    ecx,0x7
10001682:	eb 05                	jmp    10001689 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x62>
10001684:	b9 0f 00 00 00       	mov    ecx,0xf
10001689:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000168d:	74 07                	je     10001696 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x6f>
1000168f:	ba 07 00 00 00       	mov    edx,0x7
10001694:	eb 05                	jmp    1000169b <drawBasicWindowX(int, int, int, int, char const*, bool)+0x74>
10001696:	ba 0f 00 00 00       	mov    edx,0xf
1000169b:	51                   	push   ecx
1000169c:	52                   	push   edx
1000169d:	6a 20                	push   0x20
1000169f:	50                   	push   eax
100016a0:	e8 fc ff ff ff       	call   100016a1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x7a>	100016a1: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016a5:	83 c4 10             	add    esp,0x10
100016a8:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100016ab:	eb bd                	jmp    1000166a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x43>
100016ad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100016b0:	eb 8c                	jmp    1000163e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17>
100016b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100016b3: R_386_32	term
100016b7:	83 ec 04             	sub    esp,0x4
100016ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100016bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016c0:	50                   	push   eax
100016c1:	e8 fc ff ff ff       	call   100016c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x9b>	100016c2: R_386_PC32	VgaText::setCursor(int, int)
100016c6:	83 c4 10             	add    esp,0x10
100016c9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100016d0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100016d3:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100016d6:	7d 19                	jge    100016f1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xca>
100016d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100016d9: R_386_32	term
100016dd:	6a 01                	push   0x1
100016df:	6a 01                	push   0x1
100016e1:	6a 20                	push   0x20
100016e3:	50                   	push   eax
100016e4:	e8 fc ff ff ff       	call   100016e5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xbe>	100016e5: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016e9:	83 c4 10             	add    esp,0x10
100016ec:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100016ef:	eb df                	jmp    100016d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xa9>
100016f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100016f2: R_386_32	term
100016f6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100016f9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100016fc:	01 d1                	add    ecx,edx
100016fe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001701:	42                   	inc    edx
10001702:	83 ec 04             	sub    esp,0x4
10001705:	51                   	push   ecx
10001706:	52                   	push   edx
10001707:	50                   	push   eax
10001708:	e8 fc ff ff ff       	call   10001709 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe2>	10001709: R_386_PC32	VgaText::setCursor(int, int)
1000170d:	83 c4 10             	add    esp,0x10
10001710:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10001717:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000171a:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
1000171d:	7d 19                	jge    10001738 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x111>
1000171f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001720: R_386_32	term
10001724:	6a 03                	push   0x3
10001726:	6a 03                	push   0x3
10001728:	6a 20                	push   0x20
1000172a:	50                   	push   eax
1000172b:	e8 fc ff ff ff       	call   1000172c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x105>	1000172c: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001730:	83 c4 10             	add    esp,0x10
10001733:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10001736:	eb df                	jmp    10001717 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xf0>
10001738:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000173b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000173e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001741:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001744:	01 d0                	add    eax,edx
10001746:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001749:	0f 8d 89 00 00 00    	jge    100017d8 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b1>
1000174f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001750: R_386_32	term
10001754:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001757:	8d 4a 01             	lea    ecx,[edx+0x1]
1000175a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
1000175d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001760:	01 da                	add    edx,ebx
10001762:	83 ec 04             	sub    esp,0x4
10001765:	51                   	push   ecx
10001766:	52                   	push   edx
10001767:	50                   	push   eax
10001768:	e8 fc ff ff ff       	call   10001769 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x142>	10001769: R_386_PC32	VgaText::setCursor(int, int)
1000176d:	83 c4 10             	add    esp,0x10
10001770:	a1 00 00 00 00       	mov    eax,ds:0x0	10001771: R_386_32	term
10001775:	6a 03                	push   0x3
10001777:	6a 03                	push   0x3
10001779:	6a 20                	push   0x20
1000177b:	50                   	push   eax
1000177c:	e8 fc ff ff ff       	call   1000177d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x156>	1000177d: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001781:	83 c4 10             	add    esp,0x10
10001784:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001787:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000178a:	01 d0                	add    eax,edx
1000178c:	48                   	dec    eax
1000178d:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001790:	74 3e                	je     100017d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a9>
10001792:	a1 00 00 00 00       	mov    eax,ds:0x0	10001793: R_386_32	term
10001797:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000179a:	42                   	inc    edx
1000179b:	83 ec 04             	sub    esp,0x4
1000179e:	52                   	push   edx
1000179f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100017a2:	50                   	push   eax
100017a3:	e8 fc ff ff ff       	call   100017a4 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17d>	100017a4: R_386_PC32	VgaText::setCursor(int, int)
100017a8:	83 c4 10             	add    esp,0x10
100017ab:	a1 00 00 00 00       	mov    eax,ds:0x0	100017ac: R_386_32	term
100017b0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100017b4:	74 07                	je     100017bd <drawBasicWindowX(int, int, int, int, char const*, bool)+0x196>
100017b6:	ba 07 00 00 00       	mov    edx,0x7
100017bb:	eb 05                	jmp    100017c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x19b>
100017bd:	ba 0f 00 00 00       	mov    edx,0xf
100017c2:	52                   	push   edx
100017c3:	6a 00                	push   0x0
100017c5:	6a dd                	push   0xffffffdd
100017c7:	50                   	push   eax
100017c8:	e8 fc ff ff ff       	call   100017c9 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a2>	100017c9: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100017cd:	83 c4 10             	add    esp,0x10
100017d0:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100017d3:	e9 66 ff ff ff       	jmp    1000173e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x117>
100017d8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100017db:	83 ec 0c             	sub    esp,0xc
100017de:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100017e1:	e8 fc ff ff ff       	call   100017e2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1bb>	100017e2: R_386_PC32	strlen
100017e6:	83 c4 10             	add    esp,0x10
100017e9:	29 c3                	sub    ebx,eax
100017eb:	89 d8                	mov    eax,ebx
100017ed:	d1 e8                	shr    eax,1
100017ef:	48                   	dec    eax
100017f0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100017f3:	a1 00 00 00 00       	mov    eax,ds:0x0	100017f4: R_386_32	term
100017f8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100017fb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100017fe:	01 ca                	add    edx,ecx
10001800:	83 ec 04             	sub    esp,0x4
10001803:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001806:	52                   	push   edx
10001807:	50                   	push   eax
10001808:	e8 fc ff ff ff       	call   10001809 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1e2>	10001809: R_386_PC32	VgaText::setCursor(int, int)
1000180d:	83 c4 10             	add    esp,0x10
10001810:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10001817:	83 ec 0c             	sub    esp,0xc
1000181a:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000181d:	e8 fc ff ff ff       	call   1000181e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f7>	1000181e: R_386_PC32	strlen
10001822:	83 c4 10             	add    esp,0x10
10001825:	89 c2                	mov    edx,eax
10001827:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000182a:	39 c2                	cmp    edx,eax
1000182c:	76 25                	jbe    10001853 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x22c>
1000182e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000182f: R_386_32	term
10001833:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001836:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001839:	01 ca                	add    edx,ecx
1000183b:	8a 12                	mov    dl,BYTE PTR [edx]
1000183d:	0f be d2             	movsx  edx,dl
10001840:	6a 01                	push   0x1
10001842:	6a 0f                	push   0xf
10001844:	52                   	push   edx
10001845:	50                   	push   eax
10001846:	e8 fc ff ff ff       	call   10001847 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x220>	10001847: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000184b:	83 c4 10             	add    esp,0x10
1000184e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10001851:	eb c4                	jmp    10001817 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f0>
10001853:	90                   	nop
10001854:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001857:	c9                   	leave  
10001858:	c3                   	ret    

10001859 <drawBasicWindow(int, int, int, int, char const*)>:
10001859:	55                   	push   ebp
1000185a:	89 e5                	mov    ebp,esp
1000185c:	83 ec 08             	sub    esp,0x8
1000185f:	83 ec 08             	sub    esp,0x8
10001862:	6a 00                	push   0x0
10001864:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001867:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000186a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000186d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001870:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001873:	e8 fc ff ff ff       	call   10001874 <drawBasicWindow(int, int, int, int, char const*)+0x1b>	10001874: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10001878:	83 c4 20             	add    esp,0x20
1000187b:	90                   	nop
1000187c:	c9                   	leave  
1000187d:	c3                   	ret    

1000187e <bootInstallKeybrd(KeyboardToken, bool*)>:
1000187e:	55                   	push   ebp
1000187f:	89 e5                	mov    ebp,esp
10001881:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001884:	05 04 01 00 00       	add    eax,0x104
10001889:	8a 00                	mov    al,BYTE PTR [eax]
1000188b:	84 c0                	test   al,al
1000188d:	74 15                	je     100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
1000188f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001892:	66 83 f8 09          	cmp    ax,0x9
10001896:	75 0c                	jne    100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
10001898:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	1000189a: R_386_32	installKey
1000189f:	e9 94 00 00 00       	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018a4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
100018a7:	84 c0                	test   al,al
100018a9:	0f 85 88 00 00 00    	jne    10001937 <bootInstallKeybrd(KeyboardToken, bool*)+0xb9>
100018af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b2:	66 3d 0a 02          	cmp    ax,0x20a
100018b6:	75 09                	jne    100018c1 <bootInstallKeybrd(KeyboardToken, bool*)+0x43>
100018b8:	c6 05 00 00 00 00 1b 	mov    BYTE PTR ds:0x0,0x1b	100018ba: R_386_32	installKey
100018bf:	eb 77                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018c4:	66 3d 0d 02          	cmp    ax,0x20d
100018c8:	75 09                	jne    100018d3 <bootInstallKeybrd(KeyboardToken, bool*)+0x55>
100018ca:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	100018cc: R_386_32	installKey
100018d1:	eb 65                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018d6:	66 3d 0e 02          	cmp    ax,0x20e
100018da:	75 09                	jne    100018e5 <bootInstallKeybrd(KeyboardToken, bool*)+0x67>
100018dc:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	100018de: R_386_32	installKey
100018e3:	eb 53                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018e8:	66 3d 0b 02          	cmp    ax,0x20b
100018ec:	75 09                	jne    100018f7 <bootInstallKeybrd(KeyboardToken, bool*)+0x79>
100018ee:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100018f0: R_386_32	installKey
100018f5:	eb 41                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018fa:	66 3d 0c 02          	cmp    ax,0x20c
100018fe:	75 09                	jne    10001909 <bootInstallKeybrd(KeyboardToken, bool*)+0x8b>
10001900:	c6 05 00 00 00 00 02 	mov    BYTE PTR ds:0x0,0x2	10001902: R_386_32	installKey
10001907:	eb 2f                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000190c:	66 3d 05 02          	cmp    ax,0x205
10001910:	75 09                	jne    1000191b <bootInstallKeybrd(KeyboardToken, bool*)+0x9d>
10001912:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	10001914: R_386_32	installKey
10001919:	eb 1d                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000191b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000191e:	66 3d 05 02          	cmp    ax,0x205
10001922:	75 09                	jne    1000192d <bootInstallKeybrd(KeyboardToken, bool*)+0xaf>
10001924:	c6 05 00 00 00 00 7e 	mov    BYTE PTR ds:0x0,0x7e	10001926: R_386_32	installKey
1000192b:	eb 0b                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000192d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001930:	a2 00 00 00 00       	mov    ds:0x0,al	10001931: R_386_32	installKey
10001935:	eb 01                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001937:	90                   	nop
10001938:	5d                   	pop    ebp
10001939:	c3                   	ret    

1000193a <bootInstallTasks(int)>:
1000193a:	55                   	push   ebp
1000193b:	89 e5                	mov    ebp,esp
1000193d:	83 ec 08             	sub    esp,0x8
10001940:	a1 00 00 00 00       	mov    eax,ds:0x0	10001941: R_386_32	term
10001945:	83 ec 04             	sub    esp,0x4
10001948:	6a 08                	push   0x8
1000194a:	6a 18                	push   0x18
1000194c:	50                   	push   eax
1000194d:	e8 fc ff ff ff       	call   1000194e <bootInstallTasks(int)+0x14>	1000194e: R_386_PC32	VgaText::setCursor(int, int)
10001952:	83 c4 10             	add    esp,0x10
10001955:	a1 00 00 00 00       	mov    eax,ds:0x0	10001956: R_386_32	term
1000195a:	83 ec 08             	sub    esp,0x8
1000195d:	68 c4 a6 00 10       	push   0x1000a6c4	1000195e: R_386_32	.text
10001962:	50                   	push   eax
10001963:	e8 fc ff ff ff       	call   10001964 <bootInstallTasks(int)+0x2a>	10001964: R_386_PC32	VgaText::puts(char const*)
10001968:	83 c4 10             	add    esp,0x10
1000196b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000196c: R_386_32	term
10001970:	83 ec 04             	sub    esp,0x4
10001973:	6a 0a                	push   0xa
10001975:	6a 1a                	push   0x1a
10001977:	50                   	push   eax
10001978:	e8 fc ff ff ff       	call   10001979 <bootInstallTasks(int)+0x3f>	10001979: R_386_PC32	VgaText::setCursor(int, int)
1000197d:	83 c4 10             	add    esp,0x10
10001980:	a1 00 00 00 00       	mov    eax,ds:0x0	10001981: R_386_32	term
10001985:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001989:	75 07                	jne    10001992 <bootInstallTasks(int)+0x58>
1000198b:	ba ec a6 00 10       	mov    edx,0x1000a6ec	1000198c: R_386_32	.text
10001990:	eb 05                	jmp    10001997 <bootInstallTasks(int)+0x5d>
10001992:	ba ef a6 00 10       	mov    edx,0x1000a6ef	10001993: R_386_32	.text
10001997:	83 ec 08             	sub    esp,0x8
1000199a:	52                   	push   edx
1000199b:	50                   	push   eax
1000199c:	e8 fc ff ff ff       	call   1000199d <bootInstallTasks(int)+0x63>	1000199d: R_386_PC32	VgaText::puts(char const*)
100019a1:	83 c4 10             	add    esp,0x10
100019a4:	a1 00 00 00 00       	mov    eax,ds:0x0	100019a5: R_386_32	term
100019a9:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
100019ad:	78 07                	js     100019b6 <bootInstallTasks(int)+0x7c>
100019af:	ba 00 00 00 00       	mov    edx,0x0
100019b4:	eb 05                	jmp    100019bb <bootInstallTasks(int)+0x81>
100019b6:	ba 07 00 00 00       	mov    edx,0x7
100019bb:	6a 0f                	push   0xf
100019bd:	52                   	push   edx
100019be:	68 f2 a6 00 10       	push   0x1000a6f2	100019bf: R_386_32	.text
100019c3:	50                   	push   eax
100019c4:	e8 fc ff ff ff       	call   100019c5 <bootInstallTasks(int)+0x8b>	100019c5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100019c9:	83 c4 10             	add    esp,0x10
100019cc:	a1 00 00 00 00       	mov    eax,ds:0x0	100019cd: R_386_32	term
100019d1:	83 ec 04             	sub    esp,0x4
100019d4:	6a 0b                	push   0xb
100019d6:	6a 1a                	push   0x1a
100019d8:	50                   	push   eax
100019d9:	e8 fc ff ff ff       	call   100019da <bootInstallTasks(int)+0xa0>	100019da: R_386_PC32	VgaText::setCursor(int, int)
100019de:	83 c4 10             	add    esp,0x10
100019e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100019e2: R_386_32	term
100019e6:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
100019ea:	75 07                	jne    100019f3 <bootInstallTasks(int)+0xb9>
100019ec:	ba ec a6 00 10       	mov    edx,0x1000a6ec	100019ed: R_386_32	.text
100019f1:	eb 05                	jmp    100019f8 <bootInstallTasks(int)+0xbe>
100019f3:	ba ef a6 00 10       	mov    edx,0x1000a6ef	100019f4: R_386_32	.text
100019f8:	83 ec 08             	sub    esp,0x8
100019fb:	52                   	push   edx
100019fc:	50                   	push   eax
100019fd:	e8 fc ff ff ff       	call   100019fe <bootInstallTasks(int)+0xc4>	100019fe: R_386_PC32	VgaText::puts(char const*)
10001a02:	83 c4 10             	add    esp,0x10
10001a05:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a06: R_386_32	term
10001a0a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001a0e:	7e 07                	jle    10001a17 <bootInstallTasks(int)+0xdd>
10001a10:	ba 00 00 00 00       	mov    edx,0x0
10001a15:	eb 05                	jmp    10001a1c <bootInstallTasks(int)+0xe2>
10001a17:	ba 07 00 00 00       	mov    edx,0x7
10001a1c:	6a 0f                	push   0xf
10001a1e:	52                   	push   edx
10001a1f:	68 0a a7 00 10       	push   0x1000a70a	10001a20: R_386_32	.text
10001a24:	50                   	push   eax
10001a25:	e8 fc ff ff ff       	call   10001a26 <bootInstallTasks(int)+0xec>	10001a26: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a2a:	83 c4 10             	add    esp,0x10
10001a2d:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a2e: R_386_32	term
10001a32:	83 ec 04             	sub    esp,0x4
10001a35:	6a 0c                	push   0xc
10001a37:	6a 1a                	push   0x1a
10001a39:	50                   	push   eax
10001a3a:	e8 fc ff ff ff       	call   10001a3b <bootInstallTasks(int)+0x101>	10001a3b: R_386_PC32	VgaText::setCursor(int, int)
10001a3f:	83 c4 10             	add    esp,0x10
10001a42:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a43: R_386_32	term
10001a47:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001a4b:	75 07                	jne    10001a54 <bootInstallTasks(int)+0x11a>
10001a4d:	ba ec a6 00 10       	mov    edx,0x1000a6ec	10001a4e: R_386_32	.text
10001a52:	eb 05                	jmp    10001a59 <bootInstallTasks(int)+0x11f>
10001a54:	ba ef a6 00 10       	mov    edx,0x1000a6ef	10001a55: R_386_32	.text
10001a59:	83 ec 08             	sub    esp,0x8
10001a5c:	52                   	push   edx
10001a5d:	50                   	push   eax
10001a5e:	e8 fc ff ff ff       	call   10001a5f <bootInstallTasks(int)+0x125>	10001a5f: R_386_PC32	VgaText::puts(char const*)
10001a63:	83 c4 10             	add    esp,0x10
10001a66:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a67: R_386_32	term
10001a6b:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
10001a6f:	7e 07                	jle    10001a78 <bootInstallTasks(int)+0x13e>
10001a71:	ba 00 00 00 00       	mov    edx,0x0
10001a76:	eb 05                	jmp    10001a7d <bootInstallTasks(int)+0x143>
10001a78:	ba 07 00 00 00       	mov    edx,0x7
10001a7d:	6a 0f                	push   0xf
10001a7f:	52                   	push   edx
10001a80:	68 20 a7 00 10       	push   0x1000a720	10001a81: R_386_32	.text
10001a85:	50                   	push   eax
10001a86:	e8 fc ff ff ff       	call   10001a87 <bootInstallTasks(int)+0x14d>	10001a87: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a8b:	83 c4 10             	add    esp,0x10
10001a8e:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a8f: R_386_32	term
10001a93:	83 ec 04             	sub    esp,0x4
10001a96:	6a 0d                	push   0xd
10001a98:	6a 1a                	push   0x1a
10001a9a:	50                   	push   eax
10001a9b:	e8 fc ff ff ff       	call   10001a9c <bootInstallTasks(int)+0x162>	10001a9c: R_386_PC32	VgaText::setCursor(int, int)
10001aa0:	83 c4 10             	add    esp,0x10
10001aa3:	a1 00 00 00 00       	mov    eax,ds:0x0	10001aa4: R_386_32	term
10001aa8:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001aac:	75 07                	jne    10001ab5 <bootInstallTasks(int)+0x17b>
10001aae:	ba ec a6 00 10       	mov    edx,0x1000a6ec	10001aaf: R_386_32	.text
10001ab3:	eb 05                	jmp    10001aba <bootInstallTasks(int)+0x180>
10001ab5:	ba ef a6 00 10       	mov    edx,0x1000a6ef	10001ab6: R_386_32	.text
10001aba:	83 ec 08             	sub    esp,0x8
10001abd:	52                   	push   edx
10001abe:	50                   	push   eax
10001abf:	e8 fc ff ff ff       	call   10001ac0 <bootInstallTasks(int)+0x186>	10001ac0: R_386_PC32	VgaText::puts(char const*)
10001ac4:	83 c4 10             	add    esp,0x10
10001ac7:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ac8: R_386_32	term
10001acc:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001ad0:	7e 07                	jle    10001ad9 <bootInstallTasks(int)+0x19f>
10001ad2:	ba 00 00 00 00       	mov    edx,0x0
10001ad7:	eb 05                	jmp    10001ade <bootInstallTasks(int)+0x1a4>
10001ad9:	ba 07 00 00 00       	mov    edx,0x7
10001ade:	6a 0f                	push   0xf
10001ae0:	52                   	push   edx
10001ae1:	68 36 a7 00 10       	push   0x1000a736	10001ae2: R_386_32	.text
10001ae6:	50                   	push   eax
10001ae7:	e8 fc ff ff ff       	call   10001ae8 <bootInstallTasks(int)+0x1ae>	10001ae8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001aec:	83 c4 10             	add    esp,0x10
10001aef:	a1 00 00 00 00       	mov    eax,ds:0x0	10001af0: R_386_32	term
10001af4:	83 ec 04             	sub    esp,0x4
10001af7:	6a 0e                	push   0xe
10001af9:	6a 1a                	push   0x1a
10001afb:	50                   	push   eax
10001afc:	e8 fc ff ff ff       	call   10001afd <bootInstallTasks(int)+0x1c3>	10001afd: R_386_PC32	VgaText::setCursor(int, int)
10001b01:	83 c4 10             	add    esp,0x10
10001b04:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b05: R_386_32	term
10001b09:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b0d:	75 07                	jne    10001b16 <bootInstallTasks(int)+0x1dc>
10001b0f:	ba ec a6 00 10       	mov    edx,0x1000a6ec	10001b10: R_386_32	.text
10001b14:	eb 05                	jmp    10001b1b <bootInstallTasks(int)+0x1e1>
10001b16:	ba ef a6 00 10       	mov    edx,0x1000a6ef	10001b17: R_386_32	.text
10001b1b:	83 ec 08             	sub    esp,0x8
10001b1e:	52                   	push   edx
10001b1f:	50                   	push   eax
10001b20:	e8 fc ff ff ff       	call   10001b21 <bootInstallTasks(int)+0x1e7>	10001b21: R_386_PC32	VgaText::puts(char const*)
10001b25:	83 c4 10             	add    esp,0x10
10001b28:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b29: R_386_32	term
10001b2d:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001b31:	7e 07                	jle    10001b3a <bootInstallTasks(int)+0x200>
10001b33:	ba 00 00 00 00       	mov    edx,0x0
10001b38:	eb 05                	jmp    10001b3f <bootInstallTasks(int)+0x205>
10001b3a:	ba 07 00 00 00       	mov    edx,0x7
10001b3f:	6a 0f                	push   0xf
10001b41:	52                   	push   edx
10001b42:	68 4a a7 00 10       	push   0x1000a74a	10001b43: R_386_32	.text
10001b47:	50                   	push   eax
10001b48:	e8 fc ff ff ff       	call   10001b49 <bootInstallTasks(int)+0x20f>	10001b49: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001b4d:	83 c4 10             	add    esp,0x10
10001b50:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b51: R_386_32	term
10001b55:	83 ec 04             	sub    esp,0x4
10001b58:	6a 0f                	push   0xf
10001b5a:	6a 1a                	push   0x1a
10001b5c:	50                   	push   eax
10001b5d:	e8 fc ff ff ff       	call   10001b5e <bootInstallTasks(int)+0x224>	10001b5e: R_386_PC32	VgaText::setCursor(int, int)
10001b62:	83 c4 10             	add    esp,0x10
10001b65:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b66: R_386_32	term
10001b6a:	83 7d 08 05          	cmp    DWORD PTR [ebp+0x8],0x5
10001b6e:	75 07                	jne    10001b77 <bootInstallTasks(int)+0x23d>
10001b70:	ba ec a6 00 10       	mov    edx,0x1000a6ec	10001b71: R_386_32	.text
10001b75:	eb 05                	jmp    10001b7c <bootInstallTasks(int)+0x242>
10001b77:	ba ef a6 00 10       	mov    edx,0x1000a6ef	10001b78: R_386_32	.text
10001b7c:	83 ec 08             	sub    esp,0x8
10001b7f:	52                   	push   edx
10001b80:	50                   	push   eax
10001b81:	e8 fc ff ff ff       	call   10001b82 <bootInstallTasks(int)+0x248>	10001b82: R_386_PC32	VgaText::puts(char const*)
10001b86:	83 c4 10             	add    esp,0x10
10001b89:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b8a: R_386_32	term
10001b8e:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b92:	7e 07                	jle    10001b9b <bootInstallTasks(int)+0x261>
10001b94:	ba 00 00 00 00       	mov    edx,0x0
10001b99:	eb 05                	jmp    10001ba0 <bootInstallTasks(int)+0x266>
10001b9b:	ba 07 00 00 00       	mov    edx,0x7
10001ba0:	6a 0f                	push   0xf
10001ba2:	52                   	push   edx
10001ba3:	68 62 a7 00 10       	push   0x1000a762	10001ba4: R_386_32	.text
10001ba8:	50                   	push   eax
10001ba9:	e8 fc ff ff ff       	call   10001baa <bootInstallTasks(int)+0x270>	10001baa: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001bae:	83 c4 10             	add    esp,0x10
10001bb1:	90                   	nop
10001bb2:	c9                   	leave  
10001bb3:	c3                   	ret    

10001bb4 <ror(unsigned long long, int, int)>:
10001bb4:	55                   	push   ebp
10001bb5:	89 e5                	mov    ebp,esp
10001bb7:	56                   	push   esi
10001bb8:	53                   	push   ebx
10001bb9:	83 ec 20             	sub    esp,0x20
10001bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bbf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001bc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001bc5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001bc8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001bcb:	ba 01 00 00 00       	mov    edx,0x1
10001bd0:	88 c1                	mov    cl,al
10001bd2:	d3 e2                	shl    edx,cl
10001bd4:	89 d0                	mov    eax,edx
10001bd6:	48                   	dec    eax
10001bd7:	99                   	cdq    
10001bd8:	89 c1                	mov    ecx,eax
10001bda:	23 4d e0             	and    ecx,DWORD PTR [ebp-0x20]
10001bdd:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001be0:	89 d0                	mov    eax,edx
10001be2:	23 45 e4             	and    eax,DWORD PTR [ebp-0x1c]
10001be5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001be8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10001beb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001bee:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001bf1:	0f ad d0             	shrd   eax,edx,cl
10001bf4:	d3 ea                	shr    edx,cl
10001bf6:	f6 c1 20             	test   cl,0x20
10001bf9:	74 04                	je     10001bff <ror(unsigned long long, int, int)+0x4b>
10001bfb:	89 d0                	mov    eax,edx
10001bfd:	31 d2                	xor    edx,edx
10001bff:	89 c3                	mov    ebx,eax
10001c01:	89 d6                	mov    esi,edx
10001c03:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c06:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
10001c09:	89 c1                	mov    ecx,eax
10001c0b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c0e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c11:	0f a5 c2             	shld   edx,eax,cl
10001c14:	d3 e0                	shl    eax,cl
10001c16:	f6 c1 20             	test   cl,0x20
10001c19:	74 04                	je     10001c1f <ror(unsigned long long, int, int)+0x6b>
10001c1b:	89 c2                	mov    edx,eax
10001c1d:	31 c0                	xor    eax,eax
10001c1f:	89 d1                	mov    ecx,edx
10001c21:	89 c2                	mov    edx,eax
10001c23:	89 d8                	mov    eax,ebx
10001c25:	09 d0                	or     eax,edx
10001c27:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001c2a:	89 f0                	mov    eax,esi
10001c2c:	09 c8                	or     eax,ecx
10001c2e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001c31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001c34:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001c37:	83 c4 20             	add    esp,0x20
10001c3a:	5b                   	pop    ebx
10001c3b:	5e                   	pop    esi
10001c3c:	5d                   	pop    ebp
10001c3d:	c3                   	ret    

10001c3e <swapBits(unsigned long long, unsigned long long, unsigned long long)>:
10001c3e:	55                   	push   ebp
10001c3f:	89 e5                	mov    ebp,esp
10001c41:	56                   	push   esi
10001c42:	53                   	push   ebx
10001c43:	83 ec 40             	sub    esp,0x40
10001c46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c49:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001c4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001c4f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001c52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001c55:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001c58:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c5b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001c5e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001c61:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001c64:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001c67:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001c6a:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001c6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c70:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c73:	0f ad d0             	shrd   eax,edx,cl
10001c76:	d3 ea                	shr    edx,cl
10001c78:	f6 c1 20             	test   cl,0x20
10001c7b:	74 04                	je     10001c81 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x43>
10001c7d:	89 d0                	mov    eax,edx
10001c7f:	31 d2                	xor    edx,edx
10001c81:	89 c3                	mov    ebx,eax
10001c83:	89 d6                	mov    esi,edx
10001c85:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001c88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c8b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c8e:	0f ad d0             	shrd   eax,edx,cl
10001c91:	d3 ea                	shr    edx,cl
10001c93:	f6 c1 20             	test   cl,0x20
10001c96:	74 04                	je     10001c9c <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x5e>
10001c98:	89 d0                	mov    eax,edx
10001c9a:	31 d2                	xor    edx,edx
10001c9c:	89 d1                	mov    ecx,edx
10001c9e:	89 c2                	mov    edx,eax
10001ca0:	89 d8                	mov    eax,ebx
10001ca2:	31 d0                	xor    eax,edx
10001ca4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001ca7:	89 f0                	mov    eax,esi
10001ca9:	31 c8                	xor    eax,ecx
10001cab:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001cae:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001cb1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001cb4:	89 c6                	mov    esi,eax
10001cb6:	83 e6 01             	and    esi,0x1
10001cb9:	89 75 c8             	mov    DWORD PTR [ebp-0x38],esi
10001cbc:	89 d0                	mov    eax,edx
10001cbe:	83 e0 00             	and    eax,0x0
10001cc1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001cc4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001cc7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10001cca:	89 c3                	mov    ebx,eax
10001ccc:	80 f7 00             	xor    bh,0x0
10001ccf:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
10001cd2:	89 d0                	mov    eax,edx
10001cd4:	80 f4 00             	xor    ah,0x0
10001cd7:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001cda:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10001cdd:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10001ce0:	89 c8                	mov    eax,ecx
10001ce2:	09 d0                	or     eax,edx
10001ce4:	85 c0                	test   eax,eax
10001ce6:	74 62                	je     10001d4a <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x10c>
10001ce8:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001ceb:	b8 01 00 00 00       	mov    eax,0x1
10001cf0:	ba 00 00 00 00       	mov    edx,0x0
10001cf5:	0f a5 c2             	shld   edx,eax,cl
10001cf8:	d3 e0                	shl    eax,cl
10001cfa:	f6 c1 20             	test   cl,0x20
10001cfd:	74 04                	je     10001d03 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xc5>
10001cff:	89 c2                	mov    edx,eax
10001d01:	31 c0                	xor    eax,eax
10001d03:	89 c3                	mov    ebx,eax
10001d05:	89 d6                	mov    esi,edx
10001d07:	89 d8                	mov    eax,ebx
10001d09:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001d0c:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10001d0f:	89 f0                	mov    eax,esi
10001d11:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001d14:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001d17:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001d1a:	b8 01 00 00 00       	mov    eax,0x1
10001d1f:	ba 00 00 00 00       	mov    edx,0x0
10001d24:	0f a5 c2             	shld   edx,eax,cl
10001d27:	d3 e0                	shl    eax,cl
10001d29:	f6 c1 20             	test   cl,0x20
10001d2c:	74 04                	je     10001d32 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xf4>
10001d2e:	89 c2                	mov    edx,eax
10001d30:	31 c0                	xor    eax,eax
10001d32:	89 c1                	mov    ecx,eax
10001d34:	89 d3                	mov    ebx,edx
10001d36:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001d39:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10001d3c:	89 c6                	mov    esi,eax
10001d3e:	31 ce                	xor    esi,ecx
10001d40:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10001d43:	31 d3                	xor    ebx,edx
10001d45:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10001d48:	eb 0c                	jmp    10001d56 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x118>
10001d4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001d4d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001d50:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001d53:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10001d56:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001d59:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001d5c:	83 c4 40             	add    esp,0x40
10001d5f:	5b                   	pop    ebx
10001d60:	5e                   	pop    esi
10001d61:	5d                   	pop    ebp
10001d62:	c3                   	ret    

10001d63 <getChecksum(unsigned int)>:
10001d63:	55                   	push   ebp
10001d64:	89 e5                	mov    ebp,esp
10001d66:	56                   	push   esi
10001d67:	53                   	push   ebx
10001d68:	83 ec 20             	sub    esp,0x20
10001d6b:	66 c7 45 f6 49 4e    	mov    WORD PTR [ebp-0xa],0x4e49
10001d71:	66 c7 45 f4 79 6e    	mov    WORD PTR [ebp-0xc],0x6e79
10001d77:	66 c7 45 f2 67 61    	mov    WORD PTR [ebp-0xe],0x6167
10001d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d80:	c1 e8 10             	shr    eax,0x10
10001d83:	89 c1                	mov    ecx,eax
10001d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d88:	89 c2                	mov    edx,eax
10001d8a:	89 d0                	mov    eax,edx
10001d8c:	c1 e0 06             	shl    eax,0x6
10001d8f:	29 d0                	sub    eax,edx
10001d91:	c1 e0 04             	shl    eax,0x4
10001d94:	01 d0                	add    eax,edx
10001d96:	31 c8                	xor    eax,ecx
10001d98:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
10001d9c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001da0:	0f 84 b1 00 00 00    	je     10001e57 <getChecksum(unsigned int)+0xf4>
10001da6:	b8 f4 02 00 00       	mov    eax,0x2f4
10001dab:	ba 00 00 00 00       	mov    edx,0x0
10001db0:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001db3:	89 c3                	mov    ebx,eax
10001db5:	be 00 00 00 00       	mov    esi,0x0
10001dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dbd:	ba 00 00 00 00       	mov    edx,0x0
10001dc2:	6a 1d                	push   0x1d
10001dc4:	6a 05                	push   0x5
10001dc6:	52                   	push   edx
10001dc7:	50                   	push   eax
10001dc8:	e8 fc ff ff ff       	call   10001dc9 <getChecksum(unsigned int)+0x66>	10001dc9: R_386_PC32	ror(unsigned long long, int, int)
10001dcd:	83 c4 10             	add    esp,0x10
10001dd0:	05 52 3f 04 00       	add    eax,0x43f52
10001dd5:	83 d2 00             	adc    edx,0x0
10001dd8:	89 d9                	mov    ecx,ebx
10001dda:	31 c1                	xor    ecx,eax
10001ddc:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
10001ddf:	31 d6                	xor    esi,edx
10001de1:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
10001de4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001de7:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001deb:	66 0f af c2          	imul   ax,dx
10001def:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
10001df3:	b8 ea 00 00 00       	mov    eax,0xea
10001df8:	ba 00 00 00 00       	mov    edx,0x0
10001dfd:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001e00:	89 c3                	mov    ebx,eax
10001e02:	be 00 00 00 00       	mov    esi,0x0
10001e07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e0a:	ba 00 00 00 00       	mov    edx,0x0
10001e0f:	6a 1f                	push   0x1f
10001e11:	6a 03                	push   0x3
10001e13:	52                   	push   edx
10001e14:	50                   	push   eax
10001e15:	e8 fc ff ff ff       	call   10001e16 <getChecksum(unsigned int)+0xb3>	10001e16: R_386_PC32	ror(unsigned long long, int, int)
10001e1a:	83 c4 10             	add    esp,0x10
10001e1d:	05 05 db 09 00       	add    eax,0x9db05
10001e22:	83 d2 00             	adc    edx,0x0
10001e25:	89 d9                	mov    ecx,ebx
10001e27:	31 c1                	xor    ecx,eax
10001e29:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
10001e2c:	31 d6                	xor    esi,edx
10001e2e:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10001e31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001e34:	66 29 45 f4          	sub    WORD PTR [ebp-0xc],ax
10001e38:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e3c:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e3f:	25 d2 04 00 00       	and    eax,0x4d2
10001e44:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e4b:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e4f:	d1 6d 08             	shr    DWORD PTR [ebp+0x8],1
10001e52:	e9 45 ff ff ff       	jmp    10001d9c <getChecksum(unsigned int)+0x39>
10001e57:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e5b:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e5e:	66 33 45 f2          	xor    ax,WORD PTR [ebp-0xe]
10001e62:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001e65:	0f b7 c0             	movzx  eax,ax
10001e68:	25 ff 7f 00 00       	and    eax,0x7fff
10001e6d:	8d 65 f8             	lea    esp,[ebp-0x8]
10001e70:	5b                   	pop    ebx
10001e71:	5e                   	pop    esi
10001e72:	5d                   	pop    ebp
10001e73:	c3                   	ret    

10001e74 <createKey(char*, unsigned int)>:
10001e74:	55                   	push   ebp
10001e75:	89 e5                	mov    ebp,esp
10001e77:	53                   	push   ebx
10001e78:	83 ec 34             	sub    esp,0x34
10001e7b:	68 74 a7 00 10       	push   0x1000a774	10001e7c: R_386_32	.text
10001e80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e83:	e8 fc ff ff ff       	call   10001e84 <createKey(char*, unsigned int)+0x10>	10001e84: R_386_PC32	strcpy
10001e88:	83 c4 08             	add    esp,0x8
10001e8b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10001e8e:	bb 00 00 00 00       	mov    ebx,0x0
10001e93:	89 c8                	mov    eax,ecx
10001e95:	89 da                	mov    edx,ebx
10001e97:	0f a4 c2 0f          	shld   edx,eax,0xf
10001e9b:	c1 e0 0f             	shl    eax,0xf
10001e9e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ea1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ea4:	83 ec 04             	sub    esp,0x4
10001ea7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001eaa:	e8 fc ff ff ff       	call   10001eab <createKey(char*, unsigned int)+0x37>	10001eab: R_386_PC32	getChecksum(unsigned int)
10001eaf:	83 c4 08             	add    esp,0x8
10001eb2:	ba 00 00 00 00       	mov    edx,0x0
10001eb7:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
10001eba:	09 55 f4             	or     DWORD PTR [ebp-0xc],edx
10001ebd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001ec4:	81 7d ec db 24 00 00 	cmp    DWORD PTR [ebp-0x14],0x24db
10001ecb:	7f 7f                	jg     10001f4c <createKey(char*, unsigned int)+0xd8>
10001ecd:	81 75 f0 95 38 e4 b5 	xor    DWORD PTR [ebp-0x10],0xb5e43895
10001ed4:	83 75 f4 37          	xor    DWORD PTR [ebp-0xc],0x37
10001ed8:	6a 00                	push   0x0
10001eda:	6a 08                	push   0x8
10001edc:	6a 00                	push   0x0
10001ede:	6a 03                	push   0x3
10001ee0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ee3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001ee6:	e8 fc ff ff ff       	call   10001ee7 <createKey(char*, unsigned int)+0x73>	10001ee7: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001eeb:	83 c4 18             	add    esp,0x18
10001eee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ef1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ef4:	6a 00                	push   0x0
10001ef6:	6a 0c                	push   0xc
10001ef8:	6a 00                	push   0x0
10001efa:	6a 0d                	push   0xd
10001efc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001eff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f02:	e8 fc ff ff ff       	call   10001f03 <createKey(char*, unsigned int)+0x8f>	10001f03: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f07:	83 c4 18             	add    esp,0x18
10001f0a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f0d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f10:	6a 00                	push   0x0
10001f12:	6a 16                	push   0x16
10001f14:	6a 00                	push   0x0
10001f16:	6a 25                	push   0x25
10001f18:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f1b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f1e:	e8 fc ff ff ff       	call   10001f1f <createKey(char*, unsigned int)+0xab>	10001f1f: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f23:	83 c4 18             	add    esp,0x18
10001f26:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f29:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f2c:	6a 2a                	push   0x2a
10001f2e:	6a 13                	push   0x13
10001f30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f33:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f36:	e8 fc ff ff ff       	call   10001f37 <createKey(char*, unsigned int)+0xc3>	10001f37: R_386_PC32	ror(unsigned long long, int, int)
10001f3b:	83 c4 10             	add    esp,0x10
10001f3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f41:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f44:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
10001f47:	e9 78 ff ff ff       	jmp    10001ec4 <createKey(char*, unsigned int)+0x50>
10001f4c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f4f:	83 e0 0f             	and    eax,0xf
10001f52:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001f55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f58:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f5b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f5f:	c1 ea 04             	shr    edx,0x4
10001f62:	89 c1                	mov    ecx,eax
10001f64:	89 d3                	mov    ebx,edx
10001f66:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f69:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f6c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f6f:	83 e0 0f             	and    eax,0xf
10001f72:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001f75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f78:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f7b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f7f:	c1 ea 04             	shr    edx,0x4
10001f82:	89 c1                	mov    ecx,eax
10001f84:	89 d3                	mov    ebx,edx
10001f86:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f89:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f8f:	83 e0 0f             	and    eax,0xf
10001f92:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001f95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f98:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f9b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f9f:	c1 ea 04             	shr    edx,0x4
10001fa2:	89 c1                	mov    ecx,eax
10001fa4:	89 d3                	mov    ebx,edx
10001fa6:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fa9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001faf:	25 ff 03 00 00       	and    eax,0x3ff
10001fb4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001fb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fbd:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fc1:	c1 ea 0a             	shr    edx,0xa
10001fc4:	89 c1                	mov    ecx,eax
10001fc6:	89 d3                	mov    ebx,edx
10001fc8:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fcb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fd1:	25 ff 03 00 00       	and    eax,0x3ff
10001fd6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001fd9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fdc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fdf:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fe3:	c1 ea 0a             	shr    edx,0xa
10001fe6:	89 c1                	mov    ecx,eax
10001fe8:	89 d3                	mov    ebx,edx
10001fea:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fed:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001ff0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ff3:	25 ff 03 00 00       	and    eax,0x3ff
10001ff8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001ffb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ffe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002001:	0f ac d0 0a          	shrd   eax,edx,0xa
10002005:	c1 ea 0a             	shr    edx,0xa
10002008:	89 c1                	mov    ecx,eax
1000200a:	89 d3                	mov    ebx,edx
1000200c:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
1000200f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002012:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002015:	05 00 00 00 00       	add    eax,0x0	10002016: R_386_32	lookupA
1000201a:	8a 10                	mov    dl,BYTE PTR [eax]
1000201c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000201f:	88 10                	mov    BYTE PTR [eax],dl
10002021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002024:	8d 50 01             	lea    edx,[eax+0x1]
10002027:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000202a:	05 00 00 00 00       	add    eax,0x0	1000202b: R_386_32	lookupA
1000202f:	8a 00                	mov    al,BYTE PTR [eax]
10002031:	88 02                	mov    BYTE PTR [edx],al
10002033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002036:	8d 50 0f             	lea    edx,[eax+0xf]
10002039:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000203c:	05 00 00 00 00       	add    eax,0x0	1000203d: R_386_32	lookupA
10002041:	8a 00                	mov    al,BYTE PTR [eax]
10002043:	88 02                	mov    BYTE PTR [edx],al
10002045:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002048:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
1000204d:	f7 e9                	imul   ecx
1000204f:	c1 fa 05             	sar    edx,0x5
10002052:	89 c8                	mov    eax,ecx
10002054:	c1 f8 1f             	sar    eax,0x1f
10002057:	29 c2                	sub    edx,eax
10002059:	89 d0                	mov    eax,edx
1000205b:	b9 0a 00 00 00       	mov    ecx,0xa
10002060:	99                   	cdq    
10002061:	f7 f9                	idiv   ecx
10002063:	89 d0                	mov    eax,edx
10002065:	8d 50 30             	lea    edx,[eax+0x30]
10002068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000206b:	83 c0 03             	add    eax,0x3
1000206e:	88 10                	mov    BYTE PTR [eax],dl
10002070:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002073:	b8 67 66 66 66       	mov    eax,0x66666667
10002078:	f7 e9                	imul   ecx
1000207a:	c1 fa 02             	sar    edx,0x2
1000207d:	89 c8                	mov    eax,ecx
1000207f:	c1 f8 1f             	sar    eax,0x1f
10002082:	89 d1                	mov    ecx,edx
10002084:	29 c1                	sub    ecx,eax
10002086:	b8 67 66 66 66       	mov    eax,0x66666667
1000208b:	f7 e9                	imul   ecx
1000208d:	c1 fa 02             	sar    edx,0x2
10002090:	89 c8                	mov    eax,ecx
10002092:	c1 f8 1f             	sar    eax,0x1f
10002095:	29 c2                	sub    edx,eax
10002097:	89 d0                	mov    eax,edx
10002099:	c1 e0 02             	shl    eax,0x2
1000209c:	01 d0                	add    eax,edx
1000209e:	01 c0                	add    eax,eax
100020a0:	29 c1                	sub    ecx,eax
100020a2:	89 ca                	mov    edx,ecx
100020a4:	88 d0                	mov    al,dl
100020a6:	8d 50 30             	lea    edx,[eax+0x30]
100020a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ac:	83 c0 04             	add    eax,0x4
100020af:	88 10                	mov    BYTE PTR [eax],dl
100020b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100020b4:	b9 0a 00 00 00       	mov    ecx,0xa
100020b9:	99                   	cdq    
100020ba:	f7 f9                	idiv   ecx
100020bc:	89 d0                	mov    eax,edx
100020be:	8d 50 30             	lea    edx,[eax+0x30]
100020c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020c4:	83 c0 05             	add    eax,0x5
100020c7:	88 10                	mov    BYTE PTR [eax],dl
100020c9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020cc:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100020d1:	f7 e9                	imul   ecx
100020d3:	c1 fa 05             	sar    edx,0x5
100020d6:	89 c8                	mov    eax,ecx
100020d8:	c1 f8 1f             	sar    eax,0x1f
100020db:	29 c2                	sub    edx,eax
100020dd:	89 d0                	mov    eax,edx
100020df:	b9 0a 00 00 00       	mov    ecx,0xa
100020e4:	99                   	cdq    
100020e5:	f7 f9                	idiv   ecx
100020e7:	89 d0                	mov    eax,edx
100020e9:	8d 50 30             	lea    edx,[eax+0x30]
100020ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ef:	83 c0 07             	add    eax,0x7
100020f2:	88 10                	mov    BYTE PTR [eax],dl
100020f4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020f7:	b8 67 66 66 66       	mov    eax,0x66666667
100020fc:	f7 e9                	imul   ecx
100020fe:	c1 fa 02             	sar    edx,0x2
10002101:	89 c8                	mov    eax,ecx
10002103:	c1 f8 1f             	sar    eax,0x1f
10002106:	89 d1                	mov    ecx,edx
10002108:	29 c1                	sub    ecx,eax
1000210a:	b8 67 66 66 66       	mov    eax,0x66666667
1000210f:	f7 e9                	imul   ecx
10002111:	c1 fa 02             	sar    edx,0x2
10002114:	89 c8                	mov    eax,ecx
10002116:	c1 f8 1f             	sar    eax,0x1f
10002119:	29 c2                	sub    edx,eax
1000211b:	89 d0                	mov    eax,edx
1000211d:	c1 e0 02             	shl    eax,0x2
10002120:	01 d0                	add    eax,edx
10002122:	01 c0                	add    eax,eax
10002124:	29 c1                	sub    ecx,eax
10002126:	89 ca                	mov    edx,ecx
10002128:	88 d0                	mov    al,dl
1000212a:	8d 50 30             	lea    edx,[eax+0x30]
1000212d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002130:	83 c0 08             	add    eax,0x8
10002133:	88 10                	mov    BYTE PTR [eax],dl
10002135:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002138:	b9 0a 00 00 00       	mov    ecx,0xa
1000213d:	99                   	cdq    
1000213e:	f7 f9                	idiv   ecx
10002140:	89 d0                	mov    eax,edx
10002142:	8d 50 30             	lea    edx,[eax+0x30]
10002145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002148:	83 c0 09             	add    eax,0x9
1000214b:	88 10                	mov    BYTE PTR [eax],dl
1000214d:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10002150:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002155:	f7 e9                	imul   ecx
10002157:	c1 fa 05             	sar    edx,0x5
1000215a:	89 c8                	mov    eax,ecx
1000215c:	c1 f8 1f             	sar    eax,0x1f
1000215f:	29 c2                	sub    edx,eax
10002161:	89 d0                	mov    eax,edx
10002163:	b9 0a 00 00 00       	mov    ecx,0xa
10002168:	99                   	cdq    
10002169:	f7 f9                	idiv   ecx
1000216b:	89 d0                	mov    eax,edx
1000216d:	8d 50 30             	lea    edx,[eax+0x30]
10002170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002173:	83 c0 0b             	add    eax,0xb
10002176:	88 10                	mov    BYTE PTR [eax],dl
10002178:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
1000217b:	b8 67 66 66 66       	mov    eax,0x66666667
10002180:	f7 e9                	imul   ecx
10002182:	c1 fa 02             	sar    edx,0x2
10002185:	89 c8                	mov    eax,ecx
10002187:	c1 f8 1f             	sar    eax,0x1f
1000218a:	89 d1                	mov    ecx,edx
1000218c:	29 c1                	sub    ecx,eax
1000218e:	b8 67 66 66 66       	mov    eax,0x66666667
10002193:	f7 e9                	imul   ecx
10002195:	c1 fa 02             	sar    edx,0x2
10002198:	89 c8                	mov    eax,ecx
1000219a:	c1 f8 1f             	sar    eax,0x1f
1000219d:	29 c2                	sub    edx,eax
1000219f:	89 d0                	mov    eax,edx
100021a1:	c1 e0 02             	shl    eax,0x2
100021a4:	01 d0                	add    eax,edx
100021a6:	01 c0                	add    eax,eax
100021a8:	29 c1                	sub    ecx,eax
100021aa:	89 ca                	mov    edx,ecx
100021ac:	88 d0                	mov    al,dl
100021ae:	8d 50 30             	lea    edx,[eax+0x30]
100021b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021b4:	83 c0 0c             	add    eax,0xc
100021b7:	88 10                	mov    BYTE PTR [eax],dl
100021b9:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100021bc:	b9 0a 00 00 00       	mov    ecx,0xa
100021c1:	99                   	cdq    
100021c2:	f7 f9                	idiv   ecx
100021c4:	89 d0                	mov    eax,edx
100021c6:	8d 50 30             	lea    edx,[eax+0x30]
100021c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021cc:	83 c0 0d             	add    eax,0xd
100021cf:	88 10                	mov    BYTE PTR [eax],dl
100021d1:	90                   	nop
100021d2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100021d5:	c9                   	leave  
100021d6:	c3                   	ret    

100021d7 <retrieveBits(char*)>:
100021d7:	55                   	push   ebp
100021d8:	89 e5                	mov    ebp,esp
100021da:	57                   	push   edi
100021db:	56                   	push   esi
100021dc:	53                   	push   ebx
100021dd:	83 ec 4c             	sub    esp,0x4c
100021e0:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
100021e7:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
100021ee:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [ebp-0x1c],0xffffffff
100021f5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100021fc:	83 7d e0 0f          	cmp    DWORD PTR [ebp-0x20],0xf
10002200:	7f 54                	jg     10002256 <retrieveBits(char*)+0x7f>
10002202:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002205:	05 00 00 00 00       	add    eax,0x0	10002206: R_386_32	lookupA
1000220a:	8a 10                	mov    dl,BYTE PTR [eax]
1000220c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000220f:	8a 00                	mov    al,BYTE PTR [eax]
10002211:	38 c2                	cmp    dl,al
10002213:	75 06                	jne    1000221b <retrieveBits(char*)+0x44>
10002215:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002218:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000221b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000221e:	05 00 00 00 00       	add    eax,0x0	1000221f: R_386_32	lookupB
10002223:	8a 10                	mov    dl,BYTE PTR [eax]
10002225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002228:	40                   	inc    eax
10002229:	8a 00                	mov    al,BYTE PTR [eax]
1000222b:	38 c2                	cmp    dl,al
1000222d:	75 06                	jne    10002235 <retrieveBits(char*)+0x5e>
1000222f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002232:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10002235:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002238:	05 00 00 00 00       	add    eax,0x0	10002239: R_386_32	lookupC
1000223d:	8a 10                	mov    dl,BYTE PTR [eax]
1000223f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002242:	83 c0 0f             	add    eax,0xf
10002245:	8a 00                	mov    al,BYTE PTR [eax]
10002247:	38 c2                	cmp    dl,al
10002249:	75 06                	jne    10002251 <retrieveBits(char*)+0x7a>
1000224b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000224e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002251:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10002254:	eb a6                	jmp    100021fc <retrieveBits(char*)+0x25>
10002256:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
1000225a:	74 0c                	je     10002268 <retrieveBits(char*)+0x91>
1000225c:	83 7d e8 ff          	cmp    DWORD PTR [ebp-0x18],0xffffffff
10002260:	74 06                	je     10002268 <retrieveBits(char*)+0x91>
10002262:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10002266:	75 0f                	jne    10002277 <retrieveBits(char*)+0xa0>
10002268:	b8 00 00 00 00       	mov    eax,0x0
1000226d:	ba 00 00 00 00       	mov    edx,0x0
10002272:	e9 02 02 00 00       	jmp    10002479 <retrieveBits(char*)+0x2a2>
10002277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000227a:	83 c0 03             	add    eax,0x3
1000227d:	8a 00                	mov    al,BYTE PTR [eax]
1000227f:	0f be c0             	movsx  eax,al
10002282:	8d 50 d0             	lea    edx,[eax-0x30]
10002285:	89 d0                	mov    eax,edx
10002287:	c1 e0 02             	shl    eax,0x2
1000228a:	01 d0                	add    eax,edx
1000228c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002293:	01 d0                	add    eax,edx
10002295:	c1 e0 02             	shl    eax,0x2
10002298:	89 c6                	mov    esi,eax
1000229a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000229d:	83 c0 04             	add    eax,0x4
100022a0:	8a 00                	mov    al,BYTE PTR [eax]
100022a2:	0f be c0             	movsx  eax,al
100022a5:	8d 50 d0             	lea    edx,[eax-0x30]
100022a8:	89 d0                	mov    eax,edx
100022aa:	c1 e0 02             	shl    eax,0x2
100022ad:	01 d0                	add    eax,edx
100022af:	01 c0                	add    eax,eax
100022b1:	8d 14 06             	lea    edx,[esi+eax*1]
100022b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022b7:	83 c0 05             	add    eax,0x5
100022ba:	8a 00                	mov    al,BYTE PTR [eax]
100022bc:	0f be c0             	movsx  eax,al
100022bf:	83 e8 30             	sub    eax,0x30
100022c2:	01 d0                	add    eax,edx
100022c4:	99                   	cdq    
100022c5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100022c8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100022cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022ce:	83 c0 07             	add    eax,0x7
100022d1:	8a 00                	mov    al,BYTE PTR [eax]
100022d3:	0f be c0             	movsx  eax,al
100022d6:	8d 50 d0             	lea    edx,[eax-0x30]
100022d9:	89 d0                	mov    eax,edx
100022db:	c1 e0 02             	shl    eax,0x2
100022de:	01 d0                	add    eax,edx
100022e0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100022e7:	01 d0                	add    eax,edx
100022e9:	c1 e0 02             	shl    eax,0x2
100022ec:	89 c6                	mov    esi,eax
100022ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022f1:	83 c0 08             	add    eax,0x8
100022f4:	8a 00                	mov    al,BYTE PTR [eax]
100022f6:	0f be c0             	movsx  eax,al
100022f9:	8d 50 d0             	lea    edx,[eax-0x30]
100022fc:	89 d0                	mov    eax,edx
100022fe:	c1 e0 02             	shl    eax,0x2
10002301:	01 d0                	add    eax,edx
10002303:	01 c0                	add    eax,eax
10002305:	8d 14 06             	lea    edx,[esi+eax*1]
10002308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000230b:	83 c0 09             	add    eax,0x9
1000230e:	8a 00                	mov    al,BYTE PTR [eax]
10002310:	0f be c0             	movsx  eax,al
10002313:	83 e8 30             	sub    eax,0x30
10002316:	01 d0                	add    eax,edx
10002318:	99                   	cdq    
10002319:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
1000231c:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
1000231f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002322:	83 c0 0b             	add    eax,0xb
10002325:	8a 00                	mov    al,BYTE PTR [eax]
10002327:	0f be c0             	movsx  eax,al
1000232a:	8d 50 d0             	lea    edx,[eax-0x30]
1000232d:	89 d0                	mov    eax,edx
1000232f:	c1 e0 02             	shl    eax,0x2
10002332:	01 d0                	add    eax,edx
10002334:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000233b:	01 d0                	add    eax,edx
1000233d:	c1 e0 02             	shl    eax,0x2
10002340:	89 c6                	mov    esi,eax
10002342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002345:	83 c0 0c             	add    eax,0xc
10002348:	8a 00                	mov    al,BYTE PTR [eax]
1000234a:	0f be c0             	movsx  eax,al
1000234d:	8d 50 d0             	lea    edx,[eax-0x30]
10002350:	89 d0                	mov    eax,edx
10002352:	c1 e0 02             	shl    eax,0x2
10002355:	01 d0                	add    eax,edx
10002357:	01 c0                	add    eax,eax
10002359:	8d 14 06             	lea    edx,[esi+eax*1]
1000235c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000235f:	83 c0 0d             	add    eax,0xd
10002362:	8a 00                	mov    al,BYTE PTR [eax]
10002364:	0f be c0             	movsx  eax,al
10002367:	83 e8 30             	sub    eax,0x30
1000236a:	01 d0                	add    eax,edx
1000236c:	99                   	cdq    
1000236d:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002370:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10002373:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002376:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10002379:	0f a4 c2 0a          	shld   edx,eax,0xa
1000237d:	c1 e0 0a             	shl    eax,0xa
10002380:	89 c6                	mov    esi,eax
10002382:	89 d7                	mov    edi,edx
10002384:	89 f0                	mov    eax,esi
10002386:	0b 45 c8             	or     eax,DWORD PTR [ebp-0x38]
10002389:	89 c1                	mov    ecx,eax
1000238b:	89 f8                	mov    eax,edi
1000238d:	0b 45 cc             	or     eax,DWORD PTR [ebp-0x34]
10002390:	89 c3                	mov    ebx,eax
10002392:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002395:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10002398:	0f a4 c2 14          	shld   edx,eax,0x14
1000239c:	c1 e0 14             	shl    eax,0x14
1000239f:	89 ce                	mov    esi,ecx
100023a1:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
100023a4:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100023a7:	0b 75 a8             	or     esi,DWORD PTR [ebp-0x58]
100023aa:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
100023ad:	89 d8                	mov    eax,ebx
100023af:	0b 45 ac             	or     eax,DWORD PTR [ebp-0x54]
100023b2:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100023b5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100023b8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100023bb:	0f a4 c2 0c          	shld   edx,eax,0xc
100023bf:	c1 e0 0c             	shl    eax,0xc
100023c2:	89 c3                	mov    ebx,eax
100023c4:	89 d6                	mov    esi,edx
100023c6:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
100023c9:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100023cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100023cf:	c1 e0 04             	shl    eax,0x4
100023d2:	0b 45 ec             	or     eax,DWORD PTR [ebp-0x14]
100023d5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100023d8:	c1 e2 08             	shl    edx,0x8
100023db:	09 d0                	or     eax,edx
100023dd:	99                   	cdq    
100023de:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
100023e1:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
100023e4:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
100023eb:	81 7d d4 db 24 00 00 	cmp    DWORD PTR [ebp-0x2c],0x24db
100023f2:	7f 7f                	jg     10002473 <retrieveBits(char*)+0x29c>
100023f4:	6a 2a                	push   0x2a
100023f6:	6a 13                	push   0x13
100023f8:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023fb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023fe:	e8 fc ff ff ff       	call   100023ff <retrieveBits(char*)+0x228>	100023ff: R_386_PC32	ror(unsigned long long, int, int)
10002403:	83 c4 10             	add    esp,0x10
10002406:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002409:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
1000240c:	6a 00                	push   0x0
1000240e:	6a 08                	push   0x8
10002410:	6a 00                	push   0x0
10002412:	6a 03                	push   0x3
10002414:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002417:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000241a:	e8 fc ff ff ff       	call   1000241b <retrieveBits(char*)+0x244>	1000241b: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000241f:	83 c4 18             	add    esp,0x18
10002422:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002425:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002428:	6a 00                	push   0x0
1000242a:	6a 0c                	push   0xc
1000242c:	6a 00                	push   0x0
1000242e:	6a 0d                	push   0xd
10002430:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002433:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002436:	e8 fc ff ff ff       	call   10002437 <retrieveBits(char*)+0x260>	10002437: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000243b:	83 c4 18             	add    esp,0x18
1000243e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002441:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002444:	6a 00                	push   0x0
10002446:	6a 16                	push   0x16
10002448:	6a 00                	push   0x0
1000244a:	6a 25                	push   0x25
1000244c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000244f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002452:	e8 fc ff ff ff       	call   10002453 <retrieveBits(char*)+0x27c>	10002453: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002457:	83 c4 18             	add    esp,0x18
1000245a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000245d:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002460:	81 75 d8 95 38 e4 b5 	xor    DWORD PTR [ebp-0x28],0xb5e43895
10002467:	83 75 dc 37          	xor    DWORD PTR [ebp-0x24],0x37
1000246b:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
1000246e:	e9 78 ff ff ff       	jmp    100023eb <retrieveBits(char*)+0x214>
10002473:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002476:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002479:	8d 65 f4             	lea    esp,[ebp-0xc]
1000247c:	5b                   	pop    ebx
1000247d:	5e                   	pop    esi
1000247e:	5f                   	pop    edi
1000247f:	5d                   	pop    ebp
10002480:	c3                   	ret    

10002481 <checkKey(char*)>:
10002481:	55                   	push   ebp
10002482:	89 e5                	mov    ebp,esp
10002484:	53                   	push   ebx
10002485:	83 ec 14             	sub    esp,0x14
10002488:	83 ec 04             	sub    esp,0x4
1000248b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000248e:	e8 fc ff ff ff       	call   1000248f <checkKey(char*)+0xe>	1000248f: R_386_PC32	retrieveBits(char*)
10002493:	83 c4 08             	add    esp,0x8
10002496:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002499:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000249c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000249f:	25 ff 7f 00 00       	and    eax,0x7fff
100024a4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100024a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024aa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100024ad:	0f ac d0 0f          	shrd   eax,edx,0xf
100024b1:	c1 ea 0f             	shr    edx,0xf
100024b4:	89 c1                	mov    ecx,eax
100024b6:	89 d3                	mov    ebx,edx
100024b8:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
100024bb:	83 ec 04             	sub    esp,0x4
100024be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100024c1:	e8 fc ff ff ff       	call   100024c2 <checkKey(char*)+0x41>	100024c2: R_386_PC32	getChecksum(unsigned int)
100024c6:	83 c4 08             	add    esp,0x8
100024c9:	39 45 ec             	cmp    DWORD PTR [ebp-0x14],eax
100024cc:	0f 95 c0             	setne  al
100024cf:	84 c0                	test   al,al
100024d1:	74 07                	je     100024da <checkKey(char*)+0x59>
100024d3:	b8 00 00 00 00       	mov    eax,0x0
100024d8:	eb 06                	jmp    100024e0 <checkKey(char*)+0x5f>
100024da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024dd:	83 e0 07             	and    eax,0x7
100024e0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100024e3:	c9                   	leave  
100024e4:	c3                   	ret    

100024e5 <changeKeyType(char*, int)>:
100024e5:	55                   	push   ebp
100024e6:	89 e5                	mov    ebp,esp
100024e8:	83 ec 10             	sub    esp,0x10
100024eb:	83 ec 04             	sub    esp,0x4
100024ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024f1:	e8 fc ff ff ff       	call   100024f2 <changeKeyType(char*, int)+0xd>	100024f2: R_386_PC32	retrieveBits(char*)
100024f6:	83 c4 08             	add    esp,0x8
100024f9:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
100024fc:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100024ff:	83 65 f8 f8          	and    DWORD PTR [ebp-0x8],0xfffffff8
10002503:	83 65 fc ff          	and    DWORD PTR [ebp-0x4],0xffffffff
10002507:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000250a:	99                   	cdq    
1000250b:	09 45 f8             	or     DWORD PTR [ebp-0x8],eax
1000250e:	09 55 fc             	or     DWORD PTR [ebp-0x4],edx
10002511:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10002514:	50                   	push   eax
10002515:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002518:	e8 fc ff ff ff       	call   10002519 <changeKeyType(char*, int)+0x34>	10002519: R_386_PC32	createKey(char*, unsigned int)
1000251d:	83 c4 08             	add    esp,0x8
10002520:	83 ec 04             	sub    esp,0x4
10002523:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002526:	e8 fc ff ff ff       	call   10002527 <changeKeyType(char*, int)+0x42>	10002527: R_386_PC32	checkKey(char*)
1000252b:	83 c4 08             	add    esp,0x8
1000252e:	85 c0                	test   eax,eax
10002530:	0f 95 c0             	setne  al
10002533:	c9                   	leave  
10002534:	c3                   	ret    

10002535 <checkExtendedKey(char*)>:
10002535:	55                   	push   ebp
10002536:	89 e5                	mov    ebp,esp
10002538:	83 ec 20             	sub    esp,0x20
1000253b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000253e:	8a 00                	mov    al,BYTE PTR [eax]
10002540:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10002543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002546:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
10002549:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
1000254c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000254f:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10002552:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10002555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002558:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
1000255b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000255e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002561:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10002564:	88 45 f0             	mov    BYTE PTR [ebp-0x10],al
10002567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000256a:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
1000256d:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10002570:	c6 45 f2 2d          	mov    BYTE PTR [ebp-0xe],0x2d
10002574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002577:	8a 40 06             	mov    al,BYTE PTR [eax+0x6]
1000257a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000257d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002580:	8a 40 07             	mov    al,BYTE PTR [eax+0x7]
10002583:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10002586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002589:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
1000258c:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
1000258f:	c6 45 f6 2d          	mov    BYTE PTR [ebp-0xa],0x2d
10002593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002596:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10002599:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000259c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000259f:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
100025a2:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
100025a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025a8:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
100025ab:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
100025ae:	c6 45 fa 2d          	mov    BYTE PTR [ebp-0x6],0x2d
100025b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025b5:	8a 40 0f             	mov    al,BYTE PTR [eax+0xf]
100025b8:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
100025bb:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025be:	48                   	dec    eax
100025bf:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100025c2:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025c5:	3c 2f                	cmp    al,0x2f
100025c7:	75 04                	jne    100025cd <checkExtendedKey(char*)+0x98>
100025c9:	c6 45 ef 39          	mov    BYTE PTR [ebp-0x11],0x39
100025cd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d0:	48                   	dec    eax
100025d1:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
100025d4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d7:	3c 2f                	cmp    al,0x2f
100025d9:	75 04                	jne    100025df <checkExtendedKey(char*)+0xaa>
100025db:	c6 45 f5 39          	mov    BYTE PTR [ebp-0xb],0x39
100025df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025e2:	83 c0 0d             	add    eax,0xd
100025e5:	8a 10                	mov    dl,BYTE PTR [eax]
100025e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025ea:	83 c0 0c             	add    eax,0xc
100025ed:	8a 00                	mov    al,BYTE PTR [eax]
100025ef:	38 c2                	cmp    dl,al
100025f1:	74 0a                	je     100025fd <checkExtendedKey(char*)+0xc8>
100025f3:	b8 00 00 00 00       	mov    eax,0x0
100025f8:	e9 d6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100025fd:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002600:	3c 2f                	cmp    al,0x2f
10002602:	7e 07                	jle    1000260b <checkExtendedKey(char*)+0xd6>
10002604:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002607:	3c 39                	cmp    al,0x39
10002609:	7e 0a                	jle    10002615 <checkExtendedKey(char*)+0xe0>
1000260b:	b8 00 00 00 00       	mov    eax,0x0
10002610:	e9 be 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002615:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002618:	3c 2f                	cmp    al,0x2f
1000261a:	7e 07                	jle    10002623 <checkExtendedKey(char*)+0xee>
1000261c:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
1000261f:	3c 39                	cmp    al,0x39
10002621:	7e 0a                	jle    1000262d <checkExtendedKey(char*)+0xf8>
10002623:	b8 00 00 00 00       	mov    eax,0x0
10002628:	e9 a6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000262d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002630:	3c 2f                	cmp    al,0x2f
10002632:	7e 07                	jle    1000263b <checkExtendedKey(char*)+0x106>
10002634:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002637:	3c 39                	cmp    al,0x39
10002639:	7e 0a                	jle    10002645 <checkExtendedKey(char*)+0x110>
1000263b:	b8 00 00 00 00       	mov    eax,0x0
10002640:	e9 8e 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002645:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10002648:	3c 2f                	cmp    al,0x2f
1000264a:	7e 07                	jle    10002653 <checkExtendedKey(char*)+0x11e>
1000264c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000264f:	3c 39                	cmp    al,0x39
10002651:	7e 07                	jle    1000265a <checkExtendedKey(char*)+0x125>
10002653:	b8 00 00 00 00       	mov    eax,0x0
10002658:	eb 79                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000265a:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
1000265d:	3c 2f                	cmp    al,0x2f
1000265f:	7e 07                	jle    10002668 <checkExtendedKey(char*)+0x133>
10002661:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
10002664:	3c 39                	cmp    al,0x39
10002666:	7e 07                	jle    1000266f <checkExtendedKey(char*)+0x13a>
10002668:	b8 00 00 00 00       	mov    eax,0x0
1000266d:	eb 64                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000266f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002672:	3c 2f                	cmp    al,0x2f
10002674:	7e 07                	jle    1000267d <checkExtendedKey(char*)+0x148>
10002676:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002679:	3c 39                	cmp    al,0x39
1000267b:	7e 07                	jle    10002684 <checkExtendedKey(char*)+0x14f>
1000267d:	b8 00 00 00 00       	mov    eax,0x0
10002682:	eb 4f                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002684:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10002687:	3c 2f                	cmp    al,0x2f
10002689:	7e 07                	jle    10002692 <checkExtendedKey(char*)+0x15d>
1000268b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000268e:	3c 39                	cmp    al,0x39
10002690:	7e 07                	jle    10002699 <checkExtendedKey(char*)+0x164>
10002692:	b8 00 00 00 00       	mov    eax,0x0
10002697:	eb 3a                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002699:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
1000269c:	3c 2f                	cmp    al,0x2f
1000269e:	7e 07                	jle    100026a7 <checkExtendedKey(char*)+0x172>
100026a0:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
100026a3:	3c 39                	cmp    al,0x39
100026a5:	7e 07                	jle    100026ae <checkExtendedKey(char*)+0x179>
100026a7:	b8 00 00 00 00       	mov    eax,0x0
100026ac:	eb 25                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026ae:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b1:	3c 2f                	cmp    al,0x2f
100026b3:	7e 07                	jle    100026bc <checkExtendedKey(char*)+0x187>
100026b5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b8:	3c 39                	cmp    al,0x39
100026ba:	7e 07                	jle    100026c3 <checkExtendedKey(char*)+0x18e>
100026bc:	b8 00 00 00 00       	mov    eax,0x0
100026c1:	eb 10                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026c3:	83 ec 04             	sub    esp,0x4
100026c6:	8d 45 ec             	lea    eax,[ebp-0x14]
100026c9:	50                   	push   eax
100026ca:	e8 fc ff ff ff       	call   100026cb <checkExtendedKey(char*)+0x196>	100026cb: R_386_PC32	checkKey(char*)
100026cf:	83 c4 08             	add    esp,0x8
100026d2:	90                   	nop
100026d3:	c9                   	leave  
100026d4:	c3                   	ret    

100026d5 <loadTimezoneStrings()>:
100026d5:	55                   	push   ebp
100026d6:	89 e5                	mov    ebp,esp
100026d8:	53                   	push   ebx
100026d9:	83 ec 34             	sub    esp,0x34
100026dc:	83 ec 0c             	sub    esp,0xc
100026df:	68 14 01 00 00       	push   0x114
100026e4:	e8 fc ff ff ff       	call   100026e5 <loadTimezoneStrings()+0x10>	100026e5: R_386_PC32	operator new(unsigned long)
100026e9:	83 c4 10             	add    esp,0x10
100026ec:	89 c3                	mov    ebx,eax
100026ee:	a1 00 00 00 00       	mov    eax,ds:0x0	100026ef: R_386_32	kernelProcess
100026f3:	83 ec 04             	sub    esp,0x4
100026f6:	50                   	push   eax
100026f7:	68 88 a7 00 10       	push   0x1000a788	100026f8: R_386_32	.text
100026fc:	53                   	push   ebx
100026fd:	e8 fc ff ff ff       	call   100026fe <loadTimezoneStrings()+0x29>	100026fe: R_386_PC32	File::File(char const*, Process*)
10002702:	83 c4 10             	add    esp,0x10
10002705:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10002708:	83 ec 08             	sub    esp,0x8
1000270b:	6a 01                	push   0x1
1000270d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002710:	e8 fc ff ff ff       	call   10002711 <loadTimezoneStrings()+0x3c>	10002711: R_386_PC32	File::open(FileOpenMode)
10002715:	83 c4 10             	add    esp,0x10
10002718:	83 ec 04             	sub    esp,0x4
1000271b:	8d 45 d7             	lea    eax,[ebp-0x29]
1000271e:	50                   	push   eax
1000271f:	8d 45 d8             	lea    eax,[ebp-0x28]
10002722:	50                   	push   eax
10002723:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002726:	e8 fc ff ff ff       	call   10002727 <loadTimezoneStrings()+0x52>	10002727: R_386_PC32	File::stat(unsigned long long*, bool*)
1000272b:	83 c4 10             	add    esp,0x10
1000272e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002731:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002734:	83 ec 0c             	sub    esp,0xc
10002737:	50                   	push   eax
10002738:	e8 fc ff ff ff       	call   10002739 <loadTimezoneStrings()+0x64>	10002739: R_386_PC32	malloc
1000273d:	83 c4 10             	add    esp,0x10
10002740:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002743:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002746:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002749:	83 ec 04             	sub    esp,0x4
1000274c:	50                   	push   eax
1000274d:	6a 00                	push   0x0
1000274f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002752:	e8 fc ff ff ff       	call   10002753 <loadTimezoneStrings()+0x7e>	10002753: R_386_PC32	memset
10002757:	83 c4 10             	add    esp,0x10
1000275a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000275d:	8b 00                	mov    eax,DWORD PTR [eax]
1000275f:	83 c0 0c             	add    eax,0xc
10002762:	8b 08                	mov    ecx,DWORD PTR [eax]
10002764:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002767:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
1000276a:	83 ec 0c             	sub    esp,0xc
1000276d:	8d 5d d0             	lea    ebx,[ebp-0x30]
10002770:	53                   	push   ebx
10002771:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002774:	52                   	push   edx
10002775:	50                   	push   eax
10002776:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002779:	ff d1                	call   ecx
1000277b:	83 c4 20             	add    esp,0x20
1000277e:	83 ec 0c             	sub    esp,0xc
10002781:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002784:	e8 fc ff ff ff       	call   10002785 <loadTimezoneStrings()+0xb0>	10002785: R_386_PC32	File::close()
10002789:	83 c4 10             	add    esp,0x10
1000278c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10002793:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000279a:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
100027a1:	7f 39                	jg     100027dc <loadTimezoneStrings()+0x107>
100027a3:	83 ec 0c             	sub    esp,0xc
100027a6:	6a 78                	push   0x78
100027a8:	e8 fc ff ff ff       	call   100027a9 <loadTimezoneStrings()+0xd4>	100027a9: R_386_PC32	malloc
100027ad:	83 c4 10             	add    esp,0x10
100027b0:	89 c2                	mov    edx,eax
100027b2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027b5:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	100027b8: R_386_32	timezoneStrings
100027bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027bf:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100027c2: R_386_32	timezoneStrings
100027c6:	83 ec 08             	sub    esp,0x8
100027c9:	68 a7 a7 00 10       	push   0x1000a7a7	100027ca: R_386_32	.text
100027ce:	50                   	push   eax
100027cf:	e8 fc ff ff ff       	call   100027d0 <loadTimezoneStrings()+0xfb>	100027d0: R_386_PC32	strcpy
100027d4:	83 c4 10             	add    esp,0x10
100027d7:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100027da:	eb be                	jmp    1000279a <loadTimezoneStrings()+0xc5>
100027dc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100027e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100027e6:	8d 50 01             	lea    edx,[eax+0x1]
100027e9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
100027ec:	89 c2                	mov    edx,eax
100027ee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100027f1:	01 d0                	add    eax,edx
100027f3:	8a 00                	mov    al,BYTE PTR [eax]
100027f5:	88 45 ce             	mov    BYTE PTR [ebp-0x32],al
100027f8:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
100027fc:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
100027ff:	3c 0d                	cmp    al,0xd
10002801:	0f 84 2a 01 00 00    	je     10002931 <loadTimezoneStrings()+0x25c>
10002807:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
1000280a:	3c 09                	cmp    al,0x9
1000280c:	75 3c                	jne    1000284a <loadTimezoneStrings()+0x175>
1000280e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002811:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002814: R_386_32	timezoneStrings
10002818:	83 ec 0c             	sub    esp,0xc
1000281b:	50                   	push   eax
1000281c:	e8 fc ff ff ff       	call   1000281d <loadTimezoneStrings()+0x148>	1000281d: R_386_PC32	strlen
10002821:	83 c4 10             	add    esp,0x10
10002824:	83 f8 08             	cmp    eax,0x8
10002827:	0f 87 0a 01 00 00    	ja     10002937 <loadTimezoneStrings()+0x262>
1000282d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002830:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002833: R_386_32	timezoneStrings
10002837:	83 ec 08             	sub    esp,0x8
1000283a:	68 a7 a7 00 10       	push   0x1000a7a7	1000283b: R_386_32	.text
1000283f:	50                   	push   eax
10002840:	e8 fc ff ff ff       	call   10002841 <loadTimezoneStrings()+0x16c>	10002841: R_386_PC32	strcat
10002845:	83 c4 10             	add    esp,0x10
10002848:	eb c4                	jmp    1000280e <loadTimezoneStrings()+0x139>
1000284a:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
1000284d:	3c 0a                	cmp    al,0xa
1000284f:	75 67                	jne    100028b8 <loadTimezoneStrings()+0x1e3>
10002851:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002854:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002857: R_386_32	timezoneStrings
1000285b:	83 ec 0c             	sub    esp,0xc
1000285e:	50                   	push   eax
1000285f:	e8 fc ff ff ff       	call   10002860 <loadTimezoneStrings()+0x18b>	10002860: R_386_PC32	strlen
10002864:	83 c4 10             	add    esp,0x10
10002867:	83 f8 35             	cmp    eax,0x35
1000286a:	77 1d                	ja     10002889 <loadTimezoneStrings()+0x1b4>
1000286c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000286f:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002872: R_386_32	timezoneStrings
10002876:	83 ec 08             	sub    esp,0x8
10002879:	68 a7 a7 00 10       	push   0x1000a7a7	1000287a: R_386_32	.text
1000287e:	50                   	push   eax
1000287f:	e8 fc ff ff ff       	call   10002880 <loadTimezoneStrings()+0x1ab>	10002880: R_386_PC32	strcat
10002884:	83 c4 10             	add    esp,0x10
10002887:	eb c8                	jmp    10002851 <loadTimezoneStrings()+0x17c>
10002889:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000288c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000288f:	99                   	cdq    
10002890:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10002893:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
10002896:	39 c8                	cmp    eax,ecx
10002898:	89 d0                	mov    eax,edx
1000289a:	19 d8                	sbb    eax,ebx
1000289c:	0f 82 9b 00 00 00    	jb     1000293d <loadTimezoneStrings()+0x268>
100028a2:	83 ec 0c             	sub    esp,0xc
100028a5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
100028a8:	e8 fc ff ff ff       	call   100028a9 <loadTimezoneStrings()+0x1d4>	100028a9: R_386_PC32	free
100028ad:	83 c4 10             	add    esp,0x10
100028b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028b3:	e9 8b 00 00 00       	jmp    10002943 <loadTimezoneStrings()+0x26e>
100028b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028bb:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028be: R_386_32	timezoneStrings
100028c2:	83 ec 0c             	sub    esp,0xc
100028c5:	50                   	push   eax
100028c6:	e8 fc ff ff ff       	call   100028c7 <loadTimezoneStrings()+0x1f2>	100028c7: R_386_PC32	strlen
100028cb:	83 c4 10             	add    esp,0x10
100028ce:	83 f8 31             	cmp    eax,0x31
100028d1:	77 1f                	ja     100028f2 <loadTimezoneStrings()+0x21d>
100028d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028d6:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028d9: R_386_32	timezoneStrings
100028dd:	83 ec 08             	sub    esp,0x8
100028e0:	8d 55 ce             	lea    edx,[ebp-0x32]
100028e3:	52                   	push   edx
100028e4:	50                   	push   eax
100028e5:	e8 fc ff ff ff       	call   100028e6 <loadTimezoneStrings()+0x211>	100028e6: R_386_PC32	strcat
100028ea:	83 c4 10             	add    esp,0x10
100028ed:	e9 f1 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
100028f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028f5:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028f8: R_386_32	timezoneStrings
100028fc:	83 ec 0c             	sub    esp,0xc
100028ff:	50                   	push   eax
10002900:	e8 fc ff ff ff       	call   10002901 <loadTimezoneStrings()+0x22c>	10002901: R_386_PC32	strlen
10002905:	83 c4 10             	add    esp,0x10
10002908:	83 f8 32             	cmp    eax,0x32
1000290b:	0f 85 d2 fe ff ff    	jne    100027e3 <loadTimezoneStrings()+0x10e>
10002911:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002914:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002917: R_386_32	timezoneStrings
1000291b:	83 ec 08             	sub    esp,0x8
1000291e:	68 a9 a7 00 10       	push   0x1000a7a9	1000291f: R_386_32	.text
10002923:	50                   	push   eax
10002924:	e8 fc ff ff ff       	call   10002925 <loadTimezoneStrings()+0x250>	10002925: R_386_PC32	strcat
10002929:	83 c4 10             	add    esp,0x10
1000292c:	e9 b2 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002931:	90                   	nop
10002932:	e9 ac fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002937:	90                   	nop
10002938:	e9 a6 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
1000293d:	90                   	nop
1000293e:	e9 a0 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002943:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002946:	c9                   	leave  
10002947:	c3                   	ret    

10002948 <_bcrypt_rand>:
10002948:	55                   	push   ebp
10002949:	89 e5                	mov    ebp,esp
1000294b:	83 ec 08             	sub    esp,0x8
1000294e:	e8 fc ff ff ff       	call   1000294f <_bcrypt_rand+0x7>	1000294f: R_386_PC32	KeRand()
10002953:	c9                   	leave  
10002954:	c3                   	ret    

10002955 <firstRun(bool)>:
10002955:	55                   	push   ebp
10002956:	89 e5                	mov    ebp,esp
10002958:	57                   	push   edi
10002959:	56                   	push   esi
1000295a:	53                   	push   ebx
1000295b:	81 ec 5c 01 00 00    	sub    esp,0x15c
10002961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002964:	88 85 a4 fe ff ff    	mov    BYTE PTR [ebp-0x15c],al
1000296a:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
10002970:	83 f0 01             	xor    eax,0x1
10002973:	a2 00 00 00 00       	mov    ds:0x0,al	10002974: R_386_32	showSidebar
10002978:	a0 00 00 00 00       	mov    al,ds:0x0	10002979: R_386_32	createNewUserMode
1000297d:	84 c0                	test   al,al
1000297f:	74 4f                	je     100029d0 <firstRun(bool)+0x7b>
10002981:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002983: R_386_32	showSidebar
10002988:	68 1f a6 00 10       	push   0x1000a61f	10002989: R_386_32	.text
1000298d:	68 00 00 00 00       	push   0x0	1000298e: R_386_32	currName
10002992:	e8 fc ff ff ff       	call   10002993 <firstRun(bool)+0x3e>	10002993: R_386_PC32	strcpy
10002997:	83 c4 08             	add    esp,0x8
1000299a:	68 1f a6 00 10       	push   0x1000a61f	1000299b: R_386_32	.text
1000299f:	68 00 00 00 00       	push   0x0	100029a0: R_386_32	currComp
100029a4:	e8 fc ff ff ff       	call   100029a5 <firstRun(bool)+0x50>	100029a5: R_386_PC32	strcpy
100029a9:	83 c4 08             	add    esp,0x8
100029ac:	68 1f a6 00 10       	push   0x1000a61f	100029ad: R_386_32	.text
100029b1:	68 00 00 00 00       	push   0x0	100029b2: R_386_32	passwbufA
100029b6:	e8 fc ff ff ff       	call   100029b7 <firstRun(bool)+0x62>	100029b7: R_386_PC32	strcpy
100029bb:	83 c4 08             	add    esp,0x8
100029be:	68 1f a6 00 10       	push   0x1000a61f	100029bf: R_386_32	.text
100029c3:	68 00 00 00 00       	push   0x0	100029c4: R_386_32	passwbufB
100029c8:	e8 fc ff ff ff       	call   100029c9 <firstRun(bool)+0x74>	100029c9: R_386_PC32	strcpy
100029cd:	83 c4 08             	add    esp,0x8
100029d0:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100029d2: R_386_32	guiKeyboardHandler
	100029d6: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
100029da:	83 ec 0c             	sub    esp,0xc
100029dd:	68 b0 a7 00 10       	push   0x1000a7b0	100029de: R_386_32	.text
100029e2:	e8 fc ff ff ff       	call   100029e3 <firstRun(bool)+0x8e>	100029e3: R_386_PC32	KeSetBootMessage(char const*)
100029e7:	83 c4 10             	add    esp,0x10
100029ea:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100029ec: R_386_32	VgaText::hiddenOut
100029f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100029f2: R_386_32	activeTerminal
100029f6:	83 ec 08             	sub    esp,0x8
100029f9:	68 d9 a7 00 10       	push   0x1000a7d9	100029fa: R_386_32	.text
100029fe:	50                   	push   eax
100029ff:	e8 fc ff ff ff       	call   10002a00 <firstRun(bool)+0xab>	10002a00: R_386_PC32	VgaText::puts(char const*)
10002a04:	83 c4 10             	add    esp,0x10
10002a07:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a08: R_386_32	kernelProcess
10002a0c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
10002a12:	83 ec 08             	sub    esp,0x8
10002a15:	68 d9 a7 00 10       	push   0x1000a7d9	10002a16: R_386_32	.text
10002a1a:	50                   	push   eax
10002a1b:	e8 fc ff ff ff       	call   10002a1c <firstRun(bool)+0xc7>	10002a1c: R_386_PC32	VgaText::puts(char const*)
10002a20:	83 c4 10             	add    esp,0x10
10002a23:	83 ec 0c             	sub    esp,0xc
10002a26:	68 84 01 00 00       	push   0x184
10002a2b:	e8 fc ff ff ff       	call   10002a2c <firstRun(bool)+0xd7>	10002a2c: R_386_PC32	operator new(unsigned long)
10002a30:	83 c4 10             	add    esp,0x10
10002a33:	89 c3                	mov    ebx,eax
10002a35:	83 ec 08             	sub    esp,0x8
10002a38:	68 e0 a7 00 10       	push   0x1000a7e0	10002a39: R_386_32	.text
10002a3d:	53                   	push   ebx
10002a3e:	e8 fc ff ff ff       	call   10002a3f <firstRun(bool)+0xea>	10002a3f: R_386_PC32	VgaText::VgaText(char const*)
10002a43:	83 c4 10             	add    esp,0x10
10002a46:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10002a48: R_386_32	term
10002a4c:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a4d: R_386_32	term
10002a51:	83 ec 0c             	sub    esp,0xc
10002a54:	50                   	push   eax
10002a55:	e8 fc ff ff ff       	call   10002a56 <firstRun(bool)+0x101>	10002a56: R_386_PC32	setActiveTerminal(VgaText*)
10002a5a:	83 c4 10             	add    esp,0x10
10002a5d:	e8 fc ff ff ff       	call   10002a5e <firstRun(bool)+0x109>	10002a5e: R_386_PC32	drawBootScreen()
10002a62:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10002a69:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10002a70:	74 17                	je     10002a89 <firstRun(bool)+0x134>
10002a72:	83 ec 08             	sub    esp,0x8
10002a75:	68 e5 a7 00 10       	push   0x1000a7e5	10002a76: R_386_32	.text
10002a7a:	68 00 00 00 00       	push   0x0	10002a7b: R_386_32	pkeybuf
10002a7f:	e8 fc ff ff ff       	call   10002a80 <firstRun(bool)+0x12b>	10002a80: R_386_PC32	strcpy
10002a84:	83 c4 10             	add    esp,0x10
10002a87:	eb 15                	jmp    10002a9e <firstRun(bool)+0x149>
10002a89:	83 ec 08             	sub    esp,0x8
10002a8c:	68 f6 a7 00 10       	push   0x1000a7f6	10002a8d: R_386_32	.text
10002a91:	68 00 00 00 00       	push   0x0	10002a92: R_386_32	pkeybuf
10002a96:	e8 fc ff ff ff       	call   10002a97 <firstRun(bool)+0x142>	10002a97: R_386_PC32	strcpy
10002a9b:	83 c4 10             	add    esp,0x10
10002a9e:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
10002aa4:	83 f0 01             	xor    eax,0x1
10002aa7:	84 c0                	test   al,al
10002aa9:	0f 84 56 1d 00 00    	je     10004805 <firstRun(bool)+0x1eb0>
10002aaf:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10002ab6:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002ab8: R_386_32	tzsel
10002ac0:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002ac2: R_386_32	modesel
10002aca:	eb 01                	jmp    10002acd <firstRun(bool)+0x178>
10002acc:	90                   	nop
10002acd:	e8 fc ff ff ff       	call   10002ace <firstRun(bool)+0x179>	10002ace: R_386_PC32	drawBootScreen()
10002ad2:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10002ad9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002adb: R_386_32	installKey
10002ae0:	a0 00 00 00 00       	mov    al,ds:0x0	10002ae1: R_386_32	createNewUserMode
10002ae5:	84 c0                	test   al,al
10002ae7:	74 07                	je     10002af0 <firstRun(bool)+0x19b>
10002ae9:	b8 07 a8 00 10       	mov    eax,0x1000a807	10002aea: R_386_32	.text
10002aee:	eb 05                	jmp    10002af5 <firstRun(bool)+0x1a0>
10002af0:	b8 17 a8 00 10       	mov    eax,0x1000a817	10002af1: R_386_32	.text
10002af5:	83 ec 0c             	sub    esp,0xc
10002af8:	50                   	push   eax
10002af9:	6a 12                	push   0x12
10002afb:	6a 32                	push   0x32
10002afd:	6a 03                	push   0x3
10002aff:	6a 16                	push   0x16
10002b01:	e8 fc ff ff ff       	call   10002b02 <firstRun(bool)+0x1ad>	10002b02: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10002b06:	83 c4 20             	add    esp,0x20
10002b09:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b0a: R_386_32	term
10002b0e:	83 ec 04             	sub    esp,0x4
10002b11:	6a 06                	push   0x6
10002b13:	6a 18                	push   0x18
10002b15:	50                   	push   eax
10002b16:	e8 fc ff ff ff       	call   10002b17 <firstRun(bool)+0x1c2>	10002b17: R_386_PC32	VgaText::setCursor(int, int)
10002b1b:	83 c4 10             	add    esp,0x10
10002b1e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b1f: R_386_32	term
10002b23:	83 ec 08             	sub    esp,0x8
10002b26:	68 24 a8 00 10       	push   0x1000a824	10002b27: R_386_32	.text
10002b2b:	50                   	push   eax
10002b2c:	e8 fc ff ff ff       	call   10002b2d <firstRun(bool)+0x1d8>	10002b2d: R_386_PC32	VgaText::puts(char const*)
10002b31:	83 c4 10             	add    esp,0x10
10002b34:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b35: R_386_32	term
10002b39:	83 ec 04             	sub    esp,0x4
10002b3c:	6a 07                	push   0x7
10002b3e:	6a 18                	push   0x18
10002b40:	50                   	push   eax
10002b41:	e8 fc ff ff ff       	call   10002b42 <firstRun(bool)+0x1ed>	10002b42: R_386_PC32	VgaText::setCursor(int, int)
10002b46:	83 c4 10             	add    esp,0x10
10002b49:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b4a: R_386_32	term
10002b4e:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10002b50: R_386_32	createNewUserMode
10002b54:	84 d2                	test   dl,dl
10002b56:	74 07                	je     10002b5f <firstRun(bool)+0x20a>
10002b58:	ba 54 a8 00 10       	mov    edx,0x1000a854	10002b59: R_386_32	.text
10002b5d:	eb 05                	jmp    10002b64 <firstRun(bool)+0x20f>
10002b5f:	ba 76 a8 00 10       	mov    edx,0x1000a876	10002b60: R_386_32	.text
10002b64:	83 ec 08             	sub    esp,0x8
10002b67:	52                   	push   edx
10002b68:	50                   	push   eax
10002b69:	e8 fc ff ff ff       	call   10002b6a <firstRun(bool)+0x215>	10002b6a: R_386_PC32	VgaText::puts(char const*)
10002b6e:	83 c4 10             	add    esp,0x10
10002b71:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b72: R_386_32	term
10002b76:	83 ec 04             	sub    esp,0x4
10002b79:	6a 09                	push   0x9
10002b7b:	6a 18                	push   0x18
10002b7d:	50                   	push   eax
10002b7e:	e8 fc ff ff ff       	call   10002b7f <firstRun(bool)+0x22a>	10002b7f: R_386_PC32	VgaText::setCursor(int, int)
10002b83:	83 c4 10             	add    esp,0x10
10002b86:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b87: R_386_32	term
10002b8b:	83 ec 08             	sub    esp,0x8
10002b8e:	68 86 a8 00 10       	push   0x1000a886	10002b8f: R_386_32	.text
10002b93:	50                   	push   eax
10002b94:	e8 fc ff ff ff       	call   10002b95 <firstRun(bool)+0x240>	10002b95: R_386_PC32	VgaText::puts(char const*)
10002b99:	83 c4 10             	add    esp,0x10
10002b9c:	a0 00 00 00 00       	mov    al,ds:0x0	10002b9d: R_386_32	createNewUserMode
10002ba1:	83 f0 01             	xor    eax,0x1
10002ba4:	84 c0                	test   al,al
10002ba6:	74 2b                	je     10002bd3 <firstRun(bool)+0x27e>
10002ba8:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ba9: R_386_32	term
10002bad:	83 ec 04             	sub    esp,0x4
10002bb0:	6a 0b                	push   0xb
10002bb2:	6a 18                	push   0x18
10002bb4:	50                   	push   eax
10002bb5:	e8 fc ff ff ff       	call   10002bb6 <firstRun(bool)+0x261>	10002bb6: R_386_PC32	VgaText::setCursor(int, int)
10002bba:	83 c4 10             	add    esp,0x10
10002bbd:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bbe: R_386_32	term
10002bc2:	83 ec 08             	sub    esp,0x8
10002bc5:	68 8b a8 00 10       	push   0x1000a88b	10002bc6: R_386_32	.text
10002bca:	50                   	push   eax
10002bcb:	e8 fc ff ff ff       	call   10002bcc <firstRun(bool)+0x277>	10002bcc: R_386_PC32	VgaText::puts(char const*)
10002bd0:	83 c4 10             	add    esp,0x10
10002bd3:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bd4: R_386_32	term
10002bd8:	83 ec 04             	sub    esp,0x4
10002bdb:	6a 0d                	push   0xd
10002bdd:	6a 18                	push   0x18
10002bdf:	50                   	push   eax
10002be0:	e8 fc ff ff ff       	call   10002be1 <firstRun(bool)+0x28c>	10002be1: R_386_PC32	VgaText::setCursor(int, int)
10002be5:	83 c4 10             	add    esp,0x10
10002be8:	a1 00 00 00 00       	mov    eax,ds:0x0	10002be9: R_386_32	term
10002bed:	83 ec 08             	sub    esp,0x8
10002bf0:	68 93 a8 00 10       	push   0x1000a893	10002bf1: R_386_32	.text
10002bf5:	50                   	push   eax
10002bf6:	e8 fc ff ff ff       	call   10002bf7 <firstRun(bool)+0x2a2>	10002bf7: R_386_PC32	VgaText::puts(char const*)
10002bfb:	83 c4 10             	add    esp,0x10
10002bfe:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bff: R_386_32	term
10002c03:	83 ec 04             	sub    esp,0x4
10002c06:	6a 0f                	push   0xf
10002c08:	6a 18                	push   0x18
10002c0a:	50                   	push   eax
10002c0b:	e8 fc ff ff ff       	call   10002c0c <firstRun(bool)+0x2b7>	10002c0c: R_386_PC32	VgaText::setCursor(int, int)
10002c10:	83 c4 10             	add    esp,0x10
10002c13:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c14: R_386_32	term
10002c18:	83 ec 08             	sub    esp,0x8
10002c1b:	68 9c a8 00 10       	push   0x1000a89c	10002c1c: R_386_32	.text
10002c20:	50                   	push   eax
10002c21:	e8 fc ff ff ff       	call   10002c22 <firstRun(bool)+0x2cd>	10002c22: R_386_PC32	VgaText::puts(char const*)
10002c26:	83 c4 10             	add    esp,0x10
10002c29:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c2a: R_386_32	term
10002c2e:	83 ec 04             	sub    esp,0x4
10002c31:	6a 10                	push   0x10
10002c33:	6a 18                	push   0x18
10002c35:	50                   	push   eax
10002c36:	e8 fc ff ff ff       	call   10002c37 <firstRun(bool)+0x2e2>	10002c37: R_386_PC32	VgaText::setCursor(int, int)
10002c3b:	83 c4 10             	add    esp,0x10
10002c3e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c3f: R_386_32	term
10002c43:	83 ec 08             	sub    esp,0x8
10002c46:	68 a4 a8 00 10       	push   0x1000a8a4	10002c47: R_386_32	.text
10002c4b:	50                   	push   eax
10002c4c:	e8 fc ff ff ff       	call   10002c4d <firstRun(bool)+0x2f8>	10002c4d: R_386_PC32	VgaText::puts(char const*)
10002c51:	83 c4 10             	add    esp,0x10
10002c54:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c55: R_386_32	term
10002c59:	83 ec 04             	sub    esp,0x4
10002c5c:	6a 09                	push   0x9
10002c5e:	6a 21                	push   0x21
10002c60:	50                   	push   eax
10002c61:	e8 fc ff ff ff       	call   10002c62 <firstRun(bool)+0x30d>	10002c62: R_386_PC32	VgaText::setCursor(int, int)
10002c66:	83 c4 10             	add    esp,0x10
10002c69:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c6a: R_386_32	term
10002c6e:	6a 07                	push   0x7
10002c70:	6a 00                	push   0x0
10002c72:	68 b0 a8 00 10       	push   0x1000a8b0	10002c73: R_386_32	.text
10002c77:	50                   	push   eax
10002c78:	e8 fc ff ff ff       	call   10002c79 <firstRun(bool)+0x324>	10002c79: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c7d:	83 c4 10             	add    esp,0x10
10002c80:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c81: R_386_32	term
10002c85:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10002c89:	75 07                	jne    10002c92 <firstRun(bool)+0x33d>
10002c8b:	ba d5 a8 00 10       	mov    edx,0x1000a8d5	10002c8c: R_386_32	.text
10002c90:	eb 05                	jmp    10002c97 <firstRun(bool)+0x342>
10002c92:	ba d8 a8 00 10       	mov    edx,0x1000a8d8	10002c93: R_386_32	.text
10002c97:	6a 0f                	push   0xf
10002c99:	6a 00                	push   0x0
10002c9b:	52                   	push   edx
10002c9c:	50                   	push   eax
10002c9d:	e8 fc ff ff ff       	call   10002c9e <firstRun(bool)+0x349>	10002c9e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ca2:	83 c4 10             	add    esp,0x10
10002ca5:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ca6: R_386_32	term
10002caa:	83 ec 08             	sub    esp,0x8
10002cad:	6a 21                	push   0x21
10002caf:	50                   	push   eax
10002cb0:	e8 fc ff ff ff       	call   10002cb1 <firstRun(bool)+0x35c>	10002cb1: R_386_PC32	VgaText::setCursorX(int)
10002cb5:	83 c4 10             	add    esp,0x10
10002cb8:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cb9: R_386_32	term
10002cbd:	6a 07                	push   0x7
10002cbf:	6a 00                	push   0x0
10002cc1:	68 00 00 00 00       	push   0x0	10002cc2: R_386_32	currName
10002cc6:	50                   	push   eax
10002cc7:	e8 fc ff ff ff       	call   10002cc8 <firstRun(bool)+0x373>	10002cc8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ccc:	83 c4 10             	add    esp,0x10
10002ccf:	a0 00 00 00 00       	mov    al,ds:0x0	10002cd0: R_386_32	createNewUserMode
10002cd4:	83 f0 01             	xor    eax,0x1
10002cd7:	84 c0                	test   al,al
10002cd9:	74 7b                	je     10002d56 <firstRun(bool)+0x401>
10002cdb:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cdc: R_386_32	term
10002ce0:	83 ec 04             	sub    esp,0x4
10002ce3:	6a 0b                	push   0xb
10002ce5:	6a 21                	push   0x21
10002ce7:	50                   	push   eax
10002ce8:	e8 fc ff ff ff       	call   10002ce9 <firstRun(bool)+0x394>	10002ce9: R_386_PC32	VgaText::setCursor(int, int)
10002ced:	83 c4 10             	add    esp,0x10
10002cf0:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cf1: R_386_32	term
10002cf5:	6a 07                	push   0x7
10002cf7:	6a 00                	push   0x0
10002cf9:	68 b0 a8 00 10       	push   0x1000a8b0	10002cfa: R_386_32	.text
10002cfe:	50                   	push   eax
10002cff:	e8 fc ff ff ff       	call   10002d00 <firstRun(bool)+0x3ab>	10002d00: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d04:	83 c4 10             	add    esp,0x10
10002d07:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d08: R_386_32	term
10002d0c:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10002d10:	75 07                	jne    10002d19 <firstRun(bool)+0x3c4>
10002d12:	ba d5 a8 00 10       	mov    edx,0x1000a8d5	10002d13: R_386_32	.text
10002d17:	eb 05                	jmp    10002d1e <firstRun(bool)+0x3c9>
10002d19:	ba d8 a8 00 10       	mov    edx,0x1000a8d8	10002d1a: R_386_32	.text
10002d1e:	6a 0f                	push   0xf
10002d20:	6a 00                	push   0x0
10002d22:	52                   	push   edx
10002d23:	50                   	push   eax
10002d24:	e8 fc ff ff ff       	call   10002d25 <firstRun(bool)+0x3d0>	10002d25: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d29:	83 c4 10             	add    esp,0x10
10002d2c:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d2d: R_386_32	term
10002d31:	83 ec 08             	sub    esp,0x8
10002d34:	6a 21                	push   0x21
10002d36:	50                   	push   eax
10002d37:	e8 fc ff ff ff       	call   10002d38 <firstRun(bool)+0x3e3>	10002d38: R_386_PC32	VgaText::setCursorX(int)
10002d3c:	83 c4 10             	add    esp,0x10
10002d3f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d40: R_386_32	term
10002d44:	6a 07                	push   0x7
10002d46:	6a 00                	push   0x0
10002d48:	68 00 00 00 00       	push   0x0	10002d49: R_386_32	currComp
10002d4d:	50                   	push   eax
10002d4e:	e8 fc ff ff ff       	call   10002d4f <firstRun(bool)+0x3fa>	10002d4f: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d53:	83 c4 10             	add    esp,0x10
10002d56:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d57: R_386_32	term
10002d5b:	83 ec 04             	sub    esp,0x4
10002d5e:	6a 0d                	push   0xd
10002d60:	6a 21                	push   0x21
10002d62:	50                   	push   eax
10002d63:	e8 fc ff ff ff       	call   10002d64 <firstRun(bool)+0x40f>	10002d64: R_386_PC32	VgaText::setCursor(int, int)
10002d68:	83 c4 10             	add    esp,0x10
10002d6b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d6c: R_386_32	term
10002d70:	6a 07                	push   0x7
10002d72:	6a 00                	push   0x0
10002d74:	68 b0 a8 00 10       	push   0x1000a8b0	10002d75: R_386_32	.text
10002d79:	50                   	push   eax
10002d7a:	e8 fc ff ff ff       	call   10002d7b <firstRun(bool)+0x426>	10002d7b: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d7f:	83 c4 10             	add    esp,0x10
10002d82:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d83: R_386_32	term
10002d87:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10002d8b:	75 07                	jne    10002d94 <firstRun(bool)+0x43f>
10002d8d:	ba d5 a8 00 10       	mov    edx,0x1000a8d5	10002d8e: R_386_32	.text
10002d92:	eb 05                	jmp    10002d99 <firstRun(bool)+0x444>
10002d94:	ba d8 a8 00 10       	mov    edx,0x1000a8d8	10002d95: R_386_32	.text
10002d99:	6a 0f                	push   0xf
10002d9b:	6a 00                	push   0x0
10002d9d:	52                   	push   edx
10002d9e:	50                   	push   eax
10002d9f:	e8 fc ff ff ff       	call   10002da0 <firstRun(bool)+0x44b>	10002da0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002da4:	83 c4 10             	add    esp,0x10
10002da7:	a1 00 00 00 00       	mov    eax,ds:0x0	10002da8: R_386_32	term
10002dac:	83 ec 08             	sub    esp,0x8
10002daf:	6a 21                	push   0x21
10002db1:	50                   	push   eax
10002db2:	e8 fc ff ff ff       	call   10002db3 <firstRun(bool)+0x45e>	10002db3: R_386_PC32	VgaText::setCursorX(int)
10002db7:	83 c4 10             	add    esp,0x10
10002dba:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10002dc1:	83 ec 0c             	sub    esp,0xc
10002dc4:	68 00 00 00 00       	push   0x0	10002dc5: R_386_32	passwbufA
10002dc9:	e8 fc ff ff ff       	call   10002dca <firstRun(bool)+0x475>	10002dca: R_386_PC32	strlen
10002dce:	83 c4 10             	add    esp,0x10
10002dd1:	89 c2                	mov    edx,eax
10002dd3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002dd6:	39 c2                	cmp    edx,eax
10002dd8:	76 1c                	jbe    10002df6 <firstRun(bool)+0x4a1>
10002dda:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ddb: R_386_32	term
10002ddf:	6a 07                	push   0x7
10002de1:	6a 00                	push   0x0
10002de3:	68 dc a8 00 10       	push   0x1000a8dc	10002de4: R_386_32	.text
10002de8:	50                   	push   eax
10002de9:	e8 fc ff ff ff       	call   10002dea <firstRun(bool)+0x495>	10002dea: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002dee:	83 c4 10             	add    esp,0x10
10002df1:	ff 45 d8             	inc    DWORD PTR [ebp-0x28]
10002df4:	eb cb                	jmp    10002dc1 <firstRun(bool)+0x46c>
10002df6:	a1 00 00 00 00       	mov    eax,ds:0x0	10002df7: R_386_32	term
10002dfb:	83 ec 04             	sub    esp,0x4
10002dfe:	6a 0f                	push   0xf
10002e00:	6a 21                	push   0x21
10002e02:	50                   	push   eax
10002e03:	e8 fc ff ff ff       	call   10002e04 <firstRun(bool)+0x4af>	10002e04: R_386_PC32	VgaText::setCursor(int, int)
10002e08:	83 c4 10             	add    esp,0x10
10002e0b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e0c: R_386_32	term
10002e10:	6a 07                	push   0x7
10002e12:	6a 00                	push   0x0
10002e14:	68 b0 a8 00 10       	push   0x1000a8b0	10002e15: R_386_32	.text
10002e19:	50                   	push   eax
10002e1a:	e8 fc ff ff ff       	call   10002e1b <firstRun(bool)+0x4c6>	10002e1b: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e1f:	83 c4 10             	add    esp,0x10
10002e22:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e23: R_386_32	term
10002e27:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10002e2b:	75 07                	jne    10002e34 <firstRun(bool)+0x4df>
10002e2d:	ba d5 a8 00 10       	mov    edx,0x1000a8d5	10002e2e: R_386_32	.text
10002e32:	eb 05                	jmp    10002e39 <firstRun(bool)+0x4e4>
10002e34:	ba d8 a8 00 10       	mov    edx,0x1000a8d8	10002e35: R_386_32	.text
10002e39:	6a 0f                	push   0xf
10002e3b:	6a 00                	push   0x0
10002e3d:	52                   	push   edx
10002e3e:	50                   	push   eax
10002e3f:	e8 fc ff ff ff       	call   10002e40 <firstRun(bool)+0x4eb>	10002e40: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e44:	83 c4 10             	add    esp,0x10
10002e47:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e48: R_386_32	term
10002e4c:	83 ec 08             	sub    esp,0x8
10002e4f:	6a 21                	push   0x21
10002e51:	50                   	push   eax
10002e52:	e8 fc ff ff ff       	call   10002e53 <firstRun(bool)+0x4fe>	10002e53: R_386_PC32	VgaText::setCursorX(int)
10002e57:	83 c4 10             	add    esp,0x10
10002e5a:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10002e61:	83 ec 0c             	sub    esp,0xc
10002e64:	68 00 00 00 00       	push   0x0	10002e65: R_386_32	passwbufB
10002e69:	e8 fc ff ff ff       	call   10002e6a <firstRun(bool)+0x515>	10002e6a: R_386_PC32	strlen
10002e6e:	83 c4 10             	add    esp,0x10
10002e71:	89 c2                	mov    edx,eax
10002e73:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10002e76:	39 c2                	cmp    edx,eax
10002e78:	76 1c                	jbe    10002e96 <firstRun(bool)+0x541>
10002e7a:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e7b: R_386_32	term
10002e7f:	6a 07                	push   0x7
10002e81:	6a 00                	push   0x0
10002e83:	68 dc a8 00 10       	push   0x1000a8dc	10002e84: R_386_32	.text
10002e88:	50                   	push   eax
10002e89:	e8 fc ff ff ff       	call   10002e8a <firstRun(bool)+0x535>	10002e8a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e8e:	83 c4 10             	add    esp,0x10
10002e91:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10002e94:	eb cb                	jmp    10002e61 <firstRun(bool)+0x50c>
10002e96:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e97: R_386_32	term
10002e9b:	83 ec 04             	sub    esp,0x4
10002e9e:	6a 14                	push   0x14
10002ea0:	6a 18                	push   0x18
10002ea2:	50                   	push   eax
10002ea3:	e8 fc ff ff ff       	call   10002ea4 <firstRun(bool)+0x54f>	10002ea4: R_386_PC32	VgaText::setCursor(int, int)
10002ea8:	83 c4 10             	add    esp,0x10
10002eab:	a1 00 00 00 00       	mov    eax,ds:0x0	10002eac: R_386_32	term
10002eb0:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002eb4:	75 07                	jne    10002ebd <firstRun(bool)+0x568>
10002eb6:	ba de a8 00 10       	mov    edx,0x1000a8de	10002eb7: R_386_32	.text
10002ebb:	eb 05                	jmp    10002ec2 <firstRun(bool)+0x56d>
10002ebd:	ba f4 a8 00 10       	mov    edx,0x1000a8f4	10002ebe: R_386_32	.text
10002ec2:	6a 0f                	push   0xf
10002ec4:	6a 08                	push   0x8
10002ec6:	52                   	push   edx
10002ec7:	50                   	push   eax
10002ec8:	e8 fc ff ff ff       	call   10002ec9 <firstRun(bool)+0x574>	10002ec9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ecd:	83 c4 10             	add    esp,0x10
10002ed0:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ed1: R_386_32	term
10002ed5:	83 ec 04             	sub    esp,0x4
10002ed8:	6a 14                	push   0x14
10002eda:	6a 3c                	push   0x3c
10002edc:	50                   	push   eax
10002edd:	e8 fc ff ff ff       	call   10002ede <firstRun(bool)+0x589>	10002ede: R_386_PC32	VgaText::setCursor(int, int)
10002ee2:	83 c4 10             	add    esp,0x10
10002ee5:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002ee9:	74 19                	je     10002f04 <firstRun(bool)+0x5af>
10002eeb:	a1 00 00 00 00       	mov    eax,ds:0x0	10002eec: R_386_32	term
10002ef0:	6a 08                	push   0x8
10002ef2:	6a 0f                	push   0xf
10002ef4:	68 0b a9 00 10       	push   0x1000a90b	10002ef5: R_386_32	.text
10002ef9:	50                   	push   eax
10002efa:	e8 fc ff ff ff       	call   10002efb <firstRun(bool)+0x5a6>	10002efb: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002eff:	83 c4 10             	add    esp,0x10
10002f02:	eb 17                	jmp    10002f1b <firstRun(bool)+0x5c6>
10002f04:	a1 00 00 00 00       	mov    eax,ds:0x0	10002f05: R_386_32	term
10002f09:	6a 01                	push   0x1
10002f0b:	6a 0f                	push   0xf
10002f0d:	68 0b a9 00 10       	push   0x1000a90b	10002f0e: R_386_32	.text
10002f12:	50                   	push   eax
10002f13:	e8 fc ff ff ff       	call   10002f14 <firstRun(bool)+0x5bf>	10002f14: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002f18:	83 c4 10             	add    esp,0x10
10002f1b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002f1c: R_386_32	term
10002f20:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002f24:	75 07                	jne    10002f2d <firstRun(bool)+0x5d8>
10002f26:	ba 14 a9 00 10       	mov    edx,0x1000a914	10002f27: R_386_32	.text
10002f2b:	eb 05                	jmp    10002f32 <firstRun(bool)+0x5dd>
10002f2d:	ba d8 a8 00 10       	mov    edx,0x1000a8d8	10002f2e: R_386_32	.text
10002f32:	6a 0f                	push   0xf
10002f34:	6a 00                	push   0x0
10002f36:	52                   	push   edx
10002f37:	50                   	push   eax
10002f38:	e8 fc ff ff ff       	call   10002f39 <firstRun(bool)+0x5e4>	10002f39: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002f3d:	83 c4 10             	add    esp,0x10
10002f40:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10002f44:	75 28                	jne    10002f6e <firstRun(bool)+0x619>
10002f46:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f48: R_386_32	term
10002f4c:	83 ec 0c             	sub    esp,0xc
10002f4f:	68 00 00 00 00       	push   0x0	10002f50: R_386_32	currName
10002f54:	e8 fc ff ff ff       	call   10002f55 <firstRun(bool)+0x600>	10002f55: R_386_PC32	strlen
10002f59:	83 c4 10             	add    esp,0x10
10002f5c:	83 c0 21             	add    eax,0x21
10002f5f:	83 ec 04             	sub    esp,0x4
10002f62:	6a 09                	push   0x9
10002f64:	50                   	push   eax
10002f65:	53                   	push   ebx
10002f66:	e8 fc ff ff ff       	call   10002f67 <firstRun(bool)+0x612>	10002f67: R_386_PC32	VgaText::setCursor(int, int)
10002f6b:	83 c4 10             	add    esp,0x10
10002f6e:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10002f72:	75 28                	jne    10002f9c <firstRun(bool)+0x647>
10002f74:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f76: R_386_32	term
10002f7a:	83 ec 0c             	sub    esp,0xc
10002f7d:	68 00 00 00 00       	push   0x0	10002f7e: R_386_32	currComp
10002f82:	e8 fc ff ff ff       	call   10002f83 <firstRun(bool)+0x62e>	10002f83: R_386_PC32	strlen
10002f87:	83 c4 10             	add    esp,0x10
10002f8a:	83 c0 21             	add    eax,0x21
10002f8d:	83 ec 04             	sub    esp,0x4
10002f90:	6a 0b                	push   0xb
10002f92:	50                   	push   eax
10002f93:	53                   	push   ebx
10002f94:	e8 fc ff ff ff       	call   10002f95 <firstRun(bool)+0x640>	10002f95: R_386_PC32	VgaText::setCursor(int, int)
10002f99:	83 c4 10             	add    esp,0x10
10002f9c:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10002fa0:	75 28                	jne    10002fca <firstRun(bool)+0x675>
10002fa2:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002fa4: R_386_32	term
10002fa8:	83 ec 0c             	sub    esp,0xc
10002fab:	68 00 00 00 00       	push   0x0	10002fac: R_386_32	passwbufA
10002fb0:	e8 fc ff ff ff       	call   10002fb1 <firstRun(bool)+0x65c>	10002fb1: R_386_PC32	strlen
10002fb5:	83 c4 10             	add    esp,0x10
10002fb8:	83 c0 21             	add    eax,0x21
10002fbb:	83 ec 04             	sub    esp,0x4
10002fbe:	6a 0d                	push   0xd
10002fc0:	50                   	push   eax
10002fc1:	53                   	push   ebx
10002fc2:	e8 fc ff ff ff       	call   10002fc3 <firstRun(bool)+0x66e>	10002fc3: R_386_PC32	VgaText::setCursor(int, int)
10002fc7:	83 c4 10             	add    esp,0x10
10002fca:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10002fce:	75 28                	jne    10002ff8 <firstRun(bool)+0x6a3>
10002fd0:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002fd2: R_386_32	term
10002fd6:	83 ec 0c             	sub    esp,0xc
10002fd9:	68 00 00 00 00       	push   0x0	10002fda: R_386_32	passwbufB
10002fde:	e8 fc ff ff ff       	call   10002fdf <firstRun(bool)+0x68a>	10002fdf: R_386_PC32	strlen
10002fe3:	83 c4 10             	add    esp,0x10
10002fe6:	83 c0 21             	add    eax,0x21
10002fe9:	83 ec 04             	sub    esp,0x4
10002fec:	6a 0f                	push   0xf
10002fee:	50                   	push   eax
10002fef:	53                   	push   ebx
10002ff0:	e8 fc ff ff ff       	call   10002ff1 <firstRun(bool)+0x69c>	10002ff1: R_386_PC32	VgaText::setCursor(int, int)
10002ff5:	83 c4 10             	add    esp,0x10
10002ff8:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002ffc:	75 15                	jne    10003013 <firstRun(bool)+0x6be>
10002ffe:	a1 00 00 00 00       	mov    eax,ds:0x0	10002fff: R_386_32	term
10003003:	83 ec 04             	sub    esp,0x4
10003006:	6a 02                	push   0x2
10003008:	6a 00                	push   0x0
1000300a:	50                   	push   eax
1000300b:	e8 fc ff ff ff       	call   1000300c <firstRun(bool)+0x6b7>	1000300c: R_386_PC32	VgaText::setCursor(int, int)
10003010:	83 c4 10             	add    esp,0x10
10003013:	a0 00 00 00 00       	mov    al,ds:0x0	10003014: R_386_32	installKey
10003018:	84 c0                	test   al,al
1000301a:	0f 94 c0             	sete   al
1000301d:	84 c0                	test   al,al
1000301f:	74 02                	je     10003023 <firstRun(bool)+0x6ce>
10003021:	eb f0                	jmp    10003013 <firstRun(bool)+0x6be>
10003023:	a1 00 00 00 00       	mov    eax,ds:0x0	10003024: R_386_32	term
10003028:	05 82 00 00 00       	add    eax,0x82
1000302d:	83 ec 04             	sub    esp,0x4
10003030:	6a 10                	push   0x10
10003032:	6a 00                	push   0x0
10003034:	50                   	push   eax
10003035:	e8 fc ff ff ff       	call   10003036 <firstRun(bool)+0x6e1>	10003036: R_386_PC32	memset
1000303a:	83 c4 10             	add    esp,0x10
1000303d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000303e: R_386_32	term
10003042:	05 02 01 00 00       	add    eax,0x102
10003047:	83 ec 04             	sub    esp,0x4
1000304a:	6a 10                	push   0x10
1000304c:	6a 00                	push   0x0
1000304e:	50                   	push   eax
1000304f:	e8 fc ff ff ff       	call   10003050 <firstRun(bool)+0x6fb>	10003050: R_386_PC32	memset
10003054:	83 c4 10             	add    esp,0x10
10003057:	a0 00 00 00 00       	mov    al,ds:0x0	10003058: R_386_32	installKey
1000305c:	3c 09                	cmp    al,0x9
1000305e:	74 09                	je     10003069 <firstRun(bool)+0x714>
10003060:	a0 00 00 00 00       	mov    al,ds:0x0	10003061: R_386_32	installKey
10003065:	3c 0a                	cmp    al,0xa
10003067:	75 04                	jne    1000306d <firstRun(bool)+0x718>
10003069:	b0 01                	mov    al,0x1
1000306b:	eb 02                	jmp    1000306f <firstRun(bool)+0x71a>
1000306d:	b0 00                	mov    al,0x0
1000306f:	84 c0                	test   al,al
10003071:	0f 84 c6 00 00 00    	je     1000313d <firstRun(bool)+0x7e8>
10003077:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
1000307b:	75 0d                	jne    1000308a <firstRun(bool)+0x735>
1000307d:	a0 00 00 00 00       	mov    al,ds:0x0	1000307e: R_386_32	installKey
10003082:	3c 0a                	cmp    al,0xa
10003084:	75 04                	jne    1000308a <firstRun(bool)+0x735>
10003086:	b0 01                	mov    al,0x1
10003088:	eb 02                	jmp    1000308c <firstRun(bool)+0x737>
1000308a:	b0 00                	mov    al,0x0
1000308c:	84 c0                	test   al,al
1000308e:	74 72                	je     10003102 <firstRun(bool)+0x7ad>
10003090:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003092: R_386_32	installKey
10003097:	83 ec 08             	sub    esp,0x8
1000309a:	68 00 00 00 00       	push   0x0	1000309b: R_386_32	passwbufB
1000309f:	68 00 00 00 00       	push   0x0	100030a0: R_386_32	passwbufA
100030a4:	e8 fc ff ff ff       	call   100030a5 <firstRun(bool)+0x750>	100030a5: R_386_PC32	strcmp
100030a9:	83 c4 10             	add    esp,0x10
100030ac:	85 c0                	test   eax,eax
100030ae:	75 21                	jne    100030d1 <firstRun(bool)+0x77c>
100030b0:	83 ec 0c             	sub    esp,0xc
100030b3:	68 00 00 00 00       	push   0x0	100030b4: R_386_32	currName
100030b8:	e8 fc ff ff ff       	call   100030b9 <firstRun(bool)+0x764>	100030b9: R_386_PC32	strlen
100030bd:	83 c4 10             	add    esp,0x10
100030c0:	85 c0                	test   eax,eax
100030c2:	0f 85 22 03 00 00    	jne    100033ea <firstRun(bool)+0xa95>
100030c8:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100030cf:	eb 57                	jmp    10003128 <firstRun(bool)+0x7d3>
100030d1:	c7 45 e0 02 00 00 00 	mov    DWORD PTR [ebp-0x20],0x2
100030d8:	83 ec 04             	sub    esp,0x4
100030db:	6a 30                	push   0x30
100030dd:	6a 00                	push   0x0
100030df:	68 00 00 00 00       	push   0x0	100030e0: R_386_32	passwbufA
100030e4:	e8 fc ff ff ff       	call   100030e5 <firstRun(bool)+0x790>	100030e5: R_386_PC32	memset
100030e9:	83 c4 10             	add    esp,0x10
100030ec:	83 ec 04             	sub    esp,0x4
100030ef:	6a 30                	push   0x30
100030f1:	6a 00                	push   0x0
100030f3:	68 00 00 00 00       	push   0x0	100030f4: R_386_32	passwbufB
100030f8:	e8 fc ff ff ff       	call   100030f9 <firstRun(bool)+0x7a4>	100030f9: R_386_PC32	memset
100030fd:	83 c4 10             	add    esp,0x10
10003100:	eb 26                	jmp    10003128 <firstRun(bool)+0x7d3>
10003102:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10003105:	a0 00 00 00 00       	mov    al,ds:0x0	10003106: R_386_32	createNewUserMode
1000310a:	84 c0                	test   al,al
1000310c:	74 0d                	je     1000311b <firstRun(bool)+0x7c6>
1000310e:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003112:	75 07                	jne    1000311b <firstRun(bool)+0x7c6>
10003114:	c7 45 e0 02 00 00 00 	mov    DWORD PTR [ebp-0x20],0x2
1000311b:	83 7d e0 05          	cmp    DWORD PTR [ebp-0x20],0x5
1000311f:	75 07                	jne    10003128 <firstRun(bool)+0x7d3>
10003121:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003128:	83 ec 0c             	sub    esp,0xc
1000312b:	68 2c 01 00 00       	push   0x12c
10003130:	e8 fc ff ff ff       	call   10003131 <firstRun(bool)+0x7dc>	10003131: R_386_PC32	milliTenthSleep(unsigned int)
10003135:	83 c4 10             	add    esp,0x10
10003138:	e9 a1 02 00 00       	jmp    100033de <firstRun(bool)+0xa89>
1000313d:	a0 00 00 00 00       	mov    al,ds:0x0	1000313e: R_386_32	installKey
10003142:	3c 1f                	cmp    al,0x1f
10003144:	7e 0d                	jle    10003153 <firstRun(bool)+0x7fe>
10003146:	a0 00 00 00 00       	mov    al,ds:0x0	10003147: R_386_32	installKey
1000314b:	3c 7f                	cmp    al,0x7f
1000314d:	74 04                	je     10003153 <firstRun(bool)+0x7fe>
1000314f:	b0 01                	mov    al,0x1
10003151:	eb 02                	jmp    10003155 <firstRun(bool)+0x800>
10003153:	b0 00                	mov    al,0x0
10003155:	84 c0                	test   al,al
10003157:	0f 84 39 01 00 00    	je     10003296 <firstRun(bool)+0x941>
1000315d:	a0 00 00 00 00       	mov    al,ds:0x0	1000315e: R_386_32	installKey
10003162:	88 85 c6 fe ff ff    	mov    BYTE PTR [ebp-0x13a],al
10003168:	c6 85 c7 fe ff ff 00 	mov    BYTE PTR [ebp-0x139],0x0
1000316f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10003173:	75 7e                	jne    100031f3 <firstRun(bool)+0x89e>
10003175:	83 ec 0c             	sub    esp,0xc
10003178:	68 00 00 00 00       	push   0x0	10003179: R_386_32	currName
1000317d:	e8 fc ff ff ff       	call   1000317e <firstRun(bool)+0x829>	1000317e: R_386_PC32	strlen
10003182:	83 c4 10             	add    esp,0x10
10003185:	83 f8 22             	cmp    eax,0x22
10003188:	77 69                	ja     100031f3 <firstRun(bool)+0x89e>
1000318a:	a0 00 00 00 00       	mov    al,ds:0x0	1000318b: R_386_32	installKey
1000318f:	3c 40                	cmp    al,0x40
10003191:	7e 09                	jle    1000319c <firstRun(bool)+0x847>
10003193:	a0 00 00 00 00       	mov    al,ds:0x0	10003194: R_386_32	installKey
10003198:	3c 59                	cmp    al,0x59
1000319a:	7f 36                	jg     100031d2 <firstRun(bool)+0x87d>
1000319c:	a0 00 00 00 00       	mov    al,ds:0x0	1000319d: R_386_32	installKey
100031a1:	3c 60                	cmp    al,0x60
100031a3:	7e 09                	jle    100031ae <firstRun(bool)+0x859>
100031a5:	a0 00 00 00 00       	mov    al,ds:0x0	100031a6: R_386_32	installKey
100031aa:	3c 79                	cmp    al,0x79
100031ac:	7f 24                	jg     100031d2 <firstRun(bool)+0x87d>
100031ae:	a0 00 00 00 00       	mov    al,ds:0x0	100031af: R_386_32	installKey
100031b3:	3c 2f                	cmp    al,0x2f
100031b5:	7e 09                	jle    100031c0 <firstRun(bool)+0x86b>
100031b7:	a0 00 00 00 00       	mov    al,ds:0x0	100031b8: R_386_32	installKey
100031bc:	3c 38                	cmp    al,0x38
100031be:	7f 12                	jg     100031d2 <firstRun(bool)+0x87d>
100031c0:	a0 00 00 00 00       	mov    al,ds:0x0	100031c1: R_386_32	installKey
100031c5:	3c 5f                	cmp    al,0x5f
100031c7:	74 09                	je     100031d2 <firstRun(bool)+0x87d>
100031c9:	a0 00 00 00 00       	mov    al,ds:0x0	100031ca: R_386_32	installKey
100031ce:	3c 20                	cmp    al,0x20
100031d0:	75 04                	jne    100031d6 <firstRun(bool)+0x881>
100031d2:	b0 01                	mov    al,0x1
100031d4:	eb 02                	jmp    100031d8 <firstRun(bool)+0x883>
100031d6:	b0 00                	mov    al,0x0
100031d8:	84 c0                	test   al,al
100031da:	74 17                	je     100031f3 <firstRun(bool)+0x89e>
100031dc:	83 ec 08             	sub    esp,0x8
100031df:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
100031e5:	50                   	push   eax
100031e6:	68 00 00 00 00       	push   0x0	100031e7: R_386_32	currName
100031eb:	e8 fc ff ff ff       	call   100031ec <firstRun(bool)+0x897>	100031ec: R_386_PC32	strcat
100031f0:	83 c4 10             	add    esp,0x10
100031f3:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
100031f7:	75 2c                	jne    10003225 <firstRun(bool)+0x8d0>
100031f9:	83 ec 0c             	sub    esp,0xc
100031fc:	68 00 00 00 00       	push   0x0	100031fd: R_386_32	currComp
10003201:	e8 fc ff ff ff       	call   10003202 <firstRun(bool)+0x8ad>	10003202: R_386_PC32	strlen
10003206:	83 c4 10             	add    esp,0x10
10003209:	83 f8 22             	cmp    eax,0x22
1000320c:	77 17                	ja     10003225 <firstRun(bool)+0x8d0>
1000320e:	83 ec 08             	sub    esp,0x8
10003211:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003217:	50                   	push   eax
10003218:	68 00 00 00 00       	push   0x0	10003219: R_386_32	currComp
1000321d:	e8 fc ff ff ff       	call   1000321e <firstRun(bool)+0x8c9>	1000321e: R_386_PC32	strcat
10003222:	83 c4 10             	add    esp,0x10
10003225:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10003229:	75 2c                	jne    10003257 <firstRun(bool)+0x902>
1000322b:	83 ec 0c             	sub    esp,0xc
1000322e:	68 00 00 00 00       	push   0x0	1000322f: R_386_32	passwbufA
10003233:	e8 fc ff ff ff       	call   10003234 <firstRun(bool)+0x8df>	10003234: R_386_PC32	strlen
10003238:	83 c4 10             	add    esp,0x10
1000323b:	83 f8 22             	cmp    eax,0x22
1000323e:	77 17                	ja     10003257 <firstRun(bool)+0x902>
10003240:	83 ec 08             	sub    esp,0x8
10003243:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003249:	50                   	push   eax
1000324a:	68 00 00 00 00       	push   0x0	1000324b: R_386_32	passwbufA
1000324f:	e8 fc ff ff ff       	call   10003250 <firstRun(bool)+0x8fb>	10003250: R_386_PC32	strcat
10003254:	83 c4 10             	add    esp,0x10
10003257:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
1000325b:	0f 85 7d 01 00 00    	jne    100033de <firstRun(bool)+0xa89>
10003261:	83 ec 0c             	sub    esp,0xc
10003264:	68 00 00 00 00       	push   0x0	10003265: R_386_32	passwbufB
10003269:	e8 fc ff ff ff       	call   1000326a <firstRun(bool)+0x915>	1000326a: R_386_PC32	strlen
1000326e:	83 c4 10             	add    esp,0x10
10003271:	83 f8 22             	cmp    eax,0x22
10003274:	0f 87 64 01 00 00    	ja     100033de <firstRun(bool)+0xa89>
1000327a:	83 ec 08             	sub    esp,0x8
1000327d:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003283:	50                   	push   eax
10003284:	68 00 00 00 00       	push   0x0	10003285: R_386_32	passwbufB
10003289:	e8 fc ff ff ff       	call   1000328a <firstRun(bool)+0x935>	1000328a: R_386_PC32	strcat
1000328e:	83 c4 10             	add    esp,0x10
10003291:	e9 48 01 00 00       	jmp    100033de <firstRun(bool)+0xa89>
10003296:	a0 00 00 00 00       	mov    al,ds:0x0	10003297: R_386_32	installKey
1000329b:	3c 1b                	cmp    al,0x1b
1000329d:	75 0d                	jne    100032ac <firstRun(bool)+0x957>
1000329f:	a0 00 00 00 00       	mov    al,ds:0x0	100032a0: R_386_32	createNewUserMode
100032a4:	84 c0                	test   al,al
100032a6:	74 04                	je     100032ac <firstRun(bool)+0x957>
100032a8:	b0 01                	mov    al,0x1
100032aa:	eb 02                	jmp    100032ae <firstRun(bool)+0x959>
100032ac:	b0 00                	mov    al,0x0
100032ae:	84 c0                	test   al,al
100032b0:	74 0c                	je     100032be <firstRun(bool)+0x969>
100032b2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100032b4: R_386_32	createNewUserMode
100032b9:	e9 d9 1c 00 00       	jmp    10004f97 <firstRun(bool)+0x2642>
100032be:	a0 00 00 00 00       	mov    al,ds:0x0	100032bf: R_386_32	installKey
100032c3:	3c 08                	cmp    al,0x8
100032c5:	0f 94 c0             	sete   al
100032c8:	84 c0                	test   al,al
100032ca:	0f 84 ca 00 00 00    	je     1000339a <firstRun(bool)+0xa45>
100032d0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100032d4:	75 2c                	jne    10003302 <firstRun(bool)+0x9ad>
100032d6:	83 ec 0c             	sub    esp,0xc
100032d9:	68 00 00 00 00       	push   0x0	100032da: R_386_32	currName
100032de:	e8 fc ff ff ff       	call   100032df <firstRun(bool)+0x98a>	100032df: R_386_PC32	strlen
100032e3:	83 c4 10             	add    esp,0x10
100032e6:	85 c0                	test   eax,eax
100032e8:	74 18                	je     10003302 <firstRun(bool)+0x9ad>
100032ea:	83 ec 0c             	sub    esp,0xc
100032ed:	68 00 00 00 00       	push   0x0	100032ee: R_386_32	currName
100032f2:	e8 fc ff ff ff       	call   100032f3 <firstRun(bool)+0x99e>	100032f3: R_386_PC32	strlen
100032f7:	83 c4 10             	add    esp,0x10
100032fa:	48                   	dec    eax
100032fb:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	100032fd: R_386_32	currName
10003302:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003306:	75 2c                	jne    10003334 <firstRun(bool)+0x9df>
10003308:	83 ec 0c             	sub    esp,0xc
1000330b:	68 00 00 00 00       	push   0x0	1000330c: R_386_32	currComp
10003310:	e8 fc ff ff ff       	call   10003311 <firstRun(bool)+0x9bc>	10003311: R_386_PC32	strlen
10003315:	83 c4 10             	add    esp,0x10
10003318:	85 c0                	test   eax,eax
1000331a:	74 18                	je     10003334 <firstRun(bool)+0x9df>
1000331c:	83 ec 0c             	sub    esp,0xc
1000331f:	68 00 00 00 00       	push   0x0	10003320: R_386_32	currComp
10003324:	e8 fc ff ff ff       	call   10003325 <firstRun(bool)+0x9d0>	10003325: R_386_PC32	strlen
10003329:	83 c4 10             	add    esp,0x10
1000332c:	48                   	dec    eax
1000332d:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	1000332f: R_386_32	currComp
10003334:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10003338:	75 2c                	jne    10003366 <firstRun(bool)+0xa11>
1000333a:	83 ec 0c             	sub    esp,0xc
1000333d:	68 00 00 00 00       	push   0x0	1000333e: R_386_32	passwbufA
10003342:	e8 fc ff ff ff       	call   10003343 <firstRun(bool)+0x9ee>	10003343: R_386_PC32	strlen
10003347:	83 c4 10             	add    esp,0x10
1000334a:	85 c0                	test   eax,eax
1000334c:	74 18                	je     10003366 <firstRun(bool)+0xa11>
1000334e:	83 ec 0c             	sub    esp,0xc
10003351:	68 00 00 00 00       	push   0x0	10003352: R_386_32	passwbufA
10003356:	e8 fc ff ff ff       	call   10003357 <firstRun(bool)+0xa02>	10003357: R_386_PC32	strlen
1000335b:	83 c4 10             	add    esp,0x10
1000335e:	48                   	dec    eax
1000335f:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003361: R_386_32	passwbufA
10003366:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
1000336a:	75 72                	jne    100033de <firstRun(bool)+0xa89>
1000336c:	83 ec 0c             	sub    esp,0xc
1000336f:	68 00 00 00 00       	push   0x0	10003370: R_386_32	passwbufB
10003374:	e8 fc ff ff ff       	call   10003375 <firstRun(bool)+0xa20>	10003375: R_386_PC32	strlen
10003379:	83 c4 10             	add    esp,0x10
1000337c:	85 c0                	test   eax,eax
1000337e:	74 5e                	je     100033de <firstRun(bool)+0xa89>
10003380:	83 ec 0c             	sub    esp,0xc
10003383:	68 00 00 00 00       	push   0x0	10003384: R_386_32	passwbufB
10003388:	e8 fc ff ff ff       	call   10003389 <firstRun(bool)+0xa34>	10003389: R_386_PC32	strlen
1000338d:	83 c4 10             	add    esp,0x10
10003390:	48                   	dec    eax
10003391:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003393: R_386_32	passwbufB
10003398:	eb 44                	jmp    100033de <firstRun(bool)+0xa89>
1000339a:	a0 00 00 00 00       	mov    al,ds:0x0	1000339b: R_386_32	installKey
1000339f:	3c 7f                	cmp    al,0x7f
100033a1:	0f 94 c0             	sete   al
100033a4:	84 c0                	test   al,al
100033a6:	74 36                	je     100033de <firstRun(bool)+0xa89>
100033a8:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
100033ab:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
100033af:	75 07                	jne    100033b8 <firstRun(bool)+0xa63>
100033b1:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100033b8:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
100033bc:	75 10                	jne    100033ce <firstRun(bool)+0xa79>
100033be:	a0 00 00 00 00       	mov    al,ds:0x0	100033bf: R_386_32	createNewUserMode
100033c3:	84 c0                	test   al,al
100033c5:	74 07                	je     100033ce <firstRun(bool)+0xa79>
100033c7:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100033ce:	83 ec 0c             	sub    esp,0xc
100033d1:	68 2c 01 00 00       	push   0x12c
100033d6:	e8 fc ff ff ff       	call   100033d7 <firstRun(bool)+0xa82>	100033d7: R_386_PC32	milliTenthSleep(unsigned int)
100033db:	83 c4 10             	add    esp,0x10
100033de:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100033e0: R_386_32	installKey
100033e5:	e9 6a f8 ff ff       	jmp    10002c54 <firstRun(bool)+0x2ff>
100033ea:	90                   	nop
100033eb:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100033ed: R_386_32	installKey
100033f2:	83 ec 0c             	sub    esp,0xc
100033f5:	68 d0 07 00 00       	push   0x7d0
100033fa:	e8 fc ff ff ff       	call   100033fb <firstRun(bool)+0xaa6>	100033fb: R_386_PC32	milliTenthSleep(unsigned int)
100033ff:	83 c4 10             	add    esp,0x10
10003402:	e8 fc ff ff ff       	call   10003403 <firstRun(bool)+0xaae>	10003403: R_386_PC32	drawBootScreen()
10003407:	c7 45 bc 08 00 00 00 	mov    DWORD PTR [ebp-0x44],0x8
1000340e:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003410: R_386_32	_bcrypt_errno
10003418:	83 ec 08             	sub    esp,0x8
1000341b:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10003421:	50                   	push   eax
10003422:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10003425:	e8 fc ff ff ff       	call   10003426 <firstRun(bool)+0xad1>	10003426: R_386_PC32	bcrypt_gensalt
1000342a:	83 c4 10             	add    esp,0x10
1000342d:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10003430:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10003434:	75 09                	jne    1000343f <firstRun(bool)+0xaea>
10003436:	a1 00 00 00 00       	mov    eax,ds:0x0	10003437: R_386_32	_bcrypt_errno
1000343b:	85 c0                	test   eax,eax
1000343d:	74 5e                	je     1000349d <firstRun(bool)+0xb48>
1000343f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003446:	83 ec 08             	sub    esp,0x8
10003449:	68 18 a9 00 10       	push   0x1000a918	1000344a: R_386_32	.text
1000344e:	68 00 00 00 00       	push   0x0	1000344f: R_386_32	currName
10003453:	e8 fc ff ff ff       	call   10003454 <firstRun(bool)+0xaff>	10003454: R_386_PC32	strcpy
10003458:	83 c4 10             	add    esp,0x10
1000345b:	83 ec 08             	sub    esp,0x8
1000345e:	68 27 a9 00 10       	push   0x1000a927	1000345f: R_386_32	.text
10003463:	68 00 00 00 00       	push   0x0	10003464: R_386_32	currComp
10003468:	e8 fc ff ff ff       	call   10003469 <firstRun(bool)+0xb14>	10003469: R_386_PC32	strcpy
1000346d:	83 c4 10             	add    esp,0x10
10003470:	83 ec 04             	sub    esp,0x4
10003473:	6a 50                	push   0x50
10003475:	6a 00                	push   0x0
10003477:	68 00 00 00 00       	push   0x0	10003478: R_386_32	passwbufA
1000347c:	e8 fc ff ff ff       	call   1000347d <firstRun(bool)+0xb28>	1000347d: R_386_PC32	memset
10003481:	83 c4 10             	add    esp,0x10
10003484:	83 ec 04             	sub    esp,0x4
10003487:	6a 50                	push   0x50
10003489:	6a 00                	push   0x0
1000348b:	68 00 00 00 00       	push   0x0	1000348c: R_386_32	passwbufB
10003490:	e8 fc ff ff ff       	call   10003491 <firstRun(bool)+0xb3c>	10003491: R_386_PC32	memset
10003495:	83 c4 10             	add    esp,0x10
10003498:	e9 30 f6 ff ff       	jmp    10002acd <firstRun(bool)+0x178>
1000349d:	83 ec 08             	sub    esp,0x8
100034a0:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
100034a6:	50                   	push   eax
100034a7:	68 00 00 00 00       	push   0x0	100034a8: R_386_32	passwsalt
100034ac:	e8 fc ff ff ff       	call   100034ad <firstRun(bool)+0xb58>	100034ad: R_386_PC32	strcpy
100034b1:	83 c4 10             	add    esp,0x10
100034b4:	83 ec 04             	sub    esp,0x4
100034b7:	68 00 00 00 00       	push   0x0	100034b8: R_386_32	passwhash
100034bc:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
100034c2:	50                   	push   eax
100034c3:	68 00 00 00 00       	push   0x0	100034c4: R_386_32	passwbufA
100034c8:	e8 fc ff ff ff       	call   100034c9 <firstRun(bool)+0xb74>	100034c9: R_386_PC32	bcrypt_hashpw
100034cd:	83 c4 10             	add    esp,0x10
100034d0:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100034d3:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100034d7:	75 09                	jne    100034e2 <firstRun(bool)+0xb8d>
100034d9:	a1 00 00 00 00       	mov    eax,ds:0x0	100034da: R_386_32	_bcrypt_errno
100034de:	85 c0                	test   eax,eax
100034e0:	74 5e                	je     10003540 <firstRun(bool)+0xbeb>
100034e2:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100034e9:	83 ec 08             	sub    esp,0x8
100034ec:	68 18 a9 00 10       	push   0x1000a918	100034ed: R_386_32	.text
100034f1:	68 00 00 00 00       	push   0x0	100034f2: R_386_32	currName
100034f6:	e8 fc ff ff ff       	call   100034f7 <firstRun(bool)+0xba2>	100034f7: R_386_PC32	strcpy
100034fb:	83 c4 10             	add    esp,0x10
100034fe:	83 ec 08             	sub    esp,0x8
10003501:	68 39 a9 00 10       	push   0x1000a939	10003502: R_386_32	.text
10003506:	68 00 00 00 00       	push   0x0	10003507: R_386_32	currComp
1000350b:	e8 fc ff ff ff       	call   1000350c <firstRun(bool)+0xbb7>	1000350c: R_386_PC32	strcpy
10003510:	83 c4 10             	add    esp,0x10
10003513:	83 ec 04             	sub    esp,0x4
10003516:	6a 50                	push   0x50
10003518:	6a 00                	push   0x0
1000351a:	68 00 00 00 00       	push   0x0	1000351b: R_386_32	passwbufA
1000351f:	e8 fc ff ff ff       	call   10003520 <firstRun(bool)+0xbcb>	10003520: R_386_PC32	memset
10003524:	83 c4 10             	add    esp,0x10
10003527:	83 ec 04             	sub    esp,0x4
1000352a:	6a 50                	push   0x50
1000352c:	6a 00                	push   0x0
1000352e:	68 00 00 00 00       	push   0x0	1000352f: R_386_32	passwbufB
10003533:	e8 fc ff ff ff       	call   10003534 <firstRun(bool)+0xbdf>	10003534: R_386_PC32	memset
10003538:	83 c4 10             	add    esp,0x10
1000353b:	e9 8d f5 ff ff       	jmp    10002acd <firstRun(bool)+0x178>
10003540:	83 ec 04             	sub    esp,0x4
10003543:	6a 50                	push   0x50
10003545:	6a 00                	push   0x0
10003547:	68 00 00 00 00       	push   0x0	10003548: R_386_32	passwbufA
1000354c:	e8 fc ff ff ff       	call   1000354d <firstRun(bool)+0xbf8>	1000354d: R_386_PC32	memset
10003551:	83 c4 10             	add    esp,0x10
10003554:	83 ec 04             	sub    esp,0x4
10003557:	6a 50                	push   0x50
10003559:	6a 00                	push   0x0
1000355b:	68 00 00 00 00       	push   0x0	1000355c: R_386_32	passwbufB
10003560:	e8 fc ff ff ff       	call   10003561 <firstRun(bool)+0xc0c>	10003561: R_386_PC32	memset
10003565:	83 c4 10             	add    esp,0x10
10003568:	a0 00 00 00 00       	mov    al,ds:0x0	10003569: R_386_32	createNewUserMode
1000356d:	84 c0                	test   al,al
1000356f:	74 16                	je     10003587 <firstRun(bool)+0xc32>
10003571:	83 ec 0c             	sub    esp,0xc
10003574:	68 00 00 00 00       	push   0x0	10003575: R_386_32	currName
10003579:	e8 fc ff ff ff       	call   1000357a <firstRun(bool)+0xc25>	1000357a: R_386_PC32	createUser(char const*)
1000357e:	83 c4 10             	add    esp,0x10
10003581:	90                   	nop
10003582:	e9 10 1a 00 00       	jmp    10004f97 <firstRun(bool)+0x2642>
10003587:	83 ec 0c             	sub    esp,0xc
1000358a:	68 d0 07 00 00       	push   0x7d0
1000358f:	e8 fc ff ff ff       	call   10003590 <firstRun(bool)+0xc3b>	10003590: R_386_PC32	milliTenthSleep(unsigned int)
10003594:	83 c4 10             	add    esp,0x10
10003597:	eb 01                	jmp    1000359a <firstRun(bool)+0xc45>
10003599:	90                   	nop
1000359a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000359c: R_386_32	installKey
100035a1:	e8 fc ff ff ff       	call   100035a2 <firstRun(bool)+0xc4d>	100035a2: R_386_PC32	drawBootScreen()
100035a6:	83 ec 0c             	sub    esp,0xc
100035a9:	68 4b a9 00 10       	push   0x1000a94b	100035aa: R_386_32	.text
100035ae:	6a 0d                	push   0xd
100035b0:	6a 32                	push   0x32
100035b2:	6a 02                	push   0x2
100035b4:	6a 16                	push   0x16
100035b6:	e8 fc ff ff ff       	call   100035b7 <firstRun(bool)+0xc62>	100035b7: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100035bb:	83 c4 20             	add    esp,0x20
100035be:	a1 00 00 00 00       	mov    eax,ds:0x0	100035bf: R_386_32	Krnl::computer
100035c3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
100035c9:	a1 00 00 00 00       	mov    eax,ds:0x0	100035ca: R_386_32	Krnl::computer
100035ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100035d4:	8b 00                	mov    eax,DWORD PTR [eax]
100035d6:	83 c0 28             	add    eax,0x28
100035d9:	8b 00                	mov    eax,DWORD PTR [eax]
100035db:	8d 95 98 fe ff ff    	lea    edx,[ebp-0x168]
100035e1:	83 ec 08             	sub    esp,0x8
100035e4:	51                   	push   ecx
100035e5:	52                   	push   edx
100035e6:	ff d0                	call   eax
100035e8:	83 c4 0c             	add    esp,0xc
100035eb:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [ebp-0x168]
100035f1:	8b 95 9c fe ff ff    	mov    edx,DWORD PTR [ebp-0x164]
100035f7:	89 85 d4 fe ff ff    	mov    DWORD PTR [ebp-0x12c],eax
100035fd:	89 95 d8 fe ff ff    	mov    DWORD PTR [ebp-0x128],edx
10003603:	83 ec 08             	sub    esp,0x8
10003606:	68 59 a9 00 10       	push   0x1000a959	10003607: R_386_32	.text
1000360b:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003611:	50                   	push   eax
10003612:	e8 fc ff ff ff       	call   10003613 <firstRun(bool)+0xcbe>	10003613: R_386_PC32	strcpy
10003617:	83 c4 10             	add    esp,0x10
1000361a:	8a 85 d4 fe ff ff    	mov    al,BYTE PTR [ebp-0x12c]
10003620:	0f b6 d0             	movzx  edx,al
10003623:	89 d0                	mov    eax,edx
10003625:	c1 e0 02             	shl    eax,0x2
10003628:	01 d0                	add    eax,edx
1000362a:	c1 e0 03             	shl    eax,0x3
1000362d:	01 d0                	add    eax,edx
1000362f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003636:	01 d0                	add    eax,edx
10003638:	66 c1 e8 08          	shr    ax,0x8
1000363c:	c0 e8 03             	shr    al,0x3
1000363f:	83 c0 30             	add    eax,0x30
10003642:	88 85 40 ff ff ff    	mov    BYTE PTR [ebp-0xc0],al
10003648:	8a 8d d4 fe ff ff    	mov    cl,BYTE PTR [ebp-0x12c]
1000364e:	0f b6 d1             	movzx  edx,cl
10003651:	89 d0                	mov    eax,edx
10003653:	c1 e0 02             	shl    eax,0x2
10003656:	01 d0                	add    eax,edx
10003658:	c1 e0 03             	shl    eax,0x3
1000365b:	01 d0                	add    eax,edx
1000365d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003664:	01 d0                	add    eax,edx
10003666:	66 c1 e8 08          	shr    ax,0x8
1000366a:	88 c2                	mov    dl,al
1000366c:	c0 ea 03             	shr    dl,0x3
1000366f:	88 d0                	mov    al,dl
10003671:	c1 e0 02             	shl    eax,0x2
10003674:	01 d0                	add    eax,edx
10003676:	d1 e0                	shl    eax,1
10003678:	29 c1                	sub    ecx,eax
1000367a:	88 ca                	mov    dl,cl
1000367c:	8d 42 30             	lea    eax,[edx+0x30]
1000367f:	88 85 41 ff ff ff    	mov    BYTE PTR [ebp-0xbf],al
10003685:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
1000368b:	0f b6 c8             	movzx  ecx,al
1000368e:	b8 67 66 66 66       	mov    eax,0x66666667
10003693:	f7 e9                	imul   ecx
10003695:	c1 fa 02             	sar    edx,0x2
10003698:	89 c8                	mov    eax,ecx
1000369a:	c1 f8 1f             	sar    eax,0x1f
1000369d:	29 c2                	sub    edx,eax
1000369f:	89 d0                	mov    eax,edx
100036a1:	83 c0 30             	add    eax,0x30
100036a4:	88 85 43 ff ff ff    	mov    BYTE PTR [ebp-0xbd],al
100036aa:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
100036b0:	0f b6 c8             	movzx  ecx,al
100036b3:	b8 67 66 66 66       	mov    eax,0x66666667
100036b8:	f7 e9                	imul   ecx
100036ba:	c1 fa 02             	sar    edx,0x2
100036bd:	89 c8                	mov    eax,ecx
100036bf:	c1 f8 1f             	sar    eax,0x1f
100036c2:	29 c2                	sub    edx,eax
100036c4:	89 d0                	mov    eax,edx
100036c6:	c1 e0 02             	shl    eax,0x2
100036c9:	01 d0                	add    eax,edx
100036cb:	01 c0                	add    eax,eax
100036cd:	29 c1                	sub    ecx,eax
100036cf:	89 ca                	mov    edx,ecx
100036d1:	88 d0                	mov    al,dl
100036d3:	83 c0 30             	add    eax,0x30
100036d6:	88 85 44 ff ff ff    	mov    BYTE PTR [ebp-0xbc],al
100036dc:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
100036e3:	0f b7 c8             	movzx  ecx,ax
100036e6:	b8 d3 4d 62 10       	mov    eax,0x10624dd3
100036eb:	f7 e9                	imul   ecx
100036ed:	c1 fa 06             	sar    edx,0x6
100036f0:	89 c8                	mov    eax,ecx
100036f2:	c1 f8 1f             	sar    eax,0x1f
100036f5:	29 c2                	sub    edx,eax
100036f7:	89 d0                	mov    eax,edx
100036f9:	b9 0a 00 00 00       	mov    ecx,0xa
100036fe:	99                   	cdq    
100036ff:	f7 f9                	idiv   ecx
10003701:	89 d0                	mov    eax,edx
10003703:	83 c0 30             	add    eax,0x30
10003706:	88 85 46 ff ff ff    	mov    BYTE PTR [ebp-0xba],al
1000370c:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003713:	0f b7 c8             	movzx  ecx,ax
10003716:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
1000371b:	f7 e9                	imul   ecx
1000371d:	c1 fa 05             	sar    edx,0x5
10003720:	89 c8                	mov    eax,ecx
10003722:	c1 f8 1f             	sar    eax,0x1f
10003725:	29 c2                	sub    edx,eax
10003727:	89 d0                	mov    eax,edx
10003729:	b9 0a 00 00 00       	mov    ecx,0xa
1000372e:	99                   	cdq    
1000372f:	f7 f9                	idiv   ecx
10003731:	89 d0                	mov    eax,edx
10003733:	83 c0 30             	add    eax,0x30
10003736:	88 85 47 ff ff ff    	mov    BYTE PTR [ebp-0xb9],al
1000373c:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003743:	0f b7 c8             	movzx  ecx,ax
10003746:	b8 67 66 66 66       	mov    eax,0x66666667
1000374b:	f7 e9                	imul   ecx
1000374d:	c1 fa 02             	sar    edx,0x2
10003750:	89 c8                	mov    eax,ecx
10003752:	c1 f8 1f             	sar    eax,0x1f
10003755:	89 d1                	mov    ecx,edx
10003757:	29 c1                	sub    ecx,eax
10003759:	b8 67 66 66 66       	mov    eax,0x66666667
1000375e:	f7 e9                	imul   ecx
10003760:	c1 fa 02             	sar    edx,0x2
10003763:	89 c8                	mov    eax,ecx
10003765:	c1 f8 1f             	sar    eax,0x1f
10003768:	29 c2                	sub    edx,eax
1000376a:	89 d0                	mov    eax,edx
1000376c:	c1 e0 02             	shl    eax,0x2
1000376f:	01 d0                	add    eax,edx
10003771:	01 c0                	add    eax,eax
10003773:	29 c1                	sub    ecx,eax
10003775:	89 ca                	mov    edx,ecx
10003777:	88 d0                	mov    al,dl
10003779:	83 c0 30             	add    eax,0x30
1000377c:	88 85 48 ff ff ff    	mov    BYTE PTR [ebp-0xb8],al
10003782:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003789:	0f b7 c0             	movzx  eax,ax
1000378c:	b9 0a 00 00 00       	mov    ecx,0xa
10003791:	99                   	cdq    
10003792:	f7 f9                	idiv   ecx
10003794:	89 d0                	mov    eax,edx
10003796:	83 c0 30             	add    eax,0x30
10003799:	88 85 49 ff ff ff    	mov    BYTE PTR [ebp-0xb7],al
1000379f:	8a 85 d8 fe ff ff    	mov    al,BYTE PTR [ebp-0x128]
100037a5:	0f b6 d0             	movzx  edx,al
100037a8:	89 d0                	mov    eax,edx
100037aa:	c1 e0 02             	shl    eax,0x2
100037ad:	01 d0                	add    eax,edx
100037af:	c1 e0 03             	shl    eax,0x3
100037b2:	01 d0                	add    eax,edx
100037b4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100037bb:	01 d0                	add    eax,edx
100037bd:	66 c1 e8 08          	shr    ax,0x8
100037c1:	c0 e8 03             	shr    al,0x3
100037c4:	83 c0 30             	add    eax,0x30
100037c7:	88 85 4b ff ff ff    	mov    BYTE PTR [ebp-0xb5],al
100037cd:	8a 8d d8 fe ff ff    	mov    cl,BYTE PTR [ebp-0x128]
100037d3:	0f b6 d1             	movzx  edx,cl
100037d6:	89 d0                	mov    eax,edx
100037d8:	c1 e0 02             	shl    eax,0x2
100037db:	01 d0                	add    eax,edx
100037dd:	c1 e0 03             	shl    eax,0x3
100037e0:	01 d0                	add    eax,edx
100037e2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100037e9:	01 d0                	add    eax,edx
100037eb:	66 c1 e8 08          	shr    ax,0x8
100037ef:	88 c2                	mov    dl,al
100037f1:	c0 ea 03             	shr    dl,0x3
100037f4:	88 d0                	mov    al,dl
100037f6:	c1 e0 02             	shl    eax,0x2
100037f9:	01 d0                	add    eax,edx
100037fb:	d1 e0                	shl    eax,1
100037fd:	29 c1                	sub    ecx,eax
100037ff:	88 ca                	mov    dl,cl
10003801:	8d 42 30             	lea    eax,[edx+0x30]
10003804:	88 85 4c ff ff ff    	mov    BYTE PTR [ebp-0xb4],al
1000380a:	8a 85 d9 fe ff ff    	mov    al,BYTE PTR [ebp-0x127]
10003810:	0f b6 d0             	movzx  edx,al
10003813:	89 d0                	mov    eax,edx
10003815:	c1 e0 02             	shl    eax,0x2
10003818:	01 d0                	add    eax,edx
1000381a:	c1 e0 03             	shl    eax,0x3
1000381d:	01 d0                	add    eax,edx
1000381f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003826:	01 d0                	add    eax,edx
10003828:	66 c1 e8 08          	shr    ax,0x8
1000382c:	c0 e8 03             	shr    al,0x3
1000382f:	83 c0 30             	add    eax,0x30
10003832:	88 85 4e ff ff ff    	mov    BYTE PTR [ebp-0xb2],al
10003838:	8a 8d d9 fe ff ff    	mov    cl,BYTE PTR [ebp-0x127]
1000383e:	0f b6 d1             	movzx  edx,cl
10003841:	89 d0                	mov    eax,edx
10003843:	c1 e0 02             	shl    eax,0x2
10003846:	01 d0                	add    eax,edx
10003848:	c1 e0 03             	shl    eax,0x3
1000384b:	01 d0                	add    eax,edx
1000384d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003854:	01 d0                	add    eax,edx
10003856:	66 c1 e8 08          	shr    ax,0x8
1000385a:	88 c2                	mov    dl,al
1000385c:	c0 ea 03             	shr    dl,0x3
1000385f:	88 d0                	mov    al,dl
10003861:	c1 e0 02             	shl    eax,0x2
10003864:	01 d0                	add    eax,edx
10003866:	d1 e0                	shl    eax,1
10003868:	29 c1                	sub    ecx,eax
1000386a:	88 ca                	mov    dl,cl
1000386c:	8d 42 30             	lea    eax,[edx+0x30]
1000386f:	88 85 4f ff ff ff    	mov    BYTE PTR [ebp-0xb1],al
10003875:	8a 85 da fe ff ff    	mov    al,BYTE PTR [ebp-0x126]
1000387b:	0f b6 d0             	movzx  edx,al
1000387e:	89 d0                	mov    eax,edx
10003880:	c1 e0 02             	shl    eax,0x2
10003883:	01 d0                	add    eax,edx
10003885:	c1 e0 03             	shl    eax,0x3
10003888:	01 d0                	add    eax,edx
1000388a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003891:	01 d0                	add    eax,edx
10003893:	66 c1 e8 08          	shr    ax,0x8
10003897:	c0 e8 03             	shr    al,0x3
1000389a:	83 c0 30             	add    eax,0x30
1000389d:	88 85 51 ff ff ff    	mov    BYTE PTR [ebp-0xaf],al
100038a3:	8a 8d da fe ff ff    	mov    cl,BYTE PTR [ebp-0x126]
100038a9:	0f b6 d1             	movzx  edx,cl
100038ac:	89 d0                	mov    eax,edx
100038ae:	c1 e0 02             	shl    eax,0x2
100038b1:	01 d0                	add    eax,edx
100038b3:	c1 e0 03             	shl    eax,0x3
100038b6:	01 d0                	add    eax,edx
100038b8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100038bf:	01 d0                	add    eax,edx
100038c1:	66 c1 e8 08          	shr    ax,0x8
100038c5:	88 c2                	mov    dl,al
100038c7:	c0 ea 03             	shr    dl,0x3
100038ca:	88 d0                	mov    al,dl
100038cc:	c1 e0 02             	shl    eax,0x2
100038cf:	01 d0                	add    eax,edx
100038d1:	d1 e0                	shl    eax,1
100038d3:	29 c1                	sub    ecx,eax
100038d5:	88 ca                	mov    dl,cl
100038d7:	8d 42 30             	lea    eax,[edx+0x30]
100038da:	88 85 52 ff ff ff    	mov    BYTE PTR [ebp-0xae],al
100038e0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100038e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100038e8: R_386_32	term
100038ec:	83 ec 04             	sub    esp,0x4
100038ef:	6a 05                	push   0x5
100038f1:	6a 18                	push   0x18
100038f3:	50                   	push   eax
100038f4:	e8 fc ff ff ff       	call   100038f5 <firstRun(bool)+0xfa0>	100038f5: R_386_PC32	VgaText::setCursor(int, int)
100038f9:	83 c4 10             	add    esp,0x10
100038fc:	a1 00 00 00 00       	mov    eax,ds:0x0	100038fd: R_386_32	term
10003901:	83 ec 08             	sub    esp,0x8
10003904:	68 70 a9 00 10       	push   0x1000a970	10003905: R_386_32	.text
10003909:	50                   	push   eax
1000390a:	e8 fc ff ff ff       	call   1000390b <firstRun(bool)+0xfb6>	1000390b: R_386_PC32	VgaText::puts(char const*)
1000390f:	83 c4 10             	add    esp,0x10
10003912:	a1 00 00 00 00       	mov    eax,ds:0x0	10003913: R_386_32	term
10003917:	83 ec 04             	sub    esp,0x4
1000391a:	6a 06                	push   0x6
1000391c:	6a 18                	push   0x18
1000391e:	50                   	push   eax
1000391f:	e8 fc ff ff ff       	call   10003920 <firstRun(bool)+0xfcb>	10003920: R_386_PC32	VgaText::setCursor(int, int)
10003924:	83 c4 10             	add    esp,0x10
10003927:	a1 00 00 00 00       	mov    eax,ds:0x0	10003928: R_386_32	term
1000392c:	83 ec 08             	sub    esp,0x8
1000392f:	68 98 a9 00 10       	push   0x1000a998	10003930: R_386_32	.text
10003934:	50                   	push   eax
10003935:	e8 fc ff ff ff       	call   10003936 <firstRun(bool)+0xfe1>	10003936: R_386_PC32	VgaText::puts(char const*)
1000393a:	83 c4 10             	add    esp,0x10
1000393d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000393e: R_386_32	term
10003942:	83 ec 04             	sub    esp,0x4
10003945:	6a 09                	push   0x9
10003947:	6a 1a                	push   0x1a
10003949:	50                   	push   eax
1000394a:	e8 fc ff ff ff       	call   1000394b <firstRun(bool)+0xff6>	1000394b: R_386_PC32	VgaText::setCursor(int, int)
1000394f:	83 c4 10             	add    esp,0x10
10003952:	a1 00 00 00 00       	mov    eax,ds:0x0	10003953: R_386_32	term
10003957:	6a 0f                	push   0xf
10003959:	6a 07                	push   0x7
1000395b:	68 ae a9 00 10       	push   0x1000a9ae	1000395c: R_386_32	.text
10003960:	50                   	push   eax
10003961:	e8 fc ff ff ff       	call   10003962 <firstRun(bool)+0x100d>	10003962: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003966:	83 c4 10             	add    esp,0x10
10003969:	a1 00 00 00 00       	mov    eax,ds:0x0	1000396a: R_386_32	term
1000396e:	83 ec 04             	sub    esp,0x4
10003971:	6a 18                	push   0x18
10003973:	6a 11                	push   0x11
10003975:	50                   	push   eax
10003976:	e8 fc ff ff ff       	call   10003977 <firstRun(bool)+0x1022>	10003977: R_386_PC32	VgaText::setCursor(int, int)
1000397b:	83 c4 10             	add    esp,0x10
1000397e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000397f: R_386_32	term
10003983:	6a 0b                	push   0xb
10003985:	6a 03                	push   0x3
10003987:	68 c2 a9 00 10       	push   0x1000a9c2	10003988: R_386_32	.text
1000398c:	50                   	push   eax
1000398d:	e8 fc ff ff ff       	call   1000398e <firstRun(bool)+0x1039>	1000398e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003992:	83 c4 10             	add    esp,0x10
10003995:	a1 00 00 00 00       	mov    eax,ds:0x0	10003996: R_386_32	term
1000399a:	83 ec 04             	sub    esp,0x4
1000399d:	6a 08                	push   0x8
1000399f:	6a 1a                	push   0x1a
100039a1:	50                   	push   eax
100039a2:	e8 fc ff ff ff       	call   100039a3 <firstRun(bool)+0x104e>	100039a3: R_386_PC32	VgaText::setCursor(int, int)
100039a7:	83 c4 10             	add    esp,0x10
100039aa:	a1 00 00 00 00       	mov    eax,ds:0x0	100039ab: R_386_32	term
100039af:	83 ec 08             	sub    esp,0x8
100039b2:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100039b8:	52                   	push   edx
100039b9:	50                   	push   eax
100039ba:	e8 fc ff ff ff       	call   100039bb <firstRun(bool)+0x1066>	100039bb: R_386_PC32	VgaText::puts(char const*)
100039bf:	83 c4 10             	add    esp,0x10
100039c2:	a1 00 00 00 00       	mov    eax,ds:0x0	100039c3: R_386_32	term
100039c7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100039ca:	83 c2 1a             	add    edx,0x1a
100039cd:	83 ec 04             	sub    esp,0x4
100039d0:	6a 08                	push   0x8
100039d2:	52                   	push   edx
100039d3:	50                   	push   eax
100039d4:	e8 fc ff ff ff       	call   100039d5 <firstRun(bool)+0x1080>	100039d5: R_386_PC32	VgaText::setCursor(int, int)
100039d9:	83 c4 10             	add    esp,0x10
100039dc:	a1 00 00 00 00       	mov    eax,ds:0x0	100039dd: R_386_32	term
100039e1:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
100039e7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100039ea:	01 ca                	add    edx,ecx
100039ec:	8a 12                	mov    dl,BYTE PTR [edx]
100039ee:	0f be d2             	movsx  edx,dl
100039f1:	6a 00                	push   0x0
100039f3:	6a 0f                	push   0xf
100039f5:	52                   	push   edx
100039f6:	50                   	push   eax
100039f7:	e8 fc ff ff ff       	call   100039f8 <firstRun(bool)+0x10a3>	100039f8: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100039fc:	83 c4 10             	add    esp,0x10
100039ff:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
10003a05:	0f be c0             	movsx  eax,al
10003a08:	8d 50 d0             	lea    edx,[eax-0x30]
10003a0b:	89 d0                	mov    eax,edx
10003a0d:	c1 e0 02             	shl    eax,0x2
10003a10:	01 d0                	add    eax,edx
10003a12:	01 c0                	add    eax,eax
10003a14:	89 c2                	mov    edx,eax
10003a16:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
10003a1c:	0f be c0             	movsx  eax,al
10003a1f:	83 e8 30             	sub    eax,0x30
10003a22:	01 d0                	add    eax,edx
10003a24:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10003a27:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
10003a2a:	b9 0c 00 00 00       	mov    ecx,0xc
10003a2f:	99                   	cdq    
10003a30:	f7 f9                	idiv   ecx
10003a32:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
10003a35:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10003a39:	75 07                	jne    10003a42 <firstRun(bool)+0x10ed>
10003a3b:	c7 45 d0 0c 00 00 00 	mov    DWORD PTR [ebp-0x30],0xc
10003a42:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
10003a48:	0f be c0             	movsx  eax,al
10003a4b:	8d 50 d0             	lea    edx,[eax-0x30]
10003a4e:	89 d0                	mov    eax,edx
10003a50:	c1 e0 02             	shl    eax,0x2
10003a53:	01 d0                	add    eax,edx
10003a55:	01 c0                	add    eax,eax
10003a57:	89 c2                	mov    edx,eax
10003a59:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
10003a5f:	0f be c0             	movsx  eax,al
10003a62:	83 e8 30             	sub    eax,0x30
10003a65:	01 d0                	add    eax,edx
10003a67:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
10003a6a:	83 ec 04             	sub    esp,0x4
10003a6d:	6a 10                	push   0x10
10003a6f:	6a 00                	push   0x0
10003a71:	8d 85 b6 fe ff ff    	lea    eax,[ebp-0x14a]
10003a77:	50                   	push   eax
10003a78:	e8 fc ff ff ff       	call   10003a79 <firstRun(bool)+0x1124>	10003a79: R_386_PC32	memset
10003a7d:	83 c4 10             	add    esp,0x10
10003a80:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [ebp-0x54],0x0
10003a87:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a8a:	8d 50 01             	lea    edx,[eax+0x1]
10003a8d:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a90:	c6 84 05 b6 fe ff ff 28 	mov    BYTE PTR [ebp+eax*1-0x14a],0x28
10003a98:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
10003a9b:	b8 67 66 66 66       	mov    eax,0x66666667
10003aa0:	f7 e9                	imul   ecx
10003aa2:	c1 fa 02             	sar    edx,0x2
10003aa5:	89 c8                	mov    eax,ecx
10003aa7:	c1 f8 1f             	sar    eax,0x1f
10003aaa:	29 c2                	sub    edx,eax
10003aac:	89 d0                	mov    eax,edx
10003aae:	8d 48 30             	lea    ecx,[eax+0x30]
10003ab1:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003ab4:	8d 50 01             	lea    edx,[eax+0x1]
10003ab7:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003aba:	88 ca                	mov    dl,cl
10003abc:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003ac3:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
10003ac6:	b8 67 66 66 66       	mov    eax,0x66666667
10003acb:	f7 e9                	imul   ecx
10003acd:	c1 fa 02             	sar    edx,0x2
10003ad0:	89 c8                	mov    eax,ecx
10003ad2:	c1 f8 1f             	sar    eax,0x1f
10003ad5:	29 c2                	sub    edx,eax
10003ad7:	89 d0                	mov    eax,edx
10003ad9:	c1 e0 02             	shl    eax,0x2
10003adc:	01 d0                	add    eax,edx
10003ade:	01 c0                	add    eax,eax
10003ae0:	29 c1                	sub    ecx,eax
10003ae2:	89 ca                	mov    edx,ecx
10003ae4:	88 d0                	mov    al,dl
10003ae6:	8d 48 30             	lea    ecx,[eax+0x30]
10003ae9:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003aec:	8d 50 01             	lea    edx,[eax+0x1]
10003aef:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003af2:	88 ca                	mov    dl,cl
10003af4:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003afb:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003afe:	8d 50 01             	lea    edx,[eax+0x1]
10003b01:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b04:	c6 84 05 b6 fe ff ff 3a 	mov    BYTE PTR [ebp+eax*1-0x14a],0x3a
10003b0c:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10003b0f:	b8 67 66 66 66       	mov    eax,0x66666667
10003b14:	f7 e9                	imul   ecx
10003b16:	c1 fa 02             	sar    edx,0x2
10003b19:	89 c8                	mov    eax,ecx
10003b1b:	c1 f8 1f             	sar    eax,0x1f
10003b1e:	29 c2                	sub    edx,eax
10003b20:	89 d0                	mov    eax,edx
10003b22:	8d 48 30             	lea    ecx,[eax+0x30]
10003b25:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b28:	8d 50 01             	lea    edx,[eax+0x1]
10003b2b:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b2e:	88 ca                	mov    dl,cl
10003b30:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003b37:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10003b3a:	b8 67 66 66 66       	mov    eax,0x66666667
10003b3f:	f7 e9                	imul   ecx
10003b41:	c1 fa 02             	sar    edx,0x2
10003b44:	89 c8                	mov    eax,ecx
10003b46:	c1 f8 1f             	sar    eax,0x1f
10003b49:	29 c2                	sub    edx,eax
10003b4b:	89 d0                	mov    eax,edx
10003b4d:	c1 e0 02             	shl    eax,0x2
10003b50:	01 d0                	add    eax,edx
10003b52:	01 c0                	add    eax,eax
10003b54:	29 c1                	sub    ecx,eax
10003b56:	89 ca                	mov    edx,ecx
10003b58:	88 d0                	mov    al,dl
10003b5a:	8d 48 30             	lea    ecx,[eax+0x30]
10003b5d:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b60:	8d 50 01             	lea    edx,[eax+0x1]
10003b63:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b66:	88 ca                	mov    dl,cl
10003b68:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003b6f:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b72:	8d 50 01             	lea    edx,[eax+0x1]
10003b75:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b78:	c6 84 05 b6 fe ff ff 20 	mov    BYTE PTR [ebp+eax*1-0x14a],0x20
10003b80:	83 7d b4 0b          	cmp    DWORD PTR [ebp-0x4c],0xb
10003b84:	7e 04                	jle    10003b8a <firstRun(bool)+0x1235>
10003b86:	b2 50                	mov    dl,0x50
10003b88:	eb 02                	jmp    10003b8c <firstRun(bool)+0x1237>
10003b8a:	b2 41                	mov    dl,0x41
10003b8c:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b8f:	8d 48 01             	lea    ecx,[eax+0x1]
10003b92:	89 4d ac             	mov    DWORD PTR [ebp-0x54],ecx
10003b95:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003b9c:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b9f:	8d 50 01             	lea    edx,[eax+0x1]
10003ba2:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003ba5:	c6 84 05 b6 fe ff ff 4d 	mov    BYTE PTR [ebp+eax*1-0x14a],0x4d
10003bad:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003bb0:	8d 50 01             	lea    edx,[eax+0x1]
10003bb3:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003bb6:	c6 84 05 b6 fe ff ff 29 	mov    BYTE PTR [ebp+eax*1-0x14a],0x29
10003bbe:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10003bc0: R_386_32	term
10003bc4:	83 ec 0c             	sub    esp,0xc
10003bc7:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003bcd:	50                   	push   eax
10003bce:	e8 fc ff ff ff       	call   10003bcf <firstRun(bool)+0x127a>	10003bcf: R_386_PC32	strlen
10003bd3:	83 c4 10             	add    esp,0x10
10003bd6:	83 c0 1e             	add    eax,0x1e
10003bd9:	83 ec 04             	sub    esp,0x4
10003bdc:	6a 08                	push   0x8
10003bde:	50                   	push   eax
10003bdf:	53                   	push   ebx
10003be0:	e8 fc ff ff ff       	call   10003be1 <firstRun(bool)+0x128c>	10003be1: R_386_PC32	VgaText::setCursor(int, int)
10003be5:	83 c4 10             	add    esp,0x10
10003be8:	a1 00 00 00 00       	mov    eax,ds:0x0	10003be9: R_386_32	term
10003bed:	83 ec 08             	sub    esp,0x8
10003bf0:	8d 95 b6 fe ff ff    	lea    edx,[ebp-0x14a]
10003bf6:	52                   	push   edx
10003bf7:	50                   	push   eax
10003bf8:	e8 fc ff ff ff       	call   10003bf9 <firstRun(bool)+0x12a4>	10003bf9: R_386_PC32	VgaText::puts(char const*)
10003bfd:	83 c4 10             	add    esp,0x10
10003c00:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c01: R_386_32	term
10003c05:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003c08:	83 c2 1a             	add    edx,0x1a
10003c0b:	83 ec 04             	sub    esp,0x4
10003c0e:	6a 08                	push   0x8
10003c10:	52                   	push   edx
10003c11:	50                   	push   eax
10003c12:	e8 fc ff ff ff       	call   10003c13 <firstRun(bool)+0x12be>	10003c13: R_386_PC32	VgaText::setCursor(int, int)
10003c17:	83 c4 10             	add    esp,0x10
10003c1a:	a0 00 00 00 00       	mov    al,ds:0x0	10003c1b: R_386_32	installKey
10003c1f:	84 c0                	test   al,al
10003c21:	0f 94 c0             	sete   al
10003c24:	84 c0                	test   al,al
10003c26:	74 02                	je     10003c2a <firstRun(bool)+0x12d5>
10003c28:	eb f0                	jmp    10003c1a <firstRun(bool)+0x12c5>
10003c2a:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c2b: R_386_32	term
10003c2f:	05 82 00 00 00       	add    eax,0x82
10003c34:	83 ec 04             	sub    esp,0x4
10003c37:	6a 10                	push   0x10
10003c39:	6a 00                	push   0x0
10003c3b:	50                   	push   eax
10003c3c:	e8 fc ff ff ff       	call   10003c3d <firstRun(bool)+0x12e8>	10003c3d: R_386_PC32	memset
10003c41:	83 c4 10             	add    esp,0x10
10003c44:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c45: R_386_32	term
10003c49:	05 02 01 00 00       	add    eax,0x102
10003c4e:	83 ec 04             	sub    esp,0x4
10003c51:	6a 10                	push   0x10
10003c53:	6a 00                	push   0x0
10003c55:	50                   	push   eax
10003c56:	e8 fc ff ff ff       	call   10003c57 <firstRun(bool)+0x1302>	10003c57: R_386_PC32	memset
10003c5b:	83 c4 10             	add    esp,0x10
10003c5e:	a0 00 00 00 00       	mov    al,ds:0x0	10003c5f: R_386_32	installKey
10003c63:	3c 03                	cmp    al,0x3
10003c65:	74 09                	je     10003c70 <firstRun(bool)+0x131b>
10003c67:	a0 00 00 00 00       	mov    al,ds:0x0	10003c68: R_386_32	installKey
10003c6c:	3c 08                	cmp    al,0x8
10003c6e:	75 04                	jne    10003c74 <firstRun(bool)+0x131f>
10003c70:	b0 01                	mov    al,0x1
10003c72:	eb 02                	jmp    10003c76 <firstRun(bool)+0x1321>
10003c74:	b0 00                	mov    al,0x0
10003c76:	84 c0                	test   al,al
10003c78:	74 58                	je     10003cd2 <firstRun(bool)+0x137d>
10003c7a:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
10003c7d:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10003c81:	75 16                	jne    10003c99 <firstRun(bool)+0x1344>
10003c83:	83 ec 0c             	sub    esp,0xc
10003c86:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003c8c:	50                   	push   eax
10003c8d:	e8 fc ff ff ff       	call   10003c8e <firstRun(bool)+0x1339>	10003c8e: R_386_PC32	strlen
10003c92:	83 c4 10             	add    esp,0x10
10003c95:	48                   	dec    eax
10003c96:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10003c99:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003c9f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003ca2:	01 d0                	add    eax,edx
10003ca4:	8a 00                	mov    al,BYTE PTR [eax]
10003ca6:	3c 20                	cmp    al,0x20
10003ca8:	74 d0                	je     10003c7a <firstRun(bool)+0x1325>
10003caa:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003cb0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003cb3:	01 d0                	add    eax,edx
10003cb5:	8a 00                	mov    al,BYTE PTR [eax]
10003cb7:	3c 2f                	cmp    al,0x2f
10003cb9:	74 bf                	je     10003c7a <firstRun(bool)+0x1325>
10003cbb:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003cc1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003cc4:	01 d0                	add    eax,edx
10003cc6:	8a 00                	mov    al,BYTE PTR [eax]
10003cc8:	3c 3a                	cmp    al,0x3a
10003cca:	0f 85 5e 04 00 00    	jne    1000412e <firstRun(bool)+0x17d9>
10003cd0:	eb a8                	jmp    10003c7a <firstRun(bool)+0x1325>
10003cd2:	a0 00 00 00 00       	mov    al,ds:0x0	10003cd3: R_386_32	installKey
10003cd7:	3c 2f                	cmp    al,0x2f
10003cd9:	7e 09                	jle    10003ce4 <firstRun(bool)+0x138f>
10003cdb:	a0 00 00 00 00       	mov    al,ds:0x0	10003cdc: R_386_32	installKey
10003ce0:	3c 39                	cmp    al,0x39
10003ce2:	7e 12                	jle    10003cf6 <firstRun(bool)+0x13a1>
10003ce4:	a0 00 00 00 00       	mov    al,ds:0x0	10003ce5: R_386_32	installKey
10003ce9:	3c 20                	cmp    al,0x20
10003ceb:	74 09                	je     10003cf6 <firstRun(bool)+0x13a1>
10003ced:	a0 00 00 00 00       	mov    al,ds:0x0	10003cee: R_386_32	installKey
10003cf2:	3c 04                	cmp    al,0x4
10003cf4:	75 04                	jne    10003cfa <firstRun(bool)+0x13a5>
10003cf6:	b0 01                	mov    al,0x1
10003cf8:	eb 02                	jmp    10003cfc <firstRun(bool)+0x13a7>
10003cfa:	b0 00                	mov    al,0x0
10003cfc:	84 c0                	test   al,al
10003cfe:	0f 84 cf 01 00 00    	je     10003ed3 <firstRun(bool)+0x157e>
10003d04:	a0 00 00 00 00       	mov    al,ds:0x0	10003d05: R_386_32	installKey
10003d09:	3c 2f                	cmp    al,0x2f
10003d0b:	7e 0d                	jle    10003d1a <firstRun(bool)+0x13c5>
10003d0d:	a0 00 00 00 00       	mov    al,ds:0x0	10003d0e: R_386_32	installKey
10003d12:	3c 39                	cmp    al,0x39
10003d14:	7f 04                	jg     10003d1a <firstRun(bool)+0x13c5>
10003d16:	b0 01                	mov    al,0x1
10003d18:	eb 02                	jmp    10003d1c <firstRun(bool)+0x13c7>
10003d1a:	b0 00                	mov    al,0x0
10003d1c:	84 c0                	test   al,al
10003d1e:	0f 84 51 01 00 00    	je     10003e75 <firstRun(bool)+0x1520>
10003d24:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10003d28:	75 0d                	jne    10003d37 <firstRun(bool)+0x13e2>
10003d2a:	a0 00 00 00 00       	mov    al,ds:0x0	10003d2b: R_386_32	installKey
10003d2f:	3c 33                	cmp    al,0x33
10003d31:	7e 04                	jle    10003d37 <firstRun(bool)+0x13e2>
10003d33:	b0 01                	mov    al,0x1
10003d35:	eb 02                	jmp    10003d39 <firstRun(bool)+0x13e4>
10003d37:	b0 00                	mov    al,0x0
10003d39:	84 c0                	test   al,al
10003d3b:	74 28                	je     10003d65 <firstRun(bool)+0x1410>
10003d3d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d40:	8d 50 01             	lea    edx,[eax+0x1]
10003d43:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003d46:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003d4e:	a0 00 00 00 00       	mov    al,ds:0x0	10003d4f: R_386_32	installKey
10003d53:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003d59:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003d5c:	01 ca                	add    edx,ecx
10003d5e:	88 02                	mov    BYTE PTR [edx],al
10003d60:	e9 10 01 00 00       	jmp    10003e75 <firstRun(bool)+0x1520>
10003d65:	83 7d e4 03          	cmp    DWORD PTR [ebp-0x1c],0x3
10003d69:	75 0d                	jne    10003d78 <firstRun(bool)+0x1423>
10003d6b:	a0 00 00 00 00       	mov    al,ds:0x0	10003d6c: R_386_32	installKey
10003d70:	3c 31                	cmp    al,0x31
10003d72:	7e 04                	jle    10003d78 <firstRun(bool)+0x1423>
10003d74:	b0 01                	mov    al,0x1
10003d76:	eb 02                	jmp    10003d7a <firstRun(bool)+0x1425>
10003d78:	b0 00                	mov    al,0x0
10003d7a:	84 c0                	test   al,al
10003d7c:	74 28                	je     10003da6 <firstRun(bool)+0x1451>
10003d7e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d81:	8d 50 01             	lea    edx,[eax+0x1]
10003d84:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003d87:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003d8f:	a0 00 00 00 00       	mov    al,ds:0x0	10003d90: R_386_32	installKey
10003d94:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003d9a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003d9d:	01 ca                	add    edx,ecx
10003d9f:	88 02                	mov    BYTE PTR [edx],al
10003da1:	e9 cf 00 00 00       	jmp    10003e75 <firstRun(bool)+0x1520>
10003da6:	83 7d e4 0b          	cmp    DWORD PTR [ebp-0x1c],0xb
10003daa:	75 0d                	jne    10003db9 <firstRun(bool)+0x1464>
10003dac:	a0 00 00 00 00       	mov    al,ds:0x0	10003dad: R_386_32	installKey
10003db1:	3c 32                	cmp    al,0x32
10003db3:	7e 04                	jle    10003db9 <firstRun(bool)+0x1464>
10003db5:	b0 01                	mov    al,0x1
10003db7:	eb 02                	jmp    10003dbb <firstRun(bool)+0x1466>
10003db9:	b0 00                	mov    al,0x0
10003dbb:	84 c0                	test   al,al
10003dbd:	74 28                	je     10003de7 <firstRun(bool)+0x1492>
10003dbf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003dc2:	8d 50 01             	lea    edx,[eax+0x1]
10003dc5:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003dc8:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003dd0:	a0 00 00 00 00       	mov    al,ds:0x0	10003dd1: R_386_32	installKey
10003dd5:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003ddb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003dde:	01 ca                	add    edx,ecx
10003de0:	88 02                	mov    BYTE PTR [edx],al
10003de2:	e9 8e 00 00 00       	jmp    10003e75 <firstRun(bool)+0x1520>
10003de7:	83 7d e4 0e          	cmp    DWORD PTR [ebp-0x1c],0xe
10003deb:	75 0d                	jne    10003dfa <firstRun(bool)+0x14a5>
10003ded:	a0 00 00 00 00       	mov    al,ds:0x0	10003dee: R_386_32	installKey
10003df2:	3c 35                	cmp    al,0x35
10003df4:	7e 04                	jle    10003dfa <firstRun(bool)+0x14a5>
10003df6:	b0 01                	mov    al,0x1
10003df8:	eb 02                	jmp    10003dfc <firstRun(bool)+0x14a7>
10003dfa:	b0 00                	mov    al,0x0
10003dfc:	84 c0                	test   al,al
10003dfe:	74 25                	je     10003e25 <firstRun(bool)+0x14d0>
10003e00:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e03:	8d 50 01             	lea    edx,[eax+0x1]
10003e06:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003e09:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003e11:	a0 00 00 00 00       	mov    al,ds:0x0	10003e12: R_386_32	installKey
10003e16:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003e1c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003e1f:	01 ca                	add    edx,ecx
10003e21:	88 02                	mov    BYTE PTR [edx],al
10003e23:	eb 50                	jmp    10003e75 <firstRun(bool)+0x1520>
10003e25:	83 7d e4 11          	cmp    DWORD PTR [ebp-0x1c],0x11
10003e29:	75 0d                	jne    10003e38 <firstRun(bool)+0x14e3>
10003e2b:	a0 00 00 00 00       	mov    al,ds:0x0	10003e2c: R_386_32	installKey
10003e30:	3c 35                	cmp    al,0x35
10003e32:	7e 04                	jle    10003e38 <firstRun(bool)+0x14e3>
10003e34:	b0 01                	mov    al,0x1
10003e36:	eb 02                	jmp    10003e3a <firstRun(bool)+0x14e5>
10003e38:	b0 00                	mov    al,0x0
10003e3a:	84 c0                	test   al,al
10003e3c:	74 25                	je     10003e63 <firstRun(bool)+0x150e>
10003e3e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e41:	8d 50 01             	lea    edx,[eax+0x1]
10003e44:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003e47:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003e4f:	a0 00 00 00 00       	mov    al,ds:0x0	10003e50: R_386_32	installKey
10003e54:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003e5a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003e5d:	01 ca                	add    edx,ecx
10003e5f:	88 02                	mov    BYTE PTR [edx],al
10003e61:	eb 12                	jmp    10003e75 <firstRun(bool)+0x1520>
10003e63:	a0 00 00 00 00       	mov    al,ds:0x0	10003e64: R_386_32	installKey
10003e68:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003e6e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003e71:	01 ca                	add    edx,ecx
10003e73:	88 02                	mov    BYTE PTR [edx],al
10003e75:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10003e78:	83 ec 0c             	sub    esp,0xc
10003e7b:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003e81:	50                   	push   eax
10003e82:	e8 fc ff ff ff       	call   10003e83 <firstRun(bool)+0x152e>	10003e83: R_386_PC32	strlen
10003e87:	83 c4 10             	add    esp,0x10
10003e8a:	89 c2                	mov    edx,eax
10003e8c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e8f:	39 c2                	cmp    edx,eax
10003e91:	77 07                	ja     10003e9a <firstRun(bool)+0x1545>
10003e93:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003e9a:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003ea0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003ea3:	01 d0                	add    eax,edx
10003ea5:	8a 00                	mov    al,BYTE PTR [eax]
10003ea7:	3c 20                	cmp    al,0x20
10003ea9:	74 ca                	je     10003e75 <firstRun(bool)+0x1520>
10003eab:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003eb1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003eb4:	01 d0                	add    eax,edx
10003eb6:	8a 00                	mov    al,BYTE PTR [eax]
10003eb8:	3c 2f                	cmp    al,0x2f
10003eba:	74 b9                	je     10003e75 <firstRun(bool)+0x1520>
10003ebc:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003ec2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003ec5:	01 d0                	add    eax,edx
10003ec7:	8a 00                	mov    al,BYTE PTR [eax]
10003ec9:	3c 3a                	cmp    al,0x3a
10003ecb:	0f 85 5d 02 00 00    	jne    1000412e <firstRun(bool)+0x17d9>
10003ed1:	eb a2                	jmp    10003e75 <firstRun(bool)+0x1520>
10003ed3:	a0 00 00 00 00       	mov    al,ds:0x0	10003ed4: R_386_32	installKey
10003ed8:	3c 0a                	cmp    al,0xa
10003eda:	0f 94 c0             	sete   al
10003edd:	84 c0                	test   al,al
10003edf:	0f 84 37 02 00 00    	je     1000411c <firstRun(bool)+0x17c7>
10003ee5:	8a 85 40 ff ff ff    	mov    al,BYTE PTR [ebp-0xc0]
10003eeb:	0f be c0             	movsx  eax,al
10003eee:	8d 50 d0             	lea    edx,[eax-0x30]
10003ef1:	89 d0                	mov    eax,edx
10003ef3:	c1 e0 02             	shl    eax,0x2
10003ef6:	01 d0                	add    eax,edx
10003ef8:	01 c0                	add    eax,eax
10003efa:	89 c2                	mov    edx,eax
10003efc:	8a 85 41 ff ff ff    	mov    al,BYTE PTR [ebp-0xbf]
10003f02:	0f be c0             	movsx  eax,al
10003f05:	83 e8 30             	sub    eax,0x30
10003f08:	01 d0                	add    eax,edx
10003f0a:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10003f0d:	8a 85 43 ff ff ff    	mov    al,BYTE PTR [ebp-0xbd]
10003f13:	0f be c0             	movsx  eax,al
10003f16:	8d 50 d0             	lea    edx,[eax-0x30]
10003f19:	89 d0                	mov    eax,edx
10003f1b:	c1 e0 02             	shl    eax,0x2
10003f1e:	01 d0                	add    eax,edx
10003f20:	01 c0                	add    eax,eax
10003f22:	89 c2                	mov    edx,eax
10003f24:	8a 85 44 ff ff ff    	mov    al,BYTE PTR [ebp-0xbc]
10003f2a:	0f be c0             	movsx  eax,al
10003f2d:	83 e8 30             	sub    eax,0x30
10003f30:	01 d0                	add    eax,edx
10003f32:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10003f35:	8a 85 46 ff ff ff    	mov    al,BYTE PTR [ebp-0xba]
10003f3b:	0f be c0             	movsx  eax,al
10003f3e:	8d 50 d0             	lea    edx,[eax-0x30]
10003f41:	89 d0                	mov    eax,edx
10003f43:	c1 e0 02             	shl    eax,0x2
10003f46:	01 d0                	add    eax,edx
10003f48:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f4f:	01 d0                	add    eax,edx
10003f51:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f58:	01 d0                	add    eax,edx
10003f5a:	c1 e0 03             	shl    eax,0x3
10003f5d:	89 c1                	mov    ecx,eax
10003f5f:	8a 85 47 ff ff ff    	mov    al,BYTE PTR [ebp-0xb9]
10003f65:	0f be c0             	movsx  eax,al
10003f68:	8d 50 d0             	lea    edx,[eax-0x30]
10003f6b:	89 d0                	mov    eax,edx
10003f6d:	c1 e0 02             	shl    eax,0x2
10003f70:	01 d0                	add    eax,edx
10003f72:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f79:	01 d0                	add    eax,edx
10003f7b:	c1 e0 02             	shl    eax,0x2
10003f7e:	01 c1                	add    ecx,eax
10003f80:	8a 85 48 ff ff ff    	mov    al,BYTE PTR [ebp-0xb8]
10003f86:	0f be c0             	movsx  eax,al
10003f89:	8d 50 d0             	lea    edx,[eax-0x30]
10003f8c:	89 d0                	mov    eax,edx
10003f8e:	c1 e0 02             	shl    eax,0x2
10003f91:	01 d0                	add    eax,edx
10003f93:	01 c0                	add    eax,eax
10003f95:	8d 14 01             	lea    edx,[ecx+eax*1]
10003f98:	8a 85 49 ff ff ff    	mov    al,BYTE PTR [ebp-0xb7]
10003f9e:	0f be c0             	movsx  eax,al
10003fa1:	83 e8 30             	sub    eax,0x30
10003fa4:	01 d0                	add    eax,edx
10003fa6:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10003fa9:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
10003faf:	0f be c0             	movsx  eax,al
10003fb2:	8d 50 d0             	lea    edx,[eax-0x30]
10003fb5:	89 d0                	mov    eax,edx
10003fb7:	c1 e0 02             	shl    eax,0x2
10003fba:	01 d0                	add    eax,edx
10003fbc:	01 c0                	add    eax,eax
10003fbe:	89 c2                	mov    edx,eax
10003fc0:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
10003fc6:	0f be c0             	movsx  eax,al
10003fc9:	83 e8 30             	sub    eax,0x30
10003fcc:	01 d0                	add    eax,edx
10003fce:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10003fd1:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
10003fd7:	0f be c0             	movsx  eax,al
10003fda:	8d 50 d0             	lea    edx,[eax-0x30]
10003fdd:	89 d0                	mov    eax,edx
10003fdf:	c1 e0 02             	shl    eax,0x2
10003fe2:	01 d0                	add    eax,edx
10003fe4:	01 c0                	add    eax,eax
10003fe6:	89 c2                	mov    edx,eax
10003fe8:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
10003fee:	0f be c0             	movsx  eax,al
10003ff1:	83 e8 30             	sub    eax,0x30
10003ff4:	01 d0                	add    eax,edx
10003ff6:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10003ff9:	8a 85 51 ff ff ff    	mov    al,BYTE PTR [ebp-0xaf]
10003fff:	0f be c0             	movsx  eax,al
10004002:	8d 50 d0             	lea    edx,[eax-0x30]
10004005:	89 d0                	mov    eax,edx
10004007:	c1 e0 02             	shl    eax,0x2
1000400a:	01 d0                	add    eax,edx
1000400c:	01 c0                	add    eax,eax
1000400e:	89 c2                	mov    edx,eax
10004010:	8a 85 52 ff ff ff    	mov    al,BYTE PTR [ebp-0xae]
10004016:	0f be c0             	movsx  eax,al
10004019:	83 e8 30             	sub    eax,0x30
1000401c:	01 d0                	add    eax,edx
1000401e:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
10004021:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10004024:	83 e0 03             	and    eax,0x3
10004027:	85 c0                	test   eax,eax
10004029:	75 1f                	jne    1000404a <firstRun(bool)+0x16f5>
1000402b:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
1000402e:	b9 19 00 00 00       	mov    ecx,0x19
10004033:	99                   	cdq    
10004034:	f7 f9                	idiv   ecx
10004036:	89 d0                	mov    eax,edx
10004038:	85 c0                	test   eax,eax
1000403a:	75 0a                	jne    10004046 <firstRun(bool)+0x16f1>
1000403c:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
1000403f:	83 e0 0f             	and    eax,0xf
10004042:	85 c0                	test   eax,eax
10004044:	75 04                	jne    1000404a <firstRun(bool)+0x16f5>
10004046:	b0 01                	mov    al,0x1
10004048:	eb 02                	jmp    1000404c <firstRun(bool)+0x16f7>
1000404a:	b0 00                	mov    al,0x0
1000404c:	88 45 93             	mov    BYTE PTR [ebp-0x6d],al
1000404f:	83 7d a8 1f          	cmp    DWORD PTR [ebp-0x58],0x1f
10004053:	7e 0c                	jle    10004061 <firstRun(bool)+0x170c>
10004055:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000405c:	e9 cd 00 00 00       	jmp    1000412e <firstRun(bool)+0x17d9>
10004061:	83 7d a8 1e          	cmp    DWORD PTR [ebp-0x58],0x1e
10004065:	7e 2a                	jle    10004091 <firstRun(bool)+0x173c>
10004067:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
1000406b:	74 18                	je     10004085 <firstRun(bool)+0x1730>
1000406d:	83 7d a4 04          	cmp    DWORD PTR [ebp-0x5c],0x4
10004071:	74 12                	je     10004085 <firstRun(bool)+0x1730>
10004073:	83 7d a4 06          	cmp    DWORD PTR [ebp-0x5c],0x6
10004077:	74 0c                	je     10004085 <firstRun(bool)+0x1730>
10004079:	83 7d a4 09          	cmp    DWORD PTR [ebp-0x5c],0x9
1000407d:	74 06                	je     10004085 <firstRun(bool)+0x1730>
1000407f:	83 7d a4 0b          	cmp    DWORD PTR [ebp-0x5c],0xb
10004083:	75 0c                	jne    10004091 <firstRun(bool)+0x173c>
10004085:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000408c:	e9 9d 00 00 00       	jmp    1000412e <firstRun(bool)+0x17d9>
10004091:	83 7d a8 1d          	cmp    DWORD PTR [ebp-0x58],0x1d
10004095:	75 19                	jne    100040b0 <firstRun(bool)+0x175b>
10004097:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
1000409b:	75 13                	jne    100040b0 <firstRun(bool)+0x175b>
1000409d:	8a 45 93             	mov    al,BYTE PTR [ebp-0x6d]
100040a0:	83 f0 01             	xor    eax,0x1
100040a3:	84 c0                	test   al,al
100040a5:	74 09                	je     100040b0 <firstRun(bool)+0x175b>
100040a7:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100040ae:	eb 7e                	jmp    1000412e <firstRun(bool)+0x17d9>
100040b0:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
100040b4:	75 09                	jne    100040bf <firstRun(bool)+0x176a>
100040b6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100040bd:	eb 6f                	jmp    1000412e <firstRun(bool)+0x17d9>
100040bf:	83 7d a4 0c          	cmp    DWORD PTR [ebp-0x5c],0xc
100040c3:	7f 06                	jg     100040cb <firstRun(bool)+0x1776>
100040c5:	83 7d a4 00          	cmp    DWORD PTR [ebp-0x5c],0x0
100040c9:	75 09                	jne    100040d4 <firstRun(bool)+0x177f>
100040cb:	c7 45 e4 03 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x3
100040d2:	eb 5a                	jmp    1000412e <firstRun(bool)+0x17d9>
100040d4:	81 7d a0 b7 0b 00 00 	cmp    DWORD PTR [ebp-0x60],0xbb7
100040db:	7f 09                	jg     100040e6 <firstRun(bool)+0x1791>
100040dd:	81 7d a0 b1 07 00 00 	cmp    DWORD PTR [ebp-0x60],0x7b1
100040e4:	7f 09                	jg     100040ef <firstRun(bool)+0x179a>
100040e6:	c7 45 e4 06 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x6
100040ed:	eb 3f                	jmp    1000412e <firstRun(bool)+0x17d9>
100040ef:	83 7d 9c 17          	cmp    DWORD PTR [ebp-0x64],0x17
100040f3:	7e 09                	jle    100040fe <firstRun(bool)+0x17a9>
100040f5:	c7 45 e4 0b 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xb
100040fc:	eb 30                	jmp    1000412e <firstRun(bool)+0x17d9>
100040fe:	83 7d 98 3b          	cmp    DWORD PTR [ebp-0x68],0x3b
10004102:	7e 09                	jle    1000410d <firstRun(bool)+0x17b8>
10004104:	c7 45 e4 0e 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xe
1000410b:	eb 21                	jmp    1000412e <firstRun(bool)+0x17d9>
1000410d:	83 7d 94 3b          	cmp    DWORD PTR [ebp-0x6c],0x3b
10004111:	7e 37                	jle    1000414a <firstRun(bool)+0x17f5>
10004113:	c7 45 e4 11 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x11
1000411a:	eb 12                	jmp    1000412e <firstRun(bool)+0x17d9>
1000411c:	a0 00 00 00 00       	mov    al,ds:0x0	1000411d: R_386_32	installKey
10004121:	3c 1b                	cmp    al,0x1b
10004123:	0f 94 c0             	sete   al
10004126:	84 c0                	test   al,al
10004128:	0f 85 9e e9 ff ff    	jne    10002acc <firstRun(bool)+0x177>
1000412e:	83 ec 0c             	sub    esp,0xc
10004131:	68 4c 04 00 00       	push   0x44c
10004136:	e8 fc ff ff ff       	call   10004137 <firstRun(bool)+0x17e2>	10004137: R_386_PC32	milliTenthSleep(unsigned int)
1000413b:	83 c4 10             	add    esp,0x10
1000413e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004140: R_386_32	installKey
10004145:	e9 4b f8 ff ff       	jmp    10003995 <firstRun(bool)+0x1040>
1000414a:	90                   	nop
1000414b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000414d: R_386_32	installKey
10004152:	83 ec 0c             	sub    esp,0xc
10004155:	68 a0 0f 00 00       	push   0xfa0
1000415a:	e8 fc ff ff ff       	call   1000415b <firstRun(bool)+0x1806>	1000415b: R_386_PC32	milliTenthSleep(unsigned int)
1000415f:	83 c4 10             	add    esp,0x10
10004162:	eb 01                	jmp    10004165 <firstRun(bool)+0x1810>
10004164:	90                   	nop
10004165:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004167: R_386_32	installKey
1000416c:	e8 fc ff ff ff       	call   1000416d <firstRun(bool)+0x1818>	1000416d: R_386_PC32	drawBootScreen()
10004171:	83 ec 0c             	sub    esp,0xc
10004174:	68 4b a9 00 10       	push   0x1000a94b	10004175: R_386_32	.text
10004179:	6a 14                	push   0x14
1000417b:	6a 3c                	push   0x3c
1000417d:	6a 01                	push   0x1
1000417f:	6a 12                	push   0x12
10004181:	e8 fc ff ff ff       	call   10004182 <firstRun(bool)+0x182d>	10004182: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004186:	83 c4 20             	add    esp,0x20
10004189:	a1 00 00 00 00       	mov    eax,ds:0x0	1000418a: R_386_32	term
1000418e:	83 ec 04             	sub    esp,0x4
10004191:	6a 04                	push   0x4
10004193:	6a 14                	push   0x14
10004195:	50                   	push   eax
10004196:	e8 fc ff ff ff       	call   10004197 <firstRun(bool)+0x1842>	10004197: R_386_PC32	VgaText::setCursor(int, int)
1000419b:	83 c4 10             	add    esp,0x10
1000419e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000419f: R_386_32	term
100041a3:	83 ec 08             	sub    esp,0x8
100041a6:	68 d8 a9 00 10       	push   0x1000a9d8	100041a7: R_386_32	.text
100041ab:	50                   	push   eax
100041ac:	e8 fc ff ff ff       	call   100041ad <firstRun(bool)+0x1858>	100041ad: R_386_PC32	VgaText::puts(char const*)
100041b1:	83 c4 10             	add    esp,0x10
100041b4:	a1 00 00 00 00       	mov    eax,ds:0x0	100041b5: R_386_32	term
100041b9:	83 ec 04             	sub    esp,0x4
100041bc:	6a 18                	push   0x18
100041be:	6a 11                	push   0x11
100041c0:	50                   	push   eax
100041c1:	e8 fc ff ff ff       	call   100041c2 <firstRun(bool)+0x186d>	100041c2: R_386_PC32	VgaText::setCursor(int, int)
100041c6:	83 c4 10             	add    esp,0x10
100041c9:	a1 00 00 00 00       	mov    eax,ds:0x0	100041ca: R_386_32	term
100041ce:	6a 0b                	push   0xb
100041d0:	6a 03                	push   0x3
100041d2:	68 c2 a9 00 10       	push   0x1000a9c2	100041d3: R_386_32	.text
100041d7:	50                   	push   eax
100041d8:	e8 fc ff ff ff       	call   100041d9 <firstRun(bool)+0x1884>	100041d9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100041dd:	83 c4 10             	add    esp,0x10
100041e0:	e8 fc ff ff ff       	call   100041e1 <firstRun(bool)+0x188c>	100041e1: R_386_PC32	loadTimezoneStrings()
100041e5:	89 45 8c             	mov    DWORD PTR [ebp-0x74],eax
100041e8:	b8 d2 00 00 00       	mov    eax,0xd2
100041ed:	99                   	cdq    
100041ee:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
100041f1:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
100041f4:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
100041fb:	83 7d cc 0d          	cmp    DWORD PTR [ebp-0x34],0xd
100041ff:	7f 32                	jg     10004233 <firstRun(bool)+0x18de>
10004201:	a1 00 00 00 00       	mov    eax,ds:0x0	10004202: R_386_32	term
10004206:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10004209:	83 c2 07             	add    edx,0x7
1000420c:	83 ec 04             	sub    esp,0x4
1000420f:	52                   	push   edx
10004210:	6a 4b                	push   0x4b
10004212:	50                   	push   eax
10004213:	e8 fc ff ff ff       	call   10004214 <firstRun(bool)+0x18bf>	10004214: R_386_PC32	VgaText::setCursor(int, int)
10004218:	83 c4 10             	add    esp,0x10
1000421b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000421c: R_386_32	term
10004220:	83 ec 08             	sub    esp,0x8
10004223:	6a 20                	push   0x20
10004225:	50                   	push   eax
10004226:	e8 fc ff ff ff       	call   10004227 <firstRun(bool)+0x18d2>	10004227: R_386_PC32	VgaText::putchar(char)
1000422b:	83 c4 10             	add    esp,0x10
1000422e:	ff 45 cc             	inc    DWORD PTR [ebp-0x34]
10004231:	eb c8                	jmp    100041fb <firstRun(bool)+0x18a6>
10004233:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
1000423a:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
1000423d:	3b 45 88             	cmp    eax,DWORD PTR [ebp-0x78]
10004240:	7d 48                	jge    1000428a <firstRun(bool)+0x1935>
10004242:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004244: R_386_32	term
10004248:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
1000424b:	8d 58 07             	lea    ebx,[eax+0x7]
1000424e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10004251:	89 d0                	mov    eax,edx
10004253:	01 c0                	add    eax,eax
10004255:	01 d0                	add    eax,edx
10004257:	01 c0                	add    eax,eax
10004259:	01 d0                	add    eax,edx
1000425b:	01 c0                	add    eax,eax
1000425d:	99                   	cdq    
1000425e:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
10004261:	01 d8                	add    eax,ebx
10004263:	83 ec 04             	sub    esp,0x4
10004266:	50                   	push   eax
10004267:	6a 4b                	push   0x4b
10004269:	51                   	push   ecx
1000426a:	e8 fc ff ff ff       	call   1000426b <firstRun(bool)+0x1916>	1000426b: R_386_PC32	VgaText::setCursor(int, int)
1000426f:	83 c4 10             	add    esp,0x10
10004272:	a1 00 00 00 00       	mov    eax,ds:0x0	10004273: R_386_32	term
10004277:	83 ec 08             	sub    esp,0x8
1000427a:	6a db                	push   0xffffffdb
1000427c:	50                   	push   eax
1000427d:	e8 fc ff ff ff       	call   1000427e <firstRun(bool)+0x1929>	1000427e: R_386_PC32	VgaText::putchar(char)
10004282:	83 c4 10             	add    esp,0x10
10004285:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
10004288:	eb b0                	jmp    1000423a <firstRun(bool)+0x18e5>
1000428a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000428b: R_386_32	term
1000428f:	83 ec 04             	sub    esp,0x4
10004292:	6a 06                	push   0x6
10004294:	6a 4b                	push   0x4b
10004296:	50                   	push   eax
10004297:	e8 fc ff ff ff       	call   10004298 <firstRun(bool)+0x1943>	10004298: R_386_PC32	VgaText::setCursor(int, int)
1000429c:	83 c4 10             	add    esp,0x10
1000429f:	a1 00 00 00 00       	mov    eax,ds:0x0	100042a0: R_386_32	term
100042a4:	83 ec 08             	sub    esp,0x8
100042a7:	6a 1e                	push   0x1e
100042a9:	50                   	push   eax
100042aa:	e8 fc ff ff ff       	call   100042ab <firstRun(bool)+0x1956>	100042ab: R_386_PC32	VgaText::putchar(char)
100042af:	83 c4 10             	add    esp,0x10
100042b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100042b3: R_386_32	term
100042b7:	83 ec 04             	sub    esp,0x4
100042ba:	6a 14                	push   0x14
100042bc:	6a 4b                	push   0x4b
100042be:	50                   	push   eax
100042bf:	e8 fc ff ff ff       	call   100042c0 <firstRun(bool)+0x196b>	100042c0: R_386_PC32	VgaText::setCursor(int, int)
100042c4:	83 c4 10             	add    esp,0x10
100042c7:	a1 00 00 00 00       	mov    eax,ds:0x0	100042c8: R_386_32	term
100042cc:	83 ec 08             	sub    esp,0x8
100042cf:	6a 1f                	push   0x1f
100042d1:	50                   	push   eax
100042d2:	e8 fc ff ff ff       	call   100042d3 <firstRun(bool)+0x197e>	100042d3: R_386_PC32	VgaText::putchar(char)
100042d7:	83 c4 10             	add    esp,0x10
100042da:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
100042e1:	83 7d c4 0e          	cmp    DWORD PTR [ebp-0x3c],0xe
100042e5:	7f 7e                	jg     10004365 <firstRun(bool)+0x1a10>
100042e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100042e8: R_386_32	term
100042ec:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
100042ef:	83 c2 06             	add    edx,0x6
100042f2:	83 ec 04             	sub    esp,0x4
100042f5:	52                   	push   edx
100042f6:	6a 14                	push   0x14
100042f8:	50                   	push   eax
100042f9:	e8 fc ff ff ff       	call   100042fa <firstRun(bool)+0x19a5>	100042fa: R_386_PC32	VgaText::setCursor(int, int)
100042fe:	83 c4 10             	add    esp,0x10
10004301:	a1 00 00 00 00       	mov    eax,ds:0x0	10004302: R_386_32	term
10004306:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10004309:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
1000430c:	01 d1                	add    ecx,edx
1000430e:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004310: R_386_32	tzsel
10004314:	39 d1                	cmp    ecx,edx
10004316:	75 07                	jne    1000431f <firstRun(bool)+0x19ca>
10004318:	bb 00 00 00 00       	mov    ebx,0x0
1000431d:	eb 05                	jmp    10004324 <firstRun(bool)+0x19cf>
1000431f:	bb 0f 00 00 00       	mov    ebx,0xf
10004324:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10004327:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
1000432a:	01 d1                	add    ecx,edx
1000432c:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000432e: R_386_32	tzsel
10004332:	39 d1                	cmp    ecx,edx
10004334:	75 07                	jne    1000433d <firstRun(bool)+0x19e8>
10004336:	b9 0f 00 00 00       	mov    ecx,0xf
1000433b:	eb 05                	jmp    10004342 <firstRun(bool)+0x19ed>
1000433d:	b9 00 00 00 00       	mov    ecx,0x0
10004342:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
10004345:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10004348:	01 f2                	add    edx,esi
1000434a:	8b 14 95 00 00 00 00 	mov    edx,DWORD PTR [edx*4+0x0]	1000434d: R_386_32	timezoneStrings
10004351:	53                   	push   ebx
10004352:	51                   	push   ecx
10004353:	52                   	push   edx
10004354:	50                   	push   eax
10004355:	e8 fc ff ff ff       	call   10004356 <firstRun(bool)+0x1a01>	10004356: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000435a:	83 c4 10             	add    esp,0x10
1000435d:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
10004360:	e9 7c ff ff ff       	jmp    100042e1 <firstRun(bool)+0x198c>
10004365:	a0 00 00 00 00       	mov    al,ds:0x0	10004366: R_386_32	installKey
1000436a:	84 c0                	test   al,al
1000436c:	0f 94 c0             	sete   al
1000436f:	84 c0                	test   al,al
10004371:	74 02                	je     10004375 <firstRun(bool)+0x1a20>
10004373:	eb f0                	jmp    10004365 <firstRun(bool)+0x1a10>
10004375:	a1 00 00 00 00       	mov    eax,ds:0x0	10004376: R_386_32	term
1000437a:	05 82 00 00 00       	add    eax,0x82
1000437f:	83 ec 04             	sub    esp,0x4
10004382:	6a 04                	push   0x4
10004384:	6a 00                	push   0x0
10004386:	50                   	push   eax
10004387:	e8 fc ff ff ff       	call   10004388 <firstRun(bool)+0x1a33>	10004388: R_386_PC32	memset
1000438c:	83 c4 10             	add    esp,0x10
1000438f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004390: R_386_32	term
10004394:	05 02 01 00 00       	add    eax,0x102
10004399:	83 ec 04             	sub    esp,0x4
1000439c:	6a 04                	push   0x4
1000439e:	6a 00                	push   0x0
100043a0:	50                   	push   eax
100043a1:	e8 fc ff ff ff       	call   100043a2 <firstRun(bool)+0x1a4d>	100043a2: R_386_PC32	memset
100043a6:	83 c4 10             	add    esp,0x10
100043a9:	a0 00 00 00 00       	mov    al,ds:0x0	100043aa: R_386_32	installKey
100043ae:	3c 01                	cmp    al,0x1
100043b0:	0f 94 c0             	sete   al
100043b3:	84 c0                	test   al,al
100043b5:	74 41                	je     100043f8 <firstRun(bool)+0x1aa3>
100043b7:	a1 00 00 00 00       	mov    eax,ds:0x0	100043b8: R_386_32	tzsel
100043bc:	48                   	dec    eax
100043bd:	a3 00 00 00 00       	mov    ds:0x0,eax	100043be: R_386_32	tzsel
100043c2:	a1 00 00 00 00       	mov    eax,ds:0x0	100043c3: R_386_32	tzsel
100043c7:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
100043ca:	83 f8 04             	cmp    eax,0x4
100043cd:	7f 03                	jg     100043d2 <firstRun(bool)+0x1a7d>
100043cf:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
100043d2:	a1 00 00 00 00       	mov    eax,ds:0x0	100043d3: R_386_32	tzsel
100043d7:	85 c0                	test   eax,eax
100043d9:	79 0a                	jns    100043e5 <firstRun(bool)+0x1a90>
100043db:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100043dd: R_386_32	tzsel
100043e5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100043e9:	0f 89 82 00 00 00    	jns    10004471 <firstRun(bool)+0x1b1c>
100043ef:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100043f6:	eb 79                	jmp    10004471 <firstRun(bool)+0x1b1c>
100043f8:	a0 00 00 00 00       	mov    al,ds:0x0	100043f9: R_386_32	installKey
100043fd:	3c 02                	cmp    al,0x2
100043ff:	0f 94 c0             	sete   al
10004402:	84 c0                	test   al,al
10004404:	74 4b                	je     10004451 <firstRun(bool)+0x1afc>
10004406:	a1 00 00 00 00       	mov    eax,ds:0x0	10004407: R_386_32	tzsel
1000440b:	40                   	inc    eax
1000440c:	a3 00 00 00 00       	mov    ds:0x0,eax	1000440d: R_386_32	tzsel
10004411:	a1 00 00 00 00       	mov    eax,ds:0x0	10004412: R_386_32	tzsel
10004416:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
10004419:	83 f8 0a             	cmp    eax,0xa
1000441c:	7e 03                	jle    10004421 <firstRun(bool)+0x1acc>
1000441e:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10004421:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004424:	8d 50 ff             	lea    edx,[eax-0x1]
10004427:	a1 00 00 00 00       	mov    eax,ds:0x0	10004428: R_386_32	tzsel
1000442c:	39 c2                	cmp    edx,eax
1000442e:	7f 0b                	jg     1000443b <firstRun(bool)+0x1ae6>
10004430:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004433:	83 e8 02             	sub    eax,0x2
10004436:	a3 00 00 00 00       	mov    ds:0x0,eax	10004437: R_386_32	tzsel
1000443b:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
1000443e:	83 e8 0f             	sub    eax,0xf
10004441:	39 45 dc             	cmp    DWORD PTR [ebp-0x24],eax
10004444:	7c 2b                	jl     10004471 <firstRun(bool)+0x1b1c>
10004446:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004449:	83 e8 10             	sub    eax,0x10
1000444c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000444f:	eb 20                	jmp    10004471 <firstRun(bool)+0x1b1c>
10004451:	a0 00 00 00 00       	mov    al,ds:0x0	10004452: R_386_32	installKey
10004456:	3c 0a                	cmp    al,0xa
10004458:	0f 94 c0             	sete   al
1000445b:	84 c0                	test   al,al
1000445d:	75 2e                	jne    1000448d <firstRun(bool)+0x1b38>
1000445f:	a0 00 00 00 00       	mov    al,ds:0x0	10004460: R_386_32	installKey
10004464:	3c 1b                	cmp    al,0x1b
10004466:	0f 94 c0             	sete   al
10004469:	84 c0                	test   al,al
1000446b:	0f 85 28 f1 ff ff    	jne    10003599 <firstRun(bool)+0xc44>
10004471:	83 ec 0c             	sub    esp,0xc
10004474:	68 f4 01 00 00       	push   0x1f4
10004479:	e8 fc ff ff ff       	call   1000447a <firstRun(bool)+0x1b25>	1000447a: R_386_PC32	milliTenthSleep(unsigned int)
1000447e:	83 c4 10             	add    esp,0x10
10004481:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004483: R_386_32	installKey
10004488:	e9 67 fd ff ff       	jmp    100041f4 <firstRun(bool)+0x189f>
1000448d:	90                   	nop
1000448e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004490: R_386_32	keDstOn
10004495:	a1 00 00 00 00       	mov    eax,ds:0x0	10004496: R_386_32	tzsel
1000449a:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000449d: R_386_32	timezoneStrings
100044a1:	83 c0 03             	add    eax,0x3
100044a4:	8a 00                	mov    al,BYTE PTR [eax]
100044a6:	3c 2e                	cmp    al,0x2e
100044a8:	75 15                	jne    100044bf <firstRun(bool)+0x1b6a>
100044aa:	a1 00 00 00 00       	mov    eax,ds:0x0	100044ab: R_386_32	tzsel
100044af:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100044b2: R_386_32	timezoneStrings
100044b6:	83 c0 04             	add    eax,0x4
100044b9:	8a 00                	mov    al,BYTE PTR [eax]
100044bb:	3c 35                	cmp    al,0x35
100044bd:	74 2a                	je     100044e9 <firstRun(bool)+0x1b94>
100044bf:	a1 00 00 00 00       	mov    eax,ds:0x0	100044c0: R_386_32	tzsel
100044c4:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100044c7: R_386_32	timezoneStrings
100044cb:	83 c0 04             	add    eax,0x4
100044ce:	8a 00                	mov    al,BYTE PTR [eax]
100044d0:	3c 2e                	cmp    al,0x2e
100044d2:	75 19                	jne    100044ed <firstRun(bool)+0x1b98>
100044d4:	a1 00 00 00 00       	mov    eax,ds:0x0	100044d5: R_386_32	tzsel
100044d9:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100044dc: R_386_32	timezoneStrings
100044e0:	83 c0 05             	add    eax,0x5
100044e3:	8a 00                	mov    al,BYTE PTR [eax]
100044e5:	3c 35                	cmp    al,0x35
100044e7:	75 04                	jne    100044ed <firstRun(bool)+0x1b98>
100044e9:	b0 01                	mov    al,0x1
100044eb:	eb 02                	jmp    100044ef <firstRun(bool)+0x1b9a>
100044ed:	b0 00                	mov    al,0x0
100044ef:	a2 00 00 00 00       	mov    ds:0x0,al	100044f0: R_386_32	keTimezoneHalfHourOffset
100044f4:	a1 00 00 00 00       	mov    eax,ds:0x0	100044f5: R_386_32	tzsel
100044f9:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100044fc: R_386_32	timezoneStrings
10004500:	83 c0 02             	add    eax,0x2
10004503:	8a 00                	mov    al,BYTE PTR [eax]
10004505:	0f be c0             	movsx  eax,al
10004508:	83 e8 30             	sub    eax,0x30
1000450b:	a3 00 00 00 00       	mov    ds:0x0,eax	1000450c: R_386_32	keTimezoneHourOffset
10004510:	a1 00 00 00 00       	mov    eax,ds:0x0	10004511: R_386_32	tzsel
10004515:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10004518: R_386_32	timezoneStrings
1000451c:	83 c0 04             	add    eax,0x4
1000451f:	8a 00                	mov    al,BYTE PTR [eax]
10004521:	3c 2e                	cmp    al,0x2e
10004523:	75 37                	jne    1000455c <firstRun(bool)+0x1c07>
10004525:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004527: R_386_32	keTimezoneHourOffset
1000452b:	89 d0                	mov    eax,edx
1000452d:	c1 e0 02             	shl    eax,0x2
10004530:	01 d0                	add    eax,edx
10004532:	01 c0                	add    eax,eax
10004534:	a3 00 00 00 00       	mov    ds:0x0,eax	10004535: R_386_32	keTimezoneHourOffset
10004539:	a1 00 00 00 00       	mov    eax,ds:0x0	1000453a: R_386_32	tzsel
1000453e:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10004541: R_386_32	timezoneStrings
10004545:	83 c0 03             	add    eax,0x3
10004548:	8a 00                	mov    al,BYTE PTR [eax]
1000454a:	0f be c0             	movsx  eax,al
1000454d:	8d 50 d0             	lea    edx,[eax-0x30]
10004550:	a1 00 00 00 00       	mov    eax,ds:0x0	10004551: R_386_32	keTimezoneHourOffset
10004555:	01 d0                	add    eax,edx
10004557:	a3 00 00 00 00       	mov    ds:0x0,eax	10004558: R_386_32	keTimezoneHourOffset
1000455c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000455d: R_386_32	tzsel
10004561:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10004564: R_386_32	timezoneStrings
10004568:	40                   	inc    eax
10004569:	8a 00                	mov    al,BYTE PTR [eax]
1000456b:	3c 2d                	cmp    al,0x2d
1000456d:	75 0c                	jne    1000457b <firstRun(bool)+0x1c26>
1000456f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004570: R_386_32	keTimezoneHourOffset
10004574:	f7 d8                	neg    eax
10004576:	a3 00 00 00 00       	mov    ds:0x0,eax	10004577: R_386_32	keTimezoneHourOffset
1000457b:	a0 00 00 00 00       	mov    al,ds:0x0	1000457c: R_386_32	keTimezoneHalfHourOffset
10004580:	0f b6 d0             	movzx  edx,al
10004583:	a1 00 00 00 00       	mov    eax,ds:0x0	10004584: R_386_32	keTimezoneHourOffset
10004588:	83 ec 04             	sub    esp,0x4
1000458b:	52                   	push   edx
1000458c:	50                   	push   eax
1000458d:	68 0a aa 00 10       	push   0x1000aa0a	1000458e: R_386_32	.text
10004592:	e8 fc ff ff ff       	call   10004593 <firstRun(bool)+0x1c3e>	10004593: R_386_PC32	Dbg::kprintf(char const*, ...)
10004597:	83 c4 10             	add    esp,0x10
1000459a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000459b: R_386_32	Krnl::computer
1000459f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100045a5:	83 ec 04             	sub    esp,0x4
100045a8:	ff b5 d8 fe ff ff    	push   DWORD PTR [ebp-0x128]
100045ae:	ff b5 d4 fe ff ff    	push   DWORD PTR [ebp-0x12c]
100045b4:	50                   	push   eax
100045b5:	e8 fc ff ff ff       	call   100045b6 <firstRun(bool)+0x1c61>	100045b6: R_386_PC32	Clock::setTimeInDatetimeLocal(datetime_t)
100045ba:	83 c4 10             	add    esp,0x10
100045bd:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100045bf: R_386_32	installKey
100045c4:	83 ec 0c             	sub    esp,0xc
100045c7:	68 a0 0f 00 00       	push   0xfa0
100045cc:	e8 fc ff ff ff       	call   100045cd <firstRun(bool)+0x1c78>	100045cd: R_386_PC32	milliTenthSleep(unsigned int)
100045d1:	83 c4 10             	add    esp,0x10
100045d4:	eb 01                	jmp    100045d7 <firstRun(bool)+0x1c82>
100045d6:	90                   	nop
100045d7:	e8 fc ff ff ff       	call   100045d8 <firstRun(bool)+0x1c83>	100045d8: R_386_PC32	drawBootScreen()
100045dc:	83 ec 0c             	sub    esp,0xc
100045df:	68 58 1b 00 00       	push   0x1b58
100045e4:	e8 fc ff ff ff       	call   100045e5 <firstRun(bool)+0x1c90>	100045e5: R_386_PC32	milliTenthSleep(unsigned int)
100045e9:	83 c4 10             	add    esp,0x10
100045ec:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100045ee: R_386_32	installKey
100045f3:	e8 fc ff ff ff       	call   100045f4 <firstRun(bool)+0x1c9f>	100045f4: R_386_PC32	drawBootScreen()
100045f8:	83 ec 0c             	sub    esp,0xc
100045fb:	68 17 aa 00 10       	push   0x1000aa17	100045fc: R_386_32	.text
10004600:	6a 10                	push   0x10
10004602:	6a 37                	push   0x37
10004604:	6a 03                	push   0x3
10004606:	6a 14                	push   0x14
10004608:	e8 fc ff ff ff       	call   10004609 <firstRun(bool)+0x1cb4>	10004609: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000460d:	83 c4 20             	add    esp,0x20
10004610:	a1 00 00 00 00       	mov    eax,ds:0x0	10004611: R_386_32	term
10004615:	83 ec 04             	sub    esp,0x4
10004618:	6a 06                	push   0x6
1000461a:	6a 16                	push   0x16
1000461c:	50                   	push   eax
1000461d:	e8 fc ff ff ff       	call   1000461e <firstRun(bool)+0x1cc9>	1000461e: R_386_PC32	VgaText::setCursor(int, int)
10004622:	83 c4 10             	add    esp,0x10
10004625:	a1 00 00 00 00       	mov    eax,ds:0x0	10004626: R_386_32	term
1000462a:	83 ec 08             	sub    esp,0x8
1000462d:	68 28 aa 00 10       	push   0x1000aa28	1000462e: R_386_32	.text
10004632:	50                   	push   eax
10004633:	e8 fc ff ff ff       	call   10004634 <firstRun(bool)+0x1cdf>	10004634: R_386_PC32	VgaText::puts(char const*)
10004638:	83 c4 10             	add    esp,0x10
1000463b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000463c: R_386_32	term
10004640:	83 ec 04             	sub    esp,0x4
10004643:	6a 07                	push   0x7
10004645:	6a 16                	push   0x16
10004647:	50                   	push   eax
10004648:	e8 fc ff ff ff       	call   10004649 <firstRun(bool)+0x1cf4>	10004649: R_386_PC32	VgaText::setCursor(int, int)
1000464d:	83 c4 10             	add    esp,0x10
10004650:	a1 00 00 00 00       	mov    eax,ds:0x0	10004651: R_386_32	term
10004655:	83 ec 08             	sub    esp,0x8
10004658:	68 5c aa 00 10       	push   0x1000aa5c	10004659: R_386_32	.text
1000465d:	50                   	push   eax
1000465e:	e8 fc ff ff ff       	call   1000465f <firstRun(bool)+0x1d0a>	1000465f: R_386_PC32	VgaText::puts(char const*)
10004663:	83 c4 10             	add    esp,0x10
10004666:	a1 00 00 00 00       	mov    eax,ds:0x0	10004667: R_386_32	term
1000466b:	83 ec 04             	sub    esp,0x4
1000466e:	6a 18                	push   0x18
10004670:	6a 11                	push   0x11
10004672:	50                   	push   eax
10004673:	e8 fc ff ff ff       	call   10004674 <firstRun(bool)+0x1d1f>	10004674: R_386_PC32	VgaText::setCursor(int, int)
10004678:	83 c4 10             	add    esp,0x10
1000467b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000467c: R_386_32	term
10004680:	6a 0b                	push   0xb
10004682:	6a 03                	push   0x3
10004684:	68 c2 a9 00 10       	push   0x1000a9c2	10004685: R_386_32	.text
10004689:	50                   	push   eax
1000468a:	e8 fc ff ff ff       	call   1000468b <firstRun(bool)+0x1d36>	1000468b: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000468f:	83 c4 10             	add    esp,0x10
10004692:	c7 45 8c 03 00 00 00 	mov    DWORD PTR [ebp-0x74],0x3
10004699:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000469f:	bb e0 ac 00 10       	mov    ebx,0x1000ace0	100046a0: R_386_32	.text
100046a4:	ba 03 00 00 00       	mov    edx,0x3
100046a9:	89 c7                	mov    edi,eax
100046ab:	89 de                	mov    esi,ebx
100046ad:	89 d1                	mov    ecx,edx
100046af:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100046b1:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
100046b8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100046bb:	3b 45 8c             	cmp    eax,DWORD PTR [ebp-0x74]
100046be:	7d 68                	jge    10004728 <firstRun(bool)+0x1dd3>
100046c0:	a1 00 00 00 00       	mov    eax,ds:0x0	100046c1: R_386_32	term
100046c5:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
100046c8:	83 c2 09             	add    edx,0x9
100046cb:	83 ec 04             	sub    esp,0x4
100046ce:	52                   	push   edx
100046cf:	6a 16                	push   0x16
100046d1:	50                   	push   eax
100046d2:	e8 fc ff ff ff       	call   100046d3 <firstRun(bool)+0x1d7e>	100046d3: R_386_PC32	VgaText::setCursor(int, int)
100046d7:	83 c4 10             	add    esp,0x10
100046da:	a1 00 00 00 00       	mov    eax,ds:0x0	100046db: R_386_32	term
100046df:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100046e1: R_386_32	modesel
100046e5:	39 55 c0             	cmp    DWORD PTR [ebp-0x40],edx
100046e8:	75 07                	jne    100046f1 <firstRun(bool)+0x1d9c>
100046ea:	bb 00 00 00 00       	mov    ebx,0x0
100046ef:	eb 05                	jmp    100046f6 <firstRun(bool)+0x1da1>
100046f1:	bb 0f 00 00 00       	mov    ebx,0xf
100046f6:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100046f8: R_386_32	modesel
100046fc:	39 55 c0             	cmp    DWORD PTR [ebp-0x40],edx
100046ff:	75 07                	jne    10004708 <firstRun(bool)+0x1db3>
10004701:	b9 0f 00 00 00       	mov    ecx,0xf
10004706:	eb 05                	jmp    1000470d <firstRun(bool)+0x1db8>
10004708:	b9 00 00 00 00       	mov    ecx,0x0
1000470d:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
10004710:	8b 94 95 c8 fe ff ff 	mov    edx,DWORD PTR [ebp+edx*4-0x138]
10004717:	53                   	push   ebx
10004718:	51                   	push   ecx
10004719:	52                   	push   edx
1000471a:	50                   	push   eax
1000471b:	e8 fc ff ff ff       	call   1000471c <firstRun(bool)+0x1dc7>	1000471c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004720:	83 c4 10             	add    esp,0x10
10004723:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
10004726:	eb 90                	jmp    100046b8 <firstRun(bool)+0x1d63>
10004728:	a0 00 00 00 00       	mov    al,ds:0x0	10004729: R_386_32	installKey
1000472d:	84 c0                	test   al,al
1000472f:	0f 94 c0             	sete   al
10004732:	84 c0                	test   al,al
10004734:	74 02                	je     10004738 <firstRun(bool)+0x1de3>
10004736:	eb f0                	jmp    10004728 <firstRun(bool)+0x1dd3>
10004738:	a1 00 00 00 00       	mov    eax,ds:0x0	10004739: R_386_32	term
1000473d:	05 82 00 00 00       	add    eax,0x82
10004742:	83 ec 04             	sub    esp,0x4
10004745:	6a 04                	push   0x4
10004747:	6a 00                	push   0x0
10004749:	50                   	push   eax
1000474a:	e8 fc ff ff ff       	call   1000474b <firstRun(bool)+0x1df6>	1000474b: R_386_PC32	memset
1000474f:	83 c4 10             	add    esp,0x10
10004752:	a1 00 00 00 00       	mov    eax,ds:0x0	10004753: R_386_32	term
10004757:	05 02 01 00 00       	add    eax,0x102
1000475c:	83 ec 04             	sub    esp,0x4
1000475f:	6a 04                	push   0x4
10004761:	6a 00                	push   0x0
10004763:	50                   	push   eax
10004764:	e8 fc ff ff ff       	call   10004765 <firstRun(bool)+0x1e10>	10004765: R_386_PC32	memset
10004769:	83 c4 10             	add    esp,0x10
1000476c:	a0 00 00 00 00       	mov    al,ds:0x0	1000476d: R_386_32	installKey
10004771:	3c 01                	cmp    al,0x1
10004773:	0f 94 c0             	sete   al
10004776:	84 c0                	test   al,al
10004778:	74 20                	je     1000479a <firstRun(bool)+0x1e45>
1000477a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000477b: R_386_32	modesel
1000477f:	48                   	dec    eax
10004780:	a3 00 00 00 00       	mov    ds:0x0,eax	10004781: R_386_32	modesel
10004785:	a1 00 00 00 00       	mov    eax,ds:0x0	10004786: R_386_32	modesel
1000478a:	85 c0                	test   eax,eax
1000478c:	79 5a                	jns    100047e8 <firstRun(bool)+0x1e93>
1000478e:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004790: R_386_32	modesel
10004798:	eb 4e                	jmp    100047e8 <firstRun(bool)+0x1e93>
1000479a:	a0 00 00 00 00       	mov    al,ds:0x0	1000479b: R_386_32	installKey
1000479f:	3c 02                	cmp    al,0x2
100047a1:	0f 94 c0             	sete   al
100047a4:	84 c0                	test   al,al
100047a6:	74 20                	je     100047c8 <firstRun(bool)+0x1e73>
100047a8:	a1 00 00 00 00       	mov    eax,ds:0x0	100047a9: R_386_32	modesel
100047ad:	40                   	inc    eax
100047ae:	a3 00 00 00 00       	mov    ds:0x0,eax	100047af: R_386_32	modesel
100047b3:	a1 00 00 00 00       	mov    eax,ds:0x0	100047b4: R_386_32	modesel
100047b8:	39 45 8c             	cmp    DWORD PTR [ebp-0x74],eax
100047bb:	7f 2b                	jg     100047e8 <firstRun(bool)+0x1e93>
100047bd:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100047c0:	48                   	dec    eax
100047c1:	a3 00 00 00 00       	mov    ds:0x0,eax	100047c2: R_386_32	modesel
100047c6:	eb 20                	jmp    100047e8 <firstRun(bool)+0x1e93>
100047c8:	a0 00 00 00 00       	mov    al,ds:0x0	100047c9: R_386_32	installKey
100047cd:	3c 0a                	cmp    al,0xa
100047cf:	0f 94 c0             	sete   al
100047d2:	84 c0                	test   al,al
100047d4:	75 2e                	jne    10004804 <firstRun(bool)+0x1eaf>
100047d6:	a0 00 00 00 00       	mov    al,ds:0x0	100047d7: R_386_32	installKey
100047db:	3c 1b                	cmp    al,0x1b
100047dd:	0f 94 c0             	sete   al
100047e0:	84 c0                	test   al,al
100047e2:	0f 85 7c f9 ff ff    	jne    10004164 <firstRun(bool)+0x180f>
100047e8:	83 ec 0c             	sub    esp,0xc
100047eb:	68 f4 01 00 00       	push   0x1f4
100047f0:	e8 fc ff ff ff       	call   100047f1 <firstRun(bool)+0x1e9c>	100047f1: R_386_PC32	milliTenthSleep(unsigned int)
100047f5:	83 c4 10             	add    esp,0x10
100047f8:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100047fa: R_386_32	installKey
100047ff:	e9 ad fe ff ff       	jmp    100046b1 <firstRun(bool)+0x1d5c>
10004804:	90                   	nop
10004805:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
1000480c:	0f 84 ff 00 00 00    	je     10004911 <firstRun(bool)+0x1fbc>
10004812:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004814: R_386_32	showSidebar
10004819:	a1 00 00 00 00       	mov    eax,ds:0x0	1000481a: R_386_32	term
1000481e:	83 ec 0c             	sub    esp,0xc
10004821:	50                   	push   eax
10004822:	e8 fc ff ff ff       	call   10004823 <firstRun(bool)+0x1ece>	10004823: R_386_PC32	setActiveTerminal(VgaText*)
10004827:	83 c4 10             	add    esp,0x10
1000482a:	e8 fc ff ff ff       	call   1000482b <firstRun(bool)+0x1ed6>	1000482b: R_386_PC32	drawBootScreen()
1000482f:	83 ec 0c             	sub    esp,0xc
10004832:	68 91 aa 00 10       	push   0x1000aa91	10004833: R_386_32	.text
10004837:	6a 0d                	push   0xd
10004839:	6a 32                	push   0x32
1000483b:	6a 05                	push   0x5
1000483d:	6a 16                	push   0x16
1000483f:	e8 fc ff ff ff       	call   10004840 <firstRun(bool)+0x1eeb>	10004840: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004844:	83 c4 20             	add    esp,0x20
10004847:	a1 00 00 00 00       	mov    eax,ds:0x0	10004848: R_386_32	term
1000484c:	83 ec 04             	sub    esp,0x4
1000484f:	6a 08                	push   0x8
10004851:	6a 18                	push   0x18
10004853:	50                   	push   eax
10004854:	e8 fc ff ff ff       	call   10004855 <firstRun(bool)+0x1f00>	10004855: R_386_PC32	VgaText::setCursor(int, int)
10004859:	83 c4 10             	add    esp,0x10
1000485c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000485d: R_386_32	term
10004861:	83 ec 08             	sub    esp,0x8
10004864:	68 a8 aa 00 10       	push   0x1000aaa8	10004865: R_386_32	.text
10004869:	50                   	push   eax
1000486a:	e8 fc ff ff ff       	call   1000486b <firstRun(bool)+0x1f16>	1000486b: R_386_PC32	VgaText::puts(char const*)
1000486f:	83 c4 10             	add    esp,0x10
10004872:	a1 00 00 00 00       	mov    eax,ds:0x0	10004873: R_386_32	term
10004877:	83 ec 04             	sub    esp,0x4
1000487a:	6a 0a                	push   0xa
1000487c:	6a 18                	push   0x18
1000487e:	50                   	push   eax
1000487f:	e8 fc ff ff ff       	call   10004880 <firstRun(bool)+0x1f2b>	10004880: R_386_PC32	VgaText::setCursor(int, int)
10004884:	83 c4 10             	add    esp,0x10
10004887:	a1 00 00 00 00       	mov    eax,ds:0x0	10004888: R_386_32	term
1000488c:	83 ec 08             	sub    esp,0x8
1000488f:	68 d0 aa 00 10       	push   0x1000aad0	10004890: R_386_32	.text
10004894:	50                   	push   eax
10004895:	e8 fc ff ff ff       	call   10004896 <firstRun(bool)+0x1f41>	10004896: R_386_PC32	VgaText::puts(char const*)
1000489a:	83 c4 10             	add    esp,0x10
1000489d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000489e: R_386_32	term
100048a2:	83 ec 04             	sub    esp,0x4
100048a5:	6a 0b                	push   0xb
100048a7:	6a 18                	push   0x18
100048a9:	50                   	push   eax
100048aa:	e8 fc ff ff ff       	call   100048ab <firstRun(bool)+0x1f56>	100048ab: R_386_PC32	VgaText::setCursor(int, int)
100048af:	83 c4 10             	add    esp,0x10
100048b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100048b3: R_386_32	term
100048b7:	83 ec 08             	sub    esp,0x8
100048ba:	68 f9 aa 00 10       	push   0x1000aaf9	100048bb: R_386_32	.text
100048bf:	50                   	push   eax
100048c0:	e8 fc ff ff ff       	call   100048c1 <firstRun(bool)+0x1f6c>	100048c1: R_386_PC32	VgaText::puts(char const*)
100048c5:	83 c4 10             	add    esp,0x10
100048c8:	a1 00 00 00 00       	mov    eax,ds:0x0	100048c9: R_386_32	term
100048cd:	83 ec 04             	sub    esp,0x4
100048d0:	6a 0e                	push   0xe
100048d2:	6a 18                	push   0x18
100048d4:	50                   	push   eax
100048d5:	e8 fc ff ff ff       	call   100048d6 <firstRun(bool)+0x1f81>	100048d6: R_386_PC32	VgaText::setCursor(int, int)
100048da:	83 c4 10             	add    esp,0x10
100048dd:	a1 00 00 00 00       	mov    eax,ds:0x0	100048de: R_386_32	term
100048e2:	83 ec 08             	sub    esp,0x8
100048e5:	68 08 ab 00 10       	push   0x1000ab08	100048e6: R_386_32	.text
100048ea:	50                   	push   eax
100048eb:	e8 fc ff ff ff       	call   100048ec <firstRun(bool)+0x1f97>	100048ec: R_386_PC32	VgaText::puts(char const*)
100048f0:	83 c4 10             	add    esp,0x10
100048f3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100048f5: R_386_32	installKey
100048fa:	a0 00 00 00 00       	mov    al,ds:0x0	100048fb: R_386_32	installKey
100048ff:	84 c0                	test   al,al
10004901:	0f 94 c0             	sete   al
10004904:	84 c0                	test   al,al
10004906:	74 02                	je     1000490a <firstRun(bool)+0x1fb5>
10004908:	eb f0                	jmp    100048fa <firstRun(bool)+0x1fa5>
1000490a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000490c: R_386_32	installKey
10004911:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004913: R_386_32	installKey
10004918:	83 ec 0c             	sub    esp,0xc
1000491b:	68 84 03 00 00       	push   0x384
10004920:	e8 fc ff ff ff       	call   10004921 <firstRun(bool)+0x1fcc>	10004921: R_386_PC32	milliTenthSleep(unsigned int)
10004925:	83 c4 10             	add    esp,0x10
10004928:	e8 fc ff ff ff       	call   10004929 <firstRun(bool)+0x1fd4>	10004929: R_386_PC32	drawBootScreen()
1000492d:	83 ec 0c             	sub    esp,0xc
10004930:	68 18 2e 00 00       	push   0x2e18
10004935:	e8 fc ff ff ff       	call   10004936 <firstRun(bool)+0x1fe1>	10004936: R_386_PC32	milliTenthSleep(unsigned int)
1000493a:	83 c4 10             	add    esp,0x10
1000493d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004944:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004946: R_386_32	installKey
1000494b:	e8 fc ff ff ff       	call   1000494c <firstRun(bool)+0x1ff7>	1000494c: R_386_PC32	drawBootScreen()
10004950:	83 ec 0c             	sub    esp,0xc
10004953:	68 32 ab 00 10       	push   0x1000ab32	10004954: R_386_32	.text
10004958:	6a 0e                	push   0xe
1000495a:	6a 32                	push   0x32
1000495c:	6a 02                	push   0x2
1000495e:	6a 16                	push   0x16
10004960:	e8 fc ff ff ff       	call   10004961 <firstRun(bool)+0x200c>	10004961: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004965:	83 c4 20             	add    esp,0x20
10004968:	a1 00 00 00 00       	mov    eax,ds:0x0	10004969: R_386_32	term
1000496d:	83 ec 04             	sub    esp,0x4
10004970:	6a 18                	push   0x18
10004972:	6a 11                	push   0x11
10004974:	50                   	push   eax
10004975:	e8 fc ff ff ff       	call   10004976 <firstRun(bool)+0x2021>	10004976: R_386_PC32	VgaText::setCursor(int, int)
1000497a:	83 c4 10             	add    esp,0x10
1000497d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000497e: R_386_32	term
10004982:	6a 0b                	push   0xb
10004984:	6a 03                	push   0x3
10004986:	68 c2 a9 00 10       	push   0x1000a9c2	10004987: R_386_32	.text
1000498b:	50                   	push   eax
1000498c:	e8 fc ff ff ff       	call   1000498d <firstRun(bool)+0x2038>	1000498d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004991:	83 c4 10             	add    esp,0x10
10004994:	a1 00 00 00 00       	mov    eax,ds:0x0	10004995: R_386_32	term
10004999:	83 ec 04             	sub    esp,0x4
1000499c:	6a 05                	push   0x5
1000499e:	6a 18                	push   0x18
100049a0:	50                   	push   eax
100049a1:	e8 fc ff ff ff       	call   100049a2 <firstRun(bool)+0x204d>	100049a2: R_386_PC32	VgaText::setCursor(int, int)
100049a6:	83 c4 10             	add    esp,0x10
100049a9:	a1 00 00 00 00       	mov    eax,ds:0x0	100049aa: R_386_32	term
100049ae:	83 ec 08             	sub    esp,0x8
100049b1:	68 40 ab 00 10       	push   0x1000ab40	100049b2: R_386_32	.text
100049b6:	50                   	push   eax
100049b7:	e8 fc ff ff ff       	call   100049b8 <firstRun(bool)+0x2063>	100049b8: R_386_PC32	VgaText::puts(char const*)
100049bc:	83 c4 10             	add    esp,0x10
100049bf:	a1 00 00 00 00       	mov    eax,ds:0x0	100049c0: R_386_32	term
100049c4:	83 ec 04             	sub    esp,0x4
100049c7:	6a 06                	push   0x6
100049c9:	6a 18                	push   0x18
100049cb:	50                   	push   eax
100049cc:	e8 fc ff ff ff       	call   100049cd <firstRun(bool)+0x2078>	100049cd: R_386_PC32	VgaText::setCursor(int, int)
100049d1:	83 c4 10             	add    esp,0x10
100049d4:	a1 00 00 00 00       	mov    eax,ds:0x0	100049d5: R_386_32	term
100049d9:	83 ec 08             	sub    esp,0x8
100049dc:	68 98 a9 00 10       	push   0x1000a998	100049dd: R_386_32	.text
100049e1:	50                   	push   eax
100049e2:	e8 fc ff ff ff       	call   100049e3 <firstRun(bool)+0x208e>	100049e3: R_386_PC32	VgaText::puts(char const*)
100049e7:	83 c4 10             	add    esp,0x10
100049ea:	c6 05 10 00 00 00 00 	mov    BYTE PTR ds:0x10,0x0	100049ec: R_386_32	pkeybuf
100049f1:	c6 05 11 00 00 00 00 	mov    BYTE PTR ds:0x11,0x0	100049f3: R_386_32	pkeybuf
100049f8:	a1 00 00 00 00       	mov    eax,ds:0x0	100049f9: R_386_32	term
100049fd:	83 ec 04             	sub    esp,0x4
10004a00:	6a 08                	push   0x8
10004a02:	6a 1c                	push   0x1c
10004a04:	50                   	push   eax
10004a05:	e8 fc ff ff ff       	call   10004a06 <firstRun(bool)+0x20b1>	10004a06: R_386_PC32	VgaText::setCursor(int, int)
10004a0a:	83 c4 10             	add    esp,0x10
10004a0d:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a0e: R_386_32	term
10004a12:	83 ec 08             	sub    esp,0x8
10004a15:	68 00 00 00 00       	push   0x0	10004a16: R_386_32	pkeybuf
10004a1a:	50                   	push   eax
10004a1b:	e8 fc ff ff ff       	call   10004a1c <firstRun(bool)+0x20c7>	10004a1c: R_386_PC32	VgaText::puts(char const*)
10004a20:	83 c4 10             	add    esp,0x10
10004a23:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a24: R_386_32	term
10004a28:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004a2b:	83 c2 1c             	add    edx,0x1c
10004a2e:	83 ec 04             	sub    esp,0x4
10004a31:	6a 08                	push   0x8
10004a33:	52                   	push   edx
10004a34:	50                   	push   eax
10004a35:	e8 fc ff ff ff       	call   10004a36 <firstRun(bool)+0x20e1>	10004a36: R_386_PC32	VgaText::setCursor(int, int)
10004a3a:	83 c4 10             	add    esp,0x10
10004a3d:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a3e: R_386_32	term
10004a42:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004a45:	81 c2 00 00 00 00    	add    edx,0x0	10004a47: R_386_32	pkeybuf
10004a4b:	8a 12                	mov    dl,BYTE PTR [edx]
10004a4d:	0f be d2             	movsx  edx,dl
10004a50:	6a 00                	push   0x0
10004a52:	6a 0f                	push   0xf
10004a54:	52                   	push   edx
10004a55:	50                   	push   eax
10004a56:	e8 fc ff ff ff       	call   10004a57 <firstRun(bool)+0x2102>	10004a57: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004a5b:	83 c4 10             	add    esp,0x10
10004a5e:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a5f: R_386_32	term
10004a63:	83 ec 04             	sub    esp,0x4
10004a66:	6a 08                	push   0x8
10004a68:	6a 2c                	push   0x2c
10004a6a:	50                   	push   eax
10004a6b:	e8 fc ff ff ff       	call   10004a6c <firstRun(bool)+0x2117>	10004a6c: R_386_PC32	VgaText::setCursor(int, int)
10004a70:	83 c4 10             	add    esp,0x10
10004a73:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a74: R_386_32	term
10004a78:	6a 0f                	push   0xf
10004a7a:	6a 0f                	push   0xf
10004a7c:	6a 20                	push   0x20
10004a7e:	50                   	push   eax
10004a7f:	e8 fc ff ff ff       	call   10004a80 <firstRun(bool)+0x212b>	10004a80: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004a84:	83 c4 10             	add    esp,0x10
10004a87:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a88: R_386_32	term
10004a8c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004a8f:	83 c2 1c             	add    edx,0x1c
10004a92:	83 ec 04             	sub    esp,0x4
10004a95:	6a 08                	push   0x8
10004a97:	52                   	push   edx
10004a98:	50                   	push   eax
10004a99:	e8 fc ff ff ff       	call   10004a9a <firstRun(bool)+0x2145>	10004a9a: R_386_PC32	VgaText::setCursor(int, int)
10004a9e:	83 c4 10             	add    esp,0x10
10004aa1:	a0 00 00 00 00       	mov    al,ds:0x0	10004aa2: R_386_32	installKey
10004aa6:	84 c0                	test   al,al
10004aa8:	0f 94 c0             	sete   al
10004aab:	84 c0                	test   al,al
10004aad:	74 02                	je     10004ab1 <firstRun(bool)+0x215c>
10004aaf:	eb f0                	jmp    10004aa1 <firstRun(bool)+0x214c>
10004ab1:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ab2: R_386_32	term
10004ab6:	05 82 00 00 00       	add    eax,0x82
10004abb:	83 ec 04             	sub    esp,0x4
10004abe:	6a 10                	push   0x10
10004ac0:	6a 00                	push   0x0
10004ac2:	50                   	push   eax
10004ac3:	e8 fc ff ff ff       	call   10004ac4 <firstRun(bool)+0x216f>	10004ac4: R_386_PC32	memset
10004ac8:	83 c4 10             	add    esp,0x10
10004acb:	a1 00 00 00 00       	mov    eax,ds:0x0	10004acc: R_386_32	term
10004ad0:	05 02 01 00 00       	add    eax,0x102
10004ad5:	83 ec 04             	sub    esp,0x4
10004ad8:	6a 10                	push   0x10
10004ada:	6a 00                	push   0x0
10004adc:	50                   	push   eax
10004add:	e8 fc ff ff ff       	call   10004ade <firstRun(bool)+0x2189>	10004ade: R_386_PC32	memset
10004ae2:	83 c4 10             	add    esp,0x10
10004ae5:	a0 00 00 00 00       	mov    al,ds:0x0	10004ae6: R_386_32	installKey
10004aea:	3c 03                	cmp    al,0x3
10004aec:	74 09                	je     10004af7 <firstRun(bool)+0x21a2>
10004aee:	a0 00 00 00 00       	mov    al,ds:0x0	10004aef: R_386_32	installKey
10004af3:	3c 08                	cmp    al,0x8
10004af5:	75 04                	jne    10004afb <firstRun(bool)+0x21a6>
10004af7:	b0 01                	mov    al,0x1
10004af9:	eb 02                	jmp    10004afd <firstRun(bool)+0x21a8>
10004afb:	b0 00                	mov    al,0x0
10004afd:	84 c0                	test   al,al
10004aff:	74 31                	je     10004b32 <firstRun(bool)+0x21dd>
10004b01:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
10004b04:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10004b08:	75 14                	jne    10004b1e <firstRun(bool)+0x21c9>
10004b0a:	83 ec 0c             	sub    esp,0xc
10004b0d:	68 00 00 00 00       	push   0x0	10004b0e: R_386_32	pkeybuf
10004b12:	e8 fc ff ff ff       	call   10004b13 <firstRun(bool)+0x21be>	10004b13: R_386_PC32	strlen
10004b17:	83 c4 10             	add    esp,0x10
10004b1a:	48                   	dec    eax
10004b1b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10004b1e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004b21:	05 00 00 00 00       	add    eax,0x0	10004b22: R_386_32	pkeybuf
10004b26:	8a 00                	mov    al,BYTE PTR [eax]
10004b28:	3c 2d                	cmp    al,0x2d
10004b2a:	0f 85 6f 03 00 00    	jne    10004e9f <firstRun(bool)+0x254a>
10004b30:	eb cf                	jmp    10004b01 <firstRun(bool)+0x21ac>
10004b32:	a0 00 00 00 00       	mov    al,ds:0x0	10004b33: R_386_32	installKey
10004b37:	3c 2f                	cmp    al,0x2f
10004b39:	7e 09                	jle    10004b44 <firstRun(bool)+0x21ef>
10004b3b:	a0 00 00 00 00       	mov    al,ds:0x0	10004b3c: R_386_32	installKey
10004b40:	3c 39                	cmp    al,0x39
10004b42:	7e 36                	jle    10004b7a <firstRun(bool)+0x2225>
10004b44:	a0 00 00 00 00       	mov    al,ds:0x0	10004b45: R_386_32	installKey
10004b49:	3c 40                	cmp    al,0x40
10004b4b:	7e 09                	jle    10004b56 <firstRun(bool)+0x2201>
10004b4d:	a0 00 00 00 00       	mov    al,ds:0x0	10004b4e: R_386_32	installKey
10004b52:	3c 5a                	cmp    al,0x5a
10004b54:	7e 24                	jle    10004b7a <firstRun(bool)+0x2225>
10004b56:	a0 00 00 00 00       	mov    al,ds:0x0	10004b57: R_386_32	installKey
10004b5b:	3c 60                	cmp    al,0x60
10004b5d:	7e 09                	jle    10004b68 <firstRun(bool)+0x2213>
10004b5f:	a0 00 00 00 00       	mov    al,ds:0x0	10004b60: R_386_32	installKey
10004b64:	3c 7a                	cmp    al,0x7a
10004b66:	7e 12                	jle    10004b7a <firstRun(bool)+0x2225>
10004b68:	a0 00 00 00 00       	mov    al,ds:0x0	10004b69: R_386_32	installKey
10004b6d:	3c 20                	cmp    al,0x20
10004b6f:	74 09                	je     10004b7a <firstRun(bool)+0x2225>
10004b71:	a0 00 00 00 00       	mov    al,ds:0x0	10004b72: R_386_32	installKey
10004b76:	3c 04                	cmp    al,0x4
10004b78:	75 04                	jne    10004b7e <firstRun(bool)+0x2229>
10004b7a:	b0 01                	mov    al,0x1
10004b7c:	eb 02                	jmp    10004b80 <firstRun(bool)+0x222b>
10004b7e:	b0 00                	mov    al,0x0
10004b80:	84 c0                	test   al,al
10004b82:	0f 84 a3 00 00 00    	je     10004c2b <firstRun(bool)+0x22d6>
10004b88:	a0 00 00 00 00       	mov    al,ds:0x0	10004b89: R_386_32	installKey
10004b8d:	3c 2f                	cmp    al,0x2f
10004b8f:	7e 09                	jle    10004b9a <firstRun(bool)+0x2245>
10004b91:	a0 00 00 00 00       	mov    al,ds:0x0	10004b92: R_386_32	installKey
10004b96:	3c 39                	cmp    al,0x39
10004b98:	7e 24                	jle    10004bbe <firstRun(bool)+0x2269>
10004b9a:	a0 00 00 00 00       	mov    al,ds:0x0	10004b9b: R_386_32	installKey
10004b9f:	3c 40                	cmp    al,0x40
10004ba1:	7e 09                	jle    10004bac <firstRun(bool)+0x2257>
10004ba3:	a0 00 00 00 00       	mov    al,ds:0x0	10004ba4: R_386_32	installKey
10004ba8:	3c 5a                	cmp    al,0x5a
10004baa:	7e 12                	jle    10004bbe <firstRun(bool)+0x2269>
10004bac:	a0 00 00 00 00       	mov    al,ds:0x0	10004bad: R_386_32	installKey
10004bb1:	3c 60                	cmp    al,0x60
10004bb3:	7e 0d                	jle    10004bc2 <firstRun(bool)+0x226d>
10004bb5:	a0 00 00 00 00       	mov    al,ds:0x0	10004bb6: R_386_32	installKey
10004bba:	3c 7a                	cmp    al,0x7a
10004bbc:	7f 04                	jg     10004bc2 <firstRun(bool)+0x226d>
10004bbe:	b0 01                	mov    al,0x1
10004bc0:	eb 02                	jmp    10004bc4 <firstRun(bool)+0x226f>
10004bc2:	b0 00                	mov    al,0x0
10004bc4:	84 c0                	test   al,al
10004bc6:	74 2c                	je     10004bf4 <firstRun(bool)+0x229f>
10004bc8:	a0 00 00 00 00       	mov    al,ds:0x0	10004bc9: R_386_32	installKey
10004bcd:	3c 60                	cmp    al,0x60
10004bcf:	7e 13                	jle    10004be4 <firstRun(bool)+0x228f>
10004bd1:	a0 00 00 00 00       	mov    al,ds:0x0	10004bd2: R_386_32	installKey
10004bd6:	3c 7a                	cmp    al,0x7a
10004bd8:	7f 0a                	jg     10004be4 <firstRun(bool)+0x228f>
10004bda:	a0 00 00 00 00       	mov    al,ds:0x0	10004bdb: R_386_32	installKey
10004bdf:	83 e8 20             	sub    eax,0x20
10004be2:	eb 05                	jmp    10004be9 <firstRun(bool)+0x2294>
10004be4:	a0 00 00 00 00       	mov    al,ds:0x0	10004be5: R_386_32	installKey
10004be9:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004bec:	81 c2 00 00 00 00    	add    edx,0x0	10004bee: R_386_32	pkeybuf
10004bf2:	88 02                	mov    BYTE PTR [edx],al
10004bf4:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10004bf7:	83 ec 0c             	sub    esp,0xc
10004bfa:	68 00 00 00 00       	push   0x0	10004bfb: R_386_32	pkeybuf
10004bff:	e8 fc ff ff ff       	call   10004c00 <firstRun(bool)+0x22ab>	10004c00: R_386_PC32	strlen
10004c04:	83 c4 10             	add    esp,0x10
10004c07:	89 c2                	mov    edx,eax
10004c09:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004c0c:	39 c2                	cmp    edx,eax
10004c0e:	77 07                	ja     10004c17 <firstRun(bool)+0x22c2>
10004c10:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004c17:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004c1a:	05 00 00 00 00       	add    eax,0x0	10004c1b: R_386_32	pkeybuf
10004c1f:	8a 00                	mov    al,BYTE PTR [eax]
10004c21:	3c 2d                	cmp    al,0x2d
10004c23:	0f 85 76 02 00 00    	jne    10004e9f <firstRun(bool)+0x254a>
10004c29:	eb c9                	jmp    10004bf4 <firstRun(bool)+0x229f>
10004c2b:	a0 00 00 00 00       	mov    al,ds:0x0	10004c2c: R_386_32	installKey
10004c30:	3c 1b                	cmp    al,0x1b
10004c32:	0f 94 c0             	sete   al
10004c35:	84 c0                	test   al,al
10004c37:	0f 85 99 f9 ff ff    	jne    100045d6 <firstRun(bool)+0x1c81>
10004c3d:	a0 00 00 00 00       	mov    al,ds:0x0	10004c3e: R_386_32	installKey
10004c42:	3c 0a                	cmp    al,0xa
10004c44:	0f 94 c0             	sete   al
10004c47:	84 c0                	test   al,al
10004c49:	0f 84 50 02 00 00    	je     10004e9f <firstRun(bool)+0x254a>
10004c4f:	83 ec 0c             	sub    esp,0xc
10004c52:	68 00 00 00 00       	push   0x0	10004c53: R_386_32	pkeybuf
10004c57:	e8 fc ff ff ff       	call   10004c58 <firstRun(bool)+0x2303>	10004c58: R_386_PC32	checkExtendedKey(char*)
10004c5c:	83 c4 10             	add    esp,0x10
10004c5f:	85 c0                	test   eax,eax
10004c61:	0f 95 c0             	setne  al
10004c64:	88 45 87             	mov    BYTE PTR [ebp-0x79],al
10004c67:	80 7d 87 00          	cmp    BYTE PTR [ebp-0x79],0x0
10004c6b:	74 5b                	je     10004cc8 <firstRun(bool)+0x2373>
10004c6d:	83 ec 0c             	sub    esp,0xc
10004c70:	68 f0 0a 00 00       	push   0xaf0
10004c75:	e8 fc ff ff ff       	call   10004c76 <firstRun(bool)+0x2321>	10004c76: R_386_PC32	milliTenthSleep(unsigned int)
10004c7a:	83 c4 10             	add    esp,0x10
10004c7d:	e8 fc ff ff ff       	call   10004c7e <firstRun(bool)+0x2329>	10004c7e: R_386_PC32	drawBootScreen()
10004c82:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004c84: R_386_32	installKey
10004c89:	83 ec 0c             	sub    esp,0xc
10004c8c:	68 84 03 00 00       	push   0x384
10004c91:	e8 fc ff ff ff       	call   10004c92 <firstRun(bool)+0x233d>	10004c92: R_386_PC32	milliTenthSleep(unsigned int)
10004c96:	83 c4 10             	add    esp,0x10
10004c99:	e8 fc ff ff ff       	call   10004c9a <firstRun(bool)+0x2345>	10004c9a: R_386_PC32	drawBootScreen()
10004c9e:	83 ec 0c             	sub    esp,0xc
10004ca1:	68 c0 12 00 00       	push   0x12c0
10004ca6:	e8 fc ff ff ff       	call   10004ca7 <firstRun(bool)+0x2352>	10004ca7: R_386_PC32	milliTenthSleep(unsigned int)
10004cab:	83 c4 10             	add    esp,0x10
10004cae:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004cb0: R_386_32	installKey
10004cb5:	90                   	nop
10004cb6:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10004cbd:	0f 84 e8 01 00 00    	je     10004eab <firstRun(bool)+0x2556>
10004cc3:	e9 cf 02 00 00       	jmp    10004f97 <firstRun(bool)+0x2642>
10004cc8:	83 ec 0c             	sub    esp,0xc
10004ccb:	68 f0 0a 00 00       	push   0xaf0
10004cd0:	e8 fc ff ff ff       	call   10004cd1 <firstRun(bool)+0x237c>	10004cd1: R_386_PC32	milliTenthSleep(unsigned int)
10004cd5:	83 c4 10             	add    esp,0x10
10004cd8:	e8 fc ff ff ff       	call   10004cd9 <firstRun(bool)+0x2384>	10004cd9: R_386_PC32	drawBootScreen()
10004cdd:	83 ec 08             	sub    esp,0x8
10004ce0:	6a 01                	push   0x1
10004ce2:	68 32 ab 00 10       	push   0x1000ab32	10004ce3: R_386_32	.text
10004ce7:	6a 0e                	push   0xe
10004ce9:	6a 32                	push   0x32
10004ceb:	6a 02                	push   0x2
10004ced:	6a 16                	push   0x16
10004cef:	e8 fc ff ff ff       	call   10004cf0 <firstRun(bool)+0x239b>	10004cf0: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10004cf4:	83 c4 20             	add    esp,0x20
10004cf7:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cf8: R_386_32	term
10004cfc:	83 ec 04             	sub    esp,0x4
10004cff:	6a 05                	push   0x5
10004d01:	6a 18                	push   0x18
10004d03:	50                   	push   eax
10004d04:	e8 fc ff ff ff       	call   10004d05 <firstRun(bool)+0x23b0>	10004d05: R_386_PC32	VgaText::setCursor(int, int)
10004d09:	83 c4 10             	add    esp,0x10
10004d0c:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d0d: R_386_32	term
10004d11:	6a 07                	push   0x7
10004d13:	6a 00                	push   0x0
10004d15:	68 40 ab 00 10       	push   0x1000ab40	10004d16: R_386_32	.text
10004d1a:	50                   	push   eax
10004d1b:	e8 fc ff ff ff       	call   10004d1c <firstRun(bool)+0x23c7>	10004d1c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004d20:	83 c4 10             	add    esp,0x10
10004d23:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d24: R_386_32	term
10004d28:	83 ec 04             	sub    esp,0x4
10004d2b:	6a 06                	push   0x6
10004d2d:	6a 18                	push   0x18
10004d2f:	50                   	push   eax
10004d30:	e8 fc ff ff ff       	call   10004d31 <firstRun(bool)+0x23dc>	10004d31: R_386_PC32	VgaText::setCursor(int, int)
10004d35:	83 c4 10             	add    esp,0x10
10004d38:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d39: R_386_32	term
10004d3d:	6a 07                	push   0x7
10004d3f:	6a 00                	push   0x0
10004d41:	68 98 a9 00 10       	push   0x1000a998	10004d42: R_386_32	.text
10004d46:	50                   	push   eax
10004d47:	e8 fc ff ff ff       	call   10004d48 <firstRun(bool)+0x23f3>	10004d48: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004d4c:	83 c4 10             	add    esp,0x10
10004d4f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d50: R_386_32	term
10004d54:	83 ec 04             	sub    esp,0x4
10004d57:	6a 08                	push   0x8
10004d59:	6a 1c                	push   0x1c
10004d5b:	50                   	push   eax
10004d5c:	e8 fc ff ff ff       	call   10004d5d <firstRun(bool)+0x2408>	10004d5d: R_386_PC32	VgaText::setCursor(int, int)
10004d61:	83 c4 10             	add    esp,0x10
10004d64:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d65: R_386_32	term
10004d69:	6a 07                	push   0x7
10004d6b:	6a 00                	push   0x0
10004d6d:	68 00 00 00 00       	push   0x0	10004d6e: R_386_32	pkeybuf
10004d72:	50                   	push   eax
10004d73:	e8 fc ff ff ff       	call   10004d74 <firstRun(bool)+0x241f>	10004d74: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004d78:	83 c4 10             	add    esp,0x10
10004d7b:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d7c: R_386_32	term
10004d80:	83 ec 04             	sub    esp,0x4
10004d83:	6a 08                	push   0x8
10004d85:	6a 2c                	push   0x2c
10004d87:	50                   	push   eax
10004d88:	e8 fc ff ff ff       	call   10004d89 <firstRun(bool)+0x2434>	10004d89: R_386_PC32	VgaText::setCursor(int, int)
10004d8d:	83 c4 10             	add    esp,0x10
10004d90:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d91: R_386_32	term
10004d95:	6a 07                	push   0x7
10004d97:	6a 07                	push   0x7
10004d99:	6a 20                	push   0x20
10004d9b:	50                   	push   eax
10004d9c:	e8 fc ff ff ff       	call   10004d9d <firstRun(bool)+0x2448>	10004d9d: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004da1:	83 c4 10             	add    esp,0x10
10004da4:	a1 00 00 00 00       	mov    eax,ds:0x0	10004da5: R_386_32	term
10004da9:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004dac:	83 c2 1c             	add    edx,0x1c
10004daf:	83 ec 04             	sub    esp,0x4
10004db2:	6a 08                	push   0x8
10004db4:	52                   	push   edx
10004db5:	50                   	push   eax
10004db6:	e8 fc ff ff ff       	call   10004db7 <firstRun(bool)+0x2462>	10004db7: R_386_PC32	VgaText::setCursor(int, int)
10004dbb:	83 c4 10             	add    esp,0x10
10004dbe:	83 ec 0c             	sub    esp,0xc
10004dc1:	68 91 aa 00 10       	push   0x1000aa91	10004dc2: R_386_32	.text
10004dc6:	6a 0b                	push   0xb
10004dc8:	6a 2b                	push   0x2b
10004dca:	6a 0a                	push   0xa
10004dcc:	6a 22                	push   0x22
10004dce:	e8 fc ff ff ff       	call   10004dcf <firstRun(bool)+0x247a>	10004dcf: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004dd3:	83 c4 20             	add    esp,0x20
10004dd6:	a1 00 00 00 00       	mov    eax,ds:0x0	10004dd7: R_386_32	term
10004ddb:	83 ec 04             	sub    esp,0x4
10004dde:	6a 0d                	push   0xd
10004de0:	6a 24                	push   0x24
10004de2:	50                   	push   eax
10004de3:	e8 fc ff ff ff       	call   10004de4 <firstRun(bool)+0x248f>	10004de4: R_386_PC32	VgaText::setCursor(int, int)
10004de8:	83 c4 10             	add    esp,0x10
10004deb:	a1 00 00 00 00       	mov    eax,ds:0x0	10004dec: R_386_32	term
10004df0:	83 ec 08             	sub    esp,0x8
10004df3:	68 68 ab 00 10       	push   0x1000ab68	10004df4: R_386_32	.text
10004df8:	50                   	push   eax
10004df9:	e8 fc ff ff ff       	call   10004dfa <firstRun(bool)+0x24a5>	10004dfa: R_386_PC32	VgaText::puts(char const*)
10004dfe:	83 c4 10             	add    esp,0x10
10004e01:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e02: R_386_32	term
10004e06:	83 ec 04             	sub    esp,0x4
10004e09:	6a 0f                	push   0xf
10004e0b:	6a 24                	push   0x24
10004e0d:	50                   	push   eax
10004e0e:	e8 fc ff ff ff       	call   10004e0f <firstRun(bool)+0x24ba>	10004e0f: R_386_PC32	VgaText::setCursor(int, int)
10004e13:	83 c4 10             	add    esp,0x10
10004e16:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e17: R_386_32	term
10004e1b:	83 ec 08             	sub    esp,0x8
10004e1e:	68 90 ab 00 10       	push   0x1000ab90	10004e1f: R_386_32	.text
10004e23:	50                   	push   eax
10004e24:	e8 fc ff ff ff       	call   10004e25 <firstRun(bool)+0x24d0>	10004e25: R_386_PC32	VgaText::puts(char const*)
10004e29:	83 c4 10             	add    esp,0x10
10004e2c:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e2d: R_386_32	term
10004e31:	83 ec 04             	sub    esp,0x4
10004e34:	6a 10                	push   0x10
10004e36:	6a 24                	push   0x24
10004e38:	50                   	push   eax
10004e39:	e8 fc ff ff ff       	call   10004e3a <firstRun(bool)+0x24e5>	10004e3a: R_386_PC32	VgaText::setCursor(int, int)
10004e3e:	83 c4 10             	add    esp,0x10
10004e41:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e42: R_386_32	term
10004e46:	83 ec 08             	sub    esp,0x8
10004e49:	68 b4 ab 00 10       	push   0x1000abb4	10004e4a: R_386_32	.text
10004e4e:	50                   	push   eax
10004e4f:	e8 fc ff ff ff       	call   10004e50 <firstRun(bool)+0x24fb>	10004e50: R_386_PC32	VgaText::puts(char const*)
10004e54:	83 c4 10             	add    esp,0x10
10004e57:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004e59: R_386_32	installKey
10004e5e:	83 ec 0c             	sub    esp,0xc
10004e61:	68 94 11 00 00       	push   0x1194
10004e66:	e8 fc ff ff ff       	call   10004e67 <firstRun(bool)+0x2512>	10004e67: R_386_PC32	milliTenthSleep(unsigned int)
10004e6b:	83 c4 10             	add    esp,0x10
10004e6e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004e70: R_386_32	installKey
10004e75:	a0 00 00 00 00       	mov    al,ds:0x0	10004e76: R_386_32	installKey
10004e7a:	84 c0                	test   al,al
10004e7c:	0f 94 c0             	sete   al
10004e7f:	84 c0                	test   al,al
10004e81:	74 02                	je     10004e85 <firstRun(bool)+0x2530>
10004e83:	eb f0                	jmp    10004e75 <firstRun(bool)+0x2520>
10004e85:	e8 fc ff ff ff       	call   10004e86 <firstRun(bool)+0x2531>	10004e86: R_386_PC32	drawBootScreen()
10004e8a:	83 ec 0c             	sub    esp,0xc
10004e8d:	68 9c 18 00 00       	push   0x189c
10004e92:	e8 fc ff ff ff       	call   10004e93 <firstRun(bool)+0x253e>	10004e93: R_386_PC32	milliTenthSleep(unsigned int)
10004e97:	83 c4 10             	add    esp,0x10
10004e9a:	e9 a5 fa ff ff       	jmp    10004944 <firstRun(bool)+0x1fef>
10004e9f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004ea1: R_386_32	installKey
10004ea6:	e9 3f fb ff ff       	jmp    100049ea <firstRun(bool)+0x2095>
10004eab:	e8 fc ff ff ff       	call   10004eac <firstRun(bool)+0x2557>	10004eac: R_386_PC32	drawBootScreen()
10004eb0:	83 ec 0c             	sub    esp,0xc
10004eb3:	68 d5 ab 00 10       	push   0x1000abd5	10004eb4: R_386_32	.text
10004eb8:	6a 0d                	push   0xd
10004eba:	6a 32                	push   0x32
10004ebc:	6a 05                	push   0x5
10004ebe:	6a 16                	push   0x16
10004ec0:	e8 fc ff ff ff       	call   10004ec1 <firstRun(bool)+0x256c>	10004ec1: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004ec5:	83 c4 20             	add    esp,0x20
10004ec8:	83 ec 0c             	sub    esp,0xc
10004ecb:	6a 00                	push   0x0
10004ecd:	e8 fc ff ff ff       	call   10004ece <firstRun(bool)+0x2579>	10004ece: R_386_PC32	bootInstallTasks(int)
10004ed2:	83 c4 10             	add    esp,0x10
10004ed5:	83 ec 0c             	sub    esp,0xc
10004ed8:	68 f0 ab 00 10       	push   0x1000abf0	10004ed9: R_386_32	.text
10004edd:	e8 fc ff ff ff       	call   10004ede <firstRun(bool)+0x2589>	10004ede: R_386_PC32	Dbg::kprintf(char const*, ...)
10004ee2:	83 c4 10             	add    esp,0x10
10004ee5:	c7 45 80 0c 00 00 00 	mov    DWORD PTR [ebp-0x80],0xc
10004eec:	83 ec 0c             	sub    esp,0xc
10004eef:	ff 75 80             	push   DWORD PTR [ebp-0x80]
10004ef2:	e8 fc ff ff ff       	call   10004ef3 <firstRun(bool)+0x259e>	10004ef3: R_386_PC32	Virt::setupPageSwapping(int)
10004ef7:	83 c4 10             	add    esp,0x10
10004efa:	83 ec 0c             	sub    esp,0xc
10004efd:	6a 01                	push   0x1
10004eff:	e8 fc ff ff ff       	call   10004f00 <firstRun(bool)+0x25ab>	10004f00: R_386_PC32	bootInstallTasks(int)
10004f04:	83 c4 10             	add    esp,0x10
10004f07:	83 ec 0c             	sub    esp,0xc
10004f0a:	68 10 ac 00 10       	push   0x1000ac10	10004f0b: R_386_32	.text
10004f0f:	e8 fc ff ff ff       	call   10004f10 <firstRun(bool)+0x25bb>	10004f10: R_386_PC32	rmtree(char*)
10004f14:	83 c4 10             	add    esp,0x10
10004f17:	83 ec 0c             	sub    esp,0xc
10004f1a:	68 2a ac 00 10       	push   0x1000ac2a	10004f1b: R_386_32	.text
10004f1f:	e8 fc ff ff ff       	call   10004f20 <firstRun(bool)+0x25cb>	10004f20: R_386_PC32	rmtree(char*)
10004f24:	83 c4 10             	add    esp,0x10
10004f27:	83 ec 08             	sub    esp,0x8
10004f2a:	68 c0 01 00 00       	push   0x1c0
10004f2f:	68 10 ac 00 10       	push   0x1000ac10	10004f30: R_386_32	.text
10004f34:	e8 fc ff ff ff       	call   10004f35 <firstRun(bool)+0x25e0>	10004f35: R_386_PC32	mkdir(char const*, int)
10004f39:	83 c4 10             	add    esp,0x10
10004f3c:	83 ec 08             	sub    esp,0x8
10004f3f:	68 c0 01 00 00       	push   0x1c0
10004f44:	68 2a ac 00 10       	push   0x1000ac2a	10004f45: R_386_32	.text
10004f49:	e8 fc ff ff ff       	call   10004f4a <firstRun(bool)+0x25f5>	10004f4a: R_386_PC32	mkdir(char const*, int)
10004f4e:	83 c4 10             	add    esp,0x10
10004f51:	83 ec 08             	sub    esp,0x8
10004f54:	68 10 ac 00 10       	push   0x1000ac10	10004f55: R_386_32	.text
10004f59:	68 44 ac 00 10       	push   0x1000ac44	10004f5a: R_386_32	.text
10004f5e:	e8 fc ff ff ff       	call   10004f5f <firstRun(bool)+0x260a>	10004f5f: R_386_PC32	copytree(char*, char*)
10004f63:	83 c4 10             	add    esp,0x10
10004f66:	83 ec 0c             	sub    esp,0xc
10004f69:	6a 02                	push   0x2
10004f6b:	e8 fc ff ff ff       	call   10004f6c <firstRun(bool)+0x2617>	10004f6c: R_386_PC32	bootInstallTasks(int)
10004f70:	83 c4 10             	add    esp,0x10
10004f73:	83 ec 0c             	sub    esp,0xc
10004f76:	68 00 00 00 00       	push   0x0	10004f77: R_386_32	currName
10004f7b:	e8 fc ff ff ff       	call   10004f7c <firstRun(bool)+0x2627>	10004f7c: R_386_PC32	createUser(char const*)
10004f80:	83 c4 10             	add    esp,0x10
10004f83:	83 ec 0c             	sub    esp,0xc
10004f86:	6a 03                	push   0x3
10004f88:	e8 fc ff ff ff       	call   10004f89 <firstRun(bool)+0x2634>	10004f89: R_386_PC32	bootInstallTasks(int)
10004f8d:	83 c4 10             	add    esp,0x10
10004f90:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10004f92: R_386_32	VgaText::hiddenOut
10004f97:	8d 65 f4             	lea    esp,[ebp-0xc]
10004f9a:	5b                   	pop    ebx
10004f9b:	5e                   	pop    esi
10004f9c:	5f                   	pop    edi
10004f9d:	5d                   	pop    ebp
10004f9e:	c3                   	ret    

10004f9f <loadExtensions()>:
10004f9f:	55                   	push   ebp
10004fa0:	89 e5                	mov    ebp,esp
10004fa2:	83 ec 08             	sub    esp,0x8
10004fa5:	83 ec 0c             	sub    esp,0xc
10004fa8:	68 ec ac 00 10       	push   0x1000acec	10004fa9: R_386_32	.text
10004fad:	e8 fc ff ff ff       	call   10004fae <loadExtensions()+0xf>	10004fae: R_386_PC32	KeSetBootMessage(char const*)
10004fb2:	83 c4 10             	add    esp,0x10
10004fb5:	90                   	nop
10004fb6:	c9                   	leave  
10004fb7:	c3                   	ret    

10004fb8 <rgtree(Reghive_Tag*, int, int)>:
10004fb8:	55                   	push   ebp
10004fb9:	89 e5                	mov    ebp,esp
10004fbb:	53                   	push   ebx
10004fbc:	83 ec 44             	sub    esp,0x44
10004fbf:	83 7d 0c 01          	cmp    DWORD PTR [ebp+0xc],0x1
10004fc3:	75 16                	jne    10004fdb <rgtree(Reghive_Tag*, int, int)+0x23>
10004fc5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10004fc9:	75 10                	jne    10004fdb <rgtree(Reghive_Tag*, int, int)+0x23>
10004fcb:	83 ec 0c             	sub    esp,0xc
10004fce:	68 02 ad 00 10       	push   0x1000ad02	10004fcf: R_386_32	.text
10004fd3:	e8 fc ff ff ff       	call   10004fd4 <rgtree(Reghive_Tag*, int, int)+0x1c>	10004fd4: R_386_PC32	Dbg::kprintf(char const*, ...)
10004fd8:	83 c4 10             	add    esp,0x10
10004fdb:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
10004fdf:	0f 8e a9 00 00 00    	jle    1000508e <rgtree(Reghive_Tag*, int, int)+0xd6>
10004fe5:	83 ec 04             	sub    esp,0x4
10004fe8:	6a 32                	push   0x32
10004fea:	6a 00                	push   0x0
10004fec:	8d 45 be             	lea    eax,[ebp-0x42]
10004fef:	50                   	push   eax
10004ff0:	e8 fc ff ff ff       	call   10004ff1 <rgtree(Reghive_Tag*, int, int)+0x39>	10004ff1: R_386_PC32	memset
10004ff5:	83 c4 10             	add    esp,0x10
10004ff8:	83 ec 04             	sub    esp,0x4
10004ffb:	8d 45 be             	lea    eax,[ebp-0x42]
10004ffe:	50                   	push   eax
10004fff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10005002:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005005:	e8 fc ff ff ff       	call   10005006 <rgtree(Reghive_Tag*, int, int)+0x4e>	10005006: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
1000500a:	83 c4 10             	add    esp,0x10
1000500d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10005010:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10005017:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000501a:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
1000501d:	7d 15                	jge    10005034 <rgtree(Reghive_Tag*, int, int)+0x7c>
1000501f:	83 ec 0c             	sub    esp,0xc
10005022:	68 a7 a7 00 10       	push   0x1000a7a7	10005023: R_386_32	.text
10005027:	e8 fc ff ff ff       	call   10005028 <rgtree(Reghive_Tag*, int, int)+0x70>	10005028: R_386_PC32	Dbg::kprintf(char const*, ...)
1000502c:	83 c4 10             	add    esp,0x10
1000502f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10005032:	eb e3                	jmp    10005017 <rgtree(Reghive_Tag*, int, int)+0x5f>
10005034:	83 ec 08             	sub    esp,0x8
10005037:	8d 45 be             	lea    eax,[ebp-0x42]
1000503a:	50                   	push   eax
1000503b:	68 07 ad 00 10       	push   0x1000ad07	1000503c: R_386_32	.text
10005040:	e8 fc ff ff ff       	call   10005041 <rgtree(Reghive_Tag*, int, int)+0x89>	10005041: R_386_PC32	Dbg::kprintf(char const*, ...)
10005045:	83 c4 10             	add    esp,0x10
10005048:	83 7d f0 4e          	cmp    DWORD PTR [ebp-0x10],0x4e
1000504c:	75 27                	jne    10005075 <rgtree(Reghive_Tag*, int, int)+0xbd>
1000504e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10005051:	8d 58 04             	lea    ebx,[eax+0x4]
10005054:	83 ec 08             	sub    esp,0x8
10005057:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000505a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000505d:	e8 fc ff ff ff       	call   1000505e <rgtree(Reghive_Tag*, int, int)+0xa6>	1000505e: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005062:	83 c4 10             	add    esp,0x10
10005065:	83 ec 04             	sub    esp,0x4
10005068:	53                   	push   ebx
10005069:	50                   	push   eax
1000506a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000506d:	e8 fc ff ff ff       	call   1000506e <rgtree(Reghive_Tag*, int, int)+0xb6>	1000506e: R_386_PC32	rgtree(Reghive_Tag*, int, int)
10005072:	83 c4 10             	add    esp,0x10
10005075:	83 ec 08             	sub    esp,0x8
10005078:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000507b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000507e:	e8 fc ff ff ff       	call   1000507f <rgtree(Reghive_Tag*, int, int)+0xc7>	1000507f: R_386_PC32	CmGetNext(Reghive_Tag*, int)
10005083:	83 c4 10             	add    esp,0x10
10005086:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10005089:	e9 4d ff ff ff       	jmp    10004fdb <rgtree(Reghive_Tag*, int, int)+0x23>
1000508e:	90                   	nop
1000508f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10005092:	c9                   	leave  
10005093:	c3                   	ret    

10005094 <getRegsafeName(char*, char*)>:
10005094:	55                   	push   ebp
10005095:	89 e5                	mov    ebp,esp
10005097:	83 ec 10             	sub    esp,0x10
1000509a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000509d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100050a0:	e8 fc ff ff ff       	call   100050a1 <getRegsafeName(char*, char*)+0xd>	100050a1: R_386_PC32	strcpy
100050a5:	83 c4 08             	add    esp,0x8
100050a8:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
100050af:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
100050b2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100050b5:	01 d0                	add    eax,edx
100050b7:	8a 00                	mov    al,BYTE PTR [eax]
100050b9:	84 c0                	test   al,al
100050bb:	74 7f                	je     1000513c <getRegsafeName(char*, char*)+0xa8>
100050bd:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
100050c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100050c3:	01 d0                	add    eax,edx
100050c5:	8a 00                	mov    al,BYTE PTR [eax]
100050c7:	3c 60                	cmp    al,0x60
100050c9:	7e 42                	jle    1000510d <getRegsafeName(char*, char*)+0x79>
100050cb:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
100050ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100050d1:	01 d0                	add    eax,edx
100050d3:	8a 00                	mov    al,BYTE PTR [eax]
100050d5:	3c 7a                	cmp    al,0x7a
100050d7:	7f 34                	jg     1000510d <getRegsafeName(char*, char*)+0x79>
100050d9:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
100050dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100050df:	01 d0                	add    eax,edx
100050e1:	8a 00                	mov    al,BYTE PTR [eax]
100050e3:	8d 48 9f             	lea    ecx,[eax-0x61]
100050e6:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
100050e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100050ec:	01 d0                	add    eax,edx
100050ee:	88 ca                	mov    dl,cl
100050f0:	88 10                	mov    BYTE PTR [eax],dl
100050f2:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
100050f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100050f8:	01 d0                	add    eax,edx
100050fa:	8a 00                	mov    al,BYTE PTR [eax]
100050fc:	8d 48 41             	lea    ecx,[eax+0x41]
100050ff:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005102:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005105:	01 d0                	add    eax,edx
10005107:	88 ca                	mov    dl,cl
10005109:	88 10                	mov    BYTE PTR [eax],dl
1000510b:	eb 27                	jmp    10005134 <getRegsafeName(char*, char*)+0xa0>
1000510d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005110:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005113:	01 d0                	add    eax,edx
10005115:	8a 00                	mov    al,BYTE PTR [eax]
10005117:	3c 40                	cmp    al,0x40
10005119:	7e 0e                	jle    10005129 <getRegsafeName(char*, char*)+0x95>
1000511b:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
1000511e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005121:	01 d0                	add    eax,edx
10005123:	8a 00                	mov    al,BYTE PTR [eax]
10005125:	3c 5a                	cmp    al,0x5a
10005127:	7e 0b                	jle    10005134 <getRegsafeName(char*, char*)+0xa0>
10005129:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
1000512c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000512f:	01 d0                	add    eax,edx
10005131:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10005134:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10005137:	e9 73 ff ff ff       	jmp    100050af <getRegsafeName(char*, char*)+0x1b>
1000513c:	90                   	nop
1000513d:	c9                   	leave  
1000513e:	c3                   	ret    

1000513f <begin(void*)>:
1000513f:	55                   	push   ebp
10005140:	89 e5                	mov    ebp,esp
10005142:	57                   	push   edi
10005143:	56                   	push   esi
10005144:	53                   	push   ebx
10005145:	81 ec 5c 07 00 00    	sub    esp,0x75c
1000514b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
1000514f:	83 ec 0c             	sub    esp,0xc
10005152:	68 14 01 00 00       	push   0x114
10005157:	e8 fc ff ff ff       	call   10005158 <begin(void*)+0x19>	10005158: R_386_PC32	operator new(unsigned long)
1000515c:	83 c4 10             	add    esp,0x10
1000515f:	89 c3                	mov    ebx,eax
10005161:	a1 00 00 00 00       	mov    eax,ds:0x0	10005162: R_386_32	kernelProcess
10005166:	83 ec 04             	sub    esp,0x4
10005169:	50                   	push   eax
1000516a:	68 0c ad 00 10       	push   0x1000ad0c	1000516b: R_386_32	.text
1000516f:	53                   	push   ebx
10005170:	e8 fc ff ff ff       	call   10005171 <begin(void*)+0x32>	10005171: R_386_PC32	File::File(char const*, Process*)
10005175:	83 c4 10             	add    esp,0x10
10005178:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
1000517b:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
1000517f:	75 10                	jne    10005191 <begin(void*)+0x52>
10005181:	83 ec 0c             	sub    esp,0xc
10005184:	68 2a ad 00 10       	push   0x1000ad2a	10005185: R_386_32	.text
10005189:	e8 fc ff ff ff       	call   1000518a <begin(void*)+0x4b>	1000518a: R_386_PC32	KePanic(char const*)
1000518e:	83 c4 10             	add    esp,0x10
10005191:	83 ec 08             	sub    esp,0x8
10005194:	6a 01                	push   0x1
10005196:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
10005199:	e8 fc ff ff ff       	call   1000519a <begin(void*)+0x5b>	1000519a: R_386_PC32	File::open(FileOpenMode)
1000519e:	83 c4 10             	add    esp,0x10
100051a1:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
100051a4:	83 7d b4 00          	cmp    DWORD PTR [ebp-0x4c],0x0
100051a8:	75 10                	jne    100051ba <begin(void*)+0x7b>
100051aa:	83 ec 0c             	sub    esp,0xc
100051ad:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
100051b0:	e8 fc ff ff ff       	call   100051b1 <begin(void*)+0x72>	100051b1: R_386_PC32	File::close()
100051b5:	83 c4 10             	add    esp,0x10
100051b8:	eb 04                	jmp    100051be <begin(void*)+0x7f>
100051ba:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
100051be:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100051c2:	74 15                	je     100051d9 <begin(void*)+0x9a>
100051c4:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
100051c7:	8b 00                	mov    eax,DWORD PTR [eax]
100051c9:	83 c0 08             	add    eax,0x8
100051cc:	8b 00                	mov    eax,DWORD PTR [eax]
100051ce:	83 ec 0c             	sub    esp,0xc
100051d1:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
100051d4:	ff d0                	call   eax
100051d6:	83 c4 10             	add    esp,0x10
100051d9:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100051db: R_386_32	KeIsPreemptionOn
100051e0:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
100051e4:	74 0f                	je     100051f5 <begin(void*)+0xb6>
100051e6:	83 ec 0c             	sub    esp,0xc
100051e9:	6a 00                	push   0x0
100051eb:	e8 fc ff ff ff       	call   100051ec <begin(void*)+0xad>	100051ec: R_386_PC32	firstRun(bool)
100051f0:	83 c4 10             	add    esp,0x10
100051f3:	eb 05                	jmp    100051fa <begin(void*)+0xbb>
100051f5:	e8 fc ff ff ff       	call   100051f6 <begin(void*)+0xb7>	100051f6: R_386_PC32	loadExtensions()
100051fa:	8d 45 90             	lea    eax,[ebp-0x70]
100051fd:	bb 28 b3 00 10       	mov    ebx,0x1000b328	100051fe: R_386_32	.text
10005202:	ba 04 00 00 00       	mov    edx,0x4
10005207:	89 c7                	mov    edi,eax
10005209:	89 de                	mov    esi,ebx
1000520b:	89 d1                	mov    ecx,edx
1000520d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000520f:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10005213:	0f 84 50 13 00 00    	je     10006569 <begin(void*)+0x142a>
10005219:	83 ec 0c             	sub    esp,0xc
1000521c:	68 24 07 00 00       	push   0x724
10005221:	e8 fc ff ff ff       	call   10005222 <begin(void*)+0xe3>	10005222: R_386_PC32	operator new(unsigned long)
10005226:	83 c4 10             	add    esp,0x10
10005229:	89 c3                	mov    ebx,eax
1000522b:	8d 45 90             	lea    eax,[ebp-0x70]
1000522e:	50                   	push   eax
1000522f:	6a 00                	push   0x0
10005231:	68 3a ad 00 10       	push   0x1000ad3a	10005232: R_386_32	.text
10005236:	53                   	push   ebx
10005237:	e8 fc ff ff ff       	call   10005238 <begin(void*)+0xf9>	10005238: R_386_PC32	Process::Process(char const*, Process*, char**)
1000523c:	83 c4 10             	add    esp,0x10
1000523f:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
10005242:	83 ec 0c             	sub    esp,0xc
10005245:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
10005248:	e8 fc ff ff ff       	call   10005249 <begin(void*)+0x10a>	10005249: R_386_PC32	Process::createUserThread()
1000524d:	83 c4 10             	add    esp,0x10
10005250:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005252: R_386_32	VgaText::hiddenOut
10005257:	a1 00 00 00 00       	mov    eax,ds:0x0	10005258: R_386_32	term
1000525c:	83 ec 0c             	sub    esp,0xc
1000525f:	50                   	push   eax
10005260:	e8 fc ff ff ff       	call   10005261 <begin(void*)+0x122>	10005261: R_386_PC32	setActiveTerminal(VgaText*)
10005265:	83 c4 10             	add    esp,0x10
10005268:	e8 fc ff ff ff       	call   10005269 <begin(void*)+0x12a>	10005269: R_386_PC32	drawBootScreen()
1000526d:	83 ec 0c             	sub    esp,0xc
10005270:	68 d5 ab 00 10       	push   0x1000abd5	10005271: R_386_32	.text
10005275:	6a 0d                	push   0xd
10005277:	6a 32                	push   0x32
10005279:	6a 05                	push   0x5
1000527b:	6a 16                	push   0x16
1000527d:	e8 fc ff ff ff       	call   1000527e <begin(void*)+0x13f>	1000527e: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005282:	83 c4 20             	add    esp,0x20
10005285:	83 ec 0c             	sub    esp,0xc
10005288:	6a 03                	push   0x3
1000528a:	e8 fc ff ff ff       	call   1000528b <begin(void*)+0x14c>	1000528b: R_386_PC32	bootInstallTasks(int)
1000528f:	83 c4 10             	add    esp,0x10
10005292:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10005294: R_386_32	VgaText::hiddenOut
10005299:	83 ec 0c             	sub    esp,0xc
1000529c:	68 14 01 00 00       	push   0x114
100052a1:	e8 fc ff ff ff       	call   100052a2 <begin(void*)+0x163>	100052a2: R_386_PC32	operator new(unsigned long)
100052a6:	83 c4 10             	add    esp,0x10
100052a9:	89 c3                	mov    ebx,eax
100052ab:	a1 00 00 00 00       	mov    eax,ds:0x0	100052ac: R_386_32	kernelProcess
100052b0:	83 ec 04             	sub    esp,0x4
100052b3:	50                   	push   eax
100052b4:	68 57 ad 00 10       	push   0x1000ad57	100052b5: R_386_32	.text
100052b9:	53                   	push   ebx
100052ba:	e8 fc ff ff ff       	call   100052bb <begin(void*)+0x17c>	100052bb: R_386_PC32	File::File(char const*, Process*)
100052bf:	83 c4 10             	add    esp,0x10
100052c2:	89 5d ac             	mov    DWORD PTR [ebp-0x54],ebx
100052c5:	83 ec 08             	sub    esp,0x8
100052c8:	6a 01                	push   0x1
100052ca:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
100052cd:	e8 fc ff ff ff       	call   100052ce <begin(void*)+0x18f>	100052ce: R_386_PC32	File::open(FileOpenMode)
100052d2:	83 c4 10             	add    esp,0x10
100052d5:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
100052d8:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
100052dc:	75 39                	jne    10005317 <begin(void*)+0x1d8>
100052de:	83 ec 0c             	sub    esp,0xc
100052e1:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
100052e4:	e8 fc ff ff ff       	call   100052e5 <begin(void*)+0x1a6>	100052e5: R_386_PC32	File::close()
100052e9:	83 c4 10             	add    esp,0x10
100052ec:	83 ec 0c             	sub    esp,0xc
100052ef:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
100052f2:	e8 fc ff ff ff       	call   100052f3 <begin(void*)+0x1b4>	100052f3: R_386_PC32	File::unlink()
100052f7:	83 c4 10             	add    esp,0x10
100052fa:	83 7d ac 00          	cmp    DWORD PTR [ebp-0x54],0x0
100052fe:	74 44                	je     10005344 <begin(void*)+0x205>
10005300:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10005303:	8b 00                	mov    eax,DWORD PTR [eax]
10005305:	83 c0 08             	add    eax,0x8
10005308:	8b 00                	mov    eax,DWORD PTR [eax]
1000530a:	83 ec 0c             	sub    esp,0xc
1000530d:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10005310:	ff d0                	call   eax
10005312:	83 c4 10             	add    esp,0x10
10005315:	eb 2d                	jmp    10005344 <begin(void*)+0x205>
10005317:	83 7d ac 00          	cmp    DWORD PTR [ebp-0x54],0x0
1000531b:	74 15                	je     10005332 <begin(void*)+0x1f3>
1000531d:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10005320:	8b 00                	mov    eax,DWORD PTR [eax]
10005322:	83 c0 08             	add    eax,0x8
10005325:	8b 00                	mov    eax,DWORD PTR [eax]
10005327:	83 ec 0c             	sub    esp,0xc
1000532a:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
1000532d:	ff d0                	call   eax
1000532f:	83 c4 10             	add    esp,0x10
10005332:	83 ec 0c             	sub    esp,0xc
10005335:	6a 01                	push   0x1
10005337:	e8 fc ff ff ff       	call   10005338 <begin(void*)+0x1f9>	10005338: R_386_PC32	sleep(unsigned int)
1000533c:	83 c4 10             	add    esp,0x10
1000533f:	e9 55 ff ff ff       	jmp    10005299 <begin(void*)+0x15a>
10005344:	90                   	nop
10005345:	83 ec 0c             	sub    esp,0xc
10005348:	6a 01                	push   0x1
1000534a:	e8 fc ff ff ff       	call   1000534b <begin(void*)+0x20c>	1000534b: R_386_PC32	sleep(unsigned int)
1000534f:	83 c4 10             	add    esp,0x10
10005352:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005354: R_386_32	VgaText::hiddenOut
10005359:	a1 00 00 00 00       	mov    eax,ds:0x0	1000535a: R_386_32	term
1000535e:	83 ec 0c             	sub    esp,0xc
10005361:	50                   	push   eax
10005362:	e8 fc ff ff ff       	call   10005363 <begin(void*)+0x224>	10005363: R_386_PC32	setActiveTerminal(VgaText*)
10005367:	83 c4 10             	add    esp,0x10
1000536a:	e8 fc ff ff ff       	call   1000536b <begin(void*)+0x22c>	1000536b: R_386_PC32	drawBootScreen()
1000536f:	83 ec 0c             	sub    esp,0xc
10005372:	68 d5 ab 00 10       	push   0x1000abd5	10005373: R_386_32	.text
10005377:	6a 0d                	push   0xd
10005379:	6a 32                	push   0x32
1000537b:	6a 05                	push   0x5
1000537d:	6a 16                	push   0x16
1000537f:	e8 fc ff ff ff       	call   10005380 <begin(void*)+0x241>	10005380: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005384:	83 c4 20             	add    esp,0x20
10005387:	83 ec 0c             	sub    esp,0xc
1000538a:	6a 04                	push   0x4
1000538c:	e8 fc ff ff ff       	call   1000538d <begin(void*)+0x24e>	1000538d: R_386_PC32	bootInstallTasks(int)
10005391:	83 c4 10             	add    esp,0x10
10005394:	eb 01                	jmp    10005397 <begin(void*)+0x258>
10005396:	90                   	nop
10005397:	83 ec 0c             	sub    esp,0xc
1000539a:	6a 05                	push   0x5
1000539c:	e8 fc ff ff ff       	call   1000539d <begin(void*)+0x25e>	1000539d: R_386_PC32	bootInstallTasks(int)
100053a1:	83 c4 10             	add    esp,0x10
100053a4:	83 ec 0c             	sub    esp,0xc
100053a7:	68 64 ad 00 10       	push   0x1000ad64	100053a8: R_386_32	.text
100053ac:	e8 fc ff ff ff       	call   100053ad <begin(void*)+0x26e>	100053ad: R_386_PC32	CmOpen(char const*)
100053b1:	83 c4 10             	add    esp,0x10
100053b4:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
100053b7:	a0 00 00 00 00       	mov    al,ds:0x0	100053b8: R_386_32	createNewUserMode
100053bc:	83 f0 01             	xor    eax,0x1
100053bf:	84 c0                	test   al,al
100053c1:	74 15                	je     100053d8 <begin(void*)+0x299>
100053c3:	83 ec 04             	sub    esp,0x4
100053c6:	68 89 ad 00 10       	push   0x1000ad89	100053c7: R_386_32	.text
100053cb:	6a 00                	push   0x0
100053cd:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100053d0:	e8 fc ff ff ff       	call   100053d1 <begin(void*)+0x292>	100053d1: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100053d5:	83 c4 10             	add    esp,0x10
100053d8:	83 ec 08             	sub    esp,0x8
100053db:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
100053e1:	50                   	push   eax
100053e2:	68 00 00 00 00       	push   0x0	100053e3: R_386_32	currName
100053e7:	e8 fc ff ff ff       	call   100053e8 <begin(void*)+0x2a9>	100053e8: R_386_PC32	getRegsafeName(char*, char*)
100053ec:	83 c4 10             	add    esp,0x10
100053ef:	83 ec 08             	sub    esp,0x8
100053f2:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
100053f8:	50                   	push   eax
100053f9:	68 90 ad 00 10       	push   0x1000ad90	100053fa: R_386_32	.text
100053fe:	e8 fc ff ff ff       	call   100053ff <begin(void*)+0x2c0>	100053ff: R_386_PC32	Dbg::kprintf(char const*, ...)
10005403:	83 c4 10             	add    esp,0x10
10005406:	83 ec 08             	sub    esp,0x8
10005409:	68 a2 ad 00 10       	push   0x1000ada2	1000540a: R_386_32	.text
1000540e:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005414:	50                   	push   eax
10005415:	e8 fc ff ff ff       	call   10005416 <begin(void*)+0x2d7>	10005416: R_386_PC32	strcpy
1000541a:	83 c4 10             	add    esp,0x10
1000541d:	83 ec 08             	sub    esp,0x8
10005420:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10005426:	50                   	push   eax
10005427:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
1000542d:	50                   	push   eax
1000542e:	e8 fc ff ff ff       	call   1000542f <begin(void*)+0x2f0>	1000542f: R_386_PC32	strcat
10005433:	83 c4 10             	add    esp,0x10
10005436:	83 ec 08             	sub    esp,0x8
10005439:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
1000543f:	50                   	push   eax
10005440:	68 b0 ad 00 10       	push   0x1000adb0	10005441: R_386_32	.text
10005445:	e8 fc ff ff ff       	call   10005446 <begin(void*)+0x307>	10005446: R_386_PC32	Dbg::kprintf(char const*, ...)
1000544a:	83 c4 10             	add    esp,0x10
1000544d:	a0 00 00 00 00       	mov    al,ds:0x0	1000544e: R_386_32	createNewUserMode
10005452:	83 f0 01             	xor    eax,0x1
10005455:	84 c0                	test   al,al
10005457:	0f 84 60 03 00 00    	je     100057bd <begin(void*)+0x67e>
1000545d:	83 ec 08             	sub    esp,0x8
10005460:	68 89 ad 00 10       	push   0x1000ad89	10005461: R_386_32	.text
10005465:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005468:	e8 fc ff ff ff       	call   10005469 <begin(void*)+0x32a>	10005469: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000546d:	83 c4 10             	add    esp,0x10
10005470:	83 ec 08             	sub    esp,0x8
10005473:	50                   	push   eax
10005474:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005477:	e8 fc ff ff ff       	call   10005478 <begin(void*)+0x339>	10005478: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000547c:	83 c4 10             	add    esp,0x10
1000547f:	83 ec 04             	sub    esp,0x4
10005482:	68 c3 ad 00 10       	push   0x1000adc3	10005483: R_386_32	.text
10005487:	50                   	push   eax
10005488:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000548b:	e8 fc ff ff ff       	call   1000548c <begin(void*)+0x34d>	1000548c: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005490:	83 c4 10             	add    esp,0x10
10005493:	83 ec 08             	sub    esp,0x8
10005496:	68 89 ad 00 10       	push   0x1000ad89	10005497: R_386_32	.text
1000549b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000549e:	e8 fc ff ff ff       	call   1000549f <begin(void*)+0x360>	1000549f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100054a3:	83 c4 10             	add    esp,0x10
100054a6:	83 ec 08             	sub    esp,0x8
100054a9:	50                   	push   eax
100054aa:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054ad:	e8 fc ff ff ff       	call   100054ae <begin(void*)+0x36f>	100054ae: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100054b2:	83 c4 10             	add    esp,0x10
100054b5:	83 ec 04             	sub    esp,0x4
100054b8:	68 c9 ad 00 10       	push   0x1000adc9	100054b9: R_386_32	.text
100054bd:	50                   	push   eax
100054be:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054c1:	e8 fc ff ff ff       	call   100054c2 <begin(void*)+0x383>	100054c2: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100054c6:	83 c4 10             	add    esp,0x10
100054c9:	83 ec 08             	sub    esp,0x8
100054cc:	68 89 ad 00 10       	push   0x1000ad89	100054cd: R_386_32	.text
100054d1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054d4:	e8 fc ff ff ff       	call   100054d5 <begin(void*)+0x396>	100054d5: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100054d9:	83 c4 10             	add    esp,0x10
100054dc:	83 ec 08             	sub    esp,0x8
100054df:	50                   	push   eax
100054e0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054e3:	e8 fc ff ff ff       	call   100054e4 <begin(void*)+0x3a5>	100054e4: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100054e8:	83 c4 10             	add    esp,0x10
100054eb:	83 ec 04             	sub    esp,0x4
100054ee:	68 ce ad 00 10       	push   0x1000adce	100054ef: R_386_32	.text
100054f3:	50                   	push   eax
100054f4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054f7:	e8 fc ff ff ff       	call   100054f8 <begin(void*)+0x3b9>	100054f8: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100054fc:	83 c4 10             	add    esp,0x10
100054ff:	83 ec 08             	sub    esp,0x8
10005502:	68 89 ad 00 10       	push   0x1000ad89	10005503: R_386_32	.text
10005507:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000550a:	e8 fc ff ff ff       	call   1000550b <begin(void*)+0x3cc>	1000550b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000550f:	83 c4 10             	add    esp,0x10
10005512:	83 ec 08             	sub    esp,0x8
10005515:	50                   	push   eax
10005516:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005519:	e8 fc ff ff ff       	call   1000551a <begin(void*)+0x3db>	1000551a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000551e:	83 c4 10             	add    esp,0x10
10005521:	83 ec 04             	sub    esp,0x4
10005524:	68 d3 ad 00 10       	push   0x1000add3	10005525: R_386_32	.text
10005529:	50                   	push   eax
1000552a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000552d:	e8 fc ff ff ff       	call   1000552e <begin(void*)+0x3ef>	1000552e: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005532:	83 c4 10             	add    esp,0x10
10005535:	83 ec 08             	sub    esp,0x8
10005538:	68 89 ad 00 10       	push   0x1000ad89	10005539: R_386_32	.text
1000553d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005540:	e8 fc ff ff ff       	call   10005541 <begin(void*)+0x402>	10005541: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005545:	83 c4 10             	add    esp,0x10
10005548:	83 ec 08             	sub    esp,0x8
1000554b:	50                   	push   eax
1000554c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000554f:	e8 fc ff ff ff       	call   10005550 <begin(void*)+0x411>	10005550: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005554:	83 c4 10             	add    esp,0x10
10005557:	83 ec 04             	sub    esp,0x4
1000555a:	68 d9 ad 00 10       	push   0x1000add9	1000555b: R_386_32	.text
1000555f:	50                   	push   eax
10005560:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005563:	e8 fc ff ff ff       	call   10005564 <begin(void*)+0x425>	10005564: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005568:	83 c4 10             	add    esp,0x10
1000556b:	83 ec 08             	sub    esp,0x8
1000556e:	68 e3 ad 00 10       	push   0x1000ade3	1000556f: R_386_32	.text
10005573:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005576:	e8 fc ff ff ff       	call   10005577 <begin(void*)+0x438>	10005577: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000557b:	83 c4 10             	add    esp,0x10
1000557e:	83 ec 08             	sub    esp,0x8
10005581:	50                   	push   eax
10005582:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005585:	e8 fc ff ff ff       	call   10005586 <begin(void*)+0x447>	10005586: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000558a:	83 c4 10             	add    esp,0x10
1000558d:	83 ec 04             	sub    esp,0x4
10005590:	68 f4 ad 00 10       	push   0x1000adf4	10005591: R_386_32	.text
10005595:	50                   	push   eax
10005596:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005599:	e8 fc ff ff ff       	call   1000559a <begin(void*)+0x45b>	1000559a: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000559e:	83 c4 10             	add    esp,0x10
100055a1:	83 ec 08             	sub    esp,0x8
100055a4:	68 e3 ad 00 10       	push   0x1000ade3	100055a5: R_386_32	.text
100055a9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055ac:	e8 fc ff ff ff       	call   100055ad <begin(void*)+0x46e>	100055ad: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100055b1:	83 c4 10             	add    esp,0x10
100055b4:	83 ec 08             	sub    esp,0x8
100055b7:	50                   	push   eax
100055b8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055bb:	e8 fc ff ff ff       	call   100055bc <begin(void*)+0x47d>	100055bc: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100055c0:	83 c4 10             	add    esp,0x10
100055c3:	83 ec 04             	sub    esp,0x4
100055c6:	68 f9 ad 00 10       	push   0x1000adf9	100055c7: R_386_32	.text
100055cb:	50                   	push   eax
100055cc:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055cf:	e8 fc ff ff ff       	call   100055d0 <begin(void*)+0x491>	100055d0: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100055d4:	83 c4 10             	add    esp,0x10
100055d7:	83 ec 08             	sub    esp,0x8
100055da:	68 e3 ad 00 10       	push   0x1000ade3	100055db: R_386_32	.text
100055df:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055e2:	e8 fc ff ff ff       	call   100055e3 <begin(void*)+0x4a4>	100055e3: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100055e7:	83 c4 10             	add    esp,0x10
100055ea:	83 ec 08             	sub    esp,0x8
100055ed:	50                   	push   eax
100055ee:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055f1:	e8 fc ff ff ff       	call   100055f2 <begin(void*)+0x4b3>	100055f2: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100055f6:	83 c4 10             	add    esp,0x10
100055f9:	83 ec 04             	sub    esp,0x4
100055fc:	68 fe ad 00 10       	push   0x1000adfe	100055fd: R_386_32	.text
10005601:	50                   	push   eax
10005602:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005605:	e8 fc ff ff ff       	call   10005606 <begin(void*)+0x4c7>	10005606: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000560a:	83 c4 10             	add    esp,0x10
1000560d:	83 ec 08             	sub    esp,0x8
10005610:	68 e3 ad 00 10       	push   0x1000ade3	10005611: R_386_32	.text
10005615:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005618:	e8 fc ff ff ff       	call   10005619 <begin(void*)+0x4da>	10005619: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000561d:	83 c4 10             	add    esp,0x10
10005620:	83 ec 08             	sub    esp,0x8
10005623:	50                   	push   eax
10005624:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005627:	e8 fc ff ff ff       	call   10005628 <begin(void*)+0x4e9>	10005628: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000562c:	83 c4 10             	add    esp,0x10
1000562f:	83 ec 04             	sub    esp,0x4
10005632:	68 04 ae 00 10       	push   0x1000ae04	10005633: R_386_32	.text
10005637:	50                   	push   eax
10005638:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000563b:	e8 fc ff ff ff       	call   1000563c <begin(void*)+0x4fd>	1000563c: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005640:	83 c4 10             	add    esp,0x10
10005643:	83 ec 08             	sub    esp,0x8
10005646:	68 e3 ad 00 10       	push   0x1000ade3	10005647: R_386_32	.text
1000564b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000564e:	e8 fc ff ff ff       	call   1000564f <begin(void*)+0x510>	1000564f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005653:	83 c4 10             	add    esp,0x10
10005656:	83 ec 08             	sub    esp,0x8
10005659:	50                   	push   eax
1000565a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000565d:	e8 fc ff ff ff       	call   1000565e <begin(void*)+0x51f>	1000565e: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005662:	83 c4 10             	add    esp,0x10
10005665:	83 ec 04             	sub    esp,0x4
10005668:	68 09 ae 00 10       	push   0x1000ae09	10005669: R_386_32	.text
1000566d:	50                   	push   eax
1000566e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005671:	e8 fc ff ff ff       	call   10005672 <begin(void*)+0x533>	10005672: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005676:	83 c4 10             	add    esp,0x10
10005679:	83 ec 08             	sub    esp,0x8
1000567c:	68 e3 ad 00 10       	push   0x1000ade3	1000567d: R_386_32	.text
10005681:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005684:	e8 fc ff ff ff       	call   10005685 <begin(void*)+0x546>	10005685: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005689:	83 c4 10             	add    esp,0x10
1000568c:	83 ec 08             	sub    esp,0x8
1000568f:	50                   	push   eax
10005690:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005693:	e8 fc ff ff ff       	call   10005694 <begin(void*)+0x555>	10005694: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005698:	83 c4 10             	add    esp,0x10
1000569b:	83 ec 04             	sub    esp,0x4
1000569e:	68 0f ae 00 10       	push   0x1000ae0f	1000569f: R_386_32	.text
100056a3:	50                   	push   eax
100056a4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056a7:	e8 fc ff ff ff       	call   100056a8 <begin(void*)+0x569>	100056a8: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100056ac:	83 c4 10             	add    esp,0x10
100056af:	83 ec 08             	sub    esp,0x8
100056b2:	68 e3 ad 00 10       	push   0x1000ade3	100056b3: R_386_32	.text
100056b7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056ba:	e8 fc ff ff ff       	call   100056bb <begin(void*)+0x57c>	100056bb: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100056bf:	83 c4 10             	add    esp,0x10
100056c2:	83 ec 08             	sub    esp,0x8
100056c5:	50                   	push   eax
100056c6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056c9:	e8 fc ff ff ff       	call   100056ca <begin(void*)+0x58b>	100056ca: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100056ce:	83 c4 10             	add    esp,0x10
100056d1:	83 ec 04             	sub    esp,0x4
100056d4:	68 1a ae 00 10       	push   0x1000ae1a	100056d5: R_386_32	.text
100056d9:	50                   	push   eax
100056da:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056dd:	e8 fc ff ff ff       	call   100056de <begin(void*)+0x59f>	100056de: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100056e2:	83 c4 10             	add    esp,0x10
100056e5:	83 ec 08             	sub    esp,0x8
100056e8:	68 25 ae 00 10       	push   0x1000ae25	100056e9: R_386_32	.text
100056ed:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056f0:	e8 fc ff ff ff       	call   100056f1 <begin(void*)+0x5b2>	100056f1: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100056f5:	83 c4 10             	add    esp,0x10
100056f8:	83 ec 08             	sub    esp,0x8
100056fb:	50                   	push   eax
100056fc:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056ff:	e8 fc ff ff ff       	call   10005700 <begin(void*)+0x5c1>	10005700: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005704:	83 c4 10             	add    esp,0x10
10005707:	83 ec 04             	sub    esp,0x4
1000570a:	68 31 ae 00 10       	push   0x1000ae31	1000570b: R_386_32	.text
1000570f:	50                   	push   eax
10005710:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005713:	e8 fc ff ff ff       	call   10005714 <begin(void*)+0x5d5>	10005714: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005718:	83 c4 10             	add    esp,0x10
1000571b:	83 ec 08             	sub    esp,0x8
1000571e:	68 3a ae 00 10       	push   0x1000ae3a	1000571f: R_386_32	.text
10005723:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005726:	e8 fc ff ff ff       	call   10005727 <begin(void*)+0x5e8>	10005727: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000572b:	83 c4 10             	add    esp,0x10
1000572e:	83 ec 08             	sub    esp,0x8
10005731:	50                   	push   eax
10005732:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005735:	e8 fc ff ff ff       	call   10005736 <begin(void*)+0x5f7>	10005736: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000573a:	83 c4 10             	add    esp,0x10
1000573d:	83 ec 04             	sub    esp,0x4
10005740:	68 47 ae 00 10       	push   0x1000ae47	10005741: R_386_32	.text
10005745:	50                   	push   eax
10005746:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005749:	e8 fc ff ff ff       	call   1000574a <begin(void*)+0x60b>	1000574a: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000574e:	83 c4 10             	add    esp,0x10
10005751:	83 ec 08             	sub    esp,0x8
10005754:	68 3a ae 00 10       	push   0x1000ae3a	10005755: R_386_32	.text
10005759:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000575c:	e8 fc ff ff ff       	call   1000575d <begin(void*)+0x61e>	1000575d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005761:	83 c4 10             	add    esp,0x10
10005764:	83 ec 08             	sub    esp,0x8
10005767:	50                   	push   eax
10005768:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000576b:	e8 fc ff ff ff       	call   1000576c <begin(void*)+0x62d>	1000576c: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005770:	83 c4 10             	add    esp,0x10
10005773:	83 ec 04             	sub    esp,0x4
10005776:	68 4c ae 00 10       	push   0x1000ae4c	10005777: R_386_32	.text
1000577b:	50                   	push   eax
1000577c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000577f:	e8 fc ff ff ff       	call   10005780 <begin(void*)+0x641>	10005780: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005784:	83 c4 10             	add    esp,0x10
10005787:	83 ec 08             	sub    esp,0x8
1000578a:	68 3a ae 00 10       	push   0x1000ae3a	1000578b: R_386_32	.text
1000578f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005792:	e8 fc ff ff ff       	call   10005793 <begin(void*)+0x654>	10005793: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005797:	83 c4 10             	add    esp,0x10
1000579a:	83 ec 08             	sub    esp,0x8
1000579d:	50                   	push   eax
1000579e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057a1:	e8 fc ff ff ff       	call   100057a2 <begin(void*)+0x663>	100057a2: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100057a6:	83 c4 10             	add    esp,0x10
100057a9:	83 ec 04             	sub    esp,0x4
100057ac:	68 54 ae 00 10       	push   0x1000ae54	100057ad: R_386_32	.text
100057b1:	50                   	push   eax
100057b2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057b5:	e8 fc ff ff ff       	call   100057b6 <begin(void*)+0x677>	100057b6: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100057ba:	83 c4 10             	add    esp,0x10
100057bd:	83 ec 08             	sub    esp,0x8
100057c0:	68 5f ae 00 10       	push   0x1000ae5f	100057c1: R_386_32	.text
100057c5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057c8:	e8 fc ff ff ff       	call   100057c9 <begin(void*)+0x68a>	100057c9: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100057cd:	83 c4 10             	add    esp,0x10
100057d0:	83 ec 08             	sub    esp,0x8
100057d3:	50                   	push   eax
100057d4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057d7:	e8 fc ff ff ff       	call   100057d8 <begin(void*)+0x699>	100057d8: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100057dc:	83 c4 10             	add    esp,0x10
100057df:	83 ec 04             	sub    esp,0x4
100057e2:	8d 95 50 ff ff ff    	lea    edx,[ebp-0xb0]
100057e8:	52                   	push   edx
100057e9:	50                   	push   eax
100057ea:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057ed:	e8 fc ff ff ff       	call   100057ee <begin(void*)+0x6af>	100057ee: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100057f2:	83 c4 10             	add    esp,0x10
100057f5:	83 ec 08             	sub    esp,0x8
100057f8:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100057fe:	50                   	push   eax
100057ff:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005802:	e8 fc ff ff ff       	call   10005803 <begin(void*)+0x6c4>	10005803: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005807:	83 c4 10             	add    esp,0x10
1000580a:	83 ec 08             	sub    esp,0x8
1000580d:	50                   	push   eax
1000580e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005811:	e8 fc ff ff ff       	call   10005812 <begin(void*)+0x6d3>	10005812: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005816:	83 c4 10             	add    esp,0x10
10005819:	83 ec 04             	sub    esp,0x4
1000581c:	68 6c ae 00 10       	push   0x1000ae6c	1000581d: R_386_32	.text
10005821:	50                   	push   eax
10005822:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005825:	e8 fc ff ff ff       	call   10005826 <begin(void*)+0x6e7>	10005826: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000582a:	83 c4 10             	add    esp,0x10
1000582d:	83 ec 08             	sub    esp,0x8
10005830:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005836:	50                   	push   eax
10005837:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000583a:	e8 fc ff ff ff       	call   1000583b <begin(void*)+0x6fc>	1000583b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000583f:	83 c4 10             	add    esp,0x10
10005842:	83 ec 08             	sub    esp,0x8
10005845:	50                   	push   eax
10005846:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005849:	e8 fc ff ff ff       	call   1000584a <begin(void*)+0x70b>	1000584a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000584e:	83 c4 10             	add    esp,0x10
10005851:	83 ec 04             	sub    esp,0x4
10005854:	68 71 ae 00 10       	push   0x1000ae71	10005855: R_386_32	.text
10005859:	50                   	push   eax
1000585a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000585d:	e8 fc ff ff ff       	call   1000585e <begin(void*)+0x71f>	1000585e: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005862:	83 c4 10             	add    esp,0x10
10005865:	83 ec 08             	sub    esp,0x8
10005868:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
1000586e:	50                   	push   eax
1000586f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005872:	e8 fc ff ff ff       	call   10005873 <begin(void*)+0x734>	10005873: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005877:	83 c4 10             	add    esp,0x10
1000587a:	83 ec 08             	sub    esp,0x8
1000587d:	50                   	push   eax
1000587e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005881:	e8 fc ff ff ff       	call   10005882 <begin(void*)+0x743>	10005882: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005886:	83 c4 10             	add    esp,0x10
10005889:	83 ec 04             	sub    esp,0x4
1000588c:	68 7a ae 00 10       	push   0x1000ae7a	1000588d: R_386_32	.text
10005891:	50                   	push   eax
10005892:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005895:	e8 fc ff ff ff       	call   10005896 <begin(void*)+0x757>	10005896: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000589a:	83 c4 10             	add    esp,0x10
1000589d:	83 ec 08             	sub    esp,0x8
100058a0:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100058a6:	50                   	push   eax
100058a7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058aa:	e8 fc ff ff ff       	call   100058ab <begin(void*)+0x76c>	100058ab: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100058af:	83 c4 10             	add    esp,0x10
100058b2:	83 ec 08             	sub    esp,0x8
100058b5:	50                   	push   eax
100058b6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058b9:	e8 fc ff ff ff       	call   100058ba <begin(void*)+0x77b>	100058ba: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100058be:	83 c4 10             	add    esp,0x10
100058c1:	83 ec 04             	sub    esp,0x4
100058c4:	68 86 ae 00 10       	push   0x1000ae86	100058c5: R_386_32	.text
100058c9:	50                   	push   eax
100058ca:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058cd:	e8 fc ff ff ff       	call   100058ce <begin(void*)+0x78f>	100058ce: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100058d2:	83 c4 10             	add    esp,0x10
100058d5:	83 ec 08             	sub    esp,0x8
100058d8:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100058de:	50                   	push   eax
100058df:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058e2:	e8 fc ff ff ff       	call   100058e3 <begin(void*)+0x7a4>	100058e3: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100058e7:	83 c4 10             	add    esp,0x10
100058ea:	83 ec 08             	sub    esp,0x8
100058ed:	50                   	push   eax
100058ee:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058f1:	e8 fc ff ff ff       	call   100058f2 <begin(void*)+0x7b3>	100058f2: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100058f6:	83 c4 10             	add    esp,0x10
100058f9:	83 ec 04             	sub    esp,0x4
100058fc:	68 8e ae 00 10       	push   0x1000ae8e	100058fd: R_386_32	.text
10005901:	50                   	push   eax
10005902:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005905:	e8 fc ff ff ff       	call   10005906 <begin(void*)+0x7c7>	10005906: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000590a:	83 c4 10             	add    esp,0x10
1000590d:	83 ec 08             	sub    esp,0x8
10005910:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005916:	50                   	push   eax
10005917:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000591a:	e8 fc ff ff ff       	call   1000591b <begin(void*)+0x7dc>	1000591b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000591f:	83 c4 10             	add    esp,0x10
10005922:	83 ec 08             	sub    esp,0x8
10005925:	50                   	push   eax
10005926:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005929:	e8 fc ff ff ff       	call   1000592a <begin(void*)+0x7eb>	1000592a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000592e:	83 c4 10             	add    esp,0x10
10005931:	83 ec 04             	sub    esp,0x4
10005934:	68 98 ae 00 10       	push   0x1000ae98	10005935: R_386_32	.text
10005939:	50                   	push   eax
1000593a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000593d:	e8 fc ff ff ff       	call   1000593e <begin(void*)+0x7ff>	1000593e: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005942:	83 c4 10             	add    esp,0x10
10005945:	83 ec 08             	sub    esp,0x8
10005948:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
1000594e:	50                   	push   eax
1000594f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005952:	e8 fc ff ff ff       	call   10005953 <begin(void*)+0x814>	10005953: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005957:	83 c4 10             	add    esp,0x10
1000595a:	83 ec 08             	sub    esp,0x8
1000595d:	50                   	push   eax
1000595e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005961:	e8 fc ff ff ff       	call   10005962 <begin(void*)+0x823>	10005962: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005966:	83 c4 10             	add    esp,0x10
10005969:	83 ec 04             	sub    esp,0x4
1000596c:	68 a2 ae 00 10       	push   0x1000aea2	1000596d: R_386_32	.text
10005971:	50                   	push   eax
10005972:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005975:	e8 fc ff ff ff       	call   10005976 <begin(void*)+0x837>	10005976: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000597a:	83 c4 10             	add    esp,0x10
1000597d:	83 ec 08             	sub    esp,0x8
10005980:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005986:	50                   	push   eax
10005987:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000598a:	e8 fc ff ff ff       	call   1000598b <begin(void*)+0x84c>	1000598b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000598f:	83 c4 10             	add    esp,0x10
10005992:	83 ec 08             	sub    esp,0x8
10005995:	50                   	push   eax
10005996:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005999:	e8 fc ff ff ff       	call   1000599a <begin(void*)+0x85b>	1000599a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000599e:	83 c4 10             	add    esp,0x10
100059a1:	83 ec 04             	sub    esp,0x4
100059a4:	68 ab ae 00 10       	push   0x1000aeab	100059a5: R_386_32	.text
100059a9:	50                   	push   eax
100059aa:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059ad:	e8 fc ff ff ff       	call   100059ae <begin(void*)+0x86f>	100059ae: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100059b2:	83 c4 10             	add    esp,0x10
100059b5:	83 ec 08             	sub    esp,0x8
100059b8:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100059be:	50                   	push   eax
100059bf:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059c2:	e8 fc ff ff ff       	call   100059c3 <begin(void*)+0x884>	100059c3: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100059c7:	83 c4 10             	add    esp,0x10
100059ca:	83 ec 08             	sub    esp,0x8
100059cd:	50                   	push   eax
100059ce:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059d1:	e8 fc ff ff ff       	call   100059d2 <begin(void*)+0x893>	100059d2: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100059d6:	83 c4 10             	add    esp,0x10
100059d9:	83 ec 04             	sub    esp,0x4
100059dc:	68 b2 ae 00 10       	push   0x1000aeb2	100059dd: R_386_32	.text
100059e1:	50                   	push   eax
100059e2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059e5:	e8 fc ff ff ff       	call   100059e6 <begin(void*)+0x8a7>	100059e6: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100059ea:	83 c4 10             	add    esp,0x10
100059ed:	83 ec 08             	sub    esp,0x8
100059f0:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100059f6:	50                   	push   eax
100059f7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059fa:	e8 fc ff ff ff       	call   100059fb <begin(void*)+0x8bc>	100059fb: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100059ff:	83 c4 10             	add    esp,0x10
10005a02:	83 ec 08             	sub    esp,0x8
10005a05:	50                   	push   eax
10005a06:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a09:	e8 fc ff ff ff       	call   10005a0a <begin(void*)+0x8cb>	10005a0a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005a0e:	83 c4 10             	add    esp,0x10
10005a11:	83 ec 04             	sub    esp,0x4
10005a14:	68 b8 ae 00 10       	push   0x1000aeb8	10005a15: R_386_32	.text
10005a19:	50                   	push   eax
10005a1a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a1d:	e8 fc ff ff ff       	call   10005a1e <begin(void*)+0x8df>	10005a1e: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005a22:	83 c4 10             	add    esp,0x10
10005a25:	a0 00 00 00 00       	mov    al,ds:0x0	10005a26: R_386_32	createNewUserMode
10005a2a:	83 f0 01             	xor    eax,0x1
10005a2d:	84 c0                	test   al,al
10005a2f:	0f 84 be 03 00 00    	je     10005df3 <begin(void*)+0xcb4>
10005a35:	a1 00 00 00 00       	mov    eax,ds:0x0	10005a36: R_386_32	modesel
10005a3a:	89 c3                	mov    ebx,eax
10005a3c:	89 c6                	mov    esi,eax
10005a3e:	c1 fe 1f             	sar    esi,0x1f
10005a41:	83 ec 08             	sub    esp,0x8
10005a44:	68 c3 ae 00 10       	push   0x1000aec3	10005a45: R_386_32	.text
10005a49:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a4c:	e8 fc ff ff ff       	call   10005a4d <begin(void*)+0x90e>	10005a4d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a51:	83 c4 10             	add    esp,0x10
10005a54:	83 ec 08             	sub    esp,0x8
10005a57:	50                   	push   eax
10005a58:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a5b:	e8 fc ff ff ff       	call   10005a5c <begin(void*)+0x91d>	10005a5c: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005a60:	83 c4 10             	add    esp,0x10
10005a63:	83 ec 08             	sub    esp,0x8
10005a66:	6a 6a                	push   0x6a
10005a68:	56                   	push   esi
10005a69:	53                   	push   ebx
10005a6a:	68 cf ae 00 10       	push   0x1000aecf	10005a6b: R_386_32	.text
10005a6f:	50                   	push   eax
10005a70:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a73:	e8 fc ff ff ff       	call   10005a74 <begin(void*)+0x935>	10005a74: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
10005a78:	83 c4 20             	add    esp,0x20
10005a7b:	a1 00 00 00 00       	mov    eax,ds:0x0	10005a7c: R_386_32	tzsel
10005a80:	89 c3                	mov    ebx,eax
10005a82:	89 c6                	mov    esi,eax
10005a84:	c1 fe 1f             	sar    esi,0x1f
10005a87:	83 ec 08             	sub    esp,0x8
10005a8a:	68 25 ae 00 10       	push   0x1000ae25	10005a8b: R_386_32	.text
10005a8f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a92:	e8 fc ff ff ff       	call   10005a93 <begin(void*)+0x954>	10005a93: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a97:	83 c4 10             	add    esp,0x10
10005a9a:	83 ec 08             	sub    esp,0x8
10005a9d:	50                   	push   eax
10005a9e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005aa1:	e8 fc ff ff ff       	call   10005aa2 <begin(void*)+0x963>	10005aa2: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005aa6:	83 c4 10             	add    esp,0x10
10005aa9:	83 ec 08             	sub    esp,0x8
10005aac:	6a 6a                	push   0x6a
10005aae:	56                   	push   esi
10005aaf:	53                   	push   ebx
10005ab0:	68 d7 ae 00 10       	push   0x1000aed7	10005ab1: R_386_32	.text
10005ab5:	50                   	push   eax
10005ab6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ab9:	e8 fc ff ff ff       	call   10005aba <begin(void*)+0x97b>	10005aba: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
10005abe:	83 c4 20             	add    esp,0x20
10005ac1:	a1 00 00 00 00       	mov    eax,ds:0x0	10005ac2: R_386_32	tzsel
10005ac6:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10005ac9: R_386_32	timezoneStrings
10005acd:	8d 58 01             	lea    ebx,[eax+0x1]
10005ad0:	83 ec 08             	sub    esp,0x8
10005ad3:	68 e2 ae 00 10       	push   0x1000aee2	10005ad4: R_386_32	.text
10005ad8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005adb:	e8 fc ff ff ff       	call   10005adc <begin(void*)+0x99d>	10005adc: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005ae0:	83 c4 10             	add    esp,0x10
10005ae3:	83 ec 04             	sub    esp,0x4
10005ae6:	53                   	push   ebx
10005ae7:	50                   	push   eax
10005ae8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005aeb:	e8 fc ff ff ff       	call   10005aec <begin(void*)+0x9ad>	10005aec: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005af0:	83 c4 10             	add    esp,0x10
10005af3:	83 ec 08             	sub    esp,0x8
10005af6:	68 f7 ae 00 10       	push   0x1000aef7	10005af7: R_386_32	.text
10005afb:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005afe:	e8 fc ff ff ff       	call   10005aff <begin(void*)+0x9c0>	10005aff: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b03:	83 c4 10             	add    esp,0x10
10005b06:	83 ec 04             	sub    esp,0x4
10005b09:	68 00 00 00 00       	push   0x0	10005b0a: R_386_32	currName
10005b0e:	50                   	push   eax
10005b0f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b12:	e8 fc ff ff ff       	call   10005b13 <begin(void*)+0x9d4>	10005b13: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005b17:	83 c4 10             	add    esp,0x10
10005b1a:	83 ec 08             	sub    esp,0x8
10005b1d:	68 09 af 00 10       	push   0x1000af09	10005b1e: R_386_32	.text
10005b22:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b25:	e8 fc ff ff ff       	call   10005b26 <begin(void*)+0x9e7>	10005b26: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b2a:	83 c4 10             	add    esp,0x10
10005b2d:	83 ec 04             	sub    esp,0x4
10005b30:	68 00 00 00 00       	push   0x0	10005b31: R_386_32	currComp
10005b35:	50                   	push   eax
10005b36:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b39:	e8 fc ff ff ff       	call   10005b3a <begin(void*)+0x9fb>	10005b3a: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005b3e:	83 c4 10             	add    esp,0x10
10005b41:	83 ec 08             	sub    esp,0x8
10005b44:	68 1e af 00 10       	push   0x1000af1e	10005b45: R_386_32	.text
10005b49:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b4c:	e8 fc ff ff ff       	call   10005b4d <begin(void*)+0xa0e>	10005b4d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b51:	83 c4 10             	add    esp,0x10
10005b54:	83 ec 04             	sub    esp,0x4
10005b57:	68 00 00 00 00       	push   0x0	10005b58: R_386_32	pkeybuf
10005b5c:	50                   	push   eax
10005b5d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b60:	e8 fc ff ff ff       	call   10005b61 <begin(void*)+0xa22>	10005b61: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005b65:	83 c4 10             	add    esp,0x10
10005b68:	83 ec 08             	sub    esp,0x8
10005b6b:	68 36 af 00 10       	push   0x1000af36	10005b6c: R_386_32	.text
10005b70:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b73:	e8 fc ff ff ff       	call   10005b74 <begin(void*)+0xa35>	10005b74: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b78:	83 c4 10             	add    esp,0x10
10005b7b:	83 ec 08             	sub    esp,0x8
10005b7e:	50                   	push   eax
10005b7f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b82:	e8 fc ff ff ff       	call   10005b83 <begin(void*)+0xa44>	10005b83: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005b87:	83 c4 10             	add    esp,0x10
10005b8a:	83 ec 04             	sub    esp,0x4
10005b8d:	68 4c af 00 10       	push   0x1000af4c	10005b8e: R_386_32	.text
10005b92:	50                   	push   eax
10005b93:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b96:	e8 fc ff ff ff       	call   10005b97 <begin(void*)+0xa58>	10005b97: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005b9b:	83 c4 10             	add    esp,0x10
10005b9e:	83 ec 08             	sub    esp,0x8
10005ba1:	68 50 af 00 10       	push   0x1000af50	10005ba2: R_386_32	.text
10005ba6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ba9:	e8 fc ff ff ff       	call   10005baa <begin(void*)+0xa6b>	10005baa: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005bae:	83 c4 10             	add    esp,0x10
10005bb1:	83 ec 08             	sub    esp,0x8
10005bb4:	50                   	push   eax
10005bb5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bb8:	e8 fc ff ff ff       	call   10005bb9 <begin(void*)+0xa7a>	10005bb9: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005bbd:	83 c4 10             	add    esp,0x10
10005bc0:	83 ec 04             	sub    esp,0x4
10005bc3:	68 4c af 00 10       	push   0x1000af4c	10005bc4: R_386_32	.text
10005bc8:	50                   	push   eax
10005bc9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bcc:	e8 fc ff ff ff       	call   10005bcd <begin(void*)+0xa8e>	10005bcd: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005bd1:	83 c4 10             	add    esp,0x10
10005bd4:	83 ec 08             	sub    esp,0x8
10005bd7:	68 67 af 00 10       	push   0x1000af67	10005bd8: R_386_32	.text
10005bdc:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bdf:	e8 fc ff ff ff       	call   10005be0 <begin(void*)+0xaa1>	10005be0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005be4:	83 c4 10             	add    esp,0x10
10005be7:	83 ec 08             	sub    esp,0x8
10005bea:	50                   	push   eax
10005beb:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bee:	e8 fc ff ff ff       	call   10005bef <begin(void*)+0xab0>	10005bef: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005bf3:	83 c4 10             	add    esp,0x10
10005bf6:	83 ec 04             	sub    esp,0x4
10005bf9:	68 4c af 00 10       	push   0x1000af4c	10005bfa: R_386_32	.text
10005bfe:	50                   	push   eax
10005bff:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c02:	e8 fc ff ff ff       	call   10005c03 <begin(void*)+0xac4>	10005c03: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005c07:	83 c4 10             	add    esp,0x10
10005c0a:	83 ec 08             	sub    esp,0x8
10005c0d:	68 7d af 00 10       	push   0x1000af7d	10005c0e: R_386_32	.text
10005c12:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c15:	e8 fc ff ff ff       	call   10005c16 <begin(void*)+0xad7>	10005c16: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c1a:	83 c4 10             	add    esp,0x10
10005c1d:	83 ec 08             	sub    esp,0x8
10005c20:	50                   	push   eax
10005c21:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c24:	e8 fc ff ff ff       	call   10005c25 <begin(void*)+0xae6>	10005c25: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005c29:	83 c4 10             	add    esp,0x10
10005c2c:	83 ec 04             	sub    esp,0x4
10005c2f:	68 4c af 00 10       	push   0x1000af4c	10005c30: R_386_32	.text
10005c34:	50                   	push   eax
10005c35:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c38:	e8 fc ff ff ff       	call   10005c39 <begin(void*)+0xafa>	10005c39: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005c3d:	83 c4 10             	add    esp,0x10
10005c40:	83 ec 08             	sub    esp,0x8
10005c43:	68 93 af 00 10       	push   0x1000af93	10005c44: R_386_32	.text
10005c48:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c4b:	e8 fc ff ff ff       	call   10005c4c <begin(void*)+0xb0d>	10005c4c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c50:	83 c4 10             	add    esp,0x10
10005c53:	83 ec 08             	sub    esp,0x8
10005c56:	50                   	push   eax
10005c57:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c5a:	e8 fc ff ff ff       	call   10005c5b <begin(void*)+0xb1c>	10005c5b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005c5f:	83 c4 10             	add    esp,0x10
10005c62:	83 ec 04             	sub    esp,0x4
10005c65:	68 4c af 00 10       	push   0x1000af4c	10005c66: R_386_32	.text
10005c6a:	50                   	push   eax
10005c6b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c6e:	e8 fc ff ff ff       	call   10005c6f <begin(void*)+0xb30>	10005c6f: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005c73:	83 c4 10             	add    esp,0x10
10005c76:	83 ec 08             	sub    esp,0x8
10005c79:	68 aa af 00 10       	push   0x1000afaa	10005c7a: R_386_32	.text
10005c7e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c81:	e8 fc ff ff ff       	call   10005c82 <begin(void*)+0xb43>	10005c82: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c86:	83 c4 10             	add    esp,0x10
10005c89:	83 ec 04             	sub    esp,0x4
10005c8c:	68 c4 af 00 10       	push   0x1000afc4	10005c8d: R_386_32	.text
10005c91:	50                   	push   eax
10005c92:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c95:	e8 fc ff ff ff       	call   10005c96 <begin(void*)+0xb57>	10005c96: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005c9a:	83 c4 10             	add    esp,0x10
10005c9d:	83 ec 08             	sub    esp,0x8
10005ca0:	68 e4 af 00 10       	push   0x1000afe4	10005ca1: R_386_32	.text
10005ca5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ca8:	e8 fc ff ff ff       	call   10005ca9 <begin(void*)+0xb6a>	10005ca9: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005cad:	83 c4 10             	add    esp,0x10
10005cb0:	83 ec 04             	sub    esp,0x4
10005cb3:	68 ff af 00 10       	push   0x1000afff	10005cb4: R_386_32	.text
10005cb8:	50                   	push   eax
10005cb9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cbc:	e8 fc ff ff ff       	call   10005cbd <begin(void*)+0xb7e>	10005cbd: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005cc1:	83 c4 10             	add    esp,0x10
10005cc4:	83 ec 08             	sub    esp,0x8
10005cc7:	68 0d b0 00 10       	push   0x1000b00d	10005cc8: R_386_32	.text
10005ccc:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ccf:	e8 fc ff ff ff       	call   10005cd0 <begin(void*)+0xb91>	10005cd0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005cd4:	83 c4 10             	add    esp,0x10
10005cd7:	83 ec 04             	sub    esp,0x4
10005cda:	68 27 b0 00 10       	push   0x1000b027	10005cdb: R_386_32	.text
10005cdf:	50                   	push   eax
10005ce0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ce3:	e8 fc ff ff ff       	call   10005ce4 <begin(void*)+0xba5>	10005ce4: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005ce8:	83 c4 10             	add    esp,0x10
10005ceb:	83 ec 08             	sub    esp,0x8
10005cee:	68 3f b0 00 10       	push   0x1000b03f	10005cef: R_386_32	.text
10005cf3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cf6:	e8 fc ff ff ff       	call   10005cf7 <begin(void*)+0xbb8>	10005cf7: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005cfb:	83 c4 10             	add    esp,0x10
10005cfe:	83 ec 04             	sub    esp,0x4
10005d01:	68 27 b0 00 10       	push   0x1000b027	10005d02: R_386_32	.text
10005d06:	50                   	push   eax
10005d07:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d0a:	e8 fc ff ff ff       	call   10005d0b <begin(void*)+0xbcc>	10005d0b: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005d0f:	83 c4 10             	add    esp,0x10
10005d12:	83 ec 08             	sub    esp,0x8
10005d15:	68 59 b0 00 10       	push   0x1000b059	10005d16: R_386_32	.text
10005d1a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d1d:	e8 fc ff ff ff       	call   10005d1e <begin(void*)+0xbdf>	10005d1e: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005d22:	83 c4 10             	add    esp,0x10
10005d25:	83 ec 04             	sub    esp,0x4
10005d28:	68 27 b0 00 10       	push   0x1000b027	10005d29: R_386_32	.text
10005d2d:	50                   	push   eax
10005d2e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d31:	e8 fc ff ff ff       	call   10005d32 <begin(void*)+0xbf3>	10005d32: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005d36:	83 c4 10             	add    esp,0x10
10005d39:	83 ec 08             	sub    esp,0x8
10005d3c:	68 36 af 00 10       	push   0x1000af36	10005d3d: R_386_32	.text
10005d41:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d44:	e8 fc ff ff ff       	call   10005d45 <begin(void*)+0xc06>	10005d45: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005d49:	83 c4 10             	add    esp,0x10
10005d4c:	83 ec 08             	sub    esp,0x8
10005d4f:	50                   	push   eax
10005d50:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d53:	e8 fc ff ff ff       	call   10005d54 <begin(void*)+0xc15>	10005d54: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005d58:	83 c4 10             	add    esp,0x10
10005d5b:	83 ec 04             	sub    esp,0x4
10005d5e:	68 74 b0 00 10       	push   0x1000b074	10005d5f: R_386_32	.text
10005d63:	50                   	push   eax
10005d64:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d67:	e8 fc ff ff ff       	call   10005d68 <begin(void*)+0xc29>	10005d68: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005d6c:	83 c4 10             	add    esp,0x10
10005d6f:	83 ec 08             	sub    esp,0x8
10005d72:	68 50 af 00 10       	push   0x1000af50	10005d73: R_386_32	.text
10005d77:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d7a:	e8 fc ff ff ff       	call   10005d7b <begin(void*)+0xc3c>	10005d7b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005d7f:	83 c4 10             	add    esp,0x10
10005d82:	83 ec 08             	sub    esp,0x8
10005d85:	50                   	push   eax
10005d86:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d89:	e8 fc ff ff ff       	call   10005d8a <begin(void*)+0xc4b>	10005d8a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005d8e:	83 c4 10             	add    esp,0x10
10005d91:	83 ec 04             	sub    esp,0x4
10005d94:	68 74 b0 00 10       	push   0x1000b074	10005d95: R_386_32	.text
10005d99:	50                   	push   eax
10005d9a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d9d:	e8 fc ff ff ff       	call   10005d9e <begin(void*)+0xc5f>	10005d9e: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005da2:	83 c4 10             	add    esp,0x10
10005da5:	83 ec 08             	sub    esp,0x8
10005da8:	68 78 b0 00 10       	push   0x1000b078	10005da9: R_386_32	.text
10005dad:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005db0:	e8 fc ff ff ff       	call   10005db1 <begin(void*)+0xc72>	10005db1: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005db5:	83 c4 10             	add    esp,0x10
10005db8:	83 ec 04             	sub    esp,0x4
10005dbb:	68 92 b0 00 10       	push   0x1000b092	10005dbc: R_386_32	.text
10005dc0:	50                   	push   eax
10005dc1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005dc4:	e8 fc ff ff ff       	call   10005dc5 <begin(void*)+0xc86>	10005dc5: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005dc9:	83 c4 10             	add    esp,0x10
10005dcc:	83 ec 08             	sub    esp,0x8
10005dcf:	68 b0 b0 00 10       	push   0x1000b0b0	10005dd0: R_386_32	.text
10005dd4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005dd7:	e8 fc ff ff ff       	call   10005dd8 <begin(void*)+0xc99>	10005dd8: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005ddc:	83 c4 10             	add    esp,0x10
10005ddf:	83 ec 04             	sub    esp,0x4
10005de2:	68 cb b0 00 10       	push   0x1000b0cb	10005de3: R_386_32	.text
10005de7:	50                   	push   eax
10005de8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005deb:	e8 fc ff ff ff       	call   10005dec <begin(void*)+0xcad>	10005dec: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005df0:	83 c4 10             	add    esp,0x10
10005df3:	83 ec 08             	sub    esp,0x8
10005df6:	68 a2 ad 00 10       	push   0x1000ada2	10005df7: R_386_32	.text
10005dfb:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005e01:	50                   	push   eax
10005e02:	e8 fc ff ff ff       	call   10005e03 <begin(void*)+0xcc4>	10005e03: R_386_PC32	strcpy
10005e07:	83 c4 10             	add    esp,0x10
10005e0a:	83 ec 08             	sub    esp,0x8
10005e0d:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10005e13:	50                   	push   eax
10005e14:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005e1a:	50                   	push   eax
10005e1b:	e8 fc ff ff ff       	call   10005e1c <begin(void*)+0xcdd>	10005e1c: R_386_PC32	strcat
10005e20:	83 c4 10             	add    esp,0x10
10005e23:	83 ec 08             	sub    esp,0x8
10005e26:	68 db b0 00 10       	push   0x1000b0db	10005e27: R_386_32	.text
10005e2b:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005e31:	50                   	push   eax
10005e32:	e8 fc ff ff ff       	call   10005e33 <begin(void*)+0xcf4>	10005e33: R_386_PC32	strcat
10005e37:	83 c4 10             	add    esp,0x10
10005e3a:	83 ec 08             	sub    esp,0x8
10005e3d:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005e43:	50                   	push   eax
10005e44:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005e47:	e8 fc ff ff ff       	call   10005e48 <begin(void*)+0xd09>	10005e48: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005e4c:	83 c4 10             	add    esp,0x10
10005e4f:	83 ec 04             	sub    esp,0x4
10005e52:	68 00 00 00 00       	push   0x0	10005e53: R_386_32	passwhash
10005e57:	50                   	push   eax
10005e58:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005e5b:	e8 fc ff ff ff       	call   10005e5c <begin(void*)+0xd1d>	10005e5c: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005e60:	83 c4 10             	add    esp,0x10
10005e63:	83 ec 08             	sub    esp,0x8
10005e66:	68 a2 ad 00 10       	push   0x1000ada2	10005e67: R_386_32	.text
10005e6b:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005e71:	50                   	push   eax
10005e72:	e8 fc ff ff ff       	call   10005e73 <begin(void*)+0xd34>	10005e73: R_386_PC32	strcpy
10005e77:	83 c4 10             	add    esp,0x10
10005e7a:	83 ec 08             	sub    esp,0x8
10005e7d:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10005e83:	50                   	push   eax
10005e84:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005e8a:	50                   	push   eax
10005e8b:	e8 fc ff ff ff       	call   10005e8c <begin(void*)+0xd4d>	10005e8c: R_386_PC32	strcat
10005e90:	83 c4 10             	add    esp,0x10
10005e93:	83 ec 08             	sub    esp,0x8
10005e96:	68 e5 b0 00 10       	push   0x1000b0e5	10005e97: R_386_32	.text
10005e9b:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005ea1:	50                   	push   eax
10005ea2:	e8 fc ff ff ff       	call   10005ea3 <begin(void*)+0xd64>	10005ea3: R_386_PC32	strcat
10005ea7:	83 c4 10             	add    esp,0x10
10005eaa:	83 ec 08             	sub    esp,0x8
10005ead:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005eb3:	50                   	push   eax
10005eb4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005eb7:	e8 fc ff ff ff       	call   10005eb8 <begin(void*)+0xd79>	10005eb8: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005ebc:	83 c4 10             	add    esp,0x10
10005ebf:	83 ec 04             	sub    esp,0x4
10005ec2:	68 00 00 00 00       	push   0x0	10005ec3: R_386_32	passwsalt
10005ec7:	50                   	push   eax
10005ec8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ecb:	e8 fc ff ff ff       	call   10005ecc <begin(void*)+0xd8d>	10005ecc: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005ed0:	83 c4 10             	add    esp,0x10
10005ed3:	83 ec 08             	sub    esp,0x8
10005ed6:	68 a2 ad 00 10       	push   0x1000ada2	10005ed7: R_386_32	.text
10005edb:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005ee1:	50                   	push   eax
10005ee2:	e8 fc ff ff ff       	call   10005ee3 <begin(void*)+0xda4>	10005ee3: R_386_PC32	strcpy
10005ee7:	83 c4 10             	add    esp,0x10
10005eea:	83 ec 08             	sub    esp,0x8
10005eed:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10005ef3:	50                   	push   eax
10005ef4:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005efa:	50                   	push   eax
10005efb:	e8 fc ff ff ff       	call   10005efc <begin(void*)+0xdbd>	10005efc: R_386_PC32	strcat
10005f00:	83 c4 10             	add    esp,0x10
10005f03:	83 ec 08             	sub    esp,0x8
10005f06:	68 eb b0 00 10       	push   0x1000b0eb	10005f07: R_386_32	.text
10005f0b:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005f11:	50                   	push   eax
10005f12:	e8 fc ff ff ff       	call   10005f13 <begin(void*)+0xdd4>	10005f13: R_386_PC32	strcat
10005f17:	83 c4 10             	add    esp,0x10
10005f1a:	83 ec 08             	sub    esp,0x8
10005f1d:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005f23:	50                   	push   eax
10005f24:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005f27:	e8 fc ff ff ff       	call   10005f28 <begin(void*)+0xde9>	10005f28: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005f2c:	83 c4 10             	add    esp,0x10
10005f2f:	83 ec 04             	sub    esp,0x4
10005f32:	68 00 00 00 00       	push   0x0	10005f33: R_386_32	currName
10005f37:	50                   	push   eax
10005f38:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005f3b:	e8 fc ff ff ff       	call   10005f3c <begin(void*)+0xdfd>	10005f3c: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005f40:	83 c4 10             	add    esp,0x10
10005f43:	83 ec 08             	sub    esp,0x8
10005f46:	68 9a a5 00 10       	push   0x1000a59a	10005f47: R_386_32	.text
10005f4b:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10005f51:	50                   	push   eax
10005f52:	e8 fc ff ff ff       	call   10005f53 <begin(void*)+0xe14>	10005f53: R_386_PC32	strcpy
10005f57:	83 c4 10             	add    esp,0x10
10005f5a:	83 ec 08             	sub    esp,0x8
10005f5d:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10005f63:	50                   	push   eax
10005f64:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10005f6a:	50                   	push   eax
10005f6b:	e8 fc ff ff ff       	call   10005f6c <begin(void*)+0xe2d>	10005f6c: R_386_PC32	strcat
10005f70:	83 c4 10             	add    esp,0x10
10005f73:	83 ec 08             	sub    esp,0x8
10005f76:	68 a4 a5 00 10       	push   0x1000a5a4	10005f77: R_386_32	.text
10005f7b:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10005f81:	50                   	push   eax
10005f82:	e8 fc ff ff ff       	call   10005f83 <begin(void*)+0xe44>	10005f83: R_386_PC32	strcat
10005f87:	83 c4 10             	add    esp,0x10
10005f8a:	83 ec 08             	sub    esp,0x8
10005f8d:	68 a2 ad 00 10       	push   0x1000ada2	10005f8e: R_386_32	.text
10005f92:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005f98:	50                   	push   eax
10005f99:	e8 fc ff ff ff       	call   10005f9a <begin(void*)+0xe5b>	10005f9a: R_386_PC32	strcpy
10005f9e:	83 c4 10             	add    esp,0x10
10005fa1:	83 ec 08             	sub    esp,0x8
10005fa4:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10005faa:	50                   	push   eax
10005fab:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005fb1:	50                   	push   eax
10005fb2:	e8 fc ff ff ff       	call   10005fb3 <begin(void*)+0xe74>	10005fb3: R_386_PC32	strcat
10005fb7:	83 c4 10             	add    esp,0x10
10005fba:	83 ec 08             	sub    esp,0x8
10005fbd:	68 f8 b0 00 10       	push   0x1000b0f8	10005fbe: R_386_32	.text
10005fc2:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005fc8:	50                   	push   eax
10005fc9:	e8 fc ff ff ff       	call   10005fca <begin(void*)+0xe8b>	10005fca: R_386_PC32	strcat
10005fce:	83 c4 10             	add    esp,0x10
10005fd1:	83 ec 08             	sub    esp,0x8
10005fd4:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005fda:	50                   	push   eax
10005fdb:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005fde:	e8 fc ff ff ff       	call   10005fdf <begin(void*)+0xea0>	10005fdf: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005fe3:	83 c4 10             	add    esp,0x10
10005fe6:	83 ec 04             	sub    esp,0x4
10005fe9:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
10005fef:	52                   	push   edx
10005ff0:	50                   	push   eax
10005ff1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ff4:	e8 fc ff ff ff       	call   10005ff5 <begin(void*)+0xeb6>	10005ff5: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005ff9:	83 c4 10             	add    esp,0x10
10005ffc:	83 ec 08             	sub    esp,0x8
10005fff:	68 9a a5 00 10       	push   0x1000a59a	10006000: R_386_32	.text
10006004:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000600a:	50                   	push   eax
1000600b:	e8 fc ff ff ff       	call   1000600c <begin(void*)+0xecd>	1000600c: R_386_PC32	strcpy
10006010:	83 c4 10             	add    esp,0x10
10006013:	83 ec 08             	sub    esp,0x8
10006016:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
1000601c:	50                   	push   eax
1000601d:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006023:	50                   	push   eax
10006024:	e8 fc ff ff ff       	call   10006025 <begin(void*)+0xee6>	10006025: R_386_PC32	strcat
10006029:	83 c4 10             	add    esp,0x10
1000602c:	83 ec 08             	sub    esp,0x8
1000602f:	68 ad a5 00 10       	push   0x1000a5ad	10006030: R_386_32	.text
10006034:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000603a:	50                   	push   eax
1000603b:	e8 fc ff ff ff       	call   1000603c <begin(void*)+0xefd>	1000603c: R_386_PC32	strcat
10006040:	83 c4 10             	add    esp,0x10
10006043:	83 ec 08             	sub    esp,0x8
10006046:	68 a2 ad 00 10       	push   0x1000ada2	10006047: R_386_32	.text
1000604b:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006051:	50                   	push   eax
10006052:	e8 fc ff ff ff       	call   10006053 <begin(void*)+0xf14>	10006053: R_386_PC32	strcpy
10006057:	83 c4 10             	add    esp,0x10
1000605a:	83 ec 08             	sub    esp,0x8
1000605d:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10006063:	50                   	push   eax
10006064:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
1000606a:	50                   	push   eax
1000606b:	e8 fc ff ff ff       	call   1000606c <begin(void*)+0xf2d>	1000606c: R_386_PC32	strcat
10006070:	83 c4 10             	add    esp,0x10
10006073:	83 ec 08             	sub    esp,0x8
10006076:	68 01 b1 00 10       	push   0x1000b101	10006077: R_386_32	.text
1000607b:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006081:	50                   	push   eax
10006082:	e8 fc ff ff ff       	call   10006083 <begin(void*)+0xf44>	10006083: R_386_PC32	strcat
10006087:	83 c4 10             	add    esp,0x10
1000608a:	83 ec 08             	sub    esp,0x8
1000608d:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006093:	50                   	push   eax
10006094:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006097:	e8 fc ff ff ff       	call   10006098 <begin(void*)+0xf59>	10006098: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000609c:	83 c4 10             	add    esp,0x10
1000609f:	83 ec 04             	sub    esp,0x4
100060a2:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
100060a8:	52                   	push   edx
100060a9:	50                   	push   eax
100060aa:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100060ad:	e8 fc ff ff ff       	call   100060ae <begin(void*)+0xf6f>	100060ae: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100060b2:	83 c4 10             	add    esp,0x10
100060b5:	83 ec 08             	sub    esp,0x8
100060b8:	68 9a a5 00 10       	push   0x1000a59a	100060b9: R_386_32	.text
100060bd:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100060c3:	50                   	push   eax
100060c4:	e8 fc ff ff ff       	call   100060c5 <begin(void*)+0xf86>	100060c5: R_386_PC32	strcpy
100060c9:	83 c4 10             	add    esp,0x10
100060cc:	83 ec 08             	sub    esp,0x8
100060cf:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
100060d5:	50                   	push   eax
100060d6:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100060dc:	50                   	push   eax
100060dd:	e8 fc ff ff ff       	call   100060de <begin(void*)+0xf9f>	100060de: R_386_PC32	strcat
100060e2:	83 c4 10             	add    esp,0x10
100060e5:	83 ec 08             	sub    esp,0x8
100060e8:	68 b8 a5 00 10       	push   0x1000a5b8	100060e9: R_386_32	.text
100060ed:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100060f3:	50                   	push   eax
100060f4:	e8 fc ff ff ff       	call   100060f5 <begin(void*)+0xfb6>	100060f5: R_386_PC32	strcat
100060f9:	83 c4 10             	add    esp,0x10
100060fc:	83 ec 08             	sub    esp,0x8
100060ff:	68 a2 ad 00 10       	push   0x1000ada2	10006100: R_386_32	.text
10006104:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
1000610a:	50                   	push   eax
1000610b:	e8 fc ff ff ff       	call   1000610c <begin(void*)+0xfcd>	1000610c: R_386_PC32	strcpy
10006110:	83 c4 10             	add    esp,0x10
10006113:	83 ec 08             	sub    esp,0x8
10006116:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
1000611c:	50                   	push   eax
1000611d:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006123:	50                   	push   eax
10006124:	e8 fc ff ff ff       	call   10006125 <begin(void*)+0xfe6>	10006125: R_386_PC32	strcat
10006129:	83 c4 10             	add    esp,0x10
1000612c:	83 ec 08             	sub    esp,0x8
1000612f:	68 0c b1 00 10       	push   0x1000b10c	10006130: R_386_32	.text
10006134:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
1000613a:	50                   	push   eax
1000613b:	e8 fc ff ff ff       	call   1000613c <begin(void*)+0xffd>	1000613c: R_386_PC32	strcat
10006140:	83 c4 10             	add    esp,0x10
10006143:	83 ec 08             	sub    esp,0x8
10006146:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
1000614c:	50                   	push   eax
1000614d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006150:	e8 fc ff ff ff       	call   10006151 <begin(void*)+0x1012>	10006151: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006155:	83 c4 10             	add    esp,0x10
10006158:	83 ec 04             	sub    esp,0x4
1000615b:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
10006161:	52                   	push   edx
10006162:	50                   	push   eax
10006163:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006166:	e8 fc ff ff ff       	call   10006167 <begin(void*)+0x1028>	10006167: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000616b:	83 c4 10             	add    esp,0x10
1000616e:	83 ec 08             	sub    esp,0x8
10006171:	68 9a a5 00 10       	push   0x1000a59a	10006172: R_386_32	.text
10006176:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000617c:	50                   	push   eax
1000617d:	e8 fc ff ff ff       	call   1000617e <begin(void*)+0x103f>	1000617e: R_386_PC32	strcpy
10006182:	83 c4 10             	add    esp,0x10
10006185:	83 ec 08             	sub    esp,0x8
10006188:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
1000618e:	50                   	push   eax
1000618f:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006195:	50                   	push   eax
10006196:	e8 fc ff ff ff       	call   10006197 <begin(void*)+0x1058>	10006197: R_386_PC32	strcat
1000619b:	83 c4 10             	add    esp,0x10
1000619e:	83 ec 08             	sub    esp,0x8
100061a1:	68 c3 a5 00 10       	push   0x1000a5c3	100061a2: R_386_32	.text
100061a6:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100061ac:	50                   	push   eax
100061ad:	e8 fc ff ff ff       	call   100061ae <begin(void*)+0x106f>	100061ae: R_386_PC32	strcat
100061b2:	83 c4 10             	add    esp,0x10
100061b5:	83 ec 08             	sub    esp,0x8
100061b8:	68 a2 ad 00 10       	push   0x1000ada2	100061b9: R_386_32	.text
100061bd:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100061c3:	50                   	push   eax
100061c4:	e8 fc ff ff ff       	call   100061c5 <begin(void*)+0x1086>	100061c5: R_386_PC32	strcpy
100061c9:	83 c4 10             	add    esp,0x10
100061cc:	83 ec 08             	sub    esp,0x8
100061cf:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
100061d5:	50                   	push   eax
100061d6:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100061dc:	50                   	push   eax
100061dd:	e8 fc ff ff ff       	call   100061de <begin(void*)+0x109f>	100061de: R_386_PC32	strcat
100061e2:	83 c4 10             	add    esp,0x10
100061e5:	83 ec 08             	sub    esp,0x8
100061e8:	68 17 b1 00 10       	push   0x1000b117	100061e9: R_386_32	.text
100061ed:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100061f3:	50                   	push   eax
100061f4:	e8 fc ff ff ff       	call   100061f5 <begin(void*)+0x10b6>	100061f5: R_386_PC32	strcat
100061f9:	83 c4 10             	add    esp,0x10
100061fc:	83 ec 08             	sub    esp,0x8
100061ff:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006205:	50                   	push   eax
10006206:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006209:	e8 fc ff ff ff       	call   1000620a <begin(void*)+0x10cb>	1000620a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000620e:	83 c4 10             	add    esp,0x10
10006211:	83 ec 04             	sub    esp,0x4
10006214:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
1000621a:	52                   	push   edx
1000621b:	50                   	push   eax
1000621c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000621f:	e8 fc ff ff ff       	call   10006220 <begin(void*)+0x10e1>	10006220: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006224:	83 c4 10             	add    esp,0x10
10006227:	83 ec 08             	sub    esp,0x8
1000622a:	68 9a a5 00 10       	push   0x1000a59a	1000622b: R_386_32	.text
1000622f:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006235:	50                   	push   eax
10006236:	e8 fc ff ff ff       	call   10006237 <begin(void*)+0x10f8>	10006237: R_386_PC32	strcpy
1000623b:	83 c4 10             	add    esp,0x10
1000623e:	83 ec 08             	sub    esp,0x8
10006241:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10006247:	50                   	push   eax
10006248:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000624e:	50                   	push   eax
1000624f:	e8 fc ff ff ff       	call   10006250 <begin(void*)+0x1111>	10006250: R_386_PC32	strcat
10006254:	83 c4 10             	add    esp,0x10
10006257:	83 ec 08             	sub    esp,0x8
1000625a:	68 df a5 00 10       	push   0x1000a5df	1000625b: R_386_32	.text
1000625f:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006265:	50                   	push   eax
10006266:	e8 fc ff ff ff       	call   10006267 <begin(void*)+0x1128>	10006267: R_386_PC32	strcat
1000626b:	83 c4 10             	add    esp,0x10
1000626e:	83 ec 08             	sub    esp,0x8
10006271:	68 a2 ad 00 10       	push   0x1000ada2	10006272: R_386_32	.text
10006276:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
1000627c:	50                   	push   eax
1000627d:	e8 fc ff ff ff       	call   1000627e <begin(void*)+0x113f>	1000627e: R_386_PC32	strcpy
10006282:	83 c4 10             	add    esp,0x10
10006285:	83 ec 08             	sub    esp,0x8
10006288:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
1000628e:	50                   	push   eax
1000628f:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006295:	50                   	push   eax
10006296:	e8 fc ff ff ff       	call   10006297 <begin(void*)+0x1158>	10006297: R_386_PC32	strcat
1000629b:	83 c4 10             	add    esp,0x10
1000629e:	83 ec 08             	sub    esp,0x8
100062a1:	68 21 b1 00 10       	push   0x1000b121	100062a2: R_386_32	.text
100062a6:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100062ac:	50                   	push   eax
100062ad:	e8 fc ff ff ff       	call   100062ae <begin(void*)+0x116f>	100062ae: R_386_PC32	strcat
100062b2:	83 c4 10             	add    esp,0x10
100062b5:	83 ec 08             	sub    esp,0x8
100062b8:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100062be:	50                   	push   eax
100062bf:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100062c2:	e8 fc ff ff ff       	call   100062c3 <begin(void*)+0x1184>	100062c3: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100062c7:	83 c4 10             	add    esp,0x10
100062ca:	83 ec 04             	sub    esp,0x4
100062cd:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
100062d3:	52                   	push   edx
100062d4:	50                   	push   eax
100062d5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100062d8:	e8 fc ff ff ff       	call   100062d9 <begin(void*)+0x119a>	100062d9: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100062dd:	83 c4 10             	add    esp,0x10
100062e0:	83 ec 08             	sub    esp,0x8
100062e3:	68 9a a5 00 10       	push   0x1000a59a	100062e4: R_386_32	.text
100062e8:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100062ee:	50                   	push   eax
100062ef:	e8 fc ff ff ff       	call   100062f0 <begin(void*)+0x11b1>	100062f0: R_386_PC32	strcpy
100062f4:	83 c4 10             	add    esp,0x10
100062f7:	83 ec 08             	sub    esp,0x8
100062fa:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10006300:	50                   	push   eax
10006301:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006307:	50                   	push   eax
10006308:	e8 fc ff ff ff       	call   10006309 <begin(void*)+0x11ca>	10006309: R_386_PC32	strcat
1000630d:	83 c4 10             	add    esp,0x10
10006310:	83 ec 08             	sub    esp,0x8
10006313:	68 d8 a5 00 10       	push   0x1000a5d8	10006314: R_386_32	.text
10006318:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000631e:	50                   	push   eax
1000631f:	e8 fc ff ff ff       	call   10006320 <begin(void*)+0x11e1>	10006320: R_386_PC32	strcat
10006324:	83 c4 10             	add    esp,0x10
10006327:	83 ec 08             	sub    esp,0x8
1000632a:	68 a2 ad 00 10       	push   0x1000ada2	1000632b: R_386_32	.text
1000632f:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006335:	50                   	push   eax
10006336:	e8 fc ff ff ff       	call   10006337 <begin(void*)+0x11f8>	10006337: R_386_PC32	strcpy
1000633b:	83 c4 10             	add    esp,0x10
1000633e:	83 ec 08             	sub    esp,0x8
10006341:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10006347:	50                   	push   eax
10006348:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
1000634e:	50                   	push   eax
1000634f:	e8 fc ff ff ff       	call   10006350 <begin(void*)+0x1211>	10006350: R_386_PC32	strcat
10006354:	83 c4 10             	add    esp,0x10
10006357:	83 ec 08             	sub    esp,0x8
1000635a:	68 29 b1 00 10       	push   0x1000b129	1000635b: R_386_32	.text
1000635f:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006365:	50                   	push   eax
10006366:	e8 fc ff ff ff       	call   10006367 <begin(void*)+0x1228>	10006367: R_386_PC32	strcat
1000636b:	83 c4 10             	add    esp,0x10
1000636e:	83 ec 08             	sub    esp,0x8
10006371:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006377:	50                   	push   eax
10006378:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000637b:	e8 fc ff ff ff       	call   1000637c <begin(void*)+0x123d>	1000637c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006380:	83 c4 10             	add    esp,0x10
10006383:	83 ec 04             	sub    esp,0x4
10006386:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
1000638c:	52                   	push   edx
1000638d:	50                   	push   eax
1000638e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006391:	e8 fc ff ff ff       	call   10006392 <begin(void*)+0x1253>	10006392: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006396:	83 c4 10             	add    esp,0x10
10006399:	83 ec 08             	sub    esp,0x8
1000639c:	68 9a a5 00 10       	push   0x1000a59a	1000639d: R_386_32	.text
100063a1:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100063a7:	50                   	push   eax
100063a8:	e8 fc ff ff ff       	call   100063a9 <begin(void*)+0x126a>	100063a9: R_386_PC32	strcpy
100063ad:	83 c4 10             	add    esp,0x10
100063b0:	83 ec 08             	sub    esp,0x8
100063b3:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
100063b9:	50                   	push   eax
100063ba:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100063c0:	50                   	push   eax
100063c1:	e8 fc ff ff ff       	call   100063c2 <begin(void*)+0x1283>	100063c2: R_386_PC32	strcat
100063c6:	83 c4 10             	add    esp,0x10
100063c9:	83 ec 08             	sub    esp,0x8
100063cc:	68 cd a5 00 10       	push   0x1000a5cd	100063cd: R_386_32	.text
100063d1:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100063d7:	50                   	push   eax
100063d8:	e8 fc ff ff ff       	call   100063d9 <begin(void*)+0x129a>	100063d9: R_386_PC32	strcat
100063dd:	83 c4 10             	add    esp,0x10
100063e0:	83 ec 08             	sub    esp,0x8
100063e3:	68 a2 ad 00 10       	push   0x1000ada2	100063e4: R_386_32	.text
100063e8:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100063ee:	50                   	push   eax
100063ef:	e8 fc ff ff ff       	call   100063f0 <begin(void*)+0x12b1>	100063f0: R_386_PC32	strcpy
100063f4:	83 c4 10             	add    esp,0x10
100063f7:	83 ec 08             	sub    esp,0x8
100063fa:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10006400:	50                   	push   eax
10006401:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006407:	50                   	push   eax
10006408:	e8 fc ff ff ff       	call   10006409 <begin(void*)+0x12ca>	10006409: R_386_PC32	strcat
1000640d:	83 c4 10             	add    esp,0x10
10006410:	83 ec 08             	sub    esp,0x8
10006413:	68 30 b1 00 10       	push   0x1000b130	10006414: R_386_32	.text
10006418:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
1000641e:	50                   	push   eax
1000641f:	e8 fc ff ff ff       	call   10006420 <begin(void*)+0x12e1>	10006420: R_386_PC32	strcat
10006424:	83 c4 10             	add    esp,0x10
10006427:	83 ec 08             	sub    esp,0x8
1000642a:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006430:	50                   	push   eax
10006431:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006434:	e8 fc ff ff ff       	call   10006435 <begin(void*)+0x12f6>	10006435: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006439:	83 c4 10             	add    esp,0x10
1000643c:	83 ec 04             	sub    esp,0x4
1000643f:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
10006445:	52                   	push   edx
10006446:	50                   	push   eax
10006447:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000644a:	e8 fc ff ff ff       	call   1000644b <begin(void*)+0x130c>	1000644b: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000644f:	83 c4 10             	add    esp,0x10
10006452:	83 ec 0c             	sub    esp,0xc
10006455:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006458:	e8 fc ff ff ff       	call   10006459 <begin(void*)+0x131a>	10006459: R_386_PC32	CmClose(Reghive_Tag*)
1000645d:	83 c4 10             	add    esp,0x10
10006460:	a0 00 00 00 00       	mov    al,ds:0x0	10006461: R_386_32	createNewUserMode
10006465:	84 c0                	test   al,al
10006467:	0f 85 ea 07 00 00    	jne    10006c57 <begin(void*)+0x1b18>
1000646d:	83 ec 0c             	sub    esp,0xc
10006470:	68 3c b1 00 10       	push   0x1000b13c	10006471: R_386_32	.text
10006475:	e8 fc ff ff ff       	call   10006476 <begin(void*)+0x1337>	10006476: R_386_PC32	Dbg::kprintf(char const*, ...)
1000647a:	83 c4 10             	add    esp,0x10
1000647d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000647e: R_386_32	term
10006482:	83 ec 0c             	sub    esp,0xc
10006485:	50                   	push   eax
10006486:	e8 fc ff ff ff       	call   10006487 <begin(void*)+0x1348>	10006487: R_386_PC32	setActiveTerminal(VgaText*)
1000648b:	83 c4 10             	add    esp,0x10
1000648e:	e8 fc ff ff ff       	call   1000648f <begin(void*)+0x1350>	1000648f: R_386_PC32	drawBootScreen()
10006493:	83 ec 0c             	sub    esp,0xc
10006496:	68 d5 ab 00 10       	push   0x1000abd5	10006497: R_386_32	.text
1000649b:	6a 0d                	push   0xd
1000649d:	6a 32                	push   0x32
1000649f:	6a 05                	push   0x5
100064a1:	6a 16                	push   0x16
100064a3:	e8 fc ff ff ff       	call   100064a4 <begin(void*)+0x1365>	100064a4: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100064a8:	83 c4 20             	add    esp,0x20
100064ab:	a1 00 00 00 00       	mov    eax,ds:0x0	100064ac: R_386_32	term
100064b0:	83 ec 04             	sub    esp,0x4
100064b3:	6a 08                	push   0x8
100064b5:	6a 18                	push   0x18
100064b7:	50                   	push   eax
100064b8:	e8 fc ff ff ff       	call   100064b9 <begin(void*)+0x137a>	100064b9: R_386_PC32	VgaText::setCursor(int, int)
100064bd:	83 c4 10             	add    esp,0x10
100064c0:	a1 00 00 00 00       	mov    eax,ds:0x0	100064c1: R_386_32	term
100064c5:	83 ec 08             	sub    esp,0x8
100064c8:	68 64 b1 00 10       	push   0x1000b164	100064c9: R_386_32	.text
100064cd:	50                   	push   eax
100064ce:	e8 fc ff ff ff       	call   100064cf <begin(void*)+0x1390>	100064cf: R_386_PC32	VgaText::puts(char const*)
100064d3:	83 c4 10             	add    esp,0x10
100064d6:	a1 00 00 00 00       	mov    eax,ds:0x0	100064d7: R_386_32	term
100064db:	83 ec 04             	sub    esp,0x4
100064de:	6a 0a                	push   0xa
100064e0:	6a 18                	push   0x18
100064e2:	50                   	push   eax
100064e3:	e8 fc ff ff ff       	call   100064e4 <begin(void*)+0x13a5>	100064e4: R_386_PC32	VgaText::setCursor(int, int)
100064e8:	83 c4 10             	add    esp,0x10
100064eb:	a1 00 00 00 00       	mov    eax,ds:0x0	100064ec: R_386_32	term
100064f0:	83 ec 08             	sub    esp,0x8
100064f3:	68 8c b1 00 10       	push   0x1000b18c	100064f4: R_386_32	.text
100064f8:	50                   	push   eax
100064f9:	e8 fc ff ff ff       	call   100064fa <begin(void*)+0x13bb>	100064fa: R_386_PC32	VgaText::puts(char const*)
100064fe:	83 c4 10             	add    esp,0x10
10006501:	a1 00 00 00 00       	mov    eax,ds:0x0	10006502: R_386_32	term
10006506:	83 ec 04             	sub    esp,0x4
10006509:	6a 0b                	push   0xb
1000650b:	6a 18                	push   0x18
1000650d:	50                   	push   eax
1000650e:	e8 fc ff ff ff       	call   1000650f <begin(void*)+0x13d0>	1000650f: R_386_PC32	VgaText::setCursor(int, int)
10006513:	83 c4 10             	add    esp,0x10
10006516:	a1 00 00 00 00       	mov    eax,ds:0x0	10006517: R_386_32	term
1000651b:	83 ec 08             	sub    esp,0x8
1000651e:	68 b8 b1 00 10       	push   0x1000b1b8	1000651f: R_386_32	.text
10006523:	50                   	push   eax
10006524:	e8 fc ff ff ff       	call   10006525 <begin(void*)+0x13e6>	10006525: R_386_PC32	VgaText::puts(char const*)
10006529:	83 c4 10             	add    esp,0x10
1000652c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000652e: R_386_32	installKey
10006533:	a0 00 00 00 00       	mov    al,ds:0x0	10006534: R_386_32	installKey
10006538:	84 c0                	test   al,al
1000653a:	0f 94 c0             	sete   al
1000653d:	84 c0                	test   al,al
1000653f:	74 02                	je     10006543 <begin(void*)+0x1404>
10006541:	eb f0                	jmp    10006533 <begin(void*)+0x13f4>
10006543:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006545: R_386_32	installKey
1000654a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000654b: R_386_32	term
1000654f:	83 ec 04             	sub    esp,0x4
10006552:	6a 0c                	push   0xc
10006554:	6a 18                	push   0x18
10006556:	50                   	push   eax
10006557:	e8 fc ff ff ff       	call   10006558 <begin(void*)+0x1419>	10006558: R_386_PC32	VgaText::setCursor(int, int)
1000655c:	83 c4 10             	add    esp,0x10
1000655f:	e8 fc ff ff ff       	call   10006560 <begin(void*)+0x1421>	10006560: R_386_PC32	KeRestart()
10006564:	e9 fd 0d 00 00       	jmp    10007366 <begin(void*)+0x2227>
10006569:	e8 fc ff ff ff       	call   1000656a <begin(void*)+0x142b>	1000656a: R_386_PC32	KeLoadClockSettings()
1000656e:	83 ec 0c             	sub    esp,0xc
10006571:	68 64 ad 00 10       	push   0x1000ad64	10006572: R_386_32	.text
10006576:	e8 fc ff ff ff       	call   10006577 <begin(void*)+0x1438>	10006577: R_386_PC32	CmOpen(char const*)
1000657b:	83 c4 10             	add    esp,0x10
1000657e:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10006581:	83 ec 08             	sub    esp,0x8
10006584:	68 1e af 00 10       	push   0x1000af1e	10006585: R_386_32	.text
10006589:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000658c:	e8 fc ff ff ff       	call   1000658d <begin(void*)+0x144e>	1000658d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006591:	83 c4 10             	add    esp,0x10
10006594:	83 ec 04             	sub    esp,0x4
10006597:	8d 95 dc fc ff ff    	lea    edx,[ebp-0x324]
1000659d:	52                   	push   edx
1000659e:	50                   	push   eax
1000659f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100065a2:	e8 fc ff ff ff       	call   100065a3 <begin(void*)+0x1464>	100065a3: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
100065a7:	83 c4 10             	add    esp,0x10
100065aa:	83 ec 08             	sub    esp,0x8
100065ad:	68 ca b1 00 10       	push   0x1000b1ca	100065ae: R_386_32	.text
100065b2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100065b5:	e8 fc ff ff ff       	call   100065b6 <begin(void*)+0x1477>	100065b6: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100065ba:	83 c4 10             	add    esp,0x10
100065bd:	83 ec 04             	sub    esp,0x4
100065c0:	8d 95 d0 fc ff ff    	lea    edx,[ebp-0x330]
100065c6:	52                   	push   edx
100065c7:	50                   	push   eax
100065c8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100065cb:	e8 fc ff ff ff       	call   100065cc <begin(void*)+0x148d>	100065cc: R_386_PC32	CmGetInteger(Reghive_Tag*, int, unsigned long long*)
100065d0:	83 c4 10             	add    esp,0x10
100065d3:	83 ec 0c             	sub    esp,0xc
100065d6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100065d9:	e8 fc ff ff ff       	call   100065da <begin(void*)+0x149b>	100065da: R_386_PC32	CmClose(Reghive_Tag*)
100065de:	83 c4 10             	add    esp,0x10
100065e1:	83 ec 0c             	sub    esp,0xc
100065e4:	8d 85 dc fc ff ff    	lea    eax,[ebp-0x324]
100065ea:	50                   	push   eax
100065eb:	e8 fc ff ff ff       	call   100065ec <begin(void*)+0x14ad>	100065ec: R_386_PC32	checkExtendedKey(char*)
100065f0:	83 c4 10             	add    esp,0x10
100065f3:	85 c0                	test   eax,eax
100065f5:	0f 94 c0             	sete   al
100065f8:	84 c0                	test   al,al
100065fa:	0f 84 bd 01 00 00    	je     100067bd <begin(void*)+0x167e>
10006600:	83 ec 0c             	sub    esp,0xc
10006603:	6a 01                	push   0x1
10006605:	e8 fc ff ff ff       	call   10006606 <begin(void*)+0x14c7>	10006606: R_386_PC32	firstRun(bool)
1000660a:	83 c4 10             	add    esp,0x10
1000660d:	83 ec 0c             	sub    esp,0xc
10006610:	68 64 ad 00 10       	push   0x1000ad64	10006611: R_386_32	.text
10006615:	e8 fc ff ff ff       	call   10006616 <begin(void*)+0x14d7>	10006616: R_386_PC32	CmOpen(char const*)
1000661a:	83 c4 10             	add    esp,0x10
1000661d:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10006620:	83 ec 04             	sub    esp,0x4
10006623:	68 89 ad 00 10       	push   0x1000ad89	10006624: R_386_32	.text
10006628:	6a 00                	push   0x0
1000662a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000662d:	e8 fc ff ff ff       	call   1000662e <begin(void*)+0x14ef>	1000662e: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10006632:	83 c4 10             	add    esp,0x10
10006635:	83 ec 08             	sub    esp,0x8
10006638:	68 89 ad 00 10       	push   0x1000ad89	10006639: R_386_32	.text
1000663d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006640:	e8 fc ff ff ff       	call   10006641 <begin(void*)+0x1502>	10006641: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006645:	83 c4 10             	add    esp,0x10
10006648:	83 ec 08             	sub    esp,0x8
1000664b:	50                   	push   eax
1000664c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000664f:	e8 fc ff ff ff       	call   10006650 <begin(void*)+0x1511>	10006650: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006654:	83 c4 10             	add    esp,0x10
10006657:	83 ec 04             	sub    esp,0x4
1000665a:	68 c3 ad 00 10       	push   0x1000adc3	1000665b: R_386_32	.text
1000665f:	50                   	push   eax
10006660:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006663:	e8 fc ff ff ff       	call   10006664 <begin(void*)+0x1525>	10006664: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10006668:	83 c4 10             	add    esp,0x10
1000666b:	83 ec 08             	sub    esp,0x8
1000666e:	68 3a ae 00 10       	push   0x1000ae3a	1000666f: R_386_32	.text
10006673:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006676:	e8 fc ff ff ff       	call   10006677 <begin(void*)+0x1538>	10006677: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000667b:	83 c4 10             	add    esp,0x10
1000667e:	83 ec 08             	sub    esp,0x8
10006681:	50                   	push   eax
10006682:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006685:	e8 fc ff ff ff       	call   10006686 <begin(void*)+0x1547>	10006686: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000668a:	83 c4 10             	add    esp,0x10
1000668d:	83 ec 04             	sub    esp,0x4
10006690:	68 54 ae 00 10       	push   0x1000ae54	10006691: R_386_32	.text
10006695:	50                   	push   eax
10006696:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006699:	e8 fc ff ff ff       	call   1000669a <begin(void*)+0x155b>	1000669a: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000669e:	83 c4 10             	add    esp,0x10
100066a1:	83 ec 08             	sub    esp,0x8
100066a4:	68 1e af 00 10       	push   0x1000af1e	100066a5: R_386_32	.text
100066a9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100066ac:	e8 fc ff ff ff       	call   100066ad <begin(void*)+0x156e>	100066ad: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100066b1:	83 c4 10             	add    esp,0x10
100066b4:	83 ec 04             	sub    esp,0x4
100066b7:	68 00 00 00 00       	push   0x0	100066b8: R_386_32	pkeybuf
100066bc:	50                   	push   eax
100066bd:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100066c0:	e8 fc ff ff ff       	call   100066c1 <begin(void*)+0x1582>	100066c1: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100066c5:	83 c4 10             	add    esp,0x10
100066c8:	83 ec 0c             	sub    esp,0xc
100066cb:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100066ce:	e8 fc ff ff ff       	call   100066cf <begin(void*)+0x1590>	100066cf: R_386_PC32	CmClose(Reghive_Tag*)
100066d3:	83 c4 10             	add    esp,0x10
100066d6:	a1 00 00 00 00       	mov    eax,ds:0x0	100066d7: R_386_32	term
100066db:	83 ec 0c             	sub    esp,0xc
100066de:	50                   	push   eax
100066df:	e8 fc ff ff ff       	call   100066e0 <begin(void*)+0x15a1>	100066e0: R_386_PC32	setActiveTerminal(VgaText*)
100066e4:	83 c4 10             	add    esp,0x10
100066e7:	e8 fc ff ff ff       	call   100066e8 <begin(void*)+0x15a9>	100066e8: R_386_PC32	drawBootScreen()
100066ec:	83 ec 0c             	sub    esp,0xc
100066ef:	68 de b1 00 10       	push   0x1000b1de	100066f0: R_386_32	.text
100066f4:	6a 0d                	push   0xd
100066f6:	6a 32                	push   0x32
100066f8:	6a 05                	push   0x5
100066fa:	6a 16                	push   0x16
100066fc:	e8 fc ff ff ff       	call   100066fd <begin(void*)+0x15be>	100066fd: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10006701:	83 c4 20             	add    esp,0x20
10006704:	a1 00 00 00 00       	mov    eax,ds:0x0	10006705: R_386_32	term
10006709:	83 ec 04             	sub    esp,0x4
1000670c:	6a 08                	push   0x8
1000670e:	6a 18                	push   0x18
10006710:	50                   	push   eax
10006711:	e8 fc ff ff ff       	call   10006712 <begin(void*)+0x15d3>	10006712: R_386_PC32	VgaText::setCursor(int, int)
10006716:	83 c4 10             	add    esp,0x10
10006719:	a1 00 00 00 00       	mov    eax,ds:0x0	1000671a: R_386_32	term
1000671e:	83 ec 08             	sub    esp,0x8
10006721:	68 f4 b1 00 10       	push   0x1000b1f4	10006722: R_386_32	.text
10006726:	50                   	push   eax
10006727:	e8 fc ff ff ff       	call   10006728 <begin(void*)+0x15e9>	10006728: R_386_PC32	VgaText::puts(char const*)
1000672c:	83 c4 10             	add    esp,0x10
1000672f:	a1 00 00 00 00       	mov    eax,ds:0x0	10006730: R_386_32	term
10006734:	83 ec 04             	sub    esp,0x4
10006737:	6a 0a                	push   0xa
10006739:	6a 18                	push   0x18
1000673b:	50                   	push   eax
1000673c:	e8 fc ff ff ff       	call   1000673d <begin(void*)+0x15fe>	1000673d: R_386_PC32	VgaText::setCursor(int, int)
10006741:	83 c4 10             	add    esp,0x10
10006744:	a1 00 00 00 00       	mov    eax,ds:0x0	10006745: R_386_32	term
10006749:	83 ec 08             	sub    esp,0x8
1000674c:	68 8c b1 00 10       	push   0x1000b18c	1000674d: R_386_32	.text
10006751:	50                   	push   eax
10006752:	e8 fc ff ff ff       	call   10006753 <begin(void*)+0x1614>	10006753: R_386_PC32	VgaText::puts(char const*)
10006757:	83 c4 10             	add    esp,0x10
1000675a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000675b: R_386_32	term
1000675f:	83 ec 04             	sub    esp,0x4
10006762:	6a 0b                	push   0xb
10006764:	6a 18                	push   0x18
10006766:	50                   	push   eax
10006767:	e8 fc ff ff ff       	call   10006768 <begin(void*)+0x1629>	10006768: R_386_PC32	VgaText::setCursor(int, int)
1000676c:	83 c4 10             	add    esp,0x10
1000676f:	a1 00 00 00 00       	mov    eax,ds:0x0	10006770: R_386_32	term
10006774:	83 ec 08             	sub    esp,0x8
10006777:	68 b8 b1 00 10       	push   0x1000b1b8	10006778: R_386_32	.text
1000677c:	50                   	push   eax
1000677d:	e8 fc ff ff ff       	call   1000677e <begin(void*)+0x163f>	1000677e: R_386_PC32	VgaText::puts(char const*)
10006782:	83 c4 10             	add    esp,0x10
10006785:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006787: R_386_32	installKey
1000678c:	a0 00 00 00 00       	mov    al,ds:0x0	1000678d: R_386_32	installKey
10006791:	84 c0                	test   al,al
10006793:	0f 94 c0             	sete   al
10006796:	84 c0                	test   al,al
10006798:	74 02                	je     1000679c <begin(void*)+0x165d>
1000679a:	eb f0                	jmp    1000678c <begin(void*)+0x164d>
1000679c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000679e: R_386_32	installKey
100067a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100067a4: R_386_32	term
100067a8:	83 ec 04             	sub    esp,0x4
100067ab:	6a 0c                	push   0xc
100067ad:	6a 18                	push   0x18
100067af:	50                   	push   eax
100067b0:	e8 fc ff ff ff       	call   100067b1 <begin(void*)+0x1672>	100067b1: R_386_PC32	VgaText::setCursor(int, int)
100067b5:	83 c4 10             	add    esp,0x10
100067b8:	e8 fc ff ff ff       	call   100067b9 <begin(void*)+0x167a>	100067b9: R_386_PC32	KeRestart()
100067bd:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100067bf: R_386_32	showSidebar
100067c4:	83 ec 0c             	sub    esp,0xc
100067c7:	68 84 01 00 00       	push   0x184
100067cc:	e8 fc ff ff ff       	call   100067cd <begin(void*)+0x168e>	100067cd: R_386_PC32	operator new(unsigned long)
100067d1:	83 c4 10             	add    esp,0x10
100067d4:	89 c3                	mov    ebx,eax
100067d6:	83 ec 08             	sub    esp,0x8
100067d9:	68 e0 a7 00 10       	push   0x1000a7e0	100067da: R_386_32	.text
100067de:	53                   	push   ebx
100067df:	e8 fc ff ff ff       	call   100067e0 <begin(void*)+0x16a1>	100067e0: R_386_PC32	VgaText::VgaText(char const*)
100067e4:	83 c4 10             	add    esp,0x10
100067e7:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100067e9: R_386_32	term
100067ed:	a1 00 00 00 00       	mov    eax,ds:0x0	100067ee: R_386_32	term
100067f2:	83 ec 0c             	sub    esp,0xc
100067f5:	50                   	push   eax
100067f6:	e8 fc ff ff ff       	call   100067f7 <begin(void*)+0x16b8>	100067f7: R_386_PC32	setActiveTerminal(VgaText*)
100067fb:	83 c4 10             	add    esp,0x10
100067fe:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10006805:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
1000680c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000680e: R_386_32	installKey
10006813:	83 ec 04             	sub    esp,0x4
10006816:	68 80 00 00 00       	push   0x80
1000681b:	6a 00                	push   0x0
1000681d:	8d 85 48 f9 ff ff    	lea    eax,[ebp-0x6b8]
10006823:	50                   	push   eax
10006824:	e8 fc ff ff ff       	call   10006825 <begin(void*)+0x16e6>	10006825: R_386_PC32	memset
10006829:	83 c4 10             	add    esp,0x10
1000682c:	83 ec 04             	sub    esp,0x4
1000682f:	68 80 00 00 00       	push   0x80
10006834:	6a 00                	push   0x0
10006836:	8d 85 c8 f9 ff ff    	lea    eax,[ebp-0x638]
1000683c:	50                   	push   eax
1000683d:	e8 fc ff ff ff       	call   1000683e <begin(void*)+0x16ff>	1000683e: R_386_PC32	memset
10006842:	83 c4 10             	add    esp,0x10
10006845:	83 ec 0c             	sub    esp,0xc
10006848:	68 64 ad 00 10       	push   0x1000ad64	10006849: R_386_32	.text
1000684d:	e8 fc ff ff ff       	call   1000684e <begin(void*)+0x170f>	1000684e: R_386_PC32	CmOpen(char const*)
10006852:	83 c4 10             	add    esp,0x10
10006855:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10006858:	83 ec 08             	sub    esp,0x8
1000685b:	68 5f ae 00 10       	push   0x1000ae5f	1000685c: R_386_32	.text
10006860:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006863:	e8 fc ff ff ff       	call   10006864 <begin(void*)+0x1725>	10006864: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006868:	83 c4 10             	add    esp,0x10
1000686b:	83 ec 08             	sub    esp,0x8
1000686e:	50                   	push   eax
1000686f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006872:	e8 fc ff ff ff       	call   10006873 <begin(void*)+0x1734>	10006873: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006877:	83 c4 10             	add    esp,0x10
1000687a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000687d:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10006881:	0f 84 88 01 00 00    	je     10006a0f <begin(void*)+0x18d0>
10006887:	83 ec 04             	sub    esp,0x4
1000688a:	6a 50                	push   0x50
1000688c:	6a 00                	push   0x0
1000688e:	8d 85 a8 f8 ff ff    	lea    eax,[ebp-0x758]
10006894:	50                   	push   eax
10006895:	e8 fc ff ff ff       	call   10006896 <begin(void*)+0x1757>	10006896: R_386_PC32	memset
1000689a:	83 c4 10             	add    esp,0x10
1000689d:	83 ec 04             	sub    esp,0x4
100068a0:	8d 85 a8 f8 ff ff    	lea    eax,[ebp-0x758]
100068a6:	50                   	push   eax
100068a7:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100068aa:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100068ad:	e8 fc ff ff ff       	call   100068ae <begin(void*)+0x176f>	100068ae: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
100068b2:	83 c4 10             	add    esp,0x10
100068b5:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
100068b8:	83 7d a0 4e          	cmp    DWORD PTR [ebp-0x60],0x4e
100068bc:	0f 85 34 01 00 00    	jne    100069f6 <begin(void*)+0x18b7>
100068c2:	83 ec 0c             	sub    esp,0xc
100068c5:	6a 50                	push   0x50
100068c7:	e8 fc ff ff ff       	call   100068c8 <begin(void*)+0x1789>	100068c8: R_386_PC32	malloc
100068cc:	83 c4 10             	add    esp,0x10
100068cf:	89 c2                	mov    edx,eax
100068d1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100068d4:	89 94 85 c8 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x638],edx
100068db:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100068de:	8b 84 85 c8 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x638]
100068e5:	83 ec 08             	sub    esp,0x8
100068e8:	8d 95 a8 f8 ff ff    	lea    edx,[ebp-0x758]
100068ee:	52                   	push   edx
100068ef:	50                   	push   eax
100068f0:	e8 fc ff ff ff       	call   100068f1 <begin(void*)+0x17b2>	100068f1: R_386_PC32	strcpy
100068f5:	83 c4 10             	add    esp,0x10
100068f8:	83 ec 08             	sub    esp,0x8
100068fb:	68 a2 ad 00 10       	push   0x1000ada2	100068fc: R_386_32	.text
10006900:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006906:	50                   	push   eax
10006907:	e8 fc ff ff ff       	call   10006908 <begin(void*)+0x17c9>	10006908: R_386_PC32	strcpy
1000690c:	83 c4 10             	add    esp,0x10
1000690f:	83 ec 08             	sub    esp,0x8
10006912:	8d 85 a8 f8 ff ff    	lea    eax,[ebp-0x758]
10006918:	50                   	push   eax
10006919:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000691f:	50                   	push   eax
10006920:	e8 fc ff ff ff       	call   10006921 <begin(void*)+0x17e2>	10006921: R_386_PC32	strcat
10006925:	83 c4 10             	add    esp,0x10
10006928:	83 ec 08             	sub    esp,0x8
1000692b:	68 eb b0 00 10       	push   0x1000b0eb	1000692c: R_386_32	.text
10006930:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006936:	50                   	push   eax
10006937:	e8 fc ff ff ff       	call   10006938 <begin(void*)+0x17f9>	10006938: R_386_PC32	strcat
1000693c:	83 c4 10             	add    esp,0x10
1000693f:	83 ec 08             	sub    esp,0x8
10006942:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006948:	50                   	push   eax
10006949:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000694c:	e8 fc ff ff ff       	call   1000694d <begin(void*)+0x180e>	1000694d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006951:	83 c4 10             	add    esp,0x10
10006954:	83 ec 04             	sub    esp,0x4
10006957:	8d 95 a8 f8 ff ff    	lea    edx,[ebp-0x758]
1000695d:	52                   	push   edx
1000695e:	50                   	push   eax
1000695f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006962:	e8 fc ff ff ff       	call   10006963 <begin(void*)+0x1824>	10006963: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006967:	83 c4 10             	add    esp,0x10
1000696a:	83 ec 0c             	sub    esp,0xc
1000696d:	6a 50                	push   0x50
1000696f:	e8 fc ff ff ff       	call   10006970 <begin(void*)+0x1831>	10006970: R_386_PC32	malloc
10006974:	83 c4 10             	add    esp,0x10
10006977:	89 c2                	mov    edx,eax
10006979:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000697c:	89 94 85 48 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x6b8],edx
10006983:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006986:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
1000698d:	83 ec 08             	sub    esp,0x8
10006990:	68 a7 a7 00 10       	push   0x1000a7a7	10006991: R_386_32	.text
10006995:	50                   	push   eax
10006996:	e8 fc ff ff ff       	call   10006997 <begin(void*)+0x1858>	10006997: R_386_PC32	strcpy
1000699b:	83 c4 10             	add    esp,0x10
1000699e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100069a1:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
100069a8:	83 ec 08             	sub    esp,0x8
100069ab:	8d 95 a8 f8 ff ff    	lea    edx,[ebp-0x758]
100069b1:	52                   	push   edx
100069b2:	50                   	push   eax
100069b3:	e8 fc ff ff ff       	call   100069b4 <begin(void*)+0x1875>	100069b4: R_386_PC32	strcat
100069b8:	83 c4 10             	add    esp,0x10
100069bb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100069be:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
100069c5:	83 ec 0c             	sub    esp,0xc
100069c8:	50                   	push   eax
100069c9:	e8 fc ff ff ff       	call   100069ca <begin(void*)+0x188b>	100069ca: R_386_PC32	strlen
100069ce:	83 c4 10             	add    esp,0x10
100069d1:	83 f8 31             	cmp    eax,0x31
100069d4:	77 1d                	ja     100069f3 <begin(void*)+0x18b4>
100069d6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100069d9:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
100069e0:	83 ec 08             	sub    esp,0x8
100069e3:	68 a7 a7 00 10       	push   0x1000a7a7	100069e4: R_386_32	.text
100069e8:	50                   	push   eax
100069e9:	e8 fc ff ff ff       	call   100069ea <begin(void*)+0x18ab>	100069ea: R_386_PC32	strcat
100069ee:	83 c4 10             	add    esp,0x10
100069f1:	eb c8                	jmp    100069bb <begin(void*)+0x187c>
100069f3:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
100069f6:	83 ec 08             	sub    esp,0x8
100069f9:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100069fc:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100069ff:	e8 fc ff ff ff       	call   10006a00 <begin(void*)+0x18c1>	10006a00: R_386_PC32	CmGetNext(Reghive_Tag*, int)
10006a04:	83 c4 10             	add    esp,0x10
10006a07:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10006a0a:	e9 6e fe ff ff       	jmp    1000687d <begin(void*)+0x173e>
10006a0f:	83 ec 0c             	sub    esp,0xc
10006a12:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006a15:	e8 fc ff ff ff       	call   10006a16 <begin(void*)+0x18d7>	10006a16: R_386_PC32	CmClose(Reghive_Tag*)
10006a1a:	83 c4 10             	add    esp,0x10
10006a1d:	83 ec 0c             	sub    esp,0xc
10006a20:	6a 50                	push   0x50
10006a22:	e8 fc ff ff ff       	call   10006a23 <begin(void*)+0x18e4>	10006a23: R_386_PC32	malloc
10006a27:	83 c4 10             	add    esp,0x10
10006a2a:	89 c2                	mov    edx,eax
10006a2c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006a2f:	89 94 85 48 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x6b8],edx
10006a36:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006a39:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10006a40:	83 ec 08             	sub    esp,0x8
10006a43:	68 18 b2 00 10       	push   0x1000b218	10006a44: R_386_32	.text
10006a48:	50                   	push   eax
10006a49:	e8 fc ff ff ff       	call   10006a4a <begin(void*)+0x190b>	10006a4a: R_386_PC32	strcpy
10006a4e:	83 c4 10             	add    esp,0x10
10006a51:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10006a54:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10006a56: R_386_32	guiKeyboardHandler
	10006a5a: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
10006a5e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006a60: R_386_32	installKey
10006a65:	e8 fc ff ff ff       	call   10006a66 <begin(void*)+0x1927>	10006a66: R_386_PC32	drawBootScreen()
10006a6a:	83 ec 0c             	sub    esp,0xc
10006a6d:	68 4b b2 00 10       	push   0x1000b24b	10006a6e: R_386_32	.text
10006a72:	6a 10                	push   0x10
10006a74:	6a 39                	push   0x39
10006a76:	6a 03                	push   0x3
10006a78:	6a 0c                	push   0xc
10006a7a:	e8 fc ff ff ff       	call   10006a7b <begin(void*)+0x193c>	10006a7b: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10006a7f:	83 c4 20             	add    esp,0x20
10006a82:	a1 00 00 00 00       	mov    eax,ds:0x0	10006a83: R_386_32	term
10006a87:	83 ec 04             	sub    esp,0x4
10006a8a:	6a 06                	push   0x6
10006a8c:	6a 0e                	push   0xe
10006a8e:	50                   	push   eax
10006a8f:	e8 fc ff ff ff       	call   10006a90 <begin(void*)+0x1951>	10006a90: R_386_PC32	VgaText::setCursor(int, int)
10006a94:	83 c4 10             	add    esp,0x10
10006a97:	a1 00 00 00 00       	mov    eax,ds:0x0	10006a98: R_386_32	term
10006a9c:	6a 0f                	push   0xf
10006a9e:	6a 00                	push   0x0
10006aa0:	68 54 b2 00 10       	push   0x1000b254	10006aa1: R_386_32	.text
10006aa5:	50                   	push   eax
10006aa6:	e8 fc ff ff ff       	call   10006aa7 <begin(void*)+0x1968>	10006aa7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006aab:	83 c4 10             	add    esp,0x10
10006aae:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10006ab2:	75 0c                	jne    10006ac0 <begin(void*)+0x1981>
10006ab4:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10006abb:	e9 23 01 00 00       	jmp    10006be3 <begin(void*)+0x1aa4>
10006ac0:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10006ac7:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006aca:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10006acd:	7d 63                	jge    10006b32 <begin(void*)+0x19f3>
10006acf:	a1 00 00 00 00       	mov    eax,ds:0x0	10006ad0: R_386_32	term
10006ad4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10006ad7:	83 c2 08             	add    edx,0x8
10006ada:	83 ec 04             	sub    esp,0x4
10006add:	52                   	push   edx
10006ade:	6a 0f                	push   0xf
10006ae0:	50                   	push   eax
10006ae1:	e8 fc ff ff ff       	call   10006ae2 <begin(void*)+0x19a3>	10006ae2: R_386_PC32	VgaText::setCursor(int, int)
10006ae6:	83 c4 10             	add    esp,0x10
10006ae9:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10006aeb: R_386_32	term
10006aef:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006af2:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006af5:	75 07                	jne    10006afe <begin(void*)+0x19bf>
10006af7:	b9 00 00 00 00       	mov    ecx,0x0
10006afc:	eb 05                	jmp    10006b03 <begin(void*)+0x19c4>
10006afe:	b9 0f 00 00 00       	mov    ecx,0xf
10006b03:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006b06:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006b09:	75 07                	jne    10006b12 <begin(void*)+0x19d3>
10006b0b:	ba 0f 00 00 00       	mov    edx,0xf
10006b10:	eb 05                	jmp    10006b17 <begin(void*)+0x19d8>
10006b12:	ba 00 00 00 00       	mov    edx,0x0
10006b17:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006b1a:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10006b21:	51                   	push   ecx
10006b22:	52                   	push   edx
10006b23:	50                   	push   eax
10006b24:	53                   	push   ebx
10006b25:	e8 fc ff ff ff       	call   10006b26 <begin(void*)+0x19e7>	10006b26: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006b2a:	83 c4 10             	add    esp,0x10
10006b2d:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10006b30:	eb 95                	jmp    10006ac7 <begin(void*)+0x1988>
10006b32:	a0 00 00 00 00       	mov    al,ds:0x0	10006b33: R_386_32	installKey
10006b37:	84 c0                	test   al,al
10006b39:	0f 94 c0             	sete   al
10006b3c:	84 c0                	test   al,al
10006b3e:	74 02                	je     10006b42 <begin(void*)+0x1a03>
10006b40:	eb f0                	jmp    10006b32 <begin(void*)+0x19f3>
10006b42:	a1 00 00 00 00       	mov    eax,ds:0x0	10006b43: R_386_32	term
10006b47:	05 82 00 00 00       	add    eax,0x82
10006b4c:	83 ec 04             	sub    esp,0x4
10006b4f:	6a 04                	push   0x4
10006b51:	6a 00                	push   0x0
10006b53:	50                   	push   eax
10006b54:	e8 fc ff ff ff       	call   10006b55 <begin(void*)+0x1a16>	10006b55: R_386_PC32	memset
10006b59:	83 c4 10             	add    esp,0x10
10006b5c:	a1 00 00 00 00       	mov    eax,ds:0x0	10006b5d: R_386_32	term
10006b61:	05 02 01 00 00       	add    eax,0x102
10006b66:	83 ec 04             	sub    esp,0x4
10006b69:	6a 04                	push   0x4
10006b6b:	6a 00                	push   0x0
10006b6d:	50                   	push   eax
10006b6e:	e8 fc ff ff ff       	call   10006b6f <begin(void*)+0x1a30>	10006b6f: R_386_PC32	memset
10006b73:	83 c4 10             	add    esp,0x10
10006b76:	a0 00 00 00 00       	mov    al,ds:0x0	10006b77: R_386_32	installKey
10006b7b:	3c 01                	cmp    al,0x1
10006b7d:	0f 94 c0             	sete   al
10006b80:	84 c0                	test   al,al
10006b82:	74 12                	je     10006b96 <begin(void*)+0x1a57>
10006b84:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10006b87:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10006b8b:	79 39                	jns    10006bc6 <begin(void*)+0x1a87>
10006b8d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10006b94:	eb 30                	jmp    10006bc6 <begin(void*)+0x1a87>
10006b96:	a0 00 00 00 00       	mov    al,ds:0x0	10006b97: R_386_32	installKey
10006b9b:	3c 02                	cmp    al,0x2
10006b9d:	0f 94 c0             	sete   al
10006ba0:	84 c0                	test   al,al
10006ba2:	74 14                	je     10006bb8 <begin(void*)+0x1a79>
10006ba4:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10006ba7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006baa:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006bad:	7f 17                	jg     10006bc6 <begin(void*)+0x1a87>
10006baf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006bb2:	48                   	dec    eax
10006bb3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10006bb6:	eb 0e                	jmp    10006bc6 <begin(void*)+0x1a87>
10006bb8:	a0 00 00 00 00       	mov    al,ds:0x0	10006bb9: R_386_32	installKey
10006bbd:	3c 0a                	cmp    al,0xa
10006bbf:	0f 94 c0             	sete   al
10006bc2:	84 c0                	test   al,al
10006bc4:	75 1c                	jne    10006be2 <begin(void*)+0x1aa3>
10006bc6:	83 ec 0c             	sub    esp,0xc
10006bc9:	68 f4 01 00 00       	push   0x1f4
10006bce:	e8 fc ff ff ff       	call   10006bcf <begin(void*)+0x1a90>	10006bcf: R_386_PC32	milliTenthSleep(unsigned int)
10006bd3:	83 c4 10             	add    esp,0x10
10006bd6:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006bd8: R_386_32	installKey
10006bdd:	e9 cc fe ff ff       	jmp    10006aae <begin(void*)+0x196f>
10006be2:	90                   	nop
10006be3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006be6:	48                   	dec    eax
10006be7:	39 45 dc             	cmp    DWORD PTR [ebp-0x24],eax
10006bea:	0f 85 af 00 00 00    	jne    10006c9f <begin(void*)+0x1b60>
10006bf0:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10006bf2: R_386_32	createNewUserMode
10006bf7:	83 ec 0c             	sub    esp,0xc
10006bfa:	6a 00                	push   0x0
10006bfc:	e8 fc ff ff ff       	call   10006bfd <begin(void*)+0x1abe>	10006bfd: R_386_PC32	firstRun(bool)
10006c01:	83 c4 10             	add    esp,0x10
10006c04:	a0 00 00 00 00       	mov    al,ds:0x0	10006c05: R_386_32	createNewUserMode
10006c09:	83 f0 01             	xor    eax,0x1
10006c0c:	84 c0                	test   al,al
10006c0e:	0f 84 82 e7 ff ff    	je     10005396 <begin(void*)+0x257>
10006c14:	a1 00 00 00 00       	mov    eax,ds:0x0	10006c15: R_386_32	term
10006c19:	05 82 00 00 00       	add    eax,0x82
10006c1e:	83 ec 04             	sub    esp,0x4
10006c21:	6a 04                	push   0x4
10006c23:	6a 00                	push   0x0
10006c25:	50                   	push   eax
10006c26:	e8 fc ff ff ff       	call   10006c27 <begin(void*)+0x1ae8>	10006c27: R_386_PC32	memset
10006c2b:	83 c4 10             	add    esp,0x10
10006c2e:	a1 00 00 00 00       	mov    eax,ds:0x0	10006c2f: R_386_32	term
10006c33:	05 02 01 00 00       	add    eax,0x102
10006c38:	83 ec 04             	sub    esp,0x4
10006c3b:	6a 04                	push   0x4
10006c3d:	6a 00                	push   0x0
10006c3f:	50                   	push   eax
10006c40:	e8 fc ff ff ff       	call   10006c41 <begin(void*)+0x1b02>	10006c41: R_386_PC32	memset
10006c45:	83 c4 10             	add    esp,0x10
10006c48:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006c4a: R_386_32	installKey
10006c4f:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10006c52:	e9 ae fb ff ff       	jmp    10006805 <begin(void*)+0x16c6>
10006c57:	90                   	nop
10006c58:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006c5a: R_386_32	createNewUserMode
10006c5f:	a1 00 00 00 00       	mov    eax,ds:0x0	10006c60: R_386_32	term
10006c64:	05 82 00 00 00       	add    eax,0x82
10006c69:	83 ec 04             	sub    esp,0x4
10006c6c:	6a 04                	push   0x4
10006c6e:	6a 00                	push   0x0
10006c70:	50                   	push   eax
10006c71:	e8 fc ff ff ff       	call   10006c72 <begin(void*)+0x1b33>	10006c72: R_386_PC32	memset
10006c76:	83 c4 10             	add    esp,0x10
10006c79:	a1 00 00 00 00       	mov    eax,ds:0x0	10006c7a: R_386_32	term
10006c7e:	05 02 01 00 00       	add    eax,0x102
10006c83:	83 ec 04             	sub    esp,0x4
10006c86:	6a 04                	push   0x4
10006c88:	6a 00                	push   0x0
10006c8a:	50                   	push   eax
10006c8b:	e8 fc ff ff ff       	call   10006c8c <begin(void*)+0x1b4d>	10006c8c: R_386_PC32	memset
10006c90:	83 c4 10             	add    esp,0x10
10006c93:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006c95: R_386_32	installKey
10006c9a:	e9 66 fb ff ff       	jmp    10006805 <begin(void*)+0x16c6>
10006c9f:	83 ec 08             	sub    esp,0x8
10006ca2:	68 a2 ad 00 10       	push   0x1000ada2	10006ca3: R_386_32	.text
10006ca7:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006cad:	50                   	push   eax
10006cae:	e8 fc ff ff ff       	call   10006caf <begin(void*)+0x1b70>	10006caf: R_386_PC32	strcpy
10006cb3:	83 c4 10             	add    esp,0x10
10006cb6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006cb9:	8b 84 85 c8 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x638]
10006cc0:	83 ec 08             	sub    esp,0x8
10006cc3:	50                   	push   eax
10006cc4:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006cca:	50                   	push   eax
10006ccb:	e8 fc ff ff ff       	call   10006ccc <begin(void*)+0x1b8d>	10006ccc: R_386_PC32	strcat
10006cd0:	83 c4 10             	add    esp,0x10
10006cd3:	83 ec 08             	sub    esp,0x8
10006cd6:	68 db b0 00 10       	push   0x1000b0db	10006cd7: R_386_32	.text
10006cdb:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006ce1:	50                   	push   eax
10006ce2:	e8 fc ff ff ff       	call   10006ce3 <begin(void*)+0x1ba4>	10006ce3: R_386_PC32	strcat
10006ce7:	83 c4 10             	add    esp,0x10
10006cea:	83 ec 0c             	sub    esp,0xc
10006ced:	68 64 ad 00 10       	push   0x1000ad64	10006cee: R_386_32	.text
10006cf2:	e8 fc ff ff ff       	call   10006cf3 <begin(void*)+0x1bb4>	10006cf3: R_386_PC32	CmOpen(char const*)
10006cf7:	83 c4 10             	add    esp,0x10
10006cfa:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10006cfd:	83 ec 08             	sub    esp,0x8
10006d00:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006d06:	50                   	push   eax
10006d07:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006d0a:	e8 fc ff ff ff       	call   10006d0b <begin(void*)+0x1bcc>	10006d0b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006d0f:	83 c4 10             	add    esp,0x10
10006d12:	83 ec 04             	sub    esp,0x4
10006d15:	8d 95 ca fa ff ff    	lea    edx,[ebp-0x536]
10006d1b:	52                   	push   edx
10006d1c:	50                   	push   eax
10006d1d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006d20:	e8 fc ff ff ff       	call   10006d21 <begin(void*)+0x1be2>	10006d21: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006d25:	83 c4 10             	add    esp,0x10
10006d28:	83 ec 08             	sub    esp,0x8
10006d2b:	68 a2 ad 00 10       	push   0x1000ada2	10006d2c: R_386_32	.text
10006d30:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006d36:	50                   	push   eax
10006d37:	e8 fc ff ff ff       	call   10006d38 <begin(void*)+0x1bf9>	10006d38: R_386_PC32	strcpy
10006d3c:	83 c4 10             	add    esp,0x10
10006d3f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006d42:	8b 84 85 c8 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x638]
10006d49:	83 ec 08             	sub    esp,0x8
10006d4c:	50                   	push   eax
10006d4d:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006d53:	50                   	push   eax
10006d54:	e8 fc ff ff ff       	call   10006d55 <begin(void*)+0x1c16>	10006d55: R_386_PC32	strcat
10006d59:	83 c4 10             	add    esp,0x10
10006d5c:	83 ec 08             	sub    esp,0x8
10006d5f:	68 e5 b0 00 10       	push   0x1000b0e5	10006d60: R_386_32	.text
10006d64:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006d6a:	50                   	push   eax
10006d6b:	e8 fc ff ff ff       	call   10006d6c <begin(void*)+0x1c2d>	10006d6c: R_386_PC32	strcat
10006d70:	83 c4 10             	add    esp,0x10
10006d73:	83 ec 08             	sub    esp,0x8
10006d76:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006d7c:	50                   	push   eax
10006d7d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006d80:	e8 fc ff ff ff       	call   10006d81 <begin(void*)+0x1c42>	10006d81: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006d85:	83 c4 10             	add    esp,0x10
10006d88:	83 ec 04             	sub    esp,0x4
10006d8b:	8d 95 f8 f8 ff ff    	lea    edx,[ebp-0x708]
10006d91:	52                   	push   edx
10006d92:	50                   	push   eax
10006d93:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006d96:	e8 fc ff ff ff       	call   10006d97 <begin(void*)+0x1c58>	10006d97: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006d9b:	83 c4 10             	add    esp,0x10
10006d9e:	83 ec 0c             	sub    esp,0xc
10006da1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006da4:	e8 fc ff ff ff       	call   10006da5 <begin(void*)+0x1c66>	10006da5: R_386_PC32	CmClose(Reghive_Tag*)
10006da9:	83 c4 10             	add    esp,0x10
10006dac:	83 ec 04             	sub    esp,0x4
10006daf:	68 80 00 00 00       	push   0x80
10006db4:	6a 00                	push   0x0
10006db6:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006dbc:	50                   	push   eax
10006dbd:	e8 fc ff ff ff       	call   10006dbe <begin(void*)+0x1c7f>	10006dbe: R_386_PC32	memset
10006dc2:	83 c4 10             	add    esp,0x10
10006dc5:	e8 fc ff ff ff       	call   10006dc6 <begin(void*)+0x1c87>	10006dc6: R_386_PC32	drawBootScreen()
10006dca:	83 ec 08             	sub    esp,0x8
10006dcd:	6a 01                	push   0x1
10006dcf:	68 4b b2 00 10       	push   0x1000b24b	10006dd0: R_386_32	.text
10006dd4:	6a 10                	push   0x10
10006dd6:	6a 39                	push   0x39
10006dd8:	6a 03                	push   0x3
10006dda:	6a 0c                	push   0xc
10006ddc:	e8 fc ff ff ff       	call   10006ddd <begin(void*)+0x1c9e>	10006ddd: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10006de1:	83 c4 20             	add    esp,0x20
10006de4:	a1 00 00 00 00       	mov    eax,ds:0x0	10006de5: R_386_32	term
10006de9:	83 ec 04             	sub    esp,0x4
10006dec:	6a 06                	push   0x6
10006dee:	6a 0e                	push   0xe
10006df0:	50                   	push   eax
10006df1:	e8 fc ff ff ff       	call   10006df2 <begin(void*)+0x1cb3>	10006df2: R_386_PC32	VgaText::setCursor(int, int)
10006df6:	83 c4 10             	add    esp,0x10
10006df9:	a1 00 00 00 00       	mov    eax,ds:0x0	10006dfa: R_386_32	term
10006dfe:	6a 07                	push   0x7
10006e00:	6a 00                	push   0x0
10006e02:	68 54 b2 00 10       	push   0x1000b254	10006e03: R_386_32	.text
10006e07:	50                   	push   eax
10006e08:	e8 fc ff ff ff       	call   10006e09 <begin(void*)+0x1cca>	10006e09: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006e0d:	83 c4 10             	add    esp,0x10
10006e10:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10006e14:	7e 72                	jle    10006e88 <begin(void*)+0x1d49>
10006e16:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10006e1d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006e20:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10006e23:	7d 63                	jge    10006e88 <begin(void*)+0x1d49>
10006e25:	a1 00 00 00 00       	mov    eax,ds:0x0	10006e26: R_386_32	term
10006e2a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
10006e2d:	83 c2 08             	add    edx,0x8
10006e30:	83 ec 04             	sub    esp,0x4
10006e33:	52                   	push   edx
10006e34:	6a 0f                	push   0xf
10006e36:	50                   	push   eax
10006e37:	e8 fc ff ff ff       	call   10006e38 <begin(void*)+0x1cf9>	10006e38: R_386_PC32	VgaText::setCursor(int, int)
10006e3c:	83 c4 10             	add    esp,0x10
10006e3f:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10006e41: R_386_32	term
10006e45:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006e48:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006e4b:	75 07                	jne    10006e54 <begin(void*)+0x1d15>
10006e4d:	b9 00 00 00 00       	mov    ecx,0x0
10006e52:	eb 05                	jmp    10006e59 <begin(void*)+0x1d1a>
10006e54:	b9 07 00 00 00       	mov    ecx,0x7
10006e59:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006e5c:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006e5f:	75 07                	jne    10006e68 <begin(void*)+0x1d29>
10006e61:	ba 07 00 00 00       	mov    edx,0x7
10006e66:	eb 05                	jmp    10006e6d <begin(void*)+0x1d2e>
10006e68:	ba 00 00 00 00       	mov    edx,0x0
10006e6d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006e70:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10006e77:	51                   	push   ecx
10006e78:	52                   	push   edx
10006e79:	50                   	push   eax
10006e7a:	53                   	push   ebx
10006e7b:	e8 fc ff ff ff       	call   10006e7c <begin(void*)+0x1d3d>	10006e7c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006e80:	83 c4 10             	add    esp,0x10
10006e83:	ff 45 d0             	inc    DWORD PTR [ebp-0x30]
10006e86:	eb 95                	jmp    10006e1d <begin(void*)+0x1cde>
10006e88:	83 ec 0c             	sub    esp,0xc
10006e8b:	68 4b b2 00 10       	push   0x1000b24b	10006e8c: R_386_32	.text
10006e90:	6a 0b                	push   0xb
10006e92:	6a 2d                	push   0x2d
10006e94:	6a 0a                	push   0xa
10006e96:	6a 1c                	push   0x1c
10006e98:	e8 fc ff ff ff       	call   10006e99 <begin(void*)+0x1d5a>	10006e99: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10006e9d:	83 c4 20             	add    esp,0x20
10006ea0:	c6 45 cf 01          	mov    BYTE PTR [ebp-0x31],0x1
10006ea4:	83 ec 04             	sub    esp,0x4
10006ea7:	8d 85 4a fb ff ff    	lea    eax,[ebp-0x4b6]
10006ead:	50                   	push   eax
10006eae:	8d 85 f8 f8 ff ff    	lea    eax,[ebp-0x708]
10006eb4:	50                   	push   eax
10006eb5:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006ebb:	50                   	push   eax
10006ebc:	e8 fc ff ff ff       	call   10006ebd <begin(void*)+0x1d7e>	10006ebd: R_386_PC32	bcrypt_hashpw
10006ec1:	83 c4 10             	add    esp,0x10
10006ec4:	83 ec 08             	sub    esp,0x8
10006ec7:	8d 85 4a fb ff ff    	lea    eax,[ebp-0x4b6]
10006ecd:	50                   	push   eax
10006ece:	8d 85 ca fa ff ff    	lea    eax,[ebp-0x536]
10006ed4:	50                   	push   eax
10006ed5:	e8 fc ff ff ff       	call   10006ed6 <begin(void*)+0x1d97>	10006ed6: R_386_PC32	strcmp
10006eda:	83 c4 10             	add    esp,0x10
10006edd:	85 c0                	test   eax,eax
10006edf:	75 04                	jne    10006ee5 <begin(void*)+0x1da6>
10006ee1:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
10006ee5:	83 ec 04             	sub    esp,0x4
10006ee8:	68 80 00 00 00       	push   0x80
10006eed:	6a 00                	push   0x0
10006eef:	8d 85 4a fb ff ff    	lea    eax,[ebp-0x4b6]
10006ef5:	50                   	push   eax
10006ef6:	e8 fc ff ff ff       	call   10006ef7 <begin(void*)+0x1db8>	10006ef7: R_386_PC32	memset
10006efb:	83 c4 10             	add    esp,0x10
10006efe:	80 7d cf 00          	cmp    BYTE PTR [ebp-0x31],0x0
10006f02:	0f 84 9c 02 00 00    	je     100071a4 <begin(void*)+0x2065>
10006f08:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f09: R_386_32	term
10006f0d:	83 ec 04             	sub    esp,0x4
10006f10:	6a 0d                	push   0xd
10006f12:	6a 1e                	push   0x1e
10006f14:	50                   	push   eax
10006f15:	e8 fc ff ff ff       	call   10006f16 <begin(void*)+0x1dd7>	10006f16: R_386_PC32	VgaText::setCursor(int, int)
10006f1a:	83 c4 10             	add    esp,0x10
10006f1d:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f1e: R_386_32	term
10006f22:	83 ec 08             	sub    esp,0x8
10006f25:	68 84 b2 00 10       	push   0x1000b284	10006f26: R_386_32	.text
10006f2a:	50                   	push   eax
10006f2b:	e8 fc ff ff ff       	call   10006f2c <begin(void*)+0x1ded>	10006f2c: R_386_PC32	VgaText::puts(char const*)
10006f30:	83 c4 10             	add    esp,0x10
10006f33:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f34: R_386_32	term
10006f38:	83 ec 04             	sub    esp,0x4
10006f3b:	6a 0e                	push   0xe
10006f3d:	6a 1e                	push   0x1e
10006f3f:	50                   	push   eax
10006f40:	e8 fc ff ff ff       	call   10006f41 <begin(void*)+0x1e02>	10006f41: R_386_PC32	VgaText::setCursor(int, int)
10006f45:	83 c4 10             	add    esp,0x10
10006f48:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f49: R_386_32	term
10006f4d:	83 ec 08             	sub    esp,0x8
10006f50:	68 ae b2 00 10       	push   0x1000b2ae	10006f51: R_386_32	.text
10006f55:	50                   	push   eax
10006f56:	e8 fc ff ff ff       	call   10006f57 <begin(void*)+0x1e18>	10006f57: R_386_PC32	VgaText::puts(char const*)
10006f5b:	83 c4 10             	add    esp,0x10
10006f5e:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f5f: R_386_32	term
10006f63:	83 ec 04             	sub    esp,0x4
10006f66:	6a 10                	push   0x10
10006f68:	6a 1e                	push   0x1e
10006f6a:	50                   	push   eax
10006f6b:	e8 fc ff ff ff       	call   10006f6c <begin(void*)+0x1e2d>	10006f6c: R_386_PC32	VgaText::setCursor(int, int)
10006f70:	83 c4 10             	add    esp,0x10
10006f73:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f74: R_386_32	term
10006f78:	6a 07                	push   0x7
10006f7a:	6a 00                	push   0x0
10006f7c:	68 b0 a8 00 10       	push   0x1000a8b0	10006f7d: R_386_32	.text
10006f81:	50                   	push   eax
10006f82:	e8 fc ff ff ff       	call   10006f83 <begin(void*)+0x1e44>	10006f83: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006f87:	83 c4 10             	add    esp,0x10
10006f8a:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f8b: R_386_32	term
10006f8f:	83 ec 08             	sub    esp,0x8
10006f92:	6a 1e                	push   0x1e
10006f94:	50                   	push   eax
10006f95:	e8 fc ff ff ff       	call   10006f96 <begin(void*)+0x1e57>	10006f96: R_386_PC32	VgaText::setCursorX(int)
10006f9a:	83 c4 10             	add    esp,0x10
10006f9d:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
10006fa4:	83 ec 0c             	sub    esp,0xc
10006fa7:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006fad:	50                   	push   eax
10006fae:	e8 fc ff ff ff       	call   10006faf <begin(void*)+0x1e70>	10006faf: R_386_PC32	strlen
10006fb3:	83 c4 10             	add    esp,0x10
10006fb6:	89 c2                	mov    edx,eax
10006fb8:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10006fbb:	39 c2                	cmp    edx,eax
10006fbd:	76 1c                	jbe    10006fdb <begin(void*)+0x1e9c>
10006fbf:	a1 00 00 00 00       	mov    eax,ds:0x0	10006fc0: R_386_32	term
10006fc4:	6a 07                	push   0x7
10006fc6:	6a 00                	push   0x0
10006fc8:	68 dc a8 00 10       	push   0x1000a8dc	10006fc9: R_386_32	.text
10006fcd:	50                   	push   eax
10006fce:	e8 fc ff ff ff       	call   10006fcf <begin(void*)+0x1e90>	10006fcf: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006fd3:	83 c4 10             	add    esp,0x10
10006fd6:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
10006fd9:	eb c9                	jmp    10006fa4 <begin(void*)+0x1e65>
10006fdb:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10006fdd: R_386_32	term
10006fe1:	83 ec 0c             	sub    esp,0xc
10006fe4:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006fea:	50                   	push   eax
10006feb:	e8 fc ff ff ff       	call   10006fec <begin(void*)+0x1ead>	10006fec: R_386_PC32	strlen
10006ff0:	83 c4 10             	add    esp,0x10
10006ff3:	83 c0 1e             	add    eax,0x1e
10006ff6:	83 ec 04             	sub    esp,0x4
10006ff9:	6a 10                	push   0x10
10006ffb:	50                   	push   eax
10006ffc:	53                   	push   ebx
10006ffd:	e8 fc ff ff ff       	call   10006ffe <begin(void*)+0x1ebf>	10006ffe: R_386_PC32	VgaText::setCursor(int, int)
10007002:	83 c4 10             	add    esp,0x10
10007005:	a0 00 00 00 00       	mov    al,ds:0x0	10007006: R_386_32	installKey
1000700a:	84 c0                	test   al,al
1000700c:	0f 94 c0             	sete   al
1000700f:	84 c0                	test   al,al
10007011:	74 02                	je     10007015 <begin(void*)+0x1ed6>
10007013:	eb f0                	jmp    10007005 <begin(void*)+0x1ec6>
10007015:	a1 00 00 00 00       	mov    eax,ds:0x0	10007016: R_386_32	term
1000701a:	05 82 00 00 00       	add    eax,0x82
1000701f:	83 ec 04             	sub    esp,0x4
10007022:	6a 10                	push   0x10
10007024:	6a 00                	push   0x0
10007026:	50                   	push   eax
10007027:	e8 fc ff ff ff       	call   10007028 <begin(void*)+0x1ee9>	10007028: R_386_PC32	memset
1000702c:	83 c4 10             	add    esp,0x10
1000702f:	a1 00 00 00 00       	mov    eax,ds:0x0	10007030: R_386_32	term
10007034:	05 02 01 00 00       	add    eax,0x102
10007039:	83 ec 04             	sub    esp,0x4
1000703c:	6a 10                	push   0x10
1000703e:	6a 00                	push   0x0
10007040:	50                   	push   eax
10007041:	e8 fc ff ff ff       	call   10007042 <begin(void*)+0x1f03>	10007042: R_386_PC32	memset
10007046:	83 c4 10             	add    esp,0x10
10007049:	a0 00 00 00 00       	mov    al,ds:0x0	1000704a: R_386_32	installKey
1000704e:	3c 0a                	cmp    al,0xa
10007050:	0f 94 c0             	sete   al
10007053:	84 c0                	test   al,al
10007055:	0f 84 88 00 00 00    	je     100070e3 <begin(void*)+0x1fa4>
1000705b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000705d: R_386_32	installKey
10007062:	83 ec 04             	sub    esp,0x4
10007065:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000706b:	50                   	push   eax
1000706c:	8d 85 f8 f8 ff ff    	lea    eax,[ebp-0x708]
10007072:	50                   	push   eax
10007073:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10007079:	50                   	push   eax
1000707a:	e8 fc ff ff ff       	call   1000707b <begin(void*)+0x1f3c>	1000707b: R_386_PC32	bcrypt_hashpw
1000707f:	83 c4 10             	add    esp,0x10
10007082:	8d 85 f8 f8 ff ff    	lea    eax,[ebp-0x708]
10007088:	50                   	push   eax
10007089:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000708f:	50                   	push   eax
10007090:	8d 85 ca fa ff ff    	lea    eax,[ebp-0x536]
10007096:	50                   	push   eax
10007097:	68 c8 b2 00 10       	push   0x1000b2c8	10007098: R_386_32	.text
1000709c:	e8 fc ff ff ff       	call   1000709d <begin(void*)+0x1f5e>	1000709d: R_386_PC32	Dbg::kprintf(char const*, ...)
100070a1:	83 c4 10             	add    esp,0x10
100070a4:	83 ec 08             	sub    esp,0x8
100070a7:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100070ad:	50                   	push   eax
100070ae:	8d 85 ca fa ff ff    	lea    eax,[ebp-0x536]
100070b4:	50                   	push   eax
100070b5:	e8 fc ff ff ff       	call   100070b6 <begin(void*)+0x1f77>	100070b6: R_386_PC32	strcmp
100070ba:	83 c4 10             	add    esp,0x10
100070bd:	85 c0                	test   eax,eax
100070bf:	0f 84 de 00 00 00    	je     100071a3 <begin(void*)+0x2064>
100070c5:	83 ec 04             	sub    esp,0x4
100070c8:	68 80 00 00 00       	push   0x80
100070cd:	6a 00                	push   0x0
100070cf:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100070d5:	50                   	push   eax
100070d6:	e8 fc ff ff ff       	call   100070d7 <begin(void*)+0x1f98>	100070d7: R_386_PC32	memset
100070db:	83 c4 10             	add    esp,0x10
100070de:	e9 b4 00 00 00       	jmp    10007197 <begin(void*)+0x2058>
100070e3:	a0 00 00 00 00       	mov    al,ds:0x0	100070e4: R_386_32	installKey
100070e8:	3c 1f                	cmp    al,0x1f
100070ea:	7e 0d                	jle    100070f9 <begin(void*)+0x1fba>
100070ec:	a0 00 00 00 00       	mov    al,ds:0x0	100070ed: R_386_32	installKey
100070f1:	3c 7f                	cmp    al,0x7f
100070f3:	74 04                	je     100070f9 <begin(void*)+0x1fba>
100070f5:	b0 01                	mov    al,0x1
100070f7:	eb 02                	jmp    100070fb <begin(void*)+0x1fbc>
100070f9:	b0 00                	mov    al,0x0
100070fb:	84 c0                	test   al,al
100070fd:	74 44                	je     10007143 <begin(void*)+0x2004>
100070ff:	a0 00 00 00 00       	mov    al,ds:0x0	10007100: R_386_32	installKey
10007104:	88 85 ca fc ff ff    	mov    BYTE PTR [ebp-0x336],al
1000710a:	c6 85 cb fc ff ff 00 	mov    BYTE PTR [ebp-0x335],0x0
10007111:	83 ec 0c             	sub    esp,0xc
10007114:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
1000711a:	50                   	push   eax
1000711b:	e8 fc ff ff ff       	call   1000711c <begin(void*)+0x1fdd>	1000711c: R_386_PC32	strlen
10007120:	83 c4 10             	add    esp,0x10
10007123:	83 f8 22             	cmp    eax,0x22
10007126:	77 6f                	ja     10007197 <begin(void*)+0x2058>
10007128:	83 ec 08             	sub    esp,0x8
1000712b:	8d 85 ca fc ff ff    	lea    eax,[ebp-0x336]
10007131:	50                   	push   eax
10007132:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10007138:	50                   	push   eax
10007139:	e8 fc ff ff ff       	call   1000713a <begin(void*)+0x1ffb>	1000713a: R_386_PC32	strcat
1000713e:	83 c4 10             	add    esp,0x10
10007141:	eb 54                	jmp    10007197 <begin(void*)+0x2058>
10007143:	a0 00 00 00 00       	mov    al,ds:0x0	10007144: R_386_32	installKey
10007148:	3c 08                	cmp    al,0x8
1000714a:	0f 94 c0             	sete   al
1000714d:	84 c0                	test   al,al
1000714f:	74 33                	je     10007184 <begin(void*)+0x2045>
10007151:	83 ec 0c             	sub    esp,0xc
10007154:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
1000715a:	50                   	push   eax
1000715b:	e8 fc ff ff ff       	call   1000715c <begin(void*)+0x201d>	1000715c: R_386_PC32	strlen
10007160:	83 c4 10             	add    esp,0x10
10007163:	85 c0                	test   eax,eax
10007165:	74 30                	je     10007197 <begin(void*)+0x2058>
10007167:	83 ec 0c             	sub    esp,0xc
1000716a:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10007170:	50                   	push   eax
10007171:	e8 fc ff ff ff       	call   10007172 <begin(void*)+0x2033>	10007172: R_386_PC32	strlen
10007176:	83 c4 10             	add    esp,0x10
10007179:	48                   	dec    eax
1000717a:	c6 84 05 4a fa ff ff 00 	mov    BYTE PTR [ebp+eax*1-0x5b6],0x0
10007182:	eb 13                	jmp    10007197 <begin(void*)+0x2058>
10007184:	a0 00 00 00 00       	mov    al,ds:0x0	10007185: R_386_32	installKey
10007189:	3c 1b                	cmp    al,0x1b
1000718b:	0f 94 c0             	sete   al
1000718e:	84 c0                	test   al,al
10007190:	74 05                	je     10007197 <begin(void*)+0x2058>
10007192:	e9 c7 f8 ff ff       	jmp    10006a5e <begin(void*)+0x191f>
10007197:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007199: R_386_32	installKey
1000719e:	e9 5b fd ff ff       	jmp    10006efe <begin(void*)+0x1dbf>
100071a3:	90                   	nop
100071a4:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100071a6: R_386_32	guiKeyboardHandler
100071ae:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
100071b5:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071b8:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
100071bb:	7d 69                	jge    10007226 <begin(void*)+0x20e7>
100071bd:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071c0:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
100071c7:	85 c0                	test   eax,eax
100071c9:	74 24                	je     100071ef <begin(void*)+0x20b0>
100071cb:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071ce:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
100071d5:	83 ec 0c             	sub    esp,0xc
100071d8:	50                   	push   eax
100071d9:	e8 fc ff ff ff       	call   100071da <begin(void*)+0x209b>	100071da: R_386_PC32	free
100071de:	83 c4 10             	add    esp,0x10
100071e1:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071e4:	c7 84 85 48 f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x6b8],0x0
100071ef:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071f2:	8b 84 85 c8 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x638]
100071f9:	85 c0                	test   eax,eax
100071fb:	74 24                	je     10007221 <begin(void*)+0x20e2>
100071fd:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007200:	8b 84 85 c8 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x638]
10007207:	83 ec 0c             	sub    esp,0xc
1000720a:	50                   	push   eax
1000720b:	e8 fc ff ff ff       	call   1000720c <begin(void*)+0x20cd>	1000720c: R_386_PC32	free
10007210:	83 c4 10             	add    esp,0x10
10007213:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007216:	c7 84 85 c8 f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x638],0x0
10007221:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
10007224:	eb 8f                	jmp    100071b5 <begin(void*)+0x2076>
10007226:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007228: R_386_32	VgaText::hiddenOut
1000722d:	83 ec 0c             	sub    esp,0xc
10007230:	68 24 07 00 00       	push   0x724
10007235:	e8 fc ff ff ff       	call   10007236 <begin(void*)+0x20f7>	10007236: R_386_PC32	operator new(unsigned long)
1000723a:	83 c4 10             	add    esp,0x10
1000723d:	89 c3                	mov    ebx,eax
1000723f:	6a 00                	push   0x0
10007241:	6a 00                	push   0x0
10007243:	68 3a ad 00 10       	push   0x1000ad3a	10007244: R_386_32	.text
10007248:	53                   	push   ebx
10007249:	e8 fc ff ff ff       	call   1000724a <begin(void*)+0x210b>	1000724a: R_386_PC32	Process::Process(char const*, Process*, char**)
1000724e:	83 c4 10             	add    esp,0x10
10007251:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
10007254:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
10007257:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
1000725d:	83 ec 0c             	sub    esp,0xc
10007260:	50                   	push   eax
10007261:	e8 fc ff ff ff       	call   10007262 <begin(void*)+0x2123>	10007262: R_386_PC32	setActiveTerminal(VgaText*)
10007266:	83 c4 10             	add    esp,0x10
10007269:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
10007270:	83 7d c0 18          	cmp    DWORD PTR [ebp-0x40],0x18
10007274:	7f 2e                	jg     100072a4 <begin(void*)+0x2165>
10007276:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [ebp-0x44],0x0
1000727d:	83 7d bc 4f          	cmp    DWORD PTR [ebp-0x44],0x4f
10007281:	7f 1c                	jg     1000729f <begin(void*)+0x2160>
10007283:	83 ec 0c             	sub    esp,0xc
10007286:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10007289:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000728c:	6a 00                	push   0x0
1000728e:	6a 07                	push   0x7
10007290:	6a 20                	push   0x20
10007292:	e8 fc ff ff ff       	call   10007293 <begin(void*)+0x2154>	10007293: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
10007297:	83 c4 20             	add    esp,0x20
1000729a:	ff 45 bc             	inc    DWORD PTR [ebp-0x44]
1000729d:	eb de                	jmp    1000727d <begin(void*)+0x213e>
1000729f:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
100072a2:	eb cc                	jmp    10007270 <begin(void*)+0x2131>
100072a4:	83 ec 0c             	sub    esp,0xc
100072a7:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
100072aa:	e8 fc ff ff ff       	call   100072ab <begin(void*)+0x216c>	100072ab: R_386_PC32	Process::createUserThread()
100072af:	83 c4 10             	add    esp,0x10
100072b2:	8b 85 d0 fc ff ff    	mov    eax,DWORD PTR [ebp-0x330]
100072b8:	8b 95 d4 fc ff ff    	mov    edx,DWORD PTR [ebp-0x32c]
100072be:	89 c1                	mov    ecx,eax
100072c0:	83 f1 01             	xor    ecx,0x1
100072c3:	89 8d a0 f8 ff ff    	mov    DWORD PTR [ebp-0x760],ecx
100072c9:	89 d0                	mov    eax,edx
100072cb:	80 f4 00             	xor    ah,0x0
100072ce:	89 85 a4 f8 ff ff    	mov    DWORD PTR [ebp-0x75c],eax
100072d4:	8b b5 a0 f8 ff ff    	mov    esi,DWORD PTR [ebp-0x760]
100072da:	8b bd a4 f8 ff ff    	mov    edi,DWORD PTR [ebp-0x75c]
100072e0:	89 f8                	mov    eax,edi
100072e2:	09 f0                	or     eax,esi
100072e4:	85 c0                	test   eax,eax
100072e6:	75 17                	jne    100072ff <begin(void*)+0x21c0>
100072e8:	a1 00 00 00 00       	mov    eax,ds:0x0	100072e9: R_386_32	kernelProcess
100072ed:	6a 01                	push   0x1
100072ef:	6a 00                	push   0x0
100072f1:	68 00 00 00 00       	push   0x0	100072f2: R_386_32	startGUI(void*)
100072f6:	50                   	push   eax
100072f7:	e8 fc ff ff ff       	call   100072f8 <begin(void*)+0x21b9>	100072f8: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
100072fc:	83 c4 10             	add    esp,0x10
100072ff:	8b 85 d0 fc ff ff    	mov    eax,DWORD PTR [ebp-0x330]
10007305:	8b 95 d4 fc ff ff    	mov    edx,DWORD PTR [ebp-0x32c]
1000730b:	89 c6                	mov    esi,eax
1000730d:	83 f6 02             	xor    esi,0x2
10007310:	89 b5 98 f8 ff ff    	mov    DWORD PTR [ebp-0x768],esi
10007316:	89 d0                	mov    eax,edx
10007318:	80 f4 00             	xor    ah,0x0
1000731b:	89 85 9c f8 ff ff    	mov    DWORD PTR [ebp-0x764],eax
10007321:	8b b5 98 f8 ff ff    	mov    esi,DWORD PTR [ebp-0x768]
10007327:	8b bd 9c f8 ff ff    	mov    edi,DWORD PTR [ebp-0x764]
1000732d:	89 f8                	mov    eax,edi
1000732f:	09 f0                	or     eax,esi
10007331:	85 c0                	test   eax,eax
10007333:	75 17                	jne    1000734c <begin(void*)+0x220d>
10007335:	a1 00 00 00 00       	mov    eax,ds:0x0	10007336: R_386_32	kernelProcess
1000733a:	6a 01                	push   0x1
1000733c:	6a 00                	push   0x0
1000733e:	68 00 00 00 00       	push   0x0	1000733f: R_386_32	startGUIVESA(void*)
10007343:	50                   	push   eax
10007344:	e8 fc ff ff ff       	call   10007345 <begin(void*)+0x2206>	10007345: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10007349:	83 c4 10             	add    esp,0x10
1000734c:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
1000734f:	8b 00                	mov    eax,DWORD PTR [eax]
10007351:	83 ec 04             	sub    esp,0x4
10007354:	6a 00                	push   0x0
10007356:	8d 95 cc fc ff ff    	lea    edx,[ebp-0x334]
1000735c:	52                   	push   edx
1000735d:	50                   	push   eax
1000735e:	e8 fc ff ff ff       	call   1000735f <begin(void*)+0x2220>	1000735f: R_386_PC32	waitTask(int, int*, int)
10007363:	83 c4 10             	add    esp,0x10
10007366:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10007368: R_386_32	Krnl::computer
1000736c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000736d: R_386_32	Krnl::computer
10007371:	8b 00                	mov    eax,DWORD PTR [eax]
10007373:	83 c0 0c             	add    eax,0xc
10007376:	8b 00                	mov    eax,DWORD PTR [eax]
10007378:	6a 00                	push   0x0
1000737a:	6a 00                	push   0x0
1000737c:	6a 00                	push   0x0
1000737e:	52                   	push   edx
1000737f:	ff d0                	call   eax
10007381:	83 c4 10             	add    esp,0x10
10007384:	83 ec 0c             	sub    esp,0xc
10007387:	68 e8 b2 00 10       	push   0x1000b2e8	10007388: R_386_32	.text
1000738c:	e8 fc ff ff ff       	call   1000738d <begin(void*)+0x224e>	1000738d: R_386_PC32	KePanic(char const*)
10007391:	83 c4 10             	add    esp,0x10
10007394:	eb fe                	jmp    10007394 <begin(void*)+0x2255>

10007396 <clean>:
10007396:	57                   	push   edi
10007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
1000739b:	b0 00                	mov    al,0x0
1000739d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
100073a1:	f3 aa                	rep stos BYTE PTR es:[edi],al
100073a3:	5f                   	pop    edi
100073a4:	c3                   	ret    

100073a5 <BF_decode>:
100073a5:	55                   	push   ebp
100073a6:	57                   	push   edi
100073a7:	56                   	push   esi
100073a8:	53                   	push   ebx
100073a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100073ad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100073b1:	89 d6                	mov    esi,edx
100073b3:	03 74 24 1c          	add    esi,DWORD PTR [esp+0x1c]
100073b7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
100073ba:	83 e8 20             	sub    eax,0x20
100073bd:	83 f8 5f             	cmp    eax,0x5f
100073c0:	0f 87 a3 00 00 00    	ja     10007469 <BF_decode+0xc4>
100073c6:	8a 80 e0 c4 00 10    	mov    al,BYTE PTR [eax+0x1000c4e0]	100073c8: R_386_32	.data
100073cc:	3c 3f                	cmp    al,0x3f
100073ce:	0f 87 9f 00 00 00    	ja     10007473 <BF_decode+0xce>
100073d4:	0f b6 4b 01          	movzx  ecx,BYTE PTR [ebx+0x1]
100073d8:	83 e9 20             	sub    ecx,0x20
100073db:	83 f9 5f             	cmp    ecx,0x5f
100073de:	0f 87 96 00 00 00    	ja     1000747a <BF_decode+0xd5>
100073e4:	8a 89 e0 c4 00 10    	mov    cl,BYTE PTR [ecx+0x1000c4e0]	100073e6: R_386_32	.data
100073ea:	0f b6 f9             	movzx  edi,cl
100073ed:	83 ff 3f             	cmp    edi,0x3f
100073f0:	0f 87 8b 00 00 00    	ja     10007481 <BF_decode+0xdc>
100073f6:	c1 e0 02             	shl    eax,0x2
100073f9:	c1 ef 04             	shr    edi,0x4
100073fc:	09 f8                	or     eax,edi
100073fe:	88 02                	mov    BYTE PTR [edx],al
10007400:	89 d7                	mov    edi,edx
10007402:	8d 42 01             	lea    eax,[edx+0x1]
10007405:	39 c6                	cmp    esi,eax
10007407:	76 7f                	jbe    10007488 <BF_decode+0xe3>
10007409:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
1000740d:	83 e8 20             	sub    eax,0x20
10007410:	83 f8 5f             	cmp    eax,0x5f
10007413:	77 7a                	ja     1000748f <BF_decode+0xea>
10007415:	8a 80 e0 c4 00 10    	mov    al,BYTE PTR [eax+0x1000c4e0]	10007417: R_386_32	.data
1000741b:	0f b6 e8             	movzx  ebp,al
1000741e:	83 fd 3f             	cmp    ebp,0x3f
10007421:	77 73                	ja     10007496 <BF_decode+0xf1>
10007423:	c1 e1 04             	shl    ecx,0x4
10007426:	c1 ed 02             	shr    ebp,0x2
10007429:	09 e9                	or     ecx,ebp
1000742b:	88 4a 01             	mov    BYTE PTR [edx+0x1],cl
1000742e:	8d 52 02             	lea    edx,[edx+0x2]
10007431:	39 d6                	cmp    esi,edx
10007433:	76 68                	jbe    1000749d <BF_decode+0xf8>
10007435:	83 c3 04             	add    ebx,0x4
10007438:	0f b6 53 ff          	movzx  edx,BYTE PTR [ebx-0x1]
1000743c:	83 ea 20             	sub    edx,0x20
1000743f:	83 fa 5f             	cmp    edx,0x5f
10007442:	77 60                	ja     100074a4 <BF_decode+0xff>
10007444:	8a 8a e0 c4 00 10    	mov    cl,BYTE PTR [edx+0x1000c4e0]	10007446: R_386_32	.data
1000744a:	80 f9 3f             	cmp    cl,0x3f
1000744d:	77 5c                	ja     100074ab <BF_decode+0x106>
1000744f:	8d 57 03             	lea    edx,[edi+0x3]
10007452:	c1 e0 06             	shl    eax,0x6
10007455:	09 c1                	or     ecx,eax
10007457:	88 4a ff             	mov    BYTE PTR [edx-0x1],cl
1000745a:	39 d6                	cmp    esi,edx
1000745c:	0f 87 55 ff ff ff    	ja     100073b7 <BF_decode+0x12>
10007462:	b8 00 00 00 00       	mov    eax,0x0
10007467:	eb 05                	jmp    1000746e <BF_decode+0xc9>
10007469:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000746e:	5b                   	pop    ebx
1000746f:	5e                   	pop    esi
10007470:	5f                   	pop    edi
10007471:	5d                   	pop    ebp
10007472:	c3                   	ret    
10007473:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007478:	eb f4                	jmp    1000746e <BF_decode+0xc9>
1000747a:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000747f:	eb ed                	jmp    1000746e <BF_decode+0xc9>
10007481:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007486:	eb e6                	jmp    1000746e <BF_decode+0xc9>
10007488:	b8 00 00 00 00       	mov    eax,0x0
1000748d:	eb df                	jmp    1000746e <BF_decode+0xc9>
1000748f:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007494:	eb d8                	jmp    1000746e <BF_decode+0xc9>
10007496:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000749b:	eb d1                	jmp    1000746e <BF_decode+0xc9>
1000749d:	b8 00 00 00 00       	mov    eax,0x0
100074a2:	eb ca                	jmp    1000746e <BF_decode+0xc9>
100074a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
100074a9:	eb c3                	jmp    1000746e <BF_decode+0xc9>
100074ab:	b8 ff ff ff ff       	mov    eax,0xffffffff
100074b0:	eb bc                	jmp    1000746e <BF_decode+0xc9>

100074b2 <BF_encode>:
100074b2:	55                   	push   ebp
100074b3:	57                   	push   edi
100074b4:	56                   	push   esi
100074b5:	53                   	push   ebx
100074b6:	83 ec 04             	sub    esp,0x4
100074b9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
100074bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100074c1:	89 c7                	mov    edi,eax
100074c3:	03 7c 24 20          	add    edi,DWORD PTR [esp+0x20]
100074c7:	89 3c 24             	mov    DWORD PTR [esp],edi
100074ca:	0f b6 10             	movzx  edx,BYTE PTR [eax]
100074cd:	89 d6                	mov    esi,edx
100074cf:	c1 ee 02             	shr    esi,0x2
100074d2:	8a 9e 80 c4 00 10    	mov    bl,BYTE PTR [esi+0x1000c480]	100074d4: R_386_32	.data
100074d8:	88 19                	mov    BYTE PTR [ecx],bl
100074da:	c1 e2 04             	shl    edx,0x4
100074dd:	83 e2 30             	and    edx,0x30
100074e0:	89 c7                	mov    edi,eax
100074e2:	8d 70 01             	lea    esi,[eax+0x1]
100074e5:	39 34 24             	cmp    DWORD PTR [esp],esi
100074e8:	76 51                	jbe    1000753b <BF_encode+0x89>
100074ea:	0f b6 70 01          	movzx  esi,BYTE PTR [eax+0x1]
100074ee:	89 f5                	mov    ebp,esi
100074f0:	c1 ed 04             	shr    ebp,0x4
100074f3:	09 ea                	or     edx,ebp
100074f5:	8a 9a 80 c4 00 10    	mov    bl,BYTE PTR [edx+0x1000c480]	100074f7: R_386_32	.data
100074fb:	88 59 01             	mov    BYTE PTR [ecx+0x1],bl
100074fe:	c1 e6 02             	shl    esi,0x2
10007501:	83 e6 3c             	and    esi,0x3c
10007504:	83 c0 02             	add    eax,0x2
10007507:	39 04 24             	cmp    DWORD PTR [esp],eax
1000750a:	76 40                	jbe    1000754c <BF_encode+0x9a>
1000750c:	8d 47 03             	lea    eax,[edi+0x3]
1000750f:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
10007512:	0f b6 d3             	movzx  edx,bl
10007515:	c1 ea 06             	shr    edx,0x6
10007518:	09 f2                	or     edx,esi
1000751a:	8a 92 80 c4 00 10    	mov    dl,BYTE PTR [edx+0x1000c480]	1000751c: R_386_32	.data
10007520:	88 51 02             	mov    BYTE PTR [ecx+0x2],dl
10007523:	83 c1 04             	add    ecx,0x4
10007526:	89 da                	mov    edx,ebx
10007528:	83 e2 3f             	and    edx,0x3f
1000752b:	8a 9a 80 c4 00 10    	mov    bl,BYTE PTR [edx+0x1000c480]	1000752d: R_386_32	.data
10007531:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
10007534:	39 04 24             	cmp    DWORD PTR [esp],eax
10007537:	77 91                	ja     100074ca <BF_encode+0x18>
10007539:	eb 09                	jmp    10007544 <BF_encode+0x92>
1000753b:	8a 82 80 c4 00 10    	mov    al,BYTE PTR [edx+0x1000c480]	1000753d: R_386_32	.data
10007541:	88 41 01             	mov    BYTE PTR [ecx+0x1],al
10007544:	83 c4 04             	add    esp,0x4
10007547:	5b                   	pop    ebx
10007548:	5e                   	pop    esi
10007549:	5f                   	pop    edi
1000754a:	5d                   	pop    ebp
1000754b:	c3                   	ret    
1000754c:	8a 86 80 c4 00 10    	mov    al,BYTE PTR [esi+0x1000c480]	1000754e: R_386_32	.data
10007552:	88 41 02             	mov    BYTE PTR [ecx+0x2],al
10007555:	eb ed                	jmp    10007544 <BF_encode+0x92>

10007557 <BF_swap>:
10007557:	53                   	push   ebx
10007558:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000755c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10007560:	80 3d 40 c5 00 10 00 	cmp    BYTE PTR ds:0x1000c540,0x0	10007562: R_386_32	.data
10007567:	74 23                	je     1000758c <BF_swap+0x35>
10007569:	8b 01                	mov    eax,DWORD PTR [ecx]
1000756b:	c1 c0 10             	rol    eax,0x10
1000756e:	83 c1 04             	add    ecx,0x4
10007571:	89 c2                	mov    edx,eax
10007573:	c1 e2 08             	shl    edx,0x8
10007576:	81 e2 00 ff 00 ff    	and    edx,0xff00ff00
1000757c:	c1 e8 08             	shr    eax,0x8
1000757f:	25 ff 00 ff 00       	and    eax,0xff00ff
10007584:	09 d0                	or     eax,edx
10007586:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
10007589:	4b                   	dec    ebx
1000758a:	75 dd                	jne    10007569 <BF_swap+0x12>
1000758c:	5b                   	pop    ebx
1000758d:	c3                   	ret    

1000758e <BF_set_key>:
1000758e:	55                   	push   ebp
1000758f:	57                   	push   edi
10007590:	56                   	push   esi
10007591:	53                   	push   ebx
10007592:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10007596:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
1000759a:	89 f9                	mov    ecx,edi
1000759c:	be 00 00 00 00       	mov    esi,0x0
100075a1:	eb 2d                	jmp    100075d0 <BF_set_key+0x42>
100075a3:	89 f9                	mov    ecx,edi
100075a5:	4a                   	dec    edx
100075a6:	74 10                	je     100075b8 <BF_set_key+0x2a>
100075a8:	c1 e0 08             	shl    eax,0x8
100075ab:	0f b6 19             	movzx  ebx,BYTE PTR [ecx]
100075ae:	09 d8                	or     eax,ebx
100075b0:	80 39 00             	cmp    BYTE PTR [ecx],0x0
100075b3:	74 ee                	je     100075a3 <BF_set_key+0x15>
100075b5:	41                   	inc    ecx
100075b6:	eb ed                	jmp    100075a5 <BF_set_key+0x17>
100075b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100075bc:	89 04 b2             	mov    DWORD PTR [edx+esi*4],eax
100075bf:	33 04 b5 20 c4 00 10 	xor    eax,DWORD PTR [esi*4+0x1000c420]	100075c2: R_386_32	.data
100075c6:	89 44 b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],eax
100075ca:	46                   	inc    esi
100075cb:	83 fe 12             	cmp    esi,0x12
100075ce:	74 0c                	je     100075dc <BF_set_key+0x4e>
100075d0:	ba 04 00 00 00       	mov    edx,0x4
100075d5:	b8 00 00 00 00       	mov    eax,0x0
100075da:	eb cc                	jmp    100075a8 <BF_set_key+0x1a>
100075dc:	5b                   	pop    ebx
100075dd:	5e                   	pop    esi
100075de:	5f                   	pop    edi
100075df:	5d                   	pop    ebp
100075e0:	c3                   	ret    

100075e1 <_crypt_blowfish_rn>:
100075e1:	55                   	push   ebp
100075e2:	57                   	push   edi
100075e3:	56                   	push   esi
100075e4:	53                   	push   ebx
100075e5:	81 ec 00 11 00 00    	sub    esp,0x1100
100075eb:	83 bc 24 20 11 00 00 3c 	cmp    DWORD PTR [esp+0x1120],0x3c
100075f3:	0f 8e 9e 2d 00 00    	jle    1000a397 <_crypt_blowfish_rn+0x2db6>
100075f9:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
10007600:	80 38 24             	cmp    BYTE PTR [eax],0x24
10007603:	0f 85 a8 2d 00 00    	jne    1000a3b1 <_crypt_blowfish_rn+0x2dd0>
10007609:	80 78 01 32          	cmp    BYTE PTR [eax+0x1],0x32
1000760d:	0f 85 9e 2d 00 00    	jne    1000a3b1 <_crypt_blowfish_rn+0x2dd0>
10007613:	80 78 02 61          	cmp    BYTE PTR [eax+0x2],0x61
10007617:	0f 85 94 2d 00 00    	jne    1000a3b1 <_crypt_blowfish_rn+0x2dd0>
1000761d:	80 78 03 24          	cmp    BYTE PTR [eax+0x3],0x24
10007621:	0f 85 8a 2d 00 00    	jne    1000a3b1 <_crypt_blowfish_rn+0x2dd0>
10007627:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
1000762a:	8d 50 d0             	lea    edx,[eax-0x30]
1000762d:	80 fa 03             	cmp    dl,0x3
10007630:	0f 87 7b 2d 00 00    	ja     1000a3b1 <_crypt_blowfish_rn+0x2dd0>
10007636:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
1000763d:	8a 53 05             	mov    dl,BYTE PTR [ebx+0x5]
10007640:	8d 4a d0             	lea    ecx,[edx-0x30]
10007643:	80 f9 09             	cmp    cl,0x9
10007646:	0f 87 65 2d 00 00    	ja     1000a3b1 <_crypt_blowfish_rn+0x2dd0>
1000764c:	3c 33                	cmp    al,0x33
1000764e:	0f 84 54 2d 00 00    	je     1000a3a8 <_crypt_blowfish_rn+0x2dc7>
10007654:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
1000765b:	80 7b 06 24          	cmp    BYTE PTR [ebx+0x6],0x24
1000765f:	0f 85 4c 2d 00 00    	jne    1000a3b1 <_crypt_blowfish_rn+0x2dd0>
10007665:	0f be c0             	movsx  eax,al
10007668:	8d 84 80 10 ff ff ff 	lea    eax,[eax+eax*4-0xf0]
1000766f:	01 c0                	add    eax,eax
10007671:	0f be d2             	movsx  edx,dl
10007674:	8d 4c 10 d0          	lea    ecx,[eax+edx*1-0x30]
10007678:	b8 01 00 00 00       	mov    eax,0x1
1000767d:	d3 e0                	shl    eax,cl
1000767f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10007683:	83 f8 0f             	cmp    eax,0xf
10007686:	0f 86 3f 2d 00 00    	jbe    1000a3cb <_crypt_blowfish_rn+0x2dea>
1000768c:	6a 10                	push   0x10
1000768e:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
10007695:	83 c0 07             	add    eax,0x7
10007698:	50                   	push   eax
10007699:	8d 84 24 f0 10 00 00 	lea    eax,[esp+0x10f0]
100076a0:	50                   	push   eax
100076a1:	e8 ff fc ff ff       	call   100073a5 <BF_decode>
100076a6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
100076aa:	83 c4 0c             	add    esp,0xc
100076ad:	85 c0                	test   eax,eax
100076af:	0f 85 16 2d 00 00    	jne    1000a3cb <_crypt_blowfish_rn+0x2dea>
100076b5:	6a 04                	push   0x4
100076b7:	8d 5c 24 5c          	lea    ebx,[esp+0x5c]
100076bb:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
100076c2:	50                   	push   eax
100076c3:	e8 8f fe ff ff       	call   10007557 <BF_swap>
100076c8:	8d 84 24 60 10 00 00 	lea    eax,[esp+0x1060]
100076cf:	50                   	push   eax
100076d0:	8d 84 24 ac 10 00 00 	lea    eax,[esp+0x10ac]
100076d7:	50                   	push   eax
100076d8:	ff b4 24 24 11 00 00 	push   DWORD PTR [esp+0x1124]
100076df:	e8 aa fe ff ff       	call   1000758e <BF_set_key>
100076e4:	be 20 b4 00 10       	mov    esi,0x1000b420	100076e5: R_386_32	.data
100076e9:	b9 00 04 00 00       	mov    ecx,0x400
100076ee:	89 df                	mov    edi,ebx
100076f0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100076f2:	83 c4 14             	add    esp,0x14
100076f5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100076f9:	89 04 24             	mov    DWORD PTR [esp],eax
100076fc:	bb 00 00 00 00       	mov    ebx,0x0
10007701:	b8 00 00 00 00       	mov    eax,0x0
10007706:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10007709:	83 e1 02             	and    ecx,0x2
1000770c:	8d 91 24 04 00 00    	lea    edx,[ecx+0x424]
10007712:	8b 54 94 58          	mov    edx,DWORD PTR [esp+edx*4+0x58]
10007716:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
1000771d:	31 c2                	xor    edx,eax
1000771f:	89 d7                	mov    edi,edx
10007721:	c1 ef 06             	shr    edi,0x6
10007724:	89 d5                	mov    ebp,edx
10007726:	c1 ed 0e             	shr    ebp,0xe
10007729:	89 d0                	mov    eax,edx
1000772b:	c1 e8 16             	shr    eax,0x16
1000772e:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007735:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000773b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007741:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007747:	25 fc 03 00 00       	and    eax,0x3fc
1000774c:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007750:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007757:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000775e:	81 c1 25 04 00 00    	add    ecx,0x425
10007764:	8b 4c 8c 58          	mov    ecx,DWORD PTR [esp+ecx*4+0x58]
10007768:	33 8c 24 5c 10 00 00 	xor    ecx,DWORD PTR [esp+0x105c]
1000776f:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10007776:	31 c8                	xor    eax,ecx
10007778:	31 c3                	xor    ebx,eax
1000777a:	89 d8                	mov    eax,ebx
1000777c:	c1 e8 06             	shr    eax,0x6
1000777f:	89 c1                	mov    ecx,eax
10007781:	89 df                	mov    edi,ebx
10007783:	c1 ef 0e             	shr    edi,0xe
10007786:	89 d8                	mov    eax,ebx
10007788:	c1 e8 16             	shr    eax,0x16
1000778b:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10007792:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007798:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000779e:	81 e7 fc 03 00 00    	and    edi,0x3fc
100077a4:	25 fc 03 00 00       	and    eax,0x3fc
100077a9:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100077ad:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
100077b4:	33 84 0c 58 08 00 00 	xor    eax,DWORD PTR [esp+ecx*1+0x858]
100077bb:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
100077c2:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100077c9:	89 c1                	mov    ecx,eax
100077cb:	31 d1                	xor    ecx,edx
100077cd:	89 ca                	mov    edx,ecx
100077cf:	c1 ea 06             	shr    edx,0x6
100077d2:	89 cf                	mov    edi,ecx
100077d4:	c1 ef 0e             	shr    edi,0xe
100077d7:	89 c8                	mov    eax,ecx
100077d9:	c1 e8 16             	shr    eax,0x16
100077dc:	8d 34 8d 00 00 00 00 	lea    esi,[ecx*4+0x0]
100077e3:	81 e6 fc 03 00 00    	and    esi,0x3fc
100077e9:	81 e2 fc 03 00 00    	and    edx,0x3fc
100077ef:	81 e7 fc 03 00 00    	and    edi,0x3fc
100077f5:	25 fc 03 00 00       	and    eax,0x3fc
100077fa:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100077fe:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10007805:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000780c:	33 9c 24 64 10 00 00 	xor    ebx,DWORD PTR [esp+0x1064]
10007813:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
1000781a:	89 c2                	mov    edx,eax
1000781c:	31 da                	xor    edx,ebx
1000781e:	89 d6                	mov    esi,edx
10007820:	c1 ee 06             	shr    esi,0x6
10007823:	89 d7                	mov    edi,edx
10007825:	c1 ef 0e             	shr    edi,0xe
10007828:	89 d0                	mov    eax,edx
1000782a:	c1 e8 16             	shr    eax,0x16
1000782d:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10007834:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000783a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007840:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007846:	25 fc 03 00 00       	and    eax,0x3fc
1000784b:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000784f:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10007856:	33 84 34 58 08 00 00 	xor    eax,DWORD PTR [esp+esi*1+0x858]
1000785d:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
10007864:	03 84 1c 58 0c 00 00 	add    eax,DWORD PTR [esp+ebx*1+0xc58]
1000786b:	31 c8                	xor    eax,ecx
1000786d:	89 c3                	mov    ebx,eax
1000786f:	c1 eb 06             	shr    ebx,0x6
10007872:	89 c7                	mov    edi,eax
10007874:	c1 ef 0e             	shr    edi,0xe
10007877:	89 c6                	mov    esi,eax
10007879:	c1 ee 16             	shr    esi,0x16
1000787c:	89 f1                	mov    ecx,esi
1000787e:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007885:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000788b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007891:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007897:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000789d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100078a1:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100078a8:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
100078af:	33 94 24 6c 10 00 00 	xor    edx,DWORD PTR [esp+0x106c]
100078b6:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100078bd:	31 ca                	xor    edx,ecx
100078bf:	89 d6                	mov    esi,edx
100078c1:	c1 ee 06             	shr    esi,0x6
100078c4:	89 d7                	mov    edi,edx
100078c6:	c1 ef 0e             	shr    edi,0xe
100078c9:	89 d3                	mov    ebx,edx
100078cb:	c1 eb 16             	shr    ebx,0x16
100078ce:	89 d9                	mov    ecx,ebx
100078d0:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
100078d7:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100078dd:	81 e6 fc 03 00 00    	and    esi,0x3fc
100078e3:	81 e7 fc 03 00 00    	and    edi,0x3fc
100078e9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100078ef:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100078f3:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100078fa:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007901:	33 84 24 70 10 00 00 	xor    eax,DWORD PTR [esp+0x1070]
10007908:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
1000790f:	31 c8                	xor    eax,ecx
10007911:	89 c6                	mov    esi,eax
10007913:	c1 ee 06             	shr    esi,0x6
10007916:	89 c7                	mov    edi,eax
10007918:	c1 ef 0e             	shr    edi,0xe
1000791b:	89 c3                	mov    ebx,eax
1000791d:	c1 eb 16             	shr    ebx,0x16
10007920:	89 d9                	mov    ecx,ebx
10007922:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007929:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000792f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007935:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000793b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007941:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007945:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
1000794c:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007953:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
1000795a:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007961:	31 ca                	xor    edx,ecx
10007963:	89 d6                	mov    esi,edx
10007965:	c1 ee 06             	shr    esi,0x6
10007968:	89 d7                	mov    edi,edx
1000796a:	c1 ef 0e             	shr    edi,0xe
1000796d:	89 d3                	mov    ebx,edx
1000796f:	c1 eb 16             	shr    ebx,0x16
10007972:	89 d9                	mov    ecx,ebx
10007974:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
1000797b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007981:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007987:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000798d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007993:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007997:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
1000799e:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100079a5:	33 84 24 78 10 00 00 	xor    eax,DWORD PTR [esp+0x1078]
100079ac:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
100079b3:	31 c8                	xor    eax,ecx
100079b5:	89 c6                	mov    esi,eax
100079b7:	c1 ee 06             	shr    esi,0x6
100079ba:	89 c7                	mov    edi,eax
100079bc:	c1 ef 0e             	shr    edi,0xe
100079bf:	89 c3                	mov    ebx,eax
100079c1:	c1 eb 16             	shr    ebx,0x16
100079c4:	89 d9                	mov    ecx,ebx
100079c6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
100079cd:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100079d3:	81 e6 fc 03 00 00    	and    esi,0x3fc
100079d9:	81 e7 fc 03 00 00    	and    edi,0x3fc
100079df:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100079e5:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100079e9:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100079f0:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100079f7:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
100079fe:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007a05:	31 ca                	xor    edx,ecx
10007a07:	89 d6                	mov    esi,edx
10007a09:	c1 ee 06             	shr    esi,0x6
10007a0c:	89 d7                	mov    edi,edx
10007a0e:	c1 ef 0e             	shr    edi,0xe
10007a11:	89 d3                	mov    ebx,edx
10007a13:	c1 eb 16             	shr    ebx,0x16
10007a16:	89 d9                	mov    ecx,ebx
10007a18:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10007a1f:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007a25:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007a2b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007a31:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007a37:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007a3b:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007a42:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007a49:	33 84 24 80 10 00 00 	xor    eax,DWORD PTR [esp+0x1080]
10007a50:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007a57:	31 c8                	xor    eax,ecx
10007a59:	89 c6                	mov    esi,eax
10007a5b:	c1 ee 06             	shr    esi,0x6
10007a5e:	89 c7                	mov    edi,eax
10007a60:	c1 ef 0e             	shr    edi,0xe
10007a63:	89 c3                	mov    ebx,eax
10007a65:	c1 eb 16             	shr    ebx,0x16
10007a68:	89 d9                	mov    ecx,ebx
10007a6a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007a71:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007a77:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007a7d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007a83:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007a89:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007a8d:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007a94:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007a9b:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10007aa2:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007aa9:	31 ca                	xor    edx,ecx
10007aab:	89 d6                	mov    esi,edx
10007aad:	c1 ee 06             	shr    esi,0x6
10007ab0:	89 d7                	mov    edi,edx
10007ab2:	c1 ef 0e             	shr    edi,0xe
10007ab5:	89 d3                	mov    ebx,edx
10007ab7:	c1 eb 16             	shr    ebx,0x16
10007aba:	89 d9                	mov    ecx,ebx
10007abc:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10007ac3:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007ac9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007acf:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007ad5:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007adb:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007adf:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007ae6:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007aed:	33 84 24 88 10 00 00 	xor    eax,DWORD PTR [esp+0x1088]
10007af4:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007afb:	31 c8                	xor    eax,ecx
10007afd:	89 c6                	mov    esi,eax
10007aff:	c1 ee 06             	shr    esi,0x6
10007b02:	89 c7                	mov    edi,eax
10007b04:	c1 ef 0e             	shr    edi,0xe
10007b07:	89 c3                	mov    ebx,eax
10007b09:	c1 eb 16             	shr    ebx,0x16
10007b0c:	89 d9                	mov    ecx,ebx
10007b0e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007b15:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007b1b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007b21:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007b27:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007b2d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007b31:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007b38:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007b3f:	33 94 24 8c 10 00 00 	xor    edx,DWORD PTR [esp+0x108c]
10007b46:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007b4d:	31 ca                	xor    edx,ecx
10007b4f:	89 d3                	mov    ebx,edx
10007b51:	c1 eb 06             	shr    ebx,0x6
10007b54:	89 d7                	mov    edi,edx
10007b56:	c1 ef 0e             	shr    edi,0xe
10007b59:	89 d6                	mov    esi,edx
10007b5b:	c1 ee 16             	shr    esi,0x16
10007b5e:	89 f1                	mov    ecx,esi
10007b60:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007b67:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007b6d:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007b73:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007b79:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007b7f:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007b83:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007b8a:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10007b91:	33 84 24 90 10 00 00 	xor    eax,DWORD PTR [esp+0x1090]
10007b98:	89 cb                	mov    ebx,ecx
10007b9a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007ba1:	31 d8                	xor    eax,ebx
10007ba3:	89 c6                	mov    esi,eax
10007ba5:	c1 ee 06             	shr    esi,0x6
10007ba8:	89 c7                	mov    edi,eax
10007baa:	c1 ef 0e             	shr    edi,0xe
10007bad:	89 c3                	mov    ebx,eax
10007baf:	c1 eb 16             	shr    ebx,0x16
10007bb2:	89 d9                	mov    ecx,ebx
10007bb4:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007bbb:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007bc1:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007bc7:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007bcd:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007bd3:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007bd7:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007bde:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007be5:	33 94 24 94 10 00 00 	xor    edx,DWORD PTR [esp+0x1094]
10007bec:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007bf3:	31 ca                	xor    edx,ecx
10007bf5:	89 d3                	mov    ebx,edx
10007bf7:	c1 eb 06             	shr    ebx,0x6
10007bfa:	89 d7                	mov    edi,edx
10007bfc:	c1 ef 0e             	shr    edi,0xe
10007bff:	89 d6                	mov    esi,edx
10007c01:	c1 ee 16             	shr    esi,0x16
10007c04:	89 f1                	mov    ecx,esi
10007c06:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007c0d:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007c13:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007c19:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007c1f:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007c25:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007c29:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007c30:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10007c37:	33 84 24 98 10 00 00 	xor    eax,DWORD PTR [esp+0x1098]
10007c3e:	89 cb                	mov    ebx,ecx
10007c40:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007c47:	31 c3                	xor    ebx,eax
10007c49:	89 d0                	mov    eax,edx
10007c4b:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10007c52:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10007c55:	89 84 8c 58 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x1058],eax
10007c5c:	89 9c 8c 5c 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x105c],ebx
10007c63:	83 c1 02             	add    ecx,0x2
10007c66:	89 0c 24             	mov    DWORD PTR [esp],ecx
10007c69:	83 f9 12             	cmp    ecx,0x12
10007c6c:	0f 85 94 fa ff ff    	jne    10007706 <_crypt_blowfish_rn+0x125>
10007c72:	8d 4c 24 58          	lea    ecx,[esp+0x58]
10007c76:	83 c1 10             	add    ecx,0x10
10007c79:	8b 94 24 f0 10 00 00 	mov    edx,DWORD PTR [esp+0x10f0]
10007c80:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
10007c87:	31 c2                	xor    edx,eax
10007c89:	89 d7                	mov    edi,edx
10007c8b:	c1 ef 06             	shr    edi,0x6
10007c8e:	89 d5                	mov    ebp,edx
10007c90:	c1 ed 0e             	shr    ebp,0xe
10007c93:	89 d0                	mov    eax,edx
10007c95:	c1 e8 16             	shr    eax,0x16
10007c98:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007c9f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007ca5:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007cab:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007cb1:	25 fc 03 00 00       	and    eax,0x3fc
10007cb6:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007cba:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007cc1:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007cc8:	89 c7                	mov    edi,eax
10007cca:	8b 84 24 f4 10 00 00 	mov    eax,DWORD PTR [esp+0x10f4]
10007cd1:	33 84 24 5c 10 00 00 	xor    eax,DWORD PTR [esp+0x105c]
10007cd8:	03 bc 34 58 0c 00 00 	add    edi,DWORD PTR [esp+esi*1+0xc58]
10007cdf:	31 f8                	xor    eax,edi
10007ce1:	31 d8                	xor    eax,ebx
10007ce3:	89 c7                	mov    edi,eax
10007ce5:	c1 ef 06             	shr    edi,0x6
10007ce8:	89 c5                	mov    ebp,eax
10007cea:	c1 ed 0e             	shr    ebp,0xe
10007ced:	89 c3                	mov    ebx,eax
10007cef:	c1 eb 16             	shr    ebx,0x16
10007cf2:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007cf9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007cff:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007d05:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007d0b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007d11:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007d15:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007d1c:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007d23:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
10007d2a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007d31:	31 da                	xor    edx,ebx
10007d33:	89 d7                	mov    edi,edx
10007d35:	c1 ef 06             	shr    edi,0x6
10007d38:	89 d5                	mov    ebp,edx
10007d3a:	c1 ed 0e             	shr    ebp,0xe
10007d3d:	89 d3                	mov    ebx,edx
10007d3f:	c1 eb 16             	shr    ebx,0x16
10007d42:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007d49:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007d4f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007d55:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007d5b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007d61:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007d65:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007d6c:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007d73:	33 84 24 64 10 00 00 	xor    eax,DWORD PTR [esp+0x1064]
10007d7a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007d81:	31 d8                	xor    eax,ebx
10007d83:	89 c7                	mov    edi,eax
10007d85:	c1 ef 06             	shr    edi,0x6
10007d88:	89 c5                	mov    ebp,eax
10007d8a:	c1 ed 0e             	shr    ebp,0xe
10007d8d:	89 c3                	mov    ebx,eax
10007d8f:	c1 eb 16             	shr    ebx,0x16
10007d92:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007d99:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007d9f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007da5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007dab:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007db1:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007db5:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007dbc:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007dc3:	33 94 24 68 10 00 00 	xor    edx,DWORD PTR [esp+0x1068]
10007dca:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007dd1:	31 da                	xor    edx,ebx
10007dd3:	89 d7                	mov    edi,edx
10007dd5:	c1 ef 06             	shr    edi,0x6
10007dd8:	89 d5                	mov    ebp,edx
10007dda:	c1 ed 0e             	shr    ebp,0xe
10007ddd:	89 d3                	mov    ebx,edx
10007ddf:	c1 eb 16             	shr    ebx,0x16
10007de2:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007de9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007def:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007df5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007dfb:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007e01:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007e05:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007e0c:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007e13:	33 84 24 6c 10 00 00 	xor    eax,DWORD PTR [esp+0x106c]
10007e1a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007e21:	31 d8                	xor    eax,ebx
10007e23:	89 c7                	mov    edi,eax
10007e25:	c1 ef 06             	shr    edi,0x6
10007e28:	89 c5                	mov    ebp,eax
10007e2a:	c1 ed 0e             	shr    ebp,0xe
10007e2d:	89 c3                	mov    ebx,eax
10007e2f:	c1 eb 16             	shr    ebx,0x16
10007e32:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007e39:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007e3f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007e45:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007e4b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007e51:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007e55:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007e5c:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007e63:	33 94 24 70 10 00 00 	xor    edx,DWORD PTR [esp+0x1070]
10007e6a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007e71:	31 da                	xor    edx,ebx
10007e73:	89 d7                	mov    edi,edx
10007e75:	c1 ef 06             	shr    edi,0x6
10007e78:	89 d5                	mov    ebp,edx
10007e7a:	c1 ed 0e             	shr    ebp,0xe
10007e7d:	89 d3                	mov    ebx,edx
10007e7f:	c1 eb 16             	shr    ebx,0x16
10007e82:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007e89:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007e8f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007e95:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007e9b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007ea1:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007ea5:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007eac:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007eb3:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10007eba:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007ec1:	31 d8                	xor    eax,ebx
10007ec3:	89 c7                	mov    edi,eax
10007ec5:	c1 ef 06             	shr    edi,0x6
10007ec8:	89 c5                	mov    ebp,eax
10007eca:	c1 ed 0e             	shr    ebp,0xe
10007ecd:	89 c3                	mov    ebx,eax
10007ecf:	c1 eb 16             	shr    ebx,0x16
10007ed2:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007ed9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007edf:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007ee5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007eeb:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007ef1:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007ef5:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007efc:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007f03:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10007f0a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007f11:	31 da                	xor    edx,ebx
10007f13:	89 d7                	mov    edi,edx
10007f15:	c1 ef 06             	shr    edi,0x6
10007f18:	89 d5                	mov    ebp,edx
10007f1a:	c1 ed 0e             	shr    ebp,0xe
10007f1d:	89 d3                	mov    ebx,edx
10007f1f:	c1 eb 16             	shr    ebx,0x16
10007f22:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007f29:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007f2f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007f35:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007f3b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007f41:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007f45:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007f4c:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007f53:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10007f5a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007f61:	31 d8                	xor    eax,ebx
10007f63:	89 c7                	mov    edi,eax
10007f65:	c1 ef 06             	shr    edi,0x6
10007f68:	89 c5                	mov    ebp,eax
10007f6a:	c1 ed 0e             	shr    ebp,0xe
10007f6d:	89 c3                	mov    ebx,eax
10007f6f:	c1 eb 16             	shr    ebx,0x16
10007f72:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007f79:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007f7f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007f85:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007f8b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007f91:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007f95:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007f9c:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007fa3:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10007faa:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007fb1:	31 da                	xor    edx,ebx
10007fb3:	89 d7                	mov    edi,edx
10007fb5:	c1 ef 06             	shr    edi,0x6
10007fb8:	89 d5                	mov    ebp,edx
10007fba:	c1 ed 0e             	shr    ebp,0xe
10007fbd:	89 d3                	mov    ebx,edx
10007fbf:	c1 eb 16             	shr    ebx,0x16
10007fc2:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007fc9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007fcf:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007fd5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007fdb:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007fe1:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007fe5:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007fec:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007ff3:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10007ffa:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008001:	31 d8                	xor    eax,ebx
10008003:	89 c7                	mov    edi,eax
10008005:	c1 ef 06             	shr    edi,0x6
10008008:	89 c5                	mov    ebp,eax
1000800a:	c1 ed 0e             	shr    ebp,0xe
1000800d:	89 c3                	mov    ebx,eax
1000800f:	c1 eb 16             	shr    ebx,0x16
10008012:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008019:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000801f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008025:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000802b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008031:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008035:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000803c:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008043:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
1000804a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008051:	31 da                	xor    edx,ebx
10008053:	89 d7                	mov    edi,edx
10008055:	c1 ef 06             	shr    edi,0x6
10008058:	89 d5                	mov    ebp,edx
1000805a:	c1 ed 0e             	shr    ebp,0xe
1000805d:	89 d3                	mov    ebx,edx
1000805f:	c1 eb 16             	shr    ebx,0x16
10008062:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008069:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000806f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008075:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000807b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008081:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008085:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000808c:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008093:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
1000809a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100080a1:	31 d8                	xor    eax,ebx
100080a3:	89 c7                	mov    edi,eax
100080a5:	c1 ef 06             	shr    edi,0x6
100080a8:	89 c5                	mov    ebp,eax
100080aa:	c1 ed 0e             	shr    ebp,0xe
100080ad:	89 c3                	mov    ebx,eax
100080af:	c1 eb 16             	shr    ebx,0x16
100080b2:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100080b9:	81 e6 fc 03 00 00    	and    esi,0x3fc
100080bf:	81 e7 fc 03 00 00    	and    edi,0x3fc
100080c5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100080cb:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100080d1:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100080d5:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100080dc:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100080e3:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
100080ea:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100080f1:	31 da                	xor    edx,ebx
100080f3:	89 d7                	mov    edi,edx
100080f5:	c1 ef 06             	shr    edi,0x6
100080f8:	89 d5                	mov    ebp,edx
100080fa:	c1 ed 0e             	shr    ebp,0xe
100080fd:	89 d3                	mov    ebx,edx
100080ff:	c1 eb 16             	shr    ebx,0x16
10008102:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008109:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000810f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008115:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000811b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008121:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008125:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000812c:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008133:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
1000813a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008141:	31 d8                	xor    eax,ebx
10008143:	89 c6                	mov    esi,eax
10008145:	c1 ee 06             	shr    esi,0x6
10008148:	89 c5                	mov    ebp,eax
1000814a:	c1 ed 0e             	shr    ebp,0xe
1000814d:	89 c3                	mov    ebx,eax
1000814f:	c1 eb 16             	shr    ebx,0x16
10008152:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008159:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000815f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008165:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000816b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008171:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008175:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000817c:	33 9c 34 58 08 00 00 	xor    ebx,DWORD PTR [esp+esi*1+0x858]
10008183:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
1000818a:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10008191:	31 da                	xor    edx,ebx
10008193:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
1000819a:	89 41 f0             	mov    DWORD PTR [ecx-0x10],eax
1000819d:	89 51 f4             	mov    DWORD PTR [ecx-0xc],edx
100081a0:	8b 9c 24 e8 10 00 00 	mov    ebx,DWORD PTR [esp+0x10e8]
100081a7:	33 9c 24 58 10 00 00 	xor    ebx,DWORD PTR [esp+0x1058]
100081ae:	31 d8                	xor    eax,ebx
100081b0:	89 c5                	mov    ebp,eax
100081b2:	c1 ed 06             	shr    ebp,0x6
100081b5:	89 c6                	mov    esi,eax
100081b7:	c1 ee 0e             	shr    esi,0xe
100081ba:	89 c3                	mov    ebx,eax
100081bc:	c1 eb 16             	shr    ebx,0x16
100081bf:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100081c6:	81 e7 fc 03 00 00    	and    edi,0x3fc
100081cc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100081d2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100081d8:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100081de:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100081e2:	03 9c 34 58 04 00 00 	add    ebx,DWORD PTR [esp+esi*1+0x458]
100081e9:	33 9c 2c 58 08 00 00 	xor    ebx,DWORD PTR [esp+ebp*1+0x858]
100081f0:	8b b4 24 ec 10 00 00 	mov    esi,DWORD PTR [esp+0x10ec]
100081f7:	33 b4 24 5c 10 00 00 	xor    esi,DWORD PTR [esp+0x105c]
100081fe:	31 f2                	xor    edx,esi
10008200:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10008207:	89 de                	mov    esi,ebx
10008209:	31 d6                	xor    esi,edx
1000820b:	89 f5                	mov    ebp,esi
1000820d:	c1 ed 06             	shr    ebp,0x6
10008210:	89 f3                	mov    ebx,esi
10008212:	c1 eb 0e             	shr    ebx,0xe
10008215:	89 f2                	mov    edx,esi
10008217:	c1 ea 16             	shr    edx,0x16
1000821a:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008221:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008227:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000822d:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008233:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008239:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000823d:	03 94 1c 58 04 00 00 	add    edx,DWORD PTR [esp+ebx*1+0x458]
10008244:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
1000824b:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10008252:	89 d3                	mov    ebx,edx
10008254:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
1000825b:	31 c3                	xor    ebx,eax
1000825d:	89 df                	mov    edi,ebx
1000825f:	c1 ef 06             	shr    edi,0x6
10008262:	89 dd                	mov    ebp,ebx
10008264:	c1 ed 0e             	shr    ebp,0xe
10008267:	89 da                	mov    edx,ebx
10008269:	c1 ea 16             	shr    edx,0x16
1000826c:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
10008273:	25 fc 03 00 00       	and    eax,0x3fc
10008278:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000827e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008284:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000828a:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000828e:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008295:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000829c:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
100082a3:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
100082aa:	31 d6                	xor    esi,edx
100082ac:	89 f0                	mov    eax,esi
100082ae:	c1 e8 06             	shr    eax,0x6
100082b1:	89 f5                	mov    ebp,esi
100082b3:	c1 ed 0e             	shr    ebp,0xe
100082b6:	89 f2                	mov    edx,esi
100082b8:	c1 ea 16             	shr    edx,0x16
100082bb:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100082c2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100082c8:	25 fc 03 00 00       	and    eax,0x3fc
100082cd:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100082d3:	81 e2 fc 03 00 00    	and    edx,0x3fc
100082d9:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100082dd:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100082e4:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
100082eb:	33 9c 24 68 10 00 00 	xor    ebx,DWORD PTR [esp+0x1068]
100082f2:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
100082f9:	31 d3                	xor    ebx,edx
100082fb:	89 dd                	mov    ebp,ebx
100082fd:	c1 ed 06             	shr    ebp,0x6
10008300:	89 da                	mov    edx,ebx
10008302:	c1 ea 0e             	shr    edx,0xe
10008305:	89 d8                	mov    eax,ebx
10008307:	c1 e8 16             	shr    eax,0x16
1000830a:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
10008311:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008317:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000831d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008323:	25 fc 03 00 00       	and    eax,0x3fc
10008328:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000832c:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10008333:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
1000833a:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
10008341:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008348:	89 c2                	mov    edx,eax
1000834a:	31 f2                	xor    edx,esi
1000834c:	89 d7                	mov    edi,edx
1000834e:	c1 ef 06             	shr    edi,0x6
10008351:	89 d5                	mov    ebp,edx
10008353:	c1 ed 0e             	shr    ebp,0xe
10008356:	89 d0                	mov    eax,edx
10008358:	c1 e8 16             	shr    eax,0x16
1000835b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008362:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008368:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000836e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008374:	25 fc 03 00 00       	and    eax,0x3fc
10008379:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000837d:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008384:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000838b:	33 9c 24 70 10 00 00 	xor    ebx,DWORD PTR [esp+0x1070]
10008392:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008399:	31 c3                	xor    ebx,eax
1000839b:	89 df                	mov    edi,ebx
1000839d:	c1 ef 06             	shr    edi,0x6
100083a0:	89 dd                	mov    ebp,ebx
100083a2:	c1 ed 0e             	shr    ebp,0xe
100083a5:	89 d8                	mov    eax,ebx
100083a7:	c1 e8 16             	shr    eax,0x16
100083aa:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100083b1:	81 e6 fc 03 00 00    	and    esi,0x3fc
100083b7:	81 e7 fc 03 00 00    	and    edi,0x3fc
100083bd:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100083c3:	25 fc 03 00 00       	and    eax,0x3fc
100083c8:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100083cc:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100083d3:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100083da:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
100083e1:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100083e8:	31 c2                	xor    edx,eax
100083ea:	89 d7                	mov    edi,edx
100083ec:	c1 ef 06             	shr    edi,0x6
100083ef:	89 d5                	mov    ebp,edx
100083f1:	c1 ed 0e             	shr    ebp,0xe
100083f4:	89 d0                	mov    eax,edx
100083f6:	c1 e8 16             	shr    eax,0x16
100083f9:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008400:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008406:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000840c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008412:	25 fc 03 00 00       	and    eax,0x3fc
10008417:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000841b:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008422:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008429:	33 9c 24 78 10 00 00 	xor    ebx,DWORD PTR [esp+0x1078]
10008430:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008437:	31 c3                	xor    ebx,eax
10008439:	89 df                	mov    edi,ebx
1000843b:	c1 ef 06             	shr    edi,0x6
1000843e:	89 dd                	mov    ebp,ebx
10008440:	c1 ed 0e             	shr    ebp,0xe
10008443:	89 d8                	mov    eax,ebx
10008445:	c1 e8 16             	shr    eax,0x16
10008448:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
1000844f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008455:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000845b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008461:	25 fc 03 00 00       	and    eax,0x3fc
10008466:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000846a:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008471:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008478:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
1000847f:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008486:	31 c2                	xor    edx,eax
10008488:	89 d7                	mov    edi,edx
1000848a:	c1 ef 06             	shr    edi,0x6
1000848d:	89 d5                	mov    ebp,edx
1000848f:	c1 ed 0e             	shr    ebp,0xe
10008492:	89 d0                	mov    eax,edx
10008494:	c1 e8 16             	shr    eax,0x16
10008497:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000849e:	81 e6 fc 03 00 00    	and    esi,0x3fc
100084a4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100084aa:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100084b0:	25 fc 03 00 00       	and    eax,0x3fc
100084b5:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100084b9:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100084c0:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100084c7:	33 9c 24 80 10 00 00 	xor    ebx,DWORD PTR [esp+0x1080]
100084ce:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100084d5:	31 c3                	xor    ebx,eax
100084d7:	89 df                	mov    edi,ebx
100084d9:	c1 ef 06             	shr    edi,0x6
100084dc:	89 dd                	mov    ebp,ebx
100084de:	c1 ed 0e             	shr    ebp,0xe
100084e1:	89 d8                	mov    eax,ebx
100084e3:	c1 e8 16             	shr    eax,0x16
100084e6:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100084ed:	81 e6 fc 03 00 00    	and    esi,0x3fc
100084f3:	81 e7 fc 03 00 00    	and    edi,0x3fc
100084f9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100084ff:	25 fc 03 00 00       	and    eax,0x3fc
10008504:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008508:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000850f:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008516:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
1000851d:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008524:	31 d0                	xor    eax,edx
10008526:	89 c7                	mov    edi,eax
10008528:	c1 ef 06             	shr    edi,0x6
1000852b:	89 c5                	mov    ebp,eax
1000852d:	c1 ed 0e             	shr    ebp,0xe
10008530:	89 c2                	mov    edx,eax
10008532:	c1 ea 16             	shr    edx,0x16
10008535:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000853c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008542:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008548:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000854e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008554:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008558:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000855f:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008566:	33 9c 24 88 10 00 00 	xor    ebx,DWORD PTR [esp+0x1088]
1000856d:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008574:	31 d3                	xor    ebx,edx
10008576:	89 df                	mov    edi,ebx
10008578:	c1 ef 06             	shr    edi,0x6
1000857b:	89 dd                	mov    ebp,ebx
1000857d:	c1 ed 0e             	shr    ebp,0xe
10008580:	89 da                	mov    edx,ebx
10008582:	c1 ea 16             	shr    edx,0x16
10008585:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
1000858c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008592:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008598:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000859e:	81 e2 fc 03 00 00    	and    edx,0x3fc
100085a4:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100085a8:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100085af:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100085b6:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
100085bd:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100085c4:	31 d0                	xor    eax,edx
100085c6:	89 c7                	mov    edi,eax
100085c8:	c1 ef 06             	shr    edi,0x6
100085cb:	89 c5                	mov    ebp,eax
100085cd:	c1 ed 0e             	shr    ebp,0xe
100085d0:	89 c2                	mov    edx,eax
100085d2:	c1 ea 16             	shr    edx,0x16
100085d5:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100085dc:	81 e6 fc 03 00 00    	and    esi,0x3fc
100085e2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100085e8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100085ee:	81 e2 fc 03 00 00    	and    edx,0x3fc
100085f4:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100085f8:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100085ff:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008606:	33 9c 24 90 10 00 00 	xor    ebx,DWORD PTR [esp+0x1090]
1000860d:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008614:	31 d3                	xor    ebx,edx
10008616:	89 df                	mov    edi,ebx
10008618:	c1 ef 06             	shr    edi,0x6
1000861b:	89 dd                	mov    ebp,ebx
1000861d:	c1 ed 0e             	shr    ebp,0xe
10008620:	89 da                	mov    edx,ebx
10008622:	c1 ea 16             	shr    edx,0x16
10008625:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
1000862c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008632:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008638:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000863e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008644:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008648:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000864f:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008656:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
1000865d:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008664:	31 d0                	xor    eax,edx
10008666:	89 c7                	mov    edi,eax
10008668:	c1 ef 06             	shr    edi,0x6
1000866b:	89 c5                	mov    ebp,eax
1000866d:	c1 ed 0e             	shr    ebp,0xe
10008670:	89 c2                	mov    edx,eax
10008672:	c1 ea 16             	shr    edx,0x16
10008675:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000867c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008682:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008688:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000868e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008694:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008698:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000869f:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100086a6:	33 9c 24 98 10 00 00 	xor    ebx,DWORD PTR [esp+0x1098]
100086ad:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100086b4:	31 d3                	xor    ebx,edx
100086b6:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
100086bd:	89 41 f8             	mov    DWORD PTR [ecx-0x8],eax
100086c0:	89 59 fc             	mov    DWORD PTR [ecx-0x4],ebx
100086c3:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
100086ca:	39 d1                	cmp    ecx,edx
100086cc:	0f 85 a4 f5 ff ff    	jne    10007c76 <_crypt_blowfish_rn+0x695>
100086d2:	8b 84 24 a0 10 00 00 	mov    eax,DWORD PTR [esp+0x10a0]
100086d9:	31 84 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],eax
100086e0:	8b 84 24 a4 10 00 00 	mov    eax,DWORD PTR [esp+0x10a4]
100086e7:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
100086ee:	8b 84 24 a8 10 00 00 	mov    eax,DWORD PTR [esp+0x10a8]
100086f5:	31 84 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],eax
100086fc:	8b 84 24 ac 10 00 00 	mov    eax,DWORD PTR [esp+0x10ac]
10008703:	31 84 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],eax
1000870a:	8b 84 24 b0 10 00 00 	mov    eax,DWORD PTR [esp+0x10b0]
10008711:	31 84 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],eax
10008718:	8b 84 24 b4 10 00 00 	mov    eax,DWORD PTR [esp+0x10b4]
1000871f:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
10008726:	8b 84 24 b8 10 00 00 	mov    eax,DWORD PTR [esp+0x10b8]
1000872d:	31 84 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],eax
10008734:	8b 84 24 bc 10 00 00 	mov    eax,DWORD PTR [esp+0x10bc]
1000873b:	31 84 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],eax
10008742:	8b 84 24 c0 10 00 00 	mov    eax,DWORD PTR [esp+0x10c0]
10008749:	31 84 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],eax
10008750:	8b 84 24 c4 10 00 00 	mov    eax,DWORD PTR [esp+0x10c4]
10008757:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
1000875e:	8b 84 24 c8 10 00 00 	mov    eax,DWORD PTR [esp+0x10c8]
10008765:	31 84 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],eax
1000876c:	8b 84 24 cc 10 00 00 	mov    eax,DWORD PTR [esp+0x10cc]
10008773:	31 84 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],eax
1000877a:	8b 84 24 d0 10 00 00 	mov    eax,DWORD PTR [esp+0x10d0]
10008781:	31 84 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],eax
10008788:	8b 84 24 d4 10 00 00 	mov    eax,DWORD PTR [esp+0x10d4]
1000878f:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
10008796:	8b 84 24 d8 10 00 00 	mov    eax,DWORD PTR [esp+0x10d8]
1000879d:	31 84 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],eax
100087a4:	8b 84 24 dc 10 00 00 	mov    eax,DWORD PTR [esp+0x10dc]
100087ab:	31 84 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],eax
100087b2:	8b 84 24 e0 10 00 00 	mov    eax,DWORD PTR [esp+0x10e0]
100087b9:	31 84 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],eax
100087c0:	8b 84 24 e4 10 00 00 	mov    eax,DWORD PTR [esp+0x10e4]
100087c7:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
100087ce:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
100087d5:	b9 00 00 00 00       	mov    ecx,0x0
100087da:	b8 00 00 00 00       	mov    eax,0x0
100087df:	83 c3 08             	add    ebx,0x8
100087e2:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
100087e9:	89 c7                	mov    edi,eax
100087eb:	c1 ef 06             	shr    edi,0x6
100087ee:	89 c5                	mov    ebp,eax
100087f0:	c1 ed 0e             	shr    ebp,0xe
100087f3:	89 c2                	mov    edx,eax
100087f5:	c1 ea 16             	shr    edx,0x16
100087f8:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100087ff:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008805:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000880b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008811:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008817:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000881b:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008822:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008829:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008830:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10008837:	31 ca                	xor    edx,ecx
10008839:	89 d5                	mov    ebp,edx
1000883b:	c1 ed 06             	shr    ebp,0x6
1000883e:	89 d6                	mov    esi,edx
10008840:	c1 ee 0e             	shr    esi,0xe
10008843:	89 d1                	mov    ecx,edx
10008845:	c1 e9 16             	shr    ecx,0x16
10008848:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
1000884f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008855:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000885b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008861:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008867:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000886b:	03 8c 34 58 04 00 00 	add    ecx,DWORD PTR [esp+esi*1+0x458]
10008872:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10008879:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10008880:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
10008887:	31 c8                	xor    eax,ecx
10008889:	89 c7                	mov    edi,eax
1000888b:	c1 ef 06             	shr    edi,0x6
1000888e:	89 c5                	mov    ebp,eax
10008890:	c1 ed 0e             	shr    ebp,0xe
10008893:	89 c1                	mov    ecx,eax
10008895:	c1 e9 16             	shr    ecx,0x16
10008898:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000889f:	81 e6 fc 03 00 00    	and    esi,0x3fc
100088a5:	81 e7 fc 03 00 00    	and    edi,0x3fc
100088ab:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100088b1:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100088b7:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100088bb:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100088c2:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100088c9:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
100088d0:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100088d7:	31 d1                	xor    ecx,edx
100088d9:	89 cd                	mov    ebp,ecx
100088db:	c1 ed 06             	shr    ebp,0x6
100088de:	89 ce                	mov    esi,ecx
100088e0:	c1 ee 0e             	shr    esi,0xe
100088e3:	89 ca                	mov    edx,ecx
100088e5:	c1 ea 16             	shr    edx,0x16
100088e8:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100088ef:	81 e7 fc 03 00 00    	and    edi,0x3fc
100088f5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100088fb:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008901:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008907:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000890b:	03 94 34 58 04 00 00 	add    edx,DWORD PTR [esp+esi*1+0x458]
10008912:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
10008919:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
10008920:	89 d6                	mov    esi,edx
10008922:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10008929:	31 c6                	xor    esi,eax
1000892b:	89 f2                	mov    edx,esi
1000892d:	c1 ea 06             	shr    edx,0x6
10008930:	89 f5                	mov    ebp,esi
10008932:	c1 ed 0e             	shr    ebp,0xe
10008935:	89 f0                	mov    eax,esi
10008937:	c1 e8 16             	shr    eax,0x16
1000893a:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008941:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008947:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000894d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008953:	25 fc 03 00 00       	and    eax,0x3fc
10008958:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000895c:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008963:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000896a:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
10008971:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008978:	31 c8                	xor    eax,ecx
1000897a:	89 c7                	mov    edi,eax
1000897c:	c1 ef 06             	shr    edi,0x6
1000897f:	89 c5                	mov    ebp,eax
10008981:	c1 ed 0e             	shr    ebp,0xe
10008984:	89 c2                	mov    edx,eax
10008986:	c1 ea 16             	shr    edx,0x16
10008989:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10008990:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008996:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000899c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100089a2:	81 e2 fc 03 00 00    	and    edx,0x3fc
100089a8:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100089ac:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100089b3:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100089ba:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
100089c1:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100089c8:	31 f2                	xor    edx,esi
100089ca:	89 d7                	mov    edi,edx
100089cc:	c1 ef 06             	shr    edi,0x6
100089cf:	89 d5                	mov    ebp,edx
100089d1:	c1 ed 0e             	shr    ebp,0xe
100089d4:	89 d1                	mov    ecx,edx
100089d6:	c1 e9 16             	shr    ecx,0x16
100089d9:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100089e0:	81 e6 fc 03 00 00    	and    esi,0x3fc
100089e6:	81 e7 fc 03 00 00    	and    edi,0x3fc
100089ec:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100089f2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100089f8:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100089fc:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008a03:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008a0a:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10008a11:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008a18:	31 c8                	xor    eax,ecx
10008a1a:	89 c7                	mov    edi,eax
10008a1c:	c1 ef 06             	shr    edi,0x6
10008a1f:	89 c5                	mov    ebp,eax
10008a21:	c1 ed 0e             	shr    ebp,0xe
10008a24:	89 c1                	mov    ecx,eax
10008a26:	c1 e9 16             	shr    ecx,0x16
10008a29:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008a30:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008a36:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a3c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a42:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008a48:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008a4c:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008a53:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008a5a:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10008a61:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008a68:	31 ca                	xor    edx,ecx
10008a6a:	89 d7                	mov    edi,edx
10008a6c:	c1 ef 06             	shr    edi,0x6
10008a6f:	89 d5                	mov    ebp,edx
10008a71:	c1 ed 0e             	shr    ebp,0xe
10008a74:	89 d1                	mov    ecx,edx
10008a76:	c1 e9 16             	shr    ecx,0x16
10008a79:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008a80:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008a86:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a8c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a92:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008a98:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008a9c:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008aa3:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008aaa:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10008ab1:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008ab8:	31 c8                	xor    eax,ecx
10008aba:	89 c7                	mov    edi,eax
10008abc:	c1 ef 06             	shr    edi,0x6
10008abf:	89 c5                	mov    ebp,eax
10008ac1:	c1 ed 0e             	shr    ebp,0xe
10008ac4:	89 c1                	mov    ecx,eax
10008ac6:	c1 e9 16             	shr    ecx,0x16
10008ac9:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008ad0:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008ad6:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008adc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ae2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008ae8:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008aec:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008af3:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008afa:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10008b01:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008b08:	31 ca                	xor    edx,ecx
10008b0a:	89 d7                	mov    edi,edx
10008b0c:	c1 ef 06             	shr    edi,0x6
10008b0f:	89 d5                	mov    ebp,edx
10008b11:	c1 ed 0e             	shr    ebp,0xe
10008b14:	89 d1                	mov    ecx,edx
10008b16:	c1 e9 16             	shr    ecx,0x16
10008b19:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008b20:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008b26:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b2c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b32:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008b38:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008b3c:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008b43:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008b4a:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10008b51:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008b58:	31 c8                	xor    eax,ecx
10008b5a:	89 c7                	mov    edi,eax
10008b5c:	c1 ef 06             	shr    edi,0x6
10008b5f:	89 c5                	mov    ebp,eax
10008b61:	c1 ed 0e             	shr    ebp,0xe
10008b64:	89 c1                	mov    ecx,eax
10008b66:	c1 e9 16             	shr    ecx,0x16
10008b69:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008b70:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008b76:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b7c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b82:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008b88:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008b8c:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008b93:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008b9a:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10008ba1:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008ba8:	31 ca                	xor    edx,ecx
10008baa:	89 d7                	mov    edi,edx
10008bac:	c1 ef 06             	shr    edi,0x6
10008baf:	89 d5                	mov    ebp,edx
10008bb1:	c1 ed 0e             	shr    ebp,0xe
10008bb4:	89 d1                	mov    ecx,edx
10008bb6:	c1 e9 16             	shr    ecx,0x16
10008bb9:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008bc0:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008bc6:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008bcc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008bd2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008bd8:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008bdc:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008be3:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008bea:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10008bf1:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008bf8:	31 c8                	xor    eax,ecx
10008bfa:	89 c7                	mov    edi,eax
10008bfc:	c1 ef 06             	shr    edi,0x6
10008bff:	89 c5                	mov    ebp,eax
10008c01:	c1 ed 0e             	shr    ebp,0xe
10008c04:	89 c1                	mov    ecx,eax
10008c06:	c1 e9 16             	shr    ecx,0x16
10008c09:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008c10:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008c16:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c1c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c22:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008c28:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008c2c:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008c33:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008c3a:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10008c41:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008c48:	31 ca                	xor    edx,ecx
10008c4a:	89 d7                	mov    edi,edx
10008c4c:	c1 ef 06             	shr    edi,0x6
10008c4f:	89 d5                	mov    ebp,edx
10008c51:	c1 ed 0e             	shr    ebp,0xe
10008c54:	89 d6                	mov    esi,edx
10008c56:	c1 ee 16             	shr    esi,0x16
10008c59:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10008c60:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008c66:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c6c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c72:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008c78:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008c7c:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10008c83:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10008c8a:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10008c91:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10008c98:	31 f0                	xor    eax,esi
10008c9a:	89 c5                	mov    ebp,eax
10008c9c:	c1 ed 06             	shr    ebp,0x6
10008c9f:	89 c1                	mov    ecx,eax
10008ca1:	c1 e9 0e             	shr    ecx,0xe
10008ca4:	89 c6                	mov    esi,eax
10008ca6:	c1 ee 16             	shr    esi,0x16
10008ca9:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008cb0:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008cb6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008cbc:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008cc2:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008cc8:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008ccc:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
10008cd3:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10008cda:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10008ce1:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10008ce8:	89 f1                	mov    ecx,esi
10008cea:	31 d1                	xor    ecx,edx
10008cec:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10008cf3:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10008cf6:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
10008cf9:	8d b4 24 a0 10 00 00 	lea    esi,[esp+0x10a0]
10008d00:	39 f3                	cmp    ebx,esi
10008d02:	0f 85 d7 fa ff ff    	jne    100087df <_crypt_blowfish_rn+0x11fe>
10008d08:	8d 5c 24 58          	lea    ebx,[esp+0x58]
10008d0c:	83 c3 08             	add    ebx,0x8
10008d0f:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10008d16:	89 c7                	mov    edi,eax
10008d18:	c1 ef 06             	shr    edi,0x6
10008d1b:	89 c5                	mov    ebp,eax
10008d1d:	c1 ed 0e             	shr    ebp,0xe
10008d20:	89 c2                	mov    edx,eax
10008d22:	c1 ea 16             	shr    edx,0x16
10008d25:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008d2c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008d32:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d38:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d3e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008d44:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008d48:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008d4f:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008d56:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008d5d:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10008d64:	31 ca                	xor    edx,ecx
10008d66:	89 d7                	mov    edi,edx
10008d68:	c1 ef 06             	shr    edi,0x6
10008d6b:	89 d5                	mov    ebp,edx
10008d6d:	c1 ed 0e             	shr    ebp,0xe
10008d70:	89 d1                	mov    ecx,edx
10008d72:	c1 e9 16             	shr    ecx,0x16
10008d75:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008d7c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008d82:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d88:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d8e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008d94:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008d98:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008d9f:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008da6:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10008dad:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008db4:	31 c1                	xor    ecx,eax
10008db6:	89 cd                	mov    ebp,ecx
10008db8:	c1 ed 06             	shr    ebp,0x6
10008dbb:	89 c8                	mov    eax,ecx
10008dbd:	c1 e8 0e             	shr    eax,0xe
10008dc0:	89 ce                	mov    esi,ecx
10008dc2:	c1 ee 16             	shr    esi,0x16
10008dc5:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10008dcc:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008dd2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008dd8:	25 fc 03 00 00       	and    eax,0x3fc
10008ddd:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008de3:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008de7:	03 b4 04 58 04 00 00 	add    esi,DWORD PTR [esp+eax*1+0x458]
10008dee:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10008df5:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10008dfc:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10008e03:	31 d6                	xor    esi,edx
10008e05:	89 f5                	mov    ebp,esi
10008e07:	c1 ed 06             	shr    ebp,0x6
10008e0a:	89 f2                	mov    edx,esi
10008e0c:	c1 ea 0e             	shr    edx,0xe
10008e0f:	89 f0                	mov    eax,esi
10008e11:	c1 e8 16             	shr    eax,0x16
10008e14:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008e1b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e21:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e27:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008e2d:	25 fc 03 00 00       	and    eax,0x3fc
10008e32:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008e36:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10008e3d:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10008e44:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
10008e4b:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008e52:	31 c1                	xor    ecx,eax
10008e54:	89 ca                	mov    edx,ecx
10008e56:	c1 ea 06             	shr    edx,0x6
10008e59:	89 cd                	mov    ebp,ecx
10008e5b:	c1 ed 0e             	shr    ebp,0xe
10008e5e:	89 c8                	mov    eax,ecx
10008e60:	c1 e8 16             	shr    eax,0x16
10008e63:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10008e6a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e70:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008e76:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e7c:	25 fc 03 00 00       	and    eax,0x3fc
10008e81:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008e85:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008e8c:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10008e93:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
10008e9a:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008ea1:	31 f0                	xor    eax,esi
10008ea3:	89 c7                	mov    edi,eax
10008ea5:	c1 ef 06             	shr    edi,0x6
10008ea8:	89 c5                	mov    ebp,eax
10008eaa:	c1 ed 0e             	shr    ebp,0xe
10008ead:	89 c2                	mov    edx,eax
10008eaf:	c1 ea 16             	shr    edx,0x16
10008eb2:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008eb9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008ebf:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008ec5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ecb:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008ed1:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008ed5:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008edc:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008ee3:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
10008eea:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008ef1:	31 ca                	xor    edx,ecx
10008ef3:	89 d7                	mov    edi,edx
10008ef5:	c1 ef 06             	shr    edi,0x6
10008ef8:	89 d5                	mov    ebp,edx
10008efa:	c1 ed 0e             	shr    ebp,0xe
10008efd:	89 d1                	mov    ecx,edx
10008eff:	c1 e9 16             	shr    ecx,0x16
10008f02:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008f09:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008f0f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f15:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f1b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008f21:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008f25:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008f2c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008f33:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10008f3a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008f41:	31 c8                	xor    eax,ecx
10008f43:	89 c7                	mov    edi,eax
10008f45:	c1 ef 06             	shr    edi,0x6
10008f48:	89 c5                	mov    ebp,eax
10008f4a:	c1 ed 0e             	shr    ebp,0xe
10008f4d:	89 c1                	mov    ecx,eax
10008f4f:	c1 e9 16             	shr    ecx,0x16
10008f52:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008f59:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008f5f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f65:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f6b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008f71:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008f75:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008f7c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008f83:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10008f8a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008f91:	31 ca                	xor    edx,ecx
10008f93:	89 d7                	mov    edi,edx
10008f95:	c1 ef 06             	shr    edi,0x6
10008f98:	89 d5                	mov    ebp,edx
10008f9a:	c1 ed 0e             	shr    ebp,0xe
10008f9d:	89 d1                	mov    ecx,edx
10008f9f:	c1 e9 16             	shr    ecx,0x16
10008fa2:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008fa9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008faf:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008fb5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008fbb:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008fc1:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008fc5:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008fcc:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008fd3:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10008fda:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008fe1:	31 c8                	xor    eax,ecx
10008fe3:	89 c7                	mov    edi,eax
10008fe5:	c1 ef 06             	shr    edi,0x6
10008fe8:	89 c5                	mov    ebp,eax
10008fea:	c1 ed 0e             	shr    ebp,0xe
10008fed:	89 c1                	mov    ecx,eax
10008fef:	c1 e9 16             	shr    ecx,0x16
10008ff2:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008ff9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008fff:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009005:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000900b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009011:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009015:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000901c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009023:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
1000902a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009031:	31 ca                	xor    edx,ecx
10009033:	89 d7                	mov    edi,edx
10009035:	c1 ef 06             	shr    edi,0x6
10009038:	89 d5                	mov    ebp,edx
1000903a:	c1 ed 0e             	shr    ebp,0xe
1000903d:	89 d1                	mov    ecx,edx
1000903f:	c1 e9 16             	shr    ecx,0x16
10009042:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009049:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000904f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009055:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000905b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009061:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009065:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000906c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009073:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
1000907a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009081:	31 c8                	xor    eax,ecx
10009083:	89 c7                	mov    edi,eax
10009085:	c1 ef 06             	shr    edi,0x6
10009088:	89 c5                	mov    ebp,eax
1000908a:	c1 ed 0e             	shr    ebp,0xe
1000908d:	89 c1                	mov    ecx,eax
1000908f:	c1 e9 16             	shr    ecx,0x16
10009092:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009099:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000909f:	81 e7 fc 03 00 00    	and    edi,0x3fc
100090a5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100090ab:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100090b1:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100090b5:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100090bc:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100090c3:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
100090ca:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100090d1:	31 ca                	xor    edx,ecx
100090d3:	89 d7                	mov    edi,edx
100090d5:	c1 ef 06             	shr    edi,0x6
100090d8:	89 d5                	mov    ebp,edx
100090da:	c1 ed 0e             	shr    ebp,0xe
100090dd:	89 d1                	mov    ecx,edx
100090df:	c1 e9 16             	shr    ecx,0x16
100090e2:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100090e9:	81 e6 fc 03 00 00    	and    esi,0x3fc
100090ef:	81 e7 fc 03 00 00    	and    edi,0x3fc
100090f5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100090fb:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009101:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009105:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000910c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009113:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
1000911a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009121:	31 c8                	xor    eax,ecx
10009123:	89 c7                	mov    edi,eax
10009125:	c1 ef 06             	shr    edi,0x6
10009128:	89 c5                	mov    ebp,eax
1000912a:	c1 ed 0e             	shr    ebp,0xe
1000912d:	89 c1                	mov    ecx,eax
1000912f:	c1 e9 16             	shr    ecx,0x16
10009132:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009139:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000913f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009145:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000914b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009151:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009155:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000915c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009163:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
1000916a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009171:	31 ca                	xor    edx,ecx
10009173:	89 d7                	mov    edi,edx
10009175:	c1 ef 06             	shr    edi,0x6
10009178:	89 d5                	mov    ebp,edx
1000917a:	c1 ed 0e             	shr    ebp,0xe
1000917d:	89 d6                	mov    esi,edx
1000917f:	c1 ee 16             	shr    esi,0x16
10009182:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10009189:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000918f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009195:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000919b:	81 e6 fc 03 00 00    	and    esi,0x3fc
100091a1:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
100091a5:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
100091ac:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
100091b3:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
100091ba:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
100091c1:	31 f0                	xor    eax,esi
100091c3:	89 c5                	mov    ebp,eax
100091c5:	c1 ed 06             	shr    ebp,0x6
100091c8:	89 c1                	mov    ecx,eax
100091ca:	c1 e9 0e             	shr    ecx,0xe
100091cd:	89 c6                	mov    esi,eax
100091cf:	c1 ee 16             	shr    esi,0x16
100091d2:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100091d9:	81 e7 fc 03 00 00    	and    edi,0x3fc
100091df:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100091e5:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100091eb:	81 e6 fc 03 00 00    	and    esi,0x3fc
100091f1:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
100091f5:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
100091fc:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10009203:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
1000920a:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10009211:	89 f1                	mov    ecx,esi
10009213:	31 d1                	xor    ecx,edx
10009215:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
1000921c:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
1000921f:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
10009222:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10009229:	39 d3                	cmp    ebx,edx
1000922b:	0f 85 db fa ff ff    	jne    10008d0c <_crypt_blowfish_rn+0x172b>
10009231:	8b 94 24 e8 10 00 00 	mov    edx,DWORD PTR [esp+0x10e8]
10009238:	8b 84 24 ec 10 00 00 	mov    eax,DWORD PTR [esp+0x10ec]
1000923f:	8b 9c 24 f0 10 00 00 	mov    ebx,DWORD PTR [esp+0x10f0]
10009246:	8b 8c 24 f4 10 00 00 	mov    ecx,DWORD PTR [esp+0x10f4]
1000924d:	31 94 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],edx
10009254:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
1000925b:	31 9c 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],ebx
10009262:	31 8c 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],ecx
10009269:	31 94 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],edx
10009270:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
10009277:	31 9c 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],ebx
1000927e:	31 8c 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],ecx
10009285:	31 94 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],edx
1000928c:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
10009293:	31 9c 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],ebx
1000929a:	31 8c 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],ecx
100092a1:	31 94 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],edx
100092a8:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
100092af:	31 9c 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],ebx
100092b6:	31 8c 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],ecx
100092bd:	31 94 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],edx
100092c4:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
100092cb:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
100092d2:	be 00 00 00 00       	mov    esi,0x0
100092d7:	b8 00 00 00 00       	mov    eax,0x0
100092dc:	83 c3 08             	add    ebx,0x8
100092df:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
100092e6:	89 c7                	mov    edi,eax
100092e8:	c1 ef 06             	shr    edi,0x6
100092eb:	89 c5                	mov    ebp,eax
100092ed:	c1 ed 0e             	shr    ebp,0xe
100092f0:	89 c2                	mov    edx,eax
100092f2:	c1 ea 16             	shr    edx,0x16
100092f5:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
100092fc:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009302:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009308:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000930e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009314:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009318:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000931f:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009326:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000932d:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10009334:	31 d6                	xor    esi,edx
10009336:	89 f7                	mov    edi,esi
10009338:	c1 ef 06             	shr    edi,0x6
1000933b:	89 f5                	mov    ebp,esi
1000933d:	c1 ed 0e             	shr    ebp,0xe
10009340:	89 f1                	mov    ecx,esi
10009342:	c1 e9 16             	shr    ecx,0x16
10009345:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
1000934c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009352:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009358:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000935e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009364:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009368:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000936f:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009376:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
1000937d:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009384:	31 c8                	xor    eax,ecx
10009386:	89 c5                	mov    ebp,eax
10009388:	c1 ed 06             	shr    ebp,0x6
1000938b:	89 c2                	mov    edx,eax
1000938d:	c1 ea 0e             	shr    edx,0xe
10009390:	89 c1                	mov    ecx,eax
10009392:	c1 e9 16             	shr    ecx,0x16
10009395:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000939c:	81 e7 fc 03 00 00    	and    edi,0x3fc
100093a2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100093a8:	81 e2 fc 03 00 00    	and    edx,0x3fc
100093ae:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100093b4:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100093b8:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
100093bf:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
100093c6:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
100093cd:	89 ca                	mov    edx,ecx
100093cf:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
100093d6:	31 d6                	xor    esi,edx
100093d8:	89 f7                	mov    edi,esi
100093da:	c1 ef 06             	shr    edi,0x6
100093dd:	89 f5                	mov    ebp,esi
100093df:	c1 ed 0e             	shr    ebp,0xe
100093e2:	89 f1                	mov    ecx,esi
100093e4:	c1 e9 16             	shr    ecx,0x16
100093e7:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
100093ee:	81 e2 fc 03 00 00    	and    edx,0x3fc
100093f4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100093fa:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009400:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009406:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000940a:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009411:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009418:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
1000941f:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009426:	31 c1                	xor    ecx,eax
10009428:	89 cd                	mov    ebp,ecx
1000942a:	c1 ed 06             	shr    ebp,0x6
1000942d:	89 ca                	mov    edx,ecx
1000942f:	c1 ea 0e             	shr    edx,0xe
10009432:	89 c8                	mov    eax,ecx
10009434:	c1 e8 16             	shr    eax,0x16
10009437:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000943e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009444:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000944a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009450:	25 fc 03 00 00       	and    eax,0x3fc
10009455:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009459:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10009460:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009467:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
1000946e:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009475:	89 c2                	mov    edx,eax
10009477:	31 f2                	xor    edx,esi
10009479:	89 d5                	mov    ebp,edx
1000947b:	c1 ed 06             	shr    ebp,0x6
1000947e:	89 d6                	mov    esi,edx
10009480:	c1 ee 0e             	shr    esi,0xe
10009483:	89 d0                	mov    eax,edx
10009485:	c1 e8 16             	shr    eax,0x16
10009488:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
1000948f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009495:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000949b:	81 e6 fc 03 00 00    	and    esi,0x3fc
100094a1:	25 fc 03 00 00       	and    eax,0x3fc
100094a6:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100094aa:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
100094b1:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
100094b8:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
100094bf:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100094c6:	89 c6                	mov    esi,eax
100094c8:	31 ce                	xor    esi,ecx
100094ca:	89 f7                	mov    edi,esi
100094cc:	c1 ef 06             	shr    edi,0x6
100094cf:	89 f5                	mov    ebp,esi
100094d1:	c1 ed 0e             	shr    ebp,0xe
100094d4:	89 f0                	mov    eax,esi
100094d6:	c1 e8 16             	shr    eax,0x16
100094d9:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
100094e0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100094e6:	81 e7 fc 03 00 00    	and    edi,0x3fc
100094ec:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100094f2:	25 fc 03 00 00       	and    eax,0x3fc
100094f7:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100094fb:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009502:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10009509:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10009510:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10009517:	31 c2                	xor    edx,eax
10009519:	89 d7                	mov    edi,edx
1000951b:	c1 ef 06             	shr    edi,0x6
1000951e:	89 d5                	mov    ebp,edx
10009520:	c1 ed 0e             	shr    ebp,0xe
10009523:	89 d0                	mov    eax,edx
10009525:	c1 e8 16             	shr    eax,0x16
10009528:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000952f:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009535:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000953b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009541:	25 fc 03 00 00       	and    eax,0x3fc
10009546:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000954a:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009551:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10009558:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
1000955f:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10009566:	31 c6                	xor    esi,eax
10009568:	89 f7                	mov    edi,esi
1000956a:	c1 ef 06             	shr    edi,0x6
1000956d:	89 f5                	mov    ebp,esi
1000956f:	c1 ed 0e             	shr    ebp,0xe
10009572:	89 f0                	mov    eax,esi
10009574:	c1 e8 16             	shr    eax,0x16
10009577:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
1000957e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009584:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000958a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009590:	25 fc 03 00 00       	and    eax,0x3fc
10009595:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009599:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100095a0:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100095a7:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
100095ae:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
100095b5:	31 c2                	xor    edx,eax
100095b7:	89 d7                	mov    edi,edx
100095b9:	c1 ef 06             	shr    edi,0x6
100095bc:	89 d5                	mov    ebp,edx
100095be:	c1 ed 0e             	shr    ebp,0xe
100095c1:	89 d0                	mov    eax,edx
100095c3:	c1 e8 16             	shr    eax,0x16
100095c6:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
100095cd:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100095d3:	81 e7 fc 03 00 00    	and    edi,0x3fc
100095d9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100095df:	25 fc 03 00 00       	and    eax,0x3fc
100095e4:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100095e8:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100095ef:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100095f6:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
100095fd:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10009604:	31 c6                	xor    esi,eax
10009606:	89 f7                	mov    edi,esi
10009608:	c1 ef 06             	shr    edi,0x6
1000960b:	89 f5                	mov    ebp,esi
1000960d:	c1 ed 0e             	shr    ebp,0xe
10009610:	89 f0                	mov    eax,esi
10009612:	c1 e8 16             	shr    eax,0x16
10009615:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
1000961c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009622:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009628:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000962e:	25 fc 03 00 00       	and    eax,0x3fc
10009633:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009637:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000963e:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10009645:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
1000964c:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10009653:	31 d0                	xor    eax,edx
10009655:	89 c7                	mov    edi,eax
10009657:	c1 ef 06             	shr    edi,0x6
1000965a:	89 c5                	mov    ebp,eax
1000965c:	c1 ed 0e             	shr    ebp,0xe
1000965f:	89 c2                	mov    edx,eax
10009661:	c1 ea 16             	shr    edx,0x16
10009664:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000966b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009671:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009677:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000967d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009683:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009687:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000968e:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009695:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
1000969c:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100096a3:	31 d6                	xor    esi,edx
100096a5:	89 f7                	mov    edi,esi
100096a7:	c1 ef 06             	shr    edi,0x6
100096aa:	89 f5                	mov    ebp,esi
100096ac:	c1 ed 0e             	shr    ebp,0xe
100096af:	89 f2                	mov    edx,esi
100096b1:	c1 ea 16             	shr    edx,0x16
100096b4:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
100096bb:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100096c1:	81 e7 fc 03 00 00    	and    edi,0x3fc
100096c7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100096cd:	81 e2 fc 03 00 00    	and    edx,0x3fc
100096d3:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100096d7:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100096de:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100096e5:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
100096ec:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100096f3:	31 d0                	xor    eax,edx
100096f5:	89 c7                	mov    edi,eax
100096f7:	c1 ef 06             	shr    edi,0x6
100096fa:	89 c5                	mov    ebp,eax
100096fc:	c1 ed 0e             	shr    ebp,0xe
100096ff:	89 c2                	mov    edx,eax
10009701:	c1 ea 16             	shr    edx,0x16
10009704:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000970b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009711:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009717:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000971d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009723:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009727:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000972e:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009735:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
1000973c:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009743:	31 d6                	xor    esi,edx
10009745:	89 f2                	mov    edx,esi
10009747:	c1 ea 06             	shr    edx,0x6
1000974a:	89 f5                	mov    ebp,esi
1000974c:	c1 ed 0e             	shr    ebp,0xe
1000974f:	89 f1                	mov    ecx,esi
10009751:	c1 e9 16             	shr    ecx,0x16
10009754:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000975b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009761:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009767:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000976d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009773:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009777:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000977e:	33 8c 14 58 08 00 00 	xor    ecx,DWORD PTR [esp+edx*1+0x858]
10009785:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
1000978c:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
10009793:	31 c8                	xor    eax,ecx
10009795:	89 c5                	mov    ebp,eax
10009797:	c1 ed 06             	shr    ebp,0x6
1000979a:	89 c2                	mov    edx,eax
1000979c:	c1 ea 0e             	shr    edx,0xe
1000979f:	89 c1                	mov    ecx,eax
100097a1:	c1 e9 16             	shr    ecx,0x16
100097a4:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100097ab:	81 e7 fc 03 00 00    	and    edi,0x3fc
100097b1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100097b7:	81 e2 fc 03 00 00    	and    edx,0x3fc
100097bd:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100097c3:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100097c7:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
100097ce:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
100097d5:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
100097dc:	89 ca                	mov    edx,ecx
100097de:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
100097e5:	31 d6                	xor    esi,edx
100097e7:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
100097ee:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
100097f1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
100097f4:	8d bc 24 a0 10 00 00 	lea    edi,[esp+0x10a0]
100097fb:	39 fb                	cmp    ebx,edi
100097fd:	0f 85 d9 fa ff ff    	jne    100092dc <_crypt_blowfish_rn+0x1cfb>
10009803:	8d 5c 24 58          	lea    ebx,[esp+0x58]
10009807:	83 c3 08             	add    ebx,0x8
1000980a:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10009811:	89 c7                	mov    edi,eax
10009813:	c1 ef 06             	shr    edi,0x6
10009816:	89 c5                	mov    ebp,eax
10009818:	c1 ed 0e             	shr    ebp,0xe
1000981b:	89 c2                	mov    edx,eax
1000981d:	c1 ea 16             	shr    edx,0x16
10009820:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009827:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000982d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009833:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009839:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000983f:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009843:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000984a:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009851:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009858:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
1000985f:	31 f2                	xor    edx,esi
10009861:	89 d7                	mov    edi,edx
10009863:	c1 ef 06             	shr    edi,0x6
10009866:	89 d5                	mov    ebp,edx
10009868:	c1 ed 0e             	shr    ebp,0xe
1000986b:	89 d6                	mov    esi,edx
1000986d:	c1 ee 16             	shr    esi,0x16
10009870:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10009877:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000987d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009883:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009889:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000988f:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10009893:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
1000989a:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
100098a1:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
100098a8:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
100098af:	31 c6                	xor    esi,eax
100098b1:	89 f7                	mov    edi,esi
100098b3:	c1 ef 06             	shr    edi,0x6
100098b6:	89 f5                	mov    ebp,esi
100098b8:	c1 ed 0e             	shr    ebp,0xe
100098bb:	89 f1                	mov    ecx,esi
100098bd:	c1 e9 16             	shr    ecx,0x16
100098c0:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
100098c7:	25 fc 03 00 00       	and    eax,0x3fc
100098cc:	81 e7 fc 03 00 00    	and    edi,0x3fc
100098d2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100098d8:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100098de:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100098e2:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100098e9:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100098f0:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
100098f7:	03 8c 04 58 0c 00 00 	add    ecx,DWORD PTR [esp+eax*1+0xc58]
100098fe:	31 d1                	xor    ecx,edx
10009900:	89 c8                	mov    eax,ecx
10009902:	c1 e8 06             	shr    eax,0x6
10009905:	89 cd                	mov    ebp,ecx
10009907:	c1 ed 0e             	shr    ebp,0xe
1000990a:	89 ca                	mov    edx,ecx
1000990c:	c1 ea 16             	shr    edx,0x16
1000990f:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009916:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000991c:	25 fc 03 00 00       	and    eax,0x3fc
10009921:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009927:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000992d:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009931:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009938:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
1000993f:	33 b4 24 68 10 00 00 	xor    esi,DWORD PTR [esp+0x1068]
10009946:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
1000994d:	31 d6                	xor    esi,edx
1000994f:	89 f2                	mov    edx,esi
10009951:	c1 ea 06             	shr    edx,0x6
10009954:	89 f5                	mov    ebp,esi
10009956:	c1 ed 0e             	shr    ebp,0xe
10009959:	89 f0                	mov    eax,esi
1000995b:	c1 e8 16             	shr    eax,0x16
1000995e:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009965:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000996b:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009971:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009977:	25 fc 03 00 00       	and    eax,0x3fc
1000997c:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009980:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009987:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000998e:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
10009995:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000999c:	31 c1                	xor    ecx,eax
1000999e:	89 c8                	mov    eax,ecx
100099a0:	c1 e8 06             	shr    eax,0x6
100099a3:	89 cd                	mov    ebp,ecx
100099a5:	c1 ed 0e             	shr    ebp,0xe
100099a8:	89 ca                	mov    edx,ecx
100099aa:	c1 ea 16             	shr    edx,0x16
100099ad:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100099b4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100099ba:	25 fc 03 00 00       	and    eax,0x3fc
100099bf:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100099c5:	81 e2 fc 03 00 00    	and    edx,0x3fc
100099cb:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100099cf:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100099d6:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
100099dd:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
100099e4:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
100099eb:	31 d6                	xor    esi,edx
100099ed:	89 f2                	mov    edx,esi
100099ef:	c1 ea 06             	shr    edx,0x6
100099f2:	89 f5                	mov    ebp,esi
100099f4:	c1 ed 0e             	shr    ebp,0xe
100099f7:	89 f0                	mov    eax,esi
100099f9:	c1 e8 16             	shr    eax,0x16
100099fc:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009a03:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009a09:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009a0f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009a15:	25 fc 03 00 00       	and    eax,0x3fc
10009a1a:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009a1e:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009a25:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10009a2c:	33 8c 24 74 10 00 00 	xor    ecx,DWORD PTR [esp+0x1074]
10009a33:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009a3a:	31 c1                	xor    ecx,eax
10009a3c:	89 cf                	mov    edi,ecx
10009a3e:	c1 ef 06             	shr    edi,0x6
10009a41:	89 cd                	mov    ebp,ecx
10009a43:	c1 ed 0e             	shr    ebp,0xe
10009a46:	89 ca                	mov    edx,ecx
10009a48:	c1 ea 16             	shr    edx,0x16
10009a4b:	8d 04 8d 00 00 00 00 	lea    eax,[ecx*4+0x0]
10009a52:	25 fc 03 00 00       	and    eax,0x3fc
10009a57:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009a5d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009a63:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009a69:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009a6d:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009a74:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009a7b:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
10009a82:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
10009a89:	31 d6                	xor    esi,edx
10009a8b:	89 f2                	mov    edx,esi
10009a8d:	c1 ea 06             	shr    edx,0x6
10009a90:	89 f5                	mov    ebp,esi
10009a92:	c1 ed 0e             	shr    ebp,0xe
10009a95:	89 f0                	mov    eax,esi
10009a97:	c1 e8 16             	shr    eax,0x16
10009a9a:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009aa1:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009aa7:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009aad:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ab3:	25 fc 03 00 00       	and    eax,0x3fc
10009ab8:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009abc:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009ac3:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10009aca:	33 8c 24 7c 10 00 00 	xor    ecx,DWORD PTR [esp+0x107c]
10009ad1:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009ad8:	31 c8                	xor    eax,ecx
10009ada:	89 c7                	mov    edi,eax
10009adc:	c1 ef 06             	shr    edi,0x6
10009adf:	89 c5                	mov    ebp,eax
10009ae1:	c1 ed 0e             	shr    ebp,0xe
10009ae4:	89 c2                	mov    edx,eax
10009ae6:	c1 ea 16             	shr    edx,0x16
10009ae9:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009af0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009af6:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009afc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009b02:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009b08:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009b0c:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009b13:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009b1a:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
10009b21:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009b28:	31 d6                	xor    esi,edx
10009b2a:	89 f7                	mov    edi,esi
10009b2c:	c1 ef 06             	shr    edi,0x6
10009b2f:	89 f5                	mov    ebp,esi
10009b31:	c1 ed 0e             	shr    ebp,0xe
10009b34:	89 f1                	mov    ecx,esi
10009b36:	c1 e9 16             	shr    ecx,0x16
10009b39:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009b40:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009b46:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009b4c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009b52:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009b58:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009b5c:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009b63:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009b6a:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10009b71:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009b78:	31 c8                	xor    eax,ecx
10009b7a:	89 c7                	mov    edi,eax
10009b7c:	c1 ef 06             	shr    edi,0x6
10009b7f:	89 c5                	mov    ebp,eax
10009b81:	c1 ed 0e             	shr    ebp,0xe
10009b84:	89 c2                	mov    edx,eax
10009b86:	c1 ea 16             	shr    edx,0x16
10009b89:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009b90:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009b96:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009b9c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ba2:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009ba8:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009bac:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009bb3:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009bba:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
10009bc1:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009bc8:	31 d6                	xor    esi,edx
10009bca:	89 f7                	mov    edi,esi
10009bcc:	c1 ef 06             	shr    edi,0x6
10009bcf:	89 f5                	mov    ebp,esi
10009bd1:	c1 ed 0e             	shr    ebp,0xe
10009bd4:	89 f1                	mov    ecx,esi
10009bd6:	c1 e9 16             	shr    ecx,0x16
10009bd9:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009be0:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009be6:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009bec:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009bf2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009bf8:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009bfc:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009c03:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009c0a:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10009c11:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009c18:	31 c8                	xor    eax,ecx
10009c1a:	89 c7                	mov    edi,eax
10009c1c:	c1 ef 06             	shr    edi,0x6
10009c1f:	89 c5                	mov    ebp,eax
10009c21:	c1 ed 0e             	shr    ebp,0xe
10009c24:	89 c2                	mov    edx,eax
10009c26:	c1 ea 16             	shr    edx,0x16
10009c29:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009c30:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009c36:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009c3c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009c42:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009c48:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009c4c:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009c53:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009c5a:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
10009c61:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009c68:	31 d6                	xor    esi,edx
10009c6a:	89 f7                	mov    edi,esi
10009c6c:	c1 ef 06             	shr    edi,0x6
10009c6f:	89 f5                	mov    ebp,esi
10009c71:	c1 ed 0e             	shr    ebp,0xe
10009c74:	89 f1                	mov    ecx,esi
10009c76:	c1 e9 16             	shr    ecx,0x16
10009c79:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009c80:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009c86:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009c8c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009c92:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009c98:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009c9c:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009ca3:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009caa:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10009cb1:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009cb8:	31 c8                	xor    eax,ecx
10009cba:	89 c7                	mov    edi,eax
10009cbc:	c1 ef 06             	shr    edi,0x6
10009cbf:	89 c5                	mov    ebp,eax
10009cc1:	c1 ed 0e             	shr    ebp,0xe
10009cc4:	89 c2                	mov    edx,eax
10009cc6:	c1 ea 16             	shr    edx,0x16
10009cc9:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009cd0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009cd6:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009cdc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ce2:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009ce8:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009cec:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009cf3:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009cfa:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
10009d01:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009d08:	31 d6                	xor    esi,edx
10009d0a:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10009d11:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10009d14:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
10009d17:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10009d1e:	39 d3                	cmp    ebx,edx
10009d20:	0f 85 e1 fa ff ff    	jne    10009807 <_crypt_blowfish_rn+0x2226>
10009d26:	ff 4c 24 04          	dec    DWORD PTR [esp+0x4]
10009d2a:	0f 85 a2 e9 ff ff    	jne    100086d2 <_crypt_blowfish_rn+0x10f1>
10009d30:	8b 84 24 58 10 00 00 	mov    eax,DWORD PTR [esp+0x1058]
10009d37:	89 04 24             	mov    DWORD PTR [esp],eax
10009d3a:	8b 84 24 5c 10 00 00 	mov    eax,DWORD PTR [esp+0x105c]
10009d41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10009d45:	8b 84 24 60 10 00 00 	mov    eax,DWORD PTR [esp+0x1060]
10009d4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10009d50:	8b 84 24 64 10 00 00 	mov    eax,DWORD PTR [esp+0x1064]
10009d57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10009d5b:	8b 84 24 68 10 00 00 	mov    eax,DWORD PTR [esp+0x1068]
10009d62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10009d66:	8b 84 24 6c 10 00 00 	mov    eax,DWORD PTR [esp+0x106c]
10009d6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10009d71:	8b 84 24 70 10 00 00 	mov    eax,DWORD PTR [esp+0x1070]
10009d78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10009d7c:	8b 84 24 74 10 00 00 	mov    eax,DWORD PTR [esp+0x1074]
10009d83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10009d87:	8b 84 24 78 10 00 00 	mov    eax,DWORD PTR [esp+0x1078]
10009d8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10009d92:	8b 84 24 7c 10 00 00 	mov    eax,DWORD PTR [esp+0x107c]
10009d99:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10009d9d:	8b 84 24 80 10 00 00 	mov    eax,DWORD PTR [esp+0x1080]
10009da4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10009da8:	8b 84 24 84 10 00 00 	mov    eax,DWORD PTR [esp+0x1084]
10009daf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10009db3:	8b 84 24 88 10 00 00 	mov    eax,DWORD PTR [esp+0x1088]
10009dba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10009dbe:	8b 84 24 8c 10 00 00 	mov    eax,DWORD PTR [esp+0x108c]
10009dc5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10009dc9:	8b 84 24 90 10 00 00 	mov    eax,DWORD PTR [esp+0x1090]
10009dd0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10009dd4:	8b 84 24 94 10 00 00 	mov    eax,DWORD PTR [esp+0x1094]
10009ddb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10009ddf:	8b 84 24 98 10 00 00 	mov    eax,DWORD PTR [esp+0x1098]
10009de6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10009dea:	8b 84 24 9c 10 00 00 	mov    eax,DWORD PTR [esp+0x109c]
10009df1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10009df5:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
10009df9:	89 5c 24 4c          	mov    DWORD PTR [esp+0x4c],ebx
10009dfd:	8b 04 9d 00 b4 00 10 	mov    eax,DWORD PTR [ebx*4+0x1000b400]	10009e00: R_386_32	.data
10009e04:	8b 0c 9d 04 b4 00 10 	mov    ecx,DWORD PTR [ebx*4+0x1000b404]	10009e07: R_386_32	.data
10009e0b:	bb 40 00 00 00       	mov    ebx,0x40
10009e10:	33 04 24             	xor    eax,DWORD PTR [esp]
10009e13:	89 c7                	mov    edi,eax
10009e15:	c1 ef 06             	shr    edi,0x6
10009e18:	89 c5                	mov    ebp,eax
10009e1a:	c1 ed 0e             	shr    ebp,0xe
10009e1d:	89 c2                	mov    edx,eax
10009e1f:	c1 ea 16             	shr    edx,0x16
10009e22:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009e29:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009e2f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009e35:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009e3b:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009e41:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009e45:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009e4c:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009e53:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10009e5a:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
10009e5e:	31 ca                	xor    edx,ecx
10009e60:	89 d7                	mov    edi,edx
10009e62:	c1 ef 06             	shr    edi,0x6
10009e65:	89 d5                	mov    ebp,edx
10009e67:	c1 ed 0e             	shr    ebp,0xe
10009e6a:	89 d1                	mov    ecx,edx
10009e6c:	c1 e9 16             	shr    ecx,0x16
10009e6f:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009e76:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009e7c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009e82:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009e88:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009e8e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009e92:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009e99:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009ea0:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
10009ea4:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009eab:	31 c1                	xor    ecx,eax
10009ead:	89 cd                	mov    ebp,ecx
10009eaf:	c1 ed 06             	shr    ebp,0x6
10009eb2:	89 ce                	mov    esi,ecx
10009eb4:	c1 ee 0e             	shr    esi,0xe
10009eb7:	89 c8                	mov    eax,ecx
10009eb9:	c1 e8 16             	shr    eax,0x16
10009ebc:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009ec3:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009ec9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ecf:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009ed5:	25 fc 03 00 00       	and    eax,0x3fc
10009eda:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009ede:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
10009ee5:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009eec:	33 54 24 0c          	xor    edx,DWORD PTR [esp+0xc]
10009ef0:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009ef7:	89 c6                	mov    esi,eax
10009ef9:	31 d6                	xor    esi,edx
10009efb:	89 f5                	mov    ebp,esi
10009efd:	c1 ed 06             	shr    ebp,0x6
10009f00:	89 f2                	mov    edx,esi
10009f02:	c1 ea 0e             	shr    edx,0xe
10009f05:	89 f0                	mov    eax,esi
10009f07:	c1 e8 16             	shr    eax,0x16
10009f0a:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009f11:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009f17:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009f1d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009f23:	25 fc 03 00 00       	and    eax,0x3fc
10009f28:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009f2c:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10009f33:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009f3a:	33 4c 24 10          	xor    ecx,DWORD PTR [esp+0x10]
10009f3e:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009f45:	31 c1                	xor    ecx,eax
10009f47:	89 ca                	mov    edx,ecx
10009f49:	c1 ea 06             	shr    edx,0x6
10009f4c:	89 cd                	mov    ebp,ecx
10009f4e:	c1 ed 0e             	shr    ebp,0xe
10009f51:	89 c8                	mov    eax,ecx
10009f53:	c1 e8 16             	shr    eax,0x16
10009f56:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009f5d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009f63:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009f69:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009f6f:	25 fc 03 00 00       	and    eax,0x3fc
10009f74:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009f78:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009f7f:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10009f86:	33 74 24 14          	xor    esi,DWORD PTR [esp+0x14]
10009f8a:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009f91:	31 f0                	xor    eax,esi
10009f93:	89 c7                	mov    edi,eax
10009f95:	c1 ef 06             	shr    edi,0x6
10009f98:	89 c5                	mov    ebp,eax
10009f9a:	c1 ed 0e             	shr    ebp,0xe
10009f9d:	89 c2                	mov    edx,eax
10009f9f:	c1 ea 16             	shr    edx,0x16
10009fa2:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009fa9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009faf:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009fb5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009fbb:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009fc1:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009fc5:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009fcc:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009fd3:	33 4c 24 18          	xor    ecx,DWORD PTR [esp+0x18]
10009fd7:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10009fde:	31 ca                	xor    edx,ecx
10009fe0:	89 d7                	mov    edi,edx
10009fe2:	c1 ef 06             	shr    edi,0x6
10009fe5:	89 d5                	mov    ebp,edx
10009fe7:	c1 ed 0e             	shr    ebp,0xe
10009fea:	89 d1                	mov    ecx,edx
10009fec:	c1 e9 16             	shr    ecx,0x16
10009fef:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009ff6:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009ffc:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a002:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a008:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a00e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a012:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a019:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a020:	33 44 24 1c          	xor    eax,DWORD PTR [esp+0x1c]
1000a024:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a02b:	31 c8                	xor    eax,ecx
1000a02d:	89 c7                	mov    edi,eax
1000a02f:	c1 ef 06             	shr    edi,0x6
1000a032:	89 c5                	mov    ebp,eax
1000a034:	c1 ed 0e             	shr    ebp,0xe
1000a037:	89 c1                	mov    ecx,eax
1000a039:	c1 e9 16             	shr    ecx,0x16
1000a03c:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a043:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a049:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a04f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a055:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a05b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a05f:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a066:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a06d:	33 54 24 20          	xor    edx,DWORD PTR [esp+0x20]
1000a071:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a078:	31 ca                	xor    edx,ecx
1000a07a:	89 d7                	mov    edi,edx
1000a07c:	c1 ef 06             	shr    edi,0x6
1000a07f:	89 d5                	mov    ebp,edx
1000a081:	c1 ed 0e             	shr    ebp,0xe
1000a084:	89 d1                	mov    ecx,edx
1000a086:	c1 e9 16             	shr    ecx,0x16
1000a089:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000a090:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a096:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a09c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a0a2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a0a8:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a0ac:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a0b3:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a0ba:	33 44 24 24          	xor    eax,DWORD PTR [esp+0x24]
1000a0be:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a0c5:	31 c8                	xor    eax,ecx
1000a0c7:	89 c7                	mov    edi,eax
1000a0c9:	c1 ef 06             	shr    edi,0x6
1000a0cc:	89 c5                	mov    ebp,eax
1000a0ce:	c1 ed 0e             	shr    ebp,0xe
1000a0d1:	89 c1                	mov    ecx,eax
1000a0d3:	c1 e9 16             	shr    ecx,0x16
1000a0d6:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a0dd:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a0e3:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a0e9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a0ef:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a0f5:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a0f9:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a100:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a107:	33 54 24 28          	xor    edx,DWORD PTR [esp+0x28]
1000a10b:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a112:	31 ca                	xor    edx,ecx
1000a114:	89 d7                	mov    edi,edx
1000a116:	c1 ef 06             	shr    edi,0x6
1000a119:	89 d5                	mov    ebp,edx
1000a11b:	c1 ed 0e             	shr    ebp,0xe
1000a11e:	89 d1                	mov    ecx,edx
1000a120:	c1 e9 16             	shr    ecx,0x16
1000a123:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000a12a:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a130:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a136:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a13c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a142:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a146:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a14d:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a154:	33 44 24 2c          	xor    eax,DWORD PTR [esp+0x2c]
1000a158:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a15f:	31 c8                	xor    eax,ecx
1000a161:	89 c7                	mov    edi,eax
1000a163:	c1 ef 06             	shr    edi,0x6
1000a166:	89 c5                	mov    ebp,eax
1000a168:	c1 ed 0e             	shr    ebp,0xe
1000a16b:	89 c1                	mov    ecx,eax
1000a16d:	c1 e9 16             	shr    ecx,0x16
1000a170:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a177:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a17d:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a183:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a189:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a18f:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a193:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a19a:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a1a1:	33 54 24 30          	xor    edx,DWORD PTR [esp+0x30]
1000a1a5:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a1ac:	31 ca                	xor    edx,ecx
1000a1ae:	89 d7                	mov    edi,edx
1000a1b0:	c1 ef 06             	shr    edi,0x6
1000a1b3:	89 d5                	mov    ebp,edx
1000a1b5:	c1 ed 0e             	shr    ebp,0xe
1000a1b8:	89 d1                	mov    ecx,edx
1000a1ba:	c1 e9 16             	shr    ecx,0x16
1000a1bd:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000a1c4:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a1ca:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a1d0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a1d6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a1dc:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a1e0:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a1e7:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a1ee:	33 44 24 34          	xor    eax,DWORD PTR [esp+0x34]
1000a1f2:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a1f9:	31 c8                	xor    eax,ecx
1000a1fb:	89 c7                	mov    edi,eax
1000a1fd:	c1 ef 06             	shr    edi,0x6
1000a200:	89 c5                	mov    ebp,eax
1000a202:	c1 ed 0e             	shr    ebp,0xe
1000a205:	89 c1                	mov    ecx,eax
1000a207:	c1 e9 16             	shr    ecx,0x16
1000a20a:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a211:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a217:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a21d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a223:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a229:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a22d:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a234:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a23b:	33 54 24 38          	xor    edx,DWORD PTR [esp+0x38]
1000a23f:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a246:	31 ca                	xor    edx,ecx
1000a248:	89 d7                	mov    edi,edx
1000a24a:	c1 ef 06             	shr    edi,0x6
1000a24d:	89 d5                	mov    ebp,edx
1000a24f:	c1 ed 0e             	shr    ebp,0xe
1000a252:	89 d6                	mov    esi,edx
1000a254:	c1 ee 16             	shr    esi,0x16
1000a257:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000a25e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a264:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a26a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a270:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a276:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000a27a:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
1000a281:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
1000a288:	33 44 24 3c          	xor    eax,DWORD PTR [esp+0x3c]
1000a28c:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
1000a293:	31 f0                	xor    eax,esi
1000a295:	89 c5                	mov    ebp,eax
1000a297:	c1 ed 06             	shr    ebp,0x6
1000a29a:	89 c1                	mov    ecx,eax
1000a29c:	c1 e9 0e             	shr    ecx,0xe
1000a29f:	89 c6                	mov    esi,eax
1000a2a1:	c1 ee 16             	shr    esi,0x16
1000a2a4:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000a2ab:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a2b1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a2b7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a2bd:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a2c3:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000a2c7:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
1000a2ce:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
1000a2d5:	33 54 24 40          	xor    edx,DWORD PTR [esp+0x40]
1000a2d9:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
1000a2e0:	89 f1                	mov    ecx,esi
1000a2e2:	31 d1                	xor    ecx,edx
1000a2e4:	33 44 24 44          	xor    eax,DWORD PTR [esp+0x44]
1000a2e8:	4b                   	dec    ebx
1000a2e9:	0f 85 21 fb ff ff    	jne    10009e10 <_crypt_blowfish_rn+0x282f>
1000a2ef:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
1000a2f3:	89 84 9c e8 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10e8],eax
1000a2fa:	89 8c 9c ec 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10ec],ecx
1000a301:	83 44 24 48 02       	add    DWORD PTR [esp+0x48],0x2
1000a306:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000a30a:	83 f8 06             	cmp    eax,0x6
1000a30d:	0f 85 e2 fa ff ff    	jne    10009df5 <_crypt_blowfish_rn+0x2814>
1000a313:	b9 07 00 00 00       	mov    ecx,0x7
1000a318:	8b bc 24 1c 11 00 00 	mov    edi,DWORD PTR [esp+0x111c]
1000a31f:	8b b4 24 18 11 00 00 	mov    esi,DWORD PTR [esp+0x1118]
1000a326:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000a328:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
1000a32f:	0f be 40 1c          	movsx  eax,BYTE PTR [eax+0x1c]
1000a333:	8a 80 c0 c4 00 10    	mov    al,BYTE PTR [eax+0x1000c4c0]	1000a335: R_386_32	.data
1000a339:	83 e0 30             	and    eax,0x30
1000a33c:	8a 80 80 c4 00 10    	mov    al,BYTE PTR [eax+0x1000c480]	1000a33e: R_386_32	.data
1000a342:	88 04 24             	mov    BYTE PTR [esp],al
1000a345:	8b 9c 24 1c 11 00 00 	mov    ebx,DWORD PTR [esp+0x111c]
1000a34c:	88 43 1c             	mov    BYTE PTR [ebx+0x1c],al
1000a34f:	6a 06                	push   0x6
1000a351:	8d 74 24 5c          	lea    esi,[esp+0x5c]
1000a355:	8d 9c 24 ec 10 00 00 	lea    ebx,[esp+0x10ec]
1000a35c:	53                   	push   ebx
1000a35d:	e8 f5 d1 ff ff       	call   10007557 <BF_swap>
1000a362:	6a 17                	push   0x17
1000a364:	53                   	push   ebx
1000a365:	8b 84 24 2c 11 00 00 	mov    eax,DWORD PTR [esp+0x112c]
1000a36c:	83 c0 1d             	add    eax,0x1d
1000a36f:	50                   	push   eax
1000a370:	e8 3d d1 ff ff       	call   100074b2 <BF_encode>
1000a375:	8b 84 24 30 11 00 00 	mov    eax,DWORD PTR [esp+0x1130]
1000a37c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
1000a380:	68 a8 10 00 00       	push   0x10a8
1000a385:	56                   	push   esi
1000a386:	e8 0b d0 ff ff       	call   10007396 <clean>
1000a38b:	83 c4 1c             	add    esp,0x1c
1000a38e:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
1000a395:	eb 29                	jmp    1000a3c0 <_crypt_blowfish_rn+0x2ddf>
1000a397:	c7 05 00 00 00 00 22 00 00 00 	mov    DWORD PTR ds:0x0,0x22	1000a399: R_386_32	_bcrypt_errno
1000a3a1:	b8 00 00 00 00       	mov    eax,0x0
1000a3a6:	eb 18                	jmp    1000a3c0 <_crypt_blowfish_rn+0x2ddf>
1000a3a8:	80 fa 31             	cmp    dl,0x31
1000a3ab:	0f 8e a3 d2 ff ff    	jle    10007654 <_crypt_blowfish_rn+0x73>
1000a3b1:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000a3b3: R_386_32	_bcrypt_errno
1000a3bb:	b8 00 00 00 00       	mov    eax,0x0
1000a3c0:	81 c4 00 11 00 00    	add    esp,0x1100
1000a3c6:	5b                   	pop    ebx
1000a3c7:	5e                   	pop    esi
1000a3c8:	5f                   	pop    edi
1000a3c9:	5d                   	pop    ebp
1000a3ca:	c3                   	ret    
1000a3cb:	6a 10                	push   0x10
1000a3cd:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
1000a3d4:	50                   	push   eax
1000a3d5:	e8 bc cf ff ff       	call   10007396 <clean>
1000a3da:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000a3dc: R_386_32	_bcrypt_errno
1000a3e4:	83 c4 08             	add    esp,0x8
1000a3e7:	b8 00 00 00 00       	mov    eax,0x0
1000a3ec:	eb d2                	jmp    1000a3c0 <_crypt_blowfish_rn+0x2ddf>

1000a3ee <_crypt_gensalt_blowfish_rn>:
1000a3ee:	53                   	push   ebx
1000a3ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000a3f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000a3f7:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
1000a3fc:	7e 19                	jle    1000a417 <_crypt_gensalt_blowfish_rn+0x29>
1000a3fe:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
1000a403:	0f 8e 88 00 00 00    	jle    1000a491 <_crypt_gensalt_blowfish_rn+0xa3>
1000a409:	85 c9                	test   ecx,ecx
1000a40b:	74 33                	je     1000a440 <_crypt_gensalt_blowfish_rn+0x52>
1000a40d:	8d 41 fc             	lea    eax,[ecx-0x4]
1000a410:	83 f8 1b             	cmp    eax,0x1b
1000a413:	76 30                	jbe    1000a445 <_crypt_gensalt_blowfish_rn+0x57>
1000a415:	eb 07                	jmp    1000a41e <_crypt_gensalt_blowfish_rn+0x30>
1000a417:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000a41c:	7e 03                	jle    1000a421 <_crypt_gensalt_blowfish_rn+0x33>
1000a41e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
1000a421:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
1000a426:	7e 11                	jle    1000a439 <_crypt_gensalt_blowfish_rn+0x4b>
1000a428:	b8 16 00 00 00       	mov    eax,0x16
1000a42d:	a3 00 00 00 00       	mov    ds:0x0,eax	1000a42e: R_386_32	_bcrypt_errno
1000a432:	b8 00 00 00 00       	mov    eax,0x0
1000a437:	eb 56                	jmp    1000a48f <_crypt_gensalt_blowfish_rn+0xa1>
1000a439:	b8 22 00 00 00       	mov    eax,0x22
1000a43e:	eb ed                	jmp    1000a42d <_crypt_gensalt_blowfish_rn+0x3f>
1000a440:	b9 05 00 00 00       	mov    ecx,0x5
1000a445:	c6 03 24             	mov    BYTE PTR [ebx],0x24
1000a448:	c6 43 01 32          	mov    BYTE PTR [ebx+0x1],0x32
1000a44c:	c6 43 02 61          	mov    BYTE PTR [ebx+0x2],0x61
1000a450:	c6 43 03 24          	mov    BYTE PTR [ebx+0x3],0x24
1000a454:	b8 cd cc cc cc       	mov    eax,0xcccccccd
1000a459:	f7 e1                	mul    ecx
1000a45b:	89 d0                	mov    eax,edx
1000a45d:	c1 e8 03             	shr    eax,0x3
1000a460:	8d 50 30             	lea    edx,[eax+0x30]
1000a463:	88 53 04             	mov    BYTE PTR [ebx+0x4],dl
1000a466:	8d 04 80             	lea    eax,[eax+eax*4]
1000a469:	01 c0                	add    eax,eax
1000a46b:	29 c1                	sub    ecx,eax
1000a46d:	83 c1 30             	add    ecx,0x30
1000a470:	88 4b 05             	mov    BYTE PTR [ebx+0x5],cl
1000a473:	c6 43 06 24          	mov    BYTE PTR [ebx+0x6],0x24
1000a477:	6a 10                	push   0x10
1000a479:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a47d:	8d 43 07             	lea    eax,[ebx+0x7]
1000a480:	50                   	push   eax
1000a481:	e8 2c d0 ff ff       	call   100074b2 <BF_encode>
1000a486:	c6 43 1d 00          	mov    BYTE PTR [ebx+0x1d],0x0
1000a48a:	83 c4 0c             	add    esp,0xc
1000a48d:	89 d8                	mov    eax,ebx
1000a48f:	5b                   	pop    ebx
1000a490:	c3                   	ret    
1000a491:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000a496:	7f 86                	jg     1000a41e <_crypt_gensalt_blowfish_rn+0x30>
1000a498:	b8 22 00 00 00       	mov    eax,0x22
1000a49d:	eb 8e                	jmp    1000a42d <_crypt_gensalt_blowfish_rn+0x3f>

1000a49f <bcrypt_gensalt>:
1000a49f:	57                   	push   edi
1000a4a0:	56                   	push   esi
1000a4a1:	53                   	push   ebx
1000a4a2:	83 ec 10             	sub    esp,0x10
1000a4a5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000a4a9:	89 e3                	mov    ebx,esp
1000a4ab:	8d 74 24 10          	lea    esi,[esp+0x10]
1000a4af:	e8 fc ff ff ff       	call   1000a4b0 <bcrypt_gensalt+0x11>	1000a4b0: R_386_PC32	_bcrypt_rand
1000a4b4:	88 03                	mov    BYTE PTR [ebx],al
1000a4b6:	43                   	inc    ebx
1000a4b7:	39 f3                	cmp    ebx,esi
1000a4b9:	75 f4                	jne    1000a4af <bcrypt_gensalt+0x10>
1000a4bb:	8d 47 fc             	lea    eax,[edi-0x4]
1000a4be:	83 f8 1b             	cmp    eax,0x1b
1000a4c1:	76 05                	jbe    1000a4c8 <bcrypt_gensalt+0x29>
1000a4c3:	bf 0c 00 00 00       	mov    edi,0xc
1000a4c8:	83 ec 0c             	sub    esp,0xc
1000a4cb:	6a 40                	push   0x40
1000a4cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
1000a4d1:	6a 10                	push   0x10
1000a4d3:	8d 44 24 18          	lea    eax,[esp+0x18]
1000a4d7:	50                   	push   eax
1000a4d8:	57                   	push   edi
1000a4d9:	e8 10 ff ff ff       	call   1000a3ee <_crypt_gensalt_blowfish_rn>
1000a4de:	85 c0                	test   eax,eax
1000a4e0:	0f 94 c0             	sete   al
1000a4e3:	0f b6 c0             	movzx  eax,al
1000a4e6:	83 c4 30             	add    esp,0x30
1000a4e9:	5b                   	pop    ebx
1000a4ea:	5e                   	pop    esi
1000a4eb:	5f                   	pop    edi
1000a4ec:	c3                   	ret    

1000a4ed <bcrypt_hashpw>:
1000a4ed:	6a 40                	push   0x40
1000a4ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a4f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a4f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a4fb:	e8 e1 d0 ff ff       	call   100075e1 <_crypt_blowfish_rn>
1000a500:	83 c4 10             	add    esp,0x10
1000a503:	85 c0                	test   eax,eax
1000a505:	0f 94 c0             	sete   al
1000a508:	0f b6 c0             	movzx  eax,al
1000a50b:	c3                   	ret    

1000a50c <TERMINAL_KEYBUFFER_IN_SIZE>:
1000a50c:	80 00 00 00                                         ....

1000a510 <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000a510:	80 00 00 00 2e 00 2e 2e 00 2f 00 43 6f 75 6c 64     ........./.Could
1000a520:	6e 27 74 20 6f 70 65 6e 20 62 61 73 65 20 70 61     n't open base pa
1000a530:	74 68 2e 0a 00 25 73 20 2d 3e 20 25 73 0a 00 43     th...%s -> %s..C
1000a540:	4f 55 4c 44 20 4e 4f 54 20 43 52 45 41 54 45 00     OULD NOT CREATE.
1000a550:	43 4f 55 4c 44 20 4e 4f 54 20 43 4f 50 59 00 4e     COULD NOT COPY.N
1000a560:	4f 20 4d 45 4d 4f 52 59 00 42 61 63 6b 75 70 00     O MEMORY.Backup.
1000a570:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000a580:	2f 42 61 63 6b 75 70 2f 00 30 31 32 33 34 35 36     /Backup/.0123456
1000a590:	37 38 39 41 42 43 44 45 46 00 43 3a 2f 55 73 65     789ABCDEF.C:/Use
1000a5a0:	72 73 2f 00 2f 44 65 73 6b 74 6f 70 00 2f 44 6f     rs/./Desktop./Do
1000a5b0:	63 75 6d 65 6e 74 73 00 2f 44 6f 77 6e 6c 6f 61     cuments./Downloa
1000a5c0:	64 73 00 2f 50 69 63 74 75 72 65 73 00 2f 54 72     ds./Pictures./Tr
1000a5d0:	61 73 68 20 42 69 6e 00 2f 4d 75 73 69 63 00 2f     ash Bin./Music./
1000a5e0:	4d 6f 76 69 65 73 00 43 3a 2f 42 61 6e 61 6e 61     Movies.C:/Banana
1000a5f0:	2f 52 65 67 69 73 74 72 79 2f 55 73 65 72 2f 00     /Registry/User/.
1000a600:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000a610:	72 79 2f 44 65 66 61 75 6c 74 55 73 65 72 00 00     ry/DefaultUser..
1000a620:	43 68 65 63 6b 69 6e 67 0a 20 73 79 73 74 65 6d     Checking. system
1000a630:	0a 20 72 65 71 75 69 72 65 6d 65 6e 74 73 0a 0a     . requirements..
1000a640:	20 4c 65 67 61 6c 0a 20 6e 6f 74 69 63 65 73 0a      Legal. notices.
1000a650:	0a 20 43 68 6f 6f 73 69 6e 67 20 61 0a 20 70 61     . Choosing a. pa
1000a660:	72 74 69 74 69 6f 6e 0a 0a 20 46 6f 72 6d 61 74     rtition.. Format
1000a670:	74 69 6e 67 0a 0a 20 43 6f 70 79 69 6e 67 20 66     ting.. Copying f
1000a680:	69 6c 65 73 0a 0a 20 52 65 73 74 61 72 74 69 6e     iles.. Restartin
1000a690:	67 0a 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72     g. your computer
1000a6a0:	0a 0a 00 20 46 69 6e 61 6c 69 73 69 6e 67 20 74     ... Finalising t
1000a6b0:	68 65 0a 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     he. installation
1000a6c0:	00 00 00 00 50 6c 65 61 73 65 20 77 61 69 74 20     ....Please wait 
1000a6d0:	77 68 69 6c 65 20 74 68 65 20 69 6e 73 74 61 6c     while the instal
1000a6e0:	6c 20 66 69 6e 69 73 68 65 73 2e 00 10 20 00 20     l finishes... . 
1000a6f0:	20 00 41 6c 6c 6f 63 61 74 69 6e 67 20 74 68 65      .Allocating the
1000a700:	20 73 77 61 70 66 69 6c 65 00 55 70 64 61 74 69      swapfile.Updati
1000a710:	6e 67 20 74 68 65 20 72 65 67 69 73 74 72 79 00     ng the registry.
1000a720:	43 72 65 61 74 69 6e 67 20 75 73 65 72 20 61 63     Creating user ac
1000a730:	63 6f 75 6e 74 00 49 6e 73 74 61 6c 6c 69 6e 67     count.Installing
1000a740:	20 70 61 63 6b 61 67 65 73 00 42 61 63 6b 69 6e      packages.Backin
1000a750:	67 20 75 70 20 73 79 73 74 65 6d 20 66 69 6c 65     g up system file
1000a760:	73 00 46 69 6e 69 73 68 69 6e 67 20 74 6f 75 63     s.Finishing touc
1000a770:	68 65 73 00 51 51 2d 30 30 30 2d 30 30 30 2d 30     hes.QQ-000-000-0
1000a780:	30 30 2d 51 00 00 00 00 43 3a 2f 42 61 6e 61 6e     00-Q....C:/Banan
1000a790:	61 2f 53 79 73 74 65 6d 2f 74 69 6d 65 7a 6f 6e     a/System/timezon
1000a7a0:	65 73 2e 74 78 74 00 20 00 2e 2e 2e 20 00 00 00     es.txt. .... ...
1000a7b0:	53 65 74 74 69 6e 67 20 75 70 20 74 68 65 20 73     Setting up the s
1000a7c0:	79 73 74 65 6d 20 66 6f 72 20 74 68 65 20 66 69     ystem for the fi
1000a7d0:	72 73 74 20 74 69 6d 65 00 0a 0a 0a 0a 0a 0a 00     rst time........
1000a7e0:	54 65 73 74 00 41 41 2d 30 30 30 30 30 2d 30 30     Test.AA-00000-00
1000a7f0:	30 30 30 2d 41 00 57 57 2d 38 38 33 38 38 2d 35     000-A.WW-88388-5
1000a800:	35 35 35 35 2d 4e 00 43 72 65 61 74 65 20 4e 65     5555-N.Create Ne
1000a810:	77 20 55 73 65 72 00 42 61 6e 61 6e 61 20 53 65     w User.Banana Se
1000a820:	74 75 70 00 50 6c 65 61 73 65 20 65 6e 74 65 72     tup.Please enter
1000a830:	20 79 6f 75 72 20 64 65 74 61 69 6c 73 2e 20 50      your details. P
1000a840:	72 65 73 73 20 54 41 42 20 74 6f 20 73 77 69 74     ress TAB to swit
1000a850:	63 68 00 00 62 65 74 77 65 65 6e 20 66 69 65 6c     ch..between fiel
1000a860:	64 73 2c 20 6f 72 20 45 53 43 20 74 6f 20 63 61     ds, or ESC to ca
1000a870:	6e 63 65 6c 2e 00 62 65 74 77 65 65 6e 20 66 69     ncel..between fi
1000a880:	65 6c 64 73 2e 00 4e 61 6d 65 00 43 6f 6d 70 61     elds..Name.Compa
1000a890:	6e 79 00 50 61 73 73 77 6f 72 64 00 43 6f 6e 66     ny.Password.Conf
1000a8a0:	69 72 6d 00 70 61 73 73 77 6f 72 64 00 00 00 00     irm.password....
1000a8b0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000a8c0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000a8d0:	20 20 20 20 00 20 11 00 20 20 20 00 2a 00 50 72         . ..   .*.Pr
1000a8e0:	65 73 73 20 45 4e 54 45 52 20 74 6f 20 73 75 62     ess ENTER to sub
1000a8f0:	6d 69 74 00 20 20 20 20 20 20 20 20 20 20 20 20     mit.            
1000a900:	20 20 20 20 20 20 20 20 20 20 00 20 20 20 4f 4b               .   OK
1000a910:	20 20 20 00 20 20 11 00 43 4f 55 4c 44 20 4e 4f        .  ..COULD NO
1000a920:	54 20 53 41 56 45 00 59 4f 55 52 20 50 41 53 53     T SAVE.YOUR PASS
1000a930:	57 4f 52 44 20 28 41 29 00 59 4f 55 52 20 50 41     WORD (A).YOUR PA
1000a940:	53 53 57 4f 52 44 20 28 42 29 00 44 61 74 65 20     SSWORD (B).Date 
1000a950:	61 6e 64 20 54 69 6d 65 00 31 34 2f 30 35 2f 32     and Time.14/05/2
1000a960:	30 32 31 20 31 38 3a 35 35 3a 30 30 00 00 00 00     021 18:55:00....
1000a970:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 74 68 65     Please enter the
1000a980:	20 63 75 72 72 65 6e 74 20 64 61 74 65 20 61 6e      current date an
1000a990:	64 20 74 69 6d 65 2c 00 61 6e 64 20 74 68 65 6e     d time,.and then
1000a9a0:	20 70 72 65 73 73 20 45 4e 54 45 52 2e 00 44 44      press ENTER..DD
1000a9b0:	2f 4d 4d 2f 59 59 59 59 20 48 48 3a 4d 4d 3a 53     /MM/YYYY HH:MM:S
1000a9c0:	53 00 45 53 43 3a 20 47 6f 20 62 61 63 6b 20 61     S.ESC: Go back a
1000a9d0:	20 73 63 72 65 65 6e 00 50 6c 65 61 73 65 20 73      screen.Please s
1000a9e0:	65 6c 65 63 74 20 79 6f 75 72 20 74 69 6d 65 7a     elect your timez
1000a9f0:	6f 6e 65 20 61 6e 64 20 74 68 65 6e 20 70 72 65     one and then pre
1000aa00:	73 73 20 45 4e 54 45 52 2e 00 54 5a 48 52 3a 20     ss ENTER..TZHR: 
1000aa10:	25 64 3a 25 64 0a 00 55 73 65 72 20 49 6e 74 65     %d:%d..User Inte
1000aa20:	72 66 61 63 65 00 00 00 50 6c 65 61 73 65 20 73     rface...Please s
1000aa30:	65 6c 65 63 74 20 74 68 65 20 75 73 65 72 20 69     elect the user i
1000aa40:	6e 74 65 72 66 61 63 65 20 79 6f 75 20 77 61 6e     nterface you wan
1000aa50:	74 20 42 61 6e 61 6e 61 00 00 00 00 74 6f 20 62     t Banana....to b
1000aa60:	6f 6f 74 20 69 6e 74 6f 20 62 79 20 64 65 66 61     oot into by defa
1000aa70:	75 6c 74 20 77 68 65 6e 20 79 6f 75 20 73 74 61     ult when you sta
1000aa80:	72 74 20 74 68 65 20 63 6f 6d 70 75 74 65 72 2e     rt the computer.
1000aa90:	00 49 6e 76 61 6c 69 64 20 50 72 6f 64 75 63 74     .Invalid Product
1000aaa0:	20 4b 65 79 00 00 00 00 59 6f 75 20 64 6f 20 6e      Key....You do n
1000aab0:	6f 74 20 68 61 76 65 20 61 20 76 61 6c 69 64 20     ot have a valid 
1000aac0:	70 72 6f 64 75 63 74 20 6b 65 79 2e 0a 00 00 00     product key.....
1000aad0:	59 6f 75 20 6e 65 65 64 20 61 20 76 61 6c 69 64     You need a valid
1000aae0:	20 70 72 6f 64 75 63 74 20 6b 65 79 20 69 6e 20      product key in 
1000aaf0:	6f 72 64 65 72 20 74 6f 00 75 73 65 20 42 61 6e     order to.use Ban
1000ab00:	61 6e 61 2e 00 00 00 00 50 72 65 73 73 20 45 4e     ana.....Press EN
1000ab10:	54 45 52 20 74 6f 20 72 65 2d 65 6e 74 65 72 20     TER to re-enter 
1000ab20:	79 6f 75 72 20 70 72 6f 64 75 63 74 20 6b 65 79     your product key
1000ab30:	2e 00 50 72 6f 64 75 63 74 20 4b 65 79 00 00 00     ..Product Key...
1000ab40:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 79 6f 75     Please enter you
1000ab50:	72 20 70 72 6f 64 75 63 74 20 6b 65 79 20 62 65     r product key be
1000ab60:	6c 6f 77 2c 00 00 00 00 54 68 65 20 65 6e 74 65     low,....The ente
1000ab70:	72 65 64 20 70 72 6f 64 75 63 74 20 6b 65 79 20     red product key 
1000ab80:	77 61 73 20 69 6e 76 61 6c 69 64 2e 00 00 00 00     was invalid.....
1000ab90:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 20 74 6f     Press any key to
1000aba0:	20 63 6f 6e 74 69 6e 75 65 20 61 6e 64 20 74 68      continue and th
1000abb0:	65 6e 00 00 65 6e 74 65 72 20 74 68 65 20 70 72     en..enter the pr
1000abc0:	6f 64 75 63 74 20 6b 65 79 20 63 6f 72 72 65 63     oduct key correc
1000abd0:	74 6c 79 2e 00 46 69 6e 61 6c 69 73 69 6e 67 20     tly..Finalising 
1000abe0:	49 6e 73 74 61 6c 6c 61 74 69 6f 6e 00 00 00 00     Installation....
1000abf0:	53 59 53 54 45 4d 2e 44 4c 4c 20 54 4f 44 4f 3a     SYSTEM.DLL TODO:
1000ac00:	20 72 65 67 69 73 74 72 79 20 72 65 61 64 0a 00      registry read..
1000ac10:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000ac20:	72 79 2f 53 79 73 74 65 6d 00 43 3a 2f 42 61 6e     ry/System.C:/Ban
1000ac30:	61 6e 61 2f 52 65 67 69 73 74 72 79 2f 55 73 65     ana/Registry/Use
1000ac40:	72 00 00 00 43 3a 2f 42 61 6e 61 6e 61 2f 52 65     r...C:/Banana/Re
1000ac50:	67 69 73 74 72 79 2f 44 65 66 61 75 6c 74 53 79     gistry/DefaultSy
1000ac60:	73 74 65 6d 00 00 00 00 20 42 6f 6f 74 20 74 6f     stem.... Boot to
1000ac70:	20 63 6f 6d 6d 61 6e 64 20 6c 69 6e 65 20 20 20      command line   
1000ac80:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
1000ac90:	20 42 6f 6f 74 20 74 6f 20 67 72 61 70 68 69 63      Boot to graphic
1000aca0:	61 6c 20 69 6e 74 65 72 66 61 63 65 20 28 56 47     al interface (VG
1000acb0:	41 29 20 20 00 00 00 00 20 42 6f 6f 74 20 74 6f     A)  .... Boot to
1000acc0:	20 67 72 61 70 68 69 63 61 6c 20 69 6e 74 65 72      graphical inter
1000acd0:	66 61 63 65 20 28 56 45 53 41 29 20 00 00 00 00     face (VESA) ....
1000ace0:	68 ac 00 10 90 ac 00 10 b8 ac 00 10 4c 6f 61 64     h...........Load	1000ace0: R_386_32	.text
	1000ace4: R_386_32	.text
	1000ace8: R_386_32	.text
1000acf0:	69 6e 67 20 65 78 74 65 6e 73 69 6f 6e 73 2e 2e     ing extensions..
1000ad00:	2e 00 0a 0a 3a 0a 00 2f 25 73 0a 00 43 3a 2f 42     ....:../%s..C:/B
1000ad10:	61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 73 65 74     anana/System/set
1000ad20:	75 70 69 73 64 2e 6f 6e 65 00 53 59 53 49 4e 49     upisd.one.SYSINI
1000ad30:	54 20 46 41 49 4c 55 52 45 00 43 3a 2f 42 61 6e     T FAILURE.C:/Ban
1000ad40:	61 6e 61 2f 53 79 73 74 65 6d 2f 63 6f 6d 6d 61     ana/System/comma
1000ad50:	6e 64 2e 65 78 65 00 43 3a 2f 44 45 2e 42 55 47     nd.exe.C:/DE.BUG
1000ad60:	00 00 00 00 43 3a 2f 42 61 6e 61 6e 61 2f 52 65     ....C:/Banana/Re
1000ad70:	67 69 73 74 72 79 2f 53 79 73 74 65 6d 2f 53 59     gistry/System/SY
1000ad80:	53 54 45 4d 2e 52 45 47 00 42 41 4e 41 4e 41 00     STEM.REG.BANANA.
1000ad90:	72 65 67 73 61 66 65 6e 61 6d 65 20 3d 20 25 73     regsafename = %s
1000ada0:	0a 00 42 41 4e 41 4e 41 2f 55 53 45 52 53 2f 00     ..BANANA/USERS/.
1000adb0:	75 73 65 72 42 61 73 65 50 61 74 68 20 3d 20 25     userBasePath = %
1000adc0:	73 0a 00 53 45 54 55 50 00 42 4f 4f 54 00 54 49     s..SETUP.BOOT.TI
1000add0:	4d 45 00 55 53 45 52 53 00 46 49 4c 45 41 53 53     ME.USERS.FILEASS
1000ade0:	4f 43 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53     OC.BANANA/FILEAS
1000adf0:	53 4f 43 00 4f 50 45 4e 00 45 44 49 54 00 50 52     SOC.OPEN.EDIT.PR
1000ae00:	49 4e 54 00 49 43 4f 4e 00 44 45 53 43 52 00 43     INT.ICON.DESCR.C
1000ae10:	55 53 54 4f 4d 56 45 52 42 00 43 55 53 54 4f 4d     USTOMVERB.CUSTOM
1000ae20:	50 52 4f 47 00 42 41 4e 41 4e 41 2f 54 49 4d 45     PROG.BANANA/TIME
1000ae30:	00 54 49 4d 45 5a 4f 4e 45 00 42 41 4e 41 4e 41     .TIMEZONE.BANANA
1000ae40:	2f 53 45 54 55 50 00 4e 41 4d 45 00 43 4f 4d 50     /SETUP.NAME.COMP
1000ae50:	41 4e 59 00 50 52 4f 44 55 43 54 4b 45 59 00 42     ANY.PRODUCTKEY.B
1000ae60:	41 4e 41 4e 41 2f 55 53 45 52 53 00 53 41 4c 54     ANANA/USERS.SALT
1000ae70:	00 50 41 53 53 57 4f 52 44 00 44 49 53 50 4c 41     .PASSWORD.DISPLA
1000ae80:	59 4e 41 4d 45 00 44 45 53 4b 54 4f 50 00 44 4f     YNAME.DESKTOP.DO
1000ae90:	43 55 4d 45 4e 54 53 00 44 4f 57 4e 4c 4f 41 44     CUMENTS.DOWNLOAD
1000aea0:	53 00 50 49 43 54 55 52 45 53 00 4d 4f 56 49 45     S.PICTURES.MOVIE
1000aeb0:	53 00 4d 55 53 49 43 00 52 45 43 59 43 4c 45 42     S.MUSIC.RECYCLEB
1000aec0:	49 4e 00 42 41 4e 41 4e 41 2f 42 4f 4f 54 00 41     IN.BANANA/BOOT.A
1000aed0:	55 54 4f 47 55 49 00 54 49 4d 45 5a 4f 4e 45 49     UTOGUI.TIMEZONEI
1000aee0:	44 00 42 41 4e 41 4e 41 2f 54 49 4d 45 2f 54 49     D.BANANA/TIME/TI
1000aef0:	4d 45 5a 4f 4e 45 00 42 41 4e 41 4e 41 2f 53 45     MEZONE.BANANA/SE
1000af00:	54 55 50 2f 4e 41 4d 45 00 42 41 4e 41 4e 41 2f     TUP/NAME.BANANA/
1000af10:	53 45 54 55 50 2f 43 4f 4d 50 41 4e 59 00 42 41     SETUP/COMPANY.BA
1000af20:	4e 41 4e 41 2f 53 45 54 55 50 2f 50 52 4f 44 55     NANA/SETUP/PRODU
1000af30:	43 54 4b 45 59 00 42 41 4e 41 4e 41 2f 46 49 4c     CTKEY.BANANA/FIL
1000af40:	45 41 53 53 4f 43 2f 49 43 4f 4e 00 54 58 54 00     EASSOC/ICON.TXT.
1000af50:	42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43     BANANA/FILEASSOC
1000af60:	2f 44 45 53 43 52 00 42 41 4e 41 4e 41 2f 46 49     /DESCR.BANANA/FI
1000af70:	4c 45 41 53 53 4f 43 2f 4f 50 45 4e 00 42 41 4e     LEASSOC/OPEN.BAN
1000af80:	41 4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f 45 44     ANA/FILEASSOC/ED
1000af90:	49 54 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53     IT.BANANA/FILEAS
1000afa0:	53 4f 43 2f 50 52 49 4e 54 00 42 41 4e 41 4e 41     SOC/PRINT.BANANA
1000afb0:	2f 46 49 4c 45 41 53 53 4f 43 2f 49 43 4f 4e 2f     /FILEASSOC/ICON/
1000afc0:	54 58 54 00 43 3a 2f 42 61 6e 61 6e 61 2f 49 63     TXT.C:/Banana/Ic
1000afd0:	6f 6e 73 2f 63 6f 6c 6f 75 72 2f 74 65 78 74 2e     ons/colour/text.
1000afe0:	74 67 61 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41     tga.BANANA/FILEA
1000aff0:	53 53 4f 43 2f 44 45 53 43 52 2f 54 58 54 00 54     SSOC/DESCR/TXT.T
1000b000:	65 78 74 20 44 6f 63 75 6d 65 6e 74 00 42 41 4e     ext Document.BAN
1000b010:	41 4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f 4f 50     ANA/FILEASSOC/OP
1000b020:	45 4e 2f 54 58 54 00 43 3a 2f 42 61 6e 61 6e 61     EN/TXT.C:/Banana
1000b030:	2f 53 79 73 74 65 6d 2f 74 65 2e 65 78 65 00 42     /System/te.exe.B
1000b040:	41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f     ANANA/FILEASSOC/
1000b050:	45 44 49 54 2f 54 58 54 00 42 41 4e 41 4e 41 2f     EDIT/TXT.BANANA/
1000b060:	46 49 4c 45 41 53 53 4f 43 2f 50 52 49 4e 54 2f     FILEASSOC/PRINT/
1000b070:	54 58 54 00 49 53 4f 00 42 41 4e 41 4e 41 2f 46     TXT.ISO.BANANA/F
1000b080:	49 4c 45 41 53 53 4f 43 2f 49 43 4f 4e 2f 49 53     ILEASSOC/ICON/IS
1000b090:	4f 00 43 3a 2f 42 61 6e 61 6e 61 2f 49 63 6f 6e     O.C:/Banana/Icon
1000b0a0:	73 2f 63 6f 6c 6f 75 72 2f 63 64 2e 74 67 61 00     s/colour/cd.tga.
1000b0b0:	42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43     BANANA/FILEASSOC
1000b0c0:	2f 44 45 53 43 52 2f 49 53 4f 00 44 69 73 63 20     /DESCR/ISO.Disc 
1000b0d0:	49 6d 61 67 65 20 46 69 6c 65 00 2f 50 41 53 53     Image File./PASS
1000b0e0:	57 4f 52 44 00 2f 53 41 4c 54 00 2f 44 49 53 50     WORD./SALT./DISP
1000b0f0:	4c 41 59 4e 41 4d 45 00 2f 44 45 53 4b 54 4f 50     LAYNAME./DESKTOP
1000b100:	00 2f 44 4f 43 55 4d 45 4e 54 53 00 2f 44 4f 57     ./DOCUMENTS./DOW
1000b110:	4e 4c 4f 41 44 53 00 2f 50 49 43 54 55 52 45 53     NLOADS./PICTURES
1000b120:	00 2f 4d 4f 56 49 45 53 00 2f 4d 55 53 49 43 00     ./MOVIES./MUSIC.
1000b130:	2f 52 45 43 59 43 4c 45 42 49 4e 00 54 4f 44 4f     /RECYCLEBIN.TODO
1000b140:	3a 20 64 65 74 65 63 74 20 6e 6f 72 6d 61 6c 20     : detect normal 
1000b150:	6b 65 72 6e 65 6c 20 76 73 20 4b 52 4e 4c 50 32     kernel vs KRNLP2
1000b160:	0a 00 00 00 54 68 65 20 69 6e 73 74 61 6c 6c 61     ....The installa
1000b170:	74 69 6f 6e 20 68 61 73 20 62 65 65 6e 20 63 6f     tion has been co
1000b180:	6d 70 6c 65 74 65 64 2e 0a 00 00 00 50 6c 65 61     mpleted.....Plea
1000b190:	73 65 20 70 72 65 73 73 20 45 4e 54 45 52 20 74     se press ENTER t
1000b1a0:	6f 20 72 65 73 74 61 72 74 20 79 6f 75 72 20 63     o restart your c
1000b1b0:	6f 6d 70 75 74 65 72 00 61 6e 64 20 73 74 61 72     omputer.and star
1000b1c0:	74 20 42 61 6e 61 6e 61 2e 00 42 41 4e 41 4e 41     t Banana..BANANA
1000b1d0:	2f 42 4f 4f 54 2f 41 55 54 4f 47 55 49 00 50 72     /BOOT/AUTOGUI.Pr
1000b1e0:	6f 64 75 63 74 20 4b 65 79 20 55 70 64 61 74 65     oduct Key Update
1000b1f0:	64 00 00 00 59 6f 75 72 20 70 72 6f 64 75 63 74     d...Your product
1000b200:	20 6b 65 79 20 68 61 73 20 62 65 65 6e 20 75 70      key has been up
1000b210:	64 61 74 65 64 2e 0a 00 20 43 72 65 61 74 65 20     dated... Create 
1000b220:	6e 65 77 20 75 73 65 72 2e 2e 2e 20 20 20 20 20     new user...     
1000b230:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000b240:	20 20 20 20 20 20 20 20 20 20 00 4c 6f 67 69 6e               .Login
1000b250:	00 00 00 00 50 6c 65 61 73 65 20 73 65 6c 65 63     ....Please selec
1000b260:	74 20 79 6f 75 72 20 75 73 65 72 6e 61 6d 65 20     t your username 
1000b270:	61 6e 64 20 70 72 65 73 73 20 45 4e 54 45 52 2e     and press ENTER.
1000b280:	00 00 00 00 50 6c 65 61 73 65 20 74 79 70 65 20     ....Please type 
1000b290:	79 6f 75 72 20 70 61 73 73 77 6f 72 64 20 61 6e     your password an
1000b2a0:	64 20 70 72 65 73 73 20 45 4e 54 45 52 00 6f 72     d press ENTER.or
1000b2b0:	20 70 72 65 73 73 20 45 53 43 20 74 6f 20 67 6f      press ESC to go
1000b2c0:	20 62 61 63 6b 2e 00 00 52 45 51 55 49 52 45 44      back...REQUIRED
1000b2d0:	3a 20 25 73 0a 47 4f 54 3a 20 25 73 0a 53 41 4c     : %s.GOT: %s.SAL
1000b2e0:	54 3a 20 25 73 0a 00 00 49 74 20 69 73 20 73 61     T: %s...It is sa
1000b2f0:	66 65 20 74 6f 20 74 75 72 6e 20 6f 66 66 20 79     fe to turn off y
1000b300:	6f 75 72 20 50 43 00 63 61 6c 6c 00 43 3a 2f 42     our PC.call.C:/B
1000b310:	61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 69 6e 69     anana/System/ini
1000b320:	74 2e 62 61 74 00 00 00 3a ad 00 10 07 b3 00 10     t.bat...:.......	1000b328: R_386_32	.text
	1000b32c: R_386_32	.text
1000b330:	0c b3 00 10 00 00 00 00                             ........	1000b330: R_386_32	.text
