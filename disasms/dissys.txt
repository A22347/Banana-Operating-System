
packages/system/32/0001/system.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <beginx(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <beginx(void*)+0xd>	1000000d: R_386_PC32	begin(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <memcmp(void*, void*, unsigned long)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 10             	sub    esp,0x10
1000001d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000020:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000026:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000029:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000002c:	8d 50 ff             	lea    edx,[eax-0x1]
1000002f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000032:	85 c0                	test   eax,eax
10000034:	74 12                	je     10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000036:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000039:	8a 10                	mov    dl,BYTE PTR [eax]
1000003b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000003e:	8a 00                	mov    al,BYTE PTR [eax]
10000040:	38 c2                	cmp    dl,al
10000042:	75 04                	jne    10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000044:	b0 01                	mov    al,0x1
10000046:	eb 02                	jmp    1000004a <memcmp(void*, void*, unsigned long)+0x33>
10000048:	b0 00                	mov    al,0x0
1000004a:	84 c0                	test   al,al
1000004c:	74 08                	je     10000056 <memcmp(void*, void*, unsigned long)+0x3f>
1000004e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000051:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
10000054:	eb d3                	jmp    10000029 <memcmp(void*, void*, unsigned long)+0x12>
10000056:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000059:	8a 00                	mov    al,BYTE PTR [eax]
1000005b:	0f b6 d0             	movzx  edx,al
1000005e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000061:	8a 00                	mov    al,BYTE PTR [eax]
10000063:	0f b6 c0             	movzx  eax,al
10000066:	29 c2                	sub    edx,eax
10000068:	89 d0                	mov    eax,edx
1000006a:	c9                   	leave  
1000006b:	c3                   	ret    

1000006c <memmove>:
1000006c:	55                   	push   ebp
1000006d:	89 e5                	mov    ebp,esp
1000006f:	83 ec 10             	sub    esp,0x10
10000072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000075:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000007b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000007e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000081:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
10000084:	76 1b                	jbe    100000a1 <memmove+0x35>
10000086:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
1000008a:	74 46                	je     100000d2 <memmove+0x66>
1000008c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000008f:	8a 10                	mov    dl,BYTE PTR [eax]
10000091:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000094:	88 10                	mov    BYTE PTR [eax],dl
10000096:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000099:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
1000009c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000009f:	eb e5                	jmp    10000086 <memmove+0x1a>
100000a1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000a4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
100000a7:	73 29                	jae    100000d2 <memmove+0x66>
100000a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000ac:	48                   	dec    eax
100000ad:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
100000b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000b3:	48                   	dec    eax
100000b4:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
100000b7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000bb:	74 15                	je     100000d2 <memmove+0x66>
100000bd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000c0:	8a 10                	mov    dl,BYTE PTR [eax]
100000c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000c5:	88 10                	mov    BYTE PTR [eax],dl
100000c7:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100000ca:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
100000cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000d0:	eb e5                	jmp    100000b7 <memmove+0x4b>
100000d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d5:	c9                   	leave  
100000d6:	c3                   	ret    

100000d7 <memset>:
100000d7:	55                   	push   ebp
100000d8:	89 e5                	mov    ebp,esp
100000da:	83 ec 10             	sub    esp,0x10
100000dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100000e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000e7:	74 12                	je     100000fb <memset+0x24>
100000e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100000ec:	88 c2                	mov    dl,al
100000ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000f1:	88 10                	mov    BYTE PTR [eax],dl
100000f3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100000f6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000f9:	eb e8                	jmp    100000e3 <memset+0xc>
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	c9                   	leave  
100000ff:	c3                   	ret    

10000100 <strlen>:
10000100:	55                   	push   ebp
10000101:	89 e5                	mov    ebp,esp
10000103:	83 ec 10             	sub    esp,0x10
10000106:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000110:	8a 00                	mov    al,BYTE PTR [eax]
10000112:	84 c0                	test   al,al
10000114:	74 0c                	je     10000122 <strlen+0x22>
10000116:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000119:	40                   	inc    eax
1000011a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000011d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
10000120:	eb eb                	jmp    1000010d <strlen+0xd>
10000122:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000125:	c9                   	leave  
10000126:	c3                   	ret    

10000127 <strpbrk(char const*, char const*)>:
10000127:	55                   	push   ebp
10000128:	89 e5                	mov    ebp,esp
1000012a:	83 ec 10             	sub    esp,0x10
1000012d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000130:	8a 00                	mov    al,BYTE PTR [eax]
10000132:	84 c0                	test   al,al
10000134:	74 30                	je     10000166 <strpbrk(char const*, char const*)+0x3f>
10000136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000139:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000013c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000013f:	8a 00                	mov    al,BYTE PTR [eax]
10000141:	84 c0                	test   al,al
10000143:	74 18                	je     1000015d <strpbrk(char const*, char const*)+0x36>
10000145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000148:	8a 10                	mov    dl,BYTE PTR [eax]
1000014a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000014d:	8a 00                	mov    al,BYTE PTR [eax]
1000014f:	38 c2                	cmp    dl,al
10000151:	75 05                	jne    10000158 <strpbrk(char const*, char const*)+0x31>
10000153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000156:	eb 13                	jmp    1000016b <strpbrk(char const*, char const*)+0x44>
10000158:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
1000015b:	eb df                	jmp    1000013c <strpbrk(char const*, char const*)+0x15>
1000015d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000160:	40                   	inc    eax
10000161:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000164:	eb c7                	jmp    1000012d <strpbrk(char const*, char const*)+0x6>
10000166:	b8 00 00 00 00       	mov    eax,0x0
1000016b:	c9                   	leave  
1000016c:	c3                   	ret    

1000016d <strtok>:
1000016d:	55                   	push   ebp
1000016e:	89 e5                	mov    ebp,esp
10000170:	83 ec 10             	sub    esp,0x10
10000173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000176:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000179:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000017c:	85 c0                	test   eax,eax
1000017e:	75 18                	jne    10000198 <strtok+0x2b>
10000180:	a1 00 00 00 00       	mov    eax,ds:0x0	10000181: R_386_32	SavedPtr
10000185:	85 c0                	test   eax,eax
10000187:	75 07                	jne    10000190 <strtok+0x23>
10000189:	b8 00 00 00 00       	mov    eax,0x0
1000018e:	eb 6f                	jmp    100001ff <strtok+0x92>
10000190:	a1 00 00 00 00       	mov    eax,ds:0x0	10000191: R_386_32	SavedPtr
10000195:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000198:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000019b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000019e:	50                   	push   eax
1000019f:	e8 fc ff ff ff       	call   100001a0 <strtok+0x33>	100001a0: R_386_PC32	strpbrk(char const*, char const*)
100001a4:	83 c4 08             	add    esp,0x8
100001a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100001a8: R_386_32	SavedPtr
100001ac:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001ae: R_386_32	SavedPtr
100001b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001b5:	39 c2                	cmp    edx,eax
100001b7:	75 22                	jne    100001db <strtok+0x6e>
100001b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001bc:	8d 50 01             	lea    edx,[eax+0x1]
100001bf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100001c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100001cb:	50                   	push   eax
100001cc:	e8 fc ff ff ff       	call   100001cd <strtok+0x60>	100001cd: R_386_PC32	strpbrk(char const*, char const*)
100001d1:	83 c4 08             	add    esp,0x8
100001d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100001d5: R_386_32	SavedPtr
100001d9:	eb d1                	jmp    100001ac <strtok+0x3f>
100001db:	a1 00 00 00 00       	mov    eax,ds:0x0	100001dc: R_386_32	SavedPtr
100001e0:	85 c0                	test   eax,eax
100001e2:	74 16                	je     100001fa <strtok+0x8d>
100001e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e5: R_386_32	SavedPtr
100001e9:	8d 50 01             	lea    edx,[eax+0x1]
100001ec:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100001ee: R_386_32	SavedPtr
100001f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001f8:	eb 05                	jmp    100001ff <strtok+0x92>
100001fa:	b8 00 00 00 00       	mov    eax,0x0
100001ff:	c9                   	leave  
10000200:	c3                   	ret    

10000201 <strcpy>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	83 ec 10             	sub    esp,0x10
10000207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000020a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000020d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000210:	8a 00                	mov    al,BYTE PTR [eax]
10000212:	84 c0                	test   al,al
10000214:	74 12                	je     10000228 <strcpy+0x27>
10000216:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000219:	8a 10                	mov    dl,BYTE PTR [eax]
1000021b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000021e:	88 10                	mov    BYTE PTR [eax],dl
10000220:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000223:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10000226:	eb e5                	jmp    1000020d <strcpy+0xc>
10000228:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000022b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000022e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000231:	c9                   	leave  
10000232:	c3                   	ret    

10000233 <strncpyxx(char*, char const*, unsigned long)>:
10000233:	55                   	push   ebp
10000234:	89 e5                	mov    ebp,esp
10000236:	83 ec 10             	sub    esp,0x10
10000239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000242:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000245:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000249:	74 23                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000024b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000024e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000251:	8d 42 01             	lea    eax,[edx+0x1]
10000254:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000025a:	8d 48 01             	lea    ecx,[eax+0x1]
1000025d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
10000260:	8a 12                	mov    dl,BYTE PTR [edx]
10000262:	88 10                	mov    BYTE PTR [eax],dl
10000264:	8a 00                	mov    al,BYTE PTR [eax]
10000266:	84 c0                	test   al,al
10000268:	74 04                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000026a:	b0 01                	mov    al,0x1
1000026c:	eb 02                	jmp    10000270 <strncpyxx(char*, char const*, unsigned long)+0x3d>
1000026e:	b0 00                	mov    al,0x0
10000270:	84 c0                	test   al,al
10000272:	74 02                	je     10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000274:	eb cf                	jmp    10000245 <strncpyxx(char*, char const*, unsigned long)+0x12>
10000276:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000279:	8d 50 ff             	lea    edx,[eax-0x1]
1000027c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
1000027f:	85 c0                	test   eax,eax
10000281:	0f 95 c0             	setne  al
10000284:	84 c0                	test   al,al
10000286:	74 0b                	je     10000293 <strncpyxx(char*, char const*, unsigned long)+0x60>
10000288:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000028b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000028e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000291:	eb e3                	jmp    10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000296:	c9                   	leave  
10000297:	c3                   	ret    

10000298 <strcmp>:
10000298:	55                   	push   ebp
10000299:	89 e5                	mov    ebp,esp
1000029b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029e:	8a 10                	mov    dl,BYTE PTR [eax]
100002a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a3:	8a 00                	mov    al,BYTE PTR [eax]
100002a5:	38 c2                	cmp    dl,al
100002a7:	75 20                	jne    100002c9 <strcmp+0x31>
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	8d 50 01             	lea    edx,[eax+0x1]
100002af:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
100002b2:	8a 00                	mov    al,BYTE PTR [eax]
100002b4:	84 c0                	test   al,al
100002b6:	0f 94 c0             	sete   al
100002b9:	84 c0                	test   al,al
100002bb:	74 07                	je     100002c4 <strcmp+0x2c>
100002bd:	b8 00 00 00 00       	mov    eax,0x0
100002c2:	eb 19                	jmp    100002dd <strcmp+0x45>
100002c4:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100002c7:	eb d2                	jmp    1000029b <strcmp+0x3>
100002c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002cc:	8a 00                	mov    al,BYTE PTR [eax]
100002ce:	0f b6 d0             	movzx  edx,al
100002d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002d4:	8a 00                	mov    al,BYTE PTR [eax]
100002d6:	0f b6 c0             	movzx  eax,al
100002d9:	29 c2                	sub    edx,eax
100002db:	89 d0                	mov    eax,edx
100002dd:	5d                   	pop    ebp
100002de:	c3                   	ret    

100002df <strchr(char const*, int)>:
100002df:	55                   	push   ebp
100002e0:	89 e5                	mov    ebp,esp
100002e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e5:	8a 00                	mov    al,BYTE PTR [eax]
100002e7:	84 c0                	test   al,al
100002e9:	74 16                	je     10000301 <strchr(char const*, int)+0x22>
100002eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ee:	8a 00                	mov    al,BYTE PTR [eax]
100002f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002f3:	38 d0                	cmp    al,dl
100002f5:	75 05                	jne    100002fc <strchr(char const*, int)+0x1d>
100002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fa:	eb 0a                	jmp    10000306 <strchr(char const*, int)+0x27>
100002fc:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
100002ff:	eb e1                	jmp    100002e2 <strchr(char const*, int)+0x3>
10000301:	b8 00 00 00 00       	mov    eax,0x0
10000306:	5d                   	pop    ebp
10000307:	c3                   	ret    

10000308 <strncmp>:
10000308:	55                   	push   ebp
10000309:	89 e5                	mov    ebp,esp
1000030b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000030e:	8d 50 ff             	lea    edx,[eax-0x1]
10000311:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000314:	85 c0                	test   eax,eax
10000316:	74 12                	je     1000032a <strncmp+0x22>
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	8a 10                	mov    dl,BYTE PTR [eax]
1000031d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000320:	8a 00                	mov    al,BYTE PTR [eax]
10000322:	38 c2                	cmp    dl,al
10000324:	75 04                	jne    1000032a <strncmp+0x22>
10000326:	b0 01                	mov    al,0x1
10000328:	eb 02                	jmp    1000032c <strncmp+0x24>
1000032a:	b0 00                	mov    al,0x0
1000032c:	84 c0                	test   al,al
1000032e:	74 20                	je     10000350 <strncmp+0x48>
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8d 50 01             	lea    edx,[eax+0x1]
10000336:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
10000339:	8a 00                	mov    al,BYTE PTR [eax]
1000033b:	84 c0                	test   al,al
1000033d:	0f 94 c0             	sete   al
10000340:	84 c0                	test   al,al
10000342:	74 07                	je     1000034b <strncmp+0x43>
10000344:	b8 00 00 00 00       	mov    eax,0x0
10000349:	eb 19                	jmp    10000364 <strncmp+0x5c>
1000034b:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000034e:	eb bb                	jmp    1000030b <strncmp+0x3>
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8a 00                	mov    al,BYTE PTR [eax]
10000355:	0f b6 d0             	movzx  edx,al
10000358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000035b:	8a 00                	mov    al,BYTE PTR [eax]
1000035d:	0f b6 c0             	movzx  eax,al
10000360:	29 c2                	sub    edx,eax
10000362:	89 d0                	mov    eax,edx
10000364:	5d                   	pop    ebp
10000365:	c3                   	ret    

10000366 <strcat>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 10             	sub    esp,0x10
1000036c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000372:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000375:	8d 50 01             	lea    edx,[eax+0x1]
10000378:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000037b:	8a 00                	mov    al,BYTE PTR [eax]
1000037d:	84 c0                	test   al,al
1000037f:	0f 95 c0             	setne  al
10000382:	84 c0                	test   al,al
10000384:	74 02                	je     10000388 <strcat+0x22>
10000386:	eb ea                	jmp    10000372 <strcat+0xc>
10000388:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
1000038b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000038e:	8d 42 01             	lea    eax,[edx+0x1]
10000391:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000394:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000397:	8d 48 01             	lea    ecx,[eax+0x1]
1000039a:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
1000039d:	8a 12                	mov    dl,BYTE PTR [edx]
1000039f:	88 10                	mov    BYTE PTR [eax],dl
100003a1:	8a 00                	mov    al,BYTE PTR [eax]
100003a3:	84 c0                	test   al,al
100003a5:	0f 95 c0             	setne  al
100003a8:	84 c0                	test   al,al
100003aa:	74 02                	je     100003ae <strcat+0x48>
100003ac:	eb dd                	jmp    1000038b <strcat+0x25>
100003ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b1:	c9                   	leave  
100003b2:	c3                   	ret    

100003b3 <strncat(char*, char const*, unsigned long)>:
100003b3:	55                   	push   ebp
100003b4:	89 e5                	mov    ebp,esp
100003b6:	83 ec 10             	sub    esp,0x10
100003b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100003bd:	74 5c                	je     1000041b <strncat(char*, char const*, unsigned long)+0x68>
100003bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003c8:	8d 50 01             	lea    edx,[eax+0x1]
100003cb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100003ce:	8a 00                	mov    al,BYTE PTR [eax]
100003d0:	84 c0                	test   al,al
100003d2:	0f 95 c0             	setne  al
100003d5:	84 c0                	test   al,al
100003d7:	74 02                	je     100003db <strncat(char*, char const*, unsigned long)+0x28>
100003d9:	eb ea                	jmp    100003c5 <strncat(char*, char const*, unsigned long)+0x12>
100003db:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100003de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e1:	8d 42 01             	lea    eax,[edx+0x1]
100003e4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100003e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003ea:	8d 48 01             	lea    ecx,[eax+0x1]
100003ed:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
100003f0:	8a 12                	mov    dl,BYTE PTR [edx]
100003f2:	88 10                	mov    BYTE PTR [eax],dl
100003f4:	8a 00                	mov    al,BYTE PTR [eax]
100003f6:	84 c0                	test   al,al
100003f8:	74 0d                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
100003fa:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100003fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000401:	74 04                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
10000403:	b0 01                	mov    al,0x1
10000405:	eb 02                	jmp    10000409 <strncat(char*, char const*, unsigned long)+0x56>
10000407:	b0 00                	mov    al,0x0
10000409:	84 c0                	test   al,al
1000040b:	74 02                	je     1000040f <strncat(char*, char const*, unsigned long)+0x5c>
1000040d:	eb cf                	jmp    100003de <strncat(char*, char const*, unsigned long)+0x2b>
1000040f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000413:	75 06                	jne    1000041b <strncat(char*, char const*, unsigned long)+0x68>
10000415:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000418:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000041b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041e:	c9                   	leave  
1000041f:	c3                   	ret    

10000420 <strstr(char*, char*)>:
10000420:	55                   	push   ebp
10000421:	89 e5                	mov    ebp,esp
10000423:	83 ec 10             	sub    esp,0x10
10000426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000429:	e8 fc ff ff ff       	call   1000042a <strstr(char*, char*)+0xa>	1000042a: R_386_PC32	strlen
1000042e:	83 c4 04             	add    esp,0x4
10000431:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000434:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
10000438:	75 05                	jne    1000043f <strstr(char*, char*)+0x1f>
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	eb 3f                	jmp    1000047e <strstr(char*, char*)+0x5e>
1000043f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000442:	50                   	push   eax
10000443:	e8 fc ff ff ff       	call   10000444 <strstr(char*, char*)+0x24>	10000444: R_386_PC32	strlen
10000448:	83 c4 04             	add    esp,0x4
1000044b:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
1000044e:	77 29                	ja     10000479 <strstr(char*, char*)+0x59>
10000450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000453:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
10000456:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000459:	50                   	push   eax
1000045a:	e8 fc ff ff ff       	call   1000045b <strstr(char*, char*)+0x3b>	1000045b: R_386_PC32	memcmp(void*, void*, unsigned long)
1000045f:	83 c4 0c             	add    esp,0xc
10000462:	85 c0                	test   eax,eax
10000464:	0f 94 c0             	sete   al
10000467:	84 c0                	test   al,al
10000469:	74 05                	je     10000470 <strstr(char*, char*)+0x50>
1000046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000046e:	eb 0e                	jmp    1000047e <strstr(char*, char*)+0x5e>
10000470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000473:	40                   	inc    eax
10000474:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000477:	eb c6                	jmp    1000043f <strstr(char*, char*)+0x1f>
10000479:	b8 00 00 00 00       	mov    eax,0x0
1000047e:	c9                   	leave  
1000047f:	c3                   	ret    

10000480 <rmtree(char*)>:
10000480:	55                   	push   ebp
10000481:	89 e5                	mov    ebp,esp
10000483:	53                   	push   ebx
10000484:	81 ec 64 02 00 00    	sub    esp,0x264
1000048a:	68 2c 01 00 00       	push   0x12c
1000048f:	6a 00                	push   0x0
10000491:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000497:	50                   	push   eax
10000498:	e8 fc ff ff ff       	call   10000499 <rmtree(char*)+0x19>	10000499: R_386_PC32	memset
1000049d:	83 c4 0c             	add    esp,0xc
100004a0:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
100004a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100004a9:	83 ec 0c             	sub    esp,0xc
100004ac:	68 14 01 00 00       	push   0x114
100004b1:	e8 fc ff ff ff       	call   100004b2 <rmtree(char*)+0x32>	100004b2: R_386_PC32	operator new(unsigned long)
100004b6:	83 c4 10             	add    esp,0x10
100004b9:	89 c3                	mov    ebx,eax
100004bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
100004c0:	8b 00                	mov    eax,DWORD PTR [eax]
100004c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
100004c5:	83 ec 04             	sub    esp,0x4
100004c8:	50                   	push   eax
100004c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004cc:	53                   	push   ebx
100004cd:	e8 fc ff ff ff       	call   100004ce <rmtree(char*)+0x4e>	100004ce: R_386_PC32	Directory::Directory(char const*, Process*)
100004d2:	83 c4 10             	add    esp,0x10
100004d5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
100004d8:	83 ec 0c             	sub    esp,0xc
100004db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004de:	e8 fc ff ff ff       	call   100004df <rmtree(char*)+0x5f>	100004df: R_386_PC32	Directory::open()
100004e3:	83 c4 10             	add    esp,0x10
100004e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004e9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100004ed:	74 24                	je     10000513 <rmtree(char*)+0x93>
100004ef:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004f3:	0f 84 8b 01 00 00    	je     10000684 <rmtree(char*)+0x204>
100004f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004fc:	8b 00                	mov    eax,DWORD PTR [eax]
100004fe:	83 c0 08             	add    eax,0x8
10000501:	8b 00                	mov    eax,DWORD PTR [eax]
10000503:	83 ec 0c             	sub    esp,0xc
10000506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000509:	ff d0                	call   eax
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	e9 72 01 00 00       	jmp    10000685 <rmtree(char*)+0x205>
10000513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000516:	8b 00                	mov    eax,DWORD PTR [eax]
10000518:	83 c0 0c             	add    eax,0xc
1000051b:	8b 00                	mov    eax,DWORD PTR [eax]
1000051d:	83 ec 0c             	sub    esp,0xc
10000520:	8d 95 a4 fd ff ff    	lea    edx,[ebp-0x25c]
10000526:	52                   	push   edx
10000527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000052a:	6a 00                	push   0x0
1000052c:	68 10 01 00 00       	push   0x110
10000531:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000534:	ff d0                	call   eax
10000536:	83 c4 20             	add    esp,0x20
10000539:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
1000053c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000540:	0f 85 04 01 00 00    	jne    1000064a <rmtree(char*)+0x1ca>
10000546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000549:	83 c0 10             	add    eax,0x10
1000054c:	83 ec 08             	sub    esp,0x8
1000054f:	68 60 b0 00 10       	push   0x1000b060	10000550: R_386_32	.text
10000554:	50                   	push   eax
10000555:	e8 fc ff ff ff       	call   10000556 <rmtree(char*)+0xd6>	10000556: R_386_PC32	strcmp
1000055a:	83 c4 10             	add    esp,0x10
1000055d:	85 c0                	test   eax,eax
1000055f:	74 b2                	je     10000513 <rmtree(char*)+0x93>
10000561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000564:	83 c0 10             	add    eax,0x10
10000567:	83 ec 08             	sub    esp,0x8
1000056a:	68 62 b0 00 10       	push   0x1000b062	1000056b: R_386_32	.text
1000056f:	50                   	push   eax
10000570:	e8 fc ff ff ff       	call   10000571 <rmtree(char*)+0xf1>	10000571: R_386_PC32	strcmp
10000575:	83 c4 10             	add    esp,0x10
10000578:	85 c0                	test   eax,eax
1000057a:	74 97                	je     10000513 <rmtree(char*)+0x93>
1000057c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000057f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000582:	83 e0 02             	and    eax,0x2
10000585:	85 c0                	test   eax,eax
10000587:	74 17                	je     100005a0 <rmtree(char*)+0x120>
10000589:	83 ec 0c             	sub    esp,0xc
1000058c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000592:	50                   	push   eax
10000593:	e8 fc ff ff ff       	call   10000594 <rmtree(char*)+0x114>	10000594: R_386_PC32	rmtree(char*)
10000598:	83 c4 10             	add    esp,0x10
1000059b:	e9 73 ff ff ff       	jmp    10000513 <rmtree(char*)+0x93>
100005a0:	83 ec 08             	sub    esp,0x8
100005a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005a6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005ac:	50                   	push   eax
100005ad:	e8 fc ff ff ff       	call   100005ae <rmtree(char*)+0x12e>	100005ae: R_386_PC32	strcpy
100005b2:	83 c4 10             	add    esp,0x10
100005b5:	83 ec 08             	sub    esp,0x8
100005b8:	68 65 b0 00 10       	push   0x1000b065	100005b9: R_386_32	.text
100005bd:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005c3:	50                   	push   eax
100005c4:	e8 fc ff ff ff       	call   100005c5 <rmtree(char*)+0x145>	100005c5: R_386_PC32	strcat
100005c9:	83 c4 10             	add    esp,0x10
100005cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100005cf:	83 c0 10             	add    eax,0x10
100005d2:	83 ec 08             	sub    esp,0x8
100005d5:	50                   	push   eax
100005d6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005dc:	50                   	push   eax
100005dd:	e8 fc ff ff ff       	call   100005de <rmtree(char*)+0x15e>	100005de: R_386_PC32	strcat
100005e2:	83 c4 10             	add    esp,0x10
100005e5:	83 ec 0c             	sub    esp,0xc
100005e8:	68 14 01 00 00       	push   0x114
100005ed:	e8 fc ff ff ff       	call   100005ee <rmtree(char*)+0x16e>	100005ee: R_386_PC32	operator new(unsigned long)
100005f2:	83 c4 10             	add    esp,0x10
100005f5:	89 c3                	mov    ebx,eax
100005f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
100005fc:	8b 00                	mov    eax,DWORD PTR [eax]
100005fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
10000601:	83 ec 04             	sub    esp,0x4
10000604:	50                   	push   eax
10000605:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
1000060b:	50                   	push   eax
1000060c:	53                   	push   ebx
1000060d:	e8 fc ff ff ff       	call   1000060e <rmtree(char*)+0x18e>	1000060e: R_386_PC32	File::File(char const*, Process*)
10000612:	83 c4 10             	add    esp,0x10
10000615:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000618:	83 ec 0c             	sub    esp,0xc
1000061b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000061e:	e8 fc ff ff ff       	call   1000061f <rmtree(char*)+0x19f>	1000061f: R_386_PC32	File::unlink()
10000623:	83 c4 10             	add    esp,0x10
10000626:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000062a:	0f 84 e3 fe ff ff    	je     10000513 <rmtree(char*)+0x93>
10000630:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000633:	8b 00                	mov    eax,DWORD PTR [eax]
10000635:	83 c0 08             	add    eax,0x8
10000638:	8b 00                	mov    eax,DWORD PTR [eax]
1000063a:	83 ec 0c             	sub    esp,0xc
1000063d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000640:	ff d0                	call   eax
10000642:	83 c4 10             	add    esp,0x10
10000645:	e9 c9 fe ff ff       	jmp    10000513 <rmtree(char*)+0x93>
1000064a:	90                   	nop
1000064b:	83 ec 0c             	sub    esp,0xc
1000064e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000651:	e8 fc ff ff ff       	call   10000652 <rmtree(char*)+0x1d2>	10000652: R_386_PC32	Directory::close()
10000656:	83 c4 10             	add    esp,0x10
10000659:	83 ec 0c             	sub    esp,0xc
1000065c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000065f:	e8 fc ff ff ff       	call   10000660 <rmtree(char*)+0x1e0>	10000660: R_386_PC32	Directory::unlink()
10000664:	83 c4 10             	add    esp,0x10
10000667:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000066b:	74 18                	je     10000685 <rmtree(char*)+0x205>
1000066d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000670:	8b 00                	mov    eax,DWORD PTR [eax]
10000672:	83 c0 08             	add    eax,0x8
10000675:	8b 00                	mov    eax,DWORD PTR [eax]
10000677:	83 ec 0c             	sub    esp,0xc
1000067a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000067d:	ff d0                	call   eax
1000067f:	83 c4 10             	add    esp,0x10
10000682:	eb 01                	jmp    10000685 <rmtree(char*)+0x205>
10000684:	90                   	nop
10000685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000688:	c9                   	leave  
10000689:	c3                   	ret    

1000068a <mkdir(char const*, int)>:
1000068a:	55                   	push   ebp
1000068b:	89 e5                	mov    ebp,esp
1000068d:	53                   	push   ebx
1000068e:	83 ec 14             	sub    esp,0x14
10000691:	83 ec 0c             	sub    esp,0xc
10000694:	68 14 01 00 00       	push   0x114
10000699:	e8 fc ff ff ff       	call   1000069a <mkdir(char const*, int)+0x10>	1000069a: R_386_PC32	operator new(unsigned long)
1000069e:	83 c4 10             	add    esp,0x10
100006a1:	89 c3                	mov    ebx,eax
100006a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100006a4: R_386_32	kernelProcess
100006a8:	83 ec 04             	sub    esp,0x4
100006ab:	50                   	push   eax
100006ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006af:	53                   	push   ebx
100006b0:	e8 fc ff ff ff       	call   100006b1 <mkdir(char const*, int)+0x27>	100006b1: R_386_PC32	Directory::Directory(char const*, Process*)
100006b5:	83 c4 10             	add    esp,0x10
100006b8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100006bb:	83 ec 0c             	sub    esp,0xc
100006be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006c1:	e8 fc ff ff ff       	call   100006c2 <mkdir(char const*, int)+0x38>	100006c2: R_386_PC32	Directory::create()
100006c6:	83 c4 10             	add    esp,0x10
100006c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100006cd:	74 15                	je     100006e4 <mkdir(char const*, int)+0x5a>
100006cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100006d2:	8b 00                	mov    eax,DWORD PTR [eax]
100006d4:	83 c0 08             	add    eax,0x8
100006d7:	8b 00                	mov    eax,DWORD PTR [eax]
100006d9:	83 ec 0c             	sub    esp,0xc
100006dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006df:	ff d0                	call   eax
100006e1:	83 c4 10             	add    esp,0x10
100006e4:	b8 00 00 00 00       	mov    eax,0x0
100006e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100006ec:	c9                   	leave  
100006ed:	c3                   	ret    

100006ee <copytree(char*, char*)>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	53                   	push   ebx
100006f2:	81 ec 54 01 00 00    	sub    esp,0x154
100006f8:	83 ec 0c             	sub    esp,0xc
100006fb:	68 90 01 00 00       	push   0x190
10000700:	e8 fc ff ff ff       	call   10000701 <copytree(char*, char*)+0x13>	10000701: R_386_PC32	malloc
10000705:	83 c4 10             	add    esp,0x10
10000708:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000070b:	83 ec 0c             	sub    esp,0xc
1000070e:	68 90 01 00 00       	push   0x190
10000713:	e8 fc ff ff ff       	call   10000714 <copytree(char*, char*)+0x26>	10000714: R_386_PC32	malloc
10000718:	83 c4 10             	add    esp,0x10
1000071b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000071e:	83 ec 04             	sub    esp,0x4
10000721:	68 90 01 00 00       	push   0x190
10000726:	6a 00                	push   0x0
10000728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000072b:	e8 fc ff ff ff       	call   1000072c <copytree(char*, char*)+0x3e>	1000072c: R_386_PC32	memset
10000730:	83 c4 10             	add    esp,0x10
10000733:	83 ec 04             	sub    esp,0x4
10000736:	68 90 01 00 00       	push   0x190
1000073b:	6a 00                	push   0x0
1000073d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000740:	e8 fc ff ff ff       	call   10000741 <copytree(char*, char*)+0x53>	10000741: R_386_PC32	memset
10000745:	83 c4 10             	add    esp,0x10
10000748:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000074e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000751:	83 ec 0c             	sub    esp,0xc
10000754:	68 14 01 00 00       	push   0x114
10000759:	e8 fc ff ff ff       	call   1000075a <copytree(char*, char*)+0x6c>	1000075a: R_386_PC32	operator new(unsigned long)
1000075e:	83 c4 10             	add    esp,0x10
10000761:	89 c3                	mov    ebx,eax
10000763:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000768:	8b 00                	mov    eax,DWORD PTR [eax]
1000076a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
1000076d:	83 ec 04             	sub    esp,0x4
10000770:	50                   	push   eax
10000771:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000774:	53                   	push   ebx
10000775:	e8 fc ff ff ff       	call   10000776 <copytree(char*, char*)+0x88>	10000776: R_386_PC32	Directory::Directory(char const*, Process*)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000780:	83 ec 0c             	sub    esp,0xc
10000783:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000786:	e8 fc ff ff ff       	call   10000787 <copytree(char*, char*)+0x99>	10000787: R_386_PC32	Directory::open()
1000078b:	83 c4 10             	add    esp,0x10
1000078e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000791:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10000795:	74 34                	je     100007cb <copytree(char*, char*)+0xdd>
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	68 67 b0 00 10       	push   0x1000b067	1000079b: R_386_32	.text
1000079f:	e8 fc ff ff ff       	call   100007a0 <copytree(char*, char*)+0xb2>	100007a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100007a4:	83 c4 10             	add    esp,0x10
100007a7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
100007ab:	0f 84 90 03 00 00    	je     10000b41 <copytree(char*, char*)+0x453>
100007b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007b4:	8b 00                	mov    eax,DWORD PTR [eax]
100007b6:	83 c0 08             	add    eax,0x8
100007b9:	8b 00                	mov    eax,DWORD PTR [eax]
100007bb:	83 ec 0c             	sub    esp,0xc
100007be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007c1:	ff d0                	call   eax
100007c3:	83 c4 10             	add    esp,0x10
100007c6:	e9 76 03 00 00       	jmp    10000b41 <copytree(char*, char*)+0x453>
100007cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007ce:	8b 00                	mov    eax,DWORD PTR [eax]
100007d0:	83 c0 0c             	add    eax,0xc
100007d3:	8b 00                	mov    eax,DWORD PTR [eax]
100007d5:	83 ec 0c             	sub    esp,0xc
100007d8:	8d 95 b8 fe ff ff    	lea    edx,[ebp-0x148]
100007de:	52                   	push   edx
100007df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100007e2:	6a 00                	push   0x0
100007e4:	68 10 01 00 00       	push   0x110
100007e9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007ec:	ff d0                	call   eax
100007ee:	83 c4 20             	add    esp,0x20
100007f1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007f4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100007f8:	0f 85 fb 02 00 00    	jne    10000af9 <copytree(char*, char*)+0x40b>
100007fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000801:	83 c0 10             	add    eax,0x10
10000804:	83 ec 08             	sub    esp,0x8
10000807:	68 60 b0 00 10       	push   0x1000b060	10000808: R_386_32	.text
1000080c:	50                   	push   eax
1000080d:	e8 fc ff ff ff       	call   1000080e <copytree(char*, char*)+0x120>	1000080e: R_386_PC32	strcmp
10000812:	83 c4 10             	add    esp,0x10
10000815:	85 c0                	test   eax,eax
10000817:	74 b2                	je     100007cb <copytree(char*, char*)+0xdd>
10000819:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000081c:	83 c0 10             	add    eax,0x10
1000081f:	83 ec 08             	sub    esp,0x8
10000822:	68 62 b0 00 10       	push   0x1000b062	10000823: R_386_32	.text
10000827:	50                   	push   eax
10000828:	e8 fc ff ff ff       	call   10000829 <copytree(char*, char*)+0x13b>	10000829: R_386_PC32	strcmp
1000082d:	83 c4 10             	add    esp,0x10
10000830:	85 c0                	test   eax,eax
10000832:	74 97                	je     100007cb <copytree(char*, char*)+0xdd>
10000834:	83 ec 08             	sub    esp,0x8
10000837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000083d:	e8 fc ff ff ff       	call   1000083e <copytree(char*, char*)+0x150>	1000083e: R_386_PC32	strcpy
10000842:	83 c4 10             	add    esp,0x10
10000845:	83 ec 08             	sub    esp,0x8
10000848:	68 65 b0 00 10       	push   0x1000b065	10000849: R_386_32	.text
1000084d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000850:	e8 fc ff ff ff       	call   10000851 <copytree(char*, char*)+0x163>	10000851: R_386_PC32	strcat
10000855:	83 c4 10             	add    esp,0x10
10000858:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000085b:	83 c0 10             	add    eax,0x10
1000085e:	83 ec 08             	sub    esp,0x8
10000861:	50                   	push   eax
10000862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000865:	e8 fc ff ff ff       	call   10000866 <copytree(char*, char*)+0x178>	10000866: R_386_PC32	strcat
1000086a:	83 c4 10             	add    esp,0x10
1000086d:	83 ec 08             	sub    esp,0x8
10000870:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000873:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000876:	e8 fc ff ff ff       	call   10000877 <copytree(char*, char*)+0x189>	10000877: R_386_PC32	strcpy
1000087b:	83 c4 10             	add    esp,0x10
1000087e:	83 ec 08             	sub    esp,0x8
10000881:	68 65 b0 00 10       	push   0x1000b065	10000882: R_386_32	.text
10000886:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000889:	e8 fc ff ff ff       	call   1000088a <copytree(char*, char*)+0x19c>	1000088a: R_386_PC32	strcat
1000088e:	83 c4 10             	add    esp,0x10
10000891:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000894:	83 c0 10             	add    eax,0x10
10000897:	83 ec 08             	sub    esp,0x8
1000089a:	50                   	push   eax
1000089b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000089e:	e8 fc ff ff ff       	call   1000089f <copytree(char*, char*)+0x1b1>	1000089f: R_386_PC32	strcat
100008a3:	83 c4 10             	add    esp,0x10
100008a6:	83 ec 04             	sub    esp,0x4
100008a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100008af:	68 81 b0 00 10       	push   0x1000b081	100008b0: R_386_32	.text
100008b4:	e8 fc ff ff ff       	call   100008b5 <copytree(char*, char*)+0x1c7>	100008b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100008b9:	83 c4 10             	add    esp,0x10
100008bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100008bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100008c2:	83 e0 02             	and    eax,0x2
100008c5:	85 c0                	test   eax,eax
100008c7:	74 47                	je     10000910 <copytree(char*, char*)+0x222>
100008c9:	83 ec 08             	sub    esp,0x8
100008cc:	68 c0 01 00 00       	push   0x1c0
100008d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008d4:	e8 fc ff ff ff       	call   100008d5 <copytree(char*, char*)+0x1e7>	100008d5: R_386_PC32	mkdir(char const*, int)
100008d9:	83 c4 10             	add    esp,0x10
100008dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100008df:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100008e3:	74 15                	je     100008fa <copytree(char*, char*)+0x20c>
100008e5:	83 ec 0c             	sub    esp,0xc
100008e8:	68 8b b0 00 10       	push   0x1000b08b	100008e9: R_386_32	.text
100008ed:	e8 fc ff ff ff       	call   100008ee <copytree(char*, char*)+0x200>	100008ee: R_386_PC32	KePanic(char const*)
100008f2:	83 c4 10             	add    esp,0x10
100008f5:	e9 d1 fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
100008fa:	83 ec 08             	sub    esp,0x8
100008fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000903:	e8 fc ff ff ff       	call   10000904 <copytree(char*, char*)+0x216>	10000904: R_386_PC32	copytree(char*, char*)
10000908:	83 c4 10             	add    esp,0x10
1000090b:	e9 bb fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000910:	83 ec 0c             	sub    esp,0xc
10000913:	68 14 01 00 00       	push   0x114
10000918:	e8 fc ff ff ff       	call   10000919 <copytree(char*, char*)+0x22b>	10000919: R_386_PC32	operator new(unsigned long)
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 c3                	mov    ebx,eax
10000922:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000927:	8b 00                	mov    eax,DWORD PTR [eax]
10000929:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
1000092c:	83 ec 04             	sub    esp,0x4
1000092f:	50                   	push   eax
10000930:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000933:	53                   	push   ebx
10000934:	e8 fc ff ff ff       	call   10000935 <copytree(char*, char*)+0x247>	10000935: R_386_PC32	File::File(char const*, Process*)
10000939:	83 c4 10             	add    esp,0x10
1000093c:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000093f:	83 ec 08             	sub    esp,0x8
10000942:	6a 01                	push   0x1
10000944:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000947:	e8 fc ff ff ff       	call   10000948 <copytree(char*, char*)+0x25a>	10000948: R_386_PC32	File::open(FileOpenMode)
1000094c:	83 c4 10             	add    esp,0x10
1000094f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000953:	75 15                	jne    1000096a <copytree(char*, char*)+0x27c>
10000955:	83 ec 0c             	sub    esp,0xc
10000958:	68 9c b0 00 10       	push   0x1000b09c	10000959: R_386_32	.text
1000095d:	e8 fc ff ff ff       	call   1000095e <copytree(char*, char*)+0x270>	1000095e: R_386_PC32	KePanic(char const*)
10000962:	83 c4 10             	add    esp,0x10
10000965:	e9 8a 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
1000096a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000096e:	0f 84 57 fe ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000974:	83 ec 0c             	sub    esp,0xc
10000977:	68 14 01 00 00       	push   0x114
1000097c:	e8 fc ff ff ff       	call   1000097d <copytree(char*, char*)+0x28f>	1000097d: R_386_PC32	operator new(unsigned long)
10000981:	83 c4 10             	add    esp,0x10
10000984:	89 c3                	mov    ebx,eax
10000986:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000098b:	8b 00                	mov    eax,DWORD PTR [eax]
1000098d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
10000990:	83 ec 04             	sub    esp,0x4
10000993:	50                   	push   eax
10000994:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000997:	53                   	push   ebx
10000998:	e8 fc ff ff ff       	call   10000999 <copytree(char*, char*)+0x2ab>	10000999: R_386_PC32	File::File(char const*, Process*)
1000099d:	83 c4 10             	add    esp,0x10
100009a0:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
100009a3:	83 ec 08             	sub    esp,0x8
100009a6:	6a 12                	push   0x12
100009a8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009ab:	e8 fc ff ff ff       	call   100009ac <copytree(char*, char*)+0x2be>	100009ac: R_386_PC32	File::open(FileOpenMode)
100009b0:	83 c4 10             	add    esp,0x10
100009b3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
100009b7:	75 23                	jne    100009dc <copytree(char*, char*)+0x2ee>
100009b9:	83 ec 0c             	sub    esp,0xc
100009bc:	68 9c b0 00 10       	push   0x1000b09c	100009bd: R_386_32	.text
100009c1:	e8 fc ff ff ff       	call   100009c2 <copytree(char*, char*)+0x2d4>	100009c2: R_386_PC32	KePanic(char const*)
100009c6:	83 c4 10             	add    esp,0x10
100009c9:	83 ec 0c             	sub    esp,0xc
100009cc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009cf:	e8 fc ff ff ff       	call   100009d0 <copytree(char*, char*)+0x2e2>	100009d0: R_386_PC32	File::close()
100009d4:	83 c4 10             	add    esp,0x10
100009d7:	e9 18 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
100009dc:	83 ec 0c             	sub    esp,0xc
100009df:	68 00 10 00 00       	push   0x1000
100009e4:	e8 fc ff ff ff       	call   100009e5 <copytree(char*, char*)+0x2f7>	100009e5: R_386_PC32	malloc
100009e9:	83 c4 10             	add    esp,0x10
100009ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100009ef:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
100009f3:	75 31                	jne    10000a26 <copytree(char*, char*)+0x338>
100009f5:	83 ec 0c             	sub    esp,0xc
100009f8:	68 ab b0 00 10       	push   0x1000b0ab	100009f9: R_386_32	.text
100009fd:	e8 fc ff ff ff       	call   100009fe <copytree(char*, char*)+0x310>	100009fe: R_386_PC32	KePanic(char const*)
10000a02:	83 c4 10             	add    esp,0x10
10000a05:	83 ec 0c             	sub    esp,0xc
10000a08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000a0b:	e8 fc ff ff ff       	call   10000a0c <copytree(char*, char*)+0x31e>	10000a0c: R_386_PC32	free
10000a10:	83 c4 10             	add    esp,0x10
10000a13:	83 ec 0c             	sub    esp,0xc
10000a16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000a19:	e8 fc ff ff ff       	call   10000a1a <copytree(char*, char*)+0x32c>	10000a1a: R_386_PC32	free
10000a1e:	83 c4 10             	add    esp,0x10
10000a21:	e9 1c 01 00 00       	jmp    10000b42 <copytree(char*, char*)+0x454>
10000a26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000a29:	8b 00                	mov    eax,DWORD PTR [eax]
10000a2b:	83 c0 0c             	add    eax,0xc
10000a2e:	8b 00                	mov    eax,DWORD PTR [eax]
10000a30:	83 ec 0c             	sub    esp,0xc
10000a33:	8d 95 b4 fe ff ff    	lea    edx,[ebp-0x14c]
10000a39:	52                   	push   edx
10000a3a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a3d:	6a 00                	push   0x0
10000a3f:	68 00 10 00 00       	push   0x1000
10000a44:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000a47:	ff d0                	call   eax
10000a49:	83 c4 20             	add    esp,0x20
10000a4c:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a4f:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000a53:	75 37                	jne    10000a8c <copytree(char*, char*)+0x39e>
10000a55:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a58:	8b 00                	mov    eax,DWORD PTR [eax]
10000a5a:	83 c0 10             	add    eax,0x10
10000a5d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a5f:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a65:	99                   	cdq    
10000a66:	83 ec 0c             	sub    esp,0xc
10000a69:	8d 9d b0 fe ff ff    	lea    ebx,[ebp-0x150]
10000a6f:	53                   	push   ebx
10000a70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a73:	52                   	push   edx
10000a74:	50                   	push   eax
10000a75:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a78:	ff d1                	call   ecx
10000a7a:	83 c4 20             	add    esp,0x20
10000a7d:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a83:	3d 00 10 00 00       	cmp    eax,0x1000
10000a88:	75 05                	jne    10000a8f <copytree(char*, char*)+0x3a1>
10000a8a:	eb 9a                	jmp    10000a26 <copytree(char*, char*)+0x338>
10000a8c:	90                   	nop
10000a8d:	eb 01                	jmp    10000a90 <copytree(char*, char*)+0x3a2>
10000a8f:	90                   	nop
10000a90:	83 ec 0c             	sub    esp,0xc
10000a93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a96:	e8 fc ff ff ff       	call   10000a97 <copytree(char*, char*)+0x3a9>	10000a97: R_386_PC32	free
10000a9b:	83 c4 10             	add    esp,0x10
10000a9e:	83 ec 0c             	sub    esp,0xc
10000aa1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000aa4:	e8 fc ff ff ff       	call   10000aa5 <copytree(char*, char*)+0x3b7>	10000aa5: R_386_PC32	File::close()
10000aa9:	83 c4 10             	add    esp,0x10
10000aac:	83 ec 0c             	sub    esp,0xc
10000aaf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <copytree(char*, char*)+0x3c5>	10000ab3: R_386_PC32	File::close()
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000abe:	74 15                	je     10000ad5 <copytree(char*, char*)+0x3e7>
10000ac0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000ac3:	8b 00                	mov    eax,DWORD PTR [eax]
10000ac5:	83 c0 08             	add    eax,0x8
10000ac8:	8b 00                	mov    eax,DWORD PTR [eax]
10000aca:	83 ec 0c             	sub    esp,0xc
10000acd:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ad0:	ff d0                	call   eax
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10000ad9:	0f 84 ec fc ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000adf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000ae2:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae4:	83 c0 08             	add    eax,0x8
10000ae7:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae9:	83 ec 0c             	sub    esp,0xc
10000aec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000aef:	ff d0                	call   eax
10000af1:	83 c4 10             	add    esp,0x10
10000af4:	e9 d2 fc ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000af9:	90                   	nop
10000afa:	83 ec 0c             	sub    esp,0xc
10000afd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000b00:	e8 fc ff ff ff       	call   10000b01 <copytree(char*, char*)+0x413>	10000b01: R_386_PC32	free
10000b05:	83 c4 10             	add    esp,0x10
10000b08:	83 ec 0c             	sub    esp,0xc
10000b0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000b0e:	e8 fc ff ff ff       	call   10000b0f <copytree(char*, char*)+0x421>	10000b0f: R_386_PC32	free
10000b13:	83 c4 10             	add    esp,0x10
10000b16:	83 ec 0c             	sub    esp,0xc
10000b19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b1c:	e8 fc ff ff ff       	call   10000b1d <copytree(char*, char*)+0x42f>	10000b1d: R_386_PC32	Directory::close()
10000b21:	83 c4 10             	add    esp,0x10
10000b24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000b28:	74 18                	je     10000b42 <copytree(char*, char*)+0x454>
10000b2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000b2d:	8b 00                	mov    eax,DWORD PTR [eax]
10000b2f:	83 c0 08             	add    eax,0x8
10000b32:	8b 00                	mov    eax,DWORD PTR [eax]
10000b34:	83 ec 0c             	sub    esp,0xc
10000b37:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b3a:	ff d0                	call   eax
10000b3c:	83 c4 10             	add    esp,0x10
10000b3f:	eb 01                	jmp    10000b42 <copytree(char*, char*)+0x454>
10000b41:	90                   	nop
10000b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000b45:	c9                   	leave  
10000b46:	c3                   	ret    

10000b47 <backupTree(char*, unsigned short)>:
10000b47:	55                   	push   ebp
10000b48:	89 e5                	mov    ebp,esp
10000b4a:	57                   	push   edi
10000b4b:	56                   	push   esi
10000b4c:	53                   	push   ebx
10000b4d:	81 ec 8c 12 00 00    	sub    esp,0x128c
10000b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000b56:	66 89 85 74 ed ff ff 	mov    WORD PTR [ebp-0x128c],ax
10000b5d:	83 ec 0c             	sub    esp,0xc
10000b60:	68 90 01 00 00       	push   0x190
10000b65:	e8 fc ff ff ff       	call   10000b66 <backupTree(char*, unsigned short)+0x1f>	10000b66: R_386_PC32	malloc
10000b6a:	83 c4 10             	add    esp,0x10
10000b6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000b70:	83 ec 04             	sub    esp,0x4
10000b73:	68 90 01 00 00       	push   0x190
10000b78:	6a 00                	push   0x0
10000b7a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000b7d:	e8 fc ff ff ff       	call   10000b7e <backupTree(char*, unsigned short)+0x37>	10000b7e: R_386_PC32	memset
10000b82:	83 c4 10             	add    esp,0x10
10000b85:	8d 85 a8 fe ff ff    	lea    eax,[ebp-0x158]
10000b8b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000b8e:	83 ec 0c             	sub    esp,0xc
10000b91:	68 14 01 00 00       	push   0x114
10000b96:	e8 fc ff ff ff       	call   10000b97 <backupTree(char*, unsigned short)+0x50>	10000b97: R_386_PC32	operator new(unsigned long)
10000b9b:	83 c4 10             	add    esp,0x10
10000b9e:	89 c3                	mov    ebx,eax
10000ba0:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ba5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
10000baa:	83 ec 04             	sub    esp,0x4
10000bad:	50                   	push   eax
10000bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bb1:	53                   	push   ebx
10000bb2:	e8 fc ff ff ff       	call   10000bb3 <backupTree(char*, unsigned short)+0x6c>	10000bb3: R_386_PC32	Directory::Directory(char const*, Process*)
10000bb7:	83 c4 10             	add    esp,0x10
10000bba:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000bbd:	83 ec 0c             	sub    esp,0xc
10000bc0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bc3:	e8 fc ff ff ff       	call   10000bc4 <backupTree(char*, unsigned short)+0x7d>	10000bc4: R_386_PC32	Directory::open()
10000bc8:	83 c4 10             	add    esp,0x10
10000bcb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000bce:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000bd2:	74 34                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000bd4:	83 ec 0c             	sub    esp,0xc
10000bd7:	68 67 b0 00 10       	push   0x1000b067	10000bd8: R_386_32	.text
10000bdc:	e8 fc ff ff ff       	call   10000bdd <backupTree(char*, unsigned short)+0x96>	10000bdd: R_386_PC32	Dbg::kprintf(char const*, ...)
10000be1:	83 c4 10             	add    esp,0x10
10000be4:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10000be8:	0f 84 c8 05 00 00    	je     100011b6 <backupTree(char*, unsigned short)+0x66f>
10000bee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000bf1:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf3:	83 c0 08             	add    eax,0x8
10000bf6:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf8:	83 ec 0c             	sub    esp,0xc
10000bfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bfe:	ff d0                	call   eax
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	e9 af 05 00 00       	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
10000c08:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c0b:	8b 00                	mov    eax,DWORD PTR [eax]
10000c0d:	83 c0 0c             	add    eax,0xc
10000c10:	8b 00                	mov    eax,DWORD PTR [eax]
10000c12:	83 ec 0c             	sub    esp,0xc
10000c15:	8d 95 a4 fe ff ff    	lea    edx,[ebp-0x15c]
10000c1b:	52                   	push   edx
10000c1c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c1f:	6a 00                	push   0x0
10000c21:	68 10 01 00 00       	push   0x110
10000c26:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c29:	ff d0                	call   eax
10000c2b:	83 c4 20             	add    esp,0x20
10000c2e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c31:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10000c35:	0f 85 41 05 00 00    	jne    1000117c <backupTree(char*, unsigned short)+0x635>
10000c3b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c3e:	83 c0 10             	add    eax,0x10
10000c41:	83 ec 08             	sub    esp,0x8
10000c44:	68 60 b0 00 10       	push   0x1000b060	10000c45: R_386_32	.text
10000c49:	50                   	push   eax
10000c4a:	e8 fc ff ff ff       	call   10000c4b <backupTree(char*, unsigned short)+0x104>	10000c4b: R_386_PC32	strcmp
10000c4f:	83 c4 10             	add    esp,0x10
10000c52:	85 c0                	test   eax,eax
10000c54:	74 b2                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c59:	83 c0 10             	add    eax,0x10
10000c5c:	83 ec 08             	sub    esp,0x8
10000c5f:	68 62 b0 00 10       	push   0x1000b062	10000c60: R_386_32	.text
10000c64:	50                   	push   eax
10000c65:	e8 fc ff ff ff       	call   10000c66 <backupTree(char*, unsigned short)+0x11f>	10000c66: R_386_PC32	strcmp
10000c6a:	83 c4 10             	add    esp,0x10
10000c6d:	85 c0                	test   eax,eax
10000c6f:	74 97                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c71:	83 ec 08             	sub    esp,0x8
10000c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c77:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c7a:	e8 fc ff ff ff       	call   10000c7b <backupTree(char*, unsigned short)+0x134>	10000c7b: R_386_PC32	strcpy
10000c7f:	83 c4 10             	add    esp,0x10
10000c82:	83 ec 08             	sub    esp,0x8
10000c85:	68 65 b0 00 10       	push   0x1000b065	10000c86: R_386_32	.text
10000c8a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c8d:	e8 fc ff ff ff       	call   10000c8e <backupTree(char*, unsigned short)+0x147>	10000c8e: R_386_PC32	strcat
10000c92:	83 c4 10             	add    esp,0x10
10000c95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c98:	83 c0 10             	add    eax,0x10
10000c9b:	83 ec 08             	sub    esp,0x8
10000c9e:	50                   	push   eax
10000c9f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ca2:	e8 fc ff ff ff       	call   10000ca3 <backupTree(char*, unsigned short)+0x15c>	10000ca3: R_386_PC32	strcat
10000ca7:	83 c4 10             	add    esp,0x10
10000caa:	66 c7 45 e6 bc ad    	mov    WORD PTR [ebp-0x1a],0xadbc
10000cb0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10000cb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000cba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cbd:	01 d0                	add    eax,edx
10000cbf:	83 c0 10             	add    eax,0x10
10000cc2:	8a 00                	mov    al,BYTE PTR [eax]
10000cc4:	84 c0                	test   al,al
10000cc6:	74 3c                	je     10000d04 <backupTree(char*, unsigned short)+0x1bd>
10000cc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000ccb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cce:	01 d0                	add    eax,edx
10000cd0:	83 c0 10             	add    eax,0x10
10000cd3:	8a 00                	mov    al,BYTE PTR [eax]
10000cd5:	66 0f be d0          	movsx  dx,al
10000cd9:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000cdd:	31 d0                	xor    eax,edx
10000cdf:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000ce3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000ce7:	c1 e0 03             	shl    eax,0x3
10000cea:	89 c2                	mov    edx,eax
10000cec:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000cf0:	c1 f8 0d             	sar    eax,0xd
10000cf3:	09 d0                	or     eax,edx
10000cf5:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000cf9:	66 81 6d e6 f1 06    	sub    WORD PTR [ebp-0x1a],0x6f1
10000cff:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10000d02:	eb b3                	jmp    10000cb7 <backupTree(char*, unsigned short)+0x170>
10000d04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000d0a:	83 e0 02             	and    eax,0x2
10000d0d:	85 c0                	test   eax,eax
10000d0f:	74 37                	je     10000d48 <backupTree(char*, unsigned short)+0x201>
10000d11:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d14:	83 c0 10             	add    eax,0x10
10000d17:	83 ec 08             	sub    esp,0x8
10000d1a:	68 b5 b0 00 10       	push   0x1000b0b5	10000d1b: R_386_32	.text
10000d1f:	50                   	push   eax
10000d20:	e8 fc ff ff ff       	call   10000d21 <backupTree(char*, unsigned short)+0x1da>	10000d21: R_386_PC32	strcmp
10000d25:	83 c4 10             	add    esp,0x10
10000d28:	85 c0                	test   eax,eax
10000d2a:	0f 84 d8 fe ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d30:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000d34:	83 ec 08             	sub    esp,0x8
10000d37:	50                   	push   eax
10000d38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000d3b:	e8 fc ff ff ff       	call   10000d3c <backupTree(char*, unsigned short)+0x1f5>	10000d3c: R_386_PC32	backupTree(char*, unsigned short)
10000d40:	83 c4 10             	add    esp,0x10
10000d43:	e9 c0 fe ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d48:	c6 85 a3 fe ff ff 00 	mov    BYTE PTR [ebp-0x15d],0x0
10000d4f:	83 ec 08             	sub    esp,0x8
10000d52:	68 bc b0 00 10       	push   0x1000b0bc	10000d53: R_386_32	.text
10000d57:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d5d:	50                   	push   eax
10000d5e:	e8 fc ff ff ff       	call   10000d5f <backupTree(char*, unsigned short)+0x218>	10000d5f: R_386_PC32	strcpy
10000d63:	83 c4 10             	add    esp,0x10
10000d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10000d6c:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000d72:	83 ec 08             	sub    esp,0x8
10000d75:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000d7b:	50                   	push   eax
10000d7c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d82:	50                   	push   eax
10000d83:	e8 fc ff ff ff       	call   10000d84 <backupTree(char*, unsigned short)+0x23d>	10000d84: R_386_PC32	strcat
10000d88:	83 c4 10             	add    esp,0x10
10000d8b:	83 ec 04             	sub    esp,0x4
10000d8e:	6a 09                	push   0x9
10000d90:	6a 00                	push   0x0
10000d92:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000d98:	50                   	push   eax
10000d99:	e8 fc ff ff ff       	call   10000d9a <backupTree(char*, unsigned short)+0x253>	10000d9a: R_386_PC32	memset
10000d9e:	83 c4 10             	add    esp,0x10
10000da1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000da4:	83 c0 10             	add    eax,0x10
10000da7:	83 ec 04             	sub    esp,0x4
10000daa:	6a 08                	push   0x8
10000dac:	50                   	push   eax
10000dad:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000db3:	50                   	push   eax
10000db4:	e8 fc ff ff ff       	call   10000db5 <backupTree(char*, unsigned short)+0x26e>	10000db5: R_386_PC32	strncpyxx(char*, char const*, unsigned long)
10000db9:	83 c4 10             	add    esp,0x10
10000dbc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000dc3:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000dc7:	0f 8f c5 00 00 00    	jg     10000e92 <backupTree(char*, unsigned short)+0x34b>
10000dcd:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000dd3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000dd6:	01 d0                	add    eax,edx
10000dd8:	8a 00                	mov    al,BYTE PTR [eax]
10000dda:	3c 60                	cmp    al,0x60
10000ddc:	7e 30                	jle    10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000dde:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000de4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000de7:	01 d0                	add    eax,edx
10000de9:	8a 00                	mov    al,BYTE PTR [eax]
10000deb:	3c 7a                	cmp    al,0x7a
10000ded:	7f 1f                	jg     10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000def:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000df5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000df8:	01 d0                	add    eax,edx
10000dfa:	8a 00                	mov    al,BYTE PTR [eax]
10000dfc:	83 e8 20             	sub    eax,0x20
10000dff:	88 c2                	mov    dl,al
10000e01:	8d 8d 99 fe ff ff    	lea    ecx,[ebp-0x167]
10000e07:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e0a:	01 c8                	add    eax,ecx
10000e0c:	88 10                	mov    BYTE PTR [eax],dl
10000e0e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e17:	01 d0                	add    eax,edx
10000e19:	8a 00                	mov    al,BYTE PTR [eax]
10000e1b:	3c 59                	cmp    al,0x59
10000e1d:	75 0e                	jne    10000e2d <backupTree(char*, unsigned short)+0x2e6>
10000e1f:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e25:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e28:	01 d0                	add    eax,edx
10000e2a:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e2d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e33:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e36:	01 d0                	add    eax,edx
10000e38:	8a 00                	mov    al,BYTE PTR [eax]
10000e3a:	3c 5a                	cmp    al,0x5a
10000e3c:	75 0e                	jne    10000e4c <backupTree(char*, unsigned short)+0x305>
10000e3e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e47:	01 d0                	add    eax,edx
10000e49:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e4c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e52:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e55:	01 d0                	add    eax,edx
10000e57:	8a 00                	mov    al,BYTE PTR [eax]
10000e59:	3c 20                	cmp    al,0x20
10000e5b:	75 0e                	jne    10000e6b <backupTree(char*, unsigned short)+0x324>
10000e5d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e63:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e66:	01 d0                	add    eax,edx
10000e68:	c6 00 59             	mov    BYTE PTR [eax],0x59
10000e6b:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e74:	01 d0                	add    eax,edx
10000e76:	8a 00                	mov    al,BYTE PTR [eax]
10000e78:	3c 2e                	cmp    al,0x2e
10000e7a:	75 0e                	jne    10000e8a <backupTree(char*, unsigned short)+0x343>
10000e7c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e82:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e85:	01 d0                	add    eax,edx
10000e87:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10000e8a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10000e8d:	e9 31 ff ff ff       	jmp    10000dc3 <backupTree(char*, unsigned short)+0x27c>
10000e92:	83 ec 08             	sub    esp,0x8
10000e95:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000e9b:	50                   	push   eax
10000e9c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ea2:	50                   	push   eax
10000ea3:	e8 fc ff ff ff       	call   10000ea4 <backupTree(char*, unsigned short)+0x35d>	10000ea4: R_386_PC32	strcat
10000ea8:	83 c4 10             	add    esp,0x10
10000eab:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000eae:	83 c0 10             	add    eax,0x10
10000eb1:	83 ec 0c             	sub    esp,0xc
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <backupTree(char*, unsigned short)+0x36f>	10000eb6: R_386_PC32	strlen
10000eba:	83 c4 10             	add    esp,0x10
10000ebd:	83 c0 41             	add    eax,0x41
10000ec0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000ec6:	83 ec 08             	sub    esp,0x8
10000ec9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000ecf:	50                   	push   eax
10000ed0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ed6:	50                   	push   eax
10000ed7:	e8 fc ff ff ff       	call   10000ed8 <backupTree(char*, unsigned short)+0x391>	10000ed8: R_386_PC32	strcat
10000edc:	83 c4 10             	add    esp,0x10
10000edf:	83 ec 08             	sub    esp,0x8
10000ee2:	68 60 b0 00 10       	push   0x1000b060	10000ee3: R_386_32	.text
10000ee7:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000eed:	50                   	push   eax
10000eee:	e8 fc ff ff ff       	call   10000eef <backupTree(char*, unsigned short)+0x3a8>	10000eef: R_386_PC32	strcat
10000ef3:	83 c4 10             	add    esp,0x10
10000ef6:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000efa:	25 65 07 00 00       	and    eax,0x765
10000eff:	33 85 74 ed ff ff    	xor    eax,DWORD PTR [ebp-0x128c]
10000f05:	66 89 45 c6          	mov    WORD PTR [ebp-0x3a],ax
10000f09:	8d 85 88 fe ff ff    	lea    eax,[ebp-0x178]
10000f0f:	bb d5 b0 00 10       	mov    ebx,0x1000b0d5	10000f10: R_386_32	.text
10000f14:	ba 11 00 00 00       	mov    edx,0x11
10000f19:	89 c7                	mov    edi,eax
10000f1b:	89 de                	mov    esi,ebx
10000f1d:	89 d1                	mov    ecx,edx
10000f1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000f21:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f25:	83 e0 0f             	and    eax,0xf
10000f28:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f2f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f35:	83 ec 08             	sub    esp,0x8
10000f38:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f3e:	50                   	push   eax
10000f3f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f45:	50                   	push   eax
10000f46:	e8 fc ff ff ff       	call   10000f47 <backupTree(char*, unsigned short)+0x400>	10000f47: R_386_PC32	strcat
10000f4b:	83 c4 10             	add    esp,0x10
10000f4e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f52:	c1 f8 04             	sar    eax,0x4
10000f55:	83 e0 0f             	and    eax,0xf
10000f58:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f5f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f65:	83 ec 08             	sub    esp,0x8
10000f68:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f6e:	50                   	push   eax
10000f6f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f75:	50                   	push   eax
10000f76:	e8 fc ff ff ff       	call   10000f77 <backupTree(char*, unsigned short)+0x430>	10000f77: R_386_PC32	strcat
10000f7b:	83 c4 10             	add    esp,0x10
10000f7e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f82:	c1 f8 08             	sar    eax,0x8
10000f85:	83 e0 0f             	and    eax,0xf
10000f88:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f8f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f95:	83 ec 08             	sub    esp,0x8
10000f98:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f9e:	50                   	push   eax
10000f9f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fa5:	50                   	push   eax
10000fa6:	e8 fc ff ff ff       	call   10000fa7 <backupTree(char*, unsigned short)+0x460>	10000fa7: R_386_PC32	strcat
10000fab:	83 c4 10             	add    esp,0x10
10000fae:	66 8b 45 c6          	mov    ax,WORD PTR [ebp-0x3a]
10000fb2:	66 c1 e8 0c          	shr    ax,0xc
10000fb6:	0f b7 c0             	movzx  eax,ax
10000fb9:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000fc0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000fc6:	83 ec 08             	sub    esp,0x8
10000fc9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000fcf:	50                   	push   eax
10000fd0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fd6:	50                   	push   eax
10000fd7:	e8 fc ff ff ff       	call   10000fd8 <backupTree(char*, unsigned short)+0x491>	10000fd8: R_386_PC32	strcat
10000fdc:	83 c4 10             	add    esp,0x10
10000fdf:	83 ec 0c             	sub    esp,0xc
10000fe2:	68 14 01 00 00       	push   0x114
10000fe7:	e8 fc ff ff ff       	call   10000fe8 <backupTree(char*, unsigned short)+0x4a1>	10000fe8: R_386_PC32	operator new(unsigned long)
10000fec:	83 c4 10             	add    esp,0x10
10000fef:	89 c3                	mov    ebx,eax
10000ff1:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ff6:	8b 00                	mov    eax,DWORD PTR [eax]
10000ff8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
10000ffb:	83 ec 04             	sub    esp,0x4
10000ffe:	50                   	push   eax
10000fff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001002:	53                   	push   ebx
10001003:	e8 fc ff ff ff       	call   10001004 <backupTree(char*, unsigned short)+0x4bd>	10001004: R_386_PC32	File::File(char const*, Process*)
10001008:	83 c4 10             	add    esp,0x10
1000100b:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
1000100e:	83 ec 08             	sub    esp,0x8
10001011:	6a 01                	push   0x1
10001013:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001016:	e8 fc ff ff ff       	call   10001017 <backupTree(char*, unsigned short)+0x4d0>	10001017: R_386_PC32	File::open(FileOpenMode)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001022:	75 15                	jne    10001039 <backupTree(char*, unsigned short)+0x4f2>
10001024:	83 ec 0c             	sub    esp,0xc
10001027:	68 9c b0 00 10       	push   0x1000b09c	10001028: R_386_32	.text
1000102c:	e8 fc ff ff ff       	call   1000102d <backupTree(char*, unsigned short)+0x4e6>	1000102d: R_386_PC32	KePanic(char const*)
10001031:	83 c4 10             	add    esp,0x10
10001034:	e9 3e 01 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
10001039:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
1000103d:	0f 84 c5 fb ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001043:	83 ec 0c             	sub    esp,0xc
10001046:	68 14 01 00 00       	push   0x114
1000104b:	e8 fc ff ff ff       	call   1000104c <backupTree(char*, unsigned short)+0x505>	1000104c: R_386_PC32	operator new(unsigned long)
10001050:	83 c4 10             	add    esp,0x10
10001053:	89 c3                	mov    ebx,eax
10001055:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000105a:	8b 00                	mov    eax,DWORD PTR [eax]
1000105c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
1000105f:	83 ec 04             	sub    esp,0x4
10001062:	50                   	push   eax
10001063:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10001069:	50                   	push   eax
1000106a:	53                   	push   ebx
1000106b:	e8 fc ff ff ff       	call   1000106c <backupTree(char*, unsigned short)+0x525>	1000106c: R_386_PC32	File::File(char const*, Process*)
10001070:	83 c4 10             	add    esp,0x10
10001073:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10001076:	83 ec 08             	sub    esp,0x8
10001079:	6a 12                	push   0x12
1000107b:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000107e:	e8 fc ff ff ff       	call   1000107f <backupTree(char*, unsigned short)+0x538>	1000107f: R_386_PC32	File::open(FileOpenMode)
10001083:	83 c4 10             	add    esp,0x10
10001086:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000108a:	75 23                	jne    100010af <backupTree(char*, unsigned short)+0x568>
1000108c:	83 ec 0c             	sub    esp,0xc
1000108f:	68 9c b0 00 10       	push   0x1000b09c	10001090: R_386_32	.text
10001094:	e8 fc ff ff ff       	call   10001095 <backupTree(char*, unsigned short)+0x54e>	10001095: R_386_PC32	KePanic(char const*)
10001099:	83 c4 10             	add    esp,0x10
1000109c:	83 ec 0c             	sub    esp,0xc
1000109f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
100010a2:	e8 fc ff ff ff       	call   100010a3 <backupTree(char*, unsigned short)+0x55c>	100010a3: R_386_PC32	File::close()
100010a7:	83 c4 10             	add    esp,0x10
100010aa:	e9 c8 00 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
100010af:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100010b2:	8b 00                	mov    eax,DWORD PTR [eax]
100010b4:	83 c0 0c             	add    eax,0xc
100010b7:	8b 00                	mov    eax,DWORD PTR [eax]
100010b9:	83 ec 0c             	sub    esp,0xc
100010bc:	8d 95 84 fe ff ff    	lea    edx,[ebp-0x17c]
100010c2:	52                   	push   edx
100010c3:	8d 95 80 ee ff ff    	lea    edx,[ebp-0x1180]
100010c9:	52                   	push   edx
100010ca:	6a 00                	push   0x0
100010cc:	68 00 10 00 00       	push   0x1000
100010d1:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100010d4:	ff d0                	call   eax
100010d6:	83 c4 20             	add    esp,0x20
100010d9:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100010dc:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100010e0:	75 3b                	jne    1000111d <backupTree(char*, unsigned short)+0x5d6>
100010e2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100010e5:	8b 00                	mov    eax,DWORD PTR [eax]
100010e7:	83 c0 10             	add    eax,0x10
100010ea:	8b 08                	mov    ecx,DWORD PTR [eax]
100010ec:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
100010f2:	99                   	cdq    
100010f3:	83 ec 0c             	sub    esp,0xc
100010f6:	8d 9d 80 fe ff ff    	lea    ebx,[ebp-0x180]
100010fc:	53                   	push   ebx
100010fd:	8d 9d 80 ee ff ff    	lea    ebx,[ebp-0x1180]
10001103:	53                   	push   ebx
10001104:	52                   	push   edx
10001105:	50                   	push   eax
10001106:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001109:	ff d1                	call   ecx
1000110b:	83 c4 20             	add    esp,0x20
1000110e:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
10001114:	3d 00 10 00 00       	cmp    eax,0x1000
10001119:	75 05                	jne    10001120 <backupTree(char*, unsigned short)+0x5d9>
1000111b:	eb 92                	jmp    100010af <backupTree(char*, unsigned short)+0x568>
1000111d:	90                   	nop
1000111e:	eb 01                	jmp    10001121 <backupTree(char*, unsigned short)+0x5da>
10001120:	90                   	nop
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001127:	e8 fc ff ff ff       	call   10001128 <backupTree(char*, unsigned short)+0x5e1>	10001128: R_386_PC32	File::close()
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	83 ec 0c             	sub    esp,0xc
10001132:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001135:	e8 fc ff ff ff       	call   10001136 <backupTree(char*, unsigned short)+0x5ef>	10001136: R_386_PC32	File::close()
1000113a:	83 c4 10             	add    esp,0x10
1000113d:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001141:	74 15                	je     10001158 <backupTree(char*, unsigned short)+0x611>
10001143:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001146:	8b 00                	mov    eax,DWORD PTR [eax]
10001148:	83 c0 08             	add    eax,0x8
1000114b:	8b 00                	mov    eax,DWORD PTR [eax]
1000114d:	83 ec 0c             	sub    esp,0xc
10001150:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001153:	ff d0                	call   eax
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000115c:	0f 84 a6 fa ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001162:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10001165:	8b 00                	mov    eax,DWORD PTR [eax]
10001167:	83 c0 08             	add    eax,0x8
1000116a:	8b 00                	mov    eax,DWORD PTR [eax]
1000116c:	83 ec 0c             	sub    esp,0xc
1000116f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001172:	ff d0                	call   eax
10001174:	83 c4 10             	add    esp,0x10
10001177:	e9 8c fa ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
1000117c:	90                   	nop
1000117d:	83 ec 0c             	sub    esp,0xc
10001180:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001183:	e8 fc ff ff ff       	call   10001184 <backupTree(char*, unsigned short)+0x63d>	10001184: R_386_PC32	free
10001188:	83 c4 10             	add    esp,0x10
1000118b:	83 ec 0c             	sub    esp,0xc
1000118e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001191:	e8 fc ff ff ff       	call   10001192 <backupTree(char*, unsigned short)+0x64b>	10001192: R_386_PC32	Directory::close()
10001196:	83 c4 10             	add    esp,0x10
10001199:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
1000119d:	74 18                	je     100011b7 <backupTree(char*, unsigned short)+0x670>
1000119f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100011a2:	8b 00                	mov    eax,DWORD PTR [eax]
100011a4:	83 c0 08             	add    eax,0x8
100011a7:	8b 00                	mov    eax,DWORD PTR [eax]
100011a9:	83 ec 0c             	sub    esp,0xc
100011ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011af:	ff d0                	call   eax
100011b1:	83 c4 10             	add    esp,0x10
100011b4:	eb 01                	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
100011b6:	90                   	nop
100011b7:	8d 65 f4             	lea    esp,[ebp-0xc]
100011ba:	5b                   	pop    ebx
100011bb:	5e                   	pop    esi
100011bc:	5f                   	pop    edi
100011bd:	5d                   	pop    ebp
100011be:	c3                   	ret    

100011bf <createUser(char const*)>:
100011bf:	55                   	push   ebp
100011c0:	89 e5                	mov    ebp,esp
100011c2:	81 ec 08 01 00 00    	sub    esp,0x108
100011c8:	68 e6 b0 00 10       	push   0x1000b0e6	100011c9: R_386_32	.text
100011cd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011d3:	50                   	push   eax
100011d4:	e8 fc ff ff ff       	call   100011d5 <createUser(char const*)+0x16>	100011d5: R_386_PC32	strcpy
100011d9:	83 c4 08             	add    esp,0x8
100011dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011df:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011e5:	50                   	push   eax
100011e6:	e8 fc ff ff ff       	call   100011e7 <createUser(char const*)+0x28>	100011e7: R_386_PC32	strcat
100011eb:	83 c4 08             	add    esp,0x8
100011ee:	83 ec 08             	sub    esp,0x8
100011f1:	68 c0 01 00 00       	push   0x1c0
100011f6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011fc:	50                   	push   eax
100011fd:	e8 fc ff ff ff       	call   100011fe <createUser(char const*)+0x3f>	100011fe: R_386_PC32	mkdir(char const*, int)
10001202:	83 c4 10             	add    esp,0x10
10001205:	83 ec 08             	sub    esp,0x8
10001208:	68 f0 b0 00 10       	push   0x1000b0f0	10001209: R_386_32	.text
1000120d:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001213:	50                   	push   eax
10001214:	e8 fc ff ff ff       	call   10001215 <createUser(char const*)+0x56>	10001215: R_386_PC32	strcat
10001219:	83 c4 10             	add    esp,0x10
1000121c:	83 ec 08             	sub    esp,0x8
1000121f:	68 c0 01 00 00       	push   0x1c0
10001224:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000122a:	50                   	push   eax
1000122b:	e8 fc ff ff ff       	call   1000122c <createUser(char const*)+0x6d>	1000122c: R_386_PC32	mkdir(char const*, int)
10001230:	83 c4 10             	add    esp,0x10
10001233:	83 ec 08             	sub    esp,0x8
10001236:	68 e6 b0 00 10       	push   0x1000b0e6	10001237: R_386_32	.text
1000123b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001241:	50                   	push   eax
10001242:	e8 fc ff ff ff       	call   10001243 <createUser(char const*)+0x84>	10001243: R_386_PC32	strcpy
10001247:	83 c4 10             	add    esp,0x10
1000124a:	83 ec 08             	sub    esp,0x8
1000124d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001250:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001256:	50                   	push   eax
10001257:	e8 fc ff ff ff       	call   10001258 <createUser(char const*)+0x99>	10001258: R_386_PC32	strcat
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	83 ec 08             	sub    esp,0x8
10001262:	68 f9 b0 00 10       	push   0x1000b0f9	10001263: R_386_32	.text
10001267:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000126d:	50                   	push   eax
1000126e:	e8 fc ff ff ff       	call   1000126f <createUser(char const*)+0xb0>	1000126f: R_386_PC32	strcat
10001273:	83 c4 10             	add    esp,0x10
10001276:	83 ec 08             	sub    esp,0x8
10001279:	68 c0 01 00 00       	push   0x1c0
1000127e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001284:	50                   	push   eax
10001285:	e8 fc ff ff ff       	call   10001286 <createUser(char const*)+0xc7>	10001286: R_386_PC32	mkdir(char const*, int)
1000128a:	83 c4 10             	add    esp,0x10
1000128d:	83 ec 08             	sub    esp,0x8
10001290:	68 e6 b0 00 10       	push   0x1000b0e6	10001291: R_386_32	.text
10001295:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000129b:	50                   	push   eax
1000129c:	e8 fc ff ff ff       	call   1000129d <createUser(char const*)+0xde>	1000129d: R_386_PC32	strcpy
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	83 ec 08             	sub    esp,0x8
100012a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012aa:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012b0:	50                   	push   eax
100012b1:	e8 fc ff ff ff       	call   100012b2 <createUser(char const*)+0xf3>	100012b2: R_386_PC32	strcat
100012b6:	83 c4 10             	add    esp,0x10
100012b9:	83 ec 08             	sub    esp,0x8
100012bc:	68 04 b1 00 10       	push   0x1000b104	100012bd: R_386_32	.text
100012c1:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012c7:	50                   	push   eax
100012c8:	e8 fc ff ff ff       	call   100012c9 <createUser(char const*)+0x10a>	100012c9: R_386_PC32	strcat
100012cd:	83 c4 10             	add    esp,0x10
100012d0:	83 ec 08             	sub    esp,0x8
100012d3:	68 c0 01 00 00       	push   0x1c0
100012d8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <createUser(char const*)+0x121>	100012e0: R_386_PC32	mkdir(char const*, int)
100012e4:	83 c4 10             	add    esp,0x10
100012e7:	83 ec 08             	sub    esp,0x8
100012ea:	68 e6 b0 00 10       	push   0x1000b0e6	100012eb: R_386_32	.text
100012ef:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012f5:	50                   	push   eax
100012f6:	e8 fc ff ff ff       	call   100012f7 <createUser(char const*)+0x138>	100012f7: R_386_PC32	strcpy
100012fb:	83 c4 10             	add    esp,0x10
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001304:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000130a:	50                   	push   eax
1000130b:	e8 fc ff ff ff       	call   1000130c <createUser(char const*)+0x14d>	1000130c: R_386_PC32	strcat
10001310:	83 c4 10             	add    esp,0x10
10001313:	83 ec 08             	sub    esp,0x8
10001316:	68 0f b1 00 10       	push   0x1000b10f	10001317: R_386_32	.text
1000131b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001321:	50                   	push   eax
10001322:	e8 fc ff ff ff       	call   10001323 <createUser(char const*)+0x164>	10001323: R_386_PC32	strcat
10001327:	83 c4 10             	add    esp,0x10
1000132a:	83 ec 08             	sub    esp,0x8
1000132d:	68 c0 01 00 00       	push   0x1c0
10001332:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001338:	50                   	push   eax
10001339:	e8 fc ff ff ff       	call   1000133a <createUser(char const*)+0x17b>	1000133a: R_386_PC32	mkdir(char const*, int)
1000133e:	83 c4 10             	add    esp,0x10
10001341:	83 ec 08             	sub    esp,0x8
10001344:	68 e6 b0 00 10       	push   0x1000b0e6	10001345: R_386_32	.text
10001349:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000134f:	50                   	push   eax
10001350:	e8 fc ff ff ff       	call   10001351 <createUser(char const*)+0x192>	10001351: R_386_PC32	strcpy
10001355:	83 c4 10             	add    esp,0x10
10001358:	83 ec 08             	sub    esp,0x8
1000135b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000135e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001364:	50                   	push   eax
10001365:	e8 fc ff ff ff       	call   10001366 <createUser(char const*)+0x1a7>	10001366: R_386_PC32	strcat
1000136a:	83 c4 10             	add    esp,0x10
1000136d:	83 ec 08             	sub    esp,0x8
10001370:	68 19 b1 00 10       	push   0x1000b119	10001371: R_386_32	.text
10001375:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000137b:	50                   	push   eax
1000137c:	e8 fc ff ff ff       	call   1000137d <createUser(char const*)+0x1be>	1000137d: R_386_PC32	strcat
10001381:	83 c4 10             	add    esp,0x10
10001384:	83 ec 08             	sub    esp,0x8
10001387:	68 c0 01 00 00       	push   0x1c0
1000138c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001392:	50                   	push   eax
10001393:	e8 fc ff ff ff       	call   10001394 <createUser(char const*)+0x1d5>	10001394: R_386_PC32	mkdir(char const*, int)
10001398:	83 c4 10             	add    esp,0x10
1000139b:	83 ec 08             	sub    esp,0x8
1000139e:	68 e6 b0 00 10       	push   0x1000b0e6	1000139f: R_386_32	.text
100013a3:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013a9:	50                   	push   eax
100013aa:	e8 fc ff ff ff       	call   100013ab <createUser(char const*)+0x1ec>	100013ab: R_386_PC32	strcpy
100013af:	83 c4 10             	add    esp,0x10
100013b2:	83 ec 08             	sub    esp,0x8
100013b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013b8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013be:	50                   	push   eax
100013bf:	e8 fc ff ff ff       	call   100013c0 <createUser(char const*)+0x201>	100013c0: R_386_PC32	strcat
100013c4:	83 c4 10             	add    esp,0x10
100013c7:	83 ec 08             	sub    esp,0x8
100013ca:	68 24 b1 00 10       	push   0x1000b124	100013cb: R_386_32	.text
100013cf:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013d5:	50                   	push   eax
100013d6:	e8 fc ff ff ff       	call   100013d7 <createUser(char const*)+0x218>	100013d7: R_386_PC32	strcat
100013db:	83 c4 10             	add    esp,0x10
100013de:	83 ec 08             	sub    esp,0x8
100013e1:	68 c0 01 00 00       	push   0x1c0
100013e6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013ec:	50                   	push   eax
100013ed:	e8 fc ff ff ff       	call   100013ee <createUser(char const*)+0x22f>	100013ee: R_386_PC32	mkdir(char const*, int)
100013f2:	83 c4 10             	add    esp,0x10
100013f5:	83 ec 08             	sub    esp,0x8
100013f8:	68 e6 b0 00 10       	push   0x1000b0e6	100013f9: R_386_32	.text
100013fd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001403:	50                   	push   eax
10001404:	e8 fc ff ff ff       	call   10001405 <createUser(char const*)+0x246>	10001405: R_386_PC32	strcpy
10001409:	83 c4 10             	add    esp,0x10
1000140c:	83 ec 08             	sub    esp,0x8
1000140f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001412:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001418:	50                   	push   eax
10001419:	e8 fc ff ff ff       	call   1000141a <createUser(char const*)+0x25b>	1000141a: R_386_PC32	strcat
1000141e:	83 c4 10             	add    esp,0x10
10001421:	83 ec 08             	sub    esp,0x8
10001424:	68 2b b1 00 10       	push   0x1000b12b	10001425: R_386_32	.text
10001429:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000142f:	50                   	push   eax
10001430:	e8 fc ff ff ff       	call   10001431 <createUser(char const*)+0x272>	10001431: R_386_PC32	strcat
10001435:	83 c4 10             	add    esp,0x10
10001438:	83 ec 08             	sub    esp,0x8
1000143b:	68 c0 01 00 00       	push   0x1c0
10001440:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001446:	50                   	push   eax
10001447:	e8 fc ff ff ff       	call   10001448 <createUser(char const*)+0x289>	10001448: R_386_PC32	mkdir(char const*, int)
1000144c:	83 c4 10             	add    esp,0x10
1000144f:	83 ec 08             	sub    esp,0x8
10001452:	68 33 b1 00 10       	push   0x1000b133	10001453: R_386_32	.text
10001457:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000145d:	50                   	push   eax
1000145e:	e8 fc ff ff ff       	call   1000145f <createUser(char const*)+0x2a0>	1000145f: R_386_PC32	strcpy
10001463:	83 c4 10             	add    esp,0x10
10001466:	83 ec 08             	sub    esp,0x8
10001469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000146c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001472:	50                   	push   eax
10001473:	e8 fc ff ff ff       	call   10001474 <createUser(char const*)+0x2b5>	10001474: R_386_PC32	strcat
10001478:	83 c4 10             	add    esp,0x10
1000147b:	83 ec 08             	sub    esp,0x8
1000147e:	68 c0 01 00 00       	push   0x1c0
10001483:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001489:	50                   	push   eax
1000148a:	e8 fc ff ff ff       	call   1000148b <createUser(char const*)+0x2cc>	1000148b: R_386_PC32	mkdir(char const*, int)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	83 ec 08             	sub    esp,0x8
10001495:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000149b:	50                   	push   eax
1000149c:	68 4c b1 00 10       	push   0x1000b14c	1000149d: R_386_32	.text
100014a1:	e8 fc ff ff ff       	call   100014a2 <createUser(char const*)+0x2e3>	100014a2: R_386_PC32	copytree(char*, char*)
100014a6:	83 c4 10             	add    esp,0x10
100014a9:	90                   	nop
100014aa:	c9                   	leave  
100014ab:	c3                   	ret    

100014ac <drawBootScreen()>:
100014ac:	55                   	push   ebp
100014ad:	89 e5                	mov    ebp,esp
100014af:	83 ec 18             	sub    esp,0x18
100014b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100014b3: R_386_32	term
100014b7:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	100014b9: R_386_32	safemode
100014bd:	84 d2                	test   dl,dl
100014bf:	74 07                	je     100014c8 <drawBootScreen()+0x1c>
100014c1:	ba 00 00 00 00       	mov    edx,0x0
100014c6:	eb 05                	jmp    100014cd <drawBootScreen()+0x21>
100014c8:	ba 0b 00 00 00       	mov    edx,0xb
100014cd:	83 ec 08             	sub    esp,0x8
100014d0:	52                   	push   edx
100014d1:	50                   	push   eax
100014d2:	e8 fc ff ff ff       	call   100014d3 <drawBootScreen()+0x27>	100014d3: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
100014d7:	83 c4 10             	add    esp,0x10
100014da:	a1 00 00 00 00       	mov    eax,ds:0x0	100014db: R_386_32	term
100014df:	83 ec 08             	sub    esp,0x8
100014e2:	6a 00                	push   0x0
100014e4:	50                   	push   eax
100014e5:	e8 fc ff ff ff       	call   100014e6 <drawBootScreen()+0x3a>	100014e6: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
100014ea:	83 c4 10             	add    esp,0x10
100014ed:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ee: R_386_32	term
100014f2:	83 ec 0c             	sub    esp,0xc
100014f5:	50                   	push   eax
100014f6:	e8 fc ff ff ff       	call   100014f7 <drawBootScreen()+0x4b>	100014f7: R_386_PC32	VgaText::clearScreen()
100014fb:	83 c4 10             	add    esp,0x10
100014fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ff: R_386_32	term
10001503:	83 ec 08             	sub    esp,0x8
10001506:	68 6b b1 00 10       	push   0x1000b16b	10001507: R_386_32	.text
1000150b:	50                   	push   eax
1000150c:	e8 fc ff ff ff       	call   1000150d <drawBootScreen()+0x61>	1000150d: R_386_PC32	VgaText::setTitle(char*)
10001511:	83 c4 10             	add    esp,0x10
10001514:	a1 00 00 00 00       	mov    eax,ds:0x0	10001515: R_386_32	term
10001519:	83 ec 08             	sub    esp,0x8
1000151c:	6a 00                	push   0x0
1000151e:	50                   	push   eax
1000151f:	e8 fc ff ff ff       	call   10001520 <drawBootScreen()+0x74>	10001520: R_386_PC32	VgaText::setTitleColour(VgaColour)
10001524:	83 c4 10             	add    esp,0x10
10001527:	a1 00 00 00 00       	mov    eax,ds:0x0	10001528: R_386_32	term
1000152c:	83 ec 08             	sub    esp,0x8
1000152f:	6a 00                	push   0x0
10001531:	50                   	push   eax
10001532:	e8 fc ff ff ff       	call   10001533 <drawBootScreen()+0x87>	10001533: R_386_PC32	VgaText::setTitleTextColour(VgaColour)
10001537:	83 c4 10             	add    esp,0x10
1000153a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000153b: R_386_32	term
1000153f:	83 ec 04             	sub    esp,0x4
10001542:	6a 00                	push   0x0
10001544:	6a 00                	push   0x0
10001546:	50                   	push   eax
10001547:	e8 fc ff ff ff       	call   10001548 <drawBootScreen()+0x9c>	10001548: R_386_PC32	VgaText::setCursor(int, int)
1000154c:	83 c4 10             	add    esp,0x10
1000154f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001556:	83 7d f4 4f          	cmp    DWORD PTR [ebp-0xc],0x4f
1000155a:	7f 19                	jg     10001575 <drawBootScreen()+0xc9>
1000155c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000155d: R_386_32	term
10001561:	6a 00                	push   0x0
10001563:	6a 00                	push   0x0
10001565:	6a 20                	push   0x20
10001567:	50                   	push   eax
10001568:	e8 fc ff ff ff       	call   10001569 <drawBootScreen()+0xbd>	10001569: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000156d:	83 c4 10             	add    esp,0x10
10001570:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001573:	eb e1                	jmp    10001556 <drawBootScreen()+0xaa>
10001575:	a0 00 00 00 00       	mov    al,ds:0x0	10001576: R_386_32	showSidebar
1000157a:	84 c0                	test   al,al
1000157c:	0f 84 e7 00 00 00    	je     10001669 <drawBootScreen()+0x1bd>
10001582:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10001589:	83 7d f0 18          	cmp    DWORD PTR [ebp-0x10],0x18
1000158d:	7f 41                	jg     100015d0 <drawBootScreen()+0x124>
1000158f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001590: R_386_32	term
10001594:	83 ec 04             	sub    esp,0x4
10001597:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000159a:	6a 00                	push   0x0
1000159c:	50                   	push   eax
1000159d:	e8 fc ff ff ff       	call   1000159e <drawBootScreen()+0xf2>	1000159e: R_386_PC32	VgaText::setCursor(int, int)
100015a2:	83 c4 10             	add    esp,0x10
100015a5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100015ac:	83 7d ec 0f          	cmp    DWORD PTR [ebp-0x14],0xf
100015b0:	7f 19                	jg     100015cb <drawBootScreen()+0x11f>
100015b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100015b3: R_386_32	term
100015b7:	6a 00                	push   0x0
100015b9:	6a 00                	push   0x0
100015bb:	6a 20                	push   0x20
100015bd:	50                   	push   eax
100015be:	e8 fc ff ff ff       	call   100015bf <drawBootScreen()+0x113>	100015bf: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100015c3:	83 c4 10             	add    esp,0x10
100015c6:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100015c9:	eb e1                	jmp    100015ac <drawBootScreen()+0x100>
100015cb:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100015ce:	eb b9                	jmp    10001589 <drawBootScreen()+0xdd>
100015d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100015d1: R_386_32	term
100015d5:	83 ec 04             	sub    esp,0x4
100015d8:	6a 01                	push   0x1
100015da:	6a 01                	push   0x1
100015dc:	50                   	push   eax
100015dd:	e8 fc ff ff ff       	call   100015de <drawBootScreen()+0x132>	100015de: R_386_PC32	VgaText::setCursor(int, int)
100015e2:	83 c4 10             	add    esp,0x10
100015e5:	a0 00 00 00 00       	mov    al,ds:0x0	100015e6: R_386_32	safemode
100015ea:	83 f0 01             	xor    eax,0x1
100015ed:	84 c0                	test   al,al
100015ef:	74 17                	je     10001608 <drawBootScreen()+0x15c>
100015f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100015f2: R_386_32	term
100015f6:	6a 00                	push   0x0
100015f8:	6a 0f                	push   0xf
100015fa:	68 6c b1 00 10       	push   0x1000b16c	100015fb: R_386_32	.text
100015ff:	50                   	push   eax
10001600:	e8 fc ff ff ff       	call   10001601 <drawBootScreen()+0x155>	10001601: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001605:	83 c4 10             	add    esp,0x10
10001608:	a1 00 00 00 00       	mov    eax,ds:0x0	10001609: R_386_32	term
1000160d:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	1000160f: R_386_32	safemode
10001613:	84 d2                	test   dl,dl
10001615:	74 07                	je     1000161e <drawBootScreen()+0x172>
10001617:	ba 0f 00 00 00       	mov    edx,0xf
1000161c:	eb 05                	jmp    10001623 <drawBootScreen()+0x177>
1000161e:	ba 0e 00 00 00       	mov    edx,0xe
10001623:	6a 00                	push   0x0
10001625:	52                   	push   edx
10001626:	68 ef b1 00 10       	push   0x1000b1ef	10001627: R_386_32	.text
1000162b:	50                   	push   eax
1000162c:	e8 fc ff ff ff       	call   1000162d <drawBootScreen()+0x181>	1000162d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001631:	83 c4 10             	add    esp,0x10
10001634:	a0 00 00 00 00       	mov    al,ds:0x0	10001635: R_386_32	safemode
10001639:	84 c0                	test   al,al
1000163b:	74 2c                	je     10001669 <drawBootScreen()+0x1bd>
1000163d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000163e: R_386_32	term
10001642:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10001644: R_386_32	safemode
10001648:	84 d2                	test   dl,dl
1000164a:	74 07                	je     10001653 <drawBootScreen()+0x1a7>
1000164c:	ba 0f 00 00 00       	mov    edx,0xf
10001651:	eb 05                	jmp    10001658 <drawBootScreen()+0x1ac>
10001653:	ba 0e 00 00 00       	mov    edx,0xe
10001658:	6a 00                	push   0x0
1000165a:	52                   	push   edx
1000165b:	68 0d b2 00 10       	push   0x1000b20d	1000165c: R_386_32	.text
10001660:	50                   	push   eax
10001661:	e8 fc ff ff ff       	call   10001662 <drawBootScreen()+0x1b6>	10001662: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001666:	83 c4 10             	add    esp,0x10
10001669:	a1 00 00 00 00       	mov    eax,ds:0x0	1000166a: R_386_32	term
1000166e:	83 ec 08             	sub    esp,0x8
10001671:	6a 0f                	push   0xf
10001673:	50                   	push   eax
10001674:	e8 fc ff ff ff       	call   10001675 <drawBootScreen()+0x1c9>	10001675: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
10001679:	83 c4 10             	add    esp,0x10
1000167c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000167d: R_386_32	term
10001681:	83 ec 08             	sub    esp,0x8
10001684:	6a 00                	push   0x0
10001686:	50                   	push   eax
10001687:	e8 fc ff ff ff       	call   10001688 <drawBootScreen()+0x1dc>	10001688: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
1000168c:	83 c4 10             	add    esp,0x10
1000168f:	90                   	nop
10001690:	c9                   	leave  
10001691:	c3                   	ret    

10001692 <drawBasicWindowX(int, int, int, int, char const*, bool)>:
10001692:	55                   	push   ebp
10001693:	89 e5                	mov    ebp,esp
10001695:	53                   	push   ebx
10001696:	83 ec 34             	sub    esp,0x34
10001699:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
1000169c:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
1000169f:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100016a2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100016a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100016ac:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
100016af:	7d 6c                	jge    1000171d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x8b>
100016b1:	a1 00 00 00 00       	mov    eax,ds:0x0	100016b2: R_386_32	term
100016b6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100016b9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100016bc:	01 ca                	add    edx,ecx
100016be:	83 ec 04             	sub    esp,0x4
100016c1:	52                   	push   edx
100016c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016c5:	50                   	push   eax
100016c6:	e8 fc ff ff ff       	call   100016c7 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x35>	100016c7: R_386_PC32	VgaText::setCursor(int, int)
100016cb:	83 c4 10             	add    esp,0x10
100016ce:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100016d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100016d8:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100016db:	7d 3b                	jge    10001718 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x86>
100016dd:	a1 00 00 00 00       	mov    eax,ds:0x0	100016de: R_386_32	term
100016e2:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100016e6:	74 07                	je     100016ef <drawBasicWindowX(int, int, int, int, char const*, bool)+0x5d>
100016e8:	b9 07 00 00 00       	mov    ecx,0x7
100016ed:	eb 05                	jmp    100016f4 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x62>
100016ef:	b9 0f 00 00 00       	mov    ecx,0xf
100016f4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100016f8:	74 07                	je     10001701 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x6f>
100016fa:	ba 07 00 00 00       	mov    edx,0x7
100016ff:	eb 05                	jmp    10001706 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x74>
10001701:	ba 0f 00 00 00       	mov    edx,0xf
10001706:	51                   	push   ecx
10001707:	52                   	push   edx
10001708:	6a 20                	push   0x20
1000170a:	50                   	push   eax
1000170b:	e8 fc ff ff ff       	call   1000170c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x7a>	1000170c: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001710:	83 c4 10             	add    esp,0x10
10001713:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10001716:	eb bd                	jmp    100016d5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x43>
10001718:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000171b:	eb 8c                	jmp    100016a9 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17>
1000171d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000171e: R_386_32	term
10001722:	83 ec 04             	sub    esp,0x4
10001725:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001728:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000172b:	50                   	push   eax
1000172c:	e8 fc ff ff ff       	call   1000172d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x9b>	1000172d: R_386_PC32	VgaText::setCursor(int, int)
10001731:	83 c4 10             	add    esp,0x10
10001734:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
1000173b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000173e:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001741:	7d 43                	jge    10001786 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xf4>
10001743:	a1 00 00 00 00       	mov    eax,ds:0x0	10001744: R_386_32	term
10001748:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	1000174a: R_386_32	safemode
1000174e:	84 d2                	test   dl,dl
10001750:	74 07                	je     10001759 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xc7>
10001752:	b9 00 00 00 00       	mov    ecx,0x0
10001757:	eb 05                	jmp    1000175e <drawBasicWindowX(int, int, int, int, char const*, bool)+0xcc>
10001759:	b9 01 00 00 00       	mov    ecx,0x1
1000175e:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10001760: R_386_32	safemode
10001764:	84 d2                	test   dl,dl
10001766:	74 07                	je     1000176f <drawBasicWindowX(int, int, int, int, char const*, bool)+0xdd>
10001768:	ba 00 00 00 00       	mov    edx,0x0
1000176d:	eb 05                	jmp    10001774 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe2>
1000176f:	ba 01 00 00 00       	mov    edx,0x1
10001774:	51                   	push   ecx
10001775:	52                   	push   edx
10001776:	6a 20                	push   0x20
10001778:	50                   	push   eax
10001779:	e8 fc ff ff ff       	call   1000177a <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe8>	1000177a: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000177e:	83 c4 10             	add    esp,0x10
10001781:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
10001784:	eb b5                	jmp    1000173b <drawBasicWindowX(int, int, int, int, char const*, bool)+0xa9>
10001786:	a1 00 00 00 00       	mov    eax,ds:0x0	10001787: R_386_32	term
1000178b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000178e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001791:	01 d1                	add    ecx,edx
10001793:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001796:	42                   	inc    edx
10001797:	83 ec 04             	sub    esp,0x4
1000179a:	51                   	push   ecx
1000179b:	52                   	push   edx
1000179c:	50                   	push   eax
1000179d:	e8 fc ff ff ff       	call   1000179e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x10c>	1000179e: R_386_PC32	VgaText::setCursor(int, int)
100017a2:	83 c4 10             	add    esp,0x10
100017a5:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
100017ac:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100017af:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100017b2:	7d 43                	jge    100017f7 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x165>
100017b4:	a1 00 00 00 00       	mov    eax,ds:0x0	100017b5: R_386_32	term
100017b9:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	100017bb: R_386_32	safemode
100017bf:	84 d2                	test   dl,dl
100017c1:	74 07                	je     100017ca <drawBasicWindowX(int, int, int, int, char const*, bool)+0x138>
100017c3:	b9 00 00 00 00       	mov    ecx,0x0
100017c8:	eb 05                	jmp    100017cf <drawBasicWindowX(int, int, int, int, char const*, bool)+0x13d>
100017ca:	b9 03 00 00 00       	mov    ecx,0x3
100017cf:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	100017d1: R_386_32	safemode
100017d5:	84 d2                	test   dl,dl
100017d7:	74 07                	je     100017e0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x14e>
100017d9:	ba 00 00 00 00       	mov    edx,0x0
100017de:	eb 05                	jmp    100017e5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x153>
100017e0:	ba 03 00 00 00       	mov    edx,0x3
100017e5:	51                   	push   ecx
100017e6:	52                   	push   edx
100017e7:	6a 20                	push   0x20
100017e9:	50                   	push   eax
100017ea:	e8 fc ff ff ff       	call   100017eb <drawBasicWindowX(int, int, int, int, char const*, bool)+0x159>	100017eb: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100017ef:	83 c4 10             	add    esp,0x10
100017f2:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
100017f5:	eb b5                	jmp    100017ac <drawBasicWindowX(int, int, int, int, char const*, bool)+0x11a>
100017f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100017fa:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100017fd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001800:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001803:	01 d0                	add    eax,edx
10001805:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001808:	0f 8d b3 00 00 00    	jge    100018c1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x22f>
1000180e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000180f: R_386_32	term
10001813:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001816:	8d 4a 01             	lea    ecx,[edx+0x1]
10001819:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
1000181c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000181f:	01 da                	add    edx,ebx
10001821:	83 ec 04             	sub    esp,0x4
10001824:	51                   	push   ecx
10001825:	52                   	push   edx
10001826:	50                   	push   eax
10001827:	e8 fc ff ff ff       	call   10001828 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x196>	10001828: R_386_PC32	VgaText::setCursor(int, int)
1000182c:	83 c4 10             	add    esp,0x10
1000182f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001830: R_386_32	term
10001834:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10001836: R_386_32	safemode
1000183a:	84 d2                	test   dl,dl
1000183c:	74 07                	je     10001845 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b3>
1000183e:	b9 00 00 00 00       	mov    ecx,0x0
10001843:	eb 05                	jmp    1000184a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b8>
10001845:	b9 03 00 00 00       	mov    ecx,0x3
1000184a:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	1000184c: R_386_32	safemode
10001850:	84 d2                	test   dl,dl
10001852:	74 07                	je     1000185b <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1c9>
10001854:	ba 00 00 00 00       	mov    edx,0x0
10001859:	eb 05                	jmp    10001860 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1ce>
1000185b:	ba 03 00 00 00       	mov    edx,0x3
10001860:	51                   	push   ecx
10001861:	52                   	push   edx
10001862:	6a 20                	push   0x20
10001864:	50                   	push   eax
10001865:	e8 fc ff ff ff       	call   10001866 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1d4>	10001866: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000186a:	83 c4 10             	add    esp,0x10
1000186d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001870:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001873:	01 d0                	add    eax,edx
10001875:	48                   	dec    eax
10001876:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001879:	74 3e                	je     100018b9 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x227>
1000187b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000187c: R_386_32	term
10001880:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001883:	42                   	inc    edx
10001884:	83 ec 04             	sub    esp,0x4
10001887:	52                   	push   edx
10001888:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000188b:	50                   	push   eax
1000188c:	e8 fc ff ff ff       	call   1000188d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1fb>	1000188d: R_386_PC32	VgaText::setCursor(int, int)
10001891:	83 c4 10             	add    esp,0x10
10001894:	a1 00 00 00 00       	mov    eax,ds:0x0	10001895: R_386_32	term
10001899:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000189d:	74 07                	je     100018a6 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x214>
1000189f:	ba 07 00 00 00       	mov    edx,0x7
100018a4:	eb 05                	jmp    100018ab <drawBasicWindowX(int, int, int, int, char const*, bool)+0x219>
100018a6:	ba 0f 00 00 00       	mov    edx,0xf
100018ab:	52                   	push   edx
100018ac:	6a 00                	push   0x0
100018ae:	6a dd                	push   0xffffffdd
100018b0:	50                   	push   eax
100018b1:	e8 fc ff ff ff       	call   100018b2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x220>	100018b2: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100018b6:	83 c4 10             	add    esp,0x10
100018b9:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100018bc:	e9 3c ff ff ff       	jmp    100017fd <drawBasicWindowX(int, int, int, int, char const*, bool)+0x16b>
100018c1:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100018c4:	83 ec 0c             	sub    esp,0xc
100018c7:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100018ca:	e8 fc ff ff ff       	call   100018cb <drawBasicWindowX(int, int, int, int, char const*, bool)+0x239>	100018cb: R_386_PC32	strlen
100018cf:	83 c4 10             	add    esp,0x10
100018d2:	29 c3                	sub    ebx,eax
100018d4:	89 d8                	mov    eax,ebx
100018d6:	d1 e8                	shr    eax,1
100018d8:	48                   	dec    eax
100018d9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100018dc:	a1 00 00 00 00       	mov    eax,ds:0x0	100018dd: R_386_32	term
100018e1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100018e4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100018e7:	01 ca                	add    edx,ecx
100018e9:	83 ec 04             	sub    esp,0x4
100018ec:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100018ef:	52                   	push   edx
100018f0:	50                   	push   eax
100018f1:	e8 fc ff ff ff       	call   100018f2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x260>	100018f2: R_386_PC32	VgaText::setCursor(int, int)
100018f6:	83 c4 10             	add    esp,0x10
100018f9:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10001900:	83 ec 0c             	sub    esp,0xc
10001903:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001906:	e8 fc ff ff ff       	call   10001907 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x275>	10001907: R_386_PC32	strlen
1000190b:	83 c4 10             	add    esp,0x10
1000190e:	89 c2                	mov    edx,eax
10001910:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001913:	39 c2                	cmp    edx,eax
10001915:	76 3a                	jbe    10001951 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x2bf>
10001917:	a1 00 00 00 00       	mov    eax,ds:0x0	10001918: R_386_32	term
1000191c:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	1000191e: R_386_32	safemode
10001922:	84 d2                	test   dl,dl
10001924:	74 07                	je     1000192d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x29b>
10001926:	b9 00 00 00 00       	mov    ecx,0x0
1000192b:	eb 05                	jmp    10001932 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x2a0>
1000192d:	b9 01 00 00 00       	mov    ecx,0x1
10001932:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
10001935:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001938:	01 da                	add    edx,ebx
1000193a:	8a 12                	mov    dl,BYTE PTR [edx]
1000193c:	0f be d2             	movsx  edx,dl
1000193f:	51                   	push   ecx
10001940:	6a 0f                	push   0xf
10001942:	52                   	push   edx
10001943:	50                   	push   eax
10001944:	e8 fc ff ff ff       	call   10001945 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x2b3>	10001945: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001949:	83 c4 10             	add    esp,0x10
1000194c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
1000194f:	eb af                	jmp    10001900 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x26e>
10001951:	90                   	nop
10001952:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001955:	c9                   	leave  
10001956:	c3                   	ret    

10001957 <drawBasicWindow(int, int, int, int, char const*)>:
10001957:	55                   	push   ebp
10001958:	89 e5                	mov    ebp,esp
1000195a:	83 ec 08             	sub    esp,0x8
1000195d:	83 ec 08             	sub    esp,0x8
10001960:	6a 00                	push   0x0
10001962:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001965:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10001968:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000196b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000196e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001971:	e8 fc ff ff ff       	call   10001972 <drawBasicWindow(int, int, int, int, char const*)+0x1b>	10001972: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10001976:	83 c4 20             	add    esp,0x20
10001979:	90                   	nop
1000197a:	c9                   	leave  
1000197b:	c3                   	ret    

1000197c <lookupHex(char)>:
1000197c:	55                   	push   ebp
1000197d:	89 e5                	mov    ebp,esp
1000197f:	83 ec 04             	sub    esp,0x4
10001982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001985:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
10001988:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
1000198c:	7e 0f                	jle    1000199d <lookupHex(char)+0x21>
1000198e:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
10001992:	7f 09                	jg     1000199d <lookupHex(char)+0x21>
10001994:	0f be 45 fc          	movsx  eax,BYTE PTR [ebp-0x4]
10001998:	83 e8 30             	sub    eax,0x30
1000199b:	eb 1c                	jmp    100019b9 <lookupHex(char)+0x3d>
1000199d:	80 7d fc 40          	cmp    BYTE PTR [ebp-0x4],0x40
100019a1:	7e 0f                	jle    100019b2 <lookupHex(char)+0x36>
100019a3:	80 7d fc 46          	cmp    BYTE PTR [ebp-0x4],0x46
100019a7:	7f 09                	jg     100019b2 <lookupHex(char)+0x36>
100019a9:	0f be 45 fc          	movsx  eax,BYTE PTR [ebp-0x4]
100019ad:	83 e8 37             	sub    eax,0x37
100019b0:	eb 07                	jmp    100019b9 <lookupHex(char)+0x3d>
100019b2:	0f be 45 fc          	movsx  eax,BYTE PTR [ebp-0x4]
100019b6:	83 e8 57             	sub    eax,0x57
100019b9:	c9                   	leave  
100019ba:	c3                   	ret    

100019bb <runRemoteInstall(void*)>:
100019bb:	55                   	push   ebp
100019bc:	89 e5                	mov    ebp,esp
100019be:	56                   	push   esi
100019bf:	53                   	push   ebx
100019c0:	83 ec 40             	sub    esp,0x40
100019c3:	f0 ff 0d 00 00 00 00 	lock dec DWORD PTR ds:0x0	100019c6: R_386_32	irqDisableCounter
100019ca:	a1 00 00 00 00       	mov    eax,ds:0x0	100019cb: R_386_32	irqDisableCounter
100019cf:	85 c0                	test   eax,eax
100019d1:	75 01                	jne    100019d4 <runRemoteInstall(void*)+0x19>
100019d3:	fb                   	sti    
100019d4:	c7 05 00 00 00 00 00 28 00 00 	mov    DWORD PTR ds:0x0,0x2800	100019d6: R_386_32	remoteInstallScript
100019de:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100019e5:	6a 0c                	push   0xc
100019e7:	6a 00                	push   0x0
100019e9:	8d 45 c4             	lea    eax,[ebp-0x3c]
100019ec:	50                   	push   eax
100019ed:	e8 fc ff ff ff       	call   100019ee <runRemoteInstall(void*)+0x33>	100019ee: R_386_PC32	memset
100019f2:	83 c4 0c             	add    esp,0xc
100019f5:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100019f7: R_386_32	remoteInstallScript
100019fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100019fe:	01 d0                	add    eax,edx
10001a00:	8a 00                	mov    al,BYTE PTR [eax]
10001a02:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
10001a05:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a06: R_386_32	remoteInstallScript
10001a0a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001a0d:	42                   	inc    edx
10001a0e:	01 d0                	add    eax,edx
10001a10:	8a 00                	mov    al,BYTE PTR [eax]
10001a12:	88 45 e2             	mov    BYTE PTR [ebp-0x1e],al
10001a15:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a16: R_386_32	remoteInstallScript
10001a1a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001a1d:	83 c2 02             	add    edx,0x2
10001a20:	01 d0                	add    eax,edx
10001a22:	8a 00                	mov    al,BYTE PTR [eax]
10001a24:	88 45 e1             	mov    BYTE PTR [ebp-0x1f],al
10001a27:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a28: R_386_32	remoteInstallScript
10001a2c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001a2f:	83 c2 03             	add    edx,0x3
10001a32:	01 d0                	add    eax,edx
10001a34:	8a 00                	mov    al,BYTE PTR [eax]
10001a36:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
10001a39:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a3a: R_386_32	remoteInstallScript
10001a3e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001a41:	83 c2 04             	add    edx,0x4
10001a44:	01 d0                	add    eax,edx
10001a46:	8a 00                	mov    al,BYTE PTR [eax]
10001a48:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
10001a4b:	0f be 75 df          	movsx  esi,BYTE PTR [ebp-0x21]
10001a4f:	0f be 5d e0          	movsx  ebx,BYTE PTR [ebp-0x20]
10001a53:	0f be 4d e1          	movsx  ecx,BYTE PTR [ebp-0x1f]
10001a57:	0f be 55 e2          	movsx  edx,BYTE PTR [ebp-0x1e]
10001a5b:	0f be 45 e3          	movsx  eax,BYTE PTR [ebp-0x1d]
10001a5f:	83 ec 08             	sub    esp,0x8
10001a62:	56                   	push   esi
10001a63:	53                   	push   ebx
10001a64:	51                   	push   ecx
10001a65:	52                   	push   edx
10001a66:	50                   	push   eax
10001a67:	68 22 b2 00 10       	push   0x1000b222	10001a68: R_386_32	.text
10001a6c:	e8 fc ff ff ff       	call   10001a6d <runRemoteInstall(void*)+0xb2>	10001a6d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a71:	83 c4 20             	add    esp,0x20
10001a74:	80 7d e3 73          	cmp    BYTE PTR [ebp-0x1d],0x73
10001a78:	75 11                	jne    10001a8b <runRemoteInstall(void*)+0xd0>
10001a7a:	8a 45 e2             	mov    al,BYTE PTR [ebp-0x1e]
10001a7d:	a2 00 00 00 00       	mov    ds:0x0,al	10001a7e: R_386_32	installKey
10001a82:	83 45 f4 02          	add    DWORD PTR [ebp-0xc],0x2
10001a86:	e9 6a ff ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001a8b:	80 7d e3 46          	cmp    BYTE PTR [ebp-0x1d],0x46
10001a8f:	74 0a                	je     10001a9b <runRemoteInstall(void*)+0xe0>
10001a91:	80 7d e3 66          	cmp    BYTE PTR [ebp-0x1d],0x66
10001a95:	0f 85 e4 00 00 00    	jne    10001b7f <runRemoteInstall(void*)+0x1c4>
10001a9b:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10001aa2:	0f be 45 e1          	movsx  eax,BYTE PTR [ebp-0x1f]
10001aa6:	83 ec 0c             	sub    esp,0xc
10001aa9:	50                   	push   eax
10001aaa:	e8 fc ff ff ff       	call   10001aab <runRemoteInstall(void*)+0xf0>	10001aab: R_386_PC32	lookupHex(char)
10001aaf:	83 c4 10             	add    esp,0x10
10001ab2:	c1 e0 08             	shl    eax,0x8
10001ab5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001ab8:	0f be 45 e0          	movsx  eax,BYTE PTR [ebp-0x20]
10001abc:	83 ec 0c             	sub    esp,0xc
10001abf:	50                   	push   eax
10001ac0:	e8 fc ff ff ff       	call   10001ac1 <runRemoteInstall(void*)+0x106>	10001ac1: R_386_PC32	lookupHex(char)
10001ac5:	83 c4 10             	add    esp,0x10
10001ac8:	c1 e0 04             	shl    eax,0x4
10001acb:	01 45 d0             	add    DWORD PTR [ebp-0x30],eax
10001ace:	0f be 45 df          	movsx  eax,BYTE PTR [ebp-0x21]
10001ad2:	83 ec 0c             	sub    esp,0xc
10001ad5:	50                   	push   eax
10001ad6:	e8 fc ff ff ff       	call   10001ad7 <runRemoteInstall(void*)+0x11c>	10001ad7: R_386_PC32	lookupHex(char)
10001adb:	83 c4 10             	add    esp,0x10
10001ade:	01 45 d0             	add    DWORD PTR [ebp-0x30],eax
10001ae1:	83 45 f4 05          	add    DWORD PTR [ebp-0xc],0x5
10001ae5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001aec:	80 7d e2 30          	cmp    BYTE PTR [ebp-0x1e],0x30
10001af0:	75 06                	jne    10001af8 <runRemoteInstall(void*)+0x13d>
10001af2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001af5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001af8:	80 7d e2 31          	cmp    BYTE PTR [ebp-0x1e],0x31
10001afc:	75 06                	jne    10001b04 <runRemoteInstall(void*)+0x149>
10001afe:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10001b01:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001b04:	80 7d e2 32          	cmp    BYTE PTR [ebp-0x1e],0x32
10001b08:	75 06                	jne    10001b10 <runRemoteInstall(void*)+0x155>
10001b0a:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001b0d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001b10:	80 7d e2 33          	cmp    BYTE PTR [ebp-0x1e],0x33
10001b14:	75 06                	jne    10001b1c <runRemoteInstall(void*)+0x161>
10001b16:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10001b19:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001b1c:	80 7d e2 34          	cmp    BYTE PTR [ebp-0x1e],0x34
10001b20:	75 0b                	jne    10001b2d <runRemoteInstall(void*)+0x172>
10001b22:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b23: R_386_32	term
10001b27:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10001b2a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001b2d:	80 7d e2 35          	cmp    BYTE PTR [ebp-0x1e],0x35
10001b31:	75 0b                	jne    10001b3e <runRemoteInstall(void*)+0x183>
10001b33:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b34: R_386_32	term
10001b38:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10001b3b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001b3e:	80 7d e3 46          	cmp    BYTE PTR [ebp-0x1d],0x46
10001b42:	75 11                	jne    10001b55 <runRemoteInstall(void*)+0x19a>
10001b44:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10001b47:	3b 45 d0             	cmp    eax,DWORD PTR [ebp-0x30]
10001b4a:	75 09                	jne    10001b55 <runRemoteInstall(void*)+0x19a>
10001b4c:	83 45 f4 05          	add    DWORD PTR [ebp-0xc],0x5
10001b50:	e9 7c 05 00 00       	jmp    100020d1 <runRemoteInstall(void*)+0x716>
10001b55:	80 7d e3 66          	cmp    BYTE PTR [ebp-0x1d],0x66
10001b59:	0f 85 72 05 00 00    	jne    100020d1 <runRemoteInstall(void*)+0x716>
10001b5f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10001b62:	3b 45 d0             	cmp    eax,DWORD PTR [ebp-0x30]
10001b65:	0f 84 66 05 00 00    	je     100020d1 <runRemoteInstall(void*)+0x716>
10001b6b:	83 ec 08             	sub    esp,0x8
10001b6e:	6a 00                	push   0x0
10001b70:	6a 64                	push   0x64
10001b72:	e8 fc ff ff ff       	call   10001b73 <runRemoteInstall(void*)+0x1b8>	10001b73: R_386_PC32	milliTenthSleep(unsigned long long)
10001b77:	83 c4 10             	add    esp,0x10
10001b7a:	e9 23 ff ff ff       	jmp    10001aa2 <runRemoteInstall(void*)+0xe7>
10001b7f:	80 7d e3 7b          	cmp    BYTE PTR [ebp-0x1d],0x7b
10001b83:	75 4a                	jne    10001bcf <runRemoteInstall(void*)+0x214>
10001b85:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001b88:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10001b8a: R_386_32	remoteInstallScript
10001b8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001b91:	8d 50 01             	lea    edx,[eax+0x1]
10001b94:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001b97:	01 c8                	add    eax,ecx
10001b99:	8a 00                	mov    al,BYTE PTR [eax]
10001b9b:	88 45 de             	mov    BYTE PTR [ebp-0x22],al
10001b9e:	80 7d de 7d          	cmp    BYTE PTR [ebp-0x22],0x7d
10001ba2:	0f 84 2f 05 00 00    	je     100020d7 <runRemoteInstall(void*)+0x71c>
10001ba8:	8a 45 de             	mov    al,BYTE PTR [ebp-0x22]
10001bab:	a2 00 00 00 00       	mov    ds:0x0,al	10001bac: R_386_32	installKey
10001bb0:	a0 00 00 00 00       	mov    al,ds:0x0	10001bb1: R_386_32	installKey
10001bb5:	84 c0                	test   al,al
10001bb7:	0f 95 c0             	setne  al
10001bba:	84 c0                	test   al,al
10001bbc:	74 ca                	je     10001b88 <runRemoteInstall(void*)+0x1cd>
10001bbe:	83 ec 08             	sub    esp,0x8
10001bc1:	6a 00                	push   0x0
10001bc3:	6a 64                	push   0x64
10001bc5:	e8 fc ff ff ff       	call   10001bc6 <runRemoteInstall(void*)+0x20b>	10001bc6: R_386_PC32	milliTenthSleep(unsigned long long)
10001bca:	83 c4 10             	add    esp,0x10
10001bcd:	eb e1                	jmp    10001bb0 <runRemoteInstall(void*)+0x1f5>
10001bcf:	80 7d e3 71          	cmp    BYTE PTR [ebp-0x1d],0x71
10001bd3:	75 2d                	jne    10001c02 <runRemoteInstall(void*)+0x247>
10001bd5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001bd8:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	10001bda: R_386_32	installKey
10001bdf:	a0 00 00 00 00       	mov    al,ds:0x0	10001be0: R_386_32	installKey
10001be4:	84 c0                	test   al,al
10001be6:	0f 95 c0             	setne  al
10001be9:	84 c0                	test   al,al
10001beb:	0f 84 04 fe ff ff    	je     100019f5 <runRemoteInstall(void*)+0x3a>
10001bf1:	83 ec 08             	sub    esp,0x8
10001bf4:	6a 00                	push   0x0
10001bf6:	6a 64                	push   0x64
10001bf8:	e8 fc ff ff ff       	call   10001bf9 <runRemoteInstall(void*)+0x23e>	10001bf9: R_386_PC32	milliTenthSleep(unsigned long long)
10001bfd:	83 c4 10             	add    esp,0x10
10001c00:	eb dd                	jmp    10001bdf <runRemoteInstall(void*)+0x224>
10001c02:	80 7d e3 57          	cmp    BYTE PTR [ebp-0x1d],0x57
10001c06:	0f 85 86 00 00 00    	jne    10001c92 <runRemoteInstall(void*)+0x2d7>
10001c0c:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001c10:	83 ec 0c             	sub    esp,0xc
10001c13:	50                   	push   eax
10001c14:	e8 fc ff ff ff       	call   10001c15 <runRemoteInstall(void*)+0x25a>	10001c15: R_386_PC32	lookupHex(char)
10001c19:	83 c4 10             	add    esp,0x10
10001c1c:	c1 e0 04             	shl    eax,0x4
10001c1f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001c22:	0f be 45 e1          	movsx  eax,BYTE PTR [ebp-0x1f]
10001c26:	83 ec 0c             	sub    esp,0xc
10001c29:	50                   	push   eax
10001c2a:	e8 fc ff ff ff       	call   10001c2b <runRemoteInstall(void*)+0x270>	10001c2b: R_386_PC32	lookupHex(char)
10001c2f:	83 c4 10             	add    esp,0x10
10001c32:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
10001c35:	83 45 f4 03          	add    DWORD PTR [ebp-0xc],0x3
10001c39:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
10001c3c:	89 d0                	mov    eax,edx
10001c3e:	c1 e0 02             	shl    eax,0x2
10001c41:	01 d0                	add    eax,edx
10001c43:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10001c4a:	01 d0                	add    eax,edx
10001c4c:	c1 e0 02             	shl    eax,0x2
10001c4f:	83 ec 08             	sub    esp,0x8
10001c52:	50                   	push   eax
10001c53:	68 30 b2 00 10       	push   0x1000b230	10001c54: R_386_32	.text
10001c58:	e8 fc ff ff ff       	call   10001c59 <runRemoteInstall(void*)+0x29e>	10001c59: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c5d:	83 c4 10             	add    esp,0x10
10001c60:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
10001c63:	89 d0                	mov    eax,edx
10001c65:	c1 e0 02             	shl    eax,0x2
10001c68:	01 d0                	add    eax,edx
10001c6a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10001c71:	01 d0                	add    eax,edx
10001c73:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10001c7a:	01 d0                	add    eax,edx
10001c7c:	c1 e0 03             	shl    eax,0x3
10001c7f:	99                   	cdq    
10001c80:	83 ec 08             	sub    esp,0x8
10001c83:	52                   	push   edx
10001c84:	50                   	push   eax
10001c85:	e8 fc ff ff ff       	call   10001c86 <runRemoteInstall(void*)+0x2cb>	10001c86: R_386_PC32	milliTenthSleep(unsigned long long)
10001c8a:	83 c4 10             	add    esp,0x10
10001c8d:	e9 63 fd ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001c92:	80 7d e3 67          	cmp    BYTE PTR [ebp-0x1d],0x67
10001c96:	75 60                	jne    10001cf8 <runRemoteInstall(void*)+0x33d>
10001c98:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001c9c:	83 ec 0c             	sub    esp,0xc
10001c9f:	50                   	push   eax
10001ca0:	e8 fc ff ff ff       	call   10001ca1 <runRemoteInstall(void*)+0x2e6>	10001ca1: R_386_PC32	lookupHex(char)
10001ca5:	83 c4 10             	add    esp,0x10
10001ca8:	c1 e0 0c             	shl    eax,0xc
10001cab:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001cae:	0f be 45 e1          	movsx  eax,BYTE PTR [ebp-0x1f]
10001cb2:	83 ec 0c             	sub    esp,0xc
10001cb5:	50                   	push   eax
10001cb6:	e8 fc ff ff ff       	call   10001cb7 <runRemoteInstall(void*)+0x2fc>	10001cb7: R_386_PC32	lookupHex(char)
10001cbb:	83 c4 10             	add    esp,0x10
10001cbe:	c1 e0 08             	shl    eax,0x8
10001cc1:	01 45 d4             	add    DWORD PTR [ebp-0x2c],eax
10001cc4:	0f be 45 e0          	movsx  eax,BYTE PTR [ebp-0x20]
10001cc8:	83 ec 0c             	sub    esp,0xc
10001ccb:	50                   	push   eax
10001ccc:	e8 fc ff ff ff       	call   10001ccd <runRemoteInstall(void*)+0x312>	10001ccd: R_386_PC32	lookupHex(char)
10001cd1:	83 c4 10             	add    esp,0x10
10001cd4:	c1 e0 04             	shl    eax,0x4
10001cd7:	01 45 d4             	add    DWORD PTR [ebp-0x2c],eax
10001cda:	0f be 45 df          	movsx  eax,BYTE PTR [ebp-0x21]
10001cde:	83 ec 0c             	sub    esp,0xc
10001ce1:	50                   	push   eax
10001ce2:	e8 fc ff ff ff       	call   10001ce3 <runRemoteInstall(void*)+0x328>	10001ce3: R_386_PC32	lookupHex(char)
10001ce7:	83 c4 10             	add    esp,0x10
10001cea:	01 45 d4             	add    DWORD PTR [ebp-0x2c],eax
10001ced:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10001cf0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001cf3:	e9 fd fc ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001cf8:	80 7d e3 4e          	cmp    BYTE PTR [ebp-0x1d],0x4e
10001cfc:	75 08                	jne    10001d06 <runRemoteInstall(void*)+0x34b>
10001cfe:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001d01:	e9 ef fc ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001d06:	80 7d e3 58          	cmp    BYTE PTR [ebp-0x1d],0x58
10001d0a:	75 1b                	jne    10001d27 <runRemoteInstall(void*)+0x36c>
10001d0c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001d0e: R_386_32	remoteInstall
10001d13:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001d15: R_386_32	blockUserTyping
10001d1a:	90                   	nop
10001d1b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001d1d: R_386_32	blockUserTyping
10001d22:	e9 b6 03 00 00       	jmp    100020dd <runRemoteInstall(void*)+0x722>
10001d27:	80 7d e3 53          	cmp    BYTE PTR [ebp-0x1d],0x53
10001d2b:	0f 85 80 00 00 00    	jne    10001db1 <runRemoteInstall(void*)+0x3f6>
10001d31:	0f be 45 e1          	movsx  eax,BYTE PTR [ebp-0x1f]
10001d35:	83 ec 0c             	sub    esp,0xc
10001d38:	50                   	push   eax
10001d39:	e8 fc ff ff ff       	call   10001d3a <runRemoteInstall(void*)+0x37f>	10001d3a: R_386_PC32	lookupHex(char)
10001d3e:	83 c4 10             	add    esp,0x10
10001d41:	89 c2                	mov    edx,eax
10001d43:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001d47:	83 e8 31             	sub    eax,0x31
10001d4a:	c1 e2 08             	shl    edx,0x8
10001d4d:	89 54 85 c4          	mov    DWORD PTR [ebp+eax*4-0x3c],edx
10001d51:	0f be 45 e0          	movsx  eax,BYTE PTR [ebp-0x20]
10001d55:	83 ec 0c             	sub    esp,0xc
10001d58:	50                   	push   eax
10001d59:	e8 fc ff ff ff       	call   10001d5a <runRemoteInstall(void*)+0x39f>	10001d5a: R_386_PC32	lookupHex(char)
10001d5e:	83 c4 10             	add    esp,0x10
10001d61:	c1 e0 04             	shl    eax,0x4
10001d64:	89 c1                	mov    ecx,eax
10001d66:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001d6a:	83 e8 31             	sub    eax,0x31
10001d6d:	8b 54 85 c4          	mov    edx,DWORD PTR [ebp+eax*4-0x3c]
10001d71:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001d75:	83 e8 31             	sub    eax,0x31
10001d78:	01 ca                	add    edx,ecx
10001d7a:	89 54 85 c4          	mov    DWORD PTR [ebp+eax*4-0x3c],edx
10001d7e:	0f be 45 df          	movsx  eax,BYTE PTR [ebp-0x21]
10001d82:	83 ec 0c             	sub    esp,0xc
10001d85:	50                   	push   eax
10001d86:	e8 fc ff ff ff       	call   10001d87 <runRemoteInstall(void*)+0x3cc>	10001d87: R_386_PC32	lookupHex(char)
10001d8b:	83 c4 10             	add    esp,0x10
10001d8e:	89 c1                	mov    ecx,eax
10001d90:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001d94:	83 e8 31             	sub    eax,0x31
10001d97:	8b 54 85 c4          	mov    edx,DWORD PTR [ebp+eax*4-0x3c]
10001d9b:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001d9f:	83 e8 31             	sub    eax,0x31
10001da2:	01 ca                	add    edx,ecx
10001da4:	89 54 85 c4          	mov    DWORD PTR [ebp+eax*4-0x3c],edx
10001da8:	83 45 f4 05          	add    DWORD PTR [ebp-0xc],0x5
10001dac:	e9 44 fc ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001db1:	80 7d e3 2b          	cmp    BYTE PTR [ebp-0x1d],0x2b
10001db5:	75 19                	jne    10001dd0 <runRemoteInstall(void*)+0x415>
10001db7:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001dbb:	83 e8 31             	sub    eax,0x31
10001dbe:	8b 54 85 c4          	mov    edx,DWORD PTR [ebp+eax*4-0x3c]
10001dc2:	42                   	inc    edx
10001dc3:	89 54 85 c4          	mov    DWORD PTR [ebp+eax*4-0x3c],edx
10001dc7:	83 45 f4 02          	add    DWORD PTR [ebp-0xc],0x2
10001dcb:	e9 25 fc ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001dd0:	80 7d e3 2d          	cmp    BYTE PTR [ebp-0x1d],0x2d
10001dd4:	75 19                	jne    10001def <runRemoteInstall(void*)+0x434>
10001dd6:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001dda:	83 e8 31             	sub    eax,0x31
10001ddd:	8b 54 85 c4          	mov    edx,DWORD PTR [ebp+eax*4-0x3c]
10001de1:	4a                   	dec    edx
10001de2:	89 54 85 c4          	mov    DWORD PTR [ebp+eax*4-0x3c],edx
10001de6:	83 45 f4 02          	add    DWORD PTR [ebp-0xc],0x2
10001dea:	e9 06 fc ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001def:	80 7d e3 30          	cmp    BYTE PTR [ebp-0x1d],0x30
10001df3:	75 18                	jne    10001e0d <runRemoteInstall(void*)+0x452>
10001df5:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001df9:	83 e8 31             	sub    eax,0x31
10001dfc:	c7 44 85 c4 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x3c],0x0
10001e04:	83 45 f4 02          	add    DWORD PTR [ebp-0xc],0x2
10001e08:	e9 e8 fb ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001e0d:	80 7d e3 3c          	cmp    BYTE PTR [ebp-0x1d],0x3c
10001e11:	0f 85 86 00 00 00    	jne    10001e9d <runRemoteInstall(void*)+0x4e2>
10001e17:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10001e1e:	80 7d e1 30          	cmp    BYTE PTR [ebp-0x1f],0x30
10001e22:	75 06                	jne    10001e2a <runRemoteInstall(void*)+0x46f>
10001e24:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001e27:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001e2a:	80 7d e1 31          	cmp    BYTE PTR [ebp-0x1f],0x31
10001e2e:	75 06                	jne    10001e36 <runRemoteInstall(void*)+0x47b>
10001e30:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10001e33:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001e36:	80 7d e1 32          	cmp    BYTE PTR [ebp-0x1f],0x32
10001e3a:	75 06                	jne    10001e42 <runRemoteInstall(void*)+0x487>
10001e3c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001e3f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001e42:	80 7d e1 33          	cmp    BYTE PTR [ebp-0x1f],0x33
10001e46:	75 06                	jne    10001e4e <runRemoteInstall(void*)+0x493>
10001e48:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10001e4b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001e4e:	80 7d e1 35          	cmp    BYTE PTR [ebp-0x1f],0x35
10001e52:	75 0b                	jne    10001e5f <runRemoteInstall(void*)+0x4a4>
10001e54:	a1 00 00 00 00       	mov    eax,ds:0x0	10001e55: R_386_32	term
10001e59:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10001e5c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001e5f:	80 7d e1 36          	cmp    BYTE PTR [ebp-0x1f],0x36
10001e63:	75 0b                	jne    10001e70 <runRemoteInstall(void*)+0x4b5>
10001e65:	a1 00 00 00 00       	mov    eax,ds:0x0	10001e66: R_386_32	term
10001e6a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10001e6d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001e70:	80 7d e2 31          	cmp    BYTE PTR [ebp-0x1e],0x31
10001e74:	75 06                	jne    10001e7c <runRemoteInstall(void*)+0x4c1>
10001e76:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001e79:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001e7c:	80 7d e2 32          	cmp    BYTE PTR [ebp-0x1e],0x32
10001e80:	75 06                	jne    10001e88 <runRemoteInstall(void*)+0x4cd>
10001e82:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001e85:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10001e88:	80 7d e2 33          	cmp    BYTE PTR [ebp-0x1e],0x33
10001e8c:	75 06                	jne    10001e94 <runRemoteInstall(void*)+0x4d9>
10001e8e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001e91:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001e94:	83 45 f4 03          	add    DWORD PTR [ebp-0xc],0x3
10001e98:	e9 58 fb ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001e9d:	80 7d e3 3e          	cmp    BYTE PTR [ebp-0x1d],0x3e
10001ea1:	0f 85 8f 00 00 00    	jne    10001f36 <runRemoteInstall(void*)+0x57b>
10001ea7:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10001eae:	80 7d e1 30          	cmp    BYTE PTR [ebp-0x1f],0x30
10001eb2:	75 06                	jne    10001eba <runRemoteInstall(void*)+0x4ff>
10001eb4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001eb7:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001eba:	80 7d e1 31          	cmp    BYTE PTR [ebp-0x1f],0x31
10001ebe:	75 06                	jne    10001ec6 <runRemoteInstall(void*)+0x50b>
10001ec0:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10001ec3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001ec6:	80 7d e1 32          	cmp    BYTE PTR [ebp-0x1f],0x32
10001eca:	75 06                	jne    10001ed2 <runRemoteInstall(void*)+0x517>
10001ecc:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001ecf:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001ed2:	80 7d e1 33          	cmp    BYTE PTR [ebp-0x1f],0x33
10001ed6:	75 06                	jne    10001ede <runRemoteInstall(void*)+0x523>
10001ed8:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10001edb:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001ede:	80 7d e1 35          	cmp    BYTE PTR [ebp-0x1f],0x35
10001ee2:	75 0b                	jne    10001eef <runRemoteInstall(void*)+0x534>
10001ee4:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ee5: R_386_32	term
10001ee9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10001eec:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001eef:	80 7d e1 36          	cmp    BYTE PTR [ebp-0x1f],0x36
10001ef3:	75 0b                	jne    10001f00 <runRemoteInstall(void*)+0x545>
10001ef5:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ef6: R_386_32	term
10001efa:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10001efd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001f00:	80 7d e2 31          	cmp    BYTE PTR [ebp-0x1e],0x31
10001f04:	75 09                	jne    10001f0f <runRemoteInstall(void*)+0x554>
10001f06:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10001f09:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
10001f0c:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001f0f:	80 7d e2 32          	cmp    BYTE PTR [ebp-0x1e],0x32
10001f13:	75 09                	jne    10001f1e <runRemoteInstall(void*)+0x563>
10001f15:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001f18:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
10001f1b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10001f1e:	80 7d e2 33          	cmp    BYTE PTR [ebp-0x1e],0x33
10001f22:	75 09                	jne    10001f2d <runRemoteInstall(void*)+0x572>
10001f24:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10001f27:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
10001f2a:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001f2d:	83 45 f4 03          	add    DWORD PTR [ebp-0xc],0x3
10001f31:	e9 bf fa ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001f36:	80 7d e3 63          	cmp    BYTE PTR [ebp-0x1d],0x63
10001f3a:	75 0f                	jne    10001f4b <runRemoteInstall(void*)+0x590>
10001f3c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001f3e: R_386_32	installKey
10001f43:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001f46:	e9 aa fa ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001f4b:	80 7d e3 62          	cmp    BYTE PTR [ebp-0x1d],0x62
10001f4f:	75 0f                	jne    10001f60 <runRemoteInstall(void*)+0x5a5>
10001f51:	c6 05 00 00 00 00 08 	mov    BYTE PTR ds:0x0,0x8	10001f53: R_386_32	installKey
10001f58:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001f5b:	e9 95 fa ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001f60:	80 7d e3 6e          	cmp    BYTE PTR [ebp-0x1d],0x6e
10001f64:	75 0f                	jne    10001f75 <runRemoteInstall(void*)+0x5ba>
10001f66:	c6 05 00 00 00 00 0a 	mov    BYTE PTR ds:0x0,0xa	10001f68: R_386_32	installKey
10001f6d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001f70:	e9 80 fa ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001f75:	80 7d e3 25          	cmp    BYTE PTR [ebp-0x1d],0x25
10001f79:	75 0f                	jne    10001f8a <runRemoteInstall(void*)+0x5cf>
10001f7b:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10001f7d: R_386_32	blockUserTyping
10001f82:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001f85:	e9 6b fa ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001f8a:	80 7d e3 24          	cmp    BYTE PTR [ebp-0x1d],0x24
10001f8e:	75 0f                	jne    10001f9f <runRemoteInstall(void*)+0x5e4>
10001f90:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001f92: R_386_32	blockUserTyping
10001f97:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001f9a:	e9 56 fa ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001f9f:	80 7d e3 75          	cmp    BYTE PTR [ebp-0x1d],0x75
10001fa3:	75 0f                	jne    10001fb4 <runRemoteInstall(void*)+0x5f9>
10001fa5:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10001fa7: R_386_32	installKey
10001fac:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001faf:	e9 41 fa ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001fb4:	80 7d e3 64          	cmp    BYTE PTR [ebp-0x1d],0x64
10001fb8:	75 0f                	jne    10001fc9 <runRemoteInstall(void*)+0x60e>
10001fba:	c6 05 00 00 00 00 02 	mov    BYTE PTR ds:0x0,0x2	10001fbc: R_386_32	installKey
10001fc1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001fc4:	e9 2c fa ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001fc9:	80 7d e3 6c          	cmp    BYTE PTR [ebp-0x1d],0x6c
10001fcd:	75 0f                	jne    10001fde <runRemoteInstall(void*)+0x623>
10001fcf:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	10001fd1: R_386_32	installKey
10001fd6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001fd9:	e9 17 fa ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001fde:	80 7d e3 72          	cmp    BYTE PTR [ebp-0x1d],0x72
10001fe2:	75 0f                	jne    10001ff3 <runRemoteInstall(void*)+0x638>
10001fe4:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	10001fe6: R_386_32	installKey
10001feb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001fee:	e9 02 fa ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10001ff3:	80 7d e3 70          	cmp    BYTE PTR [ebp-0x1d],0x70
10001ff7:	75 0f                	jne    10002008 <runRemoteInstall(void*)+0x64d>
10001ff9:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	10001ffb: R_386_32	installKey
10002000:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002003:	e9 ed f9 ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10002008:	80 7d e3 50          	cmp    BYTE PTR [ebp-0x1d],0x50
1000200c:	75 0f                	jne    1000201d <runRemoteInstall(void*)+0x662>
1000200e:	c6 05 00 00 00 00 7e 	mov    BYTE PTR ds:0x0,0x7e	10002010: R_386_32	installKey
10002015:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002018:	e9 d8 f9 ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
1000201d:	80 7d e3 74          	cmp    BYTE PTR [ebp-0x1d],0x74
10002021:	75 0f                	jne    10002032 <runRemoteInstall(void*)+0x677>
10002023:	c6 05 00 00 00 00 09 	mov    BYTE PTR ds:0x0,0x9	10002025: R_386_32	installKey
1000202a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000202d:	e9 c3 f9 ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10002032:	80 7d e3 54          	cmp    BYTE PTR [ebp-0x1d],0x54
10002036:	75 0f                	jne    10002047 <runRemoteInstall(void*)+0x68c>
10002038:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	1000203a: R_386_32	installKey
1000203f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002042:	e9 ae f9 ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10002047:	80 7d e3 65          	cmp    BYTE PTR [ebp-0x1d],0x65
1000204b:	75 0f                	jne    1000205c <runRemoteInstall(void*)+0x6a1>
1000204d:	c6 05 00 00 00 00 1b 	mov    BYTE PTR ds:0x0,0x1b	1000204f: R_386_32	installKey
10002054:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002057:	e9 99 f9 ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
1000205c:	80 7d e3 6b          	cmp    BYTE PTR [ebp-0x1d],0x6b
10002060:	75 13                	jne    10002075 <runRemoteInstall(void*)+0x6ba>
10002062:	a0 00 00 00 00       	mov    al,ds:0x0	10002063: R_386_32	installKey
10002067:	0f be c0             	movsx  eax,al
1000206a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000206d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002070:	e9 80 f9 ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
10002075:	80 7d e3 77          	cmp    BYTE PTR [ebp-0x1d],0x77
10002079:	75 26                	jne    100020a1 <runRemoteInstall(void*)+0x6e6>
1000207b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000207e:	a0 00 00 00 00       	mov    al,ds:0x0	1000207f: R_386_32	installKey
10002083:	84 c0                	test   al,al
10002085:	0f 95 c0             	setne  al
10002088:	84 c0                	test   al,al
1000208a:	0f 84 65 f9 ff ff    	je     100019f5 <runRemoteInstall(void*)+0x3a>
10002090:	83 ec 08             	sub    esp,0x8
10002093:	6a 00                	push   0x0
10002095:	6a 32                	push   0x32
10002097:	e8 fc ff ff ff       	call   10002098 <runRemoteInstall(void*)+0x6dd>	10002098: R_386_PC32	milliTenthSleep(unsigned long long)
1000209c:	83 c4 10             	add    esp,0x10
1000209f:	eb dd                	jmp    1000207e <runRemoteInstall(void*)+0x6c3>
100020a1:	80 7d e3 2f          	cmp    BYTE PTR [ebp-0x1d],0x2f
100020a5:	0f 85 4a f9 ff ff    	jne    100019f5 <runRemoteInstall(void*)+0x3a>
100020ab:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100020ae:	a0 00 00 00 00       	mov    al,ds:0x0	100020af: R_386_32	installKey
100020b3:	84 c0                	test   al,al
100020b5:	0f 94 c0             	sete   al
100020b8:	84 c0                	test   al,al
100020ba:	0f 84 35 f9 ff ff    	je     100019f5 <runRemoteInstall(void*)+0x3a>
100020c0:	83 ec 08             	sub    esp,0x8
100020c3:	6a 00                	push   0x0
100020c5:	6a 32                	push   0x32
100020c7:	e8 fc ff ff ff       	call   100020c8 <runRemoteInstall(void*)+0x70d>	100020c8: R_386_PC32	milliTenthSleep(unsigned long long)
100020cc:	83 c4 10             	add    esp,0x10
100020cf:	eb dd                	jmp    100020ae <runRemoteInstall(void*)+0x6f3>
100020d1:	90                   	nop
100020d2:	e9 1e f9 ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
100020d7:	90                   	nop
100020d8:	e9 18 f9 ff ff       	jmp    100019f5 <runRemoteInstall(void*)+0x3a>
100020dd:	83 ec 08             	sub    esp,0x8
100020e0:	6a 00                	push   0x0
100020e2:	6a 05                	push   0x5
100020e4:	e8 fc ff ff ff       	call   100020e5 <runRemoteInstall(void*)+0x72a>	100020e5: R_386_PC32	sleep(unsigned long long)
100020e9:	83 c4 10             	add    esp,0x10
100020ec:	eb ef                	jmp    100020dd <runRemoteInstall(void*)+0x722>

100020ee <bootInstallKeybrd(KeyboardToken, bool*)>:
100020ee:	55                   	push   ebp
100020ef:	89 e5                	mov    ebp,esp
100020f1:	a0 00 00 00 00       	mov    al,ds:0x0	100020f2: R_386_32	blockUserTyping
100020f6:	84 c0                	test   al,al
100020f8:	0f 85 b6 00 00 00    	jne    100021b4 <bootInstallKeybrd(KeyboardToken, bool*)+0xc6>
100020fe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10002101:	05 04 01 00 00       	add    eax,0x104
10002106:	8a 00                	mov    al,BYTE PTR [eax]
10002108:	84 c0                	test   al,al
1000210a:	74 15                	je     10002121 <bootInstallKeybrd(KeyboardToken, bool*)+0x33>
1000210c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000210f:	66 83 f8 09          	cmp    ax,0x9
10002113:	75 0c                	jne    10002121 <bootInstallKeybrd(KeyboardToken, bool*)+0x33>
10002115:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	10002117: R_386_32	installKey
1000211c:	e9 97 00 00 00       	jmp    100021b8 <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
10002121:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
10002124:	84 c0                	test   al,al
10002126:	0f 85 8b 00 00 00    	jne    100021b7 <bootInstallKeybrd(KeyboardToken, bool*)+0xc9>
1000212c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000212f:	66 3d 0a 02          	cmp    ax,0x20a
10002133:	75 09                	jne    1000213e <bootInstallKeybrd(KeyboardToken, bool*)+0x50>
10002135:	c6 05 00 00 00 00 1b 	mov    BYTE PTR ds:0x0,0x1b	10002137: R_386_32	installKey
1000213c:	eb 7a                	jmp    100021b8 <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
1000213e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002141:	66 3d 0d 02          	cmp    ax,0x20d
10002145:	75 09                	jne    10002150 <bootInstallKeybrd(KeyboardToken, bool*)+0x62>
10002147:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	10002149: R_386_32	installKey
1000214e:	eb 68                	jmp    100021b8 <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
10002150:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002153:	66 3d 0e 02          	cmp    ax,0x20e
10002157:	75 09                	jne    10002162 <bootInstallKeybrd(KeyboardToken, bool*)+0x74>
10002159:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	1000215b: R_386_32	installKey
10002160:	eb 56                	jmp    100021b8 <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
10002162:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002165:	66 3d 0b 02          	cmp    ax,0x20b
10002169:	75 09                	jne    10002174 <bootInstallKeybrd(KeyboardToken, bool*)+0x86>
1000216b:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	1000216d: R_386_32	installKey
10002172:	eb 44                	jmp    100021b8 <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
10002174:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002177:	66 3d 0c 02          	cmp    ax,0x20c
1000217b:	75 09                	jne    10002186 <bootInstallKeybrd(KeyboardToken, bool*)+0x98>
1000217d:	c6 05 00 00 00 00 02 	mov    BYTE PTR ds:0x0,0x2	1000217f: R_386_32	installKey
10002184:	eb 32                	jmp    100021b8 <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
10002186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002189:	66 3d 04 02          	cmp    ax,0x204
1000218d:	75 09                	jne    10002198 <bootInstallKeybrd(KeyboardToken, bool*)+0xaa>
1000218f:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	10002191: R_386_32	installKey
10002196:	eb 20                	jmp    100021b8 <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
10002198:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000219b:	66 3d 05 02          	cmp    ax,0x205
1000219f:	75 09                	jne    100021aa <bootInstallKeybrd(KeyboardToken, bool*)+0xbc>
100021a1:	c6 05 00 00 00 00 7e 	mov    BYTE PTR ds:0x0,0x7e	100021a3: R_386_32	installKey
100021a8:	eb 0e                	jmp    100021b8 <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
100021aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021ad:	a2 00 00 00 00       	mov    ds:0x0,al	100021ae: R_386_32	installKey
100021b2:	eb 04                	jmp    100021b8 <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
100021b4:	90                   	nop
100021b5:	eb 01                	jmp    100021b8 <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
100021b7:	90                   	nop
100021b8:	5d                   	pop    ebp
100021b9:	c3                   	ret    

100021ba <bootInstallTasks(int)>:
100021ba:	55                   	push   ebp
100021bb:	89 e5                	mov    ebp,esp
100021bd:	83 ec 08             	sub    esp,0x8
100021c0:	a1 00 00 00 00       	mov    eax,ds:0x0	100021c1: R_386_32	term
100021c5:	83 ec 04             	sub    esp,0x4
100021c8:	6a 08                	push   0x8
100021ca:	6a 18                	push   0x18
100021cc:	50                   	push   eax
100021cd:	e8 fc ff ff ff       	call   100021ce <bootInstallTasks(int)+0x14>	100021ce: R_386_PC32	VgaText::setCursor(int, int)
100021d2:	83 c4 10             	add    esp,0x10
100021d5:	a1 00 00 00 00       	mov    eax,ds:0x0	100021d6: R_386_32	term
100021da:	83 ec 08             	sub    esp,0x8
100021dd:	68 48 b2 00 10       	push   0x1000b248	100021de: R_386_32	.text
100021e2:	50                   	push   eax
100021e3:	e8 fc ff ff ff       	call   100021e4 <bootInstallTasks(int)+0x2a>	100021e4: R_386_PC32	VgaText::puts(char const*)
100021e8:	83 c4 10             	add    esp,0x10
100021eb:	a1 00 00 00 00       	mov    eax,ds:0x0	100021ec: R_386_32	term
100021f0:	83 ec 04             	sub    esp,0x4
100021f3:	6a 0a                	push   0xa
100021f5:	6a 1a                	push   0x1a
100021f7:	50                   	push   eax
100021f8:	e8 fc ff ff ff       	call   100021f9 <bootInstallTasks(int)+0x3f>	100021f9: R_386_PC32	VgaText::setCursor(int, int)
100021fd:	83 c4 10             	add    esp,0x10
10002200:	a1 00 00 00 00       	mov    eax,ds:0x0	10002201: R_386_32	term
10002205:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10002209:	75 07                	jne    10002212 <bootInstallTasks(int)+0x58>
1000220b:	ba 70 b2 00 10       	mov    edx,0x1000b270	1000220c: R_386_32	.text
10002210:	eb 05                	jmp    10002217 <bootInstallTasks(int)+0x5d>
10002212:	ba 73 b2 00 10       	mov    edx,0x1000b273	10002213: R_386_32	.text
10002217:	83 ec 08             	sub    esp,0x8
1000221a:	52                   	push   edx
1000221b:	50                   	push   eax
1000221c:	e8 fc ff ff ff       	call   1000221d <bootInstallTasks(int)+0x63>	1000221d: R_386_PC32	VgaText::puts(char const*)
10002221:	83 c4 10             	add    esp,0x10
10002224:	a1 00 00 00 00       	mov    eax,ds:0x0	10002225: R_386_32	term
10002229:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
1000222d:	78 07                	js     10002236 <bootInstallTasks(int)+0x7c>
1000222f:	ba 00 00 00 00       	mov    edx,0x0
10002234:	eb 05                	jmp    1000223b <bootInstallTasks(int)+0x81>
10002236:	ba 07 00 00 00       	mov    edx,0x7
1000223b:	6a 0f                	push   0xf
1000223d:	52                   	push   edx
1000223e:	68 76 b2 00 10       	push   0x1000b276	1000223f: R_386_32	.text
10002243:	50                   	push   eax
10002244:	e8 fc ff ff ff       	call   10002245 <bootInstallTasks(int)+0x8b>	10002245: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002249:	83 c4 10             	add    esp,0x10
1000224c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000224d: R_386_32	term
10002251:	83 ec 04             	sub    esp,0x4
10002254:	6a 0b                	push   0xb
10002256:	6a 1a                	push   0x1a
10002258:	50                   	push   eax
10002259:	e8 fc ff ff ff       	call   1000225a <bootInstallTasks(int)+0xa0>	1000225a: R_386_PC32	VgaText::setCursor(int, int)
1000225e:	83 c4 10             	add    esp,0x10
10002261:	a1 00 00 00 00       	mov    eax,ds:0x0	10002262: R_386_32	term
10002266:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
1000226a:	75 07                	jne    10002273 <bootInstallTasks(int)+0xb9>
1000226c:	ba 70 b2 00 10       	mov    edx,0x1000b270	1000226d: R_386_32	.text
10002271:	eb 05                	jmp    10002278 <bootInstallTasks(int)+0xbe>
10002273:	ba 73 b2 00 10       	mov    edx,0x1000b273	10002274: R_386_32	.text
10002278:	83 ec 08             	sub    esp,0x8
1000227b:	52                   	push   edx
1000227c:	50                   	push   eax
1000227d:	e8 fc ff ff ff       	call   1000227e <bootInstallTasks(int)+0xc4>	1000227e: R_386_PC32	VgaText::puts(char const*)
10002282:	83 c4 10             	add    esp,0x10
10002285:	a1 00 00 00 00       	mov    eax,ds:0x0	10002286: R_386_32	term
1000228a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
1000228e:	7e 07                	jle    10002297 <bootInstallTasks(int)+0xdd>
10002290:	ba 00 00 00 00       	mov    edx,0x0
10002295:	eb 05                	jmp    1000229c <bootInstallTasks(int)+0xe2>
10002297:	ba 07 00 00 00       	mov    edx,0x7
1000229c:	6a 0f                	push   0xf
1000229e:	52                   	push   edx
1000229f:	68 8e b2 00 10       	push   0x1000b28e	100022a0: R_386_32	.text
100022a4:	50                   	push   eax
100022a5:	e8 fc ff ff ff       	call   100022a6 <bootInstallTasks(int)+0xec>	100022a6: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100022aa:	83 c4 10             	add    esp,0x10
100022ad:	a1 00 00 00 00       	mov    eax,ds:0x0	100022ae: R_386_32	term
100022b2:	83 ec 04             	sub    esp,0x4
100022b5:	6a 0c                	push   0xc
100022b7:	6a 1a                	push   0x1a
100022b9:	50                   	push   eax
100022ba:	e8 fc ff ff ff       	call   100022bb <bootInstallTasks(int)+0x101>	100022bb: R_386_PC32	VgaText::setCursor(int, int)
100022bf:	83 c4 10             	add    esp,0x10
100022c2:	a1 00 00 00 00       	mov    eax,ds:0x0	100022c3: R_386_32	term
100022c7:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
100022cb:	75 07                	jne    100022d4 <bootInstallTasks(int)+0x11a>
100022cd:	ba 70 b2 00 10       	mov    edx,0x1000b270	100022ce: R_386_32	.text
100022d2:	eb 05                	jmp    100022d9 <bootInstallTasks(int)+0x11f>
100022d4:	ba 73 b2 00 10       	mov    edx,0x1000b273	100022d5: R_386_32	.text
100022d9:	83 ec 08             	sub    esp,0x8
100022dc:	52                   	push   edx
100022dd:	50                   	push   eax
100022de:	e8 fc ff ff ff       	call   100022df <bootInstallTasks(int)+0x125>	100022df: R_386_PC32	VgaText::puts(char const*)
100022e3:	83 c4 10             	add    esp,0x10
100022e6:	a1 00 00 00 00       	mov    eax,ds:0x0	100022e7: R_386_32	term
100022eb:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
100022ef:	7e 07                	jle    100022f8 <bootInstallTasks(int)+0x13e>
100022f1:	ba 00 00 00 00       	mov    edx,0x0
100022f6:	eb 05                	jmp    100022fd <bootInstallTasks(int)+0x143>
100022f8:	ba 07 00 00 00       	mov    edx,0x7
100022fd:	6a 0f                	push   0xf
100022ff:	52                   	push   edx
10002300:	68 a4 b2 00 10       	push   0x1000b2a4	10002301: R_386_32	.text
10002305:	50                   	push   eax
10002306:	e8 fc ff ff ff       	call   10002307 <bootInstallTasks(int)+0x14d>	10002307: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000230b:	83 c4 10             	add    esp,0x10
1000230e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000230f: R_386_32	term
10002313:	83 ec 04             	sub    esp,0x4
10002316:	6a 0d                	push   0xd
10002318:	6a 1a                	push   0x1a
1000231a:	50                   	push   eax
1000231b:	e8 fc ff ff ff       	call   1000231c <bootInstallTasks(int)+0x162>	1000231c: R_386_PC32	VgaText::setCursor(int, int)
10002320:	83 c4 10             	add    esp,0x10
10002323:	a1 00 00 00 00       	mov    eax,ds:0x0	10002324: R_386_32	term
10002328:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
1000232c:	75 07                	jne    10002335 <bootInstallTasks(int)+0x17b>
1000232e:	ba 70 b2 00 10       	mov    edx,0x1000b270	1000232f: R_386_32	.text
10002333:	eb 05                	jmp    1000233a <bootInstallTasks(int)+0x180>
10002335:	ba 73 b2 00 10       	mov    edx,0x1000b273	10002336: R_386_32	.text
1000233a:	83 ec 08             	sub    esp,0x8
1000233d:	52                   	push   edx
1000233e:	50                   	push   eax
1000233f:	e8 fc ff ff ff       	call   10002340 <bootInstallTasks(int)+0x186>	10002340: R_386_PC32	VgaText::puts(char const*)
10002344:	83 c4 10             	add    esp,0x10
10002347:	a1 00 00 00 00       	mov    eax,ds:0x0	10002348: R_386_32	term
1000234c:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10002350:	7e 07                	jle    10002359 <bootInstallTasks(int)+0x19f>
10002352:	ba 00 00 00 00       	mov    edx,0x0
10002357:	eb 05                	jmp    1000235e <bootInstallTasks(int)+0x1a4>
10002359:	ba 07 00 00 00       	mov    edx,0x7
1000235e:	6a 0f                	push   0xf
10002360:	52                   	push   edx
10002361:	68 ba b2 00 10       	push   0x1000b2ba	10002362: R_386_32	.text
10002366:	50                   	push   eax
10002367:	e8 fc ff ff ff       	call   10002368 <bootInstallTasks(int)+0x1ae>	10002368: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000236c:	83 c4 10             	add    esp,0x10
1000236f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002370: R_386_32	term
10002374:	83 ec 04             	sub    esp,0x4
10002377:	6a 0e                	push   0xe
10002379:	6a 1a                	push   0x1a
1000237b:	50                   	push   eax
1000237c:	e8 fc ff ff ff       	call   1000237d <bootInstallTasks(int)+0x1c3>	1000237d: R_386_PC32	VgaText::setCursor(int, int)
10002381:	83 c4 10             	add    esp,0x10
10002384:	a1 00 00 00 00       	mov    eax,ds:0x0	10002385: R_386_32	term
10002389:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
1000238d:	75 07                	jne    10002396 <bootInstallTasks(int)+0x1dc>
1000238f:	ba 70 b2 00 10       	mov    edx,0x1000b270	10002390: R_386_32	.text
10002394:	eb 05                	jmp    1000239b <bootInstallTasks(int)+0x1e1>
10002396:	ba 73 b2 00 10       	mov    edx,0x1000b273	10002397: R_386_32	.text
1000239b:	83 ec 08             	sub    esp,0x8
1000239e:	52                   	push   edx
1000239f:	50                   	push   eax
100023a0:	e8 fc ff ff ff       	call   100023a1 <bootInstallTasks(int)+0x1e7>	100023a1: R_386_PC32	VgaText::puts(char const*)
100023a5:	83 c4 10             	add    esp,0x10
100023a8:	a1 00 00 00 00       	mov    eax,ds:0x0	100023a9: R_386_32	term
100023ad:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
100023b1:	7e 07                	jle    100023ba <bootInstallTasks(int)+0x200>
100023b3:	ba 00 00 00 00       	mov    edx,0x0
100023b8:	eb 05                	jmp    100023bf <bootInstallTasks(int)+0x205>
100023ba:	ba 07 00 00 00       	mov    edx,0x7
100023bf:	6a 0f                	push   0xf
100023c1:	52                   	push   edx
100023c2:	68 ce b2 00 10       	push   0x1000b2ce	100023c3: R_386_32	.text
100023c7:	50                   	push   eax
100023c8:	e8 fc ff ff ff       	call   100023c9 <bootInstallTasks(int)+0x20f>	100023c9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100023cd:	83 c4 10             	add    esp,0x10
100023d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100023d1: R_386_32	term
100023d5:	83 ec 04             	sub    esp,0x4
100023d8:	6a 0f                	push   0xf
100023da:	6a 1a                	push   0x1a
100023dc:	50                   	push   eax
100023dd:	e8 fc ff ff ff       	call   100023de <bootInstallTasks(int)+0x224>	100023de: R_386_PC32	VgaText::setCursor(int, int)
100023e2:	83 c4 10             	add    esp,0x10
100023e5:	a1 00 00 00 00       	mov    eax,ds:0x0	100023e6: R_386_32	term
100023ea:	83 7d 08 05          	cmp    DWORD PTR [ebp+0x8],0x5
100023ee:	75 07                	jne    100023f7 <bootInstallTasks(int)+0x23d>
100023f0:	ba 70 b2 00 10       	mov    edx,0x1000b270	100023f1: R_386_32	.text
100023f5:	eb 05                	jmp    100023fc <bootInstallTasks(int)+0x242>
100023f7:	ba 73 b2 00 10       	mov    edx,0x1000b273	100023f8: R_386_32	.text
100023fc:	83 ec 08             	sub    esp,0x8
100023ff:	52                   	push   edx
10002400:	50                   	push   eax
10002401:	e8 fc ff ff ff       	call   10002402 <bootInstallTasks(int)+0x248>	10002402: R_386_PC32	VgaText::puts(char const*)
10002406:	83 c4 10             	add    esp,0x10
10002409:	a1 00 00 00 00       	mov    eax,ds:0x0	1000240a: R_386_32	term
1000240e:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10002412:	7e 07                	jle    1000241b <bootInstallTasks(int)+0x261>
10002414:	ba 00 00 00 00       	mov    edx,0x0
10002419:	eb 05                	jmp    10002420 <bootInstallTasks(int)+0x266>
1000241b:	ba 07 00 00 00       	mov    edx,0x7
10002420:	6a 0f                	push   0xf
10002422:	52                   	push   edx
10002423:	68 e6 b2 00 10       	push   0x1000b2e6	10002424: R_386_32	.text
10002428:	50                   	push   eax
10002429:	e8 fc ff ff ff       	call   1000242a <bootInstallTasks(int)+0x270>	1000242a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000242e:	83 c4 10             	add    esp,0x10
10002431:	90                   	nop
10002432:	c9                   	leave  
10002433:	c3                   	ret    

10002434 <ror(unsigned long long, int, int)>:
10002434:	55                   	push   ebp
10002435:	89 e5                	mov    ebp,esp
10002437:	56                   	push   esi
10002438:	53                   	push   ebx
10002439:	83 ec 20             	sub    esp,0x20
1000243c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000243f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10002442:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002445:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002448:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000244b:	ba 01 00 00 00       	mov    edx,0x1
10002450:	88 c1                	mov    cl,al
10002452:	d3 e2                	shl    edx,cl
10002454:	89 d0                	mov    eax,edx
10002456:	48                   	dec    eax
10002457:	99                   	cdq    
10002458:	89 c1                	mov    ecx,eax
1000245a:	23 4d e0             	and    ecx,DWORD PTR [ebp-0x20]
1000245d:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10002460:	89 d0                	mov    eax,edx
10002462:	23 45 e4             	and    eax,DWORD PTR [ebp-0x1c]
10002465:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10002468:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
1000246b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000246e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10002471:	0f ad d0             	shrd   eax,edx,cl
10002474:	d3 ea                	shr    edx,cl
10002476:	f6 c1 20             	test   cl,0x20
10002479:	74 04                	je     1000247f <ror(unsigned long long, int, int)+0x4b>
1000247b:	89 d0                	mov    eax,edx
1000247d:	31 d2                	xor    edx,edx
1000247f:	89 c3                	mov    ebx,eax
10002481:	89 d6                	mov    esi,edx
10002483:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10002486:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
10002489:	89 c1                	mov    ecx,eax
1000248b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000248e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002491:	0f a5 c2             	shld   edx,eax,cl
10002494:	d3 e0                	shl    eax,cl
10002496:	f6 c1 20             	test   cl,0x20
10002499:	74 04                	je     1000249f <ror(unsigned long long, int, int)+0x6b>
1000249b:	89 c2                	mov    edx,eax
1000249d:	31 c0                	xor    eax,eax
1000249f:	89 d1                	mov    ecx,edx
100024a1:	89 c2                	mov    edx,eax
100024a3:	89 d8                	mov    eax,ebx
100024a5:	09 d0                	or     eax,edx
100024a7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100024aa:	89 f0                	mov    eax,esi
100024ac:	09 c8                	or     eax,ecx
100024ae:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100024b1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100024b4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100024b7:	83 c4 20             	add    esp,0x20
100024ba:	5b                   	pop    ebx
100024bb:	5e                   	pop    esi
100024bc:	5d                   	pop    ebp
100024bd:	c3                   	ret    

100024be <swapBits(unsigned long long, unsigned long long, unsigned long long)>:
100024be:	55                   	push   ebp
100024bf:	89 e5                	mov    ebp,esp
100024c1:	56                   	push   esi
100024c2:	53                   	push   ebx
100024c3:	83 ec 40             	sub    esp,0x40
100024c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024c9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100024cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100024cf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100024d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100024d5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
100024d8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100024db:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100024de:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100024e1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100024e4:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
100024e7:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100024ea:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
100024ed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024f0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100024f3:	0f ad d0             	shrd   eax,edx,cl
100024f6:	d3 ea                	shr    edx,cl
100024f8:	f6 c1 20             	test   cl,0x20
100024fb:	74 04                	je     10002501 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x43>
100024fd:	89 d0                	mov    eax,edx
100024ff:	31 d2                	xor    edx,edx
10002501:	89 c3                	mov    ebx,eax
10002503:	89 d6                	mov    esi,edx
10002505:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10002508:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000250b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000250e:	0f ad d0             	shrd   eax,edx,cl
10002511:	d3 ea                	shr    edx,cl
10002513:	f6 c1 20             	test   cl,0x20
10002516:	74 04                	je     1000251c <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x5e>
10002518:	89 d0                	mov    eax,edx
1000251a:	31 d2                	xor    edx,edx
1000251c:	89 d1                	mov    ecx,edx
1000251e:	89 c2                	mov    edx,eax
10002520:	89 d8                	mov    eax,ebx
10002522:	31 d0                	xor    eax,edx
10002524:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10002527:	89 f0                	mov    eax,esi
10002529:	31 c8                	xor    eax,ecx
1000252b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
1000252e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10002531:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10002534:	89 c6                	mov    esi,eax
10002536:	83 e6 01             	and    esi,0x1
10002539:	89 75 c8             	mov    DWORD PTR [ebp-0x38],esi
1000253c:	89 d0                	mov    eax,edx
1000253e:	83 e0 00             	and    eax,0x0
10002541:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10002544:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10002547:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
1000254a:	89 c3                	mov    ebx,eax
1000254c:	80 f7 00             	xor    bh,0x0
1000254f:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
10002552:	89 d0                	mov    eax,edx
10002554:	80 f4 00             	xor    ah,0x0
10002557:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
1000255a:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
1000255d:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10002560:	89 c8                	mov    eax,ecx
10002562:	09 d0                	or     eax,edx
10002564:	85 c0                	test   eax,eax
10002566:	74 62                	je     100025ca <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x10c>
10002568:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
1000256b:	b8 01 00 00 00       	mov    eax,0x1
10002570:	ba 00 00 00 00       	mov    edx,0x0
10002575:	0f a5 c2             	shld   edx,eax,cl
10002578:	d3 e0                	shl    eax,cl
1000257a:	f6 c1 20             	test   cl,0x20
1000257d:	74 04                	je     10002583 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xc5>
1000257f:	89 c2                	mov    edx,eax
10002581:	31 c0                	xor    eax,eax
10002583:	89 c3                	mov    ebx,eax
10002585:	89 d6                	mov    esi,edx
10002587:	89 d8                	mov    eax,ebx
10002589:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
1000258c:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
1000258f:	89 f0                	mov    eax,esi
10002591:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10002594:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10002597:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
1000259a:	b8 01 00 00 00       	mov    eax,0x1
1000259f:	ba 00 00 00 00       	mov    edx,0x0
100025a4:	0f a5 c2             	shld   edx,eax,cl
100025a7:	d3 e0                	shl    eax,cl
100025a9:	f6 c1 20             	test   cl,0x20
100025ac:	74 04                	je     100025b2 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xf4>
100025ae:	89 c2                	mov    edx,eax
100025b0:	31 c0                	xor    eax,eax
100025b2:	89 c1                	mov    ecx,eax
100025b4:	89 d3                	mov    ebx,edx
100025b6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100025b9:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
100025bc:	89 c6                	mov    esi,eax
100025be:	31 ce                	xor    esi,ecx
100025c0:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
100025c3:	31 d3                	xor    ebx,edx
100025c5:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
100025c8:	eb 0c                	jmp    100025d6 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x118>
100025ca:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100025cd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100025d0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100025d3:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
100025d6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100025d9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100025dc:	83 c4 40             	add    esp,0x40
100025df:	5b                   	pop    ebx
100025e0:	5e                   	pop    esi
100025e1:	5d                   	pop    ebp
100025e2:	c3                   	ret    

100025e3 <getChecksum(unsigned int)>:
100025e3:	55                   	push   ebp
100025e4:	89 e5                	mov    ebp,esp
100025e6:	56                   	push   esi
100025e7:	53                   	push   ebx
100025e8:	83 ec 20             	sub    esp,0x20
100025eb:	66 c7 45 f6 49 4e    	mov    WORD PTR [ebp-0xa],0x4e49
100025f1:	66 c7 45 f4 79 6e    	mov    WORD PTR [ebp-0xc],0x6e79
100025f7:	66 c7 45 f2 67 61    	mov    WORD PTR [ebp-0xe],0x6167
100025fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002600:	c1 e8 10             	shr    eax,0x10
10002603:	89 c1                	mov    ecx,eax
10002605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002608:	89 c2                	mov    edx,eax
1000260a:	89 d0                	mov    eax,edx
1000260c:	c1 e0 06             	shl    eax,0x6
1000260f:	29 d0                	sub    eax,edx
10002611:	c1 e0 04             	shl    eax,0x4
10002614:	01 d0                	add    eax,edx
10002616:	31 c8                	xor    eax,ecx
10002618:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
1000261c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10002620:	0f 84 b1 00 00 00    	je     100026d7 <getChecksum(unsigned int)+0xf4>
10002626:	b8 f4 02 00 00       	mov    eax,0x2f4
1000262b:	ba 00 00 00 00       	mov    edx,0x0
10002630:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10002633:	89 c3                	mov    ebx,eax
10002635:	be 00 00 00 00       	mov    esi,0x0
1000263a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000263d:	ba 00 00 00 00       	mov    edx,0x0
10002642:	6a 1d                	push   0x1d
10002644:	6a 05                	push   0x5
10002646:	52                   	push   edx
10002647:	50                   	push   eax
10002648:	e8 fc ff ff ff       	call   10002649 <getChecksum(unsigned int)+0x66>	10002649: R_386_PC32	ror(unsigned long long, int, int)
1000264d:	83 c4 10             	add    esp,0x10
10002650:	05 52 3f 04 00       	add    eax,0x43f52
10002655:	83 d2 00             	adc    edx,0x0
10002658:	89 d9                	mov    ecx,ebx
1000265a:	31 c1                	xor    ecx,eax
1000265c:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
1000265f:	31 d6                	xor    esi,edx
10002661:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
10002664:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10002667:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
1000266b:	66 0f af c2          	imul   ax,dx
1000266f:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
10002673:	b8 ea 00 00 00       	mov    eax,0xea
10002678:	ba 00 00 00 00       	mov    edx,0x0
1000267d:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10002680:	89 c3                	mov    ebx,eax
10002682:	be 00 00 00 00       	mov    esi,0x0
10002687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000268a:	ba 00 00 00 00       	mov    edx,0x0
1000268f:	6a 1f                	push   0x1f
10002691:	6a 03                	push   0x3
10002693:	52                   	push   edx
10002694:	50                   	push   eax
10002695:	e8 fc ff ff ff       	call   10002696 <getChecksum(unsigned int)+0xb3>	10002696: R_386_PC32	ror(unsigned long long, int, int)
1000269a:	83 c4 10             	add    esp,0x10
1000269d:	05 05 db 09 00       	add    eax,0x9db05
100026a2:	83 d2 00             	adc    edx,0x0
100026a5:	89 d9                	mov    ecx,ebx
100026a7:	31 c1                	xor    ecx,eax
100026a9:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
100026ac:	31 d6                	xor    esi,edx
100026ae:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100026b1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100026b4:	66 29 45 f4          	sub    WORD PTR [ebp-0xc],ax
100026b8:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
100026bc:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
100026bf:	25 d2 04 00 00       	and    eax,0x4d2
100026c4:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
100026c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100026cb:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
100026cf:	d1 6d 08             	shr    DWORD PTR [ebp+0x8],1
100026d2:	e9 45 ff ff ff       	jmp    1000261c <getChecksum(unsigned int)+0x39>
100026d7:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
100026db:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
100026de:	66 33 45 f2          	xor    ax,WORD PTR [ebp-0xe]
100026e2:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
100026e5:	0f b7 c0             	movzx  eax,ax
100026e8:	25 ff 7f 00 00       	and    eax,0x7fff
100026ed:	8d 65 f8             	lea    esp,[ebp-0x8]
100026f0:	5b                   	pop    ebx
100026f1:	5e                   	pop    esi
100026f2:	5d                   	pop    ebp
100026f3:	c3                   	ret    

100026f4 <createKey(char*, unsigned int)>:
100026f4:	55                   	push   ebp
100026f5:	89 e5                	mov    ebp,esp
100026f7:	53                   	push   ebx
100026f8:	83 ec 34             	sub    esp,0x34
100026fb:	68 f8 b2 00 10       	push   0x1000b2f8	100026fc: R_386_32	.text
10002700:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002703:	e8 fc ff ff ff       	call   10002704 <createKey(char*, unsigned int)+0x10>	10002704: R_386_PC32	strcpy
10002708:	83 c4 08             	add    esp,0x8
1000270b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000270e:	bb 00 00 00 00       	mov    ebx,0x0
10002713:	89 c8                	mov    eax,ecx
10002715:	89 da                	mov    edx,ebx
10002717:	0f a4 c2 0f          	shld   edx,eax,0xf
1000271b:	c1 e0 0f             	shl    eax,0xf
1000271e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002721:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10002724:	83 ec 04             	sub    esp,0x4
10002727:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000272a:	e8 fc ff ff ff       	call   1000272b <createKey(char*, unsigned int)+0x37>	1000272b: R_386_PC32	getChecksum(unsigned int)
1000272f:	83 c4 08             	add    esp,0x8
10002732:	ba 00 00 00 00       	mov    edx,0x0
10002737:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
1000273a:	09 55 f4             	or     DWORD PTR [ebp-0xc],edx
1000273d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10002744:	81 7d ec db 24 00 00 	cmp    DWORD PTR [ebp-0x14],0x24db
1000274b:	7f 7f                	jg     100027cc <createKey(char*, unsigned int)+0xd8>
1000274d:	81 75 f0 95 38 e4 b5 	xor    DWORD PTR [ebp-0x10],0xb5e43895
10002754:	83 75 f4 37          	xor    DWORD PTR [ebp-0xc],0x37
10002758:	6a 00                	push   0x0
1000275a:	6a 08                	push   0x8
1000275c:	6a 00                	push   0x0
1000275e:	6a 03                	push   0x3
10002760:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10002763:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10002766:	e8 fc ff ff ff       	call   10002767 <createKey(char*, unsigned int)+0x73>	10002767: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000276b:	83 c4 18             	add    esp,0x18
1000276e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002771:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10002774:	6a 00                	push   0x0
10002776:	6a 0c                	push   0xc
10002778:	6a 00                	push   0x0
1000277a:	6a 0d                	push   0xd
1000277c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000277f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10002782:	e8 fc ff ff ff       	call   10002783 <createKey(char*, unsigned int)+0x8f>	10002783: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002787:	83 c4 18             	add    esp,0x18
1000278a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000278d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10002790:	6a 00                	push   0x0
10002792:	6a 16                	push   0x16
10002794:	6a 00                	push   0x0
10002796:	6a 25                	push   0x25
10002798:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000279b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000279e:	e8 fc ff ff ff       	call   1000279f <createKey(char*, unsigned int)+0xab>	1000279f: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
100027a3:	83 c4 18             	add    esp,0x18
100027a6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100027a9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
100027ac:	6a 2a                	push   0x2a
100027ae:	6a 13                	push   0x13
100027b0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100027b3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100027b6:	e8 fc ff ff ff       	call   100027b7 <createKey(char*, unsigned int)+0xc3>	100027b7: R_386_PC32	ror(unsigned long long, int, int)
100027bb:	83 c4 10             	add    esp,0x10
100027be:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100027c1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
100027c4:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100027c7:	e9 78 ff ff ff       	jmp    10002744 <createKey(char*, unsigned int)+0x50>
100027cc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027cf:	83 e0 0f             	and    eax,0xf
100027d2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
100027d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027d8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100027db:	0f ac d0 04          	shrd   eax,edx,0x4
100027df:	c1 ea 04             	shr    edx,0x4
100027e2:	89 c1                	mov    ecx,eax
100027e4:	89 d3                	mov    ebx,edx
100027e6:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
100027e9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100027ec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027ef:	83 e0 0f             	and    eax,0xf
100027f2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100027f5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027f8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100027fb:	0f ac d0 04          	shrd   eax,edx,0x4
100027ff:	c1 ea 04             	shr    edx,0x4
10002802:	89 c1                	mov    ecx,eax
10002804:	89 d3                	mov    ebx,edx
10002806:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10002809:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
1000280c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000280f:	83 e0 0f             	and    eax,0xf
10002812:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10002815:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002818:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000281b:	0f ac d0 04          	shrd   eax,edx,0x4
1000281f:	c1 ea 04             	shr    edx,0x4
10002822:	89 c1                	mov    ecx,eax
10002824:	89 d3                	mov    ebx,edx
10002826:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10002829:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
1000282c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000282f:	25 ff 03 00 00       	and    eax,0x3ff
10002834:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10002837:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000283a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000283d:	0f ac d0 0a          	shrd   eax,edx,0xa
10002841:	c1 ea 0a             	shr    edx,0xa
10002844:	89 c1                	mov    ecx,eax
10002846:	89 d3                	mov    ebx,edx
10002848:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
1000284b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
1000284e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002851:	25 ff 03 00 00       	and    eax,0x3ff
10002856:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002859:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000285c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000285f:	0f ac d0 0a          	shrd   eax,edx,0xa
10002863:	c1 ea 0a             	shr    edx,0xa
10002866:	89 c1                	mov    ecx,eax
10002868:	89 d3                	mov    ebx,edx
1000286a:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
1000286d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002870:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002873:	25 ff 03 00 00       	and    eax,0x3ff
10002878:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
1000287b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000287e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002881:	0f ac d0 0a          	shrd   eax,edx,0xa
10002885:	c1 ea 0a             	shr    edx,0xa
10002888:	89 c1                	mov    ecx,eax
1000288a:	89 d3                	mov    ebx,edx
1000288c:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
1000288f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002892:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002895:	05 00 00 00 00       	add    eax,0x0	10002896: R_386_32	lookupA
1000289a:	8a 10                	mov    dl,BYTE PTR [eax]
1000289c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000289f:	88 10                	mov    BYTE PTR [eax],dl
100028a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100028a4:	8d 50 01             	lea    edx,[eax+0x1]
100028a7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100028aa:	05 00 00 00 00       	add    eax,0x0	100028ab: R_386_32	lookupA
100028af:	8a 00                	mov    al,BYTE PTR [eax]
100028b1:	88 02                	mov    BYTE PTR [edx],al
100028b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100028b6:	8d 50 0f             	lea    edx,[eax+0xf]
100028b9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100028bc:	05 00 00 00 00       	add    eax,0x0	100028bd: R_386_32	lookupA
100028c1:	8a 00                	mov    al,BYTE PTR [eax]
100028c3:	88 02                	mov    BYTE PTR [edx],al
100028c5:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
100028c8:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100028cd:	f7 e9                	imul   ecx
100028cf:	c1 fa 05             	sar    edx,0x5
100028d2:	89 c8                	mov    eax,ecx
100028d4:	c1 f8 1f             	sar    eax,0x1f
100028d7:	29 c2                	sub    edx,eax
100028d9:	89 d0                	mov    eax,edx
100028db:	b9 0a 00 00 00       	mov    ecx,0xa
100028e0:	99                   	cdq    
100028e1:	f7 f9                	idiv   ecx
100028e3:	89 d0                	mov    eax,edx
100028e5:	8d 50 30             	lea    edx,[eax+0x30]
100028e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100028eb:	83 c0 03             	add    eax,0x3
100028ee:	88 10                	mov    BYTE PTR [eax],dl
100028f0:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
100028f3:	b8 67 66 66 66       	mov    eax,0x66666667
100028f8:	f7 e9                	imul   ecx
100028fa:	c1 fa 02             	sar    edx,0x2
100028fd:	89 c8                	mov    eax,ecx
100028ff:	c1 f8 1f             	sar    eax,0x1f
10002902:	89 d1                	mov    ecx,edx
10002904:	29 c1                	sub    ecx,eax
10002906:	b8 67 66 66 66       	mov    eax,0x66666667
1000290b:	f7 e9                	imul   ecx
1000290d:	c1 fa 02             	sar    edx,0x2
10002910:	89 c8                	mov    eax,ecx
10002912:	c1 f8 1f             	sar    eax,0x1f
10002915:	29 c2                	sub    edx,eax
10002917:	89 d0                	mov    eax,edx
10002919:	c1 e0 02             	shl    eax,0x2
1000291c:	01 d0                	add    eax,edx
1000291e:	01 c0                	add    eax,eax
10002920:	29 c1                	sub    ecx,eax
10002922:	89 ca                	mov    edx,ecx
10002924:	88 d0                	mov    al,dl
10002926:	8d 50 30             	lea    edx,[eax+0x30]
10002929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000292c:	83 c0 04             	add    eax,0x4
1000292f:	88 10                	mov    BYTE PTR [eax],dl
10002931:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10002934:	b9 0a 00 00 00       	mov    ecx,0xa
10002939:	99                   	cdq    
1000293a:	f7 f9                	idiv   ecx
1000293c:	89 d0                	mov    eax,edx
1000293e:	8d 50 30             	lea    edx,[eax+0x30]
10002941:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002944:	83 c0 05             	add    eax,0x5
10002947:	88 10                	mov    BYTE PTR [eax],dl
10002949:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
1000294c:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002951:	f7 e9                	imul   ecx
10002953:	c1 fa 05             	sar    edx,0x5
10002956:	89 c8                	mov    eax,ecx
10002958:	c1 f8 1f             	sar    eax,0x1f
1000295b:	29 c2                	sub    edx,eax
1000295d:	89 d0                	mov    eax,edx
1000295f:	b9 0a 00 00 00       	mov    ecx,0xa
10002964:	99                   	cdq    
10002965:	f7 f9                	idiv   ecx
10002967:	89 d0                	mov    eax,edx
10002969:	8d 50 30             	lea    edx,[eax+0x30]
1000296c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000296f:	83 c0 07             	add    eax,0x7
10002972:	88 10                	mov    BYTE PTR [eax],dl
10002974:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10002977:	b8 67 66 66 66       	mov    eax,0x66666667
1000297c:	f7 e9                	imul   ecx
1000297e:	c1 fa 02             	sar    edx,0x2
10002981:	89 c8                	mov    eax,ecx
10002983:	c1 f8 1f             	sar    eax,0x1f
10002986:	89 d1                	mov    ecx,edx
10002988:	29 c1                	sub    ecx,eax
1000298a:	b8 67 66 66 66       	mov    eax,0x66666667
1000298f:	f7 e9                	imul   ecx
10002991:	c1 fa 02             	sar    edx,0x2
10002994:	89 c8                	mov    eax,ecx
10002996:	c1 f8 1f             	sar    eax,0x1f
10002999:	29 c2                	sub    edx,eax
1000299b:	89 d0                	mov    eax,edx
1000299d:	c1 e0 02             	shl    eax,0x2
100029a0:	01 d0                	add    eax,edx
100029a2:	01 c0                	add    eax,eax
100029a4:	29 c1                	sub    ecx,eax
100029a6:	89 ca                	mov    edx,ecx
100029a8:	88 d0                	mov    al,dl
100029aa:	8d 50 30             	lea    edx,[eax+0x30]
100029ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029b0:	83 c0 08             	add    eax,0x8
100029b3:	88 10                	mov    BYTE PTR [eax],dl
100029b5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100029b8:	b9 0a 00 00 00       	mov    ecx,0xa
100029bd:	99                   	cdq    
100029be:	f7 f9                	idiv   ecx
100029c0:	89 d0                	mov    eax,edx
100029c2:	8d 50 30             	lea    edx,[eax+0x30]
100029c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029c8:	83 c0 09             	add    eax,0x9
100029cb:	88 10                	mov    BYTE PTR [eax],dl
100029cd:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
100029d0:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100029d5:	f7 e9                	imul   ecx
100029d7:	c1 fa 05             	sar    edx,0x5
100029da:	89 c8                	mov    eax,ecx
100029dc:	c1 f8 1f             	sar    eax,0x1f
100029df:	29 c2                	sub    edx,eax
100029e1:	89 d0                	mov    eax,edx
100029e3:	b9 0a 00 00 00       	mov    ecx,0xa
100029e8:	99                   	cdq    
100029e9:	f7 f9                	idiv   ecx
100029eb:	89 d0                	mov    eax,edx
100029ed:	8d 50 30             	lea    edx,[eax+0x30]
100029f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029f3:	83 c0 0b             	add    eax,0xb
100029f6:	88 10                	mov    BYTE PTR [eax],dl
100029f8:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
100029fb:	b8 67 66 66 66       	mov    eax,0x66666667
10002a00:	f7 e9                	imul   ecx
10002a02:	c1 fa 02             	sar    edx,0x2
10002a05:	89 c8                	mov    eax,ecx
10002a07:	c1 f8 1f             	sar    eax,0x1f
10002a0a:	89 d1                	mov    ecx,edx
10002a0c:	29 c1                	sub    ecx,eax
10002a0e:	b8 67 66 66 66       	mov    eax,0x66666667
10002a13:	f7 e9                	imul   ecx
10002a15:	c1 fa 02             	sar    edx,0x2
10002a18:	89 c8                	mov    eax,ecx
10002a1a:	c1 f8 1f             	sar    eax,0x1f
10002a1d:	29 c2                	sub    edx,eax
10002a1f:	89 d0                	mov    eax,edx
10002a21:	c1 e0 02             	shl    eax,0x2
10002a24:	01 d0                	add    eax,edx
10002a26:	01 c0                	add    eax,eax
10002a28:	29 c1                	sub    ecx,eax
10002a2a:	89 ca                	mov    edx,ecx
10002a2c:	88 d0                	mov    al,dl
10002a2e:	8d 50 30             	lea    edx,[eax+0x30]
10002a31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a34:	83 c0 0c             	add    eax,0xc
10002a37:	88 10                	mov    BYTE PTR [eax],dl
10002a39:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10002a3c:	b9 0a 00 00 00       	mov    ecx,0xa
10002a41:	99                   	cdq    
10002a42:	f7 f9                	idiv   ecx
10002a44:	89 d0                	mov    eax,edx
10002a46:	8d 50 30             	lea    edx,[eax+0x30]
10002a49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a4c:	83 c0 0d             	add    eax,0xd
10002a4f:	88 10                	mov    BYTE PTR [eax],dl
10002a51:	90                   	nop
10002a52:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002a55:	c9                   	leave  
10002a56:	c3                   	ret    

10002a57 <retrieveBits(char*)>:
10002a57:	55                   	push   ebp
10002a58:	89 e5                	mov    ebp,esp
10002a5a:	57                   	push   edi
10002a5b:	56                   	push   esi
10002a5c:	53                   	push   ebx
10002a5d:	83 ec 4c             	sub    esp,0x4c
10002a60:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
10002a67:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10002a6e:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [ebp-0x1c],0xffffffff
10002a75:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10002a7c:	83 7d e0 0f          	cmp    DWORD PTR [ebp-0x20],0xf
10002a80:	7f 54                	jg     10002ad6 <retrieveBits(char*)+0x7f>
10002a82:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002a85:	05 00 00 00 00       	add    eax,0x0	10002a86: R_386_32	lookupA
10002a8a:	8a 10                	mov    dl,BYTE PTR [eax]
10002a8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a8f:	8a 00                	mov    al,BYTE PTR [eax]
10002a91:	38 c2                	cmp    dl,al
10002a93:	75 06                	jne    10002a9b <retrieveBits(char*)+0x44>
10002a95:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002a98:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10002a9b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002a9e:	05 00 00 00 00       	add    eax,0x0	10002a9f: R_386_32	lookupB
10002aa3:	8a 10                	mov    dl,BYTE PTR [eax]
10002aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002aa8:	40                   	inc    eax
10002aa9:	8a 00                	mov    al,BYTE PTR [eax]
10002aab:	38 c2                	cmp    dl,al
10002aad:	75 06                	jne    10002ab5 <retrieveBits(char*)+0x5e>
10002aaf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002ab2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10002ab5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002ab8:	05 00 00 00 00       	add    eax,0x0	10002ab9: R_386_32	lookupC
10002abd:	8a 10                	mov    dl,BYTE PTR [eax]
10002abf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ac2:	83 c0 0f             	add    eax,0xf
10002ac5:	8a 00                	mov    al,BYTE PTR [eax]
10002ac7:	38 c2                	cmp    dl,al
10002ac9:	75 06                	jne    10002ad1 <retrieveBits(char*)+0x7a>
10002acb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002ace:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002ad1:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10002ad4:	eb a6                	jmp    10002a7c <retrieveBits(char*)+0x25>
10002ad6:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
10002ada:	74 0c                	je     10002ae8 <retrieveBits(char*)+0x91>
10002adc:	83 7d e8 ff          	cmp    DWORD PTR [ebp-0x18],0xffffffff
10002ae0:	74 06                	je     10002ae8 <retrieveBits(char*)+0x91>
10002ae2:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10002ae6:	75 0f                	jne    10002af7 <retrieveBits(char*)+0xa0>
10002ae8:	b8 00 00 00 00       	mov    eax,0x0
10002aed:	ba 00 00 00 00       	mov    edx,0x0
10002af2:	e9 02 02 00 00       	jmp    10002cf9 <retrieveBits(char*)+0x2a2>
10002af7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002afa:	83 c0 03             	add    eax,0x3
10002afd:	8a 00                	mov    al,BYTE PTR [eax]
10002aff:	0f be c0             	movsx  eax,al
10002b02:	8d 50 d0             	lea    edx,[eax-0x30]
10002b05:	89 d0                	mov    eax,edx
10002b07:	c1 e0 02             	shl    eax,0x2
10002b0a:	01 d0                	add    eax,edx
10002b0c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002b13:	01 d0                	add    eax,edx
10002b15:	c1 e0 02             	shl    eax,0x2
10002b18:	89 c6                	mov    esi,eax
10002b1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b1d:	83 c0 04             	add    eax,0x4
10002b20:	8a 00                	mov    al,BYTE PTR [eax]
10002b22:	0f be c0             	movsx  eax,al
10002b25:	8d 50 d0             	lea    edx,[eax-0x30]
10002b28:	89 d0                	mov    eax,edx
10002b2a:	c1 e0 02             	shl    eax,0x2
10002b2d:	01 d0                	add    eax,edx
10002b2f:	01 c0                	add    eax,eax
10002b31:	8d 14 06             	lea    edx,[esi+eax*1]
10002b34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b37:	83 c0 05             	add    eax,0x5
10002b3a:	8a 00                	mov    al,BYTE PTR [eax]
10002b3c:	0f be c0             	movsx  eax,al
10002b3f:	83 e8 30             	sub    eax,0x30
10002b42:	01 d0                	add    eax,edx
10002b44:	99                   	cdq    
10002b45:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10002b48:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10002b4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b4e:	83 c0 07             	add    eax,0x7
10002b51:	8a 00                	mov    al,BYTE PTR [eax]
10002b53:	0f be c0             	movsx  eax,al
10002b56:	8d 50 d0             	lea    edx,[eax-0x30]
10002b59:	89 d0                	mov    eax,edx
10002b5b:	c1 e0 02             	shl    eax,0x2
10002b5e:	01 d0                	add    eax,edx
10002b60:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002b67:	01 d0                	add    eax,edx
10002b69:	c1 e0 02             	shl    eax,0x2
10002b6c:	89 c6                	mov    esi,eax
10002b6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b71:	83 c0 08             	add    eax,0x8
10002b74:	8a 00                	mov    al,BYTE PTR [eax]
10002b76:	0f be c0             	movsx  eax,al
10002b79:	8d 50 d0             	lea    edx,[eax-0x30]
10002b7c:	89 d0                	mov    eax,edx
10002b7e:	c1 e0 02             	shl    eax,0x2
10002b81:	01 d0                	add    eax,edx
10002b83:	01 c0                	add    eax,eax
10002b85:	8d 14 06             	lea    edx,[esi+eax*1]
10002b88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b8b:	83 c0 09             	add    eax,0x9
10002b8e:	8a 00                	mov    al,BYTE PTR [eax]
10002b90:	0f be c0             	movsx  eax,al
10002b93:	83 e8 30             	sub    eax,0x30
10002b96:	01 d0                	add    eax,edx
10002b98:	99                   	cdq    
10002b99:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10002b9c:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
10002b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ba2:	83 c0 0b             	add    eax,0xb
10002ba5:	8a 00                	mov    al,BYTE PTR [eax]
10002ba7:	0f be c0             	movsx  eax,al
10002baa:	8d 50 d0             	lea    edx,[eax-0x30]
10002bad:	89 d0                	mov    eax,edx
10002baf:	c1 e0 02             	shl    eax,0x2
10002bb2:	01 d0                	add    eax,edx
10002bb4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002bbb:	01 d0                	add    eax,edx
10002bbd:	c1 e0 02             	shl    eax,0x2
10002bc0:	89 c6                	mov    esi,eax
10002bc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bc5:	83 c0 0c             	add    eax,0xc
10002bc8:	8a 00                	mov    al,BYTE PTR [eax]
10002bca:	0f be c0             	movsx  eax,al
10002bcd:	8d 50 d0             	lea    edx,[eax-0x30]
10002bd0:	89 d0                	mov    eax,edx
10002bd2:	c1 e0 02             	shl    eax,0x2
10002bd5:	01 d0                	add    eax,edx
10002bd7:	01 c0                	add    eax,eax
10002bd9:	8d 14 06             	lea    edx,[esi+eax*1]
10002bdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bdf:	83 c0 0d             	add    eax,0xd
10002be2:	8a 00                	mov    al,BYTE PTR [eax]
10002be4:	0f be c0             	movsx  eax,al
10002be7:	83 e8 30             	sub    eax,0x30
10002bea:	01 d0                	add    eax,edx
10002bec:	99                   	cdq    
10002bed:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002bf0:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10002bf3:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002bf6:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10002bf9:	0f a4 c2 0a          	shld   edx,eax,0xa
10002bfd:	c1 e0 0a             	shl    eax,0xa
10002c00:	89 c6                	mov    esi,eax
10002c02:	89 d7                	mov    edi,edx
10002c04:	89 f0                	mov    eax,esi
10002c06:	0b 45 c8             	or     eax,DWORD PTR [ebp-0x38]
10002c09:	89 c1                	mov    ecx,eax
10002c0b:	89 f8                	mov    eax,edi
10002c0d:	0b 45 cc             	or     eax,DWORD PTR [ebp-0x34]
10002c10:	89 c3                	mov    ebx,eax
10002c12:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002c15:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10002c18:	0f a4 c2 14          	shld   edx,eax,0x14
10002c1c:	c1 e0 14             	shl    eax,0x14
10002c1f:	89 ce                	mov    esi,ecx
10002c21:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10002c24:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10002c27:	0b 75 a8             	or     esi,DWORD PTR [ebp-0x58]
10002c2a:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10002c2d:	89 d8                	mov    eax,ebx
10002c2f:	0b 45 ac             	or     eax,DWORD PTR [ebp-0x54]
10002c32:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10002c35:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002c38:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002c3b:	0f a4 c2 0c          	shld   edx,eax,0xc
10002c3f:	c1 e0 0c             	shl    eax,0xc
10002c42:	89 c3                	mov    ebx,eax
10002c44:	89 d6                	mov    esi,edx
10002c46:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
10002c49:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10002c4c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002c4f:	c1 e0 04             	shl    eax,0x4
10002c52:	0b 45 ec             	or     eax,DWORD PTR [ebp-0x14]
10002c55:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10002c58:	c1 e2 08             	shl    edx,0x8
10002c5b:	09 d0                	or     eax,edx
10002c5d:	99                   	cdq    
10002c5e:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
10002c61:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
10002c64:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10002c6b:	81 7d d4 db 24 00 00 	cmp    DWORD PTR [ebp-0x2c],0x24db
10002c72:	7f 7f                	jg     10002cf3 <retrieveBits(char*)+0x29c>
10002c74:	6a 2a                	push   0x2a
10002c76:	6a 13                	push   0x13
10002c78:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002c7b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002c7e:	e8 fc ff ff ff       	call   10002c7f <retrieveBits(char*)+0x228>	10002c7f: R_386_PC32	ror(unsigned long long, int, int)
10002c83:	83 c4 10             	add    esp,0x10
10002c86:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002c89:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002c8c:	6a 00                	push   0x0
10002c8e:	6a 08                	push   0x8
10002c90:	6a 00                	push   0x0
10002c92:	6a 03                	push   0x3
10002c94:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002c97:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002c9a:	e8 fc ff ff ff       	call   10002c9b <retrieveBits(char*)+0x244>	10002c9b: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002c9f:	83 c4 18             	add    esp,0x18
10002ca2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002ca5:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002ca8:	6a 00                	push   0x0
10002caa:	6a 0c                	push   0xc
10002cac:	6a 00                	push   0x0
10002cae:	6a 0d                	push   0xd
10002cb0:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002cb3:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002cb6:	e8 fc ff ff ff       	call   10002cb7 <retrieveBits(char*)+0x260>	10002cb7: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002cbb:	83 c4 18             	add    esp,0x18
10002cbe:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002cc1:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002cc4:	6a 00                	push   0x0
10002cc6:	6a 16                	push   0x16
10002cc8:	6a 00                	push   0x0
10002cca:	6a 25                	push   0x25
10002ccc:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002ccf:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002cd2:	e8 fc ff ff ff       	call   10002cd3 <retrieveBits(char*)+0x27c>	10002cd3: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002cd7:	83 c4 18             	add    esp,0x18
10002cda:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002cdd:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002ce0:	81 75 d8 95 38 e4 b5 	xor    DWORD PTR [ebp-0x28],0xb5e43895
10002ce7:	83 75 dc 37          	xor    DWORD PTR [ebp-0x24],0x37
10002ceb:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10002cee:	e9 78 ff ff ff       	jmp    10002c6b <retrieveBits(char*)+0x214>
10002cf3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002cf6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002cf9:	8d 65 f4             	lea    esp,[ebp-0xc]
10002cfc:	5b                   	pop    ebx
10002cfd:	5e                   	pop    esi
10002cfe:	5f                   	pop    edi
10002cff:	5d                   	pop    ebp
10002d00:	c3                   	ret    

10002d01 <checkKey(char*)>:
10002d01:	55                   	push   ebp
10002d02:	89 e5                	mov    ebp,esp
10002d04:	53                   	push   ebx
10002d05:	83 ec 14             	sub    esp,0x14
10002d08:	83 ec 04             	sub    esp,0x4
10002d0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002d0e:	e8 fc ff ff ff       	call   10002d0f <checkKey(char*)+0xe>	10002d0f: R_386_PC32	retrieveBits(char*)
10002d13:	83 c4 08             	add    esp,0x8
10002d16:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002d19:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10002d1c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002d1f:	25 ff 7f 00 00       	and    eax,0x7fff
10002d24:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10002d27:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002d2a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002d2d:	0f ac d0 0f          	shrd   eax,edx,0xf
10002d31:	c1 ea 0f             	shr    edx,0xf
10002d34:	89 c1                	mov    ecx,eax
10002d36:	89 d3                	mov    ebx,edx
10002d38:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
10002d3b:	83 ec 04             	sub    esp,0x4
10002d3e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002d41:	e8 fc ff ff ff       	call   10002d42 <checkKey(char*)+0x41>	10002d42: R_386_PC32	getChecksum(unsigned int)
10002d46:	83 c4 08             	add    esp,0x8
10002d49:	39 45 ec             	cmp    DWORD PTR [ebp-0x14],eax
10002d4c:	0f 95 c0             	setne  al
10002d4f:	84 c0                	test   al,al
10002d51:	74 07                	je     10002d5a <checkKey(char*)+0x59>
10002d53:	b8 00 00 00 00       	mov    eax,0x0
10002d58:	eb 06                	jmp    10002d60 <checkKey(char*)+0x5f>
10002d5a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002d5d:	83 e0 07             	and    eax,0x7
10002d60:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002d63:	c9                   	leave  
10002d64:	c3                   	ret    

10002d65 <changeKeyType(char*, int)>:
10002d65:	55                   	push   ebp
10002d66:	89 e5                	mov    ebp,esp
10002d68:	83 ec 10             	sub    esp,0x10
10002d6b:	83 ec 04             	sub    esp,0x4
10002d6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002d71:	e8 fc ff ff ff       	call   10002d72 <changeKeyType(char*, int)+0xd>	10002d72: R_386_PC32	retrieveBits(char*)
10002d76:	83 c4 08             	add    esp,0x8
10002d79:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10002d7c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10002d7f:	83 65 f8 f8          	and    DWORD PTR [ebp-0x8],0xfffffff8
10002d83:	83 65 fc ff          	and    DWORD PTR [ebp-0x4],0xffffffff
10002d87:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002d8a:	99                   	cdq    
10002d8b:	09 45 f8             	or     DWORD PTR [ebp-0x8],eax
10002d8e:	09 55 fc             	or     DWORD PTR [ebp-0x4],edx
10002d91:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10002d94:	50                   	push   eax
10002d95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002d98:	e8 fc ff ff ff       	call   10002d99 <changeKeyType(char*, int)+0x34>	10002d99: R_386_PC32	createKey(char*, unsigned int)
10002d9d:	83 c4 08             	add    esp,0x8
10002da0:	83 ec 04             	sub    esp,0x4
10002da3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002da6:	e8 fc ff ff ff       	call   10002da7 <changeKeyType(char*, int)+0x42>	10002da7: R_386_PC32	checkKey(char*)
10002dab:	83 c4 08             	add    esp,0x8
10002dae:	85 c0                	test   eax,eax
10002db0:	0f 95 c0             	setne  al
10002db3:	c9                   	leave  
10002db4:	c3                   	ret    

10002db5 <checkExtendedKey(char*)>:
10002db5:	55                   	push   ebp
10002db6:	89 e5                	mov    ebp,esp
10002db8:	83 ec 20             	sub    esp,0x20
10002dbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002dbe:	8a 00                	mov    al,BYTE PTR [eax]
10002dc0:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10002dc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002dc6:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
10002dc9:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
10002dcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002dcf:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10002dd2:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10002dd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002dd8:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
10002ddb:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10002dde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002de1:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10002de4:	88 45 f0             	mov    BYTE PTR [ebp-0x10],al
10002de7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002dea:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
10002ded:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10002df0:	c6 45 f2 2d          	mov    BYTE PTR [ebp-0xe],0x2d
10002df4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002df7:	8a 40 06             	mov    al,BYTE PTR [eax+0x6]
10002dfa:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10002dfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e00:	8a 40 07             	mov    al,BYTE PTR [eax+0x7]
10002e03:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10002e06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e09:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
10002e0c:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10002e0f:	c6 45 f6 2d          	mov    BYTE PTR [ebp-0xa],0x2d
10002e13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e16:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10002e19:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10002e1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e1f:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
10002e22:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
10002e25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e28:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
10002e2b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
10002e2e:	c6 45 fa 2d          	mov    BYTE PTR [ebp-0x6],0x2d
10002e32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e35:	8a 40 0f             	mov    al,BYTE PTR [eax+0xf]
10002e38:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10002e3b:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002e3e:	48                   	dec    eax
10002e3f:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10002e42:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002e45:	3c 2f                	cmp    al,0x2f
10002e47:	75 04                	jne    10002e4d <checkExtendedKey(char*)+0x98>
10002e49:	c6 45 ef 39          	mov    BYTE PTR [ebp-0x11],0x39
10002e4d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002e50:	48                   	dec    eax
10002e51:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10002e54:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002e57:	3c 2f                	cmp    al,0x2f
10002e59:	75 04                	jne    10002e5f <checkExtendedKey(char*)+0xaa>
10002e5b:	c6 45 f5 39          	mov    BYTE PTR [ebp-0xb],0x39
10002e5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e62:	83 c0 0d             	add    eax,0xd
10002e65:	8a 10                	mov    dl,BYTE PTR [eax]
10002e67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e6a:	83 c0 0c             	add    eax,0xc
10002e6d:	8a 00                	mov    al,BYTE PTR [eax]
10002e6f:	38 c2                	cmp    dl,al
10002e71:	74 0a                	je     10002e7d <checkExtendedKey(char*)+0xc8>
10002e73:	b8 00 00 00 00       	mov    eax,0x0
10002e78:	e9 d6 00 00 00       	jmp    10002f53 <checkExtendedKey(char*)+0x19e>
10002e7d:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002e80:	3c 2f                	cmp    al,0x2f
10002e82:	7e 07                	jle    10002e8b <checkExtendedKey(char*)+0xd6>
10002e84:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002e87:	3c 39                	cmp    al,0x39
10002e89:	7e 0a                	jle    10002e95 <checkExtendedKey(char*)+0xe0>
10002e8b:	b8 00 00 00 00       	mov    eax,0x0
10002e90:	e9 be 00 00 00       	jmp    10002f53 <checkExtendedKey(char*)+0x19e>
10002e95:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002e98:	3c 2f                	cmp    al,0x2f
10002e9a:	7e 07                	jle    10002ea3 <checkExtendedKey(char*)+0xee>
10002e9c:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002e9f:	3c 39                	cmp    al,0x39
10002ea1:	7e 0a                	jle    10002ead <checkExtendedKey(char*)+0xf8>
10002ea3:	b8 00 00 00 00       	mov    eax,0x0
10002ea8:	e9 a6 00 00 00       	jmp    10002f53 <checkExtendedKey(char*)+0x19e>
10002ead:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002eb0:	3c 2f                	cmp    al,0x2f
10002eb2:	7e 07                	jle    10002ebb <checkExtendedKey(char*)+0x106>
10002eb4:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002eb7:	3c 39                	cmp    al,0x39
10002eb9:	7e 0a                	jle    10002ec5 <checkExtendedKey(char*)+0x110>
10002ebb:	b8 00 00 00 00       	mov    eax,0x0
10002ec0:	e9 8e 00 00 00       	jmp    10002f53 <checkExtendedKey(char*)+0x19e>
10002ec5:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10002ec8:	3c 2f                	cmp    al,0x2f
10002eca:	7e 07                	jle    10002ed3 <checkExtendedKey(char*)+0x11e>
10002ecc:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10002ecf:	3c 39                	cmp    al,0x39
10002ed1:	7e 07                	jle    10002eda <checkExtendedKey(char*)+0x125>
10002ed3:	b8 00 00 00 00       	mov    eax,0x0
10002ed8:	eb 79                	jmp    10002f53 <checkExtendedKey(char*)+0x19e>
10002eda:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
10002edd:	3c 2f                	cmp    al,0x2f
10002edf:	7e 07                	jle    10002ee8 <checkExtendedKey(char*)+0x133>
10002ee1:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
10002ee4:	3c 39                	cmp    al,0x39
10002ee6:	7e 07                	jle    10002eef <checkExtendedKey(char*)+0x13a>
10002ee8:	b8 00 00 00 00       	mov    eax,0x0
10002eed:	eb 64                	jmp    10002f53 <checkExtendedKey(char*)+0x19e>
10002eef:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002ef2:	3c 2f                	cmp    al,0x2f
10002ef4:	7e 07                	jle    10002efd <checkExtendedKey(char*)+0x148>
10002ef6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002ef9:	3c 39                	cmp    al,0x39
10002efb:	7e 07                	jle    10002f04 <checkExtendedKey(char*)+0x14f>
10002efd:	b8 00 00 00 00       	mov    eax,0x0
10002f02:	eb 4f                	jmp    10002f53 <checkExtendedKey(char*)+0x19e>
10002f04:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10002f07:	3c 2f                	cmp    al,0x2f
10002f09:	7e 07                	jle    10002f12 <checkExtendedKey(char*)+0x15d>
10002f0b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10002f0e:	3c 39                	cmp    al,0x39
10002f10:	7e 07                	jle    10002f19 <checkExtendedKey(char*)+0x164>
10002f12:	b8 00 00 00 00       	mov    eax,0x0
10002f17:	eb 3a                	jmp    10002f53 <checkExtendedKey(char*)+0x19e>
10002f19:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
10002f1c:	3c 2f                	cmp    al,0x2f
10002f1e:	7e 07                	jle    10002f27 <checkExtendedKey(char*)+0x172>
10002f20:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
10002f23:	3c 39                	cmp    al,0x39
10002f25:	7e 07                	jle    10002f2e <checkExtendedKey(char*)+0x179>
10002f27:	b8 00 00 00 00       	mov    eax,0x0
10002f2c:	eb 25                	jmp    10002f53 <checkExtendedKey(char*)+0x19e>
10002f2e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
10002f31:	3c 2f                	cmp    al,0x2f
10002f33:	7e 07                	jle    10002f3c <checkExtendedKey(char*)+0x187>
10002f35:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
10002f38:	3c 39                	cmp    al,0x39
10002f3a:	7e 07                	jle    10002f43 <checkExtendedKey(char*)+0x18e>
10002f3c:	b8 00 00 00 00       	mov    eax,0x0
10002f41:	eb 10                	jmp    10002f53 <checkExtendedKey(char*)+0x19e>
10002f43:	83 ec 04             	sub    esp,0x4
10002f46:	8d 45 ec             	lea    eax,[ebp-0x14]
10002f49:	50                   	push   eax
10002f4a:	e8 fc ff ff ff       	call   10002f4b <checkExtendedKey(char*)+0x196>	10002f4b: R_386_PC32	checkKey(char*)
10002f4f:	83 c4 08             	add    esp,0x8
10002f52:	90                   	nop
10002f53:	c9                   	leave  
10002f54:	c3                   	ret    

10002f55 <loadTimezoneStrings()>:
10002f55:	55                   	push   ebp
10002f56:	89 e5                	mov    ebp,esp
10002f58:	53                   	push   ebx
10002f59:	83 ec 34             	sub    esp,0x34
10002f5c:	83 ec 0c             	sub    esp,0xc
10002f5f:	68 14 01 00 00       	push   0x114
10002f64:	e8 fc ff ff ff       	call   10002f65 <loadTimezoneStrings()+0x10>	10002f65: R_386_PC32	operator new(unsigned long)
10002f69:	83 c4 10             	add    esp,0x10
10002f6c:	89 c3                	mov    ebx,eax
10002f6e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002f6f: R_386_32	kernelProcess
10002f73:	83 ec 04             	sub    esp,0x4
10002f76:	50                   	push   eax
10002f77:	68 0c b3 00 10       	push   0x1000b30c	10002f78: R_386_32	.text
10002f7c:	53                   	push   ebx
10002f7d:	e8 fc ff ff ff       	call   10002f7e <loadTimezoneStrings()+0x29>	10002f7e: R_386_PC32	File::File(char const*, Process*)
10002f82:	83 c4 10             	add    esp,0x10
10002f85:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10002f88:	83 ec 08             	sub    esp,0x8
10002f8b:	6a 01                	push   0x1
10002f8d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002f90:	e8 fc ff ff ff       	call   10002f91 <loadTimezoneStrings()+0x3c>	10002f91: R_386_PC32	File::open(FileOpenMode)
10002f95:	83 c4 10             	add    esp,0x10
10002f98:	83 ec 04             	sub    esp,0x4
10002f9b:	8d 45 d7             	lea    eax,[ebp-0x29]
10002f9e:	50                   	push   eax
10002f9f:	8d 45 d8             	lea    eax,[ebp-0x28]
10002fa2:	50                   	push   eax
10002fa3:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002fa6:	e8 fc ff ff ff       	call   10002fa7 <loadTimezoneStrings()+0x52>	10002fa7: R_386_PC32	File::stat(unsigned long long*, bool*)
10002fab:	83 c4 10             	add    esp,0x10
10002fae:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002fb1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002fb4:	83 ec 0c             	sub    esp,0xc
10002fb7:	50                   	push   eax
10002fb8:	e8 fc ff ff ff       	call   10002fb9 <loadTimezoneStrings()+0x64>	10002fb9: R_386_PC32	malloc
10002fbd:	83 c4 10             	add    esp,0x10
10002fc0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002fc3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002fc6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002fc9:	83 ec 04             	sub    esp,0x4
10002fcc:	50                   	push   eax
10002fcd:	6a 00                	push   0x0
10002fcf:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002fd2:	e8 fc ff ff ff       	call   10002fd3 <loadTimezoneStrings()+0x7e>	10002fd3: R_386_PC32	memset
10002fd7:	83 c4 10             	add    esp,0x10
10002fda:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002fdd:	8b 00                	mov    eax,DWORD PTR [eax]
10002fdf:	83 c0 0c             	add    eax,0xc
10002fe2:	8b 08                	mov    ecx,DWORD PTR [eax]
10002fe4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002fe7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002fea:	83 ec 0c             	sub    esp,0xc
10002fed:	8d 5d d0             	lea    ebx,[ebp-0x30]
10002ff0:	53                   	push   ebx
10002ff1:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002ff4:	52                   	push   edx
10002ff5:	50                   	push   eax
10002ff6:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002ff9:	ff d1                	call   ecx
10002ffb:	83 c4 20             	add    esp,0x20
10002ffe:	83 ec 0c             	sub    esp,0xc
10003001:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10003004:	e8 fc ff ff ff       	call   10003005 <loadTimezoneStrings()+0xb0>	10003005: R_386_PC32	File::close()
10003009:	83 c4 10             	add    esp,0x10
1000300c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10003013:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000301a:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
10003021:	7f 39                	jg     1000305c <loadTimezoneStrings()+0x107>
10003023:	83 ec 0c             	sub    esp,0xc
10003026:	6a 78                	push   0x78
10003028:	e8 fc ff ff ff       	call   10003029 <loadTimezoneStrings()+0xd4>	10003029: R_386_PC32	malloc
1000302d:	83 c4 10             	add    esp,0x10
10003030:	89 c2                	mov    edx,eax
10003032:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003035:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	10003038: R_386_32	timezoneStrings
1000303c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000303f:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10003042: R_386_32	timezoneStrings
10003046:	83 ec 08             	sub    esp,0x8
10003049:	68 2b b3 00 10       	push   0x1000b32b	1000304a: R_386_32	.text
1000304e:	50                   	push   eax
1000304f:	e8 fc ff ff ff       	call   10003050 <loadTimezoneStrings()+0xfb>	10003050: R_386_PC32	strcpy
10003054:	83 c4 10             	add    esp,0x10
10003057:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
1000305a:	eb be                	jmp    1000301a <loadTimezoneStrings()+0xc5>
1000305c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10003063:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10003066:	8d 50 01             	lea    edx,[eax+0x1]
10003069:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
1000306c:	89 c2                	mov    edx,eax
1000306e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003071:	01 d0                	add    eax,edx
10003073:	8a 00                	mov    al,BYTE PTR [eax]
10003075:	88 45 ce             	mov    BYTE PTR [ebp-0x32],al
10003078:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
1000307c:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
1000307f:	3c 0d                	cmp    al,0xd
10003081:	0f 84 2a 01 00 00    	je     100031b1 <loadTimezoneStrings()+0x25c>
10003087:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
1000308a:	3c 09                	cmp    al,0x9
1000308c:	75 3c                	jne    100030ca <loadTimezoneStrings()+0x175>
1000308e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003091:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10003094: R_386_32	timezoneStrings
10003098:	83 ec 0c             	sub    esp,0xc
1000309b:	50                   	push   eax
1000309c:	e8 fc ff ff ff       	call   1000309d <loadTimezoneStrings()+0x148>	1000309d: R_386_PC32	strlen
100030a1:	83 c4 10             	add    esp,0x10
100030a4:	83 f8 08             	cmp    eax,0x8
100030a7:	0f 87 0a 01 00 00    	ja     100031b7 <loadTimezoneStrings()+0x262>
100030ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100030b0:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100030b3: R_386_32	timezoneStrings
100030b7:	83 ec 08             	sub    esp,0x8
100030ba:	68 2b b3 00 10       	push   0x1000b32b	100030bb: R_386_32	.text
100030bf:	50                   	push   eax
100030c0:	e8 fc ff ff ff       	call   100030c1 <loadTimezoneStrings()+0x16c>	100030c1: R_386_PC32	strcat
100030c5:	83 c4 10             	add    esp,0x10
100030c8:	eb c4                	jmp    1000308e <loadTimezoneStrings()+0x139>
100030ca:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
100030cd:	3c 0a                	cmp    al,0xa
100030cf:	75 67                	jne    10003138 <loadTimezoneStrings()+0x1e3>
100030d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100030d4:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100030d7: R_386_32	timezoneStrings
100030db:	83 ec 0c             	sub    esp,0xc
100030de:	50                   	push   eax
100030df:	e8 fc ff ff ff       	call   100030e0 <loadTimezoneStrings()+0x18b>	100030e0: R_386_PC32	strlen
100030e4:	83 c4 10             	add    esp,0x10
100030e7:	83 f8 35             	cmp    eax,0x35
100030ea:	77 1d                	ja     10003109 <loadTimezoneStrings()+0x1b4>
100030ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100030ef:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100030f2: R_386_32	timezoneStrings
100030f6:	83 ec 08             	sub    esp,0x8
100030f9:	68 2b b3 00 10       	push   0x1000b32b	100030fa: R_386_32	.text
100030fe:	50                   	push   eax
100030ff:	e8 fc ff ff ff       	call   10003100 <loadTimezoneStrings()+0x1ab>	10003100: R_386_PC32	strcat
10003104:	83 c4 10             	add    esp,0x10
10003107:	eb c8                	jmp    100030d1 <loadTimezoneStrings()+0x17c>
10003109:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000310c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000310f:	99                   	cdq    
10003110:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10003113:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
10003116:	39 c8                	cmp    eax,ecx
10003118:	89 d0                	mov    eax,edx
1000311a:	19 d8                	sbb    eax,ebx
1000311c:	0f 82 9b 00 00 00    	jb     100031bd <loadTimezoneStrings()+0x268>
10003122:	83 ec 0c             	sub    esp,0xc
10003125:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10003128:	e8 fc ff ff ff       	call   10003129 <loadTimezoneStrings()+0x1d4>	10003129: R_386_PC32	free
1000312d:	83 c4 10             	add    esp,0x10
10003130:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003133:	e9 8b 00 00 00       	jmp    100031c3 <loadTimezoneStrings()+0x26e>
10003138:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000313b:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000313e: R_386_32	timezoneStrings
10003142:	83 ec 0c             	sub    esp,0xc
10003145:	50                   	push   eax
10003146:	e8 fc ff ff ff       	call   10003147 <loadTimezoneStrings()+0x1f2>	10003147: R_386_PC32	strlen
1000314b:	83 c4 10             	add    esp,0x10
1000314e:	83 f8 31             	cmp    eax,0x31
10003151:	77 1f                	ja     10003172 <loadTimezoneStrings()+0x21d>
10003153:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003156:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10003159: R_386_32	timezoneStrings
1000315d:	83 ec 08             	sub    esp,0x8
10003160:	8d 55 ce             	lea    edx,[ebp-0x32]
10003163:	52                   	push   edx
10003164:	50                   	push   eax
10003165:	e8 fc ff ff ff       	call   10003166 <loadTimezoneStrings()+0x211>	10003166: R_386_PC32	strcat
1000316a:	83 c4 10             	add    esp,0x10
1000316d:	e9 f1 fe ff ff       	jmp    10003063 <loadTimezoneStrings()+0x10e>
10003172:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003175:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10003178: R_386_32	timezoneStrings
1000317c:	83 ec 0c             	sub    esp,0xc
1000317f:	50                   	push   eax
10003180:	e8 fc ff ff ff       	call   10003181 <loadTimezoneStrings()+0x22c>	10003181: R_386_PC32	strlen
10003185:	83 c4 10             	add    esp,0x10
10003188:	83 f8 32             	cmp    eax,0x32
1000318b:	0f 85 d2 fe ff ff    	jne    10003063 <loadTimezoneStrings()+0x10e>
10003191:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003194:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10003197: R_386_32	timezoneStrings
1000319b:	83 ec 08             	sub    esp,0x8
1000319e:	68 2d b3 00 10       	push   0x1000b32d	1000319f: R_386_32	.text
100031a3:	50                   	push   eax
100031a4:	e8 fc ff ff ff       	call   100031a5 <loadTimezoneStrings()+0x250>	100031a5: R_386_PC32	strcat
100031a9:	83 c4 10             	add    esp,0x10
100031ac:	e9 b2 fe ff ff       	jmp    10003063 <loadTimezoneStrings()+0x10e>
100031b1:	90                   	nop
100031b2:	e9 ac fe ff ff       	jmp    10003063 <loadTimezoneStrings()+0x10e>
100031b7:	90                   	nop
100031b8:	e9 a6 fe ff ff       	jmp    10003063 <loadTimezoneStrings()+0x10e>
100031bd:	90                   	nop
100031be:	e9 a0 fe ff ff       	jmp    10003063 <loadTimezoneStrings()+0x10e>
100031c3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100031c6:	c9                   	leave  
100031c7:	c3                   	ret    

100031c8 <_bcrypt_rand>:
100031c8:	55                   	push   ebp
100031c9:	89 e5                	mov    ebp,esp
100031cb:	83 ec 08             	sub    esp,0x8
100031ce:	e8 fc ff ff ff       	call   100031cf <_bcrypt_rand+0x7>	100031cf: R_386_PC32	KeRand()
100031d3:	c9                   	leave  
100031d4:	c3                   	ret    

100031d5 <firstRun(bool)>:
100031d5:	55                   	push   ebp
100031d6:	89 e5                	mov    ebp,esp
100031d8:	57                   	push   edi
100031d9:	56                   	push   esi
100031da:	53                   	push   ebx
100031db:	81 ec 5c 01 00 00    	sub    esp,0x15c
100031e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100031e4:	88 85 a4 fe ff ff    	mov    BYTE PTR [ebp-0x15c],al
100031ea:	a1 00 00 00 00       	mov    eax,ds:0x0	100031eb: R_386_32	keBootSettings
100031ef:	25 00 80 00 00       	and    eax,0x8000
100031f4:	85 c0                	test   eax,eax
100031f6:	0f 95 c0             	setne  al
100031f9:	a2 00 00 00 00       	mov    ds:0x0,al	100031fa: R_386_32	remoteInstall
100031fe:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003200: R_386_32	remoteInstall
10003205:	a0 00 00 00 00       	mov    al,ds:0x0	10003206: R_386_32	remoteInstall
1000320a:	84 c0                	test   al,al
1000320c:	74 1f                	je     1000322d <firstRun(bool)+0x58>
1000320e:	b8 00 20 00 c2       	mov    eax,0xc2002000
10003213:	8b 00                	mov    eax,DWORD PTR [eax]
10003215:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
10003218:	68 80 00 00 00       	push   0x80
1000321d:	6a 00                	push   0x0
1000321f:	68 00 00 00 00       	push   0x0	10003220: R_386_32	runRemoteInstall(void*)
10003224:	50                   	push   eax
10003225:	e8 fc ff ff ff       	call   10003226 <firstRun(bool)+0x51>	10003226: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
1000322a:	83 c4 10             	add    esp,0x10
1000322d:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
10003233:	83 f0 01             	xor    eax,0x1
10003236:	a2 00 00 00 00       	mov    ds:0x0,al	10003237: R_386_32	showSidebar
1000323b:	a0 00 00 00 00       	mov    al,ds:0x0	1000323c: R_386_32	createNewUserMode
10003240:	84 c0                	test   al,al
10003242:	74 5b                	je     1000329f <firstRun(bool)+0xca>
10003244:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003246: R_386_32	showSidebar
1000324b:	83 ec 08             	sub    esp,0x8
1000324e:	68 6b b1 00 10       	push   0x1000b16b	1000324f: R_386_32	.text
10003253:	68 00 00 00 00       	push   0x0	10003254: R_386_32	currName
10003258:	e8 fc ff ff ff       	call   10003259 <firstRun(bool)+0x84>	10003259: R_386_PC32	strcpy
1000325d:	83 c4 10             	add    esp,0x10
10003260:	83 ec 08             	sub    esp,0x8
10003263:	68 6b b1 00 10       	push   0x1000b16b	10003264: R_386_32	.text
10003268:	68 00 00 00 00       	push   0x0	10003269: R_386_32	currComp
1000326d:	e8 fc ff ff ff       	call   1000326e <firstRun(bool)+0x99>	1000326e: R_386_PC32	strcpy
10003272:	83 c4 10             	add    esp,0x10
10003275:	83 ec 08             	sub    esp,0x8
10003278:	68 6b b1 00 10       	push   0x1000b16b	10003279: R_386_32	.text
1000327d:	68 00 00 00 00       	push   0x0	1000327e: R_386_32	passwbufA
10003282:	e8 fc ff ff ff       	call   10003283 <firstRun(bool)+0xae>	10003283: R_386_PC32	strcpy
10003287:	83 c4 10             	add    esp,0x10
1000328a:	83 ec 08             	sub    esp,0x8
1000328d:	68 6b b1 00 10       	push   0x1000b16b	1000328e: R_386_32	.text
10003292:	68 00 00 00 00       	push   0x0	10003293: R_386_32	passwbufB
10003297:	e8 fc ff ff ff       	call   10003298 <firstRun(bool)+0xc3>	10003298: R_386_PC32	strcpy
1000329c:	83 c4 10             	add    esp,0x10
1000329f:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100032a1: R_386_32	guiKeyboardHandler
	100032a5: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
100032a9:	83 ec 0c             	sub    esp,0xc
100032ac:	68 34 b3 00 10       	push   0x1000b334	100032ad: R_386_32	.text
100032b1:	e8 fc ff ff ff       	call   100032b2 <firstRun(bool)+0xdd>	100032b2: R_386_PC32	KeSetBootMessage(char const*)
100032b6:	83 c4 10             	add    esp,0x10
100032b9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100032bb: R_386_32	VgaText::hiddenOut
100032c0:	a1 00 00 00 00       	mov    eax,ds:0x0	100032c1: R_386_32	activeTerminal
100032c5:	83 ec 08             	sub    esp,0x8
100032c8:	68 5d b3 00 10       	push   0x1000b35d	100032c9: R_386_32	.text
100032cd:	50                   	push   eax
100032ce:	e8 fc ff ff ff       	call   100032cf <firstRun(bool)+0xfa>	100032cf: R_386_PC32	VgaText::puts(char const*)
100032d3:	83 c4 10             	add    esp,0x10
100032d6:	a1 00 00 00 00       	mov    eax,ds:0x0	100032d7: R_386_32	kernelProcess
100032db:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
100032e1:	83 ec 08             	sub    esp,0x8
100032e4:	68 5d b3 00 10       	push   0x1000b35d	100032e5: R_386_32	.text
100032e9:	50                   	push   eax
100032ea:	e8 fc ff ff ff       	call   100032eb <firstRun(bool)+0x116>	100032eb: R_386_PC32	VgaText::puts(char const*)
100032ef:	83 c4 10             	add    esp,0x10
100032f2:	83 ec 0c             	sub    esp,0xc
100032f5:	68 84 01 00 00       	push   0x184
100032fa:	e8 fc ff ff ff       	call   100032fb <firstRun(bool)+0x126>	100032fb: R_386_PC32	operator new(unsigned long)
100032ff:	83 c4 10             	add    esp,0x10
10003302:	89 c3                	mov    ebx,eax
10003304:	83 ec 08             	sub    esp,0x8
10003307:	68 64 b3 00 10       	push   0x1000b364	10003308: R_386_32	.text
1000330c:	53                   	push   ebx
1000330d:	e8 fc ff ff ff       	call   1000330e <firstRun(bool)+0x139>	1000330e: R_386_PC32	VgaText::VgaText(char const*)
10003312:	83 c4 10             	add    esp,0x10
10003315:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10003317: R_386_32	term
1000331b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000331c: R_386_32	term
10003320:	83 ec 0c             	sub    esp,0xc
10003323:	50                   	push   eax
10003324:	e8 fc ff ff ff       	call   10003325 <firstRun(bool)+0x150>	10003325: R_386_PC32	setActiveTerminal(VgaText*)
10003329:	83 c4 10             	add    esp,0x10
1000332c:	e8 fc ff ff ff       	call   1000332d <firstRun(bool)+0x158>	1000332d: R_386_PC32	drawBootScreen()
10003331:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003338:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
1000333f:	74 17                	je     10003358 <firstRun(bool)+0x183>
10003341:	83 ec 08             	sub    esp,0x8
10003344:	68 69 b3 00 10       	push   0x1000b369	10003345: R_386_32	.text
10003349:	68 00 00 00 00       	push   0x0	1000334a: R_386_32	pkeybuf
1000334e:	e8 fc ff ff ff       	call   1000334f <firstRun(bool)+0x17a>	1000334f: R_386_PC32	strcpy
10003353:	83 c4 10             	add    esp,0x10
10003356:	eb 15                	jmp    1000336d <firstRun(bool)+0x198>
10003358:	83 ec 08             	sub    esp,0x8
1000335b:	68 7a b3 00 10       	push   0x1000b37a	1000335c: R_386_32	.text
10003360:	68 00 00 00 00       	push   0x0	10003361: R_386_32	pkeybuf
10003365:	e8 fc ff ff ff       	call   10003366 <firstRun(bool)+0x191>	10003366: R_386_PC32	strcpy
1000336a:	83 c4 10             	add    esp,0x10
1000336d:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
10003373:	83 f0 01             	xor    eax,0x1
10003376:	84 c0                	test   al,al
10003378:	0f 84 82 1d 00 00    	je     10005100 <firstRun(bool)+0x1f2b>
1000337e:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10003385:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003387: R_386_32	tzsel
1000338f:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003391: R_386_32	modesel
10003399:	eb 01                	jmp    1000339c <firstRun(bool)+0x1c7>
1000339b:	90                   	nop
1000339c:	e8 fc ff ff ff       	call   1000339d <firstRun(bool)+0x1c8>	1000339d: R_386_PC32	drawBootScreen()
100033a1:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100033a8:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100033aa: R_386_32	installKey
100033af:	a0 00 00 00 00       	mov    al,ds:0x0	100033b0: R_386_32	createNewUserMode
100033b4:	84 c0                	test   al,al
100033b6:	74 07                	je     100033bf <firstRun(bool)+0x1ea>
100033b8:	b8 8b b3 00 10       	mov    eax,0x1000b38b	100033b9: R_386_32	.text
100033bd:	eb 05                	jmp    100033c4 <firstRun(bool)+0x1ef>
100033bf:	b8 9b b3 00 10       	mov    eax,0x1000b39b	100033c0: R_386_32	.text
100033c4:	83 ec 0c             	sub    esp,0xc
100033c7:	50                   	push   eax
100033c8:	6a 12                	push   0x12
100033ca:	6a 32                	push   0x32
100033cc:	6a 03                	push   0x3
100033ce:	6a 16                	push   0x16
100033d0:	e8 fc ff ff ff       	call   100033d1 <firstRun(bool)+0x1fc>	100033d1: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100033d5:	83 c4 20             	add    esp,0x20
100033d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100033d9: R_386_32	term
100033dd:	83 ec 04             	sub    esp,0x4
100033e0:	6a 06                	push   0x6
100033e2:	6a 18                	push   0x18
100033e4:	50                   	push   eax
100033e5:	e8 fc ff ff ff       	call   100033e6 <firstRun(bool)+0x211>	100033e6: R_386_PC32	VgaText::setCursor(int, int)
100033ea:	83 c4 10             	add    esp,0x10
100033ed:	a1 00 00 00 00       	mov    eax,ds:0x0	100033ee: R_386_32	term
100033f2:	83 ec 08             	sub    esp,0x8
100033f5:	68 a8 b3 00 10       	push   0x1000b3a8	100033f6: R_386_32	.text
100033fa:	50                   	push   eax
100033fb:	e8 fc ff ff ff       	call   100033fc <firstRun(bool)+0x227>	100033fc: R_386_PC32	VgaText::puts(char const*)
10003400:	83 c4 10             	add    esp,0x10
10003403:	a1 00 00 00 00       	mov    eax,ds:0x0	10003404: R_386_32	term
10003408:	83 ec 04             	sub    esp,0x4
1000340b:	6a 07                	push   0x7
1000340d:	6a 18                	push   0x18
1000340f:	50                   	push   eax
10003410:	e8 fc ff ff ff       	call   10003411 <firstRun(bool)+0x23c>	10003411: R_386_PC32	VgaText::setCursor(int, int)
10003415:	83 c4 10             	add    esp,0x10
10003418:	a1 00 00 00 00       	mov    eax,ds:0x0	10003419: R_386_32	term
1000341d:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	1000341f: R_386_32	createNewUserMode
10003423:	84 d2                	test   dl,dl
10003425:	74 07                	je     1000342e <firstRun(bool)+0x259>
10003427:	ba d8 b3 00 10       	mov    edx,0x1000b3d8	10003428: R_386_32	.text
1000342c:	eb 05                	jmp    10003433 <firstRun(bool)+0x25e>
1000342e:	ba fa b3 00 10       	mov    edx,0x1000b3fa	1000342f: R_386_32	.text
10003433:	83 ec 08             	sub    esp,0x8
10003436:	52                   	push   edx
10003437:	50                   	push   eax
10003438:	e8 fc ff ff ff       	call   10003439 <firstRun(bool)+0x264>	10003439: R_386_PC32	VgaText::puts(char const*)
1000343d:	83 c4 10             	add    esp,0x10
10003440:	a1 00 00 00 00       	mov    eax,ds:0x0	10003441: R_386_32	term
10003445:	83 ec 04             	sub    esp,0x4
10003448:	6a 09                	push   0x9
1000344a:	6a 18                	push   0x18
1000344c:	50                   	push   eax
1000344d:	e8 fc ff ff ff       	call   1000344e <firstRun(bool)+0x279>	1000344e: R_386_PC32	VgaText::setCursor(int, int)
10003452:	83 c4 10             	add    esp,0x10
10003455:	a1 00 00 00 00       	mov    eax,ds:0x0	10003456: R_386_32	term
1000345a:	83 ec 08             	sub    esp,0x8
1000345d:	68 0a b4 00 10       	push   0x1000b40a	1000345e: R_386_32	.text
10003462:	50                   	push   eax
10003463:	e8 fc ff ff ff       	call   10003464 <firstRun(bool)+0x28f>	10003464: R_386_PC32	VgaText::puts(char const*)
10003468:	83 c4 10             	add    esp,0x10
1000346b:	a0 00 00 00 00       	mov    al,ds:0x0	1000346c: R_386_32	createNewUserMode
10003470:	83 f0 01             	xor    eax,0x1
10003473:	84 c0                	test   al,al
10003475:	74 2b                	je     100034a2 <firstRun(bool)+0x2cd>
10003477:	a1 00 00 00 00       	mov    eax,ds:0x0	10003478: R_386_32	term
1000347c:	83 ec 04             	sub    esp,0x4
1000347f:	6a 0b                	push   0xb
10003481:	6a 18                	push   0x18
10003483:	50                   	push   eax
10003484:	e8 fc ff ff ff       	call   10003485 <firstRun(bool)+0x2b0>	10003485: R_386_PC32	VgaText::setCursor(int, int)
10003489:	83 c4 10             	add    esp,0x10
1000348c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000348d: R_386_32	term
10003491:	83 ec 08             	sub    esp,0x8
10003494:	68 0f b4 00 10       	push   0x1000b40f	10003495: R_386_32	.text
10003499:	50                   	push   eax
1000349a:	e8 fc ff ff ff       	call   1000349b <firstRun(bool)+0x2c6>	1000349b: R_386_PC32	VgaText::puts(char const*)
1000349f:	83 c4 10             	add    esp,0x10
100034a2:	a1 00 00 00 00       	mov    eax,ds:0x0	100034a3: R_386_32	term
100034a7:	83 ec 04             	sub    esp,0x4
100034aa:	6a 0d                	push   0xd
100034ac:	6a 18                	push   0x18
100034ae:	50                   	push   eax
100034af:	e8 fc ff ff ff       	call   100034b0 <firstRun(bool)+0x2db>	100034b0: R_386_PC32	VgaText::setCursor(int, int)
100034b4:	83 c4 10             	add    esp,0x10
100034b7:	a1 00 00 00 00       	mov    eax,ds:0x0	100034b8: R_386_32	term
100034bc:	83 ec 08             	sub    esp,0x8
100034bf:	68 17 b4 00 10       	push   0x1000b417	100034c0: R_386_32	.text
100034c4:	50                   	push   eax
100034c5:	e8 fc ff ff ff       	call   100034c6 <firstRun(bool)+0x2f1>	100034c6: R_386_PC32	VgaText::puts(char const*)
100034ca:	83 c4 10             	add    esp,0x10
100034cd:	a1 00 00 00 00       	mov    eax,ds:0x0	100034ce: R_386_32	term
100034d2:	83 ec 04             	sub    esp,0x4
100034d5:	6a 0f                	push   0xf
100034d7:	6a 18                	push   0x18
100034d9:	50                   	push   eax
100034da:	e8 fc ff ff ff       	call   100034db <firstRun(bool)+0x306>	100034db: R_386_PC32	VgaText::setCursor(int, int)
100034df:	83 c4 10             	add    esp,0x10
100034e2:	a1 00 00 00 00       	mov    eax,ds:0x0	100034e3: R_386_32	term
100034e7:	83 ec 08             	sub    esp,0x8
100034ea:	68 20 b4 00 10       	push   0x1000b420	100034eb: R_386_32	.text
100034ef:	50                   	push   eax
100034f0:	e8 fc ff ff ff       	call   100034f1 <firstRun(bool)+0x31c>	100034f1: R_386_PC32	VgaText::puts(char const*)
100034f5:	83 c4 10             	add    esp,0x10
100034f8:	a1 00 00 00 00       	mov    eax,ds:0x0	100034f9: R_386_32	term
100034fd:	83 ec 04             	sub    esp,0x4
10003500:	6a 10                	push   0x10
10003502:	6a 18                	push   0x18
10003504:	50                   	push   eax
10003505:	e8 fc ff ff ff       	call   10003506 <firstRun(bool)+0x331>	10003506: R_386_PC32	VgaText::setCursor(int, int)
1000350a:	83 c4 10             	add    esp,0x10
1000350d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000350e: R_386_32	term
10003512:	83 ec 08             	sub    esp,0x8
10003515:	68 28 b4 00 10       	push   0x1000b428	10003516: R_386_32	.text
1000351a:	50                   	push   eax
1000351b:	e8 fc ff ff ff       	call   1000351c <firstRun(bool)+0x347>	1000351c: R_386_PC32	VgaText::puts(char const*)
10003520:	83 c4 10             	add    esp,0x10
10003523:	a1 00 00 00 00       	mov    eax,ds:0x0	10003524: R_386_32	term
10003528:	83 ec 04             	sub    esp,0x4
1000352b:	6a 09                	push   0x9
1000352d:	6a 21                	push   0x21
1000352f:	50                   	push   eax
10003530:	e8 fc ff ff ff       	call   10003531 <firstRun(bool)+0x35c>	10003531: R_386_PC32	VgaText::setCursor(int, int)
10003535:	83 c4 10             	add    esp,0x10
10003538:	a1 00 00 00 00       	mov    eax,ds:0x0	10003539: R_386_32	term
1000353d:	6a 07                	push   0x7
1000353f:	6a 00                	push   0x0
10003541:	68 34 b4 00 10       	push   0x1000b434	10003542: R_386_32	.text
10003546:	50                   	push   eax
10003547:	e8 fc ff ff ff       	call   10003548 <firstRun(bool)+0x373>	10003548: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000354c:	83 c4 10             	add    esp,0x10
1000354f:	a1 00 00 00 00       	mov    eax,ds:0x0	10003550: R_386_32	term
10003554:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10003558:	75 07                	jne    10003561 <firstRun(bool)+0x38c>
1000355a:	ba 59 b4 00 10       	mov    edx,0x1000b459	1000355b: R_386_32	.text
1000355f:	eb 05                	jmp    10003566 <firstRun(bool)+0x391>
10003561:	ba 5c b4 00 10       	mov    edx,0x1000b45c	10003562: R_386_32	.text
10003566:	6a 0f                	push   0xf
10003568:	6a 00                	push   0x0
1000356a:	52                   	push   edx
1000356b:	50                   	push   eax
1000356c:	e8 fc ff ff ff       	call   1000356d <firstRun(bool)+0x398>	1000356d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003571:	83 c4 10             	add    esp,0x10
10003574:	a1 00 00 00 00       	mov    eax,ds:0x0	10003575: R_386_32	term
10003579:	83 ec 08             	sub    esp,0x8
1000357c:	6a 21                	push   0x21
1000357e:	50                   	push   eax
1000357f:	e8 fc ff ff ff       	call   10003580 <firstRun(bool)+0x3ab>	10003580: R_386_PC32	VgaText::setCursorX(int)
10003584:	83 c4 10             	add    esp,0x10
10003587:	a1 00 00 00 00       	mov    eax,ds:0x0	10003588: R_386_32	term
1000358c:	6a 07                	push   0x7
1000358e:	6a 00                	push   0x0
10003590:	68 00 00 00 00       	push   0x0	10003591: R_386_32	currName
10003595:	50                   	push   eax
10003596:	e8 fc ff ff ff       	call   10003597 <firstRun(bool)+0x3c2>	10003597: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000359b:	83 c4 10             	add    esp,0x10
1000359e:	a0 00 00 00 00       	mov    al,ds:0x0	1000359f: R_386_32	createNewUserMode
100035a3:	83 f0 01             	xor    eax,0x1
100035a6:	84 c0                	test   al,al
100035a8:	74 7b                	je     10003625 <firstRun(bool)+0x450>
100035aa:	a1 00 00 00 00       	mov    eax,ds:0x0	100035ab: R_386_32	term
100035af:	83 ec 04             	sub    esp,0x4
100035b2:	6a 0b                	push   0xb
100035b4:	6a 21                	push   0x21
100035b6:	50                   	push   eax
100035b7:	e8 fc ff ff ff       	call   100035b8 <firstRun(bool)+0x3e3>	100035b8: R_386_PC32	VgaText::setCursor(int, int)
100035bc:	83 c4 10             	add    esp,0x10
100035bf:	a1 00 00 00 00       	mov    eax,ds:0x0	100035c0: R_386_32	term
100035c4:	6a 07                	push   0x7
100035c6:	6a 00                	push   0x0
100035c8:	68 34 b4 00 10       	push   0x1000b434	100035c9: R_386_32	.text
100035cd:	50                   	push   eax
100035ce:	e8 fc ff ff ff       	call   100035cf <firstRun(bool)+0x3fa>	100035cf: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100035d3:	83 c4 10             	add    esp,0x10
100035d6:	a1 00 00 00 00       	mov    eax,ds:0x0	100035d7: R_386_32	term
100035db:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
100035df:	75 07                	jne    100035e8 <firstRun(bool)+0x413>
100035e1:	ba 59 b4 00 10       	mov    edx,0x1000b459	100035e2: R_386_32	.text
100035e6:	eb 05                	jmp    100035ed <firstRun(bool)+0x418>
100035e8:	ba 5c b4 00 10       	mov    edx,0x1000b45c	100035e9: R_386_32	.text
100035ed:	6a 0f                	push   0xf
100035ef:	6a 00                	push   0x0
100035f1:	52                   	push   edx
100035f2:	50                   	push   eax
100035f3:	e8 fc ff ff ff       	call   100035f4 <firstRun(bool)+0x41f>	100035f4: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100035f8:	83 c4 10             	add    esp,0x10
100035fb:	a1 00 00 00 00       	mov    eax,ds:0x0	100035fc: R_386_32	term
10003600:	83 ec 08             	sub    esp,0x8
10003603:	6a 21                	push   0x21
10003605:	50                   	push   eax
10003606:	e8 fc ff ff ff       	call   10003607 <firstRun(bool)+0x432>	10003607: R_386_PC32	VgaText::setCursorX(int)
1000360b:	83 c4 10             	add    esp,0x10
1000360e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000360f: R_386_32	term
10003613:	6a 07                	push   0x7
10003615:	6a 00                	push   0x0
10003617:	68 00 00 00 00       	push   0x0	10003618: R_386_32	currComp
1000361c:	50                   	push   eax
1000361d:	e8 fc ff ff ff       	call   1000361e <firstRun(bool)+0x449>	1000361e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003622:	83 c4 10             	add    esp,0x10
10003625:	a1 00 00 00 00       	mov    eax,ds:0x0	10003626: R_386_32	term
1000362a:	83 ec 04             	sub    esp,0x4
1000362d:	6a 0d                	push   0xd
1000362f:	6a 21                	push   0x21
10003631:	50                   	push   eax
10003632:	e8 fc ff ff ff       	call   10003633 <firstRun(bool)+0x45e>	10003633: R_386_PC32	VgaText::setCursor(int, int)
10003637:	83 c4 10             	add    esp,0x10
1000363a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000363b: R_386_32	term
1000363f:	6a 07                	push   0x7
10003641:	6a 00                	push   0x0
10003643:	68 34 b4 00 10       	push   0x1000b434	10003644: R_386_32	.text
10003648:	50                   	push   eax
10003649:	e8 fc ff ff ff       	call   1000364a <firstRun(bool)+0x475>	1000364a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000364e:	83 c4 10             	add    esp,0x10
10003651:	a1 00 00 00 00       	mov    eax,ds:0x0	10003652: R_386_32	term
10003656:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
1000365a:	75 07                	jne    10003663 <firstRun(bool)+0x48e>
1000365c:	ba 59 b4 00 10       	mov    edx,0x1000b459	1000365d: R_386_32	.text
10003661:	eb 05                	jmp    10003668 <firstRun(bool)+0x493>
10003663:	ba 5c b4 00 10       	mov    edx,0x1000b45c	10003664: R_386_32	.text
10003668:	6a 0f                	push   0xf
1000366a:	6a 00                	push   0x0
1000366c:	52                   	push   edx
1000366d:	50                   	push   eax
1000366e:	e8 fc ff ff ff       	call   1000366f <firstRun(bool)+0x49a>	1000366f: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003673:	83 c4 10             	add    esp,0x10
10003676:	a1 00 00 00 00       	mov    eax,ds:0x0	10003677: R_386_32	term
1000367b:	83 ec 08             	sub    esp,0x8
1000367e:	6a 21                	push   0x21
10003680:	50                   	push   eax
10003681:	e8 fc ff ff ff       	call   10003682 <firstRun(bool)+0x4ad>	10003682: R_386_PC32	VgaText::setCursorX(int)
10003686:	83 c4 10             	add    esp,0x10
10003689:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10003690:	83 ec 0c             	sub    esp,0xc
10003693:	68 00 00 00 00       	push   0x0	10003694: R_386_32	passwbufA
10003698:	e8 fc ff ff ff       	call   10003699 <firstRun(bool)+0x4c4>	10003699: R_386_PC32	strlen
1000369d:	83 c4 10             	add    esp,0x10
100036a0:	89 c2                	mov    edx,eax
100036a2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100036a5:	39 c2                	cmp    edx,eax
100036a7:	76 1c                	jbe    100036c5 <firstRun(bool)+0x4f0>
100036a9:	a1 00 00 00 00       	mov    eax,ds:0x0	100036aa: R_386_32	term
100036ae:	6a 07                	push   0x7
100036b0:	6a 00                	push   0x0
100036b2:	68 60 b4 00 10       	push   0x1000b460	100036b3: R_386_32	.text
100036b7:	50                   	push   eax
100036b8:	e8 fc ff ff ff       	call   100036b9 <firstRun(bool)+0x4e4>	100036b9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100036bd:	83 c4 10             	add    esp,0x10
100036c0:	ff 45 d8             	inc    DWORD PTR [ebp-0x28]
100036c3:	eb cb                	jmp    10003690 <firstRun(bool)+0x4bb>
100036c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100036c6: R_386_32	term
100036ca:	83 ec 04             	sub    esp,0x4
100036cd:	6a 0f                	push   0xf
100036cf:	6a 21                	push   0x21
100036d1:	50                   	push   eax
100036d2:	e8 fc ff ff ff       	call   100036d3 <firstRun(bool)+0x4fe>	100036d3: R_386_PC32	VgaText::setCursor(int, int)
100036d7:	83 c4 10             	add    esp,0x10
100036da:	a1 00 00 00 00       	mov    eax,ds:0x0	100036db: R_386_32	term
100036df:	6a 07                	push   0x7
100036e1:	6a 00                	push   0x0
100036e3:	68 34 b4 00 10       	push   0x1000b434	100036e4: R_386_32	.text
100036e8:	50                   	push   eax
100036e9:	e8 fc ff ff ff       	call   100036ea <firstRun(bool)+0x515>	100036ea: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100036ee:	83 c4 10             	add    esp,0x10
100036f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100036f2: R_386_32	term
100036f6:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
100036fa:	75 07                	jne    10003703 <firstRun(bool)+0x52e>
100036fc:	ba 59 b4 00 10       	mov    edx,0x1000b459	100036fd: R_386_32	.text
10003701:	eb 05                	jmp    10003708 <firstRun(bool)+0x533>
10003703:	ba 5c b4 00 10       	mov    edx,0x1000b45c	10003704: R_386_32	.text
10003708:	6a 0f                	push   0xf
1000370a:	6a 00                	push   0x0
1000370c:	52                   	push   edx
1000370d:	50                   	push   eax
1000370e:	e8 fc ff ff ff       	call   1000370f <firstRun(bool)+0x53a>	1000370f: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003713:	83 c4 10             	add    esp,0x10
10003716:	a1 00 00 00 00       	mov    eax,ds:0x0	10003717: R_386_32	term
1000371b:	83 ec 08             	sub    esp,0x8
1000371e:	6a 21                	push   0x21
10003720:	50                   	push   eax
10003721:	e8 fc ff ff ff       	call   10003722 <firstRun(bool)+0x54d>	10003722: R_386_PC32	VgaText::setCursorX(int)
10003726:	83 c4 10             	add    esp,0x10
10003729:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10003730:	83 ec 0c             	sub    esp,0xc
10003733:	68 00 00 00 00       	push   0x0	10003734: R_386_32	passwbufB
10003738:	e8 fc ff ff ff       	call   10003739 <firstRun(bool)+0x564>	10003739: R_386_PC32	strlen
1000373d:	83 c4 10             	add    esp,0x10
10003740:	89 c2                	mov    edx,eax
10003742:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10003745:	39 c2                	cmp    edx,eax
10003747:	76 1c                	jbe    10003765 <firstRun(bool)+0x590>
10003749:	a1 00 00 00 00       	mov    eax,ds:0x0	1000374a: R_386_32	term
1000374e:	6a 07                	push   0x7
10003750:	6a 00                	push   0x0
10003752:	68 60 b4 00 10       	push   0x1000b460	10003753: R_386_32	.text
10003757:	50                   	push   eax
10003758:	e8 fc ff ff ff       	call   10003759 <firstRun(bool)+0x584>	10003759: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000375d:	83 c4 10             	add    esp,0x10
10003760:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10003763:	eb cb                	jmp    10003730 <firstRun(bool)+0x55b>
10003765:	a1 00 00 00 00       	mov    eax,ds:0x0	10003766: R_386_32	term
1000376a:	83 ec 04             	sub    esp,0x4
1000376d:	6a 14                	push   0x14
1000376f:	6a 18                	push   0x18
10003771:	50                   	push   eax
10003772:	e8 fc ff ff ff       	call   10003773 <firstRun(bool)+0x59e>	10003773: R_386_PC32	VgaText::setCursor(int, int)
10003777:	83 c4 10             	add    esp,0x10
1000377a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000377b: R_386_32	term
1000377f:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10003781: R_386_32	safemode
10003785:	84 d2                	test   dl,dl
10003787:	74 07                	je     10003790 <firstRun(bool)+0x5bb>
10003789:	b9 00 00 00 00       	mov    ecx,0x0
1000378e:	eb 05                	jmp    10003795 <firstRun(bool)+0x5c0>
10003790:	b9 08 00 00 00       	mov    ecx,0x8
10003795:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10003799:	75 07                	jne    100037a2 <firstRun(bool)+0x5cd>
1000379b:	ba 62 b4 00 10       	mov    edx,0x1000b462	1000379c: R_386_32	.text
100037a0:	eb 05                	jmp    100037a7 <firstRun(bool)+0x5d2>
100037a2:	ba 78 b4 00 10       	mov    edx,0x1000b478	100037a3: R_386_32	.text
100037a7:	6a 0f                	push   0xf
100037a9:	51                   	push   ecx
100037aa:	52                   	push   edx
100037ab:	50                   	push   eax
100037ac:	e8 fc ff ff ff       	call   100037ad <firstRun(bool)+0x5d8>	100037ad: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100037b1:	83 c4 10             	add    esp,0x10
100037b4:	a1 00 00 00 00       	mov    eax,ds:0x0	100037b5: R_386_32	term
100037b9:	83 ec 04             	sub    esp,0x4
100037bc:	6a 14                	push   0x14
100037be:	6a 3c                	push   0x3c
100037c0:	50                   	push   eax
100037c1:	e8 fc ff ff ff       	call   100037c2 <firstRun(bool)+0x5ed>	100037c2: R_386_PC32	VgaText::setCursor(int, int)
100037c6:	83 c4 10             	add    esp,0x10
100037c9:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
100037cd:	74 19                	je     100037e8 <firstRun(bool)+0x613>
100037cf:	a1 00 00 00 00       	mov    eax,ds:0x0	100037d0: R_386_32	term
100037d4:	6a 08                	push   0x8
100037d6:	6a 0f                	push   0xf
100037d8:	68 8f b4 00 10       	push   0x1000b48f	100037d9: R_386_32	.text
100037dd:	50                   	push   eax
100037de:	e8 fc ff ff ff       	call   100037df <firstRun(bool)+0x60a>	100037df: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100037e3:	83 c4 10             	add    esp,0x10
100037e6:	eb 2c                	jmp    10003814 <firstRun(bool)+0x63f>
100037e8:	a1 00 00 00 00       	mov    eax,ds:0x0	100037e9: R_386_32	term
100037ed:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	100037ef: R_386_32	safemode
100037f3:	84 d2                	test   dl,dl
100037f5:	74 07                	je     100037fe <firstRun(bool)+0x629>
100037f7:	ba 00 00 00 00       	mov    edx,0x0
100037fc:	eb 05                	jmp    10003803 <firstRun(bool)+0x62e>
100037fe:	ba 01 00 00 00       	mov    edx,0x1
10003803:	52                   	push   edx
10003804:	6a 0f                	push   0xf
10003806:	68 8f b4 00 10       	push   0x1000b48f	10003807: R_386_32	.text
1000380b:	50                   	push   eax
1000380c:	e8 fc ff ff ff       	call   1000380d <firstRun(bool)+0x638>	1000380d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003811:	83 c4 10             	add    esp,0x10
10003814:	a1 00 00 00 00       	mov    eax,ds:0x0	10003815: R_386_32	term
10003819:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
1000381d:	75 07                	jne    10003826 <firstRun(bool)+0x651>
1000381f:	ba 98 b4 00 10       	mov    edx,0x1000b498	10003820: R_386_32	.text
10003824:	eb 05                	jmp    1000382b <firstRun(bool)+0x656>
10003826:	ba 5c b4 00 10       	mov    edx,0x1000b45c	10003827: R_386_32	.text
1000382b:	6a 0f                	push   0xf
1000382d:	6a 00                	push   0x0
1000382f:	52                   	push   edx
10003830:	50                   	push   eax
10003831:	e8 fc ff ff ff       	call   10003832 <firstRun(bool)+0x65d>	10003832: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003836:	83 c4 10             	add    esp,0x10
10003839:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
1000383d:	75 28                	jne    10003867 <firstRun(bool)+0x692>
1000383f:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10003841: R_386_32	term
10003845:	83 ec 0c             	sub    esp,0xc
10003848:	68 00 00 00 00       	push   0x0	10003849: R_386_32	currName
1000384d:	e8 fc ff ff ff       	call   1000384e <firstRun(bool)+0x679>	1000384e: R_386_PC32	strlen
10003852:	83 c4 10             	add    esp,0x10
10003855:	83 c0 21             	add    eax,0x21
10003858:	83 ec 04             	sub    esp,0x4
1000385b:	6a 09                	push   0x9
1000385d:	50                   	push   eax
1000385e:	53                   	push   ebx
1000385f:	e8 fc ff ff ff       	call   10003860 <firstRun(bool)+0x68b>	10003860: R_386_PC32	VgaText::setCursor(int, int)
10003864:	83 c4 10             	add    esp,0x10
10003867:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
1000386b:	75 28                	jne    10003895 <firstRun(bool)+0x6c0>
1000386d:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	1000386f: R_386_32	term
10003873:	83 ec 0c             	sub    esp,0xc
10003876:	68 00 00 00 00       	push   0x0	10003877: R_386_32	currComp
1000387b:	e8 fc ff ff ff       	call   1000387c <firstRun(bool)+0x6a7>	1000387c: R_386_PC32	strlen
10003880:	83 c4 10             	add    esp,0x10
10003883:	83 c0 21             	add    eax,0x21
10003886:	83 ec 04             	sub    esp,0x4
10003889:	6a 0b                	push   0xb
1000388b:	50                   	push   eax
1000388c:	53                   	push   ebx
1000388d:	e8 fc ff ff ff       	call   1000388e <firstRun(bool)+0x6b9>	1000388e: R_386_PC32	VgaText::setCursor(int, int)
10003892:	83 c4 10             	add    esp,0x10
10003895:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10003899:	75 28                	jne    100038c3 <firstRun(bool)+0x6ee>
1000389b:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	1000389d: R_386_32	term
100038a1:	83 ec 0c             	sub    esp,0xc
100038a4:	68 00 00 00 00       	push   0x0	100038a5: R_386_32	passwbufA
100038a9:	e8 fc ff ff ff       	call   100038aa <firstRun(bool)+0x6d5>	100038aa: R_386_PC32	strlen
100038ae:	83 c4 10             	add    esp,0x10
100038b1:	83 c0 21             	add    eax,0x21
100038b4:	83 ec 04             	sub    esp,0x4
100038b7:	6a 0d                	push   0xd
100038b9:	50                   	push   eax
100038ba:	53                   	push   ebx
100038bb:	e8 fc ff ff ff       	call   100038bc <firstRun(bool)+0x6e7>	100038bc: R_386_PC32	VgaText::setCursor(int, int)
100038c0:	83 c4 10             	add    esp,0x10
100038c3:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
100038c7:	75 28                	jne    100038f1 <firstRun(bool)+0x71c>
100038c9:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100038cb: R_386_32	term
100038cf:	83 ec 0c             	sub    esp,0xc
100038d2:	68 00 00 00 00       	push   0x0	100038d3: R_386_32	passwbufB
100038d7:	e8 fc ff ff ff       	call   100038d8 <firstRun(bool)+0x703>	100038d8: R_386_PC32	strlen
100038dc:	83 c4 10             	add    esp,0x10
100038df:	83 c0 21             	add    eax,0x21
100038e2:	83 ec 04             	sub    esp,0x4
100038e5:	6a 0f                	push   0xf
100038e7:	50                   	push   eax
100038e8:	53                   	push   ebx
100038e9:	e8 fc ff ff ff       	call   100038ea <firstRun(bool)+0x715>	100038ea: R_386_PC32	VgaText::setCursor(int, int)
100038ee:	83 c4 10             	add    esp,0x10
100038f1:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
100038f5:	75 15                	jne    1000390c <firstRun(bool)+0x737>
100038f7:	a1 00 00 00 00       	mov    eax,ds:0x0	100038f8: R_386_32	term
100038fc:	83 ec 04             	sub    esp,0x4
100038ff:	6a 02                	push   0x2
10003901:	6a 00                	push   0x0
10003903:	50                   	push   eax
10003904:	e8 fc ff ff ff       	call   10003905 <firstRun(bool)+0x730>	10003905: R_386_PC32	VgaText::setCursor(int, int)
10003909:	83 c4 10             	add    esp,0x10
1000390c:	a0 00 00 00 00       	mov    al,ds:0x0	1000390d: R_386_32	installKey
10003911:	84 c0                	test   al,al
10003913:	0f 94 c0             	sete   al
10003916:	84 c0                	test   al,al
10003918:	74 02                	je     1000391c <firstRun(bool)+0x747>
1000391a:	eb f0                	jmp    1000390c <firstRun(bool)+0x737>
1000391c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000391d: R_386_32	term
10003921:	05 82 00 00 00       	add    eax,0x82
10003926:	83 ec 04             	sub    esp,0x4
10003929:	6a 10                	push   0x10
1000392b:	6a 00                	push   0x0
1000392d:	50                   	push   eax
1000392e:	e8 fc ff ff ff       	call   1000392f <firstRun(bool)+0x75a>	1000392f: R_386_PC32	memset
10003933:	83 c4 10             	add    esp,0x10
10003936:	a1 00 00 00 00       	mov    eax,ds:0x0	10003937: R_386_32	term
1000393b:	05 02 01 00 00       	add    eax,0x102
10003940:	83 ec 04             	sub    esp,0x4
10003943:	6a 10                	push   0x10
10003945:	6a 00                	push   0x0
10003947:	50                   	push   eax
10003948:	e8 fc ff ff ff       	call   10003949 <firstRun(bool)+0x774>	10003949: R_386_PC32	memset
1000394d:	83 c4 10             	add    esp,0x10
10003950:	a0 00 00 00 00       	mov    al,ds:0x0	10003951: R_386_32	installKey
10003955:	3c 09                	cmp    al,0x9
10003957:	74 09                	je     10003962 <firstRun(bool)+0x78d>
10003959:	a0 00 00 00 00       	mov    al,ds:0x0	1000395a: R_386_32	installKey
1000395e:	3c 0a                	cmp    al,0xa
10003960:	75 04                	jne    10003966 <firstRun(bool)+0x791>
10003962:	b0 01                	mov    al,0x1
10003964:	eb 02                	jmp    10003968 <firstRun(bool)+0x793>
10003966:	b0 00                	mov    al,0x0
10003968:	84 c0                	test   al,al
1000396a:	0f 84 c8 00 00 00    	je     10003a38 <firstRun(bool)+0x863>
10003970:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10003974:	75 0d                	jne    10003983 <firstRun(bool)+0x7ae>
10003976:	a0 00 00 00 00       	mov    al,ds:0x0	10003977: R_386_32	installKey
1000397b:	3c 0a                	cmp    al,0xa
1000397d:	75 04                	jne    10003983 <firstRun(bool)+0x7ae>
1000397f:	b0 01                	mov    al,0x1
10003981:	eb 02                	jmp    10003985 <firstRun(bool)+0x7b0>
10003983:	b0 00                	mov    al,0x0
10003985:	84 c0                	test   al,al
10003987:	74 72                	je     100039fb <firstRun(bool)+0x826>
10003989:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000398b: R_386_32	installKey
10003990:	83 ec 08             	sub    esp,0x8
10003993:	68 00 00 00 00       	push   0x0	10003994: R_386_32	passwbufB
10003998:	68 00 00 00 00       	push   0x0	10003999: R_386_32	passwbufA
1000399d:	e8 fc ff ff ff       	call   1000399e <firstRun(bool)+0x7c9>	1000399e: R_386_PC32	strcmp
100039a2:	83 c4 10             	add    esp,0x10
100039a5:	85 c0                	test   eax,eax
100039a7:	75 21                	jne    100039ca <firstRun(bool)+0x7f5>
100039a9:	83 ec 0c             	sub    esp,0xc
100039ac:	68 00 00 00 00       	push   0x0	100039ad: R_386_32	currName
100039b1:	e8 fc ff ff ff       	call   100039b2 <firstRun(bool)+0x7dd>	100039b2: R_386_PC32	strlen
100039b6:	83 c4 10             	add    esp,0x10
100039b9:	85 c0                	test   eax,eax
100039bb:	0f 85 26 03 00 00    	jne    10003ce7 <firstRun(bool)+0xb12>
100039c1:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100039c8:	eb 57                	jmp    10003a21 <firstRun(bool)+0x84c>
100039ca:	c7 45 e0 02 00 00 00 	mov    DWORD PTR [ebp-0x20],0x2
100039d1:	83 ec 04             	sub    esp,0x4
100039d4:	6a 30                	push   0x30
100039d6:	6a 00                	push   0x0
100039d8:	68 00 00 00 00       	push   0x0	100039d9: R_386_32	passwbufA
100039dd:	e8 fc ff ff ff       	call   100039de <firstRun(bool)+0x809>	100039de: R_386_PC32	memset
100039e2:	83 c4 10             	add    esp,0x10
100039e5:	83 ec 04             	sub    esp,0x4
100039e8:	6a 30                	push   0x30
100039ea:	6a 00                	push   0x0
100039ec:	68 00 00 00 00       	push   0x0	100039ed: R_386_32	passwbufB
100039f1:	e8 fc ff ff ff       	call   100039f2 <firstRun(bool)+0x81d>	100039f2: R_386_PC32	memset
100039f6:	83 c4 10             	add    esp,0x10
100039f9:	eb 26                	jmp    10003a21 <firstRun(bool)+0x84c>
100039fb:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
100039fe:	a0 00 00 00 00       	mov    al,ds:0x0	100039ff: R_386_32	createNewUserMode
10003a03:	84 c0                	test   al,al
10003a05:	74 0d                	je     10003a14 <firstRun(bool)+0x83f>
10003a07:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003a0b:	75 07                	jne    10003a14 <firstRun(bool)+0x83f>
10003a0d:	c7 45 e0 02 00 00 00 	mov    DWORD PTR [ebp-0x20],0x2
10003a14:	83 7d e0 05          	cmp    DWORD PTR [ebp-0x20],0x5
10003a18:	75 07                	jne    10003a21 <firstRun(bool)+0x84c>
10003a1a:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003a21:	83 ec 08             	sub    esp,0x8
10003a24:	6a 00                	push   0x0
10003a26:	68 2c 01 00 00       	push   0x12c
10003a2b:	e8 fc ff ff ff       	call   10003a2c <firstRun(bool)+0x857>	10003a2c: R_386_PC32	milliTenthSleep(unsigned long long)
10003a30:	83 c4 10             	add    esp,0x10
10003a33:	e9 a3 02 00 00       	jmp    10003cdb <firstRun(bool)+0xb06>
10003a38:	a0 00 00 00 00       	mov    al,ds:0x0	10003a39: R_386_32	installKey
10003a3d:	3c 1f                	cmp    al,0x1f
10003a3f:	7e 0d                	jle    10003a4e <firstRun(bool)+0x879>
10003a41:	a0 00 00 00 00       	mov    al,ds:0x0	10003a42: R_386_32	installKey
10003a46:	3c 7f                	cmp    al,0x7f
10003a48:	74 04                	je     10003a4e <firstRun(bool)+0x879>
10003a4a:	b0 01                	mov    al,0x1
10003a4c:	eb 02                	jmp    10003a50 <firstRun(bool)+0x87b>
10003a4e:	b0 00                	mov    al,0x0
10003a50:	84 c0                	test   al,al
10003a52:	0f 84 39 01 00 00    	je     10003b91 <firstRun(bool)+0x9bc>
10003a58:	a0 00 00 00 00       	mov    al,ds:0x0	10003a59: R_386_32	installKey
10003a5d:	88 85 c6 fe ff ff    	mov    BYTE PTR [ebp-0x13a],al
10003a63:	c6 85 c7 fe ff ff 00 	mov    BYTE PTR [ebp-0x139],0x0
10003a6a:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10003a6e:	75 7e                	jne    10003aee <firstRun(bool)+0x919>
10003a70:	83 ec 0c             	sub    esp,0xc
10003a73:	68 00 00 00 00       	push   0x0	10003a74: R_386_32	currName
10003a78:	e8 fc ff ff ff       	call   10003a79 <firstRun(bool)+0x8a4>	10003a79: R_386_PC32	strlen
10003a7d:	83 c4 10             	add    esp,0x10
10003a80:	83 f8 22             	cmp    eax,0x22
10003a83:	77 69                	ja     10003aee <firstRun(bool)+0x919>
10003a85:	a0 00 00 00 00       	mov    al,ds:0x0	10003a86: R_386_32	installKey
10003a8a:	3c 40                	cmp    al,0x40
10003a8c:	7e 09                	jle    10003a97 <firstRun(bool)+0x8c2>
10003a8e:	a0 00 00 00 00       	mov    al,ds:0x0	10003a8f: R_386_32	installKey
10003a93:	3c 59                	cmp    al,0x59
10003a95:	7f 36                	jg     10003acd <firstRun(bool)+0x8f8>
10003a97:	a0 00 00 00 00       	mov    al,ds:0x0	10003a98: R_386_32	installKey
10003a9c:	3c 60                	cmp    al,0x60
10003a9e:	7e 09                	jle    10003aa9 <firstRun(bool)+0x8d4>
10003aa0:	a0 00 00 00 00       	mov    al,ds:0x0	10003aa1: R_386_32	installKey
10003aa5:	3c 79                	cmp    al,0x79
10003aa7:	7f 24                	jg     10003acd <firstRun(bool)+0x8f8>
10003aa9:	a0 00 00 00 00       	mov    al,ds:0x0	10003aaa: R_386_32	installKey
10003aae:	3c 2f                	cmp    al,0x2f
10003ab0:	7e 09                	jle    10003abb <firstRun(bool)+0x8e6>
10003ab2:	a0 00 00 00 00       	mov    al,ds:0x0	10003ab3: R_386_32	installKey
10003ab7:	3c 38                	cmp    al,0x38
10003ab9:	7f 12                	jg     10003acd <firstRun(bool)+0x8f8>
10003abb:	a0 00 00 00 00       	mov    al,ds:0x0	10003abc: R_386_32	installKey
10003ac0:	3c 5f                	cmp    al,0x5f
10003ac2:	74 09                	je     10003acd <firstRun(bool)+0x8f8>
10003ac4:	a0 00 00 00 00       	mov    al,ds:0x0	10003ac5: R_386_32	installKey
10003ac9:	3c 20                	cmp    al,0x20
10003acb:	75 04                	jne    10003ad1 <firstRun(bool)+0x8fc>
10003acd:	b0 01                	mov    al,0x1
10003acf:	eb 02                	jmp    10003ad3 <firstRun(bool)+0x8fe>
10003ad1:	b0 00                	mov    al,0x0
10003ad3:	84 c0                	test   al,al
10003ad5:	74 17                	je     10003aee <firstRun(bool)+0x919>
10003ad7:	83 ec 08             	sub    esp,0x8
10003ada:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003ae0:	50                   	push   eax
10003ae1:	68 00 00 00 00       	push   0x0	10003ae2: R_386_32	currName
10003ae6:	e8 fc ff ff ff       	call   10003ae7 <firstRun(bool)+0x912>	10003ae7: R_386_PC32	strcat
10003aeb:	83 c4 10             	add    esp,0x10
10003aee:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003af2:	75 2c                	jne    10003b20 <firstRun(bool)+0x94b>
10003af4:	83 ec 0c             	sub    esp,0xc
10003af7:	68 00 00 00 00       	push   0x0	10003af8: R_386_32	currComp
10003afc:	e8 fc ff ff ff       	call   10003afd <firstRun(bool)+0x928>	10003afd: R_386_PC32	strlen
10003b01:	83 c4 10             	add    esp,0x10
10003b04:	83 f8 22             	cmp    eax,0x22
10003b07:	77 17                	ja     10003b20 <firstRun(bool)+0x94b>
10003b09:	83 ec 08             	sub    esp,0x8
10003b0c:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003b12:	50                   	push   eax
10003b13:	68 00 00 00 00       	push   0x0	10003b14: R_386_32	currComp
10003b18:	e8 fc ff ff ff       	call   10003b19 <firstRun(bool)+0x944>	10003b19: R_386_PC32	strcat
10003b1d:	83 c4 10             	add    esp,0x10
10003b20:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10003b24:	75 2c                	jne    10003b52 <firstRun(bool)+0x97d>
10003b26:	83 ec 0c             	sub    esp,0xc
10003b29:	68 00 00 00 00       	push   0x0	10003b2a: R_386_32	passwbufA
10003b2e:	e8 fc ff ff ff       	call   10003b2f <firstRun(bool)+0x95a>	10003b2f: R_386_PC32	strlen
10003b33:	83 c4 10             	add    esp,0x10
10003b36:	83 f8 22             	cmp    eax,0x22
10003b39:	77 17                	ja     10003b52 <firstRun(bool)+0x97d>
10003b3b:	83 ec 08             	sub    esp,0x8
10003b3e:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003b44:	50                   	push   eax
10003b45:	68 00 00 00 00       	push   0x0	10003b46: R_386_32	passwbufA
10003b4a:	e8 fc ff ff ff       	call   10003b4b <firstRun(bool)+0x976>	10003b4b: R_386_PC32	strcat
10003b4f:	83 c4 10             	add    esp,0x10
10003b52:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10003b56:	0f 85 7f 01 00 00    	jne    10003cdb <firstRun(bool)+0xb06>
10003b5c:	83 ec 0c             	sub    esp,0xc
10003b5f:	68 00 00 00 00       	push   0x0	10003b60: R_386_32	passwbufB
10003b64:	e8 fc ff ff ff       	call   10003b65 <firstRun(bool)+0x990>	10003b65: R_386_PC32	strlen
10003b69:	83 c4 10             	add    esp,0x10
10003b6c:	83 f8 22             	cmp    eax,0x22
10003b6f:	0f 87 66 01 00 00    	ja     10003cdb <firstRun(bool)+0xb06>
10003b75:	83 ec 08             	sub    esp,0x8
10003b78:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003b7e:	50                   	push   eax
10003b7f:	68 00 00 00 00       	push   0x0	10003b80: R_386_32	passwbufB
10003b84:	e8 fc ff ff ff       	call   10003b85 <firstRun(bool)+0x9b0>	10003b85: R_386_PC32	strcat
10003b89:	83 c4 10             	add    esp,0x10
10003b8c:	e9 4a 01 00 00       	jmp    10003cdb <firstRun(bool)+0xb06>
10003b91:	a0 00 00 00 00       	mov    al,ds:0x0	10003b92: R_386_32	installKey
10003b96:	3c 1b                	cmp    al,0x1b
10003b98:	75 0d                	jne    10003ba7 <firstRun(bool)+0x9d2>
10003b9a:	a0 00 00 00 00       	mov    al,ds:0x0	10003b9b: R_386_32	createNewUserMode
10003b9f:	84 c0                	test   al,al
10003ba1:	74 04                	je     10003ba7 <firstRun(bool)+0x9d2>
10003ba3:	b0 01                	mov    al,0x1
10003ba5:	eb 02                	jmp    10003ba9 <firstRun(bool)+0x9d4>
10003ba7:	b0 00                	mov    al,0x0
10003ba9:	84 c0                	test   al,al
10003bab:	74 0c                	je     10003bb9 <firstRun(bool)+0x9e4>
10003bad:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003baf: R_386_32	createNewUserMode
10003bb4:	e9 06 1e 00 00       	jmp    100059bf <firstRun(bool)+0x27ea>
10003bb9:	a0 00 00 00 00       	mov    al,ds:0x0	10003bba: R_386_32	installKey
10003bbe:	3c 08                	cmp    al,0x8
10003bc0:	0f 94 c0             	sete   al
10003bc3:	84 c0                	test   al,al
10003bc5:	0f 84 ca 00 00 00    	je     10003c95 <firstRun(bool)+0xac0>
10003bcb:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10003bcf:	75 2c                	jne    10003bfd <firstRun(bool)+0xa28>
10003bd1:	83 ec 0c             	sub    esp,0xc
10003bd4:	68 00 00 00 00       	push   0x0	10003bd5: R_386_32	currName
10003bd9:	e8 fc ff ff ff       	call   10003bda <firstRun(bool)+0xa05>	10003bda: R_386_PC32	strlen
10003bde:	83 c4 10             	add    esp,0x10
10003be1:	85 c0                	test   eax,eax
10003be3:	74 18                	je     10003bfd <firstRun(bool)+0xa28>
10003be5:	83 ec 0c             	sub    esp,0xc
10003be8:	68 00 00 00 00       	push   0x0	10003be9: R_386_32	currName
10003bed:	e8 fc ff ff ff       	call   10003bee <firstRun(bool)+0xa19>	10003bee: R_386_PC32	strlen
10003bf2:	83 c4 10             	add    esp,0x10
10003bf5:	48                   	dec    eax
10003bf6:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003bf8: R_386_32	currName
10003bfd:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003c01:	75 2c                	jne    10003c2f <firstRun(bool)+0xa5a>
10003c03:	83 ec 0c             	sub    esp,0xc
10003c06:	68 00 00 00 00       	push   0x0	10003c07: R_386_32	currComp
10003c0b:	e8 fc ff ff ff       	call   10003c0c <firstRun(bool)+0xa37>	10003c0c: R_386_PC32	strlen
10003c10:	83 c4 10             	add    esp,0x10
10003c13:	85 c0                	test   eax,eax
10003c15:	74 18                	je     10003c2f <firstRun(bool)+0xa5a>
10003c17:	83 ec 0c             	sub    esp,0xc
10003c1a:	68 00 00 00 00       	push   0x0	10003c1b: R_386_32	currComp
10003c1f:	e8 fc ff ff ff       	call   10003c20 <firstRun(bool)+0xa4b>	10003c20: R_386_PC32	strlen
10003c24:	83 c4 10             	add    esp,0x10
10003c27:	48                   	dec    eax
10003c28:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003c2a: R_386_32	currComp
10003c2f:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10003c33:	75 2c                	jne    10003c61 <firstRun(bool)+0xa8c>
10003c35:	83 ec 0c             	sub    esp,0xc
10003c38:	68 00 00 00 00       	push   0x0	10003c39: R_386_32	passwbufA
10003c3d:	e8 fc ff ff ff       	call   10003c3e <firstRun(bool)+0xa69>	10003c3e: R_386_PC32	strlen
10003c42:	83 c4 10             	add    esp,0x10
10003c45:	85 c0                	test   eax,eax
10003c47:	74 18                	je     10003c61 <firstRun(bool)+0xa8c>
10003c49:	83 ec 0c             	sub    esp,0xc
10003c4c:	68 00 00 00 00       	push   0x0	10003c4d: R_386_32	passwbufA
10003c51:	e8 fc ff ff ff       	call   10003c52 <firstRun(bool)+0xa7d>	10003c52: R_386_PC32	strlen
10003c56:	83 c4 10             	add    esp,0x10
10003c59:	48                   	dec    eax
10003c5a:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003c5c: R_386_32	passwbufA
10003c61:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10003c65:	75 74                	jne    10003cdb <firstRun(bool)+0xb06>
10003c67:	83 ec 0c             	sub    esp,0xc
10003c6a:	68 00 00 00 00       	push   0x0	10003c6b: R_386_32	passwbufB
10003c6f:	e8 fc ff ff ff       	call   10003c70 <firstRun(bool)+0xa9b>	10003c70: R_386_PC32	strlen
10003c74:	83 c4 10             	add    esp,0x10
10003c77:	85 c0                	test   eax,eax
10003c79:	74 60                	je     10003cdb <firstRun(bool)+0xb06>
10003c7b:	83 ec 0c             	sub    esp,0xc
10003c7e:	68 00 00 00 00       	push   0x0	10003c7f: R_386_32	passwbufB
10003c83:	e8 fc ff ff ff       	call   10003c84 <firstRun(bool)+0xaaf>	10003c84: R_386_PC32	strlen
10003c88:	83 c4 10             	add    esp,0x10
10003c8b:	48                   	dec    eax
10003c8c:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003c8e: R_386_32	passwbufB
10003c93:	eb 46                	jmp    10003cdb <firstRun(bool)+0xb06>
10003c95:	a0 00 00 00 00       	mov    al,ds:0x0	10003c96: R_386_32	installKey
10003c9a:	3c 7f                	cmp    al,0x7f
10003c9c:	0f 94 c0             	sete   al
10003c9f:	84 c0                	test   al,al
10003ca1:	74 38                	je     10003cdb <firstRun(bool)+0xb06>
10003ca3:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
10003ca6:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
10003caa:	75 07                	jne    10003cb3 <firstRun(bool)+0xade>
10003cac:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003cb3:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003cb7:	75 10                	jne    10003cc9 <firstRun(bool)+0xaf4>
10003cb9:	a0 00 00 00 00       	mov    al,ds:0x0	10003cba: R_386_32	createNewUserMode
10003cbe:	84 c0                	test   al,al
10003cc0:	74 07                	je     10003cc9 <firstRun(bool)+0xaf4>
10003cc2:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003cc9:	83 ec 08             	sub    esp,0x8
10003ccc:	6a 00                	push   0x0
10003cce:	68 2c 01 00 00       	push   0x12c
10003cd3:	e8 fc ff ff ff       	call   10003cd4 <firstRun(bool)+0xaff>	10003cd4: R_386_PC32	milliTenthSleep(unsigned long long)
10003cd8:	83 c4 10             	add    esp,0x10
10003cdb:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003cdd: R_386_32	installKey
10003ce2:	e9 3c f8 ff ff       	jmp    10003523 <firstRun(bool)+0x34e>
10003ce7:	90                   	nop
10003ce8:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003cea: R_386_32	installKey
10003cef:	83 ec 08             	sub    esp,0x8
10003cf2:	6a 00                	push   0x0
10003cf4:	68 d0 07 00 00       	push   0x7d0
10003cf9:	e8 fc ff ff ff       	call   10003cfa <firstRun(bool)+0xb25>	10003cfa: R_386_PC32	milliTenthSleep(unsigned long long)
10003cfe:	83 c4 10             	add    esp,0x10
10003d01:	e8 fc ff ff ff       	call   10003d02 <firstRun(bool)+0xb2d>	10003d02: R_386_PC32	drawBootScreen()
10003d06:	c7 45 bc 08 00 00 00 	mov    DWORD PTR [ebp-0x44],0x8
10003d0d:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003d0f: R_386_32	_bcrypt_errno
10003d17:	83 ec 08             	sub    esp,0x8
10003d1a:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10003d20:	50                   	push   eax
10003d21:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10003d24:	e8 fc ff ff ff       	call   10003d25 <firstRun(bool)+0xb50>	10003d25: R_386_PC32	bcrypt_gensalt
10003d29:	83 c4 10             	add    esp,0x10
10003d2c:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10003d2f:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10003d33:	75 09                	jne    10003d3e <firstRun(bool)+0xb69>
10003d35:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d36: R_386_32	_bcrypt_errno
10003d3a:	85 c0                	test   eax,eax
10003d3c:	74 5e                	je     10003d9c <firstRun(bool)+0xbc7>
10003d3e:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003d45:	83 ec 08             	sub    esp,0x8
10003d48:	68 9c b4 00 10       	push   0x1000b49c	10003d49: R_386_32	.text
10003d4d:	68 00 00 00 00       	push   0x0	10003d4e: R_386_32	currName
10003d52:	e8 fc ff ff ff       	call   10003d53 <firstRun(bool)+0xb7e>	10003d53: R_386_PC32	strcpy
10003d57:	83 c4 10             	add    esp,0x10
10003d5a:	83 ec 08             	sub    esp,0x8
10003d5d:	68 ab b4 00 10       	push   0x1000b4ab	10003d5e: R_386_32	.text
10003d62:	68 00 00 00 00       	push   0x0	10003d63: R_386_32	currComp
10003d67:	e8 fc ff ff ff       	call   10003d68 <firstRun(bool)+0xb93>	10003d68: R_386_PC32	strcpy
10003d6c:	83 c4 10             	add    esp,0x10
10003d6f:	83 ec 04             	sub    esp,0x4
10003d72:	6a 50                	push   0x50
10003d74:	6a 00                	push   0x0
10003d76:	68 00 00 00 00       	push   0x0	10003d77: R_386_32	passwbufA
10003d7b:	e8 fc ff ff ff       	call   10003d7c <firstRun(bool)+0xba7>	10003d7c: R_386_PC32	memset
10003d80:	83 c4 10             	add    esp,0x10
10003d83:	83 ec 04             	sub    esp,0x4
10003d86:	6a 50                	push   0x50
10003d88:	6a 00                	push   0x0
10003d8a:	68 00 00 00 00       	push   0x0	10003d8b: R_386_32	passwbufB
10003d8f:	e8 fc ff ff ff       	call   10003d90 <firstRun(bool)+0xbbb>	10003d90: R_386_PC32	memset
10003d94:	83 c4 10             	add    esp,0x10
10003d97:	e9 00 f6 ff ff       	jmp    1000339c <firstRun(bool)+0x1c7>
10003d9c:	83 ec 08             	sub    esp,0x8
10003d9f:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10003da5:	50                   	push   eax
10003da6:	68 00 00 00 00       	push   0x0	10003da7: R_386_32	passwsalt
10003dab:	e8 fc ff ff ff       	call   10003dac <firstRun(bool)+0xbd7>	10003dac: R_386_PC32	strcpy
10003db0:	83 c4 10             	add    esp,0x10
10003db3:	83 ec 04             	sub    esp,0x4
10003db6:	68 00 00 00 00       	push   0x0	10003db7: R_386_32	passwhash
10003dbb:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10003dc1:	50                   	push   eax
10003dc2:	68 00 00 00 00       	push   0x0	10003dc3: R_386_32	passwbufA
10003dc7:	e8 fc ff ff ff       	call   10003dc8 <firstRun(bool)+0xbf3>	10003dc8: R_386_PC32	bcrypt_hashpw
10003dcc:	83 c4 10             	add    esp,0x10
10003dcf:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10003dd2:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10003dd6:	75 09                	jne    10003de1 <firstRun(bool)+0xc0c>
10003dd8:	a1 00 00 00 00       	mov    eax,ds:0x0	10003dd9: R_386_32	_bcrypt_errno
10003ddd:	85 c0                	test   eax,eax
10003ddf:	74 5e                	je     10003e3f <firstRun(bool)+0xc6a>
10003de1:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003de8:	83 ec 08             	sub    esp,0x8
10003deb:	68 9c b4 00 10       	push   0x1000b49c	10003dec: R_386_32	.text
10003df0:	68 00 00 00 00       	push   0x0	10003df1: R_386_32	currName
10003df5:	e8 fc ff ff ff       	call   10003df6 <firstRun(bool)+0xc21>	10003df6: R_386_PC32	strcpy
10003dfa:	83 c4 10             	add    esp,0x10
10003dfd:	83 ec 08             	sub    esp,0x8
10003e00:	68 bd b4 00 10       	push   0x1000b4bd	10003e01: R_386_32	.text
10003e05:	68 00 00 00 00       	push   0x0	10003e06: R_386_32	currComp
10003e0a:	e8 fc ff ff ff       	call   10003e0b <firstRun(bool)+0xc36>	10003e0b: R_386_PC32	strcpy
10003e0f:	83 c4 10             	add    esp,0x10
10003e12:	83 ec 04             	sub    esp,0x4
10003e15:	6a 50                	push   0x50
10003e17:	6a 00                	push   0x0
10003e19:	68 00 00 00 00       	push   0x0	10003e1a: R_386_32	passwbufA
10003e1e:	e8 fc ff ff ff       	call   10003e1f <firstRun(bool)+0xc4a>	10003e1f: R_386_PC32	memset
10003e23:	83 c4 10             	add    esp,0x10
10003e26:	83 ec 04             	sub    esp,0x4
10003e29:	6a 50                	push   0x50
10003e2b:	6a 00                	push   0x0
10003e2d:	68 00 00 00 00       	push   0x0	10003e2e: R_386_32	passwbufB
10003e32:	e8 fc ff ff ff       	call   10003e33 <firstRun(bool)+0xc5e>	10003e33: R_386_PC32	memset
10003e37:	83 c4 10             	add    esp,0x10
10003e3a:	e9 5d f5 ff ff       	jmp    1000339c <firstRun(bool)+0x1c7>
10003e3f:	83 ec 04             	sub    esp,0x4
10003e42:	6a 50                	push   0x50
10003e44:	6a 00                	push   0x0
10003e46:	68 00 00 00 00       	push   0x0	10003e47: R_386_32	passwbufA
10003e4b:	e8 fc ff ff ff       	call   10003e4c <firstRun(bool)+0xc77>	10003e4c: R_386_PC32	memset
10003e50:	83 c4 10             	add    esp,0x10
10003e53:	83 ec 04             	sub    esp,0x4
10003e56:	6a 50                	push   0x50
10003e58:	6a 00                	push   0x0
10003e5a:	68 00 00 00 00       	push   0x0	10003e5b: R_386_32	passwbufB
10003e5f:	e8 fc ff ff ff       	call   10003e60 <firstRun(bool)+0xc8b>	10003e60: R_386_PC32	memset
10003e64:	83 c4 10             	add    esp,0x10
10003e67:	a0 00 00 00 00       	mov    al,ds:0x0	10003e68: R_386_32	createNewUserMode
10003e6c:	84 c0                	test   al,al
10003e6e:	74 16                	je     10003e86 <firstRun(bool)+0xcb1>
10003e70:	83 ec 0c             	sub    esp,0xc
10003e73:	68 00 00 00 00       	push   0x0	10003e74: R_386_32	currName
10003e78:	e8 fc ff ff ff       	call   10003e79 <firstRun(bool)+0xca4>	10003e79: R_386_PC32	createUser(char const*)
10003e7d:	83 c4 10             	add    esp,0x10
10003e80:	90                   	nop
10003e81:	e9 39 1b 00 00       	jmp    100059bf <firstRun(bool)+0x27ea>
10003e86:	83 ec 08             	sub    esp,0x8
10003e89:	6a 00                	push   0x0
10003e8b:	68 d0 07 00 00       	push   0x7d0
10003e90:	e8 fc ff ff ff       	call   10003e91 <firstRun(bool)+0xcbc>	10003e91: R_386_PC32	milliTenthSleep(unsigned long long)
10003e95:	83 c4 10             	add    esp,0x10
10003e98:	eb 01                	jmp    10003e9b <firstRun(bool)+0xcc6>
10003e9a:	90                   	nop
10003e9b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003e9d: R_386_32	installKey
10003ea2:	e8 fc ff ff ff       	call   10003ea3 <firstRun(bool)+0xcce>	10003ea3: R_386_PC32	drawBootScreen()
10003ea7:	83 ec 0c             	sub    esp,0xc
10003eaa:	68 cf b4 00 10       	push   0x1000b4cf	10003eab: R_386_32	.text
10003eaf:	6a 0d                	push   0xd
10003eb1:	6a 32                	push   0x32
10003eb3:	6a 02                	push   0x2
10003eb5:	6a 16                	push   0x16
10003eb7:	e8 fc ff ff ff       	call   10003eb8 <firstRun(bool)+0xce3>	10003eb8: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003ebc:	83 c4 20             	add    esp,0x20
10003ebf:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ec0: R_386_32	computer
10003ec4:	8b 88 58 01 00 00    	mov    ecx,DWORD PTR [eax+0x158]
10003eca:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ecb: R_386_32	computer
10003ecf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10003ed5:	8b 00                	mov    eax,DWORD PTR [eax]
10003ed7:	83 c0 28             	add    eax,0x28
10003eda:	8b 00                	mov    eax,DWORD PTR [eax]
10003edc:	8d 95 98 fe ff ff    	lea    edx,[ebp-0x168]
10003ee2:	83 ec 08             	sub    esp,0x8
10003ee5:	51                   	push   ecx
10003ee6:	52                   	push   edx
10003ee7:	ff d0                	call   eax
10003ee9:	83 c4 0c             	add    esp,0xc
10003eec:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [ebp-0x168]
10003ef2:	8b 95 9c fe ff ff    	mov    edx,DWORD PTR [ebp-0x164]
10003ef8:	89 85 d4 fe ff ff    	mov    DWORD PTR [ebp-0x12c],eax
10003efe:	89 95 d8 fe ff ff    	mov    DWORD PTR [ebp-0x128],edx
10003f04:	83 ec 08             	sub    esp,0x8
10003f07:	68 dd b4 00 10       	push   0x1000b4dd	10003f08: R_386_32	.text
10003f0c:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003f12:	50                   	push   eax
10003f13:	e8 fc ff ff ff       	call   10003f14 <firstRun(bool)+0xd3f>	10003f14: R_386_PC32	strcpy
10003f18:	83 c4 10             	add    esp,0x10
10003f1b:	8a 85 d4 fe ff ff    	mov    al,BYTE PTR [ebp-0x12c]
10003f21:	0f b6 d0             	movzx  edx,al
10003f24:	89 d0                	mov    eax,edx
10003f26:	c1 e0 02             	shl    eax,0x2
10003f29:	01 d0                	add    eax,edx
10003f2b:	c1 e0 03             	shl    eax,0x3
10003f2e:	01 d0                	add    eax,edx
10003f30:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f37:	01 d0                	add    eax,edx
10003f39:	66 c1 e8 08          	shr    ax,0x8
10003f3d:	c0 e8 03             	shr    al,0x3
10003f40:	83 c0 30             	add    eax,0x30
10003f43:	88 85 40 ff ff ff    	mov    BYTE PTR [ebp-0xc0],al
10003f49:	8a 8d d4 fe ff ff    	mov    cl,BYTE PTR [ebp-0x12c]
10003f4f:	0f b6 d1             	movzx  edx,cl
10003f52:	89 d0                	mov    eax,edx
10003f54:	c1 e0 02             	shl    eax,0x2
10003f57:	01 d0                	add    eax,edx
10003f59:	c1 e0 03             	shl    eax,0x3
10003f5c:	01 d0                	add    eax,edx
10003f5e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f65:	01 d0                	add    eax,edx
10003f67:	66 c1 e8 08          	shr    ax,0x8
10003f6b:	88 c2                	mov    dl,al
10003f6d:	c0 ea 03             	shr    dl,0x3
10003f70:	88 d0                	mov    al,dl
10003f72:	c1 e0 02             	shl    eax,0x2
10003f75:	01 d0                	add    eax,edx
10003f77:	d1 e0                	shl    eax,1
10003f79:	29 c1                	sub    ecx,eax
10003f7b:	88 ca                	mov    dl,cl
10003f7d:	8d 42 30             	lea    eax,[edx+0x30]
10003f80:	88 85 41 ff ff ff    	mov    BYTE PTR [ebp-0xbf],al
10003f86:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
10003f8c:	0f b6 c8             	movzx  ecx,al
10003f8f:	b8 67 66 66 66       	mov    eax,0x66666667
10003f94:	f7 e9                	imul   ecx
10003f96:	c1 fa 02             	sar    edx,0x2
10003f99:	89 c8                	mov    eax,ecx
10003f9b:	c1 f8 1f             	sar    eax,0x1f
10003f9e:	29 c2                	sub    edx,eax
10003fa0:	89 d0                	mov    eax,edx
10003fa2:	83 c0 30             	add    eax,0x30
10003fa5:	88 85 43 ff ff ff    	mov    BYTE PTR [ebp-0xbd],al
10003fab:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
10003fb1:	0f b6 c8             	movzx  ecx,al
10003fb4:	b8 67 66 66 66       	mov    eax,0x66666667
10003fb9:	f7 e9                	imul   ecx
10003fbb:	c1 fa 02             	sar    edx,0x2
10003fbe:	89 c8                	mov    eax,ecx
10003fc0:	c1 f8 1f             	sar    eax,0x1f
10003fc3:	29 c2                	sub    edx,eax
10003fc5:	89 d0                	mov    eax,edx
10003fc7:	c1 e0 02             	shl    eax,0x2
10003fca:	01 d0                	add    eax,edx
10003fcc:	01 c0                	add    eax,eax
10003fce:	29 c1                	sub    ecx,eax
10003fd0:	89 ca                	mov    edx,ecx
10003fd2:	88 d0                	mov    al,dl
10003fd4:	83 c0 30             	add    eax,0x30
10003fd7:	88 85 44 ff ff ff    	mov    BYTE PTR [ebp-0xbc],al
10003fdd:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003fe4:	0f b7 c8             	movzx  ecx,ax
10003fe7:	b8 d3 4d 62 10       	mov    eax,0x10624dd3
10003fec:	f7 e9                	imul   ecx
10003fee:	c1 fa 06             	sar    edx,0x6
10003ff1:	89 c8                	mov    eax,ecx
10003ff3:	c1 f8 1f             	sar    eax,0x1f
10003ff6:	29 c2                	sub    edx,eax
10003ff8:	89 d0                	mov    eax,edx
10003ffa:	b9 0a 00 00 00       	mov    ecx,0xa
10003fff:	99                   	cdq    
10004000:	f7 f9                	idiv   ecx
10004002:	89 d0                	mov    eax,edx
10004004:	83 c0 30             	add    eax,0x30
10004007:	88 85 46 ff ff ff    	mov    BYTE PTR [ebp-0xba],al
1000400d:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10004014:	0f b7 c8             	movzx  ecx,ax
10004017:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
1000401c:	f7 e9                	imul   ecx
1000401e:	c1 fa 05             	sar    edx,0x5
10004021:	89 c8                	mov    eax,ecx
10004023:	c1 f8 1f             	sar    eax,0x1f
10004026:	29 c2                	sub    edx,eax
10004028:	89 d0                	mov    eax,edx
1000402a:	b9 0a 00 00 00       	mov    ecx,0xa
1000402f:	99                   	cdq    
10004030:	f7 f9                	idiv   ecx
10004032:	89 d0                	mov    eax,edx
10004034:	83 c0 30             	add    eax,0x30
10004037:	88 85 47 ff ff ff    	mov    BYTE PTR [ebp-0xb9],al
1000403d:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10004044:	0f b7 c8             	movzx  ecx,ax
10004047:	b8 67 66 66 66       	mov    eax,0x66666667
1000404c:	f7 e9                	imul   ecx
1000404e:	c1 fa 02             	sar    edx,0x2
10004051:	89 c8                	mov    eax,ecx
10004053:	c1 f8 1f             	sar    eax,0x1f
10004056:	89 d1                	mov    ecx,edx
10004058:	29 c1                	sub    ecx,eax
1000405a:	b8 67 66 66 66       	mov    eax,0x66666667
1000405f:	f7 e9                	imul   ecx
10004061:	c1 fa 02             	sar    edx,0x2
10004064:	89 c8                	mov    eax,ecx
10004066:	c1 f8 1f             	sar    eax,0x1f
10004069:	29 c2                	sub    edx,eax
1000406b:	89 d0                	mov    eax,edx
1000406d:	c1 e0 02             	shl    eax,0x2
10004070:	01 d0                	add    eax,edx
10004072:	01 c0                	add    eax,eax
10004074:	29 c1                	sub    ecx,eax
10004076:	89 ca                	mov    edx,ecx
10004078:	88 d0                	mov    al,dl
1000407a:	83 c0 30             	add    eax,0x30
1000407d:	88 85 48 ff ff ff    	mov    BYTE PTR [ebp-0xb8],al
10004083:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
1000408a:	0f b7 c0             	movzx  eax,ax
1000408d:	b9 0a 00 00 00       	mov    ecx,0xa
10004092:	99                   	cdq    
10004093:	f7 f9                	idiv   ecx
10004095:	89 d0                	mov    eax,edx
10004097:	83 c0 30             	add    eax,0x30
1000409a:	88 85 49 ff ff ff    	mov    BYTE PTR [ebp-0xb7],al
100040a0:	8a 85 d8 fe ff ff    	mov    al,BYTE PTR [ebp-0x128]
100040a6:	0f b6 d0             	movzx  edx,al
100040a9:	89 d0                	mov    eax,edx
100040ab:	c1 e0 02             	shl    eax,0x2
100040ae:	01 d0                	add    eax,edx
100040b0:	c1 e0 03             	shl    eax,0x3
100040b3:	01 d0                	add    eax,edx
100040b5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100040bc:	01 d0                	add    eax,edx
100040be:	66 c1 e8 08          	shr    ax,0x8
100040c2:	c0 e8 03             	shr    al,0x3
100040c5:	83 c0 30             	add    eax,0x30
100040c8:	88 85 4b ff ff ff    	mov    BYTE PTR [ebp-0xb5],al
100040ce:	8a 8d d8 fe ff ff    	mov    cl,BYTE PTR [ebp-0x128]
100040d4:	0f b6 d1             	movzx  edx,cl
100040d7:	89 d0                	mov    eax,edx
100040d9:	c1 e0 02             	shl    eax,0x2
100040dc:	01 d0                	add    eax,edx
100040de:	c1 e0 03             	shl    eax,0x3
100040e1:	01 d0                	add    eax,edx
100040e3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100040ea:	01 d0                	add    eax,edx
100040ec:	66 c1 e8 08          	shr    ax,0x8
100040f0:	88 c2                	mov    dl,al
100040f2:	c0 ea 03             	shr    dl,0x3
100040f5:	88 d0                	mov    al,dl
100040f7:	c1 e0 02             	shl    eax,0x2
100040fa:	01 d0                	add    eax,edx
100040fc:	d1 e0                	shl    eax,1
100040fe:	29 c1                	sub    ecx,eax
10004100:	88 ca                	mov    dl,cl
10004102:	8d 42 30             	lea    eax,[edx+0x30]
10004105:	88 85 4c ff ff ff    	mov    BYTE PTR [ebp-0xb4],al
1000410b:	8a 85 d9 fe ff ff    	mov    al,BYTE PTR [ebp-0x127]
10004111:	0f b6 d0             	movzx  edx,al
10004114:	89 d0                	mov    eax,edx
10004116:	c1 e0 02             	shl    eax,0x2
10004119:	01 d0                	add    eax,edx
1000411b:	c1 e0 03             	shl    eax,0x3
1000411e:	01 d0                	add    eax,edx
10004120:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10004127:	01 d0                	add    eax,edx
10004129:	66 c1 e8 08          	shr    ax,0x8
1000412d:	c0 e8 03             	shr    al,0x3
10004130:	83 c0 30             	add    eax,0x30
10004133:	88 85 4e ff ff ff    	mov    BYTE PTR [ebp-0xb2],al
10004139:	8a 8d d9 fe ff ff    	mov    cl,BYTE PTR [ebp-0x127]
1000413f:	0f b6 d1             	movzx  edx,cl
10004142:	89 d0                	mov    eax,edx
10004144:	c1 e0 02             	shl    eax,0x2
10004147:	01 d0                	add    eax,edx
10004149:	c1 e0 03             	shl    eax,0x3
1000414c:	01 d0                	add    eax,edx
1000414e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10004155:	01 d0                	add    eax,edx
10004157:	66 c1 e8 08          	shr    ax,0x8
1000415b:	88 c2                	mov    dl,al
1000415d:	c0 ea 03             	shr    dl,0x3
10004160:	88 d0                	mov    al,dl
10004162:	c1 e0 02             	shl    eax,0x2
10004165:	01 d0                	add    eax,edx
10004167:	d1 e0                	shl    eax,1
10004169:	29 c1                	sub    ecx,eax
1000416b:	88 ca                	mov    dl,cl
1000416d:	8d 42 30             	lea    eax,[edx+0x30]
10004170:	88 85 4f ff ff ff    	mov    BYTE PTR [ebp-0xb1],al
10004176:	8a 85 da fe ff ff    	mov    al,BYTE PTR [ebp-0x126]
1000417c:	0f b6 d0             	movzx  edx,al
1000417f:	89 d0                	mov    eax,edx
10004181:	c1 e0 02             	shl    eax,0x2
10004184:	01 d0                	add    eax,edx
10004186:	c1 e0 03             	shl    eax,0x3
10004189:	01 d0                	add    eax,edx
1000418b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10004192:	01 d0                	add    eax,edx
10004194:	66 c1 e8 08          	shr    ax,0x8
10004198:	c0 e8 03             	shr    al,0x3
1000419b:	83 c0 30             	add    eax,0x30
1000419e:	88 85 51 ff ff ff    	mov    BYTE PTR [ebp-0xaf],al
100041a4:	8a 8d da fe ff ff    	mov    cl,BYTE PTR [ebp-0x126]
100041aa:	0f b6 d1             	movzx  edx,cl
100041ad:	89 d0                	mov    eax,edx
100041af:	c1 e0 02             	shl    eax,0x2
100041b2:	01 d0                	add    eax,edx
100041b4:	c1 e0 03             	shl    eax,0x3
100041b7:	01 d0                	add    eax,edx
100041b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100041c0:	01 d0                	add    eax,edx
100041c2:	66 c1 e8 08          	shr    ax,0x8
100041c6:	88 c2                	mov    dl,al
100041c8:	c0 ea 03             	shr    dl,0x3
100041cb:	88 d0                	mov    al,dl
100041cd:	c1 e0 02             	shl    eax,0x2
100041d0:	01 d0                	add    eax,edx
100041d2:	d1 e0                	shl    eax,1
100041d4:	29 c1                	sub    ecx,eax
100041d6:	88 ca                	mov    dl,cl
100041d8:	8d 42 30             	lea    eax,[edx+0x30]
100041db:	88 85 52 ff ff ff    	mov    BYTE PTR [ebp-0xae],al
100041e1:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100041e8:	a1 00 00 00 00       	mov    eax,ds:0x0	100041e9: R_386_32	term
100041ed:	83 ec 04             	sub    esp,0x4
100041f0:	6a 05                	push   0x5
100041f2:	6a 18                	push   0x18
100041f4:	50                   	push   eax
100041f5:	e8 fc ff ff ff       	call   100041f6 <firstRun(bool)+0x1021>	100041f6: R_386_PC32	VgaText::setCursor(int, int)
100041fa:	83 c4 10             	add    esp,0x10
100041fd:	a1 00 00 00 00       	mov    eax,ds:0x0	100041fe: R_386_32	term
10004202:	83 ec 08             	sub    esp,0x8
10004205:	68 f4 b4 00 10       	push   0x1000b4f4	10004206: R_386_32	.text
1000420a:	50                   	push   eax
1000420b:	e8 fc ff ff ff       	call   1000420c <firstRun(bool)+0x1037>	1000420c: R_386_PC32	VgaText::puts(char const*)
10004210:	83 c4 10             	add    esp,0x10
10004213:	a1 00 00 00 00       	mov    eax,ds:0x0	10004214: R_386_32	term
10004218:	83 ec 04             	sub    esp,0x4
1000421b:	6a 06                	push   0x6
1000421d:	6a 18                	push   0x18
1000421f:	50                   	push   eax
10004220:	e8 fc ff ff ff       	call   10004221 <firstRun(bool)+0x104c>	10004221: R_386_PC32	VgaText::setCursor(int, int)
10004225:	83 c4 10             	add    esp,0x10
10004228:	a1 00 00 00 00       	mov    eax,ds:0x0	10004229: R_386_32	term
1000422d:	83 ec 08             	sub    esp,0x8
10004230:	68 1c b5 00 10       	push   0x1000b51c	10004231: R_386_32	.text
10004235:	50                   	push   eax
10004236:	e8 fc ff ff ff       	call   10004237 <firstRun(bool)+0x1062>	10004237: R_386_PC32	VgaText::puts(char const*)
1000423b:	83 c4 10             	add    esp,0x10
1000423e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000423f: R_386_32	term
10004243:	83 ec 04             	sub    esp,0x4
10004246:	6a 09                	push   0x9
10004248:	6a 1a                	push   0x1a
1000424a:	50                   	push   eax
1000424b:	e8 fc ff ff ff       	call   1000424c <firstRun(bool)+0x1077>	1000424c: R_386_PC32	VgaText::setCursor(int, int)
10004250:	83 c4 10             	add    esp,0x10
10004253:	a1 00 00 00 00       	mov    eax,ds:0x0	10004254: R_386_32	term
10004258:	6a 0f                	push   0xf
1000425a:	6a 07                	push   0x7
1000425c:	68 32 b5 00 10       	push   0x1000b532	1000425d: R_386_32	.text
10004261:	50                   	push   eax
10004262:	e8 fc ff ff ff       	call   10004263 <firstRun(bool)+0x108e>	10004263: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004267:	83 c4 10             	add    esp,0x10
1000426a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000426b: R_386_32	term
1000426f:	83 ec 04             	sub    esp,0x4
10004272:	6a 18                	push   0x18
10004274:	6a 11                	push   0x11
10004276:	50                   	push   eax
10004277:	e8 fc ff ff ff       	call   10004278 <firstRun(bool)+0x10a3>	10004278: R_386_PC32	VgaText::setCursor(int, int)
1000427c:	83 c4 10             	add    esp,0x10
1000427f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004280: R_386_32	term
10004284:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10004286: R_386_32	safemode
1000428a:	84 d2                	test   dl,dl
1000428c:	74 07                	je     10004295 <firstRun(bool)+0x10c0>
1000428e:	b9 00 00 00 00       	mov    ecx,0x0
10004293:	eb 05                	jmp    1000429a <firstRun(bool)+0x10c5>
10004295:	b9 0b 00 00 00       	mov    ecx,0xb
1000429a:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	1000429c: R_386_32	safemode
100042a0:	84 d2                	test   dl,dl
100042a2:	74 07                	je     100042ab <firstRun(bool)+0x10d6>
100042a4:	ba 0f 00 00 00       	mov    edx,0xf
100042a9:	eb 05                	jmp    100042b0 <firstRun(bool)+0x10db>
100042ab:	ba 03 00 00 00       	mov    edx,0x3
100042b0:	51                   	push   ecx
100042b1:	52                   	push   edx
100042b2:	68 46 b5 00 10       	push   0x1000b546	100042b3: R_386_32	.text
100042b7:	50                   	push   eax
100042b8:	e8 fc ff ff ff       	call   100042b9 <firstRun(bool)+0x10e4>	100042b9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100042bd:	83 c4 10             	add    esp,0x10
100042c0:	a1 00 00 00 00       	mov    eax,ds:0x0	100042c1: R_386_32	term
100042c5:	83 ec 04             	sub    esp,0x4
100042c8:	6a 08                	push   0x8
100042ca:	6a 1a                	push   0x1a
100042cc:	50                   	push   eax
100042cd:	e8 fc ff ff ff       	call   100042ce <firstRun(bool)+0x10f9>	100042ce: R_386_PC32	VgaText::setCursor(int, int)
100042d2:	83 c4 10             	add    esp,0x10
100042d5:	a1 00 00 00 00       	mov    eax,ds:0x0	100042d6: R_386_32	term
100042da:	83 ec 08             	sub    esp,0x8
100042dd:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100042e3:	52                   	push   edx
100042e4:	50                   	push   eax
100042e5:	e8 fc ff ff ff       	call   100042e6 <firstRun(bool)+0x1111>	100042e6: R_386_PC32	VgaText::puts(char const*)
100042ea:	83 c4 10             	add    esp,0x10
100042ed:	a1 00 00 00 00       	mov    eax,ds:0x0	100042ee: R_386_32	term
100042f2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100042f5:	83 c2 1a             	add    edx,0x1a
100042f8:	83 ec 04             	sub    esp,0x4
100042fb:	6a 08                	push   0x8
100042fd:	52                   	push   edx
100042fe:	50                   	push   eax
100042ff:	e8 fc ff ff ff       	call   10004300 <firstRun(bool)+0x112b>	10004300: R_386_PC32	VgaText::setCursor(int, int)
10004304:	83 c4 10             	add    esp,0x10
10004307:	a1 00 00 00 00       	mov    eax,ds:0x0	10004308: R_386_32	term
1000430c:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10004312:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004315:	01 ca                	add    edx,ecx
10004317:	8a 12                	mov    dl,BYTE PTR [edx]
10004319:	0f be d2             	movsx  edx,dl
1000431c:	6a 00                	push   0x0
1000431e:	6a 0f                	push   0xf
10004320:	52                   	push   edx
10004321:	50                   	push   eax
10004322:	e8 fc ff ff ff       	call   10004323 <firstRun(bool)+0x114e>	10004323: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004327:	83 c4 10             	add    esp,0x10
1000432a:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
10004330:	0f be c0             	movsx  eax,al
10004333:	8d 50 d0             	lea    edx,[eax-0x30]
10004336:	89 d0                	mov    eax,edx
10004338:	c1 e0 02             	shl    eax,0x2
1000433b:	01 d0                	add    eax,edx
1000433d:	01 c0                	add    eax,eax
1000433f:	89 c2                	mov    edx,eax
10004341:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
10004347:	0f be c0             	movsx  eax,al
1000434a:	83 e8 30             	sub    eax,0x30
1000434d:	01 d0                	add    eax,edx
1000434f:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10004352:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
10004355:	b9 0c 00 00 00       	mov    ecx,0xc
1000435a:	99                   	cdq    
1000435b:	f7 f9                	idiv   ecx
1000435d:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
10004360:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10004364:	75 07                	jne    1000436d <firstRun(bool)+0x1198>
10004366:	c7 45 d0 0c 00 00 00 	mov    DWORD PTR [ebp-0x30],0xc
1000436d:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
10004373:	0f be c0             	movsx  eax,al
10004376:	8d 50 d0             	lea    edx,[eax-0x30]
10004379:	89 d0                	mov    eax,edx
1000437b:	c1 e0 02             	shl    eax,0x2
1000437e:	01 d0                	add    eax,edx
10004380:	01 c0                	add    eax,eax
10004382:	89 c2                	mov    edx,eax
10004384:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
1000438a:	0f be c0             	movsx  eax,al
1000438d:	83 e8 30             	sub    eax,0x30
10004390:	01 d0                	add    eax,edx
10004392:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
10004395:	83 ec 04             	sub    esp,0x4
10004398:	6a 10                	push   0x10
1000439a:	6a 00                	push   0x0
1000439c:	8d 85 b6 fe ff ff    	lea    eax,[ebp-0x14a]
100043a2:	50                   	push   eax
100043a3:	e8 fc ff ff ff       	call   100043a4 <firstRun(bool)+0x11cf>	100043a4: R_386_PC32	memset
100043a8:	83 c4 10             	add    esp,0x10
100043ab:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [ebp-0x54],0x0
100043b2:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100043b5:	8d 50 01             	lea    edx,[eax+0x1]
100043b8:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100043bb:	c6 84 05 b6 fe ff ff 28 	mov    BYTE PTR [ebp+eax*1-0x14a],0x28
100043c3:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
100043c6:	b8 67 66 66 66       	mov    eax,0x66666667
100043cb:	f7 e9                	imul   ecx
100043cd:	c1 fa 02             	sar    edx,0x2
100043d0:	89 c8                	mov    eax,ecx
100043d2:	c1 f8 1f             	sar    eax,0x1f
100043d5:	29 c2                	sub    edx,eax
100043d7:	89 d0                	mov    eax,edx
100043d9:	8d 48 30             	lea    ecx,[eax+0x30]
100043dc:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100043df:	8d 50 01             	lea    edx,[eax+0x1]
100043e2:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100043e5:	88 ca                	mov    dl,cl
100043e7:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
100043ee:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
100043f1:	b8 67 66 66 66       	mov    eax,0x66666667
100043f6:	f7 e9                	imul   ecx
100043f8:	c1 fa 02             	sar    edx,0x2
100043fb:	89 c8                	mov    eax,ecx
100043fd:	c1 f8 1f             	sar    eax,0x1f
10004400:	29 c2                	sub    edx,eax
10004402:	89 d0                	mov    eax,edx
10004404:	c1 e0 02             	shl    eax,0x2
10004407:	01 d0                	add    eax,edx
10004409:	01 c0                	add    eax,eax
1000440b:	29 c1                	sub    ecx,eax
1000440d:	89 ca                	mov    edx,ecx
1000440f:	88 d0                	mov    al,dl
10004411:	8d 48 30             	lea    ecx,[eax+0x30]
10004414:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10004417:	8d 50 01             	lea    edx,[eax+0x1]
1000441a:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
1000441d:	88 ca                	mov    dl,cl
1000441f:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10004426:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10004429:	8d 50 01             	lea    edx,[eax+0x1]
1000442c:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
1000442f:	c6 84 05 b6 fe ff ff 3a 	mov    BYTE PTR [ebp+eax*1-0x14a],0x3a
10004437:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
1000443a:	b8 67 66 66 66       	mov    eax,0x66666667
1000443f:	f7 e9                	imul   ecx
10004441:	c1 fa 02             	sar    edx,0x2
10004444:	89 c8                	mov    eax,ecx
10004446:	c1 f8 1f             	sar    eax,0x1f
10004449:	29 c2                	sub    edx,eax
1000444b:	89 d0                	mov    eax,edx
1000444d:	8d 48 30             	lea    ecx,[eax+0x30]
10004450:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10004453:	8d 50 01             	lea    edx,[eax+0x1]
10004456:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10004459:	88 ca                	mov    dl,cl
1000445b:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10004462:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10004465:	b8 67 66 66 66       	mov    eax,0x66666667
1000446a:	f7 e9                	imul   ecx
1000446c:	c1 fa 02             	sar    edx,0x2
1000446f:	89 c8                	mov    eax,ecx
10004471:	c1 f8 1f             	sar    eax,0x1f
10004474:	29 c2                	sub    edx,eax
10004476:	89 d0                	mov    eax,edx
10004478:	c1 e0 02             	shl    eax,0x2
1000447b:	01 d0                	add    eax,edx
1000447d:	01 c0                	add    eax,eax
1000447f:	29 c1                	sub    ecx,eax
10004481:	89 ca                	mov    edx,ecx
10004483:	88 d0                	mov    al,dl
10004485:	8d 48 30             	lea    ecx,[eax+0x30]
10004488:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
1000448b:	8d 50 01             	lea    edx,[eax+0x1]
1000448e:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10004491:	88 ca                	mov    dl,cl
10004493:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
1000449a:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
1000449d:	8d 50 01             	lea    edx,[eax+0x1]
100044a0:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100044a3:	c6 84 05 b6 fe ff ff 20 	mov    BYTE PTR [ebp+eax*1-0x14a],0x20
100044ab:	83 7d b4 0b          	cmp    DWORD PTR [ebp-0x4c],0xb
100044af:	7e 04                	jle    100044b5 <firstRun(bool)+0x12e0>
100044b1:	b2 50                	mov    dl,0x50
100044b3:	eb 02                	jmp    100044b7 <firstRun(bool)+0x12e2>
100044b5:	b2 41                	mov    dl,0x41
100044b7:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100044ba:	8d 48 01             	lea    ecx,[eax+0x1]
100044bd:	89 4d ac             	mov    DWORD PTR [ebp-0x54],ecx
100044c0:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
100044c7:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100044ca:	8d 50 01             	lea    edx,[eax+0x1]
100044cd:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100044d0:	c6 84 05 b6 fe ff ff 4d 	mov    BYTE PTR [ebp+eax*1-0x14a],0x4d
100044d8:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100044db:	8d 50 01             	lea    edx,[eax+0x1]
100044de:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100044e1:	c6 84 05 b6 fe ff ff 29 	mov    BYTE PTR [ebp+eax*1-0x14a],0x29
100044e9:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100044eb: R_386_32	term
100044ef:	83 ec 0c             	sub    esp,0xc
100044f2:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
100044f8:	50                   	push   eax
100044f9:	e8 fc ff ff ff       	call   100044fa <firstRun(bool)+0x1325>	100044fa: R_386_PC32	strlen
100044fe:	83 c4 10             	add    esp,0x10
10004501:	83 c0 1e             	add    eax,0x1e
10004504:	83 ec 04             	sub    esp,0x4
10004507:	6a 08                	push   0x8
10004509:	50                   	push   eax
1000450a:	53                   	push   ebx
1000450b:	e8 fc ff ff ff       	call   1000450c <firstRun(bool)+0x1337>	1000450c: R_386_PC32	VgaText::setCursor(int, int)
10004510:	83 c4 10             	add    esp,0x10
10004513:	a1 00 00 00 00       	mov    eax,ds:0x0	10004514: R_386_32	term
10004518:	83 ec 08             	sub    esp,0x8
1000451b:	8d 95 b6 fe ff ff    	lea    edx,[ebp-0x14a]
10004521:	52                   	push   edx
10004522:	50                   	push   eax
10004523:	e8 fc ff ff ff       	call   10004524 <firstRun(bool)+0x134f>	10004524: R_386_PC32	VgaText::puts(char const*)
10004528:	83 c4 10             	add    esp,0x10
1000452b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000452c: R_386_32	term
10004530:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004533:	83 c2 1a             	add    edx,0x1a
10004536:	83 ec 04             	sub    esp,0x4
10004539:	6a 08                	push   0x8
1000453b:	52                   	push   edx
1000453c:	50                   	push   eax
1000453d:	e8 fc ff ff ff       	call   1000453e <firstRun(bool)+0x1369>	1000453e: R_386_PC32	VgaText::setCursor(int, int)
10004542:	83 c4 10             	add    esp,0x10
10004545:	a0 00 00 00 00       	mov    al,ds:0x0	10004546: R_386_32	installKey
1000454a:	84 c0                	test   al,al
1000454c:	0f 94 c0             	sete   al
1000454f:	84 c0                	test   al,al
10004551:	74 02                	je     10004555 <firstRun(bool)+0x1380>
10004553:	eb f0                	jmp    10004545 <firstRun(bool)+0x1370>
10004555:	a1 00 00 00 00       	mov    eax,ds:0x0	10004556: R_386_32	term
1000455a:	05 82 00 00 00       	add    eax,0x82
1000455f:	83 ec 04             	sub    esp,0x4
10004562:	6a 10                	push   0x10
10004564:	6a 00                	push   0x0
10004566:	50                   	push   eax
10004567:	e8 fc ff ff ff       	call   10004568 <firstRun(bool)+0x1393>	10004568: R_386_PC32	memset
1000456c:	83 c4 10             	add    esp,0x10
1000456f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004570: R_386_32	term
10004574:	05 02 01 00 00       	add    eax,0x102
10004579:	83 ec 04             	sub    esp,0x4
1000457c:	6a 10                	push   0x10
1000457e:	6a 00                	push   0x0
10004580:	50                   	push   eax
10004581:	e8 fc ff ff ff       	call   10004582 <firstRun(bool)+0x13ad>	10004582: R_386_PC32	memset
10004586:	83 c4 10             	add    esp,0x10
10004589:	a0 00 00 00 00       	mov    al,ds:0x0	1000458a: R_386_32	installKey
1000458e:	3c 03                	cmp    al,0x3
10004590:	74 09                	je     1000459b <firstRun(bool)+0x13c6>
10004592:	a0 00 00 00 00       	mov    al,ds:0x0	10004593: R_386_32	installKey
10004597:	3c 08                	cmp    al,0x8
10004599:	75 04                	jne    1000459f <firstRun(bool)+0x13ca>
1000459b:	b0 01                	mov    al,0x1
1000459d:	eb 02                	jmp    100045a1 <firstRun(bool)+0x13cc>
1000459f:	b0 00                	mov    al,0x0
100045a1:	84 c0                	test   al,al
100045a3:	74 58                	je     100045fd <firstRun(bool)+0x1428>
100045a5:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
100045a8:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
100045ac:	75 16                	jne    100045c4 <firstRun(bool)+0x13ef>
100045ae:	83 ec 0c             	sub    esp,0xc
100045b1:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
100045b7:	50                   	push   eax
100045b8:	e8 fc ff ff ff       	call   100045b9 <firstRun(bool)+0x13e4>	100045b9: R_386_PC32	strlen
100045bd:	83 c4 10             	add    esp,0x10
100045c0:	48                   	dec    eax
100045c1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100045c4:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100045ca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100045cd:	01 d0                	add    eax,edx
100045cf:	8a 00                	mov    al,BYTE PTR [eax]
100045d1:	3c 20                	cmp    al,0x20
100045d3:	74 d0                	je     100045a5 <firstRun(bool)+0x13d0>
100045d5:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100045db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100045de:	01 d0                	add    eax,edx
100045e0:	8a 00                	mov    al,BYTE PTR [eax]
100045e2:	3c 2f                	cmp    al,0x2f
100045e4:	74 bf                	je     100045a5 <firstRun(bool)+0x13d0>
100045e6:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100045ec:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100045ef:	01 d0                	add    eax,edx
100045f1:	8a 00                	mov    al,BYTE PTR [eax]
100045f3:	3c 3a                	cmp    al,0x3a
100045f5:	0f 85 f8 04 00 00    	jne    10004af3 <firstRun(bool)+0x191e>
100045fb:	eb a8                	jmp    100045a5 <firstRun(bool)+0x13d0>
100045fd:	a0 00 00 00 00       	mov    al,ds:0x0	100045fe: R_386_32	installKey
10004602:	3c 2f                	cmp    al,0x2f
10004604:	7e 09                	jle    1000460f <firstRun(bool)+0x143a>
10004606:	a0 00 00 00 00       	mov    al,ds:0x0	10004607: R_386_32	installKey
1000460b:	3c 39                	cmp    al,0x39
1000460d:	7e 12                	jle    10004621 <firstRun(bool)+0x144c>
1000460f:	a0 00 00 00 00       	mov    al,ds:0x0	10004610: R_386_32	installKey
10004614:	3c 20                	cmp    al,0x20
10004616:	74 09                	je     10004621 <firstRun(bool)+0x144c>
10004618:	a0 00 00 00 00       	mov    al,ds:0x0	10004619: R_386_32	installKey
1000461d:	3c 04                	cmp    al,0x4
1000461f:	75 04                	jne    10004625 <firstRun(bool)+0x1450>
10004621:	b0 01                	mov    al,0x1
10004623:	eb 02                	jmp    10004627 <firstRun(bool)+0x1452>
10004625:	b0 00                	mov    al,0x0
10004627:	84 c0                	test   al,al
10004629:	0f 84 cf 01 00 00    	je     100047fe <firstRun(bool)+0x1629>
1000462f:	a0 00 00 00 00       	mov    al,ds:0x0	10004630: R_386_32	installKey
10004634:	3c 2f                	cmp    al,0x2f
10004636:	7e 0d                	jle    10004645 <firstRun(bool)+0x1470>
10004638:	a0 00 00 00 00       	mov    al,ds:0x0	10004639: R_386_32	installKey
1000463d:	3c 39                	cmp    al,0x39
1000463f:	7f 04                	jg     10004645 <firstRun(bool)+0x1470>
10004641:	b0 01                	mov    al,0x1
10004643:	eb 02                	jmp    10004647 <firstRun(bool)+0x1472>
10004645:	b0 00                	mov    al,0x0
10004647:	84 c0                	test   al,al
10004649:	0f 84 51 01 00 00    	je     100047a0 <firstRun(bool)+0x15cb>
1000464f:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10004653:	75 0d                	jne    10004662 <firstRun(bool)+0x148d>
10004655:	a0 00 00 00 00       	mov    al,ds:0x0	10004656: R_386_32	installKey
1000465a:	3c 33                	cmp    al,0x33
1000465c:	7e 04                	jle    10004662 <firstRun(bool)+0x148d>
1000465e:	b0 01                	mov    al,0x1
10004660:	eb 02                	jmp    10004664 <firstRun(bool)+0x148f>
10004662:	b0 00                	mov    al,0x0
10004664:	84 c0                	test   al,al
10004666:	74 28                	je     10004690 <firstRun(bool)+0x14bb>
10004668:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000466b:	8d 50 01             	lea    edx,[eax+0x1]
1000466e:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10004671:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10004679:	a0 00 00 00 00       	mov    al,ds:0x0	1000467a: R_386_32	installKey
1000467e:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10004684:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004687:	01 ca                	add    edx,ecx
10004689:	88 02                	mov    BYTE PTR [edx],al
1000468b:	e9 10 01 00 00       	jmp    100047a0 <firstRun(bool)+0x15cb>
10004690:	83 7d e4 03          	cmp    DWORD PTR [ebp-0x1c],0x3
10004694:	75 0d                	jne    100046a3 <firstRun(bool)+0x14ce>
10004696:	a0 00 00 00 00       	mov    al,ds:0x0	10004697: R_386_32	installKey
1000469b:	3c 31                	cmp    al,0x31
1000469d:	7e 04                	jle    100046a3 <firstRun(bool)+0x14ce>
1000469f:	b0 01                	mov    al,0x1
100046a1:	eb 02                	jmp    100046a5 <firstRun(bool)+0x14d0>
100046a3:	b0 00                	mov    al,0x0
100046a5:	84 c0                	test   al,al
100046a7:	74 28                	je     100046d1 <firstRun(bool)+0x14fc>
100046a9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100046ac:	8d 50 01             	lea    edx,[eax+0x1]
100046af:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
100046b2:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
100046ba:	a0 00 00 00 00       	mov    al,ds:0x0	100046bb: R_386_32	installKey
100046bf:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
100046c5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100046c8:	01 ca                	add    edx,ecx
100046ca:	88 02                	mov    BYTE PTR [edx],al
100046cc:	e9 cf 00 00 00       	jmp    100047a0 <firstRun(bool)+0x15cb>
100046d1:	83 7d e4 0b          	cmp    DWORD PTR [ebp-0x1c],0xb
100046d5:	75 0d                	jne    100046e4 <firstRun(bool)+0x150f>
100046d7:	a0 00 00 00 00       	mov    al,ds:0x0	100046d8: R_386_32	installKey
100046dc:	3c 32                	cmp    al,0x32
100046de:	7e 04                	jle    100046e4 <firstRun(bool)+0x150f>
100046e0:	b0 01                	mov    al,0x1
100046e2:	eb 02                	jmp    100046e6 <firstRun(bool)+0x1511>
100046e4:	b0 00                	mov    al,0x0
100046e6:	84 c0                	test   al,al
100046e8:	74 28                	je     10004712 <firstRun(bool)+0x153d>
100046ea:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100046ed:	8d 50 01             	lea    edx,[eax+0x1]
100046f0:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
100046f3:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
100046fb:	a0 00 00 00 00       	mov    al,ds:0x0	100046fc: R_386_32	installKey
10004700:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10004706:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004709:	01 ca                	add    edx,ecx
1000470b:	88 02                	mov    BYTE PTR [edx],al
1000470d:	e9 8e 00 00 00       	jmp    100047a0 <firstRun(bool)+0x15cb>
10004712:	83 7d e4 0e          	cmp    DWORD PTR [ebp-0x1c],0xe
10004716:	75 0d                	jne    10004725 <firstRun(bool)+0x1550>
10004718:	a0 00 00 00 00       	mov    al,ds:0x0	10004719: R_386_32	installKey
1000471d:	3c 35                	cmp    al,0x35
1000471f:	7e 04                	jle    10004725 <firstRun(bool)+0x1550>
10004721:	b0 01                	mov    al,0x1
10004723:	eb 02                	jmp    10004727 <firstRun(bool)+0x1552>
10004725:	b0 00                	mov    al,0x0
10004727:	84 c0                	test   al,al
10004729:	74 25                	je     10004750 <firstRun(bool)+0x157b>
1000472b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000472e:	8d 50 01             	lea    edx,[eax+0x1]
10004731:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10004734:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
1000473c:	a0 00 00 00 00       	mov    al,ds:0x0	1000473d: R_386_32	installKey
10004741:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10004747:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000474a:	01 ca                	add    edx,ecx
1000474c:	88 02                	mov    BYTE PTR [edx],al
1000474e:	eb 50                	jmp    100047a0 <firstRun(bool)+0x15cb>
10004750:	83 7d e4 11          	cmp    DWORD PTR [ebp-0x1c],0x11
10004754:	75 0d                	jne    10004763 <firstRun(bool)+0x158e>
10004756:	a0 00 00 00 00       	mov    al,ds:0x0	10004757: R_386_32	installKey
1000475b:	3c 35                	cmp    al,0x35
1000475d:	7e 04                	jle    10004763 <firstRun(bool)+0x158e>
1000475f:	b0 01                	mov    al,0x1
10004761:	eb 02                	jmp    10004765 <firstRun(bool)+0x1590>
10004763:	b0 00                	mov    al,0x0
10004765:	84 c0                	test   al,al
10004767:	74 25                	je     1000478e <firstRun(bool)+0x15b9>
10004769:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000476c:	8d 50 01             	lea    edx,[eax+0x1]
1000476f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10004772:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
1000477a:	a0 00 00 00 00       	mov    al,ds:0x0	1000477b: R_386_32	installKey
1000477f:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10004785:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004788:	01 ca                	add    edx,ecx
1000478a:	88 02                	mov    BYTE PTR [edx],al
1000478c:	eb 12                	jmp    100047a0 <firstRun(bool)+0x15cb>
1000478e:	a0 00 00 00 00       	mov    al,ds:0x0	1000478f: R_386_32	installKey
10004793:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10004799:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000479c:	01 ca                	add    edx,ecx
1000479e:	88 02                	mov    BYTE PTR [edx],al
100047a0:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100047a3:	83 ec 0c             	sub    esp,0xc
100047a6:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
100047ac:	50                   	push   eax
100047ad:	e8 fc ff ff ff       	call   100047ae <firstRun(bool)+0x15d9>	100047ae: R_386_PC32	strlen
100047b2:	83 c4 10             	add    esp,0x10
100047b5:	89 c2                	mov    edx,eax
100047b7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100047ba:	39 c2                	cmp    edx,eax
100047bc:	77 07                	ja     100047c5 <firstRun(bool)+0x15f0>
100047be:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100047c5:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100047cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100047ce:	01 d0                	add    eax,edx
100047d0:	8a 00                	mov    al,BYTE PTR [eax]
100047d2:	3c 20                	cmp    al,0x20
100047d4:	74 ca                	je     100047a0 <firstRun(bool)+0x15cb>
100047d6:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100047dc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100047df:	01 d0                	add    eax,edx
100047e1:	8a 00                	mov    al,BYTE PTR [eax]
100047e3:	3c 2f                	cmp    al,0x2f
100047e5:	74 b9                	je     100047a0 <firstRun(bool)+0x15cb>
100047e7:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100047ed:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100047f0:	01 d0                	add    eax,edx
100047f2:	8a 00                	mov    al,BYTE PTR [eax]
100047f4:	3c 3a                	cmp    al,0x3a
100047f6:	0f 85 f7 02 00 00    	jne    10004af3 <firstRun(bool)+0x191e>
100047fc:	eb a2                	jmp    100047a0 <firstRun(bool)+0x15cb>
100047fe:	a0 00 00 00 00       	mov    al,ds:0x0	100047ff: R_386_32	installKey
10004803:	3c 0a                	cmp    al,0xa
10004805:	0f 94 c0             	sete   al
10004808:	84 c0                	test   al,al
1000480a:	0f 84 d1 02 00 00    	je     10004ae1 <firstRun(bool)+0x190c>
10004810:	8a 85 40 ff ff ff    	mov    al,BYTE PTR [ebp-0xc0]
10004816:	0f be c0             	movsx  eax,al
10004819:	8d 50 d0             	lea    edx,[eax-0x30]
1000481c:	89 d0                	mov    eax,edx
1000481e:	c1 e0 02             	shl    eax,0x2
10004821:	01 d0                	add    eax,edx
10004823:	01 c0                	add    eax,eax
10004825:	89 c2                	mov    edx,eax
10004827:	8a 85 41 ff ff ff    	mov    al,BYTE PTR [ebp-0xbf]
1000482d:	0f be c0             	movsx  eax,al
10004830:	83 e8 30             	sub    eax,0x30
10004833:	01 d0                	add    eax,edx
10004835:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10004838:	8a 85 43 ff ff ff    	mov    al,BYTE PTR [ebp-0xbd]
1000483e:	0f be c0             	movsx  eax,al
10004841:	8d 50 d0             	lea    edx,[eax-0x30]
10004844:	89 d0                	mov    eax,edx
10004846:	c1 e0 02             	shl    eax,0x2
10004849:	01 d0                	add    eax,edx
1000484b:	01 c0                	add    eax,eax
1000484d:	89 c2                	mov    edx,eax
1000484f:	8a 85 44 ff ff ff    	mov    al,BYTE PTR [ebp-0xbc]
10004855:	0f be c0             	movsx  eax,al
10004858:	83 e8 30             	sub    eax,0x30
1000485b:	01 d0                	add    eax,edx
1000485d:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10004860:	8a 85 46 ff ff ff    	mov    al,BYTE PTR [ebp-0xba]
10004866:	0f be c0             	movsx  eax,al
10004869:	8d 50 d0             	lea    edx,[eax-0x30]
1000486c:	89 d0                	mov    eax,edx
1000486e:	c1 e0 02             	shl    eax,0x2
10004871:	01 d0                	add    eax,edx
10004873:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000487a:	01 d0                	add    eax,edx
1000487c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10004883:	01 d0                	add    eax,edx
10004885:	c1 e0 03             	shl    eax,0x3
10004888:	89 c1                	mov    ecx,eax
1000488a:	8a 85 47 ff ff ff    	mov    al,BYTE PTR [ebp-0xb9]
10004890:	0f be c0             	movsx  eax,al
10004893:	8d 50 d0             	lea    edx,[eax-0x30]
10004896:	89 d0                	mov    eax,edx
10004898:	c1 e0 02             	shl    eax,0x2
1000489b:	01 d0                	add    eax,edx
1000489d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100048a4:	01 d0                	add    eax,edx
100048a6:	c1 e0 02             	shl    eax,0x2
100048a9:	01 c1                	add    ecx,eax
100048ab:	8a 85 48 ff ff ff    	mov    al,BYTE PTR [ebp-0xb8]
100048b1:	0f be c0             	movsx  eax,al
100048b4:	8d 50 d0             	lea    edx,[eax-0x30]
100048b7:	89 d0                	mov    eax,edx
100048b9:	c1 e0 02             	shl    eax,0x2
100048bc:	01 d0                	add    eax,edx
100048be:	01 c0                	add    eax,eax
100048c0:	8d 14 01             	lea    edx,[ecx+eax*1]
100048c3:	8a 85 49 ff ff ff    	mov    al,BYTE PTR [ebp-0xb7]
100048c9:	0f be c0             	movsx  eax,al
100048cc:	83 e8 30             	sub    eax,0x30
100048cf:	01 d0                	add    eax,edx
100048d1:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
100048d4:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
100048da:	0f be c0             	movsx  eax,al
100048dd:	8d 50 d0             	lea    edx,[eax-0x30]
100048e0:	89 d0                	mov    eax,edx
100048e2:	c1 e0 02             	shl    eax,0x2
100048e5:	01 d0                	add    eax,edx
100048e7:	01 c0                	add    eax,eax
100048e9:	89 c2                	mov    edx,eax
100048eb:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
100048f1:	0f be c0             	movsx  eax,al
100048f4:	83 e8 30             	sub    eax,0x30
100048f7:	01 d0                	add    eax,edx
100048f9:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
100048fc:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
10004902:	0f be c0             	movsx  eax,al
10004905:	8d 50 d0             	lea    edx,[eax-0x30]
10004908:	89 d0                	mov    eax,edx
1000490a:	c1 e0 02             	shl    eax,0x2
1000490d:	01 d0                	add    eax,edx
1000490f:	01 c0                	add    eax,eax
10004911:	89 c2                	mov    edx,eax
10004913:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
10004919:	0f be c0             	movsx  eax,al
1000491c:	83 e8 30             	sub    eax,0x30
1000491f:	01 d0                	add    eax,edx
10004921:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10004924:	8a 85 51 ff ff ff    	mov    al,BYTE PTR [ebp-0xaf]
1000492a:	0f be c0             	movsx  eax,al
1000492d:	8d 50 d0             	lea    edx,[eax-0x30]
10004930:	89 d0                	mov    eax,edx
10004932:	c1 e0 02             	shl    eax,0x2
10004935:	01 d0                	add    eax,edx
10004937:	01 c0                	add    eax,eax
10004939:	89 c2                	mov    edx,eax
1000493b:	8a 85 52 ff ff ff    	mov    al,BYTE PTR [ebp-0xae]
10004941:	0f be c0             	movsx  eax,al
10004944:	83 e8 30             	sub    eax,0x30
10004947:	01 d0                	add    eax,edx
10004949:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
1000494c:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
1000494f:	83 e0 03             	and    eax,0x3
10004952:	85 c0                	test   eax,eax
10004954:	75 1f                	jne    10004975 <firstRun(bool)+0x17a0>
10004956:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10004959:	b9 19 00 00 00       	mov    ecx,0x19
1000495e:	99                   	cdq    
1000495f:	f7 f9                	idiv   ecx
10004961:	89 d0                	mov    eax,edx
10004963:	85 c0                	test   eax,eax
10004965:	75 0a                	jne    10004971 <firstRun(bool)+0x179c>
10004967:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
1000496a:	83 e0 0f             	and    eax,0xf
1000496d:	85 c0                	test   eax,eax
1000496f:	75 04                	jne    10004975 <firstRun(bool)+0x17a0>
10004971:	b0 01                	mov    al,0x1
10004973:	eb 02                	jmp    10004977 <firstRun(bool)+0x17a2>
10004975:	b0 00                	mov    al,0x0
10004977:	88 45 93             	mov    BYTE PTR [ebp-0x6d],al
1000497a:	83 7d a8 1f          	cmp    DWORD PTR [ebp-0x58],0x1f
1000497e:	7e 0c                	jle    1000498c <firstRun(bool)+0x17b7>
10004980:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004987:	e9 67 01 00 00       	jmp    10004af3 <firstRun(bool)+0x191e>
1000498c:	83 7d a8 1e          	cmp    DWORD PTR [ebp-0x58],0x1e
10004990:	7e 2a                	jle    100049bc <firstRun(bool)+0x17e7>
10004992:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
10004996:	74 18                	je     100049b0 <firstRun(bool)+0x17db>
10004998:	83 7d a4 04          	cmp    DWORD PTR [ebp-0x5c],0x4
1000499c:	74 12                	je     100049b0 <firstRun(bool)+0x17db>
1000499e:	83 7d a4 06          	cmp    DWORD PTR [ebp-0x5c],0x6
100049a2:	74 0c                	je     100049b0 <firstRun(bool)+0x17db>
100049a4:	83 7d a4 09          	cmp    DWORD PTR [ebp-0x5c],0x9
100049a8:	74 06                	je     100049b0 <firstRun(bool)+0x17db>
100049aa:	83 7d a4 0b          	cmp    DWORD PTR [ebp-0x5c],0xb
100049ae:	75 0c                	jne    100049bc <firstRun(bool)+0x17e7>
100049b0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100049b7:	e9 37 01 00 00       	jmp    10004af3 <firstRun(bool)+0x191e>
100049bc:	83 7d a8 1d          	cmp    DWORD PTR [ebp-0x58],0x1d
100049c0:	75 1c                	jne    100049de <firstRun(bool)+0x1809>
100049c2:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
100049c6:	75 16                	jne    100049de <firstRun(bool)+0x1809>
100049c8:	8a 45 93             	mov    al,BYTE PTR [ebp-0x6d]
100049cb:	83 f0 01             	xor    eax,0x1
100049ce:	84 c0                	test   al,al
100049d0:	74 0c                	je     100049de <firstRun(bool)+0x1809>
100049d2:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100049d9:	e9 15 01 00 00       	jmp    10004af3 <firstRun(bool)+0x191e>
100049de:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
100049e2:	75 0c                	jne    100049f0 <firstRun(bool)+0x181b>
100049e4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100049eb:	e9 03 01 00 00       	jmp    10004af3 <firstRun(bool)+0x191e>
100049f0:	83 7d a4 0c          	cmp    DWORD PTR [ebp-0x5c],0xc
100049f4:	7f 06                	jg     100049fc <firstRun(bool)+0x1827>
100049f6:	83 7d a4 00          	cmp    DWORD PTR [ebp-0x5c],0x0
100049fa:	75 0c                	jne    10004a08 <firstRun(bool)+0x1833>
100049fc:	c7 45 e4 03 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x3
10004a03:	e9 eb 00 00 00       	jmp    10004af3 <firstRun(bool)+0x191e>
10004a08:	81 7d a0 b7 0b 00 00 	cmp    DWORD PTR [ebp-0x60],0xbb7
10004a0f:	7f 09                	jg     10004a1a <firstRun(bool)+0x1845>
10004a11:	81 7d a0 b1 07 00 00 	cmp    DWORD PTR [ebp-0x60],0x7b1
10004a18:	7f 0c                	jg     10004a26 <firstRun(bool)+0x1851>
10004a1a:	c7 45 e4 06 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x6
10004a21:	e9 cd 00 00 00       	jmp    10004af3 <firstRun(bool)+0x191e>
10004a26:	83 7d 9c 17          	cmp    DWORD PTR [ebp-0x64],0x17
10004a2a:	7e 0c                	jle    10004a38 <firstRun(bool)+0x1863>
10004a2c:	c7 45 e4 0b 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xb
10004a33:	e9 bb 00 00 00       	jmp    10004af3 <firstRun(bool)+0x191e>
10004a38:	83 7d 98 3b          	cmp    DWORD PTR [ebp-0x68],0x3b
10004a3c:	7e 0c                	jle    10004a4a <firstRun(bool)+0x1875>
10004a3e:	c7 45 e4 0e 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xe
10004a45:	e9 a9 00 00 00       	jmp    10004af3 <firstRun(bool)+0x191e>
10004a4a:	83 7d 94 3b          	cmp    DWORD PTR [ebp-0x6c],0x3b
10004a4e:	7e 0c                	jle    10004a5c <firstRun(bool)+0x1887>
10004a50:	c7 45 e4 11 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x11
10004a57:	e9 97 00 00 00       	jmp    10004af3 <firstRun(bool)+0x191e>
10004a5c:	8b 45 98             	mov    eax,DWORD PTR [ebp-0x68]
10004a5f:	88 85 d9 fe ff ff    	mov    BYTE PTR [ebp-0x127],al
10004a65:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
10004a68:	88 85 da fe ff ff    	mov    BYTE PTR [ebp-0x126],al
10004a6e:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
10004a71:	88 85 d8 fe ff ff    	mov    BYTE PTR [ebp-0x128],al
10004a77:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10004a7a:	88 85 d4 fe ff ff    	mov    BYTE PTR [ebp-0x12c],al
10004a80:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
10004a83:	88 85 d5 fe ff ff    	mov    BYTE PTR [ebp-0x12b],al
10004a89:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10004a8c:	66 89 85 d6 fe ff ff 	mov    WORD PTR [ebp-0x12a],ax
10004a93:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a94: R_386_32	computer
10004a98:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
10004a9e:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a9f: R_386_32	computer
10004aa3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10004aa9:	8b 00                	mov    eax,DWORD PTR [eax]
10004aab:	83 c0 30             	add    eax,0x30
10004aae:	8b 00                	mov    eax,DWORD PTR [eax]
10004ab0:	83 ec 04             	sub    esp,0x4
10004ab3:	ff b5 d8 fe ff ff    	push   DWORD PTR [ebp-0x128]
10004ab9:	ff b5 d4 fe ff ff    	push   DWORD PTR [ebp-0x12c]
10004abf:	52                   	push   edx
10004ac0:	ff d0                	call   eax
10004ac2:	83 c4 10             	add    esp,0x10
10004ac5:	90                   	nop
10004ac6:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004ac8: R_386_32	installKey
10004acd:	83 ec 08             	sub    esp,0x8
10004ad0:	6a 00                	push   0x0
10004ad2:	68 a0 0f 00 00       	push   0xfa0
10004ad7:	e8 fc ff ff ff       	call   10004ad8 <firstRun(bool)+0x1903>	10004ad8: R_386_PC32	milliTenthSleep(unsigned long long)
10004adc:	83 c4 10             	add    esp,0x10
10004adf:	eb 31                	jmp    10004b12 <firstRun(bool)+0x193d>
10004ae1:	a0 00 00 00 00       	mov    al,ds:0x0	10004ae2: R_386_32	installKey
10004ae6:	3c 1b                	cmp    al,0x1b
10004ae8:	0f 94 c0             	sete   al
10004aeb:	84 c0                	test   al,al
10004aed:	0f 85 a8 e8 ff ff    	jne    1000339b <firstRun(bool)+0x1c6>
10004af3:	83 ec 08             	sub    esp,0x8
10004af6:	6a 00                	push   0x0
10004af8:	68 f4 01 00 00       	push   0x1f4
10004afd:	e8 fc ff ff ff       	call   10004afe <firstRun(bool)+0x1929>	10004afe: R_386_PC32	milliTenthSleep(unsigned long long)
10004b02:	83 c4 10             	add    esp,0x10
10004b05:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004b07: R_386_32	installKey
10004b0c:	e9 af f7 ff ff       	jmp    100042c0 <firstRun(bool)+0x10eb>
10004b11:	90                   	nop
10004b12:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004b14: R_386_32	installKey
10004b19:	a0 00 00 00 00       	mov    al,ds:0x0	10004b1a: R_386_32	firstTimeEnteringTimezone
10004b1e:	84 c0                	test   al,al
10004b20:	74 18                	je     10004b3a <firstRun(bool)+0x1965>
10004b22:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004b24: R_386_32	firstTimeEnteringTimezone
10004b29:	c7 05 00 00 00 00 39 00 00 00 	mov    DWORD PTR ds:0x0,0x39	10004b2b: R_386_32	tzsel
10004b33:	c7 45 dc 30 00 00 00 	mov    DWORD PTR [ebp-0x24],0x30
10004b3a:	e8 fc ff ff ff       	call   10004b3b <firstRun(bool)+0x1966>	10004b3b: R_386_PC32	drawBootScreen()
10004b3f:	83 ec 0c             	sub    esp,0xc
10004b42:	68 cf b4 00 10       	push   0x1000b4cf	10004b43: R_386_32	.text
10004b47:	6a 14                	push   0x14
10004b49:	6a 3c                	push   0x3c
10004b4b:	6a 01                	push   0x1
10004b4d:	6a 12                	push   0x12
10004b4f:	e8 fc ff ff ff       	call   10004b50 <firstRun(bool)+0x197b>	10004b50: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004b54:	83 c4 20             	add    esp,0x20
10004b57:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b58: R_386_32	term
10004b5c:	83 ec 04             	sub    esp,0x4
10004b5f:	6a 04                	push   0x4
10004b61:	6a 14                	push   0x14
10004b63:	50                   	push   eax
10004b64:	e8 fc ff ff ff       	call   10004b65 <firstRun(bool)+0x1990>	10004b65: R_386_PC32	VgaText::setCursor(int, int)
10004b69:	83 c4 10             	add    esp,0x10
10004b6c:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b6d: R_386_32	term
10004b71:	83 ec 08             	sub    esp,0x8
10004b74:	68 5c b5 00 10       	push   0x1000b55c	10004b75: R_386_32	.text
10004b79:	50                   	push   eax
10004b7a:	e8 fc ff ff ff       	call   10004b7b <firstRun(bool)+0x19a6>	10004b7b: R_386_PC32	VgaText::puts(char const*)
10004b7f:	83 c4 10             	add    esp,0x10
10004b82:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b83: R_386_32	term
10004b87:	83 ec 04             	sub    esp,0x4
10004b8a:	6a 18                	push   0x18
10004b8c:	6a 11                	push   0x11
10004b8e:	50                   	push   eax
10004b8f:	e8 fc ff ff ff       	call   10004b90 <firstRun(bool)+0x19bb>	10004b90: R_386_PC32	VgaText::setCursor(int, int)
10004b94:	83 c4 10             	add    esp,0x10
10004b97:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b98: R_386_32	term
10004b9c:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10004b9e: R_386_32	safemode
10004ba2:	84 d2                	test   dl,dl
10004ba4:	74 07                	je     10004bad <firstRun(bool)+0x19d8>
10004ba6:	b9 00 00 00 00       	mov    ecx,0x0
10004bab:	eb 05                	jmp    10004bb2 <firstRun(bool)+0x19dd>
10004bad:	b9 0b 00 00 00       	mov    ecx,0xb
10004bb2:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10004bb4: R_386_32	safemode
10004bb8:	84 d2                	test   dl,dl
10004bba:	74 07                	je     10004bc3 <firstRun(bool)+0x19ee>
10004bbc:	ba 0f 00 00 00       	mov    edx,0xf
10004bc1:	eb 05                	jmp    10004bc8 <firstRun(bool)+0x19f3>
10004bc3:	ba 03 00 00 00       	mov    edx,0x3
10004bc8:	51                   	push   ecx
10004bc9:	52                   	push   edx
10004bca:	68 46 b5 00 10       	push   0x1000b546	10004bcb: R_386_32	.text
10004bcf:	50                   	push   eax
10004bd0:	e8 fc ff ff ff       	call   10004bd1 <firstRun(bool)+0x19fc>	10004bd1: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004bd5:	83 c4 10             	add    esp,0x10
10004bd8:	e8 fc ff ff ff       	call   10004bd9 <firstRun(bool)+0x1a04>	10004bd9: R_386_PC32	loadTimezoneStrings()
10004bdd:	89 45 8c             	mov    DWORD PTR [ebp-0x74],eax
10004be0:	b8 d2 00 00 00       	mov    eax,0xd2
10004be5:	99                   	cdq    
10004be6:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
10004be9:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
10004bec:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
10004bf3:	83 7d cc 0d          	cmp    DWORD PTR [ebp-0x34],0xd
10004bf7:	7f 32                	jg     10004c2b <firstRun(bool)+0x1a56>
10004bf9:	a1 00 00 00 00       	mov    eax,ds:0x0	10004bfa: R_386_32	term
10004bfe:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10004c01:	83 c2 07             	add    edx,0x7
10004c04:	83 ec 04             	sub    esp,0x4
10004c07:	52                   	push   edx
10004c08:	6a 4b                	push   0x4b
10004c0a:	50                   	push   eax
10004c0b:	e8 fc ff ff ff       	call   10004c0c <firstRun(bool)+0x1a37>	10004c0c: R_386_PC32	VgaText::setCursor(int, int)
10004c10:	83 c4 10             	add    esp,0x10
10004c13:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c14: R_386_32	term
10004c18:	83 ec 08             	sub    esp,0x8
10004c1b:	6a 20                	push   0x20
10004c1d:	50                   	push   eax
10004c1e:	e8 fc ff ff ff       	call   10004c1f <firstRun(bool)+0x1a4a>	10004c1f: R_386_PC32	VgaText::putchar(char)
10004c23:	83 c4 10             	add    esp,0x10
10004c26:	ff 45 cc             	inc    DWORD PTR [ebp-0x34]
10004c29:	eb c8                	jmp    10004bf3 <firstRun(bool)+0x1a1e>
10004c2b:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
10004c32:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10004c35:	3b 45 88             	cmp    eax,DWORD PTR [ebp-0x78]
10004c38:	7d 48                	jge    10004c82 <firstRun(bool)+0x1aad>
10004c3a:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004c3c: R_386_32	term
10004c40:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10004c43:	8d 58 07             	lea    ebx,[eax+0x7]
10004c46:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10004c49:	89 d0                	mov    eax,edx
10004c4b:	01 c0                	add    eax,eax
10004c4d:	01 d0                	add    eax,edx
10004c4f:	01 c0                	add    eax,eax
10004c51:	01 d0                	add    eax,edx
10004c53:	01 c0                	add    eax,eax
10004c55:	99                   	cdq    
10004c56:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
10004c59:	01 d8                	add    eax,ebx
10004c5b:	83 ec 04             	sub    esp,0x4
10004c5e:	50                   	push   eax
10004c5f:	6a 4b                	push   0x4b
10004c61:	51                   	push   ecx
10004c62:	e8 fc ff ff ff       	call   10004c63 <firstRun(bool)+0x1a8e>	10004c63: R_386_PC32	VgaText::setCursor(int, int)
10004c67:	83 c4 10             	add    esp,0x10
10004c6a:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c6b: R_386_32	term
10004c6f:	83 ec 08             	sub    esp,0x8
10004c72:	6a db                	push   0xffffffdb
10004c74:	50                   	push   eax
10004c75:	e8 fc ff ff ff       	call   10004c76 <firstRun(bool)+0x1aa1>	10004c76: R_386_PC32	VgaText::putchar(char)
10004c7a:	83 c4 10             	add    esp,0x10
10004c7d:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
10004c80:	eb b0                	jmp    10004c32 <firstRun(bool)+0x1a5d>
10004c82:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c83: R_386_32	term
10004c87:	83 ec 04             	sub    esp,0x4
10004c8a:	6a 06                	push   0x6
10004c8c:	6a 4b                	push   0x4b
10004c8e:	50                   	push   eax
10004c8f:	e8 fc ff ff ff       	call   10004c90 <firstRun(bool)+0x1abb>	10004c90: R_386_PC32	VgaText::setCursor(int, int)
10004c94:	83 c4 10             	add    esp,0x10
10004c97:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c98: R_386_32	term
10004c9c:	83 ec 08             	sub    esp,0x8
10004c9f:	6a 1e                	push   0x1e
10004ca1:	50                   	push   eax
10004ca2:	e8 fc ff ff ff       	call   10004ca3 <firstRun(bool)+0x1ace>	10004ca3: R_386_PC32	VgaText::putchar(char)
10004ca7:	83 c4 10             	add    esp,0x10
10004caa:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cab: R_386_32	term
10004caf:	83 ec 04             	sub    esp,0x4
10004cb2:	6a 14                	push   0x14
10004cb4:	6a 4b                	push   0x4b
10004cb6:	50                   	push   eax
10004cb7:	e8 fc ff ff ff       	call   10004cb8 <firstRun(bool)+0x1ae3>	10004cb8: R_386_PC32	VgaText::setCursor(int, int)
10004cbc:	83 c4 10             	add    esp,0x10
10004cbf:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cc0: R_386_32	term
10004cc4:	83 ec 08             	sub    esp,0x8
10004cc7:	6a 1f                	push   0x1f
10004cc9:	50                   	push   eax
10004cca:	e8 fc ff ff ff       	call   10004ccb <firstRun(bool)+0x1af6>	10004ccb: R_386_PC32	VgaText::putchar(char)
10004ccf:	83 c4 10             	add    esp,0x10
10004cd2:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
10004cd9:	83 7d c4 0e          	cmp    DWORD PTR [ebp-0x3c],0xe
10004cdd:	7f 7e                	jg     10004d5d <firstRun(bool)+0x1b88>
10004cdf:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ce0: R_386_32	term
10004ce4:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10004ce7:	83 c2 06             	add    edx,0x6
10004cea:	83 ec 04             	sub    esp,0x4
10004ced:	52                   	push   edx
10004cee:	6a 14                	push   0x14
10004cf0:	50                   	push   eax
10004cf1:	e8 fc ff ff ff       	call   10004cf2 <firstRun(bool)+0x1b1d>	10004cf2: R_386_PC32	VgaText::setCursor(int, int)
10004cf6:	83 c4 10             	add    esp,0x10
10004cf9:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cfa: R_386_32	term
10004cfe:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10004d01:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10004d04:	01 d1                	add    ecx,edx
10004d06:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004d08: R_386_32	tzsel
10004d0c:	39 d1                	cmp    ecx,edx
10004d0e:	75 07                	jne    10004d17 <firstRun(bool)+0x1b42>
10004d10:	bb 00 00 00 00       	mov    ebx,0x0
10004d15:	eb 05                	jmp    10004d1c <firstRun(bool)+0x1b47>
10004d17:	bb 0f 00 00 00       	mov    ebx,0xf
10004d1c:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10004d1f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10004d22:	01 d1                	add    ecx,edx
10004d24:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004d26: R_386_32	tzsel
10004d2a:	39 d1                	cmp    ecx,edx
10004d2c:	75 07                	jne    10004d35 <firstRun(bool)+0x1b60>
10004d2e:	b9 0f 00 00 00       	mov    ecx,0xf
10004d33:	eb 05                	jmp    10004d3a <firstRun(bool)+0x1b65>
10004d35:	b9 00 00 00 00       	mov    ecx,0x0
10004d3a:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
10004d3d:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10004d40:	01 f2                	add    edx,esi
10004d42:	8b 14 95 00 00 00 00 	mov    edx,DWORD PTR [edx*4+0x0]	10004d45: R_386_32	timezoneStrings
10004d49:	53                   	push   ebx
10004d4a:	51                   	push   ecx
10004d4b:	52                   	push   edx
10004d4c:	50                   	push   eax
10004d4d:	e8 fc ff ff ff       	call   10004d4e <firstRun(bool)+0x1b79>	10004d4e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004d52:	83 c4 10             	add    esp,0x10
10004d55:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
10004d58:	e9 7c ff ff ff       	jmp    10004cd9 <firstRun(bool)+0x1b04>
10004d5d:	a0 00 00 00 00       	mov    al,ds:0x0	10004d5e: R_386_32	installKey
10004d62:	84 c0                	test   al,al
10004d64:	0f 94 c0             	sete   al
10004d67:	84 c0                	test   al,al
10004d69:	74 02                	je     10004d6d <firstRun(bool)+0x1b98>
10004d6b:	eb f0                	jmp    10004d5d <firstRun(bool)+0x1b88>
10004d6d:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d6e: R_386_32	term
10004d72:	05 82 00 00 00       	add    eax,0x82
10004d77:	83 ec 04             	sub    esp,0x4
10004d7a:	6a 04                	push   0x4
10004d7c:	6a 00                	push   0x0
10004d7e:	50                   	push   eax
10004d7f:	e8 fc ff ff ff       	call   10004d80 <firstRun(bool)+0x1bab>	10004d80: R_386_PC32	memset
10004d84:	83 c4 10             	add    esp,0x10
10004d87:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d88: R_386_32	term
10004d8c:	05 02 01 00 00       	add    eax,0x102
10004d91:	83 ec 04             	sub    esp,0x4
10004d94:	6a 04                	push   0x4
10004d96:	6a 00                	push   0x0
10004d98:	50                   	push   eax
10004d99:	e8 fc ff ff ff       	call   10004d9a <firstRun(bool)+0x1bc5>	10004d9a: R_386_PC32	memset
10004d9e:	83 c4 10             	add    esp,0x10
10004da1:	a0 00 00 00 00       	mov    al,ds:0x0	10004da2: R_386_32	installKey
10004da6:	3c 01                	cmp    al,0x1
10004da8:	0f 94 c0             	sete   al
10004dab:	84 c0                	test   al,al
10004dad:	74 41                	je     10004df0 <firstRun(bool)+0x1c1b>
10004daf:	a1 00 00 00 00       	mov    eax,ds:0x0	10004db0: R_386_32	tzsel
10004db4:	48                   	dec    eax
10004db5:	a3 00 00 00 00       	mov    ds:0x0,eax	10004db6: R_386_32	tzsel
10004dba:	a1 00 00 00 00       	mov    eax,ds:0x0	10004dbb: R_386_32	tzsel
10004dbf:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
10004dc2:	83 f8 04             	cmp    eax,0x4
10004dc5:	7f 03                	jg     10004dca <firstRun(bool)+0x1bf5>
10004dc7:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10004dca:	a1 00 00 00 00       	mov    eax,ds:0x0	10004dcb: R_386_32	tzsel
10004dcf:	85 c0                	test   eax,eax
10004dd1:	79 0a                	jns    10004ddd <firstRun(bool)+0x1c08>
10004dd3:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004dd5: R_386_32	tzsel
10004ddd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10004de1:	0f 89 82 00 00 00    	jns    10004e69 <firstRun(bool)+0x1c94>
10004de7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10004dee:	eb 79                	jmp    10004e69 <firstRun(bool)+0x1c94>
10004df0:	a0 00 00 00 00       	mov    al,ds:0x0	10004df1: R_386_32	installKey
10004df5:	3c 02                	cmp    al,0x2
10004df7:	0f 94 c0             	sete   al
10004dfa:	84 c0                	test   al,al
10004dfc:	74 4b                	je     10004e49 <firstRun(bool)+0x1c74>
10004dfe:	a1 00 00 00 00       	mov    eax,ds:0x0	10004dff: R_386_32	tzsel
10004e03:	40                   	inc    eax
10004e04:	a3 00 00 00 00       	mov    ds:0x0,eax	10004e05: R_386_32	tzsel
10004e09:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e0a: R_386_32	tzsel
10004e0e:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
10004e11:	83 f8 0a             	cmp    eax,0xa
10004e14:	7e 03                	jle    10004e19 <firstRun(bool)+0x1c44>
10004e16:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10004e19:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004e1c:	8d 50 ff             	lea    edx,[eax-0x1]
10004e1f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e20: R_386_32	tzsel
10004e24:	39 c2                	cmp    edx,eax
10004e26:	7f 0b                	jg     10004e33 <firstRun(bool)+0x1c5e>
10004e28:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004e2b:	83 e8 02             	sub    eax,0x2
10004e2e:	a3 00 00 00 00       	mov    ds:0x0,eax	10004e2f: R_386_32	tzsel
10004e33:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004e36:	83 e8 0f             	sub    eax,0xf
10004e39:	39 45 dc             	cmp    DWORD PTR [ebp-0x24],eax
10004e3c:	7c 2b                	jl     10004e69 <firstRun(bool)+0x1c94>
10004e3e:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004e41:	83 e8 10             	sub    eax,0x10
10004e44:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10004e47:	eb 20                	jmp    10004e69 <firstRun(bool)+0x1c94>
10004e49:	a0 00 00 00 00       	mov    al,ds:0x0	10004e4a: R_386_32	installKey
10004e4e:	3c 0a                	cmp    al,0xa
10004e50:	0f 94 c0             	sete   al
10004e53:	84 c0                	test   al,al
10004e55:	75 30                	jne    10004e87 <firstRun(bool)+0x1cb2>
10004e57:	a0 00 00 00 00       	mov    al,ds:0x0	10004e58: R_386_32	installKey
10004e5c:	3c 1b                	cmp    al,0x1b
10004e5e:	0f 94 c0             	sete   al
10004e61:	84 c0                	test   al,al
10004e63:	0f 85 31 f0 ff ff    	jne    10003e9a <firstRun(bool)+0xcc5>
10004e69:	83 ec 08             	sub    esp,0x8
10004e6c:	6a 00                	push   0x0
10004e6e:	68 f4 01 00 00       	push   0x1f4
10004e73:	e8 fc ff ff ff       	call   10004e74 <firstRun(bool)+0x1c9f>	10004e74: R_386_PC32	milliTenthSleep(unsigned long long)
10004e78:	83 c4 10             	add    esp,0x10
10004e7b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004e7d: R_386_32	installKey
10004e82:	e9 65 fd ff ff       	jmp    10004bec <firstRun(bool)+0x1a17>
10004e87:	90                   	nop
10004e88:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004e8a: R_386_32	installKey
10004e8f:	83 ec 08             	sub    esp,0x8
10004e92:	6a 00                	push   0x0
10004e94:	68 a0 0f 00 00       	push   0xfa0
10004e99:	e8 fc ff ff ff       	call   10004e9a <firstRun(bool)+0x1cc5>	10004e9a: R_386_PC32	milliTenthSleep(unsigned long long)
10004e9e:	83 c4 10             	add    esp,0x10
10004ea1:	eb 01                	jmp    10004ea4 <firstRun(bool)+0x1ccf>
10004ea3:	90                   	nop
10004ea4:	e8 fc ff ff ff       	call   10004ea5 <firstRun(bool)+0x1cd0>	10004ea5: R_386_PC32	drawBootScreen()
10004ea9:	83 ec 08             	sub    esp,0x8
10004eac:	6a 00                	push   0x0
10004eae:	68 58 1b 00 00       	push   0x1b58
10004eb3:	e8 fc ff ff ff       	call   10004eb4 <firstRun(bool)+0x1cdf>	10004eb4: R_386_PC32	milliTenthSleep(unsigned long long)
10004eb8:	83 c4 10             	add    esp,0x10
10004ebb:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004ebd: R_386_32	installKey
10004ec2:	e8 fc ff ff ff       	call   10004ec3 <firstRun(bool)+0x1cee>	10004ec3: R_386_PC32	drawBootScreen()
10004ec7:	83 ec 0c             	sub    esp,0xc
10004eca:	68 8e b5 00 10       	push   0x1000b58e	10004ecb: R_386_32	.text
10004ecf:	6a 10                	push   0x10
10004ed1:	6a 37                	push   0x37
10004ed3:	6a 03                	push   0x3
10004ed5:	6a 14                	push   0x14
10004ed7:	e8 fc ff ff ff       	call   10004ed8 <firstRun(bool)+0x1d03>	10004ed8: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004edc:	83 c4 20             	add    esp,0x20
10004edf:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ee0: R_386_32	term
10004ee4:	83 ec 04             	sub    esp,0x4
10004ee7:	6a 06                	push   0x6
10004ee9:	6a 16                	push   0x16
10004eeb:	50                   	push   eax
10004eec:	e8 fc ff ff ff       	call   10004eed <firstRun(bool)+0x1d18>	10004eed: R_386_PC32	VgaText::setCursor(int, int)
10004ef1:	83 c4 10             	add    esp,0x10
10004ef4:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ef5: R_386_32	term
10004ef9:	83 ec 08             	sub    esp,0x8
10004efc:	68 a0 b5 00 10       	push   0x1000b5a0	10004efd: R_386_32	.text
10004f01:	50                   	push   eax
10004f02:	e8 fc ff ff ff       	call   10004f03 <firstRun(bool)+0x1d2e>	10004f03: R_386_PC32	VgaText::puts(char const*)
10004f07:	83 c4 10             	add    esp,0x10
10004f0a:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f0b: R_386_32	term
10004f0f:	83 ec 04             	sub    esp,0x4
10004f12:	6a 07                	push   0x7
10004f14:	6a 16                	push   0x16
10004f16:	50                   	push   eax
10004f17:	e8 fc ff ff ff       	call   10004f18 <firstRun(bool)+0x1d43>	10004f18: R_386_PC32	VgaText::setCursor(int, int)
10004f1c:	83 c4 10             	add    esp,0x10
10004f1f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f20: R_386_32	term
10004f24:	83 ec 08             	sub    esp,0x8
10004f27:	68 d4 b5 00 10       	push   0x1000b5d4	10004f28: R_386_32	.text
10004f2c:	50                   	push   eax
10004f2d:	e8 fc ff ff ff       	call   10004f2e <firstRun(bool)+0x1d59>	10004f2e: R_386_PC32	VgaText::puts(char const*)
10004f32:	83 c4 10             	add    esp,0x10
10004f35:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f36: R_386_32	term
10004f3a:	83 ec 04             	sub    esp,0x4
10004f3d:	6a 18                	push   0x18
10004f3f:	6a 11                	push   0x11
10004f41:	50                   	push   eax
10004f42:	e8 fc ff ff ff       	call   10004f43 <firstRun(bool)+0x1d6e>	10004f43: R_386_PC32	VgaText::setCursor(int, int)
10004f47:	83 c4 10             	add    esp,0x10
10004f4a:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f4b: R_386_32	term
10004f4f:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10004f51: R_386_32	safemode
10004f55:	84 d2                	test   dl,dl
10004f57:	74 07                	je     10004f60 <firstRun(bool)+0x1d8b>
10004f59:	b9 00 00 00 00       	mov    ecx,0x0
10004f5e:	eb 05                	jmp    10004f65 <firstRun(bool)+0x1d90>
10004f60:	b9 0b 00 00 00       	mov    ecx,0xb
10004f65:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10004f67: R_386_32	safemode
10004f6b:	84 d2                	test   dl,dl
10004f6d:	74 07                	je     10004f76 <firstRun(bool)+0x1da1>
10004f6f:	ba 0f 00 00 00       	mov    edx,0xf
10004f74:	eb 05                	jmp    10004f7b <firstRun(bool)+0x1da6>
10004f76:	ba 03 00 00 00       	mov    edx,0x3
10004f7b:	51                   	push   ecx
10004f7c:	52                   	push   edx
10004f7d:	68 46 b5 00 10       	push   0x1000b546	10004f7e: R_386_32	.text
10004f82:	50                   	push   eax
10004f83:	e8 fc ff ff ff       	call   10004f84 <firstRun(bool)+0x1daf>	10004f84: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004f88:	83 c4 10             	add    esp,0x10
10004f8b:	c7 45 8c 03 00 00 00 	mov    DWORD PTR [ebp-0x74],0x3
10004f92:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10004f98:	bb 58 b8 00 10       	mov    ebx,0x1000b858	10004f99: R_386_32	.text
10004f9d:	ba 03 00 00 00       	mov    edx,0x3
10004fa2:	89 c7                	mov    edi,eax
10004fa4:	89 de                	mov    esi,ebx
10004fa6:	89 d1                	mov    ecx,edx
10004fa8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004faa:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
10004fb1:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10004fb4:	3b 45 8c             	cmp    eax,DWORD PTR [ebp-0x74]
10004fb7:	7d 68                	jge    10005021 <firstRun(bool)+0x1e4c>
10004fb9:	a1 00 00 00 00       	mov    eax,ds:0x0	10004fba: R_386_32	term
10004fbe:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
10004fc1:	83 c2 09             	add    edx,0x9
10004fc4:	83 ec 04             	sub    esp,0x4
10004fc7:	52                   	push   edx
10004fc8:	6a 16                	push   0x16
10004fca:	50                   	push   eax
10004fcb:	e8 fc ff ff ff       	call   10004fcc <firstRun(bool)+0x1df7>	10004fcc: R_386_PC32	VgaText::setCursor(int, int)
10004fd0:	83 c4 10             	add    esp,0x10
10004fd3:	a1 00 00 00 00       	mov    eax,ds:0x0	10004fd4: R_386_32	term
10004fd8:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004fda: R_386_32	modesel
10004fde:	39 55 c0             	cmp    DWORD PTR [ebp-0x40],edx
10004fe1:	75 07                	jne    10004fea <firstRun(bool)+0x1e15>
10004fe3:	bb 00 00 00 00       	mov    ebx,0x0
10004fe8:	eb 05                	jmp    10004fef <firstRun(bool)+0x1e1a>
10004fea:	bb 0f 00 00 00       	mov    ebx,0xf
10004fef:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004ff1: R_386_32	modesel
10004ff5:	39 55 c0             	cmp    DWORD PTR [ebp-0x40],edx
10004ff8:	75 07                	jne    10005001 <firstRun(bool)+0x1e2c>
10004ffa:	b9 0f 00 00 00       	mov    ecx,0xf
10004fff:	eb 05                	jmp    10005006 <firstRun(bool)+0x1e31>
10005001:	b9 00 00 00 00       	mov    ecx,0x0
10005006:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
10005009:	8b 94 95 c8 fe ff ff 	mov    edx,DWORD PTR [ebp+edx*4-0x138]
10005010:	53                   	push   ebx
10005011:	51                   	push   ecx
10005012:	52                   	push   edx
10005013:	50                   	push   eax
10005014:	e8 fc ff ff ff       	call   10005015 <firstRun(bool)+0x1e40>	10005015: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10005019:	83 c4 10             	add    esp,0x10
1000501c:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
1000501f:	eb 90                	jmp    10004fb1 <firstRun(bool)+0x1ddc>
10005021:	a0 00 00 00 00       	mov    al,ds:0x0	10005022: R_386_32	installKey
10005026:	84 c0                	test   al,al
10005028:	0f 94 c0             	sete   al
1000502b:	84 c0                	test   al,al
1000502d:	74 02                	je     10005031 <firstRun(bool)+0x1e5c>
1000502f:	eb f0                	jmp    10005021 <firstRun(bool)+0x1e4c>
10005031:	a1 00 00 00 00       	mov    eax,ds:0x0	10005032: R_386_32	term
10005036:	05 82 00 00 00       	add    eax,0x82
1000503b:	83 ec 04             	sub    esp,0x4
1000503e:	6a 04                	push   0x4
10005040:	6a 00                	push   0x0
10005042:	50                   	push   eax
10005043:	e8 fc ff ff ff       	call   10005044 <firstRun(bool)+0x1e6f>	10005044: R_386_PC32	memset
10005048:	83 c4 10             	add    esp,0x10
1000504b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000504c: R_386_32	term
10005050:	05 02 01 00 00       	add    eax,0x102
10005055:	83 ec 04             	sub    esp,0x4
10005058:	6a 04                	push   0x4
1000505a:	6a 00                	push   0x0
1000505c:	50                   	push   eax
1000505d:	e8 fc ff ff ff       	call   1000505e <firstRun(bool)+0x1e89>	1000505e: R_386_PC32	memset
10005062:	83 c4 10             	add    esp,0x10
10005065:	a0 00 00 00 00       	mov    al,ds:0x0	10005066: R_386_32	installKey
1000506a:	3c 01                	cmp    al,0x1
1000506c:	0f 94 c0             	sete   al
1000506f:	84 c0                	test   al,al
10005071:	74 20                	je     10005093 <firstRun(bool)+0x1ebe>
10005073:	a1 00 00 00 00       	mov    eax,ds:0x0	10005074: R_386_32	modesel
10005078:	48                   	dec    eax
10005079:	a3 00 00 00 00       	mov    ds:0x0,eax	1000507a: R_386_32	modesel
1000507e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000507f: R_386_32	modesel
10005083:	85 c0                	test   eax,eax
10005085:	79 5a                	jns    100050e1 <firstRun(bool)+0x1f0c>
10005087:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005089: R_386_32	modesel
10005091:	eb 4e                	jmp    100050e1 <firstRun(bool)+0x1f0c>
10005093:	a0 00 00 00 00       	mov    al,ds:0x0	10005094: R_386_32	installKey
10005098:	3c 02                	cmp    al,0x2
1000509a:	0f 94 c0             	sete   al
1000509d:	84 c0                	test   al,al
1000509f:	74 20                	je     100050c1 <firstRun(bool)+0x1eec>
100050a1:	a1 00 00 00 00       	mov    eax,ds:0x0	100050a2: R_386_32	modesel
100050a6:	40                   	inc    eax
100050a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100050a8: R_386_32	modesel
100050ac:	a1 00 00 00 00       	mov    eax,ds:0x0	100050ad: R_386_32	modesel
100050b1:	39 45 8c             	cmp    DWORD PTR [ebp-0x74],eax
100050b4:	7f 2b                	jg     100050e1 <firstRun(bool)+0x1f0c>
100050b6:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100050b9:	48                   	dec    eax
100050ba:	a3 00 00 00 00       	mov    ds:0x0,eax	100050bb: R_386_32	modesel
100050bf:	eb 20                	jmp    100050e1 <firstRun(bool)+0x1f0c>
100050c1:	a0 00 00 00 00       	mov    al,ds:0x0	100050c2: R_386_32	installKey
100050c6:	3c 0a                	cmp    al,0xa
100050c8:	0f 94 c0             	sete   al
100050cb:	84 c0                	test   al,al
100050cd:	75 30                	jne    100050ff <firstRun(bool)+0x1f2a>
100050cf:	a0 00 00 00 00       	mov    al,ds:0x0	100050d0: R_386_32	installKey
100050d4:	3c 1b                	cmp    al,0x1b
100050d6:	0f 94 c0             	sete   al
100050d9:	84 c0                	test   al,al
100050db:	0f 85 30 fa ff ff    	jne    10004b11 <firstRun(bool)+0x193c>
100050e1:	83 ec 08             	sub    esp,0x8
100050e4:	6a 00                	push   0x0
100050e6:	68 f4 01 00 00       	push   0x1f4
100050eb:	e8 fc ff ff ff       	call   100050ec <firstRun(bool)+0x1f17>	100050ec: R_386_PC32	milliTenthSleep(unsigned long long)
100050f0:	83 c4 10             	add    esp,0x10
100050f3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100050f5: R_386_32	installKey
100050fa:	e9 ab fe ff ff       	jmp    10004faa <firstRun(bool)+0x1dd5>
100050ff:	90                   	nop
10005100:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10005107:	0f 84 ff 00 00 00    	je     1000520c <firstRun(bool)+0x2037>
1000510d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000510f: R_386_32	showSidebar
10005114:	a1 00 00 00 00       	mov    eax,ds:0x0	10005115: R_386_32	term
10005119:	83 ec 0c             	sub    esp,0xc
1000511c:	50                   	push   eax
1000511d:	e8 fc ff ff ff       	call   1000511e <firstRun(bool)+0x1f49>	1000511e: R_386_PC32	setActiveTerminal(VgaText*)
10005122:	83 c4 10             	add    esp,0x10
10005125:	e8 fc ff ff ff       	call   10005126 <firstRun(bool)+0x1f51>	10005126: R_386_PC32	drawBootScreen()
1000512a:	83 ec 0c             	sub    esp,0xc
1000512d:	68 09 b6 00 10       	push   0x1000b609	1000512e: R_386_32	.text
10005132:	6a 0d                	push   0xd
10005134:	6a 32                	push   0x32
10005136:	6a 05                	push   0x5
10005138:	6a 16                	push   0x16
1000513a:	e8 fc ff ff ff       	call   1000513b <firstRun(bool)+0x1f66>	1000513b: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000513f:	83 c4 20             	add    esp,0x20
10005142:	a1 00 00 00 00       	mov    eax,ds:0x0	10005143: R_386_32	term
10005147:	83 ec 04             	sub    esp,0x4
1000514a:	6a 08                	push   0x8
1000514c:	6a 18                	push   0x18
1000514e:	50                   	push   eax
1000514f:	e8 fc ff ff ff       	call   10005150 <firstRun(bool)+0x1f7b>	10005150: R_386_PC32	VgaText::setCursor(int, int)
10005154:	83 c4 10             	add    esp,0x10
10005157:	a1 00 00 00 00       	mov    eax,ds:0x0	10005158: R_386_32	term
1000515c:	83 ec 08             	sub    esp,0x8
1000515f:	68 20 b6 00 10       	push   0x1000b620	10005160: R_386_32	.text
10005164:	50                   	push   eax
10005165:	e8 fc ff ff ff       	call   10005166 <firstRun(bool)+0x1f91>	10005166: R_386_PC32	VgaText::puts(char const*)
1000516a:	83 c4 10             	add    esp,0x10
1000516d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000516e: R_386_32	term
10005172:	83 ec 04             	sub    esp,0x4
10005175:	6a 0a                	push   0xa
10005177:	6a 18                	push   0x18
10005179:	50                   	push   eax
1000517a:	e8 fc ff ff ff       	call   1000517b <firstRun(bool)+0x1fa6>	1000517b: R_386_PC32	VgaText::setCursor(int, int)
1000517f:	83 c4 10             	add    esp,0x10
10005182:	a1 00 00 00 00       	mov    eax,ds:0x0	10005183: R_386_32	term
10005187:	83 ec 08             	sub    esp,0x8
1000518a:	68 48 b6 00 10       	push   0x1000b648	1000518b: R_386_32	.text
1000518f:	50                   	push   eax
10005190:	e8 fc ff ff ff       	call   10005191 <firstRun(bool)+0x1fbc>	10005191: R_386_PC32	VgaText::puts(char const*)
10005195:	83 c4 10             	add    esp,0x10
10005198:	a1 00 00 00 00       	mov    eax,ds:0x0	10005199: R_386_32	term
1000519d:	83 ec 04             	sub    esp,0x4
100051a0:	6a 0b                	push   0xb
100051a2:	6a 18                	push   0x18
100051a4:	50                   	push   eax
100051a5:	e8 fc ff ff ff       	call   100051a6 <firstRun(bool)+0x1fd1>	100051a6: R_386_PC32	VgaText::setCursor(int, int)
100051aa:	83 c4 10             	add    esp,0x10
100051ad:	a1 00 00 00 00       	mov    eax,ds:0x0	100051ae: R_386_32	term
100051b2:	83 ec 08             	sub    esp,0x8
100051b5:	68 71 b6 00 10       	push   0x1000b671	100051b6: R_386_32	.text
100051ba:	50                   	push   eax
100051bb:	e8 fc ff ff ff       	call   100051bc <firstRun(bool)+0x1fe7>	100051bc: R_386_PC32	VgaText::puts(char const*)
100051c0:	83 c4 10             	add    esp,0x10
100051c3:	a1 00 00 00 00       	mov    eax,ds:0x0	100051c4: R_386_32	term
100051c8:	83 ec 04             	sub    esp,0x4
100051cb:	6a 0e                	push   0xe
100051cd:	6a 18                	push   0x18
100051cf:	50                   	push   eax
100051d0:	e8 fc ff ff ff       	call   100051d1 <firstRun(bool)+0x1ffc>	100051d1: R_386_PC32	VgaText::setCursor(int, int)
100051d5:	83 c4 10             	add    esp,0x10
100051d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100051d9: R_386_32	term
100051dd:	83 ec 08             	sub    esp,0x8
100051e0:	68 80 b6 00 10       	push   0x1000b680	100051e1: R_386_32	.text
100051e5:	50                   	push   eax
100051e6:	e8 fc ff ff ff       	call   100051e7 <firstRun(bool)+0x2012>	100051e7: R_386_PC32	VgaText::puts(char const*)
100051eb:	83 c4 10             	add    esp,0x10
100051ee:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100051f0: R_386_32	installKey
100051f5:	a0 00 00 00 00       	mov    al,ds:0x0	100051f6: R_386_32	installKey
100051fa:	84 c0                	test   al,al
100051fc:	0f 94 c0             	sete   al
100051ff:	84 c0                	test   al,al
10005201:	74 02                	je     10005205 <firstRun(bool)+0x2030>
10005203:	eb f0                	jmp    100051f5 <firstRun(bool)+0x2020>
10005205:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005207: R_386_32	installKey
1000520c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000520e: R_386_32	installKey
10005213:	83 ec 08             	sub    esp,0x8
10005216:	6a 00                	push   0x0
10005218:	68 84 03 00 00       	push   0x384
1000521d:	e8 fc ff ff ff       	call   1000521e <firstRun(bool)+0x2049>	1000521e: R_386_PC32	milliTenthSleep(unsigned long long)
10005222:	83 c4 10             	add    esp,0x10
10005225:	e8 fc ff ff ff       	call   10005226 <firstRun(bool)+0x2051>	10005226: R_386_PC32	drawBootScreen()
1000522a:	83 ec 08             	sub    esp,0x8
1000522d:	6a 00                	push   0x0
1000522f:	68 18 2e 00 00       	push   0x2e18
10005234:	e8 fc ff ff ff       	call   10005235 <firstRun(bool)+0x2060>	10005235: R_386_PC32	milliTenthSleep(unsigned long long)
10005239:	83 c4 10             	add    esp,0x10
1000523c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10005243:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005245: R_386_32	installKey
1000524a:	e8 fc ff ff ff       	call   1000524b <firstRun(bool)+0x2076>	1000524b: R_386_PC32	drawBootScreen()
1000524f:	83 ec 0c             	sub    esp,0xc
10005252:	68 aa b6 00 10       	push   0x1000b6aa	10005253: R_386_32	.text
10005257:	6a 0e                	push   0xe
10005259:	6a 32                	push   0x32
1000525b:	6a 02                	push   0x2
1000525d:	6a 16                	push   0x16
1000525f:	e8 fc ff ff ff       	call   10005260 <firstRun(bool)+0x208b>	10005260: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005264:	83 c4 20             	add    esp,0x20
10005267:	a1 00 00 00 00       	mov    eax,ds:0x0	10005268: R_386_32	term
1000526c:	83 ec 04             	sub    esp,0x4
1000526f:	6a 18                	push   0x18
10005271:	6a 11                	push   0x11
10005273:	50                   	push   eax
10005274:	e8 fc ff ff ff       	call   10005275 <firstRun(bool)+0x20a0>	10005275: R_386_PC32	VgaText::setCursor(int, int)
10005279:	83 c4 10             	add    esp,0x10
1000527c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000527d: R_386_32	term
10005281:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10005283: R_386_32	safemode
10005287:	84 d2                	test   dl,dl
10005289:	74 07                	je     10005292 <firstRun(bool)+0x20bd>
1000528b:	b9 00 00 00 00       	mov    ecx,0x0
10005290:	eb 05                	jmp    10005297 <firstRun(bool)+0x20c2>
10005292:	b9 0b 00 00 00       	mov    ecx,0xb
10005297:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10005299: R_386_32	safemode
1000529d:	84 d2                	test   dl,dl
1000529f:	74 07                	je     100052a8 <firstRun(bool)+0x20d3>
100052a1:	ba 0f 00 00 00       	mov    edx,0xf
100052a6:	eb 05                	jmp    100052ad <firstRun(bool)+0x20d8>
100052a8:	ba 03 00 00 00       	mov    edx,0x3
100052ad:	51                   	push   ecx
100052ae:	52                   	push   edx
100052af:	68 46 b5 00 10       	push   0x1000b546	100052b0: R_386_32	.text
100052b4:	50                   	push   eax
100052b5:	e8 fc ff ff ff       	call   100052b6 <firstRun(bool)+0x20e1>	100052b6: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100052ba:	83 c4 10             	add    esp,0x10
100052bd:	a1 00 00 00 00       	mov    eax,ds:0x0	100052be: R_386_32	term
100052c2:	83 ec 04             	sub    esp,0x4
100052c5:	6a 05                	push   0x5
100052c7:	6a 18                	push   0x18
100052c9:	50                   	push   eax
100052ca:	e8 fc ff ff ff       	call   100052cb <firstRun(bool)+0x20f6>	100052cb: R_386_PC32	VgaText::setCursor(int, int)
100052cf:	83 c4 10             	add    esp,0x10
100052d2:	a1 00 00 00 00       	mov    eax,ds:0x0	100052d3: R_386_32	term
100052d7:	83 ec 08             	sub    esp,0x8
100052da:	68 b8 b6 00 10       	push   0x1000b6b8	100052db: R_386_32	.text
100052df:	50                   	push   eax
100052e0:	e8 fc ff ff ff       	call   100052e1 <firstRun(bool)+0x210c>	100052e1: R_386_PC32	VgaText::puts(char const*)
100052e5:	83 c4 10             	add    esp,0x10
100052e8:	a1 00 00 00 00       	mov    eax,ds:0x0	100052e9: R_386_32	term
100052ed:	83 ec 04             	sub    esp,0x4
100052f0:	6a 06                	push   0x6
100052f2:	6a 18                	push   0x18
100052f4:	50                   	push   eax
100052f5:	e8 fc ff ff ff       	call   100052f6 <firstRun(bool)+0x2121>	100052f6: R_386_PC32	VgaText::setCursor(int, int)
100052fa:	83 c4 10             	add    esp,0x10
100052fd:	a1 00 00 00 00       	mov    eax,ds:0x0	100052fe: R_386_32	term
10005302:	83 ec 08             	sub    esp,0x8
10005305:	68 1c b5 00 10       	push   0x1000b51c	10005306: R_386_32	.text
1000530a:	50                   	push   eax
1000530b:	e8 fc ff ff ff       	call   1000530c <firstRun(bool)+0x2137>	1000530c: R_386_PC32	VgaText::puts(char const*)
10005310:	83 c4 10             	add    esp,0x10
10005313:	c6 05 10 00 00 00 00 	mov    BYTE PTR ds:0x10,0x0	10005315: R_386_32	pkeybuf
1000531a:	c6 05 11 00 00 00 00 	mov    BYTE PTR ds:0x11,0x0	1000531c: R_386_32	pkeybuf
10005321:	a1 00 00 00 00       	mov    eax,ds:0x0	10005322: R_386_32	term
10005326:	83 ec 04             	sub    esp,0x4
10005329:	6a 08                	push   0x8
1000532b:	6a 1c                	push   0x1c
1000532d:	50                   	push   eax
1000532e:	e8 fc ff ff ff       	call   1000532f <firstRun(bool)+0x215a>	1000532f: R_386_PC32	VgaText::setCursor(int, int)
10005333:	83 c4 10             	add    esp,0x10
10005336:	a1 00 00 00 00       	mov    eax,ds:0x0	10005337: R_386_32	term
1000533b:	83 ec 08             	sub    esp,0x8
1000533e:	68 00 00 00 00       	push   0x0	1000533f: R_386_32	pkeybuf
10005343:	50                   	push   eax
10005344:	e8 fc ff ff ff       	call   10005345 <firstRun(bool)+0x2170>	10005345: R_386_PC32	VgaText::puts(char const*)
10005349:	83 c4 10             	add    esp,0x10
1000534c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000534d: R_386_32	term
10005351:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10005354:	83 c2 1c             	add    edx,0x1c
10005357:	83 ec 04             	sub    esp,0x4
1000535a:	6a 08                	push   0x8
1000535c:	52                   	push   edx
1000535d:	50                   	push   eax
1000535e:	e8 fc ff ff ff       	call   1000535f <firstRun(bool)+0x218a>	1000535f: R_386_PC32	VgaText::setCursor(int, int)
10005363:	83 c4 10             	add    esp,0x10
10005366:	a1 00 00 00 00       	mov    eax,ds:0x0	10005367: R_386_32	term
1000536b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000536e:	81 c2 00 00 00 00    	add    edx,0x0	10005370: R_386_32	pkeybuf
10005374:	8a 12                	mov    dl,BYTE PTR [edx]
10005376:	0f be d2             	movsx  edx,dl
10005379:	6a 00                	push   0x0
1000537b:	6a 0f                	push   0xf
1000537d:	52                   	push   edx
1000537e:	50                   	push   eax
1000537f:	e8 fc ff ff ff       	call   10005380 <firstRun(bool)+0x21ab>	10005380: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10005384:	83 c4 10             	add    esp,0x10
10005387:	a1 00 00 00 00       	mov    eax,ds:0x0	10005388: R_386_32	term
1000538c:	83 ec 04             	sub    esp,0x4
1000538f:	6a 08                	push   0x8
10005391:	6a 2c                	push   0x2c
10005393:	50                   	push   eax
10005394:	e8 fc ff ff ff       	call   10005395 <firstRun(bool)+0x21c0>	10005395: R_386_PC32	VgaText::setCursor(int, int)
10005399:	83 c4 10             	add    esp,0x10
1000539c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000539d: R_386_32	term
100053a1:	6a 0f                	push   0xf
100053a3:	6a 0f                	push   0xf
100053a5:	6a 20                	push   0x20
100053a7:	50                   	push   eax
100053a8:	e8 fc ff ff ff       	call   100053a9 <firstRun(bool)+0x21d4>	100053a9: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100053ad:	83 c4 10             	add    esp,0x10
100053b0:	a1 00 00 00 00       	mov    eax,ds:0x0	100053b1: R_386_32	term
100053b5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100053b8:	83 c2 1c             	add    edx,0x1c
100053bb:	83 ec 04             	sub    esp,0x4
100053be:	6a 08                	push   0x8
100053c0:	52                   	push   edx
100053c1:	50                   	push   eax
100053c2:	e8 fc ff ff ff       	call   100053c3 <firstRun(bool)+0x21ee>	100053c3: R_386_PC32	VgaText::setCursor(int, int)
100053c7:	83 c4 10             	add    esp,0x10
100053ca:	a0 00 00 00 00       	mov    al,ds:0x0	100053cb: R_386_32	installKey
100053cf:	84 c0                	test   al,al
100053d1:	0f 94 c0             	sete   al
100053d4:	84 c0                	test   al,al
100053d6:	74 02                	je     100053da <firstRun(bool)+0x2205>
100053d8:	eb f0                	jmp    100053ca <firstRun(bool)+0x21f5>
100053da:	a1 00 00 00 00       	mov    eax,ds:0x0	100053db: R_386_32	term
100053df:	05 82 00 00 00       	add    eax,0x82
100053e4:	83 ec 04             	sub    esp,0x4
100053e7:	6a 10                	push   0x10
100053e9:	6a 00                	push   0x0
100053eb:	50                   	push   eax
100053ec:	e8 fc ff ff ff       	call   100053ed <firstRun(bool)+0x2218>	100053ed: R_386_PC32	memset
100053f1:	83 c4 10             	add    esp,0x10
100053f4:	a1 00 00 00 00       	mov    eax,ds:0x0	100053f5: R_386_32	term
100053f9:	05 02 01 00 00       	add    eax,0x102
100053fe:	83 ec 04             	sub    esp,0x4
10005401:	6a 10                	push   0x10
10005403:	6a 00                	push   0x0
10005405:	50                   	push   eax
10005406:	e8 fc ff ff ff       	call   10005407 <firstRun(bool)+0x2232>	10005407: R_386_PC32	memset
1000540b:	83 c4 10             	add    esp,0x10
1000540e:	a0 00 00 00 00       	mov    al,ds:0x0	1000540f: R_386_32	installKey
10005413:	3c 03                	cmp    al,0x3
10005415:	74 09                	je     10005420 <firstRun(bool)+0x224b>
10005417:	a0 00 00 00 00       	mov    al,ds:0x0	10005418: R_386_32	installKey
1000541c:	3c 08                	cmp    al,0x8
1000541e:	75 04                	jne    10005424 <firstRun(bool)+0x224f>
10005420:	b0 01                	mov    al,0x1
10005422:	eb 02                	jmp    10005426 <firstRun(bool)+0x2251>
10005424:	b0 00                	mov    al,0x0
10005426:	84 c0                	test   al,al
10005428:	74 31                	je     1000545b <firstRun(bool)+0x2286>
1000542a:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
1000542d:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10005431:	75 14                	jne    10005447 <firstRun(bool)+0x2272>
10005433:	83 ec 0c             	sub    esp,0xc
10005436:	68 00 00 00 00       	push   0x0	10005437: R_386_32	pkeybuf
1000543b:	e8 fc ff ff ff       	call   1000543c <firstRun(bool)+0x2267>	1000543c: R_386_PC32	strlen
10005440:	83 c4 10             	add    esp,0x10
10005443:	48                   	dec    eax
10005444:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10005447:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000544a:	05 00 00 00 00       	add    eax,0x0	1000544b: R_386_32	pkeybuf
1000544f:	8a 00                	mov    al,BYTE PTR [eax]
10005451:	3c 2d                	cmp    al,0x2d
10005453:	0f 85 68 04 00 00    	jne    100058c1 <firstRun(bool)+0x26ec>
10005459:	eb cf                	jmp    1000542a <firstRun(bool)+0x2255>
1000545b:	a0 00 00 00 00       	mov    al,ds:0x0	1000545c: R_386_32	installKey
10005460:	3c 2f                	cmp    al,0x2f
10005462:	7e 09                	jle    1000546d <firstRun(bool)+0x2298>
10005464:	a0 00 00 00 00       	mov    al,ds:0x0	10005465: R_386_32	installKey
10005469:	3c 39                	cmp    al,0x39
1000546b:	7e 36                	jle    100054a3 <firstRun(bool)+0x22ce>
1000546d:	a0 00 00 00 00       	mov    al,ds:0x0	1000546e: R_386_32	installKey
10005472:	3c 40                	cmp    al,0x40
10005474:	7e 09                	jle    1000547f <firstRun(bool)+0x22aa>
10005476:	a0 00 00 00 00       	mov    al,ds:0x0	10005477: R_386_32	installKey
1000547b:	3c 5a                	cmp    al,0x5a
1000547d:	7e 24                	jle    100054a3 <firstRun(bool)+0x22ce>
1000547f:	a0 00 00 00 00       	mov    al,ds:0x0	10005480: R_386_32	installKey
10005484:	3c 60                	cmp    al,0x60
10005486:	7e 09                	jle    10005491 <firstRun(bool)+0x22bc>
10005488:	a0 00 00 00 00       	mov    al,ds:0x0	10005489: R_386_32	installKey
1000548d:	3c 7a                	cmp    al,0x7a
1000548f:	7e 12                	jle    100054a3 <firstRun(bool)+0x22ce>
10005491:	a0 00 00 00 00       	mov    al,ds:0x0	10005492: R_386_32	installKey
10005496:	3c 20                	cmp    al,0x20
10005498:	74 09                	je     100054a3 <firstRun(bool)+0x22ce>
1000549a:	a0 00 00 00 00       	mov    al,ds:0x0	1000549b: R_386_32	installKey
1000549f:	3c 04                	cmp    al,0x4
100054a1:	75 04                	jne    100054a7 <firstRun(bool)+0x22d2>
100054a3:	b0 01                	mov    al,0x1
100054a5:	eb 02                	jmp    100054a9 <firstRun(bool)+0x22d4>
100054a7:	b0 00                	mov    al,0x0
100054a9:	84 c0                	test   al,al
100054ab:	0f 84 a3 00 00 00    	je     10005554 <firstRun(bool)+0x237f>
100054b1:	a0 00 00 00 00       	mov    al,ds:0x0	100054b2: R_386_32	installKey
100054b6:	3c 2f                	cmp    al,0x2f
100054b8:	7e 09                	jle    100054c3 <firstRun(bool)+0x22ee>
100054ba:	a0 00 00 00 00       	mov    al,ds:0x0	100054bb: R_386_32	installKey
100054bf:	3c 39                	cmp    al,0x39
100054c1:	7e 24                	jle    100054e7 <firstRun(bool)+0x2312>
100054c3:	a0 00 00 00 00       	mov    al,ds:0x0	100054c4: R_386_32	installKey
100054c8:	3c 40                	cmp    al,0x40
100054ca:	7e 09                	jle    100054d5 <firstRun(bool)+0x2300>
100054cc:	a0 00 00 00 00       	mov    al,ds:0x0	100054cd: R_386_32	installKey
100054d1:	3c 5a                	cmp    al,0x5a
100054d3:	7e 12                	jle    100054e7 <firstRun(bool)+0x2312>
100054d5:	a0 00 00 00 00       	mov    al,ds:0x0	100054d6: R_386_32	installKey
100054da:	3c 60                	cmp    al,0x60
100054dc:	7e 0d                	jle    100054eb <firstRun(bool)+0x2316>
100054de:	a0 00 00 00 00       	mov    al,ds:0x0	100054df: R_386_32	installKey
100054e3:	3c 7a                	cmp    al,0x7a
100054e5:	7f 04                	jg     100054eb <firstRun(bool)+0x2316>
100054e7:	b0 01                	mov    al,0x1
100054e9:	eb 02                	jmp    100054ed <firstRun(bool)+0x2318>
100054eb:	b0 00                	mov    al,0x0
100054ed:	84 c0                	test   al,al
100054ef:	74 2c                	je     1000551d <firstRun(bool)+0x2348>
100054f1:	a0 00 00 00 00       	mov    al,ds:0x0	100054f2: R_386_32	installKey
100054f6:	3c 60                	cmp    al,0x60
100054f8:	7e 13                	jle    1000550d <firstRun(bool)+0x2338>
100054fa:	a0 00 00 00 00       	mov    al,ds:0x0	100054fb: R_386_32	installKey
100054ff:	3c 7a                	cmp    al,0x7a
10005501:	7f 0a                	jg     1000550d <firstRun(bool)+0x2338>
10005503:	a0 00 00 00 00       	mov    al,ds:0x0	10005504: R_386_32	installKey
10005508:	83 e8 20             	sub    eax,0x20
1000550b:	eb 05                	jmp    10005512 <firstRun(bool)+0x233d>
1000550d:	a0 00 00 00 00       	mov    al,ds:0x0	1000550e: R_386_32	installKey
10005512:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10005515:	81 c2 00 00 00 00    	add    edx,0x0	10005517: R_386_32	pkeybuf
1000551b:	88 02                	mov    BYTE PTR [edx],al
1000551d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10005520:	83 ec 0c             	sub    esp,0xc
10005523:	68 00 00 00 00       	push   0x0	10005524: R_386_32	pkeybuf
10005528:	e8 fc ff ff ff       	call   10005529 <firstRun(bool)+0x2354>	10005529: R_386_PC32	strlen
1000552d:	83 c4 10             	add    esp,0x10
10005530:	89 c2                	mov    edx,eax
10005532:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10005535:	39 c2                	cmp    edx,eax
10005537:	77 07                	ja     10005540 <firstRun(bool)+0x236b>
10005539:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10005540:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10005543:	05 00 00 00 00       	add    eax,0x0	10005544: R_386_32	pkeybuf
10005548:	8a 00                	mov    al,BYTE PTR [eax]
1000554a:	3c 2d                	cmp    al,0x2d
1000554c:	0f 85 6f 03 00 00    	jne    100058c1 <firstRun(bool)+0x26ec>
10005552:	eb c9                	jmp    1000551d <firstRun(bool)+0x2348>
10005554:	a0 00 00 00 00       	mov    al,ds:0x0	10005555: R_386_32	installKey
10005559:	3c 1b                	cmp    al,0x1b
1000555b:	0f 94 c0             	sete   al
1000555e:	84 c0                	test   al,al
10005560:	0f 85 3d f9 ff ff    	jne    10004ea3 <firstRun(bool)+0x1cce>
10005566:	a0 00 00 00 00       	mov    al,ds:0x0	10005567: R_386_32	installKey
1000556b:	3c 0a                	cmp    al,0xa
1000556d:	0f 94 c0             	sete   al
10005570:	84 c0                	test   al,al
10005572:	0f 84 49 03 00 00    	je     100058c1 <firstRun(bool)+0x26ec>
10005578:	83 ec 0c             	sub    esp,0xc
1000557b:	68 00 00 00 00       	push   0x0	1000557c: R_386_32	pkeybuf
10005580:	e8 fc ff ff ff       	call   10005581 <firstRun(bool)+0x23ac>	10005581: R_386_PC32	checkExtendedKey(char*)
10005585:	83 c4 10             	add    esp,0x10
10005588:	85 c0                	test   eax,eax
1000558a:	0f 95 c0             	setne  al
1000558d:	88 45 87             	mov    BYTE PTR [ebp-0x79],al
10005590:	80 7d 87 00          	cmp    BYTE PTR [ebp-0x79],0x0
10005594:	74 61                	je     100055f7 <firstRun(bool)+0x2422>
10005596:	83 ec 08             	sub    esp,0x8
10005599:	6a 00                	push   0x0
1000559b:	68 f0 0a 00 00       	push   0xaf0
100055a0:	e8 fc ff ff ff       	call   100055a1 <firstRun(bool)+0x23cc>	100055a1: R_386_PC32	milliTenthSleep(unsigned long long)
100055a5:	83 c4 10             	add    esp,0x10
100055a8:	e8 fc ff ff ff       	call   100055a9 <firstRun(bool)+0x23d4>	100055a9: R_386_PC32	drawBootScreen()
100055ad:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100055af: R_386_32	installKey
100055b4:	83 ec 08             	sub    esp,0x8
100055b7:	6a 00                	push   0x0
100055b9:	68 84 03 00 00       	push   0x384
100055be:	e8 fc ff ff ff       	call   100055bf <firstRun(bool)+0x23ea>	100055bf: R_386_PC32	milliTenthSleep(unsigned long long)
100055c3:	83 c4 10             	add    esp,0x10
100055c6:	e8 fc ff ff ff       	call   100055c7 <firstRun(bool)+0x23f2>	100055c7: R_386_PC32	drawBootScreen()
100055cb:	83 ec 08             	sub    esp,0x8
100055ce:	6a 00                	push   0x0
100055d0:	68 c0 12 00 00       	push   0x12c0
100055d5:	e8 fc ff ff ff       	call   100055d6 <firstRun(bool)+0x2401>	100055d6: R_386_PC32	milliTenthSleep(unsigned long long)
100055da:	83 c4 10             	add    esp,0x10
100055dd:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100055df: R_386_32	installKey
100055e4:	90                   	nop
100055e5:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
100055ec:	0f 84 db 02 00 00    	je     100058cd <firstRun(bool)+0x26f8>
100055f2:	e9 c8 03 00 00       	jmp    100059bf <firstRun(bool)+0x27ea>
100055f7:	83 ec 08             	sub    esp,0x8
100055fa:	6a 00                	push   0x0
100055fc:	68 f0 0a 00 00       	push   0xaf0
10005601:	e8 fc ff ff ff       	call   10005602 <firstRun(bool)+0x242d>	10005602: R_386_PC32	milliTenthSleep(unsigned long long)
10005606:	83 c4 10             	add    esp,0x10
10005609:	e8 fc ff ff ff       	call   1000560a <firstRun(bool)+0x2435>	1000560a: R_386_PC32	drawBootScreen()
1000560e:	83 ec 08             	sub    esp,0x8
10005611:	6a 01                	push   0x1
10005613:	68 aa b6 00 10       	push   0x1000b6aa	10005614: R_386_32	.text
10005618:	6a 0e                	push   0xe
1000561a:	6a 32                	push   0x32
1000561c:	6a 02                	push   0x2
1000561e:	6a 16                	push   0x16
10005620:	e8 fc ff ff ff       	call   10005621 <firstRun(bool)+0x244c>	10005621: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10005625:	83 c4 20             	add    esp,0x20
10005628:	a1 00 00 00 00       	mov    eax,ds:0x0	10005629: R_386_32	term
1000562d:	83 ec 04             	sub    esp,0x4
10005630:	6a 05                	push   0x5
10005632:	6a 18                	push   0x18
10005634:	50                   	push   eax
10005635:	e8 fc ff ff ff       	call   10005636 <firstRun(bool)+0x2461>	10005636: R_386_PC32	VgaText::setCursor(int, int)
1000563a:	83 c4 10             	add    esp,0x10
1000563d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000563e: R_386_32	term
10005642:	6a 07                	push   0x7
10005644:	6a 00                	push   0x0
10005646:	68 b8 b6 00 10       	push   0x1000b6b8	10005647: R_386_32	.text
1000564b:	50                   	push   eax
1000564c:	e8 fc ff ff ff       	call   1000564d <firstRun(bool)+0x2478>	1000564d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10005651:	83 c4 10             	add    esp,0x10
10005654:	a1 00 00 00 00       	mov    eax,ds:0x0	10005655: R_386_32	term
10005659:	83 ec 04             	sub    esp,0x4
1000565c:	6a 06                	push   0x6
1000565e:	6a 18                	push   0x18
10005660:	50                   	push   eax
10005661:	e8 fc ff ff ff       	call   10005662 <firstRun(bool)+0x248d>	10005662: R_386_PC32	VgaText::setCursor(int, int)
10005666:	83 c4 10             	add    esp,0x10
10005669:	a1 00 00 00 00       	mov    eax,ds:0x0	1000566a: R_386_32	term
1000566e:	6a 07                	push   0x7
10005670:	6a 00                	push   0x0
10005672:	68 1c b5 00 10       	push   0x1000b51c	10005673: R_386_32	.text
10005677:	50                   	push   eax
10005678:	e8 fc ff ff ff       	call   10005679 <firstRun(bool)+0x24a4>	10005679: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000567d:	83 c4 10             	add    esp,0x10
10005680:	a1 00 00 00 00       	mov    eax,ds:0x0	10005681: R_386_32	term
10005685:	83 ec 04             	sub    esp,0x4
10005688:	6a 08                	push   0x8
1000568a:	6a 1c                	push   0x1c
1000568c:	50                   	push   eax
1000568d:	e8 fc ff ff ff       	call   1000568e <firstRun(bool)+0x24b9>	1000568e: R_386_PC32	VgaText::setCursor(int, int)
10005692:	83 c4 10             	add    esp,0x10
10005695:	a1 00 00 00 00       	mov    eax,ds:0x0	10005696: R_386_32	term
1000569a:	6a 07                	push   0x7
1000569c:	6a 00                	push   0x0
1000569e:	68 00 00 00 00       	push   0x0	1000569f: R_386_32	pkeybuf
100056a3:	50                   	push   eax
100056a4:	e8 fc ff ff ff       	call   100056a5 <firstRun(bool)+0x24d0>	100056a5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100056a9:	83 c4 10             	add    esp,0x10
100056ac:	a1 00 00 00 00       	mov    eax,ds:0x0	100056ad: R_386_32	term
100056b1:	83 ec 04             	sub    esp,0x4
100056b4:	6a 08                	push   0x8
100056b6:	6a 2c                	push   0x2c
100056b8:	50                   	push   eax
100056b9:	e8 fc ff ff ff       	call   100056ba <firstRun(bool)+0x24e5>	100056ba: R_386_PC32	VgaText::setCursor(int, int)
100056be:	83 c4 10             	add    esp,0x10
100056c1:	a1 00 00 00 00       	mov    eax,ds:0x0	100056c2: R_386_32	term
100056c6:	6a 07                	push   0x7
100056c8:	6a 07                	push   0x7
100056ca:	6a 20                	push   0x20
100056cc:	50                   	push   eax
100056cd:	e8 fc ff ff ff       	call   100056ce <firstRun(bool)+0x24f9>	100056ce: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100056d2:	83 c4 10             	add    esp,0x10
100056d5:	a1 00 00 00 00       	mov    eax,ds:0x0	100056d6: R_386_32	term
100056da:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100056dd:	83 c2 1c             	add    edx,0x1c
100056e0:	83 ec 04             	sub    esp,0x4
100056e3:	6a 08                	push   0x8
100056e5:	52                   	push   edx
100056e6:	50                   	push   eax
100056e7:	e8 fc ff ff ff       	call   100056e8 <firstRun(bool)+0x2513>	100056e8: R_386_PC32	VgaText::setCursor(int, int)
100056ec:	83 c4 10             	add    esp,0x10
100056ef:	83 ec 0c             	sub    esp,0xc
100056f2:	68 09 b6 00 10       	push   0x1000b609	100056f3: R_386_32	.text
100056f7:	6a 0b                	push   0xb
100056f9:	6a 2b                	push   0x2b
100056fb:	6a 0a                	push   0xa
100056fd:	6a 22                	push   0x22
100056ff:	e8 fc ff ff ff       	call   10005700 <firstRun(bool)+0x252b>	10005700: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005704:	83 c4 20             	add    esp,0x20
10005707:	a1 00 00 00 00       	mov    eax,ds:0x0	10005708: R_386_32	term
1000570c:	83 ec 04             	sub    esp,0x4
1000570f:	6a 0d                	push   0xd
10005711:	6a 24                	push   0x24
10005713:	50                   	push   eax
10005714:	e8 fc ff ff ff       	call   10005715 <firstRun(bool)+0x2540>	10005715: R_386_PC32	VgaText::setCursor(int, int)
10005719:	83 c4 10             	add    esp,0x10
1000571c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000571d: R_386_32	term
10005721:	83 ec 08             	sub    esp,0x8
10005724:	68 e0 b6 00 10       	push   0x1000b6e0	10005725: R_386_32	.text
10005729:	50                   	push   eax
1000572a:	e8 fc ff ff ff       	call   1000572b <firstRun(bool)+0x2556>	1000572b: R_386_PC32	VgaText::puts(char const*)
1000572f:	83 c4 10             	add    esp,0x10
10005732:	a1 00 00 00 00       	mov    eax,ds:0x0	10005733: R_386_32	term
10005737:	83 ec 04             	sub    esp,0x4
1000573a:	6a 0f                	push   0xf
1000573c:	6a 24                	push   0x24
1000573e:	50                   	push   eax
1000573f:	e8 fc ff ff ff       	call   10005740 <firstRun(bool)+0x256b>	10005740: R_386_PC32	VgaText::setCursor(int, int)
10005744:	83 c4 10             	add    esp,0x10
10005747:	a1 00 00 00 00       	mov    eax,ds:0x0	10005748: R_386_32	term
1000574c:	83 ec 08             	sub    esp,0x8
1000574f:	68 08 b7 00 10       	push   0x1000b708	10005750: R_386_32	.text
10005754:	50                   	push   eax
10005755:	e8 fc ff ff ff       	call   10005756 <firstRun(bool)+0x2581>	10005756: R_386_PC32	VgaText::puts(char const*)
1000575a:	83 c4 10             	add    esp,0x10
1000575d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000575e: R_386_32	term
10005762:	83 ec 04             	sub    esp,0x4
10005765:	6a 10                	push   0x10
10005767:	6a 24                	push   0x24
10005769:	50                   	push   eax
1000576a:	e8 fc ff ff ff       	call   1000576b <firstRun(bool)+0x2596>	1000576b: R_386_PC32	VgaText::setCursor(int, int)
1000576f:	83 c4 10             	add    esp,0x10
10005772:	a1 00 00 00 00       	mov    eax,ds:0x0	10005773: R_386_32	term
10005777:	83 ec 08             	sub    esp,0x8
1000577a:	68 2c b7 00 10       	push   0x1000b72c	1000577b: R_386_32	.text
1000577f:	50                   	push   eax
10005780:	e8 fc ff ff ff       	call   10005781 <firstRun(bool)+0x25ac>	10005781: R_386_PC32	VgaText::puts(char const*)
10005785:	83 c4 10             	add    esp,0x10
10005788:	83 ec 04             	sub    esp,0x4
1000578b:	6a 01                	push   0x1
1000578d:	68 58 02 00 00       	push   0x258
10005792:	68 88 01 00 00       	push   0x188
10005797:	e8 fc ff ff ff       	call   10005798 <firstRun(bool)+0x25c3>	10005798: R_386_PC32	KeBeep(int, int, bool)
1000579c:	83 c4 10             	add    esp,0x10
1000579f:	83 ec 04             	sub    esp,0x4
100057a2:	6a 01                	push   0x1
100057a4:	68 40 01 00 00       	push   0x140
100057a9:	68 4a 01 00 00       	push   0x14a
100057ae:	e8 fc ff ff ff       	call   100057af <firstRun(bool)+0x25da>	100057af: R_386_PC32	KeBeep(int, int, bool)
100057b3:	83 c4 10             	add    esp,0x10
100057b6:	83 ec 04             	sub    esp,0x4
100057b9:	6a 01                	push   0x1
100057bb:	6a 50                	push   0x50
100057bd:	68 37 01 00 00       	push   0x137
100057c2:	e8 fc ff ff ff       	call   100057c3 <firstRun(bool)+0x25ee>	100057c3: R_386_PC32	KeBeep(int, int, bool)
100057c7:	83 c4 10             	add    esp,0x10
100057ca:	83 ec 04             	sub    esp,0x4
100057cd:	6a 01                	push   0x1
100057cf:	68 40 01 00 00       	push   0x140
100057d4:	68 4a 01 00 00       	push   0x14a
100057d9:	e8 fc ff ff ff       	call   100057da <firstRun(bool)+0x2605>	100057da: R_386_PC32	KeBeep(int, int, bool)
100057de:	83 c4 10             	add    esp,0x10
100057e1:	83 ec 04             	sub    esp,0x4
100057e4:	6a 01                	push   0x1
100057e6:	68 20 03 00 00       	push   0x320
100057eb:	68 5d 01 00 00       	push   0x15d
100057f0:	e8 fc ff ff ff       	call   100057f1 <firstRun(bool)+0x261c>	100057f1: R_386_PC32	KeBeep(int, int, bool)
100057f5:	83 c4 10             	add    esp,0x10
100057f8:	83 ec 04             	sub    esp,0x4
100057fb:	6a 01                	push   0x1
100057fd:	68 20 03 00 00       	push   0x320
10005802:	68 4a 01 00 00       	push   0x14a
10005807:	e8 fc ff ff ff       	call   10005808 <firstRun(bool)+0x2633>	10005808: R_386_PC32	KeBeep(int, int, bool)
1000580c:	83 c4 10             	add    esp,0x10
1000580f:	83 ec 08             	sub    esp,0x8
10005812:	6a 00                	push   0x0
10005814:	68 40 1f 00 00       	push   0x1f40
10005819:	e8 fc ff ff ff       	call   1000581a <firstRun(bool)+0x2645>	1000581a: R_386_PC32	milliTenthSleep(unsigned long long)
1000581e:	83 c4 10             	add    esp,0x10
10005821:	83 ec 04             	sub    esp,0x4
10005824:	6a 01                	push   0x1
10005826:	68 58 02 00 00       	push   0x258
1000582b:	68 9f 01 00 00       	push   0x19f
10005830:	e8 fc ff ff ff       	call   10005831 <firstRun(bool)+0x265c>	10005831: R_386_PC32	KeBeep(int, int, bool)
10005835:	83 c4 10             	add    esp,0x10
10005838:	83 ec 04             	sub    esp,0x4
1000583b:	6a 01                	push   0x1
1000583d:	68 bc 02 00 00       	push   0x2bc
10005842:	68 b8 01 00 00       	push   0x1b8
10005847:	e8 fc ff ff ff       	call   10005848 <firstRun(bool)+0x2673>	10005848: R_386_PC32	KeBeep(int, int, bool)
1000584c:	83 c4 10             	add    esp,0x10
1000584f:	83 ec 08             	sub    esp,0x8
10005852:	6a 00                	push   0x0
10005854:	68 e8 03 00 00       	push   0x3e8
10005859:	e8 fc ff ff ff       	call   1000585a <firstRun(bool)+0x2685>	1000585a: R_386_PC32	milliTenthSleep(unsigned long long)
1000585e:	83 c4 10             	add    esp,0x10
10005861:	83 ec 04             	sub    esp,0x4
10005864:	6a 01                	push   0x1
10005866:	68 b0 04 00 00       	push   0x4b0
1000586b:	6a 37                	push   0x37
1000586d:	e8 fc ff ff ff       	call   1000586e <firstRun(bool)+0x2699>	1000586e: R_386_PC32	KeBeep(int, int, bool)
10005872:	83 c4 10             	add    esp,0x10
10005875:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005877: R_386_32	installKey
1000587c:	83 ec 08             	sub    esp,0x8
1000587f:	6a 00                	push   0x0
10005881:	68 f4 01 00 00       	push   0x1f4
10005886:	e8 fc ff ff ff       	call   10005887 <firstRun(bool)+0x26b2>	10005887: R_386_PC32	milliTenthSleep(unsigned long long)
1000588b:	83 c4 10             	add    esp,0x10
1000588e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005890: R_386_32	installKey
10005895:	a0 00 00 00 00       	mov    al,ds:0x0	10005896: R_386_32	installKey
1000589a:	84 c0                	test   al,al
1000589c:	0f 94 c0             	sete   al
1000589f:	84 c0                	test   al,al
100058a1:	74 02                	je     100058a5 <firstRun(bool)+0x26d0>
100058a3:	eb f0                	jmp    10005895 <firstRun(bool)+0x26c0>
100058a5:	e8 fc ff ff ff       	call   100058a6 <firstRun(bool)+0x26d1>	100058a6: R_386_PC32	drawBootScreen()
100058aa:	83 ec 08             	sub    esp,0x8
100058ad:	6a 00                	push   0x0
100058af:	68 9c 18 00 00       	push   0x189c
100058b4:	e8 fc ff ff ff       	call   100058b5 <firstRun(bool)+0x26e0>	100058b5: R_386_PC32	milliTenthSleep(unsigned long long)
100058b9:	83 c4 10             	add    esp,0x10
100058bc:	e9 82 f9 ff ff       	jmp    10005243 <firstRun(bool)+0x206e>
100058c1:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100058c3: R_386_32	installKey
100058c8:	e9 46 fa ff ff       	jmp    10005313 <firstRun(bool)+0x213e>
100058cd:	e8 fc ff ff ff       	call   100058ce <firstRun(bool)+0x26f9>	100058ce: R_386_PC32	drawBootScreen()
100058d2:	83 ec 0c             	sub    esp,0xc
100058d5:	68 4d b7 00 10       	push   0x1000b74d	100058d6: R_386_32	.text
100058da:	6a 0d                	push   0xd
100058dc:	6a 32                	push   0x32
100058de:	6a 05                	push   0x5
100058e0:	6a 16                	push   0x16
100058e2:	e8 fc ff ff ff       	call   100058e3 <firstRun(bool)+0x270e>	100058e3: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100058e7:	83 c4 20             	add    esp,0x20
100058ea:	83 ec 0c             	sub    esp,0xc
100058ed:	6a 00                	push   0x0
100058ef:	e8 fc ff ff ff       	call   100058f0 <firstRun(bool)+0x271b>	100058f0: R_386_PC32	bootInstallTasks(int)
100058f4:	83 c4 10             	add    esp,0x10
100058f7:	83 ec 0c             	sub    esp,0xc
100058fa:	68 68 b7 00 10       	push   0x1000b768	100058fb: R_386_32	.text
100058ff:	e8 fc ff ff ff       	call   10005900 <firstRun(bool)+0x272b>	10005900: R_386_PC32	Dbg::kprintf(char const*, ...)
10005904:	83 c4 10             	add    esp,0x10
10005907:	c7 45 80 0c 00 00 00 	mov    DWORD PTR [ebp-0x80],0xc
1000590e:	83 ec 0c             	sub    esp,0xc
10005911:	ff 75 80             	push   DWORD PTR [ebp-0x80]
10005914:	e8 fc ff ff ff       	call   10005915 <firstRun(bool)+0x2740>	10005915: R_386_PC32	Virt::setupPageSwapping(int)
10005919:	83 c4 10             	add    esp,0x10
1000591c:	83 ec 0c             	sub    esp,0xc
1000591f:	6a 01                	push   0x1
10005921:	e8 fc ff ff ff       	call   10005922 <firstRun(bool)+0x274d>	10005922: R_386_PC32	bootInstallTasks(int)
10005926:	83 c4 10             	add    esp,0x10
10005929:	83 ec 0c             	sub    esp,0xc
1000592c:	68 88 b7 00 10       	push   0x1000b788	1000592d: R_386_32	.text
10005931:	e8 fc ff ff ff       	call   10005932 <firstRun(bool)+0x275d>	10005932: R_386_PC32	rmtree(char*)
10005936:	83 c4 10             	add    esp,0x10
10005939:	83 ec 0c             	sub    esp,0xc
1000593c:	68 a2 b7 00 10       	push   0x1000b7a2	1000593d: R_386_32	.text
10005941:	e8 fc ff ff ff       	call   10005942 <firstRun(bool)+0x276d>	10005942: R_386_PC32	rmtree(char*)
10005946:	83 c4 10             	add    esp,0x10
10005949:	83 ec 08             	sub    esp,0x8
1000594c:	68 c0 01 00 00       	push   0x1c0
10005951:	68 88 b7 00 10       	push   0x1000b788	10005952: R_386_32	.text
10005956:	e8 fc ff ff ff       	call   10005957 <firstRun(bool)+0x2782>	10005957: R_386_PC32	mkdir(char const*, int)
1000595b:	83 c4 10             	add    esp,0x10
1000595e:	83 ec 08             	sub    esp,0x8
10005961:	68 c0 01 00 00       	push   0x1c0
10005966:	68 a2 b7 00 10       	push   0x1000b7a2	10005967: R_386_32	.text
1000596b:	e8 fc ff ff ff       	call   1000596c <firstRun(bool)+0x2797>	1000596c: R_386_PC32	mkdir(char const*, int)
10005970:	83 c4 10             	add    esp,0x10
10005973:	83 ec 08             	sub    esp,0x8
10005976:	68 88 b7 00 10       	push   0x1000b788	10005977: R_386_32	.text
1000597b:	68 bc b7 00 10       	push   0x1000b7bc	1000597c: R_386_32	.text
10005980:	e8 fc ff ff ff       	call   10005981 <firstRun(bool)+0x27ac>	10005981: R_386_PC32	copytree(char*, char*)
10005985:	83 c4 10             	add    esp,0x10
10005988:	83 ec 0c             	sub    esp,0xc
1000598b:	6a 02                	push   0x2
1000598d:	e8 fc ff ff ff       	call   1000598e <firstRun(bool)+0x27b9>	1000598e: R_386_PC32	bootInstallTasks(int)
10005992:	83 c4 10             	add    esp,0x10
10005995:	83 ec 0c             	sub    esp,0xc
10005998:	68 00 00 00 00       	push   0x0	10005999: R_386_32	currName
1000599d:	e8 fc ff ff ff       	call   1000599e <firstRun(bool)+0x27c9>	1000599e: R_386_PC32	createUser(char const*)
100059a2:	83 c4 10             	add    esp,0x10
100059a5:	83 ec 0c             	sub    esp,0xc
100059a8:	6a 03                	push   0x3
100059aa:	e8 fc ff ff ff       	call   100059ab <firstRun(bool)+0x27d6>	100059ab: R_386_PC32	bootInstallTasks(int)
100059af:	83 c4 10             	add    esp,0x10
100059b2:	a0 00 00 00 00       	mov    al,ds:0x0	100059b3: R_386_32	safemode
100059b7:	83 f0 01             	xor    eax,0x1
100059ba:	a2 00 00 00 00       	mov    ds:0x0,al	100059bb: R_386_32	VgaText::hiddenOut
100059bf:	8d 65 f4             	lea    esp,[ebp-0xc]
100059c2:	5b                   	pop    ebx
100059c3:	5e                   	pop    esi
100059c4:	5f                   	pop    edi
100059c5:	5d                   	pop    ebp
100059c6:	c3                   	ret    

100059c7 <loadExtensions()>:
100059c7:	55                   	push   ebp
100059c8:	89 e5                	mov    ebp,esp
100059ca:	83 ec 08             	sub    esp,0x8
100059cd:	83 ec 0c             	sub    esp,0xc
100059d0:	68 64 b8 00 10       	push   0x1000b864	100059d1: R_386_32	.text
100059d5:	e8 fc ff ff ff       	call   100059d6 <loadExtensions()+0xf>	100059d6: R_386_PC32	KeSetBootMessage(char const*)
100059da:	83 c4 10             	add    esp,0x10
100059dd:	90                   	nop
100059de:	c9                   	leave  
100059df:	c3                   	ret    

100059e0 <rgtree(Reghive_Tag*, int, int)>:
100059e0:	55                   	push   ebp
100059e1:	89 e5                	mov    ebp,esp
100059e3:	53                   	push   ebx
100059e4:	83 ec 44             	sub    esp,0x44
100059e7:	83 7d 0c 01          	cmp    DWORD PTR [ebp+0xc],0x1
100059eb:	75 16                	jne    10005a03 <rgtree(Reghive_Tag*, int, int)+0x23>
100059ed:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100059f1:	75 10                	jne    10005a03 <rgtree(Reghive_Tag*, int, int)+0x23>
100059f3:	83 ec 0c             	sub    esp,0xc
100059f6:	68 7a b8 00 10       	push   0x1000b87a	100059f7: R_386_32	.text
100059fb:	e8 fc ff ff ff       	call   100059fc <rgtree(Reghive_Tag*, int, int)+0x1c>	100059fc: R_386_PC32	Dbg::kprintf(char const*, ...)
10005a00:	83 c4 10             	add    esp,0x10
10005a03:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
10005a07:	0f 8e a9 00 00 00    	jle    10005ab6 <rgtree(Reghive_Tag*, int, int)+0xd6>
10005a0d:	83 ec 04             	sub    esp,0x4
10005a10:	6a 32                	push   0x32
10005a12:	6a 00                	push   0x0
10005a14:	8d 45 be             	lea    eax,[ebp-0x42]
10005a17:	50                   	push   eax
10005a18:	e8 fc ff ff ff       	call   10005a19 <rgtree(Reghive_Tag*, int, int)+0x39>	10005a19: R_386_PC32	memset
10005a1d:	83 c4 10             	add    esp,0x10
10005a20:	83 ec 04             	sub    esp,0x4
10005a23:	8d 45 be             	lea    eax,[ebp-0x42]
10005a26:	50                   	push   eax
10005a27:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10005a2a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005a2d:	e8 fc ff ff ff       	call   10005a2e <rgtree(Reghive_Tag*, int, int)+0x4e>	10005a2e: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
10005a32:	83 c4 10             	add    esp,0x10
10005a35:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10005a38:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10005a3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10005a42:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10005a45:	7d 15                	jge    10005a5c <rgtree(Reghive_Tag*, int, int)+0x7c>
10005a47:	83 ec 0c             	sub    esp,0xc
10005a4a:	68 2b b3 00 10       	push   0x1000b32b	10005a4b: R_386_32	.text
10005a4f:	e8 fc ff ff ff       	call   10005a50 <rgtree(Reghive_Tag*, int, int)+0x70>	10005a50: R_386_PC32	Dbg::kprintf(char const*, ...)
10005a54:	83 c4 10             	add    esp,0x10
10005a57:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10005a5a:	eb e3                	jmp    10005a3f <rgtree(Reghive_Tag*, int, int)+0x5f>
10005a5c:	83 ec 08             	sub    esp,0x8
10005a5f:	8d 45 be             	lea    eax,[ebp-0x42]
10005a62:	50                   	push   eax
10005a63:	68 7f b8 00 10       	push   0x1000b87f	10005a64: R_386_32	.text
10005a68:	e8 fc ff ff ff       	call   10005a69 <rgtree(Reghive_Tag*, int, int)+0x89>	10005a69: R_386_PC32	Dbg::kprintf(char const*, ...)
10005a6d:	83 c4 10             	add    esp,0x10
10005a70:	83 7d f0 4e          	cmp    DWORD PTR [ebp-0x10],0x4e
10005a74:	75 27                	jne    10005a9d <rgtree(Reghive_Tag*, int, int)+0xbd>
10005a76:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10005a79:	8d 58 04             	lea    ebx,[eax+0x4]
10005a7c:	83 ec 08             	sub    esp,0x8
10005a7f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10005a82:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005a85:	e8 fc ff ff ff       	call   10005a86 <rgtree(Reghive_Tag*, int, int)+0xa6>	10005a86: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005a8a:	83 c4 10             	add    esp,0x10
10005a8d:	83 ec 04             	sub    esp,0x4
10005a90:	53                   	push   ebx
10005a91:	50                   	push   eax
10005a92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005a95:	e8 fc ff ff ff       	call   10005a96 <rgtree(Reghive_Tag*, int, int)+0xb6>	10005a96: R_386_PC32	rgtree(Reghive_Tag*, int, int)
10005a9a:	83 c4 10             	add    esp,0x10
10005a9d:	83 ec 08             	sub    esp,0x8
10005aa0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10005aa3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005aa6:	e8 fc ff ff ff       	call   10005aa7 <rgtree(Reghive_Tag*, int, int)+0xc7>	10005aa7: R_386_PC32	CmGetNext(Reghive_Tag*, int)
10005aab:	83 c4 10             	add    esp,0x10
10005aae:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10005ab1:	e9 4d ff ff ff       	jmp    10005a03 <rgtree(Reghive_Tag*, int, int)+0x23>
10005ab6:	90                   	nop
10005ab7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10005aba:	c9                   	leave  
10005abb:	c3                   	ret    

10005abc <getRegsafeName(char*, char*)>:
10005abc:	55                   	push   ebp
10005abd:	89 e5                	mov    ebp,esp
10005abf:	83 ec 10             	sub    esp,0x10
10005ac2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005ac5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10005ac8:	e8 fc ff ff ff       	call   10005ac9 <getRegsafeName(char*, char*)+0xd>	10005ac9: R_386_PC32	strcpy
10005acd:	83 c4 08             	add    esp,0x8
10005ad0:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10005ad7:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005ada:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005add:	01 d0                	add    eax,edx
10005adf:	8a 00                	mov    al,BYTE PTR [eax]
10005ae1:	84 c0                	test   al,al
10005ae3:	74 7f                	je     10005b64 <getRegsafeName(char*, char*)+0xa8>
10005ae5:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005ae8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005aeb:	01 d0                	add    eax,edx
10005aed:	8a 00                	mov    al,BYTE PTR [eax]
10005aef:	3c 60                	cmp    al,0x60
10005af1:	7e 42                	jle    10005b35 <getRegsafeName(char*, char*)+0x79>
10005af3:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005af6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005af9:	01 d0                	add    eax,edx
10005afb:	8a 00                	mov    al,BYTE PTR [eax]
10005afd:	3c 7a                	cmp    al,0x7a
10005aff:	7f 34                	jg     10005b35 <getRegsafeName(char*, char*)+0x79>
10005b01:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005b04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005b07:	01 d0                	add    eax,edx
10005b09:	8a 00                	mov    al,BYTE PTR [eax]
10005b0b:	8d 48 9f             	lea    ecx,[eax-0x61]
10005b0e:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005b11:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005b14:	01 d0                	add    eax,edx
10005b16:	88 ca                	mov    dl,cl
10005b18:	88 10                	mov    BYTE PTR [eax],dl
10005b1a:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005b1d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005b20:	01 d0                	add    eax,edx
10005b22:	8a 00                	mov    al,BYTE PTR [eax]
10005b24:	8d 48 41             	lea    ecx,[eax+0x41]
10005b27:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005b2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005b2d:	01 d0                	add    eax,edx
10005b2f:	88 ca                	mov    dl,cl
10005b31:	88 10                	mov    BYTE PTR [eax],dl
10005b33:	eb 27                	jmp    10005b5c <getRegsafeName(char*, char*)+0xa0>
10005b35:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005b38:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005b3b:	01 d0                	add    eax,edx
10005b3d:	8a 00                	mov    al,BYTE PTR [eax]
10005b3f:	3c 40                	cmp    al,0x40
10005b41:	7e 0e                	jle    10005b51 <getRegsafeName(char*, char*)+0x95>
10005b43:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005b46:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005b49:	01 d0                	add    eax,edx
10005b4b:	8a 00                	mov    al,BYTE PTR [eax]
10005b4d:	3c 5a                	cmp    al,0x5a
10005b4f:	7e 0b                	jle    10005b5c <getRegsafeName(char*, char*)+0xa0>
10005b51:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005b54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005b57:	01 d0                	add    eax,edx
10005b59:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10005b5c:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10005b5f:	e9 73 ff ff ff       	jmp    10005ad7 <getRegsafeName(char*, char*)+0x1b>
10005b64:	90                   	nop
10005b65:	c9                   	leave  
10005b66:	c3                   	ret    

10005b67 <begin(void*)>:
10005b67:	55                   	push   ebp
10005b68:	89 e5                	mov    ebp,esp
10005b6a:	57                   	push   edi
10005b6b:	56                   	push   esi
10005b6c:	53                   	push   ebx
10005b6d:	81 ec 6c 07 00 00    	sub    esp,0x76c
10005b73:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
10005b77:	a1 00 00 00 00       	mov    eax,ds:0x0	10005b78: R_386_32	keBootSettings
10005b7c:	83 e0 02             	and    eax,0x2
10005b7f:	85 c0                	test   eax,eax
10005b81:	0f 95 c0             	setne  al
10005b84:	a2 00 00 00 00       	mov    ds:0x0,al	10005b85: R_386_32	safemode
10005b89:	83 ec 0c             	sub    esp,0xc
10005b8c:	68 14 01 00 00       	push   0x114
10005b91:	e8 fc ff ff ff       	call   10005b92 <begin(void*)+0x2b>	10005b92: R_386_PC32	operator new(unsigned long)
10005b96:	83 c4 10             	add    esp,0x10
10005b99:	89 c3                	mov    ebx,eax
10005b9b:	a1 00 00 00 00       	mov    eax,ds:0x0	10005b9c: R_386_32	kernelProcess
10005ba0:	83 ec 04             	sub    esp,0x4
10005ba3:	50                   	push   eax
10005ba4:	68 84 b8 00 10       	push   0x1000b884	10005ba5: R_386_32	.text
10005ba9:	53                   	push   ebx
10005baa:	e8 fc ff ff ff       	call   10005bab <begin(void*)+0x44>	10005bab: R_386_PC32	File::File(char const*, Process*)
10005baf:	83 c4 10             	add    esp,0x10
10005bb2:	89 5d b4             	mov    DWORD PTR [ebp-0x4c],ebx
10005bb5:	83 7d b4 00          	cmp    DWORD PTR [ebp-0x4c],0x0
10005bb9:	75 10                	jne    10005bcb <begin(void*)+0x64>
10005bbb:	83 ec 0c             	sub    esp,0xc
10005bbe:	68 a2 b8 00 10       	push   0x1000b8a2	10005bbf: R_386_32	.text
10005bc3:	e8 fc ff ff ff       	call   10005bc4 <begin(void*)+0x5d>	10005bc4: R_386_PC32	KePanic(char const*)
10005bc8:	83 c4 10             	add    esp,0x10
10005bcb:	83 ec 08             	sub    esp,0x8
10005bce:	6a 01                	push   0x1
10005bd0:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10005bd3:	e8 fc ff ff ff       	call   10005bd4 <begin(void*)+0x6d>	10005bd4: R_386_PC32	File::open(FileOpenMode)
10005bd8:	83 c4 10             	add    esp,0x10
10005bdb:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
10005bde:	83 7d b0 00          	cmp    DWORD PTR [ebp-0x50],0x0
10005be2:	75 10                	jne    10005bf4 <begin(void*)+0x8d>
10005be4:	83 ec 0c             	sub    esp,0xc
10005be7:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10005bea:	e8 fc ff ff ff       	call   10005beb <begin(void*)+0x84>	10005beb: R_386_PC32	File::close()
10005bef:	83 c4 10             	add    esp,0x10
10005bf2:	eb 04                	jmp    10005bf8 <begin(void*)+0x91>
10005bf4:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
10005bf8:	83 7d b4 00          	cmp    DWORD PTR [ebp-0x4c],0x0
10005bfc:	74 15                	je     10005c13 <begin(void*)+0xac>
10005bfe:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
10005c01:	8b 00                	mov    eax,DWORD PTR [eax]
10005c03:	83 c0 08             	add    eax,0x8
10005c06:	8b 00                	mov    eax,DWORD PTR [eax]
10005c08:	83 ec 0c             	sub    esp,0xc
10005c0b:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10005c0e:	ff d0                	call   eax
10005c10:	83 c4 10             	add    esp,0x10
10005c13:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10005c15: R_386_32	keIsPreemptionOn
10005c1a:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10005c1e:	74 0f                	je     10005c2f <begin(void*)+0xc8>
10005c20:	83 ec 0c             	sub    esp,0xc
10005c23:	6a 00                	push   0x0
10005c25:	e8 fc ff ff ff       	call   10005c26 <begin(void*)+0xbf>	10005c26: R_386_PC32	firstRun(bool)
10005c2a:	83 c4 10             	add    esp,0x10
10005c2d:	eb 05                	jmp    10005c34 <begin(void*)+0xcd>
10005c2f:	e8 fc ff ff ff       	call   10005c30 <begin(void*)+0xc9>	10005c30: R_386_PC32	loadExtensions()
10005c34:	8d 45 88             	lea    eax,[ebp-0x78]
10005c37:	bb b8 be 00 10       	mov    ebx,0x1000beb8	10005c38: R_386_32	.text
10005c3c:	ba 04 00 00 00       	mov    edx,0x4
10005c41:	89 c7                	mov    edi,eax
10005c43:	89 de                	mov    esi,ebx
10005c45:	89 d1                	mov    ecx,edx
10005c47:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005c49:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10005c4d:	0f 84 01 14 00 00    	je     10007054 <begin(void*)+0x14ed>
10005c53:	83 ec 0c             	sub    esp,0xc
10005c56:	68 c4 07 00 00       	push   0x7c4
10005c5b:	e8 fc ff ff ff       	call   10005c5c <begin(void*)+0xf5>	10005c5c: R_386_PC32	operator new(unsigned long)
10005c60:	83 c4 10             	add    esp,0x10
10005c63:	89 c3                	mov    ebx,eax
10005c65:	8d 45 88             	lea    eax,[ebp-0x78]
10005c68:	50                   	push   eax
10005c69:	6a 00                	push   0x0
10005c6b:	68 b2 b8 00 10       	push   0x1000b8b2	10005c6c: R_386_32	.text
10005c70:	53                   	push   ebx
10005c71:	e8 fc ff ff ff       	call   10005c72 <begin(void*)+0x10b>	10005c72: R_386_PC32	Process::Process(char const*, Process*, char**)
10005c76:	83 c4 10             	add    esp,0x10
10005c79:	89 5d ac             	mov    DWORD PTR [ebp-0x54],ebx
10005c7c:	83 ec 0c             	sub    esp,0xc
10005c7f:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10005c82:	e8 fc ff ff ff       	call   10005c83 <begin(void*)+0x11c>	10005c83: R_386_PC32	Process::createUserThread()
10005c87:	83 c4 10             	add    esp,0x10
10005c8a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005c8c: R_386_32	VgaText::hiddenOut
10005c91:	a1 00 00 00 00       	mov    eax,ds:0x0	10005c92: R_386_32	term
10005c96:	83 ec 0c             	sub    esp,0xc
10005c99:	50                   	push   eax
10005c9a:	e8 fc ff ff ff       	call   10005c9b <begin(void*)+0x134>	10005c9b: R_386_PC32	setActiveTerminal(VgaText*)
10005c9f:	83 c4 10             	add    esp,0x10
10005ca2:	e8 fc ff ff ff       	call   10005ca3 <begin(void*)+0x13c>	10005ca3: R_386_PC32	drawBootScreen()
10005ca7:	83 ec 0c             	sub    esp,0xc
10005caa:	68 4d b7 00 10       	push   0x1000b74d	10005cab: R_386_32	.text
10005caf:	6a 0d                	push   0xd
10005cb1:	6a 32                	push   0x32
10005cb3:	6a 05                	push   0x5
10005cb5:	6a 16                	push   0x16
10005cb7:	e8 fc ff ff ff       	call   10005cb8 <begin(void*)+0x151>	10005cb8: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005cbc:	83 c4 20             	add    esp,0x20
10005cbf:	83 ec 0c             	sub    esp,0xc
10005cc2:	6a 03                	push   0x3
10005cc4:	e8 fc ff ff ff       	call   10005cc5 <begin(void*)+0x15e>	10005cc5: R_386_PC32	bootInstallTasks(int)
10005cc9:	83 c4 10             	add    esp,0x10
10005ccc:	a0 00 00 00 00       	mov    al,ds:0x0	10005ccd: R_386_32	safemode
10005cd1:	83 f0 01             	xor    eax,0x1
10005cd4:	a2 00 00 00 00       	mov    ds:0x0,al	10005cd5: R_386_32	VgaText::hiddenOut
10005cd9:	a0 00 00 00 00       	mov    al,ds:0x0	10005cda: R_386_32	safemode
10005cde:	84 c0                	test   al,al
10005ce0:	74 43                	je     10005d25 <begin(void*)+0x1be>
10005ce2:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10005ce5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
10005ceb:	83 ec 0c             	sub    esp,0xc
10005cee:	50                   	push   eax
10005cef:	e8 fc ff ff ff       	call   10005cf0 <begin(void*)+0x189>	10005cf0: R_386_PC32	setActiveTerminal(VgaText*)
10005cf4:	83 c4 10             	add    esp,0x10
10005cf7:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10005cfa:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
10005d00:	83 ec 08             	sub    esp,0x8
10005d03:	6a 00                	push   0x0
10005d05:	50                   	push   eax
10005d06:	e8 fc ff ff ff       	call   10005d07 <begin(void*)+0x1a0>	10005d07: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
10005d0b:	83 c4 10             	add    esp,0x10
10005d0e:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10005d11:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
10005d17:	83 ec 08             	sub    esp,0x8
10005d1a:	6a 0f                	push   0xf
10005d1c:	50                   	push   eax
10005d1d:	e8 fc ff ff ff       	call   10005d1e <begin(void*)+0x1b7>	10005d1e: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
10005d22:	83 c4 10             	add    esp,0x10
10005d25:	83 ec 0c             	sub    esp,0xc
10005d28:	68 14 01 00 00       	push   0x114
10005d2d:	e8 fc ff ff ff       	call   10005d2e <begin(void*)+0x1c7>	10005d2e: R_386_PC32	operator new(unsigned long)
10005d32:	83 c4 10             	add    esp,0x10
10005d35:	89 c3                	mov    ebx,eax
10005d37:	a1 00 00 00 00       	mov    eax,ds:0x0	10005d38: R_386_32	kernelProcess
10005d3c:	83 ec 04             	sub    esp,0x4
10005d3f:	50                   	push   eax
10005d40:	68 cf b8 00 10       	push   0x1000b8cf	10005d41: R_386_32	.text
10005d45:	53                   	push   ebx
10005d46:	e8 fc ff ff ff       	call   10005d47 <begin(void*)+0x1e0>	10005d47: R_386_PC32	File::File(char const*, Process*)
10005d4b:	83 c4 10             	add    esp,0x10
10005d4e:	89 5d a8             	mov    DWORD PTR [ebp-0x58],ebx
10005d51:	83 ec 08             	sub    esp,0x8
10005d54:	6a 01                	push   0x1
10005d56:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005d59:	e8 fc ff ff ff       	call   10005d5a <begin(void*)+0x1f3>	10005d5a: R_386_PC32	File::open(FileOpenMode)
10005d5e:	83 c4 10             	add    esp,0x10
10005d61:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10005d64:	83 7d a4 00          	cmp    DWORD PTR [ebp-0x5c],0x0
10005d68:	75 39                	jne    10005da3 <begin(void*)+0x23c>
10005d6a:	83 ec 0c             	sub    esp,0xc
10005d6d:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005d70:	e8 fc ff ff ff       	call   10005d71 <begin(void*)+0x20a>	10005d71: R_386_PC32	File::close()
10005d75:	83 c4 10             	add    esp,0x10
10005d78:	83 ec 0c             	sub    esp,0xc
10005d7b:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005d7e:	e8 fc ff ff ff       	call   10005d7f <begin(void*)+0x218>	10005d7f: R_386_PC32	File::unlink()
10005d83:	83 c4 10             	add    esp,0x10
10005d86:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
10005d8a:	74 46                	je     10005dd2 <begin(void*)+0x26b>
10005d8c:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10005d8f:	8b 00                	mov    eax,DWORD PTR [eax]
10005d91:	83 c0 08             	add    eax,0x8
10005d94:	8b 00                	mov    eax,DWORD PTR [eax]
10005d96:	83 ec 0c             	sub    esp,0xc
10005d99:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005d9c:	ff d0                	call   eax
10005d9e:	83 c4 10             	add    esp,0x10
10005da1:	eb 2f                	jmp    10005dd2 <begin(void*)+0x26b>
10005da3:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
10005da7:	74 15                	je     10005dbe <begin(void*)+0x257>
10005da9:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10005dac:	8b 00                	mov    eax,DWORD PTR [eax]
10005dae:	83 c0 08             	add    eax,0x8
10005db1:	8b 00                	mov    eax,DWORD PTR [eax]
10005db3:	83 ec 0c             	sub    esp,0xc
10005db6:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005db9:	ff d0                	call   eax
10005dbb:	83 c4 10             	add    esp,0x10
10005dbe:	83 ec 08             	sub    esp,0x8
10005dc1:	6a 00                	push   0x0
10005dc3:	6a 01                	push   0x1
10005dc5:	e8 fc ff ff ff       	call   10005dc6 <begin(void*)+0x25f>	10005dc6: R_386_PC32	sleep(unsigned long long)
10005dca:	83 c4 10             	add    esp,0x10
10005dcd:	e9 53 ff ff ff       	jmp    10005d25 <begin(void*)+0x1be>
10005dd2:	90                   	nop
10005dd3:	83 ec 08             	sub    esp,0x8
10005dd6:	6a 00                	push   0x0
10005dd8:	6a 01                	push   0x1
10005dda:	e8 fc ff ff ff       	call   10005ddb <begin(void*)+0x274>	10005ddb: R_386_PC32	sleep(unsigned long long)
10005ddf:	83 c4 10             	add    esp,0x10
10005de2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005de4: R_386_32	VgaText::hiddenOut
10005de9:	a1 00 00 00 00       	mov    eax,ds:0x0	10005dea: R_386_32	term
10005dee:	83 ec 0c             	sub    esp,0xc
10005df1:	50                   	push   eax
10005df2:	e8 fc ff ff ff       	call   10005df3 <begin(void*)+0x28c>	10005df3: R_386_PC32	setActiveTerminal(VgaText*)
10005df7:	83 c4 10             	add    esp,0x10
10005dfa:	e8 fc ff ff ff       	call   10005dfb <begin(void*)+0x294>	10005dfb: R_386_PC32	drawBootScreen()
10005dff:	83 ec 0c             	sub    esp,0xc
10005e02:	68 4d b7 00 10       	push   0x1000b74d	10005e03: R_386_32	.text
10005e07:	6a 0d                	push   0xd
10005e09:	6a 32                	push   0x32
10005e0b:	6a 05                	push   0x5
10005e0d:	6a 16                	push   0x16
10005e0f:	e8 fc ff ff ff       	call   10005e10 <begin(void*)+0x2a9>	10005e10: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005e14:	83 c4 20             	add    esp,0x20
10005e17:	83 ec 0c             	sub    esp,0xc
10005e1a:	6a 04                	push   0x4
10005e1c:	e8 fc ff ff ff       	call   10005e1d <begin(void*)+0x2b6>	10005e1d: R_386_PC32	bootInstallTasks(int)
10005e21:	83 c4 10             	add    esp,0x10
10005e24:	eb 01                	jmp    10005e27 <begin(void*)+0x2c0>
10005e26:	90                   	nop
10005e27:	83 ec 0c             	sub    esp,0xc
10005e2a:	6a 05                	push   0x5
10005e2c:	e8 fc ff ff ff       	call   10005e2d <begin(void*)+0x2c6>	10005e2d: R_386_PC32	bootInstallTasks(int)
10005e31:	83 c4 10             	add    esp,0x10
10005e34:	83 ec 0c             	sub    esp,0xc
10005e37:	68 dc b8 00 10       	push   0x1000b8dc	10005e38: R_386_32	.text
10005e3c:	e8 fc ff ff ff       	call   10005e3d <begin(void*)+0x2d6>	10005e3d: R_386_PC32	CmOpen(char const*)
10005e41:	83 c4 10             	add    esp,0x10
10005e44:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10005e47:	a0 00 00 00 00       	mov    al,ds:0x0	10005e48: R_386_32	createNewUserMode
10005e4c:	83 f0 01             	xor    eax,0x1
10005e4f:	84 c0                	test   al,al
10005e51:	74 15                	je     10005e68 <begin(void*)+0x301>
10005e53:	83 ec 04             	sub    esp,0x4
10005e56:	68 01 b9 00 10       	push   0x1000b901	10005e57: R_386_32	.text
10005e5b:	6a 00                	push   0x0
10005e5d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e60:	e8 fc ff ff ff       	call   10005e61 <begin(void*)+0x2fa>	10005e61: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005e65:	83 c4 10             	add    esp,0x10
10005e68:	83 ec 08             	sub    esp,0x8
10005e6b:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10005e71:	50                   	push   eax
10005e72:	68 00 00 00 00       	push   0x0	10005e73: R_386_32	currName
10005e77:	e8 fc ff ff ff       	call   10005e78 <begin(void*)+0x311>	10005e78: R_386_PC32	getRegsafeName(char*, char*)
10005e7c:	83 c4 10             	add    esp,0x10
10005e7f:	83 ec 08             	sub    esp,0x8
10005e82:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10005e88:	50                   	push   eax
10005e89:	68 08 b9 00 10       	push   0x1000b908	10005e8a: R_386_32	.text
10005e8e:	e8 fc ff ff ff       	call   10005e8f <begin(void*)+0x328>	10005e8f: R_386_PC32	Dbg::kprintf(char const*, ...)
10005e93:	83 c4 10             	add    esp,0x10
10005e96:	83 ec 08             	sub    esp,0x8
10005e99:	68 1a b9 00 10       	push   0x1000b91a	10005e9a: R_386_32	.text
10005e9e:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10005ea4:	50                   	push   eax
10005ea5:	e8 fc ff ff ff       	call   10005ea6 <begin(void*)+0x33f>	10005ea6: R_386_PC32	strcpy
10005eaa:	83 c4 10             	add    esp,0x10
10005ead:	83 ec 08             	sub    esp,0x8
10005eb0:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10005eb6:	50                   	push   eax
10005eb7:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10005ebd:	50                   	push   eax
10005ebe:	e8 fc ff ff ff       	call   10005ebf <begin(void*)+0x358>	10005ebf: R_386_PC32	strcat
10005ec3:	83 c4 10             	add    esp,0x10
10005ec6:	83 ec 08             	sub    esp,0x8
10005ec9:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10005ecf:	50                   	push   eax
10005ed0:	68 28 b9 00 10       	push   0x1000b928	10005ed1: R_386_32	.text
10005ed5:	e8 fc ff ff ff       	call   10005ed6 <begin(void*)+0x36f>	10005ed6: R_386_PC32	Dbg::kprintf(char const*, ...)
10005eda:	83 c4 10             	add    esp,0x10
10005edd:	a0 00 00 00 00       	mov    al,ds:0x0	10005ede: R_386_32	createNewUserMode
10005ee2:	83 f0 01             	xor    eax,0x1
10005ee5:	84 c0                	test   al,al
10005ee7:	0f 84 60 03 00 00    	je     1000624d <begin(void*)+0x6e6>
10005eed:	83 ec 08             	sub    esp,0x8
10005ef0:	68 01 b9 00 10       	push   0x1000b901	10005ef1: R_386_32	.text
10005ef5:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005ef8:	e8 fc ff ff ff       	call   10005ef9 <begin(void*)+0x392>	10005ef9: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005efd:	83 c4 10             	add    esp,0x10
10005f00:	83 ec 08             	sub    esp,0x8
10005f03:	50                   	push   eax
10005f04:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f07:	e8 fc ff ff ff       	call   10005f08 <begin(void*)+0x3a1>	10005f08: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005f0c:	83 c4 10             	add    esp,0x10
10005f0f:	83 ec 04             	sub    esp,0x4
10005f12:	68 3b b9 00 10       	push   0x1000b93b	10005f13: R_386_32	.text
10005f17:	50                   	push   eax
10005f18:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f1b:	e8 fc ff ff ff       	call   10005f1c <begin(void*)+0x3b5>	10005f1c: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005f20:	83 c4 10             	add    esp,0x10
10005f23:	83 ec 08             	sub    esp,0x8
10005f26:	68 01 b9 00 10       	push   0x1000b901	10005f27: R_386_32	.text
10005f2b:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f2e:	e8 fc ff ff ff       	call   10005f2f <begin(void*)+0x3c8>	10005f2f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005f33:	83 c4 10             	add    esp,0x10
10005f36:	83 ec 08             	sub    esp,0x8
10005f39:	50                   	push   eax
10005f3a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f3d:	e8 fc ff ff ff       	call   10005f3e <begin(void*)+0x3d7>	10005f3e: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005f42:	83 c4 10             	add    esp,0x10
10005f45:	83 ec 04             	sub    esp,0x4
10005f48:	68 41 b9 00 10       	push   0x1000b941	10005f49: R_386_32	.text
10005f4d:	50                   	push   eax
10005f4e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f51:	e8 fc ff ff ff       	call   10005f52 <begin(void*)+0x3eb>	10005f52: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005f56:	83 c4 10             	add    esp,0x10
10005f59:	83 ec 08             	sub    esp,0x8
10005f5c:	68 01 b9 00 10       	push   0x1000b901	10005f5d: R_386_32	.text
10005f61:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f64:	e8 fc ff ff ff       	call   10005f65 <begin(void*)+0x3fe>	10005f65: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005f69:	83 c4 10             	add    esp,0x10
10005f6c:	83 ec 08             	sub    esp,0x8
10005f6f:	50                   	push   eax
10005f70:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f73:	e8 fc ff ff ff       	call   10005f74 <begin(void*)+0x40d>	10005f74: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005f78:	83 c4 10             	add    esp,0x10
10005f7b:	83 ec 04             	sub    esp,0x4
10005f7e:	68 46 b9 00 10       	push   0x1000b946	10005f7f: R_386_32	.text
10005f83:	50                   	push   eax
10005f84:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f87:	e8 fc ff ff ff       	call   10005f88 <begin(void*)+0x421>	10005f88: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005f8c:	83 c4 10             	add    esp,0x10
10005f8f:	83 ec 08             	sub    esp,0x8
10005f92:	68 01 b9 00 10       	push   0x1000b901	10005f93: R_386_32	.text
10005f97:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f9a:	e8 fc ff ff ff       	call   10005f9b <begin(void*)+0x434>	10005f9b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005f9f:	83 c4 10             	add    esp,0x10
10005fa2:	83 ec 08             	sub    esp,0x8
10005fa5:	50                   	push   eax
10005fa6:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005fa9:	e8 fc ff ff ff       	call   10005faa <begin(void*)+0x443>	10005faa: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005fae:	83 c4 10             	add    esp,0x10
10005fb1:	83 ec 04             	sub    esp,0x4
10005fb4:	68 4b b9 00 10       	push   0x1000b94b	10005fb5: R_386_32	.text
10005fb9:	50                   	push   eax
10005fba:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005fbd:	e8 fc ff ff ff       	call   10005fbe <begin(void*)+0x457>	10005fbe: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005fc2:	83 c4 10             	add    esp,0x10
10005fc5:	83 ec 08             	sub    esp,0x8
10005fc8:	68 01 b9 00 10       	push   0x1000b901	10005fc9: R_386_32	.text
10005fcd:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005fd0:	e8 fc ff ff ff       	call   10005fd1 <begin(void*)+0x46a>	10005fd1: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005fd5:	83 c4 10             	add    esp,0x10
10005fd8:	83 ec 08             	sub    esp,0x8
10005fdb:	50                   	push   eax
10005fdc:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005fdf:	e8 fc ff ff ff       	call   10005fe0 <begin(void*)+0x479>	10005fe0: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005fe4:	83 c4 10             	add    esp,0x10
10005fe7:	83 ec 04             	sub    esp,0x4
10005fea:	68 51 b9 00 10       	push   0x1000b951	10005feb: R_386_32	.text
10005fef:	50                   	push   eax
10005ff0:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005ff3:	e8 fc ff ff ff       	call   10005ff4 <begin(void*)+0x48d>	10005ff4: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005ff8:	83 c4 10             	add    esp,0x10
10005ffb:	83 ec 08             	sub    esp,0x8
10005ffe:	68 5b b9 00 10       	push   0x1000b95b	10005fff: R_386_32	.text
10006003:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006006:	e8 fc ff ff ff       	call   10006007 <begin(void*)+0x4a0>	10006007: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000600b:	83 c4 10             	add    esp,0x10
1000600e:	83 ec 08             	sub    esp,0x8
10006011:	50                   	push   eax
10006012:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006015:	e8 fc ff ff ff       	call   10006016 <begin(void*)+0x4af>	10006016: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000601a:	83 c4 10             	add    esp,0x10
1000601d:	83 ec 04             	sub    esp,0x4
10006020:	68 6c b9 00 10       	push   0x1000b96c	10006021: R_386_32	.text
10006025:	50                   	push   eax
10006026:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006029:	e8 fc ff ff ff       	call   1000602a <begin(void*)+0x4c3>	1000602a: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000602e:	83 c4 10             	add    esp,0x10
10006031:	83 ec 08             	sub    esp,0x8
10006034:	68 5b b9 00 10       	push   0x1000b95b	10006035: R_386_32	.text
10006039:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000603c:	e8 fc ff ff ff       	call   1000603d <begin(void*)+0x4d6>	1000603d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006041:	83 c4 10             	add    esp,0x10
10006044:	83 ec 08             	sub    esp,0x8
10006047:	50                   	push   eax
10006048:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000604b:	e8 fc ff ff ff       	call   1000604c <begin(void*)+0x4e5>	1000604c: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006050:	83 c4 10             	add    esp,0x10
10006053:	83 ec 04             	sub    esp,0x4
10006056:	68 71 b9 00 10       	push   0x1000b971	10006057: R_386_32	.text
1000605b:	50                   	push   eax
1000605c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000605f:	e8 fc ff ff ff       	call   10006060 <begin(void*)+0x4f9>	10006060: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10006064:	83 c4 10             	add    esp,0x10
10006067:	83 ec 08             	sub    esp,0x8
1000606a:	68 5b b9 00 10       	push   0x1000b95b	1000606b: R_386_32	.text
1000606f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006072:	e8 fc ff ff ff       	call   10006073 <begin(void*)+0x50c>	10006073: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006077:	83 c4 10             	add    esp,0x10
1000607a:	83 ec 08             	sub    esp,0x8
1000607d:	50                   	push   eax
1000607e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006081:	e8 fc ff ff ff       	call   10006082 <begin(void*)+0x51b>	10006082: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006086:	83 c4 10             	add    esp,0x10
10006089:	83 ec 04             	sub    esp,0x4
1000608c:	68 76 b9 00 10       	push   0x1000b976	1000608d: R_386_32	.text
10006091:	50                   	push   eax
10006092:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006095:	e8 fc ff ff ff       	call   10006096 <begin(void*)+0x52f>	10006096: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000609a:	83 c4 10             	add    esp,0x10
1000609d:	83 ec 08             	sub    esp,0x8
100060a0:	68 5b b9 00 10       	push   0x1000b95b	100060a1: R_386_32	.text
100060a5:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100060a8:	e8 fc ff ff ff       	call   100060a9 <begin(void*)+0x542>	100060a9: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100060ad:	83 c4 10             	add    esp,0x10
100060b0:	83 ec 08             	sub    esp,0x8
100060b3:	50                   	push   eax
100060b4:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100060b7:	e8 fc ff ff ff       	call   100060b8 <begin(void*)+0x551>	100060b8: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100060bc:	83 c4 10             	add    esp,0x10
100060bf:	83 ec 04             	sub    esp,0x4
100060c2:	68 7c b9 00 10       	push   0x1000b97c	100060c3: R_386_32	.text
100060c7:	50                   	push   eax
100060c8:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100060cb:	e8 fc ff ff ff       	call   100060cc <begin(void*)+0x565>	100060cc: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100060d0:	83 c4 10             	add    esp,0x10
100060d3:	83 ec 08             	sub    esp,0x8
100060d6:	68 5b b9 00 10       	push   0x1000b95b	100060d7: R_386_32	.text
100060db:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100060de:	e8 fc ff ff ff       	call   100060df <begin(void*)+0x578>	100060df: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100060e3:	83 c4 10             	add    esp,0x10
100060e6:	83 ec 08             	sub    esp,0x8
100060e9:	50                   	push   eax
100060ea:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100060ed:	e8 fc ff ff ff       	call   100060ee <begin(void*)+0x587>	100060ee: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100060f2:	83 c4 10             	add    esp,0x10
100060f5:	83 ec 04             	sub    esp,0x4
100060f8:	68 81 b9 00 10       	push   0x1000b981	100060f9: R_386_32	.text
100060fd:	50                   	push   eax
100060fe:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006101:	e8 fc ff ff ff       	call   10006102 <begin(void*)+0x59b>	10006102: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10006106:	83 c4 10             	add    esp,0x10
10006109:	83 ec 08             	sub    esp,0x8
1000610c:	68 5b b9 00 10       	push   0x1000b95b	1000610d: R_386_32	.text
10006111:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006114:	e8 fc ff ff ff       	call   10006115 <begin(void*)+0x5ae>	10006115: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006119:	83 c4 10             	add    esp,0x10
1000611c:	83 ec 08             	sub    esp,0x8
1000611f:	50                   	push   eax
10006120:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006123:	e8 fc ff ff ff       	call   10006124 <begin(void*)+0x5bd>	10006124: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006128:	83 c4 10             	add    esp,0x10
1000612b:	83 ec 04             	sub    esp,0x4
1000612e:	68 87 b9 00 10       	push   0x1000b987	1000612f: R_386_32	.text
10006133:	50                   	push   eax
10006134:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006137:	e8 fc ff ff ff       	call   10006138 <begin(void*)+0x5d1>	10006138: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000613c:	83 c4 10             	add    esp,0x10
1000613f:	83 ec 08             	sub    esp,0x8
10006142:	68 5b b9 00 10       	push   0x1000b95b	10006143: R_386_32	.text
10006147:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000614a:	e8 fc ff ff ff       	call   1000614b <begin(void*)+0x5e4>	1000614b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000614f:	83 c4 10             	add    esp,0x10
10006152:	83 ec 08             	sub    esp,0x8
10006155:	50                   	push   eax
10006156:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006159:	e8 fc ff ff ff       	call   1000615a <begin(void*)+0x5f3>	1000615a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000615e:	83 c4 10             	add    esp,0x10
10006161:	83 ec 04             	sub    esp,0x4
10006164:	68 92 b9 00 10       	push   0x1000b992	10006165: R_386_32	.text
10006169:	50                   	push   eax
1000616a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000616d:	e8 fc ff ff ff       	call   1000616e <begin(void*)+0x607>	1000616e: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10006172:	83 c4 10             	add    esp,0x10
10006175:	83 ec 08             	sub    esp,0x8
10006178:	68 9d b9 00 10       	push   0x1000b99d	10006179: R_386_32	.text
1000617d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006180:	e8 fc ff ff ff       	call   10006181 <begin(void*)+0x61a>	10006181: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006185:	83 c4 10             	add    esp,0x10
10006188:	83 ec 08             	sub    esp,0x8
1000618b:	50                   	push   eax
1000618c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000618f:	e8 fc ff ff ff       	call   10006190 <begin(void*)+0x629>	10006190: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006194:	83 c4 10             	add    esp,0x10
10006197:	83 ec 04             	sub    esp,0x4
1000619a:	68 a9 b9 00 10       	push   0x1000b9a9	1000619b: R_386_32	.text
1000619f:	50                   	push   eax
100061a0:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100061a3:	e8 fc ff ff ff       	call   100061a4 <begin(void*)+0x63d>	100061a4: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100061a8:	83 c4 10             	add    esp,0x10
100061ab:	83 ec 08             	sub    esp,0x8
100061ae:	68 b2 b9 00 10       	push   0x1000b9b2	100061af: R_386_32	.text
100061b3:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100061b6:	e8 fc ff ff ff       	call   100061b7 <begin(void*)+0x650>	100061b7: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100061bb:	83 c4 10             	add    esp,0x10
100061be:	83 ec 08             	sub    esp,0x8
100061c1:	50                   	push   eax
100061c2:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100061c5:	e8 fc ff ff ff       	call   100061c6 <begin(void*)+0x65f>	100061c6: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100061ca:	83 c4 10             	add    esp,0x10
100061cd:	83 ec 04             	sub    esp,0x4
100061d0:	68 bf b9 00 10       	push   0x1000b9bf	100061d1: R_386_32	.text
100061d5:	50                   	push   eax
100061d6:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100061d9:	e8 fc ff ff ff       	call   100061da <begin(void*)+0x673>	100061da: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100061de:	83 c4 10             	add    esp,0x10
100061e1:	83 ec 08             	sub    esp,0x8
100061e4:	68 b2 b9 00 10       	push   0x1000b9b2	100061e5: R_386_32	.text
100061e9:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100061ec:	e8 fc ff ff ff       	call   100061ed <begin(void*)+0x686>	100061ed: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100061f1:	83 c4 10             	add    esp,0x10
100061f4:	83 ec 08             	sub    esp,0x8
100061f7:	50                   	push   eax
100061f8:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100061fb:	e8 fc ff ff ff       	call   100061fc <begin(void*)+0x695>	100061fc: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006200:	83 c4 10             	add    esp,0x10
10006203:	83 ec 04             	sub    esp,0x4
10006206:	68 c4 b9 00 10       	push   0x1000b9c4	10006207: R_386_32	.text
1000620b:	50                   	push   eax
1000620c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000620f:	e8 fc ff ff ff       	call   10006210 <begin(void*)+0x6a9>	10006210: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006214:	83 c4 10             	add    esp,0x10
10006217:	83 ec 08             	sub    esp,0x8
1000621a:	68 b2 b9 00 10       	push   0x1000b9b2	1000621b: R_386_32	.text
1000621f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006222:	e8 fc ff ff ff       	call   10006223 <begin(void*)+0x6bc>	10006223: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006227:	83 c4 10             	add    esp,0x10
1000622a:	83 ec 08             	sub    esp,0x8
1000622d:	50                   	push   eax
1000622e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006231:	e8 fc ff ff ff       	call   10006232 <begin(void*)+0x6cb>	10006232: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006236:	83 c4 10             	add    esp,0x10
10006239:	83 ec 04             	sub    esp,0x4
1000623c:	68 cc b9 00 10       	push   0x1000b9cc	1000623d: R_386_32	.text
10006241:	50                   	push   eax
10006242:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006245:	e8 fc ff ff ff       	call   10006246 <begin(void*)+0x6df>	10006246: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000624a:	83 c4 10             	add    esp,0x10
1000624d:	83 ec 08             	sub    esp,0x8
10006250:	68 d7 b9 00 10       	push   0x1000b9d7	10006251: R_386_32	.text
10006255:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006258:	e8 fc ff ff ff       	call   10006259 <begin(void*)+0x6f2>	10006259: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000625d:	83 c4 10             	add    esp,0x10
10006260:	83 ec 08             	sub    esp,0x8
10006263:	50                   	push   eax
10006264:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006267:	e8 fc ff ff ff       	call   10006268 <begin(void*)+0x701>	10006268: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000626c:	83 c4 10             	add    esp,0x10
1000626f:	83 ec 04             	sub    esp,0x4
10006272:	8d 95 48 ff ff ff    	lea    edx,[ebp-0xb8]
10006278:	52                   	push   edx
10006279:	50                   	push   eax
1000627a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000627d:	e8 fc ff ff ff       	call   1000627e <begin(void*)+0x717>	1000627e: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10006282:	83 c4 10             	add    esp,0x10
10006285:	83 ec 08             	sub    esp,0x8
10006288:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000628e:	50                   	push   eax
1000628f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006292:	e8 fc ff ff ff       	call   10006293 <begin(void*)+0x72c>	10006293: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006297:	83 c4 10             	add    esp,0x10
1000629a:	83 ec 08             	sub    esp,0x8
1000629d:	50                   	push   eax
1000629e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100062a1:	e8 fc ff ff ff       	call   100062a2 <begin(void*)+0x73b>	100062a2: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100062a6:	83 c4 10             	add    esp,0x10
100062a9:	83 ec 04             	sub    esp,0x4
100062ac:	68 e4 b9 00 10       	push   0x1000b9e4	100062ad: R_386_32	.text
100062b1:	50                   	push   eax
100062b2:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100062b5:	e8 fc ff ff ff       	call   100062b6 <begin(void*)+0x74f>	100062b6: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100062ba:	83 c4 10             	add    esp,0x10
100062bd:	83 ec 08             	sub    esp,0x8
100062c0:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100062c6:	50                   	push   eax
100062c7:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100062ca:	e8 fc ff ff ff       	call   100062cb <begin(void*)+0x764>	100062cb: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100062cf:	83 c4 10             	add    esp,0x10
100062d2:	83 ec 08             	sub    esp,0x8
100062d5:	50                   	push   eax
100062d6:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100062d9:	e8 fc ff ff ff       	call   100062da <begin(void*)+0x773>	100062da: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100062de:	83 c4 10             	add    esp,0x10
100062e1:	83 ec 04             	sub    esp,0x4
100062e4:	68 e9 b9 00 10       	push   0x1000b9e9	100062e5: R_386_32	.text
100062e9:	50                   	push   eax
100062ea:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100062ed:	e8 fc ff ff ff       	call   100062ee <begin(void*)+0x787>	100062ee: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100062f2:	83 c4 10             	add    esp,0x10
100062f5:	83 ec 08             	sub    esp,0x8
100062f8:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100062fe:	50                   	push   eax
100062ff:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006302:	e8 fc ff ff ff       	call   10006303 <begin(void*)+0x79c>	10006303: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006307:	83 c4 10             	add    esp,0x10
1000630a:	83 ec 08             	sub    esp,0x8
1000630d:	50                   	push   eax
1000630e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006311:	e8 fc ff ff ff       	call   10006312 <begin(void*)+0x7ab>	10006312: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006316:	83 c4 10             	add    esp,0x10
10006319:	83 ec 04             	sub    esp,0x4
1000631c:	68 f2 b9 00 10       	push   0x1000b9f2	1000631d: R_386_32	.text
10006321:	50                   	push   eax
10006322:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006325:	e8 fc ff ff ff       	call   10006326 <begin(void*)+0x7bf>	10006326: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000632a:	83 c4 10             	add    esp,0x10
1000632d:	83 ec 08             	sub    esp,0x8
10006330:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006336:	50                   	push   eax
10006337:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000633a:	e8 fc ff ff ff       	call   1000633b <begin(void*)+0x7d4>	1000633b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000633f:	83 c4 10             	add    esp,0x10
10006342:	83 ec 08             	sub    esp,0x8
10006345:	50                   	push   eax
10006346:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006349:	e8 fc ff ff ff       	call   1000634a <begin(void*)+0x7e3>	1000634a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000634e:	83 c4 10             	add    esp,0x10
10006351:	83 ec 04             	sub    esp,0x4
10006354:	68 fe b9 00 10       	push   0x1000b9fe	10006355: R_386_32	.text
10006359:	50                   	push   eax
1000635a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000635d:	e8 fc ff ff ff       	call   1000635e <begin(void*)+0x7f7>	1000635e: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006362:	83 c4 10             	add    esp,0x10
10006365:	83 ec 08             	sub    esp,0x8
10006368:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000636e:	50                   	push   eax
1000636f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006372:	e8 fc ff ff ff       	call   10006373 <begin(void*)+0x80c>	10006373: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006377:	83 c4 10             	add    esp,0x10
1000637a:	83 ec 08             	sub    esp,0x8
1000637d:	50                   	push   eax
1000637e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006381:	e8 fc ff ff ff       	call   10006382 <begin(void*)+0x81b>	10006382: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006386:	83 c4 10             	add    esp,0x10
10006389:	83 ec 04             	sub    esp,0x4
1000638c:	68 06 ba 00 10       	push   0x1000ba06	1000638d: R_386_32	.text
10006391:	50                   	push   eax
10006392:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006395:	e8 fc ff ff ff       	call   10006396 <begin(void*)+0x82f>	10006396: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000639a:	83 c4 10             	add    esp,0x10
1000639d:	83 ec 08             	sub    esp,0x8
100063a0:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100063a6:	50                   	push   eax
100063a7:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100063aa:	e8 fc ff ff ff       	call   100063ab <begin(void*)+0x844>	100063ab: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100063af:	83 c4 10             	add    esp,0x10
100063b2:	83 ec 08             	sub    esp,0x8
100063b5:	50                   	push   eax
100063b6:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100063b9:	e8 fc ff ff ff       	call   100063ba <begin(void*)+0x853>	100063ba: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100063be:	83 c4 10             	add    esp,0x10
100063c1:	83 ec 04             	sub    esp,0x4
100063c4:	68 10 ba 00 10       	push   0x1000ba10	100063c5: R_386_32	.text
100063c9:	50                   	push   eax
100063ca:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100063cd:	e8 fc ff ff ff       	call   100063ce <begin(void*)+0x867>	100063ce: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100063d2:	83 c4 10             	add    esp,0x10
100063d5:	83 ec 08             	sub    esp,0x8
100063d8:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100063de:	50                   	push   eax
100063df:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100063e2:	e8 fc ff ff ff       	call   100063e3 <begin(void*)+0x87c>	100063e3: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100063e7:	83 c4 10             	add    esp,0x10
100063ea:	83 ec 08             	sub    esp,0x8
100063ed:	50                   	push   eax
100063ee:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100063f1:	e8 fc ff ff ff       	call   100063f2 <begin(void*)+0x88b>	100063f2: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100063f6:	83 c4 10             	add    esp,0x10
100063f9:	83 ec 04             	sub    esp,0x4
100063fc:	68 1a ba 00 10       	push   0x1000ba1a	100063fd: R_386_32	.text
10006401:	50                   	push   eax
10006402:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006405:	e8 fc ff ff ff       	call   10006406 <begin(void*)+0x89f>	10006406: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000640a:	83 c4 10             	add    esp,0x10
1000640d:	83 ec 08             	sub    esp,0x8
10006410:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006416:	50                   	push   eax
10006417:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000641a:	e8 fc ff ff ff       	call   1000641b <begin(void*)+0x8b4>	1000641b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000641f:	83 c4 10             	add    esp,0x10
10006422:	83 ec 08             	sub    esp,0x8
10006425:	50                   	push   eax
10006426:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006429:	e8 fc ff ff ff       	call   1000642a <begin(void*)+0x8c3>	1000642a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000642e:	83 c4 10             	add    esp,0x10
10006431:	83 ec 04             	sub    esp,0x4
10006434:	68 23 ba 00 10       	push   0x1000ba23	10006435: R_386_32	.text
10006439:	50                   	push   eax
1000643a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000643d:	e8 fc ff ff ff       	call   1000643e <begin(void*)+0x8d7>	1000643e: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006442:	83 c4 10             	add    esp,0x10
10006445:	83 ec 08             	sub    esp,0x8
10006448:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000644e:	50                   	push   eax
1000644f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006452:	e8 fc ff ff ff       	call   10006453 <begin(void*)+0x8ec>	10006453: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006457:	83 c4 10             	add    esp,0x10
1000645a:	83 ec 08             	sub    esp,0x8
1000645d:	50                   	push   eax
1000645e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006461:	e8 fc ff ff ff       	call   10006462 <begin(void*)+0x8fb>	10006462: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006466:	83 c4 10             	add    esp,0x10
10006469:	83 ec 04             	sub    esp,0x4
1000646c:	68 2a ba 00 10       	push   0x1000ba2a	1000646d: R_386_32	.text
10006471:	50                   	push   eax
10006472:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006475:	e8 fc ff ff ff       	call   10006476 <begin(void*)+0x90f>	10006476: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000647a:	83 c4 10             	add    esp,0x10
1000647d:	83 ec 08             	sub    esp,0x8
10006480:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006486:	50                   	push   eax
10006487:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000648a:	e8 fc ff ff ff       	call   1000648b <begin(void*)+0x924>	1000648b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000648f:	83 c4 10             	add    esp,0x10
10006492:	83 ec 08             	sub    esp,0x8
10006495:	50                   	push   eax
10006496:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006499:	e8 fc ff ff ff       	call   1000649a <begin(void*)+0x933>	1000649a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000649e:	83 c4 10             	add    esp,0x10
100064a1:	83 ec 04             	sub    esp,0x4
100064a4:	68 30 ba 00 10       	push   0x1000ba30	100064a5: R_386_32	.text
100064a9:	50                   	push   eax
100064aa:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100064ad:	e8 fc ff ff ff       	call   100064ae <begin(void*)+0x947>	100064ae: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100064b2:	83 c4 10             	add    esp,0x10
100064b5:	a0 00 00 00 00       	mov    al,ds:0x0	100064b6: R_386_32	createNewUserMode
100064ba:	83 f0 01             	xor    eax,0x1
100064bd:	84 c0                	test   al,al
100064bf:	0f 84 be 03 00 00    	je     10006883 <begin(void*)+0xd1c>
100064c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100064c6: R_386_32	modesel
100064ca:	89 c3                	mov    ebx,eax
100064cc:	89 c6                	mov    esi,eax
100064ce:	c1 fe 1f             	sar    esi,0x1f
100064d1:	83 ec 08             	sub    esp,0x8
100064d4:	68 3b ba 00 10       	push   0x1000ba3b	100064d5: R_386_32	.text
100064d9:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100064dc:	e8 fc ff ff ff       	call   100064dd <begin(void*)+0x976>	100064dd: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100064e1:	83 c4 10             	add    esp,0x10
100064e4:	83 ec 08             	sub    esp,0x8
100064e7:	50                   	push   eax
100064e8:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100064eb:	e8 fc ff ff ff       	call   100064ec <begin(void*)+0x985>	100064ec: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100064f0:	83 c4 10             	add    esp,0x10
100064f3:	83 ec 08             	sub    esp,0x8
100064f6:	6a 6a                	push   0x6a
100064f8:	56                   	push   esi
100064f9:	53                   	push   ebx
100064fa:	68 47 ba 00 10       	push   0x1000ba47	100064fb: R_386_32	.text
100064ff:	50                   	push   eax
10006500:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006503:	e8 fc ff ff ff       	call   10006504 <begin(void*)+0x99d>	10006504: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
10006508:	83 c4 20             	add    esp,0x20
1000650b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000650c: R_386_32	tzsel
10006510:	89 c3                	mov    ebx,eax
10006512:	89 c6                	mov    esi,eax
10006514:	c1 fe 1f             	sar    esi,0x1f
10006517:	83 ec 08             	sub    esp,0x8
1000651a:	68 9d b9 00 10       	push   0x1000b99d	1000651b: R_386_32	.text
1000651f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006522:	e8 fc ff ff ff       	call   10006523 <begin(void*)+0x9bc>	10006523: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006527:	83 c4 10             	add    esp,0x10
1000652a:	83 ec 08             	sub    esp,0x8
1000652d:	50                   	push   eax
1000652e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006531:	e8 fc ff ff ff       	call   10006532 <begin(void*)+0x9cb>	10006532: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006536:	83 c4 10             	add    esp,0x10
10006539:	83 ec 08             	sub    esp,0x8
1000653c:	6a 6a                	push   0x6a
1000653e:	56                   	push   esi
1000653f:	53                   	push   ebx
10006540:	68 4f ba 00 10       	push   0x1000ba4f	10006541: R_386_32	.text
10006545:	50                   	push   eax
10006546:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006549:	e8 fc ff ff ff       	call   1000654a <begin(void*)+0x9e3>	1000654a: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
1000654e:	83 c4 20             	add    esp,0x20
10006551:	a1 00 00 00 00       	mov    eax,ds:0x0	10006552: R_386_32	tzsel
10006556:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10006559: R_386_32	timezoneStrings
1000655d:	8d 58 01             	lea    ebx,[eax+0x1]
10006560:	83 ec 08             	sub    esp,0x8
10006563:	68 5a ba 00 10       	push   0x1000ba5a	10006564: R_386_32	.text
10006568:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000656b:	e8 fc ff ff ff       	call   1000656c <begin(void*)+0xa05>	1000656c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006570:	83 c4 10             	add    esp,0x10
10006573:	83 ec 04             	sub    esp,0x4
10006576:	53                   	push   ebx
10006577:	50                   	push   eax
10006578:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000657b:	e8 fc ff ff ff       	call   1000657c <begin(void*)+0xa15>	1000657c: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006580:	83 c4 10             	add    esp,0x10
10006583:	83 ec 08             	sub    esp,0x8
10006586:	68 6f ba 00 10       	push   0x1000ba6f	10006587: R_386_32	.text
1000658b:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000658e:	e8 fc ff ff ff       	call   1000658f <begin(void*)+0xa28>	1000658f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006593:	83 c4 10             	add    esp,0x10
10006596:	83 ec 04             	sub    esp,0x4
10006599:	68 00 00 00 00       	push   0x0	1000659a: R_386_32	currName
1000659e:	50                   	push   eax
1000659f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100065a2:	e8 fc ff ff ff       	call   100065a3 <begin(void*)+0xa3c>	100065a3: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100065a7:	83 c4 10             	add    esp,0x10
100065aa:	83 ec 08             	sub    esp,0x8
100065ad:	68 81 ba 00 10       	push   0x1000ba81	100065ae: R_386_32	.text
100065b2:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100065b5:	e8 fc ff ff ff       	call   100065b6 <begin(void*)+0xa4f>	100065b6: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100065ba:	83 c4 10             	add    esp,0x10
100065bd:	83 ec 04             	sub    esp,0x4
100065c0:	68 00 00 00 00       	push   0x0	100065c1: R_386_32	currComp
100065c5:	50                   	push   eax
100065c6:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100065c9:	e8 fc ff ff ff       	call   100065ca <begin(void*)+0xa63>	100065ca: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100065ce:	83 c4 10             	add    esp,0x10
100065d1:	83 ec 08             	sub    esp,0x8
100065d4:	68 96 ba 00 10       	push   0x1000ba96	100065d5: R_386_32	.text
100065d9:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100065dc:	e8 fc ff ff ff       	call   100065dd <begin(void*)+0xa76>	100065dd: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100065e1:	83 c4 10             	add    esp,0x10
100065e4:	83 ec 04             	sub    esp,0x4
100065e7:	68 00 00 00 00       	push   0x0	100065e8: R_386_32	pkeybuf
100065ec:	50                   	push   eax
100065ed:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100065f0:	e8 fc ff ff ff       	call   100065f1 <begin(void*)+0xa8a>	100065f1: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100065f5:	83 c4 10             	add    esp,0x10
100065f8:	83 ec 08             	sub    esp,0x8
100065fb:	68 ae ba 00 10       	push   0x1000baae	100065fc: R_386_32	.text
10006600:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006603:	e8 fc ff ff ff       	call   10006604 <begin(void*)+0xa9d>	10006604: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006608:	83 c4 10             	add    esp,0x10
1000660b:	83 ec 08             	sub    esp,0x8
1000660e:	50                   	push   eax
1000660f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006612:	e8 fc ff ff ff       	call   10006613 <begin(void*)+0xaac>	10006613: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006617:	83 c4 10             	add    esp,0x10
1000661a:	83 ec 04             	sub    esp,0x4
1000661d:	68 c4 ba 00 10       	push   0x1000bac4	1000661e: R_386_32	.text
10006622:	50                   	push   eax
10006623:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006626:	e8 fc ff ff ff       	call   10006627 <begin(void*)+0xac0>	10006627: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000662b:	83 c4 10             	add    esp,0x10
1000662e:	83 ec 08             	sub    esp,0x8
10006631:	68 c8 ba 00 10       	push   0x1000bac8	10006632: R_386_32	.text
10006636:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006639:	e8 fc ff ff ff       	call   1000663a <begin(void*)+0xad3>	1000663a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000663e:	83 c4 10             	add    esp,0x10
10006641:	83 ec 08             	sub    esp,0x8
10006644:	50                   	push   eax
10006645:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006648:	e8 fc ff ff ff       	call   10006649 <begin(void*)+0xae2>	10006649: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000664d:	83 c4 10             	add    esp,0x10
10006650:	83 ec 04             	sub    esp,0x4
10006653:	68 c4 ba 00 10       	push   0x1000bac4	10006654: R_386_32	.text
10006658:	50                   	push   eax
10006659:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000665c:	e8 fc ff ff ff       	call   1000665d <begin(void*)+0xaf6>	1000665d: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006661:	83 c4 10             	add    esp,0x10
10006664:	83 ec 08             	sub    esp,0x8
10006667:	68 df ba 00 10       	push   0x1000badf	10006668: R_386_32	.text
1000666c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000666f:	e8 fc ff ff ff       	call   10006670 <begin(void*)+0xb09>	10006670: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006674:	83 c4 10             	add    esp,0x10
10006677:	83 ec 08             	sub    esp,0x8
1000667a:	50                   	push   eax
1000667b:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000667e:	e8 fc ff ff ff       	call   1000667f <begin(void*)+0xb18>	1000667f: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006683:	83 c4 10             	add    esp,0x10
10006686:	83 ec 04             	sub    esp,0x4
10006689:	68 c4 ba 00 10       	push   0x1000bac4	1000668a: R_386_32	.text
1000668e:	50                   	push   eax
1000668f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006692:	e8 fc ff ff ff       	call   10006693 <begin(void*)+0xb2c>	10006693: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006697:	83 c4 10             	add    esp,0x10
1000669a:	83 ec 08             	sub    esp,0x8
1000669d:	68 f5 ba 00 10       	push   0x1000baf5	1000669e: R_386_32	.text
100066a2:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100066a5:	e8 fc ff ff ff       	call   100066a6 <begin(void*)+0xb3f>	100066a6: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100066aa:	83 c4 10             	add    esp,0x10
100066ad:	83 ec 08             	sub    esp,0x8
100066b0:	50                   	push   eax
100066b1:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100066b4:	e8 fc ff ff ff       	call   100066b5 <begin(void*)+0xb4e>	100066b5: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100066b9:	83 c4 10             	add    esp,0x10
100066bc:	83 ec 04             	sub    esp,0x4
100066bf:	68 c4 ba 00 10       	push   0x1000bac4	100066c0: R_386_32	.text
100066c4:	50                   	push   eax
100066c5:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100066c8:	e8 fc ff ff ff       	call   100066c9 <begin(void*)+0xb62>	100066c9: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100066cd:	83 c4 10             	add    esp,0x10
100066d0:	83 ec 08             	sub    esp,0x8
100066d3:	68 0b bb 00 10       	push   0x1000bb0b	100066d4: R_386_32	.text
100066d8:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100066db:	e8 fc ff ff ff       	call   100066dc <begin(void*)+0xb75>	100066dc: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100066e0:	83 c4 10             	add    esp,0x10
100066e3:	83 ec 08             	sub    esp,0x8
100066e6:	50                   	push   eax
100066e7:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100066ea:	e8 fc ff ff ff       	call   100066eb <begin(void*)+0xb84>	100066eb: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100066ef:	83 c4 10             	add    esp,0x10
100066f2:	83 ec 04             	sub    esp,0x4
100066f5:	68 c4 ba 00 10       	push   0x1000bac4	100066f6: R_386_32	.text
100066fa:	50                   	push   eax
100066fb:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100066fe:	e8 fc ff ff ff       	call   100066ff <begin(void*)+0xb98>	100066ff: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006703:	83 c4 10             	add    esp,0x10
10006706:	83 ec 08             	sub    esp,0x8
10006709:	68 22 bb 00 10       	push   0x1000bb22	1000670a: R_386_32	.text
1000670e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006711:	e8 fc ff ff ff       	call   10006712 <begin(void*)+0xbab>	10006712: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006716:	83 c4 10             	add    esp,0x10
10006719:	83 ec 04             	sub    esp,0x4
1000671c:	68 3c bb 00 10       	push   0x1000bb3c	1000671d: R_386_32	.text
10006721:	50                   	push   eax
10006722:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006725:	e8 fc ff ff ff       	call   10006726 <begin(void*)+0xbbf>	10006726: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000672a:	83 c4 10             	add    esp,0x10
1000672d:	83 ec 08             	sub    esp,0x8
10006730:	68 5c bb 00 10       	push   0x1000bb5c	10006731: R_386_32	.text
10006735:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006738:	e8 fc ff ff ff       	call   10006739 <begin(void*)+0xbd2>	10006739: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000673d:	83 c4 10             	add    esp,0x10
10006740:	83 ec 04             	sub    esp,0x4
10006743:	68 77 bb 00 10       	push   0x1000bb77	10006744: R_386_32	.text
10006748:	50                   	push   eax
10006749:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000674c:	e8 fc ff ff ff       	call   1000674d <begin(void*)+0xbe6>	1000674d: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006751:	83 c4 10             	add    esp,0x10
10006754:	83 ec 08             	sub    esp,0x8
10006757:	68 85 bb 00 10       	push   0x1000bb85	10006758: R_386_32	.text
1000675c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000675f:	e8 fc ff ff ff       	call   10006760 <begin(void*)+0xbf9>	10006760: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006764:	83 c4 10             	add    esp,0x10
10006767:	83 ec 04             	sub    esp,0x4
1000676a:	68 a0 bb 00 10       	push   0x1000bba0	1000676b: R_386_32	.text
1000676f:	50                   	push   eax
10006770:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006773:	e8 fc ff ff ff       	call   10006774 <begin(void*)+0xc0d>	10006774: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006778:	83 c4 10             	add    esp,0x10
1000677b:	83 ec 08             	sub    esp,0x8
1000677e:	68 cc bb 00 10       	push   0x1000bbcc	1000677f: R_386_32	.text
10006783:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006786:	e8 fc ff ff ff       	call   10006787 <begin(void*)+0xc20>	10006787: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000678b:	83 c4 10             	add    esp,0x10
1000678e:	83 ec 04             	sub    esp,0x4
10006791:	68 a0 bb 00 10       	push   0x1000bba0	10006792: R_386_32	.text
10006796:	50                   	push   eax
10006797:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000679a:	e8 fc ff ff ff       	call   1000679b <begin(void*)+0xc34>	1000679b: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000679f:	83 c4 10             	add    esp,0x10
100067a2:	83 ec 08             	sub    esp,0x8
100067a5:	68 e6 bb 00 10       	push   0x1000bbe6	100067a6: R_386_32	.text
100067aa:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100067ad:	e8 fc ff ff ff       	call   100067ae <begin(void*)+0xc47>	100067ae: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100067b2:	83 c4 10             	add    esp,0x10
100067b5:	83 ec 04             	sub    esp,0x4
100067b8:	68 a0 bb 00 10       	push   0x1000bba0	100067b9: R_386_32	.text
100067bd:	50                   	push   eax
100067be:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100067c1:	e8 fc ff ff ff       	call   100067c2 <begin(void*)+0xc5b>	100067c2: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100067c6:	83 c4 10             	add    esp,0x10
100067c9:	83 ec 08             	sub    esp,0x8
100067cc:	68 ae ba 00 10       	push   0x1000baae	100067cd: R_386_32	.text
100067d1:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100067d4:	e8 fc ff ff ff       	call   100067d5 <begin(void*)+0xc6e>	100067d5: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100067d9:	83 c4 10             	add    esp,0x10
100067dc:	83 ec 08             	sub    esp,0x8
100067df:	50                   	push   eax
100067e0:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100067e3:	e8 fc ff ff ff       	call   100067e4 <begin(void*)+0xc7d>	100067e4: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100067e8:	83 c4 10             	add    esp,0x10
100067eb:	83 ec 04             	sub    esp,0x4
100067ee:	68 01 bc 00 10       	push   0x1000bc01	100067ef: R_386_32	.text
100067f3:	50                   	push   eax
100067f4:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100067f7:	e8 fc ff ff ff       	call   100067f8 <begin(void*)+0xc91>	100067f8: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100067fc:	83 c4 10             	add    esp,0x10
100067ff:	83 ec 08             	sub    esp,0x8
10006802:	68 c8 ba 00 10       	push   0x1000bac8	10006803: R_386_32	.text
10006807:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000680a:	e8 fc ff ff ff       	call   1000680b <begin(void*)+0xca4>	1000680b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000680f:	83 c4 10             	add    esp,0x10
10006812:	83 ec 08             	sub    esp,0x8
10006815:	50                   	push   eax
10006816:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006819:	e8 fc ff ff ff       	call   1000681a <begin(void*)+0xcb3>	1000681a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000681e:	83 c4 10             	add    esp,0x10
10006821:	83 ec 04             	sub    esp,0x4
10006824:	68 01 bc 00 10       	push   0x1000bc01	10006825: R_386_32	.text
10006829:	50                   	push   eax
1000682a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000682d:	e8 fc ff ff ff       	call   1000682e <begin(void*)+0xcc7>	1000682e: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006832:	83 c4 10             	add    esp,0x10
10006835:	83 ec 08             	sub    esp,0x8
10006838:	68 05 bc 00 10       	push   0x1000bc05	10006839: R_386_32	.text
1000683d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006840:	e8 fc ff ff ff       	call   10006841 <begin(void*)+0xcda>	10006841: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006845:	83 c4 10             	add    esp,0x10
10006848:	83 ec 04             	sub    esp,0x4
1000684b:	68 1f bc 00 10       	push   0x1000bc1f	1000684c: R_386_32	.text
10006850:	50                   	push   eax
10006851:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006854:	e8 fc ff ff ff       	call   10006855 <begin(void*)+0xcee>	10006855: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006859:	83 c4 10             	add    esp,0x10
1000685c:	83 ec 08             	sub    esp,0x8
1000685f:	68 3d bc 00 10       	push   0x1000bc3d	10006860: R_386_32	.text
10006864:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006867:	e8 fc ff ff ff       	call   10006868 <begin(void*)+0xd01>	10006868: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000686c:	83 c4 10             	add    esp,0x10
1000686f:	83 ec 04             	sub    esp,0x4
10006872:	68 58 bc 00 10       	push   0x1000bc58	10006873: R_386_32	.text
10006877:	50                   	push   eax
10006878:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000687b:	e8 fc ff ff ff       	call   1000687c <begin(void*)+0xd15>	1000687c: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006880:	83 c4 10             	add    esp,0x10
10006883:	83 ec 08             	sub    esp,0x8
10006886:	68 1a b9 00 10       	push   0x1000b91a	10006887: R_386_32	.text
1000688b:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006891:	50                   	push   eax
10006892:	e8 fc ff ff ff       	call   10006893 <begin(void*)+0xd2c>	10006893: R_386_PC32	strcpy
10006897:	83 c4 10             	add    esp,0x10
1000689a:	83 ec 08             	sub    esp,0x8
1000689d:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
100068a3:	50                   	push   eax
100068a4:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100068aa:	50                   	push   eax
100068ab:	e8 fc ff ff ff       	call   100068ac <begin(void*)+0xd45>	100068ac: R_386_PC32	strcat
100068b0:	83 c4 10             	add    esp,0x10
100068b3:	83 ec 08             	sub    esp,0x8
100068b6:	68 68 bc 00 10       	push   0x1000bc68	100068b7: R_386_32	.text
100068bb:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100068c1:	50                   	push   eax
100068c2:	e8 fc ff ff ff       	call   100068c3 <begin(void*)+0xd5c>	100068c3: R_386_PC32	strcat
100068c7:	83 c4 10             	add    esp,0x10
100068ca:	83 ec 08             	sub    esp,0x8
100068cd:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100068d3:	50                   	push   eax
100068d4:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100068d7:	e8 fc ff ff ff       	call   100068d8 <begin(void*)+0xd71>	100068d8: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100068dc:	83 c4 10             	add    esp,0x10
100068df:	83 ec 04             	sub    esp,0x4
100068e2:	68 00 00 00 00       	push   0x0	100068e3: R_386_32	passwhash
100068e7:	50                   	push   eax
100068e8:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100068eb:	e8 fc ff ff ff       	call   100068ec <begin(void*)+0xd85>	100068ec: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100068f0:	83 c4 10             	add    esp,0x10
100068f3:	83 ec 08             	sub    esp,0x8
100068f6:	68 1a b9 00 10       	push   0x1000b91a	100068f7: R_386_32	.text
100068fb:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006901:	50                   	push   eax
10006902:	e8 fc ff ff ff       	call   10006903 <begin(void*)+0xd9c>	10006903: R_386_PC32	strcpy
10006907:	83 c4 10             	add    esp,0x10
1000690a:	83 ec 08             	sub    esp,0x8
1000690d:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006913:	50                   	push   eax
10006914:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000691a:	50                   	push   eax
1000691b:	e8 fc ff ff ff       	call   1000691c <begin(void*)+0xdb5>	1000691c: R_386_PC32	strcat
10006920:	83 c4 10             	add    esp,0x10
10006923:	83 ec 08             	sub    esp,0x8
10006926:	68 72 bc 00 10       	push   0x1000bc72	10006927: R_386_32	.text
1000692b:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006931:	50                   	push   eax
10006932:	e8 fc ff ff ff       	call   10006933 <begin(void*)+0xdcc>	10006933: R_386_PC32	strcat
10006937:	83 c4 10             	add    esp,0x10
1000693a:	83 ec 08             	sub    esp,0x8
1000693d:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006943:	50                   	push   eax
10006944:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006947:	e8 fc ff ff ff       	call   10006948 <begin(void*)+0xde1>	10006948: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000694c:	83 c4 10             	add    esp,0x10
1000694f:	83 ec 04             	sub    esp,0x4
10006952:	68 00 00 00 00       	push   0x0	10006953: R_386_32	passwsalt
10006957:	50                   	push   eax
10006958:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000695b:	e8 fc ff ff ff       	call   1000695c <begin(void*)+0xdf5>	1000695c: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006960:	83 c4 10             	add    esp,0x10
10006963:	83 ec 08             	sub    esp,0x8
10006966:	68 1a b9 00 10       	push   0x1000b91a	10006967: R_386_32	.text
1000696b:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006971:	50                   	push   eax
10006972:	e8 fc ff ff ff       	call   10006973 <begin(void*)+0xe0c>	10006973: R_386_PC32	strcpy
10006977:	83 c4 10             	add    esp,0x10
1000697a:	83 ec 08             	sub    esp,0x8
1000697d:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006983:	50                   	push   eax
10006984:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000698a:	50                   	push   eax
1000698b:	e8 fc ff ff ff       	call   1000698c <begin(void*)+0xe25>	1000698c: R_386_PC32	strcat
10006990:	83 c4 10             	add    esp,0x10
10006993:	83 ec 08             	sub    esp,0x8
10006996:	68 78 bc 00 10       	push   0x1000bc78	10006997: R_386_32	.text
1000699b:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100069a1:	50                   	push   eax
100069a2:	e8 fc ff ff ff       	call   100069a3 <begin(void*)+0xe3c>	100069a3: R_386_PC32	strcat
100069a7:	83 c4 10             	add    esp,0x10
100069aa:	83 ec 08             	sub    esp,0x8
100069ad:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100069b3:	50                   	push   eax
100069b4:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100069b7:	e8 fc ff ff ff       	call   100069b8 <begin(void*)+0xe51>	100069b8: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100069bc:	83 c4 10             	add    esp,0x10
100069bf:	83 ec 04             	sub    esp,0x4
100069c2:	68 00 00 00 00       	push   0x0	100069c3: R_386_32	currName
100069c7:	50                   	push   eax
100069c8:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100069cb:	e8 fc ff ff ff       	call   100069cc <begin(void*)+0xe65>	100069cc: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100069d0:	83 c4 10             	add    esp,0x10
100069d3:	83 ec 08             	sub    esp,0x8
100069d6:	68 e6 b0 00 10       	push   0x1000b0e6	100069d7: R_386_32	.text
100069db:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
100069e1:	50                   	push   eax
100069e2:	e8 fc ff ff ff       	call   100069e3 <begin(void*)+0xe7c>	100069e3: R_386_PC32	strcpy
100069e7:	83 c4 10             	add    esp,0x10
100069ea:	83 ec 08             	sub    esp,0x8
100069ed:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
100069f3:	50                   	push   eax
100069f4:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
100069fa:	50                   	push   eax
100069fb:	e8 fc ff ff ff       	call   100069fc <begin(void*)+0xe95>	100069fc: R_386_PC32	strcat
10006a00:	83 c4 10             	add    esp,0x10
10006a03:	83 ec 08             	sub    esp,0x8
10006a06:	68 f0 b0 00 10       	push   0x1000b0f0	10006a07: R_386_32	.text
10006a0b:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006a11:	50                   	push   eax
10006a12:	e8 fc ff ff ff       	call   10006a13 <begin(void*)+0xeac>	10006a13: R_386_PC32	strcat
10006a17:	83 c4 10             	add    esp,0x10
10006a1a:	83 ec 08             	sub    esp,0x8
10006a1d:	68 1a b9 00 10       	push   0x1000b91a	10006a1e: R_386_32	.text
10006a22:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006a28:	50                   	push   eax
10006a29:	e8 fc ff ff ff       	call   10006a2a <begin(void*)+0xec3>	10006a2a: R_386_PC32	strcpy
10006a2e:	83 c4 10             	add    esp,0x10
10006a31:	83 ec 08             	sub    esp,0x8
10006a34:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006a3a:	50                   	push   eax
10006a3b:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006a41:	50                   	push   eax
10006a42:	e8 fc ff ff ff       	call   10006a43 <begin(void*)+0xedc>	10006a43: R_386_PC32	strcat
10006a47:	83 c4 10             	add    esp,0x10
10006a4a:	83 ec 08             	sub    esp,0x8
10006a4d:	68 85 bc 00 10       	push   0x1000bc85	10006a4e: R_386_32	.text
10006a52:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006a58:	50                   	push   eax
10006a59:	e8 fc ff ff ff       	call   10006a5a <begin(void*)+0xef3>	10006a5a: R_386_PC32	strcat
10006a5e:	83 c4 10             	add    esp,0x10
10006a61:	83 ec 08             	sub    esp,0x8
10006a64:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006a6a:	50                   	push   eax
10006a6b:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006a6e:	e8 fc ff ff ff       	call   10006a6f <begin(void*)+0xf08>	10006a6f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006a73:	83 c4 10             	add    esp,0x10
10006a76:	83 ec 04             	sub    esp,0x4
10006a79:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
10006a7f:	52                   	push   edx
10006a80:	50                   	push   eax
10006a81:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006a84:	e8 fc ff ff ff       	call   10006a85 <begin(void*)+0xf1e>	10006a85: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006a89:	83 c4 10             	add    esp,0x10
10006a8c:	83 ec 08             	sub    esp,0x8
10006a8f:	68 e6 b0 00 10       	push   0x1000b0e6	10006a90: R_386_32	.text
10006a94:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006a9a:	50                   	push   eax
10006a9b:	e8 fc ff ff ff       	call   10006a9c <begin(void*)+0xf35>	10006a9c: R_386_PC32	strcpy
10006aa0:	83 c4 10             	add    esp,0x10
10006aa3:	83 ec 08             	sub    esp,0x8
10006aa6:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006aac:	50                   	push   eax
10006aad:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006ab3:	50                   	push   eax
10006ab4:	e8 fc ff ff ff       	call   10006ab5 <begin(void*)+0xf4e>	10006ab5: R_386_PC32	strcat
10006ab9:	83 c4 10             	add    esp,0x10
10006abc:	83 ec 08             	sub    esp,0x8
10006abf:	68 f9 b0 00 10       	push   0x1000b0f9	10006ac0: R_386_32	.text
10006ac4:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006aca:	50                   	push   eax
10006acb:	e8 fc ff ff ff       	call   10006acc <begin(void*)+0xf65>	10006acc: R_386_PC32	strcat
10006ad0:	83 c4 10             	add    esp,0x10
10006ad3:	83 ec 08             	sub    esp,0x8
10006ad6:	68 1a b9 00 10       	push   0x1000b91a	10006ad7: R_386_32	.text
10006adb:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006ae1:	50                   	push   eax
10006ae2:	e8 fc ff ff ff       	call   10006ae3 <begin(void*)+0xf7c>	10006ae3: R_386_PC32	strcpy
10006ae7:	83 c4 10             	add    esp,0x10
10006aea:	83 ec 08             	sub    esp,0x8
10006aed:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006af3:	50                   	push   eax
10006af4:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006afa:	50                   	push   eax
10006afb:	e8 fc ff ff ff       	call   10006afc <begin(void*)+0xf95>	10006afc: R_386_PC32	strcat
10006b00:	83 c4 10             	add    esp,0x10
10006b03:	83 ec 08             	sub    esp,0x8
10006b06:	68 8e bc 00 10       	push   0x1000bc8e	10006b07: R_386_32	.text
10006b0b:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006b11:	50                   	push   eax
10006b12:	e8 fc ff ff ff       	call   10006b13 <begin(void*)+0xfac>	10006b13: R_386_PC32	strcat
10006b17:	83 c4 10             	add    esp,0x10
10006b1a:	83 ec 08             	sub    esp,0x8
10006b1d:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006b23:	50                   	push   eax
10006b24:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006b27:	e8 fc ff ff ff       	call   10006b28 <begin(void*)+0xfc1>	10006b28: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006b2c:	83 c4 10             	add    esp,0x10
10006b2f:	83 ec 04             	sub    esp,0x4
10006b32:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
10006b38:	52                   	push   edx
10006b39:	50                   	push   eax
10006b3a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006b3d:	e8 fc ff ff ff       	call   10006b3e <begin(void*)+0xfd7>	10006b3e: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006b42:	83 c4 10             	add    esp,0x10
10006b45:	83 ec 08             	sub    esp,0x8
10006b48:	68 e6 b0 00 10       	push   0x1000b0e6	10006b49: R_386_32	.text
10006b4d:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006b53:	50                   	push   eax
10006b54:	e8 fc ff ff ff       	call   10006b55 <begin(void*)+0xfee>	10006b55: R_386_PC32	strcpy
10006b59:	83 c4 10             	add    esp,0x10
10006b5c:	83 ec 08             	sub    esp,0x8
10006b5f:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006b65:	50                   	push   eax
10006b66:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006b6c:	50                   	push   eax
10006b6d:	e8 fc ff ff ff       	call   10006b6e <begin(void*)+0x1007>	10006b6e: R_386_PC32	strcat
10006b72:	83 c4 10             	add    esp,0x10
10006b75:	83 ec 08             	sub    esp,0x8
10006b78:	68 04 b1 00 10       	push   0x1000b104	10006b79: R_386_32	.text
10006b7d:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006b83:	50                   	push   eax
10006b84:	e8 fc ff ff ff       	call   10006b85 <begin(void*)+0x101e>	10006b85: R_386_PC32	strcat
10006b89:	83 c4 10             	add    esp,0x10
10006b8c:	83 ec 08             	sub    esp,0x8
10006b8f:	68 1a b9 00 10       	push   0x1000b91a	10006b90: R_386_32	.text
10006b94:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006b9a:	50                   	push   eax
10006b9b:	e8 fc ff ff ff       	call   10006b9c <begin(void*)+0x1035>	10006b9c: R_386_PC32	strcpy
10006ba0:	83 c4 10             	add    esp,0x10
10006ba3:	83 ec 08             	sub    esp,0x8
10006ba6:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006bac:	50                   	push   eax
10006bad:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006bb3:	50                   	push   eax
10006bb4:	e8 fc ff ff ff       	call   10006bb5 <begin(void*)+0x104e>	10006bb5: R_386_PC32	strcat
10006bb9:	83 c4 10             	add    esp,0x10
10006bbc:	83 ec 08             	sub    esp,0x8
10006bbf:	68 99 bc 00 10       	push   0x1000bc99	10006bc0: R_386_32	.text
10006bc4:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006bca:	50                   	push   eax
10006bcb:	e8 fc ff ff ff       	call   10006bcc <begin(void*)+0x1065>	10006bcc: R_386_PC32	strcat
10006bd0:	83 c4 10             	add    esp,0x10
10006bd3:	83 ec 08             	sub    esp,0x8
10006bd6:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006bdc:	50                   	push   eax
10006bdd:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006be0:	e8 fc ff ff ff       	call   10006be1 <begin(void*)+0x107a>	10006be1: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006be5:	83 c4 10             	add    esp,0x10
10006be8:	83 ec 04             	sub    esp,0x4
10006beb:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
10006bf1:	52                   	push   edx
10006bf2:	50                   	push   eax
10006bf3:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006bf6:	e8 fc ff ff ff       	call   10006bf7 <begin(void*)+0x1090>	10006bf7: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006bfb:	83 c4 10             	add    esp,0x10
10006bfe:	83 ec 08             	sub    esp,0x8
10006c01:	68 e6 b0 00 10       	push   0x1000b0e6	10006c02: R_386_32	.text
10006c06:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006c0c:	50                   	push   eax
10006c0d:	e8 fc ff ff ff       	call   10006c0e <begin(void*)+0x10a7>	10006c0e: R_386_PC32	strcpy
10006c12:	83 c4 10             	add    esp,0x10
10006c15:	83 ec 08             	sub    esp,0x8
10006c18:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006c1e:	50                   	push   eax
10006c1f:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006c25:	50                   	push   eax
10006c26:	e8 fc ff ff ff       	call   10006c27 <begin(void*)+0x10c0>	10006c27: R_386_PC32	strcat
10006c2b:	83 c4 10             	add    esp,0x10
10006c2e:	83 ec 08             	sub    esp,0x8
10006c31:	68 0f b1 00 10       	push   0x1000b10f	10006c32: R_386_32	.text
10006c36:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006c3c:	50                   	push   eax
10006c3d:	e8 fc ff ff ff       	call   10006c3e <begin(void*)+0x10d7>	10006c3e: R_386_PC32	strcat
10006c42:	83 c4 10             	add    esp,0x10
10006c45:	83 ec 08             	sub    esp,0x8
10006c48:	68 1a b9 00 10       	push   0x1000b91a	10006c49: R_386_32	.text
10006c4d:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006c53:	50                   	push   eax
10006c54:	e8 fc ff ff ff       	call   10006c55 <begin(void*)+0x10ee>	10006c55: R_386_PC32	strcpy
10006c59:	83 c4 10             	add    esp,0x10
10006c5c:	83 ec 08             	sub    esp,0x8
10006c5f:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006c65:	50                   	push   eax
10006c66:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006c6c:	50                   	push   eax
10006c6d:	e8 fc ff ff ff       	call   10006c6e <begin(void*)+0x1107>	10006c6e: R_386_PC32	strcat
10006c72:	83 c4 10             	add    esp,0x10
10006c75:	83 ec 08             	sub    esp,0x8
10006c78:	68 a4 bc 00 10       	push   0x1000bca4	10006c79: R_386_32	.text
10006c7d:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006c83:	50                   	push   eax
10006c84:	e8 fc ff ff ff       	call   10006c85 <begin(void*)+0x111e>	10006c85: R_386_PC32	strcat
10006c89:	83 c4 10             	add    esp,0x10
10006c8c:	83 ec 08             	sub    esp,0x8
10006c8f:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006c95:	50                   	push   eax
10006c96:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006c99:	e8 fc ff ff ff       	call   10006c9a <begin(void*)+0x1133>	10006c9a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006c9e:	83 c4 10             	add    esp,0x10
10006ca1:	83 ec 04             	sub    esp,0x4
10006ca4:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
10006caa:	52                   	push   edx
10006cab:	50                   	push   eax
10006cac:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006caf:	e8 fc ff ff ff       	call   10006cb0 <begin(void*)+0x1149>	10006cb0: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006cb4:	83 c4 10             	add    esp,0x10
10006cb7:	83 ec 08             	sub    esp,0x8
10006cba:	68 e6 b0 00 10       	push   0x1000b0e6	10006cbb: R_386_32	.text
10006cbf:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006cc5:	50                   	push   eax
10006cc6:	e8 fc ff ff ff       	call   10006cc7 <begin(void*)+0x1160>	10006cc7: R_386_PC32	strcpy
10006ccb:	83 c4 10             	add    esp,0x10
10006cce:	83 ec 08             	sub    esp,0x8
10006cd1:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006cd7:	50                   	push   eax
10006cd8:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006cde:	50                   	push   eax
10006cdf:	e8 fc ff ff ff       	call   10006ce0 <begin(void*)+0x1179>	10006ce0: R_386_PC32	strcat
10006ce4:	83 c4 10             	add    esp,0x10
10006ce7:	83 ec 08             	sub    esp,0x8
10006cea:	68 2b b1 00 10       	push   0x1000b12b	10006ceb: R_386_32	.text
10006cef:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006cf5:	50                   	push   eax
10006cf6:	e8 fc ff ff ff       	call   10006cf7 <begin(void*)+0x1190>	10006cf7: R_386_PC32	strcat
10006cfb:	83 c4 10             	add    esp,0x10
10006cfe:	83 ec 08             	sub    esp,0x8
10006d01:	68 1a b9 00 10       	push   0x1000b91a	10006d02: R_386_32	.text
10006d06:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006d0c:	50                   	push   eax
10006d0d:	e8 fc ff ff ff       	call   10006d0e <begin(void*)+0x11a7>	10006d0e: R_386_PC32	strcpy
10006d12:	83 c4 10             	add    esp,0x10
10006d15:	83 ec 08             	sub    esp,0x8
10006d18:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006d1e:	50                   	push   eax
10006d1f:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006d25:	50                   	push   eax
10006d26:	e8 fc ff ff ff       	call   10006d27 <begin(void*)+0x11c0>	10006d27: R_386_PC32	strcat
10006d2b:	83 c4 10             	add    esp,0x10
10006d2e:	83 ec 08             	sub    esp,0x8
10006d31:	68 ae bc 00 10       	push   0x1000bcae	10006d32: R_386_32	.text
10006d36:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006d3c:	50                   	push   eax
10006d3d:	e8 fc ff ff ff       	call   10006d3e <begin(void*)+0x11d7>	10006d3e: R_386_PC32	strcat
10006d42:	83 c4 10             	add    esp,0x10
10006d45:	83 ec 08             	sub    esp,0x8
10006d48:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006d4e:	50                   	push   eax
10006d4f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006d52:	e8 fc ff ff ff       	call   10006d53 <begin(void*)+0x11ec>	10006d53: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006d57:	83 c4 10             	add    esp,0x10
10006d5a:	83 ec 04             	sub    esp,0x4
10006d5d:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
10006d63:	52                   	push   edx
10006d64:	50                   	push   eax
10006d65:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006d68:	e8 fc ff ff ff       	call   10006d69 <begin(void*)+0x1202>	10006d69: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006d6d:	83 c4 10             	add    esp,0x10
10006d70:	83 ec 08             	sub    esp,0x8
10006d73:	68 e6 b0 00 10       	push   0x1000b0e6	10006d74: R_386_32	.text
10006d78:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006d7e:	50                   	push   eax
10006d7f:	e8 fc ff ff ff       	call   10006d80 <begin(void*)+0x1219>	10006d80: R_386_PC32	strcpy
10006d84:	83 c4 10             	add    esp,0x10
10006d87:	83 ec 08             	sub    esp,0x8
10006d8a:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006d90:	50                   	push   eax
10006d91:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006d97:	50                   	push   eax
10006d98:	e8 fc ff ff ff       	call   10006d99 <begin(void*)+0x1232>	10006d99: R_386_PC32	strcat
10006d9d:	83 c4 10             	add    esp,0x10
10006da0:	83 ec 08             	sub    esp,0x8
10006da3:	68 24 b1 00 10       	push   0x1000b124	10006da4: R_386_32	.text
10006da8:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006dae:	50                   	push   eax
10006daf:	e8 fc ff ff ff       	call   10006db0 <begin(void*)+0x1249>	10006db0: R_386_PC32	strcat
10006db4:	83 c4 10             	add    esp,0x10
10006db7:	83 ec 08             	sub    esp,0x8
10006dba:	68 1a b9 00 10       	push   0x1000b91a	10006dbb: R_386_32	.text
10006dbf:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006dc5:	50                   	push   eax
10006dc6:	e8 fc ff ff ff       	call   10006dc7 <begin(void*)+0x1260>	10006dc7: R_386_PC32	strcpy
10006dcb:	83 c4 10             	add    esp,0x10
10006dce:	83 ec 08             	sub    esp,0x8
10006dd1:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006dd7:	50                   	push   eax
10006dd8:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006dde:	50                   	push   eax
10006ddf:	e8 fc ff ff ff       	call   10006de0 <begin(void*)+0x1279>	10006de0: R_386_PC32	strcat
10006de4:	83 c4 10             	add    esp,0x10
10006de7:	83 ec 08             	sub    esp,0x8
10006dea:	68 b6 bc 00 10       	push   0x1000bcb6	10006deb: R_386_32	.text
10006def:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006df5:	50                   	push   eax
10006df6:	e8 fc ff ff ff       	call   10006df7 <begin(void*)+0x1290>	10006df7: R_386_PC32	strcat
10006dfb:	83 c4 10             	add    esp,0x10
10006dfe:	83 ec 08             	sub    esp,0x8
10006e01:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006e07:	50                   	push   eax
10006e08:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006e0b:	e8 fc ff ff ff       	call   10006e0c <begin(void*)+0x12a5>	10006e0c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006e10:	83 c4 10             	add    esp,0x10
10006e13:	83 ec 04             	sub    esp,0x4
10006e16:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
10006e1c:	52                   	push   edx
10006e1d:	50                   	push   eax
10006e1e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006e21:	e8 fc ff ff ff       	call   10006e22 <begin(void*)+0x12bb>	10006e22: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006e26:	83 c4 10             	add    esp,0x10
10006e29:	83 ec 08             	sub    esp,0x8
10006e2c:	68 e6 b0 00 10       	push   0x1000b0e6	10006e2d: R_386_32	.text
10006e31:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006e37:	50                   	push   eax
10006e38:	e8 fc ff ff ff       	call   10006e39 <begin(void*)+0x12d2>	10006e39: R_386_PC32	strcpy
10006e3d:	83 c4 10             	add    esp,0x10
10006e40:	83 ec 08             	sub    esp,0x8
10006e43:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006e49:	50                   	push   eax
10006e4a:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006e50:	50                   	push   eax
10006e51:	e8 fc ff ff ff       	call   10006e52 <begin(void*)+0x12eb>	10006e52: R_386_PC32	strcat
10006e56:	83 c4 10             	add    esp,0x10
10006e59:	83 ec 08             	sub    esp,0x8
10006e5c:	68 19 b1 00 10       	push   0x1000b119	10006e5d: R_386_32	.text
10006e61:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006e67:	50                   	push   eax
10006e68:	e8 fc ff ff ff       	call   10006e69 <begin(void*)+0x1302>	10006e69: R_386_PC32	strcat
10006e6d:	83 c4 10             	add    esp,0x10
10006e70:	83 ec 08             	sub    esp,0x8
10006e73:	68 1a b9 00 10       	push   0x1000b91a	10006e74: R_386_32	.text
10006e78:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006e7e:	50                   	push   eax
10006e7f:	e8 fc ff ff ff       	call   10006e80 <begin(void*)+0x1319>	10006e80: R_386_PC32	strcpy
10006e84:	83 c4 10             	add    esp,0x10
10006e87:	83 ec 08             	sub    esp,0x8
10006e8a:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006e90:	50                   	push   eax
10006e91:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006e97:	50                   	push   eax
10006e98:	e8 fc ff ff ff       	call   10006e99 <begin(void*)+0x1332>	10006e99: R_386_PC32	strcat
10006e9d:	83 c4 10             	add    esp,0x10
10006ea0:	83 ec 08             	sub    esp,0x8
10006ea3:	68 bd bc 00 10       	push   0x1000bcbd	10006ea4: R_386_32	.text
10006ea8:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006eae:	50                   	push   eax
10006eaf:	e8 fc ff ff ff       	call   10006eb0 <begin(void*)+0x1349>	10006eb0: R_386_PC32	strcat
10006eb4:	83 c4 10             	add    esp,0x10
10006eb7:	83 ec 08             	sub    esp,0x8
10006eba:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006ec0:	50                   	push   eax
10006ec1:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006ec4:	e8 fc ff ff ff       	call   10006ec5 <begin(void*)+0x135e>	10006ec5: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006ec9:	83 c4 10             	add    esp,0x10
10006ecc:	83 ec 04             	sub    esp,0x4
10006ecf:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
10006ed5:	52                   	push   edx
10006ed6:	50                   	push   eax
10006ed7:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006eda:	e8 fc ff ff ff       	call   10006edb <begin(void*)+0x1374>	10006edb: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006edf:	83 c4 10             	add    esp,0x10
10006ee2:	83 ec 0c             	sub    esp,0xc
10006ee5:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006ee8:	e8 fc ff ff ff       	call   10006ee9 <begin(void*)+0x1382>	10006ee9: R_386_PC32	CmClose(Reghive_Tag*)
10006eed:	83 c4 10             	add    esp,0x10
10006ef0:	a0 00 00 00 00       	mov    al,ds:0x0	10006ef1: R_386_32	createNewUserMode
10006ef5:	84 c0                	test   al,al
10006ef7:	0f 85 4c 08 00 00    	jne    10007749 <begin(void*)+0x1be2>
10006efd:	a1 00 00 00 00       	mov    eax,ds:0x0	10006efe: R_386_32	computer
10006f02:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
10006f08:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f09: R_386_32	computer
10006f0d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10006f13:	8b 00                	mov    eax,DWORD PTR [eax]
10006f15:	83 c0 24             	add    eax,0x24
10006f18:	8b 00                	mov    eax,DWORD PTR [eax]
10006f1a:	83 ec 0c             	sub    esp,0xc
10006f1d:	52                   	push   edx
10006f1e:	ff d0                	call   eax
10006f20:	83 c4 10             	add    esp,0x10
10006f23:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10006f26:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f27: R_386_32	tzsel
10006f2b:	83 ec 0c             	sub    esp,0xc
10006f2e:	50                   	push   eax
10006f2f:	e8 fc ff ff ff       	call   10006f30 <begin(void*)+0x13c9>	10006f30: R_386_PC32	KeSetTimezone(int)
10006f34:	83 c4 10             	add    esp,0x10
10006f37:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f38: R_386_32	computer
10006f3c:	8b 88 58 01 00 00    	mov    ecx,DWORD PTR [eax+0x158]
10006f42:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
10006f45:	ba 00 00 00 00       	mov    edx,0x0
10006f4a:	83 ec 04             	sub    esp,0x4
10006f4d:	52                   	push   edx
10006f4e:	50                   	push   eax
10006f4f:	51                   	push   ecx
10006f50:	e8 fc ff ff ff       	call   10006f51 <begin(void*)+0x13ea>	10006f51: R_386_PC32	Clock::setTimeInSecondsLocal(unsigned long long)
10006f55:	83 c4 10             	add    esp,0x10
10006f58:	83 ec 0c             	sub    esp,0xc
10006f5b:	68 cc bc 00 10       	push   0x1000bccc	10006f5c: R_386_32	.text
10006f60:	e8 fc ff ff ff       	call   10006f61 <begin(void*)+0x13fa>	10006f61: R_386_PC32	Dbg::kprintf(char const*, ...)
10006f65:	83 c4 10             	add    esp,0x10
10006f68:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f69: R_386_32	term
10006f6d:	83 ec 0c             	sub    esp,0xc
10006f70:	50                   	push   eax
10006f71:	e8 fc ff ff ff       	call   10006f72 <begin(void*)+0x140b>	10006f72: R_386_PC32	setActiveTerminal(VgaText*)
10006f76:	83 c4 10             	add    esp,0x10
10006f79:	e8 fc ff ff ff       	call   10006f7a <begin(void*)+0x1413>	10006f7a: R_386_PC32	drawBootScreen()
10006f7e:	83 ec 0c             	sub    esp,0xc
10006f81:	68 4d b7 00 10       	push   0x1000b74d	10006f82: R_386_32	.text
10006f86:	6a 0d                	push   0xd
10006f88:	6a 32                	push   0x32
10006f8a:	6a 05                	push   0x5
10006f8c:	6a 16                	push   0x16
10006f8e:	e8 fc ff ff ff       	call   10006f8f <begin(void*)+0x1428>	10006f8f: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10006f93:	83 c4 20             	add    esp,0x20
10006f96:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f97: R_386_32	term
10006f9b:	83 ec 04             	sub    esp,0x4
10006f9e:	6a 08                	push   0x8
10006fa0:	6a 18                	push   0x18
10006fa2:	50                   	push   eax
10006fa3:	e8 fc ff ff ff       	call   10006fa4 <begin(void*)+0x143d>	10006fa4: R_386_PC32	VgaText::setCursor(int, int)
10006fa8:	83 c4 10             	add    esp,0x10
10006fab:	a1 00 00 00 00       	mov    eax,ds:0x0	10006fac: R_386_32	term
10006fb0:	83 ec 08             	sub    esp,0x8
10006fb3:	68 f4 bc 00 10       	push   0x1000bcf4	10006fb4: R_386_32	.text
10006fb8:	50                   	push   eax
10006fb9:	e8 fc ff ff ff       	call   10006fba <begin(void*)+0x1453>	10006fba: R_386_PC32	VgaText::puts(char const*)
10006fbe:	83 c4 10             	add    esp,0x10
10006fc1:	a1 00 00 00 00       	mov    eax,ds:0x0	10006fc2: R_386_32	term
10006fc6:	83 ec 04             	sub    esp,0x4
10006fc9:	6a 0a                	push   0xa
10006fcb:	6a 18                	push   0x18
10006fcd:	50                   	push   eax
10006fce:	e8 fc ff ff ff       	call   10006fcf <begin(void*)+0x1468>	10006fcf: R_386_PC32	VgaText::setCursor(int, int)
10006fd3:	83 c4 10             	add    esp,0x10
10006fd6:	a1 00 00 00 00       	mov    eax,ds:0x0	10006fd7: R_386_32	term
10006fdb:	83 ec 08             	sub    esp,0x8
10006fde:	68 1c bd 00 10       	push   0x1000bd1c	10006fdf: R_386_32	.text
10006fe3:	50                   	push   eax
10006fe4:	e8 fc ff ff ff       	call   10006fe5 <begin(void*)+0x147e>	10006fe5: R_386_PC32	VgaText::puts(char const*)
10006fe9:	83 c4 10             	add    esp,0x10
10006fec:	a1 00 00 00 00       	mov    eax,ds:0x0	10006fed: R_386_32	term
10006ff1:	83 ec 04             	sub    esp,0x4
10006ff4:	6a 0b                	push   0xb
10006ff6:	6a 18                	push   0x18
10006ff8:	50                   	push   eax
10006ff9:	e8 fc ff ff ff       	call   10006ffa <begin(void*)+0x1493>	10006ffa: R_386_PC32	VgaText::setCursor(int, int)
10006ffe:	83 c4 10             	add    esp,0x10
10007001:	a1 00 00 00 00       	mov    eax,ds:0x0	10007002: R_386_32	term
10007006:	83 ec 08             	sub    esp,0x8
10007009:	68 48 bd 00 10       	push   0x1000bd48	1000700a: R_386_32	.text
1000700e:	50                   	push   eax
1000700f:	e8 fc ff ff ff       	call   10007010 <begin(void*)+0x14a9>	10007010: R_386_PC32	VgaText::puts(char const*)
10007014:	83 c4 10             	add    esp,0x10
10007017:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007019: R_386_32	installKey
1000701e:	a0 00 00 00 00       	mov    al,ds:0x0	1000701f: R_386_32	installKey
10007023:	84 c0                	test   al,al
10007025:	0f 94 c0             	sete   al
10007028:	84 c0                	test   al,al
1000702a:	74 02                	je     1000702e <begin(void*)+0x14c7>
1000702c:	eb f0                	jmp    1000701e <begin(void*)+0x14b7>
1000702e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007030: R_386_32	installKey
10007035:	a1 00 00 00 00       	mov    eax,ds:0x0	10007036: R_386_32	term
1000703a:	83 ec 04             	sub    esp,0x4
1000703d:	6a 0c                	push   0xc
1000703f:	6a 18                	push   0x18
10007041:	50                   	push   eax
10007042:	e8 fc ff ff ff       	call   10007043 <begin(void*)+0x14dc>	10007043: R_386_PC32	VgaText::setCursor(int, int)
10007047:	83 c4 10             	add    esp,0x10
1000704a:	e8 fc ff ff ff       	call   1000704b <begin(void*)+0x14e4>	1000704b: R_386_PC32	KeRestart()
1000704f:	e9 5d 0e 00 00       	jmp    10007eb1 <begin(void*)+0x234a>
10007054:	e8 fc ff ff ff       	call   10007055 <begin(void*)+0x14ee>	10007055: R_386_PC32	KeLoadTimezone()
10007059:	e8 fc ff ff ff       	call   1000705a <begin(void*)+0x14f3>	1000705a: R_386_PC32	KeInitialiseLocale()
1000705e:	83 ec 0c             	sub    esp,0xc
10007061:	68 dc b8 00 10       	push   0x1000b8dc	10007062: R_386_32	.text
10007066:	e8 fc ff ff ff       	call   10007067 <begin(void*)+0x1500>	10007067: R_386_PC32	CmOpen(char const*)
1000706b:	83 c4 10             	add    esp,0x10
1000706e:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10007071:	83 ec 08             	sub    esp,0x8
10007074:	68 96 ba 00 10       	push   0x1000ba96	10007075: R_386_32	.text
10007079:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000707c:	e8 fc ff ff ff       	call   1000707d <begin(void*)+0x1516>	1000707d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10007081:	83 c4 10             	add    esp,0x10
10007084:	83 ec 04             	sub    esp,0x4
10007087:	8d 95 d4 fc ff ff    	lea    edx,[ebp-0x32c]
1000708d:	52                   	push   edx
1000708e:	50                   	push   eax
1000708f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007092:	e8 fc ff ff ff       	call   10007093 <begin(void*)+0x152c>	10007093: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10007097:	83 c4 10             	add    esp,0x10
1000709a:	83 ec 08             	sub    esp,0x8
1000709d:	68 5a bd 00 10       	push   0x1000bd5a	1000709e: R_386_32	.text
100070a2:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100070a5:	e8 fc ff ff ff       	call   100070a6 <begin(void*)+0x153f>	100070a6: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100070aa:	83 c4 10             	add    esp,0x10
100070ad:	83 ec 04             	sub    esp,0x4
100070b0:	8d 95 c8 fc ff ff    	lea    edx,[ebp-0x338]
100070b6:	52                   	push   edx
100070b7:	50                   	push   eax
100070b8:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100070bb:	e8 fc ff ff ff       	call   100070bc <begin(void*)+0x1555>	100070bc: R_386_PC32	CmGetInteger(Reghive_Tag*, int, unsigned long long*)
100070c0:	83 c4 10             	add    esp,0x10
100070c3:	83 ec 0c             	sub    esp,0xc
100070c6:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100070c9:	e8 fc ff ff ff       	call   100070ca <begin(void*)+0x1563>	100070ca: R_386_PC32	CmClose(Reghive_Tag*)
100070ce:	83 c4 10             	add    esp,0x10
100070d1:	83 ec 0c             	sub    esp,0xc
100070d4:	8d 85 d4 fc ff ff    	lea    eax,[ebp-0x32c]
100070da:	50                   	push   eax
100070db:	e8 fc ff ff ff       	call   100070dc <begin(void*)+0x1575>	100070dc: R_386_PC32	checkExtendedKey(char*)
100070e0:	83 c4 10             	add    esp,0x10
100070e3:	85 c0                	test   eax,eax
100070e5:	0f 94 c0             	sete   al
100070e8:	84 c0                	test   al,al
100070ea:	0f 84 bd 01 00 00    	je     100072ad <begin(void*)+0x1746>
100070f0:	83 ec 0c             	sub    esp,0xc
100070f3:	6a 01                	push   0x1
100070f5:	e8 fc ff ff ff       	call   100070f6 <begin(void*)+0x158f>	100070f6: R_386_PC32	firstRun(bool)
100070fa:	83 c4 10             	add    esp,0x10
100070fd:	83 ec 0c             	sub    esp,0xc
10007100:	68 dc b8 00 10       	push   0x1000b8dc	10007101: R_386_32	.text
10007105:	e8 fc ff ff ff       	call   10007106 <begin(void*)+0x159f>	10007106: R_386_PC32	CmOpen(char const*)
1000710a:	83 c4 10             	add    esp,0x10
1000710d:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10007110:	83 ec 04             	sub    esp,0x4
10007113:	68 01 b9 00 10       	push   0x1000b901	10007114: R_386_32	.text
10007118:	6a 00                	push   0x0
1000711a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000711d:	e8 fc ff ff ff       	call   1000711e <begin(void*)+0x15b7>	1000711e: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10007122:	83 c4 10             	add    esp,0x10
10007125:	83 ec 08             	sub    esp,0x8
10007128:	68 01 b9 00 10       	push   0x1000b901	10007129: R_386_32	.text
1000712d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007130:	e8 fc ff ff ff       	call   10007131 <begin(void*)+0x15ca>	10007131: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10007135:	83 c4 10             	add    esp,0x10
10007138:	83 ec 08             	sub    esp,0x8
1000713b:	50                   	push   eax
1000713c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000713f:	e8 fc ff ff ff       	call   10007140 <begin(void*)+0x15d9>	10007140: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10007144:	83 c4 10             	add    esp,0x10
10007147:	83 ec 04             	sub    esp,0x4
1000714a:	68 3b b9 00 10       	push   0x1000b93b	1000714b: R_386_32	.text
1000714f:	50                   	push   eax
10007150:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007153:	e8 fc ff ff ff       	call   10007154 <begin(void*)+0x15ed>	10007154: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10007158:	83 c4 10             	add    esp,0x10
1000715b:	83 ec 08             	sub    esp,0x8
1000715e:	68 b2 b9 00 10       	push   0x1000b9b2	1000715f: R_386_32	.text
10007163:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007166:	e8 fc ff ff ff       	call   10007167 <begin(void*)+0x1600>	10007167: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000716b:	83 c4 10             	add    esp,0x10
1000716e:	83 ec 08             	sub    esp,0x8
10007171:	50                   	push   eax
10007172:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007175:	e8 fc ff ff ff       	call   10007176 <begin(void*)+0x160f>	10007176: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000717a:	83 c4 10             	add    esp,0x10
1000717d:	83 ec 04             	sub    esp,0x4
10007180:	68 cc b9 00 10       	push   0x1000b9cc	10007181: R_386_32	.text
10007185:	50                   	push   eax
10007186:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007189:	e8 fc ff ff ff       	call   1000718a <begin(void*)+0x1623>	1000718a: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000718e:	83 c4 10             	add    esp,0x10
10007191:	83 ec 08             	sub    esp,0x8
10007194:	68 96 ba 00 10       	push   0x1000ba96	10007195: R_386_32	.text
10007199:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000719c:	e8 fc ff ff ff       	call   1000719d <begin(void*)+0x1636>	1000719d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100071a1:	83 c4 10             	add    esp,0x10
100071a4:	83 ec 04             	sub    esp,0x4
100071a7:	68 00 00 00 00       	push   0x0	100071a8: R_386_32	pkeybuf
100071ac:	50                   	push   eax
100071ad:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100071b0:	e8 fc ff ff ff       	call   100071b1 <begin(void*)+0x164a>	100071b1: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100071b5:	83 c4 10             	add    esp,0x10
100071b8:	83 ec 0c             	sub    esp,0xc
100071bb:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100071be:	e8 fc ff ff ff       	call   100071bf <begin(void*)+0x1658>	100071bf: R_386_PC32	CmClose(Reghive_Tag*)
100071c3:	83 c4 10             	add    esp,0x10
100071c6:	a1 00 00 00 00       	mov    eax,ds:0x0	100071c7: R_386_32	term
100071cb:	83 ec 0c             	sub    esp,0xc
100071ce:	50                   	push   eax
100071cf:	e8 fc ff ff ff       	call   100071d0 <begin(void*)+0x1669>	100071d0: R_386_PC32	setActiveTerminal(VgaText*)
100071d4:	83 c4 10             	add    esp,0x10
100071d7:	e8 fc ff ff ff       	call   100071d8 <begin(void*)+0x1671>	100071d8: R_386_PC32	drawBootScreen()
100071dc:	83 ec 0c             	sub    esp,0xc
100071df:	68 6e bd 00 10       	push   0x1000bd6e	100071e0: R_386_32	.text
100071e4:	6a 0d                	push   0xd
100071e6:	6a 32                	push   0x32
100071e8:	6a 05                	push   0x5
100071ea:	6a 16                	push   0x16
100071ec:	e8 fc ff ff ff       	call   100071ed <begin(void*)+0x1686>	100071ed: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100071f1:	83 c4 20             	add    esp,0x20
100071f4:	a1 00 00 00 00       	mov    eax,ds:0x0	100071f5: R_386_32	term
100071f9:	83 ec 04             	sub    esp,0x4
100071fc:	6a 08                	push   0x8
100071fe:	6a 18                	push   0x18
10007200:	50                   	push   eax
10007201:	e8 fc ff ff ff       	call   10007202 <begin(void*)+0x169b>	10007202: R_386_PC32	VgaText::setCursor(int, int)
10007206:	83 c4 10             	add    esp,0x10
10007209:	a1 00 00 00 00       	mov    eax,ds:0x0	1000720a: R_386_32	term
1000720e:	83 ec 08             	sub    esp,0x8
10007211:	68 84 bd 00 10       	push   0x1000bd84	10007212: R_386_32	.text
10007216:	50                   	push   eax
10007217:	e8 fc ff ff ff       	call   10007218 <begin(void*)+0x16b1>	10007218: R_386_PC32	VgaText::puts(char const*)
1000721c:	83 c4 10             	add    esp,0x10
1000721f:	a1 00 00 00 00       	mov    eax,ds:0x0	10007220: R_386_32	term
10007224:	83 ec 04             	sub    esp,0x4
10007227:	6a 0a                	push   0xa
10007229:	6a 18                	push   0x18
1000722b:	50                   	push   eax
1000722c:	e8 fc ff ff ff       	call   1000722d <begin(void*)+0x16c6>	1000722d: R_386_PC32	VgaText::setCursor(int, int)
10007231:	83 c4 10             	add    esp,0x10
10007234:	a1 00 00 00 00       	mov    eax,ds:0x0	10007235: R_386_32	term
10007239:	83 ec 08             	sub    esp,0x8
1000723c:	68 1c bd 00 10       	push   0x1000bd1c	1000723d: R_386_32	.text
10007241:	50                   	push   eax
10007242:	e8 fc ff ff ff       	call   10007243 <begin(void*)+0x16dc>	10007243: R_386_PC32	VgaText::puts(char const*)
10007247:	83 c4 10             	add    esp,0x10
1000724a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000724b: R_386_32	term
1000724f:	83 ec 04             	sub    esp,0x4
10007252:	6a 0b                	push   0xb
10007254:	6a 18                	push   0x18
10007256:	50                   	push   eax
10007257:	e8 fc ff ff ff       	call   10007258 <begin(void*)+0x16f1>	10007258: R_386_PC32	VgaText::setCursor(int, int)
1000725c:	83 c4 10             	add    esp,0x10
1000725f:	a1 00 00 00 00       	mov    eax,ds:0x0	10007260: R_386_32	term
10007264:	83 ec 08             	sub    esp,0x8
10007267:	68 48 bd 00 10       	push   0x1000bd48	10007268: R_386_32	.text
1000726c:	50                   	push   eax
1000726d:	e8 fc ff ff ff       	call   1000726e <begin(void*)+0x1707>	1000726e: R_386_PC32	VgaText::puts(char const*)
10007272:	83 c4 10             	add    esp,0x10
10007275:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007277: R_386_32	installKey
1000727c:	a0 00 00 00 00       	mov    al,ds:0x0	1000727d: R_386_32	installKey
10007281:	84 c0                	test   al,al
10007283:	0f 94 c0             	sete   al
10007286:	84 c0                	test   al,al
10007288:	74 02                	je     1000728c <begin(void*)+0x1725>
1000728a:	eb f0                	jmp    1000727c <begin(void*)+0x1715>
1000728c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000728e: R_386_32	installKey
10007293:	a1 00 00 00 00       	mov    eax,ds:0x0	10007294: R_386_32	term
10007298:	83 ec 04             	sub    esp,0x4
1000729b:	6a 0c                	push   0xc
1000729d:	6a 18                	push   0x18
1000729f:	50                   	push   eax
100072a0:	e8 fc ff ff ff       	call   100072a1 <begin(void*)+0x173a>	100072a1: R_386_PC32	VgaText::setCursor(int, int)
100072a5:	83 c4 10             	add    esp,0x10
100072a8:	e8 fc ff ff ff       	call   100072a9 <begin(void*)+0x1742>	100072a9: R_386_PC32	KeRestart()
100072ad:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100072af: R_386_32	showSidebar
100072b4:	83 ec 0c             	sub    esp,0xc
100072b7:	68 84 01 00 00       	push   0x184
100072bc:	e8 fc ff ff ff       	call   100072bd <begin(void*)+0x1756>	100072bd: R_386_PC32	operator new(unsigned long)
100072c1:	83 c4 10             	add    esp,0x10
100072c4:	89 c3                	mov    ebx,eax
100072c6:	83 ec 08             	sub    esp,0x8
100072c9:	68 64 b3 00 10       	push   0x1000b364	100072ca: R_386_32	.text
100072ce:	53                   	push   ebx
100072cf:	e8 fc ff ff ff       	call   100072d0 <begin(void*)+0x1769>	100072d0: R_386_PC32	VgaText::VgaText(char const*)
100072d4:	83 c4 10             	add    esp,0x10
100072d7:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100072d9: R_386_32	term
100072dd:	a1 00 00 00 00       	mov    eax,ds:0x0	100072de: R_386_32	term
100072e2:	83 ec 0c             	sub    esp,0xc
100072e5:	50                   	push   eax
100072e6:	e8 fc ff ff ff       	call   100072e7 <begin(void*)+0x1780>	100072e7: R_386_PC32	setActiveTerminal(VgaText*)
100072eb:	83 c4 10             	add    esp,0x10
100072ee:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100072f5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100072fc:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100072fe: R_386_32	installKey
10007303:	83 ec 04             	sub    esp,0x4
10007306:	68 80 00 00 00       	push   0x80
1000730b:	6a 00                	push   0x0
1000730d:	8d 85 40 f9 ff ff    	lea    eax,[ebp-0x6c0]
10007313:	50                   	push   eax
10007314:	e8 fc ff ff ff       	call   10007315 <begin(void*)+0x17ae>	10007315: R_386_PC32	memset
10007319:	83 c4 10             	add    esp,0x10
1000731c:	83 ec 04             	sub    esp,0x4
1000731f:	68 80 00 00 00       	push   0x80
10007324:	6a 00                	push   0x0
10007326:	8d 85 c0 f9 ff ff    	lea    eax,[ebp-0x640]
1000732c:	50                   	push   eax
1000732d:	e8 fc ff ff ff       	call   1000732e <begin(void*)+0x17c7>	1000732e: R_386_PC32	memset
10007332:	83 c4 10             	add    esp,0x10
10007335:	83 ec 0c             	sub    esp,0xc
10007338:	68 dc b8 00 10       	push   0x1000b8dc	10007339: R_386_32	.text
1000733d:	e8 fc ff ff ff       	call   1000733e <begin(void*)+0x17d7>	1000733e: R_386_PC32	CmOpen(char const*)
10007342:	83 c4 10             	add    esp,0x10
10007345:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10007348:	83 ec 08             	sub    esp,0x8
1000734b:	68 d7 b9 00 10       	push   0x1000b9d7	1000734c: R_386_32	.text
10007350:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007353:	e8 fc ff ff ff       	call   10007354 <begin(void*)+0x17ed>	10007354: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10007358:	83 c4 10             	add    esp,0x10
1000735b:	83 ec 08             	sub    esp,0x8
1000735e:	50                   	push   eax
1000735f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007362:	e8 fc ff ff ff       	call   10007363 <begin(void*)+0x17fc>	10007363: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10007367:	83 c4 10             	add    esp,0x10
1000736a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000736d:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10007371:	0f 84 88 01 00 00    	je     100074ff <begin(void*)+0x1998>
10007377:	83 ec 04             	sub    esp,0x4
1000737a:	6a 50                	push   0x50
1000737c:	6a 00                	push   0x0
1000737e:	8d 85 a0 f8 ff ff    	lea    eax,[ebp-0x760]
10007384:	50                   	push   eax
10007385:	e8 fc ff ff ff       	call   10007386 <begin(void*)+0x181f>	10007386: R_386_PC32	memset
1000738a:	83 c4 10             	add    esp,0x10
1000738d:	83 ec 04             	sub    esp,0x4
10007390:	8d 85 a0 f8 ff ff    	lea    eax,[ebp-0x760]
10007396:	50                   	push   eax
10007397:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000739a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000739d:	e8 fc ff ff ff       	call   1000739e <begin(void*)+0x1837>	1000739e: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
100073a2:	83 c4 10             	add    esp,0x10
100073a5:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
100073a8:	83 7d 98 4e          	cmp    DWORD PTR [ebp-0x68],0x4e
100073ac:	0f 85 34 01 00 00    	jne    100074e6 <begin(void*)+0x197f>
100073b2:	83 ec 0c             	sub    esp,0xc
100073b5:	6a 50                	push   0x50
100073b7:	e8 fc ff ff ff       	call   100073b8 <begin(void*)+0x1851>	100073b8: R_386_PC32	malloc
100073bc:	83 c4 10             	add    esp,0x10
100073bf:	89 c2                	mov    edx,eax
100073c1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100073c4:	89 94 85 c0 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x640],edx
100073cb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100073ce:	8b 84 85 c0 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x640]
100073d5:	83 ec 08             	sub    esp,0x8
100073d8:	8d 95 a0 f8 ff ff    	lea    edx,[ebp-0x760]
100073de:	52                   	push   edx
100073df:	50                   	push   eax
100073e0:	e8 fc ff ff ff       	call   100073e1 <begin(void*)+0x187a>	100073e1: R_386_PC32	strcpy
100073e5:	83 c4 10             	add    esp,0x10
100073e8:	83 ec 08             	sub    esp,0x8
100073eb:	68 1a b9 00 10       	push   0x1000b91a	100073ec: R_386_32	.text
100073f0:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
100073f6:	50                   	push   eax
100073f7:	e8 fc ff ff ff       	call   100073f8 <begin(void*)+0x1891>	100073f8: R_386_PC32	strcpy
100073fc:	83 c4 10             	add    esp,0x10
100073ff:	83 ec 08             	sub    esp,0x8
10007402:	8d 85 a0 f8 ff ff    	lea    eax,[ebp-0x760]
10007408:	50                   	push   eax
10007409:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
1000740f:	50                   	push   eax
10007410:	e8 fc ff ff ff       	call   10007411 <begin(void*)+0x18aa>	10007411: R_386_PC32	strcat
10007415:	83 c4 10             	add    esp,0x10
10007418:	83 ec 08             	sub    esp,0x8
1000741b:	68 78 bc 00 10       	push   0x1000bc78	1000741c: R_386_32	.text
10007420:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10007426:	50                   	push   eax
10007427:	e8 fc ff ff ff       	call   10007428 <begin(void*)+0x18c1>	10007428: R_386_PC32	strcat
1000742c:	83 c4 10             	add    esp,0x10
1000742f:	83 ec 08             	sub    esp,0x8
10007432:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10007438:	50                   	push   eax
10007439:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000743c:	e8 fc ff ff ff       	call   1000743d <begin(void*)+0x18d6>	1000743d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10007441:	83 c4 10             	add    esp,0x10
10007444:	83 ec 04             	sub    esp,0x4
10007447:	8d 95 a0 f8 ff ff    	lea    edx,[ebp-0x760]
1000744d:	52                   	push   edx
1000744e:	50                   	push   eax
1000744f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007452:	e8 fc ff ff ff       	call   10007453 <begin(void*)+0x18ec>	10007453: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10007457:	83 c4 10             	add    esp,0x10
1000745a:	83 ec 0c             	sub    esp,0xc
1000745d:	6a 50                	push   0x50
1000745f:	e8 fc ff ff ff       	call   10007460 <begin(void*)+0x18f9>	10007460: R_386_PC32	malloc
10007464:	83 c4 10             	add    esp,0x10
10007467:	89 c2                	mov    edx,eax
10007469:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000746c:	89 94 85 40 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x6c0],edx
10007473:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10007476:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
1000747d:	83 ec 08             	sub    esp,0x8
10007480:	68 2b b3 00 10       	push   0x1000b32b	10007481: R_386_32	.text
10007485:	50                   	push   eax
10007486:	e8 fc ff ff ff       	call   10007487 <begin(void*)+0x1920>	10007487: R_386_PC32	strcpy
1000748b:	83 c4 10             	add    esp,0x10
1000748e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10007491:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
10007498:	83 ec 08             	sub    esp,0x8
1000749b:	8d 95 a0 f8 ff ff    	lea    edx,[ebp-0x760]
100074a1:	52                   	push   edx
100074a2:	50                   	push   eax
100074a3:	e8 fc ff ff ff       	call   100074a4 <begin(void*)+0x193d>	100074a4: R_386_PC32	strcat
100074a8:	83 c4 10             	add    esp,0x10
100074ab:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100074ae:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
100074b5:	83 ec 0c             	sub    esp,0xc
100074b8:	50                   	push   eax
100074b9:	e8 fc ff ff ff       	call   100074ba <begin(void*)+0x1953>	100074ba: R_386_PC32	strlen
100074be:	83 c4 10             	add    esp,0x10
100074c1:	83 f8 31             	cmp    eax,0x31
100074c4:	77 1d                	ja     100074e3 <begin(void*)+0x197c>
100074c6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100074c9:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
100074d0:	83 ec 08             	sub    esp,0x8
100074d3:	68 2b b3 00 10       	push   0x1000b32b	100074d4: R_386_32	.text
100074d8:	50                   	push   eax
100074d9:	e8 fc ff ff ff       	call   100074da <begin(void*)+0x1973>	100074da: R_386_PC32	strcat
100074de:	83 c4 10             	add    esp,0x10
100074e1:	eb c8                	jmp    100074ab <begin(void*)+0x1944>
100074e3:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
100074e6:	83 ec 08             	sub    esp,0x8
100074e9:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100074ec:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100074ef:	e8 fc ff ff ff       	call   100074f0 <begin(void*)+0x1989>	100074f0: R_386_PC32	CmGetNext(Reghive_Tag*, int)
100074f4:	83 c4 10             	add    esp,0x10
100074f7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100074fa:	e9 6e fe ff ff       	jmp    1000736d <begin(void*)+0x1806>
100074ff:	83 ec 0c             	sub    esp,0xc
10007502:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007505:	e8 fc ff ff ff       	call   10007506 <begin(void*)+0x199f>	10007506: R_386_PC32	CmClose(Reghive_Tag*)
1000750a:	83 c4 10             	add    esp,0x10
1000750d:	83 ec 0c             	sub    esp,0xc
10007510:	6a 50                	push   0x50
10007512:	e8 fc ff ff ff       	call   10007513 <begin(void*)+0x19ac>	10007513: R_386_PC32	malloc
10007517:	83 c4 10             	add    esp,0x10
1000751a:	89 c2                	mov    edx,eax
1000751c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000751f:	89 94 85 40 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x6c0],edx
10007526:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10007529:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
10007530:	83 ec 08             	sub    esp,0x8
10007533:	68 a8 bd 00 10       	push   0x1000bda8	10007534: R_386_32	.text
10007538:	50                   	push   eax
10007539:	e8 fc ff ff ff       	call   1000753a <begin(void*)+0x19d3>	1000753a: R_386_PC32	strcpy
1000753e:	83 c4 10             	add    esp,0x10
10007541:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10007544:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10007546: R_386_32	guiKeyboardHandler
	1000754a: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
1000754e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007550: R_386_32	installKey
10007555:	e8 fc ff ff ff       	call   10007556 <begin(void*)+0x19ef>	10007556: R_386_PC32	drawBootScreen()
1000755a:	83 ec 0c             	sub    esp,0xc
1000755d:	68 db bd 00 10       	push   0x1000bddb	1000755e: R_386_32	.text
10007562:	6a 10                	push   0x10
10007564:	6a 39                	push   0x39
10007566:	6a 03                	push   0x3
10007568:	6a 0c                	push   0xc
1000756a:	e8 fc ff ff ff       	call   1000756b <begin(void*)+0x1a04>	1000756b: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000756f:	83 c4 20             	add    esp,0x20
10007572:	a1 00 00 00 00       	mov    eax,ds:0x0	10007573: R_386_32	term
10007577:	83 ec 04             	sub    esp,0x4
1000757a:	6a 06                	push   0x6
1000757c:	6a 0e                	push   0xe
1000757e:	50                   	push   eax
1000757f:	e8 fc ff ff ff       	call   10007580 <begin(void*)+0x1a19>	10007580: R_386_PC32	VgaText::setCursor(int, int)
10007584:	83 c4 10             	add    esp,0x10
10007587:	a1 00 00 00 00       	mov    eax,ds:0x0	10007588: R_386_32	term
1000758c:	6a 0f                	push   0xf
1000758e:	6a 00                	push   0x0
10007590:	68 e4 bd 00 10       	push   0x1000bde4	10007591: R_386_32	.text
10007595:	50                   	push   eax
10007596:	e8 fc ff ff ff       	call   10007597 <begin(void*)+0x1a30>	10007597: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000759b:	83 c4 10             	add    esp,0x10
1000759e:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
100075a2:	75 0c                	jne    100075b0 <begin(void*)+0x1a49>
100075a4:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100075ab:	e9 25 01 00 00       	jmp    100076d5 <begin(void*)+0x1b6e>
100075b0:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
100075b7:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100075ba:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
100075bd:	7d 63                	jge    10007622 <begin(void*)+0x1abb>
100075bf:	a1 00 00 00 00       	mov    eax,ds:0x0	100075c0: R_386_32	term
100075c4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
100075c7:	83 c2 08             	add    edx,0x8
100075ca:	83 ec 04             	sub    esp,0x4
100075cd:	52                   	push   edx
100075ce:	6a 0f                	push   0xf
100075d0:	50                   	push   eax
100075d1:	e8 fc ff ff ff       	call   100075d2 <begin(void*)+0x1a6b>	100075d2: R_386_PC32	VgaText::setCursor(int, int)
100075d6:	83 c4 10             	add    esp,0x10
100075d9:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100075db: R_386_32	term
100075df:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100075e2:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
100075e5:	75 07                	jne    100075ee <begin(void*)+0x1a87>
100075e7:	b9 00 00 00 00       	mov    ecx,0x0
100075ec:	eb 05                	jmp    100075f3 <begin(void*)+0x1a8c>
100075ee:	b9 0f 00 00 00       	mov    ecx,0xf
100075f3:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100075f6:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
100075f9:	75 07                	jne    10007602 <begin(void*)+0x1a9b>
100075fb:	ba 0f 00 00 00       	mov    edx,0xf
10007600:	eb 05                	jmp    10007607 <begin(void*)+0x1aa0>
10007602:	ba 00 00 00 00       	mov    edx,0x0
10007607:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
1000760a:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
10007611:	51                   	push   ecx
10007612:	52                   	push   edx
10007613:	50                   	push   eax
10007614:	53                   	push   ebx
10007615:	e8 fc ff ff ff       	call   10007616 <begin(void*)+0x1aaf>	10007616: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000761a:	83 c4 10             	add    esp,0x10
1000761d:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10007620:	eb 95                	jmp    100075b7 <begin(void*)+0x1a50>
10007622:	a0 00 00 00 00       	mov    al,ds:0x0	10007623: R_386_32	installKey
10007627:	84 c0                	test   al,al
10007629:	0f 94 c0             	sete   al
1000762c:	84 c0                	test   al,al
1000762e:	74 02                	je     10007632 <begin(void*)+0x1acb>
10007630:	eb f0                	jmp    10007622 <begin(void*)+0x1abb>
10007632:	a1 00 00 00 00       	mov    eax,ds:0x0	10007633: R_386_32	term
10007637:	05 82 00 00 00       	add    eax,0x82
1000763c:	83 ec 04             	sub    esp,0x4
1000763f:	6a 04                	push   0x4
10007641:	6a 00                	push   0x0
10007643:	50                   	push   eax
10007644:	e8 fc ff ff ff       	call   10007645 <begin(void*)+0x1ade>	10007645: R_386_PC32	memset
10007649:	83 c4 10             	add    esp,0x10
1000764c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000764d: R_386_32	term
10007651:	05 02 01 00 00       	add    eax,0x102
10007656:	83 ec 04             	sub    esp,0x4
10007659:	6a 04                	push   0x4
1000765b:	6a 00                	push   0x0
1000765d:	50                   	push   eax
1000765e:	e8 fc ff ff ff       	call   1000765f <begin(void*)+0x1af8>	1000765f: R_386_PC32	memset
10007663:	83 c4 10             	add    esp,0x10
10007666:	a0 00 00 00 00       	mov    al,ds:0x0	10007667: R_386_32	installKey
1000766b:	3c 01                	cmp    al,0x1
1000766d:	0f 94 c0             	sete   al
10007670:	84 c0                	test   al,al
10007672:	74 12                	je     10007686 <begin(void*)+0x1b1f>
10007674:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10007677:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
1000767b:	79 39                	jns    100076b6 <begin(void*)+0x1b4f>
1000767d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10007684:	eb 30                	jmp    100076b6 <begin(void*)+0x1b4f>
10007686:	a0 00 00 00 00       	mov    al,ds:0x0	10007687: R_386_32	installKey
1000768b:	3c 02                	cmp    al,0x2
1000768d:	0f 94 c0             	sete   al
10007690:	84 c0                	test   al,al
10007692:	74 14                	je     100076a8 <begin(void*)+0x1b41>
10007694:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10007697:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000769a:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
1000769d:	7f 17                	jg     100076b6 <begin(void*)+0x1b4f>
1000769f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100076a2:	48                   	dec    eax
100076a3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100076a6:	eb 0e                	jmp    100076b6 <begin(void*)+0x1b4f>
100076a8:	a0 00 00 00 00       	mov    al,ds:0x0	100076a9: R_386_32	installKey
100076ad:	3c 0a                	cmp    al,0xa
100076af:	0f 94 c0             	sete   al
100076b2:	84 c0                	test   al,al
100076b4:	75 1e                	jne    100076d4 <begin(void*)+0x1b6d>
100076b6:	83 ec 08             	sub    esp,0x8
100076b9:	6a 00                	push   0x0
100076bb:	68 f4 01 00 00       	push   0x1f4
100076c0:	e8 fc ff ff ff       	call   100076c1 <begin(void*)+0x1b5a>	100076c1: R_386_PC32	milliTenthSleep(unsigned long long)
100076c5:	83 c4 10             	add    esp,0x10
100076c8:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100076ca: R_386_32	installKey
100076cf:	e9 ca fe ff ff       	jmp    1000759e <begin(void*)+0x1a37>
100076d4:	90                   	nop
100076d5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100076d8:	48                   	dec    eax
100076d9:	39 45 dc             	cmp    DWORD PTR [ebp-0x24],eax
100076dc:	0f 85 af 00 00 00    	jne    10007791 <begin(void*)+0x1c2a>
100076e2:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100076e4: R_386_32	createNewUserMode
100076e9:	83 ec 0c             	sub    esp,0xc
100076ec:	6a 00                	push   0x0
100076ee:	e8 fc ff ff ff       	call   100076ef <begin(void*)+0x1b88>	100076ef: R_386_PC32	firstRun(bool)
100076f3:	83 c4 10             	add    esp,0x10
100076f6:	a0 00 00 00 00       	mov    al,ds:0x0	100076f7: R_386_32	createNewUserMode
100076fb:	83 f0 01             	xor    eax,0x1
100076fe:	84 c0                	test   al,al
10007700:	0f 84 20 e7 ff ff    	je     10005e26 <begin(void*)+0x2bf>
10007706:	a1 00 00 00 00       	mov    eax,ds:0x0	10007707: R_386_32	term
1000770b:	05 82 00 00 00       	add    eax,0x82
10007710:	83 ec 04             	sub    esp,0x4
10007713:	6a 04                	push   0x4
10007715:	6a 00                	push   0x0
10007717:	50                   	push   eax
10007718:	e8 fc ff ff ff       	call   10007719 <begin(void*)+0x1bb2>	10007719: R_386_PC32	memset
1000771d:	83 c4 10             	add    esp,0x10
10007720:	a1 00 00 00 00       	mov    eax,ds:0x0	10007721: R_386_32	term
10007725:	05 02 01 00 00       	add    eax,0x102
1000772a:	83 ec 04             	sub    esp,0x4
1000772d:	6a 04                	push   0x4
1000772f:	6a 00                	push   0x0
10007731:	50                   	push   eax
10007732:	e8 fc ff ff ff       	call   10007733 <begin(void*)+0x1bcc>	10007733: R_386_PC32	memset
10007737:	83 c4 10             	add    esp,0x10
1000773a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000773c: R_386_32	installKey
10007741:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10007744:	e9 ac fb ff ff       	jmp    100072f5 <begin(void*)+0x178e>
10007749:	90                   	nop
1000774a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000774c: R_386_32	createNewUserMode
10007751:	a1 00 00 00 00       	mov    eax,ds:0x0	10007752: R_386_32	term
10007756:	05 82 00 00 00       	add    eax,0x82
1000775b:	83 ec 04             	sub    esp,0x4
1000775e:	6a 04                	push   0x4
10007760:	6a 00                	push   0x0
10007762:	50                   	push   eax
10007763:	e8 fc ff ff ff       	call   10007764 <begin(void*)+0x1bfd>	10007764: R_386_PC32	memset
10007768:	83 c4 10             	add    esp,0x10
1000776b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000776c: R_386_32	term
10007770:	05 02 01 00 00       	add    eax,0x102
10007775:	83 ec 04             	sub    esp,0x4
10007778:	6a 04                	push   0x4
1000777a:	6a 00                	push   0x0
1000777c:	50                   	push   eax
1000777d:	e8 fc ff ff ff       	call   1000777e <begin(void*)+0x1c17>	1000777e: R_386_PC32	memset
10007782:	83 c4 10             	add    esp,0x10
10007785:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007787: R_386_32	installKey
1000778c:	e9 64 fb ff ff       	jmp    100072f5 <begin(void*)+0x178e>
10007791:	83 ec 08             	sub    esp,0x8
10007794:	68 1a b9 00 10       	push   0x1000b91a	10007795: R_386_32	.text
10007799:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
1000779f:	50                   	push   eax
100077a0:	e8 fc ff ff ff       	call   100077a1 <begin(void*)+0x1c3a>	100077a1: R_386_PC32	strcpy
100077a5:	83 c4 10             	add    esp,0x10
100077a8:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100077ab:	8b 84 85 c0 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x640]
100077b2:	83 ec 08             	sub    esp,0x8
100077b5:	50                   	push   eax
100077b6:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
100077bc:	50                   	push   eax
100077bd:	e8 fc ff ff ff       	call   100077be <begin(void*)+0x1c57>	100077be: R_386_PC32	strcat
100077c2:	83 c4 10             	add    esp,0x10
100077c5:	83 ec 08             	sub    esp,0x8
100077c8:	68 68 bc 00 10       	push   0x1000bc68	100077c9: R_386_32	.text
100077cd:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
100077d3:	50                   	push   eax
100077d4:	e8 fc ff ff ff       	call   100077d5 <begin(void*)+0x1c6e>	100077d5: R_386_PC32	strcat
100077d9:	83 c4 10             	add    esp,0x10
100077dc:	83 ec 0c             	sub    esp,0xc
100077df:	68 dc b8 00 10       	push   0x1000b8dc	100077e0: R_386_32	.text
100077e4:	e8 fc ff ff ff       	call   100077e5 <begin(void*)+0x1c7e>	100077e5: R_386_PC32	CmOpen(char const*)
100077e9:	83 c4 10             	add    esp,0x10
100077ec:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
100077ef:	83 ec 08             	sub    esp,0x8
100077f2:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
100077f8:	50                   	push   eax
100077f9:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100077fc:	e8 fc ff ff ff       	call   100077fd <begin(void*)+0x1c96>	100077fd: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10007801:	83 c4 10             	add    esp,0x10
10007804:	83 ec 04             	sub    esp,0x4
10007807:	8d 95 c2 fa ff ff    	lea    edx,[ebp-0x53e]
1000780d:	52                   	push   edx
1000780e:	50                   	push   eax
1000780f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007812:	e8 fc ff ff ff       	call   10007813 <begin(void*)+0x1cac>	10007813: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10007817:	83 c4 10             	add    esp,0x10
1000781a:	83 ec 08             	sub    esp,0x8
1000781d:	68 1a b9 00 10       	push   0x1000b91a	1000781e: R_386_32	.text
10007822:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007828:	50                   	push   eax
10007829:	e8 fc ff ff ff       	call   1000782a <begin(void*)+0x1cc3>	1000782a: R_386_PC32	strcpy
1000782e:	83 c4 10             	add    esp,0x10
10007831:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10007834:	8b 84 85 c0 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x640]
1000783b:	83 ec 08             	sub    esp,0x8
1000783e:	50                   	push   eax
1000783f:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007845:	50                   	push   eax
10007846:	e8 fc ff ff ff       	call   10007847 <begin(void*)+0x1ce0>	10007847: R_386_PC32	strcat
1000784b:	83 c4 10             	add    esp,0x10
1000784e:	83 ec 08             	sub    esp,0x8
10007851:	68 72 bc 00 10       	push   0x1000bc72	10007852: R_386_32	.text
10007856:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
1000785c:	50                   	push   eax
1000785d:	e8 fc ff ff ff       	call   1000785e <begin(void*)+0x1cf7>	1000785e: R_386_PC32	strcat
10007862:	83 c4 10             	add    esp,0x10
10007865:	83 ec 08             	sub    esp,0x8
10007868:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
1000786e:	50                   	push   eax
1000786f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007872:	e8 fc ff ff ff       	call   10007873 <begin(void*)+0x1d0c>	10007873: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10007877:	83 c4 10             	add    esp,0x10
1000787a:	83 ec 04             	sub    esp,0x4
1000787d:	8d 95 f0 f8 ff ff    	lea    edx,[ebp-0x710]
10007883:	52                   	push   edx
10007884:	50                   	push   eax
10007885:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007888:	e8 fc ff ff ff       	call   10007889 <begin(void*)+0x1d22>	10007889: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
1000788d:	83 c4 10             	add    esp,0x10
10007890:	83 ec 0c             	sub    esp,0xc
10007893:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007896:	e8 fc ff ff ff       	call   10007897 <begin(void*)+0x1d30>	10007897: R_386_PC32	CmClose(Reghive_Tag*)
1000789b:	83 c4 10             	add    esp,0x10
1000789e:	83 ec 04             	sub    esp,0x4
100078a1:	68 80 00 00 00       	push   0x80
100078a6:	6a 00                	push   0x0
100078a8:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
100078ae:	50                   	push   eax
100078af:	e8 fc ff ff ff       	call   100078b0 <begin(void*)+0x1d49>	100078b0: R_386_PC32	memset
100078b4:	83 c4 10             	add    esp,0x10
100078b7:	e8 fc ff ff ff       	call   100078b8 <begin(void*)+0x1d51>	100078b8: R_386_PC32	drawBootScreen()
100078bc:	83 ec 08             	sub    esp,0x8
100078bf:	6a 01                	push   0x1
100078c1:	68 db bd 00 10       	push   0x1000bddb	100078c2: R_386_32	.text
100078c6:	6a 10                	push   0x10
100078c8:	6a 39                	push   0x39
100078ca:	6a 03                	push   0x3
100078cc:	6a 0c                	push   0xc
100078ce:	e8 fc ff ff ff       	call   100078cf <begin(void*)+0x1d68>	100078cf: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
100078d3:	83 c4 20             	add    esp,0x20
100078d6:	a1 00 00 00 00       	mov    eax,ds:0x0	100078d7: R_386_32	term
100078db:	83 ec 04             	sub    esp,0x4
100078de:	6a 06                	push   0x6
100078e0:	6a 0e                	push   0xe
100078e2:	50                   	push   eax
100078e3:	e8 fc ff ff ff       	call   100078e4 <begin(void*)+0x1d7d>	100078e4: R_386_PC32	VgaText::setCursor(int, int)
100078e8:	83 c4 10             	add    esp,0x10
100078eb:	a1 00 00 00 00       	mov    eax,ds:0x0	100078ec: R_386_32	term
100078f0:	6a 07                	push   0x7
100078f2:	6a 00                	push   0x0
100078f4:	68 e4 bd 00 10       	push   0x1000bde4	100078f5: R_386_32	.text
100078f9:	50                   	push   eax
100078fa:	e8 fc ff ff ff       	call   100078fb <begin(void*)+0x1d94>	100078fb: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100078ff:	83 c4 10             	add    esp,0x10
10007902:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10007906:	7e 72                	jle    1000797a <begin(void*)+0x1e13>
10007908:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
1000790f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10007912:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10007915:	7d 63                	jge    1000797a <begin(void*)+0x1e13>
10007917:	a1 00 00 00 00       	mov    eax,ds:0x0	10007918: R_386_32	term
1000791c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
1000791f:	83 c2 08             	add    edx,0x8
10007922:	83 ec 04             	sub    esp,0x4
10007925:	52                   	push   edx
10007926:	6a 0f                	push   0xf
10007928:	50                   	push   eax
10007929:	e8 fc ff ff ff       	call   1000792a <begin(void*)+0x1dc3>	1000792a: R_386_PC32	VgaText::setCursor(int, int)
1000792e:	83 c4 10             	add    esp,0x10
10007931:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10007933: R_386_32	term
10007937:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
1000793a:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
1000793d:	75 07                	jne    10007946 <begin(void*)+0x1ddf>
1000793f:	b9 00 00 00 00       	mov    ecx,0x0
10007944:	eb 05                	jmp    1000794b <begin(void*)+0x1de4>
10007946:	b9 07 00 00 00       	mov    ecx,0x7
1000794b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
1000794e:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10007951:	75 07                	jne    1000795a <begin(void*)+0x1df3>
10007953:	ba 07 00 00 00       	mov    edx,0x7
10007958:	eb 05                	jmp    1000795f <begin(void*)+0x1df8>
1000795a:	ba 00 00 00 00       	mov    edx,0x0
1000795f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10007962:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
10007969:	51                   	push   ecx
1000796a:	52                   	push   edx
1000796b:	50                   	push   eax
1000796c:	53                   	push   ebx
1000796d:	e8 fc ff ff ff       	call   1000796e <begin(void*)+0x1e07>	1000796e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10007972:	83 c4 10             	add    esp,0x10
10007975:	ff 45 d0             	inc    DWORD PTR [ebp-0x30]
10007978:	eb 95                	jmp    1000790f <begin(void*)+0x1da8>
1000797a:	83 ec 0c             	sub    esp,0xc
1000797d:	68 db bd 00 10       	push   0x1000bddb	1000797e: R_386_32	.text
10007982:	6a 0b                	push   0xb
10007984:	6a 2d                	push   0x2d
10007986:	6a 0a                	push   0xa
10007988:	6a 1c                	push   0x1c
1000798a:	e8 fc ff ff ff       	call   1000798b <begin(void*)+0x1e24>	1000798b: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000798f:	83 c4 20             	add    esp,0x20
10007992:	c6 45 cf 01          	mov    BYTE PTR [ebp-0x31],0x1
10007996:	83 ec 04             	sub    esp,0x4
10007999:	8d 85 42 fb ff ff    	lea    eax,[ebp-0x4be]
1000799f:	50                   	push   eax
100079a0:	8d 85 f0 f8 ff ff    	lea    eax,[ebp-0x710]
100079a6:	50                   	push   eax
100079a7:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
100079ad:	50                   	push   eax
100079ae:	e8 fc ff ff ff       	call   100079af <begin(void*)+0x1e48>	100079af: R_386_PC32	bcrypt_hashpw
100079b3:	83 c4 10             	add    esp,0x10
100079b6:	83 ec 08             	sub    esp,0x8
100079b9:	8d 85 42 fb ff ff    	lea    eax,[ebp-0x4be]
100079bf:	50                   	push   eax
100079c0:	8d 85 c2 fa ff ff    	lea    eax,[ebp-0x53e]
100079c6:	50                   	push   eax
100079c7:	e8 fc ff ff ff       	call   100079c8 <begin(void*)+0x1e61>	100079c8: R_386_PC32	strcmp
100079cc:	83 c4 10             	add    esp,0x10
100079cf:	85 c0                	test   eax,eax
100079d1:	75 04                	jne    100079d7 <begin(void*)+0x1e70>
100079d3:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
100079d7:	83 ec 04             	sub    esp,0x4
100079da:	68 80 00 00 00       	push   0x80
100079df:	6a 00                	push   0x0
100079e1:	8d 85 42 fb ff ff    	lea    eax,[ebp-0x4be]
100079e7:	50                   	push   eax
100079e8:	e8 fc ff ff ff       	call   100079e9 <begin(void*)+0x1e82>	100079e9: R_386_PC32	memset
100079ed:	83 c4 10             	add    esp,0x10
100079f0:	80 7d cf 00          	cmp    BYTE PTR [ebp-0x31],0x0
100079f4:	0f 84 9c 02 00 00    	je     10007c96 <begin(void*)+0x212f>
100079fa:	a1 00 00 00 00       	mov    eax,ds:0x0	100079fb: R_386_32	term
100079ff:	83 ec 04             	sub    esp,0x4
10007a02:	6a 0d                	push   0xd
10007a04:	6a 1e                	push   0x1e
10007a06:	50                   	push   eax
10007a07:	e8 fc ff ff ff       	call   10007a08 <begin(void*)+0x1ea1>	10007a08: R_386_PC32	VgaText::setCursor(int, int)
10007a0c:	83 c4 10             	add    esp,0x10
10007a0f:	a1 00 00 00 00       	mov    eax,ds:0x0	10007a10: R_386_32	term
10007a14:	83 ec 08             	sub    esp,0x8
10007a17:	68 14 be 00 10       	push   0x1000be14	10007a18: R_386_32	.text
10007a1c:	50                   	push   eax
10007a1d:	e8 fc ff ff ff       	call   10007a1e <begin(void*)+0x1eb7>	10007a1e: R_386_PC32	VgaText::puts(char const*)
10007a22:	83 c4 10             	add    esp,0x10
10007a25:	a1 00 00 00 00       	mov    eax,ds:0x0	10007a26: R_386_32	term
10007a2a:	83 ec 04             	sub    esp,0x4
10007a2d:	6a 0e                	push   0xe
10007a2f:	6a 1e                	push   0x1e
10007a31:	50                   	push   eax
10007a32:	e8 fc ff ff ff       	call   10007a33 <begin(void*)+0x1ecc>	10007a33: R_386_PC32	VgaText::setCursor(int, int)
10007a37:	83 c4 10             	add    esp,0x10
10007a3a:	a1 00 00 00 00       	mov    eax,ds:0x0	10007a3b: R_386_32	term
10007a3f:	83 ec 08             	sub    esp,0x8
10007a42:	68 3e be 00 10       	push   0x1000be3e	10007a43: R_386_32	.text
10007a47:	50                   	push   eax
10007a48:	e8 fc ff ff ff       	call   10007a49 <begin(void*)+0x1ee2>	10007a49: R_386_PC32	VgaText::puts(char const*)
10007a4d:	83 c4 10             	add    esp,0x10
10007a50:	a1 00 00 00 00       	mov    eax,ds:0x0	10007a51: R_386_32	term
10007a55:	83 ec 04             	sub    esp,0x4
10007a58:	6a 10                	push   0x10
10007a5a:	6a 1e                	push   0x1e
10007a5c:	50                   	push   eax
10007a5d:	e8 fc ff ff ff       	call   10007a5e <begin(void*)+0x1ef7>	10007a5e: R_386_PC32	VgaText::setCursor(int, int)
10007a62:	83 c4 10             	add    esp,0x10
10007a65:	a1 00 00 00 00       	mov    eax,ds:0x0	10007a66: R_386_32	term
10007a6a:	6a 07                	push   0x7
10007a6c:	6a 00                	push   0x0
10007a6e:	68 34 b4 00 10       	push   0x1000b434	10007a6f: R_386_32	.text
10007a73:	50                   	push   eax
10007a74:	e8 fc ff ff ff       	call   10007a75 <begin(void*)+0x1f0e>	10007a75: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10007a79:	83 c4 10             	add    esp,0x10
10007a7c:	a1 00 00 00 00       	mov    eax,ds:0x0	10007a7d: R_386_32	term
10007a81:	83 ec 08             	sub    esp,0x8
10007a84:	6a 1e                	push   0x1e
10007a86:	50                   	push   eax
10007a87:	e8 fc ff ff ff       	call   10007a88 <begin(void*)+0x1f21>	10007a88: R_386_PC32	VgaText::setCursorX(int)
10007a8c:	83 c4 10             	add    esp,0x10
10007a8f:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
10007a96:	83 ec 0c             	sub    esp,0xc
10007a99:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007a9f:	50                   	push   eax
10007aa0:	e8 fc ff ff ff       	call   10007aa1 <begin(void*)+0x1f3a>	10007aa1: R_386_PC32	strlen
10007aa5:	83 c4 10             	add    esp,0x10
10007aa8:	89 c2                	mov    edx,eax
10007aaa:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10007aad:	39 c2                	cmp    edx,eax
10007aaf:	76 1c                	jbe    10007acd <begin(void*)+0x1f66>
10007ab1:	a1 00 00 00 00       	mov    eax,ds:0x0	10007ab2: R_386_32	term
10007ab6:	6a 07                	push   0x7
10007ab8:	6a 00                	push   0x0
10007aba:	68 60 b4 00 10       	push   0x1000b460	10007abb: R_386_32	.text
10007abf:	50                   	push   eax
10007ac0:	e8 fc ff ff ff       	call   10007ac1 <begin(void*)+0x1f5a>	10007ac1: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10007ac5:	83 c4 10             	add    esp,0x10
10007ac8:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
10007acb:	eb c9                	jmp    10007a96 <begin(void*)+0x1f2f>
10007acd:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10007acf: R_386_32	term
10007ad3:	83 ec 0c             	sub    esp,0xc
10007ad6:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007adc:	50                   	push   eax
10007add:	e8 fc ff ff ff       	call   10007ade <begin(void*)+0x1f77>	10007ade: R_386_PC32	strlen
10007ae2:	83 c4 10             	add    esp,0x10
10007ae5:	83 c0 1e             	add    eax,0x1e
10007ae8:	83 ec 04             	sub    esp,0x4
10007aeb:	6a 10                	push   0x10
10007aed:	50                   	push   eax
10007aee:	53                   	push   ebx
10007aef:	e8 fc ff ff ff       	call   10007af0 <begin(void*)+0x1f89>	10007af0: R_386_PC32	VgaText::setCursor(int, int)
10007af4:	83 c4 10             	add    esp,0x10
10007af7:	a0 00 00 00 00       	mov    al,ds:0x0	10007af8: R_386_32	installKey
10007afc:	84 c0                	test   al,al
10007afe:	0f 94 c0             	sete   al
10007b01:	84 c0                	test   al,al
10007b03:	74 02                	je     10007b07 <begin(void*)+0x1fa0>
10007b05:	eb f0                	jmp    10007af7 <begin(void*)+0x1f90>
10007b07:	a1 00 00 00 00       	mov    eax,ds:0x0	10007b08: R_386_32	term
10007b0c:	05 82 00 00 00       	add    eax,0x82
10007b11:	83 ec 04             	sub    esp,0x4
10007b14:	6a 10                	push   0x10
10007b16:	6a 00                	push   0x0
10007b18:	50                   	push   eax
10007b19:	e8 fc ff ff ff       	call   10007b1a <begin(void*)+0x1fb3>	10007b1a: R_386_PC32	memset
10007b1e:	83 c4 10             	add    esp,0x10
10007b21:	a1 00 00 00 00       	mov    eax,ds:0x0	10007b22: R_386_32	term
10007b26:	05 02 01 00 00       	add    eax,0x102
10007b2b:	83 ec 04             	sub    esp,0x4
10007b2e:	6a 10                	push   0x10
10007b30:	6a 00                	push   0x0
10007b32:	50                   	push   eax
10007b33:	e8 fc ff ff ff       	call   10007b34 <begin(void*)+0x1fcd>	10007b34: R_386_PC32	memset
10007b38:	83 c4 10             	add    esp,0x10
10007b3b:	a0 00 00 00 00       	mov    al,ds:0x0	10007b3c: R_386_32	installKey
10007b40:	3c 0a                	cmp    al,0xa
10007b42:	0f 94 c0             	sete   al
10007b45:	84 c0                	test   al,al
10007b47:	0f 84 88 00 00 00    	je     10007bd5 <begin(void*)+0x206e>
10007b4d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007b4f: R_386_32	installKey
10007b54:	83 ec 04             	sub    esp,0x4
10007b57:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10007b5d:	50                   	push   eax
10007b5e:	8d 85 f0 f8 ff ff    	lea    eax,[ebp-0x710]
10007b64:	50                   	push   eax
10007b65:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007b6b:	50                   	push   eax
10007b6c:	e8 fc ff ff ff       	call   10007b6d <begin(void*)+0x2006>	10007b6d: R_386_PC32	bcrypt_hashpw
10007b71:	83 c4 10             	add    esp,0x10
10007b74:	8d 85 f0 f8 ff ff    	lea    eax,[ebp-0x710]
10007b7a:	50                   	push   eax
10007b7b:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10007b81:	50                   	push   eax
10007b82:	8d 85 c2 fa ff ff    	lea    eax,[ebp-0x53e]
10007b88:	50                   	push   eax
10007b89:	68 58 be 00 10       	push   0x1000be58	10007b8a: R_386_32	.text
10007b8e:	e8 fc ff ff ff       	call   10007b8f <begin(void*)+0x2028>	10007b8f: R_386_PC32	Dbg::kprintf(char const*, ...)
10007b93:	83 c4 10             	add    esp,0x10
10007b96:	83 ec 08             	sub    esp,0x8
10007b99:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10007b9f:	50                   	push   eax
10007ba0:	8d 85 c2 fa ff ff    	lea    eax,[ebp-0x53e]
10007ba6:	50                   	push   eax
10007ba7:	e8 fc ff ff ff       	call   10007ba8 <begin(void*)+0x2041>	10007ba8: R_386_PC32	strcmp
10007bac:	83 c4 10             	add    esp,0x10
10007baf:	85 c0                	test   eax,eax
10007bb1:	0f 84 de 00 00 00    	je     10007c95 <begin(void*)+0x212e>
10007bb7:	83 ec 04             	sub    esp,0x4
10007bba:	68 80 00 00 00       	push   0x80
10007bbf:	6a 00                	push   0x0
10007bc1:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10007bc7:	50                   	push   eax
10007bc8:	e8 fc ff ff ff       	call   10007bc9 <begin(void*)+0x2062>	10007bc9: R_386_PC32	memset
10007bcd:	83 c4 10             	add    esp,0x10
10007bd0:	e9 b4 00 00 00       	jmp    10007c89 <begin(void*)+0x2122>
10007bd5:	a0 00 00 00 00       	mov    al,ds:0x0	10007bd6: R_386_32	installKey
10007bda:	3c 1f                	cmp    al,0x1f
10007bdc:	7e 0d                	jle    10007beb <begin(void*)+0x2084>
10007bde:	a0 00 00 00 00       	mov    al,ds:0x0	10007bdf: R_386_32	installKey
10007be3:	3c 7f                	cmp    al,0x7f
10007be5:	74 04                	je     10007beb <begin(void*)+0x2084>
10007be7:	b0 01                	mov    al,0x1
10007be9:	eb 02                	jmp    10007bed <begin(void*)+0x2086>
10007beb:	b0 00                	mov    al,0x0
10007bed:	84 c0                	test   al,al
10007bef:	74 44                	je     10007c35 <begin(void*)+0x20ce>
10007bf1:	a0 00 00 00 00       	mov    al,ds:0x0	10007bf2: R_386_32	installKey
10007bf6:	88 85 c2 fc ff ff    	mov    BYTE PTR [ebp-0x33e],al
10007bfc:	c6 85 c3 fc ff ff 00 	mov    BYTE PTR [ebp-0x33d],0x0
10007c03:	83 ec 0c             	sub    esp,0xc
10007c06:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007c0c:	50                   	push   eax
10007c0d:	e8 fc ff ff ff       	call   10007c0e <begin(void*)+0x20a7>	10007c0e: R_386_PC32	strlen
10007c12:	83 c4 10             	add    esp,0x10
10007c15:	83 f8 22             	cmp    eax,0x22
10007c18:	77 6f                	ja     10007c89 <begin(void*)+0x2122>
10007c1a:	83 ec 08             	sub    esp,0x8
10007c1d:	8d 85 c2 fc ff ff    	lea    eax,[ebp-0x33e]
10007c23:	50                   	push   eax
10007c24:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007c2a:	50                   	push   eax
10007c2b:	e8 fc ff ff ff       	call   10007c2c <begin(void*)+0x20c5>	10007c2c: R_386_PC32	strcat
10007c30:	83 c4 10             	add    esp,0x10
10007c33:	eb 54                	jmp    10007c89 <begin(void*)+0x2122>
10007c35:	a0 00 00 00 00       	mov    al,ds:0x0	10007c36: R_386_32	installKey
10007c3a:	3c 08                	cmp    al,0x8
10007c3c:	0f 94 c0             	sete   al
10007c3f:	84 c0                	test   al,al
10007c41:	74 33                	je     10007c76 <begin(void*)+0x210f>
10007c43:	83 ec 0c             	sub    esp,0xc
10007c46:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007c4c:	50                   	push   eax
10007c4d:	e8 fc ff ff ff       	call   10007c4e <begin(void*)+0x20e7>	10007c4e: R_386_PC32	strlen
10007c52:	83 c4 10             	add    esp,0x10
10007c55:	85 c0                	test   eax,eax
10007c57:	74 30                	je     10007c89 <begin(void*)+0x2122>
10007c59:	83 ec 0c             	sub    esp,0xc
10007c5c:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007c62:	50                   	push   eax
10007c63:	e8 fc ff ff ff       	call   10007c64 <begin(void*)+0x20fd>	10007c64: R_386_PC32	strlen
10007c68:	83 c4 10             	add    esp,0x10
10007c6b:	48                   	dec    eax
10007c6c:	c6 84 05 42 fa ff ff 00 	mov    BYTE PTR [ebp+eax*1-0x5be],0x0
10007c74:	eb 13                	jmp    10007c89 <begin(void*)+0x2122>
10007c76:	a0 00 00 00 00       	mov    al,ds:0x0	10007c77: R_386_32	installKey
10007c7b:	3c 1b                	cmp    al,0x1b
10007c7d:	0f 94 c0             	sete   al
10007c80:	84 c0                	test   al,al
10007c82:	74 05                	je     10007c89 <begin(void*)+0x2122>
10007c84:	e9 c5 f8 ff ff       	jmp    1000754e <begin(void*)+0x19e7>
10007c89:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007c8b: R_386_32	installKey
10007c90:	e9 5b fd ff ff       	jmp    100079f0 <begin(void*)+0x1e89>
10007c95:	90                   	nop
10007c96:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10007c98: R_386_32	guiKeyboardHandler
10007ca0:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
10007ca7:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007caa:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10007cad:	7d 69                	jge    10007d18 <begin(void*)+0x21b1>
10007caf:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007cb2:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
10007cb9:	85 c0                	test   eax,eax
10007cbb:	74 24                	je     10007ce1 <begin(void*)+0x217a>
10007cbd:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007cc0:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
10007cc7:	83 ec 0c             	sub    esp,0xc
10007cca:	50                   	push   eax
10007ccb:	e8 fc ff ff ff       	call   10007ccc <begin(void*)+0x2165>	10007ccc: R_386_PC32	free
10007cd0:	83 c4 10             	add    esp,0x10
10007cd3:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007cd6:	c7 84 85 40 f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x6c0],0x0
10007ce1:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007ce4:	8b 84 85 c0 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x640]
10007ceb:	85 c0                	test   eax,eax
10007ced:	74 24                	je     10007d13 <begin(void*)+0x21ac>
10007cef:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007cf2:	8b 84 85 c0 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x640]
10007cf9:	83 ec 0c             	sub    esp,0xc
10007cfc:	50                   	push   eax
10007cfd:	e8 fc ff ff ff       	call   10007cfe <begin(void*)+0x2197>	10007cfe: R_386_PC32	free
10007d02:	83 c4 10             	add    esp,0x10
10007d05:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007d08:	c7 84 85 c0 f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x640],0x0
10007d13:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
10007d16:	eb 8f                	jmp    10007ca7 <begin(void*)+0x2140>
10007d18:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007d1a: R_386_32	VgaText::hiddenOut
10007d1f:	83 ec 0c             	sub    esp,0xc
10007d22:	68 c4 07 00 00       	push   0x7c4
10007d27:	e8 fc ff ff ff       	call   10007d28 <begin(void*)+0x21c1>	10007d28: R_386_PC32	operator new(unsigned long)
10007d2c:	83 c4 10             	add    esp,0x10
10007d2f:	89 c3                	mov    ebx,eax
10007d31:	6a 00                	push   0x0
10007d33:	6a 00                	push   0x0
10007d35:	68 b2 b8 00 10       	push   0x1000b8b2	10007d36: R_386_32	.text
10007d3a:	53                   	push   ebx
10007d3b:	e8 fc ff ff ff       	call   10007d3c <begin(void*)+0x21d5>	10007d3c: R_386_PC32	Process::Process(char const*, Process*, char**)
10007d40:	83 c4 10             	add    esp,0x10
10007d43:	89 5d ac             	mov    DWORD PTR [ebp-0x54],ebx
10007d46:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10007d49:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
10007d4f:	83 ec 0c             	sub    esp,0xc
10007d52:	50                   	push   eax
10007d53:	e8 fc ff ff ff       	call   10007d54 <begin(void*)+0x21ed>	10007d54: R_386_PC32	setActiveTerminal(VgaText*)
10007d58:	83 c4 10             	add    esp,0x10
10007d5b:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
10007d62:	83 7d c0 18          	cmp    DWORD PTR [ebp-0x40],0x18
10007d66:	7f 2e                	jg     10007d96 <begin(void*)+0x222f>
10007d68:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [ebp-0x44],0x0
10007d6f:	83 7d bc 4f          	cmp    DWORD PTR [ebp-0x44],0x4f
10007d73:	7f 1c                	jg     10007d91 <begin(void*)+0x222a>
10007d75:	83 ec 0c             	sub    esp,0xc
10007d78:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10007d7b:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10007d7e:	6a 00                	push   0x0
10007d80:	6a 07                	push   0x7
10007d82:	6a 20                	push   0x20
10007d84:	e8 fc ff ff ff       	call   10007d85 <begin(void*)+0x221e>	10007d85: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
10007d89:	83 c4 20             	add    esp,0x20
10007d8c:	ff 45 bc             	inc    DWORD PTR [ebp-0x44]
10007d8f:	eb de                	jmp    10007d6f <begin(void*)+0x2208>
10007d91:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
10007d94:	eb cc                	jmp    10007d62 <begin(void*)+0x21fb>
10007d96:	a0 00 00 00 00       	mov    al,ds:0x0	10007d97: R_386_32	safemode
10007d9b:	84 c0                	test   al,al
10007d9d:	74 40                	je     10007ddf <begin(void*)+0x2278>
10007d9f:	c7 45 b8 00 00 00 00 	mov    DWORD PTR [ebp-0x48],0x0
10007da6:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10007da9:	05 c8 be 00 10       	add    eax,0x1000bec8	10007daa: R_386_32	.text
10007dae:	8a 00                	mov    al,BYTE PTR [eax]
10007db0:	84 c0                	test   al,al
10007db2:	74 2b                	je     10007ddf <begin(void*)+0x2278>
10007db4:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10007db7:	8d 50 44             	lea    edx,[eax+0x44]
10007dba:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10007dbd:	05 c8 be 00 10       	add    eax,0x1000bec8	10007dbe: R_386_32	.text
10007dc2:	8a 00                	mov    al,BYTE PTR [eax]
10007dc4:	0f be c0             	movsx  eax,al
10007dc7:	83 ec 0c             	sub    esp,0xc
10007dca:	6a 17                	push   0x17
10007dcc:	52                   	push   edx
10007dcd:	6a 00                	push   0x0
10007dcf:	6a 0f                	push   0xf
10007dd1:	50                   	push   eax
10007dd2:	e8 fc ff ff ff       	call   10007dd3 <begin(void*)+0x226c>	10007dd3: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
10007dd7:	83 c4 20             	add    esp,0x20
10007dda:	ff 45 b8             	inc    DWORD PTR [ebp-0x48]
10007ddd:	eb c7                	jmp    10007da6 <begin(void*)+0x223f>
10007ddf:	83 ec 0c             	sub    esp,0xc
10007de2:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10007de5:	e8 fc ff ff ff       	call   10007de6 <begin(void*)+0x227f>	10007de6: R_386_PC32	Process::createUserThread()
10007dea:	83 c4 10             	add    esp,0x10
10007ded:	a0 00 00 00 00       	mov    al,ds:0x0	10007dee: R_386_32	safemode
10007df2:	83 f0 01             	xor    eax,0x1
10007df5:	84 c0                	test   al,al
10007df7:	0f 84 9a 00 00 00    	je     10007e97 <begin(void*)+0x2330>
10007dfd:	8b 85 c8 fc ff ff    	mov    eax,DWORD PTR [ebp-0x338]
10007e03:	8b 95 cc fc ff ff    	mov    edx,DWORD PTR [ebp-0x334]
10007e09:	89 c6                	mov    esi,eax
10007e0b:	83 f6 01             	xor    esi,0x1
10007e0e:	89 b5 90 f8 ff ff    	mov    DWORD PTR [ebp-0x770],esi
10007e14:	89 d0                	mov    eax,edx
10007e16:	80 f4 00             	xor    ah,0x0
10007e19:	89 85 94 f8 ff ff    	mov    DWORD PTR [ebp-0x76c],eax
10007e1f:	8b b5 90 f8 ff ff    	mov    esi,DWORD PTR [ebp-0x770]
10007e25:	8b bd 94 f8 ff ff    	mov    edi,DWORD PTR [ebp-0x76c]
10007e2b:	89 f8                	mov    eax,edi
10007e2d:	09 f0                	or     eax,esi
10007e2f:	85 c0                	test   eax,eax
10007e31:	75 17                	jne    10007e4a <begin(void*)+0x22e3>
10007e33:	a1 00 00 00 00       	mov    eax,ds:0x0	10007e34: R_386_32	kernelProcess
10007e38:	6a 01                	push   0x1
10007e3a:	6a 00                	push   0x0
10007e3c:	68 00 00 00 00       	push   0x0	10007e3d: R_386_32	startGUI(void*)
10007e41:	50                   	push   eax
10007e42:	e8 fc ff ff ff       	call   10007e43 <begin(void*)+0x22dc>	10007e43: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10007e47:	83 c4 10             	add    esp,0x10
10007e4a:	8b 85 c8 fc ff ff    	mov    eax,DWORD PTR [ebp-0x338]
10007e50:	8b 95 cc fc ff ff    	mov    edx,DWORD PTR [ebp-0x334]
10007e56:	89 c7                	mov    edi,eax
10007e58:	83 f7 02             	xor    edi,0x2
10007e5b:	89 bd 88 f8 ff ff    	mov    DWORD PTR [ebp-0x778],edi
10007e61:	89 d0                	mov    eax,edx
10007e63:	80 f4 00             	xor    ah,0x0
10007e66:	89 85 8c f8 ff ff    	mov    DWORD PTR [ebp-0x774],eax
10007e6c:	8b b5 88 f8 ff ff    	mov    esi,DWORD PTR [ebp-0x778]
10007e72:	8b bd 8c f8 ff ff    	mov    edi,DWORD PTR [ebp-0x774]
10007e78:	89 f8                	mov    eax,edi
10007e7a:	09 f0                	or     eax,esi
10007e7c:	85 c0                	test   eax,eax
10007e7e:	75 17                	jne    10007e97 <begin(void*)+0x2330>
10007e80:	a1 00 00 00 00       	mov    eax,ds:0x0	10007e81: R_386_32	kernelProcess
10007e85:	6a 01                	push   0x1
10007e87:	6a 00                	push   0x0
10007e89:	68 00 00 00 00       	push   0x0	10007e8a: R_386_32	startGUIVESA(void*)
10007e8e:	50                   	push   eax
10007e8f:	e8 fc ff ff ff       	call   10007e90 <begin(void*)+0x2329>	10007e90: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10007e94:	83 c4 10             	add    esp,0x10
10007e97:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10007e9a:	8b 00                	mov    eax,DWORD PTR [eax]
10007e9c:	83 ec 04             	sub    esp,0x4
10007e9f:	6a 00                	push   0x0
10007ea1:	8d 95 c4 fc ff ff    	lea    edx,[ebp-0x33c]
10007ea7:	52                   	push   edx
10007ea8:	50                   	push   eax
10007ea9:	e8 fc ff ff ff       	call   10007eaa <begin(void*)+0x2343>	10007eaa: R_386_PC32	waitTask(int, int*, int)
10007eae:	83 c4 10             	add    esp,0x10
10007eb1:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10007eb3: R_386_32	computer
10007eb7:	a1 00 00 00 00       	mov    eax,ds:0x0	10007eb8: R_386_32	computer
10007ebc:	8b 00                	mov    eax,DWORD PTR [eax]
10007ebe:	83 c0 0c             	add    eax,0xc
10007ec1:	8b 00                	mov    eax,DWORD PTR [eax]
10007ec3:	6a 00                	push   0x0
10007ec5:	6a 00                	push   0x0
10007ec7:	6a 00                	push   0x0
10007ec9:	52                   	push   edx
10007eca:	ff d0                	call   eax
10007ecc:	83 c4 10             	add    esp,0x10
10007ecf:	83 ec 0c             	sub    esp,0xc
10007ed2:	68 78 be 00 10       	push   0x1000be78	10007ed3: R_386_32	.text
10007ed7:	e8 fc ff ff ff       	call   10007ed8 <begin(void*)+0x2371>	10007ed8: R_386_PC32	KePanic(char const*)
10007edc:	83 c4 10             	add    esp,0x10
10007edf:	eb fe                	jmp    10007edf <begin(void*)+0x2378>

10007ee1 <clean>:
10007ee1:	57                   	push   edi
10007ee2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10007ee6:	b0 00                	mov    al,0x0
10007ee8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10007eec:	f3 aa                	rep stos BYTE PTR es:[edi],al
10007eee:	5f                   	pop    edi
10007eef:	c3                   	ret    

10007ef0 <BF_decode>:
10007ef0:	55                   	push   ebp
10007ef1:	57                   	push   edi
10007ef2:	56                   	push   esi
10007ef3:	53                   	push   ebx
10007ef4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10007ef8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10007efc:	89 d6                	mov    esi,edx
10007efe:	03 74 24 1c          	add    esi,DWORD PTR [esp+0x1c]
10007f02:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
10007f05:	83 e8 20             	sub    eax,0x20
10007f08:	83 f8 5f             	cmp    eax,0x5f
10007f0b:	0f 87 a3 00 00 00    	ja     10007fb4 <BF_decode+0xc4>
10007f11:	8a 80 80 d0 00 10    	mov    al,BYTE PTR [eax+0x1000d080]	10007f13: R_386_32	.data
10007f17:	3c 3f                	cmp    al,0x3f
10007f19:	0f 87 9f 00 00 00    	ja     10007fbe <BF_decode+0xce>
10007f1f:	0f b6 4b 01          	movzx  ecx,BYTE PTR [ebx+0x1]
10007f23:	83 e9 20             	sub    ecx,0x20
10007f26:	83 f9 5f             	cmp    ecx,0x5f
10007f29:	0f 87 96 00 00 00    	ja     10007fc5 <BF_decode+0xd5>
10007f2f:	8a 89 80 d0 00 10    	mov    cl,BYTE PTR [ecx+0x1000d080]	10007f31: R_386_32	.data
10007f35:	0f b6 f9             	movzx  edi,cl
10007f38:	83 ff 3f             	cmp    edi,0x3f
10007f3b:	0f 87 8b 00 00 00    	ja     10007fcc <BF_decode+0xdc>
10007f41:	c1 e0 02             	shl    eax,0x2
10007f44:	c1 ef 04             	shr    edi,0x4
10007f47:	09 f8                	or     eax,edi
10007f49:	88 02                	mov    BYTE PTR [edx],al
10007f4b:	89 d7                	mov    edi,edx
10007f4d:	8d 42 01             	lea    eax,[edx+0x1]
10007f50:	39 c6                	cmp    esi,eax
10007f52:	76 7f                	jbe    10007fd3 <BF_decode+0xe3>
10007f54:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
10007f58:	83 e8 20             	sub    eax,0x20
10007f5b:	83 f8 5f             	cmp    eax,0x5f
10007f5e:	77 7a                	ja     10007fda <BF_decode+0xea>
10007f60:	8a 80 80 d0 00 10    	mov    al,BYTE PTR [eax+0x1000d080]	10007f62: R_386_32	.data
10007f66:	0f b6 e8             	movzx  ebp,al
10007f69:	83 fd 3f             	cmp    ebp,0x3f
10007f6c:	77 73                	ja     10007fe1 <BF_decode+0xf1>
10007f6e:	c1 e1 04             	shl    ecx,0x4
10007f71:	c1 ed 02             	shr    ebp,0x2
10007f74:	09 e9                	or     ecx,ebp
10007f76:	88 4a 01             	mov    BYTE PTR [edx+0x1],cl
10007f79:	8d 52 02             	lea    edx,[edx+0x2]
10007f7c:	39 d6                	cmp    esi,edx
10007f7e:	76 68                	jbe    10007fe8 <BF_decode+0xf8>
10007f80:	83 c3 04             	add    ebx,0x4
10007f83:	0f b6 53 ff          	movzx  edx,BYTE PTR [ebx-0x1]
10007f87:	83 ea 20             	sub    edx,0x20
10007f8a:	83 fa 5f             	cmp    edx,0x5f
10007f8d:	77 60                	ja     10007fef <BF_decode+0xff>
10007f8f:	8a 8a 80 d0 00 10    	mov    cl,BYTE PTR [edx+0x1000d080]	10007f91: R_386_32	.data
10007f95:	80 f9 3f             	cmp    cl,0x3f
10007f98:	77 5c                	ja     10007ff6 <BF_decode+0x106>
10007f9a:	8d 57 03             	lea    edx,[edi+0x3]
10007f9d:	c1 e0 06             	shl    eax,0x6
10007fa0:	09 c1                	or     ecx,eax
10007fa2:	88 4a ff             	mov    BYTE PTR [edx-0x1],cl
10007fa5:	39 d6                	cmp    esi,edx
10007fa7:	0f 87 55 ff ff ff    	ja     10007f02 <BF_decode+0x12>
10007fad:	b8 00 00 00 00       	mov    eax,0x0
10007fb2:	eb 05                	jmp    10007fb9 <BF_decode+0xc9>
10007fb4:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007fb9:	5b                   	pop    ebx
10007fba:	5e                   	pop    esi
10007fbb:	5f                   	pop    edi
10007fbc:	5d                   	pop    ebp
10007fbd:	c3                   	ret    
10007fbe:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007fc3:	eb f4                	jmp    10007fb9 <BF_decode+0xc9>
10007fc5:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007fca:	eb ed                	jmp    10007fb9 <BF_decode+0xc9>
10007fcc:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007fd1:	eb e6                	jmp    10007fb9 <BF_decode+0xc9>
10007fd3:	b8 00 00 00 00       	mov    eax,0x0
10007fd8:	eb df                	jmp    10007fb9 <BF_decode+0xc9>
10007fda:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007fdf:	eb d8                	jmp    10007fb9 <BF_decode+0xc9>
10007fe1:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007fe6:	eb d1                	jmp    10007fb9 <BF_decode+0xc9>
10007fe8:	b8 00 00 00 00       	mov    eax,0x0
10007fed:	eb ca                	jmp    10007fb9 <BF_decode+0xc9>
10007fef:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007ff4:	eb c3                	jmp    10007fb9 <BF_decode+0xc9>
10007ff6:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007ffb:	eb bc                	jmp    10007fb9 <BF_decode+0xc9>

10007ffd <BF_encode>:
10007ffd:	55                   	push   ebp
10007ffe:	57                   	push   edi
10007fff:	56                   	push   esi
10008000:	53                   	push   ebx
10008001:	83 ec 04             	sub    esp,0x4
10008004:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10008008:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000800c:	89 c7                	mov    edi,eax
1000800e:	03 7c 24 20          	add    edi,DWORD PTR [esp+0x20]
10008012:	89 3c 24             	mov    DWORD PTR [esp],edi
10008015:	0f b6 10             	movzx  edx,BYTE PTR [eax]
10008018:	89 d6                	mov    esi,edx
1000801a:	c1 ee 02             	shr    esi,0x2
1000801d:	8a 9e 20 d0 00 10    	mov    bl,BYTE PTR [esi+0x1000d020]	1000801f: R_386_32	.data
10008023:	88 19                	mov    BYTE PTR [ecx],bl
10008025:	c1 e2 04             	shl    edx,0x4
10008028:	83 e2 30             	and    edx,0x30
1000802b:	89 c7                	mov    edi,eax
1000802d:	8d 70 01             	lea    esi,[eax+0x1]
10008030:	39 34 24             	cmp    DWORD PTR [esp],esi
10008033:	76 51                	jbe    10008086 <BF_encode+0x89>
10008035:	0f b6 70 01          	movzx  esi,BYTE PTR [eax+0x1]
10008039:	89 f5                	mov    ebp,esi
1000803b:	c1 ed 04             	shr    ebp,0x4
1000803e:	09 ea                	or     edx,ebp
10008040:	8a 9a 20 d0 00 10    	mov    bl,BYTE PTR [edx+0x1000d020]	10008042: R_386_32	.data
10008046:	88 59 01             	mov    BYTE PTR [ecx+0x1],bl
10008049:	c1 e6 02             	shl    esi,0x2
1000804c:	83 e6 3c             	and    esi,0x3c
1000804f:	83 c0 02             	add    eax,0x2
10008052:	39 04 24             	cmp    DWORD PTR [esp],eax
10008055:	76 40                	jbe    10008097 <BF_encode+0x9a>
10008057:	8d 47 03             	lea    eax,[edi+0x3]
1000805a:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
1000805d:	0f b6 d3             	movzx  edx,bl
10008060:	c1 ea 06             	shr    edx,0x6
10008063:	09 f2                	or     edx,esi
10008065:	8a 92 20 d0 00 10    	mov    dl,BYTE PTR [edx+0x1000d020]	10008067: R_386_32	.data
1000806b:	88 51 02             	mov    BYTE PTR [ecx+0x2],dl
1000806e:	83 c1 04             	add    ecx,0x4
10008071:	89 da                	mov    edx,ebx
10008073:	83 e2 3f             	and    edx,0x3f
10008076:	8a 9a 20 d0 00 10    	mov    bl,BYTE PTR [edx+0x1000d020]	10008078: R_386_32	.data
1000807c:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
1000807f:	39 04 24             	cmp    DWORD PTR [esp],eax
10008082:	77 91                	ja     10008015 <BF_encode+0x18>
10008084:	eb 09                	jmp    1000808f <BF_encode+0x92>
10008086:	8a 82 20 d0 00 10    	mov    al,BYTE PTR [edx+0x1000d020]	10008088: R_386_32	.data
1000808c:	88 41 01             	mov    BYTE PTR [ecx+0x1],al
1000808f:	83 c4 04             	add    esp,0x4
10008092:	5b                   	pop    ebx
10008093:	5e                   	pop    esi
10008094:	5f                   	pop    edi
10008095:	5d                   	pop    ebp
10008096:	c3                   	ret    
10008097:	8a 86 20 d0 00 10    	mov    al,BYTE PTR [esi+0x1000d020]	10008099: R_386_32	.data
1000809d:	88 41 02             	mov    BYTE PTR [ecx+0x2],al
100080a0:	eb ed                	jmp    1000808f <BF_encode+0x92>

100080a2 <BF_swap>:
100080a2:	53                   	push   ebx
100080a3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100080a7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
100080ab:	80 3d e0 d0 00 10 00 	cmp    BYTE PTR ds:0x1000d0e0,0x0	100080ad: R_386_32	.data
100080b2:	74 23                	je     100080d7 <BF_swap+0x35>
100080b4:	8b 01                	mov    eax,DWORD PTR [ecx]
100080b6:	c1 c0 10             	rol    eax,0x10
100080b9:	83 c1 04             	add    ecx,0x4
100080bc:	89 c2                	mov    edx,eax
100080be:	c1 e2 08             	shl    edx,0x8
100080c1:	81 e2 00 ff 00 ff    	and    edx,0xff00ff00
100080c7:	c1 e8 08             	shr    eax,0x8
100080ca:	25 ff 00 ff 00       	and    eax,0xff00ff
100080cf:	09 d0                	or     eax,edx
100080d1:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
100080d4:	4b                   	dec    ebx
100080d5:	75 dd                	jne    100080b4 <BF_swap+0x12>
100080d7:	5b                   	pop    ebx
100080d8:	c3                   	ret    

100080d9 <BF_set_key>:
100080d9:	55                   	push   ebp
100080da:	57                   	push   edi
100080db:	56                   	push   esi
100080dc:	53                   	push   ebx
100080dd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
100080e1:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
100080e5:	89 f9                	mov    ecx,edi
100080e7:	be 00 00 00 00       	mov    esi,0x0
100080ec:	eb 2d                	jmp    1000811b <BF_set_key+0x42>
100080ee:	89 f9                	mov    ecx,edi
100080f0:	4a                   	dec    edx
100080f1:	74 10                	je     10008103 <BF_set_key+0x2a>
100080f3:	c1 e0 08             	shl    eax,0x8
100080f6:	0f b6 19             	movzx  ebx,BYTE PTR [ecx]
100080f9:	09 d8                	or     eax,ebx
100080fb:	80 39 00             	cmp    BYTE PTR [ecx],0x0
100080fe:	74 ee                	je     100080ee <BF_set_key+0x15>
10008100:	41                   	inc    ecx
10008101:	eb ed                	jmp    100080f0 <BF_set_key+0x17>
10008103:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10008107:	89 04 b2             	mov    DWORD PTR [edx+esi*4],eax
1000810a:	33 04 b5 c0 cf 00 10 	xor    eax,DWORD PTR [esi*4+0x1000cfc0]	1000810d: R_386_32	.data
10008111:	89 44 b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],eax
10008115:	46                   	inc    esi
10008116:	83 fe 12             	cmp    esi,0x12
10008119:	74 0c                	je     10008127 <BF_set_key+0x4e>
1000811b:	ba 04 00 00 00       	mov    edx,0x4
10008120:	b8 00 00 00 00       	mov    eax,0x0
10008125:	eb cc                	jmp    100080f3 <BF_set_key+0x1a>
10008127:	5b                   	pop    ebx
10008128:	5e                   	pop    esi
10008129:	5f                   	pop    edi
1000812a:	5d                   	pop    ebp
1000812b:	c3                   	ret    

1000812c <_crypt_blowfish_rn>:
1000812c:	55                   	push   ebp
1000812d:	57                   	push   edi
1000812e:	56                   	push   esi
1000812f:	53                   	push   ebx
10008130:	81 ec 00 11 00 00    	sub    esp,0x1100
10008136:	83 bc 24 20 11 00 00 3c 	cmp    DWORD PTR [esp+0x1120],0x3c
1000813e:	0f 8e 9e 2d 00 00    	jle    1000aee2 <_crypt_blowfish_rn+0x2db6>
10008144:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
1000814b:	80 38 24             	cmp    BYTE PTR [eax],0x24
1000814e:	0f 85 a8 2d 00 00    	jne    1000aefc <_crypt_blowfish_rn+0x2dd0>
10008154:	80 78 01 32          	cmp    BYTE PTR [eax+0x1],0x32
10008158:	0f 85 9e 2d 00 00    	jne    1000aefc <_crypt_blowfish_rn+0x2dd0>
1000815e:	80 78 02 61          	cmp    BYTE PTR [eax+0x2],0x61
10008162:	0f 85 94 2d 00 00    	jne    1000aefc <_crypt_blowfish_rn+0x2dd0>
10008168:	80 78 03 24          	cmp    BYTE PTR [eax+0x3],0x24
1000816c:	0f 85 8a 2d 00 00    	jne    1000aefc <_crypt_blowfish_rn+0x2dd0>
10008172:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10008175:	8d 50 d0             	lea    edx,[eax-0x30]
10008178:	80 fa 03             	cmp    dl,0x3
1000817b:	0f 87 7b 2d 00 00    	ja     1000aefc <_crypt_blowfish_rn+0x2dd0>
10008181:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
10008188:	8a 53 05             	mov    dl,BYTE PTR [ebx+0x5]
1000818b:	8d 4a d0             	lea    ecx,[edx-0x30]
1000818e:	80 f9 09             	cmp    cl,0x9
10008191:	0f 87 65 2d 00 00    	ja     1000aefc <_crypt_blowfish_rn+0x2dd0>
10008197:	3c 33                	cmp    al,0x33
10008199:	0f 84 54 2d 00 00    	je     1000aef3 <_crypt_blowfish_rn+0x2dc7>
1000819f:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
100081a6:	80 7b 06 24          	cmp    BYTE PTR [ebx+0x6],0x24
100081aa:	0f 85 4c 2d 00 00    	jne    1000aefc <_crypt_blowfish_rn+0x2dd0>
100081b0:	0f be c0             	movsx  eax,al
100081b3:	8d 84 80 10 ff ff ff 	lea    eax,[eax+eax*4-0xf0]
100081ba:	01 c0                	add    eax,eax
100081bc:	0f be d2             	movsx  edx,dl
100081bf:	8d 4c 10 d0          	lea    ecx,[eax+edx*1-0x30]
100081c3:	b8 01 00 00 00       	mov    eax,0x1
100081c8:	d3 e0                	shl    eax,cl
100081ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100081ce:	83 f8 0f             	cmp    eax,0xf
100081d1:	0f 86 3f 2d 00 00    	jbe    1000af16 <_crypt_blowfish_rn+0x2dea>
100081d7:	6a 10                	push   0x10
100081d9:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
100081e0:	83 c0 07             	add    eax,0x7
100081e3:	50                   	push   eax
100081e4:	8d 84 24 f0 10 00 00 	lea    eax,[esp+0x10f0]
100081eb:	50                   	push   eax
100081ec:	e8 ff fc ff ff       	call   10007ef0 <BF_decode>
100081f1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
100081f5:	83 c4 0c             	add    esp,0xc
100081f8:	85 c0                	test   eax,eax
100081fa:	0f 85 16 2d 00 00    	jne    1000af16 <_crypt_blowfish_rn+0x2dea>
10008200:	6a 04                	push   0x4
10008202:	8d 5c 24 5c          	lea    ebx,[esp+0x5c]
10008206:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
1000820d:	50                   	push   eax
1000820e:	e8 8f fe ff ff       	call   100080a2 <BF_swap>
10008213:	8d 84 24 60 10 00 00 	lea    eax,[esp+0x1060]
1000821a:	50                   	push   eax
1000821b:	8d 84 24 ac 10 00 00 	lea    eax,[esp+0x10ac]
10008222:	50                   	push   eax
10008223:	ff b4 24 24 11 00 00 	push   DWORD PTR [esp+0x1124]
1000822a:	e8 aa fe ff ff       	call   100080d9 <BF_set_key>
1000822f:	be c0 bf 00 10       	mov    esi,0x1000bfc0	10008230: R_386_32	.data
10008234:	b9 00 04 00 00       	mov    ecx,0x400
10008239:	89 df                	mov    edi,ebx
1000823b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000823d:	83 c4 14             	add    esp,0x14
10008240:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10008244:	89 04 24             	mov    DWORD PTR [esp],eax
10008247:	bb 00 00 00 00       	mov    ebx,0x0
1000824c:	b8 00 00 00 00       	mov    eax,0x0
10008251:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10008254:	83 e1 02             	and    ecx,0x2
10008257:	8d 91 24 04 00 00    	lea    edx,[ecx+0x424]
1000825d:	8b 54 94 58          	mov    edx,DWORD PTR [esp+edx*4+0x58]
10008261:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
10008268:	31 c2                	xor    edx,eax
1000826a:	89 d7                	mov    edi,edx
1000826c:	c1 ef 06             	shr    edi,0x6
1000826f:	89 d5                	mov    ebp,edx
10008271:	c1 ed 0e             	shr    ebp,0xe
10008274:	89 d0                	mov    eax,edx
10008276:	c1 e8 16             	shr    eax,0x16
10008279:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008280:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008286:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000828c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008292:	25 fc 03 00 00       	and    eax,0x3fc
10008297:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000829b:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100082a2:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100082a9:	81 c1 25 04 00 00    	add    ecx,0x425
100082af:	8b 4c 8c 58          	mov    ecx,DWORD PTR [esp+ecx*4+0x58]
100082b3:	33 8c 24 5c 10 00 00 	xor    ecx,DWORD PTR [esp+0x105c]
100082ba:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100082c1:	31 c8                	xor    eax,ecx
100082c3:	31 c3                	xor    ebx,eax
100082c5:	89 d8                	mov    eax,ebx
100082c7:	c1 e8 06             	shr    eax,0x6
100082ca:	89 c1                	mov    ecx,eax
100082cc:	89 df                	mov    edi,ebx
100082ce:	c1 ef 0e             	shr    edi,0xe
100082d1:	89 d8                	mov    eax,ebx
100082d3:	c1 e8 16             	shr    eax,0x16
100082d6:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100082dd:	81 e6 fc 03 00 00    	and    esi,0x3fc
100082e3:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100082e9:	81 e7 fc 03 00 00    	and    edi,0x3fc
100082ef:	25 fc 03 00 00       	and    eax,0x3fc
100082f4:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100082f8:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
100082ff:	33 84 0c 58 08 00 00 	xor    eax,DWORD PTR [esp+ecx*1+0x858]
10008306:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
1000830d:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008314:	89 c1                	mov    ecx,eax
10008316:	31 d1                	xor    ecx,edx
10008318:	89 ca                	mov    edx,ecx
1000831a:	c1 ea 06             	shr    edx,0x6
1000831d:	89 cf                	mov    edi,ecx
1000831f:	c1 ef 0e             	shr    edi,0xe
10008322:	89 c8                	mov    eax,ecx
10008324:	c1 e8 16             	shr    eax,0x16
10008327:	8d 34 8d 00 00 00 00 	lea    esi,[ecx*4+0x0]
1000832e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008334:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000833a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008340:	25 fc 03 00 00       	and    eax,0x3fc
10008345:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008349:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10008350:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10008357:	33 9c 24 64 10 00 00 	xor    ebx,DWORD PTR [esp+0x1064]
1000835e:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008365:	89 c2                	mov    edx,eax
10008367:	31 da                	xor    edx,ebx
10008369:	89 d6                	mov    esi,edx
1000836b:	c1 ee 06             	shr    esi,0x6
1000836e:	89 d7                	mov    edi,edx
10008370:	c1 ef 0e             	shr    edi,0xe
10008373:	89 d0                	mov    eax,edx
10008375:	c1 e8 16             	shr    eax,0x16
10008378:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
1000837f:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008385:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000838b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008391:	25 fc 03 00 00       	and    eax,0x3fc
10008396:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000839a:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
100083a1:	33 84 34 58 08 00 00 	xor    eax,DWORD PTR [esp+esi*1+0x858]
100083a8:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
100083af:	03 84 1c 58 0c 00 00 	add    eax,DWORD PTR [esp+ebx*1+0xc58]
100083b6:	31 c8                	xor    eax,ecx
100083b8:	89 c3                	mov    ebx,eax
100083ba:	c1 eb 06             	shr    ebx,0x6
100083bd:	89 c7                	mov    edi,eax
100083bf:	c1 ef 0e             	shr    edi,0xe
100083c2:	89 c6                	mov    esi,eax
100083c4:	c1 ee 16             	shr    esi,0x16
100083c7:	89 f1                	mov    ecx,esi
100083c9:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100083d0:	81 e6 fc 03 00 00    	and    esi,0x3fc
100083d6:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100083dc:	81 e7 fc 03 00 00    	and    edi,0x3fc
100083e2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100083e8:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100083ec:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100083f3:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
100083fa:	33 94 24 6c 10 00 00 	xor    edx,DWORD PTR [esp+0x106c]
10008401:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008408:	31 ca                	xor    edx,ecx
1000840a:	89 d6                	mov    esi,edx
1000840c:	c1 ee 06             	shr    esi,0x6
1000840f:	89 d7                	mov    edi,edx
10008411:	c1 ef 0e             	shr    edi,0xe
10008414:	89 d3                	mov    ebx,edx
10008416:	c1 eb 16             	shr    ebx,0x16
10008419:	89 d9                	mov    ecx,ebx
1000841b:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10008422:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008428:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000842e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008434:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000843a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000843e:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10008445:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
1000844c:	33 84 24 70 10 00 00 	xor    eax,DWORD PTR [esp+0x1070]
10008453:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
1000845a:	31 c8                	xor    eax,ecx
1000845c:	89 c6                	mov    esi,eax
1000845e:	c1 ee 06             	shr    esi,0x6
10008461:	89 c7                	mov    edi,eax
10008463:	c1 ef 0e             	shr    edi,0xe
10008466:	89 c3                	mov    ebx,eax
10008468:	c1 eb 16             	shr    ebx,0x16
1000846b:	89 d9                	mov    ecx,ebx
1000846d:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10008474:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000847a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008480:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008486:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000848c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008490:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10008497:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
1000849e:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
100084a5:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
100084ac:	31 ca                	xor    edx,ecx
100084ae:	89 d6                	mov    esi,edx
100084b0:	c1 ee 06             	shr    esi,0x6
100084b3:	89 d7                	mov    edi,edx
100084b5:	c1 ef 0e             	shr    edi,0xe
100084b8:	89 d3                	mov    ebx,edx
100084ba:	c1 eb 16             	shr    ebx,0x16
100084bd:	89 d9                	mov    ecx,ebx
100084bf:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
100084c6:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100084cc:	81 e6 fc 03 00 00    	and    esi,0x3fc
100084d2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100084d8:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100084de:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100084e2:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100084e9:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100084f0:	33 84 24 78 10 00 00 	xor    eax,DWORD PTR [esp+0x1078]
100084f7:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
100084fe:	31 c8                	xor    eax,ecx
10008500:	89 c6                	mov    esi,eax
10008502:	c1 ee 06             	shr    esi,0x6
10008505:	89 c7                	mov    edi,eax
10008507:	c1 ef 0e             	shr    edi,0xe
1000850a:	89 c3                	mov    ebx,eax
1000850c:	c1 eb 16             	shr    ebx,0x16
1000850f:	89 d9                	mov    ecx,ebx
10008511:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10008518:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000851e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008524:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000852a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008530:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008534:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
1000853b:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10008542:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10008549:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10008550:	31 ca                	xor    edx,ecx
10008552:	89 d6                	mov    esi,edx
10008554:	c1 ee 06             	shr    esi,0x6
10008557:	89 d7                	mov    edi,edx
10008559:	c1 ef 0e             	shr    edi,0xe
1000855c:	89 d3                	mov    ebx,edx
1000855e:	c1 eb 16             	shr    ebx,0x16
10008561:	89 d9                	mov    ecx,ebx
10008563:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
1000856a:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008570:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008576:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000857c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008582:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008586:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
1000858d:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10008594:	33 84 24 80 10 00 00 	xor    eax,DWORD PTR [esp+0x1080]
1000859b:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
100085a2:	31 c8                	xor    eax,ecx
100085a4:	89 c6                	mov    esi,eax
100085a6:	c1 ee 06             	shr    esi,0x6
100085a9:	89 c7                	mov    edi,eax
100085ab:	c1 ef 0e             	shr    edi,0xe
100085ae:	89 c3                	mov    ebx,eax
100085b0:	c1 eb 16             	shr    ebx,0x16
100085b3:	89 d9                	mov    ecx,ebx
100085b5:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
100085bc:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100085c2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100085c8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100085ce:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100085d4:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100085d8:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100085df:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100085e6:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
100085ed:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
100085f4:	31 ca                	xor    edx,ecx
100085f6:	89 d6                	mov    esi,edx
100085f8:	c1 ee 06             	shr    esi,0x6
100085fb:	89 d7                	mov    edi,edx
100085fd:	c1 ef 0e             	shr    edi,0xe
10008600:	89 d3                	mov    ebx,edx
10008602:	c1 eb 16             	shr    ebx,0x16
10008605:	89 d9                	mov    ecx,ebx
10008607:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
1000860e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008614:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000861a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008620:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008626:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000862a:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10008631:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10008638:	33 84 24 88 10 00 00 	xor    eax,DWORD PTR [esp+0x1088]
1000863f:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10008646:	31 c8                	xor    eax,ecx
10008648:	89 c6                	mov    esi,eax
1000864a:	c1 ee 06             	shr    esi,0x6
1000864d:	89 c7                	mov    edi,eax
1000864f:	c1 ef 0e             	shr    edi,0xe
10008652:	89 c3                	mov    ebx,eax
10008654:	c1 eb 16             	shr    ebx,0x16
10008657:	89 d9                	mov    ecx,ebx
10008659:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10008660:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008666:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000866c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008672:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008678:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000867c:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10008683:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
1000868a:	33 94 24 8c 10 00 00 	xor    edx,DWORD PTR [esp+0x108c]
10008691:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10008698:	31 ca                	xor    edx,ecx
1000869a:	89 d3                	mov    ebx,edx
1000869c:	c1 eb 06             	shr    ebx,0x6
1000869f:	89 d7                	mov    edi,edx
100086a1:	c1 ef 0e             	shr    edi,0xe
100086a4:	89 d6                	mov    esi,edx
100086a6:	c1 ee 16             	shr    esi,0x16
100086a9:	89 f1                	mov    ecx,esi
100086ab:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100086b2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100086b8:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100086be:	81 e7 fc 03 00 00    	and    edi,0x3fc
100086c4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100086ca:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100086ce:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100086d5:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
100086dc:	33 84 24 90 10 00 00 	xor    eax,DWORD PTR [esp+0x1090]
100086e3:	89 cb                	mov    ebx,ecx
100086e5:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100086ec:	31 d8                	xor    eax,ebx
100086ee:	89 c6                	mov    esi,eax
100086f0:	c1 ee 06             	shr    esi,0x6
100086f3:	89 c7                	mov    edi,eax
100086f5:	c1 ef 0e             	shr    edi,0xe
100086f8:	89 c3                	mov    ebx,eax
100086fa:	c1 eb 16             	shr    ebx,0x16
100086fd:	89 d9                	mov    ecx,ebx
100086ff:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10008706:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000870c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008712:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008718:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000871e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008722:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10008729:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10008730:	33 94 24 94 10 00 00 	xor    edx,DWORD PTR [esp+0x1094]
10008737:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
1000873e:	31 ca                	xor    edx,ecx
10008740:	89 d3                	mov    ebx,edx
10008742:	c1 eb 06             	shr    ebx,0x6
10008745:	89 d7                	mov    edi,edx
10008747:	c1 ef 0e             	shr    edi,0xe
1000874a:	89 d6                	mov    esi,edx
1000874c:	c1 ee 16             	shr    esi,0x16
1000874f:	89 f1                	mov    ecx,esi
10008751:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008758:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000875e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008764:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000876a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008770:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008774:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
1000877b:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10008782:	33 84 24 98 10 00 00 	xor    eax,DWORD PTR [esp+0x1098]
10008789:	89 cb                	mov    ebx,ecx
1000878b:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008792:	31 c3                	xor    ebx,eax
10008794:	89 d0                	mov    eax,edx
10008796:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
1000879d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
100087a0:	89 84 8c 58 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x1058],eax
100087a7:	89 9c 8c 5c 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x105c],ebx
100087ae:	83 c1 02             	add    ecx,0x2
100087b1:	89 0c 24             	mov    DWORD PTR [esp],ecx
100087b4:	83 f9 12             	cmp    ecx,0x12
100087b7:	0f 85 94 fa ff ff    	jne    10008251 <_crypt_blowfish_rn+0x125>
100087bd:	8d 4c 24 58          	lea    ecx,[esp+0x58]
100087c1:	83 c1 10             	add    ecx,0x10
100087c4:	8b 94 24 f0 10 00 00 	mov    edx,DWORD PTR [esp+0x10f0]
100087cb:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
100087d2:	31 c2                	xor    edx,eax
100087d4:	89 d7                	mov    edi,edx
100087d6:	c1 ef 06             	shr    edi,0x6
100087d9:	89 d5                	mov    ebp,edx
100087db:	c1 ed 0e             	shr    ebp,0xe
100087de:	89 d0                	mov    eax,edx
100087e0:	c1 e8 16             	shr    eax,0x16
100087e3:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100087ea:	81 e6 fc 03 00 00    	and    esi,0x3fc
100087f0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100087f6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100087fc:	25 fc 03 00 00       	and    eax,0x3fc
10008801:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008805:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000880c:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008813:	89 c7                	mov    edi,eax
10008815:	8b 84 24 f4 10 00 00 	mov    eax,DWORD PTR [esp+0x10f4]
1000881c:	33 84 24 5c 10 00 00 	xor    eax,DWORD PTR [esp+0x105c]
10008823:	03 bc 34 58 0c 00 00 	add    edi,DWORD PTR [esp+esi*1+0xc58]
1000882a:	31 f8                	xor    eax,edi
1000882c:	31 d8                	xor    eax,ebx
1000882e:	89 c7                	mov    edi,eax
10008830:	c1 ef 06             	shr    edi,0x6
10008833:	89 c5                	mov    ebp,eax
10008835:	c1 ed 0e             	shr    ebp,0xe
10008838:	89 c3                	mov    ebx,eax
1000883a:	c1 eb 16             	shr    ebx,0x16
1000883d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008844:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000884a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008850:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008856:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000885c:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008860:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008867:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000886e:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
10008875:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000887c:	31 da                	xor    edx,ebx
1000887e:	89 d7                	mov    edi,edx
10008880:	c1 ef 06             	shr    edi,0x6
10008883:	89 d5                	mov    ebp,edx
10008885:	c1 ed 0e             	shr    ebp,0xe
10008888:	89 d3                	mov    ebx,edx
1000888a:	c1 eb 16             	shr    ebx,0x16
1000888d:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008894:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000889a:	81 e7 fc 03 00 00    	and    edi,0x3fc
100088a0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100088a6:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100088ac:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100088b0:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100088b7:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100088be:	33 84 24 64 10 00 00 	xor    eax,DWORD PTR [esp+0x1064]
100088c5:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100088cc:	31 d8                	xor    eax,ebx
100088ce:	89 c7                	mov    edi,eax
100088d0:	c1 ef 06             	shr    edi,0x6
100088d3:	89 c5                	mov    ebp,eax
100088d5:	c1 ed 0e             	shr    ebp,0xe
100088d8:	89 c3                	mov    ebx,eax
100088da:	c1 eb 16             	shr    ebx,0x16
100088dd:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100088e4:	81 e6 fc 03 00 00    	and    esi,0x3fc
100088ea:	81 e7 fc 03 00 00    	and    edi,0x3fc
100088f0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100088f6:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100088fc:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008900:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008907:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000890e:	33 94 24 68 10 00 00 	xor    edx,DWORD PTR [esp+0x1068]
10008915:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000891c:	31 da                	xor    edx,ebx
1000891e:	89 d7                	mov    edi,edx
10008920:	c1 ef 06             	shr    edi,0x6
10008923:	89 d5                	mov    ebp,edx
10008925:	c1 ed 0e             	shr    ebp,0xe
10008928:	89 d3                	mov    ebx,edx
1000892a:	c1 eb 16             	shr    ebx,0x16
1000892d:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008934:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000893a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008940:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008946:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000894c:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008950:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008957:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000895e:	33 84 24 6c 10 00 00 	xor    eax,DWORD PTR [esp+0x106c]
10008965:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000896c:	31 d8                	xor    eax,ebx
1000896e:	89 c7                	mov    edi,eax
10008970:	c1 ef 06             	shr    edi,0x6
10008973:	89 c5                	mov    ebp,eax
10008975:	c1 ed 0e             	shr    ebp,0xe
10008978:	89 c3                	mov    ebx,eax
1000897a:	c1 eb 16             	shr    ebx,0x16
1000897d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008984:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000898a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008990:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008996:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000899c:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100089a0:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100089a7:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100089ae:	33 94 24 70 10 00 00 	xor    edx,DWORD PTR [esp+0x1070]
100089b5:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100089bc:	31 da                	xor    edx,ebx
100089be:	89 d7                	mov    edi,edx
100089c0:	c1 ef 06             	shr    edi,0x6
100089c3:	89 d5                	mov    ebp,edx
100089c5:	c1 ed 0e             	shr    ebp,0xe
100089c8:	89 d3                	mov    ebx,edx
100089ca:	c1 eb 16             	shr    ebx,0x16
100089cd:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100089d4:	81 e6 fc 03 00 00    	and    esi,0x3fc
100089da:	81 e7 fc 03 00 00    	and    edi,0x3fc
100089e0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100089e6:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100089ec:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100089f0:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100089f7:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100089fe:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10008a05:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008a0c:	31 d8                	xor    eax,ebx
10008a0e:	89 c7                	mov    edi,eax
10008a10:	c1 ef 06             	shr    edi,0x6
10008a13:	89 c5                	mov    ebp,eax
10008a15:	c1 ed 0e             	shr    ebp,0xe
10008a18:	89 c3                	mov    ebx,eax
10008a1a:	c1 eb 16             	shr    ebx,0x16
10008a1d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008a24:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008a2a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a30:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a36:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008a3c:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008a40:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008a47:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008a4e:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10008a55:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008a5c:	31 da                	xor    edx,ebx
10008a5e:	89 d7                	mov    edi,edx
10008a60:	c1 ef 06             	shr    edi,0x6
10008a63:	89 d5                	mov    ebp,edx
10008a65:	c1 ed 0e             	shr    ebp,0xe
10008a68:	89 d3                	mov    ebx,edx
10008a6a:	c1 eb 16             	shr    ebx,0x16
10008a6d:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008a74:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008a7a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a80:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a86:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008a8c:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008a90:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008a97:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008a9e:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10008aa5:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008aac:	31 d8                	xor    eax,ebx
10008aae:	89 c7                	mov    edi,eax
10008ab0:	c1 ef 06             	shr    edi,0x6
10008ab3:	89 c5                	mov    ebp,eax
10008ab5:	c1 ed 0e             	shr    ebp,0xe
10008ab8:	89 c3                	mov    ebx,eax
10008aba:	c1 eb 16             	shr    ebx,0x16
10008abd:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008ac4:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008aca:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008ad0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ad6:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008adc:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008ae0:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008ae7:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008aee:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10008af5:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008afc:	31 da                	xor    edx,ebx
10008afe:	89 d7                	mov    edi,edx
10008b00:	c1 ef 06             	shr    edi,0x6
10008b03:	89 d5                	mov    ebp,edx
10008b05:	c1 ed 0e             	shr    ebp,0xe
10008b08:	89 d3                	mov    ebx,edx
10008b0a:	c1 eb 16             	shr    ebx,0x16
10008b0d:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008b14:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008b1a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b20:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b26:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008b2c:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008b30:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008b37:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008b3e:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10008b45:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008b4c:	31 d8                	xor    eax,ebx
10008b4e:	89 c7                	mov    edi,eax
10008b50:	c1 ef 06             	shr    edi,0x6
10008b53:	89 c5                	mov    ebp,eax
10008b55:	c1 ed 0e             	shr    ebp,0xe
10008b58:	89 c3                	mov    ebx,eax
10008b5a:	c1 eb 16             	shr    ebx,0x16
10008b5d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008b64:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008b6a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b70:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b76:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008b7c:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008b80:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008b87:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008b8e:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10008b95:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008b9c:	31 da                	xor    edx,ebx
10008b9e:	89 d7                	mov    edi,edx
10008ba0:	c1 ef 06             	shr    edi,0x6
10008ba3:	89 d5                	mov    ebp,edx
10008ba5:	c1 ed 0e             	shr    ebp,0xe
10008ba8:	89 d3                	mov    ebx,edx
10008baa:	c1 eb 16             	shr    ebx,0x16
10008bad:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008bb4:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008bba:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008bc0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008bc6:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008bcc:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008bd0:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008bd7:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008bde:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10008be5:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008bec:	31 d8                	xor    eax,ebx
10008bee:	89 c7                	mov    edi,eax
10008bf0:	c1 ef 06             	shr    edi,0x6
10008bf3:	89 c5                	mov    ebp,eax
10008bf5:	c1 ed 0e             	shr    ebp,0xe
10008bf8:	89 c3                	mov    ebx,eax
10008bfa:	c1 eb 16             	shr    ebx,0x16
10008bfd:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008c04:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008c0a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c10:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c16:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008c1c:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008c20:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008c27:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008c2e:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10008c35:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008c3c:	31 da                	xor    edx,ebx
10008c3e:	89 d7                	mov    edi,edx
10008c40:	c1 ef 06             	shr    edi,0x6
10008c43:	89 d5                	mov    ebp,edx
10008c45:	c1 ed 0e             	shr    ebp,0xe
10008c48:	89 d3                	mov    ebx,edx
10008c4a:	c1 eb 16             	shr    ebx,0x16
10008c4d:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008c54:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008c5a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c60:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c66:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008c6c:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008c70:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008c77:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008c7e:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10008c85:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008c8c:	31 d8                	xor    eax,ebx
10008c8e:	89 c6                	mov    esi,eax
10008c90:	c1 ee 06             	shr    esi,0x6
10008c93:	89 c5                	mov    ebp,eax
10008c95:	c1 ed 0e             	shr    ebp,0xe
10008c98:	89 c3                	mov    ebx,eax
10008c9a:	c1 eb 16             	shr    ebx,0x16
10008c9d:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008ca4:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008caa:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008cb0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008cb6:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008cbc:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008cc0:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008cc7:	33 9c 34 58 08 00 00 	xor    ebx,DWORD PTR [esp+esi*1+0x858]
10008cce:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10008cd5:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10008cdc:	31 da                	xor    edx,ebx
10008cde:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10008ce5:	89 41 f0             	mov    DWORD PTR [ecx-0x10],eax
10008ce8:	89 51 f4             	mov    DWORD PTR [ecx-0xc],edx
10008ceb:	8b 9c 24 e8 10 00 00 	mov    ebx,DWORD PTR [esp+0x10e8]
10008cf2:	33 9c 24 58 10 00 00 	xor    ebx,DWORD PTR [esp+0x1058]
10008cf9:	31 d8                	xor    eax,ebx
10008cfb:	89 c5                	mov    ebp,eax
10008cfd:	c1 ed 06             	shr    ebp,0x6
10008d00:	89 c6                	mov    esi,eax
10008d02:	c1 ee 0e             	shr    esi,0xe
10008d05:	89 c3                	mov    ebx,eax
10008d07:	c1 eb 16             	shr    ebx,0x16
10008d0a:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008d11:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d17:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d1d:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008d23:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008d29:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008d2d:	03 9c 34 58 04 00 00 	add    ebx,DWORD PTR [esp+esi*1+0x458]
10008d34:	33 9c 2c 58 08 00 00 	xor    ebx,DWORD PTR [esp+ebp*1+0x858]
10008d3b:	8b b4 24 ec 10 00 00 	mov    esi,DWORD PTR [esp+0x10ec]
10008d42:	33 b4 24 5c 10 00 00 	xor    esi,DWORD PTR [esp+0x105c]
10008d49:	31 f2                	xor    edx,esi
10008d4b:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10008d52:	89 de                	mov    esi,ebx
10008d54:	31 d6                	xor    esi,edx
10008d56:	89 f5                	mov    ebp,esi
10008d58:	c1 ed 06             	shr    ebp,0x6
10008d5b:	89 f3                	mov    ebx,esi
10008d5d:	c1 eb 0e             	shr    ebx,0xe
10008d60:	89 f2                	mov    edx,esi
10008d62:	c1 ea 16             	shr    edx,0x16
10008d65:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008d6c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d72:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d78:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008d7e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008d84:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008d88:	03 94 1c 58 04 00 00 	add    edx,DWORD PTR [esp+ebx*1+0x458]
10008d8f:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
10008d96:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10008d9d:	89 d3                	mov    ebx,edx
10008d9f:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10008da6:	31 c3                	xor    ebx,eax
10008da8:	89 df                	mov    edi,ebx
10008daa:	c1 ef 06             	shr    edi,0x6
10008dad:	89 dd                	mov    ebp,ebx
10008daf:	c1 ed 0e             	shr    ebp,0xe
10008db2:	89 da                	mov    edx,ebx
10008db4:	c1 ea 16             	shr    edx,0x16
10008db7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
10008dbe:	25 fc 03 00 00       	and    eax,0x3fc
10008dc3:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008dc9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008dcf:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008dd5:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008dd9:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008de0:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008de7:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
10008dee:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
10008df5:	31 d6                	xor    esi,edx
10008df7:	89 f0                	mov    eax,esi
10008df9:	c1 e8 06             	shr    eax,0x6
10008dfc:	89 f5                	mov    ebp,esi
10008dfe:	c1 ed 0e             	shr    ebp,0xe
10008e01:	89 f2                	mov    edx,esi
10008e03:	c1 ea 16             	shr    edx,0x16
10008e06:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008e0d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e13:	25 fc 03 00 00       	and    eax,0x3fc
10008e18:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e1e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008e24:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008e28:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008e2f:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
10008e36:	33 9c 24 68 10 00 00 	xor    ebx,DWORD PTR [esp+0x1068]
10008e3d:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10008e44:	31 d3                	xor    ebx,edx
10008e46:	89 dd                	mov    ebp,ebx
10008e48:	c1 ed 06             	shr    ebp,0x6
10008e4b:	89 da                	mov    edx,ebx
10008e4d:	c1 ea 0e             	shr    edx,0xe
10008e50:	89 d8                	mov    eax,ebx
10008e52:	c1 e8 16             	shr    eax,0x16
10008e55:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
10008e5c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e62:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e68:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008e6e:	25 fc 03 00 00       	and    eax,0x3fc
10008e73:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008e77:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10008e7e:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10008e85:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
10008e8c:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008e93:	89 c2                	mov    edx,eax
10008e95:	31 f2                	xor    edx,esi
10008e97:	89 d7                	mov    edi,edx
10008e99:	c1 ef 06             	shr    edi,0x6
10008e9c:	89 d5                	mov    ebp,edx
10008e9e:	c1 ed 0e             	shr    ebp,0xe
10008ea1:	89 d0                	mov    eax,edx
10008ea3:	c1 e8 16             	shr    eax,0x16
10008ea6:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008ead:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008eb3:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008eb9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ebf:	25 fc 03 00 00       	and    eax,0x3fc
10008ec4:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008ec8:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008ecf:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008ed6:	33 9c 24 70 10 00 00 	xor    ebx,DWORD PTR [esp+0x1070]
10008edd:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008ee4:	31 c3                	xor    ebx,eax
10008ee6:	89 df                	mov    edi,ebx
10008ee8:	c1 ef 06             	shr    edi,0x6
10008eeb:	89 dd                	mov    ebp,ebx
10008eed:	c1 ed 0e             	shr    ebp,0xe
10008ef0:	89 d8                	mov    eax,ebx
10008ef2:	c1 e8 16             	shr    eax,0x16
10008ef5:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10008efc:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008f02:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f08:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f0e:	25 fc 03 00 00       	and    eax,0x3fc
10008f13:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008f17:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008f1e:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008f25:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10008f2c:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008f33:	31 c2                	xor    edx,eax
10008f35:	89 d7                	mov    edi,edx
10008f37:	c1 ef 06             	shr    edi,0x6
10008f3a:	89 d5                	mov    ebp,edx
10008f3c:	c1 ed 0e             	shr    ebp,0xe
10008f3f:	89 d0                	mov    eax,edx
10008f41:	c1 e8 16             	shr    eax,0x16
10008f44:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008f4b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008f51:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f57:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f5d:	25 fc 03 00 00       	and    eax,0x3fc
10008f62:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008f66:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008f6d:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008f74:	33 9c 24 78 10 00 00 	xor    ebx,DWORD PTR [esp+0x1078]
10008f7b:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008f82:	31 c3                	xor    ebx,eax
10008f84:	89 df                	mov    edi,ebx
10008f86:	c1 ef 06             	shr    edi,0x6
10008f89:	89 dd                	mov    ebp,ebx
10008f8b:	c1 ed 0e             	shr    ebp,0xe
10008f8e:	89 d8                	mov    eax,ebx
10008f90:	c1 e8 16             	shr    eax,0x16
10008f93:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10008f9a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008fa0:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008fa6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008fac:	25 fc 03 00 00       	and    eax,0x3fc
10008fb1:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008fb5:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008fbc:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008fc3:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10008fca:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008fd1:	31 c2                	xor    edx,eax
10008fd3:	89 d7                	mov    edi,edx
10008fd5:	c1 ef 06             	shr    edi,0x6
10008fd8:	89 d5                	mov    ebp,edx
10008fda:	c1 ed 0e             	shr    ebp,0xe
10008fdd:	89 d0                	mov    eax,edx
10008fdf:	c1 e8 16             	shr    eax,0x16
10008fe2:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008fe9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008fef:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008ff5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ffb:	25 fc 03 00 00       	and    eax,0x3fc
10009000:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009004:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000900b:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10009012:	33 9c 24 80 10 00 00 	xor    ebx,DWORD PTR [esp+0x1080]
10009019:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10009020:	31 c3                	xor    ebx,eax
10009022:	89 df                	mov    edi,ebx
10009024:	c1 ef 06             	shr    edi,0x6
10009027:	89 dd                	mov    ebp,ebx
10009029:	c1 ed 0e             	shr    ebp,0xe
1000902c:	89 d8                	mov    eax,ebx
1000902e:	c1 e8 16             	shr    eax,0x16
10009031:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10009038:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000903e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009044:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000904a:	25 fc 03 00 00       	and    eax,0x3fc
1000904f:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009053:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000905a:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10009061:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10009068:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
1000906f:	31 d0                	xor    eax,edx
10009071:	89 c7                	mov    edi,eax
10009073:	c1 ef 06             	shr    edi,0x6
10009076:	89 c5                	mov    ebp,eax
10009078:	c1 ed 0e             	shr    ebp,0xe
1000907b:	89 c2                	mov    edx,eax
1000907d:	c1 ea 16             	shr    edx,0x16
10009080:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009087:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000908d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009093:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009099:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000909f:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100090a3:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100090aa:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100090b1:	33 9c 24 88 10 00 00 	xor    ebx,DWORD PTR [esp+0x1088]
100090b8:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100090bf:	31 d3                	xor    ebx,edx
100090c1:	89 df                	mov    edi,ebx
100090c3:	c1 ef 06             	shr    edi,0x6
100090c6:	89 dd                	mov    ebp,ebx
100090c8:	c1 ed 0e             	shr    ebp,0xe
100090cb:	89 da                	mov    edx,ebx
100090cd:	c1 ea 16             	shr    edx,0x16
100090d0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100090d7:	81 e6 fc 03 00 00    	and    esi,0x3fc
100090dd:	81 e7 fc 03 00 00    	and    edi,0x3fc
100090e3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100090e9:	81 e2 fc 03 00 00    	and    edx,0x3fc
100090ef:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100090f3:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100090fa:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009101:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10009108:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000910f:	31 d0                	xor    eax,edx
10009111:	89 c7                	mov    edi,eax
10009113:	c1 ef 06             	shr    edi,0x6
10009116:	89 c5                	mov    ebp,eax
10009118:	c1 ed 0e             	shr    ebp,0xe
1000911b:	89 c2                	mov    edx,eax
1000911d:	c1 ea 16             	shr    edx,0x16
10009120:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009127:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000912d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009133:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009139:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000913f:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009143:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000914a:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009151:	33 9c 24 90 10 00 00 	xor    ebx,DWORD PTR [esp+0x1090]
10009158:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000915f:	31 d3                	xor    ebx,edx
10009161:	89 df                	mov    edi,ebx
10009163:	c1 ef 06             	shr    edi,0x6
10009166:	89 dd                	mov    ebp,ebx
10009168:	c1 ed 0e             	shr    ebp,0xe
1000916b:	89 da                	mov    edx,ebx
1000916d:	c1 ea 16             	shr    edx,0x16
10009170:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10009177:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000917d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009183:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009189:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000918f:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009193:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000919a:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100091a1:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
100091a8:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100091af:	31 d0                	xor    eax,edx
100091b1:	89 c7                	mov    edi,eax
100091b3:	c1 ef 06             	shr    edi,0x6
100091b6:	89 c5                	mov    ebp,eax
100091b8:	c1 ed 0e             	shr    ebp,0xe
100091bb:	89 c2                	mov    edx,eax
100091bd:	c1 ea 16             	shr    edx,0x16
100091c0:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100091c7:	81 e6 fc 03 00 00    	and    esi,0x3fc
100091cd:	81 e7 fc 03 00 00    	and    edi,0x3fc
100091d3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100091d9:	81 e2 fc 03 00 00    	and    edx,0x3fc
100091df:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100091e3:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100091ea:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100091f1:	33 9c 24 98 10 00 00 	xor    ebx,DWORD PTR [esp+0x1098]
100091f8:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100091ff:	31 d3                	xor    ebx,edx
10009201:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10009208:	89 41 f8             	mov    DWORD PTR [ecx-0x8],eax
1000920b:	89 59 fc             	mov    DWORD PTR [ecx-0x4],ebx
1000920e:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10009215:	39 d1                	cmp    ecx,edx
10009217:	0f 85 a4 f5 ff ff    	jne    100087c1 <_crypt_blowfish_rn+0x695>
1000921d:	8b 84 24 a0 10 00 00 	mov    eax,DWORD PTR [esp+0x10a0]
10009224:	31 84 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],eax
1000922b:	8b 84 24 a4 10 00 00 	mov    eax,DWORD PTR [esp+0x10a4]
10009232:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
10009239:	8b 84 24 a8 10 00 00 	mov    eax,DWORD PTR [esp+0x10a8]
10009240:	31 84 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],eax
10009247:	8b 84 24 ac 10 00 00 	mov    eax,DWORD PTR [esp+0x10ac]
1000924e:	31 84 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],eax
10009255:	8b 84 24 b0 10 00 00 	mov    eax,DWORD PTR [esp+0x10b0]
1000925c:	31 84 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],eax
10009263:	8b 84 24 b4 10 00 00 	mov    eax,DWORD PTR [esp+0x10b4]
1000926a:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
10009271:	8b 84 24 b8 10 00 00 	mov    eax,DWORD PTR [esp+0x10b8]
10009278:	31 84 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],eax
1000927f:	8b 84 24 bc 10 00 00 	mov    eax,DWORD PTR [esp+0x10bc]
10009286:	31 84 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],eax
1000928d:	8b 84 24 c0 10 00 00 	mov    eax,DWORD PTR [esp+0x10c0]
10009294:	31 84 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],eax
1000929b:	8b 84 24 c4 10 00 00 	mov    eax,DWORD PTR [esp+0x10c4]
100092a2:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
100092a9:	8b 84 24 c8 10 00 00 	mov    eax,DWORD PTR [esp+0x10c8]
100092b0:	31 84 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],eax
100092b7:	8b 84 24 cc 10 00 00 	mov    eax,DWORD PTR [esp+0x10cc]
100092be:	31 84 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],eax
100092c5:	8b 84 24 d0 10 00 00 	mov    eax,DWORD PTR [esp+0x10d0]
100092cc:	31 84 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],eax
100092d3:	8b 84 24 d4 10 00 00 	mov    eax,DWORD PTR [esp+0x10d4]
100092da:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
100092e1:	8b 84 24 d8 10 00 00 	mov    eax,DWORD PTR [esp+0x10d8]
100092e8:	31 84 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],eax
100092ef:	8b 84 24 dc 10 00 00 	mov    eax,DWORD PTR [esp+0x10dc]
100092f6:	31 84 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],eax
100092fd:	8b 84 24 e0 10 00 00 	mov    eax,DWORD PTR [esp+0x10e0]
10009304:	31 84 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],eax
1000930b:	8b 84 24 e4 10 00 00 	mov    eax,DWORD PTR [esp+0x10e4]
10009312:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
10009319:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
10009320:	b9 00 00 00 00       	mov    ecx,0x0
10009325:	b8 00 00 00 00       	mov    eax,0x0
1000932a:	83 c3 08             	add    ebx,0x8
1000932d:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10009334:	89 c7                	mov    edi,eax
10009336:	c1 ef 06             	shr    edi,0x6
10009339:	89 c5                	mov    ebp,eax
1000933b:	c1 ed 0e             	shr    ebp,0xe
1000933e:	89 c2                	mov    edx,eax
10009340:	c1 ea 16             	shr    edx,0x16
10009343:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000934a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009350:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009356:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000935c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009362:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009366:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000936d:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009374:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000937b:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10009382:	31 ca                	xor    edx,ecx
10009384:	89 d5                	mov    ebp,edx
10009386:	c1 ed 06             	shr    ebp,0x6
10009389:	89 d6                	mov    esi,edx
1000938b:	c1 ee 0e             	shr    esi,0xe
1000938e:	89 d1                	mov    ecx,edx
10009390:	c1 e9 16             	shr    ecx,0x16
10009393:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
1000939a:	81 e7 fc 03 00 00    	and    edi,0x3fc
100093a0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100093a6:	81 e6 fc 03 00 00    	and    esi,0x3fc
100093ac:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100093b2:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100093b6:	03 8c 34 58 04 00 00 	add    ecx,DWORD PTR [esp+esi*1+0x458]
100093bd:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
100093c4:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
100093cb:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
100093d2:	31 c8                	xor    eax,ecx
100093d4:	89 c7                	mov    edi,eax
100093d6:	c1 ef 06             	shr    edi,0x6
100093d9:	89 c5                	mov    ebp,eax
100093db:	c1 ed 0e             	shr    ebp,0xe
100093de:	89 c1                	mov    ecx,eax
100093e0:	c1 e9 16             	shr    ecx,0x16
100093e3:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100093ea:	81 e6 fc 03 00 00    	and    esi,0x3fc
100093f0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100093f6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100093fc:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009402:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009406:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000940d:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009414:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
1000941b:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009422:	31 d1                	xor    ecx,edx
10009424:	89 cd                	mov    ebp,ecx
10009426:	c1 ed 06             	shr    ebp,0x6
10009429:	89 ce                	mov    esi,ecx
1000942b:	c1 ee 0e             	shr    esi,0xe
1000942e:	89 ca                	mov    edx,ecx
10009430:	c1 ea 16             	shr    edx,0x16
10009433:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000943a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009440:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009446:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000944c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009452:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009456:	03 94 34 58 04 00 00 	add    edx,DWORD PTR [esp+esi*1+0x458]
1000945d:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
10009464:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
1000946b:	89 d6                	mov    esi,edx
1000946d:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10009474:	31 c6                	xor    esi,eax
10009476:	89 f2                	mov    edx,esi
10009478:	c1 ea 06             	shr    edx,0x6
1000947b:	89 f5                	mov    ebp,esi
1000947d:	c1 ed 0e             	shr    ebp,0xe
10009480:	89 f0                	mov    eax,esi
10009482:	c1 e8 16             	shr    eax,0x16
10009485:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000948c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009492:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009498:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000949e:	25 fc 03 00 00       	and    eax,0x3fc
100094a3:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100094a7:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100094ae:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
100094b5:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
100094bc:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100094c3:	31 c8                	xor    eax,ecx
100094c5:	89 c7                	mov    edi,eax
100094c7:	c1 ef 06             	shr    edi,0x6
100094ca:	89 c5                	mov    ebp,eax
100094cc:	c1 ed 0e             	shr    ebp,0xe
100094cf:	89 c2                	mov    edx,eax
100094d1:	c1 ea 16             	shr    edx,0x16
100094d4:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
100094db:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100094e1:	81 e7 fc 03 00 00    	and    edi,0x3fc
100094e7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100094ed:	81 e2 fc 03 00 00    	and    edx,0x3fc
100094f3:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100094f7:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100094fe:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009505:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
1000950c:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009513:	31 f2                	xor    edx,esi
10009515:	89 d7                	mov    edi,edx
10009517:	c1 ef 06             	shr    edi,0x6
1000951a:	89 d5                	mov    ebp,edx
1000951c:	c1 ed 0e             	shr    ebp,0xe
1000951f:	89 d1                	mov    ecx,edx
10009521:	c1 e9 16             	shr    ecx,0x16
10009524:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000952b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009531:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009537:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000953d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009543:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009547:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000954e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009555:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
1000955c:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009563:	31 c8                	xor    eax,ecx
10009565:	89 c7                	mov    edi,eax
10009567:	c1 ef 06             	shr    edi,0x6
1000956a:	89 c5                	mov    ebp,eax
1000956c:	c1 ed 0e             	shr    ebp,0xe
1000956f:	89 c1                	mov    ecx,eax
10009571:	c1 e9 16             	shr    ecx,0x16
10009574:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000957b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009581:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009587:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000958d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009593:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009597:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000959e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100095a5:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
100095ac:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100095b3:	31 ca                	xor    edx,ecx
100095b5:	89 d7                	mov    edi,edx
100095b7:	c1 ef 06             	shr    edi,0x6
100095ba:	89 d5                	mov    ebp,edx
100095bc:	c1 ed 0e             	shr    ebp,0xe
100095bf:	89 d1                	mov    ecx,edx
100095c1:	c1 e9 16             	shr    ecx,0x16
100095c4:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100095cb:	81 e6 fc 03 00 00    	and    esi,0x3fc
100095d1:	81 e7 fc 03 00 00    	and    edi,0x3fc
100095d7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100095dd:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100095e3:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100095e7:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100095ee:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100095f5:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
100095fc:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009603:	31 c8                	xor    eax,ecx
10009605:	89 c7                	mov    edi,eax
10009607:	c1 ef 06             	shr    edi,0x6
1000960a:	89 c5                	mov    ebp,eax
1000960c:	c1 ed 0e             	shr    ebp,0xe
1000960f:	89 c1                	mov    ecx,eax
10009611:	c1 e9 16             	shr    ecx,0x16
10009614:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000961b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009621:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009627:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000962d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009633:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009637:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000963e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009645:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
1000964c:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009653:	31 ca                	xor    edx,ecx
10009655:	89 d7                	mov    edi,edx
10009657:	c1 ef 06             	shr    edi,0x6
1000965a:	89 d5                	mov    ebp,edx
1000965c:	c1 ed 0e             	shr    ebp,0xe
1000965f:	89 d1                	mov    ecx,edx
10009661:	c1 e9 16             	shr    ecx,0x16
10009664:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000966b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009671:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009677:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000967d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009683:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009687:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000968e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009695:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
1000969c:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100096a3:	31 c8                	xor    eax,ecx
100096a5:	89 c7                	mov    edi,eax
100096a7:	c1 ef 06             	shr    edi,0x6
100096aa:	89 c5                	mov    ebp,eax
100096ac:	c1 ed 0e             	shr    ebp,0xe
100096af:	89 c1                	mov    ecx,eax
100096b1:	c1 e9 16             	shr    ecx,0x16
100096b4:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100096bb:	81 e6 fc 03 00 00    	and    esi,0x3fc
100096c1:	81 e7 fc 03 00 00    	and    edi,0x3fc
100096c7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100096cd:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100096d3:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100096d7:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100096de:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100096e5:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
100096ec:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100096f3:	31 ca                	xor    edx,ecx
100096f5:	89 d7                	mov    edi,edx
100096f7:	c1 ef 06             	shr    edi,0x6
100096fa:	89 d5                	mov    ebp,edx
100096fc:	c1 ed 0e             	shr    ebp,0xe
100096ff:	89 d1                	mov    ecx,edx
10009701:	c1 e9 16             	shr    ecx,0x16
10009704:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000970b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009711:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009717:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000971d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009723:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009727:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000972e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009735:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
1000973c:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009743:	31 c8                	xor    eax,ecx
10009745:	89 c7                	mov    edi,eax
10009747:	c1 ef 06             	shr    edi,0x6
1000974a:	89 c5                	mov    ebp,eax
1000974c:	c1 ed 0e             	shr    ebp,0xe
1000974f:	89 c1                	mov    ecx,eax
10009751:	c1 e9 16             	shr    ecx,0x16
10009754:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000975b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009761:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009767:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000976d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009773:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009777:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000977e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009785:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
1000978c:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009793:	31 ca                	xor    edx,ecx
10009795:	89 d7                	mov    edi,edx
10009797:	c1 ef 06             	shr    edi,0x6
1000979a:	89 d5                	mov    ebp,edx
1000979c:	c1 ed 0e             	shr    ebp,0xe
1000979f:	89 d6                	mov    esi,edx
100097a1:	c1 ee 16             	shr    esi,0x16
100097a4:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
100097ab:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100097b1:	81 e7 fc 03 00 00    	and    edi,0x3fc
100097b7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100097bd:	81 e6 fc 03 00 00    	and    esi,0x3fc
100097c3:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
100097c7:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
100097ce:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
100097d5:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
100097dc:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
100097e3:	31 f0                	xor    eax,esi
100097e5:	89 c5                	mov    ebp,eax
100097e7:	c1 ed 06             	shr    ebp,0x6
100097ea:	89 c1                	mov    ecx,eax
100097ec:	c1 e9 0e             	shr    ecx,0xe
100097ef:	89 c6                	mov    esi,eax
100097f1:	c1 ee 16             	shr    esi,0x16
100097f4:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100097fb:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009801:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009807:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000980d:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009813:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10009817:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
1000981e:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10009825:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
1000982c:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10009833:	89 f1                	mov    ecx,esi
10009835:	31 d1                	xor    ecx,edx
10009837:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
1000983e:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10009841:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
10009844:	8d b4 24 a0 10 00 00 	lea    esi,[esp+0x10a0]
1000984b:	39 f3                	cmp    ebx,esi
1000984d:	0f 85 d7 fa ff ff    	jne    1000932a <_crypt_blowfish_rn+0x11fe>
10009853:	8d 5c 24 58          	lea    ebx,[esp+0x58]
10009857:	83 c3 08             	add    ebx,0x8
1000985a:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10009861:	89 c7                	mov    edi,eax
10009863:	c1 ef 06             	shr    edi,0x6
10009866:	89 c5                	mov    ebp,eax
10009868:	c1 ed 0e             	shr    ebp,0xe
1000986b:	89 c2                	mov    edx,eax
1000986d:	c1 ea 16             	shr    edx,0x16
10009870:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009877:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000987d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009883:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009889:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000988f:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009893:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000989a:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100098a1:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100098a8:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
100098af:	31 ca                	xor    edx,ecx
100098b1:	89 d7                	mov    edi,edx
100098b3:	c1 ef 06             	shr    edi,0x6
100098b6:	89 d5                	mov    ebp,edx
100098b8:	c1 ed 0e             	shr    ebp,0xe
100098bb:	89 d1                	mov    ecx,edx
100098bd:	c1 e9 16             	shr    ecx,0x16
100098c0:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100098c7:	81 e6 fc 03 00 00    	and    esi,0x3fc
100098cd:	81 e7 fc 03 00 00    	and    edi,0x3fc
100098d3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100098d9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100098df:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100098e3:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100098ea:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100098f1:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
100098f8:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100098ff:	31 c1                	xor    ecx,eax
10009901:	89 cd                	mov    ebp,ecx
10009903:	c1 ed 06             	shr    ebp,0x6
10009906:	89 c8                	mov    eax,ecx
10009908:	c1 e8 0e             	shr    eax,0xe
1000990b:	89 ce                	mov    esi,ecx
1000990d:	c1 ee 16             	shr    esi,0x16
10009910:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009917:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000991d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009923:	25 fc 03 00 00       	and    eax,0x3fc
10009928:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000992e:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10009932:	03 b4 04 58 04 00 00 	add    esi,DWORD PTR [esp+eax*1+0x458]
10009939:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10009940:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10009947:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
1000994e:	31 d6                	xor    esi,edx
10009950:	89 f5                	mov    ebp,esi
10009952:	c1 ed 06             	shr    ebp,0x6
10009955:	89 f2                	mov    edx,esi
10009957:	c1 ea 0e             	shr    edx,0xe
1000995a:	89 f0                	mov    eax,esi
1000995c:	c1 e8 16             	shr    eax,0x16
1000995f:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009966:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000996c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009972:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009978:	25 fc 03 00 00       	and    eax,0x3fc
1000997d:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009981:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10009988:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
1000998f:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
10009996:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000999d:	31 c1                	xor    ecx,eax
1000999f:	89 ca                	mov    edx,ecx
100099a1:	c1 ea 06             	shr    edx,0x6
100099a4:	89 cd                	mov    ebp,ecx
100099a6:	c1 ed 0e             	shr    ebp,0xe
100099a9:	89 c8                	mov    eax,ecx
100099ab:	c1 e8 16             	shr    eax,0x16
100099ae:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100099b5:	81 e7 fc 03 00 00    	and    edi,0x3fc
100099bb:	81 e2 fc 03 00 00    	and    edx,0x3fc
100099c1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100099c7:	25 fc 03 00 00       	and    eax,0x3fc
100099cc:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100099d0:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100099d7:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
100099de:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
100099e5:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100099ec:	31 f0                	xor    eax,esi
100099ee:	89 c7                	mov    edi,eax
100099f0:	c1 ef 06             	shr    edi,0x6
100099f3:	89 c5                	mov    ebp,eax
100099f5:	c1 ed 0e             	shr    ebp,0xe
100099f8:	89 c2                	mov    edx,eax
100099fa:	c1 ea 16             	shr    edx,0x16
100099fd:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009a04:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009a0a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009a10:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009a16:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009a1c:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009a20:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009a27:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009a2e:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
10009a35:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10009a3c:	31 ca                	xor    edx,ecx
10009a3e:	89 d7                	mov    edi,edx
10009a40:	c1 ef 06             	shr    edi,0x6
10009a43:	89 d5                	mov    ebp,edx
10009a45:	c1 ed 0e             	shr    ebp,0xe
10009a48:	89 d1                	mov    ecx,edx
10009a4a:	c1 e9 16             	shr    ecx,0x16
10009a4d:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009a54:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009a5a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009a60:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009a66:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009a6c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009a70:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009a77:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009a7e:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10009a85:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009a8c:	31 c8                	xor    eax,ecx
10009a8e:	89 c7                	mov    edi,eax
10009a90:	c1 ef 06             	shr    edi,0x6
10009a93:	89 c5                	mov    ebp,eax
10009a95:	c1 ed 0e             	shr    ebp,0xe
10009a98:	89 c1                	mov    ecx,eax
10009a9a:	c1 e9 16             	shr    ecx,0x16
10009a9d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009aa4:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009aaa:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009ab0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ab6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009abc:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009ac0:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009ac7:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009ace:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10009ad5:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009adc:	31 ca                	xor    edx,ecx
10009ade:	89 d7                	mov    edi,edx
10009ae0:	c1 ef 06             	shr    edi,0x6
10009ae3:	89 d5                	mov    ebp,edx
10009ae5:	c1 ed 0e             	shr    ebp,0xe
10009ae8:	89 d1                	mov    ecx,edx
10009aea:	c1 e9 16             	shr    ecx,0x16
10009aed:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009af4:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009afa:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009b00:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009b06:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009b0c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009b10:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009b17:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009b1e:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10009b25:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009b2c:	31 c8                	xor    eax,ecx
10009b2e:	89 c7                	mov    edi,eax
10009b30:	c1 ef 06             	shr    edi,0x6
10009b33:	89 c5                	mov    ebp,eax
10009b35:	c1 ed 0e             	shr    ebp,0xe
10009b38:	89 c1                	mov    ecx,eax
10009b3a:	c1 e9 16             	shr    ecx,0x16
10009b3d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009b44:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009b4a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009b50:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009b56:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009b5c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009b60:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009b67:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009b6e:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10009b75:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009b7c:	31 ca                	xor    edx,ecx
10009b7e:	89 d7                	mov    edi,edx
10009b80:	c1 ef 06             	shr    edi,0x6
10009b83:	89 d5                	mov    ebp,edx
10009b85:	c1 ed 0e             	shr    ebp,0xe
10009b88:	89 d1                	mov    ecx,edx
10009b8a:	c1 e9 16             	shr    ecx,0x16
10009b8d:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009b94:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009b9a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009ba0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ba6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009bac:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009bb0:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009bb7:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009bbe:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10009bc5:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009bcc:	31 c8                	xor    eax,ecx
10009bce:	89 c7                	mov    edi,eax
10009bd0:	c1 ef 06             	shr    edi,0x6
10009bd3:	89 c5                	mov    ebp,eax
10009bd5:	c1 ed 0e             	shr    ebp,0xe
10009bd8:	89 c1                	mov    ecx,eax
10009bda:	c1 e9 16             	shr    ecx,0x16
10009bdd:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009be4:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009bea:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009bf0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009bf6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009bfc:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009c00:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009c07:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009c0e:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10009c15:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009c1c:	31 ca                	xor    edx,ecx
10009c1e:	89 d7                	mov    edi,edx
10009c20:	c1 ef 06             	shr    edi,0x6
10009c23:	89 d5                	mov    ebp,edx
10009c25:	c1 ed 0e             	shr    ebp,0xe
10009c28:	89 d1                	mov    ecx,edx
10009c2a:	c1 e9 16             	shr    ecx,0x16
10009c2d:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009c34:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009c3a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009c40:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009c46:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009c4c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009c50:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009c57:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009c5e:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10009c65:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009c6c:	31 c8                	xor    eax,ecx
10009c6e:	89 c7                	mov    edi,eax
10009c70:	c1 ef 06             	shr    edi,0x6
10009c73:	89 c5                	mov    ebp,eax
10009c75:	c1 ed 0e             	shr    ebp,0xe
10009c78:	89 c1                	mov    ecx,eax
10009c7a:	c1 e9 16             	shr    ecx,0x16
10009c7d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009c84:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009c8a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009c90:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009c96:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009c9c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009ca0:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009ca7:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009cae:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10009cb5:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009cbc:	31 ca                	xor    edx,ecx
10009cbe:	89 d7                	mov    edi,edx
10009cc0:	c1 ef 06             	shr    edi,0x6
10009cc3:	89 d5                	mov    ebp,edx
10009cc5:	c1 ed 0e             	shr    ebp,0xe
10009cc8:	89 d6                	mov    esi,edx
10009cca:	c1 ee 16             	shr    esi,0x16
10009ccd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10009cd4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009cda:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009ce0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ce6:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009cec:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10009cf0:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10009cf7:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10009cfe:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10009d05:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10009d0c:	31 f0                	xor    eax,esi
10009d0e:	89 c5                	mov    ebp,eax
10009d10:	c1 ed 06             	shr    ebp,0x6
10009d13:	89 c1                	mov    ecx,eax
10009d15:	c1 e9 0e             	shr    ecx,0xe
10009d18:	89 c6                	mov    esi,eax
10009d1a:	c1 ee 16             	shr    esi,0x16
10009d1d:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10009d24:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009d2a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009d30:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009d36:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009d3c:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10009d40:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
10009d47:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10009d4e:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10009d55:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10009d5c:	89 f1                	mov    ecx,esi
10009d5e:	31 d1                	xor    ecx,edx
10009d60:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10009d67:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10009d6a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
10009d6d:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10009d74:	39 d3                	cmp    ebx,edx
10009d76:	0f 85 db fa ff ff    	jne    10009857 <_crypt_blowfish_rn+0x172b>
10009d7c:	8b 94 24 e8 10 00 00 	mov    edx,DWORD PTR [esp+0x10e8]
10009d83:	8b 84 24 ec 10 00 00 	mov    eax,DWORD PTR [esp+0x10ec]
10009d8a:	8b 9c 24 f0 10 00 00 	mov    ebx,DWORD PTR [esp+0x10f0]
10009d91:	8b 8c 24 f4 10 00 00 	mov    ecx,DWORD PTR [esp+0x10f4]
10009d98:	31 94 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],edx
10009d9f:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
10009da6:	31 9c 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],ebx
10009dad:	31 8c 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],ecx
10009db4:	31 94 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],edx
10009dbb:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
10009dc2:	31 9c 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],ebx
10009dc9:	31 8c 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],ecx
10009dd0:	31 94 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],edx
10009dd7:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
10009dde:	31 9c 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],ebx
10009de5:	31 8c 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],ecx
10009dec:	31 94 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],edx
10009df3:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
10009dfa:	31 9c 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],ebx
10009e01:	31 8c 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],ecx
10009e08:	31 94 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],edx
10009e0f:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
10009e16:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
10009e1d:	be 00 00 00 00       	mov    esi,0x0
10009e22:	b8 00 00 00 00       	mov    eax,0x0
10009e27:	83 c3 08             	add    ebx,0x8
10009e2a:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10009e31:	89 c7                	mov    edi,eax
10009e33:	c1 ef 06             	shr    edi,0x6
10009e36:	89 c5                	mov    ebp,eax
10009e38:	c1 ed 0e             	shr    ebp,0xe
10009e3b:	89 c2                	mov    edx,eax
10009e3d:	c1 ea 16             	shr    edx,0x16
10009e40:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009e47:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009e4d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009e53:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009e59:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009e5f:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009e63:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009e6a:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009e71:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009e78:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10009e7f:	31 d6                	xor    esi,edx
10009e81:	89 f7                	mov    edi,esi
10009e83:	c1 ef 06             	shr    edi,0x6
10009e86:	89 f5                	mov    ebp,esi
10009e88:	c1 ed 0e             	shr    ebp,0xe
10009e8b:	89 f1                	mov    ecx,esi
10009e8d:	c1 e9 16             	shr    ecx,0x16
10009e90:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009e97:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009e9d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009ea3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ea9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009eaf:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009eb3:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009eba:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009ec1:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10009ec8:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009ecf:	31 c8                	xor    eax,ecx
10009ed1:	89 c5                	mov    ebp,eax
10009ed3:	c1 ed 06             	shr    ebp,0x6
10009ed6:	89 c2                	mov    edx,eax
10009ed8:	c1 ea 0e             	shr    edx,0xe
10009edb:	89 c1                	mov    ecx,eax
10009edd:	c1 e9 16             	shr    ecx,0x16
10009ee0:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10009ee7:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009eed:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ef3:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009ef9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009eff:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009f03:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
10009f0a:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10009f11:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
10009f18:	89 ca                	mov    edx,ecx
10009f1a:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10009f21:	31 d6                	xor    esi,edx
10009f23:	89 f7                	mov    edi,esi
10009f25:	c1 ef 06             	shr    edi,0x6
10009f28:	89 f5                	mov    ebp,esi
10009f2a:	c1 ed 0e             	shr    ebp,0xe
10009f2d:	89 f1                	mov    ecx,esi
10009f2f:	c1 e9 16             	shr    ecx,0x16
10009f32:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009f39:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009f3f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009f45:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009f4b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009f51:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009f55:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009f5c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009f63:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
10009f6a:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009f71:	31 c1                	xor    ecx,eax
10009f73:	89 cd                	mov    ebp,ecx
10009f75:	c1 ed 06             	shr    ebp,0x6
10009f78:	89 ca                	mov    edx,ecx
10009f7a:	c1 ea 0e             	shr    edx,0xe
10009f7d:	89 c8                	mov    eax,ecx
10009f7f:	c1 e8 16             	shr    eax,0x16
10009f82:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009f89:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009f8f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009f95:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009f9b:	25 fc 03 00 00       	and    eax,0x3fc
10009fa0:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009fa4:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10009fab:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009fb2:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
10009fb9:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009fc0:	89 c2                	mov    edx,eax
10009fc2:	31 f2                	xor    edx,esi
10009fc4:	89 d5                	mov    ebp,edx
10009fc6:	c1 ed 06             	shr    ebp,0x6
10009fc9:	89 d6                	mov    esi,edx
10009fcb:	c1 ee 0e             	shr    esi,0xe
10009fce:	89 d0                	mov    eax,edx
10009fd0:	c1 e8 16             	shr    eax,0x16
10009fd3:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
10009fda:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009fe0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009fe6:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009fec:	25 fc 03 00 00       	and    eax,0x3fc
10009ff1:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009ff5:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
10009ffc:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
1000a003:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
1000a00a:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000a011:	89 c6                	mov    esi,eax
1000a013:	31 ce                	xor    esi,ecx
1000a015:	89 f7                	mov    edi,esi
1000a017:	c1 ef 06             	shr    edi,0x6
1000a01a:	89 f5                	mov    ebp,esi
1000a01c:	c1 ed 0e             	shr    ebp,0xe
1000a01f:	89 f0                	mov    eax,esi
1000a021:	c1 e8 16             	shr    eax,0x16
1000a024:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
1000a02b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a031:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a037:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a03d:	25 fc 03 00 00       	and    eax,0x3fc
1000a042:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a046:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a04d:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000a054:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
1000a05b:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
1000a062:	31 c2                	xor    edx,eax
1000a064:	89 d7                	mov    edi,edx
1000a066:	c1 ef 06             	shr    edi,0x6
1000a069:	89 d5                	mov    ebp,edx
1000a06b:	c1 ed 0e             	shr    ebp,0xe
1000a06e:	89 d0                	mov    eax,edx
1000a070:	c1 e8 16             	shr    eax,0x16
1000a073:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000a07a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a080:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a086:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a08c:	25 fc 03 00 00       	and    eax,0x3fc
1000a091:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a095:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a09c:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000a0a3:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
1000a0aa:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
1000a0b1:	31 c6                	xor    esi,eax
1000a0b3:	89 f7                	mov    edi,esi
1000a0b5:	c1 ef 06             	shr    edi,0x6
1000a0b8:	89 f5                	mov    ebp,esi
1000a0ba:	c1 ed 0e             	shr    ebp,0xe
1000a0bd:	89 f0                	mov    eax,esi
1000a0bf:	c1 e8 16             	shr    eax,0x16
1000a0c2:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
1000a0c9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a0cf:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a0d5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a0db:	25 fc 03 00 00       	and    eax,0x3fc
1000a0e0:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a0e4:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a0eb:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000a0f2:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
1000a0f9:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
1000a100:	31 c2                	xor    edx,eax
1000a102:	89 d7                	mov    edi,edx
1000a104:	c1 ef 06             	shr    edi,0x6
1000a107:	89 d5                	mov    ebp,edx
1000a109:	c1 ed 0e             	shr    ebp,0xe
1000a10c:	89 d0                	mov    eax,edx
1000a10e:	c1 e8 16             	shr    eax,0x16
1000a111:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000a118:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a11e:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a124:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a12a:	25 fc 03 00 00       	and    eax,0x3fc
1000a12f:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a133:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a13a:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000a141:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
1000a148:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
1000a14f:	31 c6                	xor    esi,eax
1000a151:	89 f7                	mov    edi,esi
1000a153:	c1 ef 06             	shr    edi,0x6
1000a156:	89 f5                	mov    ebp,esi
1000a158:	c1 ed 0e             	shr    ebp,0xe
1000a15b:	89 f0                	mov    eax,esi
1000a15d:	c1 e8 16             	shr    eax,0x16
1000a160:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
1000a167:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a16d:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a173:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a179:	25 fc 03 00 00       	and    eax,0x3fc
1000a17e:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a182:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a189:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000a190:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
1000a197:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
1000a19e:	31 d0                	xor    eax,edx
1000a1a0:	89 c7                	mov    edi,eax
1000a1a2:	c1 ef 06             	shr    edi,0x6
1000a1a5:	89 c5                	mov    ebp,eax
1000a1a7:	c1 ed 0e             	shr    ebp,0xe
1000a1aa:	89 c2                	mov    edx,eax
1000a1ac:	c1 ea 16             	shr    edx,0x16
1000a1af:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a1b6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a1bc:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a1c2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a1c8:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a1ce:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a1d2:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a1d9:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a1e0:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
1000a1e7:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a1ee:	31 d6                	xor    esi,edx
1000a1f0:	89 f7                	mov    edi,esi
1000a1f2:	c1 ef 06             	shr    edi,0x6
1000a1f5:	89 f5                	mov    ebp,esi
1000a1f7:	c1 ed 0e             	shr    ebp,0xe
1000a1fa:	89 f2                	mov    edx,esi
1000a1fc:	c1 ea 16             	shr    edx,0x16
1000a1ff:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
1000a206:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a20c:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a212:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a218:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a21e:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a222:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a229:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a230:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
1000a237:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a23e:	31 d0                	xor    eax,edx
1000a240:	89 c7                	mov    edi,eax
1000a242:	c1 ef 06             	shr    edi,0x6
1000a245:	89 c5                	mov    ebp,eax
1000a247:	c1 ed 0e             	shr    ebp,0xe
1000a24a:	89 c2                	mov    edx,eax
1000a24c:	c1 ea 16             	shr    edx,0x16
1000a24f:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a256:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a25c:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a262:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a268:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a26e:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a272:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a279:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a280:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
1000a287:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a28e:	31 d6                	xor    esi,edx
1000a290:	89 f2                	mov    edx,esi
1000a292:	c1 ea 06             	shr    edx,0x6
1000a295:	89 f5                	mov    ebp,esi
1000a297:	c1 ed 0e             	shr    ebp,0xe
1000a29a:	89 f1                	mov    ecx,esi
1000a29c:	c1 e9 16             	shr    ecx,0x16
1000a29f:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000a2a6:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a2ac:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a2b2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a2b8:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a2be:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a2c2:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a2c9:	33 8c 14 58 08 00 00 	xor    ecx,DWORD PTR [esp+edx*1+0x858]
1000a2d0:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
1000a2d7:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
1000a2de:	31 c8                	xor    eax,ecx
1000a2e0:	89 c5                	mov    ebp,eax
1000a2e2:	c1 ed 06             	shr    ebp,0x6
1000a2e5:	89 c2                	mov    edx,eax
1000a2e7:	c1 ea 0e             	shr    edx,0xe
1000a2ea:	89 c1                	mov    ecx,eax
1000a2ec:	c1 e9 16             	shr    ecx,0x16
1000a2ef:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000a2f6:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a2fc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a302:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a308:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a30e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a312:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
1000a319:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
1000a320:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
1000a327:	89 ca                	mov    edx,ecx
1000a329:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
1000a330:	31 d6                	xor    esi,edx
1000a332:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
1000a339:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
1000a33c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
1000a33f:	8d bc 24 a0 10 00 00 	lea    edi,[esp+0x10a0]
1000a346:	39 fb                	cmp    ebx,edi
1000a348:	0f 85 d9 fa ff ff    	jne    10009e27 <_crypt_blowfish_rn+0x1cfb>
1000a34e:	8d 5c 24 58          	lea    ebx,[esp+0x58]
1000a352:	83 c3 08             	add    ebx,0x8
1000a355:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
1000a35c:	89 c7                	mov    edi,eax
1000a35e:	c1 ef 06             	shr    edi,0x6
1000a361:	89 c5                	mov    ebp,eax
1000a363:	c1 ed 0e             	shr    ebp,0xe
1000a366:	89 c2                	mov    edx,eax
1000a368:	c1 ea 16             	shr    edx,0x16
1000a36b:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a372:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a378:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a37e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a384:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a38a:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a38e:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a395:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a39c:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a3a3:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
1000a3aa:	31 f2                	xor    edx,esi
1000a3ac:	89 d7                	mov    edi,edx
1000a3ae:	c1 ef 06             	shr    edi,0x6
1000a3b1:	89 d5                	mov    ebp,edx
1000a3b3:	c1 ed 0e             	shr    ebp,0xe
1000a3b6:	89 d6                	mov    esi,edx
1000a3b8:	c1 ee 16             	shr    esi,0x16
1000a3bb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000a3c2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a3c8:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a3ce:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a3d4:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a3da:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000a3de:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
1000a3e5:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
1000a3ec:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
1000a3f3:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
1000a3fa:	31 c6                	xor    esi,eax
1000a3fc:	89 f7                	mov    edi,esi
1000a3fe:	c1 ef 06             	shr    edi,0x6
1000a401:	89 f5                	mov    ebp,esi
1000a403:	c1 ed 0e             	shr    ebp,0xe
1000a406:	89 f1                	mov    ecx,esi
1000a408:	c1 e9 16             	shr    ecx,0x16
1000a40b:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
1000a412:	25 fc 03 00 00       	and    eax,0x3fc
1000a417:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a41d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a423:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a429:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a42d:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a434:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a43b:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
1000a442:	03 8c 04 58 0c 00 00 	add    ecx,DWORD PTR [esp+eax*1+0xc58]
1000a449:	31 d1                	xor    ecx,edx
1000a44b:	89 c8                	mov    eax,ecx
1000a44d:	c1 e8 06             	shr    eax,0x6
1000a450:	89 cd                	mov    ebp,ecx
1000a452:	c1 ed 0e             	shr    ebp,0xe
1000a455:	89 ca                	mov    edx,ecx
1000a457:	c1 ea 16             	shr    edx,0x16
1000a45a:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000a461:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a467:	25 fc 03 00 00       	and    eax,0x3fc
1000a46c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a472:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a478:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a47c:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a483:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
1000a48a:	33 b4 24 68 10 00 00 	xor    esi,DWORD PTR [esp+0x1068]
1000a491:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
1000a498:	31 d6                	xor    esi,edx
1000a49a:	89 f2                	mov    edx,esi
1000a49c:	c1 ea 06             	shr    edx,0x6
1000a49f:	89 f5                	mov    ebp,esi
1000a4a1:	c1 ed 0e             	shr    ebp,0xe
1000a4a4:	89 f0                	mov    eax,esi
1000a4a6:	c1 e8 16             	shr    eax,0x16
1000a4a9:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000a4b0:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a4b6:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a4bc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a4c2:	25 fc 03 00 00       	and    eax,0x3fc
1000a4c7:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a4cb:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a4d2:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000a4d9:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
1000a4e0:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000a4e7:	31 c1                	xor    ecx,eax
1000a4e9:	89 c8                	mov    eax,ecx
1000a4eb:	c1 e8 06             	shr    eax,0x6
1000a4ee:	89 cd                	mov    ebp,ecx
1000a4f0:	c1 ed 0e             	shr    ebp,0xe
1000a4f3:	89 ca                	mov    edx,ecx
1000a4f5:	c1 ea 16             	shr    edx,0x16
1000a4f8:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000a4ff:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a505:	25 fc 03 00 00       	and    eax,0x3fc
1000a50a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a510:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a516:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a51a:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a521:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
1000a528:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
1000a52f:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
1000a536:	31 d6                	xor    esi,edx
1000a538:	89 f2                	mov    edx,esi
1000a53a:	c1 ea 06             	shr    edx,0x6
1000a53d:	89 f5                	mov    ebp,esi
1000a53f:	c1 ed 0e             	shr    ebp,0xe
1000a542:	89 f0                	mov    eax,esi
1000a544:	c1 e8 16             	shr    eax,0x16
1000a547:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000a54e:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a554:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a55a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a560:	25 fc 03 00 00       	and    eax,0x3fc
1000a565:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a569:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a570:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000a577:	33 8c 24 74 10 00 00 	xor    ecx,DWORD PTR [esp+0x1074]
1000a57e:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000a585:	31 c1                	xor    ecx,eax
1000a587:	89 cf                	mov    edi,ecx
1000a589:	c1 ef 06             	shr    edi,0x6
1000a58c:	89 cd                	mov    ebp,ecx
1000a58e:	c1 ed 0e             	shr    ebp,0xe
1000a591:	89 ca                	mov    edx,ecx
1000a593:	c1 ea 16             	shr    edx,0x16
1000a596:	8d 04 8d 00 00 00 00 	lea    eax,[ecx*4+0x0]
1000a59d:	25 fc 03 00 00       	and    eax,0x3fc
1000a5a2:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a5a8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a5ae:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a5b4:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a5b8:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a5bf:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a5c6:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
1000a5cd:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
1000a5d4:	31 d6                	xor    esi,edx
1000a5d6:	89 f2                	mov    edx,esi
1000a5d8:	c1 ea 06             	shr    edx,0x6
1000a5db:	89 f5                	mov    ebp,esi
1000a5dd:	c1 ed 0e             	shr    ebp,0xe
1000a5e0:	89 f0                	mov    eax,esi
1000a5e2:	c1 e8 16             	shr    eax,0x16
1000a5e5:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000a5ec:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a5f2:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a5f8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a5fe:	25 fc 03 00 00       	and    eax,0x3fc
1000a603:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a607:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a60e:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000a615:	33 8c 24 7c 10 00 00 	xor    ecx,DWORD PTR [esp+0x107c]
1000a61c:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000a623:	31 c8                	xor    eax,ecx
1000a625:	89 c7                	mov    edi,eax
1000a627:	c1 ef 06             	shr    edi,0x6
1000a62a:	89 c5                	mov    ebp,eax
1000a62c:	c1 ed 0e             	shr    ebp,0xe
1000a62f:	89 c2                	mov    edx,eax
1000a631:	c1 ea 16             	shr    edx,0x16
1000a634:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a63b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a641:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a647:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a64d:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a653:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a657:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a65e:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a665:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
1000a66c:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a673:	31 d6                	xor    esi,edx
1000a675:	89 f7                	mov    edi,esi
1000a677:	c1 ef 06             	shr    edi,0x6
1000a67a:	89 f5                	mov    ebp,esi
1000a67c:	c1 ed 0e             	shr    ebp,0xe
1000a67f:	89 f1                	mov    ecx,esi
1000a681:	c1 e9 16             	shr    ecx,0x16
1000a684:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
1000a68b:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a691:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a697:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a69d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a6a3:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a6a7:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a6ae:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a6b5:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
1000a6bc:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
1000a6c3:	31 c8                	xor    eax,ecx
1000a6c5:	89 c7                	mov    edi,eax
1000a6c7:	c1 ef 06             	shr    edi,0x6
1000a6ca:	89 c5                	mov    ebp,eax
1000a6cc:	c1 ed 0e             	shr    ebp,0xe
1000a6cf:	89 c2                	mov    edx,eax
1000a6d1:	c1 ea 16             	shr    edx,0x16
1000a6d4:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a6db:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a6e1:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a6e7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a6ed:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a6f3:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a6f7:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a6fe:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a705:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
1000a70c:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a713:	31 d6                	xor    esi,edx
1000a715:	89 f7                	mov    edi,esi
1000a717:	c1 ef 06             	shr    edi,0x6
1000a71a:	89 f5                	mov    ebp,esi
1000a71c:	c1 ed 0e             	shr    ebp,0xe
1000a71f:	89 f1                	mov    ecx,esi
1000a721:	c1 e9 16             	shr    ecx,0x16
1000a724:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
1000a72b:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a731:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a737:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a73d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a743:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a747:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a74e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a755:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
1000a75c:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
1000a763:	31 c8                	xor    eax,ecx
1000a765:	89 c7                	mov    edi,eax
1000a767:	c1 ef 06             	shr    edi,0x6
1000a76a:	89 c5                	mov    ebp,eax
1000a76c:	c1 ed 0e             	shr    ebp,0xe
1000a76f:	89 c2                	mov    edx,eax
1000a771:	c1 ea 16             	shr    edx,0x16
1000a774:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a77b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a781:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a787:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a78d:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a793:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a797:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a79e:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a7a5:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
1000a7ac:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a7b3:	31 d6                	xor    esi,edx
1000a7b5:	89 f7                	mov    edi,esi
1000a7b7:	c1 ef 06             	shr    edi,0x6
1000a7ba:	89 f5                	mov    ebp,esi
1000a7bc:	c1 ed 0e             	shr    ebp,0xe
1000a7bf:	89 f1                	mov    ecx,esi
1000a7c1:	c1 e9 16             	shr    ecx,0x16
1000a7c4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
1000a7cb:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a7d1:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a7d7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a7dd:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a7e3:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a7e7:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a7ee:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a7f5:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
1000a7fc:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
1000a803:	31 c8                	xor    eax,ecx
1000a805:	89 c7                	mov    edi,eax
1000a807:	c1 ef 06             	shr    edi,0x6
1000a80a:	89 c5                	mov    ebp,eax
1000a80c:	c1 ed 0e             	shr    ebp,0xe
1000a80f:	89 c2                	mov    edx,eax
1000a811:	c1 ea 16             	shr    edx,0x16
1000a814:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a81b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a821:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a827:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a82d:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a833:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a837:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a83e:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a845:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
1000a84c:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a853:	31 d6                	xor    esi,edx
1000a855:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
1000a85c:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
1000a85f:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
1000a862:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
1000a869:	39 d3                	cmp    ebx,edx
1000a86b:	0f 85 e1 fa ff ff    	jne    1000a352 <_crypt_blowfish_rn+0x2226>
1000a871:	ff 4c 24 04          	dec    DWORD PTR [esp+0x4]
1000a875:	0f 85 a2 e9 ff ff    	jne    1000921d <_crypt_blowfish_rn+0x10f1>
1000a87b:	8b 84 24 58 10 00 00 	mov    eax,DWORD PTR [esp+0x1058]
1000a882:	89 04 24             	mov    DWORD PTR [esp],eax
1000a885:	8b 84 24 5c 10 00 00 	mov    eax,DWORD PTR [esp+0x105c]
1000a88c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000a890:	8b 84 24 60 10 00 00 	mov    eax,DWORD PTR [esp+0x1060]
1000a897:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000a89b:	8b 84 24 64 10 00 00 	mov    eax,DWORD PTR [esp+0x1064]
1000a8a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000a8a6:	8b 84 24 68 10 00 00 	mov    eax,DWORD PTR [esp+0x1068]
1000a8ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000a8b1:	8b 84 24 6c 10 00 00 	mov    eax,DWORD PTR [esp+0x106c]
1000a8b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000a8bc:	8b 84 24 70 10 00 00 	mov    eax,DWORD PTR [esp+0x1070]
1000a8c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000a8c7:	8b 84 24 74 10 00 00 	mov    eax,DWORD PTR [esp+0x1074]
1000a8ce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000a8d2:	8b 84 24 78 10 00 00 	mov    eax,DWORD PTR [esp+0x1078]
1000a8d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000a8dd:	8b 84 24 7c 10 00 00 	mov    eax,DWORD PTR [esp+0x107c]
1000a8e4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000a8e8:	8b 84 24 80 10 00 00 	mov    eax,DWORD PTR [esp+0x1080]
1000a8ef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000a8f3:	8b 84 24 84 10 00 00 	mov    eax,DWORD PTR [esp+0x1084]
1000a8fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000a8fe:	8b 84 24 88 10 00 00 	mov    eax,DWORD PTR [esp+0x1088]
1000a905:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
1000a909:	8b 84 24 8c 10 00 00 	mov    eax,DWORD PTR [esp+0x108c]
1000a910:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
1000a914:	8b 84 24 90 10 00 00 	mov    eax,DWORD PTR [esp+0x1090]
1000a91b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000a91f:	8b 84 24 94 10 00 00 	mov    eax,DWORD PTR [esp+0x1094]
1000a926:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
1000a92a:	8b 84 24 98 10 00 00 	mov    eax,DWORD PTR [esp+0x1098]
1000a931:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
1000a935:	8b 84 24 9c 10 00 00 	mov    eax,DWORD PTR [esp+0x109c]
1000a93c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
1000a940:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
1000a944:	89 5c 24 4c          	mov    DWORD PTR [esp+0x4c],ebx
1000a948:	8b 04 9d a0 bf 00 10 	mov    eax,DWORD PTR [ebx*4+0x1000bfa0]	1000a94b: R_386_32	.data
1000a94f:	8b 0c 9d a4 bf 00 10 	mov    ecx,DWORD PTR [ebx*4+0x1000bfa4]	1000a952: R_386_32	.data
1000a956:	bb 40 00 00 00       	mov    ebx,0x40
1000a95b:	33 04 24             	xor    eax,DWORD PTR [esp]
1000a95e:	89 c7                	mov    edi,eax
1000a960:	c1 ef 06             	shr    edi,0x6
1000a963:	89 c5                	mov    ebp,eax
1000a965:	c1 ed 0e             	shr    ebp,0xe
1000a968:	89 c2                	mov    edx,eax
1000a96a:	c1 ea 16             	shr    edx,0x16
1000a96d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a974:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a97a:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a980:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a986:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a98c:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a990:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a997:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a99e:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000a9a5:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
1000a9a9:	31 ca                	xor    edx,ecx
1000a9ab:	89 d7                	mov    edi,edx
1000a9ad:	c1 ef 06             	shr    edi,0x6
1000a9b0:	89 d5                	mov    ebp,edx
1000a9b2:	c1 ed 0e             	shr    ebp,0xe
1000a9b5:	89 d1                	mov    ecx,edx
1000a9b7:	c1 e9 16             	shr    ecx,0x16
1000a9ba:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000a9c1:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a9c7:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a9cd:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a9d3:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a9d9:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a9dd:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a9e4:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a9eb:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
1000a9ef:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a9f6:	31 c1                	xor    ecx,eax
1000a9f8:	89 cd                	mov    ebp,ecx
1000a9fa:	c1 ed 06             	shr    ebp,0x6
1000a9fd:	89 ce                	mov    esi,ecx
1000a9ff:	c1 ee 0e             	shr    esi,0xe
1000aa02:	89 c8                	mov    eax,ecx
1000aa04:	c1 e8 16             	shr    eax,0x16
1000aa07:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000aa0e:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000aa14:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000aa1a:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000aa20:	25 fc 03 00 00       	and    eax,0x3fc
1000aa25:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000aa29:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
1000aa30:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
1000aa37:	33 54 24 0c          	xor    edx,DWORD PTR [esp+0xc]
1000aa3b:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000aa42:	89 c6                	mov    esi,eax
1000aa44:	31 d6                	xor    esi,edx
1000aa46:	89 f5                	mov    ebp,esi
1000aa48:	c1 ed 06             	shr    ebp,0x6
1000aa4b:	89 f2                	mov    edx,esi
1000aa4d:	c1 ea 0e             	shr    edx,0xe
1000aa50:	89 f0                	mov    eax,esi
1000aa52:	c1 e8 16             	shr    eax,0x16
1000aa55:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000aa5c:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000aa62:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000aa68:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000aa6e:	25 fc 03 00 00       	and    eax,0x3fc
1000aa73:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000aa77:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
1000aa7e:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
1000aa85:	33 4c 24 10          	xor    ecx,DWORD PTR [esp+0x10]
1000aa89:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000aa90:	31 c1                	xor    ecx,eax
1000aa92:	89 ca                	mov    edx,ecx
1000aa94:	c1 ea 06             	shr    edx,0x6
1000aa97:	89 cd                	mov    ebp,ecx
1000aa99:	c1 ed 0e             	shr    ebp,0xe
1000aa9c:	89 c8                	mov    eax,ecx
1000aa9e:	c1 e8 16             	shr    eax,0x16
1000aaa1:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000aaa8:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000aaae:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000aab4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000aaba:	25 fc 03 00 00       	and    eax,0x3fc
1000aabf:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000aac3:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000aaca:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000aad1:	33 74 24 14          	xor    esi,DWORD PTR [esp+0x14]
1000aad5:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000aadc:	31 f0                	xor    eax,esi
1000aade:	89 c7                	mov    edi,eax
1000aae0:	c1 ef 06             	shr    edi,0x6
1000aae3:	89 c5                	mov    ebp,eax
1000aae5:	c1 ed 0e             	shr    ebp,0xe
1000aae8:	89 c2                	mov    edx,eax
1000aaea:	c1 ea 16             	shr    edx,0x16
1000aaed:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000aaf4:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000aafa:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000ab00:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000ab06:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000ab0c:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000ab10:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000ab17:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000ab1e:	33 4c 24 18          	xor    ecx,DWORD PTR [esp+0x18]
1000ab22:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000ab29:	31 ca                	xor    edx,ecx
1000ab2b:	89 d7                	mov    edi,edx
1000ab2d:	c1 ef 06             	shr    edi,0x6
1000ab30:	89 d5                	mov    ebp,edx
1000ab32:	c1 ed 0e             	shr    ebp,0xe
1000ab35:	89 d1                	mov    ecx,edx
1000ab37:	c1 e9 16             	shr    ecx,0x16
1000ab3a:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000ab41:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000ab47:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000ab4d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000ab53:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000ab59:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000ab5d:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000ab64:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000ab6b:	33 44 24 1c          	xor    eax,DWORD PTR [esp+0x1c]
1000ab6f:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000ab76:	31 c8                	xor    eax,ecx
1000ab78:	89 c7                	mov    edi,eax
1000ab7a:	c1 ef 06             	shr    edi,0x6
1000ab7d:	89 c5                	mov    ebp,eax
1000ab7f:	c1 ed 0e             	shr    ebp,0xe
1000ab82:	89 c1                	mov    ecx,eax
1000ab84:	c1 e9 16             	shr    ecx,0x16
1000ab87:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000ab8e:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000ab94:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000ab9a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000aba0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000aba6:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000abaa:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000abb1:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000abb8:	33 54 24 20          	xor    edx,DWORD PTR [esp+0x20]
1000abbc:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000abc3:	31 ca                	xor    edx,ecx
1000abc5:	89 d7                	mov    edi,edx
1000abc7:	c1 ef 06             	shr    edi,0x6
1000abca:	89 d5                	mov    ebp,edx
1000abcc:	c1 ed 0e             	shr    ebp,0xe
1000abcf:	89 d1                	mov    ecx,edx
1000abd1:	c1 e9 16             	shr    ecx,0x16
1000abd4:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000abdb:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000abe1:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000abe7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000abed:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000abf3:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000abf7:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000abfe:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000ac05:	33 44 24 24          	xor    eax,DWORD PTR [esp+0x24]
1000ac09:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000ac10:	31 c8                	xor    eax,ecx
1000ac12:	89 c7                	mov    edi,eax
1000ac14:	c1 ef 06             	shr    edi,0x6
1000ac17:	89 c5                	mov    ebp,eax
1000ac19:	c1 ed 0e             	shr    ebp,0xe
1000ac1c:	89 c1                	mov    ecx,eax
1000ac1e:	c1 e9 16             	shr    ecx,0x16
1000ac21:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000ac28:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000ac2e:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000ac34:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000ac3a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000ac40:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000ac44:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000ac4b:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000ac52:	33 54 24 28          	xor    edx,DWORD PTR [esp+0x28]
1000ac56:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000ac5d:	31 ca                	xor    edx,ecx
1000ac5f:	89 d7                	mov    edi,edx
1000ac61:	c1 ef 06             	shr    edi,0x6
1000ac64:	89 d5                	mov    ebp,edx
1000ac66:	c1 ed 0e             	shr    ebp,0xe
1000ac69:	89 d1                	mov    ecx,edx
1000ac6b:	c1 e9 16             	shr    ecx,0x16
1000ac6e:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000ac75:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000ac7b:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000ac81:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000ac87:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000ac8d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000ac91:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000ac98:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000ac9f:	33 44 24 2c          	xor    eax,DWORD PTR [esp+0x2c]
1000aca3:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000acaa:	31 c8                	xor    eax,ecx
1000acac:	89 c7                	mov    edi,eax
1000acae:	c1 ef 06             	shr    edi,0x6
1000acb1:	89 c5                	mov    ebp,eax
1000acb3:	c1 ed 0e             	shr    ebp,0xe
1000acb6:	89 c1                	mov    ecx,eax
1000acb8:	c1 e9 16             	shr    ecx,0x16
1000acbb:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000acc2:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000acc8:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000acce:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000acd4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000acda:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000acde:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000ace5:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000acec:	33 54 24 30          	xor    edx,DWORD PTR [esp+0x30]
1000acf0:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000acf7:	31 ca                	xor    edx,ecx
1000acf9:	89 d7                	mov    edi,edx
1000acfb:	c1 ef 06             	shr    edi,0x6
1000acfe:	89 d5                	mov    ebp,edx
1000ad00:	c1 ed 0e             	shr    ebp,0xe
1000ad03:	89 d1                	mov    ecx,edx
1000ad05:	c1 e9 16             	shr    ecx,0x16
1000ad08:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000ad0f:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000ad15:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000ad1b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000ad21:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000ad27:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000ad2b:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000ad32:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000ad39:	33 44 24 34          	xor    eax,DWORD PTR [esp+0x34]
1000ad3d:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000ad44:	31 c8                	xor    eax,ecx
1000ad46:	89 c7                	mov    edi,eax
1000ad48:	c1 ef 06             	shr    edi,0x6
1000ad4b:	89 c5                	mov    ebp,eax
1000ad4d:	c1 ed 0e             	shr    ebp,0xe
1000ad50:	89 c1                	mov    ecx,eax
1000ad52:	c1 e9 16             	shr    ecx,0x16
1000ad55:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000ad5c:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000ad62:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000ad68:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000ad6e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000ad74:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000ad78:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000ad7f:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000ad86:	33 54 24 38          	xor    edx,DWORD PTR [esp+0x38]
1000ad8a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000ad91:	31 ca                	xor    edx,ecx
1000ad93:	89 d7                	mov    edi,edx
1000ad95:	c1 ef 06             	shr    edi,0x6
1000ad98:	89 d5                	mov    ebp,edx
1000ad9a:	c1 ed 0e             	shr    ebp,0xe
1000ad9d:	89 d6                	mov    esi,edx
1000ad9f:	c1 ee 16             	shr    esi,0x16
1000ada2:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000ada9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000adaf:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000adb5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000adbb:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000adc1:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000adc5:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
1000adcc:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
1000add3:	33 44 24 3c          	xor    eax,DWORD PTR [esp+0x3c]
1000add7:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
1000adde:	31 f0                	xor    eax,esi
1000ade0:	89 c5                	mov    ebp,eax
1000ade2:	c1 ed 06             	shr    ebp,0x6
1000ade5:	89 c1                	mov    ecx,eax
1000ade7:	c1 e9 0e             	shr    ecx,0xe
1000adea:	89 c6                	mov    esi,eax
1000adec:	c1 ee 16             	shr    esi,0x16
1000adef:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000adf6:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000adfc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000ae02:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000ae08:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000ae0e:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000ae12:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
1000ae19:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
1000ae20:	33 54 24 40          	xor    edx,DWORD PTR [esp+0x40]
1000ae24:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
1000ae2b:	89 f1                	mov    ecx,esi
1000ae2d:	31 d1                	xor    ecx,edx
1000ae2f:	33 44 24 44          	xor    eax,DWORD PTR [esp+0x44]
1000ae33:	4b                   	dec    ebx
1000ae34:	0f 85 21 fb ff ff    	jne    1000a95b <_crypt_blowfish_rn+0x282f>
1000ae3a:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
1000ae3e:	89 84 9c e8 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10e8],eax
1000ae45:	89 8c 9c ec 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10ec],ecx
1000ae4c:	83 44 24 48 02       	add    DWORD PTR [esp+0x48],0x2
1000ae51:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000ae55:	83 f8 06             	cmp    eax,0x6
1000ae58:	0f 85 e2 fa ff ff    	jne    1000a940 <_crypt_blowfish_rn+0x2814>
1000ae5e:	b9 07 00 00 00       	mov    ecx,0x7
1000ae63:	8b bc 24 1c 11 00 00 	mov    edi,DWORD PTR [esp+0x111c]
1000ae6a:	8b b4 24 18 11 00 00 	mov    esi,DWORD PTR [esp+0x1118]
1000ae71:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000ae73:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
1000ae7a:	0f be 40 1c          	movsx  eax,BYTE PTR [eax+0x1c]
1000ae7e:	8a 80 60 d0 00 10    	mov    al,BYTE PTR [eax+0x1000d060]	1000ae80: R_386_32	.data
1000ae84:	83 e0 30             	and    eax,0x30
1000ae87:	8a 80 20 d0 00 10    	mov    al,BYTE PTR [eax+0x1000d020]	1000ae89: R_386_32	.data
1000ae8d:	88 04 24             	mov    BYTE PTR [esp],al
1000ae90:	8b 9c 24 1c 11 00 00 	mov    ebx,DWORD PTR [esp+0x111c]
1000ae97:	88 43 1c             	mov    BYTE PTR [ebx+0x1c],al
1000ae9a:	6a 06                	push   0x6
1000ae9c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
1000aea0:	8d 9c 24 ec 10 00 00 	lea    ebx,[esp+0x10ec]
1000aea7:	53                   	push   ebx
1000aea8:	e8 f5 d1 ff ff       	call   100080a2 <BF_swap>
1000aead:	6a 17                	push   0x17
1000aeaf:	53                   	push   ebx
1000aeb0:	8b 84 24 2c 11 00 00 	mov    eax,DWORD PTR [esp+0x112c]
1000aeb7:	83 c0 1d             	add    eax,0x1d
1000aeba:	50                   	push   eax
1000aebb:	e8 3d d1 ff ff       	call   10007ffd <BF_encode>
1000aec0:	8b 84 24 30 11 00 00 	mov    eax,DWORD PTR [esp+0x1130]
1000aec7:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
1000aecb:	68 a8 10 00 00       	push   0x10a8
1000aed0:	56                   	push   esi
1000aed1:	e8 0b d0 ff ff       	call   10007ee1 <clean>
1000aed6:	83 c4 1c             	add    esp,0x1c
1000aed9:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
1000aee0:	eb 29                	jmp    1000af0b <_crypt_blowfish_rn+0x2ddf>
1000aee2:	c7 05 00 00 00 00 22 00 00 00 	mov    DWORD PTR ds:0x0,0x22	1000aee4: R_386_32	_bcrypt_errno
1000aeec:	b8 00 00 00 00       	mov    eax,0x0
1000aef1:	eb 18                	jmp    1000af0b <_crypt_blowfish_rn+0x2ddf>
1000aef3:	80 fa 31             	cmp    dl,0x31
1000aef6:	0f 8e a3 d2 ff ff    	jle    1000819f <_crypt_blowfish_rn+0x73>
1000aefc:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000aefe: R_386_32	_bcrypt_errno
1000af06:	b8 00 00 00 00       	mov    eax,0x0
1000af0b:	81 c4 00 11 00 00    	add    esp,0x1100
1000af11:	5b                   	pop    ebx
1000af12:	5e                   	pop    esi
1000af13:	5f                   	pop    edi
1000af14:	5d                   	pop    ebp
1000af15:	c3                   	ret    
1000af16:	6a 10                	push   0x10
1000af18:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
1000af1f:	50                   	push   eax
1000af20:	e8 bc cf ff ff       	call   10007ee1 <clean>
1000af25:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000af27: R_386_32	_bcrypt_errno
1000af2f:	83 c4 08             	add    esp,0x8
1000af32:	b8 00 00 00 00       	mov    eax,0x0
1000af37:	eb d2                	jmp    1000af0b <_crypt_blowfish_rn+0x2ddf>

1000af39 <_crypt_gensalt_blowfish_rn>:
1000af39:	53                   	push   ebx
1000af3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000af3e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000af42:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
1000af47:	7e 19                	jle    1000af62 <_crypt_gensalt_blowfish_rn+0x29>
1000af49:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
1000af4e:	0f 8e 88 00 00 00    	jle    1000afdc <_crypt_gensalt_blowfish_rn+0xa3>
1000af54:	85 c9                	test   ecx,ecx
1000af56:	74 33                	je     1000af8b <_crypt_gensalt_blowfish_rn+0x52>
1000af58:	8d 41 fc             	lea    eax,[ecx-0x4]
1000af5b:	83 f8 1b             	cmp    eax,0x1b
1000af5e:	76 30                	jbe    1000af90 <_crypt_gensalt_blowfish_rn+0x57>
1000af60:	eb 07                	jmp    1000af69 <_crypt_gensalt_blowfish_rn+0x30>
1000af62:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000af67:	7e 03                	jle    1000af6c <_crypt_gensalt_blowfish_rn+0x33>
1000af69:	c6 03 00             	mov    BYTE PTR [ebx],0x0
1000af6c:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
1000af71:	7e 11                	jle    1000af84 <_crypt_gensalt_blowfish_rn+0x4b>
1000af73:	b8 16 00 00 00       	mov    eax,0x16
1000af78:	a3 00 00 00 00       	mov    ds:0x0,eax	1000af79: R_386_32	_bcrypt_errno
1000af7d:	b8 00 00 00 00       	mov    eax,0x0
1000af82:	eb 56                	jmp    1000afda <_crypt_gensalt_blowfish_rn+0xa1>
1000af84:	b8 22 00 00 00       	mov    eax,0x22
1000af89:	eb ed                	jmp    1000af78 <_crypt_gensalt_blowfish_rn+0x3f>
1000af8b:	b9 05 00 00 00       	mov    ecx,0x5
1000af90:	c6 03 24             	mov    BYTE PTR [ebx],0x24
1000af93:	c6 43 01 32          	mov    BYTE PTR [ebx+0x1],0x32
1000af97:	c6 43 02 61          	mov    BYTE PTR [ebx+0x2],0x61
1000af9b:	c6 43 03 24          	mov    BYTE PTR [ebx+0x3],0x24
1000af9f:	b8 cd cc cc cc       	mov    eax,0xcccccccd
1000afa4:	f7 e1                	mul    ecx
1000afa6:	89 d0                	mov    eax,edx
1000afa8:	c1 e8 03             	shr    eax,0x3
1000afab:	8d 50 30             	lea    edx,[eax+0x30]
1000afae:	88 53 04             	mov    BYTE PTR [ebx+0x4],dl
1000afb1:	8d 04 80             	lea    eax,[eax+eax*4]
1000afb4:	01 c0                	add    eax,eax
1000afb6:	29 c1                	sub    ecx,eax
1000afb8:	83 c1 30             	add    ecx,0x30
1000afbb:	88 4b 05             	mov    BYTE PTR [ebx+0x5],cl
1000afbe:	c6 43 06 24          	mov    BYTE PTR [ebx+0x6],0x24
1000afc2:	6a 10                	push   0x10
1000afc4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000afc8:	8d 43 07             	lea    eax,[ebx+0x7]
1000afcb:	50                   	push   eax
1000afcc:	e8 2c d0 ff ff       	call   10007ffd <BF_encode>
1000afd1:	c6 43 1d 00          	mov    BYTE PTR [ebx+0x1d],0x0
1000afd5:	83 c4 0c             	add    esp,0xc
1000afd8:	89 d8                	mov    eax,ebx
1000afda:	5b                   	pop    ebx
1000afdb:	c3                   	ret    
1000afdc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000afe1:	7f 86                	jg     1000af69 <_crypt_gensalt_blowfish_rn+0x30>
1000afe3:	b8 22 00 00 00       	mov    eax,0x22
1000afe8:	eb 8e                	jmp    1000af78 <_crypt_gensalt_blowfish_rn+0x3f>

1000afea <bcrypt_gensalt>:
1000afea:	57                   	push   edi
1000afeb:	56                   	push   esi
1000afec:	53                   	push   ebx
1000afed:	83 ec 10             	sub    esp,0x10
1000aff0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000aff4:	89 e3                	mov    ebx,esp
1000aff6:	8d 74 24 10          	lea    esi,[esp+0x10]
1000affa:	e8 fc ff ff ff       	call   1000affb <bcrypt_gensalt+0x11>	1000affb: R_386_PC32	_bcrypt_rand
1000afff:	88 03                	mov    BYTE PTR [ebx],al
1000b001:	43                   	inc    ebx
1000b002:	39 f3                	cmp    ebx,esi
1000b004:	75 f4                	jne    1000affa <bcrypt_gensalt+0x10>
1000b006:	8d 47 fc             	lea    eax,[edi-0x4]
1000b009:	83 f8 1b             	cmp    eax,0x1b
1000b00c:	76 05                	jbe    1000b013 <bcrypt_gensalt+0x29>
1000b00e:	bf 0c 00 00 00       	mov    edi,0xc
1000b013:	83 ec 0c             	sub    esp,0xc
1000b016:	6a 40                	push   0x40
1000b018:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
1000b01c:	6a 10                	push   0x10
1000b01e:	8d 44 24 18          	lea    eax,[esp+0x18]
1000b022:	50                   	push   eax
1000b023:	57                   	push   edi
1000b024:	e8 10 ff ff ff       	call   1000af39 <_crypt_gensalt_blowfish_rn>
1000b029:	85 c0                	test   eax,eax
1000b02b:	0f 94 c0             	sete   al
1000b02e:	0f b6 c0             	movzx  eax,al
1000b031:	83 c4 30             	add    esp,0x30
1000b034:	5b                   	pop    ebx
1000b035:	5e                   	pop    esi
1000b036:	5f                   	pop    edi
1000b037:	c3                   	ret    

1000b038 <bcrypt_hashpw>:
1000b038:	6a 40                	push   0x40
1000b03a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000b03e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000b042:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000b046:	e8 e1 d0 ff ff       	call   1000812c <_crypt_blowfish_rn>
1000b04b:	83 c4 10             	add    esp,0x10
1000b04e:	85 c0                	test   eax,eax
1000b050:	0f 94 c0             	sete   al
1000b053:	0f b6 c0             	movzx  eax,al
1000b056:	c3                   	ret    
1000b057:	90                   	nop

1000b058 <TERMINAL_KEYBUFFER_IN_SIZE>:
1000b058:	80 00 00 00                                         ....

1000b05c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000b05c:	80 00 00 00 2e 00 2e 2e 00 2f 00 43 6f 75 6c 64     ........./.Could
1000b06c:	6e 27 74 20 6f 70 65 6e 20 62 61 73 65 20 70 61     n't open base pa
1000b07c:	74 68 2e 0a 00 25 73 20 2d 3e 20 25 73 0a 00 43     th...%s -> %s..C
1000b08c:	4f 55 4c 44 20 4e 4f 54 20 43 52 45 41 54 45 00     OULD NOT CREATE.
1000b09c:	43 4f 55 4c 44 20 4e 4f 54 20 43 4f 50 59 00 4e     COULD NOT COPY.N
1000b0ac:	4f 20 4d 45 4d 4f 52 59 00 42 61 63 6b 75 70 00     O MEMORY.Backup.
1000b0bc:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000b0cc:	2f 42 61 63 6b 75 70 2f 00 30 31 32 33 34 35 36     /Backup/.0123456
1000b0dc:	37 38 39 41 42 43 44 45 46 00 43 3a 2f 55 73 65     789ABCDEF.C:/Use
1000b0ec:	72 73 2f 00 2f 44 65 73 6b 74 6f 70 00 2f 44 6f     rs/./Desktop./Do
1000b0fc:	63 75 6d 65 6e 74 73 00 2f 44 6f 77 6e 6c 6f 61     cuments./Downloa
1000b10c:	64 73 00 2f 50 69 63 74 75 72 65 73 00 2f 54 72     ds./Pictures./Tr
1000b11c:	61 73 68 20 42 69 6e 00 2f 4d 75 73 69 63 00 2f     ash Bin./Music./
1000b12c:	4d 6f 76 69 65 73 00 43 3a 2f 42 61 6e 61 6e 61     Movies.C:/Banana
1000b13c:	2f 52 65 67 69 73 74 72 79 2f 55 73 65 72 2f 00     /Registry/User/.
1000b14c:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000b15c:	72 79 2f 44 65 66 61 75 6c 74 55 73 65 72 00 00     ry/DefaultUser..
1000b16c:	43 68 65 63 6b 69 6e 67 0a 20 73 79 73 74 65 6d     Checking. system
1000b17c:	0a 20 72 65 71 75 69 72 65 6d 65 6e 74 73 0a 0a     . requirements..
1000b18c:	20 4c 65 67 61 6c 0a 20 6e 6f 74 69 63 65 73 0a      Legal. notices.
1000b19c:	0a 20 43 68 6f 6f 73 69 6e 67 20 61 0a 20 70 61     . Choosing a. pa
1000b1ac:	72 74 69 74 69 6f 6e 0a 0a 20 46 6f 72 6d 61 74     rtition.. Format
1000b1bc:	74 69 6e 67 0a 0a 20 43 6f 70 79 69 6e 67 20 66     ting.. Copying f
1000b1cc:	69 6c 65 73 0a 0a 20 52 65 73 74 61 72 74 69 6e     iles.. Restartin
1000b1dc:	67 0a 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72     g. your computer
1000b1ec:	0a 0a 00 20 46 69 6e 61 6c 69 73 69 6e 67 20 74     ... Finalising t
1000b1fc:	68 65 0a 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     he. installation
1000b20c:	00 0a 0a 0a 0a 0a 0a 0a 0a 20 20 20 53 41 46 45     .........   SAFE
1000b21c:	20 4d 4f 44 45 00 25 63 3a 20 25 63 25 63 25 63      MODE.%c: %c%c%c
1000b22c:	25 63 0a 00 77 61 69 74 69 6e 67 20 25 64 20 6d     %c..waiting %d m
1000b23c:	69 6c 6c 69 73 65 63 0a 00 00 00 00 50 6c 65 61     illisec.....Plea
1000b24c:	73 65 20 77 61 69 74 20 77 68 69 6c 65 20 74 68     se wait while th
1000b25c:	65 20 69 6e 73 74 61 6c 6c 20 66 69 6e 69 73 68     e install finish
1000b26c:	65 73 2e 00 10 20 00 20 20 00 41 6c 6c 6f 63 61     es... .  .Alloca
1000b27c:	74 69 6e 67 20 74 68 65 20 73 77 61 70 66 69 6c     ting the swapfil
1000b28c:	65 00 55 70 64 61 74 69 6e 67 20 74 68 65 20 72     e.Updating the r
1000b29c:	65 67 69 73 74 72 79 00 43 72 65 61 74 69 6e 67     egistry.Creating
1000b2ac:	20 75 73 65 72 20 61 63 63 6f 75 6e 74 00 49 6e      user account.In
1000b2bc:	73 74 61 6c 6c 69 6e 67 20 70 61 63 6b 61 67 65     stalling package
1000b2cc:	73 00 42 61 63 6b 69 6e 67 20 75 70 20 73 79 73     s.Backing up sys
1000b2dc:	74 65 6d 20 66 69 6c 65 73 00 46 69 6e 69 73 68     tem files.Finish
1000b2ec:	69 6e 67 20 74 6f 75 63 68 65 73 00 51 51 2d 30     ing touches.QQ-0
1000b2fc:	30 30 2d 30 30 30 2d 30 30 30 2d 51 00 00 00 00     00-000-000-Q....
1000b30c:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000b31c:	2f 74 69 6d 65 7a 6f 6e 65 73 2e 74 78 74 00 20     /timezones.txt. 
1000b32c:	00 2e 2e 2e 20 00 00 00 53 65 74 74 69 6e 67 20     .... ...Setting 
1000b33c:	75 70 20 74 68 65 20 73 79 73 74 65 6d 20 66 6f     up the system fo
1000b34c:	72 20 74 68 65 20 66 69 72 73 74 20 74 69 6d 65     r the first time
1000b35c:	00 0a 0a 0a 0a 0a 0a 00 54 65 73 74 00 41 41 2d     ........Test.AA-
1000b36c:	30 30 30 30 30 2d 30 30 30 30 30 2d 41 00 57 57     00000-00000-A.WW
1000b37c:	2d 38 38 33 38 38 2d 35 35 35 35 35 2d 4e 00 43     -88388-55555-N.C
1000b38c:	72 65 61 74 65 20 4e 65 77 20 55 73 65 72 00 42     reate New User.B
1000b39c:	61 6e 61 6e 61 20 53 65 74 75 70 00 50 6c 65 61     anana Setup.Plea
1000b3ac:	73 65 20 65 6e 74 65 72 20 79 6f 75 72 20 64 65     se enter your de
1000b3bc:	74 61 69 6c 73 2e 20 50 72 65 73 73 20 54 41 42     tails. Press TAB
1000b3cc:	20 74 6f 20 73 77 69 74 63 68 00 00 62 65 74 77      to switch..betw
1000b3dc:	65 65 6e 20 66 69 65 6c 64 73 2c 20 6f 72 20 45     een fields, or E
1000b3ec:	53 43 20 74 6f 20 63 61 6e 63 65 6c 2e 00 62 65     SC to cancel..be
1000b3fc:	74 77 65 65 6e 20 66 69 65 6c 64 73 2e 00 4e 61     tween fields..Na
1000b40c:	6d 65 00 43 6f 6d 70 61 6e 79 00 50 61 73 73 77     me.Company.Passw
1000b41c:	6f 72 64 00 43 6f 6e 66 69 72 6d 00 70 61 73 73     ord.Confirm.pass
1000b42c:	77 6f 72 64 00 00 00 00 20 20 20 20 20 20 20 20     word....        
1000b43c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000b44c:	20 20 20 20 20 20 20 20 20 20 20 20 00 20 11 00                 . ..
1000b45c:	20 20 20 00 2a 00 50 72 65 73 73 20 45 4e 54 45        .*.Press ENTE
1000b46c:	52 20 74 6f 20 73 75 62 6d 69 74 00 20 20 20 20     R to submit.    
1000b47c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000b48c:	20 20 00 20 20 20 4f 4b 20 20 20 00 20 20 11 00       .   OK   .  ..
1000b49c:	43 4f 55 4c 44 20 4e 4f 54 20 53 41 56 45 00 59     COULD NOT SAVE.Y
1000b4ac:	4f 55 52 20 50 41 53 53 57 4f 52 44 20 28 41 29     OUR PASSWORD (A)
1000b4bc:	00 59 4f 55 52 20 50 41 53 53 57 4f 52 44 20 28     .YOUR PASSWORD (
1000b4cc:	42 29 00 44 61 74 65 20 61 6e 64 20 54 69 6d 65     B).Date and Time
1000b4dc:	00 31 34 2f 30 35 2f 32 30 32 31 20 31 38 3a 35     .14/05/2021 18:5
1000b4ec:	35 3a 30 30 00 00 00 00 50 6c 65 61 73 65 20 65     5:00....Please e
1000b4fc:	6e 74 65 72 20 74 68 65 20 63 75 72 72 65 6e 74     nter the current
1000b50c:	20 64 61 74 65 20 61 6e 64 20 74 69 6d 65 2c 00      date and time,.
1000b51c:	61 6e 64 20 74 68 65 6e 20 70 72 65 73 73 20 45     and then press E
1000b52c:	4e 54 45 52 2e 00 44 44 2f 4d 4d 2f 59 59 59 59     NTER..DD/MM/YYYY
1000b53c:	20 48 48 3a 4d 4d 3a 53 53 00 45 53 43 3a 20 47      HH:MM:SS.ESC: G
1000b54c:	6f 20 62 61 63 6b 20 61 20 73 63 72 65 65 6e 00     o back a screen.
1000b55c:	50 6c 65 61 73 65 20 73 65 6c 65 63 74 20 79 6f     Please select yo
1000b56c:	75 72 20 74 69 6d 65 7a 6f 6e 65 20 61 6e 64 20     ur timezone and 
1000b57c:	74 68 65 6e 20 70 72 65 73 73 20 45 4e 54 45 52     then press ENTER
1000b58c:	2e 00 55 73 65 72 20 49 6e 74 65 72 66 61 63 65     ..User Interface
1000b59c:	00 00 00 00 50 6c 65 61 73 65 20 73 65 6c 65 63     ....Please selec
1000b5ac:	74 20 74 68 65 20 75 73 65 72 20 69 6e 74 65 72     t the user inter
1000b5bc:	66 61 63 65 20 79 6f 75 20 77 61 6e 74 20 42 61     face you want Ba
1000b5cc:	6e 61 6e 61 00 00 00 00 74 6f 20 62 6f 6f 74 20     nana....to boot 
1000b5dc:	69 6e 74 6f 20 62 79 20 64 65 66 61 75 6c 74 20     into by default 
1000b5ec:	77 68 65 6e 20 79 6f 75 20 73 74 61 72 74 20 74     when you start t
1000b5fc:	68 65 20 63 6f 6d 70 75 74 65 72 2e 00 49 6e 76     he computer..Inv
1000b60c:	61 6c 69 64 20 50 72 6f 64 75 63 74 20 4b 65 79     alid Product Key
1000b61c:	00 00 00 00 59 6f 75 20 64 6f 20 6e 6f 74 20 68     ....You do not h
1000b62c:	61 76 65 20 61 20 76 61 6c 69 64 20 70 72 6f 64     ave a valid prod
1000b63c:	75 63 74 20 6b 65 79 2e 0a 00 00 00 59 6f 75 20     uct key.....You 
1000b64c:	6e 65 65 64 20 61 20 76 61 6c 69 64 20 70 72 6f     need a valid pro
1000b65c:	64 75 63 74 20 6b 65 79 20 69 6e 20 6f 72 64 65     duct key in orde
1000b66c:	72 20 74 6f 00 75 73 65 20 42 61 6e 61 6e 61 2e     r to.use Banana.
1000b67c:	00 00 00 00 50 72 65 73 73 20 45 4e 54 45 52 20     ....Press ENTER 
1000b68c:	74 6f 20 72 65 2d 65 6e 74 65 72 20 79 6f 75 72     to re-enter your
1000b69c:	20 70 72 6f 64 75 63 74 20 6b 65 79 2e 00 50 72      product key..Pr
1000b6ac:	6f 64 75 63 74 20 4b 65 79 00 00 00 50 6c 65 61     oduct Key...Plea
1000b6bc:	73 65 20 65 6e 74 65 72 20 79 6f 75 72 20 70 72     se enter your pr
1000b6cc:	6f 64 75 63 74 20 6b 65 79 20 62 65 6c 6f 77 2c     oduct key below,
1000b6dc:	00 00 00 00 54 68 65 20 65 6e 74 65 72 65 64 20     ....The entered 
1000b6ec:	70 72 6f 64 75 63 74 20 6b 65 79 20 77 61 73 20     product key was 
1000b6fc:	69 6e 76 61 6c 69 64 2e 00 00 00 00 50 72 65 73     invalid.....Pres
1000b70c:	73 20 61 6e 79 20 6b 65 79 20 74 6f 20 63 6f 6e     s any key to con
1000b71c:	74 69 6e 75 65 20 61 6e 64 20 74 68 65 6e 00 00     tinue and then..
1000b72c:	65 6e 74 65 72 20 74 68 65 20 70 72 6f 64 75 63     enter the produc
1000b73c:	74 20 6b 65 79 20 63 6f 72 72 65 63 74 6c 79 2e     t key correctly.
1000b74c:	00 46 69 6e 61 6c 69 73 69 6e 67 20 49 6e 73 74     .Finalising Inst
1000b75c:	61 6c 6c 61 74 69 6f 6e 00 00 00 00 53 59 53 54     allation....SYST
1000b76c:	45 4d 2e 44 4c 4c 20 54 4f 44 4f 3a 20 72 65 67     EM.DLL TODO: reg
1000b77c:	69 73 74 72 79 20 72 65 61 64 0a 00 43 3a 2f 42     istry read..C:/B
1000b78c:	61 6e 61 6e 61 2f 52 65 67 69 73 74 72 79 2f 53     anana/Registry/S
1000b79c:	79 73 74 65 6d 00 43 3a 2f 42 61 6e 61 6e 61 2f     ystem.C:/Banana/
1000b7ac:	52 65 67 69 73 74 72 79 2f 55 73 65 72 00 00 00     Registry/User...
1000b7bc:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000b7cc:	72 79 2f 44 65 66 61 75 6c 74 53 79 73 74 65 6d     ry/DefaultSystem
1000b7dc:	00 00 00 00 20 42 6f 6f 74 20 74 6f 20 63 6f 6d     .... Boot to com
1000b7ec:	6d 61 6e 64 20 6c 69 6e 65 20 20 20 20 20 20 20     mand line       
1000b7fc:	20 20 20 20 20 20 20 20 00 00 00 00 20 42 6f 6f             .... Boo
1000b80c:	74 20 74 6f 20 67 72 61 70 68 69 63 61 6c 20 69     t to graphical i
1000b81c:	6e 74 65 72 66 61 63 65 20 28 56 47 41 29 20 20     nterface (VGA)  
1000b82c:	00 00 00 00 20 42 6f 6f 74 20 74 6f 20 67 72 61     .... Boot to gra
1000b83c:	70 68 69 63 61 6c 20 69 6e 74 65 72 66 61 63 65     phical interface
1000b84c:	20 28 56 45 53 41 29 20 00 00 00 00 e0 b7 00 10      (VESA) ........	1000b858: R_386_32	.text
1000b85c:	08 b8 00 10 30 b8 00 10 4c 6f 61 64 69 6e 67 20     ....0...Loading 	1000b85c: R_386_32	.text
	1000b860: R_386_32	.text
1000b86c:	65 78 74 65 6e 73 69 6f 6e 73 2e 2e 2e 00 0a 0a     extensions......
1000b87c:	3a 0a 00 2f 25 73 0a 00 43 3a 2f 42 61 6e 61 6e     :../%s..C:/Banan
1000b88c:	61 2f 53 79 73 74 65 6d 2f 73 65 74 75 70 69 73     a/System/setupis
1000b89c:	64 2e 6f 6e 65 00 53 59 53 49 4e 49 54 20 46 41     d.one.SYSINIT FA
1000b8ac:	49 4c 55 52 45 00 43 3a 2f 42 61 6e 61 6e 61 2f     ILURE.C:/Banana/
1000b8bc:	53 79 73 74 65 6d 2f 63 6f 6d 6d 61 6e 64 2e 65     System/command.e
1000b8cc:	78 65 00 43 3a 2f 44 45 2e 42 55 47 00 00 00 00     xe.C:/DE.BUG....
1000b8dc:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000b8ec:	72 79 2f 53 79 73 74 65 6d 2f 53 59 53 54 45 4d     ry/System/SYSTEM
1000b8fc:	2e 52 45 47 00 42 41 4e 41 4e 41 00 72 65 67 73     .REG.BANANA.regs
1000b90c:	61 66 65 6e 61 6d 65 20 3d 20 25 73 0a 00 42 41     afename = %s..BA
1000b91c:	4e 41 4e 41 2f 55 53 45 52 53 2f 00 75 73 65 72     NANA/USERS/.user
1000b92c:	42 61 73 65 50 61 74 68 20 3d 20 25 73 0a 00 53     BasePath = %s..S
1000b93c:	45 54 55 50 00 42 4f 4f 54 00 54 49 4d 45 00 55     ETUP.BOOT.TIME.U
1000b94c:	53 45 52 53 00 46 49 4c 45 41 53 53 4f 43 00 42     SERS.FILEASSOC.B
1000b95c:	41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43 00     ANANA/FILEASSOC.
1000b96c:	4f 50 45 4e 00 45 44 49 54 00 50 52 49 4e 54 00     OPEN.EDIT.PRINT.
1000b97c:	49 43 4f 4e 00 44 45 53 43 52 00 43 55 53 54 4f     ICON.DESCR.CUSTO
1000b98c:	4d 56 45 52 42 00 43 55 53 54 4f 4d 50 52 4f 47     MVERB.CUSTOMPROG
1000b99c:	00 42 41 4e 41 4e 41 2f 54 49 4d 45 00 54 49 4d     .BANANA/TIME.TIM
1000b9ac:	45 5a 4f 4e 45 00 42 41 4e 41 4e 41 2f 53 45 54     EZONE.BANANA/SET
1000b9bc:	55 50 00 4e 41 4d 45 00 43 4f 4d 50 41 4e 59 00     UP.NAME.COMPANY.
1000b9cc:	50 52 4f 44 55 43 54 4b 45 59 00 42 41 4e 41 4e     PRODUCTKEY.BANAN
1000b9dc:	41 2f 55 53 45 52 53 00 53 41 4c 54 00 50 41 53     A/USERS.SALT.PAS
1000b9ec:	53 57 4f 52 44 00 44 49 53 50 4c 41 59 4e 41 4d     SWORD.DISPLAYNAM
1000b9fc:	45 00 44 45 53 4b 54 4f 50 00 44 4f 43 55 4d 45     E.DESKTOP.DOCUME
1000ba0c:	4e 54 53 00 44 4f 57 4e 4c 4f 41 44 53 00 50 49     NTS.DOWNLOADS.PI
1000ba1c:	43 54 55 52 45 53 00 4d 4f 56 49 45 53 00 4d 55     CTURES.MOVIES.MU
1000ba2c:	53 49 43 00 52 45 43 59 43 4c 45 42 49 4e 00 42     SIC.RECYCLEBIN.B
1000ba3c:	41 4e 41 4e 41 2f 42 4f 4f 54 00 41 55 54 4f 47     ANANA/BOOT.AUTOG
1000ba4c:	55 49 00 54 49 4d 45 5a 4f 4e 45 49 44 00 42 41     UI.TIMEZONEID.BA
1000ba5c:	4e 41 4e 41 2f 54 49 4d 45 2f 54 49 4d 45 5a 4f     NANA/TIME/TIMEZO
1000ba6c:	4e 45 00 42 41 4e 41 4e 41 2f 53 45 54 55 50 2f     NE.BANANA/SETUP/
1000ba7c:	4e 41 4d 45 00 42 41 4e 41 4e 41 2f 53 45 54 55     NAME.BANANA/SETU
1000ba8c:	50 2f 43 4f 4d 50 41 4e 59 00 42 41 4e 41 4e 41     P/COMPANY.BANANA
1000ba9c:	2f 53 45 54 55 50 2f 50 52 4f 44 55 43 54 4b 45     /SETUP/PRODUCTKE
1000baac:	59 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53     Y.BANANA/FILEASS
1000babc:	4f 43 2f 49 43 4f 4e 00 54 58 54 00 42 41 4e 41     OC/ICON.TXT.BANA
1000bacc:	4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f 44 45 53     NA/FILEASSOC/DES
1000badc:	43 52 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53     CR.BANANA/FILEAS
1000baec:	53 4f 43 2f 4f 50 45 4e 00 42 41 4e 41 4e 41 2f     SOC/OPEN.BANANA/
1000bafc:	46 49 4c 45 41 53 53 4f 43 2f 45 44 49 54 00 42     FILEASSOC/EDIT.B
1000bb0c:	41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f     ANANA/FILEASSOC/
1000bb1c:	50 52 49 4e 54 00 42 41 4e 41 4e 41 2f 46 49 4c     PRINT.BANANA/FIL
1000bb2c:	45 41 53 53 4f 43 2f 49 43 4f 4e 2f 54 58 54 00     EASSOC/ICON/TXT.
1000bb3c:	43 3a 2f 42 61 6e 61 6e 61 2f 49 63 6f 6e 73 2f     C:/Banana/Icons/
1000bb4c:	63 6f 6c 6f 75 72 2f 74 65 78 74 2e 74 67 61 00     colour/text.tga.
1000bb5c:	42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43     BANANA/FILEASSOC
1000bb6c:	2f 44 45 53 43 52 2f 54 58 54 00 54 65 78 74 20     /DESCR/TXT.Text 
1000bb7c:	44 6f 63 75 6d 65 6e 74 00 42 41 4e 41 4e 41 2f     Document.BANANA/
1000bb8c:	46 49 4c 45 41 53 53 4f 43 2f 4f 50 45 4e 2f 54     FILEASSOC/OPEN/T
1000bb9c:	58 54 00 00 43 3a 2f 42 61 6e 61 6e 61 2f 53 79     XT..C:/Banana/Sy
1000bbac:	73 74 65 6d 2f 74 79 70 65 77 72 69 74 65 72 2e     stem/typewriter.
1000bbbc:	61 70 70 2f 70 72 6f 67 72 61 6d 2e 65 78 65 00     app/program.exe.
1000bbcc:	42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43     BANANA/FILEASSOC
1000bbdc:	2f 45 44 49 54 2f 54 58 54 00 42 41 4e 41 4e 41     /EDIT/TXT.BANANA
1000bbec:	2f 46 49 4c 45 41 53 53 4f 43 2f 50 52 49 4e 54     /FILEASSOC/PRINT
1000bbfc:	2f 54 58 54 00 49 53 4f 00 42 41 4e 41 4e 41 2f     /TXT.ISO.BANANA/
1000bc0c:	46 49 4c 45 41 53 53 4f 43 2f 49 43 4f 4e 2f 49     FILEASSOC/ICON/I
1000bc1c:	53 4f 00 43 3a 2f 42 61 6e 61 6e 61 2f 49 63 6f     SO.C:/Banana/Ico
1000bc2c:	6e 73 2f 63 6f 6c 6f 75 72 2f 63 64 2e 74 67 61     ns/colour/cd.tga
1000bc3c:	00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f     .BANANA/FILEASSO
1000bc4c:	43 2f 44 45 53 43 52 2f 49 53 4f 00 44 69 73 63     C/DESCR/ISO.Disc
1000bc5c:	20 49 6d 61 67 65 20 46 69 6c 65 00 2f 50 41 53      Image File./PAS
1000bc6c:	53 57 4f 52 44 00 2f 53 41 4c 54 00 2f 44 49 53     SWORD./SALT./DIS
1000bc7c:	50 4c 41 59 4e 41 4d 45 00 2f 44 45 53 4b 54 4f     PLAYNAME./DESKTO
1000bc8c:	50 00 2f 44 4f 43 55 4d 45 4e 54 53 00 2f 44 4f     P./DOCUMENTS./DO
1000bc9c:	57 4e 4c 4f 41 44 53 00 2f 50 49 43 54 55 52 45     WNLOADS./PICTURE
1000bcac:	53 00 2f 4d 4f 56 49 45 53 00 2f 4d 55 53 49 43     S./MOVIES./MUSIC
1000bcbc:	00 2f 52 45 43 59 43 4c 45 42 49 4e 00 00 00 00     ./RECYCLEBIN....
1000bccc:	54 4f 44 4f 3a 20 64 65 74 65 63 74 20 6e 6f 72     TODO: detect nor
1000bcdc:	6d 61 6c 20 6b 65 72 6e 65 6c 20 76 73 20 4b 52     mal kernel vs KR
1000bcec:	4e 4c 50 32 0a 00 00 00 54 68 65 20 69 6e 73 74     NLP2....The inst
1000bcfc:	61 6c 6c 61 74 69 6f 6e 20 68 61 73 20 62 65 65     allation has bee
1000bd0c:	6e 20 63 6f 6d 70 6c 65 74 65 64 2e 0a 00 00 00     n completed.....
1000bd1c:	50 6c 65 61 73 65 20 70 72 65 73 73 20 45 4e 54     Please press ENT
1000bd2c:	45 52 20 74 6f 20 72 65 73 74 61 72 74 20 79 6f     ER to restart yo
1000bd3c:	75 72 20 63 6f 6d 70 75 74 65 72 00 61 6e 64 20     ur computer.and 
1000bd4c:	73 74 61 72 74 20 42 61 6e 61 6e 61 2e 00 42 41     start Banana..BA
1000bd5c:	4e 41 4e 41 2f 42 4f 4f 54 2f 41 55 54 4f 47 55     NANA/BOOT/AUTOGU
1000bd6c:	49 00 50 72 6f 64 75 63 74 20 4b 65 79 20 55 70     I.Product Key Up
1000bd7c:	64 61 74 65 64 00 00 00 59 6f 75 72 20 70 72 6f     dated...Your pro
1000bd8c:	64 75 63 74 20 6b 65 79 20 68 61 73 20 62 65 65     duct key has bee
1000bd9c:	6e 20 75 70 64 61 74 65 64 2e 0a 00 20 43 72 65     n updated... Cre
1000bdac:	61 74 65 20 6e 65 77 20 75 73 65 72 2e 2e 2e 20     ate new user... 
1000bdbc:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000bdcc:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00 4c                   .L
1000bddc:	6f 67 69 6e 00 00 00 00 50 6c 65 61 73 65 20 73     ogin....Please s
1000bdec:	65 6c 65 63 74 20 79 6f 75 72 20 75 73 65 72 6e     elect your usern
1000bdfc:	61 6d 65 20 61 6e 64 20 70 72 65 73 73 20 45 4e     ame and press EN
1000be0c:	54 45 52 2e 00 00 00 00 50 6c 65 61 73 65 20 74     TER.....Please t
1000be1c:	79 70 65 20 79 6f 75 72 20 70 61 73 73 77 6f 72     ype your passwor
1000be2c:	64 20 61 6e 64 20 70 72 65 73 73 20 45 4e 54 45     d and press ENTE
1000be3c:	52 00 6f 72 20 70 72 65 73 73 20 45 53 43 20 74     R.or press ESC t
1000be4c:	6f 20 67 6f 20 62 61 63 6b 2e 00 00 52 45 51 55     o go back...REQU
1000be5c:	49 52 45 44 3a 20 25 73 0a 47 4f 54 3a 20 25 73     IRED: %s.GOT: %s
1000be6c:	0a 53 41 4c 54 3a 20 25 73 0a 00 00 49 74 20 69     .SALT: %s...It i
1000be7c:	73 20 73 61 66 65 20 74 6f 20 74 75 72 6e 20 6f     s safe to turn o
1000be8c:	66 66 20 79 6f 75 72 20 50 43 00 63 61 6c 6c 00     ff your PC.call.
1000be9c:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000beac:	2f 69 6e 69 74 2e 62 61 74 00 00 00 b2 b8 00 10     /init.bat.......	1000beb8: R_386_32	.text
1000bebc:	97 be 00 10 9c be 00 10 00 00 00 00 20 53 41 46     ............ SAF	1000bebc: R_386_32	.text
	1000bec0: R_386_32	.text
1000becc:	45 20 4d 4f 44 45 00                                E MODE.
