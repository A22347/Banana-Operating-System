
packages/system/32/0001/system.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <beginx(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <beginx(void*)+0xd>	1000000d: R_386_PC32	begin(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <memcmp(void*, void*, unsigned long)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 10             	sub    esp,0x10
1000001d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000020:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000026:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000029:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000002c:	8d 50 ff             	lea    edx,[eax-0x1]
1000002f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000032:	85 c0                	test   eax,eax
10000034:	74 12                	je     10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000036:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000039:	8a 10                	mov    dl,BYTE PTR [eax]
1000003b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000003e:	8a 00                	mov    al,BYTE PTR [eax]
10000040:	38 c2                	cmp    dl,al
10000042:	75 04                	jne    10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000044:	b0 01                	mov    al,0x1
10000046:	eb 02                	jmp    1000004a <memcmp(void*, void*, unsigned long)+0x33>
10000048:	b0 00                	mov    al,0x0
1000004a:	84 c0                	test   al,al
1000004c:	74 08                	je     10000056 <memcmp(void*, void*, unsigned long)+0x3f>
1000004e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000051:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
10000054:	eb d3                	jmp    10000029 <memcmp(void*, void*, unsigned long)+0x12>
10000056:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000059:	8a 00                	mov    al,BYTE PTR [eax]
1000005b:	0f b6 d0             	movzx  edx,al
1000005e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000061:	8a 00                	mov    al,BYTE PTR [eax]
10000063:	0f b6 c0             	movzx  eax,al
10000066:	29 c2                	sub    edx,eax
10000068:	89 d0                	mov    eax,edx
1000006a:	c9                   	leave  
1000006b:	c3                   	ret    

1000006c <memmove>:
1000006c:	55                   	push   ebp
1000006d:	89 e5                	mov    ebp,esp
1000006f:	83 ec 10             	sub    esp,0x10
10000072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000075:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000007b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000007e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000081:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
10000084:	76 1b                	jbe    100000a1 <memmove+0x35>
10000086:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
1000008a:	74 46                	je     100000d2 <memmove+0x66>
1000008c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000008f:	8a 10                	mov    dl,BYTE PTR [eax]
10000091:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000094:	88 10                	mov    BYTE PTR [eax],dl
10000096:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000099:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
1000009c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000009f:	eb e5                	jmp    10000086 <memmove+0x1a>
100000a1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000a4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
100000a7:	73 29                	jae    100000d2 <memmove+0x66>
100000a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000ac:	48                   	dec    eax
100000ad:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
100000b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000b3:	48                   	dec    eax
100000b4:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
100000b7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000bb:	74 15                	je     100000d2 <memmove+0x66>
100000bd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000c0:	8a 10                	mov    dl,BYTE PTR [eax]
100000c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000c5:	88 10                	mov    BYTE PTR [eax],dl
100000c7:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100000ca:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
100000cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000d0:	eb e5                	jmp    100000b7 <memmove+0x4b>
100000d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d5:	c9                   	leave  
100000d6:	c3                   	ret    

100000d7 <memset>:
100000d7:	55                   	push   ebp
100000d8:	89 e5                	mov    ebp,esp
100000da:	83 ec 10             	sub    esp,0x10
100000dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100000e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000e7:	74 12                	je     100000fb <memset+0x24>
100000e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100000ec:	88 c2                	mov    dl,al
100000ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000f1:	88 10                	mov    BYTE PTR [eax],dl
100000f3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100000f6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000f9:	eb e8                	jmp    100000e3 <memset+0xc>
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	c9                   	leave  
100000ff:	c3                   	ret    

10000100 <strlen>:
10000100:	55                   	push   ebp
10000101:	89 e5                	mov    ebp,esp
10000103:	83 ec 10             	sub    esp,0x10
10000106:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000110:	8a 00                	mov    al,BYTE PTR [eax]
10000112:	84 c0                	test   al,al
10000114:	74 0c                	je     10000122 <strlen+0x22>
10000116:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000119:	40                   	inc    eax
1000011a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000011d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
10000120:	eb eb                	jmp    1000010d <strlen+0xd>
10000122:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000125:	c9                   	leave  
10000126:	c3                   	ret    

10000127 <strpbrk(char const*, char const*)>:
10000127:	55                   	push   ebp
10000128:	89 e5                	mov    ebp,esp
1000012a:	83 ec 10             	sub    esp,0x10
1000012d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000130:	8a 00                	mov    al,BYTE PTR [eax]
10000132:	84 c0                	test   al,al
10000134:	74 30                	je     10000166 <strpbrk(char const*, char const*)+0x3f>
10000136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000139:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000013c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000013f:	8a 00                	mov    al,BYTE PTR [eax]
10000141:	84 c0                	test   al,al
10000143:	74 18                	je     1000015d <strpbrk(char const*, char const*)+0x36>
10000145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000148:	8a 10                	mov    dl,BYTE PTR [eax]
1000014a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000014d:	8a 00                	mov    al,BYTE PTR [eax]
1000014f:	38 c2                	cmp    dl,al
10000151:	75 05                	jne    10000158 <strpbrk(char const*, char const*)+0x31>
10000153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000156:	eb 13                	jmp    1000016b <strpbrk(char const*, char const*)+0x44>
10000158:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
1000015b:	eb df                	jmp    1000013c <strpbrk(char const*, char const*)+0x15>
1000015d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000160:	40                   	inc    eax
10000161:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000164:	eb c7                	jmp    1000012d <strpbrk(char const*, char const*)+0x6>
10000166:	b8 00 00 00 00       	mov    eax,0x0
1000016b:	c9                   	leave  
1000016c:	c3                   	ret    

1000016d <strtok>:
1000016d:	55                   	push   ebp
1000016e:	89 e5                	mov    ebp,esp
10000170:	83 ec 10             	sub    esp,0x10
10000173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000176:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000179:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000017c:	85 c0                	test   eax,eax
1000017e:	75 18                	jne    10000198 <strtok+0x2b>
10000180:	a1 00 00 00 00       	mov    eax,ds:0x0	10000181: R_386_32	SavedPtr
10000185:	85 c0                	test   eax,eax
10000187:	75 07                	jne    10000190 <strtok+0x23>
10000189:	b8 00 00 00 00       	mov    eax,0x0
1000018e:	eb 6f                	jmp    100001ff <strtok+0x92>
10000190:	a1 00 00 00 00       	mov    eax,ds:0x0	10000191: R_386_32	SavedPtr
10000195:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000198:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000019b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000019e:	50                   	push   eax
1000019f:	e8 fc ff ff ff       	call   100001a0 <strtok+0x33>	100001a0: R_386_PC32	strpbrk(char const*, char const*)
100001a4:	83 c4 08             	add    esp,0x8
100001a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100001a8: R_386_32	SavedPtr
100001ac:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001ae: R_386_32	SavedPtr
100001b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001b5:	39 c2                	cmp    edx,eax
100001b7:	75 22                	jne    100001db <strtok+0x6e>
100001b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001bc:	8d 50 01             	lea    edx,[eax+0x1]
100001bf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100001c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100001cb:	50                   	push   eax
100001cc:	e8 fc ff ff ff       	call   100001cd <strtok+0x60>	100001cd: R_386_PC32	strpbrk(char const*, char const*)
100001d1:	83 c4 08             	add    esp,0x8
100001d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100001d5: R_386_32	SavedPtr
100001d9:	eb d1                	jmp    100001ac <strtok+0x3f>
100001db:	a1 00 00 00 00       	mov    eax,ds:0x0	100001dc: R_386_32	SavedPtr
100001e0:	85 c0                	test   eax,eax
100001e2:	74 16                	je     100001fa <strtok+0x8d>
100001e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e5: R_386_32	SavedPtr
100001e9:	8d 50 01             	lea    edx,[eax+0x1]
100001ec:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100001ee: R_386_32	SavedPtr
100001f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001f8:	eb 05                	jmp    100001ff <strtok+0x92>
100001fa:	b8 00 00 00 00       	mov    eax,0x0
100001ff:	c9                   	leave  
10000200:	c3                   	ret    

10000201 <strcpy>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	83 ec 10             	sub    esp,0x10
10000207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000020a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000020d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000210:	8a 00                	mov    al,BYTE PTR [eax]
10000212:	84 c0                	test   al,al
10000214:	74 12                	je     10000228 <strcpy+0x27>
10000216:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000219:	8a 10                	mov    dl,BYTE PTR [eax]
1000021b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000021e:	88 10                	mov    BYTE PTR [eax],dl
10000220:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000223:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10000226:	eb e5                	jmp    1000020d <strcpy+0xc>
10000228:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000022b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000022e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000231:	c9                   	leave  
10000232:	c3                   	ret    

10000233 <strncpyxx(char*, char const*, unsigned long)>:
10000233:	55                   	push   ebp
10000234:	89 e5                	mov    ebp,esp
10000236:	83 ec 10             	sub    esp,0x10
10000239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000242:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000245:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000249:	74 23                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000024b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000024e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000251:	8d 42 01             	lea    eax,[edx+0x1]
10000254:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000025a:	8d 48 01             	lea    ecx,[eax+0x1]
1000025d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
10000260:	8a 12                	mov    dl,BYTE PTR [edx]
10000262:	88 10                	mov    BYTE PTR [eax],dl
10000264:	8a 00                	mov    al,BYTE PTR [eax]
10000266:	84 c0                	test   al,al
10000268:	74 04                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000026a:	b0 01                	mov    al,0x1
1000026c:	eb 02                	jmp    10000270 <strncpyxx(char*, char const*, unsigned long)+0x3d>
1000026e:	b0 00                	mov    al,0x0
10000270:	84 c0                	test   al,al
10000272:	74 02                	je     10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000274:	eb cf                	jmp    10000245 <strncpyxx(char*, char const*, unsigned long)+0x12>
10000276:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000279:	8d 50 ff             	lea    edx,[eax-0x1]
1000027c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
1000027f:	85 c0                	test   eax,eax
10000281:	0f 95 c0             	setne  al
10000284:	84 c0                	test   al,al
10000286:	74 0b                	je     10000293 <strncpyxx(char*, char const*, unsigned long)+0x60>
10000288:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000028b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000028e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000291:	eb e3                	jmp    10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000296:	c9                   	leave  
10000297:	c3                   	ret    

10000298 <strcmp>:
10000298:	55                   	push   ebp
10000299:	89 e5                	mov    ebp,esp
1000029b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029e:	8a 10                	mov    dl,BYTE PTR [eax]
100002a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a3:	8a 00                	mov    al,BYTE PTR [eax]
100002a5:	38 c2                	cmp    dl,al
100002a7:	75 20                	jne    100002c9 <strcmp+0x31>
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	8d 50 01             	lea    edx,[eax+0x1]
100002af:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
100002b2:	8a 00                	mov    al,BYTE PTR [eax]
100002b4:	84 c0                	test   al,al
100002b6:	0f 94 c0             	sete   al
100002b9:	84 c0                	test   al,al
100002bb:	74 07                	je     100002c4 <strcmp+0x2c>
100002bd:	b8 00 00 00 00       	mov    eax,0x0
100002c2:	eb 19                	jmp    100002dd <strcmp+0x45>
100002c4:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100002c7:	eb d2                	jmp    1000029b <strcmp+0x3>
100002c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002cc:	8a 00                	mov    al,BYTE PTR [eax]
100002ce:	0f b6 d0             	movzx  edx,al
100002d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002d4:	8a 00                	mov    al,BYTE PTR [eax]
100002d6:	0f b6 c0             	movzx  eax,al
100002d9:	29 c2                	sub    edx,eax
100002db:	89 d0                	mov    eax,edx
100002dd:	5d                   	pop    ebp
100002de:	c3                   	ret    

100002df <strchr(char const*, int)>:
100002df:	55                   	push   ebp
100002e0:	89 e5                	mov    ebp,esp
100002e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e5:	8a 00                	mov    al,BYTE PTR [eax]
100002e7:	84 c0                	test   al,al
100002e9:	74 16                	je     10000301 <strchr(char const*, int)+0x22>
100002eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ee:	8a 00                	mov    al,BYTE PTR [eax]
100002f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002f3:	38 d0                	cmp    al,dl
100002f5:	75 05                	jne    100002fc <strchr(char const*, int)+0x1d>
100002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fa:	eb 0a                	jmp    10000306 <strchr(char const*, int)+0x27>
100002fc:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
100002ff:	eb e1                	jmp    100002e2 <strchr(char const*, int)+0x3>
10000301:	b8 00 00 00 00       	mov    eax,0x0
10000306:	5d                   	pop    ebp
10000307:	c3                   	ret    

10000308 <strncmp>:
10000308:	55                   	push   ebp
10000309:	89 e5                	mov    ebp,esp
1000030b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000030e:	8d 50 ff             	lea    edx,[eax-0x1]
10000311:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000314:	85 c0                	test   eax,eax
10000316:	74 12                	je     1000032a <strncmp+0x22>
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	8a 10                	mov    dl,BYTE PTR [eax]
1000031d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000320:	8a 00                	mov    al,BYTE PTR [eax]
10000322:	38 c2                	cmp    dl,al
10000324:	75 04                	jne    1000032a <strncmp+0x22>
10000326:	b0 01                	mov    al,0x1
10000328:	eb 02                	jmp    1000032c <strncmp+0x24>
1000032a:	b0 00                	mov    al,0x0
1000032c:	84 c0                	test   al,al
1000032e:	74 20                	je     10000350 <strncmp+0x48>
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8d 50 01             	lea    edx,[eax+0x1]
10000336:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
10000339:	8a 00                	mov    al,BYTE PTR [eax]
1000033b:	84 c0                	test   al,al
1000033d:	0f 94 c0             	sete   al
10000340:	84 c0                	test   al,al
10000342:	74 07                	je     1000034b <strncmp+0x43>
10000344:	b8 00 00 00 00       	mov    eax,0x0
10000349:	eb 19                	jmp    10000364 <strncmp+0x5c>
1000034b:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000034e:	eb bb                	jmp    1000030b <strncmp+0x3>
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8a 00                	mov    al,BYTE PTR [eax]
10000355:	0f b6 d0             	movzx  edx,al
10000358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000035b:	8a 00                	mov    al,BYTE PTR [eax]
1000035d:	0f b6 c0             	movzx  eax,al
10000360:	29 c2                	sub    edx,eax
10000362:	89 d0                	mov    eax,edx
10000364:	5d                   	pop    ebp
10000365:	c3                   	ret    

10000366 <strcat>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 10             	sub    esp,0x10
1000036c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000372:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000375:	8d 50 01             	lea    edx,[eax+0x1]
10000378:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000037b:	8a 00                	mov    al,BYTE PTR [eax]
1000037d:	84 c0                	test   al,al
1000037f:	0f 95 c0             	setne  al
10000382:	84 c0                	test   al,al
10000384:	74 02                	je     10000388 <strcat+0x22>
10000386:	eb ea                	jmp    10000372 <strcat+0xc>
10000388:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
1000038b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000038e:	8d 42 01             	lea    eax,[edx+0x1]
10000391:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000394:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000397:	8d 48 01             	lea    ecx,[eax+0x1]
1000039a:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
1000039d:	8a 12                	mov    dl,BYTE PTR [edx]
1000039f:	88 10                	mov    BYTE PTR [eax],dl
100003a1:	8a 00                	mov    al,BYTE PTR [eax]
100003a3:	84 c0                	test   al,al
100003a5:	0f 95 c0             	setne  al
100003a8:	84 c0                	test   al,al
100003aa:	74 02                	je     100003ae <strcat+0x48>
100003ac:	eb dd                	jmp    1000038b <strcat+0x25>
100003ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b1:	c9                   	leave  
100003b2:	c3                   	ret    

100003b3 <strncat(char*, char const*, unsigned long)>:
100003b3:	55                   	push   ebp
100003b4:	89 e5                	mov    ebp,esp
100003b6:	83 ec 10             	sub    esp,0x10
100003b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100003bd:	74 5c                	je     1000041b <strncat(char*, char const*, unsigned long)+0x68>
100003bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003c8:	8d 50 01             	lea    edx,[eax+0x1]
100003cb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100003ce:	8a 00                	mov    al,BYTE PTR [eax]
100003d0:	84 c0                	test   al,al
100003d2:	0f 95 c0             	setne  al
100003d5:	84 c0                	test   al,al
100003d7:	74 02                	je     100003db <strncat(char*, char const*, unsigned long)+0x28>
100003d9:	eb ea                	jmp    100003c5 <strncat(char*, char const*, unsigned long)+0x12>
100003db:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100003de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e1:	8d 42 01             	lea    eax,[edx+0x1]
100003e4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100003e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003ea:	8d 48 01             	lea    ecx,[eax+0x1]
100003ed:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
100003f0:	8a 12                	mov    dl,BYTE PTR [edx]
100003f2:	88 10                	mov    BYTE PTR [eax],dl
100003f4:	8a 00                	mov    al,BYTE PTR [eax]
100003f6:	84 c0                	test   al,al
100003f8:	74 0d                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
100003fa:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100003fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000401:	74 04                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
10000403:	b0 01                	mov    al,0x1
10000405:	eb 02                	jmp    10000409 <strncat(char*, char const*, unsigned long)+0x56>
10000407:	b0 00                	mov    al,0x0
10000409:	84 c0                	test   al,al
1000040b:	74 02                	je     1000040f <strncat(char*, char const*, unsigned long)+0x5c>
1000040d:	eb cf                	jmp    100003de <strncat(char*, char const*, unsigned long)+0x2b>
1000040f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000413:	75 06                	jne    1000041b <strncat(char*, char const*, unsigned long)+0x68>
10000415:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000418:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000041b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041e:	c9                   	leave  
1000041f:	c3                   	ret    

10000420 <strstr(char*, char*)>:
10000420:	55                   	push   ebp
10000421:	89 e5                	mov    ebp,esp
10000423:	83 ec 10             	sub    esp,0x10
10000426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000429:	e8 fc ff ff ff       	call   1000042a <strstr(char*, char*)+0xa>	1000042a: R_386_PC32	strlen
1000042e:	83 c4 04             	add    esp,0x4
10000431:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000434:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
10000438:	75 05                	jne    1000043f <strstr(char*, char*)+0x1f>
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	eb 3f                	jmp    1000047e <strstr(char*, char*)+0x5e>
1000043f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000442:	50                   	push   eax
10000443:	e8 fc ff ff ff       	call   10000444 <strstr(char*, char*)+0x24>	10000444: R_386_PC32	strlen
10000448:	83 c4 04             	add    esp,0x4
1000044b:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
1000044e:	77 29                	ja     10000479 <strstr(char*, char*)+0x59>
10000450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000453:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
10000456:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000459:	50                   	push   eax
1000045a:	e8 fc ff ff ff       	call   1000045b <strstr(char*, char*)+0x3b>	1000045b: R_386_PC32	memcmp(void*, void*, unsigned long)
1000045f:	83 c4 0c             	add    esp,0xc
10000462:	85 c0                	test   eax,eax
10000464:	0f 94 c0             	sete   al
10000467:	84 c0                	test   al,al
10000469:	74 05                	je     10000470 <strstr(char*, char*)+0x50>
1000046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000046e:	eb 0e                	jmp    1000047e <strstr(char*, char*)+0x5e>
10000470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000473:	40                   	inc    eax
10000474:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000477:	eb c6                	jmp    1000043f <strstr(char*, char*)+0x1f>
10000479:	b8 00 00 00 00       	mov    eax,0x0
1000047e:	c9                   	leave  
1000047f:	c3                   	ret    

10000480 <rmtree(char*)>:
10000480:	55                   	push   ebp
10000481:	89 e5                	mov    ebp,esp
10000483:	53                   	push   ebx
10000484:	81 ec 64 02 00 00    	sub    esp,0x264
1000048a:	68 2c 01 00 00       	push   0x12c
1000048f:	6a 00                	push   0x0
10000491:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000497:	50                   	push   eax
10000498:	e8 fc ff ff ff       	call   10000499 <rmtree(char*)+0x19>	10000499: R_386_PC32	memset
1000049d:	83 c4 0c             	add    esp,0xc
100004a0:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
100004a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100004a9:	83 ec 0c             	sub    esp,0xc
100004ac:	68 14 01 00 00       	push   0x114
100004b1:	e8 fc ff ff ff       	call   100004b2 <rmtree(char*)+0x32>	100004b2: R_386_PC32	operator new(unsigned long)
100004b6:	83 c4 10             	add    esp,0x10
100004b9:	89 c3                	mov    ebx,eax
100004bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
100004c0:	8b 00                	mov    eax,DWORD PTR [eax]
100004c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
100004c5:	83 ec 04             	sub    esp,0x4
100004c8:	50                   	push   eax
100004c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004cc:	53                   	push   ebx
100004cd:	e8 fc ff ff ff       	call   100004ce <rmtree(char*)+0x4e>	100004ce: R_386_PC32	Directory::Directory(char const*, Process*)
100004d2:	83 c4 10             	add    esp,0x10
100004d5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
100004d8:	83 ec 0c             	sub    esp,0xc
100004db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004de:	e8 fc ff ff ff       	call   100004df <rmtree(char*)+0x5f>	100004df: R_386_PC32	Directory::open()
100004e3:	83 c4 10             	add    esp,0x10
100004e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004e9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100004ed:	74 24                	je     10000513 <rmtree(char*)+0x93>
100004ef:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004f3:	0f 84 8b 01 00 00    	je     10000684 <rmtree(char*)+0x204>
100004f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004fc:	8b 00                	mov    eax,DWORD PTR [eax]
100004fe:	83 c0 08             	add    eax,0x8
10000501:	8b 00                	mov    eax,DWORD PTR [eax]
10000503:	83 ec 0c             	sub    esp,0xc
10000506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000509:	ff d0                	call   eax
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	e9 72 01 00 00       	jmp    10000685 <rmtree(char*)+0x205>
10000513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000516:	8b 00                	mov    eax,DWORD PTR [eax]
10000518:	83 c0 0c             	add    eax,0xc
1000051b:	8b 00                	mov    eax,DWORD PTR [eax]
1000051d:	83 ec 0c             	sub    esp,0xc
10000520:	8d 95 a4 fd ff ff    	lea    edx,[ebp-0x25c]
10000526:	52                   	push   edx
10000527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000052a:	6a 00                	push   0x0
1000052c:	68 10 01 00 00       	push   0x110
10000531:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000534:	ff d0                	call   eax
10000536:	83 c4 20             	add    esp,0x20
10000539:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
1000053c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000540:	0f 85 04 01 00 00    	jne    1000064a <rmtree(char*)+0x1ca>
10000546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000549:	83 c0 10             	add    eax,0x10
1000054c:	83 ec 08             	sub    esp,0x8
1000054f:	68 b4 a5 00 10       	push   0x1000a5b4	10000550: R_386_32	.text
10000554:	50                   	push   eax
10000555:	e8 fc ff ff ff       	call   10000556 <rmtree(char*)+0xd6>	10000556: R_386_PC32	strcmp
1000055a:	83 c4 10             	add    esp,0x10
1000055d:	85 c0                	test   eax,eax
1000055f:	74 b2                	je     10000513 <rmtree(char*)+0x93>
10000561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000564:	83 c0 10             	add    eax,0x10
10000567:	83 ec 08             	sub    esp,0x8
1000056a:	68 b6 a5 00 10       	push   0x1000a5b6	1000056b: R_386_32	.text
1000056f:	50                   	push   eax
10000570:	e8 fc ff ff ff       	call   10000571 <rmtree(char*)+0xf1>	10000571: R_386_PC32	strcmp
10000575:	83 c4 10             	add    esp,0x10
10000578:	85 c0                	test   eax,eax
1000057a:	74 97                	je     10000513 <rmtree(char*)+0x93>
1000057c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000057f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000582:	83 e0 02             	and    eax,0x2
10000585:	85 c0                	test   eax,eax
10000587:	74 17                	je     100005a0 <rmtree(char*)+0x120>
10000589:	83 ec 0c             	sub    esp,0xc
1000058c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000592:	50                   	push   eax
10000593:	e8 fc ff ff ff       	call   10000594 <rmtree(char*)+0x114>	10000594: R_386_PC32	rmtree(char*)
10000598:	83 c4 10             	add    esp,0x10
1000059b:	e9 73 ff ff ff       	jmp    10000513 <rmtree(char*)+0x93>
100005a0:	83 ec 08             	sub    esp,0x8
100005a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005a6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005ac:	50                   	push   eax
100005ad:	e8 fc ff ff ff       	call   100005ae <rmtree(char*)+0x12e>	100005ae: R_386_PC32	strcpy
100005b2:	83 c4 10             	add    esp,0x10
100005b5:	83 ec 08             	sub    esp,0x8
100005b8:	68 b9 a5 00 10       	push   0x1000a5b9	100005b9: R_386_32	.text
100005bd:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005c3:	50                   	push   eax
100005c4:	e8 fc ff ff ff       	call   100005c5 <rmtree(char*)+0x145>	100005c5: R_386_PC32	strcat
100005c9:	83 c4 10             	add    esp,0x10
100005cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100005cf:	83 c0 10             	add    eax,0x10
100005d2:	83 ec 08             	sub    esp,0x8
100005d5:	50                   	push   eax
100005d6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005dc:	50                   	push   eax
100005dd:	e8 fc ff ff ff       	call   100005de <rmtree(char*)+0x15e>	100005de: R_386_PC32	strcat
100005e2:	83 c4 10             	add    esp,0x10
100005e5:	83 ec 0c             	sub    esp,0xc
100005e8:	68 14 01 00 00       	push   0x114
100005ed:	e8 fc ff ff ff       	call   100005ee <rmtree(char*)+0x16e>	100005ee: R_386_PC32	operator new(unsigned long)
100005f2:	83 c4 10             	add    esp,0x10
100005f5:	89 c3                	mov    ebx,eax
100005f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
100005fc:	8b 00                	mov    eax,DWORD PTR [eax]
100005fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000601:	83 ec 04             	sub    esp,0x4
10000604:	50                   	push   eax
10000605:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
1000060b:	50                   	push   eax
1000060c:	53                   	push   ebx
1000060d:	e8 fc ff ff ff       	call   1000060e <rmtree(char*)+0x18e>	1000060e: R_386_PC32	File::File(char const*, Process*)
10000612:	83 c4 10             	add    esp,0x10
10000615:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000618:	83 ec 0c             	sub    esp,0xc
1000061b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000061e:	e8 fc ff ff ff       	call   1000061f <rmtree(char*)+0x19f>	1000061f: R_386_PC32	File::unlink()
10000623:	83 c4 10             	add    esp,0x10
10000626:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000062a:	0f 84 e3 fe ff ff    	je     10000513 <rmtree(char*)+0x93>
10000630:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000633:	8b 00                	mov    eax,DWORD PTR [eax]
10000635:	83 c0 08             	add    eax,0x8
10000638:	8b 00                	mov    eax,DWORD PTR [eax]
1000063a:	83 ec 0c             	sub    esp,0xc
1000063d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000640:	ff d0                	call   eax
10000642:	83 c4 10             	add    esp,0x10
10000645:	e9 c9 fe ff ff       	jmp    10000513 <rmtree(char*)+0x93>
1000064a:	90                   	nop
1000064b:	83 ec 0c             	sub    esp,0xc
1000064e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000651:	e8 fc ff ff ff       	call   10000652 <rmtree(char*)+0x1d2>	10000652: R_386_PC32	Directory::close()
10000656:	83 c4 10             	add    esp,0x10
10000659:	83 ec 0c             	sub    esp,0xc
1000065c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000065f:	e8 fc ff ff ff       	call   10000660 <rmtree(char*)+0x1e0>	10000660: R_386_PC32	Directory::unlink()
10000664:	83 c4 10             	add    esp,0x10
10000667:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000066b:	74 18                	je     10000685 <rmtree(char*)+0x205>
1000066d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000670:	8b 00                	mov    eax,DWORD PTR [eax]
10000672:	83 c0 08             	add    eax,0x8
10000675:	8b 00                	mov    eax,DWORD PTR [eax]
10000677:	83 ec 0c             	sub    esp,0xc
1000067a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000067d:	ff d0                	call   eax
1000067f:	83 c4 10             	add    esp,0x10
10000682:	eb 01                	jmp    10000685 <rmtree(char*)+0x205>
10000684:	90                   	nop
10000685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000688:	c9                   	leave  
10000689:	c3                   	ret    

1000068a <mkdir(char const*, int)>:
1000068a:	55                   	push   ebp
1000068b:	89 e5                	mov    ebp,esp
1000068d:	53                   	push   ebx
1000068e:	83 ec 14             	sub    esp,0x14
10000691:	83 ec 0c             	sub    esp,0xc
10000694:	68 14 01 00 00       	push   0x114
10000699:	e8 fc ff ff ff       	call   1000069a <mkdir(char const*, int)+0x10>	1000069a: R_386_PC32	operator new(unsigned long)
1000069e:	83 c4 10             	add    esp,0x10
100006a1:	89 c3                	mov    ebx,eax
100006a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100006a4: R_386_32	kernelProcess
100006a8:	83 ec 04             	sub    esp,0x4
100006ab:	50                   	push   eax
100006ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006af:	53                   	push   ebx
100006b0:	e8 fc ff ff ff       	call   100006b1 <mkdir(char const*, int)+0x27>	100006b1: R_386_PC32	Directory::Directory(char const*, Process*)
100006b5:	83 c4 10             	add    esp,0x10
100006b8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100006bb:	83 ec 0c             	sub    esp,0xc
100006be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006c1:	e8 fc ff ff ff       	call   100006c2 <mkdir(char const*, int)+0x38>	100006c2: R_386_PC32	Directory::create()
100006c6:	83 c4 10             	add    esp,0x10
100006c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100006cd:	74 15                	je     100006e4 <mkdir(char const*, int)+0x5a>
100006cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100006d2:	8b 00                	mov    eax,DWORD PTR [eax]
100006d4:	83 c0 08             	add    eax,0x8
100006d7:	8b 00                	mov    eax,DWORD PTR [eax]
100006d9:	83 ec 0c             	sub    esp,0xc
100006dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006df:	ff d0                	call   eax
100006e1:	83 c4 10             	add    esp,0x10
100006e4:	b8 00 00 00 00       	mov    eax,0x0
100006e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100006ec:	c9                   	leave  
100006ed:	c3                   	ret    

100006ee <copytree(char*, char*)>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	53                   	push   ebx
100006f2:	81 ec 54 01 00 00    	sub    esp,0x154
100006f8:	83 ec 0c             	sub    esp,0xc
100006fb:	68 90 01 00 00       	push   0x190
10000700:	e8 fc ff ff ff       	call   10000701 <copytree(char*, char*)+0x13>	10000701: R_386_PC32	malloc
10000705:	83 c4 10             	add    esp,0x10
10000708:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000070b:	83 ec 0c             	sub    esp,0xc
1000070e:	68 90 01 00 00       	push   0x190
10000713:	e8 fc ff ff ff       	call   10000714 <copytree(char*, char*)+0x26>	10000714: R_386_PC32	malloc
10000718:	83 c4 10             	add    esp,0x10
1000071b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000071e:	83 ec 04             	sub    esp,0x4
10000721:	68 90 01 00 00       	push   0x190
10000726:	6a 00                	push   0x0
10000728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000072b:	e8 fc ff ff ff       	call   1000072c <copytree(char*, char*)+0x3e>	1000072c: R_386_PC32	memset
10000730:	83 c4 10             	add    esp,0x10
10000733:	83 ec 04             	sub    esp,0x4
10000736:	68 90 01 00 00       	push   0x190
1000073b:	6a 00                	push   0x0
1000073d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000740:	e8 fc ff ff ff       	call   10000741 <copytree(char*, char*)+0x53>	10000741: R_386_PC32	memset
10000745:	83 c4 10             	add    esp,0x10
10000748:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000074e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000751:	83 ec 0c             	sub    esp,0xc
10000754:	68 14 01 00 00       	push   0x114
10000759:	e8 fc ff ff ff       	call   1000075a <copytree(char*, char*)+0x6c>	1000075a: R_386_PC32	operator new(unsigned long)
1000075e:	83 c4 10             	add    esp,0x10
10000761:	89 c3                	mov    ebx,eax
10000763:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000768:	8b 00                	mov    eax,DWORD PTR [eax]
1000076a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000076d:	83 ec 04             	sub    esp,0x4
10000770:	50                   	push   eax
10000771:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000774:	53                   	push   ebx
10000775:	e8 fc ff ff ff       	call   10000776 <copytree(char*, char*)+0x88>	10000776: R_386_PC32	Directory::Directory(char const*, Process*)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000780:	83 ec 0c             	sub    esp,0xc
10000783:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000786:	e8 fc ff ff ff       	call   10000787 <copytree(char*, char*)+0x99>	10000787: R_386_PC32	Directory::open()
1000078b:	83 c4 10             	add    esp,0x10
1000078e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000791:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10000795:	74 34                	je     100007cb <copytree(char*, char*)+0xdd>
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	68 bb a5 00 10       	push   0x1000a5bb	1000079b: R_386_32	.text
1000079f:	e8 fc ff ff ff       	call   100007a0 <copytree(char*, char*)+0xb2>	100007a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100007a4:	83 c4 10             	add    esp,0x10
100007a7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
100007ab:	0f 84 90 03 00 00    	je     10000b41 <copytree(char*, char*)+0x453>
100007b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007b4:	8b 00                	mov    eax,DWORD PTR [eax]
100007b6:	83 c0 08             	add    eax,0x8
100007b9:	8b 00                	mov    eax,DWORD PTR [eax]
100007bb:	83 ec 0c             	sub    esp,0xc
100007be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007c1:	ff d0                	call   eax
100007c3:	83 c4 10             	add    esp,0x10
100007c6:	e9 76 03 00 00       	jmp    10000b41 <copytree(char*, char*)+0x453>
100007cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007ce:	8b 00                	mov    eax,DWORD PTR [eax]
100007d0:	83 c0 0c             	add    eax,0xc
100007d3:	8b 00                	mov    eax,DWORD PTR [eax]
100007d5:	83 ec 0c             	sub    esp,0xc
100007d8:	8d 95 b8 fe ff ff    	lea    edx,[ebp-0x148]
100007de:	52                   	push   edx
100007df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100007e2:	6a 00                	push   0x0
100007e4:	68 10 01 00 00       	push   0x110
100007e9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007ec:	ff d0                	call   eax
100007ee:	83 c4 20             	add    esp,0x20
100007f1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007f4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100007f8:	0f 85 fb 02 00 00    	jne    10000af9 <copytree(char*, char*)+0x40b>
100007fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000801:	83 c0 10             	add    eax,0x10
10000804:	83 ec 08             	sub    esp,0x8
10000807:	68 b4 a5 00 10       	push   0x1000a5b4	10000808: R_386_32	.text
1000080c:	50                   	push   eax
1000080d:	e8 fc ff ff ff       	call   1000080e <copytree(char*, char*)+0x120>	1000080e: R_386_PC32	strcmp
10000812:	83 c4 10             	add    esp,0x10
10000815:	85 c0                	test   eax,eax
10000817:	74 b2                	je     100007cb <copytree(char*, char*)+0xdd>
10000819:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000081c:	83 c0 10             	add    eax,0x10
1000081f:	83 ec 08             	sub    esp,0x8
10000822:	68 b6 a5 00 10       	push   0x1000a5b6	10000823: R_386_32	.text
10000827:	50                   	push   eax
10000828:	e8 fc ff ff ff       	call   10000829 <copytree(char*, char*)+0x13b>	10000829: R_386_PC32	strcmp
1000082d:	83 c4 10             	add    esp,0x10
10000830:	85 c0                	test   eax,eax
10000832:	74 97                	je     100007cb <copytree(char*, char*)+0xdd>
10000834:	83 ec 08             	sub    esp,0x8
10000837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000083d:	e8 fc ff ff ff       	call   1000083e <copytree(char*, char*)+0x150>	1000083e: R_386_PC32	strcpy
10000842:	83 c4 10             	add    esp,0x10
10000845:	83 ec 08             	sub    esp,0x8
10000848:	68 b9 a5 00 10       	push   0x1000a5b9	10000849: R_386_32	.text
1000084d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000850:	e8 fc ff ff ff       	call   10000851 <copytree(char*, char*)+0x163>	10000851: R_386_PC32	strcat
10000855:	83 c4 10             	add    esp,0x10
10000858:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000085b:	83 c0 10             	add    eax,0x10
1000085e:	83 ec 08             	sub    esp,0x8
10000861:	50                   	push   eax
10000862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000865:	e8 fc ff ff ff       	call   10000866 <copytree(char*, char*)+0x178>	10000866: R_386_PC32	strcat
1000086a:	83 c4 10             	add    esp,0x10
1000086d:	83 ec 08             	sub    esp,0x8
10000870:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000873:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000876:	e8 fc ff ff ff       	call   10000877 <copytree(char*, char*)+0x189>	10000877: R_386_PC32	strcpy
1000087b:	83 c4 10             	add    esp,0x10
1000087e:	83 ec 08             	sub    esp,0x8
10000881:	68 b9 a5 00 10       	push   0x1000a5b9	10000882: R_386_32	.text
10000886:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000889:	e8 fc ff ff ff       	call   1000088a <copytree(char*, char*)+0x19c>	1000088a: R_386_PC32	strcat
1000088e:	83 c4 10             	add    esp,0x10
10000891:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000894:	83 c0 10             	add    eax,0x10
10000897:	83 ec 08             	sub    esp,0x8
1000089a:	50                   	push   eax
1000089b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000089e:	e8 fc ff ff ff       	call   1000089f <copytree(char*, char*)+0x1b1>	1000089f: R_386_PC32	strcat
100008a3:	83 c4 10             	add    esp,0x10
100008a6:	83 ec 04             	sub    esp,0x4
100008a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100008af:	68 d5 a5 00 10       	push   0x1000a5d5	100008b0: R_386_32	.text
100008b4:	e8 fc ff ff ff       	call   100008b5 <copytree(char*, char*)+0x1c7>	100008b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100008b9:	83 c4 10             	add    esp,0x10
100008bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100008bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100008c2:	83 e0 02             	and    eax,0x2
100008c5:	85 c0                	test   eax,eax
100008c7:	74 47                	je     10000910 <copytree(char*, char*)+0x222>
100008c9:	83 ec 08             	sub    esp,0x8
100008cc:	68 c0 01 00 00       	push   0x1c0
100008d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008d4:	e8 fc ff ff ff       	call   100008d5 <copytree(char*, char*)+0x1e7>	100008d5: R_386_PC32	mkdir(char const*, int)
100008d9:	83 c4 10             	add    esp,0x10
100008dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100008df:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100008e3:	74 15                	je     100008fa <copytree(char*, char*)+0x20c>
100008e5:	83 ec 0c             	sub    esp,0xc
100008e8:	68 df a5 00 10       	push   0x1000a5df	100008e9: R_386_32	.text
100008ed:	e8 fc ff ff ff       	call   100008ee <copytree(char*, char*)+0x200>	100008ee: R_386_PC32	KePanic(char const*)
100008f2:	83 c4 10             	add    esp,0x10
100008f5:	e9 d1 fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
100008fa:	83 ec 08             	sub    esp,0x8
100008fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000903:	e8 fc ff ff ff       	call   10000904 <copytree(char*, char*)+0x216>	10000904: R_386_PC32	copytree(char*, char*)
10000908:	83 c4 10             	add    esp,0x10
1000090b:	e9 bb fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000910:	83 ec 0c             	sub    esp,0xc
10000913:	68 14 01 00 00       	push   0x114
10000918:	e8 fc ff ff ff       	call   10000919 <copytree(char*, char*)+0x22b>	10000919: R_386_PC32	operator new(unsigned long)
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 c3                	mov    ebx,eax
10000922:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000927:	8b 00                	mov    eax,DWORD PTR [eax]
10000929:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000092c:	83 ec 04             	sub    esp,0x4
1000092f:	50                   	push   eax
10000930:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000933:	53                   	push   ebx
10000934:	e8 fc ff ff ff       	call   10000935 <copytree(char*, char*)+0x247>	10000935: R_386_PC32	File::File(char const*, Process*)
10000939:	83 c4 10             	add    esp,0x10
1000093c:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000093f:	83 ec 08             	sub    esp,0x8
10000942:	6a 01                	push   0x1
10000944:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000947:	e8 fc ff ff ff       	call   10000948 <copytree(char*, char*)+0x25a>	10000948: R_386_PC32	File::open(FileOpenMode)
1000094c:	83 c4 10             	add    esp,0x10
1000094f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000953:	75 15                	jne    1000096a <copytree(char*, char*)+0x27c>
10000955:	83 ec 0c             	sub    esp,0xc
10000958:	68 f0 a5 00 10       	push   0x1000a5f0	10000959: R_386_32	.text
1000095d:	e8 fc ff ff ff       	call   1000095e <copytree(char*, char*)+0x270>	1000095e: R_386_PC32	KePanic(char const*)
10000962:	83 c4 10             	add    esp,0x10
10000965:	e9 8a 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
1000096a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000096e:	0f 84 57 fe ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000974:	83 ec 0c             	sub    esp,0xc
10000977:	68 14 01 00 00       	push   0x114
1000097c:	e8 fc ff ff ff       	call   1000097d <copytree(char*, char*)+0x28f>	1000097d: R_386_PC32	operator new(unsigned long)
10000981:	83 c4 10             	add    esp,0x10
10000984:	89 c3                	mov    ebx,eax
10000986:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000098b:	8b 00                	mov    eax,DWORD PTR [eax]
1000098d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000990:	83 ec 04             	sub    esp,0x4
10000993:	50                   	push   eax
10000994:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000997:	53                   	push   ebx
10000998:	e8 fc ff ff ff       	call   10000999 <copytree(char*, char*)+0x2ab>	10000999: R_386_PC32	File::File(char const*, Process*)
1000099d:	83 c4 10             	add    esp,0x10
100009a0:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
100009a3:	83 ec 08             	sub    esp,0x8
100009a6:	6a 12                	push   0x12
100009a8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009ab:	e8 fc ff ff ff       	call   100009ac <copytree(char*, char*)+0x2be>	100009ac: R_386_PC32	File::open(FileOpenMode)
100009b0:	83 c4 10             	add    esp,0x10
100009b3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
100009b7:	75 23                	jne    100009dc <copytree(char*, char*)+0x2ee>
100009b9:	83 ec 0c             	sub    esp,0xc
100009bc:	68 f0 a5 00 10       	push   0x1000a5f0	100009bd: R_386_32	.text
100009c1:	e8 fc ff ff ff       	call   100009c2 <copytree(char*, char*)+0x2d4>	100009c2: R_386_PC32	KePanic(char const*)
100009c6:	83 c4 10             	add    esp,0x10
100009c9:	83 ec 0c             	sub    esp,0xc
100009cc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009cf:	e8 fc ff ff ff       	call   100009d0 <copytree(char*, char*)+0x2e2>	100009d0: R_386_PC32	File::close()
100009d4:	83 c4 10             	add    esp,0x10
100009d7:	e9 18 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
100009dc:	83 ec 0c             	sub    esp,0xc
100009df:	68 00 10 00 00       	push   0x1000
100009e4:	e8 fc ff ff ff       	call   100009e5 <copytree(char*, char*)+0x2f7>	100009e5: R_386_PC32	malloc
100009e9:	83 c4 10             	add    esp,0x10
100009ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100009ef:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
100009f3:	75 31                	jne    10000a26 <copytree(char*, char*)+0x338>
100009f5:	83 ec 0c             	sub    esp,0xc
100009f8:	68 ff a5 00 10       	push   0x1000a5ff	100009f9: R_386_32	.text
100009fd:	e8 fc ff ff ff       	call   100009fe <copytree(char*, char*)+0x310>	100009fe: R_386_PC32	KePanic(char const*)
10000a02:	83 c4 10             	add    esp,0x10
10000a05:	83 ec 0c             	sub    esp,0xc
10000a08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000a0b:	e8 fc ff ff ff       	call   10000a0c <copytree(char*, char*)+0x31e>	10000a0c: R_386_PC32	free
10000a10:	83 c4 10             	add    esp,0x10
10000a13:	83 ec 0c             	sub    esp,0xc
10000a16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000a19:	e8 fc ff ff ff       	call   10000a1a <copytree(char*, char*)+0x32c>	10000a1a: R_386_PC32	free
10000a1e:	83 c4 10             	add    esp,0x10
10000a21:	e9 1c 01 00 00       	jmp    10000b42 <copytree(char*, char*)+0x454>
10000a26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000a29:	8b 00                	mov    eax,DWORD PTR [eax]
10000a2b:	83 c0 0c             	add    eax,0xc
10000a2e:	8b 00                	mov    eax,DWORD PTR [eax]
10000a30:	83 ec 0c             	sub    esp,0xc
10000a33:	8d 95 b4 fe ff ff    	lea    edx,[ebp-0x14c]
10000a39:	52                   	push   edx
10000a3a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a3d:	6a 00                	push   0x0
10000a3f:	68 00 10 00 00       	push   0x1000
10000a44:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000a47:	ff d0                	call   eax
10000a49:	83 c4 20             	add    esp,0x20
10000a4c:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a4f:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000a53:	75 37                	jne    10000a8c <copytree(char*, char*)+0x39e>
10000a55:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a58:	8b 00                	mov    eax,DWORD PTR [eax]
10000a5a:	83 c0 10             	add    eax,0x10
10000a5d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a5f:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a65:	99                   	cdq    
10000a66:	83 ec 0c             	sub    esp,0xc
10000a69:	8d 9d b0 fe ff ff    	lea    ebx,[ebp-0x150]
10000a6f:	53                   	push   ebx
10000a70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a73:	52                   	push   edx
10000a74:	50                   	push   eax
10000a75:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a78:	ff d1                	call   ecx
10000a7a:	83 c4 20             	add    esp,0x20
10000a7d:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a83:	3d 00 10 00 00       	cmp    eax,0x1000
10000a88:	75 05                	jne    10000a8f <copytree(char*, char*)+0x3a1>
10000a8a:	eb 9a                	jmp    10000a26 <copytree(char*, char*)+0x338>
10000a8c:	90                   	nop
10000a8d:	eb 01                	jmp    10000a90 <copytree(char*, char*)+0x3a2>
10000a8f:	90                   	nop
10000a90:	83 ec 0c             	sub    esp,0xc
10000a93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a96:	e8 fc ff ff ff       	call   10000a97 <copytree(char*, char*)+0x3a9>	10000a97: R_386_PC32	free
10000a9b:	83 c4 10             	add    esp,0x10
10000a9e:	83 ec 0c             	sub    esp,0xc
10000aa1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000aa4:	e8 fc ff ff ff       	call   10000aa5 <copytree(char*, char*)+0x3b7>	10000aa5: R_386_PC32	File::close()
10000aa9:	83 c4 10             	add    esp,0x10
10000aac:	83 ec 0c             	sub    esp,0xc
10000aaf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <copytree(char*, char*)+0x3c5>	10000ab3: R_386_PC32	File::close()
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000abe:	74 15                	je     10000ad5 <copytree(char*, char*)+0x3e7>
10000ac0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000ac3:	8b 00                	mov    eax,DWORD PTR [eax]
10000ac5:	83 c0 08             	add    eax,0x8
10000ac8:	8b 00                	mov    eax,DWORD PTR [eax]
10000aca:	83 ec 0c             	sub    esp,0xc
10000acd:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ad0:	ff d0                	call   eax
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10000ad9:	0f 84 ec fc ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000adf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000ae2:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae4:	83 c0 08             	add    eax,0x8
10000ae7:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae9:	83 ec 0c             	sub    esp,0xc
10000aec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000aef:	ff d0                	call   eax
10000af1:	83 c4 10             	add    esp,0x10
10000af4:	e9 d2 fc ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000af9:	90                   	nop
10000afa:	83 ec 0c             	sub    esp,0xc
10000afd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000b00:	e8 fc ff ff ff       	call   10000b01 <copytree(char*, char*)+0x413>	10000b01: R_386_PC32	free
10000b05:	83 c4 10             	add    esp,0x10
10000b08:	83 ec 0c             	sub    esp,0xc
10000b0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000b0e:	e8 fc ff ff ff       	call   10000b0f <copytree(char*, char*)+0x421>	10000b0f: R_386_PC32	free
10000b13:	83 c4 10             	add    esp,0x10
10000b16:	83 ec 0c             	sub    esp,0xc
10000b19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b1c:	e8 fc ff ff ff       	call   10000b1d <copytree(char*, char*)+0x42f>	10000b1d: R_386_PC32	Directory::close()
10000b21:	83 c4 10             	add    esp,0x10
10000b24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000b28:	74 18                	je     10000b42 <copytree(char*, char*)+0x454>
10000b2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000b2d:	8b 00                	mov    eax,DWORD PTR [eax]
10000b2f:	83 c0 08             	add    eax,0x8
10000b32:	8b 00                	mov    eax,DWORD PTR [eax]
10000b34:	83 ec 0c             	sub    esp,0xc
10000b37:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b3a:	ff d0                	call   eax
10000b3c:	83 c4 10             	add    esp,0x10
10000b3f:	eb 01                	jmp    10000b42 <copytree(char*, char*)+0x454>
10000b41:	90                   	nop
10000b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000b45:	c9                   	leave  
10000b46:	c3                   	ret    

10000b47 <backupTree(char*, unsigned short)>:
10000b47:	55                   	push   ebp
10000b48:	89 e5                	mov    ebp,esp
10000b4a:	57                   	push   edi
10000b4b:	56                   	push   esi
10000b4c:	53                   	push   ebx
10000b4d:	81 ec 8c 12 00 00    	sub    esp,0x128c
10000b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000b56:	66 89 85 74 ed ff ff 	mov    WORD PTR [ebp-0x128c],ax
10000b5d:	83 ec 0c             	sub    esp,0xc
10000b60:	68 90 01 00 00       	push   0x190
10000b65:	e8 fc ff ff ff       	call   10000b66 <backupTree(char*, unsigned short)+0x1f>	10000b66: R_386_PC32	malloc
10000b6a:	83 c4 10             	add    esp,0x10
10000b6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000b70:	83 ec 04             	sub    esp,0x4
10000b73:	68 90 01 00 00       	push   0x190
10000b78:	6a 00                	push   0x0
10000b7a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000b7d:	e8 fc ff ff ff       	call   10000b7e <backupTree(char*, unsigned short)+0x37>	10000b7e: R_386_PC32	memset
10000b82:	83 c4 10             	add    esp,0x10
10000b85:	8d 85 a8 fe ff ff    	lea    eax,[ebp-0x158]
10000b8b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000b8e:	83 ec 0c             	sub    esp,0xc
10000b91:	68 14 01 00 00       	push   0x114
10000b96:	e8 fc ff ff ff       	call   10000b97 <backupTree(char*, unsigned short)+0x50>	10000b97: R_386_PC32	operator new(unsigned long)
10000b9b:	83 c4 10             	add    esp,0x10
10000b9e:	89 c3                	mov    ebx,eax
10000ba0:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ba5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000baa:	83 ec 04             	sub    esp,0x4
10000bad:	50                   	push   eax
10000bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bb1:	53                   	push   ebx
10000bb2:	e8 fc ff ff ff       	call   10000bb3 <backupTree(char*, unsigned short)+0x6c>	10000bb3: R_386_PC32	Directory::Directory(char const*, Process*)
10000bb7:	83 c4 10             	add    esp,0x10
10000bba:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000bbd:	83 ec 0c             	sub    esp,0xc
10000bc0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bc3:	e8 fc ff ff ff       	call   10000bc4 <backupTree(char*, unsigned short)+0x7d>	10000bc4: R_386_PC32	Directory::open()
10000bc8:	83 c4 10             	add    esp,0x10
10000bcb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000bce:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000bd2:	74 34                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000bd4:	83 ec 0c             	sub    esp,0xc
10000bd7:	68 bb a5 00 10       	push   0x1000a5bb	10000bd8: R_386_32	.text
10000bdc:	e8 fc ff ff ff       	call   10000bdd <backupTree(char*, unsigned short)+0x96>	10000bdd: R_386_PC32	Dbg::kprintf(char const*, ...)
10000be1:	83 c4 10             	add    esp,0x10
10000be4:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10000be8:	0f 84 c8 05 00 00    	je     100011b6 <backupTree(char*, unsigned short)+0x66f>
10000bee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000bf1:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf3:	83 c0 08             	add    eax,0x8
10000bf6:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf8:	83 ec 0c             	sub    esp,0xc
10000bfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bfe:	ff d0                	call   eax
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	e9 af 05 00 00       	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
10000c08:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c0b:	8b 00                	mov    eax,DWORD PTR [eax]
10000c0d:	83 c0 0c             	add    eax,0xc
10000c10:	8b 00                	mov    eax,DWORD PTR [eax]
10000c12:	83 ec 0c             	sub    esp,0xc
10000c15:	8d 95 a4 fe ff ff    	lea    edx,[ebp-0x15c]
10000c1b:	52                   	push   edx
10000c1c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c1f:	6a 00                	push   0x0
10000c21:	68 10 01 00 00       	push   0x110
10000c26:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c29:	ff d0                	call   eax
10000c2b:	83 c4 20             	add    esp,0x20
10000c2e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c31:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10000c35:	0f 85 41 05 00 00    	jne    1000117c <backupTree(char*, unsigned short)+0x635>
10000c3b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c3e:	83 c0 10             	add    eax,0x10
10000c41:	83 ec 08             	sub    esp,0x8
10000c44:	68 b4 a5 00 10       	push   0x1000a5b4	10000c45: R_386_32	.text
10000c49:	50                   	push   eax
10000c4a:	e8 fc ff ff ff       	call   10000c4b <backupTree(char*, unsigned short)+0x104>	10000c4b: R_386_PC32	strcmp
10000c4f:	83 c4 10             	add    esp,0x10
10000c52:	85 c0                	test   eax,eax
10000c54:	74 b2                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c59:	83 c0 10             	add    eax,0x10
10000c5c:	83 ec 08             	sub    esp,0x8
10000c5f:	68 b6 a5 00 10       	push   0x1000a5b6	10000c60: R_386_32	.text
10000c64:	50                   	push   eax
10000c65:	e8 fc ff ff ff       	call   10000c66 <backupTree(char*, unsigned short)+0x11f>	10000c66: R_386_PC32	strcmp
10000c6a:	83 c4 10             	add    esp,0x10
10000c6d:	85 c0                	test   eax,eax
10000c6f:	74 97                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c71:	83 ec 08             	sub    esp,0x8
10000c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c77:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c7a:	e8 fc ff ff ff       	call   10000c7b <backupTree(char*, unsigned short)+0x134>	10000c7b: R_386_PC32	strcpy
10000c7f:	83 c4 10             	add    esp,0x10
10000c82:	83 ec 08             	sub    esp,0x8
10000c85:	68 b9 a5 00 10       	push   0x1000a5b9	10000c86: R_386_32	.text
10000c8a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c8d:	e8 fc ff ff ff       	call   10000c8e <backupTree(char*, unsigned short)+0x147>	10000c8e: R_386_PC32	strcat
10000c92:	83 c4 10             	add    esp,0x10
10000c95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c98:	83 c0 10             	add    eax,0x10
10000c9b:	83 ec 08             	sub    esp,0x8
10000c9e:	50                   	push   eax
10000c9f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ca2:	e8 fc ff ff ff       	call   10000ca3 <backupTree(char*, unsigned short)+0x15c>	10000ca3: R_386_PC32	strcat
10000ca7:	83 c4 10             	add    esp,0x10
10000caa:	66 c7 45 e6 bc ad    	mov    WORD PTR [ebp-0x1a],0xadbc
10000cb0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10000cb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000cba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cbd:	01 d0                	add    eax,edx
10000cbf:	83 c0 10             	add    eax,0x10
10000cc2:	8a 00                	mov    al,BYTE PTR [eax]
10000cc4:	84 c0                	test   al,al
10000cc6:	74 3c                	je     10000d04 <backupTree(char*, unsigned short)+0x1bd>
10000cc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000ccb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cce:	01 d0                	add    eax,edx
10000cd0:	83 c0 10             	add    eax,0x10
10000cd3:	8a 00                	mov    al,BYTE PTR [eax]
10000cd5:	66 0f be d0          	movsx  dx,al
10000cd9:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000cdd:	31 d0                	xor    eax,edx
10000cdf:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000ce3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000ce7:	c1 e0 03             	shl    eax,0x3
10000cea:	89 c2                	mov    edx,eax
10000cec:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000cf0:	c1 f8 0d             	sar    eax,0xd
10000cf3:	09 d0                	or     eax,edx
10000cf5:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000cf9:	66 81 6d e6 f1 06    	sub    WORD PTR [ebp-0x1a],0x6f1
10000cff:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10000d02:	eb b3                	jmp    10000cb7 <backupTree(char*, unsigned short)+0x170>
10000d04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000d0a:	83 e0 02             	and    eax,0x2
10000d0d:	85 c0                	test   eax,eax
10000d0f:	74 37                	je     10000d48 <backupTree(char*, unsigned short)+0x201>
10000d11:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d14:	83 c0 10             	add    eax,0x10
10000d17:	83 ec 08             	sub    esp,0x8
10000d1a:	68 09 a6 00 10       	push   0x1000a609	10000d1b: R_386_32	.text
10000d1f:	50                   	push   eax
10000d20:	e8 fc ff ff ff       	call   10000d21 <backupTree(char*, unsigned short)+0x1da>	10000d21: R_386_PC32	strcmp
10000d25:	83 c4 10             	add    esp,0x10
10000d28:	85 c0                	test   eax,eax
10000d2a:	0f 84 d8 fe ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d30:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000d34:	83 ec 08             	sub    esp,0x8
10000d37:	50                   	push   eax
10000d38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000d3b:	e8 fc ff ff ff       	call   10000d3c <backupTree(char*, unsigned short)+0x1f5>	10000d3c: R_386_PC32	backupTree(char*, unsigned short)
10000d40:	83 c4 10             	add    esp,0x10
10000d43:	e9 c0 fe ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d48:	c6 85 a3 fe ff ff 00 	mov    BYTE PTR [ebp-0x15d],0x0
10000d4f:	83 ec 08             	sub    esp,0x8
10000d52:	68 10 a6 00 10       	push   0x1000a610	10000d53: R_386_32	.text
10000d57:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d5d:	50                   	push   eax
10000d5e:	e8 fc ff ff ff       	call   10000d5f <backupTree(char*, unsigned short)+0x218>	10000d5f: R_386_PC32	strcpy
10000d63:	83 c4 10             	add    esp,0x10
10000d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10000d6c:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000d72:	83 ec 08             	sub    esp,0x8
10000d75:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000d7b:	50                   	push   eax
10000d7c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d82:	50                   	push   eax
10000d83:	e8 fc ff ff ff       	call   10000d84 <backupTree(char*, unsigned short)+0x23d>	10000d84: R_386_PC32	strcat
10000d88:	83 c4 10             	add    esp,0x10
10000d8b:	83 ec 04             	sub    esp,0x4
10000d8e:	6a 09                	push   0x9
10000d90:	6a 00                	push   0x0
10000d92:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000d98:	50                   	push   eax
10000d99:	e8 fc ff ff ff       	call   10000d9a <backupTree(char*, unsigned short)+0x253>	10000d9a: R_386_PC32	memset
10000d9e:	83 c4 10             	add    esp,0x10
10000da1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000da4:	83 c0 10             	add    eax,0x10
10000da7:	83 ec 04             	sub    esp,0x4
10000daa:	6a 08                	push   0x8
10000dac:	50                   	push   eax
10000dad:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000db3:	50                   	push   eax
10000db4:	e8 fc ff ff ff       	call   10000db5 <backupTree(char*, unsigned short)+0x26e>	10000db5: R_386_PC32	strncpyxx(char*, char const*, unsigned long)
10000db9:	83 c4 10             	add    esp,0x10
10000dbc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000dc3:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000dc7:	0f 8f c5 00 00 00    	jg     10000e92 <backupTree(char*, unsigned short)+0x34b>
10000dcd:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000dd3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000dd6:	01 d0                	add    eax,edx
10000dd8:	8a 00                	mov    al,BYTE PTR [eax]
10000dda:	3c 60                	cmp    al,0x60
10000ddc:	7e 30                	jle    10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000dde:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000de4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000de7:	01 d0                	add    eax,edx
10000de9:	8a 00                	mov    al,BYTE PTR [eax]
10000deb:	3c 7a                	cmp    al,0x7a
10000ded:	7f 1f                	jg     10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000def:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000df5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000df8:	01 d0                	add    eax,edx
10000dfa:	8a 00                	mov    al,BYTE PTR [eax]
10000dfc:	83 e8 20             	sub    eax,0x20
10000dff:	88 c2                	mov    dl,al
10000e01:	8d 8d 99 fe ff ff    	lea    ecx,[ebp-0x167]
10000e07:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e0a:	01 c8                	add    eax,ecx
10000e0c:	88 10                	mov    BYTE PTR [eax],dl
10000e0e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e17:	01 d0                	add    eax,edx
10000e19:	8a 00                	mov    al,BYTE PTR [eax]
10000e1b:	3c 59                	cmp    al,0x59
10000e1d:	75 0e                	jne    10000e2d <backupTree(char*, unsigned short)+0x2e6>
10000e1f:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e25:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e28:	01 d0                	add    eax,edx
10000e2a:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e2d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e33:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e36:	01 d0                	add    eax,edx
10000e38:	8a 00                	mov    al,BYTE PTR [eax]
10000e3a:	3c 5a                	cmp    al,0x5a
10000e3c:	75 0e                	jne    10000e4c <backupTree(char*, unsigned short)+0x305>
10000e3e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e47:	01 d0                	add    eax,edx
10000e49:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e4c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e52:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e55:	01 d0                	add    eax,edx
10000e57:	8a 00                	mov    al,BYTE PTR [eax]
10000e59:	3c 20                	cmp    al,0x20
10000e5b:	75 0e                	jne    10000e6b <backupTree(char*, unsigned short)+0x324>
10000e5d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e63:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e66:	01 d0                	add    eax,edx
10000e68:	c6 00 59             	mov    BYTE PTR [eax],0x59
10000e6b:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e74:	01 d0                	add    eax,edx
10000e76:	8a 00                	mov    al,BYTE PTR [eax]
10000e78:	3c 2e                	cmp    al,0x2e
10000e7a:	75 0e                	jne    10000e8a <backupTree(char*, unsigned short)+0x343>
10000e7c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e82:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e85:	01 d0                	add    eax,edx
10000e87:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10000e8a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10000e8d:	e9 31 ff ff ff       	jmp    10000dc3 <backupTree(char*, unsigned short)+0x27c>
10000e92:	83 ec 08             	sub    esp,0x8
10000e95:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000e9b:	50                   	push   eax
10000e9c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ea2:	50                   	push   eax
10000ea3:	e8 fc ff ff ff       	call   10000ea4 <backupTree(char*, unsigned short)+0x35d>	10000ea4: R_386_PC32	strcat
10000ea8:	83 c4 10             	add    esp,0x10
10000eab:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000eae:	83 c0 10             	add    eax,0x10
10000eb1:	83 ec 0c             	sub    esp,0xc
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <backupTree(char*, unsigned short)+0x36f>	10000eb6: R_386_PC32	strlen
10000eba:	83 c4 10             	add    esp,0x10
10000ebd:	83 c0 41             	add    eax,0x41
10000ec0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000ec6:	83 ec 08             	sub    esp,0x8
10000ec9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000ecf:	50                   	push   eax
10000ed0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ed6:	50                   	push   eax
10000ed7:	e8 fc ff ff ff       	call   10000ed8 <backupTree(char*, unsigned short)+0x391>	10000ed8: R_386_PC32	strcat
10000edc:	83 c4 10             	add    esp,0x10
10000edf:	83 ec 08             	sub    esp,0x8
10000ee2:	68 b4 a5 00 10       	push   0x1000a5b4	10000ee3: R_386_32	.text
10000ee7:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000eed:	50                   	push   eax
10000eee:	e8 fc ff ff ff       	call   10000eef <backupTree(char*, unsigned short)+0x3a8>	10000eef: R_386_PC32	strcat
10000ef3:	83 c4 10             	add    esp,0x10
10000ef6:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000efa:	25 65 07 00 00       	and    eax,0x765
10000eff:	33 85 74 ed ff ff    	xor    eax,DWORD PTR [ebp-0x128c]
10000f05:	66 89 45 c6          	mov    WORD PTR [ebp-0x3a],ax
10000f09:	8d 85 88 fe ff ff    	lea    eax,[ebp-0x178]
10000f0f:	bb 29 a6 00 10       	mov    ebx,0x1000a629	10000f10: R_386_32	.text
10000f14:	ba 11 00 00 00       	mov    edx,0x11
10000f19:	89 c7                	mov    edi,eax
10000f1b:	89 de                	mov    esi,ebx
10000f1d:	89 d1                	mov    ecx,edx
10000f1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000f21:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f25:	83 e0 0f             	and    eax,0xf
10000f28:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f2f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f35:	83 ec 08             	sub    esp,0x8
10000f38:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f3e:	50                   	push   eax
10000f3f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f45:	50                   	push   eax
10000f46:	e8 fc ff ff ff       	call   10000f47 <backupTree(char*, unsigned short)+0x400>	10000f47: R_386_PC32	strcat
10000f4b:	83 c4 10             	add    esp,0x10
10000f4e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f52:	c1 f8 04             	sar    eax,0x4
10000f55:	83 e0 0f             	and    eax,0xf
10000f58:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f5f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f65:	83 ec 08             	sub    esp,0x8
10000f68:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f6e:	50                   	push   eax
10000f6f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f75:	50                   	push   eax
10000f76:	e8 fc ff ff ff       	call   10000f77 <backupTree(char*, unsigned short)+0x430>	10000f77: R_386_PC32	strcat
10000f7b:	83 c4 10             	add    esp,0x10
10000f7e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f82:	c1 f8 08             	sar    eax,0x8
10000f85:	83 e0 0f             	and    eax,0xf
10000f88:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f8f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f95:	83 ec 08             	sub    esp,0x8
10000f98:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f9e:	50                   	push   eax
10000f9f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fa5:	50                   	push   eax
10000fa6:	e8 fc ff ff ff       	call   10000fa7 <backupTree(char*, unsigned short)+0x460>	10000fa7: R_386_PC32	strcat
10000fab:	83 c4 10             	add    esp,0x10
10000fae:	66 8b 45 c6          	mov    ax,WORD PTR [ebp-0x3a]
10000fb2:	66 c1 e8 0c          	shr    ax,0xc
10000fb6:	0f b7 c0             	movzx  eax,ax
10000fb9:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000fc0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000fc6:	83 ec 08             	sub    esp,0x8
10000fc9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000fcf:	50                   	push   eax
10000fd0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fd6:	50                   	push   eax
10000fd7:	e8 fc ff ff ff       	call   10000fd8 <backupTree(char*, unsigned short)+0x491>	10000fd8: R_386_PC32	strcat
10000fdc:	83 c4 10             	add    esp,0x10
10000fdf:	83 ec 0c             	sub    esp,0xc
10000fe2:	68 14 01 00 00       	push   0x114
10000fe7:	e8 fc ff ff ff       	call   10000fe8 <backupTree(char*, unsigned short)+0x4a1>	10000fe8: R_386_PC32	operator new(unsigned long)
10000fec:	83 c4 10             	add    esp,0x10
10000fef:	89 c3                	mov    ebx,eax
10000ff1:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ff6:	8b 00                	mov    eax,DWORD PTR [eax]
10000ff8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000ffb:	83 ec 04             	sub    esp,0x4
10000ffe:	50                   	push   eax
10000fff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001002:	53                   	push   ebx
10001003:	e8 fc ff ff ff       	call   10001004 <backupTree(char*, unsigned short)+0x4bd>	10001004: R_386_PC32	File::File(char const*, Process*)
10001008:	83 c4 10             	add    esp,0x10
1000100b:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
1000100e:	83 ec 08             	sub    esp,0x8
10001011:	6a 01                	push   0x1
10001013:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001016:	e8 fc ff ff ff       	call   10001017 <backupTree(char*, unsigned short)+0x4d0>	10001017: R_386_PC32	File::open(FileOpenMode)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001022:	75 15                	jne    10001039 <backupTree(char*, unsigned short)+0x4f2>
10001024:	83 ec 0c             	sub    esp,0xc
10001027:	68 f0 a5 00 10       	push   0x1000a5f0	10001028: R_386_32	.text
1000102c:	e8 fc ff ff ff       	call   1000102d <backupTree(char*, unsigned short)+0x4e6>	1000102d: R_386_PC32	KePanic(char const*)
10001031:	83 c4 10             	add    esp,0x10
10001034:	e9 3e 01 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
10001039:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
1000103d:	0f 84 c5 fb ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001043:	83 ec 0c             	sub    esp,0xc
10001046:	68 14 01 00 00       	push   0x114
1000104b:	e8 fc ff ff ff       	call   1000104c <backupTree(char*, unsigned short)+0x505>	1000104c: R_386_PC32	operator new(unsigned long)
10001050:	83 c4 10             	add    esp,0x10
10001053:	89 c3                	mov    ebx,eax
10001055:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000105a:	8b 00                	mov    eax,DWORD PTR [eax]
1000105c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000105f:	83 ec 04             	sub    esp,0x4
10001062:	50                   	push   eax
10001063:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10001069:	50                   	push   eax
1000106a:	53                   	push   ebx
1000106b:	e8 fc ff ff ff       	call   1000106c <backupTree(char*, unsigned short)+0x525>	1000106c: R_386_PC32	File::File(char const*, Process*)
10001070:	83 c4 10             	add    esp,0x10
10001073:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10001076:	83 ec 08             	sub    esp,0x8
10001079:	6a 12                	push   0x12
1000107b:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000107e:	e8 fc ff ff ff       	call   1000107f <backupTree(char*, unsigned short)+0x538>	1000107f: R_386_PC32	File::open(FileOpenMode)
10001083:	83 c4 10             	add    esp,0x10
10001086:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000108a:	75 23                	jne    100010af <backupTree(char*, unsigned short)+0x568>
1000108c:	83 ec 0c             	sub    esp,0xc
1000108f:	68 f0 a5 00 10       	push   0x1000a5f0	10001090: R_386_32	.text
10001094:	e8 fc ff ff ff       	call   10001095 <backupTree(char*, unsigned short)+0x54e>	10001095: R_386_PC32	KePanic(char const*)
10001099:	83 c4 10             	add    esp,0x10
1000109c:	83 ec 0c             	sub    esp,0xc
1000109f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
100010a2:	e8 fc ff ff ff       	call   100010a3 <backupTree(char*, unsigned short)+0x55c>	100010a3: R_386_PC32	File::close()
100010a7:	83 c4 10             	add    esp,0x10
100010aa:	e9 c8 00 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
100010af:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100010b2:	8b 00                	mov    eax,DWORD PTR [eax]
100010b4:	83 c0 0c             	add    eax,0xc
100010b7:	8b 00                	mov    eax,DWORD PTR [eax]
100010b9:	83 ec 0c             	sub    esp,0xc
100010bc:	8d 95 84 fe ff ff    	lea    edx,[ebp-0x17c]
100010c2:	52                   	push   edx
100010c3:	8d 95 80 ee ff ff    	lea    edx,[ebp-0x1180]
100010c9:	52                   	push   edx
100010ca:	6a 00                	push   0x0
100010cc:	68 00 10 00 00       	push   0x1000
100010d1:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100010d4:	ff d0                	call   eax
100010d6:	83 c4 20             	add    esp,0x20
100010d9:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100010dc:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100010e0:	75 3b                	jne    1000111d <backupTree(char*, unsigned short)+0x5d6>
100010e2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100010e5:	8b 00                	mov    eax,DWORD PTR [eax]
100010e7:	83 c0 10             	add    eax,0x10
100010ea:	8b 08                	mov    ecx,DWORD PTR [eax]
100010ec:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
100010f2:	99                   	cdq    
100010f3:	83 ec 0c             	sub    esp,0xc
100010f6:	8d 9d 80 fe ff ff    	lea    ebx,[ebp-0x180]
100010fc:	53                   	push   ebx
100010fd:	8d 9d 80 ee ff ff    	lea    ebx,[ebp-0x1180]
10001103:	53                   	push   ebx
10001104:	52                   	push   edx
10001105:	50                   	push   eax
10001106:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001109:	ff d1                	call   ecx
1000110b:	83 c4 20             	add    esp,0x20
1000110e:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
10001114:	3d 00 10 00 00       	cmp    eax,0x1000
10001119:	75 05                	jne    10001120 <backupTree(char*, unsigned short)+0x5d9>
1000111b:	eb 92                	jmp    100010af <backupTree(char*, unsigned short)+0x568>
1000111d:	90                   	nop
1000111e:	eb 01                	jmp    10001121 <backupTree(char*, unsigned short)+0x5da>
10001120:	90                   	nop
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001127:	e8 fc ff ff ff       	call   10001128 <backupTree(char*, unsigned short)+0x5e1>	10001128: R_386_PC32	File::close()
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	83 ec 0c             	sub    esp,0xc
10001132:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001135:	e8 fc ff ff ff       	call   10001136 <backupTree(char*, unsigned short)+0x5ef>	10001136: R_386_PC32	File::close()
1000113a:	83 c4 10             	add    esp,0x10
1000113d:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001141:	74 15                	je     10001158 <backupTree(char*, unsigned short)+0x611>
10001143:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001146:	8b 00                	mov    eax,DWORD PTR [eax]
10001148:	83 c0 08             	add    eax,0x8
1000114b:	8b 00                	mov    eax,DWORD PTR [eax]
1000114d:	83 ec 0c             	sub    esp,0xc
10001150:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001153:	ff d0                	call   eax
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000115c:	0f 84 a6 fa ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001162:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10001165:	8b 00                	mov    eax,DWORD PTR [eax]
10001167:	83 c0 08             	add    eax,0x8
1000116a:	8b 00                	mov    eax,DWORD PTR [eax]
1000116c:	83 ec 0c             	sub    esp,0xc
1000116f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001172:	ff d0                	call   eax
10001174:	83 c4 10             	add    esp,0x10
10001177:	e9 8c fa ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
1000117c:	90                   	nop
1000117d:	83 ec 0c             	sub    esp,0xc
10001180:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001183:	e8 fc ff ff ff       	call   10001184 <backupTree(char*, unsigned short)+0x63d>	10001184: R_386_PC32	free
10001188:	83 c4 10             	add    esp,0x10
1000118b:	83 ec 0c             	sub    esp,0xc
1000118e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001191:	e8 fc ff ff ff       	call   10001192 <backupTree(char*, unsigned short)+0x64b>	10001192: R_386_PC32	Directory::close()
10001196:	83 c4 10             	add    esp,0x10
10001199:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
1000119d:	74 18                	je     100011b7 <backupTree(char*, unsigned short)+0x670>
1000119f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100011a2:	8b 00                	mov    eax,DWORD PTR [eax]
100011a4:	83 c0 08             	add    eax,0x8
100011a7:	8b 00                	mov    eax,DWORD PTR [eax]
100011a9:	83 ec 0c             	sub    esp,0xc
100011ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011af:	ff d0                	call   eax
100011b1:	83 c4 10             	add    esp,0x10
100011b4:	eb 01                	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
100011b6:	90                   	nop
100011b7:	8d 65 f4             	lea    esp,[ebp-0xc]
100011ba:	5b                   	pop    ebx
100011bb:	5e                   	pop    esi
100011bc:	5f                   	pop    edi
100011bd:	5d                   	pop    ebp
100011be:	c3                   	ret    

100011bf <createUser(char const*)>:
100011bf:	55                   	push   ebp
100011c0:	89 e5                	mov    ebp,esp
100011c2:	81 ec 08 01 00 00    	sub    esp,0x108
100011c8:	68 3a a6 00 10       	push   0x1000a63a	100011c9: R_386_32	.text
100011cd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011d3:	50                   	push   eax
100011d4:	e8 fc ff ff ff       	call   100011d5 <createUser(char const*)+0x16>	100011d5: R_386_PC32	strcpy
100011d9:	83 c4 08             	add    esp,0x8
100011dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011df:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011e5:	50                   	push   eax
100011e6:	e8 fc ff ff ff       	call   100011e7 <createUser(char const*)+0x28>	100011e7: R_386_PC32	strcat
100011eb:	83 c4 08             	add    esp,0x8
100011ee:	83 ec 08             	sub    esp,0x8
100011f1:	68 c0 01 00 00       	push   0x1c0
100011f6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011fc:	50                   	push   eax
100011fd:	e8 fc ff ff ff       	call   100011fe <createUser(char const*)+0x3f>	100011fe: R_386_PC32	mkdir(char const*, int)
10001202:	83 c4 10             	add    esp,0x10
10001205:	83 ec 08             	sub    esp,0x8
10001208:	68 44 a6 00 10       	push   0x1000a644	10001209: R_386_32	.text
1000120d:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001213:	50                   	push   eax
10001214:	e8 fc ff ff ff       	call   10001215 <createUser(char const*)+0x56>	10001215: R_386_PC32	strcat
10001219:	83 c4 10             	add    esp,0x10
1000121c:	83 ec 08             	sub    esp,0x8
1000121f:	68 c0 01 00 00       	push   0x1c0
10001224:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000122a:	50                   	push   eax
1000122b:	e8 fc ff ff ff       	call   1000122c <createUser(char const*)+0x6d>	1000122c: R_386_PC32	mkdir(char const*, int)
10001230:	83 c4 10             	add    esp,0x10
10001233:	83 ec 08             	sub    esp,0x8
10001236:	68 3a a6 00 10       	push   0x1000a63a	10001237: R_386_32	.text
1000123b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001241:	50                   	push   eax
10001242:	e8 fc ff ff ff       	call   10001243 <createUser(char const*)+0x84>	10001243: R_386_PC32	strcpy
10001247:	83 c4 10             	add    esp,0x10
1000124a:	83 ec 08             	sub    esp,0x8
1000124d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001250:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001256:	50                   	push   eax
10001257:	e8 fc ff ff ff       	call   10001258 <createUser(char const*)+0x99>	10001258: R_386_PC32	strcat
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	83 ec 08             	sub    esp,0x8
10001262:	68 4d a6 00 10       	push   0x1000a64d	10001263: R_386_32	.text
10001267:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000126d:	50                   	push   eax
1000126e:	e8 fc ff ff ff       	call   1000126f <createUser(char const*)+0xb0>	1000126f: R_386_PC32	strcat
10001273:	83 c4 10             	add    esp,0x10
10001276:	83 ec 08             	sub    esp,0x8
10001279:	68 c0 01 00 00       	push   0x1c0
1000127e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001284:	50                   	push   eax
10001285:	e8 fc ff ff ff       	call   10001286 <createUser(char const*)+0xc7>	10001286: R_386_PC32	mkdir(char const*, int)
1000128a:	83 c4 10             	add    esp,0x10
1000128d:	83 ec 08             	sub    esp,0x8
10001290:	68 3a a6 00 10       	push   0x1000a63a	10001291: R_386_32	.text
10001295:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000129b:	50                   	push   eax
1000129c:	e8 fc ff ff ff       	call   1000129d <createUser(char const*)+0xde>	1000129d: R_386_PC32	strcpy
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	83 ec 08             	sub    esp,0x8
100012a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012aa:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012b0:	50                   	push   eax
100012b1:	e8 fc ff ff ff       	call   100012b2 <createUser(char const*)+0xf3>	100012b2: R_386_PC32	strcat
100012b6:	83 c4 10             	add    esp,0x10
100012b9:	83 ec 08             	sub    esp,0x8
100012bc:	68 58 a6 00 10       	push   0x1000a658	100012bd: R_386_32	.text
100012c1:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012c7:	50                   	push   eax
100012c8:	e8 fc ff ff ff       	call   100012c9 <createUser(char const*)+0x10a>	100012c9: R_386_PC32	strcat
100012cd:	83 c4 10             	add    esp,0x10
100012d0:	83 ec 08             	sub    esp,0x8
100012d3:	68 c0 01 00 00       	push   0x1c0
100012d8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <createUser(char const*)+0x121>	100012e0: R_386_PC32	mkdir(char const*, int)
100012e4:	83 c4 10             	add    esp,0x10
100012e7:	83 ec 08             	sub    esp,0x8
100012ea:	68 3a a6 00 10       	push   0x1000a63a	100012eb: R_386_32	.text
100012ef:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012f5:	50                   	push   eax
100012f6:	e8 fc ff ff ff       	call   100012f7 <createUser(char const*)+0x138>	100012f7: R_386_PC32	strcpy
100012fb:	83 c4 10             	add    esp,0x10
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001304:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000130a:	50                   	push   eax
1000130b:	e8 fc ff ff ff       	call   1000130c <createUser(char const*)+0x14d>	1000130c: R_386_PC32	strcat
10001310:	83 c4 10             	add    esp,0x10
10001313:	83 ec 08             	sub    esp,0x8
10001316:	68 63 a6 00 10       	push   0x1000a663	10001317: R_386_32	.text
1000131b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001321:	50                   	push   eax
10001322:	e8 fc ff ff ff       	call   10001323 <createUser(char const*)+0x164>	10001323: R_386_PC32	strcat
10001327:	83 c4 10             	add    esp,0x10
1000132a:	83 ec 08             	sub    esp,0x8
1000132d:	68 c0 01 00 00       	push   0x1c0
10001332:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001338:	50                   	push   eax
10001339:	e8 fc ff ff ff       	call   1000133a <createUser(char const*)+0x17b>	1000133a: R_386_PC32	mkdir(char const*, int)
1000133e:	83 c4 10             	add    esp,0x10
10001341:	83 ec 08             	sub    esp,0x8
10001344:	68 3a a6 00 10       	push   0x1000a63a	10001345: R_386_32	.text
10001349:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000134f:	50                   	push   eax
10001350:	e8 fc ff ff ff       	call   10001351 <createUser(char const*)+0x192>	10001351: R_386_PC32	strcpy
10001355:	83 c4 10             	add    esp,0x10
10001358:	83 ec 08             	sub    esp,0x8
1000135b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000135e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001364:	50                   	push   eax
10001365:	e8 fc ff ff ff       	call   10001366 <createUser(char const*)+0x1a7>	10001366: R_386_PC32	strcat
1000136a:	83 c4 10             	add    esp,0x10
1000136d:	83 ec 08             	sub    esp,0x8
10001370:	68 6d a6 00 10       	push   0x1000a66d	10001371: R_386_32	.text
10001375:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000137b:	50                   	push   eax
1000137c:	e8 fc ff ff ff       	call   1000137d <createUser(char const*)+0x1be>	1000137d: R_386_PC32	strcat
10001381:	83 c4 10             	add    esp,0x10
10001384:	83 ec 08             	sub    esp,0x8
10001387:	68 c0 01 00 00       	push   0x1c0
1000138c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001392:	50                   	push   eax
10001393:	e8 fc ff ff ff       	call   10001394 <createUser(char const*)+0x1d5>	10001394: R_386_PC32	mkdir(char const*, int)
10001398:	83 c4 10             	add    esp,0x10
1000139b:	83 ec 08             	sub    esp,0x8
1000139e:	68 3a a6 00 10       	push   0x1000a63a	1000139f: R_386_32	.text
100013a3:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013a9:	50                   	push   eax
100013aa:	e8 fc ff ff ff       	call   100013ab <createUser(char const*)+0x1ec>	100013ab: R_386_PC32	strcpy
100013af:	83 c4 10             	add    esp,0x10
100013b2:	83 ec 08             	sub    esp,0x8
100013b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013b8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013be:	50                   	push   eax
100013bf:	e8 fc ff ff ff       	call   100013c0 <createUser(char const*)+0x201>	100013c0: R_386_PC32	strcat
100013c4:	83 c4 10             	add    esp,0x10
100013c7:	83 ec 08             	sub    esp,0x8
100013ca:	68 78 a6 00 10       	push   0x1000a678	100013cb: R_386_32	.text
100013cf:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013d5:	50                   	push   eax
100013d6:	e8 fc ff ff ff       	call   100013d7 <createUser(char const*)+0x218>	100013d7: R_386_PC32	strcat
100013db:	83 c4 10             	add    esp,0x10
100013de:	83 ec 08             	sub    esp,0x8
100013e1:	68 c0 01 00 00       	push   0x1c0
100013e6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013ec:	50                   	push   eax
100013ed:	e8 fc ff ff ff       	call   100013ee <createUser(char const*)+0x22f>	100013ee: R_386_PC32	mkdir(char const*, int)
100013f2:	83 c4 10             	add    esp,0x10
100013f5:	83 ec 08             	sub    esp,0x8
100013f8:	68 3a a6 00 10       	push   0x1000a63a	100013f9: R_386_32	.text
100013fd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001403:	50                   	push   eax
10001404:	e8 fc ff ff ff       	call   10001405 <createUser(char const*)+0x246>	10001405: R_386_PC32	strcpy
10001409:	83 c4 10             	add    esp,0x10
1000140c:	83 ec 08             	sub    esp,0x8
1000140f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001412:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001418:	50                   	push   eax
10001419:	e8 fc ff ff ff       	call   1000141a <createUser(char const*)+0x25b>	1000141a: R_386_PC32	strcat
1000141e:	83 c4 10             	add    esp,0x10
10001421:	83 ec 08             	sub    esp,0x8
10001424:	68 7f a6 00 10       	push   0x1000a67f	10001425: R_386_32	.text
10001429:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000142f:	50                   	push   eax
10001430:	e8 fc ff ff ff       	call   10001431 <createUser(char const*)+0x272>	10001431: R_386_PC32	strcat
10001435:	83 c4 10             	add    esp,0x10
10001438:	83 ec 08             	sub    esp,0x8
1000143b:	68 c0 01 00 00       	push   0x1c0
10001440:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001446:	50                   	push   eax
10001447:	e8 fc ff ff ff       	call   10001448 <createUser(char const*)+0x289>	10001448: R_386_PC32	mkdir(char const*, int)
1000144c:	83 c4 10             	add    esp,0x10
1000144f:	83 ec 08             	sub    esp,0x8
10001452:	68 87 a6 00 10       	push   0x1000a687	10001453: R_386_32	.text
10001457:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000145d:	50                   	push   eax
1000145e:	e8 fc ff ff ff       	call   1000145f <createUser(char const*)+0x2a0>	1000145f: R_386_PC32	strcpy
10001463:	83 c4 10             	add    esp,0x10
10001466:	83 ec 08             	sub    esp,0x8
10001469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000146c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001472:	50                   	push   eax
10001473:	e8 fc ff ff ff       	call   10001474 <createUser(char const*)+0x2b5>	10001474: R_386_PC32	strcat
10001478:	83 c4 10             	add    esp,0x10
1000147b:	83 ec 08             	sub    esp,0x8
1000147e:	68 c0 01 00 00       	push   0x1c0
10001483:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001489:	50                   	push   eax
1000148a:	e8 fc ff ff ff       	call   1000148b <createUser(char const*)+0x2cc>	1000148b: R_386_PC32	mkdir(char const*, int)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	83 ec 08             	sub    esp,0x8
10001495:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000149b:	50                   	push   eax
1000149c:	68 a0 a6 00 10       	push   0x1000a6a0	1000149d: R_386_32	.text
100014a1:	e8 fc ff ff ff       	call   100014a2 <createUser(char const*)+0x2e3>	100014a2: R_386_PC32	copytree(char*, char*)
100014a6:	83 c4 10             	add    esp,0x10
100014a9:	90                   	nop
100014aa:	c9                   	leave  
100014ab:	c3                   	ret    

100014ac <drawBootScreen()>:
100014ac:	55                   	push   ebp
100014ad:	89 e5                	mov    ebp,esp
100014af:	83 ec 18             	sub    esp,0x18
100014b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100014b3: R_386_32	term
100014b7:	83 ec 08             	sub    esp,0x8
100014ba:	6a 0b                	push   0xb
100014bc:	50                   	push   eax
100014bd:	e8 fc ff ff ff       	call   100014be <drawBootScreen()+0x12>	100014be: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
100014c2:	83 c4 10             	add    esp,0x10
100014c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100014c6: R_386_32	term
100014ca:	83 ec 08             	sub    esp,0x8
100014cd:	6a 00                	push   0x0
100014cf:	50                   	push   eax
100014d0:	e8 fc ff ff ff       	call   100014d1 <drawBootScreen()+0x25>	100014d1: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
100014d5:	83 c4 10             	add    esp,0x10
100014d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100014d9: R_386_32	term
100014dd:	83 ec 0c             	sub    esp,0xc
100014e0:	50                   	push   eax
100014e1:	e8 fc ff ff ff       	call   100014e2 <drawBootScreen()+0x36>	100014e2: R_386_PC32	VgaText::clearScreen()
100014e6:	83 c4 10             	add    esp,0x10
100014e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ea: R_386_32	term
100014ee:	83 ec 08             	sub    esp,0x8
100014f1:	68 bf a6 00 10       	push   0x1000a6bf	100014f2: R_386_32	.text
100014f6:	50                   	push   eax
100014f7:	e8 fc ff ff ff       	call   100014f8 <drawBootScreen()+0x4c>	100014f8: R_386_PC32	VgaText::setTitle(char*)
100014fc:	83 c4 10             	add    esp,0x10
100014ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10001500: R_386_32	term
10001504:	83 ec 08             	sub    esp,0x8
10001507:	6a 00                	push   0x0
10001509:	50                   	push   eax
1000150a:	e8 fc ff ff ff       	call   1000150b <drawBootScreen()+0x5f>	1000150b: R_386_PC32	VgaText::setTitleColour(VgaColour)
1000150f:	83 c4 10             	add    esp,0x10
10001512:	a1 00 00 00 00       	mov    eax,ds:0x0	10001513: R_386_32	term
10001517:	83 ec 08             	sub    esp,0x8
1000151a:	6a 00                	push   0x0
1000151c:	50                   	push   eax
1000151d:	e8 fc ff ff ff       	call   1000151e <drawBootScreen()+0x72>	1000151e: R_386_PC32	VgaText::setTitleTextColour(VgaColour)
10001522:	83 c4 10             	add    esp,0x10
10001525:	a1 00 00 00 00       	mov    eax,ds:0x0	10001526: R_386_32	term
1000152a:	83 ec 04             	sub    esp,0x4
1000152d:	6a 00                	push   0x0
1000152f:	6a 00                	push   0x0
10001531:	50                   	push   eax
10001532:	e8 fc ff ff ff       	call   10001533 <drawBootScreen()+0x87>	10001533: R_386_PC32	VgaText::setCursor(int, int)
10001537:	83 c4 10             	add    esp,0x10
1000153a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001541:	83 7d f4 4f          	cmp    DWORD PTR [ebp-0xc],0x4f
10001545:	7f 19                	jg     10001560 <drawBootScreen()+0xb4>
10001547:	a1 00 00 00 00       	mov    eax,ds:0x0	10001548: R_386_32	term
1000154c:	6a 00                	push   0x0
1000154e:	6a 00                	push   0x0
10001550:	6a 20                	push   0x20
10001552:	50                   	push   eax
10001553:	e8 fc ff ff ff       	call   10001554 <drawBootScreen()+0xa8>	10001554: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001558:	83 c4 10             	add    esp,0x10
1000155b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000155e:	eb e1                	jmp    10001541 <drawBootScreen()+0x95>
10001560:	a0 00 00 00 00       	mov    al,ds:0x0	10001561: R_386_32	showSidebar
10001565:	84 c0                	test   al,al
10001567:	0f 84 91 00 00 00    	je     100015fe <drawBootScreen()+0x152>
1000156d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10001574:	83 7d f0 18          	cmp    DWORD PTR [ebp-0x10],0x18
10001578:	7f 41                	jg     100015bb <drawBootScreen()+0x10f>
1000157a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000157b: R_386_32	term
1000157f:	83 ec 04             	sub    esp,0x4
10001582:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001585:	6a 00                	push   0x0
10001587:	50                   	push   eax
10001588:	e8 fc ff ff ff       	call   10001589 <drawBootScreen()+0xdd>	10001589: R_386_PC32	VgaText::setCursor(int, int)
1000158d:	83 c4 10             	add    esp,0x10
10001590:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001597:	83 7d ec 0f          	cmp    DWORD PTR [ebp-0x14],0xf
1000159b:	7f 19                	jg     100015b6 <drawBootScreen()+0x10a>
1000159d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000159e: R_386_32	term
100015a2:	6a 00                	push   0x0
100015a4:	6a 00                	push   0x0
100015a6:	6a 20                	push   0x20
100015a8:	50                   	push   eax
100015a9:	e8 fc ff ff ff       	call   100015aa <drawBootScreen()+0xfe>	100015aa: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100015ae:	83 c4 10             	add    esp,0x10
100015b1:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100015b4:	eb e1                	jmp    10001597 <drawBootScreen()+0xeb>
100015b6:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100015b9:	eb b9                	jmp    10001574 <drawBootScreen()+0xc8>
100015bb:	a1 00 00 00 00       	mov    eax,ds:0x0	100015bc: R_386_32	term
100015c0:	83 ec 04             	sub    esp,0x4
100015c3:	6a 01                	push   0x1
100015c5:	6a 01                	push   0x1
100015c7:	50                   	push   eax
100015c8:	e8 fc ff ff ff       	call   100015c9 <drawBootScreen()+0x11d>	100015c9: R_386_PC32	VgaText::setCursor(int, int)
100015cd:	83 c4 10             	add    esp,0x10
100015d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100015d1: R_386_32	term
100015d5:	6a 00                	push   0x0
100015d7:	6a 0f                	push   0xf
100015d9:	68 c0 a6 00 10       	push   0x1000a6c0	100015da: R_386_32	.text
100015de:	50                   	push   eax
100015df:	e8 fc ff ff ff       	call   100015e0 <drawBootScreen()+0x134>	100015e0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015e4:	83 c4 10             	add    esp,0x10
100015e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100015e8: R_386_32	term
100015ec:	6a 00                	push   0x0
100015ee:	6a 0e                	push   0xe
100015f0:	68 43 a7 00 10       	push   0x1000a743	100015f1: R_386_32	.text
100015f5:	50                   	push   eax
100015f6:	e8 fc ff ff ff       	call   100015f7 <drawBootScreen()+0x14b>	100015f7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015fb:	83 c4 10             	add    esp,0x10
100015fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100015ff: R_386_32	term
10001603:	83 ec 08             	sub    esp,0x8
10001606:	6a 0f                	push   0xf
10001608:	50                   	push   eax
10001609:	e8 fc ff ff ff       	call   1000160a <drawBootScreen()+0x15e>	1000160a: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
1000160e:	83 c4 10             	add    esp,0x10
10001611:	a1 00 00 00 00       	mov    eax,ds:0x0	10001612: R_386_32	term
10001616:	83 ec 08             	sub    esp,0x8
10001619:	6a 00                	push   0x0
1000161b:	50                   	push   eax
1000161c:	e8 fc ff ff ff       	call   1000161d <drawBootScreen()+0x171>	1000161d: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
10001621:	83 c4 10             	add    esp,0x10
10001624:	90                   	nop
10001625:	c9                   	leave  
10001626:	c3                   	ret    

10001627 <drawBasicWindowX(int, int, int, int, char const*, bool)>:
10001627:	55                   	push   ebp
10001628:	89 e5                	mov    ebp,esp
1000162a:	53                   	push   ebx
1000162b:	83 ec 34             	sub    esp,0x34
1000162e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001631:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
10001634:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10001637:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000163e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001641:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
10001644:	7d 6c                	jge    100016b2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x8b>
10001646:	a1 00 00 00 00       	mov    eax,ds:0x0	10001647: R_386_32	term
1000164b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000164e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001651:	01 ca                	add    edx,ecx
10001653:	83 ec 04             	sub    esp,0x4
10001656:	52                   	push   edx
10001657:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000165a:	50                   	push   eax
1000165b:	e8 fc ff ff ff       	call   1000165c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x35>	1000165c: R_386_PC32	VgaText::setCursor(int, int)
10001660:	83 c4 10             	add    esp,0x10
10001663:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000166a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000166d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001670:	7d 3b                	jge    100016ad <drawBasicWindowX(int, int, int, int, char const*, bool)+0x86>
10001672:	a1 00 00 00 00       	mov    eax,ds:0x0	10001673: R_386_32	term
10001677:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000167b:	74 07                	je     10001684 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x5d>
1000167d:	b9 07 00 00 00       	mov    ecx,0x7
10001682:	eb 05                	jmp    10001689 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x62>
10001684:	b9 0f 00 00 00       	mov    ecx,0xf
10001689:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000168d:	74 07                	je     10001696 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x6f>
1000168f:	ba 07 00 00 00       	mov    edx,0x7
10001694:	eb 05                	jmp    1000169b <drawBasicWindowX(int, int, int, int, char const*, bool)+0x74>
10001696:	ba 0f 00 00 00       	mov    edx,0xf
1000169b:	51                   	push   ecx
1000169c:	52                   	push   edx
1000169d:	6a 20                	push   0x20
1000169f:	50                   	push   eax
100016a0:	e8 fc ff ff ff       	call   100016a1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x7a>	100016a1: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016a5:	83 c4 10             	add    esp,0x10
100016a8:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100016ab:	eb bd                	jmp    1000166a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x43>
100016ad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100016b0:	eb 8c                	jmp    1000163e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17>
100016b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100016b3: R_386_32	term
100016b7:	83 ec 04             	sub    esp,0x4
100016ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100016bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016c0:	50                   	push   eax
100016c1:	e8 fc ff ff ff       	call   100016c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x9b>	100016c2: R_386_PC32	VgaText::setCursor(int, int)
100016c6:	83 c4 10             	add    esp,0x10
100016c9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100016d0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100016d3:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100016d6:	7d 19                	jge    100016f1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xca>
100016d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100016d9: R_386_32	term
100016dd:	6a 01                	push   0x1
100016df:	6a 01                	push   0x1
100016e1:	6a 20                	push   0x20
100016e3:	50                   	push   eax
100016e4:	e8 fc ff ff ff       	call   100016e5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xbe>	100016e5: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016e9:	83 c4 10             	add    esp,0x10
100016ec:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100016ef:	eb df                	jmp    100016d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xa9>
100016f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100016f2: R_386_32	term
100016f6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100016f9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100016fc:	01 d1                	add    ecx,edx
100016fe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001701:	42                   	inc    edx
10001702:	83 ec 04             	sub    esp,0x4
10001705:	51                   	push   ecx
10001706:	52                   	push   edx
10001707:	50                   	push   eax
10001708:	e8 fc ff ff ff       	call   10001709 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe2>	10001709: R_386_PC32	VgaText::setCursor(int, int)
1000170d:	83 c4 10             	add    esp,0x10
10001710:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10001717:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000171a:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
1000171d:	7d 19                	jge    10001738 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x111>
1000171f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001720: R_386_32	term
10001724:	6a 03                	push   0x3
10001726:	6a 03                	push   0x3
10001728:	6a 20                	push   0x20
1000172a:	50                   	push   eax
1000172b:	e8 fc ff ff ff       	call   1000172c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x105>	1000172c: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001730:	83 c4 10             	add    esp,0x10
10001733:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10001736:	eb df                	jmp    10001717 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xf0>
10001738:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000173b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000173e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001741:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001744:	01 d0                	add    eax,edx
10001746:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001749:	0f 8d 89 00 00 00    	jge    100017d8 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b1>
1000174f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001750: R_386_32	term
10001754:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001757:	8d 4a 01             	lea    ecx,[edx+0x1]
1000175a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
1000175d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001760:	01 da                	add    edx,ebx
10001762:	83 ec 04             	sub    esp,0x4
10001765:	51                   	push   ecx
10001766:	52                   	push   edx
10001767:	50                   	push   eax
10001768:	e8 fc ff ff ff       	call   10001769 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x142>	10001769: R_386_PC32	VgaText::setCursor(int, int)
1000176d:	83 c4 10             	add    esp,0x10
10001770:	a1 00 00 00 00       	mov    eax,ds:0x0	10001771: R_386_32	term
10001775:	6a 03                	push   0x3
10001777:	6a 03                	push   0x3
10001779:	6a 20                	push   0x20
1000177b:	50                   	push   eax
1000177c:	e8 fc ff ff ff       	call   1000177d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x156>	1000177d: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001781:	83 c4 10             	add    esp,0x10
10001784:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001787:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000178a:	01 d0                	add    eax,edx
1000178c:	48                   	dec    eax
1000178d:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001790:	74 3e                	je     100017d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a9>
10001792:	a1 00 00 00 00       	mov    eax,ds:0x0	10001793: R_386_32	term
10001797:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000179a:	42                   	inc    edx
1000179b:	83 ec 04             	sub    esp,0x4
1000179e:	52                   	push   edx
1000179f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100017a2:	50                   	push   eax
100017a3:	e8 fc ff ff ff       	call   100017a4 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17d>	100017a4: R_386_PC32	VgaText::setCursor(int, int)
100017a8:	83 c4 10             	add    esp,0x10
100017ab:	a1 00 00 00 00       	mov    eax,ds:0x0	100017ac: R_386_32	term
100017b0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100017b4:	74 07                	je     100017bd <drawBasicWindowX(int, int, int, int, char const*, bool)+0x196>
100017b6:	ba 07 00 00 00       	mov    edx,0x7
100017bb:	eb 05                	jmp    100017c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x19b>
100017bd:	ba 0f 00 00 00       	mov    edx,0xf
100017c2:	52                   	push   edx
100017c3:	6a 00                	push   0x0
100017c5:	6a dd                	push   0xffffffdd
100017c7:	50                   	push   eax
100017c8:	e8 fc ff ff ff       	call   100017c9 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a2>	100017c9: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100017cd:	83 c4 10             	add    esp,0x10
100017d0:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100017d3:	e9 66 ff ff ff       	jmp    1000173e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x117>
100017d8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100017db:	83 ec 0c             	sub    esp,0xc
100017de:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100017e1:	e8 fc ff ff ff       	call   100017e2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1bb>	100017e2: R_386_PC32	strlen
100017e6:	83 c4 10             	add    esp,0x10
100017e9:	29 c3                	sub    ebx,eax
100017eb:	89 d8                	mov    eax,ebx
100017ed:	d1 e8                	shr    eax,1
100017ef:	48                   	dec    eax
100017f0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100017f3:	a1 00 00 00 00       	mov    eax,ds:0x0	100017f4: R_386_32	term
100017f8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100017fb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100017fe:	01 ca                	add    edx,ecx
10001800:	83 ec 04             	sub    esp,0x4
10001803:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001806:	52                   	push   edx
10001807:	50                   	push   eax
10001808:	e8 fc ff ff ff       	call   10001809 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1e2>	10001809: R_386_PC32	VgaText::setCursor(int, int)
1000180d:	83 c4 10             	add    esp,0x10
10001810:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10001817:	83 ec 0c             	sub    esp,0xc
1000181a:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000181d:	e8 fc ff ff ff       	call   1000181e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f7>	1000181e: R_386_PC32	strlen
10001822:	83 c4 10             	add    esp,0x10
10001825:	89 c2                	mov    edx,eax
10001827:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000182a:	39 c2                	cmp    edx,eax
1000182c:	76 25                	jbe    10001853 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x22c>
1000182e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000182f: R_386_32	term
10001833:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001836:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001839:	01 ca                	add    edx,ecx
1000183b:	8a 12                	mov    dl,BYTE PTR [edx]
1000183d:	0f be d2             	movsx  edx,dl
10001840:	6a 01                	push   0x1
10001842:	6a 0f                	push   0xf
10001844:	52                   	push   edx
10001845:	50                   	push   eax
10001846:	e8 fc ff ff ff       	call   10001847 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x220>	10001847: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000184b:	83 c4 10             	add    esp,0x10
1000184e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10001851:	eb c4                	jmp    10001817 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f0>
10001853:	90                   	nop
10001854:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001857:	c9                   	leave  
10001858:	c3                   	ret    

10001859 <drawBasicWindow(int, int, int, int, char const*)>:
10001859:	55                   	push   ebp
1000185a:	89 e5                	mov    ebp,esp
1000185c:	83 ec 08             	sub    esp,0x8
1000185f:	83 ec 08             	sub    esp,0x8
10001862:	6a 00                	push   0x0
10001864:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001867:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000186a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000186d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001870:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001873:	e8 fc ff ff ff       	call   10001874 <drawBasicWindow(int, int, int, int, char const*)+0x1b>	10001874: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10001878:	83 c4 20             	add    esp,0x20
1000187b:	90                   	nop
1000187c:	c9                   	leave  
1000187d:	c3                   	ret    

1000187e <bootInstallKeybrd(KeyboardToken, bool*)>:
1000187e:	55                   	push   ebp
1000187f:	89 e5                	mov    ebp,esp
10001881:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001884:	05 04 01 00 00       	add    eax,0x104
10001889:	8a 00                	mov    al,BYTE PTR [eax]
1000188b:	84 c0                	test   al,al
1000188d:	74 15                	je     100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
1000188f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001892:	66 83 f8 09          	cmp    ax,0x9
10001896:	75 0c                	jne    100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
10001898:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	1000189a: R_386_32	installKey
1000189f:	e9 94 00 00 00       	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018a4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
100018a7:	84 c0                	test   al,al
100018a9:	0f 85 88 00 00 00    	jne    10001937 <bootInstallKeybrd(KeyboardToken, bool*)+0xb9>
100018af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b2:	66 3d 0a 02          	cmp    ax,0x20a
100018b6:	75 09                	jne    100018c1 <bootInstallKeybrd(KeyboardToken, bool*)+0x43>
100018b8:	c6 05 00 00 00 00 1b 	mov    BYTE PTR ds:0x0,0x1b	100018ba: R_386_32	installKey
100018bf:	eb 77                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018c4:	66 3d 0d 02          	cmp    ax,0x20d
100018c8:	75 09                	jne    100018d3 <bootInstallKeybrd(KeyboardToken, bool*)+0x55>
100018ca:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	100018cc: R_386_32	installKey
100018d1:	eb 65                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018d6:	66 3d 0e 02          	cmp    ax,0x20e
100018da:	75 09                	jne    100018e5 <bootInstallKeybrd(KeyboardToken, bool*)+0x67>
100018dc:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	100018de: R_386_32	installKey
100018e3:	eb 53                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018e8:	66 3d 0b 02          	cmp    ax,0x20b
100018ec:	75 09                	jne    100018f7 <bootInstallKeybrd(KeyboardToken, bool*)+0x79>
100018ee:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100018f0: R_386_32	installKey
100018f5:	eb 41                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018fa:	66 3d 0c 02          	cmp    ax,0x20c
100018fe:	75 09                	jne    10001909 <bootInstallKeybrd(KeyboardToken, bool*)+0x8b>
10001900:	c6 05 00 00 00 00 02 	mov    BYTE PTR ds:0x0,0x2	10001902: R_386_32	installKey
10001907:	eb 2f                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000190c:	66 3d 05 02          	cmp    ax,0x205
10001910:	75 09                	jne    1000191b <bootInstallKeybrd(KeyboardToken, bool*)+0x9d>
10001912:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	10001914: R_386_32	installKey
10001919:	eb 1d                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000191b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000191e:	66 3d 05 02          	cmp    ax,0x205
10001922:	75 09                	jne    1000192d <bootInstallKeybrd(KeyboardToken, bool*)+0xaf>
10001924:	c6 05 00 00 00 00 7e 	mov    BYTE PTR ds:0x0,0x7e	10001926: R_386_32	installKey
1000192b:	eb 0b                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000192d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001930:	a2 00 00 00 00       	mov    ds:0x0,al	10001931: R_386_32	installKey
10001935:	eb 01                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001937:	90                   	nop
10001938:	5d                   	pop    ebp
10001939:	c3                   	ret    

1000193a <bootInstallTasks(int)>:
1000193a:	55                   	push   ebp
1000193b:	89 e5                	mov    ebp,esp
1000193d:	83 ec 08             	sub    esp,0x8
10001940:	a1 00 00 00 00       	mov    eax,ds:0x0	10001941: R_386_32	term
10001945:	83 ec 04             	sub    esp,0x4
10001948:	6a 08                	push   0x8
1000194a:	6a 18                	push   0x18
1000194c:	50                   	push   eax
1000194d:	e8 fc ff ff ff       	call   1000194e <bootInstallTasks(int)+0x14>	1000194e: R_386_PC32	VgaText::setCursor(int, int)
10001952:	83 c4 10             	add    esp,0x10
10001955:	a1 00 00 00 00       	mov    eax,ds:0x0	10001956: R_386_32	term
1000195a:	83 ec 08             	sub    esp,0x8
1000195d:	68 64 a7 00 10       	push   0x1000a764	1000195e: R_386_32	.text
10001962:	50                   	push   eax
10001963:	e8 fc ff ff ff       	call   10001964 <bootInstallTasks(int)+0x2a>	10001964: R_386_PC32	VgaText::puts(char const*)
10001968:	83 c4 10             	add    esp,0x10
1000196b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000196c: R_386_32	term
10001970:	83 ec 04             	sub    esp,0x4
10001973:	6a 0a                	push   0xa
10001975:	6a 1a                	push   0x1a
10001977:	50                   	push   eax
10001978:	e8 fc ff ff ff       	call   10001979 <bootInstallTasks(int)+0x3f>	10001979: R_386_PC32	VgaText::setCursor(int, int)
1000197d:	83 c4 10             	add    esp,0x10
10001980:	a1 00 00 00 00       	mov    eax,ds:0x0	10001981: R_386_32	term
10001985:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001989:	75 07                	jne    10001992 <bootInstallTasks(int)+0x58>
1000198b:	ba 8c a7 00 10       	mov    edx,0x1000a78c	1000198c: R_386_32	.text
10001990:	eb 05                	jmp    10001997 <bootInstallTasks(int)+0x5d>
10001992:	ba 8f a7 00 10       	mov    edx,0x1000a78f	10001993: R_386_32	.text
10001997:	83 ec 08             	sub    esp,0x8
1000199a:	52                   	push   edx
1000199b:	50                   	push   eax
1000199c:	e8 fc ff ff ff       	call   1000199d <bootInstallTasks(int)+0x63>	1000199d: R_386_PC32	VgaText::puts(char const*)
100019a1:	83 c4 10             	add    esp,0x10
100019a4:	a1 00 00 00 00       	mov    eax,ds:0x0	100019a5: R_386_32	term
100019a9:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
100019ad:	78 07                	js     100019b6 <bootInstallTasks(int)+0x7c>
100019af:	ba 00 00 00 00       	mov    edx,0x0
100019b4:	eb 05                	jmp    100019bb <bootInstallTasks(int)+0x81>
100019b6:	ba 07 00 00 00       	mov    edx,0x7
100019bb:	6a 0f                	push   0xf
100019bd:	52                   	push   edx
100019be:	68 92 a7 00 10       	push   0x1000a792	100019bf: R_386_32	.text
100019c3:	50                   	push   eax
100019c4:	e8 fc ff ff ff       	call   100019c5 <bootInstallTasks(int)+0x8b>	100019c5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100019c9:	83 c4 10             	add    esp,0x10
100019cc:	a1 00 00 00 00       	mov    eax,ds:0x0	100019cd: R_386_32	term
100019d1:	83 ec 04             	sub    esp,0x4
100019d4:	6a 0b                	push   0xb
100019d6:	6a 1a                	push   0x1a
100019d8:	50                   	push   eax
100019d9:	e8 fc ff ff ff       	call   100019da <bootInstallTasks(int)+0xa0>	100019da: R_386_PC32	VgaText::setCursor(int, int)
100019de:	83 c4 10             	add    esp,0x10
100019e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100019e2: R_386_32	term
100019e6:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
100019ea:	75 07                	jne    100019f3 <bootInstallTasks(int)+0xb9>
100019ec:	ba 8c a7 00 10       	mov    edx,0x1000a78c	100019ed: R_386_32	.text
100019f1:	eb 05                	jmp    100019f8 <bootInstallTasks(int)+0xbe>
100019f3:	ba 8f a7 00 10       	mov    edx,0x1000a78f	100019f4: R_386_32	.text
100019f8:	83 ec 08             	sub    esp,0x8
100019fb:	52                   	push   edx
100019fc:	50                   	push   eax
100019fd:	e8 fc ff ff ff       	call   100019fe <bootInstallTasks(int)+0xc4>	100019fe: R_386_PC32	VgaText::puts(char const*)
10001a02:	83 c4 10             	add    esp,0x10
10001a05:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a06: R_386_32	term
10001a0a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001a0e:	7e 07                	jle    10001a17 <bootInstallTasks(int)+0xdd>
10001a10:	ba 00 00 00 00       	mov    edx,0x0
10001a15:	eb 05                	jmp    10001a1c <bootInstallTasks(int)+0xe2>
10001a17:	ba 07 00 00 00       	mov    edx,0x7
10001a1c:	6a 0f                	push   0xf
10001a1e:	52                   	push   edx
10001a1f:	68 aa a7 00 10       	push   0x1000a7aa	10001a20: R_386_32	.text
10001a24:	50                   	push   eax
10001a25:	e8 fc ff ff ff       	call   10001a26 <bootInstallTasks(int)+0xec>	10001a26: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a2a:	83 c4 10             	add    esp,0x10
10001a2d:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a2e: R_386_32	term
10001a32:	83 ec 04             	sub    esp,0x4
10001a35:	6a 0c                	push   0xc
10001a37:	6a 1a                	push   0x1a
10001a39:	50                   	push   eax
10001a3a:	e8 fc ff ff ff       	call   10001a3b <bootInstallTasks(int)+0x101>	10001a3b: R_386_PC32	VgaText::setCursor(int, int)
10001a3f:	83 c4 10             	add    esp,0x10
10001a42:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a43: R_386_32	term
10001a47:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001a4b:	75 07                	jne    10001a54 <bootInstallTasks(int)+0x11a>
10001a4d:	ba 8c a7 00 10       	mov    edx,0x1000a78c	10001a4e: R_386_32	.text
10001a52:	eb 05                	jmp    10001a59 <bootInstallTasks(int)+0x11f>
10001a54:	ba 8f a7 00 10       	mov    edx,0x1000a78f	10001a55: R_386_32	.text
10001a59:	83 ec 08             	sub    esp,0x8
10001a5c:	52                   	push   edx
10001a5d:	50                   	push   eax
10001a5e:	e8 fc ff ff ff       	call   10001a5f <bootInstallTasks(int)+0x125>	10001a5f: R_386_PC32	VgaText::puts(char const*)
10001a63:	83 c4 10             	add    esp,0x10
10001a66:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a67: R_386_32	term
10001a6b:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
10001a6f:	7e 07                	jle    10001a78 <bootInstallTasks(int)+0x13e>
10001a71:	ba 00 00 00 00       	mov    edx,0x0
10001a76:	eb 05                	jmp    10001a7d <bootInstallTasks(int)+0x143>
10001a78:	ba 07 00 00 00       	mov    edx,0x7
10001a7d:	6a 0f                	push   0xf
10001a7f:	52                   	push   edx
10001a80:	68 c0 a7 00 10       	push   0x1000a7c0	10001a81: R_386_32	.text
10001a85:	50                   	push   eax
10001a86:	e8 fc ff ff ff       	call   10001a87 <bootInstallTasks(int)+0x14d>	10001a87: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a8b:	83 c4 10             	add    esp,0x10
10001a8e:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a8f: R_386_32	term
10001a93:	83 ec 04             	sub    esp,0x4
10001a96:	6a 0d                	push   0xd
10001a98:	6a 1a                	push   0x1a
10001a9a:	50                   	push   eax
10001a9b:	e8 fc ff ff ff       	call   10001a9c <bootInstallTasks(int)+0x162>	10001a9c: R_386_PC32	VgaText::setCursor(int, int)
10001aa0:	83 c4 10             	add    esp,0x10
10001aa3:	a1 00 00 00 00       	mov    eax,ds:0x0	10001aa4: R_386_32	term
10001aa8:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001aac:	75 07                	jne    10001ab5 <bootInstallTasks(int)+0x17b>
10001aae:	ba 8c a7 00 10       	mov    edx,0x1000a78c	10001aaf: R_386_32	.text
10001ab3:	eb 05                	jmp    10001aba <bootInstallTasks(int)+0x180>
10001ab5:	ba 8f a7 00 10       	mov    edx,0x1000a78f	10001ab6: R_386_32	.text
10001aba:	83 ec 08             	sub    esp,0x8
10001abd:	52                   	push   edx
10001abe:	50                   	push   eax
10001abf:	e8 fc ff ff ff       	call   10001ac0 <bootInstallTasks(int)+0x186>	10001ac0: R_386_PC32	VgaText::puts(char const*)
10001ac4:	83 c4 10             	add    esp,0x10
10001ac7:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ac8: R_386_32	term
10001acc:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001ad0:	7e 07                	jle    10001ad9 <bootInstallTasks(int)+0x19f>
10001ad2:	ba 00 00 00 00       	mov    edx,0x0
10001ad7:	eb 05                	jmp    10001ade <bootInstallTasks(int)+0x1a4>
10001ad9:	ba 07 00 00 00       	mov    edx,0x7
10001ade:	6a 0f                	push   0xf
10001ae0:	52                   	push   edx
10001ae1:	68 d6 a7 00 10       	push   0x1000a7d6	10001ae2: R_386_32	.text
10001ae6:	50                   	push   eax
10001ae7:	e8 fc ff ff ff       	call   10001ae8 <bootInstallTasks(int)+0x1ae>	10001ae8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001aec:	83 c4 10             	add    esp,0x10
10001aef:	a1 00 00 00 00       	mov    eax,ds:0x0	10001af0: R_386_32	term
10001af4:	83 ec 04             	sub    esp,0x4
10001af7:	6a 0e                	push   0xe
10001af9:	6a 1a                	push   0x1a
10001afb:	50                   	push   eax
10001afc:	e8 fc ff ff ff       	call   10001afd <bootInstallTasks(int)+0x1c3>	10001afd: R_386_PC32	VgaText::setCursor(int, int)
10001b01:	83 c4 10             	add    esp,0x10
10001b04:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b05: R_386_32	term
10001b09:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b0d:	75 07                	jne    10001b16 <bootInstallTasks(int)+0x1dc>
10001b0f:	ba 8c a7 00 10       	mov    edx,0x1000a78c	10001b10: R_386_32	.text
10001b14:	eb 05                	jmp    10001b1b <bootInstallTasks(int)+0x1e1>
10001b16:	ba 8f a7 00 10       	mov    edx,0x1000a78f	10001b17: R_386_32	.text
10001b1b:	83 ec 08             	sub    esp,0x8
10001b1e:	52                   	push   edx
10001b1f:	50                   	push   eax
10001b20:	e8 fc ff ff ff       	call   10001b21 <bootInstallTasks(int)+0x1e7>	10001b21: R_386_PC32	VgaText::puts(char const*)
10001b25:	83 c4 10             	add    esp,0x10
10001b28:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b29: R_386_32	term
10001b2d:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001b31:	7e 07                	jle    10001b3a <bootInstallTasks(int)+0x200>
10001b33:	ba 00 00 00 00       	mov    edx,0x0
10001b38:	eb 05                	jmp    10001b3f <bootInstallTasks(int)+0x205>
10001b3a:	ba 07 00 00 00       	mov    edx,0x7
10001b3f:	6a 0f                	push   0xf
10001b41:	52                   	push   edx
10001b42:	68 ea a7 00 10       	push   0x1000a7ea	10001b43: R_386_32	.text
10001b47:	50                   	push   eax
10001b48:	e8 fc ff ff ff       	call   10001b49 <bootInstallTasks(int)+0x20f>	10001b49: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001b4d:	83 c4 10             	add    esp,0x10
10001b50:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b51: R_386_32	term
10001b55:	83 ec 04             	sub    esp,0x4
10001b58:	6a 0f                	push   0xf
10001b5a:	6a 1a                	push   0x1a
10001b5c:	50                   	push   eax
10001b5d:	e8 fc ff ff ff       	call   10001b5e <bootInstallTasks(int)+0x224>	10001b5e: R_386_PC32	VgaText::setCursor(int, int)
10001b62:	83 c4 10             	add    esp,0x10
10001b65:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b66: R_386_32	term
10001b6a:	83 7d 08 05          	cmp    DWORD PTR [ebp+0x8],0x5
10001b6e:	75 07                	jne    10001b77 <bootInstallTasks(int)+0x23d>
10001b70:	ba 8c a7 00 10       	mov    edx,0x1000a78c	10001b71: R_386_32	.text
10001b75:	eb 05                	jmp    10001b7c <bootInstallTasks(int)+0x242>
10001b77:	ba 8f a7 00 10       	mov    edx,0x1000a78f	10001b78: R_386_32	.text
10001b7c:	83 ec 08             	sub    esp,0x8
10001b7f:	52                   	push   edx
10001b80:	50                   	push   eax
10001b81:	e8 fc ff ff ff       	call   10001b82 <bootInstallTasks(int)+0x248>	10001b82: R_386_PC32	VgaText::puts(char const*)
10001b86:	83 c4 10             	add    esp,0x10
10001b89:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b8a: R_386_32	term
10001b8e:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b92:	7e 07                	jle    10001b9b <bootInstallTasks(int)+0x261>
10001b94:	ba 00 00 00 00       	mov    edx,0x0
10001b99:	eb 05                	jmp    10001ba0 <bootInstallTasks(int)+0x266>
10001b9b:	ba 07 00 00 00       	mov    edx,0x7
10001ba0:	6a 0f                	push   0xf
10001ba2:	52                   	push   edx
10001ba3:	68 02 a8 00 10       	push   0x1000a802	10001ba4: R_386_32	.text
10001ba8:	50                   	push   eax
10001ba9:	e8 fc ff ff ff       	call   10001baa <bootInstallTasks(int)+0x270>	10001baa: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001bae:	83 c4 10             	add    esp,0x10
10001bb1:	90                   	nop
10001bb2:	c9                   	leave  
10001bb3:	c3                   	ret    

10001bb4 <ror(unsigned long long, int, int)>:
10001bb4:	55                   	push   ebp
10001bb5:	89 e5                	mov    ebp,esp
10001bb7:	56                   	push   esi
10001bb8:	53                   	push   ebx
10001bb9:	83 ec 20             	sub    esp,0x20
10001bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bbf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001bc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001bc5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001bc8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001bcb:	ba 01 00 00 00       	mov    edx,0x1
10001bd0:	88 c1                	mov    cl,al
10001bd2:	d3 e2                	shl    edx,cl
10001bd4:	89 d0                	mov    eax,edx
10001bd6:	48                   	dec    eax
10001bd7:	99                   	cdq    
10001bd8:	89 c1                	mov    ecx,eax
10001bda:	23 4d e0             	and    ecx,DWORD PTR [ebp-0x20]
10001bdd:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001be0:	89 d0                	mov    eax,edx
10001be2:	23 45 e4             	and    eax,DWORD PTR [ebp-0x1c]
10001be5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001be8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10001beb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001bee:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001bf1:	0f ad d0             	shrd   eax,edx,cl
10001bf4:	d3 ea                	shr    edx,cl
10001bf6:	f6 c1 20             	test   cl,0x20
10001bf9:	74 04                	je     10001bff <ror(unsigned long long, int, int)+0x4b>
10001bfb:	89 d0                	mov    eax,edx
10001bfd:	31 d2                	xor    edx,edx
10001bff:	89 c3                	mov    ebx,eax
10001c01:	89 d6                	mov    esi,edx
10001c03:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c06:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
10001c09:	89 c1                	mov    ecx,eax
10001c0b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c0e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c11:	0f a5 c2             	shld   edx,eax,cl
10001c14:	d3 e0                	shl    eax,cl
10001c16:	f6 c1 20             	test   cl,0x20
10001c19:	74 04                	je     10001c1f <ror(unsigned long long, int, int)+0x6b>
10001c1b:	89 c2                	mov    edx,eax
10001c1d:	31 c0                	xor    eax,eax
10001c1f:	89 d1                	mov    ecx,edx
10001c21:	89 c2                	mov    edx,eax
10001c23:	89 d8                	mov    eax,ebx
10001c25:	09 d0                	or     eax,edx
10001c27:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001c2a:	89 f0                	mov    eax,esi
10001c2c:	09 c8                	or     eax,ecx
10001c2e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001c31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001c34:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001c37:	83 c4 20             	add    esp,0x20
10001c3a:	5b                   	pop    ebx
10001c3b:	5e                   	pop    esi
10001c3c:	5d                   	pop    ebp
10001c3d:	c3                   	ret    

10001c3e <swapBits(unsigned long long, unsigned long long, unsigned long long)>:
10001c3e:	55                   	push   ebp
10001c3f:	89 e5                	mov    ebp,esp
10001c41:	56                   	push   esi
10001c42:	53                   	push   ebx
10001c43:	83 ec 40             	sub    esp,0x40
10001c46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c49:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001c4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001c4f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001c52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001c55:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001c58:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c5b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001c5e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001c61:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001c64:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001c67:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001c6a:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001c6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c70:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c73:	0f ad d0             	shrd   eax,edx,cl
10001c76:	d3 ea                	shr    edx,cl
10001c78:	f6 c1 20             	test   cl,0x20
10001c7b:	74 04                	je     10001c81 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x43>
10001c7d:	89 d0                	mov    eax,edx
10001c7f:	31 d2                	xor    edx,edx
10001c81:	89 c3                	mov    ebx,eax
10001c83:	89 d6                	mov    esi,edx
10001c85:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001c88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c8b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c8e:	0f ad d0             	shrd   eax,edx,cl
10001c91:	d3 ea                	shr    edx,cl
10001c93:	f6 c1 20             	test   cl,0x20
10001c96:	74 04                	je     10001c9c <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x5e>
10001c98:	89 d0                	mov    eax,edx
10001c9a:	31 d2                	xor    edx,edx
10001c9c:	89 d1                	mov    ecx,edx
10001c9e:	89 c2                	mov    edx,eax
10001ca0:	89 d8                	mov    eax,ebx
10001ca2:	31 d0                	xor    eax,edx
10001ca4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001ca7:	89 f0                	mov    eax,esi
10001ca9:	31 c8                	xor    eax,ecx
10001cab:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001cae:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001cb1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001cb4:	89 c6                	mov    esi,eax
10001cb6:	83 e6 01             	and    esi,0x1
10001cb9:	89 75 c8             	mov    DWORD PTR [ebp-0x38],esi
10001cbc:	89 d0                	mov    eax,edx
10001cbe:	83 e0 00             	and    eax,0x0
10001cc1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001cc4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001cc7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10001cca:	89 c3                	mov    ebx,eax
10001ccc:	80 f7 00             	xor    bh,0x0
10001ccf:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
10001cd2:	89 d0                	mov    eax,edx
10001cd4:	80 f4 00             	xor    ah,0x0
10001cd7:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001cda:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10001cdd:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10001ce0:	89 c8                	mov    eax,ecx
10001ce2:	09 d0                	or     eax,edx
10001ce4:	85 c0                	test   eax,eax
10001ce6:	74 62                	je     10001d4a <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x10c>
10001ce8:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001ceb:	b8 01 00 00 00       	mov    eax,0x1
10001cf0:	ba 00 00 00 00       	mov    edx,0x0
10001cf5:	0f a5 c2             	shld   edx,eax,cl
10001cf8:	d3 e0                	shl    eax,cl
10001cfa:	f6 c1 20             	test   cl,0x20
10001cfd:	74 04                	je     10001d03 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xc5>
10001cff:	89 c2                	mov    edx,eax
10001d01:	31 c0                	xor    eax,eax
10001d03:	89 c3                	mov    ebx,eax
10001d05:	89 d6                	mov    esi,edx
10001d07:	89 d8                	mov    eax,ebx
10001d09:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001d0c:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10001d0f:	89 f0                	mov    eax,esi
10001d11:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001d14:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001d17:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001d1a:	b8 01 00 00 00       	mov    eax,0x1
10001d1f:	ba 00 00 00 00       	mov    edx,0x0
10001d24:	0f a5 c2             	shld   edx,eax,cl
10001d27:	d3 e0                	shl    eax,cl
10001d29:	f6 c1 20             	test   cl,0x20
10001d2c:	74 04                	je     10001d32 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xf4>
10001d2e:	89 c2                	mov    edx,eax
10001d30:	31 c0                	xor    eax,eax
10001d32:	89 c1                	mov    ecx,eax
10001d34:	89 d3                	mov    ebx,edx
10001d36:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001d39:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10001d3c:	89 c6                	mov    esi,eax
10001d3e:	31 ce                	xor    esi,ecx
10001d40:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10001d43:	31 d3                	xor    ebx,edx
10001d45:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10001d48:	eb 0c                	jmp    10001d56 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x118>
10001d4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001d4d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001d50:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001d53:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10001d56:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001d59:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001d5c:	83 c4 40             	add    esp,0x40
10001d5f:	5b                   	pop    ebx
10001d60:	5e                   	pop    esi
10001d61:	5d                   	pop    ebp
10001d62:	c3                   	ret    

10001d63 <getChecksum(unsigned int)>:
10001d63:	55                   	push   ebp
10001d64:	89 e5                	mov    ebp,esp
10001d66:	56                   	push   esi
10001d67:	53                   	push   ebx
10001d68:	83 ec 20             	sub    esp,0x20
10001d6b:	66 c7 45 f6 49 4e    	mov    WORD PTR [ebp-0xa],0x4e49
10001d71:	66 c7 45 f4 79 6e    	mov    WORD PTR [ebp-0xc],0x6e79
10001d77:	66 c7 45 f2 67 61    	mov    WORD PTR [ebp-0xe],0x6167
10001d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d80:	c1 e8 10             	shr    eax,0x10
10001d83:	89 c1                	mov    ecx,eax
10001d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d88:	89 c2                	mov    edx,eax
10001d8a:	89 d0                	mov    eax,edx
10001d8c:	c1 e0 06             	shl    eax,0x6
10001d8f:	29 d0                	sub    eax,edx
10001d91:	c1 e0 04             	shl    eax,0x4
10001d94:	01 d0                	add    eax,edx
10001d96:	31 c8                	xor    eax,ecx
10001d98:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
10001d9c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001da0:	0f 84 b1 00 00 00    	je     10001e57 <getChecksum(unsigned int)+0xf4>
10001da6:	b8 f4 02 00 00       	mov    eax,0x2f4
10001dab:	ba 00 00 00 00       	mov    edx,0x0
10001db0:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001db3:	89 c3                	mov    ebx,eax
10001db5:	be 00 00 00 00       	mov    esi,0x0
10001dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dbd:	ba 00 00 00 00       	mov    edx,0x0
10001dc2:	6a 1d                	push   0x1d
10001dc4:	6a 05                	push   0x5
10001dc6:	52                   	push   edx
10001dc7:	50                   	push   eax
10001dc8:	e8 fc ff ff ff       	call   10001dc9 <getChecksum(unsigned int)+0x66>	10001dc9: R_386_PC32	ror(unsigned long long, int, int)
10001dcd:	83 c4 10             	add    esp,0x10
10001dd0:	05 52 3f 04 00       	add    eax,0x43f52
10001dd5:	83 d2 00             	adc    edx,0x0
10001dd8:	89 d9                	mov    ecx,ebx
10001dda:	31 c1                	xor    ecx,eax
10001ddc:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
10001ddf:	31 d6                	xor    esi,edx
10001de1:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
10001de4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001de7:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001deb:	66 0f af c2          	imul   ax,dx
10001def:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
10001df3:	b8 ea 00 00 00       	mov    eax,0xea
10001df8:	ba 00 00 00 00       	mov    edx,0x0
10001dfd:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001e00:	89 c3                	mov    ebx,eax
10001e02:	be 00 00 00 00       	mov    esi,0x0
10001e07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e0a:	ba 00 00 00 00       	mov    edx,0x0
10001e0f:	6a 1f                	push   0x1f
10001e11:	6a 03                	push   0x3
10001e13:	52                   	push   edx
10001e14:	50                   	push   eax
10001e15:	e8 fc ff ff ff       	call   10001e16 <getChecksum(unsigned int)+0xb3>	10001e16: R_386_PC32	ror(unsigned long long, int, int)
10001e1a:	83 c4 10             	add    esp,0x10
10001e1d:	05 05 db 09 00       	add    eax,0x9db05
10001e22:	83 d2 00             	adc    edx,0x0
10001e25:	89 d9                	mov    ecx,ebx
10001e27:	31 c1                	xor    ecx,eax
10001e29:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
10001e2c:	31 d6                	xor    esi,edx
10001e2e:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10001e31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001e34:	66 29 45 f4          	sub    WORD PTR [ebp-0xc],ax
10001e38:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e3c:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e3f:	25 d2 04 00 00       	and    eax,0x4d2
10001e44:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e4b:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e4f:	d1 6d 08             	shr    DWORD PTR [ebp+0x8],1
10001e52:	e9 45 ff ff ff       	jmp    10001d9c <getChecksum(unsigned int)+0x39>
10001e57:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e5b:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e5e:	66 33 45 f2          	xor    ax,WORD PTR [ebp-0xe]
10001e62:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001e65:	0f b7 c0             	movzx  eax,ax
10001e68:	25 ff 7f 00 00       	and    eax,0x7fff
10001e6d:	8d 65 f8             	lea    esp,[ebp-0x8]
10001e70:	5b                   	pop    ebx
10001e71:	5e                   	pop    esi
10001e72:	5d                   	pop    ebp
10001e73:	c3                   	ret    

10001e74 <createKey(char*, unsigned int)>:
10001e74:	55                   	push   ebp
10001e75:	89 e5                	mov    ebp,esp
10001e77:	53                   	push   ebx
10001e78:	83 ec 34             	sub    esp,0x34
10001e7b:	68 14 a8 00 10       	push   0x1000a814	10001e7c: R_386_32	.text
10001e80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e83:	e8 fc ff ff ff       	call   10001e84 <createKey(char*, unsigned int)+0x10>	10001e84: R_386_PC32	strcpy
10001e88:	83 c4 08             	add    esp,0x8
10001e8b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10001e8e:	bb 00 00 00 00       	mov    ebx,0x0
10001e93:	89 c8                	mov    eax,ecx
10001e95:	89 da                	mov    edx,ebx
10001e97:	0f a4 c2 0f          	shld   edx,eax,0xf
10001e9b:	c1 e0 0f             	shl    eax,0xf
10001e9e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ea1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ea4:	83 ec 04             	sub    esp,0x4
10001ea7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001eaa:	e8 fc ff ff ff       	call   10001eab <createKey(char*, unsigned int)+0x37>	10001eab: R_386_PC32	getChecksum(unsigned int)
10001eaf:	83 c4 08             	add    esp,0x8
10001eb2:	ba 00 00 00 00       	mov    edx,0x0
10001eb7:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
10001eba:	09 55 f4             	or     DWORD PTR [ebp-0xc],edx
10001ebd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001ec4:	81 7d ec db 24 00 00 	cmp    DWORD PTR [ebp-0x14],0x24db
10001ecb:	7f 7f                	jg     10001f4c <createKey(char*, unsigned int)+0xd8>
10001ecd:	81 75 f0 95 38 e4 b5 	xor    DWORD PTR [ebp-0x10],0xb5e43895
10001ed4:	83 75 f4 37          	xor    DWORD PTR [ebp-0xc],0x37
10001ed8:	6a 00                	push   0x0
10001eda:	6a 08                	push   0x8
10001edc:	6a 00                	push   0x0
10001ede:	6a 03                	push   0x3
10001ee0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ee3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001ee6:	e8 fc ff ff ff       	call   10001ee7 <createKey(char*, unsigned int)+0x73>	10001ee7: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001eeb:	83 c4 18             	add    esp,0x18
10001eee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ef1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ef4:	6a 00                	push   0x0
10001ef6:	6a 0c                	push   0xc
10001ef8:	6a 00                	push   0x0
10001efa:	6a 0d                	push   0xd
10001efc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001eff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f02:	e8 fc ff ff ff       	call   10001f03 <createKey(char*, unsigned int)+0x8f>	10001f03: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f07:	83 c4 18             	add    esp,0x18
10001f0a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f0d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f10:	6a 00                	push   0x0
10001f12:	6a 16                	push   0x16
10001f14:	6a 00                	push   0x0
10001f16:	6a 25                	push   0x25
10001f18:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f1b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f1e:	e8 fc ff ff ff       	call   10001f1f <createKey(char*, unsigned int)+0xab>	10001f1f: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f23:	83 c4 18             	add    esp,0x18
10001f26:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f29:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f2c:	6a 2a                	push   0x2a
10001f2e:	6a 13                	push   0x13
10001f30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f33:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f36:	e8 fc ff ff ff       	call   10001f37 <createKey(char*, unsigned int)+0xc3>	10001f37: R_386_PC32	ror(unsigned long long, int, int)
10001f3b:	83 c4 10             	add    esp,0x10
10001f3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f41:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f44:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
10001f47:	e9 78 ff ff ff       	jmp    10001ec4 <createKey(char*, unsigned int)+0x50>
10001f4c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f4f:	83 e0 0f             	and    eax,0xf
10001f52:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001f55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f58:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f5b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f5f:	c1 ea 04             	shr    edx,0x4
10001f62:	89 c1                	mov    ecx,eax
10001f64:	89 d3                	mov    ebx,edx
10001f66:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f69:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f6c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f6f:	83 e0 0f             	and    eax,0xf
10001f72:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001f75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f78:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f7b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f7f:	c1 ea 04             	shr    edx,0x4
10001f82:	89 c1                	mov    ecx,eax
10001f84:	89 d3                	mov    ebx,edx
10001f86:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f89:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f8f:	83 e0 0f             	and    eax,0xf
10001f92:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001f95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f98:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f9b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f9f:	c1 ea 04             	shr    edx,0x4
10001fa2:	89 c1                	mov    ecx,eax
10001fa4:	89 d3                	mov    ebx,edx
10001fa6:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fa9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001faf:	25 ff 03 00 00       	and    eax,0x3ff
10001fb4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001fb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fbd:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fc1:	c1 ea 0a             	shr    edx,0xa
10001fc4:	89 c1                	mov    ecx,eax
10001fc6:	89 d3                	mov    ebx,edx
10001fc8:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fcb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fd1:	25 ff 03 00 00       	and    eax,0x3ff
10001fd6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001fd9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fdc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fdf:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fe3:	c1 ea 0a             	shr    edx,0xa
10001fe6:	89 c1                	mov    ecx,eax
10001fe8:	89 d3                	mov    ebx,edx
10001fea:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fed:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001ff0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ff3:	25 ff 03 00 00       	and    eax,0x3ff
10001ff8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001ffb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ffe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002001:	0f ac d0 0a          	shrd   eax,edx,0xa
10002005:	c1 ea 0a             	shr    edx,0xa
10002008:	89 c1                	mov    ecx,eax
1000200a:	89 d3                	mov    ebx,edx
1000200c:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
1000200f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002012:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002015:	05 00 00 00 00       	add    eax,0x0	10002016: R_386_32	lookupA
1000201a:	8a 10                	mov    dl,BYTE PTR [eax]
1000201c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000201f:	88 10                	mov    BYTE PTR [eax],dl
10002021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002024:	8d 50 01             	lea    edx,[eax+0x1]
10002027:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000202a:	05 00 00 00 00       	add    eax,0x0	1000202b: R_386_32	lookupA
1000202f:	8a 00                	mov    al,BYTE PTR [eax]
10002031:	88 02                	mov    BYTE PTR [edx],al
10002033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002036:	8d 50 0f             	lea    edx,[eax+0xf]
10002039:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000203c:	05 00 00 00 00       	add    eax,0x0	1000203d: R_386_32	lookupA
10002041:	8a 00                	mov    al,BYTE PTR [eax]
10002043:	88 02                	mov    BYTE PTR [edx],al
10002045:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002048:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
1000204d:	f7 e9                	imul   ecx
1000204f:	c1 fa 05             	sar    edx,0x5
10002052:	89 c8                	mov    eax,ecx
10002054:	c1 f8 1f             	sar    eax,0x1f
10002057:	29 c2                	sub    edx,eax
10002059:	89 d0                	mov    eax,edx
1000205b:	b9 0a 00 00 00       	mov    ecx,0xa
10002060:	99                   	cdq    
10002061:	f7 f9                	idiv   ecx
10002063:	89 d0                	mov    eax,edx
10002065:	8d 50 30             	lea    edx,[eax+0x30]
10002068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000206b:	83 c0 03             	add    eax,0x3
1000206e:	88 10                	mov    BYTE PTR [eax],dl
10002070:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002073:	b8 67 66 66 66       	mov    eax,0x66666667
10002078:	f7 e9                	imul   ecx
1000207a:	c1 fa 02             	sar    edx,0x2
1000207d:	89 c8                	mov    eax,ecx
1000207f:	c1 f8 1f             	sar    eax,0x1f
10002082:	89 d1                	mov    ecx,edx
10002084:	29 c1                	sub    ecx,eax
10002086:	b8 67 66 66 66       	mov    eax,0x66666667
1000208b:	f7 e9                	imul   ecx
1000208d:	c1 fa 02             	sar    edx,0x2
10002090:	89 c8                	mov    eax,ecx
10002092:	c1 f8 1f             	sar    eax,0x1f
10002095:	29 c2                	sub    edx,eax
10002097:	89 d0                	mov    eax,edx
10002099:	c1 e0 02             	shl    eax,0x2
1000209c:	01 d0                	add    eax,edx
1000209e:	01 c0                	add    eax,eax
100020a0:	29 c1                	sub    ecx,eax
100020a2:	89 ca                	mov    edx,ecx
100020a4:	88 d0                	mov    al,dl
100020a6:	8d 50 30             	lea    edx,[eax+0x30]
100020a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ac:	83 c0 04             	add    eax,0x4
100020af:	88 10                	mov    BYTE PTR [eax],dl
100020b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100020b4:	b9 0a 00 00 00       	mov    ecx,0xa
100020b9:	99                   	cdq    
100020ba:	f7 f9                	idiv   ecx
100020bc:	89 d0                	mov    eax,edx
100020be:	8d 50 30             	lea    edx,[eax+0x30]
100020c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020c4:	83 c0 05             	add    eax,0x5
100020c7:	88 10                	mov    BYTE PTR [eax],dl
100020c9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020cc:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100020d1:	f7 e9                	imul   ecx
100020d3:	c1 fa 05             	sar    edx,0x5
100020d6:	89 c8                	mov    eax,ecx
100020d8:	c1 f8 1f             	sar    eax,0x1f
100020db:	29 c2                	sub    edx,eax
100020dd:	89 d0                	mov    eax,edx
100020df:	b9 0a 00 00 00       	mov    ecx,0xa
100020e4:	99                   	cdq    
100020e5:	f7 f9                	idiv   ecx
100020e7:	89 d0                	mov    eax,edx
100020e9:	8d 50 30             	lea    edx,[eax+0x30]
100020ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ef:	83 c0 07             	add    eax,0x7
100020f2:	88 10                	mov    BYTE PTR [eax],dl
100020f4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020f7:	b8 67 66 66 66       	mov    eax,0x66666667
100020fc:	f7 e9                	imul   ecx
100020fe:	c1 fa 02             	sar    edx,0x2
10002101:	89 c8                	mov    eax,ecx
10002103:	c1 f8 1f             	sar    eax,0x1f
10002106:	89 d1                	mov    ecx,edx
10002108:	29 c1                	sub    ecx,eax
1000210a:	b8 67 66 66 66       	mov    eax,0x66666667
1000210f:	f7 e9                	imul   ecx
10002111:	c1 fa 02             	sar    edx,0x2
10002114:	89 c8                	mov    eax,ecx
10002116:	c1 f8 1f             	sar    eax,0x1f
10002119:	29 c2                	sub    edx,eax
1000211b:	89 d0                	mov    eax,edx
1000211d:	c1 e0 02             	shl    eax,0x2
10002120:	01 d0                	add    eax,edx
10002122:	01 c0                	add    eax,eax
10002124:	29 c1                	sub    ecx,eax
10002126:	89 ca                	mov    edx,ecx
10002128:	88 d0                	mov    al,dl
1000212a:	8d 50 30             	lea    edx,[eax+0x30]
1000212d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002130:	83 c0 08             	add    eax,0x8
10002133:	88 10                	mov    BYTE PTR [eax],dl
10002135:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002138:	b9 0a 00 00 00       	mov    ecx,0xa
1000213d:	99                   	cdq    
1000213e:	f7 f9                	idiv   ecx
10002140:	89 d0                	mov    eax,edx
10002142:	8d 50 30             	lea    edx,[eax+0x30]
10002145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002148:	83 c0 09             	add    eax,0x9
1000214b:	88 10                	mov    BYTE PTR [eax],dl
1000214d:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10002150:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002155:	f7 e9                	imul   ecx
10002157:	c1 fa 05             	sar    edx,0x5
1000215a:	89 c8                	mov    eax,ecx
1000215c:	c1 f8 1f             	sar    eax,0x1f
1000215f:	29 c2                	sub    edx,eax
10002161:	89 d0                	mov    eax,edx
10002163:	b9 0a 00 00 00       	mov    ecx,0xa
10002168:	99                   	cdq    
10002169:	f7 f9                	idiv   ecx
1000216b:	89 d0                	mov    eax,edx
1000216d:	8d 50 30             	lea    edx,[eax+0x30]
10002170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002173:	83 c0 0b             	add    eax,0xb
10002176:	88 10                	mov    BYTE PTR [eax],dl
10002178:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
1000217b:	b8 67 66 66 66       	mov    eax,0x66666667
10002180:	f7 e9                	imul   ecx
10002182:	c1 fa 02             	sar    edx,0x2
10002185:	89 c8                	mov    eax,ecx
10002187:	c1 f8 1f             	sar    eax,0x1f
1000218a:	89 d1                	mov    ecx,edx
1000218c:	29 c1                	sub    ecx,eax
1000218e:	b8 67 66 66 66       	mov    eax,0x66666667
10002193:	f7 e9                	imul   ecx
10002195:	c1 fa 02             	sar    edx,0x2
10002198:	89 c8                	mov    eax,ecx
1000219a:	c1 f8 1f             	sar    eax,0x1f
1000219d:	29 c2                	sub    edx,eax
1000219f:	89 d0                	mov    eax,edx
100021a1:	c1 e0 02             	shl    eax,0x2
100021a4:	01 d0                	add    eax,edx
100021a6:	01 c0                	add    eax,eax
100021a8:	29 c1                	sub    ecx,eax
100021aa:	89 ca                	mov    edx,ecx
100021ac:	88 d0                	mov    al,dl
100021ae:	8d 50 30             	lea    edx,[eax+0x30]
100021b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021b4:	83 c0 0c             	add    eax,0xc
100021b7:	88 10                	mov    BYTE PTR [eax],dl
100021b9:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100021bc:	b9 0a 00 00 00       	mov    ecx,0xa
100021c1:	99                   	cdq    
100021c2:	f7 f9                	idiv   ecx
100021c4:	89 d0                	mov    eax,edx
100021c6:	8d 50 30             	lea    edx,[eax+0x30]
100021c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021cc:	83 c0 0d             	add    eax,0xd
100021cf:	88 10                	mov    BYTE PTR [eax],dl
100021d1:	90                   	nop
100021d2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100021d5:	c9                   	leave  
100021d6:	c3                   	ret    

100021d7 <retrieveBits(char*)>:
100021d7:	55                   	push   ebp
100021d8:	89 e5                	mov    ebp,esp
100021da:	57                   	push   edi
100021db:	56                   	push   esi
100021dc:	53                   	push   ebx
100021dd:	83 ec 4c             	sub    esp,0x4c
100021e0:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
100021e7:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
100021ee:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [ebp-0x1c],0xffffffff
100021f5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100021fc:	83 7d e0 0f          	cmp    DWORD PTR [ebp-0x20],0xf
10002200:	7f 54                	jg     10002256 <retrieveBits(char*)+0x7f>
10002202:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002205:	05 00 00 00 00       	add    eax,0x0	10002206: R_386_32	lookupA
1000220a:	8a 10                	mov    dl,BYTE PTR [eax]
1000220c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000220f:	8a 00                	mov    al,BYTE PTR [eax]
10002211:	38 c2                	cmp    dl,al
10002213:	75 06                	jne    1000221b <retrieveBits(char*)+0x44>
10002215:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002218:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000221b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000221e:	05 00 00 00 00       	add    eax,0x0	1000221f: R_386_32	lookupB
10002223:	8a 10                	mov    dl,BYTE PTR [eax]
10002225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002228:	40                   	inc    eax
10002229:	8a 00                	mov    al,BYTE PTR [eax]
1000222b:	38 c2                	cmp    dl,al
1000222d:	75 06                	jne    10002235 <retrieveBits(char*)+0x5e>
1000222f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002232:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10002235:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002238:	05 00 00 00 00       	add    eax,0x0	10002239: R_386_32	lookupC
1000223d:	8a 10                	mov    dl,BYTE PTR [eax]
1000223f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002242:	83 c0 0f             	add    eax,0xf
10002245:	8a 00                	mov    al,BYTE PTR [eax]
10002247:	38 c2                	cmp    dl,al
10002249:	75 06                	jne    10002251 <retrieveBits(char*)+0x7a>
1000224b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000224e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002251:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10002254:	eb a6                	jmp    100021fc <retrieveBits(char*)+0x25>
10002256:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
1000225a:	74 0c                	je     10002268 <retrieveBits(char*)+0x91>
1000225c:	83 7d e8 ff          	cmp    DWORD PTR [ebp-0x18],0xffffffff
10002260:	74 06                	je     10002268 <retrieveBits(char*)+0x91>
10002262:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10002266:	75 0f                	jne    10002277 <retrieveBits(char*)+0xa0>
10002268:	b8 00 00 00 00       	mov    eax,0x0
1000226d:	ba 00 00 00 00       	mov    edx,0x0
10002272:	e9 02 02 00 00       	jmp    10002479 <retrieveBits(char*)+0x2a2>
10002277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000227a:	83 c0 03             	add    eax,0x3
1000227d:	8a 00                	mov    al,BYTE PTR [eax]
1000227f:	0f be c0             	movsx  eax,al
10002282:	8d 50 d0             	lea    edx,[eax-0x30]
10002285:	89 d0                	mov    eax,edx
10002287:	c1 e0 02             	shl    eax,0x2
1000228a:	01 d0                	add    eax,edx
1000228c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002293:	01 d0                	add    eax,edx
10002295:	c1 e0 02             	shl    eax,0x2
10002298:	89 c6                	mov    esi,eax
1000229a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000229d:	83 c0 04             	add    eax,0x4
100022a0:	8a 00                	mov    al,BYTE PTR [eax]
100022a2:	0f be c0             	movsx  eax,al
100022a5:	8d 50 d0             	lea    edx,[eax-0x30]
100022a8:	89 d0                	mov    eax,edx
100022aa:	c1 e0 02             	shl    eax,0x2
100022ad:	01 d0                	add    eax,edx
100022af:	01 c0                	add    eax,eax
100022b1:	8d 14 06             	lea    edx,[esi+eax*1]
100022b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022b7:	83 c0 05             	add    eax,0x5
100022ba:	8a 00                	mov    al,BYTE PTR [eax]
100022bc:	0f be c0             	movsx  eax,al
100022bf:	83 e8 30             	sub    eax,0x30
100022c2:	01 d0                	add    eax,edx
100022c4:	99                   	cdq    
100022c5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100022c8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100022cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022ce:	83 c0 07             	add    eax,0x7
100022d1:	8a 00                	mov    al,BYTE PTR [eax]
100022d3:	0f be c0             	movsx  eax,al
100022d6:	8d 50 d0             	lea    edx,[eax-0x30]
100022d9:	89 d0                	mov    eax,edx
100022db:	c1 e0 02             	shl    eax,0x2
100022de:	01 d0                	add    eax,edx
100022e0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100022e7:	01 d0                	add    eax,edx
100022e9:	c1 e0 02             	shl    eax,0x2
100022ec:	89 c6                	mov    esi,eax
100022ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022f1:	83 c0 08             	add    eax,0x8
100022f4:	8a 00                	mov    al,BYTE PTR [eax]
100022f6:	0f be c0             	movsx  eax,al
100022f9:	8d 50 d0             	lea    edx,[eax-0x30]
100022fc:	89 d0                	mov    eax,edx
100022fe:	c1 e0 02             	shl    eax,0x2
10002301:	01 d0                	add    eax,edx
10002303:	01 c0                	add    eax,eax
10002305:	8d 14 06             	lea    edx,[esi+eax*1]
10002308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000230b:	83 c0 09             	add    eax,0x9
1000230e:	8a 00                	mov    al,BYTE PTR [eax]
10002310:	0f be c0             	movsx  eax,al
10002313:	83 e8 30             	sub    eax,0x30
10002316:	01 d0                	add    eax,edx
10002318:	99                   	cdq    
10002319:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
1000231c:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
1000231f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002322:	83 c0 0b             	add    eax,0xb
10002325:	8a 00                	mov    al,BYTE PTR [eax]
10002327:	0f be c0             	movsx  eax,al
1000232a:	8d 50 d0             	lea    edx,[eax-0x30]
1000232d:	89 d0                	mov    eax,edx
1000232f:	c1 e0 02             	shl    eax,0x2
10002332:	01 d0                	add    eax,edx
10002334:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000233b:	01 d0                	add    eax,edx
1000233d:	c1 e0 02             	shl    eax,0x2
10002340:	89 c6                	mov    esi,eax
10002342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002345:	83 c0 0c             	add    eax,0xc
10002348:	8a 00                	mov    al,BYTE PTR [eax]
1000234a:	0f be c0             	movsx  eax,al
1000234d:	8d 50 d0             	lea    edx,[eax-0x30]
10002350:	89 d0                	mov    eax,edx
10002352:	c1 e0 02             	shl    eax,0x2
10002355:	01 d0                	add    eax,edx
10002357:	01 c0                	add    eax,eax
10002359:	8d 14 06             	lea    edx,[esi+eax*1]
1000235c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000235f:	83 c0 0d             	add    eax,0xd
10002362:	8a 00                	mov    al,BYTE PTR [eax]
10002364:	0f be c0             	movsx  eax,al
10002367:	83 e8 30             	sub    eax,0x30
1000236a:	01 d0                	add    eax,edx
1000236c:	99                   	cdq    
1000236d:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002370:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10002373:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002376:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10002379:	0f a4 c2 0a          	shld   edx,eax,0xa
1000237d:	c1 e0 0a             	shl    eax,0xa
10002380:	89 c6                	mov    esi,eax
10002382:	89 d7                	mov    edi,edx
10002384:	89 f0                	mov    eax,esi
10002386:	0b 45 c8             	or     eax,DWORD PTR [ebp-0x38]
10002389:	89 c1                	mov    ecx,eax
1000238b:	89 f8                	mov    eax,edi
1000238d:	0b 45 cc             	or     eax,DWORD PTR [ebp-0x34]
10002390:	89 c3                	mov    ebx,eax
10002392:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002395:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10002398:	0f a4 c2 14          	shld   edx,eax,0x14
1000239c:	c1 e0 14             	shl    eax,0x14
1000239f:	89 ce                	mov    esi,ecx
100023a1:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
100023a4:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100023a7:	0b 75 a8             	or     esi,DWORD PTR [ebp-0x58]
100023aa:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
100023ad:	89 d8                	mov    eax,ebx
100023af:	0b 45 ac             	or     eax,DWORD PTR [ebp-0x54]
100023b2:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100023b5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100023b8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100023bb:	0f a4 c2 0c          	shld   edx,eax,0xc
100023bf:	c1 e0 0c             	shl    eax,0xc
100023c2:	89 c3                	mov    ebx,eax
100023c4:	89 d6                	mov    esi,edx
100023c6:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
100023c9:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100023cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100023cf:	c1 e0 04             	shl    eax,0x4
100023d2:	0b 45 ec             	or     eax,DWORD PTR [ebp-0x14]
100023d5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100023d8:	c1 e2 08             	shl    edx,0x8
100023db:	09 d0                	or     eax,edx
100023dd:	99                   	cdq    
100023de:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
100023e1:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
100023e4:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
100023eb:	81 7d d4 db 24 00 00 	cmp    DWORD PTR [ebp-0x2c],0x24db
100023f2:	7f 7f                	jg     10002473 <retrieveBits(char*)+0x29c>
100023f4:	6a 2a                	push   0x2a
100023f6:	6a 13                	push   0x13
100023f8:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023fb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023fe:	e8 fc ff ff ff       	call   100023ff <retrieveBits(char*)+0x228>	100023ff: R_386_PC32	ror(unsigned long long, int, int)
10002403:	83 c4 10             	add    esp,0x10
10002406:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002409:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
1000240c:	6a 00                	push   0x0
1000240e:	6a 08                	push   0x8
10002410:	6a 00                	push   0x0
10002412:	6a 03                	push   0x3
10002414:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002417:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000241a:	e8 fc ff ff ff       	call   1000241b <retrieveBits(char*)+0x244>	1000241b: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000241f:	83 c4 18             	add    esp,0x18
10002422:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002425:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002428:	6a 00                	push   0x0
1000242a:	6a 0c                	push   0xc
1000242c:	6a 00                	push   0x0
1000242e:	6a 0d                	push   0xd
10002430:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002433:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002436:	e8 fc ff ff ff       	call   10002437 <retrieveBits(char*)+0x260>	10002437: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000243b:	83 c4 18             	add    esp,0x18
1000243e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002441:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002444:	6a 00                	push   0x0
10002446:	6a 16                	push   0x16
10002448:	6a 00                	push   0x0
1000244a:	6a 25                	push   0x25
1000244c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000244f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002452:	e8 fc ff ff ff       	call   10002453 <retrieveBits(char*)+0x27c>	10002453: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002457:	83 c4 18             	add    esp,0x18
1000245a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000245d:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002460:	81 75 d8 95 38 e4 b5 	xor    DWORD PTR [ebp-0x28],0xb5e43895
10002467:	83 75 dc 37          	xor    DWORD PTR [ebp-0x24],0x37
1000246b:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
1000246e:	e9 78 ff ff ff       	jmp    100023eb <retrieveBits(char*)+0x214>
10002473:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002476:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002479:	8d 65 f4             	lea    esp,[ebp-0xc]
1000247c:	5b                   	pop    ebx
1000247d:	5e                   	pop    esi
1000247e:	5f                   	pop    edi
1000247f:	5d                   	pop    ebp
10002480:	c3                   	ret    

10002481 <checkKey(char*)>:
10002481:	55                   	push   ebp
10002482:	89 e5                	mov    ebp,esp
10002484:	53                   	push   ebx
10002485:	83 ec 14             	sub    esp,0x14
10002488:	83 ec 04             	sub    esp,0x4
1000248b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000248e:	e8 fc ff ff ff       	call   1000248f <checkKey(char*)+0xe>	1000248f: R_386_PC32	retrieveBits(char*)
10002493:	83 c4 08             	add    esp,0x8
10002496:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002499:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000249c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000249f:	25 ff 7f 00 00       	and    eax,0x7fff
100024a4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100024a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024aa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100024ad:	0f ac d0 0f          	shrd   eax,edx,0xf
100024b1:	c1 ea 0f             	shr    edx,0xf
100024b4:	89 c1                	mov    ecx,eax
100024b6:	89 d3                	mov    ebx,edx
100024b8:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
100024bb:	83 ec 04             	sub    esp,0x4
100024be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100024c1:	e8 fc ff ff ff       	call   100024c2 <checkKey(char*)+0x41>	100024c2: R_386_PC32	getChecksum(unsigned int)
100024c6:	83 c4 08             	add    esp,0x8
100024c9:	39 45 ec             	cmp    DWORD PTR [ebp-0x14],eax
100024cc:	0f 95 c0             	setne  al
100024cf:	84 c0                	test   al,al
100024d1:	74 07                	je     100024da <checkKey(char*)+0x59>
100024d3:	b8 00 00 00 00       	mov    eax,0x0
100024d8:	eb 06                	jmp    100024e0 <checkKey(char*)+0x5f>
100024da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024dd:	83 e0 07             	and    eax,0x7
100024e0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100024e3:	c9                   	leave  
100024e4:	c3                   	ret    

100024e5 <changeKeyType(char*, int)>:
100024e5:	55                   	push   ebp
100024e6:	89 e5                	mov    ebp,esp
100024e8:	83 ec 10             	sub    esp,0x10
100024eb:	83 ec 04             	sub    esp,0x4
100024ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024f1:	e8 fc ff ff ff       	call   100024f2 <changeKeyType(char*, int)+0xd>	100024f2: R_386_PC32	retrieveBits(char*)
100024f6:	83 c4 08             	add    esp,0x8
100024f9:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
100024fc:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100024ff:	83 65 f8 f8          	and    DWORD PTR [ebp-0x8],0xfffffff8
10002503:	83 65 fc ff          	and    DWORD PTR [ebp-0x4],0xffffffff
10002507:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000250a:	99                   	cdq    
1000250b:	09 45 f8             	or     DWORD PTR [ebp-0x8],eax
1000250e:	09 55 fc             	or     DWORD PTR [ebp-0x4],edx
10002511:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10002514:	50                   	push   eax
10002515:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002518:	e8 fc ff ff ff       	call   10002519 <changeKeyType(char*, int)+0x34>	10002519: R_386_PC32	createKey(char*, unsigned int)
1000251d:	83 c4 08             	add    esp,0x8
10002520:	83 ec 04             	sub    esp,0x4
10002523:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002526:	e8 fc ff ff ff       	call   10002527 <changeKeyType(char*, int)+0x42>	10002527: R_386_PC32	checkKey(char*)
1000252b:	83 c4 08             	add    esp,0x8
1000252e:	85 c0                	test   eax,eax
10002530:	0f 95 c0             	setne  al
10002533:	c9                   	leave  
10002534:	c3                   	ret    

10002535 <checkExtendedKey(char*)>:
10002535:	55                   	push   ebp
10002536:	89 e5                	mov    ebp,esp
10002538:	83 ec 20             	sub    esp,0x20
1000253b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000253e:	8a 00                	mov    al,BYTE PTR [eax]
10002540:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10002543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002546:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
10002549:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
1000254c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000254f:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10002552:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10002555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002558:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
1000255b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000255e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002561:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10002564:	88 45 f0             	mov    BYTE PTR [ebp-0x10],al
10002567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000256a:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
1000256d:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10002570:	c6 45 f2 2d          	mov    BYTE PTR [ebp-0xe],0x2d
10002574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002577:	8a 40 06             	mov    al,BYTE PTR [eax+0x6]
1000257a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000257d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002580:	8a 40 07             	mov    al,BYTE PTR [eax+0x7]
10002583:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10002586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002589:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
1000258c:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
1000258f:	c6 45 f6 2d          	mov    BYTE PTR [ebp-0xa],0x2d
10002593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002596:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10002599:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000259c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000259f:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
100025a2:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
100025a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025a8:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
100025ab:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
100025ae:	c6 45 fa 2d          	mov    BYTE PTR [ebp-0x6],0x2d
100025b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025b5:	8a 40 0f             	mov    al,BYTE PTR [eax+0xf]
100025b8:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
100025bb:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025be:	48                   	dec    eax
100025bf:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100025c2:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025c5:	3c 2f                	cmp    al,0x2f
100025c7:	75 04                	jne    100025cd <checkExtendedKey(char*)+0x98>
100025c9:	c6 45 ef 39          	mov    BYTE PTR [ebp-0x11],0x39
100025cd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d0:	48                   	dec    eax
100025d1:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
100025d4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d7:	3c 2f                	cmp    al,0x2f
100025d9:	75 04                	jne    100025df <checkExtendedKey(char*)+0xaa>
100025db:	c6 45 f5 39          	mov    BYTE PTR [ebp-0xb],0x39
100025df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025e2:	83 c0 0d             	add    eax,0xd
100025e5:	8a 10                	mov    dl,BYTE PTR [eax]
100025e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025ea:	83 c0 0c             	add    eax,0xc
100025ed:	8a 00                	mov    al,BYTE PTR [eax]
100025ef:	38 c2                	cmp    dl,al
100025f1:	74 0a                	je     100025fd <checkExtendedKey(char*)+0xc8>
100025f3:	b8 00 00 00 00       	mov    eax,0x0
100025f8:	e9 d6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100025fd:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002600:	3c 2f                	cmp    al,0x2f
10002602:	7e 07                	jle    1000260b <checkExtendedKey(char*)+0xd6>
10002604:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002607:	3c 39                	cmp    al,0x39
10002609:	7e 0a                	jle    10002615 <checkExtendedKey(char*)+0xe0>
1000260b:	b8 00 00 00 00       	mov    eax,0x0
10002610:	e9 be 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002615:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002618:	3c 2f                	cmp    al,0x2f
1000261a:	7e 07                	jle    10002623 <checkExtendedKey(char*)+0xee>
1000261c:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
1000261f:	3c 39                	cmp    al,0x39
10002621:	7e 0a                	jle    1000262d <checkExtendedKey(char*)+0xf8>
10002623:	b8 00 00 00 00       	mov    eax,0x0
10002628:	e9 a6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000262d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002630:	3c 2f                	cmp    al,0x2f
10002632:	7e 07                	jle    1000263b <checkExtendedKey(char*)+0x106>
10002634:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002637:	3c 39                	cmp    al,0x39
10002639:	7e 0a                	jle    10002645 <checkExtendedKey(char*)+0x110>
1000263b:	b8 00 00 00 00       	mov    eax,0x0
10002640:	e9 8e 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002645:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10002648:	3c 2f                	cmp    al,0x2f
1000264a:	7e 07                	jle    10002653 <checkExtendedKey(char*)+0x11e>
1000264c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000264f:	3c 39                	cmp    al,0x39
10002651:	7e 07                	jle    1000265a <checkExtendedKey(char*)+0x125>
10002653:	b8 00 00 00 00       	mov    eax,0x0
10002658:	eb 79                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000265a:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
1000265d:	3c 2f                	cmp    al,0x2f
1000265f:	7e 07                	jle    10002668 <checkExtendedKey(char*)+0x133>
10002661:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
10002664:	3c 39                	cmp    al,0x39
10002666:	7e 07                	jle    1000266f <checkExtendedKey(char*)+0x13a>
10002668:	b8 00 00 00 00       	mov    eax,0x0
1000266d:	eb 64                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000266f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002672:	3c 2f                	cmp    al,0x2f
10002674:	7e 07                	jle    1000267d <checkExtendedKey(char*)+0x148>
10002676:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002679:	3c 39                	cmp    al,0x39
1000267b:	7e 07                	jle    10002684 <checkExtendedKey(char*)+0x14f>
1000267d:	b8 00 00 00 00       	mov    eax,0x0
10002682:	eb 4f                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002684:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10002687:	3c 2f                	cmp    al,0x2f
10002689:	7e 07                	jle    10002692 <checkExtendedKey(char*)+0x15d>
1000268b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000268e:	3c 39                	cmp    al,0x39
10002690:	7e 07                	jle    10002699 <checkExtendedKey(char*)+0x164>
10002692:	b8 00 00 00 00       	mov    eax,0x0
10002697:	eb 3a                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002699:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
1000269c:	3c 2f                	cmp    al,0x2f
1000269e:	7e 07                	jle    100026a7 <checkExtendedKey(char*)+0x172>
100026a0:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
100026a3:	3c 39                	cmp    al,0x39
100026a5:	7e 07                	jle    100026ae <checkExtendedKey(char*)+0x179>
100026a7:	b8 00 00 00 00       	mov    eax,0x0
100026ac:	eb 25                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026ae:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b1:	3c 2f                	cmp    al,0x2f
100026b3:	7e 07                	jle    100026bc <checkExtendedKey(char*)+0x187>
100026b5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b8:	3c 39                	cmp    al,0x39
100026ba:	7e 07                	jle    100026c3 <checkExtendedKey(char*)+0x18e>
100026bc:	b8 00 00 00 00       	mov    eax,0x0
100026c1:	eb 10                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026c3:	83 ec 04             	sub    esp,0x4
100026c6:	8d 45 ec             	lea    eax,[ebp-0x14]
100026c9:	50                   	push   eax
100026ca:	e8 fc ff ff ff       	call   100026cb <checkExtendedKey(char*)+0x196>	100026cb: R_386_PC32	checkKey(char*)
100026cf:	83 c4 08             	add    esp,0x8
100026d2:	90                   	nop
100026d3:	c9                   	leave  
100026d4:	c3                   	ret    

100026d5 <loadTimezoneStrings()>:
100026d5:	55                   	push   ebp
100026d6:	89 e5                	mov    ebp,esp
100026d8:	53                   	push   ebx
100026d9:	83 ec 34             	sub    esp,0x34
100026dc:	83 ec 0c             	sub    esp,0xc
100026df:	68 14 01 00 00       	push   0x114
100026e4:	e8 fc ff ff ff       	call   100026e5 <loadTimezoneStrings()+0x10>	100026e5: R_386_PC32	operator new(unsigned long)
100026e9:	83 c4 10             	add    esp,0x10
100026ec:	89 c3                	mov    ebx,eax
100026ee:	a1 00 00 00 00       	mov    eax,ds:0x0	100026ef: R_386_32	kernelProcess
100026f3:	83 ec 04             	sub    esp,0x4
100026f6:	50                   	push   eax
100026f7:	68 28 a8 00 10       	push   0x1000a828	100026f8: R_386_32	.text
100026fc:	53                   	push   ebx
100026fd:	e8 fc ff ff ff       	call   100026fe <loadTimezoneStrings()+0x29>	100026fe: R_386_PC32	File::File(char const*, Process*)
10002702:	83 c4 10             	add    esp,0x10
10002705:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10002708:	83 ec 08             	sub    esp,0x8
1000270b:	6a 01                	push   0x1
1000270d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002710:	e8 fc ff ff ff       	call   10002711 <loadTimezoneStrings()+0x3c>	10002711: R_386_PC32	File::open(FileOpenMode)
10002715:	83 c4 10             	add    esp,0x10
10002718:	83 ec 04             	sub    esp,0x4
1000271b:	8d 45 d7             	lea    eax,[ebp-0x29]
1000271e:	50                   	push   eax
1000271f:	8d 45 d8             	lea    eax,[ebp-0x28]
10002722:	50                   	push   eax
10002723:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002726:	e8 fc ff ff ff       	call   10002727 <loadTimezoneStrings()+0x52>	10002727: R_386_PC32	File::stat(unsigned long long*, bool*)
1000272b:	83 c4 10             	add    esp,0x10
1000272e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002731:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002734:	83 ec 0c             	sub    esp,0xc
10002737:	50                   	push   eax
10002738:	e8 fc ff ff ff       	call   10002739 <loadTimezoneStrings()+0x64>	10002739: R_386_PC32	malloc
1000273d:	83 c4 10             	add    esp,0x10
10002740:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002743:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002746:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002749:	83 ec 04             	sub    esp,0x4
1000274c:	50                   	push   eax
1000274d:	6a 00                	push   0x0
1000274f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002752:	e8 fc ff ff ff       	call   10002753 <loadTimezoneStrings()+0x7e>	10002753: R_386_PC32	memset
10002757:	83 c4 10             	add    esp,0x10
1000275a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000275d:	8b 00                	mov    eax,DWORD PTR [eax]
1000275f:	83 c0 0c             	add    eax,0xc
10002762:	8b 08                	mov    ecx,DWORD PTR [eax]
10002764:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002767:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
1000276a:	83 ec 0c             	sub    esp,0xc
1000276d:	8d 5d d0             	lea    ebx,[ebp-0x30]
10002770:	53                   	push   ebx
10002771:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002774:	52                   	push   edx
10002775:	50                   	push   eax
10002776:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002779:	ff d1                	call   ecx
1000277b:	83 c4 20             	add    esp,0x20
1000277e:	83 ec 0c             	sub    esp,0xc
10002781:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002784:	e8 fc ff ff ff       	call   10002785 <loadTimezoneStrings()+0xb0>	10002785: R_386_PC32	File::close()
10002789:	83 c4 10             	add    esp,0x10
1000278c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10002793:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000279a:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
100027a1:	7f 39                	jg     100027dc <loadTimezoneStrings()+0x107>
100027a3:	83 ec 0c             	sub    esp,0xc
100027a6:	6a 78                	push   0x78
100027a8:	e8 fc ff ff ff       	call   100027a9 <loadTimezoneStrings()+0xd4>	100027a9: R_386_PC32	malloc
100027ad:	83 c4 10             	add    esp,0x10
100027b0:	89 c2                	mov    edx,eax
100027b2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027b5:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	100027b8: R_386_32	timezoneStrings
100027bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027bf:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100027c2: R_386_32	timezoneStrings
100027c6:	83 ec 08             	sub    esp,0x8
100027c9:	68 47 a8 00 10       	push   0x1000a847	100027ca: R_386_32	.text
100027ce:	50                   	push   eax
100027cf:	e8 fc ff ff ff       	call   100027d0 <loadTimezoneStrings()+0xfb>	100027d0: R_386_PC32	strcpy
100027d4:	83 c4 10             	add    esp,0x10
100027d7:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100027da:	eb be                	jmp    1000279a <loadTimezoneStrings()+0xc5>
100027dc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100027e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100027e6:	8d 50 01             	lea    edx,[eax+0x1]
100027e9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
100027ec:	89 c2                	mov    edx,eax
100027ee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100027f1:	01 d0                	add    eax,edx
100027f3:	8a 00                	mov    al,BYTE PTR [eax]
100027f5:	88 45 ce             	mov    BYTE PTR [ebp-0x32],al
100027f8:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
100027fc:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
100027ff:	3c 0d                	cmp    al,0xd
10002801:	0f 84 2a 01 00 00    	je     10002931 <loadTimezoneStrings()+0x25c>
10002807:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
1000280a:	3c 09                	cmp    al,0x9
1000280c:	75 3c                	jne    1000284a <loadTimezoneStrings()+0x175>
1000280e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002811:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002814: R_386_32	timezoneStrings
10002818:	83 ec 0c             	sub    esp,0xc
1000281b:	50                   	push   eax
1000281c:	e8 fc ff ff ff       	call   1000281d <loadTimezoneStrings()+0x148>	1000281d: R_386_PC32	strlen
10002821:	83 c4 10             	add    esp,0x10
10002824:	83 f8 08             	cmp    eax,0x8
10002827:	0f 87 0a 01 00 00    	ja     10002937 <loadTimezoneStrings()+0x262>
1000282d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002830:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002833: R_386_32	timezoneStrings
10002837:	83 ec 08             	sub    esp,0x8
1000283a:	68 47 a8 00 10       	push   0x1000a847	1000283b: R_386_32	.text
1000283f:	50                   	push   eax
10002840:	e8 fc ff ff ff       	call   10002841 <loadTimezoneStrings()+0x16c>	10002841: R_386_PC32	strcat
10002845:	83 c4 10             	add    esp,0x10
10002848:	eb c4                	jmp    1000280e <loadTimezoneStrings()+0x139>
1000284a:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
1000284d:	3c 0a                	cmp    al,0xa
1000284f:	75 67                	jne    100028b8 <loadTimezoneStrings()+0x1e3>
10002851:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002854:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002857: R_386_32	timezoneStrings
1000285b:	83 ec 0c             	sub    esp,0xc
1000285e:	50                   	push   eax
1000285f:	e8 fc ff ff ff       	call   10002860 <loadTimezoneStrings()+0x18b>	10002860: R_386_PC32	strlen
10002864:	83 c4 10             	add    esp,0x10
10002867:	83 f8 35             	cmp    eax,0x35
1000286a:	77 1d                	ja     10002889 <loadTimezoneStrings()+0x1b4>
1000286c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000286f:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002872: R_386_32	timezoneStrings
10002876:	83 ec 08             	sub    esp,0x8
10002879:	68 47 a8 00 10       	push   0x1000a847	1000287a: R_386_32	.text
1000287e:	50                   	push   eax
1000287f:	e8 fc ff ff ff       	call   10002880 <loadTimezoneStrings()+0x1ab>	10002880: R_386_PC32	strcat
10002884:	83 c4 10             	add    esp,0x10
10002887:	eb c8                	jmp    10002851 <loadTimezoneStrings()+0x17c>
10002889:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000288c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000288f:	99                   	cdq    
10002890:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10002893:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
10002896:	39 c8                	cmp    eax,ecx
10002898:	89 d0                	mov    eax,edx
1000289a:	19 d8                	sbb    eax,ebx
1000289c:	0f 82 9b 00 00 00    	jb     1000293d <loadTimezoneStrings()+0x268>
100028a2:	83 ec 0c             	sub    esp,0xc
100028a5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
100028a8:	e8 fc ff ff ff       	call   100028a9 <loadTimezoneStrings()+0x1d4>	100028a9: R_386_PC32	free
100028ad:	83 c4 10             	add    esp,0x10
100028b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028b3:	e9 8b 00 00 00       	jmp    10002943 <loadTimezoneStrings()+0x26e>
100028b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028bb:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028be: R_386_32	timezoneStrings
100028c2:	83 ec 0c             	sub    esp,0xc
100028c5:	50                   	push   eax
100028c6:	e8 fc ff ff ff       	call   100028c7 <loadTimezoneStrings()+0x1f2>	100028c7: R_386_PC32	strlen
100028cb:	83 c4 10             	add    esp,0x10
100028ce:	83 f8 31             	cmp    eax,0x31
100028d1:	77 1f                	ja     100028f2 <loadTimezoneStrings()+0x21d>
100028d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028d6:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028d9: R_386_32	timezoneStrings
100028dd:	83 ec 08             	sub    esp,0x8
100028e0:	8d 55 ce             	lea    edx,[ebp-0x32]
100028e3:	52                   	push   edx
100028e4:	50                   	push   eax
100028e5:	e8 fc ff ff ff       	call   100028e6 <loadTimezoneStrings()+0x211>	100028e6: R_386_PC32	strcat
100028ea:	83 c4 10             	add    esp,0x10
100028ed:	e9 f1 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
100028f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028f5:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028f8: R_386_32	timezoneStrings
100028fc:	83 ec 0c             	sub    esp,0xc
100028ff:	50                   	push   eax
10002900:	e8 fc ff ff ff       	call   10002901 <loadTimezoneStrings()+0x22c>	10002901: R_386_PC32	strlen
10002905:	83 c4 10             	add    esp,0x10
10002908:	83 f8 32             	cmp    eax,0x32
1000290b:	0f 85 d2 fe ff ff    	jne    100027e3 <loadTimezoneStrings()+0x10e>
10002911:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002914:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002917: R_386_32	timezoneStrings
1000291b:	83 ec 08             	sub    esp,0x8
1000291e:	68 49 a8 00 10       	push   0x1000a849	1000291f: R_386_32	.text
10002923:	50                   	push   eax
10002924:	e8 fc ff ff ff       	call   10002925 <loadTimezoneStrings()+0x250>	10002925: R_386_PC32	strcat
10002929:	83 c4 10             	add    esp,0x10
1000292c:	e9 b2 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002931:	90                   	nop
10002932:	e9 ac fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002937:	90                   	nop
10002938:	e9 a6 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
1000293d:	90                   	nop
1000293e:	e9 a0 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002943:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002946:	c9                   	leave  
10002947:	c3                   	ret    

10002948 <_bcrypt_rand>:
10002948:	55                   	push   ebp
10002949:	89 e5                	mov    ebp,esp
1000294b:	83 ec 08             	sub    esp,0x8
1000294e:	e8 fc ff ff ff       	call   1000294f <_bcrypt_rand+0x7>	1000294f: R_386_PC32	KeRand()
10002953:	c9                   	leave  
10002954:	c3                   	ret    

10002955 <firstRun(bool)>:
10002955:	55                   	push   ebp
10002956:	89 e5                	mov    ebp,esp
10002958:	57                   	push   edi
10002959:	56                   	push   esi
1000295a:	53                   	push   ebx
1000295b:	81 ec 5c 01 00 00    	sub    esp,0x15c
10002961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002964:	88 85 a4 fe ff ff    	mov    BYTE PTR [ebp-0x15c],al
1000296a:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
10002970:	83 f0 01             	xor    eax,0x1
10002973:	a2 00 00 00 00       	mov    ds:0x0,al	10002974: R_386_32	showSidebar
10002978:	a0 00 00 00 00       	mov    al,ds:0x0	10002979: R_386_32	createNewUserMode
1000297d:	84 c0                	test   al,al
1000297f:	74 4f                	je     100029d0 <firstRun(bool)+0x7b>
10002981:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002983: R_386_32	showSidebar
10002988:	68 bf a6 00 10       	push   0x1000a6bf	10002989: R_386_32	.text
1000298d:	68 00 00 00 00       	push   0x0	1000298e: R_386_32	currName
10002992:	e8 fc ff ff ff       	call   10002993 <firstRun(bool)+0x3e>	10002993: R_386_PC32	strcpy
10002997:	83 c4 08             	add    esp,0x8
1000299a:	68 bf a6 00 10       	push   0x1000a6bf	1000299b: R_386_32	.text
1000299f:	68 00 00 00 00       	push   0x0	100029a0: R_386_32	currComp
100029a4:	e8 fc ff ff ff       	call   100029a5 <firstRun(bool)+0x50>	100029a5: R_386_PC32	strcpy
100029a9:	83 c4 08             	add    esp,0x8
100029ac:	68 bf a6 00 10       	push   0x1000a6bf	100029ad: R_386_32	.text
100029b1:	68 00 00 00 00       	push   0x0	100029b2: R_386_32	passwbufA
100029b6:	e8 fc ff ff ff       	call   100029b7 <firstRun(bool)+0x62>	100029b7: R_386_PC32	strcpy
100029bb:	83 c4 08             	add    esp,0x8
100029be:	68 bf a6 00 10       	push   0x1000a6bf	100029bf: R_386_32	.text
100029c3:	68 00 00 00 00       	push   0x0	100029c4: R_386_32	passwbufB
100029c8:	e8 fc ff ff ff       	call   100029c9 <firstRun(bool)+0x74>	100029c9: R_386_PC32	strcpy
100029cd:	83 c4 08             	add    esp,0x8
100029d0:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100029d2: R_386_32	guiKeyboardHandler
	100029d6: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
100029da:	83 ec 0c             	sub    esp,0xc
100029dd:	68 50 a8 00 10       	push   0x1000a850	100029de: R_386_32	.text
100029e2:	e8 fc ff ff ff       	call   100029e3 <firstRun(bool)+0x8e>	100029e3: R_386_PC32	KeSetBootMessage(char const*)
100029e7:	83 c4 10             	add    esp,0x10
100029ea:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100029ec: R_386_32	VgaText::hiddenOut
100029f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100029f2: R_386_32	activeTerminal
100029f6:	83 ec 08             	sub    esp,0x8
100029f9:	68 79 a8 00 10       	push   0x1000a879	100029fa: R_386_32	.text
100029fe:	50                   	push   eax
100029ff:	e8 fc ff ff ff       	call   10002a00 <firstRun(bool)+0xab>	10002a00: R_386_PC32	VgaText::puts(char const*)
10002a04:	83 c4 10             	add    esp,0x10
10002a07:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a08: R_386_32	kernelProcess
10002a0c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
10002a12:	83 ec 08             	sub    esp,0x8
10002a15:	68 79 a8 00 10       	push   0x1000a879	10002a16: R_386_32	.text
10002a1a:	50                   	push   eax
10002a1b:	e8 fc ff ff ff       	call   10002a1c <firstRun(bool)+0xc7>	10002a1c: R_386_PC32	VgaText::puts(char const*)
10002a20:	83 c4 10             	add    esp,0x10
10002a23:	83 ec 0c             	sub    esp,0xc
10002a26:	68 84 01 00 00       	push   0x184
10002a2b:	e8 fc ff ff ff       	call   10002a2c <firstRun(bool)+0xd7>	10002a2c: R_386_PC32	operator new(unsigned long)
10002a30:	83 c4 10             	add    esp,0x10
10002a33:	89 c3                	mov    ebx,eax
10002a35:	83 ec 08             	sub    esp,0x8
10002a38:	68 80 a8 00 10       	push   0x1000a880	10002a39: R_386_32	.text
10002a3d:	53                   	push   ebx
10002a3e:	e8 fc ff ff ff       	call   10002a3f <firstRun(bool)+0xea>	10002a3f: R_386_PC32	VgaText::VgaText(char const*)
10002a43:	83 c4 10             	add    esp,0x10
10002a46:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10002a48: R_386_32	term
10002a4c:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a4d: R_386_32	term
10002a51:	83 ec 0c             	sub    esp,0xc
10002a54:	50                   	push   eax
10002a55:	e8 fc ff ff ff       	call   10002a56 <firstRun(bool)+0x101>	10002a56: R_386_PC32	setActiveTerminal(VgaText*)
10002a5a:	83 c4 10             	add    esp,0x10
10002a5d:	e8 fc ff ff ff       	call   10002a5e <firstRun(bool)+0x109>	10002a5e: R_386_PC32	drawBootScreen()
10002a62:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10002a69:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10002a70:	74 17                	je     10002a89 <firstRun(bool)+0x134>
10002a72:	83 ec 08             	sub    esp,0x8
10002a75:	68 85 a8 00 10       	push   0x1000a885	10002a76: R_386_32	.text
10002a7a:	68 00 00 00 00       	push   0x0	10002a7b: R_386_32	pkeybuf
10002a7f:	e8 fc ff ff ff       	call   10002a80 <firstRun(bool)+0x12b>	10002a80: R_386_PC32	strcpy
10002a84:	83 c4 10             	add    esp,0x10
10002a87:	eb 15                	jmp    10002a9e <firstRun(bool)+0x149>
10002a89:	83 ec 08             	sub    esp,0x8
10002a8c:	68 96 a8 00 10       	push   0x1000a896	10002a8d: R_386_32	.text
10002a91:	68 00 00 00 00       	push   0x0	10002a92: R_386_32	pkeybuf
10002a96:	e8 fc ff ff ff       	call   10002a97 <firstRun(bool)+0x142>	10002a97: R_386_PC32	strcpy
10002a9b:	83 c4 10             	add    esp,0x10
10002a9e:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
10002aa4:	83 f0 01             	xor    eax,0x1
10002aa7:	84 c0                	test   al,al
10002aa9:	0f 84 f5 1d 00 00    	je     100048a4 <firstRun(bool)+0x1f4f>
10002aaf:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10002ab6:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002ab8: R_386_32	tzsel
10002ac0:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002ac2: R_386_32	modesel
10002aca:	eb 01                	jmp    10002acd <firstRun(bool)+0x178>
10002acc:	90                   	nop
10002acd:	e8 fc ff ff ff       	call   10002ace <firstRun(bool)+0x179>	10002ace: R_386_PC32	drawBootScreen()
10002ad2:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10002ad9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002adb: R_386_32	installKey
10002ae0:	a0 00 00 00 00       	mov    al,ds:0x0	10002ae1: R_386_32	createNewUserMode
10002ae5:	84 c0                	test   al,al
10002ae7:	74 07                	je     10002af0 <firstRun(bool)+0x19b>
10002ae9:	b8 a7 a8 00 10       	mov    eax,0x1000a8a7	10002aea: R_386_32	.text
10002aee:	eb 05                	jmp    10002af5 <firstRun(bool)+0x1a0>
10002af0:	b8 b7 a8 00 10       	mov    eax,0x1000a8b7	10002af1: R_386_32	.text
10002af5:	83 ec 0c             	sub    esp,0xc
10002af8:	50                   	push   eax
10002af9:	6a 12                	push   0x12
10002afb:	6a 32                	push   0x32
10002afd:	6a 03                	push   0x3
10002aff:	6a 16                	push   0x16
10002b01:	e8 fc ff ff ff       	call   10002b02 <firstRun(bool)+0x1ad>	10002b02: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10002b06:	83 c4 20             	add    esp,0x20
10002b09:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b0a: R_386_32	term
10002b0e:	83 ec 04             	sub    esp,0x4
10002b11:	6a 06                	push   0x6
10002b13:	6a 18                	push   0x18
10002b15:	50                   	push   eax
10002b16:	e8 fc ff ff ff       	call   10002b17 <firstRun(bool)+0x1c2>	10002b17: R_386_PC32	VgaText::setCursor(int, int)
10002b1b:	83 c4 10             	add    esp,0x10
10002b1e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b1f: R_386_32	term
10002b23:	83 ec 08             	sub    esp,0x8
10002b26:	68 c4 a8 00 10       	push   0x1000a8c4	10002b27: R_386_32	.text
10002b2b:	50                   	push   eax
10002b2c:	e8 fc ff ff ff       	call   10002b2d <firstRun(bool)+0x1d8>	10002b2d: R_386_PC32	VgaText::puts(char const*)
10002b31:	83 c4 10             	add    esp,0x10
10002b34:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b35: R_386_32	term
10002b39:	83 ec 04             	sub    esp,0x4
10002b3c:	6a 07                	push   0x7
10002b3e:	6a 18                	push   0x18
10002b40:	50                   	push   eax
10002b41:	e8 fc ff ff ff       	call   10002b42 <firstRun(bool)+0x1ed>	10002b42: R_386_PC32	VgaText::setCursor(int, int)
10002b46:	83 c4 10             	add    esp,0x10
10002b49:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b4a: R_386_32	term
10002b4e:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10002b50: R_386_32	createNewUserMode
10002b54:	84 d2                	test   dl,dl
10002b56:	74 07                	je     10002b5f <firstRun(bool)+0x20a>
10002b58:	ba f4 a8 00 10       	mov    edx,0x1000a8f4	10002b59: R_386_32	.text
10002b5d:	eb 05                	jmp    10002b64 <firstRun(bool)+0x20f>
10002b5f:	ba 16 a9 00 10       	mov    edx,0x1000a916	10002b60: R_386_32	.text
10002b64:	83 ec 08             	sub    esp,0x8
10002b67:	52                   	push   edx
10002b68:	50                   	push   eax
10002b69:	e8 fc ff ff ff       	call   10002b6a <firstRun(bool)+0x215>	10002b6a: R_386_PC32	VgaText::puts(char const*)
10002b6e:	83 c4 10             	add    esp,0x10
10002b71:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b72: R_386_32	term
10002b76:	83 ec 04             	sub    esp,0x4
10002b79:	6a 09                	push   0x9
10002b7b:	6a 18                	push   0x18
10002b7d:	50                   	push   eax
10002b7e:	e8 fc ff ff ff       	call   10002b7f <firstRun(bool)+0x22a>	10002b7f: R_386_PC32	VgaText::setCursor(int, int)
10002b83:	83 c4 10             	add    esp,0x10
10002b86:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b87: R_386_32	term
10002b8b:	83 ec 08             	sub    esp,0x8
10002b8e:	68 26 a9 00 10       	push   0x1000a926	10002b8f: R_386_32	.text
10002b93:	50                   	push   eax
10002b94:	e8 fc ff ff ff       	call   10002b95 <firstRun(bool)+0x240>	10002b95: R_386_PC32	VgaText::puts(char const*)
10002b99:	83 c4 10             	add    esp,0x10
10002b9c:	a0 00 00 00 00       	mov    al,ds:0x0	10002b9d: R_386_32	createNewUserMode
10002ba1:	83 f0 01             	xor    eax,0x1
10002ba4:	84 c0                	test   al,al
10002ba6:	74 2b                	je     10002bd3 <firstRun(bool)+0x27e>
10002ba8:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ba9: R_386_32	term
10002bad:	83 ec 04             	sub    esp,0x4
10002bb0:	6a 0b                	push   0xb
10002bb2:	6a 18                	push   0x18
10002bb4:	50                   	push   eax
10002bb5:	e8 fc ff ff ff       	call   10002bb6 <firstRun(bool)+0x261>	10002bb6: R_386_PC32	VgaText::setCursor(int, int)
10002bba:	83 c4 10             	add    esp,0x10
10002bbd:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bbe: R_386_32	term
10002bc2:	83 ec 08             	sub    esp,0x8
10002bc5:	68 2b a9 00 10       	push   0x1000a92b	10002bc6: R_386_32	.text
10002bca:	50                   	push   eax
10002bcb:	e8 fc ff ff ff       	call   10002bcc <firstRun(bool)+0x277>	10002bcc: R_386_PC32	VgaText::puts(char const*)
10002bd0:	83 c4 10             	add    esp,0x10
10002bd3:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bd4: R_386_32	term
10002bd8:	83 ec 04             	sub    esp,0x4
10002bdb:	6a 0d                	push   0xd
10002bdd:	6a 18                	push   0x18
10002bdf:	50                   	push   eax
10002be0:	e8 fc ff ff ff       	call   10002be1 <firstRun(bool)+0x28c>	10002be1: R_386_PC32	VgaText::setCursor(int, int)
10002be5:	83 c4 10             	add    esp,0x10
10002be8:	a1 00 00 00 00       	mov    eax,ds:0x0	10002be9: R_386_32	term
10002bed:	83 ec 08             	sub    esp,0x8
10002bf0:	68 33 a9 00 10       	push   0x1000a933	10002bf1: R_386_32	.text
10002bf5:	50                   	push   eax
10002bf6:	e8 fc ff ff ff       	call   10002bf7 <firstRun(bool)+0x2a2>	10002bf7: R_386_PC32	VgaText::puts(char const*)
10002bfb:	83 c4 10             	add    esp,0x10
10002bfe:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bff: R_386_32	term
10002c03:	83 ec 04             	sub    esp,0x4
10002c06:	6a 0f                	push   0xf
10002c08:	6a 18                	push   0x18
10002c0a:	50                   	push   eax
10002c0b:	e8 fc ff ff ff       	call   10002c0c <firstRun(bool)+0x2b7>	10002c0c: R_386_PC32	VgaText::setCursor(int, int)
10002c10:	83 c4 10             	add    esp,0x10
10002c13:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c14: R_386_32	term
10002c18:	83 ec 08             	sub    esp,0x8
10002c1b:	68 3c a9 00 10       	push   0x1000a93c	10002c1c: R_386_32	.text
10002c20:	50                   	push   eax
10002c21:	e8 fc ff ff ff       	call   10002c22 <firstRun(bool)+0x2cd>	10002c22: R_386_PC32	VgaText::puts(char const*)
10002c26:	83 c4 10             	add    esp,0x10
10002c29:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c2a: R_386_32	term
10002c2e:	83 ec 04             	sub    esp,0x4
10002c31:	6a 10                	push   0x10
10002c33:	6a 18                	push   0x18
10002c35:	50                   	push   eax
10002c36:	e8 fc ff ff ff       	call   10002c37 <firstRun(bool)+0x2e2>	10002c37: R_386_PC32	VgaText::setCursor(int, int)
10002c3b:	83 c4 10             	add    esp,0x10
10002c3e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c3f: R_386_32	term
10002c43:	83 ec 08             	sub    esp,0x8
10002c46:	68 44 a9 00 10       	push   0x1000a944	10002c47: R_386_32	.text
10002c4b:	50                   	push   eax
10002c4c:	e8 fc ff ff ff       	call   10002c4d <firstRun(bool)+0x2f8>	10002c4d: R_386_PC32	VgaText::puts(char const*)
10002c51:	83 c4 10             	add    esp,0x10
10002c54:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c55: R_386_32	term
10002c59:	83 ec 04             	sub    esp,0x4
10002c5c:	6a 09                	push   0x9
10002c5e:	6a 21                	push   0x21
10002c60:	50                   	push   eax
10002c61:	e8 fc ff ff ff       	call   10002c62 <firstRun(bool)+0x30d>	10002c62: R_386_PC32	VgaText::setCursor(int, int)
10002c66:	83 c4 10             	add    esp,0x10
10002c69:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c6a: R_386_32	term
10002c6e:	6a 07                	push   0x7
10002c70:	6a 00                	push   0x0
10002c72:	68 50 a9 00 10       	push   0x1000a950	10002c73: R_386_32	.text
10002c77:	50                   	push   eax
10002c78:	e8 fc ff ff ff       	call   10002c79 <firstRun(bool)+0x324>	10002c79: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c7d:	83 c4 10             	add    esp,0x10
10002c80:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c81: R_386_32	term
10002c85:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10002c89:	75 07                	jne    10002c92 <firstRun(bool)+0x33d>
10002c8b:	ba 75 a9 00 10       	mov    edx,0x1000a975	10002c8c: R_386_32	.text
10002c90:	eb 05                	jmp    10002c97 <firstRun(bool)+0x342>
10002c92:	ba 78 a9 00 10       	mov    edx,0x1000a978	10002c93: R_386_32	.text
10002c97:	6a 0f                	push   0xf
10002c99:	6a 00                	push   0x0
10002c9b:	52                   	push   edx
10002c9c:	50                   	push   eax
10002c9d:	e8 fc ff ff ff       	call   10002c9e <firstRun(bool)+0x349>	10002c9e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ca2:	83 c4 10             	add    esp,0x10
10002ca5:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ca6: R_386_32	term
10002caa:	83 ec 08             	sub    esp,0x8
10002cad:	6a 21                	push   0x21
10002caf:	50                   	push   eax
10002cb0:	e8 fc ff ff ff       	call   10002cb1 <firstRun(bool)+0x35c>	10002cb1: R_386_PC32	VgaText::setCursorX(int)
10002cb5:	83 c4 10             	add    esp,0x10
10002cb8:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cb9: R_386_32	term
10002cbd:	6a 07                	push   0x7
10002cbf:	6a 00                	push   0x0
10002cc1:	68 00 00 00 00       	push   0x0	10002cc2: R_386_32	currName
10002cc6:	50                   	push   eax
10002cc7:	e8 fc ff ff ff       	call   10002cc8 <firstRun(bool)+0x373>	10002cc8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ccc:	83 c4 10             	add    esp,0x10
10002ccf:	a0 00 00 00 00       	mov    al,ds:0x0	10002cd0: R_386_32	createNewUserMode
10002cd4:	83 f0 01             	xor    eax,0x1
10002cd7:	84 c0                	test   al,al
10002cd9:	74 7b                	je     10002d56 <firstRun(bool)+0x401>
10002cdb:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cdc: R_386_32	term
10002ce0:	83 ec 04             	sub    esp,0x4
10002ce3:	6a 0b                	push   0xb
10002ce5:	6a 21                	push   0x21
10002ce7:	50                   	push   eax
10002ce8:	e8 fc ff ff ff       	call   10002ce9 <firstRun(bool)+0x394>	10002ce9: R_386_PC32	VgaText::setCursor(int, int)
10002ced:	83 c4 10             	add    esp,0x10
10002cf0:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cf1: R_386_32	term
10002cf5:	6a 07                	push   0x7
10002cf7:	6a 00                	push   0x0
10002cf9:	68 50 a9 00 10       	push   0x1000a950	10002cfa: R_386_32	.text
10002cfe:	50                   	push   eax
10002cff:	e8 fc ff ff ff       	call   10002d00 <firstRun(bool)+0x3ab>	10002d00: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d04:	83 c4 10             	add    esp,0x10
10002d07:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d08: R_386_32	term
10002d0c:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10002d10:	75 07                	jne    10002d19 <firstRun(bool)+0x3c4>
10002d12:	ba 75 a9 00 10       	mov    edx,0x1000a975	10002d13: R_386_32	.text
10002d17:	eb 05                	jmp    10002d1e <firstRun(bool)+0x3c9>
10002d19:	ba 78 a9 00 10       	mov    edx,0x1000a978	10002d1a: R_386_32	.text
10002d1e:	6a 0f                	push   0xf
10002d20:	6a 00                	push   0x0
10002d22:	52                   	push   edx
10002d23:	50                   	push   eax
10002d24:	e8 fc ff ff ff       	call   10002d25 <firstRun(bool)+0x3d0>	10002d25: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d29:	83 c4 10             	add    esp,0x10
10002d2c:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d2d: R_386_32	term
10002d31:	83 ec 08             	sub    esp,0x8
10002d34:	6a 21                	push   0x21
10002d36:	50                   	push   eax
10002d37:	e8 fc ff ff ff       	call   10002d38 <firstRun(bool)+0x3e3>	10002d38: R_386_PC32	VgaText::setCursorX(int)
10002d3c:	83 c4 10             	add    esp,0x10
10002d3f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d40: R_386_32	term
10002d44:	6a 07                	push   0x7
10002d46:	6a 00                	push   0x0
10002d48:	68 00 00 00 00       	push   0x0	10002d49: R_386_32	currComp
10002d4d:	50                   	push   eax
10002d4e:	e8 fc ff ff ff       	call   10002d4f <firstRun(bool)+0x3fa>	10002d4f: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d53:	83 c4 10             	add    esp,0x10
10002d56:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d57: R_386_32	term
10002d5b:	83 ec 04             	sub    esp,0x4
10002d5e:	6a 0d                	push   0xd
10002d60:	6a 21                	push   0x21
10002d62:	50                   	push   eax
10002d63:	e8 fc ff ff ff       	call   10002d64 <firstRun(bool)+0x40f>	10002d64: R_386_PC32	VgaText::setCursor(int, int)
10002d68:	83 c4 10             	add    esp,0x10
10002d6b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d6c: R_386_32	term
10002d70:	6a 07                	push   0x7
10002d72:	6a 00                	push   0x0
10002d74:	68 50 a9 00 10       	push   0x1000a950	10002d75: R_386_32	.text
10002d79:	50                   	push   eax
10002d7a:	e8 fc ff ff ff       	call   10002d7b <firstRun(bool)+0x426>	10002d7b: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d7f:	83 c4 10             	add    esp,0x10
10002d82:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d83: R_386_32	term
10002d87:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10002d8b:	75 07                	jne    10002d94 <firstRun(bool)+0x43f>
10002d8d:	ba 75 a9 00 10       	mov    edx,0x1000a975	10002d8e: R_386_32	.text
10002d92:	eb 05                	jmp    10002d99 <firstRun(bool)+0x444>
10002d94:	ba 78 a9 00 10       	mov    edx,0x1000a978	10002d95: R_386_32	.text
10002d99:	6a 0f                	push   0xf
10002d9b:	6a 00                	push   0x0
10002d9d:	52                   	push   edx
10002d9e:	50                   	push   eax
10002d9f:	e8 fc ff ff ff       	call   10002da0 <firstRun(bool)+0x44b>	10002da0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002da4:	83 c4 10             	add    esp,0x10
10002da7:	a1 00 00 00 00       	mov    eax,ds:0x0	10002da8: R_386_32	term
10002dac:	83 ec 08             	sub    esp,0x8
10002daf:	6a 21                	push   0x21
10002db1:	50                   	push   eax
10002db2:	e8 fc ff ff ff       	call   10002db3 <firstRun(bool)+0x45e>	10002db3: R_386_PC32	VgaText::setCursorX(int)
10002db7:	83 c4 10             	add    esp,0x10
10002dba:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10002dc1:	83 ec 0c             	sub    esp,0xc
10002dc4:	68 00 00 00 00       	push   0x0	10002dc5: R_386_32	passwbufA
10002dc9:	e8 fc ff ff ff       	call   10002dca <firstRun(bool)+0x475>	10002dca: R_386_PC32	strlen
10002dce:	83 c4 10             	add    esp,0x10
10002dd1:	89 c2                	mov    edx,eax
10002dd3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002dd6:	39 c2                	cmp    edx,eax
10002dd8:	76 1c                	jbe    10002df6 <firstRun(bool)+0x4a1>
10002dda:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ddb: R_386_32	term
10002ddf:	6a 07                	push   0x7
10002de1:	6a 00                	push   0x0
10002de3:	68 7c a9 00 10       	push   0x1000a97c	10002de4: R_386_32	.text
10002de8:	50                   	push   eax
10002de9:	e8 fc ff ff ff       	call   10002dea <firstRun(bool)+0x495>	10002dea: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002dee:	83 c4 10             	add    esp,0x10
10002df1:	ff 45 d8             	inc    DWORD PTR [ebp-0x28]
10002df4:	eb cb                	jmp    10002dc1 <firstRun(bool)+0x46c>
10002df6:	a1 00 00 00 00       	mov    eax,ds:0x0	10002df7: R_386_32	term
10002dfb:	83 ec 04             	sub    esp,0x4
10002dfe:	6a 0f                	push   0xf
10002e00:	6a 21                	push   0x21
10002e02:	50                   	push   eax
10002e03:	e8 fc ff ff ff       	call   10002e04 <firstRun(bool)+0x4af>	10002e04: R_386_PC32	VgaText::setCursor(int, int)
10002e08:	83 c4 10             	add    esp,0x10
10002e0b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e0c: R_386_32	term
10002e10:	6a 07                	push   0x7
10002e12:	6a 00                	push   0x0
10002e14:	68 50 a9 00 10       	push   0x1000a950	10002e15: R_386_32	.text
10002e19:	50                   	push   eax
10002e1a:	e8 fc ff ff ff       	call   10002e1b <firstRun(bool)+0x4c6>	10002e1b: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e1f:	83 c4 10             	add    esp,0x10
10002e22:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e23: R_386_32	term
10002e27:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10002e2b:	75 07                	jne    10002e34 <firstRun(bool)+0x4df>
10002e2d:	ba 75 a9 00 10       	mov    edx,0x1000a975	10002e2e: R_386_32	.text
10002e32:	eb 05                	jmp    10002e39 <firstRun(bool)+0x4e4>
10002e34:	ba 78 a9 00 10       	mov    edx,0x1000a978	10002e35: R_386_32	.text
10002e39:	6a 0f                	push   0xf
10002e3b:	6a 00                	push   0x0
10002e3d:	52                   	push   edx
10002e3e:	50                   	push   eax
10002e3f:	e8 fc ff ff ff       	call   10002e40 <firstRun(bool)+0x4eb>	10002e40: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e44:	83 c4 10             	add    esp,0x10
10002e47:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e48: R_386_32	term
10002e4c:	83 ec 08             	sub    esp,0x8
10002e4f:	6a 21                	push   0x21
10002e51:	50                   	push   eax
10002e52:	e8 fc ff ff ff       	call   10002e53 <firstRun(bool)+0x4fe>	10002e53: R_386_PC32	VgaText::setCursorX(int)
10002e57:	83 c4 10             	add    esp,0x10
10002e5a:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10002e61:	83 ec 0c             	sub    esp,0xc
10002e64:	68 00 00 00 00       	push   0x0	10002e65: R_386_32	passwbufB
10002e69:	e8 fc ff ff ff       	call   10002e6a <firstRun(bool)+0x515>	10002e6a: R_386_PC32	strlen
10002e6e:	83 c4 10             	add    esp,0x10
10002e71:	89 c2                	mov    edx,eax
10002e73:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10002e76:	39 c2                	cmp    edx,eax
10002e78:	76 1c                	jbe    10002e96 <firstRun(bool)+0x541>
10002e7a:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e7b: R_386_32	term
10002e7f:	6a 07                	push   0x7
10002e81:	6a 00                	push   0x0
10002e83:	68 7c a9 00 10       	push   0x1000a97c	10002e84: R_386_32	.text
10002e88:	50                   	push   eax
10002e89:	e8 fc ff ff ff       	call   10002e8a <firstRun(bool)+0x535>	10002e8a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e8e:	83 c4 10             	add    esp,0x10
10002e91:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10002e94:	eb cb                	jmp    10002e61 <firstRun(bool)+0x50c>
10002e96:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e97: R_386_32	term
10002e9b:	83 ec 04             	sub    esp,0x4
10002e9e:	6a 14                	push   0x14
10002ea0:	6a 18                	push   0x18
10002ea2:	50                   	push   eax
10002ea3:	e8 fc ff ff ff       	call   10002ea4 <firstRun(bool)+0x54f>	10002ea4: R_386_PC32	VgaText::setCursor(int, int)
10002ea8:	83 c4 10             	add    esp,0x10
10002eab:	a1 00 00 00 00       	mov    eax,ds:0x0	10002eac: R_386_32	term
10002eb0:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002eb4:	75 07                	jne    10002ebd <firstRun(bool)+0x568>
10002eb6:	ba 7e a9 00 10       	mov    edx,0x1000a97e	10002eb7: R_386_32	.text
10002ebb:	eb 05                	jmp    10002ec2 <firstRun(bool)+0x56d>
10002ebd:	ba 94 a9 00 10       	mov    edx,0x1000a994	10002ebe: R_386_32	.text
10002ec2:	6a 0f                	push   0xf
10002ec4:	6a 08                	push   0x8
10002ec6:	52                   	push   edx
10002ec7:	50                   	push   eax
10002ec8:	e8 fc ff ff ff       	call   10002ec9 <firstRun(bool)+0x574>	10002ec9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ecd:	83 c4 10             	add    esp,0x10
10002ed0:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ed1: R_386_32	term
10002ed5:	83 ec 04             	sub    esp,0x4
10002ed8:	6a 14                	push   0x14
10002eda:	6a 3c                	push   0x3c
10002edc:	50                   	push   eax
10002edd:	e8 fc ff ff ff       	call   10002ede <firstRun(bool)+0x589>	10002ede: R_386_PC32	VgaText::setCursor(int, int)
10002ee2:	83 c4 10             	add    esp,0x10
10002ee5:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002ee9:	74 19                	je     10002f04 <firstRun(bool)+0x5af>
10002eeb:	a1 00 00 00 00       	mov    eax,ds:0x0	10002eec: R_386_32	term
10002ef0:	6a 08                	push   0x8
10002ef2:	6a 0f                	push   0xf
10002ef4:	68 ab a9 00 10       	push   0x1000a9ab	10002ef5: R_386_32	.text
10002ef9:	50                   	push   eax
10002efa:	e8 fc ff ff ff       	call   10002efb <firstRun(bool)+0x5a6>	10002efb: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002eff:	83 c4 10             	add    esp,0x10
10002f02:	eb 17                	jmp    10002f1b <firstRun(bool)+0x5c6>
10002f04:	a1 00 00 00 00       	mov    eax,ds:0x0	10002f05: R_386_32	term
10002f09:	6a 01                	push   0x1
10002f0b:	6a 0f                	push   0xf
10002f0d:	68 ab a9 00 10       	push   0x1000a9ab	10002f0e: R_386_32	.text
10002f12:	50                   	push   eax
10002f13:	e8 fc ff ff ff       	call   10002f14 <firstRun(bool)+0x5bf>	10002f14: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002f18:	83 c4 10             	add    esp,0x10
10002f1b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002f1c: R_386_32	term
10002f20:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002f24:	75 07                	jne    10002f2d <firstRun(bool)+0x5d8>
10002f26:	ba b4 a9 00 10       	mov    edx,0x1000a9b4	10002f27: R_386_32	.text
10002f2b:	eb 05                	jmp    10002f32 <firstRun(bool)+0x5dd>
10002f2d:	ba 78 a9 00 10       	mov    edx,0x1000a978	10002f2e: R_386_32	.text
10002f32:	6a 0f                	push   0xf
10002f34:	6a 00                	push   0x0
10002f36:	52                   	push   edx
10002f37:	50                   	push   eax
10002f38:	e8 fc ff ff ff       	call   10002f39 <firstRun(bool)+0x5e4>	10002f39: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002f3d:	83 c4 10             	add    esp,0x10
10002f40:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10002f44:	75 28                	jne    10002f6e <firstRun(bool)+0x619>
10002f46:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f48: R_386_32	term
10002f4c:	83 ec 0c             	sub    esp,0xc
10002f4f:	68 00 00 00 00       	push   0x0	10002f50: R_386_32	currName
10002f54:	e8 fc ff ff ff       	call   10002f55 <firstRun(bool)+0x600>	10002f55: R_386_PC32	strlen
10002f59:	83 c4 10             	add    esp,0x10
10002f5c:	83 c0 21             	add    eax,0x21
10002f5f:	83 ec 04             	sub    esp,0x4
10002f62:	6a 09                	push   0x9
10002f64:	50                   	push   eax
10002f65:	53                   	push   ebx
10002f66:	e8 fc ff ff ff       	call   10002f67 <firstRun(bool)+0x612>	10002f67: R_386_PC32	VgaText::setCursor(int, int)
10002f6b:	83 c4 10             	add    esp,0x10
10002f6e:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10002f72:	75 28                	jne    10002f9c <firstRun(bool)+0x647>
10002f74:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f76: R_386_32	term
10002f7a:	83 ec 0c             	sub    esp,0xc
10002f7d:	68 00 00 00 00       	push   0x0	10002f7e: R_386_32	currComp
10002f82:	e8 fc ff ff ff       	call   10002f83 <firstRun(bool)+0x62e>	10002f83: R_386_PC32	strlen
10002f87:	83 c4 10             	add    esp,0x10
10002f8a:	83 c0 21             	add    eax,0x21
10002f8d:	83 ec 04             	sub    esp,0x4
10002f90:	6a 0b                	push   0xb
10002f92:	50                   	push   eax
10002f93:	53                   	push   ebx
10002f94:	e8 fc ff ff ff       	call   10002f95 <firstRun(bool)+0x640>	10002f95: R_386_PC32	VgaText::setCursor(int, int)
10002f99:	83 c4 10             	add    esp,0x10
10002f9c:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10002fa0:	75 28                	jne    10002fca <firstRun(bool)+0x675>
10002fa2:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002fa4: R_386_32	term
10002fa8:	83 ec 0c             	sub    esp,0xc
10002fab:	68 00 00 00 00       	push   0x0	10002fac: R_386_32	passwbufA
10002fb0:	e8 fc ff ff ff       	call   10002fb1 <firstRun(bool)+0x65c>	10002fb1: R_386_PC32	strlen
10002fb5:	83 c4 10             	add    esp,0x10
10002fb8:	83 c0 21             	add    eax,0x21
10002fbb:	83 ec 04             	sub    esp,0x4
10002fbe:	6a 0d                	push   0xd
10002fc0:	50                   	push   eax
10002fc1:	53                   	push   ebx
10002fc2:	e8 fc ff ff ff       	call   10002fc3 <firstRun(bool)+0x66e>	10002fc3: R_386_PC32	VgaText::setCursor(int, int)
10002fc7:	83 c4 10             	add    esp,0x10
10002fca:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10002fce:	75 28                	jne    10002ff8 <firstRun(bool)+0x6a3>
10002fd0:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002fd2: R_386_32	term
10002fd6:	83 ec 0c             	sub    esp,0xc
10002fd9:	68 00 00 00 00       	push   0x0	10002fda: R_386_32	passwbufB
10002fde:	e8 fc ff ff ff       	call   10002fdf <firstRun(bool)+0x68a>	10002fdf: R_386_PC32	strlen
10002fe3:	83 c4 10             	add    esp,0x10
10002fe6:	83 c0 21             	add    eax,0x21
10002fe9:	83 ec 04             	sub    esp,0x4
10002fec:	6a 0f                	push   0xf
10002fee:	50                   	push   eax
10002fef:	53                   	push   ebx
10002ff0:	e8 fc ff ff ff       	call   10002ff1 <firstRun(bool)+0x69c>	10002ff1: R_386_PC32	VgaText::setCursor(int, int)
10002ff5:	83 c4 10             	add    esp,0x10
10002ff8:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002ffc:	75 15                	jne    10003013 <firstRun(bool)+0x6be>
10002ffe:	a1 00 00 00 00       	mov    eax,ds:0x0	10002fff: R_386_32	term
10003003:	83 ec 04             	sub    esp,0x4
10003006:	6a 02                	push   0x2
10003008:	6a 00                	push   0x0
1000300a:	50                   	push   eax
1000300b:	e8 fc ff ff ff       	call   1000300c <firstRun(bool)+0x6b7>	1000300c: R_386_PC32	VgaText::setCursor(int, int)
10003010:	83 c4 10             	add    esp,0x10
10003013:	a0 00 00 00 00       	mov    al,ds:0x0	10003014: R_386_32	installKey
10003018:	84 c0                	test   al,al
1000301a:	0f 94 c0             	sete   al
1000301d:	84 c0                	test   al,al
1000301f:	74 02                	je     10003023 <firstRun(bool)+0x6ce>
10003021:	eb f0                	jmp    10003013 <firstRun(bool)+0x6be>
10003023:	a1 00 00 00 00       	mov    eax,ds:0x0	10003024: R_386_32	term
10003028:	05 82 00 00 00       	add    eax,0x82
1000302d:	83 ec 04             	sub    esp,0x4
10003030:	6a 10                	push   0x10
10003032:	6a 00                	push   0x0
10003034:	50                   	push   eax
10003035:	e8 fc ff ff ff       	call   10003036 <firstRun(bool)+0x6e1>	10003036: R_386_PC32	memset
1000303a:	83 c4 10             	add    esp,0x10
1000303d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000303e: R_386_32	term
10003042:	05 02 01 00 00       	add    eax,0x102
10003047:	83 ec 04             	sub    esp,0x4
1000304a:	6a 10                	push   0x10
1000304c:	6a 00                	push   0x0
1000304e:	50                   	push   eax
1000304f:	e8 fc ff ff ff       	call   10003050 <firstRun(bool)+0x6fb>	10003050: R_386_PC32	memset
10003054:	83 c4 10             	add    esp,0x10
10003057:	a0 00 00 00 00       	mov    al,ds:0x0	10003058: R_386_32	installKey
1000305c:	3c 09                	cmp    al,0x9
1000305e:	74 09                	je     10003069 <firstRun(bool)+0x714>
10003060:	a0 00 00 00 00       	mov    al,ds:0x0	10003061: R_386_32	installKey
10003065:	3c 0a                	cmp    al,0xa
10003067:	75 04                	jne    1000306d <firstRun(bool)+0x718>
10003069:	b0 01                	mov    al,0x1
1000306b:	eb 02                	jmp    1000306f <firstRun(bool)+0x71a>
1000306d:	b0 00                	mov    al,0x0
1000306f:	84 c0                	test   al,al
10003071:	0f 84 c6 00 00 00    	je     1000313d <firstRun(bool)+0x7e8>
10003077:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
1000307b:	75 0d                	jne    1000308a <firstRun(bool)+0x735>
1000307d:	a0 00 00 00 00       	mov    al,ds:0x0	1000307e: R_386_32	installKey
10003082:	3c 0a                	cmp    al,0xa
10003084:	75 04                	jne    1000308a <firstRun(bool)+0x735>
10003086:	b0 01                	mov    al,0x1
10003088:	eb 02                	jmp    1000308c <firstRun(bool)+0x737>
1000308a:	b0 00                	mov    al,0x0
1000308c:	84 c0                	test   al,al
1000308e:	74 72                	je     10003102 <firstRun(bool)+0x7ad>
10003090:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003092: R_386_32	installKey
10003097:	83 ec 08             	sub    esp,0x8
1000309a:	68 00 00 00 00       	push   0x0	1000309b: R_386_32	passwbufB
1000309f:	68 00 00 00 00       	push   0x0	100030a0: R_386_32	passwbufA
100030a4:	e8 fc ff ff ff       	call   100030a5 <firstRun(bool)+0x750>	100030a5: R_386_PC32	strcmp
100030a9:	83 c4 10             	add    esp,0x10
100030ac:	85 c0                	test   eax,eax
100030ae:	75 21                	jne    100030d1 <firstRun(bool)+0x77c>
100030b0:	83 ec 0c             	sub    esp,0xc
100030b3:	68 00 00 00 00       	push   0x0	100030b4: R_386_32	currName
100030b8:	e8 fc ff ff ff       	call   100030b9 <firstRun(bool)+0x764>	100030b9: R_386_PC32	strlen
100030bd:	83 c4 10             	add    esp,0x10
100030c0:	85 c0                	test   eax,eax
100030c2:	0f 85 22 03 00 00    	jne    100033ea <firstRun(bool)+0xa95>
100030c8:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100030cf:	eb 57                	jmp    10003128 <firstRun(bool)+0x7d3>
100030d1:	c7 45 e0 02 00 00 00 	mov    DWORD PTR [ebp-0x20],0x2
100030d8:	83 ec 04             	sub    esp,0x4
100030db:	6a 30                	push   0x30
100030dd:	6a 00                	push   0x0
100030df:	68 00 00 00 00       	push   0x0	100030e0: R_386_32	passwbufA
100030e4:	e8 fc ff ff ff       	call   100030e5 <firstRun(bool)+0x790>	100030e5: R_386_PC32	memset
100030e9:	83 c4 10             	add    esp,0x10
100030ec:	83 ec 04             	sub    esp,0x4
100030ef:	6a 30                	push   0x30
100030f1:	6a 00                	push   0x0
100030f3:	68 00 00 00 00       	push   0x0	100030f4: R_386_32	passwbufB
100030f8:	e8 fc ff ff ff       	call   100030f9 <firstRun(bool)+0x7a4>	100030f9: R_386_PC32	memset
100030fd:	83 c4 10             	add    esp,0x10
10003100:	eb 26                	jmp    10003128 <firstRun(bool)+0x7d3>
10003102:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10003105:	a0 00 00 00 00       	mov    al,ds:0x0	10003106: R_386_32	createNewUserMode
1000310a:	84 c0                	test   al,al
1000310c:	74 0d                	je     1000311b <firstRun(bool)+0x7c6>
1000310e:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003112:	75 07                	jne    1000311b <firstRun(bool)+0x7c6>
10003114:	c7 45 e0 02 00 00 00 	mov    DWORD PTR [ebp-0x20],0x2
1000311b:	83 7d e0 05          	cmp    DWORD PTR [ebp-0x20],0x5
1000311f:	75 07                	jne    10003128 <firstRun(bool)+0x7d3>
10003121:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003128:	83 ec 0c             	sub    esp,0xc
1000312b:	68 2c 01 00 00       	push   0x12c
10003130:	e8 fc ff ff ff       	call   10003131 <firstRun(bool)+0x7dc>	10003131: R_386_PC32	milliTenthSleep(unsigned int)
10003135:	83 c4 10             	add    esp,0x10
10003138:	e9 a1 02 00 00       	jmp    100033de <firstRun(bool)+0xa89>
1000313d:	a0 00 00 00 00       	mov    al,ds:0x0	1000313e: R_386_32	installKey
10003142:	3c 1f                	cmp    al,0x1f
10003144:	7e 0d                	jle    10003153 <firstRun(bool)+0x7fe>
10003146:	a0 00 00 00 00       	mov    al,ds:0x0	10003147: R_386_32	installKey
1000314b:	3c 7f                	cmp    al,0x7f
1000314d:	74 04                	je     10003153 <firstRun(bool)+0x7fe>
1000314f:	b0 01                	mov    al,0x1
10003151:	eb 02                	jmp    10003155 <firstRun(bool)+0x800>
10003153:	b0 00                	mov    al,0x0
10003155:	84 c0                	test   al,al
10003157:	0f 84 39 01 00 00    	je     10003296 <firstRun(bool)+0x941>
1000315d:	a0 00 00 00 00       	mov    al,ds:0x0	1000315e: R_386_32	installKey
10003162:	88 85 c6 fe ff ff    	mov    BYTE PTR [ebp-0x13a],al
10003168:	c6 85 c7 fe ff ff 00 	mov    BYTE PTR [ebp-0x139],0x0
1000316f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10003173:	75 7e                	jne    100031f3 <firstRun(bool)+0x89e>
10003175:	83 ec 0c             	sub    esp,0xc
10003178:	68 00 00 00 00       	push   0x0	10003179: R_386_32	currName
1000317d:	e8 fc ff ff ff       	call   1000317e <firstRun(bool)+0x829>	1000317e: R_386_PC32	strlen
10003182:	83 c4 10             	add    esp,0x10
10003185:	83 f8 22             	cmp    eax,0x22
10003188:	77 69                	ja     100031f3 <firstRun(bool)+0x89e>
1000318a:	a0 00 00 00 00       	mov    al,ds:0x0	1000318b: R_386_32	installKey
1000318f:	3c 40                	cmp    al,0x40
10003191:	7e 09                	jle    1000319c <firstRun(bool)+0x847>
10003193:	a0 00 00 00 00       	mov    al,ds:0x0	10003194: R_386_32	installKey
10003198:	3c 59                	cmp    al,0x59
1000319a:	7f 36                	jg     100031d2 <firstRun(bool)+0x87d>
1000319c:	a0 00 00 00 00       	mov    al,ds:0x0	1000319d: R_386_32	installKey
100031a1:	3c 60                	cmp    al,0x60
100031a3:	7e 09                	jle    100031ae <firstRun(bool)+0x859>
100031a5:	a0 00 00 00 00       	mov    al,ds:0x0	100031a6: R_386_32	installKey
100031aa:	3c 79                	cmp    al,0x79
100031ac:	7f 24                	jg     100031d2 <firstRun(bool)+0x87d>
100031ae:	a0 00 00 00 00       	mov    al,ds:0x0	100031af: R_386_32	installKey
100031b3:	3c 2f                	cmp    al,0x2f
100031b5:	7e 09                	jle    100031c0 <firstRun(bool)+0x86b>
100031b7:	a0 00 00 00 00       	mov    al,ds:0x0	100031b8: R_386_32	installKey
100031bc:	3c 38                	cmp    al,0x38
100031be:	7f 12                	jg     100031d2 <firstRun(bool)+0x87d>
100031c0:	a0 00 00 00 00       	mov    al,ds:0x0	100031c1: R_386_32	installKey
100031c5:	3c 5f                	cmp    al,0x5f
100031c7:	74 09                	je     100031d2 <firstRun(bool)+0x87d>
100031c9:	a0 00 00 00 00       	mov    al,ds:0x0	100031ca: R_386_32	installKey
100031ce:	3c 20                	cmp    al,0x20
100031d0:	75 04                	jne    100031d6 <firstRun(bool)+0x881>
100031d2:	b0 01                	mov    al,0x1
100031d4:	eb 02                	jmp    100031d8 <firstRun(bool)+0x883>
100031d6:	b0 00                	mov    al,0x0
100031d8:	84 c0                	test   al,al
100031da:	74 17                	je     100031f3 <firstRun(bool)+0x89e>
100031dc:	83 ec 08             	sub    esp,0x8
100031df:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
100031e5:	50                   	push   eax
100031e6:	68 00 00 00 00       	push   0x0	100031e7: R_386_32	currName
100031eb:	e8 fc ff ff ff       	call   100031ec <firstRun(bool)+0x897>	100031ec: R_386_PC32	strcat
100031f0:	83 c4 10             	add    esp,0x10
100031f3:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
100031f7:	75 2c                	jne    10003225 <firstRun(bool)+0x8d0>
100031f9:	83 ec 0c             	sub    esp,0xc
100031fc:	68 00 00 00 00       	push   0x0	100031fd: R_386_32	currComp
10003201:	e8 fc ff ff ff       	call   10003202 <firstRun(bool)+0x8ad>	10003202: R_386_PC32	strlen
10003206:	83 c4 10             	add    esp,0x10
10003209:	83 f8 22             	cmp    eax,0x22
1000320c:	77 17                	ja     10003225 <firstRun(bool)+0x8d0>
1000320e:	83 ec 08             	sub    esp,0x8
10003211:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003217:	50                   	push   eax
10003218:	68 00 00 00 00       	push   0x0	10003219: R_386_32	currComp
1000321d:	e8 fc ff ff ff       	call   1000321e <firstRun(bool)+0x8c9>	1000321e: R_386_PC32	strcat
10003222:	83 c4 10             	add    esp,0x10
10003225:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10003229:	75 2c                	jne    10003257 <firstRun(bool)+0x902>
1000322b:	83 ec 0c             	sub    esp,0xc
1000322e:	68 00 00 00 00       	push   0x0	1000322f: R_386_32	passwbufA
10003233:	e8 fc ff ff ff       	call   10003234 <firstRun(bool)+0x8df>	10003234: R_386_PC32	strlen
10003238:	83 c4 10             	add    esp,0x10
1000323b:	83 f8 22             	cmp    eax,0x22
1000323e:	77 17                	ja     10003257 <firstRun(bool)+0x902>
10003240:	83 ec 08             	sub    esp,0x8
10003243:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003249:	50                   	push   eax
1000324a:	68 00 00 00 00       	push   0x0	1000324b: R_386_32	passwbufA
1000324f:	e8 fc ff ff ff       	call   10003250 <firstRun(bool)+0x8fb>	10003250: R_386_PC32	strcat
10003254:	83 c4 10             	add    esp,0x10
10003257:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
1000325b:	0f 85 7d 01 00 00    	jne    100033de <firstRun(bool)+0xa89>
10003261:	83 ec 0c             	sub    esp,0xc
10003264:	68 00 00 00 00       	push   0x0	10003265: R_386_32	passwbufB
10003269:	e8 fc ff ff ff       	call   1000326a <firstRun(bool)+0x915>	1000326a: R_386_PC32	strlen
1000326e:	83 c4 10             	add    esp,0x10
10003271:	83 f8 22             	cmp    eax,0x22
10003274:	0f 87 64 01 00 00    	ja     100033de <firstRun(bool)+0xa89>
1000327a:	83 ec 08             	sub    esp,0x8
1000327d:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003283:	50                   	push   eax
10003284:	68 00 00 00 00       	push   0x0	10003285: R_386_32	passwbufB
10003289:	e8 fc ff ff ff       	call   1000328a <firstRun(bool)+0x935>	1000328a: R_386_PC32	strcat
1000328e:	83 c4 10             	add    esp,0x10
10003291:	e9 48 01 00 00       	jmp    100033de <firstRun(bool)+0xa89>
10003296:	a0 00 00 00 00       	mov    al,ds:0x0	10003297: R_386_32	installKey
1000329b:	3c 1b                	cmp    al,0x1b
1000329d:	75 0d                	jne    100032ac <firstRun(bool)+0x957>
1000329f:	a0 00 00 00 00       	mov    al,ds:0x0	100032a0: R_386_32	createNewUserMode
100032a4:	84 c0                	test   al,al
100032a6:	74 04                	je     100032ac <firstRun(bool)+0x957>
100032a8:	b0 01                	mov    al,0x1
100032aa:	eb 02                	jmp    100032ae <firstRun(bool)+0x959>
100032ac:	b0 00                	mov    al,0x0
100032ae:	84 c0                	test   al,al
100032b0:	74 0c                	je     100032be <firstRun(bool)+0x969>
100032b2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100032b4: R_386_32	createNewUserMode
100032b9:	e9 78 1d 00 00       	jmp    10005036 <firstRun(bool)+0x26e1>
100032be:	a0 00 00 00 00       	mov    al,ds:0x0	100032bf: R_386_32	installKey
100032c3:	3c 08                	cmp    al,0x8
100032c5:	0f 94 c0             	sete   al
100032c8:	84 c0                	test   al,al
100032ca:	0f 84 ca 00 00 00    	je     1000339a <firstRun(bool)+0xa45>
100032d0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100032d4:	75 2c                	jne    10003302 <firstRun(bool)+0x9ad>
100032d6:	83 ec 0c             	sub    esp,0xc
100032d9:	68 00 00 00 00       	push   0x0	100032da: R_386_32	currName
100032de:	e8 fc ff ff ff       	call   100032df <firstRun(bool)+0x98a>	100032df: R_386_PC32	strlen
100032e3:	83 c4 10             	add    esp,0x10
100032e6:	85 c0                	test   eax,eax
100032e8:	74 18                	je     10003302 <firstRun(bool)+0x9ad>
100032ea:	83 ec 0c             	sub    esp,0xc
100032ed:	68 00 00 00 00       	push   0x0	100032ee: R_386_32	currName
100032f2:	e8 fc ff ff ff       	call   100032f3 <firstRun(bool)+0x99e>	100032f3: R_386_PC32	strlen
100032f7:	83 c4 10             	add    esp,0x10
100032fa:	48                   	dec    eax
100032fb:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	100032fd: R_386_32	currName
10003302:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003306:	75 2c                	jne    10003334 <firstRun(bool)+0x9df>
10003308:	83 ec 0c             	sub    esp,0xc
1000330b:	68 00 00 00 00       	push   0x0	1000330c: R_386_32	currComp
10003310:	e8 fc ff ff ff       	call   10003311 <firstRun(bool)+0x9bc>	10003311: R_386_PC32	strlen
10003315:	83 c4 10             	add    esp,0x10
10003318:	85 c0                	test   eax,eax
1000331a:	74 18                	je     10003334 <firstRun(bool)+0x9df>
1000331c:	83 ec 0c             	sub    esp,0xc
1000331f:	68 00 00 00 00       	push   0x0	10003320: R_386_32	currComp
10003324:	e8 fc ff ff ff       	call   10003325 <firstRun(bool)+0x9d0>	10003325: R_386_PC32	strlen
10003329:	83 c4 10             	add    esp,0x10
1000332c:	48                   	dec    eax
1000332d:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	1000332f: R_386_32	currComp
10003334:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10003338:	75 2c                	jne    10003366 <firstRun(bool)+0xa11>
1000333a:	83 ec 0c             	sub    esp,0xc
1000333d:	68 00 00 00 00       	push   0x0	1000333e: R_386_32	passwbufA
10003342:	e8 fc ff ff ff       	call   10003343 <firstRun(bool)+0x9ee>	10003343: R_386_PC32	strlen
10003347:	83 c4 10             	add    esp,0x10
1000334a:	85 c0                	test   eax,eax
1000334c:	74 18                	je     10003366 <firstRun(bool)+0xa11>
1000334e:	83 ec 0c             	sub    esp,0xc
10003351:	68 00 00 00 00       	push   0x0	10003352: R_386_32	passwbufA
10003356:	e8 fc ff ff ff       	call   10003357 <firstRun(bool)+0xa02>	10003357: R_386_PC32	strlen
1000335b:	83 c4 10             	add    esp,0x10
1000335e:	48                   	dec    eax
1000335f:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003361: R_386_32	passwbufA
10003366:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
1000336a:	75 72                	jne    100033de <firstRun(bool)+0xa89>
1000336c:	83 ec 0c             	sub    esp,0xc
1000336f:	68 00 00 00 00       	push   0x0	10003370: R_386_32	passwbufB
10003374:	e8 fc ff ff ff       	call   10003375 <firstRun(bool)+0xa20>	10003375: R_386_PC32	strlen
10003379:	83 c4 10             	add    esp,0x10
1000337c:	85 c0                	test   eax,eax
1000337e:	74 5e                	je     100033de <firstRun(bool)+0xa89>
10003380:	83 ec 0c             	sub    esp,0xc
10003383:	68 00 00 00 00       	push   0x0	10003384: R_386_32	passwbufB
10003388:	e8 fc ff ff ff       	call   10003389 <firstRun(bool)+0xa34>	10003389: R_386_PC32	strlen
1000338d:	83 c4 10             	add    esp,0x10
10003390:	48                   	dec    eax
10003391:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003393: R_386_32	passwbufB
10003398:	eb 44                	jmp    100033de <firstRun(bool)+0xa89>
1000339a:	a0 00 00 00 00       	mov    al,ds:0x0	1000339b: R_386_32	installKey
1000339f:	3c 7f                	cmp    al,0x7f
100033a1:	0f 94 c0             	sete   al
100033a4:	84 c0                	test   al,al
100033a6:	74 36                	je     100033de <firstRun(bool)+0xa89>
100033a8:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
100033ab:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
100033af:	75 07                	jne    100033b8 <firstRun(bool)+0xa63>
100033b1:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100033b8:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
100033bc:	75 10                	jne    100033ce <firstRun(bool)+0xa79>
100033be:	a0 00 00 00 00       	mov    al,ds:0x0	100033bf: R_386_32	createNewUserMode
100033c3:	84 c0                	test   al,al
100033c5:	74 07                	je     100033ce <firstRun(bool)+0xa79>
100033c7:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100033ce:	83 ec 0c             	sub    esp,0xc
100033d1:	68 2c 01 00 00       	push   0x12c
100033d6:	e8 fc ff ff ff       	call   100033d7 <firstRun(bool)+0xa82>	100033d7: R_386_PC32	milliTenthSleep(unsigned int)
100033db:	83 c4 10             	add    esp,0x10
100033de:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100033e0: R_386_32	installKey
100033e5:	e9 6a f8 ff ff       	jmp    10002c54 <firstRun(bool)+0x2ff>
100033ea:	90                   	nop
100033eb:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100033ed: R_386_32	installKey
100033f2:	83 ec 0c             	sub    esp,0xc
100033f5:	68 d0 07 00 00       	push   0x7d0
100033fa:	e8 fc ff ff ff       	call   100033fb <firstRun(bool)+0xaa6>	100033fb: R_386_PC32	milliTenthSleep(unsigned int)
100033ff:	83 c4 10             	add    esp,0x10
10003402:	e8 fc ff ff ff       	call   10003403 <firstRun(bool)+0xaae>	10003403: R_386_PC32	drawBootScreen()
10003407:	c7 45 bc 08 00 00 00 	mov    DWORD PTR [ebp-0x44],0x8
1000340e:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003410: R_386_32	_bcrypt_errno
10003418:	83 ec 08             	sub    esp,0x8
1000341b:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10003421:	50                   	push   eax
10003422:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10003425:	e8 fc ff ff ff       	call   10003426 <firstRun(bool)+0xad1>	10003426: R_386_PC32	bcrypt_gensalt
1000342a:	83 c4 10             	add    esp,0x10
1000342d:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10003430:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10003434:	75 09                	jne    1000343f <firstRun(bool)+0xaea>
10003436:	a1 00 00 00 00       	mov    eax,ds:0x0	10003437: R_386_32	_bcrypt_errno
1000343b:	85 c0                	test   eax,eax
1000343d:	74 5e                	je     1000349d <firstRun(bool)+0xb48>
1000343f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003446:	83 ec 08             	sub    esp,0x8
10003449:	68 b8 a9 00 10       	push   0x1000a9b8	1000344a: R_386_32	.text
1000344e:	68 00 00 00 00       	push   0x0	1000344f: R_386_32	currName
10003453:	e8 fc ff ff ff       	call   10003454 <firstRun(bool)+0xaff>	10003454: R_386_PC32	strcpy
10003458:	83 c4 10             	add    esp,0x10
1000345b:	83 ec 08             	sub    esp,0x8
1000345e:	68 c7 a9 00 10       	push   0x1000a9c7	1000345f: R_386_32	.text
10003463:	68 00 00 00 00       	push   0x0	10003464: R_386_32	currComp
10003468:	e8 fc ff ff ff       	call   10003469 <firstRun(bool)+0xb14>	10003469: R_386_PC32	strcpy
1000346d:	83 c4 10             	add    esp,0x10
10003470:	83 ec 04             	sub    esp,0x4
10003473:	6a 50                	push   0x50
10003475:	6a 00                	push   0x0
10003477:	68 00 00 00 00       	push   0x0	10003478: R_386_32	passwbufA
1000347c:	e8 fc ff ff ff       	call   1000347d <firstRun(bool)+0xb28>	1000347d: R_386_PC32	memset
10003481:	83 c4 10             	add    esp,0x10
10003484:	83 ec 04             	sub    esp,0x4
10003487:	6a 50                	push   0x50
10003489:	6a 00                	push   0x0
1000348b:	68 00 00 00 00       	push   0x0	1000348c: R_386_32	passwbufB
10003490:	e8 fc ff ff ff       	call   10003491 <firstRun(bool)+0xb3c>	10003491: R_386_PC32	memset
10003495:	83 c4 10             	add    esp,0x10
10003498:	e9 30 f6 ff ff       	jmp    10002acd <firstRun(bool)+0x178>
1000349d:	83 ec 08             	sub    esp,0x8
100034a0:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
100034a6:	50                   	push   eax
100034a7:	68 00 00 00 00       	push   0x0	100034a8: R_386_32	passwsalt
100034ac:	e8 fc ff ff ff       	call   100034ad <firstRun(bool)+0xb58>	100034ad: R_386_PC32	strcpy
100034b1:	83 c4 10             	add    esp,0x10
100034b4:	83 ec 04             	sub    esp,0x4
100034b7:	68 00 00 00 00       	push   0x0	100034b8: R_386_32	passwhash
100034bc:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
100034c2:	50                   	push   eax
100034c3:	68 00 00 00 00       	push   0x0	100034c4: R_386_32	passwbufA
100034c8:	e8 fc ff ff ff       	call   100034c9 <firstRun(bool)+0xb74>	100034c9: R_386_PC32	bcrypt_hashpw
100034cd:	83 c4 10             	add    esp,0x10
100034d0:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100034d3:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100034d7:	75 09                	jne    100034e2 <firstRun(bool)+0xb8d>
100034d9:	a1 00 00 00 00       	mov    eax,ds:0x0	100034da: R_386_32	_bcrypt_errno
100034de:	85 c0                	test   eax,eax
100034e0:	74 5e                	je     10003540 <firstRun(bool)+0xbeb>
100034e2:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100034e9:	83 ec 08             	sub    esp,0x8
100034ec:	68 b8 a9 00 10       	push   0x1000a9b8	100034ed: R_386_32	.text
100034f1:	68 00 00 00 00       	push   0x0	100034f2: R_386_32	currName
100034f6:	e8 fc ff ff ff       	call   100034f7 <firstRun(bool)+0xba2>	100034f7: R_386_PC32	strcpy
100034fb:	83 c4 10             	add    esp,0x10
100034fe:	83 ec 08             	sub    esp,0x8
10003501:	68 d9 a9 00 10       	push   0x1000a9d9	10003502: R_386_32	.text
10003506:	68 00 00 00 00       	push   0x0	10003507: R_386_32	currComp
1000350b:	e8 fc ff ff ff       	call   1000350c <firstRun(bool)+0xbb7>	1000350c: R_386_PC32	strcpy
10003510:	83 c4 10             	add    esp,0x10
10003513:	83 ec 04             	sub    esp,0x4
10003516:	6a 50                	push   0x50
10003518:	6a 00                	push   0x0
1000351a:	68 00 00 00 00       	push   0x0	1000351b: R_386_32	passwbufA
1000351f:	e8 fc ff ff ff       	call   10003520 <firstRun(bool)+0xbcb>	10003520: R_386_PC32	memset
10003524:	83 c4 10             	add    esp,0x10
10003527:	83 ec 04             	sub    esp,0x4
1000352a:	6a 50                	push   0x50
1000352c:	6a 00                	push   0x0
1000352e:	68 00 00 00 00       	push   0x0	1000352f: R_386_32	passwbufB
10003533:	e8 fc ff ff ff       	call   10003534 <firstRun(bool)+0xbdf>	10003534: R_386_PC32	memset
10003538:	83 c4 10             	add    esp,0x10
1000353b:	e9 8d f5 ff ff       	jmp    10002acd <firstRun(bool)+0x178>
10003540:	83 ec 04             	sub    esp,0x4
10003543:	6a 50                	push   0x50
10003545:	6a 00                	push   0x0
10003547:	68 00 00 00 00       	push   0x0	10003548: R_386_32	passwbufA
1000354c:	e8 fc ff ff ff       	call   1000354d <firstRun(bool)+0xbf8>	1000354d: R_386_PC32	memset
10003551:	83 c4 10             	add    esp,0x10
10003554:	83 ec 04             	sub    esp,0x4
10003557:	6a 50                	push   0x50
10003559:	6a 00                	push   0x0
1000355b:	68 00 00 00 00       	push   0x0	1000355c: R_386_32	passwbufB
10003560:	e8 fc ff ff ff       	call   10003561 <firstRun(bool)+0xc0c>	10003561: R_386_PC32	memset
10003565:	83 c4 10             	add    esp,0x10
10003568:	a0 00 00 00 00       	mov    al,ds:0x0	10003569: R_386_32	createNewUserMode
1000356d:	84 c0                	test   al,al
1000356f:	74 16                	je     10003587 <firstRun(bool)+0xc32>
10003571:	83 ec 0c             	sub    esp,0xc
10003574:	68 00 00 00 00       	push   0x0	10003575: R_386_32	currName
10003579:	e8 fc ff ff ff       	call   1000357a <firstRun(bool)+0xc25>	1000357a: R_386_PC32	createUser(char const*)
1000357e:	83 c4 10             	add    esp,0x10
10003581:	90                   	nop
10003582:	e9 af 1a 00 00       	jmp    10005036 <firstRun(bool)+0x26e1>
10003587:	83 ec 0c             	sub    esp,0xc
1000358a:	68 d0 07 00 00       	push   0x7d0
1000358f:	e8 fc ff ff ff       	call   10003590 <firstRun(bool)+0xc3b>	10003590: R_386_PC32	milliTenthSleep(unsigned int)
10003594:	83 c4 10             	add    esp,0x10
10003597:	eb 01                	jmp    1000359a <firstRun(bool)+0xc45>
10003599:	90                   	nop
1000359a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000359c: R_386_32	installKey
100035a1:	e8 fc ff ff ff       	call   100035a2 <firstRun(bool)+0xc4d>	100035a2: R_386_PC32	drawBootScreen()
100035a6:	83 ec 0c             	sub    esp,0xc
100035a9:	68 eb a9 00 10       	push   0x1000a9eb	100035aa: R_386_32	.text
100035ae:	6a 0d                	push   0xd
100035b0:	6a 32                	push   0x32
100035b2:	6a 02                	push   0x2
100035b4:	6a 16                	push   0x16
100035b6:	e8 fc ff ff ff       	call   100035b7 <firstRun(bool)+0xc62>	100035b7: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100035bb:	83 c4 20             	add    esp,0x20
100035be:	a1 00 00 00 00       	mov    eax,ds:0x0	100035bf: R_386_32	Krnl::computer
100035c3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
100035c9:	a1 00 00 00 00       	mov    eax,ds:0x0	100035ca: R_386_32	Krnl::computer
100035ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100035d4:	8b 00                	mov    eax,DWORD PTR [eax]
100035d6:	83 c0 28             	add    eax,0x28
100035d9:	8b 00                	mov    eax,DWORD PTR [eax]
100035db:	8d 95 98 fe ff ff    	lea    edx,[ebp-0x168]
100035e1:	83 ec 08             	sub    esp,0x8
100035e4:	51                   	push   ecx
100035e5:	52                   	push   edx
100035e6:	ff d0                	call   eax
100035e8:	83 c4 0c             	add    esp,0xc
100035eb:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [ebp-0x168]
100035f1:	8b 95 9c fe ff ff    	mov    edx,DWORD PTR [ebp-0x164]
100035f7:	89 85 d4 fe ff ff    	mov    DWORD PTR [ebp-0x12c],eax
100035fd:	89 95 d8 fe ff ff    	mov    DWORD PTR [ebp-0x128],edx
10003603:	83 ec 08             	sub    esp,0x8
10003606:	68 f9 a9 00 10       	push   0x1000a9f9	10003607: R_386_32	.text
1000360b:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003611:	50                   	push   eax
10003612:	e8 fc ff ff ff       	call   10003613 <firstRun(bool)+0xcbe>	10003613: R_386_PC32	strcpy
10003617:	83 c4 10             	add    esp,0x10
1000361a:	8a 85 d4 fe ff ff    	mov    al,BYTE PTR [ebp-0x12c]
10003620:	0f b6 d0             	movzx  edx,al
10003623:	89 d0                	mov    eax,edx
10003625:	c1 e0 02             	shl    eax,0x2
10003628:	01 d0                	add    eax,edx
1000362a:	c1 e0 03             	shl    eax,0x3
1000362d:	01 d0                	add    eax,edx
1000362f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003636:	01 d0                	add    eax,edx
10003638:	66 c1 e8 08          	shr    ax,0x8
1000363c:	c0 e8 03             	shr    al,0x3
1000363f:	83 c0 30             	add    eax,0x30
10003642:	88 85 40 ff ff ff    	mov    BYTE PTR [ebp-0xc0],al
10003648:	8a 8d d4 fe ff ff    	mov    cl,BYTE PTR [ebp-0x12c]
1000364e:	0f b6 d1             	movzx  edx,cl
10003651:	89 d0                	mov    eax,edx
10003653:	c1 e0 02             	shl    eax,0x2
10003656:	01 d0                	add    eax,edx
10003658:	c1 e0 03             	shl    eax,0x3
1000365b:	01 d0                	add    eax,edx
1000365d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003664:	01 d0                	add    eax,edx
10003666:	66 c1 e8 08          	shr    ax,0x8
1000366a:	88 c2                	mov    dl,al
1000366c:	c0 ea 03             	shr    dl,0x3
1000366f:	88 d0                	mov    al,dl
10003671:	c1 e0 02             	shl    eax,0x2
10003674:	01 d0                	add    eax,edx
10003676:	d1 e0                	shl    eax,1
10003678:	29 c1                	sub    ecx,eax
1000367a:	88 ca                	mov    dl,cl
1000367c:	8d 42 30             	lea    eax,[edx+0x30]
1000367f:	88 85 41 ff ff ff    	mov    BYTE PTR [ebp-0xbf],al
10003685:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
1000368b:	0f b6 c8             	movzx  ecx,al
1000368e:	b8 67 66 66 66       	mov    eax,0x66666667
10003693:	f7 e9                	imul   ecx
10003695:	c1 fa 02             	sar    edx,0x2
10003698:	89 c8                	mov    eax,ecx
1000369a:	c1 f8 1f             	sar    eax,0x1f
1000369d:	29 c2                	sub    edx,eax
1000369f:	89 d0                	mov    eax,edx
100036a1:	83 c0 30             	add    eax,0x30
100036a4:	88 85 43 ff ff ff    	mov    BYTE PTR [ebp-0xbd],al
100036aa:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
100036b0:	0f b6 c8             	movzx  ecx,al
100036b3:	b8 67 66 66 66       	mov    eax,0x66666667
100036b8:	f7 e9                	imul   ecx
100036ba:	c1 fa 02             	sar    edx,0x2
100036bd:	89 c8                	mov    eax,ecx
100036bf:	c1 f8 1f             	sar    eax,0x1f
100036c2:	29 c2                	sub    edx,eax
100036c4:	89 d0                	mov    eax,edx
100036c6:	c1 e0 02             	shl    eax,0x2
100036c9:	01 d0                	add    eax,edx
100036cb:	01 c0                	add    eax,eax
100036cd:	29 c1                	sub    ecx,eax
100036cf:	89 ca                	mov    edx,ecx
100036d1:	88 d0                	mov    al,dl
100036d3:	83 c0 30             	add    eax,0x30
100036d6:	88 85 44 ff ff ff    	mov    BYTE PTR [ebp-0xbc],al
100036dc:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
100036e3:	0f b7 c8             	movzx  ecx,ax
100036e6:	b8 d3 4d 62 10       	mov    eax,0x10624dd3
100036eb:	f7 e9                	imul   ecx
100036ed:	c1 fa 06             	sar    edx,0x6
100036f0:	89 c8                	mov    eax,ecx
100036f2:	c1 f8 1f             	sar    eax,0x1f
100036f5:	29 c2                	sub    edx,eax
100036f7:	89 d0                	mov    eax,edx
100036f9:	b9 0a 00 00 00       	mov    ecx,0xa
100036fe:	99                   	cdq    
100036ff:	f7 f9                	idiv   ecx
10003701:	89 d0                	mov    eax,edx
10003703:	83 c0 30             	add    eax,0x30
10003706:	88 85 46 ff ff ff    	mov    BYTE PTR [ebp-0xba],al
1000370c:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003713:	0f b7 c8             	movzx  ecx,ax
10003716:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
1000371b:	f7 e9                	imul   ecx
1000371d:	c1 fa 05             	sar    edx,0x5
10003720:	89 c8                	mov    eax,ecx
10003722:	c1 f8 1f             	sar    eax,0x1f
10003725:	29 c2                	sub    edx,eax
10003727:	89 d0                	mov    eax,edx
10003729:	b9 0a 00 00 00       	mov    ecx,0xa
1000372e:	99                   	cdq    
1000372f:	f7 f9                	idiv   ecx
10003731:	89 d0                	mov    eax,edx
10003733:	83 c0 30             	add    eax,0x30
10003736:	88 85 47 ff ff ff    	mov    BYTE PTR [ebp-0xb9],al
1000373c:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003743:	0f b7 c8             	movzx  ecx,ax
10003746:	b8 67 66 66 66       	mov    eax,0x66666667
1000374b:	f7 e9                	imul   ecx
1000374d:	c1 fa 02             	sar    edx,0x2
10003750:	89 c8                	mov    eax,ecx
10003752:	c1 f8 1f             	sar    eax,0x1f
10003755:	89 d1                	mov    ecx,edx
10003757:	29 c1                	sub    ecx,eax
10003759:	b8 67 66 66 66       	mov    eax,0x66666667
1000375e:	f7 e9                	imul   ecx
10003760:	c1 fa 02             	sar    edx,0x2
10003763:	89 c8                	mov    eax,ecx
10003765:	c1 f8 1f             	sar    eax,0x1f
10003768:	29 c2                	sub    edx,eax
1000376a:	89 d0                	mov    eax,edx
1000376c:	c1 e0 02             	shl    eax,0x2
1000376f:	01 d0                	add    eax,edx
10003771:	01 c0                	add    eax,eax
10003773:	29 c1                	sub    ecx,eax
10003775:	89 ca                	mov    edx,ecx
10003777:	88 d0                	mov    al,dl
10003779:	83 c0 30             	add    eax,0x30
1000377c:	88 85 48 ff ff ff    	mov    BYTE PTR [ebp-0xb8],al
10003782:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003789:	0f b7 c0             	movzx  eax,ax
1000378c:	b9 0a 00 00 00       	mov    ecx,0xa
10003791:	99                   	cdq    
10003792:	f7 f9                	idiv   ecx
10003794:	89 d0                	mov    eax,edx
10003796:	83 c0 30             	add    eax,0x30
10003799:	88 85 49 ff ff ff    	mov    BYTE PTR [ebp-0xb7],al
1000379f:	8a 85 d8 fe ff ff    	mov    al,BYTE PTR [ebp-0x128]
100037a5:	0f b6 d0             	movzx  edx,al
100037a8:	89 d0                	mov    eax,edx
100037aa:	c1 e0 02             	shl    eax,0x2
100037ad:	01 d0                	add    eax,edx
100037af:	c1 e0 03             	shl    eax,0x3
100037b2:	01 d0                	add    eax,edx
100037b4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100037bb:	01 d0                	add    eax,edx
100037bd:	66 c1 e8 08          	shr    ax,0x8
100037c1:	c0 e8 03             	shr    al,0x3
100037c4:	83 c0 30             	add    eax,0x30
100037c7:	88 85 4b ff ff ff    	mov    BYTE PTR [ebp-0xb5],al
100037cd:	8a 8d d8 fe ff ff    	mov    cl,BYTE PTR [ebp-0x128]
100037d3:	0f b6 d1             	movzx  edx,cl
100037d6:	89 d0                	mov    eax,edx
100037d8:	c1 e0 02             	shl    eax,0x2
100037db:	01 d0                	add    eax,edx
100037dd:	c1 e0 03             	shl    eax,0x3
100037e0:	01 d0                	add    eax,edx
100037e2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100037e9:	01 d0                	add    eax,edx
100037eb:	66 c1 e8 08          	shr    ax,0x8
100037ef:	88 c2                	mov    dl,al
100037f1:	c0 ea 03             	shr    dl,0x3
100037f4:	88 d0                	mov    al,dl
100037f6:	c1 e0 02             	shl    eax,0x2
100037f9:	01 d0                	add    eax,edx
100037fb:	d1 e0                	shl    eax,1
100037fd:	29 c1                	sub    ecx,eax
100037ff:	88 ca                	mov    dl,cl
10003801:	8d 42 30             	lea    eax,[edx+0x30]
10003804:	88 85 4c ff ff ff    	mov    BYTE PTR [ebp-0xb4],al
1000380a:	8a 85 d9 fe ff ff    	mov    al,BYTE PTR [ebp-0x127]
10003810:	0f b6 d0             	movzx  edx,al
10003813:	89 d0                	mov    eax,edx
10003815:	c1 e0 02             	shl    eax,0x2
10003818:	01 d0                	add    eax,edx
1000381a:	c1 e0 03             	shl    eax,0x3
1000381d:	01 d0                	add    eax,edx
1000381f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003826:	01 d0                	add    eax,edx
10003828:	66 c1 e8 08          	shr    ax,0x8
1000382c:	c0 e8 03             	shr    al,0x3
1000382f:	83 c0 30             	add    eax,0x30
10003832:	88 85 4e ff ff ff    	mov    BYTE PTR [ebp-0xb2],al
10003838:	8a 8d d9 fe ff ff    	mov    cl,BYTE PTR [ebp-0x127]
1000383e:	0f b6 d1             	movzx  edx,cl
10003841:	89 d0                	mov    eax,edx
10003843:	c1 e0 02             	shl    eax,0x2
10003846:	01 d0                	add    eax,edx
10003848:	c1 e0 03             	shl    eax,0x3
1000384b:	01 d0                	add    eax,edx
1000384d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003854:	01 d0                	add    eax,edx
10003856:	66 c1 e8 08          	shr    ax,0x8
1000385a:	88 c2                	mov    dl,al
1000385c:	c0 ea 03             	shr    dl,0x3
1000385f:	88 d0                	mov    al,dl
10003861:	c1 e0 02             	shl    eax,0x2
10003864:	01 d0                	add    eax,edx
10003866:	d1 e0                	shl    eax,1
10003868:	29 c1                	sub    ecx,eax
1000386a:	88 ca                	mov    dl,cl
1000386c:	8d 42 30             	lea    eax,[edx+0x30]
1000386f:	88 85 4f ff ff ff    	mov    BYTE PTR [ebp-0xb1],al
10003875:	8a 85 da fe ff ff    	mov    al,BYTE PTR [ebp-0x126]
1000387b:	0f b6 d0             	movzx  edx,al
1000387e:	89 d0                	mov    eax,edx
10003880:	c1 e0 02             	shl    eax,0x2
10003883:	01 d0                	add    eax,edx
10003885:	c1 e0 03             	shl    eax,0x3
10003888:	01 d0                	add    eax,edx
1000388a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003891:	01 d0                	add    eax,edx
10003893:	66 c1 e8 08          	shr    ax,0x8
10003897:	c0 e8 03             	shr    al,0x3
1000389a:	83 c0 30             	add    eax,0x30
1000389d:	88 85 51 ff ff ff    	mov    BYTE PTR [ebp-0xaf],al
100038a3:	8a 8d da fe ff ff    	mov    cl,BYTE PTR [ebp-0x126]
100038a9:	0f b6 d1             	movzx  edx,cl
100038ac:	89 d0                	mov    eax,edx
100038ae:	c1 e0 02             	shl    eax,0x2
100038b1:	01 d0                	add    eax,edx
100038b3:	c1 e0 03             	shl    eax,0x3
100038b6:	01 d0                	add    eax,edx
100038b8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100038bf:	01 d0                	add    eax,edx
100038c1:	66 c1 e8 08          	shr    ax,0x8
100038c5:	88 c2                	mov    dl,al
100038c7:	c0 ea 03             	shr    dl,0x3
100038ca:	88 d0                	mov    al,dl
100038cc:	c1 e0 02             	shl    eax,0x2
100038cf:	01 d0                	add    eax,edx
100038d1:	d1 e0                	shl    eax,1
100038d3:	29 c1                	sub    ecx,eax
100038d5:	88 ca                	mov    dl,cl
100038d7:	8d 42 30             	lea    eax,[edx+0x30]
100038da:	88 85 52 ff ff ff    	mov    BYTE PTR [ebp-0xae],al
100038e0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100038e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100038e8: R_386_32	term
100038ec:	83 ec 04             	sub    esp,0x4
100038ef:	6a 05                	push   0x5
100038f1:	6a 18                	push   0x18
100038f3:	50                   	push   eax
100038f4:	e8 fc ff ff ff       	call   100038f5 <firstRun(bool)+0xfa0>	100038f5: R_386_PC32	VgaText::setCursor(int, int)
100038f9:	83 c4 10             	add    esp,0x10
100038fc:	a1 00 00 00 00       	mov    eax,ds:0x0	100038fd: R_386_32	term
10003901:	83 ec 08             	sub    esp,0x8
10003904:	68 10 aa 00 10       	push   0x1000aa10	10003905: R_386_32	.text
10003909:	50                   	push   eax
1000390a:	e8 fc ff ff ff       	call   1000390b <firstRun(bool)+0xfb6>	1000390b: R_386_PC32	VgaText::puts(char const*)
1000390f:	83 c4 10             	add    esp,0x10
10003912:	a1 00 00 00 00       	mov    eax,ds:0x0	10003913: R_386_32	term
10003917:	83 ec 04             	sub    esp,0x4
1000391a:	6a 06                	push   0x6
1000391c:	6a 18                	push   0x18
1000391e:	50                   	push   eax
1000391f:	e8 fc ff ff ff       	call   10003920 <firstRun(bool)+0xfcb>	10003920: R_386_PC32	VgaText::setCursor(int, int)
10003924:	83 c4 10             	add    esp,0x10
10003927:	a1 00 00 00 00       	mov    eax,ds:0x0	10003928: R_386_32	term
1000392c:	83 ec 08             	sub    esp,0x8
1000392f:	68 38 aa 00 10       	push   0x1000aa38	10003930: R_386_32	.text
10003934:	50                   	push   eax
10003935:	e8 fc ff ff ff       	call   10003936 <firstRun(bool)+0xfe1>	10003936: R_386_PC32	VgaText::puts(char const*)
1000393a:	83 c4 10             	add    esp,0x10
1000393d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000393e: R_386_32	term
10003942:	83 ec 04             	sub    esp,0x4
10003945:	6a 09                	push   0x9
10003947:	6a 1a                	push   0x1a
10003949:	50                   	push   eax
1000394a:	e8 fc ff ff ff       	call   1000394b <firstRun(bool)+0xff6>	1000394b: R_386_PC32	VgaText::setCursor(int, int)
1000394f:	83 c4 10             	add    esp,0x10
10003952:	a1 00 00 00 00       	mov    eax,ds:0x0	10003953: R_386_32	term
10003957:	6a 0f                	push   0xf
10003959:	6a 07                	push   0x7
1000395b:	68 4e aa 00 10       	push   0x1000aa4e	1000395c: R_386_32	.text
10003960:	50                   	push   eax
10003961:	e8 fc ff ff ff       	call   10003962 <firstRun(bool)+0x100d>	10003962: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003966:	83 c4 10             	add    esp,0x10
10003969:	a1 00 00 00 00       	mov    eax,ds:0x0	1000396a: R_386_32	term
1000396e:	83 ec 04             	sub    esp,0x4
10003971:	6a 18                	push   0x18
10003973:	6a 11                	push   0x11
10003975:	50                   	push   eax
10003976:	e8 fc ff ff ff       	call   10003977 <firstRun(bool)+0x1022>	10003977: R_386_PC32	VgaText::setCursor(int, int)
1000397b:	83 c4 10             	add    esp,0x10
1000397e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000397f: R_386_32	term
10003983:	6a 0b                	push   0xb
10003985:	6a 03                	push   0x3
10003987:	68 62 aa 00 10       	push   0x1000aa62	10003988: R_386_32	.text
1000398c:	50                   	push   eax
1000398d:	e8 fc ff ff ff       	call   1000398e <firstRun(bool)+0x1039>	1000398e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003992:	83 c4 10             	add    esp,0x10
10003995:	a1 00 00 00 00       	mov    eax,ds:0x0	10003996: R_386_32	term
1000399a:	83 ec 04             	sub    esp,0x4
1000399d:	6a 08                	push   0x8
1000399f:	6a 1a                	push   0x1a
100039a1:	50                   	push   eax
100039a2:	e8 fc ff ff ff       	call   100039a3 <firstRun(bool)+0x104e>	100039a3: R_386_PC32	VgaText::setCursor(int, int)
100039a7:	83 c4 10             	add    esp,0x10
100039aa:	a1 00 00 00 00       	mov    eax,ds:0x0	100039ab: R_386_32	term
100039af:	83 ec 08             	sub    esp,0x8
100039b2:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100039b8:	52                   	push   edx
100039b9:	50                   	push   eax
100039ba:	e8 fc ff ff ff       	call   100039bb <firstRun(bool)+0x1066>	100039bb: R_386_PC32	VgaText::puts(char const*)
100039bf:	83 c4 10             	add    esp,0x10
100039c2:	a1 00 00 00 00       	mov    eax,ds:0x0	100039c3: R_386_32	term
100039c7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100039ca:	83 c2 1a             	add    edx,0x1a
100039cd:	83 ec 04             	sub    esp,0x4
100039d0:	6a 08                	push   0x8
100039d2:	52                   	push   edx
100039d3:	50                   	push   eax
100039d4:	e8 fc ff ff ff       	call   100039d5 <firstRun(bool)+0x1080>	100039d5: R_386_PC32	VgaText::setCursor(int, int)
100039d9:	83 c4 10             	add    esp,0x10
100039dc:	a1 00 00 00 00       	mov    eax,ds:0x0	100039dd: R_386_32	term
100039e1:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
100039e7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100039ea:	01 ca                	add    edx,ecx
100039ec:	8a 12                	mov    dl,BYTE PTR [edx]
100039ee:	0f be d2             	movsx  edx,dl
100039f1:	6a 00                	push   0x0
100039f3:	6a 0f                	push   0xf
100039f5:	52                   	push   edx
100039f6:	50                   	push   eax
100039f7:	e8 fc ff ff ff       	call   100039f8 <firstRun(bool)+0x10a3>	100039f8: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100039fc:	83 c4 10             	add    esp,0x10
100039ff:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
10003a05:	0f be c0             	movsx  eax,al
10003a08:	8d 50 d0             	lea    edx,[eax-0x30]
10003a0b:	89 d0                	mov    eax,edx
10003a0d:	c1 e0 02             	shl    eax,0x2
10003a10:	01 d0                	add    eax,edx
10003a12:	01 c0                	add    eax,eax
10003a14:	89 c2                	mov    edx,eax
10003a16:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
10003a1c:	0f be c0             	movsx  eax,al
10003a1f:	83 e8 30             	sub    eax,0x30
10003a22:	01 d0                	add    eax,edx
10003a24:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10003a27:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
10003a2a:	b9 0c 00 00 00       	mov    ecx,0xc
10003a2f:	99                   	cdq    
10003a30:	f7 f9                	idiv   ecx
10003a32:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
10003a35:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10003a39:	75 07                	jne    10003a42 <firstRun(bool)+0x10ed>
10003a3b:	c7 45 d0 0c 00 00 00 	mov    DWORD PTR [ebp-0x30],0xc
10003a42:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
10003a48:	0f be c0             	movsx  eax,al
10003a4b:	8d 50 d0             	lea    edx,[eax-0x30]
10003a4e:	89 d0                	mov    eax,edx
10003a50:	c1 e0 02             	shl    eax,0x2
10003a53:	01 d0                	add    eax,edx
10003a55:	01 c0                	add    eax,eax
10003a57:	89 c2                	mov    edx,eax
10003a59:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
10003a5f:	0f be c0             	movsx  eax,al
10003a62:	83 e8 30             	sub    eax,0x30
10003a65:	01 d0                	add    eax,edx
10003a67:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
10003a6a:	83 ec 04             	sub    esp,0x4
10003a6d:	6a 10                	push   0x10
10003a6f:	6a 00                	push   0x0
10003a71:	8d 85 b6 fe ff ff    	lea    eax,[ebp-0x14a]
10003a77:	50                   	push   eax
10003a78:	e8 fc ff ff ff       	call   10003a79 <firstRun(bool)+0x1124>	10003a79: R_386_PC32	memset
10003a7d:	83 c4 10             	add    esp,0x10
10003a80:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [ebp-0x54],0x0
10003a87:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a8a:	8d 50 01             	lea    edx,[eax+0x1]
10003a8d:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a90:	c6 84 05 b6 fe ff ff 28 	mov    BYTE PTR [ebp+eax*1-0x14a],0x28
10003a98:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
10003a9b:	b8 67 66 66 66       	mov    eax,0x66666667
10003aa0:	f7 e9                	imul   ecx
10003aa2:	c1 fa 02             	sar    edx,0x2
10003aa5:	89 c8                	mov    eax,ecx
10003aa7:	c1 f8 1f             	sar    eax,0x1f
10003aaa:	29 c2                	sub    edx,eax
10003aac:	89 d0                	mov    eax,edx
10003aae:	8d 48 30             	lea    ecx,[eax+0x30]
10003ab1:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003ab4:	8d 50 01             	lea    edx,[eax+0x1]
10003ab7:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003aba:	88 ca                	mov    dl,cl
10003abc:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003ac3:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
10003ac6:	b8 67 66 66 66       	mov    eax,0x66666667
10003acb:	f7 e9                	imul   ecx
10003acd:	c1 fa 02             	sar    edx,0x2
10003ad0:	89 c8                	mov    eax,ecx
10003ad2:	c1 f8 1f             	sar    eax,0x1f
10003ad5:	29 c2                	sub    edx,eax
10003ad7:	89 d0                	mov    eax,edx
10003ad9:	c1 e0 02             	shl    eax,0x2
10003adc:	01 d0                	add    eax,edx
10003ade:	01 c0                	add    eax,eax
10003ae0:	29 c1                	sub    ecx,eax
10003ae2:	89 ca                	mov    edx,ecx
10003ae4:	88 d0                	mov    al,dl
10003ae6:	8d 48 30             	lea    ecx,[eax+0x30]
10003ae9:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003aec:	8d 50 01             	lea    edx,[eax+0x1]
10003aef:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003af2:	88 ca                	mov    dl,cl
10003af4:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003afb:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003afe:	8d 50 01             	lea    edx,[eax+0x1]
10003b01:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b04:	c6 84 05 b6 fe ff ff 3a 	mov    BYTE PTR [ebp+eax*1-0x14a],0x3a
10003b0c:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10003b0f:	b8 67 66 66 66       	mov    eax,0x66666667
10003b14:	f7 e9                	imul   ecx
10003b16:	c1 fa 02             	sar    edx,0x2
10003b19:	89 c8                	mov    eax,ecx
10003b1b:	c1 f8 1f             	sar    eax,0x1f
10003b1e:	29 c2                	sub    edx,eax
10003b20:	89 d0                	mov    eax,edx
10003b22:	8d 48 30             	lea    ecx,[eax+0x30]
10003b25:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b28:	8d 50 01             	lea    edx,[eax+0x1]
10003b2b:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b2e:	88 ca                	mov    dl,cl
10003b30:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003b37:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10003b3a:	b8 67 66 66 66       	mov    eax,0x66666667
10003b3f:	f7 e9                	imul   ecx
10003b41:	c1 fa 02             	sar    edx,0x2
10003b44:	89 c8                	mov    eax,ecx
10003b46:	c1 f8 1f             	sar    eax,0x1f
10003b49:	29 c2                	sub    edx,eax
10003b4b:	89 d0                	mov    eax,edx
10003b4d:	c1 e0 02             	shl    eax,0x2
10003b50:	01 d0                	add    eax,edx
10003b52:	01 c0                	add    eax,eax
10003b54:	29 c1                	sub    ecx,eax
10003b56:	89 ca                	mov    edx,ecx
10003b58:	88 d0                	mov    al,dl
10003b5a:	8d 48 30             	lea    ecx,[eax+0x30]
10003b5d:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b60:	8d 50 01             	lea    edx,[eax+0x1]
10003b63:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b66:	88 ca                	mov    dl,cl
10003b68:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003b6f:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b72:	8d 50 01             	lea    edx,[eax+0x1]
10003b75:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b78:	c6 84 05 b6 fe ff ff 20 	mov    BYTE PTR [ebp+eax*1-0x14a],0x20
10003b80:	83 7d b4 0b          	cmp    DWORD PTR [ebp-0x4c],0xb
10003b84:	7e 04                	jle    10003b8a <firstRun(bool)+0x1235>
10003b86:	b2 50                	mov    dl,0x50
10003b88:	eb 02                	jmp    10003b8c <firstRun(bool)+0x1237>
10003b8a:	b2 41                	mov    dl,0x41
10003b8c:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b8f:	8d 48 01             	lea    ecx,[eax+0x1]
10003b92:	89 4d ac             	mov    DWORD PTR [ebp-0x54],ecx
10003b95:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003b9c:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b9f:	8d 50 01             	lea    edx,[eax+0x1]
10003ba2:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003ba5:	c6 84 05 b6 fe ff ff 4d 	mov    BYTE PTR [ebp+eax*1-0x14a],0x4d
10003bad:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003bb0:	8d 50 01             	lea    edx,[eax+0x1]
10003bb3:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003bb6:	c6 84 05 b6 fe ff ff 29 	mov    BYTE PTR [ebp+eax*1-0x14a],0x29
10003bbe:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10003bc0: R_386_32	term
10003bc4:	83 ec 0c             	sub    esp,0xc
10003bc7:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003bcd:	50                   	push   eax
10003bce:	e8 fc ff ff ff       	call   10003bcf <firstRun(bool)+0x127a>	10003bcf: R_386_PC32	strlen
10003bd3:	83 c4 10             	add    esp,0x10
10003bd6:	83 c0 1e             	add    eax,0x1e
10003bd9:	83 ec 04             	sub    esp,0x4
10003bdc:	6a 08                	push   0x8
10003bde:	50                   	push   eax
10003bdf:	53                   	push   ebx
10003be0:	e8 fc ff ff ff       	call   10003be1 <firstRun(bool)+0x128c>	10003be1: R_386_PC32	VgaText::setCursor(int, int)
10003be5:	83 c4 10             	add    esp,0x10
10003be8:	a1 00 00 00 00       	mov    eax,ds:0x0	10003be9: R_386_32	term
10003bed:	83 ec 08             	sub    esp,0x8
10003bf0:	8d 95 b6 fe ff ff    	lea    edx,[ebp-0x14a]
10003bf6:	52                   	push   edx
10003bf7:	50                   	push   eax
10003bf8:	e8 fc ff ff ff       	call   10003bf9 <firstRun(bool)+0x12a4>	10003bf9: R_386_PC32	VgaText::puts(char const*)
10003bfd:	83 c4 10             	add    esp,0x10
10003c00:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c01: R_386_32	term
10003c05:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003c08:	83 c2 1a             	add    edx,0x1a
10003c0b:	83 ec 04             	sub    esp,0x4
10003c0e:	6a 08                	push   0x8
10003c10:	52                   	push   edx
10003c11:	50                   	push   eax
10003c12:	e8 fc ff ff ff       	call   10003c13 <firstRun(bool)+0x12be>	10003c13: R_386_PC32	VgaText::setCursor(int, int)
10003c17:	83 c4 10             	add    esp,0x10
10003c1a:	a0 00 00 00 00       	mov    al,ds:0x0	10003c1b: R_386_32	installKey
10003c1f:	84 c0                	test   al,al
10003c21:	0f 94 c0             	sete   al
10003c24:	84 c0                	test   al,al
10003c26:	74 02                	je     10003c2a <firstRun(bool)+0x12d5>
10003c28:	eb f0                	jmp    10003c1a <firstRun(bool)+0x12c5>
10003c2a:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c2b: R_386_32	term
10003c2f:	05 82 00 00 00       	add    eax,0x82
10003c34:	83 ec 04             	sub    esp,0x4
10003c37:	6a 10                	push   0x10
10003c39:	6a 00                	push   0x0
10003c3b:	50                   	push   eax
10003c3c:	e8 fc ff ff ff       	call   10003c3d <firstRun(bool)+0x12e8>	10003c3d: R_386_PC32	memset
10003c41:	83 c4 10             	add    esp,0x10
10003c44:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c45: R_386_32	term
10003c49:	05 02 01 00 00       	add    eax,0x102
10003c4e:	83 ec 04             	sub    esp,0x4
10003c51:	6a 10                	push   0x10
10003c53:	6a 00                	push   0x0
10003c55:	50                   	push   eax
10003c56:	e8 fc ff ff ff       	call   10003c57 <firstRun(bool)+0x1302>	10003c57: R_386_PC32	memset
10003c5b:	83 c4 10             	add    esp,0x10
10003c5e:	a0 00 00 00 00       	mov    al,ds:0x0	10003c5f: R_386_32	installKey
10003c63:	3c 03                	cmp    al,0x3
10003c65:	74 09                	je     10003c70 <firstRun(bool)+0x131b>
10003c67:	a0 00 00 00 00       	mov    al,ds:0x0	10003c68: R_386_32	installKey
10003c6c:	3c 08                	cmp    al,0x8
10003c6e:	75 04                	jne    10003c74 <firstRun(bool)+0x131f>
10003c70:	b0 01                	mov    al,0x1
10003c72:	eb 02                	jmp    10003c76 <firstRun(bool)+0x1321>
10003c74:	b0 00                	mov    al,0x0
10003c76:	84 c0                	test   al,al
10003c78:	74 58                	je     10003cd2 <firstRun(bool)+0x137d>
10003c7a:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
10003c7d:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10003c81:	75 16                	jne    10003c99 <firstRun(bool)+0x1344>
10003c83:	83 ec 0c             	sub    esp,0xc
10003c86:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003c8c:	50                   	push   eax
10003c8d:	e8 fc ff ff ff       	call   10003c8e <firstRun(bool)+0x1339>	10003c8e: R_386_PC32	strlen
10003c92:	83 c4 10             	add    esp,0x10
10003c95:	48                   	dec    eax
10003c96:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10003c99:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003c9f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003ca2:	01 d0                	add    eax,edx
10003ca4:	8a 00                	mov    al,BYTE PTR [eax]
10003ca6:	3c 20                	cmp    al,0x20
10003ca8:	74 d0                	je     10003c7a <firstRun(bool)+0x1325>
10003caa:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003cb0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003cb3:	01 d0                	add    eax,edx
10003cb5:	8a 00                	mov    al,BYTE PTR [eax]
10003cb7:	3c 2f                	cmp    al,0x2f
10003cb9:	74 bf                	je     10003c7a <firstRun(bool)+0x1325>
10003cbb:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003cc1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003cc4:	01 d0                	add    eax,edx
10003cc6:	8a 00                	mov    al,BYTE PTR [eax]
10003cc8:	3c 3a                	cmp    al,0x3a
10003cca:	0f 85 f6 04 00 00    	jne    100041c6 <firstRun(bool)+0x1871>
10003cd0:	eb a8                	jmp    10003c7a <firstRun(bool)+0x1325>
10003cd2:	a0 00 00 00 00       	mov    al,ds:0x0	10003cd3: R_386_32	installKey
10003cd7:	3c 2f                	cmp    al,0x2f
10003cd9:	7e 09                	jle    10003ce4 <firstRun(bool)+0x138f>
10003cdb:	a0 00 00 00 00       	mov    al,ds:0x0	10003cdc: R_386_32	installKey
10003ce0:	3c 39                	cmp    al,0x39
10003ce2:	7e 12                	jle    10003cf6 <firstRun(bool)+0x13a1>
10003ce4:	a0 00 00 00 00       	mov    al,ds:0x0	10003ce5: R_386_32	installKey
10003ce9:	3c 20                	cmp    al,0x20
10003ceb:	74 09                	je     10003cf6 <firstRun(bool)+0x13a1>
10003ced:	a0 00 00 00 00       	mov    al,ds:0x0	10003cee: R_386_32	installKey
10003cf2:	3c 04                	cmp    al,0x4
10003cf4:	75 04                	jne    10003cfa <firstRun(bool)+0x13a5>
10003cf6:	b0 01                	mov    al,0x1
10003cf8:	eb 02                	jmp    10003cfc <firstRun(bool)+0x13a7>
10003cfa:	b0 00                	mov    al,0x0
10003cfc:	84 c0                	test   al,al
10003cfe:	0f 84 cf 01 00 00    	je     10003ed3 <firstRun(bool)+0x157e>
10003d04:	a0 00 00 00 00       	mov    al,ds:0x0	10003d05: R_386_32	installKey
10003d09:	3c 2f                	cmp    al,0x2f
10003d0b:	7e 0d                	jle    10003d1a <firstRun(bool)+0x13c5>
10003d0d:	a0 00 00 00 00       	mov    al,ds:0x0	10003d0e: R_386_32	installKey
10003d12:	3c 39                	cmp    al,0x39
10003d14:	7f 04                	jg     10003d1a <firstRun(bool)+0x13c5>
10003d16:	b0 01                	mov    al,0x1
10003d18:	eb 02                	jmp    10003d1c <firstRun(bool)+0x13c7>
10003d1a:	b0 00                	mov    al,0x0
10003d1c:	84 c0                	test   al,al
10003d1e:	0f 84 51 01 00 00    	je     10003e75 <firstRun(bool)+0x1520>
10003d24:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10003d28:	75 0d                	jne    10003d37 <firstRun(bool)+0x13e2>
10003d2a:	a0 00 00 00 00       	mov    al,ds:0x0	10003d2b: R_386_32	installKey
10003d2f:	3c 33                	cmp    al,0x33
10003d31:	7e 04                	jle    10003d37 <firstRun(bool)+0x13e2>
10003d33:	b0 01                	mov    al,0x1
10003d35:	eb 02                	jmp    10003d39 <firstRun(bool)+0x13e4>
10003d37:	b0 00                	mov    al,0x0
10003d39:	84 c0                	test   al,al
10003d3b:	74 28                	je     10003d65 <firstRun(bool)+0x1410>
10003d3d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d40:	8d 50 01             	lea    edx,[eax+0x1]
10003d43:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003d46:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003d4e:	a0 00 00 00 00       	mov    al,ds:0x0	10003d4f: R_386_32	installKey
10003d53:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003d59:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003d5c:	01 ca                	add    edx,ecx
10003d5e:	88 02                	mov    BYTE PTR [edx],al
10003d60:	e9 10 01 00 00       	jmp    10003e75 <firstRun(bool)+0x1520>
10003d65:	83 7d e4 03          	cmp    DWORD PTR [ebp-0x1c],0x3
10003d69:	75 0d                	jne    10003d78 <firstRun(bool)+0x1423>
10003d6b:	a0 00 00 00 00       	mov    al,ds:0x0	10003d6c: R_386_32	installKey
10003d70:	3c 31                	cmp    al,0x31
10003d72:	7e 04                	jle    10003d78 <firstRun(bool)+0x1423>
10003d74:	b0 01                	mov    al,0x1
10003d76:	eb 02                	jmp    10003d7a <firstRun(bool)+0x1425>
10003d78:	b0 00                	mov    al,0x0
10003d7a:	84 c0                	test   al,al
10003d7c:	74 28                	je     10003da6 <firstRun(bool)+0x1451>
10003d7e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d81:	8d 50 01             	lea    edx,[eax+0x1]
10003d84:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003d87:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003d8f:	a0 00 00 00 00       	mov    al,ds:0x0	10003d90: R_386_32	installKey
10003d94:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003d9a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003d9d:	01 ca                	add    edx,ecx
10003d9f:	88 02                	mov    BYTE PTR [edx],al
10003da1:	e9 cf 00 00 00       	jmp    10003e75 <firstRun(bool)+0x1520>
10003da6:	83 7d e4 0b          	cmp    DWORD PTR [ebp-0x1c],0xb
10003daa:	75 0d                	jne    10003db9 <firstRun(bool)+0x1464>
10003dac:	a0 00 00 00 00       	mov    al,ds:0x0	10003dad: R_386_32	installKey
10003db1:	3c 32                	cmp    al,0x32
10003db3:	7e 04                	jle    10003db9 <firstRun(bool)+0x1464>
10003db5:	b0 01                	mov    al,0x1
10003db7:	eb 02                	jmp    10003dbb <firstRun(bool)+0x1466>
10003db9:	b0 00                	mov    al,0x0
10003dbb:	84 c0                	test   al,al
10003dbd:	74 28                	je     10003de7 <firstRun(bool)+0x1492>
10003dbf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003dc2:	8d 50 01             	lea    edx,[eax+0x1]
10003dc5:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003dc8:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003dd0:	a0 00 00 00 00       	mov    al,ds:0x0	10003dd1: R_386_32	installKey
10003dd5:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003ddb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003dde:	01 ca                	add    edx,ecx
10003de0:	88 02                	mov    BYTE PTR [edx],al
10003de2:	e9 8e 00 00 00       	jmp    10003e75 <firstRun(bool)+0x1520>
10003de7:	83 7d e4 0e          	cmp    DWORD PTR [ebp-0x1c],0xe
10003deb:	75 0d                	jne    10003dfa <firstRun(bool)+0x14a5>
10003ded:	a0 00 00 00 00       	mov    al,ds:0x0	10003dee: R_386_32	installKey
10003df2:	3c 35                	cmp    al,0x35
10003df4:	7e 04                	jle    10003dfa <firstRun(bool)+0x14a5>
10003df6:	b0 01                	mov    al,0x1
10003df8:	eb 02                	jmp    10003dfc <firstRun(bool)+0x14a7>
10003dfa:	b0 00                	mov    al,0x0
10003dfc:	84 c0                	test   al,al
10003dfe:	74 25                	je     10003e25 <firstRun(bool)+0x14d0>
10003e00:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e03:	8d 50 01             	lea    edx,[eax+0x1]
10003e06:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003e09:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003e11:	a0 00 00 00 00       	mov    al,ds:0x0	10003e12: R_386_32	installKey
10003e16:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003e1c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003e1f:	01 ca                	add    edx,ecx
10003e21:	88 02                	mov    BYTE PTR [edx],al
10003e23:	eb 50                	jmp    10003e75 <firstRun(bool)+0x1520>
10003e25:	83 7d e4 11          	cmp    DWORD PTR [ebp-0x1c],0x11
10003e29:	75 0d                	jne    10003e38 <firstRun(bool)+0x14e3>
10003e2b:	a0 00 00 00 00       	mov    al,ds:0x0	10003e2c: R_386_32	installKey
10003e30:	3c 35                	cmp    al,0x35
10003e32:	7e 04                	jle    10003e38 <firstRun(bool)+0x14e3>
10003e34:	b0 01                	mov    al,0x1
10003e36:	eb 02                	jmp    10003e3a <firstRun(bool)+0x14e5>
10003e38:	b0 00                	mov    al,0x0
10003e3a:	84 c0                	test   al,al
10003e3c:	74 25                	je     10003e63 <firstRun(bool)+0x150e>
10003e3e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e41:	8d 50 01             	lea    edx,[eax+0x1]
10003e44:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003e47:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003e4f:	a0 00 00 00 00       	mov    al,ds:0x0	10003e50: R_386_32	installKey
10003e54:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003e5a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003e5d:	01 ca                	add    edx,ecx
10003e5f:	88 02                	mov    BYTE PTR [edx],al
10003e61:	eb 12                	jmp    10003e75 <firstRun(bool)+0x1520>
10003e63:	a0 00 00 00 00       	mov    al,ds:0x0	10003e64: R_386_32	installKey
10003e68:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003e6e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003e71:	01 ca                	add    edx,ecx
10003e73:	88 02                	mov    BYTE PTR [edx],al
10003e75:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10003e78:	83 ec 0c             	sub    esp,0xc
10003e7b:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003e81:	50                   	push   eax
10003e82:	e8 fc ff ff ff       	call   10003e83 <firstRun(bool)+0x152e>	10003e83: R_386_PC32	strlen
10003e87:	83 c4 10             	add    esp,0x10
10003e8a:	89 c2                	mov    edx,eax
10003e8c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e8f:	39 c2                	cmp    edx,eax
10003e91:	77 07                	ja     10003e9a <firstRun(bool)+0x1545>
10003e93:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003e9a:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003ea0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003ea3:	01 d0                	add    eax,edx
10003ea5:	8a 00                	mov    al,BYTE PTR [eax]
10003ea7:	3c 20                	cmp    al,0x20
10003ea9:	74 ca                	je     10003e75 <firstRun(bool)+0x1520>
10003eab:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003eb1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003eb4:	01 d0                	add    eax,edx
10003eb6:	8a 00                	mov    al,BYTE PTR [eax]
10003eb8:	3c 2f                	cmp    al,0x2f
10003eba:	74 b9                	je     10003e75 <firstRun(bool)+0x1520>
10003ebc:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003ec2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003ec5:	01 d0                	add    eax,edx
10003ec7:	8a 00                	mov    al,BYTE PTR [eax]
10003ec9:	3c 3a                	cmp    al,0x3a
10003ecb:	0f 85 f5 02 00 00    	jne    100041c6 <firstRun(bool)+0x1871>
10003ed1:	eb a2                	jmp    10003e75 <firstRun(bool)+0x1520>
10003ed3:	a0 00 00 00 00       	mov    al,ds:0x0	10003ed4: R_386_32	installKey
10003ed8:	3c 0a                	cmp    al,0xa
10003eda:	0f 94 c0             	sete   al
10003edd:	84 c0                	test   al,al
10003edf:	0f 84 cf 02 00 00    	je     100041b4 <firstRun(bool)+0x185f>
10003ee5:	8a 85 40 ff ff ff    	mov    al,BYTE PTR [ebp-0xc0]
10003eeb:	0f be c0             	movsx  eax,al
10003eee:	8d 50 d0             	lea    edx,[eax-0x30]
10003ef1:	89 d0                	mov    eax,edx
10003ef3:	c1 e0 02             	shl    eax,0x2
10003ef6:	01 d0                	add    eax,edx
10003ef8:	01 c0                	add    eax,eax
10003efa:	89 c2                	mov    edx,eax
10003efc:	8a 85 41 ff ff ff    	mov    al,BYTE PTR [ebp-0xbf]
10003f02:	0f be c0             	movsx  eax,al
10003f05:	83 e8 30             	sub    eax,0x30
10003f08:	01 d0                	add    eax,edx
10003f0a:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10003f0d:	8a 85 43 ff ff ff    	mov    al,BYTE PTR [ebp-0xbd]
10003f13:	0f be c0             	movsx  eax,al
10003f16:	8d 50 d0             	lea    edx,[eax-0x30]
10003f19:	89 d0                	mov    eax,edx
10003f1b:	c1 e0 02             	shl    eax,0x2
10003f1e:	01 d0                	add    eax,edx
10003f20:	01 c0                	add    eax,eax
10003f22:	89 c2                	mov    edx,eax
10003f24:	8a 85 44 ff ff ff    	mov    al,BYTE PTR [ebp-0xbc]
10003f2a:	0f be c0             	movsx  eax,al
10003f2d:	83 e8 30             	sub    eax,0x30
10003f30:	01 d0                	add    eax,edx
10003f32:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10003f35:	8a 85 46 ff ff ff    	mov    al,BYTE PTR [ebp-0xba]
10003f3b:	0f be c0             	movsx  eax,al
10003f3e:	8d 50 d0             	lea    edx,[eax-0x30]
10003f41:	89 d0                	mov    eax,edx
10003f43:	c1 e0 02             	shl    eax,0x2
10003f46:	01 d0                	add    eax,edx
10003f48:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f4f:	01 d0                	add    eax,edx
10003f51:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f58:	01 d0                	add    eax,edx
10003f5a:	c1 e0 03             	shl    eax,0x3
10003f5d:	89 c1                	mov    ecx,eax
10003f5f:	8a 85 47 ff ff ff    	mov    al,BYTE PTR [ebp-0xb9]
10003f65:	0f be c0             	movsx  eax,al
10003f68:	8d 50 d0             	lea    edx,[eax-0x30]
10003f6b:	89 d0                	mov    eax,edx
10003f6d:	c1 e0 02             	shl    eax,0x2
10003f70:	01 d0                	add    eax,edx
10003f72:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f79:	01 d0                	add    eax,edx
10003f7b:	c1 e0 02             	shl    eax,0x2
10003f7e:	01 c1                	add    ecx,eax
10003f80:	8a 85 48 ff ff ff    	mov    al,BYTE PTR [ebp-0xb8]
10003f86:	0f be c0             	movsx  eax,al
10003f89:	8d 50 d0             	lea    edx,[eax-0x30]
10003f8c:	89 d0                	mov    eax,edx
10003f8e:	c1 e0 02             	shl    eax,0x2
10003f91:	01 d0                	add    eax,edx
10003f93:	01 c0                	add    eax,eax
10003f95:	8d 14 01             	lea    edx,[ecx+eax*1]
10003f98:	8a 85 49 ff ff ff    	mov    al,BYTE PTR [ebp-0xb7]
10003f9e:	0f be c0             	movsx  eax,al
10003fa1:	83 e8 30             	sub    eax,0x30
10003fa4:	01 d0                	add    eax,edx
10003fa6:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10003fa9:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
10003faf:	0f be c0             	movsx  eax,al
10003fb2:	8d 50 d0             	lea    edx,[eax-0x30]
10003fb5:	89 d0                	mov    eax,edx
10003fb7:	c1 e0 02             	shl    eax,0x2
10003fba:	01 d0                	add    eax,edx
10003fbc:	01 c0                	add    eax,eax
10003fbe:	89 c2                	mov    edx,eax
10003fc0:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
10003fc6:	0f be c0             	movsx  eax,al
10003fc9:	83 e8 30             	sub    eax,0x30
10003fcc:	01 d0                	add    eax,edx
10003fce:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10003fd1:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
10003fd7:	0f be c0             	movsx  eax,al
10003fda:	8d 50 d0             	lea    edx,[eax-0x30]
10003fdd:	89 d0                	mov    eax,edx
10003fdf:	c1 e0 02             	shl    eax,0x2
10003fe2:	01 d0                	add    eax,edx
10003fe4:	01 c0                	add    eax,eax
10003fe6:	89 c2                	mov    edx,eax
10003fe8:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
10003fee:	0f be c0             	movsx  eax,al
10003ff1:	83 e8 30             	sub    eax,0x30
10003ff4:	01 d0                	add    eax,edx
10003ff6:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10003ff9:	8a 85 51 ff ff ff    	mov    al,BYTE PTR [ebp-0xaf]
10003fff:	0f be c0             	movsx  eax,al
10004002:	8d 50 d0             	lea    edx,[eax-0x30]
10004005:	89 d0                	mov    eax,edx
10004007:	c1 e0 02             	shl    eax,0x2
1000400a:	01 d0                	add    eax,edx
1000400c:	01 c0                	add    eax,eax
1000400e:	89 c2                	mov    edx,eax
10004010:	8a 85 52 ff ff ff    	mov    al,BYTE PTR [ebp-0xae]
10004016:	0f be c0             	movsx  eax,al
10004019:	83 e8 30             	sub    eax,0x30
1000401c:	01 d0                	add    eax,edx
1000401e:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
10004021:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10004024:	83 e0 03             	and    eax,0x3
10004027:	85 c0                	test   eax,eax
10004029:	75 1f                	jne    1000404a <firstRun(bool)+0x16f5>
1000402b:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
1000402e:	b9 19 00 00 00       	mov    ecx,0x19
10004033:	99                   	cdq    
10004034:	f7 f9                	idiv   ecx
10004036:	89 d0                	mov    eax,edx
10004038:	85 c0                	test   eax,eax
1000403a:	75 0a                	jne    10004046 <firstRun(bool)+0x16f1>
1000403c:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
1000403f:	83 e0 0f             	and    eax,0xf
10004042:	85 c0                	test   eax,eax
10004044:	75 04                	jne    1000404a <firstRun(bool)+0x16f5>
10004046:	b0 01                	mov    al,0x1
10004048:	eb 02                	jmp    1000404c <firstRun(bool)+0x16f7>
1000404a:	b0 00                	mov    al,0x0
1000404c:	88 45 93             	mov    BYTE PTR [ebp-0x6d],al
1000404f:	83 7d a8 1f          	cmp    DWORD PTR [ebp-0x58],0x1f
10004053:	7e 0c                	jle    10004061 <firstRun(bool)+0x170c>
10004055:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000405c:	e9 65 01 00 00       	jmp    100041c6 <firstRun(bool)+0x1871>
10004061:	83 7d a8 1e          	cmp    DWORD PTR [ebp-0x58],0x1e
10004065:	7e 2a                	jle    10004091 <firstRun(bool)+0x173c>
10004067:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
1000406b:	74 18                	je     10004085 <firstRun(bool)+0x1730>
1000406d:	83 7d a4 04          	cmp    DWORD PTR [ebp-0x5c],0x4
10004071:	74 12                	je     10004085 <firstRun(bool)+0x1730>
10004073:	83 7d a4 06          	cmp    DWORD PTR [ebp-0x5c],0x6
10004077:	74 0c                	je     10004085 <firstRun(bool)+0x1730>
10004079:	83 7d a4 09          	cmp    DWORD PTR [ebp-0x5c],0x9
1000407d:	74 06                	je     10004085 <firstRun(bool)+0x1730>
1000407f:	83 7d a4 0b          	cmp    DWORD PTR [ebp-0x5c],0xb
10004083:	75 0c                	jne    10004091 <firstRun(bool)+0x173c>
10004085:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000408c:	e9 35 01 00 00       	jmp    100041c6 <firstRun(bool)+0x1871>
10004091:	83 7d a8 1d          	cmp    DWORD PTR [ebp-0x58],0x1d
10004095:	75 1c                	jne    100040b3 <firstRun(bool)+0x175e>
10004097:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
1000409b:	75 16                	jne    100040b3 <firstRun(bool)+0x175e>
1000409d:	8a 45 93             	mov    al,BYTE PTR [ebp-0x6d]
100040a0:	83 f0 01             	xor    eax,0x1
100040a3:	84 c0                	test   al,al
100040a5:	74 0c                	je     100040b3 <firstRun(bool)+0x175e>
100040a7:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100040ae:	e9 13 01 00 00       	jmp    100041c6 <firstRun(bool)+0x1871>
100040b3:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
100040b7:	75 0c                	jne    100040c5 <firstRun(bool)+0x1770>
100040b9:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100040c0:	e9 01 01 00 00       	jmp    100041c6 <firstRun(bool)+0x1871>
100040c5:	83 7d a4 0c          	cmp    DWORD PTR [ebp-0x5c],0xc
100040c9:	7f 06                	jg     100040d1 <firstRun(bool)+0x177c>
100040cb:	83 7d a4 00          	cmp    DWORD PTR [ebp-0x5c],0x0
100040cf:	75 0c                	jne    100040dd <firstRun(bool)+0x1788>
100040d1:	c7 45 e4 03 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x3
100040d8:	e9 e9 00 00 00       	jmp    100041c6 <firstRun(bool)+0x1871>
100040dd:	81 7d a0 b7 0b 00 00 	cmp    DWORD PTR [ebp-0x60],0xbb7
100040e4:	7f 09                	jg     100040ef <firstRun(bool)+0x179a>
100040e6:	81 7d a0 b1 07 00 00 	cmp    DWORD PTR [ebp-0x60],0x7b1
100040ed:	7f 0c                	jg     100040fb <firstRun(bool)+0x17a6>
100040ef:	c7 45 e4 06 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x6
100040f6:	e9 cb 00 00 00       	jmp    100041c6 <firstRun(bool)+0x1871>
100040fb:	83 7d 9c 17          	cmp    DWORD PTR [ebp-0x64],0x17
100040ff:	7e 0c                	jle    1000410d <firstRun(bool)+0x17b8>
10004101:	c7 45 e4 0b 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xb
10004108:	e9 b9 00 00 00       	jmp    100041c6 <firstRun(bool)+0x1871>
1000410d:	83 7d 98 3b          	cmp    DWORD PTR [ebp-0x68],0x3b
10004111:	7e 0c                	jle    1000411f <firstRun(bool)+0x17ca>
10004113:	c7 45 e4 0e 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xe
1000411a:	e9 a7 00 00 00       	jmp    100041c6 <firstRun(bool)+0x1871>
1000411f:	83 7d 94 3b          	cmp    DWORD PTR [ebp-0x6c],0x3b
10004123:	7e 0c                	jle    10004131 <firstRun(bool)+0x17dc>
10004125:	c7 45 e4 11 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x11
1000412c:	e9 95 00 00 00       	jmp    100041c6 <firstRun(bool)+0x1871>
10004131:	8b 45 98             	mov    eax,DWORD PTR [ebp-0x68]
10004134:	88 85 d9 fe ff ff    	mov    BYTE PTR [ebp-0x127],al
1000413a:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
1000413d:	88 85 da fe ff ff    	mov    BYTE PTR [ebp-0x126],al
10004143:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
10004146:	88 85 d8 fe ff ff    	mov    BYTE PTR [ebp-0x128],al
1000414c:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
1000414f:	88 85 d4 fe ff ff    	mov    BYTE PTR [ebp-0x12c],al
10004155:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
10004158:	88 85 d5 fe ff ff    	mov    BYTE PTR [ebp-0x12b],al
1000415e:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10004161:	66 89 85 d6 fe ff ff 	mov    WORD PTR [ebp-0x12a],ax
10004168:	a1 00 00 00 00       	mov    eax,ds:0x0	10004169: R_386_32	Krnl::computer
1000416d:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
10004173:	a1 00 00 00 00       	mov    eax,ds:0x0	10004174: R_386_32	Krnl::computer
10004178:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
1000417e:	8b 00                	mov    eax,DWORD PTR [eax]
10004180:	83 c0 30             	add    eax,0x30
10004183:	8b 00                	mov    eax,DWORD PTR [eax]
10004185:	83 ec 04             	sub    esp,0x4
10004188:	ff b5 d8 fe ff ff    	push   DWORD PTR [ebp-0x128]
1000418e:	ff b5 d4 fe ff ff    	push   DWORD PTR [ebp-0x12c]
10004194:	52                   	push   edx
10004195:	ff d0                	call   eax
10004197:	83 c4 10             	add    esp,0x10
1000419a:	90                   	nop
1000419b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000419d: R_386_32	installKey
100041a2:	83 ec 0c             	sub    esp,0xc
100041a5:	68 a0 0f 00 00       	push   0xfa0
100041aa:	e8 fc ff ff ff       	call   100041ab <firstRun(bool)+0x1856>	100041ab: R_386_PC32	milliTenthSleep(unsigned int)
100041af:	83 c4 10             	add    esp,0x10
100041b2:	eb 2f                	jmp    100041e3 <firstRun(bool)+0x188e>
100041b4:	a0 00 00 00 00       	mov    al,ds:0x0	100041b5: R_386_32	installKey
100041b9:	3c 1b                	cmp    al,0x1b
100041bb:	0f 94 c0             	sete   al
100041be:	84 c0                	test   al,al
100041c0:	0f 85 06 e9 ff ff    	jne    10002acc <firstRun(bool)+0x177>
100041c6:	83 ec 0c             	sub    esp,0xc
100041c9:	68 f4 01 00 00       	push   0x1f4
100041ce:	e8 fc ff ff ff       	call   100041cf <firstRun(bool)+0x187a>	100041cf: R_386_PC32	milliTenthSleep(unsigned int)
100041d3:	83 c4 10             	add    esp,0x10
100041d6:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100041d8: R_386_32	installKey
100041dd:	e9 b3 f7 ff ff       	jmp    10003995 <firstRun(bool)+0x1040>
100041e2:	90                   	nop
100041e3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100041e5: R_386_32	installKey
100041ea:	a0 00 00 00 00       	mov    al,ds:0x0	100041eb: R_386_32	firstTimeEnteringTimezone
100041ef:	84 c0                	test   al,al
100041f1:	74 18                	je     1000420b <firstRun(bool)+0x18b6>
100041f3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100041f5: R_386_32	firstTimeEnteringTimezone
100041fa:	c7 05 00 00 00 00 3b 00 00 00 	mov    DWORD PTR ds:0x0,0x3b	100041fc: R_386_32	tzsel
10004204:	c7 45 dc 30 00 00 00 	mov    DWORD PTR [ebp-0x24],0x30
1000420b:	e8 fc ff ff ff       	call   1000420c <firstRun(bool)+0x18b7>	1000420c: R_386_PC32	drawBootScreen()
10004210:	83 ec 0c             	sub    esp,0xc
10004213:	68 eb a9 00 10       	push   0x1000a9eb	10004214: R_386_32	.text
10004218:	6a 14                	push   0x14
1000421a:	6a 3c                	push   0x3c
1000421c:	6a 01                	push   0x1
1000421e:	6a 12                	push   0x12
10004220:	e8 fc ff ff ff       	call   10004221 <firstRun(bool)+0x18cc>	10004221: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004225:	83 c4 20             	add    esp,0x20
10004228:	a1 00 00 00 00       	mov    eax,ds:0x0	10004229: R_386_32	term
1000422d:	83 ec 04             	sub    esp,0x4
10004230:	6a 04                	push   0x4
10004232:	6a 14                	push   0x14
10004234:	50                   	push   eax
10004235:	e8 fc ff ff ff       	call   10004236 <firstRun(bool)+0x18e1>	10004236: R_386_PC32	VgaText::setCursor(int, int)
1000423a:	83 c4 10             	add    esp,0x10
1000423d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000423e: R_386_32	term
10004242:	83 ec 08             	sub    esp,0x8
10004245:	68 78 aa 00 10       	push   0x1000aa78	10004246: R_386_32	.text
1000424a:	50                   	push   eax
1000424b:	e8 fc ff ff ff       	call   1000424c <firstRun(bool)+0x18f7>	1000424c: R_386_PC32	VgaText::puts(char const*)
10004250:	83 c4 10             	add    esp,0x10
10004253:	a1 00 00 00 00       	mov    eax,ds:0x0	10004254: R_386_32	term
10004258:	83 ec 04             	sub    esp,0x4
1000425b:	6a 18                	push   0x18
1000425d:	6a 11                	push   0x11
1000425f:	50                   	push   eax
10004260:	e8 fc ff ff ff       	call   10004261 <firstRun(bool)+0x190c>	10004261: R_386_PC32	VgaText::setCursor(int, int)
10004265:	83 c4 10             	add    esp,0x10
10004268:	a1 00 00 00 00       	mov    eax,ds:0x0	10004269: R_386_32	term
1000426d:	6a 0b                	push   0xb
1000426f:	6a 03                	push   0x3
10004271:	68 62 aa 00 10       	push   0x1000aa62	10004272: R_386_32	.text
10004276:	50                   	push   eax
10004277:	e8 fc ff ff ff       	call   10004278 <firstRun(bool)+0x1923>	10004278: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000427c:	83 c4 10             	add    esp,0x10
1000427f:	e8 fc ff ff ff       	call   10004280 <firstRun(bool)+0x192b>	10004280: R_386_PC32	loadTimezoneStrings()
10004284:	89 45 8c             	mov    DWORD PTR [ebp-0x74],eax
10004287:	b8 d2 00 00 00       	mov    eax,0xd2
1000428c:	99                   	cdq    
1000428d:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
10004290:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
10004293:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
1000429a:	83 7d cc 0d          	cmp    DWORD PTR [ebp-0x34],0xd
1000429e:	7f 32                	jg     100042d2 <firstRun(bool)+0x197d>
100042a0:	a1 00 00 00 00       	mov    eax,ds:0x0	100042a1: R_386_32	term
100042a5:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
100042a8:	83 c2 07             	add    edx,0x7
100042ab:	83 ec 04             	sub    esp,0x4
100042ae:	52                   	push   edx
100042af:	6a 4b                	push   0x4b
100042b1:	50                   	push   eax
100042b2:	e8 fc ff ff ff       	call   100042b3 <firstRun(bool)+0x195e>	100042b3: R_386_PC32	VgaText::setCursor(int, int)
100042b7:	83 c4 10             	add    esp,0x10
100042ba:	a1 00 00 00 00       	mov    eax,ds:0x0	100042bb: R_386_32	term
100042bf:	83 ec 08             	sub    esp,0x8
100042c2:	6a 20                	push   0x20
100042c4:	50                   	push   eax
100042c5:	e8 fc ff ff ff       	call   100042c6 <firstRun(bool)+0x1971>	100042c6: R_386_PC32	VgaText::putchar(char)
100042ca:	83 c4 10             	add    esp,0x10
100042cd:	ff 45 cc             	inc    DWORD PTR [ebp-0x34]
100042d0:	eb c8                	jmp    1000429a <firstRun(bool)+0x1945>
100042d2:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
100042d9:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
100042dc:	3b 45 88             	cmp    eax,DWORD PTR [ebp-0x78]
100042df:	7d 48                	jge    10004329 <firstRun(bool)+0x19d4>
100042e1:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100042e3: R_386_32	term
100042e7:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
100042ea:	8d 58 07             	lea    ebx,[eax+0x7]
100042ed:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100042f0:	89 d0                	mov    eax,edx
100042f2:	01 c0                	add    eax,eax
100042f4:	01 d0                	add    eax,edx
100042f6:	01 c0                	add    eax,eax
100042f8:	01 d0                	add    eax,edx
100042fa:	01 c0                	add    eax,eax
100042fc:	99                   	cdq    
100042fd:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
10004300:	01 d8                	add    eax,ebx
10004302:	83 ec 04             	sub    esp,0x4
10004305:	50                   	push   eax
10004306:	6a 4b                	push   0x4b
10004308:	51                   	push   ecx
10004309:	e8 fc ff ff ff       	call   1000430a <firstRun(bool)+0x19b5>	1000430a: R_386_PC32	VgaText::setCursor(int, int)
1000430e:	83 c4 10             	add    esp,0x10
10004311:	a1 00 00 00 00       	mov    eax,ds:0x0	10004312: R_386_32	term
10004316:	83 ec 08             	sub    esp,0x8
10004319:	6a db                	push   0xffffffdb
1000431b:	50                   	push   eax
1000431c:	e8 fc ff ff ff       	call   1000431d <firstRun(bool)+0x19c8>	1000431d: R_386_PC32	VgaText::putchar(char)
10004321:	83 c4 10             	add    esp,0x10
10004324:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
10004327:	eb b0                	jmp    100042d9 <firstRun(bool)+0x1984>
10004329:	a1 00 00 00 00       	mov    eax,ds:0x0	1000432a: R_386_32	term
1000432e:	83 ec 04             	sub    esp,0x4
10004331:	6a 06                	push   0x6
10004333:	6a 4b                	push   0x4b
10004335:	50                   	push   eax
10004336:	e8 fc ff ff ff       	call   10004337 <firstRun(bool)+0x19e2>	10004337: R_386_PC32	VgaText::setCursor(int, int)
1000433b:	83 c4 10             	add    esp,0x10
1000433e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000433f: R_386_32	term
10004343:	83 ec 08             	sub    esp,0x8
10004346:	6a 1e                	push   0x1e
10004348:	50                   	push   eax
10004349:	e8 fc ff ff ff       	call   1000434a <firstRun(bool)+0x19f5>	1000434a: R_386_PC32	VgaText::putchar(char)
1000434e:	83 c4 10             	add    esp,0x10
10004351:	a1 00 00 00 00       	mov    eax,ds:0x0	10004352: R_386_32	term
10004356:	83 ec 04             	sub    esp,0x4
10004359:	6a 14                	push   0x14
1000435b:	6a 4b                	push   0x4b
1000435d:	50                   	push   eax
1000435e:	e8 fc ff ff ff       	call   1000435f <firstRun(bool)+0x1a0a>	1000435f: R_386_PC32	VgaText::setCursor(int, int)
10004363:	83 c4 10             	add    esp,0x10
10004366:	a1 00 00 00 00       	mov    eax,ds:0x0	10004367: R_386_32	term
1000436b:	83 ec 08             	sub    esp,0x8
1000436e:	6a 1f                	push   0x1f
10004370:	50                   	push   eax
10004371:	e8 fc ff ff ff       	call   10004372 <firstRun(bool)+0x1a1d>	10004372: R_386_PC32	VgaText::putchar(char)
10004376:	83 c4 10             	add    esp,0x10
10004379:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
10004380:	83 7d c4 0e          	cmp    DWORD PTR [ebp-0x3c],0xe
10004384:	7f 7e                	jg     10004404 <firstRun(bool)+0x1aaf>
10004386:	a1 00 00 00 00       	mov    eax,ds:0x0	10004387: R_386_32	term
1000438b:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
1000438e:	83 c2 06             	add    edx,0x6
10004391:	83 ec 04             	sub    esp,0x4
10004394:	52                   	push   edx
10004395:	6a 14                	push   0x14
10004397:	50                   	push   eax
10004398:	e8 fc ff ff ff       	call   10004399 <firstRun(bool)+0x1a44>	10004399: R_386_PC32	VgaText::setCursor(int, int)
1000439d:	83 c4 10             	add    esp,0x10
100043a0:	a1 00 00 00 00       	mov    eax,ds:0x0	100043a1: R_386_32	term
100043a5:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
100043a8:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
100043ab:	01 d1                	add    ecx,edx
100043ad:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100043af: R_386_32	tzsel
100043b3:	39 d1                	cmp    ecx,edx
100043b5:	75 07                	jne    100043be <firstRun(bool)+0x1a69>
100043b7:	bb 00 00 00 00       	mov    ebx,0x0
100043bc:	eb 05                	jmp    100043c3 <firstRun(bool)+0x1a6e>
100043be:	bb 0f 00 00 00       	mov    ebx,0xf
100043c3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
100043c6:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
100043c9:	01 d1                	add    ecx,edx
100043cb:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100043cd: R_386_32	tzsel
100043d1:	39 d1                	cmp    ecx,edx
100043d3:	75 07                	jne    100043dc <firstRun(bool)+0x1a87>
100043d5:	b9 0f 00 00 00       	mov    ecx,0xf
100043da:	eb 05                	jmp    100043e1 <firstRun(bool)+0x1a8c>
100043dc:	b9 00 00 00 00       	mov    ecx,0x0
100043e1:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
100043e4:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
100043e7:	01 f2                	add    edx,esi
100043e9:	8b 14 95 00 00 00 00 	mov    edx,DWORD PTR [edx*4+0x0]	100043ec: R_386_32	timezoneStrings
100043f0:	53                   	push   ebx
100043f1:	51                   	push   ecx
100043f2:	52                   	push   edx
100043f3:	50                   	push   eax
100043f4:	e8 fc ff ff ff       	call   100043f5 <firstRun(bool)+0x1aa0>	100043f5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100043f9:	83 c4 10             	add    esp,0x10
100043fc:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
100043ff:	e9 7c ff ff ff       	jmp    10004380 <firstRun(bool)+0x1a2b>
10004404:	a0 00 00 00 00       	mov    al,ds:0x0	10004405: R_386_32	installKey
10004409:	84 c0                	test   al,al
1000440b:	0f 94 c0             	sete   al
1000440e:	84 c0                	test   al,al
10004410:	74 02                	je     10004414 <firstRun(bool)+0x1abf>
10004412:	eb f0                	jmp    10004404 <firstRun(bool)+0x1aaf>
10004414:	a1 00 00 00 00       	mov    eax,ds:0x0	10004415: R_386_32	term
10004419:	05 82 00 00 00       	add    eax,0x82
1000441e:	83 ec 04             	sub    esp,0x4
10004421:	6a 04                	push   0x4
10004423:	6a 00                	push   0x0
10004425:	50                   	push   eax
10004426:	e8 fc ff ff ff       	call   10004427 <firstRun(bool)+0x1ad2>	10004427: R_386_PC32	memset
1000442b:	83 c4 10             	add    esp,0x10
1000442e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000442f: R_386_32	term
10004433:	05 02 01 00 00       	add    eax,0x102
10004438:	83 ec 04             	sub    esp,0x4
1000443b:	6a 04                	push   0x4
1000443d:	6a 00                	push   0x0
1000443f:	50                   	push   eax
10004440:	e8 fc ff ff ff       	call   10004441 <firstRun(bool)+0x1aec>	10004441: R_386_PC32	memset
10004445:	83 c4 10             	add    esp,0x10
10004448:	a0 00 00 00 00       	mov    al,ds:0x0	10004449: R_386_32	installKey
1000444d:	3c 01                	cmp    al,0x1
1000444f:	0f 94 c0             	sete   al
10004452:	84 c0                	test   al,al
10004454:	74 41                	je     10004497 <firstRun(bool)+0x1b42>
10004456:	a1 00 00 00 00       	mov    eax,ds:0x0	10004457: R_386_32	tzsel
1000445b:	48                   	dec    eax
1000445c:	a3 00 00 00 00       	mov    ds:0x0,eax	1000445d: R_386_32	tzsel
10004461:	a1 00 00 00 00       	mov    eax,ds:0x0	10004462: R_386_32	tzsel
10004466:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
10004469:	83 f8 04             	cmp    eax,0x4
1000446c:	7f 03                	jg     10004471 <firstRun(bool)+0x1b1c>
1000446e:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10004471:	a1 00 00 00 00       	mov    eax,ds:0x0	10004472: R_386_32	tzsel
10004476:	85 c0                	test   eax,eax
10004478:	79 0a                	jns    10004484 <firstRun(bool)+0x1b2f>
1000447a:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000447c: R_386_32	tzsel
10004484:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10004488:	0f 89 82 00 00 00    	jns    10004510 <firstRun(bool)+0x1bbb>
1000448e:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10004495:	eb 79                	jmp    10004510 <firstRun(bool)+0x1bbb>
10004497:	a0 00 00 00 00       	mov    al,ds:0x0	10004498: R_386_32	installKey
1000449c:	3c 02                	cmp    al,0x2
1000449e:	0f 94 c0             	sete   al
100044a1:	84 c0                	test   al,al
100044a3:	74 4b                	je     100044f0 <firstRun(bool)+0x1b9b>
100044a5:	a1 00 00 00 00       	mov    eax,ds:0x0	100044a6: R_386_32	tzsel
100044aa:	40                   	inc    eax
100044ab:	a3 00 00 00 00       	mov    ds:0x0,eax	100044ac: R_386_32	tzsel
100044b0:	a1 00 00 00 00       	mov    eax,ds:0x0	100044b1: R_386_32	tzsel
100044b5:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
100044b8:	83 f8 0a             	cmp    eax,0xa
100044bb:	7e 03                	jle    100044c0 <firstRun(bool)+0x1b6b>
100044bd:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
100044c0:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100044c3:	8d 50 ff             	lea    edx,[eax-0x1]
100044c6:	a1 00 00 00 00       	mov    eax,ds:0x0	100044c7: R_386_32	tzsel
100044cb:	39 c2                	cmp    edx,eax
100044cd:	7f 0b                	jg     100044da <firstRun(bool)+0x1b85>
100044cf:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100044d2:	83 e8 02             	sub    eax,0x2
100044d5:	a3 00 00 00 00       	mov    ds:0x0,eax	100044d6: R_386_32	tzsel
100044da:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100044dd:	83 e8 0f             	sub    eax,0xf
100044e0:	39 45 dc             	cmp    DWORD PTR [ebp-0x24],eax
100044e3:	7c 2b                	jl     10004510 <firstRun(bool)+0x1bbb>
100044e5:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100044e8:	83 e8 10             	sub    eax,0x10
100044eb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100044ee:	eb 20                	jmp    10004510 <firstRun(bool)+0x1bbb>
100044f0:	a0 00 00 00 00       	mov    al,ds:0x0	100044f1: R_386_32	installKey
100044f5:	3c 0a                	cmp    al,0xa
100044f7:	0f 94 c0             	sete   al
100044fa:	84 c0                	test   al,al
100044fc:	75 2e                	jne    1000452c <firstRun(bool)+0x1bd7>
100044fe:	a0 00 00 00 00       	mov    al,ds:0x0	100044ff: R_386_32	installKey
10004503:	3c 1b                	cmp    al,0x1b
10004505:	0f 94 c0             	sete   al
10004508:	84 c0                	test   al,al
1000450a:	0f 85 89 f0 ff ff    	jne    10003599 <firstRun(bool)+0xc44>
10004510:	83 ec 0c             	sub    esp,0xc
10004513:	68 f4 01 00 00       	push   0x1f4
10004518:	e8 fc ff ff ff       	call   10004519 <firstRun(bool)+0x1bc4>	10004519: R_386_PC32	milliTenthSleep(unsigned int)
1000451d:	83 c4 10             	add    esp,0x10
10004520:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004522: R_386_32	installKey
10004527:	e9 67 fd ff ff       	jmp    10004293 <firstRun(bool)+0x193e>
1000452c:	90                   	nop
1000452d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000452f: R_386_32	keDstOn
10004534:	a1 00 00 00 00       	mov    eax,ds:0x0	10004535: R_386_32	tzsel
10004539:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000453c: R_386_32	timezoneStrings
10004540:	83 c0 03             	add    eax,0x3
10004543:	8a 00                	mov    al,BYTE PTR [eax]
10004545:	3c 2e                	cmp    al,0x2e
10004547:	75 15                	jne    1000455e <firstRun(bool)+0x1c09>
10004549:	a1 00 00 00 00       	mov    eax,ds:0x0	1000454a: R_386_32	tzsel
1000454e:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10004551: R_386_32	timezoneStrings
10004555:	83 c0 04             	add    eax,0x4
10004558:	8a 00                	mov    al,BYTE PTR [eax]
1000455a:	3c 35                	cmp    al,0x35
1000455c:	74 2a                	je     10004588 <firstRun(bool)+0x1c33>
1000455e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000455f: R_386_32	tzsel
10004563:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10004566: R_386_32	timezoneStrings
1000456a:	83 c0 04             	add    eax,0x4
1000456d:	8a 00                	mov    al,BYTE PTR [eax]
1000456f:	3c 2e                	cmp    al,0x2e
10004571:	75 19                	jne    1000458c <firstRun(bool)+0x1c37>
10004573:	a1 00 00 00 00       	mov    eax,ds:0x0	10004574: R_386_32	tzsel
10004578:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000457b: R_386_32	timezoneStrings
1000457f:	83 c0 05             	add    eax,0x5
10004582:	8a 00                	mov    al,BYTE PTR [eax]
10004584:	3c 35                	cmp    al,0x35
10004586:	75 04                	jne    1000458c <firstRun(bool)+0x1c37>
10004588:	b0 01                	mov    al,0x1
1000458a:	eb 02                	jmp    1000458e <firstRun(bool)+0x1c39>
1000458c:	b0 00                	mov    al,0x0
1000458e:	a2 00 00 00 00       	mov    ds:0x0,al	1000458f: R_386_32	keTimezoneHalfHourOffset
10004593:	a1 00 00 00 00       	mov    eax,ds:0x0	10004594: R_386_32	tzsel
10004598:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000459b: R_386_32	timezoneStrings
1000459f:	83 c0 02             	add    eax,0x2
100045a2:	8a 00                	mov    al,BYTE PTR [eax]
100045a4:	0f be c0             	movsx  eax,al
100045a7:	83 e8 30             	sub    eax,0x30
100045aa:	a3 00 00 00 00       	mov    ds:0x0,eax	100045ab: R_386_32	keTimezoneHourOffset
100045af:	a1 00 00 00 00       	mov    eax,ds:0x0	100045b0: R_386_32	tzsel
100045b4:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100045b7: R_386_32	timezoneStrings
100045bb:	83 c0 04             	add    eax,0x4
100045be:	8a 00                	mov    al,BYTE PTR [eax]
100045c0:	3c 2e                	cmp    al,0x2e
100045c2:	75 37                	jne    100045fb <firstRun(bool)+0x1ca6>
100045c4:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100045c6: R_386_32	keTimezoneHourOffset
100045ca:	89 d0                	mov    eax,edx
100045cc:	c1 e0 02             	shl    eax,0x2
100045cf:	01 d0                	add    eax,edx
100045d1:	01 c0                	add    eax,eax
100045d3:	a3 00 00 00 00       	mov    ds:0x0,eax	100045d4: R_386_32	keTimezoneHourOffset
100045d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100045d9: R_386_32	tzsel
100045dd:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100045e0: R_386_32	timezoneStrings
100045e4:	83 c0 03             	add    eax,0x3
100045e7:	8a 00                	mov    al,BYTE PTR [eax]
100045e9:	0f be c0             	movsx  eax,al
100045ec:	8d 50 d0             	lea    edx,[eax-0x30]
100045ef:	a1 00 00 00 00       	mov    eax,ds:0x0	100045f0: R_386_32	keTimezoneHourOffset
100045f4:	01 d0                	add    eax,edx
100045f6:	a3 00 00 00 00       	mov    ds:0x0,eax	100045f7: R_386_32	keTimezoneHourOffset
100045fb:	a1 00 00 00 00       	mov    eax,ds:0x0	100045fc: R_386_32	tzsel
10004600:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10004603: R_386_32	timezoneStrings
10004607:	40                   	inc    eax
10004608:	8a 00                	mov    al,BYTE PTR [eax]
1000460a:	3c 2d                	cmp    al,0x2d
1000460c:	75 0c                	jne    1000461a <firstRun(bool)+0x1cc5>
1000460e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000460f: R_386_32	keTimezoneHourOffset
10004613:	f7 d8                	neg    eax
10004615:	a3 00 00 00 00       	mov    ds:0x0,eax	10004616: R_386_32	keTimezoneHourOffset
1000461a:	a0 00 00 00 00       	mov    al,ds:0x0	1000461b: R_386_32	keTimezoneHalfHourOffset
1000461f:	0f b6 d0             	movzx  edx,al
10004622:	a1 00 00 00 00       	mov    eax,ds:0x0	10004623: R_386_32	keTimezoneHourOffset
10004627:	83 ec 04             	sub    esp,0x4
1000462a:	52                   	push   edx
1000462b:	50                   	push   eax
1000462c:	68 aa aa 00 10       	push   0x1000aaaa	1000462d: R_386_32	.text
10004631:	e8 fc ff ff ff       	call   10004632 <firstRun(bool)+0x1cdd>	10004632: R_386_PC32	Dbg::kprintf(char const*, ...)
10004636:	83 c4 10             	add    esp,0x10
10004639:	a1 00 00 00 00       	mov    eax,ds:0x0	1000463a: R_386_32	Krnl::computer
1000463e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004644:	83 ec 04             	sub    esp,0x4
10004647:	ff b5 d8 fe ff ff    	push   DWORD PTR [ebp-0x128]
1000464d:	ff b5 d4 fe ff ff    	push   DWORD PTR [ebp-0x12c]
10004653:	50                   	push   eax
10004654:	e8 fc ff ff ff       	call   10004655 <firstRun(bool)+0x1d00>	10004655: R_386_PC32	Clock::setTimeInDatetimeLocal(datetime_t)
10004659:	83 c4 10             	add    esp,0x10
1000465c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000465e: R_386_32	installKey
10004663:	83 ec 0c             	sub    esp,0xc
10004666:	68 a0 0f 00 00       	push   0xfa0
1000466b:	e8 fc ff ff ff       	call   1000466c <firstRun(bool)+0x1d17>	1000466c: R_386_PC32	milliTenthSleep(unsigned int)
10004670:	83 c4 10             	add    esp,0x10
10004673:	eb 01                	jmp    10004676 <firstRun(bool)+0x1d21>
10004675:	90                   	nop
10004676:	e8 fc ff ff ff       	call   10004677 <firstRun(bool)+0x1d22>	10004677: R_386_PC32	drawBootScreen()
1000467b:	83 ec 0c             	sub    esp,0xc
1000467e:	68 58 1b 00 00       	push   0x1b58
10004683:	e8 fc ff ff ff       	call   10004684 <firstRun(bool)+0x1d2f>	10004684: R_386_PC32	milliTenthSleep(unsigned int)
10004688:	83 c4 10             	add    esp,0x10
1000468b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000468d: R_386_32	installKey
10004692:	e8 fc ff ff ff       	call   10004693 <firstRun(bool)+0x1d3e>	10004693: R_386_PC32	drawBootScreen()
10004697:	83 ec 0c             	sub    esp,0xc
1000469a:	68 b7 aa 00 10       	push   0x1000aab7	1000469b: R_386_32	.text
1000469f:	6a 10                	push   0x10
100046a1:	6a 37                	push   0x37
100046a3:	6a 03                	push   0x3
100046a5:	6a 14                	push   0x14
100046a7:	e8 fc ff ff ff       	call   100046a8 <firstRun(bool)+0x1d53>	100046a8: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100046ac:	83 c4 20             	add    esp,0x20
100046af:	a1 00 00 00 00       	mov    eax,ds:0x0	100046b0: R_386_32	term
100046b4:	83 ec 04             	sub    esp,0x4
100046b7:	6a 06                	push   0x6
100046b9:	6a 16                	push   0x16
100046bb:	50                   	push   eax
100046bc:	e8 fc ff ff ff       	call   100046bd <firstRun(bool)+0x1d68>	100046bd: R_386_PC32	VgaText::setCursor(int, int)
100046c1:	83 c4 10             	add    esp,0x10
100046c4:	a1 00 00 00 00       	mov    eax,ds:0x0	100046c5: R_386_32	term
100046c9:	83 ec 08             	sub    esp,0x8
100046cc:	68 c8 aa 00 10       	push   0x1000aac8	100046cd: R_386_32	.text
100046d1:	50                   	push   eax
100046d2:	e8 fc ff ff ff       	call   100046d3 <firstRun(bool)+0x1d7e>	100046d3: R_386_PC32	VgaText::puts(char const*)
100046d7:	83 c4 10             	add    esp,0x10
100046da:	a1 00 00 00 00       	mov    eax,ds:0x0	100046db: R_386_32	term
100046df:	83 ec 04             	sub    esp,0x4
100046e2:	6a 07                	push   0x7
100046e4:	6a 16                	push   0x16
100046e6:	50                   	push   eax
100046e7:	e8 fc ff ff ff       	call   100046e8 <firstRun(bool)+0x1d93>	100046e8: R_386_PC32	VgaText::setCursor(int, int)
100046ec:	83 c4 10             	add    esp,0x10
100046ef:	a1 00 00 00 00       	mov    eax,ds:0x0	100046f0: R_386_32	term
100046f4:	83 ec 08             	sub    esp,0x8
100046f7:	68 fc aa 00 10       	push   0x1000aafc	100046f8: R_386_32	.text
100046fc:	50                   	push   eax
100046fd:	e8 fc ff ff ff       	call   100046fe <firstRun(bool)+0x1da9>	100046fe: R_386_PC32	VgaText::puts(char const*)
10004702:	83 c4 10             	add    esp,0x10
10004705:	a1 00 00 00 00       	mov    eax,ds:0x0	10004706: R_386_32	term
1000470a:	83 ec 04             	sub    esp,0x4
1000470d:	6a 18                	push   0x18
1000470f:	6a 11                	push   0x11
10004711:	50                   	push   eax
10004712:	e8 fc ff ff ff       	call   10004713 <firstRun(bool)+0x1dbe>	10004713: R_386_PC32	VgaText::setCursor(int, int)
10004717:	83 c4 10             	add    esp,0x10
1000471a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000471b: R_386_32	term
1000471f:	6a 0b                	push   0xb
10004721:	6a 03                	push   0x3
10004723:	68 62 aa 00 10       	push   0x1000aa62	10004724: R_386_32	.text
10004728:	50                   	push   eax
10004729:	e8 fc ff ff ff       	call   1000472a <firstRun(bool)+0x1dd5>	1000472a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000472e:	83 c4 10             	add    esp,0x10
10004731:	c7 45 8c 03 00 00 00 	mov    DWORD PTR [ebp-0x74],0x3
10004738:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000473e:	bb 80 ad 00 10       	mov    ebx,0x1000ad80	1000473f: R_386_32	.text
10004743:	ba 03 00 00 00       	mov    edx,0x3
10004748:	89 c7                	mov    edi,eax
1000474a:	89 de                	mov    esi,ebx
1000474c:	89 d1                	mov    ecx,edx
1000474e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004750:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
10004757:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
1000475a:	3b 45 8c             	cmp    eax,DWORD PTR [ebp-0x74]
1000475d:	7d 68                	jge    100047c7 <firstRun(bool)+0x1e72>
1000475f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004760: R_386_32	term
10004764:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
10004767:	83 c2 09             	add    edx,0x9
1000476a:	83 ec 04             	sub    esp,0x4
1000476d:	52                   	push   edx
1000476e:	6a 16                	push   0x16
10004770:	50                   	push   eax
10004771:	e8 fc ff ff ff       	call   10004772 <firstRun(bool)+0x1e1d>	10004772: R_386_PC32	VgaText::setCursor(int, int)
10004776:	83 c4 10             	add    esp,0x10
10004779:	a1 00 00 00 00       	mov    eax,ds:0x0	1000477a: R_386_32	term
1000477e:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004780: R_386_32	modesel
10004784:	39 55 c0             	cmp    DWORD PTR [ebp-0x40],edx
10004787:	75 07                	jne    10004790 <firstRun(bool)+0x1e3b>
10004789:	bb 00 00 00 00       	mov    ebx,0x0
1000478e:	eb 05                	jmp    10004795 <firstRun(bool)+0x1e40>
10004790:	bb 0f 00 00 00       	mov    ebx,0xf
10004795:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004797: R_386_32	modesel
1000479b:	39 55 c0             	cmp    DWORD PTR [ebp-0x40],edx
1000479e:	75 07                	jne    100047a7 <firstRun(bool)+0x1e52>
100047a0:	b9 0f 00 00 00       	mov    ecx,0xf
100047a5:	eb 05                	jmp    100047ac <firstRun(bool)+0x1e57>
100047a7:	b9 00 00 00 00       	mov    ecx,0x0
100047ac:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
100047af:	8b 94 95 c8 fe ff ff 	mov    edx,DWORD PTR [ebp+edx*4-0x138]
100047b6:	53                   	push   ebx
100047b7:	51                   	push   ecx
100047b8:	52                   	push   edx
100047b9:	50                   	push   eax
100047ba:	e8 fc ff ff ff       	call   100047bb <firstRun(bool)+0x1e66>	100047bb: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100047bf:	83 c4 10             	add    esp,0x10
100047c2:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
100047c5:	eb 90                	jmp    10004757 <firstRun(bool)+0x1e02>
100047c7:	a0 00 00 00 00       	mov    al,ds:0x0	100047c8: R_386_32	installKey
100047cc:	84 c0                	test   al,al
100047ce:	0f 94 c0             	sete   al
100047d1:	84 c0                	test   al,al
100047d3:	74 02                	je     100047d7 <firstRun(bool)+0x1e82>
100047d5:	eb f0                	jmp    100047c7 <firstRun(bool)+0x1e72>
100047d7:	a1 00 00 00 00       	mov    eax,ds:0x0	100047d8: R_386_32	term
100047dc:	05 82 00 00 00       	add    eax,0x82
100047e1:	83 ec 04             	sub    esp,0x4
100047e4:	6a 04                	push   0x4
100047e6:	6a 00                	push   0x0
100047e8:	50                   	push   eax
100047e9:	e8 fc ff ff ff       	call   100047ea <firstRun(bool)+0x1e95>	100047ea: R_386_PC32	memset
100047ee:	83 c4 10             	add    esp,0x10
100047f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100047f2: R_386_32	term
100047f6:	05 02 01 00 00       	add    eax,0x102
100047fb:	83 ec 04             	sub    esp,0x4
100047fe:	6a 04                	push   0x4
10004800:	6a 00                	push   0x0
10004802:	50                   	push   eax
10004803:	e8 fc ff ff ff       	call   10004804 <firstRun(bool)+0x1eaf>	10004804: R_386_PC32	memset
10004808:	83 c4 10             	add    esp,0x10
1000480b:	a0 00 00 00 00       	mov    al,ds:0x0	1000480c: R_386_32	installKey
10004810:	3c 01                	cmp    al,0x1
10004812:	0f 94 c0             	sete   al
10004815:	84 c0                	test   al,al
10004817:	74 20                	je     10004839 <firstRun(bool)+0x1ee4>
10004819:	a1 00 00 00 00       	mov    eax,ds:0x0	1000481a: R_386_32	modesel
1000481e:	48                   	dec    eax
1000481f:	a3 00 00 00 00       	mov    ds:0x0,eax	10004820: R_386_32	modesel
10004824:	a1 00 00 00 00       	mov    eax,ds:0x0	10004825: R_386_32	modesel
10004829:	85 c0                	test   eax,eax
1000482b:	79 5a                	jns    10004887 <firstRun(bool)+0x1f32>
1000482d:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000482f: R_386_32	modesel
10004837:	eb 4e                	jmp    10004887 <firstRun(bool)+0x1f32>
10004839:	a0 00 00 00 00       	mov    al,ds:0x0	1000483a: R_386_32	installKey
1000483e:	3c 02                	cmp    al,0x2
10004840:	0f 94 c0             	sete   al
10004843:	84 c0                	test   al,al
10004845:	74 20                	je     10004867 <firstRun(bool)+0x1f12>
10004847:	a1 00 00 00 00       	mov    eax,ds:0x0	10004848: R_386_32	modesel
1000484c:	40                   	inc    eax
1000484d:	a3 00 00 00 00       	mov    ds:0x0,eax	1000484e: R_386_32	modesel
10004852:	a1 00 00 00 00       	mov    eax,ds:0x0	10004853: R_386_32	modesel
10004857:	39 45 8c             	cmp    DWORD PTR [ebp-0x74],eax
1000485a:	7f 2b                	jg     10004887 <firstRun(bool)+0x1f32>
1000485c:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
1000485f:	48                   	dec    eax
10004860:	a3 00 00 00 00       	mov    ds:0x0,eax	10004861: R_386_32	modesel
10004865:	eb 20                	jmp    10004887 <firstRun(bool)+0x1f32>
10004867:	a0 00 00 00 00       	mov    al,ds:0x0	10004868: R_386_32	installKey
1000486c:	3c 0a                	cmp    al,0xa
1000486e:	0f 94 c0             	sete   al
10004871:	84 c0                	test   al,al
10004873:	75 2e                	jne    100048a3 <firstRun(bool)+0x1f4e>
10004875:	a0 00 00 00 00       	mov    al,ds:0x0	10004876: R_386_32	installKey
1000487a:	3c 1b                	cmp    al,0x1b
1000487c:	0f 94 c0             	sete   al
1000487f:	84 c0                	test   al,al
10004881:	0f 85 5b f9 ff ff    	jne    100041e2 <firstRun(bool)+0x188d>
10004887:	83 ec 0c             	sub    esp,0xc
1000488a:	68 f4 01 00 00       	push   0x1f4
1000488f:	e8 fc ff ff ff       	call   10004890 <firstRun(bool)+0x1f3b>	10004890: R_386_PC32	milliTenthSleep(unsigned int)
10004894:	83 c4 10             	add    esp,0x10
10004897:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004899: R_386_32	installKey
1000489e:	e9 ad fe ff ff       	jmp    10004750 <firstRun(bool)+0x1dfb>
100048a3:	90                   	nop
100048a4:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
100048ab:	0f 84 ff 00 00 00    	je     100049b0 <firstRun(bool)+0x205b>
100048b1:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100048b3: R_386_32	showSidebar
100048b8:	a1 00 00 00 00       	mov    eax,ds:0x0	100048b9: R_386_32	term
100048bd:	83 ec 0c             	sub    esp,0xc
100048c0:	50                   	push   eax
100048c1:	e8 fc ff ff ff       	call   100048c2 <firstRun(bool)+0x1f6d>	100048c2: R_386_PC32	setActiveTerminal(VgaText*)
100048c6:	83 c4 10             	add    esp,0x10
100048c9:	e8 fc ff ff ff       	call   100048ca <firstRun(bool)+0x1f75>	100048ca: R_386_PC32	drawBootScreen()
100048ce:	83 ec 0c             	sub    esp,0xc
100048d1:	68 31 ab 00 10       	push   0x1000ab31	100048d2: R_386_32	.text
100048d6:	6a 0d                	push   0xd
100048d8:	6a 32                	push   0x32
100048da:	6a 05                	push   0x5
100048dc:	6a 16                	push   0x16
100048de:	e8 fc ff ff ff       	call   100048df <firstRun(bool)+0x1f8a>	100048df: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100048e3:	83 c4 20             	add    esp,0x20
100048e6:	a1 00 00 00 00       	mov    eax,ds:0x0	100048e7: R_386_32	term
100048eb:	83 ec 04             	sub    esp,0x4
100048ee:	6a 08                	push   0x8
100048f0:	6a 18                	push   0x18
100048f2:	50                   	push   eax
100048f3:	e8 fc ff ff ff       	call   100048f4 <firstRun(bool)+0x1f9f>	100048f4: R_386_PC32	VgaText::setCursor(int, int)
100048f8:	83 c4 10             	add    esp,0x10
100048fb:	a1 00 00 00 00       	mov    eax,ds:0x0	100048fc: R_386_32	term
10004900:	83 ec 08             	sub    esp,0x8
10004903:	68 48 ab 00 10       	push   0x1000ab48	10004904: R_386_32	.text
10004908:	50                   	push   eax
10004909:	e8 fc ff ff ff       	call   1000490a <firstRun(bool)+0x1fb5>	1000490a: R_386_PC32	VgaText::puts(char const*)
1000490e:	83 c4 10             	add    esp,0x10
10004911:	a1 00 00 00 00       	mov    eax,ds:0x0	10004912: R_386_32	term
10004916:	83 ec 04             	sub    esp,0x4
10004919:	6a 0a                	push   0xa
1000491b:	6a 18                	push   0x18
1000491d:	50                   	push   eax
1000491e:	e8 fc ff ff ff       	call   1000491f <firstRun(bool)+0x1fca>	1000491f: R_386_PC32	VgaText::setCursor(int, int)
10004923:	83 c4 10             	add    esp,0x10
10004926:	a1 00 00 00 00       	mov    eax,ds:0x0	10004927: R_386_32	term
1000492b:	83 ec 08             	sub    esp,0x8
1000492e:	68 70 ab 00 10       	push   0x1000ab70	1000492f: R_386_32	.text
10004933:	50                   	push   eax
10004934:	e8 fc ff ff ff       	call   10004935 <firstRun(bool)+0x1fe0>	10004935: R_386_PC32	VgaText::puts(char const*)
10004939:	83 c4 10             	add    esp,0x10
1000493c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000493d: R_386_32	term
10004941:	83 ec 04             	sub    esp,0x4
10004944:	6a 0b                	push   0xb
10004946:	6a 18                	push   0x18
10004948:	50                   	push   eax
10004949:	e8 fc ff ff ff       	call   1000494a <firstRun(bool)+0x1ff5>	1000494a: R_386_PC32	VgaText::setCursor(int, int)
1000494e:	83 c4 10             	add    esp,0x10
10004951:	a1 00 00 00 00       	mov    eax,ds:0x0	10004952: R_386_32	term
10004956:	83 ec 08             	sub    esp,0x8
10004959:	68 99 ab 00 10       	push   0x1000ab99	1000495a: R_386_32	.text
1000495e:	50                   	push   eax
1000495f:	e8 fc ff ff ff       	call   10004960 <firstRun(bool)+0x200b>	10004960: R_386_PC32	VgaText::puts(char const*)
10004964:	83 c4 10             	add    esp,0x10
10004967:	a1 00 00 00 00       	mov    eax,ds:0x0	10004968: R_386_32	term
1000496c:	83 ec 04             	sub    esp,0x4
1000496f:	6a 0e                	push   0xe
10004971:	6a 18                	push   0x18
10004973:	50                   	push   eax
10004974:	e8 fc ff ff ff       	call   10004975 <firstRun(bool)+0x2020>	10004975: R_386_PC32	VgaText::setCursor(int, int)
10004979:	83 c4 10             	add    esp,0x10
1000497c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000497d: R_386_32	term
10004981:	83 ec 08             	sub    esp,0x8
10004984:	68 a8 ab 00 10       	push   0x1000aba8	10004985: R_386_32	.text
10004989:	50                   	push   eax
1000498a:	e8 fc ff ff ff       	call   1000498b <firstRun(bool)+0x2036>	1000498b: R_386_PC32	VgaText::puts(char const*)
1000498f:	83 c4 10             	add    esp,0x10
10004992:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004994: R_386_32	installKey
10004999:	a0 00 00 00 00       	mov    al,ds:0x0	1000499a: R_386_32	installKey
1000499e:	84 c0                	test   al,al
100049a0:	0f 94 c0             	sete   al
100049a3:	84 c0                	test   al,al
100049a5:	74 02                	je     100049a9 <firstRun(bool)+0x2054>
100049a7:	eb f0                	jmp    10004999 <firstRun(bool)+0x2044>
100049a9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100049ab: R_386_32	installKey
100049b0:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100049b2: R_386_32	installKey
100049b7:	83 ec 0c             	sub    esp,0xc
100049ba:	68 84 03 00 00       	push   0x384
100049bf:	e8 fc ff ff ff       	call   100049c0 <firstRun(bool)+0x206b>	100049c0: R_386_PC32	milliTenthSleep(unsigned int)
100049c4:	83 c4 10             	add    esp,0x10
100049c7:	e8 fc ff ff ff       	call   100049c8 <firstRun(bool)+0x2073>	100049c8: R_386_PC32	drawBootScreen()
100049cc:	83 ec 0c             	sub    esp,0xc
100049cf:	68 18 2e 00 00       	push   0x2e18
100049d4:	e8 fc ff ff ff       	call   100049d5 <firstRun(bool)+0x2080>	100049d5: R_386_PC32	milliTenthSleep(unsigned int)
100049d9:	83 c4 10             	add    esp,0x10
100049dc:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100049e3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100049e5: R_386_32	installKey
100049ea:	e8 fc ff ff ff       	call   100049eb <firstRun(bool)+0x2096>	100049eb: R_386_PC32	drawBootScreen()
100049ef:	83 ec 0c             	sub    esp,0xc
100049f2:	68 d2 ab 00 10       	push   0x1000abd2	100049f3: R_386_32	.text
100049f7:	6a 0e                	push   0xe
100049f9:	6a 32                	push   0x32
100049fb:	6a 02                	push   0x2
100049fd:	6a 16                	push   0x16
100049ff:	e8 fc ff ff ff       	call   10004a00 <firstRun(bool)+0x20ab>	10004a00: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004a04:	83 c4 20             	add    esp,0x20
10004a07:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a08: R_386_32	term
10004a0c:	83 ec 04             	sub    esp,0x4
10004a0f:	6a 18                	push   0x18
10004a11:	6a 11                	push   0x11
10004a13:	50                   	push   eax
10004a14:	e8 fc ff ff ff       	call   10004a15 <firstRun(bool)+0x20c0>	10004a15: R_386_PC32	VgaText::setCursor(int, int)
10004a19:	83 c4 10             	add    esp,0x10
10004a1c:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a1d: R_386_32	term
10004a21:	6a 0b                	push   0xb
10004a23:	6a 03                	push   0x3
10004a25:	68 62 aa 00 10       	push   0x1000aa62	10004a26: R_386_32	.text
10004a2a:	50                   	push   eax
10004a2b:	e8 fc ff ff ff       	call   10004a2c <firstRun(bool)+0x20d7>	10004a2c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004a30:	83 c4 10             	add    esp,0x10
10004a33:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a34: R_386_32	term
10004a38:	83 ec 04             	sub    esp,0x4
10004a3b:	6a 05                	push   0x5
10004a3d:	6a 18                	push   0x18
10004a3f:	50                   	push   eax
10004a40:	e8 fc ff ff ff       	call   10004a41 <firstRun(bool)+0x20ec>	10004a41: R_386_PC32	VgaText::setCursor(int, int)
10004a45:	83 c4 10             	add    esp,0x10
10004a48:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a49: R_386_32	term
10004a4d:	83 ec 08             	sub    esp,0x8
10004a50:	68 e0 ab 00 10       	push   0x1000abe0	10004a51: R_386_32	.text
10004a55:	50                   	push   eax
10004a56:	e8 fc ff ff ff       	call   10004a57 <firstRun(bool)+0x2102>	10004a57: R_386_PC32	VgaText::puts(char const*)
10004a5b:	83 c4 10             	add    esp,0x10
10004a5e:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a5f: R_386_32	term
10004a63:	83 ec 04             	sub    esp,0x4
10004a66:	6a 06                	push   0x6
10004a68:	6a 18                	push   0x18
10004a6a:	50                   	push   eax
10004a6b:	e8 fc ff ff ff       	call   10004a6c <firstRun(bool)+0x2117>	10004a6c: R_386_PC32	VgaText::setCursor(int, int)
10004a70:	83 c4 10             	add    esp,0x10
10004a73:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a74: R_386_32	term
10004a78:	83 ec 08             	sub    esp,0x8
10004a7b:	68 38 aa 00 10       	push   0x1000aa38	10004a7c: R_386_32	.text
10004a80:	50                   	push   eax
10004a81:	e8 fc ff ff ff       	call   10004a82 <firstRun(bool)+0x212d>	10004a82: R_386_PC32	VgaText::puts(char const*)
10004a86:	83 c4 10             	add    esp,0x10
10004a89:	c6 05 10 00 00 00 00 	mov    BYTE PTR ds:0x10,0x0	10004a8b: R_386_32	pkeybuf
10004a90:	c6 05 11 00 00 00 00 	mov    BYTE PTR ds:0x11,0x0	10004a92: R_386_32	pkeybuf
10004a97:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a98: R_386_32	term
10004a9c:	83 ec 04             	sub    esp,0x4
10004a9f:	6a 08                	push   0x8
10004aa1:	6a 1c                	push   0x1c
10004aa3:	50                   	push   eax
10004aa4:	e8 fc ff ff ff       	call   10004aa5 <firstRun(bool)+0x2150>	10004aa5: R_386_PC32	VgaText::setCursor(int, int)
10004aa9:	83 c4 10             	add    esp,0x10
10004aac:	a1 00 00 00 00       	mov    eax,ds:0x0	10004aad: R_386_32	term
10004ab1:	83 ec 08             	sub    esp,0x8
10004ab4:	68 00 00 00 00       	push   0x0	10004ab5: R_386_32	pkeybuf
10004ab9:	50                   	push   eax
10004aba:	e8 fc ff ff ff       	call   10004abb <firstRun(bool)+0x2166>	10004abb: R_386_PC32	VgaText::puts(char const*)
10004abf:	83 c4 10             	add    esp,0x10
10004ac2:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ac3: R_386_32	term
10004ac7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004aca:	83 c2 1c             	add    edx,0x1c
10004acd:	83 ec 04             	sub    esp,0x4
10004ad0:	6a 08                	push   0x8
10004ad2:	52                   	push   edx
10004ad3:	50                   	push   eax
10004ad4:	e8 fc ff ff ff       	call   10004ad5 <firstRun(bool)+0x2180>	10004ad5: R_386_PC32	VgaText::setCursor(int, int)
10004ad9:	83 c4 10             	add    esp,0x10
10004adc:	a1 00 00 00 00       	mov    eax,ds:0x0	10004add: R_386_32	term
10004ae1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004ae4:	81 c2 00 00 00 00    	add    edx,0x0	10004ae6: R_386_32	pkeybuf
10004aea:	8a 12                	mov    dl,BYTE PTR [edx]
10004aec:	0f be d2             	movsx  edx,dl
10004aef:	6a 00                	push   0x0
10004af1:	6a 0f                	push   0xf
10004af3:	52                   	push   edx
10004af4:	50                   	push   eax
10004af5:	e8 fc ff ff ff       	call   10004af6 <firstRun(bool)+0x21a1>	10004af6: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004afa:	83 c4 10             	add    esp,0x10
10004afd:	a1 00 00 00 00       	mov    eax,ds:0x0	10004afe: R_386_32	term
10004b02:	83 ec 04             	sub    esp,0x4
10004b05:	6a 08                	push   0x8
10004b07:	6a 2c                	push   0x2c
10004b09:	50                   	push   eax
10004b0a:	e8 fc ff ff ff       	call   10004b0b <firstRun(bool)+0x21b6>	10004b0b: R_386_PC32	VgaText::setCursor(int, int)
10004b0f:	83 c4 10             	add    esp,0x10
10004b12:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b13: R_386_32	term
10004b17:	6a 0f                	push   0xf
10004b19:	6a 0f                	push   0xf
10004b1b:	6a 20                	push   0x20
10004b1d:	50                   	push   eax
10004b1e:	e8 fc ff ff ff       	call   10004b1f <firstRun(bool)+0x21ca>	10004b1f: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004b23:	83 c4 10             	add    esp,0x10
10004b26:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b27: R_386_32	term
10004b2b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004b2e:	83 c2 1c             	add    edx,0x1c
10004b31:	83 ec 04             	sub    esp,0x4
10004b34:	6a 08                	push   0x8
10004b36:	52                   	push   edx
10004b37:	50                   	push   eax
10004b38:	e8 fc ff ff ff       	call   10004b39 <firstRun(bool)+0x21e4>	10004b39: R_386_PC32	VgaText::setCursor(int, int)
10004b3d:	83 c4 10             	add    esp,0x10
10004b40:	a0 00 00 00 00       	mov    al,ds:0x0	10004b41: R_386_32	installKey
10004b45:	84 c0                	test   al,al
10004b47:	0f 94 c0             	sete   al
10004b4a:	84 c0                	test   al,al
10004b4c:	74 02                	je     10004b50 <firstRun(bool)+0x21fb>
10004b4e:	eb f0                	jmp    10004b40 <firstRun(bool)+0x21eb>
10004b50:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b51: R_386_32	term
10004b55:	05 82 00 00 00       	add    eax,0x82
10004b5a:	83 ec 04             	sub    esp,0x4
10004b5d:	6a 10                	push   0x10
10004b5f:	6a 00                	push   0x0
10004b61:	50                   	push   eax
10004b62:	e8 fc ff ff ff       	call   10004b63 <firstRun(bool)+0x220e>	10004b63: R_386_PC32	memset
10004b67:	83 c4 10             	add    esp,0x10
10004b6a:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b6b: R_386_32	term
10004b6f:	05 02 01 00 00       	add    eax,0x102
10004b74:	83 ec 04             	sub    esp,0x4
10004b77:	6a 10                	push   0x10
10004b79:	6a 00                	push   0x0
10004b7b:	50                   	push   eax
10004b7c:	e8 fc ff ff ff       	call   10004b7d <firstRun(bool)+0x2228>	10004b7d: R_386_PC32	memset
10004b81:	83 c4 10             	add    esp,0x10
10004b84:	a0 00 00 00 00       	mov    al,ds:0x0	10004b85: R_386_32	installKey
10004b89:	3c 03                	cmp    al,0x3
10004b8b:	74 09                	je     10004b96 <firstRun(bool)+0x2241>
10004b8d:	a0 00 00 00 00       	mov    al,ds:0x0	10004b8e: R_386_32	installKey
10004b92:	3c 08                	cmp    al,0x8
10004b94:	75 04                	jne    10004b9a <firstRun(bool)+0x2245>
10004b96:	b0 01                	mov    al,0x1
10004b98:	eb 02                	jmp    10004b9c <firstRun(bool)+0x2247>
10004b9a:	b0 00                	mov    al,0x0
10004b9c:	84 c0                	test   al,al
10004b9e:	74 31                	je     10004bd1 <firstRun(bool)+0x227c>
10004ba0:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
10004ba3:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10004ba7:	75 14                	jne    10004bbd <firstRun(bool)+0x2268>
10004ba9:	83 ec 0c             	sub    esp,0xc
10004bac:	68 00 00 00 00       	push   0x0	10004bad: R_386_32	pkeybuf
10004bb1:	e8 fc ff ff ff       	call   10004bb2 <firstRun(bool)+0x225d>	10004bb2: R_386_PC32	strlen
10004bb6:	83 c4 10             	add    esp,0x10
10004bb9:	48                   	dec    eax
10004bba:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10004bbd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004bc0:	05 00 00 00 00       	add    eax,0x0	10004bc1: R_386_32	pkeybuf
10004bc5:	8a 00                	mov    al,BYTE PTR [eax]
10004bc7:	3c 2d                	cmp    al,0x2d
10004bc9:	0f 85 6f 03 00 00    	jne    10004f3e <firstRun(bool)+0x25e9>
10004bcf:	eb cf                	jmp    10004ba0 <firstRun(bool)+0x224b>
10004bd1:	a0 00 00 00 00       	mov    al,ds:0x0	10004bd2: R_386_32	installKey
10004bd6:	3c 2f                	cmp    al,0x2f
10004bd8:	7e 09                	jle    10004be3 <firstRun(bool)+0x228e>
10004bda:	a0 00 00 00 00       	mov    al,ds:0x0	10004bdb: R_386_32	installKey
10004bdf:	3c 39                	cmp    al,0x39
10004be1:	7e 36                	jle    10004c19 <firstRun(bool)+0x22c4>
10004be3:	a0 00 00 00 00       	mov    al,ds:0x0	10004be4: R_386_32	installKey
10004be8:	3c 40                	cmp    al,0x40
10004bea:	7e 09                	jle    10004bf5 <firstRun(bool)+0x22a0>
10004bec:	a0 00 00 00 00       	mov    al,ds:0x0	10004bed: R_386_32	installKey
10004bf1:	3c 5a                	cmp    al,0x5a
10004bf3:	7e 24                	jle    10004c19 <firstRun(bool)+0x22c4>
10004bf5:	a0 00 00 00 00       	mov    al,ds:0x0	10004bf6: R_386_32	installKey
10004bfa:	3c 60                	cmp    al,0x60
10004bfc:	7e 09                	jle    10004c07 <firstRun(bool)+0x22b2>
10004bfe:	a0 00 00 00 00       	mov    al,ds:0x0	10004bff: R_386_32	installKey
10004c03:	3c 7a                	cmp    al,0x7a
10004c05:	7e 12                	jle    10004c19 <firstRun(bool)+0x22c4>
10004c07:	a0 00 00 00 00       	mov    al,ds:0x0	10004c08: R_386_32	installKey
10004c0c:	3c 20                	cmp    al,0x20
10004c0e:	74 09                	je     10004c19 <firstRun(bool)+0x22c4>
10004c10:	a0 00 00 00 00       	mov    al,ds:0x0	10004c11: R_386_32	installKey
10004c15:	3c 04                	cmp    al,0x4
10004c17:	75 04                	jne    10004c1d <firstRun(bool)+0x22c8>
10004c19:	b0 01                	mov    al,0x1
10004c1b:	eb 02                	jmp    10004c1f <firstRun(bool)+0x22ca>
10004c1d:	b0 00                	mov    al,0x0
10004c1f:	84 c0                	test   al,al
10004c21:	0f 84 a3 00 00 00    	je     10004cca <firstRun(bool)+0x2375>
10004c27:	a0 00 00 00 00       	mov    al,ds:0x0	10004c28: R_386_32	installKey
10004c2c:	3c 2f                	cmp    al,0x2f
10004c2e:	7e 09                	jle    10004c39 <firstRun(bool)+0x22e4>
10004c30:	a0 00 00 00 00       	mov    al,ds:0x0	10004c31: R_386_32	installKey
10004c35:	3c 39                	cmp    al,0x39
10004c37:	7e 24                	jle    10004c5d <firstRun(bool)+0x2308>
10004c39:	a0 00 00 00 00       	mov    al,ds:0x0	10004c3a: R_386_32	installKey
10004c3e:	3c 40                	cmp    al,0x40
10004c40:	7e 09                	jle    10004c4b <firstRun(bool)+0x22f6>
10004c42:	a0 00 00 00 00       	mov    al,ds:0x0	10004c43: R_386_32	installKey
10004c47:	3c 5a                	cmp    al,0x5a
10004c49:	7e 12                	jle    10004c5d <firstRun(bool)+0x2308>
10004c4b:	a0 00 00 00 00       	mov    al,ds:0x0	10004c4c: R_386_32	installKey
10004c50:	3c 60                	cmp    al,0x60
10004c52:	7e 0d                	jle    10004c61 <firstRun(bool)+0x230c>
10004c54:	a0 00 00 00 00       	mov    al,ds:0x0	10004c55: R_386_32	installKey
10004c59:	3c 7a                	cmp    al,0x7a
10004c5b:	7f 04                	jg     10004c61 <firstRun(bool)+0x230c>
10004c5d:	b0 01                	mov    al,0x1
10004c5f:	eb 02                	jmp    10004c63 <firstRun(bool)+0x230e>
10004c61:	b0 00                	mov    al,0x0
10004c63:	84 c0                	test   al,al
10004c65:	74 2c                	je     10004c93 <firstRun(bool)+0x233e>
10004c67:	a0 00 00 00 00       	mov    al,ds:0x0	10004c68: R_386_32	installKey
10004c6c:	3c 60                	cmp    al,0x60
10004c6e:	7e 13                	jle    10004c83 <firstRun(bool)+0x232e>
10004c70:	a0 00 00 00 00       	mov    al,ds:0x0	10004c71: R_386_32	installKey
10004c75:	3c 7a                	cmp    al,0x7a
10004c77:	7f 0a                	jg     10004c83 <firstRun(bool)+0x232e>
10004c79:	a0 00 00 00 00       	mov    al,ds:0x0	10004c7a: R_386_32	installKey
10004c7e:	83 e8 20             	sub    eax,0x20
10004c81:	eb 05                	jmp    10004c88 <firstRun(bool)+0x2333>
10004c83:	a0 00 00 00 00       	mov    al,ds:0x0	10004c84: R_386_32	installKey
10004c88:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004c8b:	81 c2 00 00 00 00    	add    edx,0x0	10004c8d: R_386_32	pkeybuf
10004c91:	88 02                	mov    BYTE PTR [edx],al
10004c93:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10004c96:	83 ec 0c             	sub    esp,0xc
10004c99:	68 00 00 00 00       	push   0x0	10004c9a: R_386_32	pkeybuf
10004c9e:	e8 fc ff ff ff       	call   10004c9f <firstRun(bool)+0x234a>	10004c9f: R_386_PC32	strlen
10004ca3:	83 c4 10             	add    esp,0x10
10004ca6:	89 c2                	mov    edx,eax
10004ca8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004cab:	39 c2                	cmp    edx,eax
10004cad:	77 07                	ja     10004cb6 <firstRun(bool)+0x2361>
10004caf:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004cb6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004cb9:	05 00 00 00 00       	add    eax,0x0	10004cba: R_386_32	pkeybuf
10004cbe:	8a 00                	mov    al,BYTE PTR [eax]
10004cc0:	3c 2d                	cmp    al,0x2d
10004cc2:	0f 85 76 02 00 00    	jne    10004f3e <firstRun(bool)+0x25e9>
10004cc8:	eb c9                	jmp    10004c93 <firstRun(bool)+0x233e>
10004cca:	a0 00 00 00 00       	mov    al,ds:0x0	10004ccb: R_386_32	installKey
10004ccf:	3c 1b                	cmp    al,0x1b
10004cd1:	0f 94 c0             	sete   al
10004cd4:	84 c0                	test   al,al
10004cd6:	0f 85 99 f9 ff ff    	jne    10004675 <firstRun(bool)+0x1d20>
10004cdc:	a0 00 00 00 00       	mov    al,ds:0x0	10004cdd: R_386_32	installKey
10004ce1:	3c 0a                	cmp    al,0xa
10004ce3:	0f 94 c0             	sete   al
10004ce6:	84 c0                	test   al,al
10004ce8:	0f 84 50 02 00 00    	je     10004f3e <firstRun(bool)+0x25e9>
10004cee:	83 ec 0c             	sub    esp,0xc
10004cf1:	68 00 00 00 00       	push   0x0	10004cf2: R_386_32	pkeybuf
10004cf6:	e8 fc ff ff ff       	call   10004cf7 <firstRun(bool)+0x23a2>	10004cf7: R_386_PC32	checkExtendedKey(char*)
10004cfb:	83 c4 10             	add    esp,0x10
10004cfe:	85 c0                	test   eax,eax
10004d00:	0f 95 c0             	setne  al
10004d03:	88 45 87             	mov    BYTE PTR [ebp-0x79],al
10004d06:	80 7d 87 00          	cmp    BYTE PTR [ebp-0x79],0x0
10004d0a:	74 5b                	je     10004d67 <firstRun(bool)+0x2412>
10004d0c:	83 ec 0c             	sub    esp,0xc
10004d0f:	68 f0 0a 00 00       	push   0xaf0
10004d14:	e8 fc ff ff ff       	call   10004d15 <firstRun(bool)+0x23c0>	10004d15: R_386_PC32	milliTenthSleep(unsigned int)
10004d19:	83 c4 10             	add    esp,0x10
10004d1c:	e8 fc ff ff ff       	call   10004d1d <firstRun(bool)+0x23c8>	10004d1d: R_386_PC32	drawBootScreen()
10004d21:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004d23: R_386_32	installKey
10004d28:	83 ec 0c             	sub    esp,0xc
10004d2b:	68 84 03 00 00       	push   0x384
10004d30:	e8 fc ff ff ff       	call   10004d31 <firstRun(bool)+0x23dc>	10004d31: R_386_PC32	milliTenthSleep(unsigned int)
10004d35:	83 c4 10             	add    esp,0x10
10004d38:	e8 fc ff ff ff       	call   10004d39 <firstRun(bool)+0x23e4>	10004d39: R_386_PC32	drawBootScreen()
10004d3d:	83 ec 0c             	sub    esp,0xc
10004d40:	68 c0 12 00 00       	push   0x12c0
10004d45:	e8 fc ff ff ff       	call   10004d46 <firstRun(bool)+0x23f1>	10004d46: R_386_PC32	milliTenthSleep(unsigned int)
10004d4a:	83 c4 10             	add    esp,0x10
10004d4d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004d4f: R_386_32	installKey
10004d54:	90                   	nop
10004d55:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10004d5c:	0f 84 e8 01 00 00    	je     10004f4a <firstRun(bool)+0x25f5>
10004d62:	e9 cf 02 00 00       	jmp    10005036 <firstRun(bool)+0x26e1>
10004d67:	83 ec 0c             	sub    esp,0xc
10004d6a:	68 f0 0a 00 00       	push   0xaf0
10004d6f:	e8 fc ff ff ff       	call   10004d70 <firstRun(bool)+0x241b>	10004d70: R_386_PC32	milliTenthSleep(unsigned int)
10004d74:	83 c4 10             	add    esp,0x10
10004d77:	e8 fc ff ff ff       	call   10004d78 <firstRun(bool)+0x2423>	10004d78: R_386_PC32	drawBootScreen()
10004d7c:	83 ec 08             	sub    esp,0x8
10004d7f:	6a 01                	push   0x1
10004d81:	68 d2 ab 00 10       	push   0x1000abd2	10004d82: R_386_32	.text
10004d86:	6a 0e                	push   0xe
10004d88:	6a 32                	push   0x32
10004d8a:	6a 02                	push   0x2
10004d8c:	6a 16                	push   0x16
10004d8e:	e8 fc ff ff ff       	call   10004d8f <firstRun(bool)+0x243a>	10004d8f: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10004d93:	83 c4 20             	add    esp,0x20
10004d96:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d97: R_386_32	term
10004d9b:	83 ec 04             	sub    esp,0x4
10004d9e:	6a 05                	push   0x5
10004da0:	6a 18                	push   0x18
10004da2:	50                   	push   eax
10004da3:	e8 fc ff ff ff       	call   10004da4 <firstRun(bool)+0x244f>	10004da4: R_386_PC32	VgaText::setCursor(int, int)
10004da8:	83 c4 10             	add    esp,0x10
10004dab:	a1 00 00 00 00       	mov    eax,ds:0x0	10004dac: R_386_32	term
10004db0:	6a 07                	push   0x7
10004db2:	6a 00                	push   0x0
10004db4:	68 e0 ab 00 10       	push   0x1000abe0	10004db5: R_386_32	.text
10004db9:	50                   	push   eax
10004dba:	e8 fc ff ff ff       	call   10004dbb <firstRun(bool)+0x2466>	10004dbb: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004dbf:	83 c4 10             	add    esp,0x10
10004dc2:	a1 00 00 00 00       	mov    eax,ds:0x0	10004dc3: R_386_32	term
10004dc7:	83 ec 04             	sub    esp,0x4
10004dca:	6a 06                	push   0x6
10004dcc:	6a 18                	push   0x18
10004dce:	50                   	push   eax
10004dcf:	e8 fc ff ff ff       	call   10004dd0 <firstRun(bool)+0x247b>	10004dd0: R_386_PC32	VgaText::setCursor(int, int)
10004dd4:	83 c4 10             	add    esp,0x10
10004dd7:	a1 00 00 00 00       	mov    eax,ds:0x0	10004dd8: R_386_32	term
10004ddc:	6a 07                	push   0x7
10004dde:	6a 00                	push   0x0
10004de0:	68 38 aa 00 10       	push   0x1000aa38	10004de1: R_386_32	.text
10004de5:	50                   	push   eax
10004de6:	e8 fc ff ff ff       	call   10004de7 <firstRun(bool)+0x2492>	10004de7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004deb:	83 c4 10             	add    esp,0x10
10004dee:	a1 00 00 00 00       	mov    eax,ds:0x0	10004def: R_386_32	term
10004df3:	83 ec 04             	sub    esp,0x4
10004df6:	6a 08                	push   0x8
10004df8:	6a 1c                	push   0x1c
10004dfa:	50                   	push   eax
10004dfb:	e8 fc ff ff ff       	call   10004dfc <firstRun(bool)+0x24a7>	10004dfc: R_386_PC32	VgaText::setCursor(int, int)
10004e00:	83 c4 10             	add    esp,0x10
10004e03:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e04: R_386_32	term
10004e08:	6a 07                	push   0x7
10004e0a:	6a 00                	push   0x0
10004e0c:	68 00 00 00 00       	push   0x0	10004e0d: R_386_32	pkeybuf
10004e11:	50                   	push   eax
10004e12:	e8 fc ff ff ff       	call   10004e13 <firstRun(bool)+0x24be>	10004e13: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004e17:	83 c4 10             	add    esp,0x10
10004e1a:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e1b: R_386_32	term
10004e1f:	83 ec 04             	sub    esp,0x4
10004e22:	6a 08                	push   0x8
10004e24:	6a 2c                	push   0x2c
10004e26:	50                   	push   eax
10004e27:	e8 fc ff ff ff       	call   10004e28 <firstRun(bool)+0x24d3>	10004e28: R_386_PC32	VgaText::setCursor(int, int)
10004e2c:	83 c4 10             	add    esp,0x10
10004e2f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e30: R_386_32	term
10004e34:	6a 07                	push   0x7
10004e36:	6a 07                	push   0x7
10004e38:	6a 20                	push   0x20
10004e3a:	50                   	push   eax
10004e3b:	e8 fc ff ff ff       	call   10004e3c <firstRun(bool)+0x24e7>	10004e3c: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004e40:	83 c4 10             	add    esp,0x10
10004e43:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e44: R_386_32	term
10004e48:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004e4b:	83 c2 1c             	add    edx,0x1c
10004e4e:	83 ec 04             	sub    esp,0x4
10004e51:	6a 08                	push   0x8
10004e53:	52                   	push   edx
10004e54:	50                   	push   eax
10004e55:	e8 fc ff ff ff       	call   10004e56 <firstRun(bool)+0x2501>	10004e56: R_386_PC32	VgaText::setCursor(int, int)
10004e5a:	83 c4 10             	add    esp,0x10
10004e5d:	83 ec 0c             	sub    esp,0xc
10004e60:	68 31 ab 00 10       	push   0x1000ab31	10004e61: R_386_32	.text
10004e65:	6a 0b                	push   0xb
10004e67:	6a 2b                	push   0x2b
10004e69:	6a 0a                	push   0xa
10004e6b:	6a 22                	push   0x22
10004e6d:	e8 fc ff ff ff       	call   10004e6e <firstRun(bool)+0x2519>	10004e6e: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004e72:	83 c4 20             	add    esp,0x20
10004e75:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e76: R_386_32	term
10004e7a:	83 ec 04             	sub    esp,0x4
10004e7d:	6a 0d                	push   0xd
10004e7f:	6a 24                	push   0x24
10004e81:	50                   	push   eax
10004e82:	e8 fc ff ff ff       	call   10004e83 <firstRun(bool)+0x252e>	10004e83: R_386_PC32	VgaText::setCursor(int, int)
10004e87:	83 c4 10             	add    esp,0x10
10004e8a:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e8b: R_386_32	term
10004e8f:	83 ec 08             	sub    esp,0x8
10004e92:	68 08 ac 00 10       	push   0x1000ac08	10004e93: R_386_32	.text
10004e97:	50                   	push   eax
10004e98:	e8 fc ff ff ff       	call   10004e99 <firstRun(bool)+0x2544>	10004e99: R_386_PC32	VgaText::puts(char const*)
10004e9d:	83 c4 10             	add    esp,0x10
10004ea0:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ea1: R_386_32	term
10004ea5:	83 ec 04             	sub    esp,0x4
10004ea8:	6a 0f                	push   0xf
10004eaa:	6a 24                	push   0x24
10004eac:	50                   	push   eax
10004ead:	e8 fc ff ff ff       	call   10004eae <firstRun(bool)+0x2559>	10004eae: R_386_PC32	VgaText::setCursor(int, int)
10004eb2:	83 c4 10             	add    esp,0x10
10004eb5:	a1 00 00 00 00       	mov    eax,ds:0x0	10004eb6: R_386_32	term
10004eba:	83 ec 08             	sub    esp,0x8
10004ebd:	68 30 ac 00 10       	push   0x1000ac30	10004ebe: R_386_32	.text
10004ec2:	50                   	push   eax
10004ec3:	e8 fc ff ff ff       	call   10004ec4 <firstRun(bool)+0x256f>	10004ec4: R_386_PC32	VgaText::puts(char const*)
10004ec8:	83 c4 10             	add    esp,0x10
10004ecb:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ecc: R_386_32	term
10004ed0:	83 ec 04             	sub    esp,0x4
10004ed3:	6a 10                	push   0x10
10004ed5:	6a 24                	push   0x24
10004ed7:	50                   	push   eax
10004ed8:	e8 fc ff ff ff       	call   10004ed9 <firstRun(bool)+0x2584>	10004ed9: R_386_PC32	VgaText::setCursor(int, int)
10004edd:	83 c4 10             	add    esp,0x10
10004ee0:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ee1: R_386_32	term
10004ee5:	83 ec 08             	sub    esp,0x8
10004ee8:	68 54 ac 00 10       	push   0x1000ac54	10004ee9: R_386_32	.text
10004eed:	50                   	push   eax
10004eee:	e8 fc ff ff ff       	call   10004eef <firstRun(bool)+0x259a>	10004eef: R_386_PC32	VgaText::puts(char const*)
10004ef3:	83 c4 10             	add    esp,0x10
10004ef6:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004ef8: R_386_32	installKey
10004efd:	83 ec 0c             	sub    esp,0xc
10004f00:	68 94 11 00 00       	push   0x1194
10004f05:	e8 fc ff ff ff       	call   10004f06 <firstRun(bool)+0x25b1>	10004f06: R_386_PC32	milliTenthSleep(unsigned int)
10004f0a:	83 c4 10             	add    esp,0x10
10004f0d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004f0f: R_386_32	installKey
10004f14:	a0 00 00 00 00       	mov    al,ds:0x0	10004f15: R_386_32	installKey
10004f19:	84 c0                	test   al,al
10004f1b:	0f 94 c0             	sete   al
10004f1e:	84 c0                	test   al,al
10004f20:	74 02                	je     10004f24 <firstRun(bool)+0x25cf>
10004f22:	eb f0                	jmp    10004f14 <firstRun(bool)+0x25bf>
10004f24:	e8 fc ff ff ff       	call   10004f25 <firstRun(bool)+0x25d0>	10004f25: R_386_PC32	drawBootScreen()
10004f29:	83 ec 0c             	sub    esp,0xc
10004f2c:	68 9c 18 00 00       	push   0x189c
10004f31:	e8 fc ff ff ff       	call   10004f32 <firstRun(bool)+0x25dd>	10004f32: R_386_PC32	milliTenthSleep(unsigned int)
10004f36:	83 c4 10             	add    esp,0x10
10004f39:	e9 a5 fa ff ff       	jmp    100049e3 <firstRun(bool)+0x208e>
10004f3e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004f40: R_386_32	installKey
10004f45:	e9 3f fb ff ff       	jmp    10004a89 <firstRun(bool)+0x2134>
10004f4a:	e8 fc ff ff ff       	call   10004f4b <firstRun(bool)+0x25f6>	10004f4b: R_386_PC32	drawBootScreen()
10004f4f:	83 ec 0c             	sub    esp,0xc
10004f52:	68 75 ac 00 10       	push   0x1000ac75	10004f53: R_386_32	.text
10004f57:	6a 0d                	push   0xd
10004f59:	6a 32                	push   0x32
10004f5b:	6a 05                	push   0x5
10004f5d:	6a 16                	push   0x16
10004f5f:	e8 fc ff ff ff       	call   10004f60 <firstRun(bool)+0x260b>	10004f60: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004f64:	83 c4 20             	add    esp,0x20
10004f67:	83 ec 0c             	sub    esp,0xc
10004f6a:	6a 00                	push   0x0
10004f6c:	e8 fc ff ff ff       	call   10004f6d <firstRun(bool)+0x2618>	10004f6d: R_386_PC32	bootInstallTasks(int)
10004f71:	83 c4 10             	add    esp,0x10
10004f74:	83 ec 0c             	sub    esp,0xc
10004f77:	68 90 ac 00 10       	push   0x1000ac90	10004f78: R_386_32	.text
10004f7c:	e8 fc ff ff ff       	call   10004f7d <firstRun(bool)+0x2628>	10004f7d: R_386_PC32	Dbg::kprintf(char const*, ...)
10004f81:	83 c4 10             	add    esp,0x10
10004f84:	c7 45 80 0c 00 00 00 	mov    DWORD PTR [ebp-0x80],0xc
10004f8b:	83 ec 0c             	sub    esp,0xc
10004f8e:	ff 75 80             	push   DWORD PTR [ebp-0x80]
10004f91:	e8 fc ff ff ff       	call   10004f92 <firstRun(bool)+0x263d>	10004f92: R_386_PC32	Virt::setupPageSwapping(int)
10004f96:	83 c4 10             	add    esp,0x10
10004f99:	83 ec 0c             	sub    esp,0xc
10004f9c:	6a 01                	push   0x1
10004f9e:	e8 fc ff ff ff       	call   10004f9f <firstRun(bool)+0x264a>	10004f9f: R_386_PC32	bootInstallTasks(int)
10004fa3:	83 c4 10             	add    esp,0x10
10004fa6:	83 ec 0c             	sub    esp,0xc
10004fa9:	68 b0 ac 00 10       	push   0x1000acb0	10004faa: R_386_32	.text
10004fae:	e8 fc ff ff ff       	call   10004faf <firstRun(bool)+0x265a>	10004faf: R_386_PC32	rmtree(char*)
10004fb3:	83 c4 10             	add    esp,0x10
10004fb6:	83 ec 0c             	sub    esp,0xc
10004fb9:	68 ca ac 00 10       	push   0x1000acca	10004fba: R_386_32	.text
10004fbe:	e8 fc ff ff ff       	call   10004fbf <firstRun(bool)+0x266a>	10004fbf: R_386_PC32	rmtree(char*)
10004fc3:	83 c4 10             	add    esp,0x10
10004fc6:	83 ec 08             	sub    esp,0x8
10004fc9:	68 c0 01 00 00       	push   0x1c0
10004fce:	68 b0 ac 00 10       	push   0x1000acb0	10004fcf: R_386_32	.text
10004fd3:	e8 fc ff ff ff       	call   10004fd4 <firstRun(bool)+0x267f>	10004fd4: R_386_PC32	mkdir(char const*, int)
10004fd8:	83 c4 10             	add    esp,0x10
10004fdb:	83 ec 08             	sub    esp,0x8
10004fde:	68 c0 01 00 00       	push   0x1c0
10004fe3:	68 ca ac 00 10       	push   0x1000acca	10004fe4: R_386_32	.text
10004fe8:	e8 fc ff ff ff       	call   10004fe9 <firstRun(bool)+0x2694>	10004fe9: R_386_PC32	mkdir(char const*, int)
10004fed:	83 c4 10             	add    esp,0x10
10004ff0:	83 ec 08             	sub    esp,0x8
10004ff3:	68 b0 ac 00 10       	push   0x1000acb0	10004ff4: R_386_32	.text
10004ff8:	68 e4 ac 00 10       	push   0x1000ace4	10004ff9: R_386_32	.text
10004ffd:	e8 fc ff ff ff       	call   10004ffe <firstRun(bool)+0x26a9>	10004ffe: R_386_PC32	copytree(char*, char*)
10005002:	83 c4 10             	add    esp,0x10
10005005:	83 ec 0c             	sub    esp,0xc
10005008:	6a 02                	push   0x2
1000500a:	e8 fc ff ff ff       	call   1000500b <firstRun(bool)+0x26b6>	1000500b: R_386_PC32	bootInstallTasks(int)
1000500f:	83 c4 10             	add    esp,0x10
10005012:	83 ec 0c             	sub    esp,0xc
10005015:	68 00 00 00 00       	push   0x0	10005016: R_386_32	currName
1000501a:	e8 fc ff ff ff       	call   1000501b <firstRun(bool)+0x26c6>	1000501b: R_386_PC32	createUser(char const*)
1000501f:	83 c4 10             	add    esp,0x10
10005022:	83 ec 0c             	sub    esp,0xc
10005025:	6a 03                	push   0x3
10005027:	e8 fc ff ff ff       	call   10005028 <firstRun(bool)+0x26d3>	10005028: R_386_PC32	bootInstallTasks(int)
1000502c:	83 c4 10             	add    esp,0x10
1000502f:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10005031: R_386_32	VgaText::hiddenOut
10005036:	8d 65 f4             	lea    esp,[ebp-0xc]
10005039:	5b                   	pop    ebx
1000503a:	5e                   	pop    esi
1000503b:	5f                   	pop    edi
1000503c:	5d                   	pop    ebp
1000503d:	c3                   	ret    

1000503e <loadExtensions()>:
1000503e:	55                   	push   ebp
1000503f:	89 e5                	mov    ebp,esp
10005041:	83 ec 08             	sub    esp,0x8
10005044:	83 ec 0c             	sub    esp,0xc
10005047:	68 8c ad 00 10       	push   0x1000ad8c	10005048: R_386_32	.text
1000504c:	e8 fc ff ff ff       	call   1000504d <loadExtensions()+0xf>	1000504d: R_386_PC32	KeSetBootMessage(char const*)
10005051:	83 c4 10             	add    esp,0x10
10005054:	90                   	nop
10005055:	c9                   	leave  
10005056:	c3                   	ret    

10005057 <rgtree(Reghive_Tag*, int, int)>:
10005057:	55                   	push   ebp
10005058:	89 e5                	mov    ebp,esp
1000505a:	53                   	push   ebx
1000505b:	83 ec 44             	sub    esp,0x44
1000505e:	83 7d 0c 01          	cmp    DWORD PTR [ebp+0xc],0x1
10005062:	75 16                	jne    1000507a <rgtree(Reghive_Tag*, int, int)+0x23>
10005064:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10005068:	75 10                	jne    1000507a <rgtree(Reghive_Tag*, int, int)+0x23>
1000506a:	83 ec 0c             	sub    esp,0xc
1000506d:	68 a2 ad 00 10       	push   0x1000ada2	1000506e: R_386_32	.text
10005072:	e8 fc ff ff ff       	call   10005073 <rgtree(Reghive_Tag*, int, int)+0x1c>	10005073: R_386_PC32	Dbg::kprintf(char const*, ...)
10005077:	83 c4 10             	add    esp,0x10
1000507a:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
1000507e:	0f 8e a9 00 00 00    	jle    1000512d <rgtree(Reghive_Tag*, int, int)+0xd6>
10005084:	83 ec 04             	sub    esp,0x4
10005087:	6a 32                	push   0x32
10005089:	6a 00                	push   0x0
1000508b:	8d 45 be             	lea    eax,[ebp-0x42]
1000508e:	50                   	push   eax
1000508f:	e8 fc ff ff ff       	call   10005090 <rgtree(Reghive_Tag*, int, int)+0x39>	10005090: R_386_PC32	memset
10005094:	83 c4 10             	add    esp,0x10
10005097:	83 ec 04             	sub    esp,0x4
1000509a:	8d 45 be             	lea    eax,[ebp-0x42]
1000509d:	50                   	push   eax
1000509e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100050a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100050a4:	e8 fc ff ff ff       	call   100050a5 <rgtree(Reghive_Tag*, int, int)+0x4e>	100050a5: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
100050a9:	83 c4 10             	add    esp,0x10
100050ac:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100050af:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100050b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100050b9:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100050bc:	7d 15                	jge    100050d3 <rgtree(Reghive_Tag*, int, int)+0x7c>
100050be:	83 ec 0c             	sub    esp,0xc
100050c1:	68 47 a8 00 10       	push   0x1000a847	100050c2: R_386_32	.text
100050c6:	e8 fc ff ff ff       	call   100050c7 <rgtree(Reghive_Tag*, int, int)+0x70>	100050c7: R_386_PC32	Dbg::kprintf(char const*, ...)
100050cb:	83 c4 10             	add    esp,0x10
100050ce:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100050d1:	eb e3                	jmp    100050b6 <rgtree(Reghive_Tag*, int, int)+0x5f>
100050d3:	83 ec 08             	sub    esp,0x8
100050d6:	8d 45 be             	lea    eax,[ebp-0x42]
100050d9:	50                   	push   eax
100050da:	68 a7 ad 00 10       	push   0x1000ada7	100050db: R_386_32	.text
100050df:	e8 fc ff ff ff       	call   100050e0 <rgtree(Reghive_Tag*, int, int)+0x89>	100050e0: R_386_PC32	Dbg::kprintf(char const*, ...)
100050e4:	83 c4 10             	add    esp,0x10
100050e7:	83 7d f0 4e          	cmp    DWORD PTR [ebp-0x10],0x4e
100050eb:	75 27                	jne    10005114 <rgtree(Reghive_Tag*, int, int)+0xbd>
100050ed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100050f0:	8d 58 04             	lea    ebx,[eax+0x4]
100050f3:	83 ec 08             	sub    esp,0x8
100050f6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100050f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100050fc:	e8 fc ff ff ff       	call   100050fd <rgtree(Reghive_Tag*, int, int)+0xa6>	100050fd: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005101:	83 c4 10             	add    esp,0x10
10005104:	83 ec 04             	sub    esp,0x4
10005107:	53                   	push   ebx
10005108:	50                   	push   eax
10005109:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000510c:	e8 fc ff ff ff       	call   1000510d <rgtree(Reghive_Tag*, int, int)+0xb6>	1000510d: R_386_PC32	rgtree(Reghive_Tag*, int, int)
10005111:	83 c4 10             	add    esp,0x10
10005114:	83 ec 08             	sub    esp,0x8
10005117:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000511a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000511d:	e8 fc ff ff ff       	call   1000511e <rgtree(Reghive_Tag*, int, int)+0xc7>	1000511e: R_386_PC32	CmGetNext(Reghive_Tag*, int)
10005122:	83 c4 10             	add    esp,0x10
10005125:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10005128:	e9 4d ff ff ff       	jmp    1000507a <rgtree(Reghive_Tag*, int, int)+0x23>
1000512d:	90                   	nop
1000512e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10005131:	c9                   	leave  
10005132:	c3                   	ret    

10005133 <getRegsafeName(char*, char*)>:
10005133:	55                   	push   ebp
10005134:	89 e5                	mov    ebp,esp
10005136:	83 ec 10             	sub    esp,0x10
10005139:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000513c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000513f:	e8 fc ff ff ff       	call   10005140 <getRegsafeName(char*, char*)+0xd>	10005140: R_386_PC32	strcpy
10005144:	83 c4 08             	add    esp,0x8
10005147:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000514e:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005151:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005154:	01 d0                	add    eax,edx
10005156:	8a 00                	mov    al,BYTE PTR [eax]
10005158:	84 c0                	test   al,al
1000515a:	74 7f                	je     100051db <getRegsafeName(char*, char*)+0xa8>
1000515c:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
1000515f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005162:	01 d0                	add    eax,edx
10005164:	8a 00                	mov    al,BYTE PTR [eax]
10005166:	3c 60                	cmp    al,0x60
10005168:	7e 42                	jle    100051ac <getRegsafeName(char*, char*)+0x79>
1000516a:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
1000516d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005170:	01 d0                	add    eax,edx
10005172:	8a 00                	mov    al,BYTE PTR [eax]
10005174:	3c 7a                	cmp    al,0x7a
10005176:	7f 34                	jg     100051ac <getRegsafeName(char*, char*)+0x79>
10005178:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
1000517b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000517e:	01 d0                	add    eax,edx
10005180:	8a 00                	mov    al,BYTE PTR [eax]
10005182:	8d 48 9f             	lea    ecx,[eax-0x61]
10005185:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005188:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000518b:	01 d0                	add    eax,edx
1000518d:	88 ca                	mov    dl,cl
1000518f:	88 10                	mov    BYTE PTR [eax],dl
10005191:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005194:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005197:	01 d0                	add    eax,edx
10005199:	8a 00                	mov    al,BYTE PTR [eax]
1000519b:	8d 48 41             	lea    ecx,[eax+0x41]
1000519e:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
100051a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100051a4:	01 d0                	add    eax,edx
100051a6:	88 ca                	mov    dl,cl
100051a8:	88 10                	mov    BYTE PTR [eax],dl
100051aa:	eb 27                	jmp    100051d3 <getRegsafeName(char*, char*)+0xa0>
100051ac:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
100051af:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100051b2:	01 d0                	add    eax,edx
100051b4:	8a 00                	mov    al,BYTE PTR [eax]
100051b6:	3c 40                	cmp    al,0x40
100051b8:	7e 0e                	jle    100051c8 <getRegsafeName(char*, char*)+0x95>
100051ba:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
100051bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100051c0:	01 d0                	add    eax,edx
100051c2:	8a 00                	mov    al,BYTE PTR [eax]
100051c4:	3c 5a                	cmp    al,0x5a
100051c6:	7e 0b                	jle    100051d3 <getRegsafeName(char*, char*)+0xa0>
100051c8:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
100051cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100051ce:	01 d0                	add    eax,edx
100051d0:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
100051d3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100051d6:	e9 73 ff ff ff       	jmp    1000514e <getRegsafeName(char*, char*)+0x1b>
100051db:	90                   	nop
100051dc:	c9                   	leave  
100051dd:	c3                   	ret    

100051de <begin(void*)>:
100051de:	55                   	push   ebp
100051df:	89 e5                	mov    ebp,esp
100051e1:	57                   	push   edi
100051e2:	56                   	push   esi
100051e3:	53                   	push   ebx
100051e4:	81 ec 5c 07 00 00    	sub    esp,0x75c
100051ea:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
100051ee:	83 ec 0c             	sub    esp,0xc
100051f1:	68 14 01 00 00       	push   0x114
100051f6:	e8 fc ff ff ff       	call   100051f7 <begin(void*)+0x19>	100051f7: R_386_PC32	operator new(unsigned long)
100051fb:	83 c4 10             	add    esp,0x10
100051fe:	89 c3                	mov    ebx,eax
10005200:	a1 00 00 00 00       	mov    eax,ds:0x0	10005201: R_386_32	kernelProcess
10005205:	83 ec 04             	sub    esp,0x4
10005208:	50                   	push   eax
10005209:	68 ac ad 00 10       	push   0x1000adac	1000520a: R_386_32	.text
1000520e:	53                   	push   ebx
1000520f:	e8 fc ff ff ff       	call   10005210 <begin(void*)+0x32>	10005210: R_386_PC32	File::File(char const*, Process*)
10005214:	83 c4 10             	add    esp,0x10
10005217:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
1000521a:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
1000521e:	75 10                	jne    10005230 <begin(void*)+0x52>
10005220:	83 ec 0c             	sub    esp,0xc
10005223:	68 ca ad 00 10       	push   0x1000adca	10005224: R_386_32	.text
10005228:	e8 fc ff ff ff       	call   10005229 <begin(void*)+0x4b>	10005229: R_386_PC32	KePanic(char const*)
1000522d:	83 c4 10             	add    esp,0x10
10005230:	83 ec 08             	sub    esp,0x8
10005233:	6a 01                	push   0x1
10005235:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
10005238:	e8 fc ff ff ff       	call   10005239 <begin(void*)+0x5b>	10005239: R_386_PC32	File::open(FileOpenMode)
1000523d:	83 c4 10             	add    esp,0x10
10005240:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10005243:	83 7d b4 00          	cmp    DWORD PTR [ebp-0x4c],0x0
10005247:	75 10                	jne    10005259 <begin(void*)+0x7b>
10005249:	83 ec 0c             	sub    esp,0xc
1000524c:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
1000524f:	e8 fc ff ff ff       	call   10005250 <begin(void*)+0x72>	10005250: R_386_PC32	File::close()
10005254:	83 c4 10             	add    esp,0x10
10005257:	eb 04                	jmp    1000525d <begin(void*)+0x7f>
10005259:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
1000525d:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10005261:	74 15                	je     10005278 <begin(void*)+0x9a>
10005263:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10005266:	8b 00                	mov    eax,DWORD PTR [eax]
10005268:	83 c0 08             	add    eax,0x8
1000526b:	8b 00                	mov    eax,DWORD PTR [eax]
1000526d:	83 ec 0c             	sub    esp,0xc
10005270:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
10005273:	ff d0                	call   eax
10005275:	83 c4 10             	add    esp,0x10
10005278:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	1000527a: R_386_32	KeIsPreemptionOn
1000527f:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10005283:	74 0f                	je     10005294 <begin(void*)+0xb6>
10005285:	83 ec 0c             	sub    esp,0xc
10005288:	6a 00                	push   0x0
1000528a:	e8 fc ff ff ff       	call   1000528b <begin(void*)+0xad>	1000528b: R_386_PC32	firstRun(bool)
1000528f:	83 c4 10             	add    esp,0x10
10005292:	eb 05                	jmp    10005299 <begin(void*)+0xbb>
10005294:	e8 fc ff ff ff       	call   10005295 <begin(void*)+0xb7>	10005295: R_386_PC32	loadExtensions()
10005299:	8d 45 90             	lea    eax,[ebp-0x70]
1000529c:	bb c8 b3 00 10       	mov    ebx,0x1000b3c8	1000529d: R_386_32	.text
100052a1:	ba 04 00 00 00       	mov    edx,0x4
100052a6:	89 c7                	mov    edi,eax
100052a8:	89 de                	mov    esi,ebx
100052aa:	89 d1                	mov    ecx,edx
100052ac:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100052ae:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
100052b2:	0f 84 50 13 00 00    	je     10006608 <begin(void*)+0x142a>
100052b8:	83 ec 0c             	sub    esp,0xc
100052bb:	68 24 07 00 00       	push   0x724
100052c0:	e8 fc ff ff ff       	call   100052c1 <begin(void*)+0xe3>	100052c1: R_386_PC32	operator new(unsigned long)
100052c5:	83 c4 10             	add    esp,0x10
100052c8:	89 c3                	mov    ebx,eax
100052ca:	8d 45 90             	lea    eax,[ebp-0x70]
100052cd:	50                   	push   eax
100052ce:	6a 00                	push   0x0
100052d0:	68 da ad 00 10       	push   0x1000adda	100052d1: R_386_32	.text
100052d5:	53                   	push   ebx
100052d6:	e8 fc ff ff ff       	call   100052d7 <begin(void*)+0xf9>	100052d7: R_386_PC32	Process::Process(char const*, Process*, char**)
100052db:	83 c4 10             	add    esp,0x10
100052de:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
100052e1:	83 ec 0c             	sub    esp,0xc
100052e4:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
100052e7:	e8 fc ff ff ff       	call   100052e8 <begin(void*)+0x10a>	100052e8: R_386_PC32	Process::createUserThread()
100052ec:	83 c4 10             	add    esp,0x10
100052ef:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100052f1: R_386_32	VgaText::hiddenOut
100052f6:	a1 00 00 00 00       	mov    eax,ds:0x0	100052f7: R_386_32	term
100052fb:	83 ec 0c             	sub    esp,0xc
100052fe:	50                   	push   eax
100052ff:	e8 fc ff ff ff       	call   10005300 <begin(void*)+0x122>	10005300: R_386_PC32	setActiveTerminal(VgaText*)
10005304:	83 c4 10             	add    esp,0x10
10005307:	e8 fc ff ff ff       	call   10005308 <begin(void*)+0x12a>	10005308: R_386_PC32	drawBootScreen()
1000530c:	83 ec 0c             	sub    esp,0xc
1000530f:	68 75 ac 00 10       	push   0x1000ac75	10005310: R_386_32	.text
10005314:	6a 0d                	push   0xd
10005316:	6a 32                	push   0x32
10005318:	6a 05                	push   0x5
1000531a:	6a 16                	push   0x16
1000531c:	e8 fc ff ff ff       	call   1000531d <begin(void*)+0x13f>	1000531d: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005321:	83 c4 20             	add    esp,0x20
10005324:	83 ec 0c             	sub    esp,0xc
10005327:	6a 03                	push   0x3
10005329:	e8 fc ff ff ff       	call   1000532a <begin(void*)+0x14c>	1000532a: R_386_PC32	bootInstallTasks(int)
1000532e:	83 c4 10             	add    esp,0x10
10005331:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10005333: R_386_32	VgaText::hiddenOut
10005338:	83 ec 0c             	sub    esp,0xc
1000533b:	68 14 01 00 00       	push   0x114
10005340:	e8 fc ff ff ff       	call   10005341 <begin(void*)+0x163>	10005341: R_386_PC32	operator new(unsigned long)
10005345:	83 c4 10             	add    esp,0x10
10005348:	89 c3                	mov    ebx,eax
1000534a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000534b: R_386_32	kernelProcess
1000534f:	83 ec 04             	sub    esp,0x4
10005352:	50                   	push   eax
10005353:	68 f7 ad 00 10       	push   0x1000adf7	10005354: R_386_32	.text
10005358:	53                   	push   ebx
10005359:	e8 fc ff ff ff       	call   1000535a <begin(void*)+0x17c>	1000535a: R_386_PC32	File::File(char const*, Process*)
1000535e:	83 c4 10             	add    esp,0x10
10005361:	89 5d ac             	mov    DWORD PTR [ebp-0x54],ebx
10005364:	83 ec 08             	sub    esp,0x8
10005367:	6a 01                	push   0x1
10005369:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
1000536c:	e8 fc ff ff ff       	call   1000536d <begin(void*)+0x18f>	1000536d: R_386_PC32	File::open(FileOpenMode)
10005371:	83 c4 10             	add    esp,0x10
10005374:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10005377:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
1000537b:	75 39                	jne    100053b6 <begin(void*)+0x1d8>
1000537d:	83 ec 0c             	sub    esp,0xc
10005380:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10005383:	e8 fc ff ff ff       	call   10005384 <begin(void*)+0x1a6>	10005384: R_386_PC32	File::close()
10005388:	83 c4 10             	add    esp,0x10
1000538b:	83 ec 0c             	sub    esp,0xc
1000538e:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10005391:	e8 fc ff ff ff       	call   10005392 <begin(void*)+0x1b4>	10005392: R_386_PC32	File::unlink()
10005396:	83 c4 10             	add    esp,0x10
10005399:	83 7d ac 00          	cmp    DWORD PTR [ebp-0x54],0x0
1000539d:	74 44                	je     100053e3 <begin(void*)+0x205>
1000539f:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100053a2:	8b 00                	mov    eax,DWORD PTR [eax]
100053a4:	83 c0 08             	add    eax,0x8
100053a7:	8b 00                	mov    eax,DWORD PTR [eax]
100053a9:	83 ec 0c             	sub    esp,0xc
100053ac:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
100053af:	ff d0                	call   eax
100053b1:	83 c4 10             	add    esp,0x10
100053b4:	eb 2d                	jmp    100053e3 <begin(void*)+0x205>
100053b6:	83 7d ac 00          	cmp    DWORD PTR [ebp-0x54],0x0
100053ba:	74 15                	je     100053d1 <begin(void*)+0x1f3>
100053bc:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100053bf:	8b 00                	mov    eax,DWORD PTR [eax]
100053c1:	83 c0 08             	add    eax,0x8
100053c4:	8b 00                	mov    eax,DWORD PTR [eax]
100053c6:	83 ec 0c             	sub    esp,0xc
100053c9:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
100053cc:	ff d0                	call   eax
100053ce:	83 c4 10             	add    esp,0x10
100053d1:	83 ec 0c             	sub    esp,0xc
100053d4:	6a 01                	push   0x1
100053d6:	e8 fc ff ff ff       	call   100053d7 <begin(void*)+0x1f9>	100053d7: R_386_PC32	sleep(unsigned int)
100053db:	83 c4 10             	add    esp,0x10
100053de:	e9 55 ff ff ff       	jmp    10005338 <begin(void*)+0x15a>
100053e3:	90                   	nop
100053e4:	83 ec 0c             	sub    esp,0xc
100053e7:	6a 01                	push   0x1
100053e9:	e8 fc ff ff ff       	call   100053ea <begin(void*)+0x20c>	100053ea: R_386_PC32	sleep(unsigned int)
100053ee:	83 c4 10             	add    esp,0x10
100053f1:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100053f3: R_386_32	VgaText::hiddenOut
100053f8:	a1 00 00 00 00       	mov    eax,ds:0x0	100053f9: R_386_32	term
100053fd:	83 ec 0c             	sub    esp,0xc
10005400:	50                   	push   eax
10005401:	e8 fc ff ff ff       	call   10005402 <begin(void*)+0x224>	10005402: R_386_PC32	setActiveTerminal(VgaText*)
10005406:	83 c4 10             	add    esp,0x10
10005409:	e8 fc ff ff ff       	call   1000540a <begin(void*)+0x22c>	1000540a: R_386_PC32	drawBootScreen()
1000540e:	83 ec 0c             	sub    esp,0xc
10005411:	68 75 ac 00 10       	push   0x1000ac75	10005412: R_386_32	.text
10005416:	6a 0d                	push   0xd
10005418:	6a 32                	push   0x32
1000541a:	6a 05                	push   0x5
1000541c:	6a 16                	push   0x16
1000541e:	e8 fc ff ff ff       	call   1000541f <begin(void*)+0x241>	1000541f: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005423:	83 c4 20             	add    esp,0x20
10005426:	83 ec 0c             	sub    esp,0xc
10005429:	6a 04                	push   0x4
1000542b:	e8 fc ff ff ff       	call   1000542c <begin(void*)+0x24e>	1000542c: R_386_PC32	bootInstallTasks(int)
10005430:	83 c4 10             	add    esp,0x10
10005433:	eb 01                	jmp    10005436 <begin(void*)+0x258>
10005435:	90                   	nop
10005436:	83 ec 0c             	sub    esp,0xc
10005439:	6a 05                	push   0x5
1000543b:	e8 fc ff ff ff       	call   1000543c <begin(void*)+0x25e>	1000543c: R_386_PC32	bootInstallTasks(int)
10005440:	83 c4 10             	add    esp,0x10
10005443:	83 ec 0c             	sub    esp,0xc
10005446:	68 04 ae 00 10       	push   0x1000ae04	10005447: R_386_32	.text
1000544b:	e8 fc ff ff ff       	call   1000544c <begin(void*)+0x26e>	1000544c: R_386_PC32	CmOpen(char const*)
10005450:	83 c4 10             	add    esp,0x10
10005453:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10005456:	a0 00 00 00 00       	mov    al,ds:0x0	10005457: R_386_32	createNewUserMode
1000545b:	83 f0 01             	xor    eax,0x1
1000545e:	84 c0                	test   al,al
10005460:	74 15                	je     10005477 <begin(void*)+0x299>
10005462:	83 ec 04             	sub    esp,0x4
10005465:	68 29 ae 00 10       	push   0x1000ae29	10005466: R_386_32	.text
1000546a:	6a 00                	push   0x0
1000546c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000546f:	e8 fc ff ff ff       	call   10005470 <begin(void*)+0x292>	10005470: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005474:	83 c4 10             	add    esp,0x10
10005477:	83 ec 08             	sub    esp,0x8
1000547a:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10005480:	50                   	push   eax
10005481:	68 00 00 00 00       	push   0x0	10005482: R_386_32	currName
10005486:	e8 fc ff ff ff       	call   10005487 <begin(void*)+0x2a9>	10005487: R_386_PC32	getRegsafeName(char*, char*)
1000548b:	83 c4 10             	add    esp,0x10
1000548e:	83 ec 08             	sub    esp,0x8
10005491:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10005497:	50                   	push   eax
10005498:	68 30 ae 00 10       	push   0x1000ae30	10005499: R_386_32	.text
1000549d:	e8 fc ff ff ff       	call   1000549e <begin(void*)+0x2c0>	1000549e: R_386_PC32	Dbg::kprintf(char const*, ...)
100054a2:	83 c4 10             	add    esp,0x10
100054a5:	83 ec 08             	sub    esp,0x8
100054a8:	68 42 ae 00 10       	push   0x1000ae42	100054a9: R_386_32	.text
100054ad:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100054b3:	50                   	push   eax
100054b4:	e8 fc ff ff ff       	call   100054b5 <begin(void*)+0x2d7>	100054b5: R_386_PC32	strcpy
100054b9:	83 c4 10             	add    esp,0x10
100054bc:	83 ec 08             	sub    esp,0x8
100054bf:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
100054c5:	50                   	push   eax
100054c6:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100054cc:	50                   	push   eax
100054cd:	e8 fc ff ff ff       	call   100054ce <begin(void*)+0x2f0>	100054ce: R_386_PC32	strcat
100054d2:	83 c4 10             	add    esp,0x10
100054d5:	83 ec 08             	sub    esp,0x8
100054d8:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100054de:	50                   	push   eax
100054df:	68 50 ae 00 10       	push   0x1000ae50	100054e0: R_386_32	.text
100054e4:	e8 fc ff ff ff       	call   100054e5 <begin(void*)+0x307>	100054e5: R_386_PC32	Dbg::kprintf(char const*, ...)
100054e9:	83 c4 10             	add    esp,0x10
100054ec:	a0 00 00 00 00       	mov    al,ds:0x0	100054ed: R_386_32	createNewUserMode
100054f1:	83 f0 01             	xor    eax,0x1
100054f4:	84 c0                	test   al,al
100054f6:	0f 84 60 03 00 00    	je     1000585c <begin(void*)+0x67e>
100054fc:	83 ec 08             	sub    esp,0x8
100054ff:	68 29 ae 00 10       	push   0x1000ae29	10005500: R_386_32	.text
10005504:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005507:	e8 fc ff ff ff       	call   10005508 <begin(void*)+0x32a>	10005508: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000550c:	83 c4 10             	add    esp,0x10
1000550f:	83 ec 08             	sub    esp,0x8
10005512:	50                   	push   eax
10005513:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005516:	e8 fc ff ff ff       	call   10005517 <begin(void*)+0x339>	10005517: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000551b:	83 c4 10             	add    esp,0x10
1000551e:	83 ec 04             	sub    esp,0x4
10005521:	68 63 ae 00 10       	push   0x1000ae63	10005522: R_386_32	.text
10005526:	50                   	push   eax
10005527:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000552a:	e8 fc ff ff ff       	call   1000552b <begin(void*)+0x34d>	1000552b: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000552f:	83 c4 10             	add    esp,0x10
10005532:	83 ec 08             	sub    esp,0x8
10005535:	68 29 ae 00 10       	push   0x1000ae29	10005536: R_386_32	.text
1000553a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000553d:	e8 fc ff ff ff       	call   1000553e <begin(void*)+0x360>	1000553e: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005542:	83 c4 10             	add    esp,0x10
10005545:	83 ec 08             	sub    esp,0x8
10005548:	50                   	push   eax
10005549:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000554c:	e8 fc ff ff ff       	call   1000554d <begin(void*)+0x36f>	1000554d: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005551:	83 c4 10             	add    esp,0x10
10005554:	83 ec 04             	sub    esp,0x4
10005557:	68 69 ae 00 10       	push   0x1000ae69	10005558: R_386_32	.text
1000555c:	50                   	push   eax
1000555d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005560:	e8 fc ff ff ff       	call   10005561 <begin(void*)+0x383>	10005561: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005565:	83 c4 10             	add    esp,0x10
10005568:	83 ec 08             	sub    esp,0x8
1000556b:	68 29 ae 00 10       	push   0x1000ae29	1000556c: R_386_32	.text
10005570:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005573:	e8 fc ff ff ff       	call   10005574 <begin(void*)+0x396>	10005574: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005578:	83 c4 10             	add    esp,0x10
1000557b:	83 ec 08             	sub    esp,0x8
1000557e:	50                   	push   eax
1000557f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005582:	e8 fc ff ff ff       	call   10005583 <begin(void*)+0x3a5>	10005583: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005587:	83 c4 10             	add    esp,0x10
1000558a:	83 ec 04             	sub    esp,0x4
1000558d:	68 6e ae 00 10       	push   0x1000ae6e	1000558e: R_386_32	.text
10005592:	50                   	push   eax
10005593:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005596:	e8 fc ff ff ff       	call   10005597 <begin(void*)+0x3b9>	10005597: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000559b:	83 c4 10             	add    esp,0x10
1000559e:	83 ec 08             	sub    esp,0x8
100055a1:	68 29 ae 00 10       	push   0x1000ae29	100055a2: R_386_32	.text
100055a6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055a9:	e8 fc ff ff ff       	call   100055aa <begin(void*)+0x3cc>	100055aa: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100055ae:	83 c4 10             	add    esp,0x10
100055b1:	83 ec 08             	sub    esp,0x8
100055b4:	50                   	push   eax
100055b5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055b8:	e8 fc ff ff ff       	call   100055b9 <begin(void*)+0x3db>	100055b9: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100055bd:	83 c4 10             	add    esp,0x10
100055c0:	83 ec 04             	sub    esp,0x4
100055c3:	68 73 ae 00 10       	push   0x1000ae73	100055c4: R_386_32	.text
100055c8:	50                   	push   eax
100055c9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055cc:	e8 fc ff ff ff       	call   100055cd <begin(void*)+0x3ef>	100055cd: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100055d1:	83 c4 10             	add    esp,0x10
100055d4:	83 ec 08             	sub    esp,0x8
100055d7:	68 29 ae 00 10       	push   0x1000ae29	100055d8: R_386_32	.text
100055dc:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055df:	e8 fc ff ff ff       	call   100055e0 <begin(void*)+0x402>	100055e0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100055e4:	83 c4 10             	add    esp,0x10
100055e7:	83 ec 08             	sub    esp,0x8
100055ea:	50                   	push   eax
100055eb:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055ee:	e8 fc ff ff ff       	call   100055ef <begin(void*)+0x411>	100055ef: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100055f3:	83 c4 10             	add    esp,0x10
100055f6:	83 ec 04             	sub    esp,0x4
100055f9:	68 79 ae 00 10       	push   0x1000ae79	100055fa: R_386_32	.text
100055fe:	50                   	push   eax
100055ff:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005602:	e8 fc ff ff ff       	call   10005603 <begin(void*)+0x425>	10005603: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005607:	83 c4 10             	add    esp,0x10
1000560a:	83 ec 08             	sub    esp,0x8
1000560d:	68 83 ae 00 10       	push   0x1000ae83	1000560e: R_386_32	.text
10005612:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005615:	e8 fc ff ff ff       	call   10005616 <begin(void*)+0x438>	10005616: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000561a:	83 c4 10             	add    esp,0x10
1000561d:	83 ec 08             	sub    esp,0x8
10005620:	50                   	push   eax
10005621:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005624:	e8 fc ff ff ff       	call   10005625 <begin(void*)+0x447>	10005625: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005629:	83 c4 10             	add    esp,0x10
1000562c:	83 ec 04             	sub    esp,0x4
1000562f:	68 94 ae 00 10       	push   0x1000ae94	10005630: R_386_32	.text
10005634:	50                   	push   eax
10005635:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005638:	e8 fc ff ff ff       	call   10005639 <begin(void*)+0x45b>	10005639: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000563d:	83 c4 10             	add    esp,0x10
10005640:	83 ec 08             	sub    esp,0x8
10005643:	68 83 ae 00 10       	push   0x1000ae83	10005644: R_386_32	.text
10005648:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000564b:	e8 fc ff ff ff       	call   1000564c <begin(void*)+0x46e>	1000564c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005650:	83 c4 10             	add    esp,0x10
10005653:	83 ec 08             	sub    esp,0x8
10005656:	50                   	push   eax
10005657:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000565a:	e8 fc ff ff ff       	call   1000565b <begin(void*)+0x47d>	1000565b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000565f:	83 c4 10             	add    esp,0x10
10005662:	83 ec 04             	sub    esp,0x4
10005665:	68 99 ae 00 10       	push   0x1000ae99	10005666: R_386_32	.text
1000566a:	50                   	push   eax
1000566b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000566e:	e8 fc ff ff ff       	call   1000566f <begin(void*)+0x491>	1000566f: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005673:	83 c4 10             	add    esp,0x10
10005676:	83 ec 08             	sub    esp,0x8
10005679:	68 83 ae 00 10       	push   0x1000ae83	1000567a: R_386_32	.text
1000567e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005681:	e8 fc ff ff ff       	call   10005682 <begin(void*)+0x4a4>	10005682: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005686:	83 c4 10             	add    esp,0x10
10005689:	83 ec 08             	sub    esp,0x8
1000568c:	50                   	push   eax
1000568d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005690:	e8 fc ff ff ff       	call   10005691 <begin(void*)+0x4b3>	10005691: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005695:	83 c4 10             	add    esp,0x10
10005698:	83 ec 04             	sub    esp,0x4
1000569b:	68 9e ae 00 10       	push   0x1000ae9e	1000569c: R_386_32	.text
100056a0:	50                   	push   eax
100056a1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056a4:	e8 fc ff ff ff       	call   100056a5 <begin(void*)+0x4c7>	100056a5: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100056a9:	83 c4 10             	add    esp,0x10
100056ac:	83 ec 08             	sub    esp,0x8
100056af:	68 83 ae 00 10       	push   0x1000ae83	100056b0: R_386_32	.text
100056b4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056b7:	e8 fc ff ff ff       	call   100056b8 <begin(void*)+0x4da>	100056b8: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100056bc:	83 c4 10             	add    esp,0x10
100056bf:	83 ec 08             	sub    esp,0x8
100056c2:	50                   	push   eax
100056c3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056c6:	e8 fc ff ff ff       	call   100056c7 <begin(void*)+0x4e9>	100056c7: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100056cb:	83 c4 10             	add    esp,0x10
100056ce:	83 ec 04             	sub    esp,0x4
100056d1:	68 a4 ae 00 10       	push   0x1000aea4	100056d2: R_386_32	.text
100056d6:	50                   	push   eax
100056d7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056da:	e8 fc ff ff ff       	call   100056db <begin(void*)+0x4fd>	100056db: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100056df:	83 c4 10             	add    esp,0x10
100056e2:	83 ec 08             	sub    esp,0x8
100056e5:	68 83 ae 00 10       	push   0x1000ae83	100056e6: R_386_32	.text
100056ea:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056ed:	e8 fc ff ff ff       	call   100056ee <begin(void*)+0x510>	100056ee: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100056f2:	83 c4 10             	add    esp,0x10
100056f5:	83 ec 08             	sub    esp,0x8
100056f8:	50                   	push   eax
100056f9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056fc:	e8 fc ff ff ff       	call   100056fd <begin(void*)+0x51f>	100056fd: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005701:	83 c4 10             	add    esp,0x10
10005704:	83 ec 04             	sub    esp,0x4
10005707:	68 a9 ae 00 10       	push   0x1000aea9	10005708: R_386_32	.text
1000570c:	50                   	push   eax
1000570d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005710:	e8 fc ff ff ff       	call   10005711 <begin(void*)+0x533>	10005711: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005715:	83 c4 10             	add    esp,0x10
10005718:	83 ec 08             	sub    esp,0x8
1000571b:	68 83 ae 00 10       	push   0x1000ae83	1000571c: R_386_32	.text
10005720:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005723:	e8 fc ff ff ff       	call   10005724 <begin(void*)+0x546>	10005724: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005728:	83 c4 10             	add    esp,0x10
1000572b:	83 ec 08             	sub    esp,0x8
1000572e:	50                   	push   eax
1000572f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005732:	e8 fc ff ff ff       	call   10005733 <begin(void*)+0x555>	10005733: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005737:	83 c4 10             	add    esp,0x10
1000573a:	83 ec 04             	sub    esp,0x4
1000573d:	68 af ae 00 10       	push   0x1000aeaf	1000573e: R_386_32	.text
10005742:	50                   	push   eax
10005743:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005746:	e8 fc ff ff ff       	call   10005747 <begin(void*)+0x569>	10005747: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000574b:	83 c4 10             	add    esp,0x10
1000574e:	83 ec 08             	sub    esp,0x8
10005751:	68 83 ae 00 10       	push   0x1000ae83	10005752: R_386_32	.text
10005756:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005759:	e8 fc ff ff ff       	call   1000575a <begin(void*)+0x57c>	1000575a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000575e:	83 c4 10             	add    esp,0x10
10005761:	83 ec 08             	sub    esp,0x8
10005764:	50                   	push   eax
10005765:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005768:	e8 fc ff ff ff       	call   10005769 <begin(void*)+0x58b>	10005769: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000576d:	83 c4 10             	add    esp,0x10
10005770:	83 ec 04             	sub    esp,0x4
10005773:	68 ba ae 00 10       	push   0x1000aeba	10005774: R_386_32	.text
10005778:	50                   	push   eax
10005779:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000577c:	e8 fc ff ff ff       	call   1000577d <begin(void*)+0x59f>	1000577d: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005781:	83 c4 10             	add    esp,0x10
10005784:	83 ec 08             	sub    esp,0x8
10005787:	68 c5 ae 00 10       	push   0x1000aec5	10005788: R_386_32	.text
1000578c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000578f:	e8 fc ff ff ff       	call   10005790 <begin(void*)+0x5b2>	10005790: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005794:	83 c4 10             	add    esp,0x10
10005797:	83 ec 08             	sub    esp,0x8
1000579a:	50                   	push   eax
1000579b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000579e:	e8 fc ff ff ff       	call   1000579f <begin(void*)+0x5c1>	1000579f: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100057a3:	83 c4 10             	add    esp,0x10
100057a6:	83 ec 04             	sub    esp,0x4
100057a9:	68 d1 ae 00 10       	push   0x1000aed1	100057aa: R_386_32	.text
100057ae:	50                   	push   eax
100057af:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057b2:	e8 fc ff ff ff       	call   100057b3 <begin(void*)+0x5d5>	100057b3: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100057b7:	83 c4 10             	add    esp,0x10
100057ba:	83 ec 08             	sub    esp,0x8
100057bd:	68 da ae 00 10       	push   0x1000aeda	100057be: R_386_32	.text
100057c2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057c5:	e8 fc ff ff ff       	call   100057c6 <begin(void*)+0x5e8>	100057c6: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100057ca:	83 c4 10             	add    esp,0x10
100057cd:	83 ec 08             	sub    esp,0x8
100057d0:	50                   	push   eax
100057d1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057d4:	e8 fc ff ff ff       	call   100057d5 <begin(void*)+0x5f7>	100057d5: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100057d9:	83 c4 10             	add    esp,0x10
100057dc:	83 ec 04             	sub    esp,0x4
100057df:	68 e7 ae 00 10       	push   0x1000aee7	100057e0: R_386_32	.text
100057e4:	50                   	push   eax
100057e5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057e8:	e8 fc ff ff ff       	call   100057e9 <begin(void*)+0x60b>	100057e9: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100057ed:	83 c4 10             	add    esp,0x10
100057f0:	83 ec 08             	sub    esp,0x8
100057f3:	68 da ae 00 10       	push   0x1000aeda	100057f4: R_386_32	.text
100057f8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057fb:	e8 fc ff ff ff       	call   100057fc <begin(void*)+0x61e>	100057fc: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005800:	83 c4 10             	add    esp,0x10
10005803:	83 ec 08             	sub    esp,0x8
10005806:	50                   	push   eax
10005807:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000580a:	e8 fc ff ff ff       	call   1000580b <begin(void*)+0x62d>	1000580b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000580f:	83 c4 10             	add    esp,0x10
10005812:	83 ec 04             	sub    esp,0x4
10005815:	68 ec ae 00 10       	push   0x1000aeec	10005816: R_386_32	.text
1000581a:	50                   	push   eax
1000581b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000581e:	e8 fc ff ff ff       	call   1000581f <begin(void*)+0x641>	1000581f: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005823:	83 c4 10             	add    esp,0x10
10005826:	83 ec 08             	sub    esp,0x8
10005829:	68 da ae 00 10       	push   0x1000aeda	1000582a: R_386_32	.text
1000582e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005831:	e8 fc ff ff ff       	call   10005832 <begin(void*)+0x654>	10005832: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005836:	83 c4 10             	add    esp,0x10
10005839:	83 ec 08             	sub    esp,0x8
1000583c:	50                   	push   eax
1000583d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005840:	e8 fc ff ff ff       	call   10005841 <begin(void*)+0x663>	10005841: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005845:	83 c4 10             	add    esp,0x10
10005848:	83 ec 04             	sub    esp,0x4
1000584b:	68 f4 ae 00 10       	push   0x1000aef4	1000584c: R_386_32	.text
10005850:	50                   	push   eax
10005851:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005854:	e8 fc ff ff ff       	call   10005855 <begin(void*)+0x677>	10005855: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005859:	83 c4 10             	add    esp,0x10
1000585c:	83 ec 08             	sub    esp,0x8
1000585f:	68 ff ae 00 10       	push   0x1000aeff	10005860: R_386_32	.text
10005864:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005867:	e8 fc ff ff ff       	call   10005868 <begin(void*)+0x68a>	10005868: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000586c:	83 c4 10             	add    esp,0x10
1000586f:	83 ec 08             	sub    esp,0x8
10005872:	50                   	push   eax
10005873:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005876:	e8 fc ff ff ff       	call   10005877 <begin(void*)+0x699>	10005877: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000587b:	83 c4 10             	add    esp,0x10
1000587e:	83 ec 04             	sub    esp,0x4
10005881:	8d 95 50 ff ff ff    	lea    edx,[ebp-0xb0]
10005887:	52                   	push   edx
10005888:	50                   	push   eax
10005889:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000588c:	e8 fc ff ff ff       	call   1000588d <begin(void*)+0x6af>	1000588d: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005891:	83 c4 10             	add    esp,0x10
10005894:	83 ec 08             	sub    esp,0x8
10005897:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
1000589d:	50                   	push   eax
1000589e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058a1:	e8 fc ff ff ff       	call   100058a2 <begin(void*)+0x6c4>	100058a2: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100058a6:	83 c4 10             	add    esp,0x10
100058a9:	83 ec 08             	sub    esp,0x8
100058ac:	50                   	push   eax
100058ad:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058b0:	e8 fc ff ff ff       	call   100058b1 <begin(void*)+0x6d3>	100058b1: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100058b5:	83 c4 10             	add    esp,0x10
100058b8:	83 ec 04             	sub    esp,0x4
100058bb:	68 0c af 00 10       	push   0x1000af0c	100058bc: R_386_32	.text
100058c0:	50                   	push   eax
100058c1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058c4:	e8 fc ff ff ff       	call   100058c5 <begin(void*)+0x6e7>	100058c5: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100058c9:	83 c4 10             	add    esp,0x10
100058cc:	83 ec 08             	sub    esp,0x8
100058cf:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100058d5:	50                   	push   eax
100058d6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058d9:	e8 fc ff ff ff       	call   100058da <begin(void*)+0x6fc>	100058da: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100058de:	83 c4 10             	add    esp,0x10
100058e1:	83 ec 08             	sub    esp,0x8
100058e4:	50                   	push   eax
100058e5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058e8:	e8 fc ff ff ff       	call   100058e9 <begin(void*)+0x70b>	100058e9: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100058ed:	83 c4 10             	add    esp,0x10
100058f0:	83 ec 04             	sub    esp,0x4
100058f3:	68 11 af 00 10       	push   0x1000af11	100058f4: R_386_32	.text
100058f8:	50                   	push   eax
100058f9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058fc:	e8 fc ff ff ff       	call   100058fd <begin(void*)+0x71f>	100058fd: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005901:	83 c4 10             	add    esp,0x10
10005904:	83 ec 08             	sub    esp,0x8
10005907:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
1000590d:	50                   	push   eax
1000590e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005911:	e8 fc ff ff ff       	call   10005912 <begin(void*)+0x734>	10005912: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005916:	83 c4 10             	add    esp,0x10
10005919:	83 ec 08             	sub    esp,0x8
1000591c:	50                   	push   eax
1000591d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005920:	e8 fc ff ff ff       	call   10005921 <begin(void*)+0x743>	10005921: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005925:	83 c4 10             	add    esp,0x10
10005928:	83 ec 04             	sub    esp,0x4
1000592b:	68 1a af 00 10       	push   0x1000af1a	1000592c: R_386_32	.text
10005930:	50                   	push   eax
10005931:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005934:	e8 fc ff ff ff       	call   10005935 <begin(void*)+0x757>	10005935: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005939:	83 c4 10             	add    esp,0x10
1000593c:	83 ec 08             	sub    esp,0x8
1000593f:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005945:	50                   	push   eax
10005946:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005949:	e8 fc ff ff ff       	call   1000594a <begin(void*)+0x76c>	1000594a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000594e:	83 c4 10             	add    esp,0x10
10005951:	83 ec 08             	sub    esp,0x8
10005954:	50                   	push   eax
10005955:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005958:	e8 fc ff ff ff       	call   10005959 <begin(void*)+0x77b>	10005959: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000595d:	83 c4 10             	add    esp,0x10
10005960:	83 ec 04             	sub    esp,0x4
10005963:	68 26 af 00 10       	push   0x1000af26	10005964: R_386_32	.text
10005968:	50                   	push   eax
10005969:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000596c:	e8 fc ff ff ff       	call   1000596d <begin(void*)+0x78f>	1000596d: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005971:	83 c4 10             	add    esp,0x10
10005974:	83 ec 08             	sub    esp,0x8
10005977:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
1000597d:	50                   	push   eax
1000597e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005981:	e8 fc ff ff ff       	call   10005982 <begin(void*)+0x7a4>	10005982: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005986:	83 c4 10             	add    esp,0x10
10005989:	83 ec 08             	sub    esp,0x8
1000598c:	50                   	push   eax
1000598d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005990:	e8 fc ff ff ff       	call   10005991 <begin(void*)+0x7b3>	10005991: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005995:	83 c4 10             	add    esp,0x10
10005998:	83 ec 04             	sub    esp,0x4
1000599b:	68 2e af 00 10       	push   0x1000af2e	1000599c: R_386_32	.text
100059a0:	50                   	push   eax
100059a1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059a4:	e8 fc ff ff ff       	call   100059a5 <begin(void*)+0x7c7>	100059a5: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100059a9:	83 c4 10             	add    esp,0x10
100059ac:	83 ec 08             	sub    esp,0x8
100059af:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100059b5:	50                   	push   eax
100059b6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059b9:	e8 fc ff ff ff       	call   100059ba <begin(void*)+0x7dc>	100059ba: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100059be:	83 c4 10             	add    esp,0x10
100059c1:	83 ec 08             	sub    esp,0x8
100059c4:	50                   	push   eax
100059c5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059c8:	e8 fc ff ff ff       	call   100059c9 <begin(void*)+0x7eb>	100059c9: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100059cd:	83 c4 10             	add    esp,0x10
100059d0:	83 ec 04             	sub    esp,0x4
100059d3:	68 38 af 00 10       	push   0x1000af38	100059d4: R_386_32	.text
100059d8:	50                   	push   eax
100059d9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059dc:	e8 fc ff ff ff       	call   100059dd <begin(void*)+0x7ff>	100059dd: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100059e1:	83 c4 10             	add    esp,0x10
100059e4:	83 ec 08             	sub    esp,0x8
100059e7:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100059ed:	50                   	push   eax
100059ee:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059f1:	e8 fc ff ff ff       	call   100059f2 <begin(void*)+0x814>	100059f2: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100059f6:	83 c4 10             	add    esp,0x10
100059f9:	83 ec 08             	sub    esp,0x8
100059fc:	50                   	push   eax
100059fd:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a00:	e8 fc ff ff ff       	call   10005a01 <begin(void*)+0x823>	10005a01: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005a05:	83 c4 10             	add    esp,0x10
10005a08:	83 ec 04             	sub    esp,0x4
10005a0b:	68 42 af 00 10       	push   0x1000af42	10005a0c: R_386_32	.text
10005a10:	50                   	push   eax
10005a11:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a14:	e8 fc ff ff ff       	call   10005a15 <begin(void*)+0x837>	10005a15: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005a19:	83 c4 10             	add    esp,0x10
10005a1c:	83 ec 08             	sub    esp,0x8
10005a1f:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005a25:	50                   	push   eax
10005a26:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a29:	e8 fc ff ff ff       	call   10005a2a <begin(void*)+0x84c>	10005a2a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a2e:	83 c4 10             	add    esp,0x10
10005a31:	83 ec 08             	sub    esp,0x8
10005a34:	50                   	push   eax
10005a35:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a38:	e8 fc ff ff ff       	call   10005a39 <begin(void*)+0x85b>	10005a39: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005a3d:	83 c4 10             	add    esp,0x10
10005a40:	83 ec 04             	sub    esp,0x4
10005a43:	68 4b af 00 10       	push   0x1000af4b	10005a44: R_386_32	.text
10005a48:	50                   	push   eax
10005a49:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a4c:	e8 fc ff ff ff       	call   10005a4d <begin(void*)+0x86f>	10005a4d: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005a51:	83 c4 10             	add    esp,0x10
10005a54:	83 ec 08             	sub    esp,0x8
10005a57:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005a5d:	50                   	push   eax
10005a5e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a61:	e8 fc ff ff ff       	call   10005a62 <begin(void*)+0x884>	10005a62: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a66:	83 c4 10             	add    esp,0x10
10005a69:	83 ec 08             	sub    esp,0x8
10005a6c:	50                   	push   eax
10005a6d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a70:	e8 fc ff ff ff       	call   10005a71 <begin(void*)+0x893>	10005a71: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005a75:	83 c4 10             	add    esp,0x10
10005a78:	83 ec 04             	sub    esp,0x4
10005a7b:	68 52 af 00 10       	push   0x1000af52	10005a7c: R_386_32	.text
10005a80:	50                   	push   eax
10005a81:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a84:	e8 fc ff ff ff       	call   10005a85 <begin(void*)+0x8a7>	10005a85: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005a89:	83 c4 10             	add    esp,0x10
10005a8c:	83 ec 08             	sub    esp,0x8
10005a8f:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005a95:	50                   	push   eax
10005a96:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a99:	e8 fc ff ff ff       	call   10005a9a <begin(void*)+0x8bc>	10005a9a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a9e:	83 c4 10             	add    esp,0x10
10005aa1:	83 ec 08             	sub    esp,0x8
10005aa4:	50                   	push   eax
10005aa5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005aa8:	e8 fc ff ff ff       	call   10005aa9 <begin(void*)+0x8cb>	10005aa9: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005aad:	83 c4 10             	add    esp,0x10
10005ab0:	83 ec 04             	sub    esp,0x4
10005ab3:	68 58 af 00 10       	push   0x1000af58	10005ab4: R_386_32	.text
10005ab8:	50                   	push   eax
10005ab9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005abc:	e8 fc ff ff ff       	call   10005abd <begin(void*)+0x8df>	10005abd: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005ac1:	83 c4 10             	add    esp,0x10
10005ac4:	a0 00 00 00 00       	mov    al,ds:0x0	10005ac5: R_386_32	createNewUserMode
10005ac9:	83 f0 01             	xor    eax,0x1
10005acc:	84 c0                	test   al,al
10005ace:	0f 84 be 03 00 00    	je     10005e92 <begin(void*)+0xcb4>
10005ad4:	a1 00 00 00 00       	mov    eax,ds:0x0	10005ad5: R_386_32	modesel
10005ad9:	89 c3                	mov    ebx,eax
10005adb:	89 c6                	mov    esi,eax
10005add:	c1 fe 1f             	sar    esi,0x1f
10005ae0:	83 ec 08             	sub    esp,0x8
10005ae3:	68 63 af 00 10       	push   0x1000af63	10005ae4: R_386_32	.text
10005ae8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005aeb:	e8 fc ff ff ff       	call   10005aec <begin(void*)+0x90e>	10005aec: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005af0:	83 c4 10             	add    esp,0x10
10005af3:	83 ec 08             	sub    esp,0x8
10005af6:	50                   	push   eax
10005af7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005afa:	e8 fc ff ff ff       	call   10005afb <begin(void*)+0x91d>	10005afb: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005aff:	83 c4 10             	add    esp,0x10
10005b02:	83 ec 08             	sub    esp,0x8
10005b05:	6a 6a                	push   0x6a
10005b07:	56                   	push   esi
10005b08:	53                   	push   ebx
10005b09:	68 6f af 00 10       	push   0x1000af6f	10005b0a: R_386_32	.text
10005b0e:	50                   	push   eax
10005b0f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b12:	e8 fc ff ff ff       	call   10005b13 <begin(void*)+0x935>	10005b13: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
10005b17:	83 c4 20             	add    esp,0x20
10005b1a:	a1 00 00 00 00       	mov    eax,ds:0x0	10005b1b: R_386_32	tzsel
10005b1f:	89 c3                	mov    ebx,eax
10005b21:	89 c6                	mov    esi,eax
10005b23:	c1 fe 1f             	sar    esi,0x1f
10005b26:	83 ec 08             	sub    esp,0x8
10005b29:	68 c5 ae 00 10       	push   0x1000aec5	10005b2a: R_386_32	.text
10005b2e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b31:	e8 fc ff ff ff       	call   10005b32 <begin(void*)+0x954>	10005b32: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b36:	83 c4 10             	add    esp,0x10
10005b39:	83 ec 08             	sub    esp,0x8
10005b3c:	50                   	push   eax
10005b3d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b40:	e8 fc ff ff ff       	call   10005b41 <begin(void*)+0x963>	10005b41: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005b45:	83 c4 10             	add    esp,0x10
10005b48:	83 ec 08             	sub    esp,0x8
10005b4b:	6a 6a                	push   0x6a
10005b4d:	56                   	push   esi
10005b4e:	53                   	push   ebx
10005b4f:	68 77 af 00 10       	push   0x1000af77	10005b50: R_386_32	.text
10005b54:	50                   	push   eax
10005b55:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b58:	e8 fc ff ff ff       	call   10005b59 <begin(void*)+0x97b>	10005b59: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
10005b5d:	83 c4 20             	add    esp,0x20
10005b60:	a1 00 00 00 00       	mov    eax,ds:0x0	10005b61: R_386_32	tzsel
10005b65:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10005b68: R_386_32	timezoneStrings
10005b6c:	8d 58 01             	lea    ebx,[eax+0x1]
10005b6f:	83 ec 08             	sub    esp,0x8
10005b72:	68 82 af 00 10       	push   0x1000af82	10005b73: R_386_32	.text
10005b77:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b7a:	e8 fc ff ff ff       	call   10005b7b <begin(void*)+0x99d>	10005b7b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b7f:	83 c4 10             	add    esp,0x10
10005b82:	83 ec 04             	sub    esp,0x4
10005b85:	53                   	push   ebx
10005b86:	50                   	push   eax
10005b87:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b8a:	e8 fc ff ff ff       	call   10005b8b <begin(void*)+0x9ad>	10005b8b: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005b8f:	83 c4 10             	add    esp,0x10
10005b92:	83 ec 08             	sub    esp,0x8
10005b95:	68 97 af 00 10       	push   0x1000af97	10005b96: R_386_32	.text
10005b9a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b9d:	e8 fc ff ff ff       	call   10005b9e <begin(void*)+0x9c0>	10005b9e: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005ba2:	83 c4 10             	add    esp,0x10
10005ba5:	83 ec 04             	sub    esp,0x4
10005ba8:	68 00 00 00 00       	push   0x0	10005ba9: R_386_32	currName
10005bad:	50                   	push   eax
10005bae:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bb1:	e8 fc ff ff ff       	call   10005bb2 <begin(void*)+0x9d4>	10005bb2: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005bb6:	83 c4 10             	add    esp,0x10
10005bb9:	83 ec 08             	sub    esp,0x8
10005bbc:	68 a9 af 00 10       	push   0x1000afa9	10005bbd: R_386_32	.text
10005bc1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bc4:	e8 fc ff ff ff       	call   10005bc5 <begin(void*)+0x9e7>	10005bc5: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005bc9:	83 c4 10             	add    esp,0x10
10005bcc:	83 ec 04             	sub    esp,0x4
10005bcf:	68 00 00 00 00       	push   0x0	10005bd0: R_386_32	currComp
10005bd4:	50                   	push   eax
10005bd5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bd8:	e8 fc ff ff ff       	call   10005bd9 <begin(void*)+0x9fb>	10005bd9: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005bdd:	83 c4 10             	add    esp,0x10
10005be0:	83 ec 08             	sub    esp,0x8
10005be3:	68 be af 00 10       	push   0x1000afbe	10005be4: R_386_32	.text
10005be8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005beb:	e8 fc ff ff ff       	call   10005bec <begin(void*)+0xa0e>	10005bec: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005bf0:	83 c4 10             	add    esp,0x10
10005bf3:	83 ec 04             	sub    esp,0x4
10005bf6:	68 00 00 00 00       	push   0x0	10005bf7: R_386_32	pkeybuf
10005bfb:	50                   	push   eax
10005bfc:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bff:	e8 fc ff ff ff       	call   10005c00 <begin(void*)+0xa22>	10005c00: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005c04:	83 c4 10             	add    esp,0x10
10005c07:	83 ec 08             	sub    esp,0x8
10005c0a:	68 d6 af 00 10       	push   0x1000afd6	10005c0b: R_386_32	.text
10005c0f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c12:	e8 fc ff ff ff       	call   10005c13 <begin(void*)+0xa35>	10005c13: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c17:	83 c4 10             	add    esp,0x10
10005c1a:	83 ec 08             	sub    esp,0x8
10005c1d:	50                   	push   eax
10005c1e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c21:	e8 fc ff ff ff       	call   10005c22 <begin(void*)+0xa44>	10005c22: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005c26:	83 c4 10             	add    esp,0x10
10005c29:	83 ec 04             	sub    esp,0x4
10005c2c:	68 ec af 00 10       	push   0x1000afec	10005c2d: R_386_32	.text
10005c31:	50                   	push   eax
10005c32:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c35:	e8 fc ff ff ff       	call   10005c36 <begin(void*)+0xa58>	10005c36: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005c3a:	83 c4 10             	add    esp,0x10
10005c3d:	83 ec 08             	sub    esp,0x8
10005c40:	68 f0 af 00 10       	push   0x1000aff0	10005c41: R_386_32	.text
10005c45:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c48:	e8 fc ff ff ff       	call   10005c49 <begin(void*)+0xa6b>	10005c49: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c4d:	83 c4 10             	add    esp,0x10
10005c50:	83 ec 08             	sub    esp,0x8
10005c53:	50                   	push   eax
10005c54:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c57:	e8 fc ff ff ff       	call   10005c58 <begin(void*)+0xa7a>	10005c58: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005c5c:	83 c4 10             	add    esp,0x10
10005c5f:	83 ec 04             	sub    esp,0x4
10005c62:	68 ec af 00 10       	push   0x1000afec	10005c63: R_386_32	.text
10005c67:	50                   	push   eax
10005c68:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c6b:	e8 fc ff ff ff       	call   10005c6c <begin(void*)+0xa8e>	10005c6c: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005c70:	83 c4 10             	add    esp,0x10
10005c73:	83 ec 08             	sub    esp,0x8
10005c76:	68 07 b0 00 10       	push   0x1000b007	10005c77: R_386_32	.text
10005c7b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c7e:	e8 fc ff ff ff       	call   10005c7f <begin(void*)+0xaa1>	10005c7f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c83:	83 c4 10             	add    esp,0x10
10005c86:	83 ec 08             	sub    esp,0x8
10005c89:	50                   	push   eax
10005c8a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c8d:	e8 fc ff ff ff       	call   10005c8e <begin(void*)+0xab0>	10005c8e: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005c92:	83 c4 10             	add    esp,0x10
10005c95:	83 ec 04             	sub    esp,0x4
10005c98:	68 ec af 00 10       	push   0x1000afec	10005c99: R_386_32	.text
10005c9d:	50                   	push   eax
10005c9e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ca1:	e8 fc ff ff ff       	call   10005ca2 <begin(void*)+0xac4>	10005ca2: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005ca6:	83 c4 10             	add    esp,0x10
10005ca9:	83 ec 08             	sub    esp,0x8
10005cac:	68 1d b0 00 10       	push   0x1000b01d	10005cad: R_386_32	.text
10005cb1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cb4:	e8 fc ff ff ff       	call   10005cb5 <begin(void*)+0xad7>	10005cb5: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005cb9:	83 c4 10             	add    esp,0x10
10005cbc:	83 ec 08             	sub    esp,0x8
10005cbf:	50                   	push   eax
10005cc0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cc3:	e8 fc ff ff ff       	call   10005cc4 <begin(void*)+0xae6>	10005cc4: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005cc8:	83 c4 10             	add    esp,0x10
10005ccb:	83 ec 04             	sub    esp,0x4
10005cce:	68 ec af 00 10       	push   0x1000afec	10005ccf: R_386_32	.text
10005cd3:	50                   	push   eax
10005cd4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cd7:	e8 fc ff ff ff       	call   10005cd8 <begin(void*)+0xafa>	10005cd8: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005cdc:	83 c4 10             	add    esp,0x10
10005cdf:	83 ec 08             	sub    esp,0x8
10005ce2:	68 33 b0 00 10       	push   0x1000b033	10005ce3: R_386_32	.text
10005ce7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cea:	e8 fc ff ff ff       	call   10005ceb <begin(void*)+0xb0d>	10005ceb: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005cef:	83 c4 10             	add    esp,0x10
10005cf2:	83 ec 08             	sub    esp,0x8
10005cf5:	50                   	push   eax
10005cf6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cf9:	e8 fc ff ff ff       	call   10005cfa <begin(void*)+0xb1c>	10005cfa: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005cfe:	83 c4 10             	add    esp,0x10
10005d01:	83 ec 04             	sub    esp,0x4
10005d04:	68 ec af 00 10       	push   0x1000afec	10005d05: R_386_32	.text
10005d09:	50                   	push   eax
10005d0a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d0d:	e8 fc ff ff ff       	call   10005d0e <begin(void*)+0xb30>	10005d0e: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005d12:	83 c4 10             	add    esp,0x10
10005d15:	83 ec 08             	sub    esp,0x8
10005d18:	68 4a b0 00 10       	push   0x1000b04a	10005d19: R_386_32	.text
10005d1d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d20:	e8 fc ff ff ff       	call   10005d21 <begin(void*)+0xb43>	10005d21: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005d25:	83 c4 10             	add    esp,0x10
10005d28:	83 ec 04             	sub    esp,0x4
10005d2b:	68 64 b0 00 10       	push   0x1000b064	10005d2c: R_386_32	.text
10005d30:	50                   	push   eax
10005d31:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d34:	e8 fc ff ff ff       	call   10005d35 <begin(void*)+0xb57>	10005d35: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005d39:	83 c4 10             	add    esp,0x10
10005d3c:	83 ec 08             	sub    esp,0x8
10005d3f:	68 84 b0 00 10       	push   0x1000b084	10005d40: R_386_32	.text
10005d44:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d47:	e8 fc ff ff ff       	call   10005d48 <begin(void*)+0xb6a>	10005d48: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005d4c:	83 c4 10             	add    esp,0x10
10005d4f:	83 ec 04             	sub    esp,0x4
10005d52:	68 9f b0 00 10       	push   0x1000b09f	10005d53: R_386_32	.text
10005d57:	50                   	push   eax
10005d58:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d5b:	e8 fc ff ff ff       	call   10005d5c <begin(void*)+0xb7e>	10005d5c: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005d60:	83 c4 10             	add    esp,0x10
10005d63:	83 ec 08             	sub    esp,0x8
10005d66:	68 ad b0 00 10       	push   0x1000b0ad	10005d67: R_386_32	.text
10005d6b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d6e:	e8 fc ff ff ff       	call   10005d6f <begin(void*)+0xb91>	10005d6f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005d73:	83 c4 10             	add    esp,0x10
10005d76:	83 ec 04             	sub    esp,0x4
10005d79:	68 c7 b0 00 10       	push   0x1000b0c7	10005d7a: R_386_32	.text
10005d7e:	50                   	push   eax
10005d7f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d82:	e8 fc ff ff ff       	call   10005d83 <begin(void*)+0xba5>	10005d83: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005d87:	83 c4 10             	add    esp,0x10
10005d8a:	83 ec 08             	sub    esp,0x8
10005d8d:	68 df b0 00 10       	push   0x1000b0df	10005d8e: R_386_32	.text
10005d92:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d95:	e8 fc ff ff ff       	call   10005d96 <begin(void*)+0xbb8>	10005d96: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005d9a:	83 c4 10             	add    esp,0x10
10005d9d:	83 ec 04             	sub    esp,0x4
10005da0:	68 c7 b0 00 10       	push   0x1000b0c7	10005da1: R_386_32	.text
10005da5:	50                   	push   eax
10005da6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005da9:	e8 fc ff ff ff       	call   10005daa <begin(void*)+0xbcc>	10005daa: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005dae:	83 c4 10             	add    esp,0x10
10005db1:	83 ec 08             	sub    esp,0x8
10005db4:	68 f9 b0 00 10       	push   0x1000b0f9	10005db5: R_386_32	.text
10005db9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005dbc:	e8 fc ff ff ff       	call   10005dbd <begin(void*)+0xbdf>	10005dbd: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005dc1:	83 c4 10             	add    esp,0x10
10005dc4:	83 ec 04             	sub    esp,0x4
10005dc7:	68 c7 b0 00 10       	push   0x1000b0c7	10005dc8: R_386_32	.text
10005dcc:	50                   	push   eax
10005dcd:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005dd0:	e8 fc ff ff ff       	call   10005dd1 <begin(void*)+0xbf3>	10005dd1: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005dd5:	83 c4 10             	add    esp,0x10
10005dd8:	83 ec 08             	sub    esp,0x8
10005ddb:	68 d6 af 00 10       	push   0x1000afd6	10005ddc: R_386_32	.text
10005de0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005de3:	e8 fc ff ff ff       	call   10005de4 <begin(void*)+0xc06>	10005de4: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005de8:	83 c4 10             	add    esp,0x10
10005deb:	83 ec 08             	sub    esp,0x8
10005dee:	50                   	push   eax
10005def:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005df2:	e8 fc ff ff ff       	call   10005df3 <begin(void*)+0xc15>	10005df3: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005df7:	83 c4 10             	add    esp,0x10
10005dfa:	83 ec 04             	sub    esp,0x4
10005dfd:	68 14 b1 00 10       	push   0x1000b114	10005dfe: R_386_32	.text
10005e02:	50                   	push   eax
10005e03:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005e06:	e8 fc ff ff ff       	call   10005e07 <begin(void*)+0xc29>	10005e07: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005e0b:	83 c4 10             	add    esp,0x10
10005e0e:	83 ec 08             	sub    esp,0x8
10005e11:	68 f0 af 00 10       	push   0x1000aff0	10005e12: R_386_32	.text
10005e16:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005e19:	e8 fc ff ff ff       	call   10005e1a <begin(void*)+0xc3c>	10005e1a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005e1e:	83 c4 10             	add    esp,0x10
10005e21:	83 ec 08             	sub    esp,0x8
10005e24:	50                   	push   eax
10005e25:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005e28:	e8 fc ff ff ff       	call   10005e29 <begin(void*)+0xc4b>	10005e29: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005e2d:	83 c4 10             	add    esp,0x10
10005e30:	83 ec 04             	sub    esp,0x4
10005e33:	68 14 b1 00 10       	push   0x1000b114	10005e34: R_386_32	.text
10005e38:	50                   	push   eax
10005e39:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005e3c:	e8 fc ff ff ff       	call   10005e3d <begin(void*)+0xc5f>	10005e3d: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005e41:	83 c4 10             	add    esp,0x10
10005e44:	83 ec 08             	sub    esp,0x8
10005e47:	68 18 b1 00 10       	push   0x1000b118	10005e48: R_386_32	.text
10005e4c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005e4f:	e8 fc ff ff ff       	call   10005e50 <begin(void*)+0xc72>	10005e50: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005e54:	83 c4 10             	add    esp,0x10
10005e57:	83 ec 04             	sub    esp,0x4
10005e5a:	68 32 b1 00 10       	push   0x1000b132	10005e5b: R_386_32	.text
10005e5f:	50                   	push   eax
10005e60:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005e63:	e8 fc ff ff ff       	call   10005e64 <begin(void*)+0xc86>	10005e64: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005e68:	83 c4 10             	add    esp,0x10
10005e6b:	83 ec 08             	sub    esp,0x8
10005e6e:	68 50 b1 00 10       	push   0x1000b150	10005e6f: R_386_32	.text
10005e73:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005e76:	e8 fc ff ff ff       	call   10005e77 <begin(void*)+0xc99>	10005e77: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005e7b:	83 c4 10             	add    esp,0x10
10005e7e:	83 ec 04             	sub    esp,0x4
10005e81:	68 6b b1 00 10       	push   0x1000b16b	10005e82: R_386_32	.text
10005e86:	50                   	push   eax
10005e87:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005e8a:	e8 fc ff ff ff       	call   10005e8b <begin(void*)+0xcad>	10005e8b: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005e8f:	83 c4 10             	add    esp,0x10
10005e92:	83 ec 08             	sub    esp,0x8
10005e95:	68 42 ae 00 10       	push   0x1000ae42	10005e96: R_386_32	.text
10005e9a:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005ea0:	50                   	push   eax
10005ea1:	e8 fc ff ff ff       	call   10005ea2 <begin(void*)+0xcc4>	10005ea2: R_386_PC32	strcpy
10005ea6:	83 c4 10             	add    esp,0x10
10005ea9:	83 ec 08             	sub    esp,0x8
10005eac:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10005eb2:	50                   	push   eax
10005eb3:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005eb9:	50                   	push   eax
10005eba:	e8 fc ff ff ff       	call   10005ebb <begin(void*)+0xcdd>	10005ebb: R_386_PC32	strcat
10005ebf:	83 c4 10             	add    esp,0x10
10005ec2:	83 ec 08             	sub    esp,0x8
10005ec5:	68 7b b1 00 10       	push   0x1000b17b	10005ec6: R_386_32	.text
10005eca:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005ed0:	50                   	push   eax
10005ed1:	e8 fc ff ff ff       	call   10005ed2 <begin(void*)+0xcf4>	10005ed2: R_386_PC32	strcat
10005ed6:	83 c4 10             	add    esp,0x10
10005ed9:	83 ec 08             	sub    esp,0x8
10005edc:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005ee2:	50                   	push   eax
10005ee3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ee6:	e8 fc ff ff ff       	call   10005ee7 <begin(void*)+0xd09>	10005ee7: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005eeb:	83 c4 10             	add    esp,0x10
10005eee:	83 ec 04             	sub    esp,0x4
10005ef1:	68 00 00 00 00       	push   0x0	10005ef2: R_386_32	passwhash
10005ef6:	50                   	push   eax
10005ef7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005efa:	e8 fc ff ff ff       	call   10005efb <begin(void*)+0xd1d>	10005efb: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005eff:	83 c4 10             	add    esp,0x10
10005f02:	83 ec 08             	sub    esp,0x8
10005f05:	68 42 ae 00 10       	push   0x1000ae42	10005f06: R_386_32	.text
10005f0a:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005f10:	50                   	push   eax
10005f11:	e8 fc ff ff ff       	call   10005f12 <begin(void*)+0xd34>	10005f12: R_386_PC32	strcpy
10005f16:	83 c4 10             	add    esp,0x10
10005f19:	83 ec 08             	sub    esp,0x8
10005f1c:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10005f22:	50                   	push   eax
10005f23:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005f29:	50                   	push   eax
10005f2a:	e8 fc ff ff ff       	call   10005f2b <begin(void*)+0xd4d>	10005f2b: R_386_PC32	strcat
10005f2f:	83 c4 10             	add    esp,0x10
10005f32:	83 ec 08             	sub    esp,0x8
10005f35:	68 85 b1 00 10       	push   0x1000b185	10005f36: R_386_32	.text
10005f3a:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005f40:	50                   	push   eax
10005f41:	e8 fc ff ff ff       	call   10005f42 <begin(void*)+0xd64>	10005f42: R_386_PC32	strcat
10005f46:	83 c4 10             	add    esp,0x10
10005f49:	83 ec 08             	sub    esp,0x8
10005f4c:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005f52:	50                   	push   eax
10005f53:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005f56:	e8 fc ff ff ff       	call   10005f57 <begin(void*)+0xd79>	10005f57: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005f5b:	83 c4 10             	add    esp,0x10
10005f5e:	83 ec 04             	sub    esp,0x4
10005f61:	68 00 00 00 00       	push   0x0	10005f62: R_386_32	passwsalt
10005f66:	50                   	push   eax
10005f67:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005f6a:	e8 fc ff ff ff       	call   10005f6b <begin(void*)+0xd8d>	10005f6b: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005f6f:	83 c4 10             	add    esp,0x10
10005f72:	83 ec 08             	sub    esp,0x8
10005f75:	68 42 ae 00 10       	push   0x1000ae42	10005f76: R_386_32	.text
10005f7a:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005f80:	50                   	push   eax
10005f81:	e8 fc ff ff ff       	call   10005f82 <begin(void*)+0xda4>	10005f82: R_386_PC32	strcpy
10005f86:	83 c4 10             	add    esp,0x10
10005f89:	83 ec 08             	sub    esp,0x8
10005f8c:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10005f92:	50                   	push   eax
10005f93:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005f99:	50                   	push   eax
10005f9a:	e8 fc ff ff ff       	call   10005f9b <begin(void*)+0xdbd>	10005f9b: R_386_PC32	strcat
10005f9f:	83 c4 10             	add    esp,0x10
10005fa2:	83 ec 08             	sub    esp,0x8
10005fa5:	68 8b b1 00 10       	push   0x1000b18b	10005fa6: R_386_32	.text
10005faa:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005fb0:	50                   	push   eax
10005fb1:	e8 fc ff ff ff       	call   10005fb2 <begin(void*)+0xdd4>	10005fb2: R_386_PC32	strcat
10005fb6:	83 c4 10             	add    esp,0x10
10005fb9:	83 ec 08             	sub    esp,0x8
10005fbc:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10005fc2:	50                   	push   eax
10005fc3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005fc6:	e8 fc ff ff ff       	call   10005fc7 <begin(void*)+0xde9>	10005fc7: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005fcb:	83 c4 10             	add    esp,0x10
10005fce:	83 ec 04             	sub    esp,0x4
10005fd1:	68 00 00 00 00       	push   0x0	10005fd2: R_386_32	currName
10005fd6:	50                   	push   eax
10005fd7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005fda:	e8 fc ff ff ff       	call   10005fdb <begin(void*)+0xdfd>	10005fdb: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005fdf:	83 c4 10             	add    esp,0x10
10005fe2:	83 ec 08             	sub    esp,0x8
10005fe5:	68 3a a6 00 10       	push   0x1000a63a	10005fe6: R_386_32	.text
10005fea:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10005ff0:	50                   	push   eax
10005ff1:	e8 fc ff ff ff       	call   10005ff2 <begin(void*)+0xe14>	10005ff2: R_386_PC32	strcpy
10005ff6:	83 c4 10             	add    esp,0x10
10005ff9:	83 ec 08             	sub    esp,0x8
10005ffc:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10006002:	50                   	push   eax
10006003:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006009:	50                   	push   eax
1000600a:	e8 fc ff ff ff       	call   1000600b <begin(void*)+0xe2d>	1000600b: R_386_PC32	strcat
1000600f:	83 c4 10             	add    esp,0x10
10006012:	83 ec 08             	sub    esp,0x8
10006015:	68 44 a6 00 10       	push   0x1000a644	10006016: R_386_32	.text
1000601a:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006020:	50                   	push   eax
10006021:	e8 fc ff ff ff       	call   10006022 <begin(void*)+0xe44>	10006022: R_386_PC32	strcat
10006026:	83 c4 10             	add    esp,0x10
10006029:	83 ec 08             	sub    esp,0x8
1000602c:	68 42 ae 00 10       	push   0x1000ae42	1000602d: R_386_32	.text
10006031:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006037:	50                   	push   eax
10006038:	e8 fc ff ff ff       	call   10006039 <begin(void*)+0xe5b>	10006039: R_386_PC32	strcpy
1000603d:	83 c4 10             	add    esp,0x10
10006040:	83 ec 08             	sub    esp,0x8
10006043:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10006049:	50                   	push   eax
1000604a:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006050:	50                   	push   eax
10006051:	e8 fc ff ff ff       	call   10006052 <begin(void*)+0xe74>	10006052: R_386_PC32	strcat
10006056:	83 c4 10             	add    esp,0x10
10006059:	83 ec 08             	sub    esp,0x8
1000605c:	68 98 b1 00 10       	push   0x1000b198	1000605d: R_386_32	.text
10006061:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006067:	50                   	push   eax
10006068:	e8 fc ff ff ff       	call   10006069 <begin(void*)+0xe8b>	10006069: R_386_PC32	strcat
1000606d:	83 c4 10             	add    esp,0x10
10006070:	83 ec 08             	sub    esp,0x8
10006073:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006079:	50                   	push   eax
1000607a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000607d:	e8 fc ff ff ff       	call   1000607e <begin(void*)+0xea0>	1000607e: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006082:	83 c4 10             	add    esp,0x10
10006085:	83 ec 04             	sub    esp,0x4
10006088:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
1000608e:	52                   	push   edx
1000608f:	50                   	push   eax
10006090:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006093:	e8 fc ff ff ff       	call   10006094 <begin(void*)+0xeb6>	10006094: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006098:	83 c4 10             	add    esp,0x10
1000609b:	83 ec 08             	sub    esp,0x8
1000609e:	68 3a a6 00 10       	push   0x1000a63a	1000609f: R_386_32	.text
100060a3:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100060a9:	50                   	push   eax
100060aa:	e8 fc ff ff ff       	call   100060ab <begin(void*)+0xecd>	100060ab: R_386_PC32	strcpy
100060af:	83 c4 10             	add    esp,0x10
100060b2:	83 ec 08             	sub    esp,0x8
100060b5:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
100060bb:	50                   	push   eax
100060bc:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100060c2:	50                   	push   eax
100060c3:	e8 fc ff ff ff       	call   100060c4 <begin(void*)+0xee6>	100060c4: R_386_PC32	strcat
100060c8:	83 c4 10             	add    esp,0x10
100060cb:	83 ec 08             	sub    esp,0x8
100060ce:	68 4d a6 00 10       	push   0x1000a64d	100060cf: R_386_32	.text
100060d3:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100060d9:	50                   	push   eax
100060da:	e8 fc ff ff ff       	call   100060db <begin(void*)+0xefd>	100060db: R_386_PC32	strcat
100060df:	83 c4 10             	add    esp,0x10
100060e2:	83 ec 08             	sub    esp,0x8
100060e5:	68 42 ae 00 10       	push   0x1000ae42	100060e6: R_386_32	.text
100060ea:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100060f0:	50                   	push   eax
100060f1:	e8 fc ff ff ff       	call   100060f2 <begin(void*)+0xf14>	100060f2: R_386_PC32	strcpy
100060f6:	83 c4 10             	add    esp,0x10
100060f9:	83 ec 08             	sub    esp,0x8
100060fc:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10006102:	50                   	push   eax
10006103:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006109:	50                   	push   eax
1000610a:	e8 fc ff ff ff       	call   1000610b <begin(void*)+0xf2d>	1000610b: R_386_PC32	strcat
1000610f:	83 c4 10             	add    esp,0x10
10006112:	83 ec 08             	sub    esp,0x8
10006115:	68 a1 b1 00 10       	push   0x1000b1a1	10006116: R_386_32	.text
1000611a:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006120:	50                   	push   eax
10006121:	e8 fc ff ff ff       	call   10006122 <begin(void*)+0xf44>	10006122: R_386_PC32	strcat
10006126:	83 c4 10             	add    esp,0x10
10006129:	83 ec 08             	sub    esp,0x8
1000612c:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006132:	50                   	push   eax
10006133:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006136:	e8 fc ff ff ff       	call   10006137 <begin(void*)+0xf59>	10006137: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000613b:	83 c4 10             	add    esp,0x10
1000613e:	83 ec 04             	sub    esp,0x4
10006141:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
10006147:	52                   	push   edx
10006148:	50                   	push   eax
10006149:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000614c:	e8 fc ff ff ff       	call   1000614d <begin(void*)+0xf6f>	1000614d: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006151:	83 c4 10             	add    esp,0x10
10006154:	83 ec 08             	sub    esp,0x8
10006157:	68 3a a6 00 10       	push   0x1000a63a	10006158: R_386_32	.text
1000615c:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006162:	50                   	push   eax
10006163:	e8 fc ff ff ff       	call   10006164 <begin(void*)+0xf86>	10006164: R_386_PC32	strcpy
10006168:	83 c4 10             	add    esp,0x10
1000616b:	83 ec 08             	sub    esp,0x8
1000616e:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10006174:	50                   	push   eax
10006175:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000617b:	50                   	push   eax
1000617c:	e8 fc ff ff ff       	call   1000617d <begin(void*)+0xf9f>	1000617d: R_386_PC32	strcat
10006181:	83 c4 10             	add    esp,0x10
10006184:	83 ec 08             	sub    esp,0x8
10006187:	68 58 a6 00 10       	push   0x1000a658	10006188: R_386_32	.text
1000618c:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006192:	50                   	push   eax
10006193:	e8 fc ff ff ff       	call   10006194 <begin(void*)+0xfb6>	10006194: R_386_PC32	strcat
10006198:	83 c4 10             	add    esp,0x10
1000619b:	83 ec 08             	sub    esp,0x8
1000619e:	68 42 ae 00 10       	push   0x1000ae42	1000619f: R_386_32	.text
100061a3:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100061a9:	50                   	push   eax
100061aa:	e8 fc ff ff ff       	call   100061ab <begin(void*)+0xfcd>	100061ab: R_386_PC32	strcpy
100061af:	83 c4 10             	add    esp,0x10
100061b2:	83 ec 08             	sub    esp,0x8
100061b5:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
100061bb:	50                   	push   eax
100061bc:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100061c2:	50                   	push   eax
100061c3:	e8 fc ff ff ff       	call   100061c4 <begin(void*)+0xfe6>	100061c4: R_386_PC32	strcat
100061c8:	83 c4 10             	add    esp,0x10
100061cb:	83 ec 08             	sub    esp,0x8
100061ce:	68 ac b1 00 10       	push   0x1000b1ac	100061cf: R_386_32	.text
100061d3:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100061d9:	50                   	push   eax
100061da:	e8 fc ff ff ff       	call   100061db <begin(void*)+0xffd>	100061db: R_386_PC32	strcat
100061df:	83 c4 10             	add    esp,0x10
100061e2:	83 ec 08             	sub    esp,0x8
100061e5:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100061eb:	50                   	push   eax
100061ec:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100061ef:	e8 fc ff ff ff       	call   100061f0 <begin(void*)+0x1012>	100061f0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100061f4:	83 c4 10             	add    esp,0x10
100061f7:	83 ec 04             	sub    esp,0x4
100061fa:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
10006200:	52                   	push   edx
10006201:	50                   	push   eax
10006202:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006205:	e8 fc ff ff ff       	call   10006206 <begin(void*)+0x1028>	10006206: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000620a:	83 c4 10             	add    esp,0x10
1000620d:	83 ec 08             	sub    esp,0x8
10006210:	68 3a a6 00 10       	push   0x1000a63a	10006211: R_386_32	.text
10006215:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000621b:	50                   	push   eax
1000621c:	e8 fc ff ff ff       	call   1000621d <begin(void*)+0x103f>	1000621d: R_386_PC32	strcpy
10006221:	83 c4 10             	add    esp,0x10
10006224:	83 ec 08             	sub    esp,0x8
10006227:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
1000622d:	50                   	push   eax
1000622e:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006234:	50                   	push   eax
10006235:	e8 fc ff ff ff       	call   10006236 <begin(void*)+0x1058>	10006236: R_386_PC32	strcat
1000623a:	83 c4 10             	add    esp,0x10
1000623d:	83 ec 08             	sub    esp,0x8
10006240:	68 63 a6 00 10       	push   0x1000a663	10006241: R_386_32	.text
10006245:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000624b:	50                   	push   eax
1000624c:	e8 fc ff ff ff       	call   1000624d <begin(void*)+0x106f>	1000624d: R_386_PC32	strcat
10006251:	83 c4 10             	add    esp,0x10
10006254:	83 ec 08             	sub    esp,0x8
10006257:	68 42 ae 00 10       	push   0x1000ae42	10006258: R_386_32	.text
1000625c:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006262:	50                   	push   eax
10006263:	e8 fc ff ff ff       	call   10006264 <begin(void*)+0x1086>	10006264: R_386_PC32	strcpy
10006268:	83 c4 10             	add    esp,0x10
1000626b:	83 ec 08             	sub    esp,0x8
1000626e:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10006274:	50                   	push   eax
10006275:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
1000627b:	50                   	push   eax
1000627c:	e8 fc ff ff ff       	call   1000627d <begin(void*)+0x109f>	1000627d: R_386_PC32	strcat
10006281:	83 c4 10             	add    esp,0x10
10006284:	83 ec 08             	sub    esp,0x8
10006287:	68 b7 b1 00 10       	push   0x1000b1b7	10006288: R_386_32	.text
1000628c:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006292:	50                   	push   eax
10006293:	e8 fc ff ff ff       	call   10006294 <begin(void*)+0x10b6>	10006294: R_386_PC32	strcat
10006298:	83 c4 10             	add    esp,0x10
1000629b:	83 ec 08             	sub    esp,0x8
1000629e:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100062a4:	50                   	push   eax
100062a5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100062a8:	e8 fc ff ff ff       	call   100062a9 <begin(void*)+0x10cb>	100062a9: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100062ad:	83 c4 10             	add    esp,0x10
100062b0:	83 ec 04             	sub    esp,0x4
100062b3:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
100062b9:	52                   	push   edx
100062ba:	50                   	push   eax
100062bb:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100062be:	e8 fc ff ff ff       	call   100062bf <begin(void*)+0x10e1>	100062bf: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100062c3:	83 c4 10             	add    esp,0x10
100062c6:	83 ec 08             	sub    esp,0x8
100062c9:	68 3a a6 00 10       	push   0x1000a63a	100062ca: R_386_32	.text
100062ce:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100062d4:	50                   	push   eax
100062d5:	e8 fc ff ff ff       	call   100062d6 <begin(void*)+0x10f8>	100062d6: R_386_PC32	strcpy
100062da:	83 c4 10             	add    esp,0x10
100062dd:	83 ec 08             	sub    esp,0x8
100062e0:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
100062e6:	50                   	push   eax
100062e7:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100062ed:	50                   	push   eax
100062ee:	e8 fc ff ff ff       	call   100062ef <begin(void*)+0x1111>	100062ef: R_386_PC32	strcat
100062f3:	83 c4 10             	add    esp,0x10
100062f6:	83 ec 08             	sub    esp,0x8
100062f9:	68 7f a6 00 10       	push   0x1000a67f	100062fa: R_386_32	.text
100062fe:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006304:	50                   	push   eax
10006305:	e8 fc ff ff ff       	call   10006306 <begin(void*)+0x1128>	10006306: R_386_PC32	strcat
1000630a:	83 c4 10             	add    esp,0x10
1000630d:	83 ec 08             	sub    esp,0x8
10006310:	68 42 ae 00 10       	push   0x1000ae42	10006311: R_386_32	.text
10006315:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
1000631b:	50                   	push   eax
1000631c:	e8 fc ff ff ff       	call   1000631d <begin(void*)+0x113f>	1000631d: R_386_PC32	strcpy
10006321:	83 c4 10             	add    esp,0x10
10006324:	83 ec 08             	sub    esp,0x8
10006327:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
1000632d:	50                   	push   eax
1000632e:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006334:	50                   	push   eax
10006335:	e8 fc ff ff ff       	call   10006336 <begin(void*)+0x1158>	10006336: R_386_PC32	strcat
1000633a:	83 c4 10             	add    esp,0x10
1000633d:	83 ec 08             	sub    esp,0x8
10006340:	68 c1 b1 00 10       	push   0x1000b1c1	10006341: R_386_32	.text
10006345:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
1000634b:	50                   	push   eax
1000634c:	e8 fc ff ff ff       	call   1000634d <begin(void*)+0x116f>	1000634d: R_386_PC32	strcat
10006351:	83 c4 10             	add    esp,0x10
10006354:	83 ec 08             	sub    esp,0x8
10006357:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
1000635d:	50                   	push   eax
1000635e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006361:	e8 fc ff ff ff       	call   10006362 <begin(void*)+0x1184>	10006362: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006366:	83 c4 10             	add    esp,0x10
10006369:	83 ec 04             	sub    esp,0x4
1000636c:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
10006372:	52                   	push   edx
10006373:	50                   	push   eax
10006374:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006377:	e8 fc ff ff ff       	call   10006378 <begin(void*)+0x119a>	10006378: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000637c:	83 c4 10             	add    esp,0x10
1000637f:	83 ec 08             	sub    esp,0x8
10006382:	68 3a a6 00 10       	push   0x1000a63a	10006383: R_386_32	.text
10006387:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000638d:	50                   	push   eax
1000638e:	e8 fc ff ff ff       	call   1000638f <begin(void*)+0x11b1>	1000638f: R_386_PC32	strcpy
10006393:	83 c4 10             	add    esp,0x10
10006396:	83 ec 08             	sub    esp,0x8
10006399:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
1000639f:	50                   	push   eax
100063a0:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100063a6:	50                   	push   eax
100063a7:	e8 fc ff ff ff       	call   100063a8 <begin(void*)+0x11ca>	100063a8: R_386_PC32	strcat
100063ac:	83 c4 10             	add    esp,0x10
100063af:	83 ec 08             	sub    esp,0x8
100063b2:	68 78 a6 00 10       	push   0x1000a678	100063b3: R_386_32	.text
100063b7:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100063bd:	50                   	push   eax
100063be:	e8 fc ff ff ff       	call   100063bf <begin(void*)+0x11e1>	100063bf: R_386_PC32	strcat
100063c3:	83 c4 10             	add    esp,0x10
100063c6:	83 ec 08             	sub    esp,0x8
100063c9:	68 42 ae 00 10       	push   0x1000ae42	100063ca: R_386_32	.text
100063ce:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100063d4:	50                   	push   eax
100063d5:	e8 fc ff ff ff       	call   100063d6 <begin(void*)+0x11f8>	100063d6: R_386_PC32	strcpy
100063da:	83 c4 10             	add    esp,0x10
100063dd:	83 ec 08             	sub    esp,0x8
100063e0:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
100063e6:	50                   	push   eax
100063e7:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100063ed:	50                   	push   eax
100063ee:	e8 fc ff ff ff       	call   100063ef <begin(void*)+0x1211>	100063ef: R_386_PC32	strcat
100063f3:	83 c4 10             	add    esp,0x10
100063f6:	83 ec 08             	sub    esp,0x8
100063f9:	68 c9 b1 00 10       	push   0x1000b1c9	100063fa: R_386_32	.text
100063fe:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006404:	50                   	push   eax
10006405:	e8 fc ff ff ff       	call   10006406 <begin(void*)+0x1228>	10006406: R_386_PC32	strcat
1000640a:	83 c4 10             	add    esp,0x10
1000640d:	83 ec 08             	sub    esp,0x8
10006410:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
10006416:	50                   	push   eax
10006417:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000641a:	e8 fc ff ff ff       	call   1000641b <begin(void*)+0x123d>	1000641b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000641f:	83 c4 10             	add    esp,0x10
10006422:	83 ec 04             	sub    esp,0x4
10006425:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
1000642b:	52                   	push   edx
1000642c:	50                   	push   eax
1000642d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006430:	e8 fc ff ff ff       	call   10006431 <begin(void*)+0x1253>	10006431: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006435:	83 c4 10             	add    esp,0x10
10006438:	83 ec 08             	sub    esp,0x8
1000643b:	68 3a a6 00 10       	push   0x1000a63a	1000643c: R_386_32	.text
10006440:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006446:	50                   	push   eax
10006447:	e8 fc ff ff ff       	call   10006448 <begin(void*)+0x126a>	10006448: R_386_PC32	strcpy
1000644c:	83 c4 10             	add    esp,0x10
1000644f:	83 ec 08             	sub    esp,0x8
10006452:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10006458:	50                   	push   eax
10006459:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000645f:	50                   	push   eax
10006460:	e8 fc ff ff ff       	call   10006461 <begin(void*)+0x1283>	10006461: R_386_PC32	strcat
10006465:	83 c4 10             	add    esp,0x10
10006468:	83 ec 08             	sub    esp,0x8
1000646b:	68 6d a6 00 10       	push   0x1000a66d	1000646c: R_386_32	.text
10006470:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006476:	50                   	push   eax
10006477:	e8 fc ff ff ff       	call   10006478 <begin(void*)+0x129a>	10006478: R_386_PC32	strcat
1000647c:	83 c4 10             	add    esp,0x10
1000647f:	83 ec 08             	sub    esp,0x8
10006482:	68 42 ae 00 10       	push   0x1000ae42	10006483: R_386_32	.text
10006487:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
1000648d:	50                   	push   eax
1000648e:	e8 fc ff ff ff       	call   1000648f <begin(void*)+0x12b1>	1000648f: R_386_PC32	strcpy
10006493:	83 c4 10             	add    esp,0x10
10006496:	83 ec 08             	sub    esp,0x8
10006499:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
1000649f:	50                   	push   eax
100064a0:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100064a6:	50                   	push   eax
100064a7:	e8 fc ff ff ff       	call   100064a8 <begin(void*)+0x12ca>	100064a8: R_386_PC32	strcat
100064ac:	83 c4 10             	add    esp,0x10
100064af:	83 ec 08             	sub    esp,0x8
100064b2:	68 d0 b1 00 10       	push   0x1000b1d0	100064b3: R_386_32	.text
100064b7:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100064bd:	50                   	push   eax
100064be:	e8 fc ff ff ff       	call   100064bf <begin(void*)+0x12e1>	100064bf: R_386_PC32	strcat
100064c3:	83 c4 10             	add    esp,0x10
100064c6:	83 ec 08             	sub    esp,0x8
100064c9:	8d 85 d0 fe ff ff    	lea    eax,[ebp-0x130]
100064cf:	50                   	push   eax
100064d0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100064d3:	e8 fc ff ff ff       	call   100064d4 <begin(void*)+0x12f6>	100064d4: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100064d8:	83 c4 10             	add    esp,0x10
100064db:	83 ec 04             	sub    esp,0x4
100064de:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
100064e4:	52                   	push   edx
100064e5:	50                   	push   eax
100064e6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100064e9:	e8 fc ff ff ff       	call   100064ea <begin(void*)+0x130c>	100064ea: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100064ee:	83 c4 10             	add    esp,0x10
100064f1:	83 ec 0c             	sub    esp,0xc
100064f4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100064f7:	e8 fc ff ff ff       	call   100064f8 <begin(void*)+0x131a>	100064f8: R_386_PC32	CmClose(Reghive_Tag*)
100064fc:	83 c4 10             	add    esp,0x10
100064ff:	a0 00 00 00 00       	mov    al,ds:0x0	10006500: R_386_32	createNewUserMode
10006504:	84 c0                	test   al,al
10006506:	0f 85 ea 07 00 00    	jne    10006cf6 <begin(void*)+0x1b18>
1000650c:	83 ec 0c             	sub    esp,0xc
1000650f:	68 dc b1 00 10       	push   0x1000b1dc	10006510: R_386_32	.text
10006514:	e8 fc ff ff ff       	call   10006515 <begin(void*)+0x1337>	10006515: R_386_PC32	Dbg::kprintf(char const*, ...)
10006519:	83 c4 10             	add    esp,0x10
1000651c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000651d: R_386_32	term
10006521:	83 ec 0c             	sub    esp,0xc
10006524:	50                   	push   eax
10006525:	e8 fc ff ff ff       	call   10006526 <begin(void*)+0x1348>	10006526: R_386_PC32	setActiveTerminal(VgaText*)
1000652a:	83 c4 10             	add    esp,0x10
1000652d:	e8 fc ff ff ff       	call   1000652e <begin(void*)+0x1350>	1000652e: R_386_PC32	drawBootScreen()
10006532:	83 ec 0c             	sub    esp,0xc
10006535:	68 75 ac 00 10       	push   0x1000ac75	10006536: R_386_32	.text
1000653a:	6a 0d                	push   0xd
1000653c:	6a 32                	push   0x32
1000653e:	6a 05                	push   0x5
10006540:	6a 16                	push   0x16
10006542:	e8 fc ff ff ff       	call   10006543 <begin(void*)+0x1365>	10006543: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10006547:	83 c4 20             	add    esp,0x20
1000654a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000654b: R_386_32	term
1000654f:	83 ec 04             	sub    esp,0x4
10006552:	6a 08                	push   0x8
10006554:	6a 18                	push   0x18
10006556:	50                   	push   eax
10006557:	e8 fc ff ff ff       	call   10006558 <begin(void*)+0x137a>	10006558: R_386_PC32	VgaText::setCursor(int, int)
1000655c:	83 c4 10             	add    esp,0x10
1000655f:	a1 00 00 00 00       	mov    eax,ds:0x0	10006560: R_386_32	term
10006564:	83 ec 08             	sub    esp,0x8
10006567:	68 04 b2 00 10       	push   0x1000b204	10006568: R_386_32	.text
1000656c:	50                   	push   eax
1000656d:	e8 fc ff ff ff       	call   1000656e <begin(void*)+0x1390>	1000656e: R_386_PC32	VgaText::puts(char const*)
10006572:	83 c4 10             	add    esp,0x10
10006575:	a1 00 00 00 00       	mov    eax,ds:0x0	10006576: R_386_32	term
1000657a:	83 ec 04             	sub    esp,0x4
1000657d:	6a 0a                	push   0xa
1000657f:	6a 18                	push   0x18
10006581:	50                   	push   eax
10006582:	e8 fc ff ff ff       	call   10006583 <begin(void*)+0x13a5>	10006583: R_386_PC32	VgaText::setCursor(int, int)
10006587:	83 c4 10             	add    esp,0x10
1000658a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000658b: R_386_32	term
1000658f:	83 ec 08             	sub    esp,0x8
10006592:	68 2c b2 00 10       	push   0x1000b22c	10006593: R_386_32	.text
10006597:	50                   	push   eax
10006598:	e8 fc ff ff ff       	call   10006599 <begin(void*)+0x13bb>	10006599: R_386_PC32	VgaText::puts(char const*)
1000659d:	83 c4 10             	add    esp,0x10
100065a0:	a1 00 00 00 00       	mov    eax,ds:0x0	100065a1: R_386_32	term
100065a5:	83 ec 04             	sub    esp,0x4
100065a8:	6a 0b                	push   0xb
100065aa:	6a 18                	push   0x18
100065ac:	50                   	push   eax
100065ad:	e8 fc ff ff ff       	call   100065ae <begin(void*)+0x13d0>	100065ae: R_386_PC32	VgaText::setCursor(int, int)
100065b2:	83 c4 10             	add    esp,0x10
100065b5:	a1 00 00 00 00       	mov    eax,ds:0x0	100065b6: R_386_32	term
100065ba:	83 ec 08             	sub    esp,0x8
100065bd:	68 58 b2 00 10       	push   0x1000b258	100065be: R_386_32	.text
100065c2:	50                   	push   eax
100065c3:	e8 fc ff ff ff       	call   100065c4 <begin(void*)+0x13e6>	100065c4: R_386_PC32	VgaText::puts(char const*)
100065c8:	83 c4 10             	add    esp,0x10
100065cb:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100065cd: R_386_32	installKey
100065d2:	a0 00 00 00 00       	mov    al,ds:0x0	100065d3: R_386_32	installKey
100065d7:	84 c0                	test   al,al
100065d9:	0f 94 c0             	sete   al
100065dc:	84 c0                	test   al,al
100065de:	74 02                	je     100065e2 <begin(void*)+0x1404>
100065e0:	eb f0                	jmp    100065d2 <begin(void*)+0x13f4>
100065e2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100065e4: R_386_32	installKey
100065e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100065ea: R_386_32	term
100065ee:	83 ec 04             	sub    esp,0x4
100065f1:	6a 0c                	push   0xc
100065f3:	6a 18                	push   0x18
100065f5:	50                   	push   eax
100065f6:	e8 fc ff ff ff       	call   100065f7 <begin(void*)+0x1419>	100065f7: R_386_PC32	VgaText::setCursor(int, int)
100065fb:	83 c4 10             	add    esp,0x10
100065fe:	e8 fc ff ff ff       	call   100065ff <begin(void*)+0x1421>	100065ff: R_386_PC32	KeRestart()
10006603:	e9 fd 0d 00 00       	jmp    10007405 <begin(void*)+0x2227>
10006608:	e8 fc ff ff ff       	call   10006609 <begin(void*)+0x142b>	10006609: R_386_PC32	KeLoadClockSettings()
1000660d:	83 ec 0c             	sub    esp,0xc
10006610:	68 04 ae 00 10       	push   0x1000ae04	10006611: R_386_32	.text
10006615:	e8 fc ff ff ff       	call   10006616 <begin(void*)+0x1438>	10006616: R_386_PC32	CmOpen(char const*)
1000661a:	83 c4 10             	add    esp,0x10
1000661d:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10006620:	83 ec 08             	sub    esp,0x8
10006623:	68 be af 00 10       	push   0x1000afbe	10006624: R_386_32	.text
10006628:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000662b:	e8 fc ff ff ff       	call   1000662c <begin(void*)+0x144e>	1000662c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006630:	83 c4 10             	add    esp,0x10
10006633:	83 ec 04             	sub    esp,0x4
10006636:	8d 95 dc fc ff ff    	lea    edx,[ebp-0x324]
1000663c:	52                   	push   edx
1000663d:	50                   	push   eax
1000663e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006641:	e8 fc ff ff ff       	call   10006642 <begin(void*)+0x1464>	10006642: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006646:	83 c4 10             	add    esp,0x10
10006649:	83 ec 08             	sub    esp,0x8
1000664c:	68 6a b2 00 10       	push   0x1000b26a	1000664d: R_386_32	.text
10006651:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006654:	e8 fc ff ff ff       	call   10006655 <begin(void*)+0x1477>	10006655: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006659:	83 c4 10             	add    esp,0x10
1000665c:	83 ec 04             	sub    esp,0x4
1000665f:	8d 95 d0 fc ff ff    	lea    edx,[ebp-0x330]
10006665:	52                   	push   edx
10006666:	50                   	push   eax
10006667:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000666a:	e8 fc ff ff ff       	call   1000666b <begin(void*)+0x148d>	1000666b: R_386_PC32	CmGetInteger(Reghive_Tag*, int, unsigned long long*)
1000666f:	83 c4 10             	add    esp,0x10
10006672:	83 ec 0c             	sub    esp,0xc
10006675:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006678:	e8 fc ff ff ff       	call   10006679 <begin(void*)+0x149b>	10006679: R_386_PC32	CmClose(Reghive_Tag*)
1000667d:	83 c4 10             	add    esp,0x10
10006680:	83 ec 0c             	sub    esp,0xc
10006683:	8d 85 dc fc ff ff    	lea    eax,[ebp-0x324]
10006689:	50                   	push   eax
1000668a:	e8 fc ff ff ff       	call   1000668b <begin(void*)+0x14ad>	1000668b: R_386_PC32	checkExtendedKey(char*)
1000668f:	83 c4 10             	add    esp,0x10
10006692:	85 c0                	test   eax,eax
10006694:	0f 94 c0             	sete   al
10006697:	84 c0                	test   al,al
10006699:	0f 84 bd 01 00 00    	je     1000685c <begin(void*)+0x167e>
1000669f:	83 ec 0c             	sub    esp,0xc
100066a2:	6a 01                	push   0x1
100066a4:	e8 fc ff ff ff       	call   100066a5 <begin(void*)+0x14c7>	100066a5: R_386_PC32	firstRun(bool)
100066a9:	83 c4 10             	add    esp,0x10
100066ac:	83 ec 0c             	sub    esp,0xc
100066af:	68 04 ae 00 10       	push   0x1000ae04	100066b0: R_386_32	.text
100066b4:	e8 fc ff ff ff       	call   100066b5 <begin(void*)+0x14d7>	100066b5: R_386_PC32	CmOpen(char const*)
100066b9:	83 c4 10             	add    esp,0x10
100066bc:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
100066bf:	83 ec 04             	sub    esp,0x4
100066c2:	68 29 ae 00 10       	push   0x1000ae29	100066c3: R_386_32	.text
100066c7:	6a 00                	push   0x0
100066c9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100066cc:	e8 fc ff ff ff       	call   100066cd <begin(void*)+0x14ef>	100066cd: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100066d1:	83 c4 10             	add    esp,0x10
100066d4:	83 ec 08             	sub    esp,0x8
100066d7:	68 29 ae 00 10       	push   0x1000ae29	100066d8: R_386_32	.text
100066dc:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100066df:	e8 fc ff ff ff       	call   100066e0 <begin(void*)+0x1502>	100066e0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100066e4:	83 c4 10             	add    esp,0x10
100066e7:	83 ec 08             	sub    esp,0x8
100066ea:	50                   	push   eax
100066eb:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100066ee:	e8 fc ff ff ff       	call   100066ef <begin(void*)+0x1511>	100066ef: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100066f3:	83 c4 10             	add    esp,0x10
100066f6:	83 ec 04             	sub    esp,0x4
100066f9:	68 63 ae 00 10       	push   0x1000ae63	100066fa: R_386_32	.text
100066fe:	50                   	push   eax
100066ff:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006702:	e8 fc ff ff ff       	call   10006703 <begin(void*)+0x1525>	10006703: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10006707:	83 c4 10             	add    esp,0x10
1000670a:	83 ec 08             	sub    esp,0x8
1000670d:	68 da ae 00 10       	push   0x1000aeda	1000670e: R_386_32	.text
10006712:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006715:	e8 fc ff ff ff       	call   10006716 <begin(void*)+0x1538>	10006716: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000671a:	83 c4 10             	add    esp,0x10
1000671d:	83 ec 08             	sub    esp,0x8
10006720:	50                   	push   eax
10006721:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006724:	e8 fc ff ff ff       	call   10006725 <begin(void*)+0x1547>	10006725: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006729:	83 c4 10             	add    esp,0x10
1000672c:	83 ec 04             	sub    esp,0x4
1000672f:	68 f4 ae 00 10       	push   0x1000aef4	10006730: R_386_32	.text
10006734:	50                   	push   eax
10006735:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006738:	e8 fc ff ff ff       	call   10006739 <begin(void*)+0x155b>	10006739: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000673d:	83 c4 10             	add    esp,0x10
10006740:	83 ec 08             	sub    esp,0x8
10006743:	68 be af 00 10       	push   0x1000afbe	10006744: R_386_32	.text
10006748:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000674b:	e8 fc ff ff ff       	call   1000674c <begin(void*)+0x156e>	1000674c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006750:	83 c4 10             	add    esp,0x10
10006753:	83 ec 04             	sub    esp,0x4
10006756:	68 00 00 00 00       	push   0x0	10006757: R_386_32	pkeybuf
1000675b:	50                   	push   eax
1000675c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000675f:	e8 fc ff ff ff       	call   10006760 <begin(void*)+0x1582>	10006760: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006764:	83 c4 10             	add    esp,0x10
10006767:	83 ec 0c             	sub    esp,0xc
1000676a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000676d:	e8 fc ff ff ff       	call   1000676e <begin(void*)+0x1590>	1000676e: R_386_PC32	CmClose(Reghive_Tag*)
10006772:	83 c4 10             	add    esp,0x10
10006775:	a1 00 00 00 00       	mov    eax,ds:0x0	10006776: R_386_32	term
1000677a:	83 ec 0c             	sub    esp,0xc
1000677d:	50                   	push   eax
1000677e:	e8 fc ff ff ff       	call   1000677f <begin(void*)+0x15a1>	1000677f: R_386_PC32	setActiveTerminal(VgaText*)
10006783:	83 c4 10             	add    esp,0x10
10006786:	e8 fc ff ff ff       	call   10006787 <begin(void*)+0x15a9>	10006787: R_386_PC32	drawBootScreen()
1000678b:	83 ec 0c             	sub    esp,0xc
1000678e:	68 7e b2 00 10       	push   0x1000b27e	1000678f: R_386_32	.text
10006793:	6a 0d                	push   0xd
10006795:	6a 32                	push   0x32
10006797:	6a 05                	push   0x5
10006799:	6a 16                	push   0x16
1000679b:	e8 fc ff ff ff       	call   1000679c <begin(void*)+0x15be>	1000679c: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100067a0:	83 c4 20             	add    esp,0x20
100067a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100067a4: R_386_32	term
100067a8:	83 ec 04             	sub    esp,0x4
100067ab:	6a 08                	push   0x8
100067ad:	6a 18                	push   0x18
100067af:	50                   	push   eax
100067b0:	e8 fc ff ff ff       	call   100067b1 <begin(void*)+0x15d3>	100067b1: R_386_PC32	VgaText::setCursor(int, int)
100067b5:	83 c4 10             	add    esp,0x10
100067b8:	a1 00 00 00 00       	mov    eax,ds:0x0	100067b9: R_386_32	term
100067bd:	83 ec 08             	sub    esp,0x8
100067c0:	68 94 b2 00 10       	push   0x1000b294	100067c1: R_386_32	.text
100067c5:	50                   	push   eax
100067c6:	e8 fc ff ff ff       	call   100067c7 <begin(void*)+0x15e9>	100067c7: R_386_PC32	VgaText::puts(char const*)
100067cb:	83 c4 10             	add    esp,0x10
100067ce:	a1 00 00 00 00       	mov    eax,ds:0x0	100067cf: R_386_32	term
100067d3:	83 ec 04             	sub    esp,0x4
100067d6:	6a 0a                	push   0xa
100067d8:	6a 18                	push   0x18
100067da:	50                   	push   eax
100067db:	e8 fc ff ff ff       	call   100067dc <begin(void*)+0x15fe>	100067dc: R_386_PC32	VgaText::setCursor(int, int)
100067e0:	83 c4 10             	add    esp,0x10
100067e3:	a1 00 00 00 00       	mov    eax,ds:0x0	100067e4: R_386_32	term
100067e8:	83 ec 08             	sub    esp,0x8
100067eb:	68 2c b2 00 10       	push   0x1000b22c	100067ec: R_386_32	.text
100067f0:	50                   	push   eax
100067f1:	e8 fc ff ff ff       	call   100067f2 <begin(void*)+0x1614>	100067f2: R_386_PC32	VgaText::puts(char const*)
100067f6:	83 c4 10             	add    esp,0x10
100067f9:	a1 00 00 00 00       	mov    eax,ds:0x0	100067fa: R_386_32	term
100067fe:	83 ec 04             	sub    esp,0x4
10006801:	6a 0b                	push   0xb
10006803:	6a 18                	push   0x18
10006805:	50                   	push   eax
10006806:	e8 fc ff ff ff       	call   10006807 <begin(void*)+0x1629>	10006807: R_386_PC32	VgaText::setCursor(int, int)
1000680b:	83 c4 10             	add    esp,0x10
1000680e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000680f: R_386_32	term
10006813:	83 ec 08             	sub    esp,0x8
10006816:	68 58 b2 00 10       	push   0x1000b258	10006817: R_386_32	.text
1000681b:	50                   	push   eax
1000681c:	e8 fc ff ff ff       	call   1000681d <begin(void*)+0x163f>	1000681d: R_386_PC32	VgaText::puts(char const*)
10006821:	83 c4 10             	add    esp,0x10
10006824:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006826: R_386_32	installKey
1000682b:	a0 00 00 00 00       	mov    al,ds:0x0	1000682c: R_386_32	installKey
10006830:	84 c0                	test   al,al
10006832:	0f 94 c0             	sete   al
10006835:	84 c0                	test   al,al
10006837:	74 02                	je     1000683b <begin(void*)+0x165d>
10006839:	eb f0                	jmp    1000682b <begin(void*)+0x164d>
1000683b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000683d: R_386_32	installKey
10006842:	a1 00 00 00 00       	mov    eax,ds:0x0	10006843: R_386_32	term
10006847:	83 ec 04             	sub    esp,0x4
1000684a:	6a 0c                	push   0xc
1000684c:	6a 18                	push   0x18
1000684e:	50                   	push   eax
1000684f:	e8 fc ff ff ff       	call   10006850 <begin(void*)+0x1672>	10006850: R_386_PC32	VgaText::setCursor(int, int)
10006854:	83 c4 10             	add    esp,0x10
10006857:	e8 fc ff ff ff       	call   10006858 <begin(void*)+0x167a>	10006858: R_386_PC32	KeRestart()
1000685c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000685e: R_386_32	showSidebar
10006863:	83 ec 0c             	sub    esp,0xc
10006866:	68 84 01 00 00       	push   0x184
1000686b:	e8 fc ff ff ff       	call   1000686c <begin(void*)+0x168e>	1000686c: R_386_PC32	operator new(unsigned long)
10006870:	83 c4 10             	add    esp,0x10
10006873:	89 c3                	mov    ebx,eax
10006875:	83 ec 08             	sub    esp,0x8
10006878:	68 80 a8 00 10       	push   0x1000a880	10006879: R_386_32	.text
1000687d:	53                   	push   ebx
1000687e:	e8 fc ff ff ff       	call   1000687f <begin(void*)+0x16a1>	1000687f: R_386_PC32	VgaText::VgaText(char const*)
10006883:	83 c4 10             	add    esp,0x10
10006886:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10006888: R_386_32	term
1000688c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000688d: R_386_32	term
10006891:	83 ec 0c             	sub    esp,0xc
10006894:	50                   	push   eax
10006895:	e8 fc ff ff ff       	call   10006896 <begin(void*)+0x16b8>	10006896: R_386_PC32	setActiveTerminal(VgaText*)
1000689a:	83 c4 10             	add    esp,0x10
1000689d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100068a4:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100068ab:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100068ad: R_386_32	installKey
100068b2:	83 ec 04             	sub    esp,0x4
100068b5:	68 80 00 00 00       	push   0x80
100068ba:	6a 00                	push   0x0
100068bc:	8d 85 48 f9 ff ff    	lea    eax,[ebp-0x6b8]
100068c2:	50                   	push   eax
100068c3:	e8 fc ff ff ff       	call   100068c4 <begin(void*)+0x16e6>	100068c4: R_386_PC32	memset
100068c8:	83 c4 10             	add    esp,0x10
100068cb:	83 ec 04             	sub    esp,0x4
100068ce:	68 80 00 00 00       	push   0x80
100068d3:	6a 00                	push   0x0
100068d5:	8d 85 c8 f9 ff ff    	lea    eax,[ebp-0x638]
100068db:	50                   	push   eax
100068dc:	e8 fc ff ff ff       	call   100068dd <begin(void*)+0x16ff>	100068dd: R_386_PC32	memset
100068e1:	83 c4 10             	add    esp,0x10
100068e4:	83 ec 0c             	sub    esp,0xc
100068e7:	68 04 ae 00 10       	push   0x1000ae04	100068e8: R_386_32	.text
100068ec:	e8 fc ff ff ff       	call   100068ed <begin(void*)+0x170f>	100068ed: R_386_PC32	CmOpen(char const*)
100068f1:	83 c4 10             	add    esp,0x10
100068f4:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
100068f7:	83 ec 08             	sub    esp,0x8
100068fa:	68 ff ae 00 10       	push   0x1000aeff	100068fb: R_386_32	.text
100068ff:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006902:	e8 fc ff ff ff       	call   10006903 <begin(void*)+0x1725>	10006903: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006907:	83 c4 10             	add    esp,0x10
1000690a:	83 ec 08             	sub    esp,0x8
1000690d:	50                   	push   eax
1000690e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006911:	e8 fc ff ff ff       	call   10006912 <begin(void*)+0x1734>	10006912: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006916:	83 c4 10             	add    esp,0x10
10006919:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000691c:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10006920:	0f 84 88 01 00 00    	je     10006aae <begin(void*)+0x18d0>
10006926:	83 ec 04             	sub    esp,0x4
10006929:	6a 50                	push   0x50
1000692b:	6a 00                	push   0x0
1000692d:	8d 85 a8 f8 ff ff    	lea    eax,[ebp-0x758]
10006933:	50                   	push   eax
10006934:	e8 fc ff ff ff       	call   10006935 <begin(void*)+0x1757>	10006935: R_386_PC32	memset
10006939:	83 c4 10             	add    esp,0x10
1000693c:	83 ec 04             	sub    esp,0x4
1000693f:	8d 85 a8 f8 ff ff    	lea    eax,[ebp-0x758]
10006945:	50                   	push   eax
10006946:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10006949:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000694c:	e8 fc ff ff ff       	call   1000694d <begin(void*)+0x176f>	1000694d: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
10006951:	83 c4 10             	add    esp,0x10
10006954:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10006957:	83 7d a0 4e          	cmp    DWORD PTR [ebp-0x60],0x4e
1000695b:	0f 85 34 01 00 00    	jne    10006a95 <begin(void*)+0x18b7>
10006961:	83 ec 0c             	sub    esp,0xc
10006964:	6a 50                	push   0x50
10006966:	e8 fc ff ff ff       	call   10006967 <begin(void*)+0x1789>	10006967: R_386_PC32	malloc
1000696b:	83 c4 10             	add    esp,0x10
1000696e:	89 c2                	mov    edx,eax
10006970:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006973:	89 94 85 c8 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x638],edx
1000697a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000697d:	8b 84 85 c8 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x638]
10006984:	83 ec 08             	sub    esp,0x8
10006987:	8d 95 a8 f8 ff ff    	lea    edx,[ebp-0x758]
1000698d:	52                   	push   edx
1000698e:	50                   	push   eax
1000698f:	e8 fc ff ff ff       	call   10006990 <begin(void*)+0x17b2>	10006990: R_386_PC32	strcpy
10006994:	83 c4 10             	add    esp,0x10
10006997:	83 ec 08             	sub    esp,0x8
1000699a:	68 42 ae 00 10       	push   0x1000ae42	1000699b: R_386_32	.text
1000699f:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100069a5:	50                   	push   eax
100069a6:	e8 fc ff ff ff       	call   100069a7 <begin(void*)+0x17c9>	100069a7: R_386_PC32	strcpy
100069ab:	83 c4 10             	add    esp,0x10
100069ae:	83 ec 08             	sub    esp,0x8
100069b1:	8d 85 a8 f8 ff ff    	lea    eax,[ebp-0x758]
100069b7:	50                   	push   eax
100069b8:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100069be:	50                   	push   eax
100069bf:	e8 fc ff ff ff       	call   100069c0 <begin(void*)+0x17e2>	100069c0: R_386_PC32	strcat
100069c4:	83 c4 10             	add    esp,0x10
100069c7:	83 ec 08             	sub    esp,0x8
100069ca:	68 8b b1 00 10       	push   0x1000b18b	100069cb: R_386_32	.text
100069cf:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100069d5:	50                   	push   eax
100069d6:	e8 fc ff ff ff       	call   100069d7 <begin(void*)+0x17f9>	100069d7: R_386_PC32	strcat
100069db:	83 c4 10             	add    esp,0x10
100069de:	83 ec 08             	sub    esp,0x8
100069e1:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100069e7:	50                   	push   eax
100069e8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100069eb:	e8 fc ff ff ff       	call   100069ec <begin(void*)+0x180e>	100069ec: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100069f0:	83 c4 10             	add    esp,0x10
100069f3:	83 ec 04             	sub    esp,0x4
100069f6:	8d 95 a8 f8 ff ff    	lea    edx,[ebp-0x758]
100069fc:	52                   	push   edx
100069fd:	50                   	push   eax
100069fe:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006a01:	e8 fc ff ff ff       	call   10006a02 <begin(void*)+0x1824>	10006a02: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006a06:	83 c4 10             	add    esp,0x10
10006a09:	83 ec 0c             	sub    esp,0xc
10006a0c:	6a 50                	push   0x50
10006a0e:	e8 fc ff ff ff       	call   10006a0f <begin(void*)+0x1831>	10006a0f: R_386_PC32	malloc
10006a13:	83 c4 10             	add    esp,0x10
10006a16:	89 c2                	mov    edx,eax
10006a18:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006a1b:	89 94 85 48 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x6b8],edx
10006a22:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006a25:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10006a2c:	83 ec 08             	sub    esp,0x8
10006a2f:	68 47 a8 00 10       	push   0x1000a847	10006a30: R_386_32	.text
10006a34:	50                   	push   eax
10006a35:	e8 fc ff ff ff       	call   10006a36 <begin(void*)+0x1858>	10006a36: R_386_PC32	strcpy
10006a3a:	83 c4 10             	add    esp,0x10
10006a3d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006a40:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10006a47:	83 ec 08             	sub    esp,0x8
10006a4a:	8d 95 a8 f8 ff ff    	lea    edx,[ebp-0x758]
10006a50:	52                   	push   edx
10006a51:	50                   	push   eax
10006a52:	e8 fc ff ff ff       	call   10006a53 <begin(void*)+0x1875>	10006a53: R_386_PC32	strcat
10006a57:	83 c4 10             	add    esp,0x10
10006a5a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006a5d:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10006a64:	83 ec 0c             	sub    esp,0xc
10006a67:	50                   	push   eax
10006a68:	e8 fc ff ff ff       	call   10006a69 <begin(void*)+0x188b>	10006a69: R_386_PC32	strlen
10006a6d:	83 c4 10             	add    esp,0x10
10006a70:	83 f8 31             	cmp    eax,0x31
10006a73:	77 1d                	ja     10006a92 <begin(void*)+0x18b4>
10006a75:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006a78:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10006a7f:	83 ec 08             	sub    esp,0x8
10006a82:	68 47 a8 00 10       	push   0x1000a847	10006a83: R_386_32	.text
10006a87:	50                   	push   eax
10006a88:	e8 fc ff ff ff       	call   10006a89 <begin(void*)+0x18ab>	10006a89: R_386_PC32	strcat
10006a8d:	83 c4 10             	add    esp,0x10
10006a90:	eb c8                	jmp    10006a5a <begin(void*)+0x187c>
10006a92:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10006a95:	83 ec 08             	sub    esp,0x8
10006a98:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10006a9b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006a9e:	e8 fc ff ff ff       	call   10006a9f <begin(void*)+0x18c1>	10006a9f: R_386_PC32	CmGetNext(Reghive_Tag*, int)
10006aa3:	83 c4 10             	add    esp,0x10
10006aa6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10006aa9:	e9 6e fe ff ff       	jmp    1000691c <begin(void*)+0x173e>
10006aae:	83 ec 0c             	sub    esp,0xc
10006ab1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006ab4:	e8 fc ff ff ff       	call   10006ab5 <begin(void*)+0x18d7>	10006ab5: R_386_PC32	CmClose(Reghive_Tag*)
10006ab9:	83 c4 10             	add    esp,0x10
10006abc:	83 ec 0c             	sub    esp,0xc
10006abf:	6a 50                	push   0x50
10006ac1:	e8 fc ff ff ff       	call   10006ac2 <begin(void*)+0x18e4>	10006ac2: R_386_PC32	malloc
10006ac6:	83 c4 10             	add    esp,0x10
10006ac9:	89 c2                	mov    edx,eax
10006acb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006ace:	89 94 85 48 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x6b8],edx
10006ad5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006ad8:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10006adf:	83 ec 08             	sub    esp,0x8
10006ae2:	68 b8 b2 00 10       	push   0x1000b2b8	10006ae3: R_386_32	.text
10006ae7:	50                   	push   eax
10006ae8:	e8 fc ff ff ff       	call   10006ae9 <begin(void*)+0x190b>	10006ae9: R_386_PC32	strcpy
10006aed:	83 c4 10             	add    esp,0x10
10006af0:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10006af3:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10006af5: R_386_32	guiKeyboardHandler
	10006af9: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
10006afd:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006aff: R_386_32	installKey
10006b04:	e8 fc ff ff ff       	call   10006b05 <begin(void*)+0x1927>	10006b05: R_386_PC32	drawBootScreen()
10006b09:	83 ec 0c             	sub    esp,0xc
10006b0c:	68 eb b2 00 10       	push   0x1000b2eb	10006b0d: R_386_32	.text
10006b11:	6a 10                	push   0x10
10006b13:	6a 39                	push   0x39
10006b15:	6a 03                	push   0x3
10006b17:	6a 0c                	push   0xc
10006b19:	e8 fc ff ff ff       	call   10006b1a <begin(void*)+0x193c>	10006b1a: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10006b1e:	83 c4 20             	add    esp,0x20
10006b21:	a1 00 00 00 00       	mov    eax,ds:0x0	10006b22: R_386_32	term
10006b26:	83 ec 04             	sub    esp,0x4
10006b29:	6a 06                	push   0x6
10006b2b:	6a 0e                	push   0xe
10006b2d:	50                   	push   eax
10006b2e:	e8 fc ff ff ff       	call   10006b2f <begin(void*)+0x1951>	10006b2f: R_386_PC32	VgaText::setCursor(int, int)
10006b33:	83 c4 10             	add    esp,0x10
10006b36:	a1 00 00 00 00       	mov    eax,ds:0x0	10006b37: R_386_32	term
10006b3b:	6a 0f                	push   0xf
10006b3d:	6a 00                	push   0x0
10006b3f:	68 f4 b2 00 10       	push   0x1000b2f4	10006b40: R_386_32	.text
10006b44:	50                   	push   eax
10006b45:	e8 fc ff ff ff       	call   10006b46 <begin(void*)+0x1968>	10006b46: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006b4a:	83 c4 10             	add    esp,0x10
10006b4d:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10006b51:	75 0c                	jne    10006b5f <begin(void*)+0x1981>
10006b53:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10006b5a:	e9 23 01 00 00       	jmp    10006c82 <begin(void*)+0x1aa4>
10006b5f:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10006b66:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006b69:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10006b6c:	7d 63                	jge    10006bd1 <begin(void*)+0x19f3>
10006b6e:	a1 00 00 00 00       	mov    eax,ds:0x0	10006b6f: R_386_32	term
10006b73:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10006b76:	83 c2 08             	add    edx,0x8
10006b79:	83 ec 04             	sub    esp,0x4
10006b7c:	52                   	push   edx
10006b7d:	6a 0f                	push   0xf
10006b7f:	50                   	push   eax
10006b80:	e8 fc ff ff ff       	call   10006b81 <begin(void*)+0x19a3>	10006b81: R_386_PC32	VgaText::setCursor(int, int)
10006b85:	83 c4 10             	add    esp,0x10
10006b88:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10006b8a: R_386_32	term
10006b8e:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006b91:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006b94:	75 07                	jne    10006b9d <begin(void*)+0x19bf>
10006b96:	b9 00 00 00 00       	mov    ecx,0x0
10006b9b:	eb 05                	jmp    10006ba2 <begin(void*)+0x19c4>
10006b9d:	b9 0f 00 00 00       	mov    ecx,0xf
10006ba2:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006ba5:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006ba8:	75 07                	jne    10006bb1 <begin(void*)+0x19d3>
10006baa:	ba 0f 00 00 00       	mov    edx,0xf
10006baf:	eb 05                	jmp    10006bb6 <begin(void*)+0x19d8>
10006bb1:	ba 00 00 00 00       	mov    edx,0x0
10006bb6:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006bb9:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10006bc0:	51                   	push   ecx
10006bc1:	52                   	push   edx
10006bc2:	50                   	push   eax
10006bc3:	53                   	push   ebx
10006bc4:	e8 fc ff ff ff       	call   10006bc5 <begin(void*)+0x19e7>	10006bc5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006bc9:	83 c4 10             	add    esp,0x10
10006bcc:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10006bcf:	eb 95                	jmp    10006b66 <begin(void*)+0x1988>
10006bd1:	a0 00 00 00 00       	mov    al,ds:0x0	10006bd2: R_386_32	installKey
10006bd6:	84 c0                	test   al,al
10006bd8:	0f 94 c0             	sete   al
10006bdb:	84 c0                	test   al,al
10006bdd:	74 02                	je     10006be1 <begin(void*)+0x1a03>
10006bdf:	eb f0                	jmp    10006bd1 <begin(void*)+0x19f3>
10006be1:	a1 00 00 00 00       	mov    eax,ds:0x0	10006be2: R_386_32	term
10006be6:	05 82 00 00 00       	add    eax,0x82
10006beb:	83 ec 04             	sub    esp,0x4
10006bee:	6a 04                	push   0x4
10006bf0:	6a 00                	push   0x0
10006bf2:	50                   	push   eax
10006bf3:	e8 fc ff ff ff       	call   10006bf4 <begin(void*)+0x1a16>	10006bf4: R_386_PC32	memset
10006bf8:	83 c4 10             	add    esp,0x10
10006bfb:	a1 00 00 00 00       	mov    eax,ds:0x0	10006bfc: R_386_32	term
10006c00:	05 02 01 00 00       	add    eax,0x102
10006c05:	83 ec 04             	sub    esp,0x4
10006c08:	6a 04                	push   0x4
10006c0a:	6a 00                	push   0x0
10006c0c:	50                   	push   eax
10006c0d:	e8 fc ff ff ff       	call   10006c0e <begin(void*)+0x1a30>	10006c0e: R_386_PC32	memset
10006c12:	83 c4 10             	add    esp,0x10
10006c15:	a0 00 00 00 00       	mov    al,ds:0x0	10006c16: R_386_32	installKey
10006c1a:	3c 01                	cmp    al,0x1
10006c1c:	0f 94 c0             	sete   al
10006c1f:	84 c0                	test   al,al
10006c21:	74 12                	je     10006c35 <begin(void*)+0x1a57>
10006c23:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10006c26:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10006c2a:	79 39                	jns    10006c65 <begin(void*)+0x1a87>
10006c2c:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10006c33:	eb 30                	jmp    10006c65 <begin(void*)+0x1a87>
10006c35:	a0 00 00 00 00       	mov    al,ds:0x0	10006c36: R_386_32	installKey
10006c3a:	3c 02                	cmp    al,0x2
10006c3c:	0f 94 c0             	sete   al
10006c3f:	84 c0                	test   al,al
10006c41:	74 14                	je     10006c57 <begin(void*)+0x1a79>
10006c43:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10006c46:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006c49:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006c4c:	7f 17                	jg     10006c65 <begin(void*)+0x1a87>
10006c4e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006c51:	48                   	dec    eax
10006c52:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10006c55:	eb 0e                	jmp    10006c65 <begin(void*)+0x1a87>
10006c57:	a0 00 00 00 00       	mov    al,ds:0x0	10006c58: R_386_32	installKey
10006c5c:	3c 0a                	cmp    al,0xa
10006c5e:	0f 94 c0             	sete   al
10006c61:	84 c0                	test   al,al
10006c63:	75 1c                	jne    10006c81 <begin(void*)+0x1aa3>
10006c65:	83 ec 0c             	sub    esp,0xc
10006c68:	68 f4 01 00 00       	push   0x1f4
10006c6d:	e8 fc ff ff ff       	call   10006c6e <begin(void*)+0x1a90>	10006c6e: R_386_PC32	milliTenthSleep(unsigned int)
10006c72:	83 c4 10             	add    esp,0x10
10006c75:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006c77: R_386_32	installKey
10006c7c:	e9 cc fe ff ff       	jmp    10006b4d <begin(void*)+0x196f>
10006c81:	90                   	nop
10006c82:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006c85:	48                   	dec    eax
10006c86:	39 45 dc             	cmp    DWORD PTR [ebp-0x24],eax
10006c89:	0f 85 af 00 00 00    	jne    10006d3e <begin(void*)+0x1b60>
10006c8f:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10006c91: R_386_32	createNewUserMode
10006c96:	83 ec 0c             	sub    esp,0xc
10006c99:	6a 00                	push   0x0
10006c9b:	e8 fc ff ff ff       	call   10006c9c <begin(void*)+0x1abe>	10006c9c: R_386_PC32	firstRun(bool)
10006ca0:	83 c4 10             	add    esp,0x10
10006ca3:	a0 00 00 00 00       	mov    al,ds:0x0	10006ca4: R_386_32	createNewUserMode
10006ca8:	83 f0 01             	xor    eax,0x1
10006cab:	84 c0                	test   al,al
10006cad:	0f 84 82 e7 ff ff    	je     10005435 <begin(void*)+0x257>
10006cb3:	a1 00 00 00 00       	mov    eax,ds:0x0	10006cb4: R_386_32	term
10006cb8:	05 82 00 00 00       	add    eax,0x82
10006cbd:	83 ec 04             	sub    esp,0x4
10006cc0:	6a 04                	push   0x4
10006cc2:	6a 00                	push   0x0
10006cc4:	50                   	push   eax
10006cc5:	e8 fc ff ff ff       	call   10006cc6 <begin(void*)+0x1ae8>	10006cc6: R_386_PC32	memset
10006cca:	83 c4 10             	add    esp,0x10
10006ccd:	a1 00 00 00 00       	mov    eax,ds:0x0	10006cce: R_386_32	term
10006cd2:	05 02 01 00 00       	add    eax,0x102
10006cd7:	83 ec 04             	sub    esp,0x4
10006cda:	6a 04                	push   0x4
10006cdc:	6a 00                	push   0x0
10006cde:	50                   	push   eax
10006cdf:	e8 fc ff ff ff       	call   10006ce0 <begin(void*)+0x1b02>	10006ce0: R_386_PC32	memset
10006ce4:	83 c4 10             	add    esp,0x10
10006ce7:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006ce9: R_386_32	installKey
10006cee:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10006cf1:	e9 ae fb ff ff       	jmp    100068a4 <begin(void*)+0x16c6>
10006cf6:	90                   	nop
10006cf7:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006cf9: R_386_32	createNewUserMode
10006cfe:	a1 00 00 00 00       	mov    eax,ds:0x0	10006cff: R_386_32	term
10006d03:	05 82 00 00 00       	add    eax,0x82
10006d08:	83 ec 04             	sub    esp,0x4
10006d0b:	6a 04                	push   0x4
10006d0d:	6a 00                	push   0x0
10006d0f:	50                   	push   eax
10006d10:	e8 fc ff ff ff       	call   10006d11 <begin(void*)+0x1b33>	10006d11: R_386_PC32	memset
10006d15:	83 c4 10             	add    esp,0x10
10006d18:	a1 00 00 00 00       	mov    eax,ds:0x0	10006d19: R_386_32	term
10006d1d:	05 02 01 00 00       	add    eax,0x102
10006d22:	83 ec 04             	sub    esp,0x4
10006d25:	6a 04                	push   0x4
10006d27:	6a 00                	push   0x0
10006d29:	50                   	push   eax
10006d2a:	e8 fc ff ff ff       	call   10006d2b <begin(void*)+0x1b4d>	10006d2b: R_386_PC32	memset
10006d2f:	83 c4 10             	add    esp,0x10
10006d32:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006d34: R_386_32	installKey
10006d39:	e9 66 fb ff ff       	jmp    100068a4 <begin(void*)+0x16c6>
10006d3e:	83 ec 08             	sub    esp,0x8
10006d41:	68 42 ae 00 10       	push   0x1000ae42	10006d42: R_386_32	.text
10006d46:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006d4c:	50                   	push   eax
10006d4d:	e8 fc ff ff ff       	call   10006d4e <begin(void*)+0x1b70>	10006d4e: R_386_PC32	strcpy
10006d52:	83 c4 10             	add    esp,0x10
10006d55:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006d58:	8b 84 85 c8 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x638]
10006d5f:	83 ec 08             	sub    esp,0x8
10006d62:	50                   	push   eax
10006d63:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006d69:	50                   	push   eax
10006d6a:	e8 fc ff ff ff       	call   10006d6b <begin(void*)+0x1b8d>	10006d6b: R_386_PC32	strcat
10006d6f:	83 c4 10             	add    esp,0x10
10006d72:	83 ec 08             	sub    esp,0x8
10006d75:	68 7b b1 00 10       	push   0x1000b17b	10006d76: R_386_32	.text
10006d7a:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006d80:	50                   	push   eax
10006d81:	e8 fc ff ff ff       	call   10006d82 <begin(void*)+0x1ba4>	10006d82: R_386_PC32	strcat
10006d86:	83 c4 10             	add    esp,0x10
10006d89:	83 ec 0c             	sub    esp,0xc
10006d8c:	68 04 ae 00 10       	push   0x1000ae04	10006d8d: R_386_32	.text
10006d91:	e8 fc ff ff ff       	call   10006d92 <begin(void*)+0x1bb4>	10006d92: R_386_PC32	CmOpen(char const*)
10006d96:	83 c4 10             	add    esp,0x10
10006d99:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10006d9c:	83 ec 08             	sub    esp,0x8
10006d9f:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006da5:	50                   	push   eax
10006da6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006da9:	e8 fc ff ff ff       	call   10006daa <begin(void*)+0x1bcc>	10006daa: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006dae:	83 c4 10             	add    esp,0x10
10006db1:	83 ec 04             	sub    esp,0x4
10006db4:	8d 95 ca fa ff ff    	lea    edx,[ebp-0x536]
10006dba:	52                   	push   edx
10006dbb:	50                   	push   eax
10006dbc:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006dbf:	e8 fc ff ff ff       	call   10006dc0 <begin(void*)+0x1be2>	10006dc0: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006dc4:	83 c4 10             	add    esp,0x10
10006dc7:	83 ec 08             	sub    esp,0x8
10006dca:	68 42 ae 00 10       	push   0x1000ae42	10006dcb: R_386_32	.text
10006dcf:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006dd5:	50                   	push   eax
10006dd6:	e8 fc ff ff ff       	call   10006dd7 <begin(void*)+0x1bf9>	10006dd7: R_386_PC32	strcpy
10006ddb:	83 c4 10             	add    esp,0x10
10006dde:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006de1:	8b 84 85 c8 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x638]
10006de8:	83 ec 08             	sub    esp,0x8
10006deb:	50                   	push   eax
10006dec:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006df2:	50                   	push   eax
10006df3:	e8 fc ff ff ff       	call   10006df4 <begin(void*)+0x1c16>	10006df4: R_386_PC32	strcat
10006df8:	83 c4 10             	add    esp,0x10
10006dfb:	83 ec 08             	sub    esp,0x8
10006dfe:	68 85 b1 00 10       	push   0x1000b185	10006dff: R_386_32	.text
10006e03:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006e09:	50                   	push   eax
10006e0a:	e8 fc ff ff ff       	call   10006e0b <begin(void*)+0x1c2d>	10006e0b: R_386_PC32	strcat
10006e0f:	83 c4 10             	add    esp,0x10
10006e12:	83 ec 08             	sub    esp,0x8
10006e15:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006e1b:	50                   	push   eax
10006e1c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006e1f:	e8 fc ff ff ff       	call   10006e20 <begin(void*)+0x1c42>	10006e20: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006e24:	83 c4 10             	add    esp,0x10
10006e27:	83 ec 04             	sub    esp,0x4
10006e2a:	8d 95 f8 f8 ff ff    	lea    edx,[ebp-0x708]
10006e30:	52                   	push   edx
10006e31:	50                   	push   eax
10006e32:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006e35:	e8 fc ff ff ff       	call   10006e36 <begin(void*)+0x1c58>	10006e36: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006e3a:	83 c4 10             	add    esp,0x10
10006e3d:	83 ec 0c             	sub    esp,0xc
10006e40:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006e43:	e8 fc ff ff ff       	call   10006e44 <begin(void*)+0x1c66>	10006e44: R_386_PC32	CmClose(Reghive_Tag*)
10006e48:	83 c4 10             	add    esp,0x10
10006e4b:	83 ec 04             	sub    esp,0x4
10006e4e:	68 80 00 00 00       	push   0x80
10006e53:	6a 00                	push   0x0
10006e55:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006e5b:	50                   	push   eax
10006e5c:	e8 fc ff ff ff       	call   10006e5d <begin(void*)+0x1c7f>	10006e5d: R_386_PC32	memset
10006e61:	83 c4 10             	add    esp,0x10
10006e64:	e8 fc ff ff ff       	call   10006e65 <begin(void*)+0x1c87>	10006e65: R_386_PC32	drawBootScreen()
10006e69:	83 ec 08             	sub    esp,0x8
10006e6c:	6a 01                	push   0x1
10006e6e:	68 eb b2 00 10       	push   0x1000b2eb	10006e6f: R_386_32	.text
10006e73:	6a 10                	push   0x10
10006e75:	6a 39                	push   0x39
10006e77:	6a 03                	push   0x3
10006e79:	6a 0c                	push   0xc
10006e7b:	e8 fc ff ff ff       	call   10006e7c <begin(void*)+0x1c9e>	10006e7c: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10006e80:	83 c4 20             	add    esp,0x20
10006e83:	a1 00 00 00 00       	mov    eax,ds:0x0	10006e84: R_386_32	term
10006e88:	83 ec 04             	sub    esp,0x4
10006e8b:	6a 06                	push   0x6
10006e8d:	6a 0e                	push   0xe
10006e8f:	50                   	push   eax
10006e90:	e8 fc ff ff ff       	call   10006e91 <begin(void*)+0x1cb3>	10006e91: R_386_PC32	VgaText::setCursor(int, int)
10006e95:	83 c4 10             	add    esp,0x10
10006e98:	a1 00 00 00 00       	mov    eax,ds:0x0	10006e99: R_386_32	term
10006e9d:	6a 07                	push   0x7
10006e9f:	6a 00                	push   0x0
10006ea1:	68 f4 b2 00 10       	push   0x1000b2f4	10006ea2: R_386_32	.text
10006ea6:	50                   	push   eax
10006ea7:	e8 fc ff ff ff       	call   10006ea8 <begin(void*)+0x1cca>	10006ea8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006eac:	83 c4 10             	add    esp,0x10
10006eaf:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10006eb3:	7e 72                	jle    10006f27 <begin(void*)+0x1d49>
10006eb5:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10006ebc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006ebf:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10006ec2:	7d 63                	jge    10006f27 <begin(void*)+0x1d49>
10006ec4:	a1 00 00 00 00       	mov    eax,ds:0x0	10006ec5: R_386_32	term
10006ec9:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
10006ecc:	83 c2 08             	add    edx,0x8
10006ecf:	83 ec 04             	sub    esp,0x4
10006ed2:	52                   	push   edx
10006ed3:	6a 0f                	push   0xf
10006ed5:	50                   	push   eax
10006ed6:	e8 fc ff ff ff       	call   10006ed7 <begin(void*)+0x1cf9>	10006ed7: R_386_PC32	VgaText::setCursor(int, int)
10006edb:	83 c4 10             	add    esp,0x10
10006ede:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10006ee0: R_386_32	term
10006ee4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006ee7:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006eea:	75 07                	jne    10006ef3 <begin(void*)+0x1d15>
10006eec:	b9 00 00 00 00       	mov    ecx,0x0
10006ef1:	eb 05                	jmp    10006ef8 <begin(void*)+0x1d1a>
10006ef3:	b9 07 00 00 00       	mov    ecx,0x7
10006ef8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006efb:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006efe:	75 07                	jne    10006f07 <begin(void*)+0x1d29>
10006f00:	ba 07 00 00 00       	mov    edx,0x7
10006f05:	eb 05                	jmp    10006f0c <begin(void*)+0x1d2e>
10006f07:	ba 00 00 00 00       	mov    edx,0x0
10006f0c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006f0f:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10006f16:	51                   	push   ecx
10006f17:	52                   	push   edx
10006f18:	50                   	push   eax
10006f19:	53                   	push   ebx
10006f1a:	e8 fc ff ff ff       	call   10006f1b <begin(void*)+0x1d3d>	10006f1b: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006f1f:	83 c4 10             	add    esp,0x10
10006f22:	ff 45 d0             	inc    DWORD PTR [ebp-0x30]
10006f25:	eb 95                	jmp    10006ebc <begin(void*)+0x1cde>
10006f27:	83 ec 0c             	sub    esp,0xc
10006f2a:	68 eb b2 00 10       	push   0x1000b2eb	10006f2b: R_386_32	.text
10006f2f:	6a 0b                	push   0xb
10006f31:	6a 2d                	push   0x2d
10006f33:	6a 0a                	push   0xa
10006f35:	6a 1c                	push   0x1c
10006f37:	e8 fc ff ff ff       	call   10006f38 <begin(void*)+0x1d5a>	10006f38: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10006f3c:	83 c4 20             	add    esp,0x20
10006f3f:	c6 45 cf 01          	mov    BYTE PTR [ebp-0x31],0x1
10006f43:	83 ec 04             	sub    esp,0x4
10006f46:	8d 85 4a fb ff ff    	lea    eax,[ebp-0x4b6]
10006f4c:	50                   	push   eax
10006f4d:	8d 85 f8 f8 ff ff    	lea    eax,[ebp-0x708]
10006f53:	50                   	push   eax
10006f54:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006f5a:	50                   	push   eax
10006f5b:	e8 fc ff ff ff       	call   10006f5c <begin(void*)+0x1d7e>	10006f5c: R_386_PC32	bcrypt_hashpw
10006f60:	83 c4 10             	add    esp,0x10
10006f63:	83 ec 08             	sub    esp,0x8
10006f66:	8d 85 4a fb ff ff    	lea    eax,[ebp-0x4b6]
10006f6c:	50                   	push   eax
10006f6d:	8d 85 ca fa ff ff    	lea    eax,[ebp-0x536]
10006f73:	50                   	push   eax
10006f74:	e8 fc ff ff ff       	call   10006f75 <begin(void*)+0x1d97>	10006f75: R_386_PC32	strcmp
10006f79:	83 c4 10             	add    esp,0x10
10006f7c:	85 c0                	test   eax,eax
10006f7e:	75 04                	jne    10006f84 <begin(void*)+0x1da6>
10006f80:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
10006f84:	83 ec 04             	sub    esp,0x4
10006f87:	68 80 00 00 00       	push   0x80
10006f8c:	6a 00                	push   0x0
10006f8e:	8d 85 4a fb ff ff    	lea    eax,[ebp-0x4b6]
10006f94:	50                   	push   eax
10006f95:	e8 fc ff ff ff       	call   10006f96 <begin(void*)+0x1db8>	10006f96: R_386_PC32	memset
10006f9a:	83 c4 10             	add    esp,0x10
10006f9d:	80 7d cf 00          	cmp    BYTE PTR [ebp-0x31],0x0
10006fa1:	0f 84 9c 02 00 00    	je     10007243 <begin(void*)+0x2065>
10006fa7:	a1 00 00 00 00       	mov    eax,ds:0x0	10006fa8: R_386_32	term
10006fac:	83 ec 04             	sub    esp,0x4
10006faf:	6a 0d                	push   0xd
10006fb1:	6a 1e                	push   0x1e
10006fb3:	50                   	push   eax
10006fb4:	e8 fc ff ff ff       	call   10006fb5 <begin(void*)+0x1dd7>	10006fb5: R_386_PC32	VgaText::setCursor(int, int)
10006fb9:	83 c4 10             	add    esp,0x10
10006fbc:	a1 00 00 00 00       	mov    eax,ds:0x0	10006fbd: R_386_32	term
10006fc1:	83 ec 08             	sub    esp,0x8
10006fc4:	68 24 b3 00 10       	push   0x1000b324	10006fc5: R_386_32	.text
10006fc9:	50                   	push   eax
10006fca:	e8 fc ff ff ff       	call   10006fcb <begin(void*)+0x1ded>	10006fcb: R_386_PC32	VgaText::puts(char const*)
10006fcf:	83 c4 10             	add    esp,0x10
10006fd2:	a1 00 00 00 00       	mov    eax,ds:0x0	10006fd3: R_386_32	term
10006fd7:	83 ec 04             	sub    esp,0x4
10006fda:	6a 0e                	push   0xe
10006fdc:	6a 1e                	push   0x1e
10006fde:	50                   	push   eax
10006fdf:	e8 fc ff ff ff       	call   10006fe0 <begin(void*)+0x1e02>	10006fe0: R_386_PC32	VgaText::setCursor(int, int)
10006fe4:	83 c4 10             	add    esp,0x10
10006fe7:	a1 00 00 00 00       	mov    eax,ds:0x0	10006fe8: R_386_32	term
10006fec:	83 ec 08             	sub    esp,0x8
10006fef:	68 4e b3 00 10       	push   0x1000b34e	10006ff0: R_386_32	.text
10006ff4:	50                   	push   eax
10006ff5:	e8 fc ff ff ff       	call   10006ff6 <begin(void*)+0x1e18>	10006ff6: R_386_PC32	VgaText::puts(char const*)
10006ffa:	83 c4 10             	add    esp,0x10
10006ffd:	a1 00 00 00 00       	mov    eax,ds:0x0	10006ffe: R_386_32	term
10007002:	83 ec 04             	sub    esp,0x4
10007005:	6a 10                	push   0x10
10007007:	6a 1e                	push   0x1e
10007009:	50                   	push   eax
1000700a:	e8 fc ff ff ff       	call   1000700b <begin(void*)+0x1e2d>	1000700b: R_386_PC32	VgaText::setCursor(int, int)
1000700f:	83 c4 10             	add    esp,0x10
10007012:	a1 00 00 00 00       	mov    eax,ds:0x0	10007013: R_386_32	term
10007017:	6a 07                	push   0x7
10007019:	6a 00                	push   0x0
1000701b:	68 50 a9 00 10       	push   0x1000a950	1000701c: R_386_32	.text
10007020:	50                   	push   eax
10007021:	e8 fc ff ff ff       	call   10007022 <begin(void*)+0x1e44>	10007022: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10007026:	83 c4 10             	add    esp,0x10
10007029:	a1 00 00 00 00       	mov    eax,ds:0x0	1000702a: R_386_32	term
1000702e:	83 ec 08             	sub    esp,0x8
10007031:	6a 1e                	push   0x1e
10007033:	50                   	push   eax
10007034:	e8 fc ff ff ff       	call   10007035 <begin(void*)+0x1e57>	10007035: R_386_PC32	VgaText::setCursorX(int)
10007039:	83 c4 10             	add    esp,0x10
1000703c:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
10007043:	83 ec 0c             	sub    esp,0xc
10007046:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
1000704c:	50                   	push   eax
1000704d:	e8 fc ff ff ff       	call   1000704e <begin(void*)+0x1e70>	1000704e: R_386_PC32	strlen
10007052:	83 c4 10             	add    esp,0x10
10007055:	89 c2                	mov    edx,eax
10007057:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
1000705a:	39 c2                	cmp    edx,eax
1000705c:	76 1c                	jbe    1000707a <begin(void*)+0x1e9c>
1000705e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000705f: R_386_32	term
10007063:	6a 07                	push   0x7
10007065:	6a 00                	push   0x0
10007067:	68 7c a9 00 10       	push   0x1000a97c	10007068: R_386_32	.text
1000706c:	50                   	push   eax
1000706d:	e8 fc ff ff ff       	call   1000706e <begin(void*)+0x1e90>	1000706e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10007072:	83 c4 10             	add    esp,0x10
10007075:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
10007078:	eb c9                	jmp    10007043 <begin(void*)+0x1e65>
1000707a:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	1000707c: R_386_32	term
10007080:	83 ec 0c             	sub    esp,0xc
10007083:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10007089:	50                   	push   eax
1000708a:	e8 fc ff ff ff       	call   1000708b <begin(void*)+0x1ead>	1000708b: R_386_PC32	strlen
1000708f:	83 c4 10             	add    esp,0x10
10007092:	83 c0 1e             	add    eax,0x1e
10007095:	83 ec 04             	sub    esp,0x4
10007098:	6a 10                	push   0x10
1000709a:	50                   	push   eax
1000709b:	53                   	push   ebx
1000709c:	e8 fc ff ff ff       	call   1000709d <begin(void*)+0x1ebf>	1000709d: R_386_PC32	VgaText::setCursor(int, int)
100070a1:	83 c4 10             	add    esp,0x10
100070a4:	a0 00 00 00 00       	mov    al,ds:0x0	100070a5: R_386_32	installKey
100070a9:	84 c0                	test   al,al
100070ab:	0f 94 c0             	sete   al
100070ae:	84 c0                	test   al,al
100070b0:	74 02                	je     100070b4 <begin(void*)+0x1ed6>
100070b2:	eb f0                	jmp    100070a4 <begin(void*)+0x1ec6>
100070b4:	a1 00 00 00 00       	mov    eax,ds:0x0	100070b5: R_386_32	term
100070b9:	05 82 00 00 00       	add    eax,0x82
100070be:	83 ec 04             	sub    esp,0x4
100070c1:	6a 10                	push   0x10
100070c3:	6a 00                	push   0x0
100070c5:	50                   	push   eax
100070c6:	e8 fc ff ff ff       	call   100070c7 <begin(void*)+0x1ee9>	100070c7: R_386_PC32	memset
100070cb:	83 c4 10             	add    esp,0x10
100070ce:	a1 00 00 00 00       	mov    eax,ds:0x0	100070cf: R_386_32	term
100070d3:	05 02 01 00 00       	add    eax,0x102
100070d8:	83 ec 04             	sub    esp,0x4
100070db:	6a 10                	push   0x10
100070dd:	6a 00                	push   0x0
100070df:	50                   	push   eax
100070e0:	e8 fc ff ff ff       	call   100070e1 <begin(void*)+0x1f03>	100070e1: R_386_PC32	memset
100070e5:	83 c4 10             	add    esp,0x10
100070e8:	a0 00 00 00 00       	mov    al,ds:0x0	100070e9: R_386_32	installKey
100070ed:	3c 0a                	cmp    al,0xa
100070ef:	0f 94 c0             	sete   al
100070f2:	84 c0                	test   al,al
100070f4:	0f 84 88 00 00 00    	je     10007182 <begin(void*)+0x1fa4>
100070fa:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100070fc: R_386_32	installKey
10007101:	83 ec 04             	sub    esp,0x4
10007104:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000710a:	50                   	push   eax
1000710b:	8d 85 f8 f8 ff ff    	lea    eax,[ebp-0x708]
10007111:	50                   	push   eax
10007112:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10007118:	50                   	push   eax
10007119:	e8 fc ff ff ff       	call   1000711a <begin(void*)+0x1f3c>	1000711a: R_386_PC32	bcrypt_hashpw
1000711e:	83 c4 10             	add    esp,0x10
10007121:	8d 85 f8 f8 ff ff    	lea    eax,[ebp-0x708]
10007127:	50                   	push   eax
10007128:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000712e:	50                   	push   eax
1000712f:	8d 85 ca fa ff ff    	lea    eax,[ebp-0x536]
10007135:	50                   	push   eax
10007136:	68 68 b3 00 10       	push   0x1000b368	10007137: R_386_32	.text
1000713b:	e8 fc ff ff ff       	call   1000713c <begin(void*)+0x1f5e>	1000713c: R_386_PC32	Dbg::kprintf(char const*, ...)
10007140:	83 c4 10             	add    esp,0x10
10007143:	83 ec 08             	sub    esp,0x8
10007146:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000714c:	50                   	push   eax
1000714d:	8d 85 ca fa ff ff    	lea    eax,[ebp-0x536]
10007153:	50                   	push   eax
10007154:	e8 fc ff ff ff       	call   10007155 <begin(void*)+0x1f77>	10007155: R_386_PC32	strcmp
10007159:	83 c4 10             	add    esp,0x10
1000715c:	85 c0                	test   eax,eax
1000715e:	0f 84 de 00 00 00    	je     10007242 <begin(void*)+0x2064>
10007164:	83 ec 04             	sub    esp,0x4
10007167:	68 80 00 00 00       	push   0x80
1000716c:	6a 00                	push   0x0
1000716e:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10007174:	50                   	push   eax
10007175:	e8 fc ff ff ff       	call   10007176 <begin(void*)+0x1f98>	10007176: R_386_PC32	memset
1000717a:	83 c4 10             	add    esp,0x10
1000717d:	e9 b4 00 00 00       	jmp    10007236 <begin(void*)+0x2058>
10007182:	a0 00 00 00 00       	mov    al,ds:0x0	10007183: R_386_32	installKey
10007187:	3c 1f                	cmp    al,0x1f
10007189:	7e 0d                	jle    10007198 <begin(void*)+0x1fba>
1000718b:	a0 00 00 00 00       	mov    al,ds:0x0	1000718c: R_386_32	installKey
10007190:	3c 7f                	cmp    al,0x7f
10007192:	74 04                	je     10007198 <begin(void*)+0x1fba>
10007194:	b0 01                	mov    al,0x1
10007196:	eb 02                	jmp    1000719a <begin(void*)+0x1fbc>
10007198:	b0 00                	mov    al,0x0
1000719a:	84 c0                	test   al,al
1000719c:	74 44                	je     100071e2 <begin(void*)+0x2004>
1000719e:	a0 00 00 00 00       	mov    al,ds:0x0	1000719f: R_386_32	installKey
100071a3:	88 85 ca fc ff ff    	mov    BYTE PTR [ebp-0x336],al
100071a9:	c6 85 cb fc ff ff 00 	mov    BYTE PTR [ebp-0x335],0x0
100071b0:	83 ec 0c             	sub    esp,0xc
100071b3:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
100071b9:	50                   	push   eax
100071ba:	e8 fc ff ff ff       	call   100071bb <begin(void*)+0x1fdd>	100071bb: R_386_PC32	strlen
100071bf:	83 c4 10             	add    esp,0x10
100071c2:	83 f8 22             	cmp    eax,0x22
100071c5:	77 6f                	ja     10007236 <begin(void*)+0x2058>
100071c7:	83 ec 08             	sub    esp,0x8
100071ca:	8d 85 ca fc ff ff    	lea    eax,[ebp-0x336]
100071d0:	50                   	push   eax
100071d1:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
100071d7:	50                   	push   eax
100071d8:	e8 fc ff ff ff       	call   100071d9 <begin(void*)+0x1ffb>	100071d9: R_386_PC32	strcat
100071dd:	83 c4 10             	add    esp,0x10
100071e0:	eb 54                	jmp    10007236 <begin(void*)+0x2058>
100071e2:	a0 00 00 00 00       	mov    al,ds:0x0	100071e3: R_386_32	installKey
100071e7:	3c 08                	cmp    al,0x8
100071e9:	0f 94 c0             	sete   al
100071ec:	84 c0                	test   al,al
100071ee:	74 33                	je     10007223 <begin(void*)+0x2045>
100071f0:	83 ec 0c             	sub    esp,0xc
100071f3:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
100071f9:	50                   	push   eax
100071fa:	e8 fc ff ff ff       	call   100071fb <begin(void*)+0x201d>	100071fb: R_386_PC32	strlen
100071ff:	83 c4 10             	add    esp,0x10
10007202:	85 c0                	test   eax,eax
10007204:	74 30                	je     10007236 <begin(void*)+0x2058>
10007206:	83 ec 0c             	sub    esp,0xc
10007209:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
1000720f:	50                   	push   eax
10007210:	e8 fc ff ff ff       	call   10007211 <begin(void*)+0x2033>	10007211: R_386_PC32	strlen
10007215:	83 c4 10             	add    esp,0x10
10007218:	48                   	dec    eax
10007219:	c6 84 05 4a fa ff ff 00 	mov    BYTE PTR [ebp+eax*1-0x5b6],0x0
10007221:	eb 13                	jmp    10007236 <begin(void*)+0x2058>
10007223:	a0 00 00 00 00       	mov    al,ds:0x0	10007224: R_386_32	installKey
10007228:	3c 1b                	cmp    al,0x1b
1000722a:	0f 94 c0             	sete   al
1000722d:	84 c0                	test   al,al
1000722f:	74 05                	je     10007236 <begin(void*)+0x2058>
10007231:	e9 c7 f8 ff ff       	jmp    10006afd <begin(void*)+0x191f>
10007236:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007238: R_386_32	installKey
1000723d:	e9 5b fd ff ff       	jmp    10006f9d <begin(void*)+0x1dbf>
10007242:	90                   	nop
10007243:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10007245: R_386_32	guiKeyboardHandler
1000724d:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
10007254:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007257:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
1000725a:	7d 69                	jge    100072c5 <begin(void*)+0x20e7>
1000725c:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
1000725f:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10007266:	85 c0                	test   eax,eax
10007268:	74 24                	je     1000728e <begin(void*)+0x20b0>
1000726a:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
1000726d:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10007274:	83 ec 0c             	sub    esp,0xc
10007277:	50                   	push   eax
10007278:	e8 fc ff ff ff       	call   10007279 <begin(void*)+0x209b>	10007279: R_386_PC32	free
1000727d:	83 c4 10             	add    esp,0x10
10007280:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007283:	c7 84 85 48 f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x6b8],0x0
1000728e:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007291:	8b 84 85 c8 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x638]
10007298:	85 c0                	test   eax,eax
1000729a:	74 24                	je     100072c0 <begin(void*)+0x20e2>
1000729c:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
1000729f:	8b 84 85 c8 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x638]
100072a6:	83 ec 0c             	sub    esp,0xc
100072a9:	50                   	push   eax
100072aa:	e8 fc ff ff ff       	call   100072ab <begin(void*)+0x20cd>	100072ab: R_386_PC32	free
100072af:	83 c4 10             	add    esp,0x10
100072b2:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100072b5:	c7 84 85 c8 f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x638],0x0
100072c0:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
100072c3:	eb 8f                	jmp    10007254 <begin(void*)+0x2076>
100072c5:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100072c7: R_386_32	VgaText::hiddenOut
100072cc:	83 ec 0c             	sub    esp,0xc
100072cf:	68 24 07 00 00       	push   0x724
100072d4:	e8 fc ff ff ff       	call   100072d5 <begin(void*)+0x20f7>	100072d5: R_386_PC32	operator new(unsigned long)
100072d9:	83 c4 10             	add    esp,0x10
100072dc:	89 c3                	mov    ebx,eax
100072de:	6a 00                	push   0x0
100072e0:	6a 00                	push   0x0
100072e2:	68 da ad 00 10       	push   0x1000adda	100072e3: R_386_32	.text
100072e7:	53                   	push   ebx
100072e8:	e8 fc ff ff ff       	call   100072e9 <begin(void*)+0x210b>	100072e9: R_386_PC32	Process::Process(char const*, Process*, char**)
100072ed:	83 c4 10             	add    esp,0x10
100072f0:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
100072f3:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
100072f6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
100072fc:	83 ec 0c             	sub    esp,0xc
100072ff:	50                   	push   eax
10007300:	e8 fc ff ff ff       	call   10007301 <begin(void*)+0x2123>	10007301: R_386_PC32	setActiveTerminal(VgaText*)
10007305:	83 c4 10             	add    esp,0x10
10007308:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
1000730f:	83 7d c0 18          	cmp    DWORD PTR [ebp-0x40],0x18
10007313:	7f 2e                	jg     10007343 <begin(void*)+0x2165>
10007315:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [ebp-0x44],0x0
1000731c:	83 7d bc 4f          	cmp    DWORD PTR [ebp-0x44],0x4f
10007320:	7f 1c                	jg     1000733e <begin(void*)+0x2160>
10007322:	83 ec 0c             	sub    esp,0xc
10007325:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10007328:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000732b:	6a 00                	push   0x0
1000732d:	6a 07                	push   0x7
1000732f:	6a 20                	push   0x20
10007331:	e8 fc ff ff ff       	call   10007332 <begin(void*)+0x2154>	10007332: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
10007336:	83 c4 20             	add    esp,0x20
10007339:	ff 45 bc             	inc    DWORD PTR [ebp-0x44]
1000733c:	eb de                	jmp    1000731c <begin(void*)+0x213e>
1000733e:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
10007341:	eb cc                	jmp    1000730f <begin(void*)+0x2131>
10007343:	83 ec 0c             	sub    esp,0xc
10007346:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
10007349:	e8 fc ff ff ff       	call   1000734a <begin(void*)+0x216c>	1000734a: R_386_PC32	Process::createUserThread()
1000734e:	83 c4 10             	add    esp,0x10
10007351:	8b 85 d0 fc ff ff    	mov    eax,DWORD PTR [ebp-0x330]
10007357:	8b 95 d4 fc ff ff    	mov    edx,DWORD PTR [ebp-0x32c]
1000735d:	89 c1                	mov    ecx,eax
1000735f:	83 f1 01             	xor    ecx,0x1
10007362:	89 8d a0 f8 ff ff    	mov    DWORD PTR [ebp-0x760],ecx
10007368:	89 d0                	mov    eax,edx
1000736a:	80 f4 00             	xor    ah,0x0
1000736d:	89 85 a4 f8 ff ff    	mov    DWORD PTR [ebp-0x75c],eax
10007373:	8b b5 a0 f8 ff ff    	mov    esi,DWORD PTR [ebp-0x760]
10007379:	8b bd a4 f8 ff ff    	mov    edi,DWORD PTR [ebp-0x75c]
1000737f:	89 f8                	mov    eax,edi
10007381:	09 f0                	or     eax,esi
10007383:	85 c0                	test   eax,eax
10007385:	75 17                	jne    1000739e <begin(void*)+0x21c0>
10007387:	a1 00 00 00 00       	mov    eax,ds:0x0	10007388: R_386_32	kernelProcess
1000738c:	6a 01                	push   0x1
1000738e:	6a 00                	push   0x0
10007390:	68 00 00 00 00       	push   0x0	10007391: R_386_32	startGUI(void*)
10007395:	50                   	push   eax
10007396:	e8 fc ff ff ff       	call   10007397 <begin(void*)+0x21b9>	10007397: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
1000739b:	83 c4 10             	add    esp,0x10
1000739e:	8b 85 d0 fc ff ff    	mov    eax,DWORD PTR [ebp-0x330]
100073a4:	8b 95 d4 fc ff ff    	mov    edx,DWORD PTR [ebp-0x32c]
100073aa:	89 c6                	mov    esi,eax
100073ac:	83 f6 02             	xor    esi,0x2
100073af:	89 b5 98 f8 ff ff    	mov    DWORD PTR [ebp-0x768],esi
100073b5:	89 d0                	mov    eax,edx
100073b7:	80 f4 00             	xor    ah,0x0
100073ba:	89 85 9c f8 ff ff    	mov    DWORD PTR [ebp-0x764],eax
100073c0:	8b b5 98 f8 ff ff    	mov    esi,DWORD PTR [ebp-0x768]
100073c6:	8b bd 9c f8 ff ff    	mov    edi,DWORD PTR [ebp-0x764]
100073cc:	89 f8                	mov    eax,edi
100073ce:	09 f0                	or     eax,esi
100073d0:	85 c0                	test   eax,eax
100073d2:	75 17                	jne    100073eb <begin(void*)+0x220d>
100073d4:	a1 00 00 00 00       	mov    eax,ds:0x0	100073d5: R_386_32	kernelProcess
100073d9:	6a 01                	push   0x1
100073db:	6a 00                	push   0x0
100073dd:	68 00 00 00 00       	push   0x0	100073de: R_386_32	startGUIVESA(void*)
100073e2:	50                   	push   eax
100073e3:	e8 fc ff ff ff       	call   100073e4 <begin(void*)+0x2206>	100073e4: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
100073e8:	83 c4 10             	add    esp,0x10
100073eb:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
100073ee:	8b 00                	mov    eax,DWORD PTR [eax]
100073f0:	83 ec 04             	sub    esp,0x4
100073f3:	6a 00                	push   0x0
100073f5:	8d 95 cc fc ff ff    	lea    edx,[ebp-0x334]
100073fb:	52                   	push   edx
100073fc:	50                   	push   eax
100073fd:	e8 fc ff ff ff       	call   100073fe <begin(void*)+0x2220>	100073fe: R_386_PC32	waitTask(int, int*, int)
10007402:	83 c4 10             	add    esp,0x10
10007405:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10007407: R_386_32	Krnl::computer
1000740b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000740c: R_386_32	Krnl::computer
10007410:	8b 00                	mov    eax,DWORD PTR [eax]
10007412:	83 c0 0c             	add    eax,0xc
10007415:	8b 00                	mov    eax,DWORD PTR [eax]
10007417:	6a 00                	push   0x0
10007419:	6a 00                	push   0x0
1000741b:	6a 00                	push   0x0
1000741d:	52                   	push   edx
1000741e:	ff d0                	call   eax
10007420:	83 c4 10             	add    esp,0x10
10007423:	83 ec 0c             	sub    esp,0xc
10007426:	68 88 b3 00 10       	push   0x1000b388	10007427: R_386_32	.text
1000742b:	e8 fc ff ff ff       	call   1000742c <begin(void*)+0x224e>	1000742c: R_386_PC32	KePanic(char const*)
10007430:	83 c4 10             	add    esp,0x10
10007433:	eb fe                	jmp    10007433 <begin(void*)+0x2255>

10007435 <clean>:
10007435:	57                   	push   edi
10007436:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
1000743a:	b0 00                	mov    al,0x0
1000743c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10007440:	f3 aa                	rep stos BYTE PTR es:[edi],al
10007442:	5f                   	pop    edi
10007443:	c3                   	ret    

10007444 <BF_decode>:
10007444:	55                   	push   ebp
10007445:	57                   	push   edi
10007446:	56                   	push   esi
10007447:	53                   	push   ebx
10007448:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000744c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10007450:	89 d6                	mov    esi,edx
10007452:	03 74 24 1c          	add    esi,DWORD PTR [esp+0x1c]
10007456:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
10007459:	83 e8 20             	sub    eax,0x20
1000745c:	83 f8 5f             	cmp    eax,0x5f
1000745f:	0f 87 a3 00 00 00    	ja     10007508 <BF_decode+0xc4>
10007465:	8a 80 80 c5 00 10    	mov    al,BYTE PTR [eax+0x1000c580]	10007467: R_386_32	.data
1000746b:	3c 3f                	cmp    al,0x3f
1000746d:	0f 87 9f 00 00 00    	ja     10007512 <BF_decode+0xce>
10007473:	0f b6 4b 01          	movzx  ecx,BYTE PTR [ebx+0x1]
10007477:	83 e9 20             	sub    ecx,0x20
1000747a:	83 f9 5f             	cmp    ecx,0x5f
1000747d:	0f 87 96 00 00 00    	ja     10007519 <BF_decode+0xd5>
10007483:	8a 89 80 c5 00 10    	mov    cl,BYTE PTR [ecx+0x1000c580]	10007485: R_386_32	.data
10007489:	0f b6 f9             	movzx  edi,cl
1000748c:	83 ff 3f             	cmp    edi,0x3f
1000748f:	0f 87 8b 00 00 00    	ja     10007520 <BF_decode+0xdc>
10007495:	c1 e0 02             	shl    eax,0x2
10007498:	c1 ef 04             	shr    edi,0x4
1000749b:	09 f8                	or     eax,edi
1000749d:	88 02                	mov    BYTE PTR [edx],al
1000749f:	89 d7                	mov    edi,edx
100074a1:	8d 42 01             	lea    eax,[edx+0x1]
100074a4:	39 c6                	cmp    esi,eax
100074a6:	76 7f                	jbe    10007527 <BF_decode+0xe3>
100074a8:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
100074ac:	83 e8 20             	sub    eax,0x20
100074af:	83 f8 5f             	cmp    eax,0x5f
100074b2:	77 7a                	ja     1000752e <BF_decode+0xea>
100074b4:	8a 80 80 c5 00 10    	mov    al,BYTE PTR [eax+0x1000c580]	100074b6: R_386_32	.data
100074ba:	0f b6 e8             	movzx  ebp,al
100074bd:	83 fd 3f             	cmp    ebp,0x3f
100074c0:	77 73                	ja     10007535 <BF_decode+0xf1>
100074c2:	c1 e1 04             	shl    ecx,0x4
100074c5:	c1 ed 02             	shr    ebp,0x2
100074c8:	09 e9                	or     ecx,ebp
100074ca:	88 4a 01             	mov    BYTE PTR [edx+0x1],cl
100074cd:	8d 52 02             	lea    edx,[edx+0x2]
100074d0:	39 d6                	cmp    esi,edx
100074d2:	76 68                	jbe    1000753c <BF_decode+0xf8>
100074d4:	83 c3 04             	add    ebx,0x4
100074d7:	0f b6 53 ff          	movzx  edx,BYTE PTR [ebx-0x1]
100074db:	83 ea 20             	sub    edx,0x20
100074de:	83 fa 5f             	cmp    edx,0x5f
100074e1:	77 60                	ja     10007543 <BF_decode+0xff>
100074e3:	8a 8a 80 c5 00 10    	mov    cl,BYTE PTR [edx+0x1000c580]	100074e5: R_386_32	.data
100074e9:	80 f9 3f             	cmp    cl,0x3f
100074ec:	77 5c                	ja     1000754a <BF_decode+0x106>
100074ee:	8d 57 03             	lea    edx,[edi+0x3]
100074f1:	c1 e0 06             	shl    eax,0x6
100074f4:	09 c1                	or     ecx,eax
100074f6:	88 4a ff             	mov    BYTE PTR [edx-0x1],cl
100074f9:	39 d6                	cmp    esi,edx
100074fb:	0f 87 55 ff ff ff    	ja     10007456 <BF_decode+0x12>
10007501:	b8 00 00 00 00       	mov    eax,0x0
10007506:	eb 05                	jmp    1000750d <BF_decode+0xc9>
10007508:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000750d:	5b                   	pop    ebx
1000750e:	5e                   	pop    esi
1000750f:	5f                   	pop    edi
10007510:	5d                   	pop    ebp
10007511:	c3                   	ret    
10007512:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007517:	eb f4                	jmp    1000750d <BF_decode+0xc9>
10007519:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000751e:	eb ed                	jmp    1000750d <BF_decode+0xc9>
10007520:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007525:	eb e6                	jmp    1000750d <BF_decode+0xc9>
10007527:	b8 00 00 00 00       	mov    eax,0x0
1000752c:	eb df                	jmp    1000750d <BF_decode+0xc9>
1000752e:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007533:	eb d8                	jmp    1000750d <BF_decode+0xc9>
10007535:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000753a:	eb d1                	jmp    1000750d <BF_decode+0xc9>
1000753c:	b8 00 00 00 00       	mov    eax,0x0
10007541:	eb ca                	jmp    1000750d <BF_decode+0xc9>
10007543:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007548:	eb c3                	jmp    1000750d <BF_decode+0xc9>
1000754a:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000754f:	eb bc                	jmp    1000750d <BF_decode+0xc9>

10007551 <BF_encode>:
10007551:	55                   	push   ebp
10007552:	57                   	push   edi
10007553:	56                   	push   esi
10007554:	53                   	push   ebx
10007555:	83 ec 04             	sub    esp,0x4
10007558:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
1000755c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10007560:	89 c7                	mov    edi,eax
10007562:	03 7c 24 20          	add    edi,DWORD PTR [esp+0x20]
10007566:	89 3c 24             	mov    DWORD PTR [esp],edi
10007569:	0f b6 10             	movzx  edx,BYTE PTR [eax]
1000756c:	89 d6                	mov    esi,edx
1000756e:	c1 ee 02             	shr    esi,0x2
10007571:	8a 9e 20 c5 00 10    	mov    bl,BYTE PTR [esi+0x1000c520]	10007573: R_386_32	.data
10007577:	88 19                	mov    BYTE PTR [ecx],bl
10007579:	c1 e2 04             	shl    edx,0x4
1000757c:	83 e2 30             	and    edx,0x30
1000757f:	89 c7                	mov    edi,eax
10007581:	8d 70 01             	lea    esi,[eax+0x1]
10007584:	39 34 24             	cmp    DWORD PTR [esp],esi
10007587:	76 51                	jbe    100075da <BF_encode+0x89>
10007589:	0f b6 70 01          	movzx  esi,BYTE PTR [eax+0x1]
1000758d:	89 f5                	mov    ebp,esi
1000758f:	c1 ed 04             	shr    ebp,0x4
10007592:	09 ea                	or     edx,ebp
10007594:	8a 9a 20 c5 00 10    	mov    bl,BYTE PTR [edx+0x1000c520]	10007596: R_386_32	.data
1000759a:	88 59 01             	mov    BYTE PTR [ecx+0x1],bl
1000759d:	c1 e6 02             	shl    esi,0x2
100075a0:	83 e6 3c             	and    esi,0x3c
100075a3:	83 c0 02             	add    eax,0x2
100075a6:	39 04 24             	cmp    DWORD PTR [esp],eax
100075a9:	76 40                	jbe    100075eb <BF_encode+0x9a>
100075ab:	8d 47 03             	lea    eax,[edi+0x3]
100075ae:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
100075b1:	0f b6 d3             	movzx  edx,bl
100075b4:	c1 ea 06             	shr    edx,0x6
100075b7:	09 f2                	or     edx,esi
100075b9:	8a 92 20 c5 00 10    	mov    dl,BYTE PTR [edx+0x1000c520]	100075bb: R_386_32	.data
100075bf:	88 51 02             	mov    BYTE PTR [ecx+0x2],dl
100075c2:	83 c1 04             	add    ecx,0x4
100075c5:	89 da                	mov    edx,ebx
100075c7:	83 e2 3f             	and    edx,0x3f
100075ca:	8a 9a 20 c5 00 10    	mov    bl,BYTE PTR [edx+0x1000c520]	100075cc: R_386_32	.data
100075d0:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
100075d3:	39 04 24             	cmp    DWORD PTR [esp],eax
100075d6:	77 91                	ja     10007569 <BF_encode+0x18>
100075d8:	eb 09                	jmp    100075e3 <BF_encode+0x92>
100075da:	8a 82 20 c5 00 10    	mov    al,BYTE PTR [edx+0x1000c520]	100075dc: R_386_32	.data
100075e0:	88 41 01             	mov    BYTE PTR [ecx+0x1],al
100075e3:	83 c4 04             	add    esp,0x4
100075e6:	5b                   	pop    ebx
100075e7:	5e                   	pop    esi
100075e8:	5f                   	pop    edi
100075e9:	5d                   	pop    ebp
100075ea:	c3                   	ret    
100075eb:	8a 86 20 c5 00 10    	mov    al,BYTE PTR [esi+0x1000c520]	100075ed: R_386_32	.data
100075f1:	88 41 02             	mov    BYTE PTR [ecx+0x2],al
100075f4:	eb ed                	jmp    100075e3 <BF_encode+0x92>

100075f6 <BF_swap>:
100075f6:	53                   	push   ebx
100075f7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100075fb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
100075ff:	80 3d e0 c5 00 10 00 	cmp    BYTE PTR ds:0x1000c5e0,0x0	10007601: R_386_32	.data
10007606:	74 23                	je     1000762b <BF_swap+0x35>
10007608:	8b 01                	mov    eax,DWORD PTR [ecx]
1000760a:	c1 c0 10             	rol    eax,0x10
1000760d:	83 c1 04             	add    ecx,0x4
10007610:	89 c2                	mov    edx,eax
10007612:	c1 e2 08             	shl    edx,0x8
10007615:	81 e2 00 ff 00 ff    	and    edx,0xff00ff00
1000761b:	c1 e8 08             	shr    eax,0x8
1000761e:	25 ff 00 ff 00       	and    eax,0xff00ff
10007623:	09 d0                	or     eax,edx
10007625:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
10007628:	4b                   	dec    ebx
10007629:	75 dd                	jne    10007608 <BF_swap+0x12>
1000762b:	5b                   	pop    ebx
1000762c:	c3                   	ret    

1000762d <BF_set_key>:
1000762d:	55                   	push   ebp
1000762e:	57                   	push   edi
1000762f:	56                   	push   esi
10007630:	53                   	push   ebx
10007631:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10007635:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
10007639:	89 f9                	mov    ecx,edi
1000763b:	be 00 00 00 00       	mov    esi,0x0
10007640:	eb 2d                	jmp    1000766f <BF_set_key+0x42>
10007642:	89 f9                	mov    ecx,edi
10007644:	4a                   	dec    edx
10007645:	74 10                	je     10007657 <BF_set_key+0x2a>
10007647:	c1 e0 08             	shl    eax,0x8
1000764a:	0f b6 19             	movzx  ebx,BYTE PTR [ecx]
1000764d:	09 d8                	or     eax,ebx
1000764f:	80 39 00             	cmp    BYTE PTR [ecx],0x0
10007652:	74 ee                	je     10007642 <BF_set_key+0x15>
10007654:	41                   	inc    ecx
10007655:	eb ed                	jmp    10007644 <BF_set_key+0x17>
10007657:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
1000765b:	89 04 b2             	mov    DWORD PTR [edx+esi*4],eax
1000765e:	33 04 b5 c0 c4 00 10 	xor    eax,DWORD PTR [esi*4+0x1000c4c0]	10007661: R_386_32	.data
10007665:	89 44 b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],eax
10007669:	46                   	inc    esi
1000766a:	83 fe 12             	cmp    esi,0x12
1000766d:	74 0c                	je     1000767b <BF_set_key+0x4e>
1000766f:	ba 04 00 00 00       	mov    edx,0x4
10007674:	b8 00 00 00 00       	mov    eax,0x0
10007679:	eb cc                	jmp    10007647 <BF_set_key+0x1a>
1000767b:	5b                   	pop    ebx
1000767c:	5e                   	pop    esi
1000767d:	5f                   	pop    edi
1000767e:	5d                   	pop    ebp
1000767f:	c3                   	ret    

10007680 <_crypt_blowfish_rn>:
10007680:	55                   	push   ebp
10007681:	57                   	push   edi
10007682:	56                   	push   esi
10007683:	53                   	push   ebx
10007684:	81 ec 00 11 00 00    	sub    esp,0x1100
1000768a:	83 bc 24 20 11 00 00 3c 	cmp    DWORD PTR [esp+0x1120],0x3c
10007692:	0f 8e 9e 2d 00 00    	jle    1000a436 <_crypt_blowfish_rn+0x2db6>
10007698:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
1000769f:	80 38 24             	cmp    BYTE PTR [eax],0x24
100076a2:	0f 85 a8 2d 00 00    	jne    1000a450 <_crypt_blowfish_rn+0x2dd0>
100076a8:	80 78 01 32          	cmp    BYTE PTR [eax+0x1],0x32
100076ac:	0f 85 9e 2d 00 00    	jne    1000a450 <_crypt_blowfish_rn+0x2dd0>
100076b2:	80 78 02 61          	cmp    BYTE PTR [eax+0x2],0x61
100076b6:	0f 85 94 2d 00 00    	jne    1000a450 <_crypt_blowfish_rn+0x2dd0>
100076bc:	80 78 03 24          	cmp    BYTE PTR [eax+0x3],0x24
100076c0:	0f 85 8a 2d 00 00    	jne    1000a450 <_crypt_blowfish_rn+0x2dd0>
100076c6:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
100076c9:	8d 50 d0             	lea    edx,[eax-0x30]
100076cc:	80 fa 03             	cmp    dl,0x3
100076cf:	0f 87 7b 2d 00 00    	ja     1000a450 <_crypt_blowfish_rn+0x2dd0>
100076d5:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
100076dc:	8a 53 05             	mov    dl,BYTE PTR [ebx+0x5]
100076df:	8d 4a d0             	lea    ecx,[edx-0x30]
100076e2:	80 f9 09             	cmp    cl,0x9
100076e5:	0f 87 65 2d 00 00    	ja     1000a450 <_crypt_blowfish_rn+0x2dd0>
100076eb:	3c 33                	cmp    al,0x33
100076ed:	0f 84 54 2d 00 00    	je     1000a447 <_crypt_blowfish_rn+0x2dc7>
100076f3:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
100076fa:	80 7b 06 24          	cmp    BYTE PTR [ebx+0x6],0x24
100076fe:	0f 85 4c 2d 00 00    	jne    1000a450 <_crypt_blowfish_rn+0x2dd0>
10007704:	0f be c0             	movsx  eax,al
10007707:	8d 84 80 10 ff ff ff 	lea    eax,[eax+eax*4-0xf0]
1000770e:	01 c0                	add    eax,eax
10007710:	0f be d2             	movsx  edx,dl
10007713:	8d 4c 10 d0          	lea    ecx,[eax+edx*1-0x30]
10007717:	b8 01 00 00 00       	mov    eax,0x1
1000771c:	d3 e0                	shl    eax,cl
1000771e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10007722:	83 f8 0f             	cmp    eax,0xf
10007725:	0f 86 3f 2d 00 00    	jbe    1000a46a <_crypt_blowfish_rn+0x2dea>
1000772b:	6a 10                	push   0x10
1000772d:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
10007734:	83 c0 07             	add    eax,0x7
10007737:	50                   	push   eax
10007738:	8d 84 24 f0 10 00 00 	lea    eax,[esp+0x10f0]
1000773f:	50                   	push   eax
10007740:	e8 ff fc ff ff       	call   10007444 <BF_decode>
10007745:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10007749:	83 c4 0c             	add    esp,0xc
1000774c:	85 c0                	test   eax,eax
1000774e:	0f 85 16 2d 00 00    	jne    1000a46a <_crypt_blowfish_rn+0x2dea>
10007754:	6a 04                	push   0x4
10007756:	8d 5c 24 5c          	lea    ebx,[esp+0x5c]
1000775a:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
10007761:	50                   	push   eax
10007762:	e8 8f fe ff ff       	call   100075f6 <BF_swap>
10007767:	8d 84 24 60 10 00 00 	lea    eax,[esp+0x1060]
1000776e:	50                   	push   eax
1000776f:	8d 84 24 ac 10 00 00 	lea    eax,[esp+0x10ac]
10007776:	50                   	push   eax
10007777:	ff b4 24 24 11 00 00 	push   DWORD PTR [esp+0x1124]
1000777e:	e8 aa fe ff ff       	call   1000762d <BF_set_key>
10007783:	be c0 b4 00 10       	mov    esi,0x1000b4c0	10007784: R_386_32	.data
10007788:	b9 00 04 00 00       	mov    ecx,0x400
1000778d:	89 df                	mov    edi,ebx
1000778f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007791:	83 c4 14             	add    esp,0x14
10007794:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10007798:	89 04 24             	mov    DWORD PTR [esp],eax
1000779b:	bb 00 00 00 00       	mov    ebx,0x0
100077a0:	b8 00 00 00 00       	mov    eax,0x0
100077a5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
100077a8:	83 e1 02             	and    ecx,0x2
100077ab:	8d 91 24 04 00 00    	lea    edx,[ecx+0x424]
100077b1:	8b 54 94 58          	mov    edx,DWORD PTR [esp+edx*4+0x58]
100077b5:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
100077bc:	31 c2                	xor    edx,eax
100077be:	89 d7                	mov    edi,edx
100077c0:	c1 ef 06             	shr    edi,0x6
100077c3:	89 d5                	mov    ebp,edx
100077c5:	c1 ed 0e             	shr    ebp,0xe
100077c8:	89 d0                	mov    eax,edx
100077ca:	c1 e8 16             	shr    eax,0x16
100077cd:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100077d4:	81 e6 fc 03 00 00    	and    esi,0x3fc
100077da:	81 e7 fc 03 00 00    	and    edi,0x3fc
100077e0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100077e6:	25 fc 03 00 00       	and    eax,0x3fc
100077eb:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100077ef:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100077f6:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100077fd:	81 c1 25 04 00 00    	add    ecx,0x425
10007803:	8b 4c 8c 58          	mov    ecx,DWORD PTR [esp+ecx*4+0x58]
10007807:	33 8c 24 5c 10 00 00 	xor    ecx,DWORD PTR [esp+0x105c]
1000780e:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10007815:	31 c8                	xor    eax,ecx
10007817:	31 c3                	xor    ebx,eax
10007819:	89 d8                	mov    eax,ebx
1000781b:	c1 e8 06             	shr    eax,0x6
1000781e:	89 c1                	mov    ecx,eax
10007820:	89 df                	mov    edi,ebx
10007822:	c1 ef 0e             	shr    edi,0xe
10007825:	89 d8                	mov    eax,ebx
10007827:	c1 e8 16             	shr    eax,0x16
1000782a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10007831:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007837:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000783d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007843:	25 fc 03 00 00       	and    eax,0x3fc
10007848:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000784c:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10007853:	33 84 0c 58 08 00 00 	xor    eax,DWORD PTR [esp+ecx*1+0x858]
1000785a:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
10007861:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10007868:	89 c1                	mov    ecx,eax
1000786a:	31 d1                	xor    ecx,edx
1000786c:	89 ca                	mov    edx,ecx
1000786e:	c1 ea 06             	shr    edx,0x6
10007871:	89 cf                	mov    edi,ecx
10007873:	c1 ef 0e             	shr    edi,0xe
10007876:	89 c8                	mov    eax,ecx
10007878:	c1 e8 16             	shr    eax,0x16
1000787b:	8d 34 8d 00 00 00 00 	lea    esi,[ecx*4+0x0]
10007882:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007888:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000788e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007894:	25 fc 03 00 00       	and    eax,0x3fc
10007899:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000789d:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
100078a4:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
100078ab:	33 9c 24 64 10 00 00 	xor    ebx,DWORD PTR [esp+0x1064]
100078b2:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100078b9:	89 c2                	mov    edx,eax
100078bb:	31 da                	xor    edx,ebx
100078bd:	89 d6                	mov    esi,edx
100078bf:	c1 ee 06             	shr    esi,0x6
100078c2:	89 d7                	mov    edi,edx
100078c4:	c1 ef 0e             	shr    edi,0xe
100078c7:	89 d0                	mov    eax,edx
100078c9:	c1 e8 16             	shr    eax,0x16
100078cc:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
100078d3:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100078d9:	81 e6 fc 03 00 00    	and    esi,0x3fc
100078df:	81 e7 fc 03 00 00    	and    edi,0x3fc
100078e5:	25 fc 03 00 00       	and    eax,0x3fc
100078ea:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100078ee:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
100078f5:	33 84 34 58 08 00 00 	xor    eax,DWORD PTR [esp+esi*1+0x858]
100078fc:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
10007903:	03 84 1c 58 0c 00 00 	add    eax,DWORD PTR [esp+ebx*1+0xc58]
1000790a:	31 c8                	xor    eax,ecx
1000790c:	89 c3                	mov    ebx,eax
1000790e:	c1 eb 06             	shr    ebx,0x6
10007911:	89 c7                	mov    edi,eax
10007913:	c1 ef 0e             	shr    edi,0xe
10007916:	89 c6                	mov    esi,eax
10007918:	c1 ee 16             	shr    esi,0x16
1000791b:	89 f1                	mov    ecx,esi
1000791d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007924:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000792a:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007930:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007936:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000793c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007940:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007947:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
1000794e:	33 94 24 6c 10 00 00 	xor    edx,DWORD PTR [esp+0x106c]
10007955:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000795c:	31 ca                	xor    edx,ecx
1000795e:	89 d6                	mov    esi,edx
10007960:	c1 ee 06             	shr    esi,0x6
10007963:	89 d7                	mov    edi,edx
10007965:	c1 ef 0e             	shr    edi,0xe
10007968:	89 d3                	mov    ebx,edx
1000796a:	c1 eb 16             	shr    ebx,0x16
1000796d:	89 d9                	mov    ecx,ebx
1000796f:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10007976:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000797c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007982:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007988:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000798e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007992:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007999:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100079a0:	33 84 24 70 10 00 00 	xor    eax,DWORD PTR [esp+0x1070]
100079a7:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
100079ae:	31 c8                	xor    eax,ecx
100079b0:	89 c6                	mov    esi,eax
100079b2:	c1 ee 06             	shr    esi,0x6
100079b5:	89 c7                	mov    edi,eax
100079b7:	c1 ef 0e             	shr    edi,0xe
100079ba:	89 c3                	mov    ebx,eax
100079bc:	c1 eb 16             	shr    ebx,0x16
100079bf:	89 d9                	mov    ecx,ebx
100079c1:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
100079c8:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100079ce:	81 e6 fc 03 00 00    	and    esi,0x3fc
100079d4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100079da:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100079e0:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100079e4:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100079eb:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100079f2:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
100079f9:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007a00:	31 ca                	xor    edx,ecx
10007a02:	89 d6                	mov    esi,edx
10007a04:	c1 ee 06             	shr    esi,0x6
10007a07:	89 d7                	mov    edi,edx
10007a09:	c1 ef 0e             	shr    edi,0xe
10007a0c:	89 d3                	mov    ebx,edx
10007a0e:	c1 eb 16             	shr    ebx,0x16
10007a11:	89 d9                	mov    ecx,ebx
10007a13:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10007a1a:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007a20:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007a26:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007a2c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007a32:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007a36:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007a3d:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007a44:	33 84 24 78 10 00 00 	xor    eax,DWORD PTR [esp+0x1078]
10007a4b:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007a52:	31 c8                	xor    eax,ecx
10007a54:	89 c6                	mov    esi,eax
10007a56:	c1 ee 06             	shr    esi,0x6
10007a59:	89 c7                	mov    edi,eax
10007a5b:	c1 ef 0e             	shr    edi,0xe
10007a5e:	89 c3                	mov    ebx,eax
10007a60:	c1 eb 16             	shr    ebx,0x16
10007a63:	89 d9                	mov    ecx,ebx
10007a65:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007a6c:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007a72:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007a78:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007a7e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007a84:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007a88:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007a8f:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007a96:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10007a9d:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007aa4:	31 ca                	xor    edx,ecx
10007aa6:	89 d6                	mov    esi,edx
10007aa8:	c1 ee 06             	shr    esi,0x6
10007aab:	89 d7                	mov    edi,edx
10007aad:	c1 ef 0e             	shr    edi,0xe
10007ab0:	89 d3                	mov    ebx,edx
10007ab2:	c1 eb 16             	shr    ebx,0x16
10007ab5:	89 d9                	mov    ecx,ebx
10007ab7:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10007abe:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007ac4:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007aca:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007ad0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007ad6:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007ada:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007ae1:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007ae8:	33 84 24 80 10 00 00 	xor    eax,DWORD PTR [esp+0x1080]
10007aef:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007af6:	31 c8                	xor    eax,ecx
10007af8:	89 c6                	mov    esi,eax
10007afa:	c1 ee 06             	shr    esi,0x6
10007afd:	89 c7                	mov    edi,eax
10007aff:	c1 ef 0e             	shr    edi,0xe
10007b02:	89 c3                	mov    ebx,eax
10007b04:	c1 eb 16             	shr    ebx,0x16
10007b07:	89 d9                	mov    ecx,ebx
10007b09:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007b10:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007b16:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007b1c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007b22:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007b28:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007b2c:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007b33:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007b3a:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10007b41:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007b48:	31 ca                	xor    edx,ecx
10007b4a:	89 d6                	mov    esi,edx
10007b4c:	c1 ee 06             	shr    esi,0x6
10007b4f:	89 d7                	mov    edi,edx
10007b51:	c1 ef 0e             	shr    edi,0xe
10007b54:	89 d3                	mov    ebx,edx
10007b56:	c1 eb 16             	shr    ebx,0x16
10007b59:	89 d9                	mov    ecx,ebx
10007b5b:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10007b62:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007b68:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007b6e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007b74:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007b7a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007b7e:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007b85:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007b8c:	33 84 24 88 10 00 00 	xor    eax,DWORD PTR [esp+0x1088]
10007b93:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007b9a:	31 c8                	xor    eax,ecx
10007b9c:	89 c6                	mov    esi,eax
10007b9e:	c1 ee 06             	shr    esi,0x6
10007ba1:	89 c7                	mov    edi,eax
10007ba3:	c1 ef 0e             	shr    edi,0xe
10007ba6:	89 c3                	mov    ebx,eax
10007ba8:	c1 eb 16             	shr    ebx,0x16
10007bab:	89 d9                	mov    ecx,ebx
10007bad:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007bb4:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007bba:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007bc0:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007bc6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007bcc:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007bd0:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007bd7:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007bde:	33 94 24 8c 10 00 00 	xor    edx,DWORD PTR [esp+0x108c]
10007be5:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007bec:	31 ca                	xor    edx,ecx
10007bee:	89 d3                	mov    ebx,edx
10007bf0:	c1 eb 06             	shr    ebx,0x6
10007bf3:	89 d7                	mov    edi,edx
10007bf5:	c1 ef 0e             	shr    edi,0xe
10007bf8:	89 d6                	mov    esi,edx
10007bfa:	c1 ee 16             	shr    esi,0x16
10007bfd:	89 f1                	mov    ecx,esi
10007bff:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007c06:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007c0c:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007c12:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007c18:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007c1e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007c22:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007c29:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10007c30:	33 84 24 90 10 00 00 	xor    eax,DWORD PTR [esp+0x1090]
10007c37:	89 cb                	mov    ebx,ecx
10007c39:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007c40:	31 d8                	xor    eax,ebx
10007c42:	89 c6                	mov    esi,eax
10007c44:	c1 ee 06             	shr    esi,0x6
10007c47:	89 c7                	mov    edi,eax
10007c49:	c1 ef 0e             	shr    edi,0xe
10007c4c:	89 c3                	mov    ebx,eax
10007c4e:	c1 eb 16             	shr    ebx,0x16
10007c51:	89 d9                	mov    ecx,ebx
10007c53:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007c5a:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007c60:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007c66:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007c6c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007c72:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007c76:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007c7d:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007c84:	33 94 24 94 10 00 00 	xor    edx,DWORD PTR [esp+0x1094]
10007c8b:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007c92:	31 ca                	xor    edx,ecx
10007c94:	89 d3                	mov    ebx,edx
10007c96:	c1 eb 06             	shr    ebx,0x6
10007c99:	89 d7                	mov    edi,edx
10007c9b:	c1 ef 0e             	shr    edi,0xe
10007c9e:	89 d6                	mov    esi,edx
10007ca0:	c1 ee 16             	shr    esi,0x16
10007ca3:	89 f1                	mov    ecx,esi
10007ca5:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007cac:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007cb2:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007cb8:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007cbe:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007cc4:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007cc8:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007ccf:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10007cd6:	33 84 24 98 10 00 00 	xor    eax,DWORD PTR [esp+0x1098]
10007cdd:	89 cb                	mov    ebx,ecx
10007cdf:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007ce6:	31 c3                	xor    ebx,eax
10007ce8:	89 d0                	mov    eax,edx
10007cea:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10007cf1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10007cf4:	89 84 8c 58 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x1058],eax
10007cfb:	89 9c 8c 5c 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x105c],ebx
10007d02:	83 c1 02             	add    ecx,0x2
10007d05:	89 0c 24             	mov    DWORD PTR [esp],ecx
10007d08:	83 f9 12             	cmp    ecx,0x12
10007d0b:	0f 85 94 fa ff ff    	jne    100077a5 <_crypt_blowfish_rn+0x125>
10007d11:	8d 4c 24 58          	lea    ecx,[esp+0x58]
10007d15:	83 c1 10             	add    ecx,0x10
10007d18:	8b 94 24 f0 10 00 00 	mov    edx,DWORD PTR [esp+0x10f0]
10007d1f:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
10007d26:	31 c2                	xor    edx,eax
10007d28:	89 d7                	mov    edi,edx
10007d2a:	c1 ef 06             	shr    edi,0x6
10007d2d:	89 d5                	mov    ebp,edx
10007d2f:	c1 ed 0e             	shr    ebp,0xe
10007d32:	89 d0                	mov    eax,edx
10007d34:	c1 e8 16             	shr    eax,0x16
10007d37:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007d3e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007d44:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007d4a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007d50:	25 fc 03 00 00       	and    eax,0x3fc
10007d55:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007d59:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007d60:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007d67:	89 c7                	mov    edi,eax
10007d69:	8b 84 24 f4 10 00 00 	mov    eax,DWORD PTR [esp+0x10f4]
10007d70:	33 84 24 5c 10 00 00 	xor    eax,DWORD PTR [esp+0x105c]
10007d77:	03 bc 34 58 0c 00 00 	add    edi,DWORD PTR [esp+esi*1+0xc58]
10007d7e:	31 f8                	xor    eax,edi
10007d80:	31 d8                	xor    eax,ebx
10007d82:	89 c7                	mov    edi,eax
10007d84:	c1 ef 06             	shr    edi,0x6
10007d87:	89 c5                	mov    ebp,eax
10007d89:	c1 ed 0e             	shr    ebp,0xe
10007d8c:	89 c3                	mov    ebx,eax
10007d8e:	c1 eb 16             	shr    ebx,0x16
10007d91:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007d98:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007d9e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007da4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007daa:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007db0:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007db4:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007dbb:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007dc2:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
10007dc9:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007dd0:	31 da                	xor    edx,ebx
10007dd2:	89 d7                	mov    edi,edx
10007dd4:	c1 ef 06             	shr    edi,0x6
10007dd7:	89 d5                	mov    ebp,edx
10007dd9:	c1 ed 0e             	shr    ebp,0xe
10007ddc:	89 d3                	mov    ebx,edx
10007dde:	c1 eb 16             	shr    ebx,0x16
10007de1:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007de8:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007dee:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007df4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007dfa:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007e00:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007e04:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007e0b:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007e12:	33 84 24 64 10 00 00 	xor    eax,DWORD PTR [esp+0x1064]
10007e19:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007e20:	31 d8                	xor    eax,ebx
10007e22:	89 c7                	mov    edi,eax
10007e24:	c1 ef 06             	shr    edi,0x6
10007e27:	89 c5                	mov    ebp,eax
10007e29:	c1 ed 0e             	shr    ebp,0xe
10007e2c:	89 c3                	mov    ebx,eax
10007e2e:	c1 eb 16             	shr    ebx,0x16
10007e31:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007e38:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007e3e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007e44:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007e4a:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007e50:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007e54:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007e5b:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007e62:	33 94 24 68 10 00 00 	xor    edx,DWORD PTR [esp+0x1068]
10007e69:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007e70:	31 da                	xor    edx,ebx
10007e72:	89 d7                	mov    edi,edx
10007e74:	c1 ef 06             	shr    edi,0x6
10007e77:	89 d5                	mov    ebp,edx
10007e79:	c1 ed 0e             	shr    ebp,0xe
10007e7c:	89 d3                	mov    ebx,edx
10007e7e:	c1 eb 16             	shr    ebx,0x16
10007e81:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007e88:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007e8e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007e94:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007e9a:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007ea0:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007ea4:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007eab:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007eb2:	33 84 24 6c 10 00 00 	xor    eax,DWORD PTR [esp+0x106c]
10007eb9:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007ec0:	31 d8                	xor    eax,ebx
10007ec2:	89 c7                	mov    edi,eax
10007ec4:	c1 ef 06             	shr    edi,0x6
10007ec7:	89 c5                	mov    ebp,eax
10007ec9:	c1 ed 0e             	shr    ebp,0xe
10007ecc:	89 c3                	mov    ebx,eax
10007ece:	c1 eb 16             	shr    ebx,0x16
10007ed1:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007ed8:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007ede:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007ee4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007eea:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007ef0:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007ef4:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007efb:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007f02:	33 94 24 70 10 00 00 	xor    edx,DWORD PTR [esp+0x1070]
10007f09:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007f10:	31 da                	xor    edx,ebx
10007f12:	89 d7                	mov    edi,edx
10007f14:	c1 ef 06             	shr    edi,0x6
10007f17:	89 d5                	mov    ebp,edx
10007f19:	c1 ed 0e             	shr    ebp,0xe
10007f1c:	89 d3                	mov    ebx,edx
10007f1e:	c1 eb 16             	shr    ebx,0x16
10007f21:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007f28:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007f2e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007f34:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007f3a:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007f40:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007f44:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007f4b:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007f52:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10007f59:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007f60:	31 d8                	xor    eax,ebx
10007f62:	89 c7                	mov    edi,eax
10007f64:	c1 ef 06             	shr    edi,0x6
10007f67:	89 c5                	mov    ebp,eax
10007f69:	c1 ed 0e             	shr    ebp,0xe
10007f6c:	89 c3                	mov    ebx,eax
10007f6e:	c1 eb 16             	shr    ebx,0x16
10007f71:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007f78:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007f7e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007f84:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007f8a:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007f90:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007f94:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007f9b:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007fa2:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10007fa9:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007fb0:	31 da                	xor    edx,ebx
10007fb2:	89 d7                	mov    edi,edx
10007fb4:	c1 ef 06             	shr    edi,0x6
10007fb7:	89 d5                	mov    ebp,edx
10007fb9:	c1 ed 0e             	shr    ebp,0xe
10007fbc:	89 d3                	mov    ebx,edx
10007fbe:	c1 eb 16             	shr    ebx,0x16
10007fc1:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007fc8:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007fce:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007fd4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007fda:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007fe0:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007fe4:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007feb:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007ff2:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10007ff9:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008000:	31 d8                	xor    eax,ebx
10008002:	89 c7                	mov    edi,eax
10008004:	c1 ef 06             	shr    edi,0x6
10008007:	89 c5                	mov    ebp,eax
10008009:	c1 ed 0e             	shr    ebp,0xe
1000800c:	89 c3                	mov    ebx,eax
1000800e:	c1 eb 16             	shr    ebx,0x16
10008011:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008018:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000801e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008024:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000802a:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008030:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008034:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000803b:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008042:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10008049:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008050:	31 da                	xor    edx,ebx
10008052:	89 d7                	mov    edi,edx
10008054:	c1 ef 06             	shr    edi,0x6
10008057:	89 d5                	mov    ebp,edx
10008059:	c1 ed 0e             	shr    ebp,0xe
1000805c:	89 d3                	mov    ebx,edx
1000805e:	c1 eb 16             	shr    ebx,0x16
10008061:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008068:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000806e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008074:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000807a:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008080:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008084:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000808b:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008092:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10008099:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100080a0:	31 d8                	xor    eax,ebx
100080a2:	89 c7                	mov    edi,eax
100080a4:	c1 ef 06             	shr    edi,0x6
100080a7:	89 c5                	mov    ebp,eax
100080a9:	c1 ed 0e             	shr    ebp,0xe
100080ac:	89 c3                	mov    ebx,eax
100080ae:	c1 eb 16             	shr    ebx,0x16
100080b1:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100080b8:	81 e6 fc 03 00 00    	and    esi,0x3fc
100080be:	81 e7 fc 03 00 00    	and    edi,0x3fc
100080c4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100080ca:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100080d0:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100080d4:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100080db:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100080e2:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
100080e9:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100080f0:	31 da                	xor    edx,ebx
100080f2:	89 d7                	mov    edi,edx
100080f4:	c1 ef 06             	shr    edi,0x6
100080f7:	89 d5                	mov    ebp,edx
100080f9:	c1 ed 0e             	shr    ebp,0xe
100080fc:	89 d3                	mov    ebx,edx
100080fe:	c1 eb 16             	shr    ebx,0x16
10008101:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008108:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000810e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008114:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000811a:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008120:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008124:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000812b:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008132:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10008139:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008140:	31 d8                	xor    eax,ebx
10008142:	89 c7                	mov    edi,eax
10008144:	c1 ef 06             	shr    edi,0x6
10008147:	89 c5                	mov    ebp,eax
10008149:	c1 ed 0e             	shr    ebp,0xe
1000814c:	89 c3                	mov    ebx,eax
1000814e:	c1 eb 16             	shr    ebx,0x16
10008151:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008158:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000815e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008164:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000816a:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008170:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008174:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000817b:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008182:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10008189:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008190:	31 da                	xor    edx,ebx
10008192:	89 d7                	mov    edi,edx
10008194:	c1 ef 06             	shr    edi,0x6
10008197:	89 d5                	mov    ebp,edx
10008199:	c1 ed 0e             	shr    ebp,0xe
1000819c:	89 d3                	mov    ebx,edx
1000819e:	c1 eb 16             	shr    ebx,0x16
100081a1:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100081a8:	81 e6 fc 03 00 00    	and    esi,0x3fc
100081ae:	81 e7 fc 03 00 00    	and    edi,0x3fc
100081b4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100081ba:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100081c0:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100081c4:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100081cb:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100081d2:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
100081d9:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100081e0:	31 d8                	xor    eax,ebx
100081e2:	89 c6                	mov    esi,eax
100081e4:	c1 ee 06             	shr    esi,0x6
100081e7:	89 c5                	mov    ebp,eax
100081e9:	c1 ed 0e             	shr    ebp,0xe
100081ec:	89 c3                	mov    ebx,eax
100081ee:	c1 eb 16             	shr    ebx,0x16
100081f1:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100081f8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100081fe:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008204:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000820a:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008210:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008214:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000821b:	33 9c 34 58 08 00 00 	xor    ebx,DWORD PTR [esp+esi*1+0x858]
10008222:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10008229:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10008230:	31 da                	xor    edx,ebx
10008232:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10008239:	89 41 f0             	mov    DWORD PTR [ecx-0x10],eax
1000823c:	89 51 f4             	mov    DWORD PTR [ecx-0xc],edx
1000823f:	8b 9c 24 e8 10 00 00 	mov    ebx,DWORD PTR [esp+0x10e8]
10008246:	33 9c 24 58 10 00 00 	xor    ebx,DWORD PTR [esp+0x1058]
1000824d:	31 d8                	xor    eax,ebx
1000824f:	89 c5                	mov    ebp,eax
10008251:	c1 ed 06             	shr    ebp,0x6
10008254:	89 c6                	mov    esi,eax
10008256:	c1 ee 0e             	shr    esi,0xe
10008259:	89 c3                	mov    ebx,eax
1000825b:	c1 eb 16             	shr    ebx,0x16
1000825e:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008265:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000826b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008271:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008277:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000827d:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008281:	03 9c 34 58 04 00 00 	add    ebx,DWORD PTR [esp+esi*1+0x458]
10008288:	33 9c 2c 58 08 00 00 	xor    ebx,DWORD PTR [esp+ebp*1+0x858]
1000828f:	8b b4 24 ec 10 00 00 	mov    esi,DWORD PTR [esp+0x10ec]
10008296:	33 b4 24 5c 10 00 00 	xor    esi,DWORD PTR [esp+0x105c]
1000829d:	31 f2                	xor    edx,esi
1000829f:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
100082a6:	89 de                	mov    esi,ebx
100082a8:	31 d6                	xor    esi,edx
100082aa:	89 f5                	mov    ebp,esi
100082ac:	c1 ed 06             	shr    ebp,0x6
100082af:	89 f3                	mov    ebx,esi
100082b1:	c1 eb 0e             	shr    ebx,0xe
100082b4:	89 f2                	mov    edx,esi
100082b6:	c1 ea 16             	shr    edx,0x16
100082b9:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100082c0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100082c6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100082cc:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100082d2:	81 e2 fc 03 00 00    	and    edx,0x3fc
100082d8:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100082dc:	03 94 1c 58 04 00 00 	add    edx,DWORD PTR [esp+ebx*1+0x458]
100082e3:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
100082ea:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
100082f1:	89 d3                	mov    ebx,edx
100082f3:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
100082fa:	31 c3                	xor    ebx,eax
100082fc:	89 df                	mov    edi,ebx
100082fe:	c1 ef 06             	shr    edi,0x6
10008301:	89 dd                	mov    ebp,ebx
10008303:	c1 ed 0e             	shr    ebp,0xe
10008306:	89 da                	mov    edx,ebx
10008308:	c1 ea 16             	shr    edx,0x16
1000830b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
10008312:	25 fc 03 00 00       	and    eax,0x3fc
10008317:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000831d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008323:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008329:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000832d:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008334:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000833b:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
10008342:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
10008349:	31 d6                	xor    esi,edx
1000834b:	89 f0                	mov    eax,esi
1000834d:	c1 e8 06             	shr    eax,0x6
10008350:	89 f5                	mov    ebp,esi
10008352:	c1 ed 0e             	shr    ebp,0xe
10008355:	89 f2                	mov    edx,esi
10008357:	c1 ea 16             	shr    edx,0x16
1000835a:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008361:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008367:	25 fc 03 00 00       	and    eax,0x3fc
1000836c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008372:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008378:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000837c:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008383:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
1000838a:	33 9c 24 68 10 00 00 	xor    ebx,DWORD PTR [esp+0x1068]
10008391:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10008398:	31 d3                	xor    ebx,edx
1000839a:	89 dd                	mov    ebp,ebx
1000839c:	c1 ed 06             	shr    ebp,0x6
1000839f:	89 da                	mov    edx,ebx
100083a1:	c1 ea 0e             	shr    edx,0xe
100083a4:	89 d8                	mov    eax,ebx
100083a6:	c1 e8 16             	shr    eax,0x16
100083a9:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
100083b0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100083b6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100083bc:	81 e2 fc 03 00 00    	and    edx,0x3fc
100083c2:	25 fc 03 00 00       	and    eax,0x3fc
100083c7:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100083cb:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
100083d2:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
100083d9:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
100083e0:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100083e7:	89 c2                	mov    edx,eax
100083e9:	31 f2                	xor    edx,esi
100083eb:	89 d7                	mov    edi,edx
100083ed:	c1 ef 06             	shr    edi,0x6
100083f0:	89 d5                	mov    ebp,edx
100083f2:	c1 ed 0e             	shr    ebp,0xe
100083f5:	89 d0                	mov    eax,edx
100083f7:	c1 e8 16             	shr    eax,0x16
100083fa:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008401:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008407:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000840d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008413:	25 fc 03 00 00       	and    eax,0x3fc
10008418:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000841c:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008423:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000842a:	33 9c 24 70 10 00 00 	xor    ebx,DWORD PTR [esp+0x1070]
10008431:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008438:	31 c3                	xor    ebx,eax
1000843a:	89 df                	mov    edi,ebx
1000843c:	c1 ef 06             	shr    edi,0x6
1000843f:	89 dd                	mov    ebp,ebx
10008441:	c1 ed 0e             	shr    ebp,0xe
10008444:	89 d8                	mov    eax,ebx
10008446:	c1 e8 16             	shr    eax,0x16
10008449:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10008450:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008456:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000845c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008462:	25 fc 03 00 00       	and    eax,0x3fc
10008467:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000846b:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008472:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008479:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10008480:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008487:	31 c2                	xor    edx,eax
10008489:	89 d7                	mov    edi,edx
1000848b:	c1 ef 06             	shr    edi,0x6
1000848e:	89 d5                	mov    ebp,edx
10008490:	c1 ed 0e             	shr    ebp,0xe
10008493:	89 d0                	mov    eax,edx
10008495:	c1 e8 16             	shr    eax,0x16
10008498:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000849f:	81 e6 fc 03 00 00    	and    esi,0x3fc
100084a5:	81 e7 fc 03 00 00    	and    edi,0x3fc
100084ab:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100084b1:	25 fc 03 00 00       	and    eax,0x3fc
100084b6:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100084ba:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100084c1:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100084c8:	33 9c 24 78 10 00 00 	xor    ebx,DWORD PTR [esp+0x1078]
100084cf:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100084d6:	31 c3                	xor    ebx,eax
100084d8:	89 df                	mov    edi,ebx
100084da:	c1 ef 06             	shr    edi,0x6
100084dd:	89 dd                	mov    ebp,ebx
100084df:	c1 ed 0e             	shr    ebp,0xe
100084e2:	89 d8                	mov    eax,ebx
100084e4:	c1 e8 16             	shr    eax,0x16
100084e7:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100084ee:	81 e6 fc 03 00 00    	and    esi,0x3fc
100084f4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100084fa:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008500:	25 fc 03 00 00       	and    eax,0x3fc
10008505:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008509:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008510:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008517:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
1000851e:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008525:	31 c2                	xor    edx,eax
10008527:	89 d7                	mov    edi,edx
10008529:	c1 ef 06             	shr    edi,0x6
1000852c:	89 d5                	mov    ebp,edx
1000852e:	c1 ed 0e             	shr    ebp,0xe
10008531:	89 d0                	mov    eax,edx
10008533:	c1 e8 16             	shr    eax,0x16
10008536:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000853d:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008543:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008549:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000854f:	25 fc 03 00 00       	and    eax,0x3fc
10008554:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008558:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000855f:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008566:	33 9c 24 80 10 00 00 	xor    ebx,DWORD PTR [esp+0x1080]
1000856d:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008574:	31 c3                	xor    ebx,eax
10008576:	89 df                	mov    edi,ebx
10008578:	c1 ef 06             	shr    edi,0x6
1000857b:	89 dd                	mov    ebp,ebx
1000857d:	c1 ed 0e             	shr    ebp,0xe
10008580:	89 d8                	mov    eax,ebx
10008582:	c1 e8 16             	shr    eax,0x16
10008585:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
1000858c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008592:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008598:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000859e:	25 fc 03 00 00       	and    eax,0x3fc
100085a3:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100085a7:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100085ae:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100085b5:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
100085bc:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100085c3:	31 d0                	xor    eax,edx
100085c5:	89 c7                	mov    edi,eax
100085c7:	c1 ef 06             	shr    edi,0x6
100085ca:	89 c5                	mov    ebp,eax
100085cc:	c1 ed 0e             	shr    ebp,0xe
100085cf:	89 c2                	mov    edx,eax
100085d1:	c1 ea 16             	shr    edx,0x16
100085d4:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100085db:	81 e6 fc 03 00 00    	and    esi,0x3fc
100085e1:	81 e7 fc 03 00 00    	and    edi,0x3fc
100085e7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100085ed:	81 e2 fc 03 00 00    	and    edx,0x3fc
100085f3:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100085f7:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100085fe:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008605:	33 9c 24 88 10 00 00 	xor    ebx,DWORD PTR [esp+0x1088]
1000860c:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008613:	31 d3                	xor    ebx,edx
10008615:	89 df                	mov    edi,ebx
10008617:	c1 ef 06             	shr    edi,0x6
1000861a:	89 dd                	mov    ebp,ebx
1000861c:	c1 ed 0e             	shr    ebp,0xe
1000861f:	89 da                	mov    edx,ebx
10008621:	c1 ea 16             	shr    edx,0x16
10008624:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
1000862b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008631:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008637:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000863d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008643:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008647:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000864e:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008655:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
1000865c:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008663:	31 d0                	xor    eax,edx
10008665:	89 c7                	mov    edi,eax
10008667:	c1 ef 06             	shr    edi,0x6
1000866a:	89 c5                	mov    ebp,eax
1000866c:	c1 ed 0e             	shr    ebp,0xe
1000866f:	89 c2                	mov    edx,eax
10008671:	c1 ea 16             	shr    edx,0x16
10008674:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000867b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008681:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008687:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000868d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008693:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008697:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000869e:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100086a5:	33 9c 24 90 10 00 00 	xor    ebx,DWORD PTR [esp+0x1090]
100086ac:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100086b3:	31 d3                	xor    ebx,edx
100086b5:	89 df                	mov    edi,ebx
100086b7:	c1 ef 06             	shr    edi,0x6
100086ba:	89 dd                	mov    ebp,ebx
100086bc:	c1 ed 0e             	shr    ebp,0xe
100086bf:	89 da                	mov    edx,ebx
100086c1:	c1 ea 16             	shr    edx,0x16
100086c4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100086cb:	81 e6 fc 03 00 00    	and    esi,0x3fc
100086d1:	81 e7 fc 03 00 00    	and    edi,0x3fc
100086d7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100086dd:	81 e2 fc 03 00 00    	and    edx,0x3fc
100086e3:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100086e7:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100086ee:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100086f5:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
100086fc:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008703:	31 d0                	xor    eax,edx
10008705:	89 c7                	mov    edi,eax
10008707:	c1 ef 06             	shr    edi,0x6
1000870a:	89 c5                	mov    ebp,eax
1000870c:	c1 ed 0e             	shr    ebp,0xe
1000870f:	89 c2                	mov    edx,eax
10008711:	c1 ea 16             	shr    edx,0x16
10008714:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000871b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008721:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008727:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000872d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008733:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008737:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000873e:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008745:	33 9c 24 98 10 00 00 	xor    ebx,DWORD PTR [esp+0x1098]
1000874c:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008753:	31 d3                	xor    ebx,edx
10008755:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
1000875c:	89 41 f8             	mov    DWORD PTR [ecx-0x8],eax
1000875f:	89 59 fc             	mov    DWORD PTR [ecx-0x4],ebx
10008762:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10008769:	39 d1                	cmp    ecx,edx
1000876b:	0f 85 a4 f5 ff ff    	jne    10007d15 <_crypt_blowfish_rn+0x695>
10008771:	8b 84 24 a0 10 00 00 	mov    eax,DWORD PTR [esp+0x10a0]
10008778:	31 84 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],eax
1000877f:	8b 84 24 a4 10 00 00 	mov    eax,DWORD PTR [esp+0x10a4]
10008786:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
1000878d:	8b 84 24 a8 10 00 00 	mov    eax,DWORD PTR [esp+0x10a8]
10008794:	31 84 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],eax
1000879b:	8b 84 24 ac 10 00 00 	mov    eax,DWORD PTR [esp+0x10ac]
100087a2:	31 84 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],eax
100087a9:	8b 84 24 b0 10 00 00 	mov    eax,DWORD PTR [esp+0x10b0]
100087b0:	31 84 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],eax
100087b7:	8b 84 24 b4 10 00 00 	mov    eax,DWORD PTR [esp+0x10b4]
100087be:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
100087c5:	8b 84 24 b8 10 00 00 	mov    eax,DWORD PTR [esp+0x10b8]
100087cc:	31 84 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],eax
100087d3:	8b 84 24 bc 10 00 00 	mov    eax,DWORD PTR [esp+0x10bc]
100087da:	31 84 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],eax
100087e1:	8b 84 24 c0 10 00 00 	mov    eax,DWORD PTR [esp+0x10c0]
100087e8:	31 84 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],eax
100087ef:	8b 84 24 c4 10 00 00 	mov    eax,DWORD PTR [esp+0x10c4]
100087f6:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
100087fd:	8b 84 24 c8 10 00 00 	mov    eax,DWORD PTR [esp+0x10c8]
10008804:	31 84 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],eax
1000880b:	8b 84 24 cc 10 00 00 	mov    eax,DWORD PTR [esp+0x10cc]
10008812:	31 84 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],eax
10008819:	8b 84 24 d0 10 00 00 	mov    eax,DWORD PTR [esp+0x10d0]
10008820:	31 84 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],eax
10008827:	8b 84 24 d4 10 00 00 	mov    eax,DWORD PTR [esp+0x10d4]
1000882e:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
10008835:	8b 84 24 d8 10 00 00 	mov    eax,DWORD PTR [esp+0x10d8]
1000883c:	31 84 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],eax
10008843:	8b 84 24 dc 10 00 00 	mov    eax,DWORD PTR [esp+0x10dc]
1000884a:	31 84 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],eax
10008851:	8b 84 24 e0 10 00 00 	mov    eax,DWORD PTR [esp+0x10e0]
10008858:	31 84 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],eax
1000885f:	8b 84 24 e4 10 00 00 	mov    eax,DWORD PTR [esp+0x10e4]
10008866:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
1000886d:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
10008874:	b9 00 00 00 00       	mov    ecx,0x0
10008879:	b8 00 00 00 00       	mov    eax,0x0
1000887e:	83 c3 08             	add    ebx,0x8
10008881:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10008888:	89 c7                	mov    edi,eax
1000888a:	c1 ef 06             	shr    edi,0x6
1000888d:	89 c5                	mov    ebp,eax
1000888f:	c1 ed 0e             	shr    ebp,0xe
10008892:	89 c2                	mov    edx,eax
10008894:	c1 ea 16             	shr    edx,0x16
10008897:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000889e:	81 e6 fc 03 00 00    	and    esi,0x3fc
100088a4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100088aa:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100088b0:	81 e2 fc 03 00 00    	and    edx,0x3fc
100088b6:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100088ba:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100088c1:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100088c8:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100088cf:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
100088d6:	31 ca                	xor    edx,ecx
100088d8:	89 d5                	mov    ebp,edx
100088da:	c1 ed 06             	shr    ebp,0x6
100088dd:	89 d6                	mov    esi,edx
100088df:	c1 ee 0e             	shr    esi,0xe
100088e2:	89 d1                	mov    ecx,edx
100088e4:	c1 e9 16             	shr    ecx,0x16
100088e7:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
100088ee:	81 e7 fc 03 00 00    	and    edi,0x3fc
100088f4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100088fa:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008900:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008906:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000890a:	03 8c 34 58 04 00 00 	add    ecx,DWORD PTR [esp+esi*1+0x458]
10008911:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10008918:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
1000891f:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
10008926:	31 c8                	xor    eax,ecx
10008928:	89 c7                	mov    edi,eax
1000892a:	c1 ef 06             	shr    edi,0x6
1000892d:	89 c5                	mov    ebp,eax
1000892f:	c1 ed 0e             	shr    ebp,0xe
10008932:	89 c1                	mov    ecx,eax
10008934:	c1 e9 16             	shr    ecx,0x16
10008937:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000893e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008944:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000894a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008950:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008956:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000895a:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008961:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008968:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
1000896f:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008976:	31 d1                	xor    ecx,edx
10008978:	89 cd                	mov    ebp,ecx
1000897a:	c1 ed 06             	shr    ebp,0x6
1000897d:	89 ce                	mov    esi,ecx
1000897f:	c1 ee 0e             	shr    esi,0xe
10008982:	89 ca                	mov    edx,ecx
10008984:	c1 ea 16             	shr    edx,0x16
10008987:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000898e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008994:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000899a:	81 e6 fc 03 00 00    	and    esi,0x3fc
100089a0:	81 e2 fc 03 00 00    	and    edx,0x3fc
100089a6:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100089aa:	03 94 34 58 04 00 00 	add    edx,DWORD PTR [esp+esi*1+0x458]
100089b1:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
100089b8:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
100089bf:	89 d6                	mov    esi,edx
100089c1:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
100089c8:	31 c6                	xor    esi,eax
100089ca:	89 f2                	mov    edx,esi
100089cc:	c1 ea 06             	shr    edx,0x6
100089cf:	89 f5                	mov    ebp,esi
100089d1:	c1 ed 0e             	shr    ebp,0xe
100089d4:	89 f0                	mov    eax,esi
100089d6:	c1 e8 16             	shr    eax,0x16
100089d9:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100089e0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100089e6:	81 e2 fc 03 00 00    	and    edx,0x3fc
100089ec:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100089f2:	25 fc 03 00 00       	and    eax,0x3fc
100089f7:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100089fb:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008a02:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10008a09:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
10008a10:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008a17:	31 c8                	xor    eax,ecx
10008a19:	89 c7                	mov    edi,eax
10008a1b:	c1 ef 06             	shr    edi,0x6
10008a1e:	89 c5                	mov    ebp,eax
10008a20:	c1 ed 0e             	shr    ebp,0xe
10008a23:	89 c2                	mov    edx,eax
10008a25:	c1 ea 16             	shr    edx,0x16
10008a28:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10008a2f:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008a35:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a3b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a41:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008a47:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008a4b:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008a52:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008a59:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
10008a60:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10008a67:	31 f2                	xor    edx,esi
10008a69:	89 d7                	mov    edi,edx
10008a6b:	c1 ef 06             	shr    edi,0x6
10008a6e:	89 d5                	mov    ebp,edx
10008a70:	c1 ed 0e             	shr    ebp,0xe
10008a73:	89 d1                	mov    ecx,edx
10008a75:	c1 e9 16             	shr    ecx,0x16
10008a78:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008a7f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008a85:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a8b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a91:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008a97:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008a9b:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008aa2:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008aa9:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10008ab0:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008ab7:	31 c8                	xor    eax,ecx
10008ab9:	89 c7                	mov    edi,eax
10008abb:	c1 ef 06             	shr    edi,0x6
10008abe:	89 c5                	mov    ebp,eax
10008ac0:	c1 ed 0e             	shr    ebp,0xe
10008ac3:	89 c1                	mov    ecx,eax
10008ac5:	c1 e9 16             	shr    ecx,0x16
10008ac8:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008acf:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008ad5:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008adb:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ae1:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008ae7:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008aeb:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008af2:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008af9:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10008b00:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008b07:	31 ca                	xor    edx,ecx
10008b09:	89 d7                	mov    edi,edx
10008b0b:	c1 ef 06             	shr    edi,0x6
10008b0e:	89 d5                	mov    ebp,edx
10008b10:	c1 ed 0e             	shr    ebp,0xe
10008b13:	89 d1                	mov    ecx,edx
10008b15:	c1 e9 16             	shr    ecx,0x16
10008b18:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008b1f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008b25:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b2b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b31:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008b37:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008b3b:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008b42:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008b49:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10008b50:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008b57:	31 c8                	xor    eax,ecx
10008b59:	89 c7                	mov    edi,eax
10008b5b:	c1 ef 06             	shr    edi,0x6
10008b5e:	89 c5                	mov    ebp,eax
10008b60:	c1 ed 0e             	shr    ebp,0xe
10008b63:	89 c1                	mov    ecx,eax
10008b65:	c1 e9 16             	shr    ecx,0x16
10008b68:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008b6f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008b75:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b7b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b81:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008b87:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008b8b:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008b92:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008b99:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10008ba0:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008ba7:	31 ca                	xor    edx,ecx
10008ba9:	89 d7                	mov    edi,edx
10008bab:	c1 ef 06             	shr    edi,0x6
10008bae:	89 d5                	mov    ebp,edx
10008bb0:	c1 ed 0e             	shr    ebp,0xe
10008bb3:	89 d1                	mov    ecx,edx
10008bb5:	c1 e9 16             	shr    ecx,0x16
10008bb8:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008bbf:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008bc5:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008bcb:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008bd1:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008bd7:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008bdb:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008be2:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008be9:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10008bf0:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008bf7:	31 c8                	xor    eax,ecx
10008bf9:	89 c7                	mov    edi,eax
10008bfb:	c1 ef 06             	shr    edi,0x6
10008bfe:	89 c5                	mov    ebp,eax
10008c00:	c1 ed 0e             	shr    ebp,0xe
10008c03:	89 c1                	mov    ecx,eax
10008c05:	c1 e9 16             	shr    ecx,0x16
10008c08:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008c0f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008c15:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c1b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c21:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008c27:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008c2b:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008c32:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008c39:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10008c40:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008c47:	31 ca                	xor    edx,ecx
10008c49:	89 d7                	mov    edi,edx
10008c4b:	c1 ef 06             	shr    edi,0x6
10008c4e:	89 d5                	mov    ebp,edx
10008c50:	c1 ed 0e             	shr    ebp,0xe
10008c53:	89 d1                	mov    ecx,edx
10008c55:	c1 e9 16             	shr    ecx,0x16
10008c58:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008c5f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008c65:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c6b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c71:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008c77:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008c7b:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008c82:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008c89:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10008c90:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008c97:	31 c8                	xor    eax,ecx
10008c99:	89 c7                	mov    edi,eax
10008c9b:	c1 ef 06             	shr    edi,0x6
10008c9e:	89 c5                	mov    ebp,eax
10008ca0:	c1 ed 0e             	shr    ebp,0xe
10008ca3:	89 c1                	mov    ecx,eax
10008ca5:	c1 e9 16             	shr    ecx,0x16
10008ca8:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008caf:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008cb5:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008cbb:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008cc1:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008cc7:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008ccb:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008cd2:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008cd9:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10008ce0:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008ce7:	31 ca                	xor    edx,ecx
10008ce9:	89 d7                	mov    edi,edx
10008ceb:	c1 ef 06             	shr    edi,0x6
10008cee:	89 d5                	mov    ebp,edx
10008cf0:	c1 ed 0e             	shr    ebp,0xe
10008cf3:	89 d6                	mov    esi,edx
10008cf5:	c1 ee 16             	shr    esi,0x16
10008cf8:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10008cff:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008d05:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d0b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d11:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008d17:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008d1b:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10008d22:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10008d29:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10008d30:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10008d37:	31 f0                	xor    eax,esi
10008d39:	89 c5                	mov    ebp,eax
10008d3b:	c1 ed 06             	shr    ebp,0x6
10008d3e:	89 c1                	mov    ecx,eax
10008d40:	c1 e9 0e             	shr    ecx,0xe
10008d43:	89 c6                	mov    esi,eax
10008d45:	c1 ee 16             	shr    esi,0x16
10008d48:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008d4f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d55:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d5b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008d61:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008d67:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008d6b:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
10008d72:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10008d79:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10008d80:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10008d87:	89 f1                	mov    ecx,esi
10008d89:	31 d1                	xor    ecx,edx
10008d8b:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10008d92:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10008d95:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
10008d98:	8d b4 24 a0 10 00 00 	lea    esi,[esp+0x10a0]
10008d9f:	39 f3                	cmp    ebx,esi
10008da1:	0f 85 d7 fa ff ff    	jne    1000887e <_crypt_blowfish_rn+0x11fe>
10008da7:	8d 5c 24 58          	lea    ebx,[esp+0x58]
10008dab:	83 c3 08             	add    ebx,0x8
10008dae:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10008db5:	89 c7                	mov    edi,eax
10008db7:	c1 ef 06             	shr    edi,0x6
10008dba:	89 c5                	mov    ebp,eax
10008dbc:	c1 ed 0e             	shr    ebp,0xe
10008dbf:	89 c2                	mov    edx,eax
10008dc1:	c1 ea 16             	shr    edx,0x16
10008dc4:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008dcb:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008dd1:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008dd7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ddd:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008de3:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008de7:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008dee:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008df5:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008dfc:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10008e03:	31 ca                	xor    edx,ecx
10008e05:	89 d7                	mov    edi,edx
10008e07:	c1 ef 06             	shr    edi,0x6
10008e0a:	89 d5                	mov    ebp,edx
10008e0c:	c1 ed 0e             	shr    ebp,0xe
10008e0f:	89 d1                	mov    ecx,edx
10008e11:	c1 e9 16             	shr    ecx,0x16
10008e14:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008e1b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008e21:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e27:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e2d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008e33:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008e37:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008e3e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008e45:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10008e4c:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008e53:	31 c1                	xor    ecx,eax
10008e55:	89 cd                	mov    ebp,ecx
10008e57:	c1 ed 06             	shr    ebp,0x6
10008e5a:	89 c8                	mov    eax,ecx
10008e5c:	c1 e8 0e             	shr    eax,0xe
10008e5f:	89 ce                	mov    esi,ecx
10008e61:	c1 ee 16             	shr    esi,0x16
10008e64:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10008e6b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e71:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e77:	25 fc 03 00 00       	and    eax,0x3fc
10008e7c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008e82:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008e86:	03 b4 04 58 04 00 00 	add    esi,DWORD PTR [esp+eax*1+0x458]
10008e8d:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10008e94:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10008e9b:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10008ea2:	31 d6                	xor    esi,edx
10008ea4:	89 f5                	mov    ebp,esi
10008ea6:	c1 ed 06             	shr    ebp,0x6
10008ea9:	89 f2                	mov    edx,esi
10008eab:	c1 ea 0e             	shr    edx,0xe
10008eae:	89 f0                	mov    eax,esi
10008eb0:	c1 e8 16             	shr    eax,0x16
10008eb3:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008eba:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008ec0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ec6:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008ecc:	25 fc 03 00 00       	and    eax,0x3fc
10008ed1:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008ed5:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10008edc:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10008ee3:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
10008eea:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008ef1:	31 c1                	xor    ecx,eax
10008ef3:	89 ca                	mov    edx,ecx
10008ef5:	c1 ea 06             	shr    edx,0x6
10008ef8:	89 cd                	mov    ebp,ecx
10008efa:	c1 ed 0e             	shr    ebp,0xe
10008efd:	89 c8                	mov    eax,ecx
10008eff:	c1 e8 16             	shr    eax,0x16
10008f02:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10008f09:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f0f:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008f15:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f1b:	25 fc 03 00 00       	and    eax,0x3fc
10008f20:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008f24:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008f2b:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10008f32:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
10008f39:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008f40:	31 f0                	xor    eax,esi
10008f42:	89 c7                	mov    edi,eax
10008f44:	c1 ef 06             	shr    edi,0x6
10008f47:	89 c5                	mov    ebp,eax
10008f49:	c1 ed 0e             	shr    ebp,0xe
10008f4c:	89 c2                	mov    edx,eax
10008f4e:	c1 ea 16             	shr    edx,0x16
10008f51:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008f58:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008f5e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f64:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f6a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008f70:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008f74:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008f7b:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008f82:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
10008f89:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008f90:	31 ca                	xor    edx,ecx
10008f92:	89 d7                	mov    edi,edx
10008f94:	c1 ef 06             	shr    edi,0x6
10008f97:	89 d5                	mov    ebp,edx
10008f99:	c1 ed 0e             	shr    ebp,0xe
10008f9c:	89 d1                	mov    ecx,edx
10008f9e:	c1 e9 16             	shr    ecx,0x16
10008fa1:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008fa8:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008fae:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008fb4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008fba:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008fc0:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008fc4:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008fcb:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008fd2:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10008fd9:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008fe0:	31 c8                	xor    eax,ecx
10008fe2:	89 c7                	mov    edi,eax
10008fe4:	c1 ef 06             	shr    edi,0x6
10008fe7:	89 c5                	mov    ebp,eax
10008fe9:	c1 ed 0e             	shr    ebp,0xe
10008fec:	89 c1                	mov    ecx,eax
10008fee:	c1 e9 16             	shr    ecx,0x16
10008ff1:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008ff8:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008ffe:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009004:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000900a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009010:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009014:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000901b:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009022:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10009029:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009030:	31 ca                	xor    edx,ecx
10009032:	89 d7                	mov    edi,edx
10009034:	c1 ef 06             	shr    edi,0x6
10009037:	89 d5                	mov    ebp,edx
10009039:	c1 ed 0e             	shr    ebp,0xe
1000903c:	89 d1                	mov    ecx,edx
1000903e:	c1 e9 16             	shr    ecx,0x16
10009041:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009048:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000904e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009054:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000905a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009060:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009064:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000906b:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009072:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10009079:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009080:	31 c8                	xor    eax,ecx
10009082:	89 c7                	mov    edi,eax
10009084:	c1 ef 06             	shr    edi,0x6
10009087:	89 c5                	mov    ebp,eax
10009089:	c1 ed 0e             	shr    ebp,0xe
1000908c:	89 c1                	mov    ecx,eax
1000908e:	c1 e9 16             	shr    ecx,0x16
10009091:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009098:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000909e:	81 e7 fc 03 00 00    	and    edi,0x3fc
100090a4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100090aa:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100090b0:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100090b4:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100090bb:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100090c2:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
100090c9:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100090d0:	31 ca                	xor    edx,ecx
100090d2:	89 d7                	mov    edi,edx
100090d4:	c1 ef 06             	shr    edi,0x6
100090d7:	89 d5                	mov    ebp,edx
100090d9:	c1 ed 0e             	shr    ebp,0xe
100090dc:	89 d1                	mov    ecx,edx
100090de:	c1 e9 16             	shr    ecx,0x16
100090e1:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100090e8:	81 e6 fc 03 00 00    	and    esi,0x3fc
100090ee:	81 e7 fc 03 00 00    	and    edi,0x3fc
100090f4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100090fa:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009100:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009104:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000910b:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009112:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10009119:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009120:	31 c8                	xor    eax,ecx
10009122:	89 c7                	mov    edi,eax
10009124:	c1 ef 06             	shr    edi,0x6
10009127:	89 c5                	mov    ebp,eax
10009129:	c1 ed 0e             	shr    ebp,0xe
1000912c:	89 c1                	mov    ecx,eax
1000912e:	c1 e9 16             	shr    ecx,0x16
10009131:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009138:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000913e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009144:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000914a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009150:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009154:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000915b:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009162:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10009169:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009170:	31 ca                	xor    edx,ecx
10009172:	89 d7                	mov    edi,edx
10009174:	c1 ef 06             	shr    edi,0x6
10009177:	89 d5                	mov    ebp,edx
10009179:	c1 ed 0e             	shr    ebp,0xe
1000917c:	89 d1                	mov    ecx,edx
1000917e:	c1 e9 16             	shr    ecx,0x16
10009181:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009188:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000918e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009194:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000919a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100091a0:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100091a4:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100091ab:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100091b2:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
100091b9:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100091c0:	31 c8                	xor    eax,ecx
100091c2:	89 c7                	mov    edi,eax
100091c4:	c1 ef 06             	shr    edi,0x6
100091c7:	89 c5                	mov    ebp,eax
100091c9:	c1 ed 0e             	shr    ebp,0xe
100091cc:	89 c1                	mov    ecx,eax
100091ce:	c1 e9 16             	shr    ecx,0x16
100091d1:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100091d8:	81 e6 fc 03 00 00    	and    esi,0x3fc
100091de:	81 e7 fc 03 00 00    	and    edi,0x3fc
100091e4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100091ea:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100091f0:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100091f4:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100091fb:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009202:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10009209:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009210:	31 ca                	xor    edx,ecx
10009212:	89 d7                	mov    edi,edx
10009214:	c1 ef 06             	shr    edi,0x6
10009217:	89 d5                	mov    ebp,edx
10009219:	c1 ed 0e             	shr    ebp,0xe
1000921c:	89 d6                	mov    esi,edx
1000921e:	c1 ee 16             	shr    esi,0x16
10009221:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10009228:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000922e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009234:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000923a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009240:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10009244:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
1000924b:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10009252:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10009259:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10009260:	31 f0                	xor    eax,esi
10009262:	89 c5                	mov    ebp,eax
10009264:	c1 ed 06             	shr    ebp,0x6
10009267:	89 c1                	mov    ecx,eax
10009269:	c1 e9 0e             	shr    ecx,0xe
1000926c:	89 c6                	mov    esi,eax
1000926e:	c1 ee 16             	shr    esi,0x16
10009271:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10009278:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000927e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009284:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000928a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009290:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10009294:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
1000929b:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
100092a2:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
100092a9:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
100092b0:	89 f1                	mov    ecx,esi
100092b2:	31 d1                	xor    ecx,edx
100092b4:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
100092bb:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
100092be:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
100092c1:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
100092c8:	39 d3                	cmp    ebx,edx
100092ca:	0f 85 db fa ff ff    	jne    10008dab <_crypt_blowfish_rn+0x172b>
100092d0:	8b 94 24 e8 10 00 00 	mov    edx,DWORD PTR [esp+0x10e8]
100092d7:	8b 84 24 ec 10 00 00 	mov    eax,DWORD PTR [esp+0x10ec]
100092de:	8b 9c 24 f0 10 00 00 	mov    ebx,DWORD PTR [esp+0x10f0]
100092e5:	8b 8c 24 f4 10 00 00 	mov    ecx,DWORD PTR [esp+0x10f4]
100092ec:	31 94 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],edx
100092f3:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
100092fa:	31 9c 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],ebx
10009301:	31 8c 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],ecx
10009308:	31 94 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],edx
1000930f:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
10009316:	31 9c 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],ebx
1000931d:	31 8c 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],ecx
10009324:	31 94 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],edx
1000932b:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
10009332:	31 9c 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],ebx
10009339:	31 8c 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],ecx
10009340:	31 94 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],edx
10009347:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
1000934e:	31 9c 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],ebx
10009355:	31 8c 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],ecx
1000935c:	31 94 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],edx
10009363:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
1000936a:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
10009371:	be 00 00 00 00       	mov    esi,0x0
10009376:	b8 00 00 00 00       	mov    eax,0x0
1000937b:	83 c3 08             	add    ebx,0x8
1000937e:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10009385:	89 c7                	mov    edi,eax
10009387:	c1 ef 06             	shr    edi,0x6
1000938a:	89 c5                	mov    ebp,eax
1000938c:	c1 ed 0e             	shr    ebp,0xe
1000938f:	89 c2                	mov    edx,eax
10009391:	c1 ea 16             	shr    edx,0x16
10009394:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000939b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100093a1:	81 e7 fc 03 00 00    	and    edi,0x3fc
100093a7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100093ad:	81 e2 fc 03 00 00    	and    edx,0x3fc
100093b3:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100093b7:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100093be:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100093c5:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100093cc:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
100093d3:	31 d6                	xor    esi,edx
100093d5:	89 f7                	mov    edi,esi
100093d7:	c1 ef 06             	shr    edi,0x6
100093da:	89 f5                	mov    ebp,esi
100093dc:	c1 ed 0e             	shr    ebp,0xe
100093df:	89 f1                	mov    ecx,esi
100093e1:	c1 e9 16             	shr    ecx,0x16
100093e4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
100093eb:	81 e2 fc 03 00 00    	and    edx,0x3fc
100093f1:	81 e7 fc 03 00 00    	and    edi,0x3fc
100093f7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100093fd:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009403:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009407:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000940e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009415:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
1000941c:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009423:	31 c8                	xor    eax,ecx
10009425:	89 c5                	mov    ebp,eax
10009427:	c1 ed 06             	shr    ebp,0x6
1000942a:	89 c2                	mov    edx,eax
1000942c:	c1 ea 0e             	shr    edx,0xe
1000942f:	89 c1                	mov    ecx,eax
10009431:	c1 e9 16             	shr    ecx,0x16
10009434:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000943b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009441:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009447:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000944d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009453:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009457:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
1000945e:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10009465:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
1000946c:	89 ca                	mov    edx,ecx
1000946e:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10009475:	31 d6                	xor    esi,edx
10009477:	89 f7                	mov    edi,esi
10009479:	c1 ef 06             	shr    edi,0x6
1000947c:	89 f5                	mov    ebp,esi
1000947e:	c1 ed 0e             	shr    ebp,0xe
10009481:	89 f1                	mov    ecx,esi
10009483:	c1 e9 16             	shr    ecx,0x16
10009486:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
1000948d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009493:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009499:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000949f:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100094a5:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100094a9:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100094b0:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100094b7:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
100094be:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
100094c5:	31 c1                	xor    ecx,eax
100094c7:	89 cd                	mov    ebp,ecx
100094c9:	c1 ed 06             	shr    ebp,0x6
100094cc:	89 ca                	mov    edx,ecx
100094ce:	c1 ea 0e             	shr    edx,0xe
100094d1:	89 c8                	mov    eax,ecx
100094d3:	c1 e8 16             	shr    eax,0x16
100094d6:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100094dd:	81 e7 fc 03 00 00    	and    edi,0x3fc
100094e3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100094e9:	81 e2 fc 03 00 00    	and    edx,0x3fc
100094ef:	25 fc 03 00 00       	and    eax,0x3fc
100094f4:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100094f8:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
100094ff:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009506:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
1000950d:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009514:	89 c2                	mov    edx,eax
10009516:	31 f2                	xor    edx,esi
10009518:	89 d5                	mov    ebp,edx
1000951a:	c1 ed 06             	shr    ebp,0x6
1000951d:	89 d6                	mov    esi,edx
1000951f:	c1 ee 0e             	shr    esi,0xe
10009522:	89 d0                	mov    eax,edx
10009524:	c1 e8 16             	shr    eax,0x16
10009527:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
1000952e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009534:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000953a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009540:	25 fc 03 00 00       	and    eax,0x3fc
10009545:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009549:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
10009550:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009557:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
1000955e:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009565:	89 c6                	mov    esi,eax
10009567:	31 ce                	xor    esi,ecx
10009569:	89 f7                	mov    edi,esi
1000956b:	c1 ef 06             	shr    edi,0x6
1000956e:	89 f5                	mov    ebp,esi
10009570:	c1 ed 0e             	shr    ebp,0xe
10009573:	89 f0                	mov    eax,esi
10009575:	c1 e8 16             	shr    eax,0x16
10009578:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
1000957f:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009585:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000958b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009591:	25 fc 03 00 00       	and    eax,0x3fc
10009596:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000959a:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100095a1:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100095a8:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
100095af:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
100095b6:	31 c2                	xor    edx,eax
100095b8:	89 d7                	mov    edi,edx
100095ba:	c1 ef 06             	shr    edi,0x6
100095bd:	89 d5                	mov    ebp,edx
100095bf:	c1 ed 0e             	shr    ebp,0xe
100095c2:	89 d0                	mov    eax,edx
100095c4:	c1 e8 16             	shr    eax,0x16
100095c7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
100095ce:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100095d4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100095da:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100095e0:	25 fc 03 00 00       	and    eax,0x3fc
100095e5:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100095e9:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100095f0:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100095f7:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
100095fe:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10009605:	31 c6                	xor    esi,eax
10009607:	89 f7                	mov    edi,esi
10009609:	c1 ef 06             	shr    edi,0x6
1000960c:	89 f5                	mov    ebp,esi
1000960e:	c1 ed 0e             	shr    ebp,0xe
10009611:	89 f0                	mov    eax,esi
10009613:	c1 e8 16             	shr    eax,0x16
10009616:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
1000961d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009623:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009629:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000962f:	25 fc 03 00 00       	and    eax,0x3fc
10009634:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009638:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000963f:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10009646:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
1000964d:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10009654:	31 c2                	xor    edx,eax
10009656:	89 d7                	mov    edi,edx
10009658:	c1 ef 06             	shr    edi,0x6
1000965b:	89 d5                	mov    ebp,edx
1000965d:	c1 ed 0e             	shr    ebp,0xe
10009660:	89 d0                	mov    eax,edx
10009662:	c1 e8 16             	shr    eax,0x16
10009665:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000966c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009672:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009678:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000967e:	25 fc 03 00 00       	and    eax,0x3fc
10009683:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009687:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000968e:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10009695:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
1000969c:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
100096a3:	31 c6                	xor    esi,eax
100096a5:	89 f7                	mov    edi,esi
100096a7:	c1 ef 06             	shr    edi,0x6
100096aa:	89 f5                	mov    ebp,esi
100096ac:	c1 ed 0e             	shr    ebp,0xe
100096af:	89 f0                	mov    eax,esi
100096b1:	c1 e8 16             	shr    eax,0x16
100096b4:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
100096bb:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100096c1:	81 e7 fc 03 00 00    	and    edi,0x3fc
100096c7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100096cd:	25 fc 03 00 00       	and    eax,0x3fc
100096d2:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100096d6:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100096dd:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100096e4:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
100096eb:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
100096f2:	31 d0                	xor    eax,edx
100096f4:	89 c7                	mov    edi,eax
100096f6:	c1 ef 06             	shr    edi,0x6
100096f9:	89 c5                	mov    ebp,eax
100096fb:	c1 ed 0e             	shr    ebp,0xe
100096fe:	89 c2                	mov    edx,eax
10009700:	c1 ea 16             	shr    edx,0x16
10009703:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000970a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009710:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009716:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000971c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009722:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009726:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000972d:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009734:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
1000973b:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009742:	31 d6                	xor    esi,edx
10009744:	89 f7                	mov    edi,esi
10009746:	c1 ef 06             	shr    edi,0x6
10009749:	89 f5                	mov    ebp,esi
1000974b:	c1 ed 0e             	shr    ebp,0xe
1000974e:	89 f2                	mov    edx,esi
10009750:	c1 ea 16             	shr    edx,0x16
10009753:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
1000975a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009760:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009766:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000976c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009772:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009776:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000977d:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009784:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
1000978b:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009792:	31 d0                	xor    eax,edx
10009794:	89 c7                	mov    edi,eax
10009796:	c1 ef 06             	shr    edi,0x6
10009799:	89 c5                	mov    ebp,eax
1000979b:	c1 ed 0e             	shr    ebp,0xe
1000979e:	89 c2                	mov    edx,eax
100097a0:	c1 ea 16             	shr    edx,0x16
100097a3:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
100097aa:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100097b0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100097b6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100097bc:	81 e2 fc 03 00 00    	and    edx,0x3fc
100097c2:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100097c6:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100097cd:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100097d4:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
100097db:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100097e2:	31 d6                	xor    esi,edx
100097e4:	89 f2                	mov    edx,esi
100097e6:	c1 ea 06             	shr    edx,0x6
100097e9:	89 f5                	mov    ebp,esi
100097eb:	c1 ed 0e             	shr    ebp,0xe
100097ee:	89 f1                	mov    ecx,esi
100097f0:	c1 e9 16             	shr    ecx,0x16
100097f3:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100097fa:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009800:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009806:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000980c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009812:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009816:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000981d:	33 8c 14 58 08 00 00 	xor    ecx,DWORD PTR [esp+edx*1+0x858]
10009824:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
1000982b:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
10009832:	31 c8                	xor    eax,ecx
10009834:	89 c5                	mov    ebp,eax
10009836:	c1 ed 06             	shr    ebp,0x6
10009839:	89 c2                	mov    edx,eax
1000983b:	c1 ea 0e             	shr    edx,0xe
1000983e:	89 c1                	mov    ecx,eax
10009840:	c1 e9 16             	shr    ecx,0x16
10009843:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000984a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009850:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009856:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000985c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009862:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009866:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
1000986d:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10009874:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
1000987b:	89 ca                	mov    edx,ecx
1000987d:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10009884:	31 d6                	xor    esi,edx
10009886:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
1000988d:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10009890:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
10009893:	8d bc 24 a0 10 00 00 	lea    edi,[esp+0x10a0]
1000989a:	39 fb                	cmp    ebx,edi
1000989c:	0f 85 d9 fa ff ff    	jne    1000937b <_crypt_blowfish_rn+0x1cfb>
100098a2:	8d 5c 24 58          	lea    ebx,[esp+0x58]
100098a6:	83 c3 08             	add    ebx,0x8
100098a9:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
100098b0:	89 c7                	mov    edi,eax
100098b2:	c1 ef 06             	shr    edi,0x6
100098b5:	89 c5                	mov    ebp,eax
100098b7:	c1 ed 0e             	shr    ebp,0xe
100098ba:	89 c2                	mov    edx,eax
100098bc:	c1 ea 16             	shr    edx,0x16
100098bf:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
100098c6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100098cc:	81 e7 fc 03 00 00    	and    edi,0x3fc
100098d2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100098d8:	81 e2 fc 03 00 00    	and    edx,0x3fc
100098de:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100098e2:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100098e9:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100098f0:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100098f7:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
100098fe:	31 f2                	xor    edx,esi
10009900:	89 d7                	mov    edi,edx
10009902:	c1 ef 06             	shr    edi,0x6
10009905:	89 d5                	mov    ebp,edx
10009907:	c1 ed 0e             	shr    ebp,0xe
1000990a:	89 d6                	mov    esi,edx
1000990c:	c1 ee 16             	shr    esi,0x16
1000990f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10009916:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000991c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009922:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009928:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000992e:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10009932:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10009939:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10009940:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10009947:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
1000994e:	31 c6                	xor    esi,eax
10009950:	89 f7                	mov    edi,esi
10009952:	c1 ef 06             	shr    edi,0x6
10009955:	89 f5                	mov    ebp,esi
10009957:	c1 ed 0e             	shr    ebp,0xe
1000995a:	89 f1                	mov    ecx,esi
1000995c:	c1 e9 16             	shr    ecx,0x16
1000995f:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
10009966:	25 fc 03 00 00       	and    eax,0x3fc
1000996b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009971:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009977:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000997d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009981:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009988:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000998f:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10009996:	03 8c 04 58 0c 00 00 	add    ecx,DWORD PTR [esp+eax*1+0xc58]
1000999d:	31 d1                	xor    ecx,edx
1000999f:	89 c8                	mov    eax,ecx
100099a1:	c1 e8 06             	shr    eax,0x6
100099a4:	89 cd                	mov    ebp,ecx
100099a6:	c1 ed 0e             	shr    ebp,0xe
100099a9:	89 ca                	mov    edx,ecx
100099ab:	c1 ea 16             	shr    edx,0x16
100099ae:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100099b5:	81 e7 fc 03 00 00    	and    edi,0x3fc
100099bb:	25 fc 03 00 00       	and    eax,0x3fc
100099c0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100099c6:	81 e2 fc 03 00 00    	and    edx,0x3fc
100099cc:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100099d0:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100099d7:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
100099de:	33 b4 24 68 10 00 00 	xor    esi,DWORD PTR [esp+0x1068]
100099e5:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
100099ec:	31 d6                	xor    esi,edx
100099ee:	89 f2                	mov    edx,esi
100099f0:	c1 ea 06             	shr    edx,0x6
100099f3:	89 f5                	mov    ebp,esi
100099f5:	c1 ed 0e             	shr    ebp,0xe
100099f8:	89 f0                	mov    eax,esi
100099fa:	c1 e8 16             	shr    eax,0x16
100099fd:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009a04:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009a0a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009a10:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009a16:	25 fc 03 00 00       	and    eax,0x3fc
10009a1b:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009a1f:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009a26:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10009a2d:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
10009a34:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009a3b:	31 c1                	xor    ecx,eax
10009a3d:	89 c8                	mov    eax,ecx
10009a3f:	c1 e8 06             	shr    eax,0x6
10009a42:	89 cd                	mov    ebp,ecx
10009a44:	c1 ed 0e             	shr    ebp,0xe
10009a47:	89 ca                	mov    edx,ecx
10009a49:	c1 ea 16             	shr    edx,0x16
10009a4c:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009a53:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009a59:	25 fc 03 00 00       	and    eax,0x3fc
10009a5e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009a64:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009a6a:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009a6e:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009a75:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
10009a7c:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
10009a83:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10009a8a:	31 d6                	xor    esi,edx
10009a8c:	89 f2                	mov    edx,esi
10009a8e:	c1 ea 06             	shr    edx,0x6
10009a91:	89 f5                	mov    ebp,esi
10009a93:	c1 ed 0e             	shr    ebp,0xe
10009a96:	89 f0                	mov    eax,esi
10009a98:	c1 e8 16             	shr    eax,0x16
10009a9b:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009aa2:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009aa8:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009aae:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ab4:	25 fc 03 00 00       	and    eax,0x3fc
10009ab9:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009abd:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009ac4:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10009acb:	33 8c 24 74 10 00 00 	xor    ecx,DWORD PTR [esp+0x1074]
10009ad2:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009ad9:	31 c1                	xor    ecx,eax
10009adb:	89 cf                	mov    edi,ecx
10009add:	c1 ef 06             	shr    edi,0x6
10009ae0:	89 cd                	mov    ebp,ecx
10009ae2:	c1 ed 0e             	shr    ebp,0xe
10009ae5:	89 ca                	mov    edx,ecx
10009ae7:	c1 ea 16             	shr    edx,0x16
10009aea:	8d 04 8d 00 00 00 00 	lea    eax,[ecx*4+0x0]
10009af1:	25 fc 03 00 00       	and    eax,0x3fc
10009af6:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009afc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009b02:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009b08:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009b0c:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009b13:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009b1a:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
10009b21:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
10009b28:	31 d6                	xor    esi,edx
10009b2a:	89 f2                	mov    edx,esi
10009b2c:	c1 ea 06             	shr    edx,0x6
10009b2f:	89 f5                	mov    ebp,esi
10009b31:	c1 ed 0e             	shr    ebp,0xe
10009b34:	89 f0                	mov    eax,esi
10009b36:	c1 e8 16             	shr    eax,0x16
10009b39:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009b40:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009b46:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009b4c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009b52:	25 fc 03 00 00       	and    eax,0x3fc
10009b57:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009b5b:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009b62:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10009b69:	33 8c 24 7c 10 00 00 	xor    ecx,DWORD PTR [esp+0x107c]
10009b70:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009b77:	31 c8                	xor    eax,ecx
10009b79:	89 c7                	mov    edi,eax
10009b7b:	c1 ef 06             	shr    edi,0x6
10009b7e:	89 c5                	mov    ebp,eax
10009b80:	c1 ed 0e             	shr    ebp,0xe
10009b83:	89 c2                	mov    edx,eax
10009b85:	c1 ea 16             	shr    edx,0x16
10009b88:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009b8f:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009b95:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009b9b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ba1:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009ba7:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009bab:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009bb2:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009bb9:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
10009bc0:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009bc7:	31 d6                	xor    esi,edx
10009bc9:	89 f7                	mov    edi,esi
10009bcb:	c1 ef 06             	shr    edi,0x6
10009bce:	89 f5                	mov    ebp,esi
10009bd0:	c1 ed 0e             	shr    ebp,0xe
10009bd3:	89 f1                	mov    ecx,esi
10009bd5:	c1 e9 16             	shr    ecx,0x16
10009bd8:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009bdf:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009be5:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009beb:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009bf1:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009bf7:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009bfb:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009c02:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009c09:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10009c10:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009c17:	31 c8                	xor    eax,ecx
10009c19:	89 c7                	mov    edi,eax
10009c1b:	c1 ef 06             	shr    edi,0x6
10009c1e:	89 c5                	mov    ebp,eax
10009c20:	c1 ed 0e             	shr    ebp,0xe
10009c23:	89 c2                	mov    edx,eax
10009c25:	c1 ea 16             	shr    edx,0x16
10009c28:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009c2f:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009c35:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009c3b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009c41:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009c47:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009c4b:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009c52:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009c59:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
10009c60:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009c67:	31 d6                	xor    esi,edx
10009c69:	89 f7                	mov    edi,esi
10009c6b:	c1 ef 06             	shr    edi,0x6
10009c6e:	89 f5                	mov    ebp,esi
10009c70:	c1 ed 0e             	shr    ebp,0xe
10009c73:	89 f1                	mov    ecx,esi
10009c75:	c1 e9 16             	shr    ecx,0x16
10009c78:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009c7f:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009c85:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009c8b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009c91:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009c97:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009c9b:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009ca2:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009ca9:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10009cb0:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009cb7:	31 c8                	xor    eax,ecx
10009cb9:	89 c7                	mov    edi,eax
10009cbb:	c1 ef 06             	shr    edi,0x6
10009cbe:	89 c5                	mov    ebp,eax
10009cc0:	c1 ed 0e             	shr    ebp,0xe
10009cc3:	89 c2                	mov    edx,eax
10009cc5:	c1 ea 16             	shr    edx,0x16
10009cc8:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009ccf:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009cd5:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009cdb:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ce1:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009ce7:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009ceb:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009cf2:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009cf9:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
10009d00:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009d07:	31 d6                	xor    esi,edx
10009d09:	89 f7                	mov    edi,esi
10009d0b:	c1 ef 06             	shr    edi,0x6
10009d0e:	89 f5                	mov    ebp,esi
10009d10:	c1 ed 0e             	shr    ebp,0xe
10009d13:	89 f1                	mov    ecx,esi
10009d15:	c1 e9 16             	shr    ecx,0x16
10009d18:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009d1f:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009d25:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009d2b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009d31:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009d37:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009d3b:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009d42:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009d49:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10009d50:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009d57:	31 c8                	xor    eax,ecx
10009d59:	89 c7                	mov    edi,eax
10009d5b:	c1 ef 06             	shr    edi,0x6
10009d5e:	89 c5                	mov    ebp,eax
10009d60:	c1 ed 0e             	shr    ebp,0xe
10009d63:	89 c2                	mov    edx,eax
10009d65:	c1 ea 16             	shr    edx,0x16
10009d68:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009d6f:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009d75:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009d7b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009d81:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009d87:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009d8b:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009d92:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009d99:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
10009da0:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009da7:	31 d6                	xor    esi,edx
10009da9:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10009db0:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10009db3:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
10009db6:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10009dbd:	39 d3                	cmp    ebx,edx
10009dbf:	0f 85 e1 fa ff ff    	jne    100098a6 <_crypt_blowfish_rn+0x2226>
10009dc5:	ff 4c 24 04          	dec    DWORD PTR [esp+0x4]
10009dc9:	0f 85 a2 e9 ff ff    	jne    10008771 <_crypt_blowfish_rn+0x10f1>
10009dcf:	8b 84 24 58 10 00 00 	mov    eax,DWORD PTR [esp+0x1058]
10009dd6:	89 04 24             	mov    DWORD PTR [esp],eax
10009dd9:	8b 84 24 5c 10 00 00 	mov    eax,DWORD PTR [esp+0x105c]
10009de0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10009de4:	8b 84 24 60 10 00 00 	mov    eax,DWORD PTR [esp+0x1060]
10009deb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10009def:	8b 84 24 64 10 00 00 	mov    eax,DWORD PTR [esp+0x1064]
10009df6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10009dfa:	8b 84 24 68 10 00 00 	mov    eax,DWORD PTR [esp+0x1068]
10009e01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10009e05:	8b 84 24 6c 10 00 00 	mov    eax,DWORD PTR [esp+0x106c]
10009e0c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10009e10:	8b 84 24 70 10 00 00 	mov    eax,DWORD PTR [esp+0x1070]
10009e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10009e1b:	8b 84 24 74 10 00 00 	mov    eax,DWORD PTR [esp+0x1074]
10009e22:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10009e26:	8b 84 24 78 10 00 00 	mov    eax,DWORD PTR [esp+0x1078]
10009e2d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10009e31:	8b 84 24 7c 10 00 00 	mov    eax,DWORD PTR [esp+0x107c]
10009e38:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10009e3c:	8b 84 24 80 10 00 00 	mov    eax,DWORD PTR [esp+0x1080]
10009e43:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10009e47:	8b 84 24 84 10 00 00 	mov    eax,DWORD PTR [esp+0x1084]
10009e4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10009e52:	8b 84 24 88 10 00 00 	mov    eax,DWORD PTR [esp+0x1088]
10009e59:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10009e5d:	8b 84 24 8c 10 00 00 	mov    eax,DWORD PTR [esp+0x108c]
10009e64:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10009e68:	8b 84 24 90 10 00 00 	mov    eax,DWORD PTR [esp+0x1090]
10009e6f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10009e73:	8b 84 24 94 10 00 00 	mov    eax,DWORD PTR [esp+0x1094]
10009e7a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10009e7e:	8b 84 24 98 10 00 00 	mov    eax,DWORD PTR [esp+0x1098]
10009e85:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10009e89:	8b 84 24 9c 10 00 00 	mov    eax,DWORD PTR [esp+0x109c]
10009e90:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10009e94:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
10009e98:	89 5c 24 4c          	mov    DWORD PTR [esp+0x4c],ebx
10009e9c:	8b 04 9d a0 b4 00 10 	mov    eax,DWORD PTR [ebx*4+0x1000b4a0]	10009e9f: R_386_32	.data
10009ea3:	8b 0c 9d a4 b4 00 10 	mov    ecx,DWORD PTR [ebx*4+0x1000b4a4]	10009ea6: R_386_32	.data
10009eaa:	bb 40 00 00 00       	mov    ebx,0x40
10009eaf:	33 04 24             	xor    eax,DWORD PTR [esp]
10009eb2:	89 c7                	mov    edi,eax
10009eb4:	c1 ef 06             	shr    edi,0x6
10009eb7:	89 c5                	mov    ebp,eax
10009eb9:	c1 ed 0e             	shr    ebp,0xe
10009ebc:	89 c2                	mov    edx,eax
10009ebe:	c1 ea 16             	shr    edx,0x16
10009ec1:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009ec8:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009ece:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009ed4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009eda:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009ee0:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009ee4:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009eeb:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009ef2:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10009ef9:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
10009efd:	31 ca                	xor    edx,ecx
10009eff:	89 d7                	mov    edi,edx
10009f01:	c1 ef 06             	shr    edi,0x6
10009f04:	89 d5                	mov    ebp,edx
10009f06:	c1 ed 0e             	shr    ebp,0xe
10009f09:	89 d1                	mov    ecx,edx
10009f0b:	c1 e9 16             	shr    ecx,0x16
10009f0e:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009f15:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009f1b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009f21:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009f27:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009f2d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009f31:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009f38:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009f3f:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
10009f43:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009f4a:	31 c1                	xor    ecx,eax
10009f4c:	89 cd                	mov    ebp,ecx
10009f4e:	c1 ed 06             	shr    ebp,0x6
10009f51:	89 ce                	mov    esi,ecx
10009f53:	c1 ee 0e             	shr    esi,0xe
10009f56:	89 c8                	mov    eax,ecx
10009f58:	c1 e8 16             	shr    eax,0x16
10009f5b:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009f62:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009f68:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009f6e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009f74:	25 fc 03 00 00       	and    eax,0x3fc
10009f79:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009f7d:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
10009f84:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009f8b:	33 54 24 0c          	xor    edx,DWORD PTR [esp+0xc]
10009f8f:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009f96:	89 c6                	mov    esi,eax
10009f98:	31 d6                	xor    esi,edx
10009f9a:	89 f5                	mov    ebp,esi
10009f9c:	c1 ed 06             	shr    ebp,0x6
10009f9f:	89 f2                	mov    edx,esi
10009fa1:	c1 ea 0e             	shr    edx,0xe
10009fa4:	89 f0                	mov    eax,esi
10009fa6:	c1 e8 16             	shr    eax,0x16
10009fa9:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009fb0:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009fb6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009fbc:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009fc2:	25 fc 03 00 00       	and    eax,0x3fc
10009fc7:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009fcb:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10009fd2:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009fd9:	33 4c 24 10          	xor    ecx,DWORD PTR [esp+0x10]
10009fdd:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009fe4:	31 c1                	xor    ecx,eax
10009fe6:	89 ca                	mov    edx,ecx
10009fe8:	c1 ea 06             	shr    edx,0x6
10009feb:	89 cd                	mov    ebp,ecx
10009fed:	c1 ed 0e             	shr    ebp,0xe
10009ff0:	89 c8                	mov    eax,ecx
10009ff2:	c1 e8 16             	shr    eax,0x16
10009ff5:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009ffc:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a002:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a008:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a00e:	25 fc 03 00 00       	and    eax,0x3fc
1000a013:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a017:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a01e:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000a025:	33 74 24 14          	xor    esi,DWORD PTR [esp+0x14]
1000a029:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000a030:	31 f0                	xor    eax,esi
1000a032:	89 c7                	mov    edi,eax
1000a034:	c1 ef 06             	shr    edi,0x6
1000a037:	89 c5                	mov    ebp,eax
1000a039:	c1 ed 0e             	shr    ebp,0xe
1000a03c:	89 c2                	mov    edx,eax
1000a03e:	c1 ea 16             	shr    edx,0x16
1000a041:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a048:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a04e:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a054:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a05a:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a060:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a064:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a06b:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a072:	33 4c 24 18          	xor    ecx,DWORD PTR [esp+0x18]
1000a076:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000a07d:	31 ca                	xor    edx,ecx
1000a07f:	89 d7                	mov    edi,edx
1000a081:	c1 ef 06             	shr    edi,0x6
1000a084:	89 d5                	mov    ebp,edx
1000a086:	c1 ed 0e             	shr    ebp,0xe
1000a089:	89 d1                	mov    ecx,edx
1000a08b:	c1 e9 16             	shr    ecx,0x16
1000a08e:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000a095:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a09b:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a0a1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a0a7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a0ad:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a0b1:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a0b8:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a0bf:	33 44 24 1c          	xor    eax,DWORD PTR [esp+0x1c]
1000a0c3:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a0ca:	31 c8                	xor    eax,ecx
1000a0cc:	89 c7                	mov    edi,eax
1000a0ce:	c1 ef 06             	shr    edi,0x6
1000a0d1:	89 c5                	mov    ebp,eax
1000a0d3:	c1 ed 0e             	shr    ebp,0xe
1000a0d6:	89 c1                	mov    ecx,eax
1000a0d8:	c1 e9 16             	shr    ecx,0x16
1000a0db:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a0e2:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a0e8:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a0ee:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a0f4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a0fa:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a0fe:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a105:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a10c:	33 54 24 20          	xor    edx,DWORD PTR [esp+0x20]
1000a110:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a117:	31 ca                	xor    edx,ecx
1000a119:	89 d7                	mov    edi,edx
1000a11b:	c1 ef 06             	shr    edi,0x6
1000a11e:	89 d5                	mov    ebp,edx
1000a120:	c1 ed 0e             	shr    ebp,0xe
1000a123:	89 d1                	mov    ecx,edx
1000a125:	c1 e9 16             	shr    ecx,0x16
1000a128:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000a12f:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a135:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a13b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a141:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a147:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a14b:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a152:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a159:	33 44 24 24          	xor    eax,DWORD PTR [esp+0x24]
1000a15d:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a164:	31 c8                	xor    eax,ecx
1000a166:	89 c7                	mov    edi,eax
1000a168:	c1 ef 06             	shr    edi,0x6
1000a16b:	89 c5                	mov    ebp,eax
1000a16d:	c1 ed 0e             	shr    ebp,0xe
1000a170:	89 c1                	mov    ecx,eax
1000a172:	c1 e9 16             	shr    ecx,0x16
1000a175:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a17c:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a182:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a188:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a18e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a194:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a198:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a19f:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a1a6:	33 54 24 28          	xor    edx,DWORD PTR [esp+0x28]
1000a1aa:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a1b1:	31 ca                	xor    edx,ecx
1000a1b3:	89 d7                	mov    edi,edx
1000a1b5:	c1 ef 06             	shr    edi,0x6
1000a1b8:	89 d5                	mov    ebp,edx
1000a1ba:	c1 ed 0e             	shr    ebp,0xe
1000a1bd:	89 d1                	mov    ecx,edx
1000a1bf:	c1 e9 16             	shr    ecx,0x16
1000a1c2:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000a1c9:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a1cf:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a1d5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a1db:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a1e1:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a1e5:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a1ec:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a1f3:	33 44 24 2c          	xor    eax,DWORD PTR [esp+0x2c]
1000a1f7:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a1fe:	31 c8                	xor    eax,ecx
1000a200:	89 c7                	mov    edi,eax
1000a202:	c1 ef 06             	shr    edi,0x6
1000a205:	89 c5                	mov    ebp,eax
1000a207:	c1 ed 0e             	shr    ebp,0xe
1000a20a:	89 c1                	mov    ecx,eax
1000a20c:	c1 e9 16             	shr    ecx,0x16
1000a20f:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a216:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a21c:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a222:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a228:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a22e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a232:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a239:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a240:	33 54 24 30          	xor    edx,DWORD PTR [esp+0x30]
1000a244:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a24b:	31 ca                	xor    edx,ecx
1000a24d:	89 d7                	mov    edi,edx
1000a24f:	c1 ef 06             	shr    edi,0x6
1000a252:	89 d5                	mov    ebp,edx
1000a254:	c1 ed 0e             	shr    ebp,0xe
1000a257:	89 d1                	mov    ecx,edx
1000a259:	c1 e9 16             	shr    ecx,0x16
1000a25c:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000a263:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a269:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a26f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a275:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a27b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a27f:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a286:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a28d:	33 44 24 34          	xor    eax,DWORD PTR [esp+0x34]
1000a291:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a298:	31 c8                	xor    eax,ecx
1000a29a:	89 c7                	mov    edi,eax
1000a29c:	c1 ef 06             	shr    edi,0x6
1000a29f:	89 c5                	mov    ebp,eax
1000a2a1:	c1 ed 0e             	shr    ebp,0xe
1000a2a4:	89 c1                	mov    ecx,eax
1000a2a6:	c1 e9 16             	shr    ecx,0x16
1000a2a9:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a2b0:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a2b6:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a2bc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a2c2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a2c8:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a2cc:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a2d3:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a2da:	33 54 24 38          	xor    edx,DWORD PTR [esp+0x38]
1000a2de:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a2e5:	31 ca                	xor    edx,ecx
1000a2e7:	89 d7                	mov    edi,edx
1000a2e9:	c1 ef 06             	shr    edi,0x6
1000a2ec:	89 d5                	mov    ebp,edx
1000a2ee:	c1 ed 0e             	shr    ebp,0xe
1000a2f1:	89 d6                	mov    esi,edx
1000a2f3:	c1 ee 16             	shr    esi,0x16
1000a2f6:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000a2fd:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a303:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a309:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a30f:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a315:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000a319:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
1000a320:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
1000a327:	33 44 24 3c          	xor    eax,DWORD PTR [esp+0x3c]
1000a32b:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
1000a332:	31 f0                	xor    eax,esi
1000a334:	89 c5                	mov    ebp,eax
1000a336:	c1 ed 06             	shr    ebp,0x6
1000a339:	89 c1                	mov    ecx,eax
1000a33b:	c1 e9 0e             	shr    ecx,0xe
1000a33e:	89 c6                	mov    esi,eax
1000a340:	c1 ee 16             	shr    esi,0x16
1000a343:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000a34a:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a350:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a356:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a35c:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a362:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000a366:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
1000a36d:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
1000a374:	33 54 24 40          	xor    edx,DWORD PTR [esp+0x40]
1000a378:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
1000a37f:	89 f1                	mov    ecx,esi
1000a381:	31 d1                	xor    ecx,edx
1000a383:	33 44 24 44          	xor    eax,DWORD PTR [esp+0x44]
1000a387:	4b                   	dec    ebx
1000a388:	0f 85 21 fb ff ff    	jne    10009eaf <_crypt_blowfish_rn+0x282f>
1000a38e:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
1000a392:	89 84 9c e8 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10e8],eax
1000a399:	89 8c 9c ec 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10ec],ecx
1000a3a0:	83 44 24 48 02       	add    DWORD PTR [esp+0x48],0x2
1000a3a5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000a3a9:	83 f8 06             	cmp    eax,0x6
1000a3ac:	0f 85 e2 fa ff ff    	jne    10009e94 <_crypt_blowfish_rn+0x2814>
1000a3b2:	b9 07 00 00 00       	mov    ecx,0x7
1000a3b7:	8b bc 24 1c 11 00 00 	mov    edi,DWORD PTR [esp+0x111c]
1000a3be:	8b b4 24 18 11 00 00 	mov    esi,DWORD PTR [esp+0x1118]
1000a3c5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000a3c7:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
1000a3ce:	0f be 40 1c          	movsx  eax,BYTE PTR [eax+0x1c]
1000a3d2:	8a 80 60 c5 00 10    	mov    al,BYTE PTR [eax+0x1000c560]	1000a3d4: R_386_32	.data
1000a3d8:	83 e0 30             	and    eax,0x30
1000a3db:	8a 80 20 c5 00 10    	mov    al,BYTE PTR [eax+0x1000c520]	1000a3dd: R_386_32	.data
1000a3e1:	88 04 24             	mov    BYTE PTR [esp],al
1000a3e4:	8b 9c 24 1c 11 00 00 	mov    ebx,DWORD PTR [esp+0x111c]
1000a3eb:	88 43 1c             	mov    BYTE PTR [ebx+0x1c],al
1000a3ee:	6a 06                	push   0x6
1000a3f0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
1000a3f4:	8d 9c 24 ec 10 00 00 	lea    ebx,[esp+0x10ec]
1000a3fb:	53                   	push   ebx
1000a3fc:	e8 f5 d1 ff ff       	call   100075f6 <BF_swap>
1000a401:	6a 17                	push   0x17
1000a403:	53                   	push   ebx
1000a404:	8b 84 24 2c 11 00 00 	mov    eax,DWORD PTR [esp+0x112c]
1000a40b:	83 c0 1d             	add    eax,0x1d
1000a40e:	50                   	push   eax
1000a40f:	e8 3d d1 ff ff       	call   10007551 <BF_encode>
1000a414:	8b 84 24 30 11 00 00 	mov    eax,DWORD PTR [esp+0x1130]
1000a41b:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
1000a41f:	68 a8 10 00 00       	push   0x10a8
1000a424:	56                   	push   esi
1000a425:	e8 0b d0 ff ff       	call   10007435 <clean>
1000a42a:	83 c4 1c             	add    esp,0x1c
1000a42d:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
1000a434:	eb 29                	jmp    1000a45f <_crypt_blowfish_rn+0x2ddf>
1000a436:	c7 05 00 00 00 00 22 00 00 00 	mov    DWORD PTR ds:0x0,0x22	1000a438: R_386_32	_bcrypt_errno
1000a440:	b8 00 00 00 00       	mov    eax,0x0
1000a445:	eb 18                	jmp    1000a45f <_crypt_blowfish_rn+0x2ddf>
1000a447:	80 fa 31             	cmp    dl,0x31
1000a44a:	0f 8e a3 d2 ff ff    	jle    100076f3 <_crypt_blowfish_rn+0x73>
1000a450:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000a452: R_386_32	_bcrypt_errno
1000a45a:	b8 00 00 00 00       	mov    eax,0x0
1000a45f:	81 c4 00 11 00 00    	add    esp,0x1100
1000a465:	5b                   	pop    ebx
1000a466:	5e                   	pop    esi
1000a467:	5f                   	pop    edi
1000a468:	5d                   	pop    ebp
1000a469:	c3                   	ret    
1000a46a:	6a 10                	push   0x10
1000a46c:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
1000a473:	50                   	push   eax
1000a474:	e8 bc cf ff ff       	call   10007435 <clean>
1000a479:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000a47b: R_386_32	_bcrypt_errno
1000a483:	83 c4 08             	add    esp,0x8
1000a486:	b8 00 00 00 00       	mov    eax,0x0
1000a48b:	eb d2                	jmp    1000a45f <_crypt_blowfish_rn+0x2ddf>

1000a48d <_crypt_gensalt_blowfish_rn>:
1000a48d:	53                   	push   ebx
1000a48e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000a492:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000a496:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
1000a49b:	7e 19                	jle    1000a4b6 <_crypt_gensalt_blowfish_rn+0x29>
1000a49d:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
1000a4a2:	0f 8e 88 00 00 00    	jle    1000a530 <_crypt_gensalt_blowfish_rn+0xa3>
1000a4a8:	85 c9                	test   ecx,ecx
1000a4aa:	74 33                	je     1000a4df <_crypt_gensalt_blowfish_rn+0x52>
1000a4ac:	8d 41 fc             	lea    eax,[ecx-0x4]
1000a4af:	83 f8 1b             	cmp    eax,0x1b
1000a4b2:	76 30                	jbe    1000a4e4 <_crypt_gensalt_blowfish_rn+0x57>
1000a4b4:	eb 07                	jmp    1000a4bd <_crypt_gensalt_blowfish_rn+0x30>
1000a4b6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000a4bb:	7e 03                	jle    1000a4c0 <_crypt_gensalt_blowfish_rn+0x33>
1000a4bd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
1000a4c0:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
1000a4c5:	7e 11                	jle    1000a4d8 <_crypt_gensalt_blowfish_rn+0x4b>
1000a4c7:	b8 16 00 00 00       	mov    eax,0x16
1000a4cc:	a3 00 00 00 00       	mov    ds:0x0,eax	1000a4cd: R_386_32	_bcrypt_errno
1000a4d1:	b8 00 00 00 00       	mov    eax,0x0
1000a4d6:	eb 56                	jmp    1000a52e <_crypt_gensalt_blowfish_rn+0xa1>
1000a4d8:	b8 22 00 00 00       	mov    eax,0x22
1000a4dd:	eb ed                	jmp    1000a4cc <_crypt_gensalt_blowfish_rn+0x3f>
1000a4df:	b9 05 00 00 00       	mov    ecx,0x5
1000a4e4:	c6 03 24             	mov    BYTE PTR [ebx],0x24
1000a4e7:	c6 43 01 32          	mov    BYTE PTR [ebx+0x1],0x32
1000a4eb:	c6 43 02 61          	mov    BYTE PTR [ebx+0x2],0x61
1000a4ef:	c6 43 03 24          	mov    BYTE PTR [ebx+0x3],0x24
1000a4f3:	b8 cd cc cc cc       	mov    eax,0xcccccccd
1000a4f8:	f7 e1                	mul    ecx
1000a4fa:	89 d0                	mov    eax,edx
1000a4fc:	c1 e8 03             	shr    eax,0x3
1000a4ff:	8d 50 30             	lea    edx,[eax+0x30]
1000a502:	88 53 04             	mov    BYTE PTR [ebx+0x4],dl
1000a505:	8d 04 80             	lea    eax,[eax+eax*4]
1000a508:	01 c0                	add    eax,eax
1000a50a:	29 c1                	sub    ecx,eax
1000a50c:	83 c1 30             	add    ecx,0x30
1000a50f:	88 4b 05             	mov    BYTE PTR [ebx+0x5],cl
1000a512:	c6 43 06 24          	mov    BYTE PTR [ebx+0x6],0x24
1000a516:	6a 10                	push   0x10
1000a518:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a51c:	8d 43 07             	lea    eax,[ebx+0x7]
1000a51f:	50                   	push   eax
1000a520:	e8 2c d0 ff ff       	call   10007551 <BF_encode>
1000a525:	c6 43 1d 00          	mov    BYTE PTR [ebx+0x1d],0x0
1000a529:	83 c4 0c             	add    esp,0xc
1000a52c:	89 d8                	mov    eax,ebx
1000a52e:	5b                   	pop    ebx
1000a52f:	c3                   	ret    
1000a530:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000a535:	7f 86                	jg     1000a4bd <_crypt_gensalt_blowfish_rn+0x30>
1000a537:	b8 22 00 00 00       	mov    eax,0x22
1000a53c:	eb 8e                	jmp    1000a4cc <_crypt_gensalt_blowfish_rn+0x3f>

1000a53e <bcrypt_gensalt>:
1000a53e:	57                   	push   edi
1000a53f:	56                   	push   esi
1000a540:	53                   	push   ebx
1000a541:	83 ec 10             	sub    esp,0x10
1000a544:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000a548:	89 e3                	mov    ebx,esp
1000a54a:	8d 74 24 10          	lea    esi,[esp+0x10]
1000a54e:	e8 fc ff ff ff       	call   1000a54f <bcrypt_gensalt+0x11>	1000a54f: R_386_PC32	_bcrypt_rand
1000a553:	88 03                	mov    BYTE PTR [ebx],al
1000a555:	43                   	inc    ebx
1000a556:	39 f3                	cmp    ebx,esi
1000a558:	75 f4                	jne    1000a54e <bcrypt_gensalt+0x10>
1000a55a:	8d 47 fc             	lea    eax,[edi-0x4]
1000a55d:	83 f8 1b             	cmp    eax,0x1b
1000a560:	76 05                	jbe    1000a567 <bcrypt_gensalt+0x29>
1000a562:	bf 0c 00 00 00       	mov    edi,0xc
1000a567:	83 ec 0c             	sub    esp,0xc
1000a56a:	6a 40                	push   0x40
1000a56c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
1000a570:	6a 10                	push   0x10
1000a572:	8d 44 24 18          	lea    eax,[esp+0x18]
1000a576:	50                   	push   eax
1000a577:	57                   	push   edi
1000a578:	e8 10 ff ff ff       	call   1000a48d <_crypt_gensalt_blowfish_rn>
1000a57d:	85 c0                	test   eax,eax
1000a57f:	0f 94 c0             	sete   al
1000a582:	0f b6 c0             	movzx  eax,al
1000a585:	83 c4 30             	add    esp,0x30
1000a588:	5b                   	pop    ebx
1000a589:	5e                   	pop    esi
1000a58a:	5f                   	pop    edi
1000a58b:	c3                   	ret    

1000a58c <bcrypt_hashpw>:
1000a58c:	6a 40                	push   0x40
1000a58e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a592:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a596:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a59a:	e8 e1 d0 ff ff       	call   10007680 <_crypt_blowfish_rn>
1000a59f:	83 c4 10             	add    esp,0x10
1000a5a2:	85 c0                	test   eax,eax
1000a5a4:	0f 94 c0             	sete   al
1000a5a7:	0f b6 c0             	movzx  eax,al
1000a5aa:	c3                   	ret    
1000a5ab:	90                   	nop

1000a5ac <TERMINAL_KEYBUFFER_IN_SIZE>:
1000a5ac:	80 00 00 00                                         ....

1000a5b0 <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000a5b0:	80 00 00 00 2e 00 2e 2e 00 2f 00 43 6f 75 6c 64     ........./.Could
1000a5c0:	6e 27 74 20 6f 70 65 6e 20 62 61 73 65 20 70 61     n't open base pa
1000a5d0:	74 68 2e 0a 00 25 73 20 2d 3e 20 25 73 0a 00 43     th...%s -> %s..C
1000a5e0:	4f 55 4c 44 20 4e 4f 54 20 43 52 45 41 54 45 00     OULD NOT CREATE.
1000a5f0:	43 4f 55 4c 44 20 4e 4f 54 20 43 4f 50 59 00 4e     COULD NOT COPY.N
1000a600:	4f 20 4d 45 4d 4f 52 59 00 42 61 63 6b 75 70 00     O MEMORY.Backup.
1000a610:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000a620:	2f 42 61 63 6b 75 70 2f 00 30 31 32 33 34 35 36     /Backup/.0123456
1000a630:	37 38 39 41 42 43 44 45 46 00 43 3a 2f 55 73 65     789ABCDEF.C:/Use
1000a640:	72 73 2f 00 2f 44 65 73 6b 74 6f 70 00 2f 44 6f     rs/./Desktop./Do
1000a650:	63 75 6d 65 6e 74 73 00 2f 44 6f 77 6e 6c 6f 61     cuments./Downloa
1000a660:	64 73 00 2f 50 69 63 74 75 72 65 73 00 2f 54 72     ds./Pictures./Tr
1000a670:	61 73 68 20 42 69 6e 00 2f 4d 75 73 69 63 00 2f     ash Bin./Music./
1000a680:	4d 6f 76 69 65 73 00 43 3a 2f 42 61 6e 61 6e 61     Movies.C:/Banana
1000a690:	2f 52 65 67 69 73 74 72 79 2f 55 73 65 72 2f 00     /Registry/User/.
1000a6a0:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000a6b0:	72 79 2f 44 65 66 61 75 6c 74 55 73 65 72 00 00     ry/DefaultUser..
1000a6c0:	43 68 65 63 6b 69 6e 67 0a 20 73 79 73 74 65 6d     Checking. system
1000a6d0:	0a 20 72 65 71 75 69 72 65 6d 65 6e 74 73 0a 0a     . requirements..
1000a6e0:	20 4c 65 67 61 6c 0a 20 6e 6f 74 69 63 65 73 0a      Legal. notices.
1000a6f0:	0a 20 43 68 6f 6f 73 69 6e 67 20 61 0a 20 70 61     . Choosing a. pa
1000a700:	72 74 69 74 69 6f 6e 0a 0a 20 46 6f 72 6d 61 74     rtition.. Format
1000a710:	74 69 6e 67 0a 0a 20 43 6f 70 79 69 6e 67 20 66     ting.. Copying f
1000a720:	69 6c 65 73 0a 0a 20 52 65 73 74 61 72 74 69 6e     iles.. Restartin
1000a730:	67 0a 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72     g. your computer
1000a740:	0a 0a 00 20 46 69 6e 61 6c 69 73 69 6e 67 20 74     ... Finalising t
1000a750:	68 65 0a 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     he. installation
1000a760:	00 00 00 00 50 6c 65 61 73 65 20 77 61 69 74 20     ....Please wait 
1000a770:	77 68 69 6c 65 20 74 68 65 20 69 6e 73 74 61 6c     while the instal
1000a780:	6c 20 66 69 6e 69 73 68 65 73 2e 00 10 20 00 20     l finishes... . 
1000a790:	20 00 41 6c 6c 6f 63 61 74 69 6e 67 20 74 68 65      .Allocating the
1000a7a0:	20 73 77 61 70 66 69 6c 65 00 55 70 64 61 74 69      swapfile.Updati
1000a7b0:	6e 67 20 74 68 65 20 72 65 67 69 73 74 72 79 00     ng the registry.
1000a7c0:	43 72 65 61 74 69 6e 67 20 75 73 65 72 20 61 63     Creating user ac
1000a7d0:	63 6f 75 6e 74 00 49 6e 73 74 61 6c 6c 69 6e 67     count.Installing
1000a7e0:	20 70 61 63 6b 61 67 65 73 00 42 61 63 6b 69 6e      packages.Backin
1000a7f0:	67 20 75 70 20 73 79 73 74 65 6d 20 66 69 6c 65     g up system file
1000a800:	73 00 46 69 6e 69 73 68 69 6e 67 20 74 6f 75 63     s.Finishing touc
1000a810:	68 65 73 00 51 51 2d 30 30 30 2d 30 30 30 2d 30     hes.QQ-000-000-0
1000a820:	30 30 2d 51 00 00 00 00 43 3a 2f 42 61 6e 61 6e     00-Q....C:/Banan
1000a830:	61 2f 53 79 73 74 65 6d 2f 74 69 6d 65 7a 6f 6e     a/System/timezon
1000a840:	65 73 2e 74 78 74 00 20 00 2e 2e 2e 20 00 00 00     es.txt. .... ...
1000a850:	53 65 74 74 69 6e 67 20 75 70 20 74 68 65 20 73     Setting up the s
1000a860:	79 73 74 65 6d 20 66 6f 72 20 74 68 65 20 66 69     ystem for the fi
1000a870:	72 73 74 20 74 69 6d 65 00 0a 0a 0a 0a 0a 0a 00     rst time........
1000a880:	54 65 73 74 00 41 41 2d 30 30 30 30 30 2d 30 30     Test.AA-00000-00
1000a890:	30 30 30 2d 41 00 57 57 2d 38 38 33 38 38 2d 35     000-A.WW-88388-5
1000a8a0:	35 35 35 35 2d 4e 00 43 72 65 61 74 65 20 4e 65     5555-N.Create Ne
1000a8b0:	77 20 55 73 65 72 00 42 61 6e 61 6e 61 20 53 65     w User.Banana Se
1000a8c0:	74 75 70 00 50 6c 65 61 73 65 20 65 6e 74 65 72     tup.Please enter
1000a8d0:	20 79 6f 75 72 20 64 65 74 61 69 6c 73 2e 20 50      your details. P
1000a8e0:	72 65 73 73 20 54 41 42 20 74 6f 20 73 77 69 74     ress TAB to swit
1000a8f0:	63 68 00 00 62 65 74 77 65 65 6e 20 66 69 65 6c     ch..between fiel
1000a900:	64 73 2c 20 6f 72 20 45 53 43 20 74 6f 20 63 61     ds, or ESC to ca
1000a910:	6e 63 65 6c 2e 00 62 65 74 77 65 65 6e 20 66 69     ncel..between fi
1000a920:	65 6c 64 73 2e 00 4e 61 6d 65 00 43 6f 6d 70 61     elds..Name.Compa
1000a930:	6e 79 00 50 61 73 73 77 6f 72 64 00 43 6f 6e 66     ny.Password.Conf
1000a940:	69 72 6d 00 70 61 73 73 77 6f 72 64 00 00 00 00     irm.password....
1000a950:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000a960:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000a970:	20 20 20 20 00 20 11 00 20 20 20 00 2a 00 50 72         . ..   .*.Pr
1000a980:	65 73 73 20 45 4e 54 45 52 20 74 6f 20 73 75 62     ess ENTER to sub
1000a990:	6d 69 74 00 20 20 20 20 20 20 20 20 20 20 20 20     mit.            
1000a9a0:	20 20 20 20 20 20 20 20 20 20 00 20 20 20 4f 4b               .   OK
1000a9b0:	20 20 20 00 20 20 11 00 43 4f 55 4c 44 20 4e 4f        .  ..COULD NO
1000a9c0:	54 20 53 41 56 45 00 59 4f 55 52 20 50 41 53 53     T SAVE.YOUR PASS
1000a9d0:	57 4f 52 44 20 28 41 29 00 59 4f 55 52 20 50 41     WORD (A).YOUR PA
1000a9e0:	53 53 57 4f 52 44 20 28 42 29 00 44 61 74 65 20     SSWORD (B).Date 
1000a9f0:	61 6e 64 20 54 69 6d 65 00 31 34 2f 30 35 2f 32     and Time.14/05/2
1000aa00:	30 32 31 20 31 38 3a 35 35 3a 30 30 00 00 00 00     021 18:55:00....
1000aa10:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 74 68 65     Please enter the
1000aa20:	20 63 75 72 72 65 6e 74 20 64 61 74 65 20 61 6e      current date an
1000aa30:	64 20 74 69 6d 65 2c 00 61 6e 64 20 74 68 65 6e     d time,.and then
1000aa40:	20 70 72 65 73 73 20 45 4e 54 45 52 2e 00 44 44      press ENTER..DD
1000aa50:	2f 4d 4d 2f 59 59 59 59 20 48 48 3a 4d 4d 3a 53     /MM/YYYY HH:MM:S
1000aa60:	53 00 45 53 43 3a 20 47 6f 20 62 61 63 6b 20 61     S.ESC: Go back a
1000aa70:	20 73 63 72 65 65 6e 00 50 6c 65 61 73 65 20 73      screen.Please s
1000aa80:	65 6c 65 63 74 20 79 6f 75 72 20 74 69 6d 65 7a     elect your timez
1000aa90:	6f 6e 65 20 61 6e 64 20 74 68 65 6e 20 70 72 65     one and then pre
1000aaa0:	73 73 20 45 4e 54 45 52 2e 00 54 5a 48 52 3a 20     ss ENTER..TZHR: 
1000aab0:	25 64 3a 25 64 0a 00 55 73 65 72 20 49 6e 74 65     %d:%d..User Inte
1000aac0:	72 66 61 63 65 00 00 00 50 6c 65 61 73 65 20 73     rface...Please s
1000aad0:	65 6c 65 63 74 20 74 68 65 20 75 73 65 72 20 69     elect the user i
1000aae0:	6e 74 65 72 66 61 63 65 20 79 6f 75 20 77 61 6e     nterface you wan
1000aaf0:	74 20 42 61 6e 61 6e 61 00 00 00 00 74 6f 20 62     t Banana....to b
1000ab00:	6f 6f 74 20 69 6e 74 6f 20 62 79 20 64 65 66 61     oot into by defa
1000ab10:	75 6c 74 20 77 68 65 6e 20 79 6f 75 20 73 74 61     ult when you sta
1000ab20:	72 74 20 74 68 65 20 63 6f 6d 70 75 74 65 72 2e     rt the computer.
1000ab30:	00 49 6e 76 61 6c 69 64 20 50 72 6f 64 75 63 74     .Invalid Product
1000ab40:	20 4b 65 79 00 00 00 00 59 6f 75 20 64 6f 20 6e      Key....You do n
1000ab50:	6f 74 20 68 61 76 65 20 61 20 76 61 6c 69 64 20     ot have a valid 
1000ab60:	70 72 6f 64 75 63 74 20 6b 65 79 2e 0a 00 00 00     product key.....
1000ab70:	59 6f 75 20 6e 65 65 64 20 61 20 76 61 6c 69 64     You need a valid
1000ab80:	20 70 72 6f 64 75 63 74 20 6b 65 79 20 69 6e 20      product key in 
1000ab90:	6f 72 64 65 72 20 74 6f 00 75 73 65 20 42 61 6e     order to.use Ban
1000aba0:	61 6e 61 2e 00 00 00 00 50 72 65 73 73 20 45 4e     ana.....Press EN
1000abb0:	54 45 52 20 74 6f 20 72 65 2d 65 6e 74 65 72 20     TER to re-enter 
1000abc0:	79 6f 75 72 20 70 72 6f 64 75 63 74 20 6b 65 79     your product key
1000abd0:	2e 00 50 72 6f 64 75 63 74 20 4b 65 79 00 00 00     ..Product Key...
1000abe0:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 79 6f 75     Please enter you
1000abf0:	72 20 70 72 6f 64 75 63 74 20 6b 65 79 20 62 65     r product key be
1000ac00:	6c 6f 77 2c 00 00 00 00 54 68 65 20 65 6e 74 65     low,....The ente
1000ac10:	72 65 64 20 70 72 6f 64 75 63 74 20 6b 65 79 20     red product key 
1000ac20:	77 61 73 20 69 6e 76 61 6c 69 64 2e 00 00 00 00     was invalid.....
1000ac30:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 20 74 6f     Press any key to
1000ac40:	20 63 6f 6e 74 69 6e 75 65 20 61 6e 64 20 74 68      continue and th
1000ac50:	65 6e 00 00 65 6e 74 65 72 20 74 68 65 20 70 72     en..enter the pr
1000ac60:	6f 64 75 63 74 20 6b 65 79 20 63 6f 72 72 65 63     oduct key correc
1000ac70:	74 6c 79 2e 00 46 69 6e 61 6c 69 73 69 6e 67 20     tly..Finalising 
1000ac80:	49 6e 73 74 61 6c 6c 61 74 69 6f 6e 00 00 00 00     Installation....
1000ac90:	53 59 53 54 45 4d 2e 44 4c 4c 20 54 4f 44 4f 3a     SYSTEM.DLL TODO:
1000aca0:	20 72 65 67 69 73 74 72 79 20 72 65 61 64 0a 00      registry read..
1000acb0:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000acc0:	72 79 2f 53 79 73 74 65 6d 00 43 3a 2f 42 61 6e     ry/System.C:/Ban
1000acd0:	61 6e 61 2f 52 65 67 69 73 74 72 79 2f 55 73 65     ana/Registry/Use
1000ace0:	72 00 00 00 43 3a 2f 42 61 6e 61 6e 61 2f 52 65     r...C:/Banana/Re
1000acf0:	67 69 73 74 72 79 2f 44 65 66 61 75 6c 74 53 79     gistry/DefaultSy
1000ad00:	73 74 65 6d 00 00 00 00 20 42 6f 6f 74 20 74 6f     stem.... Boot to
1000ad10:	20 63 6f 6d 6d 61 6e 64 20 6c 69 6e 65 20 20 20      command line   
1000ad20:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
1000ad30:	20 42 6f 6f 74 20 74 6f 20 67 72 61 70 68 69 63      Boot to graphic
1000ad40:	61 6c 20 69 6e 74 65 72 66 61 63 65 20 28 56 47     al interface (VG
1000ad50:	41 29 20 20 00 00 00 00 20 42 6f 6f 74 20 74 6f     A)  .... Boot to
1000ad60:	20 67 72 61 70 68 69 63 61 6c 20 69 6e 74 65 72      graphical inter
1000ad70:	66 61 63 65 20 28 56 45 53 41 29 20 00 00 00 00     face (VESA) ....
1000ad80:	08 ad 00 10 30 ad 00 10 58 ad 00 10 4c 6f 61 64     ....0...X...Load	1000ad80: R_386_32	.text
	1000ad84: R_386_32	.text
	1000ad88: R_386_32	.text
1000ad90:	69 6e 67 20 65 78 74 65 6e 73 69 6f 6e 73 2e 2e     ing extensions..
1000ada0:	2e 00 0a 0a 3a 0a 00 2f 25 73 0a 00 43 3a 2f 42     ....:../%s..C:/B
1000adb0:	61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 73 65 74     anana/System/set
1000adc0:	75 70 69 73 64 2e 6f 6e 65 00 53 59 53 49 4e 49     upisd.one.SYSINI
1000add0:	54 20 46 41 49 4c 55 52 45 00 43 3a 2f 42 61 6e     T FAILURE.C:/Ban
1000ade0:	61 6e 61 2f 53 79 73 74 65 6d 2f 63 6f 6d 6d 61     ana/System/comma
1000adf0:	6e 64 2e 65 78 65 00 43 3a 2f 44 45 2e 42 55 47     nd.exe.C:/DE.BUG
1000ae00:	00 00 00 00 43 3a 2f 42 61 6e 61 6e 61 2f 52 65     ....C:/Banana/Re
1000ae10:	67 69 73 74 72 79 2f 53 79 73 74 65 6d 2f 53 59     gistry/System/SY
1000ae20:	53 54 45 4d 2e 52 45 47 00 42 41 4e 41 4e 41 00     STEM.REG.BANANA.
1000ae30:	72 65 67 73 61 66 65 6e 61 6d 65 20 3d 20 25 73     regsafename = %s
1000ae40:	0a 00 42 41 4e 41 4e 41 2f 55 53 45 52 53 2f 00     ..BANANA/USERS/.
1000ae50:	75 73 65 72 42 61 73 65 50 61 74 68 20 3d 20 25     userBasePath = %
1000ae60:	73 0a 00 53 45 54 55 50 00 42 4f 4f 54 00 54 49     s..SETUP.BOOT.TI
1000ae70:	4d 45 00 55 53 45 52 53 00 46 49 4c 45 41 53 53     ME.USERS.FILEASS
1000ae80:	4f 43 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53     OC.BANANA/FILEAS
1000ae90:	53 4f 43 00 4f 50 45 4e 00 45 44 49 54 00 50 52     SOC.OPEN.EDIT.PR
1000aea0:	49 4e 54 00 49 43 4f 4e 00 44 45 53 43 52 00 43     INT.ICON.DESCR.C
1000aeb0:	55 53 54 4f 4d 56 45 52 42 00 43 55 53 54 4f 4d     USTOMVERB.CUSTOM
1000aec0:	50 52 4f 47 00 42 41 4e 41 4e 41 2f 54 49 4d 45     PROG.BANANA/TIME
1000aed0:	00 54 49 4d 45 5a 4f 4e 45 00 42 41 4e 41 4e 41     .TIMEZONE.BANANA
1000aee0:	2f 53 45 54 55 50 00 4e 41 4d 45 00 43 4f 4d 50     /SETUP.NAME.COMP
1000aef0:	41 4e 59 00 50 52 4f 44 55 43 54 4b 45 59 00 42     ANY.PRODUCTKEY.B
1000af00:	41 4e 41 4e 41 2f 55 53 45 52 53 00 53 41 4c 54     ANANA/USERS.SALT
1000af10:	00 50 41 53 53 57 4f 52 44 00 44 49 53 50 4c 41     .PASSWORD.DISPLA
1000af20:	59 4e 41 4d 45 00 44 45 53 4b 54 4f 50 00 44 4f     YNAME.DESKTOP.DO
1000af30:	43 55 4d 45 4e 54 53 00 44 4f 57 4e 4c 4f 41 44     CUMENTS.DOWNLOAD
1000af40:	53 00 50 49 43 54 55 52 45 53 00 4d 4f 56 49 45     S.PICTURES.MOVIE
1000af50:	53 00 4d 55 53 49 43 00 52 45 43 59 43 4c 45 42     S.MUSIC.RECYCLEB
1000af60:	49 4e 00 42 41 4e 41 4e 41 2f 42 4f 4f 54 00 41     IN.BANANA/BOOT.A
1000af70:	55 54 4f 47 55 49 00 54 49 4d 45 5a 4f 4e 45 49     UTOGUI.TIMEZONEI
1000af80:	44 00 42 41 4e 41 4e 41 2f 54 49 4d 45 2f 54 49     D.BANANA/TIME/TI
1000af90:	4d 45 5a 4f 4e 45 00 42 41 4e 41 4e 41 2f 53 45     MEZONE.BANANA/SE
1000afa0:	54 55 50 2f 4e 41 4d 45 00 42 41 4e 41 4e 41 2f     TUP/NAME.BANANA/
1000afb0:	53 45 54 55 50 2f 43 4f 4d 50 41 4e 59 00 42 41     SETUP/COMPANY.BA
1000afc0:	4e 41 4e 41 2f 53 45 54 55 50 2f 50 52 4f 44 55     NANA/SETUP/PRODU
1000afd0:	43 54 4b 45 59 00 42 41 4e 41 4e 41 2f 46 49 4c     CTKEY.BANANA/FIL
1000afe0:	45 41 53 53 4f 43 2f 49 43 4f 4e 00 54 58 54 00     EASSOC/ICON.TXT.
1000aff0:	42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43     BANANA/FILEASSOC
1000b000:	2f 44 45 53 43 52 00 42 41 4e 41 4e 41 2f 46 49     /DESCR.BANANA/FI
1000b010:	4c 45 41 53 53 4f 43 2f 4f 50 45 4e 00 42 41 4e     LEASSOC/OPEN.BAN
1000b020:	41 4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f 45 44     ANA/FILEASSOC/ED
1000b030:	49 54 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53     IT.BANANA/FILEAS
1000b040:	53 4f 43 2f 50 52 49 4e 54 00 42 41 4e 41 4e 41     SOC/PRINT.BANANA
1000b050:	2f 46 49 4c 45 41 53 53 4f 43 2f 49 43 4f 4e 2f     /FILEASSOC/ICON/
1000b060:	54 58 54 00 43 3a 2f 42 61 6e 61 6e 61 2f 49 63     TXT.C:/Banana/Ic
1000b070:	6f 6e 73 2f 63 6f 6c 6f 75 72 2f 74 65 78 74 2e     ons/colour/text.
1000b080:	74 67 61 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41     tga.BANANA/FILEA
1000b090:	53 53 4f 43 2f 44 45 53 43 52 2f 54 58 54 00 54     SSOC/DESCR/TXT.T
1000b0a0:	65 78 74 20 44 6f 63 75 6d 65 6e 74 00 42 41 4e     ext Document.BAN
1000b0b0:	41 4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f 4f 50     ANA/FILEASSOC/OP
1000b0c0:	45 4e 2f 54 58 54 00 43 3a 2f 42 61 6e 61 6e 61     EN/TXT.C:/Banana
1000b0d0:	2f 53 79 73 74 65 6d 2f 74 65 2e 65 78 65 00 42     /System/te.exe.B
1000b0e0:	41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f     ANANA/FILEASSOC/
1000b0f0:	45 44 49 54 2f 54 58 54 00 42 41 4e 41 4e 41 2f     EDIT/TXT.BANANA/
1000b100:	46 49 4c 45 41 53 53 4f 43 2f 50 52 49 4e 54 2f     FILEASSOC/PRINT/
1000b110:	54 58 54 00 49 53 4f 00 42 41 4e 41 4e 41 2f 46     TXT.ISO.BANANA/F
1000b120:	49 4c 45 41 53 53 4f 43 2f 49 43 4f 4e 2f 49 53     ILEASSOC/ICON/IS
1000b130:	4f 00 43 3a 2f 42 61 6e 61 6e 61 2f 49 63 6f 6e     O.C:/Banana/Icon
1000b140:	73 2f 63 6f 6c 6f 75 72 2f 63 64 2e 74 67 61 00     s/colour/cd.tga.
1000b150:	42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43     BANANA/FILEASSOC
1000b160:	2f 44 45 53 43 52 2f 49 53 4f 00 44 69 73 63 20     /DESCR/ISO.Disc 
1000b170:	49 6d 61 67 65 20 46 69 6c 65 00 2f 50 41 53 53     Image File./PASS
1000b180:	57 4f 52 44 00 2f 53 41 4c 54 00 2f 44 49 53 50     WORD./SALT./DISP
1000b190:	4c 41 59 4e 41 4d 45 00 2f 44 45 53 4b 54 4f 50     LAYNAME./DESKTOP
1000b1a0:	00 2f 44 4f 43 55 4d 45 4e 54 53 00 2f 44 4f 57     ./DOCUMENTS./DOW
1000b1b0:	4e 4c 4f 41 44 53 00 2f 50 49 43 54 55 52 45 53     NLOADS./PICTURES
1000b1c0:	00 2f 4d 4f 56 49 45 53 00 2f 4d 55 53 49 43 00     ./MOVIES./MUSIC.
1000b1d0:	2f 52 45 43 59 43 4c 45 42 49 4e 00 54 4f 44 4f     /RECYCLEBIN.TODO
1000b1e0:	3a 20 64 65 74 65 63 74 20 6e 6f 72 6d 61 6c 20     : detect normal 
1000b1f0:	6b 65 72 6e 65 6c 20 76 73 20 4b 52 4e 4c 50 32     kernel vs KRNLP2
1000b200:	0a 00 00 00 54 68 65 20 69 6e 73 74 61 6c 6c 61     ....The installa
1000b210:	74 69 6f 6e 20 68 61 73 20 62 65 65 6e 20 63 6f     tion has been co
1000b220:	6d 70 6c 65 74 65 64 2e 0a 00 00 00 50 6c 65 61     mpleted.....Plea
1000b230:	73 65 20 70 72 65 73 73 20 45 4e 54 45 52 20 74     se press ENTER t
1000b240:	6f 20 72 65 73 74 61 72 74 20 79 6f 75 72 20 63     o restart your c
1000b250:	6f 6d 70 75 74 65 72 00 61 6e 64 20 73 74 61 72     omputer.and star
1000b260:	74 20 42 61 6e 61 6e 61 2e 00 42 41 4e 41 4e 41     t Banana..BANANA
1000b270:	2f 42 4f 4f 54 2f 41 55 54 4f 47 55 49 00 50 72     /BOOT/AUTOGUI.Pr
1000b280:	6f 64 75 63 74 20 4b 65 79 20 55 70 64 61 74 65     oduct Key Update
1000b290:	64 00 00 00 59 6f 75 72 20 70 72 6f 64 75 63 74     d...Your product
1000b2a0:	20 6b 65 79 20 68 61 73 20 62 65 65 6e 20 75 70      key has been up
1000b2b0:	64 61 74 65 64 2e 0a 00 20 43 72 65 61 74 65 20     dated... Create 
1000b2c0:	6e 65 77 20 75 73 65 72 2e 2e 2e 20 20 20 20 20     new user...     
1000b2d0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000b2e0:	20 20 20 20 20 20 20 20 20 20 00 4c 6f 67 69 6e               .Login
1000b2f0:	00 00 00 00 50 6c 65 61 73 65 20 73 65 6c 65 63     ....Please selec
1000b300:	74 20 79 6f 75 72 20 75 73 65 72 6e 61 6d 65 20     t your username 
1000b310:	61 6e 64 20 70 72 65 73 73 20 45 4e 54 45 52 2e     and press ENTER.
1000b320:	00 00 00 00 50 6c 65 61 73 65 20 74 79 70 65 20     ....Please type 
1000b330:	79 6f 75 72 20 70 61 73 73 77 6f 72 64 20 61 6e     your password an
1000b340:	64 20 70 72 65 73 73 20 45 4e 54 45 52 00 6f 72     d press ENTER.or
1000b350:	20 70 72 65 73 73 20 45 53 43 20 74 6f 20 67 6f      press ESC to go
1000b360:	20 62 61 63 6b 2e 00 00 52 45 51 55 49 52 45 44      back...REQUIRED
1000b370:	3a 20 25 73 0a 47 4f 54 3a 20 25 73 0a 53 41 4c     : %s.GOT: %s.SAL
1000b380:	54 3a 20 25 73 0a 00 00 49 74 20 69 73 20 73 61     T: %s...It is sa
1000b390:	66 65 20 74 6f 20 74 75 72 6e 20 6f 66 66 20 79     fe to turn off y
1000b3a0:	6f 75 72 20 50 43 00 63 61 6c 6c 00 43 3a 2f 42     our PC.call.C:/B
1000b3b0:	61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 69 6e 69     anana/System/ini
1000b3c0:	74 2e 62 61 74 00 00 00 da ad 00 10 a7 b3 00 10     t.bat...........	1000b3c8: R_386_32	.text
	1000b3cc: R_386_32	.text
1000b3d0:	ac b3 00 10 00 00 00 00                             ........	1000b3d0: R_386_32	.text
