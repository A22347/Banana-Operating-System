
packages/system/32/0001/system.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <beginx(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <beginx(void*)+0xd>	1000000d: R_386_PC32	begin(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <memcmp(void*, void*, unsigned long)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 10             	sub    esp,0x10
1000001d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000020:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000026:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000029:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000002c:	8d 50 ff             	lea    edx,[eax-0x1]
1000002f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000032:	85 c0                	test   eax,eax
10000034:	74 12                	je     10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000036:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000039:	8a 10                	mov    dl,BYTE PTR [eax]
1000003b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000003e:	8a 00                	mov    al,BYTE PTR [eax]
10000040:	38 c2                	cmp    dl,al
10000042:	75 04                	jne    10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000044:	b0 01                	mov    al,0x1
10000046:	eb 02                	jmp    1000004a <memcmp(void*, void*, unsigned long)+0x33>
10000048:	b0 00                	mov    al,0x0
1000004a:	84 c0                	test   al,al
1000004c:	74 08                	je     10000056 <memcmp(void*, void*, unsigned long)+0x3f>
1000004e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000051:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
10000054:	eb d3                	jmp    10000029 <memcmp(void*, void*, unsigned long)+0x12>
10000056:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000059:	8a 00                	mov    al,BYTE PTR [eax]
1000005b:	0f b6 d0             	movzx  edx,al
1000005e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000061:	8a 00                	mov    al,BYTE PTR [eax]
10000063:	0f b6 c0             	movzx  eax,al
10000066:	29 c2                	sub    edx,eax
10000068:	89 d0                	mov    eax,edx
1000006a:	c9                   	leave  
1000006b:	c3                   	ret    

1000006c <memmove>:
1000006c:	55                   	push   ebp
1000006d:	89 e5                	mov    ebp,esp
1000006f:	83 ec 10             	sub    esp,0x10
10000072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000075:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000007b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000007e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000081:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
10000084:	76 1b                	jbe    100000a1 <memmove+0x35>
10000086:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
1000008a:	74 46                	je     100000d2 <memmove+0x66>
1000008c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000008f:	8a 10                	mov    dl,BYTE PTR [eax]
10000091:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000094:	88 10                	mov    BYTE PTR [eax],dl
10000096:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000099:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
1000009c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000009f:	eb e5                	jmp    10000086 <memmove+0x1a>
100000a1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000a4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
100000a7:	73 29                	jae    100000d2 <memmove+0x66>
100000a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000ac:	48                   	dec    eax
100000ad:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
100000b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000b3:	48                   	dec    eax
100000b4:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
100000b7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000bb:	74 15                	je     100000d2 <memmove+0x66>
100000bd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000c0:	8a 10                	mov    dl,BYTE PTR [eax]
100000c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000c5:	88 10                	mov    BYTE PTR [eax],dl
100000c7:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100000ca:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
100000cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000d0:	eb e5                	jmp    100000b7 <memmove+0x4b>
100000d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d5:	c9                   	leave  
100000d6:	c3                   	ret    

100000d7 <memset>:
100000d7:	55                   	push   ebp
100000d8:	89 e5                	mov    ebp,esp
100000da:	83 ec 10             	sub    esp,0x10
100000dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100000e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000e7:	74 12                	je     100000fb <memset+0x24>
100000e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100000ec:	88 c2                	mov    dl,al
100000ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000f1:	88 10                	mov    BYTE PTR [eax],dl
100000f3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100000f6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000f9:	eb e8                	jmp    100000e3 <memset+0xc>
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	c9                   	leave  
100000ff:	c3                   	ret    

10000100 <strlen>:
10000100:	55                   	push   ebp
10000101:	89 e5                	mov    ebp,esp
10000103:	83 ec 10             	sub    esp,0x10
10000106:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000110:	8a 00                	mov    al,BYTE PTR [eax]
10000112:	84 c0                	test   al,al
10000114:	74 0c                	je     10000122 <strlen+0x22>
10000116:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000119:	40                   	inc    eax
1000011a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000011d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
10000120:	eb eb                	jmp    1000010d <strlen+0xd>
10000122:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000125:	c9                   	leave  
10000126:	c3                   	ret    

10000127 <strpbrk(char const*, char const*)>:
10000127:	55                   	push   ebp
10000128:	89 e5                	mov    ebp,esp
1000012a:	83 ec 10             	sub    esp,0x10
1000012d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000130:	8a 00                	mov    al,BYTE PTR [eax]
10000132:	84 c0                	test   al,al
10000134:	74 30                	je     10000166 <strpbrk(char const*, char const*)+0x3f>
10000136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000139:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000013c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000013f:	8a 00                	mov    al,BYTE PTR [eax]
10000141:	84 c0                	test   al,al
10000143:	74 18                	je     1000015d <strpbrk(char const*, char const*)+0x36>
10000145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000148:	8a 10                	mov    dl,BYTE PTR [eax]
1000014a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000014d:	8a 00                	mov    al,BYTE PTR [eax]
1000014f:	38 c2                	cmp    dl,al
10000151:	75 05                	jne    10000158 <strpbrk(char const*, char const*)+0x31>
10000153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000156:	eb 13                	jmp    1000016b <strpbrk(char const*, char const*)+0x44>
10000158:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
1000015b:	eb df                	jmp    1000013c <strpbrk(char const*, char const*)+0x15>
1000015d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000160:	40                   	inc    eax
10000161:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000164:	eb c7                	jmp    1000012d <strpbrk(char const*, char const*)+0x6>
10000166:	b8 00 00 00 00       	mov    eax,0x0
1000016b:	c9                   	leave  
1000016c:	c3                   	ret    

1000016d <strtok>:
1000016d:	55                   	push   ebp
1000016e:	89 e5                	mov    ebp,esp
10000170:	83 ec 10             	sub    esp,0x10
10000173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000176:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000179:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000017c:	85 c0                	test   eax,eax
1000017e:	75 18                	jne    10000198 <strtok+0x2b>
10000180:	a1 00 00 00 00       	mov    eax,ds:0x0	10000181: R_386_32	SavedPtr
10000185:	85 c0                	test   eax,eax
10000187:	75 07                	jne    10000190 <strtok+0x23>
10000189:	b8 00 00 00 00       	mov    eax,0x0
1000018e:	eb 6f                	jmp    100001ff <strtok+0x92>
10000190:	a1 00 00 00 00       	mov    eax,ds:0x0	10000191: R_386_32	SavedPtr
10000195:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000198:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000019b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000019e:	50                   	push   eax
1000019f:	e8 fc ff ff ff       	call   100001a0 <strtok+0x33>	100001a0: R_386_PC32	strpbrk(char const*, char const*)
100001a4:	83 c4 08             	add    esp,0x8
100001a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100001a8: R_386_32	SavedPtr
100001ac:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001ae: R_386_32	SavedPtr
100001b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001b5:	39 c2                	cmp    edx,eax
100001b7:	75 22                	jne    100001db <strtok+0x6e>
100001b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001bc:	8d 50 01             	lea    edx,[eax+0x1]
100001bf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100001c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100001cb:	50                   	push   eax
100001cc:	e8 fc ff ff ff       	call   100001cd <strtok+0x60>	100001cd: R_386_PC32	strpbrk(char const*, char const*)
100001d1:	83 c4 08             	add    esp,0x8
100001d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100001d5: R_386_32	SavedPtr
100001d9:	eb d1                	jmp    100001ac <strtok+0x3f>
100001db:	a1 00 00 00 00       	mov    eax,ds:0x0	100001dc: R_386_32	SavedPtr
100001e0:	85 c0                	test   eax,eax
100001e2:	74 16                	je     100001fa <strtok+0x8d>
100001e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e5: R_386_32	SavedPtr
100001e9:	8d 50 01             	lea    edx,[eax+0x1]
100001ec:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100001ee: R_386_32	SavedPtr
100001f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001f8:	eb 05                	jmp    100001ff <strtok+0x92>
100001fa:	b8 00 00 00 00       	mov    eax,0x0
100001ff:	c9                   	leave  
10000200:	c3                   	ret    

10000201 <strcpy>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	83 ec 10             	sub    esp,0x10
10000207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000020a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000020d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000210:	8a 00                	mov    al,BYTE PTR [eax]
10000212:	84 c0                	test   al,al
10000214:	74 12                	je     10000228 <strcpy+0x27>
10000216:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000219:	8a 10                	mov    dl,BYTE PTR [eax]
1000021b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000021e:	88 10                	mov    BYTE PTR [eax],dl
10000220:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000223:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10000226:	eb e5                	jmp    1000020d <strcpy+0xc>
10000228:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000022b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000022e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000231:	c9                   	leave  
10000232:	c3                   	ret    

10000233 <strncpyxx(char*, char const*, unsigned long)>:
10000233:	55                   	push   ebp
10000234:	89 e5                	mov    ebp,esp
10000236:	83 ec 10             	sub    esp,0x10
10000239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000242:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000245:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000249:	74 23                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000024b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000024e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000251:	8d 42 01             	lea    eax,[edx+0x1]
10000254:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000025a:	8d 48 01             	lea    ecx,[eax+0x1]
1000025d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
10000260:	8a 12                	mov    dl,BYTE PTR [edx]
10000262:	88 10                	mov    BYTE PTR [eax],dl
10000264:	8a 00                	mov    al,BYTE PTR [eax]
10000266:	84 c0                	test   al,al
10000268:	74 04                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000026a:	b0 01                	mov    al,0x1
1000026c:	eb 02                	jmp    10000270 <strncpyxx(char*, char const*, unsigned long)+0x3d>
1000026e:	b0 00                	mov    al,0x0
10000270:	84 c0                	test   al,al
10000272:	74 02                	je     10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000274:	eb cf                	jmp    10000245 <strncpyxx(char*, char const*, unsigned long)+0x12>
10000276:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000279:	8d 50 ff             	lea    edx,[eax-0x1]
1000027c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
1000027f:	85 c0                	test   eax,eax
10000281:	0f 95 c0             	setne  al
10000284:	84 c0                	test   al,al
10000286:	74 0b                	je     10000293 <strncpyxx(char*, char const*, unsigned long)+0x60>
10000288:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000028b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000028e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000291:	eb e3                	jmp    10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000296:	c9                   	leave  
10000297:	c3                   	ret    

10000298 <strcmp>:
10000298:	55                   	push   ebp
10000299:	89 e5                	mov    ebp,esp
1000029b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029e:	8a 10                	mov    dl,BYTE PTR [eax]
100002a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a3:	8a 00                	mov    al,BYTE PTR [eax]
100002a5:	38 c2                	cmp    dl,al
100002a7:	75 20                	jne    100002c9 <strcmp+0x31>
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	8d 50 01             	lea    edx,[eax+0x1]
100002af:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
100002b2:	8a 00                	mov    al,BYTE PTR [eax]
100002b4:	84 c0                	test   al,al
100002b6:	0f 94 c0             	sete   al
100002b9:	84 c0                	test   al,al
100002bb:	74 07                	je     100002c4 <strcmp+0x2c>
100002bd:	b8 00 00 00 00       	mov    eax,0x0
100002c2:	eb 19                	jmp    100002dd <strcmp+0x45>
100002c4:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100002c7:	eb d2                	jmp    1000029b <strcmp+0x3>
100002c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002cc:	8a 00                	mov    al,BYTE PTR [eax]
100002ce:	0f b6 d0             	movzx  edx,al
100002d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002d4:	8a 00                	mov    al,BYTE PTR [eax]
100002d6:	0f b6 c0             	movzx  eax,al
100002d9:	29 c2                	sub    edx,eax
100002db:	89 d0                	mov    eax,edx
100002dd:	5d                   	pop    ebp
100002de:	c3                   	ret    

100002df <strchr(char const*, int)>:
100002df:	55                   	push   ebp
100002e0:	89 e5                	mov    ebp,esp
100002e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e5:	8a 00                	mov    al,BYTE PTR [eax]
100002e7:	84 c0                	test   al,al
100002e9:	74 16                	je     10000301 <strchr(char const*, int)+0x22>
100002eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ee:	8a 00                	mov    al,BYTE PTR [eax]
100002f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002f3:	38 d0                	cmp    al,dl
100002f5:	75 05                	jne    100002fc <strchr(char const*, int)+0x1d>
100002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fa:	eb 0a                	jmp    10000306 <strchr(char const*, int)+0x27>
100002fc:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
100002ff:	eb e1                	jmp    100002e2 <strchr(char const*, int)+0x3>
10000301:	b8 00 00 00 00       	mov    eax,0x0
10000306:	5d                   	pop    ebp
10000307:	c3                   	ret    

10000308 <strncmp>:
10000308:	55                   	push   ebp
10000309:	89 e5                	mov    ebp,esp
1000030b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000030e:	8d 50 ff             	lea    edx,[eax-0x1]
10000311:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000314:	85 c0                	test   eax,eax
10000316:	74 12                	je     1000032a <strncmp+0x22>
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	8a 10                	mov    dl,BYTE PTR [eax]
1000031d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000320:	8a 00                	mov    al,BYTE PTR [eax]
10000322:	38 c2                	cmp    dl,al
10000324:	75 04                	jne    1000032a <strncmp+0x22>
10000326:	b0 01                	mov    al,0x1
10000328:	eb 02                	jmp    1000032c <strncmp+0x24>
1000032a:	b0 00                	mov    al,0x0
1000032c:	84 c0                	test   al,al
1000032e:	74 20                	je     10000350 <strncmp+0x48>
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8d 50 01             	lea    edx,[eax+0x1]
10000336:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
10000339:	8a 00                	mov    al,BYTE PTR [eax]
1000033b:	84 c0                	test   al,al
1000033d:	0f 94 c0             	sete   al
10000340:	84 c0                	test   al,al
10000342:	74 07                	je     1000034b <strncmp+0x43>
10000344:	b8 00 00 00 00       	mov    eax,0x0
10000349:	eb 19                	jmp    10000364 <strncmp+0x5c>
1000034b:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000034e:	eb bb                	jmp    1000030b <strncmp+0x3>
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8a 00                	mov    al,BYTE PTR [eax]
10000355:	0f b6 d0             	movzx  edx,al
10000358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000035b:	8a 00                	mov    al,BYTE PTR [eax]
1000035d:	0f b6 c0             	movzx  eax,al
10000360:	29 c2                	sub    edx,eax
10000362:	89 d0                	mov    eax,edx
10000364:	5d                   	pop    ebp
10000365:	c3                   	ret    

10000366 <strcat>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 10             	sub    esp,0x10
1000036c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000372:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000375:	8d 50 01             	lea    edx,[eax+0x1]
10000378:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000037b:	8a 00                	mov    al,BYTE PTR [eax]
1000037d:	84 c0                	test   al,al
1000037f:	0f 95 c0             	setne  al
10000382:	84 c0                	test   al,al
10000384:	74 02                	je     10000388 <strcat+0x22>
10000386:	eb ea                	jmp    10000372 <strcat+0xc>
10000388:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
1000038b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000038e:	8d 42 01             	lea    eax,[edx+0x1]
10000391:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000394:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000397:	8d 48 01             	lea    ecx,[eax+0x1]
1000039a:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
1000039d:	8a 12                	mov    dl,BYTE PTR [edx]
1000039f:	88 10                	mov    BYTE PTR [eax],dl
100003a1:	8a 00                	mov    al,BYTE PTR [eax]
100003a3:	84 c0                	test   al,al
100003a5:	0f 95 c0             	setne  al
100003a8:	84 c0                	test   al,al
100003aa:	74 02                	je     100003ae <strcat+0x48>
100003ac:	eb dd                	jmp    1000038b <strcat+0x25>
100003ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b1:	c9                   	leave  
100003b2:	c3                   	ret    

100003b3 <strncat(char*, char const*, unsigned long)>:
100003b3:	55                   	push   ebp
100003b4:	89 e5                	mov    ebp,esp
100003b6:	83 ec 10             	sub    esp,0x10
100003b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100003bd:	74 5c                	je     1000041b <strncat(char*, char const*, unsigned long)+0x68>
100003bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003c8:	8d 50 01             	lea    edx,[eax+0x1]
100003cb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100003ce:	8a 00                	mov    al,BYTE PTR [eax]
100003d0:	84 c0                	test   al,al
100003d2:	0f 95 c0             	setne  al
100003d5:	84 c0                	test   al,al
100003d7:	74 02                	je     100003db <strncat(char*, char const*, unsigned long)+0x28>
100003d9:	eb ea                	jmp    100003c5 <strncat(char*, char const*, unsigned long)+0x12>
100003db:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100003de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e1:	8d 42 01             	lea    eax,[edx+0x1]
100003e4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100003e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003ea:	8d 48 01             	lea    ecx,[eax+0x1]
100003ed:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
100003f0:	8a 12                	mov    dl,BYTE PTR [edx]
100003f2:	88 10                	mov    BYTE PTR [eax],dl
100003f4:	8a 00                	mov    al,BYTE PTR [eax]
100003f6:	84 c0                	test   al,al
100003f8:	74 0d                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
100003fa:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100003fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000401:	74 04                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
10000403:	b0 01                	mov    al,0x1
10000405:	eb 02                	jmp    10000409 <strncat(char*, char const*, unsigned long)+0x56>
10000407:	b0 00                	mov    al,0x0
10000409:	84 c0                	test   al,al
1000040b:	74 02                	je     1000040f <strncat(char*, char const*, unsigned long)+0x5c>
1000040d:	eb cf                	jmp    100003de <strncat(char*, char const*, unsigned long)+0x2b>
1000040f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000413:	75 06                	jne    1000041b <strncat(char*, char const*, unsigned long)+0x68>
10000415:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000418:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000041b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041e:	c9                   	leave  
1000041f:	c3                   	ret    

10000420 <strstr(char*, char*)>:
10000420:	55                   	push   ebp
10000421:	89 e5                	mov    ebp,esp
10000423:	83 ec 10             	sub    esp,0x10
10000426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000429:	e8 fc ff ff ff       	call   1000042a <strstr(char*, char*)+0xa>	1000042a: R_386_PC32	strlen
1000042e:	83 c4 04             	add    esp,0x4
10000431:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000434:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
10000438:	75 05                	jne    1000043f <strstr(char*, char*)+0x1f>
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	eb 3f                	jmp    1000047e <strstr(char*, char*)+0x5e>
1000043f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000442:	50                   	push   eax
10000443:	e8 fc ff ff ff       	call   10000444 <strstr(char*, char*)+0x24>	10000444: R_386_PC32	strlen
10000448:	83 c4 04             	add    esp,0x4
1000044b:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
1000044e:	77 29                	ja     10000479 <strstr(char*, char*)+0x59>
10000450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000453:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
10000456:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000459:	50                   	push   eax
1000045a:	e8 fc ff ff ff       	call   1000045b <strstr(char*, char*)+0x3b>	1000045b: R_386_PC32	memcmp(void*, void*, unsigned long)
1000045f:	83 c4 0c             	add    esp,0xc
10000462:	85 c0                	test   eax,eax
10000464:	0f 94 c0             	sete   al
10000467:	84 c0                	test   al,al
10000469:	74 05                	je     10000470 <strstr(char*, char*)+0x50>
1000046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000046e:	eb 0e                	jmp    1000047e <strstr(char*, char*)+0x5e>
10000470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000473:	40                   	inc    eax
10000474:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000477:	eb c6                	jmp    1000043f <strstr(char*, char*)+0x1f>
10000479:	b8 00 00 00 00       	mov    eax,0x0
1000047e:	c9                   	leave  
1000047f:	c3                   	ret    

10000480 <rmtree(char*)>:
10000480:	55                   	push   ebp
10000481:	89 e5                	mov    ebp,esp
10000483:	53                   	push   ebx
10000484:	81 ec 64 02 00 00    	sub    esp,0x264
1000048a:	68 2c 01 00 00       	push   0x12c
1000048f:	6a 00                	push   0x0
10000491:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000497:	50                   	push   eax
10000498:	e8 fc ff ff ff       	call   10000499 <rmtree(char*)+0x19>	10000499: R_386_PC32	memset
1000049d:	83 c4 0c             	add    esp,0xc
100004a0:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
100004a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100004a9:	83 ec 0c             	sub    esp,0xc
100004ac:	68 14 01 00 00       	push   0x114
100004b1:	e8 fc ff ff ff       	call   100004b2 <rmtree(char*)+0x32>	100004b2: R_386_PC32	operator new(unsigned long)
100004b6:	83 c4 10             	add    esp,0x10
100004b9:	89 c3                	mov    ebx,eax
100004bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
100004c0:	8b 00                	mov    eax,DWORD PTR [eax]
100004c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
100004c5:	83 ec 04             	sub    esp,0x4
100004c8:	50                   	push   eax
100004c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004cc:	53                   	push   ebx
100004cd:	e8 fc ff ff ff       	call   100004ce <rmtree(char*)+0x4e>	100004ce: R_386_PC32	Directory::Directory(char const*, Process*)
100004d2:	83 c4 10             	add    esp,0x10
100004d5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
100004d8:	83 ec 0c             	sub    esp,0xc
100004db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004de:	e8 fc ff ff ff       	call   100004df <rmtree(char*)+0x5f>	100004df: R_386_PC32	Directory::open()
100004e3:	83 c4 10             	add    esp,0x10
100004e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004e9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100004ed:	74 24                	je     10000513 <rmtree(char*)+0x93>
100004ef:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004f3:	0f 84 8b 01 00 00    	je     10000684 <rmtree(char*)+0x204>
100004f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004fc:	8b 00                	mov    eax,DWORD PTR [eax]
100004fe:	83 c0 08             	add    eax,0x8
10000501:	8b 00                	mov    eax,DWORD PTR [eax]
10000503:	83 ec 0c             	sub    esp,0xc
10000506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000509:	ff d0                	call   eax
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	e9 72 01 00 00       	jmp    10000685 <rmtree(char*)+0x205>
10000513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000516:	8b 00                	mov    eax,DWORD PTR [eax]
10000518:	83 c0 0c             	add    eax,0xc
1000051b:	8b 00                	mov    eax,DWORD PTR [eax]
1000051d:	83 ec 0c             	sub    esp,0xc
10000520:	8d 95 a4 fd ff ff    	lea    edx,[ebp-0x25c]
10000526:	52                   	push   edx
10000527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000052a:	6a 00                	push   0x0
1000052c:	68 10 01 00 00       	push   0x110
10000531:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000534:	ff d0                	call   eax
10000536:	83 c4 20             	add    esp,0x20
10000539:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
1000053c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000540:	0f 85 04 01 00 00    	jne    1000064a <rmtree(char*)+0x1ca>
10000546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000549:	83 c0 10             	add    eax,0x10
1000054c:	83 ec 08             	sub    esp,0x8
1000054f:	68 10 a5 00 10       	push   0x1000a510	10000550: R_386_32	.text
10000554:	50                   	push   eax
10000555:	e8 fc ff ff ff       	call   10000556 <rmtree(char*)+0xd6>	10000556: R_386_PC32	strcmp
1000055a:	83 c4 10             	add    esp,0x10
1000055d:	85 c0                	test   eax,eax
1000055f:	74 b2                	je     10000513 <rmtree(char*)+0x93>
10000561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000564:	83 c0 10             	add    eax,0x10
10000567:	83 ec 08             	sub    esp,0x8
1000056a:	68 12 a5 00 10       	push   0x1000a512	1000056b: R_386_32	.text
1000056f:	50                   	push   eax
10000570:	e8 fc ff ff ff       	call   10000571 <rmtree(char*)+0xf1>	10000571: R_386_PC32	strcmp
10000575:	83 c4 10             	add    esp,0x10
10000578:	85 c0                	test   eax,eax
1000057a:	74 97                	je     10000513 <rmtree(char*)+0x93>
1000057c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000057f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000582:	83 e0 02             	and    eax,0x2
10000585:	85 c0                	test   eax,eax
10000587:	74 17                	je     100005a0 <rmtree(char*)+0x120>
10000589:	83 ec 0c             	sub    esp,0xc
1000058c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000592:	50                   	push   eax
10000593:	e8 fc ff ff ff       	call   10000594 <rmtree(char*)+0x114>	10000594: R_386_PC32	rmtree(char*)
10000598:	83 c4 10             	add    esp,0x10
1000059b:	e9 73 ff ff ff       	jmp    10000513 <rmtree(char*)+0x93>
100005a0:	83 ec 08             	sub    esp,0x8
100005a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005a6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005ac:	50                   	push   eax
100005ad:	e8 fc ff ff ff       	call   100005ae <rmtree(char*)+0x12e>	100005ae: R_386_PC32	strcpy
100005b2:	83 c4 10             	add    esp,0x10
100005b5:	83 ec 08             	sub    esp,0x8
100005b8:	68 15 a5 00 10       	push   0x1000a515	100005b9: R_386_32	.text
100005bd:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005c3:	50                   	push   eax
100005c4:	e8 fc ff ff ff       	call   100005c5 <rmtree(char*)+0x145>	100005c5: R_386_PC32	strcat
100005c9:	83 c4 10             	add    esp,0x10
100005cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100005cf:	83 c0 10             	add    eax,0x10
100005d2:	83 ec 08             	sub    esp,0x8
100005d5:	50                   	push   eax
100005d6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005dc:	50                   	push   eax
100005dd:	e8 fc ff ff ff       	call   100005de <rmtree(char*)+0x15e>	100005de: R_386_PC32	strcat
100005e2:	83 c4 10             	add    esp,0x10
100005e5:	83 ec 0c             	sub    esp,0xc
100005e8:	68 14 01 00 00       	push   0x114
100005ed:	e8 fc ff ff ff       	call   100005ee <rmtree(char*)+0x16e>	100005ee: R_386_PC32	operator new(unsigned long)
100005f2:	83 c4 10             	add    esp,0x10
100005f5:	89 c3                	mov    ebx,eax
100005f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
100005fc:	8b 00                	mov    eax,DWORD PTR [eax]
100005fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000601:	83 ec 04             	sub    esp,0x4
10000604:	50                   	push   eax
10000605:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
1000060b:	50                   	push   eax
1000060c:	53                   	push   ebx
1000060d:	e8 fc ff ff ff       	call   1000060e <rmtree(char*)+0x18e>	1000060e: R_386_PC32	File::File(char const*, Process*)
10000612:	83 c4 10             	add    esp,0x10
10000615:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000618:	83 ec 0c             	sub    esp,0xc
1000061b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000061e:	e8 fc ff ff ff       	call   1000061f <rmtree(char*)+0x19f>	1000061f: R_386_PC32	File::unlink()
10000623:	83 c4 10             	add    esp,0x10
10000626:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000062a:	0f 84 e3 fe ff ff    	je     10000513 <rmtree(char*)+0x93>
10000630:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000633:	8b 00                	mov    eax,DWORD PTR [eax]
10000635:	83 c0 08             	add    eax,0x8
10000638:	8b 00                	mov    eax,DWORD PTR [eax]
1000063a:	83 ec 0c             	sub    esp,0xc
1000063d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000640:	ff d0                	call   eax
10000642:	83 c4 10             	add    esp,0x10
10000645:	e9 c9 fe ff ff       	jmp    10000513 <rmtree(char*)+0x93>
1000064a:	90                   	nop
1000064b:	83 ec 0c             	sub    esp,0xc
1000064e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000651:	e8 fc ff ff ff       	call   10000652 <rmtree(char*)+0x1d2>	10000652: R_386_PC32	Directory::close()
10000656:	83 c4 10             	add    esp,0x10
10000659:	83 ec 0c             	sub    esp,0xc
1000065c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000065f:	e8 fc ff ff ff       	call   10000660 <rmtree(char*)+0x1e0>	10000660: R_386_PC32	Directory::unlink()
10000664:	83 c4 10             	add    esp,0x10
10000667:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000066b:	74 18                	je     10000685 <rmtree(char*)+0x205>
1000066d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000670:	8b 00                	mov    eax,DWORD PTR [eax]
10000672:	83 c0 08             	add    eax,0x8
10000675:	8b 00                	mov    eax,DWORD PTR [eax]
10000677:	83 ec 0c             	sub    esp,0xc
1000067a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000067d:	ff d0                	call   eax
1000067f:	83 c4 10             	add    esp,0x10
10000682:	eb 01                	jmp    10000685 <rmtree(char*)+0x205>
10000684:	90                   	nop
10000685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000688:	c9                   	leave  
10000689:	c3                   	ret    

1000068a <mkdir(char const*, int)>:
1000068a:	55                   	push   ebp
1000068b:	89 e5                	mov    ebp,esp
1000068d:	53                   	push   ebx
1000068e:	83 ec 14             	sub    esp,0x14
10000691:	83 ec 0c             	sub    esp,0xc
10000694:	68 14 01 00 00       	push   0x114
10000699:	e8 fc ff ff ff       	call   1000069a <mkdir(char const*, int)+0x10>	1000069a: R_386_PC32	operator new(unsigned long)
1000069e:	83 c4 10             	add    esp,0x10
100006a1:	89 c3                	mov    ebx,eax
100006a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100006a4: R_386_32	kernelProcess
100006a8:	83 ec 04             	sub    esp,0x4
100006ab:	50                   	push   eax
100006ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006af:	53                   	push   ebx
100006b0:	e8 fc ff ff ff       	call   100006b1 <mkdir(char const*, int)+0x27>	100006b1: R_386_PC32	Directory::Directory(char const*, Process*)
100006b5:	83 c4 10             	add    esp,0x10
100006b8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100006bb:	83 ec 0c             	sub    esp,0xc
100006be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006c1:	e8 fc ff ff ff       	call   100006c2 <mkdir(char const*, int)+0x38>	100006c2: R_386_PC32	Directory::create()
100006c6:	83 c4 10             	add    esp,0x10
100006c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100006cd:	74 15                	je     100006e4 <mkdir(char const*, int)+0x5a>
100006cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100006d2:	8b 00                	mov    eax,DWORD PTR [eax]
100006d4:	83 c0 08             	add    eax,0x8
100006d7:	8b 00                	mov    eax,DWORD PTR [eax]
100006d9:	83 ec 0c             	sub    esp,0xc
100006dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006df:	ff d0                	call   eax
100006e1:	83 c4 10             	add    esp,0x10
100006e4:	b8 00 00 00 00       	mov    eax,0x0
100006e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100006ec:	c9                   	leave  
100006ed:	c3                   	ret    

100006ee <copytree(char*, char*)>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	53                   	push   ebx
100006f2:	81 ec 54 01 00 00    	sub    esp,0x154
100006f8:	83 ec 0c             	sub    esp,0xc
100006fb:	68 90 01 00 00       	push   0x190
10000700:	e8 fc ff ff ff       	call   10000701 <copytree(char*, char*)+0x13>	10000701: R_386_PC32	malloc
10000705:	83 c4 10             	add    esp,0x10
10000708:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000070b:	83 ec 0c             	sub    esp,0xc
1000070e:	68 90 01 00 00       	push   0x190
10000713:	e8 fc ff ff ff       	call   10000714 <copytree(char*, char*)+0x26>	10000714: R_386_PC32	malloc
10000718:	83 c4 10             	add    esp,0x10
1000071b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000071e:	83 ec 04             	sub    esp,0x4
10000721:	68 90 01 00 00       	push   0x190
10000726:	6a 00                	push   0x0
10000728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000072b:	e8 fc ff ff ff       	call   1000072c <copytree(char*, char*)+0x3e>	1000072c: R_386_PC32	memset
10000730:	83 c4 10             	add    esp,0x10
10000733:	83 ec 04             	sub    esp,0x4
10000736:	68 90 01 00 00       	push   0x190
1000073b:	6a 00                	push   0x0
1000073d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000740:	e8 fc ff ff ff       	call   10000741 <copytree(char*, char*)+0x53>	10000741: R_386_PC32	memset
10000745:	83 c4 10             	add    esp,0x10
10000748:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000074e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000751:	83 ec 0c             	sub    esp,0xc
10000754:	68 14 01 00 00       	push   0x114
10000759:	e8 fc ff ff ff       	call   1000075a <copytree(char*, char*)+0x6c>	1000075a: R_386_PC32	operator new(unsigned long)
1000075e:	83 c4 10             	add    esp,0x10
10000761:	89 c3                	mov    ebx,eax
10000763:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000768:	8b 00                	mov    eax,DWORD PTR [eax]
1000076a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000076d:	83 ec 04             	sub    esp,0x4
10000770:	50                   	push   eax
10000771:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000774:	53                   	push   ebx
10000775:	e8 fc ff ff ff       	call   10000776 <copytree(char*, char*)+0x88>	10000776: R_386_PC32	Directory::Directory(char const*, Process*)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000780:	83 ec 0c             	sub    esp,0xc
10000783:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000786:	e8 fc ff ff ff       	call   10000787 <copytree(char*, char*)+0x99>	10000787: R_386_PC32	Directory::open()
1000078b:	83 c4 10             	add    esp,0x10
1000078e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000791:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10000795:	74 34                	je     100007cb <copytree(char*, char*)+0xdd>
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	68 17 a5 00 10       	push   0x1000a517	1000079b: R_386_32	.text
1000079f:	e8 fc ff ff ff       	call   100007a0 <copytree(char*, char*)+0xb2>	100007a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100007a4:	83 c4 10             	add    esp,0x10
100007a7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
100007ab:	0f 84 90 03 00 00    	je     10000b41 <copytree(char*, char*)+0x453>
100007b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007b4:	8b 00                	mov    eax,DWORD PTR [eax]
100007b6:	83 c0 08             	add    eax,0x8
100007b9:	8b 00                	mov    eax,DWORD PTR [eax]
100007bb:	83 ec 0c             	sub    esp,0xc
100007be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007c1:	ff d0                	call   eax
100007c3:	83 c4 10             	add    esp,0x10
100007c6:	e9 76 03 00 00       	jmp    10000b41 <copytree(char*, char*)+0x453>
100007cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007ce:	8b 00                	mov    eax,DWORD PTR [eax]
100007d0:	83 c0 0c             	add    eax,0xc
100007d3:	8b 00                	mov    eax,DWORD PTR [eax]
100007d5:	83 ec 0c             	sub    esp,0xc
100007d8:	8d 95 b8 fe ff ff    	lea    edx,[ebp-0x148]
100007de:	52                   	push   edx
100007df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100007e2:	6a 00                	push   0x0
100007e4:	68 10 01 00 00       	push   0x110
100007e9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007ec:	ff d0                	call   eax
100007ee:	83 c4 20             	add    esp,0x20
100007f1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007f4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100007f8:	0f 85 fb 02 00 00    	jne    10000af9 <copytree(char*, char*)+0x40b>
100007fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000801:	83 c0 10             	add    eax,0x10
10000804:	83 ec 08             	sub    esp,0x8
10000807:	68 10 a5 00 10       	push   0x1000a510	10000808: R_386_32	.text
1000080c:	50                   	push   eax
1000080d:	e8 fc ff ff ff       	call   1000080e <copytree(char*, char*)+0x120>	1000080e: R_386_PC32	strcmp
10000812:	83 c4 10             	add    esp,0x10
10000815:	85 c0                	test   eax,eax
10000817:	74 b2                	je     100007cb <copytree(char*, char*)+0xdd>
10000819:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000081c:	83 c0 10             	add    eax,0x10
1000081f:	83 ec 08             	sub    esp,0x8
10000822:	68 12 a5 00 10       	push   0x1000a512	10000823: R_386_32	.text
10000827:	50                   	push   eax
10000828:	e8 fc ff ff ff       	call   10000829 <copytree(char*, char*)+0x13b>	10000829: R_386_PC32	strcmp
1000082d:	83 c4 10             	add    esp,0x10
10000830:	85 c0                	test   eax,eax
10000832:	74 97                	je     100007cb <copytree(char*, char*)+0xdd>
10000834:	83 ec 08             	sub    esp,0x8
10000837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000083d:	e8 fc ff ff ff       	call   1000083e <copytree(char*, char*)+0x150>	1000083e: R_386_PC32	strcpy
10000842:	83 c4 10             	add    esp,0x10
10000845:	83 ec 08             	sub    esp,0x8
10000848:	68 15 a5 00 10       	push   0x1000a515	10000849: R_386_32	.text
1000084d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000850:	e8 fc ff ff ff       	call   10000851 <copytree(char*, char*)+0x163>	10000851: R_386_PC32	strcat
10000855:	83 c4 10             	add    esp,0x10
10000858:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000085b:	83 c0 10             	add    eax,0x10
1000085e:	83 ec 08             	sub    esp,0x8
10000861:	50                   	push   eax
10000862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000865:	e8 fc ff ff ff       	call   10000866 <copytree(char*, char*)+0x178>	10000866: R_386_PC32	strcat
1000086a:	83 c4 10             	add    esp,0x10
1000086d:	83 ec 08             	sub    esp,0x8
10000870:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000873:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000876:	e8 fc ff ff ff       	call   10000877 <copytree(char*, char*)+0x189>	10000877: R_386_PC32	strcpy
1000087b:	83 c4 10             	add    esp,0x10
1000087e:	83 ec 08             	sub    esp,0x8
10000881:	68 15 a5 00 10       	push   0x1000a515	10000882: R_386_32	.text
10000886:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000889:	e8 fc ff ff ff       	call   1000088a <copytree(char*, char*)+0x19c>	1000088a: R_386_PC32	strcat
1000088e:	83 c4 10             	add    esp,0x10
10000891:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000894:	83 c0 10             	add    eax,0x10
10000897:	83 ec 08             	sub    esp,0x8
1000089a:	50                   	push   eax
1000089b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000089e:	e8 fc ff ff ff       	call   1000089f <copytree(char*, char*)+0x1b1>	1000089f: R_386_PC32	strcat
100008a3:	83 c4 10             	add    esp,0x10
100008a6:	83 ec 04             	sub    esp,0x4
100008a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100008af:	68 31 a5 00 10       	push   0x1000a531	100008b0: R_386_32	.text
100008b4:	e8 fc ff ff ff       	call   100008b5 <copytree(char*, char*)+0x1c7>	100008b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100008b9:	83 c4 10             	add    esp,0x10
100008bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100008bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100008c2:	83 e0 02             	and    eax,0x2
100008c5:	85 c0                	test   eax,eax
100008c7:	74 47                	je     10000910 <copytree(char*, char*)+0x222>
100008c9:	83 ec 08             	sub    esp,0x8
100008cc:	68 c0 01 00 00       	push   0x1c0
100008d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008d4:	e8 fc ff ff ff       	call   100008d5 <copytree(char*, char*)+0x1e7>	100008d5: R_386_PC32	mkdir(char const*, int)
100008d9:	83 c4 10             	add    esp,0x10
100008dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100008df:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100008e3:	74 15                	je     100008fa <copytree(char*, char*)+0x20c>
100008e5:	83 ec 0c             	sub    esp,0xc
100008e8:	68 3b a5 00 10       	push   0x1000a53b	100008e9: R_386_32	.text
100008ed:	e8 fc ff ff ff       	call   100008ee <copytree(char*, char*)+0x200>	100008ee: R_386_PC32	KePanic(char const*)
100008f2:	83 c4 10             	add    esp,0x10
100008f5:	e9 d1 fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
100008fa:	83 ec 08             	sub    esp,0x8
100008fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000903:	e8 fc ff ff ff       	call   10000904 <copytree(char*, char*)+0x216>	10000904: R_386_PC32	copytree(char*, char*)
10000908:	83 c4 10             	add    esp,0x10
1000090b:	e9 bb fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000910:	83 ec 0c             	sub    esp,0xc
10000913:	68 14 01 00 00       	push   0x114
10000918:	e8 fc ff ff ff       	call   10000919 <copytree(char*, char*)+0x22b>	10000919: R_386_PC32	operator new(unsigned long)
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 c3                	mov    ebx,eax
10000922:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000927:	8b 00                	mov    eax,DWORD PTR [eax]
10000929:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000092c:	83 ec 04             	sub    esp,0x4
1000092f:	50                   	push   eax
10000930:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000933:	53                   	push   ebx
10000934:	e8 fc ff ff ff       	call   10000935 <copytree(char*, char*)+0x247>	10000935: R_386_PC32	File::File(char const*, Process*)
10000939:	83 c4 10             	add    esp,0x10
1000093c:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000093f:	83 ec 08             	sub    esp,0x8
10000942:	6a 01                	push   0x1
10000944:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000947:	e8 fc ff ff ff       	call   10000948 <copytree(char*, char*)+0x25a>	10000948: R_386_PC32	File::open(FileOpenMode)
1000094c:	83 c4 10             	add    esp,0x10
1000094f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000953:	75 15                	jne    1000096a <copytree(char*, char*)+0x27c>
10000955:	83 ec 0c             	sub    esp,0xc
10000958:	68 4c a5 00 10       	push   0x1000a54c	10000959: R_386_32	.text
1000095d:	e8 fc ff ff ff       	call   1000095e <copytree(char*, char*)+0x270>	1000095e: R_386_PC32	KePanic(char const*)
10000962:	83 c4 10             	add    esp,0x10
10000965:	e9 8a 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
1000096a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000096e:	0f 84 57 fe ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000974:	83 ec 0c             	sub    esp,0xc
10000977:	68 14 01 00 00       	push   0x114
1000097c:	e8 fc ff ff ff       	call   1000097d <copytree(char*, char*)+0x28f>	1000097d: R_386_PC32	operator new(unsigned long)
10000981:	83 c4 10             	add    esp,0x10
10000984:	89 c3                	mov    ebx,eax
10000986:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000098b:	8b 00                	mov    eax,DWORD PTR [eax]
1000098d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000990:	83 ec 04             	sub    esp,0x4
10000993:	50                   	push   eax
10000994:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000997:	53                   	push   ebx
10000998:	e8 fc ff ff ff       	call   10000999 <copytree(char*, char*)+0x2ab>	10000999: R_386_PC32	File::File(char const*, Process*)
1000099d:	83 c4 10             	add    esp,0x10
100009a0:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
100009a3:	83 ec 08             	sub    esp,0x8
100009a6:	6a 12                	push   0x12
100009a8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009ab:	e8 fc ff ff ff       	call   100009ac <copytree(char*, char*)+0x2be>	100009ac: R_386_PC32	File::open(FileOpenMode)
100009b0:	83 c4 10             	add    esp,0x10
100009b3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
100009b7:	75 23                	jne    100009dc <copytree(char*, char*)+0x2ee>
100009b9:	83 ec 0c             	sub    esp,0xc
100009bc:	68 4c a5 00 10       	push   0x1000a54c	100009bd: R_386_32	.text
100009c1:	e8 fc ff ff ff       	call   100009c2 <copytree(char*, char*)+0x2d4>	100009c2: R_386_PC32	KePanic(char const*)
100009c6:	83 c4 10             	add    esp,0x10
100009c9:	83 ec 0c             	sub    esp,0xc
100009cc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009cf:	e8 fc ff ff ff       	call   100009d0 <copytree(char*, char*)+0x2e2>	100009d0: R_386_PC32	File::close()
100009d4:	83 c4 10             	add    esp,0x10
100009d7:	e9 18 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
100009dc:	83 ec 0c             	sub    esp,0xc
100009df:	68 00 10 00 00       	push   0x1000
100009e4:	e8 fc ff ff ff       	call   100009e5 <copytree(char*, char*)+0x2f7>	100009e5: R_386_PC32	malloc
100009e9:	83 c4 10             	add    esp,0x10
100009ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100009ef:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
100009f3:	75 31                	jne    10000a26 <copytree(char*, char*)+0x338>
100009f5:	83 ec 0c             	sub    esp,0xc
100009f8:	68 5b a5 00 10       	push   0x1000a55b	100009f9: R_386_32	.text
100009fd:	e8 fc ff ff ff       	call   100009fe <copytree(char*, char*)+0x310>	100009fe: R_386_PC32	KePanic(char const*)
10000a02:	83 c4 10             	add    esp,0x10
10000a05:	83 ec 0c             	sub    esp,0xc
10000a08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000a0b:	e8 fc ff ff ff       	call   10000a0c <copytree(char*, char*)+0x31e>	10000a0c: R_386_PC32	free
10000a10:	83 c4 10             	add    esp,0x10
10000a13:	83 ec 0c             	sub    esp,0xc
10000a16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000a19:	e8 fc ff ff ff       	call   10000a1a <copytree(char*, char*)+0x32c>	10000a1a: R_386_PC32	free
10000a1e:	83 c4 10             	add    esp,0x10
10000a21:	e9 1c 01 00 00       	jmp    10000b42 <copytree(char*, char*)+0x454>
10000a26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000a29:	8b 00                	mov    eax,DWORD PTR [eax]
10000a2b:	83 c0 0c             	add    eax,0xc
10000a2e:	8b 00                	mov    eax,DWORD PTR [eax]
10000a30:	83 ec 0c             	sub    esp,0xc
10000a33:	8d 95 b4 fe ff ff    	lea    edx,[ebp-0x14c]
10000a39:	52                   	push   edx
10000a3a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a3d:	6a 00                	push   0x0
10000a3f:	68 00 10 00 00       	push   0x1000
10000a44:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000a47:	ff d0                	call   eax
10000a49:	83 c4 20             	add    esp,0x20
10000a4c:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a4f:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000a53:	75 37                	jne    10000a8c <copytree(char*, char*)+0x39e>
10000a55:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a58:	8b 00                	mov    eax,DWORD PTR [eax]
10000a5a:	83 c0 10             	add    eax,0x10
10000a5d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a5f:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a65:	99                   	cdq    
10000a66:	83 ec 0c             	sub    esp,0xc
10000a69:	8d 9d b0 fe ff ff    	lea    ebx,[ebp-0x150]
10000a6f:	53                   	push   ebx
10000a70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a73:	52                   	push   edx
10000a74:	50                   	push   eax
10000a75:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a78:	ff d1                	call   ecx
10000a7a:	83 c4 20             	add    esp,0x20
10000a7d:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a83:	3d 00 10 00 00       	cmp    eax,0x1000
10000a88:	75 05                	jne    10000a8f <copytree(char*, char*)+0x3a1>
10000a8a:	eb 9a                	jmp    10000a26 <copytree(char*, char*)+0x338>
10000a8c:	90                   	nop
10000a8d:	eb 01                	jmp    10000a90 <copytree(char*, char*)+0x3a2>
10000a8f:	90                   	nop
10000a90:	83 ec 0c             	sub    esp,0xc
10000a93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a96:	e8 fc ff ff ff       	call   10000a97 <copytree(char*, char*)+0x3a9>	10000a97: R_386_PC32	free
10000a9b:	83 c4 10             	add    esp,0x10
10000a9e:	83 ec 0c             	sub    esp,0xc
10000aa1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000aa4:	e8 fc ff ff ff       	call   10000aa5 <copytree(char*, char*)+0x3b7>	10000aa5: R_386_PC32	File::close()
10000aa9:	83 c4 10             	add    esp,0x10
10000aac:	83 ec 0c             	sub    esp,0xc
10000aaf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <copytree(char*, char*)+0x3c5>	10000ab3: R_386_PC32	File::close()
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000abe:	74 15                	je     10000ad5 <copytree(char*, char*)+0x3e7>
10000ac0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000ac3:	8b 00                	mov    eax,DWORD PTR [eax]
10000ac5:	83 c0 08             	add    eax,0x8
10000ac8:	8b 00                	mov    eax,DWORD PTR [eax]
10000aca:	83 ec 0c             	sub    esp,0xc
10000acd:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ad0:	ff d0                	call   eax
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10000ad9:	0f 84 ec fc ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000adf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000ae2:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae4:	83 c0 08             	add    eax,0x8
10000ae7:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae9:	83 ec 0c             	sub    esp,0xc
10000aec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000aef:	ff d0                	call   eax
10000af1:	83 c4 10             	add    esp,0x10
10000af4:	e9 d2 fc ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000af9:	90                   	nop
10000afa:	83 ec 0c             	sub    esp,0xc
10000afd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000b00:	e8 fc ff ff ff       	call   10000b01 <copytree(char*, char*)+0x413>	10000b01: R_386_PC32	free
10000b05:	83 c4 10             	add    esp,0x10
10000b08:	83 ec 0c             	sub    esp,0xc
10000b0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000b0e:	e8 fc ff ff ff       	call   10000b0f <copytree(char*, char*)+0x421>	10000b0f: R_386_PC32	free
10000b13:	83 c4 10             	add    esp,0x10
10000b16:	83 ec 0c             	sub    esp,0xc
10000b19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b1c:	e8 fc ff ff ff       	call   10000b1d <copytree(char*, char*)+0x42f>	10000b1d: R_386_PC32	Directory::close()
10000b21:	83 c4 10             	add    esp,0x10
10000b24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000b28:	74 18                	je     10000b42 <copytree(char*, char*)+0x454>
10000b2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000b2d:	8b 00                	mov    eax,DWORD PTR [eax]
10000b2f:	83 c0 08             	add    eax,0x8
10000b32:	8b 00                	mov    eax,DWORD PTR [eax]
10000b34:	83 ec 0c             	sub    esp,0xc
10000b37:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b3a:	ff d0                	call   eax
10000b3c:	83 c4 10             	add    esp,0x10
10000b3f:	eb 01                	jmp    10000b42 <copytree(char*, char*)+0x454>
10000b41:	90                   	nop
10000b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000b45:	c9                   	leave  
10000b46:	c3                   	ret    

10000b47 <backupTree(char*, unsigned short)>:
10000b47:	55                   	push   ebp
10000b48:	89 e5                	mov    ebp,esp
10000b4a:	57                   	push   edi
10000b4b:	56                   	push   esi
10000b4c:	53                   	push   ebx
10000b4d:	81 ec 8c 12 00 00    	sub    esp,0x128c
10000b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000b56:	66 89 85 74 ed ff ff 	mov    WORD PTR [ebp-0x128c],ax
10000b5d:	83 ec 0c             	sub    esp,0xc
10000b60:	68 90 01 00 00       	push   0x190
10000b65:	e8 fc ff ff ff       	call   10000b66 <backupTree(char*, unsigned short)+0x1f>	10000b66: R_386_PC32	malloc
10000b6a:	83 c4 10             	add    esp,0x10
10000b6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000b70:	83 ec 04             	sub    esp,0x4
10000b73:	68 90 01 00 00       	push   0x190
10000b78:	6a 00                	push   0x0
10000b7a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000b7d:	e8 fc ff ff ff       	call   10000b7e <backupTree(char*, unsigned short)+0x37>	10000b7e: R_386_PC32	memset
10000b82:	83 c4 10             	add    esp,0x10
10000b85:	8d 85 a8 fe ff ff    	lea    eax,[ebp-0x158]
10000b8b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000b8e:	83 ec 0c             	sub    esp,0xc
10000b91:	68 14 01 00 00       	push   0x114
10000b96:	e8 fc ff ff ff       	call   10000b97 <backupTree(char*, unsigned short)+0x50>	10000b97: R_386_PC32	operator new(unsigned long)
10000b9b:	83 c4 10             	add    esp,0x10
10000b9e:	89 c3                	mov    ebx,eax
10000ba0:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ba5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000baa:	83 ec 04             	sub    esp,0x4
10000bad:	50                   	push   eax
10000bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bb1:	53                   	push   ebx
10000bb2:	e8 fc ff ff ff       	call   10000bb3 <backupTree(char*, unsigned short)+0x6c>	10000bb3: R_386_PC32	Directory::Directory(char const*, Process*)
10000bb7:	83 c4 10             	add    esp,0x10
10000bba:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000bbd:	83 ec 0c             	sub    esp,0xc
10000bc0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bc3:	e8 fc ff ff ff       	call   10000bc4 <backupTree(char*, unsigned short)+0x7d>	10000bc4: R_386_PC32	Directory::open()
10000bc8:	83 c4 10             	add    esp,0x10
10000bcb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000bce:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000bd2:	74 34                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000bd4:	83 ec 0c             	sub    esp,0xc
10000bd7:	68 17 a5 00 10       	push   0x1000a517	10000bd8: R_386_32	.text
10000bdc:	e8 fc ff ff ff       	call   10000bdd <backupTree(char*, unsigned short)+0x96>	10000bdd: R_386_PC32	Dbg::kprintf(char const*, ...)
10000be1:	83 c4 10             	add    esp,0x10
10000be4:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10000be8:	0f 84 c8 05 00 00    	je     100011b6 <backupTree(char*, unsigned short)+0x66f>
10000bee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000bf1:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf3:	83 c0 08             	add    eax,0x8
10000bf6:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf8:	83 ec 0c             	sub    esp,0xc
10000bfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bfe:	ff d0                	call   eax
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	e9 af 05 00 00       	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
10000c08:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c0b:	8b 00                	mov    eax,DWORD PTR [eax]
10000c0d:	83 c0 0c             	add    eax,0xc
10000c10:	8b 00                	mov    eax,DWORD PTR [eax]
10000c12:	83 ec 0c             	sub    esp,0xc
10000c15:	8d 95 a4 fe ff ff    	lea    edx,[ebp-0x15c]
10000c1b:	52                   	push   edx
10000c1c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c1f:	6a 00                	push   0x0
10000c21:	68 10 01 00 00       	push   0x110
10000c26:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c29:	ff d0                	call   eax
10000c2b:	83 c4 20             	add    esp,0x20
10000c2e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c31:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10000c35:	0f 85 41 05 00 00    	jne    1000117c <backupTree(char*, unsigned short)+0x635>
10000c3b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c3e:	83 c0 10             	add    eax,0x10
10000c41:	83 ec 08             	sub    esp,0x8
10000c44:	68 10 a5 00 10       	push   0x1000a510	10000c45: R_386_32	.text
10000c49:	50                   	push   eax
10000c4a:	e8 fc ff ff ff       	call   10000c4b <backupTree(char*, unsigned short)+0x104>	10000c4b: R_386_PC32	strcmp
10000c4f:	83 c4 10             	add    esp,0x10
10000c52:	85 c0                	test   eax,eax
10000c54:	74 b2                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c59:	83 c0 10             	add    eax,0x10
10000c5c:	83 ec 08             	sub    esp,0x8
10000c5f:	68 12 a5 00 10       	push   0x1000a512	10000c60: R_386_32	.text
10000c64:	50                   	push   eax
10000c65:	e8 fc ff ff ff       	call   10000c66 <backupTree(char*, unsigned short)+0x11f>	10000c66: R_386_PC32	strcmp
10000c6a:	83 c4 10             	add    esp,0x10
10000c6d:	85 c0                	test   eax,eax
10000c6f:	74 97                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c71:	83 ec 08             	sub    esp,0x8
10000c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c77:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c7a:	e8 fc ff ff ff       	call   10000c7b <backupTree(char*, unsigned short)+0x134>	10000c7b: R_386_PC32	strcpy
10000c7f:	83 c4 10             	add    esp,0x10
10000c82:	83 ec 08             	sub    esp,0x8
10000c85:	68 15 a5 00 10       	push   0x1000a515	10000c86: R_386_32	.text
10000c8a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c8d:	e8 fc ff ff ff       	call   10000c8e <backupTree(char*, unsigned short)+0x147>	10000c8e: R_386_PC32	strcat
10000c92:	83 c4 10             	add    esp,0x10
10000c95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c98:	83 c0 10             	add    eax,0x10
10000c9b:	83 ec 08             	sub    esp,0x8
10000c9e:	50                   	push   eax
10000c9f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ca2:	e8 fc ff ff ff       	call   10000ca3 <backupTree(char*, unsigned short)+0x15c>	10000ca3: R_386_PC32	strcat
10000ca7:	83 c4 10             	add    esp,0x10
10000caa:	66 c7 45 e6 bc ad    	mov    WORD PTR [ebp-0x1a],0xadbc
10000cb0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10000cb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000cba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cbd:	01 d0                	add    eax,edx
10000cbf:	83 c0 10             	add    eax,0x10
10000cc2:	8a 00                	mov    al,BYTE PTR [eax]
10000cc4:	84 c0                	test   al,al
10000cc6:	74 3c                	je     10000d04 <backupTree(char*, unsigned short)+0x1bd>
10000cc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000ccb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cce:	01 d0                	add    eax,edx
10000cd0:	83 c0 10             	add    eax,0x10
10000cd3:	8a 00                	mov    al,BYTE PTR [eax]
10000cd5:	66 0f be d0          	movsx  dx,al
10000cd9:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000cdd:	31 d0                	xor    eax,edx
10000cdf:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000ce3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000ce7:	c1 e0 03             	shl    eax,0x3
10000cea:	89 c2                	mov    edx,eax
10000cec:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000cf0:	c1 f8 0d             	sar    eax,0xd
10000cf3:	09 d0                	or     eax,edx
10000cf5:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000cf9:	66 81 6d e6 f1 06    	sub    WORD PTR [ebp-0x1a],0x6f1
10000cff:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10000d02:	eb b3                	jmp    10000cb7 <backupTree(char*, unsigned short)+0x170>
10000d04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000d0a:	83 e0 02             	and    eax,0x2
10000d0d:	85 c0                	test   eax,eax
10000d0f:	74 37                	je     10000d48 <backupTree(char*, unsigned short)+0x201>
10000d11:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d14:	83 c0 10             	add    eax,0x10
10000d17:	83 ec 08             	sub    esp,0x8
10000d1a:	68 65 a5 00 10       	push   0x1000a565	10000d1b: R_386_32	.text
10000d1f:	50                   	push   eax
10000d20:	e8 fc ff ff ff       	call   10000d21 <backupTree(char*, unsigned short)+0x1da>	10000d21: R_386_PC32	strcmp
10000d25:	83 c4 10             	add    esp,0x10
10000d28:	85 c0                	test   eax,eax
10000d2a:	0f 84 d8 fe ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d30:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000d34:	83 ec 08             	sub    esp,0x8
10000d37:	50                   	push   eax
10000d38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000d3b:	e8 fc ff ff ff       	call   10000d3c <backupTree(char*, unsigned short)+0x1f5>	10000d3c: R_386_PC32	backupTree(char*, unsigned short)
10000d40:	83 c4 10             	add    esp,0x10
10000d43:	e9 c0 fe ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d48:	c6 85 a3 fe ff ff 00 	mov    BYTE PTR [ebp-0x15d],0x0
10000d4f:	83 ec 08             	sub    esp,0x8
10000d52:	68 6c a5 00 10       	push   0x1000a56c	10000d53: R_386_32	.text
10000d57:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d5d:	50                   	push   eax
10000d5e:	e8 fc ff ff ff       	call   10000d5f <backupTree(char*, unsigned short)+0x218>	10000d5f: R_386_PC32	strcpy
10000d63:	83 c4 10             	add    esp,0x10
10000d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10000d6c:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000d72:	83 ec 08             	sub    esp,0x8
10000d75:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000d7b:	50                   	push   eax
10000d7c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d82:	50                   	push   eax
10000d83:	e8 fc ff ff ff       	call   10000d84 <backupTree(char*, unsigned short)+0x23d>	10000d84: R_386_PC32	strcat
10000d88:	83 c4 10             	add    esp,0x10
10000d8b:	83 ec 04             	sub    esp,0x4
10000d8e:	6a 09                	push   0x9
10000d90:	6a 00                	push   0x0
10000d92:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000d98:	50                   	push   eax
10000d99:	e8 fc ff ff ff       	call   10000d9a <backupTree(char*, unsigned short)+0x253>	10000d9a: R_386_PC32	memset
10000d9e:	83 c4 10             	add    esp,0x10
10000da1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000da4:	83 c0 10             	add    eax,0x10
10000da7:	83 ec 04             	sub    esp,0x4
10000daa:	6a 08                	push   0x8
10000dac:	50                   	push   eax
10000dad:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000db3:	50                   	push   eax
10000db4:	e8 fc ff ff ff       	call   10000db5 <backupTree(char*, unsigned short)+0x26e>	10000db5: R_386_PC32	strncpyxx(char*, char const*, unsigned long)
10000db9:	83 c4 10             	add    esp,0x10
10000dbc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000dc3:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000dc7:	0f 8f c5 00 00 00    	jg     10000e92 <backupTree(char*, unsigned short)+0x34b>
10000dcd:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000dd3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000dd6:	01 d0                	add    eax,edx
10000dd8:	8a 00                	mov    al,BYTE PTR [eax]
10000dda:	3c 60                	cmp    al,0x60
10000ddc:	7e 30                	jle    10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000dde:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000de4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000de7:	01 d0                	add    eax,edx
10000de9:	8a 00                	mov    al,BYTE PTR [eax]
10000deb:	3c 7a                	cmp    al,0x7a
10000ded:	7f 1f                	jg     10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000def:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000df5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000df8:	01 d0                	add    eax,edx
10000dfa:	8a 00                	mov    al,BYTE PTR [eax]
10000dfc:	83 e8 20             	sub    eax,0x20
10000dff:	88 c2                	mov    dl,al
10000e01:	8d 8d 99 fe ff ff    	lea    ecx,[ebp-0x167]
10000e07:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e0a:	01 c8                	add    eax,ecx
10000e0c:	88 10                	mov    BYTE PTR [eax],dl
10000e0e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e17:	01 d0                	add    eax,edx
10000e19:	8a 00                	mov    al,BYTE PTR [eax]
10000e1b:	3c 59                	cmp    al,0x59
10000e1d:	75 0e                	jne    10000e2d <backupTree(char*, unsigned short)+0x2e6>
10000e1f:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e25:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e28:	01 d0                	add    eax,edx
10000e2a:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e2d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e33:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e36:	01 d0                	add    eax,edx
10000e38:	8a 00                	mov    al,BYTE PTR [eax]
10000e3a:	3c 5a                	cmp    al,0x5a
10000e3c:	75 0e                	jne    10000e4c <backupTree(char*, unsigned short)+0x305>
10000e3e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e47:	01 d0                	add    eax,edx
10000e49:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e4c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e52:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e55:	01 d0                	add    eax,edx
10000e57:	8a 00                	mov    al,BYTE PTR [eax]
10000e59:	3c 20                	cmp    al,0x20
10000e5b:	75 0e                	jne    10000e6b <backupTree(char*, unsigned short)+0x324>
10000e5d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e63:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e66:	01 d0                	add    eax,edx
10000e68:	c6 00 59             	mov    BYTE PTR [eax],0x59
10000e6b:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e74:	01 d0                	add    eax,edx
10000e76:	8a 00                	mov    al,BYTE PTR [eax]
10000e78:	3c 2e                	cmp    al,0x2e
10000e7a:	75 0e                	jne    10000e8a <backupTree(char*, unsigned short)+0x343>
10000e7c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e82:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e85:	01 d0                	add    eax,edx
10000e87:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10000e8a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10000e8d:	e9 31 ff ff ff       	jmp    10000dc3 <backupTree(char*, unsigned short)+0x27c>
10000e92:	83 ec 08             	sub    esp,0x8
10000e95:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000e9b:	50                   	push   eax
10000e9c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ea2:	50                   	push   eax
10000ea3:	e8 fc ff ff ff       	call   10000ea4 <backupTree(char*, unsigned short)+0x35d>	10000ea4: R_386_PC32	strcat
10000ea8:	83 c4 10             	add    esp,0x10
10000eab:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000eae:	83 c0 10             	add    eax,0x10
10000eb1:	83 ec 0c             	sub    esp,0xc
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <backupTree(char*, unsigned short)+0x36f>	10000eb6: R_386_PC32	strlen
10000eba:	83 c4 10             	add    esp,0x10
10000ebd:	83 c0 41             	add    eax,0x41
10000ec0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000ec6:	83 ec 08             	sub    esp,0x8
10000ec9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000ecf:	50                   	push   eax
10000ed0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ed6:	50                   	push   eax
10000ed7:	e8 fc ff ff ff       	call   10000ed8 <backupTree(char*, unsigned short)+0x391>	10000ed8: R_386_PC32	strcat
10000edc:	83 c4 10             	add    esp,0x10
10000edf:	83 ec 08             	sub    esp,0x8
10000ee2:	68 10 a5 00 10       	push   0x1000a510	10000ee3: R_386_32	.text
10000ee7:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000eed:	50                   	push   eax
10000eee:	e8 fc ff ff ff       	call   10000eef <backupTree(char*, unsigned short)+0x3a8>	10000eef: R_386_PC32	strcat
10000ef3:	83 c4 10             	add    esp,0x10
10000ef6:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000efa:	25 65 07 00 00       	and    eax,0x765
10000eff:	33 85 74 ed ff ff    	xor    eax,DWORD PTR [ebp-0x128c]
10000f05:	66 89 45 c6          	mov    WORD PTR [ebp-0x3a],ax
10000f09:	8d 85 88 fe ff ff    	lea    eax,[ebp-0x178]
10000f0f:	bb 85 a5 00 10       	mov    ebx,0x1000a585	10000f10: R_386_32	.text
10000f14:	ba 11 00 00 00       	mov    edx,0x11
10000f19:	89 c7                	mov    edi,eax
10000f1b:	89 de                	mov    esi,ebx
10000f1d:	89 d1                	mov    ecx,edx
10000f1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000f21:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f25:	83 e0 0f             	and    eax,0xf
10000f28:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f2f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f35:	83 ec 08             	sub    esp,0x8
10000f38:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f3e:	50                   	push   eax
10000f3f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f45:	50                   	push   eax
10000f46:	e8 fc ff ff ff       	call   10000f47 <backupTree(char*, unsigned short)+0x400>	10000f47: R_386_PC32	strcat
10000f4b:	83 c4 10             	add    esp,0x10
10000f4e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f52:	c1 f8 04             	sar    eax,0x4
10000f55:	83 e0 0f             	and    eax,0xf
10000f58:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f5f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f65:	83 ec 08             	sub    esp,0x8
10000f68:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f6e:	50                   	push   eax
10000f6f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f75:	50                   	push   eax
10000f76:	e8 fc ff ff ff       	call   10000f77 <backupTree(char*, unsigned short)+0x430>	10000f77: R_386_PC32	strcat
10000f7b:	83 c4 10             	add    esp,0x10
10000f7e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f82:	c1 f8 08             	sar    eax,0x8
10000f85:	83 e0 0f             	and    eax,0xf
10000f88:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f8f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f95:	83 ec 08             	sub    esp,0x8
10000f98:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f9e:	50                   	push   eax
10000f9f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fa5:	50                   	push   eax
10000fa6:	e8 fc ff ff ff       	call   10000fa7 <backupTree(char*, unsigned short)+0x460>	10000fa7: R_386_PC32	strcat
10000fab:	83 c4 10             	add    esp,0x10
10000fae:	66 8b 45 c6          	mov    ax,WORD PTR [ebp-0x3a]
10000fb2:	66 c1 e8 0c          	shr    ax,0xc
10000fb6:	0f b7 c0             	movzx  eax,ax
10000fb9:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000fc0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000fc6:	83 ec 08             	sub    esp,0x8
10000fc9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000fcf:	50                   	push   eax
10000fd0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fd6:	50                   	push   eax
10000fd7:	e8 fc ff ff ff       	call   10000fd8 <backupTree(char*, unsigned short)+0x491>	10000fd8: R_386_PC32	strcat
10000fdc:	83 c4 10             	add    esp,0x10
10000fdf:	83 ec 0c             	sub    esp,0xc
10000fe2:	68 14 01 00 00       	push   0x114
10000fe7:	e8 fc ff ff ff       	call   10000fe8 <backupTree(char*, unsigned short)+0x4a1>	10000fe8: R_386_PC32	operator new(unsigned long)
10000fec:	83 c4 10             	add    esp,0x10
10000fef:	89 c3                	mov    ebx,eax
10000ff1:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ff6:	8b 00                	mov    eax,DWORD PTR [eax]
10000ff8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000ffb:	83 ec 04             	sub    esp,0x4
10000ffe:	50                   	push   eax
10000fff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001002:	53                   	push   ebx
10001003:	e8 fc ff ff ff       	call   10001004 <backupTree(char*, unsigned short)+0x4bd>	10001004: R_386_PC32	File::File(char const*, Process*)
10001008:	83 c4 10             	add    esp,0x10
1000100b:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
1000100e:	83 ec 08             	sub    esp,0x8
10001011:	6a 01                	push   0x1
10001013:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001016:	e8 fc ff ff ff       	call   10001017 <backupTree(char*, unsigned short)+0x4d0>	10001017: R_386_PC32	File::open(FileOpenMode)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001022:	75 15                	jne    10001039 <backupTree(char*, unsigned short)+0x4f2>
10001024:	83 ec 0c             	sub    esp,0xc
10001027:	68 4c a5 00 10       	push   0x1000a54c	10001028: R_386_32	.text
1000102c:	e8 fc ff ff ff       	call   1000102d <backupTree(char*, unsigned short)+0x4e6>	1000102d: R_386_PC32	KePanic(char const*)
10001031:	83 c4 10             	add    esp,0x10
10001034:	e9 3e 01 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
10001039:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
1000103d:	0f 84 c5 fb ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001043:	83 ec 0c             	sub    esp,0xc
10001046:	68 14 01 00 00       	push   0x114
1000104b:	e8 fc ff ff ff       	call   1000104c <backupTree(char*, unsigned short)+0x505>	1000104c: R_386_PC32	operator new(unsigned long)
10001050:	83 c4 10             	add    esp,0x10
10001053:	89 c3                	mov    ebx,eax
10001055:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000105a:	8b 00                	mov    eax,DWORD PTR [eax]
1000105c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000105f:	83 ec 04             	sub    esp,0x4
10001062:	50                   	push   eax
10001063:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10001069:	50                   	push   eax
1000106a:	53                   	push   ebx
1000106b:	e8 fc ff ff ff       	call   1000106c <backupTree(char*, unsigned short)+0x525>	1000106c: R_386_PC32	File::File(char const*, Process*)
10001070:	83 c4 10             	add    esp,0x10
10001073:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10001076:	83 ec 08             	sub    esp,0x8
10001079:	6a 12                	push   0x12
1000107b:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000107e:	e8 fc ff ff ff       	call   1000107f <backupTree(char*, unsigned short)+0x538>	1000107f: R_386_PC32	File::open(FileOpenMode)
10001083:	83 c4 10             	add    esp,0x10
10001086:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000108a:	75 23                	jne    100010af <backupTree(char*, unsigned short)+0x568>
1000108c:	83 ec 0c             	sub    esp,0xc
1000108f:	68 4c a5 00 10       	push   0x1000a54c	10001090: R_386_32	.text
10001094:	e8 fc ff ff ff       	call   10001095 <backupTree(char*, unsigned short)+0x54e>	10001095: R_386_PC32	KePanic(char const*)
10001099:	83 c4 10             	add    esp,0x10
1000109c:	83 ec 0c             	sub    esp,0xc
1000109f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
100010a2:	e8 fc ff ff ff       	call   100010a3 <backupTree(char*, unsigned short)+0x55c>	100010a3: R_386_PC32	File::close()
100010a7:	83 c4 10             	add    esp,0x10
100010aa:	e9 c8 00 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
100010af:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100010b2:	8b 00                	mov    eax,DWORD PTR [eax]
100010b4:	83 c0 0c             	add    eax,0xc
100010b7:	8b 00                	mov    eax,DWORD PTR [eax]
100010b9:	83 ec 0c             	sub    esp,0xc
100010bc:	8d 95 84 fe ff ff    	lea    edx,[ebp-0x17c]
100010c2:	52                   	push   edx
100010c3:	8d 95 80 ee ff ff    	lea    edx,[ebp-0x1180]
100010c9:	52                   	push   edx
100010ca:	6a 00                	push   0x0
100010cc:	68 00 10 00 00       	push   0x1000
100010d1:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100010d4:	ff d0                	call   eax
100010d6:	83 c4 20             	add    esp,0x20
100010d9:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100010dc:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100010e0:	75 3b                	jne    1000111d <backupTree(char*, unsigned short)+0x5d6>
100010e2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100010e5:	8b 00                	mov    eax,DWORD PTR [eax]
100010e7:	83 c0 10             	add    eax,0x10
100010ea:	8b 08                	mov    ecx,DWORD PTR [eax]
100010ec:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
100010f2:	99                   	cdq    
100010f3:	83 ec 0c             	sub    esp,0xc
100010f6:	8d 9d 80 fe ff ff    	lea    ebx,[ebp-0x180]
100010fc:	53                   	push   ebx
100010fd:	8d 9d 80 ee ff ff    	lea    ebx,[ebp-0x1180]
10001103:	53                   	push   ebx
10001104:	52                   	push   edx
10001105:	50                   	push   eax
10001106:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001109:	ff d1                	call   ecx
1000110b:	83 c4 20             	add    esp,0x20
1000110e:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
10001114:	3d 00 10 00 00       	cmp    eax,0x1000
10001119:	75 05                	jne    10001120 <backupTree(char*, unsigned short)+0x5d9>
1000111b:	eb 92                	jmp    100010af <backupTree(char*, unsigned short)+0x568>
1000111d:	90                   	nop
1000111e:	eb 01                	jmp    10001121 <backupTree(char*, unsigned short)+0x5da>
10001120:	90                   	nop
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001127:	e8 fc ff ff ff       	call   10001128 <backupTree(char*, unsigned short)+0x5e1>	10001128: R_386_PC32	File::close()
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	83 ec 0c             	sub    esp,0xc
10001132:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001135:	e8 fc ff ff ff       	call   10001136 <backupTree(char*, unsigned short)+0x5ef>	10001136: R_386_PC32	File::close()
1000113a:	83 c4 10             	add    esp,0x10
1000113d:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001141:	74 15                	je     10001158 <backupTree(char*, unsigned short)+0x611>
10001143:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001146:	8b 00                	mov    eax,DWORD PTR [eax]
10001148:	83 c0 08             	add    eax,0x8
1000114b:	8b 00                	mov    eax,DWORD PTR [eax]
1000114d:	83 ec 0c             	sub    esp,0xc
10001150:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001153:	ff d0                	call   eax
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000115c:	0f 84 a6 fa ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001162:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10001165:	8b 00                	mov    eax,DWORD PTR [eax]
10001167:	83 c0 08             	add    eax,0x8
1000116a:	8b 00                	mov    eax,DWORD PTR [eax]
1000116c:	83 ec 0c             	sub    esp,0xc
1000116f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001172:	ff d0                	call   eax
10001174:	83 c4 10             	add    esp,0x10
10001177:	e9 8c fa ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
1000117c:	90                   	nop
1000117d:	83 ec 0c             	sub    esp,0xc
10001180:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001183:	e8 fc ff ff ff       	call   10001184 <backupTree(char*, unsigned short)+0x63d>	10001184: R_386_PC32	free
10001188:	83 c4 10             	add    esp,0x10
1000118b:	83 ec 0c             	sub    esp,0xc
1000118e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001191:	e8 fc ff ff ff       	call   10001192 <backupTree(char*, unsigned short)+0x64b>	10001192: R_386_PC32	Directory::close()
10001196:	83 c4 10             	add    esp,0x10
10001199:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
1000119d:	74 18                	je     100011b7 <backupTree(char*, unsigned short)+0x670>
1000119f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100011a2:	8b 00                	mov    eax,DWORD PTR [eax]
100011a4:	83 c0 08             	add    eax,0x8
100011a7:	8b 00                	mov    eax,DWORD PTR [eax]
100011a9:	83 ec 0c             	sub    esp,0xc
100011ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011af:	ff d0                	call   eax
100011b1:	83 c4 10             	add    esp,0x10
100011b4:	eb 01                	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
100011b6:	90                   	nop
100011b7:	8d 65 f4             	lea    esp,[ebp-0xc]
100011ba:	5b                   	pop    ebx
100011bb:	5e                   	pop    esi
100011bc:	5f                   	pop    edi
100011bd:	5d                   	pop    ebp
100011be:	c3                   	ret    

100011bf <createUser(char const*)>:
100011bf:	55                   	push   ebp
100011c0:	89 e5                	mov    ebp,esp
100011c2:	81 ec 08 01 00 00    	sub    esp,0x108
100011c8:	68 96 a5 00 10       	push   0x1000a596	100011c9: R_386_32	.text
100011cd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011d3:	50                   	push   eax
100011d4:	e8 fc ff ff ff       	call   100011d5 <createUser(char const*)+0x16>	100011d5: R_386_PC32	strcpy
100011d9:	83 c4 08             	add    esp,0x8
100011dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011df:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011e5:	50                   	push   eax
100011e6:	e8 fc ff ff ff       	call   100011e7 <createUser(char const*)+0x28>	100011e7: R_386_PC32	strcat
100011eb:	83 c4 08             	add    esp,0x8
100011ee:	83 ec 08             	sub    esp,0x8
100011f1:	68 c0 01 00 00       	push   0x1c0
100011f6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011fc:	50                   	push   eax
100011fd:	e8 fc ff ff ff       	call   100011fe <createUser(char const*)+0x3f>	100011fe: R_386_PC32	mkdir(char const*, int)
10001202:	83 c4 10             	add    esp,0x10
10001205:	83 ec 08             	sub    esp,0x8
10001208:	68 a0 a5 00 10       	push   0x1000a5a0	10001209: R_386_32	.text
1000120d:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001213:	50                   	push   eax
10001214:	e8 fc ff ff ff       	call   10001215 <createUser(char const*)+0x56>	10001215: R_386_PC32	strcat
10001219:	83 c4 10             	add    esp,0x10
1000121c:	83 ec 08             	sub    esp,0x8
1000121f:	68 c0 01 00 00       	push   0x1c0
10001224:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000122a:	50                   	push   eax
1000122b:	e8 fc ff ff ff       	call   1000122c <createUser(char const*)+0x6d>	1000122c: R_386_PC32	mkdir(char const*, int)
10001230:	83 c4 10             	add    esp,0x10
10001233:	83 ec 08             	sub    esp,0x8
10001236:	68 96 a5 00 10       	push   0x1000a596	10001237: R_386_32	.text
1000123b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001241:	50                   	push   eax
10001242:	e8 fc ff ff ff       	call   10001243 <createUser(char const*)+0x84>	10001243: R_386_PC32	strcpy
10001247:	83 c4 10             	add    esp,0x10
1000124a:	83 ec 08             	sub    esp,0x8
1000124d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001250:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001256:	50                   	push   eax
10001257:	e8 fc ff ff ff       	call   10001258 <createUser(char const*)+0x99>	10001258: R_386_PC32	strcat
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	83 ec 08             	sub    esp,0x8
10001262:	68 a9 a5 00 10       	push   0x1000a5a9	10001263: R_386_32	.text
10001267:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000126d:	50                   	push   eax
1000126e:	e8 fc ff ff ff       	call   1000126f <createUser(char const*)+0xb0>	1000126f: R_386_PC32	strcat
10001273:	83 c4 10             	add    esp,0x10
10001276:	83 ec 08             	sub    esp,0x8
10001279:	68 c0 01 00 00       	push   0x1c0
1000127e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001284:	50                   	push   eax
10001285:	e8 fc ff ff ff       	call   10001286 <createUser(char const*)+0xc7>	10001286: R_386_PC32	mkdir(char const*, int)
1000128a:	83 c4 10             	add    esp,0x10
1000128d:	83 ec 08             	sub    esp,0x8
10001290:	68 96 a5 00 10       	push   0x1000a596	10001291: R_386_32	.text
10001295:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000129b:	50                   	push   eax
1000129c:	e8 fc ff ff ff       	call   1000129d <createUser(char const*)+0xde>	1000129d: R_386_PC32	strcpy
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	83 ec 08             	sub    esp,0x8
100012a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012aa:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012b0:	50                   	push   eax
100012b1:	e8 fc ff ff ff       	call   100012b2 <createUser(char const*)+0xf3>	100012b2: R_386_PC32	strcat
100012b6:	83 c4 10             	add    esp,0x10
100012b9:	83 ec 08             	sub    esp,0x8
100012bc:	68 b4 a5 00 10       	push   0x1000a5b4	100012bd: R_386_32	.text
100012c1:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012c7:	50                   	push   eax
100012c8:	e8 fc ff ff ff       	call   100012c9 <createUser(char const*)+0x10a>	100012c9: R_386_PC32	strcat
100012cd:	83 c4 10             	add    esp,0x10
100012d0:	83 ec 08             	sub    esp,0x8
100012d3:	68 c0 01 00 00       	push   0x1c0
100012d8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <createUser(char const*)+0x121>	100012e0: R_386_PC32	mkdir(char const*, int)
100012e4:	83 c4 10             	add    esp,0x10
100012e7:	83 ec 08             	sub    esp,0x8
100012ea:	68 96 a5 00 10       	push   0x1000a596	100012eb: R_386_32	.text
100012ef:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012f5:	50                   	push   eax
100012f6:	e8 fc ff ff ff       	call   100012f7 <createUser(char const*)+0x138>	100012f7: R_386_PC32	strcpy
100012fb:	83 c4 10             	add    esp,0x10
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001304:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000130a:	50                   	push   eax
1000130b:	e8 fc ff ff ff       	call   1000130c <createUser(char const*)+0x14d>	1000130c: R_386_PC32	strcat
10001310:	83 c4 10             	add    esp,0x10
10001313:	83 ec 08             	sub    esp,0x8
10001316:	68 bf a5 00 10       	push   0x1000a5bf	10001317: R_386_32	.text
1000131b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001321:	50                   	push   eax
10001322:	e8 fc ff ff ff       	call   10001323 <createUser(char const*)+0x164>	10001323: R_386_PC32	strcat
10001327:	83 c4 10             	add    esp,0x10
1000132a:	83 ec 08             	sub    esp,0x8
1000132d:	68 c0 01 00 00       	push   0x1c0
10001332:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001338:	50                   	push   eax
10001339:	e8 fc ff ff ff       	call   1000133a <createUser(char const*)+0x17b>	1000133a: R_386_PC32	mkdir(char const*, int)
1000133e:	83 c4 10             	add    esp,0x10
10001341:	83 ec 08             	sub    esp,0x8
10001344:	68 96 a5 00 10       	push   0x1000a596	10001345: R_386_32	.text
10001349:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000134f:	50                   	push   eax
10001350:	e8 fc ff ff ff       	call   10001351 <createUser(char const*)+0x192>	10001351: R_386_PC32	strcpy
10001355:	83 c4 10             	add    esp,0x10
10001358:	83 ec 08             	sub    esp,0x8
1000135b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000135e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001364:	50                   	push   eax
10001365:	e8 fc ff ff ff       	call   10001366 <createUser(char const*)+0x1a7>	10001366: R_386_PC32	strcat
1000136a:	83 c4 10             	add    esp,0x10
1000136d:	83 ec 08             	sub    esp,0x8
10001370:	68 c9 a5 00 10       	push   0x1000a5c9	10001371: R_386_32	.text
10001375:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000137b:	50                   	push   eax
1000137c:	e8 fc ff ff ff       	call   1000137d <createUser(char const*)+0x1be>	1000137d: R_386_PC32	strcat
10001381:	83 c4 10             	add    esp,0x10
10001384:	83 ec 08             	sub    esp,0x8
10001387:	68 c0 01 00 00       	push   0x1c0
1000138c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001392:	50                   	push   eax
10001393:	e8 fc ff ff ff       	call   10001394 <createUser(char const*)+0x1d5>	10001394: R_386_PC32	mkdir(char const*, int)
10001398:	83 c4 10             	add    esp,0x10
1000139b:	83 ec 08             	sub    esp,0x8
1000139e:	68 96 a5 00 10       	push   0x1000a596	1000139f: R_386_32	.text
100013a3:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013a9:	50                   	push   eax
100013aa:	e8 fc ff ff ff       	call   100013ab <createUser(char const*)+0x1ec>	100013ab: R_386_PC32	strcpy
100013af:	83 c4 10             	add    esp,0x10
100013b2:	83 ec 08             	sub    esp,0x8
100013b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013b8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013be:	50                   	push   eax
100013bf:	e8 fc ff ff ff       	call   100013c0 <createUser(char const*)+0x201>	100013c0: R_386_PC32	strcat
100013c4:	83 c4 10             	add    esp,0x10
100013c7:	83 ec 08             	sub    esp,0x8
100013ca:	68 d4 a5 00 10       	push   0x1000a5d4	100013cb: R_386_32	.text
100013cf:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013d5:	50                   	push   eax
100013d6:	e8 fc ff ff ff       	call   100013d7 <createUser(char const*)+0x218>	100013d7: R_386_PC32	strcat
100013db:	83 c4 10             	add    esp,0x10
100013de:	83 ec 08             	sub    esp,0x8
100013e1:	68 c0 01 00 00       	push   0x1c0
100013e6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013ec:	50                   	push   eax
100013ed:	e8 fc ff ff ff       	call   100013ee <createUser(char const*)+0x22f>	100013ee: R_386_PC32	mkdir(char const*, int)
100013f2:	83 c4 10             	add    esp,0x10
100013f5:	83 ec 08             	sub    esp,0x8
100013f8:	68 96 a5 00 10       	push   0x1000a596	100013f9: R_386_32	.text
100013fd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001403:	50                   	push   eax
10001404:	e8 fc ff ff ff       	call   10001405 <createUser(char const*)+0x246>	10001405: R_386_PC32	strcpy
10001409:	83 c4 10             	add    esp,0x10
1000140c:	83 ec 08             	sub    esp,0x8
1000140f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001412:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001418:	50                   	push   eax
10001419:	e8 fc ff ff ff       	call   1000141a <createUser(char const*)+0x25b>	1000141a: R_386_PC32	strcat
1000141e:	83 c4 10             	add    esp,0x10
10001421:	83 ec 08             	sub    esp,0x8
10001424:	68 db a5 00 10       	push   0x1000a5db	10001425: R_386_32	.text
10001429:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000142f:	50                   	push   eax
10001430:	e8 fc ff ff ff       	call   10001431 <createUser(char const*)+0x272>	10001431: R_386_PC32	strcat
10001435:	83 c4 10             	add    esp,0x10
10001438:	83 ec 08             	sub    esp,0x8
1000143b:	68 c0 01 00 00       	push   0x1c0
10001440:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001446:	50                   	push   eax
10001447:	e8 fc ff ff ff       	call   10001448 <createUser(char const*)+0x289>	10001448: R_386_PC32	mkdir(char const*, int)
1000144c:	83 c4 10             	add    esp,0x10
1000144f:	83 ec 08             	sub    esp,0x8
10001452:	68 e3 a5 00 10       	push   0x1000a5e3	10001453: R_386_32	.text
10001457:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000145d:	50                   	push   eax
1000145e:	e8 fc ff ff ff       	call   1000145f <createUser(char const*)+0x2a0>	1000145f: R_386_PC32	strcpy
10001463:	83 c4 10             	add    esp,0x10
10001466:	83 ec 08             	sub    esp,0x8
10001469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000146c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001472:	50                   	push   eax
10001473:	e8 fc ff ff ff       	call   10001474 <createUser(char const*)+0x2b5>	10001474: R_386_PC32	strcat
10001478:	83 c4 10             	add    esp,0x10
1000147b:	83 ec 08             	sub    esp,0x8
1000147e:	68 c0 01 00 00       	push   0x1c0
10001483:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001489:	50                   	push   eax
1000148a:	e8 fc ff ff ff       	call   1000148b <createUser(char const*)+0x2cc>	1000148b: R_386_PC32	mkdir(char const*, int)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	83 ec 08             	sub    esp,0x8
10001495:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000149b:	50                   	push   eax
1000149c:	68 fc a5 00 10       	push   0x1000a5fc	1000149d: R_386_32	.text
100014a1:	e8 fc ff ff ff       	call   100014a2 <createUser(char const*)+0x2e3>	100014a2: R_386_PC32	copytree(char*, char*)
100014a6:	83 c4 10             	add    esp,0x10
100014a9:	90                   	nop
100014aa:	c9                   	leave  
100014ab:	c3                   	ret    

100014ac <drawBootScreen()>:
100014ac:	55                   	push   ebp
100014ad:	89 e5                	mov    ebp,esp
100014af:	83 ec 18             	sub    esp,0x18
100014b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100014b3: R_386_32	term
100014b7:	83 ec 08             	sub    esp,0x8
100014ba:	6a 0b                	push   0xb
100014bc:	50                   	push   eax
100014bd:	e8 fc ff ff ff       	call   100014be <drawBootScreen()+0x12>	100014be: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
100014c2:	83 c4 10             	add    esp,0x10
100014c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100014c6: R_386_32	term
100014ca:	83 ec 08             	sub    esp,0x8
100014cd:	6a 00                	push   0x0
100014cf:	50                   	push   eax
100014d0:	e8 fc ff ff ff       	call   100014d1 <drawBootScreen()+0x25>	100014d1: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
100014d5:	83 c4 10             	add    esp,0x10
100014d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100014d9: R_386_32	term
100014dd:	83 ec 0c             	sub    esp,0xc
100014e0:	50                   	push   eax
100014e1:	e8 fc ff ff ff       	call   100014e2 <drawBootScreen()+0x36>	100014e2: R_386_PC32	VgaText::clearScreen()
100014e6:	83 c4 10             	add    esp,0x10
100014e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ea: R_386_32	term
100014ee:	83 ec 08             	sub    esp,0x8
100014f1:	68 1b a6 00 10       	push   0x1000a61b	100014f2: R_386_32	.text
100014f6:	50                   	push   eax
100014f7:	e8 fc ff ff ff       	call   100014f8 <drawBootScreen()+0x4c>	100014f8: R_386_PC32	VgaText::setTitle(char*)
100014fc:	83 c4 10             	add    esp,0x10
100014ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10001500: R_386_32	term
10001504:	83 ec 08             	sub    esp,0x8
10001507:	6a 00                	push   0x0
10001509:	50                   	push   eax
1000150a:	e8 fc ff ff ff       	call   1000150b <drawBootScreen()+0x5f>	1000150b: R_386_PC32	VgaText::setTitleColour(VgaColour)
1000150f:	83 c4 10             	add    esp,0x10
10001512:	a1 00 00 00 00       	mov    eax,ds:0x0	10001513: R_386_32	term
10001517:	83 ec 08             	sub    esp,0x8
1000151a:	6a 00                	push   0x0
1000151c:	50                   	push   eax
1000151d:	e8 fc ff ff ff       	call   1000151e <drawBootScreen()+0x72>	1000151e: R_386_PC32	VgaText::setTitleTextColour(VgaColour)
10001522:	83 c4 10             	add    esp,0x10
10001525:	a1 00 00 00 00       	mov    eax,ds:0x0	10001526: R_386_32	term
1000152a:	83 ec 04             	sub    esp,0x4
1000152d:	6a 00                	push   0x0
1000152f:	6a 00                	push   0x0
10001531:	50                   	push   eax
10001532:	e8 fc ff ff ff       	call   10001533 <drawBootScreen()+0x87>	10001533: R_386_PC32	VgaText::setCursor(int, int)
10001537:	83 c4 10             	add    esp,0x10
1000153a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001541:	83 7d f4 4f          	cmp    DWORD PTR [ebp-0xc],0x4f
10001545:	7f 19                	jg     10001560 <drawBootScreen()+0xb4>
10001547:	a1 00 00 00 00       	mov    eax,ds:0x0	10001548: R_386_32	term
1000154c:	6a 00                	push   0x0
1000154e:	6a 00                	push   0x0
10001550:	6a 20                	push   0x20
10001552:	50                   	push   eax
10001553:	e8 fc ff ff ff       	call   10001554 <drawBootScreen()+0xa8>	10001554: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001558:	83 c4 10             	add    esp,0x10
1000155b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000155e:	eb e1                	jmp    10001541 <drawBootScreen()+0x95>
10001560:	a0 00 00 00 00       	mov    al,ds:0x0	10001561: R_386_32	showSidebar
10001565:	84 c0                	test   al,al
10001567:	0f 84 91 00 00 00    	je     100015fe <drawBootScreen()+0x152>
1000156d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10001574:	83 7d f0 18          	cmp    DWORD PTR [ebp-0x10],0x18
10001578:	7f 41                	jg     100015bb <drawBootScreen()+0x10f>
1000157a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000157b: R_386_32	term
1000157f:	83 ec 04             	sub    esp,0x4
10001582:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001585:	6a 00                	push   0x0
10001587:	50                   	push   eax
10001588:	e8 fc ff ff ff       	call   10001589 <drawBootScreen()+0xdd>	10001589: R_386_PC32	VgaText::setCursor(int, int)
1000158d:	83 c4 10             	add    esp,0x10
10001590:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001597:	83 7d ec 0f          	cmp    DWORD PTR [ebp-0x14],0xf
1000159b:	7f 19                	jg     100015b6 <drawBootScreen()+0x10a>
1000159d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000159e: R_386_32	term
100015a2:	6a 00                	push   0x0
100015a4:	6a 00                	push   0x0
100015a6:	6a 20                	push   0x20
100015a8:	50                   	push   eax
100015a9:	e8 fc ff ff ff       	call   100015aa <drawBootScreen()+0xfe>	100015aa: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100015ae:	83 c4 10             	add    esp,0x10
100015b1:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100015b4:	eb e1                	jmp    10001597 <drawBootScreen()+0xeb>
100015b6:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100015b9:	eb b9                	jmp    10001574 <drawBootScreen()+0xc8>
100015bb:	a1 00 00 00 00       	mov    eax,ds:0x0	100015bc: R_386_32	term
100015c0:	83 ec 04             	sub    esp,0x4
100015c3:	6a 01                	push   0x1
100015c5:	6a 01                	push   0x1
100015c7:	50                   	push   eax
100015c8:	e8 fc ff ff ff       	call   100015c9 <drawBootScreen()+0x11d>	100015c9: R_386_PC32	VgaText::setCursor(int, int)
100015cd:	83 c4 10             	add    esp,0x10
100015d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100015d1: R_386_32	term
100015d5:	6a 00                	push   0x0
100015d7:	6a 0f                	push   0xf
100015d9:	68 1c a6 00 10       	push   0x1000a61c	100015da: R_386_32	.text
100015de:	50                   	push   eax
100015df:	e8 fc ff ff ff       	call   100015e0 <drawBootScreen()+0x134>	100015e0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015e4:	83 c4 10             	add    esp,0x10
100015e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100015e8: R_386_32	term
100015ec:	6a 00                	push   0x0
100015ee:	6a 0e                	push   0xe
100015f0:	68 9f a6 00 10       	push   0x1000a69f	100015f1: R_386_32	.text
100015f5:	50                   	push   eax
100015f6:	e8 fc ff ff ff       	call   100015f7 <drawBootScreen()+0x14b>	100015f7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015fb:	83 c4 10             	add    esp,0x10
100015fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100015ff: R_386_32	term
10001603:	83 ec 08             	sub    esp,0x8
10001606:	6a 0f                	push   0xf
10001608:	50                   	push   eax
10001609:	e8 fc ff ff ff       	call   1000160a <drawBootScreen()+0x15e>	1000160a: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
1000160e:	83 c4 10             	add    esp,0x10
10001611:	a1 00 00 00 00       	mov    eax,ds:0x0	10001612: R_386_32	term
10001616:	83 ec 08             	sub    esp,0x8
10001619:	6a 00                	push   0x0
1000161b:	50                   	push   eax
1000161c:	e8 fc ff ff ff       	call   1000161d <drawBootScreen()+0x171>	1000161d: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
10001621:	83 c4 10             	add    esp,0x10
10001624:	90                   	nop
10001625:	c9                   	leave  
10001626:	c3                   	ret    

10001627 <drawBasicWindowX(int, int, int, int, char const*, bool)>:
10001627:	55                   	push   ebp
10001628:	89 e5                	mov    ebp,esp
1000162a:	53                   	push   ebx
1000162b:	83 ec 34             	sub    esp,0x34
1000162e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001631:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
10001634:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10001637:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000163e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001641:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
10001644:	7d 6c                	jge    100016b2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x8b>
10001646:	a1 00 00 00 00       	mov    eax,ds:0x0	10001647: R_386_32	term
1000164b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000164e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001651:	01 ca                	add    edx,ecx
10001653:	83 ec 04             	sub    esp,0x4
10001656:	52                   	push   edx
10001657:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000165a:	50                   	push   eax
1000165b:	e8 fc ff ff ff       	call   1000165c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x35>	1000165c: R_386_PC32	VgaText::setCursor(int, int)
10001660:	83 c4 10             	add    esp,0x10
10001663:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000166a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000166d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001670:	7d 3b                	jge    100016ad <drawBasicWindowX(int, int, int, int, char const*, bool)+0x86>
10001672:	a1 00 00 00 00       	mov    eax,ds:0x0	10001673: R_386_32	term
10001677:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000167b:	74 07                	je     10001684 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x5d>
1000167d:	b9 07 00 00 00       	mov    ecx,0x7
10001682:	eb 05                	jmp    10001689 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x62>
10001684:	b9 0f 00 00 00       	mov    ecx,0xf
10001689:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000168d:	74 07                	je     10001696 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x6f>
1000168f:	ba 07 00 00 00       	mov    edx,0x7
10001694:	eb 05                	jmp    1000169b <drawBasicWindowX(int, int, int, int, char const*, bool)+0x74>
10001696:	ba 0f 00 00 00       	mov    edx,0xf
1000169b:	51                   	push   ecx
1000169c:	52                   	push   edx
1000169d:	6a 20                	push   0x20
1000169f:	50                   	push   eax
100016a0:	e8 fc ff ff ff       	call   100016a1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x7a>	100016a1: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016a5:	83 c4 10             	add    esp,0x10
100016a8:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100016ab:	eb bd                	jmp    1000166a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x43>
100016ad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100016b0:	eb 8c                	jmp    1000163e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17>
100016b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100016b3: R_386_32	term
100016b7:	83 ec 04             	sub    esp,0x4
100016ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100016bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016c0:	50                   	push   eax
100016c1:	e8 fc ff ff ff       	call   100016c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x9b>	100016c2: R_386_PC32	VgaText::setCursor(int, int)
100016c6:	83 c4 10             	add    esp,0x10
100016c9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100016d0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100016d3:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100016d6:	7d 19                	jge    100016f1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xca>
100016d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100016d9: R_386_32	term
100016dd:	6a 01                	push   0x1
100016df:	6a 01                	push   0x1
100016e1:	6a 20                	push   0x20
100016e3:	50                   	push   eax
100016e4:	e8 fc ff ff ff       	call   100016e5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xbe>	100016e5: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016e9:	83 c4 10             	add    esp,0x10
100016ec:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100016ef:	eb df                	jmp    100016d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xa9>
100016f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100016f2: R_386_32	term
100016f6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100016f9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100016fc:	01 d1                	add    ecx,edx
100016fe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001701:	42                   	inc    edx
10001702:	83 ec 04             	sub    esp,0x4
10001705:	51                   	push   ecx
10001706:	52                   	push   edx
10001707:	50                   	push   eax
10001708:	e8 fc ff ff ff       	call   10001709 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe2>	10001709: R_386_PC32	VgaText::setCursor(int, int)
1000170d:	83 c4 10             	add    esp,0x10
10001710:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10001717:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000171a:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
1000171d:	7d 19                	jge    10001738 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x111>
1000171f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001720: R_386_32	term
10001724:	6a 03                	push   0x3
10001726:	6a 03                	push   0x3
10001728:	6a 20                	push   0x20
1000172a:	50                   	push   eax
1000172b:	e8 fc ff ff ff       	call   1000172c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x105>	1000172c: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001730:	83 c4 10             	add    esp,0x10
10001733:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10001736:	eb df                	jmp    10001717 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xf0>
10001738:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000173b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000173e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001741:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001744:	01 d0                	add    eax,edx
10001746:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001749:	0f 8d 89 00 00 00    	jge    100017d8 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b1>
1000174f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001750: R_386_32	term
10001754:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001757:	8d 4a 01             	lea    ecx,[edx+0x1]
1000175a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
1000175d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001760:	01 da                	add    edx,ebx
10001762:	83 ec 04             	sub    esp,0x4
10001765:	51                   	push   ecx
10001766:	52                   	push   edx
10001767:	50                   	push   eax
10001768:	e8 fc ff ff ff       	call   10001769 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x142>	10001769: R_386_PC32	VgaText::setCursor(int, int)
1000176d:	83 c4 10             	add    esp,0x10
10001770:	a1 00 00 00 00       	mov    eax,ds:0x0	10001771: R_386_32	term
10001775:	6a 03                	push   0x3
10001777:	6a 03                	push   0x3
10001779:	6a 20                	push   0x20
1000177b:	50                   	push   eax
1000177c:	e8 fc ff ff ff       	call   1000177d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x156>	1000177d: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001781:	83 c4 10             	add    esp,0x10
10001784:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001787:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000178a:	01 d0                	add    eax,edx
1000178c:	48                   	dec    eax
1000178d:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001790:	74 3e                	je     100017d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a9>
10001792:	a1 00 00 00 00       	mov    eax,ds:0x0	10001793: R_386_32	term
10001797:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000179a:	42                   	inc    edx
1000179b:	83 ec 04             	sub    esp,0x4
1000179e:	52                   	push   edx
1000179f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100017a2:	50                   	push   eax
100017a3:	e8 fc ff ff ff       	call   100017a4 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17d>	100017a4: R_386_PC32	VgaText::setCursor(int, int)
100017a8:	83 c4 10             	add    esp,0x10
100017ab:	a1 00 00 00 00       	mov    eax,ds:0x0	100017ac: R_386_32	term
100017b0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100017b4:	74 07                	je     100017bd <drawBasicWindowX(int, int, int, int, char const*, bool)+0x196>
100017b6:	ba 07 00 00 00       	mov    edx,0x7
100017bb:	eb 05                	jmp    100017c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x19b>
100017bd:	ba 0f 00 00 00       	mov    edx,0xf
100017c2:	52                   	push   edx
100017c3:	6a 00                	push   0x0
100017c5:	6a dd                	push   0xffffffdd
100017c7:	50                   	push   eax
100017c8:	e8 fc ff ff ff       	call   100017c9 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a2>	100017c9: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100017cd:	83 c4 10             	add    esp,0x10
100017d0:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100017d3:	e9 66 ff ff ff       	jmp    1000173e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x117>
100017d8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100017db:	83 ec 0c             	sub    esp,0xc
100017de:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100017e1:	e8 fc ff ff ff       	call   100017e2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1bb>	100017e2: R_386_PC32	strlen
100017e6:	83 c4 10             	add    esp,0x10
100017e9:	29 c3                	sub    ebx,eax
100017eb:	89 d8                	mov    eax,ebx
100017ed:	d1 e8                	shr    eax,1
100017ef:	48                   	dec    eax
100017f0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100017f3:	a1 00 00 00 00       	mov    eax,ds:0x0	100017f4: R_386_32	term
100017f8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100017fb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100017fe:	01 ca                	add    edx,ecx
10001800:	83 ec 04             	sub    esp,0x4
10001803:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001806:	52                   	push   edx
10001807:	50                   	push   eax
10001808:	e8 fc ff ff ff       	call   10001809 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1e2>	10001809: R_386_PC32	VgaText::setCursor(int, int)
1000180d:	83 c4 10             	add    esp,0x10
10001810:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10001817:	83 ec 0c             	sub    esp,0xc
1000181a:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000181d:	e8 fc ff ff ff       	call   1000181e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f7>	1000181e: R_386_PC32	strlen
10001822:	83 c4 10             	add    esp,0x10
10001825:	89 c2                	mov    edx,eax
10001827:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000182a:	39 c2                	cmp    edx,eax
1000182c:	76 25                	jbe    10001853 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x22c>
1000182e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000182f: R_386_32	term
10001833:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001836:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001839:	01 ca                	add    edx,ecx
1000183b:	8a 12                	mov    dl,BYTE PTR [edx]
1000183d:	0f be d2             	movsx  edx,dl
10001840:	6a 01                	push   0x1
10001842:	6a 0f                	push   0xf
10001844:	52                   	push   edx
10001845:	50                   	push   eax
10001846:	e8 fc ff ff ff       	call   10001847 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x220>	10001847: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000184b:	83 c4 10             	add    esp,0x10
1000184e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10001851:	eb c4                	jmp    10001817 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f0>
10001853:	90                   	nop
10001854:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001857:	c9                   	leave  
10001858:	c3                   	ret    

10001859 <drawBasicWindow(int, int, int, int, char const*)>:
10001859:	55                   	push   ebp
1000185a:	89 e5                	mov    ebp,esp
1000185c:	83 ec 08             	sub    esp,0x8
1000185f:	83 ec 08             	sub    esp,0x8
10001862:	6a 00                	push   0x0
10001864:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001867:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000186a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000186d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001870:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001873:	e8 fc ff ff ff       	call   10001874 <drawBasicWindow(int, int, int, int, char const*)+0x1b>	10001874: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10001878:	83 c4 20             	add    esp,0x20
1000187b:	90                   	nop
1000187c:	c9                   	leave  
1000187d:	c3                   	ret    

1000187e <bootInstallKeybrd(KeyboardToken, bool*)>:
1000187e:	55                   	push   ebp
1000187f:	89 e5                	mov    ebp,esp
10001881:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001884:	05 04 01 00 00       	add    eax,0x104
10001889:	8a 00                	mov    al,BYTE PTR [eax]
1000188b:	84 c0                	test   al,al
1000188d:	74 15                	je     100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
1000188f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001892:	66 83 f8 09          	cmp    ax,0x9
10001896:	75 0c                	jne    100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
10001898:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	1000189a: R_386_32	installKey
1000189f:	e9 94 00 00 00       	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018a4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
100018a7:	84 c0                	test   al,al
100018a9:	0f 85 88 00 00 00    	jne    10001937 <bootInstallKeybrd(KeyboardToken, bool*)+0xb9>
100018af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b2:	66 3d 0a 02          	cmp    ax,0x20a
100018b6:	75 09                	jne    100018c1 <bootInstallKeybrd(KeyboardToken, bool*)+0x43>
100018b8:	c6 05 00 00 00 00 1b 	mov    BYTE PTR ds:0x0,0x1b	100018ba: R_386_32	installKey
100018bf:	eb 77                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018c4:	66 3d 0d 02          	cmp    ax,0x20d
100018c8:	75 09                	jne    100018d3 <bootInstallKeybrd(KeyboardToken, bool*)+0x55>
100018ca:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	100018cc: R_386_32	installKey
100018d1:	eb 65                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018d6:	66 3d 0e 02          	cmp    ax,0x20e
100018da:	75 09                	jne    100018e5 <bootInstallKeybrd(KeyboardToken, bool*)+0x67>
100018dc:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	100018de: R_386_32	installKey
100018e3:	eb 53                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018e8:	66 3d 0b 02          	cmp    ax,0x20b
100018ec:	75 09                	jne    100018f7 <bootInstallKeybrd(KeyboardToken, bool*)+0x79>
100018ee:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100018f0: R_386_32	installKey
100018f5:	eb 41                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018fa:	66 3d 0c 02          	cmp    ax,0x20c
100018fe:	75 09                	jne    10001909 <bootInstallKeybrd(KeyboardToken, bool*)+0x8b>
10001900:	c6 05 00 00 00 00 02 	mov    BYTE PTR ds:0x0,0x2	10001902: R_386_32	installKey
10001907:	eb 2f                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000190c:	66 3d 05 02          	cmp    ax,0x205
10001910:	75 09                	jne    1000191b <bootInstallKeybrd(KeyboardToken, bool*)+0x9d>
10001912:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	10001914: R_386_32	installKey
10001919:	eb 1d                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000191b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000191e:	66 3d 05 02          	cmp    ax,0x205
10001922:	75 09                	jne    1000192d <bootInstallKeybrd(KeyboardToken, bool*)+0xaf>
10001924:	c6 05 00 00 00 00 7e 	mov    BYTE PTR ds:0x0,0x7e	10001926: R_386_32	installKey
1000192b:	eb 0b                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000192d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001930:	a2 00 00 00 00       	mov    ds:0x0,al	10001931: R_386_32	installKey
10001935:	eb 01                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001937:	90                   	nop
10001938:	5d                   	pop    ebp
10001939:	c3                   	ret    

1000193a <bootInstallTasks(int)>:
1000193a:	55                   	push   ebp
1000193b:	89 e5                	mov    ebp,esp
1000193d:	83 ec 08             	sub    esp,0x8
10001940:	a1 00 00 00 00       	mov    eax,ds:0x0	10001941: R_386_32	term
10001945:	83 ec 04             	sub    esp,0x4
10001948:	6a 08                	push   0x8
1000194a:	6a 18                	push   0x18
1000194c:	50                   	push   eax
1000194d:	e8 fc ff ff ff       	call   1000194e <bootInstallTasks(int)+0x14>	1000194e: R_386_PC32	VgaText::setCursor(int, int)
10001952:	83 c4 10             	add    esp,0x10
10001955:	a1 00 00 00 00       	mov    eax,ds:0x0	10001956: R_386_32	term
1000195a:	83 ec 08             	sub    esp,0x8
1000195d:	68 c0 a6 00 10       	push   0x1000a6c0	1000195e: R_386_32	.text
10001962:	50                   	push   eax
10001963:	e8 fc ff ff ff       	call   10001964 <bootInstallTasks(int)+0x2a>	10001964: R_386_PC32	VgaText::puts(char const*)
10001968:	83 c4 10             	add    esp,0x10
1000196b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000196c: R_386_32	term
10001970:	83 ec 04             	sub    esp,0x4
10001973:	6a 0a                	push   0xa
10001975:	6a 1a                	push   0x1a
10001977:	50                   	push   eax
10001978:	e8 fc ff ff ff       	call   10001979 <bootInstallTasks(int)+0x3f>	10001979: R_386_PC32	VgaText::setCursor(int, int)
1000197d:	83 c4 10             	add    esp,0x10
10001980:	a1 00 00 00 00       	mov    eax,ds:0x0	10001981: R_386_32	term
10001985:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001989:	75 07                	jne    10001992 <bootInstallTasks(int)+0x58>
1000198b:	ba e8 a6 00 10       	mov    edx,0x1000a6e8	1000198c: R_386_32	.text
10001990:	eb 05                	jmp    10001997 <bootInstallTasks(int)+0x5d>
10001992:	ba eb a6 00 10       	mov    edx,0x1000a6eb	10001993: R_386_32	.text
10001997:	83 ec 08             	sub    esp,0x8
1000199a:	52                   	push   edx
1000199b:	50                   	push   eax
1000199c:	e8 fc ff ff ff       	call   1000199d <bootInstallTasks(int)+0x63>	1000199d: R_386_PC32	VgaText::puts(char const*)
100019a1:	83 c4 10             	add    esp,0x10
100019a4:	a1 00 00 00 00       	mov    eax,ds:0x0	100019a5: R_386_32	term
100019a9:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
100019ad:	78 07                	js     100019b6 <bootInstallTasks(int)+0x7c>
100019af:	ba 00 00 00 00       	mov    edx,0x0
100019b4:	eb 05                	jmp    100019bb <bootInstallTasks(int)+0x81>
100019b6:	ba 07 00 00 00       	mov    edx,0x7
100019bb:	6a 0f                	push   0xf
100019bd:	52                   	push   edx
100019be:	68 ee a6 00 10       	push   0x1000a6ee	100019bf: R_386_32	.text
100019c3:	50                   	push   eax
100019c4:	e8 fc ff ff ff       	call   100019c5 <bootInstallTasks(int)+0x8b>	100019c5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100019c9:	83 c4 10             	add    esp,0x10
100019cc:	a1 00 00 00 00       	mov    eax,ds:0x0	100019cd: R_386_32	term
100019d1:	83 ec 04             	sub    esp,0x4
100019d4:	6a 0b                	push   0xb
100019d6:	6a 1a                	push   0x1a
100019d8:	50                   	push   eax
100019d9:	e8 fc ff ff ff       	call   100019da <bootInstallTasks(int)+0xa0>	100019da: R_386_PC32	VgaText::setCursor(int, int)
100019de:	83 c4 10             	add    esp,0x10
100019e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100019e2: R_386_32	term
100019e6:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
100019ea:	75 07                	jne    100019f3 <bootInstallTasks(int)+0xb9>
100019ec:	ba e8 a6 00 10       	mov    edx,0x1000a6e8	100019ed: R_386_32	.text
100019f1:	eb 05                	jmp    100019f8 <bootInstallTasks(int)+0xbe>
100019f3:	ba eb a6 00 10       	mov    edx,0x1000a6eb	100019f4: R_386_32	.text
100019f8:	83 ec 08             	sub    esp,0x8
100019fb:	52                   	push   edx
100019fc:	50                   	push   eax
100019fd:	e8 fc ff ff ff       	call   100019fe <bootInstallTasks(int)+0xc4>	100019fe: R_386_PC32	VgaText::puts(char const*)
10001a02:	83 c4 10             	add    esp,0x10
10001a05:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a06: R_386_32	term
10001a0a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001a0e:	7e 07                	jle    10001a17 <bootInstallTasks(int)+0xdd>
10001a10:	ba 00 00 00 00       	mov    edx,0x0
10001a15:	eb 05                	jmp    10001a1c <bootInstallTasks(int)+0xe2>
10001a17:	ba 07 00 00 00       	mov    edx,0x7
10001a1c:	6a 0f                	push   0xf
10001a1e:	52                   	push   edx
10001a1f:	68 06 a7 00 10       	push   0x1000a706	10001a20: R_386_32	.text
10001a24:	50                   	push   eax
10001a25:	e8 fc ff ff ff       	call   10001a26 <bootInstallTasks(int)+0xec>	10001a26: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a2a:	83 c4 10             	add    esp,0x10
10001a2d:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a2e: R_386_32	term
10001a32:	83 ec 04             	sub    esp,0x4
10001a35:	6a 0c                	push   0xc
10001a37:	6a 1a                	push   0x1a
10001a39:	50                   	push   eax
10001a3a:	e8 fc ff ff ff       	call   10001a3b <bootInstallTasks(int)+0x101>	10001a3b: R_386_PC32	VgaText::setCursor(int, int)
10001a3f:	83 c4 10             	add    esp,0x10
10001a42:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a43: R_386_32	term
10001a47:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001a4b:	75 07                	jne    10001a54 <bootInstallTasks(int)+0x11a>
10001a4d:	ba e8 a6 00 10       	mov    edx,0x1000a6e8	10001a4e: R_386_32	.text
10001a52:	eb 05                	jmp    10001a59 <bootInstallTasks(int)+0x11f>
10001a54:	ba eb a6 00 10       	mov    edx,0x1000a6eb	10001a55: R_386_32	.text
10001a59:	83 ec 08             	sub    esp,0x8
10001a5c:	52                   	push   edx
10001a5d:	50                   	push   eax
10001a5e:	e8 fc ff ff ff       	call   10001a5f <bootInstallTasks(int)+0x125>	10001a5f: R_386_PC32	VgaText::puts(char const*)
10001a63:	83 c4 10             	add    esp,0x10
10001a66:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a67: R_386_32	term
10001a6b:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
10001a6f:	7e 07                	jle    10001a78 <bootInstallTasks(int)+0x13e>
10001a71:	ba 00 00 00 00       	mov    edx,0x0
10001a76:	eb 05                	jmp    10001a7d <bootInstallTasks(int)+0x143>
10001a78:	ba 07 00 00 00       	mov    edx,0x7
10001a7d:	6a 0f                	push   0xf
10001a7f:	52                   	push   edx
10001a80:	68 1c a7 00 10       	push   0x1000a71c	10001a81: R_386_32	.text
10001a85:	50                   	push   eax
10001a86:	e8 fc ff ff ff       	call   10001a87 <bootInstallTasks(int)+0x14d>	10001a87: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a8b:	83 c4 10             	add    esp,0x10
10001a8e:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a8f: R_386_32	term
10001a93:	83 ec 04             	sub    esp,0x4
10001a96:	6a 0d                	push   0xd
10001a98:	6a 1a                	push   0x1a
10001a9a:	50                   	push   eax
10001a9b:	e8 fc ff ff ff       	call   10001a9c <bootInstallTasks(int)+0x162>	10001a9c: R_386_PC32	VgaText::setCursor(int, int)
10001aa0:	83 c4 10             	add    esp,0x10
10001aa3:	a1 00 00 00 00       	mov    eax,ds:0x0	10001aa4: R_386_32	term
10001aa8:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001aac:	75 07                	jne    10001ab5 <bootInstallTasks(int)+0x17b>
10001aae:	ba e8 a6 00 10       	mov    edx,0x1000a6e8	10001aaf: R_386_32	.text
10001ab3:	eb 05                	jmp    10001aba <bootInstallTasks(int)+0x180>
10001ab5:	ba eb a6 00 10       	mov    edx,0x1000a6eb	10001ab6: R_386_32	.text
10001aba:	83 ec 08             	sub    esp,0x8
10001abd:	52                   	push   edx
10001abe:	50                   	push   eax
10001abf:	e8 fc ff ff ff       	call   10001ac0 <bootInstallTasks(int)+0x186>	10001ac0: R_386_PC32	VgaText::puts(char const*)
10001ac4:	83 c4 10             	add    esp,0x10
10001ac7:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ac8: R_386_32	term
10001acc:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001ad0:	7e 07                	jle    10001ad9 <bootInstallTasks(int)+0x19f>
10001ad2:	ba 00 00 00 00       	mov    edx,0x0
10001ad7:	eb 05                	jmp    10001ade <bootInstallTasks(int)+0x1a4>
10001ad9:	ba 07 00 00 00       	mov    edx,0x7
10001ade:	6a 0f                	push   0xf
10001ae0:	52                   	push   edx
10001ae1:	68 32 a7 00 10       	push   0x1000a732	10001ae2: R_386_32	.text
10001ae6:	50                   	push   eax
10001ae7:	e8 fc ff ff ff       	call   10001ae8 <bootInstallTasks(int)+0x1ae>	10001ae8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001aec:	83 c4 10             	add    esp,0x10
10001aef:	a1 00 00 00 00       	mov    eax,ds:0x0	10001af0: R_386_32	term
10001af4:	83 ec 04             	sub    esp,0x4
10001af7:	6a 0e                	push   0xe
10001af9:	6a 1a                	push   0x1a
10001afb:	50                   	push   eax
10001afc:	e8 fc ff ff ff       	call   10001afd <bootInstallTasks(int)+0x1c3>	10001afd: R_386_PC32	VgaText::setCursor(int, int)
10001b01:	83 c4 10             	add    esp,0x10
10001b04:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b05: R_386_32	term
10001b09:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b0d:	75 07                	jne    10001b16 <bootInstallTasks(int)+0x1dc>
10001b0f:	ba e8 a6 00 10       	mov    edx,0x1000a6e8	10001b10: R_386_32	.text
10001b14:	eb 05                	jmp    10001b1b <bootInstallTasks(int)+0x1e1>
10001b16:	ba eb a6 00 10       	mov    edx,0x1000a6eb	10001b17: R_386_32	.text
10001b1b:	83 ec 08             	sub    esp,0x8
10001b1e:	52                   	push   edx
10001b1f:	50                   	push   eax
10001b20:	e8 fc ff ff ff       	call   10001b21 <bootInstallTasks(int)+0x1e7>	10001b21: R_386_PC32	VgaText::puts(char const*)
10001b25:	83 c4 10             	add    esp,0x10
10001b28:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b29: R_386_32	term
10001b2d:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001b31:	7e 07                	jle    10001b3a <bootInstallTasks(int)+0x200>
10001b33:	ba 00 00 00 00       	mov    edx,0x0
10001b38:	eb 05                	jmp    10001b3f <bootInstallTasks(int)+0x205>
10001b3a:	ba 07 00 00 00       	mov    edx,0x7
10001b3f:	6a 0f                	push   0xf
10001b41:	52                   	push   edx
10001b42:	68 46 a7 00 10       	push   0x1000a746	10001b43: R_386_32	.text
10001b47:	50                   	push   eax
10001b48:	e8 fc ff ff ff       	call   10001b49 <bootInstallTasks(int)+0x20f>	10001b49: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001b4d:	83 c4 10             	add    esp,0x10
10001b50:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b51: R_386_32	term
10001b55:	83 ec 04             	sub    esp,0x4
10001b58:	6a 0f                	push   0xf
10001b5a:	6a 1a                	push   0x1a
10001b5c:	50                   	push   eax
10001b5d:	e8 fc ff ff ff       	call   10001b5e <bootInstallTasks(int)+0x224>	10001b5e: R_386_PC32	VgaText::setCursor(int, int)
10001b62:	83 c4 10             	add    esp,0x10
10001b65:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b66: R_386_32	term
10001b6a:	83 7d 08 05          	cmp    DWORD PTR [ebp+0x8],0x5
10001b6e:	75 07                	jne    10001b77 <bootInstallTasks(int)+0x23d>
10001b70:	ba e8 a6 00 10       	mov    edx,0x1000a6e8	10001b71: R_386_32	.text
10001b75:	eb 05                	jmp    10001b7c <bootInstallTasks(int)+0x242>
10001b77:	ba eb a6 00 10       	mov    edx,0x1000a6eb	10001b78: R_386_32	.text
10001b7c:	83 ec 08             	sub    esp,0x8
10001b7f:	52                   	push   edx
10001b80:	50                   	push   eax
10001b81:	e8 fc ff ff ff       	call   10001b82 <bootInstallTasks(int)+0x248>	10001b82: R_386_PC32	VgaText::puts(char const*)
10001b86:	83 c4 10             	add    esp,0x10
10001b89:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b8a: R_386_32	term
10001b8e:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b92:	7e 07                	jle    10001b9b <bootInstallTasks(int)+0x261>
10001b94:	ba 00 00 00 00       	mov    edx,0x0
10001b99:	eb 05                	jmp    10001ba0 <bootInstallTasks(int)+0x266>
10001b9b:	ba 07 00 00 00       	mov    edx,0x7
10001ba0:	6a 0f                	push   0xf
10001ba2:	52                   	push   edx
10001ba3:	68 5e a7 00 10       	push   0x1000a75e	10001ba4: R_386_32	.text
10001ba8:	50                   	push   eax
10001ba9:	e8 fc ff ff ff       	call   10001baa <bootInstallTasks(int)+0x270>	10001baa: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001bae:	83 c4 10             	add    esp,0x10
10001bb1:	90                   	nop
10001bb2:	c9                   	leave  
10001bb3:	c3                   	ret    

10001bb4 <ror(unsigned long long, int, int)>:
10001bb4:	55                   	push   ebp
10001bb5:	89 e5                	mov    ebp,esp
10001bb7:	56                   	push   esi
10001bb8:	53                   	push   ebx
10001bb9:	83 ec 20             	sub    esp,0x20
10001bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bbf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001bc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001bc5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001bc8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001bcb:	ba 01 00 00 00       	mov    edx,0x1
10001bd0:	88 c1                	mov    cl,al
10001bd2:	d3 e2                	shl    edx,cl
10001bd4:	89 d0                	mov    eax,edx
10001bd6:	48                   	dec    eax
10001bd7:	99                   	cdq    
10001bd8:	89 c1                	mov    ecx,eax
10001bda:	23 4d e0             	and    ecx,DWORD PTR [ebp-0x20]
10001bdd:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001be0:	89 d0                	mov    eax,edx
10001be2:	23 45 e4             	and    eax,DWORD PTR [ebp-0x1c]
10001be5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001be8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10001beb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001bee:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001bf1:	0f ad d0             	shrd   eax,edx,cl
10001bf4:	d3 ea                	shr    edx,cl
10001bf6:	f6 c1 20             	test   cl,0x20
10001bf9:	74 04                	je     10001bff <ror(unsigned long long, int, int)+0x4b>
10001bfb:	89 d0                	mov    eax,edx
10001bfd:	31 d2                	xor    edx,edx
10001bff:	89 c3                	mov    ebx,eax
10001c01:	89 d6                	mov    esi,edx
10001c03:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c06:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
10001c09:	89 c1                	mov    ecx,eax
10001c0b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c0e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c11:	0f a5 c2             	shld   edx,eax,cl
10001c14:	d3 e0                	shl    eax,cl
10001c16:	f6 c1 20             	test   cl,0x20
10001c19:	74 04                	je     10001c1f <ror(unsigned long long, int, int)+0x6b>
10001c1b:	89 c2                	mov    edx,eax
10001c1d:	31 c0                	xor    eax,eax
10001c1f:	89 d1                	mov    ecx,edx
10001c21:	89 c2                	mov    edx,eax
10001c23:	89 d8                	mov    eax,ebx
10001c25:	09 d0                	or     eax,edx
10001c27:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001c2a:	89 f0                	mov    eax,esi
10001c2c:	09 c8                	or     eax,ecx
10001c2e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001c31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001c34:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001c37:	83 c4 20             	add    esp,0x20
10001c3a:	5b                   	pop    ebx
10001c3b:	5e                   	pop    esi
10001c3c:	5d                   	pop    ebp
10001c3d:	c3                   	ret    

10001c3e <swapBits(unsigned long long, unsigned long long, unsigned long long)>:
10001c3e:	55                   	push   ebp
10001c3f:	89 e5                	mov    ebp,esp
10001c41:	56                   	push   esi
10001c42:	53                   	push   ebx
10001c43:	83 ec 40             	sub    esp,0x40
10001c46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c49:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001c4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001c4f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001c52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001c55:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001c58:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c5b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001c5e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001c61:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001c64:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001c67:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001c6a:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001c6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c70:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c73:	0f ad d0             	shrd   eax,edx,cl
10001c76:	d3 ea                	shr    edx,cl
10001c78:	f6 c1 20             	test   cl,0x20
10001c7b:	74 04                	je     10001c81 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x43>
10001c7d:	89 d0                	mov    eax,edx
10001c7f:	31 d2                	xor    edx,edx
10001c81:	89 c3                	mov    ebx,eax
10001c83:	89 d6                	mov    esi,edx
10001c85:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001c88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c8b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c8e:	0f ad d0             	shrd   eax,edx,cl
10001c91:	d3 ea                	shr    edx,cl
10001c93:	f6 c1 20             	test   cl,0x20
10001c96:	74 04                	je     10001c9c <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x5e>
10001c98:	89 d0                	mov    eax,edx
10001c9a:	31 d2                	xor    edx,edx
10001c9c:	89 d1                	mov    ecx,edx
10001c9e:	89 c2                	mov    edx,eax
10001ca0:	89 d8                	mov    eax,ebx
10001ca2:	31 d0                	xor    eax,edx
10001ca4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001ca7:	89 f0                	mov    eax,esi
10001ca9:	31 c8                	xor    eax,ecx
10001cab:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001cae:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001cb1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001cb4:	89 c6                	mov    esi,eax
10001cb6:	83 e6 01             	and    esi,0x1
10001cb9:	89 75 c8             	mov    DWORD PTR [ebp-0x38],esi
10001cbc:	89 d0                	mov    eax,edx
10001cbe:	83 e0 00             	and    eax,0x0
10001cc1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001cc4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001cc7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10001cca:	89 c3                	mov    ebx,eax
10001ccc:	80 f7 00             	xor    bh,0x0
10001ccf:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
10001cd2:	89 d0                	mov    eax,edx
10001cd4:	80 f4 00             	xor    ah,0x0
10001cd7:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001cda:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10001cdd:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10001ce0:	89 c8                	mov    eax,ecx
10001ce2:	09 d0                	or     eax,edx
10001ce4:	85 c0                	test   eax,eax
10001ce6:	74 62                	je     10001d4a <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x10c>
10001ce8:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001ceb:	b8 01 00 00 00       	mov    eax,0x1
10001cf0:	ba 00 00 00 00       	mov    edx,0x0
10001cf5:	0f a5 c2             	shld   edx,eax,cl
10001cf8:	d3 e0                	shl    eax,cl
10001cfa:	f6 c1 20             	test   cl,0x20
10001cfd:	74 04                	je     10001d03 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xc5>
10001cff:	89 c2                	mov    edx,eax
10001d01:	31 c0                	xor    eax,eax
10001d03:	89 c3                	mov    ebx,eax
10001d05:	89 d6                	mov    esi,edx
10001d07:	89 d8                	mov    eax,ebx
10001d09:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001d0c:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10001d0f:	89 f0                	mov    eax,esi
10001d11:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001d14:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001d17:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001d1a:	b8 01 00 00 00       	mov    eax,0x1
10001d1f:	ba 00 00 00 00       	mov    edx,0x0
10001d24:	0f a5 c2             	shld   edx,eax,cl
10001d27:	d3 e0                	shl    eax,cl
10001d29:	f6 c1 20             	test   cl,0x20
10001d2c:	74 04                	je     10001d32 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xf4>
10001d2e:	89 c2                	mov    edx,eax
10001d30:	31 c0                	xor    eax,eax
10001d32:	89 c1                	mov    ecx,eax
10001d34:	89 d3                	mov    ebx,edx
10001d36:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001d39:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10001d3c:	89 c6                	mov    esi,eax
10001d3e:	31 ce                	xor    esi,ecx
10001d40:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10001d43:	31 d3                	xor    ebx,edx
10001d45:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10001d48:	eb 0c                	jmp    10001d56 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x118>
10001d4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001d4d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001d50:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001d53:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10001d56:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001d59:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001d5c:	83 c4 40             	add    esp,0x40
10001d5f:	5b                   	pop    ebx
10001d60:	5e                   	pop    esi
10001d61:	5d                   	pop    ebp
10001d62:	c3                   	ret    

10001d63 <getChecksum(unsigned int)>:
10001d63:	55                   	push   ebp
10001d64:	89 e5                	mov    ebp,esp
10001d66:	56                   	push   esi
10001d67:	53                   	push   ebx
10001d68:	83 ec 20             	sub    esp,0x20
10001d6b:	66 c7 45 f6 49 4e    	mov    WORD PTR [ebp-0xa],0x4e49
10001d71:	66 c7 45 f4 79 6e    	mov    WORD PTR [ebp-0xc],0x6e79
10001d77:	66 c7 45 f2 67 61    	mov    WORD PTR [ebp-0xe],0x6167
10001d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d80:	c1 e8 10             	shr    eax,0x10
10001d83:	89 c1                	mov    ecx,eax
10001d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d88:	89 c2                	mov    edx,eax
10001d8a:	89 d0                	mov    eax,edx
10001d8c:	c1 e0 06             	shl    eax,0x6
10001d8f:	29 d0                	sub    eax,edx
10001d91:	c1 e0 04             	shl    eax,0x4
10001d94:	01 d0                	add    eax,edx
10001d96:	31 c8                	xor    eax,ecx
10001d98:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
10001d9c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001da0:	0f 84 b1 00 00 00    	je     10001e57 <getChecksum(unsigned int)+0xf4>
10001da6:	b8 f4 02 00 00       	mov    eax,0x2f4
10001dab:	ba 00 00 00 00       	mov    edx,0x0
10001db0:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001db3:	89 c3                	mov    ebx,eax
10001db5:	be 00 00 00 00       	mov    esi,0x0
10001dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dbd:	ba 00 00 00 00       	mov    edx,0x0
10001dc2:	6a 1d                	push   0x1d
10001dc4:	6a 05                	push   0x5
10001dc6:	52                   	push   edx
10001dc7:	50                   	push   eax
10001dc8:	e8 fc ff ff ff       	call   10001dc9 <getChecksum(unsigned int)+0x66>	10001dc9: R_386_PC32	ror(unsigned long long, int, int)
10001dcd:	83 c4 10             	add    esp,0x10
10001dd0:	05 52 3f 04 00       	add    eax,0x43f52
10001dd5:	83 d2 00             	adc    edx,0x0
10001dd8:	89 d9                	mov    ecx,ebx
10001dda:	31 c1                	xor    ecx,eax
10001ddc:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
10001ddf:	31 d6                	xor    esi,edx
10001de1:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
10001de4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001de7:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001deb:	66 0f af c2          	imul   ax,dx
10001def:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
10001df3:	b8 ea 00 00 00       	mov    eax,0xea
10001df8:	ba 00 00 00 00       	mov    edx,0x0
10001dfd:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001e00:	89 c3                	mov    ebx,eax
10001e02:	be 00 00 00 00       	mov    esi,0x0
10001e07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e0a:	ba 00 00 00 00       	mov    edx,0x0
10001e0f:	6a 1f                	push   0x1f
10001e11:	6a 03                	push   0x3
10001e13:	52                   	push   edx
10001e14:	50                   	push   eax
10001e15:	e8 fc ff ff ff       	call   10001e16 <getChecksum(unsigned int)+0xb3>	10001e16: R_386_PC32	ror(unsigned long long, int, int)
10001e1a:	83 c4 10             	add    esp,0x10
10001e1d:	05 05 db 09 00       	add    eax,0x9db05
10001e22:	83 d2 00             	adc    edx,0x0
10001e25:	89 d9                	mov    ecx,ebx
10001e27:	31 c1                	xor    ecx,eax
10001e29:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
10001e2c:	31 d6                	xor    esi,edx
10001e2e:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10001e31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001e34:	66 29 45 f4          	sub    WORD PTR [ebp-0xc],ax
10001e38:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e3c:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e3f:	25 d2 04 00 00       	and    eax,0x4d2
10001e44:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e4b:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e4f:	d1 6d 08             	shr    DWORD PTR [ebp+0x8],1
10001e52:	e9 45 ff ff ff       	jmp    10001d9c <getChecksum(unsigned int)+0x39>
10001e57:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e5b:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e5e:	66 33 45 f2          	xor    ax,WORD PTR [ebp-0xe]
10001e62:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001e65:	0f b7 c0             	movzx  eax,ax
10001e68:	25 ff 7f 00 00       	and    eax,0x7fff
10001e6d:	8d 65 f8             	lea    esp,[ebp-0x8]
10001e70:	5b                   	pop    ebx
10001e71:	5e                   	pop    esi
10001e72:	5d                   	pop    ebp
10001e73:	c3                   	ret    

10001e74 <createKey(char*, unsigned int)>:
10001e74:	55                   	push   ebp
10001e75:	89 e5                	mov    ebp,esp
10001e77:	53                   	push   ebx
10001e78:	83 ec 34             	sub    esp,0x34
10001e7b:	68 70 a7 00 10       	push   0x1000a770	10001e7c: R_386_32	.text
10001e80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e83:	e8 fc ff ff ff       	call   10001e84 <createKey(char*, unsigned int)+0x10>	10001e84: R_386_PC32	strcpy
10001e88:	83 c4 08             	add    esp,0x8
10001e8b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10001e8e:	bb 00 00 00 00       	mov    ebx,0x0
10001e93:	89 c8                	mov    eax,ecx
10001e95:	89 da                	mov    edx,ebx
10001e97:	0f a4 c2 0f          	shld   edx,eax,0xf
10001e9b:	c1 e0 0f             	shl    eax,0xf
10001e9e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ea1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ea4:	83 ec 04             	sub    esp,0x4
10001ea7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001eaa:	e8 fc ff ff ff       	call   10001eab <createKey(char*, unsigned int)+0x37>	10001eab: R_386_PC32	getChecksum(unsigned int)
10001eaf:	83 c4 08             	add    esp,0x8
10001eb2:	ba 00 00 00 00       	mov    edx,0x0
10001eb7:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
10001eba:	09 55 f4             	or     DWORD PTR [ebp-0xc],edx
10001ebd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001ec4:	81 7d ec db 24 00 00 	cmp    DWORD PTR [ebp-0x14],0x24db
10001ecb:	7f 7f                	jg     10001f4c <createKey(char*, unsigned int)+0xd8>
10001ecd:	81 75 f0 95 38 e4 b5 	xor    DWORD PTR [ebp-0x10],0xb5e43895
10001ed4:	83 75 f4 37          	xor    DWORD PTR [ebp-0xc],0x37
10001ed8:	6a 00                	push   0x0
10001eda:	6a 08                	push   0x8
10001edc:	6a 00                	push   0x0
10001ede:	6a 03                	push   0x3
10001ee0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ee3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001ee6:	e8 fc ff ff ff       	call   10001ee7 <createKey(char*, unsigned int)+0x73>	10001ee7: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001eeb:	83 c4 18             	add    esp,0x18
10001eee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ef1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ef4:	6a 00                	push   0x0
10001ef6:	6a 0c                	push   0xc
10001ef8:	6a 00                	push   0x0
10001efa:	6a 0d                	push   0xd
10001efc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001eff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f02:	e8 fc ff ff ff       	call   10001f03 <createKey(char*, unsigned int)+0x8f>	10001f03: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f07:	83 c4 18             	add    esp,0x18
10001f0a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f0d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f10:	6a 00                	push   0x0
10001f12:	6a 16                	push   0x16
10001f14:	6a 00                	push   0x0
10001f16:	6a 25                	push   0x25
10001f18:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f1b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f1e:	e8 fc ff ff ff       	call   10001f1f <createKey(char*, unsigned int)+0xab>	10001f1f: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f23:	83 c4 18             	add    esp,0x18
10001f26:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f29:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f2c:	6a 2a                	push   0x2a
10001f2e:	6a 13                	push   0x13
10001f30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f33:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f36:	e8 fc ff ff ff       	call   10001f37 <createKey(char*, unsigned int)+0xc3>	10001f37: R_386_PC32	ror(unsigned long long, int, int)
10001f3b:	83 c4 10             	add    esp,0x10
10001f3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f41:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f44:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
10001f47:	e9 78 ff ff ff       	jmp    10001ec4 <createKey(char*, unsigned int)+0x50>
10001f4c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f4f:	83 e0 0f             	and    eax,0xf
10001f52:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001f55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f58:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f5b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f5f:	c1 ea 04             	shr    edx,0x4
10001f62:	89 c1                	mov    ecx,eax
10001f64:	89 d3                	mov    ebx,edx
10001f66:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f69:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f6c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f6f:	83 e0 0f             	and    eax,0xf
10001f72:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001f75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f78:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f7b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f7f:	c1 ea 04             	shr    edx,0x4
10001f82:	89 c1                	mov    ecx,eax
10001f84:	89 d3                	mov    ebx,edx
10001f86:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f89:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f8f:	83 e0 0f             	and    eax,0xf
10001f92:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001f95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f98:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f9b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f9f:	c1 ea 04             	shr    edx,0x4
10001fa2:	89 c1                	mov    ecx,eax
10001fa4:	89 d3                	mov    ebx,edx
10001fa6:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fa9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001faf:	25 ff 03 00 00       	and    eax,0x3ff
10001fb4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001fb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fbd:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fc1:	c1 ea 0a             	shr    edx,0xa
10001fc4:	89 c1                	mov    ecx,eax
10001fc6:	89 d3                	mov    ebx,edx
10001fc8:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fcb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fd1:	25 ff 03 00 00       	and    eax,0x3ff
10001fd6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001fd9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fdc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fdf:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fe3:	c1 ea 0a             	shr    edx,0xa
10001fe6:	89 c1                	mov    ecx,eax
10001fe8:	89 d3                	mov    ebx,edx
10001fea:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fed:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001ff0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ff3:	25 ff 03 00 00       	and    eax,0x3ff
10001ff8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001ffb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ffe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002001:	0f ac d0 0a          	shrd   eax,edx,0xa
10002005:	c1 ea 0a             	shr    edx,0xa
10002008:	89 c1                	mov    ecx,eax
1000200a:	89 d3                	mov    ebx,edx
1000200c:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
1000200f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002012:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002015:	05 00 00 00 00       	add    eax,0x0	10002016: R_386_32	lookupA
1000201a:	8a 10                	mov    dl,BYTE PTR [eax]
1000201c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000201f:	88 10                	mov    BYTE PTR [eax],dl
10002021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002024:	8d 50 01             	lea    edx,[eax+0x1]
10002027:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000202a:	05 00 00 00 00       	add    eax,0x0	1000202b: R_386_32	lookupA
1000202f:	8a 00                	mov    al,BYTE PTR [eax]
10002031:	88 02                	mov    BYTE PTR [edx],al
10002033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002036:	8d 50 0f             	lea    edx,[eax+0xf]
10002039:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000203c:	05 00 00 00 00       	add    eax,0x0	1000203d: R_386_32	lookupA
10002041:	8a 00                	mov    al,BYTE PTR [eax]
10002043:	88 02                	mov    BYTE PTR [edx],al
10002045:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002048:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
1000204d:	f7 e9                	imul   ecx
1000204f:	c1 fa 05             	sar    edx,0x5
10002052:	89 c8                	mov    eax,ecx
10002054:	c1 f8 1f             	sar    eax,0x1f
10002057:	29 c2                	sub    edx,eax
10002059:	89 d0                	mov    eax,edx
1000205b:	b9 0a 00 00 00       	mov    ecx,0xa
10002060:	99                   	cdq    
10002061:	f7 f9                	idiv   ecx
10002063:	89 d0                	mov    eax,edx
10002065:	8d 50 30             	lea    edx,[eax+0x30]
10002068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000206b:	83 c0 03             	add    eax,0x3
1000206e:	88 10                	mov    BYTE PTR [eax],dl
10002070:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002073:	b8 67 66 66 66       	mov    eax,0x66666667
10002078:	f7 e9                	imul   ecx
1000207a:	c1 fa 02             	sar    edx,0x2
1000207d:	89 c8                	mov    eax,ecx
1000207f:	c1 f8 1f             	sar    eax,0x1f
10002082:	89 d1                	mov    ecx,edx
10002084:	29 c1                	sub    ecx,eax
10002086:	b8 67 66 66 66       	mov    eax,0x66666667
1000208b:	f7 e9                	imul   ecx
1000208d:	c1 fa 02             	sar    edx,0x2
10002090:	89 c8                	mov    eax,ecx
10002092:	c1 f8 1f             	sar    eax,0x1f
10002095:	29 c2                	sub    edx,eax
10002097:	89 d0                	mov    eax,edx
10002099:	c1 e0 02             	shl    eax,0x2
1000209c:	01 d0                	add    eax,edx
1000209e:	01 c0                	add    eax,eax
100020a0:	29 c1                	sub    ecx,eax
100020a2:	89 ca                	mov    edx,ecx
100020a4:	88 d0                	mov    al,dl
100020a6:	8d 50 30             	lea    edx,[eax+0x30]
100020a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ac:	83 c0 04             	add    eax,0x4
100020af:	88 10                	mov    BYTE PTR [eax],dl
100020b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100020b4:	b9 0a 00 00 00       	mov    ecx,0xa
100020b9:	99                   	cdq    
100020ba:	f7 f9                	idiv   ecx
100020bc:	89 d0                	mov    eax,edx
100020be:	8d 50 30             	lea    edx,[eax+0x30]
100020c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020c4:	83 c0 05             	add    eax,0x5
100020c7:	88 10                	mov    BYTE PTR [eax],dl
100020c9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020cc:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100020d1:	f7 e9                	imul   ecx
100020d3:	c1 fa 05             	sar    edx,0x5
100020d6:	89 c8                	mov    eax,ecx
100020d8:	c1 f8 1f             	sar    eax,0x1f
100020db:	29 c2                	sub    edx,eax
100020dd:	89 d0                	mov    eax,edx
100020df:	b9 0a 00 00 00       	mov    ecx,0xa
100020e4:	99                   	cdq    
100020e5:	f7 f9                	idiv   ecx
100020e7:	89 d0                	mov    eax,edx
100020e9:	8d 50 30             	lea    edx,[eax+0x30]
100020ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ef:	83 c0 07             	add    eax,0x7
100020f2:	88 10                	mov    BYTE PTR [eax],dl
100020f4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020f7:	b8 67 66 66 66       	mov    eax,0x66666667
100020fc:	f7 e9                	imul   ecx
100020fe:	c1 fa 02             	sar    edx,0x2
10002101:	89 c8                	mov    eax,ecx
10002103:	c1 f8 1f             	sar    eax,0x1f
10002106:	89 d1                	mov    ecx,edx
10002108:	29 c1                	sub    ecx,eax
1000210a:	b8 67 66 66 66       	mov    eax,0x66666667
1000210f:	f7 e9                	imul   ecx
10002111:	c1 fa 02             	sar    edx,0x2
10002114:	89 c8                	mov    eax,ecx
10002116:	c1 f8 1f             	sar    eax,0x1f
10002119:	29 c2                	sub    edx,eax
1000211b:	89 d0                	mov    eax,edx
1000211d:	c1 e0 02             	shl    eax,0x2
10002120:	01 d0                	add    eax,edx
10002122:	01 c0                	add    eax,eax
10002124:	29 c1                	sub    ecx,eax
10002126:	89 ca                	mov    edx,ecx
10002128:	88 d0                	mov    al,dl
1000212a:	8d 50 30             	lea    edx,[eax+0x30]
1000212d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002130:	83 c0 08             	add    eax,0x8
10002133:	88 10                	mov    BYTE PTR [eax],dl
10002135:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002138:	b9 0a 00 00 00       	mov    ecx,0xa
1000213d:	99                   	cdq    
1000213e:	f7 f9                	idiv   ecx
10002140:	89 d0                	mov    eax,edx
10002142:	8d 50 30             	lea    edx,[eax+0x30]
10002145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002148:	83 c0 09             	add    eax,0x9
1000214b:	88 10                	mov    BYTE PTR [eax],dl
1000214d:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10002150:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002155:	f7 e9                	imul   ecx
10002157:	c1 fa 05             	sar    edx,0x5
1000215a:	89 c8                	mov    eax,ecx
1000215c:	c1 f8 1f             	sar    eax,0x1f
1000215f:	29 c2                	sub    edx,eax
10002161:	89 d0                	mov    eax,edx
10002163:	b9 0a 00 00 00       	mov    ecx,0xa
10002168:	99                   	cdq    
10002169:	f7 f9                	idiv   ecx
1000216b:	89 d0                	mov    eax,edx
1000216d:	8d 50 30             	lea    edx,[eax+0x30]
10002170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002173:	83 c0 0b             	add    eax,0xb
10002176:	88 10                	mov    BYTE PTR [eax],dl
10002178:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
1000217b:	b8 67 66 66 66       	mov    eax,0x66666667
10002180:	f7 e9                	imul   ecx
10002182:	c1 fa 02             	sar    edx,0x2
10002185:	89 c8                	mov    eax,ecx
10002187:	c1 f8 1f             	sar    eax,0x1f
1000218a:	89 d1                	mov    ecx,edx
1000218c:	29 c1                	sub    ecx,eax
1000218e:	b8 67 66 66 66       	mov    eax,0x66666667
10002193:	f7 e9                	imul   ecx
10002195:	c1 fa 02             	sar    edx,0x2
10002198:	89 c8                	mov    eax,ecx
1000219a:	c1 f8 1f             	sar    eax,0x1f
1000219d:	29 c2                	sub    edx,eax
1000219f:	89 d0                	mov    eax,edx
100021a1:	c1 e0 02             	shl    eax,0x2
100021a4:	01 d0                	add    eax,edx
100021a6:	01 c0                	add    eax,eax
100021a8:	29 c1                	sub    ecx,eax
100021aa:	89 ca                	mov    edx,ecx
100021ac:	88 d0                	mov    al,dl
100021ae:	8d 50 30             	lea    edx,[eax+0x30]
100021b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021b4:	83 c0 0c             	add    eax,0xc
100021b7:	88 10                	mov    BYTE PTR [eax],dl
100021b9:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100021bc:	b9 0a 00 00 00       	mov    ecx,0xa
100021c1:	99                   	cdq    
100021c2:	f7 f9                	idiv   ecx
100021c4:	89 d0                	mov    eax,edx
100021c6:	8d 50 30             	lea    edx,[eax+0x30]
100021c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021cc:	83 c0 0d             	add    eax,0xd
100021cf:	88 10                	mov    BYTE PTR [eax],dl
100021d1:	90                   	nop
100021d2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100021d5:	c9                   	leave  
100021d6:	c3                   	ret    

100021d7 <retrieveBits(char*)>:
100021d7:	55                   	push   ebp
100021d8:	89 e5                	mov    ebp,esp
100021da:	57                   	push   edi
100021db:	56                   	push   esi
100021dc:	53                   	push   ebx
100021dd:	83 ec 4c             	sub    esp,0x4c
100021e0:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
100021e7:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
100021ee:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [ebp-0x1c],0xffffffff
100021f5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100021fc:	83 7d e0 0f          	cmp    DWORD PTR [ebp-0x20],0xf
10002200:	7f 54                	jg     10002256 <retrieveBits(char*)+0x7f>
10002202:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002205:	05 00 00 00 00       	add    eax,0x0	10002206: R_386_32	lookupA
1000220a:	8a 10                	mov    dl,BYTE PTR [eax]
1000220c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000220f:	8a 00                	mov    al,BYTE PTR [eax]
10002211:	38 c2                	cmp    dl,al
10002213:	75 06                	jne    1000221b <retrieveBits(char*)+0x44>
10002215:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002218:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000221b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000221e:	05 00 00 00 00       	add    eax,0x0	1000221f: R_386_32	lookupB
10002223:	8a 10                	mov    dl,BYTE PTR [eax]
10002225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002228:	40                   	inc    eax
10002229:	8a 00                	mov    al,BYTE PTR [eax]
1000222b:	38 c2                	cmp    dl,al
1000222d:	75 06                	jne    10002235 <retrieveBits(char*)+0x5e>
1000222f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002232:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10002235:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002238:	05 00 00 00 00       	add    eax,0x0	10002239: R_386_32	lookupC
1000223d:	8a 10                	mov    dl,BYTE PTR [eax]
1000223f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002242:	83 c0 0f             	add    eax,0xf
10002245:	8a 00                	mov    al,BYTE PTR [eax]
10002247:	38 c2                	cmp    dl,al
10002249:	75 06                	jne    10002251 <retrieveBits(char*)+0x7a>
1000224b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000224e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002251:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10002254:	eb a6                	jmp    100021fc <retrieveBits(char*)+0x25>
10002256:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
1000225a:	74 0c                	je     10002268 <retrieveBits(char*)+0x91>
1000225c:	83 7d e8 ff          	cmp    DWORD PTR [ebp-0x18],0xffffffff
10002260:	74 06                	je     10002268 <retrieveBits(char*)+0x91>
10002262:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10002266:	75 0f                	jne    10002277 <retrieveBits(char*)+0xa0>
10002268:	b8 00 00 00 00       	mov    eax,0x0
1000226d:	ba 00 00 00 00       	mov    edx,0x0
10002272:	e9 02 02 00 00       	jmp    10002479 <retrieveBits(char*)+0x2a2>
10002277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000227a:	83 c0 03             	add    eax,0x3
1000227d:	8a 00                	mov    al,BYTE PTR [eax]
1000227f:	0f be c0             	movsx  eax,al
10002282:	8d 50 d0             	lea    edx,[eax-0x30]
10002285:	89 d0                	mov    eax,edx
10002287:	c1 e0 02             	shl    eax,0x2
1000228a:	01 d0                	add    eax,edx
1000228c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002293:	01 d0                	add    eax,edx
10002295:	c1 e0 02             	shl    eax,0x2
10002298:	89 c6                	mov    esi,eax
1000229a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000229d:	83 c0 04             	add    eax,0x4
100022a0:	8a 00                	mov    al,BYTE PTR [eax]
100022a2:	0f be c0             	movsx  eax,al
100022a5:	8d 50 d0             	lea    edx,[eax-0x30]
100022a8:	89 d0                	mov    eax,edx
100022aa:	c1 e0 02             	shl    eax,0x2
100022ad:	01 d0                	add    eax,edx
100022af:	01 c0                	add    eax,eax
100022b1:	8d 14 06             	lea    edx,[esi+eax*1]
100022b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022b7:	83 c0 05             	add    eax,0x5
100022ba:	8a 00                	mov    al,BYTE PTR [eax]
100022bc:	0f be c0             	movsx  eax,al
100022bf:	83 e8 30             	sub    eax,0x30
100022c2:	01 d0                	add    eax,edx
100022c4:	99                   	cdq    
100022c5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100022c8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100022cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022ce:	83 c0 07             	add    eax,0x7
100022d1:	8a 00                	mov    al,BYTE PTR [eax]
100022d3:	0f be c0             	movsx  eax,al
100022d6:	8d 50 d0             	lea    edx,[eax-0x30]
100022d9:	89 d0                	mov    eax,edx
100022db:	c1 e0 02             	shl    eax,0x2
100022de:	01 d0                	add    eax,edx
100022e0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100022e7:	01 d0                	add    eax,edx
100022e9:	c1 e0 02             	shl    eax,0x2
100022ec:	89 c6                	mov    esi,eax
100022ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022f1:	83 c0 08             	add    eax,0x8
100022f4:	8a 00                	mov    al,BYTE PTR [eax]
100022f6:	0f be c0             	movsx  eax,al
100022f9:	8d 50 d0             	lea    edx,[eax-0x30]
100022fc:	89 d0                	mov    eax,edx
100022fe:	c1 e0 02             	shl    eax,0x2
10002301:	01 d0                	add    eax,edx
10002303:	01 c0                	add    eax,eax
10002305:	8d 14 06             	lea    edx,[esi+eax*1]
10002308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000230b:	83 c0 09             	add    eax,0x9
1000230e:	8a 00                	mov    al,BYTE PTR [eax]
10002310:	0f be c0             	movsx  eax,al
10002313:	83 e8 30             	sub    eax,0x30
10002316:	01 d0                	add    eax,edx
10002318:	99                   	cdq    
10002319:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
1000231c:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
1000231f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002322:	83 c0 0b             	add    eax,0xb
10002325:	8a 00                	mov    al,BYTE PTR [eax]
10002327:	0f be c0             	movsx  eax,al
1000232a:	8d 50 d0             	lea    edx,[eax-0x30]
1000232d:	89 d0                	mov    eax,edx
1000232f:	c1 e0 02             	shl    eax,0x2
10002332:	01 d0                	add    eax,edx
10002334:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000233b:	01 d0                	add    eax,edx
1000233d:	c1 e0 02             	shl    eax,0x2
10002340:	89 c6                	mov    esi,eax
10002342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002345:	83 c0 0c             	add    eax,0xc
10002348:	8a 00                	mov    al,BYTE PTR [eax]
1000234a:	0f be c0             	movsx  eax,al
1000234d:	8d 50 d0             	lea    edx,[eax-0x30]
10002350:	89 d0                	mov    eax,edx
10002352:	c1 e0 02             	shl    eax,0x2
10002355:	01 d0                	add    eax,edx
10002357:	01 c0                	add    eax,eax
10002359:	8d 14 06             	lea    edx,[esi+eax*1]
1000235c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000235f:	83 c0 0d             	add    eax,0xd
10002362:	8a 00                	mov    al,BYTE PTR [eax]
10002364:	0f be c0             	movsx  eax,al
10002367:	83 e8 30             	sub    eax,0x30
1000236a:	01 d0                	add    eax,edx
1000236c:	99                   	cdq    
1000236d:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002370:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10002373:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002376:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10002379:	0f a4 c2 0a          	shld   edx,eax,0xa
1000237d:	c1 e0 0a             	shl    eax,0xa
10002380:	89 c6                	mov    esi,eax
10002382:	89 d7                	mov    edi,edx
10002384:	89 f0                	mov    eax,esi
10002386:	0b 45 c8             	or     eax,DWORD PTR [ebp-0x38]
10002389:	89 c1                	mov    ecx,eax
1000238b:	89 f8                	mov    eax,edi
1000238d:	0b 45 cc             	or     eax,DWORD PTR [ebp-0x34]
10002390:	89 c3                	mov    ebx,eax
10002392:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002395:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10002398:	0f a4 c2 14          	shld   edx,eax,0x14
1000239c:	c1 e0 14             	shl    eax,0x14
1000239f:	89 ce                	mov    esi,ecx
100023a1:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
100023a4:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100023a7:	0b 75 a8             	or     esi,DWORD PTR [ebp-0x58]
100023aa:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
100023ad:	89 d8                	mov    eax,ebx
100023af:	0b 45 ac             	or     eax,DWORD PTR [ebp-0x54]
100023b2:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100023b5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100023b8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100023bb:	0f a4 c2 0c          	shld   edx,eax,0xc
100023bf:	c1 e0 0c             	shl    eax,0xc
100023c2:	89 c3                	mov    ebx,eax
100023c4:	89 d6                	mov    esi,edx
100023c6:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
100023c9:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100023cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100023cf:	c1 e0 04             	shl    eax,0x4
100023d2:	0b 45 ec             	or     eax,DWORD PTR [ebp-0x14]
100023d5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100023d8:	c1 e2 08             	shl    edx,0x8
100023db:	09 d0                	or     eax,edx
100023dd:	99                   	cdq    
100023de:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
100023e1:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
100023e4:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
100023eb:	81 7d d4 db 24 00 00 	cmp    DWORD PTR [ebp-0x2c],0x24db
100023f2:	7f 7f                	jg     10002473 <retrieveBits(char*)+0x29c>
100023f4:	6a 2a                	push   0x2a
100023f6:	6a 13                	push   0x13
100023f8:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023fb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023fe:	e8 fc ff ff ff       	call   100023ff <retrieveBits(char*)+0x228>	100023ff: R_386_PC32	ror(unsigned long long, int, int)
10002403:	83 c4 10             	add    esp,0x10
10002406:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002409:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
1000240c:	6a 00                	push   0x0
1000240e:	6a 08                	push   0x8
10002410:	6a 00                	push   0x0
10002412:	6a 03                	push   0x3
10002414:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002417:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000241a:	e8 fc ff ff ff       	call   1000241b <retrieveBits(char*)+0x244>	1000241b: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000241f:	83 c4 18             	add    esp,0x18
10002422:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002425:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002428:	6a 00                	push   0x0
1000242a:	6a 0c                	push   0xc
1000242c:	6a 00                	push   0x0
1000242e:	6a 0d                	push   0xd
10002430:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002433:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002436:	e8 fc ff ff ff       	call   10002437 <retrieveBits(char*)+0x260>	10002437: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000243b:	83 c4 18             	add    esp,0x18
1000243e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002441:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002444:	6a 00                	push   0x0
10002446:	6a 16                	push   0x16
10002448:	6a 00                	push   0x0
1000244a:	6a 25                	push   0x25
1000244c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000244f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002452:	e8 fc ff ff ff       	call   10002453 <retrieveBits(char*)+0x27c>	10002453: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002457:	83 c4 18             	add    esp,0x18
1000245a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000245d:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002460:	81 75 d8 95 38 e4 b5 	xor    DWORD PTR [ebp-0x28],0xb5e43895
10002467:	83 75 dc 37          	xor    DWORD PTR [ebp-0x24],0x37
1000246b:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
1000246e:	e9 78 ff ff ff       	jmp    100023eb <retrieveBits(char*)+0x214>
10002473:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002476:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002479:	8d 65 f4             	lea    esp,[ebp-0xc]
1000247c:	5b                   	pop    ebx
1000247d:	5e                   	pop    esi
1000247e:	5f                   	pop    edi
1000247f:	5d                   	pop    ebp
10002480:	c3                   	ret    

10002481 <checkKey(char*)>:
10002481:	55                   	push   ebp
10002482:	89 e5                	mov    ebp,esp
10002484:	53                   	push   ebx
10002485:	83 ec 14             	sub    esp,0x14
10002488:	83 ec 04             	sub    esp,0x4
1000248b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000248e:	e8 fc ff ff ff       	call   1000248f <checkKey(char*)+0xe>	1000248f: R_386_PC32	retrieveBits(char*)
10002493:	83 c4 08             	add    esp,0x8
10002496:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002499:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000249c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000249f:	25 ff 7f 00 00       	and    eax,0x7fff
100024a4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100024a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024aa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100024ad:	0f ac d0 0f          	shrd   eax,edx,0xf
100024b1:	c1 ea 0f             	shr    edx,0xf
100024b4:	89 c1                	mov    ecx,eax
100024b6:	89 d3                	mov    ebx,edx
100024b8:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
100024bb:	83 ec 04             	sub    esp,0x4
100024be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100024c1:	e8 fc ff ff ff       	call   100024c2 <checkKey(char*)+0x41>	100024c2: R_386_PC32	getChecksum(unsigned int)
100024c6:	83 c4 08             	add    esp,0x8
100024c9:	39 45 ec             	cmp    DWORD PTR [ebp-0x14],eax
100024cc:	0f 95 c0             	setne  al
100024cf:	84 c0                	test   al,al
100024d1:	74 07                	je     100024da <checkKey(char*)+0x59>
100024d3:	b8 00 00 00 00       	mov    eax,0x0
100024d8:	eb 06                	jmp    100024e0 <checkKey(char*)+0x5f>
100024da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024dd:	83 e0 07             	and    eax,0x7
100024e0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100024e3:	c9                   	leave  
100024e4:	c3                   	ret    

100024e5 <changeKeyType(char*, int)>:
100024e5:	55                   	push   ebp
100024e6:	89 e5                	mov    ebp,esp
100024e8:	83 ec 10             	sub    esp,0x10
100024eb:	83 ec 04             	sub    esp,0x4
100024ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024f1:	e8 fc ff ff ff       	call   100024f2 <changeKeyType(char*, int)+0xd>	100024f2: R_386_PC32	retrieveBits(char*)
100024f6:	83 c4 08             	add    esp,0x8
100024f9:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
100024fc:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100024ff:	83 65 f8 f8          	and    DWORD PTR [ebp-0x8],0xfffffff8
10002503:	83 65 fc ff          	and    DWORD PTR [ebp-0x4],0xffffffff
10002507:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000250a:	99                   	cdq    
1000250b:	09 45 f8             	or     DWORD PTR [ebp-0x8],eax
1000250e:	09 55 fc             	or     DWORD PTR [ebp-0x4],edx
10002511:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10002514:	50                   	push   eax
10002515:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002518:	e8 fc ff ff ff       	call   10002519 <changeKeyType(char*, int)+0x34>	10002519: R_386_PC32	createKey(char*, unsigned int)
1000251d:	83 c4 08             	add    esp,0x8
10002520:	83 ec 04             	sub    esp,0x4
10002523:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002526:	e8 fc ff ff ff       	call   10002527 <changeKeyType(char*, int)+0x42>	10002527: R_386_PC32	checkKey(char*)
1000252b:	83 c4 08             	add    esp,0x8
1000252e:	85 c0                	test   eax,eax
10002530:	0f 95 c0             	setne  al
10002533:	c9                   	leave  
10002534:	c3                   	ret    

10002535 <checkExtendedKey(char*)>:
10002535:	55                   	push   ebp
10002536:	89 e5                	mov    ebp,esp
10002538:	83 ec 20             	sub    esp,0x20
1000253b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000253e:	8a 00                	mov    al,BYTE PTR [eax]
10002540:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10002543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002546:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
10002549:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
1000254c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000254f:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10002552:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10002555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002558:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
1000255b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000255e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002561:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10002564:	88 45 f0             	mov    BYTE PTR [ebp-0x10],al
10002567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000256a:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
1000256d:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10002570:	c6 45 f2 2d          	mov    BYTE PTR [ebp-0xe],0x2d
10002574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002577:	8a 40 06             	mov    al,BYTE PTR [eax+0x6]
1000257a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000257d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002580:	8a 40 07             	mov    al,BYTE PTR [eax+0x7]
10002583:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10002586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002589:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
1000258c:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
1000258f:	c6 45 f6 2d          	mov    BYTE PTR [ebp-0xa],0x2d
10002593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002596:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10002599:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000259c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000259f:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
100025a2:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
100025a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025a8:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
100025ab:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
100025ae:	c6 45 fa 2d          	mov    BYTE PTR [ebp-0x6],0x2d
100025b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025b5:	8a 40 0f             	mov    al,BYTE PTR [eax+0xf]
100025b8:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
100025bb:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025be:	48                   	dec    eax
100025bf:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100025c2:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025c5:	3c 2f                	cmp    al,0x2f
100025c7:	75 04                	jne    100025cd <checkExtendedKey(char*)+0x98>
100025c9:	c6 45 ef 39          	mov    BYTE PTR [ebp-0x11],0x39
100025cd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d0:	48                   	dec    eax
100025d1:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
100025d4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d7:	3c 2f                	cmp    al,0x2f
100025d9:	75 04                	jne    100025df <checkExtendedKey(char*)+0xaa>
100025db:	c6 45 f5 39          	mov    BYTE PTR [ebp-0xb],0x39
100025df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025e2:	83 c0 0d             	add    eax,0xd
100025e5:	8a 10                	mov    dl,BYTE PTR [eax]
100025e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025ea:	83 c0 0c             	add    eax,0xc
100025ed:	8a 00                	mov    al,BYTE PTR [eax]
100025ef:	38 c2                	cmp    dl,al
100025f1:	74 0a                	je     100025fd <checkExtendedKey(char*)+0xc8>
100025f3:	b8 00 00 00 00       	mov    eax,0x0
100025f8:	e9 d6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100025fd:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002600:	3c 2f                	cmp    al,0x2f
10002602:	7e 07                	jle    1000260b <checkExtendedKey(char*)+0xd6>
10002604:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002607:	3c 39                	cmp    al,0x39
10002609:	7e 0a                	jle    10002615 <checkExtendedKey(char*)+0xe0>
1000260b:	b8 00 00 00 00       	mov    eax,0x0
10002610:	e9 be 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002615:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002618:	3c 2f                	cmp    al,0x2f
1000261a:	7e 07                	jle    10002623 <checkExtendedKey(char*)+0xee>
1000261c:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
1000261f:	3c 39                	cmp    al,0x39
10002621:	7e 0a                	jle    1000262d <checkExtendedKey(char*)+0xf8>
10002623:	b8 00 00 00 00       	mov    eax,0x0
10002628:	e9 a6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000262d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002630:	3c 2f                	cmp    al,0x2f
10002632:	7e 07                	jle    1000263b <checkExtendedKey(char*)+0x106>
10002634:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002637:	3c 39                	cmp    al,0x39
10002639:	7e 0a                	jle    10002645 <checkExtendedKey(char*)+0x110>
1000263b:	b8 00 00 00 00       	mov    eax,0x0
10002640:	e9 8e 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002645:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10002648:	3c 2f                	cmp    al,0x2f
1000264a:	7e 07                	jle    10002653 <checkExtendedKey(char*)+0x11e>
1000264c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000264f:	3c 39                	cmp    al,0x39
10002651:	7e 07                	jle    1000265a <checkExtendedKey(char*)+0x125>
10002653:	b8 00 00 00 00       	mov    eax,0x0
10002658:	eb 79                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000265a:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
1000265d:	3c 2f                	cmp    al,0x2f
1000265f:	7e 07                	jle    10002668 <checkExtendedKey(char*)+0x133>
10002661:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
10002664:	3c 39                	cmp    al,0x39
10002666:	7e 07                	jle    1000266f <checkExtendedKey(char*)+0x13a>
10002668:	b8 00 00 00 00       	mov    eax,0x0
1000266d:	eb 64                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000266f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002672:	3c 2f                	cmp    al,0x2f
10002674:	7e 07                	jle    1000267d <checkExtendedKey(char*)+0x148>
10002676:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002679:	3c 39                	cmp    al,0x39
1000267b:	7e 07                	jle    10002684 <checkExtendedKey(char*)+0x14f>
1000267d:	b8 00 00 00 00       	mov    eax,0x0
10002682:	eb 4f                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002684:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10002687:	3c 2f                	cmp    al,0x2f
10002689:	7e 07                	jle    10002692 <checkExtendedKey(char*)+0x15d>
1000268b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000268e:	3c 39                	cmp    al,0x39
10002690:	7e 07                	jle    10002699 <checkExtendedKey(char*)+0x164>
10002692:	b8 00 00 00 00       	mov    eax,0x0
10002697:	eb 3a                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002699:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
1000269c:	3c 2f                	cmp    al,0x2f
1000269e:	7e 07                	jle    100026a7 <checkExtendedKey(char*)+0x172>
100026a0:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
100026a3:	3c 39                	cmp    al,0x39
100026a5:	7e 07                	jle    100026ae <checkExtendedKey(char*)+0x179>
100026a7:	b8 00 00 00 00       	mov    eax,0x0
100026ac:	eb 25                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026ae:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b1:	3c 2f                	cmp    al,0x2f
100026b3:	7e 07                	jle    100026bc <checkExtendedKey(char*)+0x187>
100026b5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b8:	3c 39                	cmp    al,0x39
100026ba:	7e 07                	jle    100026c3 <checkExtendedKey(char*)+0x18e>
100026bc:	b8 00 00 00 00       	mov    eax,0x0
100026c1:	eb 10                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026c3:	83 ec 04             	sub    esp,0x4
100026c6:	8d 45 ec             	lea    eax,[ebp-0x14]
100026c9:	50                   	push   eax
100026ca:	e8 fc ff ff ff       	call   100026cb <checkExtendedKey(char*)+0x196>	100026cb: R_386_PC32	checkKey(char*)
100026cf:	83 c4 08             	add    esp,0x8
100026d2:	90                   	nop
100026d3:	c9                   	leave  
100026d4:	c3                   	ret    

100026d5 <loadTimezoneStrings()>:
100026d5:	55                   	push   ebp
100026d6:	89 e5                	mov    ebp,esp
100026d8:	53                   	push   ebx
100026d9:	83 ec 34             	sub    esp,0x34
100026dc:	83 ec 0c             	sub    esp,0xc
100026df:	68 14 01 00 00       	push   0x114
100026e4:	e8 fc ff ff ff       	call   100026e5 <loadTimezoneStrings()+0x10>	100026e5: R_386_PC32	operator new(unsigned long)
100026e9:	83 c4 10             	add    esp,0x10
100026ec:	89 c3                	mov    ebx,eax
100026ee:	a1 00 00 00 00       	mov    eax,ds:0x0	100026ef: R_386_32	kernelProcess
100026f3:	83 ec 04             	sub    esp,0x4
100026f6:	50                   	push   eax
100026f7:	68 84 a7 00 10       	push   0x1000a784	100026f8: R_386_32	.text
100026fc:	53                   	push   ebx
100026fd:	e8 fc ff ff ff       	call   100026fe <loadTimezoneStrings()+0x29>	100026fe: R_386_PC32	File::File(char const*, Process*)
10002702:	83 c4 10             	add    esp,0x10
10002705:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10002708:	83 ec 08             	sub    esp,0x8
1000270b:	6a 01                	push   0x1
1000270d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002710:	e8 fc ff ff ff       	call   10002711 <loadTimezoneStrings()+0x3c>	10002711: R_386_PC32	File::open(FileOpenMode)
10002715:	83 c4 10             	add    esp,0x10
10002718:	83 ec 04             	sub    esp,0x4
1000271b:	8d 45 d7             	lea    eax,[ebp-0x29]
1000271e:	50                   	push   eax
1000271f:	8d 45 d8             	lea    eax,[ebp-0x28]
10002722:	50                   	push   eax
10002723:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002726:	e8 fc ff ff ff       	call   10002727 <loadTimezoneStrings()+0x52>	10002727: R_386_PC32	File::stat(unsigned long long*, bool*)
1000272b:	83 c4 10             	add    esp,0x10
1000272e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002731:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002734:	83 ec 0c             	sub    esp,0xc
10002737:	50                   	push   eax
10002738:	e8 fc ff ff ff       	call   10002739 <loadTimezoneStrings()+0x64>	10002739: R_386_PC32	malloc
1000273d:	83 c4 10             	add    esp,0x10
10002740:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002743:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002746:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002749:	83 ec 04             	sub    esp,0x4
1000274c:	50                   	push   eax
1000274d:	6a 00                	push   0x0
1000274f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002752:	e8 fc ff ff ff       	call   10002753 <loadTimezoneStrings()+0x7e>	10002753: R_386_PC32	memset
10002757:	83 c4 10             	add    esp,0x10
1000275a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000275d:	8b 00                	mov    eax,DWORD PTR [eax]
1000275f:	83 c0 0c             	add    eax,0xc
10002762:	8b 08                	mov    ecx,DWORD PTR [eax]
10002764:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002767:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
1000276a:	83 ec 0c             	sub    esp,0xc
1000276d:	8d 5d d0             	lea    ebx,[ebp-0x30]
10002770:	53                   	push   ebx
10002771:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002774:	52                   	push   edx
10002775:	50                   	push   eax
10002776:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002779:	ff d1                	call   ecx
1000277b:	83 c4 20             	add    esp,0x20
1000277e:	83 ec 0c             	sub    esp,0xc
10002781:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002784:	e8 fc ff ff ff       	call   10002785 <loadTimezoneStrings()+0xb0>	10002785: R_386_PC32	File::close()
10002789:	83 c4 10             	add    esp,0x10
1000278c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10002793:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000279a:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
100027a1:	7f 39                	jg     100027dc <loadTimezoneStrings()+0x107>
100027a3:	83 ec 0c             	sub    esp,0xc
100027a6:	6a 78                	push   0x78
100027a8:	e8 fc ff ff ff       	call   100027a9 <loadTimezoneStrings()+0xd4>	100027a9: R_386_PC32	malloc
100027ad:	83 c4 10             	add    esp,0x10
100027b0:	89 c2                	mov    edx,eax
100027b2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027b5:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	100027b8: R_386_32	timezoneStrings
100027bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027bf:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100027c2: R_386_32	timezoneStrings
100027c6:	83 ec 08             	sub    esp,0x8
100027c9:	68 a3 a7 00 10       	push   0x1000a7a3	100027ca: R_386_32	.text
100027ce:	50                   	push   eax
100027cf:	e8 fc ff ff ff       	call   100027d0 <loadTimezoneStrings()+0xfb>	100027d0: R_386_PC32	strcpy
100027d4:	83 c4 10             	add    esp,0x10
100027d7:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100027da:	eb be                	jmp    1000279a <loadTimezoneStrings()+0xc5>
100027dc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100027e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100027e6:	8d 50 01             	lea    edx,[eax+0x1]
100027e9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
100027ec:	89 c2                	mov    edx,eax
100027ee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100027f1:	01 d0                	add    eax,edx
100027f3:	8a 00                	mov    al,BYTE PTR [eax]
100027f5:	88 45 ce             	mov    BYTE PTR [ebp-0x32],al
100027f8:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
100027fc:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
100027ff:	3c 0d                	cmp    al,0xd
10002801:	0f 84 2a 01 00 00    	je     10002931 <loadTimezoneStrings()+0x25c>
10002807:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
1000280a:	3c 09                	cmp    al,0x9
1000280c:	75 3c                	jne    1000284a <loadTimezoneStrings()+0x175>
1000280e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002811:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002814: R_386_32	timezoneStrings
10002818:	83 ec 0c             	sub    esp,0xc
1000281b:	50                   	push   eax
1000281c:	e8 fc ff ff ff       	call   1000281d <loadTimezoneStrings()+0x148>	1000281d: R_386_PC32	strlen
10002821:	83 c4 10             	add    esp,0x10
10002824:	83 f8 08             	cmp    eax,0x8
10002827:	0f 87 0a 01 00 00    	ja     10002937 <loadTimezoneStrings()+0x262>
1000282d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002830:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002833: R_386_32	timezoneStrings
10002837:	83 ec 08             	sub    esp,0x8
1000283a:	68 a3 a7 00 10       	push   0x1000a7a3	1000283b: R_386_32	.text
1000283f:	50                   	push   eax
10002840:	e8 fc ff ff ff       	call   10002841 <loadTimezoneStrings()+0x16c>	10002841: R_386_PC32	strcat
10002845:	83 c4 10             	add    esp,0x10
10002848:	eb c4                	jmp    1000280e <loadTimezoneStrings()+0x139>
1000284a:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
1000284d:	3c 0a                	cmp    al,0xa
1000284f:	75 67                	jne    100028b8 <loadTimezoneStrings()+0x1e3>
10002851:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002854:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002857: R_386_32	timezoneStrings
1000285b:	83 ec 0c             	sub    esp,0xc
1000285e:	50                   	push   eax
1000285f:	e8 fc ff ff ff       	call   10002860 <loadTimezoneStrings()+0x18b>	10002860: R_386_PC32	strlen
10002864:	83 c4 10             	add    esp,0x10
10002867:	83 f8 35             	cmp    eax,0x35
1000286a:	77 1d                	ja     10002889 <loadTimezoneStrings()+0x1b4>
1000286c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000286f:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002872: R_386_32	timezoneStrings
10002876:	83 ec 08             	sub    esp,0x8
10002879:	68 a3 a7 00 10       	push   0x1000a7a3	1000287a: R_386_32	.text
1000287e:	50                   	push   eax
1000287f:	e8 fc ff ff ff       	call   10002880 <loadTimezoneStrings()+0x1ab>	10002880: R_386_PC32	strcat
10002884:	83 c4 10             	add    esp,0x10
10002887:	eb c8                	jmp    10002851 <loadTimezoneStrings()+0x17c>
10002889:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000288c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000288f:	99                   	cdq    
10002890:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10002893:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
10002896:	39 c8                	cmp    eax,ecx
10002898:	89 d0                	mov    eax,edx
1000289a:	19 d8                	sbb    eax,ebx
1000289c:	0f 82 9b 00 00 00    	jb     1000293d <loadTimezoneStrings()+0x268>
100028a2:	83 ec 0c             	sub    esp,0xc
100028a5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
100028a8:	e8 fc ff ff ff       	call   100028a9 <loadTimezoneStrings()+0x1d4>	100028a9: R_386_PC32	free
100028ad:	83 c4 10             	add    esp,0x10
100028b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028b3:	e9 8b 00 00 00       	jmp    10002943 <loadTimezoneStrings()+0x26e>
100028b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028bb:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028be: R_386_32	timezoneStrings
100028c2:	83 ec 0c             	sub    esp,0xc
100028c5:	50                   	push   eax
100028c6:	e8 fc ff ff ff       	call   100028c7 <loadTimezoneStrings()+0x1f2>	100028c7: R_386_PC32	strlen
100028cb:	83 c4 10             	add    esp,0x10
100028ce:	83 f8 31             	cmp    eax,0x31
100028d1:	77 1f                	ja     100028f2 <loadTimezoneStrings()+0x21d>
100028d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028d6:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028d9: R_386_32	timezoneStrings
100028dd:	83 ec 08             	sub    esp,0x8
100028e0:	8d 55 ce             	lea    edx,[ebp-0x32]
100028e3:	52                   	push   edx
100028e4:	50                   	push   eax
100028e5:	e8 fc ff ff ff       	call   100028e6 <loadTimezoneStrings()+0x211>	100028e6: R_386_PC32	strcat
100028ea:	83 c4 10             	add    esp,0x10
100028ed:	e9 f1 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
100028f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028f5:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028f8: R_386_32	timezoneStrings
100028fc:	83 ec 0c             	sub    esp,0xc
100028ff:	50                   	push   eax
10002900:	e8 fc ff ff ff       	call   10002901 <loadTimezoneStrings()+0x22c>	10002901: R_386_PC32	strlen
10002905:	83 c4 10             	add    esp,0x10
10002908:	83 f8 32             	cmp    eax,0x32
1000290b:	0f 85 d2 fe ff ff    	jne    100027e3 <loadTimezoneStrings()+0x10e>
10002911:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002914:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002917: R_386_32	timezoneStrings
1000291b:	83 ec 08             	sub    esp,0x8
1000291e:	68 a5 a7 00 10       	push   0x1000a7a5	1000291f: R_386_32	.text
10002923:	50                   	push   eax
10002924:	e8 fc ff ff ff       	call   10002925 <loadTimezoneStrings()+0x250>	10002925: R_386_PC32	strcat
10002929:	83 c4 10             	add    esp,0x10
1000292c:	e9 b2 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002931:	90                   	nop
10002932:	e9 ac fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002937:	90                   	nop
10002938:	e9 a6 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
1000293d:	90                   	nop
1000293e:	e9 a0 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002943:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002946:	c9                   	leave  
10002947:	c3                   	ret    

10002948 <_bcrypt_rand>:
10002948:	55                   	push   ebp
10002949:	89 e5                	mov    ebp,esp
1000294b:	83 ec 08             	sub    esp,0x8
1000294e:	e8 fc ff ff ff       	call   1000294f <_bcrypt_rand+0x7>	1000294f: R_386_PC32	KeRand()
10002953:	c9                   	leave  
10002954:	c3                   	ret    

10002955 <firstRun(bool)>:
10002955:	55                   	push   ebp
10002956:	89 e5                	mov    ebp,esp
10002958:	57                   	push   edi
10002959:	56                   	push   esi
1000295a:	53                   	push   ebx
1000295b:	81 ec 5c 01 00 00    	sub    esp,0x15c
10002961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002964:	88 85 a4 fe ff ff    	mov    BYTE PTR [ebp-0x15c],al
1000296a:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
10002970:	83 f0 01             	xor    eax,0x1
10002973:	a2 00 00 00 00       	mov    ds:0x0,al	10002974: R_386_32	showSidebar
10002978:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000297a: R_386_32	guiKeyboardHandler
	1000297e: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
10002982:	83 ec 0c             	sub    esp,0xc
10002985:	68 ac a7 00 10       	push   0x1000a7ac	10002986: R_386_32	.text
1000298a:	e8 fc ff ff ff       	call   1000298b <firstRun(bool)+0x36>	1000298b: R_386_PC32	KeSetBootMessage(char const*)
1000298f:	83 c4 10             	add    esp,0x10
10002992:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002994: R_386_32	VgaText::hiddenOut
10002999:	a1 00 00 00 00       	mov    eax,ds:0x0	1000299a: R_386_32	activeTerminal
1000299e:	83 ec 08             	sub    esp,0x8
100029a1:	68 d5 a7 00 10       	push   0x1000a7d5	100029a2: R_386_32	.text
100029a6:	50                   	push   eax
100029a7:	e8 fc ff ff ff       	call   100029a8 <firstRun(bool)+0x53>	100029a8: R_386_PC32	VgaText::puts(char const*)
100029ac:	83 c4 10             	add    esp,0x10
100029af:	a1 00 00 00 00       	mov    eax,ds:0x0	100029b0: R_386_32	kernelProcess
100029b4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
100029ba:	83 ec 08             	sub    esp,0x8
100029bd:	68 d5 a7 00 10       	push   0x1000a7d5	100029be: R_386_32	.text
100029c2:	50                   	push   eax
100029c3:	e8 fc ff ff ff       	call   100029c4 <firstRun(bool)+0x6f>	100029c4: R_386_PC32	VgaText::puts(char const*)
100029c8:	83 c4 10             	add    esp,0x10
100029cb:	83 ec 0c             	sub    esp,0xc
100029ce:	68 84 01 00 00       	push   0x184
100029d3:	e8 fc ff ff ff       	call   100029d4 <firstRun(bool)+0x7f>	100029d4: R_386_PC32	operator new(unsigned long)
100029d8:	83 c4 10             	add    esp,0x10
100029db:	89 c3                	mov    ebx,eax
100029dd:	83 ec 08             	sub    esp,0x8
100029e0:	68 dc a7 00 10       	push   0x1000a7dc	100029e1: R_386_32	.text
100029e5:	53                   	push   ebx
100029e6:	e8 fc ff ff ff       	call   100029e7 <firstRun(bool)+0x92>	100029e7: R_386_PC32	VgaText::VgaText(char const*)
100029eb:	83 c4 10             	add    esp,0x10
100029ee:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100029f0: R_386_32	term
100029f4:	a1 00 00 00 00       	mov    eax,ds:0x0	100029f5: R_386_32	term
100029f9:	83 ec 0c             	sub    esp,0xc
100029fc:	50                   	push   eax
100029fd:	e8 fc ff ff ff       	call   100029fe <firstRun(bool)+0xa9>	100029fe: R_386_PC32	setActiveTerminal(VgaText*)
10002a02:	83 c4 10             	add    esp,0x10
10002a05:	e8 fc ff ff ff       	call   10002a06 <firstRun(bool)+0xb1>	10002a06: R_386_PC32	drawBootScreen()
10002a0a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10002a11:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10002a18:	74 17                	je     10002a31 <firstRun(bool)+0xdc>
10002a1a:	83 ec 08             	sub    esp,0x8
10002a1d:	68 e1 a7 00 10       	push   0x1000a7e1	10002a1e: R_386_32	.text
10002a22:	68 00 00 00 00       	push   0x0	10002a23: R_386_32	pkeybuf
10002a27:	e8 fc ff ff ff       	call   10002a28 <firstRun(bool)+0xd3>	10002a28: R_386_PC32	strcpy
10002a2c:	83 c4 10             	add    esp,0x10
10002a2f:	eb 15                	jmp    10002a46 <firstRun(bool)+0xf1>
10002a31:	83 ec 08             	sub    esp,0x8
10002a34:	68 f2 a7 00 10       	push   0x1000a7f2	10002a35: R_386_32	.text
10002a39:	68 00 00 00 00       	push   0x0	10002a3a: R_386_32	pkeybuf
10002a3e:	e8 fc ff ff ff       	call   10002a3f <firstRun(bool)+0xea>	10002a3f: R_386_PC32	strcpy
10002a43:	83 c4 10             	add    esp,0x10
10002a46:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
10002a4c:	83 f0 01             	xor    eax,0x1
10002a4f:	84 c0                	test   al,al
10002a51:	0f 84 2c 1d 00 00    	je     10004783 <firstRun(bool)+0x1e2e>
10002a57:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10002a5e:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002a60: R_386_32	tzsel
10002a68:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002a6a: R_386_32	modesel
10002a72:	eb 01                	jmp    10002a75 <firstRun(bool)+0x120>
10002a74:	90                   	nop
10002a75:	e8 fc ff ff ff       	call   10002a76 <firstRun(bool)+0x121>	10002a76: R_386_PC32	drawBootScreen()
10002a7a:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10002a81:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002a83: R_386_32	installKey
10002a88:	83 ec 0c             	sub    esp,0xc
10002a8b:	68 03 a8 00 10       	push   0x1000a803	10002a8c: R_386_32	.text
10002a90:	6a 12                	push   0x12
10002a92:	6a 32                	push   0x32
10002a94:	6a 03                	push   0x3
10002a96:	6a 16                	push   0x16
10002a98:	e8 fc ff ff ff       	call   10002a99 <firstRun(bool)+0x144>	10002a99: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10002a9d:	83 c4 20             	add    esp,0x20
10002aa0:	a1 00 00 00 00       	mov    eax,ds:0x0	10002aa1: R_386_32	term
10002aa5:	83 ec 04             	sub    esp,0x4
10002aa8:	6a 06                	push   0x6
10002aaa:	6a 18                	push   0x18
10002aac:	50                   	push   eax
10002aad:	e8 fc ff ff ff       	call   10002aae <firstRun(bool)+0x159>	10002aae: R_386_PC32	VgaText::setCursor(int, int)
10002ab2:	83 c4 10             	add    esp,0x10
10002ab5:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ab6: R_386_32	term
10002aba:	83 ec 08             	sub    esp,0x8
10002abd:	68 10 a8 00 10       	push   0x1000a810	10002abe: R_386_32	.text
10002ac2:	50                   	push   eax
10002ac3:	e8 fc ff ff ff       	call   10002ac4 <firstRun(bool)+0x16f>	10002ac4: R_386_PC32	VgaText::puts(char const*)
10002ac8:	83 c4 10             	add    esp,0x10
10002acb:	a1 00 00 00 00       	mov    eax,ds:0x0	10002acc: R_386_32	term
10002ad0:	83 ec 04             	sub    esp,0x4
10002ad3:	6a 07                	push   0x7
10002ad5:	6a 18                	push   0x18
10002ad7:	50                   	push   eax
10002ad8:	e8 fc ff ff ff       	call   10002ad9 <firstRun(bool)+0x184>	10002ad9: R_386_PC32	VgaText::setCursor(int, int)
10002add:	83 c4 10             	add    esp,0x10
10002ae0:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ae1: R_386_32	term
10002ae5:	83 ec 08             	sub    esp,0x8
10002ae8:	68 3f a8 00 10       	push   0x1000a83f	10002ae9: R_386_32	.text
10002aed:	50                   	push   eax
10002aee:	e8 fc ff ff ff       	call   10002aef <firstRun(bool)+0x19a>	10002aef: R_386_PC32	VgaText::puts(char const*)
10002af3:	83 c4 10             	add    esp,0x10
10002af6:	a1 00 00 00 00       	mov    eax,ds:0x0	10002af7: R_386_32	term
10002afb:	83 ec 04             	sub    esp,0x4
10002afe:	6a 09                	push   0x9
10002b00:	6a 18                	push   0x18
10002b02:	50                   	push   eax
10002b03:	e8 fc ff ff ff       	call   10002b04 <firstRun(bool)+0x1af>	10002b04: R_386_PC32	VgaText::setCursor(int, int)
10002b08:	83 c4 10             	add    esp,0x10
10002b0b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b0c: R_386_32	term
10002b10:	83 ec 08             	sub    esp,0x8
10002b13:	68 4f a8 00 10       	push   0x1000a84f	10002b14: R_386_32	.text
10002b18:	50                   	push   eax
10002b19:	e8 fc ff ff ff       	call   10002b1a <firstRun(bool)+0x1c5>	10002b1a: R_386_PC32	VgaText::puts(char const*)
10002b1e:	83 c4 10             	add    esp,0x10
10002b21:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b22: R_386_32	term
10002b26:	83 ec 04             	sub    esp,0x4
10002b29:	6a 0b                	push   0xb
10002b2b:	6a 18                	push   0x18
10002b2d:	50                   	push   eax
10002b2e:	e8 fc ff ff ff       	call   10002b2f <firstRun(bool)+0x1da>	10002b2f: R_386_PC32	VgaText::setCursor(int, int)
10002b33:	83 c4 10             	add    esp,0x10
10002b36:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b37: R_386_32	term
10002b3b:	83 ec 08             	sub    esp,0x8
10002b3e:	68 54 a8 00 10       	push   0x1000a854	10002b3f: R_386_32	.text
10002b43:	50                   	push   eax
10002b44:	e8 fc ff ff ff       	call   10002b45 <firstRun(bool)+0x1f0>	10002b45: R_386_PC32	VgaText::puts(char const*)
10002b49:	83 c4 10             	add    esp,0x10
10002b4c:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b4d: R_386_32	term
10002b51:	83 ec 04             	sub    esp,0x4
10002b54:	6a 0d                	push   0xd
10002b56:	6a 18                	push   0x18
10002b58:	50                   	push   eax
10002b59:	e8 fc ff ff ff       	call   10002b5a <firstRun(bool)+0x205>	10002b5a: R_386_PC32	VgaText::setCursor(int, int)
10002b5e:	83 c4 10             	add    esp,0x10
10002b61:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b62: R_386_32	term
10002b66:	83 ec 08             	sub    esp,0x8
10002b69:	68 5c a8 00 10       	push   0x1000a85c	10002b6a: R_386_32	.text
10002b6e:	50                   	push   eax
10002b6f:	e8 fc ff ff ff       	call   10002b70 <firstRun(bool)+0x21b>	10002b70: R_386_PC32	VgaText::puts(char const*)
10002b74:	83 c4 10             	add    esp,0x10
10002b77:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b78: R_386_32	term
10002b7c:	83 ec 04             	sub    esp,0x4
10002b7f:	6a 0f                	push   0xf
10002b81:	6a 18                	push   0x18
10002b83:	50                   	push   eax
10002b84:	e8 fc ff ff ff       	call   10002b85 <firstRun(bool)+0x230>	10002b85: R_386_PC32	VgaText::setCursor(int, int)
10002b89:	83 c4 10             	add    esp,0x10
10002b8c:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b8d: R_386_32	term
10002b91:	83 ec 08             	sub    esp,0x8
10002b94:	68 65 a8 00 10       	push   0x1000a865	10002b95: R_386_32	.text
10002b99:	50                   	push   eax
10002b9a:	e8 fc ff ff ff       	call   10002b9b <firstRun(bool)+0x246>	10002b9b: R_386_PC32	VgaText::puts(char const*)
10002b9f:	83 c4 10             	add    esp,0x10
10002ba2:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ba3: R_386_32	term
10002ba7:	83 ec 04             	sub    esp,0x4
10002baa:	6a 10                	push   0x10
10002bac:	6a 18                	push   0x18
10002bae:	50                   	push   eax
10002baf:	e8 fc ff ff ff       	call   10002bb0 <firstRun(bool)+0x25b>	10002bb0: R_386_PC32	VgaText::setCursor(int, int)
10002bb4:	83 c4 10             	add    esp,0x10
10002bb7:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bb8: R_386_32	term
10002bbc:	83 ec 08             	sub    esp,0x8
10002bbf:	68 6d a8 00 10       	push   0x1000a86d	10002bc0: R_386_32	.text
10002bc4:	50                   	push   eax
10002bc5:	e8 fc ff ff ff       	call   10002bc6 <firstRun(bool)+0x271>	10002bc6: R_386_PC32	VgaText::puts(char const*)
10002bca:	83 c4 10             	add    esp,0x10
10002bcd:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bce: R_386_32	term
10002bd2:	83 ec 04             	sub    esp,0x4
10002bd5:	6a 09                	push   0x9
10002bd7:	6a 21                	push   0x21
10002bd9:	50                   	push   eax
10002bda:	e8 fc ff ff ff       	call   10002bdb <firstRun(bool)+0x286>	10002bdb: R_386_PC32	VgaText::setCursor(int, int)
10002bdf:	83 c4 10             	add    esp,0x10
10002be2:	a1 00 00 00 00       	mov    eax,ds:0x0	10002be3: R_386_32	term
10002be7:	6a 07                	push   0x7
10002be9:	6a 00                	push   0x0
10002beb:	68 78 a8 00 10       	push   0x1000a878	10002bec: R_386_32	.text
10002bf0:	50                   	push   eax
10002bf1:	e8 fc ff ff ff       	call   10002bf2 <firstRun(bool)+0x29d>	10002bf2: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002bf6:	83 c4 10             	add    esp,0x10
10002bf9:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bfa: R_386_32	term
10002bfe:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10002c02:	75 07                	jne    10002c0b <firstRun(bool)+0x2b6>
10002c04:	ba 9d a8 00 10       	mov    edx,0x1000a89d	10002c05: R_386_32	.text
10002c09:	eb 05                	jmp    10002c10 <firstRun(bool)+0x2bb>
10002c0b:	ba a0 a8 00 10       	mov    edx,0x1000a8a0	10002c0c: R_386_32	.text
10002c10:	6a 0f                	push   0xf
10002c12:	6a 00                	push   0x0
10002c14:	52                   	push   edx
10002c15:	50                   	push   eax
10002c16:	e8 fc ff ff ff       	call   10002c17 <firstRun(bool)+0x2c2>	10002c17: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c1b:	83 c4 10             	add    esp,0x10
10002c1e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c1f: R_386_32	term
10002c23:	83 ec 08             	sub    esp,0x8
10002c26:	6a 21                	push   0x21
10002c28:	50                   	push   eax
10002c29:	e8 fc ff ff ff       	call   10002c2a <firstRun(bool)+0x2d5>	10002c2a: R_386_PC32	VgaText::setCursorX(int)
10002c2e:	83 c4 10             	add    esp,0x10
10002c31:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c32: R_386_32	term
10002c36:	6a 07                	push   0x7
10002c38:	6a 00                	push   0x0
10002c3a:	68 00 00 00 00       	push   0x0	10002c3b: R_386_32	currName
10002c3f:	50                   	push   eax
10002c40:	e8 fc ff ff ff       	call   10002c41 <firstRun(bool)+0x2ec>	10002c41: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c45:	83 c4 10             	add    esp,0x10
10002c48:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c49: R_386_32	term
10002c4d:	83 ec 04             	sub    esp,0x4
10002c50:	6a 0b                	push   0xb
10002c52:	6a 21                	push   0x21
10002c54:	50                   	push   eax
10002c55:	e8 fc ff ff ff       	call   10002c56 <firstRun(bool)+0x301>	10002c56: R_386_PC32	VgaText::setCursor(int, int)
10002c5a:	83 c4 10             	add    esp,0x10
10002c5d:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c5e: R_386_32	term
10002c62:	6a 07                	push   0x7
10002c64:	6a 00                	push   0x0
10002c66:	68 78 a8 00 10       	push   0x1000a878	10002c67: R_386_32	.text
10002c6b:	50                   	push   eax
10002c6c:	e8 fc ff ff ff       	call   10002c6d <firstRun(bool)+0x318>	10002c6d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c71:	83 c4 10             	add    esp,0x10
10002c74:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c75: R_386_32	term
10002c79:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
10002c7d:	75 07                	jne    10002c86 <firstRun(bool)+0x331>
10002c7f:	ba 9d a8 00 10       	mov    edx,0x1000a89d	10002c80: R_386_32	.text
10002c84:	eb 05                	jmp    10002c8b <firstRun(bool)+0x336>
10002c86:	ba a0 a8 00 10       	mov    edx,0x1000a8a0	10002c87: R_386_32	.text
10002c8b:	6a 0f                	push   0xf
10002c8d:	6a 00                	push   0x0
10002c8f:	52                   	push   edx
10002c90:	50                   	push   eax
10002c91:	e8 fc ff ff ff       	call   10002c92 <firstRun(bool)+0x33d>	10002c92: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c96:	83 c4 10             	add    esp,0x10
10002c99:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c9a: R_386_32	term
10002c9e:	83 ec 08             	sub    esp,0x8
10002ca1:	6a 21                	push   0x21
10002ca3:	50                   	push   eax
10002ca4:	e8 fc ff ff ff       	call   10002ca5 <firstRun(bool)+0x350>	10002ca5: R_386_PC32	VgaText::setCursorX(int)
10002ca9:	83 c4 10             	add    esp,0x10
10002cac:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cad: R_386_32	term
10002cb1:	6a 07                	push   0x7
10002cb3:	6a 00                	push   0x0
10002cb5:	68 00 00 00 00       	push   0x0	10002cb6: R_386_32	currComp
10002cba:	50                   	push   eax
10002cbb:	e8 fc ff ff ff       	call   10002cbc <firstRun(bool)+0x367>	10002cbc: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002cc0:	83 c4 10             	add    esp,0x10
10002cc3:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cc4: R_386_32	term
10002cc8:	83 ec 04             	sub    esp,0x4
10002ccb:	6a 0d                	push   0xd
10002ccd:	6a 21                	push   0x21
10002ccf:	50                   	push   eax
10002cd0:	e8 fc ff ff ff       	call   10002cd1 <firstRun(bool)+0x37c>	10002cd1: R_386_PC32	VgaText::setCursor(int, int)
10002cd5:	83 c4 10             	add    esp,0x10
10002cd8:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cd9: R_386_32	term
10002cdd:	6a 07                	push   0x7
10002cdf:	6a 00                	push   0x0
10002ce1:	68 78 a8 00 10       	push   0x1000a878	10002ce2: R_386_32	.text
10002ce6:	50                   	push   eax
10002ce7:	e8 fc ff ff ff       	call   10002ce8 <firstRun(bool)+0x393>	10002ce8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002cec:	83 c4 10             	add    esp,0x10
10002cef:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cf0: R_386_32	term
10002cf4:	83 7d dc 02          	cmp    DWORD PTR [ebp-0x24],0x2
10002cf8:	75 07                	jne    10002d01 <firstRun(bool)+0x3ac>
10002cfa:	ba 9d a8 00 10       	mov    edx,0x1000a89d	10002cfb: R_386_32	.text
10002cff:	eb 05                	jmp    10002d06 <firstRun(bool)+0x3b1>
10002d01:	ba a0 a8 00 10       	mov    edx,0x1000a8a0	10002d02: R_386_32	.text
10002d06:	6a 0f                	push   0xf
10002d08:	6a 00                	push   0x0
10002d0a:	52                   	push   edx
10002d0b:	50                   	push   eax
10002d0c:	e8 fc ff ff ff       	call   10002d0d <firstRun(bool)+0x3b8>	10002d0d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d11:	83 c4 10             	add    esp,0x10
10002d14:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d15: R_386_32	term
10002d19:	83 ec 08             	sub    esp,0x8
10002d1c:	6a 21                	push   0x21
10002d1e:	50                   	push   eax
10002d1f:	e8 fc ff ff ff       	call   10002d20 <firstRun(bool)+0x3cb>	10002d20: R_386_PC32	VgaText::setCursorX(int)
10002d24:	83 c4 10             	add    esp,0x10
10002d27:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10002d2e:	83 ec 0c             	sub    esp,0xc
10002d31:	68 00 00 00 00       	push   0x0	10002d32: R_386_32	passwbufA
10002d36:	e8 fc ff ff ff       	call   10002d37 <firstRun(bool)+0x3e2>	10002d37: R_386_PC32	strlen
10002d3b:	83 c4 10             	add    esp,0x10
10002d3e:	89 c2                	mov    edx,eax
10002d40:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10002d43:	39 c2                	cmp    edx,eax
10002d45:	76 1c                	jbe    10002d63 <firstRun(bool)+0x40e>
10002d47:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d48: R_386_32	term
10002d4c:	6a 07                	push   0x7
10002d4e:	6a 00                	push   0x0
10002d50:	68 a4 a8 00 10       	push   0x1000a8a4	10002d51: R_386_32	.text
10002d55:	50                   	push   eax
10002d56:	e8 fc ff ff ff       	call   10002d57 <firstRun(bool)+0x402>	10002d57: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d5b:	83 c4 10             	add    esp,0x10
10002d5e:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10002d61:	eb cb                	jmp    10002d2e <firstRun(bool)+0x3d9>
10002d63:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d64: R_386_32	term
10002d68:	83 ec 04             	sub    esp,0x4
10002d6b:	6a 0f                	push   0xf
10002d6d:	6a 21                	push   0x21
10002d6f:	50                   	push   eax
10002d70:	e8 fc ff ff ff       	call   10002d71 <firstRun(bool)+0x41c>	10002d71: R_386_PC32	VgaText::setCursor(int, int)
10002d75:	83 c4 10             	add    esp,0x10
10002d78:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d79: R_386_32	term
10002d7d:	6a 07                	push   0x7
10002d7f:	6a 00                	push   0x0
10002d81:	68 78 a8 00 10       	push   0x1000a878	10002d82: R_386_32	.text
10002d86:	50                   	push   eax
10002d87:	e8 fc ff ff ff       	call   10002d88 <firstRun(bool)+0x433>	10002d88: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d8c:	83 c4 10             	add    esp,0x10
10002d8f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d90: R_386_32	term
10002d94:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
10002d98:	75 07                	jne    10002da1 <firstRun(bool)+0x44c>
10002d9a:	ba 9d a8 00 10       	mov    edx,0x1000a89d	10002d9b: R_386_32	.text
10002d9f:	eb 05                	jmp    10002da6 <firstRun(bool)+0x451>
10002da1:	ba a0 a8 00 10       	mov    edx,0x1000a8a0	10002da2: R_386_32	.text
10002da6:	6a 0f                	push   0xf
10002da8:	6a 00                	push   0x0
10002daa:	52                   	push   edx
10002dab:	50                   	push   eax
10002dac:	e8 fc ff ff ff       	call   10002dad <firstRun(bool)+0x458>	10002dad: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002db1:	83 c4 10             	add    esp,0x10
10002db4:	a1 00 00 00 00       	mov    eax,ds:0x0	10002db5: R_386_32	term
10002db9:	83 ec 08             	sub    esp,0x8
10002dbc:	6a 21                	push   0x21
10002dbe:	50                   	push   eax
10002dbf:	e8 fc ff ff ff       	call   10002dc0 <firstRun(bool)+0x46b>	10002dc0: R_386_PC32	VgaText::setCursorX(int)
10002dc4:	83 c4 10             	add    esp,0x10
10002dc7:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10002dce:	83 ec 0c             	sub    esp,0xc
10002dd1:	68 00 00 00 00       	push   0x0	10002dd2: R_386_32	passwbufB
10002dd6:	e8 fc ff ff ff       	call   10002dd7 <firstRun(bool)+0x482>	10002dd7: R_386_PC32	strlen
10002ddb:	83 c4 10             	add    esp,0x10
10002dde:	89 c2                	mov    edx,eax
10002de0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10002de3:	39 c2                	cmp    edx,eax
10002de5:	76 1c                	jbe    10002e03 <firstRun(bool)+0x4ae>
10002de7:	a1 00 00 00 00       	mov    eax,ds:0x0	10002de8: R_386_32	term
10002dec:	6a 07                	push   0x7
10002dee:	6a 00                	push   0x0
10002df0:	68 a4 a8 00 10       	push   0x1000a8a4	10002df1: R_386_32	.text
10002df5:	50                   	push   eax
10002df6:	e8 fc ff ff ff       	call   10002df7 <firstRun(bool)+0x4a2>	10002df7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002dfb:	83 c4 10             	add    esp,0x10
10002dfe:	ff 45 d0             	inc    DWORD PTR [ebp-0x30]
10002e01:	eb cb                	jmp    10002dce <firstRun(bool)+0x479>
10002e03:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e04: R_386_32	term
10002e08:	83 ec 04             	sub    esp,0x4
10002e0b:	6a 14                	push   0x14
10002e0d:	6a 18                	push   0x18
10002e0f:	50                   	push   eax
10002e10:	e8 fc ff ff ff       	call   10002e11 <firstRun(bool)+0x4bc>	10002e11: R_386_PC32	VgaText::setCursor(int, int)
10002e15:	83 c4 10             	add    esp,0x10
10002e18:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e19: R_386_32	term
10002e1d:	83 7d dc 04          	cmp    DWORD PTR [ebp-0x24],0x4
10002e21:	75 07                	jne    10002e2a <firstRun(bool)+0x4d5>
10002e23:	ba a6 a8 00 10       	mov    edx,0x1000a8a6	10002e24: R_386_32	.text
10002e28:	eb 05                	jmp    10002e2f <firstRun(bool)+0x4da>
10002e2a:	ba bc a8 00 10       	mov    edx,0x1000a8bc	10002e2b: R_386_32	.text
10002e2f:	6a 0f                	push   0xf
10002e31:	6a 08                	push   0x8
10002e33:	52                   	push   edx
10002e34:	50                   	push   eax
10002e35:	e8 fc ff ff ff       	call   10002e36 <firstRun(bool)+0x4e1>	10002e36: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e3a:	83 c4 10             	add    esp,0x10
10002e3d:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e3e: R_386_32	term
10002e42:	83 ec 04             	sub    esp,0x4
10002e45:	6a 14                	push   0x14
10002e47:	6a 3c                	push   0x3c
10002e49:	50                   	push   eax
10002e4a:	e8 fc ff ff ff       	call   10002e4b <firstRun(bool)+0x4f6>	10002e4b: R_386_PC32	VgaText::setCursor(int, int)
10002e4f:	83 c4 10             	add    esp,0x10
10002e52:	83 7d dc 04          	cmp    DWORD PTR [ebp-0x24],0x4
10002e56:	74 19                	je     10002e71 <firstRun(bool)+0x51c>
10002e58:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e59: R_386_32	term
10002e5d:	6a 08                	push   0x8
10002e5f:	6a 0f                	push   0xf
10002e61:	68 d3 a8 00 10       	push   0x1000a8d3	10002e62: R_386_32	.text
10002e66:	50                   	push   eax
10002e67:	e8 fc ff ff ff       	call   10002e68 <firstRun(bool)+0x513>	10002e68: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e6c:	83 c4 10             	add    esp,0x10
10002e6f:	eb 17                	jmp    10002e88 <firstRun(bool)+0x533>
10002e71:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e72: R_386_32	term
10002e76:	6a 01                	push   0x1
10002e78:	6a 0f                	push   0xf
10002e7a:	68 d3 a8 00 10       	push   0x1000a8d3	10002e7b: R_386_32	.text
10002e7f:	50                   	push   eax
10002e80:	e8 fc ff ff ff       	call   10002e81 <firstRun(bool)+0x52c>	10002e81: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e85:	83 c4 10             	add    esp,0x10
10002e88:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e89: R_386_32	term
10002e8d:	83 7d dc 04          	cmp    DWORD PTR [ebp-0x24],0x4
10002e91:	75 07                	jne    10002e9a <firstRun(bool)+0x545>
10002e93:	ba dc a8 00 10       	mov    edx,0x1000a8dc	10002e94: R_386_32	.text
10002e98:	eb 05                	jmp    10002e9f <firstRun(bool)+0x54a>
10002e9a:	ba a0 a8 00 10       	mov    edx,0x1000a8a0	10002e9b: R_386_32	.text
10002e9f:	6a 0f                	push   0xf
10002ea1:	6a 00                	push   0x0
10002ea3:	52                   	push   edx
10002ea4:	50                   	push   eax
10002ea5:	e8 fc ff ff ff       	call   10002ea6 <firstRun(bool)+0x551>	10002ea6: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002eaa:	83 c4 10             	add    esp,0x10
10002ead:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10002eb1:	75 28                	jne    10002edb <firstRun(bool)+0x586>
10002eb3:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002eb5: R_386_32	term
10002eb9:	83 ec 0c             	sub    esp,0xc
10002ebc:	68 00 00 00 00       	push   0x0	10002ebd: R_386_32	currName
10002ec1:	e8 fc ff ff ff       	call   10002ec2 <firstRun(bool)+0x56d>	10002ec2: R_386_PC32	strlen
10002ec6:	83 c4 10             	add    esp,0x10
10002ec9:	83 c0 21             	add    eax,0x21
10002ecc:	83 ec 04             	sub    esp,0x4
10002ecf:	6a 09                	push   0x9
10002ed1:	50                   	push   eax
10002ed2:	53                   	push   ebx
10002ed3:	e8 fc ff ff ff       	call   10002ed4 <firstRun(bool)+0x57f>	10002ed4: R_386_PC32	VgaText::setCursor(int, int)
10002ed8:	83 c4 10             	add    esp,0x10
10002edb:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
10002edf:	75 28                	jne    10002f09 <firstRun(bool)+0x5b4>
10002ee1:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002ee3: R_386_32	term
10002ee7:	83 ec 0c             	sub    esp,0xc
10002eea:	68 00 00 00 00       	push   0x0	10002eeb: R_386_32	currComp
10002eef:	e8 fc ff ff ff       	call   10002ef0 <firstRun(bool)+0x59b>	10002ef0: R_386_PC32	strlen
10002ef4:	83 c4 10             	add    esp,0x10
10002ef7:	83 c0 21             	add    eax,0x21
10002efa:	83 ec 04             	sub    esp,0x4
10002efd:	6a 0b                	push   0xb
10002eff:	50                   	push   eax
10002f00:	53                   	push   ebx
10002f01:	e8 fc ff ff ff       	call   10002f02 <firstRun(bool)+0x5ad>	10002f02: R_386_PC32	VgaText::setCursor(int, int)
10002f06:	83 c4 10             	add    esp,0x10
10002f09:	83 7d dc 02          	cmp    DWORD PTR [ebp-0x24],0x2
10002f0d:	75 28                	jne    10002f37 <firstRun(bool)+0x5e2>
10002f0f:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f11: R_386_32	term
10002f15:	83 ec 0c             	sub    esp,0xc
10002f18:	68 00 00 00 00       	push   0x0	10002f19: R_386_32	passwbufA
10002f1d:	e8 fc ff ff ff       	call   10002f1e <firstRun(bool)+0x5c9>	10002f1e: R_386_PC32	strlen
10002f22:	83 c4 10             	add    esp,0x10
10002f25:	83 c0 21             	add    eax,0x21
10002f28:	83 ec 04             	sub    esp,0x4
10002f2b:	6a 0d                	push   0xd
10002f2d:	50                   	push   eax
10002f2e:	53                   	push   ebx
10002f2f:	e8 fc ff ff ff       	call   10002f30 <firstRun(bool)+0x5db>	10002f30: R_386_PC32	VgaText::setCursor(int, int)
10002f34:	83 c4 10             	add    esp,0x10
10002f37:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
10002f3b:	75 28                	jne    10002f65 <firstRun(bool)+0x610>
10002f3d:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f3f: R_386_32	term
10002f43:	83 ec 0c             	sub    esp,0xc
10002f46:	68 00 00 00 00       	push   0x0	10002f47: R_386_32	passwbufB
10002f4b:	e8 fc ff ff ff       	call   10002f4c <firstRun(bool)+0x5f7>	10002f4c: R_386_PC32	strlen
10002f50:	83 c4 10             	add    esp,0x10
10002f53:	83 c0 21             	add    eax,0x21
10002f56:	83 ec 04             	sub    esp,0x4
10002f59:	6a 0f                	push   0xf
10002f5b:	50                   	push   eax
10002f5c:	53                   	push   ebx
10002f5d:	e8 fc ff ff ff       	call   10002f5e <firstRun(bool)+0x609>	10002f5e: R_386_PC32	VgaText::setCursor(int, int)
10002f62:	83 c4 10             	add    esp,0x10
10002f65:	83 7d dc 04          	cmp    DWORD PTR [ebp-0x24],0x4
10002f69:	75 15                	jne    10002f80 <firstRun(bool)+0x62b>
10002f6b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002f6c: R_386_32	term
10002f70:	83 ec 04             	sub    esp,0x4
10002f73:	6a 02                	push   0x2
10002f75:	6a 00                	push   0x0
10002f77:	50                   	push   eax
10002f78:	e8 fc ff ff ff       	call   10002f79 <firstRun(bool)+0x624>	10002f79: R_386_PC32	VgaText::setCursor(int, int)
10002f7d:	83 c4 10             	add    esp,0x10
10002f80:	a0 00 00 00 00       	mov    al,ds:0x0	10002f81: R_386_32	installKey
10002f85:	84 c0                	test   al,al
10002f87:	0f 94 c0             	sete   al
10002f8a:	84 c0                	test   al,al
10002f8c:	74 02                	je     10002f90 <firstRun(bool)+0x63b>
10002f8e:	eb f0                	jmp    10002f80 <firstRun(bool)+0x62b>
10002f90:	a1 00 00 00 00       	mov    eax,ds:0x0	10002f91: R_386_32	term
10002f95:	05 82 00 00 00       	add    eax,0x82
10002f9a:	83 ec 04             	sub    esp,0x4
10002f9d:	6a 10                	push   0x10
10002f9f:	6a 00                	push   0x0
10002fa1:	50                   	push   eax
10002fa2:	e8 fc ff ff ff       	call   10002fa3 <firstRun(bool)+0x64e>	10002fa3: R_386_PC32	memset
10002fa7:	83 c4 10             	add    esp,0x10
10002faa:	a1 00 00 00 00       	mov    eax,ds:0x0	10002fab: R_386_32	term
10002faf:	05 02 01 00 00       	add    eax,0x102
10002fb4:	83 ec 04             	sub    esp,0x4
10002fb7:	6a 10                	push   0x10
10002fb9:	6a 00                	push   0x0
10002fbb:	50                   	push   eax
10002fbc:	e8 fc ff ff ff       	call   10002fbd <firstRun(bool)+0x668>	10002fbd: R_386_PC32	memset
10002fc1:	83 c4 10             	add    esp,0x10
10002fc4:	a0 00 00 00 00       	mov    al,ds:0x0	10002fc5: R_386_32	installKey
10002fc9:	3c 09                	cmp    al,0x9
10002fcb:	74 09                	je     10002fd6 <firstRun(bool)+0x681>
10002fcd:	a0 00 00 00 00       	mov    al,ds:0x0	10002fce: R_386_32	installKey
10002fd2:	3c 0a                	cmp    al,0xa
10002fd4:	75 04                	jne    10002fda <firstRun(bool)+0x685>
10002fd6:	b0 01                	mov    al,0x1
10002fd8:	eb 02                	jmp    10002fdc <firstRun(bool)+0x687>
10002fda:	b0 00                	mov    al,0x0
10002fdc:	84 c0                	test   al,al
10002fde:	0f 84 93 00 00 00    	je     10003077 <firstRun(bool)+0x722>
10002fe4:	83 7d dc 04          	cmp    DWORD PTR [ebp-0x24],0x4
10002fe8:	75 0d                	jne    10002ff7 <firstRun(bool)+0x6a2>
10002fea:	a0 00 00 00 00       	mov    al,ds:0x0	10002feb: R_386_32	installKey
10002fef:	3c 0a                	cmp    al,0xa
10002ff1:	75 04                	jne    10002ff7 <firstRun(bool)+0x6a2>
10002ff3:	b0 01                	mov    al,0x1
10002ff5:	eb 02                	jmp    10002ff9 <firstRun(bool)+0x6a4>
10002ff7:	b0 00                	mov    al,0x0
10002ff9:	84 c0                	test   al,al
10002ffb:	74 55                	je     10003052 <firstRun(bool)+0x6fd>
10002ffd:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002fff: R_386_32	installKey
10003004:	83 ec 08             	sub    esp,0x8
10003007:	68 00 00 00 00       	push   0x0	10003008: R_386_32	passwbufB
1000300c:	68 00 00 00 00       	push   0x0	1000300d: R_386_32	passwbufA
10003011:	e8 fc ff ff ff       	call   10003012 <firstRun(bool)+0x6bd>	10003012: R_386_PC32	strcmp
10003016:	83 c4 10             	add    esp,0x10
10003019:	85 c0                	test   eax,eax
1000301b:	0f 84 c5 02 00 00    	je     100032e6 <firstRun(bool)+0x991>
10003021:	c7 45 dc 02 00 00 00 	mov    DWORD PTR [ebp-0x24],0x2
10003028:	83 ec 04             	sub    esp,0x4
1000302b:	6a 30                	push   0x30
1000302d:	6a 00                	push   0x0
1000302f:	68 00 00 00 00       	push   0x0	10003030: R_386_32	passwbufA
10003034:	e8 fc ff ff ff       	call   10003035 <firstRun(bool)+0x6e0>	10003035: R_386_PC32	memset
10003039:	83 c4 10             	add    esp,0x10
1000303c:	83 ec 04             	sub    esp,0x4
1000303f:	6a 30                	push   0x30
10003041:	6a 00                	push   0x0
10003043:	68 00 00 00 00       	push   0x0	10003044: R_386_32	passwbufB
10003048:	e8 fc ff ff ff       	call   10003049 <firstRun(bool)+0x6f4>	10003049: R_386_PC32	memset
1000304d:	83 c4 10             	add    esp,0x10
10003050:	eb 10                	jmp    10003062 <firstRun(bool)+0x70d>
10003052:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10003055:	83 7d dc 05          	cmp    DWORD PTR [ebp-0x24],0x5
10003059:	75 07                	jne    10003062 <firstRun(bool)+0x70d>
1000305b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10003062:	83 ec 0c             	sub    esp,0xc
10003065:	68 2c 01 00 00       	push   0x12c
1000306a:	e8 fc ff ff ff       	call   1000306b <firstRun(bool)+0x716>	1000306b: R_386_PC32	milliTenthSleep(unsigned int)
1000306f:	83 c4 10             	add    esp,0x10
10003072:	e9 63 02 00 00       	jmp    100032da <firstRun(bool)+0x985>
10003077:	a0 00 00 00 00       	mov    al,ds:0x0	10003078: R_386_32	installKey
1000307c:	3c 1f                	cmp    al,0x1f
1000307e:	7e 0d                	jle    1000308d <firstRun(bool)+0x738>
10003080:	a0 00 00 00 00       	mov    al,ds:0x0	10003081: R_386_32	installKey
10003085:	3c 7f                	cmp    al,0x7f
10003087:	74 04                	je     1000308d <firstRun(bool)+0x738>
10003089:	b0 01                	mov    al,0x1
1000308b:	eb 02                	jmp    1000308f <firstRun(bool)+0x73a>
1000308d:	b0 00                	mov    al,0x0
1000308f:	84 c0                	test   al,al
10003091:	0f 84 39 01 00 00    	je     100031d0 <firstRun(bool)+0x87b>
10003097:	a0 00 00 00 00       	mov    al,ds:0x0	10003098: R_386_32	installKey
1000309c:	88 85 c6 fe ff ff    	mov    BYTE PTR [ebp-0x13a],al
100030a2:	c6 85 c7 fe ff ff 00 	mov    BYTE PTR [ebp-0x139],0x0
100030a9:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100030ad:	75 7e                	jne    1000312d <firstRun(bool)+0x7d8>
100030af:	83 ec 0c             	sub    esp,0xc
100030b2:	68 00 00 00 00       	push   0x0	100030b3: R_386_32	currName
100030b7:	e8 fc ff ff ff       	call   100030b8 <firstRun(bool)+0x763>	100030b8: R_386_PC32	strlen
100030bc:	83 c4 10             	add    esp,0x10
100030bf:	83 f8 22             	cmp    eax,0x22
100030c2:	77 69                	ja     1000312d <firstRun(bool)+0x7d8>
100030c4:	a0 00 00 00 00       	mov    al,ds:0x0	100030c5: R_386_32	installKey
100030c9:	3c 40                	cmp    al,0x40
100030cb:	7e 09                	jle    100030d6 <firstRun(bool)+0x781>
100030cd:	a0 00 00 00 00       	mov    al,ds:0x0	100030ce: R_386_32	installKey
100030d2:	3c 59                	cmp    al,0x59
100030d4:	7f 36                	jg     1000310c <firstRun(bool)+0x7b7>
100030d6:	a0 00 00 00 00       	mov    al,ds:0x0	100030d7: R_386_32	installKey
100030db:	3c 60                	cmp    al,0x60
100030dd:	7e 09                	jle    100030e8 <firstRun(bool)+0x793>
100030df:	a0 00 00 00 00       	mov    al,ds:0x0	100030e0: R_386_32	installKey
100030e4:	3c 79                	cmp    al,0x79
100030e6:	7f 24                	jg     1000310c <firstRun(bool)+0x7b7>
100030e8:	a0 00 00 00 00       	mov    al,ds:0x0	100030e9: R_386_32	installKey
100030ed:	3c 2f                	cmp    al,0x2f
100030ef:	7e 09                	jle    100030fa <firstRun(bool)+0x7a5>
100030f1:	a0 00 00 00 00       	mov    al,ds:0x0	100030f2: R_386_32	installKey
100030f6:	3c 38                	cmp    al,0x38
100030f8:	7f 12                	jg     1000310c <firstRun(bool)+0x7b7>
100030fa:	a0 00 00 00 00       	mov    al,ds:0x0	100030fb: R_386_32	installKey
100030ff:	3c 5f                	cmp    al,0x5f
10003101:	74 09                	je     1000310c <firstRun(bool)+0x7b7>
10003103:	a0 00 00 00 00       	mov    al,ds:0x0	10003104: R_386_32	installKey
10003108:	3c 20                	cmp    al,0x20
1000310a:	75 04                	jne    10003110 <firstRun(bool)+0x7bb>
1000310c:	b0 01                	mov    al,0x1
1000310e:	eb 02                	jmp    10003112 <firstRun(bool)+0x7bd>
10003110:	b0 00                	mov    al,0x0
10003112:	84 c0                	test   al,al
10003114:	74 17                	je     1000312d <firstRun(bool)+0x7d8>
10003116:	83 ec 08             	sub    esp,0x8
10003119:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
1000311f:	50                   	push   eax
10003120:	68 00 00 00 00       	push   0x0	10003121: R_386_32	currName
10003125:	e8 fc ff ff ff       	call   10003126 <firstRun(bool)+0x7d1>	10003126: R_386_PC32	strcat
1000312a:	83 c4 10             	add    esp,0x10
1000312d:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
10003131:	75 2c                	jne    1000315f <firstRun(bool)+0x80a>
10003133:	83 ec 0c             	sub    esp,0xc
10003136:	68 00 00 00 00       	push   0x0	10003137: R_386_32	currComp
1000313b:	e8 fc ff ff ff       	call   1000313c <firstRun(bool)+0x7e7>	1000313c: R_386_PC32	strlen
10003140:	83 c4 10             	add    esp,0x10
10003143:	83 f8 22             	cmp    eax,0x22
10003146:	77 17                	ja     1000315f <firstRun(bool)+0x80a>
10003148:	83 ec 08             	sub    esp,0x8
1000314b:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003151:	50                   	push   eax
10003152:	68 00 00 00 00       	push   0x0	10003153: R_386_32	currComp
10003157:	e8 fc ff ff ff       	call   10003158 <firstRun(bool)+0x803>	10003158: R_386_PC32	strcat
1000315c:	83 c4 10             	add    esp,0x10
1000315f:	83 7d dc 02          	cmp    DWORD PTR [ebp-0x24],0x2
10003163:	75 2c                	jne    10003191 <firstRun(bool)+0x83c>
10003165:	83 ec 0c             	sub    esp,0xc
10003168:	68 00 00 00 00       	push   0x0	10003169: R_386_32	passwbufA
1000316d:	e8 fc ff ff ff       	call   1000316e <firstRun(bool)+0x819>	1000316e: R_386_PC32	strlen
10003172:	83 c4 10             	add    esp,0x10
10003175:	83 f8 22             	cmp    eax,0x22
10003178:	77 17                	ja     10003191 <firstRun(bool)+0x83c>
1000317a:	83 ec 08             	sub    esp,0x8
1000317d:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003183:	50                   	push   eax
10003184:	68 00 00 00 00       	push   0x0	10003185: R_386_32	passwbufA
10003189:	e8 fc ff ff ff       	call   1000318a <firstRun(bool)+0x835>	1000318a: R_386_PC32	strcat
1000318e:	83 c4 10             	add    esp,0x10
10003191:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
10003195:	0f 85 3f 01 00 00    	jne    100032da <firstRun(bool)+0x985>
1000319b:	83 ec 0c             	sub    esp,0xc
1000319e:	68 00 00 00 00       	push   0x0	1000319f: R_386_32	passwbufB
100031a3:	e8 fc ff ff ff       	call   100031a4 <firstRun(bool)+0x84f>	100031a4: R_386_PC32	strlen
100031a8:	83 c4 10             	add    esp,0x10
100031ab:	83 f8 22             	cmp    eax,0x22
100031ae:	0f 87 26 01 00 00    	ja     100032da <firstRun(bool)+0x985>
100031b4:	83 ec 08             	sub    esp,0x8
100031b7:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
100031bd:	50                   	push   eax
100031be:	68 00 00 00 00       	push   0x0	100031bf: R_386_32	passwbufB
100031c3:	e8 fc ff ff ff       	call   100031c4 <firstRun(bool)+0x86f>	100031c4: R_386_PC32	strcat
100031c8:	83 c4 10             	add    esp,0x10
100031cb:	e9 0a 01 00 00       	jmp    100032da <firstRun(bool)+0x985>
100031d0:	a0 00 00 00 00       	mov    al,ds:0x0	100031d1: R_386_32	installKey
100031d5:	3c 08                	cmp    al,0x8
100031d7:	0f 94 c0             	sete   al
100031da:	84 c0                	test   al,al
100031dc:	0f 84 ca 00 00 00    	je     100032ac <firstRun(bool)+0x957>
100031e2:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100031e6:	75 2c                	jne    10003214 <firstRun(bool)+0x8bf>
100031e8:	83 ec 0c             	sub    esp,0xc
100031eb:	68 00 00 00 00       	push   0x0	100031ec: R_386_32	currName
100031f0:	e8 fc ff ff ff       	call   100031f1 <firstRun(bool)+0x89c>	100031f1: R_386_PC32	strlen
100031f5:	83 c4 10             	add    esp,0x10
100031f8:	85 c0                	test   eax,eax
100031fa:	74 18                	je     10003214 <firstRun(bool)+0x8bf>
100031fc:	83 ec 0c             	sub    esp,0xc
100031ff:	68 00 00 00 00       	push   0x0	10003200: R_386_32	currName
10003204:	e8 fc ff ff ff       	call   10003205 <firstRun(bool)+0x8b0>	10003205: R_386_PC32	strlen
10003209:	83 c4 10             	add    esp,0x10
1000320c:	48                   	dec    eax
1000320d:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	1000320f: R_386_32	currName
10003214:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
10003218:	75 2c                	jne    10003246 <firstRun(bool)+0x8f1>
1000321a:	83 ec 0c             	sub    esp,0xc
1000321d:	68 00 00 00 00       	push   0x0	1000321e: R_386_32	currComp
10003222:	e8 fc ff ff ff       	call   10003223 <firstRun(bool)+0x8ce>	10003223: R_386_PC32	strlen
10003227:	83 c4 10             	add    esp,0x10
1000322a:	85 c0                	test   eax,eax
1000322c:	74 18                	je     10003246 <firstRun(bool)+0x8f1>
1000322e:	83 ec 0c             	sub    esp,0xc
10003231:	68 00 00 00 00       	push   0x0	10003232: R_386_32	currComp
10003236:	e8 fc ff ff ff       	call   10003237 <firstRun(bool)+0x8e2>	10003237: R_386_PC32	strlen
1000323b:	83 c4 10             	add    esp,0x10
1000323e:	48                   	dec    eax
1000323f:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003241: R_386_32	currComp
10003246:	83 7d dc 02          	cmp    DWORD PTR [ebp-0x24],0x2
1000324a:	75 2c                	jne    10003278 <firstRun(bool)+0x923>
1000324c:	83 ec 0c             	sub    esp,0xc
1000324f:	68 00 00 00 00       	push   0x0	10003250: R_386_32	passwbufA
10003254:	e8 fc ff ff ff       	call   10003255 <firstRun(bool)+0x900>	10003255: R_386_PC32	strlen
10003259:	83 c4 10             	add    esp,0x10
1000325c:	85 c0                	test   eax,eax
1000325e:	74 18                	je     10003278 <firstRun(bool)+0x923>
10003260:	83 ec 0c             	sub    esp,0xc
10003263:	68 00 00 00 00       	push   0x0	10003264: R_386_32	passwbufA
10003268:	e8 fc ff ff ff       	call   10003269 <firstRun(bool)+0x914>	10003269: R_386_PC32	strlen
1000326d:	83 c4 10             	add    esp,0x10
10003270:	48                   	dec    eax
10003271:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003273: R_386_32	passwbufA
10003278:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
1000327c:	75 5c                	jne    100032da <firstRun(bool)+0x985>
1000327e:	83 ec 0c             	sub    esp,0xc
10003281:	68 00 00 00 00       	push   0x0	10003282: R_386_32	passwbufB
10003286:	e8 fc ff ff ff       	call   10003287 <firstRun(bool)+0x932>	10003287: R_386_PC32	strlen
1000328b:	83 c4 10             	add    esp,0x10
1000328e:	85 c0                	test   eax,eax
10003290:	74 48                	je     100032da <firstRun(bool)+0x985>
10003292:	83 ec 0c             	sub    esp,0xc
10003295:	68 00 00 00 00       	push   0x0	10003296: R_386_32	passwbufB
1000329a:	e8 fc ff ff ff       	call   1000329b <firstRun(bool)+0x946>	1000329b: R_386_PC32	strlen
1000329f:	83 c4 10             	add    esp,0x10
100032a2:	48                   	dec    eax
100032a3:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	100032a5: R_386_32	passwbufB
100032aa:	eb 2e                	jmp    100032da <firstRun(bool)+0x985>
100032ac:	a0 00 00 00 00       	mov    al,ds:0x0	100032ad: R_386_32	installKey
100032b1:	3c 7f                	cmp    al,0x7f
100032b3:	0f 94 c0             	sete   al
100032b6:	84 c0                	test   al,al
100032b8:	74 20                	je     100032da <firstRun(bool)+0x985>
100032ba:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
100032bd:	83 7d dc ff          	cmp    DWORD PTR [ebp-0x24],0xffffffff
100032c1:	75 07                	jne    100032ca <firstRun(bool)+0x975>
100032c3:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100032ca:	83 ec 0c             	sub    esp,0xc
100032cd:	68 2c 01 00 00       	push   0x12c
100032d2:	e8 fc ff ff ff       	call   100032d3 <firstRun(bool)+0x97e>	100032d3: R_386_PC32	milliTenthSleep(unsigned int)
100032d7:	83 c4 10             	add    esp,0x10
100032da:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100032dc: R_386_32	installKey
100032e1:	e9 e7 f8 ff ff       	jmp    10002bcd <firstRun(bool)+0x278>
100032e6:	90                   	nop
100032e7:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100032e9: R_386_32	installKey
100032ee:	83 ec 0c             	sub    esp,0xc
100032f1:	68 d0 07 00 00       	push   0x7d0
100032f6:	e8 fc ff ff ff       	call   100032f7 <firstRun(bool)+0x9a2>	100032f7: R_386_PC32	milliTenthSleep(unsigned int)
100032fb:	83 c4 10             	add    esp,0x10
100032fe:	e8 fc ff ff ff       	call   100032ff <firstRun(bool)+0x9aa>	100032ff: R_386_PC32	drawBootScreen()
10003303:	c7 45 e0 07 00 00 00 	mov    DWORD PTR [ebp-0x20],0x7
1000330a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000330b: R_386_32	Krnl::computer
1000330f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
10003315:	83 e0 20             	and    eax,0x20
10003318:	84 c0                	test   al,al
1000331a:	75 12                	jne    1000332e <firstRun(bool)+0x9d9>
1000331c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000331d: R_386_32	Krnl::computer
10003321:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
10003327:	83 e0 40             	and    eax,0x40
1000332a:	84 c0                	test   al,al
1000332c:	74 07                	je     10003335 <firstRun(bool)+0x9e0>
1000332e:	c7 45 e0 08 00 00 00 	mov    DWORD PTR [ebp-0x20],0x8
10003335:	a1 00 00 00 00       	mov    eax,ds:0x0	10003336: R_386_32	Krnl::computer
1000333a:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
10003340:	83 e0 80             	and    eax,0xffffff80
10003343:	84 c0                	test   al,al
10003345:	74 07                	je     1000334e <firstRun(bool)+0x9f9>
10003347:	c7 45 e0 09 00 00 00 	mov    DWORD PTR [ebp-0x20],0x9
1000334e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000334f: R_386_32	Krnl::computer
10003353:	8a 80 6e 01 00 00    	mov    al,BYTE PTR [eax+0x16e]
10003359:	83 e0 02             	and    eax,0x2
1000335c:	84 c0                	test   al,al
1000335e:	75 12                	jne    10003372 <firstRun(bool)+0xa1d>
10003360:	a1 00 00 00 00       	mov    eax,ds:0x0	10003361: R_386_32	Krnl::computer
10003365:	8a 80 6d 01 00 00    	mov    al,BYTE PTR [eax+0x16d]
1000336b:	83 e0 01             	and    eax,0x1
1000336e:	84 c0                	test   al,al
10003370:	74 07                	je     10003379 <firstRun(bool)+0xa24>
10003372:	c7 45 e0 0a 00 00 00 	mov    DWORD PTR [ebp-0x20],0xa
10003379:	a1 00 00 00 00       	mov    eax,ds:0x0	1000337a: R_386_32	Krnl::computer
1000337e:	8a 80 6d 01 00 00    	mov    al,BYTE PTR [eax+0x16d]
10003384:	83 e0 20             	and    eax,0x20
10003387:	84 c0                	test   al,al
10003389:	74 07                	je     10003392 <firstRun(bool)+0xa3d>
1000338b:	c7 45 e0 0b 00 00 00 	mov    DWORD PTR [ebp-0x20],0xb
10003392:	a1 00 00 00 00       	mov    eax,ds:0x0	10003393: R_386_32	Krnl::computer
10003397:	8a 80 6d 01 00 00    	mov    al,BYTE PTR [eax+0x16d]
1000339d:	83 e0 40             	and    eax,0x40
100033a0:	84 c0                	test   al,al
100033a2:	74 07                	je     100033ab <firstRun(bool)+0xa56>
100033a4:	c7 45 e0 0c 00 00 00 	mov    DWORD PTR [ebp-0x20],0xc
100033ab:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100033ad: R_386_32	_bcrypt_errno
100033b5:	83 ec 08             	sub    esp,0x8
100033b8:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
100033be:	50                   	push   eax
100033bf:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100033c2:	e8 fc ff ff ff       	call   100033c3 <firstRun(bool)+0xa6e>	100033c3: R_386_PC32	bcrypt_gensalt
100033c7:	83 c4 10             	add    esp,0x10
100033ca:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100033cd:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100033d1:	75 09                	jne    100033dc <firstRun(bool)+0xa87>
100033d3:	a1 00 00 00 00       	mov    eax,ds:0x0	100033d4: R_386_32	_bcrypt_errno
100033d8:	85 c0                	test   eax,eax
100033da:	74 5e                	je     1000343a <firstRun(bool)+0xae5>
100033dc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100033e3:	83 ec 08             	sub    esp,0x8
100033e6:	68 e0 a8 00 10       	push   0x1000a8e0	100033e7: R_386_32	.text
100033eb:	68 00 00 00 00       	push   0x0	100033ec: R_386_32	currName
100033f0:	e8 fc ff ff ff       	call   100033f1 <firstRun(bool)+0xa9c>	100033f1: R_386_PC32	strcpy
100033f5:	83 c4 10             	add    esp,0x10
100033f8:	83 ec 08             	sub    esp,0x8
100033fb:	68 ef a8 00 10       	push   0x1000a8ef	100033fc: R_386_32	.text
10003400:	68 00 00 00 00       	push   0x0	10003401: R_386_32	currComp
10003405:	e8 fc ff ff ff       	call   10003406 <firstRun(bool)+0xab1>	10003406: R_386_PC32	strcpy
1000340a:	83 c4 10             	add    esp,0x10
1000340d:	83 ec 04             	sub    esp,0x4
10003410:	6a 50                	push   0x50
10003412:	6a 00                	push   0x0
10003414:	68 00 00 00 00       	push   0x0	10003415: R_386_32	passwbufA
10003419:	e8 fc ff ff ff       	call   1000341a <firstRun(bool)+0xac5>	1000341a: R_386_PC32	memset
1000341e:	83 c4 10             	add    esp,0x10
10003421:	83 ec 04             	sub    esp,0x4
10003424:	6a 50                	push   0x50
10003426:	6a 00                	push   0x0
10003428:	68 00 00 00 00       	push   0x0	10003429: R_386_32	passwbufB
1000342d:	e8 fc ff ff ff       	call   1000342e <firstRun(bool)+0xad9>	1000342e: R_386_PC32	memset
10003432:	83 c4 10             	add    esp,0x10
10003435:	e9 3b f6 ff ff       	jmp    10002a75 <firstRun(bool)+0x120>
1000343a:	83 ec 08             	sub    esp,0x8
1000343d:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10003443:	50                   	push   eax
10003444:	68 00 00 00 00       	push   0x0	10003445: R_386_32	passwsalt
10003449:	e8 fc ff ff ff       	call   1000344a <firstRun(bool)+0xaf5>	1000344a: R_386_PC32	strcpy
1000344e:	83 c4 10             	add    esp,0x10
10003451:	83 ec 04             	sub    esp,0x4
10003454:	68 00 00 00 00       	push   0x0	10003455: R_386_32	passwhash
10003459:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
1000345f:	50                   	push   eax
10003460:	68 00 00 00 00       	push   0x0	10003461: R_386_32	passwbufA
10003465:	e8 fc ff ff ff       	call   10003466 <firstRun(bool)+0xb11>	10003466: R_386_PC32	bcrypt_hashpw
1000346a:	83 c4 10             	add    esp,0x10
1000346d:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10003470:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10003474:	75 09                	jne    1000347f <firstRun(bool)+0xb2a>
10003476:	a1 00 00 00 00       	mov    eax,ds:0x0	10003477: R_386_32	_bcrypt_errno
1000347b:	85 c0                	test   eax,eax
1000347d:	74 5e                	je     100034dd <firstRun(bool)+0xb88>
1000347f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10003486:	83 ec 08             	sub    esp,0x8
10003489:	68 e0 a8 00 10       	push   0x1000a8e0	1000348a: R_386_32	.text
1000348e:	68 00 00 00 00       	push   0x0	1000348f: R_386_32	currName
10003493:	e8 fc ff ff ff       	call   10003494 <firstRun(bool)+0xb3f>	10003494: R_386_PC32	strcpy
10003498:	83 c4 10             	add    esp,0x10
1000349b:	83 ec 08             	sub    esp,0x8
1000349e:	68 01 a9 00 10       	push   0x1000a901	1000349f: R_386_32	.text
100034a3:	68 00 00 00 00       	push   0x0	100034a4: R_386_32	currComp
100034a8:	e8 fc ff ff ff       	call   100034a9 <firstRun(bool)+0xb54>	100034a9: R_386_PC32	strcpy
100034ad:	83 c4 10             	add    esp,0x10
100034b0:	83 ec 04             	sub    esp,0x4
100034b3:	6a 50                	push   0x50
100034b5:	6a 00                	push   0x0
100034b7:	68 00 00 00 00       	push   0x0	100034b8: R_386_32	passwbufA
100034bc:	e8 fc ff ff ff       	call   100034bd <firstRun(bool)+0xb68>	100034bd: R_386_PC32	memset
100034c1:	83 c4 10             	add    esp,0x10
100034c4:	83 ec 04             	sub    esp,0x4
100034c7:	6a 50                	push   0x50
100034c9:	6a 00                	push   0x0
100034cb:	68 00 00 00 00       	push   0x0	100034cc: R_386_32	passwbufB
100034d0:	e8 fc ff ff ff       	call   100034d1 <firstRun(bool)+0xb7c>	100034d1: R_386_PC32	memset
100034d5:	83 c4 10             	add    esp,0x10
100034d8:	e9 98 f5 ff ff       	jmp    10002a75 <firstRun(bool)+0x120>
100034dd:	83 ec 04             	sub    esp,0x4
100034e0:	6a 50                	push   0x50
100034e2:	6a 00                	push   0x0
100034e4:	68 00 00 00 00       	push   0x0	100034e5: R_386_32	passwbufA
100034e9:	e8 fc ff ff ff       	call   100034ea <firstRun(bool)+0xb95>	100034ea: R_386_PC32	memset
100034ee:	83 c4 10             	add    esp,0x10
100034f1:	83 ec 04             	sub    esp,0x4
100034f4:	6a 50                	push   0x50
100034f6:	6a 00                	push   0x0
100034f8:	68 00 00 00 00       	push   0x0	100034f9: R_386_32	passwbufB
100034fd:	e8 fc ff ff ff       	call   100034fe <firstRun(bool)+0xba9>	100034fe: R_386_PC32	memset
10003502:	83 c4 10             	add    esp,0x10
10003505:	83 ec 0c             	sub    esp,0xc
10003508:	68 d0 07 00 00       	push   0x7d0
1000350d:	e8 fc ff ff ff       	call   1000350e <firstRun(bool)+0xbb9>	1000350e: R_386_PC32	milliTenthSleep(unsigned int)
10003512:	83 c4 10             	add    esp,0x10
10003515:	eb 01                	jmp    10003518 <firstRun(bool)+0xbc3>
10003517:	90                   	nop
10003518:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000351a: R_386_32	installKey
1000351f:	e8 fc ff ff ff       	call   10003520 <firstRun(bool)+0xbcb>	10003520: R_386_PC32	drawBootScreen()
10003524:	83 ec 0c             	sub    esp,0xc
10003527:	68 13 a9 00 10       	push   0x1000a913	10003528: R_386_32	.text
1000352c:	6a 0d                	push   0xd
1000352e:	6a 32                	push   0x32
10003530:	6a 02                	push   0x2
10003532:	6a 16                	push   0x16
10003534:	e8 fc ff ff ff       	call   10003535 <firstRun(bool)+0xbe0>	10003535: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003539:	83 c4 20             	add    esp,0x20
1000353c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000353d: R_386_32	Krnl::computer
10003541:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
10003547:	a1 00 00 00 00       	mov    eax,ds:0x0	10003548: R_386_32	Krnl::computer
1000354c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10003552:	8b 00                	mov    eax,DWORD PTR [eax]
10003554:	83 c0 28             	add    eax,0x28
10003557:	8b 00                	mov    eax,DWORD PTR [eax]
10003559:	8d 95 98 fe ff ff    	lea    edx,[ebp-0x168]
1000355f:	83 ec 08             	sub    esp,0x8
10003562:	51                   	push   ecx
10003563:	52                   	push   edx
10003564:	ff d0                	call   eax
10003566:	83 c4 0c             	add    esp,0xc
10003569:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [ebp-0x168]
1000356f:	8b 95 9c fe ff ff    	mov    edx,DWORD PTR [ebp-0x164]
10003575:	89 85 d4 fe ff ff    	mov    DWORD PTR [ebp-0x12c],eax
1000357b:	89 95 d8 fe ff ff    	mov    DWORD PTR [ebp-0x128],edx
10003581:	83 ec 08             	sub    esp,0x8
10003584:	68 21 a9 00 10       	push   0x1000a921	10003585: R_386_32	.text
10003589:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
1000358f:	50                   	push   eax
10003590:	e8 fc ff ff ff       	call   10003591 <firstRun(bool)+0xc3c>	10003591: R_386_PC32	strcpy
10003595:	83 c4 10             	add    esp,0x10
10003598:	8a 85 d4 fe ff ff    	mov    al,BYTE PTR [ebp-0x12c]
1000359e:	0f b6 d0             	movzx  edx,al
100035a1:	89 d0                	mov    eax,edx
100035a3:	c1 e0 02             	shl    eax,0x2
100035a6:	01 d0                	add    eax,edx
100035a8:	c1 e0 03             	shl    eax,0x3
100035ab:	01 d0                	add    eax,edx
100035ad:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100035b4:	01 d0                	add    eax,edx
100035b6:	66 c1 e8 08          	shr    ax,0x8
100035ba:	c0 e8 03             	shr    al,0x3
100035bd:	83 c0 30             	add    eax,0x30
100035c0:	88 85 40 ff ff ff    	mov    BYTE PTR [ebp-0xc0],al
100035c6:	8a 8d d4 fe ff ff    	mov    cl,BYTE PTR [ebp-0x12c]
100035cc:	0f b6 d1             	movzx  edx,cl
100035cf:	89 d0                	mov    eax,edx
100035d1:	c1 e0 02             	shl    eax,0x2
100035d4:	01 d0                	add    eax,edx
100035d6:	c1 e0 03             	shl    eax,0x3
100035d9:	01 d0                	add    eax,edx
100035db:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100035e2:	01 d0                	add    eax,edx
100035e4:	66 c1 e8 08          	shr    ax,0x8
100035e8:	88 c2                	mov    dl,al
100035ea:	c0 ea 03             	shr    dl,0x3
100035ed:	88 d0                	mov    al,dl
100035ef:	c1 e0 02             	shl    eax,0x2
100035f2:	01 d0                	add    eax,edx
100035f4:	d1 e0                	shl    eax,1
100035f6:	29 c1                	sub    ecx,eax
100035f8:	88 ca                	mov    dl,cl
100035fa:	8d 42 30             	lea    eax,[edx+0x30]
100035fd:	88 85 41 ff ff ff    	mov    BYTE PTR [ebp-0xbf],al
10003603:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
10003609:	0f b6 c8             	movzx  ecx,al
1000360c:	b8 67 66 66 66       	mov    eax,0x66666667
10003611:	f7 e9                	imul   ecx
10003613:	c1 fa 02             	sar    edx,0x2
10003616:	89 c8                	mov    eax,ecx
10003618:	c1 f8 1f             	sar    eax,0x1f
1000361b:	29 c2                	sub    edx,eax
1000361d:	89 d0                	mov    eax,edx
1000361f:	83 c0 30             	add    eax,0x30
10003622:	88 85 43 ff ff ff    	mov    BYTE PTR [ebp-0xbd],al
10003628:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
1000362e:	0f b6 c8             	movzx  ecx,al
10003631:	b8 67 66 66 66       	mov    eax,0x66666667
10003636:	f7 e9                	imul   ecx
10003638:	c1 fa 02             	sar    edx,0x2
1000363b:	89 c8                	mov    eax,ecx
1000363d:	c1 f8 1f             	sar    eax,0x1f
10003640:	29 c2                	sub    edx,eax
10003642:	89 d0                	mov    eax,edx
10003644:	c1 e0 02             	shl    eax,0x2
10003647:	01 d0                	add    eax,edx
10003649:	01 c0                	add    eax,eax
1000364b:	29 c1                	sub    ecx,eax
1000364d:	89 ca                	mov    edx,ecx
1000364f:	88 d0                	mov    al,dl
10003651:	83 c0 30             	add    eax,0x30
10003654:	88 85 44 ff ff ff    	mov    BYTE PTR [ebp-0xbc],al
1000365a:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003661:	0f b7 c8             	movzx  ecx,ax
10003664:	b8 d3 4d 62 10       	mov    eax,0x10624dd3
10003669:	f7 e9                	imul   ecx
1000366b:	c1 fa 06             	sar    edx,0x6
1000366e:	89 c8                	mov    eax,ecx
10003670:	c1 f8 1f             	sar    eax,0x1f
10003673:	29 c2                	sub    edx,eax
10003675:	89 d0                	mov    eax,edx
10003677:	b9 0a 00 00 00       	mov    ecx,0xa
1000367c:	99                   	cdq    
1000367d:	f7 f9                	idiv   ecx
1000367f:	89 d0                	mov    eax,edx
10003681:	83 c0 30             	add    eax,0x30
10003684:	88 85 46 ff ff ff    	mov    BYTE PTR [ebp-0xba],al
1000368a:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003691:	0f b7 c8             	movzx  ecx,ax
10003694:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10003699:	f7 e9                	imul   ecx
1000369b:	c1 fa 05             	sar    edx,0x5
1000369e:	89 c8                	mov    eax,ecx
100036a0:	c1 f8 1f             	sar    eax,0x1f
100036a3:	29 c2                	sub    edx,eax
100036a5:	89 d0                	mov    eax,edx
100036a7:	b9 0a 00 00 00       	mov    ecx,0xa
100036ac:	99                   	cdq    
100036ad:	f7 f9                	idiv   ecx
100036af:	89 d0                	mov    eax,edx
100036b1:	83 c0 30             	add    eax,0x30
100036b4:	88 85 47 ff ff ff    	mov    BYTE PTR [ebp-0xb9],al
100036ba:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
100036c1:	0f b7 c8             	movzx  ecx,ax
100036c4:	b8 67 66 66 66       	mov    eax,0x66666667
100036c9:	f7 e9                	imul   ecx
100036cb:	c1 fa 02             	sar    edx,0x2
100036ce:	89 c8                	mov    eax,ecx
100036d0:	c1 f8 1f             	sar    eax,0x1f
100036d3:	89 d1                	mov    ecx,edx
100036d5:	29 c1                	sub    ecx,eax
100036d7:	b8 67 66 66 66       	mov    eax,0x66666667
100036dc:	f7 e9                	imul   ecx
100036de:	c1 fa 02             	sar    edx,0x2
100036e1:	89 c8                	mov    eax,ecx
100036e3:	c1 f8 1f             	sar    eax,0x1f
100036e6:	29 c2                	sub    edx,eax
100036e8:	89 d0                	mov    eax,edx
100036ea:	c1 e0 02             	shl    eax,0x2
100036ed:	01 d0                	add    eax,edx
100036ef:	01 c0                	add    eax,eax
100036f1:	29 c1                	sub    ecx,eax
100036f3:	89 ca                	mov    edx,ecx
100036f5:	88 d0                	mov    al,dl
100036f7:	83 c0 30             	add    eax,0x30
100036fa:	88 85 48 ff ff ff    	mov    BYTE PTR [ebp-0xb8],al
10003700:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003707:	0f b7 c0             	movzx  eax,ax
1000370a:	b9 0a 00 00 00       	mov    ecx,0xa
1000370f:	99                   	cdq    
10003710:	f7 f9                	idiv   ecx
10003712:	89 d0                	mov    eax,edx
10003714:	83 c0 30             	add    eax,0x30
10003717:	88 85 49 ff ff ff    	mov    BYTE PTR [ebp-0xb7],al
1000371d:	8a 85 d8 fe ff ff    	mov    al,BYTE PTR [ebp-0x128]
10003723:	0f b6 d0             	movzx  edx,al
10003726:	89 d0                	mov    eax,edx
10003728:	c1 e0 02             	shl    eax,0x2
1000372b:	01 d0                	add    eax,edx
1000372d:	c1 e0 03             	shl    eax,0x3
10003730:	01 d0                	add    eax,edx
10003732:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003739:	01 d0                	add    eax,edx
1000373b:	66 c1 e8 08          	shr    ax,0x8
1000373f:	c0 e8 03             	shr    al,0x3
10003742:	83 c0 30             	add    eax,0x30
10003745:	88 85 4b ff ff ff    	mov    BYTE PTR [ebp-0xb5],al
1000374b:	8a 8d d8 fe ff ff    	mov    cl,BYTE PTR [ebp-0x128]
10003751:	0f b6 d1             	movzx  edx,cl
10003754:	89 d0                	mov    eax,edx
10003756:	c1 e0 02             	shl    eax,0x2
10003759:	01 d0                	add    eax,edx
1000375b:	c1 e0 03             	shl    eax,0x3
1000375e:	01 d0                	add    eax,edx
10003760:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003767:	01 d0                	add    eax,edx
10003769:	66 c1 e8 08          	shr    ax,0x8
1000376d:	88 c2                	mov    dl,al
1000376f:	c0 ea 03             	shr    dl,0x3
10003772:	88 d0                	mov    al,dl
10003774:	c1 e0 02             	shl    eax,0x2
10003777:	01 d0                	add    eax,edx
10003779:	d1 e0                	shl    eax,1
1000377b:	29 c1                	sub    ecx,eax
1000377d:	88 ca                	mov    dl,cl
1000377f:	8d 42 30             	lea    eax,[edx+0x30]
10003782:	88 85 4c ff ff ff    	mov    BYTE PTR [ebp-0xb4],al
10003788:	8a 85 d9 fe ff ff    	mov    al,BYTE PTR [ebp-0x127]
1000378e:	0f b6 d0             	movzx  edx,al
10003791:	89 d0                	mov    eax,edx
10003793:	c1 e0 02             	shl    eax,0x2
10003796:	01 d0                	add    eax,edx
10003798:	c1 e0 03             	shl    eax,0x3
1000379b:	01 d0                	add    eax,edx
1000379d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100037a4:	01 d0                	add    eax,edx
100037a6:	66 c1 e8 08          	shr    ax,0x8
100037aa:	c0 e8 03             	shr    al,0x3
100037ad:	83 c0 30             	add    eax,0x30
100037b0:	88 85 4e ff ff ff    	mov    BYTE PTR [ebp-0xb2],al
100037b6:	8a 8d d9 fe ff ff    	mov    cl,BYTE PTR [ebp-0x127]
100037bc:	0f b6 d1             	movzx  edx,cl
100037bf:	89 d0                	mov    eax,edx
100037c1:	c1 e0 02             	shl    eax,0x2
100037c4:	01 d0                	add    eax,edx
100037c6:	c1 e0 03             	shl    eax,0x3
100037c9:	01 d0                	add    eax,edx
100037cb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100037d2:	01 d0                	add    eax,edx
100037d4:	66 c1 e8 08          	shr    ax,0x8
100037d8:	88 c2                	mov    dl,al
100037da:	c0 ea 03             	shr    dl,0x3
100037dd:	88 d0                	mov    al,dl
100037df:	c1 e0 02             	shl    eax,0x2
100037e2:	01 d0                	add    eax,edx
100037e4:	d1 e0                	shl    eax,1
100037e6:	29 c1                	sub    ecx,eax
100037e8:	88 ca                	mov    dl,cl
100037ea:	8d 42 30             	lea    eax,[edx+0x30]
100037ed:	88 85 4f ff ff ff    	mov    BYTE PTR [ebp-0xb1],al
100037f3:	8a 85 da fe ff ff    	mov    al,BYTE PTR [ebp-0x126]
100037f9:	0f b6 d0             	movzx  edx,al
100037fc:	89 d0                	mov    eax,edx
100037fe:	c1 e0 02             	shl    eax,0x2
10003801:	01 d0                	add    eax,edx
10003803:	c1 e0 03             	shl    eax,0x3
10003806:	01 d0                	add    eax,edx
10003808:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000380f:	01 d0                	add    eax,edx
10003811:	66 c1 e8 08          	shr    ax,0x8
10003815:	c0 e8 03             	shr    al,0x3
10003818:	83 c0 30             	add    eax,0x30
1000381b:	88 85 51 ff ff ff    	mov    BYTE PTR [ebp-0xaf],al
10003821:	8a 8d da fe ff ff    	mov    cl,BYTE PTR [ebp-0x126]
10003827:	0f b6 d1             	movzx  edx,cl
1000382a:	89 d0                	mov    eax,edx
1000382c:	c1 e0 02             	shl    eax,0x2
1000382f:	01 d0                	add    eax,edx
10003831:	c1 e0 03             	shl    eax,0x3
10003834:	01 d0                	add    eax,edx
10003836:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000383d:	01 d0                	add    eax,edx
1000383f:	66 c1 e8 08          	shr    ax,0x8
10003843:	88 c2                	mov    dl,al
10003845:	c0 ea 03             	shr    dl,0x3
10003848:	88 d0                	mov    al,dl
1000384a:	c1 e0 02             	shl    eax,0x2
1000384d:	01 d0                	add    eax,edx
1000384f:	d1 e0                	shl    eax,1
10003851:	29 c1                	sub    ecx,eax
10003853:	88 ca                	mov    dl,cl
10003855:	8d 42 30             	lea    eax,[edx+0x30]
10003858:	88 85 52 ff ff ff    	mov    BYTE PTR [ebp-0xae],al
1000385e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003865:	a1 00 00 00 00       	mov    eax,ds:0x0	10003866: R_386_32	term
1000386a:	83 ec 04             	sub    esp,0x4
1000386d:	6a 05                	push   0x5
1000386f:	6a 18                	push   0x18
10003871:	50                   	push   eax
10003872:	e8 fc ff ff ff       	call   10003873 <firstRun(bool)+0xf1e>	10003873: R_386_PC32	VgaText::setCursor(int, int)
10003877:	83 c4 10             	add    esp,0x10
1000387a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000387b: R_386_32	term
1000387f:	83 ec 08             	sub    esp,0x8
10003882:	68 38 a9 00 10       	push   0x1000a938	10003883: R_386_32	.text
10003887:	50                   	push   eax
10003888:	e8 fc ff ff ff       	call   10003889 <firstRun(bool)+0xf34>	10003889: R_386_PC32	VgaText::puts(char const*)
1000388d:	83 c4 10             	add    esp,0x10
10003890:	a1 00 00 00 00       	mov    eax,ds:0x0	10003891: R_386_32	term
10003895:	83 ec 04             	sub    esp,0x4
10003898:	6a 06                	push   0x6
1000389a:	6a 18                	push   0x18
1000389c:	50                   	push   eax
1000389d:	e8 fc ff ff ff       	call   1000389e <firstRun(bool)+0xf49>	1000389e: R_386_PC32	VgaText::setCursor(int, int)
100038a2:	83 c4 10             	add    esp,0x10
100038a5:	a1 00 00 00 00       	mov    eax,ds:0x0	100038a6: R_386_32	term
100038aa:	83 ec 08             	sub    esp,0x8
100038ad:	68 60 a9 00 10       	push   0x1000a960	100038ae: R_386_32	.text
100038b2:	50                   	push   eax
100038b3:	e8 fc ff ff ff       	call   100038b4 <firstRun(bool)+0xf5f>	100038b4: R_386_PC32	VgaText::puts(char const*)
100038b8:	83 c4 10             	add    esp,0x10
100038bb:	a1 00 00 00 00       	mov    eax,ds:0x0	100038bc: R_386_32	term
100038c0:	83 ec 04             	sub    esp,0x4
100038c3:	6a 09                	push   0x9
100038c5:	6a 1a                	push   0x1a
100038c7:	50                   	push   eax
100038c8:	e8 fc ff ff ff       	call   100038c9 <firstRun(bool)+0xf74>	100038c9: R_386_PC32	VgaText::setCursor(int, int)
100038cd:	83 c4 10             	add    esp,0x10
100038d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100038d1: R_386_32	term
100038d5:	6a 0f                	push   0xf
100038d7:	6a 07                	push   0x7
100038d9:	68 76 a9 00 10       	push   0x1000a976	100038da: R_386_32	.text
100038de:	50                   	push   eax
100038df:	e8 fc ff ff ff       	call   100038e0 <firstRun(bool)+0xf8b>	100038e0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100038e4:	83 c4 10             	add    esp,0x10
100038e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100038e8: R_386_32	term
100038ec:	83 ec 04             	sub    esp,0x4
100038ef:	6a 18                	push   0x18
100038f1:	6a 11                	push   0x11
100038f3:	50                   	push   eax
100038f4:	e8 fc ff ff ff       	call   100038f5 <firstRun(bool)+0xfa0>	100038f5: R_386_PC32	VgaText::setCursor(int, int)
100038f9:	83 c4 10             	add    esp,0x10
100038fc:	a1 00 00 00 00       	mov    eax,ds:0x0	100038fd: R_386_32	term
10003901:	6a 0b                	push   0xb
10003903:	6a 03                	push   0x3
10003905:	68 8a a9 00 10       	push   0x1000a98a	10003906: R_386_32	.text
1000390a:	50                   	push   eax
1000390b:	e8 fc ff ff ff       	call   1000390c <firstRun(bool)+0xfb7>	1000390c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003910:	83 c4 10             	add    esp,0x10
10003913:	a1 00 00 00 00       	mov    eax,ds:0x0	10003914: R_386_32	term
10003918:	83 ec 04             	sub    esp,0x4
1000391b:	6a 08                	push   0x8
1000391d:	6a 1a                	push   0x1a
1000391f:	50                   	push   eax
10003920:	e8 fc ff ff ff       	call   10003921 <firstRun(bool)+0xfcc>	10003921: R_386_PC32	VgaText::setCursor(int, int)
10003925:	83 c4 10             	add    esp,0x10
10003928:	a1 00 00 00 00       	mov    eax,ds:0x0	10003929: R_386_32	term
1000392d:	83 ec 08             	sub    esp,0x8
10003930:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003936:	52                   	push   edx
10003937:	50                   	push   eax
10003938:	e8 fc ff ff ff       	call   10003939 <firstRun(bool)+0xfe4>	10003939: R_386_PC32	VgaText::puts(char const*)
1000393d:	83 c4 10             	add    esp,0x10
10003940:	a1 00 00 00 00       	mov    eax,ds:0x0	10003941: R_386_32	term
10003945:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003948:	83 c2 1a             	add    edx,0x1a
1000394b:	83 ec 04             	sub    esp,0x4
1000394e:	6a 08                	push   0x8
10003950:	52                   	push   edx
10003951:	50                   	push   eax
10003952:	e8 fc ff ff ff       	call   10003953 <firstRun(bool)+0xffe>	10003953: R_386_PC32	VgaText::setCursor(int, int)
10003957:	83 c4 10             	add    esp,0x10
1000395a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000395b: R_386_32	term
1000395f:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003965:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003968:	01 ca                	add    edx,ecx
1000396a:	8a 12                	mov    dl,BYTE PTR [edx]
1000396c:	0f be d2             	movsx  edx,dl
1000396f:	6a 00                	push   0x0
10003971:	6a 0f                	push   0xf
10003973:	52                   	push   edx
10003974:	50                   	push   eax
10003975:	e8 fc ff ff ff       	call   10003976 <firstRun(bool)+0x1021>	10003976: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000397a:	83 c4 10             	add    esp,0x10
1000397d:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
10003983:	0f be c0             	movsx  eax,al
10003986:	8d 50 d0             	lea    edx,[eax-0x30]
10003989:	89 d0                	mov    eax,edx
1000398b:	c1 e0 02             	shl    eax,0x2
1000398e:	01 d0                	add    eax,edx
10003990:	01 c0                	add    eax,eax
10003992:	89 c2                	mov    edx,eax
10003994:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
1000399a:	0f be c0             	movsx  eax,al
1000399d:	83 e8 30             	sub    eax,0x30
100039a0:	01 d0                	add    eax,edx
100039a2:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
100039a5:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
100039a8:	b9 0c 00 00 00       	mov    ecx,0xc
100039ad:	99                   	cdq    
100039ae:	f7 f9                	idiv   ecx
100039b0:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100039b3:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
100039b7:	75 07                	jne    100039c0 <firstRun(bool)+0x106b>
100039b9:	c7 45 cc 0c 00 00 00 	mov    DWORD PTR [ebp-0x34],0xc
100039c0:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
100039c6:	0f be c0             	movsx  eax,al
100039c9:	8d 50 d0             	lea    edx,[eax-0x30]
100039cc:	89 d0                	mov    eax,edx
100039ce:	c1 e0 02             	shl    eax,0x2
100039d1:	01 d0                	add    eax,edx
100039d3:	01 c0                	add    eax,eax
100039d5:	89 c2                	mov    edx,eax
100039d7:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
100039dd:	0f be c0             	movsx  eax,al
100039e0:	83 e8 30             	sub    eax,0x30
100039e3:	01 d0                	add    eax,edx
100039e5:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
100039e8:	83 ec 04             	sub    esp,0x4
100039eb:	6a 10                	push   0x10
100039ed:	6a 00                	push   0x0
100039ef:	8d 85 b6 fe ff ff    	lea    eax,[ebp-0x14a]
100039f5:	50                   	push   eax
100039f6:	e8 fc ff ff ff       	call   100039f7 <firstRun(bool)+0x10a2>	100039f7: R_386_PC32	memset
100039fb:	83 c4 10             	add    esp,0x10
100039fe:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [ebp-0x54],0x0
10003a05:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a08:	8d 50 01             	lea    edx,[eax+0x1]
10003a0b:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a0e:	c6 84 05 b6 fe ff ff 28 	mov    BYTE PTR [ebp+eax*1-0x14a],0x28
10003a16:	8b 4d cc             	mov    ecx,DWORD PTR [ebp-0x34]
10003a19:	b8 67 66 66 66       	mov    eax,0x66666667
10003a1e:	f7 e9                	imul   ecx
10003a20:	c1 fa 02             	sar    edx,0x2
10003a23:	89 c8                	mov    eax,ecx
10003a25:	c1 f8 1f             	sar    eax,0x1f
10003a28:	29 c2                	sub    edx,eax
10003a2a:	89 d0                	mov    eax,edx
10003a2c:	8d 48 30             	lea    ecx,[eax+0x30]
10003a2f:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a32:	8d 50 01             	lea    edx,[eax+0x1]
10003a35:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a38:	88 ca                	mov    dl,cl
10003a3a:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003a41:	8b 4d cc             	mov    ecx,DWORD PTR [ebp-0x34]
10003a44:	b8 67 66 66 66       	mov    eax,0x66666667
10003a49:	f7 e9                	imul   ecx
10003a4b:	c1 fa 02             	sar    edx,0x2
10003a4e:	89 c8                	mov    eax,ecx
10003a50:	c1 f8 1f             	sar    eax,0x1f
10003a53:	29 c2                	sub    edx,eax
10003a55:	89 d0                	mov    eax,edx
10003a57:	c1 e0 02             	shl    eax,0x2
10003a5a:	01 d0                	add    eax,edx
10003a5c:	01 c0                	add    eax,eax
10003a5e:	29 c1                	sub    ecx,eax
10003a60:	89 ca                	mov    edx,ecx
10003a62:	88 d0                	mov    al,dl
10003a64:	8d 48 30             	lea    ecx,[eax+0x30]
10003a67:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a6a:	8d 50 01             	lea    edx,[eax+0x1]
10003a6d:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a70:	88 ca                	mov    dl,cl
10003a72:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003a79:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a7c:	8d 50 01             	lea    edx,[eax+0x1]
10003a7f:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a82:	c6 84 05 b6 fe ff ff 3a 	mov    BYTE PTR [ebp+eax*1-0x14a],0x3a
10003a8a:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10003a8d:	b8 67 66 66 66       	mov    eax,0x66666667
10003a92:	f7 e9                	imul   ecx
10003a94:	c1 fa 02             	sar    edx,0x2
10003a97:	89 c8                	mov    eax,ecx
10003a99:	c1 f8 1f             	sar    eax,0x1f
10003a9c:	29 c2                	sub    edx,eax
10003a9e:	89 d0                	mov    eax,edx
10003aa0:	8d 48 30             	lea    ecx,[eax+0x30]
10003aa3:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003aa6:	8d 50 01             	lea    edx,[eax+0x1]
10003aa9:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003aac:	88 ca                	mov    dl,cl
10003aae:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003ab5:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10003ab8:	b8 67 66 66 66       	mov    eax,0x66666667
10003abd:	f7 e9                	imul   ecx
10003abf:	c1 fa 02             	sar    edx,0x2
10003ac2:	89 c8                	mov    eax,ecx
10003ac4:	c1 f8 1f             	sar    eax,0x1f
10003ac7:	29 c2                	sub    edx,eax
10003ac9:	89 d0                	mov    eax,edx
10003acb:	c1 e0 02             	shl    eax,0x2
10003ace:	01 d0                	add    eax,edx
10003ad0:	01 c0                	add    eax,eax
10003ad2:	29 c1                	sub    ecx,eax
10003ad4:	89 ca                	mov    edx,ecx
10003ad6:	88 d0                	mov    al,dl
10003ad8:	8d 48 30             	lea    ecx,[eax+0x30]
10003adb:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003ade:	8d 50 01             	lea    edx,[eax+0x1]
10003ae1:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003ae4:	88 ca                	mov    dl,cl
10003ae6:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003aed:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003af0:	8d 50 01             	lea    edx,[eax+0x1]
10003af3:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003af6:	c6 84 05 b6 fe ff ff 20 	mov    BYTE PTR [ebp+eax*1-0x14a],0x20
10003afe:	83 7d b4 0b          	cmp    DWORD PTR [ebp-0x4c],0xb
10003b02:	7e 04                	jle    10003b08 <firstRun(bool)+0x11b3>
10003b04:	b2 50                	mov    dl,0x50
10003b06:	eb 02                	jmp    10003b0a <firstRun(bool)+0x11b5>
10003b08:	b2 41                	mov    dl,0x41
10003b0a:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b0d:	8d 48 01             	lea    ecx,[eax+0x1]
10003b10:	89 4d ac             	mov    DWORD PTR [ebp-0x54],ecx
10003b13:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003b1a:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b1d:	8d 50 01             	lea    edx,[eax+0x1]
10003b20:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b23:	c6 84 05 b6 fe ff ff 4d 	mov    BYTE PTR [ebp+eax*1-0x14a],0x4d
10003b2b:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b2e:	8d 50 01             	lea    edx,[eax+0x1]
10003b31:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b34:	c6 84 05 b6 fe ff ff 29 	mov    BYTE PTR [ebp+eax*1-0x14a],0x29
10003b3c:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10003b3e: R_386_32	term
10003b42:	83 ec 0c             	sub    esp,0xc
10003b45:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003b4b:	50                   	push   eax
10003b4c:	e8 fc ff ff ff       	call   10003b4d <firstRun(bool)+0x11f8>	10003b4d: R_386_PC32	strlen
10003b51:	83 c4 10             	add    esp,0x10
10003b54:	83 c0 1e             	add    eax,0x1e
10003b57:	83 ec 04             	sub    esp,0x4
10003b5a:	6a 08                	push   0x8
10003b5c:	50                   	push   eax
10003b5d:	53                   	push   ebx
10003b5e:	e8 fc ff ff ff       	call   10003b5f <firstRun(bool)+0x120a>	10003b5f: R_386_PC32	VgaText::setCursor(int, int)
10003b63:	83 c4 10             	add    esp,0x10
10003b66:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b67: R_386_32	term
10003b6b:	83 ec 08             	sub    esp,0x8
10003b6e:	8d 95 b6 fe ff ff    	lea    edx,[ebp-0x14a]
10003b74:	52                   	push   edx
10003b75:	50                   	push   eax
10003b76:	e8 fc ff ff ff       	call   10003b77 <firstRun(bool)+0x1222>	10003b77: R_386_PC32	VgaText::puts(char const*)
10003b7b:	83 c4 10             	add    esp,0x10
10003b7e:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b7f: R_386_32	term
10003b83:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003b86:	83 c2 1a             	add    edx,0x1a
10003b89:	83 ec 04             	sub    esp,0x4
10003b8c:	6a 08                	push   0x8
10003b8e:	52                   	push   edx
10003b8f:	50                   	push   eax
10003b90:	e8 fc ff ff ff       	call   10003b91 <firstRun(bool)+0x123c>	10003b91: R_386_PC32	VgaText::setCursor(int, int)
10003b95:	83 c4 10             	add    esp,0x10
10003b98:	a0 00 00 00 00       	mov    al,ds:0x0	10003b99: R_386_32	installKey
10003b9d:	84 c0                	test   al,al
10003b9f:	0f 94 c0             	sete   al
10003ba2:	84 c0                	test   al,al
10003ba4:	74 02                	je     10003ba8 <firstRun(bool)+0x1253>
10003ba6:	eb f0                	jmp    10003b98 <firstRun(bool)+0x1243>
10003ba8:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ba9: R_386_32	term
10003bad:	05 82 00 00 00       	add    eax,0x82
10003bb2:	83 ec 04             	sub    esp,0x4
10003bb5:	6a 10                	push   0x10
10003bb7:	6a 00                	push   0x0
10003bb9:	50                   	push   eax
10003bba:	e8 fc ff ff ff       	call   10003bbb <firstRun(bool)+0x1266>	10003bbb: R_386_PC32	memset
10003bbf:	83 c4 10             	add    esp,0x10
10003bc2:	a1 00 00 00 00       	mov    eax,ds:0x0	10003bc3: R_386_32	term
10003bc7:	05 02 01 00 00       	add    eax,0x102
10003bcc:	83 ec 04             	sub    esp,0x4
10003bcf:	6a 10                	push   0x10
10003bd1:	6a 00                	push   0x0
10003bd3:	50                   	push   eax
10003bd4:	e8 fc ff ff ff       	call   10003bd5 <firstRun(bool)+0x1280>	10003bd5: R_386_PC32	memset
10003bd9:	83 c4 10             	add    esp,0x10
10003bdc:	a0 00 00 00 00       	mov    al,ds:0x0	10003bdd: R_386_32	installKey
10003be1:	3c 03                	cmp    al,0x3
10003be3:	74 09                	je     10003bee <firstRun(bool)+0x1299>
10003be5:	a0 00 00 00 00       	mov    al,ds:0x0	10003be6: R_386_32	installKey
10003bea:	3c 08                	cmp    al,0x8
10003bec:	75 04                	jne    10003bf2 <firstRun(bool)+0x129d>
10003bee:	b0 01                	mov    al,0x1
10003bf0:	eb 02                	jmp    10003bf4 <firstRun(bool)+0x129f>
10003bf2:	b0 00                	mov    al,0x0
10003bf4:	84 c0                	test   al,al
10003bf6:	74 58                	je     10003c50 <firstRun(bool)+0x12fb>
10003bf8:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
10003bfb:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10003bff:	75 16                	jne    10003c17 <firstRun(bool)+0x12c2>
10003c01:	83 ec 0c             	sub    esp,0xc
10003c04:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003c0a:	50                   	push   eax
10003c0b:	e8 fc ff ff ff       	call   10003c0c <firstRun(bool)+0x12b7>	10003c0c: R_386_PC32	strlen
10003c10:	83 c4 10             	add    esp,0x10
10003c13:	48                   	dec    eax
10003c14:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10003c17:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003c1d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003c20:	01 d0                	add    eax,edx
10003c22:	8a 00                	mov    al,BYTE PTR [eax]
10003c24:	3c 20                	cmp    al,0x20
10003c26:	74 d0                	je     10003bf8 <firstRun(bool)+0x12a3>
10003c28:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003c2e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003c31:	01 d0                	add    eax,edx
10003c33:	8a 00                	mov    al,BYTE PTR [eax]
10003c35:	3c 2f                	cmp    al,0x2f
10003c37:	74 bf                	je     10003bf8 <firstRun(bool)+0x12a3>
10003c39:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003c3f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003c42:	01 d0                	add    eax,edx
10003c44:	8a 00                	mov    al,BYTE PTR [eax]
10003c46:	3c 3a                	cmp    al,0x3a
10003c48:	0f 85 5e 04 00 00    	jne    100040ac <firstRun(bool)+0x1757>
10003c4e:	eb a8                	jmp    10003bf8 <firstRun(bool)+0x12a3>
10003c50:	a0 00 00 00 00       	mov    al,ds:0x0	10003c51: R_386_32	installKey
10003c55:	3c 2f                	cmp    al,0x2f
10003c57:	7e 09                	jle    10003c62 <firstRun(bool)+0x130d>
10003c59:	a0 00 00 00 00       	mov    al,ds:0x0	10003c5a: R_386_32	installKey
10003c5e:	3c 39                	cmp    al,0x39
10003c60:	7e 12                	jle    10003c74 <firstRun(bool)+0x131f>
10003c62:	a0 00 00 00 00       	mov    al,ds:0x0	10003c63: R_386_32	installKey
10003c67:	3c 20                	cmp    al,0x20
10003c69:	74 09                	je     10003c74 <firstRun(bool)+0x131f>
10003c6b:	a0 00 00 00 00       	mov    al,ds:0x0	10003c6c: R_386_32	installKey
10003c70:	3c 04                	cmp    al,0x4
10003c72:	75 04                	jne    10003c78 <firstRun(bool)+0x1323>
10003c74:	b0 01                	mov    al,0x1
10003c76:	eb 02                	jmp    10003c7a <firstRun(bool)+0x1325>
10003c78:	b0 00                	mov    al,0x0
10003c7a:	84 c0                	test   al,al
10003c7c:	0f 84 cf 01 00 00    	je     10003e51 <firstRun(bool)+0x14fc>
10003c82:	a0 00 00 00 00       	mov    al,ds:0x0	10003c83: R_386_32	installKey
10003c87:	3c 2f                	cmp    al,0x2f
10003c89:	7e 0d                	jle    10003c98 <firstRun(bool)+0x1343>
10003c8b:	a0 00 00 00 00       	mov    al,ds:0x0	10003c8c: R_386_32	installKey
10003c90:	3c 39                	cmp    al,0x39
10003c92:	7f 04                	jg     10003c98 <firstRun(bool)+0x1343>
10003c94:	b0 01                	mov    al,0x1
10003c96:	eb 02                	jmp    10003c9a <firstRun(bool)+0x1345>
10003c98:	b0 00                	mov    al,0x0
10003c9a:	84 c0                	test   al,al
10003c9c:	0f 84 51 01 00 00    	je     10003df3 <firstRun(bool)+0x149e>
10003ca2:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10003ca6:	75 0d                	jne    10003cb5 <firstRun(bool)+0x1360>
10003ca8:	a0 00 00 00 00       	mov    al,ds:0x0	10003ca9: R_386_32	installKey
10003cad:	3c 33                	cmp    al,0x33
10003caf:	7e 04                	jle    10003cb5 <firstRun(bool)+0x1360>
10003cb1:	b0 01                	mov    al,0x1
10003cb3:	eb 02                	jmp    10003cb7 <firstRun(bool)+0x1362>
10003cb5:	b0 00                	mov    al,0x0
10003cb7:	84 c0                	test   al,al
10003cb9:	74 28                	je     10003ce3 <firstRun(bool)+0x138e>
10003cbb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003cbe:	8d 50 01             	lea    edx,[eax+0x1]
10003cc1:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003cc4:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003ccc:	a0 00 00 00 00       	mov    al,ds:0x0	10003ccd: R_386_32	installKey
10003cd1:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003cd7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003cda:	01 ca                	add    edx,ecx
10003cdc:	88 02                	mov    BYTE PTR [edx],al
10003cde:	e9 10 01 00 00       	jmp    10003df3 <firstRun(bool)+0x149e>
10003ce3:	83 7d e4 03          	cmp    DWORD PTR [ebp-0x1c],0x3
10003ce7:	75 0d                	jne    10003cf6 <firstRun(bool)+0x13a1>
10003ce9:	a0 00 00 00 00       	mov    al,ds:0x0	10003cea: R_386_32	installKey
10003cee:	3c 31                	cmp    al,0x31
10003cf0:	7e 04                	jle    10003cf6 <firstRun(bool)+0x13a1>
10003cf2:	b0 01                	mov    al,0x1
10003cf4:	eb 02                	jmp    10003cf8 <firstRun(bool)+0x13a3>
10003cf6:	b0 00                	mov    al,0x0
10003cf8:	84 c0                	test   al,al
10003cfa:	74 28                	je     10003d24 <firstRun(bool)+0x13cf>
10003cfc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003cff:	8d 50 01             	lea    edx,[eax+0x1]
10003d02:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003d05:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003d0d:	a0 00 00 00 00       	mov    al,ds:0x0	10003d0e: R_386_32	installKey
10003d12:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003d18:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003d1b:	01 ca                	add    edx,ecx
10003d1d:	88 02                	mov    BYTE PTR [edx],al
10003d1f:	e9 cf 00 00 00       	jmp    10003df3 <firstRun(bool)+0x149e>
10003d24:	83 7d e4 0b          	cmp    DWORD PTR [ebp-0x1c],0xb
10003d28:	75 0d                	jne    10003d37 <firstRun(bool)+0x13e2>
10003d2a:	a0 00 00 00 00       	mov    al,ds:0x0	10003d2b: R_386_32	installKey
10003d2f:	3c 32                	cmp    al,0x32
10003d31:	7e 04                	jle    10003d37 <firstRun(bool)+0x13e2>
10003d33:	b0 01                	mov    al,0x1
10003d35:	eb 02                	jmp    10003d39 <firstRun(bool)+0x13e4>
10003d37:	b0 00                	mov    al,0x0
10003d39:	84 c0                	test   al,al
10003d3b:	74 28                	je     10003d65 <firstRun(bool)+0x1410>
10003d3d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d40:	8d 50 01             	lea    edx,[eax+0x1]
10003d43:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003d46:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003d4e:	a0 00 00 00 00       	mov    al,ds:0x0	10003d4f: R_386_32	installKey
10003d53:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003d59:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003d5c:	01 ca                	add    edx,ecx
10003d5e:	88 02                	mov    BYTE PTR [edx],al
10003d60:	e9 8e 00 00 00       	jmp    10003df3 <firstRun(bool)+0x149e>
10003d65:	83 7d e4 0e          	cmp    DWORD PTR [ebp-0x1c],0xe
10003d69:	75 0d                	jne    10003d78 <firstRun(bool)+0x1423>
10003d6b:	a0 00 00 00 00       	mov    al,ds:0x0	10003d6c: R_386_32	installKey
10003d70:	3c 35                	cmp    al,0x35
10003d72:	7e 04                	jle    10003d78 <firstRun(bool)+0x1423>
10003d74:	b0 01                	mov    al,0x1
10003d76:	eb 02                	jmp    10003d7a <firstRun(bool)+0x1425>
10003d78:	b0 00                	mov    al,0x0
10003d7a:	84 c0                	test   al,al
10003d7c:	74 25                	je     10003da3 <firstRun(bool)+0x144e>
10003d7e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d81:	8d 50 01             	lea    edx,[eax+0x1]
10003d84:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003d87:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003d8f:	a0 00 00 00 00       	mov    al,ds:0x0	10003d90: R_386_32	installKey
10003d94:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003d9a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003d9d:	01 ca                	add    edx,ecx
10003d9f:	88 02                	mov    BYTE PTR [edx],al
10003da1:	eb 50                	jmp    10003df3 <firstRun(bool)+0x149e>
10003da3:	83 7d e4 11          	cmp    DWORD PTR [ebp-0x1c],0x11
10003da7:	75 0d                	jne    10003db6 <firstRun(bool)+0x1461>
10003da9:	a0 00 00 00 00       	mov    al,ds:0x0	10003daa: R_386_32	installKey
10003dae:	3c 35                	cmp    al,0x35
10003db0:	7e 04                	jle    10003db6 <firstRun(bool)+0x1461>
10003db2:	b0 01                	mov    al,0x1
10003db4:	eb 02                	jmp    10003db8 <firstRun(bool)+0x1463>
10003db6:	b0 00                	mov    al,0x0
10003db8:	84 c0                	test   al,al
10003dba:	74 25                	je     10003de1 <firstRun(bool)+0x148c>
10003dbc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003dbf:	8d 50 01             	lea    edx,[eax+0x1]
10003dc2:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003dc5:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003dcd:	a0 00 00 00 00       	mov    al,ds:0x0	10003dce: R_386_32	installKey
10003dd2:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003dd8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003ddb:	01 ca                	add    edx,ecx
10003ddd:	88 02                	mov    BYTE PTR [edx],al
10003ddf:	eb 12                	jmp    10003df3 <firstRun(bool)+0x149e>
10003de1:	a0 00 00 00 00       	mov    al,ds:0x0	10003de2: R_386_32	installKey
10003de6:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003dec:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003def:	01 ca                	add    edx,ecx
10003df1:	88 02                	mov    BYTE PTR [edx],al
10003df3:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10003df6:	83 ec 0c             	sub    esp,0xc
10003df9:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003dff:	50                   	push   eax
10003e00:	e8 fc ff ff ff       	call   10003e01 <firstRun(bool)+0x14ac>	10003e01: R_386_PC32	strlen
10003e05:	83 c4 10             	add    esp,0x10
10003e08:	89 c2                	mov    edx,eax
10003e0a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e0d:	39 c2                	cmp    edx,eax
10003e0f:	77 07                	ja     10003e18 <firstRun(bool)+0x14c3>
10003e11:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003e18:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003e1e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e21:	01 d0                	add    eax,edx
10003e23:	8a 00                	mov    al,BYTE PTR [eax]
10003e25:	3c 20                	cmp    al,0x20
10003e27:	74 ca                	je     10003df3 <firstRun(bool)+0x149e>
10003e29:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003e2f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e32:	01 d0                	add    eax,edx
10003e34:	8a 00                	mov    al,BYTE PTR [eax]
10003e36:	3c 2f                	cmp    al,0x2f
10003e38:	74 b9                	je     10003df3 <firstRun(bool)+0x149e>
10003e3a:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003e40:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e43:	01 d0                	add    eax,edx
10003e45:	8a 00                	mov    al,BYTE PTR [eax]
10003e47:	3c 3a                	cmp    al,0x3a
10003e49:	0f 85 5d 02 00 00    	jne    100040ac <firstRun(bool)+0x1757>
10003e4f:	eb a2                	jmp    10003df3 <firstRun(bool)+0x149e>
10003e51:	a0 00 00 00 00       	mov    al,ds:0x0	10003e52: R_386_32	installKey
10003e56:	3c 0a                	cmp    al,0xa
10003e58:	0f 94 c0             	sete   al
10003e5b:	84 c0                	test   al,al
10003e5d:	0f 84 37 02 00 00    	je     1000409a <firstRun(bool)+0x1745>
10003e63:	8a 85 40 ff ff ff    	mov    al,BYTE PTR [ebp-0xc0]
10003e69:	0f be c0             	movsx  eax,al
10003e6c:	8d 50 d0             	lea    edx,[eax-0x30]
10003e6f:	89 d0                	mov    eax,edx
10003e71:	c1 e0 02             	shl    eax,0x2
10003e74:	01 d0                	add    eax,edx
10003e76:	01 c0                	add    eax,eax
10003e78:	89 c2                	mov    edx,eax
10003e7a:	8a 85 41 ff ff ff    	mov    al,BYTE PTR [ebp-0xbf]
10003e80:	0f be c0             	movsx  eax,al
10003e83:	83 e8 30             	sub    eax,0x30
10003e86:	01 d0                	add    eax,edx
10003e88:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10003e8b:	8a 85 43 ff ff ff    	mov    al,BYTE PTR [ebp-0xbd]
10003e91:	0f be c0             	movsx  eax,al
10003e94:	8d 50 d0             	lea    edx,[eax-0x30]
10003e97:	89 d0                	mov    eax,edx
10003e99:	c1 e0 02             	shl    eax,0x2
10003e9c:	01 d0                	add    eax,edx
10003e9e:	01 c0                	add    eax,eax
10003ea0:	89 c2                	mov    edx,eax
10003ea2:	8a 85 44 ff ff ff    	mov    al,BYTE PTR [ebp-0xbc]
10003ea8:	0f be c0             	movsx  eax,al
10003eab:	83 e8 30             	sub    eax,0x30
10003eae:	01 d0                	add    eax,edx
10003eb0:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10003eb3:	8a 85 46 ff ff ff    	mov    al,BYTE PTR [ebp-0xba]
10003eb9:	0f be c0             	movsx  eax,al
10003ebc:	8d 50 d0             	lea    edx,[eax-0x30]
10003ebf:	89 d0                	mov    eax,edx
10003ec1:	c1 e0 02             	shl    eax,0x2
10003ec4:	01 d0                	add    eax,edx
10003ec6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003ecd:	01 d0                	add    eax,edx
10003ecf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003ed6:	01 d0                	add    eax,edx
10003ed8:	c1 e0 03             	shl    eax,0x3
10003edb:	89 c1                	mov    ecx,eax
10003edd:	8a 85 47 ff ff ff    	mov    al,BYTE PTR [ebp-0xb9]
10003ee3:	0f be c0             	movsx  eax,al
10003ee6:	8d 50 d0             	lea    edx,[eax-0x30]
10003ee9:	89 d0                	mov    eax,edx
10003eeb:	c1 e0 02             	shl    eax,0x2
10003eee:	01 d0                	add    eax,edx
10003ef0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003ef7:	01 d0                	add    eax,edx
10003ef9:	c1 e0 02             	shl    eax,0x2
10003efc:	01 c1                	add    ecx,eax
10003efe:	8a 85 48 ff ff ff    	mov    al,BYTE PTR [ebp-0xb8]
10003f04:	0f be c0             	movsx  eax,al
10003f07:	8d 50 d0             	lea    edx,[eax-0x30]
10003f0a:	89 d0                	mov    eax,edx
10003f0c:	c1 e0 02             	shl    eax,0x2
10003f0f:	01 d0                	add    eax,edx
10003f11:	01 c0                	add    eax,eax
10003f13:	8d 14 01             	lea    edx,[ecx+eax*1]
10003f16:	8a 85 49 ff ff ff    	mov    al,BYTE PTR [ebp-0xb7]
10003f1c:	0f be c0             	movsx  eax,al
10003f1f:	83 e8 30             	sub    eax,0x30
10003f22:	01 d0                	add    eax,edx
10003f24:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10003f27:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
10003f2d:	0f be c0             	movsx  eax,al
10003f30:	8d 50 d0             	lea    edx,[eax-0x30]
10003f33:	89 d0                	mov    eax,edx
10003f35:	c1 e0 02             	shl    eax,0x2
10003f38:	01 d0                	add    eax,edx
10003f3a:	01 c0                	add    eax,eax
10003f3c:	89 c2                	mov    edx,eax
10003f3e:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
10003f44:	0f be c0             	movsx  eax,al
10003f47:	83 e8 30             	sub    eax,0x30
10003f4a:	01 d0                	add    eax,edx
10003f4c:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10003f4f:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
10003f55:	0f be c0             	movsx  eax,al
10003f58:	8d 50 d0             	lea    edx,[eax-0x30]
10003f5b:	89 d0                	mov    eax,edx
10003f5d:	c1 e0 02             	shl    eax,0x2
10003f60:	01 d0                	add    eax,edx
10003f62:	01 c0                	add    eax,eax
10003f64:	89 c2                	mov    edx,eax
10003f66:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
10003f6c:	0f be c0             	movsx  eax,al
10003f6f:	83 e8 30             	sub    eax,0x30
10003f72:	01 d0                	add    eax,edx
10003f74:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10003f77:	8a 85 51 ff ff ff    	mov    al,BYTE PTR [ebp-0xaf]
10003f7d:	0f be c0             	movsx  eax,al
10003f80:	8d 50 d0             	lea    edx,[eax-0x30]
10003f83:	89 d0                	mov    eax,edx
10003f85:	c1 e0 02             	shl    eax,0x2
10003f88:	01 d0                	add    eax,edx
10003f8a:	01 c0                	add    eax,eax
10003f8c:	89 c2                	mov    edx,eax
10003f8e:	8a 85 52 ff ff ff    	mov    al,BYTE PTR [ebp-0xae]
10003f94:	0f be c0             	movsx  eax,al
10003f97:	83 e8 30             	sub    eax,0x30
10003f9a:	01 d0                	add    eax,edx
10003f9c:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
10003f9f:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10003fa2:	83 e0 03             	and    eax,0x3
10003fa5:	85 c0                	test   eax,eax
10003fa7:	75 1f                	jne    10003fc8 <firstRun(bool)+0x1673>
10003fa9:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10003fac:	b9 19 00 00 00       	mov    ecx,0x19
10003fb1:	99                   	cdq    
10003fb2:	f7 f9                	idiv   ecx
10003fb4:	89 d0                	mov    eax,edx
10003fb6:	85 c0                	test   eax,eax
10003fb8:	75 0a                	jne    10003fc4 <firstRun(bool)+0x166f>
10003fba:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10003fbd:	83 e0 0f             	and    eax,0xf
10003fc0:	85 c0                	test   eax,eax
10003fc2:	75 04                	jne    10003fc8 <firstRun(bool)+0x1673>
10003fc4:	b0 01                	mov    al,0x1
10003fc6:	eb 02                	jmp    10003fca <firstRun(bool)+0x1675>
10003fc8:	b0 00                	mov    al,0x0
10003fca:	88 45 93             	mov    BYTE PTR [ebp-0x6d],al
10003fcd:	83 7d a8 1f          	cmp    DWORD PTR [ebp-0x58],0x1f
10003fd1:	7e 0c                	jle    10003fdf <firstRun(bool)+0x168a>
10003fd3:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003fda:	e9 cd 00 00 00       	jmp    100040ac <firstRun(bool)+0x1757>
10003fdf:	83 7d a8 1e          	cmp    DWORD PTR [ebp-0x58],0x1e
10003fe3:	7e 2a                	jle    1000400f <firstRun(bool)+0x16ba>
10003fe5:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
10003fe9:	74 18                	je     10004003 <firstRun(bool)+0x16ae>
10003feb:	83 7d a4 04          	cmp    DWORD PTR [ebp-0x5c],0x4
10003fef:	74 12                	je     10004003 <firstRun(bool)+0x16ae>
10003ff1:	83 7d a4 06          	cmp    DWORD PTR [ebp-0x5c],0x6
10003ff5:	74 0c                	je     10004003 <firstRun(bool)+0x16ae>
10003ff7:	83 7d a4 09          	cmp    DWORD PTR [ebp-0x5c],0x9
10003ffb:	74 06                	je     10004003 <firstRun(bool)+0x16ae>
10003ffd:	83 7d a4 0b          	cmp    DWORD PTR [ebp-0x5c],0xb
10004001:	75 0c                	jne    1000400f <firstRun(bool)+0x16ba>
10004003:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000400a:	e9 9d 00 00 00       	jmp    100040ac <firstRun(bool)+0x1757>
1000400f:	83 7d a8 1d          	cmp    DWORD PTR [ebp-0x58],0x1d
10004013:	75 19                	jne    1000402e <firstRun(bool)+0x16d9>
10004015:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
10004019:	75 13                	jne    1000402e <firstRun(bool)+0x16d9>
1000401b:	8a 45 93             	mov    al,BYTE PTR [ebp-0x6d]
1000401e:	83 f0 01             	xor    eax,0x1
10004021:	84 c0                	test   al,al
10004023:	74 09                	je     1000402e <firstRun(bool)+0x16d9>
10004025:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000402c:	eb 7e                	jmp    100040ac <firstRun(bool)+0x1757>
1000402e:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
10004032:	75 09                	jne    1000403d <firstRun(bool)+0x16e8>
10004034:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000403b:	eb 6f                	jmp    100040ac <firstRun(bool)+0x1757>
1000403d:	83 7d a4 0c          	cmp    DWORD PTR [ebp-0x5c],0xc
10004041:	7f 06                	jg     10004049 <firstRun(bool)+0x16f4>
10004043:	83 7d a4 00          	cmp    DWORD PTR [ebp-0x5c],0x0
10004047:	75 09                	jne    10004052 <firstRun(bool)+0x16fd>
10004049:	c7 45 e4 03 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x3
10004050:	eb 5a                	jmp    100040ac <firstRun(bool)+0x1757>
10004052:	81 7d a0 b7 0b 00 00 	cmp    DWORD PTR [ebp-0x60],0xbb7
10004059:	7f 09                	jg     10004064 <firstRun(bool)+0x170f>
1000405b:	81 7d a0 b1 07 00 00 	cmp    DWORD PTR [ebp-0x60],0x7b1
10004062:	7f 09                	jg     1000406d <firstRun(bool)+0x1718>
10004064:	c7 45 e4 06 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x6
1000406b:	eb 3f                	jmp    100040ac <firstRun(bool)+0x1757>
1000406d:	83 7d 9c 17          	cmp    DWORD PTR [ebp-0x64],0x17
10004071:	7e 09                	jle    1000407c <firstRun(bool)+0x1727>
10004073:	c7 45 e4 0b 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xb
1000407a:	eb 30                	jmp    100040ac <firstRun(bool)+0x1757>
1000407c:	83 7d 98 3b          	cmp    DWORD PTR [ebp-0x68],0x3b
10004080:	7e 09                	jle    1000408b <firstRun(bool)+0x1736>
10004082:	c7 45 e4 0e 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xe
10004089:	eb 21                	jmp    100040ac <firstRun(bool)+0x1757>
1000408b:	83 7d 94 3b          	cmp    DWORD PTR [ebp-0x6c],0x3b
1000408f:	7e 37                	jle    100040c8 <firstRun(bool)+0x1773>
10004091:	c7 45 e4 11 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x11
10004098:	eb 12                	jmp    100040ac <firstRun(bool)+0x1757>
1000409a:	a0 00 00 00 00       	mov    al,ds:0x0	1000409b: R_386_32	installKey
1000409f:	3c 1b                	cmp    al,0x1b
100040a1:	0f 94 c0             	sete   al
100040a4:	84 c0                	test   al,al
100040a6:	0f 85 c8 e9 ff ff    	jne    10002a74 <firstRun(bool)+0x11f>
100040ac:	83 ec 0c             	sub    esp,0xc
100040af:	68 4c 04 00 00       	push   0x44c
100040b4:	e8 fc ff ff ff       	call   100040b5 <firstRun(bool)+0x1760>	100040b5: R_386_PC32	milliTenthSleep(unsigned int)
100040b9:	83 c4 10             	add    esp,0x10
100040bc:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100040be: R_386_32	installKey
100040c3:	e9 4b f8 ff ff       	jmp    10003913 <firstRun(bool)+0xfbe>
100040c8:	90                   	nop
100040c9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100040cb: R_386_32	installKey
100040d0:	83 ec 0c             	sub    esp,0xc
100040d3:	68 a0 0f 00 00       	push   0xfa0
100040d8:	e8 fc ff ff ff       	call   100040d9 <firstRun(bool)+0x1784>	100040d9: R_386_PC32	milliTenthSleep(unsigned int)
100040dd:	83 c4 10             	add    esp,0x10
100040e0:	eb 01                	jmp    100040e3 <firstRun(bool)+0x178e>
100040e2:	90                   	nop
100040e3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100040e5: R_386_32	installKey
100040ea:	e8 fc ff ff ff       	call   100040eb <firstRun(bool)+0x1796>	100040eb: R_386_PC32	drawBootScreen()
100040ef:	83 ec 0c             	sub    esp,0xc
100040f2:	68 13 a9 00 10       	push   0x1000a913	100040f3: R_386_32	.text
100040f7:	6a 14                	push   0x14
100040f9:	6a 3c                	push   0x3c
100040fb:	6a 01                	push   0x1
100040fd:	6a 12                	push   0x12
100040ff:	e8 fc ff ff ff       	call   10004100 <firstRun(bool)+0x17ab>	10004100: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004104:	83 c4 20             	add    esp,0x20
10004107:	a1 00 00 00 00       	mov    eax,ds:0x0	10004108: R_386_32	term
1000410c:	83 ec 04             	sub    esp,0x4
1000410f:	6a 04                	push   0x4
10004111:	6a 14                	push   0x14
10004113:	50                   	push   eax
10004114:	e8 fc ff ff ff       	call   10004115 <firstRun(bool)+0x17c0>	10004115: R_386_PC32	VgaText::setCursor(int, int)
10004119:	83 c4 10             	add    esp,0x10
1000411c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000411d: R_386_32	term
10004121:	83 ec 08             	sub    esp,0x8
10004124:	68 a0 a9 00 10       	push   0x1000a9a0	10004125: R_386_32	.text
10004129:	50                   	push   eax
1000412a:	e8 fc ff ff ff       	call   1000412b <firstRun(bool)+0x17d6>	1000412b: R_386_PC32	VgaText::puts(char const*)
1000412f:	83 c4 10             	add    esp,0x10
10004132:	a1 00 00 00 00       	mov    eax,ds:0x0	10004133: R_386_32	term
10004137:	83 ec 04             	sub    esp,0x4
1000413a:	6a 18                	push   0x18
1000413c:	6a 11                	push   0x11
1000413e:	50                   	push   eax
1000413f:	e8 fc ff ff ff       	call   10004140 <firstRun(bool)+0x17eb>	10004140: R_386_PC32	VgaText::setCursor(int, int)
10004144:	83 c4 10             	add    esp,0x10
10004147:	a1 00 00 00 00       	mov    eax,ds:0x0	10004148: R_386_32	term
1000414c:	6a 0b                	push   0xb
1000414e:	6a 03                	push   0x3
10004150:	68 8a a9 00 10       	push   0x1000a98a	10004151: R_386_32	.text
10004155:	50                   	push   eax
10004156:	e8 fc ff ff ff       	call   10004157 <firstRun(bool)+0x1802>	10004157: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000415b:	83 c4 10             	add    esp,0x10
1000415e:	e8 fc ff ff ff       	call   1000415f <firstRun(bool)+0x180a>	1000415f: R_386_PC32	loadTimezoneStrings()
10004163:	89 45 8c             	mov    DWORD PTR [ebp-0x74],eax
10004166:	b8 d2 00 00 00       	mov    eax,0xd2
1000416b:	99                   	cdq    
1000416c:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
1000416f:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
10004172:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
10004179:	83 7d c8 0d          	cmp    DWORD PTR [ebp-0x38],0xd
1000417d:	7f 32                	jg     100041b1 <firstRun(bool)+0x185c>
1000417f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004180: R_386_32	term
10004184:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
10004187:	83 c2 07             	add    edx,0x7
1000418a:	83 ec 04             	sub    esp,0x4
1000418d:	52                   	push   edx
1000418e:	6a 4b                	push   0x4b
10004190:	50                   	push   eax
10004191:	e8 fc ff ff ff       	call   10004192 <firstRun(bool)+0x183d>	10004192: R_386_PC32	VgaText::setCursor(int, int)
10004196:	83 c4 10             	add    esp,0x10
10004199:	a1 00 00 00 00       	mov    eax,ds:0x0	1000419a: R_386_32	term
1000419e:	83 ec 08             	sub    esp,0x8
100041a1:	6a 20                	push   0x20
100041a3:	50                   	push   eax
100041a4:	e8 fc ff ff ff       	call   100041a5 <firstRun(bool)+0x1850>	100041a5: R_386_PC32	VgaText::putchar(char)
100041a9:	83 c4 10             	add    esp,0x10
100041ac:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
100041af:	eb c8                	jmp    10004179 <firstRun(bool)+0x1824>
100041b1:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
100041b8:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100041bb:	3b 45 88             	cmp    eax,DWORD PTR [ebp-0x78]
100041be:	7d 48                	jge    10004208 <firstRun(bool)+0x18b3>
100041c0:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100041c2: R_386_32	term
100041c6:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100041c9:	8d 58 07             	lea    ebx,[eax+0x7]
100041cc:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
100041cf:	89 d0                	mov    eax,edx
100041d1:	01 c0                	add    eax,eax
100041d3:	01 d0                	add    eax,edx
100041d5:	01 c0                	add    eax,eax
100041d7:	01 d0                	add    eax,edx
100041d9:	01 c0                	add    eax,eax
100041db:	99                   	cdq    
100041dc:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
100041df:	01 d8                	add    eax,ebx
100041e1:	83 ec 04             	sub    esp,0x4
100041e4:	50                   	push   eax
100041e5:	6a 4b                	push   0x4b
100041e7:	51                   	push   ecx
100041e8:	e8 fc ff ff ff       	call   100041e9 <firstRun(bool)+0x1894>	100041e9: R_386_PC32	VgaText::setCursor(int, int)
100041ed:	83 c4 10             	add    esp,0x10
100041f0:	a1 00 00 00 00       	mov    eax,ds:0x0	100041f1: R_386_32	term
100041f5:	83 ec 08             	sub    esp,0x8
100041f8:	6a db                	push   0xffffffdb
100041fa:	50                   	push   eax
100041fb:	e8 fc ff ff ff       	call   100041fc <firstRun(bool)+0x18a7>	100041fc: R_386_PC32	VgaText::putchar(char)
10004200:	83 c4 10             	add    esp,0x10
10004203:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
10004206:	eb b0                	jmp    100041b8 <firstRun(bool)+0x1863>
10004208:	a1 00 00 00 00       	mov    eax,ds:0x0	10004209: R_386_32	term
1000420d:	83 ec 04             	sub    esp,0x4
10004210:	6a 06                	push   0x6
10004212:	6a 4b                	push   0x4b
10004214:	50                   	push   eax
10004215:	e8 fc ff ff ff       	call   10004216 <firstRun(bool)+0x18c1>	10004216: R_386_PC32	VgaText::setCursor(int, int)
1000421a:	83 c4 10             	add    esp,0x10
1000421d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000421e: R_386_32	term
10004222:	83 ec 08             	sub    esp,0x8
10004225:	6a 1e                	push   0x1e
10004227:	50                   	push   eax
10004228:	e8 fc ff ff ff       	call   10004229 <firstRun(bool)+0x18d4>	10004229: R_386_PC32	VgaText::putchar(char)
1000422d:	83 c4 10             	add    esp,0x10
10004230:	a1 00 00 00 00       	mov    eax,ds:0x0	10004231: R_386_32	term
10004235:	83 ec 04             	sub    esp,0x4
10004238:	6a 14                	push   0x14
1000423a:	6a 4b                	push   0x4b
1000423c:	50                   	push   eax
1000423d:	e8 fc ff ff ff       	call   1000423e <firstRun(bool)+0x18e9>	1000423e: R_386_PC32	VgaText::setCursor(int, int)
10004242:	83 c4 10             	add    esp,0x10
10004245:	a1 00 00 00 00       	mov    eax,ds:0x0	10004246: R_386_32	term
1000424a:	83 ec 08             	sub    esp,0x8
1000424d:	6a 1f                	push   0x1f
1000424f:	50                   	push   eax
10004250:	e8 fc ff ff ff       	call   10004251 <firstRun(bool)+0x18fc>	10004251: R_386_PC32	VgaText::putchar(char)
10004255:	83 c4 10             	add    esp,0x10
10004258:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
1000425f:	83 7d c0 0e          	cmp    DWORD PTR [ebp-0x40],0xe
10004263:	7f 7e                	jg     100042e3 <firstRun(bool)+0x198e>
10004265:	a1 00 00 00 00       	mov    eax,ds:0x0	10004266: R_386_32	term
1000426a:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
1000426d:	83 c2 06             	add    edx,0x6
10004270:	83 ec 04             	sub    esp,0x4
10004273:	52                   	push   edx
10004274:	6a 14                	push   0x14
10004276:	50                   	push   eax
10004277:	e8 fc ff ff ff       	call   10004278 <firstRun(bool)+0x1923>	10004278: R_386_PC32	VgaText::setCursor(int, int)
1000427c:	83 c4 10             	add    esp,0x10
1000427f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004280: R_386_32	term
10004284:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10004287:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
1000428a:	01 d1                	add    ecx,edx
1000428c:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000428e: R_386_32	tzsel
10004292:	39 d1                	cmp    ecx,edx
10004294:	75 07                	jne    1000429d <firstRun(bool)+0x1948>
10004296:	bb 00 00 00 00       	mov    ebx,0x0
1000429b:	eb 05                	jmp    100042a2 <firstRun(bool)+0x194d>
1000429d:	bb 0f 00 00 00       	mov    ebx,0xf
100042a2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100042a5:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
100042a8:	01 d1                	add    ecx,edx
100042aa:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100042ac: R_386_32	tzsel
100042b0:	39 d1                	cmp    ecx,edx
100042b2:	75 07                	jne    100042bb <firstRun(bool)+0x1966>
100042b4:	b9 0f 00 00 00       	mov    ecx,0xf
100042b9:	eb 05                	jmp    100042c0 <firstRun(bool)+0x196b>
100042bb:	b9 00 00 00 00       	mov    ecx,0x0
100042c0:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
100042c3:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
100042c6:	01 f2                	add    edx,esi
100042c8:	8b 14 95 00 00 00 00 	mov    edx,DWORD PTR [edx*4+0x0]	100042cb: R_386_32	timezoneStrings
100042cf:	53                   	push   ebx
100042d0:	51                   	push   ecx
100042d1:	52                   	push   edx
100042d2:	50                   	push   eax
100042d3:	e8 fc ff ff ff       	call   100042d4 <firstRun(bool)+0x197f>	100042d4: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100042d8:	83 c4 10             	add    esp,0x10
100042db:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
100042de:	e9 7c ff ff ff       	jmp    1000425f <firstRun(bool)+0x190a>
100042e3:	a0 00 00 00 00       	mov    al,ds:0x0	100042e4: R_386_32	installKey
100042e8:	84 c0                	test   al,al
100042ea:	0f 94 c0             	sete   al
100042ed:	84 c0                	test   al,al
100042ef:	74 02                	je     100042f3 <firstRun(bool)+0x199e>
100042f1:	eb f0                	jmp    100042e3 <firstRun(bool)+0x198e>
100042f3:	a1 00 00 00 00       	mov    eax,ds:0x0	100042f4: R_386_32	term
100042f8:	05 82 00 00 00       	add    eax,0x82
100042fd:	83 ec 04             	sub    esp,0x4
10004300:	6a 04                	push   0x4
10004302:	6a 00                	push   0x0
10004304:	50                   	push   eax
10004305:	e8 fc ff ff ff       	call   10004306 <firstRun(bool)+0x19b1>	10004306: R_386_PC32	memset
1000430a:	83 c4 10             	add    esp,0x10
1000430d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000430e: R_386_32	term
10004312:	05 02 01 00 00       	add    eax,0x102
10004317:	83 ec 04             	sub    esp,0x4
1000431a:	6a 04                	push   0x4
1000431c:	6a 00                	push   0x0
1000431e:	50                   	push   eax
1000431f:	e8 fc ff ff ff       	call   10004320 <firstRun(bool)+0x19cb>	10004320: R_386_PC32	memset
10004324:	83 c4 10             	add    esp,0x10
10004327:	a0 00 00 00 00       	mov    al,ds:0x0	10004328: R_386_32	installKey
1000432c:	3c 01                	cmp    al,0x1
1000432e:	0f 94 c0             	sete   al
10004331:	84 c0                	test   al,al
10004333:	74 41                	je     10004376 <firstRun(bool)+0x1a21>
10004335:	a1 00 00 00 00       	mov    eax,ds:0x0	10004336: R_386_32	tzsel
1000433a:	48                   	dec    eax
1000433b:	a3 00 00 00 00       	mov    ds:0x0,eax	1000433c: R_386_32	tzsel
10004340:	a1 00 00 00 00       	mov    eax,ds:0x0	10004341: R_386_32	tzsel
10004345:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
10004348:	83 f8 04             	cmp    eax,0x4
1000434b:	7f 03                	jg     10004350 <firstRun(bool)+0x19fb>
1000434d:	ff 4d d8             	dec    DWORD PTR [ebp-0x28]
10004350:	a1 00 00 00 00       	mov    eax,ds:0x0	10004351: R_386_32	tzsel
10004355:	85 c0                	test   eax,eax
10004357:	79 0a                	jns    10004363 <firstRun(bool)+0x1a0e>
10004359:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000435b: R_386_32	tzsel
10004363:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10004367:	0f 89 82 00 00 00    	jns    100043ef <firstRun(bool)+0x1a9a>
1000436d:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10004374:	eb 79                	jmp    100043ef <firstRun(bool)+0x1a9a>
10004376:	a0 00 00 00 00       	mov    al,ds:0x0	10004377: R_386_32	installKey
1000437b:	3c 02                	cmp    al,0x2
1000437d:	0f 94 c0             	sete   al
10004380:	84 c0                	test   al,al
10004382:	74 4b                	je     100043cf <firstRun(bool)+0x1a7a>
10004384:	a1 00 00 00 00       	mov    eax,ds:0x0	10004385: R_386_32	tzsel
10004389:	40                   	inc    eax
1000438a:	a3 00 00 00 00       	mov    ds:0x0,eax	1000438b: R_386_32	tzsel
1000438f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004390: R_386_32	tzsel
10004394:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
10004397:	83 f8 0a             	cmp    eax,0xa
1000439a:	7e 03                	jle    1000439f <firstRun(bool)+0x1a4a>
1000439c:	ff 45 d8             	inc    DWORD PTR [ebp-0x28]
1000439f:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100043a2:	8d 50 ff             	lea    edx,[eax-0x1]
100043a5:	a1 00 00 00 00       	mov    eax,ds:0x0	100043a6: R_386_32	tzsel
100043aa:	39 c2                	cmp    edx,eax
100043ac:	7f 0b                	jg     100043b9 <firstRun(bool)+0x1a64>
100043ae:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100043b1:	83 e8 02             	sub    eax,0x2
100043b4:	a3 00 00 00 00       	mov    ds:0x0,eax	100043b5: R_386_32	tzsel
100043b9:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100043bc:	83 e8 0f             	sub    eax,0xf
100043bf:	39 45 d8             	cmp    DWORD PTR [ebp-0x28],eax
100043c2:	7c 2b                	jl     100043ef <firstRun(bool)+0x1a9a>
100043c4:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100043c7:	83 e8 10             	sub    eax,0x10
100043ca:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100043cd:	eb 20                	jmp    100043ef <firstRun(bool)+0x1a9a>
100043cf:	a0 00 00 00 00       	mov    al,ds:0x0	100043d0: R_386_32	installKey
100043d4:	3c 0a                	cmp    al,0xa
100043d6:	0f 94 c0             	sete   al
100043d9:	84 c0                	test   al,al
100043db:	75 2e                	jne    1000440b <firstRun(bool)+0x1ab6>
100043dd:	a0 00 00 00 00       	mov    al,ds:0x0	100043de: R_386_32	installKey
100043e2:	3c 1b                	cmp    al,0x1b
100043e4:	0f 94 c0             	sete   al
100043e7:	84 c0                	test   al,al
100043e9:	0f 85 28 f1 ff ff    	jne    10003517 <firstRun(bool)+0xbc2>
100043ef:	83 ec 0c             	sub    esp,0xc
100043f2:	68 f4 01 00 00       	push   0x1f4
100043f7:	e8 fc ff ff ff       	call   100043f8 <firstRun(bool)+0x1aa3>	100043f8: R_386_PC32	milliTenthSleep(unsigned int)
100043fc:	83 c4 10             	add    esp,0x10
100043ff:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004401: R_386_32	installKey
10004406:	e9 67 fd ff ff       	jmp    10004172 <firstRun(bool)+0x181d>
1000440b:	90                   	nop
1000440c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000440e: R_386_32	User::dstOn
10004413:	a1 00 00 00 00       	mov    eax,ds:0x0	10004414: R_386_32	tzsel
10004418:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000441b: R_386_32	timezoneStrings
1000441f:	83 c0 03             	add    eax,0x3
10004422:	8a 00                	mov    al,BYTE PTR [eax]
10004424:	3c 2e                	cmp    al,0x2e
10004426:	75 15                	jne    1000443d <firstRun(bool)+0x1ae8>
10004428:	a1 00 00 00 00       	mov    eax,ds:0x0	10004429: R_386_32	tzsel
1000442d:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10004430: R_386_32	timezoneStrings
10004434:	83 c0 04             	add    eax,0x4
10004437:	8a 00                	mov    al,BYTE PTR [eax]
10004439:	3c 35                	cmp    al,0x35
1000443b:	74 2a                	je     10004467 <firstRun(bool)+0x1b12>
1000443d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000443e: R_386_32	tzsel
10004442:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10004445: R_386_32	timezoneStrings
10004449:	83 c0 04             	add    eax,0x4
1000444c:	8a 00                	mov    al,BYTE PTR [eax]
1000444e:	3c 2e                	cmp    al,0x2e
10004450:	75 19                	jne    1000446b <firstRun(bool)+0x1b16>
10004452:	a1 00 00 00 00       	mov    eax,ds:0x0	10004453: R_386_32	tzsel
10004457:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000445a: R_386_32	timezoneStrings
1000445e:	83 c0 05             	add    eax,0x5
10004461:	8a 00                	mov    al,BYTE PTR [eax]
10004463:	3c 35                	cmp    al,0x35
10004465:	75 04                	jne    1000446b <firstRun(bool)+0x1b16>
10004467:	b0 01                	mov    al,0x1
10004469:	eb 02                	jmp    1000446d <firstRun(bool)+0x1b18>
1000446b:	b0 00                	mov    al,0x0
1000446d:	a2 00 00 00 00       	mov    ds:0x0,al	1000446e: R_386_32	User::timezoneHalfHourOffset
10004472:	a1 00 00 00 00       	mov    eax,ds:0x0	10004473: R_386_32	tzsel
10004477:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000447a: R_386_32	timezoneStrings
1000447e:	83 c0 02             	add    eax,0x2
10004481:	8a 00                	mov    al,BYTE PTR [eax]
10004483:	0f be c0             	movsx  eax,al
10004486:	83 e8 30             	sub    eax,0x30
10004489:	a3 00 00 00 00       	mov    ds:0x0,eax	1000448a: R_386_32	User::timezoneHourOffset
1000448e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000448f: R_386_32	tzsel
10004493:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10004496: R_386_32	timezoneStrings
1000449a:	83 c0 04             	add    eax,0x4
1000449d:	8a 00                	mov    al,BYTE PTR [eax]
1000449f:	3c 2e                	cmp    al,0x2e
100044a1:	75 37                	jne    100044da <firstRun(bool)+0x1b85>
100044a3:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100044a5: R_386_32	User::timezoneHourOffset
100044a9:	89 d0                	mov    eax,edx
100044ab:	c1 e0 02             	shl    eax,0x2
100044ae:	01 d0                	add    eax,edx
100044b0:	01 c0                	add    eax,eax
100044b2:	a3 00 00 00 00       	mov    ds:0x0,eax	100044b3: R_386_32	User::timezoneHourOffset
100044b7:	a1 00 00 00 00       	mov    eax,ds:0x0	100044b8: R_386_32	tzsel
100044bc:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100044bf: R_386_32	timezoneStrings
100044c3:	83 c0 03             	add    eax,0x3
100044c6:	8a 00                	mov    al,BYTE PTR [eax]
100044c8:	0f be c0             	movsx  eax,al
100044cb:	8d 50 d0             	lea    edx,[eax-0x30]
100044ce:	a1 00 00 00 00       	mov    eax,ds:0x0	100044cf: R_386_32	User::timezoneHourOffset
100044d3:	01 d0                	add    eax,edx
100044d5:	a3 00 00 00 00       	mov    ds:0x0,eax	100044d6: R_386_32	User::timezoneHourOffset
100044da:	a1 00 00 00 00       	mov    eax,ds:0x0	100044db: R_386_32	tzsel
100044df:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100044e2: R_386_32	timezoneStrings
100044e6:	40                   	inc    eax
100044e7:	8a 00                	mov    al,BYTE PTR [eax]
100044e9:	3c 2d                	cmp    al,0x2d
100044eb:	75 0c                	jne    100044f9 <firstRun(bool)+0x1ba4>
100044ed:	a1 00 00 00 00       	mov    eax,ds:0x0	100044ee: R_386_32	User::timezoneHourOffset
100044f2:	f7 d8                	neg    eax
100044f4:	a3 00 00 00 00       	mov    ds:0x0,eax	100044f5: R_386_32	User::timezoneHourOffset
100044f9:	a0 00 00 00 00       	mov    al,ds:0x0	100044fa: R_386_32	User::timezoneHalfHourOffset
100044fe:	0f b6 d0             	movzx  edx,al
10004501:	a1 00 00 00 00       	mov    eax,ds:0x0	10004502: R_386_32	User::timezoneHourOffset
10004506:	83 ec 04             	sub    esp,0x4
10004509:	52                   	push   edx
1000450a:	50                   	push   eax
1000450b:	68 d2 a9 00 10       	push   0x1000a9d2	1000450c: R_386_32	.text
10004510:	e8 fc ff ff ff       	call   10004511 <firstRun(bool)+0x1bbc>	10004511: R_386_PC32	Dbg::kprintf(char const*, ...)
10004515:	83 c4 10             	add    esp,0x10
10004518:	a1 00 00 00 00       	mov    eax,ds:0x0	10004519: R_386_32	Krnl::computer
1000451d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004523:	83 ec 04             	sub    esp,0x4
10004526:	ff b5 d8 fe ff ff    	push   DWORD PTR [ebp-0x128]
1000452c:	ff b5 d4 fe ff ff    	push   DWORD PTR [ebp-0x12c]
10004532:	50                   	push   eax
10004533:	e8 fc ff ff ff       	call   10004534 <firstRun(bool)+0x1bdf>	10004534: R_386_PC32	Clock::setTimeInDatetimeLocal(datetime_t)
10004538:	83 c4 10             	add    esp,0x10
1000453b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000453d: R_386_32	installKey
10004542:	83 ec 0c             	sub    esp,0xc
10004545:	68 a0 0f 00 00       	push   0xfa0
1000454a:	e8 fc ff ff ff       	call   1000454b <firstRun(bool)+0x1bf6>	1000454b: R_386_PC32	milliTenthSleep(unsigned int)
1000454f:	83 c4 10             	add    esp,0x10
10004552:	eb 01                	jmp    10004555 <firstRun(bool)+0x1c00>
10004554:	90                   	nop
10004555:	e8 fc ff ff ff       	call   10004556 <firstRun(bool)+0x1c01>	10004556: R_386_PC32	drawBootScreen()
1000455a:	83 ec 0c             	sub    esp,0xc
1000455d:	68 58 1b 00 00       	push   0x1b58
10004562:	e8 fc ff ff ff       	call   10004563 <firstRun(bool)+0x1c0e>	10004563: R_386_PC32	milliTenthSleep(unsigned int)
10004567:	83 c4 10             	add    esp,0x10
1000456a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000456c: R_386_32	installKey
10004571:	e8 fc ff ff ff       	call   10004572 <firstRun(bool)+0x1c1d>	10004572: R_386_PC32	drawBootScreen()
10004576:	83 ec 0c             	sub    esp,0xc
10004579:	68 df a9 00 10       	push   0x1000a9df	1000457a: R_386_32	.text
1000457e:	6a 10                	push   0x10
10004580:	6a 37                	push   0x37
10004582:	6a 03                	push   0x3
10004584:	6a 14                	push   0x14
10004586:	e8 fc ff ff ff       	call   10004587 <firstRun(bool)+0x1c32>	10004587: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000458b:	83 c4 20             	add    esp,0x20
1000458e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000458f: R_386_32	term
10004593:	83 ec 04             	sub    esp,0x4
10004596:	6a 06                	push   0x6
10004598:	6a 16                	push   0x16
1000459a:	50                   	push   eax
1000459b:	e8 fc ff ff ff       	call   1000459c <firstRun(bool)+0x1c47>	1000459c: R_386_PC32	VgaText::setCursor(int, int)
100045a0:	83 c4 10             	add    esp,0x10
100045a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100045a4: R_386_32	term
100045a8:	83 ec 08             	sub    esp,0x8
100045ab:	68 f0 a9 00 10       	push   0x1000a9f0	100045ac: R_386_32	.text
100045b0:	50                   	push   eax
100045b1:	e8 fc ff ff ff       	call   100045b2 <firstRun(bool)+0x1c5d>	100045b2: R_386_PC32	VgaText::puts(char const*)
100045b6:	83 c4 10             	add    esp,0x10
100045b9:	a1 00 00 00 00       	mov    eax,ds:0x0	100045ba: R_386_32	term
100045be:	83 ec 04             	sub    esp,0x4
100045c1:	6a 07                	push   0x7
100045c3:	6a 16                	push   0x16
100045c5:	50                   	push   eax
100045c6:	e8 fc ff ff ff       	call   100045c7 <firstRun(bool)+0x1c72>	100045c7: R_386_PC32	VgaText::setCursor(int, int)
100045cb:	83 c4 10             	add    esp,0x10
100045ce:	a1 00 00 00 00       	mov    eax,ds:0x0	100045cf: R_386_32	term
100045d3:	83 ec 08             	sub    esp,0x8
100045d6:	68 24 aa 00 10       	push   0x1000aa24	100045d7: R_386_32	.text
100045db:	50                   	push   eax
100045dc:	e8 fc ff ff ff       	call   100045dd <firstRun(bool)+0x1c88>	100045dd: R_386_PC32	VgaText::puts(char const*)
100045e1:	83 c4 10             	add    esp,0x10
100045e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100045e5: R_386_32	term
100045e9:	83 ec 04             	sub    esp,0x4
100045ec:	6a 18                	push   0x18
100045ee:	6a 11                	push   0x11
100045f0:	50                   	push   eax
100045f1:	e8 fc ff ff ff       	call   100045f2 <firstRun(bool)+0x1c9d>	100045f2: R_386_PC32	VgaText::setCursor(int, int)
100045f6:	83 c4 10             	add    esp,0x10
100045f9:	a1 00 00 00 00       	mov    eax,ds:0x0	100045fa: R_386_32	term
100045fe:	6a 0b                	push   0xb
10004600:	6a 03                	push   0x3
10004602:	68 8a a9 00 10       	push   0x1000a98a	10004603: R_386_32	.text
10004607:	50                   	push   eax
10004608:	e8 fc ff ff ff       	call   10004609 <firstRun(bool)+0x1cb4>	10004609: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000460d:	83 c4 10             	add    esp,0x10
10004610:	c7 45 8c 03 00 00 00 	mov    DWORD PTR [ebp-0x74],0x3
10004617:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000461d:	bb 9c ac 00 10       	mov    ebx,0x1000ac9c	1000461e: R_386_32	.text
10004622:	ba 03 00 00 00       	mov    edx,0x3
10004627:	89 c7                	mov    edi,eax
10004629:	89 de                	mov    esi,ebx
1000462b:	89 d1                	mov    ecx,edx
1000462d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000462f:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [ebp-0x44],0x0
10004636:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10004639:	3b 45 8c             	cmp    eax,DWORD PTR [ebp-0x74]
1000463c:	7d 68                	jge    100046a6 <firstRun(bool)+0x1d51>
1000463e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000463f: R_386_32	term
10004643:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10004646:	83 c2 09             	add    edx,0x9
10004649:	83 ec 04             	sub    esp,0x4
1000464c:	52                   	push   edx
1000464d:	6a 16                	push   0x16
1000464f:	50                   	push   eax
10004650:	e8 fc ff ff ff       	call   10004651 <firstRun(bool)+0x1cfc>	10004651: R_386_PC32	VgaText::setCursor(int, int)
10004655:	83 c4 10             	add    esp,0x10
10004658:	a1 00 00 00 00       	mov    eax,ds:0x0	10004659: R_386_32	term
1000465d:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000465f: R_386_32	modesel
10004663:	39 55 bc             	cmp    DWORD PTR [ebp-0x44],edx
10004666:	75 07                	jne    1000466f <firstRun(bool)+0x1d1a>
10004668:	bb 00 00 00 00       	mov    ebx,0x0
1000466d:	eb 05                	jmp    10004674 <firstRun(bool)+0x1d1f>
1000466f:	bb 0f 00 00 00       	mov    ebx,0xf
10004674:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004676: R_386_32	modesel
1000467a:	39 55 bc             	cmp    DWORD PTR [ebp-0x44],edx
1000467d:	75 07                	jne    10004686 <firstRun(bool)+0x1d31>
1000467f:	b9 0f 00 00 00       	mov    ecx,0xf
10004684:	eb 05                	jmp    1000468b <firstRun(bool)+0x1d36>
10004686:	b9 00 00 00 00       	mov    ecx,0x0
1000468b:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
1000468e:	8b 94 95 c8 fe ff ff 	mov    edx,DWORD PTR [ebp+edx*4-0x138]
10004695:	53                   	push   ebx
10004696:	51                   	push   ecx
10004697:	52                   	push   edx
10004698:	50                   	push   eax
10004699:	e8 fc ff ff ff       	call   1000469a <firstRun(bool)+0x1d45>	1000469a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000469e:	83 c4 10             	add    esp,0x10
100046a1:	ff 45 bc             	inc    DWORD PTR [ebp-0x44]
100046a4:	eb 90                	jmp    10004636 <firstRun(bool)+0x1ce1>
100046a6:	a0 00 00 00 00       	mov    al,ds:0x0	100046a7: R_386_32	installKey
100046ab:	84 c0                	test   al,al
100046ad:	0f 94 c0             	sete   al
100046b0:	84 c0                	test   al,al
100046b2:	74 02                	je     100046b6 <firstRun(bool)+0x1d61>
100046b4:	eb f0                	jmp    100046a6 <firstRun(bool)+0x1d51>
100046b6:	a1 00 00 00 00       	mov    eax,ds:0x0	100046b7: R_386_32	term
100046bb:	05 82 00 00 00       	add    eax,0x82
100046c0:	83 ec 04             	sub    esp,0x4
100046c3:	6a 04                	push   0x4
100046c5:	6a 00                	push   0x0
100046c7:	50                   	push   eax
100046c8:	e8 fc ff ff ff       	call   100046c9 <firstRun(bool)+0x1d74>	100046c9: R_386_PC32	memset
100046cd:	83 c4 10             	add    esp,0x10
100046d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100046d1: R_386_32	term
100046d5:	05 02 01 00 00       	add    eax,0x102
100046da:	83 ec 04             	sub    esp,0x4
100046dd:	6a 04                	push   0x4
100046df:	6a 00                	push   0x0
100046e1:	50                   	push   eax
100046e2:	e8 fc ff ff ff       	call   100046e3 <firstRun(bool)+0x1d8e>	100046e3: R_386_PC32	memset
100046e7:	83 c4 10             	add    esp,0x10
100046ea:	a0 00 00 00 00       	mov    al,ds:0x0	100046eb: R_386_32	installKey
100046ef:	3c 01                	cmp    al,0x1
100046f1:	0f 94 c0             	sete   al
100046f4:	84 c0                	test   al,al
100046f6:	74 20                	je     10004718 <firstRun(bool)+0x1dc3>
100046f8:	a1 00 00 00 00       	mov    eax,ds:0x0	100046f9: R_386_32	modesel
100046fd:	48                   	dec    eax
100046fe:	a3 00 00 00 00       	mov    ds:0x0,eax	100046ff: R_386_32	modesel
10004703:	a1 00 00 00 00       	mov    eax,ds:0x0	10004704: R_386_32	modesel
10004708:	85 c0                	test   eax,eax
1000470a:	79 5a                	jns    10004766 <firstRun(bool)+0x1e11>
1000470c:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000470e: R_386_32	modesel
10004716:	eb 4e                	jmp    10004766 <firstRun(bool)+0x1e11>
10004718:	a0 00 00 00 00       	mov    al,ds:0x0	10004719: R_386_32	installKey
1000471d:	3c 02                	cmp    al,0x2
1000471f:	0f 94 c0             	sete   al
10004722:	84 c0                	test   al,al
10004724:	74 20                	je     10004746 <firstRun(bool)+0x1df1>
10004726:	a1 00 00 00 00       	mov    eax,ds:0x0	10004727: R_386_32	modesel
1000472b:	40                   	inc    eax
1000472c:	a3 00 00 00 00       	mov    ds:0x0,eax	1000472d: R_386_32	modesel
10004731:	a1 00 00 00 00       	mov    eax,ds:0x0	10004732: R_386_32	modesel
10004736:	39 45 8c             	cmp    DWORD PTR [ebp-0x74],eax
10004739:	7f 2b                	jg     10004766 <firstRun(bool)+0x1e11>
1000473b:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
1000473e:	48                   	dec    eax
1000473f:	a3 00 00 00 00       	mov    ds:0x0,eax	10004740: R_386_32	modesel
10004744:	eb 20                	jmp    10004766 <firstRun(bool)+0x1e11>
10004746:	a0 00 00 00 00       	mov    al,ds:0x0	10004747: R_386_32	installKey
1000474b:	3c 0a                	cmp    al,0xa
1000474d:	0f 94 c0             	sete   al
10004750:	84 c0                	test   al,al
10004752:	75 2e                	jne    10004782 <firstRun(bool)+0x1e2d>
10004754:	a0 00 00 00 00       	mov    al,ds:0x0	10004755: R_386_32	installKey
10004759:	3c 1b                	cmp    al,0x1b
1000475b:	0f 94 c0             	sete   al
1000475e:	84 c0                	test   al,al
10004760:	0f 85 7c f9 ff ff    	jne    100040e2 <firstRun(bool)+0x178d>
10004766:	83 ec 0c             	sub    esp,0xc
10004769:	68 f4 01 00 00       	push   0x1f4
1000476e:	e8 fc ff ff ff       	call   1000476f <firstRun(bool)+0x1e1a>	1000476f: R_386_PC32	milliTenthSleep(unsigned int)
10004773:	83 c4 10             	add    esp,0x10
10004776:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004778: R_386_32	installKey
1000477d:	e9 ad fe ff ff       	jmp    1000462f <firstRun(bool)+0x1cda>
10004782:	90                   	nop
10004783:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
1000478a:	0f 84 ff 00 00 00    	je     1000488f <firstRun(bool)+0x1f3a>
10004790:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004792: R_386_32	showSidebar
10004797:	a1 00 00 00 00       	mov    eax,ds:0x0	10004798: R_386_32	term
1000479c:	83 ec 0c             	sub    esp,0xc
1000479f:	50                   	push   eax
100047a0:	e8 fc ff ff ff       	call   100047a1 <firstRun(bool)+0x1e4c>	100047a1: R_386_PC32	setActiveTerminal(VgaText*)
100047a5:	83 c4 10             	add    esp,0x10
100047a8:	e8 fc ff ff ff       	call   100047a9 <firstRun(bool)+0x1e54>	100047a9: R_386_PC32	drawBootScreen()
100047ad:	83 ec 0c             	sub    esp,0xc
100047b0:	68 59 aa 00 10       	push   0x1000aa59	100047b1: R_386_32	.text
100047b5:	6a 0d                	push   0xd
100047b7:	6a 32                	push   0x32
100047b9:	6a 05                	push   0x5
100047bb:	6a 16                	push   0x16
100047bd:	e8 fc ff ff ff       	call   100047be <firstRun(bool)+0x1e69>	100047be: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100047c2:	83 c4 20             	add    esp,0x20
100047c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100047c6: R_386_32	term
100047ca:	83 ec 04             	sub    esp,0x4
100047cd:	6a 08                	push   0x8
100047cf:	6a 18                	push   0x18
100047d1:	50                   	push   eax
100047d2:	e8 fc ff ff ff       	call   100047d3 <firstRun(bool)+0x1e7e>	100047d3: R_386_PC32	VgaText::setCursor(int, int)
100047d7:	83 c4 10             	add    esp,0x10
100047da:	a1 00 00 00 00       	mov    eax,ds:0x0	100047db: R_386_32	term
100047df:	83 ec 08             	sub    esp,0x8
100047e2:	68 70 aa 00 10       	push   0x1000aa70	100047e3: R_386_32	.text
100047e7:	50                   	push   eax
100047e8:	e8 fc ff ff ff       	call   100047e9 <firstRun(bool)+0x1e94>	100047e9: R_386_PC32	VgaText::puts(char const*)
100047ed:	83 c4 10             	add    esp,0x10
100047f0:	a1 00 00 00 00       	mov    eax,ds:0x0	100047f1: R_386_32	term
100047f5:	83 ec 04             	sub    esp,0x4
100047f8:	6a 0a                	push   0xa
100047fa:	6a 18                	push   0x18
100047fc:	50                   	push   eax
100047fd:	e8 fc ff ff ff       	call   100047fe <firstRun(bool)+0x1ea9>	100047fe: R_386_PC32	VgaText::setCursor(int, int)
10004802:	83 c4 10             	add    esp,0x10
10004805:	a1 00 00 00 00       	mov    eax,ds:0x0	10004806: R_386_32	term
1000480a:	83 ec 08             	sub    esp,0x8
1000480d:	68 98 aa 00 10       	push   0x1000aa98	1000480e: R_386_32	.text
10004812:	50                   	push   eax
10004813:	e8 fc ff ff ff       	call   10004814 <firstRun(bool)+0x1ebf>	10004814: R_386_PC32	VgaText::puts(char const*)
10004818:	83 c4 10             	add    esp,0x10
1000481b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000481c: R_386_32	term
10004820:	83 ec 04             	sub    esp,0x4
10004823:	6a 0b                	push   0xb
10004825:	6a 18                	push   0x18
10004827:	50                   	push   eax
10004828:	e8 fc ff ff ff       	call   10004829 <firstRun(bool)+0x1ed4>	10004829: R_386_PC32	VgaText::setCursor(int, int)
1000482d:	83 c4 10             	add    esp,0x10
10004830:	a1 00 00 00 00       	mov    eax,ds:0x0	10004831: R_386_32	term
10004835:	83 ec 08             	sub    esp,0x8
10004838:	68 c1 aa 00 10       	push   0x1000aac1	10004839: R_386_32	.text
1000483d:	50                   	push   eax
1000483e:	e8 fc ff ff ff       	call   1000483f <firstRun(bool)+0x1eea>	1000483f: R_386_PC32	VgaText::puts(char const*)
10004843:	83 c4 10             	add    esp,0x10
10004846:	a1 00 00 00 00       	mov    eax,ds:0x0	10004847: R_386_32	term
1000484b:	83 ec 04             	sub    esp,0x4
1000484e:	6a 0e                	push   0xe
10004850:	6a 18                	push   0x18
10004852:	50                   	push   eax
10004853:	e8 fc ff ff ff       	call   10004854 <firstRun(bool)+0x1eff>	10004854: R_386_PC32	VgaText::setCursor(int, int)
10004858:	83 c4 10             	add    esp,0x10
1000485b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000485c: R_386_32	term
10004860:	83 ec 08             	sub    esp,0x8
10004863:	68 d0 aa 00 10       	push   0x1000aad0	10004864: R_386_32	.text
10004868:	50                   	push   eax
10004869:	e8 fc ff ff ff       	call   1000486a <firstRun(bool)+0x1f15>	1000486a: R_386_PC32	VgaText::puts(char const*)
1000486e:	83 c4 10             	add    esp,0x10
10004871:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004873: R_386_32	installKey
10004878:	a0 00 00 00 00       	mov    al,ds:0x0	10004879: R_386_32	installKey
1000487d:	84 c0                	test   al,al
1000487f:	0f 94 c0             	sete   al
10004882:	84 c0                	test   al,al
10004884:	74 02                	je     10004888 <firstRun(bool)+0x1f33>
10004886:	eb f0                	jmp    10004878 <firstRun(bool)+0x1f23>
10004888:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000488a: R_386_32	installKey
1000488f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004891: R_386_32	installKey
10004896:	83 ec 0c             	sub    esp,0xc
10004899:	68 84 03 00 00       	push   0x384
1000489e:	e8 fc ff ff ff       	call   1000489f <firstRun(bool)+0x1f4a>	1000489f: R_386_PC32	milliTenthSleep(unsigned int)
100048a3:	83 c4 10             	add    esp,0x10
100048a6:	e8 fc ff ff ff       	call   100048a7 <firstRun(bool)+0x1f52>	100048a7: R_386_PC32	drawBootScreen()
100048ab:	83 ec 0c             	sub    esp,0xc
100048ae:	68 18 2e 00 00       	push   0x2e18
100048b3:	e8 fc ff ff ff       	call   100048b4 <firstRun(bool)+0x1f5f>	100048b4: R_386_PC32	milliTenthSleep(unsigned int)
100048b8:	83 c4 10             	add    esp,0x10
100048bb:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100048c2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100048c4: R_386_32	installKey
100048c9:	e8 fc ff ff ff       	call   100048ca <firstRun(bool)+0x1f75>	100048ca: R_386_PC32	drawBootScreen()
100048ce:	83 ec 0c             	sub    esp,0xc
100048d1:	68 fa aa 00 10       	push   0x1000aafa	100048d2: R_386_32	.text
100048d6:	6a 0e                	push   0xe
100048d8:	6a 32                	push   0x32
100048da:	6a 02                	push   0x2
100048dc:	6a 16                	push   0x16
100048de:	e8 fc ff ff ff       	call   100048df <firstRun(bool)+0x1f8a>	100048df: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100048e3:	83 c4 20             	add    esp,0x20
100048e6:	a1 00 00 00 00       	mov    eax,ds:0x0	100048e7: R_386_32	term
100048eb:	83 ec 04             	sub    esp,0x4
100048ee:	6a 18                	push   0x18
100048f0:	6a 11                	push   0x11
100048f2:	50                   	push   eax
100048f3:	e8 fc ff ff ff       	call   100048f4 <firstRun(bool)+0x1f9f>	100048f4: R_386_PC32	VgaText::setCursor(int, int)
100048f8:	83 c4 10             	add    esp,0x10
100048fb:	a1 00 00 00 00       	mov    eax,ds:0x0	100048fc: R_386_32	term
10004900:	6a 0b                	push   0xb
10004902:	6a 03                	push   0x3
10004904:	68 8a a9 00 10       	push   0x1000a98a	10004905: R_386_32	.text
10004909:	50                   	push   eax
1000490a:	e8 fc ff ff ff       	call   1000490b <firstRun(bool)+0x1fb6>	1000490b: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000490f:	83 c4 10             	add    esp,0x10
10004912:	a1 00 00 00 00       	mov    eax,ds:0x0	10004913: R_386_32	term
10004917:	83 ec 04             	sub    esp,0x4
1000491a:	6a 05                	push   0x5
1000491c:	6a 18                	push   0x18
1000491e:	50                   	push   eax
1000491f:	e8 fc ff ff ff       	call   10004920 <firstRun(bool)+0x1fcb>	10004920: R_386_PC32	VgaText::setCursor(int, int)
10004924:	83 c4 10             	add    esp,0x10
10004927:	a1 00 00 00 00       	mov    eax,ds:0x0	10004928: R_386_32	term
1000492c:	83 ec 08             	sub    esp,0x8
1000492f:	68 08 ab 00 10       	push   0x1000ab08	10004930: R_386_32	.text
10004934:	50                   	push   eax
10004935:	e8 fc ff ff ff       	call   10004936 <firstRun(bool)+0x1fe1>	10004936: R_386_PC32	VgaText::puts(char const*)
1000493a:	83 c4 10             	add    esp,0x10
1000493d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000493e: R_386_32	term
10004942:	83 ec 04             	sub    esp,0x4
10004945:	6a 06                	push   0x6
10004947:	6a 18                	push   0x18
10004949:	50                   	push   eax
1000494a:	e8 fc ff ff ff       	call   1000494b <firstRun(bool)+0x1ff6>	1000494b: R_386_PC32	VgaText::setCursor(int, int)
1000494f:	83 c4 10             	add    esp,0x10
10004952:	a1 00 00 00 00       	mov    eax,ds:0x0	10004953: R_386_32	term
10004957:	83 ec 08             	sub    esp,0x8
1000495a:	68 60 a9 00 10       	push   0x1000a960	1000495b: R_386_32	.text
1000495f:	50                   	push   eax
10004960:	e8 fc ff ff ff       	call   10004961 <firstRun(bool)+0x200c>	10004961: R_386_PC32	VgaText::puts(char const*)
10004965:	83 c4 10             	add    esp,0x10
10004968:	c6 05 10 00 00 00 00 	mov    BYTE PTR ds:0x10,0x0	1000496a: R_386_32	pkeybuf
1000496f:	c6 05 11 00 00 00 00 	mov    BYTE PTR ds:0x11,0x0	10004971: R_386_32	pkeybuf
10004976:	a1 00 00 00 00       	mov    eax,ds:0x0	10004977: R_386_32	term
1000497b:	83 ec 04             	sub    esp,0x4
1000497e:	6a 08                	push   0x8
10004980:	6a 1c                	push   0x1c
10004982:	50                   	push   eax
10004983:	e8 fc ff ff ff       	call   10004984 <firstRun(bool)+0x202f>	10004984: R_386_PC32	VgaText::setCursor(int, int)
10004988:	83 c4 10             	add    esp,0x10
1000498b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000498c: R_386_32	term
10004990:	83 ec 08             	sub    esp,0x8
10004993:	68 00 00 00 00       	push   0x0	10004994: R_386_32	pkeybuf
10004998:	50                   	push   eax
10004999:	e8 fc ff ff ff       	call   1000499a <firstRun(bool)+0x2045>	1000499a: R_386_PC32	VgaText::puts(char const*)
1000499e:	83 c4 10             	add    esp,0x10
100049a1:	a1 00 00 00 00       	mov    eax,ds:0x0	100049a2: R_386_32	term
100049a6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100049a9:	83 c2 1c             	add    edx,0x1c
100049ac:	83 ec 04             	sub    esp,0x4
100049af:	6a 08                	push   0x8
100049b1:	52                   	push   edx
100049b2:	50                   	push   eax
100049b3:	e8 fc ff ff ff       	call   100049b4 <firstRun(bool)+0x205f>	100049b4: R_386_PC32	VgaText::setCursor(int, int)
100049b8:	83 c4 10             	add    esp,0x10
100049bb:	a1 00 00 00 00       	mov    eax,ds:0x0	100049bc: R_386_32	term
100049c0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100049c3:	81 c2 00 00 00 00    	add    edx,0x0	100049c5: R_386_32	pkeybuf
100049c9:	8a 12                	mov    dl,BYTE PTR [edx]
100049cb:	0f be d2             	movsx  edx,dl
100049ce:	6a 00                	push   0x0
100049d0:	6a 0f                	push   0xf
100049d2:	52                   	push   edx
100049d3:	50                   	push   eax
100049d4:	e8 fc ff ff ff       	call   100049d5 <firstRun(bool)+0x2080>	100049d5: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100049d9:	83 c4 10             	add    esp,0x10
100049dc:	a1 00 00 00 00       	mov    eax,ds:0x0	100049dd: R_386_32	term
100049e1:	83 ec 04             	sub    esp,0x4
100049e4:	6a 08                	push   0x8
100049e6:	6a 2c                	push   0x2c
100049e8:	50                   	push   eax
100049e9:	e8 fc ff ff ff       	call   100049ea <firstRun(bool)+0x2095>	100049ea: R_386_PC32	VgaText::setCursor(int, int)
100049ee:	83 c4 10             	add    esp,0x10
100049f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100049f2: R_386_32	term
100049f6:	6a 0f                	push   0xf
100049f8:	6a 0f                	push   0xf
100049fa:	6a 20                	push   0x20
100049fc:	50                   	push   eax
100049fd:	e8 fc ff ff ff       	call   100049fe <firstRun(bool)+0x20a9>	100049fe: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004a02:	83 c4 10             	add    esp,0x10
10004a05:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a06: R_386_32	term
10004a0a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004a0d:	83 c2 1c             	add    edx,0x1c
10004a10:	83 ec 04             	sub    esp,0x4
10004a13:	6a 08                	push   0x8
10004a15:	52                   	push   edx
10004a16:	50                   	push   eax
10004a17:	e8 fc ff ff ff       	call   10004a18 <firstRun(bool)+0x20c3>	10004a18: R_386_PC32	VgaText::setCursor(int, int)
10004a1c:	83 c4 10             	add    esp,0x10
10004a1f:	a0 00 00 00 00       	mov    al,ds:0x0	10004a20: R_386_32	installKey
10004a24:	84 c0                	test   al,al
10004a26:	0f 94 c0             	sete   al
10004a29:	84 c0                	test   al,al
10004a2b:	74 02                	je     10004a2f <firstRun(bool)+0x20da>
10004a2d:	eb f0                	jmp    10004a1f <firstRun(bool)+0x20ca>
10004a2f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a30: R_386_32	term
10004a34:	05 82 00 00 00       	add    eax,0x82
10004a39:	83 ec 04             	sub    esp,0x4
10004a3c:	6a 10                	push   0x10
10004a3e:	6a 00                	push   0x0
10004a40:	50                   	push   eax
10004a41:	e8 fc ff ff ff       	call   10004a42 <firstRun(bool)+0x20ed>	10004a42: R_386_PC32	memset
10004a46:	83 c4 10             	add    esp,0x10
10004a49:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a4a: R_386_32	term
10004a4e:	05 02 01 00 00       	add    eax,0x102
10004a53:	83 ec 04             	sub    esp,0x4
10004a56:	6a 10                	push   0x10
10004a58:	6a 00                	push   0x0
10004a5a:	50                   	push   eax
10004a5b:	e8 fc ff ff ff       	call   10004a5c <firstRun(bool)+0x2107>	10004a5c: R_386_PC32	memset
10004a60:	83 c4 10             	add    esp,0x10
10004a63:	a0 00 00 00 00       	mov    al,ds:0x0	10004a64: R_386_32	installKey
10004a68:	3c 03                	cmp    al,0x3
10004a6a:	74 09                	je     10004a75 <firstRun(bool)+0x2120>
10004a6c:	a0 00 00 00 00       	mov    al,ds:0x0	10004a6d: R_386_32	installKey
10004a71:	3c 08                	cmp    al,0x8
10004a73:	75 04                	jne    10004a79 <firstRun(bool)+0x2124>
10004a75:	b0 01                	mov    al,0x1
10004a77:	eb 02                	jmp    10004a7b <firstRun(bool)+0x2126>
10004a79:	b0 00                	mov    al,0x0
10004a7b:	84 c0                	test   al,al
10004a7d:	74 31                	je     10004ab0 <firstRun(bool)+0x215b>
10004a7f:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
10004a82:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10004a86:	75 14                	jne    10004a9c <firstRun(bool)+0x2147>
10004a88:	83 ec 0c             	sub    esp,0xc
10004a8b:	68 00 00 00 00       	push   0x0	10004a8c: R_386_32	pkeybuf
10004a90:	e8 fc ff ff ff       	call   10004a91 <firstRun(bool)+0x213c>	10004a91: R_386_PC32	strlen
10004a95:	83 c4 10             	add    esp,0x10
10004a98:	48                   	dec    eax
10004a99:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10004a9c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004a9f:	05 00 00 00 00       	add    eax,0x0	10004aa0: R_386_32	pkeybuf
10004aa4:	8a 00                	mov    al,BYTE PTR [eax]
10004aa6:	3c 2d                	cmp    al,0x2d
10004aa8:	0f 85 6f 03 00 00    	jne    10004e1d <firstRun(bool)+0x24c8>
10004aae:	eb cf                	jmp    10004a7f <firstRun(bool)+0x212a>
10004ab0:	a0 00 00 00 00       	mov    al,ds:0x0	10004ab1: R_386_32	installKey
10004ab5:	3c 2f                	cmp    al,0x2f
10004ab7:	7e 09                	jle    10004ac2 <firstRun(bool)+0x216d>
10004ab9:	a0 00 00 00 00       	mov    al,ds:0x0	10004aba: R_386_32	installKey
10004abe:	3c 39                	cmp    al,0x39
10004ac0:	7e 36                	jle    10004af8 <firstRun(bool)+0x21a3>
10004ac2:	a0 00 00 00 00       	mov    al,ds:0x0	10004ac3: R_386_32	installKey
10004ac7:	3c 40                	cmp    al,0x40
10004ac9:	7e 09                	jle    10004ad4 <firstRun(bool)+0x217f>
10004acb:	a0 00 00 00 00       	mov    al,ds:0x0	10004acc: R_386_32	installKey
10004ad0:	3c 5a                	cmp    al,0x5a
10004ad2:	7e 24                	jle    10004af8 <firstRun(bool)+0x21a3>
10004ad4:	a0 00 00 00 00       	mov    al,ds:0x0	10004ad5: R_386_32	installKey
10004ad9:	3c 60                	cmp    al,0x60
10004adb:	7e 09                	jle    10004ae6 <firstRun(bool)+0x2191>
10004add:	a0 00 00 00 00       	mov    al,ds:0x0	10004ade: R_386_32	installKey
10004ae2:	3c 7a                	cmp    al,0x7a
10004ae4:	7e 12                	jle    10004af8 <firstRun(bool)+0x21a3>
10004ae6:	a0 00 00 00 00       	mov    al,ds:0x0	10004ae7: R_386_32	installKey
10004aeb:	3c 20                	cmp    al,0x20
10004aed:	74 09                	je     10004af8 <firstRun(bool)+0x21a3>
10004aef:	a0 00 00 00 00       	mov    al,ds:0x0	10004af0: R_386_32	installKey
10004af4:	3c 04                	cmp    al,0x4
10004af6:	75 04                	jne    10004afc <firstRun(bool)+0x21a7>
10004af8:	b0 01                	mov    al,0x1
10004afa:	eb 02                	jmp    10004afe <firstRun(bool)+0x21a9>
10004afc:	b0 00                	mov    al,0x0
10004afe:	84 c0                	test   al,al
10004b00:	0f 84 a3 00 00 00    	je     10004ba9 <firstRun(bool)+0x2254>
10004b06:	a0 00 00 00 00       	mov    al,ds:0x0	10004b07: R_386_32	installKey
10004b0b:	3c 2f                	cmp    al,0x2f
10004b0d:	7e 09                	jle    10004b18 <firstRun(bool)+0x21c3>
10004b0f:	a0 00 00 00 00       	mov    al,ds:0x0	10004b10: R_386_32	installKey
10004b14:	3c 39                	cmp    al,0x39
10004b16:	7e 24                	jle    10004b3c <firstRun(bool)+0x21e7>
10004b18:	a0 00 00 00 00       	mov    al,ds:0x0	10004b19: R_386_32	installKey
10004b1d:	3c 40                	cmp    al,0x40
10004b1f:	7e 09                	jle    10004b2a <firstRun(bool)+0x21d5>
10004b21:	a0 00 00 00 00       	mov    al,ds:0x0	10004b22: R_386_32	installKey
10004b26:	3c 5a                	cmp    al,0x5a
10004b28:	7e 12                	jle    10004b3c <firstRun(bool)+0x21e7>
10004b2a:	a0 00 00 00 00       	mov    al,ds:0x0	10004b2b: R_386_32	installKey
10004b2f:	3c 60                	cmp    al,0x60
10004b31:	7e 0d                	jle    10004b40 <firstRun(bool)+0x21eb>
10004b33:	a0 00 00 00 00       	mov    al,ds:0x0	10004b34: R_386_32	installKey
10004b38:	3c 7a                	cmp    al,0x7a
10004b3a:	7f 04                	jg     10004b40 <firstRun(bool)+0x21eb>
10004b3c:	b0 01                	mov    al,0x1
10004b3e:	eb 02                	jmp    10004b42 <firstRun(bool)+0x21ed>
10004b40:	b0 00                	mov    al,0x0
10004b42:	84 c0                	test   al,al
10004b44:	74 2c                	je     10004b72 <firstRun(bool)+0x221d>
10004b46:	a0 00 00 00 00       	mov    al,ds:0x0	10004b47: R_386_32	installKey
10004b4b:	3c 60                	cmp    al,0x60
10004b4d:	7e 13                	jle    10004b62 <firstRun(bool)+0x220d>
10004b4f:	a0 00 00 00 00       	mov    al,ds:0x0	10004b50: R_386_32	installKey
10004b54:	3c 7a                	cmp    al,0x7a
10004b56:	7f 0a                	jg     10004b62 <firstRun(bool)+0x220d>
10004b58:	a0 00 00 00 00       	mov    al,ds:0x0	10004b59: R_386_32	installKey
10004b5d:	83 e8 20             	sub    eax,0x20
10004b60:	eb 05                	jmp    10004b67 <firstRun(bool)+0x2212>
10004b62:	a0 00 00 00 00       	mov    al,ds:0x0	10004b63: R_386_32	installKey
10004b67:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004b6a:	81 c2 00 00 00 00    	add    edx,0x0	10004b6c: R_386_32	pkeybuf
10004b70:	88 02                	mov    BYTE PTR [edx],al
10004b72:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10004b75:	83 ec 0c             	sub    esp,0xc
10004b78:	68 00 00 00 00       	push   0x0	10004b79: R_386_32	pkeybuf
10004b7d:	e8 fc ff ff ff       	call   10004b7e <firstRun(bool)+0x2229>	10004b7e: R_386_PC32	strlen
10004b82:	83 c4 10             	add    esp,0x10
10004b85:	89 c2                	mov    edx,eax
10004b87:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004b8a:	39 c2                	cmp    edx,eax
10004b8c:	77 07                	ja     10004b95 <firstRun(bool)+0x2240>
10004b8e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004b95:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004b98:	05 00 00 00 00       	add    eax,0x0	10004b99: R_386_32	pkeybuf
10004b9d:	8a 00                	mov    al,BYTE PTR [eax]
10004b9f:	3c 2d                	cmp    al,0x2d
10004ba1:	0f 85 76 02 00 00    	jne    10004e1d <firstRun(bool)+0x24c8>
10004ba7:	eb c9                	jmp    10004b72 <firstRun(bool)+0x221d>
10004ba9:	a0 00 00 00 00       	mov    al,ds:0x0	10004baa: R_386_32	installKey
10004bae:	3c 1b                	cmp    al,0x1b
10004bb0:	0f 94 c0             	sete   al
10004bb3:	84 c0                	test   al,al
10004bb5:	0f 85 99 f9 ff ff    	jne    10004554 <firstRun(bool)+0x1bff>
10004bbb:	a0 00 00 00 00       	mov    al,ds:0x0	10004bbc: R_386_32	installKey
10004bc0:	3c 0a                	cmp    al,0xa
10004bc2:	0f 94 c0             	sete   al
10004bc5:	84 c0                	test   al,al
10004bc7:	0f 84 50 02 00 00    	je     10004e1d <firstRun(bool)+0x24c8>
10004bcd:	83 ec 0c             	sub    esp,0xc
10004bd0:	68 00 00 00 00       	push   0x0	10004bd1: R_386_32	pkeybuf
10004bd5:	e8 fc ff ff ff       	call   10004bd6 <firstRun(bool)+0x2281>	10004bd6: R_386_PC32	checkExtendedKey(char*)
10004bda:	83 c4 10             	add    esp,0x10
10004bdd:	85 c0                	test   eax,eax
10004bdf:	0f 95 c0             	setne  al
10004be2:	88 45 87             	mov    BYTE PTR [ebp-0x79],al
10004be5:	80 7d 87 00          	cmp    BYTE PTR [ebp-0x79],0x0
10004be9:	74 5b                	je     10004c46 <firstRun(bool)+0x22f1>
10004beb:	83 ec 0c             	sub    esp,0xc
10004bee:	68 f0 0a 00 00       	push   0xaf0
10004bf3:	e8 fc ff ff ff       	call   10004bf4 <firstRun(bool)+0x229f>	10004bf4: R_386_PC32	milliTenthSleep(unsigned int)
10004bf8:	83 c4 10             	add    esp,0x10
10004bfb:	e8 fc ff ff ff       	call   10004bfc <firstRun(bool)+0x22a7>	10004bfc: R_386_PC32	drawBootScreen()
10004c00:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004c02: R_386_32	installKey
10004c07:	83 ec 0c             	sub    esp,0xc
10004c0a:	68 84 03 00 00       	push   0x384
10004c0f:	e8 fc ff ff ff       	call   10004c10 <firstRun(bool)+0x22bb>	10004c10: R_386_PC32	milliTenthSleep(unsigned int)
10004c14:	83 c4 10             	add    esp,0x10
10004c17:	e8 fc ff ff ff       	call   10004c18 <firstRun(bool)+0x22c3>	10004c18: R_386_PC32	drawBootScreen()
10004c1c:	83 ec 0c             	sub    esp,0xc
10004c1f:	68 c0 12 00 00       	push   0x12c0
10004c24:	e8 fc ff ff ff       	call   10004c25 <firstRun(bool)+0x22d0>	10004c25: R_386_PC32	milliTenthSleep(unsigned int)
10004c29:	83 c4 10             	add    esp,0x10
10004c2c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004c2e: R_386_32	installKey
10004c33:	90                   	nop
10004c34:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10004c3b:	0f 84 e8 01 00 00    	je     10004e29 <firstRun(bool)+0x24d4>
10004c41:	e9 d2 02 00 00       	jmp    10004f18 <firstRun(bool)+0x25c3>
10004c46:	83 ec 0c             	sub    esp,0xc
10004c49:	68 f0 0a 00 00       	push   0xaf0
10004c4e:	e8 fc ff ff ff       	call   10004c4f <firstRun(bool)+0x22fa>	10004c4f: R_386_PC32	milliTenthSleep(unsigned int)
10004c53:	83 c4 10             	add    esp,0x10
10004c56:	e8 fc ff ff ff       	call   10004c57 <firstRun(bool)+0x2302>	10004c57: R_386_PC32	drawBootScreen()
10004c5b:	83 ec 08             	sub    esp,0x8
10004c5e:	6a 01                	push   0x1
10004c60:	68 fa aa 00 10       	push   0x1000aafa	10004c61: R_386_32	.text
10004c65:	6a 0e                	push   0xe
10004c67:	6a 32                	push   0x32
10004c69:	6a 02                	push   0x2
10004c6b:	6a 16                	push   0x16
10004c6d:	e8 fc ff ff ff       	call   10004c6e <firstRun(bool)+0x2319>	10004c6e: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10004c72:	83 c4 20             	add    esp,0x20
10004c75:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c76: R_386_32	term
10004c7a:	83 ec 04             	sub    esp,0x4
10004c7d:	6a 05                	push   0x5
10004c7f:	6a 18                	push   0x18
10004c81:	50                   	push   eax
10004c82:	e8 fc ff ff ff       	call   10004c83 <firstRun(bool)+0x232e>	10004c83: R_386_PC32	VgaText::setCursor(int, int)
10004c87:	83 c4 10             	add    esp,0x10
10004c8a:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c8b: R_386_32	term
10004c8f:	6a 07                	push   0x7
10004c91:	6a 00                	push   0x0
10004c93:	68 08 ab 00 10       	push   0x1000ab08	10004c94: R_386_32	.text
10004c98:	50                   	push   eax
10004c99:	e8 fc ff ff ff       	call   10004c9a <firstRun(bool)+0x2345>	10004c9a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004c9e:	83 c4 10             	add    esp,0x10
10004ca1:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ca2: R_386_32	term
10004ca6:	83 ec 04             	sub    esp,0x4
10004ca9:	6a 06                	push   0x6
10004cab:	6a 18                	push   0x18
10004cad:	50                   	push   eax
10004cae:	e8 fc ff ff ff       	call   10004caf <firstRun(bool)+0x235a>	10004caf: R_386_PC32	VgaText::setCursor(int, int)
10004cb3:	83 c4 10             	add    esp,0x10
10004cb6:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cb7: R_386_32	term
10004cbb:	6a 07                	push   0x7
10004cbd:	6a 00                	push   0x0
10004cbf:	68 60 a9 00 10       	push   0x1000a960	10004cc0: R_386_32	.text
10004cc4:	50                   	push   eax
10004cc5:	e8 fc ff ff ff       	call   10004cc6 <firstRun(bool)+0x2371>	10004cc6: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004cca:	83 c4 10             	add    esp,0x10
10004ccd:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cce: R_386_32	term
10004cd2:	83 ec 04             	sub    esp,0x4
10004cd5:	6a 08                	push   0x8
10004cd7:	6a 1c                	push   0x1c
10004cd9:	50                   	push   eax
10004cda:	e8 fc ff ff ff       	call   10004cdb <firstRun(bool)+0x2386>	10004cdb: R_386_PC32	VgaText::setCursor(int, int)
10004cdf:	83 c4 10             	add    esp,0x10
10004ce2:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ce3: R_386_32	term
10004ce7:	6a 07                	push   0x7
10004ce9:	6a 00                	push   0x0
10004ceb:	68 00 00 00 00       	push   0x0	10004cec: R_386_32	pkeybuf
10004cf0:	50                   	push   eax
10004cf1:	e8 fc ff ff ff       	call   10004cf2 <firstRun(bool)+0x239d>	10004cf2: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004cf6:	83 c4 10             	add    esp,0x10
10004cf9:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cfa: R_386_32	term
10004cfe:	83 ec 04             	sub    esp,0x4
10004d01:	6a 08                	push   0x8
10004d03:	6a 2c                	push   0x2c
10004d05:	50                   	push   eax
10004d06:	e8 fc ff ff ff       	call   10004d07 <firstRun(bool)+0x23b2>	10004d07: R_386_PC32	VgaText::setCursor(int, int)
10004d0b:	83 c4 10             	add    esp,0x10
10004d0e:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d0f: R_386_32	term
10004d13:	6a 07                	push   0x7
10004d15:	6a 07                	push   0x7
10004d17:	6a 20                	push   0x20
10004d19:	50                   	push   eax
10004d1a:	e8 fc ff ff ff       	call   10004d1b <firstRun(bool)+0x23c6>	10004d1b: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004d1f:	83 c4 10             	add    esp,0x10
10004d22:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d23: R_386_32	term
10004d27:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004d2a:	83 c2 1c             	add    edx,0x1c
10004d2d:	83 ec 04             	sub    esp,0x4
10004d30:	6a 08                	push   0x8
10004d32:	52                   	push   edx
10004d33:	50                   	push   eax
10004d34:	e8 fc ff ff ff       	call   10004d35 <firstRun(bool)+0x23e0>	10004d35: R_386_PC32	VgaText::setCursor(int, int)
10004d39:	83 c4 10             	add    esp,0x10
10004d3c:	83 ec 0c             	sub    esp,0xc
10004d3f:	68 59 aa 00 10       	push   0x1000aa59	10004d40: R_386_32	.text
10004d44:	6a 0b                	push   0xb
10004d46:	6a 2b                	push   0x2b
10004d48:	6a 0a                	push   0xa
10004d4a:	6a 22                	push   0x22
10004d4c:	e8 fc ff ff ff       	call   10004d4d <firstRun(bool)+0x23f8>	10004d4d: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004d51:	83 c4 20             	add    esp,0x20
10004d54:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d55: R_386_32	term
10004d59:	83 ec 04             	sub    esp,0x4
10004d5c:	6a 0d                	push   0xd
10004d5e:	6a 24                	push   0x24
10004d60:	50                   	push   eax
10004d61:	e8 fc ff ff ff       	call   10004d62 <firstRun(bool)+0x240d>	10004d62: R_386_PC32	VgaText::setCursor(int, int)
10004d66:	83 c4 10             	add    esp,0x10
10004d69:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d6a: R_386_32	term
10004d6e:	83 ec 08             	sub    esp,0x8
10004d71:	68 30 ab 00 10       	push   0x1000ab30	10004d72: R_386_32	.text
10004d76:	50                   	push   eax
10004d77:	e8 fc ff ff ff       	call   10004d78 <firstRun(bool)+0x2423>	10004d78: R_386_PC32	VgaText::puts(char const*)
10004d7c:	83 c4 10             	add    esp,0x10
10004d7f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d80: R_386_32	term
10004d84:	83 ec 04             	sub    esp,0x4
10004d87:	6a 0f                	push   0xf
10004d89:	6a 24                	push   0x24
10004d8b:	50                   	push   eax
10004d8c:	e8 fc ff ff ff       	call   10004d8d <firstRun(bool)+0x2438>	10004d8d: R_386_PC32	VgaText::setCursor(int, int)
10004d91:	83 c4 10             	add    esp,0x10
10004d94:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d95: R_386_32	term
10004d99:	83 ec 08             	sub    esp,0x8
10004d9c:	68 58 ab 00 10       	push   0x1000ab58	10004d9d: R_386_32	.text
10004da1:	50                   	push   eax
10004da2:	e8 fc ff ff ff       	call   10004da3 <firstRun(bool)+0x244e>	10004da3: R_386_PC32	VgaText::puts(char const*)
10004da7:	83 c4 10             	add    esp,0x10
10004daa:	a1 00 00 00 00       	mov    eax,ds:0x0	10004dab: R_386_32	term
10004daf:	83 ec 04             	sub    esp,0x4
10004db2:	6a 10                	push   0x10
10004db4:	6a 24                	push   0x24
10004db6:	50                   	push   eax
10004db7:	e8 fc ff ff ff       	call   10004db8 <firstRun(bool)+0x2463>	10004db8: R_386_PC32	VgaText::setCursor(int, int)
10004dbc:	83 c4 10             	add    esp,0x10
10004dbf:	a1 00 00 00 00       	mov    eax,ds:0x0	10004dc0: R_386_32	term
10004dc4:	83 ec 08             	sub    esp,0x8
10004dc7:	68 7c ab 00 10       	push   0x1000ab7c	10004dc8: R_386_32	.text
10004dcc:	50                   	push   eax
10004dcd:	e8 fc ff ff ff       	call   10004dce <firstRun(bool)+0x2479>	10004dce: R_386_PC32	VgaText::puts(char const*)
10004dd2:	83 c4 10             	add    esp,0x10
10004dd5:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004dd7: R_386_32	installKey
10004ddc:	83 ec 0c             	sub    esp,0xc
10004ddf:	68 94 11 00 00       	push   0x1194
10004de4:	e8 fc ff ff ff       	call   10004de5 <firstRun(bool)+0x2490>	10004de5: R_386_PC32	milliTenthSleep(unsigned int)
10004de9:	83 c4 10             	add    esp,0x10
10004dec:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004dee: R_386_32	installKey
10004df3:	a0 00 00 00 00       	mov    al,ds:0x0	10004df4: R_386_32	installKey
10004df8:	84 c0                	test   al,al
10004dfa:	0f 94 c0             	sete   al
10004dfd:	84 c0                	test   al,al
10004dff:	74 02                	je     10004e03 <firstRun(bool)+0x24ae>
10004e01:	eb f0                	jmp    10004df3 <firstRun(bool)+0x249e>
10004e03:	e8 fc ff ff ff       	call   10004e04 <firstRun(bool)+0x24af>	10004e04: R_386_PC32	drawBootScreen()
10004e08:	83 ec 0c             	sub    esp,0xc
10004e0b:	68 9c 18 00 00       	push   0x189c
10004e10:	e8 fc ff ff ff       	call   10004e11 <firstRun(bool)+0x24bc>	10004e11: R_386_PC32	milliTenthSleep(unsigned int)
10004e15:	83 c4 10             	add    esp,0x10
10004e18:	e9 a5 fa ff ff       	jmp    100048c2 <firstRun(bool)+0x1f6d>
10004e1d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004e1f: R_386_32	installKey
10004e24:	e9 3f fb ff ff       	jmp    10004968 <firstRun(bool)+0x2013>
10004e29:	e8 fc ff ff ff       	call   10004e2a <firstRun(bool)+0x24d5>	10004e2a: R_386_PC32	drawBootScreen()
10004e2e:	83 ec 0c             	sub    esp,0xc
10004e31:	68 9d ab 00 10       	push   0x1000ab9d	10004e32: R_386_32	.text
10004e36:	6a 0d                	push   0xd
10004e38:	6a 32                	push   0x32
10004e3a:	6a 05                	push   0x5
10004e3c:	6a 16                	push   0x16
10004e3e:	e8 fc ff ff ff       	call   10004e3f <firstRun(bool)+0x24ea>	10004e3f: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004e43:	83 c4 20             	add    esp,0x20
10004e46:	83 ec 0c             	sub    esp,0xc
10004e49:	6a 00                	push   0x0
10004e4b:	e8 fc ff ff ff       	call   10004e4c <firstRun(bool)+0x24f7>	10004e4c: R_386_PC32	bootInstallTasks(int)
10004e50:	83 c4 10             	add    esp,0x10
10004e53:	83 ec 04             	sub    esp,0x4
10004e56:	6a 0c                	push   0xc
10004e58:	68 b5 ab 00 10       	push   0x1000abb5	10004e59: R_386_32	.text
10004e5d:	68 c6 ab 00 10       	push   0x1000abc6	10004e5e: R_386_32	.text
10004e62:	e8 fc ff ff ff       	call   10004e63 <firstRun(bool)+0x250e>	10004e63: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
10004e67:	83 c4 10             	add    esp,0x10
10004e6a:	89 45 80             	mov    DWORD PTR [ebp-0x80],eax
10004e6d:	83 ec 0c             	sub    esp,0xc
10004e70:	ff 75 80             	push   DWORD PTR [ebp-0x80]
10004e73:	e8 fc ff ff ff       	call   10004e74 <firstRun(bool)+0x251f>	10004e74: R_386_PC32	Virt::setupPageSwapping(int)
10004e78:	83 c4 10             	add    esp,0x10
10004e7b:	83 ec 0c             	sub    esp,0xc
10004e7e:	6a 01                	push   0x1
10004e80:	e8 fc ff ff ff       	call   10004e81 <firstRun(bool)+0x252c>	10004e81: R_386_PC32	bootInstallTasks(int)
10004e85:	83 c4 10             	add    esp,0x10
10004e88:	83 ec 0c             	sub    esp,0xc
10004e8b:	68 cd ab 00 10       	push   0x1000abcd	10004e8c: R_386_32	.text
10004e90:	e8 fc ff ff ff       	call   10004e91 <firstRun(bool)+0x253c>	10004e91: R_386_PC32	rmtree(char*)
10004e95:	83 c4 10             	add    esp,0x10
10004e98:	83 ec 0c             	sub    esp,0xc
10004e9b:	68 e7 ab 00 10       	push   0x1000abe7	10004e9c: R_386_32	.text
10004ea0:	e8 fc ff ff ff       	call   10004ea1 <firstRun(bool)+0x254c>	10004ea1: R_386_PC32	rmtree(char*)
10004ea5:	83 c4 10             	add    esp,0x10
10004ea8:	83 ec 08             	sub    esp,0x8
10004eab:	68 c0 01 00 00       	push   0x1c0
10004eb0:	68 cd ab 00 10       	push   0x1000abcd	10004eb1: R_386_32	.text
10004eb5:	e8 fc ff ff ff       	call   10004eb6 <firstRun(bool)+0x2561>	10004eb6: R_386_PC32	mkdir(char const*, int)
10004eba:	83 c4 10             	add    esp,0x10
10004ebd:	83 ec 08             	sub    esp,0x8
10004ec0:	68 c0 01 00 00       	push   0x1c0
10004ec5:	68 e7 ab 00 10       	push   0x1000abe7	10004ec6: R_386_32	.text
10004eca:	e8 fc ff ff ff       	call   10004ecb <firstRun(bool)+0x2576>	10004ecb: R_386_PC32	mkdir(char const*, int)
10004ecf:	83 c4 10             	add    esp,0x10
10004ed2:	83 ec 08             	sub    esp,0x8
10004ed5:	68 cd ab 00 10       	push   0x1000abcd	10004ed6: R_386_32	.text
10004eda:	68 00 ac 00 10       	push   0x1000ac00	10004edb: R_386_32	.text
10004edf:	e8 fc ff ff ff       	call   10004ee0 <firstRun(bool)+0x258b>	10004ee0: R_386_PC32	copytree(char*, char*)
10004ee4:	83 c4 10             	add    esp,0x10
10004ee7:	83 ec 0c             	sub    esp,0xc
10004eea:	6a 02                	push   0x2
10004eec:	e8 fc ff ff ff       	call   10004eed <firstRun(bool)+0x2598>	10004eed: R_386_PC32	bootInstallTasks(int)
10004ef1:	83 c4 10             	add    esp,0x10
10004ef4:	83 ec 0c             	sub    esp,0xc
10004ef7:	68 00 00 00 00       	push   0x0	10004ef8: R_386_32	currName
10004efc:	e8 fc ff ff ff       	call   10004efd <firstRun(bool)+0x25a8>	10004efd: R_386_PC32	createUser(char const*)
10004f01:	83 c4 10             	add    esp,0x10
10004f04:	83 ec 0c             	sub    esp,0xc
10004f07:	6a 03                	push   0x3
10004f09:	e8 fc ff ff ff       	call   10004f0a <firstRun(bool)+0x25b5>	10004f0a: R_386_PC32	bootInstallTasks(int)
10004f0e:	83 c4 10             	add    esp,0x10
10004f11:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10004f13: R_386_32	VgaText::hiddenOut
10004f18:	8d 65 f4             	lea    esp,[ebp-0xc]
10004f1b:	5b                   	pop    ebx
10004f1c:	5e                   	pop    esi
10004f1d:	5f                   	pop    edi
10004f1e:	5d                   	pop    ebp
10004f1f:	c3                   	ret    

10004f20 <loadExtensions()>:
10004f20:	55                   	push   ebp
10004f21:	89 e5                	mov    ebp,esp
10004f23:	83 ec 08             	sub    esp,0x8
10004f26:	83 ec 0c             	sub    esp,0xc
10004f29:	68 a8 ac 00 10       	push   0x1000aca8	10004f2a: R_386_32	.text
10004f2e:	e8 fc ff ff ff       	call   10004f2f <loadExtensions()+0xf>	10004f2f: R_386_PC32	KeSetBootMessage(char const*)
10004f33:	83 c4 10             	add    esp,0x10
10004f36:	90                   	nop
10004f37:	c9                   	leave  
10004f38:	c3                   	ret    

10004f39 <rgtree(Reghive_Tag*, int, int)>:
10004f39:	55                   	push   ebp
10004f3a:	89 e5                	mov    ebp,esp
10004f3c:	53                   	push   ebx
10004f3d:	83 ec 44             	sub    esp,0x44
10004f40:	83 7d 0c 01          	cmp    DWORD PTR [ebp+0xc],0x1
10004f44:	75 16                	jne    10004f5c <rgtree(Reghive_Tag*, int, int)+0x23>
10004f46:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10004f4a:	75 10                	jne    10004f5c <rgtree(Reghive_Tag*, int, int)+0x23>
10004f4c:	83 ec 0c             	sub    esp,0xc
10004f4f:	68 be ac 00 10       	push   0x1000acbe	10004f50: R_386_32	.text
10004f54:	e8 fc ff ff ff       	call   10004f55 <rgtree(Reghive_Tag*, int, int)+0x1c>	10004f55: R_386_PC32	Dbg::kprintf(char const*, ...)
10004f59:	83 c4 10             	add    esp,0x10
10004f5c:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
10004f60:	0f 8e a9 00 00 00    	jle    1000500f <rgtree(Reghive_Tag*, int, int)+0xd6>
10004f66:	83 ec 04             	sub    esp,0x4
10004f69:	6a 32                	push   0x32
10004f6b:	6a 00                	push   0x0
10004f6d:	8d 45 be             	lea    eax,[ebp-0x42]
10004f70:	50                   	push   eax
10004f71:	e8 fc ff ff ff       	call   10004f72 <rgtree(Reghive_Tag*, int, int)+0x39>	10004f72: R_386_PC32	memset
10004f76:	83 c4 10             	add    esp,0x10
10004f79:	83 ec 04             	sub    esp,0x4
10004f7c:	8d 45 be             	lea    eax,[ebp-0x42]
10004f7f:	50                   	push   eax
10004f80:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004f83:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004f86:	e8 fc ff ff ff       	call   10004f87 <rgtree(Reghive_Tag*, int, int)+0x4e>	10004f87: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
10004f8b:	83 c4 10             	add    esp,0x10
10004f8e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10004f91:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10004f98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10004f9b:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10004f9e:	7d 15                	jge    10004fb5 <rgtree(Reghive_Tag*, int, int)+0x7c>
10004fa0:	83 ec 0c             	sub    esp,0xc
10004fa3:	68 a3 a7 00 10       	push   0x1000a7a3	10004fa4: R_386_32	.text
10004fa8:	e8 fc ff ff ff       	call   10004fa9 <rgtree(Reghive_Tag*, int, int)+0x70>	10004fa9: R_386_PC32	Dbg::kprintf(char const*, ...)
10004fad:	83 c4 10             	add    esp,0x10
10004fb0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10004fb3:	eb e3                	jmp    10004f98 <rgtree(Reghive_Tag*, int, int)+0x5f>
10004fb5:	83 ec 08             	sub    esp,0x8
10004fb8:	8d 45 be             	lea    eax,[ebp-0x42]
10004fbb:	50                   	push   eax
10004fbc:	68 c3 ac 00 10       	push   0x1000acc3	10004fbd: R_386_32	.text
10004fc1:	e8 fc ff ff ff       	call   10004fc2 <rgtree(Reghive_Tag*, int, int)+0x89>	10004fc2: R_386_PC32	Dbg::kprintf(char const*, ...)
10004fc6:	83 c4 10             	add    esp,0x10
10004fc9:	83 7d f0 4e          	cmp    DWORD PTR [ebp-0x10],0x4e
10004fcd:	75 27                	jne    10004ff6 <rgtree(Reghive_Tag*, int, int)+0xbd>
10004fcf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10004fd2:	8d 58 04             	lea    ebx,[eax+0x4]
10004fd5:	83 ec 08             	sub    esp,0x8
10004fd8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004fde:	e8 fc ff ff ff       	call   10004fdf <rgtree(Reghive_Tag*, int, int)+0xa6>	10004fdf: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004fe3:	83 c4 10             	add    esp,0x10
10004fe6:	83 ec 04             	sub    esp,0x4
10004fe9:	53                   	push   ebx
10004fea:	50                   	push   eax
10004feb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004fee:	e8 fc ff ff ff       	call   10004fef <rgtree(Reghive_Tag*, int, int)+0xb6>	10004fef: R_386_PC32	rgtree(Reghive_Tag*, int, int)
10004ff3:	83 c4 10             	add    esp,0x10
10004ff6:	83 ec 08             	sub    esp,0x8
10004ff9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004ffc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004fff:	e8 fc ff ff ff       	call   10005000 <rgtree(Reghive_Tag*, int, int)+0xc7>	10005000: R_386_PC32	CmGetNext(Reghive_Tag*, int)
10005004:	83 c4 10             	add    esp,0x10
10005007:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
1000500a:	e9 4d ff ff ff       	jmp    10004f5c <rgtree(Reghive_Tag*, int, int)+0x23>
1000500f:	90                   	nop
10005010:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10005013:	c9                   	leave  
10005014:	c3                   	ret    

10005015 <getRegsafeName(char*, char*)>:
10005015:	55                   	push   ebp
10005016:	89 e5                	mov    ebp,esp
10005018:	83 ec 10             	sub    esp,0x10
1000501b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000501e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10005021:	e8 fc ff ff ff       	call   10005022 <getRegsafeName(char*, char*)+0xd>	10005022: R_386_PC32	strcpy
10005026:	83 c4 08             	add    esp,0x8
10005029:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10005030:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005033:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005036:	01 d0                	add    eax,edx
10005038:	8a 00                	mov    al,BYTE PTR [eax]
1000503a:	84 c0                	test   al,al
1000503c:	74 6e                	je     100050ac <getRegsafeName(char*, char*)+0x97>
1000503e:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005041:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005044:	01 d0                	add    eax,edx
10005046:	8a 00                	mov    al,BYTE PTR [eax]
10005048:	3c 60                	cmp    al,0x60
1000504a:	7e 42                	jle    1000508e <getRegsafeName(char*, char*)+0x79>
1000504c:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
1000504f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005052:	01 d0                	add    eax,edx
10005054:	8a 00                	mov    al,BYTE PTR [eax]
10005056:	3c 7a                	cmp    al,0x7a
10005058:	7f 34                	jg     1000508e <getRegsafeName(char*, char*)+0x79>
1000505a:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
1000505d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005060:	01 d0                	add    eax,edx
10005062:	8a 00                	mov    al,BYTE PTR [eax]
10005064:	8d 48 9f             	lea    ecx,[eax-0x61]
10005067:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
1000506a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000506d:	01 d0                	add    eax,edx
1000506f:	88 ca                	mov    dl,cl
10005071:	88 10                	mov    BYTE PTR [eax],dl
10005073:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005076:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005079:	01 d0                	add    eax,edx
1000507b:	8a 00                	mov    al,BYTE PTR [eax]
1000507d:	8d 48 41             	lea    ecx,[eax+0x41]
10005080:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005083:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005086:	01 d0                	add    eax,edx
10005088:	88 ca                	mov    dl,cl
1000508a:	88 10                	mov    BYTE PTR [eax],dl
1000508c:	eb 19                	jmp    100050a7 <getRegsafeName(char*, char*)+0x92>
1000508e:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005091:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005094:	01 d0                	add    eax,edx
10005096:	8a 00                	mov    al,BYTE PTR [eax]
10005098:	3c 20                	cmp    al,0x20
1000509a:	75 0b                	jne    100050a7 <getRegsafeName(char*, char*)+0x92>
1000509c:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
1000509f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100050a2:	01 d0                	add    eax,edx
100050a4:	c6 00 5f             	mov    BYTE PTR [eax],0x5f
100050a7:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100050aa:	eb 84                	jmp    10005030 <getRegsafeName(char*, char*)+0x1b>
100050ac:	90                   	nop
100050ad:	c9                   	leave  
100050ae:	c3                   	ret    

100050af <begin(void*)>:
100050af:	55                   	push   ebp
100050b0:	89 e5                	mov    ebp,esp
100050b2:	57                   	push   edi
100050b3:	56                   	push   esi
100050b4:	53                   	push   ebx
100050b5:	81 ec 2c 06 00 00    	sub    esp,0x62c
100050bb:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
100050bf:	83 ec 0c             	sub    esp,0xc
100050c2:	68 14 01 00 00       	push   0x114
100050c7:	e8 fc ff ff ff       	call   100050c8 <begin(void*)+0x19>	100050c8: R_386_PC32	operator new(unsigned long)
100050cc:	83 c4 10             	add    esp,0x10
100050cf:	89 c3                	mov    ebx,eax
100050d1:	a1 00 00 00 00       	mov    eax,ds:0x0	100050d2: R_386_32	kernelProcess
100050d6:	83 ec 04             	sub    esp,0x4
100050d9:	50                   	push   eax
100050da:	68 c8 ac 00 10       	push   0x1000acc8	100050db: R_386_32	.text
100050df:	53                   	push   ebx
100050e0:	e8 fc ff ff ff       	call   100050e1 <begin(void*)+0x32>	100050e1: R_386_PC32	File::File(char const*, Process*)
100050e5:	83 c4 10             	add    esp,0x10
100050e8:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
100050eb:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100050ef:	75 10                	jne    10005101 <begin(void*)+0x52>
100050f1:	83 ec 0c             	sub    esp,0xc
100050f4:	68 e6 ac 00 10       	push   0x1000ace6	100050f5: R_386_32	.text
100050f9:	e8 fc ff ff ff       	call   100050fa <begin(void*)+0x4b>	100050fa: R_386_PC32	KePanic(char const*)
100050fe:	83 c4 10             	add    esp,0x10
10005101:	83 ec 08             	sub    esp,0x8
10005104:	6a 01                	push   0x1
10005106:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
10005109:	e8 fc ff ff ff       	call   1000510a <begin(void*)+0x5b>	1000510a: R_386_PC32	File::open(FileOpenMode)
1000510e:	83 c4 10             	add    esp,0x10
10005111:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10005114:	83 7d b4 00          	cmp    DWORD PTR [ebp-0x4c],0x0
10005118:	75 10                	jne    1000512a <begin(void*)+0x7b>
1000511a:	83 ec 0c             	sub    esp,0xc
1000511d:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
10005120:	e8 fc ff ff ff       	call   10005121 <begin(void*)+0x72>	10005121: R_386_PC32	File::close()
10005125:	83 c4 10             	add    esp,0x10
10005128:	eb 04                	jmp    1000512e <begin(void*)+0x7f>
1000512a:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
1000512e:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10005132:	74 15                	je     10005149 <begin(void*)+0x9a>
10005134:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10005137:	8b 00                	mov    eax,DWORD PTR [eax]
10005139:	83 c0 08             	add    eax,0x8
1000513c:	8b 00                	mov    eax,DWORD PTR [eax]
1000513e:	83 ec 0c             	sub    esp,0xc
10005141:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
10005144:	ff d0                	call   eax
10005146:	83 c4 10             	add    esp,0x10
10005149:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	1000514b: R_386_32	KeIsPreemptionOn
10005150:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10005154:	74 0f                	je     10005165 <begin(void*)+0xb6>
10005156:	83 ec 0c             	sub    esp,0xc
10005159:	6a 00                	push   0x0
1000515b:	e8 fc ff ff ff       	call   1000515c <begin(void*)+0xad>	1000515c: R_386_PC32	firstRun(bool)
10005160:	83 c4 10             	add    esp,0x10
10005163:	eb 05                	jmp    1000516a <begin(void*)+0xbb>
10005165:	e8 fc ff ff ff       	call   10005166 <begin(void*)+0xb7>	10005166: R_386_PC32	loadExtensions()
1000516a:	8d 45 88             	lea    eax,[ebp-0x78]
1000516d:	bb 3c b3 00 10       	mov    ebx,0x1000b33c	1000516e: R_386_32	.text
10005172:	ba 04 00 00 00       	mov    edx,0x4
10005177:	89 c7                	mov    edi,eax
10005179:	89 de                	mov    esi,ebx
1000517b:	89 d1                	mov    ecx,edx
1000517d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000517f:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10005183:	0f 84 17 14 00 00    	je     100065a0 <begin(void*)+0x14f1>
10005189:	83 ec 0c             	sub    esp,0xc
1000518c:	68 24 07 00 00       	push   0x724
10005191:	e8 fc ff ff ff       	call   10005192 <begin(void*)+0xe3>	10005192: R_386_PC32	operator new(unsigned long)
10005196:	83 c4 10             	add    esp,0x10
10005199:	89 c3                	mov    ebx,eax
1000519b:	8d 45 88             	lea    eax,[ebp-0x78]
1000519e:	50                   	push   eax
1000519f:	6a 00                	push   0x0
100051a1:	68 f6 ac 00 10       	push   0x1000acf6	100051a2: R_386_32	.text
100051a6:	53                   	push   ebx
100051a7:	e8 fc ff ff ff       	call   100051a8 <begin(void*)+0xf9>	100051a8: R_386_PC32	Process::Process(char const*, Process*, char**)
100051ac:	83 c4 10             	add    esp,0x10
100051af:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
100051b2:	83 ec 0c             	sub    esp,0xc
100051b5:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
100051b8:	e8 fc ff ff ff       	call   100051b9 <begin(void*)+0x10a>	100051b9: R_386_PC32	Process::createUserThread()
100051bd:	83 c4 10             	add    esp,0x10
100051c0:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100051c2: R_386_32	VgaText::hiddenOut
100051c7:	a1 00 00 00 00       	mov    eax,ds:0x0	100051c8: R_386_32	term
100051cc:	83 ec 0c             	sub    esp,0xc
100051cf:	50                   	push   eax
100051d0:	e8 fc ff ff ff       	call   100051d1 <begin(void*)+0x122>	100051d1: R_386_PC32	setActiveTerminal(VgaText*)
100051d5:	83 c4 10             	add    esp,0x10
100051d8:	e8 fc ff ff ff       	call   100051d9 <begin(void*)+0x12a>	100051d9: R_386_PC32	drawBootScreen()
100051dd:	83 ec 0c             	sub    esp,0xc
100051e0:	68 9d ab 00 10       	push   0x1000ab9d	100051e1: R_386_32	.text
100051e5:	6a 0d                	push   0xd
100051e7:	6a 32                	push   0x32
100051e9:	6a 05                	push   0x5
100051eb:	6a 16                	push   0x16
100051ed:	e8 fc ff ff ff       	call   100051ee <begin(void*)+0x13f>	100051ee: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100051f2:	83 c4 20             	add    esp,0x20
100051f5:	83 ec 0c             	sub    esp,0xc
100051f8:	6a 03                	push   0x3
100051fa:	e8 fc ff ff ff       	call   100051fb <begin(void*)+0x14c>	100051fb: R_386_PC32	bootInstallTasks(int)
100051ff:	83 c4 10             	add    esp,0x10
10005202:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10005204: R_386_32	VgaText::hiddenOut
10005209:	83 ec 0c             	sub    esp,0xc
1000520c:	68 14 01 00 00       	push   0x114
10005211:	e8 fc ff ff ff       	call   10005212 <begin(void*)+0x163>	10005212: R_386_PC32	operator new(unsigned long)
10005216:	83 c4 10             	add    esp,0x10
10005219:	89 c3                	mov    ebx,eax
1000521b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000521c: R_386_32	kernelProcess
10005220:	83 ec 04             	sub    esp,0x4
10005223:	50                   	push   eax
10005224:	68 13 ad 00 10       	push   0x1000ad13	10005225: R_386_32	.text
10005229:	53                   	push   ebx
1000522a:	e8 fc ff ff ff       	call   1000522b <begin(void*)+0x17c>	1000522b: R_386_PC32	File::File(char const*, Process*)
1000522f:	83 c4 10             	add    esp,0x10
10005232:	89 5d ac             	mov    DWORD PTR [ebp-0x54],ebx
10005235:	83 ec 08             	sub    esp,0x8
10005238:	6a 01                	push   0x1
1000523a:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
1000523d:	e8 fc ff ff ff       	call   1000523e <begin(void*)+0x18f>	1000523e: R_386_PC32	File::open(FileOpenMode)
10005242:	83 c4 10             	add    esp,0x10
10005245:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10005248:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
1000524c:	75 39                	jne    10005287 <begin(void*)+0x1d8>
1000524e:	83 ec 0c             	sub    esp,0xc
10005251:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10005254:	e8 fc ff ff ff       	call   10005255 <begin(void*)+0x1a6>	10005255: R_386_PC32	File::close()
10005259:	83 c4 10             	add    esp,0x10
1000525c:	83 ec 0c             	sub    esp,0xc
1000525f:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10005262:	e8 fc ff ff ff       	call   10005263 <begin(void*)+0x1b4>	10005263: R_386_PC32	File::unlink()
10005267:	83 c4 10             	add    esp,0x10
1000526a:	83 7d ac 00          	cmp    DWORD PTR [ebp-0x54],0x0
1000526e:	74 44                	je     100052b4 <begin(void*)+0x205>
10005270:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10005273:	8b 00                	mov    eax,DWORD PTR [eax]
10005275:	83 c0 08             	add    eax,0x8
10005278:	8b 00                	mov    eax,DWORD PTR [eax]
1000527a:	83 ec 0c             	sub    esp,0xc
1000527d:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10005280:	ff d0                	call   eax
10005282:	83 c4 10             	add    esp,0x10
10005285:	eb 2d                	jmp    100052b4 <begin(void*)+0x205>
10005287:	83 7d ac 00          	cmp    DWORD PTR [ebp-0x54],0x0
1000528b:	74 15                	je     100052a2 <begin(void*)+0x1f3>
1000528d:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10005290:	8b 00                	mov    eax,DWORD PTR [eax]
10005292:	83 c0 08             	add    eax,0x8
10005295:	8b 00                	mov    eax,DWORD PTR [eax]
10005297:	83 ec 0c             	sub    esp,0xc
1000529a:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
1000529d:	ff d0                	call   eax
1000529f:	83 c4 10             	add    esp,0x10
100052a2:	83 ec 0c             	sub    esp,0xc
100052a5:	6a 01                	push   0x1
100052a7:	e8 fc ff ff ff       	call   100052a8 <begin(void*)+0x1f9>	100052a8: R_386_PC32	sleep(unsigned int)
100052ac:	83 c4 10             	add    esp,0x10
100052af:	e9 55 ff ff ff       	jmp    10005209 <begin(void*)+0x15a>
100052b4:	90                   	nop
100052b5:	83 ec 0c             	sub    esp,0xc
100052b8:	6a 01                	push   0x1
100052ba:	e8 fc ff ff ff       	call   100052bb <begin(void*)+0x20c>	100052bb: R_386_PC32	sleep(unsigned int)
100052bf:	83 c4 10             	add    esp,0x10
100052c2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100052c4: R_386_32	VgaText::hiddenOut
100052c9:	a1 00 00 00 00       	mov    eax,ds:0x0	100052ca: R_386_32	term
100052ce:	83 ec 0c             	sub    esp,0xc
100052d1:	50                   	push   eax
100052d2:	e8 fc ff ff ff       	call   100052d3 <begin(void*)+0x224>	100052d3: R_386_PC32	setActiveTerminal(VgaText*)
100052d7:	83 c4 10             	add    esp,0x10
100052da:	e8 fc ff ff ff       	call   100052db <begin(void*)+0x22c>	100052db: R_386_PC32	drawBootScreen()
100052df:	83 ec 0c             	sub    esp,0xc
100052e2:	68 9d ab 00 10       	push   0x1000ab9d	100052e3: R_386_32	.text
100052e7:	6a 0d                	push   0xd
100052e9:	6a 32                	push   0x32
100052eb:	6a 05                	push   0x5
100052ed:	6a 16                	push   0x16
100052ef:	e8 fc ff ff ff       	call   100052f0 <begin(void*)+0x241>	100052f0: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100052f4:	83 c4 20             	add    esp,0x20
100052f7:	83 ec 0c             	sub    esp,0xc
100052fa:	6a 04                	push   0x4
100052fc:	e8 fc ff ff ff       	call   100052fd <begin(void*)+0x24e>	100052fd: R_386_PC32	bootInstallTasks(int)
10005301:	83 c4 10             	add    esp,0x10
10005304:	83 ec 0c             	sub    esp,0xc
10005307:	6a 05                	push   0x5
10005309:	e8 fc ff ff ff       	call   1000530a <begin(void*)+0x25b>	1000530a: R_386_PC32	bootInstallTasks(int)
1000530e:	83 c4 10             	add    esp,0x10
10005311:	83 ec 0c             	sub    esp,0xc
10005314:	68 20 ad 00 10       	push   0x1000ad20	10005315: R_386_32	.text
10005319:	e8 fc ff ff ff       	call   1000531a <begin(void*)+0x26b>	1000531a: R_386_PC32	CmOpen(char const*)
1000531e:	83 c4 10             	add    esp,0x10
10005321:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10005324:	83 ec 04             	sub    esp,0x4
10005327:	68 45 ad 00 10       	push   0x1000ad45	10005328: R_386_32	.text
1000532c:	6a 00                	push   0x0
1000532e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005331:	e8 fc ff ff ff       	call   10005332 <begin(void*)+0x283>	10005332: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005336:	83 c4 10             	add    esp,0x10
10005339:	83 ec 08             	sub    esp,0x8
1000533c:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005342:	50                   	push   eax
10005343:	68 00 00 00 00       	push   0x0	10005344: R_386_32	currName
10005348:	e8 fc ff ff ff       	call   10005349 <begin(void*)+0x29a>	10005349: R_386_PC32	getRegsafeName(char*, char*)
1000534d:	83 c4 10             	add    esp,0x10
10005350:	83 ec 08             	sub    esp,0x8
10005353:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005359:	50                   	push   eax
1000535a:	68 4c ad 00 10       	push   0x1000ad4c	1000535b: R_386_32	.text
1000535f:	e8 fc ff ff ff       	call   10005360 <begin(void*)+0x2b1>	10005360: R_386_PC32	Dbg::kprintf(char const*, ...)
10005364:	83 c4 10             	add    esp,0x10
10005367:	83 ec 08             	sub    esp,0x8
1000536a:	68 5e ad 00 10       	push   0x1000ad5e	1000536b: R_386_32	.text
1000536f:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005375:	50                   	push   eax
10005376:	e8 fc ff ff ff       	call   10005377 <begin(void*)+0x2c8>	10005377: R_386_PC32	strcpy
1000537b:	83 c4 10             	add    esp,0x10
1000537e:	83 ec 08             	sub    esp,0x8
10005381:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005387:	50                   	push   eax
10005388:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000538e:	50                   	push   eax
1000538f:	e8 fc ff ff ff       	call   10005390 <begin(void*)+0x2e1>	10005390: R_386_PC32	strcat
10005394:	83 c4 10             	add    esp,0x10
10005397:	83 ec 08             	sub    esp,0x8
1000539a:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100053a0:	50                   	push   eax
100053a1:	68 6c ad 00 10       	push   0x1000ad6c	100053a2: R_386_32	.text
100053a6:	e8 fc ff ff ff       	call   100053a7 <begin(void*)+0x2f8>	100053a7: R_386_PC32	Dbg::kprintf(char const*, ...)
100053ab:	83 c4 10             	add    esp,0x10
100053ae:	83 ec 08             	sub    esp,0x8
100053b1:	68 45 ad 00 10       	push   0x1000ad45	100053b2: R_386_32	.text
100053b6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100053b9:	e8 fc ff ff ff       	call   100053ba <begin(void*)+0x30b>	100053ba: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100053be:	83 c4 10             	add    esp,0x10
100053c1:	83 ec 08             	sub    esp,0x8
100053c4:	50                   	push   eax
100053c5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100053c8:	e8 fc ff ff ff       	call   100053c9 <begin(void*)+0x31a>	100053c9: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100053cd:	83 c4 10             	add    esp,0x10
100053d0:	83 ec 04             	sub    esp,0x4
100053d3:	68 7f ad 00 10       	push   0x1000ad7f	100053d4: R_386_32	.text
100053d8:	50                   	push   eax
100053d9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100053dc:	e8 fc ff ff ff       	call   100053dd <begin(void*)+0x32e>	100053dd: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100053e1:	83 c4 10             	add    esp,0x10
100053e4:	83 ec 08             	sub    esp,0x8
100053e7:	68 45 ad 00 10       	push   0x1000ad45	100053e8: R_386_32	.text
100053ec:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100053ef:	e8 fc ff ff ff       	call   100053f0 <begin(void*)+0x341>	100053f0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100053f4:	83 c4 10             	add    esp,0x10
100053f7:	83 ec 08             	sub    esp,0x8
100053fa:	50                   	push   eax
100053fb:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100053fe:	e8 fc ff ff ff       	call   100053ff <begin(void*)+0x350>	100053ff: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005403:	83 c4 10             	add    esp,0x10
10005406:	83 ec 04             	sub    esp,0x4
10005409:	68 85 ad 00 10       	push   0x1000ad85	1000540a: R_386_32	.text
1000540e:	50                   	push   eax
1000540f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005412:	e8 fc ff ff ff       	call   10005413 <begin(void*)+0x364>	10005413: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005417:	83 c4 10             	add    esp,0x10
1000541a:	83 ec 08             	sub    esp,0x8
1000541d:	68 45 ad 00 10       	push   0x1000ad45	1000541e: R_386_32	.text
10005422:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005425:	e8 fc ff ff ff       	call   10005426 <begin(void*)+0x377>	10005426: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000542a:	83 c4 10             	add    esp,0x10
1000542d:	83 ec 08             	sub    esp,0x8
10005430:	50                   	push   eax
10005431:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005434:	e8 fc ff ff ff       	call   10005435 <begin(void*)+0x386>	10005435: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005439:	83 c4 10             	add    esp,0x10
1000543c:	83 ec 04             	sub    esp,0x4
1000543f:	68 8a ad 00 10       	push   0x1000ad8a	10005440: R_386_32	.text
10005444:	50                   	push   eax
10005445:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005448:	e8 fc ff ff ff       	call   10005449 <begin(void*)+0x39a>	10005449: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000544d:	83 c4 10             	add    esp,0x10
10005450:	83 ec 08             	sub    esp,0x8
10005453:	68 45 ad 00 10       	push   0x1000ad45	10005454: R_386_32	.text
10005458:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000545b:	e8 fc ff ff ff       	call   1000545c <begin(void*)+0x3ad>	1000545c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005460:	83 c4 10             	add    esp,0x10
10005463:	83 ec 08             	sub    esp,0x8
10005466:	50                   	push   eax
10005467:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000546a:	e8 fc ff ff ff       	call   1000546b <begin(void*)+0x3bc>	1000546b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000546f:	83 c4 10             	add    esp,0x10
10005472:	83 ec 04             	sub    esp,0x4
10005475:	68 8f ad 00 10       	push   0x1000ad8f	10005476: R_386_32	.text
1000547a:	50                   	push   eax
1000547b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000547e:	e8 fc ff ff ff       	call   1000547f <begin(void*)+0x3d0>	1000547f: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005483:	83 c4 10             	add    esp,0x10
10005486:	83 ec 08             	sub    esp,0x8
10005489:	68 45 ad 00 10       	push   0x1000ad45	1000548a: R_386_32	.text
1000548e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005491:	e8 fc ff ff ff       	call   10005492 <begin(void*)+0x3e3>	10005492: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005496:	83 c4 10             	add    esp,0x10
10005499:	83 ec 08             	sub    esp,0x8
1000549c:	50                   	push   eax
1000549d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054a0:	e8 fc ff ff ff       	call   100054a1 <begin(void*)+0x3f2>	100054a1: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100054a5:	83 c4 10             	add    esp,0x10
100054a8:	83 ec 04             	sub    esp,0x4
100054ab:	68 95 ad 00 10       	push   0x1000ad95	100054ac: R_386_32	.text
100054b0:	50                   	push   eax
100054b1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054b4:	e8 fc ff ff ff       	call   100054b5 <begin(void*)+0x406>	100054b5: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100054b9:	83 c4 10             	add    esp,0x10
100054bc:	83 ec 08             	sub    esp,0x8
100054bf:	68 9f ad 00 10       	push   0x1000ad9f	100054c0: R_386_32	.text
100054c4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054c7:	e8 fc ff ff ff       	call   100054c8 <begin(void*)+0x419>	100054c8: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100054cc:	83 c4 10             	add    esp,0x10
100054cf:	83 ec 08             	sub    esp,0x8
100054d2:	50                   	push   eax
100054d3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054d6:	e8 fc ff ff ff       	call   100054d7 <begin(void*)+0x428>	100054d7: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100054db:	83 c4 10             	add    esp,0x10
100054de:	83 ec 04             	sub    esp,0x4
100054e1:	8d 95 86 fc ff ff    	lea    edx,[ebp-0x37a]
100054e7:	52                   	push   edx
100054e8:	50                   	push   eax
100054e9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054ec:	e8 fc ff ff ff       	call   100054ed <begin(void*)+0x43e>	100054ed: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100054f1:	83 c4 10             	add    esp,0x10
100054f4:	83 ec 08             	sub    esp,0x8
100054f7:	68 ac ad 00 10       	push   0x1000adac	100054f8: R_386_32	.text
100054fc:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054ff:	e8 fc ff ff ff       	call   10005500 <begin(void*)+0x451>	10005500: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005504:	83 c4 10             	add    esp,0x10
10005507:	83 ec 08             	sub    esp,0x8
1000550a:	50                   	push   eax
1000550b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000550e:	e8 fc ff ff ff       	call   1000550f <begin(void*)+0x460>	1000550f: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005513:	83 c4 10             	add    esp,0x10
10005516:	83 ec 04             	sub    esp,0x4
10005519:	68 bd ad 00 10       	push   0x1000adbd	1000551a: R_386_32	.text
1000551e:	50                   	push   eax
1000551f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005522:	e8 fc ff ff ff       	call   10005523 <begin(void*)+0x474>	10005523: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005527:	83 c4 10             	add    esp,0x10
1000552a:	83 ec 08             	sub    esp,0x8
1000552d:	68 ac ad 00 10       	push   0x1000adac	1000552e: R_386_32	.text
10005532:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005535:	e8 fc ff ff ff       	call   10005536 <begin(void*)+0x487>	10005536: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000553a:	83 c4 10             	add    esp,0x10
1000553d:	83 ec 08             	sub    esp,0x8
10005540:	50                   	push   eax
10005541:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005544:	e8 fc ff ff ff       	call   10005545 <begin(void*)+0x496>	10005545: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005549:	83 c4 10             	add    esp,0x10
1000554c:	83 ec 04             	sub    esp,0x4
1000554f:	68 c2 ad 00 10       	push   0x1000adc2	10005550: R_386_32	.text
10005554:	50                   	push   eax
10005555:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005558:	e8 fc ff ff ff       	call   10005559 <begin(void*)+0x4aa>	10005559: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000555d:	83 c4 10             	add    esp,0x10
10005560:	83 ec 08             	sub    esp,0x8
10005563:	68 ac ad 00 10       	push   0x1000adac	10005564: R_386_32	.text
10005568:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000556b:	e8 fc ff ff ff       	call   1000556c <begin(void*)+0x4bd>	1000556c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005570:	83 c4 10             	add    esp,0x10
10005573:	83 ec 08             	sub    esp,0x8
10005576:	50                   	push   eax
10005577:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000557a:	e8 fc ff ff ff       	call   1000557b <begin(void*)+0x4cc>	1000557b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000557f:	83 c4 10             	add    esp,0x10
10005582:	83 ec 04             	sub    esp,0x4
10005585:	68 c7 ad 00 10       	push   0x1000adc7	10005586: R_386_32	.text
1000558a:	50                   	push   eax
1000558b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000558e:	e8 fc ff ff ff       	call   1000558f <begin(void*)+0x4e0>	1000558f: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005593:	83 c4 10             	add    esp,0x10
10005596:	83 ec 08             	sub    esp,0x8
10005599:	68 ac ad 00 10       	push   0x1000adac	1000559a: R_386_32	.text
1000559e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055a1:	e8 fc ff ff ff       	call   100055a2 <begin(void*)+0x4f3>	100055a2: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100055a6:	83 c4 10             	add    esp,0x10
100055a9:	83 ec 08             	sub    esp,0x8
100055ac:	50                   	push   eax
100055ad:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055b0:	e8 fc ff ff ff       	call   100055b1 <begin(void*)+0x502>	100055b1: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100055b5:	83 c4 10             	add    esp,0x10
100055b8:	83 ec 04             	sub    esp,0x4
100055bb:	68 cd ad 00 10       	push   0x1000adcd	100055bc: R_386_32	.text
100055c0:	50                   	push   eax
100055c1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055c4:	e8 fc ff ff ff       	call   100055c5 <begin(void*)+0x516>	100055c5: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100055c9:	83 c4 10             	add    esp,0x10
100055cc:	83 ec 08             	sub    esp,0x8
100055cf:	68 ac ad 00 10       	push   0x1000adac	100055d0: R_386_32	.text
100055d4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055d7:	e8 fc ff ff ff       	call   100055d8 <begin(void*)+0x529>	100055d8: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100055dc:	83 c4 10             	add    esp,0x10
100055df:	83 ec 08             	sub    esp,0x8
100055e2:	50                   	push   eax
100055e3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055e6:	e8 fc ff ff ff       	call   100055e7 <begin(void*)+0x538>	100055e7: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100055eb:	83 c4 10             	add    esp,0x10
100055ee:	83 ec 04             	sub    esp,0x4
100055f1:	68 d2 ad 00 10       	push   0x1000add2	100055f2: R_386_32	.text
100055f6:	50                   	push   eax
100055f7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055fa:	e8 fc ff ff ff       	call   100055fb <begin(void*)+0x54c>	100055fb: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100055ff:	83 c4 10             	add    esp,0x10
10005602:	83 ec 08             	sub    esp,0x8
10005605:	68 ac ad 00 10       	push   0x1000adac	10005606: R_386_32	.text
1000560a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000560d:	e8 fc ff ff ff       	call   1000560e <begin(void*)+0x55f>	1000560e: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005612:	83 c4 10             	add    esp,0x10
10005615:	83 ec 08             	sub    esp,0x8
10005618:	50                   	push   eax
10005619:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000561c:	e8 fc ff ff ff       	call   1000561d <begin(void*)+0x56e>	1000561d: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005621:	83 c4 10             	add    esp,0x10
10005624:	83 ec 04             	sub    esp,0x4
10005627:	68 d8 ad 00 10       	push   0x1000add8	10005628: R_386_32	.text
1000562c:	50                   	push   eax
1000562d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005630:	e8 fc ff ff ff       	call   10005631 <begin(void*)+0x582>	10005631: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005635:	83 c4 10             	add    esp,0x10
10005638:	83 ec 08             	sub    esp,0x8
1000563b:	68 ac ad 00 10       	push   0x1000adac	1000563c: R_386_32	.text
10005640:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005643:	e8 fc ff ff ff       	call   10005644 <begin(void*)+0x595>	10005644: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005648:	83 c4 10             	add    esp,0x10
1000564b:	83 ec 08             	sub    esp,0x8
1000564e:	50                   	push   eax
1000564f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005652:	e8 fc ff ff ff       	call   10005653 <begin(void*)+0x5a4>	10005653: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005657:	83 c4 10             	add    esp,0x10
1000565a:	83 ec 04             	sub    esp,0x4
1000565d:	68 e3 ad 00 10       	push   0x1000ade3	1000565e: R_386_32	.text
10005662:	50                   	push   eax
10005663:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005666:	e8 fc ff ff ff       	call   10005667 <begin(void*)+0x5b8>	10005667: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000566b:	83 c4 10             	add    esp,0x10
1000566e:	83 ec 08             	sub    esp,0x8
10005671:	68 ee ad 00 10       	push   0x1000adee	10005672: R_386_32	.text
10005676:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005679:	e8 fc ff ff ff       	call   1000567a <begin(void*)+0x5cb>	1000567a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000567e:	83 c4 10             	add    esp,0x10
10005681:	83 ec 08             	sub    esp,0x8
10005684:	50                   	push   eax
10005685:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005688:	e8 fc ff ff ff       	call   10005689 <begin(void*)+0x5da>	10005689: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000568d:	83 c4 10             	add    esp,0x10
10005690:	83 ec 04             	sub    esp,0x4
10005693:	68 fa ad 00 10       	push   0x1000adfa	10005694: R_386_32	.text
10005698:	50                   	push   eax
10005699:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000569c:	e8 fc ff ff ff       	call   1000569d <begin(void*)+0x5ee>	1000569d: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100056a1:	83 c4 10             	add    esp,0x10
100056a4:	83 ec 08             	sub    esp,0x8
100056a7:	68 03 ae 00 10       	push   0x1000ae03	100056a8: R_386_32	.text
100056ac:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056af:	e8 fc ff ff ff       	call   100056b0 <begin(void*)+0x601>	100056b0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100056b4:	83 c4 10             	add    esp,0x10
100056b7:	83 ec 08             	sub    esp,0x8
100056ba:	50                   	push   eax
100056bb:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056be:	e8 fc ff ff ff       	call   100056bf <begin(void*)+0x610>	100056bf: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100056c3:	83 c4 10             	add    esp,0x10
100056c6:	83 ec 04             	sub    esp,0x4
100056c9:	68 10 ae 00 10       	push   0x1000ae10	100056ca: R_386_32	.text
100056ce:	50                   	push   eax
100056cf:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056d2:	e8 fc ff ff ff       	call   100056d3 <begin(void*)+0x624>	100056d3: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100056d7:	83 c4 10             	add    esp,0x10
100056da:	83 ec 08             	sub    esp,0x8
100056dd:	68 03 ae 00 10       	push   0x1000ae03	100056de: R_386_32	.text
100056e2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056e5:	e8 fc ff ff ff       	call   100056e6 <begin(void*)+0x637>	100056e6: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100056ea:	83 c4 10             	add    esp,0x10
100056ed:	83 ec 08             	sub    esp,0x8
100056f0:	50                   	push   eax
100056f1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056f4:	e8 fc ff ff ff       	call   100056f5 <begin(void*)+0x646>	100056f5: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100056f9:	83 c4 10             	add    esp,0x10
100056fc:	83 ec 04             	sub    esp,0x4
100056ff:	68 15 ae 00 10       	push   0x1000ae15	10005700: R_386_32	.text
10005704:	50                   	push   eax
10005705:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005708:	e8 fc ff ff ff       	call   10005709 <begin(void*)+0x65a>	10005709: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000570d:	83 c4 10             	add    esp,0x10
10005710:	83 ec 08             	sub    esp,0x8
10005713:	68 03 ae 00 10       	push   0x1000ae03	10005714: R_386_32	.text
10005718:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000571b:	e8 fc ff ff ff       	call   1000571c <begin(void*)+0x66d>	1000571c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005720:	83 c4 10             	add    esp,0x10
10005723:	83 ec 08             	sub    esp,0x8
10005726:	50                   	push   eax
10005727:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000572a:	e8 fc ff ff ff       	call   1000572b <begin(void*)+0x67c>	1000572b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000572f:	83 c4 10             	add    esp,0x10
10005732:	83 ec 04             	sub    esp,0x4
10005735:	68 1d ae 00 10       	push   0x1000ae1d	10005736: R_386_32	.text
1000573a:	50                   	push   eax
1000573b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000573e:	e8 fc ff ff ff       	call   1000573f <begin(void*)+0x690>	1000573f: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005743:	83 c4 10             	add    esp,0x10
10005746:	83 ec 08             	sub    esp,0x8
10005749:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000574f:	50                   	push   eax
10005750:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005753:	e8 fc ff ff ff       	call   10005754 <begin(void*)+0x6a5>	10005754: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005758:	83 c4 10             	add    esp,0x10
1000575b:	83 ec 08             	sub    esp,0x8
1000575e:	50                   	push   eax
1000575f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005762:	e8 fc ff ff ff       	call   10005763 <begin(void*)+0x6b4>	10005763: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005767:	83 c4 10             	add    esp,0x10
1000576a:	83 ec 04             	sub    esp,0x4
1000576d:	68 28 ae 00 10       	push   0x1000ae28	1000576e: R_386_32	.text
10005772:	50                   	push   eax
10005773:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005776:	e8 fc ff ff ff       	call   10005777 <begin(void*)+0x6c8>	10005777: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000577b:	83 c4 10             	add    esp,0x10
1000577e:	83 ec 08             	sub    esp,0x8
10005781:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005787:	50                   	push   eax
10005788:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000578b:	e8 fc ff ff ff       	call   1000578c <begin(void*)+0x6dd>	1000578c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005790:	83 c4 10             	add    esp,0x10
10005793:	83 ec 08             	sub    esp,0x8
10005796:	50                   	push   eax
10005797:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000579a:	e8 fc ff ff ff       	call   1000579b <begin(void*)+0x6ec>	1000579b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000579f:	83 c4 10             	add    esp,0x10
100057a2:	83 ec 04             	sub    esp,0x4
100057a5:	68 2d ae 00 10       	push   0x1000ae2d	100057a6: R_386_32	.text
100057aa:	50                   	push   eax
100057ab:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057ae:	e8 fc ff ff ff       	call   100057af <begin(void*)+0x700>	100057af: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100057b3:	83 c4 10             	add    esp,0x10
100057b6:	83 ec 08             	sub    esp,0x8
100057b9:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100057bf:	50                   	push   eax
100057c0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057c3:	e8 fc ff ff ff       	call   100057c4 <begin(void*)+0x715>	100057c4: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100057c8:	83 c4 10             	add    esp,0x10
100057cb:	83 ec 08             	sub    esp,0x8
100057ce:	50                   	push   eax
100057cf:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057d2:	e8 fc ff ff ff       	call   100057d3 <begin(void*)+0x724>	100057d3: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100057d7:	83 c4 10             	add    esp,0x10
100057da:	83 ec 04             	sub    esp,0x4
100057dd:	68 36 ae 00 10       	push   0x1000ae36	100057de: R_386_32	.text
100057e2:	50                   	push   eax
100057e3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057e6:	e8 fc ff ff ff       	call   100057e7 <begin(void*)+0x738>	100057e7: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100057eb:	83 c4 10             	add    esp,0x10
100057ee:	83 ec 08             	sub    esp,0x8
100057f1:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100057f7:	50                   	push   eax
100057f8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057fb:	e8 fc ff ff ff       	call   100057fc <begin(void*)+0x74d>	100057fc: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005800:	83 c4 10             	add    esp,0x10
10005803:	83 ec 08             	sub    esp,0x8
10005806:	50                   	push   eax
10005807:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000580a:	e8 fc ff ff ff       	call   1000580b <begin(void*)+0x75c>	1000580b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000580f:	83 c4 10             	add    esp,0x10
10005812:	83 ec 04             	sub    esp,0x4
10005815:	68 42 ae 00 10       	push   0x1000ae42	10005816: R_386_32	.text
1000581a:	50                   	push   eax
1000581b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000581e:	e8 fc ff ff ff       	call   1000581f <begin(void*)+0x770>	1000581f: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005823:	83 c4 10             	add    esp,0x10
10005826:	83 ec 08             	sub    esp,0x8
10005829:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000582f:	50                   	push   eax
10005830:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005833:	e8 fc ff ff ff       	call   10005834 <begin(void*)+0x785>	10005834: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005838:	83 c4 10             	add    esp,0x10
1000583b:	83 ec 08             	sub    esp,0x8
1000583e:	50                   	push   eax
1000583f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005842:	e8 fc ff ff ff       	call   10005843 <begin(void*)+0x794>	10005843: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005847:	83 c4 10             	add    esp,0x10
1000584a:	83 ec 04             	sub    esp,0x4
1000584d:	68 4a ae 00 10       	push   0x1000ae4a	1000584e: R_386_32	.text
10005852:	50                   	push   eax
10005853:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005856:	e8 fc ff ff ff       	call   10005857 <begin(void*)+0x7a8>	10005857: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000585b:	83 c4 10             	add    esp,0x10
1000585e:	83 ec 08             	sub    esp,0x8
10005861:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005867:	50                   	push   eax
10005868:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000586b:	e8 fc ff ff ff       	call   1000586c <begin(void*)+0x7bd>	1000586c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005870:	83 c4 10             	add    esp,0x10
10005873:	83 ec 08             	sub    esp,0x8
10005876:	50                   	push   eax
10005877:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000587a:	e8 fc ff ff ff       	call   1000587b <begin(void*)+0x7cc>	1000587b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000587f:	83 c4 10             	add    esp,0x10
10005882:	83 ec 04             	sub    esp,0x4
10005885:	68 54 ae 00 10       	push   0x1000ae54	10005886: R_386_32	.text
1000588a:	50                   	push   eax
1000588b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000588e:	e8 fc ff ff ff       	call   1000588f <begin(void*)+0x7e0>	1000588f: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005893:	83 c4 10             	add    esp,0x10
10005896:	83 ec 08             	sub    esp,0x8
10005899:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000589f:	50                   	push   eax
100058a0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058a3:	e8 fc ff ff ff       	call   100058a4 <begin(void*)+0x7f5>	100058a4: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100058a8:	83 c4 10             	add    esp,0x10
100058ab:	83 ec 08             	sub    esp,0x8
100058ae:	50                   	push   eax
100058af:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058b2:	e8 fc ff ff ff       	call   100058b3 <begin(void*)+0x804>	100058b3: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100058b7:	83 c4 10             	add    esp,0x10
100058ba:	83 ec 04             	sub    esp,0x4
100058bd:	68 5e ae 00 10       	push   0x1000ae5e	100058be: R_386_32	.text
100058c2:	50                   	push   eax
100058c3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058c6:	e8 fc ff ff ff       	call   100058c7 <begin(void*)+0x818>	100058c7: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100058cb:	83 c4 10             	add    esp,0x10
100058ce:	83 ec 08             	sub    esp,0x8
100058d1:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100058d7:	50                   	push   eax
100058d8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058db:	e8 fc ff ff ff       	call   100058dc <begin(void*)+0x82d>	100058dc: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100058e0:	83 c4 10             	add    esp,0x10
100058e3:	83 ec 08             	sub    esp,0x8
100058e6:	50                   	push   eax
100058e7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058ea:	e8 fc ff ff ff       	call   100058eb <begin(void*)+0x83c>	100058eb: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100058ef:	83 c4 10             	add    esp,0x10
100058f2:	83 ec 04             	sub    esp,0x4
100058f5:	68 67 ae 00 10       	push   0x1000ae67	100058f6: R_386_32	.text
100058fa:	50                   	push   eax
100058fb:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058fe:	e8 fc ff ff ff       	call   100058ff <begin(void*)+0x850>	100058ff: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005903:	83 c4 10             	add    esp,0x10
10005906:	83 ec 08             	sub    esp,0x8
10005909:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000590f:	50                   	push   eax
10005910:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005913:	e8 fc ff ff ff       	call   10005914 <begin(void*)+0x865>	10005914: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005918:	83 c4 10             	add    esp,0x10
1000591b:	83 ec 08             	sub    esp,0x8
1000591e:	50                   	push   eax
1000591f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005922:	e8 fc ff ff ff       	call   10005923 <begin(void*)+0x874>	10005923: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005927:	83 c4 10             	add    esp,0x10
1000592a:	83 ec 04             	sub    esp,0x4
1000592d:	68 6e ae 00 10       	push   0x1000ae6e	1000592e: R_386_32	.text
10005932:	50                   	push   eax
10005933:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005936:	e8 fc ff ff ff       	call   10005937 <begin(void*)+0x888>	10005937: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000593b:	83 c4 10             	add    esp,0x10
1000593e:	83 ec 08             	sub    esp,0x8
10005941:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005947:	50                   	push   eax
10005948:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000594b:	e8 fc ff ff ff       	call   1000594c <begin(void*)+0x89d>	1000594c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005950:	83 c4 10             	add    esp,0x10
10005953:	83 ec 08             	sub    esp,0x8
10005956:	50                   	push   eax
10005957:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000595a:	e8 fc ff ff ff       	call   1000595b <begin(void*)+0x8ac>	1000595b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000595f:	83 c4 10             	add    esp,0x10
10005962:	83 ec 04             	sub    esp,0x4
10005965:	68 74 ae 00 10       	push   0x1000ae74	10005966: R_386_32	.text
1000596a:	50                   	push   eax
1000596b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000596e:	e8 fc ff ff ff       	call   1000596f <begin(void*)+0x8c0>	1000596f: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005973:	83 c4 10             	add    esp,0x10
10005976:	a1 00 00 00 00       	mov    eax,ds:0x0	10005977: R_386_32	modesel
1000597b:	89 c3                	mov    ebx,eax
1000597d:	89 c6                	mov    esi,eax
1000597f:	c1 fe 1f             	sar    esi,0x1f
10005982:	83 ec 08             	sub    esp,0x8
10005985:	68 7f ae 00 10       	push   0x1000ae7f	10005986: R_386_32	.text
1000598a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000598d:	e8 fc ff ff ff       	call   1000598e <begin(void*)+0x8df>	1000598e: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005992:	83 c4 10             	add    esp,0x10
10005995:	83 ec 08             	sub    esp,0x8
10005998:	50                   	push   eax
10005999:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000599c:	e8 fc ff ff ff       	call   1000599d <begin(void*)+0x8ee>	1000599d: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100059a1:	83 c4 10             	add    esp,0x10
100059a4:	83 ec 08             	sub    esp,0x8
100059a7:	6a 6a                	push   0x6a
100059a9:	56                   	push   esi
100059aa:	53                   	push   ebx
100059ab:	68 8b ae 00 10       	push   0x1000ae8b	100059ac: R_386_32	.text
100059b0:	50                   	push   eax
100059b1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059b4:	e8 fc ff ff ff       	call   100059b5 <begin(void*)+0x906>	100059b5: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
100059b9:	83 c4 20             	add    esp,0x20
100059bc:	a1 00 00 00 00       	mov    eax,ds:0x0	100059bd: R_386_32	tzsel
100059c1:	89 c3                	mov    ebx,eax
100059c3:	89 c6                	mov    esi,eax
100059c5:	c1 fe 1f             	sar    esi,0x1f
100059c8:	83 ec 08             	sub    esp,0x8
100059cb:	68 ee ad 00 10       	push   0x1000adee	100059cc: R_386_32	.text
100059d0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059d3:	e8 fc ff ff ff       	call   100059d4 <begin(void*)+0x925>	100059d4: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100059d8:	83 c4 10             	add    esp,0x10
100059db:	83 ec 08             	sub    esp,0x8
100059de:	50                   	push   eax
100059df:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059e2:	e8 fc ff ff ff       	call   100059e3 <begin(void*)+0x934>	100059e3: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100059e7:	83 c4 10             	add    esp,0x10
100059ea:	83 ec 08             	sub    esp,0x8
100059ed:	6a 6a                	push   0x6a
100059ef:	56                   	push   esi
100059f0:	53                   	push   ebx
100059f1:	68 93 ae 00 10       	push   0x1000ae93	100059f2: R_386_32	.text
100059f6:	50                   	push   eax
100059f7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059fa:	e8 fc ff ff ff       	call   100059fb <begin(void*)+0x94c>	100059fb: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
100059ff:	83 c4 20             	add    esp,0x20
10005a02:	a1 00 00 00 00       	mov    eax,ds:0x0	10005a03: R_386_32	tzsel
10005a07:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10005a0a: R_386_32	timezoneStrings
10005a0e:	8d 58 01             	lea    ebx,[eax+0x1]
10005a11:	83 ec 08             	sub    esp,0x8
10005a14:	68 9e ae 00 10       	push   0x1000ae9e	10005a15: R_386_32	.text
10005a19:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a1c:	e8 fc ff ff ff       	call   10005a1d <begin(void*)+0x96e>	10005a1d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a21:	83 c4 10             	add    esp,0x10
10005a24:	83 ec 04             	sub    esp,0x4
10005a27:	53                   	push   ebx
10005a28:	50                   	push   eax
10005a29:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a2c:	e8 fc ff ff ff       	call   10005a2d <begin(void*)+0x97e>	10005a2d: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005a31:	83 c4 10             	add    esp,0x10
10005a34:	83 ec 08             	sub    esp,0x8
10005a37:	68 b3 ae 00 10       	push   0x1000aeb3	10005a38: R_386_32	.text
10005a3c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a3f:	e8 fc ff ff ff       	call   10005a40 <begin(void*)+0x991>	10005a40: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a44:	83 c4 10             	add    esp,0x10
10005a47:	83 ec 04             	sub    esp,0x4
10005a4a:	68 00 00 00 00       	push   0x0	10005a4b: R_386_32	currName
10005a4f:	50                   	push   eax
10005a50:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a53:	e8 fc ff ff ff       	call   10005a54 <begin(void*)+0x9a5>	10005a54: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005a58:	83 c4 10             	add    esp,0x10
10005a5b:	83 ec 08             	sub    esp,0x8
10005a5e:	68 c5 ae 00 10       	push   0x1000aec5	10005a5f: R_386_32	.text
10005a63:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a66:	e8 fc ff ff ff       	call   10005a67 <begin(void*)+0x9b8>	10005a67: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a6b:	83 c4 10             	add    esp,0x10
10005a6e:	83 ec 04             	sub    esp,0x4
10005a71:	68 00 00 00 00       	push   0x0	10005a72: R_386_32	currComp
10005a76:	50                   	push   eax
10005a77:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a7a:	e8 fc ff ff ff       	call   10005a7b <begin(void*)+0x9cc>	10005a7b: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005a7f:	83 c4 10             	add    esp,0x10
10005a82:	83 ec 08             	sub    esp,0x8
10005a85:	68 da ae 00 10       	push   0x1000aeda	10005a86: R_386_32	.text
10005a8a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a8d:	e8 fc ff ff ff       	call   10005a8e <begin(void*)+0x9df>	10005a8e: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a92:	83 c4 10             	add    esp,0x10
10005a95:	83 ec 04             	sub    esp,0x4
10005a98:	68 00 00 00 00       	push   0x0	10005a99: R_386_32	pkeybuf
10005a9d:	50                   	push   eax
10005a9e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005aa1:	e8 fc ff ff ff       	call   10005aa2 <begin(void*)+0x9f3>	10005aa2: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005aa6:	83 c4 10             	add    esp,0x10
10005aa9:	83 ec 08             	sub    esp,0x8
10005aac:	68 f2 ae 00 10       	push   0x1000aef2	10005aad: R_386_32	.text
10005ab1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ab4:	e8 fc ff ff ff       	call   10005ab5 <begin(void*)+0xa06>	10005ab5: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005ab9:	83 c4 10             	add    esp,0x10
10005abc:	83 ec 08             	sub    esp,0x8
10005abf:	50                   	push   eax
10005ac0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ac3:	e8 fc ff ff ff       	call   10005ac4 <begin(void*)+0xa15>	10005ac4: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005ac8:	83 c4 10             	add    esp,0x10
10005acb:	83 ec 04             	sub    esp,0x4
10005ace:	68 08 af 00 10       	push   0x1000af08	10005acf: R_386_32	.text
10005ad3:	50                   	push   eax
10005ad4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ad7:	e8 fc ff ff ff       	call   10005ad8 <begin(void*)+0xa29>	10005ad8: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005adc:	83 c4 10             	add    esp,0x10
10005adf:	83 ec 08             	sub    esp,0x8
10005ae2:	68 0c af 00 10       	push   0x1000af0c	10005ae3: R_386_32	.text
10005ae7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005aea:	e8 fc ff ff ff       	call   10005aeb <begin(void*)+0xa3c>	10005aeb: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005aef:	83 c4 10             	add    esp,0x10
10005af2:	83 ec 08             	sub    esp,0x8
10005af5:	50                   	push   eax
10005af6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005af9:	e8 fc ff ff ff       	call   10005afa <begin(void*)+0xa4b>	10005afa: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005afe:	83 c4 10             	add    esp,0x10
10005b01:	83 ec 04             	sub    esp,0x4
10005b04:	68 08 af 00 10       	push   0x1000af08	10005b05: R_386_32	.text
10005b09:	50                   	push   eax
10005b0a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b0d:	e8 fc ff ff ff       	call   10005b0e <begin(void*)+0xa5f>	10005b0e: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005b12:	83 c4 10             	add    esp,0x10
10005b15:	83 ec 08             	sub    esp,0x8
10005b18:	68 23 af 00 10       	push   0x1000af23	10005b19: R_386_32	.text
10005b1d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b20:	e8 fc ff ff ff       	call   10005b21 <begin(void*)+0xa72>	10005b21: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b25:	83 c4 10             	add    esp,0x10
10005b28:	83 ec 08             	sub    esp,0x8
10005b2b:	50                   	push   eax
10005b2c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b2f:	e8 fc ff ff ff       	call   10005b30 <begin(void*)+0xa81>	10005b30: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005b34:	83 c4 10             	add    esp,0x10
10005b37:	83 ec 04             	sub    esp,0x4
10005b3a:	68 08 af 00 10       	push   0x1000af08	10005b3b: R_386_32	.text
10005b3f:	50                   	push   eax
10005b40:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b43:	e8 fc ff ff ff       	call   10005b44 <begin(void*)+0xa95>	10005b44: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005b48:	83 c4 10             	add    esp,0x10
10005b4b:	83 ec 08             	sub    esp,0x8
10005b4e:	68 39 af 00 10       	push   0x1000af39	10005b4f: R_386_32	.text
10005b53:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b56:	e8 fc ff ff ff       	call   10005b57 <begin(void*)+0xaa8>	10005b57: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b5b:	83 c4 10             	add    esp,0x10
10005b5e:	83 ec 08             	sub    esp,0x8
10005b61:	50                   	push   eax
10005b62:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b65:	e8 fc ff ff ff       	call   10005b66 <begin(void*)+0xab7>	10005b66: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005b6a:	83 c4 10             	add    esp,0x10
10005b6d:	83 ec 04             	sub    esp,0x4
10005b70:	68 08 af 00 10       	push   0x1000af08	10005b71: R_386_32	.text
10005b75:	50                   	push   eax
10005b76:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b79:	e8 fc ff ff ff       	call   10005b7a <begin(void*)+0xacb>	10005b7a: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005b7e:	83 c4 10             	add    esp,0x10
10005b81:	83 ec 08             	sub    esp,0x8
10005b84:	68 4f af 00 10       	push   0x1000af4f	10005b85: R_386_32	.text
10005b89:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b8c:	e8 fc ff ff ff       	call   10005b8d <begin(void*)+0xade>	10005b8d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b91:	83 c4 10             	add    esp,0x10
10005b94:	83 ec 08             	sub    esp,0x8
10005b97:	50                   	push   eax
10005b98:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b9b:	e8 fc ff ff ff       	call   10005b9c <begin(void*)+0xaed>	10005b9c: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005ba0:	83 c4 10             	add    esp,0x10
10005ba3:	83 ec 04             	sub    esp,0x4
10005ba6:	68 08 af 00 10       	push   0x1000af08	10005ba7: R_386_32	.text
10005bab:	50                   	push   eax
10005bac:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005baf:	e8 fc ff ff ff       	call   10005bb0 <begin(void*)+0xb01>	10005bb0: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005bb4:	83 c4 10             	add    esp,0x10
10005bb7:	83 ec 08             	sub    esp,0x8
10005bba:	68 66 af 00 10       	push   0x1000af66	10005bbb: R_386_32	.text
10005bbf:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bc2:	e8 fc ff ff ff       	call   10005bc3 <begin(void*)+0xb14>	10005bc3: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005bc7:	83 c4 10             	add    esp,0x10
10005bca:	83 ec 04             	sub    esp,0x4
10005bcd:	68 80 af 00 10       	push   0x1000af80	10005bce: R_386_32	.text
10005bd2:	50                   	push   eax
10005bd3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bd6:	e8 fc ff ff ff       	call   10005bd7 <begin(void*)+0xb28>	10005bd7: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005bdb:	83 c4 10             	add    esp,0x10
10005bde:	83 ec 08             	sub    esp,0x8
10005be1:	68 a0 af 00 10       	push   0x1000afa0	10005be2: R_386_32	.text
10005be6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005be9:	e8 fc ff ff ff       	call   10005bea <begin(void*)+0xb3b>	10005bea: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005bee:	83 c4 10             	add    esp,0x10
10005bf1:	83 ec 04             	sub    esp,0x4
10005bf4:	68 bb af 00 10       	push   0x1000afbb	10005bf5: R_386_32	.text
10005bf9:	50                   	push   eax
10005bfa:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bfd:	e8 fc ff ff ff       	call   10005bfe <begin(void*)+0xb4f>	10005bfe: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005c02:	83 c4 10             	add    esp,0x10
10005c05:	83 ec 08             	sub    esp,0x8
10005c08:	68 c9 af 00 10       	push   0x1000afc9	10005c09: R_386_32	.text
10005c0d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c10:	e8 fc ff ff ff       	call   10005c11 <begin(void*)+0xb62>	10005c11: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c15:	83 c4 10             	add    esp,0x10
10005c18:	83 ec 04             	sub    esp,0x4
10005c1b:	68 e3 af 00 10       	push   0x1000afe3	10005c1c: R_386_32	.text
10005c20:	50                   	push   eax
10005c21:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c24:	e8 fc ff ff ff       	call   10005c25 <begin(void*)+0xb76>	10005c25: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005c29:	83 c4 10             	add    esp,0x10
10005c2c:	83 ec 08             	sub    esp,0x8
10005c2f:	68 fb af 00 10       	push   0x1000affb	10005c30: R_386_32	.text
10005c34:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c37:	e8 fc ff ff ff       	call   10005c38 <begin(void*)+0xb89>	10005c38: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c3c:	83 c4 10             	add    esp,0x10
10005c3f:	83 ec 04             	sub    esp,0x4
10005c42:	68 e3 af 00 10       	push   0x1000afe3	10005c43: R_386_32	.text
10005c47:	50                   	push   eax
10005c48:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c4b:	e8 fc ff ff ff       	call   10005c4c <begin(void*)+0xb9d>	10005c4c: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005c50:	83 c4 10             	add    esp,0x10
10005c53:	83 ec 08             	sub    esp,0x8
10005c56:	68 15 b0 00 10       	push   0x1000b015	10005c57: R_386_32	.text
10005c5b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c5e:	e8 fc ff ff ff       	call   10005c5f <begin(void*)+0xbb0>	10005c5f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c63:	83 c4 10             	add    esp,0x10
10005c66:	83 ec 04             	sub    esp,0x4
10005c69:	68 e3 af 00 10       	push   0x1000afe3	10005c6a: R_386_32	.text
10005c6e:	50                   	push   eax
10005c6f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c72:	e8 fc ff ff ff       	call   10005c73 <begin(void*)+0xbc4>	10005c73: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005c77:	83 c4 10             	add    esp,0x10
10005c7a:	83 ec 08             	sub    esp,0x8
10005c7d:	68 f2 ae 00 10       	push   0x1000aef2	10005c7e: R_386_32	.text
10005c82:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c85:	e8 fc ff ff ff       	call   10005c86 <begin(void*)+0xbd7>	10005c86: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c8a:	83 c4 10             	add    esp,0x10
10005c8d:	83 ec 08             	sub    esp,0x8
10005c90:	50                   	push   eax
10005c91:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c94:	e8 fc ff ff ff       	call   10005c95 <begin(void*)+0xbe6>	10005c95: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005c99:	83 c4 10             	add    esp,0x10
10005c9c:	83 ec 04             	sub    esp,0x4
10005c9f:	68 30 b0 00 10       	push   0x1000b030	10005ca0: R_386_32	.text
10005ca4:	50                   	push   eax
10005ca5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ca8:	e8 fc ff ff ff       	call   10005ca9 <begin(void*)+0xbfa>	10005ca9: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005cad:	83 c4 10             	add    esp,0x10
10005cb0:	83 ec 08             	sub    esp,0x8
10005cb3:	68 0c af 00 10       	push   0x1000af0c	10005cb4: R_386_32	.text
10005cb8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cbb:	e8 fc ff ff ff       	call   10005cbc <begin(void*)+0xc0d>	10005cbc: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005cc0:	83 c4 10             	add    esp,0x10
10005cc3:	83 ec 08             	sub    esp,0x8
10005cc6:	50                   	push   eax
10005cc7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cca:	e8 fc ff ff ff       	call   10005ccb <begin(void*)+0xc1c>	10005ccb: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005ccf:	83 c4 10             	add    esp,0x10
10005cd2:	83 ec 04             	sub    esp,0x4
10005cd5:	68 30 b0 00 10       	push   0x1000b030	10005cd6: R_386_32	.text
10005cda:	50                   	push   eax
10005cdb:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cde:	e8 fc ff ff ff       	call   10005cdf <begin(void*)+0xc30>	10005cdf: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005ce3:	83 c4 10             	add    esp,0x10
10005ce6:	83 ec 08             	sub    esp,0x8
10005ce9:	68 34 b0 00 10       	push   0x1000b034	10005cea: R_386_32	.text
10005cee:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cf1:	e8 fc ff ff ff       	call   10005cf2 <begin(void*)+0xc43>	10005cf2: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005cf6:	83 c4 10             	add    esp,0x10
10005cf9:	83 ec 04             	sub    esp,0x4
10005cfc:	68 4e b0 00 10       	push   0x1000b04e	10005cfd: R_386_32	.text
10005d01:	50                   	push   eax
10005d02:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d05:	e8 fc ff ff ff       	call   10005d06 <begin(void*)+0xc57>	10005d06: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005d0a:	83 c4 10             	add    esp,0x10
10005d0d:	83 ec 08             	sub    esp,0x8
10005d10:	68 6c b0 00 10       	push   0x1000b06c	10005d11: R_386_32	.text
10005d15:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d18:	e8 fc ff ff ff       	call   10005d19 <begin(void*)+0xc6a>	10005d19: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005d1d:	83 c4 10             	add    esp,0x10
10005d20:	83 ec 04             	sub    esp,0x4
10005d23:	68 87 b0 00 10       	push   0x1000b087	10005d24: R_386_32	.text
10005d28:	50                   	push   eax
10005d29:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d2c:	e8 fc ff ff ff       	call   10005d2d <begin(void*)+0xc7e>	10005d2d: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005d31:	83 c4 10             	add    esp,0x10
10005d34:	83 ec 08             	sub    esp,0x8
10005d37:	68 5e ad 00 10       	push   0x1000ad5e	10005d38: R_386_32	.text
10005d3c:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005d42:	50                   	push   eax
10005d43:	e8 fc ff ff ff       	call   10005d44 <begin(void*)+0xc95>	10005d44: R_386_PC32	strcpy
10005d48:	83 c4 10             	add    esp,0x10
10005d4b:	83 ec 08             	sub    esp,0x8
10005d4e:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005d54:	50                   	push   eax
10005d55:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005d5b:	50                   	push   eax
10005d5c:	e8 fc ff ff ff       	call   10005d5d <begin(void*)+0xcae>	10005d5d: R_386_PC32	strcat
10005d61:	83 c4 10             	add    esp,0x10
10005d64:	83 ec 08             	sub    esp,0x8
10005d67:	68 97 b0 00 10       	push   0x1000b097	10005d68: R_386_32	.text
10005d6c:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005d72:	50                   	push   eax
10005d73:	e8 fc ff ff ff       	call   10005d74 <begin(void*)+0xcc5>	10005d74: R_386_PC32	strcat
10005d78:	83 c4 10             	add    esp,0x10
10005d7b:	83 ec 08             	sub    esp,0x8
10005d7e:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005d84:	50                   	push   eax
10005d85:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d88:	e8 fc ff ff ff       	call   10005d89 <begin(void*)+0xcda>	10005d89: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005d8d:	83 c4 10             	add    esp,0x10
10005d90:	83 ec 04             	sub    esp,0x4
10005d93:	68 00 00 00 00       	push   0x0	10005d94: R_386_32	passwhash
10005d98:	50                   	push   eax
10005d99:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d9c:	e8 fc ff ff ff       	call   10005d9d <begin(void*)+0xcee>	10005d9d: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005da1:	83 c4 10             	add    esp,0x10
10005da4:	83 ec 08             	sub    esp,0x8
10005da7:	68 5e ad 00 10       	push   0x1000ad5e	10005da8: R_386_32	.text
10005dac:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005db2:	50                   	push   eax
10005db3:	e8 fc ff ff ff       	call   10005db4 <begin(void*)+0xd05>	10005db4: R_386_PC32	strcpy
10005db8:	83 c4 10             	add    esp,0x10
10005dbb:	83 ec 08             	sub    esp,0x8
10005dbe:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005dc4:	50                   	push   eax
10005dc5:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005dcb:	50                   	push   eax
10005dcc:	e8 fc ff ff ff       	call   10005dcd <begin(void*)+0xd1e>	10005dcd: R_386_PC32	strcat
10005dd1:	83 c4 10             	add    esp,0x10
10005dd4:	83 ec 08             	sub    esp,0x8
10005dd7:	68 a1 b0 00 10       	push   0x1000b0a1	10005dd8: R_386_32	.text
10005ddc:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005de2:	50                   	push   eax
10005de3:	e8 fc ff ff ff       	call   10005de4 <begin(void*)+0xd35>	10005de4: R_386_PC32	strcat
10005de8:	83 c4 10             	add    esp,0x10
10005deb:	83 ec 08             	sub    esp,0x8
10005dee:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005df4:	50                   	push   eax
10005df5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005df8:	e8 fc ff ff ff       	call   10005df9 <begin(void*)+0xd4a>	10005df9: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005dfd:	83 c4 10             	add    esp,0x10
10005e00:	83 ec 04             	sub    esp,0x4
10005e03:	68 00 00 00 00       	push   0x0	10005e04: R_386_32	passwsalt
10005e08:	50                   	push   eax
10005e09:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005e0c:	e8 fc ff ff ff       	call   10005e0d <begin(void*)+0xd5e>	10005e0d: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005e11:	83 c4 10             	add    esp,0x10
10005e14:	83 ec 08             	sub    esp,0x8
10005e17:	68 5e ad 00 10       	push   0x1000ad5e	10005e18: R_386_32	.text
10005e1c:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005e22:	50                   	push   eax
10005e23:	e8 fc ff ff ff       	call   10005e24 <begin(void*)+0xd75>	10005e24: R_386_PC32	strcpy
10005e28:	83 c4 10             	add    esp,0x10
10005e2b:	83 ec 08             	sub    esp,0x8
10005e2e:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005e34:	50                   	push   eax
10005e35:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005e3b:	50                   	push   eax
10005e3c:	e8 fc ff ff ff       	call   10005e3d <begin(void*)+0xd8e>	10005e3d: R_386_PC32	strcat
10005e41:	83 c4 10             	add    esp,0x10
10005e44:	83 ec 08             	sub    esp,0x8
10005e47:	68 a7 b0 00 10       	push   0x1000b0a7	10005e48: R_386_32	.text
10005e4c:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005e52:	50                   	push   eax
10005e53:	e8 fc ff ff ff       	call   10005e54 <begin(void*)+0xda5>	10005e54: R_386_PC32	strcat
10005e58:	83 c4 10             	add    esp,0x10
10005e5b:	83 ec 08             	sub    esp,0x8
10005e5e:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005e64:	50                   	push   eax
10005e65:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005e68:	e8 fc ff ff ff       	call   10005e69 <begin(void*)+0xdba>	10005e69: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005e6d:	83 c4 10             	add    esp,0x10
10005e70:	83 ec 04             	sub    esp,0x4
10005e73:	68 00 00 00 00       	push   0x0	10005e74: R_386_32	currName
10005e78:	50                   	push   eax
10005e79:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005e7c:	e8 fc ff ff ff       	call   10005e7d <begin(void*)+0xdce>	10005e7d: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005e81:	83 c4 10             	add    esp,0x10
10005e84:	83 ec 08             	sub    esp,0x8
10005e87:	68 96 a5 00 10       	push   0x1000a596	10005e88: R_386_32	.text
10005e8c:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005e92:	50                   	push   eax
10005e93:	e8 fc ff ff ff       	call   10005e94 <begin(void*)+0xde5>	10005e94: R_386_PC32	strcpy
10005e98:	83 c4 10             	add    esp,0x10
10005e9b:	83 ec 08             	sub    esp,0x8
10005e9e:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005ea4:	50                   	push   eax
10005ea5:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005eab:	50                   	push   eax
10005eac:	e8 fc ff ff ff       	call   10005ead <begin(void*)+0xdfe>	10005ead: R_386_PC32	strcat
10005eb1:	83 c4 10             	add    esp,0x10
10005eb4:	83 ec 08             	sub    esp,0x8
10005eb7:	68 a0 a5 00 10       	push   0x1000a5a0	10005eb8: R_386_32	.text
10005ebc:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005ec2:	50                   	push   eax
10005ec3:	e8 fc ff ff ff       	call   10005ec4 <begin(void*)+0xe15>	10005ec4: R_386_PC32	strcat
10005ec8:	83 c4 10             	add    esp,0x10
10005ecb:	83 ec 08             	sub    esp,0x8
10005ece:	68 5e ad 00 10       	push   0x1000ad5e	10005ecf: R_386_32	.text
10005ed3:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005ed9:	50                   	push   eax
10005eda:	e8 fc ff ff ff       	call   10005edb <begin(void*)+0xe2c>	10005edb: R_386_PC32	strcpy
10005edf:	83 c4 10             	add    esp,0x10
10005ee2:	83 ec 08             	sub    esp,0x8
10005ee5:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005eeb:	50                   	push   eax
10005eec:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005ef2:	50                   	push   eax
10005ef3:	e8 fc ff ff ff       	call   10005ef4 <begin(void*)+0xe45>	10005ef4: R_386_PC32	strcat
10005ef8:	83 c4 10             	add    esp,0x10
10005efb:	83 ec 08             	sub    esp,0x8
10005efe:	68 b4 b0 00 10       	push   0x1000b0b4	10005eff: R_386_32	.text
10005f03:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005f09:	50                   	push   eax
10005f0a:	e8 fc ff ff ff       	call   10005f0b <begin(void*)+0xe5c>	10005f0b: R_386_PC32	strcat
10005f0f:	83 c4 10             	add    esp,0x10
10005f12:	83 ec 08             	sub    esp,0x8
10005f15:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005f1b:	50                   	push   eax
10005f1c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005f1f:	e8 fc ff ff ff       	call   10005f20 <begin(void*)+0xe71>	10005f20: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005f24:	83 c4 10             	add    esp,0x10
10005f27:	83 ec 04             	sub    esp,0x4
10005f2a:	8d 95 86 fd ff ff    	lea    edx,[ebp-0x27a]
10005f30:	52                   	push   edx
10005f31:	50                   	push   eax
10005f32:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005f35:	e8 fc ff ff ff       	call   10005f36 <begin(void*)+0xe87>	10005f36: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005f3a:	83 c4 10             	add    esp,0x10
10005f3d:	83 ec 08             	sub    esp,0x8
10005f40:	68 96 a5 00 10       	push   0x1000a596	10005f41: R_386_32	.text
10005f45:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005f4b:	50                   	push   eax
10005f4c:	e8 fc ff ff ff       	call   10005f4d <begin(void*)+0xe9e>	10005f4d: R_386_PC32	strcpy
10005f51:	83 c4 10             	add    esp,0x10
10005f54:	83 ec 08             	sub    esp,0x8
10005f57:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005f5d:	50                   	push   eax
10005f5e:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005f64:	50                   	push   eax
10005f65:	e8 fc ff ff ff       	call   10005f66 <begin(void*)+0xeb7>	10005f66: R_386_PC32	strcat
10005f6a:	83 c4 10             	add    esp,0x10
10005f6d:	83 ec 08             	sub    esp,0x8
10005f70:	68 a9 a5 00 10       	push   0x1000a5a9	10005f71: R_386_32	.text
10005f75:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005f7b:	50                   	push   eax
10005f7c:	e8 fc ff ff ff       	call   10005f7d <begin(void*)+0xece>	10005f7d: R_386_PC32	strcat
10005f81:	83 c4 10             	add    esp,0x10
10005f84:	83 ec 08             	sub    esp,0x8
10005f87:	68 5e ad 00 10       	push   0x1000ad5e	10005f88: R_386_32	.text
10005f8c:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005f92:	50                   	push   eax
10005f93:	e8 fc ff ff ff       	call   10005f94 <begin(void*)+0xee5>	10005f94: R_386_PC32	strcpy
10005f98:	83 c4 10             	add    esp,0x10
10005f9b:	83 ec 08             	sub    esp,0x8
10005f9e:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005fa4:	50                   	push   eax
10005fa5:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005fab:	50                   	push   eax
10005fac:	e8 fc ff ff ff       	call   10005fad <begin(void*)+0xefe>	10005fad: R_386_PC32	strcat
10005fb1:	83 c4 10             	add    esp,0x10
10005fb4:	83 ec 08             	sub    esp,0x8
10005fb7:	68 bd b0 00 10       	push   0x1000b0bd	10005fb8: R_386_32	.text
10005fbc:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005fc2:	50                   	push   eax
10005fc3:	e8 fc ff ff ff       	call   10005fc4 <begin(void*)+0xf15>	10005fc4: R_386_PC32	strcat
10005fc8:	83 c4 10             	add    esp,0x10
10005fcb:	83 ec 08             	sub    esp,0x8
10005fce:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005fd4:	50                   	push   eax
10005fd5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005fd8:	e8 fc ff ff ff       	call   10005fd9 <begin(void*)+0xf2a>	10005fd9: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005fdd:	83 c4 10             	add    esp,0x10
10005fe0:	83 ec 04             	sub    esp,0x4
10005fe3:	8d 95 86 fd ff ff    	lea    edx,[ebp-0x27a]
10005fe9:	52                   	push   edx
10005fea:	50                   	push   eax
10005feb:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005fee:	e8 fc ff ff ff       	call   10005fef <begin(void*)+0xf40>	10005fef: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005ff3:	83 c4 10             	add    esp,0x10
10005ff6:	83 ec 08             	sub    esp,0x8
10005ff9:	68 96 a5 00 10       	push   0x1000a596	10005ffa: R_386_32	.text
10005ffe:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10006004:	50                   	push   eax
10006005:	e8 fc ff ff ff       	call   10006006 <begin(void*)+0xf57>	10006006: R_386_PC32	strcpy
1000600a:	83 c4 10             	add    esp,0x10
1000600d:	83 ec 08             	sub    esp,0x8
10006010:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10006016:	50                   	push   eax
10006017:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
1000601d:	50                   	push   eax
1000601e:	e8 fc ff ff ff       	call   1000601f <begin(void*)+0xf70>	1000601f: R_386_PC32	strcat
10006023:	83 c4 10             	add    esp,0x10
10006026:	83 ec 08             	sub    esp,0x8
10006029:	68 b4 a5 00 10       	push   0x1000a5b4	1000602a: R_386_32	.text
1000602e:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10006034:	50                   	push   eax
10006035:	e8 fc ff ff ff       	call   10006036 <begin(void*)+0xf87>	10006036: R_386_PC32	strcat
1000603a:	83 c4 10             	add    esp,0x10
1000603d:	83 ec 08             	sub    esp,0x8
10006040:	68 5e ad 00 10       	push   0x1000ad5e	10006041: R_386_32	.text
10006045:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000604b:	50                   	push   eax
1000604c:	e8 fc ff ff ff       	call   1000604d <begin(void*)+0xf9e>	1000604d: R_386_PC32	strcpy
10006051:	83 c4 10             	add    esp,0x10
10006054:	83 ec 08             	sub    esp,0x8
10006057:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
1000605d:	50                   	push   eax
1000605e:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006064:	50                   	push   eax
10006065:	e8 fc ff ff ff       	call   10006066 <begin(void*)+0xfb7>	10006066: R_386_PC32	strcat
1000606a:	83 c4 10             	add    esp,0x10
1000606d:	83 ec 08             	sub    esp,0x8
10006070:	68 c8 b0 00 10       	push   0x1000b0c8	10006071: R_386_32	.text
10006075:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000607b:	50                   	push   eax
1000607c:	e8 fc ff ff ff       	call   1000607d <begin(void*)+0xfce>	1000607d: R_386_PC32	strcat
10006081:	83 c4 10             	add    esp,0x10
10006084:	83 ec 08             	sub    esp,0x8
10006087:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000608d:	50                   	push   eax
1000608e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006091:	e8 fc ff ff ff       	call   10006092 <begin(void*)+0xfe3>	10006092: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006096:	83 c4 10             	add    esp,0x10
10006099:	83 ec 04             	sub    esp,0x4
1000609c:	8d 95 86 fd ff ff    	lea    edx,[ebp-0x27a]
100060a2:	52                   	push   edx
100060a3:	50                   	push   eax
100060a4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100060a7:	e8 fc ff ff ff       	call   100060a8 <begin(void*)+0xff9>	100060a8: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100060ac:	83 c4 10             	add    esp,0x10
100060af:	83 ec 08             	sub    esp,0x8
100060b2:	68 96 a5 00 10       	push   0x1000a596	100060b3: R_386_32	.text
100060b7:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100060bd:	50                   	push   eax
100060be:	e8 fc ff ff ff       	call   100060bf <begin(void*)+0x1010>	100060bf: R_386_PC32	strcpy
100060c3:	83 c4 10             	add    esp,0x10
100060c6:	83 ec 08             	sub    esp,0x8
100060c9:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
100060cf:	50                   	push   eax
100060d0:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100060d6:	50                   	push   eax
100060d7:	e8 fc ff ff ff       	call   100060d8 <begin(void*)+0x1029>	100060d8: R_386_PC32	strcat
100060dc:	83 c4 10             	add    esp,0x10
100060df:	83 ec 08             	sub    esp,0x8
100060e2:	68 bf a5 00 10       	push   0x1000a5bf	100060e3: R_386_32	.text
100060e7:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100060ed:	50                   	push   eax
100060ee:	e8 fc ff ff ff       	call   100060ef <begin(void*)+0x1040>	100060ef: R_386_PC32	strcat
100060f3:	83 c4 10             	add    esp,0x10
100060f6:	83 ec 08             	sub    esp,0x8
100060f9:	68 5e ad 00 10       	push   0x1000ad5e	100060fa: R_386_32	.text
100060fe:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006104:	50                   	push   eax
10006105:	e8 fc ff ff ff       	call   10006106 <begin(void*)+0x1057>	10006106: R_386_PC32	strcpy
1000610a:	83 c4 10             	add    esp,0x10
1000610d:	83 ec 08             	sub    esp,0x8
10006110:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10006116:	50                   	push   eax
10006117:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000611d:	50                   	push   eax
1000611e:	e8 fc ff ff ff       	call   1000611f <begin(void*)+0x1070>	1000611f: R_386_PC32	strcat
10006123:	83 c4 10             	add    esp,0x10
10006126:	83 ec 08             	sub    esp,0x8
10006129:	68 d3 b0 00 10       	push   0x1000b0d3	1000612a: R_386_32	.text
1000612e:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006134:	50                   	push   eax
10006135:	e8 fc ff ff ff       	call   10006136 <begin(void*)+0x1087>	10006136: R_386_PC32	strcat
1000613a:	83 c4 10             	add    esp,0x10
1000613d:	83 ec 08             	sub    esp,0x8
10006140:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006146:	50                   	push   eax
10006147:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000614a:	e8 fc ff ff ff       	call   1000614b <begin(void*)+0x109c>	1000614b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000614f:	83 c4 10             	add    esp,0x10
10006152:	83 ec 04             	sub    esp,0x4
10006155:	8d 95 86 fd ff ff    	lea    edx,[ebp-0x27a]
1000615b:	52                   	push   edx
1000615c:	50                   	push   eax
1000615d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006160:	e8 fc ff ff ff       	call   10006161 <begin(void*)+0x10b2>	10006161: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006165:	83 c4 10             	add    esp,0x10
10006168:	83 ec 08             	sub    esp,0x8
1000616b:	68 96 a5 00 10       	push   0x1000a596	1000616c: R_386_32	.text
10006170:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10006176:	50                   	push   eax
10006177:	e8 fc ff ff ff       	call   10006178 <begin(void*)+0x10c9>	10006178: R_386_PC32	strcpy
1000617c:	83 c4 10             	add    esp,0x10
1000617f:	83 ec 08             	sub    esp,0x8
10006182:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10006188:	50                   	push   eax
10006189:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
1000618f:	50                   	push   eax
10006190:	e8 fc ff ff ff       	call   10006191 <begin(void*)+0x10e2>	10006191: R_386_PC32	strcat
10006195:	83 c4 10             	add    esp,0x10
10006198:	83 ec 08             	sub    esp,0x8
1000619b:	68 db a5 00 10       	push   0x1000a5db	1000619c: R_386_32	.text
100061a0:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100061a6:	50                   	push   eax
100061a7:	e8 fc ff ff ff       	call   100061a8 <begin(void*)+0x10f9>	100061a8: R_386_PC32	strcat
100061ac:	83 c4 10             	add    esp,0x10
100061af:	83 ec 08             	sub    esp,0x8
100061b2:	68 5e ad 00 10       	push   0x1000ad5e	100061b3: R_386_32	.text
100061b7:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100061bd:	50                   	push   eax
100061be:	e8 fc ff ff ff       	call   100061bf <begin(void*)+0x1110>	100061bf: R_386_PC32	strcpy
100061c3:	83 c4 10             	add    esp,0x10
100061c6:	83 ec 08             	sub    esp,0x8
100061c9:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
100061cf:	50                   	push   eax
100061d0:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100061d6:	50                   	push   eax
100061d7:	e8 fc ff ff ff       	call   100061d8 <begin(void*)+0x1129>	100061d8: R_386_PC32	strcat
100061dc:	83 c4 10             	add    esp,0x10
100061df:	83 ec 08             	sub    esp,0x8
100061e2:	68 dd b0 00 10       	push   0x1000b0dd	100061e3: R_386_32	.text
100061e7:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100061ed:	50                   	push   eax
100061ee:	e8 fc ff ff ff       	call   100061ef <begin(void*)+0x1140>	100061ef: R_386_PC32	strcat
100061f3:	83 c4 10             	add    esp,0x10
100061f6:	83 ec 08             	sub    esp,0x8
100061f9:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100061ff:	50                   	push   eax
10006200:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006203:	e8 fc ff ff ff       	call   10006204 <begin(void*)+0x1155>	10006204: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006208:	83 c4 10             	add    esp,0x10
1000620b:	83 ec 04             	sub    esp,0x4
1000620e:	8d 95 86 fd ff ff    	lea    edx,[ebp-0x27a]
10006214:	52                   	push   edx
10006215:	50                   	push   eax
10006216:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006219:	e8 fc ff ff ff       	call   1000621a <begin(void*)+0x116b>	1000621a: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000621e:	83 c4 10             	add    esp,0x10
10006221:	83 ec 08             	sub    esp,0x8
10006224:	68 96 a5 00 10       	push   0x1000a596	10006225: R_386_32	.text
10006229:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
1000622f:	50                   	push   eax
10006230:	e8 fc ff ff ff       	call   10006231 <begin(void*)+0x1182>	10006231: R_386_PC32	strcpy
10006235:	83 c4 10             	add    esp,0x10
10006238:	83 ec 08             	sub    esp,0x8
1000623b:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10006241:	50                   	push   eax
10006242:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10006248:	50                   	push   eax
10006249:	e8 fc ff ff ff       	call   1000624a <begin(void*)+0x119b>	1000624a: R_386_PC32	strcat
1000624e:	83 c4 10             	add    esp,0x10
10006251:	83 ec 08             	sub    esp,0x8
10006254:	68 d4 a5 00 10       	push   0x1000a5d4	10006255: R_386_32	.text
10006259:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
1000625f:	50                   	push   eax
10006260:	e8 fc ff ff ff       	call   10006261 <begin(void*)+0x11b2>	10006261: R_386_PC32	strcat
10006265:	83 c4 10             	add    esp,0x10
10006268:	83 ec 08             	sub    esp,0x8
1000626b:	68 5e ad 00 10       	push   0x1000ad5e	1000626c: R_386_32	.text
10006270:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006276:	50                   	push   eax
10006277:	e8 fc ff ff ff       	call   10006278 <begin(void*)+0x11c9>	10006278: R_386_PC32	strcpy
1000627c:	83 c4 10             	add    esp,0x10
1000627f:	83 ec 08             	sub    esp,0x8
10006282:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10006288:	50                   	push   eax
10006289:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000628f:	50                   	push   eax
10006290:	e8 fc ff ff ff       	call   10006291 <begin(void*)+0x11e2>	10006291: R_386_PC32	strcat
10006295:	83 c4 10             	add    esp,0x10
10006298:	83 ec 08             	sub    esp,0x8
1000629b:	68 e5 b0 00 10       	push   0x1000b0e5	1000629c: R_386_32	.text
100062a0:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100062a6:	50                   	push   eax
100062a7:	e8 fc ff ff ff       	call   100062a8 <begin(void*)+0x11f9>	100062a8: R_386_PC32	strcat
100062ac:	83 c4 10             	add    esp,0x10
100062af:	83 ec 08             	sub    esp,0x8
100062b2:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100062b8:	50                   	push   eax
100062b9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100062bc:	e8 fc ff ff ff       	call   100062bd <begin(void*)+0x120e>	100062bd: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100062c1:	83 c4 10             	add    esp,0x10
100062c4:	83 ec 04             	sub    esp,0x4
100062c7:	8d 95 86 fd ff ff    	lea    edx,[ebp-0x27a]
100062cd:	52                   	push   edx
100062ce:	50                   	push   eax
100062cf:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100062d2:	e8 fc ff ff ff       	call   100062d3 <begin(void*)+0x1224>	100062d3: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100062d7:	83 c4 10             	add    esp,0x10
100062da:	83 ec 08             	sub    esp,0x8
100062dd:	68 96 a5 00 10       	push   0x1000a596	100062de: R_386_32	.text
100062e2:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100062e8:	50                   	push   eax
100062e9:	e8 fc ff ff ff       	call   100062ea <begin(void*)+0x123b>	100062ea: R_386_PC32	strcpy
100062ee:	83 c4 10             	add    esp,0x10
100062f1:	83 ec 08             	sub    esp,0x8
100062f4:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
100062fa:	50                   	push   eax
100062fb:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10006301:	50                   	push   eax
10006302:	e8 fc ff ff ff       	call   10006303 <begin(void*)+0x1254>	10006303: R_386_PC32	strcat
10006307:	83 c4 10             	add    esp,0x10
1000630a:	83 ec 08             	sub    esp,0x8
1000630d:	68 c9 a5 00 10       	push   0x1000a5c9	1000630e: R_386_32	.text
10006312:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10006318:	50                   	push   eax
10006319:	e8 fc ff ff ff       	call   1000631a <begin(void*)+0x126b>	1000631a: R_386_PC32	strcat
1000631e:	83 c4 10             	add    esp,0x10
10006321:	83 ec 08             	sub    esp,0x8
10006324:	68 5e ad 00 10       	push   0x1000ad5e	10006325: R_386_32	.text
10006329:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000632f:	50                   	push   eax
10006330:	e8 fc ff ff ff       	call   10006331 <begin(void*)+0x1282>	10006331: R_386_PC32	strcpy
10006335:	83 c4 10             	add    esp,0x10
10006338:	83 ec 08             	sub    esp,0x8
1000633b:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10006341:	50                   	push   eax
10006342:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006348:	50                   	push   eax
10006349:	e8 fc ff ff ff       	call   1000634a <begin(void*)+0x129b>	1000634a: R_386_PC32	strcat
1000634e:	83 c4 10             	add    esp,0x10
10006351:	83 ec 08             	sub    esp,0x8
10006354:	68 ec b0 00 10       	push   0x1000b0ec	10006355: R_386_32	.text
10006359:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000635f:	50                   	push   eax
10006360:	e8 fc ff ff ff       	call   10006361 <begin(void*)+0x12b2>	10006361: R_386_PC32	strcat
10006365:	83 c4 10             	add    esp,0x10
10006368:	83 ec 08             	sub    esp,0x8
1000636b:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006371:	50                   	push   eax
10006372:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006375:	e8 fc ff ff ff       	call   10006376 <begin(void*)+0x12c7>	10006376: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000637a:	83 c4 10             	add    esp,0x10
1000637d:	83 ec 04             	sub    esp,0x4
10006380:	8d 95 86 fd ff ff    	lea    edx,[ebp-0x27a]
10006386:	52                   	push   edx
10006387:	50                   	push   eax
10006388:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000638b:	e8 fc ff ff ff       	call   1000638c <begin(void*)+0x12dd>	1000638c: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006390:	83 c4 10             	add    esp,0x10
10006393:	83 ec 0c             	sub    esp,0xc
10006396:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006399:	e8 fc ff ff ff       	call   1000639a <begin(void*)+0x12eb>	1000639a: R_386_PC32	CmClose(Reghive_Tag*)
1000639e:	83 c4 10             	add    esp,0x10
100063a1:	a1 00 00 00 00       	mov    eax,ds:0x0	100063a2: R_386_32	Krnl::computer
100063a6:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
100063ac:	83 e0 80             	and    eax,0xffffff80
100063af:	84 c0                	test   al,al
100063b1:	75 2a                	jne    100063dd <begin(void*)+0x132e>
100063b3:	a1 00 00 00 00       	mov    eax,ds:0x0	100063b4: R_386_32	Krnl::computer
100063b8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
100063be:	83 e0 20             	and    eax,0x20
100063c1:	84 c0                	test   al,al
100063c3:	74 1c                	je     100063e1 <begin(void*)+0x1332>
100063c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100063c6: R_386_32	Krnl::computer
100063ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
100063d0:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
100063d6:	83 e0 04             	and    eax,0x4
100063d9:	84 c0                	test   al,al
100063db:	74 04                	je     100063e1 <begin(void*)+0x1332>
100063dd:	b0 01                	mov    al,0x1
100063df:	eb 02                	jmp    100063e3 <begin(void*)+0x1334>
100063e1:	b0 00                	mov    al,0x0
100063e3:	84 c0                	test   al,al
100063e5:	0f 84 99 00 00 00    	je     10006484 <begin(void*)+0x13d5>
100063eb:	83 ec 0c             	sub    esp,0xc
100063ee:	68 14 01 00 00       	push   0x114
100063f3:	e8 fc ff ff ff       	call   100063f4 <begin(void*)+0x1345>	100063f4: R_386_PC32	operator new(unsigned long)
100063f8:	83 c4 10             	add    esp,0x10
100063fb:	89 c3                	mov    ebx,eax
100063fd:	a1 00 00 00 00       	mov    eax,ds:0x0	100063fe: R_386_32	kernelProcess
10006402:	83 ec 04             	sub    esp,0x4
10006405:	50                   	push   eax
10006406:	68 f8 b0 00 10       	push   0x1000b0f8	10006407: R_386_32	.text
1000640b:	53                   	push   ebx
1000640c:	e8 fc ff ff ff       	call   1000640d <begin(void*)+0x135e>	1000640d: R_386_PC32	File::File(char const*, Process*)
10006411:	83 c4 10             	add    esp,0x10
10006414:	89 5d a0             	mov    DWORD PTR [ebp-0x60],ebx
10006417:	83 ec 08             	sub    esp,0x8
1000641a:	68 16 b1 00 10       	push   0x1000b116	1000641b: R_386_32	.text
1000641f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006422:	e8 fc ff ff ff       	call   10006423 <begin(void*)+0x1374>	10006423: R_386_PC32	File::rename(char const*)
10006427:	83 c4 10             	add    esp,0x10
1000642a:	83 7d a0 00          	cmp    DWORD PTR [ebp-0x60],0x0
1000642e:	74 15                	je     10006445 <begin(void*)+0x1396>
10006430:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10006433:	8b 00                	mov    eax,DWORD PTR [eax]
10006435:	83 c0 08             	add    eax,0x8
10006438:	8b 00                	mov    eax,DWORD PTR [eax]
1000643a:	83 ec 0c             	sub    esp,0xc
1000643d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006440:	ff d0                	call   eax
10006442:	83 c4 10             	add    esp,0x10
10006445:	83 ec 0c             	sub    esp,0xc
10006448:	68 14 01 00 00       	push   0x114
1000644d:	e8 fc ff ff ff       	call   1000644e <begin(void*)+0x139f>	1000644e: R_386_PC32	operator new(unsigned long)
10006452:	83 c4 10             	add    esp,0x10
10006455:	89 c3                	mov    ebx,eax
10006457:	a1 00 00 00 00       	mov    eax,ds:0x0	10006458: R_386_32	kernelProcess
1000645c:	83 ec 04             	sub    esp,0x4
1000645f:	50                   	push   eax
10006460:	68 34 b1 00 10       	push   0x1000b134	10006461: R_386_32	.text
10006465:	53                   	push   ebx
10006466:	e8 fc ff ff ff       	call   10006467 <begin(void*)+0x13b8>	10006467: R_386_PC32	File::File(char const*, Process*)
1000646b:	83 c4 10             	add    esp,0x10
1000646e:	89 5d a0             	mov    DWORD PTR [ebp-0x60],ebx
10006471:	83 ec 08             	sub    esp,0x8
10006474:	68 f8 b0 00 10       	push   0x1000b0f8	10006475: R_386_32	.text
10006479:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000647c:	e8 fc ff ff ff       	call   1000647d <begin(void*)+0x13ce>	1000647d: R_386_PC32	File::rename(char const*)
10006481:	83 c4 10             	add    esp,0x10
10006484:	a1 00 00 00 00       	mov    eax,ds:0x0	10006485: R_386_32	term
10006489:	83 ec 0c             	sub    esp,0xc
1000648c:	50                   	push   eax
1000648d:	e8 fc ff ff ff       	call   1000648e <begin(void*)+0x13df>	1000648e: R_386_PC32	setActiveTerminal(VgaText*)
10006492:	83 c4 10             	add    esp,0x10
10006495:	e8 fc ff ff ff       	call   10006496 <begin(void*)+0x13e7>	10006496: R_386_PC32	drawBootScreen()
1000649a:	83 ec 0c             	sub    esp,0xc
1000649d:	68 9d ab 00 10       	push   0x1000ab9d	1000649e: R_386_32	.text
100064a2:	6a 0d                	push   0xd
100064a4:	6a 32                	push   0x32
100064a6:	6a 05                	push   0x5
100064a8:	6a 16                	push   0x16
100064aa:	e8 fc ff ff ff       	call   100064ab <begin(void*)+0x13fc>	100064ab: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100064af:	83 c4 20             	add    esp,0x20
100064b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100064b3: R_386_32	term
100064b7:	83 ec 04             	sub    esp,0x4
100064ba:	6a 08                	push   0x8
100064bc:	6a 18                	push   0x18
100064be:	50                   	push   eax
100064bf:	e8 fc ff ff ff       	call   100064c0 <begin(void*)+0x1411>	100064c0: R_386_PC32	VgaText::setCursor(int, int)
100064c4:	83 c4 10             	add    esp,0x10
100064c7:	a1 00 00 00 00       	mov    eax,ds:0x0	100064c8: R_386_32	term
100064cc:	83 ec 08             	sub    esp,0x8
100064cf:	68 50 b1 00 10       	push   0x1000b150	100064d0: R_386_32	.text
100064d4:	50                   	push   eax
100064d5:	e8 fc ff ff ff       	call   100064d6 <begin(void*)+0x1427>	100064d6: R_386_PC32	VgaText::puts(char const*)
100064da:	83 c4 10             	add    esp,0x10
100064dd:	a1 00 00 00 00       	mov    eax,ds:0x0	100064de: R_386_32	term
100064e2:	83 ec 04             	sub    esp,0x4
100064e5:	6a 0a                	push   0xa
100064e7:	6a 18                	push   0x18
100064e9:	50                   	push   eax
100064ea:	e8 fc ff ff ff       	call   100064eb <begin(void*)+0x143c>	100064eb: R_386_PC32	VgaText::setCursor(int, int)
100064ef:	83 c4 10             	add    esp,0x10
100064f2:	a1 00 00 00 00       	mov    eax,ds:0x0	100064f3: R_386_32	term
100064f7:	83 ec 08             	sub    esp,0x8
100064fa:	68 78 b1 00 10       	push   0x1000b178	100064fb: R_386_32	.text
100064ff:	50                   	push   eax
10006500:	e8 fc ff ff ff       	call   10006501 <begin(void*)+0x1452>	10006501: R_386_PC32	VgaText::puts(char const*)
10006505:	83 c4 10             	add    esp,0x10
10006508:	a1 00 00 00 00       	mov    eax,ds:0x0	10006509: R_386_32	term
1000650d:	83 ec 04             	sub    esp,0x4
10006510:	6a 0b                	push   0xb
10006512:	6a 18                	push   0x18
10006514:	50                   	push   eax
10006515:	e8 fc ff ff ff       	call   10006516 <begin(void*)+0x1467>	10006516: R_386_PC32	VgaText::setCursor(int, int)
1000651a:	83 c4 10             	add    esp,0x10
1000651d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000651e: R_386_32	term
10006522:	83 ec 08             	sub    esp,0x8
10006525:	68 a4 b1 00 10       	push   0x1000b1a4	10006526: R_386_32	.text
1000652a:	50                   	push   eax
1000652b:	e8 fc ff ff ff       	call   1000652c <begin(void*)+0x147d>	1000652c: R_386_PC32	VgaText::puts(char const*)
10006530:	83 c4 10             	add    esp,0x10
10006533:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006535: R_386_32	installKey
1000653a:	a0 00 00 00 00       	mov    al,ds:0x0	1000653b: R_386_32	installKey
1000653f:	84 c0                	test   al,al
10006541:	0f 94 c0             	sete   al
10006544:	84 c0                	test   al,al
10006546:	74 02                	je     1000654a <begin(void*)+0x149b>
10006548:	eb f0                	jmp    1000653a <begin(void*)+0x148b>
1000654a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000654c: R_386_32	installKey
10006551:	a1 00 00 00 00       	mov    eax,ds:0x0	10006552: R_386_32	term
10006556:	83 ec 04             	sub    esp,0x4
10006559:	6a 0c                	push   0xc
1000655b:	6a 18                	push   0x18
1000655d:	50                   	push   eax
1000655e:	e8 fc ff ff ff       	call   1000655f <begin(void*)+0x14b0>	1000655f: R_386_PC32	VgaText::setCursor(int, int)
10006563:	83 c4 10             	add    esp,0x10
10006566:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10006568: R_386_32	Krnl::computer
1000656c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000656d: R_386_32	Krnl::computer
10006571:	8b 00                	mov    eax,DWORD PTR [eax]
10006573:	83 c0 0c             	add    eax,0xc
10006576:	8b 00                	mov    eax,DWORD PTR [eax]
10006578:	6a 00                	push   0x0
1000657a:	6a 00                	push   0x0
1000657c:	6a 01                	push   0x1
1000657e:	52                   	push   edx
1000657f:	ff d0                	call   eax
10006581:	83 c4 10             	add    esp,0x10
10006584:	a1 00 00 00 00       	mov    eax,ds:0x0	10006585: R_386_32	term
10006589:	6a 0f                	push   0xf
1000658b:	6a 0c                	push   0xc
1000658d:	68 b8 b1 00 10       	push   0x1000b1b8	1000658e: R_386_32	.text
10006592:	50                   	push   eax
10006593:	e8 fc ff ff ff       	call   10006594 <begin(void*)+0x14e5>	10006594: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006598:	83 c4 10             	add    esp,0x10
1000659b:	e9 c2 0d 00 00       	jmp    10007362 <begin(void*)+0x22b3>
100065a0:	e8 fc ff ff ff       	call   100065a1 <begin(void*)+0x14f2>	100065a1: R_386_PC32	User::loadClockSettings()
100065a5:	83 ec 0c             	sub    esp,0xc
100065a8:	68 20 ad 00 10       	push   0x1000ad20	100065a9: R_386_32	.text
100065ad:	e8 fc ff ff ff       	call   100065ae <begin(void*)+0x14ff>	100065ae: R_386_PC32	CmOpen(char const*)
100065b2:	83 c4 10             	add    esp,0x10
100065b5:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
100065b8:	83 ec 08             	sub    esp,0x8
100065bb:	68 da ae 00 10       	push   0x1000aeda	100065bc: R_386_32	.text
100065c0:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
100065c3:	e8 fc ff ff ff       	call   100065c4 <begin(void*)+0x1515>	100065c4: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100065c8:	83 c4 10             	add    esp,0x10
100065cb:	83 ec 04             	sub    esp,0x4
100065ce:	8d 95 86 fd ff ff    	lea    edx,[ebp-0x27a]
100065d4:	52                   	push   edx
100065d5:	50                   	push   eax
100065d6:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
100065d9:	e8 fc ff ff ff       	call   100065da <begin(void*)+0x152b>	100065da: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
100065de:	83 c4 10             	add    esp,0x10
100065e1:	83 ec 08             	sub    esp,0x8
100065e4:	68 de b1 00 10       	push   0x1000b1de	100065e5: R_386_32	.text
100065e9:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
100065ec:	e8 fc ff ff ff       	call   100065ed <begin(void*)+0x153e>	100065ed: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100065f1:	83 c4 10             	add    esp,0x10
100065f4:	83 ec 04             	sub    esp,0x4
100065f7:	8d 55 80             	lea    edx,[ebp-0x80]
100065fa:	52                   	push   edx
100065fb:	50                   	push   eax
100065fc:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
100065ff:	e8 fc ff ff ff       	call   10006600 <begin(void*)+0x1551>	10006600: R_386_PC32	CmGetInteger(Reghive_Tag*, int, unsigned long long*)
10006604:	83 c4 10             	add    esp,0x10
10006607:	83 ec 0c             	sub    esp,0xc
1000660a:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
1000660d:	e8 fc ff ff ff       	call   1000660e <begin(void*)+0x155f>	1000660e: R_386_PC32	CmClose(Reghive_Tag*)
10006612:	83 c4 10             	add    esp,0x10
10006615:	83 ec 0c             	sub    esp,0xc
10006618:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
1000661e:	50                   	push   eax
1000661f:	e8 fc ff ff ff       	call   10006620 <begin(void*)+0x1571>	10006620: R_386_PC32	checkExtendedKey(char*)
10006624:	83 c4 10             	add    esp,0x10
10006627:	85 c0                	test   eax,eax
10006629:	0f 94 c0             	sete   al
1000662c:	84 c0                	test   al,al
1000662e:	0f 84 ed 01 00 00    	je     10006821 <begin(void*)+0x1772>
10006634:	83 ec 0c             	sub    esp,0xc
10006637:	6a 01                	push   0x1
10006639:	e8 fc ff ff ff       	call   1000663a <begin(void*)+0x158b>	1000663a: R_386_PC32	firstRun(bool)
1000663e:	83 c4 10             	add    esp,0x10
10006641:	83 ec 0c             	sub    esp,0xc
10006644:	68 20 ad 00 10       	push   0x1000ad20	10006645: R_386_32	.text
10006649:	e8 fc ff ff ff       	call   1000664a <begin(void*)+0x159b>	1000664a: R_386_PC32	CmOpen(char const*)
1000664e:	83 c4 10             	add    esp,0x10
10006651:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10006654:	83 ec 04             	sub    esp,0x4
10006657:	68 45 ad 00 10       	push   0x1000ad45	10006658: R_386_32	.text
1000665c:	6a 00                	push   0x0
1000665e:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10006661:	e8 fc ff ff ff       	call   10006662 <begin(void*)+0x15b3>	10006662: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10006666:	83 c4 10             	add    esp,0x10
10006669:	83 ec 08             	sub    esp,0x8
1000666c:	68 45 ad 00 10       	push   0x1000ad45	1000666d: R_386_32	.text
10006671:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10006674:	e8 fc ff ff ff       	call   10006675 <begin(void*)+0x15c6>	10006675: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006679:	83 c4 10             	add    esp,0x10
1000667c:	83 ec 08             	sub    esp,0x8
1000667f:	50                   	push   eax
10006680:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10006683:	e8 fc ff ff ff       	call   10006684 <begin(void*)+0x15d5>	10006684: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006688:	83 c4 10             	add    esp,0x10
1000668b:	83 ec 04             	sub    esp,0x4
1000668e:	68 7f ad 00 10       	push   0x1000ad7f	1000668f: R_386_32	.text
10006693:	50                   	push   eax
10006694:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10006697:	e8 fc ff ff ff       	call   10006698 <begin(void*)+0x15e9>	10006698: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000669c:	83 c4 10             	add    esp,0x10
1000669f:	83 ec 08             	sub    esp,0x8
100066a2:	68 03 ae 00 10       	push   0x1000ae03	100066a3: R_386_32	.text
100066a7:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
100066aa:	e8 fc ff ff ff       	call   100066ab <begin(void*)+0x15fc>	100066ab: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100066af:	83 c4 10             	add    esp,0x10
100066b2:	83 ec 08             	sub    esp,0x8
100066b5:	50                   	push   eax
100066b6:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
100066b9:	e8 fc ff ff ff       	call   100066ba <begin(void*)+0x160b>	100066ba: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100066be:	83 c4 10             	add    esp,0x10
100066c1:	83 ec 04             	sub    esp,0x4
100066c4:	68 1d ae 00 10       	push   0x1000ae1d	100066c5: R_386_32	.text
100066c9:	50                   	push   eax
100066ca:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
100066cd:	e8 fc ff ff ff       	call   100066ce <begin(void*)+0x161f>	100066ce: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100066d2:	83 c4 10             	add    esp,0x10
100066d5:	83 ec 08             	sub    esp,0x8
100066d8:	68 da ae 00 10       	push   0x1000aeda	100066d9: R_386_32	.text
100066dd:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
100066e0:	e8 fc ff ff ff       	call   100066e1 <begin(void*)+0x1632>	100066e1: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100066e5:	83 c4 10             	add    esp,0x10
100066e8:	83 ec 04             	sub    esp,0x4
100066eb:	68 00 00 00 00       	push   0x0	100066ec: R_386_32	pkeybuf
100066f0:	50                   	push   eax
100066f1:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
100066f4:	e8 fc ff ff ff       	call   100066f5 <begin(void*)+0x1646>	100066f5: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100066f9:	83 c4 10             	add    esp,0x10
100066fc:	83 ec 0c             	sub    esp,0xc
100066ff:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10006702:	e8 fc ff ff ff       	call   10006703 <begin(void*)+0x1654>	10006703: R_386_PC32	CmClose(Reghive_Tag*)
10006707:	83 c4 10             	add    esp,0x10
1000670a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000670b: R_386_32	term
1000670f:	83 ec 0c             	sub    esp,0xc
10006712:	50                   	push   eax
10006713:	e8 fc ff ff ff       	call   10006714 <begin(void*)+0x1665>	10006714: R_386_PC32	setActiveTerminal(VgaText*)
10006718:	83 c4 10             	add    esp,0x10
1000671b:	e8 fc ff ff ff       	call   1000671c <begin(void*)+0x166d>	1000671c: R_386_PC32	drawBootScreen()
10006720:	83 ec 0c             	sub    esp,0xc
10006723:	68 f2 b1 00 10       	push   0x1000b1f2	10006724: R_386_32	.text
10006728:	6a 0d                	push   0xd
1000672a:	6a 32                	push   0x32
1000672c:	6a 05                	push   0x5
1000672e:	6a 16                	push   0x16
10006730:	e8 fc ff ff ff       	call   10006731 <begin(void*)+0x1682>	10006731: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10006735:	83 c4 20             	add    esp,0x20
10006738:	a1 00 00 00 00       	mov    eax,ds:0x0	10006739: R_386_32	term
1000673d:	83 ec 04             	sub    esp,0x4
10006740:	6a 08                	push   0x8
10006742:	6a 18                	push   0x18
10006744:	50                   	push   eax
10006745:	e8 fc ff ff ff       	call   10006746 <begin(void*)+0x1697>	10006746: R_386_PC32	VgaText::setCursor(int, int)
1000674a:	83 c4 10             	add    esp,0x10
1000674d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000674e: R_386_32	term
10006752:	83 ec 08             	sub    esp,0x8
10006755:	68 08 b2 00 10       	push   0x1000b208	10006756: R_386_32	.text
1000675a:	50                   	push   eax
1000675b:	e8 fc ff ff ff       	call   1000675c <begin(void*)+0x16ad>	1000675c: R_386_PC32	VgaText::puts(char const*)
10006760:	83 c4 10             	add    esp,0x10
10006763:	a1 00 00 00 00       	mov    eax,ds:0x0	10006764: R_386_32	term
10006768:	83 ec 04             	sub    esp,0x4
1000676b:	6a 0a                	push   0xa
1000676d:	6a 18                	push   0x18
1000676f:	50                   	push   eax
10006770:	e8 fc ff ff ff       	call   10006771 <begin(void*)+0x16c2>	10006771: R_386_PC32	VgaText::setCursor(int, int)
10006775:	83 c4 10             	add    esp,0x10
10006778:	a1 00 00 00 00       	mov    eax,ds:0x0	10006779: R_386_32	term
1000677d:	83 ec 08             	sub    esp,0x8
10006780:	68 78 b1 00 10       	push   0x1000b178	10006781: R_386_32	.text
10006785:	50                   	push   eax
10006786:	e8 fc ff ff ff       	call   10006787 <begin(void*)+0x16d8>	10006787: R_386_PC32	VgaText::puts(char const*)
1000678b:	83 c4 10             	add    esp,0x10
1000678e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000678f: R_386_32	term
10006793:	83 ec 04             	sub    esp,0x4
10006796:	6a 0b                	push   0xb
10006798:	6a 18                	push   0x18
1000679a:	50                   	push   eax
1000679b:	e8 fc ff ff ff       	call   1000679c <begin(void*)+0x16ed>	1000679c: R_386_PC32	VgaText::setCursor(int, int)
100067a0:	83 c4 10             	add    esp,0x10
100067a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100067a4: R_386_32	term
100067a8:	83 ec 08             	sub    esp,0x8
100067ab:	68 a4 b1 00 10       	push   0x1000b1a4	100067ac: R_386_32	.text
100067b0:	50                   	push   eax
100067b1:	e8 fc ff ff ff       	call   100067b2 <begin(void*)+0x1703>	100067b2: R_386_PC32	VgaText::puts(char const*)
100067b6:	83 c4 10             	add    esp,0x10
100067b9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100067bb: R_386_32	installKey
100067c0:	a0 00 00 00 00       	mov    al,ds:0x0	100067c1: R_386_32	installKey
100067c5:	84 c0                	test   al,al
100067c7:	0f 94 c0             	sete   al
100067ca:	84 c0                	test   al,al
100067cc:	74 02                	je     100067d0 <begin(void*)+0x1721>
100067ce:	eb f0                	jmp    100067c0 <begin(void*)+0x1711>
100067d0:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100067d2: R_386_32	installKey
100067d7:	a1 00 00 00 00       	mov    eax,ds:0x0	100067d8: R_386_32	term
100067dc:	83 ec 04             	sub    esp,0x4
100067df:	6a 0c                	push   0xc
100067e1:	6a 18                	push   0x18
100067e3:	50                   	push   eax
100067e4:	e8 fc ff ff ff       	call   100067e5 <begin(void*)+0x1736>	100067e5: R_386_PC32	VgaText::setCursor(int, int)
100067e9:	83 c4 10             	add    esp,0x10
100067ec:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100067ee: R_386_32	Krnl::computer
100067f2:	a1 00 00 00 00       	mov    eax,ds:0x0	100067f3: R_386_32	Krnl::computer
100067f7:	8b 00                	mov    eax,DWORD PTR [eax]
100067f9:	83 c0 0c             	add    eax,0xc
100067fc:	8b 00                	mov    eax,DWORD PTR [eax]
100067fe:	6a 00                	push   0x0
10006800:	6a 00                	push   0x0
10006802:	6a 01                	push   0x1
10006804:	52                   	push   edx
10006805:	ff d0                	call   eax
10006807:	83 c4 10             	add    esp,0x10
1000680a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000680b: R_386_32	term
1000680f:	6a 0f                	push   0xf
10006811:	6a 0c                	push   0xc
10006813:	68 b8 b1 00 10       	push   0x1000b1b8	10006814: R_386_32	.text
10006818:	50                   	push   eax
10006819:	e8 fc ff ff ff       	call   1000681a <begin(void*)+0x176b>	1000681a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000681e:	83 c4 10             	add    esp,0x10
10006821:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006823: R_386_32	showSidebar
10006828:	83 ec 0c             	sub    esp,0xc
1000682b:	68 84 01 00 00       	push   0x184
10006830:	e8 fc ff ff ff       	call   10006831 <begin(void*)+0x1782>	10006831: R_386_PC32	operator new(unsigned long)
10006835:	83 c4 10             	add    esp,0x10
10006838:	89 c3                	mov    ebx,eax
1000683a:	83 ec 08             	sub    esp,0x8
1000683d:	68 dc a7 00 10       	push   0x1000a7dc	1000683e: R_386_32	.text
10006842:	53                   	push   ebx
10006843:	e8 fc ff ff ff       	call   10006844 <begin(void*)+0x1795>	10006844: R_386_PC32	VgaText::VgaText(char const*)
10006848:	83 c4 10             	add    esp,0x10
1000684b:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	1000684d: R_386_32	term
10006851:	a1 00 00 00 00       	mov    eax,ds:0x0	10006852: R_386_32	term
10006856:	83 ec 0c             	sub    esp,0xc
10006859:	50                   	push   eax
1000685a:	e8 fc ff ff ff       	call   1000685b <begin(void*)+0x17ac>	1000685b: R_386_PC32	setActiveTerminal(VgaText*)
1000685f:	83 c4 10             	add    esp,0x10
10006862:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10006869:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10006870:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006872: R_386_32	installKey
10006877:	83 ec 04             	sub    esp,0x4
1000687a:	68 80 00 00 00       	push   0x80
1000687f:	6a 00                	push   0x0
10006881:	8d 85 84 fa ff ff    	lea    eax,[ebp-0x57c]
10006887:	50                   	push   eax
10006888:	e8 fc ff ff ff       	call   10006889 <begin(void*)+0x17da>	10006889: R_386_PC32	memset
1000688d:	83 c4 10             	add    esp,0x10
10006890:	83 ec 04             	sub    esp,0x4
10006893:	68 80 00 00 00       	push   0x80
10006898:	6a 00                	push   0x0
1000689a:	8d 85 04 fb ff ff    	lea    eax,[ebp-0x4fc]
100068a0:	50                   	push   eax
100068a1:	e8 fc ff ff ff       	call   100068a2 <begin(void*)+0x17f3>	100068a2: R_386_PC32	memset
100068a6:	83 c4 10             	add    esp,0x10
100068a9:	83 ec 0c             	sub    esp,0xc
100068ac:	68 20 ad 00 10       	push   0x1000ad20	100068ad: R_386_32	.text
100068b1:	e8 fc ff ff ff       	call   100068b2 <begin(void*)+0x1803>	100068b2: R_386_PC32	CmOpen(char const*)
100068b6:	83 c4 10             	add    esp,0x10
100068b9:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
100068bc:	83 ec 08             	sub    esp,0x8
100068bf:	68 9f ad 00 10       	push   0x1000ad9f	100068c0: R_386_32	.text
100068c4:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
100068c7:	e8 fc ff ff ff       	call   100068c8 <begin(void*)+0x1819>	100068c8: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100068cc:	83 c4 10             	add    esp,0x10
100068cf:	83 ec 08             	sub    esp,0x8
100068d2:	50                   	push   eax
100068d3:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
100068d6:	e8 fc ff ff ff       	call   100068d7 <begin(void*)+0x1828>	100068d7: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100068db:	83 c4 10             	add    esp,0x10
100068de:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100068e1:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
100068e5:	0f 84 88 01 00 00    	je     10006a73 <begin(void*)+0x19c4>
100068eb:	83 ec 04             	sub    esp,0x4
100068ee:	6a 50                	push   0x50
100068f0:	6a 00                	push   0x0
100068f2:	8d 85 e4 f9 ff ff    	lea    eax,[ebp-0x61c]
100068f8:	50                   	push   eax
100068f9:	e8 fc ff ff ff       	call   100068fa <begin(void*)+0x184b>	100068fa: R_386_PC32	memset
100068fe:	83 c4 10             	add    esp,0x10
10006901:	83 ec 04             	sub    esp,0x4
10006904:	8d 85 e4 f9 ff ff    	lea    eax,[ebp-0x61c]
1000690a:	50                   	push   eax
1000690b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000690e:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10006911:	e8 fc ff ff ff       	call   10006912 <begin(void*)+0x1863>	10006912: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
10006916:	83 c4 10             	add    esp,0x10
10006919:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
1000691c:	83 7d 98 4e          	cmp    DWORD PTR [ebp-0x68],0x4e
10006920:	0f 85 34 01 00 00    	jne    10006a5a <begin(void*)+0x19ab>
10006926:	83 ec 0c             	sub    esp,0xc
10006929:	6a 50                	push   0x50
1000692b:	e8 fc ff ff ff       	call   1000692c <begin(void*)+0x187d>	1000692c: R_386_PC32	malloc
10006930:	83 c4 10             	add    esp,0x10
10006933:	89 c2                	mov    edx,eax
10006935:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006938:	89 94 85 04 fb ff ff 	mov    DWORD PTR [ebp+eax*4-0x4fc],edx
1000693f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006942:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
10006949:	83 ec 08             	sub    esp,0x8
1000694c:	8d 95 e4 f9 ff ff    	lea    edx,[ebp-0x61c]
10006952:	52                   	push   edx
10006953:	50                   	push   eax
10006954:	e8 fc ff ff ff       	call   10006955 <begin(void*)+0x18a6>	10006955: R_386_PC32	strcpy
10006959:	83 c4 10             	add    esp,0x10
1000695c:	83 ec 08             	sub    esp,0x8
1000695f:	68 5e ad 00 10       	push   0x1000ad5e	10006960: R_386_32	.text
10006964:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000696a:	50                   	push   eax
1000696b:	e8 fc ff ff ff       	call   1000696c <begin(void*)+0x18bd>	1000696c: R_386_PC32	strcpy
10006970:	83 c4 10             	add    esp,0x10
10006973:	83 ec 08             	sub    esp,0x8
10006976:	8d 85 e4 f9 ff ff    	lea    eax,[ebp-0x61c]
1000697c:	50                   	push   eax
1000697d:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006983:	50                   	push   eax
10006984:	e8 fc ff ff ff       	call   10006985 <begin(void*)+0x18d6>	10006985: R_386_PC32	strcat
10006989:	83 c4 10             	add    esp,0x10
1000698c:	83 ec 08             	sub    esp,0x8
1000698f:	68 a7 b0 00 10       	push   0x1000b0a7	10006990: R_386_32	.text
10006994:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000699a:	50                   	push   eax
1000699b:	e8 fc ff ff ff       	call   1000699c <begin(void*)+0x18ed>	1000699c: R_386_PC32	strcat
100069a0:	83 c4 10             	add    esp,0x10
100069a3:	83 ec 08             	sub    esp,0x8
100069a6:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100069ac:	50                   	push   eax
100069ad:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
100069b0:	e8 fc ff ff ff       	call   100069b1 <begin(void*)+0x1902>	100069b1: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100069b5:	83 c4 10             	add    esp,0x10
100069b8:	83 ec 04             	sub    esp,0x4
100069bb:	8d 95 e4 f9 ff ff    	lea    edx,[ebp-0x61c]
100069c1:	52                   	push   edx
100069c2:	50                   	push   eax
100069c3:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
100069c6:	e8 fc ff ff ff       	call   100069c7 <begin(void*)+0x1918>	100069c7: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
100069cb:	83 c4 10             	add    esp,0x10
100069ce:	83 ec 0c             	sub    esp,0xc
100069d1:	6a 50                	push   0x50
100069d3:	e8 fc ff ff ff       	call   100069d4 <begin(void*)+0x1925>	100069d4: R_386_PC32	malloc
100069d8:	83 c4 10             	add    esp,0x10
100069db:	89 c2                	mov    edx,eax
100069dd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100069e0:	89 94 85 84 fa ff ff 	mov    DWORD PTR [ebp+eax*4-0x57c],edx
100069e7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100069ea:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
100069f1:	83 ec 08             	sub    esp,0x8
100069f4:	68 a3 a7 00 10       	push   0x1000a7a3	100069f5: R_386_32	.text
100069f9:	50                   	push   eax
100069fa:	e8 fc ff ff ff       	call   100069fb <begin(void*)+0x194c>	100069fb: R_386_PC32	strcpy
100069ff:	83 c4 10             	add    esp,0x10
10006a02:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006a05:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
10006a0c:	83 ec 08             	sub    esp,0x8
10006a0f:	8d 95 e4 f9 ff ff    	lea    edx,[ebp-0x61c]
10006a15:	52                   	push   edx
10006a16:	50                   	push   eax
10006a17:	e8 fc ff ff ff       	call   10006a18 <begin(void*)+0x1969>	10006a18: R_386_PC32	strcat
10006a1c:	83 c4 10             	add    esp,0x10
10006a1f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006a22:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
10006a29:	83 ec 0c             	sub    esp,0xc
10006a2c:	50                   	push   eax
10006a2d:	e8 fc ff ff ff       	call   10006a2e <begin(void*)+0x197f>	10006a2e: R_386_PC32	strlen
10006a32:	83 c4 10             	add    esp,0x10
10006a35:	83 f8 31             	cmp    eax,0x31
10006a38:	77 1d                	ja     10006a57 <begin(void*)+0x19a8>
10006a3a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006a3d:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
10006a44:	83 ec 08             	sub    esp,0x8
10006a47:	68 a3 a7 00 10       	push   0x1000a7a3	10006a48: R_386_32	.text
10006a4c:	50                   	push   eax
10006a4d:	e8 fc ff ff ff       	call   10006a4e <begin(void*)+0x199f>	10006a4e: R_386_PC32	strcat
10006a52:	83 c4 10             	add    esp,0x10
10006a55:	eb c8                	jmp    10006a1f <begin(void*)+0x1970>
10006a57:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10006a5a:	83 ec 08             	sub    esp,0x8
10006a5d:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10006a60:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10006a63:	e8 fc ff ff ff       	call   10006a64 <begin(void*)+0x19b5>	10006a64: R_386_PC32	CmGetNext(Reghive_Tag*, int)
10006a68:	83 c4 10             	add    esp,0x10
10006a6b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10006a6e:	e9 6e fe ff ff       	jmp    100068e1 <begin(void*)+0x1832>
10006a73:	83 ec 0c             	sub    esp,0xc
10006a76:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10006a79:	e8 fc ff ff ff       	call   10006a7a <begin(void*)+0x19cb>	10006a7a: R_386_PC32	CmClose(Reghive_Tag*)
10006a7e:	83 c4 10             	add    esp,0x10
10006a81:	83 ec 0c             	sub    esp,0xc
10006a84:	6a 50                	push   0x50
10006a86:	e8 fc ff ff ff       	call   10006a87 <begin(void*)+0x19d8>	10006a87: R_386_PC32	malloc
10006a8b:	83 c4 10             	add    esp,0x10
10006a8e:	89 c2                	mov    edx,eax
10006a90:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006a93:	89 94 85 84 fa ff ff 	mov    DWORD PTR [ebp+eax*4-0x57c],edx
10006a9a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006a9d:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
10006aa4:	83 ec 08             	sub    esp,0x8
10006aa7:	68 2c b2 00 10       	push   0x1000b22c	10006aa8: R_386_32	.text
10006aac:	50                   	push   eax
10006aad:	e8 fc ff ff ff       	call   10006aae <begin(void*)+0x19ff>	10006aae: R_386_PC32	strcpy
10006ab2:	83 c4 10             	add    esp,0x10
10006ab5:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10006ab8:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10006aba: R_386_32	guiKeyboardHandler
	10006abe: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
10006ac2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006ac4: R_386_32	installKey
10006ac9:	e8 fc ff ff ff       	call   10006aca <begin(void*)+0x1a1b>	10006aca: R_386_PC32	drawBootScreen()
10006ace:	83 ec 0c             	sub    esp,0xc
10006ad1:	68 5f b2 00 10       	push   0x1000b25f	10006ad2: R_386_32	.text
10006ad6:	6a 10                	push   0x10
10006ad8:	6a 39                	push   0x39
10006ada:	6a 03                	push   0x3
10006adc:	6a 0c                	push   0xc
10006ade:	e8 fc ff ff ff       	call   10006adf <begin(void*)+0x1a30>	10006adf: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10006ae3:	83 c4 20             	add    esp,0x20
10006ae6:	a1 00 00 00 00       	mov    eax,ds:0x0	10006ae7: R_386_32	term
10006aeb:	83 ec 04             	sub    esp,0x4
10006aee:	6a 06                	push   0x6
10006af0:	6a 0e                	push   0xe
10006af2:	50                   	push   eax
10006af3:	e8 fc ff ff ff       	call   10006af4 <begin(void*)+0x1a45>	10006af4: R_386_PC32	VgaText::setCursor(int, int)
10006af8:	83 c4 10             	add    esp,0x10
10006afb:	a1 00 00 00 00       	mov    eax,ds:0x0	10006afc: R_386_32	term
10006b00:	6a 0f                	push   0xf
10006b02:	6a 00                	push   0x0
10006b04:	68 68 b2 00 10       	push   0x1000b268	10006b05: R_386_32	.text
10006b09:	50                   	push   eax
10006b0a:	e8 fc ff ff ff       	call   10006b0b <begin(void*)+0x1a5c>	10006b0b: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006b0f:	83 c4 10             	add    esp,0x10
10006b12:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10006b16:	75 0c                	jne    10006b24 <begin(void*)+0x1a75>
10006b18:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10006b1f:	e9 23 01 00 00       	jmp    10006c47 <begin(void*)+0x1b98>
10006b24:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10006b2b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006b2e:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10006b31:	7d 63                	jge    10006b96 <begin(void*)+0x1ae7>
10006b33:	a1 00 00 00 00       	mov    eax,ds:0x0	10006b34: R_386_32	term
10006b38:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10006b3b:	83 c2 08             	add    edx,0x8
10006b3e:	83 ec 04             	sub    esp,0x4
10006b41:	52                   	push   edx
10006b42:	6a 0f                	push   0xf
10006b44:	50                   	push   eax
10006b45:	e8 fc ff ff ff       	call   10006b46 <begin(void*)+0x1a97>	10006b46: R_386_PC32	VgaText::setCursor(int, int)
10006b4a:	83 c4 10             	add    esp,0x10
10006b4d:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10006b4f: R_386_32	term
10006b53:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006b56:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006b59:	75 07                	jne    10006b62 <begin(void*)+0x1ab3>
10006b5b:	b9 00 00 00 00       	mov    ecx,0x0
10006b60:	eb 05                	jmp    10006b67 <begin(void*)+0x1ab8>
10006b62:	b9 0f 00 00 00       	mov    ecx,0xf
10006b67:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006b6a:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006b6d:	75 07                	jne    10006b76 <begin(void*)+0x1ac7>
10006b6f:	ba 0f 00 00 00       	mov    edx,0xf
10006b74:	eb 05                	jmp    10006b7b <begin(void*)+0x1acc>
10006b76:	ba 00 00 00 00       	mov    edx,0x0
10006b7b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006b7e:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
10006b85:	51                   	push   ecx
10006b86:	52                   	push   edx
10006b87:	50                   	push   eax
10006b88:	53                   	push   ebx
10006b89:	e8 fc ff ff ff       	call   10006b8a <begin(void*)+0x1adb>	10006b8a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006b8e:	83 c4 10             	add    esp,0x10
10006b91:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10006b94:	eb 95                	jmp    10006b2b <begin(void*)+0x1a7c>
10006b96:	a0 00 00 00 00       	mov    al,ds:0x0	10006b97: R_386_32	installKey
10006b9b:	84 c0                	test   al,al
10006b9d:	0f 94 c0             	sete   al
10006ba0:	84 c0                	test   al,al
10006ba2:	74 02                	je     10006ba6 <begin(void*)+0x1af7>
10006ba4:	eb f0                	jmp    10006b96 <begin(void*)+0x1ae7>
10006ba6:	a1 00 00 00 00       	mov    eax,ds:0x0	10006ba7: R_386_32	term
10006bab:	05 82 00 00 00       	add    eax,0x82
10006bb0:	83 ec 04             	sub    esp,0x4
10006bb3:	6a 04                	push   0x4
10006bb5:	6a 00                	push   0x0
10006bb7:	50                   	push   eax
10006bb8:	e8 fc ff ff ff       	call   10006bb9 <begin(void*)+0x1b0a>	10006bb9: R_386_PC32	memset
10006bbd:	83 c4 10             	add    esp,0x10
10006bc0:	a1 00 00 00 00       	mov    eax,ds:0x0	10006bc1: R_386_32	term
10006bc5:	05 02 01 00 00       	add    eax,0x102
10006bca:	83 ec 04             	sub    esp,0x4
10006bcd:	6a 04                	push   0x4
10006bcf:	6a 00                	push   0x0
10006bd1:	50                   	push   eax
10006bd2:	e8 fc ff ff ff       	call   10006bd3 <begin(void*)+0x1b24>	10006bd3: R_386_PC32	memset
10006bd7:	83 c4 10             	add    esp,0x10
10006bda:	a0 00 00 00 00       	mov    al,ds:0x0	10006bdb: R_386_32	installKey
10006bdf:	3c 01                	cmp    al,0x1
10006be1:	0f 94 c0             	sete   al
10006be4:	84 c0                	test   al,al
10006be6:	74 12                	je     10006bfa <begin(void*)+0x1b4b>
10006be8:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10006beb:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10006bef:	79 39                	jns    10006c2a <begin(void*)+0x1b7b>
10006bf1:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10006bf8:	eb 30                	jmp    10006c2a <begin(void*)+0x1b7b>
10006bfa:	a0 00 00 00 00       	mov    al,ds:0x0	10006bfb: R_386_32	installKey
10006bff:	3c 02                	cmp    al,0x2
10006c01:	0f 94 c0             	sete   al
10006c04:	84 c0                	test   al,al
10006c06:	74 14                	je     10006c1c <begin(void*)+0x1b6d>
10006c08:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10006c0b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006c0e:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006c11:	7f 17                	jg     10006c2a <begin(void*)+0x1b7b>
10006c13:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006c16:	48                   	dec    eax
10006c17:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10006c1a:	eb 0e                	jmp    10006c2a <begin(void*)+0x1b7b>
10006c1c:	a0 00 00 00 00       	mov    al,ds:0x0	10006c1d: R_386_32	installKey
10006c21:	3c 0a                	cmp    al,0xa
10006c23:	0f 94 c0             	sete   al
10006c26:	84 c0                	test   al,al
10006c28:	75 1c                	jne    10006c46 <begin(void*)+0x1b97>
10006c2a:	83 ec 0c             	sub    esp,0xc
10006c2d:	68 f4 01 00 00       	push   0x1f4
10006c32:	e8 fc ff ff ff       	call   10006c33 <begin(void*)+0x1b84>	10006c33: R_386_PC32	milliTenthSleep(unsigned int)
10006c37:	83 c4 10             	add    esp,0x10
10006c3a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006c3c: R_386_32	installKey
10006c41:	e9 cc fe ff ff       	jmp    10006b12 <begin(void*)+0x1a63>
10006c46:	90                   	nop
10006c47:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006c4a:	48                   	dec    eax
10006c4b:	39 45 dc             	cmp    DWORD PTR [ebp-0x24],eax
10006c4e:	75 57                	jne    10006ca7 <begin(void*)+0x1bf8>
10006c50:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006c52: R_386_32	installKey
10006c57:	a0 00 00 00 00       	mov    al,ds:0x0	10006c58: R_386_32	installKey
10006c5c:	84 c0                	test   al,al
10006c5e:	0f 94 c0             	sete   al
10006c61:	84 c0                	test   al,al
10006c63:	74 02                	je     10006c67 <begin(void*)+0x1bb8>
10006c65:	eb f0                	jmp    10006c57 <begin(void*)+0x1ba8>
10006c67:	a1 00 00 00 00       	mov    eax,ds:0x0	10006c68: R_386_32	term
10006c6c:	05 82 00 00 00       	add    eax,0x82
10006c71:	83 ec 04             	sub    esp,0x4
10006c74:	6a 04                	push   0x4
10006c76:	6a 00                	push   0x0
10006c78:	50                   	push   eax
10006c79:	e8 fc ff ff ff       	call   10006c7a <begin(void*)+0x1bcb>	10006c7a: R_386_PC32	memset
10006c7e:	83 c4 10             	add    esp,0x10
10006c81:	a1 00 00 00 00       	mov    eax,ds:0x0	10006c82: R_386_32	term
10006c86:	05 02 01 00 00       	add    eax,0x102
10006c8b:	83 ec 04             	sub    esp,0x4
10006c8e:	6a 04                	push   0x4
10006c90:	6a 00                	push   0x0
10006c92:	50                   	push   eax
10006c93:	e8 fc ff ff ff       	call   10006c94 <begin(void*)+0x1be5>	10006c94: R_386_PC32	memset
10006c98:	83 c4 10             	add    esp,0x10
10006c9b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006c9d: R_386_32	installKey
10006ca2:	e9 bb fb ff ff       	jmp    10006862 <begin(void*)+0x17b3>
10006ca7:	83 ec 08             	sub    esp,0x8
10006caa:	68 5e ad 00 10       	push   0x1000ad5e	10006cab: R_386_32	.text
10006caf:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006cb5:	50                   	push   eax
10006cb6:	e8 fc ff ff ff       	call   10006cb7 <begin(void*)+0x1c08>	10006cb7: R_386_PC32	strcpy
10006cbb:	83 c4 10             	add    esp,0x10
10006cbe:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006cc1:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
10006cc8:	83 ec 08             	sub    esp,0x8
10006ccb:	50                   	push   eax
10006ccc:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006cd2:	50                   	push   eax
10006cd3:	e8 fc ff ff ff       	call   10006cd4 <begin(void*)+0x1c25>	10006cd4: R_386_PC32	strcat
10006cd8:	83 c4 10             	add    esp,0x10
10006cdb:	83 ec 08             	sub    esp,0x8
10006cde:	68 97 b0 00 10       	push   0x1000b097	10006cdf: R_386_32	.text
10006ce3:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006ce9:	50                   	push   eax
10006cea:	e8 fc ff ff ff       	call   10006ceb <begin(void*)+0x1c3c>	10006ceb: R_386_PC32	strcat
10006cef:	83 c4 10             	add    esp,0x10
10006cf2:	83 ec 0c             	sub    esp,0xc
10006cf5:	68 20 ad 00 10       	push   0x1000ad20	10006cf6: R_386_32	.text
10006cfa:	e8 fc ff ff ff       	call   10006cfb <begin(void*)+0x1c4c>	10006cfb: R_386_PC32	CmOpen(char const*)
10006cff:	83 c4 10             	add    esp,0x10
10006d02:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10006d05:	83 ec 08             	sub    esp,0x8
10006d08:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006d0e:	50                   	push   eax
10006d0f:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10006d12:	e8 fc ff ff ff       	call   10006d13 <begin(void*)+0x1c64>	10006d13: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006d17:	83 c4 10             	add    esp,0x10
10006d1a:	83 ec 04             	sub    esp,0x4
10006d1d:	8d 95 06 fc ff ff    	lea    edx,[ebp-0x3fa]
10006d23:	52                   	push   edx
10006d24:	50                   	push   eax
10006d25:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10006d28:	e8 fc ff ff ff       	call   10006d29 <begin(void*)+0x1c7a>	10006d29: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006d2d:	83 c4 10             	add    esp,0x10
10006d30:	83 ec 08             	sub    esp,0x8
10006d33:	68 5e ad 00 10       	push   0x1000ad5e	10006d34: R_386_32	.text
10006d38:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006d3e:	50                   	push   eax
10006d3f:	e8 fc ff ff ff       	call   10006d40 <begin(void*)+0x1c91>	10006d40: R_386_PC32	strcpy
10006d44:	83 c4 10             	add    esp,0x10
10006d47:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006d4a:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
10006d51:	83 ec 08             	sub    esp,0x8
10006d54:	50                   	push   eax
10006d55:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006d5b:	50                   	push   eax
10006d5c:	e8 fc ff ff ff       	call   10006d5d <begin(void*)+0x1cae>	10006d5d: R_386_PC32	strcat
10006d61:	83 c4 10             	add    esp,0x10
10006d64:	83 ec 08             	sub    esp,0x8
10006d67:	68 a1 b0 00 10       	push   0x1000b0a1	10006d68: R_386_32	.text
10006d6c:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006d72:	50                   	push   eax
10006d73:	e8 fc ff ff ff       	call   10006d74 <begin(void*)+0x1cc5>	10006d74: R_386_PC32	strcat
10006d78:	83 c4 10             	add    esp,0x10
10006d7b:	83 ec 08             	sub    esp,0x8
10006d7e:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006d84:	50                   	push   eax
10006d85:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10006d88:	e8 fc ff ff ff       	call   10006d89 <begin(void*)+0x1cda>	10006d89: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006d8d:	83 c4 10             	add    esp,0x10
10006d90:	83 ec 04             	sub    esp,0x4
10006d93:	8d 95 34 fa ff ff    	lea    edx,[ebp-0x5cc]
10006d99:	52                   	push   edx
10006d9a:	50                   	push   eax
10006d9b:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10006d9e:	e8 fc ff ff ff       	call   10006d9f <begin(void*)+0x1cf0>	10006d9f: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006da3:	83 c4 10             	add    esp,0x10
10006da6:	83 ec 0c             	sub    esp,0xc
10006da9:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10006dac:	e8 fc ff ff ff       	call   10006dad <begin(void*)+0x1cfe>	10006dad: R_386_PC32	CmClose(Reghive_Tag*)
10006db1:	83 c4 10             	add    esp,0x10
10006db4:	83 ec 04             	sub    esp,0x4
10006db7:	68 80 00 00 00       	push   0x80
10006dbc:	6a 00                	push   0x0
10006dbe:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006dc4:	50                   	push   eax
10006dc5:	e8 fc ff ff ff       	call   10006dc6 <begin(void*)+0x1d17>	10006dc6: R_386_PC32	memset
10006dca:	83 c4 10             	add    esp,0x10
10006dcd:	e8 fc ff ff ff       	call   10006dce <begin(void*)+0x1d1f>	10006dce: R_386_PC32	drawBootScreen()
10006dd2:	83 ec 08             	sub    esp,0x8
10006dd5:	6a 01                	push   0x1
10006dd7:	68 5f b2 00 10       	push   0x1000b25f	10006dd8: R_386_32	.text
10006ddc:	6a 10                	push   0x10
10006dde:	6a 39                	push   0x39
10006de0:	6a 03                	push   0x3
10006de2:	6a 0c                	push   0xc
10006de4:	e8 fc ff ff ff       	call   10006de5 <begin(void*)+0x1d36>	10006de5: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10006de9:	83 c4 20             	add    esp,0x20
10006dec:	a1 00 00 00 00       	mov    eax,ds:0x0	10006ded: R_386_32	term
10006df1:	83 ec 04             	sub    esp,0x4
10006df4:	6a 06                	push   0x6
10006df6:	6a 0e                	push   0xe
10006df8:	50                   	push   eax
10006df9:	e8 fc ff ff ff       	call   10006dfa <begin(void*)+0x1d4b>	10006dfa: R_386_PC32	VgaText::setCursor(int, int)
10006dfe:	83 c4 10             	add    esp,0x10
10006e01:	a1 00 00 00 00       	mov    eax,ds:0x0	10006e02: R_386_32	term
10006e06:	6a 07                	push   0x7
10006e08:	6a 00                	push   0x0
10006e0a:	68 68 b2 00 10       	push   0x1000b268	10006e0b: R_386_32	.text
10006e0f:	50                   	push   eax
10006e10:	e8 fc ff ff ff       	call   10006e11 <begin(void*)+0x1d62>	10006e11: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006e15:	83 c4 10             	add    esp,0x10
10006e18:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10006e1c:	7e 72                	jle    10006e90 <begin(void*)+0x1de1>
10006e1e:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10006e25:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006e28:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10006e2b:	7d 63                	jge    10006e90 <begin(void*)+0x1de1>
10006e2d:	a1 00 00 00 00       	mov    eax,ds:0x0	10006e2e: R_386_32	term
10006e32:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
10006e35:	83 c2 08             	add    edx,0x8
10006e38:	83 ec 04             	sub    esp,0x4
10006e3b:	52                   	push   edx
10006e3c:	6a 0f                	push   0xf
10006e3e:	50                   	push   eax
10006e3f:	e8 fc ff ff ff       	call   10006e40 <begin(void*)+0x1d91>	10006e40: R_386_PC32	VgaText::setCursor(int, int)
10006e44:	83 c4 10             	add    esp,0x10
10006e47:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10006e49: R_386_32	term
10006e4d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006e50:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006e53:	75 07                	jne    10006e5c <begin(void*)+0x1dad>
10006e55:	b9 00 00 00 00       	mov    ecx,0x0
10006e5a:	eb 05                	jmp    10006e61 <begin(void*)+0x1db2>
10006e5c:	b9 07 00 00 00       	mov    ecx,0x7
10006e61:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006e64:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006e67:	75 07                	jne    10006e70 <begin(void*)+0x1dc1>
10006e69:	ba 07 00 00 00       	mov    edx,0x7
10006e6e:	eb 05                	jmp    10006e75 <begin(void*)+0x1dc6>
10006e70:	ba 00 00 00 00       	mov    edx,0x0
10006e75:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006e78:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
10006e7f:	51                   	push   ecx
10006e80:	52                   	push   edx
10006e81:	50                   	push   eax
10006e82:	53                   	push   ebx
10006e83:	e8 fc ff ff ff       	call   10006e84 <begin(void*)+0x1dd5>	10006e84: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006e88:	83 c4 10             	add    esp,0x10
10006e8b:	ff 45 d0             	inc    DWORD PTR [ebp-0x30]
10006e8e:	eb 95                	jmp    10006e25 <begin(void*)+0x1d76>
10006e90:	83 ec 0c             	sub    esp,0xc
10006e93:	68 5f b2 00 10       	push   0x1000b25f	10006e94: R_386_32	.text
10006e98:	6a 0b                	push   0xb
10006e9a:	6a 2d                	push   0x2d
10006e9c:	6a 0a                	push   0xa
10006e9e:	6a 1c                	push   0x1c
10006ea0:	e8 fc ff ff ff       	call   10006ea1 <begin(void*)+0x1df2>	10006ea1: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10006ea5:	83 c4 20             	add    esp,0x20
10006ea8:	c6 45 cf 01          	mov    BYTE PTR [ebp-0x31],0x1
10006eac:	83 ec 04             	sub    esp,0x4
10006eaf:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10006eb5:	50                   	push   eax
10006eb6:	8d 85 34 fa ff ff    	lea    eax,[ebp-0x5cc]
10006ebc:	50                   	push   eax
10006ebd:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006ec3:	50                   	push   eax
10006ec4:	e8 fc ff ff ff       	call   10006ec5 <begin(void*)+0x1e16>	10006ec5: R_386_PC32	bcrypt_hashpw
10006ec9:	83 c4 10             	add    esp,0x10
10006ecc:	83 ec 08             	sub    esp,0x8
10006ecf:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10006ed5:	50                   	push   eax
10006ed6:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
10006edc:	50                   	push   eax
10006edd:	e8 fc ff ff ff       	call   10006ede <begin(void*)+0x1e2f>	10006ede: R_386_PC32	strcmp
10006ee2:	83 c4 10             	add    esp,0x10
10006ee5:	85 c0                	test   eax,eax
10006ee7:	75 04                	jne    10006eed <begin(void*)+0x1e3e>
10006ee9:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
10006eed:	83 ec 04             	sub    esp,0x4
10006ef0:	68 80 00 00 00       	push   0x80
10006ef5:	6a 00                	push   0x0
10006ef7:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10006efd:	50                   	push   eax
10006efe:	e8 fc ff ff ff       	call   10006eff <begin(void*)+0x1e50>	10006eff: R_386_PC32	memset
10006f03:	83 c4 10             	add    esp,0x10
10006f06:	80 7d cf 00          	cmp    BYTE PTR [ebp-0x31],0x0
10006f0a:	0f 84 9c 02 00 00    	je     100071ac <begin(void*)+0x20fd>
10006f10:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f11: R_386_32	term
10006f15:	83 ec 04             	sub    esp,0x4
10006f18:	6a 0d                	push   0xd
10006f1a:	6a 1e                	push   0x1e
10006f1c:	50                   	push   eax
10006f1d:	e8 fc ff ff ff       	call   10006f1e <begin(void*)+0x1e6f>	10006f1e: R_386_PC32	VgaText::setCursor(int, int)
10006f22:	83 c4 10             	add    esp,0x10
10006f25:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f26: R_386_32	term
10006f2a:	83 ec 08             	sub    esp,0x8
10006f2d:	68 98 b2 00 10       	push   0x1000b298	10006f2e: R_386_32	.text
10006f32:	50                   	push   eax
10006f33:	e8 fc ff ff ff       	call   10006f34 <begin(void*)+0x1e85>	10006f34: R_386_PC32	VgaText::puts(char const*)
10006f38:	83 c4 10             	add    esp,0x10
10006f3b:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f3c: R_386_32	term
10006f40:	83 ec 04             	sub    esp,0x4
10006f43:	6a 0e                	push   0xe
10006f45:	6a 1e                	push   0x1e
10006f47:	50                   	push   eax
10006f48:	e8 fc ff ff ff       	call   10006f49 <begin(void*)+0x1e9a>	10006f49: R_386_PC32	VgaText::setCursor(int, int)
10006f4d:	83 c4 10             	add    esp,0x10
10006f50:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f51: R_386_32	term
10006f55:	83 ec 08             	sub    esp,0x8
10006f58:	68 c2 b2 00 10       	push   0x1000b2c2	10006f59: R_386_32	.text
10006f5d:	50                   	push   eax
10006f5e:	e8 fc ff ff ff       	call   10006f5f <begin(void*)+0x1eb0>	10006f5f: R_386_PC32	VgaText::puts(char const*)
10006f63:	83 c4 10             	add    esp,0x10
10006f66:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f67: R_386_32	term
10006f6b:	83 ec 04             	sub    esp,0x4
10006f6e:	6a 10                	push   0x10
10006f70:	6a 1e                	push   0x1e
10006f72:	50                   	push   eax
10006f73:	e8 fc ff ff ff       	call   10006f74 <begin(void*)+0x1ec5>	10006f74: R_386_PC32	VgaText::setCursor(int, int)
10006f78:	83 c4 10             	add    esp,0x10
10006f7b:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f7c: R_386_32	term
10006f80:	6a 07                	push   0x7
10006f82:	6a 00                	push   0x0
10006f84:	68 78 a8 00 10       	push   0x1000a878	10006f85: R_386_32	.text
10006f89:	50                   	push   eax
10006f8a:	e8 fc ff ff ff       	call   10006f8b <begin(void*)+0x1edc>	10006f8b: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006f8f:	83 c4 10             	add    esp,0x10
10006f92:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f93: R_386_32	term
10006f97:	83 ec 08             	sub    esp,0x8
10006f9a:	6a 1e                	push   0x1e
10006f9c:	50                   	push   eax
10006f9d:	e8 fc ff ff ff       	call   10006f9e <begin(void*)+0x1eef>	10006f9e: R_386_PC32	VgaText::setCursorX(int)
10006fa2:	83 c4 10             	add    esp,0x10
10006fa5:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
10006fac:	83 ec 0c             	sub    esp,0xc
10006faf:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006fb5:	50                   	push   eax
10006fb6:	e8 fc ff ff ff       	call   10006fb7 <begin(void*)+0x1f08>	10006fb7: R_386_PC32	strlen
10006fbb:	83 c4 10             	add    esp,0x10
10006fbe:	89 c2                	mov    edx,eax
10006fc0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10006fc3:	39 c2                	cmp    edx,eax
10006fc5:	76 1c                	jbe    10006fe3 <begin(void*)+0x1f34>
10006fc7:	a1 00 00 00 00       	mov    eax,ds:0x0	10006fc8: R_386_32	term
10006fcc:	6a 07                	push   0x7
10006fce:	6a 00                	push   0x0
10006fd0:	68 a4 a8 00 10       	push   0x1000a8a4	10006fd1: R_386_32	.text
10006fd5:	50                   	push   eax
10006fd6:	e8 fc ff ff ff       	call   10006fd7 <begin(void*)+0x1f28>	10006fd7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006fdb:	83 c4 10             	add    esp,0x10
10006fde:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
10006fe1:	eb c9                	jmp    10006fac <begin(void*)+0x1efd>
10006fe3:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10006fe5: R_386_32	term
10006fe9:	83 ec 0c             	sub    esp,0xc
10006fec:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006ff2:	50                   	push   eax
10006ff3:	e8 fc ff ff ff       	call   10006ff4 <begin(void*)+0x1f45>	10006ff4: R_386_PC32	strlen
10006ff8:	83 c4 10             	add    esp,0x10
10006ffb:	83 c0 1e             	add    eax,0x1e
10006ffe:	83 ec 04             	sub    esp,0x4
10007001:	6a 10                	push   0x10
10007003:	50                   	push   eax
10007004:	53                   	push   ebx
10007005:	e8 fc ff ff ff       	call   10007006 <begin(void*)+0x1f57>	10007006: R_386_PC32	VgaText::setCursor(int, int)
1000700a:	83 c4 10             	add    esp,0x10
1000700d:	a0 00 00 00 00       	mov    al,ds:0x0	1000700e: R_386_32	installKey
10007012:	84 c0                	test   al,al
10007014:	0f 94 c0             	sete   al
10007017:	84 c0                	test   al,al
10007019:	74 02                	je     1000701d <begin(void*)+0x1f6e>
1000701b:	eb f0                	jmp    1000700d <begin(void*)+0x1f5e>
1000701d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000701e: R_386_32	term
10007022:	05 82 00 00 00       	add    eax,0x82
10007027:	83 ec 04             	sub    esp,0x4
1000702a:	6a 10                	push   0x10
1000702c:	6a 00                	push   0x0
1000702e:	50                   	push   eax
1000702f:	e8 fc ff ff ff       	call   10007030 <begin(void*)+0x1f81>	10007030: R_386_PC32	memset
10007034:	83 c4 10             	add    esp,0x10
10007037:	a1 00 00 00 00       	mov    eax,ds:0x0	10007038: R_386_32	term
1000703c:	05 02 01 00 00       	add    eax,0x102
10007041:	83 ec 04             	sub    esp,0x4
10007044:	6a 10                	push   0x10
10007046:	6a 00                	push   0x0
10007048:	50                   	push   eax
10007049:	e8 fc ff ff ff       	call   1000704a <begin(void*)+0x1f9b>	1000704a: R_386_PC32	memset
1000704e:	83 c4 10             	add    esp,0x10
10007051:	a0 00 00 00 00       	mov    al,ds:0x0	10007052: R_386_32	installKey
10007056:	3c 0a                	cmp    al,0xa
10007058:	0f 94 c0             	sete   al
1000705b:	84 c0                	test   al,al
1000705d:	0f 84 88 00 00 00    	je     100070eb <begin(void*)+0x203c>
10007063:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007065: R_386_32	installKey
1000706a:	83 ec 04             	sub    esp,0x4
1000706d:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10007073:	50                   	push   eax
10007074:	8d 85 34 fa ff ff    	lea    eax,[ebp-0x5cc]
1000707a:	50                   	push   eax
1000707b:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10007081:	50                   	push   eax
10007082:	e8 fc ff ff ff       	call   10007083 <begin(void*)+0x1fd4>	10007083: R_386_PC32	bcrypt_hashpw
10007087:	83 c4 10             	add    esp,0x10
1000708a:	8d 85 34 fa ff ff    	lea    eax,[ebp-0x5cc]
10007090:	50                   	push   eax
10007091:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10007097:	50                   	push   eax
10007098:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
1000709e:	50                   	push   eax
1000709f:	68 dc b2 00 10       	push   0x1000b2dc	100070a0: R_386_32	.text
100070a4:	e8 fc ff ff ff       	call   100070a5 <begin(void*)+0x1ff6>	100070a5: R_386_PC32	Dbg::kprintf(char const*, ...)
100070a9:	83 c4 10             	add    esp,0x10
100070ac:	83 ec 08             	sub    esp,0x8
100070af:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100070b5:	50                   	push   eax
100070b6:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
100070bc:	50                   	push   eax
100070bd:	e8 fc ff ff ff       	call   100070be <begin(void*)+0x200f>	100070be: R_386_PC32	strcmp
100070c2:	83 c4 10             	add    esp,0x10
100070c5:	85 c0                	test   eax,eax
100070c7:	0f 84 de 00 00 00    	je     100071ab <begin(void*)+0x20fc>
100070cd:	83 ec 04             	sub    esp,0x4
100070d0:	68 80 00 00 00       	push   0x80
100070d5:	6a 00                	push   0x0
100070d7:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100070dd:	50                   	push   eax
100070de:	e8 fc ff ff ff       	call   100070df <begin(void*)+0x2030>	100070df: R_386_PC32	memset
100070e3:	83 c4 10             	add    esp,0x10
100070e6:	e9 b4 00 00 00       	jmp    1000719f <begin(void*)+0x20f0>
100070eb:	a0 00 00 00 00       	mov    al,ds:0x0	100070ec: R_386_32	installKey
100070f0:	3c 1f                	cmp    al,0x1f
100070f2:	7e 0d                	jle    10007101 <begin(void*)+0x2052>
100070f4:	a0 00 00 00 00       	mov    al,ds:0x0	100070f5: R_386_32	installKey
100070f9:	3c 7f                	cmp    al,0x7f
100070fb:	74 04                	je     10007101 <begin(void*)+0x2052>
100070fd:	b0 01                	mov    al,0x1
100070ff:	eb 02                	jmp    10007103 <begin(void*)+0x2054>
10007101:	b0 00                	mov    al,0x0
10007103:	84 c0                	test   al,al
10007105:	74 44                	je     1000714b <begin(void*)+0x209c>
10007107:	a0 00 00 00 00       	mov    al,ds:0x0	10007108: R_386_32	installKey
1000710c:	88 85 7a ff ff ff    	mov    BYTE PTR [ebp-0x86],al
10007112:	c6 85 7b ff ff ff 00 	mov    BYTE PTR [ebp-0x85],0x0
10007119:	83 ec 0c             	sub    esp,0xc
1000711c:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10007122:	50                   	push   eax
10007123:	e8 fc ff ff ff       	call   10007124 <begin(void*)+0x2075>	10007124: R_386_PC32	strlen
10007128:	83 c4 10             	add    esp,0x10
1000712b:	83 f8 22             	cmp    eax,0x22
1000712e:	77 6f                	ja     1000719f <begin(void*)+0x20f0>
10007130:	83 ec 08             	sub    esp,0x8
10007133:	8d 85 7a ff ff ff    	lea    eax,[ebp-0x86]
10007139:	50                   	push   eax
1000713a:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10007140:	50                   	push   eax
10007141:	e8 fc ff ff ff       	call   10007142 <begin(void*)+0x2093>	10007142: R_386_PC32	strcat
10007146:	83 c4 10             	add    esp,0x10
10007149:	eb 54                	jmp    1000719f <begin(void*)+0x20f0>
1000714b:	a0 00 00 00 00       	mov    al,ds:0x0	1000714c: R_386_32	installKey
10007150:	3c 08                	cmp    al,0x8
10007152:	0f 94 c0             	sete   al
10007155:	84 c0                	test   al,al
10007157:	74 33                	je     1000718c <begin(void*)+0x20dd>
10007159:	83 ec 0c             	sub    esp,0xc
1000715c:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10007162:	50                   	push   eax
10007163:	e8 fc ff ff ff       	call   10007164 <begin(void*)+0x20b5>	10007164: R_386_PC32	strlen
10007168:	83 c4 10             	add    esp,0x10
1000716b:	85 c0                	test   eax,eax
1000716d:	74 30                	je     1000719f <begin(void*)+0x20f0>
1000716f:	83 ec 0c             	sub    esp,0xc
10007172:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10007178:	50                   	push   eax
10007179:	e8 fc ff ff ff       	call   1000717a <begin(void*)+0x20cb>	1000717a: R_386_PC32	strlen
1000717e:	83 c4 10             	add    esp,0x10
10007181:	48                   	dec    eax
10007182:	c6 84 05 86 fb ff ff 00 	mov    BYTE PTR [ebp+eax*1-0x47a],0x0
1000718a:	eb 13                	jmp    1000719f <begin(void*)+0x20f0>
1000718c:	a0 00 00 00 00       	mov    al,ds:0x0	1000718d: R_386_32	installKey
10007191:	3c 1b                	cmp    al,0x1b
10007193:	0f 94 c0             	sete   al
10007196:	84 c0                	test   al,al
10007198:	74 05                	je     1000719f <begin(void*)+0x20f0>
1000719a:	e9 23 f9 ff ff       	jmp    10006ac2 <begin(void*)+0x1a13>
1000719f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100071a1: R_386_32	installKey
100071a6:	e9 5b fd ff ff       	jmp    10006f06 <begin(void*)+0x1e57>
100071ab:	90                   	nop
100071ac:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100071ae: R_386_32	guiKeyboardHandler
100071b6:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
100071bd:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071c0:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
100071c3:	7d 69                	jge    1000722e <begin(void*)+0x217f>
100071c5:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071c8:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
100071cf:	85 c0                	test   eax,eax
100071d1:	74 24                	je     100071f7 <begin(void*)+0x2148>
100071d3:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071d6:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
100071dd:	83 ec 0c             	sub    esp,0xc
100071e0:	50                   	push   eax
100071e1:	e8 fc ff ff ff       	call   100071e2 <begin(void*)+0x2133>	100071e2: R_386_PC32	free
100071e6:	83 c4 10             	add    esp,0x10
100071e9:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071ec:	c7 84 85 84 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x57c],0x0
100071f7:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071fa:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
10007201:	85 c0                	test   eax,eax
10007203:	74 24                	je     10007229 <begin(void*)+0x217a>
10007205:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007208:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
1000720f:	83 ec 0c             	sub    esp,0xc
10007212:	50                   	push   eax
10007213:	e8 fc ff ff ff       	call   10007214 <begin(void*)+0x2165>	10007214: R_386_PC32	free
10007218:	83 c4 10             	add    esp,0x10
1000721b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
1000721e:	c7 84 85 04 fb ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x4fc],0x0
10007229:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
1000722c:	eb 8f                	jmp    100071bd <begin(void*)+0x210e>
1000722e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007230: R_386_32	VgaText::hiddenOut
10007235:	83 ec 0c             	sub    esp,0xc
10007238:	68 24 07 00 00       	push   0x724
1000723d:	e8 fc ff ff ff       	call   1000723e <begin(void*)+0x218f>	1000723e: R_386_PC32	operator new(unsigned long)
10007242:	83 c4 10             	add    esp,0x10
10007245:	89 c3                	mov    ebx,eax
10007247:	6a 00                	push   0x0
10007249:	6a 00                	push   0x0
1000724b:	68 f6 ac 00 10       	push   0x1000acf6	1000724c: R_386_32	.text
10007250:	53                   	push   ebx
10007251:	e8 fc ff ff ff       	call   10007252 <begin(void*)+0x21a3>	10007252: R_386_PC32	Process::Process(char const*, Process*, char**)
10007256:	83 c4 10             	add    esp,0x10
10007259:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
1000725c:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
1000725f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
10007265:	83 ec 0c             	sub    esp,0xc
10007268:	50                   	push   eax
10007269:	e8 fc ff ff ff       	call   1000726a <begin(void*)+0x21bb>	1000726a: R_386_PC32	setActiveTerminal(VgaText*)
1000726e:	83 c4 10             	add    esp,0x10
10007271:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
10007278:	83 7d c0 18          	cmp    DWORD PTR [ebp-0x40],0x18
1000727c:	7f 2e                	jg     100072ac <begin(void*)+0x21fd>
1000727e:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [ebp-0x44],0x0
10007285:	83 7d bc 4f          	cmp    DWORD PTR [ebp-0x44],0x4f
10007289:	7f 1c                	jg     100072a7 <begin(void*)+0x21f8>
1000728b:	83 ec 0c             	sub    esp,0xc
1000728e:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10007291:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10007294:	6a 00                	push   0x0
10007296:	6a 07                	push   0x7
10007298:	6a 20                	push   0x20
1000729a:	e8 fc ff ff ff       	call   1000729b <begin(void*)+0x21ec>	1000729b: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
1000729f:	83 c4 20             	add    esp,0x20
100072a2:	ff 45 bc             	inc    DWORD PTR [ebp-0x44]
100072a5:	eb de                	jmp    10007285 <begin(void*)+0x21d6>
100072a7:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
100072aa:	eb cc                	jmp    10007278 <begin(void*)+0x21c9>
100072ac:	83 ec 0c             	sub    esp,0xc
100072af:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
100072b2:	e8 fc ff ff ff       	call   100072b3 <begin(void*)+0x2204>	100072b3: R_386_PC32	Process::createUserThread()
100072b7:	83 c4 10             	add    esp,0x10
100072ba:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
100072bd:	8b 55 84             	mov    edx,DWORD PTR [ebp-0x7c]
100072c0:	89 c1                	mov    ecx,eax
100072c2:	83 f1 01             	xor    ecx,0x1
100072c5:	89 8d d0 f9 ff ff    	mov    DWORD PTR [ebp-0x630],ecx
100072cb:	89 d0                	mov    eax,edx
100072cd:	80 f4 00             	xor    ah,0x0
100072d0:	89 85 d4 f9 ff ff    	mov    DWORD PTR [ebp-0x62c],eax
100072d6:	8b b5 d0 f9 ff ff    	mov    esi,DWORD PTR [ebp-0x630]
100072dc:	8b bd d4 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x62c]
100072e2:	89 f8                	mov    eax,edi
100072e4:	09 f0                	or     eax,esi
100072e6:	85 c0                	test   eax,eax
100072e8:	75 17                	jne    10007301 <begin(void*)+0x2252>
100072ea:	a1 00 00 00 00       	mov    eax,ds:0x0	100072eb: R_386_32	kernelProcess
100072ef:	6a 01                	push   0x1
100072f1:	6a 00                	push   0x0
100072f3:	68 00 00 00 00       	push   0x0	100072f4: R_386_32	startGUI(void*)
100072f8:	50                   	push   eax
100072f9:	e8 fc ff ff ff       	call   100072fa <begin(void*)+0x224b>	100072fa: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
100072fe:	83 c4 10             	add    esp,0x10
10007301:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10007304:	8b 55 84             	mov    edx,DWORD PTR [ebp-0x7c]
10007307:	89 c6                	mov    esi,eax
10007309:	83 f6 02             	xor    esi,0x2
1000730c:	89 b5 c8 f9 ff ff    	mov    DWORD PTR [ebp-0x638],esi
10007312:	89 d0                	mov    eax,edx
10007314:	80 f4 00             	xor    ah,0x0
10007317:	89 85 cc f9 ff ff    	mov    DWORD PTR [ebp-0x634],eax
1000731d:	8b b5 c8 f9 ff ff    	mov    esi,DWORD PTR [ebp-0x638]
10007323:	8b bd cc f9 ff ff    	mov    edi,DWORD PTR [ebp-0x634]
10007329:	89 f8                	mov    eax,edi
1000732b:	09 f0                	or     eax,esi
1000732d:	85 c0                	test   eax,eax
1000732f:	75 17                	jne    10007348 <begin(void*)+0x2299>
10007331:	a1 00 00 00 00       	mov    eax,ds:0x0	10007332: R_386_32	kernelProcess
10007336:	6a 01                	push   0x1
10007338:	6a 00                	push   0x0
1000733a:	68 00 00 00 00       	push   0x0	1000733b: R_386_32	startGUIVESA(void*)
1000733f:	50                   	push   eax
10007340:	e8 fc ff ff ff       	call   10007341 <begin(void*)+0x2292>	10007341: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10007345:	83 c4 10             	add    esp,0x10
10007348:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
1000734b:	8b 00                	mov    eax,DWORD PTR [eax]
1000734d:	83 ec 04             	sub    esp,0x4
10007350:	6a 00                	push   0x0
10007352:	8d 95 7c ff ff ff    	lea    edx,[ebp-0x84]
10007358:	52                   	push   edx
10007359:	50                   	push   eax
1000735a:	e8 fc ff ff ff       	call   1000735b <begin(void*)+0x22ac>	1000735b: R_386_PC32	waitTask(int, int*, int)
1000735f:	83 c4 10             	add    esp,0x10
10007362:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10007364: R_386_32	Krnl::computer
10007368:	a1 00 00 00 00       	mov    eax,ds:0x0	10007369: R_386_32	Krnl::computer
1000736d:	8b 00                	mov    eax,DWORD PTR [eax]
1000736f:	83 c0 0c             	add    eax,0xc
10007372:	8b 00                	mov    eax,DWORD PTR [eax]
10007374:	6a 00                	push   0x0
10007376:	6a 00                	push   0x0
10007378:	6a 00                	push   0x0
1000737a:	52                   	push   edx
1000737b:	ff d0                	call   eax
1000737d:	83 c4 10             	add    esp,0x10
10007380:	83 ec 0c             	sub    esp,0xc
10007383:	68 fc b2 00 10       	push   0x1000b2fc	10007384: R_386_32	.text
10007388:	e8 fc ff ff ff       	call   10007389 <begin(void*)+0x22da>	10007389: R_386_PC32	KePanic(char const*)
1000738d:	83 c4 10             	add    esp,0x10
10007390:	eb fe                	jmp    10007390 <begin(void*)+0x22e1>

10007392 <clean>:
10007392:	57                   	push   edi
10007393:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10007397:	b0 00                	mov    al,0x0
10007399:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
1000739d:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000739f:	5f                   	pop    edi
100073a0:	c3                   	ret    

100073a1 <BF_decode>:
100073a1:	55                   	push   ebp
100073a2:	57                   	push   edi
100073a3:	56                   	push   esi
100073a4:	53                   	push   ebx
100073a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100073a9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100073ad:	89 d6                	mov    esi,edx
100073af:	03 74 24 1c          	add    esi,DWORD PTR [esp+0x1c]
100073b3:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
100073b6:	83 e8 20             	sub    eax,0x20
100073b9:	83 f8 5f             	cmp    eax,0x5f
100073bc:	0f 87 a3 00 00 00    	ja     10007465 <BF_decode+0xc4>
100073c2:	8a 80 00 c5 00 10    	mov    al,BYTE PTR [eax+0x1000c500]	100073c4: R_386_32	.data
100073c8:	3c 3f                	cmp    al,0x3f
100073ca:	0f 87 9f 00 00 00    	ja     1000746f <BF_decode+0xce>
100073d0:	0f b6 4b 01          	movzx  ecx,BYTE PTR [ebx+0x1]
100073d4:	83 e9 20             	sub    ecx,0x20
100073d7:	83 f9 5f             	cmp    ecx,0x5f
100073da:	0f 87 96 00 00 00    	ja     10007476 <BF_decode+0xd5>
100073e0:	8a 89 00 c5 00 10    	mov    cl,BYTE PTR [ecx+0x1000c500]	100073e2: R_386_32	.data
100073e6:	0f b6 f9             	movzx  edi,cl
100073e9:	83 ff 3f             	cmp    edi,0x3f
100073ec:	0f 87 8b 00 00 00    	ja     1000747d <BF_decode+0xdc>
100073f2:	c1 e0 02             	shl    eax,0x2
100073f5:	c1 ef 04             	shr    edi,0x4
100073f8:	09 f8                	or     eax,edi
100073fa:	88 02                	mov    BYTE PTR [edx],al
100073fc:	89 d7                	mov    edi,edx
100073fe:	8d 42 01             	lea    eax,[edx+0x1]
10007401:	39 c6                	cmp    esi,eax
10007403:	76 7f                	jbe    10007484 <BF_decode+0xe3>
10007405:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
10007409:	83 e8 20             	sub    eax,0x20
1000740c:	83 f8 5f             	cmp    eax,0x5f
1000740f:	77 7a                	ja     1000748b <BF_decode+0xea>
10007411:	8a 80 00 c5 00 10    	mov    al,BYTE PTR [eax+0x1000c500]	10007413: R_386_32	.data
10007417:	0f b6 e8             	movzx  ebp,al
1000741a:	83 fd 3f             	cmp    ebp,0x3f
1000741d:	77 73                	ja     10007492 <BF_decode+0xf1>
1000741f:	c1 e1 04             	shl    ecx,0x4
10007422:	c1 ed 02             	shr    ebp,0x2
10007425:	09 e9                	or     ecx,ebp
10007427:	88 4a 01             	mov    BYTE PTR [edx+0x1],cl
1000742a:	8d 52 02             	lea    edx,[edx+0x2]
1000742d:	39 d6                	cmp    esi,edx
1000742f:	76 68                	jbe    10007499 <BF_decode+0xf8>
10007431:	83 c3 04             	add    ebx,0x4
10007434:	0f b6 53 ff          	movzx  edx,BYTE PTR [ebx-0x1]
10007438:	83 ea 20             	sub    edx,0x20
1000743b:	83 fa 5f             	cmp    edx,0x5f
1000743e:	77 60                	ja     100074a0 <BF_decode+0xff>
10007440:	8a 8a 00 c5 00 10    	mov    cl,BYTE PTR [edx+0x1000c500]	10007442: R_386_32	.data
10007446:	80 f9 3f             	cmp    cl,0x3f
10007449:	77 5c                	ja     100074a7 <BF_decode+0x106>
1000744b:	8d 57 03             	lea    edx,[edi+0x3]
1000744e:	c1 e0 06             	shl    eax,0x6
10007451:	09 c1                	or     ecx,eax
10007453:	88 4a ff             	mov    BYTE PTR [edx-0x1],cl
10007456:	39 d6                	cmp    esi,edx
10007458:	0f 87 55 ff ff ff    	ja     100073b3 <BF_decode+0x12>
1000745e:	b8 00 00 00 00       	mov    eax,0x0
10007463:	eb 05                	jmp    1000746a <BF_decode+0xc9>
10007465:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000746a:	5b                   	pop    ebx
1000746b:	5e                   	pop    esi
1000746c:	5f                   	pop    edi
1000746d:	5d                   	pop    ebp
1000746e:	c3                   	ret    
1000746f:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007474:	eb f4                	jmp    1000746a <BF_decode+0xc9>
10007476:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000747b:	eb ed                	jmp    1000746a <BF_decode+0xc9>
1000747d:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007482:	eb e6                	jmp    1000746a <BF_decode+0xc9>
10007484:	b8 00 00 00 00       	mov    eax,0x0
10007489:	eb df                	jmp    1000746a <BF_decode+0xc9>
1000748b:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007490:	eb d8                	jmp    1000746a <BF_decode+0xc9>
10007492:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007497:	eb d1                	jmp    1000746a <BF_decode+0xc9>
10007499:	b8 00 00 00 00       	mov    eax,0x0
1000749e:	eb ca                	jmp    1000746a <BF_decode+0xc9>
100074a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
100074a5:	eb c3                	jmp    1000746a <BF_decode+0xc9>
100074a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
100074ac:	eb bc                	jmp    1000746a <BF_decode+0xc9>

100074ae <BF_encode>:
100074ae:	55                   	push   ebp
100074af:	57                   	push   edi
100074b0:	56                   	push   esi
100074b1:	53                   	push   ebx
100074b2:	83 ec 04             	sub    esp,0x4
100074b5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
100074b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100074bd:	89 c7                	mov    edi,eax
100074bf:	03 7c 24 20          	add    edi,DWORD PTR [esp+0x20]
100074c3:	89 3c 24             	mov    DWORD PTR [esp],edi
100074c6:	0f b6 10             	movzx  edx,BYTE PTR [eax]
100074c9:	89 d6                	mov    esi,edx
100074cb:	c1 ee 02             	shr    esi,0x2
100074ce:	8a 9e a0 c4 00 10    	mov    bl,BYTE PTR [esi+0x1000c4a0]	100074d0: R_386_32	.data
100074d4:	88 19                	mov    BYTE PTR [ecx],bl
100074d6:	c1 e2 04             	shl    edx,0x4
100074d9:	83 e2 30             	and    edx,0x30
100074dc:	89 c7                	mov    edi,eax
100074de:	8d 70 01             	lea    esi,[eax+0x1]
100074e1:	39 34 24             	cmp    DWORD PTR [esp],esi
100074e4:	76 51                	jbe    10007537 <BF_encode+0x89>
100074e6:	0f b6 70 01          	movzx  esi,BYTE PTR [eax+0x1]
100074ea:	89 f5                	mov    ebp,esi
100074ec:	c1 ed 04             	shr    ebp,0x4
100074ef:	09 ea                	or     edx,ebp
100074f1:	8a 9a a0 c4 00 10    	mov    bl,BYTE PTR [edx+0x1000c4a0]	100074f3: R_386_32	.data
100074f7:	88 59 01             	mov    BYTE PTR [ecx+0x1],bl
100074fa:	c1 e6 02             	shl    esi,0x2
100074fd:	83 e6 3c             	and    esi,0x3c
10007500:	83 c0 02             	add    eax,0x2
10007503:	39 04 24             	cmp    DWORD PTR [esp],eax
10007506:	76 40                	jbe    10007548 <BF_encode+0x9a>
10007508:	8d 47 03             	lea    eax,[edi+0x3]
1000750b:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
1000750e:	0f b6 d3             	movzx  edx,bl
10007511:	c1 ea 06             	shr    edx,0x6
10007514:	09 f2                	or     edx,esi
10007516:	8a 92 a0 c4 00 10    	mov    dl,BYTE PTR [edx+0x1000c4a0]	10007518: R_386_32	.data
1000751c:	88 51 02             	mov    BYTE PTR [ecx+0x2],dl
1000751f:	83 c1 04             	add    ecx,0x4
10007522:	89 da                	mov    edx,ebx
10007524:	83 e2 3f             	and    edx,0x3f
10007527:	8a 9a a0 c4 00 10    	mov    bl,BYTE PTR [edx+0x1000c4a0]	10007529: R_386_32	.data
1000752d:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
10007530:	39 04 24             	cmp    DWORD PTR [esp],eax
10007533:	77 91                	ja     100074c6 <BF_encode+0x18>
10007535:	eb 09                	jmp    10007540 <BF_encode+0x92>
10007537:	8a 82 a0 c4 00 10    	mov    al,BYTE PTR [edx+0x1000c4a0]	10007539: R_386_32	.data
1000753d:	88 41 01             	mov    BYTE PTR [ecx+0x1],al
10007540:	83 c4 04             	add    esp,0x4
10007543:	5b                   	pop    ebx
10007544:	5e                   	pop    esi
10007545:	5f                   	pop    edi
10007546:	5d                   	pop    ebp
10007547:	c3                   	ret    
10007548:	8a 86 a0 c4 00 10    	mov    al,BYTE PTR [esi+0x1000c4a0]	1000754a: R_386_32	.data
1000754e:	88 41 02             	mov    BYTE PTR [ecx+0x2],al
10007551:	eb ed                	jmp    10007540 <BF_encode+0x92>

10007553 <BF_swap>:
10007553:	53                   	push   ebx
10007554:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10007558:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
1000755c:	80 3d 60 c5 00 10 00 	cmp    BYTE PTR ds:0x1000c560,0x0	1000755e: R_386_32	.data
10007563:	74 23                	je     10007588 <BF_swap+0x35>
10007565:	8b 01                	mov    eax,DWORD PTR [ecx]
10007567:	c1 c0 10             	rol    eax,0x10
1000756a:	83 c1 04             	add    ecx,0x4
1000756d:	89 c2                	mov    edx,eax
1000756f:	c1 e2 08             	shl    edx,0x8
10007572:	81 e2 00 ff 00 ff    	and    edx,0xff00ff00
10007578:	c1 e8 08             	shr    eax,0x8
1000757b:	25 ff 00 ff 00       	and    eax,0xff00ff
10007580:	09 d0                	or     eax,edx
10007582:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
10007585:	4b                   	dec    ebx
10007586:	75 dd                	jne    10007565 <BF_swap+0x12>
10007588:	5b                   	pop    ebx
10007589:	c3                   	ret    

1000758a <BF_set_key>:
1000758a:	55                   	push   ebp
1000758b:	57                   	push   edi
1000758c:	56                   	push   esi
1000758d:	53                   	push   ebx
1000758e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10007592:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
10007596:	89 f9                	mov    ecx,edi
10007598:	be 00 00 00 00       	mov    esi,0x0
1000759d:	eb 2d                	jmp    100075cc <BF_set_key+0x42>
1000759f:	89 f9                	mov    ecx,edi
100075a1:	4a                   	dec    edx
100075a2:	74 10                	je     100075b4 <BF_set_key+0x2a>
100075a4:	c1 e0 08             	shl    eax,0x8
100075a7:	0f b6 19             	movzx  ebx,BYTE PTR [ecx]
100075aa:	09 d8                	or     eax,ebx
100075ac:	80 39 00             	cmp    BYTE PTR [ecx],0x0
100075af:	74 ee                	je     1000759f <BF_set_key+0x15>
100075b1:	41                   	inc    ecx
100075b2:	eb ed                	jmp    100075a1 <BF_set_key+0x17>
100075b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100075b8:	89 04 b2             	mov    DWORD PTR [edx+esi*4],eax
100075bb:	33 04 b5 40 c4 00 10 	xor    eax,DWORD PTR [esi*4+0x1000c440]	100075be: R_386_32	.data
100075c2:	89 44 b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],eax
100075c6:	46                   	inc    esi
100075c7:	83 fe 12             	cmp    esi,0x12
100075ca:	74 0c                	je     100075d8 <BF_set_key+0x4e>
100075cc:	ba 04 00 00 00       	mov    edx,0x4
100075d1:	b8 00 00 00 00       	mov    eax,0x0
100075d6:	eb cc                	jmp    100075a4 <BF_set_key+0x1a>
100075d8:	5b                   	pop    ebx
100075d9:	5e                   	pop    esi
100075da:	5f                   	pop    edi
100075db:	5d                   	pop    ebp
100075dc:	c3                   	ret    

100075dd <_crypt_blowfish_rn>:
100075dd:	55                   	push   ebp
100075de:	57                   	push   edi
100075df:	56                   	push   esi
100075e0:	53                   	push   ebx
100075e1:	81 ec 00 11 00 00    	sub    esp,0x1100
100075e7:	83 bc 24 20 11 00 00 3c 	cmp    DWORD PTR [esp+0x1120],0x3c
100075ef:	0f 8e 9e 2d 00 00    	jle    1000a393 <_crypt_blowfish_rn+0x2db6>
100075f5:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
100075fc:	80 38 24             	cmp    BYTE PTR [eax],0x24
100075ff:	0f 85 a8 2d 00 00    	jne    1000a3ad <_crypt_blowfish_rn+0x2dd0>
10007605:	80 78 01 32          	cmp    BYTE PTR [eax+0x1],0x32
10007609:	0f 85 9e 2d 00 00    	jne    1000a3ad <_crypt_blowfish_rn+0x2dd0>
1000760f:	80 78 02 61          	cmp    BYTE PTR [eax+0x2],0x61
10007613:	0f 85 94 2d 00 00    	jne    1000a3ad <_crypt_blowfish_rn+0x2dd0>
10007619:	80 78 03 24          	cmp    BYTE PTR [eax+0x3],0x24
1000761d:	0f 85 8a 2d 00 00    	jne    1000a3ad <_crypt_blowfish_rn+0x2dd0>
10007623:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10007626:	8d 50 d0             	lea    edx,[eax-0x30]
10007629:	80 fa 03             	cmp    dl,0x3
1000762c:	0f 87 7b 2d 00 00    	ja     1000a3ad <_crypt_blowfish_rn+0x2dd0>
10007632:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
10007639:	8a 53 05             	mov    dl,BYTE PTR [ebx+0x5]
1000763c:	8d 4a d0             	lea    ecx,[edx-0x30]
1000763f:	80 f9 09             	cmp    cl,0x9
10007642:	0f 87 65 2d 00 00    	ja     1000a3ad <_crypt_blowfish_rn+0x2dd0>
10007648:	3c 33                	cmp    al,0x33
1000764a:	0f 84 54 2d 00 00    	je     1000a3a4 <_crypt_blowfish_rn+0x2dc7>
10007650:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
10007657:	80 7b 06 24          	cmp    BYTE PTR [ebx+0x6],0x24
1000765b:	0f 85 4c 2d 00 00    	jne    1000a3ad <_crypt_blowfish_rn+0x2dd0>
10007661:	0f be c0             	movsx  eax,al
10007664:	8d 84 80 10 ff ff ff 	lea    eax,[eax+eax*4-0xf0]
1000766b:	01 c0                	add    eax,eax
1000766d:	0f be d2             	movsx  edx,dl
10007670:	8d 4c 10 d0          	lea    ecx,[eax+edx*1-0x30]
10007674:	b8 01 00 00 00       	mov    eax,0x1
10007679:	d3 e0                	shl    eax,cl
1000767b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000767f:	83 f8 0f             	cmp    eax,0xf
10007682:	0f 86 3f 2d 00 00    	jbe    1000a3c7 <_crypt_blowfish_rn+0x2dea>
10007688:	6a 10                	push   0x10
1000768a:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
10007691:	83 c0 07             	add    eax,0x7
10007694:	50                   	push   eax
10007695:	8d 84 24 f0 10 00 00 	lea    eax,[esp+0x10f0]
1000769c:	50                   	push   eax
1000769d:	e8 ff fc ff ff       	call   100073a1 <BF_decode>
100076a2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
100076a6:	83 c4 0c             	add    esp,0xc
100076a9:	85 c0                	test   eax,eax
100076ab:	0f 85 16 2d 00 00    	jne    1000a3c7 <_crypt_blowfish_rn+0x2dea>
100076b1:	6a 04                	push   0x4
100076b3:	8d 5c 24 5c          	lea    ebx,[esp+0x5c]
100076b7:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
100076be:	50                   	push   eax
100076bf:	e8 8f fe ff ff       	call   10007553 <BF_swap>
100076c4:	8d 84 24 60 10 00 00 	lea    eax,[esp+0x1060]
100076cb:	50                   	push   eax
100076cc:	8d 84 24 ac 10 00 00 	lea    eax,[esp+0x10ac]
100076d3:	50                   	push   eax
100076d4:	ff b4 24 24 11 00 00 	push   DWORD PTR [esp+0x1124]
100076db:	e8 aa fe ff ff       	call   1000758a <BF_set_key>
100076e0:	be 40 b4 00 10       	mov    esi,0x1000b440	100076e1: R_386_32	.data
100076e5:	b9 00 04 00 00       	mov    ecx,0x400
100076ea:	89 df                	mov    edi,ebx
100076ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100076ee:	83 c4 14             	add    esp,0x14
100076f1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100076f5:	89 04 24             	mov    DWORD PTR [esp],eax
100076f8:	bb 00 00 00 00       	mov    ebx,0x0
100076fd:	b8 00 00 00 00       	mov    eax,0x0
10007702:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10007705:	83 e1 02             	and    ecx,0x2
10007708:	8d 91 24 04 00 00    	lea    edx,[ecx+0x424]
1000770e:	8b 54 94 58          	mov    edx,DWORD PTR [esp+edx*4+0x58]
10007712:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
10007719:	31 c2                	xor    edx,eax
1000771b:	89 d7                	mov    edi,edx
1000771d:	c1 ef 06             	shr    edi,0x6
10007720:	89 d5                	mov    ebp,edx
10007722:	c1 ed 0e             	shr    ebp,0xe
10007725:	89 d0                	mov    eax,edx
10007727:	c1 e8 16             	shr    eax,0x16
1000772a:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007731:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007737:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000773d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007743:	25 fc 03 00 00       	and    eax,0x3fc
10007748:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000774c:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007753:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000775a:	81 c1 25 04 00 00    	add    ecx,0x425
10007760:	8b 4c 8c 58          	mov    ecx,DWORD PTR [esp+ecx*4+0x58]
10007764:	33 8c 24 5c 10 00 00 	xor    ecx,DWORD PTR [esp+0x105c]
1000776b:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10007772:	31 c8                	xor    eax,ecx
10007774:	31 c3                	xor    ebx,eax
10007776:	89 d8                	mov    eax,ebx
10007778:	c1 e8 06             	shr    eax,0x6
1000777b:	89 c1                	mov    ecx,eax
1000777d:	89 df                	mov    edi,ebx
1000777f:	c1 ef 0e             	shr    edi,0xe
10007782:	89 d8                	mov    eax,ebx
10007784:	c1 e8 16             	shr    eax,0x16
10007787:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
1000778e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007794:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000779a:	81 e7 fc 03 00 00    	and    edi,0x3fc
100077a0:	25 fc 03 00 00       	and    eax,0x3fc
100077a5:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100077a9:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
100077b0:	33 84 0c 58 08 00 00 	xor    eax,DWORD PTR [esp+ecx*1+0x858]
100077b7:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
100077be:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100077c5:	89 c1                	mov    ecx,eax
100077c7:	31 d1                	xor    ecx,edx
100077c9:	89 ca                	mov    edx,ecx
100077cb:	c1 ea 06             	shr    edx,0x6
100077ce:	89 cf                	mov    edi,ecx
100077d0:	c1 ef 0e             	shr    edi,0xe
100077d3:	89 c8                	mov    eax,ecx
100077d5:	c1 e8 16             	shr    eax,0x16
100077d8:	8d 34 8d 00 00 00 00 	lea    esi,[ecx*4+0x0]
100077df:	81 e6 fc 03 00 00    	and    esi,0x3fc
100077e5:	81 e2 fc 03 00 00    	and    edx,0x3fc
100077eb:	81 e7 fc 03 00 00    	and    edi,0x3fc
100077f1:	25 fc 03 00 00       	and    eax,0x3fc
100077f6:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100077fa:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10007801:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10007808:	33 9c 24 64 10 00 00 	xor    ebx,DWORD PTR [esp+0x1064]
1000780f:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10007816:	89 c2                	mov    edx,eax
10007818:	31 da                	xor    edx,ebx
1000781a:	89 d6                	mov    esi,edx
1000781c:	c1 ee 06             	shr    esi,0x6
1000781f:	89 d7                	mov    edi,edx
10007821:	c1 ef 0e             	shr    edi,0xe
10007824:	89 d0                	mov    eax,edx
10007826:	c1 e8 16             	shr    eax,0x16
10007829:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10007830:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007836:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000783c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007842:	25 fc 03 00 00       	and    eax,0x3fc
10007847:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000784b:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10007852:	33 84 34 58 08 00 00 	xor    eax,DWORD PTR [esp+esi*1+0x858]
10007859:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
10007860:	03 84 1c 58 0c 00 00 	add    eax,DWORD PTR [esp+ebx*1+0xc58]
10007867:	31 c8                	xor    eax,ecx
10007869:	89 c3                	mov    ebx,eax
1000786b:	c1 eb 06             	shr    ebx,0x6
1000786e:	89 c7                	mov    edi,eax
10007870:	c1 ef 0e             	shr    edi,0xe
10007873:	89 c6                	mov    esi,eax
10007875:	c1 ee 16             	shr    esi,0x16
10007878:	89 f1                	mov    ecx,esi
1000787a:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007881:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007887:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000788d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007893:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007899:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000789d:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100078a4:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
100078ab:	33 94 24 6c 10 00 00 	xor    edx,DWORD PTR [esp+0x106c]
100078b2:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100078b9:	31 ca                	xor    edx,ecx
100078bb:	89 d6                	mov    esi,edx
100078bd:	c1 ee 06             	shr    esi,0x6
100078c0:	89 d7                	mov    edi,edx
100078c2:	c1 ef 0e             	shr    edi,0xe
100078c5:	89 d3                	mov    ebx,edx
100078c7:	c1 eb 16             	shr    ebx,0x16
100078ca:	89 d9                	mov    ecx,ebx
100078cc:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
100078d3:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100078d9:	81 e6 fc 03 00 00    	and    esi,0x3fc
100078df:	81 e7 fc 03 00 00    	and    edi,0x3fc
100078e5:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100078eb:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100078ef:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100078f6:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100078fd:	33 84 24 70 10 00 00 	xor    eax,DWORD PTR [esp+0x1070]
10007904:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
1000790b:	31 c8                	xor    eax,ecx
1000790d:	89 c6                	mov    esi,eax
1000790f:	c1 ee 06             	shr    esi,0x6
10007912:	89 c7                	mov    edi,eax
10007914:	c1 ef 0e             	shr    edi,0xe
10007917:	89 c3                	mov    ebx,eax
10007919:	c1 eb 16             	shr    ebx,0x16
1000791c:	89 d9                	mov    ecx,ebx
1000791e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007925:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000792b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007931:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007937:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000793d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007941:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007948:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
1000794f:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10007956:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
1000795d:	31 ca                	xor    edx,ecx
1000795f:	89 d6                	mov    esi,edx
10007961:	c1 ee 06             	shr    esi,0x6
10007964:	89 d7                	mov    edi,edx
10007966:	c1 ef 0e             	shr    edi,0xe
10007969:	89 d3                	mov    ebx,edx
1000796b:	c1 eb 16             	shr    ebx,0x16
1000796e:	89 d9                	mov    ecx,ebx
10007970:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10007977:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000797d:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007983:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007989:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000798f:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007993:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
1000799a:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100079a1:	33 84 24 78 10 00 00 	xor    eax,DWORD PTR [esp+0x1078]
100079a8:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
100079af:	31 c8                	xor    eax,ecx
100079b1:	89 c6                	mov    esi,eax
100079b3:	c1 ee 06             	shr    esi,0x6
100079b6:	89 c7                	mov    edi,eax
100079b8:	c1 ef 0e             	shr    edi,0xe
100079bb:	89 c3                	mov    ebx,eax
100079bd:	c1 eb 16             	shr    ebx,0x16
100079c0:	89 d9                	mov    ecx,ebx
100079c2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
100079c9:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100079cf:	81 e6 fc 03 00 00    	and    esi,0x3fc
100079d5:	81 e7 fc 03 00 00    	and    edi,0x3fc
100079db:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100079e1:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100079e5:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100079ec:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100079f3:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
100079fa:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007a01:	31 ca                	xor    edx,ecx
10007a03:	89 d6                	mov    esi,edx
10007a05:	c1 ee 06             	shr    esi,0x6
10007a08:	89 d7                	mov    edi,edx
10007a0a:	c1 ef 0e             	shr    edi,0xe
10007a0d:	89 d3                	mov    ebx,edx
10007a0f:	c1 eb 16             	shr    ebx,0x16
10007a12:	89 d9                	mov    ecx,ebx
10007a14:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10007a1b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007a21:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007a27:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007a2d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007a33:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007a37:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007a3e:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007a45:	33 84 24 80 10 00 00 	xor    eax,DWORD PTR [esp+0x1080]
10007a4c:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007a53:	31 c8                	xor    eax,ecx
10007a55:	89 c6                	mov    esi,eax
10007a57:	c1 ee 06             	shr    esi,0x6
10007a5a:	89 c7                	mov    edi,eax
10007a5c:	c1 ef 0e             	shr    edi,0xe
10007a5f:	89 c3                	mov    ebx,eax
10007a61:	c1 eb 16             	shr    ebx,0x16
10007a64:	89 d9                	mov    ecx,ebx
10007a66:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007a6d:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007a73:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007a79:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007a7f:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007a85:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007a89:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007a90:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007a97:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10007a9e:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007aa5:	31 ca                	xor    edx,ecx
10007aa7:	89 d6                	mov    esi,edx
10007aa9:	c1 ee 06             	shr    esi,0x6
10007aac:	89 d7                	mov    edi,edx
10007aae:	c1 ef 0e             	shr    edi,0xe
10007ab1:	89 d3                	mov    ebx,edx
10007ab3:	c1 eb 16             	shr    ebx,0x16
10007ab6:	89 d9                	mov    ecx,ebx
10007ab8:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10007abf:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007ac5:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007acb:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007ad1:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007ad7:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007adb:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007ae2:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007ae9:	33 84 24 88 10 00 00 	xor    eax,DWORD PTR [esp+0x1088]
10007af0:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007af7:	31 c8                	xor    eax,ecx
10007af9:	89 c6                	mov    esi,eax
10007afb:	c1 ee 06             	shr    esi,0x6
10007afe:	89 c7                	mov    edi,eax
10007b00:	c1 ef 0e             	shr    edi,0xe
10007b03:	89 c3                	mov    ebx,eax
10007b05:	c1 eb 16             	shr    ebx,0x16
10007b08:	89 d9                	mov    ecx,ebx
10007b0a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007b11:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007b17:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007b1d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007b23:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007b29:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007b2d:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007b34:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007b3b:	33 94 24 8c 10 00 00 	xor    edx,DWORD PTR [esp+0x108c]
10007b42:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007b49:	31 ca                	xor    edx,ecx
10007b4b:	89 d3                	mov    ebx,edx
10007b4d:	c1 eb 06             	shr    ebx,0x6
10007b50:	89 d7                	mov    edi,edx
10007b52:	c1 ef 0e             	shr    edi,0xe
10007b55:	89 d6                	mov    esi,edx
10007b57:	c1 ee 16             	shr    esi,0x16
10007b5a:	89 f1                	mov    ecx,esi
10007b5c:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007b63:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007b69:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007b6f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007b75:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007b7b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007b7f:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007b86:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10007b8d:	33 84 24 90 10 00 00 	xor    eax,DWORD PTR [esp+0x1090]
10007b94:	89 cb                	mov    ebx,ecx
10007b96:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007b9d:	31 d8                	xor    eax,ebx
10007b9f:	89 c6                	mov    esi,eax
10007ba1:	c1 ee 06             	shr    esi,0x6
10007ba4:	89 c7                	mov    edi,eax
10007ba6:	c1 ef 0e             	shr    edi,0xe
10007ba9:	89 c3                	mov    ebx,eax
10007bab:	c1 eb 16             	shr    ebx,0x16
10007bae:	89 d9                	mov    ecx,ebx
10007bb0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007bb7:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007bbd:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007bc3:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007bc9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007bcf:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007bd3:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007bda:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007be1:	33 94 24 94 10 00 00 	xor    edx,DWORD PTR [esp+0x1094]
10007be8:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007bef:	31 ca                	xor    edx,ecx
10007bf1:	89 d3                	mov    ebx,edx
10007bf3:	c1 eb 06             	shr    ebx,0x6
10007bf6:	89 d7                	mov    edi,edx
10007bf8:	c1 ef 0e             	shr    edi,0xe
10007bfb:	89 d6                	mov    esi,edx
10007bfd:	c1 ee 16             	shr    esi,0x16
10007c00:	89 f1                	mov    ecx,esi
10007c02:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007c09:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007c0f:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007c15:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007c1b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007c21:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007c25:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007c2c:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10007c33:	33 84 24 98 10 00 00 	xor    eax,DWORD PTR [esp+0x1098]
10007c3a:	89 cb                	mov    ebx,ecx
10007c3c:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007c43:	31 c3                	xor    ebx,eax
10007c45:	89 d0                	mov    eax,edx
10007c47:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10007c4e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10007c51:	89 84 8c 58 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x1058],eax
10007c58:	89 9c 8c 5c 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x105c],ebx
10007c5f:	83 c1 02             	add    ecx,0x2
10007c62:	89 0c 24             	mov    DWORD PTR [esp],ecx
10007c65:	83 f9 12             	cmp    ecx,0x12
10007c68:	0f 85 94 fa ff ff    	jne    10007702 <_crypt_blowfish_rn+0x125>
10007c6e:	8d 4c 24 58          	lea    ecx,[esp+0x58]
10007c72:	83 c1 10             	add    ecx,0x10
10007c75:	8b 94 24 f0 10 00 00 	mov    edx,DWORD PTR [esp+0x10f0]
10007c7c:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
10007c83:	31 c2                	xor    edx,eax
10007c85:	89 d7                	mov    edi,edx
10007c87:	c1 ef 06             	shr    edi,0x6
10007c8a:	89 d5                	mov    ebp,edx
10007c8c:	c1 ed 0e             	shr    ebp,0xe
10007c8f:	89 d0                	mov    eax,edx
10007c91:	c1 e8 16             	shr    eax,0x16
10007c94:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007c9b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007ca1:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007ca7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007cad:	25 fc 03 00 00       	and    eax,0x3fc
10007cb2:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007cb6:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007cbd:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007cc4:	89 c7                	mov    edi,eax
10007cc6:	8b 84 24 f4 10 00 00 	mov    eax,DWORD PTR [esp+0x10f4]
10007ccd:	33 84 24 5c 10 00 00 	xor    eax,DWORD PTR [esp+0x105c]
10007cd4:	03 bc 34 58 0c 00 00 	add    edi,DWORD PTR [esp+esi*1+0xc58]
10007cdb:	31 f8                	xor    eax,edi
10007cdd:	31 d8                	xor    eax,ebx
10007cdf:	89 c7                	mov    edi,eax
10007ce1:	c1 ef 06             	shr    edi,0x6
10007ce4:	89 c5                	mov    ebp,eax
10007ce6:	c1 ed 0e             	shr    ebp,0xe
10007ce9:	89 c3                	mov    ebx,eax
10007ceb:	c1 eb 16             	shr    ebx,0x16
10007cee:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007cf5:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007cfb:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007d01:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007d07:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007d0d:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007d11:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007d18:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007d1f:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
10007d26:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007d2d:	31 da                	xor    edx,ebx
10007d2f:	89 d7                	mov    edi,edx
10007d31:	c1 ef 06             	shr    edi,0x6
10007d34:	89 d5                	mov    ebp,edx
10007d36:	c1 ed 0e             	shr    ebp,0xe
10007d39:	89 d3                	mov    ebx,edx
10007d3b:	c1 eb 16             	shr    ebx,0x16
10007d3e:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007d45:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007d4b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007d51:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007d57:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007d5d:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007d61:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007d68:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007d6f:	33 84 24 64 10 00 00 	xor    eax,DWORD PTR [esp+0x1064]
10007d76:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007d7d:	31 d8                	xor    eax,ebx
10007d7f:	89 c7                	mov    edi,eax
10007d81:	c1 ef 06             	shr    edi,0x6
10007d84:	89 c5                	mov    ebp,eax
10007d86:	c1 ed 0e             	shr    ebp,0xe
10007d89:	89 c3                	mov    ebx,eax
10007d8b:	c1 eb 16             	shr    ebx,0x16
10007d8e:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007d95:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007d9b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007da1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007da7:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007dad:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007db1:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007db8:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007dbf:	33 94 24 68 10 00 00 	xor    edx,DWORD PTR [esp+0x1068]
10007dc6:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007dcd:	31 da                	xor    edx,ebx
10007dcf:	89 d7                	mov    edi,edx
10007dd1:	c1 ef 06             	shr    edi,0x6
10007dd4:	89 d5                	mov    ebp,edx
10007dd6:	c1 ed 0e             	shr    ebp,0xe
10007dd9:	89 d3                	mov    ebx,edx
10007ddb:	c1 eb 16             	shr    ebx,0x16
10007dde:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007de5:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007deb:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007df1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007df7:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007dfd:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007e01:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007e08:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007e0f:	33 84 24 6c 10 00 00 	xor    eax,DWORD PTR [esp+0x106c]
10007e16:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007e1d:	31 d8                	xor    eax,ebx
10007e1f:	89 c7                	mov    edi,eax
10007e21:	c1 ef 06             	shr    edi,0x6
10007e24:	89 c5                	mov    ebp,eax
10007e26:	c1 ed 0e             	shr    ebp,0xe
10007e29:	89 c3                	mov    ebx,eax
10007e2b:	c1 eb 16             	shr    ebx,0x16
10007e2e:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007e35:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007e3b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007e41:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007e47:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007e4d:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007e51:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007e58:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007e5f:	33 94 24 70 10 00 00 	xor    edx,DWORD PTR [esp+0x1070]
10007e66:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007e6d:	31 da                	xor    edx,ebx
10007e6f:	89 d7                	mov    edi,edx
10007e71:	c1 ef 06             	shr    edi,0x6
10007e74:	89 d5                	mov    ebp,edx
10007e76:	c1 ed 0e             	shr    ebp,0xe
10007e79:	89 d3                	mov    ebx,edx
10007e7b:	c1 eb 16             	shr    ebx,0x16
10007e7e:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007e85:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007e8b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007e91:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007e97:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007e9d:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007ea1:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007ea8:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007eaf:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10007eb6:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007ebd:	31 d8                	xor    eax,ebx
10007ebf:	89 c7                	mov    edi,eax
10007ec1:	c1 ef 06             	shr    edi,0x6
10007ec4:	89 c5                	mov    ebp,eax
10007ec6:	c1 ed 0e             	shr    ebp,0xe
10007ec9:	89 c3                	mov    ebx,eax
10007ecb:	c1 eb 16             	shr    ebx,0x16
10007ece:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007ed5:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007edb:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007ee1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007ee7:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007eed:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007ef1:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007ef8:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007eff:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10007f06:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007f0d:	31 da                	xor    edx,ebx
10007f0f:	89 d7                	mov    edi,edx
10007f11:	c1 ef 06             	shr    edi,0x6
10007f14:	89 d5                	mov    ebp,edx
10007f16:	c1 ed 0e             	shr    ebp,0xe
10007f19:	89 d3                	mov    ebx,edx
10007f1b:	c1 eb 16             	shr    ebx,0x16
10007f1e:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007f25:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007f2b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007f31:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007f37:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007f3d:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007f41:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007f48:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007f4f:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10007f56:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007f5d:	31 d8                	xor    eax,ebx
10007f5f:	89 c7                	mov    edi,eax
10007f61:	c1 ef 06             	shr    edi,0x6
10007f64:	89 c5                	mov    ebp,eax
10007f66:	c1 ed 0e             	shr    ebp,0xe
10007f69:	89 c3                	mov    ebx,eax
10007f6b:	c1 eb 16             	shr    ebx,0x16
10007f6e:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007f75:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007f7b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007f81:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007f87:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007f8d:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007f91:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007f98:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007f9f:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10007fa6:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007fad:	31 da                	xor    edx,ebx
10007faf:	89 d7                	mov    edi,edx
10007fb1:	c1 ef 06             	shr    edi,0x6
10007fb4:	89 d5                	mov    ebp,edx
10007fb6:	c1 ed 0e             	shr    ebp,0xe
10007fb9:	89 d3                	mov    ebx,edx
10007fbb:	c1 eb 16             	shr    ebx,0x16
10007fbe:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007fc5:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007fcb:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007fd1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007fd7:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007fdd:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007fe1:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007fe8:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007fef:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10007ff6:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007ffd:	31 d8                	xor    eax,ebx
10007fff:	89 c7                	mov    edi,eax
10008001:	c1 ef 06             	shr    edi,0x6
10008004:	89 c5                	mov    ebp,eax
10008006:	c1 ed 0e             	shr    ebp,0xe
10008009:	89 c3                	mov    ebx,eax
1000800b:	c1 eb 16             	shr    ebx,0x16
1000800e:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008015:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000801b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008021:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008027:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000802d:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008031:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008038:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000803f:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10008046:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000804d:	31 da                	xor    edx,ebx
1000804f:	89 d7                	mov    edi,edx
10008051:	c1 ef 06             	shr    edi,0x6
10008054:	89 d5                	mov    ebp,edx
10008056:	c1 ed 0e             	shr    ebp,0xe
10008059:	89 d3                	mov    ebx,edx
1000805b:	c1 eb 16             	shr    ebx,0x16
1000805e:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008065:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000806b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008071:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008077:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000807d:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008081:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008088:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000808f:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10008096:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000809d:	31 d8                	xor    eax,ebx
1000809f:	89 c7                	mov    edi,eax
100080a1:	c1 ef 06             	shr    edi,0x6
100080a4:	89 c5                	mov    ebp,eax
100080a6:	c1 ed 0e             	shr    ebp,0xe
100080a9:	89 c3                	mov    ebx,eax
100080ab:	c1 eb 16             	shr    ebx,0x16
100080ae:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100080b5:	81 e6 fc 03 00 00    	and    esi,0x3fc
100080bb:	81 e7 fc 03 00 00    	and    edi,0x3fc
100080c1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100080c7:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100080cd:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100080d1:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100080d8:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100080df:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
100080e6:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100080ed:	31 da                	xor    edx,ebx
100080ef:	89 d7                	mov    edi,edx
100080f1:	c1 ef 06             	shr    edi,0x6
100080f4:	89 d5                	mov    ebp,edx
100080f6:	c1 ed 0e             	shr    ebp,0xe
100080f9:	89 d3                	mov    ebx,edx
100080fb:	c1 eb 16             	shr    ebx,0x16
100080fe:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008105:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000810b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008111:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008117:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000811d:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008121:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008128:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000812f:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10008136:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000813d:	31 d8                	xor    eax,ebx
1000813f:	89 c6                	mov    esi,eax
10008141:	c1 ee 06             	shr    esi,0x6
10008144:	89 c5                	mov    ebp,eax
10008146:	c1 ed 0e             	shr    ebp,0xe
10008149:	89 c3                	mov    ebx,eax
1000814b:	c1 eb 16             	shr    ebx,0x16
1000814e:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008155:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000815b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008161:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008167:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000816d:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008171:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008178:	33 9c 34 58 08 00 00 	xor    ebx,DWORD PTR [esp+esi*1+0x858]
1000817f:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10008186:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
1000818d:	31 da                	xor    edx,ebx
1000818f:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10008196:	89 41 f0             	mov    DWORD PTR [ecx-0x10],eax
10008199:	89 51 f4             	mov    DWORD PTR [ecx-0xc],edx
1000819c:	8b 9c 24 e8 10 00 00 	mov    ebx,DWORD PTR [esp+0x10e8]
100081a3:	33 9c 24 58 10 00 00 	xor    ebx,DWORD PTR [esp+0x1058]
100081aa:	31 d8                	xor    eax,ebx
100081ac:	89 c5                	mov    ebp,eax
100081ae:	c1 ed 06             	shr    ebp,0x6
100081b1:	89 c6                	mov    esi,eax
100081b3:	c1 ee 0e             	shr    esi,0xe
100081b6:	89 c3                	mov    ebx,eax
100081b8:	c1 eb 16             	shr    ebx,0x16
100081bb:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100081c2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100081c8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100081ce:	81 e6 fc 03 00 00    	and    esi,0x3fc
100081d4:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100081da:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100081de:	03 9c 34 58 04 00 00 	add    ebx,DWORD PTR [esp+esi*1+0x458]
100081e5:	33 9c 2c 58 08 00 00 	xor    ebx,DWORD PTR [esp+ebp*1+0x858]
100081ec:	8b b4 24 ec 10 00 00 	mov    esi,DWORD PTR [esp+0x10ec]
100081f3:	33 b4 24 5c 10 00 00 	xor    esi,DWORD PTR [esp+0x105c]
100081fa:	31 f2                	xor    edx,esi
100081fc:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10008203:	89 de                	mov    esi,ebx
10008205:	31 d6                	xor    esi,edx
10008207:	89 f5                	mov    ebp,esi
10008209:	c1 ed 06             	shr    ebp,0x6
1000820c:	89 f3                	mov    ebx,esi
1000820e:	c1 eb 0e             	shr    ebx,0xe
10008211:	89 f2                	mov    edx,esi
10008213:	c1 ea 16             	shr    edx,0x16
10008216:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000821d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008223:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008229:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000822f:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008235:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008239:	03 94 1c 58 04 00 00 	add    edx,DWORD PTR [esp+ebx*1+0x458]
10008240:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
10008247:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
1000824e:	89 d3                	mov    ebx,edx
10008250:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10008257:	31 c3                	xor    ebx,eax
10008259:	89 df                	mov    edi,ebx
1000825b:	c1 ef 06             	shr    edi,0x6
1000825e:	89 dd                	mov    ebp,ebx
10008260:	c1 ed 0e             	shr    ebp,0xe
10008263:	89 da                	mov    edx,ebx
10008265:	c1 ea 16             	shr    edx,0x16
10008268:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
1000826f:	25 fc 03 00 00       	and    eax,0x3fc
10008274:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000827a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008280:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008286:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000828a:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008291:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008298:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
1000829f:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
100082a6:	31 d6                	xor    esi,edx
100082a8:	89 f0                	mov    eax,esi
100082aa:	c1 e8 06             	shr    eax,0x6
100082ad:	89 f5                	mov    ebp,esi
100082af:	c1 ed 0e             	shr    ebp,0xe
100082b2:	89 f2                	mov    edx,esi
100082b4:	c1 ea 16             	shr    edx,0x16
100082b7:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100082be:	81 e7 fc 03 00 00    	and    edi,0x3fc
100082c4:	25 fc 03 00 00       	and    eax,0x3fc
100082c9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100082cf:	81 e2 fc 03 00 00    	and    edx,0x3fc
100082d5:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100082d9:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100082e0:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
100082e7:	33 9c 24 68 10 00 00 	xor    ebx,DWORD PTR [esp+0x1068]
100082ee:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
100082f5:	31 d3                	xor    ebx,edx
100082f7:	89 dd                	mov    ebp,ebx
100082f9:	c1 ed 06             	shr    ebp,0x6
100082fc:	89 da                	mov    edx,ebx
100082fe:	c1 ea 0e             	shr    edx,0xe
10008301:	89 d8                	mov    eax,ebx
10008303:	c1 e8 16             	shr    eax,0x16
10008306:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
1000830d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008313:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008319:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000831f:	25 fc 03 00 00       	and    eax,0x3fc
10008324:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008328:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
1000832f:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10008336:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
1000833d:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008344:	89 c2                	mov    edx,eax
10008346:	31 f2                	xor    edx,esi
10008348:	89 d7                	mov    edi,edx
1000834a:	c1 ef 06             	shr    edi,0x6
1000834d:	89 d5                	mov    ebp,edx
1000834f:	c1 ed 0e             	shr    ebp,0xe
10008352:	89 d0                	mov    eax,edx
10008354:	c1 e8 16             	shr    eax,0x16
10008357:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000835e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008364:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000836a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008370:	25 fc 03 00 00       	and    eax,0x3fc
10008375:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008379:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008380:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008387:	33 9c 24 70 10 00 00 	xor    ebx,DWORD PTR [esp+0x1070]
1000838e:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008395:	31 c3                	xor    ebx,eax
10008397:	89 df                	mov    edi,ebx
10008399:	c1 ef 06             	shr    edi,0x6
1000839c:	89 dd                	mov    ebp,ebx
1000839e:	c1 ed 0e             	shr    ebp,0xe
100083a1:	89 d8                	mov    eax,ebx
100083a3:	c1 e8 16             	shr    eax,0x16
100083a6:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100083ad:	81 e6 fc 03 00 00    	and    esi,0x3fc
100083b3:	81 e7 fc 03 00 00    	and    edi,0x3fc
100083b9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100083bf:	25 fc 03 00 00       	and    eax,0x3fc
100083c4:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100083c8:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100083cf:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100083d6:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
100083dd:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100083e4:	31 c2                	xor    edx,eax
100083e6:	89 d7                	mov    edi,edx
100083e8:	c1 ef 06             	shr    edi,0x6
100083eb:	89 d5                	mov    ebp,edx
100083ed:	c1 ed 0e             	shr    ebp,0xe
100083f0:	89 d0                	mov    eax,edx
100083f2:	c1 e8 16             	shr    eax,0x16
100083f5:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100083fc:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008402:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008408:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000840e:	25 fc 03 00 00       	and    eax,0x3fc
10008413:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008417:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000841e:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008425:	33 9c 24 78 10 00 00 	xor    ebx,DWORD PTR [esp+0x1078]
1000842c:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008433:	31 c3                	xor    ebx,eax
10008435:	89 df                	mov    edi,ebx
10008437:	c1 ef 06             	shr    edi,0x6
1000843a:	89 dd                	mov    ebp,ebx
1000843c:	c1 ed 0e             	shr    ebp,0xe
1000843f:	89 d8                	mov    eax,ebx
10008441:	c1 e8 16             	shr    eax,0x16
10008444:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
1000844b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008451:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008457:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000845d:	25 fc 03 00 00       	and    eax,0x3fc
10008462:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008466:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000846d:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008474:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
1000847b:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008482:	31 c2                	xor    edx,eax
10008484:	89 d7                	mov    edi,edx
10008486:	c1 ef 06             	shr    edi,0x6
10008489:	89 d5                	mov    ebp,edx
1000848b:	c1 ed 0e             	shr    ebp,0xe
1000848e:	89 d0                	mov    eax,edx
10008490:	c1 e8 16             	shr    eax,0x16
10008493:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000849a:	81 e6 fc 03 00 00    	and    esi,0x3fc
100084a0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100084a6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100084ac:	25 fc 03 00 00       	and    eax,0x3fc
100084b1:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100084b5:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100084bc:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100084c3:	33 9c 24 80 10 00 00 	xor    ebx,DWORD PTR [esp+0x1080]
100084ca:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100084d1:	31 c3                	xor    ebx,eax
100084d3:	89 df                	mov    edi,ebx
100084d5:	c1 ef 06             	shr    edi,0x6
100084d8:	89 dd                	mov    ebp,ebx
100084da:	c1 ed 0e             	shr    ebp,0xe
100084dd:	89 d8                	mov    eax,ebx
100084df:	c1 e8 16             	shr    eax,0x16
100084e2:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100084e9:	81 e6 fc 03 00 00    	and    esi,0x3fc
100084ef:	81 e7 fc 03 00 00    	and    edi,0x3fc
100084f5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100084fb:	25 fc 03 00 00       	and    eax,0x3fc
10008500:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008504:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000850b:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008512:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10008519:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008520:	31 d0                	xor    eax,edx
10008522:	89 c7                	mov    edi,eax
10008524:	c1 ef 06             	shr    edi,0x6
10008527:	89 c5                	mov    ebp,eax
10008529:	c1 ed 0e             	shr    ebp,0xe
1000852c:	89 c2                	mov    edx,eax
1000852e:	c1 ea 16             	shr    edx,0x16
10008531:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008538:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000853e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008544:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000854a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008550:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008554:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000855b:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008562:	33 9c 24 88 10 00 00 	xor    ebx,DWORD PTR [esp+0x1088]
10008569:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008570:	31 d3                	xor    ebx,edx
10008572:	89 df                	mov    edi,ebx
10008574:	c1 ef 06             	shr    edi,0x6
10008577:	89 dd                	mov    ebp,ebx
10008579:	c1 ed 0e             	shr    ebp,0xe
1000857c:	89 da                	mov    edx,ebx
1000857e:	c1 ea 16             	shr    edx,0x16
10008581:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10008588:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000858e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008594:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000859a:	81 e2 fc 03 00 00    	and    edx,0x3fc
100085a0:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100085a4:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100085ab:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100085b2:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
100085b9:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100085c0:	31 d0                	xor    eax,edx
100085c2:	89 c7                	mov    edi,eax
100085c4:	c1 ef 06             	shr    edi,0x6
100085c7:	89 c5                	mov    ebp,eax
100085c9:	c1 ed 0e             	shr    ebp,0xe
100085cc:	89 c2                	mov    edx,eax
100085ce:	c1 ea 16             	shr    edx,0x16
100085d1:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100085d8:	81 e6 fc 03 00 00    	and    esi,0x3fc
100085de:	81 e7 fc 03 00 00    	and    edi,0x3fc
100085e4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100085ea:	81 e2 fc 03 00 00    	and    edx,0x3fc
100085f0:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100085f4:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100085fb:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008602:	33 9c 24 90 10 00 00 	xor    ebx,DWORD PTR [esp+0x1090]
10008609:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008610:	31 d3                	xor    ebx,edx
10008612:	89 df                	mov    edi,ebx
10008614:	c1 ef 06             	shr    edi,0x6
10008617:	89 dd                	mov    ebp,ebx
10008619:	c1 ed 0e             	shr    ebp,0xe
1000861c:	89 da                	mov    edx,ebx
1000861e:	c1 ea 16             	shr    edx,0x16
10008621:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10008628:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000862e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008634:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000863a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008640:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008644:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000864b:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008652:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10008659:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008660:	31 d0                	xor    eax,edx
10008662:	89 c7                	mov    edi,eax
10008664:	c1 ef 06             	shr    edi,0x6
10008667:	89 c5                	mov    ebp,eax
10008669:	c1 ed 0e             	shr    ebp,0xe
1000866c:	89 c2                	mov    edx,eax
1000866e:	c1 ea 16             	shr    edx,0x16
10008671:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008678:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000867e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008684:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000868a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008690:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008694:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000869b:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100086a2:	33 9c 24 98 10 00 00 	xor    ebx,DWORD PTR [esp+0x1098]
100086a9:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100086b0:	31 d3                	xor    ebx,edx
100086b2:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
100086b9:	89 41 f8             	mov    DWORD PTR [ecx-0x8],eax
100086bc:	89 59 fc             	mov    DWORD PTR [ecx-0x4],ebx
100086bf:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
100086c6:	39 d1                	cmp    ecx,edx
100086c8:	0f 85 a4 f5 ff ff    	jne    10007c72 <_crypt_blowfish_rn+0x695>
100086ce:	8b 84 24 a0 10 00 00 	mov    eax,DWORD PTR [esp+0x10a0]
100086d5:	31 84 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],eax
100086dc:	8b 84 24 a4 10 00 00 	mov    eax,DWORD PTR [esp+0x10a4]
100086e3:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
100086ea:	8b 84 24 a8 10 00 00 	mov    eax,DWORD PTR [esp+0x10a8]
100086f1:	31 84 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],eax
100086f8:	8b 84 24 ac 10 00 00 	mov    eax,DWORD PTR [esp+0x10ac]
100086ff:	31 84 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],eax
10008706:	8b 84 24 b0 10 00 00 	mov    eax,DWORD PTR [esp+0x10b0]
1000870d:	31 84 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],eax
10008714:	8b 84 24 b4 10 00 00 	mov    eax,DWORD PTR [esp+0x10b4]
1000871b:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
10008722:	8b 84 24 b8 10 00 00 	mov    eax,DWORD PTR [esp+0x10b8]
10008729:	31 84 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],eax
10008730:	8b 84 24 bc 10 00 00 	mov    eax,DWORD PTR [esp+0x10bc]
10008737:	31 84 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],eax
1000873e:	8b 84 24 c0 10 00 00 	mov    eax,DWORD PTR [esp+0x10c0]
10008745:	31 84 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],eax
1000874c:	8b 84 24 c4 10 00 00 	mov    eax,DWORD PTR [esp+0x10c4]
10008753:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
1000875a:	8b 84 24 c8 10 00 00 	mov    eax,DWORD PTR [esp+0x10c8]
10008761:	31 84 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],eax
10008768:	8b 84 24 cc 10 00 00 	mov    eax,DWORD PTR [esp+0x10cc]
1000876f:	31 84 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],eax
10008776:	8b 84 24 d0 10 00 00 	mov    eax,DWORD PTR [esp+0x10d0]
1000877d:	31 84 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],eax
10008784:	8b 84 24 d4 10 00 00 	mov    eax,DWORD PTR [esp+0x10d4]
1000878b:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
10008792:	8b 84 24 d8 10 00 00 	mov    eax,DWORD PTR [esp+0x10d8]
10008799:	31 84 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],eax
100087a0:	8b 84 24 dc 10 00 00 	mov    eax,DWORD PTR [esp+0x10dc]
100087a7:	31 84 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],eax
100087ae:	8b 84 24 e0 10 00 00 	mov    eax,DWORD PTR [esp+0x10e0]
100087b5:	31 84 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],eax
100087bc:	8b 84 24 e4 10 00 00 	mov    eax,DWORD PTR [esp+0x10e4]
100087c3:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
100087ca:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
100087d1:	b9 00 00 00 00       	mov    ecx,0x0
100087d6:	b8 00 00 00 00       	mov    eax,0x0
100087db:	83 c3 08             	add    ebx,0x8
100087de:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
100087e5:	89 c7                	mov    edi,eax
100087e7:	c1 ef 06             	shr    edi,0x6
100087ea:	89 c5                	mov    ebp,eax
100087ec:	c1 ed 0e             	shr    ebp,0xe
100087ef:	89 c2                	mov    edx,eax
100087f1:	c1 ea 16             	shr    edx,0x16
100087f4:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100087fb:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008801:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008807:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000880d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008813:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008817:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000881e:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008825:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000882c:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10008833:	31 ca                	xor    edx,ecx
10008835:	89 d5                	mov    ebp,edx
10008837:	c1 ed 06             	shr    ebp,0x6
1000883a:	89 d6                	mov    esi,edx
1000883c:	c1 ee 0e             	shr    esi,0xe
1000883f:	89 d1                	mov    ecx,edx
10008841:	c1 e9 16             	shr    ecx,0x16
10008844:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
1000884b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008851:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008857:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000885d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008863:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008867:	03 8c 34 58 04 00 00 	add    ecx,DWORD PTR [esp+esi*1+0x458]
1000886e:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10008875:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
1000887c:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
10008883:	31 c8                	xor    eax,ecx
10008885:	89 c7                	mov    edi,eax
10008887:	c1 ef 06             	shr    edi,0x6
1000888a:	89 c5                	mov    ebp,eax
1000888c:	c1 ed 0e             	shr    ebp,0xe
1000888f:	89 c1                	mov    ecx,eax
10008891:	c1 e9 16             	shr    ecx,0x16
10008894:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000889b:	81 e6 fc 03 00 00    	and    esi,0x3fc
100088a1:	81 e7 fc 03 00 00    	and    edi,0x3fc
100088a7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100088ad:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100088b3:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100088b7:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100088be:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100088c5:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
100088cc:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100088d3:	31 d1                	xor    ecx,edx
100088d5:	89 cd                	mov    ebp,ecx
100088d7:	c1 ed 06             	shr    ebp,0x6
100088da:	89 ce                	mov    esi,ecx
100088dc:	c1 ee 0e             	shr    esi,0xe
100088df:	89 ca                	mov    edx,ecx
100088e1:	c1 ea 16             	shr    edx,0x16
100088e4:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100088eb:	81 e7 fc 03 00 00    	and    edi,0x3fc
100088f1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100088f7:	81 e6 fc 03 00 00    	and    esi,0x3fc
100088fd:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008903:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008907:	03 94 34 58 04 00 00 	add    edx,DWORD PTR [esp+esi*1+0x458]
1000890e:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
10008915:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
1000891c:	89 d6                	mov    esi,edx
1000891e:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10008925:	31 c6                	xor    esi,eax
10008927:	89 f2                	mov    edx,esi
10008929:	c1 ea 06             	shr    edx,0x6
1000892c:	89 f5                	mov    ebp,esi
1000892e:	c1 ed 0e             	shr    ebp,0xe
10008931:	89 f0                	mov    eax,esi
10008933:	c1 e8 16             	shr    eax,0x16
10008936:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000893d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008943:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008949:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000894f:	25 fc 03 00 00       	and    eax,0x3fc
10008954:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008958:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000895f:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10008966:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
1000896d:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008974:	31 c8                	xor    eax,ecx
10008976:	89 c7                	mov    edi,eax
10008978:	c1 ef 06             	shr    edi,0x6
1000897b:	89 c5                	mov    ebp,eax
1000897d:	c1 ed 0e             	shr    ebp,0xe
10008980:	89 c2                	mov    edx,eax
10008982:	c1 ea 16             	shr    edx,0x16
10008985:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000898c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008992:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008998:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000899e:	81 e2 fc 03 00 00    	and    edx,0x3fc
100089a4:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100089a8:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100089af:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100089b6:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
100089bd:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100089c4:	31 f2                	xor    edx,esi
100089c6:	89 d7                	mov    edi,edx
100089c8:	c1 ef 06             	shr    edi,0x6
100089cb:	89 d5                	mov    ebp,edx
100089cd:	c1 ed 0e             	shr    ebp,0xe
100089d0:	89 d1                	mov    ecx,edx
100089d2:	c1 e9 16             	shr    ecx,0x16
100089d5:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100089dc:	81 e6 fc 03 00 00    	and    esi,0x3fc
100089e2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100089e8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100089ee:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100089f4:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100089f8:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100089ff:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008a06:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10008a0d:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008a14:	31 c8                	xor    eax,ecx
10008a16:	89 c7                	mov    edi,eax
10008a18:	c1 ef 06             	shr    edi,0x6
10008a1b:	89 c5                	mov    ebp,eax
10008a1d:	c1 ed 0e             	shr    ebp,0xe
10008a20:	89 c1                	mov    ecx,eax
10008a22:	c1 e9 16             	shr    ecx,0x16
10008a25:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008a2c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008a32:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a38:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a3e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008a44:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008a48:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008a4f:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008a56:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10008a5d:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008a64:	31 ca                	xor    edx,ecx
10008a66:	89 d7                	mov    edi,edx
10008a68:	c1 ef 06             	shr    edi,0x6
10008a6b:	89 d5                	mov    ebp,edx
10008a6d:	c1 ed 0e             	shr    ebp,0xe
10008a70:	89 d1                	mov    ecx,edx
10008a72:	c1 e9 16             	shr    ecx,0x16
10008a75:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008a7c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008a82:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a88:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a8e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008a94:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008a98:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008a9f:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008aa6:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10008aad:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008ab4:	31 c8                	xor    eax,ecx
10008ab6:	89 c7                	mov    edi,eax
10008ab8:	c1 ef 06             	shr    edi,0x6
10008abb:	89 c5                	mov    ebp,eax
10008abd:	c1 ed 0e             	shr    ebp,0xe
10008ac0:	89 c1                	mov    ecx,eax
10008ac2:	c1 e9 16             	shr    ecx,0x16
10008ac5:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008acc:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008ad2:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008ad8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ade:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008ae4:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008ae8:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008aef:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008af6:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10008afd:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008b04:	31 ca                	xor    edx,ecx
10008b06:	89 d7                	mov    edi,edx
10008b08:	c1 ef 06             	shr    edi,0x6
10008b0b:	89 d5                	mov    ebp,edx
10008b0d:	c1 ed 0e             	shr    ebp,0xe
10008b10:	89 d1                	mov    ecx,edx
10008b12:	c1 e9 16             	shr    ecx,0x16
10008b15:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008b1c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008b22:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b28:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b2e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008b34:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008b38:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008b3f:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008b46:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10008b4d:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008b54:	31 c8                	xor    eax,ecx
10008b56:	89 c7                	mov    edi,eax
10008b58:	c1 ef 06             	shr    edi,0x6
10008b5b:	89 c5                	mov    ebp,eax
10008b5d:	c1 ed 0e             	shr    ebp,0xe
10008b60:	89 c1                	mov    ecx,eax
10008b62:	c1 e9 16             	shr    ecx,0x16
10008b65:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008b6c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008b72:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b78:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b7e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008b84:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008b88:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008b8f:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008b96:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10008b9d:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008ba4:	31 ca                	xor    edx,ecx
10008ba6:	89 d7                	mov    edi,edx
10008ba8:	c1 ef 06             	shr    edi,0x6
10008bab:	89 d5                	mov    ebp,edx
10008bad:	c1 ed 0e             	shr    ebp,0xe
10008bb0:	89 d1                	mov    ecx,edx
10008bb2:	c1 e9 16             	shr    ecx,0x16
10008bb5:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008bbc:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008bc2:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008bc8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008bce:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008bd4:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008bd8:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008bdf:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008be6:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10008bed:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008bf4:	31 c8                	xor    eax,ecx
10008bf6:	89 c7                	mov    edi,eax
10008bf8:	c1 ef 06             	shr    edi,0x6
10008bfb:	89 c5                	mov    ebp,eax
10008bfd:	c1 ed 0e             	shr    ebp,0xe
10008c00:	89 c1                	mov    ecx,eax
10008c02:	c1 e9 16             	shr    ecx,0x16
10008c05:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008c0c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008c12:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c18:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c1e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008c24:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008c28:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008c2f:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008c36:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10008c3d:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008c44:	31 ca                	xor    edx,ecx
10008c46:	89 d7                	mov    edi,edx
10008c48:	c1 ef 06             	shr    edi,0x6
10008c4b:	89 d5                	mov    ebp,edx
10008c4d:	c1 ed 0e             	shr    ebp,0xe
10008c50:	89 d6                	mov    esi,edx
10008c52:	c1 ee 16             	shr    esi,0x16
10008c55:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10008c5c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008c62:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c68:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c6e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008c74:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008c78:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10008c7f:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10008c86:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10008c8d:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10008c94:	31 f0                	xor    eax,esi
10008c96:	89 c5                	mov    ebp,eax
10008c98:	c1 ed 06             	shr    ebp,0x6
10008c9b:	89 c1                	mov    ecx,eax
10008c9d:	c1 e9 0e             	shr    ecx,0xe
10008ca0:	89 c6                	mov    esi,eax
10008ca2:	c1 ee 16             	shr    esi,0x16
10008ca5:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008cac:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008cb2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008cb8:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008cbe:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008cc4:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008cc8:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
10008ccf:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10008cd6:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10008cdd:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10008ce4:	89 f1                	mov    ecx,esi
10008ce6:	31 d1                	xor    ecx,edx
10008ce8:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10008cef:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10008cf2:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
10008cf5:	8d b4 24 a0 10 00 00 	lea    esi,[esp+0x10a0]
10008cfc:	39 f3                	cmp    ebx,esi
10008cfe:	0f 85 d7 fa ff ff    	jne    100087db <_crypt_blowfish_rn+0x11fe>
10008d04:	8d 5c 24 58          	lea    ebx,[esp+0x58]
10008d08:	83 c3 08             	add    ebx,0x8
10008d0b:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10008d12:	89 c7                	mov    edi,eax
10008d14:	c1 ef 06             	shr    edi,0x6
10008d17:	89 c5                	mov    ebp,eax
10008d19:	c1 ed 0e             	shr    ebp,0xe
10008d1c:	89 c2                	mov    edx,eax
10008d1e:	c1 ea 16             	shr    edx,0x16
10008d21:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008d28:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008d2e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d34:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d3a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008d40:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008d44:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008d4b:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008d52:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008d59:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10008d60:	31 ca                	xor    edx,ecx
10008d62:	89 d7                	mov    edi,edx
10008d64:	c1 ef 06             	shr    edi,0x6
10008d67:	89 d5                	mov    ebp,edx
10008d69:	c1 ed 0e             	shr    ebp,0xe
10008d6c:	89 d1                	mov    ecx,edx
10008d6e:	c1 e9 16             	shr    ecx,0x16
10008d71:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008d78:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008d7e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d84:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d8a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008d90:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008d94:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008d9b:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008da2:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10008da9:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008db0:	31 c1                	xor    ecx,eax
10008db2:	89 cd                	mov    ebp,ecx
10008db4:	c1 ed 06             	shr    ebp,0x6
10008db7:	89 c8                	mov    eax,ecx
10008db9:	c1 e8 0e             	shr    eax,0xe
10008dbc:	89 ce                	mov    esi,ecx
10008dbe:	c1 ee 16             	shr    esi,0x16
10008dc1:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10008dc8:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008dce:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008dd4:	25 fc 03 00 00       	and    eax,0x3fc
10008dd9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008ddf:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008de3:	03 b4 04 58 04 00 00 	add    esi,DWORD PTR [esp+eax*1+0x458]
10008dea:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10008df1:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10008df8:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10008dff:	31 d6                	xor    esi,edx
10008e01:	89 f5                	mov    ebp,esi
10008e03:	c1 ed 06             	shr    ebp,0x6
10008e06:	89 f2                	mov    edx,esi
10008e08:	c1 ea 0e             	shr    edx,0xe
10008e0b:	89 f0                	mov    eax,esi
10008e0d:	c1 e8 16             	shr    eax,0x16
10008e10:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008e17:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e1d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e23:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008e29:	25 fc 03 00 00       	and    eax,0x3fc
10008e2e:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008e32:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10008e39:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10008e40:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
10008e47:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008e4e:	31 c1                	xor    ecx,eax
10008e50:	89 ca                	mov    edx,ecx
10008e52:	c1 ea 06             	shr    edx,0x6
10008e55:	89 cd                	mov    ebp,ecx
10008e57:	c1 ed 0e             	shr    ebp,0xe
10008e5a:	89 c8                	mov    eax,ecx
10008e5c:	c1 e8 16             	shr    eax,0x16
10008e5f:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10008e66:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e6c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008e72:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e78:	25 fc 03 00 00       	and    eax,0x3fc
10008e7d:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008e81:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008e88:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10008e8f:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
10008e96:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008e9d:	31 f0                	xor    eax,esi
10008e9f:	89 c7                	mov    edi,eax
10008ea1:	c1 ef 06             	shr    edi,0x6
10008ea4:	89 c5                	mov    ebp,eax
10008ea6:	c1 ed 0e             	shr    ebp,0xe
10008ea9:	89 c2                	mov    edx,eax
10008eab:	c1 ea 16             	shr    edx,0x16
10008eae:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008eb5:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008ebb:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008ec1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ec7:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008ecd:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008ed1:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008ed8:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008edf:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
10008ee6:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008eed:	31 ca                	xor    edx,ecx
10008eef:	89 d7                	mov    edi,edx
10008ef1:	c1 ef 06             	shr    edi,0x6
10008ef4:	89 d5                	mov    ebp,edx
10008ef6:	c1 ed 0e             	shr    ebp,0xe
10008ef9:	89 d1                	mov    ecx,edx
10008efb:	c1 e9 16             	shr    ecx,0x16
10008efe:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008f05:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008f0b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f11:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f17:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008f1d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008f21:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008f28:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008f2f:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10008f36:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008f3d:	31 c8                	xor    eax,ecx
10008f3f:	89 c7                	mov    edi,eax
10008f41:	c1 ef 06             	shr    edi,0x6
10008f44:	89 c5                	mov    ebp,eax
10008f46:	c1 ed 0e             	shr    ebp,0xe
10008f49:	89 c1                	mov    ecx,eax
10008f4b:	c1 e9 16             	shr    ecx,0x16
10008f4e:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008f55:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008f5b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f61:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f67:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008f6d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008f71:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008f78:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008f7f:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10008f86:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008f8d:	31 ca                	xor    edx,ecx
10008f8f:	89 d7                	mov    edi,edx
10008f91:	c1 ef 06             	shr    edi,0x6
10008f94:	89 d5                	mov    ebp,edx
10008f96:	c1 ed 0e             	shr    ebp,0xe
10008f99:	89 d1                	mov    ecx,edx
10008f9b:	c1 e9 16             	shr    ecx,0x16
10008f9e:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008fa5:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008fab:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008fb1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008fb7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008fbd:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008fc1:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008fc8:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008fcf:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10008fd6:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008fdd:	31 c8                	xor    eax,ecx
10008fdf:	89 c7                	mov    edi,eax
10008fe1:	c1 ef 06             	shr    edi,0x6
10008fe4:	89 c5                	mov    ebp,eax
10008fe6:	c1 ed 0e             	shr    ebp,0xe
10008fe9:	89 c1                	mov    ecx,eax
10008feb:	c1 e9 16             	shr    ecx,0x16
10008fee:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008ff5:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008ffb:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009001:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009007:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000900d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009011:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009018:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000901f:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10009026:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000902d:	31 ca                	xor    edx,ecx
1000902f:	89 d7                	mov    edi,edx
10009031:	c1 ef 06             	shr    edi,0x6
10009034:	89 d5                	mov    ebp,edx
10009036:	c1 ed 0e             	shr    ebp,0xe
10009039:	89 d1                	mov    ecx,edx
1000903b:	c1 e9 16             	shr    ecx,0x16
1000903e:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009045:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000904b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009051:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009057:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000905d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009061:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009068:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000906f:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10009076:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000907d:	31 c8                	xor    eax,ecx
1000907f:	89 c7                	mov    edi,eax
10009081:	c1 ef 06             	shr    edi,0x6
10009084:	89 c5                	mov    ebp,eax
10009086:	c1 ed 0e             	shr    ebp,0xe
10009089:	89 c1                	mov    ecx,eax
1000908b:	c1 e9 16             	shr    ecx,0x16
1000908e:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009095:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000909b:	81 e7 fc 03 00 00    	and    edi,0x3fc
100090a1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100090a7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100090ad:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100090b1:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100090b8:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100090bf:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
100090c6:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100090cd:	31 ca                	xor    edx,ecx
100090cf:	89 d7                	mov    edi,edx
100090d1:	c1 ef 06             	shr    edi,0x6
100090d4:	89 d5                	mov    ebp,edx
100090d6:	c1 ed 0e             	shr    ebp,0xe
100090d9:	89 d1                	mov    ecx,edx
100090db:	c1 e9 16             	shr    ecx,0x16
100090de:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100090e5:	81 e6 fc 03 00 00    	and    esi,0x3fc
100090eb:	81 e7 fc 03 00 00    	and    edi,0x3fc
100090f1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100090f7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100090fd:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009101:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009108:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000910f:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10009116:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000911d:	31 c8                	xor    eax,ecx
1000911f:	89 c7                	mov    edi,eax
10009121:	c1 ef 06             	shr    edi,0x6
10009124:	89 c5                	mov    ebp,eax
10009126:	c1 ed 0e             	shr    ebp,0xe
10009129:	89 c1                	mov    ecx,eax
1000912b:	c1 e9 16             	shr    ecx,0x16
1000912e:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009135:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000913b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009141:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009147:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000914d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009151:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009158:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000915f:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10009166:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000916d:	31 ca                	xor    edx,ecx
1000916f:	89 d7                	mov    edi,edx
10009171:	c1 ef 06             	shr    edi,0x6
10009174:	89 d5                	mov    ebp,edx
10009176:	c1 ed 0e             	shr    ebp,0xe
10009179:	89 d6                	mov    esi,edx
1000917b:	c1 ee 16             	shr    esi,0x16
1000917e:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10009185:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000918b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009191:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009197:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000919d:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
100091a1:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
100091a8:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
100091af:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
100091b6:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
100091bd:	31 f0                	xor    eax,esi
100091bf:	89 c5                	mov    ebp,eax
100091c1:	c1 ed 06             	shr    ebp,0x6
100091c4:	89 c1                	mov    ecx,eax
100091c6:	c1 e9 0e             	shr    ecx,0xe
100091c9:	89 c6                	mov    esi,eax
100091cb:	c1 ee 16             	shr    esi,0x16
100091ce:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100091d5:	81 e7 fc 03 00 00    	and    edi,0x3fc
100091db:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100091e1:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100091e7:	81 e6 fc 03 00 00    	and    esi,0x3fc
100091ed:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
100091f1:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
100091f8:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
100091ff:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10009206:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
1000920d:	89 f1                	mov    ecx,esi
1000920f:	31 d1                	xor    ecx,edx
10009211:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10009218:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
1000921b:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
1000921e:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10009225:	39 d3                	cmp    ebx,edx
10009227:	0f 85 db fa ff ff    	jne    10008d08 <_crypt_blowfish_rn+0x172b>
1000922d:	8b 94 24 e8 10 00 00 	mov    edx,DWORD PTR [esp+0x10e8]
10009234:	8b 84 24 ec 10 00 00 	mov    eax,DWORD PTR [esp+0x10ec]
1000923b:	8b 9c 24 f0 10 00 00 	mov    ebx,DWORD PTR [esp+0x10f0]
10009242:	8b 8c 24 f4 10 00 00 	mov    ecx,DWORD PTR [esp+0x10f4]
10009249:	31 94 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],edx
10009250:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
10009257:	31 9c 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],ebx
1000925e:	31 8c 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],ecx
10009265:	31 94 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],edx
1000926c:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
10009273:	31 9c 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],ebx
1000927a:	31 8c 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],ecx
10009281:	31 94 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],edx
10009288:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
1000928f:	31 9c 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],ebx
10009296:	31 8c 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],ecx
1000929d:	31 94 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],edx
100092a4:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
100092ab:	31 9c 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],ebx
100092b2:	31 8c 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],ecx
100092b9:	31 94 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],edx
100092c0:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
100092c7:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
100092ce:	be 00 00 00 00       	mov    esi,0x0
100092d3:	b8 00 00 00 00       	mov    eax,0x0
100092d8:	83 c3 08             	add    ebx,0x8
100092db:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
100092e2:	89 c7                	mov    edi,eax
100092e4:	c1 ef 06             	shr    edi,0x6
100092e7:	89 c5                	mov    ebp,eax
100092e9:	c1 ed 0e             	shr    ebp,0xe
100092ec:	89 c2                	mov    edx,eax
100092ee:	c1 ea 16             	shr    edx,0x16
100092f1:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
100092f8:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100092fe:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009304:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000930a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009310:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009314:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000931b:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009322:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009329:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10009330:	31 d6                	xor    esi,edx
10009332:	89 f7                	mov    edi,esi
10009334:	c1 ef 06             	shr    edi,0x6
10009337:	89 f5                	mov    ebp,esi
10009339:	c1 ed 0e             	shr    ebp,0xe
1000933c:	89 f1                	mov    ecx,esi
1000933e:	c1 e9 16             	shr    ecx,0x16
10009341:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009348:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000934e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009354:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000935a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009360:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009364:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000936b:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009372:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10009379:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009380:	31 c8                	xor    eax,ecx
10009382:	89 c5                	mov    ebp,eax
10009384:	c1 ed 06             	shr    ebp,0x6
10009387:	89 c2                	mov    edx,eax
10009389:	c1 ea 0e             	shr    edx,0xe
1000938c:	89 c1                	mov    ecx,eax
1000938e:	c1 e9 16             	shr    ecx,0x16
10009391:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10009398:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000939e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100093a4:	81 e2 fc 03 00 00    	and    edx,0x3fc
100093aa:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100093b0:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100093b4:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
100093bb:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
100093c2:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
100093c9:	89 ca                	mov    edx,ecx
100093cb:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
100093d2:	31 d6                	xor    esi,edx
100093d4:	89 f7                	mov    edi,esi
100093d6:	c1 ef 06             	shr    edi,0x6
100093d9:	89 f5                	mov    ebp,esi
100093db:	c1 ed 0e             	shr    ebp,0xe
100093de:	89 f1                	mov    ecx,esi
100093e0:	c1 e9 16             	shr    ecx,0x16
100093e3:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
100093ea:	81 e2 fc 03 00 00    	and    edx,0x3fc
100093f0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100093f6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100093fc:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009402:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009406:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000940d:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009414:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
1000941b:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009422:	31 c1                	xor    ecx,eax
10009424:	89 cd                	mov    ebp,ecx
10009426:	c1 ed 06             	shr    ebp,0x6
10009429:	89 ca                	mov    edx,ecx
1000942b:	c1 ea 0e             	shr    edx,0xe
1000942e:	89 c8                	mov    eax,ecx
10009430:	c1 e8 16             	shr    eax,0x16
10009433:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000943a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009440:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009446:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000944c:	25 fc 03 00 00       	and    eax,0x3fc
10009451:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009455:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
1000945c:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009463:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
1000946a:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009471:	89 c2                	mov    edx,eax
10009473:	31 f2                	xor    edx,esi
10009475:	89 d5                	mov    ebp,edx
10009477:	c1 ed 06             	shr    ebp,0x6
1000947a:	89 d6                	mov    esi,edx
1000947c:	c1 ee 0e             	shr    esi,0xe
1000947f:	89 d0                	mov    eax,edx
10009481:	c1 e8 16             	shr    eax,0x16
10009484:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
1000948b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009491:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009497:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000949d:	25 fc 03 00 00       	and    eax,0x3fc
100094a2:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100094a6:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
100094ad:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
100094b4:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
100094bb:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100094c2:	89 c6                	mov    esi,eax
100094c4:	31 ce                	xor    esi,ecx
100094c6:	89 f7                	mov    edi,esi
100094c8:	c1 ef 06             	shr    edi,0x6
100094cb:	89 f5                	mov    ebp,esi
100094cd:	c1 ed 0e             	shr    ebp,0xe
100094d0:	89 f0                	mov    eax,esi
100094d2:	c1 e8 16             	shr    eax,0x16
100094d5:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
100094dc:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100094e2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100094e8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100094ee:	25 fc 03 00 00       	and    eax,0x3fc
100094f3:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100094f7:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100094fe:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10009505:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
1000950c:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10009513:	31 c2                	xor    edx,eax
10009515:	89 d7                	mov    edi,edx
10009517:	c1 ef 06             	shr    edi,0x6
1000951a:	89 d5                	mov    ebp,edx
1000951c:	c1 ed 0e             	shr    ebp,0xe
1000951f:	89 d0                	mov    eax,edx
10009521:	c1 e8 16             	shr    eax,0x16
10009524:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000952b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009531:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009537:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000953d:	25 fc 03 00 00       	and    eax,0x3fc
10009542:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009546:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000954d:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10009554:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
1000955b:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10009562:	31 c6                	xor    esi,eax
10009564:	89 f7                	mov    edi,esi
10009566:	c1 ef 06             	shr    edi,0x6
10009569:	89 f5                	mov    ebp,esi
1000956b:	c1 ed 0e             	shr    ebp,0xe
1000956e:	89 f0                	mov    eax,esi
10009570:	c1 e8 16             	shr    eax,0x16
10009573:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
1000957a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009580:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009586:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000958c:	25 fc 03 00 00       	and    eax,0x3fc
10009591:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009595:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000959c:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100095a3:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
100095aa:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
100095b1:	31 c2                	xor    edx,eax
100095b3:	89 d7                	mov    edi,edx
100095b5:	c1 ef 06             	shr    edi,0x6
100095b8:	89 d5                	mov    ebp,edx
100095ba:	c1 ed 0e             	shr    ebp,0xe
100095bd:	89 d0                	mov    eax,edx
100095bf:	c1 e8 16             	shr    eax,0x16
100095c2:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
100095c9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100095cf:	81 e7 fc 03 00 00    	and    edi,0x3fc
100095d5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100095db:	25 fc 03 00 00       	and    eax,0x3fc
100095e0:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100095e4:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100095eb:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100095f2:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
100095f9:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10009600:	31 c6                	xor    esi,eax
10009602:	89 f7                	mov    edi,esi
10009604:	c1 ef 06             	shr    edi,0x6
10009607:	89 f5                	mov    ebp,esi
10009609:	c1 ed 0e             	shr    ebp,0xe
1000960c:	89 f0                	mov    eax,esi
1000960e:	c1 e8 16             	shr    eax,0x16
10009611:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10009618:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000961e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009624:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000962a:	25 fc 03 00 00       	and    eax,0x3fc
1000962f:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009633:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000963a:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10009641:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10009648:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
1000964f:	31 d0                	xor    eax,edx
10009651:	89 c7                	mov    edi,eax
10009653:	c1 ef 06             	shr    edi,0x6
10009656:	89 c5                	mov    ebp,eax
10009658:	c1 ed 0e             	shr    ebp,0xe
1000965b:	89 c2                	mov    edx,eax
1000965d:	c1 ea 16             	shr    edx,0x16
10009660:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009667:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000966d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009673:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009679:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000967f:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009683:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000968a:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009691:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
10009698:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000969f:	31 d6                	xor    esi,edx
100096a1:	89 f7                	mov    edi,esi
100096a3:	c1 ef 06             	shr    edi,0x6
100096a6:	89 f5                	mov    ebp,esi
100096a8:	c1 ed 0e             	shr    ebp,0xe
100096ab:	89 f2                	mov    edx,esi
100096ad:	c1 ea 16             	shr    edx,0x16
100096b0:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
100096b7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100096bd:	81 e7 fc 03 00 00    	and    edi,0x3fc
100096c3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100096c9:	81 e2 fc 03 00 00    	and    edx,0x3fc
100096cf:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100096d3:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100096da:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100096e1:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
100096e8:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100096ef:	31 d0                	xor    eax,edx
100096f1:	89 c7                	mov    edi,eax
100096f3:	c1 ef 06             	shr    edi,0x6
100096f6:	89 c5                	mov    ebp,eax
100096f8:	c1 ed 0e             	shr    ebp,0xe
100096fb:	89 c2                	mov    edx,eax
100096fd:	c1 ea 16             	shr    edx,0x16
10009700:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009707:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000970d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009713:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009719:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000971f:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009723:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000972a:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009731:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
10009738:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000973f:	31 d6                	xor    esi,edx
10009741:	89 f2                	mov    edx,esi
10009743:	c1 ea 06             	shr    edx,0x6
10009746:	89 f5                	mov    ebp,esi
10009748:	c1 ed 0e             	shr    ebp,0xe
1000974b:	89 f1                	mov    ecx,esi
1000974d:	c1 e9 16             	shr    ecx,0x16
10009750:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009757:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000975d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009763:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009769:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000976f:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009773:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000977a:	33 8c 14 58 08 00 00 	xor    ecx,DWORD PTR [esp+edx*1+0x858]
10009781:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10009788:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
1000978f:	31 c8                	xor    eax,ecx
10009791:	89 c5                	mov    ebp,eax
10009793:	c1 ed 06             	shr    ebp,0x6
10009796:	89 c2                	mov    edx,eax
10009798:	c1 ea 0e             	shr    edx,0xe
1000979b:	89 c1                	mov    ecx,eax
1000979d:	c1 e9 16             	shr    ecx,0x16
100097a0:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100097a7:	81 e7 fc 03 00 00    	and    edi,0x3fc
100097ad:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100097b3:	81 e2 fc 03 00 00    	and    edx,0x3fc
100097b9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100097bf:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100097c3:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
100097ca:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
100097d1:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
100097d8:	89 ca                	mov    edx,ecx
100097da:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
100097e1:	31 d6                	xor    esi,edx
100097e3:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
100097ea:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
100097ed:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
100097f0:	8d bc 24 a0 10 00 00 	lea    edi,[esp+0x10a0]
100097f7:	39 fb                	cmp    ebx,edi
100097f9:	0f 85 d9 fa ff ff    	jne    100092d8 <_crypt_blowfish_rn+0x1cfb>
100097ff:	8d 5c 24 58          	lea    ebx,[esp+0x58]
10009803:	83 c3 08             	add    ebx,0x8
10009806:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
1000980d:	89 c7                	mov    edi,eax
1000980f:	c1 ef 06             	shr    edi,0x6
10009812:	89 c5                	mov    ebp,eax
10009814:	c1 ed 0e             	shr    ebp,0xe
10009817:	89 c2                	mov    edx,eax
10009819:	c1 ea 16             	shr    edx,0x16
1000981c:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009823:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009829:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000982f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009835:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000983b:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000983f:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009846:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000984d:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009854:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
1000985b:	31 f2                	xor    edx,esi
1000985d:	89 d7                	mov    edi,edx
1000985f:	c1 ef 06             	shr    edi,0x6
10009862:	89 d5                	mov    ebp,edx
10009864:	c1 ed 0e             	shr    ebp,0xe
10009867:	89 d6                	mov    esi,edx
10009869:	c1 ee 16             	shr    esi,0x16
1000986c:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10009873:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009879:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000987f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009885:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000988b:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000988f:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10009896:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
1000989d:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
100098a4:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
100098ab:	31 c6                	xor    esi,eax
100098ad:	89 f7                	mov    edi,esi
100098af:	c1 ef 06             	shr    edi,0x6
100098b2:	89 f5                	mov    ebp,esi
100098b4:	c1 ed 0e             	shr    ebp,0xe
100098b7:	89 f1                	mov    ecx,esi
100098b9:	c1 e9 16             	shr    ecx,0x16
100098bc:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
100098c3:	25 fc 03 00 00       	and    eax,0x3fc
100098c8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100098ce:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100098d4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100098da:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100098de:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100098e5:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100098ec:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
100098f3:	03 8c 04 58 0c 00 00 	add    ecx,DWORD PTR [esp+eax*1+0xc58]
100098fa:	31 d1                	xor    ecx,edx
100098fc:	89 c8                	mov    eax,ecx
100098fe:	c1 e8 06             	shr    eax,0x6
10009901:	89 cd                	mov    ebp,ecx
10009903:	c1 ed 0e             	shr    ebp,0xe
10009906:	89 ca                	mov    edx,ecx
10009908:	c1 ea 16             	shr    edx,0x16
1000990b:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009912:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009918:	25 fc 03 00 00       	and    eax,0x3fc
1000991d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009923:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009929:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000992d:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009934:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
1000993b:	33 b4 24 68 10 00 00 	xor    esi,DWORD PTR [esp+0x1068]
10009942:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10009949:	31 d6                	xor    esi,edx
1000994b:	89 f2                	mov    edx,esi
1000994d:	c1 ea 06             	shr    edx,0x6
10009950:	89 f5                	mov    ebp,esi
10009952:	c1 ed 0e             	shr    ebp,0xe
10009955:	89 f0                	mov    eax,esi
10009957:	c1 e8 16             	shr    eax,0x16
1000995a:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009961:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009967:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000996d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009973:	25 fc 03 00 00       	and    eax,0x3fc
10009978:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000997c:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009983:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000998a:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
10009991:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009998:	31 c1                	xor    ecx,eax
1000999a:	89 c8                	mov    eax,ecx
1000999c:	c1 e8 06             	shr    eax,0x6
1000999f:	89 cd                	mov    ebp,ecx
100099a1:	c1 ed 0e             	shr    ebp,0xe
100099a4:	89 ca                	mov    edx,ecx
100099a6:	c1 ea 16             	shr    edx,0x16
100099a9:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100099b0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100099b6:	25 fc 03 00 00       	and    eax,0x3fc
100099bb:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100099c1:	81 e2 fc 03 00 00    	and    edx,0x3fc
100099c7:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100099cb:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100099d2:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
100099d9:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
100099e0:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
100099e7:	31 d6                	xor    esi,edx
100099e9:	89 f2                	mov    edx,esi
100099eb:	c1 ea 06             	shr    edx,0x6
100099ee:	89 f5                	mov    ebp,esi
100099f0:	c1 ed 0e             	shr    ebp,0xe
100099f3:	89 f0                	mov    eax,esi
100099f5:	c1 e8 16             	shr    eax,0x16
100099f8:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100099ff:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009a05:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009a0b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009a11:	25 fc 03 00 00       	and    eax,0x3fc
10009a16:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009a1a:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009a21:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10009a28:	33 8c 24 74 10 00 00 	xor    ecx,DWORD PTR [esp+0x1074]
10009a2f:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009a36:	31 c1                	xor    ecx,eax
10009a38:	89 cf                	mov    edi,ecx
10009a3a:	c1 ef 06             	shr    edi,0x6
10009a3d:	89 cd                	mov    ebp,ecx
10009a3f:	c1 ed 0e             	shr    ebp,0xe
10009a42:	89 ca                	mov    edx,ecx
10009a44:	c1 ea 16             	shr    edx,0x16
10009a47:	8d 04 8d 00 00 00 00 	lea    eax,[ecx*4+0x0]
10009a4e:	25 fc 03 00 00       	and    eax,0x3fc
10009a53:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009a59:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009a5f:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009a65:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009a69:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009a70:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009a77:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
10009a7e:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
10009a85:	31 d6                	xor    esi,edx
10009a87:	89 f2                	mov    edx,esi
10009a89:	c1 ea 06             	shr    edx,0x6
10009a8c:	89 f5                	mov    ebp,esi
10009a8e:	c1 ed 0e             	shr    ebp,0xe
10009a91:	89 f0                	mov    eax,esi
10009a93:	c1 e8 16             	shr    eax,0x16
10009a96:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009a9d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009aa3:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009aa9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009aaf:	25 fc 03 00 00       	and    eax,0x3fc
10009ab4:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009ab8:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009abf:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10009ac6:	33 8c 24 7c 10 00 00 	xor    ecx,DWORD PTR [esp+0x107c]
10009acd:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009ad4:	31 c8                	xor    eax,ecx
10009ad6:	89 c7                	mov    edi,eax
10009ad8:	c1 ef 06             	shr    edi,0x6
10009adb:	89 c5                	mov    ebp,eax
10009add:	c1 ed 0e             	shr    ebp,0xe
10009ae0:	89 c2                	mov    edx,eax
10009ae2:	c1 ea 16             	shr    edx,0x16
10009ae5:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009aec:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009af2:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009af8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009afe:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009b04:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009b08:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009b0f:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009b16:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
10009b1d:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009b24:	31 d6                	xor    esi,edx
10009b26:	89 f7                	mov    edi,esi
10009b28:	c1 ef 06             	shr    edi,0x6
10009b2b:	89 f5                	mov    ebp,esi
10009b2d:	c1 ed 0e             	shr    ebp,0xe
10009b30:	89 f1                	mov    ecx,esi
10009b32:	c1 e9 16             	shr    ecx,0x16
10009b35:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009b3c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009b42:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009b48:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009b4e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009b54:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009b58:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009b5f:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009b66:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10009b6d:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009b74:	31 c8                	xor    eax,ecx
10009b76:	89 c7                	mov    edi,eax
10009b78:	c1 ef 06             	shr    edi,0x6
10009b7b:	89 c5                	mov    ebp,eax
10009b7d:	c1 ed 0e             	shr    ebp,0xe
10009b80:	89 c2                	mov    edx,eax
10009b82:	c1 ea 16             	shr    edx,0x16
10009b85:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009b8c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009b92:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009b98:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009b9e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009ba4:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009ba8:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009baf:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009bb6:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
10009bbd:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009bc4:	31 d6                	xor    esi,edx
10009bc6:	89 f7                	mov    edi,esi
10009bc8:	c1 ef 06             	shr    edi,0x6
10009bcb:	89 f5                	mov    ebp,esi
10009bcd:	c1 ed 0e             	shr    ebp,0xe
10009bd0:	89 f1                	mov    ecx,esi
10009bd2:	c1 e9 16             	shr    ecx,0x16
10009bd5:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009bdc:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009be2:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009be8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009bee:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009bf4:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009bf8:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009bff:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009c06:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10009c0d:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009c14:	31 c8                	xor    eax,ecx
10009c16:	89 c7                	mov    edi,eax
10009c18:	c1 ef 06             	shr    edi,0x6
10009c1b:	89 c5                	mov    ebp,eax
10009c1d:	c1 ed 0e             	shr    ebp,0xe
10009c20:	89 c2                	mov    edx,eax
10009c22:	c1 ea 16             	shr    edx,0x16
10009c25:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009c2c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009c32:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009c38:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009c3e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009c44:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009c48:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009c4f:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009c56:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
10009c5d:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009c64:	31 d6                	xor    esi,edx
10009c66:	89 f7                	mov    edi,esi
10009c68:	c1 ef 06             	shr    edi,0x6
10009c6b:	89 f5                	mov    ebp,esi
10009c6d:	c1 ed 0e             	shr    ebp,0xe
10009c70:	89 f1                	mov    ecx,esi
10009c72:	c1 e9 16             	shr    ecx,0x16
10009c75:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009c7c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009c82:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009c88:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009c8e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009c94:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009c98:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009c9f:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009ca6:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10009cad:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009cb4:	31 c8                	xor    eax,ecx
10009cb6:	89 c7                	mov    edi,eax
10009cb8:	c1 ef 06             	shr    edi,0x6
10009cbb:	89 c5                	mov    ebp,eax
10009cbd:	c1 ed 0e             	shr    ebp,0xe
10009cc0:	89 c2                	mov    edx,eax
10009cc2:	c1 ea 16             	shr    edx,0x16
10009cc5:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009ccc:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009cd2:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009cd8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009cde:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009ce4:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009ce8:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009cef:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009cf6:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
10009cfd:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009d04:	31 d6                	xor    esi,edx
10009d06:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10009d0d:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10009d10:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
10009d13:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10009d1a:	39 d3                	cmp    ebx,edx
10009d1c:	0f 85 e1 fa ff ff    	jne    10009803 <_crypt_blowfish_rn+0x2226>
10009d22:	ff 4c 24 04          	dec    DWORD PTR [esp+0x4]
10009d26:	0f 85 a2 e9 ff ff    	jne    100086ce <_crypt_blowfish_rn+0x10f1>
10009d2c:	8b 84 24 58 10 00 00 	mov    eax,DWORD PTR [esp+0x1058]
10009d33:	89 04 24             	mov    DWORD PTR [esp],eax
10009d36:	8b 84 24 5c 10 00 00 	mov    eax,DWORD PTR [esp+0x105c]
10009d3d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10009d41:	8b 84 24 60 10 00 00 	mov    eax,DWORD PTR [esp+0x1060]
10009d48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10009d4c:	8b 84 24 64 10 00 00 	mov    eax,DWORD PTR [esp+0x1064]
10009d53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10009d57:	8b 84 24 68 10 00 00 	mov    eax,DWORD PTR [esp+0x1068]
10009d5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10009d62:	8b 84 24 6c 10 00 00 	mov    eax,DWORD PTR [esp+0x106c]
10009d69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10009d6d:	8b 84 24 70 10 00 00 	mov    eax,DWORD PTR [esp+0x1070]
10009d74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10009d78:	8b 84 24 74 10 00 00 	mov    eax,DWORD PTR [esp+0x1074]
10009d7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10009d83:	8b 84 24 78 10 00 00 	mov    eax,DWORD PTR [esp+0x1078]
10009d8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10009d8e:	8b 84 24 7c 10 00 00 	mov    eax,DWORD PTR [esp+0x107c]
10009d95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10009d99:	8b 84 24 80 10 00 00 	mov    eax,DWORD PTR [esp+0x1080]
10009da0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10009da4:	8b 84 24 84 10 00 00 	mov    eax,DWORD PTR [esp+0x1084]
10009dab:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10009daf:	8b 84 24 88 10 00 00 	mov    eax,DWORD PTR [esp+0x1088]
10009db6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10009dba:	8b 84 24 8c 10 00 00 	mov    eax,DWORD PTR [esp+0x108c]
10009dc1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10009dc5:	8b 84 24 90 10 00 00 	mov    eax,DWORD PTR [esp+0x1090]
10009dcc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10009dd0:	8b 84 24 94 10 00 00 	mov    eax,DWORD PTR [esp+0x1094]
10009dd7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10009ddb:	8b 84 24 98 10 00 00 	mov    eax,DWORD PTR [esp+0x1098]
10009de2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10009de6:	8b 84 24 9c 10 00 00 	mov    eax,DWORD PTR [esp+0x109c]
10009ded:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10009df1:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
10009df5:	89 5c 24 4c          	mov    DWORD PTR [esp+0x4c],ebx
10009df9:	8b 04 9d 20 b4 00 10 	mov    eax,DWORD PTR [ebx*4+0x1000b420]	10009dfc: R_386_32	.data
10009e00:	8b 0c 9d 24 b4 00 10 	mov    ecx,DWORD PTR [ebx*4+0x1000b424]	10009e03: R_386_32	.data
10009e07:	bb 40 00 00 00       	mov    ebx,0x40
10009e0c:	33 04 24             	xor    eax,DWORD PTR [esp]
10009e0f:	89 c7                	mov    edi,eax
10009e11:	c1 ef 06             	shr    edi,0x6
10009e14:	89 c5                	mov    ebp,eax
10009e16:	c1 ed 0e             	shr    ebp,0xe
10009e19:	89 c2                	mov    edx,eax
10009e1b:	c1 ea 16             	shr    edx,0x16
10009e1e:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009e25:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009e2b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009e31:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009e37:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009e3d:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009e41:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009e48:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009e4f:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10009e56:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
10009e5a:	31 ca                	xor    edx,ecx
10009e5c:	89 d7                	mov    edi,edx
10009e5e:	c1 ef 06             	shr    edi,0x6
10009e61:	89 d5                	mov    ebp,edx
10009e63:	c1 ed 0e             	shr    ebp,0xe
10009e66:	89 d1                	mov    ecx,edx
10009e68:	c1 e9 16             	shr    ecx,0x16
10009e6b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009e72:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009e78:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009e7e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009e84:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009e8a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009e8e:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009e95:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009e9c:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
10009ea0:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009ea7:	31 c1                	xor    ecx,eax
10009ea9:	89 cd                	mov    ebp,ecx
10009eab:	c1 ed 06             	shr    ebp,0x6
10009eae:	89 ce                	mov    esi,ecx
10009eb0:	c1 ee 0e             	shr    esi,0xe
10009eb3:	89 c8                	mov    eax,ecx
10009eb5:	c1 e8 16             	shr    eax,0x16
10009eb8:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009ebf:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009ec5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ecb:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009ed1:	25 fc 03 00 00       	and    eax,0x3fc
10009ed6:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009eda:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
10009ee1:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009ee8:	33 54 24 0c          	xor    edx,DWORD PTR [esp+0xc]
10009eec:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009ef3:	89 c6                	mov    esi,eax
10009ef5:	31 d6                	xor    esi,edx
10009ef7:	89 f5                	mov    ebp,esi
10009ef9:	c1 ed 06             	shr    ebp,0x6
10009efc:	89 f2                	mov    edx,esi
10009efe:	c1 ea 0e             	shr    edx,0xe
10009f01:	89 f0                	mov    eax,esi
10009f03:	c1 e8 16             	shr    eax,0x16
10009f06:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009f0d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009f13:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009f19:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009f1f:	25 fc 03 00 00       	and    eax,0x3fc
10009f24:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009f28:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10009f2f:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009f36:	33 4c 24 10          	xor    ecx,DWORD PTR [esp+0x10]
10009f3a:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009f41:	31 c1                	xor    ecx,eax
10009f43:	89 ca                	mov    edx,ecx
10009f45:	c1 ea 06             	shr    edx,0x6
10009f48:	89 cd                	mov    ebp,ecx
10009f4a:	c1 ed 0e             	shr    ebp,0xe
10009f4d:	89 c8                	mov    eax,ecx
10009f4f:	c1 e8 16             	shr    eax,0x16
10009f52:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009f59:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009f5f:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009f65:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009f6b:	25 fc 03 00 00       	and    eax,0x3fc
10009f70:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009f74:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009f7b:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10009f82:	33 74 24 14          	xor    esi,DWORD PTR [esp+0x14]
10009f86:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009f8d:	31 f0                	xor    eax,esi
10009f8f:	89 c7                	mov    edi,eax
10009f91:	c1 ef 06             	shr    edi,0x6
10009f94:	89 c5                	mov    ebp,eax
10009f96:	c1 ed 0e             	shr    ebp,0xe
10009f99:	89 c2                	mov    edx,eax
10009f9b:	c1 ea 16             	shr    edx,0x16
10009f9e:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009fa5:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009fab:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009fb1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009fb7:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009fbd:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009fc1:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009fc8:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009fcf:	33 4c 24 18          	xor    ecx,DWORD PTR [esp+0x18]
10009fd3:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10009fda:	31 ca                	xor    edx,ecx
10009fdc:	89 d7                	mov    edi,edx
10009fde:	c1 ef 06             	shr    edi,0x6
10009fe1:	89 d5                	mov    ebp,edx
10009fe3:	c1 ed 0e             	shr    ebp,0xe
10009fe6:	89 d1                	mov    ecx,edx
10009fe8:	c1 e9 16             	shr    ecx,0x16
10009feb:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009ff2:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009ff8:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009ffe:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a004:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a00a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a00e:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a015:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a01c:	33 44 24 1c          	xor    eax,DWORD PTR [esp+0x1c]
1000a020:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a027:	31 c8                	xor    eax,ecx
1000a029:	89 c7                	mov    edi,eax
1000a02b:	c1 ef 06             	shr    edi,0x6
1000a02e:	89 c5                	mov    ebp,eax
1000a030:	c1 ed 0e             	shr    ebp,0xe
1000a033:	89 c1                	mov    ecx,eax
1000a035:	c1 e9 16             	shr    ecx,0x16
1000a038:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a03f:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a045:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a04b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a051:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a057:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a05b:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a062:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a069:	33 54 24 20          	xor    edx,DWORD PTR [esp+0x20]
1000a06d:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a074:	31 ca                	xor    edx,ecx
1000a076:	89 d7                	mov    edi,edx
1000a078:	c1 ef 06             	shr    edi,0x6
1000a07b:	89 d5                	mov    ebp,edx
1000a07d:	c1 ed 0e             	shr    ebp,0xe
1000a080:	89 d1                	mov    ecx,edx
1000a082:	c1 e9 16             	shr    ecx,0x16
1000a085:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000a08c:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a092:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a098:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a09e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a0a4:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a0a8:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a0af:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a0b6:	33 44 24 24          	xor    eax,DWORD PTR [esp+0x24]
1000a0ba:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a0c1:	31 c8                	xor    eax,ecx
1000a0c3:	89 c7                	mov    edi,eax
1000a0c5:	c1 ef 06             	shr    edi,0x6
1000a0c8:	89 c5                	mov    ebp,eax
1000a0ca:	c1 ed 0e             	shr    ebp,0xe
1000a0cd:	89 c1                	mov    ecx,eax
1000a0cf:	c1 e9 16             	shr    ecx,0x16
1000a0d2:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a0d9:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a0df:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a0e5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a0eb:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a0f1:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a0f5:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a0fc:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a103:	33 54 24 28          	xor    edx,DWORD PTR [esp+0x28]
1000a107:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a10e:	31 ca                	xor    edx,ecx
1000a110:	89 d7                	mov    edi,edx
1000a112:	c1 ef 06             	shr    edi,0x6
1000a115:	89 d5                	mov    ebp,edx
1000a117:	c1 ed 0e             	shr    ebp,0xe
1000a11a:	89 d1                	mov    ecx,edx
1000a11c:	c1 e9 16             	shr    ecx,0x16
1000a11f:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000a126:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a12c:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a132:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a138:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a13e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a142:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a149:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a150:	33 44 24 2c          	xor    eax,DWORD PTR [esp+0x2c]
1000a154:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a15b:	31 c8                	xor    eax,ecx
1000a15d:	89 c7                	mov    edi,eax
1000a15f:	c1 ef 06             	shr    edi,0x6
1000a162:	89 c5                	mov    ebp,eax
1000a164:	c1 ed 0e             	shr    ebp,0xe
1000a167:	89 c1                	mov    ecx,eax
1000a169:	c1 e9 16             	shr    ecx,0x16
1000a16c:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a173:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a179:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a17f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a185:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a18b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a18f:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a196:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a19d:	33 54 24 30          	xor    edx,DWORD PTR [esp+0x30]
1000a1a1:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a1a8:	31 ca                	xor    edx,ecx
1000a1aa:	89 d7                	mov    edi,edx
1000a1ac:	c1 ef 06             	shr    edi,0x6
1000a1af:	89 d5                	mov    ebp,edx
1000a1b1:	c1 ed 0e             	shr    ebp,0xe
1000a1b4:	89 d1                	mov    ecx,edx
1000a1b6:	c1 e9 16             	shr    ecx,0x16
1000a1b9:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000a1c0:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a1c6:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a1cc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a1d2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a1d8:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a1dc:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a1e3:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a1ea:	33 44 24 34          	xor    eax,DWORD PTR [esp+0x34]
1000a1ee:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a1f5:	31 c8                	xor    eax,ecx
1000a1f7:	89 c7                	mov    edi,eax
1000a1f9:	c1 ef 06             	shr    edi,0x6
1000a1fc:	89 c5                	mov    ebp,eax
1000a1fe:	c1 ed 0e             	shr    ebp,0xe
1000a201:	89 c1                	mov    ecx,eax
1000a203:	c1 e9 16             	shr    ecx,0x16
1000a206:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a20d:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a213:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a219:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a21f:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a225:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a229:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a230:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a237:	33 54 24 38          	xor    edx,DWORD PTR [esp+0x38]
1000a23b:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a242:	31 ca                	xor    edx,ecx
1000a244:	89 d7                	mov    edi,edx
1000a246:	c1 ef 06             	shr    edi,0x6
1000a249:	89 d5                	mov    ebp,edx
1000a24b:	c1 ed 0e             	shr    ebp,0xe
1000a24e:	89 d6                	mov    esi,edx
1000a250:	c1 ee 16             	shr    esi,0x16
1000a253:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000a25a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a260:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a266:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a26c:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a272:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000a276:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
1000a27d:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
1000a284:	33 44 24 3c          	xor    eax,DWORD PTR [esp+0x3c]
1000a288:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
1000a28f:	31 f0                	xor    eax,esi
1000a291:	89 c5                	mov    ebp,eax
1000a293:	c1 ed 06             	shr    ebp,0x6
1000a296:	89 c1                	mov    ecx,eax
1000a298:	c1 e9 0e             	shr    ecx,0xe
1000a29b:	89 c6                	mov    esi,eax
1000a29d:	c1 ee 16             	shr    esi,0x16
1000a2a0:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000a2a7:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a2ad:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a2b3:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a2b9:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a2bf:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000a2c3:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
1000a2ca:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
1000a2d1:	33 54 24 40          	xor    edx,DWORD PTR [esp+0x40]
1000a2d5:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
1000a2dc:	89 f1                	mov    ecx,esi
1000a2de:	31 d1                	xor    ecx,edx
1000a2e0:	33 44 24 44          	xor    eax,DWORD PTR [esp+0x44]
1000a2e4:	4b                   	dec    ebx
1000a2e5:	0f 85 21 fb ff ff    	jne    10009e0c <_crypt_blowfish_rn+0x282f>
1000a2eb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
1000a2ef:	89 84 9c e8 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10e8],eax
1000a2f6:	89 8c 9c ec 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10ec],ecx
1000a2fd:	83 44 24 48 02       	add    DWORD PTR [esp+0x48],0x2
1000a302:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000a306:	83 f8 06             	cmp    eax,0x6
1000a309:	0f 85 e2 fa ff ff    	jne    10009df1 <_crypt_blowfish_rn+0x2814>
1000a30f:	b9 07 00 00 00       	mov    ecx,0x7
1000a314:	8b bc 24 1c 11 00 00 	mov    edi,DWORD PTR [esp+0x111c]
1000a31b:	8b b4 24 18 11 00 00 	mov    esi,DWORD PTR [esp+0x1118]
1000a322:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000a324:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
1000a32b:	0f be 40 1c          	movsx  eax,BYTE PTR [eax+0x1c]
1000a32f:	8a 80 e0 c4 00 10    	mov    al,BYTE PTR [eax+0x1000c4e0]	1000a331: R_386_32	.data
1000a335:	83 e0 30             	and    eax,0x30
1000a338:	8a 80 a0 c4 00 10    	mov    al,BYTE PTR [eax+0x1000c4a0]	1000a33a: R_386_32	.data
1000a33e:	88 04 24             	mov    BYTE PTR [esp],al
1000a341:	8b 9c 24 1c 11 00 00 	mov    ebx,DWORD PTR [esp+0x111c]
1000a348:	88 43 1c             	mov    BYTE PTR [ebx+0x1c],al
1000a34b:	6a 06                	push   0x6
1000a34d:	8d 74 24 5c          	lea    esi,[esp+0x5c]
1000a351:	8d 9c 24 ec 10 00 00 	lea    ebx,[esp+0x10ec]
1000a358:	53                   	push   ebx
1000a359:	e8 f5 d1 ff ff       	call   10007553 <BF_swap>
1000a35e:	6a 17                	push   0x17
1000a360:	53                   	push   ebx
1000a361:	8b 84 24 2c 11 00 00 	mov    eax,DWORD PTR [esp+0x112c]
1000a368:	83 c0 1d             	add    eax,0x1d
1000a36b:	50                   	push   eax
1000a36c:	e8 3d d1 ff ff       	call   100074ae <BF_encode>
1000a371:	8b 84 24 30 11 00 00 	mov    eax,DWORD PTR [esp+0x1130]
1000a378:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
1000a37c:	68 a8 10 00 00       	push   0x10a8
1000a381:	56                   	push   esi
1000a382:	e8 0b d0 ff ff       	call   10007392 <clean>
1000a387:	83 c4 1c             	add    esp,0x1c
1000a38a:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
1000a391:	eb 29                	jmp    1000a3bc <_crypt_blowfish_rn+0x2ddf>
1000a393:	c7 05 00 00 00 00 22 00 00 00 	mov    DWORD PTR ds:0x0,0x22	1000a395: R_386_32	_bcrypt_errno
1000a39d:	b8 00 00 00 00       	mov    eax,0x0
1000a3a2:	eb 18                	jmp    1000a3bc <_crypt_blowfish_rn+0x2ddf>
1000a3a4:	80 fa 31             	cmp    dl,0x31
1000a3a7:	0f 8e a3 d2 ff ff    	jle    10007650 <_crypt_blowfish_rn+0x73>
1000a3ad:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000a3af: R_386_32	_bcrypt_errno
1000a3b7:	b8 00 00 00 00       	mov    eax,0x0
1000a3bc:	81 c4 00 11 00 00    	add    esp,0x1100
1000a3c2:	5b                   	pop    ebx
1000a3c3:	5e                   	pop    esi
1000a3c4:	5f                   	pop    edi
1000a3c5:	5d                   	pop    ebp
1000a3c6:	c3                   	ret    
1000a3c7:	6a 10                	push   0x10
1000a3c9:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
1000a3d0:	50                   	push   eax
1000a3d1:	e8 bc cf ff ff       	call   10007392 <clean>
1000a3d6:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000a3d8: R_386_32	_bcrypt_errno
1000a3e0:	83 c4 08             	add    esp,0x8
1000a3e3:	b8 00 00 00 00       	mov    eax,0x0
1000a3e8:	eb d2                	jmp    1000a3bc <_crypt_blowfish_rn+0x2ddf>

1000a3ea <_crypt_gensalt_blowfish_rn>:
1000a3ea:	53                   	push   ebx
1000a3eb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000a3ef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000a3f3:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
1000a3f8:	7e 19                	jle    1000a413 <_crypt_gensalt_blowfish_rn+0x29>
1000a3fa:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
1000a3ff:	0f 8e 88 00 00 00    	jle    1000a48d <_crypt_gensalt_blowfish_rn+0xa3>
1000a405:	85 c9                	test   ecx,ecx
1000a407:	74 33                	je     1000a43c <_crypt_gensalt_blowfish_rn+0x52>
1000a409:	8d 41 fc             	lea    eax,[ecx-0x4]
1000a40c:	83 f8 1b             	cmp    eax,0x1b
1000a40f:	76 30                	jbe    1000a441 <_crypt_gensalt_blowfish_rn+0x57>
1000a411:	eb 07                	jmp    1000a41a <_crypt_gensalt_blowfish_rn+0x30>
1000a413:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000a418:	7e 03                	jle    1000a41d <_crypt_gensalt_blowfish_rn+0x33>
1000a41a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
1000a41d:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
1000a422:	7e 11                	jle    1000a435 <_crypt_gensalt_blowfish_rn+0x4b>
1000a424:	b8 16 00 00 00       	mov    eax,0x16
1000a429:	a3 00 00 00 00       	mov    ds:0x0,eax	1000a42a: R_386_32	_bcrypt_errno
1000a42e:	b8 00 00 00 00       	mov    eax,0x0
1000a433:	eb 56                	jmp    1000a48b <_crypt_gensalt_blowfish_rn+0xa1>
1000a435:	b8 22 00 00 00       	mov    eax,0x22
1000a43a:	eb ed                	jmp    1000a429 <_crypt_gensalt_blowfish_rn+0x3f>
1000a43c:	b9 05 00 00 00       	mov    ecx,0x5
1000a441:	c6 03 24             	mov    BYTE PTR [ebx],0x24
1000a444:	c6 43 01 32          	mov    BYTE PTR [ebx+0x1],0x32
1000a448:	c6 43 02 61          	mov    BYTE PTR [ebx+0x2],0x61
1000a44c:	c6 43 03 24          	mov    BYTE PTR [ebx+0x3],0x24
1000a450:	b8 cd cc cc cc       	mov    eax,0xcccccccd
1000a455:	f7 e1                	mul    ecx
1000a457:	89 d0                	mov    eax,edx
1000a459:	c1 e8 03             	shr    eax,0x3
1000a45c:	8d 50 30             	lea    edx,[eax+0x30]
1000a45f:	88 53 04             	mov    BYTE PTR [ebx+0x4],dl
1000a462:	8d 04 80             	lea    eax,[eax+eax*4]
1000a465:	01 c0                	add    eax,eax
1000a467:	29 c1                	sub    ecx,eax
1000a469:	83 c1 30             	add    ecx,0x30
1000a46c:	88 4b 05             	mov    BYTE PTR [ebx+0x5],cl
1000a46f:	c6 43 06 24          	mov    BYTE PTR [ebx+0x6],0x24
1000a473:	6a 10                	push   0x10
1000a475:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a479:	8d 43 07             	lea    eax,[ebx+0x7]
1000a47c:	50                   	push   eax
1000a47d:	e8 2c d0 ff ff       	call   100074ae <BF_encode>
1000a482:	c6 43 1d 00          	mov    BYTE PTR [ebx+0x1d],0x0
1000a486:	83 c4 0c             	add    esp,0xc
1000a489:	89 d8                	mov    eax,ebx
1000a48b:	5b                   	pop    ebx
1000a48c:	c3                   	ret    
1000a48d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000a492:	7f 86                	jg     1000a41a <_crypt_gensalt_blowfish_rn+0x30>
1000a494:	b8 22 00 00 00       	mov    eax,0x22
1000a499:	eb 8e                	jmp    1000a429 <_crypt_gensalt_blowfish_rn+0x3f>

1000a49b <bcrypt_gensalt>:
1000a49b:	57                   	push   edi
1000a49c:	56                   	push   esi
1000a49d:	53                   	push   ebx
1000a49e:	83 ec 10             	sub    esp,0x10
1000a4a1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000a4a5:	89 e3                	mov    ebx,esp
1000a4a7:	8d 74 24 10          	lea    esi,[esp+0x10]
1000a4ab:	e8 fc ff ff ff       	call   1000a4ac <bcrypt_gensalt+0x11>	1000a4ac: R_386_PC32	_bcrypt_rand
1000a4b0:	88 03                	mov    BYTE PTR [ebx],al
1000a4b2:	43                   	inc    ebx
1000a4b3:	39 f3                	cmp    ebx,esi
1000a4b5:	75 f4                	jne    1000a4ab <bcrypt_gensalt+0x10>
1000a4b7:	8d 47 fc             	lea    eax,[edi-0x4]
1000a4ba:	83 f8 1b             	cmp    eax,0x1b
1000a4bd:	76 05                	jbe    1000a4c4 <bcrypt_gensalt+0x29>
1000a4bf:	bf 0c 00 00 00       	mov    edi,0xc
1000a4c4:	83 ec 0c             	sub    esp,0xc
1000a4c7:	6a 40                	push   0x40
1000a4c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
1000a4cd:	6a 10                	push   0x10
1000a4cf:	8d 44 24 18          	lea    eax,[esp+0x18]
1000a4d3:	50                   	push   eax
1000a4d4:	57                   	push   edi
1000a4d5:	e8 10 ff ff ff       	call   1000a3ea <_crypt_gensalt_blowfish_rn>
1000a4da:	85 c0                	test   eax,eax
1000a4dc:	0f 94 c0             	sete   al
1000a4df:	0f b6 c0             	movzx  eax,al
1000a4e2:	83 c4 30             	add    esp,0x30
1000a4e5:	5b                   	pop    ebx
1000a4e6:	5e                   	pop    esi
1000a4e7:	5f                   	pop    edi
1000a4e8:	c3                   	ret    

1000a4e9 <bcrypt_hashpw>:
1000a4e9:	6a 40                	push   0x40
1000a4eb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a4ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a4f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a4f7:	e8 e1 d0 ff ff       	call   100075dd <_crypt_blowfish_rn>
1000a4fc:	83 c4 10             	add    esp,0x10
1000a4ff:	85 c0                	test   eax,eax
1000a501:	0f 94 c0             	sete   al
1000a504:	0f b6 c0             	movzx  eax,al
1000a507:	c3                   	ret    

1000a508 <TERMINAL_KEYBUFFER_IN_SIZE>:
1000a508:	80 00 00 00                                         ....

1000a50c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000a50c:	80 00 00 00 2e 00 2e 2e 00 2f 00 43 6f 75 6c 64     ........./.Could
1000a51c:	6e 27 74 20 6f 70 65 6e 20 62 61 73 65 20 70 61     n't open base pa
1000a52c:	74 68 2e 0a 00 25 73 20 2d 3e 20 25 73 0a 00 43     th...%s -> %s..C
1000a53c:	4f 55 4c 44 20 4e 4f 54 20 43 52 45 41 54 45 00     OULD NOT CREATE.
1000a54c:	43 4f 55 4c 44 20 4e 4f 54 20 43 4f 50 59 00 4e     COULD NOT COPY.N
1000a55c:	4f 20 4d 45 4d 4f 52 59 00 42 61 63 6b 75 70 00     O MEMORY.Backup.
1000a56c:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000a57c:	2f 42 61 63 6b 75 70 2f 00 30 31 32 33 34 35 36     /Backup/.0123456
1000a58c:	37 38 39 41 42 43 44 45 46 00 43 3a 2f 55 73 65     789ABCDEF.C:/Use
1000a59c:	72 73 2f 00 2f 44 65 73 6b 74 6f 70 00 2f 44 6f     rs/./Desktop./Do
1000a5ac:	63 75 6d 65 6e 74 73 00 2f 44 6f 77 6e 6c 6f 61     cuments./Downloa
1000a5bc:	64 73 00 2f 50 69 63 74 75 72 65 73 00 2f 54 72     ds./Pictures./Tr
1000a5cc:	61 73 68 20 42 69 6e 00 2f 4d 75 73 69 63 00 2f     ash Bin./Music./
1000a5dc:	4d 6f 76 69 65 73 00 43 3a 2f 42 61 6e 61 6e 61     Movies.C:/Banana
1000a5ec:	2f 52 65 67 69 73 74 72 79 2f 55 73 65 72 2f 00     /Registry/User/.
1000a5fc:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000a60c:	72 79 2f 44 65 66 61 75 6c 74 55 73 65 72 00 00     ry/DefaultUser..
1000a61c:	43 68 65 63 6b 69 6e 67 0a 20 73 79 73 74 65 6d     Checking. system
1000a62c:	0a 20 72 65 71 75 69 72 65 6d 65 6e 74 73 0a 0a     . requirements..
1000a63c:	20 4c 65 67 61 6c 0a 20 6e 6f 74 69 63 65 73 0a      Legal. notices.
1000a64c:	0a 20 43 68 6f 6f 73 69 6e 67 20 61 0a 20 70 61     . Choosing a. pa
1000a65c:	72 74 69 74 69 6f 6e 0a 0a 20 46 6f 72 6d 61 74     rtition.. Format
1000a66c:	74 69 6e 67 0a 0a 20 43 6f 70 79 69 6e 67 20 66     ting.. Copying f
1000a67c:	69 6c 65 73 0a 0a 20 52 65 73 74 61 72 74 69 6e     iles.. Restartin
1000a68c:	67 0a 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72     g. your computer
1000a69c:	0a 0a 00 20 46 69 6e 61 6c 69 73 69 6e 67 20 74     ... Finalising t
1000a6ac:	68 65 0a 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     he. installation
1000a6bc:	00 00 00 00 50 6c 65 61 73 65 20 77 61 69 74 20     ....Please wait 
1000a6cc:	77 68 69 6c 65 20 74 68 65 20 69 6e 73 74 61 6c     while the instal
1000a6dc:	6c 20 66 69 6e 69 73 68 65 73 2e 00 10 20 00 20     l finishes... . 
1000a6ec:	20 00 41 6c 6c 6f 63 61 74 69 6e 67 20 74 68 65      .Allocating the
1000a6fc:	20 73 77 61 70 66 69 6c 65 00 55 70 64 61 74 69      swapfile.Updati
1000a70c:	6e 67 20 74 68 65 20 72 65 67 69 73 74 72 79 00     ng the registry.
1000a71c:	43 72 65 61 74 69 6e 67 20 75 73 65 72 20 61 63     Creating user ac
1000a72c:	63 6f 75 6e 74 00 49 6e 73 74 61 6c 6c 69 6e 67     count.Installing
1000a73c:	20 70 61 63 6b 61 67 65 73 00 42 61 63 6b 69 6e      packages.Backin
1000a74c:	67 20 75 70 20 73 79 73 74 65 6d 20 66 69 6c 65     g up system file
1000a75c:	73 00 46 69 6e 69 73 68 69 6e 67 20 74 6f 75 63     s.Finishing touc
1000a76c:	68 65 73 00 51 51 2d 30 30 30 2d 30 30 30 2d 30     hes.QQ-000-000-0
1000a77c:	30 30 2d 51 00 00 00 00 43 3a 2f 42 61 6e 61 6e     00-Q....C:/Banan
1000a78c:	61 2f 53 79 73 74 65 6d 2f 74 69 6d 65 7a 6f 6e     a/System/timezon
1000a79c:	65 73 2e 74 78 74 00 20 00 2e 2e 2e 20 00 00 00     es.txt. .... ...
1000a7ac:	53 65 74 74 69 6e 67 20 75 70 20 74 68 65 20 73     Setting up the s
1000a7bc:	79 73 74 65 6d 20 66 6f 72 20 74 68 65 20 66 69     ystem for the fi
1000a7cc:	72 73 74 20 74 69 6d 65 00 0a 0a 0a 0a 0a 0a 00     rst time........
1000a7dc:	54 65 73 74 00 41 41 2d 30 30 30 30 30 2d 30 30     Test.AA-00000-00
1000a7ec:	30 30 30 2d 41 00 57 57 2d 38 38 33 38 38 2d 35     000-A.WW-88388-5
1000a7fc:	35 35 35 35 2d 4e 00 42 61 6e 61 6e 61 20 53 65     5555-N.Banana Se
1000a80c:	74 75 70 00 50 6c 65 61 73 65 20 65 6e 74 65 72     tup.Please enter
1000a81c:	20 79 6f 75 72 20 64 65 74 61 69 6c 73 2e 20 50      your details. P
1000a82c:	72 65 73 73 20 54 41 42 20 74 6f 20 73 77 69 74     ress TAB to swit
1000a83c:	63 68 00 62 65 74 77 65 65 6e 20 66 69 65 6c 64     ch.between field
1000a84c:	73 2e 00 4e 61 6d 65 00 43 6f 6d 70 61 6e 79 00     s..Name.Company.
1000a85c:	50 61 73 73 77 6f 72 64 00 43 6f 6e 66 69 72 6d     Password.Confirm
1000a86c:	00 70 61 73 73 77 6f 72 64 00 00 00 20 20 20 20     .password...    
1000a87c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000a88c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000a89c:	00 20 11 00 20 20 20 00 2a 00 50 72 65 73 73 20     . ..   .*.Press 
1000a8ac:	45 4e 54 45 52 20 74 6f 20 73 75 62 6d 69 74 00     ENTER to submit.
1000a8bc:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000a8cc:	20 20 20 20 20 20 00 20 20 20 4f 4b 20 20 20 00           .   OK   .
1000a8dc:	20 20 11 00 43 4f 55 4c 44 20 4e 4f 54 20 53 41       ..COULD NOT SA
1000a8ec:	56 45 00 59 4f 55 52 20 50 41 53 53 57 4f 52 44     VE.YOUR PASSWORD
1000a8fc:	20 28 41 29 00 59 4f 55 52 20 50 41 53 53 57 4f      (A).YOUR PASSWO
1000a90c:	52 44 20 28 42 29 00 44 61 74 65 20 61 6e 64 20     RD (B).Date and 
1000a91c:	54 69 6d 65 00 31 34 2f 30 35 2f 32 30 32 31 20     Time.14/05/2021 
1000a92c:	31 38 3a 35 35 3a 30 30 00 00 00 00 50 6c 65 61     18:55:00....Plea
1000a93c:	73 65 20 65 6e 74 65 72 20 74 68 65 20 63 75 72     se enter the cur
1000a94c:	72 65 6e 74 20 64 61 74 65 20 61 6e 64 20 74 69     rent date and ti
1000a95c:	6d 65 2c 00 61 6e 64 20 74 68 65 6e 20 70 72 65     me,.and then pre
1000a96c:	73 73 20 45 4e 54 45 52 2e 00 44 44 2f 4d 4d 2f     ss ENTER..DD/MM/
1000a97c:	59 59 59 59 20 48 48 3a 4d 4d 3a 53 53 00 45 53     YYYY HH:MM:SS.ES
1000a98c:	43 3a 20 47 6f 20 62 61 63 6b 20 61 20 73 63 72     C: Go back a scr
1000a99c:	65 65 6e 00 50 6c 65 61 73 65 20 73 65 6c 65 63     een.Please selec
1000a9ac:	74 20 79 6f 75 72 20 74 69 6d 65 7a 6f 6e 65 20     t your timezone 
1000a9bc:	61 6e 64 20 74 68 65 6e 20 70 72 65 73 73 20 45     and then press E
1000a9cc:	4e 54 45 52 2e 00 54 5a 48 52 3a 20 25 64 3a 25     NTER..TZHR: %d:%
1000a9dc:	64 0a 00 55 73 65 72 20 49 6e 74 65 72 66 61 63     d..User Interfac
1000a9ec:	65 00 00 00 50 6c 65 61 73 65 20 73 65 6c 65 63     e...Please selec
1000a9fc:	74 20 74 68 65 20 75 73 65 72 20 69 6e 74 65 72     t the user inter
1000aa0c:	66 61 63 65 20 79 6f 75 20 77 61 6e 74 20 42 61     face you want Ba
1000aa1c:	6e 61 6e 61 00 00 00 00 74 6f 20 62 6f 6f 74 20     nana....to boot 
1000aa2c:	69 6e 74 6f 20 62 79 20 64 65 66 61 75 6c 74 20     into by default 
1000aa3c:	77 68 65 6e 20 79 6f 75 20 73 74 61 72 74 20 74     when you start t
1000aa4c:	68 65 20 63 6f 6d 70 75 74 65 72 2e 00 49 6e 76     he computer..Inv
1000aa5c:	61 6c 69 64 20 50 72 6f 64 75 63 74 20 4b 65 79     alid Product Key
1000aa6c:	00 00 00 00 59 6f 75 20 64 6f 20 6e 6f 74 20 68     ....You do not h
1000aa7c:	61 76 65 20 61 20 76 61 6c 69 64 20 70 72 6f 64     ave a valid prod
1000aa8c:	75 63 74 20 6b 65 79 2e 0a 00 00 00 59 6f 75 20     uct key.....You 
1000aa9c:	6e 65 65 64 20 61 20 76 61 6c 69 64 20 70 72 6f     need a valid pro
1000aaac:	64 75 63 74 20 6b 65 79 20 69 6e 20 6f 72 64 65     duct key in orde
1000aabc:	72 20 74 6f 00 75 73 65 20 42 61 6e 61 6e 61 2e     r to.use Banana.
1000aacc:	00 00 00 00 50 72 65 73 73 20 45 4e 54 45 52 20     ....Press ENTER 
1000aadc:	74 6f 20 72 65 2d 65 6e 74 65 72 20 79 6f 75 72     to re-enter your
1000aaec:	20 70 72 6f 64 75 63 74 20 6b 65 79 2e 00 50 72      product key..Pr
1000aafc:	6f 64 75 63 74 20 4b 65 79 00 00 00 50 6c 65 61     oduct Key...Plea
1000ab0c:	73 65 20 65 6e 74 65 72 20 79 6f 75 72 20 70 72     se enter your pr
1000ab1c:	6f 64 75 63 74 20 6b 65 79 20 62 65 6c 6f 77 2c     oduct key below,
1000ab2c:	00 00 00 00 54 68 65 20 65 6e 74 65 72 65 64 20     ....The entered 
1000ab3c:	70 72 6f 64 75 63 74 20 6b 65 79 20 77 61 73 20     product key was 
1000ab4c:	69 6e 76 61 6c 69 64 2e 00 00 00 00 50 72 65 73     invalid.....Pres
1000ab5c:	73 20 61 6e 79 20 6b 65 79 20 74 6f 20 63 6f 6e     s any key to con
1000ab6c:	74 69 6e 75 65 20 61 6e 64 20 74 68 65 6e 00 00     tinue and then..
1000ab7c:	65 6e 74 65 72 20 74 68 65 20 70 72 6f 64 75 63     enter the produc
1000ab8c:	74 20 6b 65 79 20 63 6f 72 72 65 63 74 6c 79 2e     t key correctly.
1000ab9c:	00 46 69 6e 61 6c 69 73 69 6e 67 20 49 6e 73 74     .Finalising Inst
1000abac:	61 6c 6c 61 74 69 6f 6e 00 40 6d 65 6d 6f 72 79     allation.@memory
1000abbc:	3a 73 77 61 70 66 69 6c 65 00 73 79 73 74 65 6d     :swapfile.system
1000abcc:	00 43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73     .C:/Banana/Regis
1000abdc:	74 72 79 2f 53 79 73 74 65 6d 00 43 3a 2f 42 61     try/System.C:/Ba
1000abec:	6e 61 6e 61 2f 52 65 67 69 73 74 72 79 2f 55 73     nana/Registry/Us
1000abfc:	65 72 00 00 43 3a 2f 42 61 6e 61 6e 61 2f 52 65     er..C:/Banana/Re
1000ac0c:	67 69 73 74 72 79 2f 44 65 66 61 75 6c 74 53 79     gistry/DefaultSy
1000ac1c:	73 74 65 6d 00 00 00 00 20 42 6f 6f 74 20 74 6f     stem.... Boot to
1000ac2c:	20 63 6f 6d 6d 61 6e 64 20 6c 69 6e 65 20 20 20      command line   
1000ac3c:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
1000ac4c:	20 42 6f 6f 74 20 74 6f 20 67 72 61 70 68 69 63      Boot to graphic
1000ac5c:	61 6c 20 69 6e 74 65 72 66 61 63 65 20 28 56 47     al interface (VG
1000ac6c:	41 29 20 20 00 00 00 00 20 42 6f 6f 74 20 74 6f     A)  .... Boot to
1000ac7c:	20 67 72 61 70 68 69 63 61 6c 20 69 6e 74 65 72      graphical inter
1000ac8c:	66 61 63 65 20 28 56 45 53 41 29 20 00 00 00 00     face (VESA) ....
1000ac9c:	24 ac 00 10 4c ac 00 10 74 ac 00 10 4c 6f 61 64     $...L...t...Load	1000ac9c: R_386_32	.text
	1000aca0: R_386_32	.text
	1000aca4: R_386_32	.text
1000acac:	69 6e 67 20 65 78 74 65 6e 73 69 6f 6e 73 2e 2e     ing extensions..
1000acbc:	2e 00 0a 0a 3a 0a 00 2f 25 73 0a 00 43 3a 2f 42     ....:../%s..C:/B
1000accc:	61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 73 65 74     anana/System/set
1000acdc:	75 70 69 73 64 2e 6f 6e 65 00 53 59 53 49 4e 49     upisd.one.SYSINI
1000acec:	54 20 46 41 49 4c 55 52 45 00 43 3a 2f 42 61 6e     T FAILURE.C:/Ban
1000acfc:	61 6e 61 2f 53 79 73 74 65 6d 2f 63 6f 6d 6d 61     ana/System/comma
1000ad0c:	6e 64 2e 65 78 65 00 43 3a 2f 44 45 2e 42 55 47     nd.exe.C:/DE.BUG
1000ad1c:	00 00 00 00 43 3a 2f 42 61 6e 61 6e 61 2f 52 65     ....C:/Banana/Re
1000ad2c:	67 69 73 74 72 79 2f 53 79 73 74 65 6d 2f 53 59     gistry/System/SY
1000ad3c:	53 54 45 4d 2e 52 45 47 00 42 41 4e 41 4e 41 00     STEM.REG.BANANA.
1000ad4c:	72 65 67 73 61 66 65 6e 61 6d 65 20 3d 20 25 73     regsafename = %s
1000ad5c:	0a 00 42 41 4e 41 4e 41 2f 55 53 45 52 53 2f 00     ..BANANA/USERS/.
1000ad6c:	75 73 65 72 42 61 73 65 50 61 74 68 20 3d 20 25     userBasePath = %
1000ad7c:	73 0a 00 53 45 54 55 50 00 42 4f 4f 54 00 54 49     s..SETUP.BOOT.TI
1000ad8c:	4d 45 00 55 53 45 52 53 00 46 49 4c 45 41 53 53     ME.USERS.FILEASS
1000ad9c:	4f 43 00 42 41 4e 41 4e 41 2f 55 53 45 52 53 00     OC.BANANA/USERS.
1000adac:	42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43     BANANA/FILEASSOC
1000adbc:	00 4f 50 45 4e 00 45 44 49 54 00 50 52 49 4e 54     .OPEN.EDIT.PRINT
1000adcc:	00 49 43 4f 4e 00 44 45 53 43 52 00 43 55 53 54     .ICON.DESCR.CUST
1000addc:	4f 4d 56 45 52 42 00 43 55 53 54 4f 4d 50 52 4f     OMVERB.CUSTOMPRO
1000adec:	47 00 42 41 4e 41 4e 41 2f 54 49 4d 45 00 54 49     G.BANANA/TIME.TI
1000adfc:	4d 45 5a 4f 4e 45 00 42 41 4e 41 4e 41 2f 53 45     MEZONE.BANANA/SE
1000ae0c:	54 55 50 00 4e 41 4d 45 00 43 4f 4d 50 41 4e 59     TUP.NAME.COMPANY
1000ae1c:	00 50 52 4f 44 55 43 54 4b 45 59 00 53 41 4c 54     .PRODUCTKEY.SALT
1000ae2c:	00 50 41 53 53 57 4f 52 44 00 44 49 53 50 4c 41     .PASSWORD.DISPLA
1000ae3c:	59 4e 41 4d 45 00 44 45 53 4b 54 4f 50 00 44 4f     YNAME.DESKTOP.DO
1000ae4c:	43 55 4d 45 4e 54 53 00 44 4f 57 4e 4c 4f 41 44     CUMENTS.DOWNLOAD
1000ae5c:	53 00 50 49 43 54 55 52 45 53 00 4d 4f 56 49 45     S.PICTURES.MOVIE
1000ae6c:	53 00 4d 55 53 49 43 00 52 45 43 59 43 4c 45 42     S.MUSIC.RECYCLEB
1000ae7c:	49 4e 00 42 41 4e 41 4e 41 2f 42 4f 4f 54 00 41     IN.BANANA/BOOT.A
1000ae8c:	55 54 4f 47 55 49 00 54 49 4d 45 5a 4f 4e 45 49     UTOGUI.TIMEZONEI
1000ae9c:	44 00 42 41 4e 41 4e 41 2f 54 49 4d 45 2f 54 49     D.BANANA/TIME/TI
1000aeac:	4d 45 5a 4f 4e 45 00 42 41 4e 41 4e 41 2f 53 45     MEZONE.BANANA/SE
1000aebc:	54 55 50 2f 4e 41 4d 45 00 42 41 4e 41 4e 41 2f     TUP/NAME.BANANA/
1000aecc:	53 45 54 55 50 2f 43 4f 4d 50 41 4e 59 00 42 41     SETUP/COMPANY.BA
1000aedc:	4e 41 4e 41 2f 53 45 54 55 50 2f 50 52 4f 44 55     NANA/SETUP/PRODU
1000aeec:	43 54 4b 45 59 00 42 41 4e 41 4e 41 2f 46 49 4c     CTKEY.BANANA/FIL
1000aefc:	45 41 53 53 4f 43 2f 49 43 4f 4e 00 54 58 54 00     EASSOC/ICON.TXT.
1000af0c:	42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43     BANANA/FILEASSOC
1000af1c:	2f 44 45 53 43 52 00 42 41 4e 41 4e 41 2f 46 49     /DESCR.BANANA/FI
1000af2c:	4c 45 41 53 53 4f 43 2f 4f 50 45 4e 00 42 41 4e     LEASSOC/OPEN.BAN
1000af3c:	41 4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f 45 44     ANA/FILEASSOC/ED
1000af4c:	49 54 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53     IT.BANANA/FILEAS
1000af5c:	53 4f 43 2f 50 52 49 4e 54 00 42 41 4e 41 4e 41     SOC/PRINT.BANANA
1000af6c:	2f 46 49 4c 45 41 53 53 4f 43 2f 49 43 4f 4e 2f     /FILEASSOC/ICON/
1000af7c:	54 58 54 00 43 3a 2f 42 61 6e 61 6e 61 2f 49 63     TXT.C:/Banana/Ic
1000af8c:	6f 6e 73 2f 63 6f 6c 6f 75 72 2f 74 65 78 74 2e     ons/colour/text.
1000af9c:	74 67 61 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41     tga.BANANA/FILEA
1000afac:	53 53 4f 43 2f 44 45 53 43 52 2f 54 58 54 00 54     SSOC/DESCR/TXT.T
1000afbc:	65 78 74 20 44 6f 63 75 6d 65 6e 74 00 42 41 4e     ext Document.BAN
1000afcc:	41 4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f 4f 50     ANA/FILEASSOC/OP
1000afdc:	45 4e 2f 54 58 54 00 43 3a 2f 42 61 6e 61 6e 61     EN/TXT.C:/Banana
1000afec:	2f 53 79 73 74 65 6d 2f 74 65 2e 65 78 65 00 42     /System/te.exe.B
1000affc:	41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f     ANANA/FILEASSOC/
1000b00c:	45 44 49 54 2f 54 58 54 00 42 41 4e 41 4e 41 2f     EDIT/TXT.BANANA/
1000b01c:	46 49 4c 45 41 53 53 4f 43 2f 50 52 49 4e 54 2f     FILEASSOC/PRINT/
1000b02c:	54 58 54 00 49 53 4f 00 42 41 4e 41 4e 41 2f 46     TXT.ISO.BANANA/F
1000b03c:	49 4c 45 41 53 53 4f 43 2f 49 43 4f 4e 2f 49 53     ILEASSOC/ICON/IS
1000b04c:	4f 00 43 3a 2f 42 61 6e 61 6e 61 2f 49 63 6f 6e     O.C:/Banana/Icon
1000b05c:	73 2f 63 6f 6c 6f 75 72 2f 63 64 2e 74 67 61 00     s/colour/cd.tga.
1000b06c:	42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43     BANANA/FILEASSOC
1000b07c:	2f 44 45 53 43 52 2f 49 53 4f 00 44 69 73 63 20     /DESCR/ISO.Disc 
1000b08c:	49 6d 61 67 65 20 46 69 6c 65 00 2f 50 41 53 53     Image File./PASS
1000b09c:	57 4f 52 44 00 2f 53 41 4c 54 00 2f 44 49 53 50     WORD./SALT./DISP
1000b0ac:	4c 41 59 4e 41 4d 45 00 2f 44 45 53 4b 54 4f 50     LAYNAME./DESKTOP
1000b0bc:	00 2f 44 4f 43 55 4d 45 4e 54 53 00 2f 44 4f 57     ./DOCUMENTS./DOW
1000b0cc:	4e 4c 4f 41 44 53 00 2f 50 49 43 54 55 52 45 53     NLOADS./PICTURES
1000b0dc:	00 2f 4d 4f 56 49 45 53 00 2f 4d 55 53 49 43 00     ./MOVIES./MUSIC.
1000b0ec:	2f 52 45 43 59 43 4c 45 42 49 4e 00 43 3a 2f 42     /RECYCLEBIN.C:/B
1000b0fc:	61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 4b 45 52     anana/System/KER
1000b10c:	4e 45 4c 33 32 2e 45 58 45 00 43 3a 2f 42 61 6e     NEL32.EXE.C:/Ban
1000b11c:	61 6e 61 2f 53 79 73 74 65 6d 2f 4b 52 4e 4c 42     ana/System/KRNLB
1000b12c:	4b 55 50 2e 45 58 45 00 43 3a 2f 42 61 6e 61 6e     KUP.EXE.C:/Banan
1000b13c:	61 2f 53 79 73 74 65 6d 2f 4b 52 4e 4c 50 32 2e     a/System/KRNLP2.
1000b14c:	45 58 45 00 54 68 65 20 69 6e 73 74 61 6c 6c 61     EXE.The installa
1000b15c:	74 69 6f 6e 20 68 61 73 20 62 65 65 6e 20 63 6f     tion has been co
1000b16c:	6d 70 6c 65 74 65 64 2e 0a 00 00 00 50 6c 65 61     mpleted.....Plea
1000b17c:	73 65 20 70 72 65 73 73 20 45 4e 54 45 52 20 74     se press ENTER t
1000b18c:	6f 20 72 65 73 74 61 72 74 20 79 6f 75 72 20 63     o restart your c
1000b19c:	6f 6d 70 75 74 65 72 00 61 6e 64 20 73 74 61 72     omputer.and star
1000b1ac:	74 20 42 61 6e 61 6e 61 2e 00 00 00 50 4c 45 41     t Banana....PLEA
1000b1bc:	53 45 20 4d 41 4e 55 41 4c 4c 59 20 52 45 53 54     SE MANUALLY REST
1000b1cc:	41 52 54 20 59 4f 55 52 20 43 4f 4d 50 55 54 45     ART YOUR COMPUTE
1000b1dc:	52 00 42 41 4e 41 4e 41 2f 42 4f 4f 54 2f 41 55     R.BANANA/BOOT/AU
1000b1ec:	54 4f 47 55 49 00 50 72 6f 64 75 63 74 20 4b 65     TOGUI.Product Ke
1000b1fc:	79 20 55 70 64 61 74 65 64 00 00 00 59 6f 75 72     y Updated...Your
1000b20c:	20 70 72 6f 64 75 63 74 20 6b 65 79 20 68 61 73      product key has
1000b21c:	20 62 65 65 6e 20 75 70 64 61 74 65 64 2e 0a 00      been updated...
1000b22c:	20 43 72 65 61 74 65 20 6e 65 77 20 75 73 65 72      Create new user
1000b23c:	2e 2e 2e 20 20 20 20 20 20 20 20 20 20 20 20 20     ...             
1000b24c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000b25c:	20 20 00 4c 6f 67 69 6e 00 00 00 00 50 6c 65 61       .Login....Plea
1000b26c:	73 65 20 73 65 6c 65 63 74 20 79 6f 75 72 20 75     se select your u
1000b27c:	73 65 72 6e 61 6d 65 20 61 6e 64 20 70 72 65 73     sername and pres
1000b28c:	73 20 45 4e 54 45 52 2e 00 00 00 00 50 6c 65 61     s ENTER.....Plea
1000b29c:	73 65 20 74 79 70 65 20 79 6f 75 72 20 70 61 73     se type your pas
1000b2ac:	73 77 6f 72 64 20 61 6e 64 20 70 72 65 73 73 20     sword and press 
1000b2bc:	45 4e 54 45 52 00 6f 72 20 70 72 65 73 73 20 45     ENTER.or press E
1000b2cc:	53 43 20 74 6f 20 67 6f 20 62 61 63 6b 2e 00 00     SC to go back...
1000b2dc:	52 45 51 55 49 52 45 44 3a 20 25 73 0a 47 4f 54     REQUIRED: %s.GOT
1000b2ec:	3a 20 25 73 0a 53 41 4c 54 3a 20 25 73 0a 00 00     : %s.SALT: %s...
1000b2fc:	49 74 20 69 73 20 73 61 66 65 20 74 6f 20 74 75     It is safe to tu
1000b30c:	72 6e 20 6f 66 66 20 79 6f 75 72 20 50 43 00 63     rn off your PC.c
1000b31c:	61 6c 6c 00 43 3a 2f 42 61 6e 61 6e 61 2f 53 79     all.C:/Banana/Sy
1000b32c:	73 74 65 6d 2f 69 6e 69 74 2e 62 61 74 00 00 00     stem/init.bat...
1000b33c:	f6 ac 00 10 1b b3 00 10 20 b3 00 10 00 00 00 00     ........ .......	1000b33c: R_386_32	.text
	1000b340: R_386_32	.text
	1000b344: R_386_32	.text
