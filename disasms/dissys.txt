
packages/system/32/0001/system.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <beginx(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <beginx(void*)+0xd>	1000000d: R_386_PC32	begin(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <memcmp(void*, void*, unsigned long)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 10             	sub    esp,0x10
1000001d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000020:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000026:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000029:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000002c:	8d 50 ff             	lea    edx,[eax-0x1]
1000002f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000032:	85 c0                	test   eax,eax
10000034:	74 12                	je     10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000036:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000039:	8a 10                	mov    dl,BYTE PTR [eax]
1000003b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000003e:	8a 00                	mov    al,BYTE PTR [eax]
10000040:	38 c2                	cmp    dl,al
10000042:	75 04                	jne    10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000044:	b0 01                	mov    al,0x1
10000046:	eb 02                	jmp    1000004a <memcmp(void*, void*, unsigned long)+0x33>
10000048:	b0 00                	mov    al,0x0
1000004a:	84 c0                	test   al,al
1000004c:	74 08                	je     10000056 <memcmp(void*, void*, unsigned long)+0x3f>
1000004e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000051:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
10000054:	eb d3                	jmp    10000029 <memcmp(void*, void*, unsigned long)+0x12>
10000056:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000059:	8a 00                	mov    al,BYTE PTR [eax]
1000005b:	0f b6 d0             	movzx  edx,al
1000005e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000061:	8a 00                	mov    al,BYTE PTR [eax]
10000063:	0f b6 c0             	movzx  eax,al
10000066:	29 c2                	sub    edx,eax
10000068:	89 d0                	mov    eax,edx
1000006a:	c9                   	leave  
1000006b:	c3                   	ret    

1000006c <memmove>:
1000006c:	55                   	push   ebp
1000006d:	89 e5                	mov    ebp,esp
1000006f:	83 ec 10             	sub    esp,0x10
10000072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000075:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000007b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000007e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000081:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
10000084:	76 1b                	jbe    100000a1 <memmove+0x35>
10000086:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
1000008a:	74 46                	je     100000d2 <memmove+0x66>
1000008c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000008f:	8a 10                	mov    dl,BYTE PTR [eax]
10000091:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000094:	88 10                	mov    BYTE PTR [eax],dl
10000096:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000099:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
1000009c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000009f:	eb e5                	jmp    10000086 <memmove+0x1a>
100000a1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000a4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
100000a7:	73 29                	jae    100000d2 <memmove+0x66>
100000a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000ac:	48                   	dec    eax
100000ad:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
100000b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000b3:	48                   	dec    eax
100000b4:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
100000b7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000bb:	74 15                	je     100000d2 <memmove+0x66>
100000bd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000c0:	8a 10                	mov    dl,BYTE PTR [eax]
100000c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000c5:	88 10                	mov    BYTE PTR [eax],dl
100000c7:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100000ca:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
100000cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000d0:	eb e5                	jmp    100000b7 <memmove+0x4b>
100000d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d5:	c9                   	leave  
100000d6:	c3                   	ret    

100000d7 <memset>:
100000d7:	55                   	push   ebp
100000d8:	89 e5                	mov    ebp,esp
100000da:	83 ec 10             	sub    esp,0x10
100000dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100000e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000e7:	74 12                	je     100000fb <memset+0x24>
100000e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100000ec:	88 c2                	mov    dl,al
100000ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000f1:	88 10                	mov    BYTE PTR [eax],dl
100000f3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100000f6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000f9:	eb e8                	jmp    100000e3 <memset+0xc>
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	c9                   	leave  
100000ff:	c3                   	ret    

10000100 <strlen>:
10000100:	55                   	push   ebp
10000101:	89 e5                	mov    ebp,esp
10000103:	83 ec 10             	sub    esp,0x10
10000106:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000110:	8a 00                	mov    al,BYTE PTR [eax]
10000112:	84 c0                	test   al,al
10000114:	74 0c                	je     10000122 <strlen+0x22>
10000116:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000119:	40                   	inc    eax
1000011a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000011d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
10000120:	eb eb                	jmp    1000010d <strlen+0xd>
10000122:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000125:	c9                   	leave  
10000126:	c3                   	ret    

10000127 <strpbrk(char const*, char const*)>:
10000127:	55                   	push   ebp
10000128:	89 e5                	mov    ebp,esp
1000012a:	83 ec 10             	sub    esp,0x10
1000012d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000130:	8a 00                	mov    al,BYTE PTR [eax]
10000132:	84 c0                	test   al,al
10000134:	74 30                	je     10000166 <strpbrk(char const*, char const*)+0x3f>
10000136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000139:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000013c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000013f:	8a 00                	mov    al,BYTE PTR [eax]
10000141:	84 c0                	test   al,al
10000143:	74 18                	je     1000015d <strpbrk(char const*, char const*)+0x36>
10000145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000148:	8a 10                	mov    dl,BYTE PTR [eax]
1000014a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000014d:	8a 00                	mov    al,BYTE PTR [eax]
1000014f:	38 c2                	cmp    dl,al
10000151:	75 05                	jne    10000158 <strpbrk(char const*, char const*)+0x31>
10000153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000156:	eb 13                	jmp    1000016b <strpbrk(char const*, char const*)+0x44>
10000158:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
1000015b:	eb df                	jmp    1000013c <strpbrk(char const*, char const*)+0x15>
1000015d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000160:	40                   	inc    eax
10000161:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000164:	eb c7                	jmp    1000012d <strpbrk(char const*, char const*)+0x6>
10000166:	b8 00 00 00 00       	mov    eax,0x0
1000016b:	c9                   	leave  
1000016c:	c3                   	ret    

1000016d <strtok>:
1000016d:	55                   	push   ebp
1000016e:	89 e5                	mov    ebp,esp
10000170:	83 ec 10             	sub    esp,0x10
10000173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000176:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000179:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000017c:	85 c0                	test   eax,eax
1000017e:	75 18                	jne    10000198 <strtok+0x2b>
10000180:	a1 00 00 00 00       	mov    eax,ds:0x0	10000181: R_386_32	SavedPtr
10000185:	85 c0                	test   eax,eax
10000187:	75 07                	jne    10000190 <strtok+0x23>
10000189:	b8 00 00 00 00       	mov    eax,0x0
1000018e:	eb 6f                	jmp    100001ff <strtok+0x92>
10000190:	a1 00 00 00 00       	mov    eax,ds:0x0	10000191: R_386_32	SavedPtr
10000195:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000198:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000019b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000019e:	50                   	push   eax
1000019f:	e8 fc ff ff ff       	call   100001a0 <strtok+0x33>	100001a0: R_386_PC32	strpbrk(char const*, char const*)
100001a4:	83 c4 08             	add    esp,0x8
100001a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100001a8: R_386_32	SavedPtr
100001ac:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001ae: R_386_32	SavedPtr
100001b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001b5:	39 c2                	cmp    edx,eax
100001b7:	75 22                	jne    100001db <strtok+0x6e>
100001b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001bc:	8d 50 01             	lea    edx,[eax+0x1]
100001bf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100001c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100001cb:	50                   	push   eax
100001cc:	e8 fc ff ff ff       	call   100001cd <strtok+0x60>	100001cd: R_386_PC32	strpbrk(char const*, char const*)
100001d1:	83 c4 08             	add    esp,0x8
100001d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100001d5: R_386_32	SavedPtr
100001d9:	eb d1                	jmp    100001ac <strtok+0x3f>
100001db:	a1 00 00 00 00       	mov    eax,ds:0x0	100001dc: R_386_32	SavedPtr
100001e0:	85 c0                	test   eax,eax
100001e2:	74 16                	je     100001fa <strtok+0x8d>
100001e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e5: R_386_32	SavedPtr
100001e9:	8d 50 01             	lea    edx,[eax+0x1]
100001ec:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100001ee: R_386_32	SavedPtr
100001f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001f8:	eb 05                	jmp    100001ff <strtok+0x92>
100001fa:	b8 00 00 00 00       	mov    eax,0x0
100001ff:	c9                   	leave  
10000200:	c3                   	ret    

10000201 <strcpy>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	83 ec 10             	sub    esp,0x10
10000207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000020a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000020d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000210:	8a 00                	mov    al,BYTE PTR [eax]
10000212:	84 c0                	test   al,al
10000214:	74 12                	je     10000228 <strcpy+0x27>
10000216:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000219:	8a 10                	mov    dl,BYTE PTR [eax]
1000021b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000021e:	88 10                	mov    BYTE PTR [eax],dl
10000220:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000223:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10000226:	eb e5                	jmp    1000020d <strcpy+0xc>
10000228:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000022b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000022e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000231:	c9                   	leave  
10000232:	c3                   	ret    

10000233 <strncpyxx(char*, char const*, unsigned long)>:
10000233:	55                   	push   ebp
10000234:	89 e5                	mov    ebp,esp
10000236:	83 ec 10             	sub    esp,0x10
10000239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000242:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000245:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000249:	74 23                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000024b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000024e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000251:	8d 42 01             	lea    eax,[edx+0x1]
10000254:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000025a:	8d 48 01             	lea    ecx,[eax+0x1]
1000025d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
10000260:	8a 12                	mov    dl,BYTE PTR [edx]
10000262:	88 10                	mov    BYTE PTR [eax],dl
10000264:	8a 00                	mov    al,BYTE PTR [eax]
10000266:	84 c0                	test   al,al
10000268:	74 04                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000026a:	b0 01                	mov    al,0x1
1000026c:	eb 02                	jmp    10000270 <strncpyxx(char*, char const*, unsigned long)+0x3d>
1000026e:	b0 00                	mov    al,0x0
10000270:	84 c0                	test   al,al
10000272:	74 02                	je     10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000274:	eb cf                	jmp    10000245 <strncpyxx(char*, char const*, unsigned long)+0x12>
10000276:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000279:	8d 50 ff             	lea    edx,[eax-0x1]
1000027c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
1000027f:	85 c0                	test   eax,eax
10000281:	0f 95 c0             	setne  al
10000284:	84 c0                	test   al,al
10000286:	74 0b                	je     10000293 <strncpyxx(char*, char const*, unsigned long)+0x60>
10000288:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000028b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000028e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000291:	eb e3                	jmp    10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000296:	c9                   	leave  
10000297:	c3                   	ret    

10000298 <strcmp>:
10000298:	55                   	push   ebp
10000299:	89 e5                	mov    ebp,esp
1000029b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029e:	8a 10                	mov    dl,BYTE PTR [eax]
100002a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a3:	8a 00                	mov    al,BYTE PTR [eax]
100002a5:	38 c2                	cmp    dl,al
100002a7:	75 20                	jne    100002c9 <strcmp+0x31>
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	8d 50 01             	lea    edx,[eax+0x1]
100002af:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
100002b2:	8a 00                	mov    al,BYTE PTR [eax]
100002b4:	84 c0                	test   al,al
100002b6:	0f 94 c0             	sete   al
100002b9:	84 c0                	test   al,al
100002bb:	74 07                	je     100002c4 <strcmp+0x2c>
100002bd:	b8 00 00 00 00       	mov    eax,0x0
100002c2:	eb 19                	jmp    100002dd <strcmp+0x45>
100002c4:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100002c7:	eb d2                	jmp    1000029b <strcmp+0x3>
100002c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002cc:	8a 00                	mov    al,BYTE PTR [eax]
100002ce:	0f b6 d0             	movzx  edx,al
100002d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002d4:	8a 00                	mov    al,BYTE PTR [eax]
100002d6:	0f b6 c0             	movzx  eax,al
100002d9:	29 c2                	sub    edx,eax
100002db:	89 d0                	mov    eax,edx
100002dd:	5d                   	pop    ebp
100002de:	c3                   	ret    

100002df <strchr(char const*, int)>:
100002df:	55                   	push   ebp
100002e0:	89 e5                	mov    ebp,esp
100002e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e5:	8a 00                	mov    al,BYTE PTR [eax]
100002e7:	84 c0                	test   al,al
100002e9:	74 16                	je     10000301 <strchr(char const*, int)+0x22>
100002eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ee:	8a 00                	mov    al,BYTE PTR [eax]
100002f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002f3:	38 d0                	cmp    al,dl
100002f5:	75 05                	jne    100002fc <strchr(char const*, int)+0x1d>
100002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fa:	eb 0a                	jmp    10000306 <strchr(char const*, int)+0x27>
100002fc:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
100002ff:	eb e1                	jmp    100002e2 <strchr(char const*, int)+0x3>
10000301:	b8 00 00 00 00       	mov    eax,0x0
10000306:	5d                   	pop    ebp
10000307:	c3                   	ret    

10000308 <strncmp>:
10000308:	55                   	push   ebp
10000309:	89 e5                	mov    ebp,esp
1000030b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000030e:	8d 50 ff             	lea    edx,[eax-0x1]
10000311:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000314:	85 c0                	test   eax,eax
10000316:	74 12                	je     1000032a <strncmp+0x22>
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	8a 10                	mov    dl,BYTE PTR [eax]
1000031d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000320:	8a 00                	mov    al,BYTE PTR [eax]
10000322:	38 c2                	cmp    dl,al
10000324:	75 04                	jne    1000032a <strncmp+0x22>
10000326:	b0 01                	mov    al,0x1
10000328:	eb 02                	jmp    1000032c <strncmp+0x24>
1000032a:	b0 00                	mov    al,0x0
1000032c:	84 c0                	test   al,al
1000032e:	74 20                	je     10000350 <strncmp+0x48>
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8d 50 01             	lea    edx,[eax+0x1]
10000336:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
10000339:	8a 00                	mov    al,BYTE PTR [eax]
1000033b:	84 c0                	test   al,al
1000033d:	0f 94 c0             	sete   al
10000340:	84 c0                	test   al,al
10000342:	74 07                	je     1000034b <strncmp+0x43>
10000344:	b8 00 00 00 00       	mov    eax,0x0
10000349:	eb 19                	jmp    10000364 <strncmp+0x5c>
1000034b:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000034e:	eb bb                	jmp    1000030b <strncmp+0x3>
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8a 00                	mov    al,BYTE PTR [eax]
10000355:	0f b6 d0             	movzx  edx,al
10000358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000035b:	8a 00                	mov    al,BYTE PTR [eax]
1000035d:	0f b6 c0             	movzx  eax,al
10000360:	29 c2                	sub    edx,eax
10000362:	89 d0                	mov    eax,edx
10000364:	5d                   	pop    ebp
10000365:	c3                   	ret    

10000366 <strcat>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 10             	sub    esp,0x10
1000036c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000372:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000375:	8d 50 01             	lea    edx,[eax+0x1]
10000378:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000037b:	8a 00                	mov    al,BYTE PTR [eax]
1000037d:	84 c0                	test   al,al
1000037f:	0f 95 c0             	setne  al
10000382:	84 c0                	test   al,al
10000384:	74 02                	je     10000388 <strcat+0x22>
10000386:	eb ea                	jmp    10000372 <strcat+0xc>
10000388:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
1000038b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000038e:	8d 42 01             	lea    eax,[edx+0x1]
10000391:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000394:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000397:	8d 48 01             	lea    ecx,[eax+0x1]
1000039a:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
1000039d:	8a 12                	mov    dl,BYTE PTR [edx]
1000039f:	88 10                	mov    BYTE PTR [eax],dl
100003a1:	8a 00                	mov    al,BYTE PTR [eax]
100003a3:	84 c0                	test   al,al
100003a5:	0f 95 c0             	setne  al
100003a8:	84 c0                	test   al,al
100003aa:	74 02                	je     100003ae <strcat+0x48>
100003ac:	eb dd                	jmp    1000038b <strcat+0x25>
100003ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b1:	c9                   	leave  
100003b2:	c3                   	ret    

100003b3 <strncat(char*, char const*, unsigned long)>:
100003b3:	55                   	push   ebp
100003b4:	89 e5                	mov    ebp,esp
100003b6:	83 ec 10             	sub    esp,0x10
100003b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100003bd:	74 5c                	je     1000041b <strncat(char*, char const*, unsigned long)+0x68>
100003bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003c8:	8d 50 01             	lea    edx,[eax+0x1]
100003cb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100003ce:	8a 00                	mov    al,BYTE PTR [eax]
100003d0:	84 c0                	test   al,al
100003d2:	0f 95 c0             	setne  al
100003d5:	84 c0                	test   al,al
100003d7:	74 02                	je     100003db <strncat(char*, char const*, unsigned long)+0x28>
100003d9:	eb ea                	jmp    100003c5 <strncat(char*, char const*, unsigned long)+0x12>
100003db:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100003de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e1:	8d 42 01             	lea    eax,[edx+0x1]
100003e4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100003e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003ea:	8d 48 01             	lea    ecx,[eax+0x1]
100003ed:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
100003f0:	8a 12                	mov    dl,BYTE PTR [edx]
100003f2:	88 10                	mov    BYTE PTR [eax],dl
100003f4:	8a 00                	mov    al,BYTE PTR [eax]
100003f6:	84 c0                	test   al,al
100003f8:	74 0d                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
100003fa:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100003fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000401:	74 04                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
10000403:	b0 01                	mov    al,0x1
10000405:	eb 02                	jmp    10000409 <strncat(char*, char const*, unsigned long)+0x56>
10000407:	b0 00                	mov    al,0x0
10000409:	84 c0                	test   al,al
1000040b:	74 02                	je     1000040f <strncat(char*, char const*, unsigned long)+0x5c>
1000040d:	eb cf                	jmp    100003de <strncat(char*, char const*, unsigned long)+0x2b>
1000040f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000413:	75 06                	jne    1000041b <strncat(char*, char const*, unsigned long)+0x68>
10000415:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000418:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000041b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041e:	c9                   	leave  
1000041f:	c3                   	ret    

10000420 <strstr(char*, char*)>:
10000420:	55                   	push   ebp
10000421:	89 e5                	mov    ebp,esp
10000423:	83 ec 10             	sub    esp,0x10
10000426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000429:	e8 fc ff ff ff       	call   1000042a <strstr(char*, char*)+0xa>	1000042a: R_386_PC32	strlen
1000042e:	83 c4 04             	add    esp,0x4
10000431:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000434:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
10000438:	75 05                	jne    1000043f <strstr(char*, char*)+0x1f>
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	eb 3f                	jmp    1000047e <strstr(char*, char*)+0x5e>
1000043f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000442:	50                   	push   eax
10000443:	e8 fc ff ff ff       	call   10000444 <strstr(char*, char*)+0x24>	10000444: R_386_PC32	strlen
10000448:	83 c4 04             	add    esp,0x4
1000044b:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
1000044e:	77 29                	ja     10000479 <strstr(char*, char*)+0x59>
10000450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000453:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
10000456:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000459:	50                   	push   eax
1000045a:	e8 fc ff ff ff       	call   1000045b <strstr(char*, char*)+0x3b>	1000045b: R_386_PC32	memcmp(void*, void*, unsigned long)
1000045f:	83 c4 0c             	add    esp,0xc
10000462:	85 c0                	test   eax,eax
10000464:	0f 94 c0             	sete   al
10000467:	84 c0                	test   al,al
10000469:	74 05                	je     10000470 <strstr(char*, char*)+0x50>
1000046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000046e:	eb 0e                	jmp    1000047e <strstr(char*, char*)+0x5e>
10000470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000473:	40                   	inc    eax
10000474:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000477:	eb c6                	jmp    1000043f <strstr(char*, char*)+0x1f>
10000479:	b8 00 00 00 00       	mov    eax,0x0
1000047e:	c9                   	leave  
1000047f:	c3                   	ret    

10000480 <rmtree(char*)>:
10000480:	55                   	push   ebp
10000481:	89 e5                	mov    ebp,esp
10000483:	53                   	push   ebx
10000484:	81 ec 64 02 00 00    	sub    esp,0x264
1000048a:	68 2c 01 00 00       	push   0x12c
1000048f:	6a 00                	push   0x0
10000491:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000497:	50                   	push   eax
10000498:	e8 fc ff ff ff       	call   10000499 <rmtree(char*)+0x19>	10000499: R_386_PC32	memset
1000049d:	83 c4 0c             	add    esp,0xc
100004a0:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
100004a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100004a9:	83 ec 0c             	sub    esp,0xc
100004ac:	68 14 01 00 00       	push   0x114
100004b1:	e8 fc ff ff ff       	call   100004b2 <rmtree(char*)+0x32>	100004b2: R_386_PC32	operator new(unsigned long)
100004b6:	83 c4 10             	add    esp,0x10
100004b9:	89 c3                	mov    ebx,eax
100004bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
100004c0:	8b 00                	mov    eax,DWORD PTR [eax]
100004c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
100004c5:	83 ec 04             	sub    esp,0x4
100004c8:	50                   	push   eax
100004c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004cc:	53                   	push   ebx
100004cd:	e8 fc ff ff ff       	call   100004ce <rmtree(char*)+0x4e>	100004ce: R_386_PC32	Directory::Directory(char const*, Process*)
100004d2:	83 c4 10             	add    esp,0x10
100004d5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
100004d8:	83 ec 0c             	sub    esp,0xc
100004db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004de:	e8 fc ff ff ff       	call   100004df <rmtree(char*)+0x5f>	100004df: R_386_PC32	Directory::open()
100004e3:	83 c4 10             	add    esp,0x10
100004e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004e9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100004ed:	74 24                	je     10000513 <rmtree(char*)+0x93>
100004ef:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004f3:	0f 84 8b 01 00 00    	je     10000684 <rmtree(char*)+0x204>
100004f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004fc:	8b 00                	mov    eax,DWORD PTR [eax]
100004fe:	83 c0 08             	add    eax,0x8
10000501:	8b 00                	mov    eax,DWORD PTR [eax]
10000503:	83 ec 0c             	sub    esp,0xc
10000506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000509:	ff d0                	call   eax
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	e9 72 01 00 00       	jmp    10000685 <rmtree(char*)+0x205>
10000513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000516:	8b 00                	mov    eax,DWORD PTR [eax]
10000518:	83 c0 0c             	add    eax,0xc
1000051b:	8b 00                	mov    eax,DWORD PTR [eax]
1000051d:	83 ec 0c             	sub    esp,0xc
10000520:	8d 95 a4 fd ff ff    	lea    edx,[ebp-0x25c]
10000526:	52                   	push   edx
10000527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000052a:	6a 00                	push   0x0
1000052c:	68 10 01 00 00       	push   0x110
10000531:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000534:	ff d0                	call   eax
10000536:	83 c4 20             	add    esp,0x20
10000539:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
1000053c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000540:	0f 85 04 01 00 00    	jne    1000064a <rmtree(char*)+0x1ca>
10000546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000549:	83 c0 10             	add    eax,0x10
1000054c:	83 ec 08             	sub    esp,0x8
1000054f:	68 9c a3 00 10       	push   0x1000a39c	10000550: R_386_32	.text
10000554:	50                   	push   eax
10000555:	e8 fc ff ff ff       	call   10000556 <rmtree(char*)+0xd6>	10000556: R_386_PC32	strcmp
1000055a:	83 c4 10             	add    esp,0x10
1000055d:	85 c0                	test   eax,eax
1000055f:	74 b2                	je     10000513 <rmtree(char*)+0x93>
10000561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000564:	83 c0 10             	add    eax,0x10
10000567:	83 ec 08             	sub    esp,0x8
1000056a:	68 9e a3 00 10       	push   0x1000a39e	1000056b: R_386_32	.text
1000056f:	50                   	push   eax
10000570:	e8 fc ff ff ff       	call   10000571 <rmtree(char*)+0xf1>	10000571: R_386_PC32	strcmp
10000575:	83 c4 10             	add    esp,0x10
10000578:	85 c0                	test   eax,eax
1000057a:	74 97                	je     10000513 <rmtree(char*)+0x93>
1000057c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000057f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000582:	83 e0 02             	and    eax,0x2
10000585:	85 c0                	test   eax,eax
10000587:	74 17                	je     100005a0 <rmtree(char*)+0x120>
10000589:	83 ec 0c             	sub    esp,0xc
1000058c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000592:	50                   	push   eax
10000593:	e8 fc ff ff ff       	call   10000594 <rmtree(char*)+0x114>	10000594: R_386_PC32	rmtree(char*)
10000598:	83 c4 10             	add    esp,0x10
1000059b:	e9 73 ff ff ff       	jmp    10000513 <rmtree(char*)+0x93>
100005a0:	83 ec 08             	sub    esp,0x8
100005a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005a6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005ac:	50                   	push   eax
100005ad:	e8 fc ff ff ff       	call   100005ae <rmtree(char*)+0x12e>	100005ae: R_386_PC32	strcpy
100005b2:	83 c4 10             	add    esp,0x10
100005b5:	83 ec 08             	sub    esp,0x8
100005b8:	68 a1 a3 00 10       	push   0x1000a3a1	100005b9: R_386_32	.text
100005bd:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005c3:	50                   	push   eax
100005c4:	e8 fc ff ff ff       	call   100005c5 <rmtree(char*)+0x145>	100005c5: R_386_PC32	strcat
100005c9:	83 c4 10             	add    esp,0x10
100005cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100005cf:	83 c0 10             	add    eax,0x10
100005d2:	83 ec 08             	sub    esp,0x8
100005d5:	50                   	push   eax
100005d6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005dc:	50                   	push   eax
100005dd:	e8 fc ff ff ff       	call   100005de <rmtree(char*)+0x15e>	100005de: R_386_PC32	strcat
100005e2:	83 c4 10             	add    esp,0x10
100005e5:	83 ec 0c             	sub    esp,0xc
100005e8:	68 14 01 00 00       	push   0x114
100005ed:	e8 fc ff ff ff       	call   100005ee <rmtree(char*)+0x16e>	100005ee: R_386_PC32	operator new(unsigned long)
100005f2:	83 c4 10             	add    esp,0x10
100005f5:	89 c3                	mov    ebx,eax
100005f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
100005fc:	8b 00                	mov    eax,DWORD PTR [eax]
100005fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000601:	83 ec 04             	sub    esp,0x4
10000604:	50                   	push   eax
10000605:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
1000060b:	50                   	push   eax
1000060c:	53                   	push   ebx
1000060d:	e8 fc ff ff ff       	call   1000060e <rmtree(char*)+0x18e>	1000060e: R_386_PC32	File::File(char const*, Process*)
10000612:	83 c4 10             	add    esp,0x10
10000615:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000618:	83 ec 0c             	sub    esp,0xc
1000061b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000061e:	e8 fc ff ff ff       	call   1000061f <rmtree(char*)+0x19f>	1000061f: R_386_PC32	File::unlink()
10000623:	83 c4 10             	add    esp,0x10
10000626:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000062a:	0f 84 e3 fe ff ff    	je     10000513 <rmtree(char*)+0x93>
10000630:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000633:	8b 00                	mov    eax,DWORD PTR [eax]
10000635:	83 c0 08             	add    eax,0x8
10000638:	8b 00                	mov    eax,DWORD PTR [eax]
1000063a:	83 ec 0c             	sub    esp,0xc
1000063d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000640:	ff d0                	call   eax
10000642:	83 c4 10             	add    esp,0x10
10000645:	e9 c9 fe ff ff       	jmp    10000513 <rmtree(char*)+0x93>
1000064a:	90                   	nop
1000064b:	83 ec 0c             	sub    esp,0xc
1000064e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000651:	e8 fc ff ff ff       	call   10000652 <rmtree(char*)+0x1d2>	10000652: R_386_PC32	Directory::close()
10000656:	83 c4 10             	add    esp,0x10
10000659:	83 ec 0c             	sub    esp,0xc
1000065c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000065f:	e8 fc ff ff ff       	call   10000660 <rmtree(char*)+0x1e0>	10000660: R_386_PC32	Directory::unlink()
10000664:	83 c4 10             	add    esp,0x10
10000667:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000066b:	74 18                	je     10000685 <rmtree(char*)+0x205>
1000066d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000670:	8b 00                	mov    eax,DWORD PTR [eax]
10000672:	83 c0 08             	add    eax,0x8
10000675:	8b 00                	mov    eax,DWORD PTR [eax]
10000677:	83 ec 0c             	sub    esp,0xc
1000067a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000067d:	ff d0                	call   eax
1000067f:	83 c4 10             	add    esp,0x10
10000682:	eb 01                	jmp    10000685 <rmtree(char*)+0x205>
10000684:	90                   	nop
10000685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000688:	c9                   	leave  
10000689:	c3                   	ret    

1000068a <mkdir(char const*, int)>:
1000068a:	55                   	push   ebp
1000068b:	89 e5                	mov    ebp,esp
1000068d:	53                   	push   ebx
1000068e:	83 ec 14             	sub    esp,0x14
10000691:	83 ec 0c             	sub    esp,0xc
10000694:	68 14 01 00 00       	push   0x114
10000699:	e8 fc ff ff ff       	call   1000069a <mkdir(char const*, int)+0x10>	1000069a: R_386_PC32	operator new(unsigned long)
1000069e:	83 c4 10             	add    esp,0x10
100006a1:	89 c3                	mov    ebx,eax
100006a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100006a4: R_386_32	kernelProcess
100006a8:	83 ec 04             	sub    esp,0x4
100006ab:	50                   	push   eax
100006ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006af:	53                   	push   ebx
100006b0:	e8 fc ff ff ff       	call   100006b1 <mkdir(char const*, int)+0x27>	100006b1: R_386_PC32	Directory::Directory(char const*, Process*)
100006b5:	83 c4 10             	add    esp,0x10
100006b8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100006bb:	83 ec 0c             	sub    esp,0xc
100006be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006c1:	e8 fc ff ff ff       	call   100006c2 <mkdir(char const*, int)+0x38>	100006c2: R_386_PC32	Directory::create()
100006c6:	83 c4 10             	add    esp,0x10
100006c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100006cd:	74 15                	je     100006e4 <mkdir(char const*, int)+0x5a>
100006cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100006d2:	8b 00                	mov    eax,DWORD PTR [eax]
100006d4:	83 c0 08             	add    eax,0x8
100006d7:	8b 00                	mov    eax,DWORD PTR [eax]
100006d9:	83 ec 0c             	sub    esp,0xc
100006dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006df:	ff d0                	call   eax
100006e1:	83 c4 10             	add    esp,0x10
100006e4:	b8 00 00 00 00       	mov    eax,0x0
100006e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100006ec:	c9                   	leave  
100006ed:	c3                   	ret    

100006ee <copytree(char*, char*)>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	53                   	push   ebx
100006f2:	81 ec 54 01 00 00    	sub    esp,0x154
100006f8:	83 ec 0c             	sub    esp,0xc
100006fb:	68 90 01 00 00       	push   0x190
10000700:	e8 fc ff ff ff       	call   10000701 <copytree(char*, char*)+0x13>	10000701: R_386_PC32	malloc
10000705:	83 c4 10             	add    esp,0x10
10000708:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000070b:	83 ec 0c             	sub    esp,0xc
1000070e:	68 90 01 00 00       	push   0x190
10000713:	e8 fc ff ff ff       	call   10000714 <copytree(char*, char*)+0x26>	10000714: R_386_PC32	malloc
10000718:	83 c4 10             	add    esp,0x10
1000071b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000071e:	83 ec 04             	sub    esp,0x4
10000721:	68 90 01 00 00       	push   0x190
10000726:	6a 00                	push   0x0
10000728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000072b:	e8 fc ff ff ff       	call   1000072c <copytree(char*, char*)+0x3e>	1000072c: R_386_PC32	memset
10000730:	83 c4 10             	add    esp,0x10
10000733:	83 ec 04             	sub    esp,0x4
10000736:	68 90 01 00 00       	push   0x190
1000073b:	6a 00                	push   0x0
1000073d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000740:	e8 fc ff ff ff       	call   10000741 <copytree(char*, char*)+0x53>	10000741: R_386_PC32	memset
10000745:	83 c4 10             	add    esp,0x10
10000748:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000074e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000751:	83 ec 0c             	sub    esp,0xc
10000754:	68 14 01 00 00       	push   0x114
10000759:	e8 fc ff ff ff       	call   1000075a <copytree(char*, char*)+0x6c>	1000075a: R_386_PC32	operator new(unsigned long)
1000075e:	83 c4 10             	add    esp,0x10
10000761:	89 c3                	mov    ebx,eax
10000763:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000768:	8b 00                	mov    eax,DWORD PTR [eax]
1000076a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000076d:	83 ec 04             	sub    esp,0x4
10000770:	50                   	push   eax
10000771:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000774:	53                   	push   ebx
10000775:	e8 fc ff ff ff       	call   10000776 <copytree(char*, char*)+0x88>	10000776: R_386_PC32	Directory::Directory(char const*, Process*)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000780:	83 ec 0c             	sub    esp,0xc
10000783:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000786:	e8 fc ff ff ff       	call   10000787 <copytree(char*, char*)+0x99>	10000787: R_386_PC32	Directory::open()
1000078b:	83 c4 10             	add    esp,0x10
1000078e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000791:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10000795:	74 34                	je     100007cb <copytree(char*, char*)+0xdd>
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	68 a3 a3 00 10       	push   0x1000a3a3	1000079b: R_386_32	.text
1000079f:	e8 fc ff ff ff       	call   100007a0 <copytree(char*, char*)+0xb2>	100007a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100007a4:	83 c4 10             	add    esp,0x10
100007a7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
100007ab:	0f 84 90 03 00 00    	je     10000b41 <copytree(char*, char*)+0x453>
100007b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007b4:	8b 00                	mov    eax,DWORD PTR [eax]
100007b6:	83 c0 08             	add    eax,0x8
100007b9:	8b 00                	mov    eax,DWORD PTR [eax]
100007bb:	83 ec 0c             	sub    esp,0xc
100007be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007c1:	ff d0                	call   eax
100007c3:	83 c4 10             	add    esp,0x10
100007c6:	e9 76 03 00 00       	jmp    10000b41 <copytree(char*, char*)+0x453>
100007cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007ce:	8b 00                	mov    eax,DWORD PTR [eax]
100007d0:	83 c0 0c             	add    eax,0xc
100007d3:	8b 00                	mov    eax,DWORD PTR [eax]
100007d5:	83 ec 0c             	sub    esp,0xc
100007d8:	8d 95 b8 fe ff ff    	lea    edx,[ebp-0x148]
100007de:	52                   	push   edx
100007df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100007e2:	6a 00                	push   0x0
100007e4:	68 10 01 00 00       	push   0x110
100007e9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007ec:	ff d0                	call   eax
100007ee:	83 c4 20             	add    esp,0x20
100007f1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007f4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100007f8:	0f 85 fb 02 00 00    	jne    10000af9 <copytree(char*, char*)+0x40b>
100007fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000801:	83 c0 10             	add    eax,0x10
10000804:	83 ec 08             	sub    esp,0x8
10000807:	68 9c a3 00 10       	push   0x1000a39c	10000808: R_386_32	.text
1000080c:	50                   	push   eax
1000080d:	e8 fc ff ff ff       	call   1000080e <copytree(char*, char*)+0x120>	1000080e: R_386_PC32	strcmp
10000812:	83 c4 10             	add    esp,0x10
10000815:	85 c0                	test   eax,eax
10000817:	74 b2                	je     100007cb <copytree(char*, char*)+0xdd>
10000819:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000081c:	83 c0 10             	add    eax,0x10
1000081f:	83 ec 08             	sub    esp,0x8
10000822:	68 9e a3 00 10       	push   0x1000a39e	10000823: R_386_32	.text
10000827:	50                   	push   eax
10000828:	e8 fc ff ff ff       	call   10000829 <copytree(char*, char*)+0x13b>	10000829: R_386_PC32	strcmp
1000082d:	83 c4 10             	add    esp,0x10
10000830:	85 c0                	test   eax,eax
10000832:	74 97                	je     100007cb <copytree(char*, char*)+0xdd>
10000834:	83 ec 08             	sub    esp,0x8
10000837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000083d:	e8 fc ff ff ff       	call   1000083e <copytree(char*, char*)+0x150>	1000083e: R_386_PC32	strcpy
10000842:	83 c4 10             	add    esp,0x10
10000845:	83 ec 08             	sub    esp,0x8
10000848:	68 a1 a3 00 10       	push   0x1000a3a1	10000849: R_386_32	.text
1000084d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000850:	e8 fc ff ff ff       	call   10000851 <copytree(char*, char*)+0x163>	10000851: R_386_PC32	strcat
10000855:	83 c4 10             	add    esp,0x10
10000858:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000085b:	83 c0 10             	add    eax,0x10
1000085e:	83 ec 08             	sub    esp,0x8
10000861:	50                   	push   eax
10000862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000865:	e8 fc ff ff ff       	call   10000866 <copytree(char*, char*)+0x178>	10000866: R_386_PC32	strcat
1000086a:	83 c4 10             	add    esp,0x10
1000086d:	83 ec 08             	sub    esp,0x8
10000870:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000873:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000876:	e8 fc ff ff ff       	call   10000877 <copytree(char*, char*)+0x189>	10000877: R_386_PC32	strcpy
1000087b:	83 c4 10             	add    esp,0x10
1000087e:	83 ec 08             	sub    esp,0x8
10000881:	68 a1 a3 00 10       	push   0x1000a3a1	10000882: R_386_32	.text
10000886:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000889:	e8 fc ff ff ff       	call   1000088a <copytree(char*, char*)+0x19c>	1000088a: R_386_PC32	strcat
1000088e:	83 c4 10             	add    esp,0x10
10000891:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000894:	83 c0 10             	add    eax,0x10
10000897:	83 ec 08             	sub    esp,0x8
1000089a:	50                   	push   eax
1000089b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000089e:	e8 fc ff ff ff       	call   1000089f <copytree(char*, char*)+0x1b1>	1000089f: R_386_PC32	strcat
100008a3:	83 c4 10             	add    esp,0x10
100008a6:	83 ec 04             	sub    esp,0x4
100008a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100008af:	68 bd a3 00 10       	push   0x1000a3bd	100008b0: R_386_32	.text
100008b4:	e8 fc ff ff ff       	call   100008b5 <copytree(char*, char*)+0x1c7>	100008b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100008b9:	83 c4 10             	add    esp,0x10
100008bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100008bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100008c2:	83 e0 02             	and    eax,0x2
100008c5:	85 c0                	test   eax,eax
100008c7:	74 47                	je     10000910 <copytree(char*, char*)+0x222>
100008c9:	83 ec 08             	sub    esp,0x8
100008cc:	68 c0 01 00 00       	push   0x1c0
100008d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008d4:	e8 fc ff ff ff       	call   100008d5 <copytree(char*, char*)+0x1e7>	100008d5: R_386_PC32	mkdir(char const*, int)
100008d9:	83 c4 10             	add    esp,0x10
100008dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100008df:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100008e3:	74 15                	je     100008fa <copytree(char*, char*)+0x20c>
100008e5:	83 ec 0c             	sub    esp,0xc
100008e8:	68 c7 a3 00 10       	push   0x1000a3c7	100008e9: R_386_32	.text
100008ed:	e8 fc ff ff ff       	call   100008ee <copytree(char*, char*)+0x200>	100008ee: R_386_PC32	KePanic(char const*)
100008f2:	83 c4 10             	add    esp,0x10
100008f5:	e9 d1 fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
100008fa:	83 ec 08             	sub    esp,0x8
100008fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000903:	e8 fc ff ff ff       	call   10000904 <copytree(char*, char*)+0x216>	10000904: R_386_PC32	copytree(char*, char*)
10000908:	83 c4 10             	add    esp,0x10
1000090b:	e9 bb fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000910:	83 ec 0c             	sub    esp,0xc
10000913:	68 14 01 00 00       	push   0x114
10000918:	e8 fc ff ff ff       	call   10000919 <copytree(char*, char*)+0x22b>	10000919: R_386_PC32	operator new(unsigned long)
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 c3                	mov    ebx,eax
10000922:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000927:	8b 00                	mov    eax,DWORD PTR [eax]
10000929:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000092c:	83 ec 04             	sub    esp,0x4
1000092f:	50                   	push   eax
10000930:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000933:	53                   	push   ebx
10000934:	e8 fc ff ff ff       	call   10000935 <copytree(char*, char*)+0x247>	10000935: R_386_PC32	File::File(char const*, Process*)
10000939:	83 c4 10             	add    esp,0x10
1000093c:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000093f:	83 ec 08             	sub    esp,0x8
10000942:	6a 01                	push   0x1
10000944:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000947:	e8 fc ff ff ff       	call   10000948 <copytree(char*, char*)+0x25a>	10000948: R_386_PC32	File::open(FileOpenMode)
1000094c:	83 c4 10             	add    esp,0x10
1000094f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000953:	75 15                	jne    1000096a <copytree(char*, char*)+0x27c>
10000955:	83 ec 0c             	sub    esp,0xc
10000958:	68 d8 a3 00 10       	push   0x1000a3d8	10000959: R_386_32	.text
1000095d:	e8 fc ff ff ff       	call   1000095e <copytree(char*, char*)+0x270>	1000095e: R_386_PC32	KePanic(char const*)
10000962:	83 c4 10             	add    esp,0x10
10000965:	e9 8a 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
1000096a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000096e:	0f 84 57 fe ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000974:	83 ec 0c             	sub    esp,0xc
10000977:	68 14 01 00 00       	push   0x114
1000097c:	e8 fc ff ff ff       	call   1000097d <copytree(char*, char*)+0x28f>	1000097d: R_386_PC32	operator new(unsigned long)
10000981:	83 c4 10             	add    esp,0x10
10000984:	89 c3                	mov    ebx,eax
10000986:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000098b:	8b 00                	mov    eax,DWORD PTR [eax]
1000098d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000990:	83 ec 04             	sub    esp,0x4
10000993:	50                   	push   eax
10000994:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000997:	53                   	push   ebx
10000998:	e8 fc ff ff ff       	call   10000999 <copytree(char*, char*)+0x2ab>	10000999: R_386_PC32	File::File(char const*, Process*)
1000099d:	83 c4 10             	add    esp,0x10
100009a0:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
100009a3:	83 ec 08             	sub    esp,0x8
100009a6:	6a 12                	push   0x12
100009a8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009ab:	e8 fc ff ff ff       	call   100009ac <copytree(char*, char*)+0x2be>	100009ac: R_386_PC32	File::open(FileOpenMode)
100009b0:	83 c4 10             	add    esp,0x10
100009b3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
100009b7:	75 23                	jne    100009dc <copytree(char*, char*)+0x2ee>
100009b9:	83 ec 0c             	sub    esp,0xc
100009bc:	68 d8 a3 00 10       	push   0x1000a3d8	100009bd: R_386_32	.text
100009c1:	e8 fc ff ff ff       	call   100009c2 <copytree(char*, char*)+0x2d4>	100009c2: R_386_PC32	KePanic(char const*)
100009c6:	83 c4 10             	add    esp,0x10
100009c9:	83 ec 0c             	sub    esp,0xc
100009cc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009cf:	e8 fc ff ff ff       	call   100009d0 <copytree(char*, char*)+0x2e2>	100009d0: R_386_PC32	File::close()
100009d4:	83 c4 10             	add    esp,0x10
100009d7:	e9 18 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
100009dc:	83 ec 0c             	sub    esp,0xc
100009df:	68 00 10 00 00       	push   0x1000
100009e4:	e8 fc ff ff ff       	call   100009e5 <copytree(char*, char*)+0x2f7>	100009e5: R_386_PC32	malloc
100009e9:	83 c4 10             	add    esp,0x10
100009ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100009ef:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
100009f3:	75 31                	jne    10000a26 <copytree(char*, char*)+0x338>
100009f5:	83 ec 0c             	sub    esp,0xc
100009f8:	68 e7 a3 00 10       	push   0x1000a3e7	100009f9: R_386_32	.text
100009fd:	e8 fc ff ff ff       	call   100009fe <copytree(char*, char*)+0x310>	100009fe: R_386_PC32	KePanic(char const*)
10000a02:	83 c4 10             	add    esp,0x10
10000a05:	83 ec 0c             	sub    esp,0xc
10000a08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000a0b:	e8 fc ff ff ff       	call   10000a0c <copytree(char*, char*)+0x31e>	10000a0c: R_386_PC32	free
10000a10:	83 c4 10             	add    esp,0x10
10000a13:	83 ec 0c             	sub    esp,0xc
10000a16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000a19:	e8 fc ff ff ff       	call   10000a1a <copytree(char*, char*)+0x32c>	10000a1a: R_386_PC32	free
10000a1e:	83 c4 10             	add    esp,0x10
10000a21:	e9 1c 01 00 00       	jmp    10000b42 <copytree(char*, char*)+0x454>
10000a26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000a29:	8b 00                	mov    eax,DWORD PTR [eax]
10000a2b:	83 c0 0c             	add    eax,0xc
10000a2e:	8b 00                	mov    eax,DWORD PTR [eax]
10000a30:	83 ec 0c             	sub    esp,0xc
10000a33:	8d 95 b4 fe ff ff    	lea    edx,[ebp-0x14c]
10000a39:	52                   	push   edx
10000a3a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a3d:	6a 00                	push   0x0
10000a3f:	68 00 10 00 00       	push   0x1000
10000a44:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000a47:	ff d0                	call   eax
10000a49:	83 c4 20             	add    esp,0x20
10000a4c:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a4f:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000a53:	75 37                	jne    10000a8c <copytree(char*, char*)+0x39e>
10000a55:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a58:	8b 00                	mov    eax,DWORD PTR [eax]
10000a5a:	83 c0 10             	add    eax,0x10
10000a5d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a5f:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a65:	99                   	cdq    
10000a66:	83 ec 0c             	sub    esp,0xc
10000a69:	8d 9d b0 fe ff ff    	lea    ebx,[ebp-0x150]
10000a6f:	53                   	push   ebx
10000a70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a73:	52                   	push   edx
10000a74:	50                   	push   eax
10000a75:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a78:	ff d1                	call   ecx
10000a7a:	83 c4 20             	add    esp,0x20
10000a7d:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a83:	3d 00 10 00 00       	cmp    eax,0x1000
10000a88:	75 05                	jne    10000a8f <copytree(char*, char*)+0x3a1>
10000a8a:	eb 9a                	jmp    10000a26 <copytree(char*, char*)+0x338>
10000a8c:	90                   	nop
10000a8d:	eb 01                	jmp    10000a90 <copytree(char*, char*)+0x3a2>
10000a8f:	90                   	nop
10000a90:	83 ec 0c             	sub    esp,0xc
10000a93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a96:	e8 fc ff ff ff       	call   10000a97 <copytree(char*, char*)+0x3a9>	10000a97: R_386_PC32	free
10000a9b:	83 c4 10             	add    esp,0x10
10000a9e:	83 ec 0c             	sub    esp,0xc
10000aa1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000aa4:	e8 fc ff ff ff       	call   10000aa5 <copytree(char*, char*)+0x3b7>	10000aa5: R_386_PC32	File::close()
10000aa9:	83 c4 10             	add    esp,0x10
10000aac:	83 ec 0c             	sub    esp,0xc
10000aaf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <copytree(char*, char*)+0x3c5>	10000ab3: R_386_PC32	File::close()
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000abe:	74 15                	je     10000ad5 <copytree(char*, char*)+0x3e7>
10000ac0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000ac3:	8b 00                	mov    eax,DWORD PTR [eax]
10000ac5:	83 c0 08             	add    eax,0x8
10000ac8:	8b 00                	mov    eax,DWORD PTR [eax]
10000aca:	83 ec 0c             	sub    esp,0xc
10000acd:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ad0:	ff d0                	call   eax
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10000ad9:	0f 84 ec fc ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000adf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000ae2:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae4:	83 c0 08             	add    eax,0x8
10000ae7:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae9:	83 ec 0c             	sub    esp,0xc
10000aec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000aef:	ff d0                	call   eax
10000af1:	83 c4 10             	add    esp,0x10
10000af4:	e9 d2 fc ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000af9:	90                   	nop
10000afa:	83 ec 0c             	sub    esp,0xc
10000afd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000b00:	e8 fc ff ff ff       	call   10000b01 <copytree(char*, char*)+0x413>	10000b01: R_386_PC32	free
10000b05:	83 c4 10             	add    esp,0x10
10000b08:	83 ec 0c             	sub    esp,0xc
10000b0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000b0e:	e8 fc ff ff ff       	call   10000b0f <copytree(char*, char*)+0x421>	10000b0f: R_386_PC32	free
10000b13:	83 c4 10             	add    esp,0x10
10000b16:	83 ec 0c             	sub    esp,0xc
10000b19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b1c:	e8 fc ff ff ff       	call   10000b1d <copytree(char*, char*)+0x42f>	10000b1d: R_386_PC32	Directory::close()
10000b21:	83 c4 10             	add    esp,0x10
10000b24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000b28:	74 18                	je     10000b42 <copytree(char*, char*)+0x454>
10000b2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000b2d:	8b 00                	mov    eax,DWORD PTR [eax]
10000b2f:	83 c0 08             	add    eax,0x8
10000b32:	8b 00                	mov    eax,DWORD PTR [eax]
10000b34:	83 ec 0c             	sub    esp,0xc
10000b37:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b3a:	ff d0                	call   eax
10000b3c:	83 c4 10             	add    esp,0x10
10000b3f:	eb 01                	jmp    10000b42 <copytree(char*, char*)+0x454>
10000b41:	90                   	nop
10000b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000b45:	c9                   	leave  
10000b46:	c3                   	ret    

10000b47 <backupTree(char*, unsigned short)>:
10000b47:	55                   	push   ebp
10000b48:	89 e5                	mov    ebp,esp
10000b4a:	57                   	push   edi
10000b4b:	56                   	push   esi
10000b4c:	53                   	push   ebx
10000b4d:	81 ec 8c 12 00 00    	sub    esp,0x128c
10000b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000b56:	66 89 85 74 ed ff ff 	mov    WORD PTR [ebp-0x128c],ax
10000b5d:	83 ec 0c             	sub    esp,0xc
10000b60:	68 90 01 00 00       	push   0x190
10000b65:	e8 fc ff ff ff       	call   10000b66 <backupTree(char*, unsigned short)+0x1f>	10000b66: R_386_PC32	malloc
10000b6a:	83 c4 10             	add    esp,0x10
10000b6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000b70:	83 ec 04             	sub    esp,0x4
10000b73:	68 90 01 00 00       	push   0x190
10000b78:	6a 00                	push   0x0
10000b7a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000b7d:	e8 fc ff ff ff       	call   10000b7e <backupTree(char*, unsigned short)+0x37>	10000b7e: R_386_PC32	memset
10000b82:	83 c4 10             	add    esp,0x10
10000b85:	8d 85 a8 fe ff ff    	lea    eax,[ebp-0x158]
10000b8b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000b8e:	83 ec 0c             	sub    esp,0xc
10000b91:	68 14 01 00 00       	push   0x114
10000b96:	e8 fc ff ff ff       	call   10000b97 <backupTree(char*, unsigned short)+0x50>	10000b97: R_386_PC32	operator new(unsigned long)
10000b9b:	83 c4 10             	add    esp,0x10
10000b9e:	89 c3                	mov    ebx,eax
10000ba0:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ba5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000baa:	83 ec 04             	sub    esp,0x4
10000bad:	50                   	push   eax
10000bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bb1:	53                   	push   ebx
10000bb2:	e8 fc ff ff ff       	call   10000bb3 <backupTree(char*, unsigned short)+0x6c>	10000bb3: R_386_PC32	Directory::Directory(char const*, Process*)
10000bb7:	83 c4 10             	add    esp,0x10
10000bba:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000bbd:	83 ec 0c             	sub    esp,0xc
10000bc0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bc3:	e8 fc ff ff ff       	call   10000bc4 <backupTree(char*, unsigned short)+0x7d>	10000bc4: R_386_PC32	Directory::open()
10000bc8:	83 c4 10             	add    esp,0x10
10000bcb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000bce:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000bd2:	74 34                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000bd4:	83 ec 0c             	sub    esp,0xc
10000bd7:	68 a3 a3 00 10       	push   0x1000a3a3	10000bd8: R_386_32	.text
10000bdc:	e8 fc ff ff ff       	call   10000bdd <backupTree(char*, unsigned short)+0x96>	10000bdd: R_386_PC32	Dbg::kprintf(char const*, ...)
10000be1:	83 c4 10             	add    esp,0x10
10000be4:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10000be8:	0f 84 c8 05 00 00    	je     100011b6 <backupTree(char*, unsigned short)+0x66f>
10000bee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000bf1:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf3:	83 c0 08             	add    eax,0x8
10000bf6:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf8:	83 ec 0c             	sub    esp,0xc
10000bfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bfe:	ff d0                	call   eax
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	e9 af 05 00 00       	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
10000c08:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c0b:	8b 00                	mov    eax,DWORD PTR [eax]
10000c0d:	83 c0 0c             	add    eax,0xc
10000c10:	8b 00                	mov    eax,DWORD PTR [eax]
10000c12:	83 ec 0c             	sub    esp,0xc
10000c15:	8d 95 a4 fe ff ff    	lea    edx,[ebp-0x15c]
10000c1b:	52                   	push   edx
10000c1c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c1f:	6a 00                	push   0x0
10000c21:	68 10 01 00 00       	push   0x110
10000c26:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c29:	ff d0                	call   eax
10000c2b:	83 c4 20             	add    esp,0x20
10000c2e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c31:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10000c35:	0f 85 41 05 00 00    	jne    1000117c <backupTree(char*, unsigned short)+0x635>
10000c3b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c3e:	83 c0 10             	add    eax,0x10
10000c41:	83 ec 08             	sub    esp,0x8
10000c44:	68 9c a3 00 10       	push   0x1000a39c	10000c45: R_386_32	.text
10000c49:	50                   	push   eax
10000c4a:	e8 fc ff ff ff       	call   10000c4b <backupTree(char*, unsigned short)+0x104>	10000c4b: R_386_PC32	strcmp
10000c4f:	83 c4 10             	add    esp,0x10
10000c52:	85 c0                	test   eax,eax
10000c54:	74 b2                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c59:	83 c0 10             	add    eax,0x10
10000c5c:	83 ec 08             	sub    esp,0x8
10000c5f:	68 9e a3 00 10       	push   0x1000a39e	10000c60: R_386_32	.text
10000c64:	50                   	push   eax
10000c65:	e8 fc ff ff ff       	call   10000c66 <backupTree(char*, unsigned short)+0x11f>	10000c66: R_386_PC32	strcmp
10000c6a:	83 c4 10             	add    esp,0x10
10000c6d:	85 c0                	test   eax,eax
10000c6f:	74 97                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c71:	83 ec 08             	sub    esp,0x8
10000c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c77:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c7a:	e8 fc ff ff ff       	call   10000c7b <backupTree(char*, unsigned short)+0x134>	10000c7b: R_386_PC32	strcpy
10000c7f:	83 c4 10             	add    esp,0x10
10000c82:	83 ec 08             	sub    esp,0x8
10000c85:	68 a1 a3 00 10       	push   0x1000a3a1	10000c86: R_386_32	.text
10000c8a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c8d:	e8 fc ff ff ff       	call   10000c8e <backupTree(char*, unsigned short)+0x147>	10000c8e: R_386_PC32	strcat
10000c92:	83 c4 10             	add    esp,0x10
10000c95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c98:	83 c0 10             	add    eax,0x10
10000c9b:	83 ec 08             	sub    esp,0x8
10000c9e:	50                   	push   eax
10000c9f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ca2:	e8 fc ff ff ff       	call   10000ca3 <backupTree(char*, unsigned short)+0x15c>	10000ca3: R_386_PC32	strcat
10000ca7:	83 c4 10             	add    esp,0x10
10000caa:	66 c7 45 e6 bc ad    	mov    WORD PTR [ebp-0x1a],0xadbc
10000cb0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10000cb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000cba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cbd:	01 d0                	add    eax,edx
10000cbf:	83 c0 10             	add    eax,0x10
10000cc2:	8a 00                	mov    al,BYTE PTR [eax]
10000cc4:	84 c0                	test   al,al
10000cc6:	74 3c                	je     10000d04 <backupTree(char*, unsigned short)+0x1bd>
10000cc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000ccb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cce:	01 d0                	add    eax,edx
10000cd0:	83 c0 10             	add    eax,0x10
10000cd3:	8a 00                	mov    al,BYTE PTR [eax]
10000cd5:	66 0f be d0          	movsx  dx,al
10000cd9:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000cdd:	31 d0                	xor    eax,edx
10000cdf:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000ce3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000ce7:	c1 e0 03             	shl    eax,0x3
10000cea:	89 c2                	mov    edx,eax
10000cec:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000cf0:	c1 f8 0d             	sar    eax,0xd
10000cf3:	09 d0                	or     eax,edx
10000cf5:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000cf9:	66 81 6d e6 f1 06    	sub    WORD PTR [ebp-0x1a],0x6f1
10000cff:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10000d02:	eb b3                	jmp    10000cb7 <backupTree(char*, unsigned short)+0x170>
10000d04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000d0a:	83 e0 02             	and    eax,0x2
10000d0d:	85 c0                	test   eax,eax
10000d0f:	74 37                	je     10000d48 <backupTree(char*, unsigned short)+0x201>
10000d11:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d14:	83 c0 10             	add    eax,0x10
10000d17:	83 ec 08             	sub    esp,0x8
10000d1a:	68 f1 a3 00 10       	push   0x1000a3f1	10000d1b: R_386_32	.text
10000d1f:	50                   	push   eax
10000d20:	e8 fc ff ff ff       	call   10000d21 <backupTree(char*, unsigned short)+0x1da>	10000d21: R_386_PC32	strcmp
10000d25:	83 c4 10             	add    esp,0x10
10000d28:	85 c0                	test   eax,eax
10000d2a:	0f 84 d8 fe ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d30:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000d34:	83 ec 08             	sub    esp,0x8
10000d37:	50                   	push   eax
10000d38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000d3b:	e8 fc ff ff ff       	call   10000d3c <backupTree(char*, unsigned short)+0x1f5>	10000d3c: R_386_PC32	backupTree(char*, unsigned short)
10000d40:	83 c4 10             	add    esp,0x10
10000d43:	e9 c0 fe ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d48:	c6 85 a3 fe ff ff 00 	mov    BYTE PTR [ebp-0x15d],0x0
10000d4f:	83 ec 08             	sub    esp,0x8
10000d52:	68 f8 a3 00 10       	push   0x1000a3f8	10000d53: R_386_32	.text
10000d57:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d5d:	50                   	push   eax
10000d5e:	e8 fc ff ff ff       	call   10000d5f <backupTree(char*, unsigned short)+0x218>	10000d5f: R_386_PC32	strcpy
10000d63:	83 c4 10             	add    esp,0x10
10000d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10000d6c:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000d72:	83 ec 08             	sub    esp,0x8
10000d75:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000d7b:	50                   	push   eax
10000d7c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d82:	50                   	push   eax
10000d83:	e8 fc ff ff ff       	call   10000d84 <backupTree(char*, unsigned short)+0x23d>	10000d84: R_386_PC32	strcat
10000d88:	83 c4 10             	add    esp,0x10
10000d8b:	83 ec 04             	sub    esp,0x4
10000d8e:	6a 09                	push   0x9
10000d90:	6a 00                	push   0x0
10000d92:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000d98:	50                   	push   eax
10000d99:	e8 fc ff ff ff       	call   10000d9a <backupTree(char*, unsigned short)+0x253>	10000d9a: R_386_PC32	memset
10000d9e:	83 c4 10             	add    esp,0x10
10000da1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000da4:	83 c0 10             	add    eax,0x10
10000da7:	83 ec 04             	sub    esp,0x4
10000daa:	6a 08                	push   0x8
10000dac:	50                   	push   eax
10000dad:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000db3:	50                   	push   eax
10000db4:	e8 fc ff ff ff       	call   10000db5 <backupTree(char*, unsigned short)+0x26e>	10000db5: R_386_PC32	strncpyxx(char*, char const*, unsigned long)
10000db9:	83 c4 10             	add    esp,0x10
10000dbc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000dc3:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000dc7:	0f 8f c5 00 00 00    	jg     10000e92 <backupTree(char*, unsigned short)+0x34b>
10000dcd:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000dd3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000dd6:	01 d0                	add    eax,edx
10000dd8:	8a 00                	mov    al,BYTE PTR [eax]
10000dda:	3c 60                	cmp    al,0x60
10000ddc:	7e 30                	jle    10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000dde:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000de4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000de7:	01 d0                	add    eax,edx
10000de9:	8a 00                	mov    al,BYTE PTR [eax]
10000deb:	3c 7a                	cmp    al,0x7a
10000ded:	7f 1f                	jg     10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000def:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000df5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000df8:	01 d0                	add    eax,edx
10000dfa:	8a 00                	mov    al,BYTE PTR [eax]
10000dfc:	83 e8 20             	sub    eax,0x20
10000dff:	88 c2                	mov    dl,al
10000e01:	8d 8d 99 fe ff ff    	lea    ecx,[ebp-0x167]
10000e07:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e0a:	01 c8                	add    eax,ecx
10000e0c:	88 10                	mov    BYTE PTR [eax],dl
10000e0e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e17:	01 d0                	add    eax,edx
10000e19:	8a 00                	mov    al,BYTE PTR [eax]
10000e1b:	3c 59                	cmp    al,0x59
10000e1d:	75 0e                	jne    10000e2d <backupTree(char*, unsigned short)+0x2e6>
10000e1f:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e25:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e28:	01 d0                	add    eax,edx
10000e2a:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e2d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e33:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e36:	01 d0                	add    eax,edx
10000e38:	8a 00                	mov    al,BYTE PTR [eax]
10000e3a:	3c 5a                	cmp    al,0x5a
10000e3c:	75 0e                	jne    10000e4c <backupTree(char*, unsigned short)+0x305>
10000e3e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e47:	01 d0                	add    eax,edx
10000e49:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e4c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e52:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e55:	01 d0                	add    eax,edx
10000e57:	8a 00                	mov    al,BYTE PTR [eax]
10000e59:	3c 20                	cmp    al,0x20
10000e5b:	75 0e                	jne    10000e6b <backupTree(char*, unsigned short)+0x324>
10000e5d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e63:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e66:	01 d0                	add    eax,edx
10000e68:	c6 00 59             	mov    BYTE PTR [eax],0x59
10000e6b:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e74:	01 d0                	add    eax,edx
10000e76:	8a 00                	mov    al,BYTE PTR [eax]
10000e78:	3c 2e                	cmp    al,0x2e
10000e7a:	75 0e                	jne    10000e8a <backupTree(char*, unsigned short)+0x343>
10000e7c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e82:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e85:	01 d0                	add    eax,edx
10000e87:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10000e8a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10000e8d:	e9 31 ff ff ff       	jmp    10000dc3 <backupTree(char*, unsigned short)+0x27c>
10000e92:	83 ec 08             	sub    esp,0x8
10000e95:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000e9b:	50                   	push   eax
10000e9c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ea2:	50                   	push   eax
10000ea3:	e8 fc ff ff ff       	call   10000ea4 <backupTree(char*, unsigned short)+0x35d>	10000ea4: R_386_PC32	strcat
10000ea8:	83 c4 10             	add    esp,0x10
10000eab:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000eae:	83 c0 10             	add    eax,0x10
10000eb1:	83 ec 0c             	sub    esp,0xc
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <backupTree(char*, unsigned short)+0x36f>	10000eb6: R_386_PC32	strlen
10000eba:	83 c4 10             	add    esp,0x10
10000ebd:	83 c0 41             	add    eax,0x41
10000ec0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000ec6:	83 ec 08             	sub    esp,0x8
10000ec9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000ecf:	50                   	push   eax
10000ed0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ed6:	50                   	push   eax
10000ed7:	e8 fc ff ff ff       	call   10000ed8 <backupTree(char*, unsigned short)+0x391>	10000ed8: R_386_PC32	strcat
10000edc:	83 c4 10             	add    esp,0x10
10000edf:	83 ec 08             	sub    esp,0x8
10000ee2:	68 9c a3 00 10       	push   0x1000a39c	10000ee3: R_386_32	.text
10000ee7:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000eed:	50                   	push   eax
10000eee:	e8 fc ff ff ff       	call   10000eef <backupTree(char*, unsigned short)+0x3a8>	10000eef: R_386_PC32	strcat
10000ef3:	83 c4 10             	add    esp,0x10
10000ef6:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000efa:	25 65 07 00 00       	and    eax,0x765
10000eff:	33 85 74 ed ff ff    	xor    eax,DWORD PTR [ebp-0x128c]
10000f05:	66 89 45 c6          	mov    WORD PTR [ebp-0x3a],ax
10000f09:	8d 85 88 fe ff ff    	lea    eax,[ebp-0x178]
10000f0f:	bb 11 a4 00 10       	mov    ebx,0x1000a411	10000f10: R_386_32	.text
10000f14:	ba 11 00 00 00       	mov    edx,0x11
10000f19:	89 c7                	mov    edi,eax
10000f1b:	89 de                	mov    esi,ebx
10000f1d:	89 d1                	mov    ecx,edx
10000f1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000f21:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f25:	83 e0 0f             	and    eax,0xf
10000f28:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f2f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f35:	83 ec 08             	sub    esp,0x8
10000f38:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f3e:	50                   	push   eax
10000f3f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f45:	50                   	push   eax
10000f46:	e8 fc ff ff ff       	call   10000f47 <backupTree(char*, unsigned short)+0x400>	10000f47: R_386_PC32	strcat
10000f4b:	83 c4 10             	add    esp,0x10
10000f4e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f52:	c1 f8 04             	sar    eax,0x4
10000f55:	83 e0 0f             	and    eax,0xf
10000f58:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f5f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f65:	83 ec 08             	sub    esp,0x8
10000f68:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f6e:	50                   	push   eax
10000f6f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f75:	50                   	push   eax
10000f76:	e8 fc ff ff ff       	call   10000f77 <backupTree(char*, unsigned short)+0x430>	10000f77: R_386_PC32	strcat
10000f7b:	83 c4 10             	add    esp,0x10
10000f7e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f82:	c1 f8 08             	sar    eax,0x8
10000f85:	83 e0 0f             	and    eax,0xf
10000f88:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f8f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f95:	83 ec 08             	sub    esp,0x8
10000f98:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f9e:	50                   	push   eax
10000f9f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fa5:	50                   	push   eax
10000fa6:	e8 fc ff ff ff       	call   10000fa7 <backupTree(char*, unsigned short)+0x460>	10000fa7: R_386_PC32	strcat
10000fab:	83 c4 10             	add    esp,0x10
10000fae:	66 8b 45 c6          	mov    ax,WORD PTR [ebp-0x3a]
10000fb2:	66 c1 e8 0c          	shr    ax,0xc
10000fb6:	0f b7 c0             	movzx  eax,ax
10000fb9:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000fc0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000fc6:	83 ec 08             	sub    esp,0x8
10000fc9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000fcf:	50                   	push   eax
10000fd0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fd6:	50                   	push   eax
10000fd7:	e8 fc ff ff ff       	call   10000fd8 <backupTree(char*, unsigned short)+0x491>	10000fd8: R_386_PC32	strcat
10000fdc:	83 c4 10             	add    esp,0x10
10000fdf:	83 ec 0c             	sub    esp,0xc
10000fe2:	68 14 01 00 00       	push   0x114
10000fe7:	e8 fc ff ff ff       	call   10000fe8 <backupTree(char*, unsigned short)+0x4a1>	10000fe8: R_386_PC32	operator new(unsigned long)
10000fec:	83 c4 10             	add    esp,0x10
10000fef:	89 c3                	mov    ebx,eax
10000ff1:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ff6:	8b 00                	mov    eax,DWORD PTR [eax]
10000ff8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000ffb:	83 ec 04             	sub    esp,0x4
10000ffe:	50                   	push   eax
10000fff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001002:	53                   	push   ebx
10001003:	e8 fc ff ff ff       	call   10001004 <backupTree(char*, unsigned short)+0x4bd>	10001004: R_386_PC32	File::File(char const*, Process*)
10001008:	83 c4 10             	add    esp,0x10
1000100b:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
1000100e:	83 ec 08             	sub    esp,0x8
10001011:	6a 01                	push   0x1
10001013:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001016:	e8 fc ff ff ff       	call   10001017 <backupTree(char*, unsigned short)+0x4d0>	10001017: R_386_PC32	File::open(FileOpenMode)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001022:	75 15                	jne    10001039 <backupTree(char*, unsigned short)+0x4f2>
10001024:	83 ec 0c             	sub    esp,0xc
10001027:	68 d8 a3 00 10       	push   0x1000a3d8	10001028: R_386_32	.text
1000102c:	e8 fc ff ff ff       	call   1000102d <backupTree(char*, unsigned short)+0x4e6>	1000102d: R_386_PC32	KePanic(char const*)
10001031:	83 c4 10             	add    esp,0x10
10001034:	e9 3e 01 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
10001039:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
1000103d:	0f 84 c5 fb ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001043:	83 ec 0c             	sub    esp,0xc
10001046:	68 14 01 00 00       	push   0x114
1000104b:	e8 fc ff ff ff       	call   1000104c <backupTree(char*, unsigned short)+0x505>	1000104c: R_386_PC32	operator new(unsigned long)
10001050:	83 c4 10             	add    esp,0x10
10001053:	89 c3                	mov    ebx,eax
10001055:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000105a:	8b 00                	mov    eax,DWORD PTR [eax]
1000105c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000105f:	83 ec 04             	sub    esp,0x4
10001062:	50                   	push   eax
10001063:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10001069:	50                   	push   eax
1000106a:	53                   	push   ebx
1000106b:	e8 fc ff ff ff       	call   1000106c <backupTree(char*, unsigned short)+0x525>	1000106c: R_386_PC32	File::File(char const*, Process*)
10001070:	83 c4 10             	add    esp,0x10
10001073:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10001076:	83 ec 08             	sub    esp,0x8
10001079:	6a 12                	push   0x12
1000107b:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000107e:	e8 fc ff ff ff       	call   1000107f <backupTree(char*, unsigned short)+0x538>	1000107f: R_386_PC32	File::open(FileOpenMode)
10001083:	83 c4 10             	add    esp,0x10
10001086:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000108a:	75 23                	jne    100010af <backupTree(char*, unsigned short)+0x568>
1000108c:	83 ec 0c             	sub    esp,0xc
1000108f:	68 d8 a3 00 10       	push   0x1000a3d8	10001090: R_386_32	.text
10001094:	e8 fc ff ff ff       	call   10001095 <backupTree(char*, unsigned short)+0x54e>	10001095: R_386_PC32	KePanic(char const*)
10001099:	83 c4 10             	add    esp,0x10
1000109c:	83 ec 0c             	sub    esp,0xc
1000109f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
100010a2:	e8 fc ff ff ff       	call   100010a3 <backupTree(char*, unsigned short)+0x55c>	100010a3: R_386_PC32	File::close()
100010a7:	83 c4 10             	add    esp,0x10
100010aa:	e9 c8 00 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
100010af:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100010b2:	8b 00                	mov    eax,DWORD PTR [eax]
100010b4:	83 c0 0c             	add    eax,0xc
100010b7:	8b 00                	mov    eax,DWORD PTR [eax]
100010b9:	83 ec 0c             	sub    esp,0xc
100010bc:	8d 95 84 fe ff ff    	lea    edx,[ebp-0x17c]
100010c2:	52                   	push   edx
100010c3:	8d 95 80 ee ff ff    	lea    edx,[ebp-0x1180]
100010c9:	52                   	push   edx
100010ca:	6a 00                	push   0x0
100010cc:	68 00 10 00 00       	push   0x1000
100010d1:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100010d4:	ff d0                	call   eax
100010d6:	83 c4 20             	add    esp,0x20
100010d9:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100010dc:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100010e0:	75 3b                	jne    1000111d <backupTree(char*, unsigned short)+0x5d6>
100010e2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100010e5:	8b 00                	mov    eax,DWORD PTR [eax]
100010e7:	83 c0 10             	add    eax,0x10
100010ea:	8b 08                	mov    ecx,DWORD PTR [eax]
100010ec:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
100010f2:	99                   	cdq    
100010f3:	83 ec 0c             	sub    esp,0xc
100010f6:	8d 9d 80 fe ff ff    	lea    ebx,[ebp-0x180]
100010fc:	53                   	push   ebx
100010fd:	8d 9d 80 ee ff ff    	lea    ebx,[ebp-0x1180]
10001103:	53                   	push   ebx
10001104:	52                   	push   edx
10001105:	50                   	push   eax
10001106:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001109:	ff d1                	call   ecx
1000110b:	83 c4 20             	add    esp,0x20
1000110e:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
10001114:	3d 00 10 00 00       	cmp    eax,0x1000
10001119:	75 05                	jne    10001120 <backupTree(char*, unsigned short)+0x5d9>
1000111b:	eb 92                	jmp    100010af <backupTree(char*, unsigned short)+0x568>
1000111d:	90                   	nop
1000111e:	eb 01                	jmp    10001121 <backupTree(char*, unsigned short)+0x5da>
10001120:	90                   	nop
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001127:	e8 fc ff ff ff       	call   10001128 <backupTree(char*, unsigned short)+0x5e1>	10001128: R_386_PC32	File::close()
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	83 ec 0c             	sub    esp,0xc
10001132:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001135:	e8 fc ff ff ff       	call   10001136 <backupTree(char*, unsigned short)+0x5ef>	10001136: R_386_PC32	File::close()
1000113a:	83 c4 10             	add    esp,0x10
1000113d:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001141:	74 15                	je     10001158 <backupTree(char*, unsigned short)+0x611>
10001143:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001146:	8b 00                	mov    eax,DWORD PTR [eax]
10001148:	83 c0 08             	add    eax,0x8
1000114b:	8b 00                	mov    eax,DWORD PTR [eax]
1000114d:	83 ec 0c             	sub    esp,0xc
10001150:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001153:	ff d0                	call   eax
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000115c:	0f 84 a6 fa ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001162:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10001165:	8b 00                	mov    eax,DWORD PTR [eax]
10001167:	83 c0 08             	add    eax,0x8
1000116a:	8b 00                	mov    eax,DWORD PTR [eax]
1000116c:	83 ec 0c             	sub    esp,0xc
1000116f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001172:	ff d0                	call   eax
10001174:	83 c4 10             	add    esp,0x10
10001177:	e9 8c fa ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
1000117c:	90                   	nop
1000117d:	83 ec 0c             	sub    esp,0xc
10001180:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001183:	e8 fc ff ff ff       	call   10001184 <backupTree(char*, unsigned short)+0x63d>	10001184: R_386_PC32	free
10001188:	83 c4 10             	add    esp,0x10
1000118b:	83 ec 0c             	sub    esp,0xc
1000118e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001191:	e8 fc ff ff ff       	call   10001192 <backupTree(char*, unsigned short)+0x64b>	10001192: R_386_PC32	Directory::close()
10001196:	83 c4 10             	add    esp,0x10
10001199:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
1000119d:	74 18                	je     100011b7 <backupTree(char*, unsigned short)+0x670>
1000119f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100011a2:	8b 00                	mov    eax,DWORD PTR [eax]
100011a4:	83 c0 08             	add    eax,0x8
100011a7:	8b 00                	mov    eax,DWORD PTR [eax]
100011a9:	83 ec 0c             	sub    esp,0xc
100011ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011af:	ff d0                	call   eax
100011b1:	83 c4 10             	add    esp,0x10
100011b4:	eb 01                	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
100011b6:	90                   	nop
100011b7:	8d 65 f4             	lea    esp,[ebp-0xc]
100011ba:	5b                   	pop    ebx
100011bb:	5e                   	pop    esi
100011bc:	5f                   	pop    edi
100011bd:	5d                   	pop    ebp
100011be:	c3                   	ret    

100011bf <createUser(char const*)>:
100011bf:	55                   	push   ebp
100011c0:	89 e5                	mov    ebp,esp
100011c2:	81 ec 08 01 00 00    	sub    esp,0x108
100011c8:	68 22 a4 00 10       	push   0x1000a422	100011c9: R_386_32	.text
100011cd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011d3:	50                   	push   eax
100011d4:	e8 fc ff ff ff       	call   100011d5 <createUser(char const*)+0x16>	100011d5: R_386_PC32	strcpy
100011d9:	83 c4 08             	add    esp,0x8
100011dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011df:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011e5:	50                   	push   eax
100011e6:	e8 fc ff ff ff       	call   100011e7 <createUser(char const*)+0x28>	100011e7: R_386_PC32	strcat
100011eb:	83 c4 08             	add    esp,0x8
100011ee:	83 ec 08             	sub    esp,0x8
100011f1:	68 c0 01 00 00       	push   0x1c0
100011f6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011fc:	50                   	push   eax
100011fd:	e8 fc ff ff ff       	call   100011fe <createUser(char const*)+0x3f>	100011fe: R_386_PC32	mkdir(char const*, int)
10001202:	83 c4 10             	add    esp,0x10
10001205:	83 ec 08             	sub    esp,0x8
10001208:	68 2c a4 00 10       	push   0x1000a42c	10001209: R_386_32	.text
1000120d:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001213:	50                   	push   eax
10001214:	e8 fc ff ff ff       	call   10001215 <createUser(char const*)+0x56>	10001215: R_386_PC32	strcat
10001219:	83 c4 10             	add    esp,0x10
1000121c:	83 ec 08             	sub    esp,0x8
1000121f:	68 c0 01 00 00       	push   0x1c0
10001224:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000122a:	50                   	push   eax
1000122b:	e8 fc ff ff ff       	call   1000122c <createUser(char const*)+0x6d>	1000122c: R_386_PC32	mkdir(char const*, int)
10001230:	83 c4 10             	add    esp,0x10
10001233:	83 ec 08             	sub    esp,0x8
10001236:	68 22 a4 00 10       	push   0x1000a422	10001237: R_386_32	.text
1000123b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001241:	50                   	push   eax
10001242:	e8 fc ff ff ff       	call   10001243 <createUser(char const*)+0x84>	10001243: R_386_PC32	strcpy
10001247:	83 c4 10             	add    esp,0x10
1000124a:	83 ec 08             	sub    esp,0x8
1000124d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001250:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001256:	50                   	push   eax
10001257:	e8 fc ff ff ff       	call   10001258 <createUser(char const*)+0x99>	10001258: R_386_PC32	strcat
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	83 ec 08             	sub    esp,0x8
10001262:	68 35 a4 00 10       	push   0x1000a435	10001263: R_386_32	.text
10001267:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000126d:	50                   	push   eax
1000126e:	e8 fc ff ff ff       	call   1000126f <createUser(char const*)+0xb0>	1000126f: R_386_PC32	strcat
10001273:	83 c4 10             	add    esp,0x10
10001276:	83 ec 08             	sub    esp,0x8
10001279:	68 c0 01 00 00       	push   0x1c0
1000127e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001284:	50                   	push   eax
10001285:	e8 fc ff ff ff       	call   10001286 <createUser(char const*)+0xc7>	10001286: R_386_PC32	mkdir(char const*, int)
1000128a:	83 c4 10             	add    esp,0x10
1000128d:	83 ec 08             	sub    esp,0x8
10001290:	68 22 a4 00 10       	push   0x1000a422	10001291: R_386_32	.text
10001295:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000129b:	50                   	push   eax
1000129c:	e8 fc ff ff ff       	call   1000129d <createUser(char const*)+0xde>	1000129d: R_386_PC32	strcpy
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	83 ec 08             	sub    esp,0x8
100012a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012aa:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012b0:	50                   	push   eax
100012b1:	e8 fc ff ff ff       	call   100012b2 <createUser(char const*)+0xf3>	100012b2: R_386_PC32	strcat
100012b6:	83 c4 10             	add    esp,0x10
100012b9:	83 ec 08             	sub    esp,0x8
100012bc:	68 40 a4 00 10       	push   0x1000a440	100012bd: R_386_32	.text
100012c1:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012c7:	50                   	push   eax
100012c8:	e8 fc ff ff ff       	call   100012c9 <createUser(char const*)+0x10a>	100012c9: R_386_PC32	strcat
100012cd:	83 c4 10             	add    esp,0x10
100012d0:	83 ec 08             	sub    esp,0x8
100012d3:	68 c0 01 00 00       	push   0x1c0
100012d8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <createUser(char const*)+0x121>	100012e0: R_386_PC32	mkdir(char const*, int)
100012e4:	83 c4 10             	add    esp,0x10
100012e7:	83 ec 08             	sub    esp,0x8
100012ea:	68 22 a4 00 10       	push   0x1000a422	100012eb: R_386_32	.text
100012ef:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012f5:	50                   	push   eax
100012f6:	e8 fc ff ff ff       	call   100012f7 <createUser(char const*)+0x138>	100012f7: R_386_PC32	strcpy
100012fb:	83 c4 10             	add    esp,0x10
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001304:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000130a:	50                   	push   eax
1000130b:	e8 fc ff ff ff       	call   1000130c <createUser(char const*)+0x14d>	1000130c: R_386_PC32	strcat
10001310:	83 c4 10             	add    esp,0x10
10001313:	83 ec 08             	sub    esp,0x8
10001316:	68 4b a4 00 10       	push   0x1000a44b	10001317: R_386_32	.text
1000131b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001321:	50                   	push   eax
10001322:	e8 fc ff ff ff       	call   10001323 <createUser(char const*)+0x164>	10001323: R_386_PC32	strcat
10001327:	83 c4 10             	add    esp,0x10
1000132a:	83 ec 08             	sub    esp,0x8
1000132d:	68 c0 01 00 00       	push   0x1c0
10001332:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001338:	50                   	push   eax
10001339:	e8 fc ff ff ff       	call   1000133a <createUser(char const*)+0x17b>	1000133a: R_386_PC32	mkdir(char const*, int)
1000133e:	83 c4 10             	add    esp,0x10
10001341:	83 ec 08             	sub    esp,0x8
10001344:	68 22 a4 00 10       	push   0x1000a422	10001345: R_386_32	.text
10001349:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000134f:	50                   	push   eax
10001350:	e8 fc ff ff ff       	call   10001351 <createUser(char const*)+0x192>	10001351: R_386_PC32	strcpy
10001355:	83 c4 10             	add    esp,0x10
10001358:	83 ec 08             	sub    esp,0x8
1000135b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000135e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001364:	50                   	push   eax
10001365:	e8 fc ff ff ff       	call   10001366 <createUser(char const*)+0x1a7>	10001366: R_386_PC32	strcat
1000136a:	83 c4 10             	add    esp,0x10
1000136d:	83 ec 08             	sub    esp,0x8
10001370:	68 55 a4 00 10       	push   0x1000a455	10001371: R_386_32	.text
10001375:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000137b:	50                   	push   eax
1000137c:	e8 fc ff ff ff       	call   1000137d <createUser(char const*)+0x1be>	1000137d: R_386_PC32	strcat
10001381:	83 c4 10             	add    esp,0x10
10001384:	83 ec 08             	sub    esp,0x8
10001387:	68 c0 01 00 00       	push   0x1c0
1000138c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001392:	50                   	push   eax
10001393:	e8 fc ff ff ff       	call   10001394 <createUser(char const*)+0x1d5>	10001394: R_386_PC32	mkdir(char const*, int)
10001398:	83 c4 10             	add    esp,0x10
1000139b:	83 ec 08             	sub    esp,0x8
1000139e:	68 22 a4 00 10       	push   0x1000a422	1000139f: R_386_32	.text
100013a3:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013a9:	50                   	push   eax
100013aa:	e8 fc ff ff ff       	call   100013ab <createUser(char const*)+0x1ec>	100013ab: R_386_PC32	strcpy
100013af:	83 c4 10             	add    esp,0x10
100013b2:	83 ec 08             	sub    esp,0x8
100013b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013b8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013be:	50                   	push   eax
100013bf:	e8 fc ff ff ff       	call   100013c0 <createUser(char const*)+0x201>	100013c0: R_386_PC32	strcat
100013c4:	83 c4 10             	add    esp,0x10
100013c7:	83 ec 08             	sub    esp,0x8
100013ca:	68 60 a4 00 10       	push   0x1000a460	100013cb: R_386_32	.text
100013cf:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013d5:	50                   	push   eax
100013d6:	e8 fc ff ff ff       	call   100013d7 <createUser(char const*)+0x218>	100013d7: R_386_PC32	strcat
100013db:	83 c4 10             	add    esp,0x10
100013de:	83 ec 08             	sub    esp,0x8
100013e1:	68 c0 01 00 00       	push   0x1c0
100013e6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013ec:	50                   	push   eax
100013ed:	e8 fc ff ff ff       	call   100013ee <createUser(char const*)+0x22f>	100013ee: R_386_PC32	mkdir(char const*, int)
100013f2:	83 c4 10             	add    esp,0x10
100013f5:	83 ec 08             	sub    esp,0x8
100013f8:	68 22 a4 00 10       	push   0x1000a422	100013f9: R_386_32	.text
100013fd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001403:	50                   	push   eax
10001404:	e8 fc ff ff ff       	call   10001405 <createUser(char const*)+0x246>	10001405: R_386_PC32	strcpy
10001409:	83 c4 10             	add    esp,0x10
1000140c:	83 ec 08             	sub    esp,0x8
1000140f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001412:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001418:	50                   	push   eax
10001419:	e8 fc ff ff ff       	call   1000141a <createUser(char const*)+0x25b>	1000141a: R_386_PC32	strcat
1000141e:	83 c4 10             	add    esp,0x10
10001421:	83 ec 08             	sub    esp,0x8
10001424:	68 67 a4 00 10       	push   0x1000a467	10001425: R_386_32	.text
10001429:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000142f:	50                   	push   eax
10001430:	e8 fc ff ff ff       	call   10001431 <createUser(char const*)+0x272>	10001431: R_386_PC32	strcat
10001435:	83 c4 10             	add    esp,0x10
10001438:	83 ec 08             	sub    esp,0x8
1000143b:	68 c0 01 00 00       	push   0x1c0
10001440:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001446:	50                   	push   eax
10001447:	e8 fc ff ff ff       	call   10001448 <createUser(char const*)+0x289>	10001448: R_386_PC32	mkdir(char const*, int)
1000144c:	83 c4 10             	add    esp,0x10
1000144f:	83 ec 08             	sub    esp,0x8
10001452:	68 6f a4 00 10       	push   0x1000a46f	10001453: R_386_32	.text
10001457:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000145d:	50                   	push   eax
1000145e:	e8 fc ff ff ff       	call   1000145f <createUser(char const*)+0x2a0>	1000145f: R_386_PC32	strcpy
10001463:	83 c4 10             	add    esp,0x10
10001466:	83 ec 08             	sub    esp,0x8
10001469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000146c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001472:	50                   	push   eax
10001473:	e8 fc ff ff ff       	call   10001474 <createUser(char const*)+0x2b5>	10001474: R_386_PC32	strcat
10001478:	83 c4 10             	add    esp,0x10
1000147b:	83 ec 08             	sub    esp,0x8
1000147e:	68 c0 01 00 00       	push   0x1c0
10001483:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001489:	50                   	push   eax
1000148a:	e8 fc ff ff ff       	call   1000148b <createUser(char const*)+0x2cc>	1000148b: R_386_PC32	mkdir(char const*, int)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	83 ec 08             	sub    esp,0x8
10001495:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000149b:	50                   	push   eax
1000149c:	68 88 a4 00 10       	push   0x1000a488	1000149d: R_386_32	.text
100014a1:	e8 fc ff ff ff       	call   100014a2 <createUser(char const*)+0x2e3>	100014a2: R_386_PC32	copytree(char*, char*)
100014a6:	83 c4 10             	add    esp,0x10
100014a9:	90                   	nop
100014aa:	c9                   	leave  
100014ab:	c3                   	ret    

100014ac <drawBootScreen()>:
100014ac:	55                   	push   ebp
100014ad:	89 e5                	mov    ebp,esp
100014af:	83 ec 18             	sub    esp,0x18
100014b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100014b3: R_386_32	term
100014b7:	83 ec 08             	sub    esp,0x8
100014ba:	6a 0b                	push   0xb
100014bc:	50                   	push   eax
100014bd:	e8 fc ff ff ff       	call   100014be <drawBootScreen()+0x12>	100014be: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
100014c2:	83 c4 10             	add    esp,0x10
100014c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100014c6: R_386_32	term
100014ca:	83 ec 08             	sub    esp,0x8
100014cd:	6a 00                	push   0x0
100014cf:	50                   	push   eax
100014d0:	e8 fc ff ff ff       	call   100014d1 <drawBootScreen()+0x25>	100014d1: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
100014d5:	83 c4 10             	add    esp,0x10
100014d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100014d9: R_386_32	term
100014dd:	83 ec 0c             	sub    esp,0xc
100014e0:	50                   	push   eax
100014e1:	e8 fc ff ff ff       	call   100014e2 <drawBootScreen()+0x36>	100014e2: R_386_PC32	VgaText::clearScreen()
100014e6:	83 c4 10             	add    esp,0x10
100014e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ea: R_386_32	term
100014ee:	83 ec 08             	sub    esp,0x8
100014f1:	68 a7 a4 00 10       	push   0x1000a4a7	100014f2: R_386_32	.text
100014f6:	50                   	push   eax
100014f7:	e8 fc ff ff ff       	call   100014f8 <drawBootScreen()+0x4c>	100014f8: R_386_PC32	VgaText::setTitle(char*)
100014fc:	83 c4 10             	add    esp,0x10
100014ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10001500: R_386_32	term
10001504:	83 ec 08             	sub    esp,0x8
10001507:	6a 00                	push   0x0
10001509:	50                   	push   eax
1000150a:	e8 fc ff ff ff       	call   1000150b <drawBootScreen()+0x5f>	1000150b: R_386_PC32	VgaText::setTitleColour(VgaColour)
1000150f:	83 c4 10             	add    esp,0x10
10001512:	a1 00 00 00 00       	mov    eax,ds:0x0	10001513: R_386_32	term
10001517:	83 ec 08             	sub    esp,0x8
1000151a:	6a 00                	push   0x0
1000151c:	50                   	push   eax
1000151d:	e8 fc ff ff ff       	call   1000151e <drawBootScreen()+0x72>	1000151e: R_386_PC32	VgaText::setTitleTextColour(VgaColour)
10001522:	83 c4 10             	add    esp,0x10
10001525:	a1 00 00 00 00       	mov    eax,ds:0x0	10001526: R_386_32	term
1000152a:	83 ec 04             	sub    esp,0x4
1000152d:	6a 00                	push   0x0
1000152f:	6a 00                	push   0x0
10001531:	50                   	push   eax
10001532:	e8 fc ff ff ff       	call   10001533 <drawBootScreen()+0x87>	10001533: R_386_PC32	VgaText::setCursor(int, int)
10001537:	83 c4 10             	add    esp,0x10
1000153a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001541:	83 7d f4 4f          	cmp    DWORD PTR [ebp-0xc],0x4f
10001545:	7f 19                	jg     10001560 <drawBootScreen()+0xb4>
10001547:	a1 00 00 00 00       	mov    eax,ds:0x0	10001548: R_386_32	term
1000154c:	6a 00                	push   0x0
1000154e:	6a 00                	push   0x0
10001550:	6a 20                	push   0x20
10001552:	50                   	push   eax
10001553:	e8 fc ff ff ff       	call   10001554 <drawBootScreen()+0xa8>	10001554: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001558:	83 c4 10             	add    esp,0x10
1000155b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000155e:	eb e1                	jmp    10001541 <drawBootScreen()+0x95>
10001560:	a0 00 00 00 00       	mov    al,ds:0x0	10001561: R_386_32	showSidebar
10001565:	84 c0                	test   al,al
10001567:	0f 84 91 00 00 00    	je     100015fe <drawBootScreen()+0x152>
1000156d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10001574:	83 7d f0 18          	cmp    DWORD PTR [ebp-0x10],0x18
10001578:	7f 41                	jg     100015bb <drawBootScreen()+0x10f>
1000157a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000157b: R_386_32	term
1000157f:	83 ec 04             	sub    esp,0x4
10001582:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001585:	6a 00                	push   0x0
10001587:	50                   	push   eax
10001588:	e8 fc ff ff ff       	call   10001589 <drawBootScreen()+0xdd>	10001589: R_386_PC32	VgaText::setCursor(int, int)
1000158d:	83 c4 10             	add    esp,0x10
10001590:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001597:	83 7d ec 0f          	cmp    DWORD PTR [ebp-0x14],0xf
1000159b:	7f 19                	jg     100015b6 <drawBootScreen()+0x10a>
1000159d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000159e: R_386_32	term
100015a2:	6a 00                	push   0x0
100015a4:	6a 00                	push   0x0
100015a6:	6a 20                	push   0x20
100015a8:	50                   	push   eax
100015a9:	e8 fc ff ff ff       	call   100015aa <drawBootScreen()+0xfe>	100015aa: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100015ae:	83 c4 10             	add    esp,0x10
100015b1:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100015b4:	eb e1                	jmp    10001597 <drawBootScreen()+0xeb>
100015b6:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100015b9:	eb b9                	jmp    10001574 <drawBootScreen()+0xc8>
100015bb:	a1 00 00 00 00       	mov    eax,ds:0x0	100015bc: R_386_32	term
100015c0:	83 ec 04             	sub    esp,0x4
100015c3:	6a 01                	push   0x1
100015c5:	6a 01                	push   0x1
100015c7:	50                   	push   eax
100015c8:	e8 fc ff ff ff       	call   100015c9 <drawBootScreen()+0x11d>	100015c9: R_386_PC32	VgaText::setCursor(int, int)
100015cd:	83 c4 10             	add    esp,0x10
100015d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100015d1: R_386_32	term
100015d5:	6a 00                	push   0x0
100015d7:	6a 0f                	push   0xf
100015d9:	68 a8 a4 00 10       	push   0x1000a4a8	100015da: R_386_32	.text
100015de:	50                   	push   eax
100015df:	e8 fc ff ff ff       	call   100015e0 <drawBootScreen()+0x134>	100015e0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015e4:	83 c4 10             	add    esp,0x10
100015e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100015e8: R_386_32	term
100015ec:	6a 00                	push   0x0
100015ee:	6a 0e                	push   0xe
100015f0:	68 2b a5 00 10       	push   0x1000a52b	100015f1: R_386_32	.text
100015f5:	50                   	push   eax
100015f6:	e8 fc ff ff ff       	call   100015f7 <drawBootScreen()+0x14b>	100015f7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015fb:	83 c4 10             	add    esp,0x10
100015fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100015ff: R_386_32	term
10001603:	83 ec 08             	sub    esp,0x8
10001606:	6a 0f                	push   0xf
10001608:	50                   	push   eax
10001609:	e8 fc ff ff ff       	call   1000160a <drawBootScreen()+0x15e>	1000160a: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
1000160e:	83 c4 10             	add    esp,0x10
10001611:	a1 00 00 00 00       	mov    eax,ds:0x0	10001612: R_386_32	term
10001616:	83 ec 08             	sub    esp,0x8
10001619:	6a 00                	push   0x0
1000161b:	50                   	push   eax
1000161c:	e8 fc ff ff ff       	call   1000161d <drawBootScreen()+0x171>	1000161d: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
10001621:	83 c4 10             	add    esp,0x10
10001624:	90                   	nop
10001625:	c9                   	leave  
10001626:	c3                   	ret    

10001627 <drawBasicWindowX(int, int, int, int, char const*, bool)>:
10001627:	55                   	push   ebp
10001628:	89 e5                	mov    ebp,esp
1000162a:	53                   	push   ebx
1000162b:	83 ec 34             	sub    esp,0x34
1000162e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001631:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
10001634:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10001637:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000163e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001641:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
10001644:	7d 6c                	jge    100016b2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x8b>
10001646:	a1 00 00 00 00       	mov    eax,ds:0x0	10001647: R_386_32	term
1000164b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000164e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001651:	01 ca                	add    edx,ecx
10001653:	83 ec 04             	sub    esp,0x4
10001656:	52                   	push   edx
10001657:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000165a:	50                   	push   eax
1000165b:	e8 fc ff ff ff       	call   1000165c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x35>	1000165c: R_386_PC32	VgaText::setCursor(int, int)
10001660:	83 c4 10             	add    esp,0x10
10001663:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000166a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000166d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001670:	7d 3b                	jge    100016ad <drawBasicWindowX(int, int, int, int, char const*, bool)+0x86>
10001672:	a1 00 00 00 00       	mov    eax,ds:0x0	10001673: R_386_32	term
10001677:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000167b:	74 07                	je     10001684 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x5d>
1000167d:	b9 07 00 00 00       	mov    ecx,0x7
10001682:	eb 05                	jmp    10001689 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x62>
10001684:	b9 0f 00 00 00       	mov    ecx,0xf
10001689:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000168d:	74 07                	je     10001696 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x6f>
1000168f:	ba 07 00 00 00       	mov    edx,0x7
10001694:	eb 05                	jmp    1000169b <drawBasicWindowX(int, int, int, int, char const*, bool)+0x74>
10001696:	ba 0f 00 00 00       	mov    edx,0xf
1000169b:	51                   	push   ecx
1000169c:	52                   	push   edx
1000169d:	6a 20                	push   0x20
1000169f:	50                   	push   eax
100016a0:	e8 fc ff ff ff       	call   100016a1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x7a>	100016a1: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016a5:	83 c4 10             	add    esp,0x10
100016a8:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100016ab:	eb bd                	jmp    1000166a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x43>
100016ad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100016b0:	eb 8c                	jmp    1000163e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17>
100016b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100016b3: R_386_32	term
100016b7:	83 ec 04             	sub    esp,0x4
100016ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100016bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016c0:	50                   	push   eax
100016c1:	e8 fc ff ff ff       	call   100016c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x9b>	100016c2: R_386_PC32	VgaText::setCursor(int, int)
100016c6:	83 c4 10             	add    esp,0x10
100016c9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100016d0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100016d3:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100016d6:	7d 19                	jge    100016f1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xca>
100016d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100016d9: R_386_32	term
100016dd:	6a 01                	push   0x1
100016df:	6a 01                	push   0x1
100016e1:	6a 20                	push   0x20
100016e3:	50                   	push   eax
100016e4:	e8 fc ff ff ff       	call   100016e5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xbe>	100016e5: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016e9:	83 c4 10             	add    esp,0x10
100016ec:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100016ef:	eb df                	jmp    100016d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xa9>
100016f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100016f2: R_386_32	term
100016f6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100016f9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100016fc:	01 d1                	add    ecx,edx
100016fe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001701:	42                   	inc    edx
10001702:	83 ec 04             	sub    esp,0x4
10001705:	51                   	push   ecx
10001706:	52                   	push   edx
10001707:	50                   	push   eax
10001708:	e8 fc ff ff ff       	call   10001709 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe2>	10001709: R_386_PC32	VgaText::setCursor(int, int)
1000170d:	83 c4 10             	add    esp,0x10
10001710:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10001717:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000171a:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
1000171d:	7d 19                	jge    10001738 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x111>
1000171f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001720: R_386_32	term
10001724:	6a 03                	push   0x3
10001726:	6a 03                	push   0x3
10001728:	6a 20                	push   0x20
1000172a:	50                   	push   eax
1000172b:	e8 fc ff ff ff       	call   1000172c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x105>	1000172c: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001730:	83 c4 10             	add    esp,0x10
10001733:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10001736:	eb df                	jmp    10001717 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xf0>
10001738:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000173b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000173e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001741:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001744:	01 d0                	add    eax,edx
10001746:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001749:	0f 8d 89 00 00 00    	jge    100017d8 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b1>
1000174f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001750: R_386_32	term
10001754:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001757:	8d 4a 01             	lea    ecx,[edx+0x1]
1000175a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
1000175d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001760:	01 da                	add    edx,ebx
10001762:	83 ec 04             	sub    esp,0x4
10001765:	51                   	push   ecx
10001766:	52                   	push   edx
10001767:	50                   	push   eax
10001768:	e8 fc ff ff ff       	call   10001769 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x142>	10001769: R_386_PC32	VgaText::setCursor(int, int)
1000176d:	83 c4 10             	add    esp,0x10
10001770:	a1 00 00 00 00       	mov    eax,ds:0x0	10001771: R_386_32	term
10001775:	6a 03                	push   0x3
10001777:	6a 03                	push   0x3
10001779:	6a 20                	push   0x20
1000177b:	50                   	push   eax
1000177c:	e8 fc ff ff ff       	call   1000177d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x156>	1000177d: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001781:	83 c4 10             	add    esp,0x10
10001784:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001787:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000178a:	01 d0                	add    eax,edx
1000178c:	48                   	dec    eax
1000178d:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001790:	74 3e                	je     100017d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a9>
10001792:	a1 00 00 00 00       	mov    eax,ds:0x0	10001793: R_386_32	term
10001797:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000179a:	42                   	inc    edx
1000179b:	83 ec 04             	sub    esp,0x4
1000179e:	52                   	push   edx
1000179f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100017a2:	50                   	push   eax
100017a3:	e8 fc ff ff ff       	call   100017a4 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17d>	100017a4: R_386_PC32	VgaText::setCursor(int, int)
100017a8:	83 c4 10             	add    esp,0x10
100017ab:	a1 00 00 00 00       	mov    eax,ds:0x0	100017ac: R_386_32	term
100017b0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100017b4:	74 07                	je     100017bd <drawBasicWindowX(int, int, int, int, char const*, bool)+0x196>
100017b6:	ba 07 00 00 00       	mov    edx,0x7
100017bb:	eb 05                	jmp    100017c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x19b>
100017bd:	ba 0f 00 00 00       	mov    edx,0xf
100017c2:	52                   	push   edx
100017c3:	6a 00                	push   0x0
100017c5:	6a dd                	push   0xffffffdd
100017c7:	50                   	push   eax
100017c8:	e8 fc ff ff ff       	call   100017c9 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a2>	100017c9: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100017cd:	83 c4 10             	add    esp,0x10
100017d0:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100017d3:	e9 66 ff ff ff       	jmp    1000173e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x117>
100017d8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100017db:	83 ec 0c             	sub    esp,0xc
100017de:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100017e1:	e8 fc ff ff ff       	call   100017e2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1bb>	100017e2: R_386_PC32	strlen
100017e6:	83 c4 10             	add    esp,0x10
100017e9:	29 c3                	sub    ebx,eax
100017eb:	89 d8                	mov    eax,ebx
100017ed:	d1 e8                	shr    eax,1
100017ef:	48                   	dec    eax
100017f0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100017f3:	a1 00 00 00 00       	mov    eax,ds:0x0	100017f4: R_386_32	term
100017f8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100017fb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100017fe:	01 ca                	add    edx,ecx
10001800:	83 ec 04             	sub    esp,0x4
10001803:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001806:	52                   	push   edx
10001807:	50                   	push   eax
10001808:	e8 fc ff ff ff       	call   10001809 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1e2>	10001809: R_386_PC32	VgaText::setCursor(int, int)
1000180d:	83 c4 10             	add    esp,0x10
10001810:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10001817:	83 ec 0c             	sub    esp,0xc
1000181a:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000181d:	e8 fc ff ff ff       	call   1000181e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f7>	1000181e: R_386_PC32	strlen
10001822:	83 c4 10             	add    esp,0x10
10001825:	89 c2                	mov    edx,eax
10001827:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000182a:	39 c2                	cmp    edx,eax
1000182c:	76 25                	jbe    10001853 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x22c>
1000182e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000182f: R_386_32	term
10001833:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001836:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001839:	01 ca                	add    edx,ecx
1000183b:	8a 12                	mov    dl,BYTE PTR [edx]
1000183d:	0f be d2             	movsx  edx,dl
10001840:	6a 01                	push   0x1
10001842:	6a 0f                	push   0xf
10001844:	52                   	push   edx
10001845:	50                   	push   eax
10001846:	e8 fc ff ff ff       	call   10001847 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x220>	10001847: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000184b:	83 c4 10             	add    esp,0x10
1000184e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10001851:	eb c4                	jmp    10001817 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f0>
10001853:	90                   	nop
10001854:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001857:	c9                   	leave  
10001858:	c3                   	ret    

10001859 <drawBasicWindow(int, int, int, int, char const*)>:
10001859:	55                   	push   ebp
1000185a:	89 e5                	mov    ebp,esp
1000185c:	83 ec 08             	sub    esp,0x8
1000185f:	83 ec 08             	sub    esp,0x8
10001862:	6a 00                	push   0x0
10001864:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001867:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000186a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000186d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001870:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001873:	e8 fc ff ff ff       	call   10001874 <drawBasicWindow(int, int, int, int, char const*)+0x1b>	10001874: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10001878:	83 c4 20             	add    esp,0x20
1000187b:	90                   	nop
1000187c:	c9                   	leave  
1000187d:	c3                   	ret    

1000187e <bootInstallKeybrd(KeyboardToken, bool*)>:
1000187e:	55                   	push   ebp
1000187f:	89 e5                	mov    ebp,esp
10001881:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001884:	05 04 01 00 00       	add    eax,0x104
10001889:	8a 00                	mov    al,BYTE PTR [eax]
1000188b:	84 c0                	test   al,al
1000188d:	74 15                	je     100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
1000188f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001892:	66 83 f8 09          	cmp    ax,0x9
10001896:	75 0c                	jne    100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
10001898:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	1000189a: R_386_32	installKey
1000189f:	e9 94 00 00 00       	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018a4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
100018a7:	84 c0                	test   al,al
100018a9:	0f 85 88 00 00 00    	jne    10001937 <bootInstallKeybrd(KeyboardToken, bool*)+0xb9>
100018af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b2:	66 3d 0a 02          	cmp    ax,0x20a
100018b6:	75 09                	jne    100018c1 <bootInstallKeybrd(KeyboardToken, bool*)+0x43>
100018b8:	c6 05 00 00 00 00 1b 	mov    BYTE PTR ds:0x0,0x1b	100018ba: R_386_32	installKey
100018bf:	eb 77                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018c4:	66 3d 0d 02          	cmp    ax,0x20d
100018c8:	75 09                	jne    100018d3 <bootInstallKeybrd(KeyboardToken, bool*)+0x55>
100018ca:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	100018cc: R_386_32	installKey
100018d1:	eb 65                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018d6:	66 3d 0e 02          	cmp    ax,0x20e
100018da:	75 09                	jne    100018e5 <bootInstallKeybrd(KeyboardToken, bool*)+0x67>
100018dc:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	100018de: R_386_32	installKey
100018e3:	eb 53                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018e8:	66 3d 0b 02          	cmp    ax,0x20b
100018ec:	75 09                	jne    100018f7 <bootInstallKeybrd(KeyboardToken, bool*)+0x79>
100018ee:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100018f0: R_386_32	installKey
100018f5:	eb 41                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018fa:	66 3d 0c 02          	cmp    ax,0x20c
100018fe:	75 09                	jne    10001909 <bootInstallKeybrd(KeyboardToken, bool*)+0x8b>
10001900:	c6 05 00 00 00 00 02 	mov    BYTE PTR ds:0x0,0x2	10001902: R_386_32	installKey
10001907:	eb 2f                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000190c:	66 3d 05 02          	cmp    ax,0x205
10001910:	75 09                	jne    1000191b <bootInstallKeybrd(KeyboardToken, bool*)+0x9d>
10001912:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	10001914: R_386_32	installKey
10001919:	eb 1d                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000191b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000191e:	66 3d 05 02          	cmp    ax,0x205
10001922:	75 09                	jne    1000192d <bootInstallKeybrd(KeyboardToken, bool*)+0xaf>
10001924:	c6 05 00 00 00 00 7e 	mov    BYTE PTR ds:0x0,0x7e	10001926: R_386_32	installKey
1000192b:	eb 0b                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000192d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001930:	a2 00 00 00 00       	mov    ds:0x0,al	10001931: R_386_32	installKey
10001935:	eb 01                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001937:	90                   	nop
10001938:	5d                   	pop    ebp
10001939:	c3                   	ret    

1000193a <bootInstallTasks(int)>:
1000193a:	55                   	push   ebp
1000193b:	89 e5                	mov    ebp,esp
1000193d:	83 ec 08             	sub    esp,0x8
10001940:	a1 00 00 00 00       	mov    eax,ds:0x0	10001941: R_386_32	term
10001945:	83 ec 04             	sub    esp,0x4
10001948:	6a 08                	push   0x8
1000194a:	6a 18                	push   0x18
1000194c:	50                   	push   eax
1000194d:	e8 fc ff ff ff       	call   1000194e <bootInstallTasks(int)+0x14>	1000194e: R_386_PC32	VgaText::setCursor(int, int)
10001952:	83 c4 10             	add    esp,0x10
10001955:	a1 00 00 00 00       	mov    eax,ds:0x0	10001956: R_386_32	term
1000195a:	83 ec 08             	sub    esp,0x8
1000195d:	68 4c a5 00 10       	push   0x1000a54c	1000195e: R_386_32	.text
10001962:	50                   	push   eax
10001963:	e8 fc ff ff ff       	call   10001964 <bootInstallTasks(int)+0x2a>	10001964: R_386_PC32	VgaText::puts(char const*)
10001968:	83 c4 10             	add    esp,0x10
1000196b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000196c: R_386_32	term
10001970:	83 ec 04             	sub    esp,0x4
10001973:	6a 0a                	push   0xa
10001975:	6a 1a                	push   0x1a
10001977:	50                   	push   eax
10001978:	e8 fc ff ff ff       	call   10001979 <bootInstallTasks(int)+0x3f>	10001979: R_386_PC32	VgaText::setCursor(int, int)
1000197d:	83 c4 10             	add    esp,0x10
10001980:	a1 00 00 00 00       	mov    eax,ds:0x0	10001981: R_386_32	term
10001985:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001989:	75 07                	jne    10001992 <bootInstallTasks(int)+0x58>
1000198b:	ba 74 a5 00 10       	mov    edx,0x1000a574	1000198c: R_386_32	.text
10001990:	eb 05                	jmp    10001997 <bootInstallTasks(int)+0x5d>
10001992:	ba 77 a5 00 10       	mov    edx,0x1000a577	10001993: R_386_32	.text
10001997:	83 ec 08             	sub    esp,0x8
1000199a:	52                   	push   edx
1000199b:	50                   	push   eax
1000199c:	e8 fc ff ff ff       	call   1000199d <bootInstallTasks(int)+0x63>	1000199d: R_386_PC32	VgaText::puts(char const*)
100019a1:	83 c4 10             	add    esp,0x10
100019a4:	a1 00 00 00 00       	mov    eax,ds:0x0	100019a5: R_386_32	term
100019a9:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
100019ad:	78 07                	js     100019b6 <bootInstallTasks(int)+0x7c>
100019af:	ba 00 00 00 00       	mov    edx,0x0
100019b4:	eb 05                	jmp    100019bb <bootInstallTasks(int)+0x81>
100019b6:	ba 07 00 00 00       	mov    edx,0x7
100019bb:	6a 0f                	push   0xf
100019bd:	52                   	push   edx
100019be:	68 7a a5 00 10       	push   0x1000a57a	100019bf: R_386_32	.text
100019c3:	50                   	push   eax
100019c4:	e8 fc ff ff ff       	call   100019c5 <bootInstallTasks(int)+0x8b>	100019c5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100019c9:	83 c4 10             	add    esp,0x10
100019cc:	a1 00 00 00 00       	mov    eax,ds:0x0	100019cd: R_386_32	term
100019d1:	83 ec 04             	sub    esp,0x4
100019d4:	6a 0b                	push   0xb
100019d6:	6a 1a                	push   0x1a
100019d8:	50                   	push   eax
100019d9:	e8 fc ff ff ff       	call   100019da <bootInstallTasks(int)+0xa0>	100019da: R_386_PC32	VgaText::setCursor(int, int)
100019de:	83 c4 10             	add    esp,0x10
100019e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100019e2: R_386_32	term
100019e6:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
100019ea:	75 07                	jne    100019f3 <bootInstallTasks(int)+0xb9>
100019ec:	ba 74 a5 00 10       	mov    edx,0x1000a574	100019ed: R_386_32	.text
100019f1:	eb 05                	jmp    100019f8 <bootInstallTasks(int)+0xbe>
100019f3:	ba 77 a5 00 10       	mov    edx,0x1000a577	100019f4: R_386_32	.text
100019f8:	83 ec 08             	sub    esp,0x8
100019fb:	52                   	push   edx
100019fc:	50                   	push   eax
100019fd:	e8 fc ff ff ff       	call   100019fe <bootInstallTasks(int)+0xc4>	100019fe: R_386_PC32	VgaText::puts(char const*)
10001a02:	83 c4 10             	add    esp,0x10
10001a05:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a06: R_386_32	term
10001a0a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001a0e:	7e 07                	jle    10001a17 <bootInstallTasks(int)+0xdd>
10001a10:	ba 00 00 00 00       	mov    edx,0x0
10001a15:	eb 05                	jmp    10001a1c <bootInstallTasks(int)+0xe2>
10001a17:	ba 07 00 00 00       	mov    edx,0x7
10001a1c:	6a 0f                	push   0xf
10001a1e:	52                   	push   edx
10001a1f:	68 92 a5 00 10       	push   0x1000a592	10001a20: R_386_32	.text
10001a24:	50                   	push   eax
10001a25:	e8 fc ff ff ff       	call   10001a26 <bootInstallTasks(int)+0xec>	10001a26: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a2a:	83 c4 10             	add    esp,0x10
10001a2d:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a2e: R_386_32	term
10001a32:	83 ec 04             	sub    esp,0x4
10001a35:	6a 0c                	push   0xc
10001a37:	6a 1a                	push   0x1a
10001a39:	50                   	push   eax
10001a3a:	e8 fc ff ff ff       	call   10001a3b <bootInstallTasks(int)+0x101>	10001a3b: R_386_PC32	VgaText::setCursor(int, int)
10001a3f:	83 c4 10             	add    esp,0x10
10001a42:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a43: R_386_32	term
10001a47:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001a4b:	75 07                	jne    10001a54 <bootInstallTasks(int)+0x11a>
10001a4d:	ba 74 a5 00 10       	mov    edx,0x1000a574	10001a4e: R_386_32	.text
10001a52:	eb 05                	jmp    10001a59 <bootInstallTasks(int)+0x11f>
10001a54:	ba 77 a5 00 10       	mov    edx,0x1000a577	10001a55: R_386_32	.text
10001a59:	83 ec 08             	sub    esp,0x8
10001a5c:	52                   	push   edx
10001a5d:	50                   	push   eax
10001a5e:	e8 fc ff ff ff       	call   10001a5f <bootInstallTasks(int)+0x125>	10001a5f: R_386_PC32	VgaText::puts(char const*)
10001a63:	83 c4 10             	add    esp,0x10
10001a66:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a67: R_386_32	term
10001a6b:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
10001a6f:	7e 07                	jle    10001a78 <bootInstallTasks(int)+0x13e>
10001a71:	ba 00 00 00 00       	mov    edx,0x0
10001a76:	eb 05                	jmp    10001a7d <bootInstallTasks(int)+0x143>
10001a78:	ba 07 00 00 00       	mov    edx,0x7
10001a7d:	6a 0f                	push   0xf
10001a7f:	52                   	push   edx
10001a80:	68 a8 a5 00 10       	push   0x1000a5a8	10001a81: R_386_32	.text
10001a85:	50                   	push   eax
10001a86:	e8 fc ff ff ff       	call   10001a87 <bootInstallTasks(int)+0x14d>	10001a87: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a8b:	83 c4 10             	add    esp,0x10
10001a8e:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a8f: R_386_32	term
10001a93:	83 ec 04             	sub    esp,0x4
10001a96:	6a 0d                	push   0xd
10001a98:	6a 1a                	push   0x1a
10001a9a:	50                   	push   eax
10001a9b:	e8 fc ff ff ff       	call   10001a9c <bootInstallTasks(int)+0x162>	10001a9c: R_386_PC32	VgaText::setCursor(int, int)
10001aa0:	83 c4 10             	add    esp,0x10
10001aa3:	a1 00 00 00 00       	mov    eax,ds:0x0	10001aa4: R_386_32	term
10001aa8:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001aac:	75 07                	jne    10001ab5 <bootInstallTasks(int)+0x17b>
10001aae:	ba 74 a5 00 10       	mov    edx,0x1000a574	10001aaf: R_386_32	.text
10001ab3:	eb 05                	jmp    10001aba <bootInstallTasks(int)+0x180>
10001ab5:	ba 77 a5 00 10       	mov    edx,0x1000a577	10001ab6: R_386_32	.text
10001aba:	83 ec 08             	sub    esp,0x8
10001abd:	52                   	push   edx
10001abe:	50                   	push   eax
10001abf:	e8 fc ff ff ff       	call   10001ac0 <bootInstallTasks(int)+0x186>	10001ac0: R_386_PC32	VgaText::puts(char const*)
10001ac4:	83 c4 10             	add    esp,0x10
10001ac7:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ac8: R_386_32	term
10001acc:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001ad0:	7e 07                	jle    10001ad9 <bootInstallTasks(int)+0x19f>
10001ad2:	ba 00 00 00 00       	mov    edx,0x0
10001ad7:	eb 05                	jmp    10001ade <bootInstallTasks(int)+0x1a4>
10001ad9:	ba 07 00 00 00       	mov    edx,0x7
10001ade:	6a 0f                	push   0xf
10001ae0:	52                   	push   edx
10001ae1:	68 be a5 00 10       	push   0x1000a5be	10001ae2: R_386_32	.text
10001ae6:	50                   	push   eax
10001ae7:	e8 fc ff ff ff       	call   10001ae8 <bootInstallTasks(int)+0x1ae>	10001ae8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001aec:	83 c4 10             	add    esp,0x10
10001aef:	a1 00 00 00 00       	mov    eax,ds:0x0	10001af0: R_386_32	term
10001af4:	83 ec 04             	sub    esp,0x4
10001af7:	6a 0e                	push   0xe
10001af9:	6a 1a                	push   0x1a
10001afb:	50                   	push   eax
10001afc:	e8 fc ff ff ff       	call   10001afd <bootInstallTasks(int)+0x1c3>	10001afd: R_386_PC32	VgaText::setCursor(int, int)
10001b01:	83 c4 10             	add    esp,0x10
10001b04:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b05: R_386_32	term
10001b09:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b0d:	75 07                	jne    10001b16 <bootInstallTasks(int)+0x1dc>
10001b0f:	ba 74 a5 00 10       	mov    edx,0x1000a574	10001b10: R_386_32	.text
10001b14:	eb 05                	jmp    10001b1b <bootInstallTasks(int)+0x1e1>
10001b16:	ba 77 a5 00 10       	mov    edx,0x1000a577	10001b17: R_386_32	.text
10001b1b:	83 ec 08             	sub    esp,0x8
10001b1e:	52                   	push   edx
10001b1f:	50                   	push   eax
10001b20:	e8 fc ff ff ff       	call   10001b21 <bootInstallTasks(int)+0x1e7>	10001b21: R_386_PC32	VgaText::puts(char const*)
10001b25:	83 c4 10             	add    esp,0x10
10001b28:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b29: R_386_32	term
10001b2d:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001b31:	7e 07                	jle    10001b3a <bootInstallTasks(int)+0x200>
10001b33:	ba 00 00 00 00       	mov    edx,0x0
10001b38:	eb 05                	jmp    10001b3f <bootInstallTasks(int)+0x205>
10001b3a:	ba 07 00 00 00       	mov    edx,0x7
10001b3f:	6a 0f                	push   0xf
10001b41:	52                   	push   edx
10001b42:	68 d2 a5 00 10       	push   0x1000a5d2	10001b43: R_386_32	.text
10001b47:	50                   	push   eax
10001b48:	e8 fc ff ff ff       	call   10001b49 <bootInstallTasks(int)+0x20f>	10001b49: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001b4d:	83 c4 10             	add    esp,0x10
10001b50:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b51: R_386_32	term
10001b55:	83 ec 04             	sub    esp,0x4
10001b58:	6a 0f                	push   0xf
10001b5a:	6a 1a                	push   0x1a
10001b5c:	50                   	push   eax
10001b5d:	e8 fc ff ff ff       	call   10001b5e <bootInstallTasks(int)+0x224>	10001b5e: R_386_PC32	VgaText::setCursor(int, int)
10001b62:	83 c4 10             	add    esp,0x10
10001b65:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b66: R_386_32	term
10001b6a:	83 7d 08 05          	cmp    DWORD PTR [ebp+0x8],0x5
10001b6e:	75 07                	jne    10001b77 <bootInstallTasks(int)+0x23d>
10001b70:	ba 74 a5 00 10       	mov    edx,0x1000a574	10001b71: R_386_32	.text
10001b75:	eb 05                	jmp    10001b7c <bootInstallTasks(int)+0x242>
10001b77:	ba 77 a5 00 10       	mov    edx,0x1000a577	10001b78: R_386_32	.text
10001b7c:	83 ec 08             	sub    esp,0x8
10001b7f:	52                   	push   edx
10001b80:	50                   	push   eax
10001b81:	e8 fc ff ff ff       	call   10001b82 <bootInstallTasks(int)+0x248>	10001b82: R_386_PC32	VgaText::puts(char const*)
10001b86:	83 c4 10             	add    esp,0x10
10001b89:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b8a: R_386_32	term
10001b8e:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b92:	7e 07                	jle    10001b9b <bootInstallTasks(int)+0x261>
10001b94:	ba 00 00 00 00       	mov    edx,0x0
10001b99:	eb 05                	jmp    10001ba0 <bootInstallTasks(int)+0x266>
10001b9b:	ba 07 00 00 00       	mov    edx,0x7
10001ba0:	6a 0f                	push   0xf
10001ba2:	52                   	push   edx
10001ba3:	68 ea a5 00 10       	push   0x1000a5ea	10001ba4: R_386_32	.text
10001ba8:	50                   	push   eax
10001ba9:	e8 fc ff ff ff       	call   10001baa <bootInstallTasks(int)+0x270>	10001baa: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001bae:	83 c4 10             	add    esp,0x10
10001bb1:	90                   	nop
10001bb2:	c9                   	leave  
10001bb3:	c3                   	ret    

10001bb4 <ror(unsigned long long, int, int)>:
10001bb4:	55                   	push   ebp
10001bb5:	89 e5                	mov    ebp,esp
10001bb7:	56                   	push   esi
10001bb8:	53                   	push   ebx
10001bb9:	83 ec 20             	sub    esp,0x20
10001bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bbf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001bc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001bc5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001bc8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001bcb:	ba 01 00 00 00       	mov    edx,0x1
10001bd0:	88 c1                	mov    cl,al
10001bd2:	d3 e2                	shl    edx,cl
10001bd4:	89 d0                	mov    eax,edx
10001bd6:	48                   	dec    eax
10001bd7:	99                   	cdq    
10001bd8:	89 c1                	mov    ecx,eax
10001bda:	23 4d e0             	and    ecx,DWORD PTR [ebp-0x20]
10001bdd:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001be0:	89 d0                	mov    eax,edx
10001be2:	23 45 e4             	and    eax,DWORD PTR [ebp-0x1c]
10001be5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001be8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10001beb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001bee:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001bf1:	0f ad d0             	shrd   eax,edx,cl
10001bf4:	d3 ea                	shr    edx,cl
10001bf6:	f6 c1 20             	test   cl,0x20
10001bf9:	74 04                	je     10001bff <ror(unsigned long long, int, int)+0x4b>
10001bfb:	89 d0                	mov    eax,edx
10001bfd:	31 d2                	xor    edx,edx
10001bff:	89 c3                	mov    ebx,eax
10001c01:	89 d6                	mov    esi,edx
10001c03:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c06:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
10001c09:	89 c1                	mov    ecx,eax
10001c0b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c0e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c11:	0f a5 c2             	shld   edx,eax,cl
10001c14:	d3 e0                	shl    eax,cl
10001c16:	f6 c1 20             	test   cl,0x20
10001c19:	74 04                	je     10001c1f <ror(unsigned long long, int, int)+0x6b>
10001c1b:	89 c2                	mov    edx,eax
10001c1d:	31 c0                	xor    eax,eax
10001c1f:	89 d1                	mov    ecx,edx
10001c21:	89 c2                	mov    edx,eax
10001c23:	89 d8                	mov    eax,ebx
10001c25:	09 d0                	or     eax,edx
10001c27:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001c2a:	89 f0                	mov    eax,esi
10001c2c:	09 c8                	or     eax,ecx
10001c2e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001c31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001c34:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001c37:	83 c4 20             	add    esp,0x20
10001c3a:	5b                   	pop    ebx
10001c3b:	5e                   	pop    esi
10001c3c:	5d                   	pop    ebp
10001c3d:	c3                   	ret    

10001c3e <swapBits(unsigned long long, unsigned long long, unsigned long long)>:
10001c3e:	55                   	push   ebp
10001c3f:	89 e5                	mov    ebp,esp
10001c41:	56                   	push   esi
10001c42:	53                   	push   ebx
10001c43:	83 ec 40             	sub    esp,0x40
10001c46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c49:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001c4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001c4f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001c52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001c55:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001c58:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c5b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001c5e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001c61:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001c64:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001c67:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001c6a:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001c6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c70:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c73:	0f ad d0             	shrd   eax,edx,cl
10001c76:	d3 ea                	shr    edx,cl
10001c78:	f6 c1 20             	test   cl,0x20
10001c7b:	74 04                	je     10001c81 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x43>
10001c7d:	89 d0                	mov    eax,edx
10001c7f:	31 d2                	xor    edx,edx
10001c81:	89 c3                	mov    ebx,eax
10001c83:	89 d6                	mov    esi,edx
10001c85:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001c88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c8b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c8e:	0f ad d0             	shrd   eax,edx,cl
10001c91:	d3 ea                	shr    edx,cl
10001c93:	f6 c1 20             	test   cl,0x20
10001c96:	74 04                	je     10001c9c <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x5e>
10001c98:	89 d0                	mov    eax,edx
10001c9a:	31 d2                	xor    edx,edx
10001c9c:	89 d1                	mov    ecx,edx
10001c9e:	89 c2                	mov    edx,eax
10001ca0:	89 d8                	mov    eax,ebx
10001ca2:	31 d0                	xor    eax,edx
10001ca4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001ca7:	89 f0                	mov    eax,esi
10001ca9:	31 c8                	xor    eax,ecx
10001cab:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001cae:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001cb1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001cb4:	89 c6                	mov    esi,eax
10001cb6:	83 e6 01             	and    esi,0x1
10001cb9:	89 75 c8             	mov    DWORD PTR [ebp-0x38],esi
10001cbc:	89 d0                	mov    eax,edx
10001cbe:	83 e0 00             	and    eax,0x0
10001cc1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001cc4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001cc7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10001cca:	89 c3                	mov    ebx,eax
10001ccc:	80 f7 00             	xor    bh,0x0
10001ccf:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
10001cd2:	89 d0                	mov    eax,edx
10001cd4:	80 f4 00             	xor    ah,0x0
10001cd7:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001cda:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10001cdd:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10001ce0:	89 c8                	mov    eax,ecx
10001ce2:	09 d0                	or     eax,edx
10001ce4:	85 c0                	test   eax,eax
10001ce6:	74 62                	je     10001d4a <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x10c>
10001ce8:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001ceb:	b8 01 00 00 00       	mov    eax,0x1
10001cf0:	ba 00 00 00 00       	mov    edx,0x0
10001cf5:	0f a5 c2             	shld   edx,eax,cl
10001cf8:	d3 e0                	shl    eax,cl
10001cfa:	f6 c1 20             	test   cl,0x20
10001cfd:	74 04                	je     10001d03 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xc5>
10001cff:	89 c2                	mov    edx,eax
10001d01:	31 c0                	xor    eax,eax
10001d03:	89 c3                	mov    ebx,eax
10001d05:	89 d6                	mov    esi,edx
10001d07:	89 d8                	mov    eax,ebx
10001d09:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001d0c:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10001d0f:	89 f0                	mov    eax,esi
10001d11:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001d14:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001d17:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001d1a:	b8 01 00 00 00       	mov    eax,0x1
10001d1f:	ba 00 00 00 00       	mov    edx,0x0
10001d24:	0f a5 c2             	shld   edx,eax,cl
10001d27:	d3 e0                	shl    eax,cl
10001d29:	f6 c1 20             	test   cl,0x20
10001d2c:	74 04                	je     10001d32 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xf4>
10001d2e:	89 c2                	mov    edx,eax
10001d30:	31 c0                	xor    eax,eax
10001d32:	89 c1                	mov    ecx,eax
10001d34:	89 d3                	mov    ebx,edx
10001d36:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001d39:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10001d3c:	89 c6                	mov    esi,eax
10001d3e:	31 ce                	xor    esi,ecx
10001d40:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10001d43:	31 d3                	xor    ebx,edx
10001d45:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10001d48:	eb 0c                	jmp    10001d56 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x118>
10001d4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001d4d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001d50:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001d53:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10001d56:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001d59:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001d5c:	83 c4 40             	add    esp,0x40
10001d5f:	5b                   	pop    ebx
10001d60:	5e                   	pop    esi
10001d61:	5d                   	pop    ebp
10001d62:	c3                   	ret    

10001d63 <getChecksum(unsigned int)>:
10001d63:	55                   	push   ebp
10001d64:	89 e5                	mov    ebp,esp
10001d66:	56                   	push   esi
10001d67:	53                   	push   ebx
10001d68:	83 ec 20             	sub    esp,0x20
10001d6b:	66 c7 45 f6 49 4e    	mov    WORD PTR [ebp-0xa],0x4e49
10001d71:	66 c7 45 f4 79 6e    	mov    WORD PTR [ebp-0xc],0x6e79
10001d77:	66 c7 45 f2 67 61    	mov    WORD PTR [ebp-0xe],0x6167
10001d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d80:	c1 e8 10             	shr    eax,0x10
10001d83:	89 c1                	mov    ecx,eax
10001d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d88:	89 c2                	mov    edx,eax
10001d8a:	89 d0                	mov    eax,edx
10001d8c:	c1 e0 06             	shl    eax,0x6
10001d8f:	29 d0                	sub    eax,edx
10001d91:	c1 e0 04             	shl    eax,0x4
10001d94:	01 d0                	add    eax,edx
10001d96:	31 c8                	xor    eax,ecx
10001d98:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
10001d9c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001da0:	0f 84 b1 00 00 00    	je     10001e57 <getChecksum(unsigned int)+0xf4>
10001da6:	b8 f4 02 00 00       	mov    eax,0x2f4
10001dab:	ba 00 00 00 00       	mov    edx,0x0
10001db0:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001db3:	89 c3                	mov    ebx,eax
10001db5:	be 00 00 00 00       	mov    esi,0x0
10001dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dbd:	ba 00 00 00 00       	mov    edx,0x0
10001dc2:	6a 1d                	push   0x1d
10001dc4:	6a 05                	push   0x5
10001dc6:	52                   	push   edx
10001dc7:	50                   	push   eax
10001dc8:	e8 fc ff ff ff       	call   10001dc9 <getChecksum(unsigned int)+0x66>	10001dc9: R_386_PC32	ror(unsigned long long, int, int)
10001dcd:	83 c4 10             	add    esp,0x10
10001dd0:	05 52 3f 04 00       	add    eax,0x43f52
10001dd5:	83 d2 00             	adc    edx,0x0
10001dd8:	89 d9                	mov    ecx,ebx
10001dda:	31 c1                	xor    ecx,eax
10001ddc:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
10001ddf:	31 d6                	xor    esi,edx
10001de1:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
10001de4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001de7:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001deb:	66 0f af c2          	imul   ax,dx
10001def:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
10001df3:	b8 ea 00 00 00       	mov    eax,0xea
10001df8:	ba 00 00 00 00       	mov    edx,0x0
10001dfd:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001e00:	89 c3                	mov    ebx,eax
10001e02:	be 00 00 00 00       	mov    esi,0x0
10001e07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e0a:	ba 00 00 00 00       	mov    edx,0x0
10001e0f:	6a 1f                	push   0x1f
10001e11:	6a 03                	push   0x3
10001e13:	52                   	push   edx
10001e14:	50                   	push   eax
10001e15:	e8 fc ff ff ff       	call   10001e16 <getChecksum(unsigned int)+0xb3>	10001e16: R_386_PC32	ror(unsigned long long, int, int)
10001e1a:	83 c4 10             	add    esp,0x10
10001e1d:	05 05 db 09 00       	add    eax,0x9db05
10001e22:	83 d2 00             	adc    edx,0x0
10001e25:	89 d9                	mov    ecx,ebx
10001e27:	31 c1                	xor    ecx,eax
10001e29:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
10001e2c:	31 d6                	xor    esi,edx
10001e2e:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10001e31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001e34:	66 29 45 f4          	sub    WORD PTR [ebp-0xc],ax
10001e38:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e3c:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e3f:	25 d2 04 00 00       	and    eax,0x4d2
10001e44:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e4b:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e4f:	d1 6d 08             	shr    DWORD PTR [ebp+0x8],1
10001e52:	e9 45 ff ff ff       	jmp    10001d9c <getChecksum(unsigned int)+0x39>
10001e57:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e5b:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e5e:	66 33 45 f2          	xor    ax,WORD PTR [ebp-0xe]
10001e62:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001e65:	0f b7 c0             	movzx  eax,ax
10001e68:	25 ff 7f 00 00       	and    eax,0x7fff
10001e6d:	8d 65 f8             	lea    esp,[ebp-0x8]
10001e70:	5b                   	pop    ebx
10001e71:	5e                   	pop    esi
10001e72:	5d                   	pop    ebp
10001e73:	c3                   	ret    

10001e74 <createKey(char*, unsigned int)>:
10001e74:	55                   	push   ebp
10001e75:	89 e5                	mov    ebp,esp
10001e77:	53                   	push   ebx
10001e78:	83 ec 34             	sub    esp,0x34
10001e7b:	68 fc a5 00 10       	push   0x1000a5fc	10001e7c: R_386_32	.text
10001e80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e83:	e8 fc ff ff ff       	call   10001e84 <createKey(char*, unsigned int)+0x10>	10001e84: R_386_PC32	strcpy
10001e88:	83 c4 08             	add    esp,0x8
10001e8b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10001e8e:	bb 00 00 00 00       	mov    ebx,0x0
10001e93:	89 c8                	mov    eax,ecx
10001e95:	89 da                	mov    edx,ebx
10001e97:	0f a4 c2 0f          	shld   edx,eax,0xf
10001e9b:	c1 e0 0f             	shl    eax,0xf
10001e9e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ea1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ea4:	83 ec 04             	sub    esp,0x4
10001ea7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001eaa:	e8 fc ff ff ff       	call   10001eab <createKey(char*, unsigned int)+0x37>	10001eab: R_386_PC32	getChecksum(unsigned int)
10001eaf:	83 c4 08             	add    esp,0x8
10001eb2:	ba 00 00 00 00       	mov    edx,0x0
10001eb7:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
10001eba:	09 55 f4             	or     DWORD PTR [ebp-0xc],edx
10001ebd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001ec4:	81 7d ec db 24 00 00 	cmp    DWORD PTR [ebp-0x14],0x24db
10001ecb:	7f 7f                	jg     10001f4c <createKey(char*, unsigned int)+0xd8>
10001ecd:	81 75 f0 95 38 e4 b5 	xor    DWORD PTR [ebp-0x10],0xb5e43895
10001ed4:	83 75 f4 37          	xor    DWORD PTR [ebp-0xc],0x37
10001ed8:	6a 00                	push   0x0
10001eda:	6a 08                	push   0x8
10001edc:	6a 00                	push   0x0
10001ede:	6a 03                	push   0x3
10001ee0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ee3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001ee6:	e8 fc ff ff ff       	call   10001ee7 <createKey(char*, unsigned int)+0x73>	10001ee7: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001eeb:	83 c4 18             	add    esp,0x18
10001eee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ef1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ef4:	6a 00                	push   0x0
10001ef6:	6a 0c                	push   0xc
10001ef8:	6a 00                	push   0x0
10001efa:	6a 0d                	push   0xd
10001efc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001eff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f02:	e8 fc ff ff ff       	call   10001f03 <createKey(char*, unsigned int)+0x8f>	10001f03: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f07:	83 c4 18             	add    esp,0x18
10001f0a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f0d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f10:	6a 00                	push   0x0
10001f12:	6a 16                	push   0x16
10001f14:	6a 00                	push   0x0
10001f16:	6a 25                	push   0x25
10001f18:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f1b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f1e:	e8 fc ff ff ff       	call   10001f1f <createKey(char*, unsigned int)+0xab>	10001f1f: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f23:	83 c4 18             	add    esp,0x18
10001f26:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f29:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f2c:	6a 2a                	push   0x2a
10001f2e:	6a 13                	push   0x13
10001f30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f33:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f36:	e8 fc ff ff ff       	call   10001f37 <createKey(char*, unsigned int)+0xc3>	10001f37: R_386_PC32	ror(unsigned long long, int, int)
10001f3b:	83 c4 10             	add    esp,0x10
10001f3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f41:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f44:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
10001f47:	e9 78 ff ff ff       	jmp    10001ec4 <createKey(char*, unsigned int)+0x50>
10001f4c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f4f:	83 e0 0f             	and    eax,0xf
10001f52:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001f55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f58:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f5b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f5f:	c1 ea 04             	shr    edx,0x4
10001f62:	89 c1                	mov    ecx,eax
10001f64:	89 d3                	mov    ebx,edx
10001f66:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f69:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f6c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f6f:	83 e0 0f             	and    eax,0xf
10001f72:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001f75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f78:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f7b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f7f:	c1 ea 04             	shr    edx,0x4
10001f82:	89 c1                	mov    ecx,eax
10001f84:	89 d3                	mov    ebx,edx
10001f86:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f89:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f8f:	83 e0 0f             	and    eax,0xf
10001f92:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001f95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f98:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f9b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f9f:	c1 ea 04             	shr    edx,0x4
10001fa2:	89 c1                	mov    ecx,eax
10001fa4:	89 d3                	mov    ebx,edx
10001fa6:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fa9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001faf:	25 ff 03 00 00       	and    eax,0x3ff
10001fb4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001fb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fbd:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fc1:	c1 ea 0a             	shr    edx,0xa
10001fc4:	89 c1                	mov    ecx,eax
10001fc6:	89 d3                	mov    ebx,edx
10001fc8:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fcb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fd1:	25 ff 03 00 00       	and    eax,0x3ff
10001fd6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001fd9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fdc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fdf:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fe3:	c1 ea 0a             	shr    edx,0xa
10001fe6:	89 c1                	mov    ecx,eax
10001fe8:	89 d3                	mov    ebx,edx
10001fea:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fed:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001ff0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ff3:	25 ff 03 00 00       	and    eax,0x3ff
10001ff8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001ffb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ffe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002001:	0f ac d0 0a          	shrd   eax,edx,0xa
10002005:	c1 ea 0a             	shr    edx,0xa
10002008:	89 c1                	mov    ecx,eax
1000200a:	89 d3                	mov    ebx,edx
1000200c:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
1000200f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002012:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002015:	05 00 00 00 00       	add    eax,0x0	10002016: R_386_32	lookupA
1000201a:	8a 10                	mov    dl,BYTE PTR [eax]
1000201c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000201f:	88 10                	mov    BYTE PTR [eax],dl
10002021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002024:	8d 50 01             	lea    edx,[eax+0x1]
10002027:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000202a:	05 00 00 00 00       	add    eax,0x0	1000202b: R_386_32	lookupA
1000202f:	8a 00                	mov    al,BYTE PTR [eax]
10002031:	88 02                	mov    BYTE PTR [edx],al
10002033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002036:	8d 50 0f             	lea    edx,[eax+0xf]
10002039:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000203c:	05 00 00 00 00       	add    eax,0x0	1000203d: R_386_32	lookupA
10002041:	8a 00                	mov    al,BYTE PTR [eax]
10002043:	88 02                	mov    BYTE PTR [edx],al
10002045:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002048:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
1000204d:	f7 e9                	imul   ecx
1000204f:	c1 fa 05             	sar    edx,0x5
10002052:	89 c8                	mov    eax,ecx
10002054:	c1 f8 1f             	sar    eax,0x1f
10002057:	29 c2                	sub    edx,eax
10002059:	89 d0                	mov    eax,edx
1000205b:	b9 0a 00 00 00       	mov    ecx,0xa
10002060:	99                   	cdq    
10002061:	f7 f9                	idiv   ecx
10002063:	89 d0                	mov    eax,edx
10002065:	8d 50 30             	lea    edx,[eax+0x30]
10002068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000206b:	83 c0 03             	add    eax,0x3
1000206e:	88 10                	mov    BYTE PTR [eax],dl
10002070:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002073:	b8 67 66 66 66       	mov    eax,0x66666667
10002078:	f7 e9                	imul   ecx
1000207a:	c1 fa 02             	sar    edx,0x2
1000207d:	89 c8                	mov    eax,ecx
1000207f:	c1 f8 1f             	sar    eax,0x1f
10002082:	89 d1                	mov    ecx,edx
10002084:	29 c1                	sub    ecx,eax
10002086:	b8 67 66 66 66       	mov    eax,0x66666667
1000208b:	f7 e9                	imul   ecx
1000208d:	c1 fa 02             	sar    edx,0x2
10002090:	89 c8                	mov    eax,ecx
10002092:	c1 f8 1f             	sar    eax,0x1f
10002095:	29 c2                	sub    edx,eax
10002097:	89 d0                	mov    eax,edx
10002099:	c1 e0 02             	shl    eax,0x2
1000209c:	01 d0                	add    eax,edx
1000209e:	01 c0                	add    eax,eax
100020a0:	29 c1                	sub    ecx,eax
100020a2:	89 ca                	mov    edx,ecx
100020a4:	88 d0                	mov    al,dl
100020a6:	8d 50 30             	lea    edx,[eax+0x30]
100020a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ac:	83 c0 04             	add    eax,0x4
100020af:	88 10                	mov    BYTE PTR [eax],dl
100020b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100020b4:	b9 0a 00 00 00       	mov    ecx,0xa
100020b9:	99                   	cdq    
100020ba:	f7 f9                	idiv   ecx
100020bc:	89 d0                	mov    eax,edx
100020be:	8d 50 30             	lea    edx,[eax+0x30]
100020c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020c4:	83 c0 05             	add    eax,0x5
100020c7:	88 10                	mov    BYTE PTR [eax],dl
100020c9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020cc:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100020d1:	f7 e9                	imul   ecx
100020d3:	c1 fa 05             	sar    edx,0x5
100020d6:	89 c8                	mov    eax,ecx
100020d8:	c1 f8 1f             	sar    eax,0x1f
100020db:	29 c2                	sub    edx,eax
100020dd:	89 d0                	mov    eax,edx
100020df:	b9 0a 00 00 00       	mov    ecx,0xa
100020e4:	99                   	cdq    
100020e5:	f7 f9                	idiv   ecx
100020e7:	89 d0                	mov    eax,edx
100020e9:	8d 50 30             	lea    edx,[eax+0x30]
100020ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ef:	83 c0 07             	add    eax,0x7
100020f2:	88 10                	mov    BYTE PTR [eax],dl
100020f4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020f7:	b8 67 66 66 66       	mov    eax,0x66666667
100020fc:	f7 e9                	imul   ecx
100020fe:	c1 fa 02             	sar    edx,0x2
10002101:	89 c8                	mov    eax,ecx
10002103:	c1 f8 1f             	sar    eax,0x1f
10002106:	89 d1                	mov    ecx,edx
10002108:	29 c1                	sub    ecx,eax
1000210a:	b8 67 66 66 66       	mov    eax,0x66666667
1000210f:	f7 e9                	imul   ecx
10002111:	c1 fa 02             	sar    edx,0x2
10002114:	89 c8                	mov    eax,ecx
10002116:	c1 f8 1f             	sar    eax,0x1f
10002119:	29 c2                	sub    edx,eax
1000211b:	89 d0                	mov    eax,edx
1000211d:	c1 e0 02             	shl    eax,0x2
10002120:	01 d0                	add    eax,edx
10002122:	01 c0                	add    eax,eax
10002124:	29 c1                	sub    ecx,eax
10002126:	89 ca                	mov    edx,ecx
10002128:	88 d0                	mov    al,dl
1000212a:	8d 50 30             	lea    edx,[eax+0x30]
1000212d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002130:	83 c0 08             	add    eax,0x8
10002133:	88 10                	mov    BYTE PTR [eax],dl
10002135:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002138:	b9 0a 00 00 00       	mov    ecx,0xa
1000213d:	99                   	cdq    
1000213e:	f7 f9                	idiv   ecx
10002140:	89 d0                	mov    eax,edx
10002142:	8d 50 30             	lea    edx,[eax+0x30]
10002145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002148:	83 c0 09             	add    eax,0x9
1000214b:	88 10                	mov    BYTE PTR [eax],dl
1000214d:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10002150:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002155:	f7 e9                	imul   ecx
10002157:	c1 fa 05             	sar    edx,0x5
1000215a:	89 c8                	mov    eax,ecx
1000215c:	c1 f8 1f             	sar    eax,0x1f
1000215f:	29 c2                	sub    edx,eax
10002161:	89 d0                	mov    eax,edx
10002163:	b9 0a 00 00 00       	mov    ecx,0xa
10002168:	99                   	cdq    
10002169:	f7 f9                	idiv   ecx
1000216b:	89 d0                	mov    eax,edx
1000216d:	8d 50 30             	lea    edx,[eax+0x30]
10002170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002173:	83 c0 0b             	add    eax,0xb
10002176:	88 10                	mov    BYTE PTR [eax],dl
10002178:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
1000217b:	b8 67 66 66 66       	mov    eax,0x66666667
10002180:	f7 e9                	imul   ecx
10002182:	c1 fa 02             	sar    edx,0x2
10002185:	89 c8                	mov    eax,ecx
10002187:	c1 f8 1f             	sar    eax,0x1f
1000218a:	89 d1                	mov    ecx,edx
1000218c:	29 c1                	sub    ecx,eax
1000218e:	b8 67 66 66 66       	mov    eax,0x66666667
10002193:	f7 e9                	imul   ecx
10002195:	c1 fa 02             	sar    edx,0x2
10002198:	89 c8                	mov    eax,ecx
1000219a:	c1 f8 1f             	sar    eax,0x1f
1000219d:	29 c2                	sub    edx,eax
1000219f:	89 d0                	mov    eax,edx
100021a1:	c1 e0 02             	shl    eax,0x2
100021a4:	01 d0                	add    eax,edx
100021a6:	01 c0                	add    eax,eax
100021a8:	29 c1                	sub    ecx,eax
100021aa:	89 ca                	mov    edx,ecx
100021ac:	88 d0                	mov    al,dl
100021ae:	8d 50 30             	lea    edx,[eax+0x30]
100021b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021b4:	83 c0 0c             	add    eax,0xc
100021b7:	88 10                	mov    BYTE PTR [eax],dl
100021b9:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100021bc:	b9 0a 00 00 00       	mov    ecx,0xa
100021c1:	99                   	cdq    
100021c2:	f7 f9                	idiv   ecx
100021c4:	89 d0                	mov    eax,edx
100021c6:	8d 50 30             	lea    edx,[eax+0x30]
100021c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021cc:	83 c0 0d             	add    eax,0xd
100021cf:	88 10                	mov    BYTE PTR [eax],dl
100021d1:	90                   	nop
100021d2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100021d5:	c9                   	leave  
100021d6:	c3                   	ret    

100021d7 <retrieveBits(char*)>:
100021d7:	55                   	push   ebp
100021d8:	89 e5                	mov    ebp,esp
100021da:	57                   	push   edi
100021db:	56                   	push   esi
100021dc:	53                   	push   ebx
100021dd:	83 ec 4c             	sub    esp,0x4c
100021e0:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
100021e7:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
100021ee:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [ebp-0x1c],0xffffffff
100021f5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100021fc:	83 7d e0 0f          	cmp    DWORD PTR [ebp-0x20],0xf
10002200:	7f 54                	jg     10002256 <retrieveBits(char*)+0x7f>
10002202:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002205:	05 00 00 00 00       	add    eax,0x0	10002206: R_386_32	lookupA
1000220a:	8a 10                	mov    dl,BYTE PTR [eax]
1000220c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000220f:	8a 00                	mov    al,BYTE PTR [eax]
10002211:	38 c2                	cmp    dl,al
10002213:	75 06                	jne    1000221b <retrieveBits(char*)+0x44>
10002215:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002218:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000221b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000221e:	05 00 00 00 00       	add    eax,0x0	1000221f: R_386_32	lookupB
10002223:	8a 10                	mov    dl,BYTE PTR [eax]
10002225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002228:	40                   	inc    eax
10002229:	8a 00                	mov    al,BYTE PTR [eax]
1000222b:	38 c2                	cmp    dl,al
1000222d:	75 06                	jne    10002235 <retrieveBits(char*)+0x5e>
1000222f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002232:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10002235:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002238:	05 00 00 00 00       	add    eax,0x0	10002239: R_386_32	lookupC
1000223d:	8a 10                	mov    dl,BYTE PTR [eax]
1000223f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002242:	83 c0 0f             	add    eax,0xf
10002245:	8a 00                	mov    al,BYTE PTR [eax]
10002247:	38 c2                	cmp    dl,al
10002249:	75 06                	jne    10002251 <retrieveBits(char*)+0x7a>
1000224b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000224e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002251:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10002254:	eb a6                	jmp    100021fc <retrieveBits(char*)+0x25>
10002256:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
1000225a:	74 0c                	je     10002268 <retrieveBits(char*)+0x91>
1000225c:	83 7d e8 ff          	cmp    DWORD PTR [ebp-0x18],0xffffffff
10002260:	74 06                	je     10002268 <retrieveBits(char*)+0x91>
10002262:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10002266:	75 0f                	jne    10002277 <retrieveBits(char*)+0xa0>
10002268:	b8 00 00 00 00       	mov    eax,0x0
1000226d:	ba 00 00 00 00       	mov    edx,0x0
10002272:	e9 02 02 00 00       	jmp    10002479 <retrieveBits(char*)+0x2a2>
10002277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000227a:	83 c0 03             	add    eax,0x3
1000227d:	8a 00                	mov    al,BYTE PTR [eax]
1000227f:	0f be c0             	movsx  eax,al
10002282:	8d 50 d0             	lea    edx,[eax-0x30]
10002285:	89 d0                	mov    eax,edx
10002287:	c1 e0 02             	shl    eax,0x2
1000228a:	01 d0                	add    eax,edx
1000228c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002293:	01 d0                	add    eax,edx
10002295:	c1 e0 02             	shl    eax,0x2
10002298:	89 c6                	mov    esi,eax
1000229a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000229d:	83 c0 04             	add    eax,0x4
100022a0:	8a 00                	mov    al,BYTE PTR [eax]
100022a2:	0f be c0             	movsx  eax,al
100022a5:	8d 50 d0             	lea    edx,[eax-0x30]
100022a8:	89 d0                	mov    eax,edx
100022aa:	c1 e0 02             	shl    eax,0x2
100022ad:	01 d0                	add    eax,edx
100022af:	01 c0                	add    eax,eax
100022b1:	8d 14 06             	lea    edx,[esi+eax*1]
100022b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022b7:	83 c0 05             	add    eax,0x5
100022ba:	8a 00                	mov    al,BYTE PTR [eax]
100022bc:	0f be c0             	movsx  eax,al
100022bf:	83 e8 30             	sub    eax,0x30
100022c2:	01 d0                	add    eax,edx
100022c4:	99                   	cdq    
100022c5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100022c8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100022cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022ce:	83 c0 07             	add    eax,0x7
100022d1:	8a 00                	mov    al,BYTE PTR [eax]
100022d3:	0f be c0             	movsx  eax,al
100022d6:	8d 50 d0             	lea    edx,[eax-0x30]
100022d9:	89 d0                	mov    eax,edx
100022db:	c1 e0 02             	shl    eax,0x2
100022de:	01 d0                	add    eax,edx
100022e0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100022e7:	01 d0                	add    eax,edx
100022e9:	c1 e0 02             	shl    eax,0x2
100022ec:	89 c6                	mov    esi,eax
100022ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022f1:	83 c0 08             	add    eax,0x8
100022f4:	8a 00                	mov    al,BYTE PTR [eax]
100022f6:	0f be c0             	movsx  eax,al
100022f9:	8d 50 d0             	lea    edx,[eax-0x30]
100022fc:	89 d0                	mov    eax,edx
100022fe:	c1 e0 02             	shl    eax,0x2
10002301:	01 d0                	add    eax,edx
10002303:	01 c0                	add    eax,eax
10002305:	8d 14 06             	lea    edx,[esi+eax*1]
10002308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000230b:	83 c0 09             	add    eax,0x9
1000230e:	8a 00                	mov    al,BYTE PTR [eax]
10002310:	0f be c0             	movsx  eax,al
10002313:	83 e8 30             	sub    eax,0x30
10002316:	01 d0                	add    eax,edx
10002318:	99                   	cdq    
10002319:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
1000231c:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
1000231f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002322:	83 c0 0b             	add    eax,0xb
10002325:	8a 00                	mov    al,BYTE PTR [eax]
10002327:	0f be c0             	movsx  eax,al
1000232a:	8d 50 d0             	lea    edx,[eax-0x30]
1000232d:	89 d0                	mov    eax,edx
1000232f:	c1 e0 02             	shl    eax,0x2
10002332:	01 d0                	add    eax,edx
10002334:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000233b:	01 d0                	add    eax,edx
1000233d:	c1 e0 02             	shl    eax,0x2
10002340:	89 c6                	mov    esi,eax
10002342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002345:	83 c0 0c             	add    eax,0xc
10002348:	8a 00                	mov    al,BYTE PTR [eax]
1000234a:	0f be c0             	movsx  eax,al
1000234d:	8d 50 d0             	lea    edx,[eax-0x30]
10002350:	89 d0                	mov    eax,edx
10002352:	c1 e0 02             	shl    eax,0x2
10002355:	01 d0                	add    eax,edx
10002357:	01 c0                	add    eax,eax
10002359:	8d 14 06             	lea    edx,[esi+eax*1]
1000235c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000235f:	83 c0 0d             	add    eax,0xd
10002362:	8a 00                	mov    al,BYTE PTR [eax]
10002364:	0f be c0             	movsx  eax,al
10002367:	83 e8 30             	sub    eax,0x30
1000236a:	01 d0                	add    eax,edx
1000236c:	99                   	cdq    
1000236d:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002370:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10002373:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002376:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10002379:	0f a4 c2 0a          	shld   edx,eax,0xa
1000237d:	c1 e0 0a             	shl    eax,0xa
10002380:	89 c6                	mov    esi,eax
10002382:	89 d7                	mov    edi,edx
10002384:	89 f0                	mov    eax,esi
10002386:	0b 45 c8             	or     eax,DWORD PTR [ebp-0x38]
10002389:	89 c1                	mov    ecx,eax
1000238b:	89 f8                	mov    eax,edi
1000238d:	0b 45 cc             	or     eax,DWORD PTR [ebp-0x34]
10002390:	89 c3                	mov    ebx,eax
10002392:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002395:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10002398:	0f a4 c2 14          	shld   edx,eax,0x14
1000239c:	c1 e0 14             	shl    eax,0x14
1000239f:	89 ce                	mov    esi,ecx
100023a1:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
100023a4:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100023a7:	0b 75 a8             	or     esi,DWORD PTR [ebp-0x58]
100023aa:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
100023ad:	89 d8                	mov    eax,ebx
100023af:	0b 45 ac             	or     eax,DWORD PTR [ebp-0x54]
100023b2:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100023b5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100023b8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100023bb:	0f a4 c2 0c          	shld   edx,eax,0xc
100023bf:	c1 e0 0c             	shl    eax,0xc
100023c2:	89 c3                	mov    ebx,eax
100023c4:	89 d6                	mov    esi,edx
100023c6:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
100023c9:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100023cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100023cf:	c1 e0 04             	shl    eax,0x4
100023d2:	0b 45 ec             	or     eax,DWORD PTR [ebp-0x14]
100023d5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100023d8:	c1 e2 08             	shl    edx,0x8
100023db:	09 d0                	or     eax,edx
100023dd:	99                   	cdq    
100023de:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
100023e1:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
100023e4:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
100023eb:	81 7d d4 db 24 00 00 	cmp    DWORD PTR [ebp-0x2c],0x24db
100023f2:	7f 7f                	jg     10002473 <retrieveBits(char*)+0x29c>
100023f4:	6a 2a                	push   0x2a
100023f6:	6a 13                	push   0x13
100023f8:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023fb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023fe:	e8 fc ff ff ff       	call   100023ff <retrieveBits(char*)+0x228>	100023ff: R_386_PC32	ror(unsigned long long, int, int)
10002403:	83 c4 10             	add    esp,0x10
10002406:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002409:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
1000240c:	6a 00                	push   0x0
1000240e:	6a 08                	push   0x8
10002410:	6a 00                	push   0x0
10002412:	6a 03                	push   0x3
10002414:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002417:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000241a:	e8 fc ff ff ff       	call   1000241b <retrieveBits(char*)+0x244>	1000241b: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000241f:	83 c4 18             	add    esp,0x18
10002422:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002425:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002428:	6a 00                	push   0x0
1000242a:	6a 0c                	push   0xc
1000242c:	6a 00                	push   0x0
1000242e:	6a 0d                	push   0xd
10002430:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002433:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002436:	e8 fc ff ff ff       	call   10002437 <retrieveBits(char*)+0x260>	10002437: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000243b:	83 c4 18             	add    esp,0x18
1000243e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002441:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002444:	6a 00                	push   0x0
10002446:	6a 16                	push   0x16
10002448:	6a 00                	push   0x0
1000244a:	6a 25                	push   0x25
1000244c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000244f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002452:	e8 fc ff ff ff       	call   10002453 <retrieveBits(char*)+0x27c>	10002453: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002457:	83 c4 18             	add    esp,0x18
1000245a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000245d:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002460:	81 75 d8 95 38 e4 b5 	xor    DWORD PTR [ebp-0x28],0xb5e43895
10002467:	83 75 dc 37          	xor    DWORD PTR [ebp-0x24],0x37
1000246b:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
1000246e:	e9 78 ff ff ff       	jmp    100023eb <retrieveBits(char*)+0x214>
10002473:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002476:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002479:	8d 65 f4             	lea    esp,[ebp-0xc]
1000247c:	5b                   	pop    ebx
1000247d:	5e                   	pop    esi
1000247e:	5f                   	pop    edi
1000247f:	5d                   	pop    ebp
10002480:	c3                   	ret    

10002481 <checkKey(char*)>:
10002481:	55                   	push   ebp
10002482:	89 e5                	mov    ebp,esp
10002484:	53                   	push   ebx
10002485:	83 ec 14             	sub    esp,0x14
10002488:	83 ec 04             	sub    esp,0x4
1000248b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000248e:	e8 fc ff ff ff       	call   1000248f <checkKey(char*)+0xe>	1000248f: R_386_PC32	retrieveBits(char*)
10002493:	83 c4 08             	add    esp,0x8
10002496:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002499:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000249c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000249f:	25 ff 7f 00 00       	and    eax,0x7fff
100024a4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100024a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024aa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100024ad:	0f ac d0 0f          	shrd   eax,edx,0xf
100024b1:	c1 ea 0f             	shr    edx,0xf
100024b4:	89 c1                	mov    ecx,eax
100024b6:	89 d3                	mov    ebx,edx
100024b8:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
100024bb:	83 ec 04             	sub    esp,0x4
100024be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100024c1:	e8 fc ff ff ff       	call   100024c2 <checkKey(char*)+0x41>	100024c2: R_386_PC32	getChecksum(unsigned int)
100024c6:	83 c4 08             	add    esp,0x8
100024c9:	39 45 ec             	cmp    DWORD PTR [ebp-0x14],eax
100024cc:	0f 95 c0             	setne  al
100024cf:	84 c0                	test   al,al
100024d1:	74 07                	je     100024da <checkKey(char*)+0x59>
100024d3:	b8 00 00 00 00       	mov    eax,0x0
100024d8:	eb 06                	jmp    100024e0 <checkKey(char*)+0x5f>
100024da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024dd:	83 e0 07             	and    eax,0x7
100024e0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100024e3:	c9                   	leave  
100024e4:	c3                   	ret    

100024e5 <changeKeyType(char*, int)>:
100024e5:	55                   	push   ebp
100024e6:	89 e5                	mov    ebp,esp
100024e8:	83 ec 10             	sub    esp,0x10
100024eb:	83 ec 04             	sub    esp,0x4
100024ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024f1:	e8 fc ff ff ff       	call   100024f2 <changeKeyType(char*, int)+0xd>	100024f2: R_386_PC32	retrieveBits(char*)
100024f6:	83 c4 08             	add    esp,0x8
100024f9:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
100024fc:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100024ff:	83 65 f8 f8          	and    DWORD PTR [ebp-0x8],0xfffffff8
10002503:	83 65 fc ff          	and    DWORD PTR [ebp-0x4],0xffffffff
10002507:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000250a:	99                   	cdq    
1000250b:	09 45 f8             	or     DWORD PTR [ebp-0x8],eax
1000250e:	09 55 fc             	or     DWORD PTR [ebp-0x4],edx
10002511:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10002514:	50                   	push   eax
10002515:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002518:	e8 fc ff ff ff       	call   10002519 <changeKeyType(char*, int)+0x34>	10002519: R_386_PC32	createKey(char*, unsigned int)
1000251d:	83 c4 08             	add    esp,0x8
10002520:	83 ec 04             	sub    esp,0x4
10002523:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002526:	e8 fc ff ff ff       	call   10002527 <changeKeyType(char*, int)+0x42>	10002527: R_386_PC32	checkKey(char*)
1000252b:	83 c4 08             	add    esp,0x8
1000252e:	85 c0                	test   eax,eax
10002530:	0f 95 c0             	setne  al
10002533:	c9                   	leave  
10002534:	c3                   	ret    

10002535 <checkExtendedKey(char*)>:
10002535:	55                   	push   ebp
10002536:	89 e5                	mov    ebp,esp
10002538:	83 ec 20             	sub    esp,0x20
1000253b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000253e:	8a 00                	mov    al,BYTE PTR [eax]
10002540:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10002543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002546:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
10002549:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
1000254c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000254f:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10002552:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10002555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002558:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
1000255b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000255e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002561:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10002564:	88 45 f0             	mov    BYTE PTR [ebp-0x10],al
10002567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000256a:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
1000256d:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10002570:	c6 45 f2 2d          	mov    BYTE PTR [ebp-0xe],0x2d
10002574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002577:	8a 40 06             	mov    al,BYTE PTR [eax+0x6]
1000257a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000257d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002580:	8a 40 07             	mov    al,BYTE PTR [eax+0x7]
10002583:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10002586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002589:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
1000258c:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
1000258f:	c6 45 f6 2d          	mov    BYTE PTR [ebp-0xa],0x2d
10002593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002596:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10002599:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000259c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000259f:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
100025a2:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
100025a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025a8:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
100025ab:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
100025ae:	c6 45 fa 2d          	mov    BYTE PTR [ebp-0x6],0x2d
100025b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025b5:	8a 40 0f             	mov    al,BYTE PTR [eax+0xf]
100025b8:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
100025bb:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025be:	48                   	dec    eax
100025bf:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100025c2:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025c5:	3c 2f                	cmp    al,0x2f
100025c7:	75 04                	jne    100025cd <checkExtendedKey(char*)+0x98>
100025c9:	c6 45 ef 39          	mov    BYTE PTR [ebp-0x11],0x39
100025cd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d0:	48                   	dec    eax
100025d1:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
100025d4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d7:	3c 2f                	cmp    al,0x2f
100025d9:	75 04                	jne    100025df <checkExtendedKey(char*)+0xaa>
100025db:	c6 45 f5 39          	mov    BYTE PTR [ebp-0xb],0x39
100025df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025e2:	83 c0 0d             	add    eax,0xd
100025e5:	8a 10                	mov    dl,BYTE PTR [eax]
100025e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025ea:	83 c0 0c             	add    eax,0xc
100025ed:	8a 00                	mov    al,BYTE PTR [eax]
100025ef:	38 c2                	cmp    dl,al
100025f1:	74 0a                	je     100025fd <checkExtendedKey(char*)+0xc8>
100025f3:	b8 00 00 00 00       	mov    eax,0x0
100025f8:	e9 d6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100025fd:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002600:	3c 2f                	cmp    al,0x2f
10002602:	7e 07                	jle    1000260b <checkExtendedKey(char*)+0xd6>
10002604:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002607:	3c 39                	cmp    al,0x39
10002609:	7e 0a                	jle    10002615 <checkExtendedKey(char*)+0xe0>
1000260b:	b8 00 00 00 00       	mov    eax,0x0
10002610:	e9 be 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002615:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002618:	3c 2f                	cmp    al,0x2f
1000261a:	7e 07                	jle    10002623 <checkExtendedKey(char*)+0xee>
1000261c:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
1000261f:	3c 39                	cmp    al,0x39
10002621:	7e 0a                	jle    1000262d <checkExtendedKey(char*)+0xf8>
10002623:	b8 00 00 00 00       	mov    eax,0x0
10002628:	e9 a6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000262d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002630:	3c 2f                	cmp    al,0x2f
10002632:	7e 07                	jle    1000263b <checkExtendedKey(char*)+0x106>
10002634:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002637:	3c 39                	cmp    al,0x39
10002639:	7e 0a                	jle    10002645 <checkExtendedKey(char*)+0x110>
1000263b:	b8 00 00 00 00       	mov    eax,0x0
10002640:	e9 8e 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002645:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10002648:	3c 2f                	cmp    al,0x2f
1000264a:	7e 07                	jle    10002653 <checkExtendedKey(char*)+0x11e>
1000264c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000264f:	3c 39                	cmp    al,0x39
10002651:	7e 07                	jle    1000265a <checkExtendedKey(char*)+0x125>
10002653:	b8 00 00 00 00       	mov    eax,0x0
10002658:	eb 79                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000265a:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
1000265d:	3c 2f                	cmp    al,0x2f
1000265f:	7e 07                	jle    10002668 <checkExtendedKey(char*)+0x133>
10002661:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
10002664:	3c 39                	cmp    al,0x39
10002666:	7e 07                	jle    1000266f <checkExtendedKey(char*)+0x13a>
10002668:	b8 00 00 00 00       	mov    eax,0x0
1000266d:	eb 64                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000266f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002672:	3c 2f                	cmp    al,0x2f
10002674:	7e 07                	jle    1000267d <checkExtendedKey(char*)+0x148>
10002676:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002679:	3c 39                	cmp    al,0x39
1000267b:	7e 07                	jle    10002684 <checkExtendedKey(char*)+0x14f>
1000267d:	b8 00 00 00 00       	mov    eax,0x0
10002682:	eb 4f                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002684:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10002687:	3c 2f                	cmp    al,0x2f
10002689:	7e 07                	jle    10002692 <checkExtendedKey(char*)+0x15d>
1000268b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000268e:	3c 39                	cmp    al,0x39
10002690:	7e 07                	jle    10002699 <checkExtendedKey(char*)+0x164>
10002692:	b8 00 00 00 00       	mov    eax,0x0
10002697:	eb 3a                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002699:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
1000269c:	3c 2f                	cmp    al,0x2f
1000269e:	7e 07                	jle    100026a7 <checkExtendedKey(char*)+0x172>
100026a0:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
100026a3:	3c 39                	cmp    al,0x39
100026a5:	7e 07                	jle    100026ae <checkExtendedKey(char*)+0x179>
100026a7:	b8 00 00 00 00       	mov    eax,0x0
100026ac:	eb 25                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026ae:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b1:	3c 2f                	cmp    al,0x2f
100026b3:	7e 07                	jle    100026bc <checkExtendedKey(char*)+0x187>
100026b5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b8:	3c 39                	cmp    al,0x39
100026ba:	7e 07                	jle    100026c3 <checkExtendedKey(char*)+0x18e>
100026bc:	b8 00 00 00 00       	mov    eax,0x0
100026c1:	eb 10                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026c3:	83 ec 04             	sub    esp,0x4
100026c6:	8d 45 ec             	lea    eax,[ebp-0x14]
100026c9:	50                   	push   eax
100026ca:	e8 fc ff ff ff       	call   100026cb <checkExtendedKey(char*)+0x196>	100026cb: R_386_PC32	checkKey(char*)
100026cf:	83 c4 08             	add    esp,0x8
100026d2:	90                   	nop
100026d3:	c9                   	leave  
100026d4:	c3                   	ret    

100026d5 <loadTimezoneStrings()>:
100026d5:	55                   	push   ebp
100026d6:	89 e5                	mov    ebp,esp
100026d8:	53                   	push   ebx
100026d9:	83 ec 34             	sub    esp,0x34
100026dc:	83 ec 0c             	sub    esp,0xc
100026df:	68 14 01 00 00       	push   0x114
100026e4:	e8 fc ff ff ff       	call   100026e5 <loadTimezoneStrings()+0x10>	100026e5: R_386_PC32	operator new(unsigned long)
100026e9:	83 c4 10             	add    esp,0x10
100026ec:	89 c3                	mov    ebx,eax
100026ee:	a1 00 00 00 00       	mov    eax,ds:0x0	100026ef: R_386_32	kernelProcess
100026f3:	83 ec 04             	sub    esp,0x4
100026f6:	50                   	push   eax
100026f7:	68 10 a6 00 10       	push   0x1000a610	100026f8: R_386_32	.text
100026fc:	53                   	push   ebx
100026fd:	e8 fc ff ff ff       	call   100026fe <loadTimezoneStrings()+0x29>	100026fe: R_386_PC32	File::File(char const*, Process*)
10002702:	83 c4 10             	add    esp,0x10
10002705:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10002708:	83 ec 08             	sub    esp,0x8
1000270b:	6a 01                	push   0x1
1000270d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002710:	e8 fc ff ff ff       	call   10002711 <loadTimezoneStrings()+0x3c>	10002711: R_386_PC32	File::open(FileOpenMode)
10002715:	83 c4 10             	add    esp,0x10
10002718:	83 ec 04             	sub    esp,0x4
1000271b:	8d 45 d7             	lea    eax,[ebp-0x29]
1000271e:	50                   	push   eax
1000271f:	8d 45 d8             	lea    eax,[ebp-0x28]
10002722:	50                   	push   eax
10002723:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002726:	e8 fc ff ff ff       	call   10002727 <loadTimezoneStrings()+0x52>	10002727: R_386_PC32	File::stat(unsigned long long*, bool*)
1000272b:	83 c4 10             	add    esp,0x10
1000272e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002731:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002734:	83 ec 0c             	sub    esp,0xc
10002737:	50                   	push   eax
10002738:	e8 fc ff ff ff       	call   10002739 <loadTimezoneStrings()+0x64>	10002739: R_386_PC32	malloc
1000273d:	83 c4 10             	add    esp,0x10
10002740:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002743:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002746:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002749:	83 ec 04             	sub    esp,0x4
1000274c:	50                   	push   eax
1000274d:	6a 00                	push   0x0
1000274f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002752:	e8 fc ff ff ff       	call   10002753 <loadTimezoneStrings()+0x7e>	10002753: R_386_PC32	memset
10002757:	83 c4 10             	add    esp,0x10
1000275a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000275d:	8b 00                	mov    eax,DWORD PTR [eax]
1000275f:	83 c0 0c             	add    eax,0xc
10002762:	8b 08                	mov    ecx,DWORD PTR [eax]
10002764:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002767:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
1000276a:	83 ec 0c             	sub    esp,0xc
1000276d:	8d 5d d0             	lea    ebx,[ebp-0x30]
10002770:	53                   	push   ebx
10002771:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002774:	52                   	push   edx
10002775:	50                   	push   eax
10002776:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002779:	ff d1                	call   ecx
1000277b:	83 c4 20             	add    esp,0x20
1000277e:	83 ec 0c             	sub    esp,0xc
10002781:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002784:	e8 fc ff ff ff       	call   10002785 <loadTimezoneStrings()+0xb0>	10002785: R_386_PC32	File::close()
10002789:	83 c4 10             	add    esp,0x10
1000278c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10002793:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000279a:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
100027a1:	7f 39                	jg     100027dc <loadTimezoneStrings()+0x107>
100027a3:	83 ec 0c             	sub    esp,0xc
100027a6:	6a 78                	push   0x78
100027a8:	e8 fc ff ff ff       	call   100027a9 <loadTimezoneStrings()+0xd4>	100027a9: R_386_PC32	malloc
100027ad:	83 c4 10             	add    esp,0x10
100027b0:	89 c2                	mov    edx,eax
100027b2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027b5:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	100027b8: R_386_32	timezoneStrings
100027bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027bf:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100027c2: R_386_32	timezoneStrings
100027c6:	83 ec 08             	sub    esp,0x8
100027c9:	68 2f a6 00 10       	push   0x1000a62f	100027ca: R_386_32	.text
100027ce:	50                   	push   eax
100027cf:	e8 fc ff ff ff       	call   100027d0 <loadTimezoneStrings()+0xfb>	100027d0: R_386_PC32	strcpy
100027d4:	83 c4 10             	add    esp,0x10
100027d7:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100027da:	eb be                	jmp    1000279a <loadTimezoneStrings()+0xc5>
100027dc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100027e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100027e6:	8d 50 01             	lea    edx,[eax+0x1]
100027e9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
100027ec:	89 c2                	mov    edx,eax
100027ee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100027f1:	01 d0                	add    eax,edx
100027f3:	8a 00                	mov    al,BYTE PTR [eax]
100027f5:	88 45 ce             	mov    BYTE PTR [ebp-0x32],al
100027f8:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
100027fc:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
100027ff:	3c 0d                	cmp    al,0xd
10002801:	0f 84 2a 01 00 00    	je     10002931 <loadTimezoneStrings()+0x25c>
10002807:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
1000280a:	3c 09                	cmp    al,0x9
1000280c:	75 3c                	jne    1000284a <loadTimezoneStrings()+0x175>
1000280e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002811:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002814: R_386_32	timezoneStrings
10002818:	83 ec 0c             	sub    esp,0xc
1000281b:	50                   	push   eax
1000281c:	e8 fc ff ff ff       	call   1000281d <loadTimezoneStrings()+0x148>	1000281d: R_386_PC32	strlen
10002821:	83 c4 10             	add    esp,0x10
10002824:	83 f8 08             	cmp    eax,0x8
10002827:	0f 87 0a 01 00 00    	ja     10002937 <loadTimezoneStrings()+0x262>
1000282d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002830:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002833: R_386_32	timezoneStrings
10002837:	83 ec 08             	sub    esp,0x8
1000283a:	68 2f a6 00 10       	push   0x1000a62f	1000283b: R_386_32	.text
1000283f:	50                   	push   eax
10002840:	e8 fc ff ff ff       	call   10002841 <loadTimezoneStrings()+0x16c>	10002841: R_386_PC32	strcat
10002845:	83 c4 10             	add    esp,0x10
10002848:	eb c4                	jmp    1000280e <loadTimezoneStrings()+0x139>
1000284a:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
1000284d:	3c 0a                	cmp    al,0xa
1000284f:	75 67                	jne    100028b8 <loadTimezoneStrings()+0x1e3>
10002851:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002854:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002857: R_386_32	timezoneStrings
1000285b:	83 ec 0c             	sub    esp,0xc
1000285e:	50                   	push   eax
1000285f:	e8 fc ff ff ff       	call   10002860 <loadTimezoneStrings()+0x18b>	10002860: R_386_PC32	strlen
10002864:	83 c4 10             	add    esp,0x10
10002867:	83 f8 35             	cmp    eax,0x35
1000286a:	77 1d                	ja     10002889 <loadTimezoneStrings()+0x1b4>
1000286c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000286f:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002872: R_386_32	timezoneStrings
10002876:	83 ec 08             	sub    esp,0x8
10002879:	68 2f a6 00 10       	push   0x1000a62f	1000287a: R_386_32	.text
1000287e:	50                   	push   eax
1000287f:	e8 fc ff ff ff       	call   10002880 <loadTimezoneStrings()+0x1ab>	10002880: R_386_PC32	strcat
10002884:	83 c4 10             	add    esp,0x10
10002887:	eb c8                	jmp    10002851 <loadTimezoneStrings()+0x17c>
10002889:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000288c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000288f:	99                   	cdq    
10002890:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10002893:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
10002896:	39 c8                	cmp    eax,ecx
10002898:	89 d0                	mov    eax,edx
1000289a:	19 d8                	sbb    eax,ebx
1000289c:	0f 82 9b 00 00 00    	jb     1000293d <loadTimezoneStrings()+0x268>
100028a2:	83 ec 0c             	sub    esp,0xc
100028a5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
100028a8:	e8 fc ff ff ff       	call   100028a9 <loadTimezoneStrings()+0x1d4>	100028a9: R_386_PC32	free
100028ad:	83 c4 10             	add    esp,0x10
100028b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028b3:	e9 8b 00 00 00       	jmp    10002943 <loadTimezoneStrings()+0x26e>
100028b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028bb:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028be: R_386_32	timezoneStrings
100028c2:	83 ec 0c             	sub    esp,0xc
100028c5:	50                   	push   eax
100028c6:	e8 fc ff ff ff       	call   100028c7 <loadTimezoneStrings()+0x1f2>	100028c7: R_386_PC32	strlen
100028cb:	83 c4 10             	add    esp,0x10
100028ce:	83 f8 31             	cmp    eax,0x31
100028d1:	77 1f                	ja     100028f2 <loadTimezoneStrings()+0x21d>
100028d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028d6:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028d9: R_386_32	timezoneStrings
100028dd:	83 ec 08             	sub    esp,0x8
100028e0:	8d 55 ce             	lea    edx,[ebp-0x32]
100028e3:	52                   	push   edx
100028e4:	50                   	push   eax
100028e5:	e8 fc ff ff ff       	call   100028e6 <loadTimezoneStrings()+0x211>	100028e6: R_386_PC32	strcat
100028ea:	83 c4 10             	add    esp,0x10
100028ed:	e9 f1 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
100028f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028f5:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028f8: R_386_32	timezoneStrings
100028fc:	83 ec 0c             	sub    esp,0xc
100028ff:	50                   	push   eax
10002900:	e8 fc ff ff ff       	call   10002901 <loadTimezoneStrings()+0x22c>	10002901: R_386_PC32	strlen
10002905:	83 c4 10             	add    esp,0x10
10002908:	83 f8 32             	cmp    eax,0x32
1000290b:	0f 85 d2 fe ff ff    	jne    100027e3 <loadTimezoneStrings()+0x10e>
10002911:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002914:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002917: R_386_32	timezoneStrings
1000291b:	83 ec 08             	sub    esp,0x8
1000291e:	68 31 a6 00 10       	push   0x1000a631	1000291f: R_386_32	.text
10002923:	50                   	push   eax
10002924:	e8 fc ff ff ff       	call   10002925 <loadTimezoneStrings()+0x250>	10002925: R_386_PC32	strcat
10002929:	83 c4 10             	add    esp,0x10
1000292c:	e9 b2 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002931:	90                   	nop
10002932:	e9 ac fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002937:	90                   	nop
10002938:	e9 a6 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
1000293d:	90                   	nop
1000293e:	e9 a0 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002943:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002946:	c9                   	leave  
10002947:	c3                   	ret    

10002948 <_bcrypt_rand>:
10002948:	55                   	push   ebp
10002949:	89 e5                	mov    ebp,esp
1000294b:	83 ec 08             	sub    esp,0x8
1000294e:	e8 fc ff ff ff       	call   1000294f <_bcrypt_rand+0x7>	1000294f: R_386_PC32	KeRand()
10002953:	c9                   	leave  
10002954:	c3                   	ret    

10002955 <firstRun(bool)>:
10002955:	55                   	push   ebp
10002956:	89 e5                	mov    ebp,esp
10002958:	57                   	push   edi
10002959:	56                   	push   esi
1000295a:	53                   	push   ebx
1000295b:	81 ec 5c 01 00 00    	sub    esp,0x15c
10002961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002964:	88 85 a4 fe ff ff    	mov    BYTE PTR [ebp-0x15c],al
1000296a:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
10002970:	83 f0 01             	xor    eax,0x1
10002973:	a2 00 00 00 00       	mov    ds:0x0,al	10002974: R_386_32	showSidebar
10002978:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000297a: R_386_32	guiKeyboardHandler
	1000297e: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
10002982:	83 ec 0c             	sub    esp,0xc
10002985:	68 38 a6 00 10       	push   0x1000a638	10002986: R_386_32	.text
1000298a:	e8 fc ff ff ff       	call   1000298b <firstRun(bool)+0x36>	1000298b: R_386_PC32	KeSetBootMessage(char const*)
1000298f:	83 c4 10             	add    esp,0x10
10002992:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002994: R_386_32	VgaText::hiddenOut
10002999:	a1 00 00 00 00       	mov    eax,ds:0x0	1000299a: R_386_32	activeTerminal
1000299e:	83 ec 08             	sub    esp,0x8
100029a1:	68 61 a6 00 10       	push   0x1000a661	100029a2: R_386_32	.text
100029a6:	50                   	push   eax
100029a7:	e8 fc ff ff ff       	call   100029a8 <firstRun(bool)+0x53>	100029a8: R_386_PC32	VgaText::puts(char const*)
100029ac:	83 c4 10             	add    esp,0x10
100029af:	a1 00 00 00 00       	mov    eax,ds:0x0	100029b0: R_386_32	kernelProcess
100029b4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
100029ba:	83 ec 08             	sub    esp,0x8
100029bd:	68 61 a6 00 10       	push   0x1000a661	100029be: R_386_32	.text
100029c2:	50                   	push   eax
100029c3:	e8 fc ff ff ff       	call   100029c4 <firstRun(bool)+0x6f>	100029c4: R_386_PC32	VgaText::puts(char const*)
100029c8:	83 c4 10             	add    esp,0x10
100029cb:	83 ec 0c             	sub    esp,0xc
100029ce:	68 84 01 00 00       	push   0x184
100029d3:	e8 fc ff ff ff       	call   100029d4 <firstRun(bool)+0x7f>	100029d4: R_386_PC32	operator new(unsigned long)
100029d8:	83 c4 10             	add    esp,0x10
100029db:	89 c3                	mov    ebx,eax
100029dd:	83 ec 08             	sub    esp,0x8
100029e0:	68 68 a6 00 10       	push   0x1000a668	100029e1: R_386_32	.text
100029e5:	53                   	push   ebx
100029e6:	e8 fc ff ff ff       	call   100029e7 <firstRun(bool)+0x92>	100029e7: R_386_PC32	VgaText::VgaText(char const*)
100029eb:	83 c4 10             	add    esp,0x10
100029ee:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100029f0: R_386_32	term
100029f4:	a1 00 00 00 00       	mov    eax,ds:0x0	100029f5: R_386_32	term
100029f9:	83 ec 0c             	sub    esp,0xc
100029fc:	50                   	push   eax
100029fd:	e8 fc ff ff ff       	call   100029fe <firstRun(bool)+0xa9>	100029fe: R_386_PC32	setActiveTerminal(VgaText*)
10002a02:	83 c4 10             	add    esp,0x10
10002a05:	e8 fc ff ff ff       	call   10002a06 <firstRun(bool)+0xb1>	10002a06: R_386_PC32	drawBootScreen()
10002a0a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10002a11:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10002a18:	74 17                	je     10002a31 <firstRun(bool)+0xdc>
10002a1a:	83 ec 08             	sub    esp,0x8
10002a1d:	68 6d a6 00 10       	push   0x1000a66d	10002a1e: R_386_32	.text
10002a22:	68 00 00 00 00       	push   0x0	10002a23: R_386_32	pkeybuf
10002a27:	e8 fc ff ff ff       	call   10002a28 <firstRun(bool)+0xd3>	10002a28: R_386_PC32	strcpy
10002a2c:	83 c4 10             	add    esp,0x10
10002a2f:	eb 15                	jmp    10002a46 <firstRun(bool)+0xf1>
10002a31:	83 ec 08             	sub    esp,0x8
10002a34:	68 7e a6 00 10       	push   0x1000a67e	10002a35: R_386_32	.text
10002a39:	68 00 00 00 00       	push   0x0	10002a3a: R_386_32	pkeybuf
10002a3e:	e8 fc ff ff ff       	call   10002a3f <firstRun(bool)+0xea>	10002a3f: R_386_PC32	strcpy
10002a43:	83 c4 10             	add    esp,0x10
10002a46:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
10002a4c:	83 f0 01             	xor    eax,0x1
10002a4f:	84 c0                	test   al,al
10002a51:	0f 84 8b 1c 00 00    	je     100046e2 <firstRun(bool)+0x1d8d>
10002a57:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10002a5e:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002a60: R_386_32	tzsel
10002a68:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002a6a: R_386_32	modesel
10002a72:	eb 01                	jmp    10002a75 <firstRun(bool)+0x120>
10002a74:	90                   	nop
10002a75:	e8 fc ff ff ff       	call   10002a76 <firstRun(bool)+0x121>	10002a76: R_386_PC32	drawBootScreen()
10002a7a:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10002a81:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002a83: R_386_32	installKey
10002a88:	83 ec 0c             	sub    esp,0xc
10002a8b:	68 8f a6 00 10       	push   0x1000a68f	10002a8c: R_386_32	.text
10002a90:	6a 12                	push   0x12
10002a92:	6a 32                	push   0x32
10002a94:	6a 03                	push   0x3
10002a96:	6a 16                	push   0x16
10002a98:	e8 fc ff ff ff       	call   10002a99 <firstRun(bool)+0x144>	10002a99: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10002a9d:	83 c4 20             	add    esp,0x20
10002aa0:	a1 00 00 00 00       	mov    eax,ds:0x0	10002aa1: R_386_32	term
10002aa5:	83 ec 04             	sub    esp,0x4
10002aa8:	6a 06                	push   0x6
10002aaa:	6a 18                	push   0x18
10002aac:	50                   	push   eax
10002aad:	e8 fc ff ff ff       	call   10002aae <firstRun(bool)+0x159>	10002aae: R_386_PC32	VgaText::setCursor(int, int)
10002ab2:	83 c4 10             	add    esp,0x10
10002ab5:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ab6: R_386_32	term
10002aba:	83 ec 08             	sub    esp,0x8
10002abd:	68 9c a6 00 10       	push   0x1000a69c	10002abe: R_386_32	.text
10002ac2:	50                   	push   eax
10002ac3:	e8 fc ff ff ff       	call   10002ac4 <firstRun(bool)+0x16f>	10002ac4: R_386_PC32	VgaText::puts(char const*)
10002ac8:	83 c4 10             	add    esp,0x10
10002acb:	a1 00 00 00 00       	mov    eax,ds:0x0	10002acc: R_386_32	term
10002ad0:	83 ec 04             	sub    esp,0x4
10002ad3:	6a 07                	push   0x7
10002ad5:	6a 18                	push   0x18
10002ad7:	50                   	push   eax
10002ad8:	e8 fc ff ff ff       	call   10002ad9 <firstRun(bool)+0x184>	10002ad9: R_386_PC32	VgaText::setCursor(int, int)
10002add:	83 c4 10             	add    esp,0x10
10002ae0:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ae1: R_386_32	term
10002ae5:	83 ec 08             	sub    esp,0x8
10002ae8:	68 cb a6 00 10       	push   0x1000a6cb	10002ae9: R_386_32	.text
10002aed:	50                   	push   eax
10002aee:	e8 fc ff ff ff       	call   10002aef <firstRun(bool)+0x19a>	10002aef: R_386_PC32	VgaText::puts(char const*)
10002af3:	83 c4 10             	add    esp,0x10
10002af6:	a1 00 00 00 00       	mov    eax,ds:0x0	10002af7: R_386_32	term
10002afb:	83 ec 04             	sub    esp,0x4
10002afe:	6a 09                	push   0x9
10002b00:	6a 18                	push   0x18
10002b02:	50                   	push   eax
10002b03:	e8 fc ff ff ff       	call   10002b04 <firstRun(bool)+0x1af>	10002b04: R_386_PC32	VgaText::setCursor(int, int)
10002b08:	83 c4 10             	add    esp,0x10
10002b0b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b0c: R_386_32	term
10002b10:	83 ec 08             	sub    esp,0x8
10002b13:	68 db a6 00 10       	push   0x1000a6db	10002b14: R_386_32	.text
10002b18:	50                   	push   eax
10002b19:	e8 fc ff ff ff       	call   10002b1a <firstRun(bool)+0x1c5>	10002b1a: R_386_PC32	VgaText::puts(char const*)
10002b1e:	83 c4 10             	add    esp,0x10
10002b21:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b22: R_386_32	term
10002b26:	83 ec 04             	sub    esp,0x4
10002b29:	6a 0b                	push   0xb
10002b2b:	6a 18                	push   0x18
10002b2d:	50                   	push   eax
10002b2e:	e8 fc ff ff ff       	call   10002b2f <firstRun(bool)+0x1da>	10002b2f: R_386_PC32	VgaText::setCursor(int, int)
10002b33:	83 c4 10             	add    esp,0x10
10002b36:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b37: R_386_32	term
10002b3b:	83 ec 08             	sub    esp,0x8
10002b3e:	68 e0 a6 00 10       	push   0x1000a6e0	10002b3f: R_386_32	.text
10002b43:	50                   	push   eax
10002b44:	e8 fc ff ff ff       	call   10002b45 <firstRun(bool)+0x1f0>	10002b45: R_386_PC32	VgaText::puts(char const*)
10002b49:	83 c4 10             	add    esp,0x10
10002b4c:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b4d: R_386_32	term
10002b51:	83 ec 04             	sub    esp,0x4
10002b54:	6a 0d                	push   0xd
10002b56:	6a 18                	push   0x18
10002b58:	50                   	push   eax
10002b59:	e8 fc ff ff ff       	call   10002b5a <firstRun(bool)+0x205>	10002b5a: R_386_PC32	VgaText::setCursor(int, int)
10002b5e:	83 c4 10             	add    esp,0x10
10002b61:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b62: R_386_32	term
10002b66:	83 ec 08             	sub    esp,0x8
10002b69:	68 e8 a6 00 10       	push   0x1000a6e8	10002b6a: R_386_32	.text
10002b6e:	50                   	push   eax
10002b6f:	e8 fc ff ff ff       	call   10002b70 <firstRun(bool)+0x21b>	10002b70: R_386_PC32	VgaText::puts(char const*)
10002b74:	83 c4 10             	add    esp,0x10
10002b77:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b78: R_386_32	term
10002b7c:	83 ec 04             	sub    esp,0x4
10002b7f:	6a 0f                	push   0xf
10002b81:	6a 18                	push   0x18
10002b83:	50                   	push   eax
10002b84:	e8 fc ff ff ff       	call   10002b85 <firstRun(bool)+0x230>	10002b85: R_386_PC32	VgaText::setCursor(int, int)
10002b89:	83 c4 10             	add    esp,0x10
10002b8c:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b8d: R_386_32	term
10002b91:	83 ec 08             	sub    esp,0x8
10002b94:	68 f1 a6 00 10       	push   0x1000a6f1	10002b95: R_386_32	.text
10002b99:	50                   	push   eax
10002b9a:	e8 fc ff ff ff       	call   10002b9b <firstRun(bool)+0x246>	10002b9b: R_386_PC32	VgaText::puts(char const*)
10002b9f:	83 c4 10             	add    esp,0x10
10002ba2:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ba3: R_386_32	term
10002ba7:	83 ec 04             	sub    esp,0x4
10002baa:	6a 10                	push   0x10
10002bac:	6a 18                	push   0x18
10002bae:	50                   	push   eax
10002baf:	e8 fc ff ff ff       	call   10002bb0 <firstRun(bool)+0x25b>	10002bb0: R_386_PC32	VgaText::setCursor(int, int)
10002bb4:	83 c4 10             	add    esp,0x10
10002bb7:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bb8: R_386_32	term
10002bbc:	83 ec 08             	sub    esp,0x8
10002bbf:	68 f9 a6 00 10       	push   0x1000a6f9	10002bc0: R_386_32	.text
10002bc4:	50                   	push   eax
10002bc5:	e8 fc ff ff ff       	call   10002bc6 <firstRun(bool)+0x271>	10002bc6: R_386_PC32	VgaText::puts(char const*)
10002bca:	83 c4 10             	add    esp,0x10
10002bcd:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bce: R_386_32	term
10002bd2:	83 ec 04             	sub    esp,0x4
10002bd5:	6a 09                	push   0x9
10002bd7:	6a 21                	push   0x21
10002bd9:	50                   	push   eax
10002bda:	e8 fc ff ff ff       	call   10002bdb <firstRun(bool)+0x286>	10002bdb: R_386_PC32	VgaText::setCursor(int, int)
10002bdf:	83 c4 10             	add    esp,0x10
10002be2:	a1 00 00 00 00       	mov    eax,ds:0x0	10002be3: R_386_32	term
10002be7:	6a 07                	push   0x7
10002be9:	6a 00                	push   0x0
10002beb:	68 04 a7 00 10       	push   0x1000a704	10002bec: R_386_32	.text
10002bf0:	50                   	push   eax
10002bf1:	e8 fc ff ff ff       	call   10002bf2 <firstRun(bool)+0x29d>	10002bf2: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002bf6:	83 c4 10             	add    esp,0x10
10002bf9:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bfa: R_386_32	term
10002bfe:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10002c02:	75 07                	jne    10002c0b <firstRun(bool)+0x2b6>
10002c04:	ba 29 a7 00 10       	mov    edx,0x1000a729	10002c05: R_386_32	.text
10002c09:	eb 05                	jmp    10002c10 <firstRun(bool)+0x2bb>
10002c0b:	ba 2c a7 00 10       	mov    edx,0x1000a72c	10002c0c: R_386_32	.text
10002c10:	6a 0f                	push   0xf
10002c12:	6a 00                	push   0x0
10002c14:	52                   	push   edx
10002c15:	50                   	push   eax
10002c16:	e8 fc ff ff ff       	call   10002c17 <firstRun(bool)+0x2c2>	10002c17: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c1b:	83 c4 10             	add    esp,0x10
10002c1e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c1f: R_386_32	term
10002c23:	83 ec 08             	sub    esp,0x8
10002c26:	6a 21                	push   0x21
10002c28:	50                   	push   eax
10002c29:	e8 fc ff ff ff       	call   10002c2a <firstRun(bool)+0x2d5>	10002c2a: R_386_PC32	VgaText::setCursorX(int)
10002c2e:	83 c4 10             	add    esp,0x10
10002c31:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c32: R_386_32	term
10002c36:	6a 07                	push   0x7
10002c38:	6a 00                	push   0x0
10002c3a:	68 00 00 00 00       	push   0x0	10002c3b: R_386_32	currName
10002c3f:	50                   	push   eax
10002c40:	e8 fc ff ff ff       	call   10002c41 <firstRun(bool)+0x2ec>	10002c41: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c45:	83 c4 10             	add    esp,0x10
10002c48:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c49: R_386_32	term
10002c4d:	83 ec 04             	sub    esp,0x4
10002c50:	6a 0b                	push   0xb
10002c52:	6a 21                	push   0x21
10002c54:	50                   	push   eax
10002c55:	e8 fc ff ff ff       	call   10002c56 <firstRun(bool)+0x301>	10002c56: R_386_PC32	VgaText::setCursor(int, int)
10002c5a:	83 c4 10             	add    esp,0x10
10002c5d:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c5e: R_386_32	term
10002c62:	6a 07                	push   0x7
10002c64:	6a 00                	push   0x0
10002c66:	68 04 a7 00 10       	push   0x1000a704	10002c67: R_386_32	.text
10002c6b:	50                   	push   eax
10002c6c:	e8 fc ff ff ff       	call   10002c6d <firstRun(bool)+0x318>	10002c6d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c71:	83 c4 10             	add    esp,0x10
10002c74:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c75: R_386_32	term
10002c79:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10002c7d:	75 07                	jne    10002c86 <firstRun(bool)+0x331>
10002c7f:	ba 29 a7 00 10       	mov    edx,0x1000a729	10002c80: R_386_32	.text
10002c84:	eb 05                	jmp    10002c8b <firstRun(bool)+0x336>
10002c86:	ba 2c a7 00 10       	mov    edx,0x1000a72c	10002c87: R_386_32	.text
10002c8b:	6a 0f                	push   0xf
10002c8d:	6a 00                	push   0x0
10002c8f:	52                   	push   edx
10002c90:	50                   	push   eax
10002c91:	e8 fc ff ff ff       	call   10002c92 <firstRun(bool)+0x33d>	10002c92: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c96:	83 c4 10             	add    esp,0x10
10002c99:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c9a: R_386_32	term
10002c9e:	83 ec 08             	sub    esp,0x8
10002ca1:	6a 21                	push   0x21
10002ca3:	50                   	push   eax
10002ca4:	e8 fc ff ff ff       	call   10002ca5 <firstRun(bool)+0x350>	10002ca5: R_386_PC32	VgaText::setCursorX(int)
10002ca9:	83 c4 10             	add    esp,0x10
10002cac:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cad: R_386_32	term
10002cb1:	6a 07                	push   0x7
10002cb3:	6a 00                	push   0x0
10002cb5:	68 00 00 00 00       	push   0x0	10002cb6: R_386_32	currComp
10002cba:	50                   	push   eax
10002cbb:	e8 fc ff ff ff       	call   10002cbc <firstRun(bool)+0x367>	10002cbc: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002cc0:	83 c4 10             	add    esp,0x10
10002cc3:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cc4: R_386_32	term
10002cc8:	83 ec 04             	sub    esp,0x4
10002ccb:	6a 0d                	push   0xd
10002ccd:	6a 21                	push   0x21
10002ccf:	50                   	push   eax
10002cd0:	e8 fc ff ff ff       	call   10002cd1 <firstRun(bool)+0x37c>	10002cd1: R_386_PC32	VgaText::setCursor(int, int)
10002cd5:	83 c4 10             	add    esp,0x10
10002cd8:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cd9: R_386_32	term
10002cdd:	6a 07                	push   0x7
10002cdf:	6a 00                	push   0x0
10002ce1:	68 04 a7 00 10       	push   0x1000a704	10002ce2: R_386_32	.text
10002ce6:	50                   	push   eax
10002ce7:	e8 fc ff ff ff       	call   10002ce8 <firstRun(bool)+0x393>	10002ce8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002cec:	83 c4 10             	add    esp,0x10
10002cef:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cf0: R_386_32	term
10002cf4:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10002cf8:	75 07                	jne    10002d01 <firstRun(bool)+0x3ac>
10002cfa:	ba 29 a7 00 10       	mov    edx,0x1000a729	10002cfb: R_386_32	.text
10002cff:	eb 05                	jmp    10002d06 <firstRun(bool)+0x3b1>
10002d01:	ba 2c a7 00 10       	mov    edx,0x1000a72c	10002d02: R_386_32	.text
10002d06:	6a 0f                	push   0xf
10002d08:	6a 00                	push   0x0
10002d0a:	52                   	push   edx
10002d0b:	50                   	push   eax
10002d0c:	e8 fc ff ff ff       	call   10002d0d <firstRun(bool)+0x3b8>	10002d0d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d11:	83 c4 10             	add    esp,0x10
10002d14:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d15: R_386_32	term
10002d19:	83 ec 08             	sub    esp,0x8
10002d1c:	6a 21                	push   0x21
10002d1e:	50                   	push   eax
10002d1f:	e8 fc ff ff ff       	call   10002d20 <firstRun(bool)+0x3cb>	10002d20: R_386_PC32	VgaText::setCursorX(int)
10002d24:	83 c4 10             	add    esp,0x10
10002d27:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10002d2e:	83 ec 0c             	sub    esp,0xc
10002d31:	68 00 00 00 00       	push   0x0	10002d32: R_386_32	passwbufA
10002d36:	e8 fc ff ff ff       	call   10002d37 <firstRun(bool)+0x3e2>	10002d37: R_386_PC32	strlen
10002d3b:	83 c4 10             	add    esp,0x10
10002d3e:	89 c2                	mov    edx,eax
10002d40:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002d43:	39 c2                	cmp    edx,eax
10002d45:	76 1c                	jbe    10002d63 <firstRun(bool)+0x40e>
10002d47:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d48: R_386_32	term
10002d4c:	6a 07                	push   0x7
10002d4e:	6a 00                	push   0x0
10002d50:	68 30 a7 00 10       	push   0x1000a730	10002d51: R_386_32	.text
10002d55:	50                   	push   eax
10002d56:	e8 fc ff ff ff       	call   10002d57 <firstRun(bool)+0x402>	10002d57: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d5b:	83 c4 10             	add    esp,0x10
10002d5e:	ff 45 d8             	inc    DWORD PTR [ebp-0x28]
10002d61:	eb cb                	jmp    10002d2e <firstRun(bool)+0x3d9>
10002d63:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d64: R_386_32	term
10002d68:	83 ec 04             	sub    esp,0x4
10002d6b:	6a 0f                	push   0xf
10002d6d:	6a 21                	push   0x21
10002d6f:	50                   	push   eax
10002d70:	e8 fc ff ff ff       	call   10002d71 <firstRun(bool)+0x41c>	10002d71: R_386_PC32	VgaText::setCursor(int, int)
10002d75:	83 c4 10             	add    esp,0x10
10002d78:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d79: R_386_32	term
10002d7d:	6a 07                	push   0x7
10002d7f:	6a 00                	push   0x0
10002d81:	68 04 a7 00 10       	push   0x1000a704	10002d82: R_386_32	.text
10002d86:	50                   	push   eax
10002d87:	e8 fc ff ff ff       	call   10002d88 <firstRun(bool)+0x433>	10002d88: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d8c:	83 c4 10             	add    esp,0x10
10002d8f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d90: R_386_32	term
10002d94:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10002d98:	75 07                	jne    10002da1 <firstRun(bool)+0x44c>
10002d9a:	ba 29 a7 00 10       	mov    edx,0x1000a729	10002d9b: R_386_32	.text
10002d9f:	eb 05                	jmp    10002da6 <firstRun(bool)+0x451>
10002da1:	ba 2c a7 00 10       	mov    edx,0x1000a72c	10002da2: R_386_32	.text
10002da6:	6a 0f                	push   0xf
10002da8:	6a 00                	push   0x0
10002daa:	52                   	push   edx
10002dab:	50                   	push   eax
10002dac:	e8 fc ff ff ff       	call   10002dad <firstRun(bool)+0x458>	10002dad: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002db1:	83 c4 10             	add    esp,0x10
10002db4:	a1 00 00 00 00       	mov    eax,ds:0x0	10002db5: R_386_32	term
10002db9:	83 ec 08             	sub    esp,0x8
10002dbc:	6a 21                	push   0x21
10002dbe:	50                   	push   eax
10002dbf:	e8 fc ff ff ff       	call   10002dc0 <firstRun(bool)+0x46b>	10002dc0: R_386_PC32	VgaText::setCursorX(int)
10002dc4:	83 c4 10             	add    esp,0x10
10002dc7:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10002dce:	83 ec 0c             	sub    esp,0xc
10002dd1:	68 00 00 00 00       	push   0x0	10002dd2: R_386_32	passwbufB
10002dd6:	e8 fc ff ff ff       	call   10002dd7 <firstRun(bool)+0x482>	10002dd7: R_386_PC32	strlen
10002ddb:	83 c4 10             	add    esp,0x10
10002dde:	89 c2                	mov    edx,eax
10002de0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10002de3:	39 c2                	cmp    edx,eax
10002de5:	76 1c                	jbe    10002e03 <firstRun(bool)+0x4ae>
10002de7:	a1 00 00 00 00       	mov    eax,ds:0x0	10002de8: R_386_32	term
10002dec:	6a 07                	push   0x7
10002dee:	6a 00                	push   0x0
10002df0:	68 30 a7 00 10       	push   0x1000a730	10002df1: R_386_32	.text
10002df5:	50                   	push   eax
10002df6:	e8 fc ff ff ff       	call   10002df7 <firstRun(bool)+0x4a2>	10002df7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002dfb:	83 c4 10             	add    esp,0x10
10002dfe:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10002e01:	eb cb                	jmp    10002dce <firstRun(bool)+0x479>
10002e03:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e04: R_386_32	term
10002e08:	83 ec 04             	sub    esp,0x4
10002e0b:	6a 14                	push   0x14
10002e0d:	6a 18                	push   0x18
10002e0f:	50                   	push   eax
10002e10:	e8 fc ff ff ff       	call   10002e11 <firstRun(bool)+0x4bc>	10002e11: R_386_PC32	VgaText::setCursor(int, int)
10002e15:	83 c4 10             	add    esp,0x10
10002e18:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e19: R_386_32	term
10002e1d:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002e21:	75 07                	jne    10002e2a <firstRun(bool)+0x4d5>
10002e23:	ba 32 a7 00 10       	mov    edx,0x1000a732	10002e24: R_386_32	.text
10002e28:	eb 05                	jmp    10002e2f <firstRun(bool)+0x4da>
10002e2a:	ba 48 a7 00 10       	mov    edx,0x1000a748	10002e2b: R_386_32	.text
10002e2f:	6a 0f                	push   0xf
10002e31:	6a 08                	push   0x8
10002e33:	52                   	push   edx
10002e34:	50                   	push   eax
10002e35:	e8 fc ff ff ff       	call   10002e36 <firstRun(bool)+0x4e1>	10002e36: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e3a:	83 c4 10             	add    esp,0x10
10002e3d:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e3e: R_386_32	term
10002e42:	83 ec 04             	sub    esp,0x4
10002e45:	6a 14                	push   0x14
10002e47:	6a 3c                	push   0x3c
10002e49:	50                   	push   eax
10002e4a:	e8 fc ff ff ff       	call   10002e4b <firstRun(bool)+0x4f6>	10002e4b: R_386_PC32	VgaText::setCursor(int, int)
10002e4f:	83 c4 10             	add    esp,0x10
10002e52:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002e56:	74 19                	je     10002e71 <firstRun(bool)+0x51c>
10002e58:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e59: R_386_32	term
10002e5d:	6a 08                	push   0x8
10002e5f:	6a 0f                	push   0xf
10002e61:	68 5f a7 00 10       	push   0x1000a75f	10002e62: R_386_32	.text
10002e66:	50                   	push   eax
10002e67:	e8 fc ff ff ff       	call   10002e68 <firstRun(bool)+0x513>	10002e68: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e6c:	83 c4 10             	add    esp,0x10
10002e6f:	eb 17                	jmp    10002e88 <firstRun(bool)+0x533>
10002e71:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e72: R_386_32	term
10002e76:	6a 01                	push   0x1
10002e78:	6a 0f                	push   0xf
10002e7a:	68 5f a7 00 10       	push   0x1000a75f	10002e7b: R_386_32	.text
10002e7f:	50                   	push   eax
10002e80:	e8 fc ff ff ff       	call   10002e81 <firstRun(bool)+0x52c>	10002e81: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e85:	83 c4 10             	add    esp,0x10
10002e88:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e89: R_386_32	term
10002e8d:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002e91:	75 07                	jne    10002e9a <firstRun(bool)+0x545>
10002e93:	ba 68 a7 00 10       	mov    edx,0x1000a768	10002e94: R_386_32	.text
10002e98:	eb 05                	jmp    10002e9f <firstRun(bool)+0x54a>
10002e9a:	ba 2c a7 00 10       	mov    edx,0x1000a72c	10002e9b: R_386_32	.text
10002e9f:	6a 0f                	push   0xf
10002ea1:	6a 00                	push   0x0
10002ea3:	52                   	push   edx
10002ea4:	50                   	push   eax
10002ea5:	e8 fc ff ff ff       	call   10002ea6 <firstRun(bool)+0x551>	10002ea6: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002eaa:	83 c4 10             	add    esp,0x10
10002ead:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10002eb1:	75 28                	jne    10002edb <firstRun(bool)+0x586>
10002eb3:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002eb5: R_386_32	term
10002eb9:	83 ec 0c             	sub    esp,0xc
10002ebc:	68 00 00 00 00       	push   0x0	10002ebd: R_386_32	currName
10002ec1:	e8 fc ff ff ff       	call   10002ec2 <firstRun(bool)+0x56d>	10002ec2: R_386_PC32	strlen
10002ec6:	83 c4 10             	add    esp,0x10
10002ec9:	83 c0 21             	add    eax,0x21
10002ecc:	83 ec 04             	sub    esp,0x4
10002ecf:	6a 09                	push   0x9
10002ed1:	50                   	push   eax
10002ed2:	53                   	push   ebx
10002ed3:	e8 fc ff ff ff       	call   10002ed4 <firstRun(bool)+0x57f>	10002ed4: R_386_PC32	VgaText::setCursor(int, int)
10002ed8:	83 c4 10             	add    esp,0x10
10002edb:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10002edf:	75 28                	jne    10002f09 <firstRun(bool)+0x5b4>
10002ee1:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002ee3: R_386_32	term
10002ee7:	83 ec 0c             	sub    esp,0xc
10002eea:	68 00 00 00 00       	push   0x0	10002eeb: R_386_32	currComp
10002eef:	e8 fc ff ff ff       	call   10002ef0 <firstRun(bool)+0x59b>	10002ef0: R_386_PC32	strlen
10002ef4:	83 c4 10             	add    esp,0x10
10002ef7:	83 c0 21             	add    eax,0x21
10002efa:	83 ec 04             	sub    esp,0x4
10002efd:	6a 0b                	push   0xb
10002eff:	50                   	push   eax
10002f00:	53                   	push   ebx
10002f01:	e8 fc ff ff ff       	call   10002f02 <firstRun(bool)+0x5ad>	10002f02: R_386_PC32	VgaText::setCursor(int, int)
10002f06:	83 c4 10             	add    esp,0x10
10002f09:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10002f0d:	75 28                	jne    10002f37 <firstRun(bool)+0x5e2>
10002f0f:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f11: R_386_32	term
10002f15:	83 ec 0c             	sub    esp,0xc
10002f18:	68 00 00 00 00       	push   0x0	10002f19: R_386_32	passwbufA
10002f1d:	e8 fc ff ff ff       	call   10002f1e <firstRun(bool)+0x5c9>	10002f1e: R_386_PC32	strlen
10002f22:	83 c4 10             	add    esp,0x10
10002f25:	83 c0 21             	add    eax,0x21
10002f28:	83 ec 04             	sub    esp,0x4
10002f2b:	6a 0d                	push   0xd
10002f2d:	50                   	push   eax
10002f2e:	53                   	push   ebx
10002f2f:	e8 fc ff ff ff       	call   10002f30 <firstRun(bool)+0x5db>	10002f30: R_386_PC32	VgaText::setCursor(int, int)
10002f34:	83 c4 10             	add    esp,0x10
10002f37:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10002f3b:	75 28                	jne    10002f65 <firstRun(bool)+0x610>
10002f3d:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f3f: R_386_32	term
10002f43:	83 ec 0c             	sub    esp,0xc
10002f46:	68 00 00 00 00       	push   0x0	10002f47: R_386_32	passwbufB
10002f4b:	e8 fc ff ff ff       	call   10002f4c <firstRun(bool)+0x5f7>	10002f4c: R_386_PC32	strlen
10002f50:	83 c4 10             	add    esp,0x10
10002f53:	83 c0 21             	add    eax,0x21
10002f56:	83 ec 04             	sub    esp,0x4
10002f59:	6a 0f                	push   0xf
10002f5b:	50                   	push   eax
10002f5c:	53                   	push   ebx
10002f5d:	e8 fc ff ff ff       	call   10002f5e <firstRun(bool)+0x609>	10002f5e: R_386_PC32	VgaText::setCursor(int, int)
10002f62:	83 c4 10             	add    esp,0x10
10002f65:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002f69:	75 15                	jne    10002f80 <firstRun(bool)+0x62b>
10002f6b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002f6c: R_386_32	term
10002f70:	83 ec 04             	sub    esp,0x4
10002f73:	6a 02                	push   0x2
10002f75:	6a 00                	push   0x0
10002f77:	50                   	push   eax
10002f78:	e8 fc ff ff ff       	call   10002f79 <firstRun(bool)+0x624>	10002f79: R_386_PC32	VgaText::setCursor(int, int)
10002f7d:	83 c4 10             	add    esp,0x10
10002f80:	a0 00 00 00 00       	mov    al,ds:0x0	10002f81: R_386_32	installKey
10002f85:	84 c0                	test   al,al
10002f87:	0f 94 c0             	sete   al
10002f8a:	84 c0                	test   al,al
10002f8c:	74 02                	je     10002f90 <firstRun(bool)+0x63b>
10002f8e:	eb f0                	jmp    10002f80 <firstRun(bool)+0x62b>
10002f90:	a1 00 00 00 00       	mov    eax,ds:0x0	10002f91: R_386_32	term
10002f95:	05 82 00 00 00       	add    eax,0x82
10002f9a:	83 ec 04             	sub    esp,0x4
10002f9d:	6a 10                	push   0x10
10002f9f:	6a 00                	push   0x0
10002fa1:	50                   	push   eax
10002fa2:	e8 fc ff ff ff       	call   10002fa3 <firstRun(bool)+0x64e>	10002fa3: R_386_PC32	memset
10002fa7:	83 c4 10             	add    esp,0x10
10002faa:	a1 00 00 00 00       	mov    eax,ds:0x0	10002fab: R_386_32	term
10002faf:	05 02 01 00 00       	add    eax,0x102
10002fb4:	83 ec 04             	sub    esp,0x4
10002fb7:	6a 10                	push   0x10
10002fb9:	6a 00                	push   0x0
10002fbb:	50                   	push   eax
10002fbc:	e8 fc ff ff ff       	call   10002fbd <firstRun(bool)+0x668>	10002fbd: R_386_PC32	memset
10002fc1:	83 c4 10             	add    esp,0x10
10002fc4:	a0 00 00 00 00       	mov    al,ds:0x0	10002fc5: R_386_32	installKey
10002fc9:	3c 09                	cmp    al,0x9
10002fcb:	74 09                	je     10002fd6 <firstRun(bool)+0x681>
10002fcd:	a0 00 00 00 00       	mov    al,ds:0x0	10002fce: R_386_32	installKey
10002fd2:	3c 0a                	cmp    al,0xa
10002fd4:	75 04                	jne    10002fda <firstRun(bool)+0x685>
10002fd6:	b0 01                	mov    al,0x1
10002fd8:	eb 02                	jmp    10002fdc <firstRun(bool)+0x687>
10002fda:	b0 00                	mov    al,0x0
10002fdc:	84 c0                	test   al,al
10002fde:	0f 84 93 00 00 00    	je     10003077 <firstRun(bool)+0x722>
10002fe4:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002fe8:	75 0d                	jne    10002ff7 <firstRun(bool)+0x6a2>
10002fea:	a0 00 00 00 00       	mov    al,ds:0x0	10002feb: R_386_32	installKey
10002fef:	3c 0a                	cmp    al,0xa
10002ff1:	75 04                	jne    10002ff7 <firstRun(bool)+0x6a2>
10002ff3:	b0 01                	mov    al,0x1
10002ff5:	eb 02                	jmp    10002ff9 <firstRun(bool)+0x6a4>
10002ff7:	b0 00                	mov    al,0x0
10002ff9:	84 c0                	test   al,al
10002ffb:	74 55                	je     10003052 <firstRun(bool)+0x6fd>
10002ffd:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002fff: R_386_32	installKey
10003004:	83 ec 08             	sub    esp,0x8
10003007:	68 00 00 00 00       	push   0x0	10003008: R_386_32	passwbufB
1000300c:	68 00 00 00 00       	push   0x0	1000300d: R_386_32	passwbufA
10003011:	e8 fc ff ff ff       	call   10003012 <firstRun(bool)+0x6bd>	10003012: R_386_PC32	strcmp
10003016:	83 c4 10             	add    esp,0x10
10003019:	85 c0                	test   eax,eax
1000301b:	0f 84 c5 02 00 00    	je     100032e6 <firstRun(bool)+0x991>
10003021:	c7 45 e0 02 00 00 00 	mov    DWORD PTR [ebp-0x20],0x2
10003028:	83 ec 04             	sub    esp,0x4
1000302b:	6a 30                	push   0x30
1000302d:	6a 00                	push   0x0
1000302f:	68 00 00 00 00       	push   0x0	10003030: R_386_32	passwbufA
10003034:	e8 fc ff ff ff       	call   10003035 <firstRun(bool)+0x6e0>	10003035: R_386_PC32	memset
10003039:	83 c4 10             	add    esp,0x10
1000303c:	83 ec 04             	sub    esp,0x4
1000303f:	6a 30                	push   0x30
10003041:	6a 00                	push   0x0
10003043:	68 00 00 00 00       	push   0x0	10003044: R_386_32	passwbufB
10003048:	e8 fc ff ff ff       	call   10003049 <firstRun(bool)+0x6f4>	10003049: R_386_PC32	memset
1000304d:	83 c4 10             	add    esp,0x10
10003050:	eb 10                	jmp    10003062 <firstRun(bool)+0x70d>
10003052:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10003055:	83 7d e0 05          	cmp    DWORD PTR [ebp-0x20],0x5
10003059:	75 07                	jne    10003062 <firstRun(bool)+0x70d>
1000305b:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003062:	83 ec 0c             	sub    esp,0xc
10003065:	68 2c 01 00 00       	push   0x12c
1000306a:	e8 fc ff ff ff       	call   1000306b <firstRun(bool)+0x716>	1000306b: R_386_PC32	milliTenthSleep(unsigned int)
1000306f:	83 c4 10             	add    esp,0x10
10003072:	e9 63 02 00 00       	jmp    100032da <firstRun(bool)+0x985>
10003077:	a0 00 00 00 00       	mov    al,ds:0x0	10003078: R_386_32	installKey
1000307c:	3c 1f                	cmp    al,0x1f
1000307e:	7e 0d                	jle    1000308d <firstRun(bool)+0x738>
10003080:	a0 00 00 00 00       	mov    al,ds:0x0	10003081: R_386_32	installKey
10003085:	3c 7f                	cmp    al,0x7f
10003087:	74 04                	je     1000308d <firstRun(bool)+0x738>
10003089:	b0 01                	mov    al,0x1
1000308b:	eb 02                	jmp    1000308f <firstRun(bool)+0x73a>
1000308d:	b0 00                	mov    al,0x0
1000308f:	84 c0                	test   al,al
10003091:	0f 84 39 01 00 00    	je     100031d0 <firstRun(bool)+0x87b>
10003097:	a0 00 00 00 00       	mov    al,ds:0x0	10003098: R_386_32	installKey
1000309c:	88 85 c6 fe ff ff    	mov    BYTE PTR [ebp-0x13a],al
100030a2:	c6 85 c7 fe ff ff 00 	mov    BYTE PTR [ebp-0x139],0x0
100030a9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100030ad:	75 7e                	jne    1000312d <firstRun(bool)+0x7d8>
100030af:	83 ec 0c             	sub    esp,0xc
100030b2:	68 00 00 00 00       	push   0x0	100030b3: R_386_32	currName
100030b7:	e8 fc ff ff ff       	call   100030b8 <firstRun(bool)+0x763>	100030b8: R_386_PC32	strlen
100030bc:	83 c4 10             	add    esp,0x10
100030bf:	83 f8 22             	cmp    eax,0x22
100030c2:	77 69                	ja     1000312d <firstRun(bool)+0x7d8>
100030c4:	a0 00 00 00 00       	mov    al,ds:0x0	100030c5: R_386_32	installKey
100030c9:	3c 40                	cmp    al,0x40
100030cb:	7e 09                	jle    100030d6 <firstRun(bool)+0x781>
100030cd:	a0 00 00 00 00       	mov    al,ds:0x0	100030ce: R_386_32	installKey
100030d2:	3c 59                	cmp    al,0x59
100030d4:	7f 36                	jg     1000310c <firstRun(bool)+0x7b7>
100030d6:	a0 00 00 00 00       	mov    al,ds:0x0	100030d7: R_386_32	installKey
100030db:	3c 60                	cmp    al,0x60
100030dd:	7e 09                	jle    100030e8 <firstRun(bool)+0x793>
100030df:	a0 00 00 00 00       	mov    al,ds:0x0	100030e0: R_386_32	installKey
100030e4:	3c 79                	cmp    al,0x79
100030e6:	7f 24                	jg     1000310c <firstRun(bool)+0x7b7>
100030e8:	a0 00 00 00 00       	mov    al,ds:0x0	100030e9: R_386_32	installKey
100030ed:	3c 2f                	cmp    al,0x2f
100030ef:	7e 09                	jle    100030fa <firstRun(bool)+0x7a5>
100030f1:	a0 00 00 00 00       	mov    al,ds:0x0	100030f2: R_386_32	installKey
100030f6:	3c 38                	cmp    al,0x38
100030f8:	7f 12                	jg     1000310c <firstRun(bool)+0x7b7>
100030fa:	a0 00 00 00 00       	mov    al,ds:0x0	100030fb: R_386_32	installKey
100030ff:	3c 5f                	cmp    al,0x5f
10003101:	74 09                	je     1000310c <firstRun(bool)+0x7b7>
10003103:	a0 00 00 00 00       	mov    al,ds:0x0	10003104: R_386_32	installKey
10003108:	3c 20                	cmp    al,0x20
1000310a:	75 04                	jne    10003110 <firstRun(bool)+0x7bb>
1000310c:	b0 01                	mov    al,0x1
1000310e:	eb 02                	jmp    10003112 <firstRun(bool)+0x7bd>
10003110:	b0 00                	mov    al,0x0
10003112:	84 c0                	test   al,al
10003114:	74 17                	je     1000312d <firstRun(bool)+0x7d8>
10003116:	83 ec 08             	sub    esp,0x8
10003119:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
1000311f:	50                   	push   eax
10003120:	68 00 00 00 00       	push   0x0	10003121: R_386_32	currName
10003125:	e8 fc ff ff ff       	call   10003126 <firstRun(bool)+0x7d1>	10003126: R_386_PC32	strcat
1000312a:	83 c4 10             	add    esp,0x10
1000312d:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003131:	75 2c                	jne    1000315f <firstRun(bool)+0x80a>
10003133:	83 ec 0c             	sub    esp,0xc
10003136:	68 00 00 00 00       	push   0x0	10003137: R_386_32	currComp
1000313b:	e8 fc ff ff ff       	call   1000313c <firstRun(bool)+0x7e7>	1000313c: R_386_PC32	strlen
10003140:	83 c4 10             	add    esp,0x10
10003143:	83 f8 22             	cmp    eax,0x22
10003146:	77 17                	ja     1000315f <firstRun(bool)+0x80a>
10003148:	83 ec 08             	sub    esp,0x8
1000314b:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003151:	50                   	push   eax
10003152:	68 00 00 00 00       	push   0x0	10003153: R_386_32	currComp
10003157:	e8 fc ff ff ff       	call   10003158 <firstRun(bool)+0x803>	10003158: R_386_PC32	strcat
1000315c:	83 c4 10             	add    esp,0x10
1000315f:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10003163:	75 2c                	jne    10003191 <firstRun(bool)+0x83c>
10003165:	83 ec 0c             	sub    esp,0xc
10003168:	68 00 00 00 00       	push   0x0	10003169: R_386_32	passwbufA
1000316d:	e8 fc ff ff ff       	call   1000316e <firstRun(bool)+0x819>	1000316e: R_386_PC32	strlen
10003172:	83 c4 10             	add    esp,0x10
10003175:	83 f8 22             	cmp    eax,0x22
10003178:	77 17                	ja     10003191 <firstRun(bool)+0x83c>
1000317a:	83 ec 08             	sub    esp,0x8
1000317d:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003183:	50                   	push   eax
10003184:	68 00 00 00 00       	push   0x0	10003185: R_386_32	passwbufA
10003189:	e8 fc ff ff ff       	call   1000318a <firstRun(bool)+0x835>	1000318a: R_386_PC32	strcat
1000318e:	83 c4 10             	add    esp,0x10
10003191:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10003195:	0f 85 3f 01 00 00    	jne    100032da <firstRun(bool)+0x985>
1000319b:	83 ec 0c             	sub    esp,0xc
1000319e:	68 00 00 00 00       	push   0x0	1000319f: R_386_32	passwbufB
100031a3:	e8 fc ff ff ff       	call   100031a4 <firstRun(bool)+0x84f>	100031a4: R_386_PC32	strlen
100031a8:	83 c4 10             	add    esp,0x10
100031ab:	83 f8 22             	cmp    eax,0x22
100031ae:	0f 87 26 01 00 00    	ja     100032da <firstRun(bool)+0x985>
100031b4:	83 ec 08             	sub    esp,0x8
100031b7:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
100031bd:	50                   	push   eax
100031be:	68 00 00 00 00       	push   0x0	100031bf: R_386_32	passwbufB
100031c3:	e8 fc ff ff ff       	call   100031c4 <firstRun(bool)+0x86f>	100031c4: R_386_PC32	strcat
100031c8:	83 c4 10             	add    esp,0x10
100031cb:	e9 0a 01 00 00       	jmp    100032da <firstRun(bool)+0x985>
100031d0:	a0 00 00 00 00       	mov    al,ds:0x0	100031d1: R_386_32	installKey
100031d5:	3c 08                	cmp    al,0x8
100031d7:	0f 94 c0             	sete   al
100031da:	84 c0                	test   al,al
100031dc:	0f 84 ca 00 00 00    	je     100032ac <firstRun(bool)+0x957>
100031e2:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100031e6:	75 2c                	jne    10003214 <firstRun(bool)+0x8bf>
100031e8:	83 ec 0c             	sub    esp,0xc
100031eb:	68 00 00 00 00       	push   0x0	100031ec: R_386_32	currName
100031f0:	e8 fc ff ff ff       	call   100031f1 <firstRun(bool)+0x89c>	100031f1: R_386_PC32	strlen
100031f5:	83 c4 10             	add    esp,0x10
100031f8:	85 c0                	test   eax,eax
100031fa:	74 18                	je     10003214 <firstRun(bool)+0x8bf>
100031fc:	83 ec 0c             	sub    esp,0xc
100031ff:	68 00 00 00 00       	push   0x0	10003200: R_386_32	currName
10003204:	e8 fc ff ff ff       	call   10003205 <firstRun(bool)+0x8b0>	10003205: R_386_PC32	strlen
10003209:	83 c4 10             	add    esp,0x10
1000320c:	48                   	dec    eax
1000320d:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	1000320f: R_386_32	currName
10003214:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003218:	75 2c                	jne    10003246 <firstRun(bool)+0x8f1>
1000321a:	83 ec 0c             	sub    esp,0xc
1000321d:	68 00 00 00 00       	push   0x0	1000321e: R_386_32	currComp
10003222:	e8 fc ff ff ff       	call   10003223 <firstRun(bool)+0x8ce>	10003223: R_386_PC32	strlen
10003227:	83 c4 10             	add    esp,0x10
1000322a:	85 c0                	test   eax,eax
1000322c:	74 18                	je     10003246 <firstRun(bool)+0x8f1>
1000322e:	83 ec 0c             	sub    esp,0xc
10003231:	68 00 00 00 00       	push   0x0	10003232: R_386_32	currComp
10003236:	e8 fc ff ff ff       	call   10003237 <firstRun(bool)+0x8e2>	10003237: R_386_PC32	strlen
1000323b:	83 c4 10             	add    esp,0x10
1000323e:	48                   	dec    eax
1000323f:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003241: R_386_32	currComp
10003246:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
1000324a:	75 2c                	jne    10003278 <firstRun(bool)+0x923>
1000324c:	83 ec 0c             	sub    esp,0xc
1000324f:	68 00 00 00 00       	push   0x0	10003250: R_386_32	passwbufA
10003254:	e8 fc ff ff ff       	call   10003255 <firstRun(bool)+0x900>	10003255: R_386_PC32	strlen
10003259:	83 c4 10             	add    esp,0x10
1000325c:	85 c0                	test   eax,eax
1000325e:	74 18                	je     10003278 <firstRun(bool)+0x923>
10003260:	83 ec 0c             	sub    esp,0xc
10003263:	68 00 00 00 00       	push   0x0	10003264: R_386_32	passwbufA
10003268:	e8 fc ff ff ff       	call   10003269 <firstRun(bool)+0x914>	10003269: R_386_PC32	strlen
1000326d:	83 c4 10             	add    esp,0x10
10003270:	48                   	dec    eax
10003271:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003273: R_386_32	passwbufA
10003278:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
1000327c:	75 5c                	jne    100032da <firstRun(bool)+0x985>
1000327e:	83 ec 0c             	sub    esp,0xc
10003281:	68 00 00 00 00       	push   0x0	10003282: R_386_32	passwbufB
10003286:	e8 fc ff ff ff       	call   10003287 <firstRun(bool)+0x932>	10003287: R_386_PC32	strlen
1000328b:	83 c4 10             	add    esp,0x10
1000328e:	85 c0                	test   eax,eax
10003290:	74 48                	je     100032da <firstRun(bool)+0x985>
10003292:	83 ec 0c             	sub    esp,0xc
10003295:	68 00 00 00 00       	push   0x0	10003296: R_386_32	passwbufB
1000329a:	e8 fc ff ff ff       	call   1000329b <firstRun(bool)+0x946>	1000329b: R_386_PC32	strlen
1000329f:	83 c4 10             	add    esp,0x10
100032a2:	48                   	dec    eax
100032a3:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	100032a5: R_386_32	passwbufB
100032aa:	eb 2e                	jmp    100032da <firstRun(bool)+0x985>
100032ac:	a0 00 00 00 00       	mov    al,ds:0x0	100032ad: R_386_32	installKey
100032b1:	3c 7f                	cmp    al,0x7f
100032b3:	0f 94 c0             	sete   al
100032b6:	84 c0                	test   al,al
100032b8:	74 20                	je     100032da <firstRun(bool)+0x985>
100032ba:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
100032bd:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
100032c1:	75 07                	jne    100032ca <firstRun(bool)+0x975>
100032c3:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100032ca:	83 ec 0c             	sub    esp,0xc
100032cd:	68 2c 01 00 00       	push   0x12c
100032d2:	e8 fc ff ff ff       	call   100032d3 <firstRun(bool)+0x97e>	100032d3: R_386_PC32	milliTenthSleep(unsigned int)
100032d7:	83 c4 10             	add    esp,0x10
100032da:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100032dc: R_386_32	installKey
100032e1:	e9 e7 f8 ff ff       	jmp    10002bcd <firstRun(bool)+0x278>
100032e6:	90                   	nop
100032e7:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100032e9: R_386_32	installKey
100032ee:	83 ec 0c             	sub    esp,0xc
100032f1:	68 d0 07 00 00       	push   0x7d0
100032f6:	e8 fc ff ff ff       	call   100032f7 <firstRun(bool)+0x9a2>	100032f7: R_386_PC32	milliTenthSleep(unsigned int)
100032fb:	83 c4 10             	add    esp,0x10
100032fe:	e8 fc ff ff ff       	call   100032ff <firstRun(bool)+0x9aa>	100032ff: R_386_PC32	drawBootScreen()
10003303:	c7 45 bc 08 00 00 00 	mov    DWORD PTR [ebp-0x44],0x8
1000330a:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000330c: R_386_32	_bcrypt_errno
10003314:	83 ec 08             	sub    esp,0x8
10003317:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
1000331d:	50                   	push   eax
1000331e:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10003321:	e8 fc ff ff ff       	call   10003322 <firstRun(bool)+0x9cd>	10003322: R_386_PC32	bcrypt_gensalt
10003326:	83 c4 10             	add    esp,0x10
10003329:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
1000332c:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10003330:	75 09                	jne    1000333b <firstRun(bool)+0x9e6>
10003332:	a1 00 00 00 00       	mov    eax,ds:0x0	10003333: R_386_32	_bcrypt_errno
10003337:	85 c0                	test   eax,eax
10003339:	74 5e                	je     10003399 <firstRun(bool)+0xa44>
1000333b:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003342:	83 ec 08             	sub    esp,0x8
10003345:	68 6c a7 00 10       	push   0x1000a76c	10003346: R_386_32	.text
1000334a:	68 00 00 00 00       	push   0x0	1000334b: R_386_32	currName
1000334f:	e8 fc ff ff ff       	call   10003350 <firstRun(bool)+0x9fb>	10003350: R_386_PC32	strcpy
10003354:	83 c4 10             	add    esp,0x10
10003357:	83 ec 08             	sub    esp,0x8
1000335a:	68 7b a7 00 10       	push   0x1000a77b	1000335b: R_386_32	.text
1000335f:	68 00 00 00 00       	push   0x0	10003360: R_386_32	currComp
10003364:	e8 fc ff ff ff       	call   10003365 <firstRun(bool)+0xa10>	10003365: R_386_PC32	strcpy
10003369:	83 c4 10             	add    esp,0x10
1000336c:	83 ec 04             	sub    esp,0x4
1000336f:	6a 50                	push   0x50
10003371:	6a 00                	push   0x0
10003373:	68 00 00 00 00       	push   0x0	10003374: R_386_32	passwbufA
10003378:	e8 fc ff ff ff       	call   10003379 <firstRun(bool)+0xa24>	10003379: R_386_PC32	memset
1000337d:	83 c4 10             	add    esp,0x10
10003380:	83 ec 04             	sub    esp,0x4
10003383:	6a 50                	push   0x50
10003385:	6a 00                	push   0x0
10003387:	68 00 00 00 00       	push   0x0	10003388: R_386_32	passwbufB
1000338c:	e8 fc ff ff ff       	call   1000338d <firstRun(bool)+0xa38>	1000338d: R_386_PC32	memset
10003391:	83 c4 10             	add    esp,0x10
10003394:	e9 dc f6 ff ff       	jmp    10002a75 <firstRun(bool)+0x120>
10003399:	83 ec 08             	sub    esp,0x8
1000339c:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
100033a2:	50                   	push   eax
100033a3:	68 00 00 00 00       	push   0x0	100033a4: R_386_32	passwsalt
100033a8:	e8 fc ff ff ff       	call   100033a9 <firstRun(bool)+0xa54>	100033a9: R_386_PC32	strcpy
100033ad:	83 c4 10             	add    esp,0x10
100033b0:	83 ec 04             	sub    esp,0x4
100033b3:	68 00 00 00 00       	push   0x0	100033b4: R_386_32	passwhash
100033b8:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
100033be:	50                   	push   eax
100033bf:	68 00 00 00 00       	push   0x0	100033c0: R_386_32	passwbufA
100033c4:	e8 fc ff ff ff       	call   100033c5 <firstRun(bool)+0xa70>	100033c5: R_386_PC32	bcrypt_hashpw
100033c9:	83 c4 10             	add    esp,0x10
100033cc:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100033cf:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100033d3:	75 09                	jne    100033de <firstRun(bool)+0xa89>
100033d5:	a1 00 00 00 00       	mov    eax,ds:0x0	100033d6: R_386_32	_bcrypt_errno
100033da:	85 c0                	test   eax,eax
100033dc:	74 5e                	je     1000343c <firstRun(bool)+0xae7>
100033de:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100033e5:	83 ec 08             	sub    esp,0x8
100033e8:	68 6c a7 00 10       	push   0x1000a76c	100033e9: R_386_32	.text
100033ed:	68 00 00 00 00       	push   0x0	100033ee: R_386_32	currName
100033f2:	e8 fc ff ff ff       	call   100033f3 <firstRun(bool)+0xa9e>	100033f3: R_386_PC32	strcpy
100033f7:	83 c4 10             	add    esp,0x10
100033fa:	83 ec 08             	sub    esp,0x8
100033fd:	68 8d a7 00 10       	push   0x1000a78d	100033fe: R_386_32	.text
10003402:	68 00 00 00 00       	push   0x0	10003403: R_386_32	currComp
10003407:	e8 fc ff ff ff       	call   10003408 <firstRun(bool)+0xab3>	10003408: R_386_PC32	strcpy
1000340c:	83 c4 10             	add    esp,0x10
1000340f:	83 ec 04             	sub    esp,0x4
10003412:	6a 50                	push   0x50
10003414:	6a 00                	push   0x0
10003416:	68 00 00 00 00       	push   0x0	10003417: R_386_32	passwbufA
1000341b:	e8 fc ff ff ff       	call   1000341c <firstRun(bool)+0xac7>	1000341c: R_386_PC32	memset
10003420:	83 c4 10             	add    esp,0x10
10003423:	83 ec 04             	sub    esp,0x4
10003426:	6a 50                	push   0x50
10003428:	6a 00                	push   0x0
1000342a:	68 00 00 00 00       	push   0x0	1000342b: R_386_32	passwbufB
1000342f:	e8 fc ff ff ff       	call   10003430 <firstRun(bool)+0xadb>	10003430: R_386_PC32	memset
10003434:	83 c4 10             	add    esp,0x10
10003437:	e9 39 f6 ff ff       	jmp    10002a75 <firstRun(bool)+0x120>
1000343c:	83 ec 04             	sub    esp,0x4
1000343f:	6a 50                	push   0x50
10003441:	6a 00                	push   0x0
10003443:	68 00 00 00 00       	push   0x0	10003444: R_386_32	passwbufA
10003448:	e8 fc ff ff ff       	call   10003449 <firstRun(bool)+0xaf4>	10003449: R_386_PC32	memset
1000344d:	83 c4 10             	add    esp,0x10
10003450:	83 ec 04             	sub    esp,0x4
10003453:	6a 50                	push   0x50
10003455:	6a 00                	push   0x0
10003457:	68 00 00 00 00       	push   0x0	10003458: R_386_32	passwbufB
1000345c:	e8 fc ff ff ff       	call   1000345d <firstRun(bool)+0xb08>	1000345d: R_386_PC32	memset
10003461:	83 c4 10             	add    esp,0x10
10003464:	83 ec 0c             	sub    esp,0xc
10003467:	68 d0 07 00 00       	push   0x7d0
1000346c:	e8 fc ff ff ff       	call   1000346d <firstRun(bool)+0xb18>	1000346d: R_386_PC32	milliTenthSleep(unsigned int)
10003471:	83 c4 10             	add    esp,0x10
10003474:	eb 01                	jmp    10003477 <firstRun(bool)+0xb22>
10003476:	90                   	nop
10003477:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003479: R_386_32	installKey
1000347e:	e8 fc ff ff ff       	call   1000347f <firstRun(bool)+0xb2a>	1000347f: R_386_PC32	drawBootScreen()
10003483:	83 ec 0c             	sub    esp,0xc
10003486:	68 9f a7 00 10       	push   0x1000a79f	10003487: R_386_32	.text
1000348b:	6a 0d                	push   0xd
1000348d:	6a 32                	push   0x32
1000348f:	6a 02                	push   0x2
10003491:	6a 16                	push   0x16
10003493:	e8 fc ff ff ff       	call   10003494 <firstRun(bool)+0xb3f>	10003494: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003498:	83 c4 20             	add    esp,0x20
1000349b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000349c: R_386_32	Krnl::computer
100034a0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
100034a6:	a1 00 00 00 00       	mov    eax,ds:0x0	100034a7: R_386_32	Krnl::computer
100034ab:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100034b1:	8b 00                	mov    eax,DWORD PTR [eax]
100034b3:	83 c0 28             	add    eax,0x28
100034b6:	8b 00                	mov    eax,DWORD PTR [eax]
100034b8:	8d 95 98 fe ff ff    	lea    edx,[ebp-0x168]
100034be:	83 ec 08             	sub    esp,0x8
100034c1:	51                   	push   ecx
100034c2:	52                   	push   edx
100034c3:	ff d0                	call   eax
100034c5:	83 c4 0c             	add    esp,0xc
100034c8:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [ebp-0x168]
100034ce:	8b 95 9c fe ff ff    	mov    edx,DWORD PTR [ebp-0x164]
100034d4:	89 85 d4 fe ff ff    	mov    DWORD PTR [ebp-0x12c],eax
100034da:	89 95 d8 fe ff ff    	mov    DWORD PTR [ebp-0x128],edx
100034e0:	83 ec 08             	sub    esp,0x8
100034e3:	68 ad a7 00 10       	push   0x1000a7ad	100034e4: R_386_32	.text
100034e8:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
100034ee:	50                   	push   eax
100034ef:	e8 fc ff ff ff       	call   100034f0 <firstRun(bool)+0xb9b>	100034f0: R_386_PC32	strcpy
100034f4:	83 c4 10             	add    esp,0x10
100034f7:	8a 85 d4 fe ff ff    	mov    al,BYTE PTR [ebp-0x12c]
100034fd:	0f b6 d0             	movzx  edx,al
10003500:	89 d0                	mov    eax,edx
10003502:	c1 e0 02             	shl    eax,0x2
10003505:	01 d0                	add    eax,edx
10003507:	c1 e0 03             	shl    eax,0x3
1000350a:	01 d0                	add    eax,edx
1000350c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003513:	01 d0                	add    eax,edx
10003515:	66 c1 e8 08          	shr    ax,0x8
10003519:	c0 e8 03             	shr    al,0x3
1000351c:	83 c0 30             	add    eax,0x30
1000351f:	88 85 40 ff ff ff    	mov    BYTE PTR [ebp-0xc0],al
10003525:	8a 8d d4 fe ff ff    	mov    cl,BYTE PTR [ebp-0x12c]
1000352b:	0f b6 d1             	movzx  edx,cl
1000352e:	89 d0                	mov    eax,edx
10003530:	c1 e0 02             	shl    eax,0x2
10003533:	01 d0                	add    eax,edx
10003535:	c1 e0 03             	shl    eax,0x3
10003538:	01 d0                	add    eax,edx
1000353a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003541:	01 d0                	add    eax,edx
10003543:	66 c1 e8 08          	shr    ax,0x8
10003547:	88 c2                	mov    dl,al
10003549:	c0 ea 03             	shr    dl,0x3
1000354c:	88 d0                	mov    al,dl
1000354e:	c1 e0 02             	shl    eax,0x2
10003551:	01 d0                	add    eax,edx
10003553:	d1 e0                	shl    eax,1
10003555:	29 c1                	sub    ecx,eax
10003557:	88 ca                	mov    dl,cl
10003559:	8d 42 30             	lea    eax,[edx+0x30]
1000355c:	88 85 41 ff ff ff    	mov    BYTE PTR [ebp-0xbf],al
10003562:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
10003568:	0f b6 c8             	movzx  ecx,al
1000356b:	b8 67 66 66 66       	mov    eax,0x66666667
10003570:	f7 e9                	imul   ecx
10003572:	c1 fa 02             	sar    edx,0x2
10003575:	89 c8                	mov    eax,ecx
10003577:	c1 f8 1f             	sar    eax,0x1f
1000357a:	29 c2                	sub    edx,eax
1000357c:	89 d0                	mov    eax,edx
1000357e:	83 c0 30             	add    eax,0x30
10003581:	88 85 43 ff ff ff    	mov    BYTE PTR [ebp-0xbd],al
10003587:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
1000358d:	0f b6 c8             	movzx  ecx,al
10003590:	b8 67 66 66 66       	mov    eax,0x66666667
10003595:	f7 e9                	imul   ecx
10003597:	c1 fa 02             	sar    edx,0x2
1000359a:	89 c8                	mov    eax,ecx
1000359c:	c1 f8 1f             	sar    eax,0x1f
1000359f:	29 c2                	sub    edx,eax
100035a1:	89 d0                	mov    eax,edx
100035a3:	c1 e0 02             	shl    eax,0x2
100035a6:	01 d0                	add    eax,edx
100035a8:	01 c0                	add    eax,eax
100035aa:	29 c1                	sub    ecx,eax
100035ac:	89 ca                	mov    edx,ecx
100035ae:	88 d0                	mov    al,dl
100035b0:	83 c0 30             	add    eax,0x30
100035b3:	88 85 44 ff ff ff    	mov    BYTE PTR [ebp-0xbc],al
100035b9:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
100035c0:	0f b7 c8             	movzx  ecx,ax
100035c3:	b8 d3 4d 62 10       	mov    eax,0x10624dd3
100035c8:	f7 e9                	imul   ecx
100035ca:	c1 fa 06             	sar    edx,0x6
100035cd:	89 c8                	mov    eax,ecx
100035cf:	c1 f8 1f             	sar    eax,0x1f
100035d2:	29 c2                	sub    edx,eax
100035d4:	89 d0                	mov    eax,edx
100035d6:	b9 0a 00 00 00       	mov    ecx,0xa
100035db:	99                   	cdq    
100035dc:	f7 f9                	idiv   ecx
100035de:	89 d0                	mov    eax,edx
100035e0:	83 c0 30             	add    eax,0x30
100035e3:	88 85 46 ff ff ff    	mov    BYTE PTR [ebp-0xba],al
100035e9:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
100035f0:	0f b7 c8             	movzx  ecx,ax
100035f3:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100035f8:	f7 e9                	imul   ecx
100035fa:	c1 fa 05             	sar    edx,0x5
100035fd:	89 c8                	mov    eax,ecx
100035ff:	c1 f8 1f             	sar    eax,0x1f
10003602:	29 c2                	sub    edx,eax
10003604:	89 d0                	mov    eax,edx
10003606:	b9 0a 00 00 00       	mov    ecx,0xa
1000360b:	99                   	cdq    
1000360c:	f7 f9                	idiv   ecx
1000360e:	89 d0                	mov    eax,edx
10003610:	83 c0 30             	add    eax,0x30
10003613:	88 85 47 ff ff ff    	mov    BYTE PTR [ebp-0xb9],al
10003619:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003620:	0f b7 c8             	movzx  ecx,ax
10003623:	b8 67 66 66 66       	mov    eax,0x66666667
10003628:	f7 e9                	imul   ecx
1000362a:	c1 fa 02             	sar    edx,0x2
1000362d:	89 c8                	mov    eax,ecx
1000362f:	c1 f8 1f             	sar    eax,0x1f
10003632:	89 d1                	mov    ecx,edx
10003634:	29 c1                	sub    ecx,eax
10003636:	b8 67 66 66 66       	mov    eax,0x66666667
1000363b:	f7 e9                	imul   ecx
1000363d:	c1 fa 02             	sar    edx,0x2
10003640:	89 c8                	mov    eax,ecx
10003642:	c1 f8 1f             	sar    eax,0x1f
10003645:	29 c2                	sub    edx,eax
10003647:	89 d0                	mov    eax,edx
10003649:	c1 e0 02             	shl    eax,0x2
1000364c:	01 d0                	add    eax,edx
1000364e:	01 c0                	add    eax,eax
10003650:	29 c1                	sub    ecx,eax
10003652:	89 ca                	mov    edx,ecx
10003654:	88 d0                	mov    al,dl
10003656:	83 c0 30             	add    eax,0x30
10003659:	88 85 48 ff ff ff    	mov    BYTE PTR [ebp-0xb8],al
1000365f:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003666:	0f b7 c0             	movzx  eax,ax
10003669:	b9 0a 00 00 00       	mov    ecx,0xa
1000366e:	99                   	cdq    
1000366f:	f7 f9                	idiv   ecx
10003671:	89 d0                	mov    eax,edx
10003673:	83 c0 30             	add    eax,0x30
10003676:	88 85 49 ff ff ff    	mov    BYTE PTR [ebp-0xb7],al
1000367c:	8a 85 d8 fe ff ff    	mov    al,BYTE PTR [ebp-0x128]
10003682:	0f b6 d0             	movzx  edx,al
10003685:	89 d0                	mov    eax,edx
10003687:	c1 e0 02             	shl    eax,0x2
1000368a:	01 d0                	add    eax,edx
1000368c:	c1 e0 03             	shl    eax,0x3
1000368f:	01 d0                	add    eax,edx
10003691:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003698:	01 d0                	add    eax,edx
1000369a:	66 c1 e8 08          	shr    ax,0x8
1000369e:	c0 e8 03             	shr    al,0x3
100036a1:	83 c0 30             	add    eax,0x30
100036a4:	88 85 4b ff ff ff    	mov    BYTE PTR [ebp-0xb5],al
100036aa:	8a 8d d8 fe ff ff    	mov    cl,BYTE PTR [ebp-0x128]
100036b0:	0f b6 d1             	movzx  edx,cl
100036b3:	89 d0                	mov    eax,edx
100036b5:	c1 e0 02             	shl    eax,0x2
100036b8:	01 d0                	add    eax,edx
100036ba:	c1 e0 03             	shl    eax,0x3
100036bd:	01 d0                	add    eax,edx
100036bf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100036c6:	01 d0                	add    eax,edx
100036c8:	66 c1 e8 08          	shr    ax,0x8
100036cc:	88 c2                	mov    dl,al
100036ce:	c0 ea 03             	shr    dl,0x3
100036d1:	88 d0                	mov    al,dl
100036d3:	c1 e0 02             	shl    eax,0x2
100036d6:	01 d0                	add    eax,edx
100036d8:	d1 e0                	shl    eax,1
100036da:	29 c1                	sub    ecx,eax
100036dc:	88 ca                	mov    dl,cl
100036de:	8d 42 30             	lea    eax,[edx+0x30]
100036e1:	88 85 4c ff ff ff    	mov    BYTE PTR [ebp-0xb4],al
100036e7:	8a 85 d9 fe ff ff    	mov    al,BYTE PTR [ebp-0x127]
100036ed:	0f b6 d0             	movzx  edx,al
100036f0:	89 d0                	mov    eax,edx
100036f2:	c1 e0 02             	shl    eax,0x2
100036f5:	01 d0                	add    eax,edx
100036f7:	c1 e0 03             	shl    eax,0x3
100036fa:	01 d0                	add    eax,edx
100036fc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003703:	01 d0                	add    eax,edx
10003705:	66 c1 e8 08          	shr    ax,0x8
10003709:	c0 e8 03             	shr    al,0x3
1000370c:	83 c0 30             	add    eax,0x30
1000370f:	88 85 4e ff ff ff    	mov    BYTE PTR [ebp-0xb2],al
10003715:	8a 8d d9 fe ff ff    	mov    cl,BYTE PTR [ebp-0x127]
1000371b:	0f b6 d1             	movzx  edx,cl
1000371e:	89 d0                	mov    eax,edx
10003720:	c1 e0 02             	shl    eax,0x2
10003723:	01 d0                	add    eax,edx
10003725:	c1 e0 03             	shl    eax,0x3
10003728:	01 d0                	add    eax,edx
1000372a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003731:	01 d0                	add    eax,edx
10003733:	66 c1 e8 08          	shr    ax,0x8
10003737:	88 c2                	mov    dl,al
10003739:	c0 ea 03             	shr    dl,0x3
1000373c:	88 d0                	mov    al,dl
1000373e:	c1 e0 02             	shl    eax,0x2
10003741:	01 d0                	add    eax,edx
10003743:	d1 e0                	shl    eax,1
10003745:	29 c1                	sub    ecx,eax
10003747:	88 ca                	mov    dl,cl
10003749:	8d 42 30             	lea    eax,[edx+0x30]
1000374c:	88 85 4f ff ff ff    	mov    BYTE PTR [ebp-0xb1],al
10003752:	8a 85 da fe ff ff    	mov    al,BYTE PTR [ebp-0x126]
10003758:	0f b6 d0             	movzx  edx,al
1000375b:	89 d0                	mov    eax,edx
1000375d:	c1 e0 02             	shl    eax,0x2
10003760:	01 d0                	add    eax,edx
10003762:	c1 e0 03             	shl    eax,0x3
10003765:	01 d0                	add    eax,edx
10003767:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000376e:	01 d0                	add    eax,edx
10003770:	66 c1 e8 08          	shr    ax,0x8
10003774:	c0 e8 03             	shr    al,0x3
10003777:	83 c0 30             	add    eax,0x30
1000377a:	88 85 51 ff ff ff    	mov    BYTE PTR [ebp-0xaf],al
10003780:	8a 8d da fe ff ff    	mov    cl,BYTE PTR [ebp-0x126]
10003786:	0f b6 d1             	movzx  edx,cl
10003789:	89 d0                	mov    eax,edx
1000378b:	c1 e0 02             	shl    eax,0x2
1000378e:	01 d0                	add    eax,edx
10003790:	c1 e0 03             	shl    eax,0x3
10003793:	01 d0                	add    eax,edx
10003795:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000379c:	01 d0                	add    eax,edx
1000379e:	66 c1 e8 08          	shr    ax,0x8
100037a2:	88 c2                	mov    dl,al
100037a4:	c0 ea 03             	shr    dl,0x3
100037a7:	88 d0                	mov    al,dl
100037a9:	c1 e0 02             	shl    eax,0x2
100037ac:	01 d0                	add    eax,edx
100037ae:	d1 e0                	shl    eax,1
100037b0:	29 c1                	sub    ecx,eax
100037b2:	88 ca                	mov    dl,cl
100037b4:	8d 42 30             	lea    eax,[edx+0x30]
100037b7:	88 85 52 ff ff ff    	mov    BYTE PTR [ebp-0xae],al
100037bd:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100037c4:	a1 00 00 00 00       	mov    eax,ds:0x0	100037c5: R_386_32	term
100037c9:	83 ec 04             	sub    esp,0x4
100037cc:	6a 05                	push   0x5
100037ce:	6a 18                	push   0x18
100037d0:	50                   	push   eax
100037d1:	e8 fc ff ff ff       	call   100037d2 <firstRun(bool)+0xe7d>	100037d2: R_386_PC32	VgaText::setCursor(int, int)
100037d6:	83 c4 10             	add    esp,0x10
100037d9:	a1 00 00 00 00       	mov    eax,ds:0x0	100037da: R_386_32	term
100037de:	83 ec 08             	sub    esp,0x8
100037e1:	68 c4 a7 00 10       	push   0x1000a7c4	100037e2: R_386_32	.text
100037e6:	50                   	push   eax
100037e7:	e8 fc ff ff ff       	call   100037e8 <firstRun(bool)+0xe93>	100037e8: R_386_PC32	VgaText::puts(char const*)
100037ec:	83 c4 10             	add    esp,0x10
100037ef:	a1 00 00 00 00       	mov    eax,ds:0x0	100037f0: R_386_32	term
100037f4:	83 ec 04             	sub    esp,0x4
100037f7:	6a 06                	push   0x6
100037f9:	6a 18                	push   0x18
100037fb:	50                   	push   eax
100037fc:	e8 fc ff ff ff       	call   100037fd <firstRun(bool)+0xea8>	100037fd: R_386_PC32	VgaText::setCursor(int, int)
10003801:	83 c4 10             	add    esp,0x10
10003804:	a1 00 00 00 00       	mov    eax,ds:0x0	10003805: R_386_32	term
10003809:	83 ec 08             	sub    esp,0x8
1000380c:	68 ec a7 00 10       	push   0x1000a7ec	1000380d: R_386_32	.text
10003811:	50                   	push   eax
10003812:	e8 fc ff ff ff       	call   10003813 <firstRun(bool)+0xebe>	10003813: R_386_PC32	VgaText::puts(char const*)
10003817:	83 c4 10             	add    esp,0x10
1000381a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000381b: R_386_32	term
1000381f:	83 ec 04             	sub    esp,0x4
10003822:	6a 09                	push   0x9
10003824:	6a 1a                	push   0x1a
10003826:	50                   	push   eax
10003827:	e8 fc ff ff ff       	call   10003828 <firstRun(bool)+0xed3>	10003828: R_386_PC32	VgaText::setCursor(int, int)
1000382c:	83 c4 10             	add    esp,0x10
1000382f:	a1 00 00 00 00       	mov    eax,ds:0x0	10003830: R_386_32	term
10003834:	6a 0f                	push   0xf
10003836:	6a 07                	push   0x7
10003838:	68 02 a8 00 10       	push   0x1000a802	10003839: R_386_32	.text
1000383d:	50                   	push   eax
1000383e:	e8 fc ff ff ff       	call   1000383f <firstRun(bool)+0xeea>	1000383f: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003843:	83 c4 10             	add    esp,0x10
10003846:	a1 00 00 00 00       	mov    eax,ds:0x0	10003847: R_386_32	term
1000384b:	83 ec 04             	sub    esp,0x4
1000384e:	6a 18                	push   0x18
10003850:	6a 11                	push   0x11
10003852:	50                   	push   eax
10003853:	e8 fc ff ff ff       	call   10003854 <firstRun(bool)+0xeff>	10003854: R_386_PC32	VgaText::setCursor(int, int)
10003858:	83 c4 10             	add    esp,0x10
1000385b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000385c: R_386_32	term
10003860:	6a 0b                	push   0xb
10003862:	6a 03                	push   0x3
10003864:	68 16 a8 00 10       	push   0x1000a816	10003865: R_386_32	.text
10003869:	50                   	push   eax
1000386a:	e8 fc ff ff ff       	call   1000386b <firstRun(bool)+0xf16>	1000386b: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000386f:	83 c4 10             	add    esp,0x10
10003872:	a1 00 00 00 00       	mov    eax,ds:0x0	10003873: R_386_32	term
10003877:	83 ec 04             	sub    esp,0x4
1000387a:	6a 08                	push   0x8
1000387c:	6a 1a                	push   0x1a
1000387e:	50                   	push   eax
1000387f:	e8 fc ff ff ff       	call   10003880 <firstRun(bool)+0xf2b>	10003880: R_386_PC32	VgaText::setCursor(int, int)
10003884:	83 c4 10             	add    esp,0x10
10003887:	a1 00 00 00 00       	mov    eax,ds:0x0	10003888: R_386_32	term
1000388c:	83 ec 08             	sub    esp,0x8
1000388f:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003895:	52                   	push   edx
10003896:	50                   	push   eax
10003897:	e8 fc ff ff ff       	call   10003898 <firstRun(bool)+0xf43>	10003898: R_386_PC32	VgaText::puts(char const*)
1000389c:	83 c4 10             	add    esp,0x10
1000389f:	a1 00 00 00 00       	mov    eax,ds:0x0	100038a0: R_386_32	term
100038a4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100038a7:	83 c2 1a             	add    edx,0x1a
100038aa:	83 ec 04             	sub    esp,0x4
100038ad:	6a 08                	push   0x8
100038af:	52                   	push   edx
100038b0:	50                   	push   eax
100038b1:	e8 fc ff ff ff       	call   100038b2 <firstRun(bool)+0xf5d>	100038b2: R_386_PC32	VgaText::setCursor(int, int)
100038b6:	83 c4 10             	add    esp,0x10
100038b9:	a1 00 00 00 00       	mov    eax,ds:0x0	100038ba: R_386_32	term
100038be:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
100038c4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100038c7:	01 ca                	add    edx,ecx
100038c9:	8a 12                	mov    dl,BYTE PTR [edx]
100038cb:	0f be d2             	movsx  edx,dl
100038ce:	6a 00                	push   0x0
100038d0:	6a 0f                	push   0xf
100038d2:	52                   	push   edx
100038d3:	50                   	push   eax
100038d4:	e8 fc ff ff ff       	call   100038d5 <firstRun(bool)+0xf80>	100038d5: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100038d9:	83 c4 10             	add    esp,0x10
100038dc:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
100038e2:	0f be c0             	movsx  eax,al
100038e5:	8d 50 d0             	lea    edx,[eax-0x30]
100038e8:	89 d0                	mov    eax,edx
100038ea:	c1 e0 02             	shl    eax,0x2
100038ed:	01 d0                	add    eax,edx
100038ef:	01 c0                	add    eax,eax
100038f1:	89 c2                	mov    edx,eax
100038f3:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
100038f9:	0f be c0             	movsx  eax,al
100038fc:	83 e8 30             	sub    eax,0x30
100038ff:	01 d0                	add    eax,edx
10003901:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10003904:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
10003907:	b9 0c 00 00 00       	mov    ecx,0xc
1000390c:	99                   	cdq    
1000390d:	f7 f9                	idiv   ecx
1000390f:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
10003912:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10003916:	75 07                	jne    1000391f <firstRun(bool)+0xfca>
10003918:	c7 45 d0 0c 00 00 00 	mov    DWORD PTR [ebp-0x30],0xc
1000391f:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
10003925:	0f be c0             	movsx  eax,al
10003928:	8d 50 d0             	lea    edx,[eax-0x30]
1000392b:	89 d0                	mov    eax,edx
1000392d:	c1 e0 02             	shl    eax,0x2
10003930:	01 d0                	add    eax,edx
10003932:	01 c0                	add    eax,eax
10003934:	89 c2                	mov    edx,eax
10003936:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
1000393c:	0f be c0             	movsx  eax,al
1000393f:	83 e8 30             	sub    eax,0x30
10003942:	01 d0                	add    eax,edx
10003944:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
10003947:	83 ec 04             	sub    esp,0x4
1000394a:	6a 10                	push   0x10
1000394c:	6a 00                	push   0x0
1000394e:	8d 85 b6 fe ff ff    	lea    eax,[ebp-0x14a]
10003954:	50                   	push   eax
10003955:	e8 fc ff ff ff       	call   10003956 <firstRun(bool)+0x1001>	10003956: R_386_PC32	memset
1000395a:	83 c4 10             	add    esp,0x10
1000395d:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [ebp-0x54],0x0
10003964:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003967:	8d 50 01             	lea    edx,[eax+0x1]
1000396a:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
1000396d:	c6 84 05 b6 fe ff ff 28 	mov    BYTE PTR [ebp+eax*1-0x14a],0x28
10003975:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
10003978:	b8 67 66 66 66       	mov    eax,0x66666667
1000397d:	f7 e9                	imul   ecx
1000397f:	c1 fa 02             	sar    edx,0x2
10003982:	89 c8                	mov    eax,ecx
10003984:	c1 f8 1f             	sar    eax,0x1f
10003987:	29 c2                	sub    edx,eax
10003989:	89 d0                	mov    eax,edx
1000398b:	8d 48 30             	lea    ecx,[eax+0x30]
1000398e:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003991:	8d 50 01             	lea    edx,[eax+0x1]
10003994:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003997:	88 ca                	mov    dl,cl
10003999:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
100039a0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
100039a3:	b8 67 66 66 66       	mov    eax,0x66666667
100039a8:	f7 e9                	imul   ecx
100039aa:	c1 fa 02             	sar    edx,0x2
100039ad:	89 c8                	mov    eax,ecx
100039af:	c1 f8 1f             	sar    eax,0x1f
100039b2:	29 c2                	sub    edx,eax
100039b4:	89 d0                	mov    eax,edx
100039b6:	c1 e0 02             	shl    eax,0x2
100039b9:	01 d0                	add    eax,edx
100039bb:	01 c0                	add    eax,eax
100039bd:	29 c1                	sub    ecx,eax
100039bf:	89 ca                	mov    edx,ecx
100039c1:	88 d0                	mov    al,dl
100039c3:	8d 48 30             	lea    ecx,[eax+0x30]
100039c6:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100039c9:	8d 50 01             	lea    edx,[eax+0x1]
100039cc:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100039cf:	88 ca                	mov    dl,cl
100039d1:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
100039d8:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100039db:	8d 50 01             	lea    edx,[eax+0x1]
100039de:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100039e1:	c6 84 05 b6 fe ff ff 3a 	mov    BYTE PTR [ebp+eax*1-0x14a],0x3a
100039e9:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
100039ec:	b8 67 66 66 66       	mov    eax,0x66666667
100039f1:	f7 e9                	imul   ecx
100039f3:	c1 fa 02             	sar    edx,0x2
100039f6:	89 c8                	mov    eax,ecx
100039f8:	c1 f8 1f             	sar    eax,0x1f
100039fb:	29 c2                	sub    edx,eax
100039fd:	89 d0                	mov    eax,edx
100039ff:	8d 48 30             	lea    ecx,[eax+0x30]
10003a02:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a05:	8d 50 01             	lea    edx,[eax+0x1]
10003a08:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a0b:	88 ca                	mov    dl,cl
10003a0d:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003a14:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10003a17:	b8 67 66 66 66       	mov    eax,0x66666667
10003a1c:	f7 e9                	imul   ecx
10003a1e:	c1 fa 02             	sar    edx,0x2
10003a21:	89 c8                	mov    eax,ecx
10003a23:	c1 f8 1f             	sar    eax,0x1f
10003a26:	29 c2                	sub    edx,eax
10003a28:	89 d0                	mov    eax,edx
10003a2a:	c1 e0 02             	shl    eax,0x2
10003a2d:	01 d0                	add    eax,edx
10003a2f:	01 c0                	add    eax,eax
10003a31:	29 c1                	sub    ecx,eax
10003a33:	89 ca                	mov    edx,ecx
10003a35:	88 d0                	mov    al,dl
10003a37:	8d 48 30             	lea    ecx,[eax+0x30]
10003a3a:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a3d:	8d 50 01             	lea    edx,[eax+0x1]
10003a40:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a43:	88 ca                	mov    dl,cl
10003a45:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003a4c:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a4f:	8d 50 01             	lea    edx,[eax+0x1]
10003a52:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a55:	c6 84 05 b6 fe ff ff 20 	mov    BYTE PTR [ebp+eax*1-0x14a],0x20
10003a5d:	83 7d b4 0b          	cmp    DWORD PTR [ebp-0x4c],0xb
10003a61:	7e 04                	jle    10003a67 <firstRun(bool)+0x1112>
10003a63:	b2 50                	mov    dl,0x50
10003a65:	eb 02                	jmp    10003a69 <firstRun(bool)+0x1114>
10003a67:	b2 41                	mov    dl,0x41
10003a69:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a6c:	8d 48 01             	lea    ecx,[eax+0x1]
10003a6f:	89 4d ac             	mov    DWORD PTR [ebp-0x54],ecx
10003a72:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003a79:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a7c:	8d 50 01             	lea    edx,[eax+0x1]
10003a7f:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a82:	c6 84 05 b6 fe ff ff 4d 	mov    BYTE PTR [ebp+eax*1-0x14a],0x4d
10003a8a:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a8d:	8d 50 01             	lea    edx,[eax+0x1]
10003a90:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a93:	c6 84 05 b6 fe ff ff 29 	mov    BYTE PTR [ebp+eax*1-0x14a],0x29
10003a9b:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10003a9d: R_386_32	term
10003aa1:	83 ec 0c             	sub    esp,0xc
10003aa4:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003aaa:	50                   	push   eax
10003aab:	e8 fc ff ff ff       	call   10003aac <firstRun(bool)+0x1157>	10003aac: R_386_PC32	strlen
10003ab0:	83 c4 10             	add    esp,0x10
10003ab3:	83 c0 1e             	add    eax,0x1e
10003ab6:	83 ec 04             	sub    esp,0x4
10003ab9:	6a 08                	push   0x8
10003abb:	50                   	push   eax
10003abc:	53                   	push   ebx
10003abd:	e8 fc ff ff ff       	call   10003abe <firstRun(bool)+0x1169>	10003abe: R_386_PC32	VgaText::setCursor(int, int)
10003ac2:	83 c4 10             	add    esp,0x10
10003ac5:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ac6: R_386_32	term
10003aca:	83 ec 08             	sub    esp,0x8
10003acd:	8d 95 b6 fe ff ff    	lea    edx,[ebp-0x14a]
10003ad3:	52                   	push   edx
10003ad4:	50                   	push   eax
10003ad5:	e8 fc ff ff ff       	call   10003ad6 <firstRun(bool)+0x1181>	10003ad6: R_386_PC32	VgaText::puts(char const*)
10003ada:	83 c4 10             	add    esp,0x10
10003add:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ade: R_386_32	term
10003ae2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003ae5:	83 c2 1a             	add    edx,0x1a
10003ae8:	83 ec 04             	sub    esp,0x4
10003aeb:	6a 08                	push   0x8
10003aed:	52                   	push   edx
10003aee:	50                   	push   eax
10003aef:	e8 fc ff ff ff       	call   10003af0 <firstRun(bool)+0x119b>	10003af0: R_386_PC32	VgaText::setCursor(int, int)
10003af4:	83 c4 10             	add    esp,0x10
10003af7:	a0 00 00 00 00       	mov    al,ds:0x0	10003af8: R_386_32	installKey
10003afc:	84 c0                	test   al,al
10003afe:	0f 94 c0             	sete   al
10003b01:	84 c0                	test   al,al
10003b03:	74 02                	je     10003b07 <firstRun(bool)+0x11b2>
10003b05:	eb f0                	jmp    10003af7 <firstRun(bool)+0x11a2>
10003b07:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b08: R_386_32	term
10003b0c:	05 82 00 00 00       	add    eax,0x82
10003b11:	83 ec 04             	sub    esp,0x4
10003b14:	6a 10                	push   0x10
10003b16:	6a 00                	push   0x0
10003b18:	50                   	push   eax
10003b19:	e8 fc ff ff ff       	call   10003b1a <firstRun(bool)+0x11c5>	10003b1a: R_386_PC32	memset
10003b1e:	83 c4 10             	add    esp,0x10
10003b21:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b22: R_386_32	term
10003b26:	05 02 01 00 00       	add    eax,0x102
10003b2b:	83 ec 04             	sub    esp,0x4
10003b2e:	6a 10                	push   0x10
10003b30:	6a 00                	push   0x0
10003b32:	50                   	push   eax
10003b33:	e8 fc ff ff ff       	call   10003b34 <firstRun(bool)+0x11df>	10003b34: R_386_PC32	memset
10003b38:	83 c4 10             	add    esp,0x10
10003b3b:	a0 00 00 00 00       	mov    al,ds:0x0	10003b3c: R_386_32	installKey
10003b40:	3c 03                	cmp    al,0x3
10003b42:	74 09                	je     10003b4d <firstRun(bool)+0x11f8>
10003b44:	a0 00 00 00 00       	mov    al,ds:0x0	10003b45: R_386_32	installKey
10003b49:	3c 08                	cmp    al,0x8
10003b4b:	75 04                	jne    10003b51 <firstRun(bool)+0x11fc>
10003b4d:	b0 01                	mov    al,0x1
10003b4f:	eb 02                	jmp    10003b53 <firstRun(bool)+0x11fe>
10003b51:	b0 00                	mov    al,0x0
10003b53:	84 c0                	test   al,al
10003b55:	74 58                	je     10003baf <firstRun(bool)+0x125a>
10003b57:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
10003b5a:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10003b5e:	75 16                	jne    10003b76 <firstRun(bool)+0x1221>
10003b60:	83 ec 0c             	sub    esp,0xc
10003b63:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003b69:	50                   	push   eax
10003b6a:	e8 fc ff ff ff       	call   10003b6b <firstRun(bool)+0x1216>	10003b6b: R_386_PC32	strlen
10003b6f:	83 c4 10             	add    esp,0x10
10003b72:	48                   	dec    eax
10003b73:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10003b76:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003b7c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003b7f:	01 d0                	add    eax,edx
10003b81:	8a 00                	mov    al,BYTE PTR [eax]
10003b83:	3c 20                	cmp    al,0x20
10003b85:	74 d0                	je     10003b57 <firstRun(bool)+0x1202>
10003b87:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003b8d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003b90:	01 d0                	add    eax,edx
10003b92:	8a 00                	mov    al,BYTE PTR [eax]
10003b94:	3c 2f                	cmp    al,0x2f
10003b96:	74 bf                	je     10003b57 <firstRun(bool)+0x1202>
10003b98:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003b9e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003ba1:	01 d0                	add    eax,edx
10003ba3:	8a 00                	mov    al,BYTE PTR [eax]
10003ba5:	3c 3a                	cmp    al,0x3a
10003ba7:	0f 85 5e 04 00 00    	jne    1000400b <firstRun(bool)+0x16b6>
10003bad:	eb a8                	jmp    10003b57 <firstRun(bool)+0x1202>
10003baf:	a0 00 00 00 00       	mov    al,ds:0x0	10003bb0: R_386_32	installKey
10003bb4:	3c 2f                	cmp    al,0x2f
10003bb6:	7e 09                	jle    10003bc1 <firstRun(bool)+0x126c>
10003bb8:	a0 00 00 00 00       	mov    al,ds:0x0	10003bb9: R_386_32	installKey
10003bbd:	3c 39                	cmp    al,0x39
10003bbf:	7e 12                	jle    10003bd3 <firstRun(bool)+0x127e>
10003bc1:	a0 00 00 00 00       	mov    al,ds:0x0	10003bc2: R_386_32	installKey
10003bc6:	3c 20                	cmp    al,0x20
10003bc8:	74 09                	je     10003bd3 <firstRun(bool)+0x127e>
10003bca:	a0 00 00 00 00       	mov    al,ds:0x0	10003bcb: R_386_32	installKey
10003bcf:	3c 04                	cmp    al,0x4
10003bd1:	75 04                	jne    10003bd7 <firstRun(bool)+0x1282>
10003bd3:	b0 01                	mov    al,0x1
10003bd5:	eb 02                	jmp    10003bd9 <firstRun(bool)+0x1284>
10003bd7:	b0 00                	mov    al,0x0
10003bd9:	84 c0                	test   al,al
10003bdb:	0f 84 cf 01 00 00    	je     10003db0 <firstRun(bool)+0x145b>
10003be1:	a0 00 00 00 00       	mov    al,ds:0x0	10003be2: R_386_32	installKey
10003be6:	3c 2f                	cmp    al,0x2f
10003be8:	7e 0d                	jle    10003bf7 <firstRun(bool)+0x12a2>
10003bea:	a0 00 00 00 00       	mov    al,ds:0x0	10003beb: R_386_32	installKey
10003bef:	3c 39                	cmp    al,0x39
10003bf1:	7f 04                	jg     10003bf7 <firstRun(bool)+0x12a2>
10003bf3:	b0 01                	mov    al,0x1
10003bf5:	eb 02                	jmp    10003bf9 <firstRun(bool)+0x12a4>
10003bf7:	b0 00                	mov    al,0x0
10003bf9:	84 c0                	test   al,al
10003bfb:	0f 84 51 01 00 00    	je     10003d52 <firstRun(bool)+0x13fd>
10003c01:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10003c05:	75 0d                	jne    10003c14 <firstRun(bool)+0x12bf>
10003c07:	a0 00 00 00 00       	mov    al,ds:0x0	10003c08: R_386_32	installKey
10003c0c:	3c 33                	cmp    al,0x33
10003c0e:	7e 04                	jle    10003c14 <firstRun(bool)+0x12bf>
10003c10:	b0 01                	mov    al,0x1
10003c12:	eb 02                	jmp    10003c16 <firstRun(bool)+0x12c1>
10003c14:	b0 00                	mov    al,0x0
10003c16:	84 c0                	test   al,al
10003c18:	74 28                	je     10003c42 <firstRun(bool)+0x12ed>
10003c1a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003c1d:	8d 50 01             	lea    edx,[eax+0x1]
10003c20:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003c23:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003c2b:	a0 00 00 00 00       	mov    al,ds:0x0	10003c2c: R_386_32	installKey
10003c30:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003c36:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003c39:	01 ca                	add    edx,ecx
10003c3b:	88 02                	mov    BYTE PTR [edx],al
10003c3d:	e9 10 01 00 00       	jmp    10003d52 <firstRun(bool)+0x13fd>
10003c42:	83 7d e4 03          	cmp    DWORD PTR [ebp-0x1c],0x3
10003c46:	75 0d                	jne    10003c55 <firstRun(bool)+0x1300>
10003c48:	a0 00 00 00 00       	mov    al,ds:0x0	10003c49: R_386_32	installKey
10003c4d:	3c 31                	cmp    al,0x31
10003c4f:	7e 04                	jle    10003c55 <firstRun(bool)+0x1300>
10003c51:	b0 01                	mov    al,0x1
10003c53:	eb 02                	jmp    10003c57 <firstRun(bool)+0x1302>
10003c55:	b0 00                	mov    al,0x0
10003c57:	84 c0                	test   al,al
10003c59:	74 28                	je     10003c83 <firstRun(bool)+0x132e>
10003c5b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003c5e:	8d 50 01             	lea    edx,[eax+0x1]
10003c61:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003c64:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003c6c:	a0 00 00 00 00       	mov    al,ds:0x0	10003c6d: R_386_32	installKey
10003c71:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003c77:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003c7a:	01 ca                	add    edx,ecx
10003c7c:	88 02                	mov    BYTE PTR [edx],al
10003c7e:	e9 cf 00 00 00       	jmp    10003d52 <firstRun(bool)+0x13fd>
10003c83:	83 7d e4 0b          	cmp    DWORD PTR [ebp-0x1c],0xb
10003c87:	75 0d                	jne    10003c96 <firstRun(bool)+0x1341>
10003c89:	a0 00 00 00 00       	mov    al,ds:0x0	10003c8a: R_386_32	installKey
10003c8e:	3c 32                	cmp    al,0x32
10003c90:	7e 04                	jle    10003c96 <firstRun(bool)+0x1341>
10003c92:	b0 01                	mov    al,0x1
10003c94:	eb 02                	jmp    10003c98 <firstRun(bool)+0x1343>
10003c96:	b0 00                	mov    al,0x0
10003c98:	84 c0                	test   al,al
10003c9a:	74 28                	je     10003cc4 <firstRun(bool)+0x136f>
10003c9c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003c9f:	8d 50 01             	lea    edx,[eax+0x1]
10003ca2:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003ca5:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003cad:	a0 00 00 00 00       	mov    al,ds:0x0	10003cae: R_386_32	installKey
10003cb2:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003cb8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003cbb:	01 ca                	add    edx,ecx
10003cbd:	88 02                	mov    BYTE PTR [edx],al
10003cbf:	e9 8e 00 00 00       	jmp    10003d52 <firstRun(bool)+0x13fd>
10003cc4:	83 7d e4 0e          	cmp    DWORD PTR [ebp-0x1c],0xe
10003cc8:	75 0d                	jne    10003cd7 <firstRun(bool)+0x1382>
10003cca:	a0 00 00 00 00       	mov    al,ds:0x0	10003ccb: R_386_32	installKey
10003ccf:	3c 35                	cmp    al,0x35
10003cd1:	7e 04                	jle    10003cd7 <firstRun(bool)+0x1382>
10003cd3:	b0 01                	mov    al,0x1
10003cd5:	eb 02                	jmp    10003cd9 <firstRun(bool)+0x1384>
10003cd7:	b0 00                	mov    al,0x0
10003cd9:	84 c0                	test   al,al
10003cdb:	74 25                	je     10003d02 <firstRun(bool)+0x13ad>
10003cdd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003ce0:	8d 50 01             	lea    edx,[eax+0x1]
10003ce3:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003ce6:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003cee:	a0 00 00 00 00       	mov    al,ds:0x0	10003cef: R_386_32	installKey
10003cf3:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003cf9:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003cfc:	01 ca                	add    edx,ecx
10003cfe:	88 02                	mov    BYTE PTR [edx],al
10003d00:	eb 50                	jmp    10003d52 <firstRun(bool)+0x13fd>
10003d02:	83 7d e4 11          	cmp    DWORD PTR [ebp-0x1c],0x11
10003d06:	75 0d                	jne    10003d15 <firstRun(bool)+0x13c0>
10003d08:	a0 00 00 00 00       	mov    al,ds:0x0	10003d09: R_386_32	installKey
10003d0d:	3c 35                	cmp    al,0x35
10003d0f:	7e 04                	jle    10003d15 <firstRun(bool)+0x13c0>
10003d11:	b0 01                	mov    al,0x1
10003d13:	eb 02                	jmp    10003d17 <firstRun(bool)+0x13c2>
10003d15:	b0 00                	mov    al,0x0
10003d17:	84 c0                	test   al,al
10003d19:	74 25                	je     10003d40 <firstRun(bool)+0x13eb>
10003d1b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d1e:	8d 50 01             	lea    edx,[eax+0x1]
10003d21:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003d24:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003d2c:	a0 00 00 00 00       	mov    al,ds:0x0	10003d2d: R_386_32	installKey
10003d31:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003d37:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003d3a:	01 ca                	add    edx,ecx
10003d3c:	88 02                	mov    BYTE PTR [edx],al
10003d3e:	eb 12                	jmp    10003d52 <firstRun(bool)+0x13fd>
10003d40:	a0 00 00 00 00       	mov    al,ds:0x0	10003d41: R_386_32	installKey
10003d45:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003d4b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003d4e:	01 ca                	add    edx,ecx
10003d50:	88 02                	mov    BYTE PTR [edx],al
10003d52:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10003d55:	83 ec 0c             	sub    esp,0xc
10003d58:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003d5e:	50                   	push   eax
10003d5f:	e8 fc ff ff ff       	call   10003d60 <firstRun(bool)+0x140b>	10003d60: R_386_PC32	strlen
10003d64:	83 c4 10             	add    esp,0x10
10003d67:	89 c2                	mov    edx,eax
10003d69:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d6c:	39 c2                	cmp    edx,eax
10003d6e:	77 07                	ja     10003d77 <firstRun(bool)+0x1422>
10003d70:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003d77:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003d7d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d80:	01 d0                	add    eax,edx
10003d82:	8a 00                	mov    al,BYTE PTR [eax]
10003d84:	3c 20                	cmp    al,0x20
10003d86:	74 ca                	je     10003d52 <firstRun(bool)+0x13fd>
10003d88:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003d8e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d91:	01 d0                	add    eax,edx
10003d93:	8a 00                	mov    al,BYTE PTR [eax]
10003d95:	3c 2f                	cmp    al,0x2f
10003d97:	74 b9                	je     10003d52 <firstRun(bool)+0x13fd>
10003d99:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003d9f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003da2:	01 d0                	add    eax,edx
10003da4:	8a 00                	mov    al,BYTE PTR [eax]
10003da6:	3c 3a                	cmp    al,0x3a
10003da8:	0f 85 5d 02 00 00    	jne    1000400b <firstRun(bool)+0x16b6>
10003dae:	eb a2                	jmp    10003d52 <firstRun(bool)+0x13fd>
10003db0:	a0 00 00 00 00       	mov    al,ds:0x0	10003db1: R_386_32	installKey
10003db5:	3c 0a                	cmp    al,0xa
10003db7:	0f 94 c0             	sete   al
10003dba:	84 c0                	test   al,al
10003dbc:	0f 84 37 02 00 00    	je     10003ff9 <firstRun(bool)+0x16a4>
10003dc2:	8a 85 40 ff ff ff    	mov    al,BYTE PTR [ebp-0xc0]
10003dc8:	0f be c0             	movsx  eax,al
10003dcb:	8d 50 d0             	lea    edx,[eax-0x30]
10003dce:	89 d0                	mov    eax,edx
10003dd0:	c1 e0 02             	shl    eax,0x2
10003dd3:	01 d0                	add    eax,edx
10003dd5:	01 c0                	add    eax,eax
10003dd7:	89 c2                	mov    edx,eax
10003dd9:	8a 85 41 ff ff ff    	mov    al,BYTE PTR [ebp-0xbf]
10003ddf:	0f be c0             	movsx  eax,al
10003de2:	83 e8 30             	sub    eax,0x30
10003de5:	01 d0                	add    eax,edx
10003de7:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10003dea:	8a 85 43 ff ff ff    	mov    al,BYTE PTR [ebp-0xbd]
10003df0:	0f be c0             	movsx  eax,al
10003df3:	8d 50 d0             	lea    edx,[eax-0x30]
10003df6:	89 d0                	mov    eax,edx
10003df8:	c1 e0 02             	shl    eax,0x2
10003dfb:	01 d0                	add    eax,edx
10003dfd:	01 c0                	add    eax,eax
10003dff:	89 c2                	mov    edx,eax
10003e01:	8a 85 44 ff ff ff    	mov    al,BYTE PTR [ebp-0xbc]
10003e07:	0f be c0             	movsx  eax,al
10003e0a:	83 e8 30             	sub    eax,0x30
10003e0d:	01 d0                	add    eax,edx
10003e0f:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10003e12:	8a 85 46 ff ff ff    	mov    al,BYTE PTR [ebp-0xba]
10003e18:	0f be c0             	movsx  eax,al
10003e1b:	8d 50 d0             	lea    edx,[eax-0x30]
10003e1e:	89 d0                	mov    eax,edx
10003e20:	c1 e0 02             	shl    eax,0x2
10003e23:	01 d0                	add    eax,edx
10003e25:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003e2c:	01 d0                	add    eax,edx
10003e2e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003e35:	01 d0                	add    eax,edx
10003e37:	c1 e0 03             	shl    eax,0x3
10003e3a:	89 c1                	mov    ecx,eax
10003e3c:	8a 85 47 ff ff ff    	mov    al,BYTE PTR [ebp-0xb9]
10003e42:	0f be c0             	movsx  eax,al
10003e45:	8d 50 d0             	lea    edx,[eax-0x30]
10003e48:	89 d0                	mov    eax,edx
10003e4a:	c1 e0 02             	shl    eax,0x2
10003e4d:	01 d0                	add    eax,edx
10003e4f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003e56:	01 d0                	add    eax,edx
10003e58:	c1 e0 02             	shl    eax,0x2
10003e5b:	01 c1                	add    ecx,eax
10003e5d:	8a 85 48 ff ff ff    	mov    al,BYTE PTR [ebp-0xb8]
10003e63:	0f be c0             	movsx  eax,al
10003e66:	8d 50 d0             	lea    edx,[eax-0x30]
10003e69:	89 d0                	mov    eax,edx
10003e6b:	c1 e0 02             	shl    eax,0x2
10003e6e:	01 d0                	add    eax,edx
10003e70:	01 c0                	add    eax,eax
10003e72:	8d 14 01             	lea    edx,[ecx+eax*1]
10003e75:	8a 85 49 ff ff ff    	mov    al,BYTE PTR [ebp-0xb7]
10003e7b:	0f be c0             	movsx  eax,al
10003e7e:	83 e8 30             	sub    eax,0x30
10003e81:	01 d0                	add    eax,edx
10003e83:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10003e86:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
10003e8c:	0f be c0             	movsx  eax,al
10003e8f:	8d 50 d0             	lea    edx,[eax-0x30]
10003e92:	89 d0                	mov    eax,edx
10003e94:	c1 e0 02             	shl    eax,0x2
10003e97:	01 d0                	add    eax,edx
10003e99:	01 c0                	add    eax,eax
10003e9b:	89 c2                	mov    edx,eax
10003e9d:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
10003ea3:	0f be c0             	movsx  eax,al
10003ea6:	83 e8 30             	sub    eax,0x30
10003ea9:	01 d0                	add    eax,edx
10003eab:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10003eae:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
10003eb4:	0f be c0             	movsx  eax,al
10003eb7:	8d 50 d0             	lea    edx,[eax-0x30]
10003eba:	89 d0                	mov    eax,edx
10003ebc:	c1 e0 02             	shl    eax,0x2
10003ebf:	01 d0                	add    eax,edx
10003ec1:	01 c0                	add    eax,eax
10003ec3:	89 c2                	mov    edx,eax
10003ec5:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
10003ecb:	0f be c0             	movsx  eax,al
10003ece:	83 e8 30             	sub    eax,0x30
10003ed1:	01 d0                	add    eax,edx
10003ed3:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10003ed6:	8a 85 51 ff ff ff    	mov    al,BYTE PTR [ebp-0xaf]
10003edc:	0f be c0             	movsx  eax,al
10003edf:	8d 50 d0             	lea    edx,[eax-0x30]
10003ee2:	89 d0                	mov    eax,edx
10003ee4:	c1 e0 02             	shl    eax,0x2
10003ee7:	01 d0                	add    eax,edx
10003ee9:	01 c0                	add    eax,eax
10003eeb:	89 c2                	mov    edx,eax
10003eed:	8a 85 52 ff ff ff    	mov    al,BYTE PTR [ebp-0xae]
10003ef3:	0f be c0             	movsx  eax,al
10003ef6:	83 e8 30             	sub    eax,0x30
10003ef9:	01 d0                	add    eax,edx
10003efb:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
10003efe:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10003f01:	83 e0 03             	and    eax,0x3
10003f04:	85 c0                	test   eax,eax
10003f06:	75 1f                	jne    10003f27 <firstRun(bool)+0x15d2>
10003f08:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10003f0b:	b9 19 00 00 00       	mov    ecx,0x19
10003f10:	99                   	cdq    
10003f11:	f7 f9                	idiv   ecx
10003f13:	89 d0                	mov    eax,edx
10003f15:	85 c0                	test   eax,eax
10003f17:	75 0a                	jne    10003f23 <firstRun(bool)+0x15ce>
10003f19:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10003f1c:	83 e0 0f             	and    eax,0xf
10003f1f:	85 c0                	test   eax,eax
10003f21:	75 04                	jne    10003f27 <firstRun(bool)+0x15d2>
10003f23:	b0 01                	mov    al,0x1
10003f25:	eb 02                	jmp    10003f29 <firstRun(bool)+0x15d4>
10003f27:	b0 00                	mov    al,0x0
10003f29:	88 45 93             	mov    BYTE PTR [ebp-0x6d],al
10003f2c:	83 7d a8 1f          	cmp    DWORD PTR [ebp-0x58],0x1f
10003f30:	7e 0c                	jle    10003f3e <firstRun(bool)+0x15e9>
10003f32:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003f39:	e9 cd 00 00 00       	jmp    1000400b <firstRun(bool)+0x16b6>
10003f3e:	83 7d a8 1e          	cmp    DWORD PTR [ebp-0x58],0x1e
10003f42:	7e 2a                	jle    10003f6e <firstRun(bool)+0x1619>
10003f44:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
10003f48:	74 18                	je     10003f62 <firstRun(bool)+0x160d>
10003f4a:	83 7d a4 04          	cmp    DWORD PTR [ebp-0x5c],0x4
10003f4e:	74 12                	je     10003f62 <firstRun(bool)+0x160d>
10003f50:	83 7d a4 06          	cmp    DWORD PTR [ebp-0x5c],0x6
10003f54:	74 0c                	je     10003f62 <firstRun(bool)+0x160d>
10003f56:	83 7d a4 09          	cmp    DWORD PTR [ebp-0x5c],0x9
10003f5a:	74 06                	je     10003f62 <firstRun(bool)+0x160d>
10003f5c:	83 7d a4 0b          	cmp    DWORD PTR [ebp-0x5c],0xb
10003f60:	75 0c                	jne    10003f6e <firstRun(bool)+0x1619>
10003f62:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003f69:	e9 9d 00 00 00       	jmp    1000400b <firstRun(bool)+0x16b6>
10003f6e:	83 7d a8 1d          	cmp    DWORD PTR [ebp-0x58],0x1d
10003f72:	75 19                	jne    10003f8d <firstRun(bool)+0x1638>
10003f74:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
10003f78:	75 13                	jne    10003f8d <firstRun(bool)+0x1638>
10003f7a:	8a 45 93             	mov    al,BYTE PTR [ebp-0x6d]
10003f7d:	83 f0 01             	xor    eax,0x1
10003f80:	84 c0                	test   al,al
10003f82:	74 09                	je     10003f8d <firstRun(bool)+0x1638>
10003f84:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003f8b:	eb 7e                	jmp    1000400b <firstRun(bool)+0x16b6>
10003f8d:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
10003f91:	75 09                	jne    10003f9c <firstRun(bool)+0x1647>
10003f93:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003f9a:	eb 6f                	jmp    1000400b <firstRun(bool)+0x16b6>
10003f9c:	83 7d a4 0c          	cmp    DWORD PTR [ebp-0x5c],0xc
10003fa0:	7f 06                	jg     10003fa8 <firstRun(bool)+0x1653>
10003fa2:	83 7d a4 00          	cmp    DWORD PTR [ebp-0x5c],0x0
10003fa6:	75 09                	jne    10003fb1 <firstRun(bool)+0x165c>
10003fa8:	c7 45 e4 03 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x3
10003faf:	eb 5a                	jmp    1000400b <firstRun(bool)+0x16b6>
10003fb1:	81 7d a0 b7 0b 00 00 	cmp    DWORD PTR [ebp-0x60],0xbb7
10003fb8:	7f 09                	jg     10003fc3 <firstRun(bool)+0x166e>
10003fba:	81 7d a0 b1 07 00 00 	cmp    DWORD PTR [ebp-0x60],0x7b1
10003fc1:	7f 09                	jg     10003fcc <firstRun(bool)+0x1677>
10003fc3:	c7 45 e4 06 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x6
10003fca:	eb 3f                	jmp    1000400b <firstRun(bool)+0x16b6>
10003fcc:	83 7d 9c 17          	cmp    DWORD PTR [ebp-0x64],0x17
10003fd0:	7e 09                	jle    10003fdb <firstRun(bool)+0x1686>
10003fd2:	c7 45 e4 0b 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xb
10003fd9:	eb 30                	jmp    1000400b <firstRun(bool)+0x16b6>
10003fdb:	83 7d 98 3b          	cmp    DWORD PTR [ebp-0x68],0x3b
10003fdf:	7e 09                	jle    10003fea <firstRun(bool)+0x1695>
10003fe1:	c7 45 e4 0e 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xe
10003fe8:	eb 21                	jmp    1000400b <firstRun(bool)+0x16b6>
10003fea:	83 7d 94 3b          	cmp    DWORD PTR [ebp-0x6c],0x3b
10003fee:	7e 37                	jle    10004027 <firstRun(bool)+0x16d2>
10003ff0:	c7 45 e4 11 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x11
10003ff7:	eb 12                	jmp    1000400b <firstRun(bool)+0x16b6>
10003ff9:	a0 00 00 00 00       	mov    al,ds:0x0	10003ffa: R_386_32	installKey
10003ffe:	3c 1b                	cmp    al,0x1b
10004000:	0f 94 c0             	sete   al
10004003:	84 c0                	test   al,al
10004005:	0f 85 69 ea ff ff    	jne    10002a74 <firstRun(bool)+0x11f>
1000400b:	83 ec 0c             	sub    esp,0xc
1000400e:	68 4c 04 00 00       	push   0x44c
10004013:	e8 fc ff ff ff       	call   10004014 <firstRun(bool)+0x16bf>	10004014: R_386_PC32	milliTenthSleep(unsigned int)
10004018:	83 c4 10             	add    esp,0x10
1000401b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000401d: R_386_32	installKey
10004022:	e9 4b f8 ff ff       	jmp    10003872 <firstRun(bool)+0xf1d>
10004027:	90                   	nop
10004028:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000402a: R_386_32	installKey
1000402f:	83 ec 0c             	sub    esp,0xc
10004032:	68 a0 0f 00 00       	push   0xfa0
10004037:	e8 fc ff ff ff       	call   10004038 <firstRun(bool)+0x16e3>	10004038: R_386_PC32	milliTenthSleep(unsigned int)
1000403c:	83 c4 10             	add    esp,0x10
1000403f:	eb 01                	jmp    10004042 <firstRun(bool)+0x16ed>
10004041:	90                   	nop
10004042:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004044: R_386_32	installKey
10004049:	e8 fc ff ff ff       	call   1000404a <firstRun(bool)+0x16f5>	1000404a: R_386_PC32	drawBootScreen()
1000404e:	83 ec 0c             	sub    esp,0xc
10004051:	68 9f a7 00 10       	push   0x1000a79f	10004052: R_386_32	.text
10004056:	6a 14                	push   0x14
10004058:	6a 3c                	push   0x3c
1000405a:	6a 01                	push   0x1
1000405c:	6a 12                	push   0x12
1000405e:	e8 fc ff ff ff       	call   1000405f <firstRun(bool)+0x170a>	1000405f: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004063:	83 c4 20             	add    esp,0x20
10004066:	a1 00 00 00 00       	mov    eax,ds:0x0	10004067: R_386_32	term
1000406b:	83 ec 04             	sub    esp,0x4
1000406e:	6a 04                	push   0x4
10004070:	6a 14                	push   0x14
10004072:	50                   	push   eax
10004073:	e8 fc ff ff ff       	call   10004074 <firstRun(bool)+0x171f>	10004074: R_386_PC32	VgaText::setCursor(int, int)
10004078:	83 c4 10             	add    esp,0x10
1000407b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000407c: R_386_32	term
10004080:	83 ec 08             	sub    esp,0x8
10004083:	68 2c a8 00 10       	push   0x1000a82c	10004084: R_386_32	.text
10004088:	50                   	push   eax
10004089:	e8 fc ff ff ff       	call   1000408a <firstRun(bool)+0x1735>	1000408a: R_386_PC32	VgaText::puts(char const*)
1000408e:	83 c4 10             	add    esp,0x10
10004091:	a1 00 00 00 00       	mov    eax,ds:0x0	10004092: R_386_32	term
10004096:	83 ec 04             	sub    esp,0x4
10004099:	6a 18                	push   0x18
1000409b:	6a 11                	push   0x11
1000409d:	50                   	push   eax
1000409e:	e8 fc ff ff ff       	call   1000409f <firstRun(bool)+0x174a>	1000409f: R_386_PC32	VgaText::setCursor(int, int)
100040a3:	83 c4 10             	add    esp,0x10
100040a6:	a1 00 00 00 00       	mov    eax,ds:0x0	100040a7: R_386_32	term
100040ab:	6a 0b                	push   0xb
100040ad:	6a 03                	push   0x3
100040af:	68 16 a8 00 10       	push   0x1000a816	100040b0: R_386_32	.text
100040b4:	50                   	push   eax
100040b5:	e8 fc ff ff ff       	call   100040b6 <firstRun(bool)+0x1761>	100040b6: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100040ba:	83 c4 10             	add    esp,0x10
100040bd:	e8 fc ff ff ff       	call   100040be <firstRun(bool)+0x1769>	100040be: R_386_PC32	loadTimezoneStrings()
100040c2:	89 45 8c             	mov    DWORD PTR [ebp-0x74],eax
100040c5:	b8 d2 00 00 00       	mov    eax,0xd2
100040ca:	99                   	cdq    
100040cb:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
100040ce:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
100040d1:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
100040d8:	83 7d cc 0d          	cmp    DWORD PTR [ebp-0x34],0xd
100040dc:	7f 32                	jg     10004110 <firstRun(bool)+0x17bb>
100040de:	a1 00 00 00 00       	mov    eax,ds:0x0	100040df: R_386_32	term
100040e3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
100040e6:	83 c2 07             	add    edx,0x7
100040e9:	83 ec 04             	sub    esp,0x4
100040ec:	52                   	push   edx
100040ed:	6a 4b                	push   0x4b
100040ef:	50                   	push   eax
100040f0:	e8 fc ff ff ff       	call   100040f1 <firstRun(bool)+0x179c>	100040f1: R_386_PC32	VgaText::setCursor(int, int)
100040f5:	83 c4 10             	add    esp,0x10
100040f8:	a1 00 00 00 00       	mov    eax,ds:0x0	100040f9: R_386_32	term
100040fd:	83 ec 08             	sub    esp,0x8
10004100:	6a 20                	push   0x20
10004102:	50                   	push   eax
10004103:	e8 fc ff ff ff       	call   10004104 <firstRun(bool)+0x17af>	10004104: R_386_PC32	VgaText::putchar(char)
10004108:	83 c4 10             	add    esp,0x10
1000410b:	ff 45 cc             	inc    DWORD PTR [ebp-0x34]
1000410e:	eb c8                	jmp    100040d8 <firstRun(bool)+0x1783>
10004110:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
10004117:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
1000411a:	3b 45 88             	cmp    eax,DWORD PTR [ebp-0x78]
1000411d:	7d 48                	jge    10004167 <firstRun(bool)+0x1812>
1000411f:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004121: R_386_32	term
10004125:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10004128:	8d 58 07             	lea    ebx,[eax+0x7]
1000412b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
1000412e:	89 d0                	mov    eax,edx
10004130:	01 c0                	add    eax,eax
10004132:	01 d0                	add    eax,edx
10004134:	01 c0                	add    eax,eax
10004136:	01 d0                	add    eax,edx
10004138:	01 c0                	add    eax,eax
1000413a:	99                   	cdq    
1000413b:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
1000413e:	01 d8                	add    eax,ebx
10004140:	83 ec 04             	sub    esp,0x4
10004143:	50                   	push   eax
10004144:	6a 4b                	push   0x4b
10004146:	51                   	push   ecx
10004147:	e8 fc ff ff ff       	call   10004148 <firstRun(bool)+0x17f3>	10004148: R_386_PC32	VgaText::setCursor(int, int)
1000414c:	83 c4 10             	add    esp,0x10
1000414f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004150: R_386_32	term
10004154:	83 ec 08             	sub    esp,0x8
10004157:	6a db                	push   0xffffffdb
10004159:	50                   	push   eax
1000415a:	e8 fc ff ff ff       	call   1000415b <firstRun(bool)+0x1806>	1000415b: R_386_PC32	VgaText::putchar(char)
1000415f:	83 c4 10             	add    esp,0x10
10004162:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
10004165:	eb b0                	jmp    10004117 <firstRun(bool)+0x17c2>
10004167:	a1 00 00 00 00       	mov    eax,ds:0x0	10004168: R_386_32	term
1000416c:	83 ec 04             	sub    esp,0x4
1000416f:	6a 06                	push   0x6
10004171:	6a 4b                	push   0x4b
10004173:	50                   	push   eax
10004174:	e8 fc ff ff ff       	call   10004175 <firstRun(bool)+0x1820>	10004175: R_386_PC32	VgaText::setCursor(int, int)
10004179:	83 c4 10             	add    esp,0x10
1000417c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000417d: R_386_32	term
10004181:	83 ec 08             	sub    esp,0x8
10004184:	6a 1e                	push   0x1e
10004186:	50                   	push   eax
10004187:	e8 fc ff ff ff       	call   10004188 <firstRun(bool)+0x1833>	10004188: R_386_PC32	VgaText::putchar(char)
1000418c:	83 c4 10             	add    esp,0x10
1000418f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004190: R_386_32	term
10004194:	83 ec 04             	sub    esp,0x4
10004197:	6a 14                	push   0x14
10004199:	6a 4b                	push   0x4b
1000419b:	50                   	push   eax
1000419c:	e8 fc ff ff ff       	call   1000419d <firstRun(bool)+0x1848>	1000419d: R_386_PC32	VgaText::setCursor(int, int)
100041a1:	83 c4 10             	add    esp,0x10
100041a4:	a1 00 00 00 00       	mov    eax,ds:0x0	100041a5: R_386_32	term
100041a9:	83 ec 08             	sub    esp,0x8
100041ac:	6a 1f                	push   0x1f
100041ae:	50                   	push   eax
100041af:	e8 fc ff ff ff       	call   100041b0 <firstRun(bool)+0x185b>	100041b0: R_386_PC32	VgaText::putchar(char)
100041b4:	83 c4 10             	add    esp,0x10
100041b7:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
100041be:	83 7d c4 0e          	cmp    DWORD PTR [ebp-0x3c],0xe
100041c2:	7f 7e                	jg     10004242 <firstRun(bool)+0x18ed>
100041c4:	a1 00 00 00 00       	mov    eax,ds:0x0	100041c5: R_386_32	term
100041c9:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
100041cc:	83 c2 06             	add    edx,0x6
100041cf:	83 ec 04             	sub    esp,0x4
100041d2:	52                   	push   edx
100041d3:	6a 14                	push   0x14
100041d5:	50                   	push   eax
100041d6:	e8 fc ff ff ff       	call   100041d7 <firstRun(bool)+0x1882>	100041d7: R_386_PC32	VgaText::setCursor(int, int)
100041db:	83 c4 10             	add    esp,0x10
100041de:	a1 00 00 00 00       	mov    eax,ds:0x0	100041df: R_386_32	term
100041e3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
100041e6:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
100041e9:	01 d1                	add    ecx,edx
100041eb:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100041ed: R_386_32	tzsel
100041f1:	39 d1                	cmp    ecx,edx
100041f3:	75 07                	jne    100041fc <firstRun(bool)+0x18a7>
100041f5:	bb 00 00 00 00       	mov    ebx,0x0
100041fa:	eb 05                	jmp    10004201 <firstRun(bool)+0x18ac>
100041fc:	bb 0f 00 00 00       	mov    ebx,0xf
10004201:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10004204:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10004207:	01 d1                	add    ecx,edx
10004209:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000420b: R_386_32	tzsel
1000420f:	39 d1                	cmp    ecx,edx
10004211:	75 07                	jne    1000421a <firstRun(bool)+0x18c5>
10004213:	b9 0f 00 00 00       	mov    ecx,0xf
10004218:	eb 05                	jmp    1000421f <firstRun(bool)+0x18ca>
1000421a:	b9 00 00 00 00       	mov    ecx,0x0
1000421f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
10004222:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10004225:	01 f2                	add    edx,esi
10004227:	8b 14 95 00 00 00 00 	mov    edx,DWORD PTR [edx*4+0x0]	1000422a: R_386_32	timezoneStrings
1000422e:	53                   	push   ebx
1000422f:	51                   	push   ecx
10004230:	52                   	push   edx
10004231:	50                   	push   eax
10004232:	e8 fc ff ff ff       	call   10004233 <firstRun(bool)+0x18de>	10004233: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004237:	83 c4 10             	add    esp,0x10
1000423a:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
1000423d:	e9 7c ff ff ff       	jmp    100041be <firstRun(bool)+0x1869>
10004242:	a0 00 00 00 00       	mov    al,ds:0x0	10004243: R_386_32	installKey
10004247:	84 c0                	test   al,al
10004249:	0f 94 c0             	sete   al
1000424c:	84 c0                	test   al,al
1000424e:	74 02                	je     10004252 <firstRun(bool)+0x18fd>
10004250:	eb f0                	jmp    10004242 <firstRun(bool)+0x18ed>
10004252:	a1 00 00 00 00       	mov    eax,ds:0x0	10004253: R_386_32	term
10004257:	05 82 00 00 00       	add    eax,0x82
1000425c:	83 ec 04             	sub    esp,0x4
1000425f:	6a 04                	push   0x4
10004261:	6a 00                	push   0x0
10004263:	50                   	push   eax
10004264:	e8 fc ff ff ff       	call   10004265 <firstRun(bool)+0x1910>	10004265: R_386_PC32	memset
10004269:	83 c4 10             	add    esp,0x10
1000426c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000426d: R_386_32	term
10004271:	05 02 01 00 00       	add    eax,0x102
10004276:	83 ec 04             	sub    esp,0x4
10004279:	6a 04                	push   0x4
1000427b:	6a 00                	push   0x0
1000427d:	50                   	push   eax
1000427e:	e8 fc ff ff ff       	call   1000427f <firstRun(bool)+0x192a>	1000427f: R_386_PC32	memset
10004283:	83 c4 10             	add    esp,0x10
10004286:	a0 00 00 00 00       	mov    al,ds:0x0	10004287: R_386_32	installKey
1000428b:	3c 01                	cmp    al,0x1
1000428d:	0f 94 c0             	sete   al
10004290:	84 c0                	test   al,al
10004292:	74 41                	je     100042d5 <firstRun(bool)+0x1980>
10004294:	a1 00 00 00 00       	mov    eax,ds:0x0	10004295: R_386_32	tzsel
10004299:	48                   	dec    eax
1000429a:	a3 00 00 00 00       	mov    ds:0x0,eax	1000429b: R_386_32	tzsel
1000429f:	a1 00 00 00 00       	mov    eax,ds:0x0	100042a0: R_386_32	tzsel
100042a4:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
100042a7:	83 f8 04             	cmp    eax,0x4
100042aa:	7f 03                	jg     100042af <firstRun(bool)+0x195a>
100042ac:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
100042af:	a1 00 00 00 00       	mov    eax,ds:0x0	100042b0: R_386_32	tzsel
100042b4:	85 c0                	test   eax,eax
100042b6:	79 0a                	jns    100042c2 <firstRun(bool)+0x196d>
100042b8:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100042ba: R_386_32	tzsel
100042c2:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100042c6:	0f 89 82 00 00 00    	jns    1000434e <firstRun(bool)+0x19f9>
100042cc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100042d3:	eb 79                	jmp    1000434e <firstRun(bool)+0x19f9>
100042d5:	a0 00 00 00 00       	mov    al,ds:0x0	100042d6: R_386_32	installKey
100042da:	3c 02                	cmp    al,0x2
100042dc:	0f 94 c0             	sete   al
100042df:	84 c0                	test   al,al
100042e1:	74 4b                	je     1000432e <firstRun(bool)+0x19d9>
100042e3:	a1 00 00 00 00       	mov    eax,ds:0x0	100042e4: R_386_32	tzsel
100042e8:	40                   	inc    eax
100042e9:	a3 00 00 00 00       	mov    ds:0x0,eax	100042ea: R_386_32	tzsel
100042ee:	a1 00 00 00 00       	mov    eax,ds:0x0	100042ef: R_386_32	tzsel
100042f3:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
100042f6:	83 f8 0a             	cmp    eax,0xa
100042f9:	7e 03                	jle    100042fe <firstRun(bool)+0x19a9>
100042fb:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
100042fe:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004301:	8d 50 ff             	lea    edx,[eax-0x1]
10004304:	a1 00 00 00 00       	mov    eax,ds:0x0	10004305: R_386_32	tzsel
10004309:	39 c2                	cmp    edx,eax
1000430b:	7f 0b                	jg     10004318 <firstRun(bool)+0x19c3>
1000430d:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004310:	83 e8 02             	sub    eax,0x2
10004313:	a3 00 00 00 00       	mov    ds:0x0,eax	10004314: R_386_32	tzsel
10004318:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
1000431b:	83 e8 0f             	sub    eax,0xf
1000431e:	39 45 dc             	cmp    DWORD PTR [ebp-0x24],eax
10004321:	7c 2b                	jl     1000434e <firstRun(bool)+0x19f9>
10004323:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004326:	83 e8 10             	sub    eax,0x10
10004329:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000432c:	eb 20                	jmp    1000434e <firstRun(bool)+0x19f9>
1000432e:	a0 00 00 00 00       	mov    al,ds:0x0	1000432f: R_386_32	installKey
10004333:	3c 0a                	cmp    al,0xa
10004335:	0f 94 c0             	sete   al
10004338:	84 c0                	test   al,al
1000433a:	75 2e                	jne    1000436a <firstRun(bool)+0x1a15>
1000433c:	a0 00 00 00 00       	mov    al,ds:0x0	1000433d: R_386_32	installKey
10004341:	3c 1b                	cmp    al,0x1b
10004343:	0f 94 c0             	sete   al
10004346:	84 c0                	test   al,al
10004348:	0f 85 28 f1 ff ff    	jne    10003476 <firstRun(bool)+0xb21>
1000434e:	83 ec 0c             	sub    esp,0xc
10004351:	68 f4 01 00 00       	push   0x1f4
10004356:	e8 fc ff ff ff       	call   10004357 <firstRun(bool)+0x1a02>	10004357: R_386_PC32	milliTenthSleep(unsigned int)
1000435b:	83 c4 10             	add    esp,0x10
1000435e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004360: R_386_32	installKey
10004365:	e9 67 fd ff ff       	jmp    100040d1 <firstRun(bool)+0x177c>
1000436a:	90                   	nop
1000436b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000436d: R_386_32	keDstOn
10004372:	a1 00 00 00 00       	mov    eax,ds:0x0	10004373: R_386_32	tzsel
10004377:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000437a: R_386_32	timezoneStrings
1000437e:	83 c0 03             	add    eax,0x3
10004381:	8a 00                	mov    al,BYTE PTR [eax]
10004383:	3c 2e                	cmp    al,0x2e
10004385:	75 15                	jne    1000439c <firstRun(bool)+0x1a47>
10004387:	a1 00 00 00 00       	mov    eax,ds:0x0	10004388: R_386_32	tzsel
1000438c:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000438f: R_386_32	timezoneStrings
10004393:	83 c0 04             	add    eax,0x4
10004396:	8a 00                	mov    al,BYTE PTR [eax]
10004398:	3c 35                	cmp    al,0x35
1000439a:	74 2a                	je     100043c6 <firstRun(bool)+0x1a71>
1000439c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000439d: R_386_32	tzsel
100043a1:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100043a4: R_386_32	timezoneStrings
100043a8:	83 c0 04             	add    eax,0x4
100043ab:	8a 00                	mov    al,BYTE PTR [eax]
100043ad:	3c 2e                	cmp    al,0x2e
100043af:	75 19                	jne    100043ca <firstRun(bool)+0x1a75>
100043b1:	a1 00 00 00 00       	mov    eax,ds:0x0	100043b2: R_386_32	tzsel
100043b6:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100043b9: R_386_32	timezoneStrings
100043bd:	83 c0 05             	add    eax,0x5
100043c0:	8a 00                	mov    al,BYTE PTR [eax]
100043c2:	3c 35                	cmp    al,0x35
100043c4:	75 04                	jne    100043ca <firstRun(bool)+0x1a75>
100043c6:	b0 01                	mov    al,0x1
100043c8:	eb 02                	jmp    100043cc <firstRun(bool)+0x1a77>
100043ca:	b0 00                	mov    al,0x0
100043cc:	a2 00 00 00 00       	mov    ds:0x0,al	100043cd: R_386_32	keTimezoneHalfHourOffset
100043d1:	a1 00 00 00 00       	mov    eax,ds:0x0	100043d2: R_386_32	tzsel
100043d6:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100043d9: R_386_32	timezoneStrings
100043dd:	83 c0 02             	add    eax,0x2
100043e0:	8a 00                	mov    al,BYTE PTR [eax]
100043e2:	0f be c0             	movsx  eax,al
100043e5:	83 e8 30             	sub    eax,0x30
100043e8:	a3 00 00 00 00       	mov    ds:0x0,eax	100043e9: R_386_32	keTimezoneHourOffset
100043ed:	a1 00 00 00 00       	mov    eax,ds:0x0	100043ee: R_386_32	tzsel
100043f2:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100043f5: R_386_32	timezoneStrings
100043f9:	83 c0 04             	add    eax,0x4
100043fc:	8a 00                	mov    al,BYTE PTR [eax]
100043fe:	3c 2e                	cmp    al,0x2e
10004400:	75 37                	jne    10004439 <firstRun(bool)+0x1ae4>
10004402:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004404: R_386_32	keTimezoneHourOffset
10004408:	89 d0                	mov    eax,edx
1000440a:	c1 e0 02             	shl    eax,0x2
1000440d:	01 d0                	add    eax,edx
1000440f:	01 c0                	add    eax,eax
10004411:	a3 00 00 00 00       	mov    ds:0x0,eax	10004412: R_386_32	keTimezoneHourOffset
10004416:	a1 00 00 00 00       	mov    eax,ds:0x0	10004417: R_386_32	tzsel
1000441b:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000441e: R_386_32	timezoneStrings
10004422:	83 c0 03             	add    eax,0x3
10004425:	8a 00                	mov    al,BYTE PTR [eax]
10004427:	0f be c0             	movsx  eax,al
1000442a:	8d 50 d0             	lea    edx,[eax-0x30]
1000442d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000442e: R_386_32	keTimezoneHourOffset
10004432:	01 d0                	add    eax,edx
10004434:	a3 00 00 00 00       	mov    ds:0x0,eax	10004435: R_386_32	keTimezoneHourOffset
10004439:	a1 00 00 00 00       	mov    eax,ds:0x0	1000443a: R_386_32	tzsel
1000443e:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10004441: R_386_32	timezoneStrings
10004445:	40                   	inc    eax
10004446:	8a 00                	mov    al,BYTE PTR [eax]
10004448:	3c 2d                	cmp    al,0x2d
1000444a:	75 0c                	jne    10004458 <firstRun(bool)+0x1b03>
1000444c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000444d: R_386_32	keTimezoneHourOffset
10004451:	f7 d8                	neg    eax
10004453:	a3 00 00 00 00       	mov    ds:0x0,eax	10004454: R_386_32	keTimezoneHourOffset
10004458:	a0 00 00 00 00       	mov    al,ds:0x0	10004459: R_386_32	keTimezoneHalfHourOffset
1000445d:	0f b6 d0             	movzx  edx,al
10004460:	a1 00 00 00 00       	mov    eax,ds:0x0	10004461: R_386_32	keTimezoneHourOffset
10004465:	83 ec 04             	sub    esp,0x4
10004468:	52                   	push   edx
10004469:	50                   	push   eax
1000446a:	68 5e a8 00 10       	push   0x1000a85e	1000446b: R_386_32	.text
1000446f:	e8 fc ff ff ff       	call   10004470 <firstRun(bool)+0x1b1b>	10004470: R_386_PC32	Dbg::kprintf(char const*, ...)
10004474:	83 c4 10             	add    esp,0x10
10004477:	a1 00 00 00 00       	mov    eax,ds:0x0	10004478: R_386_32	Krnl::computer
1000447c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004482:	83 ec 04             	sub    esp,0x4
10004485:	ff b5 d8 fe ff ff    	push   DWORD PTR [ebp-0x128]
1000448b:	ff b5 d4 fe ff ff    	push   DWORD PTR [ebp-0x12c]
10004491:	50                   	push   eax
10004492:	e8 fc ff ff ff       	call   10004493 <firstRun(bool)+0x1b3e>	10004493: R_386_PC32	Clock::setTimeInDatetimeLocal(datetime_t)
10004497:	83 c4 10             	add    esp,0x10
1000449a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000449c: R_386_32	installKey
100044a1:	83 ec 0c             	sub    esp,0xc
100044a4:	68 a0 0f 00 00       	push   0xfa0
100044a9:	e8 fc ff ff ff       	call   100044aa <firstRun(bool)+0x1b55>	100044aa: R_386_PC32	milliTenthSleep(unsigned int)
100044ae:	83 c4 10             	add    esp,0x10
100044b1:	eb 01                	jmp    100044b4 <firstRun(bool)+0x1b5f>
100044b3:	90                   	nop
100044b4:	e8 fc ff ff ff       	call   100044b5 <firstRun(bool)+0x1b60>	100044b5: R_386_PC32	drawBootScreen()
100044b9:	83 ec 0c             	sub    esp,0xc
100044bc:	68 58 1b 00 00       	push   0x1b58
100044c1:	e8 fc ff ff ff       	call   100044c2 <firstRun(bool)+0x1b6d>	100044c2: R_386_PC32	milliTenthSleep(unsigned int)
100044c6:	83 c4 10             	add    esp,0x10
100044c9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100044cb: R_386_32	installKey
100044d0:	e8 fc ff ff ff       	call   100044d1 <firstRun(bool)+0x1b7c>	100044d1: R_386_PC32	drawBootScreen()
100044d5:	83 ec 0c             	sub    esp,0xc
100044d8:	68 6b a8 00 10       	push   0x1000a86b	100044d9: R_386_32	.text
100044dd:	6a 10                	push   0x10
100044df:	6a 37                	push   0x37
100044e1:	6a 03                	push   0x3
100044e3:	6a 14                	push   0x14
100044e5:	e8 fc ff ff ff       	call   100044e6 <firstRun(bool)+0x1b91>	100044e6: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100044ea:	83 c4 20             	add    esp,0x20
100044ed:	a1 00 00 00 00       	mov    eax,ds:0x0	100044ee: R_386_32	term
100044f2:	83 ec 04             	sub    esp,0x4
100044f5:	6a 06                	push   0x6
100044f7:	6a 16                	push   0x16
100044f9:	50                   	push   eax
100044fa:	e8 fc ff ff ff       	call   100044fb <firstRun(bool)+0x1ba6>	100044fb: R_386_PC32	VgaText::setCursor(int, int)
100044ff:	83 c4 10             	add    esp,0x10
10004502:	a1 00 00 00 00       	mov    eax,ds:0x0	10004503: R_386_32	term
10004507:	83 ec 08             	sub    esp,0x8
1000450a:	68 7c a8 00 10       	push   0x1000a87c	1000450b: R_386_32	.text
1000450f:	50                   	push   eax
10004510:	e8 fc ff ff ff       	call   10004511 <firstRun(bool)+0x1bbc>	10004511: R_386_PC32	VgaText::puts(char const*)
10004515:	83 c4 10             	add    esp,0x10
10004518:	a1 00 00 00 00       	mov    eax,ds:0x0	10004519: R_386_32	term
1000451d:	83 ec 04             	sub    esp,0x4
10004520:	6a 07                	push   0x7
10004522:	6a 16                	push   0x16
10004524:	50                   	push   eax
10004525:	e8 fc ff ff ff       	call   10004526 <firstRun(bool)+0x1bd1>	10004526: R_386_PC32	VgaText::setCursor(int, int)
1000452a:	83 c4 10             	add    esp,0x10
1000452d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000452e: R_386_32	term
10004532:	83 ec 08             	sub    esp,0x8
10004535:	68 b0 a8 00 10       	push   0x1000a8b0	10004536: R_386_32	.text
1000453a:	50                   	push   eax
1000453b:	e8 fc ff ff ff       	call   1000453c <firstRun(bool)+0x1be7>	1000453c: R_386_PC32	VgaText::puts(char const*)
10004540:	83 c4 10             	add    esp,0x10
10004543:	a1 00 00 00 00       	mov    eax,ds:0x0	10004544: R_386_32	term
10004548:	83 ec 04             	sub    esp,0x4
1000454b:	6a 18                	push   0x18
1000454d:	6a 11                	push   0x11
1000454f:	50                   	push   eax
10004550:	e8 fc ff ff ff       	call   10004551 <firstRun(bool)+0x1bfc>	10004551: R_386_PC32	VgaText::setCursor(int, int)
10004555:	83 c4 10             	add    esp,0x10
10004558:	a1 00 00 00 00       	mov    eax,ds:0x0	10004559: R_386_32	term
1000455d:	6a 0b                	push   0xb
1000455f:	6a 03                	push   0x3
10004561:	68 16 a8 00 10       	push   0x1000a816	10004562: R_386_32	.text
10004566:	50                   	push   eax
10004567:	e8 fc ff ff ff       	call   10004568 <firstRun(bool)+0x1c13>	10004568: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000456c:	83 c4 10             	add    esp,0x10
1000456f:	c7 45 8c 03 00 00 00 	mov    DWORD PTR [ebp-0x74],0x3
10004576:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000457c:	bb 34 ab 00 10       	mov    ebx,0x1000ab34	1000457d: R_386_32	.text
10004581:	ba 03 00 00 00       	mov    edx,0x3
10004586:	89 c7                	mov    edi,eax
10004588:	89 de                	mov    esi,ebx
1000458a:	89 d1                	mov    ecx,edx
1000458c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000458e:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
10004595:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10004598:	3b 45 8c             	cmp    eax,DWORD PTR [ebp-0x74]
1000459b:	7d 68                	jge    10004605 <firstRun(bool)+0x1cb0>
1000459d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000459e: R_386_32	term
100045a2:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
100045a5:	83 c2 09             	add    edx,0x9
100045a8:	83 ec 04             	sub    esp,0x4
100045ab:	52                   	push   edx
100045ac:	6a 16                	push   0x16
100045ae:	50                   	push   eax
100045af:	e8 fc ff ff ff       	call   100045b0 <firstRun(bool)+0x1c5b>	100045b0: R_386_PC32	VgaText::setCursor(int, int)
100045b4:	83 c4 10             	add    esp,0x10
100045b7:	a1 00 00 00 00       	mov    eax,ds:0x0	100045b8: R_386_32	term
100045bc:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100045be: R_386_32	modesel
100045c2:	39 55 c0             	cmp    DWORD PTR [ebp-0x40],edx
100045c5:	75 07                	jne    100045ce <firstRun(bool)+0x1c79>
100045c7:	bb 00 00 00 00       	mov    ebx,0x0
100045cc:	eb 05                	jmp    100045d3 <firstRun(bool)+0x1c7e>
100045ce:	bb 0f 00 00 00       	mov    ebx,0xf
100045d3:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100045d5: R_386_32	modesel
100045d9:	39 55 c0             	cmp    DWORD PTR [ebp-0x40],edx
100045dc:	75 07                	jne    100045e5 <firstRun(bool)+0x1c90>
100045de:	b9 0f 00 00 00       	mov    ecx,0xf
100045e3:	eb 05                	jmp    100045ea <firstRun(bool)+0x1c95>
100045e5:	b9 00 00 00 00       	mov    ecx,0x0
100045ea:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
100045ed:	8b 94 95 c8 fe ff ff 	mov    edx,DWORD PTR [ebp+edx*4-0x138]
100045f4:	53                   	push   ebx
100045f5:	51                   	push   ecx
100045f6:	52                   	push   edx
100045f7:	50                   	push   eax
100045f8:	e8 fc ff ff ff       	call   100045f9 <firstRun(bool)+0x1ca4>	100045f9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100045fd:	83 c4 10             	add    esp,0x10
10004600:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
10004603:	eb 90                	jmp    10004595 <firstRun(bool)+0x1c40>
10004605:	a0 00 00 00 00       	mov    al,ds:0x0	10004606: R_386_32	installKey
1000460a:	84 c0                	test   al,al
1000460c:	0f 94 c0             	sete   al
1000460f:	84 c0                	test   al,al
10004611:	74 02                	je     10004615 <firstRun(bool)+0x1cc0>
10004613:	eb f0                	jmp    10004605 <firstRun(bool)+0x1cb0>
10004615:	a1 00 00 00 00       	mov    eax,ds:0x0	10004616: R_386_32	term
1000461a:	05 82 00 00 00       	add    eax,0x82
1000461f:	83 ec 04             	sub    esp,0x4
10004622:	6a 04                	push   0x4
10004624:	6a 00                	push   0x0
10004626:	50                   	push   eax
10004627:	e8 fc ff ff ff       	call   10004628 <firstRun(bool)+0x1cd3>	10004628: R_386_PC32	memset
1000462c:	83 c4 10             	add    esp,0x10
1000462f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004630: R_386_32	term
10004634:	05 02 01 00 00       	add    eax,0x102
10004639:	83 ec 04             	sub    esp,0x4
1000463c:	6a 04                	push   0x4
1000463e:	6a 00                	push   0x0
10004640:	50                   	push   eax
10004641:	e8 fc ff ff ff       	call   10004642 <firstRun(bool)+0x1ced>	10004642: R_386_PC32	memset
10004646:	83 c4 10             	add    esp,0x10
10004649:	a0 00 00 00 00       	mov    al,ds:0x0	1000464a: R_386_32	installKey
1000464e:	3c 01                	cmp    al,0x1
10004650:	0f 94 c0             	sete   al
10004653:	84 c0                	test   al,al
10004655:	74 20                	je     10004677 <firstRun(bool)+0x1d22>
10004657:	a1 00 00 00 00       	mov    eax,ds:0x0	10004658: R_386_32	modesel
1000465c:	48                   	dec    eax
1000465d:	a3 00 00 00 00       	mov    ds:0x0,eax	1000465e: R_386_32	modesel
10004662:	a1 00 00 00 00       	mov    eax,ds:0x0	10004663: R_386_32	modesel
10004667:	85 c0                	test   eax,eax
10004669:	79 5a                	jns    100046c5 <firstRun(bool)+0x1d70>
1000466b:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000466d: R_386_32	modesel
10004675:	eb 4e                	jmp    100046c5 <firstRun(bool)+0x1d70>
10004677:	a0 00 00 00 00       	mov    al,ds:0x0	10004678: R_386_32	installKey
1000467c:	3c 02                	cmp    al,0x2
1000467e:	0f 94 c0             	sete   al
10004681:	84 c0                	test   al,al
10004683:	74 20                	je     100046a5 <firstRun(bool)+0x1d50>
10004685:	a1 00 00 00 00       	mov    eax,ds:0x0	10004686: R_386_32	modesel
1000468a:	40                   	inc    eax
1000468b:	a3 00 00 00 00       	mov    ds:0x0,eax	1000468c: R_386_32	modesel
10004690:	a1 00 00 00 00       	mov    eax,ds:0x0	10004691: R_386_32	modesel
10004695:	39 45 8c             	cmp    DWORD PTR [ebp-0x74],eax
10004698:	7f 2b                	jg     100046c5 <firstRun(bool)+0x1d70>
1000469a:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
1000469d:	48                   	dec    eax
1000469e:	a3 00 00 00 00       	mov    ds:0x0,eax	1000469f: R_386_32	modesel
100046a3:	eb 20                	jmp    100046c5 <firstRun(bool)+0x1d70>
100046a5:	a0 00 00 00 00       	mov    al,ds:0x0	100046a6: R_386_32	installKey
100046aa:	3c 0a                	cmp    al,0xa
100046ac:	0f 94 c0             	sete   al
100046af:	84 c0                	test   al,al
100046b1:	75 2e                	jne    100046e1 <firstRun(bool)+0x1d8c>
100046b3:	a0 00 00 00 00       	mov    al,ds:0x0	100046b4: R_386_32	installKey
100046b8:	3c 1b                	cmp    al,0x1b
100046ba:	0f 94 c0             	sete   al
100046bd:	84 c0                	test   al,al
100046bf:	0f 85 7c f9 ff ff    	jne    10004041 <firstRun(bool)+0x16ec>
100046c5:	83 ec 0c             	sub    esp,0xc
100046c8:	68 f4 01 00 00       	push   0x1f4
100046cd:	e8 fc ff ff ff       	call   100046ce <firstRun(bool)+0x1d79>	100046ce: R_386_PC32	milliTenthSleep(unsigned int)
100046d2:	83 c4 10             	add    esp,0x10
100046d5:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100046d7: R_386_32	installKey
100046dc:	e9 ad fe ff ff       	jmp    1000458e <firstRun(bool)+0x1c39>
100046e1:	90                   	nop
100046e2:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
100046e9:	0f 84 ff 00 00 00    	je     100047ee <firstRun(bool)+0x1e99>
100046ef:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100046f1: R_386_32	showSidebar
100046f6:	a1 00 00 00 00       	mov    eax,ds:0x0	100046f7: R_386_32	term
100046fb:	83 ec 0c             	sub    esp,0xc
100046fe:	50                   	push   eax
100046ff:	e8 fc ff ff ff       	call   10004700 <firstRun(bool)+0x1dab>	10004700: R_386_PC32	setActiveTerminal(VgaText*)
10004704:	83 c4 10             	add    esp,0x10
10004707:	e8 fc ff ff ff       	call   10004708 <firstRun(bool)+0x1db3>	10004708: R_386_PC32	drawBootScreen()
1000470c:	83 ec 0c             	sub    esp,0xc
1000470f:	68 e5 a8 00 10       	push   0x1000a8e5	10004710: R_386_32	.text
10004714:	6a 0d                	push   0xd
10004716:	6a 32                	push   0x32
10004718:	6a 05                	push   0x5
1000471a:	6a 16                	push   0x16
1000471c:	e8 fc ff ff ff       	call   1000471d <firstRun(bool)+0x1dc8>	1000471d: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004721:	83 c4 20             	add    esp,0x20
10004724:	a1 00 00 00 00       	mov    eax,ds:0x0	10004725: R_386_32	term
10004729:	83 ec 04             	sub    esp,0x4
1000472c:	6a 08                	push   0x8
1000472e:	6a 18                	push   0x18
10004730:	50                   	push   eax
10004731:	e8 fc ff ff ff       	call   10004732 <firstRun(bool)+0x1ddd>	10004732: R_386_PC32	VgaText::setCursor(int, int)
10004736:	83 c4 10             	add    esp,0x10
10004739:	a1 00 00 00 00       	mov    eax,ds:0x0	1000473a: R_386_32	term
1000473e:	83 ec 08             	sub    esp,0x8
10004741:	68 fc a8 00 10       	push   0x1000a8fc	10004742: R_386_32	.text
10004746:	50                   	push   eax
10004747:	e8 fc ff ff ff       	call   10004748 <firstRun(bool)+0x1df3>	10004748: R_386_PC32	VgaText::puts(char const*)
1000474c:	83 c4 10             	add    esp,0x10
1000474f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004750: R_386_32	term
10004754:	83 ec 04             	sub    esp,0x4
10004757:	6a 0a                	push   0xa
10004759:	6a 18                	push   0x18
1000475b:	50                   	push   eax
1000475c:	e8 fc ff ff ff       	call   1000475d <firstRun(bool)+0x1e08>	1000475d: R_386_PC32	VgaText::setCursor(int, int)
10004761:	83 c4 10             	add    esp,0x10
10004764:	a1 00 00 00 00       	mov    eax,ds:0x0	10004765: R_386_32	term
10004769:	83 ec 08             	sub    esp,0x8
1000476c:	68 24 a9 00 10       	push   0x1000a924	1000476d: R_386_32	.text
10004771:	50                   	push   eax
10004772:	e8 fc ff ff ff       	call   10004773 <firstRun(bool)+0x1e1e>	10004773: R_386_PC32	VgaText::puts(char const*)
10004777:	83 c4 10             	add    esp,0x10
1000477a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000477b: R_386_32	term
1000477f:	83 ec 04             	sub    esp,0x4
10004782:	6a 0b                	push   0xb
10004784:	6a 18                	push   0x18
10004786:	50                   	push   eax
10004787:	e8 fc ff ff ff       	call   10004788 <firstRun(bool)+0x1e33>	10004788: R_386_PC32	VgaText::setCursor(int, int)
1000478c:	83 c4 10             	add    esp,0x10
1000478f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004790: R_386_32	term
10004794:	83 ec 08             	sub    esp,0x8
10004797:	68 4d a9 00 10       	push   0x1000a94d	10004798: R_386_32	.text
1000479c:	50                   	push   eax
1000479d:	e8 fc ff ff ff       	call   1000479e <firstRun(bool)+0x1e49>	1000479e: R_386_PC32	VgaText::puts(char const*)
100047a2:	83 c4 10             	add    esp,0x10
100047a5:	a1 00 00 00 00       	mov    eax,ds:0x0	100047a6: R_386_32	term
100047aa:	83 ec 04             	sub    esp,0x4
100047ad:	6a 0e                	push   0xe
100047af:	6a 18                	push   0x18
100047b1:	50                   	push   eax
100047b2:	e8 fc ff ff ff       	call   100047b3 <firstRun(bool)+0x1e5e>	100047b3: R_386_PC32	VgaText::setCursor(int, int)
100047b7:	83 c4 10             	add    esp,0x10
100047ba:	a1 00 00 00 00       	mov    eax,ds:0x0	100047bb: R_386_32	term
100047bf:	83 ec 08             	sub    esp,0x8
100047c2:	68 5c a9 00 10       	push   0x1000a95c	100047c3: R_386_32	.text
100047c7:	50                   	push   eax
100047c8:	e8 fc ff ff ff       	call   100047c9 <firstRun(bool)+0x1e74>	100047c9: R_386_PC32	VgaText::puts(char const*)
100047cd:	83 c4 10             	add    esp,0x10
100047d0:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100047d2: R_386_32	installKey
100047d7:	a0 00 00 00 00       	mov    al,ds:0x0	100047d8: R_386_32	installKey
100047dc:	84 c0                	test   al,al
100047de:	0f 94 c0             	sete   al
100047e1:	84 c0                	test   al,al
100047e3:	74 02                	je     100047e7 <firstRun(bool)+0x1e92>
100047e5:	eb f0                	jmp    100047d7 <firstRun(bool)+0x1e82>
100047e7:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100047e9: R_386_32	installKey
100047ee:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100047f0: R_386_32	installKey
100047f5:	83 ec 0c             	sub    esp,0xc
100047f8:	68 84 03 00 00       	push   0x384
100047fd:	e8 fc ff ff ff       	call   100047fe <firstRun(bool)+0x1ea9>	100047fe: R_386_PC32	milliTenthSleep(unsigned int)
10004802:	83 c4 10             	add    esp,0x10
10004805:	e8 fc ff ff ff       	call   10004806 <firstRun(bool)+0x1eb1>	10004806: R_386_PC32	drawBootScreen()
1000480a:	83 ec 0c             	sub    esp,0xc
1000480d:	68 18 2e 00 00       	push   0x2e18
10004812:	e8 fc ff ff ff       	call   10004813 <firstRun(bool)+0x1ebe>	10004813: R_386_PC32	milliTenthSleep(unsigned int)
10004817:	83 c4 10             	add    esp,0x10
1000481a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004821:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004823: R_386_32	installKey
10004828:	e8 fc ff ff ff       	call   10004829 <firstRun(bool)+0x1ed4>	10004829: R_386_PC32	drawBootScreen()
1000482d:	83 ec 0c             	sub    esp,0xc
10004830:	68 86 a9 00 10       	push   0x1000a986	10004831: R_386_32	.text
10004835:	6a 0e                	push   0xe
10004837:	6a 32                	push   0x32
10004839:	6a 02                	push   0x2
1000483b:	6a 16                	push   0x16
1000483d:	e8 fc ff ff ff       	call   1000483e <firstRun(bool)+0x1ee9>	1000483e: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004842:	83 c4 20             	add    esp,0x20
10004845:	a1 00 00 00 00       	mov    eax,ds:0x0	10004846: R_386_32	term
1000484a:	83 ec 04             	sub    esp,0x4
1000484d:	6a 18                	push   0x18
1000484f:	6a 11                	push   0x11
10004851:	50                   	push   eax
10004852:	e8 fc ff ff ff       	call   10004853 <firstRun(bool)+0x1efe>	10004853: R_386_PC32	VgaText::setCursor(int, int)
10004857:	83 c4 10             	add    esp,0x10
1000485a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000485b: R_386_32	term
1000485f:	6a 0b                	push   0xb
10004861:	6a 03                	push   0x3
10004863:	68 16 a8 00 10       	push   0x1000a816	10004864: R_386_32	.text
10004868:	50                   	push   eax
10004869:	e8 fc ff ff ff       	call   1000486a <firstRun(bool)+0x1f15>	1000486a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000486e:	83 c4 10             	add    esp,0x10
10004871:	a1 00 00 00 00       	mov    eax,ds:0x0	10004872: R_386_32	term
10004876:	83 ec 04             	sub    esp,0x4
10004879:	6a 05                	push   0x5
1000487b:	6a 18                	push   0x18
1000487d:	50                   	push   eax
1000487e:	e8 fc ff ff ff       	call   1000487f <firstRun(bool)+0x1f2a>	1000487f: R_386_PC32	VgaText::setCursor(int, int)
10004883:	83 c4 10             	add    esp,0x10
10004886:	a1 00 00 00 00       	mov    eax,ds:0x0	10004887: R_386_32	term
1000488b:	83 ec 08             	sub    esp,0x8
1000488e:	68 94 a9 00 10       	push   0x1000a994	1000488f: R_386_32	.text
10004893:	50                   	push   eax
10004894:	e8 fc ff ff ff       	call   10004895 <firstRun(bool)+0x1f40>	10004895: R_386_PC32	VgaText::puts(char const*)
10004899:	83 c4 10             	add    esp,0x10
1000489c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000489d: R_386_32	term
100048a1:	83 ec 04             	sub    esp,0x4
100048a4:	6a 06                	push   0x6
100048a6:	6a 18                	push   0x18
100048a8:	50                   	push   eax
100048a9:	e8 fc ff ff ff       	call   100048aa <firstRun(bool)+0x1f55>	100048aa: R_386_PC32	VgaText::setCursor(int, int)
100048ae:	83 c4 10             	add    esp,0x10
100048b1:	a1 00 00 00 00       	mov    eax,ds:0x0	100048b2: R_386_32	term
100048b6:	83 ec 08             	sub    esp,0x8
100048b9:	68 ec a7 00 10       	push   0x1000a7ec	100048ba: R_386_32	.text
100048be:	50                   	push   eax
100048bf:	e8 fc ff ff ff       	call   100048c0 <firstRun(bool)+0x1f6b>	100048c0: R_386_PC32	VgaText::puts(char const*)
100048c4:	83 c4 10             	add    esp,0x10
100048c7:	c6 05 10 00 00 00 00 	mov    BYTE PTR ds:0x10,0x0	100048c9: R_386_32	pkeybuf
100048ce:	c6 05 11 00 00 00 00 	mov    BYTE PTR ds:0x11,0x0	100048d0: R_386_32	pkeybuf
100048d5:	a1 00 00 00 00       	mov    eax,ds:0x0	100048d6: R_386_32	term
100048da:	83 ec 04             	sub    esp,0x4
100048dd:	6a 08                	push   0x8
100048df:	6a 1c                	push   0x1c
100048e1:	50                   	push   eax
100048e2:	e8 fc ff ff ff       	call   100048e3 <firstRun(bool)+0x1f8e>	100048e3: R_386_PC32	VgaText::setCursor(int, int)
100048e7:	83 c4 10             	add    esp,0x10
100048ea:	a1 00 00 00 00       	mov    eax,ds:0x0	100048eb: R_386_32	term
100048ef:	83 ec 08             	sub    esp,0x8
100048f2:	68 00 00 00 00       	push   0x0	100048f3: R_386_32	pkeybuf
100048f7:	50                   	push   eax
100048f8:	e8 fc ff ff ff       	call   100048f9 <firstRun(bool)+0x1fa4>	100048f9: R_386_PC32	VgaText::puts(char const*)
100048fd:	83 c4 10             	add    esp,0x10
10004900:	a1 00 00 00 00       	mov    eax,ds:0x0	10004901: R_386_32	term
10004905:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004908:	83 c2 1c             	add    edx,0x1c
1000490b:	83 ec 04             	sub    esp,0x4
1000490e:	6a 08                	push   0x8
10004910:	52                   	push   edx
10004911:	50                   	push   eax
10004912:	e8 fc ff ff ff       	call   10004913 <firstRun(bool)+0x1fbe>	10004913: R_386_PC32	VgaText::setCursor(int, int)
10004917:	83 c4 10             	add    esp,0x10
1000491a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000491b: R_386_32	term
1000491f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004922:	81 c2 00 00 00 00    	add    edx,0x0	10004924: R_386_32	pkeybuf
10004928:	8a 12                	mov    dl,BYTE PTR [edx]
1000492a:	0f be d2             	movsx  edx,dl
1000492d:	6a 00                	push   0x0
1000492f:	6a 0f                	push   0xf
10004931:	52                   	push   edx
10004932:	50                   	push   eax
10004933:	e8 fc ff ff ff       	call   10004934 <firstRun(bool)+0x1fdf>	10004934: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004938:	83 c4 10             	add    esp,0x10
1000493b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000493c: R_386_32	term
10004940:	83 ec 04             	sub    esp,0x4
10004943:	6a 08                	push   0x8
10004945:	6a 2c                	push   0x2c
10004947:	50                   	push   eax
10004948:	e8 fc ff ff ff       	call   10004949 <firstRun(bool)+0x1ff4>	10004949: R_386_PC32	VgaText::setCursor(int, int)
1000494d:	83 c4 10             	add    esp,0x10
10004950:	a1 00 00 00 00       	mov    eax,ds:0x0	10004951: R_386_32	term
10004955:	6a 0f                	push   0xf
10004957:	6a 0f                	push   0xf
10004959:	6a 20                	push   0x20
1000495b:	50                   	push   eax
1000495c:	e8 fc ff ff ff       	call   1000495d <firstRun(bool)+0x2008>	1000495d: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004961:	83 c4 10             	add    esp,0x10
10004964:	a1 00 00 00 00       	mov    eax,ds:0x0	10004965: R_386_32	term
10004969:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000496c:	83 c2 1c             	add    edx,0x1c
1000496f:	83 ec 04             	sub    esp,0x4
10004972:	6a 08                	push   0x8
10004974:	52                   	push   edx
10004975:	50                   	push   eax
10004976:	e8 fc ff ff ff       	call   10004977 <firstRun(bool)+0x2022>	10004977: R_386_PC32	VgaText::setCursor(int, int)
1000497b:	83 c4 10             	add    esp,0x10
1000497e:	a0 00 00 00 00       	mov    al,ds:0x0	1000497f: R_386_32	installKey
10004983:	84 c0                	test   al,al
10004985:	0f 94 c0             	sete   al
10004988:	84 c0                	test   al,al
1000498a:	74 02                	je     1000498e <firstRun(bool)+0x2039>
1000498c:	eb f0                	jmp    1000497e <firstRun(bool)+0x2029>
1000498e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000498f: R_386_32	term
10004993:	05 82 00 00 00       	add    eax,0x82
10004998:	83 ec 04             	sub    esp,0x4
1000499b:	6a 10                	push   0x10
1000499d:	6a 00                	push   0x0
1000499f:	50                   	push   eax
100049a0:	e8 fc ff ff ff       	call   100049a1 <firstRun(bool)+0x204c>	100049a1: R_386_PC32	memset
100049a5:	83 c4 10             	add    esp,0x10
100049a8:	a1 00 00 00 00       	mov    eax,ds:0x0	100049a9: R_386_32	term
100049ad:	05 02 01 00 00       	add    eax,0x102
100049b2:	83 ec 04             	sub    esp,0x4
100049b5:	6a 10                	push   0x10
100049b7:	6a 00                	push   0x0
100049b9:	50                   	push   eax
100049ba:	e8 fc ff ff ff       	call   100049bb <firstRun(bool)+0x2066>	100049bb: R_386_PC32	memset
100049bf:	83 c4 10             	add    esp,0x10
100049c2:	a0 00 00 00 00       	mov    al,ds:0x0	100049c3: R_386_32	installKey
100049c7:	3c 03                	cmp    al,0x3
100049c9:	74 09                	je     100049d4 <firstRun(bool)+0x207f>
100049cb:	a0 00 00 00 00       	mov    al,ds:0x0	100049cc: R_386_32	installKey
100049d0:	3c 08                	cmp    al,0x8
100049d2:	75 04                	jne    100049d8 <firstRun(bool)+0x2083>
100049d4:	b0 01                	mov    al,0x1
100049d6:	eb 02                	jmp    100049da <firstRun(bool)+0x2085>
100049d8:	b0 00                	mov    al,0x0
100049da:	84 c0                	test   al,al
100049dc:	74 31                	je     10004a0f <firstRun(bool)+0x20ba>
100049de:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
100049e1:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
100049e5:	75 14                	jne    100049fb <firstRun(bool)+0x20a6>
100049e7:	83 ec 0c             	sub    esp,0xc
100049ea:	68 00 00 00 00       	push   0x0	100049eb: R_386_32	pkeybuf
100049ef:	e8 fc ff ff ff       	call   100049f0 <firstRun(bool)+0x209b>	100049f0: R_386_PC32	strlen
100049f4:	83 c4 10             	add    esp,0x10
100049f7:	48                   	dec    eax
100049f8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100049fb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100049fe:	05 00 00 00 00       	add    eax,0x0	100049ff: R_386_32	pkeybuf
10004a03:	8a 00                	mov    al,BYTE PTR [eax]
10004a05:	3c 2d                	cmp    al,0x2d
10004a07:	0f 85 6f 03 00 00    	jne    10004d7c <firstRun(bool)+0x2427>
10004a0d:	eb cf                	jmp    100049de <firstRun(bool)+0x2089>
10004a0f:	a0 00 00 00 00       	mov    al,ds:0x0	10004a10: R_386_32	installKey
10004a14:	3c 2f                	cmp    al,0x2f
10004a16:	7e 09                	jle    10004a21 <firstRun(bool)+0x20cc>
10004a18:	a0 00 00 00 00       	mov    al,ds:0x0	10004a19: R_386_32	installKey
10004a1d:	3c 39                	cmp    al,0x39
10004a1f:	7e 36                	jle    10004a57 <firstRun(bool)+0x2102>
10004a21:	a0 00 00 00 00       	mov    al,ds:0x0	10004a22: R_386_32	installKey
10004a26:	3c 40                	cmp    al,0x40
10004a28:	7e 09                	jle    10004a33 <firstRun(bool)+0x20de>
10004a2a:	a0 00 00 00 00       	mov    al,ds:0x0	10004a2b: R_386_32	installKey
10004a2f:	3c 5a                	cmp    al,0x5a
10004a31:	7e 24                	jle    10004a57 <firstRun(bool)+0x2102>
10004a33:	a0 00 00 00 00       	mov    al,ds:0x0	10004a34: R_386_32	installKey
10004a38:	3c 60                	cmp    al,0x60
10004a3a:	7e 09                	jle    10004a45 <firstRun(bool)+0x20f0>
10004a3c:	a0 00 00 00 00       	mov    al,ds:0x0	10004a3d: R_386_32	installKey
10004a41:	3c 7a                	cmp    al,0x7a
10004a43:	7e 12                	jle    10004a57 <firstRun(bool)+0x2102>
10004a45:	a0 00 00 00 00       	mov    al,ds:0x0	10004a46: R_386_32	installKey
10004a4a:	3c 20                	cmp    al,0x20
10004a4c:	74 09                	je     10004a57 <firstRun(bool)+0x2102>
10004a4e:	a0 00 00 00 00       	mov    al,ds:0x0	10004a4f: R_386_32	installKey
10004a53:	3c 04                	cmp    al,0x4
10004a55:	75 04                	jne    10004a5b <firstRun(bool)+0x2106>
10004a57:	b0 01                	mov    al,0x1
10004a59:	eb 02                	jmp    10004a5d <firstRun(bool)+0x2108>
10004a5b:	b0 00                	mov    al,0x0
10004a5d:	84 c0                	test   al,al
10004a5f:	0f 84 a3 00 00 00    	je     10004b08 <firstRun(bool)+0x21b3>
10004a65:	a0 00 00 00 00       	mov    al,ds:0x0	10004a66: R_386_32	installKey
10004a6a:	3c 2f                	cmp    al,0x2f
10004a6c:	7e 09                	jle    10004a77 <firstRun(bool)+0x2122>
10004a6e:	a0 00 00 00 00       	mov    al,ds:0x0	10004a6f: R_386_32	installKey
10004a73:	3c 39                	cmp    al,0x39
10004a75:	7e 24                	jle    10004a9b <firstRun(bool)+0x2146>
10004a77:	a0 00 00 00 00       	mov    al,ds:0x0	10004a78: R_386_32	installKey
10004a7c:	3c 40                	cmp    al,0x40
10004a7e:	7e 09                	jle    10004a89 <firstRun(bool)+0x2134>
10004a80:	a0 00 00 00 00       	mov    al,ds:0x0	10004a81: R_386_32	installKey
10004a85:	3c 5a                	cmp    al,0x5a
10004a87:	7e 12                	jle    10004a9b <firstRun(bool)+0x2146>
10004a89:	a0 00 00 00 00       	mov    al,ds:0x0	10004a8a: R_386_32	installKey
10004a8e:	3c 60                	cmp    al,0x60
10004a90:	7e 0d                	jle    10004a9f <firstRun(bool)+0x214a>
10004a92:	a0 00 00 00 00       	mov    al,ds:0x0	10004a93: R_386_32	installKey
10004a97:	3c 7a                	cmp    al,0x7a
10004a99:	7f 04                	jg     10004a9f <firstRun(bool)+0x214a>
10004a9b:	b0 01                	mov    al,0x1
10004a9d:	eb 02                	jmp    10004aa1 <firstRun(bool)+0x214c>
10004a9f:	b0 00                	mov    al,0x0
10004aa1:	84 c0                	test   al,al
10004aa3:	74 2c                	je     10004ad1 <firstRun(bool)+0x217c>
10004aa5:	a0 00 00 00 00       	mov    al,ds:0x0	10004aa6: R_386_32	installKey
10004aaa:	3c 60                	cmp    al,0x60
10004aac:	7e 13                	jle    10004ac1 <firstRun(bool)+0x216c>
10004aae:	a0 00 00 00 00       	mov    al,ds:0x0	10004aaf: R_386_32	installKey
10004ab3:	3c 7a                	cmp    al,0x7a
10004ab5:	7f 0a                	jg     10004ac1 <firstRun(bool)+0x216c>
10004ab7:	a0 00 00 00 00       	mov    al,ds:0x0	10004ab8: R_386_32	installKey
10004abc:	83 e8 20             	sub    eax,0x20
10004abf:	eb 05                	jmp    10004ac6 <firstRun(bool)+0x2171>
10004ac1:	a0 00 00 00 00       	mov    al,ds:0x0	10004ac2: R_386_32	installKey
10004ac6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004ac9:	81 c2 00 00 00 00    	add    edx,0x0	10004acb: R_386_32	pkeybuf
10004acf:	88 02                	mov    BYTE PTR [edx],al
10004ad1:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10004ad4:	83 ec 0c             	sub    esp,0xc
10004ad7:	68 00 00 00 00       	push   0x0	10004ad8: R_386_32	pkeybuf
10004adc:	e8 fc ff ff ff       	call   10004add <firstRun(bool)+0x2188>	10004add: R_386_PC32	strlen
10004ae1:	83 c4 10             	add    esp,0x10
10004ae4:	89 c2                	mov    edx,eax
10004ae6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004ae9:	39 c2                	cmp    edx,eax
10004aeb:	77 07                	ja     10004af4 <firstRun(bool)+0x219f>
10004aed:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004af4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004af7:	05 00 00 00 00       	add    eax,0x0	10004af8: R_386_32	pkeybuf
10004afc:	8a 00                	mov    al,BYTE PTR [eax]
10004afe:	3c 2d                	cmp    al,0x2d
10004b00:	0f 85 76 02 00 00    	jne    10004d7c <firstRun(bool)+0x2427>
10004b06:	eb c9                	jmp    10004ad1 <firstRun(bool)+0x217c>
10004b08:	a0 00 00 00 00       	mov    al,ds:0x0	10004b09: R_386_32	installKey
10004b0d:	3c 1b                	cmp    al,0x1b
10004b0f:	0f 94 c0             	sete   al
10004b12:	84 c0                	test   al,al
10004b14:	0f 85 99 f9 ff ff    	jne    100044b3 <firstRun(bool)+0x1b5e>
10004b1a:	a0 00 00 00 00       	mov    al,ds:0x0	10004b1b: R_386_32	installKey
10004b1f:	3c 0a                	cmp    al,0xa
10004b21:	0f 94 c0             	sete   al
10004b24:	84 c0                	test   al,al
10004b26:	0f 84 50 02 00 00    	je     10004d7c <firstRun(bool)+0x2427>
10004b2c:	83 ec 0c             	sub    esp,0xc
10004b2f:	68 00 00 00 00       	push   0x0	10004b30: R_386_32	pkeybuf
10004b34:	e8 fc ff ff ff       	call   10004b35 <firstRun(bool)+0x21e0>	10004b35: R_386_PC32	checkExtendedKey(char*)
10004b39:	83 c4 10             	add    esp,0x10
10004b3c:	85 c0                	test   eax,eax
10004b3e:	0f 95 c0             	setne  al
10004b41:	88 45 87             	mov    BYTE PTR [ebp-0x79],al
10004b44:	80 7d 87 00          	cmp    BYTE PTR [ebp-0x79],0x0
10004b48:	74 5b                	je     10004ba5 <firstRun(bool)+0x2250>
10004b4a:	83 ec 0c             	sub    esp,0xc
10004b4d:	68 f0 0a 00 00       	push   0xaf0
10004b52:	e8 fc ff ff ff       	call   10004b53 <firstRun(bool)+0x21fe>	10004b53: R_386_PC32	milliTenthSleep(unsigned int)
10004b57:	83 c4 10             	add    esp,0x10
10004b5a:	e8 fc ff ff ff       	call   10004b5b <firstRun(bool)+0x2206>	10004b5b: R_386_PC32	drawBootScreen()
10004b5f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004b61: R_386_32	installKey
10004b66:	83 ec 0c             	sub    esp,0xc
10004b69:	68 84 03 00 00       	push   0x384
10004b6e:	e8 fc ff ff ff       	call   10004b6f <firstRun(bool)+0x221a>	10004b6f: R_386_PC32	milliTenthSleep(unsigned int)
10004b73:	83 c4 10             	add    esp,0x10
10004b76:	e8 fc ff ff ff       	call   10004b77 <firstRun(bool)+0x2222>	10004b77: R_386_PC32	drawBootScreen()
10004b7b:	83 ec 0c             	sub    esp,0xc
10004b7e:	68 c0 12 00 00       	push   0x12c0
10004b83:	e8 fc ff ff ff       	call   10004b84 <firstRun(bool)+0x222f>	10004b84: R_386_PC32	milliTenthSleep(unsigned int)
10004b88:	83 c4 10             	add    esp,0x10
10004b8b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004b8d: R_386_32	installKey
10004b92:	90                   	nop
10004b93:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10004b9a:	0f 84 e8 01 00 00    	je     10004d88 <firstRun(bool)+0x2433>
10004ba0:	e9 cf 02 00 00       	jmp    10004e74 <firstRun(bool)+0x251f>
10004ba5:	83 ec 0c             	sub    esp,0xc
10004ba8:	68 f0 0a 00 00       	push   0xaf0
10004bad:	e8 fc ff ff ff       	call   10004bae <firstRun(bool)+0x2259>	10004bae: R_386_PC32	milliTenthSleep(unsigned int)
10004bb2:	83 c4 10             	add    esp,0x10
10004bb5:	e8 fc ff ff ff       	call   10004bb6 <firstRun(bool)+0x2261>	10004bb6: R_386_PC32	drawBootScreen()
10004bba:	83 ec 08             	sub    esp,0x8
10004bbd:	6a 01                	push   0x1
10004bbf:	68 86 a9 00 10       	push   0x1000a986	10004bc0: R_386_32	.text
10004bc4:	6a 0e                	push   0xe
10004bc6:	6a 32                	push   0x32
10004bc8:	6a 02                	push   0x2
10004bca:	6a 16                	push   0x16
10004bcc:	e8 fc ff ff ff       	call   10004bcd <firstRun(bool)+0x2278>	10004bcd: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10004bd1:	83 c4 20             	add    esp,0x20
10004bd4:	a1 00 00 00 00       	mov    eax,ds:0x0	10004bd5: R_386_32	term
10004bd9:	83 ec 04             	sub    esp,0x4
10004bdc:	6a 05                	push   0x5
10004bde:	6a 18                	push   0x18
10004be0:	50                   	push   eax
10004be1:	e8 fc ff ff ff       	call   10004be2 <firstRun(bool)+0x228d>	10004be2: R_386_PC32	VgaText::setCursor(int, int)
10004be6:	83 c4 10             	add    esp,0x10
10004be9:	a1 00 00 00 00       	mov    eax,ds:0x0	10004bea: R_386_32	term
10004bee:	6a 07                	push   0x7
10004bf0:	6a 00                	push   0x0
10004bf2:	68 94 a9 00 10       	push   0x1000a994	10004bf3: R_386_32	.text
10004bf7:	50                   	push   eax
10004bf8:	e8 fc ff ff ff       	call   10004bf9 <firstRun(bool)+0x22a4>	10004bf9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004bfd:	83 c4 10             	add    esp,0x10
10004c00:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c01: R_386_32	term
10004c05:	83 ec 04             	sub    esp,0x4
10004c08:	6a 06                	push   0x6
10004c0a:	6a 18                	push   0x18
10004c0c:	50                   	push   eax
10004c0d:	e8 fc ff ff ff       	call   10004c0e <firstRun(bool)+0x22b9>	10004c0e: R_386_PC32	VgaText::setCursor(int, int)
10004c12:	83 c4 10             	add    esp,0x10
10004c15:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c16: R_386_32	term
10004c1a:	6a 07                	push   0x7
10004c1c:	6a 00                	push   0x0
10004c1e:	68 ec a7 00 10       	push   0x1000a7ec	10004c1f: R_386_32	.text
10004c23:	50                   	push   eax
10004c24:	e8 fc ff ff ff       	call   10004c25 <firstRun(bool)+0x22d0>	10004c25: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004c29:	83 c4 10             	add    esp,0x10
10004c2c:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c2d: R_386_32	term
10004c31:	83 ec 04             	sub    esp,0x4
10004c34:	6a 08                	push   0x8
10004c36:	6a 1c                	push   0x1c
10004c38:	50                   	push   eax
10004c39:	e8 fc ff ff ff       	call   10004c3a <firstRun(bool)+0x22e5>	10004c3a: R_386_PC32	VgaText::setCursor(int, int)
10004c3e:	83 c4 10             	add    esp,0x10
10004c41:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c42: R_386_32	term
10004c46:	6a 07                	push   0x7
10004c48:	6a 00                	push   0x0
10004c4a:	68 00 00 00 00       	push   0x0	10004c4b: R_386_32	pkeybuf
10004c4f:	50                   	push   eax
10004c50:	e8 fc ff ff ff       	call   10004c51 <firstRun(bool)+0x22fc>	10004c51: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004c55:	83 c4 10             	add    esp,0x10
10004c58:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c59: R_386_32	term
10004c5d:	83 ec 04             	sub    esp,0x4
10004c60:	6a 08                	push   0x8
10004c62:	6a 2c                	push   0x2c
10004c64:	50                   	push   eax
10004c65:	e8 fc ff ff ff       	call   10004c66 <firstRun(bool)+0x2311>	10004c66: R_386_PC32	VgaText::setCursor(int, int)
10004c6a:	83 c4 10             	add    esp,0x10
10004c6d:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c6e: R_386_32	term
10004c72:	6a 07                	push   0x7
10004c74:	6a 07                	push   0x7
10004c76:	6a 20                	push   0x20
10004c78:	50                   	push   eax
10004c79:	e8 fc ff ff ff       	call   10004c7a <firstRun(bool)+0x2325>	10004c7a: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004c7e:	83 c4 10             	add    esp,0x10
10004c81:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c82: R_386_32	term
10004c86:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004c89:	83 c2 1c             	add    edx,0x1c
10004c8c:	83 ec 04             	sub    esp,0x4
10004c8f:	6a 08                	push   0x8
10004c91:	52                   	push   edx
10004c92:	50                   	push   eax
10004c93:	e8 fc ff ff ff       	call   10004c94 <firstRun(bool)+0x233f>	10004c94: R_386_PC32	VgaText::setCursor(int, int)
10004c98:	83 c4 10             	add    esp,0x10
10004c9b:	83 ec 0c             	sub    esp,0xc
10004c9e:	68 e5 a8 00 10       	push   0x1000a8e5	10004c9f: R_386_32	.text
10004ca3:	6a 0b                	push   0xb
10004ca5:	6a 2b                	push   0x2b
10004ca7:	6a 0a                	push   0xa
10004ca9:	6a 22                	push   0x22
10004cab:	e8 fc ff ff ff       	call   10004cac <firstRun(bool)+0x2357>	10004cac: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004cb0:	83 c4 20             	add    esp,0x20
10004cb3:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cb4: R_386_32	term
10004cb8:	83 ec 04             	sub    esp,0x4
10004cbb:	6a 0d                	push   0xd
10004cbd:	6a 24                	push   0x24
10004cbf:	50                   	push   eax
10004cc0:	e8 fc ff ff ff       	call   10004cc1 <firstRun(bool)+0x236c>	10004cc1: R_386_PC32	VgaText::setCursor(int, int)
10004cc5:	83 c4 10             	add    esp,0x10
10004cc8:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cc9: R_386_32	term
10004ccd:	83 ec 08             	sub    esp,0x8
10004cd0:	68 bc a9 00 10       	push   0x1000a9bc	10004cd1: R_386_32	.text
10004cd5:	50                   	push   eax
10004cd6:	e8 fc ff ff ff       	call   10004cd7 <firstRun(bool)+0x2382>	10004cd7: R_386_PC32	VgaText::puts(char const*)
10004cdb:	83 c4 10             	add    esp,0x10
10004cde:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cdf: R_386_32	term
10004ce3:	83 ec 04             	sub    esp,0x4
10004ce6:	6a 0f                	push   0xf
10004ce8:	6a 24                	push   0x24
10004cea:	50                   	push   eax
10004ceb:	e8 fc ff ff ff       	call   10004cec <firstRun(bool)+0x2397>	10004cec: R_386_PC32	VgaText::setCursor(int, int)
10004cf0:	83 c4 10             	add    esp,0x10
10004cf3:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cf4: R_386_32	term
10004cf8:	83 ec 08             	sub    esp,0x8
10004cfb:	68 e4 a9 00 10       	push   0x1000a9e4	10004cfc: R_386_32	.text
10004d00:	50                   	push   eax
10004d01:	e8 fc ff ff ff       	call   10004d02 <firstRun(bool)+0x23ad>	10004d02: R_386_PC32	VgaText::puts(char const*)
10004d06:	83 c4 10             	add    esp,0x10
10004d09:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d0a: R_386_32	term
10004d0e:	83 ec 04             	sub    esp,0x4
10004d11:	6a 10                	push   0x10
10004d13:	6a 24                	push   0x24
10004d15:	50                   	push   eax
10004d16:	e8 fc ff ff ff       	call   10004d17 <firstRun(bool)+0x23c2>	10004d17: R_386_PC32	VgaText::setCursor(int, int)
10004d1b:	83 c4 10             	add    esp,0x10
10004d1e:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d1f: R_386_32	term
10004d23:	83 ec 08             	sub    esp,0x8
10004d26:	68 08 aa 00 10       	push   0x1000aa08	10004d27: R_386_32	.text
10004d2b:	50                   	push   eax
10004d2c:	e8 fc ff ff ff       	call   10004d2d <firstRun(bool)+0x23d8>	10004d2d: R_386_PC32	VgaText::puts(char const*)
10004d31:	83 c4 10             	add    esp,0x10
10004d34:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004d36: R_386_32	installKey
10004d3b:	83 ec 0c             	sub    esp,0xc
10004d3e:	68 94 11 00 00       	push   0x1194
10004d43:	e8 fc ff ff ff       	call   10004d44 <firstRun(bool)+0x23ef>	10004d44: R_386_PC32	milliTenthSleep(unsigned int)
10004d48:	83 c4 10             	add    esp,0x10
10004d4b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004d4d: R_386_32	installKey
10004d52:	a0 00 00 00 00       	mov    al,ds:0x0	10004d53: R_386_32	installKey
10004d57:	84 c0                	test   al,al
10004d59:	0f 94 c0             	sete   al
10004d5c:	84 c0                	test   al,al
10004d5e:	74 02                	je     10004d62 <firstRun(bool)+0x240d>
10004d60:	eb f0                	jmp    10004d52 <firstRun(bool)+0x23fd>
10004d62:	e8 fc ff ff ff       	call   10004d63 <firstRun(bool)+0x240e>	10004d63: R_386_PC32	drawBootScreen()
10004d67:	83 ec 0c             	sub    esp,0xc
10004d6a:	68 9c 18 00 00       	push   0x189c
10004d6f:	e8 fc ff ff ff       	call   10004d70 <firstRun(bool)+0x241b>	10004d70: R_386_PC32	milliTenthSleep(unsigned int)
10004d74:	83 c4 10             	add    esp,0x10
10004d77:	e9 a5 fa ff ff       	jmp    10004821 <firstRun(bool)+0x1ecc>
10004d7c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004d7e: R_386_32	installKey
10004d83:	e9 3f fb ff ff       	jmp    100048c7 <firstRun(bool)+0x1f72>
10004d88:	e8 fc ff ff ff       	call   10004d89 <firstRun(bool)+0x2434>	10004d89: R_386_PC32	drawBootScreen()
10004d8d:	83 ec 0c             	sub    esp,0xc
10004d90:	68 29 aa 00 10       	push   0x1000aa29	10004d91: R_386_32	.text
10004d95:	6a 0d                	push   0xd
10004d97:	6a 32                	push   0x32
10004d99:	6a 05                	push   0x5
10004d9b:	6a 16                	push   0x16
10004d9d:	e8 fc ff ff ff       	call   10004d9e <firstRun(bool)+0x2449>	10004d9e: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004da2:	83 c4 20             	add    esp,0x20
10004da5:	83 ec 0c             	sub    esp,0xc
10004da8:	6a 00                	push   0x0
10004daa:	e8 fc ff ff ff       	call   10004dab <firstRun(bool)+0x2456>	10004dab: R_386_PC32	bootInstallTasks(int)
10004daf:	83 c4 10             	add    esp,0x10
10004db2:	83 ec 0c             	sub    esp,0xc
10004db5:	68 44 aa 00 10       	push   0x1000aa44	10004db6: R_386_32	.text
10004dba:	e8 fc ff ff ff       	call   10004dbb <firstRun(bool)+0x2466>	10004dbb: R_386_PC32	Dbg::kprintf(char const*, ...)
10004dbf:	83 c4 10             	add    esp,0x10
10004dc2:	c7 45 80 0c 00 00 00 	mov    DWORD PTR [ebp-0x80],0xc
10004dc9:	83 ec 0c             	sub    esp,0xc
10004dcc:	ff 75 80             	push   DWORD PTR [ebp-0x80]
10004dcf:	e8 fc ff ff ff       	call   10004dd0 <firstRun(bool)+0x247b>	10004dd0: R_386_PC32	Virt::setupPageSwapping(int)
10004dd4:	83 c4 10             	add    esp,0x10
10004dd7:	83 ec 0c             	sub    esp,0xc
10004dda:	6a 01                	push   0x1
10004ddc:	e8 fc ff ff ff       	call   10004ddd <firstRun(bool)+0x2488>	10004ddd: R_386_PC32	bootInstallTasks(int)
10004de1:	83 c4 10             	add    esp,0x10
10004de4:	83 ec 0c             	sub    esp,0xc
10004de7:	68 64 aa 00 10       	push   0x1000aa64	10004de8: R_386_32	.text
10004dec:	e8 fc ff ff ff       	call   10004ded <firstRun(bool)+0x2498>	10004ded: R_386_PC32	rmtree(char*)
10004df1:	83 c4 10             	add    esp,0x10
10004df4:	83 ec 0c             	sub    esp,0xc
10004df7:	68 7e aa 00 10       	push   0x1000aa7e	10004df8: R_386_32	.text
10004dfc:	e8 fc ff ff ff       	call   10004dfd <firstRun(bool)+0x24a8>	10004dfd: R_386_PC32	rmtree(char*)
10004e01:	83 c4 10             	add    esp,0x10
10004e04:	83 ec 08             	sub    esp,0x8
10004e07:	68 c0 01 00 00       	push   0x1c0
10004e0c:	68 64 aa 00 10       	push   0x1000aa64	10004e0d: R_386_32	.text
10004e11:	e8 fc ff ff ff       	call   10004e12 <firstRun(bool)+0x24bd>	10004e12: R_386_PC32	mkdir(char const*, int)
10004e16:	83 c4 10             	add    esp,0x10
10004e19:	83 ec 08             	sub    esp,0x8
10004e1c:	68 c0 01 00 00       	push   0x1c0
10004e21:	68 7e aa 00 10       	push   0x1000aa7e	10004e22: R_386_32	.text
10004e26:	e8 fc ff ff ff       	call   10004e27 <firstRun(bool)+0x24d2>	10004e27: R_386_PC32	mkdir(char const*, int)
10004e2b:	83 c4 10             	add    esp,0x10
10004e2e:	83 ec 08             	sub    esp,0x8
10004e31:	68 64 aa 00 10       	push   0x1000aa64	10004e32: R_386_32	.text
10004e36:	68 98 aa 00 10       	push   0x1000aa98	10004e37: R_386_32	.text
10004e3b:	e8 fc ff ff ff       	call   10004e3c <firstRun(bool)+0x24e7>	10004e3c: R_386_PC32	copytree(char*, char*)
10004e40:	83 c4 10             	add    esp,0x10
10004e43:	83 ec 0c             	sub    esp,0xc
10004e46:	6a 02                	push   0x2
10004e48:	e8 fc ff ff ff       	call   10004e49 <firstRun(bool)+0x24f4>	10004e49: R_386_PC32	bootInstallTasks(int)
10004e4d:	83 c4 10             	add    esp,0x10
10004e50:	83 ec 0c             	sub    esp,0xc
10004e53:	68 00 00 00 00       	push   0x0	10004e54: R_386_32	currName
10004e58:	e8 fc ff ff ff       	call   10004e59 <firstRun(bool)+0x2504>	10004e59: R_386_PC32	createUser(char const*)
10004e5d:	83 c4 10             	add    esp,0x10
10004e60:	83 ec 0c             	sub    esp,0xc
10004e63:	6a 03                	push   0x3
10004e65:	e8 fc ff ff ff       	call   10004e66 <firstRun(bool)+0x2511>	10004e66: R_386_PC32	bootInstallTasks(int)
10004e6a:	83 c4 10             	add    esp,0x10
10004e6d:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10004e6f: R_386_32	VgaText::hiddenOut
10004e74:	8d 65 f4             	lea    esp,[ebp-0xc]
10004e77:	5b                   	pop    ebx
10004e78:	5e                   	pop    esi
10004e79:	5f                   	pop    edi
10004e7a:	5d                   	pop    ebp
10004e7b:	c3                   	ret    

10004e7c <loadExtensions()>:
10004e7c:	55                   	push   ebp
10004e7d:	89 e5                	mov    ebp,esp
10004e7f:	83 ec 08             	sub    esp,0x8
10004e82:	83 ec 0c             	sub    esp,0xc
10004e85:	68 40 ab 00 10       	push   0x1000ab40	10004e86: R_386_32	.text
10004e8a:	e8 fc ff ff ff       	call   10004e8b <loadExtensions()+0xf>	10004e8b: R_386_PC32	KeSetBootMessage(char const*)
10004e8f:	83 c4 10             	add    esp,0x10
10004e92:	90                   	nop
10004e93:	c9                   	leave  
10004e94:	c3                   	ret    

10004e95 <rgtree(Reghive_Tag*, int, int)>:
10004e95:	55                   	push   ebp
10004e96:	89 e5                	mov    ebp,esp
10004e98:	53                   	push   ebx
10004e99:	83 ec 44             	sub    esp,0x44
10004e9c:	83 7d 0c 01          	cmp    DWORD PTR [ebp+0xc],0x1
10004ea0:	75 16                	jne    10004eb8 <rgtree(Reghive_Tag*, int, int)+0x23>
10004ea2:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10004ea6:	75 10                	jne    10004eb8 <rgtree(Reghive_Tag*, int, int)+0x23>
10004ea8:	83 ec 0c             	sub    esp,0xc
10004eab:	68 56 ab 00 10       	push   0x1000ab56	10004eac: R_386_32	.text
10004eb0:	e8 fc ff ff ff       	call   10004eb1 <rgtree(Reghive_Tag*, int, int)+0x1c>	10004eb1: R_386_PC32	Dbg::kprintf(char const*, ...)
10004eb5:	83 c4 10             	add    esp,0x10
10004eb8:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
10004ebc:	0f 8e a9 00 00 00    	jle    10004f6b <rgtree(Reghive_Tag*, int, int)+0xd6>
10004ec2:	83 ec 04             	sub    esp,0x4
10004ec5:	6a 32                	push   0x32
10004ec7:	6a 00                	push   0x0
10004ec9:	8d 45 be             	lea    eax,[ebp-0x42]
10004ecc:	50                   	push   eax
10004ecd:	e8 fc ff ff ff       	call   10004ece <rgtree(Reghive_Tag*, int, int)+0x39>	10004ece: R_386_PC32	memset
10004ed2:	83 c4 10             	add    esp,0x10
10004ed5:	83 ec 04             	sub    esp,0x4
10004ed8:	8d 45 be             	lea    eax,[ebp-0x42]
10004edb:	50                   	push   eax
10004edc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004edf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004ee2:	e8 fc ff ff ff       	call   10004ee3 <rgtree(Reghive_Tag*, int, int)+0x4e>	10004ee3: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
10004ee7:	83 c4 10             	add    esp,0x10
10004eea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10004eed:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10004ef4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10004ef7:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10004efa:	7d 15                	jge    10004f11 <rgtree(Reghive_Tag*, int, int)+0x7c>
10004efc:	83 ec 0c             	sub    esp,0xc
10004eff:	68 2f a6 00 10       	push   0x1000a62f	10004f00: R_386_32	.text
10004f04:	e8 fc ff ff ff       	call   10004f05 <rgtree(Reghive_Tag*, int, int)+0x70>	10004f05: R_386_PC32	Dbg::kprintf(char const*, ...)
10004f09:	83 c4 10             	add    esp,0x10
10004f0c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10004f0f:	eb e3                	jmp    10004ef4 <rgtree(Reghive_Tag*, int, int)+0x5f>
10004f11:	83 ec 08             	sub    esp,0x8
10004f14:	8d 45 be             	lea    eax,[ebp-0x42]
10004f17:	50                   	push   eax
10004f18:	68 5b ab 00 10       	push   0x1000ab5b	10004f19: R_386_32	.text
10004f1d:	e8 fc ff ff ff       	call   10004f1e <rgtree(Reghive_Tag*, int, int)+0x89>	10004f1e: R_386_PC32	Dbg::kprintf(char const*, ...)
10004f22:	83 c4 10             	add    esp,0x10
10004f25:	83 7d f0 4e          	cmp    DWORD PTR [ebp-0x10],0x4e
10004f29:	75 27                	jne    10004f52 <rgtree(Reghive_Tag*, int, int)+0xbd>
10004f2b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10004f2e:	8d 58 04             	lea    ebx,[eax+0x4]
10004f31:	83 ec 08             	sub    esp,0x8
10004f34:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004f37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004f3a:	e8 fc ff ff ff       	call   10004f3b <rgtree(Reghive_Tag*, int, int)+0xa6>	10004f3b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004f3f:	83 c4 10             	add    esp,0x10
10004f42:	83 ec 04             	sub    esp,0x4
10004f45:	53                   	push   ebx
10004f46:	50                   	push   eax
10004f47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004f4a:	e8 fc ff ff ff       	call   10004f4b <rgtree(Reghive_Tag*, int, int)+0xb6>	10004f4b: R_386_PC32	rgtree(Reghive_Tag*, int, int)
10004f4f:	83 c4 10             	add    esp,0x10
10004f52:	83 ec 08             	sub    esp,0x8
10004f55:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004f58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004f5b:	e8 fc ff ff ff       	call   10004f5c <rgtree(Reghive_Tag*, int, int)+0xc7>	10004f5c: R_386_PC32	CmGetNext(Reghive_Tag*, int)
10004f60:	83 c4 10             	add    esp,0x10
10004f63:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10004f66:	e9 4d ff ff ff       	jmp    10004eb8 <rgtree(Reghive_Tag*, int, int)+0x23>
10004f6b:	90                   	nop
10004f6c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10004f6f:	c9                   	leave  
10004f70:	c3                   	ret    

10004f71 <getRegsafeName(char*, char*)>:
10004f71:	55                   	push   ebp
10004f72:	89 e5                	mov    ebp,esp
10004f74:	83 ec 10             	sub    esp,0x10
10004f77:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004f7a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004f7d:	e8 fc ff ff ff       	call   10004f7e <getRegsafeName(char*, char*)+0xd>	10004f7e: R_386_PC32	strcpy
10004f82:	83 c4 08             	add    esp,0x8
10004f85:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10004f8c:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10004f8f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004f92:	01 d0                	add    eax,edx
10004f94:	8a 00                	mov    al,BYTE PTR [eax]
10004f96:	84 c0                	test   al,al
10004f98:	74 6e                	je     10005008 <getRegsafeName(char*, char*)+0x97>
10004f9a:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10004f9d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004fa0:	01 d0                	add    eax,edx
10004fa2:	8a 00                	mov    al,BYTE PTR [eax]
10004fa4:	3c 60                	cmp    al,0x60
10004fa6:	7e 42                	jle    10004fea <getRegsafeName(char*, char*)+0x79>
10004fa8:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10004fab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004fae:	01 d0                	add    eax,edx
10004fb0:	8a 00                	mov    al,BYTE PTR [eax]
10004fb2:	3c 7a                	cmp    al,0x7a
10004fb4:	7f 34                	jg     10004fea <getRegsafeName(char*, char*)+0x79>
10004fb6:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10004fb9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004fbc:	01 d0                	add    eax,edx
10004fbe:	8a 00                	mov    al,BYTE PTR [eax]
10004fc0:	8d 48 9f             	lea    ecx,[eax-0x61]
10004fc3:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10004fc6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004fc9:	01 d0                	add    eax,edx
10004fcb:	88 ca                	mov    dl,cl
10004fcd:	88 10                	mov    BYTE PTR [eax],dl
10004fcf:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10004fd2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004fd5:	01 d0                	add    eax,edx
10004fd7:	8a 00                	mov    al,BYTE PTR [eax]
10004fd9:	8d 48 41             	lea    ecx,[eax+0x41]
10004fdc:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10004fdf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004fe2:	01 d0                	add    eax,edx
10004fe4:	88 ca                	mov    dl,cl
10004fe6:	88 10                	mov    BYTE PTR [eax],dl
10004fe8:	eb 19                	jmp    10005003 <getRegsafeName(char*, char*)+0x92>
10004fea:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10004fed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004ff0:	01 d0                	add    eax,edx
10004ff2:	8a 00                	mov    al,BYTE PTR [eax]
10004ff4:	3c 20                	cmp    al,0x20
10004ff6:	75 0b                	jne    10005003 <getRegsafeName(char*, char*)+0x92>
10004ff8:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10004ffb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004ffe:	01 d0                	add    eax,edx
10005000:	c6 00 5f             	mov    BYTE PTR [eax],0x5f
10005003:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10005006:	eb 84                	jmp    10004f8c <getRegsafeName(char*, char*)+0x1b>
10005008:	90                   	nop
10005009:	c9                   	leave  
1000500a:	c3                   	ret    

1000500b <begin(void*)>:
1000500b:	55                   	push   ebp
1000500c:	89 e5                	mov    ebp,esp
1000500e:	57                   	push   edi
1000500f:	56                   	push   esi
10005010:	53                   	push   ebx
10005011:	81 ec 2c 06 00 00    	sub    esp,0x62c
10005017:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
1000501b:	83 ec 0c             	sub    esp,0xc
1000501e:	68 14 01 00 00       	push   0x114
10005023:	e8 fc ff ff ff       	call   10005024 <begin(void*)+0x19>	10005024: R_386_PC32	operator new(unsigned long)
10005028:	83 c4 10             	add    esp,0x10
1000502b:	89 c3                	mov    ebx,eax
1000502d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000502e: R_386_32	kernelProcess
10005032:	83 ec 04             	sub    esp,0x4
10005035:	50                   	push   eax
10005036:	68 60 ab 00 10       	push   0x1000ab60	10005037: R_386_32	.text
1000503b:	53                   	push   ebx
1000503c:	e8 fc ff ff ff       	call   1000503d <begin(void*)+0x32>	1000503d: R_386_PC32	File::File(char const*, Process*)
10005041:	83 c4 10             	add    esp,0x10
10005044:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
10005047:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
1000504b:	75 10                	jne    1000505d <begin(void*)+0x52>
1000504d:	83 ec 0c             	sub    esp,0xc
10005050:	68 7e ab 00 10       	push   0x1000ab7e	10005051: R_386_32	.text
10005055:	e8 fc ff ff ff       	call   10005056 <begin(void*)+0x4b>	10005056: R_386_PC32	KePanic(char const*)
1000505a:	83 c4 10             	add    esp,0x10
1000505d:	83 ec 08             	sub    esp,0x8
10005060:	6a 01                	push   0x1
10005062:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
10005065:	e8 fc ff ff ff       	call   10005066 <begin(void*)+0x5b>	10005066: R_386_PC32	File::open(FileOpenMode)
1000506a:	83 c4 10             	add    esp,0x10
1000506d:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10005070:	83 7d b4 00          	cmp    DWORD PTR [ebp-0x4c],0x0
10005074:	75 10                	jne    10005086 <begin(void*)+0x7b>
10005076:	83 ec 0c             	sub    esp,0xc
10005079:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
1000507c:	e8 fc ff ff ff       	call   1000507d <begin(void*)+0x72>	1000507d: R_386_PC32	File::close()
10005081:	83 c4 10             	add    esp,0x10
10005084:	eb 04                	jmp    1000508a <begin(void*)+0x7f>
10005086:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
1000508a:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
1000508e:	74 15                	je     100050a5 <begin(void*)+0x9a>
10005090:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10005093:	8b 00                	mov    eax,DWORD PTR [eax]
10005095:	83 c0 08             	add    eax,0x8
10005098:	8b 00                	mov    eax,DWORD PTR [eax]
1000509a:	83 ec 0c             	sub    esp,0xc
1000509d:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
100050a0:	ff d0                	call   eax
100050a2:	83 c4 10             	add    esp,0x10
100050a5:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100050a7: R_386_32	KeIsPreemptionOn
100050ac:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
100050b0:	74 0f                	je     100050c1 <begin(void*)+0xb6>
100050b2:	83 ec 0c             	sub    esp,0xc
100050b5:	6a 00                	push   0x0
100050b7:	e8 fc ff ff ff       	call   100050b8 <begin(void*)+0xad>	100050b8: R_386_PC32	firstRun(bool)
100050bc:	83 c4 10             	add    esp,0x10
100050bf:	eb 05                	jmp    100050c6 <begin(void*)+0xbb>
100050c1:	e8 fc ff ff ff       	call   100050c2 <begin(void*)+0xb7>	100050c2: R_386_PC32	loadExtensions()
100050c6:	8d 45 8c             	lea    eax,[ebp-0x74]
100050c9:	bb a4 b1 00 10       	mov    ebx,0x1000b1a4	100050ca: R_386_32	.text
100050ce:	ba 04 00 00 00       	mov    edx,0x4
100050d3:	89 c7                	mov    edi,eax
100050d5:	89 de                	mov    esi,ebx
100050d7:	89 d1                	mov    ecx,edx
100050d9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100050db:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
100050df:	0f 84 44 13 00 00    	je     10006429 <begin(void*)+0x141e>
100050e5:	83 ec 0c             	sub    esp,0xc
100050e8:	68 24 07 00 00       	push   0x724
100050ed:	e8 fc ff ff ff       	call   100050ee <begin(void*)+0xe3>	100050ee: R_386_PC32	operator new(unsigned long)
100050f2:	83 c4 10             	add    esp,0x10
100050f5:	89 c3                	mov    ebx,eax
100050f7:	8d 45 8c             	lea    eax,[ebp-0x74]
100050fa:	50                   	push   eax
100050fb:	6a 00                	push   0x0
100050fd:	68 8e ab 00 10       	push   0x1000ab8e	100050fe: R_386_32	.text
10005102:	53                   	push   ebx
10005103:	e8 fc ff ff ff       	call   10005104 <begin(void*)+0xf9>	10005104: R_386_PC32	Process::Process(char const*, Process*, char**)
10005108:	83 c4 10             	add    esp,0x10
1000510b:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
1000510e:	83 ec 0c             	sub    esp,0xc
10005111:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
10005114:	e8 fc ff ff ff       	call   10005115 <begin(void*)+0x10a>	10005115: R_386_PC32	Process::createUserThread()
10005119:	83 c4 10             	add    esp,0x10
1000511c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000511e: R_386_32	VgaText::hiddenOut
10005123:	a1 00 00 00 00       	mov    eax,ds:0x0	10005124: R_386_32	term
10005128:	83 ec 0c             	sub    esp,0xc
1000512b:	50                   	push   eax
1000512c:	e8 fc ff ff ff       	call   1000512d <begin(void*)+0x122>	1000512d: R_386_PC32	setActiveTerminal(VgaText*)
10005131:	83 c4 10             	add    esp,0x10
10005134:	e8 fc ff ff ff       	call   10005135 <begin(void*)+0x12a>	10005135: R_386_PC32	drawBootScreen()
10005139:	83 ec 0c             	sub    esp,0xc
1000513c:	68 29 aa 00 10       	push   0x1000aa29	1000513d: R_386_32	.text
10005141:	6a 0d                	push   0xd
10005143:	6a 32                	push   0x32
10005145:	6a 05                	push   0x5
10005147:	6a 16                	push   0x16
10005149:	e8 fc ff ff ff       	call   1000514a <begin(void*)+0x13f>	1000514a: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000514e:	83 c4 20             	add    esp,0x20
10005151:	83 ec 0c             	sub    esp,0xc
10005154:	6a 03                	push   0x3
10005156:	e8 fc ff ff ff       	call   10005157 <begin(void*)+0x14c>	10005157: R_386_PC32	bootInstallTasks(int)
1000515b:	83 c4 10             	add    esp,0x10
1000515e:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10005160: R_386_32	VgaText::hiddenOut
10005165:	83 ec 0c             	sub    esp,0xc
10005168:	68 14 01 00 00       	push   0x114
1000516d:	e8 fc ff ff ff       	call   1000516e <begin(void*)+0x163>	1000516e: R_386_PC32	operator new(unsigned long)
10005172:	83 c4 10             	add    esp,0x10
10005175:	89 c3                	mov    ebx,eax
10005177:	a1 00 00 00 00       	mov    eax,ds:0x0	10005178: R_386_32	kernelProcess
1000517c:	83 ec 04             	sub    esp,0x4
1000517f:	50                   	push   eax
10005180:	68 ab ab 00 10       	push   0x1000abab	10005181: R_386_32	.text
10005185:	53                   	push   ebx
10005186:	e8 fc ff ff ff       	call   10005187 <begin(void*)+0x17c>	10005187: R_386_PC32	File::File(char const*, Process*)
1000518b:	83 c4 10             	add    esp,0x10
1000518e:	89 5d ac             	mov    DWORD PTR [ebp-0x54],ebx
10005191:	83 ec 08             	sub    esp,0x8
10005194:	6a 01                	push   0x1
10005196:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10005199:	e8 fc ff ff ff       	call   1000519a <begin(void*)+0x18f>	1000519a: R_386_PC32	File::open(FileOpenMode)
1000519e:	83 c4 10             	add    esp,0x10
100051a1:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
100051a4:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
100051a8:	75 39                	jne    100051e3 <begin(void*)+0x1d8>
100051aa:	83 ec 0c             	sub    esp,0xc
100051ad:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
100051b0:	e8 fc ff ff ff       	call   100051b1 <begin(void*)+0x1a6>	100051b1: R_386_PC32	File::close()
100051b5:	83 c4 10             	add    esp,0x10
100051b8:	83 ec 0c             	sub    esp,0xc
100051bb:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
100051be:	e8 fc ff ff ff       	call   100051bf <begin(void*)+0x1b4>	100051bf: R_386_PC32	File::unlink()
100051c3:	83 c4 10             	add    esp,0x10
100051c6:	83 7d ac 00          	cmp    DWORD PTR [ebp-0x54],0x0
100051ca:	74 44                	je     10005210 <begin(void*)+0x205>
100051cc:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100051cf:	8b 00                	mov    eax,DWORD PTR [eax]
100051d1:	83 c0 08             	add    eax,0x8
100051d4:	8b 00                	mov    eax,DWORD PTR [eax]
100051d6:	83 ec 0c             	sub    esp,0xc
100051d9:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
100051dc:	ff d0                	call   eax
100051de:	83 c4 10             	add    esp,0x10
100051e1:	eb 2d                	jmp    10005210 <begin(void*)+0x205>
100051e3:	83 7d ac 00          	cmp    DWORD PTR [ebp-0x54],0x0
100051e7:	74 15                	je     100051fe <begin(void*)+0x1f3>
100051e9:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100051ec:	8b 00                	mov    eax,DWORD PTR [eax]
100051ee:	83 c0 08             	add    eax,0x8
100051f1:	8b 00                	mov    eax,DWORD PTR [eax]
100051f3:	83 ec 0c             	sub    esp,0xc
100051f6:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
100051f9:	ff d0                	call   eax
100051fb:	83 c4 10             	add    esp,0x10
100051fe:	83 ec 0c             	sub    esp,0xc
10005201:	6a 01                	push   0x1
10005203:	e8 fc ff ff ff       	call   10005204 <begin(void*)+0x1f9>	10005204: R_386_PC32	sleep(unsigned int)
10005208:	83 c4 10             	add    esp,0x10
1000520b:	e9 55 ff ff ff       	jmp    10005165 <begin(void*)+0x15a>
10005210:	90                   	nop
10005211:	83 ec 0c             	sub    esp,0xc
10005214:	6a 01                	push   0x1
10005216:	e8 fc ff ff ff       	call   10005217 <begin(void*)+0x20c>	10005217: R_386_PC32	sleep(unsigned int)
1000521b:	83 c4 10             	add    esp,0x10
1000521e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005220: R_386_32	VgaText::hiddenOut
10005225:	a1 00 00 00 00       	mov    eax,ds:0x0	10005226: R_386_32	term
1000522a:	83 ec 0c             	sub    esp,0xc
1000522d:	50                   	push   eax
1000522e:	e8 fc ff ff ff       	call   1000522f <begin(void*)+0x224>	1000522f: R_386_PC32	setActiveTerminal(VgaText*)
10005233:	83 c4 10             	add    esp,0x10
10005236:	e8 fc ff ff ff       	call   10005237 <begin(void*)+0x22c>	10005237: R_386_PC32	drawBootScreen()
1000523b:	83 ec 0c             	sub    esp,0xc
1000523e:	68 29 aa 00 10       	push   0x1000aa29	1000523f: R_386_32	.text
10005243:	6a 0d                	push   0xd
10005245:	6a 32                	push   0x32
10005247:	6a 05                	push   0x5
10005249:	6a 16                	push   0x16
1000524b:	e8 fc ff ff ff       	call   1000524c <begin(void*)+0x241>	1000524c: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005250:	83 c4 20             	add    esp,0x20
10005253:	83 ec 0c             	sub    esp,0xc
10005256:	6a 04                	push   0x4
10005258:	e8 fc ff ff ff       	call   10005259 <begin(void*)+0x24e>	10005259: R_386_PC32	bootInstallTasks(int)
1000525d:	83 c4 10             	add    esp,0x10
10005260:	83 ec 0c             	sub    esp,0xc
10005263:	6a 05                	push   0x5
10005265:	e8 fc ff ff ff       	call   10005266 <begin(void*)+0x25b>	10005266: R_386_PC32	bootInstallTasks(int)
1000526a:	83 c4 10             	add    esp,0x10
1000526d:	83 ec 0c             	sub    esp,0xc
10005270:	68 b8 ab 00 10       	push   0x1000abb8	10005271: R_386_32	.text
10005275:	e8 fc ff ff ff       	call   10005276 <begin(void*)+0x26b>	10005276: R_386_PC32	CmOpen(char const*)
1000527a:	83 c4 10             	add    esp,0x10
1000527d:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10005280:	83 ec 04             	sub    esp,0x4
10005283:	68 dd ab 00 10       	push   0x1000abdd	10005284: R_386_32	.text
10005288:	6a 00                	push   0x0
1000528a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000528d:	e8 fc ff ff ff       	call   1000528e <begin(void*)+0x283>	1000528e: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005292:	83 c4 10             	add    esp,0x10
10005295:	83 ec 08             	sub    esp,0x8
10005298:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
1000529e:	50                   	push   eax
1000529f:	68 00 00 00 00       	push   0x0	100052a0: R_386_32	currName
100052a4:	e8 fc ff ff ff       	call   100052a5 <begin(void*)+0x29a>	100052a5: R_386_PC32	getRegsafeName(char*, char*)
100052a9:	83 c4 10             	add    esp,0x10
100052ac:	83 ec 08             	sub    esp,0x8
100052af:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
100052b5:	50                   	push   eax
100052b6:	68 e4 ab 00 10       	push   0x1000abe4	100052b7: R_386_32	.text
100052bb:	e8 fc ff ff ff       	call   100052bc <begin(void*)+0x2b1>	100052bc: R_386_PC32	Dbg::kprintf(char const*, ...)
100052c0:	83 c4 10             	add    esp,0x10
100052c3:	83 ec 08             	sub    esp,0x8
100052c6:	68 f6 ab 00 10       	push   0x1000abf6	100052c7: R_386_32	.text
100052cb:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100052d1:	50                   	push   eax
100052d2:	e8 fc ff ff ff       	call   100052d3 <begin(void*)+0x2c8>	100052d3: R_386_PC32	strcpy
100052d7:	83 c4 10             	add    esp,0x10
100052da:	83 ec 08             	sub    esp,0x8
100052dd:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
100052e3:	50                   	push   eax
100052e4:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100052ea:	50                   	push   eax
100052eb:	e8 fc ff ff ff       	call   100052ec <begin(void*)+0x2e1>	100052ec: R_386_PC32	strcat
100052f0:	83 c4 10             	add    esp,0x10
100052f3:	83 ec 08             	sub    esp,0x8
100052f6:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100052fc:	50                   	push   eax
100052fd:	68 04 ac 00 10       	push   0x1000ac04	100052fe: R_386_32	.text
10005302:	e8 fc ff ff ff       	call   10005303 <begin(void*)+0x2f8>	10005303: R_386_PC32	Dbg::kprintf(char const*, ...)
10005307:	83 c4 10             	add    esp,0x10
1000530a:	83 ec 08             	sub    esp,0x8
1000530d:	68 dd ab 00 10       	push   0x1000abdd	1000530e: R_386_32	.text
10005312:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005315:	e8 fc ff ff ff       	call   10005316 <begin(void*)+0x30b>	10005316: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000531a:	83 c4 10             	add    esp,0x10
1000531d:	83 ec 08             	sub    esp,0x8
10005320:	50                   	push   eax
10005321:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005324:	e8 fc ff ff ff       	call   10005325 <begin(void*)+0x31a>	10005325: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005329:	83 c4 10             	add    esp,0x10
1000532c:	83 ec 04             	sub    esp,0x4
1000532f:	68 17 ac 00 10       	push   0x1000ac17	10005330: R_386_32	.text
10005334:	50                   	push   eax
10005335:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005338:	e8 fc ff ff ff       	call   10005339 <begin(void*)+0x32e>	10005339: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000533d:	83 c4 10             	add    esp,0x10
10005340:	83 ec 08             	sub    esp,0x8
10005343:	68 dd ab 00 10       	push   0x1000abdd	10005344: R_386_32	.text
10005348:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000534b:	e8 fc ff ff ff       	call   1000534c <begin(void*)+0x341>	1000534c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005350:	83 c4 10             	add    esp,0x10
10005353:	83 ec 08             	sub    esp,0x8
10005356:	50                   	push   eax
10005357:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000535a:	e8 fc ff ff ff       	call   1000535b <begin(void*)+0x350>	1000535b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000535f:	83 c4 10             	add    esp,0x10
10005362:	83 ec 04             	sub    esp,0x4
10005365:	68 1d ac 00 10       	push   0x1000ac1d	10005366: R_386_32	.text
1000536a:	50                   	push   eax
1000536b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000536e:	e8 fc ff ff ff       	call   1000536f <begin(void*)+0x364>	1000536f: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005373:	83 c4 10             	add    esp,0x10
10005376:	83 ec 08             	sub    esp,0x8
10005379:	68 dd ab 00 10       	push   0x1000abdd	1000537a: R_386_32	.text
1000537e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005381:	e8 fc ff ff ff       	call   10005382 <begin(void*)+0x377>	10005382: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005386:	83 c4 10             	add    esp,0x10
10005389:	83 ec 08             	sub    esp,0x8
1000538c:	50                   	push   eax
1000538d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005390:	e8 fc ff ff ff       	call   10005391 <begin(void*)+0x386>	10005391: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005395:	83 c4 10             	add    esp,0x10
10005398:	83 ec 04             	sub    esp,0x4
1000539b:	68 22 ac 00 10       	push   0x1000ac22	1000539c: R_386_32	.text
100053a0:	50                   	push   eax
100053a1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100053a4:	e8 fc ff ff ff       	call   100053a5 <begin(void*)+0x39a>	100053a5: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100053a9:	83 c4 10             	add    esp,0x10
100053ac:	83 ec 08             	sub    esp,0x8
100053af:	68 dd ab 00 10       	push   0x1000abdd	100053b0: R_386_32	.text
100053b4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100053b7:	e8 fc ff ff ff       	call   100053b8 <begin(void*)+0x3ad>	100053b8: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100053bc:	83 c4 10             	add    esp,0x10
100053bf:	83 ec 08             	sub    esp,0x8
100053c2:	50                   	push   eax
100053c3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100053c6:	e8 fc ff ff ff       	call   100053c7 <begin(void*)+0x3bc>	100053c7: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100053cb:	83 c4 10             	add    esp,0x10
100053ce:	83 ec 04             	sub    esp,0x4
100053d1:	68 27 ac 00 10       	push   0x1000ac27	100053d2: R_386_32	.text
100053d6:	50                   	push   eax
100053d7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100053da:	e8 fc ff ff ff       	call   100053db <begin(void*)+0x3d0>	100053db: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100053df:	83 c4 10             	add    esp,0x10
100053e2:	83 ec 08             	sub    esp,0x8
100053e5:	68 dd ab 00 10       	push   0x1000abdd	100053e6: R_386_32	.text
100053ea:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100053ed:	e8 fc ff ff ff       	call   100053ee <begin(void*)+0x3e3>	100053ee: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100053f2:	83 c4 10             	add    esp,0x10
100053f5:	83 ec 08             	sub    esp,0x8
100053f8:	50                   	push   eax
100053f9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100053fc:	e8 fc ff ff ff       	call   100053fd <begin(void*)+0x3f2>	100053fd: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005401:	83 c4 10             	add    esp,0x10
10005404:	83 ec 04             	sub    esp,0x4
10005407:	68 2d ac 00 10       	push   0x1000ac2d	10005408: R_386_32	.text
1000540c:	50                   	push   eax
1000540d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005410:	e8 fc ff ff ff       	call   10005411 <begin(void*)+0x406>	10005411: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005415:	83 c4 10             	add    esp,0x10
10005418:	83 ec 08             	sub    esp,0x8
1000541b:	68 37 ac 00 10       	push   0x1000ac37	1000541c: R_386_32	.text
10005420:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005423:	e8 fc ff ff ff       	call   10005424 <begin(void*)+0x419>	10005424: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005428:	83 c4 10             	add    esp,0x10
1000542b:	83 ec 08             	sub    esp,0x8
1000542e:	50                   	push   eax
1000542f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005432:	e8 fc ff ff ff       	call   10005433 <begin(void*)+0x428>	10005433: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005437:	83 c4 10             	add    esp,0x10
1000543a:	83 ec 04             	sub    esp,0x4
1000543d:	8d 95 86 fc ff ff    	lea    edx,[ebp-0x37a]
10005443:	52                   	push   edx
10005444:	50                   	push   eax
10005445:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005448:	e8 fc ff ff ff       	call   10005449 <begin(void*)+0x43e>	10005449: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000544d:	83 c4 10             	add    esp,0x10
10005450:	83 ec 08             	sub    esp,0x8
10005453:	68 44 ac 00 10       	push   0x1000ac44	10005454: R_386_32	.text
10005458:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000545b:	e8 fc ff ff ff       	call   1000545c <begin(void*)+0x451>	1000545c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005460:	83 c4 10             	add    esp,0x10
10005463:	83 ec 08             	sub    esp,0x8
10005466:	50                   	push   eax
10005467:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000546a:	e8 fc ff ff ff       	call   1000546b <begin(void*)+0x460>	1000546b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000546f:	83 c4 10             	add    esp,0x10
10005472:	83 ec 04             	sub    esp,0x4
10005475:	68 55 ac 00 10       	push   0x1000ac55	10005476: R_386_32	.text
1000547a:	50                   	push   eax
1000547b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000547e:	e8 fc ff ff ff       	call   1000547f <begin(void*)+0x474>	1000547f: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005483:	83 c4 10             	add    esp,0x10
10005486:	83 ec 08             	sub    esp,0x8
10005489:	68 44 ac 00 10       	push   0x1000ac44	1000548a: R_386_32	.text
1000548e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005491:	e8 fc ff ff ff       	call   10005492 <begin(void*)+0x487>	10005492: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005496:	83 c4 10             	add    esp,0x10
10005499:	83 ec 08             	sub    esp,0x8
1000549c:	50                   	push   eax
1000549d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054a0:	e8 fc ff ff ff       	call   100054a1 <begin(void*)+0x496>	100054a1: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100054a5:	83 c4 10             	add    esp,0x10
100054a8:	83 ec 04             	sub    esp,0x4
100054ab:	68 5a ac 00 10       	push   0x1000ac5a	100054ac: R_386_32	.text
100054b0:	50                   	push   eax
100054b1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054b4:	e8 fc ff ff ff       	call   100054b5 <begin(void*)+0x4aa>	100054b5: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100054b9:	83 c4 10             	add    esp,0x10
100054bc:	83 ec 08             	sub    esp,0x8
100054bf:	68 44 ac 00 10       	push   0x1000ac44	100054c0: R_386_32	.text
100054c4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054c7:	e8 fc ff ff ff       	call   100054c8 <begin(void*)+0x4bd>	100054c8: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100054cc:	83 c4 10             	add    esp,0x10
100054cf:	83 ec 08             	sub    esp,0x8
100054d2:	50                   	push   eax
100054d3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054d6:	e8 fc ff ff ff       	call   100054d7 <begin(void*)+0x4cc>	100054d7: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100054db:	83 c4 10             	add    esp,0x10
100054de:	83 ec 04             	sub    esp,0x4
100054e1:	68 5f ac 00 10       	push   0x1000ac5f	100054e2: R_386_32	.text
100054e6:	50                   	push   eax
100054e7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054ea:	e8 fc ff ff ff       	call   100054eb <begin(void*)+0x4e0>	100054eb: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100054ef:	83 c4 10             	add    esp,0x10
100054f2:	83 ec 08             	sub    esp,0x8
100054f5:	68 44 ac 00 10       	push   0x1000ac44	100054f6: R_386_32	.text
100054fa:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054fd:	e8 fc ff ff ff       	call   100054fe <begin(void*)+0x4f3>	100054fe: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005502:	83 c4 10             	add    esp,0x10
10005505:	83 ec 08             	sub    esp,0x8
10005508:	50                   	push   eax
10005509:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000550c:	e8 fc ff ff ff       	call   1000550d <begin(void*)+0x502>	1000550d: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005511:	83 c4 10             	add    esp,0x10
10005514:	83 ec 04             	sub    esp,0x4
10005517:	68 65 ac 00 10       	push   0x1000ac65	10005518: R_386_32	.text
1000551c:	50                   	push   eax
1000551d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005520:	e8 fc ff ff ff       	call   10005521 <begin(void*)+0x516>	10005521: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005525:	83 c4 10             	add    esp,0x10
10005528:	83 ec 08             	sub    esp,0x8
1000552b:	68 44 ac 00 10       	push   0x1000ac44	1000552c: R_386_32	.text
10005530:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005533:	e8 fc ff ff ff       	call   10005534 <begin(void*)+0x529>	10005534: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005538:	83 c4 10             	add    esp,0x10
1000553b:	83 ec 08             	sub    esp,0x8
1000553e:	50                   	push   eax
1000553f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005542:	e8 fc ff ff ff       	call   10005543 <begin(void*)+0x538>	10005543: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005547:	83 c4 10             	add    esp,0x10
1000554a:	83 ec 04             	sub    esp,0x4
1000554d:	68 6a ac 00 10       	push   0x1000ac6a	1000554e: R_386_32	.text
10005552:	50                   	push   eax
10005553:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005556:	e8 fc ff ff ff       	call   10005557 <begin(void*)+0x54c>	10005557: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000555b:	83 c4 10             	add    esp,0x10
1000555e:	83 ec 08             	sub    esp,0x8
10005561:	68 44 ac 00 10       	push   0x1000ac44	10005562: R_386_32	.text
10005566:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005569:	e8 fc ff ff ff       	call   1000556a <begin(void*)+0x55f>	1000556a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000556e:	83 c4 10             	add    esp,0x10
10005571:	83 ec 08             	sub    esp,0x8
10005574:	50                   	push   eax
10005575:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005578:	e8 fc ff ff ff       	call   10005579 <begin(void*)+0x56e>	10005579: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000557d:	83 c4 10             	add    esp,0x10
10005580:	83 ec 04             	sub    esp,0x4
10005583:	68 70 ac 00 10       	push   0x1000ac70	10005584: R_386_32	.text
10005588:	50                   	push   eax
10005589:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000558c:	e8 fc ff ff ff       	call   1000558d <begin(void*)+0x582>	1000558d: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005591:	83 c4 10             	add    esp,0x10
10005594:	83 ec 08             	sub    esp,0x8
10005597:	68 44 ac 00 10       	push   0x1000ac44	10005598: R_386_32	.text
1000559c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000559f:	e8 fc ff ff ff       	call   100055a0 <begin(void*)+0x595>	100055a0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100055a4:	83 c4 10             	add    esp,0x10
100055a7:	83 ec 08             	sub    esp,0x8
100055aa:	50                   	push   eax
100055ab:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055ae:	e8 fc ff ff ff       	call   100055af <begin(void*)+0x5a4>	100055af: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100055b3:	83 c4 10             	add    esp,0x10
100055b6:	83 ec 04             	sub    esp,0x4
100055b9:	68 7b ac 00 10       	push   0x1000ac7b	100055ba: R_386_32	.text
100055be:	50                   	push   eax
100055bf:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055c2:	e8 fc ff ff ff       	call   100055c3 <begin(void*)+0x5b8>	100055c3: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100055c7:	83 c4 10             	add    esp,0x10
100055ca:	83 ec 08             	sub    esp,0x8
100055cd:	68 86 ac 00 10       	push   0x1000ac86	100055ce: R_386_32	.text
100055d2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055d5:	e8 fc ff ff ff       	call   100055d6 <begin(void*)+0x5cb>	100055d6: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100055da:	83 c4 10             	add    esp,0x10
100055dd:	83 ec 08             	sub    esp,0x8
100055e0:	50                   	push   eax
100055e1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055e4:	e8 fc ff ff ff       	call   100055e5 <begin(void*)+0x5da>	100055e5: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100055e9:	83 c4 10             	add    esp,0x10
100055ec:	83 ec 04             	sub    esp,0x4
100055ef:	68 92 ac 00 10       	push   0x1000ac92	100055f0: R_386_32	.text
100055f4:	50                   	push   eax
100055f5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055f8:	e8 fc ff ff ff       	call   100055f9 <begin(void*)+0x5ee>	100055f9: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100055fd:	83 c4 10             	add    esp,0x10
10005600:	83 ec 08             	sub    esp,0x8
10005603:	68 9b ac 00 10       	push   0x1000ac9b	10005604: R_386_32	.text
10005608:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000560b:	e8 fc ff ff ff       	call   1000560c <begin(void*)+0x601>	1000560c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005610:	83 c4 10             	add    esp,0x10
10005613:	83 ec 08             	sub    esp,0x8
10005616:	50                   	push   eax
10005617:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000561a:	e8 fc ff ff ff       	call   1000561b <begin(void*)+0x610>	1000561b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000561f:	83 c4 10             	add    esp,0x10
10005622:	83 ec 04             	sub    esp,0x4
10005625:	68 a8 ac 00 10       	push   0x1000aca8	10005626: R_386_32	.text
1000562a:	50                   	push   eax
1000562b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000562e:	e8 fc ff ff ff       	call   1000562f <begin(void*)+0x624>	1000562f: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005633:	83 c4 10             	add    esp,0x10
10005636:	83 ec 08             	sub    esp,0x8
10005639:	68 9b ac 00 10       	push   0x1000ac9b	1000563a: R_386_32	.text
1000563e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005641:	e8 fc ff ff ff       	call   10005642 <begin(void*)+0x637>	10005642: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005646:	83 c4 10             	add    esp,0x10
10005649:	83 ec 08             	sub    esp,0x8
1000564c:	50                   	push   eax
1000564d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005650:	e8 fc ff ff ff       	call   10005651 <begin(void*)+0x646>	10005651: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005655:	83 c4 10             	add    esp,0x10
10005658:	83 ec 04             	sub    esp,0x4
1000565b:	68 ad ac 00 10       	push   0x1000acad	1000565c: R_386_32	.text
10005660:	50                   	push   eax
10005661:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005664:	e8 fc ff ff ff       	call   10005665 <begin(void*)+0x65a>	10005665: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005669:	83 c4 10             	add    esp,0x10
1000566c:	83 ec 08             	sub    esp,0x8
1000566f:	68 9b ac 00 10       	push   0x1000ac9b	10005670: R_386_32	.text
10005674:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005677:	e8 fc ff ff ff       	call   10005678 <begin(void*)+0x66d>	10005678: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000567c:	83 c4 10             	add    esp,0x10
1000567f:	83 ec 08             	sub    esp,0x8
10005682:	50                   	push   eax
10005683:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005686:	e8 fc ff ff ff       	call   10005687 <begin(void*)+0x67c>	10005687: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000568b:	83 c4 10             	add    esp,0x10
1000568e:	83 ec 04             	sub    esp,0x4
10005691:	68 b5 ac 00 10       	push   0x1000acb5	10005692: R_386_32	.text
10005696:	50                   	push   eax
10005697:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000569a:	e8 fc ff ff ff       	call   1000569b <begin(void*)+0x690>	1000569b: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000569f:	83 c4 10             	add    esp,0x10
100056a2:	83 ec 08             	sub    esp,0x8
100056a5:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100056ab:	50                   	push   eax
100056ac:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056af:	e8 fc ff ff ff       	call   100056b0 <begin(void*)+0x6a5>	100056b0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100056b4:	83 c4 10             	add    esp,0x10
100056b7:	83 ec 08             	sub    esp,0x8
100056ba:	50                   	push   eax
100056bb:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056be:	e8 fc ff ff ff       	call   100056bf <begin(void*)+0x6b4>	100056bf: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100056c3:	83 c4 10             	add    esp,0x10
100056c6:	83 ec 04             	sub    esp,0x4
100056c9:	68 c0 ac 00 10       	push   0x1000acc0	100056ca: R_386_32	.text
100056ce:	50                   	push   eax
100056cf:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056d2:	e8 fc ff ff ff       	call   100056d3 <begin(void*)+0x6c8>	100056d3: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100056d7:	83 c4 10             	add    esp,0x10
100056da:	83 ec 08             	sub    esp,0x8
100056dd:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100056e3:	50                   	push   eax
100056e4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056e7:	e8 fc ff ff ff       	call   100056e8 <begin(void*)+0x6dd>	100056e8: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100056ec:	83 c4 10             	add    esp,0x10
100056ef:	83 ec 08             	sub    esp,0x8
100056f2:	50                   	push   eax
100056f3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056f6:	e8 fc ff ff ff       	call   100056f7 <begin(void*)+0x6ec>	100056f7: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100056fb:	83 c4 10             	add    esp,0x10
100056fe:	83 ec 04             	sub    esp,0x4
10005701:	68 c5 ac 00 10       	push   0x1000acc5	10005702: R_386_32	.text
10005706:	50                   	push   eax
10005707:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000570a:	e8 fc ff ff ff       	call   1000570b <begin(void*)+0x700>	1000570b: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000570f:	83 c4 10             	add    esp,0x10
10005712:	83 ec 08             	sub    esp,0x8
10005715:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000571b:	50                   	push   eax
1000571c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000571f:	e8 fc ff ff ff       	call   10005720 <begin(void*)+0x715>	10005720: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005724:	83 c4 10             	add    esp,0x10
10005727:	83 ec 08             	sub    esp,0x8
1000572a:	50                   	push   eax
1000572b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000572e:	e8 fc ff ff ff       	call   1000572f <begin(void*)+0x724>	1000572f: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005733:	83 c4 10             	add    esp,0x10
10005736:	83 ec 04             	sub    esp,0x4
10005739:	68 ce ac 00 10       	push   0x1000acce	1000573a: R_386_32	.text
1000573e:	50                   	push   eax
1000573f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005742:	e8 fc ff ff ff       	call   10005743 <begin(void*)+0x738>	10005743: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005747:	83 c4 10             	add    esp,0x10
1000574a:	83 ec 08             	sub    esp,0x8
1000574d:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005753:	50                   	push   eax
10005754:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005757:	e8 fc ff ff ff       	call   10005758 <begin(void*)+0x74d>	10005758: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000575c:	83 c4 10             	add    esp,0x10
1000575f:	83 ec 08             	sub    esp,0x8
10005762:	50                   	push   eax
10005763:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005766:	e8 fc ff ff ff       	call   10005767 <begin(void*)+0x75c>	10005767: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000576b:	83 c4 10             	add    esp,0x10
1000576e:	83 ec 04             	sub    esp,0x4
10005771:	68 da ac 00 10       	push   0x1000acda	10005772: R_386_32	.text
10005776:	50                   	push   eax
10005777:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000577a:	e8 fc ff ff ff       	call   1000577b <begin(void*)+0x770>	1000577b: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000577f:	83 c4 10             	add    esp,0x10
10005782:	83 ec 08             	sub    esp,0x8
10005785:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000578b:	50                   	push   eax
1000578c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000578f:	e8 fc ff ff ff       	call   10005790 <begin(void*)+0x785>	10005790: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005794:	83 c4 10             	add    esp,0x10
10005797:	83 ec 08             	sub    esp,0x8
1000579a:	50                   	push   eax
1000579b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000579e:	e8 fc ff ff ff       	call   1000579f <begin(void*)+0x794>	1000579f: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100057a3:	83 c4 10             	add    esp,0x10
100057a6:	83 ec 04             	sub    esp,0x4
100057a9:	68 e2 ac 00 10       	push   0x1000ace2	100057aa: R_386_32	.text
100057ae:	50                   	push   eax
100057af:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057b2:	e8 fc ff ff ff       	call   100057b3 <begin(void*)+0x7a8>	100057b3: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100057b7:	83 c4 10             	add    esp,0x10
100057ba:	83 ec 08             	sub    esp,0x8
100057bd:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100057c3:	50                   	push   eax
100057c4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057c7:	e8 fc ff ff ff       	call   100057c8 <begin(void*)+0x7bd>	100057c8: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100057cc:	83 c4 10             	add    esp,0x10
100057cf:	83 ec 08             	sub    esp,0x8
100057d2:	50                   	push   eax
100057d3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057d6:	e8 fc ff ff ff       	call   100057d7 <begin(void*)+0x7cc>	100057d7: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100057db:	83 c4 10             	add    esp,0x10
100057de:	83 ec 04             	sub    esp,0x4
100057e1:	68 ec ac 00 10       	push   0x1000acec	100057e2: R_386_32	.text
100057e6:	50                   	push   eax
100057e7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057ea:	e8 fc ff ff ff       	call   100057eb <begin(void*)+0x7e0>	100057eb: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100057ef:	83 c4 10             	add    esp,0x10
100057f2:	83 ec 08             	sub    esp,0x8
100057f5:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100057fb:	50                   	push   eax
100057fc:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057ff:	e8 fc ff ff ff       	call   10005800 <begin(void*)+0x7f5>	10005800: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005804:	83 c4 10             	add    esp,0x10
10005807:	83 ec 08             	sub    esp,0x8
1000580a:	50                   	push   eax
1000580b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000580e:	e8 fc ff ff ff       	call   1000580f <begin(void*)+0x804>	1000580f: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005813:	83 c4 10             	add    esp,0x10
10005816:	83 ec 04             	sub    esp,0x4
10005819:	68 f6 ac 00 10       	push   0x1000acf6	1000581a: R_386_32	.text
1000581e:	50                   	push   eax
1000581f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005822:	e8 fc ff ff ff       	call   10005823 <begin(void*)+0x818>	10005823: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005827:	83 c4 10             	add    esp,0x10
1000582a:	83 ec 08             	sub    esp,0x8
1000582d:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005833:	50                   	push   eax
10005834:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005837:	e8 fc ff ff ff       	call   10005838 <begin(void*)+0x82d>	10005838: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000583c:	83 c4 10             	add    esp,0x10
1000583f:	83 ec 08             	sub    esp,0x8
10005842:	50                   	push   eax
10005843:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005846:	e8 fc ff ff ff       	call   10005847 <begin(void*)+0x83c>	10005847: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000584b:	83 c4 10             	add    esp,0x10
1000584e:	83 ec 04             	sub    esp,0x4
10005851:	68 ff ac 00 10       	push   0x1000acff	10005852: R_386_32	.text
10005856:	50                   	push   eax
10005857:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000585a:	e8 fc ff ff ff       	call   1000585b <begin(void*)+0x850>	1000585b: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000585f:	83 c4 10             	add    esp,0x10
10005862:	83 ec 08             	sub    esp,0x8
10005865:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000586b:	50                   	push   eax
1000586c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000586f:	e8 fc ff ff ff       	call   10005870 <begin(void*)+0x865>	10005870: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005874:	83 c4 10             	add    esp,0x10
10005877:	83 ec 08             	sub    esp,0x8
1000587a:	50                   	push   eax
1000587b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000587e:	e8 fc ff ff ff       	call   1000587f <begin(void*)+0x874>	1000587f: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005883:	83 c4 10             	add    esp,0x10
10005886:	83 ec 04             	sub    esp,0x4
10005889:	68 06 ad 00 10       	push   0x1000ad06	1000588a: R_386_32	.text
1000588e:	50                   	push   eax
1000588f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005892:	e8 fc ff ff ff       	call   10005893 <begin(void*)+0x888>	10005893: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005897:	83 c4 10             	add    esp,0x10
1000589a:	83 ec 08             	sub    esp,0x8
1000589d:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100058a3:	50                   	push   eax
100058a4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058a7:	e8 fc ff ff ff       	call   100058a8 <begin(void*)+0x89d>	100058a8: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100058ac:	83 c4 10             	add    esp,0x10
100058af:	83 ec 08             	sub    esp,0x8
100058b2:	50                   	push   eax
100058b3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058b6:	e8 fc ff ff ff       	call   100058b7 <begin(void*)+0x8ac>	100058b7: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100058bb:	83 c4 10             	add    esp,0x10
100058be:	83 ec 04             	sub    esp,0x4
100058c1:	68 0c ad 00 10       	push   0x1000ad0c	100058c2: R_386_32	.text
100058c6:	50                   	push   eax
100058c7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058ca:	e8 fc ff ff ff       	call   100058cb <begin(void*)+0x8c0>	100058cb: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100058cf:	83 c4 10             	add    esp,0x10
100058d2:	a1 00 00 00 00       	mov    eax,ds:0x0	100058d3: R_386_32	modesel
100058d7:	89 c3                	mov    ebx,eax
100058d9:	89 c6                	mov    esi,eax
100058db:	c1 fe 1f             	sar    esi,0x1f
100058de:	83 ec 08             	sub    esp,0x8
100058e1:	68 17 ad 00 10       	push   0x1000ad17	100058e2: R_386_32	.text
100058e6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058e9:	e8 fc ff ff ff       	call   100058ea <begin(void*)+0x8df>	100058ea: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100058ee:	83 c4 10             	add    esp,0x10
100058f1:	83 ec 08             	sub    esp,0x8
100058f4:	50                   	push   eax
100058f5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058f8:	e8 fc ff ff ff       	call   100058f9 <begin(void*)+0x8ee>	100058f9: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100058fd:	83 c4 10             	add    esp,0x10
10005900:	83 ec 08             	sub    esp,0x8
10005903:	6a 6a                	push   0x6a
10005905:	56                   	push   esi
10005906:	53                   	push   ebx
10005907:	68 23 ad 00 10       	push   0x1000ad23	10005908: R_386_32	.text
1000590c:	50                   	push   eax
1000590d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005910:	e8 fc ff ff ff       	call   10005911 <begin(void*)+0x906>	10005911: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
10005915:	83 c4 20             	add    esp,0x20
10005918:	a1 00 00 00 00       	mov    eax,ds:0x0	10005919: R_386_32	tzsel
1000591d:	89 c3                	mov    ebx,eax
1000591f:	89 c6                	mov    esi,eax
10005921:	c1 fe 1f             	sar    esi,0x1f
10005924:	83 ec 08             	sub    esp,0x8
10005927:	68 86 ac 00 10       	push   0x1000ac86	10005928: R_386_32	.text
1000592c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000592f:	e8 fc ff ff ff       	call   10005930 <begin(void*)+0x925>	10005930: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005934:	83 c4 10             	add    esp,0x10
10005937:	83 ec 08             	sub    esp,0x8
1000593a:	50                   	push   eax
1000593b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000593e:	e8 fc ff ff ff       	call   1000593f <begin(void*)+0x934>	1000593f: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005943:	83 c4 10             	add    esp,0x10
10005946:	83 ec 08             	sub    esp,0x8
10005949:	6a 6a                	push   0x6a
1000594b:	56                   	push   esi
1000594c:	53                   	push   ebx
1000594d:	68 2b ad 00 10       	push   0x1000ad2b	1000594e: R_386_32	.text
10005952:	50                   	push   eax
10005953:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005956:	e8 fc ff ff ff       	call   10005957 <begin(void*)+0x94c>	10005957: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
1000595b:	83 c4 20             	add    esp,0x20
1000595e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000595f: R_386_32	tzsel
10005963:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10005966: R_386_32	timezoneStrings
1000596a:	8d 58 01             	lea    ebx,[eax+0x1]
1000596d:	83 ec 08             	sub    esp,0x8
10005970:	68 36 ad 00 10       	push   0x1000ad36	10005971: R_386_32	.text
10005975:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005978:	e8 fc ff ff ff       	call   10005979 <begin(void*)+0x96e>	10005979: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000597d:	83 c4 10             	add    esp,0x10
10005980:	83 ec 04             	sub    esp,0x4
10005983:	53                   	push   ebx
10005984:	50                   	push   eax
10005985:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005988:	e8 fc ff ff ff       	call   10005989 <begin(void*)+0x97e>	10005989: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000598d:	83 c4 10             	add    esp,0x10
10005990:	83 ec 08             	sub    esp,0x8
10005993:	68 4b ad 00 10       	push   0x1000ad4b	10005994: R_386_32	.text
10005998:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000599b:	e8 fc ff ff ff       	call   1000599c <begin(void*)+0x991>	1000599c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100059a0:	83 c4 10             	add    esp,0x10
100059a3:	83 ec 04             	sub    esp,0x4
100059a6:	68 00 00 00 00       	push   0x0	100059a7: R_386_32	currName
100059ab:	50                   	push   eax
100059ac:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059af:	e8 fc ff ff ff       	call   100059b0 <begin(void*)+0x9a5>	100059b0: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100059b4:	83 c4 10             	add    esp,0x10
100059b7:	83 ec 08             	sub    esp,0x8
100059ba:	68 5d ad 00 10       	push   0x1000ad5d	100059bb: R_386_32	.text
100059bf:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059c2:	e8 fc ff ff ff       	call   100059c3 <begin(void*)+0x9b8>	100059c3: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100059c7:	83 c4 10             	add    esp,0x10
100059ca:	83 ec 04             	sub    esp,0x4
100059cd:	68 00 00 00 00       	push   0x0	100059ce: R_386_32	currComp
100059d2:	50                   	push   eax
100059d3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059d6:	e8 fc ff ff ff       	call   100059d7 <begin(void*)+0x9cc>	100059d7: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100059db:	83 c4 10             	add    esp,0x10
100059de:	83 ec 08             	sub    esp,0x8
100059e1:	68 72 ad 00 10       	push   0x1000ad72	100059e2: R_386_32	.text
100059e6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059e9:	e8 fc ff ff ff       	call   100059ea <begin(void*)+0x9df>	100059ea: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100059ee:	83 c4 10             	add    esp,0x10
100059f1:	83 ec 04             	sub    esp,0x4
100059f4:	68 00 00 00 00       	push   0x0	100059f5: R_386_32	pkeybuf
100059f9:	50                   	push   eax
100059fa:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059fd:	e8 fc ff ff ff       	call   100059fe <begin(void*)+0x9f3>	100059fe: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005a02:	83 c4 10             	add    esp,0x10
10005a05:	83 ec 08             	sub    esp,0x8
10005a08:	68 8a ad 00 10       	push   0x1000ad8a	10005a09: R_386_32	.text
10005a0d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a10:	e8 fc ff ff ff       	call   10005a11 <begin(void*)+0xa06>	10005a11: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a15:	83 c4 10             	add    esp,0x10
10005a18:	83 ec 08             	sub    esp,0x8
10005a1b:	50                   	push   eax
10005a1c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a1f:	e8 fc ff ff ff       	call   10005a20 <begin(void*)+0xa15>	10005a20: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005a24:	83 c4 10             	add    esp,0x10
10005a27:	83 ec 04             	sub    esp,0x4
10005a2a:	68 a0 ad 00 10       	push   0x1000ada0	10005a2b: R_386_32	.text
10005a2f:	50                   	push   eax
10005a30:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a33:	e8 fc ff ff ff       	call   10005a34 <begin(void*)+0xa29>	10005a34: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005a38:	83 c4 10             	add    esp,0x10
10005a3b:	83 ec 08             	sub    esp,0x8
10005a3e:	68 a4 ad 00 10       	push   0x1000ada4	10005a3f: R_386_32	.text
10005a43:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a46:	e8 fc ff ff ff       	call   10005a47 <begin(void*)+0xa3c>	10005a47: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a4b:	83 c4 10             	add    esp,0x10
10005a4e:	83 ec 08             	sub    esp,0x8
10005a51:	50                   	push   eax
10005a52:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a55:	e8 fc ff ff ff       	call   10005a56 <begin(void*)+0xa4b>	10005a56: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005a5a:	83 c4 10             	add    esp,0x10
10005a5d:	83 ec 04             	sub    esp,0x4
10005a60:	68 a0 ad 00 10       	push   0x1000ada0	10005a61: R_386_32	.text
10005a65:	50                   	push   eax
10005a66:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a69:	e8 fc ff ff ff       	call   10005a6a <begin(void*)+0xa5f>	10005a6a: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005a6e:	83 c4 10             	add    esp,0x10
10005a71:	83 ec 08             	sub    esp,0x8
10005a74:	68 bb ad 00 10       	push   0x1000adbb	10005a75: R_386_32	.text
10005a79:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a7c:	e8 fc ff ff ff       	call   10005a7d <begin(void*)+0xa72>	10005a7d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a81:	83 c4 10             	add    esp,0x10
10005a84:	83 ec 08             	sub    esp,0x8
10005a87:	50                   	push   eax
10005a88:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a8b:	e8 fc ff ff ff       	call   10005a8c <begin(void*)+0xa81>	10005a8c: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005a90:	83 c4 10             	add    esp,0x10
10005a93:	83 ec 04             	sub    esp,0x4
10005a96:	68 a0 ad 00 10       	push   0x1000ada0	10005a97: R_386_32	.text
10005a9b:	50                   	push   eax
10005a9c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a9f:	e8 fc ff ff ff       	call   10005aa0 <begin(void*)+0xa95>	10005aa0: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005aa4:	83 c4 10             	add    esp,0x10
10005aa7:	83 ec 08             	sub    esp,0x8
10005aaa:	68 d1 ad 00 10       	push   0x1000add1	10005aab: R_386_32	.text
10005aaf:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ab2:	e8 fc ff ff ff       	call   10005ab3 <begin(void*)+0xaa8>	10005ab3: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005ab7:	83 c4 10             	add    esp,0x10
10005aba:	83 ec 08             	sub    esp,0x8
10005abd:	50                   	push   eax
10005abe:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ac1:	e8 fc ff ff ff       	call   10005ac2 <begin(void*)+0xab7>	10005ac2: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005ac6:	83 c4 10             	add    esp,0x10
10005ac9:	83 ec 04             	sub    esp,0x4
10005acc:	68 a0 ad 00 10       	push   0x1000ada0	10005acd: R_386_32	.text
10005ad1:	50                   	push   eax
10005ad2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ad5:	e8 fc ff ff ff       	call   10005ad6 <begin(void*)+0xacb>	10005ad6: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005ada:	83 c4 10             	add    esp,0x10
10005add:	83 ec 08             	sub    esp,0x8
10005ae0:	68 e7 ad 00 10       	push   0x1000ade7	10005ae1: R_386_32	.text
10005ae5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ae8:	e8 fc ff ff ff       	call   10005ae9 <begin(void*)+0xade>	10005ae9: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005aed:	83 c4 10             	add    esp,0x10
10005af0:	83 ec 08             	sub    esp,0x8
10005af3:	50                   	push   eax
10005af4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005af7:	e8 fc ff ff ff       	call   10005af8 <begin(void*)+0xaed>	10005af8: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005afc:	83 c4 10             	add    esp,0x10
10005aff:	83 ec 04             	sub    esp,0x4
10005b02:	68 a0 ad 00 10       	push   0x1000ada0	10005b03: R_386_32	.text
10005b07:	50                   	push   eax
10005b08:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b0b:	e8 fc ff ff ff       	call   10005b0c <begin(void*)+0xb01>	10005b0c: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005b10:	83 c4 10             	add    esp,0x10
10005b13:	83 ec 08             	sub    esp,0x8
10005b16:	68 fe ad 00 10       	push   0x1000adfe	10005b17: R_386_32	.text
10005b1b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b1e:	e8 fc ff ff ff       	call   10005b1f <begin(void*)+0xb14>	10005b1f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b23:	83 c4 10             	add    esp,0x10
10005b26:	83 ec 04             	sub    esp,0x4
10005b29:	68 18 ae 00 10       	push   0x1000ae18	10005b2a: R_386_32	.text
10005b2e:	50                   	push   eax
10005b2f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b32:	e8 fc ff ff ff       	call   10005b33 <begin(void*)+0xb28>	10005b33: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005b37:	83 c4 10             	add    esp,0x10
10005b3a:	83 ec 08             	sub    esp,0x8
10005b3d:	68 38 ae 00 10       	push   0x1000ae38	10005b3e: R_386_32	.text
10005b42:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b45:	e8 fc ff ff ff       	call   10005b46 <begin(void*)+0xb3b>	10005b46: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b4a:	83 c4 10             	add    esp,0x10
10005b4d:	83 ec 04             	sub    esp,0x4
10005b50:	68 53 ae 00 10       	push   0x1000ae53	10005b51: R_386_32	.text
10005b55:	50                   	push   eax
10005b56:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b59:	e8 fc ff ff ff       	call   10005b5a <begin(void*)+0xb4f>	10005b5a: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005b5e:	83 c4 10             	add    esp,0x10
10005b61:	83 ec 08             	sub    esp,0x8
10005b64:	68 61 ae 00 10       	push   0x1000ae61	10005b65: R_386_32	.text
10005b69:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b6c:	e8 fc ff ff ff       	call   10005b6d <begin(void*)+0xb62>	10005b6d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b71:	83 c4 10             	add    esp,0x10
10005b74:	83 ec 04             	sub    esp,0x4
10005b77:	68 7b ae 00 10       	push   0x1000ae7b	10005b78: R_386_32	.text
10005b7c:	50                   	push   eax
10005b7d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b80:	e8 fc ff ff ff       	call   10005b81 <begin(void*)+0xb76>	10005b81: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005b85:	83 c4 10             	add    esp,0x10
10005b88:	83 ec 08             	sub    esp,0x8
10005b8b:	68 93 ae 00 10       	push   0x1000ae93	10005b8c: R_386_32	.text
10005b90:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b93:	e8 fc ff ff ff       	call   10005b94 <begin(void*)+0xb89>	10005b94: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b98:	83 c4 10             	add    esp,0x10
10005b9b:	83 ec 04             	sub    esp,0x4
10005b9e:	68 7b ae 00 10       	push   0x1000ae7b	10005b9f: R_386_32	.text
10005ba3:	50                   	push   eax
10005ba4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ba7:	e8 fc ff ff ff       	call   10005ba8 <begin(void*)+0xb9d>	10005ba8: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005bac:	83 c4 10             	add    esp,0x10
10005baf:	83 ec 08             	sub    esp,0x8
10005bb2:	68 ad ae 00 10       	push   0x1000aead	10005bb3: R_386_32	.text
10005bb7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bba:	e8 fc ff ff ff       	call   10005bbb <begin(void*)+0xbb0>	10005bbb: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005bbf:	83 c4 10             	add    esp,0x10
10005bc2:	83 ec 04             	sub    esp,0x4
10005bc5:	68 7b ae 00 10       	push   0x1000ae7b	10005bc6: R_386_32	.text
10005bca:	50                   	push   eax
10005bcb:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bce:	e8 fc ff ff ff       	call   10005bcf <begin(void*)+0xbc4>	10005bcf: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005bd3:	83 c4 10             	add    esp,0x10
10005bd6:	83 ec 08             	sub    esp,0x8
10005bd9:	68 8a ad 00 10       	push   0x1000ad8a	10005bda: R_386_32	.text
10005bde:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005be1:	e8 fc ff ff ff       	call   10005be2 <begin(void*)+0xbd7>	10005be2: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005be6:	83 c4 10             	add    esp,0x10
10005be9:	83 ec 08             	sub    esp,0x8
10005bec:	50                   	push   eax
10005bed:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bf0:	e8 fc ff ff ff       	call   10005bf1 <begin(void*)+0xbe6>	10005bf1: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005bf5:	83 c4 10             	add    esp,0x10
10005bf8:	83 ec 04             	sub    esp,0x4
10005bfb:	68 c8 ae 00 10       	push   0x1000aec8	10005bfc: R_386_32	.text
10005c00:	50                   	push   eax
10005c01:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c04:	e8 fc ff ff ff       	call   10005c05 <begin(void*)+0xbfa>	10005c05: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005c09:	83 c4 10             	add    esp,0x10
10005c0c:	83 ec 08             	sub    esp,0x8
10005c0f:	68 a4 ad 00 10       	push   0x1000ada4	10005c10: R_386_32	.text
10005c14:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c17:	e8 fc ff ff ff       	call   10005c18 <begin(void*)+0xc0d>	10005c18: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c1c:	83 c4 10             	add    esp,0x10
10005c1f:	83 ec 08             	sub    esp,0x8
10005c22:	50                   	push   eax
10005c23:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c26:	e8 fc ff ff ff       	call   10005c27 <begin(void*)+0xc1c>	10005c27: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005c2b:	83 c4 10             	add    esp,0x10
10005c2e:	83 ec 04             	sub    esp,0x4
10005c31:	68 c8 ae 00 10       	push   0x1000aec8	10005c32: R_386_32	.text
10005c36:	50                   	push   eax
10005c37:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c3a:	e8 fc ff ff ff       	call   10005c3b <begin(void*)+0xc30>	10005c3b: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005c3f:	83 c4 10             	add    esp,0x10
10005c42:	83 ec 08             	sub    esp,0x8
10005c45:	68 cc ae 00 10       	push   0x1000aecc	10005c46: R_386_32	.text
10005c4a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c4d:	e8 fc ff ff ff       	call   10005c4e <begin(void*)+0xc43>	10005c4e: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c52:	83 c4 10             	add    esp,0x10
10005c55:	83 ec 04             	sub    esp,0x4
10005c58:	68 e6 ae 00 10       	push   0x1000aee6	10005c59: R_386_32	.text
10005c5d:	50                   	push   eax
10005c5e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c61:	e8 fc ff ff ff       	call   10005c62 <begin(void*)+0xc57>	10005c62: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005c66:	83 c4 10             	add    esp,0x10
10005c69:	83 ec 08             	sub    esp,0x8
10005c6c:	68 04 af 00 10       	push   0x1000af04	10005c6d: R_386_32	.text
10005c71:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c74:	e8 fc ff ff ff       	call   10005c75 <begin(void*)+0xc6a>	10005c75: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c79:	83 c4 10             	add    esp,0x10
10005c7c:	83 ec 04             	sub    esp,0x4
10005c7f:	68 1f af 00 10       	push   0x1000af1f	10005c80: R_386_32	.text
10005c84:	50                   	push   eax
10005c85:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c88:	e8 fc ff ff ff       	call   10005c89 <begin(void*)+0xc7e>	10005c89: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005c8d:	83 c4 10             	add    esp,0x10
10005c90:	83 ec 08             	sub    esp,0x8
10005c93:	68 f6 ab 00 10       	push   0x1000abf6	10005c94: R_386_32	.text
10005c98:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005c9e:	50                   	push   eax
10005c9f:	e8 fc ff ff ff       	call   10005ca0 <begin(void*)+0xc95>	10005ca0: R_386_PC32	strcpy
10005ca4:	83 c4 10             	add    esp,0x10
10005ca7:	83 ec 08             	sub    esp,0x8
10005caa:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005cb0:	50                   	push   eax
10005cb1:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005cb7:	50                   	push   eax
10005cb8:	e8 fc ff ff ff       	call   10005cb9 <begin(void*)+0xcae>	10005cb9: R_386_PC32	strcat
10005cbd:	83 c4 10             	add    esp,0x10
10005cc0:	83 ec 08             	sub    esp,0x8
10005cc3:	68 2f af 00 10       	push   0x1000af2f	10005cc4: R_386_32	.text
10005cc8:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005cce:	50                   	push   eax
10005ccf:	e8 fc ff ff ff       	call   10005cd0 <begin(void*)+0xcc5>	10005cd0: R_386_PC32	strcat
10005cd4:	83 c4 10             	add    esp,0x10
10005cd7:	83 ec 08             	sub    esp,0x8
10005cda:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005ce0:	50                   	push   eax
10005ce1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ce4:	e8 fc ff ff ff       	call   10005ce5 <begin(void*)+0xcda>	10005ce5: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005ce9:	83 c4 10             	add    esp,0x10
10005cec:	83 ec 04             	sub    esp,0x4
10005cef:	68 00 00 00 00       	push   0x0	10005cf0: R_386_32	passwhash
10005cf4:	50                   	push   eax
10005cf5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cf8:	e8 fc ff ff ff       	call   10005cf9 <begin(void*)+0xcee>	10005cf9: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005cfd:	83 c4 10             	add    esp,0x10
10005d00:	83 ec 08             	sub    esp,0x8
10005d03:	68 f6 ab 00 10       	push   0x1000abf6	10005d04: R_386_32	.text
10005d08:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005d0e:	50                   	push   eax
10005d0f:	e8 fc ff ff ff       	call   10005d10 <begin(void*)+0xd05>	10005d10: R_386_PC32	strcpy
10005d14:	83 c4 10             	add    esp,0x10
10005d17:	83 ec 08             	sub    esp,0x8
10005d1a:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005d20:	50                   	push   eax
10005d21:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005d27:	50                   	push   eax
10005d28:	e8 fc ff ff ff       	call   10005d29 <begin(void*)+0xd1e>	10005d29: R_386_PC32	strcat
10005d2d:	83 c4 10             	add    esp,0x10
10005d30:	83 ec 08             	sub    esp,0x8
10005d33:	68 39 af 00 10       	push   0x1000af39	10005d34: R_386_32	.text
10005d38:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005d3e:	50                   	push   eax
10005d3f:	e8 fc ff ff ff       	call   10005d40 <begin(void*)+0xd35>	10005d40: R_386_PC32	strcat
10005d44:	83 c4 10             	add    esp,0x10
10005d47:	83 ec 08             	sub    esp,0x8
10005d4a:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005d50:	50                   	push   eax
10005d51:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d54:	e8 fc ff ff ff       	call   10005d55 <begin(void*)+0xd4a>	10005d55: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005d59:	83 c4 10             	add    esp,0x10
10005d5c:	83 ec 04             	sub    esp,0x4
10005d5f:	68 00 00 00 00       	push   0x0	10005d60: R_386_32	passwsalt
10005d64:	50                   	push   eax
10005d65:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d68:	e8 fc ff ff ff       	call   10005d69 <begin(void*)+0xd5e>	10005d69: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005d6d:	83 c4 10             	add    esp,0x10
10005d70:	83 ec 08             	sub    esp,0x8
10005d73:	68 f6 ab 00 10       	push   0x1000abf6	10005d74: R_386_32	.text
10005d78:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005d7e:	50                   	push   eax
10005d7f:	e8 fc ff ff ff       	call   10005d80 <begin(void*)+0xd75>	10005d80: R_386_PC32	strcpy
10005d84:	83 c4 10             	add    esp,0x10
10005d87:	83 ec 08             	sub    esp,0x8
10005d8a:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005d90:	50                   	push   eax
10005d91:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005d97:	50                   	push   eax
10005d98:	e8 fc ff ff ff       	call   10005d99 <begin(void*)+0xd8e>	10005d99: R_386_PC32	strcat
10005d9d:	83 c4 10             	add    esp,0x10
10005da0:	83 ec 08             	sub    esp,0x8
10005da3:	68 3f af 00 10       	push   0x1000af3f	10005da4: R_386_32	.text
10005da8:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005dae:	50                   	push   eax
10005daf:	e8 fc ff ff ff       	call   10005db0 <begin(void*)+0xda5>	10005db0: R_386_PC32	strcat
10005db4:	83 c4 10             	add    esp,0x10
10005db7:	83 ec 08             	sub    esp,0x8
10005dba:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005dc0:	50                   	push   eax
10005dc1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005dc4:	e8 fc ff ff ff       	call   10005dc5 <begin(void*)+0xdba>	10005dc5: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005dc9:	83 c4 10             	add    esp,0x10
10005dcc:	83 ec 04             	sub    esp,0x4
10005dcf:	68 00 00 00 00       	push   0x0	10005dd0: R_386_32	currName
10005dd4:	50                   	push   eax
10005dd5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005dd8:	e8 fc ff ff ff       	call   10005dd9 <begin(void*)+0xdce>	10005dd9: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005ddd:	83 c4 10             	add    esp,0x10
10005de0:	83 ec 08             	sub    esp,0x8
10005de3:	68 22 a4 00 10       	push   0x1000a422	10005de4: R_386_32	.text
10005de8:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005dee:	50                   	push   eax
10005def:	e8 fc ff ff ff       	call   10005df0 <begin(void*)+0xde5>	10005df0: R_386_PC32	strcpy
10005df4:	83 c4 10             	add    esp,0x10
10005df7:	83 ec 08             	sub    esp,0x8
10005dfa:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005e00:	50                   	push   eax
10005e01:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005e07:	50                   	push   eax
10005e08:	e8 fc ff ff ff       	call   10005e09 <begin(void*)+0xdfe>	10005e09: R_386_PC32	strcat
10005e0d:	83 c4 10             	add    esp,0x10
10005e10:	83 ec 08             	sub    esp,0x8
10005e13:	68 2c a4 00 10       	push   0x1000a42c	10005e14: R_386_32	.text
10005e18:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005e1e:	50                   	push   eax
10005e1f:	e8 fc ff ff ff       	call   10005e20 <begin(void*)+0xe15>	10005e20: R_386_PC32	strcat
10005e24:	83 c4 10             	add    esp,0x10
10005e27:	83 ec 08             	sub    esp,0x8
10005e2a:	68 f6 ab 00 10       	push   0x1000abf6	10005e2b: R_386_32	.text
10005e2f:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005e35:	50                   	push   eax
10005e36:	e8 fc ff ff ff       	call   10005e37 <begin(void*)+0xe2c>	10005e37: R_386_PC32	strcpy
10005e3b:	83 c4 10             	add    esp,0x10
10005e3e:	83 ec 08             	sub    esp,0x8
10005e41:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005e47:	50                   	push   eax
10005e48:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005e4e:	50                   	push   eax
10005e4f:	e8 fc ff ff ff       	call   10005e50 <begin(void*)+0xe45>	10005e50: R_386_PC32	strcat
10005e54:	83 c4 10             	add    esp,0x10
10005e57:	83 ec 08             	sub    esp,0x8
10005e5a:	68 4c af 00 10       	push   0x1000af4c	10005e5b: R_386_32	.text
10005e5f:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005e65:	50                   	push   eax
10005e66:	e8 fc ff ff ff       	call   10005e67 <begin(void*)+0xe5c>	10005e67: R_386_PC32	strcat
10005e6b:	83 c4 10             	add    esp,0x10
10005e6e:	83 ec 08             	sub    esp,0x8
10005e71:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005e77:	50                   	push   eax
10005e78:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005e7b:	e8 fc ff ff ff       	call   10005e7c <begin(void*)+0xe71>	10005e7c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005e80:	83 c4 10             	add    esp,0x10
10005e83:	83 ec 04             	sub    esp,0x4
10005e86:	8d 95 86 fd ff ff    	lea    edx,[ebp-0x27a]
10005e8c:	52                   	push   edx
10005e8d:	50                   	push   eax
10005e8e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005e91:	e8 fc ff ff ff       	call   10005e92 <begin(void*)+0xe87>	10005e92: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005e96:	83 c4 10             	add    esp,0x10
10005e99:	83 ec 08             	sub    esp,0x8
10005e9c:	68 22 a4 00 10       	push   0x1000a422	10005e9d: R_386_32	.text
10005ea1:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005ea7:	50                   	push   eax
10005ea8:	e8 fc ff ff ff       	call   10005ea9 <begin(void*)+0xe9e>	10005ea9: R_386_PC32	strcpy
10005ead:	83 c4 10             	add    esp,0x10
10005eb0:	83 ec 08             	sub    esp,0x8
10005eb3:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005eb9:	50                   	push   eax
10005eba:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005ec0:	50                   	push   eax
10005ec1:	e8 fc ff ff ff       	call   10005ec2 <begin(void*)+0xeb7>	10005ec2: R_386_PC32	strcat
10005ec6:	83 c4 10             	add    esp,0x10
10005ec9:	83 ec 08             	sub    esp,0x8
10005ecc:	68 35 a4 00 10       	push   0x1000a435	10005ecd: R_386_32	.text
10005ed1:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005ed7:	50                   	push   eax
10005ed8:	e8 fc ff ff ff       	call   10005ed9 <begin(void*)+0xece>	10005ed9: R_386_PC32	strcat
10005edd:	83 c4 10             	add    esp,0x10
10005ee0:	83 ec 08             	sub    esp,0x8
10005ee3:	68 f6 ab 00 10       	push   0x1000abf6	10005ee4: R_386_32	.text
10005ee8:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005eee:	50                   	push   eax
10005eef:	e8 fc ff ff ff       	call   10005ef0 <begin(void*)+0xee5>	10005ef0: R_386_PC32	strcpy
10005ef4:	83 c4 10             	add    esp,0x10
10005ef7:	83 ec 08             	sub    esp,0x8
10005efa:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005f00:	50                   	push   eax
10005f01:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005f07:	50                   	push   eax
10005f08:	e8 fc ff ff ff       	call   10005f09 <begin(void*)+0xefe>	10005f09: R_386_PC32	strcat
10005f0d:	83 c4 10             	add    esp,0x10
10005f10:	83 ec 08             	sub    esp,0x8
10005f13:	68 55 af 00 10       	push   0x1000af55	10005f14: R_386_32	.text
10005f18:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005f1e:	50                   	push   eax
10005f1f:	e8 fc ff ff ff       	call   10005f20 <begin(void*)+0xf15>	10005f20: R_386_PC32	strcat
10005f24:	83 c4 10             	add    esp,0x10
10005f27:	83 ec 08             	sub    esp,0x8
10005f2a:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005f30:	50                   	push   eax
10005f31:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005f34:	e8 fc ff ff ff       	call   10005f35 <begin(void*)+0xf2a>	10005f35: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005f39:	83 c4 10             	add    esp,0x10
10005f3c:	83 ec 04             	sub    esp,0x4
10005f3f:	8d 95 86 fd ff ff    	lea    edx,[ebp-0x27a]
10005f45:	52                   	push   edx
10005f46:	50                   	push   eax
10005f47:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005f4a:	e8 fc ff ff ff       	call   10005f4b <begin(void*)+0xf40>	10005f4b: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005f4f:	83 c4 10             	add    esp,0x10
10005f52:	83 ec 08             	sub    esp,0x8
10005f55:	68 22 a4 00 10       	push   0x1000a422	10005f56: R_386_32	.text
10005f5a:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005f60:	50                   	push   eax
10005f61:	e8 fc ff ff ff       	call   10005f62 <begin(void*)+0xf57>	10005f62: R_386_PC32	strcpy
10005f66:	83 c4 10             	add    esp,0x10
10005f69:	83 ec 08             	sub    esp,0x8
10005f6c:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005f72:	50                   	push   eax
10005f73:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005f79:	50                   	push   eax
10005f7a:	e8 fc ff ff ff       	call   10005f7b <begin(void*)+0xf70>	10005f7b: R_386_PC32	strcat
10005f7f:	83 c4 10             	add    esp,0x10
10005f82:	83 ec 08             	sub    esp,0x8
10005f85:	68 40 a4 00 10       	push   0x1000a440	10005f86: R_386_32	.text
10005f8a:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005f90:	50                   	push   eax
10005f91:	e8 fc ff ff ff       	call   10005f92 <begin(void*)+0xf87>	10005f92: R_386_PC32	strcat
10005f96:	83 c4 10             	add    esp,0x10
10005f99:	83 ec 08             	sub    esp,0x8
10005f9c:	68 f6 ab 00 10       	push   0x1000abf6	10005f9d: R_386_32	.text
10005fa1:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005fa7:	50                   	push   eax
10005fa8:	e8 fc ff ff ff       	call   10005fa9 <begin(void*)+0xf9e>	10005fa9: R_386_PC32	strcpy
10005fad:	83 c4 10             	add    esp,0x10
10005fb0:	83 ec 08             	sub    esp,0x8
10005fb3:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005fb9:	50                   	push   eax
10005fba:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005fc0:	50                   	push   eax
10005fc1:	e8 fc ff ff ff       	call   10005fc2 <begin(void*)+0xfb7>	10005fc2: R_386_PC32	strcat
10005fc6:	83 c4 10             	add    esp,0x10
10005fc9:	83 ec 08             	sub    esp,0x8
10005fcc:	68 60 af 00 10       	push   0x1000af60	10005fcd: R_386_32	.text
10005fd1:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005fd7:	50                   	push   eax
10005fd8:	e8 fc ff ff ff       	call   10005fd9 <begin(void*)+0xfce>	10005fd9: R_386_PC32	strcat
10005fdd:	83 c4 10             	add    esp,0x10
10005fe0:	83 ec 08             	sub    esp,0x8
10005fe3:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005fe9:	50                   	push   eax
10005fea:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005fed:	e8 fc ff ff ff       	call   10005fee <begin(void*)+0xfe3>	10005fee: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005ff2:	83 c4 10             	add    esp,0x10
10005ff5:	83 ec 04             	sub    esp,0x4
10005ff8:	8d 95 86 fd ff ff    	lea    edx,[ebp-0x27a]
10005ffe:	52                   	push   edx
10005fff:	50                   	push   eax
10006000:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006003:	e8 fc ff ff ff       	call   10006004 <begin(void*)+0xff9>	10006004: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006008:	83 c4 10             	add    esp,0x10
1000600b:	83 ec 08             	sub    esp,0x8
1000600e:	68 22 a4 00 10       	push   0x1000a422	1000600f: R_386_32	.text
10006013:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10006019:	50                   	push   eax
1000601a:	e8 fc ff ff ff       	call   1000601b <begin(void*)+0x1010>	1000601b: R_386_PC32	strcpy
1000601f:	83 c4 10             	add    esp,0x10
10006022:	83 ec 08             	sub    esp,0x8
10006025:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
1000602b:	50                   	push   eax
1000602c:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10006032:	50                   	push   eax
10006033:	e8 fc ff ff ff       	call   10006034 <begin(void*)+0x1029>	10006034: R_386_PC32	strcat
10006038:	83 c4 10             	add    esp,0x10
1000603b:	83 ec 08             	sub    esp,0x8
1000603e:	68 4b a4 00 10       	push   0x1000a44b	1000603f: R_386_32	.text
10006043:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10006049:	50                   	push   eax
1000604a:	e8 fc ff ff ff       	call   1000604b <begin(void*)+0x1040>	1000604b: R_386_PC32	strcat
1000604f:	83 c4 10             	add    esp,0x10
10006052:	83 ec 08             	sub    esp,0x8
10006055:	68 f6 ab 00 10       	push   0x1000abf6	10006056: R_386_32	.text
1000605a:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006060:	50                   	push   eax
10006061:	e8 fc ff ff ff       	call   10006062 <begin(void*)+0x1057>	10006062: R_386_PC32	strcpy
10006066:	83 c4 10             	add    esp,0x10
10006069:	83 ec 08             	sub    esp,0x8
1000606c:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10006072:	50                   	push   eax
10006073:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006079:	50                   	push   eax
1000607a:	e8 fc ff ff ff       	call   1000607b <begin(void*)+0x1070>	1000607b: R_386_PC32	strcat
1000607f:	83 c4 10             	add    esp,0x10
10006082:	83 ec 08             	sub    esp,0x8
10006085:	68 6b af 00 10       	push   0x1000af6b	10006086: R_386_32	.text
1000608a:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006090:	50                   	push   eax
10006091:	e8 fc ff ff ff       	call   10006092 <begin(void*)+0x1087>	10006092: R_386_PC32	strcat
10006096:	83 c4 10             	add    esp,0x10
10006099:	83 ec 08             	sub    esp,0x8
1000609c:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100060a2:	50                   	push   eax
100060a3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100060a6:	e8 fc ff ff ff       	call   100060a7 <begin(void*)+0x109c>	100060a7: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100060ab:	83 c4 10             	add    esp,0x10
100060ae:	83 ec 04             	sub    esp,0x4
100060b1:	8d 95 86 fd ff ff    	lea    edx,[ebp-0x27a]
100060b7:	52                   	push   edx
100060b8:	50                   	push   eax
100060b9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100060bc:	e8 fc ff ff ff       	call   100060bd <begin(void*)+0x10b2>	100060bd: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100060c1:	83 c4 10             	add    esp,0x10
100060c4:	83 ec 08             	sub    esp,0x8
100060c7:	68 22 a4 00 10       	push   0x1000a422	100060c8: R_386_32	.text
100060cc:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100060d2:	50                   	push   eax
100060d3:	e8 fc ff ff ff       	call   100060d4 <begin(void*)+0x10c9>	100060d4: R_386_PC32	strcpy
100060d8:	83 c4 10             	add    esp,0x10
100060db:	83 ec 08             	sub    esp,0x8
100060de:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
100060e4:	50                   	push   eax
100060e5:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100060eb:	50                   	push   eax
100060ec:	e8 fc ff ff ff       	call   100060ed <begin(void*)+0x10e2>	100060ed: R_386_PC32	strcat
100060f1:	83 c4 10             	add    esp,0x10
100060f4:	83 ec 08             	sub    esp,0x8
100060f7:	68 67 a4 00 10       	push   0x1000a467	100060f8: R_386_32	.text
100060fc:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10006102:	50                   	push   eax
10006103:	e8 fc ff ff ff       	call   10006104 <begin(void*)+0x10f9>	10006104: R_386_PC32	strcat
10006108:	83 c4 10             	add    esp,0x10
1000610b:	83 ec 08             	sub    esp,0x8
1000610e:	68 f6 ab 00 10       	push   0x1000abf6	1000610f: R_386_32	.text
10006113:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006119:	50                   	push   eax
1000611a:	e8 fc ff ff ff       	call   1000611b <begin(void*)+0x1110>	1000611b: R_386_PC32	strcpy
1000611f:	83 c4 10             	add    esp,0x10
10006122:	83 ec 08             	sub    esp,0x8
10006125:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
1000612b:	50                   	push   eax
1000612c:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006132:	50                   	push   eax
10006133:	e8 fc ff ff ff       	call   10006134 <begin(void*)+0x1129>	10006134: R_386_PC32	strcat
10006138:	83 c4 10             	add    esp,0x10
1000613b:	83 ec 08             	sub    esp,0x8
1000613e:	68 75 af 00 10       	push   0x1000af75	1000613f: R_386_32	.text
10006143:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006149:	50                   	push   eax
1000614a:	e8 fc ff ff ff       	call   1000614b <begin(void*)+0x1140>	1000614b: R_386_PC32	strcat
1000614f:	83 c4 10             	add    esp,0x10
10006152:	83 ec 08             	sub    esp,0x8
10006155:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000615b:	50                   	push   eax
1000615c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000615f:	e8 fc ff ff ff       	call   10006160 <begin(void*)+0x1155>	10006160: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006164:	83 c4 10             	add    esp,0x10
10006167:	83 ec 04             	sub    esp,0x4
1000616a:	8d 95 86 fd ff ff    	lea    edx,[ebp-0x27a]
10006170:	52                   	push   edx
10006171:	50                   	push   eax
10006172:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006175:	e8 fc ff ff ff       	call   10006176 <begin(void*)+0x116b>	10006176: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000617a:	83 c4 10             	add    esp,0x10
1000617d:	83 ec 08             	sub    esp,0x8
10006180:	68 22 a4 00 10       	push   0x1000a422	10006181: R_386_32	.text
10006185:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
1000618b:	50                   	push   eax
1000618c:	e8 fc ff ff ff       	call   1000618d <begin(void*)+0x1182>	1000618d: R_386_PC32	strcpy
10006191:	83 c4 10             	add    esp,0x10
10006194:	83 ec 08             	sub    esp,0x8
10006197:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
1000619d:	50                   	push   eax
1000619e:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100061a4:	50                   	push   eax
100061a5:	e8 fc ff ff ff       	call   100061a6 <begin(void*)+0x119b>	100061a6: R_386_PC32	strcat
100061aa:	83 c4 10             	add    esp,0x10
100061ad:	83 ec 08             	sub    esp,0x8
100061b0:	68 60 a4 00 10       	push   0x1000a460	100061b1: R_386_32	.text
100061b5:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100061bb:	50                   	push   eax
100061bc:	e8 fc ff ff ff       	call   100061bd <begin(void*)+0x11b2>	100061bd: R_386_PC32	strcat
100061c1:	83 c4 10             	add    esp,0x10
100061c4:	83 ec 08             	sub    esp,0x8
100061c7:	68 f6 ab 00 10       	push   0x1000abf6	100061c8: R_386_32	.text
100061cc:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100061d2:	50                   	push   eax
100061d3:	e8 fc ff ff ff       	call   100061d4 <begin(void*)+0x11c9>	100061d4: R_386_PC32	strcpy
100061d8:	83 c4 10             	add    esp,0x10
100061db:	83 ec 08             	sub    esp,0x8
100061de:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
100061e4:	50                   	push   eax
100061e5:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100061eb:	50                   	push   eax
100061ec:	e8 fc ff ff ff       	call   100061ed <begin(void*)+0x11e2>	100061ed: R_386_PC32	strcat
100061f1:	83 c4 10             	add    esp,0x10
100061f4:	83 ec 08             	sub    esp,0x8
100061f7:	68 7d af 00 10       	push   0x1000af7d	100061f8: R_386_32	.text
100061fc:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006202:	50                   	push   eax
10006203:	e8 fc ff ff ff       	call   10006204 <begin(void*)+0x11f9>	10006204: R_386_PC32	strcat
10006208:	83 c4 10             	add    esp,0x10
1000620b:	83 ec 08             	sub    esp,0x8
1000620e:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006214:	50                   	push   eax
10006215:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006218:	e8 fc ff ff ff       	call   10006219 <begin(void*)+0x120e>	10006219: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000621d:	83 c4 10             	add    esp,0x10
10006220:	83 ec 04             	sub    esp,0x4
10006223:	8d 95 86 fd ff ff    	lea    edx,[ebp-0x27a]
10006229:	52                   	push   edx
1000622a:	50                   	push   eax
1000622b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000622e:	e8 fc ff ff ff       	call   1000622f <begin(void*)+0x1224>	1000622f: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006233:	83 c4 10             	add    esp,0x10
10006236:	83 ec 08             	sub    esp,0x8
10006239:	68 22 a4 00 10       	push   0x1000a422	1000623a: R_386_32	.text
1000623e:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10006244:	50                   	push   eax
10006245:	e8 fc ff ff ff       	call   10006246 <begin(void*)+0x123b>	10006246: R_386_PC32	strcpy
1000624a:	83 c4 10             	add    esp,0x10
1000624d:	83 ec 08             	sub    esp,0x8
10006250:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10006256:	50                   	push   eax
10006257:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
1000625d:	50                   	push   eax
1000625e:	e8 fc ff ff ff       	call   1000625f <begin(void*)+0x1254>	1000625f: R_386_PC32	strcat
10006263:	83 c4 10             	add    esp,0x10
10006266:	83 ec 08             	sub    esp,0x8
10006269:	68 55 a4 00 10       	push   0x1000a455	1000626a: R_386_32	.text
1000626e:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10006274:	50                   	push   eax
10006275:	e8 fc ff ff ff       	call   10006276 <begin(void*)+0x126b>	10006276: R_386_PC32	strcat
1000627a:	83 c4 10             	add    esp,0x10
1000627d:	83 ec 08             	sub    esp,0x8
10006280:	68 f6 ab 00 10       	push   0x1000abf6	10006281: R_386_32	.text
10006285:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000628b:	50                   	push   eax
1000628c:	e8 fc ff ff ff       	call   1000628d <begin(void*)+0x1282>	1000628d: R_386_PC32	strcpy
10006291:	83 c4 10             	add    esp,0x10
10006294:	83 ec 08             	sub    esp,0x8
10006297:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
1000629d:	50                   	push   eax
1000629e:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100062a4:	50                   	push   eax
100062a5:	e8 fc ff ff ff       	call   100062a6 <begin(void*)+0x129b>	100062a6: R_386_PC32	strcat
100062aa:	83 c4 10             	add    esp,0x10
100062ad:	83 ec 08             	sub    esp,0x8
100062b0:	68 84 af 00 10       	push   0x1000af84	100062b1: R_386_32	.text
100062b5:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100062bb:	50                   	push   eax
100062bc:	e8 fc ff ff ff       	call   100062bd <begin(void*)+0x12b2>	100062bd: R_386_PC32	strcat
100062c1:	83 c4 10             	add    esp,0x10
100062c4:	83 ec 08             	sub    esp,0x8
100062c7:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100062cd:	50                   	push   eax
100062ce:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100062d1:	e8 fc ff ff ff       	call   100062d2 <begin(void*)+0x12c7>	100062d2: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100062d6:	83 c4 10             	add    esp,0x10
100062d9:	83 ec 04             	sub    esp,0x4
100062dc:	8d 95 86 fd ff ff    	lea    edx,[ebp-0x27a]
100062e2:	52                   	push   edx
100062e3:	50                   	push   eax
100062e4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100062e7:	e8 fc ff ff ff       	call   100062e8 <begin(void*)+0x12dd>	100062e8: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100062ec:	83 c4 10             	add    esp,0x10
100062ef:	83 ec 0c             	sub    esp,0xc
100062f2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100062f5:	e8 fc ff ff ff       	call   100062f6 <begin(void*)+0x12eb>	100062f6: R_386_PC32	CmClose(Reghive_Tag*)
100062fa:	83 c4 10             	add    esp,0x10
100062fd:	83 ec 0c             	sub    esp,0xc
10006300:	68 90 af 00 10       	push   0x1000af90	10006301: R_386_32	.text
10006305:	e8 fc ff ff ff       	call   10006306 <begin(void*)+0x12fb>	10006306: R_386_PC32	Dbg::kprintf(char const*, ...)
1000630a:	83 c4 10             	add    esp,0x10
1000630d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000630e: R_386_32	term
10006312:	83 ec 0c             	sub    esp,0xc
10006315:	50                   	push   eax
10006316:	e8 fc ff ff ff       	call   10006317 <begin(void*)+0x130c>	10006317: R_386_PC32	setActiveTerminal(VgaText*)
1000631b:	83 c4 10             	add    esp,0x10
1000631e:	e8 fc ff ff ff       	call   1000631f <begin(void*)+0x1314>	1000631f: R_386_PC32	drawBootScreen()
10006323:	83 ec 0c             	sub    esp,0xc
10006326:	68 29 aa 00 10       	push   0x1000aa29	10006327: R_386_32	.text
1000632b:	6a 0d                	push   0xd
1000632d:	6a 32                	push   0x32
1000632f:	6a 05                	push   0x5
10006331:	6a 16                	push   0x16
10006333:	e8 fc ff ff ff       	call   10006334 <begin(void*)+0x1329>	10006334: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10006338:	83 c4 20             	add    esp,0x20
1000633b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000633c: R_386_32	term
10006340:	83 ec 04             	sub    esp,0x4
10006343:	6a 08                	push   0x8
10006345:	6a 18                	push   0x18
10006347:	50                   	push   eax
10006348:	e8 fc ff ff ff       	call   10006349 <begin(void*)+0x133e>	10006349: R_386_PC32	VgaText::setCursor(int, int)
1000634d:	83 c4 10             	add    esp,0x10
10006350:	a1 00 00 00 00       	mov    eax,ds:0x0	10006351: R_386_32	term
10006355:	83 ec 08             	sub    esp,0x8
10006358:	68 b8 af 00 10       	push   0x1000afb8	10006359: R_386_32	.text
1000635d:	50                   	push   eax
1000635e:	e8 fc ff ff ff       	call   1000635f <begin(void*)+0x1354>	1000635f: R_386_PC32	VgaText::puts(char const*)
10006363:	83 c4 10             	add    esp,0x10
10006366:	a1 00 00 00 00       	mov    eax,ds:0x0	10006367: R_386_32	term
1000636b:	83 ec 04             	sub    esp,0x4
1000636e:	6a 0a                	push   0xa
10006370:	6a 18                	push   0x18
10006372:	50                   	push   eax
10006373:	e8 fc ff ff ff       	call   10006374 <begin(void*)+0x1369>	10006374: R_386_PC32	VgaText::setCursor(int, int)
10006378:	83 c4 10             	add    esp,0x10
1000637b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000637c: R_386_32	term
10006380:	83 ec 08             	sub    esp,0x8
10006383:	68 e0 af 00 10       	push   0x1000afe0	10006384: R_386_32	.text
10006388:	50                   	push   eax
10006389:	e8 fc ff ff ff       	call   1000638a <begin(void*)+0x137f>	1000638a: R_386_PC32	VgaText::puts(char const*)
1000638e:	83 c4 10             	add    esp,0x10
10006391:	a1 00 00 00 00       	mov    eax,ds:0x0	10006392: R_386_32	term
10006396:	83 ec 04             	sub    esp,0x4
10006399:	6a 0b                	push   0xb
1000639b:	6a 18                	push   0x18
1000639d:	50                   	push   eax
1000639e:	e8 fc ff ff ff       	call   1000639f <begin(void*)+0x1394>	1000639f: R_386_PC32	VgaText::setCursor(int, int)
100063a3:	83 c4 10             	add    esp,0x10
100063a6:	a1 00 00 00 00       	mov    eax,ds:0x0	100063a7: R_386_32	term
100063ab:	83 ec 08             	sub    esp,0x8
100063ae:	68 0c b0 00 10       	push   0x1000b00c	100063af: R_386_32	.text
100063b3:	50                   	push   eax
100063b4:	e8 fc ff ff ff       	call   100063b5 <begin(void*)+0x13aa>	100063b5: R_386_PC32	VgaText::puts(char const*)
100063b9:	83 c4 10             	add    esp,0x10
100063bc:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100063be: R_386_32	installKey
100063c3:	a0 00 00 00 00       	mov    al,ds:0x0	100063c4: R_386_32	installKey
100063c8:	84 c0                	test   al,al
100063ca:	0f 94 c0             	sete   al
100063cd:	84 c0                	test   al,al
100063cf:	74 02                	je     100063d3 <begin(void*)+0x13c8>
100063d1:	eb f0                	jmp    100063c3 <begin(void*)+0x13b8>
100063d3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100063d5: R_386_32	installKey
100063da:	a1 00 00 00 00       	mov    eax,ds:0x0	100063db: R_386_32	term
100063df:	83 ec 04             	sub    esp,0x4
100063e2:	6a 0c                	push   0xc
100063e4:	6a 18                	push   0x18
100063e6:	50                   	push   eax
100063e7:	e8 fc ff ff ff       	call   100063e8 <begin(void*)+0x13dd>	100063e8: R_386_PC32	VgaText::setCursor(int, int)
100063ec:	83 c4 10             	add    esp,0x10
100063ef:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100063f1: R_386_32	Krnl::computer
100063f5:	a1 00 00 00 00       	mov    eax,ds:0x0	100063f6: R_386_32	Krnl::computer
100063fa:	8b 00                	mov    eax,DWORD PTR [eax]
100063fc:	83 c0 0c             	add    eax,0xc
100063ff:	8b 00                	mov    eax,DWORD PTR [eax]
10006401:	6a 00                	push   0x0
10006403:	6a 00                	push   0x0
10006405:	6a 01                	push   0x1
10006407:	52                   	push   edx
10006408:	ff d0                	call   eax
1000640a:	83 c4 10             	add    esp,0x10
1000640d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000640e: R_386_32	term
10006412:	6a 0f                	push   0xf
10006414:	6a 0c                	push   0xc
10006416:	68 20 b0 00 10       	push   0x1000b020	10006417: R_386_32	.text
1000641b:	50                   	push   eax
1000641c:	e8 fc ff ff ff       	call   1000641d <begin(void*)+0x1412>	1000641d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006421:	83 c4 10             	add    esp,0x10
10006424:	e9 c2 0d 00 00       	jmp    100071eb <begin(void*)+0x21e0>
10006429:	e8 fc ff ff ff       	call   1000642a <begin(void*)+0x141f>	1000642a: R_386_PC32	KeLoadClockSettings()
1000642e:	83 ec 0c             	sub    esp,0xc
10006431:	68 b8 ab 00 10       	push   0x1000abb8	10006432: R_386_32	.text
10006436:	e8 fc ff ff ff       	call   10006437 <begin(void*)+0x142c>	10006437: R_386_PC32	CmOpen(char const*)
1000643b:	83 c4 10             	add    esp,0x10
1000643e:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10006441:	83 ec 08             	sub    esp,0x8
10006444:	68 72 ad 00 10       	push   0x1000ad72	10006445: R_386_32	.text
10006449:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000644c:	e8 fc ff ff ff       	call   1000644d <begin(void*)+0x1442>	1000644d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006451:	83 c4 10             	add    esp,0x10
10006454:	83 ec 04             	sub    esp,0x4
10006457:	8d 95 86 fd ff ff    	lea    edx,[ebp-0x27a]
1000645d:	52                   	push   edx
1000645e:	50                   	push   eax
1000645f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006462:	e8 fc ff ff ff       	call   10006463 <begin(void*)+0x1458>	10006463: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006467:	83 c4 10             	add    esp,0x10
1000646a:	83 ec 08             	sub    esp,0x8
1000646d:	68 46 b0 00 10       	push   0x1000b046	1000646e: R_386_32	.text
10006472:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006475:	e8 fc ff ff ff       	call   10006476 <begin(void*)+0x146b>	10006476: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000647a:	83 c4 10             	add    esp,0x10
1000647d:	83 ec 04             	sub    esp,0x4
10006480:	8d 55 80             	lea    edx,[ebp-0x80]
10006483:	52                   	push   edx
10006484:	50                   	push   eax
10006485:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006488:	e8 fc ff ff ff       	call   10006489 <begin(void*)+0x147e>	10006489: R_386_PC32	CmGetInteger(Reghive_Tag*, int, unsigned long long*)
1000648d:	83 c4 10             	add    esp,0x10
10006490:	83 ec 0c             	sub    esp,0xc
10006493:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006496:	e8 fc ff ff ff       	call   10006497 <begin(void*)+0x148c>	10006497: R_386_PC32	CmClose(Reghive_Tag*)
1000649b:	83 c4 10             	add    esp,0x10
1000649e:	83 ec 0c             	sub    esp,0xc
100064a1:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100064a7:	50                   	push   eax
100064a8:	e8 fc ff ff ff       	call   100064a9 <begin(void*)+0x149e>	100064a9: R_386_PC32	checkExtendedKey(char*)
100064ad:	83 c4 10             	add    esp,0x10
100064b0:	85 c0                	test   eax,eax
100064b2:	0f 94 c0             	sete   al
100064b5:	84 c0                	test   al,al
100064b7:	0f 84 ed 01 00 00    	je     100066aa <begin(void*)+0x169f>
100064bd:	83 ec 0c             	sub    esp,0xc
100064c0:	6a 01                	push   0x1
100064c2:	e8 fc ff ff ff       	call   100064c3 <begin(void*)+0x14b8>	100064c3: R_386_PC32	firstRun(bool)
100064c7:	83 c4 10             	add    esp,0x10
100064ca:	83 ec 0c             	sub    esp,0xc
100064cd:	68 b8 ab 00 10       	push   0x1000abb8	100064ce: R_386_32	.text
100064d2:	e8 fc ff ff ff       	call   100064d3 <begin(void*)+0x14c8>	100064d3: R_386_PC32	CmOpen(char const*)
100064d7:	83 c4 10             	add    esp,0x10
100064da:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
100064dd:	83 ec 04             	sub    esp,0x4
100064e0:	68 dd ab 00 10       	push   0x1000abdd	100064e1: R_386_32	.text
100064e5:	6a 00                	push   0x0
100064e7:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100064ea:	e8 fc ff ff ff       	call   100064eb <begin(void*)+0x14e0>	100064eb: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100064ef:	83 c4 10             	add    esp,0x10
100064f2:	83 ec 08             	sub    esp,0x8
100064f5:	68 dd ab 00 10       	push   0x1000abdd	100064f6: R_386_32	.text
100064fa:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100064fd:	e8 fc ff ff ff       	call   100064fe <begin(void*)+0x14f3>	100064fe: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006502:	83 c4 10             	add    esp,0x10
10006505:	83 ec 08             	sub    esp,0x8
10006508:	50                   	push   eax
10006509:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000650c:	e8 fc ff ff ff       	call   1000650d <begin(void*)+0x1502>	1000650d: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006511:	83 c4 10             	add    esp,0x10
10006514:	83 ec 04             	sub    esp,0x4
10006517:	68 17 ac 00 10       	push   0x1000ac17	10006518: R_386_32	.text
1000651c:	50                   	push   eax
1000651d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006520:	e8 fc ff ff ff       	call   10006521 <begin(void*)+0x1516>	10006521: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10006525:	83 c4 10             	add    esp,0x10
10006528:	83 ec 08             	sub    esp,0x8
1000652b:	68 9b ac 00 10       	push   0x1000ac9b	1000652c: R_386_32	.text
10006530:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006533:	e8 fc ff ff ff       	call   10006534 <begin(void*)+0x1529>	10006534: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006538:	83 c4 10             	add    esp,0x10
1000653b:	83 ec 08             	sub    esp,0x8
1000653e:	50                   	push   eax
1000653f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006542:	e8 fc ff ff ff       	call   10006543 <begin(void*)+0x1538>	10006543: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006547:	83 c4 10             	add    esp,0x10
1000654a:	83 ec 04             	sub    esp,0x4
1000654d:	68 b5 ac 00 10       	push   0x1000acb5	1000654e: R_386_32	.text
10006552:	50                   	push   eax
10006553:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006556:	e8 fc ff ff ff       	call   10006557 <begin(void*)+0x154c>	10006557: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000655b:	83 c4 10             	add    esp,0x10
1000655e:	83 ec 08             	sub    esp,0x8
10006561:	68 72 ad 00 10       	push   0x1000ad72	10006562: R_386_32	.text
10006566:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006569:	e8 fc ff ff ff       	call   1000656a <begin(void*)+0x155f>	1000656a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000656e:	83 c4 10             	add    esp,0x10
10006571:	83 ec 04             	sub    esp,0x4
10006574:	68 00 00 00 00       	push   0x0	10006575: R_386_32	pkeybuf
10006579:	50                   	push   eax
1000657a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000657d:	e8 fc ff ff ff       	call   1000657e <begin(void*)+0x1573>	1000657e: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006582:	83 c4 10             	add    esp,0x10
10006585:	83 ec 0c             	sub    esp,0xc
10006588:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000658b:	e8 fc ff ff ff       	call   1000658c <begin(void*)+0x1581>	1000658c: R_386_PC32	CmClose(Reghive_Tag*)
10006590:	83 c4 10             	add    esp,0x10
10006593:	a1 00 00 00 00       	mov    eax,ds:0x0	10006594: R_386_32	term
10006598:	83 ec 0c             	sub    esp,0xc
1000659b:	50                   	push   eax
1000659c:	e8 fc ff ff ff       	call   1000659d <begin(void*)+0x1592>	1000659d: R_386_PC32	setActiveTerminal(VgaText*)
100065a1:	83 c4 10             	add    esp,0x10
100065a4:	e8 fc ff ff ff       	call   100065a5 <begin(void*)+0x159a>	100065a5: R_386_PC32	drawBootScreen()
100065a9:	83 ec 0c             	sub    esp,0xc
100065ac:	68 5a b0 00 10       	push   0x1000b05a	100065ad: R_386_32	.text
100065b1:	6a 0d                	push   0xd
100065b3:	6a 32                	push   0x32
100065b5:	6a 05                	push   0x5
100065b7:	6a 16                	push   0x16
100065b9:	e8 fc ff ff ff       	call   100065ba <begin(void*)+0x15af>	100065ba: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100065be:	83 c4 20             	add    esp,0x20
100065c1:	a1 00 00 00 00       	mov    eax,ds:0x0	100065c2: R_386_32	term
100065c6:	83 ec 04             	sub    esp,0x4
100065c9:	6a 08                	push   0x8
100065cb:	6a 18                	push   0x18
100065cd:	50                   	push   eax
100065ce:	e8 fc ff ff ff       	call   100065cf <begin(void*)+0x15c4>	100065cf: R_386_PC32	VgaText::setCursor(int, int)
100065d3:	83 c4 10             	add    esp,0x10
100065d6:	a1 00 00 00 00       	mov    eax,ds:0x0	100065d7: R_386_32	term
100065db:	83 ec 08             	sub    esp,0x8
100065de:	68 70 b0 00 10       	push   0x1000b070	100065df: R_386_32	.text
100065e3:	50                   	push   eax
100065e4:	e8 fc ff ff ff       	call   100065e5 <begin(void*)+0x15da>	100065e5: R_386_PC32	VgaText::puts(char const*)
100065e9:	83 c4 10             	add    esp,0x10
100065ec:	a1 00 00 00 00       	mov    eax,ds:0x0	100065ed: R_386_32	term
100065f1:	83 ec 04             	sub    esp,0x4
100065f4:	6a 0a                	push   0xa
100065f6:	6a 18                	push   0x18
100065f8:	50                   	push   eax
100065f9:	e8 fc ff ff ff       	call   100065fa <begin(void*)+0x15ef>	100065fa: R_386_PC32	VgaText::setCursor(int, int)
100065fe:	83 c4 10             	add    esp,0x10
10006601:	a1 00 00 00 00       	mov    eax,ds:0x0	10006602: R_386_32	term
10006606:	83 ec 08             	sub    esp,0x8
10006609:	68 e0 af 00 10       	push   0x1000afe0	1000660a: R_386_32	.text
1000660e:	50                   	push   eax
1000660f:	e8 fc ff ff ff       	call   10006610 <begin(void*)+0x1605>	10006610: R_386_PC32	VgaText::puts(char const*)
10006614:	83 c4 10             	add    esp,0x10
10006617:	a1 00 00 00 00       	mov    eax,ds:0x0	10006618: R_386_32	term
1000661c:	83 ec 04             	sub    esp,0x4
1000661f:	6a 0b                	push   0xb
10006621:	6a 18                	push   0x18
10006623:	50                   	push   eax
10006624:	e8 fc ff ff ff       	call   10006625 <begin(void*)+0x161a>	10006625: R_386_PC32	VgaText::setCursor(int, int)
10006629:	83 c4 10             	add    esp,0x10
1000662c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000662d: R_386_32	term
10006631:	83 ec 08             	sub    esp,0x8
10006634:	68 0c b0 00 10       	push   0x1000b00c	10006635: R_386_32	.text
10006639:	50                   	push   eax
1000663a:	e8 fc ff ff ff       	call   1000663b <begin(void*)+0x1630>	1000663b: R_386_PC32	VgaText::puts(char const*)
1000663f:	83 c4 10             	add    esp,0x10
10006642:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006644: R_386_32	installKey
10006649:	a0 00 00 00 00       	mov    al,ds:0x0	1000664a: R_386_32	installKey
1000664e:	84 c0                	test   al,al
10006650:	0f 94 c0             	sete   al
10006653:	84 c0                	test   al,al
10006655:	74 02                	je     10006659 <begin(void*)+0x164e>
10006657:	eb f0                	jmp    10006649 <begin(void*)+0x163e>
10006659:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000665b: R_386_32	installKey
10006660:	a1 00 00 00 00       	mov    eax,ds:0x0	10006661: R_386_32	term
10006665:	83 ec 04             	sub    esp,0x4
10006668:	6a 0c                	push   0xc
1000666a:	6a 18                	push   0x18
1000666c:	50                   	push   eax
1000666d:	e8 fc ff ff ff       	call   1000666e <begin(void*)+0x1663>	1000666e: R_386_PC32	VgaText::setCursor(int, int)
10006672:	83 c4 10             	add    esp,0x10
10006675:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10006677: R_386_32	Krnl::computer
1000667b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000667c: R_386_32	Krnl::computer
10006680:	8b 00                	mov    eax,DWORD PTR [eax]
10006682:	83 c0 0c             	add    eax,0xc
10006685:	8b 00                	mov    eax,DWORD PTR [eax]
10006687:	6a 00                	push   0x0
10006689:	6a 00                	push   0x0
1000668b:	6a 01                	push   0x1
1000668d:	52                   	push   edx
1000668e:	ff d0                	call   eax
10006690:	83 c4 10             	add    esp,0x10
10006693:	a1 00 00 00 00       	mov    eax,ds:0x0	10006694: R_386_32	term
10006698:	6a 0f                	push   0xf
1000669a:	6a 0c                	push   0xc
1000669c:	68 20 b0 00 10       	push   0x1000b020	1000669d: R_386_32	.text
100066a1:	50                   	push   eax
100066a2:	e8 fc ff ff ff       	call   100066a3 <begin(void*)+0x1698>	100066a3: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100066a7:	83 c4 10             	add    esp,0x10
100066aa:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100066ac: R_386_32	showSidebar
100066b1:	83 ec 0c             	sub    esp,0xc
100066b4:	68 84 01 00 00       	push   0x184
100066b9:	e8 fc ff ff ff       	call   100066ba <begin(void*)+0x16af>	100066ba: R_386_PC32	operator new(unsigned long)
100066be:	83 c4 10             	add    esp,0x10
100066c1:	89 c3                	mov    ebx,eax
100066c3:	83 ec 08             	sub    esp,0x8
100066c6:	68 68 a6 00 10       	push   0x1000a668	100066c7: R_386_32	.text
100066cb:	53                   	push   ebx
100066cc:	e8 fc ff ff ff       	call   100066cd <begin(void*)+0x16c2>	100066cd: R_386_PC32	VgaText::VgaText(char const*)
100066d1:	83 c4 10             	add    esp,0x10
100066d4:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100066d6: R_386_32	term
100066da:	a1 00 00 00 00       	mov    eax,ds:0x0	100066db: R_386_32	term
100066df:	83 ec 0c             	sub    esp,0xc
100066e2:	50                   	push   eax
100066e3:	e8 fc ff ff ff       	call   100066e4 <begin(void*)+0x16d9>	100066e4: R_386_PC32	setActiveTerminal(VgaText*)
100066e8:	83 c4 10             	add    esp,0x10
100066eb:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100066f2:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100066f9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100066fb: R_386_32	installKey
10006700:	83 ec 04             	sub    esp,0x4
10006703:	68 80 00 00 00       	push   0x80
10006708:	6a 00                	push   0x0
1000670a:	8d 85 84 fa ff ff    	lea    eax,[ebp-0x57c]
10006710:	50                   	push   eax
10006711:	e8 fc ff ff ff       	call   10006712 <begin(void*)+0x1707>	10006712: R_386_PC32	memset
10006716:	83 c4 10             	add    esp,0x10
10006719:	83 ec 04             	sub    esp,0x4
1000671c:	68 80 00 00 00       	push   0x80
10006721:	6a 00                	push   0x0
10006723:	8d 85 04 fb ff ff    	lea    eax,[ebp-0x4fc]
10006729:	50                   	push   eax
1000672a:	e8 fc ff ff ff       	call   1000672b <begin(void*)+0x1720>	1000672b: R_386_PC32	memset
1000672f:	83 c4 10             	add    esp,0x10
10006732:	83 ec 0c             	sub    esp,0xc
10006735:	68 b8 ab 00 10       	push   0x1000abb8	10006736: R_386_32	.text
1000673a:	e8 fc ff ff ff       	call   1000673b <begin(void*)+0x1730>	1000673b: R_386_PC32	CmOpen(char const*)
1000673f:	83 c4 10             	add    esp,0x10
10006742:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10006745:	83 ec 08             	sub    esp,0x8
10006748:	68 37 ac 00 10       	push   0x1000ac37	10006749: R_386_32	.text
1000674d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006750:	e8 fc ff ff ff       	call   10006751 <begin(void*)+0x1746>	10006751: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006755:	83 c4 10             	add    esp,0x10
10006758:	83 ec 08             	sub    esp,0x8
1000675b:	50                   	push   eax
1000675c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000675f:	e8 fc ff ff ff       	call   10006760 <begin(void*)+0x1755>	10006760: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006764:	83 c4 10             	add    esp,0x10
10006767:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000676a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000676e:	0f 84 88 01 00 00    	je     100068fc <begin(void*)+0x18f1>
10006774:	83 ec 04             	sub    esp,0x4
10006777:	6a 50                	push   0x50
10006779:	6a 00                	push   0x0
1000677b:	8d 85 e4 f9 ff ff    	lea    eax,[ebp-0x61c]
10006781:	50                   	push   eax
10006782:	e8 fc ff ff ff       	call   10006783 <begin(void*)+0x1778>	10006783: R_386_PC32	memset
10006787:	83 c4 10             	add    esp,0x10
1000678a:	83 ec 04             	sub    esp,0x4
1000678d:	8d 85 e4 f9 ff ff    	lea    eax,[ebp-0x61c]
10006793:	50                   	push   eax
10006794:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10006797:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000679a:	e8 fc ff ff ff       	call   1000679b <begin(void*)+0x1790>	1000679b: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
1000679f:	83 c4 10             	add    esp,0x10
100067a2:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
100067a5:	83 7d 9c 4e          	cmp    DWORD PTR [ebp-0x64],0x4e
100067a9:	0f 85 34 01 00 00    	jne    100068e3 <begin(void*)+0x18d8>
100067af:	83 ec 0c             	sub    esp,0xc
100067b2:	6a 50                	push   0x50
100067b4:	e8 fc ff ff ff       	call   100067b5 <begin(void*)+0x17aa>	100067b5: R_386_PC32	malloc
100067b9:	83 c4 10             	add    esp,0x10
100067bc:	89 c2                	mov    edx,eax
100067be:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100067c1:	89 94 85 04 fb ff ff 	mov    DWORD PTR [ebp+eax*4-0x4fc],edx
100067c8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100067cb:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
100067d2:	83 ec 08             	sub    esp,0x8
100067d5:	8d 95 e4 f9 ff ff    	lea    edx,[ebp-0x61c]
100067db:	52                   	push   edx
100067dc:	50                   	push   eax
100067dd:	e8 fc ff ff ff       	call   100067de <begin(void*)+0x17d3>	100067de: R_386_PC32	strcpy
100067e2:	83 c4 10             	add    esp,0x10
100067e5:	83 ec 08             	sub    esp,0x8
100067e8:	68 f6 ab 00 10       	push   0x1000abf6	100067e9: R_386_32	.text
100067ed:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100067f3:	50                   	push   eax
100067f4:	e8 fc ff ff ff       	call   100067f5 <begin(void*)+0x17ea>	100067f5: R_386_PC32	strcpy
100067f9:	83 c4 10             	add    esp,0x10
100067fc:	83 ec 08             	sub    esp,0x8
100067ff:	8d 85 e4 f9 ff ff    	lea    eax,[ebp-0x61c]
10006805:	50                   	push   eax
10006806:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000680c:	50                   	push   eax
1000680d:	e8 fc ff ff ff       	call   1000680e <begin(void*)+0x1803>	1000680e: R_386_PC32	strcat
10006812:	83 c4 10             	add    esp,0x10
10006815:	83 ec 08             	sub    esp,0x8
10006818:	68 3f af 00 10       	push   0x1000af3f	10006819: R_386_32	.text
1000681d:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006823:	50                   	push   eax
10006824:	e8 fc ff ff ff       	call   10006825 <begin(void*)+0x181a>	10006825: R_386_PC32	strcat
10006829:	83 c4 10             	add    esp,0x10
1000682c:	83 ec 08             	sub    esp,0x8
1000682f:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006835:	50                   	push   eax
10006836:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006839:	e8 fc ff ff ff       	call   1000683a <begin(void*)+0x182f>	1000683a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000683e:	83 c4 10             	add    esp,0x10
10006841:	83 ec 04             	sub    esp,0x4
10006844:	8d 95 e4 f9 ff ff    	lea    edx,[ebp-0x61c]
1000684a:	52                   	push   edx
1000684b:	50                   	push   eax
1000684c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000684f:	e8 fc ff ff ff       	call   10006850 <begin(void*)+0x1845>	10006850: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006854:	83 c4 10             	add    esp,0x10
10006857:	83 ec 0c             	sub    esp,0xc
1000685a:	6a 50                	push   0x50
1000685c:	e8 fc ff ff ff       	call   1000685d <begin(void*)+0x1852>	1000685d: R_386_PC32	malloc
10006861:	83 c4 10             	add    esp,0x10
10006864:	89 c2                	mov    edx,eax
10006866:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006869:	89 94 85 84 fa ff ff 	mov    DWORD PTR [ebp+eax*4-0x57c],edx
10006870:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006873:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
1000687a:	83 ec 08             	sub    esp,0x8
1000687d:	68 2f a6 00 10       	push   0x1000a62f	1000687e: R_386_32	.text
10006882:	50                   	push   eax
10006883:	e8 fc ff ff ff       	call   10006884 <begin(void*)+0x1879>	10006884: R_386_PC32	strcpy
10006888:	83 c4 10             	add    esp,0x10
1000688b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000688e:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
10006895:	83 ec 08             	sub    esp,0x8
10006898:	8d 95 e4 f9 ff ff    	lea    edx,[ebp-0x61c]
1000689e:	52                   	push   edx
1000689f:	50                   	push   eax
100068a0:	e8 fc ff ff ff       	call   100068a1 <begin(void*)+0x1896>	100068a1: R_386_PC32	strcat
100068a5:	83 c4 10             	add    esp,0x10
100068a8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100068ab:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
100068b2:	83 ec 0c             	sub    esp,0xc
100068b5:	50                   	push   eax
100068b6:	e8 fc ff ff ff       	call   100068b7 <begin(void*)+0x18ac>	100068b7: R_386_PC32	strlen
100068bb:	83 c4 10             	add    esp,0x10
100068be:	83 f8 31             	cmp    eax,0x31
100068c1:	77 1d                	ja     100068e0 <begin(void*)+0x18d5>
100068c3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100068c6:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
100068cd:	83 ec 08             	sub    esp,0x8
100068d0:	68 2f a6 00 10       	push   0x1000a62f	100068d1: R_386_32	.text
100068d5:	50                   	push   eax
100068d6:	e8 fc ff ff ff       	call   100068d7 <begin(void*)+0x18cc>	100068d7: R_386_PC32	strcat
100068db:	83 c4 10             	add    esp,0x10
100068de:	eb c8                	jmp    100068a8 <begin(void*)+0x189d>
100068e0:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
100068e3:	83 ec 08             	sub    esp,0x8
100068e6:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100068e9:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100068ec:	e8 fc ff ff ff       	call   100068ed <begin(void*)+0x18e2>	100068ed: R_386_PC32	CmGetNext(Reghive_Tag*, int)
100068f1:	83 c4 10             	add    esp,0x10
100068f4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100068f7:	e9 6e fe ff ff       	jmp    1000676a <begin(void*)+0x175f>
100068fc:	83 ec 0c             	sub    esp,0xc
100068ff:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006902:	e8 fc ff ff ff       	call   10006903 <begin(void*)+0x18f8>	10006903: R_386_PC32	CmClose(Reghive_Tag*)
10006907:	83 c4 10             	add    esp,0x10
1000690a:	83 ec 0c             	sub    esp,0xc
1000690d:	6a 50                	push   0x50
1000690f:	e8 fc ff ff ff       	call   10006910 <begin(void*)+0x1905>	10006910: R_386_PC32	malloc
10006914:	83 c4 10             	add    esp,0x10
10006917:	89 c2                	mov    edx,eax
10006919:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000691c:	89 94 85 84 fa ff ff 	mov    DWORD PTR [ebp+eax*4-0x57c],edx
10006923:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006926:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
1000692d:	83 ec 08             	sub    esp,0x8
10006930:	68 94 b0 00 10       	push   0x1000b094	10006931: R_386_32	.text
10006935:	50                   	push   eax
10006936:	e8 fc ff ff ff       	call   10006937 <begin(void*)+0x192c>	10006937: R_386_PC32	strcpy
1000693b:	83 c4 10             	add    esp,0x10
1000693e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10006941:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10006943: R_386_32	guiKeyboardHandler
	10006947: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
1000694b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000694d: R_386_32	installKey
10006952:	e8 fc ff ff ff       	call   10006953 <begin(void*)+0x1948>	10006953: R_386_PC32	drawBootScreen()
10006957:	83 ec 0c             	sub    esp,0xc
1000695a:	68 c7 b0 00 10       	push   0x1000b0c7	1000695b: R_386_32	.text
1000695f:	6a 10                	push   0x10
10006961:	6a 39                	push   0x39
10006963:	6a 03                	push   0x3
10006965:	6a 0c                	push   0xc
10006967:	e8 fc ff ff ff       	call   10006968 <begin(void*)+0x195d>	10006968: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000696c:	83 c4 20             	add    esp,0x20
1000696f:	a1 00 00 00 00       	mov    eax,ds:0x0	10006970: R_386_32	term
10006974:	83 ec 04             	sub    esp,0x4
10006977:	6a 06                	push   0x6
10006979:	6a 0e                	push   0xe
1000697b:	50                   	push   eax
1000697c:	e8 fc ff ff ff       	call   1000697d <begin(void*)+0x1972>	1000697d: R_386_PC32	VgaText::setCursor(int, int)
10006981:	83 c4 10             	add    esp,0x10
10006984:	a1 00 00 00 00       	mov    eax,ds:0x0	10006985: R_386_32	term
10006989:	6a 0f                	push   0xf
1000698b:	6a 00                	push   0x0
1000698d:	68 d0 b0 00 10       	push   0x1000b0d0	1000698e: R_386_32	.text
10006992:	50                   	push   eax
10006993:	e8 fc ff ff ff       	call   10006994 <begin(void*)+0x1989>	10006994: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006998:	83 c4 10             	add    esp,0x10
1000699b:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
1000699f:	75 0c                	jne    100069ad <begin(void*)+0x19a2>
100069a1:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100069a8:	e9 23 01 00 00       	jmp    10006ad0 <begin(void*)+0x1ac5>
100069ad:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
100069b4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100069b7:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
100069ba:	7d 63                	jge    10006a1f <begin(void*)+0x1a14>
100069bc:	a1 00 00 00 00       	mov    eax,ds:0x0	100069bd: R_386_32	term
100069c1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
100069c4:	83 c2 08             	add    edx,0x8
100069c7:	83 ec 04             	sub    esp,0x4
100069ca:	52                   	push   edx
100069cb:	6a 0f                	push   0xf
100069cd:	50                   	push   eax
100069ce:	e8 fc ff ff ff       	call   100069cf <begin(void*)+0x19c4>	100069cf: R_386_PC32	VgaText::setCursor(int, int)
100069d3:	83 c4 10             	add    esp,0x10
100069d6:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100069d8: R_386_32	term
100069dc:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100069df:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
100069e2:	75 07                	jne    100069eb <begin(void*)+0x19e0>
100069e4:	b9 00 00 00 00       	mov    ecx,0x0
100069e9:	eb 05                	jmp    100069f0 <begin(void*)+0x19e5>
100069eb:	b9 0f 00 00 00       	mov    ecx,0xf
100069f0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100069f3:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
100069f6:	75 07                	jne    100069ff <begin(void*)+0x19f4>
100069f8:	ba 0f 00 00 00       	mov    edx,0xf
100069fd:	eb 05                	jmp    10006a04 <begin(void*)+0x19f9>
100069ff:	ba 00 00 00 00       	mov    edx,0x0
10006a04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006a07:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
10006a0e:	51                   	push   ecx
10006a0f:	52                   	push   edx
10006a10:	50                   	push   eax
10006a11:	53                   	push   ebx
10006a12:	e8 fc ff ff ff       	call   10006a13 <begin(void*)+0x1a08>	10006a13: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006a17:	83 c4 10             	add    esp,0x10
10006a1a:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10006a1d:	eb 95                	jmp    100069b4 <begin(void*)+0x19a9>
10006a1f:	a0 00 00 00 00       	mov    al,ds:0x0	10006a20: R_386_32	installKey
10006a24:	84 c0                	test   al,al
10006a26:	0f 94 c0             	sete   al
10006a29:	84 c0                	test   al,al
10006a2b:	74 02                	je     10006a2f <begin(void*)+0x1a24>
10006a2d:	eb f0                	jmp    10006a1f <begin(void*)+0x1a14>
10006a2f:	a1 00 00 00 00       	mov    eax,ds:0x0	10006a30: R_386_32	term
10006a34:	05 82 00 00 00       	add    eax,0x82
10006a39:	83 ec 04             	sub    esp,0x4
10006a3c:	6a 04                	push   0x4
10006a3e:	6a 00                	push   0x0
10006a40:	50                   	push   eax
10006a41:	e8 fc ff ff ff       	call   10006a42 <begin(void*)+0x1a37>	10006a42: R_386_PC32	memset
10006a46:	83 c4 10             	add    esp,0x10
10006a49:	a1 00 00 00 00       	mov    eax,ds:0x0	10006a4a: R_386_32	term
10006a4e:	05 02 01 00 00       	add    eax,0x102
10006a53:	83 ec 04             	sub    esp,0x4
10006a56:	6a 04                	push   0x4
10006a58:	6a 00                	push   0x0
10006a5a:	50                   	push   eax
10006a5b:	e8 fc ff ff ff       	call   10006a5c <begin(void*)+0x1a51>	10006a5c: R_386_PC32	memset
10006a60:	83 c4 10             	add    esp,0x10
10006a63:	a0 00 00 00 00       	mov    al,ds:0x0	10006a64: R_386_32	installKey
10006a68:	3c 01                	cmp    al,0x1
10006a6a:	0f 94 c0             	sete   al
10006a6d:	84 c0                	test   al,al
10006a6f:	74 12                	je     10006a83 <begin(void*)+0x1a78>
10006a71:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10006a74:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10006a78:	79 39                	jns    10006ab3 <begin(void*)+0x1aa8>
10006a7a:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10006a81:	eb 30                	jmp    10006ab3 <begin(void*)+0x1aa8>
10006a83:	a0 00 00 00 00       	mov    al,ds:0x0	10006a84: R_386_32	installKey
10006a88:	3c 02                	cmp    al,0x2
10006a8a:	0f 94 c0             	sete   al
10006a8d:	84 c0                	test   al,al
10006a8f:	74 14                	je     10006aa5 <begin(void*)+0x1a9a>
10006a91:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10006a94:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006a97:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006a9a:	7f 17                	jg     10006ab3 <begin(void*)+0x1aa8>
10006a9c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006a9f:	48                   	dec    eax
10006aa0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10006aa3:	eb 0e                	jmp    10006ab3 <begin(void*)+0x1aa8>
10006aa5:	a0 00 00 00 00       	mov    al,ds:0x0	10006aa6: R_386_32	installKey
10006aaa:	3c 0a                	cmp    al,0xa
10006aac:	0f 94 c0             	sete   al
10006aaf:	84 c0                	test   al,al
10006ab1:	75 1c                	jne    10006acf <begin(void*)+0x1ac4>
10006ab3:	83 ec 0c             	sub    esp,0xc
10006ab6:	68 f4 01 00 00       	push   0x1f4
10006abb:	e8 fc ff ff ff       	call   10006abc <begin(void*)+0x1ab1>	10006abc: R_386_PC32	milliTenthSleep(unsigned int)
10006ac0:	83 c4 10             	add    esp,0x10
10006ac3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006ac5: R_386_32	installKey
10006aca:	e9 cc fe ff ff       	jmp    1000699b <begin(void*)+0x1990>
10006acf:	90                   	nop
10006ad0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006ad3:	48                   	dec    eax
10006ad4:	39 45 dc             	cmp    DWORD PTR [ebp-0x24],eax
10006ad7:	75 57                	jne    10006b30 <begin(void*)+0x1b25>
10006ad9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006adb: R_386_32	installKey
10006ae0:	a0 00 00 00 00       	mov    al,ds:0x0	10006ae1: R_386_32	installKey
10006ae5:	84 c0                	test   al,al
10006ae7:	0f 94 c0             	sete   al
10006aea:	84 c0                	test   al,al
10006aec:	74 02                	je     10006af0 <begin(void*)+0x1ae5>
10006aee:	eb f0                	jmp    10006ae0 <begin(void*)+0x1ad5>
10006af0:	a1 00 00 00 00       	mov    eax,ds:0x0	10006af1: R_386_32	term
10006af5:	05 82 00 00 00       	add    eax,0x82
10006afa:	83 ec 04             	sub    esp,0x4
10006afd:	6a 04                	push   0x4
10006aff:	6a 00                	push   0x0
10006b01:	50                   	push   eax
10006b02:	e8 fc ff ff ff       	call   10006b03 <begin(void*)+0x1af8>	10006b03: R_386_PC32	memset
10006b07:	83 c4 10             	add    esp,0x10
10006b0a:	a1 00 00 00 00       	mov    eax,ds:0x0	10006b0b: R_386_32	term
10006b0f:	05 02 01 00 00       	add    eax,0x102
10006b14:	83 ec 04             	sub    esp,0x4
10006b17:	6a 04                	push   0x4
10006b19:	6a 00                	push   0x0
10006b1b:	50                   	push   eax
10006b1c:	e8 fc ff ff ff       	call   10006b1d <begin(void*)+0x1b12>	10006b1d: R_386_PC32	memset
10006b21:	83 c4 10             	add    esp,0x10
10006b24:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006b26: R_386_32	installKey
10006b2b:	e9 bb fb ff ff       	jmp    100066eb <begin(void*)+0x16e0>
10006b30:	83 ec 08             	sub    esp,0x8
10006b33:	68 f6 ab 00 10       	push   0x1000abf6	10006b34: R_386_32	.text
10006b38:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006b3e:	50                   	push   eax
10006b3f:	e8 fc ff ff ff       	call   10006b40 <begin(void*)+0x1b35>	10006b40: R_386_PC32	strcpy
10006b44:	83 c4 10             	add    esp,0x10
10006b47:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006b4a:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
10006b51:	83 ec 08             	sub    esp,0x8
10006b54:	50                   	push   eax
10006b55:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006b5b:	50                   	push   eax
10006b5c:	e8 fc ff ff ff       	call   10006b5d <begin(void*)+0x1b52>	10006b5d: R_386_PC32	strcat
10006b61:	83 c4 10             	add    esp,0x10
10006b64:	83 ec 08             	sub    esp,0x8
10006b67:	68 2f af 00 10       	push   0x1000af2f	10006b68: R_386_32	.text
10006b6c:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006b72:	50                   	push   eax
10006b73:	e8 fc ff ff ff       	call   10006b74 <begin(void*)+0x1b69>	10006b74: R_386_PC32	strcat
10006b78:	83 c4 10             	add    esp,0x10
10006b7b:	83 ec 0c             	sub    esp,0xc
10006b7e:	68 b8 ab 00 10       	push   0x1000abb8	10006b7f: R_386_32	.text
10006b83:	e8 fc ff ff ff       	call   10006b84 <begin(void*)+0x1b79>	10006b84: R_386_PC32	CmOpen(char const*)
10006b88:	83 c4 10             	add    esp,0x10
10006b8b:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10006b8e:	83 ec 08             	sub    esp,0x8
10006b91:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006b97:	50                   	push   eax
10006b98:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006b9b:	e8 fc ff ff ff       	call   10006b9c <begin(void*)+0x1b91>	10006b9c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006ba0:	83 c4 10             	add    esp,0x10
10006ba3:	83 ec 04             	sub    esp,0x4
10006ba6:	8d 95 06 fc ff ff    	lea    edx,[ebp-0x3fa]
10006bac:	52                   	push   edx
10006bad:	50                   	push   eax
10006bae:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006bb1:	e8 fc ff ff ff       	call   10006bb2 <begin(void*)+0x1ba7>	10006bb2: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006bb6:	83 c4 10             	add    esp,0x10
10006bb9:	83 ec 08             	sub    esp,0x8
10006bbc:	68 f6 ab 00 10       	push   0x1000abf6	10006bbd: R_386_32	.text
10006bc1:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006bc7:	50                   	push   eax
10006bc8:	e8 fc ff ff ff       	call   10006bc9 <begin(void*)+0x1bbe>	10006bc9: R_386_PC32	strcpy
10006bcd:	83 c4 10             	add    esp,0x10
10006bd0:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006bd3:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
10006bda:	83 ec 08             	sub    esp,0x8
10006bdd:	50                   	push   eax
10006bde:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006be4:	50                   	push   eax
10006be5:	e8 fc ff ff ff       	call   10006be6 <begin(void*)+0x1bdb>	10006be6: R_386_PC32	strcat
10006bea:	83 c4 10             	add    esp,0x10
10006bed:	83 ec 08             	sub    esp,0x8
10006bf0:	68 39 af 00 10       	push   0x1000af39	10006bf1: R_386_32	.text
10006bf5:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006bfb:	50                   	push   eax
10006bfc:	e8 fc ff ff ff       	call   10006bfd <begin(void*)+0x1bf2>	10006bfd: R_386_PC32	strcat
10006c01:	83 c4 10             	add    esp,0x10
10006c04:	83 ec 08             	sub    esp,0x8
10006c07:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006c0d:	50                   	push   eax
10006c0e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006c11:	e8 fc ff ff ff       	call   10006c12 <begin(void*)+0x1c07>	10006c12: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006c16:	83 c4 10             	add    esp,0x10
10006c19:	83 ec 04             	sub    esp,0x4
10006c1c:	8d 95 34 fa ff ff    	lea    edx,[ebp-0x5cc]
10006c22:	52                   	push   edx
10006c23:	50                   	push   eax
10006c24:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006c27:	e8 fc ff ff ff       	call   10006c28 <begin(void*)+0x1c1d>	10006c28: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006c2c:	83 c4 10             	add    esp,0x10
10006c2f:	83 ec 0c             	sub    esp,0xc
10006c32:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006c35:	e8 fc ff ff ff       	call   10006c36 <begin(void*)+0x1c2b>	10006c36: R_386_PC32	CmClose(Reghive_Tag*)
10006c3a:	83 c4 10             	add    esp,0x10
10006c3d:	83 ec 04             	sub    esp,0x4
10006c40:	68 80 00 00 00       	push   0x80
10006c45:	6a 00                	push   0x0
10006c47:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006c4d:	50                   	push   eax
10006c4e:	e8 fc ff ff ff       	call   10006c4f <begin(void*)+0x1c44>	10006c4f: R_386_PC32	memset
10006c53:	83 c4 10             	add    esp,0x10
10006c56:	e8 fc ff ff ff       	call   10006c57 <begin(void*)+0x1c4c>	10006c57: R_386_PC32	drawBootScreen()
10006c5b:	83 ec 08             	sub    esp,0x8
10006c5e:	6a 01                	push   0x1
10006c60:	68 c7 b0 00 10       	push   0x1000b0c7	10006c61: R_386_32	.text
10006c65:	6a 10                	push   0x10
10006c67:	6a 39                	push   0x39
10006c69:	6a 03                	push   0x3
10006c6b:	6a 0c                	push   0xc
10006c6d:	e8 fc ff ff ff       	call   10006c6e <begin(void*)+0x1c63>	10006c6e: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10006c72:	83 c4 20             	add    esp,0x20
10006c75:	a1 00 00 00 00       	mov    eax,ds:0x0	10006c76: R_386_32	term
10006c7a:	83 ec 04             	sub    esp,0x4
10006c7d:	6a 06                	push   0x6
10006c7f:	6a 0e                	push   0xe
10006c81:	50                   	push   eax
10006c82:	e8 fc ff ff ff       	call   10006c83 <begin(void*)+0x1c78>	10006c83: R_386_PC32	VgaText::setCursor(int, int)
10006c87:	83 c4 10             	add    esp,0x10
10006c8a:	a1 00 00 00 00       	mov    eax,ds:0x0	10006c8b: R_386_32	term
10006c8f:	6a 07                	push   0x7
10006c91:	6a 00                	push   0x0
10006c93:	68 d0 b0 00 10       	push   0x1000b0d0	10006c94: R_386_32	.text
10006c98:	50                   	push   eax
10006c99:	e8 fc ff ff ff       	call   10006c9a <begin(void*)+0x1c8f>	10006c9a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006c9e:	83 c4 10             	add    esp,0x10
10006ca1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10006ca5:	7e 72                	jle    10006d19 <begin(void*)+0x1d0e>
10006ca7:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10006cae:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006cb1:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10006cb4:	7d 63                	jge    10006d19 <begin(void*)+0x1d0e>
10006cb6:	a1 00 00 00 00       	mov    eax,ds:0x0	10006cb7: R_386_32	term
10006cbb:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
10006cbe:	83 c2 08             	add    edx,0x8
10006cc1:	83 ec 04             	sub    esp,0x4
10006cc4:	52                   	push   edx
10006cc5:	6a 0f                	push   0xf
10006cc7:	50                   	push   eax
10006cc8:	e8 fc ff ff ff       	call   10006cc9 <begin(void*)+0x1cbe>	10006cc9: R_386_PC32	VgaText::setCursor(int, int)
10006ccd:	83 c4 10             	add    esp,0x10
10006cd0:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10006cd2: R_386_32	term
10006cd6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006cd9:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006cdc:	75 07                	jne    10006ce5 <begin(void*)+0x1cda>
10006cde:	b9 00 00 00 00       	mov    ecx,0x0
10006ce3:	eb 05                	jmp    10006cea <begin(void*)+0x1cdf>
10006ce5:	b9 07 00 00 00       	mov    ecx,0x7
10006cea:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006ced:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006cf0:	75 07                	jne    10006cf9 <begin(void*)+0x1cee>
10006cf2:	ba 07 00 00 00       	mov    edx,0x7
10006cf7:	eb 05                	jmp    10006cfe <begin(void*)+0x1cf3>
10006cf9:	ba 00 00 00 00       	mov    edx,0x0
10006cfe:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006d01:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
10006d08:	51                   	push   ecx
10006d09:	52                   	push   edx
10006d0a:	50                   	push   eax
10006d0b:	53                   	push   ebx
10006d0c:	e8 fc ff ff ff       	call   10006d0d <begin(void*)+0x1d02>	10006d0d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006d11:	83 c4 10             	add    esp,0x10
10006d14:	ff 45 d0             	inc    DWORD PTR [ebp-0x30]
10006d17:	eb 95                	jmp    10006cae <begin(void*)+0x1ca3>
10006d19:	83 ec 0c             	sub    esp,0xc
10006d1c:	68 c7 b0 00 10       	push   0x1000b0c7	10006d1d: R_386_32	.text
10006d21:	6a 0b                	push   0xb
10006d23:	6a 2d                	push   0x2d
10006d25:	6a 0a                	push   0xa
10006d27:	6a 1c                	push   0x1c
10006d29:	e8 fc ff ff ff       	call   10006d2a <begin(void*)+0x1d1f>	10006d2a: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10006d2e:	83 c4 20             	add    esp,0x20
10006d31:	c6 45 cf 01          	mov    BYTE PTR [ebp-0x31],0x1
10006d35:	83 ec 04             	sub    esp,0x4
10006d38:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10006d3e:	50                   	push   eax
10006d3f:	8d 85 34 fa ff ff    	lea    eax,[ebp-0x5cc]
10006d45:	50                   	push   eax
10006d46:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006d4c:	50                   	push   eax
10006d4d:	e8 fc ff ff ff       	call   10006d4e <begin(void*)+0x1d43>	10006d4e: R_386_PC32	bcrypt_hashpw
10006d52:	83 c4 10             	add    esp,0x10
10006d55:	83 ec 08             	sub    esp,0x8
10006d58:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10006d5e:	50                   	push   eax
10006d5f:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
10006d65:	50                   	push   eax
10006d66:	e8 fc ff ff ff       	call   10006d67 <begin(void*)+0x1d5c>	10006d67: R_386_PC32	strcmp
10006d6b:	83 c4 10             	add    esp,0x10
10006d6e:	85 c0                	test   eax,eax
10006d70:	75 04                	jne    10006d76 <begin(void*)+0x1d6b>
10006d72:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
10006d76:	83 ec 04             	sub    esp,0x4
10006d79:	68 80 00 00 00       	push   0x80
10006d7e:	6a 00                	push   0x0
10006d80:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10006d86:	50                   	push   eax
10006d87:	e8 fc ff ff ff       	call   10006d88 <begin(void*)+0x1d7d>	10006d88: R_386_PC32	memset
10006d8c:	83 c4 10             	add    esp,0x10
10006d8f:	80 7d cf 00          	cmp    BYTE PTR [ebp-0x31],0x0
10006d93:	0f 84 9c 02 00 00    	je     10007035 <begin(void*)+0x202a>
10006d99:	a1 00 00 00 00       	mov    eax,ds:0x0	10006d9a: R_386_32	term
10006d9e:	83 ec 04             	sub    esp,0x4
10006da1:	6a 0d                	push   0xd
10006da3:	6a 1e                	push   0x1e
10006da5:	50                   	push   eax
10006da6:	e8 fc ff ff ff       	call   10006da7 <begin(void*)+0x1d9c>	10006da7: R_386_PC32	VgaText::setCursor(int, int)
10006dab:	83 c4 10             	add    esp,0x10
10006dae:	a1 00 00 00 00       	mov    eax,ds:0x0	10006daf: R_386_32	term
10006db3:	83 ec 08             	sub    esp,0x8
10006db6:	68 00 b1 00 10       	push   0x1000b100	10006db7: R_386_32	.text
10006dbb:	50                   	push   eax
10006dbc:	e8 fc ff ff ff       	call   10006dbd <begin(void*)+0x1db2>	10006dbd: R_386_PC32	VgaText::puts(char const*)
10006dc1:	83 c4 10             	add    esp,0x10
10006dc4:	a1 00 00 00 00       	mov    eax,ds:0x0	10006dc5: R_386_32	term
10006dc9:	83 ec 04             	sub    esp,0x4
10006dcc:	6a 0e                	push   0xe
10006dce:	6a 1e                	push   0x1e
10006dd0:	50                   	push   eax
10006dd1:	e8 fc ff ff ff       	call   10006dd2 <begin(void*)+0x1dc7>	10006dd2: R_386_PC32	VgaText::setCursor(int, int)
10006dd6:	83 c4 10             	add    esp,0x10
10006dd9:	a1 00 00 00 00       	mov    eax,ds:0x0	10006dda: R_386_32	term
10006dde:	83 ec 08             	sub    esp,0x8
10006de1:	68 2a b1 00 10       	push   0x1000b12a	10006de2: R_386_32	.text
10006de6:	50                   	push   eax
10006de7:	e8 fc ff ff ff       	call   10006de8 <begin(void*)+0x1ddd>	10006de8: R_386_PC32	VgaText::puts(char const*)
10006dec:	83 c4 10             	add    esp,0x10
10006def:	a1 00 00 00 00       	mov    eax,ds:0x0	10006df0: R_386_32	term
10006df4:	83 ec 04             	sub    esp,0x4
10006df7:	6a 10                	push   0x10
10006df9:	6a 1e                	push   0x1e
10006dfb:	50                   	push   eax
10006dfc:	e8 fc ff ff ff       	call   10006dfd <begin(void*)+0x1df2>	10006dfd: R_386_PC32	VgaText::setCursor(int, int)
10006e01:	83 c4 10             	add    esp,0x10
10006e04:	a1 00 00 00 00       	mov    eax,ds:0x0	10006e05: R_386_32	term
10006e09:	6a 07                	push   0x7
10006e0b:	6a 00                	push   0x0
10006e0d:	68 04 a7 00 10       	push   0x1000a704	10006e0e: R_386_32	.text
10006e12:	50                   	push   eax
10006e13:	e8 fc ff ff ff       	call   10006e14 <begin(void*)+0x1e09>	10006e14: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006e18:	83 c4 10             	add    esp,0x10
10006e1b:	a1 00 00 00 00       	mov    eax,ds:0x0	10006e1c: R_386_32	term
10006e20:	83 ec 08             	sub    esp,0x8
10006e23:	6a 1e                	push   0x1e
10006e25:	50                   	push   eax
10006e26:	e8 fc ff ff ff       	call   10006e27 <begin(void*)+0x1e1c>	10006e27: R_386_PC32	VgaText::setCursorX(int)
10006e2b:	83 c4 10             	add    esp,0x10
10006e2e:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
10006e35:	83 ec 0c             	sub    esp,0xc
10006e38:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006e3e:	50                   	push   eax
10006e3f:	e8 fc ff ff ff       	call   10006e40 <begin(void*)+0x1e35>	10006e40: R_386_PC32	strlen
10006e44:	83 c4 10             	add    esp,0x10
10006e47:	89 c2                	mov    edx,eax
10006e49:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10006e4c:	39 c2                	cmp    edx,eax
10006e4e:	76 1c                	jbe    10006e6c <begin(void*)+0x1e61>
10006e50:	a1 00 00 00 00       	mov    eax,ds:0x0	10006e51: R_386_32	term
10006e55:	6a 07                	push   0x7
10006e57:	6a 00                	push   0x0
10006e59:	68 30 a7 00 10       	push   0x1000a730	10006e5a: R_386_32	.text
10006e5e:	50                   	push   eax
10006e5f:	e8 fc ff ff ff       	call   10006e60 <begin(void*)+0x1e55>	10006e60: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006e64:	83 c4 10             	add    esp,0x10
10006e67:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
10006e6a:	eb c9                	jmp    10006e35 <begin(void*)+0x1e2a>
10006e6c:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10006e6e: R_386_32	term
10006e72:	83 ec 0c             	sub    esp,0xc
10006e75:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006e7b:	50                   	push   eax
10006e7c:	e8 fc ff ff ff       	call   10006e7d <begin(void*)+0x1e72>	10006e7d: R_386_PC32	strlen
10006e81:	83 c4 10             	add    esp,0x10
10006e84:	83 c0 1e             	add    eax,0x1e
10006e87:	83 ec 04             	sub    esp,0x4
10006e8a:	6a 10                	push   0x10
10006e8c:	50                   	push   eax
10006e8d:	53                   	push   ebx
10006e8e:	e8 fc ff ff ff       	call   10006e8f <begin(void*)+0x1e84>	10006e8f: R_386_PC32	VgaText::setCursor(int, int)
10006e93:	83 c4 10             	add    esp,0x10
10006e96:	a0 00 00 00 00       	mov    al,ds:0x0	10006e97: R_386_32	installKey
10006e9b:	84 c0                	test   al,al
10006e9d:	0f 94 c0             	sete   al
10006ea0:	84 c0                	test   al,al
10006ea2:	74 02                	je     10006ea6 <begin(void*)+0x1e9b>
10006ea4:	eb f0                	jmp    10006e96 <begin(void*)+0x1e8b>
10006ea6:	a1 00 00 00 00       	mov    eax,ds:0x0	10006ea7: R_386_32	term
10006eab:	05 82 00 00 00       	add    eax,0x82
10006eb0:	83 ec 04             	sub    esp,0x4
10006eb3:	6a 10                	push   0x10
10006eb5:	6a 00                	push   0x0
10006eb7:	50                   	push   eax
10006eb8:	e8 fc ff ff ff       	call   10006eb9 <begin(void*)+0x1eae>	10006eb9: R_386_PC32	memset
10006ebd:	83 c4 10             	add    esp,0x10
10006ec0:	a1 00 00 00 00       	mov    eax,ds:0x0	10006ec1: R_386_32	term
10006ec5:	05 02 01 00 00       	add    eax,0x102
10006eca:	83 ec 04             	sub    esp,0x4
10006ecd:	6a 10                	push   0x10
10006ecf:	6a 00                	push   0x0
10006ed1:	50                   	push   eax
10006ed2:	e8 fc ff ff ff       	call   10006ed3 <begin(void*)+0x1ec8>	10006ed3: R_386_PC32	memset
10006ed7:	83 c4 10             	add    esp,0x10
10006eda:	a0 00 00 00 00       	mov    al,ds:0x0	10006edb: R_386_32	installKey
10006edf:	3c 0a                	cmp    al,0xa
10006ee1:	0f 94 c0             	sete   al
10006ee4:	84 c0                	test   al,al
10006ee6:	0f 84 88 00 00 00    	je     10006f74 <begin(void*)+0x1f69>
10006eec:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006eee: R_386_32	installKey
10006ef3:	83 ec 04             	sub    esp,0x4
10006ef6:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006efc:	50                   	push   eax
10006efd:	8d 85 34 fa ff ff    	lea    eax,[ebp-0x5cc]
10006f03:	50                   	push   eax
10006f04:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006f0a:	50                   	push   eax
10006f0b:	e8 fc ff ff ff       	call   10006f0c <begin(void*)+0x1f01>	10006f0c: R_386_PC32	bcrypt_hashpw
10006f10:	83 c4 10             	add    esp,0x10
10006f13:	8d 85 34 fa ff ff    	lea    eax,[ebp-0x5cc]
10006f19:	50                   	push   eax
10006f1a:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006f20:	50                   	push   eax
10006f21:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
10006f27:	50                   	push   eax
10006f28:	68 44 b1 00 10       	push   0x1000b144	10006f29: R_386_32	.text
10006f2d:	e8 fc ff ff ff       	call   10006f2e <begin(void*)+0x1f23>	10006f2e: R_386_PC32	Dbg::kprintf(char const*, ...)
10006f32:	83 c4 10             	add    esp,0x10
10006f35:	83 ec 08             	sub    esp,0x8
10006f38:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006f3e:	50                   	push   eax
10006f3f:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
10006f45:	50                   	push   eax
10006f46:	e8 fc ff ff ff       	call   10006f47 <begin(void*)+0x1f3c>	10006f47: R_386_PC32	strcmp
10006f4b:	83 c4 10             	add    esp,0x10
10006f4e:	85 c0                	test   eax,eax
10006f50:	0f 84 de 00 00 00    	je     10007034 <begin(void*)+0x2029>
10006f56:	83 ec 04             	sub    esp,0x4
10006f59:	68 80 00 00 00       	push   0x80
10006f5e:	6a 00                	push   0x0
10006f60:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006f66:	50                   	push   eax
10006f67:	e8 fc ff ff ff       	call   10006f68 <begin(void*)+0x1f5d>	10006f68: R_386_PC32	memset
10006f6c:	83 c4 10             	add    esp,0x10
10006f6f:	e9 b4 00 00 00       	jmp    10007028 <begin(void*)+0x201d>
10006f74:	a0 00 00 00 00       	mov    al,ds:0x0	10006f75: R_386_32	installKey
10006f79:	3c 1f                	cmp    al,0x1f
10006f7b:	7e 0d                	jle    10006f8a <begin(void*)+0x1f7f>
10006f7d:	a0 00 00 00 00       	mov    al,ds:0x0	10006f7e: R_386_32	installKey
10006f82:	3c 7f                	cmp    al,0x7f
10006f84:	74 04                	je     10006f8a <begin(void*)+0x1f7f>
10006f86:	b0 01                	mov    al,0x1
10006f88:	eb 02                	jmp    10006f8c <begin(void*)+0x1f81>
10006f8a:	b0 00                	mov    al,0x0
10006f8c:	84 c0                	test   al,al
10006f8e:	74 44                	je     10006fd4 <begin(void*)+0x1fc9>
10006f90:	a0 00 00 00 00       	mov    al,ds:0x0	10006f91: R_386_32	installKey
10006f95:	88 85 7a ff ff ff    	mov    BYTE PTR [ebp-0x86],al
10006f9b:	c6 85 7b ff ff ff 00 	mov    BYTE PTR [ebp-0x85],0x0
10006fa2:	83 ec 0c             	sub    esp,0xc
10006fa5:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006fab:	50                   	push   eax
10006fac:	e8 fc ff ff ff       	call   10006fad <begin(void*)+0x1fa2>	10006fad: R_386_PC32	strlen
10006fb1:	83 c4 10             	add    esp,0x10
10006fb4:	83 f8 22             	cmp    eax,0x22
10006fb7:	77 6f                	ja     10007028 <begin(void*)+0x201d>
10006fb9:	83 ec 08             	sub    esp,0x8
10006fbc:	8d 85 7a ff ff ff    	lea    eax,[ebp-0x86]
10006fc2:	50                   	push   eax
10006fc3:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006fc9:	50                   	push   eax
10006fca:	e8 fc ff ff ff       	call   10006fcb <begin(void*)+0x1fc0>	10006fcb: R_386_PC32	strcat
10006fcf:	83 c4 10             	add    esp,0x10
10006fd2:	eb 54                	jmp    10007028 <begin(void*)+0x201d>
10006fd4:	a0 00 00 00 00       	mov    al,ds:0x0	10006fd5: R_386_32	installKey
10006fd9:	3c 08                	cmp    al,0x8
10006fdb:	0f 94 c0             	sete   al
10006fde:	84 c0                	test   al,al
10006fe0:	74 33                	je     10007015 <begin(void*)+0x200a>
10006fe2:	83 ec 0c             	sub    esp,0xc
10006fe5:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006feb:	50                   	push   eax
10006fec:	e8 fc ff ff ff       	call   10006fed <begin(void*)+0x1fe2>	10006fed: R_386_PC32	strlen
10006ff1:	83 c4 10             	add    esp,0x10
10006ff4:	85 c0                	test   eax,eax
10006ff6:	74 30                	je     10007028 <begin(void*)+0x201d>
10006ff8:	83 ec 0c             	sub    esp,0xc
10006ffb:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10007001:	50                   	push   eax
10007002:	e8 fc ff ff ff       	call   10007003 <begin(void*)+0x1ff8>	10007003: R_386_PC32	strlen
10007007:	83 c4 10             	add    esp,0x10
1000700a:	48                   	dec    eax
1000700b:	c6 84 05 86 fb ff ff 00 	mov    BYTE PTR [ebp+eax*1-0x47a],0x0
10007013:	eb 13                	jmp    10007028 <begin(void*)+0x201d>
10007015:	a0 00 00 00 00       	mov    al,ds:0x0	10007016: R_386_32	installKey
1000701a:	3c 1b                	cmp    al,0x1b
1000701c:	0f 94 c0             	sete   al
1000701f:	84 c0                	test   al,al
10007021:	74 05                	je     10007028 <begin(void*)+0x201d>
10007023:	e9 23 f9 ff ff       	jmp    1000694b <begin(void*)+0x1940>
10007028:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000702a: R_386_32	installKey
1000702f:	e9 5b fd ff ff       	jmp    10006d8f <begin(void*)+0x1d84>
10007034:	90                   	nop
10007035:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10007037: R_386_32	guiKeyboardHandler
1000703f:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
10007046:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007049:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
1000704c:	7d 69                	jge    100070b7 <begin(void*)+0x20ac>
1000704e:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007051:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
10007058:	85 c0                	test   eax,eax
1000705a:	74 24                	je     10007080 <begin(void*)+0x2075>
1000705c:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
1000705f:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
10007066:	83 ec 0c             	sub    esp,0xc
10007069:	50                   	push   eax
1000706a:	e8 fc ff ff ff       	call   1000706b <begin(void*)+0x2060>	1000706b: R_386_PC32	free
1000706f:	83 c4 10             	add    esp,0x10
10007072:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007075:	c7 84 85 84 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x57c],0x0
10007080:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007083:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
1000708a:	85 c0                	test   eax,eax
1000708c:	74 24                	je     100070b2 <begin(void*)+0x20a7>
1000708e:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007091:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
10007098:	83 ec 0c             	sub    esp,0xc
1000709b:	50                   	push   eax
1000709c:	e8 fc ff ff ff       	call   1000709d <begin(void*)+0x2092>	1000709d: R_386_PC32	free
100070a1:	83 c4 10             	add    esp,0x10
100070a4:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100070a7:	c7 84 85 04 fb ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x4fc],0x0
100070b2:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
100070b5:	eb 8f                	jmp    10007046 <begin(void*)+0x203b>
100070b7:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100070b9: R_386_32	VgaText::hiddenOut
100070be:	83 ec 0c             	sub    esp,0xc
100070c1:	68 24 07 00 00       	push   0x724
100070c6:	e8 fc ff ff ff       	call   100070c7 <begin(void*)+0x20bc>	100070c7: R_386_PC32	operator new(unsigned long)
100070cb:	83 c4 10             	add    esp,0x10
100070ce:	89 c3                	mov    ebx,eax
100070d0:	6a 00                	push   0x0
100070d2:	6a 00                	push   0x0
100070d4:	68 8e ab 00 10       	push   0x1000ab8e	100070d5: R_386_32	.text
100070d9:	53                   	push   ebx
100070da:	e8 fc ff ff ff       	call   100070db <begin(void*)+0x20d0>	100070db: R_386_PC32	Process::Process(char const*, Process*, char**)
100070df:	83 c4 10             	add    esp,0x10
100070e2:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
100070e5:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
100070e8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
100070ee:	83 ec 0c             	sub    esp,0xc
100070f1:	50                   	push   eax
100070f2:	e8 fc ff ff ff       	call   100070f3 <begin(void*)+0x20e8>	100070f3: R_386_PC32	setActiveTerminal(VgaText*)
100070f7:	83 c4 10             	add    esp,0x10
100070fa:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
10007101:	83 7d c0 18          	cmp    DWORD PTR [ebp-0x40],0x18
10007105:	7f 2e                	jg     10007135 <begin(void*)+0x212a>
10007107:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [ebp-0x44],0x0
1000710e:	83 7d bc 4f          	cmp    DWORD PTR [ebp-0x44],0x4f
10007112:	7f 1c                	jg     10007130 <begin(void*)+0x2125>
10007114:	83 ec 0c             	sub    esp,0xc
10007117:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
1000711a:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000711d:	6a 00                	push   0x0
1000711f:	6a 07                	push   0x7
10007121:	6a 20                	push   0x20
10007123:	e8 fc ff ff ff       	call   10007124 <begin(void*)+0x2119>	10007124: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
10007128:	83 c4 20             	add    esp,0x20
1000712b:	ff 45 bc             	inc    DWORD PTR [ebp-0x44]
1000712e:	eb de                	jmp    1000710e <begin(void*)+0x2103>
10007130:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
10007133:	eb cc                	jmp    10007101 <begin(void*)+0x20f6>
10007135:	83 ec 0c             	sub    esp,0xc
10007138:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
1000713b:	e8 fc ff ff ff       	call   1000713c <begin(void*)+0x2131>	1000713c: R_386_PC32	Process::createUserThread()
10007140:	83 c4 10             	add    esp,0x10
10007143:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10007146:	8b 55 84             	mov    edx,DWORD PTR [ebp-0x7c]
10007149:	89 c1                	mov    ecx,eax
1000714b:	83 f1 01             	xor    ecx,0x1
1000714e:	89 8d d0 f9 ff ff    	mov    DWORD PTR [ebp-0x630],ecx
10007154:	89 d0                	mov    eax,edx
10007156:	80 f4 00             	xor    ah,0x0
10007159:	89 85 d4 f9 ff ff    	mov    DWORD PTR [ebp-0x62c],eax
1000715f:	8b b5 d0 f9 ff ff    	mov    esi,DWORD PTR [ebp-0x630]
10007165:	8b bd d4 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x62c]
1000716b:	89 f8                	mov    eax,edi
1000716d:	09 f0                	or     eax,esi
1000716f:	85 c0                	test   eax,eax
10007171:	75 17                	jne    1000718a <begin(void*)+0x217f>
10007173:	a1 00 00 00 00       	mov    eax,ds:0x0	10007174: R_386_32	kernelProcess
10007178:	6a 01                	push   0x1
1000717a:	6a 00                	push   0x0
1000717c:	68 00 00 00 00       	push   0x0	1000717d: R_386_32	startGUI(void*)
10007181:	50                   	push   eax
10007182:	e8 fc ff ff ff       	call   10007183 <begin(void*)+0x2178>	10007183: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10007187:	83 c4 10             	add    esp,0x10
1000718a:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
1000718d:	8b 55 84             	mov    edx,DWORD PTR [ebp-0x7c]
10007190:	89 c6                	mov    esi,eax
10007192:	83 f6 02             	xor    esi,0x2
10007195:	89 b5 c8 f9 ff ff    	mov    DWORD PTR [ebp-0x638],esi
1000719b:	89 d0                	mov    eax,edx
1000719d:	80 f4 00             	xor    ah,0x0
100071a0:	89 85 cc f9 ff ff    	mov    DWORD PTR [ebp-0x634],eax
100071a6:	8b b5 c8 f9 ff ff    	mov    esi,DWORD PTR [ebp-0x638]
100071ac:	8b bd cc f9 ff ff    	mov    edi,DWORD PTR [ebp-0x634]
100071b2:	89 f8                	mov    eax,edi
100071b4:	09 f0                	or     eax,esi
100071b6:	85 c0                	test   eax,eax
100071b8:	75 17                	jne    100071d1 <begin(void*)+0x21c6>
100071ba:	a1 00 00 00 00       	mov    eax,ds:0x0	100071bb: R_386_32	kernelProcess
100071bf:	6a 01                	push   0x1
100071c1:	6a 00                	push   0x0
100071c3:	68 00 00 00 00       	push   0x0	100071c4: R_386_32	startGUIVESA(void*)
100071c8:	50                   	push   eax
100071c9:	e8 fc ff ff ff       	call   100071ca <begin(void*)+0x21bf>	100071ca: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
100071ce:	83 c4 10             	add    esp,0x10
100071d1:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
100071d4:	8b 00                	mov    eax,DWORD PTR [eax]
100071d6:	83 ec 04             	sub    esp,0x4
100071d9:	6a 00                	push   0x0
100071db:	8d 95 7c ff ff ff    	lea    edx,[ebp-0x84]
100071e1:	52                   	push   edx
100071e2:	50                   	push   eax
100071e3:	e8 fc ff ff ff       	call   100071e4 <begin(void*)+0x21d9>	100071e4: R_386_PC32	waitTask(int, int*, int)
100071e8:	83 c4 10             	add    esp,0x10
100071eb:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100071ed: R_386_32	Krnl::computer
100071f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100071f2: R_386_32	Krnl::computer
100071f6:	8b 00                	mov    eax,DWORD PTR [eax]
100071f8:	83 c0 0c             	add    eax,0xc
100071fb:	8b 00                	mov    eax,DWORD PTR [eax]
100071fd:	6a 00                	push   0x0
100071ff:	6a 00                	push   0x0
10007201:	6a 00                	push   0x0
10007203:	52                   	push   edx
10007204:	ff d0                	call   eax
10007206:	83 c4 10             	add    esp,0x10
10007209:	83 ec 0c             	sub    esp,0xc
1000720c:	68 64 b1 00 10       	push   0x1000b164	1000720d: R_386_32	.text
10007211:	e8 fc ff ff ff       	call   10007212 <begin(void*)+0x2207>	10007212: R_386_PC32	KePanic(char const*)
10007216:	83 c4 10             	add    esp,0x10
10007219:	eb fe                	jmp    10007219 <begin(void*)+0x220e>

1000721b <clean>:
1000721b:	57                   	push   edi
1000721c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10007220:	b0 00                	mov    al,0x0
10007222:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10007226:	f3 aa                	rep stos BYTE PTR es:[edi],al
10007228:	5f                   	pop    edi
10007229:	c3                   	ret    

1000722a <BF_decode>:
1000722a:	55                   	push   ebp
1000722b:	57                   	push   edi
1000722c:	56                   	push   esi
1000722d:	53                   	push   ebx
1000722e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10007232:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10007236:	89 d6                	mov    esi,edx
10007238:	03 74 24 1c          	add    esi,DWORD PTR [esp+0x1c]
1000723c:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
1000723f:	83 e8 20             	sub    eax,0x20
10007242:	83 f8 5f             	cmp    eax,0x5f
10007245:	0f 87 a3 00 00 00    	ja     100072ee <BF_decode+0xc4>
1000724b:	8a 80 60 c3 00 10    	mov    al,BYTE PTR [eax+0x1000c360]	1000724d: R_386_32	.data
10007251:	3c 3f                	cmp    al,0x3f
10007253:	0f 87 9f 00 00 00    	ja     100072f8 <BF_decode+0xce>
10007259:	0f b6 4b 01          	movzx  ecx,BYTE PTR [ebx+0x1]
1000725d:	83 e9 20             	sub    ecx,0x20
10007260:	83 f9 5f             	cmp    ecx,0x5f
10007263:	0f 87 96 00 00 00    	ja     100072ff <BF_decode+0xd5>
10007269:	8a 89 60 c3 00 10    	mov    cl,BYTE PTR [ecx+0x1000c360]	1000726b: R_386_32	.data
1000726f:	0f b6 f9             	movzx  edi,cl
10007272:	83 ff 3f             	cmp    edi,0x3f
10007275:	0f 87 8b 00 00 00    	ja     10007306 <BF_decode+0xdc>
1000727b:	c1 e0 02             	shl    eax,0x2
1000727e:	c1 ef 04             	shr    edi,0x4
10007281:	09 f8                	or     eax,edi
10007283:	88 02                	mov    BYTE PTR [edx],al
10007285:	89 d7                	mov    edi,edx
10007287:	8d 42 01             	lea    eax,[edx+0x1]
1000728a:	39 c6                	cmp    esi,eax
1000728c:	76 7f                	jbe    1000730d <BF_decode+0xe3>
1000728e:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
10007292:	83 e8 20             	sub    eax,0x20
10007295:	83 f8 5f             	cmp    eax,0x5f
10007298:	77 7a                	ja     10007314 <BF_decode+0xea>
1000729a:	8a 80 60 c3 00 10    	mov    al,BYTE PTR [eax+0x1000c360]	1000729c: R_386_32	.data
100072a0:	0f b6 e8             	movzx  ebp,al
100072a3:	83 fd 3f             	cmp    ebp,0x3f
100072a6:	77 73                	ja     1000731b <BF_decode+0xf1>
100072a8:	c1 e1 04             	shl    ecx,0x4
100072ab:	c1 ed 02             	shr    ebp,0x2
100072ae:	09 e9                	or     ecx,ebp
100072b0:	88 4a 01             	mov    BYTE PTR [edx+0x1],cl
100072b3:	8d 52 02             	lea    edx,[edx+0x2]
100072b6:	39 d6                	cmp    esi,edx
100072b8:	76 68                	jbe    10007322 <BF_decode+0xf8>
100072ba:	83 c3 04             	add    ebx,0x4
100072bd:	0f b6 53 ff          	movzx  edx,BYTE PTR [ebx-0x1]
100072c1:	83 ea 20             	sub    edx,0x20
100072c4:	83 fa 5f             	cmp    edx,0x5f
100072c7:	77 60                	ja     10007329 <BF_decode+0xff>
100072c9:	8a 8a 60 c3 00 10    	mov    cl,BYTE PTR [edx+0x1000c360]	100072cb: R_386_32	.data
100072cf:	80 f9 3f             	cmp    cl,0x3f
100072d2:	77 5c                	ja     10007330 <BF_decode+0x106>
100072d4:	8d 57 03             	lea    edx,[edi+0x3]
100072d7:	c1 e0 06             	shl    eax,0x6
100072da:	09 c1                	or     ecx,eax
100072dc:	88 4a ff             	mov    BYTE PTR [edx-0x1],cl
100072df:	39 d6                	cmp    esi,edx
100072e1:	0f 87 55 ff ff ff    	ja     1000723c <BF_decode+0x12>
100072e7:	b8 00 00 00 00       	mov    eax,0x0
100072ec:	eb 05                	jmp    100072f3 <BF_decode+0xc9>
100072ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
100072f3:	5b                   	pop    ebx
100072f4:	5e                   	pop    esi
100072f5:	5f                   	pop    edi
100072f6:	5d                   	pop    ebp
100072f7:	c3                   	ret    
100072f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
100072fd:	eb f4                	jmp    100072f3 <BF_decode+0xc9>
100072ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007304:	eb ed                	jmp    100072f3 <BF_decode+0xc9>
10007306:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000730b:	eb e6                	jmp    100072f3 <BF_decode+0xc9>
1000730d:	b8 00 00 00 00       	mov    eax,0x0
10007312:	eb df                	jmp    100072f3 <BF_decode+0xc9>
10007314:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007319:	eb d8                	jmp    100072f3 <BF_decode+0xc9>
1000731b:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007320:	eb d1                	jmp    100072f3 <BF_decode+0xc9>
10007322:	b8 00 00 00 00       	mov    eax,0x0
10007327:	eb ca                	jmp    100072f3 <BF_decode+0xc9>
10007329:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000732e:	eb c3                	jmp    100072f3 <BF_decode+0xc9>
10007330:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007335:	eb bc                	jmp    100072f3 <BF_decode+0xc9>

10007337 <BF_encode>:
10007337:	55                   	push   ebp
10007338:	57                   	push   edi
10007339:	56                   	push   esi
1000733a:	53                   	push   ebx
1000733b:	83 ec 04             	sub    esp,0x4
1000733e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10007342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10007346:	89 c7                	mov    edi,eax
10007348:	03 7c 24 20          	add    edi,DWORD PTR [esp+0x20]
1000734c:	89 3c 24             	mov    DWORD PTR [esp],edi
1000734f:	0f b6 10             	movzx  edx,BYTE PTR [eax]
10007352:	89 d6                	mov    esi,edx
10007354:	c1 ee 02             	shr    esi,0x2
10007357:	8a 9e 00 c3 00 10    	mov    bl,BYTE PTR [esi+0x1000c300]	10007359: R_386_32	.data
1000735d:	88 19                	mov    BYTE PTR [ecx],bl
1000735f:	c1 e2 04             	shl    edx,0x4
10007362:	83 e2 30             	and    edx,0x30
10007365:	89 c7                	mov    edi,eax
10007367:	8d 70 01             	lea    esi,[eax+0x1]
1000736a:	39 34 24             	cmp    DWORD PTR [esp],esi
1000736d:	76 51                	jbe    100073c0 <BF_encode+0x89>
1000736f:	0f b6 70 01          	movzx  esi,BYTE PTR [eax+0x1]
10007373:	89 f5                	mov    ebp,esi
10007375:	c1 ed 04             	shr    ebp,0x4
10007378:	09 ea                	or     edx,ebp
1000737a:	8a 9a 00 c3 00 10    	mov    bl,BYTE PTR [edx+0x1000c300]	1000737c: R_386_32	.data
10007380:	88 59 01             	mov    BYTE PTR [ecx+0x1],bl
10007383:	c1 e6 02             	shl    esi,0x2
10007386:	83 e6 3c             	and    esi,0x3c
10007389:	83 c0 02             	add    eax,0x2
1000738c:	39 04 24             	cmp    DWORD PTR [esp],eax
1000738f:	76 40                	jbe    100073d1 <BF_encode+0x9a>
10007391:	8d 47 03             	lea    eax,[edi+0x3]
10007394:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
10007397:	0f b6 d3             	movzx  edx,bl
1000739a:	c1 ea 06             	shr    edx,0x6
1000739d:	09 f2                	or     edx,esi
1000739f:	8a 92 00 c3 00 10    	mov    dl,BYTE PTR [edx+0x1000c300]	100073a1: R_386_32	.data
100073a5:	88 51 02             	mov    BYTE PTR [ecx+0x2],dl
100073a8:	83 c1 04             	add    ecx,0x4
100073ab:	89 da                	mov    edx,ebx
100073ad:	83 e2 3f             	and    edx,0x3f
100073b0:	8a 9a 00 c3 00 10    	mov    bl,BYTE PTR [edx+0x1000c300]	100073b2: R_386_32	.data
100073b6:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
100073b9:	39 04 24             	cmp    DWORD PTR [esp],eax
100073bc:	77 91                	ja     1000734f <BF_encode+0x18>
100073be:	eb 09                	jmp    100073c9 <BF_encode+0x92>
100073c0:	8a 82 00 c3 00 10    	mov    al,BYTE PTR [edx+0x1000c300]	100073c2: R_386_32	.data
100073c6:	88 41 01             	mov    BYTE PTR [ecx+0x1],al
100073c9:	83 c4 04             	add    esp,0x4
100073cc:	5b                   	pop    ebx
100073cd:	5e                   	pop    esi
100073ce:	5f                   	pop    edi
100073cf:	5d                   	pop    ebp
100073d0:	c3                   	ret    
100073d1:	8a 86 00 c3 00 10    	mov    al,BYTE PTR [esi+0x1000c300]	100073d3: R_386_32	.data
100073d7:	88 41 02             	mov    BYTE PTR [ecx+0x2],al
100073da:	eb ed                	jmp    100073c9 <BF_encode+0x92>

100073dc <BF_swap>:
100073dc:	53                   	push   ebx
100073dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100073e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
100073e5:	80 3d c0 c3 00 10 00 	cmp    BYTE PTR ds:0x1000c3c0,0x0	100073e7: R_386_32	.data
100073ec:	74 23                	je     10007411 <BF_swap+0x35>
100073ee:	8b 01                	mov    eax,DWORD PTR [ecx]
100073f0:	c1 c0 10             	rol    eax,0x10
100073f3:	83 c1 04             	add    ecx,0x4
100073f6:	89 c2                	mov    edx,eax
100073f8:	c1 e2 08             	shl    edx,0x8
100073fb:	81 e2 00 ff 00 ff    	and    edx,0xff00ff00
10007401:	c1 e8 08             	shr    eax,0x8
10007404:	25 ff 00 ff 00       	and    eax,0xff00ff
10007409:	09 d0                	or     eax,edx
1000740b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
1000740e:	4b                   	dec    ebx
1000740f:	75 dd                	jne    100073ee <BF_swap+0x12>
10007411:	5b                   	pop    ebx
10007412:	c3                   	ret    

10007413 <BF_set_key>:
10007413:	55                   	push   ebp
10007414:	57                   	push   edi
10007415:	56                   	push   esi
10007416:	53                   	push   ebx
10007417:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
1000741b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
1000741f:	89 f9                	mov    ecx,edi
10007421:	be 00 00 00 00       	mov    esi,0x0
10007426:	eb 2d                	jmp    10007455 <BF_set_key+0x42>
10007428:	89 f9                	mov    ecx,edi
1000742a:	4a                   	dec    edx
1000742b:	74 10                	je     1000743d <BF_set_key+0x2a>
1000742d:	c1 e0 08             	shl    eax,0x8
10007430:	0f b6 19             	movzx  ebx,BYTE PTR [ecx]
10007433:	09 d8                	or     eax,ebx
10007435:	80 39 00             	cmp    BYTE PTR [ecx],0x0
10007438:	74 ee                	je     10007428 <BF_set_key+0x15>
1000743a:	41                   	inc    ecx
1000743b:	eb ed                	jmp    1000742a <BF_set_key+0x17>
1000743d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10007441:	89 04 b2             	mov    DWORD PTR [edx+esi*4],eax
10007444:	33 04 b5 a0 c2 00 10 	xor    eax,DWORD PTR [esi*4+0x1000c2a0]	10007447: R_386_32	.data
1000744b:	89 44 b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],eax
1000744f:	46                   	inc    esi
10007450:	83 fe 12             	cmp    esi,0x12
10007453:	74 0c                	je     10007461 <BF_set_key+0x4e>
10007455:	ba 04 00 00 00       	mov    edx,0x4
1000745a:	b8 00 00 00 00       	mov    eax,0x0
1000745f:	eb cc                	jmp    1000742d <BF_set_key+0x1a>
10007461:	5b                   	pop    ebx
10007462:	5e                   	pop    esi
10007463:	5f                   	pop    edi
10007464:	5d                   	pop    ebp
10007465:	c3                   	ret    

10007466 <_crypt_blowfish_rn>:
10007466:	55                   	push   ebp
10007467:	57                   	push   edi
10007468:	56                   	push   esi
10007469:	53                   	push   ebx
1000746a:	81 ec 00 11 00 00    	sub    esp,0x1100
10007470:	83 bc 24 20 11 00 00 3c 	cmp    DWORD PTR [esp+0x1120],0x3c
10007478:	0f 8e 9e 2d 00 00    	jle    1000a21c <_crypt_blowfish_rn+0x2db6>
1000747e:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
10007485:	80 38 24             	cmp    BYTE PTR [eax],0x24
10007488:	0f 85 a8 2d 00 00    	jne    1000a236 <_crypt_blowfish_rn+0x2dd0>
1000748e:	80 78 01 32          	cmp    BYTE PTR [eax+0x1],0x32
10007492:	0f 85 9e 2d 00 00    	jne    1000a236 <_crypt_blowfish_rn+0x2dd0>
10007498:	80 78 02 61          	cmp    BYTE PTR [eax+0x2],0x61
1000749c:	0f 85 94 2d 00 00    	jne    1000a236 <_crypt_blowfish_rn+0x2dd0>
100074a2:	80 78 03 24          	cmp    BYTE PTR [eax+0x3],0x24
100074a6:	0f 85 8a 2d 00 00    	jne    1000a236 <_crypt_blowfish_rn+0x2dd0>
100074ac:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
100074af:	8d 50 d0             	lea    edx,[eax-0x30]
100074b2:	80 fa 03             	cmp    dl,0x3
100074b5:	0f 87 7b 2d 00 00    	ja     1000a236 <_crypt_blowfish_rn+0x2dd0>
100074bb:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
100074c2:	8a 53 05             	mov    dl,BYTE PTR [ebx+0x5]
100074c5:	8d 4a d0             	lea    ecx,[edx-0x30]
100074c8:	80 f9 09             	cmp    cl,0x9
100074cb:	0f 87 65 2d 00 00    	ja     1000a236 <_crypt_blowfish_rn+0x2dd0>
100074d1:	3c 33                	cmp    al,0x33
100074d3:	0f 84 54 2d 00 00    	je     1000a22d <_crypt_blowfish_rn+0x2dc7>
100074d9:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
100074e0:	80 7b 06 24          	cmp    BYTE PTR [ebx+0x6],0x24
100074e4:	0f 85 4c 2d 00 00    	jne    1000a236 <_crypt_blowfish_rn+0x2dd0>
100074ea:	0f be c0             	movsx  eax,al
100074ed:	8d 84 80 10 ff ff ff 	lea    eax,[eax+eax*4-0xf0]
100074f4:	01 c0                	add    eax,eax
100074f6:	0f be d2             	movsx  edx,dl
100074f9:	8d 4c 10 d0          	lea    ecx,[eax+edx*1-0x30]
100074fd:	b8 01 00 00 00       	mov    eax,0x1
10007502:	d3 e0                	shl    eax,cl
10007504:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10007508:	83 f8 0f             	cmp    eax,0xf
1000750b:	0f 86 3f 2d 00 00    	jbe    1000a250 <_crypt_blowfish_rn+0x2dea>
10007511:	6a 10                	push   0x10
10007513:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
1000751a:	83 c0 07             	add    eax,0x7
1000751d:	50                   	push   eax
1000751e:	8d 84 24 f0 10 00 00 	lea    eax,[esp+0x10f0]
10007525:	50                   	push   eax
10007526:	e8 ff fc ff ff       	call   1000722a <BF_decode>
1000752b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
1000752f:	83 c4 0c             	add    esp,0xc
10007532:	85 c0                	test   eax,eax
10007534:	0f 85 16 2d 00 00    	jne    1000a250 <_crypt_blowfish_rn+0x2dea>
1000753a:	6a 04                	push   0x4
1000753c:	8d 5c 24 5c          	lea    ebx,[esp+0x5c]
10007540:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
10007547:	50                   	push   eax
10007548:	e8 8f fe ff ff       	call   100073dc <BF_swap>
1000754d:	8d 84 24 60 10 00 00 	lea    eax,[esp+0x1060]
10007554:	50                   	push   eax
10007555:	8d 84 24 ac 10 00 00 	lea    eax,[esp+0x10ac]
1000755c:	50                   	push   eax
1000755d:	ff b4 24 24 11 00 00 	push   DWORD PTR [esp+0x1124]
10007564:	e8 aa fe ff ff       	call   10007413 <BF_set_key>
10007569:	be a0 b2 00 10       	mov    esi,0x1000b2a0	1000756a: R_386_32	.data
1000756e:	b9 00 04 00 00       	mov    ecx,0x400
10007573:	89 df                	mov    edi,ebx
10007575:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007577:	83 c4 14             	add    esp,0x14
1000757a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000757e:	89 04 24             	mov    DWORD PTR [esp],eax
10007581:	bb 00 00 00 00       	mov    ebx,0x0
10007586:	b8 00 00 00 00       	mov    eax,0x0
1000758b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
1000758e:	83 e1 02             	and    ecx,0x2
10007591:	8d 91 24 04 00 00    	lea    edx,[ecx+0x424]
10007597:	8b 54 94 58          	mov    edx,DWORD PTR [esp+edx*4+0x58]
1000759b:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
100075a2:	31 c2                	xor    edx,eax
100075a4:	89 d7                	mov    edi,edx
100075a6:	c1 ef 06             	shr    edi,0x6
100075a9:	89 d5                	mov    ebp,edx
100075ab:	c1 ed 0e             	shr    ebp,0xe
100075ae:	89 d0                	mov    eax,edx
100075b0:	c1 e8 16             	shr    eax,0x16
100075b3:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100075ba:	81 e6 fc 03 00 00    	and    esi,0x3fc
100075c0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100075c6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100075cc:	25 fc 03 00 00       	and    eax,0x3fc
100075d1:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100075d5:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100075dc:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100075e3:	81 c1 25 04 00 00    	add    ecx,0x425
100075e9:	8b 4c 8c 58          	mov    ecx,DWORD PTR [esp+ecx*4+0x58]
100075ed:	33 8c 24 5c 10 00 00 	xor    ecx,DWORD PTR [esp+0x105c]
100075f4:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100075fb:	31 c8                	xor    eax,ecx
100075fd:	31 c3                	xor    ebx,eax
100075ff:	89 d8                	mov    eax,ebx
10007601:	c1 e8 06             	shr    eax,0x6
10007604:	89 c1                	mov    ecx,eax
10007606:	89 df                	mov    edi,ebx
10007608:	c1 ef 0e             	shr    edi,0xe
1000760b:	89 d8                	mov    eax,ebx
1000760d:	c1 e8 16             	shr    eax,0x16
10007610:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10007617:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000761d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007623:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007629:	25 fc 03 00 00       	and    eax,0x3fc
1000762e:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007632:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10007639:	33 84 0c 58 08 00 00 	xor    eax,DWORD PTR [esp+ecx*1+0x858]
10007640:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
10007647:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
1000764e:	89 c1                	mov    ecx,eax
10007650:	31 d1                	xor    ecx,edx
10007652:	89 ca                	mov    edx,ecx
10007654:	c1 ea 06             	shr    edx,0x6
10007657:	89 cf                	mov    edi,ecx
10007659:	c1 ef 0e             	shr    edi,0xe
1000765c:	89 c8                	mov    eax,ecx
1000765e:	c1 e8 16             	shr    eax,0x16
10007661:	8d 34 8d 00 00 00 00 	lea    esi,[ecx*4+0x0]
10007668:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000766e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007674:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000767a:	25 fc 03 00 00       	and    eax,0x3fc
1000767f:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007683:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
1000768a:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10007691:	33 9c 24 64 10 00 00 	xor    ebx,DWORD PTR [esp+0x1064]
10007698:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
1000769f:	89 c2                	mov    edx,eax
100076a1:	31 da                	xor    edx,ebx
100076a3:	89 d6                	mov    esi,edx
100076a5:	c1 ee 06             	shr    esi,0x6
100076a8:	89 d7                	mov    edi,edx
100076aa:	c1 ef 0e             	shr    edi,0xe
100076ad:	89 d0                	mov    eax,edx
100076af:	c1 e8 16             	shr    eax,0x16
100076b2:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
100076b9:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100076bf:	81 e6 fc 03 00 00    	and    esi,0x3fc
100076c5:	81 e7 fc 03 00 00    	and    edi,0x3fc
100076cb:	25 fc 03 00 00       	and    eax,0x3fc
100076d0:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100076d4:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
100076db:	33 84 34 58 08 00 00 	xor    eax,DWORD PTR [esp+esi*1+0x858]
100076e2:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
100076e9:	03 84 1c 58 0c 00 00 	add    eax,DWORD PTR [esp+ebx*1+0xc58]
100076f0:	31 c8                	xor    eax,ecx
100076f2:	89 c3                	mov    ebx,eax
100076f4:	c1 eb 06             	shr    ebx,0x6
100076f7:	89 c7                	mov    edi,eax
100076f9:	c1 ef 0e             	shr    edi,0xe
100076fc:	89 c6                	mov    esi,eax
100076fe:	c1 ee 16             	shr    esi,0x16
10007701:	89 f1                	mov    ecx,esi
10007703:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000770a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007710:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007716:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000771c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007722:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007726:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
1000772d:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10007734:	33 94 24 6c 10 00 00 	xor    edx,DWORD PTR [esp+0x106c]
1000773b:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10007742:	31 ca                	xor    edx,ecx
10007744:	89 d6                	mov    esi,edx
10007746:	c1 ee 06             	shr    esi,0x6
10007749:	89 d7                	mov    edi,edx
1000774b:	c1 ef 0e             	shr    edi,0xe
1000774e:	89 d3                	mov    ebx,edx
10007750:	c1 eb 16             	shr    ebx,0x16
10007753:	89 d9                	mov    ecx,ebx
10007755:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
1000775c:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007762:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007768:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000776e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007774:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007778:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
1000777f:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007786:	33 84 24 70 10 00 00 	xor    eax,DWORD PTR [esp+0x1070]
1000778d:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007794:	31 c8                	xor    eax,ecx
10007796:	89 c6                	mov    esi,eax
10007798:	c1 ee 06             	shr    esi,0x6
1000779b:	89 c7                	mov    edi,eax
1000779d:	c1 ef 0e             	shr    edi,0xe
100077a0:	89 c3                	mov    ebx,eax
100077a2:	c1 eb 16             	shr    ebx,0x16
100077a5:	89 d9                	mov    ecx,ebx
100077a7:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
100077ae:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100077b4:	81 e6 fc 03 00 00    	and    esi,0x3fc
100077ba:	81 e7 fc 03 00 00    	and    edi,0x3fc
100077c0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100077c6:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100077ca:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100077d1:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100077d8:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
100077df:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
100077e6:	31 ca                	xor    edx,ecx
100077e8:	89 d6                	mov    esi,edx
100077ea:	c1 ee 06             	shr    esi,0x6
100077ed:	89 d7                	mov    edi,edx
100077ef:	c1 ef 0e             	shr    edi,0xe
100077f2:	89 d3                	mov    ebx,edx
100077f4:	c1 eb 16             	shr    ebx,0x16
100077f7:	89 d9                	mov    ecx,ebx
100077f9:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10007800:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007806:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000780c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007812:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007818:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000781c:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007823:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
1000782a:	33 84 24 78 10 00 00 	xor    eax,DWORD PTR [esp+0x1078]
10007831:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007838:	31 c8                	xor    eax,ecx
1000783a:	89 c6                	mov    esi,eax
1000783c:	c1 ee 06             	shr    esi,0x6
1000783f:	89 c7                	mov    edi,eax
10007841:	c1 ef 0e             	shr    edi,0xe
10007844:	89 c3                	mov    ebx,eax
10007846:	c1 eb 16             	shr    ebx,0x16
10007849:	89 d9                	mov    ecx,ebx
1000784b:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007852:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007858:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000785e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007864:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000786a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000786e:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007875:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
1000787c:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10007883:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
1000788a:	31 ca                	xor    edx,ecx
1000788c:	89 d6                	mov    esi,edx
1000788e:	c1 ee 06             	shr    esi,0x6
10007891:	89 d7                	mov    edi,edx
10007893:	c1 ef 0e             	shr    edi,0xe
10007896:	89 d3                	mov    ebx,edx
10007898:	c1 eb 16             	shr    ebx,0x16
1000789b:	89 d9                	mov    ecx,ebx
1000789d:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
100078a4:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100078aa:	81 e6 fc 03 00 00    	and    esi,0x3fc
100078b0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100078b6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100078bc:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100078c0:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100078c7:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100078ce:	33 84 24 80 10 00 00 	xor    eax,DWORD PTR [esp+0x1080]
100078d5:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
100078dc:	31 c8                	xor    eax,ecx
100078de:	89 c6                	mov    esi,eax
100078e0:	c1 ee 06             	shr    esi,0x6
100078e3:	89 c7                	mov    edi,eax
100078e5:	c1 ef 0e             	shr    edi,0xe
100078e8:	89 c3                	mov    ebx,eax
100078ea:	c1 eb 16             	shr    ebx,0x16
100078ed:	89 d9                	mov    ecx,ebx
100078ef:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
100078f6:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100078fc:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007902:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007908:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000790e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007912:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007919:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007920:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10007927:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
1000792e:	31 ca                	xor    edx,ecx
10007930:	89 d6                	mov    esi,edx
10007932:	c1 ee 06             	shr    esi,0x6
10007935:	89 d7                	mov    edi,edx
10007937:	c1 ef 0e             	shr    edi,0xe
1000793a:	89 d3                	mov    ebx,edx
1000793c:	c1 eb 16             	shr    ebx,0x16
1000793f:	89 d9                	mov    ecx,ebx
10007941:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10007948:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000794e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007954:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000795a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007960:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007964:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
1000796b:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007972:	33 84 24 88 10 00 00 	xor    eax,DWORD PTR [esp+0x1088]
10007979:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007980:	31 c8                	xor    eax,ecx
10007982:	89 c6                	mov    esi,eax
10007984:	c1 ee 06             	shr    esi,0x6
10007987:	89 c7                	mov    edi,eax
10007989:	c1 ef 0e             	shr    edi,0xe
1000798c:	89 c3                	mov    ebx,eax
1000798e:	c1 eb 16             	shr    ebx,0x16
10007991:	89 d9                	mov    ecx,ebx
10007993:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
1000799a:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100079a0:	81 e6 fc 03 00 00    	and    esi,0x3fc
100079a6:	81 e7 fc 03 00 00    	and    edi,0x3fc
100079ac:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100079b2:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100079b6:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100079bd:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100079c4:	33 94 24 8c 10 00 00 	xor    edx,DWORD PTR [esp+0x108c]
100079cb:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
100079d2:	31 ca                	xor    edx,ecx
100079d4:	89 d3                	mov    ebx,edx
100079d6:	c1 eb 06             	shr    ebx,0x6
100079d9:	89 d7                	mov    edi,edx
100079db:	c1 ef 0e             	shr    edi,0xe
100079de:	89 d6                	mov    esi,edx
100079e0:	c1 ee 16             	shr    esi,0x16
100079e3:	89 f1                	mov    ecx,esi
100079e5:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100079ec:	81 e6 fc 03 00 00    	and    esi,0x3fc
100079f2:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100079f8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100079fe:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007a04:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007a08:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007a0f:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10007a16:	33 84 24 90 10 00 00 	xor    eax,DWORD PTR [esp+0x1090]
10007a1d:	89 cb                	mov    ebx,ecx
10007a1f:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007a26:	31 d8                	xor    eax,ebx
10007a28:	89 c6                	mov    esi,eax
10007a2a:	c1 ee 06             	shr    esi,0x6
10007a2d:	89 c7                	mov    edi,eax
10007a2f:	c1 ef 0e             	shr    edi,0xe
10007a32:	89 c3                	mov    ebx,eax
10007a34:	c1 eb 16             	shr    ebx,0x16
10007a37:	89 d9                	mov    ecx,ebx
10007a39:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007a40:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007a46:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007a4c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007a52:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007a58:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007a5c:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007a63:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007a6a:	33 94 24 94 10 00 00 	xor    edx,DWORD PTR [esp+0x1094]
10007a71:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007a78:	31 ca                	xor    edx,ecx
10007a7a:	89 d3                	mov    ebx,edx
10007a7c:	c1 eb 06             	shr    ebx,0x6
10007a7f:	89 d7                	mov    edi,edx
10007a81:	c1 ef 0e             	shr    edi,0xe
10007a84:	89 d6                	mov    esi,edx
10007a86:	c1 ee 16             	shr    esi,0x16
10007a89:	89 f1                	mov    ecx,esi
10007a8b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007a92:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007a98:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007a9e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007aa4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007aaa:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007aae:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007ab5:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10007abc:	33 84 24 98 10 00 00 	xor    eax,DWORD PTR [esp+0x1098]
10007ac3:	89 cb                	mov    ebx,ecx
10007ac5:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007acc:	31 c3                	xor    ebx,eax
10007ace:	89 d0                	mov    eax,edx
10007ad0:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10007ad7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10007ada:	89 84 8c 58 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x1058],eax
10007ae1:	89 9c 8c 5c 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x105c],ebx
10007ae8:	83 c1 02             	add    ecx,0x2
10007aeb:	89 0c 24             	mov    DWORD PTR [esp],ecx
10007aee:	83 f9 12             	cmp    ecx,0x12
10007af1:	0f 85 94 fa ff ff    	jne    1000758b <_crypt_blowfish_rn+0x125>
10007af7:	8d 4c 24 58          	lea    ecx,[esp+0x58]
10007afb:	83 c1 10             	add    ecx,0x10
10007afe:	8b 94 24 f0 10 00 00 	mov    edx,DWORD PTR [esp+0x10f0]
10007b05:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
10007b0c:	31 c2                	xor    edx,eax
10007b0e:	89 d7                	mov    edi,edx
10007b10:	c1 ef 06             	shr    edi,0x6
10007b13:	89 d5                	mov    ebp,edx
10007b15:	c1 ed 0e             	shr    ebp,0xe
10007b18:	89 d0                	mov    eax,edx
10007b1a:	c1 e8 16             	shr    eax,0x16
10007b1d:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007b24:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007b2a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007b30:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007b36:	25 fc 03 00 00       	and    eax,0x3fc
10007b3b:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007b3f:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007b46:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007b4d:	89 c7                	mov    edi,eax
10007b4f:	8b 84 24 f4 10 00 00 	mov    eax,DWORD PTR [esp+0x10f4]
10007b56:	33 84 24 5c 10 00 00 	xor    eax,DWORD PTR [esp+0x105c]
10007b5d:	03 bc 34 58 0c 00 00 	add    edi,DWORD PTR [esp+esi*1+0xc58]
10007b64:	31 f8                	xor    eax,edi
10007b66:	31 d8                	xor    eax,ebx
10007b68:	89 c7                	mov    edi,eax
10007b6a:	c1 ef 06             	shr    edi,0x6
10007b6d:	89 c5                	mov    ebp,eax
10007b6f:	c1 ed 0e             	shr    ebp,0xe
10007b72:	89 c3                	mov    ebx,eax
10007b74:	c1 eb 16             	shr    ebx,0x16
10007b77:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007b7e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007b84:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007b8a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007b90:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007b96:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007b9a:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007ba1:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007ba8:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
10007baf:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007bb6:	31 da                	xor    edx,ebx
10007bb8:	89 d7                	mov    edi,edx
10007bba:	c1 ef 06             	shr    edi,0x6
10007bbd:	89 d5                	mov    ebp,edx
10007bbf:	c1 ed 0e             	shr    ebp,0xe
10007bc2:	89 d3                	mov    ebx,edx
10007bc4:	c1 eb 16             	shr    ebx,0x16
10007bc7:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007bce:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007bd4:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007bda:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007be0:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007be6:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007bea:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007bf1:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007bf8:	33 84 24 64 10 00 00 	xor    eax,DWORD PTR [esp+0x1064]
10007bff:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007c06:	31 d8                	xor    eax,ebx
10007c08:	89 c7                	mov    edi,eax
10007c0a:	c1 ef 06             	shr    edi,0x6
10007c0d:	89 c5                	mov    ebp,eax
10007c0f:	c1 ed 0e             	shr    ebp,0xe
10007c12:	89 c3                	mov    ebx,eax
10007c14:	c1 eb 16             	shr    ebx,0x16
10007c17:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007c1e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007c24:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007c2a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007c30:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007c36:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007c3a:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007c41:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007c48:	33 94 24 68 10 00 00 	xor    edx,DWORD PTR [esp+0x1068]
10007c4f:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007c56:	31 da                	xor    edx,ebx
10007c58:	89 d7                	mov    edi,edx
10007c5a:	c1 ef 06             	shr    edi,0x6
10007c5d:	89 d5                	mov    ebp,edx
10007c5f:	c1 ed 0e             	shr    ebp,0xe
10007c62:	89 d3                	mov    ebx,edx
10007c64:	c1 eb 16             	shr    ebx,0x16
10007c67:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007c6e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007c74:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007c7a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007c80:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007c86:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007c8a:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007c91:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007c98:	33 84 24 6c 10 00 00 	xor    eax,DWORD PTR [esp+0x106c]
10007c9f:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007ca6:	31 d8                	xor    eax,ebx
10007ca8:	89 c7                	mov    edi,eax
10007caa:	c1 ef 06             	shr    edi,0x6
10007cad:	89 c5                	mov    ebp,eax
10007caf:	c1 ed 0e             	shr    ebp,0xe
10007cb2:	89 c3                	mov    ebx,eax
10007cb4:	c1 eb 16             	shr    ebx,0x16
10007cb7:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007cbe:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007cc4:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007cca:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007cd0:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007cd6:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007cda:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007ce1:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007ce8:	33 94 24 70 10 00 00 	xor    edx,DWORD PTR [esp+0x1070]
10007cef:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007cf6:	31 da                	xor    edx,ebx
10007cf8:	89 d7                	mov    edi,edx
10007cfa:	c1 ef 06             	shr    edi,0x6
10007cfd:	89 d5                	mov    ebp,edx
10007cff:	c1 ed 0e             	shr    ebp,0xe
10007d02:	89 d3                	mov    ebx,edx
10007d04:	c1 eb 16             	shr    ebx,0x16
10007d07:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007d0e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007d14:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007d1a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007d20:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007d26:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007d2a:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007d31:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007d38:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10007d3f:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007d46:	31 d8                	xor    eax,ebx
10007d48:	89 c7                	mov    edi,eax
10007d4a:	c1 ef 06             	shr    edi,0x6
10007d4d:	89 c5                	mov    ebp,eax
10007d4f:	c1 ed 0e             	shr    ebp,0xe
10007d52:	89 c3                	mov    ebx,eax
10007d54:	c1 eb 16             	shr    ebx,0x16
10007d57:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007d5e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007d64:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007d6a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007d70:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007d76:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007d7a:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007d81:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007d88:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10007d8f:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007d96:	31 da                	xor    edx,ebx
10007d98:	89 d7                	mov    edi,edx
10007d9a:	c1 ef 06             	shr    edi,0x6
10007d9d:	89 d5                	mov    ebp,edx
10007d9f:	c1 ed 0e             	shr    ebp,0xe
10007da2:	89 d3                	mov    ebx,edx
10007da4:	c1 eb 16             	shr    ebx,0x16
10007da7:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007dae:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007db4:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007dba:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007dc0:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007dc6:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007dca:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007dd1:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007dd8:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10007ddf:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007de6:	31 d8                	xor    eax,ebx
10007de8:	89 c7                	mov    edi,eax
10007dea:	c1 ef 06             	shr    edi,0x6
10007ded:	89 c5                	mov    ebp,eax
10007def:	c1 ed 0e             	shr    ebp,0xe
10007df2:	89 c3                	mov    ebx,eax
10007df4:	c1 eb 16             	shr    ebx,0x16
10007df7:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007dfe:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007e04:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007e0a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007e10:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007e16:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007e1a:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007e21:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007e28:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10007e2f:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007e36:	31 da                	xor    edx,ebx
10007e38:	89 d7                	mov    edi,edx
10007e3a:	c1 ef 06             	shr    edi,0x6
10007e3d:	89 d5                	mov    ebp,edx
10007e3f:	c1 ed 0e             	shr    ebp,0xe
10007e42:	89 d3                	mov    ebx,edx
10007e44:	c1 eb 16             	shr    ebx,0x16
10007e47:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007e4e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007e54:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007e5a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007e60:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007e66:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007e6a:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007e71:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007e78:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10007e7f:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007e86:	31 d8                	xor    eax,ebx
10007e88:	89 c7                	mov    edi,eax
10007e8a:	c1 ef 06             	shr    edi,0x6
10007e8d:	89 c5                	mov    ebp,eax
10007e8f:	c1 ed 0e             	shr    ebp,0xe
10007e92:	89 c3                	mov    ebx,eax
10007e94:	c1 eb 16             	shr    ebx,0x16
10007e97:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007e9e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007ea4:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007eaa:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007eb0:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007eb6:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007eba:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007ec1:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007ec8:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10007ecf:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007ed6:	31 da                	xor    edx,ebx
10007ed8:	89 d7                	mov    edi,edx
10007eda:	c1 ef 06             	shr    edi,0x6
10007edd:	89 d5                	mov    ebp,edx
10007edf:	c1 ed 0e             	shr    ebp,0xe
10007ee2:	89 d3                	mov    ebx,edx
10007ee4:	c1 eb 16             	shr    ebx,0x16
10007ee7:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007eee:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007ef4:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007efa:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007f00:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007f06:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007f0a:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007f11:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007f18:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10007f1f:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007f26:	31 d8                	xor    eax,ebx
10007f28:	89 c7                	mov    edi,eax
10007f2a:	c1 ef 06             	shr    edi,0x6
10007f2d:	89 c5                	mov    ebp,eax
10007f2f:	c1 ed 0e             	shr    ebp,0xe
10007f32:	89 c3                	mov    ebx,eax
10007f34:	c1 eb 16             	shr    ebx,0x16
10007f37:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007f3e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007f44:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007f4a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007f50:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007f56:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007f5a:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007f61:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007f68:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10007f6f:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007f76:	31 da                	xor    edx,ebx
10007f78:	89 d7                	mov    edi,edx
10007f7a:	c1 ef 06             	shr    edi,0x6
10007f7d:	89 d5                	mov    ebp,edx
10007f7f:	c1 ed 0e             	shr    ebp,0xe
10007f82:	89 d3                	mov    ebx,edx
10007f84:	c1 eb 16             	shr    ebx,0x16
10007f87:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007f8e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007f94:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007f9a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007fa0:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007fa6:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007faa:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007fb1:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007fb8:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10007fbf:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007fc6:	31 d8                	xor    eax,ebx
10007fc8:	89 c6                	mov    esi,eax
10007fca:	c1 ee 06             	shr    esi,0x6
10007fcd:	89 c5                	mov    ebp,eax
10007fcf:	c1 ed 0e             	shr    ebp,0xe
10007fd2:	89 c3                	mov    ebx,eax
10007fd4:	c1 eb 16             	shr    ebx,0x16
10007fd7:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10007fde:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007fe4:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007fea:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007ff0:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007ff6:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007ffa:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008001:	33 9c 34 58 08 00 00 	xor    ebx,DWORD PTR [esp+esi*1+0x858]
10008008:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
1000800f:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10008016:	31 da                	xor    edx,ebx
10008018:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
1000801f:	89 41 f0             	mov    DWORD PTR [ecx-0x10],eax
10008022:	89 51 f4             	mov    DWORD PTR [ecx-0xc],edx
10008025:	8b 9c 24 e8 10 00 00 	mov    ebx,DWORD PTR [esp+0x10e8]
1000802c:	33 9c 24 58 10 00 00 	xor    ebx,DWORD PTR [esp+0x1058]
10008033:	31 d8                	xor    eax,ebx
10008035:	89 c5                	mov    ebp,eax
10008037:	c1 ed 06             	shr    ebp,0x6
1000803a:	89 c6                	mov    esi,eax
1000803c:	c1 ee 0e             	shr    esi,0xe
1000803f:	89 c3                	mov    ebx,eax
10008041:	c1 eb 16             	shr    ebx,0x16
10008044:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000804b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008051:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008057:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000805d:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008063:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008067:	03 9c 34 58 04 00 00 	add    ebx,DWORD PTR [esp+esi*1+0x458]
1000806e:	33 9c 2c 58 08 00 00 	xor    ebx,DWORD PTR [esp+ebp*1+0x858]
10008075:	8b b4 24 ec 10 00 00 	mov    esi,DWORD PTR [esp+0x10ec]
1000807c:	33 b4 24 5c 10 00 00 	xor    esi,DWORD PTR [esp+0x105c]
10008083:	31 f2                	xor    edx,esi
10008085:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
1000808c:	89 de                	mov    esi,ebx
1000808e:	31 d6                	xor    esi,edx
10008090:	89 f5                	mov    ebp,esi
10008092:	c1 ed 06             	shr    ebp,0x6
10008095:	89 f3                	mov    ebx,esi
10008097:	c1 eb 0e             	shr    ebx,0xe
1000809a:	89 f2                	mov    edx,esi
1000809c:	c1 ea 16             	shr    edx,0x16
1000809f:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100080a6:	81 e7 fc 03 00 00    	and    edi,0x3fc
100080ac:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100080b2:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100080b8:	81 e2 fc 03 00 00    	and    edx,0x3fc
100080be:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100080c2:	03 94 1c 58 04 00 00 	add    edx,DWORD PTR [esp+ebx*1+0x458]
100080c9:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
100080d0:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
100080d7:	89 d3                	mov    ebx,edx
100080d9:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
100080e0:	31 c3                	xor    ebx,eax
100080e2:	89 df                	mov    edi,ebx
100080e4:	c1 ef 06             	shr    edi,0x6
100080e7:	89 dd                	mov    ebp,ebx
100080e9:	c1 ed 0e             	shr    ebp,0xe
100080ec:	89 da                	mov    edx,ebx
100080ee:	c1 ea 16             	shr    edx,0x16
100080f1:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
100080f8:	25 fc 03 00 00       	and    eax,0x3fc
100080fd:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008103:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008109:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000810f:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008113:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000811a:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008121:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
10008128:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
1000812f:	31 d6                	xor    esi,edx
10008131:	89 f0                	mov    eax,esi
10008133:	c1 e8 06             	shr    eax,0x6
10008136:	89 f5                	mov    ebp,esi
10008138:	c1 ed 0e             	shr    ebp,0xe
1000813b:	89 f2                	mov    edx,esi
1000813d:	c1 ea 16             	shr    edx,0x16
10008140:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008147:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000814d:	25 fc 03 00 00       	and    eax,0x3fc
10008152:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008158:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000815e:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008162:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008169:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
10008170:	33 9c 24 68 10 00 00 	xor    ebx,DWORD PTR [esp+0x1068]
10008177:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
1000817e:	31 d3                	xor    ebx,edx
10008180:	89 dd                	mov    ebp,ebx
10008182:	c1 ed 06             	shr    ebp,0x6
10008185:	89 da                	mov    edx,ebx
10008187:	c1 ea 0e             	shr    edx,0xe
1000818a:	89 d8                	mov    eax,ebx
1000818c:	c1 e8 16             	shr    eax,0x16
1000818f:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
10008196:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000819c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100081a2:	81 e2 fc 03 00 00    	and    edx,0x3fc
100081a8:	25 fc 03 00 00       	and    eax,0x3fc
100081ad:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100081b1:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
100081b8:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
100081bf:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
100081c6:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100081cd:	89 c2                	mov    edx,eax
100081cf:	31 f2                	xor    edx,esi
100081d1:	89 d7                	mov    edi,edx
100081d3:	c1 ef 06             	shr    edi,0x6
100081d6:	89 d5                	mov    ebp,edx
100081d8:	c1 ed 0e             	shr    ebp,0xe
100081db:	89 d0                	mov    eax,edx
100081dd:	c1 e8 16             	shr    eax,0x16
100081e0:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100081e7:	81 e6 fc 03 00 00    	and    esi,0x3fc
100081ed:	81 e7 fc 03 00 00    	and    edi,0x3fc
100081f3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100081f9:	25 fc 03 00 00       	and    eax,0x3fc
100081fe:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008202:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008209:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008210:	33 9c 24 70 10 00 00 	xor    ebx,DWORD PTR [esp+0x1070]
10008217:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
1000821e:	31 c3                	xor    ebx,eax
10008220:	89 df                	mov    edi,ebx
10008222:	c1 ef 06             	shr    edi,0x6
10008225:	89 dd                	mov    ebp,ebx
10008227:	c1 ed 0e             	shr    ebp,0xe
1000822a:	89 d8                	mov    eax,ebx
1000822c:	c1 e8 16             	shr    eax,0x16
1000822f:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10008236:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000823c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008242:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008248:	25 fc 03 00 00       	and    eax,0x3fc
1000824d:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008251:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008258:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000825f:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10008266:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
1000826d:	31 c2                	xor    edx,eax
1000826f:	89 d7                	mov    edi,edx
10008271:	c1 ef 06             	shr    edi,0x6
10008274:	89 d5                	mov    ebp,edx
10008276:	c1 ed 0e             	shr    ebp,0xe
10008279:	89 d0                	mov    eax,edx
1000827b:	c1 e8 16             	shr    eax,0x16
1000827e:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008285:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000828b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008291:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008297:	25 fc 03 00 00       	and    eax,0x3fc
1000829c:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100082a0:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100082a7:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100082ae:	33 9c 24 78 10 00 00 	xor    ebx,DWORD PTR [esp+0x1078]
100082b5:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100082bc:	31 c3                	xor    ebx,eax
100082be:	89 df                	mov    edi,ebx
100082c0:	c1 ef 06             	shr    edi,0x6
100082c3:	89 dd                	mov    ebp,ebx
100082c5:	c1 ed 0e             	shr    ebp,0xe
100082c8:	89 d8                	mov    eax,ebx
100082ca:	c1 e8 16             	shr    eax,0x16
100082cd:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100082d4:	81 e6 fc 03 00 00    	and    esi,0x3fc
100082da:	81 e7 fc 03 00 00    	and    edi,0x3fc
100082e0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100082e6:	25 fc 03 00 00       	and    eax,0x3fc
100082eb:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100082ef:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100082f6:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100082fd:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10008304:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
1000830b:	31 c2                	xor    edx,eax
1000830d:	89 d7                	mov    edi,edx
1000830f:	c1 ef 06             	shr    edi,0x6
10008312:	89 d5                	mov    ebp,edx
10008314:	c1 ed 0e             	shr    ebp,0xe
10008317:	89 d0                	mov    eax,edx
10008319:	c1 e8 16             	shr    eax,0x16
1000831c:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008323:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008329:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000832f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008335:	25 fc 03 00 00       	and    eax,0x3fc
1000833a:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000833e:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008345:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000834c:	33 9c 24 80 10 00 00 	xor    ebx,DWORD PTR [esp+0x1080]
10008353:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
1000835a:	31 c3                	xor    ebx,eax
1000835c:	89 df                	mov    edi,ebx
1000835e:	c1 ef 06             	shr    edi,0x6
10008361:	89 dd                	mov    ebp,ebx
10008363:	c1 ed 0e             	shr    ebp,0xe
10008366:	89 d8                	mov    eax,ebx
10008368:	c1 e8 16             	shr    eax,0x16
1000836b:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10008372:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008378:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000837e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008384:	25 fc 03 00 00       	and    eax,0x3fc
10008389:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000838d:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008394:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000839b:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
100083a2:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100083a9:	31 d0                	xor    eax,edx
100083ab:	89 c7                	mov    edi,eax
100083ad:	c1 ef 06             	shr    edi,0x6
100083b0:	89 c5                	mov    ebp,eax
100083b2:	c1 ed 0e             	shr    ebp,0xe
100083b5:	89 c2                	mov    edx,eax
100083b7:	c1 ea 16             	shr    edx,0x16
100083ba:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100083c1:	81 e6 fc 03 00 00    	and    esi,0x3fc
100083c7:	81 e7 fc 03 00 00    	and    edi,0x3fc
100083cd:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100083d3:	81 e2 fc 03 00 00    	and    edx,0x3fc
100083d9:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100083dd:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100083e4:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100083eb:	33 9c 24 88 10 00 00 	xor    ebx,DWORD PTR [esp+0x1088]
100083f2:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100083f9:	31 d3                	xor    ebx,edx
100083fb:	89 df                	mov    edi,ebx
100083fd:	c1 ef 06             	shr    edi,0x6
10008400:	89 dd                	mov    ebp,ebx
10008402:	c1 ed 0e             	shr    ebp,0xe
10008405:	89 da                	mov    edx,ebx
10008407:	c1 ea 16             	shr    edx,0x16
1000840a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10008411:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008417:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000841d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008423:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008429:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000842d:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008434:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000843b:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10008442:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008449:	31 d0                	xor    eax,edx
1000844b:	89 c7                	mov    edi,eax
1000844d:	c1 ef 06             	shr    edi,0x6
10008450:	89 c5                	mov    ebp,eax
10008452:	c1 ed 0e             	shr    ebp,0xe
10008455:	89 c2                	mov    edx,eax
10008457:	c1 ea 16             	shr    edx,0x16
1000845a:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008461:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008467:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000846d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008473:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008479:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000847d:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008484:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000848b:	33 9c 24 90 10 00 00 	xor    ebx,DWORD PTR [esp+0x1090]
10008492:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008499:	31 d3                	xor    ebx,edx
1000849b:	89 df                	mov    edi,ebx
1000849d:	c1 ef 06             	shr    edi,0x6
100084a0:	89 dd                	mov    ebp,ebx
100084a2:	c1 ed 0e             	shr    ebp,0xe
100084a5:	89 da                	mov    edx,ebx
100084a7:	c1 ea 16             	shr    edx,0x16
100084aa:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100084b1:	81 e6 fc 03 00 00    	and    esi,0x3fc
100084b7:	81 e7 fc 03 00 00    	and    edi,0x3fc
100084bd:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100084c3:	81 e2 fc 03 00 00    	and    edx,0x3fc
100084c9:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100084cd:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100084d4:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100084db:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
100084e2:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100084e9:	31 d0                	xor    eax,edx
100084eb:	89 c7                	mov    edi,eax
100084ed:	c1 ef 06             	shr    edi,0x6
100084f0:	89 c5                	mov    ebp,eax
100084f2:	c1 ed 0e             	shr    ebp,0xe
100084f5:	89 c2                	mov    edx,eax
100084f7:	c1 ea 16             	shr    edx,0x16
100084fa:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008501:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008507:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000850d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008513:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008519:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000851d:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008524:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000852b:	33 9c 24 98 10 00 00 	xor    ebx,DWORD PTR [esp+0x1098]
10008532:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008539:	31 d3                	xor    ebx,edx
1000853b:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10008542:	89 41 f8             	mov    DWORD PTR [ecx-0x8],eax
10008545:	89 59 fc             	mov    DWORD PTR [ecx-0x4],ebx
10008548:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
1000854f:	39 d1                	cmp    ecx,edx
10008551:	0f 85 a4 f5 ff ff    	jne    10007afb <_crypt_blowfish_rn+0x695>
10008557:	8b 84 24 a0 10 00 00 	mov    eax,DWORD PTR [esp+0x10a0]
1000855e:	31 84 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],eax
10008565:	8b 84 24 a4 10 00 00 	mov    eax,DWORD PTR [esp+0x10a4]
1000856c:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
10008573:	8b 84 24 a8 10 00 00 	mov    eax,DWORD PTR [esp+0x10a8]
1000857a:	31 84 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],eax
10008581:	8b 84 24 ac 10 00 00 	mov    eax,DWORD PTR [esp+0x10ac]
10008588:	31 84 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],eax
1000858f:	8b 84 24 b0 10 00 00 	mov    eax,DWORD PTR [esp+0x10b0]
10008596:	31 84 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],eax
1000859d:	8b 84 24 b4 10 00 00 	mov    eax,DWORD PTR [esp+0x10b4]
100085a4:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
100085ab:	8b 84 24 b8 10 00 00 	mov    eax,DWORD PTR [esp+0x10b8]
100085b2:	31 84 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],eax
100085b9:	8b 84 24 bc 10 00 00 	mov    eax,DWORD PTR [esp+0x10bc]
100085c0:	31 84 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],eax
100085c7:	8b 84 24 c0 10 00 00 	mov    eax,DWORD PTR [esp+0x10c0]
100085ce:	31 84 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],eax
100085d5:	8b 84 24 c4 10 00 00 	mov    eax,DWORD PTR [esp+0x10c4]
100085dc:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
100085e3:	8b 84 24 c8 10 00 00 	mov    eax,DWORD PTR [esp+0x10c8]
100085ea:	31 84 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],eax
100085f1:	8b 84 24 cc 10 00 00 	mov    eax,DWORD PTR [esp+0x10cc]
100085f8:	31 84 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],eax
100085ff:	8b 84 24 d0 10 00 00 	mov    eax,DWORD PTR [esp+0x10d0]
10008606:	31 84 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],eax
1000860d:	8b 84 24 d4 10 00 00 	mov    eax,DWORD PTR [esp+0x10d4]
10008614:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
1000861b:	8b 84 24 d8 10 00 00 	mov    eax,DWORD PTR [esp+0x10d8]
10008622:	31 84 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],eax
10008629:	8b 84 24 dc 10 00 00 	mov    eax,DWORD PTR [esp+0x10dc]
10008630:	31 84 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],eax
10008637:	8b 84 24 e0 10 00 00 	mov    eax,DWORD PTR [esp+0x10e0]
1000863e:	31 84 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],eax
10008645:	8b 84 24 e4 10 00 00 	mov    eax,DWORD PTR [esp+0x10e4]
1000864c:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
10008653:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
1000865a:	b9 00 00 00 00       	mov    ecx,0x0
1000865f:	b8 00 00 00 00       	mov    eax,0x0
10008664:	83 c3 08             	add    ebx,0x8
10008667:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
1000866e:	89 c7                	mov    edi,eax
10008670:	c1 ef 06             	shr    edi,0x6
10008673:	89 c5                	mov    ebp,eax
10008675:	c1 ed 0e             	shr    ebp,0xe
10008678:	89 c2                	mov    edx,eax
1000867a:	c1 ea 16             	shr    edx,0x16
1000867d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008684:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000868a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008690:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008696:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000869c:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100086a0:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100086a7:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100086ae:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100086b5:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
100086bc:	31 ca                	xor    edx,ecx
100086be:	89 d5                	mov    ebp,edx
100086c0:	c1 ed 06             	shr    ebp,0x6
100086c3:	89 d6                	mov    esi,edx
100086c5:	c1 ee 0e             	shr    esi,0xe
100086c8:	89 d1                	mov    ecx,edx
100086ca:	c1 e9 16             	shr    ecx,0x16
100086cd:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
100086d4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100086da:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100086e0:	81 e6 fc 03 00 00    	and    esi,0x3fc
100086e6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100086ec:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100086f0:	03 8c 34 58 04 00 00 	add    ecx,DWORD PTR [esp+esi*1+0x458]
100086f7:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
100086fe:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10008705:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
1000870c:	31 c8                	xor    eax,ecx
1000870e:	89 c7                	mov    edi,eax
10008710:	c1 ef 06             	shr    edi,0x6
10008713:	89 c5                	mov    ebp,eax
10008715:	c1 ed 0e             	shr    ebp,0xe
10008718:	89 c1                	mov    ecx,eax
1000871a:	c1 e9 16             	shr    ecx,0x16
1000871d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008724:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000872a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008730:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008736:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000873c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008740:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008747:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000874e:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10008755:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000875c:	31 d1                	xor    ecx,edx
1000875e:	89 cd                	mov    ebp,ecx
10008760:	c1 ed 06             	shr    ebp,0x6
10008763:	89 ce                	mov    esi,ecx
10008765:	c1 ee 0e             	shr    esi,0xe
10008768:	89 ca                	mov    edx,ecx
1000876a:	c1 ea 16             	shr    edx,0x16
1000876d:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10008774:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000877a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008780:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008786:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000878c:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008790:	03 94 34 58 04 00 00 	add    edx,DWORD PTR [esp+esi*1+0x458]
10008797:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
1000879e:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
100087a5:	89 d6                	mov    esi,edx
100087a7:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
100087ae:	31 c6                	xor    esi,eax
100087b0:	89 f2                	mov    edx,esi
100087b2:	c1 ea 06             	shr    edx,0x6
100087b5:	89 f5                	mov    ebp,esi
100087b7:	c1 ed 0e             	shr    ebp,0xe
100087ba:	89 f0                	mov    eax,esi
100087bc:	c1 e8 16             	shr    eax,0x16
100087bf:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100087c6:	81 e7 fc 03 00 00    	and    edi,0x3fc
100087cc:	81 e2 fc 03 00 00    	and    edx,0x3fc
100087d2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100087d8:	25 fc 03 00 00       	and    eax,0x3fc
100087dd:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100087e1:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100087e8:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
100087ef:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
100087f6:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100087fd:	31 c8                	xor    eax,ecx
100087ff:	89 c7                	mov    edi,eax
10008801:	c1 ef 06             	shr    edi,0x6
10008804:	89 c5                	mov    ebp,eax
10008806:	c1 ed 0e             	shr    ebp,0xe
10008809:	89 c2                	mov    edx,eax
1000880b:	c1 ea 16             	shr    edx,0x16
1000880e:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10008815:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000881b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008821:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008827:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000882d:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008831:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008838:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000883f:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
10008846:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000884d:	31 f2                	xor    edx,esi
1000884f:	89 d7                	mov    edi,edx
10008851:	c1 ef 06             	shr    edi,0x6
10008854:	89 d5                	mov    ebp,edx
10008856:	c1 ed 0e             	shr    ebp,0xe
10008859:	89 d1                	mov    ecx,edx
1000885b:	c1 e9 16             	shr    ecx,0x16
1000885e:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008865:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000886b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008871:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008877:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000887d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008881:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008888:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000888f:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10008896:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000889d:	31 c8                	xor    eax,ecx
1000889f:	89 c7                	mov    edi,eax
100088a1:	c1 ef 06             	shr    edi,0x6
100088a4:	89 c5                	mov    ebp,eax
100088a6:	c1 ed 0e             	shr    ebp,0xe
100088a9:	89 c1                	mov    ecx,eax
100088ab:	c1 e9 16             	shr    ecx,0x16
100088ae:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100088b5:	81 e6 fc 03 00 00    	and    esi,0x3fc
100088bb:	81 e7 fc 03 00 00    	and    edi,0x3fc
100088c1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100088c7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100088cd:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100088d1:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100088d8:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100088df:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
100088e6:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100088ed:	31 ca                	xor    edx,ecx
100088ef:	89 d7                	mov    edi,edx
100088f1:	c1 ef 06             	shr    edi,0x6
100088f4:	89 d5                	mov    ebp,edx
100088f6:	c1 ed 0e             	shr    ebp,0xe
100088f9:	89 d1                	mov    ecx,edx
100088fb:	c1 e9 16             	shr    ecx,0x16
100088fe:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008905:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000890b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008911:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008917:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000891d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008921:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008928:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000892f:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10008936:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000893d:	31 c8                	xor    eax,ecx
1000893f:	89 c7                	mov    edi,eax
10008941:	c1 ef 06             	shr    edi,0x6
10008944:	89 c5                	mov    ebp,eax
10008946:	c1 ed 0e             	shr    ebp,0xe
10008949:	89 c1                	mov    ecx,eax
1000894b:	c1 e9 16             	shr    ecx,0x16
1000894e:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008955:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000895b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008961:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008967:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000896d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008971:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008978:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000897f:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10008986:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000898d:	31 ca                	xor    edx,ecx
1000898f:	89 d7                	mov    edi,edx
10008991:	c1 ef 06             	shr    edi,0x6
10008994:	89 d5                	mov    ebp,edx
10008996:	c1 ed 0e             	shr    ebp,0xe
10008999:	89 d1                	mov    ecx,edx
1000899b:	c1 e9 16             	shr    ecx,0x16
1000899e:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100089a5:	81 e6 fc 03 00 00    	and    esi,0x3fc
100089ab:	81 e7 fc 03 00 00    	and    edi,0x3fc
100089b1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100089b7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100089bd:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100089c1:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100089c8:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100089cf:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
100089d6:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100089dd:	31 c8                	xor    eax,ecx
100089df:	89 c7                	mov    edi,eax
100089e1:	c1 ef 06             	shr    edi,0x6
100089e4:	89 c5                	mov    ebp,eax
100089e6:	c1 ed 0e             	shr    ebp,0xe
100089e9:	89 c1                	mov    ecx,eax
100089eb:	c1 e9 16             	shr    ecx,0x16
100089ee:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100089f5:	81 e6 fc 03 00 00    	and    esi,0x3fc
100089fb:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a01:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a07:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008a0d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008a11:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008a18:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008a1f:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10008a26:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008a2d:	31 ca                	xor    edx,ecx
10008a2f:	89 d7                	mov    edi,edx
10008a31:	c1 ef 06             	shr    edi,0x6
10008a34:	89 d5                	mov    ebp,edx
10008a36:	c1 ed 0e             	shr    ebp,0xe
10008a39:	89 d1                	mov    ecx,edx
10008a3b:	c1 e9 16             	shr    ecx,0x16
10008a3e:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008a45:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008a4b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a51:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a57:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008a5d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008a61:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008a68:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008a6f:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10008a76:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008a7d:	31 c8                	xor    eax,ecx
10008a7f:	89 c7                	mov    edi,eax
10008a81:	c1 ef 06             	shr    edi,0x6
10008a84:	89 c5                	mov    ebp,eax
10008a86:	c1 ed 0e             	shr    ebp,0xe
10008a89:	89 c1                	mov    ecx,eax
10008a8b:	c1 e9 16             	shr    ecx,0x16
10008a8e:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008a95:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008a9b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008aa1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008aa7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008aad:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008ab1:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008ab8:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008abf:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10008ac6:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008acd:	31 ca                	xor    edx,ecx
10008acf:	89 d7                	mov    edi,edx
10008ad1:	c1 ef 06             	shr    edi,0x6
10008ad4:	89 d5                	mov    ebp,edx
10008ad6:	c1 ed 0e             	shr    ebp,0xe
10008ad9:	89 d6                	mov    esi,edx
10008adb:	c1 ee 16             	shr    esi,0x16
10008ade:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10008ae5:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008aeb:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008af1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008af7:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008afd:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008b01:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10008b08:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10008b0f:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10008b16:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10008b1d:	31 f0                	xor    eax,esi
10008b1f:	89 c5                	mov    ebp,eax
10008b21:	c1 ed 06             	shr    ebp,0x6
10008b24:	89 c1                	mov    ecx,eax
10008b26:	c1 e9 0e             	shr    ecx,0xe
10008b29:	89 c6                	mov    esi,eax
10008b2b:	c1 ee 16             	shr    esi,0x16
10008b2e:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008b35:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b3b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b41:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008b47:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008b4d:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008b51:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
10008b58:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10008b5f:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10008b66:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10008b6d:	89 f1                	mov    ecx,esi
10008b6f:	31 d1                	xor    ecx,edx
10008b71:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10008b78:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10008b7b:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
10008b7e:	8d b4 24 a0 10 00 00 	lea    esi,[esp+0x10a0]
10008b85:	39 f3                	cmp    ebx,esi
10008b87:	0f 85 d7 fa ff ff    	jne    10008664 <_crypt_blowfish_rn+0x11fe>
10008b8d:	8d 5c 24 58          	lea    ebx,[esp+0x58]
10008b91:	83 c3 08             	add    ebx,0x8
10008b94:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10008b9b:	89 c7                	mov    edi,eax
10008b9d:	c1 ef 06             	shr    edi,0x6
10008ba0:	89 c5                	mov    ebp,eax
10008ba2:	c1 ed 0e             	shr    ebp,0xe
10008ba5:	89 c2                	mov    edx,eax
10008ba7:	c1 ea 16             	shr    edx,0x16
10008baa:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008bb1:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008bb7:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008bbd:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008bc3:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008bc9:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008bcd:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008bd4:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008bdb:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008be2:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10008be9:	31 ca                	xor    edx,ecx
10008beb:	89 d7                	mov    edi,edx
10008bed:	c1 ef 06             	shr    edi,0x6
10008bf0:	89 d5                	mov    ebp,edx
10008bf2:	c1 ed 0e             	shr    ebp,0xe
10008bf5:	89 d1                	mov    ecx,edx
10008bf7:	c1 e9 16             	shr    ecx,0x16
10008bfa:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008c01:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008c07:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c0d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c13:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008c19:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008c1d:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008c24:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008c2b:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10008c32:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008c39:	31 c1                	xor    ecx,eax
10008c3b:	89 cd                	mov    ebp,ecx
10008c3d:	c1 ed 06             	shr    ebp,0x6
10008c40:	89 c8                	mov    eax,ecx
10008c42:	c1 e8 0e             	shr    eax,0xe
10008c45:	89 ce                	mov    esi,ecx
10008c47:	c1 ee 16             	shr    esi,0x16
10008c4a:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10008c51:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c57:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c5d:	25 fc 03 00 00       	and    eax,0x3fc
10008c62:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008c68:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008c6c:	03 b4 04 58 04 00 00 	add    esi,DWORD PTR [esp+eax*1+0x458]
10008c73:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10008c7a:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10008c81:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10008c88:	31 d6                	xor    esi,edx
10008c8a:	89 f5                	mov    ebp,esi
10008c8c:	c1 ed 06             	shr    ebp,0x6
10008c8f:	89 f2                	mov    edx,esi
10008c91:	c1 ea 0e             	shr    edx,0xe
10008c94:	89 f0                	mov    eax,esi
10008c96:	c1 e8 16             	shr    eax,0x16
10008c99:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008ca0:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008ca6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008cac:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008cb2:	25 fc 03 00 00       	and    eax,0x3fc
10008cb7:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008cbb:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10008cc2:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10008cc9:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
10008cd0:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008cd7:	31 c1                	xor    ecx,eax
10008cd9:	89 ca                	mov    edx,ecx
10008cdb:	c1 ea 06             	shr    edx,0x6
10008cde:	89 cd                	mov    ebp,ecx
10008ce0:	c1 ed 0e             	shr    ebp,0xe
10008ce3:	89 c8                	mov    eax,ecx
10008ce5:	c1 e8 16             	shr    eax,0x16
10008ce8:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10008cef:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008cf5:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008cfb:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d01:	25 fc 03 00 00       	and    eax,0x3fc
10008d06:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008d0a:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008d11:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10008d18:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
10008d1f:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008d26:	31 f0                	xor    eax,esi
10008d28:	89 c7                	mov    edi,eax
10008d2a:	c1 ef 06             	shr    edi,0x6
10008d2d:	89 c5                	mov    ebp,eax
10008d2f:	c1 ed 0e             	shr    ebp,0xe
10008d32:	89 c2                	mov    edx,eax
10008d34:	c1 ea 16             	shr    edx,0x16
10008d37:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008d3e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008d44:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d4a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d50:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008d56:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008d5a:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008d61:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008d68:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
10008d6f:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008d76:	31 ca                	xor    edx,ecx
10008d78:	89 d7                	mov    edi,edx
10008d7a:	c1 ef 06             	shr    edi,0x6
10008d7d:	89 d5                	mov    ebp,edx
10008d7f:	c1 ed 0e             	shr    ebp,0xe
10008d82:	89 d1                	mov    ecx,edx
10008d84:	c1 e9 16             	shr    ecx,0x16
10008d87:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008d8e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008d94:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d9a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008da0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008da6:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008daa:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008db1:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008db8:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10008dbf:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008dc6:	31 c8                	xor    eax,ecx
10008dc8:	89 c7                	mov    edi,eax
10008dca:	c1 ef 06             	shr    edi,0x6
10008dcd:	89 c5                	mov    ebp,eax
10008dcf:	c1 ed 0e             	shr    ebp,0xe
10008dd2:	89 c1                	mov    ecx,eax
10008dd4:	c1 e9 16             	shr    ecx,0x16
10008dd7:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008dde:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008de4:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008dea:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008df0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008df6:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008dfa:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008e01:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008e08:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10008e0f:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008e16:	31 ca                	xor    edx,ecx
10008e18:	89 d7                	mov    edi,edx
10008e1a:	c1 ef 06             	shr    edi,0x6
10008e1d:	89 d5                	mov    ebp,edx
10008e1f:	c1 ed 0e             	shr    ebp,0xe
10008e22:	89 d1                	mov    ecx,edx
10008e24:	c1 e9 16             	shr    ecx,0x16
10008e27:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008e2e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008e34:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e3a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e40:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008e46:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008e4a:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008e51:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008e58:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10008e5f:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008e66:	31 c8                	xor    eax,ecx
10008e68:	89 c7                	mov    edi,eax
10008e6a:	c1 ef 06             	shr    edi,0x6
10008e6d:	89 c5                	mov    ebp,eax
10008e6f:	c1 ed 0e             	shr    ebp,0xe
10008e72:	89 c1                	mov    ecx,eax
10008e74:	c1 e9 16             	shr    ecx,0x16
10008e77:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008e7e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008e84:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e8a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e90:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008e96:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008e9a:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008ea1:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008ea8:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10008eaf:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008eb6:	31 ca                	xor    edx,ecx
10008eb8:	89 d7                	mov    edi,edx
10008eba:	c1 ef 06             	shr    edi,0x6
10008ebd:	89 d5                	mov    ebp,edx
10008ebf:	c1 ed 0e             	shr    ebp,0xe
10008ec2:	89 d1                	mov    ecx,edx
10008ec4:	c1 e9 16             	shr    ecx,0x16
10008ec7:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008ece:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008ed4:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008eda:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ee0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008ee6:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008eea:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008ef1:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008ef8:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10008eff:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008f06:	31 c8                	xor    eax,ecx
10008f08:	89 c7                	mov    edi,eax
10008f0a:	c1 ef 06             	shr    edi,0x6
10008f0d:	89 c5                	mov    ebp,eax
10008f0f:	c1 ed 0e             	shr    ebp,0xe
10008f12:	89 c1                	mov    ecx,eax
10008f14:	c1 e9 16             	shr    ecx,0x16
10008f17:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008f1e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008f24:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f2a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f30:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008f36:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008f3a:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008f41:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008f48:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10008f4f:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008f56:	31 ca                	xor    edx,ecx
10008f58:	89 d7                	mov    edi,edx
10008f5a:	c1 ef 06             	shr    edi,0x6
10008f5d:	89 d5                	mov    ebp,edx
10008f5f:	c1 ed 0e             	shr    ebp,0xe
10008f62:	89 d1                	mov    ecx,edx
10008f64:	c1 e9 16             	shr    ecx,0x16
10008f67:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008f6e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008f74:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f7a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f80:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008f86:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008f8a:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008f91:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008f98:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10008f9f:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008fa6:	31 c8                	xor    eax,ecx
10008fa8:	89 c7                	mov    edi,eax
10008faa:	c1 ef 06             	shr    edi,0x6
10008fad:	89 c5                	mov    ebp,eax
10008faf:	c1 ed 0e             	shr    ebp,0xe
10008fb2:	89 c1                	mov    ecx,eax
10008fb4:	c1 e9 16             	shr    ecx,0x16
10008fb7:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008fbe:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008fc4:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008fca:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008fd0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008fd6:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008fda:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008fe1:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008fe8:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10008fef:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008ff6:	31 ca                	xor    edx,ecx
10008ff8:	89 d7                	mov    edi,edx
10008ffa:	c1 ef 06             	shr    edi,0x6
10008ffd:	89 d5                	mov    ebp,edx
10008fff:	c1 ed 0e             	shr    ebp,0xe
10009002:	89 d6                	mov    esi,edx
10009004:	c1 ee 16             	shr    esi,0x16
10009007:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000900e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009014:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000901a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009020:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009026:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000902a:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10009031:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10009038:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
1000903f:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10009046:	31 f0                	xor    eax,esi
10009048:	89 c5                	mov    ebp,eax
1000904a:	c1 ed 06             	shr    ebp,0x6
1000904d:	89 c1                	mov    ecx,eax
1000904f:	c1 e9 0e             	shr    ecx,0xe
10009052:	89 c6                	mov    esi,eax
10009054:	c1 ee 16             	shr    esi,0x16
10009057:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000905e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009064:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000906a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009070:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009076:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000907a:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
10009081:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10009088:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
1000908f:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10009096:	89 f1                	mov    ecx,esi
10009098:	31 d1                	xor    ecx,edx
1000909a:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
100090a1:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
100090a4:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
100090a7:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
100090ae:	39 d3                	cmp    ebx,edx
100090b0:	0f 85 db fa ff ff    	jne    10008b91 <_crypt_blowfish_rn+0x172b>
100090b6:	8b 94 24 e8 10 00 00 	mov    edx,DWORD PTR [esp+0x10e8]
100090bd:	8b 84 24 ec 10 00 00 	mov    eax,DWORD PTR [esp+0x10ec]
100090c4:	8b 9c 24 f0 10 00 00 	mov    ebx,DWORD PTR [esp+0x10f0]
100090cb:	8b 8c 24 f4 10 00 00 	mov    ecx,DWORD PTR [esp+0x10f4]
100090d2:	31 94 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],edx
100090d9:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
100090e0:	31 9c 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],ebx
100090e7:	31 8c 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],ecx
100090ee:	31 94 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],edx
100090f5:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
100090fc:	31 9c 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],ebx
10009103:	31 8c 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],ecx
1000910a:	31 94 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],edx
10009111:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
10009118:	31 9c 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],ebx
1000911f:	31 8c 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],ecx
10009126:	31 94 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],edx
1000912d:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
10009134:	31 9c 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],ebx
1000913b:	31 8c 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],ecx
10009142:	31 94 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],edx
10009149:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
10009150:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
10009157:	be 00 00 00 00       	mov    esi,0x0
1000915c:	b8 00 00 00 00       	mov    eax,0x0
10009161:	83 c3 08             	add    ebx,0x8
10009164:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
1000916b:	89 c7                	mov    edi,eax
1000916d:	c1 ef 06             	shr    edi,0x6
10009170:	89 c5                	mov    ebp,eax
10009172:	c1 ed 0e             	shr    ebp,0xe
10009175:	89 c2                	mov    edx,eax
10009177:	c1 ea 16             	shr    edx,0x16
1000917a:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009181:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009187:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000918d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009193:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009199:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000919d:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100091a4:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100091ab:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100091b2:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
100091b9:	31 d6                	xor    esi,edx
100091bb:	89 f7                	mov    edi,esi
100091bd:	c1 ef 06             	shr    edi,0x6
100091c0:	89 f5                	mov    ebp,esi
100091c2:	c1 ed 0e             	shr    ebp,0xe
100091c5:	89 f1                	mov    ecx,esi
100091c7:	c1 e9 16             	shr    ecx,0x16
100091ca:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
100091d1:	81 e2 fc 03 00 00    	and    edx,0x3fc
100091d7:	81 e7 fc 03 00 00    	and    edi,0x3fc
100091dd:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100091e3:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100091e9:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100091ed:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100091f4:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100091fb:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10009202:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009209:	31 c8                	xor    eax,ecx
1000920b:	89 c5                	mov    ebp,eax
1000920d:	c1 ed 06             	shr    ebp,0x6
10009210:	89 c2                	mov    edx,eax
10009212:	c1 ea 0e             	shr    edx,0xe
10009215:	89 c1                	mov    ecx,eax
10009217:	c1 e9 16             	shr    ecx,0x16
1000921a:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10009221:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009227:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000922d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009233:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009239:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000923d:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
10009244:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
1000924b:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
10009252:	89 ca                	mov    edx,ecx
10009254:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
1000925b:	31 d6                	xor    esi,edx
1000925d:	89 f7                	mov    edi,esi
1000925f:	c1 ef 06             	shr    edi,0x6
10009262:	89 f5                	mov    ebp,esi
10009264:	c1 ed 0e             	shr    ebp,0xe
10009267:	89 f1                	mov    ecx,esi
10009269:	c1 e9 16             	shr    ecx,0x16
1000926c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009273:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009279:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000927f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009285:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000928b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000928f:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009296:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000929d:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
100092a4:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
100092ab:	31 c1                	xor    ecx,eax
100092ad:	89 cd                	mov    ebp,ecx
100092af:	c1 ed 06             	shr    ebp,0x6
100092b2:	89 ca                	mov    edx,ecx
100092b4:	c1 ea 0e             	shr    edx,0xe
100092b7:	89 c8                	mov    eax,ecx
100092b9:	c1 e8 16             	shr    eax,0x16
100092bc:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100092c3:	81 e7 fc 03 00 00    	and    edi,0x3fc
100092c9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100092cf:	81 e2 fc 03 00 00    	and    edx,0x3fc
100092d5:	25 fc 03 00 00       	and    eax,0x3fc
100092da:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100092de:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
100092e5:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
100092ec:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
100092f3:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100092fa:	89 c2                	mov    edx,eax
100092fc:	31 f2                	xor    edx,esi
100092fe:	89 d5                	mov    ebp,edx
10009300:	c1 ed 06             	shr    ebp,0x6
10009303:	89 d6                	mov    esi,edx
10009305:	c1 ee 0e             	shr    esi,0xe
10009308:	89 d0                	mov    eax,edx
1000930a:	c1 e8 16             	shr    eax,0x16
1000930d:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
10009314:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000931a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009320:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009326:	25 fc 03 00 00       	and    eax,0x3fc
1000932b:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000932f:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
10009336:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
1000933d:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
10009344:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000934b:	89 c6                	mov    esi,eax
1000934d:	31 ce                	xor    esi,ecx
1000934f:	89 f7                	mov    edi,esi
10009351:	c1 ef 06             	shr    edi,0x6
10009354:	89 f5                	mov    ebp,esi
10009356:	c1 ed 0e             	shr    ebp,0xe
10009359:	89 f0                	mov    eax,esi
1000935b:	c1 e8 16             	shr    eax,0x16
1000935e:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10009365:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000936b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009371:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009377:	25 fc 03 00 00       	and    eax,0x3fc
1000937c:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009380:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009387:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000938e:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10009395:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
1000939c:	31 c2                	xor    edx,eax
1000939e:	89 d7                	mov    edi,edx
100093a0:	c1 ef 06             	shr    edi,0x6
100093a3:	89 d5                	mov    ebp,edx
100093a5:	c1 ed 0e             	shr    ebp,0xe
100093a8:	89 d0                	mov    eax,edx
100093aa:	c1 e8 16             	shr    eax,0x16
100093ad:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
100093b4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100093ba:	81 e7 fc 03 00 00    	and    edi,0x3fc
100093c0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100093c6:	25 fc 03 00 00       	and    eax,0x3fc
100093cb:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100093cf:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100093d6:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100093dd:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
100093e4:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
100093eb:	31 c6                	xor    esi,eax
100093ed:	89 f7                	mov    edi,esi
100093ef:	c1 ef 06             	shr    edi,0x6
100093f2:	89 f5                	mov    ebp,esi
100093f4:	c1 ed 0e             	shr    ebp,0xe
100093f7:	89 f0                	mov    eax,esi
100093f9:	c1 e8 16             	shr    eax,0x16
100093fc:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10009403:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009409:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000940f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009415:	25 fc 03 00 00       	and    eax,0x3fc
1000941a:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000941e:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009425:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000942c:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10009433:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
1000943a:	31 c2                	xor    edx,eax
1000943c:	89 d7                	mov    edi,edx
1000943e:	c1 ef 06             	shr    edi,0x6
10009441:	89 d5                	mov    ebp,edx
10009443:	c1 ed 0e             	shr    ebp,0xe
10009446:	89 d0                	mov    eax,edx
10009448:	c1 e8 16             	shr    eax,0x16
1000944b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10009452:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009458:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000945e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009464:	25 fc 03 00 00       	and    eax,0x3fc
10009469:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000946d:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009474:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000947b:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
10009482:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10009489:	31 c6                	xor    esi,eax
1000948b:	89 f7                	mov    edi,esi
1000948d:	c1 ef 06             	shr    edi,0x6
10009490:	89 f5                	mov    ebp,esi
10009492:	c1 ed 0e             	shr    ebp,0xe
10009495:	89 f0                	mov    eax,esi
10009497:	c1 e8 16             	shr    eax,0x16
1000949a:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
100094a1:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100094a7:	81 e7 fc 03 00 00    	and    edi,0x3fc
100094ad:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100094b3:	25 fc 03 00 00       	and    eax,0x3fc
100094b8:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100094bc:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100094c3:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100094ca:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
100094d1:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
100094d8:	31 d0                	xor    eax,edx
100094da:	89 c7                	mov    edi,eax
100094dc:	c1 ef 06             	shr    edi,0x6
100094df:	89 c5                	mov    ebp,eax
100094e1:	c1 ed 0e             	shr    ebp,0xe
100094e4:	89 c2                	mov    edx,eax
100094e6:	c1 ea 16             	shr    edx,0x16
100094e9:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
100094f0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100094f6:	81 e7 fc 03 00 00    	and    edi,0x3fc
100094fc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009502:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009508:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000950c:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009513:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000951a:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
10009521:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009528:	31 d6                	xor    esi,edx
1000952a:	89 f7                	mov    edi,esi
1000952c:	c1 ef 06             	shr    edi,0x6
1000952f:	89 f5                	mov    ebp,esi
10009531:	c1 ed 0e             	shr    ebp,0xe
10009534:	89 f2                	mov    edx,esi
10009536:	c1 ea 16             	shr    edx,0x16
10009539:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10009540:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009546:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000954c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009552:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009558:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000955c:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009563:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000956a:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10009571:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009578:	31 d0                	xor    eax,edx
1000957a:	89 c7                	mov    edi,eax
1000957c:	c1 ef 06             	shr    edi,0x6
1000957f:	89 c5                	mov    ebp,eax
10009581:	c1 ed 0e             	shr    ebp,0xe
10009584:	89 c2                	mov    edx,eax
10009586:	c1 ea 16             	shr    edx,0x16
10009589:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009590:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009596:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000959c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100095a2:	81 e2 fc 03 00 00    	and    edx,0x3fc
100095a8:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100095ac:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100095b3:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100095ba:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
100095c1:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100095c8:	31 d6                	xor    esi,edx
100095ca:	89 f2                	mov    edx,esi
100095cc:	c1 ea 06             	shr    edx,0x6
100095cf:	89 f5                	mov    ebp,esi
100095d1:	c1 ed 0e             	shr    ebp,0xe
100095d4:	89 f1                	mov    ecx,esi
100095d6:	c1 e9 16             	shr    ecx,0x16
100095d9:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100095e0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100095e6:	81 e2 fc 03 00 00    	and    edx,0x3fc
100095ec:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100095f2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100095f8:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100095fc:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009603:	33 8c 14 58 08 00 00 	xor    ecx,DWORD PTR [esp+edx*1+0x858]
1000960a:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10009611:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
10009618:	31 c8                	xor    eax,ecx
1000961a:	89 c5                	mov    ebp,eax
1000961c:	c1 ed 06             	shr    ebp,0x6
1000961f:	89 c2                	mov    edx,eax
10009621:	c1 ea 0e             	shr    edx,0xe
10009624:	89 c1                	mov    ecx,eax
10009626:	c1 e9 16             	shr    ecx,0x16
10009629:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10009630:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009636:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000963c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009642:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009648:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000964c:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
10009653:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
1000965a:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
10009661:	89 ca                	mov    edx,ecx
10009663:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
1000966a:	31 d6                	xor    esi,edx
1000966c:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10009673:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10009676:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
10009679:	8d bc 24 a0 10 00 00 	lea    edi,[esp+0x10a0]
10009680:	39 fb                	cmp    ebx,edi
10009682:	0f 85 d9 fa ff ff    	jne    10009161 <_crypt_blowfish_rn+0x1cfb>
10009688:	8d 5c 24 58          	lea    ebx,[esp+0x58]
1000968c:	83 c3 08             	add    ebx,0x8
1000968f:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10009696:	89 c7                	mov    edi,eax
10009698:	c1 ef 06             	shr    edi,0x6
1000969b:	89 c5                	mov    ebp,eax
1000969d:	c1 ed 0e             	shr    ebp,0xe
100096a0:	89 c2                	mov    edx,eax
100096a2:	c1 ea 16             	shr    edx,0x16
100096a5:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
100096ac:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100096b2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100096b8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100096be:	81 e2 fc 03 00 00    	and    edx,0x3fc
100096c4:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100096c8:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100096cf:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100096d6:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100096dd:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
100096e4:	31 f2                	xor    edx,esi
100096e6:	89 d7                	mov    edi,edx
100096e8:	c1 ef 06             	shr    edi,0x6
100096eb:	89 d5                	mov    ebp,edx
100096ed:	c1 ed 0e             	shr    ebp,0xe
100096f0:	89 d6                	mov    esi,edx
100096f2:	c1 ee 16             	shr    esi,0x16
100096f5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
100096fc:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009702:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009708:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000970e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009714:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10009718:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
1000971f:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10009726:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
1000972d:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10009734:	31 c6                	xor    esi,eax
10009736:	89 f7                	mov    edi,esi
10009738:	c1 ef 06             	shr    edi,0x6
1000973b:	89 f5                	mov    ebp,esi
1000973d:	c1 ed 0e             	shr    ebp,0xe
10009740:	89 f1                	mov    ecx,esi
10009742:	c1 e9 16             	shr    ecx,0x16
10009745:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
1000974c:	25 fc 03 00 00       	and    eax,0x3fc
10009751:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009757:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000975d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009763:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009767:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000976e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009775:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
1000977c:	03 8c 04 58 0c 00 00 	add    ecx,DWORD PTR [esp+eax*1+0xc58]
10009783:	31 d1                	xor    ecx,edx
10009785:	89 c8                	mov    eax,ecx
10009787:	c1 e8 06             	shr    eax,0x6
1000978a:	89 cd                	mov    ebp,ecx
1000978c:	c1 ed 0e             	shr    ebp,0xe
1000978f:	89 ca                	mov    edx,ecx
10009791:	c1 ea 16             	shr    edx,0x16
10009794:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000979b:	81 e7 fc 03 00 00    	and    edi,0x3fc
100097a1:	25 fc 03 00 00       	and    eax,0x3fc
100097a6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100097ac:	81 e2 fc 03 00 00    	and    edx,0x3fc
100097b2:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100097b6:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100097bd:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
100097c4:	33 b4 24 68 10 00 00 	xor    esi,DWORD PTR [esp+0x1068]
100097cb:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
100097d2:	31 d6                	xor    esi,edx
100097d4:	89 f2                	mov    edx,esi
100097d6:	c1 ea 06             	shr    edx,0x6
100097d9:	89 f5                	mov    ebp,esi
100097db:	c1 ed 0e             	shr    ebp,0xe
100097de:	89 f0                	mov    eax,esi
100097e0:	c1 e8 16             	shr    eax,0x16
100097e3:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100097ea:	81 e7 fc 03 00 00    	and    edi,0x3fc
100097f0:	81 e2 fc 03 00 00    	and    edx,0x3fc
100097f6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100097fc:	25 fc 03 00 00       	and    eax,0x3fc
10009801:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009805:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000980c:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10009813:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
1000981a:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009821:	31 c1                	xor    ecx,eax
10009823:	89 c8                	mov    eax,ecx
10009825:	c1 e8 06             	shr    eax,0x6
10009828:	89 cd                	mov    ebp,ecx
1000982a:	c1 ed 0e             	shr    ebp,0xe
1000982d:	89 ca                	mov    edx,ecx
1000982f:	c1 ea 16             	shr    edx,0x16
10009832:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009839:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000983f:	25 fc 03 00 00       	and    eax,0x3fc
10009844:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000984a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009850:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009854:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000985b:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
10009862:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
10009869:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10009870:	31 d6                	xor    esi,edx
10009872:	89 f2                	mov    edx,esi
10009874:	c1 ea 06             	shr    edx,0x6
10009877:	89 f5                	mov    ebp,esi
10009879:	c1 ed 0e             	shr    ebp,0xe
1000987c:	89 f0                	mov    eax,esi
1000987e:	c1 e8 16             	shr    eax,0x16
10009881:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009888:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000988e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009894:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000989a:	25 fc 03 00 00       	and    eax,0x3fc
1000989f:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100098a3:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100098aa:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
100098b1:	33 8c 24 74 10 00 00 	xor    ecx,DWORD PTR [esp+0x1074]
100098b8:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100098bf:	31 c1                	xor    ecx,eax
100098c1:	89 cf                	mov    edi,ecx
100098c3:	c1 ef 06             	shr    edi,0x6
100098c6:	89 cd                	mov    ebp,ecx
100098c8:	c1 ed 0e             	shr    ebp,0xe
100098cb:	89 ca                	mov    edx,ecx
100098cd:	c1 ea 16             	shr    edx,0x16
100098d0:	8d 04 8d 00 00 00 00 	lea    eax,[ecx*4+0x0]
100098d7:	25 fc 03 00 00       	and    eax,0x3fc
100098dc:	81 e7 fc 03 00 00    	and    edi,0x3fc
100098e2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100098e8:	81 e2 fc 03 00 00    	and    edx,0x3fc
100098ee:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100098f2:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100098f9:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009900:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
10009907:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
1000990e:	31 d6                	xor    esi,edx
10009910:	89 f2                	mov    edx,esi
10009912:	c1 ea 06             	shr    edx,0x6
10009915:	89 f5                	mov    ebp,esi
10009917:	c1 ed 0e             	shr    ebp,0xe
1000991a:	89 f0                	mov    eax,esi
1000991c:	c1 e8 16             	shr    eax,0x16
1000991f:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009926:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000992c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009932:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009938:	25 fc 03 00 00       	and    eax,0x3fc
1000993d:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009941:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009948:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000994f:	33 8c 24 7c 10 00 00 	xor    ecx,DWORD PTR [esp+0x107c]
10009956:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000995d:	31 c8                	xor    eax,ecx
1000995f:	89 c7                	mov    edi,eax
10009961:	c1 ef 06             	shr    edi,0x6
10009964:	89 c5                	mov    ebp,eax
10009966:	c1 ed 0e             	shr    ebp,0xe
10009969:	89 c2                	mov    edx,eax
1000996b:	c1 ea 16             	shr    edx,0x16
1000996e:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009975:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000997b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009981:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009987:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000998d:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009991:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009998:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000999f:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
100099a6:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100099ad:	31 d6                	xor    esi,edx
100099af:	89 f7                	mov    edi,esi
100099b1:	c1 ef 06             	shr    edi,0x6
100099b4:	89 f5                	mov    ebp,esi
100099b6:	c1 ed 0e             	shr    ebp,0xe
100099b9:	89 f1                	mov    ecx,esi
100099bb:	c1 e9 16             	shr    ecx,0x16
100099be:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
100099c5:	81 e2 fc 03 00 00    	and    edx,0x3fc
100099cb:	81 e7 fc 03 00 00    	and    edi,0x3fc
100099d1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100099d7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100099dd:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100099e1:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100099e8:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100099ef:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
100099f6:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
100099fd:	31 c8                	xor    eax,ecx
100099ff:	89 c7                	mov    edi,eax
10009a01:	c1 ef 06             	shr    edi,0x6
10009a04:	89 c5                	mov    ebp,eax
10009a06:	c1 ed 0e             	shr    ebp,0xe
10009a09:	89 c2                	mov    edx,eax
10009a0b:	c1 ea 16             	shr    edx,0x16
10009a0e:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009a15:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009a1b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009a21:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009a27:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009a2d:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009a31:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009a38:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009a3f:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
10009a46:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009a4d:	31 d6                	xor    esi,edx
10009a4f:	89 f7                	mov    edi,esi
10009a51:	c1 ef 06             	shr    edi,0x6
10009a54:	89 f5                	mov    ebp,esi
10009a56:	c1 ed 0e             	shr    ebp,0xe
10009a59:	89 f1                	mov    ecx,esi
10009a5b:	c1 e9 16             	shr    ecx,0x16
10009a5e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009a65:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009a6b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009a71:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009a77:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009a7d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009a81:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009a88:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009a8f:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10009a96:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009a9d:	31 c8                	xor    eax,ecx
10009a9f:	89 c7                	mov    edi,eax
10009aa1:	c1 ef 06             	shr    edi,0x6
10009aa4:	89 c5                	mov    ebp,eax
10009aa6:	c1 ed 0e             	shr    ebp,0xe
10009aa9:	89 c2                	mov    edx,eax
10009aab:	c1 ea 16             	shr    edx,0x16
10009aae:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009ab5:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009abb:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009ac1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ac7:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009acd:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009ad1:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009ad8:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009adf:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
10009ae6:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009aed:	31 d6                	xor    esi,edx
10009aef:	89 f7                	mov    edi,esi
10009af1:	c1 ef 06             	shr    edi,0x6
10009af4:	89 f5                	mov    ebp,esi
10009af6:	c1 ed 0e             	shr    ebp,0xe
10009af9:	89 f1                	mov    ecx,esi
10009afb:	c1 e9 16             	shr    ecx,0x16
10009afe:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009b05:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009b0b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009b11:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009b17:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009b1d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009b21:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009b28:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009b2f:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10009b36:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009b3d:	31 c8                	xor    eax,ecx
10009b3f:	89 c7                	mov    edi,eax
10009b41:	c1 ef 06             	shr    edi,0x6
10009b44:	89 c5                	mov    ebp,eax
10009b46:	c1 ed 0e             	shr    ebp,0xe
10009b49:	89 c2                	mov    edx,eax
10009b4b:	c1 ea 16             	shr    edx,0x16
10009b4e:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009b55:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009b5b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009b61:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009b67:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009b6d:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009b71:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009b78:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009b7f:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
10009b86:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009b8d:	31 d6                	xor    esi,edx
10009b8f:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10009b96:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10009b99:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
10009b9c:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10009ba3:	39 d3                	cmp    ebx,edx
10009ba5:	0f 85 e1 fa ff ff    	jne    1000968c <_crypt_blowfish_rn+0x2226>
10009bab:	ff 4c 24 04          	dec    DWORD PTR [esp+0x4]
10009baf:	0f 85 a2 e9 ff ff    	jne    10008557 <_crypt_blowfish_rn+0x10f1>
10009bb5:	8b 84 24 58 10 00 00 	mov    eax,DWORD PTR [esp+0x1058]
10009bbc:	89 04 24             	mov    DWORD PTR [esp],eax
10009bbf:	8b 84 24 5c 10 00 00 	mov    eax,DWORD PTR [esp+0x105c]
10009bc6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10009bca:	8b 84 24 60 10 00 00 	mov    eax,DWORD PTR [esp+0x1060]
10009bd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10009bd5:	8b 84 24 64 10 00 00 	mov    eax,DWORD PTR [esp+0x1064]
10009bdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10009be0:	8b 84 24 68 10 00 00 	mov    eax,DWORD PTR [esp+0x1068]
10009be7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10009beb:	8b 84 24 6c 10 00 00 	mov    eax,DWORD PTR [esp+0x106c]
10009bf2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10009bf6:	8b 84 24 70 10 00 00 	mov    eax,DWORD PTR [esp+0x1070]
10009bfd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10009c01:	8b 84 24 74 10 00 00 	mov    eax,DWORD PTR [esp+0x1074]
10009c08:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10009c0c:	8b 84 24 78 10 00 00 	mov    eax,DWORD PTR [esp+0x1078]
10009c13:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10009c17:	8b 84 24 7c 10 00 00 	mov    eax,DWORD PTR [esp+0x107c]
10009c1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10009c22:	8b 84 24 80 10 00 00 	mov    eax,DWORD PTR [esp+0x1080]
10009c29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10009c2d:	8b 84 24 84 10 00 00 	mov    eax,DWORD PTR [esp+0x1084]
10009c34:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10009c38:	8b 84 24 88 10 00 00 	mov    eax,DWORD PTR [esp+0x1088]
10009c3f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10009c43:	8b 84 24 8c 10 00 00 	mov    eax,DWORD PTR [esp+0x108c]
10009c4a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10009c4e:	8b 84 24 90 10 00 00 	mov    eax,DWORD PTR [esp+0x1090]
10009c55:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10009c59:	8b 84 24 94 10 00 00 	mov    eax,DWORD PTR [esp+0x1094]
10009c60:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10009c64:	8b 84 24 98 10 00 00 	mov    eax,DWORD PTR [esp+0x1098]
10009c6b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10009c6f:	8b 84 24 9c 10 00 00 	mov    eax,DWORD PTR [esp+0x109c]
10009c76:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10009c7a:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
10009c7e:	89 5c 24 4c          	mov    DWORD PTR [esp+0x4c],ebx
10009c82:	8b 04 9d 80 b2 00 10 	mov    eax,DWORD PTR [ebx*4+0x1000b280]	10009c85: R_386_32	.data
10009c89:	8b 0c 9d 84 b2 00 10 	mov    ecx,DWORD PTR [ebx*4+0x1000b284]	10009c8c: R_386_32	.data
10009c90:	bb 40 00 00 00       	mov    ebx,0x40
10009c95:	33 04 24             	xor    eax,DWORD PTR [esp]
10009c98:	89 c7                	mov    edi,eax
10009c9a:	c1 ef 06             	shr    edi,0x6
10009c9d:	89 c5                	mov    ebp,eax
10009c9f:	c1 ed 0e             	shr    ebp,0xe
10009ca2:	89 c2                	mov    edx,eax
10009ca4:	c1 ea 16             	shr    edx,0x16
10009ca7:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009cae:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009cb4:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009cba:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009cc0:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009cc6:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009cca:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009cd1:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009cd8:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10009cdf:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
10009ce3:	31 ca                	xor    edx,ecx
10009ce5:	89 d7                	mov    edi,edx
10009ce7:	c1 ef 06             	shr    edi,0x6
10009cea:	89 d5                	mov    ebp,edx
10009cec:	c1 ed 0e             	shr    ebp,0xe
10009cef:	89 d1                	mov    ecx,edx
10009cf1:	c1 e9 16             	shr    ecx,0x16
10009cf4:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009cfb:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009d01:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009d07:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009d0d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009d13:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009d17:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009d1e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009d25:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
10009d29:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009d30:	31 c1                	xor    ecx,eax
10009d32:	89 cd                	mov    ebp,ecx
10009d34:	c1 ed 06             	shr    ebp,0x6
10009d37:	89 ce                	mov    esi,ecx
10009d39:	c1 ee 0e             	shr    esi,0xe
10009d3c:	89 c8                	mov    eax,ecx
10009d3e:	c1 e8 16             	shr    eax,0x16
10009d41:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009d48:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009d4e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009d54:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009d5a:	25 fc 03 00 00       	and    eax,0x3fc
10009d5f:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009d63:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
10009d6a:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009d71:	33 54 24 0c          	xor    edx,DWORD PTR [esp+0xc]
10009d75:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009d7c:	89 c6                	mov    esi,eax
10009d7e:	31 d6                	xor    esi,edx
10009d80:	89 f5                	mov    ebp,esi
10009d82:	c1 ed 06             	shr    ebp,0x6
10009d85:	89 f2                	mov    edx,esi
10009d87:	c1 ea 0e             	shr    edx,0xe
10009d8a:	89 f0                	mov    eax,esi
10009d8c:	c1 e8 16             	shr    eax,0x16
10009d8f:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009d96:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009d9c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009da2:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009da8:	25 fc 03 00 00       	and    eax,0x3fc
10009dad:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009db1:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10009db8:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009dbf:	33 4c 24 10          	xor    ecx,DWORD PTR [esp+0x10]
10009dc3:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009dca:	31 c1                	xor    ecx,eax
10009dcc:	89 ca                	mov    edx,ecx
10009dce:	c1 ea 06             	shr    edx,0x6
10009dd1:	89 cd                	mov    ebp,ecx
10009dd3:	c1 ed 0e             	shr    ebp,0xe
10009dd6:	89 c8                	mov    eax,ecx
10009dd8:	c1 e8 16             	shr    eax,0x16
10009ddb:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009de2:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009de8:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009dee:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009df4:	25 fc 03 00 00       	and    eax,0x3fc
10009df9:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009dfd:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009e04:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10009e0b:	33 74 24 14          	xor    esi,DWORD PTR [esp+0x14]
10009e0f:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009e16:	31 f0                	xor    eax,esi
10009e18:	89 c7                	mov    edi,eax
10009e1a:	c1 ef 06             	shr    edi,0x6
10009e1d:	89 c5                	mov    ebp,eax
10009e1f:	c1 ed 0e             	shr    ebp,0xe
10009e22:	89 c2                	mov    edx,eax
10009e24:	c1 ea 16             	shr    edx,0x16
10009e27:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009e2e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009e34:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009e3a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009e40:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009e46:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009e4a:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009e51:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009e58:	33 4c 24 18          	xor    ecx,DWORD PTR [esp+0x18]
10009e5c:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10009e63:	31 ca                	xor    edx,ecx
10009e65:	89 d7                	mov    edi,edx
10009e67:	c1 ef 06             	shr    edi,0x6
10009e6a:	89 d5                	mov    ebp,edx
10009e6c:	c1 ed 0e             	shr    ebp,0xe
10009e6f:	89 d1                	mov    ecx,edx
10009e71:	c1 e9 16             	shr    ecx,0x16
10009e74:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009e7b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009e81:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009e87:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009e8d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009e93:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009e97:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009e9e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009ea5:	33 44 24 1c          	xor    eax,DWORD PTR [esp+0x1c]
10009ea9:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009eb0:	31 c8                	xor    eax,ecx
10009eb2:	89 c7                	mov    edi,eax
10009eb4:	c1 ef 06             	shr    edi,0x6
10009eb7:	89 c5                	mov    ebp,eax
10009eb9:	c1 ed 0e             	shr    ebp,0xe
10009ebc:	89 c1                	mov    ecx,eax
10009ebe:	c1 e9 16             	shr    ecx,0x16
10009ec1:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009ec8:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009ece:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009ed4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009eda:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009ee0:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009ee4:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009eeb:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009ef2:	33 54 24 20          	xor    edx,DWORD PTR [esp+0x20]
10009ef6:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009efd:	31 ca                	xor    edx,ecx
10009eff:	89 d7                	mov    edi,edx
10009f01:	c1 ef 06             	shr    edi,0x6
10009f04:	89 d5                	mov    ebp,edx
10009f06:	c1 ed 0e             	shr    ebp,0xe
10009f09:	89 d1                	mov    ecx,edx
10009f0b:	c1 e9 16             	shr    ecx,0x16
10009f0e:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009f15:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009f1b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009f21:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009f27:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009f2d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009f31:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009f38:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009f3f:	33 44 24 24          	xor    eax,DWORD PTR [esp+0x24]
10009f43:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009f4a:	31 c8                	xor    eax,ecx
10009f4c:	89 c7                	mov    edi,eax
10009f4e:	c1 ef 06             	shr    edi,0x6
10009f51:	89 c5                	mov    ebp,eax
10009f53:	c1 ed 0e             	shr    ebp,0xe
10009f56:	89 c1                	mov    ecx,eax
10009f58:	c1 e9 16             	shr    ecx,0x16
10009f5b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009f62:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009f68:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009f6e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009f74:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009f7a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009f7e:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009f85:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009f8c:	33 54 24 28          	xor    edx,DWORD PTR [esp+0x28]
10009f90:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009f97:	31 ca                	xor    edx,ecx
10009f99:	89 d7                	mov    edi,edx
10009f9b:	c1 ef 06             	shr    edi,0x6
10009f9e:	89 d5                	mov    ebp,edx
10009fa0:	c1 ed 0e             	shr    ebp,0xe
10009fa3:	89 d1                	mov    ecx,edx
10009fa5:	c1 e9 16             	shr    ecx,0x16
10009fa8:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009faf:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009fb5:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009fbb:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009fc1:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009fc7:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009fcb:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009fd2:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009fd9:	33 44 24 2c          	xor    eax,DWORD PTR [esp+0x2c]
10009fdd:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009fe4:	31 c8                	xor    eax,ecx
10009fe6:	89 c7                	mov    edi,eax
10009fe8:	c1 ef 06             	shr    edi,0x6
10009feb:	89 c5                	mov    ebp,eax
10009fed:	c1 ed 0e             	shr    ebp,0xe
10009ff0:	89 c1                	mov    ecx,eax
10009ff2:	c1 e9 16             	shr    ecx,0x16
10009ff5:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009ffc:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a002:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a008:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a00e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a014:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a018:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a01f:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a026:	33 54 24 30          	xor    edx,DWORD PTR [esp+0x30]
1000a02a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a031:	31 ca                	xor    edx,ecx
1000a033:	89 d7                	mov    edi,edx
1000a035:	c1 ef 06             	shr    edi,0x6
1000a038:	89 d5                	mov    ebp,edx
1000a03a:	c1 ed 0e             	shr    ebp,0xe
1000a03d:	89 d1                	mov    ecx,edx
1000a03f:	c1 e9 16             	shr    ecx,0x16
1000a042:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000a049:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a04f:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a055:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a05b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a061:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a065:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a06c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a073:	33 44 24 34          	xor    eax,DWORD PTR [esp+0x34]
1000a077:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a07e:	31 c8                	xor    eax,ecx
1000a080:	89 c7                	mov    edi,eax
1000a082:	c1 ef 06             	shr    edi,0x6
1000a085:	89 c5                	mov    ebp,eax
1000a087:	c1 ed 0e             	shr    ebp,0xe
1000a08a:	89 c1                	mov    ecx,eax
1000a08c:	c1 e9 16             	shr    ecx,0x16
1000a08f:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a096:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a09c:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a0a2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a0a8:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a0ae:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a0b2:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a0b9:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a0c0:	33 54 24 38          	xor    edx,DWORD PTR [esp+0x38]
1000a0c4:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a0cb:	31 ca                	xor    edx,ecx
1000a0cd:	89 d7                	mov    edi,edx
1000a0cf:	c1 ef 06             	shr    edi,0x6
1000a0d2:	89 d5                	mov    ebp,edx
1000a0d4:	c1 ed 0e             	shr    ebp,0xe
1000a0d7:	89 d6                	mov    esi,edx
1000a0d9:	c1 ee 16             	shr    esi,0x16
1000a0dc:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000a0e3:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a0e9:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a0ef:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a0f5:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a0fb:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000a0ff:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
1000a106:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
1000a10d:	33 44 24 3c          	xor    eax,DWORD PTR [esp+0x3c]
1000a111:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
1000a118:	31 f0                	xor    eax,esi
1000a11a:	89 c5                	mov    ebp,eax
1000a11c:	c1 ed 06             	shr    ebp,0x6
1000a11f:	89 c1                	mov    ecx,eax
1000a121:	c1 e9 0e             	shr    ecx,0xe
1000a124:	89 c6                	mov    esi,eax
1000a126:	c1 ee 16             	shr    esi,0x16
1000a129:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000a130:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a136:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a13c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a142:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a148:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000a14c:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
1000a153:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
1000a15a:	33 54 24 40          	xor    edx,DWORD PTR [esp+0x40]
1000a15e:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
1000a165:	89 f1                	mov    ecx,esi
1000a167:	31 d1                	xor    ecx,edx
1000a169:	33 44 24 44          	xor    eax,DWORD PTR [esp+0x44]
1000a16d:	4b                   	dec    ebx
1000a16e:	0f 85 21 fb ff ff    	jne    10009c95 <_crypt_blowfish_rn+0x282f>
1000a174:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
1000a178:	89 84 9c e8 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10e8],eax
1000a17f:	89 8c 9c ec 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10ec],ecx
1000a186:	83 44 24 48 02       	add    DWORD PTR [esp+0x48],0x2
1000a18b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000a18f:	83 f8 06             	cmp    eax,0x6
1000a192:	0f 85 e2 fa ff ff    	jne    10009c7a <_crypt_blowfish_rn+0x2814>
1000a198:	b9 07 00 00 00       	mov    ecx,0x7
1000a19d:	8b bc 24 1c 11 00 00 	mov    edi,DWORD PTR [esp+0x111c]
1000a1a4:	8b b4 24 18 11 00 00 	mov    esi,DWORD PTR [esp+0x1118]
1000a1ab:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000a1ad:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
1000a1b4:	0f be 40 1c          	movsx  eax,BYTE PTR [eax+0x1c]
1000a1b8:	8a 80 40 c3 00 10    	mov    al,BYTE PTR [eax+0x1000c340]	1000a1ba: R_386_32	.data
1000a1be:	83 e0 30             	and    eax,0x30
1000a1c1:	8a 80 00 c3 00 10    	mov    al,BYTE PTR [eax+0x1000c300]	1000a1c3: R_386_32	.data
1000a1c7:	88 04 24             	mov    BYTE PTR [esp],al
1000a1ca:	8b 9c 24 1c 11 00 00 	mov    ebx,DWORD PTR [esp+0x111c]
1000a1d1:	88 43 1c             	mov    BYTE PTR [ebx+0x1c],al
1000a1d4:	6a 06                	push   0x6
1000a1d6:	8d 74 24 5c          	lea    esi,[esp+0x5c]
1000a1da:	8d 9c 24 ec 10 00 00 	lea    ebx,[esp+0x10ec]
1000a1e1:	53                   	push   ebx
1000a1e2:	e8 f5 d1 ff ff       	call   100073dc <BF_swap>
1000a1e7:	6a 17                	push   0x17
1000a1e9:	53                   	push   ebx
1000a1ea:	8b 84 24 2c 11 00 00 	mov    eax,DWORD PTR [esp+0x112c]
1000a1f1:	83 c0 1d             	add    eax,0x1d
1000a1f4:	50                   	push   eax
1000a1f5:	e8 3d d1 ff ff       	call   10007337 <BF_encode>
1000a1fa:	8b 84 24 30 11 00 00 	mov    eax,DWORD PTR [esp+0x1130]
1000a201:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
1000a205:	68 a8 10 00 00       	push   0x10a8
1000a20a:	56                   	push   esi
1000a20b:	e8 0b d0 ff ff       	call   1000721b <clean>
1000a210:	83 c4 1c             	add    esp,0x1c
1000a213:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
1000a21a:	eb 29                	jmp    1000a245 <_crypt_blowfish_rn+0x2ddf>
1000a21c:	c7 05 00 00 00 00 22 00 00 00 	mov    DWORD PTR ds:0x0,0x22	1000a21e: R_386_32	_bcrypt_errno
1000a226:	b8 00 00 00 00       	mov    eax,0x0
1000a22b:	eb 18                	jmp    1000a245 <_crypt_blowfish_rn+0x2ddf>
1000a22d:	80 fa 31             	cmp    dl,0x31
1000a230:	0f 8e a3 d2 ff ff    	jle    100074d9 <_crypt_blowfish_rn+0x73>
1000a236:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000a238: R_386_32	_bcrypt_errno
1000a240:	b8 00 00 00 00       	mov    eax,0x0
1000a245:	81 c4 00 11 00 00    	add    esp,0x1100
1000a24b:	5b                   	pop    ebx
1000a24c:	5e                   	pop    esi
1000a24d:	5f                   	pop    edi
1000a24e:	5d                   	pop    ebp
1000a24f:	c3                   	ret    
1000a250:	6a 10                	push   0x10
1000a252:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
1000a259:	50                   	push   eax
1000a25a:	e8 bc cf ff ff       	call   1000721b <clean>
1000a25f:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000a261: R_386_32	_bcrypt_errno
1000a269:	83 c4 08             	add    esp,0x8
1000a26c:	b8 00 00 00 00       	mov    eax,0x0
1000a271:	eb d2                	jmp    1000a245 <_crypt_blowfish_rn+0x2ddf>

1000a273 <_crypt_gensalt_blowfish_rn>:
1000a273:	53                   	push   ebx
1000a274:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000a278:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000a27c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
1000a281:	7e 19                	jle    1000a29c <_crypt_gensalt_blowfish_rn+0x29>
1000a283:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
1000a288:	0f 8e 88 00 00 00    	jle    1000a316 <_crypt_gensalt_blowfish_rn+0xa3>
1000a28e:	85 c9                	test   ecx,ecx
1000a290:	74 33                	je     1000a2c5 <_crypt_gensalt_blowfish_rn+0x52>
1000a292:	8d 41 fc             	lea    eax,[ecx-0x4]
1000a295:	83 f8 1b             	cmp    eax,0x1b
1000a298:	76 30                	jbe    1000a2ca <_crypt_gensalt_blowfish_rn+0x57>
1000a29a:	eb 07                	jmp    1000a2a3 <_crypt_gensalt_blowfish_rn+0x30>
1000a29c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000a2a1:	7e 03                	jle    1000a2a6 <_crypt_gensalt_blowfish_rn+0x33>
1000a2a3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
1000a2a6:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
1000a2ab:	7e 11                	jle    1000a2be <_crypt_gensalt_blowfish_rn+0x4b>
1000a2ad:	b8 16 00 00 00       	mov    eax,0x16
1000a2b2:	a3 00 00 00 00       	mov    ds:0x0,eax	1000a2b3: R_386_32	_bcrypt_errno
1000a2b7:	b8 00 00 00 00       	mov    eax,0x0
1000a2bc:	eb 56                	jmp    1000a314 <_crypt_gensalt_blowfish_rn+0xa1>
1000a2be:	b8 22 00 00 00       	mov    eax,0x22
1000a2c3:	eb ed                	jmp    1000a2b2 <_crypt_gensalt_blowfish_rn+0x3f>
1000a2c5:	b9 05 00 00 00       	mov    ecx,0x5
1000a2ca:	c6 03 24             	mov    BYTE PTR [ebx],0x24
1000a2cd:	c6 43 01 32          	mov    BYTE PTR [ebx+0x1],0x32
1000a2d1:	c6 43 02 61          	mov    BYTE PTR [ebx+0x2],0x61
1000a2d5:	c6 43 03 24          	mov    BYTE PTR [ebx+0x3],0x24
1000a2d9:	b8 cd cc cc cc       	mov    eax,0xcccccccd
1000a2de:	f7 e1                	mul    ecx
1000a2e0:	89 d0                	mov    eax,edx
1000a2e2:	c1 e8 03             	shr    eax,0x3
1000a2e5:	8d 50 30             	lea    edx,[eax+0x30]
1000a2e8:	88 53 04             	mov    BYTE PTR [ebx+0x4],dl
1000a2eb:	8d 04 80             	lea    eax,[eax+eax*4]
1000a2ee:	01 c0                	add    eax,eax
1000a2f0:	29 c1                	sub    ecx,eax
1000a2f2:	83 c1 30             	add    ecx,0x30
1000a2f5:	88 4b 05             	mov    BYTE PTR [ebx+0x5],cl
1000a2f8:	c6 43 06 24          	mov    BYTE PTR [ebx+0x6],0x24
1000a2fc:	6a 10                	push   0x10
1000a2fe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a302:	8d 43 07             	lea    eax,[ebx+0x7]
1000a305:	50                   	push   eax
1000a306:	e8 2c d0 ff ff       	call   10007337 <BF_encode>
1000a30b:	c6 43 1d 00          	mov    BYTE PTR [ebx+0x1d],0x0
1000a30f:	83 c4 0c             	add    esp,0xc
1000a312:	89 d8                	mov    eax,ebx
1000a314:	5b                   	pop    ebx
1000a315:	c3                   	ret    
1000a316:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000a31b:	7f 86                	jg     1000a2a3 <_crypt_gensalt_blowfish_rn+0x30>
1000a31d:	b8 22 00 00 00       	mov    eax,0x22
1000a322:	eb 8e                	jmp    1000a2b2 <_crypt_gensalt_blowfish_rn+0x3f>

1000a324 <bcrypt_gensalt>:
1000a324:	57                   	push   edi
1000a325:	56                   	push   esi
1000a326:	53                   	push   ebx
1000a327:	83 ec 10             	sub    esp,0x10
1000a32a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000a32e:	89 e3                	mov    ebx,esp
1000a330:	8d 74 24 10          	lea    esi,[esp+0x10]
1000a334:	e8 fc ff ff ff       	call   1000a335 <bcrypt_gensalt+0x11>	1000a335: R_386_PC32	_bcrypt_rand
1000a339:	88 03                	mov    BYTE PTR [ebx],al
1000a33b:	43                   	inc    ebx
1000a33c:	39 f3                	cmp    ebx,esi
1000a33e:	75 f4                	jne    1000a334 <bcrypt_gensalt+0x10>
1000a340:	8d 47 fc             	lea    eax,[edi-0x4]
1000a343:	83 f8 1b             	cmp    eax,0x1b
1000a346:	76 05                	jbe    1000a34d <bcrypt_gensalt+0x29>
1000a348:	bf 0c 00 00 00       	mov    edi,0xc
1000a34d:	83 ec 0c             	sub    esp,0xc
1000a350:	6a 40                	push   0x40
1000a352:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
1000a356:	6a 10                	push   0x10
1000a358:	8d 44 24 18          	lea    eax,[esp+0x18]
1000a35c:	50                   	push   eax
1000a35d:	57                   	push   edi
1000a35e:	e8 10 ff ff ff       	call   1000a273 <_crypt_gensalt_blowfish_rn>
1000a363:	85 c0                	test   eax,eax
1000a365:	0f 94 c0             	sete   al
1000a368:	0f b6 c0             	movzx  eax,al
1000a36b:	83 c4 30             	add    esp,0x30
1000a36e:	5b                   	pop    ebx
1000a36f:	5e                   	pop    esi
1000a370:	5f                   	pop    edi
1000a371:	c3                   	ret    

1000a372 <bcrypt_hashpw>:
1000a372:	6a 40                	push   0x40
1000a374:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a378:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a37c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a380:	e8 e1 d0 ff ff       	call   10007466 <_crypt_blowfish_rn>
1000a385:	83 c4 10             	add    esp,0x10
1000a388:	85 c0                	test   eax,eax
1000a38a:	0f 94 c0             	sete   al
1000a38d:	0f b6 c0             	movzx  eax,al
1000a390:	c3                   	ret    
1000a391:	66 90                	xchg   ax,ax
1000a393:	90                   	nop

1000a394 <TERMINAL_KEYBUFFER_IN_SIZE>:
1000a394:	80 00 00 00                                         ....

1000a398 <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000a398:	80 00 00 00 2e 00 2e 2e 00 2f 00 43 6f 75 6c 64     ........./.Could
1000a3a8:	6e 27 74 20 6f 70 65 6e 20 62 61 73 65 20 70 61     n't open base pa
1000a3b8:	74 68 2e 0a 00 25 73 20 2d 3e 20 25 73 0a 00 43     th...%s -> %s..C
1000a3c8:	4f 55 4c 44 20 4e 4f 54 20 43 52 45 41 54 45 00     OULD NOT CREATE.
1000a3d8:	43 4f 55 4c 44 20 4e 4f 54 20 43 4f 50 59 00 4e     COULD NOT COPY.N
1000a3e8:	4f 20 4d 45 4d 4f 52 59 00 42 61 63 6b 75 70 00     O MEMORY.Backup.
1000a3f8:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000a408:	2f 42 61 63 6b 75 70 2f 00 30 31 32 33 34 35 36     /Backup/.0123456
1000a418:	37 38 39 41 42 43 44 45 46 00 43 3a 2f 55 73 65     789ABCDEF.C:/Use
1000a428:	72 73 2f 00 2f 44 65 73 6b 74 6f 70 00 2f 44 6f     rs/./Desktop./Do
1000a438:	63 75 6d 65 6e 74 73 00 2f 44 6f 77 6e 6c 6f 61     cuments./Downloa
1000a448:	64 73 00 2f 50 69 63 74 75 72 65 73 00 2f 54 72     ds./Pictures./Tr
1000a458:	61 73 68 20 42 69 6e 00 2f 4d 75 73 69 63 00 2f     ash Bin./Music./
1000a468:	4d 6f 76 69 65 73 00 43 3a 2f 42 61 6e 61 6e 61     Movies.C:/Banana
1000a478:	2f 52 65 67 69 73 74 72 79 2f 55 73 65 72 2f 00     /Registry/User/.
1000a488:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000a498:	72 79 2f 44 65 66 61 75 6c 74 55 73 65 72 00 00     ry/DefaultUser..
1000a4a8:	43 68 65 63 6b 69 6e 67 0a 20 73 79 73 74 65 6d     Checking. system
1000a4b8:	0a 20 72 65 71 75 69 72 65 6d 65 6e 74 73 0a 0a     . requirements..
1000a4c8:	20 4c 65 67 61 6c 0a 20 6e 6f 74 69 63 65 73 0a      Legal. notices.
1000a4d8:	0a 20 43 68 6f 6f 73 69 6e 67 20 61 0a 20 70 61     . Choosing a. pa
1000a4e8:	72 74 69 74 69 6f 6e 0a 0a 20 46 6f 72 6d 61 74     rtition.. Format
1000a4f8:	74 69 6e 67 0a 0a 20 43 6f 70 79 69 6e 67 20 66     ting.. Copying f
1000a508:	69 6c 65 73 0a 0a 20 52 65 73 74 61 72 74 69 6e     iles.. Restartin
1000a518:	67 0a 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72     g. your computer
1000a528:	0a 0a 00 20 46 69 6e 61 6c 69 73 69 6e 67 20 74     ... Finalising t
1000a538:	68 65 0a 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     he. installation
1000a548:	00 00 00 00 50 6c 65 61 73 65 20 77 61 69 74 20     ....Please wait 
1000a558:	77 68 69 6c 65 20 74 68 65 20 69 6e 73 74 61 6c     while the instal
1000a568:	6c 20 66 69 6e 69 73 68 65 73 2e 00 10 20 00 20     l finishes... . 
1000a578:	20 00 41 6c 6c 6f 63 61 74 69 6e 67 20 74 68 65      .Allocating the
1000a588:	20 73 77 61 70 66 69 6c 65 00 55 70 64 61 74 69      swapfile.Updati
1000a598:	6e 67 20 74 68 65 20 72 65 67 69 73 74 72 79 00     ng the registry.
1000a5a8:	43 72 65 61 74 69 6e 67 20 75 73 65 72 20 61 63     Creating user ac
1000a5b8:	63 6f 75 6e 74 00 49 6e 73 74 61 6c 6c 69 6e 67     count.Installing
1000a5c8:	20 70 61 63 6b 61 67 65 73 00 42 61 63 6b 69 6e      packages.Backin
1000a5d8:	67 20 75 70 20 73 79 73 74 65 6d 20 66 69 6c 65     g up system file
1000a5e8:	73 00 46 69 6e 69 73 68 69 6e 67 20 74 6f 75 63     s.Finishing touc
1000a5f8:	68 65 73 00 51 51 2d 30 30 30 2d 30 30 30 2d 30     hes.QQ-000-000-0
1000a608:	30 30 2d 51 00 00 00 00 43 3a 2f 42 61 6e 61 6e     00-Q....C:/Banan
1000a618:	61 2f 53 79 73 74 65 6d 2f 74 69 6d 65 7a 6f 6e     a/System/timezon
1000a628:	65 73 2e 74 78 74 00 20 00 2e 2e 2e 20 00 00 00     es.txt. .... ...
1000a638:	53 65 74 74 69 6e 67 20 75 70 20 74 68 65 20 73     Setting up the s
1000a648:	79 73 74 65 6d 20 66 6f 72 20 74 68 65 20 66 69     ystem for the fi
1000a658:	72 73 74 20 74 69 6d 65 00 0a 0a 0a 0a 0a 0a 00     rst time........
1000a668:	54 65 73 74 00 41 41 2d 30 30 30 30 30 2d 30 30     Test.AA-00000-00
1000a678:	30 30 30 2d 41 00 57 57 2d 38 38 33 38 38 2d 35     000-A.WW-88388-5
1000a688:	35 35 35 35 2d 4e 00 42 61 6e 61 6e 61 20 53 65     5555-N.Banana Se
1000a698:	74 75 70 00 50 6c 65 61 73 65 20 65 6e 74 65 72     tup.Please enter
1000a6a8:	20 79 6f 75 72 20 64 65 74 61 69 6c 73 2e 20 50      your details. P
1000a6b8:	72 65 73 73 20 54 41 42 20 74 6f 20 73 77 69 74     ress TAB to swit
1000a6c8:	63 68 00 62 65 74 77 65 65 6e 20 66 69 65 6c 64     ch.between field
1000a6d8:	73 2e 00 4e 61 6d 65 00 43 6f 6d 70 61 6e 79 00     s..Name.Company.
1000a6e8:	50 61 73 73 77 6f 72 64 00 43 6f 6e 66 69 72 6d     Password.Confirm
1000a6f8:	00 70 61 73 73 77 6f 72 64 00 00 00 20 20 20 20     .password...    
1000a708:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000a718:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000a728:	00 20 11 00 20 20 20 00 2a 00 50 72 65 73 73 20     . ..   .*.Press 
1000a738:	45 4e 54 45 52 20 74 6f 20 73 75 62 6d 69 74 00     ENTER to submit.
1000a748:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000a758:	20 20 20 20 20 20 00 20 20 20 4f 4b 20 20 20 00           .   OK   .
1000a768:	20 20 11 00 43 4f 55 4c 44 20 4e 4f 54 20 53 41       ..COULD NOT SA
1000a778:	56 45 00 59 4f 55 52 20 50 41 53 53 57 4f 52 44     VE.YOUR PASSWORD
1000a788:	20 28 41 29 00 59 4f 55 52 20 50 41 53 53 57 4f      (A).YOUR PASSWO
1000a798:	52 44 20 28 42 29 00 44 61 74 65 20 61 6e 64 20     RD (B).Date and 
1000a7a8:	54 69 6d 65 00 31 34 2f 30 35 2f 32 30 32 31 20     Time.14/05/2021 
1000a7b8:	31 38 3a 35 35 3a 30 30 00 00 00 00 50 6c 65 61     18:55:00....Plea
1000a7c8:	73 65 20 65 6e 74 65 72 20 74 68 65 20 63 75 72     se enter the cur
1000a7d8:	72 65 6e 74 20 64 61 74 65 20 61 6e 64 20 74 69     rent date and ti
1000a7e8:	6d 65 2c 00 61 6e 64 20 74 68 65 6e 20 70 72 65     me,.and then pre
1000a7f8:	73 73 20 45 4e 54 45 52 2e 00 44 44 2f 4d 4d 2f     ss ENTER..DD/MM/
1000a808:	59 59 59 59 20 48 48 3a 4d 4d 3a 53 53 00 45 53     YYYY HH:MM:SS.ES
1000a818:	43 3a 20 47 6f 20 62 61 63 6b 20 61 20 73 63 72     C: Go back a scr
1000a828:	65 65 6e 00 50 6c 65 61 73 65 20 73 65 6c 65 63     een.Please selec
1000a838:	74 20 79 6f 75 72 20 74 69 6d 65 7a 6f 6e 65 20     t your timezone 
1000a848:	61 6e 64 20 74 68 65 6e 20 70 72 65 73 73 20 45     and then press E
1000a858:	4e 54 45 52 2e 00 54 5a 48 52 3a 20 25 64 3a 25     NTER..TZHR: %d:%
1000a868:	64 0a 00 55 73 65 72 20 49 6e 74 65 72 66 61 63     d..User Interfac
1000a878:	65 00 00 00 50 6c 65 61 73 65 20 73 65 6c 65 63     e...Please selec
1000a888:	74 20 74 68 65 20 75 73 65 72 20 69 6e 74 65 72     t the user inter
1000a898:	66 61 63 65 20 79 6f 75 20 77 61 6e 74 20 42 61     face you want Ba
1000a8a8:	6e 61 6e 61 00 00 00 00 74 6f 20 62 6f 6f 74 20     nana....to boot 
1000a8b8:	69 6e 74 6f 20 62 79 20 64 65 66 61 75 6c 74 20     into by default 
1000a8c8:	77 68 65 6e 20 79 6f 75 20 73 74 61 72 74 20 74     when you start t
1000a8d8:	68 65 20 63 6f 6d 70 75 74 65 72 2e 00 49 6e 76     he computer..Inv
1000a8e8:	61 6c 69 64 20 50 72 6f 64 75 63 74 20 4b 65 79     alid Product Key
1000a8f8:	00 00 00 00 59 6f 75 20 64 6f 20 6e 6f 74 20 68     ....You do not h
1000a908:	61 76 65 20 61 20 76 61 6c 69 64 20 70 72 6f 64     ave a valid prod
1000a918:	75 63 74 20 6b 65 79 2e 0a 00 00 00 59 6f 75 20     uct key.....You 
1000a928:	6e 65 65 64 20 61 20 76 61 6c 69 64 20 70 72 6f     need a valid pro
1000a938:	64 75 63 74 20 6b 65 79 20 69 6e 20 6f 72 64 65     duct key in orde
1000a948:	72 20 74 6f 00 75 73 65 20 42 61 6e 61 6e 61 2e     r to.use Banana.
1000a958:	00 00 00 00 50 72 65 73 73 20 45 4e 54 45 52 20     ....Press ENTER 
1000a968:	74 6f 20 72 65 2d 65 6e 74 65 72 20 79 6f 75 72     to re-enter your
1000a978:	20 70 72 6f 64 75 63 74 20 6b 65 79 2e 00 50 72      product key..Pr
1000a988:	6f 64 75 63 74 20 4b 65 79 00 00 00 50 6c 65 61     oduct Key...Plea
1000a998:	73 65 20 65 6e 74 65 72 20 79 6f 75 72 20 70 72     se enter your pr
1000a9a8:	6f 64 75 63 74 20 6b 65 79 20 62 65 6c 6f 77 2c     oduct key below,
1000a9b8:	00 00 00 00 54 68 65 20 65 6e 74 65 72 65 64 20     ....The entered 
1000a9c8:	70 72 6f 64 75 63 74 20 6b 65 79 20 77 61 73 20     product key was 
1000a9d8:	69 6e 76 61 6c 69 64 2e 00 00 00 00 50 72 65 73     invalid.....Pres
1000a9e8:	73 20 61 6e 79 20 6b 65 79 20 74 6f 20 63 6f 6e     s any key to con
1000a9f8:	74 69 6e 75 65 20 61 6e 64 20 74 68 65 6e 00 00     tinue and then..
1000aa08:	65 6e 74 65 72 20 74 68 65 20 70 72 6f 64 75 63     enter the produc
1000aa18:	74 20 6b 65 79 20 63 6f 72 72 65 63 74 6c 79 2e     t key correctly.
1000aa28:	00 46 69 6e 61 6c 69 73 69 6e 67 20 49 6e 73 74     .Finalising Inst
1000aa38:	61 6c 6c 61 74 69 6f 6e 00 00 00 00 53 59 53 54     allation....SYST
1000aa48:	45 4d 2e 44 4c 4c 20 54 4f 44 4f 3a 20 72 65 67     EM.DLL TODO: reg
1000aa58:	69 73 74 72 79 20 72 65 61 64 0a 00 43 3a 2f 42     istry read..C:/B
1000aa68:	61 6e 61 6e 61 2f 52 65 67 69 73 74 72 79 2f 53     anana/Registry/S
1000aa78:	79 73 74 65 6d 00 43 3a 2f 42 61 6e 61 6e 61 2f     ystem.C:/Banana/
1000aa88:	52 65 67 69 73 74 72 79 2f 55 73 65 72 00 00 00     Registry/User...
1000aa98:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000aaa8:	72 79 2f 44 65 66 61 75 6c 74 53 79 73 74 65 6d     ry/DefaultSystem
1000aab8:	00 00 00 00 20 42 6f 6f 74 20 74 6f 20 63 6f 6d     .... Boot to com
1000aac8:	6d 61 6e 64 20 6c 69 6e 65 20 20 20 20 20 20 20     mand line       
1000aad8:	20 20 20 20 20 20 20 20 00 00 00 00 20 42 6f 6f             .... Boo
1000aae8:	74 20 74 6f 20 67 72 61 70 68 69 63 61 6c 20 69     t to graphical i
1000aaf8:	6e 74 65 72 66 61 63 65 20 28 56 47 41 29 20 20     nterface (VGA)  
1000ab08:	00 00 00 00 20 42 6f 6f 74 20 74 6f 20 67 72 61     .... Boot to gra
1000ab18:	70 68 69 63 61 6c 20 69 6e 74 65 72 66 61 63 65     phical interface
1000ab28:	20 28 56 45 53 41 29 20 00 00 00 00 bc aa 00 10      (VESA) ........	1000ab34: R_386_32	.text
1000ab38:	e4 aa 00 10 0c ab 00 10 4c 6f 61 64 69 6e 67 20     ........Loading 	1000ab38: R_386_32	.text
	1000ab3c: R_386_32	.text
1000ab48:	65 78 74 65 6e 73 69 6f 6e 73 2e 2e 2e 00 0a 0a     extensions......
1000ab58:	3a 0a 00 2f 25 73 0a 00 43 3a 2f 42 61 6e 61 6e     :../%s..C:/Banan
1000ab68:	61 2f 53 79 73 74 65 6d 2f 73 65 74 75 70 69 73     a/System/setupis
1000ab78:	64 2e 6f 6e 65 00 53 59 53 49 4e 49 54 20 46 41     d.one.SYSINIT FA
1000ab88:	49 4c 55 52 45 00 43 3a 2f 42 61 6e 61 6e 61 2f     ILURE.C:/Banana/
1000ab98:	53 79 73 74 65 6d 2f 63 6f 6d 6d 61 6e 64 2e 65     System/command.e
1000aba8:	78 65 00 43 3a 2f 44 45 2e 42 55 47 00 00 00 00     xe.C:/DE.BUG....
1000abb8:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000abc8:	72 79 2f 53 79 73 74 65 6d 2f 53 59 53 54 45 4d     ry/System/SYSTEM
1000abd8:	2e 52 45 47 00 42 41 4e 41 4e 41 00 72 65 67 73     .REG.BANANA.regs
1000abe8:	61 66 65 6e 61 6d 65 20 3d 20 25 73 0a 00 42 41     afename = %s..BA
1000abf8:	4e 41 4e 41 2f 55 53 45 52 53 2f 00 75 73 65 72     NANA/USERS/.user
1000ac08:	42 61 73 65 50 61 74 68 20 3d 20 25 73 0a 00 53     BasePath = %s..S
1000ac18:	45 54 55 50 00 42 4f 4f 54 00 54 49 4d 45 00 55     ETUP.BOOT.TIME.U
1000ac28:	53 45 52 53 00 46 49 4c 45 41 53 53 4f 43 00 42     SERS.FILEASSOC.B
1000ac38:	41 4e 41 4e 41 2f 55 53 45 52 53 00 42 41 4e 41     ANANA/USERS.BANA
1000ac48:	4e 41 2f 46 49 4c 45 41 53 53 4f 43 00 4f 50 45     NA/FILEASSOC.OPE
1000ac58:	4e 00 45 44 49 54 00 50 52 49 4e 54 00 49 43 4f     N.EDIT.PRINT.ICO
1000ac68:	4e 00 44 45 53 43 52 00 43 55 53 54 4f 4d 56 45     N.DESCR.CUSTOMVE
1000ac78:	52 42 00 43 55 53 54 4f 4d 50 52 4f 47 00 42 41     RB.CUSTOMPROG.BA
1000ac88:	4e 41 4e 41 2f 54 49 4d 45 00 54 49 4d 45 5a 4f     NANA/TIME.TIMEZO
1000ac98:	4e 45 00 42 41 4e 41 4e 41 2f 53 45 54 55 50 00     NE.BANANA/SETUP.
1000aca8:	4e 41 4d 45 00 43 4f 4d 50 41 4e 59 00 50 52 4f     NAME.COMPANY.PRO
1000acb8:	44 55 43 54 4b 45 59 00 53 41 4c 54 00 50 41 53     DUCTKEY.SALT.PAS
1000acc8:	53 57 4f 52 44 00 44 49 53 50 4c 41 59 4e 41 4d     SWORD.DISPLAYNAM
1000acd8:	45 00 44 45 53 4b 54 4f 50 00 44 4f 43 55 4d 45     E.DESKTOP.DOCUME
1000ace8:	4e 54 53 00 44 4f 57 4e 4c 4f 41 44 53 00 50 49     NTS.DOWNLOADS.PI
1000acf8:	43 54 55 52 45 53 00 4d 4f 56 49 45 53 00 4d 55     CTURES.MOVIES.MU
1000ad08:	53 49 43 00 52 45 43 59 43 4c 45 42 49 4e 00 42     SIC.RECYCLEBIN.B
1000ad18:	41 4e 41 4e 41 2f 42 4f 4f 54 00 41 55 54 4f 47     ANANA/BOOT.AUTOG
1000ad28:	55 49 00 54 49 4d 45 5a 4f 4e 45 49 44 00 42 41     UI.TIMEZONEID.BA
1000ad38:	4e 41 4e 41 2f 54 49 4d 45 2f 54 49 4d 45 5a 4f     NANA/TIME/TIMEZO
1000ad48:	4e 45 00 42 41 4e 41 4e 41 2f 53 45 54 55 50 2f     NE.BANANA/SETUP/
1000ad58:	4e 41 4d 45 00 42 41 4e 41 4e 41 2f 53 45 54 55     NAME.BANANA/SETU
1000ad68:	50 2f 43 4f 4d 50 41 4e 59 00 42 41 4e 41 4e 41     P/COMPANY.BANANA
1000ad78:	2f 53 45 54 55 50 2f 50 52 4f 44 55 43 54 4b 45     /SETUP/PRODUCTKE
1000ad88:	59 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53     Y.BANANA/FILEASS
1000ad98:	4f 43 2f 49 43 4f 4e 00 54 58 54 00 42 41 4e 41     OC/ICON.TXT.BANA
1000ada8:	4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f 44 45 53     NA/FILEASSOC/DES
1000adb8:	43 52 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53     CR.BANANA/FILEAS
1000adc8:	53 4f 43 2f 4f 50 45 4e 00 42 41 4e 41 4e 41 2f     SOC/OPEN.BANANA/
1000add8:	46 49 4c 45 41 53 53 4f 43 2f 45 44 49 54 00 42     FILEASSOC/EDIT.B
1000ade8:	41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f     ANANA/FILEASSOC/
1000adf8:	50 52 49 4e 54 00 42 41 4e 41 4e 41 2f 46 49 4c     PRINT.BANANA/FIL
1000ae08:	45 41 53 53 4f 43 2f 49 43 4f 4e 2f 54 58 54 00     EASSOC/ICON/TXT.
1000ae18:	43 3a 2f 42 61 6e 61 6e 61 2f 49 63 6f 6e 73 2f     C:/Banana/Icons/
1000ae28:	63 6f 6c 6f 75 72 2f 74 65 78 74 2e 74 67 61 00     colour/text.tga.
1000ae38:	42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43     BANANA/FILEASSOC
1000ae48:	2f 44 45 53 43 52 2f 54 58 54 00 54 65 78 74 20     /DESCR/TXT.Text 
1000ae58:	44 6f 63 75 6d 65 6e 74 00 42 41 4e 41 4e 41 2f     Document.BANANA/
1000ae68:	46 49 4c 45 41 53 53 4f 43 2f 4f 50 45 4e 2f 54     FILEASSOC/OPEN/T
1000ae78:	58 54 00 43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73     XT.C:/Banana/Sys
1000ae88:	74 65 6d 2f 74 65 2e 65 78 65 00 42 41 4e 41 4e     tem/te.exe.BANAN
1000ae98:	41 2f 46 49 4c 45 41 53 53 4f 43 2f 45 44 49 54     A/FILEASSOC/EDIT
1000aea8:	2f 54 58 54 00 42 41 4e 41 4e 41 2f 46 49 4c 45     /TXT.BANANA/FILE
1000aeb8:	41 53 53 4f 43 2f 50 52 49 4e 54 2f 54 58 54 00     ASSOC/PRINT/TXT.
1000aec8:	49 53 4f 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41     ISO.BANANA/FILEA
1000aed8:	53 53 4f 43 2f 49 43 4f 4e 2f 49 53 4f 00 43 3a     SSOC/ICON/ISO.C:
1000aee8:	2f 42 61 6e 61 6e 61 2f 49 63 6f 6e 73 2f 63 6f     /Banana/Icons/co
1000aef8:	6c 6f 75 72 2f 63 64 2e 74 67 61 00 42 41 4e 41     lour/cd.tga.BANA
1000af08:	4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f 44 45 53     NA/FILEASSOC/DES
1000af18:	43 52 2f 49 53 4f 00 44 69 73 63 20 49 6d 61 67     CR/ISO.Disc Imag
1000af28:	65 20 46 69 6c 65 00 2f 50 41 53 53 57 4f 52 44     e File./PASSWORD
1000af38:	00 2f 53 41 4c 54 00 2f 44 49 53 50 4c 41 59 4e     ./SALT./DISPLAYN
1000af48:	41 4d 45 00 2f 44 45 53 4b 54 4f 50 00 2f 44 4f     AME./DESKTOP./DO
1000af58:	43 55 4d 45 4e 54 53 00 2f 44 4f 57 4e 4c 4f 41     CUMENTS./DOWNLOA
1000af68:	44 53 00 2f 50 49 43 54 55 52 45 53 00 2f 4d 4f     DS./PICTURES./MO
1000af78:	56 49 45 53 00 2f 4d 55 53 49 43 00 2f 52 45 43     VIES./MUSIC./REC
1000af88:	59 43 4c 45 42 49 4e 00 54 4f 44 4f 3a 20 64 65     YCLEBIN.TODO: de
1000af98:	74 65 63 74 20 6e 6f 72 6d 61 6c 20 6b 65 72 6e     tect normal kern
1000afa8:	65 6c 20 76 73 20 4b 52 4e 4c 50 32 0a 00 00 00     el vs KRNLP2....
1000afb8:	54 68 65 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     The installation
1000afc8:	20 68 61 73 20 62 65 65 6e 20 63 6f 6d 70 6c 65      has been comple
1000afd8:	74 65 64 2e 0a 00 00 00 50 6c 65 61 73 65 20 70     ted.....Please p
1000afe8:	72 65 73 73 20 45 4e 54 45 52 20 74 6f 20 72 65     ress ENTER to re
1000aff8:	73 74 61 72 74 20 79 6f 75 72 20 63 6f 6d 70 75     start your compu
1000b008:	74 65 72 00 61 6e 64 20 73 74 61 72 74 20 42 61     ter.and start Ba
1000b018:	6e 61 6e 61 2e 00 00 00 50 4c 45 41 53 45 20 4d     nana....PLEASE M
1000b028:	41 4e 55 41 4c 4c 59 20 52 45 53 54 41 52 54 20     ANUALLY RESTART 
1000b038:	59 4f 55 52 20 43 4f 4d 50 55 54 45 52 00 42 41     YOUR COMPUTER.BA
1000b048:	4e 41 4e 41 2f 42 4f 4f 54 2f 41 55 54 4f 47 55     NANA/BOOT/AUTOGU
1000b058:	49 00 50 72 6f 64 75 63 74 20 4b 65 79 20 55 70     I.Product Key Up
1000b068:	64 61 74 65 64 00 00 00 59 6f 75 72 20 70 72 6f     dated...Your pro
1000b078:	64 75 63 74 20 6b 65 79 20 68 61 73 20 62 65 65     duct key has bee
1000b088:	6e 20 75 70 64 61 74 65 64 2e 0a 00 20 43 72 65     n updated... Cre
1000b098:	61 74 65 20 6e 65 77 20 75 73 65 72 2e 2e 2e 20     ate new user... 
1000b0a8:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000b0b8:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00 4c                   .L
1000b0c8:	6f 67 69 6e 00 00 00 00 50 6c 65 61 73 65 20 73     ogin....Please s
1000b0d8:	65 6c 65 63 74 20 79 6f 75 72 20 75 73 65 72 6e     elect your usern
1000b0e8:	61 6d 65 20 61 6e 64 20 70 72 65 73 73 20 45 4e     ame and press EN
1000b0f8:	54 45 52 2e 00 00 00 00 50 6c 65 61 73 65 20 74     TER.....Please t
1000b108:	79 70 65 20 79 6f 75 72 20 70 61 73 73 77 6f 72     ype your passwor
1000b118:	64 20 61 6e 64 20 70 72 65 73 73 20 45 4e 54 45     d and press ENTE
1000b128:	52 00 6f 72 20 70 72 65 73 73 20 45 53 43 20 74     R.or press ESC t
1000b138:	6f 20 67 6f 20 62 61 63 6b 2e 00 00 52 45 51 55     o go back...REQU
1000b148:	49 52 45 44 3a 20 25 73 0a 47 4f 54 3a 20 25 73     IRED: %s.GOT: %s
1000b158:	0a 53 41 4c 54 3a 20 25 73 0a 00 00 49 74 20 69     .SALT: %s...It i
1000b168:	73 20 73 61 66 65 20 74 6f 20 74 75 72 6e 20 6f     s safe to turn o
1000b178:	66 66 20 79 6f 75 72 20 50 43 00 63 61 6c 6c 00     ff your PC.call.
1000b188:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000b198:	2f 69 6e 69 74 2e 62 61 74 00 00 00 8e ab 00 10     /init.bat.......	1000b1a4: R_386_32	.text
1000b1a8:	83 b1 00 10 88 b1 00 10 00 00 00 00                 ............	1000b1a8: R_386_32	.text
	1000b1ac: R_386_32	.text
