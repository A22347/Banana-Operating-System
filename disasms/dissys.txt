
packages/system/32/0001/system.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <beginx(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <beginx(void*)+0xd>	1000000d: R_386_PC32	begin(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <memcmp(void*, void*, unsigned long)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 10             	sub    esp,0x10
1000001d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000020:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000026:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000029:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000002c:	8d 50 ff             	lea    edx,[eax-0x1]
1000002f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000032:	85 c0                	test   eax,eax
10000034:	74 12                	je     10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000036:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000039:	8a 10                	mov    dl,BYTE PTR [eax]
1000003b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000003e:	8a 00                	mov    al,BYTE PTR [eax]
10000040:	38 c2                	cmp    dl,al
10000042:	75 04                	jne    10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000044:	b0 01                	mov    al,0x1
10000046:	eb 02                	jmp    1000004a <memcmp(void*, void*, unsigned long)+0x33>
10000048:	b0 00                	mov    al,0x0
1000004a:	84 c0                	test   al,al
1000004c:	74 08                	je     10000056 <memcmp(void*, void*, unsigned long)+0x3f>
1000004e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000051:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
10000054:	eb d3                	jmp    10000029 <memcmp(void*, void*, unsigned long)+0x12>
10000056:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000059:	8a 00                	mov    al,BYTE PTR [eax]
1000005b:	0f b6 d0             	movzx  edx,al
1000005e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000061:	8a 00                	mov    al,BYTE PTR [eax]
10000063:	0f b6 c0             	movzx  eax,al
10000066:	29 c2                	sub    edx,eax
10000068:	89 d0                	mov    eax,edx
1000006a:	c9                   	leave  
1000006b:	c3                   	ret    

1000006c <memmove>:
1000006c:	55                   	push   ebp
1000006d:	89 e5                	mov    ebp,esp
1000006f:	83 ec 10             	sub    esp,0x10
10000072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000075:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000007b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000007e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000081:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
10000084:	76 1b                	jbe    100000a1 <memmove+0x35>
10000086:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
1000008a:	74 46                	je     100000d2 <memmove+0x66>
1000008c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000008f:	8a 10                	mov    dl,BYTE PTR [eax]
10000091:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000094:	88 10                	mov    BYTE PTR [eax],dl
10000096:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000099:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
1000009c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000009f:	eb e5                	jmp    10000086 <memmove+0x1a>
100000a1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000a4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
100000a7:	73 29                	jae    100000d2 <memmove+0x66>
100000a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000ac:	48                   	dec    eax
100000ad:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
100000b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000b3:	48                   	dec    eax
100000b4:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
100000b7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000bb:	74 15                	je     100000d2 <memmove+0x66>
100000bd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000c0:	8a 10                	mov    dl,BYTE PTR [eax]
100000c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000c5:	88 10                	mov    BYTE PTR [eax],dl
100000c7:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100000ca:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
100000cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000d0:	eb e5                	jmp    100000b7 <memmove+0x4b>
100000d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d5:	c9                   	leave  
100000d6:	c3                   	ret    

100000d7 <memset>:
100000d7:	55                   	push   ebp
100000d8:	89 e5                	mov    ebp,esp
100000da:	83 ec 10             	sub    esp,0x10
100000dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100000e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000e7:	74 12                	je     100000fb <memset+0x24>
100000e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100000ec:	88 c2                	mov    dl,al
100000ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000f1:	88 10                	mov    BYTE PTR [eax],dl
100000f3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100000f6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000f9:	eb e8                	jmp    100000e3 <memset+0xc>
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	c9                   	leave  
100000ff:	c3                   	ret    

10000100 <strlen>:
10000100:	55                   	push   ebp
10000101:	89 e5                	mov    ebp,esp
10000103:	83 ec 10             	sub    esp,0x10
10000106:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000110:	8a 00                	mov    al,BYTE PTR [eax]
10000112:	84 c0                	test   al,al
10000114:	74 0c                	je     10000122 <strlen+0x22>
10000116:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000119:	40                   	inc    eax
1000011a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000011d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
10000120:	eb eb                	jmp    1000010d <strlen+0xd>
10000122:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000125:	c9                   	leave  
10000126:	c3                   	ret    

10000127 <strpbrk(char const*, char const*)>:
10000127:	55                   	push   ebp
10000128:	89 e5                	mov    ebp,esp
1000012a:	83 ec 10             	sub    esp,0x10
1000012d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000130:	8a 00                	mov    al,BYTE PTR [eax]
10000132:	84 c0                	test   al,al
10000134:	74 30                	je     10000166 <strpbrk(char const*, char const*)+0x3f>
10000136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000139:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000013c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000013f:	8a 00                	mov    al,BYTE PTR [eax]
10000141:	84 c0                	test   al,al
10000143:	74 18                	je     1000015d <strpbrk(char const*, char const*)+0x36>
10000145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000148:	8a 10                	mov    dl,BYTE PTR [eax]
1000014a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000014d:	8a 00                	mov    al,BYTE PTR [eax]
1000014f:	38 c2                	cmp    dl,al
10000151:	75 05                	jne    10000158 <strpbrk(char const*, char const*)+0x31>
10000153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000156:	eb 13                	jmp    1000016b <strpbrk(char const*, char const*)+0x44>
10000158:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
1000015b:	eb df                	jmp    1000013c <strpbrk(char const*, char const*)+0x15>
1000015d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000160:	40                   	inc    eax
10000161:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000164:	eb c7                	jmp    1000012d <strpbrk(char const*, char const*)+0x6>
10000166:	b8 00 00 00 00       	mov    eax,0x0
1000016b:	c9                   	leave  
1000016c:	c3                   	ret    

1000016d <strtok>:
1000016d:	55                   	push   ebp
1000016e:	89 e5                	mov    ebp,esp
10000170:	83 ec 10             	sub    esp,0x10
10000173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000176:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000179:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000017c:	85 c0                	test   eax,eax
1000017e:	75 18                	jne    10000198 <strtok+0x2b>
10000180:	a1 00 00 00 00       	mov    eax,ds:0x0	10000181: R_386_32	SavedPtr
10000185:	85 c0                	test   eax,eax
10000187:	75 07                	jne    10000190 <strtok+0x23>
10000189:	b8 00 00 00 00       	mov    eax,0x0
1000018e:	eb 6f                	jmp    100001ff <strtok+0x92>
10000190:	a1 00 00 00 00       	mov    eax,ds:0x0	10000191: R_386_32	SavedPtr
10000195:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000198:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000019b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000019e:	50                   	push   eax
1000019f:	e8 fc ff ff ff       	call   100001a0 <strtok+0x33>	100001a0: R_386_PC32	strpbrk(char const*, char const*)
100001a4:	83 c4 08             	add    esp,0x8
100001a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100001a8: R_386_32	SavedPtr
100001ac:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001ae: R_386_32	SavedPtr
100001b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001b5:	39 c2                	cmp    edx,eax
100001b7:	75 22                	jne    100001db <strtok+0x6e>
100001b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001bc:	8d 50 01             	lea    edx,[eax+0x1]
100001bf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100001c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100001cb:	50                   	push   eax
100001cc:	e8 fc ff ff ff       	call   100001cd <strtok+0x60>	100001cd: R_386_PC32	strpbrk(char const*, char const*)
100001d1:	83 c4 08             	add    esp,0x8
100001d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100001d5: R_386_32	SavedPtr
100001d9:	eb d1                	jmp    100001ac <strtok+0x3f>
100001db:	a1 00 00 00 00       	mov    eax,ds:0x0	100001dc: R_386_32	SavedPtr
100001e0:	85 c0                	test   eax,eax
100001e2:	74 16                	je     100001fa <strtok+0x8d>
100001e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e5: R_386_32	SavedPtr
100001e9:	8d 50 01             	lea    edx,[eax+0x1]
100001ec:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100001ee: R_386_32	SavedPtr
100001f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001f8:	eb 05                	jmp    100001ff <strtok+0x92>
100001fa:	b8 00 00 00 00       	mov    eax,0x0
100001ff:	c9                   	leave  
10000200:	c3                   	ret    

10000201 <strcpy>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	83 ec 10             	sub    esp,0x10
10000207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000020a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000020d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000210:	8a 00                	mov    al,BYTE PTR [eax]
10000212:	84 c0                	test   al,al
10000214:	74 12                	je     10000228 <strcpy+0x27>
10000216:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000219:	8a 10                	mov    dl,BYTE PTR [eax]
1000021b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000021e:	88 10                	mov    BYTE PTR [eax],dl
10000220:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000223:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10000226:	eb e5                	jmp    1000020d <strcpy+0xc>
10000228:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000022b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000022e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000231:	c9                   	leave  
10000232:	c3                   	ret    

10000233 <strncpyxx(char*, char const*, unsigned long)>:
10000233:	55                   	push   ebp
10000234:	89 e5                	mov    ebp,esp
10000236:	83 ec 10             	sub    esp,0x10
10000239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000242:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000245:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000249:	74 23                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000024b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000024e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000251:	8d 42 01             	lea    eax,[edx+0x1]
10000254:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000025a:	8d 48 01             	lea    ecx,[eax+0x1]
1000025d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
10000260:	8a 12                	mov    dl,BYTE PTR [edx]
10000262:	88 10                	mov    BYTE PTR [eax],dl
10000264:	8a 00                	mov    al,BYTE PTR [eax]
10000266:	84 c0                	test   al,al
10000268:	74 04                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000026a:	b0 01                	mov    al,0x1
1000026c:	eb 02                	jmp    10000270 <strncpyxx(char*, char const*, unsigned long)+0x3d>
1000026e:	b0 00                	mov    al,0x0
10000270:	84 c0                	test   al,al
10000272:	74 02                	je     10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000274:	eb cf                	jmp    10000245 <strncpyxx(char*, char const*, unsigned long)+0x12>
10000276:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000279:	8d 50 ff             	lea    edx,[eax-0x1]
1000027c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
1000027f:	85 c0                	test   eax,eax
10000281:	0f 95 c0             	setne  al
10000284:	84 c0                	test   al,al
10000286:	74 0b                	je     10000293 <strncpyxx(char*, char const*, unsigned long)+0x60>
10000288:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000028b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000028e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000291:	eb e3                	jmp    10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000296:	c9                   	leave  
10000297:	c3                   	ret    

10000298 <strcmp>:
10000298:	55                   	push   ebp
10000299:	89 e5                	mov    ebp,esp
1000029b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029e:	8a 10                	mov    dl,BYTE PTR [eax]
100002a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a3:	8a 00                	mov    al,BYTE PTR [eax]
100002a5:	38 c2                	cmp    dl,al
100002a7:	75 20                	jne    100002c9 <strcmp+0x31>
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	8d 50 01             	lea    edx,[eax+0x1]
100002af:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
100002b2:	8a 00                	mov    al,BYTE PTR [eax]
100002b4:	84 c0                	test   al,al
100002b6:	0f 94 c0             	sete   al
100002b9:	84 c0                	test   al,al
100002bb:	74 07                	je     100002c4 <strcmp+0x2c>
100002bd:	b8 00 00 00 00       	mov    eax,0x0
100002c2:	eb 19                	jmp    100002dd <strcmp+0x45>
100002c4:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100002c7:	eb d2                	jmp    1000029b <strcmp+0x3>
100002c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002cc:	8a 00                	mov    al,BYTE PTR [eax]
100002ce:	0f b6 d0             	movzx  edx,al
100002d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002d4:	8a 00                	mov    al,BYTE PTR [eax]
100002d6:	0f b6 c0             	movzx  eax,al
100002d9:	29 c2                	sub    edx,eax
100002db:	89 d0                	mov    eax,edx
100002dd:	5d                   	pop    ebp
100002de:	c3                   	ret    

100002df <strchr(char const*, int)>:
100002df:	55                   	push   ebp
100002e0:	89 e5                	mov    ebp,esp
100002e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e5:	8a 00                	mov    al,BYTE PTR [eax]
100002e7:	84 c0                	test   al,al
100002e9:	74 16                	je     10000301 <strchr(char const*, int)+0x22>
100002eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ee:	8a 00                	mov    al,BYTE PTR [eax]
100002f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002f3:	38 d0                	cmp    al,dl
100002f5:	75 05                	jne    100002fc <strchr(char const*, int)+0x1d>
100002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fa:	eb 0a                	jmp    10000306 <strchr(char const*, int)+0x27>
100002fc:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
100002ff:	eb e1                	jmp    100002e2 <strchr(char const*, int)+0x3>
10000301:	b8 00 00 00 00       	mov    eax,0x0
10000306:	5d                   	pop    ebp
10000307:	c3                   	ret    

10000308 <strncmp>:
10000308:	55                   	push   ebp
10000309:	89 e5                	mov    ebp,esp
1000030b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000030e:	8d 50 ff             	lea    edx,[eax-0x1]
10000311:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000314:	85 c0                	test   eax,eax
10000316:	74 12                	je     1000032a <strncmp+0x22>
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	8a 10                	mov    dl,BYTE PTR [eax]
1000031d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000320:	8a 00                	mov    al,BYTE PTR [eax]
10000322:	38 c2                	cmp    dl,al
10000324:	75 04                	jne    1000032a <strncmp+0x22>
10000326:	b0 01                	mov    al,0x1
10000328:	eb 02                	jmp    1000032c <strncmp+0x24>
1000032a:	b0 00                	mov    al,0x0
1000032c:	84 c0                	test   al,al
1000032e:	74 20                	je     10000350 <strncmp+0x48>
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8d 50 01             	lea    edx,[eax+0x1]
10000336:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
10000339:	8a 00                	mov    al,BYTE PTR [eax]
1000033b:	84 c0                	test   al,al
1000033d:	0f 94 c0             	sete   al
10000340:	84 c0                	test   al,al
10000342:	74 07                	je     1000034b <strncmp+0x43>
10000344:	b8 00 00 00 00       	mov    eax,0x0
10000349:	eb 19                	jmp    10000364 <strncmp+0x5c>
1000034b:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000034e:	eb bb                	jmp    1000030b <strncmp+0x3>
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8a 00                	mov    al,BYTE PTR [eax]
10000355:	0f b6 d0             	movzx  edx,al
10000358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000035b:	8a 00                	mov    al,BYTE PTR [eax]
1000035d:	0f b6 c0             	movzx  eax,al
10000360:	29 c2                	sub    edx,eax
10000362:	89 d0                	mov    eax,edx
10000364:	5d                   	pop    ebp
10000365:	c3                   	ret    

10000366 <strcat>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 10             	sub    esp,0x10
1000036c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000372:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000375:	8d 50 01             	lea    edx,[eax+0x1]
10000378:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000037b:	8a 00                	mov    al,BYTE PTR [eax]
1000037d:	84 c0                	test   al,al
1000037f:	0f 95 c0             	setne  al
10000382:	84 c0                	test   al,al
10000384:	74 02                	je     10000388 <strcat+0x22>
10000386:	eb ea                	jmp    10000372 <strcat+0xc>
10000388:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
1000038b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000038e:	8d 42 01             	lea    eax,[edx+0x1]
10000391:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000394:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000397:	8d 48 01             	lea    ecx,[eax+0x1]
1000039a:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
1000039d:	8a 12                	mov    dl,BYTE PTR [edx]
1000039f:	88 10                	mov    BYTE PTR [eax],dl
100003a1:	8a 00                	mov    al,BYTE PTR [eax]
100003a3:	84 c0                	test   al,al
100003a5:	0f 95 c0             	setne  al
100003a8:	84 c0                	test   al,al
100003aa:	74 02                	je     100003ae <strcat+0x48>
100003ac:	eb dd                	jmp    1000038b <strcat+0x25>
100003ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b1:	c9                   	leave  
100003b2:	c3                   	ret    

100003b3 <strncat(char*, char const*, unsigned long)>:
100003b3:	55                   	push   ebp
100003b4:	89 e5                	mov    ebp,esp
100003b6:	83 ec 10             	sub    esp,0x10
100003b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100003bd:	74 5c                	je     1000041b <strncat(char*, char const*, unsigned long)+0x68>
100003bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003c8:	8d 50 01             	lea    edx,[eax+0x1]
100003cb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100003ce:	8a 00                	mov    al,BYTE PTR [eax]
100003d0:	84 c0                	test   al,al
100003d2:	0f 95 c0             	setne  al
100003d5:	84 c0                	test   al,al
100003d7:	74 02                	je     100003db <strncat(char*, char const*, unsigned long)+0x28>
100003d9:	eb ea                	jmp    100003c5 <strncat(char*, char const*, unsigned long)+0x12>
100003db:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100003de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e1:	8d 42 01             	lea    eax,[edx+0x1]
100003e4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100003e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003ea:	8d 48 01             	lea    ecx,[eax+0x1]
100003ed:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
100003f0:	8a 12                	mov    dl,BYTE PTR [edx]
100003f2:	88 10                	mov    BYTE PTR [eax],dl
100003f4:	8a 00                	mov    al,BYTE PTR [eax]
100003f6:	84 c0                	test   al,al
100003f8:	74 0d                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
100003fa:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100003fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000401:	74 04                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
10000403:	b0 01                	mov    al,0x1
10000405:	eb 02                	jmp    10000409 <strncat(char*, char const*, unsigned long)+0x56>
10000407:	b0 00                	mov    al,0x0
10000409:	84 c0                	test   al,al
1000040b:	74 02                	je     1000040f <strncat(char*, char const*, unsigned long)+0x5c>
1000040d:	eb cf                	jmp    100003de <strncat(char*, char const*, unsigned long)+0x2b>
1000040f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000413:	75 06                	jne    1000041b <strncat(char*, char const*, unsigned long)+0x68>
10000415:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000418:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000041b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041e:	c9                   	leave  
1000041f:	c3                   	ret    

10000420 <strstr(char*, char*)>:
10000420:	55                   	push   ebp
10000421:	89 e5                	mov    ebp,esp
10000423:	83 ec 10             	sub    esp,0x10
10000426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000429:	e8 fc ff ff ff       	call   1000042a <strstr(char*, char*)+0xa>	1000042a: R_386_PC32	strlen
1000042e:	83 c4 04             	add    esp,0x4
10000431:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000434:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
10000438:	75 05                	jne    1000043f <strstr(char*, char*)+0x1f>
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	eb 3f                	jmp    1000047e <strstr(char*, char*)+0x5e>
1000043f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000442:	50                   	push   eax
10000443:	e8 fc ff ff ff       	call   10000444 <strstr(char*, char*)+0x24>	10000444: R_386_PC32	strlen
10000448:	83 c4 04             	add    esp,0x4
1000044b:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
1000044e:	77 29                	ja     10000479 <strstr(char*, char*)+0x59>
10000450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000453:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
10000456:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000459:	50                   	push   eax
1000045a:	e8 fc ff ff ff       	call   1000045b <strstr(char*, char*)+0x3b>	1000045b: R_386_PC32	memcmp(void*, void*, unsigned long)
1000045f:	83 c4 0c             	add    esp,0xc
10000462:	85 c0                	test   eax,eax
10000464:	0f 94 c0             	sete   al
10000467:	84 c0                	test   al,al
10000469:	74 05                	je     10000470 <strstr(char*, char*)+0x50>
1000046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000046e:	eb 0e                	jmp    1000047e <strstr(char*, char*)+0x5e>
10000470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000473:	40                   	inc    eax
10000474:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000477:	eb c6                	jmp    1000043f <strstr(char*, char*)+0x1f>
10000479:	b8 00 00 00 00       	mov    eax,0x0
1000047e:	c9                   	leave  
1000047f:	c3                   	ret    

10000480 <rmtree(char*)>:
10000480:	55                   	push   ebp
10000481:	89 e5                	mov    ebp,esp
10000483:	53                   	push   ebx
10000484:	81 ec 64 02 00 00    	sub    esp,0x264
1000048a:	68 2c 01 00 00       	push   0x12c
1000048f:	6a 00                	push   0x0
10000491:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000497:	50                   	push   eax
10000498:	e8 fc ff ff ff       	call   10000499 <rmtree(char*)+0x19>	10000499: R_386_PC32	memset
1000049d:	83 c4 0c             	add    esp,0xc
100004a0:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
100004a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100004a9:	83 ec 0c             	sub    esp,0xc
100004ac:	68 14 01 00 00       	push   0x114
100004b1:	e8 fc ff ff ff       	call   100004b2 <rmtree(char*)+0x32>	100004b2: R_386_PC32	operator new(unsigned long)
100004b6:	83 c4 10             	add    esp,0x10
100004b9:	89 c3                	mov    ebx,eax
100004bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
100004c0:	8b 00                	mov    eax,DWORD PTR [eax]
100004c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
100004c5:	83 ec 04             	sub    esp,0x4
100004c8:	50                   	push   eax
100004c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004cc:	53                   	push   ebx
100004cd:	e8 fc ff ff ff       	call   100004ce <rmtree(char*)+0x4e>	100004ce: R_386_PC32	Directory::Directory(char const*, Process*)
100004d2:	83 c4 10             	add    esp,0x10
100004d5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
100004d8:	83 ec 0c             	sub    esp,0xc
100004db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004de:	e8 fc ff ff ff       	call   100004df <rmtree(char*)+0x5f>	100004df: R_386_PC32	Directory::open()
100004e3:	83 c4 10             	add    esp,0x10
100004e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004e9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100004ed:	74 24                	je     10000513 <rmtree(char*)+0x93>
100004ef:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004f3:	0f 84 8b 01 00 00    	je     10000684 <rmtree(char*)+0x204>
100004f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004fc:	8b 00                	mov    eax,DWORD PTR [eax]
100004fe:	83 c0 08             	add    eax,0x8
10000501:	8b 00                	mov    eax,DWORD PTR [eax]
10000503:	83 ec 0c             	sub    esp,0xc
10000506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000509:	ff d0                	call   eax
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	e9 72 01 00 00       	jmp    10000685 <rmtree(char*)+0x205>
10000513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000516:	8b 00                	mov    eax,DWORD PTR [eax]
10000518:	83 c0 0c             	add    eax,0xc
1000051b:	8b 00                	mov    eax,DWORD PTR [eax]
1000051d:	83 ec 0c             	sub    esp,0xc
10000520:	8d 95 a4 fd ff ff    	lea    edx,[ebp-0x25c]
10000526:	52                   	push   edx
10000527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000052a:	6a 00                	push   0x0
1000052c:	68 10 01 00 00       	push   0x110
10000531:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000534:	ff d0                	call   eax
10000536:	83 c4 20             	add    esp,0x20
10000539:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
1000053c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000540:	0f 85 04 01 00 00    	jne    1000064a <rmtree(char*)+0x1ca>
10000546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000549:	83 c0 10             	add    eax,0x10
1000054c:	83 ec 08             	sub    esp,0x8
1000054f:	68 38 9a 00 10       	push   0x10009a38	10000550: R_386_32	.text
10000554:	50                   	push   eax
10000555:	e8 fc ff ff ff       	call   10000556 <rmtree(char*)+0xd6>	10000556: R_386_PC32	strcmp
1000055a:	83 c4 10             	add    esp,0x10
1000055d:	85 c0                	test   eax,eax
1000055f:	74 b2                	je     10000513 <rmtree(char*)+0x93>
10000561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000564:	83 c0 10             	add    eax,0x10
10000567:	83 ec 08             	sub    esp,0x8
1000056a:	68 3a 9a 00 10       	push   0x10009a3a	1000056b: R_386_32	.text
1000056f:	50                   	push   eax
10000570:	e8 fc ff ff ff       	call   10000571 <rmtree(char*)+0xf1>	10000571: R_386_PC32	strcmp
10000575:	83 c4 10             	add    esp,0x10
10000578:	85 c0                	test   eax,eax
1000057a:	74 97                	je     10000513 <rmtree(char*)+0x93>
1000057c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000057f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000582:	83 e0 02             	and    eax,0x2
10000585:	85 c0                	test   eax,eax
10000587:	74 17                	je     100005a0 <rmtree(char*)+0x120>
10000589:	83 ec 0c             	sub    esp,0xc
1000058c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000592:	50                   	push   eax
10000593:	e8 fc ff ff ff       	call   10000594 <rmtree(char*)+0x114>	10000594: R_386_PC32	rmtree(char*)
10000598:	83 c4 10             	add    esp,0x10
1000059b:	e9 73 ff ff ff       	jmp    10000513 <rmtree(char*)+0x93>
100005a0:	83 ec 08             	sub    esp,0x8
100005a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005a6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005ac:	50                   	push   eax
100005ad:	e8 fc ff ff ff       	call   100005ae <rmtree(char*)+0x12e>	100005ae: R_386_PC32	strcpy
100005b2:	83 c4 10             	add    esp,0x10
100005b5:	83 ec 08             	sub    esp,0x8
100005b8:	68 3d 9a 00 10       	push   0x10009a3d	100005b9: R_386_32	.text
100005bd:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005c3:	50                   	push   eax
100005c4:	e8 fc ff ff ff       	call   100005c5 <rmtree(char*)+0x145>	100005c5: R_386_PC32	strcat
100005c9:	83 c4 10             	add    esp,0x10
100005cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100005cf:	83 c0 10             	add    eax,0x10
100005d2:	83 ec 08             	sub    esp,0x8
100005d5:	50                   	push   eax
100005d6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005dc:	50                   	push   eax
100005dd:	e8 fc ff ff ff       	call   100005de <rmtree(char*)+0x15e>	100005de: R_386_PC32	strcat
100005e2:	83 c4 10             	add    esp,0x10
100005e5:	83 ec 0c             	sub    esp,0xc
100005e8:	68 14 01 00 00       	push   0x114
100005ed:	e8 fc ff ff ff       	call   100005ee <rmtree(char*)+0x16e>	100005ee: R_386_PC32	operator new(unsigned long)
100005f2:	83 c4 10             	add    esp,0x10
100005f5:	89 c3                	mov    ebx,eax
100005f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
100005fc:	8b 00                	mov    eax,DWORD PTR [eax]
100005fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000601:	83 ec 04             	sub    esp,0x4
10000604:	50                   	push   eax
10000605:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
1000060b:	50                   	push   eax
1000060c:	53                   	push   ebx
1000060d:	e8 fc ff ff ff       	call   1000060e <rmtree(char*)+0x18e>	1000060e: R_386_PC32	File::File(char const*, Process*)
10000612:	83 c4 10             	add    esp,0x10
10000615:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000618:	83 ec 0c             	sub    esp,0xc
1000061b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000061e:	e8 fc ff ff ff       	call   1000061f <rmtree(char*)+0x19f>	1000061f: R_386_PC32	File::unlink()
10000623:	83 c4 10             	add    esp,0x10
10000626:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000062a:	0f 84 e3 fe ff ff    	je     10000513 <rmtree(char*)+0x93>
10000630:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000633:	8b 00                	mov    eax,DWORD PTR [eax]
10000635:	83 c0 08             	add    eax,0x8
10000638:	8b 00                	mov    eax,DWORD PTR [eax]
1000063a:	83 ec 0c             	sub    esp,0xc
1000063d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000640:	ff d0                	call   eax
10000642:	83 c4 10             	add    esp,0x10
10000645:	e9 c9 fe ff ff       	jmp    10000513 <rmtree(char*)+0x93>
1000064a:	90                   	nop
1000064b:	83 ec 0c             	sub    esp,0xc
1000064e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000651:	e8 fc ff ff ff       	call   10000652 <rmtree(char*)+0x1d2>	10000652: R_386_PC32	Directory::close()
10000656:	83 c4 10             	add    esp,0x10
10000659:	83 ec 0c             	sub    esp,0xc
1000065c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000065f:	e8 fc ff ff ff       	call   10000660 <rmtree(char*)+0x1e0>	10000660: R_386_PC32	Directory::unlink()
10000664:	83 c4 10             	add    esp,0x10
10000667:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000066b:	74 18                	je     10000685 <rmtree(char*)+0x205>
1000066d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000670:	8b 00                	mov    eax,DWORD PTR [eax]
10000672:	83 c0 08             	add    eax,0x8
10000675:	8b 00                	mov    eax,DWORD PTR [eax]
10000677:	83 ec 0c             	sub    esp,0xc
1000067a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000067d:	ff d0                	call   eax
1000067f:	83 c4 10             	add    esp,0x10
10000682:	eb 01                	jmp    10000685 <rmtree(char*)+0x205>
10000684:	90                   	nop
10000685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000688:	c9                   	leave  
10000689:	c3                   	ret    

1000068a <mkdir(char const*, int)>:
1000068a:	55                   	push   ebp
1000068b:	89 e5                	mov    ebp,esp
1000068d:	53                   	push   ebx
1000068e:	83 ec 14             	sub    esp,0x14
10000691:	83 ec 0c             	sub    esp,0xc
10000694:	68 14 01 00 00       	push   0x114
10000699:	e8 fc ff ff ff       	call   1000069a <mkdir(char const*, int)+0x10>	1000069a: R_386_PC32	operator new(unsigned long)
1000069e:	83 c4 10             	add    esp,0x10
100006a1:	89 c3                	mov    ebx,eax
100006a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100006a4: R_386_32	kernelProcess
100006a8:	83 ec 04             	sub    esp,0x4
100006ab:	50                   	push   eax
100006ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006af:	53                   	push   ebx
100006b0:	e8 fc ff ff ff       	call   100006b1 <mkdir(char const*, int)+0x27>	100006b1: R_386_PC32	Directory::Directory(char const*, Process*)
100006b5:	83 c4 10             	add    esp,0x10
100006b8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100006bb:	83 ec 0c             	sub    esp,0xc
100006be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006c1:	e8 fc ff ff ff       	call   100006c2 <mkdir(char const*, int)+0x38>	100006c2: R_386_PC32	Directory::create()
100006c6:	83 c4 10             	add    esp,0x10
100006c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100006cd:	74 15                	je     100006e4 <mkdir(char const*, int)+0x5a>
100006cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100006d2:	8b 00                	mov    eax,DWORD PTR [eax]
100006d4:	83 c0 08             	add    eax,0x8
100006d7:	8b 00                	mov    eax,DWORD PTR [eax]
100006d9:	83 ec 0c             	sub    esp,0xc
100006dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006df:	ff d0                	call   eax
100006e1:	83 c4 10             	add    esp,0x10
100006e4:	b8 00 00 00 00       	mov    eax,0x0
100006e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100006ec:	c9                   	leave  
100006ed:	c3                   	ret    

100006ee <copytree(char*, char*)>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	53                   	push   ebx
100006f2:	81 ec 54 01 00 00    	sub    esp,0x154
100006f8:	83 ec 0c             	sub    esp,0xc
100006fb:	68 90 01 00 00       	push   0x190
10000700:	e8 fc ff ff ff       	call   10000701 <copytree(char*, char*)+0x13>	10000701: R_386_PC32	malloc
10000705:	83 c4 10             	add    esp,0x10
10000708:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000070b:	83 ec 0c             	sub    esp,0xc
1000070e:	68 90 01 00 00       	push   0x190
10000713:	e8 fc ff ff ff       	call   10000714 <copytree(char*, char*)+0x26>	10000714: R_386_PC32	malloc
10000718:	83 c4 10             	add    esp,0x10
1000071b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000071e:	83 ec 04             	sub    esp,0x4
10000721:	68 90 01 00 00       	push   0x190
10000726:	6a 00                	push   0x0
10000728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000072b:	e8 fc ff ff ff       	call   1000072c <copytree(char*, char*)+0x3e>	1000072c: R_386_PC32	memset
10000730:	83 c4 10             	add    esp,0x10
10000733:	83 ec 04             	sub    esp,0x4
10000736:	68 90 01 00 00       	push   0x190
1000073b:	6a 00                	push   0x0
1000073d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000740:	e8 fc ff ff ff       	call   10000741 <copytree(char*, char*)+0x53>	10000741: R_386_PC32	memset
10000745:	83 c4 10             	add    esp,0x10
10000748:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000074e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000751:	83 ec 0c             	sub    esp,0xc
10000754:	68 14 01 00 00       	push   0x114
10000759:	e8 fc ff ff ff       	call   1000075a <copytree(char*, char*)+0x6c>	1000075a: R_386_PC32	operator new(unsigned long)
1000075e:	83 c4 10             	add    esp,0x10
10000761:	89 c3                	mov    ebx,eax
10000763:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000768:	8b 00                	mov    eax,DWORD PTR [eax]
1000076a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000076d:	83 ec 04             	sub    esp,0x4
10000770:	50                   	push   eax
10000771:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000774:	53                   	push   ebx
10000775:	e8 fc ff ff ff       	call   10000776 <copytree(char*, char*)+0x88>	10000776: R_386_PC32	Directory::Directory(char const*, Process*)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000780:	83 ec 0c             	sub    esp,0xc
10000783:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000786:	e8 fc ff ff ff       	call   10000787 <copytree(char*, char*)+0x99>	10000787: R_386_PC32	Directory::open()
1000078b:	83 c4 10             	add    esp,0x10
1000078e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000791:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10000795:	74 34                	je     100007cb <copytree(char*, char*)+0xdd>
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	68 3f 9a 00 10       	push   0x10009a3f	1000079b: R_386_32	.text
1000079f:	e8 fc ff ff ff       	call   100007a0 <copytree(char*, char*)+0xb2>	100007a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100007a4:	83 c4 10             	add    esp,0x10
100007a7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
100007ab:	0f 84 90 03 00 00    	je     10000b41 <copytree(char*, char*)+0x453>
100007b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007b4:	8b 00                	mov    eax,DWORD PTR [eax]
100007b6:	83 c0 08             	add    eax,0x8
100007b9:	8b 00                	mov    eax,DWORD PTR [eax]
100007bb:	83 ec 0c             	sub    esp,0xc
100007be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007c1:	ff d0                	call   eax
100007c3:	83 c4 10             	add    esp,0x10
100007c6:	e9 76 03 00 00       	jmp    10000b41 <copytree(char*, char*)+0x453>
100007cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007ce:	8b 00                	mov    eax,DWORD PTR [eax]
100007d0:	83 c0 0c             	add    eax,0xc
100007d3:	8b 00                	mov    eax,DWORD PTR [eax]
100007d5:	83 ec 0c             	sub    esp,0xc
100007d8:	8d 95 b8 fe ff ff    	lea    edx,[ebp-0x148]
100007de:	52                   	push   edx
100007df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100007e2:	6a 00                	push   0x0
100007e4:	68 10 01 00 00       	push   0x110
100007e9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007ec:	ff d0                	call   eax
100007ee:	83 c4 20             	add    esp,0x20
100007f1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007f4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100007f8:	0f 85 fb 02 00 00    	jne    10000af9 <copytree(char*, char*)+0x40b>
100007fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000801:	83 c0 10             	add    eax,0x10
10000804:	83 ec 08             	sub    esp,0x8
10000807:	68 38 9a 00 10       	push   0x10009a38	10000808: R_386_32	.text
1000080c:	50                   	push   eax
1000080d:	e8 fc ff ff ff       	call   1000080e <copytree(char*, char*)+0x120>	1000080e: R_386_PC32	strcmp
10000812:	83 c4 10             	add    esp,0x10
10000815:	85 c0                	test   eax,eax
10000817:	74 b2                	je     100007cb <copytree(char*, char*)+0xdd>
10000819:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000081c:	83 c0 10             	add    eax,0x10
1000081f:	83 ec 08             	sub    esp,0x8
10000822:	68 3a 9a 00 10       	push   0x10009a3a	10000823: R_386_32	.text
10000827:	50                   	push   eax
10000828:	e8 fc ff ff ff       	call   10000829 <copytree(char*, char*)+0x13b>	10000829: R_386_PC32	strcmp
1000082d:	83 c4 10             	add    esp,0x10
10000830:	85 c0                	test   eax,eax
10000832:	74 97                	je     100007cb <copytree(char*, char*)+0xdd>
10000834:	83 ec 08             	sub    esp,0x8
10000837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000083d:	e8 fc ff ff ff       	call   1000083e <copytree(char*, char*)+0x150>	1000083e: R_386_PC32	strcpy
10000842:	83 c4 10             	add    esp,0x10
10000845:	83 ec 08             	sub    esp,0x8
10000848:	68 3d 9a 00 10       	push   0x10009a3d	10000849: R_386_32	.text
1000084d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000850:	e8 fc ff ff ff       	call   10000851 <copytree(char*, char*)+0x163>	10000851: R_386_PC32	strcat
10000855:	83 c4 10             	add    esp,0x10
10000858:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000085b:	83 c0 10             	add    eax,0x10
1000085e:	83 ec 08             	sub    esp,0x8
10000861:	50                   	push   eax
10000862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000865:	e8 fc ff ff ff       	call   10000866 <copytree(char*, char*)+0x178>	10000866: R_386_PC32	strcat
1000086a:	83 c4 10             	add    esp,0x10
1000086d:	83 ec 08             	sub    esp,0x8
10000870:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000873:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000876:	e8 fc ff ff ff       	call   10000877 <copytree(char*, char*)+0x189>	10000877: R_386_PC32	strcpy
1000087b:	83 c4 10             	add    esp,0x10
1000087e:	83 ec 08             	sub    esp,0x8
10000881:	68 3d 9a 00 10       	push   0x10009a3d	10000882: R_386_32	.text
10000886:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000889:	e8 fc ff ff ff       	call   1000088a <copytree(char*, char*)+0x19c>	1000088a: R_386_PC32	strcat
1000088e:	83 c4 10             	add    esp,0x10
10000891:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000894:	83 c0 10             	add    eax,0x10
10000897:	83 ec 08             	sub    esp,0x8
1000089a:	50                   	push   eax
1000089b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000089e:	e8 fc ff ff ff       	call   1000089f <copytree(char*, char*)+0x1b1>	1000089f: R_386_PC32	strcat
100008a3:	83 c4 10             	add    esp,0x10
100008a6:	83 ec 04             	sub    esp,0x4
100008a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100008af:	68 59 9a 00 10       	push   0x10009a59	100008b0: R_386_32	.text
100008b4:	e8 fc ff ff ff       	call   100008b5 <copytree(char*, char*)+0x1c7>	100008b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100008b9:	83 c4 10             	add    esp,0x10
100008bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100008bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100008c2:	83 e0 02             	and    eax,0x2
100008c5:	85 c0                	test   eax,eax
100008c7:	74 47                	je     10000910 <copytree(char*, char*)+0x222>
100008c9:	83 ec 08             	sub    esp,0x8
100008cc:	68 c0 01 00 00       	push   0x1c0
100008d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008d4:	e8 fc ff ff ff       	call   100008d5 <copytree(char*, char*)+0x1e7>	100008d5: R_386_PC32	mkdir(char const*, int)
100008d9:	83 c4 10             	add    esp,0x10
100008dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100008df:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100008e3:	74 15                	je     100008fa <copytree(char*, char*)+0x20c>
100008e5:	83 ec 0c             	sub    esp,0xc
100008e8:	68 63 9a 00 10       	push   0x10009a63	100008e9: R_386_32	.text
100008ed:	e8 fc ff ff ff       	call   100008ee <copytree(char*, char*)+0x200>	100008ee: R_386_PC32	KePanic(char const*)
100008f2:	83 c4 10             	add    esp,0x10
100008f5:	e9 d1 fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
100008fa:	83 ec 08             	sub    esp,0x8
100008fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000903:	e8 fc ff ff ff       	call   10000904 <copytree(char*, char*)+0x216>	10000904: R_386_PC32	copytree(char*, char*)
10000908:	83 c4 10             	add    esp,0x10
1000090b:	e9 bb fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000910:	83 ec 0c             	sub    esp,0xc
10000913:	68 14 01 00 00       	push   0x114
10000918:	e8 fc ff ff ff       	call   10000919 <copytree(char*, char*)+0x22b>	10000919: R_386_PC32	operator new(unsigned long)
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 c3                	mov    ebx,eax
10000922:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000927:	8b 00                	mov    eax,DWORD PTR [eax]
10000929:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000092c:	83 ec 04             	sub    esp,0x4
1000092f:	50                   	push   eax
10000930:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000933:	53                   	push   ebx
10000934:	e8 fc ff ff ff       	call   10000935 <copytree(char*, char*)+0x247>	10000935: R_386_PC32	File::File(char const*, Process*)
10000939:	83 c4 10             	add    esp,0x10
1000093c:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000093f:	83 ec 08             	sub    esp,0x8
10000942:	6a 01                	push   0x1
10000944:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000947:	e8 fc ff ff ff       	call   10000948 <copytree(char*, char*)+0x25a>	10000948: R_386_PC32	File::open(FileOpenMode)
1000094c:	83 c4 10             	add    esp,0x10
1000094f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000953:	75 15                	jne    1000096a <copytree(char*, char*)+0x27c>
10000955:	83 ec 0c             	sub    esp,0xc
10000958:	68 74 9a 00 10       	push   0x10009a74	10000959: R_386_32	.text
1000095d:	e8 fc ff ff ff       	call   1000095e <copytree(char*, char*)+0x270>	1000095e: R_386_PC32	KePanic(char const*)
10000962:	83 c4 10             	add    esp,0x10
10000965:	e9 8a 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
1000096a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000096e:	0f 84 57 fe ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000974:	83 ec 0c             	sub    esp,0xc
10000977:	68 14 01 00 00       	push   0x114
1000097c:	e8 fc ff ff ff       	call   1000097d <copytree(char*, char*)+0x28f>	1000097d: R_386_PC32	operator new(unsigned long)
10000981:	83 c4 10             	add    esp,0x10
10000984:	89 c3                	mov    ebx,eax
10000986:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000098b:	8b 00                	mov    eax,DWORD PTR [eax]
1000098d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000990:	83 ec 04             	sub    esp,0x4
10000993:	50                   	push   eax
10000994:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000997:	53                   	push   ebx
10000998:	e8 fc ff ff ff       	call   10000999 <copytree(char*, char*)+0x2ab>	10000999: R_386_PC32	File::File(char const*, Process*)
1000099d:	83 c4 10             	add    esp,0x10
100009a0:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
100009a3:	83 ec 08             	sub    esp,0x8
100009a6:	6a 12                	push   0x12
100009a8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009ab:	e8 fc ff ff ff       	call   100009ac <copytree(char*, char*)+0x2be>	100009ac: R_386_PC32	File::open(FileOpenMode)
100009b0:	83 c4 10             	add    esp,0x10
100009b3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
100009b7:	75 23                	jne    100009dc <copytree(char*, char*)+0x2ee>
100009b9:	83 ec 0c             	sub    esp,0xc
100009bc:	68 74 9a 00 10       	push   0x10009a74	100009bd: R_386_32	.text
100009c1:	e8 fc ff ff ff       	call   100009c2 <copytree(char*, char*)+0x2d4>	100009c2: R_386_PC32	KePanic(char const*)
100009c6:	83 c4 10             	add    esp,0x10
100009c9:	83 ec 0c             	sub    esp,0xc
100009cc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009cf:	e8 fc ff ff ff       	call   100009d0 <copytree(char*, char*)+0x2e2>	100009d0: R_386_PC32	File::close()
100009d4:	83 c4 10             	add    esp,0x10
100009d7:	e9 18 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
100009dc:	83 ec 0c             	sub    esp,0xc
100009df:	68 00 10 00 00       	push   0x1000
100009e4:	e8 fc ff ff ff       	call   100009e5 <copytree(char*, char*)+0x2f7>	100009e5: R_386_PC32	malloc
100009e9:	83 c4 10             	add    esp,0x10
100009ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100009ef:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
100009f3:	75 31                	jne    10000a26 <copytree(char*, char*)+0x338>
100009f5:	83 ec 0c             	sub    esp,0xc
100009f8:	68 83 9a 00 10       	push   0x10009a83	100009f9: R_386_32	.text
100009fd:	e8 fc ff ff ff       	call   100009fe <copytree(char*, char*)+0x310>	100009fe: R_386_PC32	KePanic(char const*)
10000a02:	83 c4 10             	add    esp,0x10
10000a05:	83 ec 0c             	sub    esp,0xc
10000a08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000a0b:	e8 fc ff ff ff       	call   10000a0c <copytree(char*, char*)+0x31e>	10000a0c: R_386_PC32	free
10000a10:	83 c4 10             	add    esp,0x10
10000a13:	83 ec 0c             	sub    esp,0xc
10000a16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000a19:	e8 fc ff ff ff       	call   10000a1a <copytree(char*, char*)+0x32c>	10000a1a: R_386_PC32	free
10000a1e:	83 c4 10             	add    esp,0x10
10000a21:	e9 1c 01 00 00       	jmp    10000b42 <copytree(char*, char*)+0x454>
10000a26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000a29:	8b 00                	mov    eax,DWORD PTR [eax]
10000a2b:	83 c0 0c             	add    eax,0xc
10000a2e:	8b 00                	mov    eax,DWORD PTR [eax]
10000a30:	83 ec 0c             	sub    esp,0xc
10000a33:	8d 95 b4 fe ff ff    	lea    edx,[ebp-0x14c]
10000a39:	52                   	push   edx
10000a3a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a3d:	6a 00                	push   0x0
10000a3f:	68 00 10 00 00       	push   0x1000
10000a44:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000a47:	ff d0                	call   eax
10000a49:	83 c4 20             	add    esp,0x20
10000a4c:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a4f:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000a53:	75 37                	jne    10000a8c <copytree(char*, char*)+0x39e>
10000a55:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a58:	8b 00                	mov    eax,DWORD PTR [eax]
10000a5a:	83 c0 10             	add    eax,0x10
10000a5d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a5f:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a65:	99                   	cdq    
10000a66:	83 ec 0c             	sub    esp,0xc
10000a69:	8d 9d b0 fe ff ff    	lea    ebx,[ebp-0x150]
10000a6f:	53                   	push   ebx
10000a70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a73:	52                   	push   edx
10000a74:	50                   	push   eax
10000a75:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a78:	ff d1                	call   ecx
10000a7a:	83 c4 20             	add    esp,0x20
10000a7d:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a83:	3d 00 10 00 00       	cmp    eax,0x1000
10000a88:	75 05                	jne    10000a8f <copytree(char*, char*)+0x3a1>
10000a8a:	eb 9a                	jmp    10000a26 <copytree(char*, char*)+0x338>
10000a8c:	90                   	nop
10000a8d:	eb 01                	jmp    10000a90 <copytree(char*, char*)+0x3a2>
10000a8f:	90                   	nop
10000a90:	83 ec 0c             	sub    esp,0xc
10000a93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a96:	e8 fc ff ff ff       	call   10000a97 <copytree(char*, char*)+0x3a9>	10000a97: R_386_PC32	free
10000a9b:	83 c4 10             	add    esp,0x10
10000a9e:	83 ec 0c             	sub    esp,0xc
10000aa1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000aa4:	e8 fc ff ff ff       	call   10000aa5 <copytree(char*, char*)+0x3b7>	10000aa5: R_386_PC32	File::close()
10000aa9:	83 c4 10             	add    esp,0x10
10000aac:	83 ec 0c             	sub    esp,0xc
10000aaf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <copytree(char*, char*)+0x3c5>	10000ab3: R_386_PC32	File::close()
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000abe:	74 15                	je     10000ad5 <copytree(char*, char*)+0x3e7>
10000ac0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000ac3:	8b 00                	mov    eax,DWORD PTR [eax]
10000ac5:	83 c0 08             	add    eax,0x8
10000ac8:	8b 00                	mov    eax,DWORD PTR [eax]
10000aca:	83 ec 0c             	sub    esp,0xc
10000acd:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ad0:	ff d0                	call   eax
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10000ad9:	0f 84 ec fc ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000adf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000ae2:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae4:	83 c0 08             	add    eax,0x8
10000ae7:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae9:	83 ec 0c             	sub    esp,0xc
10000aec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000aef:	ff d0                	call   eax
10000af1:	83 c4 10             	add    esp,0x10
10000af4:	e9 d2 fc ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000af9:	90                   	nop
10000afa:	83 ec 0c             	sub    esp,0xc
10000afd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000b00:	e8 fc ff ff ff       	call   10000b01 <copytree(char*, char*)+0x413>	10000b01: R_386_PC32	free
10000b05:	83 c4 10             	add    esp,0x10
10000b08:	83 ec 0c             	sub    esp,0xc
10000b0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000b0e:	e8 fc ff ff ff       	call   10000b0f <copytree(char*, char*)+0x421>	10000b0f: R_386_PC32	free
10000b13:	83 c4 10             	add    esp,0x10
10000b16:	83 ec 0c             	sub    esp,0xc
10000b19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b1c:	e8 fc ff ff ff       	call   10000b1d <copytree(char*, char*)+0x42f>	10000b1d: R_386_PC32	Directory::close()
10000b21:	83 c4 10             	add    esp,0x10
10000b24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000b28:	74 18                	je     10000b42 <copytree(char*, char*)+0x454>
10000b2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000b2d:	8b 00                	mov    eax,DWORD PTR [eax]
10000b2f:	83 c0 08             	add    eax,0x8
10000b32:	8b 00                	mov    eax,DWORD PTR [eax]
10000b34:	83 ec 0c             	sub    esp,0xc
10000b37:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b3a:	ff d0                	call   eax
10000b3c:	83 c4 10             	add    esp,0x10
10000b3f:	eb 01                	jmp    10000b42 <copytree(char*, char*)+0x454>
10000b41:	90                   	nop
10000b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000b45:	c9                   	leave  
10000b46:	c3                   	ret    

10000b47 <backupTree(char*, unsigned short)>:
10000b47:	55                   	push   ebp
10000b48:	89 e5                	mov    ebp,esp
10000b4a:	57                   	push   edi
10000b4b:	56                   	push   esi
10000b4c:	53                   	push   ebx
10000b4d:	81 ec 8c 12 00 00    	sub    esp,0x128c
10000b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000b56:	66 89 85 74 ed ff ff 	mov    WORD PTR [ebp-0x128c],ax
10000b5d:	83 ec 0c             	sub    esp,0xc
10000b60:	68 90 01 00 00       	push   0x190
10000b65:	e8 fc ff ff ff       	call   10000b66 <backupTree(char*, unsigned short)+0x1f>	10000b66: R_386_PC32	malloc
10000b6a:	83 c4 10             	add    esp,0x10
10000b6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000b70:	83 ec 04             	sub    esp,0x4
10000b73:	68 90 01 00 00       	push   0x190
10000b78:	6a 00                	push   0x0
10000b7a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000b7d:	e8 fc ff ff ff       	call   10000b7e <backupTree(char*, unsigned short)+0x37>	10000b7e: R_386_PC32	memset
10000b82:	83 c4 10             	add    esp,0x10
10000b85:	8d 85 a8 fe ff ff    	lea    eax,[ebp-0x158]
10000b8b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000b8e:	83 ec 0c             	sub    esp,0xc
10000b91:	68 14 01 00 00       	push   0x114
10000b96:	e8 fc ff ff ff       	call   10000b97 <backupTree(char*, unsigned short)+0x50>	10000b97: R_386_PC32	operator new(unsigned long)
10000b9b:	83 c4 10             	add    esp,0x10
10000b9e:	89 c3                	mov    ebx,eax
10000ba0:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ba5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000baa:	83 ec 04             	sub    esp,0x4
10000bad:	50                   	push   eax
10000bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bb1:	53                   	push   ebx
10000bb2:	e8 fc ff ff ff       	call   10000bb3 <backupTree(char*, unsigned short)+0x6c>	10000bb3: R_386_PC32	Directory::Directory(char const*, Process*)
10000bb7:	83 c4 10             	add    esp,0x10
10000bba:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000bbd:	83 ec 0c             	sub    esp,0xc
10000bc0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bc3:	e8 fc ff ff ff       	call   10000bc4 <backupTree(char*, unsigned short)+0x7d>	10000bc4: R_386_PC32	Directory::open()
10000bc8:	83 c4 10             	add    esp,0x10
10000bcb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000bce:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000bd2:	74 34                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000bd4:	83 ec 0c             	sub    esp,0xc
10000bd7:	68 3f 9a 00 10       	push   0x10009a3f	10000bd8: R_386_32	.text
10000bdc:	e8 fc ff ff ff       	call   10000bdd <backupTree(char*, unsigned short)+0x96>	10000bdd: R_386_PC32	Dbg::kprintf(char const*, ...)
10000be1:	83 c4 10             	add    esp,0x10
10000be4:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10000be8:	0f 84 c8 05 00 00    	je     100011b6 <backupTree(char*, unsigned short)+0x66f>
10000bee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000bf1:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf3:	83 c0 08             	add    eax,0x8
10000bf6:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf8:	83 ec 0c             	sub    esp,0xc
10000bfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bfe:	ff d0                	call   eax
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	e9 af 05 00 00       	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
10000c08:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c0b:	8b 00                	mov    eax,DWORD PTR [eax]
10000c0d:	83 c0 0c             	add    eax,0xc
10000c10:	8b 00                	mov    eax,DWORD PTR [eax]
10000c12:	83 ec 0c             	sub    esp,0xc
10000c15:	8d 95 a4 fe ff ff    	lea    edx,[ebp-0x15c]
10000c1b:	52                   	push   edx
10000c1c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c1f:	6a 00                	push   0x0
10000c21:	68 10 01 00 00       	push   0x110
10000c26:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c29:	ff d0                	call   eax
10000c2b:	83 c4 20             	add    esp,0x20
10000c2e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c31:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10000c35:	0f 85 41 05 00 00    	jne    1000117c <backupTree(char*, unsigned short)+0x635>
10000c3b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c3e:	83 c0 10             	add    eax,0x10
10000c41:	83 ec 08             	sub    esp,0x8
10000c44:	68 38 9a 00 10       	push   0x10009a38	10000c45: R_386_32	.text
10000c49:	50                   	push   eax
10000c4a:	e8 fc ff ff ff       	call   10000c4b <backupTree(char*, unsigned short)+0x104>	10000c4b: R_386_PC32	strcmp
10000c4f:	83 c4 10             	add    esp,0x10
10000c52:	85 c0                	test   eax,eax
10000c54:	74 b2                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c59:	83 c0 10             	add    eax,0x10
10000c5c:	83 ec 08             	sub    esp,0x8
10000c5f:	68 3a 9a 00 10       	push   0x10009a3a	10000c60: R_386_32	.text
10000c64:	50                   	push   eax
10000c65:	e8 fc ff ff ff       	call   10000c66 <backupTree(char*, unsigned short)+0x11f>	10000c66: R_386_PC32	strcmp
10000c6a:	83 c4 10             	add    esp,0x10
10000c6d:	85 c0                	test   eax,eax
10000c6f:	74 97                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c71:	83 ec 08             	sub    esp,0x8
10000c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c77:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c7a:	e8 fc ff ff ff       	call   10000c7b <backupTree(char*, unsigned short)+0x134>	10000c7b: R_386_PC32	strcpy
10000c7f:	83 c4 10             	add    esp,0x10
10000c82:	83 ec 08             	sub    esp,0x8
10000c85:	68 3d 9a 00 10       	push   0x10009a3d	10000c86: R_386_32	.text
10000c8a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c8d:	e8 fc ff ff ff       	call   10000c8e <backupTree(char*, unsigned short)+0x147>	10000c8e: R_386_PC32	strcat
10000c92:	83 c4 10             	add    esp,0x10
10000c95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c98:	83 c0 10             	add    eax,0x10
10000c9b:	83 ec 08             	sub    esp,0x8
10000c9e:	50                   	push   eax
10000c9f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ca2:	e8 fc ff ff ff       	call   10000ca3 <backupTree(char*, unsigned short)+0x15c>	10000ca3: R_386_PC32	strcat
10000ca7:	83 c4 10             	add    esp,0x10
10000caa:	66 c7 45 e6 bc ad    	mov    WORD PTR [ebp-0x1a],0xadbc
10000cb0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10000cb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000cba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cbd:	01 d0                	add    eax,edx
10000cbf:	83 c0 10             	add    eax,0x10
10000cc2:	8a 00                	mov    al,BYTE PTR [eax]
10000cc4:	84 c0                	test   al,al
10000cc6:	74 3c                	je     10000d04 <backupTree(char*, unsigned short)+0x1bd>
10000cc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000ccb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cce:	01 d0                	add    eax,edx
10000cd0:	83 c0 10             	add    eax,0x10
10000cd3:	8a 00                	mov    al,BYTE PTR [eax]
10000cd5:	66 0f be d0          	movsx  dx,al
10000cd9:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000cdd:	31 d0                	xor    eax,edx
10000cdf:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000ce3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000ce7:	c1 e0 03             	shl    eax,0x3
10000cea:	89 c2                	mov    edx,eax
10000cec:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000cf0:	c1 f8 0d             	sar    eax,0xd
10000cf3:	09 d0                	or     eax,edx
10000cf5:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000cf9:	66 81 6d e6 f1 06    	sub    WORD PTR [ebp-0x1a],0x6f1
10000cff:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10000d02:	eb b3                	jmp    10000cb7 <backupTree(char*, unsigned short)+0x170>
10000d04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000d0a:	83 e0 02             	and    eax,0x2
10000d0d:	85 c0                	test   eax,eax
10000d0f:	74 37                	je     10000d48 <backupTree(char*, unsigned short)+0x201>
10000d11:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d14:	83 c0 10             	add    eax,0x10
10000d17:	83 ec 08             	sub    esp,0x8
10000d1a:	68 8d 9a 00 10       	push   0x10009a8d	10000d1b: R_386_32	.text
10000d1f:	50                   	push   eax
10000d20:	e8 fc ff ff ff       	call   10000d21 <backupTree(char*, unsigned short)+0x1da>	10000d21: R_386_PC32	strcmp
10000d25:	83 c4 10             	add    esp,0x10
10000d28:	85 c0                	test   eax,eax
10000d2a:	0f 84 d8 fe ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d30:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000d34:	83 ec 08             	sub    esp,0x8
10000d37:	50                   	push   eax
10000d38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000d3b:	e8 fc ff ff ff       	call   10000d3c <backupTree(char*, unsigned short)+0x1f5>	10000d3c: R_386_PC32	backupTree(char*, unsigned short)
10000d40:	83 c4 10             	add    esp,0x10
10000d43:	e9 c0 fe ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d48:	c6 85 a3 fe ff ff 00 	mov    BYTE PTR [ebp-0x15d],0x0
10000d4f:	83 ec 08             	sub    esp,0x8
10000d52:	68 94 9a 00 10       	push   0x10009a94	10000d53: R_386_32	.text
10000d57:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d5d:	50                   	push   eax
10000d5e:	e8 fc ff ff ff       	call   10000d5f <backupTree(char*, unsigned short)+0x218>	10000d5f: R_386_PC32	strcpy
10000d63:	83 c4 10             	add    esp,0x10
10000d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10000d6c:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000d72:	83 ec 08             	sub    esp,0x8
10000d75:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000d7b:	50                   	push   eax
10000d7c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d82:	50                   	push   eax
10000d83:	e8 fc ff ff ff       	call   10000d84 <backupTree(char*, unsigned short)+0x23d>	10000d84: R_386_PC32	strcat
10000d88:	83 c4 10             	add    esp,0x10
10000d8b:	83 ec 04             	sub    esp,0x4
10000d8e:	6a 09                	push   0x9
10000d90:	6a 00                	push   0x0
10000d92:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000d98:	50                   	push   eax
10000d99:	e8 fc ff ff ff       	call   10000d9a <backupTree(char*, unsigned short)+0x253>	10000d9a: R_386_PC32	memset
10000d9e:	83 c4 10             	add    esp,0x10
10000da1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000da4:	83 c0 10             	add    eax,0x10
10000da7:	83 ec 04             	sub    esp,0x4
10000daa:	6a 08                	push   0x8
10000dac:	50                   	push   eax
10000dad:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000db3:	50                   	push   eax
10000db4:	e8 fc ff ff ff       	call   10000db5 <backupTree(char*, unsigned short)+0x26e>	10000db5: R_386_PC32	strncpyxx(char*, char const*, unsigned long)
10000db9:	83 c4 10             	add    esp,0x10
10000dbc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000dc3:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000dc7:	0f 8f c5 00 00 00    	jg     10000e92 <backupTree(char*, unsigned short)+0x34b>
10000dcd:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000dd3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000dd6:	01 d0                	add    eax,edx
10000dd8:	8a 00                	mov    al,BYTE PTR [eax]
10000dda:	3c 60                	cmp    al,0x60
10000ddc:	7e 30                	jle    10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000dde:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000de4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000de7:	01 d0                	add    eax,edx
10000de9:	8a 00                	mov    al,BYTE PTR [eax]
10000deb:	3c 7a                	cmp    al,0x7a
10000ded:	7f 1f                	jg     10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000def:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000df5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000df8:	01 d0                	add    eax,edx
10000dfa:	8a 00                	mov    al,BYTE PTR [eax]
10000dfc:	83 e8 20             	sub    eax,0x20
10000dff:	88 c2                	mov    dl,al
10000e01:	8d 8d 99 fe ff ff    	lea    ecx,[ebp-0x167]
10000e07:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e0a:	01 c8                	add    eax,ecx
10000e0c:	88 10                	mov    BYTE PTR [eax],dl
10000e0e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e17:	01 d0                	add    eax,edx
10000e19:	8a 00                	mov    al,BYTE PTR [eax]
10000e1b:	3c 59                	cmp    al,0x59
10000e1d:	75 0e                	jne    10000e2d <backupTree(char*, unsigned short)+0x2e6>
10000e1f:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e25:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e28:	01 d0                	add    eax,edx
10000e2a:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e2d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e33:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e36:	01 d0                	add    eax,edx
10000e38:	8a 00                	mov    al,BYTE PTR [eax]
10000e3a:	3c 5a                	cmp    al,0x5a
10000e3c:	75 0e                	jne    10000e4c <backupTree(char*, unsigned short)+0x305>
10000e3e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e47:	01 d0                	add    eax,edx
10000e49:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e4c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e52:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e55:	01 d0                	add    eax,edx
10000e57:	8a 00                	mov    al,BYTE PTR [eax]
10000e59:	3c 20                	cmp    al,0x20
10000e5b:	75 0e                	jne    10000e6b <backupTree(char*, unsigned short)+0x324>
10000e5d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e63:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e66:	01 d0                	add    eax,edx
10000e68:	c6 00 59             	mov    BYTE PTR [eax],0x59
10000e6b:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e74:	01 d0                	add    eax,edx
10000e76:	8a 00                	mov    al,BYTE PTR [eax]
10000e78:	3c 2e                	cmp    al,0x2e
10000e7a:	75 0e                	jne    10000e8a <backupTree(char*, unsigned short)+0x343>
10000e7c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e82:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e85:	01 d0                	add    eax,edx
10000e87:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10000e8a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10000e8d:	e9 31 ff ff ff       	jmp    10000dc3 <backupTree(char*, unsigned short)+0x27c>
10000e92:	83 ec 08             	sub    esp,0x8
10000e95:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000e9b:	50                   	push   eax
10000e9c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ea2:	50                   	push   eax
10000ea3:	e8 fc ff ff ff       	call   10000ea4 <backupTree(char*, unsigned short)+0x35d>	10000ea4: R_386_PC32	strcat
10000ea8:	83 c4 10             	add    esp,0x10
10000eab:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000eae:	83 c0 10             	add    eax,0x10
10000eb1:	83 ec 0c             	sub    esp,0xc
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <backupTree(char*, unsigned short)+0x36f>	10000eb6: R_386_PC32	strlen
10000eba:	83 c4 10             	add    esp,0x10
10000ebd:	83 c0 41             	add    eax,0x41
10000ec0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000ec6:	83 ec 08             	sub    esp,0x8
10000ec9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000ecf:	50                   	push   eax
10000ed0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ed6:	50                   	push   eax
10000ed7:	e8 fc ff ff ff       	call   10000ed8 <backupTree(char*, unsigned short)+0x391>	10000ed8: R_386_PC32	strcat
10000edc:	83 c4 10             	add    esp,0x10
10000edf:	83 ec 08             	sub    esp,0x8
10000ee2:	68 38 9a 00 10       	push   0x10009a38	10000ee3: R_386_32	.text
10000ee7:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000eed:	50                   	push   eax
10000eee:	e8 fc ff ff ff       	call   10000eef <backupTree(char*, unsigned short)+0x3a8>	10000eef: R_386_PC32	strcat
10000ef3:	83 c4 10             	add    esp,0x10
10000ef6:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000efa:	25 65 07 00 00       	and    eax,0x765
10000eff:	33 85 74 ed ff ff    	xor    eax,DWORD PTR [ebp-0x128c]
10000f05:	66 89 45 c6          	mov    WORD PTR [ebp-0x3a],ax
10000f09:	8d 85 88 fe ff ff    	lea    eax,[ebp-0x178]
10000f0f:	bb ad 9a 00 10       	mov    ebx,0x10009aad	10000f10: R_386_32	.text
10000f14:	ba 11 00 00 00       	mov    edx,0x11
10000f19:	89 c7                	mov    edi,eax
10000f1b:	89 de                	mov    esi,ebx
10000f1d:	89 d1                	mov    ecx,edx
10000f1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000f21:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f25:	83 e0 0f             	and    eax,0xf
10000f28:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f2f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f35:	83 ec 08             	sub    esp,0x8
10000f38:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f3e:	50                   	push   eax
10000f3f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f45:	50                   	push   eax
10000f46:	e8 fc ff ff ff       	call   10000f47 <backupTree(char*, unsigned short)+0x400>	10000f47: R_386_PC32	strcat
10000f4b:	83 c4 10             	add    esp,0x10
10000f4e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f52:	c1 f8 04             	sar    eax,0x4
10000f55:	83 e0 0f             	and    eax,0xf
10000f58:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f5f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f65:	83 ec 08             	sub    esp,0x8
10000f68:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f6e:	50                   	push   eax
10000f6f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f75:	50                   	push   eax
10000f76:	e8 fc ff ff ff       	call   10000f77 <backupTree(char*, unsigned short)+0x430>	10000f77: R_386_PC32	strcat
10000f7b:	83 c4 10             	add    esp,0x10
10000f7e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f82:	c1 f8 08             	sar    eax,0x8
10000f85:	83 e0 0f             	and    eax,0xf
10000f88:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f8f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f95:	83 ec 08             	sub    esp,0x8
10000f98:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f9e:	50                   	push   eax
10000f9f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fa5:	50                   	push   eax
10000fa6:	e8 fc ff ff ff       	call   10000fa7 <backupTree(char*, unsigned short)+0x460>	10000fa7: R_386_PC32	strcat
10000fab:	83 c4 10             	add    esp,0x10
10000fae:	66 8b 45 c6          	mov    ax,WORD PTR [ebp-0x3a]
10000fb2:	66 c1 e8 0c          	shr    ax,0xc
10000fb6:	0f b7 c0             	movzx  eax,ax
10000fb9:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000fc0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000fc6:	83 ec 08             	sub    esp,0x8
10000fc9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000fcf:	50                   	push   eax
10000fd0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fd6:	50                   	push   eax
10000fd7:	e8 fc ff ff ff       	call   10000fd8 <backupTree(char*, unsigned short)+0x491>	10000fd8: R_386_PC32	strcat
10000fdc:	83 c4 10             	add    esp,0x10
10000fdf:	83 ec 0c             	sub    esp,0xc
10000fe2:	68 14 01 00 00       	push   0x114
10000fe7:	e8 fc ff ff ff       	call   10000fe8 <backupTree(char*, unsigned short)+0x4a1>	10000fe8: R_386_PC32	operator new(unsigned long)
10000fec:	83 c4 10             	add    esp,0x10
10000fef:	89 c3                	mov    ebx,eax
10000ff1:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ff6:	8b 00                	mov    eax,DWORD PTR [eax]
10000ff8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000ffb:	83 ec 04             	sub    esp,0x4
10000ffe:	50                   	push   eax
10000fff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001002:	53                   	push   ebx
10001003:	e8 fc ff ff ff       	call   10001004 <backupTree(char*, unsigned short)+0x4bd>	10001004: R_386_PC32	File::File(char const*, Process*)
10001008:	83 c4 10             	add    esp,0x10
1000100b:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
1000100e:	83 ec 08             	sub    esp,0x8
10001011:	6a 01                	push   0x1
10001013:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001016:	e8 fc ff ff ff       	call   10001017 <backupTree(char*, unsigned short)+0x4d0>	10001017: R_386_PC32	File::open(FileOpenMode)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001022:	75 15                	jne    10001039 <backupTree(char*, unsigned short)+0x4f2>
10001024:	83 ec 0c             	sub    esp,0xc
10001027:	68 74 9a 00 10       	push   0x10009a74	10001028: R_386_32	.text
1000102c:	e8 fc ff ff ff       	call   1000102d <backupTree(char*, unsigned short)+0x4e6>	1000102d: R_386_PC32	KePanic(char const*)
10001031:	83 c4 10             	add    esp,0x10
10001034:	e9 3e 01 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
10001039:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
1000103d:	0f 84 c5 fb ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001043:	83 ec 0c             	sub    esp,0xc
10001046:	68 14 01 00 00       	push   0x114
1000104b:	e8 fc ff ff ff       	call   1000104c <backupTree(char*, unsigned short)+0x505>	1000104c: R_386_PC32	operator new(unsigned long)
10001050:	83 c4 10             	add    esp,0x10
10001053:	89 c3                	mov    ebx,eax
10001055:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000105a:	8b 00                	mov    eax,DWORD PTR [eax]
1000105c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000105f:	83 ec 04             	sub    esp,0x4
10001062:	50                   	push   eax
10001063:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10001069:	50                   	push   eax
1000106a:	53                   	push   ebx
1000106b:	e8 fc ff ff ff       	call   1000106c <backupTree(char*, unsigned short)+0x525>	1000106c: R_386_PC32	File::File(char const*, Process*)
10001070:	83 c4 10             	add    esp,0x10
10001073:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10001076:	83 ec 08             	sub    esp,0x8
10001079:	6a 12                	push   0x12
1000107b:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000107e:	e8 fc ff ff ff       	call   1000107f <backupTree(char*, unsigned short)+0x538>	1000107f: R_386_PC32	File::open(FileOpenMode)
10001083:	83 c4 10             	add    esp,0x10
10001086:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000108a:	75 23                	jne    100010af <backupTree(char*, unsigned short)+0x568>
1000108c:	83 ec 0c             	sub    esp,0xc
1000108f:	68 74 9a 00 10       	push   0x10009a74	10001090: R_386_32	.text
10001094:	e8 fc ff ff ff       	call   10001095 <backupTree(char*, unsigned short)+0x54e>	10001095: R_386_PC32	KePanic(char const*)
10001099:	83 c4 10             	add    esp,0x10
1000109c:	83 ec 0c             	sub    esp,0xc
1000109f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
100010a2:	e8 fc ff ff ff       	call   100010a3 <backupTree(char*, unsigned short)+0x55c>	100010a3: R_386_PC32	File::close()
100010a7:	83 c4 10             	add    esp,0x10
100010aa:	e9 c8 00 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
100010af:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100010b2:	8b 00                	mov    eax,DWORD PTR [eax]
100010b4:	83 c0 0c             	add    eax,0xc
100010b7:	8b 00                	mov    eax,DWORD PTR [eax]
100010b9:	83 ec 0c             	sub    esp,0xc
100010bc:	8d 95 84 fe ff ff    	lea    edx,[ebp-0x17c]
100010c2:	52                   	push   edx
100010c3:	8d 95 80 ee ff ff    	lea    edx,[ebp-0x1180]
100010c9:	52                   	push   edx
100010ca:	6a 00                	push   0x0
100010cc:	68 00 10 00 00       	push   0x1000
100010d1:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100010d4:	ff d0                	call   eax
100010d6:	83 c4 20             	add    esp,0x20
100010d9:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100010dc:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100010e0:	75 3b                	jne    1000111d <backupTree(char*, unsigned short)+0x5d6>
100010e2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100010e5:	8b 00                	mov    eax,DWORD PTR [eax]
100010e7:	83 c0 10             	add    eax,0x10
100010ea:	8b 08                	mov    ecx,DWORD PTR [eax]
100010ec:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
100010f2:	99                   	cdq    
100010f3:	83 ec 0c             	sub    esp,0xc
100010f6:	8d 9d 80 fe ff ff    	lea    ebx,[ebp-0x180]
100010fc:	53                   	push   ebx
100010fd:	8d 9d 80 ee ff ff    	lea    ebx,[ebp-0x1180]
10001103:	53                   	push   ebx
10001104:	52                   	push   edx
10001105:	50                   	push   eax
10001106:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001109:	ff d1                	call   ecx
1000110b:	83 c4 20             	add    esp,0x20
1000110e:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
10001114:	3d 00 10 00 00       	cmp    eax,0x1000
10001119:	75 05                	jne    10001120 <backupTree(char*, unsigned short)+0x5d9>
1000111b:	eb 92                	jmp    100010af <backupTree(char*, unsigned short)+0x568>
1000111d:	90                   	nop
1000111e:	eb 01                	jmp    10001121 <backupTree(char*, unsigned short)+0x5da>
10001120:	90                   	nop
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001127:	e8 fc ff ff ff       	call   10001128 <backupTree(char*, unsigned short)+0x5e1>	10001128: R_386_PC32	File::close()
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	83 ec 0c             	sub    esp,0xc
10001132:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001135:	e8 fc ff ff ff       	call   10001136 <backupTree(char*, unsigned short)+0x5ef>	10001136: R_386_PC32	File::close()
1000113a:	83 c4 10             	add    esp,0x10
1000113d:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001141:	74 15                	je     10001158 <backupTree(char*, unsigned short)+0x611>
10001143:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001146:	8b 00                	mov    eax,DWORD PTR [eax]
10001148:	83 c0 08             	add    eax,0x8
1000114b:	8b 00                	mov    eax,DWORD PTR [eax]
1000114d:	83 ec 0c             	sub    esp,0xc
10001150:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001153:	ff d0                	call   eax
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000115c:	0f 84 a6 fa ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001162:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10001165:	8b 00                	mov    eax,DWORD PTR [eax]
10001167:	83 c0 08             	add    eax,0x8
1000116a:	8b 00                	mov    eax,DWORD PTR [eax]
1000116c:	83 ec 0c             	sub    esp,0xc
1000116f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001172:	ff d0                	call   eax
10001174:	83 c4 10             	add    esp,0x10
10001177:	e9 8c fa ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
1000117c:	90                   	nop
1000117d:	83 ec 0c             	sub    esp,0xc
10001180:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001183:	e8 fc ff ff ff       	call   10001184 <backupTree(char*, unsigned short)+0x63d>	10001184: R_386_PC32	free
10001188:	83 c4 10             	add    esp,0x10
1000118b:	83 ec 0c             	sub    esp,0xc
1000118e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001191:	e8 fc ff ff ff       	call   10001192 <backupTree(char*, unsigned short)+0x64b>	10001192: R_386_PC32	Directory::close()
10001196:	83 c4 10             	add    esp,0x10
10001199:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
1000119d:	74 18                	je     100011b7 <backupTree(char*, unsigned short)+0x670>
1000119f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100011a2:	8b 00                	mov    eax,DWORD PTR [eax]
100011a4:	83 c0 08             	add    eax,0x8
100011a7:	8b 00                	mov    eax,DWORD PTR [eax]
100011a9:	83 ec 0c             	sub    esp,0xc
100011ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011af:	ff d0                	call   eax
100011b1:	83 c4 10             	add    esp,0x10
100011b4:	eb 01                	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
100011b6:	90                   	nop
100011b7:	8d 65 f4             	lea    esp,[ebp-0xc]
100011ba:	5b                   	pop    ebx
100011bb:	5e                   	pop    esi
100011bc:	5f                   	pop    edi
100011bd:	5d                   	pop    ebp
100011be:	c3                   	ret    

100011bf <createUser(char const*)>:
100011bf:	55                   	push   ebp
100011c0:	89 e5                	mov    ebp,esp
100011c2:	81 ec 08 01 00 00    	sub    esp,0x108
100011c8:	68 be 9a 00 10       	push   0x10009abe	100011c9: R_386_32	.text
100011cd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011d3:	50                   	push   eax
100011d4:	e8 fc ff ff ff       	call   100011d5 <createUser(char const*)+0x16>	100011d5: R_386_PC32	strcpy
100011d9:	83 c4 08             	add    esp,0x8
100011dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011df:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011e5:	50                   	push   eax
100011e6:	e8 fc ff ff ff       	call   100011e7 <createUser(char const*)+0x28>	100011e7: R_386_PC32	strcat
100011eb:	83 c4 08             	add    esp,0x8
100011ee:	83 ec 08             	sub    esp,0x8
100011f1:	68 c0 01 00 00       	push   0x1c0
100011f6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011fc:	50                   	push   eax
100011fd:	e8 fc ff ff ff       	call   100011fe <createUser(char const*)+0x3f>	100011fe: R_386_PC32	mkdir(char const*, int)
10001202:	83 c4 10             	add    esp,0x10
10001205:	83 ec 08             	sub    esp,0x8
10001208:	68 c8 9a 00 10       	push   0x10009ac8	10001209: R_386_32	.text
1000120d:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001213:	50                   	push   eax
10001214:	e8 fc ff ff ff       	call   10001215 <createUser(char const*)+0x56>	10001215: R_386_PC32	strcat
10001219:	83 c4 10             	add    esp,0x10
1000121c:	83 ec 08             	sub    esp,0x8
1000121f:	68 c0 01 00 00       	push   0x1c0
10001224:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000122a:	50                   	push   eax
1000122b:	e8 fc ff ff ff       	call   1000122c <createUser(char const*)+0x6d>	1000122c: R_386_PC32	mkdir(char const*, int)
10001230:	83 c4 10             	add    esp,0x10
10001233:	83 ec 08             	sub    esp,0x8
10001236:	68 be 9a 00 10       	push   0x10009abe	10001237: R_386_32	.text
1000123b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001241:	50                   	push   eax
10001242:	e8 fc ff ff ff       	call   10001243 <createUser(char const*)+0x84>	10001243: R_386_PC32	strcpy
10001247:	83 c4 10             	add    esp,0x10
1000124a:	83 ec 08             	sub    esp,0x8
1000124d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001250:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001256:	50                   	push   eax
10001257:	e8 fc ff ff ff       	call   10001258 <createUser(char const*)+0x99>	10001258: R_386_PC32	strcat
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	83 ec 08             	sub    esp,0x8
10001262:	68 d1 9a 00 10       	push   0x10009ad1	10001263: R_386_32	.text
10001267:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000126d:	50                   	push   eax
1000126e:	e8 fc ff ff ff       	call   1000126f <createUser(char const*)+0xb0>	1000126f: R_386_PC32	strcat
10001273:	83 c4 10             	add    esp,0x10
10001276:	83 ec 08             	sub    esp,0x8
10001279:	68 c0 01 00 00       	push   0x1c0
1000127e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001284:	50                   	push   eax
10001285:	e8 fc ff ff ff       	call   10001286 <createUser(char const*)+0xc7>	10001286: R_386_PC32	mkdir(char const*, int)
1000128a:	83 c4 10             	add    esp,0x10
1000128d:	83 ec 08             	sub    esp,0x8
10001290:	68 be 9a 00 10       	push   0x10009abe	10001291: R_386_32	.text
10001295:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000129b:	50                   	push   eax
1000129c:	e8 fc ff ff ff       	call   1000129d <createUser(char const*)+0xde>	1000129d: R_386_PC32	strcpy
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	83 ec 08             	sub    esp,0x8
100012a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012aa:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012b0:	50                   	push   eax
100012b1:	e8 fc ff ff ff       	call   100012b2 <createUser(char const*)+0xf3>	100012b2: R_386_PC32	strcat
100012b6:	83 c4 10             	add    esp,0x10
100012b9:	83 ec 08             	sub    esp,0x8
100012bc:	68 dc 9a 00 10       	push   0x10009adc	100012bd: R_386_32	.text
100012c1:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012c7:	50                   	push   eax
100012c8:	e8 fc ff ff ff       	call   100012c9 <createUser(char const*)+0x10a>	100012c9: R_386_PC32	strcat
100012cd:	83 c4 10             	add    esp,0x10
100012d0:	83 ec 08             	sub    esp,0x8
100012d3:	68 c0 01 00 00       	push   0x1c0
100012d8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <createUser(char const*)+0x121>	100012e0: R_386_PC32	mkdir(char const*, int)
100012e4:	83 c4 10             	add    esp,0x10
100012e7:	83 ec 08             	sub    esp,0x8
100012ea:	68 be 9a 00 10       	push   0x10009abe	100012eb: R_386_32	.text
100012ef:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012f5:	50                   	push   eax
100012f6:	e8 fc ff ff ff       	call   100012f7 <createUser(char const*)+0x138>	100012f7: R_386_PC32	strcpy
100012fb:	83 c4 10             	add    esp,0x10
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001304:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000130a:	50                   	push   eax
1000130b:	e8 fc ff ff ff       	call   1000130c <createUser(char const*)+0x14d>	1000130c: R_386_PC32	strcat
10001310:	83 c4 10             	add    esp,0x10
10001313:	83 ec 08             	sub    esp,0x8
10001316:	68 e7 9a 00 10       	push   0x10009ae7	10001317: R_386_32	.text
1000131b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001321:	50                   	push   eax
10001322:	e8 fc ff ff ff       	call   10001323 <createUser(char const*)+0x164>	10001323: R_386_PC32	strcat
10001327:	83 c4 10             	add    esp,0x10
1000132a:	83 ec 08             	sub    esp,0x8
1000132d:	68 c0 01 00 00       	push   0x1c0
10001332:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001338:	50                   	push   eax
10001339:	e8 fc ff ff ff       	call   1000133a <createUser(char const*)+0x17b>	1000133a: R_386_PC32	mkdir(char const*, int)
1000133e:	83 c4 10             	add    esp,0x10
10001341:	83 ec 08             	sub    esp,0x8
10001344:	68 be 9a 00 10       	push   0x10009abe	10001345: R_386_32	.text
10001349:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000134f:	50                   	push   eax
10001350:	e8 fc ff ff ff       	call   10001351 <createUser(char const*)+0x192>	10001351: R_386_PC32	strcpy
10001355:	83 c4 10             	add    esp,0x10
10001358:	83 ec 08             	sub    esp,0x8
1000135b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000135e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001364:	50                   	push   eax
10001365:	e8 fc ff ff ff       	call   10001366 <createUser(char const*)+0x1a7>	10001366: R_386_PC32	strcat
1000136a:	83 c4 10             	add    esp,0x10
1000136d:	83 ec 08             	sub    esp,0x8
10001370:	68 ef 9a 00 10       	push   0x10009aef	10001371: R_386_32	.text
10001375:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000137b:	50                   	push   eax
1000137c:	e8 fc ff ff ff       	call   1000137d <createUser(char const*)+0x1be>	1000137d: R_386_PC32	strcat
10001381:	83 c4 10             	add    esp,0x10
10001384:	83 ec 08             	sub    esp,0x8
10001387:	68 c0 01 00 00       	push   0x1c0
1000138c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001392:	50                   	push   eax
10001393:	e8 fc ff ff ff       	call   10001394 <createUser(char const*)+0x1d5>	10001394: R_386_PC32	mkdir(char const*, int)
10001398:	83 c4 10             	add    esp,0x10
1000139b:	83 ec 08             	sub    esp,0x8
1000139e:	68 be 9a 00 10       	push   0x10009abe	1000139f: R_386_32	.text
100013a3:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013a9:	50                   	push   eax
100013aa:	e8 fc ff ff ff       	call   100013ab <createUser(char const*)+0x1ec>	100013ab: R_386_PC32	strcpy
100013af:	83 c4 10             	add    esp,0x10
100013b2:	83 ec 08             	sub    esp,0x8
100013b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013b8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013be:	50                   	push   eax
100013bf:	e8 fc ff ff ff       	call   100013c0 <createUser(char const*)+0x201>	100013c0: R_386_PC32	strcat
100013c4:	83 c4 10             	add    esp,0x10
100013c7:	83 ec 08             	sub    esp,0x8
100013ca:	68 fa 9a 00 10       	push   0x10009afa	100013cb: R_386_32	.text
100013cf:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013d5:	50                   	push   eax
100013d6:	e8 fc ff ff ff       	call   100013d7 <createUser(char const*)+0x218>	100013d7: R_386_PC32	strcat
100013db:	83 c4 10             	add    esp,0x10
100013de:	83 ec 08             	sub    esp,0x8
100013e1:	68 c0 01 00 00       	push   0x1c0
100013e6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013ec:	50                   	push   eax
100013ed:	e8 fc ff ff ff       	call   100013ee <createUser(char const*)+0x22f>	100013ee: R_386_PC32	mkdir(char const*, int)
100013f2:	83 c4 10             	add    esp,0x10
100013f5:	83 ec 08             	sub    esp,0x8
100013f8:	68 be 9a 00 10       	push   0x10009abe	100013f9: R_386_32	.text
100013fd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001403:	50                   	push   eax
10001404:	e8 fc ff ff ff       	call   10001405 <createUser(char const*)+0x246>	10001405: R_386_PC32	strcpy
10001409:	83 c4 10             	add    esp,0x10
1000140c:	83 ec 08             	sub    esp,0x8
1000140f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001412:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001418:	50                   	push   eax
10001419:	e8 fc ff ff ff       	call   1000141a <createUser(char const*)+0x25b>	1000141a: R_386_PC32	strcat
1000141e:	83 c4 10             	add    esp,0x10
10001421:	83 ec 08             	sub    esp,0x8
10001424:	68 01 9b 00 10       	push   0x10009b01	10001425: R_386_32	.text
10001429:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000142f:	50                   	push   eax
10001430:	e8 fc ff ff ff       	call   10001431 <createUser(char const*)+0x272>	10001431: R_386_PC32	strcat
10001435:	83 c4 10             	add    esp,0x10
10001438:	83 ec 08             	sub    esp,0x8
1000143b:	68 c0 01 00 00       	push   0x1c0
10001440:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001446:	50                   	push   eax
10001447:	e8 fc ff ff ff       	call   10001448 <createUser(char const*)+0x289>	10001448: R_386_PC32	mkdir(char const*, int)
1000144c:	83 c4 10             	add    esp,0x10
1000144f:	83 ec 08             	sub    esp,0x8
10001452:	68 09 9b 00 10       	push   0x10009b09	10001453: R_386_32	.text
10001457:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000145d:	50                   	push   eax
1000145e:	e8 fc ff ff ff       	call   1000145f <createUser(char const*)+0x2a0>	1000145f: R_386_PC32	strcpy
10001463:	83 c4 10             	add    esp,0x10
10001466:	83 ec 08             	sub    esp,0x8
10001469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000146c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001472:	50                   	push   eax
10001473:	e8 fc ff ff ff       	call   10001474 <createUser(char const*)+0x2b5>	10001474: R_386_PC32	strcat
10001478:	83 c4 10             	add    esp,0x10
1000147b:	83 ec 08             	sub    esp,0x8
1000147e:	68 c0 01 00 00       	push   0x1c0
10001483:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001489:	50                   	push   eax
1000148a:	e8 fc ff ff ff       	call   1000148b <createUser(char const*)+0x2cc>	1000148b: R_386_PC32	mkdir(char const*, int)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	83 ec 08             	sub    esp,0x8
10001495:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000149b:	50                   	push   eax
1000149c:	68 24 9b 00 10       	push   0x10009b24	1000149d: R_386_32	.text
100014a1:	e8 fc ff ff ff       	call   100014a2 <createUser(char const*)+0x2e3>	100014a2: R_386_PC32	copytree(char*, char*)
100014a6:	83 c4 10             	add    esp,0x10
100014a9:	90                   	nop
100014aa:	c9                   	leave  
100014ab:	c3                   	ret    

100014ac <drawBootScreen()>:
100014ac:	55                   	push   ebp
100014ad:	89 e5                	mov    ebp,esp
100014af:	83 ec 18             	sub    esp,0x18
100014b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100014b3: R_386_32	term
100014b7:	83 ec 08             	sub    esp,0x8
100014ba:	6a 0b                	push   0xb
100014bc:	50                   	push   eax
100014bd:	e8 fc ff ff ff       	call   100014be <drawBootScreen()+0x12>	100014be: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
100014c2:	83 c4 10             	add    esp,0x10
100014c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100014c6: R_386_32	term
100014ca:	83 ec 08             	sub    esp,0x8
100014cd:	6a 00                	push   0x0
100014cf:	50                   	push   eax
100014d0:	e8 fc ff ff ff       	call   100014d1 <drawBootScreen()+0x25>	100014d1: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
100014d5:	83 c4 10             	add    esp,0x10
100014d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100014d9: R_386_32	term
100014dd:	83 ec 0c             	sub    esp,0xc
100014e0:	50                   	push   eax
100014e1:	e8 fc ff ff ff       	call   100014e2 <drawBootScreen()+0x36>	100014e2: R_386_PC32	VgaText::clearScreen()
100014e6:	83 c4 10             	add    esp,0x10
100014e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ea: R_386_32	term
100014ee:	83 ec 08             	sub    esp,0x8
100014f1:	68 43 9b 00 10       	push   0x10009b43	100014f2: R_386_32	.text
100014f6:	50                   	push   eax
100014f7:	e8 fc ff ff ff       	call   100014f8 <drawBootScreen()+0x4c>	100014f8: R_386_PC32	VgaText::setTitle(char*)
100014fc:	83 c4 10             	add    esp,0x10
100014ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10001500: R_386_32	term
10001504:	83 ec 08             	sub    esp,0x8
10001507:	6a 00                	push   0x0
10001509:	50                   	push   eax
1000150a:	e8 fc ff ff ff       	call   1000150b <drawBootScreen()+0x5f>	1000150b: R_386_PC32	VgaText::setTitleColour(VgaColour)
1000150f:	83 c4 10             	add    esp,0x10
10001512:	a1 00 00 00 00       	mov    eax,ds:0x0	10001513: R_386_32	term
10001517:	83 ec 08             	sub    esp,0x8
1000151a:	6a 00                	push   0x0
1000151c:	50                   	push   eax
1000151d:	e8 fc ff ff ff       	call   1000151e <drawBootScreen()+0x72>	1000151e: R_386_PC32	VgaText::setTitleTextColour(VgaColour)
10001522:	83 c4 10             	add    esp,0x10
10001525:	a1 00 00 00 00       	mov    eax,ds:0x0	10001526: R_386_32	term
1000152a:	83 ec 04             	sub    esp,0x4
1000152d:	6a 00                	push   0x0
1000152f:	6a 00                	push   0x0
10001531:	50                   	push   eax
10001532:	e8 fc ff ff ff       	call   10001533 <drawBootScreen()+0x87>	10001533: R_386_PC32	VgaText::setCursor(int, int)
10001537:	83 c4 10             	add    esp,0x10
1000153a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001541:	83 7d f4 4f          	cmp    DWORD PTR [ebp-0xc],0x4f
10001545:	7f 19                	jg     10001560 <drawBootScreen()+0xb4>
10001547:	a1 00 00 00 00       	mov    eax,ds:0x0	10001548: R_386_32	term
1000154c:	6a 00                	push   0x0
1000154e:	6a 00                	push   0x0
10001550:	6a 20                	push   0x20
10001552:	50                   	push   eax
10001553:	e8 fc ff ff ff       	call   10001554 <drawBootScreen()+0xa8>	10001554: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001558:	83 c4 10             	add    esp,0x10
1000155b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000155e:	eb e1                	jmp    10001541 <drawBootScreen()+0x95>
10001560:	a0 00 00 00 00       	mov    al,ds:0x0	10001561: R_386_32	showSidebar
10001565:	84 c0                	test   al,al
10001567:	0f 84 91 00 00 00    	je     100015fe <drawBootScreen()+0x152>
1000156d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10001574:	83 7d f0 18          	cmp    DWORD PTR [ebp-0x10],0x18
10001578:	7f 41                	jg     100015bb <drawBootScreen()+0x10f>
1000157a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000157b: R_386_32	term
1000157f:	83 ec 04             	sub    esp,0x4
10001582:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001585:	6a 00                	push   0x0
10001587:	50                   	push   eax
10001588:	e8 fc ff ff ff       	call   10001589 <drawBootScreen()+0xdd>	10001589: R_386_PC32	VgaText::setCursor(int, int)
1000158d:	83 c4 10             	add    esp,0x10
10001590:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001597:	83 7d ec 0f          	cmp    DWORD PTR [ebp-0x14],0xf
1000159b:	7f 19                	jg     100015b6 <drawBootScreen()+0x10a>
1000159d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000159e: R_386_32	term
100015a2:	6a 00                	push   0x0
100015a4:	6a 00                	push   0x0
100015a6:	6a 20                	push   0x20
100015a8:	50                   	push   eax
100015a9:	e8 fc ff ff ff       	call   100015aa <drawBootScreen()+0xfe>	100015aa: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100015ae:	83 c4 10             	add    esp,0x10
100015b1:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100015b4:	eb e1                	jmp    10001597 <drawBootScreen()+0xeb>
100015b6:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100015b9:	eb b9                	jmp    10001574 <drawBootScreen()+0xc8>
100015bb:	a1 00 00 00 00       	mov    eax,ds:0x0	100015bc: R_386_32	term
100015c0:	83 ec 04             	sub    esp,0x4
100015c3:	6a 01                	push   0x1
100015c5:	6a 01                	push   0x1
100015c7:	50                   	push   eax
100015c8:	e8 fc ff ff ff       	call   100015c9 <drawBootScreen()+0x11d>	100015c9: R_386_PC32	VgaText::setCursor(int, int)
100015cd:	83 c4 10             	add    esp,0x10
100015d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100015d1: R_386_32	term
100015d5:	6a 00                	push   0x0
100015d7:	6a 0f                	push   0xf
100015d9:	68 44 9b 00 10       	push   0x10009b44	100015da: R_386_32	.text
100015de:	50                   	push   eax
100015df:	e8 fc ff ff ff       	call   100015e0 <drawBootScreen()+0x134>	100015e0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015e4:	83 c4 10             	add    esp,0x10
100015e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100015e8: R_386_32	term
100015ec:	6a 00                	push   0x0
100015ee:	6a 0e                	push   0xe
100015f0:	68 c7 9b 00 10       	push   0x10009bc7	100015f1: R_386_32	.text
100015f5:	50                   	push   eax
100015f6:	e8 fc ff ff ff       	call   100015f7 <drawBootScreen()+0x14b>	100015f7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015fb:	83 c4 10             	add    esp,0x10
100015fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100015ff: R_386_32	term
10001603:	83 ec 08             	sub    esp,0x8
10001606:	6a 0f                	push   0xf
10001608:	50                   	push   eax
10001609:	e8 fc ff ff ff       	call   1000160a <drawBootScreen()+0x15e>	1000160a: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
1000160e:	83 c4 10             	add    esp,0x10
10001611:	a1 00 00 00 00       	mov    eax,ds:0x0	10001612: R_386_32	term
10001616:	83 ec 08             	sub    esp,0x8
10001619:	6a 00                	push   0x0
1000161b:	50                   	push   eax
1000161c:	e8 fc ff ff ff       	call   1000161d <drawBootScreen()+0x171>	1000161d: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
10001621:	83 c4 10             	add    esp,0x10
10001624:	90                   	nop
10001625:	c9                   	leave  
10001626:	c3                   	ret    

10001627 <drawBasicWindowX(int, int, int, int, char const*, bool)>:
10001627:	55                   	push   ebp
10001628:	89 e5                	mov    ebp,esp
1000162a:	53                   	push   ebx
1000162b:	83 ec 34             	sub    esp,0x34
1000162e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001631:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
10001634:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10001637:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000163e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001641:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
10001644:	7d 6c                	jge    100016b2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x8b>
10001646:	a1 00 00 00 00       	mov    eax,ds:0x0	10001647: R_386_32	term
1000164b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000164e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001651:	01 ca                	add    edx,ecx
10001653:	83 ec 04             	sub    esp,0x4
10001656:	52                   	push   edx
10001657:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000165a:	50                   	push   eax
1000165b:	e8 fc ff ff ff       	call   1000165c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x35>	1000165c: R_386_PC32	VgaText::setCursor(int, int)
10001660:	83 c4 10             	add    esp,0x10
10001663:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000166a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000166d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001670:	7d 3b                	jge    100016ad <drawBasicWindowX(int, int, int, int, char const*, bool)+0x86>
10001672:	a1 00 00 00 00       	mov    eax,ds:0x0	10001673: R_386_32	term
10001677:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000167b:	74 07                	je     10001684 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x5d>
1000167d:	b9 07 00 00 00       	mov    ecx,0x7
10001682:	eb 05                	jmp    10001689 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x62>
10001684:	b9 0f 00 00 00       	mov    ecx,0xf
10001689:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000168d:	74 07                	je     10001696 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x6f>
1000168f:	ba 07 00 00 00       	mov    edx,0x7
10001694:	eb 05                	jmp    1000169b <drawBasicWindowX(int, int, int, int, char const*, bool)+0x74>
10001696:	ba 0f 00 00 00       	mov    edx,0xf
1000169b:	51                   	push   ecx
1000169c:	52                   	push   edx
1000169d:	6a 20                	push   0x20
1000169f:	50                   	push   eax
100016a0:	e8 fc ff ff ff       	call   100016a1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x7a>	100016a1: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016a5:	83 c4 10             	add    esp,0x10
100016a8:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100016ab:	eb bd                	jmp    1000166a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x43>
100016ad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100016b0:	eb 8c                	jmp    1000163e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17>
100016b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100016b3: R_386_32	term
100016b7:	83 ec 04             	sub    esp,0x4
100016ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100016bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016c0:	50                   	push   eax
100016c1:	e8 fc ff ff ff       	call   100016c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x9b>	100016c2: R_386_PC32	VgaText::setCursor(int, int)
100016c6:	83 c4 10             	add    esp,0x10
100016c9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100016d0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100016d3:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100016d6:	7d 19                	jge    100016f1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xca>
100016d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100016d9: R_386_32	term
100016dd:	6a 01                	push   0x1
100016df:	6a 01                	push   0x1
100016e1:	6a 20                	push   0x20
100016e3:	50                   	push   eax
100016e4:	e8 fc ff ff ff       	call   100016e5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xbe>	100016e5: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016e9:	83 c4 10             	add    esp,0x10
100016ec:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100016ef:	eb df                	jmp    100016d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xa9>
100016f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100016f2: R_386_32	term
100016f6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100016f9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100016fc:	01 d1                	add    ecx,edx
100016fe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001701:	42                   	inc    edx
10001702:	83 ec 04             	sub    esp,0x4
10001705:	51                   	push   ecx
10001706:	52                   	push   edx
10001707:	50                   	push   eax
10001708:	e8 fc ff ff ff       	call   10001709 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe2>	10001709: R_386_PC32	VgaText::setCursor(int, int)
1000170d:	83 c4 10             	add    esp,0x10
10001710:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10001717:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000171a:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
1000171d:	7d 19                	jge    10001738 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x111>
1000171f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001720: R_386_32	term
10001724:	6a 03                	push   0x3
10001726:	6a 03                	push   0x3
10001728:	6a 20                	push   0x20
1000172a:	50                   	push   eax
1000172b:	e8 fc ff ff ff       	call   1000172c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x105>	1000172c: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001730:	83 c4 10             	add    esp,0x10
10001733:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10001736:	eb df                	jmp    10001717 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xf0>
10001738:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000173b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000173e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001741:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001744:	01 d0                	add    eax,edx
10001746:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001749:	0f 8d 89 00 00 00    	jge    100017d8 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b1>
1000174f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001750: R_386_32	term
10001754:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001757:	8d 4a 01             	lea    ecx,[edx+0x1]
1000175a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
1000175d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001760:	01 da                	add    edx,ebx
10001762:	83 ec 04             	sub    esp,0x4
10001765:	51                   	push   ecx
10001766:	52                   	push   edx
10001767:	50                   	push   eax
10001768:	e8 fc ff ff ff       	call   10001769 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x142>	10001769: R_386_PC32	VgaText::setCursor(int, int)
1000176d:	83 c4 10             	add    esp,0x10
10001770:	a1 00 00 00 00       	mov    eax,ds:0x0	10001771: R_386_32	term
10001775:	6a 03                	push   0x3
10001777:	6a 03                	push   0x3
10001779:	6a 20                	push   0x20
1000177b:	50                   	push   eax
1000177c:	e8 fc ff ff ff       	call   1000177d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x156>	1000177d: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001781:	83 c4 10             	add    esp,0x10
10001784:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001787:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000178a:	01 d0                	add    eax,edx
1000178c:	48                   	dec    eax
1000178d:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001790:	74 3e                	je     100017d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a9>
10001792:	a1 00 00 00 00       	mov    eax,ds:0x0	10001793: R_386_32	term
10001797:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000179a:	42                   	inc    edx
1000179b:	83 ec 04             	sub    esp,0x4
1000179e:	52                   	push   edx
1000179f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100017a2:	50                   	push   eax
100017a3:	e8 fc ff ff ff       	call   100017a4 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17d>	100017a4: R_386_PC32	VgaText::setCursor(int, int)
100017a8:	83 c4 10             	add    esp,0x10
100017ab:	a1 00 00 00 00       	mov    eax,ds:0x0	100017ac: R_386_32	term
100017b0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100017b4:	74 07                	je     100017bd <drawBasicWindowX(int, int, int, int, char const*, bool)+0x196>
100017b6:	ba 07 00 00 00       	mov    edx,0x7
100017bb:	eb 05                	jmp    100017c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x19b>
100017bd:	ba 0f 00 00 00       	mov    edx,0xf
100017c2:	52                   	push   edx
100017c3:	6a 00                	push   0x0
100017c5:	6a dd                	push   0xffffffdd
100017c7:	50                   	push   eax
100017c8:	e8 fc ff ff ff       	call   100017c9 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a2>	100017c9: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100017cd:	83 c4 10             	add    esp,0x10
100017d0:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100017d3:	e9 66 ff ff ff       	jmp    1000173e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x117>
100017d8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100017db:	83 ec 0c             	sub    esp,0xc
100017de:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100017e1:	e8 fc ff ff ff       	call   100017e2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1bb>	100017e2: R_386_PC32	strlen
100017e6:	83 c4 10             	add    esp,0x10
100017e9:	29 c3                	sub    ebx,eax
100017eb:	89 d8                	mov    eax,ebx
100017ed:	d1 e8                	shr    eax,1
100017ef:	48                   	dec    eax
100017f0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100017f3:	a1 00 00 00 00       	mov    eax,ds:0x0	100017f4: R_386_32	term
100017f8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100017fb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100017fe:	01 ca                	add    edx,ecx
10001800:	83 ec 04             	sub    esp,0x4
10001803:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001806:	52                   	push   edx
10001807:	50                   	push   eax
10001808:	e8 fc ff ff ff       	call   10001809 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1e2>	10001809: R_386_PC32	VgaText::setCursor(int, int)
1000180d:	83 c4 10             	add    esp,0x10
10001810:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10001817:	83 ec 0c             	sub    esp,0xc
1000181a:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000181d:	e8 fc ff ff ff       	call   1000181e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f7>	1000181e: R_386_PC32	strlen
10001822:	83 c4 10             	add    esp,0x10
10001825:	89 c2                	mov    edx,eax
10001827:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000182a:	39 c2                	cmp    edx,eax
1000182c:	76 25                	jbe    10001853 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x22c>
1000182e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000182f: R_386_32	term
10001833:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001836:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001839:	01 ca                	add    edx,ecx
1000183b:	8a 12                	mov    dl,BYTE PTR [edx]
1000183d:	0f be d2             	movsx  edx,dl
10001840:	6a 01                	push   0x1
10001842:	6a 0f                	push   0xf
10001844:	52                   	push   edx
10001845:	50                   	push   eax
10001846:	e8 fc ff ff ff       	call   10001847 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x220>	10001847: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000184b:	83 c4 10             	add    esp,0x10
1000184e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10001851:	eb c4                	jmp    10001817 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f0>
10001853:	90                   	nop
10001854:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001857:	c9                   	leave  
10001858:	c3                   	ret    

10001859 <drawBasicWindow(int, int, int, int, char const*)>:
10001859:	55                   	push   ebp
1000185a:	89 e5                	mov    ebp,esp
1000185c:	83 ec 08             	sub    esp,0x8
1000185f:	83 ec 08             	sub    esp,0x8
10001862:	6a 00                	push   0x0
10001864:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001867:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000186a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000186d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001870:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001873:	e8 fc ff ff ff       	call   10001874 <drawBasicWindow(int, int, int, int, char const*)+0x1b>	10001874: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10001878:	83 c4 20             	add    esp,0x20
1000187b:	90                   	nop
1000187c:	c9                   	leave  
1000187d:	c3                   	ret    

1000187e <bootInstallKeybrd(KeyboardToken, bool*)>:
1000187e:	55                   	push   ebp
1000187f:	89 e5                	mov    ebp,esp
10001881:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001884:	05 04 01 00 00       	add    eax,0x104
10001889:	8a 00                	mov    al,BYTE PTR [eax]
1000188b:	84 c0                	test   al,al
1000188d:	74 15                	je     100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
1000188f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001892:	66 83 f8 09          	cmp    ax,0x9
10001896:	75 0c                	jne    100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
10001898:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	1000189a: R_386_32	installKey
1000189f:	e9 94 00 00 00       	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018a4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
100018a7:	84 c0                	test   al,al
100018a9:	0f 85 88 00 00 00    	jne    10001937 <bootInstallKeybrd(KeyboardToken, bool*)+0xb9>
100018af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b2:	66 3d 0a 02          	cmp    ax,0x20a
100018b6:	75 09                	jne    100018c1 <bootInstallKeybrd(KeyboardToken, bool*)+0x43>
100018b8:	c6 05 00 00 00 00 1b 	mov    BYTE PTR ds:0x0,0x1b	100018ba: R_386_32	installKey
100018bf:	eb 77                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018c4:	66 3d 0d 02          	cmp    ax,0x20d
100018c8:	75 09                	jne    100018d3 <bootInstallKeybrd(KeyboardToken, bool*)+0x55>
100018ca:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	100018cc: R_386_32	installKey
100018d1:	eb 65                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018d6:	66 3d 0e 02          	cmp    ax,0x20e
100018da:	75 09                	jne    100018e5 <bootInstallKeybrd(KeyboardToken, bool*)+0x67>
100018dc:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	100018de: R_386_32	installKey
100018e3:	eb 53                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018e8:	66 3d 0b 02          	cmp    ax,0x20b
100018ec:	75 09                	jne    100018f7 <bootInstallKeybrd(KeyboardToken, bool*)+0x79>
100018ee:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100018f0: R_386_32	installKey
100018f5:	eb 41                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018fa:	66 3d 0c 02          	cmp    ax,0x20c
100018fe:	75 09                	jne    10001909 <bootInstallKeybrd(KeyboardToken, bool*)+0x8b>
10001900:	c6 05 00 00 00 00 02 	mov    BYTE PTR ds:0x0,0x2	10001902: R_386_32	installKey
10001907:	eb 2f                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000190c:	66 3d 05 02          	cmp    ax,0x205
10001910:	75 09                	jne    1000191b <bootInstallKeybrd(KeyboardToken, bool*)+0x9d>
10001912:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	10001914: R_386_32	installKey
10001919:	eb 1d                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000191b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000191e:	66 3d 05 02          	cmp    ax,0x205
10001922:	75 09                	jne    1000192d <bootInstallKeybrd(KeyboardToken, bool*)+0xaf>
10001924:	c6 05 00 00 00 00 7e 	mov    BYTE PTR ds:0x0,0x7e	10001926: R_386_32	installKey
1000192b:	eb 0b                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000192d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001930:	a2 00 00 00 00       	mov    ds:0x0,al	10001931: R_386_32	installKey
10001935:	eb 01                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001937:	90                   	nop
10001938:	5d                   	pop    ebp
10001939:	c3                   	ret    

1000193a <bootInstallTasks(int)>:
1000193a:	55                   	push   ebp
1000193b:	89 e5                	mov    ebp,esp
1000193d:	83 ec 08             	sub    esp,0x8
10001940:	a1 00 00 00 00       	mov    eax,ds:0x0	10001941: R_386_32	term
10001945:	83 ec 04             	sub    esp,0x4
10001948:	6a 08                	push   0x8
1000194a:	6a 18                	push   0x18
1000194c:	50                   	push   eax
1000194d:	e8 fc ff ff ff       	call   1000194e <bootInstallTasks(int)+0x14>	1000194e: R_386_PC32	VgaText::setCursor(int, int)
10001952:	83 c4 10             	add    esp,0x10
10001955:	a1 00 00 00 00       	mov    eax,ds:0x0	10001956: R_386_32	term
1000195a:	83 ec 08             	sub    esp,0x8
1000195d:	68 e8 9b 00 10       	push   0x10009be8	1000195e: R_386_32	.text
10001962:	50                   	push   eax
10001963:	e8 fc ff ff ff       	call   10001964 <bootInstallTasks(int)+0x2a>	10001964: R_386_PC32	VgaText::puts(char const*)
10001968:	83 c4 10             	add    esp,0x10
1000196b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000196c: R_386_32	term
10001970:	83 ec 04             	sub    esp,0x4
10001973:	6a 0a                	push   0xa
10001975:	6a 1a                	push   0x1a
10001977:	50                   	push   eax
10001978:	e8 fc ff ff ff       	call   10001979 <bootInstallTasks(int)+0x3f>	10001979: R_386_PC32	VgaText::setCursor(int, int)
1000197d:	83 c4 10             	add    esp,0x10
10001980:	a1 00 00 00 00       	mov    eax,ds:0x0	10001981: R_386_32	term
10001985:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001989:	75 07                	jne    10001992 <bootInstallTasks(int)+0x58>
1000198b:	ba 10 9c 00 10       	mov    edx,0x10009c10	1000198c: R_386_32	.text
10001990:	eb 05                	jmp    10001997 <bootInstallTasks(int)+0x5d>
10001992:	ba 13 9c 00 10       	mov    edx,0x10009c13	10001993: R_386_32	.text
10001997:	83 ec 08             	sub    esp,0x8
1000199a:	52                   	push   edx
1000199b:	50                   	push   eax
1000199c:	e8 fc ff ff ff       	call   1000199d <bootInstallTasks(int)+0x63>	1000199d: R_386_PC32	VgaText::puts(char const*)
100019a1:	83 c4 10             	add    esp,0x10
100019a4:	a1 00 00 00 00       	mov    eax,ds:0x0	100019a5: R_386_32	term
100019a9:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
100019ad:	78 07                	js     100019b6 <bootInstallTasks(int)+0x7c>
100019af:	ba 00 00 00 00       	mov    edx,0x0
100019b4:	eb 05                	jmp    100019bb <bootInstallTasks(int)+0x81>
100019b6:	ba 07 00 00 00       	mov    edx,0x7
100019bb:	6a 0f                	push   0xf
100019bd:	52                   	push   edx
100019be:	68 16 9c 00 10       	push   0x10009c16	100019bf: R_386_32	.text
100019c3:	50                   	push   eax
100019c4:	e8 fc ff ff ff       	call   100019c5 <bootInstallTasks(int)+0x8b>	100019c5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100019c9:	83 c4 10             	add    esp,0x10
100019cc:	a1 00 00 00 00       	mov    eax,ds:0x0	100019cd: R_386_32	term
100019d1:	83 ec 04             	sub    esp,0x4
100019d4:	6a 0b                	push   0xb
100019d6:	6a 1a                	push   0x1a
100019d8:	50                   	push   eax
100019d9:	e8 fc ff ff ff       	call   100019da <bootInstallTasks(int)+0xa0>	100019da: R_386_PC32	VgaText::setCursor(int, int)
100019de:	83 c4 10             	add    esp,0x10
100019e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100019e2: R_386_32	term
100019e6:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
100019ea:	75 07                	jne    100019f3 <bootInstallTasks(int)+0xb9>
100019ec:	ba 10 9c 00 10       	mov    edx,0x10009c10	100019ed: R_386_32	.text
100019f1:	eb 05                	jmp    100019f8 <bootInstallTasks(int)+0xbe>
100019f3:	ba 13 9c 00 10       	mov    edx,0x10009c13	100019f4: R_386_32	.text
100019f8:	83 ec 08             	sub    esp,0x8
100019fb:	52                   	push   edx
100019fc:	50                   	push   eax
100019fd:	e8 fc ff ff ff       	call   100019fe <bootInstallTasks(int)+0xc4>	100019fe: R_386_PC32	VgaText::puts(char const*)
10001a02:	83 c4 10             	add    esp,0x10
10001a05:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a06: R_386_32	term
10001a0a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001a0e:	7e 07                	jle    10001a17 <bootInstallTasks(int)+0xdd>
10001a10:	ba 00 00 00 00       	mov    edx,0x0
10001a15:	eb 05                	jmp    10001a1c <bootInstallTasks(int)+0xe2>
10001a17:	ba 07 00 00 00       	mov    edx,0x7
10001a1c:	6a 0f                	push   0xf
10001a1e:	52                   	push   edx
10001a1f:	68 2e 9c 00 10       	push   0x10009c2e	10001a20: R_386_32	.text
10001a24:	50                   	push   eax
10001a25:	e8 fc ff ff ff       	call   10001a26 <bootInstallTasks(int)+0xec>	10001a26: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a2a:	83 c4 10             	add    esp,0x10
10001a2d:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a2e: R_386_32	term
10001a32:	83 ec 04             	sub    esp,0x4
10001a35:	6a 0c                	push   0xc
10001a37:	6a 1a                	push   0x1a
10001a39:	50                   	push   eax
10001a3a:	e8 fc ff ff ff       	call   10001a3b <bootInstallTasks(int)+0x101>	10001a3b: R_386_PC32	VgaText::setCursor(int, int)
10001a3f:	83 c4 10             	add    esp,0x10
10001a42:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a43: R_386_32	term
10001a47:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001a4b:	75 07                	jne    10001a54 <bootInstallTasks(int)+0x11a>
10001a4d:	ba 10 9c 00 10       	mov    edx,0x10009c10	10001a4e: R_386_32	.text
10001a52:	eb 05                	jmp    10001a59 <bootInstallTasks(int)+0x11f>
10001a54:	ba 13 9c 00 10       	mov    edx,0x10009c13	10001a55: R_386_32	.text
10001a59:	83 ec 08             	sub    esp,0x8
10001a5c:	52                   	push   edx
10001a5d:	50                   	push   eax
10001a5e:	e8 fc ff ff ff       	call   10001a5f <bootInstallTasks(int)+0x125>	10001a5f: R_386_PC32	VgaText::puts(char const*)
10001a63:	83 c4 10             	add    esp,0x10
10001a66:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a67: R_386_32	term
10001a6b:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
10001a6f:	7e 07                	jle    10001a78 <bootInstallTasks(int)+0x13e>
10001a71:	ba 00 00 00 00       	mov    edx,0x0
10001a76:	eb 05                	jmp    10001a7d <bootInstallTasks(int)+0x143>
10001a78:	ba 07 00 00 00       	mov    edx,0x7
10001a7d:	6a 0f                	push   0xf
10001a7f:	52                   	push   edx
10001a80:	68 44 9c 00 10       	push   0x10009c44	10001a81: R_386_32	.text
10001a85:	50                   	push   eax
10001a86:	e8 fc ff ff ff       	call   10001a87 <bootInstallTasks(int)+0x14d>	10001a87: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a8b:	83 c4 10             	add    esp,0x10
10001a8e:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a8f: R_386_32	term
10001a93:	83 ec 04             	sub    esp,0x4
10001a96:	6a 0d                	push   0xd
10001a98:	6a 1a                	push   0x1a
10001a9a:	50                   	push   eax
10001a9b:	e8 fc ff ff ff       	call   10001a9c <bootInstallTasks(int)+0x162>	10001a9c: R_386_PC32	VgaText::setCursor(int, int)
10001aa0:	83 c4 10             	add    esp,0x10
10001aa3:	a1 00 00 00 00       	mov    eax,ds:0x0	10001aa4: R_386_32	term
10001aa8:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001aac:	75 07                	jne    10001ab5 <bootInstallTasks(int)+0x17b>
10001aae:	ba 10 9c 00 10       	mov    edx,0x10009c10	10001aaf: R_386_32	.text
10001ab3:	eb 05                	jmp    10001aba <bootInstallTasks(int)+0x180>
10001ab5:	ba 13 9c 00 10       	mov    edx,0x10009c13	10001ab6: R_386_32	.text
10001aba:	83 ec 08             	sub    esp,0x8
10001abd:	52                   	push   edx
10001abe:	50                   	push   eax
10001abf:	e8 fc ff ff ff       	call   10001ac0 <bootInstallTasks(int)+0x186>	10001ac0: R_386_PC32	VgaText::puts(char const*)
10001ac4:	83 c4 10             	add    esp,0x10
10001ac7:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ac8: R_386_32	term
10001acc:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001ad0:	7e 07                	jle    10001ad9 <bootInstallTasks(int)+0x19f>
10001ad2:	ba 00 00 00 00       	mov    edx,0x0
10001ad7:	eb 05                	jmp    10001ade <bootInstallTasks(int)+0x1a4>
10001ad9:	ba 07 00 00 00       	mov    edx,0x7
10001ade:	6a 0f                	push   0xf
10001ae0:	52                   	push   edx
10001ae1:	68 5a 9c 00 10       	push   0x10009c5a	10001ae2: R_386_32	.text
10001ae6:	50                   	push   eax
10001ae7:	e8 fc ff ff ff       	call   10001ae8 <bootInstallTasks(int)+0x1ae>	10001ae8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001aec:	83 c4 10             	add    esp,0x10
10001aef:	a1 00 00 00 00       	mov    eax,ds:0x0	10001af0: R_386_32	term
10001af4:	83 ec 04             	sub    esp,0x4
10001af7:	6a 0e                	push   0xe
10001af9:	6a 1a                	push   0x1a
10001afb:	50                   	push   eax
10001afc:	e8 fc ff ff ff       	call   10001afd <bootInstallTasks(int)+0x1c3>	10001afd: R_386_PC32	VgaText::setCursor(int, int)
10001b01:	83 c4 10             	add    esp,0x10
10001b04:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b05: R_386_32	term
10001b09:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b0d:	75 07                	jne    10001b16 <bootInstallTasks(int)+0x1dc>
10001b0f:	ba 10 9c 00 10       	mov    edx,0x10009c10	10001b10: R_386_32	.text
10001b14:	eb 05                	jmp    10001b1b <bootInstallTasks(int)+0x1e1>
10001b16:	ba 13 9c 00 10       	mov    edx,0x10009c13	10001b17: R_386_32	.text
10001b1b:	83 ec 08             	sub    esp,0x8
10001b1e:	52                   	push   edx
10001b1f:	50                   	push   eax
10001b20:	e8 fc ff ff ff       	call   10001b21 <bootInstallTasks(int)+0x1e7>	10001b21: R_386_PC32	VgaText::puts(char const*)
10001b25:	83 c4 10             	add    esp,0x10
10001b28:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b29: R_386_32	term
10001b2d:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001b31:	7e 07                	jle    10001b3a <bootInstallTasks(int)+0x200>
10001b33:	ba 00 00 00 00       	mov    edx,0x0
10001b38:	eb 05                	jmp    10001b3f <bootInstallTasks(int)+0x205>
10001b3a:	ba 07 00 00 00       	mov    edx,0x7
10001b3f:	6a 0f                	push   0xf
10001b41:	52                   	push   edx
10001b42:	68 6e 9c 00 10       	push   0x10009c6e	10001b43: R_386_32	.text
10001b47:	50                   	push   eax
10001b48:	e8 fc ff ff ff       	call   10001b49 <bootInstallTasks(int)+0x20f>	10001b49: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001b4d:	83 c4 10             	add    esp,0x10
10001b50:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b51: R_386_32	term
10001b55:	83 ec 04             	sub    esp,0x4
10001b58:	6a 0f                	push   0xf
10001b5a:	6a 1a                	push   0x1a
10001b5c:	50                   	push   eax
10001b5d:	e8 fc ff ff ff       	call   10001b5e <bootInstallTasks(int)+0x224>	10001b5e: R_386_PC32	VgaText::setCursor(int, int)
10001b62:	83 c4 10             	add    esp,0x10
10001b65:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b66: R_386_32	term
10001b6a:	83 7d 08 05          	cmp    DWORD PTR [ebp+0x8],0x5
10001b6e:	75 07                	jne    10001b77 <bootInstallTasks(int)+0x23d>
10001b70:	ba 10 9c 00 10       	mov    edx,0x10009c10	10001b71: R_386_32	.text
10001b75:	eb 05                	jmp    10001b7c <bootInstallTasks(int)+0x242>
10001b77:	ba 13 9c 00 10       	mov    edx,0x10009c13	10001b78: R_386_32	.text
10001b7c:	83 ec 08             	sub    esp,0x8
10001b7f:	52                   	push   edx
10001b80:	50                   	push   eax
10001b81:	e8 fc ff ff ff       	call   10001b82 <bootInstallTasks(int)+0x248>	10001b82: R_386_PC32	VgaText::puts(char const*)
10001b86:	83 c4 10             	add    esp,0x10
10001b89:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b8a: R_386_32	term
10001b8e:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b92:	7e 07                	jle    10001b9b <bootInstallTasks(int)+0x261>
10001b94:	ba 00 00 00 00       	mov    edx,0x0
10001b99:	eb 05                	jmp    10001ba0 <bootInstallTasks(int)+0x266>
10001b9b:	ba 07 00 00 00       	mov    edx,0x7
10001ba0:	6a 0f                	push   0xf
10001ba2:	52                   	push   edx
10001ba3:	68 86 9c 00 10       	push   0x10009c86	10001ba4: R_386_32	.text
10001ba8:	50                   	push   eax
10001ba9:	e8 fc ff ff ff       	call   10001baa <bootInstallTasks(int)+0x270>	10001baa: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001bae:	83 c4 10             	add    esp,0x10
10001bb1:	90                   	nop
10001bb2:	c9                   	leave  
10001bb3:	c3                   	ret    

10001bb4 <ror(unsigned long long, int, int)>:
10001bb4:	55                   	push   ebp
10001bb5:	89 e5                	mov    ebp,esp
10001bb7:	56                   	push   esi
10001bb8:	53                   	push   ebx
10001bb9:	83 ec 20             	sub    esp,0x20
10001bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bbf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001bc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001bc5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001bc8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001bcb:	ba 01 00 00 00       	mov    edx,0x1
10001bd0:	88 c1                	mov    cl,al
10001bd2:	d3 e2                	shl    edx,cl
10001bd4:	89 d0                	mov    eax,edx
10001bd6:	48                   	dec    eax
10001bd7:	99                   	cdq    
10001bd8:	89 c1                	mov    ecx,eax
10001bda:	23 4d e0             	and    ecx,DWORD PTR [ebp-0x20]
10001bdd:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001be0:	89 d0                	mov    eax,edx
10001be2:	23 45 e4             	and    eax,DWORD PTR [ebp-0x1c]
10001be5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001be8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10001beb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001bee:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001bf1:	0f ad d0             	shrd   eax,edx,cl
10001bf4:	d3 ea                	shr    edx,cl
10001bf6:	f6 c1 20             	test   cl,0x20
10001bf9:	74 04                	je     10001bff <ror(unsigned long long, int, int)+0x4b>
10001bfb:	89 d0                	mov    eax,edx
10001bfd:	31 d2                	xor    edx,edx
10001bff:	89 c3                	mov    ebx,eax
10001c01:	89 d6                	mov    esi,edx
10001c03:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c06:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
10001c09:	89 c1                	mov    ecx,eax
10001c0b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c0e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c11:	0f a5 c2             	shld   edx,eax,cl
10001c14:	d3 e0                	shl    eax,cl
10001c16:	f6 c1 20             	test   cl,0x20
10001c19:	74 04                	je     10001c1f <ror(unsigned long long, int, int)+0x6b>
10001c1b:	89 c2                	mov    edx,eax
10001c1d:	31 c0                	xor    eax,eax
10001c1f:	89 d1                	mov    ecx,edx
10001c21:	89 c2                	mov    edx,eax
10001c23:	89 d8                	mov    eax,ebx
10001c25:	09 d0                	or     eax,edx
10001c27:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001c2a:	89 f0                	mov    eax,esi
10001c2c:	09 c8                	or     eax,ecx
10001c2e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001c31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001c34:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001c37:	83 c4 20             	add    esp,0x20
10001c3a:	5b                   	pop    ebx
10001c3b:	5e                   	pop    esi
10001c3c:	5d                   	pop    ebp
10001c3d:	c3                   	ret    

10001c3e <swapBits(unsigned long long, unsigned long long, unsigned long long)>:
10001c3e:	55                   	push   ebp
10001c3f:	89 e5                	mov    ebp,esp
10001c41:	56                   	push   esi
10001c42:	53                   	push   ebx
10001c43:	83 ec 40             	sub    esp,0x40
10001c46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c49:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001c4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001c4f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001c52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001c55:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001c58:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c5b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001c5e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001c61:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001c64:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001c67:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001c6a:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001c6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c70:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c73:	0f ad d0             	shrd   eax,edx,cl
10001c76:	d3 ea                	shr    edx,cl
10001c78:	f6 c1 20             	test   cl,0x20
10001c7b:	74 04                	je     10001c81 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x43>
10001c7d:	89 d0                	mov    eax,edx
10001c7f:	31 d2                	xor    edx,edx
10001c81:	89 c3                	mov    ebx,eax
10001c83:	89 d6                	mov    esi,edx
10001c85:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001c88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c8b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c8e:	0f ad d0             	shrd   eax,edx,cl
10001c91:	d3 ea                	shr    edx,cl
10001c93:	f6 c1 20             	test   cl,0x20
10001c96:	74 04                	je     10001c9c <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x5e>
10001c98:	89 d0                	mov    eax,edx
10001c9a:	31 d2                	xor    edx,edx
10001c9c:	89 d1                	mov    ecx,edx
10001c9e:	89 c2                	mov    edx,eax
10001ca0:	89 d8                	mov    eax,ebx
10001ca2:	31 d0                	xor    eax,edx
10001ca4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001ca7:	89 f0                	mov    eax,esi
10001ca9:	31 c8                	xor    eax,ecx
10001cab:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001cae:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001cb1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001cb4:	89 c6                	mov    esi,eax
10001cb6:	83 e6 01             	and    esi,0x1
10001cb9:	89 75 c8             	mov    DWORD PTR [ebp-0x38],esi
10001cbc:	89 d0                	mov    eax,edx
10001cbe:	83 e0 00             	and    eax,0x0
10001cc1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001cc4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001cc7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10001cca:	89 c3                	mov    ebx,eax
10001ccc:	80 f7 00             	xor    bh,0x0
10001ccf:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
10001cd2:	89 d0                	mov    eax,edx
10001cd4:	80 f4 00             	xor    ah,0x0
10001cd7:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001cda:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10001cdd:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10001ce0:	89 c8                	mov    eax,ecx
10001ce2:	09 d0                	or     eax,edx
10001ce4:	85 c0                	test   eax,eax
10001ce6:	74 62                	je     10001d4a <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x10c>
10001ce8:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001ceb:	b8 01 00 00 00       	mov    eax,0x1
10001cf0:	ba 00 00 00 00       	mov    edx,0x0
10001cf5:	0f a5 c2             	shld   edx,eax,cl
10001cf8:	d3 e0                	shl    eax,cl
10001cfa:	f6 c1 20             	test   cl,0x20
10001cfd:	74 04                	je     10001d03 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xc5>
10001cff:	89 c2                	mov    edx,eax
10001d01:	31 c0                	xor    eax,eax
10001d03:	89 c3                	mov    ebx,eax
10001d05:	89 d6                	mov    esi,edx
10001d07:	89 d8                	mov    eax,ebx
10001d09:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001d0c:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10001d0f:	89 f0                	mov    eax,esi
10001d11:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001d14:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001d17:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001d1a:	b8 01 00 00 00       	mov    eax,0x1
10001d1f:	ba 00 00 00 00       	mov    edx,0x0
10001d24:	0f a5 c2             	shld   edx,eax,cl
10001d27:	d3 e0                	shl    eax,cl
10001d29:	f6 c1 20             	test   cl,0x20
10001d2c:	74 04                	je     10001d32 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xf4>
10001d2e:	89 c2                	mov    edx,eax
10001d30:	31 c0                	xor    eax,eax
10001d32:	89 c1                	mov    ecx,eax
10001d34:	89 d3                	mov    ebx,edx
10001d36:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001d39:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10001d3c:	89 c6                	mov    esi,eax
10001d3e:	31 ce                	xor    esi,ecx
10001d40:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10001d43:	31 d3                	xor    ebx,edx
10001d45:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10001d48:	eb 0c                	jmp    10001d56 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x118>
10001d4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001d4d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001d50:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001d53:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10001d56:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001d59:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001d5c:	83 c4 40             	add    esp,0x40
10001d5f:	5b                   	pop    ebx
10001d60:	5e                   	pop    esi
10001d61:	5d                   	pop    ebp
10001d62:	c3                   	ret    

10001d63 <getChecksum(unsigned int)>:
10001d63:	55                   	push   ebp
10001d64:	89 e5                	mov    ebp,esp
10001d66:	56                   	push   esi
10001d67:	53                   	push   ebx
10001d68:	83 ec 20             	sub    esp,0x20
10001d6b:	66 c7 45 f6 49 4e    	mov    WORD PTR [ebp-0xa],0x4e49
10001d71:	66 c7 45 f4 79 6e    	mov    WORD PTR [ebp-0xc],0x6e79
10001d77:	66 c7 45 f2 67 61    	mov    WORD PTR [ebp-0xe],0x6167
10001d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d80:	c1 e8 10             	shr    eax,0x10
10001d83:	89 c1                	mov    ecx,eax
10001d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d88:	89 c2                	mov    edx,eax
10001d8a:	89 d0                	mov    eax,edx
10001d8c:	c1 e0 06             	shl    eax,0x6
10001d8f:	29 d0                	sub    eax,edx
10001d91:	c1 e0 04             	shl    eax,0x4
10001d94:	01 d0                	add    eax,edx
10001d96:	31 c8                	xor    eax,ecx
10001d98:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
10001d9c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001da0:	0f 84 b1 00 00 00    	je     10001e57 <getChecksum(unsigned int)+0xf4>
10001da6:	b8 f4 02 00 00       	mov    eax,0x2f4
10001dab:	ba 00 00 00 00       	mov    edx,0x0
10001db0:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001db3:	89 c3                	mov    ebx,eax
10001db5:	be 00 00 00 00       	mov    esi,0x0
10001dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dbd:	ba 00 00 00 00       	mov    edx,0x0
10001dc2:	6a 1d                	push   0x1d
10001dc4:	6a 05                	push   0x5
10001dc6:	52                   	push   edx
10001dc7:	50                   	push   eax
10001dc8:	e8 fc ff ff ff       	call   10001dc9 <getChecksum(unsigned int)+0x66>	10001dc9: R_386_PC32	ror(unsigned long long, int, int)
10001dcd:	83 c4 10             	add    esp,0x10
10001dd0:	05 52 3f 04 00       	add    eax,0x43f52
10001dd5:	83 d2 00             	adc    edx,0x0
10001dd8:	89 d9                	mov    ecx,ebx
10001dda:	31 c1                	xor    ecx,eax
10001ddc:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
10001ddf:	31 d6                	xor    esi,edx
10001de1:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
10001de4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001de7:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001deb:	66 0f af c2          	imul   ax,dx
10001def:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
10001df3:	b8 ea 00 00 00       	mov    eax,0xea
10001df8:	ba 00 00 00 00       	mov    edx,0x0
10001dfd:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001e00:	89 c3                	mov    ebx,eax
10001e02:	be 00 00 00 00       	mov    esi,0x0
10001e07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e0a:	ba 00 00 00 00       	mov    edx,0x0
10001e0f:	6a 1f                	push   0x1f
10001e11:	6a 03                	push   0x3
10001e13:	52                   	push   edx
10001e14:	50                   	push   eax
10001e15:	e8 fc ff ff ff       	call   10001e16 <getChecksum(unsigned int)+0xb3>	10001e16: R_386_PC32	ror(unsigned long long, int, int)
10001e1a:	83 c4 10             	add    esp,0x10
10001e1d:	05 05 db 09 00       	add    eax,0x9db05
10001e22:	83 d2 00             	adc    edx,0x0
10001e25:	89 d9                	mov    ecx,ebx
10001e27:	31 c1                	xor    ecx,eax
10001e29:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
10001e2c:	31 d6                	xor    esi,edx
10001e2e:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10001e31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001e34:	66 29 45 f4          	sub    WORD PTR [ebp-0xc],ax
10001e38:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e3c:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e3f:	25 d2 04 00 00       	and    eax,0x4d2
10001e44:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e4b:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e4f:	d1 6d 08             	shr    DWORD PTR [ebp+0x8],1
10001e52:	e9 45 ff ff ff       	jmp    10001d9c <getChecksum(unsigned int)+0x39>
10001e57:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e5b:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e5e:	66 33 45 f2          	xor    ax,WORD PTR [ebp-0xe]
10001e62:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001e65:	0f b7 c0             	movzx  eax,ax
10001e68:	25 ff 7f 00 00       	and    eax,0x7fff
10001e6d:	8d 65 f8             	lea    esp,[ebp-0x8]
10001e70:	5b                   	pop    ebx
10001e71:	5e                   	pop    esi
10001e72:	5d                   	pop    ebp
10001e73:	c3                   	ret    

10001e74 <createKey(char*, unsigned int)>:
10001e74:	55                   	push   ebp
10001e75:	89 e5                	mov    ebp,esp
10001e77:	53                   	push   ebx
10001e78:	83 ec 34             	sub    esp,0x34
10001e7b:	68 98 9c 00 10       	push   0x10009c98	10001e7c: R_386_32	.text
10001e80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e83:	e8 fc ff ff ff       	call   10001e84 <createKey(char*, unsigned int)+0x10>	10001e84: R_386_PC32	strcpy
10001e88:	83 c4 08             	add    esp,0x8
10001e8b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10001e8e:	bb 00 00 00 00       	mov    ebx,0x0
10001e93:	89 c8                	mov    eax,ecx
10001e95:	89 da                	mov    edx,ebx
10001e97:	0f a4 c2 0f          	shld   edx,eax,0xf
10001e9b:	c1 e0 0f             	shl    eax,0xf
10001e9e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ea1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ea4:	83 ec 04             	sub    esp,0x4
10001ea7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001eaa:	e8 fc ff ff ff       	call   10001eab <createKey(char*, unsigned int)+0x37>	10001eab: R_386_PC32	getChecksum(unsigned int)
10001eaf:	83 c4 08             	add    esp,0x8
10001eb2:	ba 00 00 00 00       	mov    edx,0x0
10001eb7:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
10001eba:	09 55 f4             	or     DWORD PTR [ebp-0xc],edx
10001ebd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001ec4:	81 7d ec db 24 00 00 	cmp    DWORD PTR [ebp-0x14],0x24db
10001ecb:	7f 7f                	jg     10001f4c <createKey(char*, unsigned int)+0xd8>
10001ecd:	81 75 f0 95 38 e4 b5 	xor    DWORD PTR [ebp-0x10],0xb5e43895
10001ed4:	83 75 f4 37          	xor    DWORD PTR [ebp-0xc],0x37
10001ed8:	6a 00                	push   0x0
10001eda:	6a 08                	push   0x8
10001edc:	6a 00                	push   0x0
10001ede:	6a 03                	push   0x3
10001ee0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ee3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001ee6:	e8 fc ff ff ff       	call   10001ee7 <createKey(char*, unsigned int)+0x73>	10001ee7: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001eeb:	83 c4 18             	add    esp,0x18
10001eee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ef1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ef4:	6a 00                	push   0x0
10001ef6:	6a 0c                	push   0xc
10001ef8:	6a 00                	push   0x0
10001efa:	6a 0d                	push   0xd
10001efc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001eff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f02:	e8 fc ff ff ff       	call   10001f03 <createKey(char*, unsigned int)+0x8f>	10001f03: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f07:	83 c4 18             	add    esp,0x18
10001f0a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f0d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f10:	6a 00                	push   0x0
10001f12:	6a 16                	push   0x16
10001f14:	6a 00                	push   0x0
10001f16:	6a 25                	push   0x25
10001f18:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f1b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f1e:	e8 fc ff ff ff       	call   10001f1f <createKey(char*, unsigned int)+0xab>	10001f1f: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f23:	83 c4 18             	add    esp,0x18
10001f26:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f29:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f2c:	6a 2a                	push   0x2a
10001f2e:	6a 13                	push   0x13
10001f30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f33:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f36:	e8 fc ff ff ff       	call   10001f37 <createKey(char*, unsigned int)+0xc3>	10001f37: R_386_PC32	ror(unsigned long long, int, int)
10001f3b:	83 c4 10             	add    esp,0x10
10001f3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f41:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f44:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
10001f47:	e9 78 ff ff ff       	jmp    10001ec4 <createKey(char*, unsigned int)+0x50>
10001f4c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f4f:	83 e0 0f             	and    eax,0xf
10001f52:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001f55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f58:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f5b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f5f:	c1 ea 04             	shr    edx,0x4
10001f62:	89 c1                	mov    ecx,eax
10001f64:	89 d3                	mov    ebx,edx
10001f66:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f69:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f6c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f6f:	83 e0 0f             	and    eax,0xf
10001f72:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001f75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f78:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f7b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f7f:	c1 ea 04             	shr    edx,0x4
10001f82:	89 c1                	mov    ecx,eax
10001f84:	89 d3                	mov    ebx,edx
10001f86:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f89:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f8f:	83 e0 0f             	and    eax,0xf
10001f92:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001f95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f98:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f9b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f9f:	c1 ea 04             	shr    edx,0x4
10001fa2:	89 c1                	mov    ecx,eax
10001fa4:	89 d3                	mov    ebx,edx
10001fa6:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fa9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001faf:	25 ff 03 00 00       	and    eax,0x3ff
10001fb4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001fb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fbd:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fc1:	c1 ea 0a             	shr    edx,0xa
10001fc4:	89 c1                	mov    ecx,eax
10001fc6:	89 d3                	mov    ebx,edx
10001fc8:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fcb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fd1:	25 ff 03 00 00       	and    eax,0x3ff
10001fd6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001fd9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fdc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fdf:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fe3:	c1 ea 0a             	shr    edx,0xa
10001fe6:	89 c1                	mov    ecx,eax
10001fe8:	89 d3                	mov    ebx,edx
10001fea:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fed:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001ff0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ff3:	25 ff 03 00 00       	and    eax,0x3ff
10001ff8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001ffb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ffe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002001:	0f ac d0 0a          	shrd   eax,edx,0xa
10002005:	c1 ea 0a             	shr    edx,0xa
10002008:	89 c1                	mov    ecx,eax
1000200a:	89 d3                	mov    ebx,edx
1000200c:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
1000200f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002012:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002015:	05 00 00 00 00       	add    eax,0x0	10002016: R_386_32	lookupA
1000201a:	8a 10                	mov    dl,BYTE PTR [eax]
1000201c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000201f:	88 10                	mov    BYTE PTR [eax],dl
10002021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002024:	8d 50 01             	lea    edx,[eax+0x1]
10002027:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000202a:	05 00 00 00 00       	add    eax,0x0	1000202b: R_386_32	lookupA
1000202f:	8a 00                	mov    al,BYTE PTR [eax]
10002031:	88 02                	mov    BYTE PTR [edx],al
10002033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002036:	8d 50 0f             	lea    edx,[eax+0xf]
10002039:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000203c:	05 00 00 00 00       	add    eax,0x0	1000203d: R_386_32	lookupA
10002041:	8a 00                	mov    al,BYTE PTR [eax]
10002043:	88 02                	mov    BYTE PTR [edx],al
10002045:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002048:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
1000204d:	f7 e9                	imul   ecx
1000204f:	c1 fa 05             	sar    edx,0x5
10002052:	89 c8                	mov    eax,ecx
10002054:	c1 f8 1f             	sar    eax,0x1f
10002057:	29 c2                	sub    edx,eax
10002059:	89 d0                	mov    eax,edx
1000205b:	b9 0a 00 00 00       	mov    ecx,0xa
10002060:	99                   	cdq    
10002061:	f7 f9                	idiv   ecx
10002063:	89 d0                	mov    eax,edx
10002065:	8d 50 30             	lea    edx,[eax+0x30]
10002068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000206b:	83 c0 03             	add    eax,0x3
1000206e:	88 10                	mov    BYTE PTR [eax],dl
10002070:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002073:	b8 67 66 66 66       	mov    eax,0x66666667
10002078:	f7 e9                	imul   ecx
1000207a:	c1 fa 02             	sar    edx,0x2
1000207d:	89 c8                	mov    eax,ecx
1000207f:	c1 f8 1f             	sar    eax,0x1f
10002082:	89 d1                	mov    ecx,edx
10002084:	29 c1                	sub    ecx,eax
10002086:	b8 67 66 66 66       	mov    eax,0x66666667
1000208b:	f7 e9                	imul   ecx
1000208d:	c1 fa 02             	sar    edx,0x2
10002090:	89 c8                	mov    eax,ecx
10002092:	c1 f8 1f             	sar    eax,0x1f
10002095:	29 c2                	sub    edx,eax
10002097:	89 d0                	mov    eax,edx
10002099:	c1 e0 02             	shl    eax,0x2
1000209c:	01 d0                	add    eax,edx
1000209e:	01 c0                	add    eax,eax
100020a0:	29 c1                	sub    ecx,eax
100020a2:	89 ca                	mov    edx,ecx
100020a4:	88 d0                	mov    al,dl
100020a6:	8d 50 30             	lea    edx,[eax+0x30]
100020a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ac:	83 c0 04             	add    eax,0x4
100020af:	88 10                	mov    BYTE PTR [eax],dl
100020b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100020b4:	b9 0a 00 00 00       	mov    ecx,0xa
100020b9:	99                   	cdq    
100020ba:	f7 f9                	idiv   ecx
100020bc:	89 d0                	mov    eax,edx
100020be:	8d 50 30             	lea    edx,[eax+0x30]
100020c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020c4:	83 c0 05             	add    eax,0x5
100020c7:	88 10                	mov    BYTE PTR [eax],dl
100020c9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020cc:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100020d1:	f7 e9                	imul   ecx
100020d3:	c1 fa 05             	sar    edx,0x5
100020d6:	89 c8                	mov    eax,ecx
100020d8:	c1 f8 1f             	sar    eax,0x1f
100020db:	29 c2                	sub    edx,eax
100020dd:	89 d0                	mov    eax,edx
100020df:	b9 0a 00 00 00       	mov    ecx,0xa
100020e4:	99                   	cdq    
100020e5:	f7 f9                	idiv   ecx
100020e7:	89 d0                	mov    eax,edx
100020e9:	8d 50 30             	lea    edx,[eax+0x30]
100020ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ef:	83 c0 07             	add    eax,0x7
100020f2:	88 10                	mov    BYTE PTR [eax],dl
100020f4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020f7:	b8 67 66 66 66       	mov    eax,0x66666667
100020fc:	f7 e9                	imul   ecx
100020fe:	c1 fa 02             	sar    edx,0x2
10002101:	89 c8                	mov    eax,ecx
10002103:	c1 f8 1f             	sar    eax,0x1f
10002106:	89 d1                	mov    ecx,edx
10002108:	29 c1                	sub    ecx,eax
1000210a:	b8 67 66 66 66       	mov    eax,0x66666667
1000210f:	f7 e9                	imul   ecx
10002111:	c1 fa 02             	sar    edx,0x2
10002114:	89 c8                	mov    eax,ecx
10002116:	c1 f8 1f             	sar    eax,0x1f
10002119:	29 c2                	sub    edx,eax
1000211b:	89 d0                	mov    eax,edx
1000211d:	c1 e0 02             	shl    eax,0x2
10002120:	01 d0                	add    eax,edx
10002122:	01 c0                	add    eax,eax
10002124:	29 c1                	sub    ecx,eax
10002126:	89 ca                	mov    edx,ecx
10002128:	88 d0                	mov    al,dl
1000212a:	8d 50 30             	lea    edx,[eax+0x30]
1000212d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002130:	83 c0 08             	add    eax,0x8
10002133:	88 10                	mov    BYTE PTR [eax],dl
10002135:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002138:	b9 0a 00 00 00       	mov    ecx,0xa
1000213d:	99                   	cdq    
1000213e:	f7 f9                	idiv   ecx
10002140:	89 d0                	mov    eax,edx
10002142:	8d 50 30             	lea    edx,[eax+0x30]
10002145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002148:	83 c0 09             	add    eax,0x9
1000214b:	88 10                	mov    BYTE PTR [eax],dl
1000214d:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10002150:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002155:	f7 e9                	imul   ecx
10002157:	c1 fa 05             	sar    edx,0x5
1000215a:	89 c8                	mov    eax,ecx
1000215c:	c1 f8 1f             	sar    eax,0x1f
1000215f:	29 c2                	sub    edx,eax
10002161:	89 d0                	mov    eax,edx
10002163:	b9 0a 00 00 00       	mov    ecx,0xa
10002168:	99                   	cdq    
10002169:	f7 f9                	idiv   ecx
1000216b:	89 d0                	mov    eax,edx
1000216d:	8d 50 30             	lea    edx,[eax+0x30]
10002170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002173:	83 c0 0b             	add    eax,0xb
10002176:	88 10                	mov    BYTE PTR [eax],dl
10002178:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
1000217b:	b8 67 66 66 66       	mov    eax,0x66666667
10002180:	f7 e9                	imul   ecx
10002182:	c1 fa 02             	sar    edx,0x2
10002185:	89 c8                	mov    eax,ecx
10002187:	c1 f8 1f             	sar    eax,0x1f
1000218a:	89 d1                	mov    ecx,edx
1000218c:	29 c1                	sub    ecx,eax
1000218e:	b8 67 66 66 66       	mov    eax,0x66666667
10002193:	f7 e9                	imul   ecx
10002195:	c1 fa 02             	sar    edx,0x2
10002198:	89 c8                	mov    eax,ecx
1000219a:	c1 f8 1f             	sar    eax,0x1f
1000219d:	29 c2                	sub    edx,eax
1000219f:	89 d0                	mov    eax,edx
100021a1:	c1 e0 02             	shl    eax,0x2
100021a4:	01 d0                	add    eax,edx
100021a6:	01 c0                	add    eax,eax
100021a8:	29 c1                	sub    ecx,eax
100021aa:	89 ca                	mov    edx,ecx
100021ac:	88 d0                	mov    al,dl
100021ae:	8d 50 30             	lea    edx,[eax+0x30]
100021b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021b4:	83 c0 0c             	add    eax,0xc
100021b7:	88 10                	mov    BYTE PTR [eax],dl
100021b9:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100021bc:	b9 0a 00 00 00       	mov    ecx,0xa
100021c1:	99                   	cdq    
100021c2:	f7 f9                	idiv   ecx
100021c4:	89 d0                	mov    eax,edx
100021c6:	8d 50 30             	lea    edx,[eax+0x30]
100021c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021cc:	83 c0 0d             	add    eax,0xd
100021cf:	88 10                	mov    BYTE PTR [eax],dl
100021d1:	90                   	nop
100021d2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100021d5:	c9                   	leave  
100021d6:	c3                   	ret    

100021d7 <retrieveBits(char*)>:
100021d7:	55                   	push   ebp
100021d8:	89 e5                	mov    ebp,esp
100021da:	57                   	push   edi
100021db:	56                   	push   esi
100021dc:	53                   	push   ebx
100021dd:	83 ec 4c             	sub    esp,0x4c
100021e0:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
100021e7:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
100021ee:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [ebp-0x1c],0xffffffff
100021f5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100021fc:	83 7d e0 0f          	cmp    DWORD PTR [ebp-0x20],0xf
10002200:	7f 54                	jg     10002256 <retrieveBits(char*)+0x7f>
10002202:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002205:	05 00 00 00 00       	add    eax,0x0	10002206: R_386_32	lookupA
1000220a:	8a 10                	mov    dl,BYTE PTR [eax]
1000220c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000220f:	8a 00                	mov    al,BYTE PTR [eax]
10002211:	38 c2                	cmp    dl,al
10002213:	75 06                	jne    1000221b <retrieveBits(char*)+0x44>
10002215:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002218:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000221b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000221e:	05 00 00 00 00       	add    eax,0x0	1000221f: R_386_32	lookupB
10002223:	8a 10                	mov    dl,BYTE PTR [eax]
10002225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002228:	40                   	inc    eax
10002229:	8a 00                	mov    al,BYTE PTR [eax]
1000222b:	38 c2                	cmp    dl,al
1000222d:	75 06                	jne    10002235 <retrieveBits(char*)+0x5e>
1000222f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002232:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10002235:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002238:	05 00 00 00 00       	add    eax,0x0	10002239: R_386_32	lookupC
1000223d:	8a 10                	mov    dl,BYTE PTR [eax]
1000223f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002242:	83 c0 0f             	add    eax,0xf
10002245:	8a 00                	mov    al,BYTE PTR [eax]
10002247:	38 c2                	cmp    dl,al
10002249:	75 06                	jne    10002251 <retrieveBits(char*)+0x7a>
1000224b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000224e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002251:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10002254:	eb a6                	jmp    100021fc <retrieveBits(char*)+0x25>
10002256:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
1000225a:	74 0c                	je     10002268 <retrieveBits(char*)+0x91>
1000225c:	83 7d e8 ff          	cmp    DWORD PTR [ebp-0x18],0xffffffff
10002260:	74 06                	je     10002268 <retrieveBits(char*)+0x91>
10002262:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10002266:	75 0f                	jne    10002277 <retrieveBits(char*)+0xa0>
10002268:	b8 00 00 00 00       	mov    eax,0x0
1000226d:	ba 00 00 00 00       	mov    edx,0x0
10002272:	e9 02 02 00 00       	jmp    10002479 <retrieveBits(char*)+0x2a2>
10002277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000227a:	83 c0 03             	add    eax,0x3
1000227d:	8a 00                	mov    al,BYTE PTR [eax]
1000227f:	0f be c0             	movsx  eax,al
10002282:	8d 50 d0             	lea    edx,[eax-0x30]
10002285:	89 d0                	mov    eax,edx
10002287:	c1 e0 02             	shl    eax,0x2
1000228a:	01 d0                	add    eax,edx
1000228c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002293:	01 d0                	add    eax,edx
10002295:	c1 e0 02             	shl    eax,0x2
10002298:	89 c6                	mov    esi,eax
1000229a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000229d:	83 c0 04             	add    eax,0x4
100022a0:	8a 00                	mov    al,BYTE PTR [eax]
100022a2:	0f be c0             	movsx  eax,al
100022a5:	8d 50 d0             	lea    edx,[eax-0x30]
100022a8:	89 d0                	mov    eax,edx
100022aa:	c1 e0 02             	shl    eax,0x2
100022ad:	01 d0                	add    eax,edx
100022af:	01 c0                	add    eax,eax
100022b1:	8d 14 06             	lea    edx,[esi+eax*1]
100022b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022b7:	83 c0 05             	add    eax,0x5
100022ba:	8a 00                	mov    al,BYTE PTR [eax]
100022bc:	0f be c0             	movsx  eax,al
100022bf:	83 e8 30             	sub    eax,0x30
100022c2:	01 d0                	add    eax,edx
100022c4:	99                   	cdq    
100022c5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100022c8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100022cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022ce:	83 c0 07             	add    eax,0x7
100022d1:	8a 00                	mov    al,BYTE PTR [eax]
100022d3:	0f be c0             	movsx  eax,al
100022d6:	8d 50 d0             	lea    edx,[eax-0x30]
100022d9:	89 d0                	mov    eax,edx
100022db:	c1 e0 02             	shl    eax,0x2
100022de:	01 d0                	add    eax,edx
100022e0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100022e7:	01 d0                	add    eax,edx
100022e9:	c1 e0 02             	shl    eax,0x2
100022ec:	89 c6                	mov    esi,eax
100022ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022f1:	83 c0 08             	add    eax,0x8
100022f4:	8a 00                	mov    al,BYTE PTR [eax]
100022f6:	0f be c0             	movsx  eax,al
100022f9:	8d 50 d0             	lea    edx,[eax-0x30]
100022fc:	89 d0                	mov    eax,edx
100022fe:	c1 e0 02             	shl    eax,0x2
10002301:	01 d0                	add    eax,edx
10002303:	01 c0                	add    eax,eax
10002305:	8d 14 06             	lea    edx,[esi+eax*1]
10002308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000230b:	83 c0 09             	add    eax,0x9
1000230e:	8a 00                	mov    al,BYTE PTR [eax]
10002310:	0f be c0             	movsx  eax,al
10002313:	83 e8 30             	sub    eax,0x30
10002316:	01 d0                	add    eax,edx
10002318:	99                   	cdq    
10002319:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
1000231c:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
1000231f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002322:	83 c0 0b             	add    eax,0xb
10002325:	8a 00                	mov    al,BYTE PTR [eax]
10002327:	0f be c0             	movsx  eax,al
1000232a:	8d 50 d0             	lea    edx,[eax-0x30]
1000232d:	89 d0                	mov    eax,edx
1000232f:	c1 e0 02             	shl    eax,0x2
10002332:	01 d0                	add    eax,edx
10002334:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000233b:	01 d0                	add    eax,edx
1000233d:	c1 e0 02             	shl    eax,0x2
10002340:	89 c6                	mov    esi,eax
10002342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002345:	83 c0 0c             	add    eax,0xc
10002348:	8a 00                	mov    al,BYTE PTR [eax]
1000234a:	0f be c0             	movsx  eax,al
1000234d:	8d 50 d0             	lea    edx,[eax-0x30]
10002350:	89 d0                	mov    eax,edx
10002352:	c1 e0 02             	shl    eax,0x2
10002355:	01 d0                	add    eax,edx
10002357:	01 c0                	add    eax,eax
10002359:	8d 14 06             	lea    edx,[esi+eax*1]
1000235c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000235f:	83 c0 0d             	add    eax,0xd
10002362:	8a 00                	mov    al,BYTE PTR [eax]
10002364:	0f be c0             	movsx  eax,al
10002367:	83 e8 30             	sub    eax,0x30
1000236a:	01 d0                	add    eax,edx
1000236c:	99                   	cdq    
1000236d:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002370:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10002373:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002376:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10002379:	0f a4 c2 0a          	shld   edx,eax,0xa
1000237d:	c1 e0 0a             	shl    eax,0xa
10002380:	89 c6                	mov    esi,eax
10002382:	89 d7                	mov    edi,edx
10002384:	89 f0                	mov    eax,esi
10002386:	0b 45 c8             	or     eax,DWORD PTR [ebp-0x38]
10002389:	89 c1                	mov    ecx,eax
1000238b:	89 f8                	mov    eax,edi
1000238d:	0b 45 cc             	or     eax,DWORD PTR [ebp-0x34]
10002390:	89 c3                	mov    ebx,eax
10002392:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002395:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10002398:	0f a4 c2 14          	shld   edx,eax,0x14
1000239c:	c1 e0 14             	shl    eax,0x14
1000239f:	89 ce                	mov    esi,ecx
100023a1:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
100023a4:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100023a7:	0b 75 a8             	or     esi,DWORD PTR [ebp-0x58]
100023aa:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
100023ad:	89 d8                	mov    eax,ebx
100023af:	0b 45 ac             	or     eax,DWORD PTR [ebp-0x54]
100023b2:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100023b5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100023b8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100023bb:	0f a4 c2 0c          	shld   edx,eax,0xc
100023bf:	c1 e0 0c             	shl    eax,0xc
100023c2:	89 c3                	mov    ebx,eax
100023c4:	89 d6                	mov    esi,edx
100023c6:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
100023c9:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100023cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100023cf:	c1 e0 04             	shl    eax,0x4
100023d2:	0b 45 ec             	or     eax,DWORD PTR [ebp-0x14]
100023d5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100023d8:	c1 e2 08             	shl    edx,0x8
100023db:	09 d0                	or     eax,edx
100023dd:	99                   	cdq    
100023de:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
100023e1:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
100023e4:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
100023eb:	81 7d d4 db 24 00 00 	cmp    DWORD PTR [ebp-0x2c],0x24db
100023f2:	7f 7f                	jg     10002473 <retrieveBits(char*)+0x29c>
100023f4:	6a 2a                	push   0x2a
100023f6:	6a 13                	push   0x13
100023f8:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023fb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023fe:	e8 fc ff ff ff       	call   100023ff <retrieveBits(char*)+0x228>	100023ff: R_386_PC32	ror(unsigned long long, int, int)
10002403:	83 c4 10             	add    esp,0x10
10002406:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002409:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
1000240c:	6a 00                	push   0x0
1000240e:	6a 08                	push   0x8
10002410:	6a 00                	push   0x0
10002412:	6a 03                	push   0x3
10002414:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002417:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000241a:	e8 fc ff ff ff       	call   1000241b <retrieveBits(char*)+0x244>	1000241b: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000241f:	83 c4 18             	add    esp,0x18
10002422:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002425:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002428:	6a 00                	push   0x0
1000242a:	6a 0c                	push   0xc
1000242c:	6a 00                	push   0x0
1000242e:	6a 0d                	push   0xd
10002430:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002433:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002436:	e8 fc ff ff ff       	call   10002437 <retrieveBits(char*)+0x260>	10002437: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000243b:	83 c4 18             	add    esp,0x18
1000243e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002441:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002444:	6a 00                	push   0x0
10002446:	6a 16                	push   0x16
10002448:	6a 00                	push   0x0
1000244a:	6a 25                	push   0x25
1000244c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000244f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002452:	e8 fc ff ff ff       	call   10002453 <retrieveBits(char*)+0x27c>	10002453: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002457:	83 c4 18             	add    esp,0x18
1000245a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000245d:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002460:	81 75 d8 95 38 e4 b5 	xor    DWORD PTR [ebp-0x28],0xb5e43895
10002467:	83 75 dc 37          	xor    DWORD PTR [ebp-0x24],0x37
1000246b:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
1000246e:	e9 78 ff ff ff       	jmp    100023eb <retrieveBits(char*)+0x214>
10002473:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002476:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002479:	8d 65 f4             	lea    esp,[ebp-0xc]
1000247c:	5b                   	pop    ebx
1000247d:	5e                   	pop    esi
1000247e:	5f                   	pop    edi
1000247f:	5d                   	pop    ebp
10002480:	c3                   	ret    

10002481 <checkKey(char*)>:
10002481:	55                   	push   ebp
10002482:	89 e5                	mov    ebp,esp
10002484:	53                   	push   ebx
10002485:	83 ec 14             	sub    esp,0x14
10002488:	83 ec 04             	sub    esp,0x4
1000248b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000248e:	e8 fc ff ff ff       	call   1000248f <checkKey(char*)+0xe>	1000248f: R_386_PC32	retrieveBits(char*)
10002493:	83 c4 08             	add    esp,0x8
10002496:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002499:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000249c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000249f:	25 ff 7f 00 00       	and    eax,0x7fff
100024a4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100024a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024aa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100024ad:	0f ac d0 0f          	shrd   eax,edx,0xf
100024b1:	c1 ea 0f             	shr    edx,0xf
100024b4:	89 c1                	mov    ecx,eax
100024b6:	89 d3                	mov    ebx,edx
100024b8:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
100024bb:	83 ec 04             	sub    esp,0x4
100024be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100024c1:	e8 fc ff ff ff       	call   100024c2 <checkKey(char*)+0x41>	100024c2: R_386_PC32	getChecksum(unsigned int)
100024c6:	83 c4 08             	add    esp,0x8
100024c9:	39 45 ec             	cmp    DWORD PTR [ebp-0x14],eax
100024cc:	0f 95 c0             	setne  al
100024cf:	84 c0                	test   al,al
100024d1:	74 07                	je     100024da <checkKey(char*)+0x59>
100024d3:	b8 00 00 00 00       	mov    eax,0x0
100024d8:	eb 06                	jmp    100024e0 <checkKey(char*)+0x5f>
100024da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024dd:	83 e0 07             	and    eax,0x7
100024e0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100024e3:	c9                   	leave  
100024e4:	c3                   	ret    

100024e5 <changeKeyType(char*, int)>:
100024e5:	55                   	push   ebp
100024e6:	89 e5                	mov    ebp,esp
100024e8:	83 ec 10             	sub    esp,0x10
100024eb:	83 ec 04             	sub    esp,0x4
100024ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024f1:	e8 fc ff ff ff       	call   100024f2 <changeKeyType(char*, int)+0xd>	100024f2: R_386_PC32	retrieveBits(char*)
100024f6:	83 c4 08             	add    esp,0x8
100024f9:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
100024fc:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100024ff:	83 65 f8 f8          	and    DWORD PTR [ebp-0x8],0xfffffff8
10002503:	83 65 fc ff          	and    DWORD PTR [ebp-0x4],0xffffffff
10002507:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000250a:	99                   	cdq    
1000250b:	09 45 f8             	or     DWORD PTR [ebp-0x8],eax
1000250e:	09 55 fc             	or     DWORD PTR [ebp-0x4],edx
10002511:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10002514:	50                   	push   eax
10002515:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002518:	e8 fc ff ff ff       	call   10002519 <changeKeyType(char*, int)+0x34>	10002519: R_386_PC32	createKey(char*, unsigned int)
1000251d:	83 c4 08             	add    esp,0x8
10002520:	83 ec 04             	sub    esp,0x4
10002523:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002526:	e8 fc ff ff ff       	call   10002527 <changeKeyType(char*, int)+0x42>	10002527: R_386_PC32	checkKey(char*)
1000252b:	83 c4 08             	add    esp,0x8
1000252e:	85 c0                	test   eax,eax
10002530:	0f 95 c0             	setne  al
10002533:	c9                   	leave  
10002534:	c3                   	ret    

10002535 <checkExtendedKey(char*)>:
10002535:	55                   	push   ebp
10002536:	89 e5                	mov    ebp,esp
10002538:	83 ec 20             	sub    esp,0x20
1000253b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000253e:	8a 00                	mov    al,BYTE PTR [eax]
10002540:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10002543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002546:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
10002549:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
1000254c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000254f:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10002552:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10002555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002558:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
1000255b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000255e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002561:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10002564:	88 45 f0             	mov    BYTE PTR [ebp-0x10],al
10002567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000256a:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
1000256d:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10002570:	c6 45 f2 2d          	mov    BYTE PTR [ebp-0xe],0x2d
10002574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002577:	8a 40 06             	mov    al,BYTE PTR [eax+0x6]
1000257a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000257d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002580:	8a 40 07             	mov    al,BYTE PTR [eax+0x7]
10002583:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10002586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002589:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
1000258c:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
1000258f:	c6 45 f6 2d          	mov    BYTE PTR [ebp-0xa],0x2d
10002593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002596:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10002599:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000259c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000259f:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
100025a2:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
100025a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025a8:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
100025ab:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
100025ae:	c6 45 fa 2d          	mov    BYTE PTR [ebp-0x6],0x2d
100025b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025b5:	8a 40 0f             	mov    al,BYTE PTR [eax+0xf]
100025b8:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
100025bb:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025be:	48                   	dec    eax
100025bf:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100025c2:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025c5:	3c 2f                	cmp    al,0x2f
100025c7:	75 04                	jne    100025cd <checkExtendedKey(char*)+0x98>
100025c9:	c6 45 ef 39          	mov    BYTE PTR [ebp-0x11],0x39
100025cd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d0:	48                   	dec    eax
100025d1:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
100025d4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d7:	3c 2f                	cmp    al,0x2f
100025d9:	75 04                	jne    100025df <checkExtendedKey(char*)+0xaa>
100025db:	c6 45 f5 39          	mov    BYTE PTR [ebp-0xb],0x39
100025df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025e2:	83 c0 0d             	add    eax,0xd
100025e5:	8a 10                	mov    dl,BYTE PTR [eax]
100025e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025ea:	83 c0 0c             	add    eax,0xc
100025ed:	8a 00                	mov    al,BYTE PTR [eax]
100025ef:	38 c2                	cmp    dl,al
100025f1:	74 0a                	je     100025fd <checkExtendedKey(char*)+0xc8>
100025f3:	b8 00 00 00 00       	mov    eax,0x0
100025f8:	e9 d6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100025fd:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002600:	3c 2f                	cmp    al,0x2f
10002602:	7e 07                	jle    1000260b <checkExtendedKey(char*)+0xd6>
10002604:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002607:	3c 39                	cmp    al,0x39
10002609:	7e 0a                	jle    10002615 <checkExtendedKey(char*)+0xe0>
1000260b:	b8 00 00 00 00       	mov    eax,0x0
10002610:	e9 be 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002615:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002618:	3c 2f                	cmp    al,0x2f
1000261a:	7e 07                	jle    10002623 <checkExtendedKey(char*)+0xee>
1000261c:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
1000261f:	3c 39                	cmp    al,0x39
10002621:	7e 0a                	jle    1000262d <checkExtendedKey(char*)+0xf8>
10002623:	b8 00 00 00 00       	mov    eax,0x0
10002628:	e9 a6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000262d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002630:	3c 2f                	cmp    al,0x2f
10002632:	7e 07                	jle    1000263b <checkExtendedKey(char*)+0x106>
10002634:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002637:	3c 39                	cmp    al,0x39
10002639:	7e 0a                	jle    10002645 <checkExtendedKey(char*)+0x110>
1000263b:	b8 00 00 00 00       	mov    eax,0x0
10002640:	e9 8e 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002645:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10002648:	3c 2f                	cmp    al,0x2f
1000264a:	7e 07                	jle    10002653 <checkExtendedKey(char*)+0x11e>
1000264c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000264f:	3c 39                	cmp    al,0x39
10002651:	7e 07                	jle    1000265a <checkExtendedKey(char*)+0x125>
10002653:	b8 00 00 00 00       	mov    eax,0x0
10002658:	eb 79                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000265a:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
1000265d:	3c 2f                	cmp    al,0x2f
1000265f:	7e 07                	jle    10002668 <checkExtendedKey(char*)+0x133>
10002661:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
10002664:	3c 39                	cmp    al,0x39
10002666:	7e 07                	jle    1000266f <checkExtendedKey(char*)+0x13a>
10002668:	b8 00 00 00 00       	mov    eax,0x0
1000266d:	eb 64                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000266f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002672:	3c 2f                	cmp    al,0x2f
10002674:	7e 07                	jle    1000267d <checkExtendedKey(char*)+0x148>
10002676:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002679:	3c 39                	cmp    al,0x39
1000267b:	7e 07                	jle    10002684 <checkExtendedKey(char*)+0x14f>
1000267d:	b8 00 00 00 00       	mov    eax,0x0
10002682:	eb 4f                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002684:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10002687:	3c 2f                	cmp    al,0x2f
10002689:	7e 07                	jle    10002692 <checkExtendedKey(char*)+0x15d>
1000268b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000268e:	3c 39                	cmp    al,0x39
10002690:	7e 07                	jle    10002699 <checkExtendedKey(char*)+0x164>
10002692:	b8 00 00 00 00       	mov    eax,0x0
10002697:	eb 3a                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002699:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
1000269c:	3c 2f                	cmp    al,0x2f
1000269e:	7e 07                	jle    100026a7 <checkExtendedKey(char*)+0x172>
100026a0:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
100026a3:	3c 39                	cmp    al,0x39
100026a5:	7e 07                	jle    100026ae <checkExtendedKey(char*)+0x179>
100026a7:	b8 00 00 00 00       	mov    eax,0x0
100026ac:	eb 25                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026ae:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b1:	3c 2f                	cmp    al,0x2f
100026b3:	7e 07                	jle    100026bc <checkExtendedKey(char*)+0x187>
100026b5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b8:	3c 39                	cmp    al,0x39
100026ba:	7e 07                	jle    100026c3 <checkExtendedKey(char*)+0x18e>
100026bc:	b8 00 00 00 00       	mov    eax,0x0
100026c1:	eb 10                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026c3:	83 ec 04             	sub    esp,0x4
100026c6:	8d 45 ec             	lea    eax,[ebp-0x14]
100026c9:	50                   	push   eax
100026ca:	e8 fc ff ff ff       	call   100026cb <checkExtendedKey(char*)+0x196>	100026cb: R_386_PC32	checkKey(char*)
100026cf:	83 c4 08             	add    esp,0x8
100026d2:	90                   	nop
100026d3:	c9                   	leave  
100026d4:	c3                   	ret    

100026d5 <loadTimezoneStrings()>:
100026d5:	55                   	push   ebp
100026d6:	89 e5                	mov    ebp,esp
100026d8:	53                   	push   ebx
100026d9:	83 ec 34             	sub    esp,0x34
100026dc:	83 ec 0c             	sub    esp,0xc
100026df:	68 14 01 00 00       	push   0x114
100026e4:	e8 fc ff ff ff       	call   100026e5 <loadTimezoneStrings()+0x10>	100026e5: R_386_PC32	operator new(unsigned long)
100026e9:	83 c4 10             	add    esp,0x10
100026ec:	89 c3                	mov    ebx,eax
100026ee:	a1 00 00 00 00       	mov    eax,ds:0x0	100026ef: R_386_32	kernelProcess
100026f3:	83 ec 04             	sub    esp,0x4
100026f6:	50                   	push   eax
100026f7:	68 ac 9c 00 10       	push   0x10009cac	100026f8: R_386_32	.text
100026fc:	53                   	push   ebx
100026fd:	e8 fc ff ff ff       	call   100026fe <loadTimezoneStrings()+0x29>	100026fe: R_386_PC32	File::File(char const*, Process*)
10002702:	83 c4 10             	add    esp,0x10
10002705:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10002708:	83 ec 08             	sub    esp,0x8
1000270b:	6a 01                	push   0x1
1000270d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002710:	e8 fc ff ff ff       	call   10002711 <loadTimezoneStrings()+0x3c>	10002711: R_386_PC32	File::open(FileOpenMode)
10002715:	83 c4 10             	add    esp,0x10
10002718:	83 ec 04             	sub    esp,0x4
1000271b:	8d 45 d7             	lea    eax,[ebp-0x29]
1000271e:	50                   	push   eax
1000271f:	8d 45 d8             	lea    eax,[ebp-0x28]
10002722:	50                   	push   eax
10002723:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002726:	e8 fc ff ff ff       	call   10002727 <loadTimezoneStrings()+0x52>	10002727: R_386_PC32	File::stat(unsigned long long*, bool*)
1000272b:	83 c4 10             	add    esp,0x10
1000272e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002731:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002734:	83 ec 0c             	sub    esp,0xc
10002737:	50                   	push   eax
10002738:	e8 fc ff ff ff       	call   10002739 <loadTimezoneStrings()+0x64>	10002739: R_386_PC32	malloc
1000273d:	83 c4 10             	add    esp,0x10
10002740:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002743:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002746:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002749:	83 ec 04             	sub    esp,0x4
1000274c:	50                   	push   eax
1000274d:	6a 00                	push   0x0
1000274f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002752:	e8 fc ff ff ff       	call   10002753 <loadTimezoneStrings()+0x7e>	10002753: R_386_PC32	memset
10002757:	83 c4 10             	add    esp,0x10
1000275a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000275d:	8b 00                	mov    eax,DWORD PTR [eax]
1000275f:	83 c0 0c             	add    eax,0xc
10002762:	8b 08                	mov    ecx,DWORD PTR [eax]
10002764:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002767:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
1000276a:	83 ec 0c             	sub    esp,0xc
1000276d:	8d 5d d0             	lea    ebx,[ebp-0x30]
10002770:	53                   	push   ebx
10002771:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002774:	52                   	push   edx
10002775:	50                   	push   eax
10002776:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002779:	ff d1                	call   ecx
1000277b:	83 c4 20             	add    esp,0x20
1000277e:	83 ec 0c             	sub    esp,0xc
10002781:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002784:	e8 fc ff ff ff       	call   10002785 <loadTimezoneStrings()+0xb0>	10002785: R_386_PC32	File::close()
10002789:	83 c4 10             	add    esp,0x10
1000278c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10002793:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000279a:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
100027a1:	7f 39                	jg     100027dc <loadTimezoneStrings()+0x107>
100027a3:	83 ec 0c             	sub    esp,0xc
100027a6:	6a 78                	push   0x78
100027a8:	e8 fc ff ff ff       	call   100027a9 <loadTimezoneStrings()+0xd4>	100027a9: R_386_PC32	malloc
100027ad:	83 c4 10             	add    esp,0x10
100027b0:	89 c2                	mov    edx,eax
100027b2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027b5:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	100027b8: R_386_32	timezoneStrings
100027bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027bf:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100027c2: R_386_32	timezoneStrings
100027c6:	83 ec 08             	sub    esp,0x8
100027c9:	68 cb 9c 00 10       	push   0x10009ccb	100027ca: R_386_32	.text
100027ce:	50                   	push   eax
100027cf:	e8 fc ff ff ff       	call   100027d0 <loadTimezoneStrings()+0xfb>	100027d0: R_386_PC32	strcpy
100027d4:	83 c4 10             	add    esp,0x10
100027d7:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100027da:	eb be                	jmp    1000279a <loadTimezoneStrings()+0xc5>
100027dc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100027e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100027e6:	8d 50 01             	lea    edx,[eax+0x1]
100027e9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
100027ec:	89 c2                	mov    edx,eax
100027ee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100027f1:	01 d0                	add    eax,edx
100027f3:	8a 00                	mov    al,BYTE PTR [eax]
100027f5:	88 45 ce             	mov    BYTE PTR [ebp-0x32],al
100027f8:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
100027fc:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
100027ff:	3c 0d                	cmp    al,0xd
10002801:	0f 84 2a 01 00 00    	je     10002931 <loadTimezoneStrings()+0x25c>
10002807:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
1000280a:	3c 09                	cmp    al,0x9
1000280c:	75 3c                	jne    1000284a <loadTimezoneStrings()+0x175>
1000280e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002811:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002814: R_386_32	timezoneStrings
10002818:	83 ec 0c             	sub    esp,0xc
1000281b:	50                   	push   eax
1000281c:	e8 fc ff ff ff       	call   1000281d <loadTimezoneStrings()+0x148>	1000281d: R_386_PC32	strlen
10002821:	83 c4 10             	add    esp,0x10
10002824:	83 f8 08             	cmp    eax,0x8
10002827:	0f 87 0a 01 00 00    	ja     10002937 <loadTimezoneStrings()+0x262>
1000282d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002830:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002833: R_386_32	timezoneStrings
10002837:	83 ec 08             	sub    esp,0x8
1000283a:	68 cb 9c 00 10       	push   0x10009ccb	1000283b: R_386_32	.text
1000283f:	50                   	push   eax
10002840:	e8 fc ff ff ff       	call   10002841 <loadTimezoneStrings()+0x16c>	10002841: R_386_PC32	strcat
10002845:	83 c4 10             	add    esp,0x10
10002848:	eb c4                	jmp    1000280e <loadTimezoneStrings()+0x139>
1000284a:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
1000284d:	3c 0a                	cmp    al,0xa
1000284f:	75 67                	jne    100028b8 <loadTimezoneStrings()+0x1e3>
10002851:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002854:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002857: R_386_32	timezoneStrings
1000285b:	83 ec 0c             	sub    esp,0xc
1000285e:	50                   	push   eax
1000285f:	e8 fc ff ff ff       	call   10002860 <loadTimezoneStrings()+0x18b>	10002860: R_386_PC32	strlen
10002864:	83 c4 10             	add    esp,0x10
10002867:	83 f8 35             	cmp    eax,0x35
1000286a:	77 1d                	ja     10002889 <loadTimezoneStrings()+0x1b4>
1000286c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000286f:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002872: R_386_32	timezoneStrings
10002876:	83 ec 08             	sub    esp,0x8
10002879:	68 cb 9c 00 10       	push   0x10009ccb	1000287a: R_386_32	.text
1000287e:	50                   	push   eax
1000287f:	e8 fc ff ff ff       	call   10002880 <loadTimezoneStrings()+0x1ab>	10002880: R_386_PC32	strcat
10002884:	83 c4 10             	add    esp,0x10
10002887:	eb c8                	jmp    10002851 <loadTimezoneStrings()+0x17c>
10002889:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000288c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000288f:	99                   	cdq    
10002890:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10002893:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
10002896:	39 c8                	cmp    eax,ecx
10002898:	89 d0                	mov    eax,edx
1000289a:	19 d8                	sbb    eax,ebx
1000289c:	0f 82 9b 00 00 00    	jb     1000293d <loadTimezoneStrings()+0x268>
100028a2:	83 ec 0c             	sub    esp,0xc
100028a5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
100028a8:	e8 fc ff ff ff       	call   100028a9 <loadTimezoneStrings()+0x1d4>	100028a9: R_386_PC32	free
100028ad:	83 c4 10             	add    esp,0x10
100028b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028b3:	e9 8b 00 00 00       	jmp    10002943 <loadTimezoneStrings()+0x26e>
100028b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028bb:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028be: R_386_32	timezoneStrings
100028c2:	83 ec 0c             	sub    esp,0xc
100028c5:	50                   	push   eax
100028c6:	e8 fc ff ff ff       	call   100028c7 <loadTimezoneStrings()+0x1f2>	100028c7: R_386_PC32	strlen
100028cb:	83 c4 10             	add    esp,0x10
100028ce:	83 f8 31             	cmp    eax,0x31
100028d1:	77 1f                	ja     100028f2 <loadTimezoneStrings()+0x21d>
100028d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028d6:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028d9: R_386_32	timezoneStrings
100028dd:	83 ec 08             	sub    esp,0x8
100028e0:	8d 55 ce             	lea    edx,[ebp-0x32]
100028e3:	52                   	push   edx
100028e4:	50                   	push   eax
100028e5:	e8 fc ff ff ff       	call   100028e6 <loadTimezoneStrings()+0x211>	100028e6: R_386_PC32	strcat
100028ea:	83 c4 10             	add    esp,0x10
100028ed:	e9 f1 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
100028f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028f5:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028f8: R_386_32	timezoneStrings
100028fc:	83 ec 0c             	sub    esp,0xc
100028ff:	50                   	push   eax
10002900:	e8 fc ff ff ff       	call   10002901 <loadTimezoneStrings()+0x22c>	10002901: R_386_PC32	strlen
10002905:	83 c4 10             	add    esp,0x10
10002908:	83 f8 32             	cmp    eax,0x32
1000290b:	0f 85 d2 fe ff ff    	jne    100027e3 <loadTimezoneStrings()+0x10e>
10002911:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002914:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002917: R_386_32	timezoneStrings
1000291b:	83 ec 08             	sub    esp,0x8
1000291e:	68 cd 9c 00 10       	push   0x10009ccd	1000291f: R_386_32	.text
10002923:	50                   	push   eax
10002924:	e8 fc ff ff ff       	call   10002925 <loadTimezoneStrings()+0x250>	10002925: R_386_PC32	strcat
10002929:	83 c4 10             	add    esp,0x10
1000292c:	e9 b2 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002931:	90                   	nop
10002932:	e9 ac fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002937:	90                   	nop
10002938:	e9 a6 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
1000293d:	90                   	nop
1000293e:	e9 a0 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002943:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002946:	c9                   	leave  
10002947:	c3                   	ret    

10002948 <_bcrypt_rand>:
10002948:	55                   	push   ebp
10002949:	89 e5                	mov    ebp,esp
1000294b:	83 ec 08             	sub    esp,0x8
1000294e:	e8 fc ff ff ff       	call   1000294f <_bcrypt_rand+0x7>	1000294f: R_386_PC32	KeRand()
10002953:	c9                   	leave  
10002954:	c3                   	ret    

10002955 <firstRun(bool)>:
10002955:	55                   	push   ebp
10002956:	89 e5                	mov    ebp,esp
10002958:	57                   	push   edi
10002959:	56                   	push   esi
1000295a:	53                   	push   ebx
1000295b:	81 ec 5c 01 00 00    	sub    esp,0x15c
10002961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002964:	88 85 a4 fe ff ff    	mov    BYTE PTR [ebp-0x15c],al
1000296a:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
10002970:	83 f0 01             	xor    eax,0x1
10002973:	a2 00 00 00 00       	mov    ds:0x0,al	10002974: R_386_32	showSidebar
10002978:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000297a: R_386_32	guiKeyboardHandler
	1000297e: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
10002982:	83 ec 0c             	sub    esp,0xc
10002985:	68 d4 9c 00 10       	push   0x10009cd4	10002986: R_386_32	.text
1000298a:	e8 fc ff ff ff       	call   1000298b <firstRun(bool)+0x36>	1000298b: R_386_PC32	KeSetBootMessage(char const*)
1000298f:	83 c4 10             	add    esp,0x10
10002992:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002994: R_386_32	VgaText::hiddenOut
10002999:	a1 00 00 00 00       	mov    eax,ds:0x0	1000299a: R_386_32	activeTerminal
1000299e:	83 ec 08             	sub    esp,0x8
100029a1:	68 fd 9c 00 10       	push   0x10009cfd	100029a2: R_386_32	.text
100029a6:	50                   	push   eax
100029a7:	e8 fc ff ff ff       	call   100029a8 <firstRun(bool)+0x53>	100029a8: R_386_PC32	VgaText::puts(char const*)
100029ac:	83 c4 10             	add    esp,0x10
100029af:	a1 00 00 00 00       	mov    eax,ds:0x0	100029b0: R_386_32	kernelProcess
100029b4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
100029ba:	83 ec 08             	sub    esp,0x8
100029bd:	68 fd 9c 00 10       	push   0x10009cfd	100029be: R_386_32	.text
100029c2:	50                   	push   eax
100029c3:	e8 fc ff ff ff       	call   100029c4 <firstRun(bool)+0x6f>	100029c4: R_386_PC32	VgaText::puts(char const*)
100029c8:	83 c4 10             	add    esp,0x10
100029cb:	83 ec 0c             	sub    esp,0xc
100029ce:	68 84 01 00 00       	push   0x184
100029d3:	e8 fc ff ff ff       	call   100029d4 <firstRun(bool)+0x7f>	100029d4: R_386_PC32	operator new(unsigned long)
100029d8:	83 c4 10             	add    esp,0x10
100029db:	89 c3                	mov    ebx,eax
100029dd:	83 ec 08             	sub    esp,0x8
100029e0:	68 04 9d 00 10       	push   0x10009d04	100029e1: R_386_32	.text
100029e5:	53                   	push   ebx
100029e6:	e8 fc ff ff ff       	call   100029e7 <firstRun(bool)+0x92>	100029e7: R_386_PC32	VgaText::VgaText(char const*)
100029eb:	83 c4 10             	add    esp,0x10
100029ee:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100029f0: R_386_32	term
100029f4:	a1 00 00 00 00       	mov    eax,ds:0x0	100029f5: R_386_32	term
100029f9:	83 ec 0c             	sub    esp,0xc
100029fc:	50                   	push   eax
100029fd:	e8 fc ff ff ff       	call   100029fe <firstRun(bool)+0xa9>	100029fe: R_386_PC32	setActiveTerminal(VgaText*)
10002a02:	83 c4 10             	add    esp,0x10
10002a05:	e8 fc ff ff ff       	call   10002a06 <firstRun(bool)+0xb1>	10002a06: R_386_PC32	drawBootScreen()
10002a0a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10002a11:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10002a18:	74 17                	je     10002a31 <firstRun(bool)+0xdc>
10002a1a:	83 ec 08             	sub    esp,0x8
10002a1d:	68 09 9d 00 10       	push   0x10009d09	10002a1e: R_386_32	.text
10002a22:	68 00 00 00 00       	push   0x0	10002a23: R_386_32	pkeybuf
10002a27:	e8 fc ff ff ff       	call   10002a28 <firstRun(bool)+0xd3>	10002a28: R_386_PC32	strcpy
10002a2c:	83 c4 10             	add    esp,0x10
10002a2f:	eb 15                	jmp    10002a46 <firstRun(bool)+0xf1>
10002a31:	83 ec 08             	sub    esp,0x8
10002a34:	68 1a 9d 00 10       	push   0x10009d1a	10002a35: R_386_32	.text
10002a39:	68 00 00 00 00       	push   0x0	10002a3a: R_386_32	pkeybuf
10002a3e:	e8 fc ff ff ff       	call   10002a3f <firstRun(bool)+0xea>	10002a3f: R_386_PC32	strcpy
10002a43:	83 c4 10             	add    esp,0x10
10002a46:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
10002a4c:	83 f0 01             	xor    eax,0x1
10002a4f:	84 c0                	test   al,al
10002a51:	0f 84 23 1d 00 00    	je     1000477a <firstRun(bool)+0x1e25>
10002a57:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10002a5e:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002a60: R_386_32	tzsel
10002a68:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002a6a: R_386_32	modesel
10002a72:	eb 01                	jmp    10002a75 <firstRun(bool)+0x120>
10002a74:	90                   	nop
10002a75:	e8 fc ff ff ff       	call   10002a76 <firstRun(bool)+0x121>	10002a76: R_386_PC32	drawBootScreen()
10002a7a:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10002a81:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002a83: R_386_32	installKey
10002a88:	83 ec 0c             	sub    esp,0xc
10002a8b:	68 2b 9d 00 10       	push   0x10009d2b	10002a8c: R_386_32	.text
10002a90:	6a 12                	push   0x12
10002a92:	6a 32                	push   0x32
10002a94:	6a 03                	push   0x3
10002a96:	6a 16                	push   0x16
10002a98:	e8 fc ff ff ff       	call   10002a99 <firstRun(bool)+0x144>	10002a99: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10002a9d:	83 c4 20             	add    esp,0x20
10002aa0:	a1 00 00 00 00       	mov    eax,ds:0x0	10002aa1: R_386_32	term
10002aa5:	83 ec 04             	sub    esp,0x4
10002aa8:	6a 06                	push   0x6
10002aaa:	6a 18                	push   0x18
10002aac:	50                   	push   eax
10002aad:	e8 fc ff ff ff       	call   10002aae <firstRun(bool)+0x159>	10002aae: R_386_PC32	VgaText::setCursor(int, int)
10002ab2:	83 c4 10             	add    esp,0x10
10002ab5:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ab6: R_386_32	term
10002aba:	83 ec 08             	sub    esp,0x8
10002abd:	68 38 9d 00 10       	push   0x10009d38	10002abe: R_386_32	.text
10002ac2:	50                   	push   eax
10002ac3:	e8 fc ff ff ff       	call   10002ac4 <firstRun(bool)+0x16f>	10002ac4: R_386_PC32	VgaText::puts(char const*)
10002ac8:	83 c4 10             	add    esp,0x10
10002acb:	a1 00 00 00 00       	mov    eax,ds:0x0	10002acc: R_386_32	term
10002ad0:	83 ec 04             	sub    esp,0x4
10002ad3:	6a 07                	push   0x7
10002ad5:	6a 18                	push   0x18
10002ad7:	50                   	push   eax
10002ad8:	e8 fc ff ff ff       	call   10002ad9 <firstRun(bool)+0x184>	10002ad9: R_386_PC32	VgaText::setCursor(int, int)
10002add:	83 c4 10             	add    esp,0x10
10002ae0:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ae1: R_386_32	term
10002ae5:	83 ec 08             	sub    esp,0x8
10002ae8:	68 67 9d 00 10       	push   0x10009d67	10002ae9: R_386_32	.text
10002aed:	50                   	push   eax
10002aee:	e8 fc ff ff ff       	call   10002aef <firstRun(bool)+0x19a>	10002aef: R_386_PC32	VgaText::puts(char const*)
10002af3:	83 c4 10             	add    esp,0x10
10002af6:	a1 00 00 00 00       	mov    eax,ds:0x0	10002af7: R_386_32	term
10002afb:	83 ec 04             	sub    esp,0x4
10002afe:	6a 09                	push   0x9
10002b00:	6a 18                	push   0x18
10002b02:	50                   	push   eax
10002b03:	e8 fc ff ff ff       	call   10002b04 <firstRun(bool)+0x1af>	10002b04: R_386_PC32	VgaText::setCursor(int, int)
10002b08:	83 c4 10             	add    esp,0x10
10002b0b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b0c: R_386_32	term
10002b10:	83 ec 08             	sub    esp,0x8
10002b13:	68 77 9d 00 10       	push   0x10009d77	10002b14: R_386_32	.text
10002b18:	50                   	push   eax
10002b19:	e8 fc ff ff ff       	call   10002b1a <firstRun(bool)+0x1c5>	10002b1a: R_386_PC32	VgaText::puts(char const*)
10002b1e:	83 c4 10             	add    esp,0x10
10002b21:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b22: R_386_32	term
10002b26:	83 ec 04             	sub    esp,0x4
10002b29:	6a 0b                	push   0xb
10002b2b:	6a 18                	push   0x18
10002b2d:	50                   	push   eax
10002b2e:	e8 fc ff ff ff       	call   10002b2f <firstRun(bool)+0x1da>	10002b2f: R_386_PC32	VgaText::setCursor(int, int)
10002b33:	83 c4 10             	add    esp,0x10
10002b36:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b37: R_386_32	term
10002b3b:	83 ec 08             	sub    esp,0x8
10002b3e:	68 7c 9d 00 10       	push   0x10009d7c	10002b3f: R_386_32	.text
10002b43:	50                   	push   eax
10002b44:	e8 fc ff ff ff       	call   10002b45 <firstRun(bool)+0x1f0>	10002b45: R_386_PC32	VgaText::puts(char const*)
10002b49:	83 c4 10             	add    esp,0x10
10002b4c:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b4d: R_386_32	term
10002b51:	83 ec 04             	sub    esp,0x4
10002b54:	6a 0d                	push   0xd
10002b56:	6a 18                	push   0x18
10002b58:	50                   	push   eax
10002b59:	e8 fc ff ff ff       	call   10002b5a <firstRun(bool)+0x205>	10002b5a: R_386_PC32	VgaText::setCursor(int, int)
10002b5e:	83 c4 10             	add    esp,0x10
10002b61:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b62: R_386_32	term
10002b66:	83 ec 08             	sub    esp,0x8
10002b69:	68 84 9d 00 10       	push   0x10009d84	10002b6a: R_386_32	.text
10002b6e:	50                   	push   eax
10002b6f:	e8 fc ff ff ff       	call   10002b70 <firstRun(bool)+0x21b>	10002b70: R_386_PC32	VgaText::puts(char const*)
10002b74:	83 c4 10             	add    esp,0x10
10002b77:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b78: R_386_32	term
10002b7c:	83 ec 04             	sub    esp,0x4
10002b7f:	6a 0f                	push   0xf
10002b81:	6a 18                	push   0x18
10002b83:	50                   	push   eax
10002b84:	e8 fc ff ff ff       	call   10002b85 <firstRun(bool)+0x230>	10002b85: R_386_PC32	VgaText::setCursor(int, int)
10002b89:	83 c4 10             	add    esp,0x10
10002b8c:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b8d: R_386_32	term
10002b91:	83 ec 08             	sub    esp,0x8
10002b94:	68 8d 9d 00 10       	push   0x10009d8d	10002b95: R_386_32	.text
10002b99:	50                   	push   eax
10002b9a:	e8 fc ff ff ff       	call   10002b9b <firstRun(bool)+0x246>	10002b9b: R_386_PC32	VgaText::puts(char const*)
10002b9f:	83 c4 10             	add    esp,0x10
10002ba2:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ba3: R_386_32	term
10002ba7:	83 ec 04             	sub    esp,0x4
10002baa:	6a 10                	push   0x10
10002bac:	6a 18                	push   0x18
10002bae:	50                   	push   eax
10002baf:	e8 fc ff ff ff       	call   10002bb0 <firstRun(bool)+0x25b>	10002bb0: R_386_PC32	VgaText::setCursor(int, int)
10002bb4:	83 c4 10             	add    esp,0x10
10002bb7:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bb8: R_386_32	term
10002bbc:	83 ec 08             	sub    esp,0x8
10002bbf:	68 95 9d 00 10       	push   0x10009d95	10002bc0: R_386_32	.text
10002bc4:	50                   	push   eax
10002bc5:	e8 fc ff ff ff       	call   10002bc6 <firstRun(bool)+0x271>	10002bc6: R_386_PC32	VgaText::puts(char const*)
10002bca:	83 c4 10             	add    esp,0x10
10002bcd:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bce: R_386_32	term
10002bd2:	83 ec 04             	sub    esp,0x4
10002bd5:	6a 09                	push   0x9
10002bd7:	6a 21                	push   0x21
10002bd9:	50                   	push   eax
10002bda:	e8 fc ff ff ff       	call   10002bdb <firstRun(bool)+0x286>	10002bdb: R_386_PC32	VgaText::setCursor(int, int)
10002bdf:	83 c4 10             	add    esp,0x10
10002be2:	a1 00 00 00 00       	mov    eax,ds:0x0	10002be3: R_386_32	term
10002be7:	6a 07                	push   0x7
10002be9:	6a 00                	push   0x0
10002beb:	68 a0 9d 00 10       	push   0x10009da0	10002bec: R_386_32	.text
10002bf0:	50                   	push   eax
10002bf1:	e8 fc ff ff ff       	call   10002bf2 <firstRun(bool)+0x29d>	10002bf2: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002bf6:	83 c4 10             	add    esp,0x10
10002bf9:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bfa: R_386_32	term
10002bfe:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10002c02:	75 07                	jne    10002c0b <firstRun(bool)+0x2b6>
10002c04:	ba c5 9d 00 10       	mov    edx,0x10009dc5	10002c05: R_386_32	.text
10002c09:	eb 05                	jmp    10002c10 <firstRun(bool)+0x2bb>
10002c0b:	ba c8 9d 00 10       	mov    edx,0x10009dc8	10002c0c: R_386_32	.text
10002c10:	6a 0f                	push   0xf
10002c12:	6a 00                	push   0x0
10002c14:	52                   	push   edx
10002c15:	50                   	push   eax
10002c16:	e8 fc ff ff ff       	call   10002c17 <firstRun(bool)+0x2c2>	10002c17: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c1b:	83 c4 10             	add    esp,0x10
10002c1e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c1f: R_386_32	term
10002c23:	83 ec 08             	sub    esp,0x8
10002c26:	6a 21                	push   0x21
10002c28:	50                   	push   eax
10002c29:	e8 fc ff ff ff       	call   10002c2a <firstRun(bool)+0x2d5>	10002c2a: R_386_PC32	VgaText::setCursorX(int)
10002c2e:	83 c4 10             	add    esp,0x10
10002c31:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c32: R_386_32	term
10002c36:	6a 07                	push   0x7
10002c38:	6a 00                	push   0x0
10002c3a:	68 00 00 00 00       	push   0x0	10002c3b: R_386_32	currName
10002c3f:	50                   	push   eax
10002c40:	e8 fc ff ff ff       	call   10002c41 <firstRun(bool)+0x2ec>	10002c41: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c45:	83 c4 10             	add    esp,0x10
10002c48:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c49: R_386_32	term
10002c4d:	83 ec 04             	sub    esp,0x4
10002c50:	6a 0b                	push   0xb
10002c52:	6a 21                	push   0x21
10002c54:	50                   	push   eax
10002c55:	e8 fc ff ff ff       	call   10002c56 <firstRun(bool)+0x301>	10002c56: R_386_PC32	VgaText::setCursor(int, int)
10002c5a:	83 c4 10             	add    esp,0x10
10002c5d:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c5e: R_386_32	term
10002c62:	6a 07                	push   0x7
10002c64:	6a 00                	push   0x0
10002c66:	68 a0 9d 00 10       	push   0x10009da0	10002c67: R_386_32	.text
10002c6b:	50                   	push   eax
10002c6c:	e8 fc ff ff ff       	call   10002c6d <firstRun(bool)+0x318>	10002c6d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c71:	83 c4 10             	add    esp,0x10
10002c74:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c75: R_386_32	term
10002c79:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
10002c7d:	75 07                	jne    10002c86 <firstRun(bool)+0x331>
10002c7f:	ba c5 9d 00 10       	mov    edx,0x10009dc5	10002c80: R_386_32	.text
10002c84:	eb 05                	jmp    10002c8b <firstRun(bool)+0x336>
10002c86:	ba c8 9d 00 10       	mov    edx,0x10009dc8	10002c87: R_386_32	.text
10002c8b:	6a 0f                	push   0xf
10002c8d:	6a 00                	push   0x0
10002c8f:	52                   	push   edx
10002c90:	50                   	push   eax
10002c91:	e8 fc ff ff ff       	call   10002c92 <firstRun(bool)+0x33d>	10002c92: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c96:	83 c4 10             	add    esp,0x10
10002c99:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c9a: R_386_32	term
10002c9e:	83 ec 08             	sub    esp,0x8
10002ca1:	6a 21                	push   0x21
10002ca3:	50                   	push   eax
10002ca4:	e8 fc ff ff ff       	call   10002ca5 <firstRun(bool)+0x350>	10002ca5: R_386_PC32	VgaText::setCursorX(int)
10002ca9:	83 c4 10             	add    esp,0x10
10002cac:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cad: R_386_32	term
10002cb1:	6a 07                	push   0x7
10002cb3:	6a 00                	push   0x0
10002cb5:	68 00 00 00 00       	push   0x0	10002cb6: R_386_32	currComp
10002cba:	50                   	push   eax
10002cbb:	e8 fc ff ff ff       	call   10002cbc <firstRun(bool)+0x367>	10002cbc: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002cc0:	83 c4 10             	add    esp,0x10
10002cc3:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cc4: R_386_32	term
10002cc8:	83 ec 04             	sub    esp,0x4
10002ccb:	6a 0d                	push   0xd
10002ccd:	6a 21                	push   0x21
10002ccf:	50                   	push   eax
10002cd0:	e8 fc ff ff ff       	call   10002cd1 <firstRun(bool)+0x37c>	10002cd1: R_386_PC32	VgaText::setCursor(int, int)
10002cd5:	83 c4 10             	add    esp,0x10
10002cd8:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cd9: R_386_32	term
10002cdd:	6a 07                	push   0x7
10002cdf:	6a 00                	push   0x0
10002ce1:	68 a0 9d 00 10       	push   0x10009da0	10002ce2: R_386_32	.text
10002ce6:	50                   	push   eax
10002ce7:	e8 fc ff ff ff       	call   10002ce8 <firstRun(bool)+0x393>	10002ce8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002cec:	83 c4 10             	add    esp,0x10
10002cef:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cf0: R_386_32	term
10002cf4:	83 7d dc 02          	cmp    DWORD PTR [ebp-0x24],0x2
10002cf8:	75 07                	jne    10002d01 <firstRun(bool)+0x3ac>
10002cfa:	ba c5 9d 00 10       	mov    edx,0x10009dc5	10002cfb: R_386_32	.text
10002cff:	eb 05                	jmp    10002d06 <firstRun(bool)+0x3b1>
10002d01:	ba c8 9d 00 10       	mov    edx,0x10009dc8	10002d02: R_386_32	.text
10002d06:	6a 0f                	push   0xf
10002d08:	6a 00                	push   0x0
10002d0a:	52                   	push   edx
10002d0b:	50                   	push   eax
10002d0c:	e8 fc ff ff ff       	call   10002d0d <firstRun(bool)+0x3b8>	10002d0d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d11:	83 c4 10             	add    esp,0x10
10002d14:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d15: R_386_32	term
10002d19:	83 ec 08             	sub    esp,0x8
10002d1c:	6a 21                	push   0x21
10002d1e:	50                   	push   eax
10002d1f:	e8 fc ff ff ff       	call   10002d20 <firstRun(bool)+0x3cb>	10002d20: R_386_PC32	VgaText::setCursorX(int)
10002d24:	83 c4 10             	add    esp,0x10
10002d27:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10002d2e:	83 ec 0c             	sub    esp,0xc
10002d31:	68 00 00 00 00       	push   0x0	10002d32: R_386_32	passwbufA
10002d36:	e8 fc ff ff ff       	call   10002d37 <firstRun(bool)+0x3e2>	10002d37: R_386_PC32	strlen
10002d3b:	83 c4 10             	add    esp,0x10
10002d3e:	89 c2                	mov    edx,eax
10002d40:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10002d43:	39 c2                	cmp    edx,eax
10002d45:	76 1c                	jbe    10002d63 <firstRun(bool)+0x40e>
10002d47:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d48: R_386_32	term
10002d4c:	6a 07                	push   0x7
10002d4e:	6a 00                	push   0x0
10002d50:	68 cc 9d 00 10       	push   0x10009dcc	10002d51: R_386_32	.text
10002d55:	50                   	push   eax
10002d56:	e8 fc ff ff ff       	call   10002d57 <firstRun(bool)+0x402>	10002d57: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d5b:	83 c4 10             	add    esp,0x10
10002d5e:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10002d61:	eb cb                	jmp    10002d2e <firstRun(bool)+0x3d9>
10002d63:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d64: R_386_32	term
10002d68:	83 ec 04             	sub    esp,0x4
10002d6b:	6a 0f                	push   0xf
10002d6d:	6a 21                	push   0x21
10002d6f:	50                   	push   eax
10002d70:	e8 fc ff ff ff       	call   10002d71 <firstRun(bool)+0x41c>	10002d71: R_386_PC32	VgaText::setCursor(int, int)
10002d75:	83 c4 10             	add    esp,0x10
10002d78:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d79: R_386_32	term
10002d7d:	6a 07                	push   0x7
10002d7f:	6a 00                	push   0x0
10002d81:	68 a0 9d 00 10       	push   0x10009da0	10002d82: R_386_32	.text
10002d86:	50                   	push   eax
10002d87:	e8 fc ff ff ff       	call   10002d88 <firstRun(bool)+0x433>	10002d88: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d8c:	83 c4 10             	add    esp,0x10
10002d8f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d90: R_386_32	term
10002d94:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
10002d98:	75 07                	jne    10002da1 <firstRun(bool)+0x44c>
10002d9a:	ba c5 9d 00 10       	mov    edx,0x10009dc5	10002d9b: R_386_32	.text
10002d9f:	eb 05                	jmp    10002da6 <firstRun(bool)+0x451>
10002da1:	ba c8 9d 00 10       	mov    edx,0x10009dc8	10002da2: R_386_32	.text
10002da6:	6a 0f                	push   0xf
10002da8:	6a 00                	push   0x0
10002daa:	52                   	push   edx
10002dab:	50                   	push   eax
10002dac:	e8 fc ff ff ff       	call   10002dad <firstRun(bool)+0x458>	10002dad: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002db1:	83 c4 10             	add    esp,0x10
10002db4:	a1 00 00 00 00       	mov    eax,ds:0x0	10002db5: R_386_32	term
10002db9:	83 ec 08             	sub    esp,0x8
10002dbc:	6a 21                	push   0x21
10002dbe:	50                   	push   eax
10002dbf:	e8 fc ff ff ff       	call   10002dc0 <firstRun(bool)+0x46b>	10002dc0: R_386_PC32	VgaText::setCursorX(int)
10002dc4:	83 c4 10             	add    esp,0x10
10002dc7:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10002dce:	83 ec 0c             	sub    esp,0xc
10002dd1:	68 00 00 00 00       	push   0x0	10002dd2: R_386_32	passwbufB
10002dd6:	e8 fc ff ff ff       	call   10002dd7 <firstRun(bool)+0x482>	10002dd7: R_386_PC32	strlen
10002ddb:	83 c4 10             	add    esp,0x10
10002dde:	89 c2                	mov    edx,eax
10002de0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10002de3:	39 c2                	cmp    edx,eax
10002de5:	76 1c                	jbe    10002e03 <firstRun(bool)+0x4ae>
10002de7:	a1 00 00 00 00       	mov    eax,ds:0x0	10002de8: R_386_32	term
10002dec:	6a 07                	push   0x7
10002dee:	6a 00                	push   0x0
10002df0:	68 cc 9d 00 10       	push   0x10009dcc	10002df1: R_386_32	.text
10002df5:	50                   	push   eax
10002df6:	e8 fc ff ff ff       	call   10002df7 <firstRun(bool)+0x4a2>	10002df7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002dfb:	83 c4 10             	add    esp,0x10
10002dfe:	ff 45 d0             	inc    DWORD PTR [ebp-0x30]
10002e01:	eb cb                	jmp    10002dce <firstRun(bool)+0x479>
10002e03:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e04: R_386_32	term
10002e08:	83 ec 04             	sub    esp,0x4
10002e0b:	6a 14                	push   0x14
10002e0d:	6a 18                	push   0x18
10002e0f:	50                   	push   eax
10002e10:	e8 fc ff ff ff       	call   10002e11 <firstRun(bool)+0x4bc>	10002e11: R_386_PC32	VgaText::setCursor(int, int)
10002e15:	83 c4 10             	add    esp,0x10
10002e18:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e19: R_386_32	term
10002e1d:	83 7d dc 04          	cmp    DWORD PTR [ebp-0x24],0x4
10002e21:	75 07                	jne    10002e2a <firstRun(bool)+0x4d5>
10002e23:	ba ce 9d 00 10       	mov    edx,0x10009dce	10002e24: R_386_32	.text
10002e28:	eb 05                	jmp    10002e2f <firstRun(bool)+0x4da>
10002e2a:	ba e4 9d 00 10       	mov    edx,0x10009de4	10002e2b: R_386_32	.text
10002e2f:	6a 0f                	push   0xf
10002e31:	6a 08                	push   0x8
10002e33:	52                   	push   edx
10002e34:	50                   	push   eax
10002e35:	e8 fc ff ff ff       	call   10002e36 <firstRun(bool)+0x4e1>	10002e36: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e3a:	83 c4 10             	add    esp,0x10
10002e3d:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e3e: R_386_32	term
10002e42:	83 ec 04             	sub    esp,0x4
10002e45:	6a 14                	push   0x14
10002e47:	6a 3c                	push   0x3c
10002e49:	50                   	push   eax
10002e4a:	e8 fc ff ff ff       	call   10002e4b <firstRun(bool)+0x4f6>	10002e4b: R_386_PC32	VgaText::setCursor(int, int)
10002e4f:	83 c4 10             	add    esp,0x10
10002e52:	83 7d dc 04          	cmp    DWORD PTR [ebp-0x24],0x4
10002e56:	74 19                	je     10002e71 <firstRun(bool)+0x51c>
10002e58:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e59: R_386_32	term
10002e5d:	6a 08                	push   0x8
10002e5f:	6a 0f                	push   0xf
10002e61:	68 fb 9d 00 10       	push   0x10009dfb	10002e62: R_386_32	.text
10002e66:	50                   	push   eax
10002e67:	e8 fc ff ff ff       	call   10002e68 <firstRun(bool)+0x513>	10002e68: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e6c:	83 c4 10             	add    esp,0x10
10002e6f:	eb 17                	jmp    10002e88 <firstRun(bool)+0x533>
10002e71:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e72: R_386_32	term
10002e76:	6a 01                	push   0x1
10002e78:	6a 0f                	push   0xf
10002e7a:	68 fb 9d 00 10       	push   0x10009dfb	10002e7b: R_386_32	.text
10002e7f:	50                   	push   eax
10002e80:	e8 fc ff ff ff       	call   10002e81 <firstRun(bool)+0x52c>	10002e81: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e85:	83 c4 10             	add    esp,0x10
10002e88:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e89: R_386_32	term
10002e8d:	83 7d dc 04          	cmp    DWORD PTR [ebp-0x24],0x4
10002e91:	75 07                	jne    10002e9a <firstRun(bool)+0x545>
10002e93:	ba 04 9e 00 10       	mov    edx,0x10009e04	10002e94: R_386_32	.text
10002e98:	eb 05                	jmp    10002e9f <firstRun(bool)+0x54a>
10002e9a:	ba c8 9d 00 10       	mov    edx,0x10009dc8	10002e9b: R_386_32	.text
10002e9f:	6a 0f                	push   0xf
10002ea1:	6a 00                	push   0x0
10002ea3:	52                   	push   edx
10002ea4:	50                   	push   eax
10002ea5:	e8 fc ff ff ff       	call   10002ea6 <firstRun(bool)+0x551>	10002ea6: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002eaa:	83 c4 10             	add    esp,0x10
10002ead:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10002eb1:	75 28                	jne    10002edb <firstRun(bool)+0x586>
10002eb3:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002eb5: R_386_32	term
10002eb9:	83 ec 0c             	sub    esp,0xc
10002ebc:	68 00 00 00 00       	push   0x0	10002ebd: R_386_32	currName
10002ec1:	e8 fc ff ff ff       	call   10002ec2 <firstRun(bool)+0x56d>	10002ec2: R_386_PC32	strlen
10002ec6:	83 c4 10             	add    esp,0x10
10002ec9:	83 c0 21             	add    eax,0x21
10002ecc:	83 ec 04             	sub    esp,0x4
10002ecf:	6a 09                	push   0x9
10002ed1:	50                   	push   eax
10002ed2:	53                   	push   ebx
10002ed3:	e8 fc ff ff ff       	call   10002ed4 <firstRun(bool)+0x57f>	10002ed4: R_386_PC32	VgaText::setCursor(int, int)
10002ed8:	83 c4 10             	add    esp,0x10
10002edb:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
10002edf:	75 28                	jne    10002f09 <firstRun(bool)+0x5b4>
10002ee1:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002ee3: R_386_32	term
10002ee7:	83 ec 0c             	sub    esp,0xc
10002eea:	68 00 00 00 00       	push   0x0	10002eeb: R_386_32	currComp
10002eef:	e8 fc ff ff ff       	call   10002ef0 <firstRun(bool)+0x59b>	10002ef0: R_386_PC32	strlen
10002ef4:	83 c4 10             	add    esp,0x10
10002ef7:	83 c0 21             	add    eax,0x21
10002efa:	83 ec 04             	sub    esp,0x4
10002efd:	6a 0b                	push   0xb
10002eff:	50                   	push   eax
10002f00:	53                   	push   ebx
10002f01:	e8 fc ff ff ff       	call   10002f02 <firstRun(bool)+0x5ad>	10002f02: R_386_PC32	VgaText::setCursor(int, int)
10002f06:	83 c4 10             	add    esp,0x10
10002f09:	83 7d dc 02          	cmp    DWORD PTR [ebp-0x24],0x2
10002f0d:	75 28                	jne    10002f37 <firstRun(bool)+0x5e2>
10002f0f:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f11: R_386_32	term
10002f15:	83 ec 0c             	sub    esp,0xc
10002f18:	68 00 00 00 00       	push   0x0	10002f19: R_386_32	passwbufA
10002f1d:	e8 fc ff ff ff       	call   10002f1e <firstRun(bool)+0x5c9>	10002f1e: R_386_PC32	strlen
10002f22:	83 c4 10             	add    esp,0x10
10002f25:	83 c0 21             	add    eax,0x21
10002f28:	83 ec 04             	sub    esp,0x4
10002f2b:	6a 0d                	push   0xd
10002f2d:	50                   	push   eax
10002f2e:	53                   	push   ebx
10002f2f:	e8 fc ff ff ff       	call   10002f30 <firstRun(bool)+0x5db>	10002f30: R_386_PC32	VgaText::setCursor(int, int)
10002f34:	83 c4 10             	add    esp,0x10
10002f37:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
10002f3b:	75 28                	jne    10002f65 <firstRun(bool)+0x610>
10002f3d:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f3f: R_386_32	term
10002f43:	83 ec 0c             	sub    esp,0xc
10002f46:	68 00 00 00 00       	push   0x0	10002f47: R_386_32	passwbufB
10002f4b:	e8 fc ff ff ff       	call   10002f4c <firstRun(bool)+0x5f7>	10002f4c: R_386_PC32	strlen
10002f50:	83 c4 10             	add    esp,0x10
10002f53:	83 c0 21             	add    eax,0x21
10002f56:	83 ec 04             	sub    esp,0x4
10002f59:	6a 0f                	push   0xf
10002f5b:	50                   	push   eax
10002f5c:	53                   	push   ebx
10002f5d:	e8 fc ff ff ff       	call   10002f5e <firstRun(bool)+0x609>	10002f5e: R_386_PC32	VgaText::setCursor(int, int)
10002f62:	83 c4 10             	add    esp,0x10
10002f65:	83 7d dc 04          	cmp    DWORD PTR [ebp-0x24],0x4
10002f69:	75 15                	jne    10002f80 <firstRun(bool)+0x62b>
10002f6b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002f6c: R_386_32	term
10002f70:	83 ec 04             	sub    esp,0x4
10002f73:	6a 02                	push   0x2
10002f75:	6a 00                	push   0x0
10002f77:	50                   	push   eax
10002f78:	e8 fc ff ff ff       	call   10002f79 <firstRun(bool)+0x624>	10002f79: R_386_PC32	VgaText::setCursor(int, int)
10002f7d:	83 c4 10             	add    esp,0x10
10002f80:	a0 00 00 00 00       	mov    al,ds:0x0	10002f81: R_386_32	installKey
10002f85:	84 c0                	test   al,al
10002f87:	0f 94 c0             	sete   al
10002f8a:	84 c0                	test   al,al
10002f8c:	74 02                	je     10002f90 <firstRun(bool)+0x63b>
10002f8e:	eb f0                	jmp    10002f80 <firstRun(bool)+0x62b>
10002f90:	a1 00 00 00 00       	mov    eax,ds:0x0	10002f91: R_386_32	term
10002f95:	05 82 00 00 00       	add    eax,0x82
10002f9a:	83 ec 04             	sub    esp,0x4
10002f9d:	6a 10                	push   0x10
10002f9f:	6a 00                	push   0x0
10002fa1:	50                   	push   eax
10002fa2:	e8 fc ff ff ff       	call   10002fa3 <firstRun(bool)+0x64e>	10002fa3: R_386_PC32	memset
10002fa7:	83 c4 10             	add    esp,0x10
10002faa:	a1 00 00 00 00       	mov    eax,ds:0x0	10002fab: R_386_32	term
10002faf:	05 02 01 00 00       	add    eax,0x102
10002fb4:	83 ec 04             	sub    esp,0x4
10002fb7:	6a 10                	push   0x10
10002fb9:	6a 00                	push   0x0
10002fbb:	50                   	push   eax
10002fbc:	e8 fc ff ff ff       	call   10002fbd <firstRun(bool)+0x668>	10002fbd: R_386_PC32	memset
10002fc1:	83 c4 10             	add    esp,0x10
10002fc4:	a0 00 00 00 00       	mov    al,ds:0x0	10002fc5: R_386_32	installKey
10002fc9:	3c 09                	cmp    al,0x9
10002fcb:	74 09                	je     10002fd6 <firstRun(bool)+0x681>
10002fcd:	a0 00 00 00 00       	mov    al,ds:0x0	10002fce: R_386_32	installKey
10002fd2:	3c 0a                	cmp    al,0xa
10002fd4:	75 04                	jne    10002fda <firstRun(bool)+0x685>
10002fd6:	b0 01                	mov    al,0x1
10002fd8:	eb 02                	jmp    10002fdc <firstRun(bool)+0x687>
10002fda:	b0 00                	mov    al,0x0
10002fdc:	84 c0                	test   al,al
10002fde:	0f 84 93 00 00 00    	je     10003077 <firstRun(bool)+0x722>
10002fe4:	83 7d dc 04          	cmp    DWORD PTR [ebp-0x24],0x4
10002fe8:	75 0d                	jne    10002ff7 <firstRun(bool)+0x6a2>
10002fea:	a0 00 00 00 00       	mov    al,ds:0x0	10002feb: R_386_32	installKey
10002fef:	3c 0a                	cmp    al,0xa
10002ff1:	75 04                	jne    10002ff7 <firstRun(bool)+0x6a2>
10002ff3:	b0 01                	mov    al,0x1
10002ff5:	eb 02                	jmp    10002ff9 <firstRun(bool)+0x6a4>
10002ff7:	b0 00                	mov    al,0x0
10002ff9:	84 c0                	test   al,al
10002ffb:	74 55                	je     10003052 <firstRun(bool)+0x6fd>
10002ffd:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002fff: R_386_32	installKey
10003004:	83 ec 08             	sub    esp,0x8
10003007:	68 00 00 00 00       	push   0x0	10003008: R_386_32	passwbufB
1000300c:	68 00 00 00 00       	push   0x0	1000300d: R_386_32	passwbufA
10003011:	e8 fc ff ff ff       	call   10003012 <firstRun(bool)+0x6bd>	10003012: R_386_PC32	strcmp
10003016:	83 c4 10             	add    esp,0x10
10003019:	85 c0                	test   eax,eax
1000301b:	0f 84 c5 02 00 00    	je     100032e6 <firstRun(bool)+0x991>
10003021:	c7 45 dc 02 00 00 00 	mov    DWORD PTR [ebp-0x24],0x2
10003028:	83 ec 04             	sub    esp,0x4
1000302b:	6a 30                	push   0x30
1000302d:	6a 00                	push   0x0
1000302f:	68 00 00 00 00       	push   0x0	10003030: R_386_32	passwbufA
10003034:	e8 fc ff ff ff       	call   10003035 <firstRun(bool)+0x6e0>	10003035: R_386_PC32	memset
10003039:	83 c4 10             	add    esp,0x10
1000303c:	83 ec 04             	sub    esp,0x4
1000303f:	6a 30                	push   0x30
10003041:	6a 00                	push   0x0
10003043:	68 00 00 00 00       	push   0x0	10003044: R_386_32	passwbufB
10003048:	e8 fc ff ff ff       	call   10003049 <firstRun(bool)+0x6f4>	10003049: R_386_PC32	memset
1000304d:	83 c4 10             	add    esp,0x10
10003050:	eb 10                	jmp    10003062 <firstRun(bool)+0x70d>
10003052:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10003055:	83 7d dc 05          	cmp    DWORD PTR [ebp-0x24],0x5
10003059:	75 07                	jne    10003062 <firstRun(bool)+0x70d>
1000305b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10003062:	83 ec 0c             	sub    esp,0xc
10003065:	68 2c 01 00 00       	push   0x12c
1000306a:	e8 fc ff ff ff       	call   1000306b <firstRun(bool)+0x716>	1000306b: R_386_PC32	milliTenthSleep(unsigned int)
1000306f:	83 c4 10             	add    esp,0x10
10003072:	e9 63 02 00 00       	jmp    100032da <firstRun(bool)+0x985>
10003077:	a0 00 00 00 00       	mov    al,ds:0x0	10003078: R_386_32	installKey
1000307c:	3c 1f                	cmp    al,0x1f
1000307e:	7e 0d                	jle    1000308d <firstRun(bool)+0x738>
10003080:	a0 00 00 00 00       	mov    al,ds:0x0	10003081: R_386_32	installKey
10003085:	3c 7f                	cmp    al,0x7f
10003087:	74 04                	je     1000308d <firstRun(bool)+0x738>
10003089:	b0 01                	mov    al,0x1
1000308b:	eb 02                	jmp    1000308f <firstRun(bool)+0x73a>
1000308d:	b0 00                	mov    al,0x0
1000308f:	84 c0                	test   al,al
10003091:	0f 84 39 01 00 00    	je     100031d0 <firstRun(bool)+0x87b>
10003097:	a0 00 00 00 00       	mov    al,ds:0x0	10003098: R_386_32	installKey
1000309c:	88 85 c6 fe ff ff    	mov    BYTE PTR [ebp-0x13a],al
100030a2:	c6 85 c7 fe ff ff 00 	mov    BYTE PTR [ebp-0x139],0x0
100030a9:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100030ad:	75 7e                	jne    1000312d <firstRun(bool)+0x7d8>
100030af:	83 ec 0c             	sub    esp,0xc
100030b2:	68 00 00 00 00       	push   0x0	100030b3: R_386_32	currName
100030b7:	e8 fc ff ff ff       	call   100030b8 <firstRun(bool)+0x763>	100030b8: R_386_PC32	strlen
100030bc:	83 c4 10             	add    esp,0x10
100030bf:	83 f8 22             	cmp    eax,0x22
100030c2:	77 69                	ja     1000312d <firstRun(bool)+0x7d8>
100030c4:	a0 00 00 00 00       	mov    al,ds:0x0	100030c5: R_386_32	installKey
100030c9:	3c 40                	cmp    al,0x40
100030cb:	7e 09                	jle    100030d6 <firstRun(bool)+0x781>
100030cd:	a0 00 00 00 00       	mov    al,ds:0x0	100030ce: R_386_32	installKey
100030d2:	3c 59                	cmp    al,0x59
100030d4:	7f 36                	jg     1000310c <firstRun(bool)+0x7b7>
100030d6:	a0 00 00 00 00       	mov    al,ds:0x0	100030d7: R_386_32	installKey
100030db:	3c 60                	cmp    al,0x60
100030dd:	7e 09                	jle    100030e8 <firstRun(bool)+0x793>
100030df:	a0 00 00 00 00       	mov    al,ds:0x0	100030e0: R_386_32	installKey
100030e4:	3c 79                	cmp    al,0x79
100030e6:	7f 24                	jg     1000310c <firstRun(bool)+0x7b7>
100030e8:	a0 00 00 00 00       	mov    al,ds:0x0	100030e9: R_386_32	installKey
100030ed:	3c 2f                	cmp    al,0x2f
100030ef:	7e 09                	jle    100030fa <firstRun(bool)+0x7a5>
100030f1:	a0 00 00 00 00       	mov    al,ds:0x0	100030f2: R_386_32	installKey
100030f6:	3c 38                	cmp    al,0x38
100030f8:	7f 12                	jg     1000310c <firstRun(bool)+0x7b7>
100030fa:	a0 00 00 00 00       	mov    al,ds:0x0	100030fb: R_386_32	installKey
100030ff:	3c 5f                	cmp    al,0x5f
10003101:	74 09                	je     1000310c <firstRun(bool)+0x7b7>
10003103:	a0 00 00 00 00       	mov    al,ds:0x0	10003104: R_386_32	installKey
10003108:	3c 20                	cmp    al,0x20
1000310a:	75 04                	jne    10003110 <firstRun(bool)+0x7bb>
1000310c:	b0 01                	mov    al,0x1
1000310e:	eb 02                	jmp    10003112 <firstRun(bool)+0x7bd>
10003110:	b0 00                	mov    al,0x0
10003112:	84 c0                	test   al,al
10003114:	74 17                	je     1000312d <firstRun(bool)+0x7d8>
10003116:	83 ec 08             	sub    esp,0x8
10003119:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
1000311f:	50                   	push   eax
10003120:	68 00 00 00 00       	push   0x0	10003121: R_386_32	currName
10003125:	e8 fc ff ff ff       	call   10003126 <firstRun(bool)+0x7d1>	10003126: R_386_PC32	strcat
1000312a:	83 c4 10             	add    esp,0x10
1000312d:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
10003131:	75 2c                	jne    1000315f <firstRun(bool)+0x80a>
10003133:	83 ec 0c             	sub    esp,0xc
10003136:	68 00 00 00 00       	push   0x0	10003137: R_386_32	currComp
1000313b:	e8 fc ff ff ff       	call   1000313c <firstRun(bool)+0x7e7>	1000313c: R_386_PC32	strlen
10003140:	83 c4 10             	add    esp,0x10
10003143:	83 f8 22             	cmp    eax,0x22
10003146:	77 17                	ja     1000315f <firstRun(bool)+0x80a>
10003148:	83 ec 08             	sub    esp,0x8
1000314b:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003151:	50                   	push   eax
10003152:	68 00 00 00 00       	push   0x0	10003153: R_386_32	currComp
10003157:	e8 fc ff ff ff       	call   10003158 <firstRun(bool)+0x803>	10003158: R_386_PC32	strcat
1000315c:	83 c4 10             	add    esp,0x10
1000315f:	83 7d dc 02          	cmp    DWORD PTR [ebp-0x24],0x2
10003163:	75 2c                	jne    10003191 <firstRun(bool)+0x83c>
10003165:	83 ec 0c             	sub    esp,0xc
10003168:	68 00 00 00 00       	push   0x0	10003169: R_386_32	passwbufA
1000316d:	e8 fc ff ff ff       	call   1000316e <firstRun(bool)+0x819>	1000316e: R_386_PC32	strlen
10003172:	83 c4 10             	add    esp,0x10
10003175:	83 f8 22             	cmp    eax,0x22
10003178:	77 17                	ja     10003191 <firstRun(bool)+0x83c>
1000317a:	83 ec 08             	sub    esp,0x8
1000317d:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003183:	50                   	push   eax
10003184:	68 00 00 00 00       	push   0x0	10003185: R_386_32	passwbufA
10003189:	e8 fc ff ff ff       	call   1000318a <firstRun(bool)+0x835>	1000318a: R_386_PC32	strcat
1000318e:	83 c4 10             	add    esp,0x10
10003191:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
10003195:	0f 85 3f 01 00 00    	jne    100032da <firstRun(bool)+0x985>
1000319b:	83 ec 0c             	sub    esp,0xc
1000319e:	68 00 00 00 00       	push   0x0	1000319f: R_386_32	passwbufB
100031a3:	e8 fc ff ff ff       	call   100031a4 <firstRun(bool)+0x84f>	100031a4: R_386_PC32	strlen
100031a8:	83 c4 10             	add    esp,0x10
100031ab:	83 f8 22             	cmp    eax,0x22
100031ae:	0f 87 26 01 00 00    	ja     100032da <firstRun(bool)+0x985>
100031b4:	83 ec 08             	sub    esp,0x8
100031b7:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
100031bd:	50                   	push   eax
100031be:	68 00 00 00 00       	push   0x0	100031bf: R_386_32	passwbufB
100031c3:	e8 fc ff ff ff       	call   100031c4 <firstRun(bool)+0x86f>	100031c4: R_386_PC32	strcat
100031c8:	83 c4 10             	add    esp,0x10
100031cb:	e9 0a 01 00 00       	jmp    100032da <firstRun(bool)+0x985>
100031d0:	a0 00 00 00 00       	mov    al,ds:0x0	100031d1: R_386_32	installKey
100031d5:	3c 08                	cmp    al,0x8
100031d7:	0f 94 c0             	sete   al
100031da:	84 c0                	test   al,al
100031dc:	0f 84 ca 00 00 00    	je     100032ac <firstRun(bool)+0x957>
100031e2:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100031e6:	75 2c                	jne    10003214 <firstRun(bool)+0x8bf>
100031e8:	83 ec 0c             	sub    esp,0xc
100031eb:	68 00 00 00 00       	push   0x0	100031ec: R_386_32	currName
100031f0:	e8 fc ff ff ff       	call   100031f1 <firstRun(bool)+0x89c>	100031f1: R_386_PC32	strlen
100031f5:	83 c4 10             	add    esp,0x10
100031f8:	85 c0                	test   eax,eax
100031fa:	74 18                	je     10003214 <firstRun(bool)+0x8bf>
100031fc:	83 ec 0c             	sub    esp,0xc
100031ff:	68 00 00 00 00       	push   0x0	10003200: R_386_32	currName
10003204:	e8 fc ff ff ff       	call   10003205 <firstRun(bool)+0x8b0>	10003205: R_386_PC32	strlen
10003209:	83 c4 10             	add    esp,0x10
1000320c:	48                   	dec    eax
1000320d:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	1000320f: R_386_32	currName
10003214:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
10003218:	75 2c                	jne    10003246 <firstRun(bool)+0x8f1>
1000321a:	83 ec 0c             	sub    esp,0xc
1000321d:	68 00 00 00 00       	push   0x0	1000321e: R_386_32	currComp
10003222:	e8 fc ff ff ff       	call   10003223 <firstRun(bool)+0x8ce>	10003223: R_386_PC32	strlen
10003227:	83 c4 10             	add    esp,0x10
1000322a:	85 c0                	test   eax,eax
1000322c:	74 18                	je     10003246 <firstRun(bool)+0x8f1>
1000322e:	83 ec 0c             	sub    esp,0xc
10003231:	68 00 00 00 00       	push   0x0	10003232: R_386_32	currComp
10003236:	e8 fc ff ff ff       	call   10003237 <firstRun(bool)+0x8e2>	10003237: R_386_PC32	strlen
1000323b:	83 c4 10             	add    esp,0x10
1000323e:	48                   	dec    eax
1000323f:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003241: R_386_32	currComp
10003246:	83 7d dc 02          	cmp    DWORD PTR [ebp-0x24],0x2
1000324a:	75 2c                	jne    10003278 <firstRun(bool)+0x923>
1000324c:	83 ec 0c             	sub    esp,0xc
1000324f:	68 00 00 00 00       	push   0x0	10003250: R_386_32	passwbufA
10003254:	e8 fc ff ff ff       	call   10003255 <firstRun(bool)+0x900>	10003255: R_386_PC32	strlen
10003259:	83 c4 10             	add    esp,0x10
1000325c:	85 c0                	test   eax,eax
1000325e:	74 18                	je     10003278 <firstRun(bool)+0x923>
10003260:	83 ec 0c             	sub    esp,0xc
10003263:	68 00 00 00 00       	push   0x0	10003264: R_386_32	passwbufA
10003268:	e8 fc ff ff ff       	call   10003269 <firstRun(bool)+0x914>	10003269: R_386_PC32	strlen
1000326d:	83 c4 10             	add    esp,0x10
10003270:	48                   	dec    eax
10003271:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003273: R_386_32	passwbufA
10003278:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
1000327c:	75 5c                	jne    100032da <firstRun(bool)+0x985>
1000327e:	83 ec 0c             	sub    esp,0xc
10003281:	68 00 00 00 00       	push   0x0	10003282: R_386_32	passwbufB
10003286:	e8 fc ff ff ff       	call   10003287 <firstRun(bool)+0x932>	10003287: R_386_PC32	strlen
1000328b:	83 c4 10             	add    esp,0x10
1000328e:	85 c0                	test   eax,eax
10003290:	74 48                	je     100032da <firstRun(bool)+0x985>
10003292:	83 ec 0c             	sub    esp,0xc
10003295:	68 00 00 00 00       	push   0x0	10003296: R_386_32	passwbufB
1000329a:	e8 fc ff ff ff       	call   1000329b <firstRun(bool)+0x946>	1000329b: R_386_PC32	strlen
1000329f:	83 c4 10             	add    esp,0x10
100032a2:	48                   	dec    eax
100032a3:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	100032a5: R_386_32	passwbufB
100032aa:	eb 2e                	jmp    100032da <firstRun(bool)+0x985>
100032ac:	a0 00 00 00 00       	mov    al,ds:0x0	100032ad: R_386_32	installKey
100032b1:	3c 7f                	cmp    al,0x7f
100032b3:	0f 94 c0             	sete   al
100032b6:	84 c0                	test   al,al
100032b8:	74 20                	je     100032da <firstRun(bool)+0x985>
100032ba:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
100032bd:	83 7d dc ff          	cmp    DWORD PTR [ebp-0x24],0xffffffff
100032c1:	75 07                	jne    100032ca <firstRun(bool)+0x975>
100032c3:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100032ca:	83 ec 0c             	sub    esp,0xc
100032cd:	68 2c 01 00 00       	push   0x12c
100032d2:	e8 fc ff ff ff       	call   100032d3 <firstRun(bool)+0x97e>	100032d3: R_386_PC32	milliTenthSleep(unsigned int)
100032d7:	83 c4 10             	add    esp,0x10
100032da:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100032dc: R_386_32	installKey
100032e1:	e9 e7 f8 ff ff       	jmp    10002bcd <firstRun(bool)+0x278>
100032e6:	90                   	nop
100032e7:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100032e9: R_386_32	installKey
100032ee:	83 ec 0c             	sub    esp,0xc
100032f1:	68 d0 07 00 00       	push   0x7d0
100032f6:	e8 fc ff ff ff       	call   100032f7 <firstRun(bool)+0x9a2>	100032f7: R_386_PC32	milliTenthSleep(unsigned int)
100032fb:	83 c4 10             	add    esp,0x10
100032fe:	e8 fc ff ff ff       	call   100032ff <firstRun(bool)+0x9aa>	100032ff: R_386_PC32	drawBootScreen()
10003303:	c7 45 e0 07 00 00 00 	mov    DWORD PTR [ebp-0x20],0x7
1000330a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000330b: R_386_32	Krnl::computer
1000330f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
10003315:	83 e0 20             	and    eax,0x20
10003318:	84 c0                	test   al,al
1000331a:	75 12                	jne    1000332e <firstRun(bool)+0x9d9>
1000331c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000331d: R_386_32	Krnl::computer
10003321:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
10003327:	83 e0 40             	and    eax,0x40
1000332a:	84 c0                	test   al,al
1000332c:	74 07                	je     10003335 <firstRun(bool)+0x9e0>
1000332e:	c7 45 e0 08 00 00 00 	mov    DWORD PTR [ebp-0x20],0x8
10003335:	a1 00 00 00 00       	mov    eax,ds:0x0	10003336: R_386_32	Krnl::computer
1000333a:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
10003340:	83 e0 80             	and    eax,0xffffff80
10003343:	84 c0                	test   al,al
10003345:	74 07                	je     1000334e <firstRun(bool)+0x9f9>
10003347:	c7 45 e0 09 00 00 00 	mov    DWORD PTR [ebp-0x20],0x9
1000334e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000334f: R_386_32	Krnl::computer
10003353:	8a 80 6e 01 00 00    	mov    al,BYTE PTR [eax+0x16e]
10003359:	83 e0 02             	and    eax,0x2
1000335c:	84 c0                	test   al,al
1000335e:	75 12                	jne    10003372 <firstRun(bool)+0xa1d>
10003360:	a1 00 00 00 00       	mov    eax,ds:0x0	10003361: R_386_32	Krnl::computer
10003365:	8a 80 6d 01 00 00    	mov    al,BYTE PTR [eax+0x16d]
1000336b:	83 e0 01             	and    eax,0x1
1000336e:	84 c0                	test   al,al
10003370:	74 07                	je     10003379 <firstRun(bool)+0xa24>
10003372:	c7 45 e0 0a 00 00 00 	mov    DWORD PTR [ebp-0x20],0xa
10003379:	a1 00 00 00 00       	mov    eax,ds:0x0	1000337a: R_386_32	Krnl::computer
1000337e:	8a 80 6d 01 00 00    	mov    al,BYTE PTR [eax+0x16d]
10003384:	83 e0 20             	and    eax,0x20
10003387:	84 c0                	test   al,al
10003389:	74 07                	je     10003392 <firstRun(bool)+0xa3d>
1000338b:	c7 45 e0 0b 00 00 00 	mov    DWORD PTR [ebp-0x20],0xb
10003392:	a1 00 00 00 00       	mov    eax,ds:0x0	10003393: R_386_32	Krnl::computer
10003397:	8a 80 6d 01 00 00    	mov    al,BYTE PTR [eax+0x16d]
1000339d:	83 e0 40             	and    eax,0x40
100033a0:	84 c0                	test   al,al
100033a2:	74 07                	je     100033ab <firstRun(bool)+0xa56>
100033a4:	c7 45 e0 0c 00 00 00 	mov    DWORD PTR [ebp-0x20],0xc
100033ab:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100033ad: R_386_32	_bcrypt_errno
100033b5:	83 ec 08             	sub    esp,0x8
100033b8:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
100033be:	50                   	push   eax
100033bf:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100033c2:	e8 fc ff ff ff       	call   100033c3 <firstRun(bool)+0xa6e>	100033c3: R_386_PC32	bcrypt_gensalt
100033c7:	83 c4 10             	add    esp,0x10
100033ca:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100033cd:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100033d1:	75 09                	jne    100033dc <firstRun(bool)+0xa87>
100033d3:	a1 00 00 00 00       	mov    eax,ds:0x0	100033d4: R_386_32	_bcrypt_errno
100033d8:	85 c0                	test   eax,eax
100033da:	74 5e                	je     1000343a <firstRun(bool)+0xae5>
100033dc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100033e3:	83 ec 08             	sub    esp,0x8
100033e6:	68 08 9e 00 10       	push   0x10009e08	100033e7: R_386_32	.text
100033eb:	68 00 00 00 00       	push   0x0	100033ec: R_386_32	currName
100033f0:	e8 fc ff ff ff       	call   100033f1 <firstRun(bool)+0xa9c>	100033f1: R_386_PC32	strcpy
100033f5:	83 c4 10             	add    esp,0x10
100033f8:	83 ec 08             	sub    esp,0x8
100033fb:	68 17 9e 00 10       	push   0x10009e17	100033fc: R_386_32	.text
10003400:	68 00 00 00 00       	push   0x0	10003401: R_386_32	currComp
10003405:	e8 fc ff ff ff       	call   10003406 <firstRun(bool)+0xab1>	10003406: R_386_PC32	strcpy
1000340a:	83 c4 10             	add    esp,0x10
1000340d:	83 ec 04             	sub    esp,0x4
10003410:	6a 50                	push   0x50
10003412:	6a 00                	push   0x0
10003414:	68 00 00 00 00       	push   0x0	10003415: R_386_32	passwbufA
10003419:	e8 fc ff ff ff       	call   1000341a <firstRun(bool)+0xac5>	1000341a: R_386_PC32	memset
1000341e:	83 c4 10             	add    esp,0x10
10003421:	83 ec 04             	sub    esp,0x4
10003424:	6a 50                	push   0x50
10003426:	6a 00                	push   0x0
10003428:	68 00 00 00 00       	push   0x0	10003429: R_386_32	passwbufB
1000342d:	e8 fc ff ff ff       	call   1000342e <firstRun(bool)+0xad9>	1000342e: R_386_PC32	memset
10003432:	83 c4 10             	add    esp,0x10
10003435:	e9 3b f6 ff ff       	jmp    10002a75 <firstRun(bool)+0x120>
1000343a:	83 ec 08             	sub    esp,0x8
1000343d:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10003443:	50                   	push   eax
10003444:	68 00 00 00 00       	push   0x0	10003445: R_386_32	passwsalt
10003449:	e8 fc ff ff ff       	call   1000344a <firstRun(bool)+0xaf5>	1000344a: R_386_PC32	strcpy
1000344e:	83 c4 10             	add    esp,0x10
10003451:	83 ec 04             	sub    esp,0x4
10003454:	68 00 00 00 00       	push   0x0	10003455: R_386_32	passwhash
10003459:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
1000345f:	50                   	push   eax
10003460:	68 00 00 00 00       	push   0x0	10003461: R_386_32	passwbufA
10003465:	e8 fc ff ff ff       	call   10003466 <firstRun(bool)+0xb11>	10003466: R_386_PC32	bcrypt_hashpw
1000346a:	83 c4 10             	add    esp,0x10
1000346d:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10003470:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10003474:	75 09                	jne    1000347f <firstRun(bool)+0xb2a>
10003476:	a1 00 00 00 00       	mov    eax,ds:0x0	10003477: R_386_32	_bcrypt_errno
1000347b:	85 c0                	test   eax,eax
1000347d:	74 5e                	je     100034dd <firstRun(bool)+0xb88>
1000347f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10003486:	83 ec 08             	sub    esp,0x8
10003489:	68 08 9e 00 10       	push   0x10009e08	1000348a: R_386_32	.text
1000348e:	68 00 00 00 00       	push   0x0	1000348f: R_386_32	currName
10003493:	e8 fc ff ff ff       	call   10003494 <firstRun(bool)+0xb3f>	10003494: R_386_PC32	strcpy
10003498:	83 c4 10             	add    esp,0x10
1000349b:	83 ec 08             	sub    esp,0x8
1000349e:	68 29 9e 00 10       	push   0x10009e29	1000349f: R_386_32	.text
100034a3:	68 00 00 00 00       	push   0x0	100034a4: R_386_32	currComp
100034a8:	e8 fc ff ff ff       	call   100034a9 <firstRun(bool)+0xb54>	100034a9: R_386_PC32	strcpy
100034ad:	83 c4 10             	add    esp,0x10
100034b0:	83 ec 04             	sub    esp,0x4
100034b3:	6a 50                	push   0x50
100034b5:	6a 00                	push   0x0
100034b7:	68 00 00 00 00       	push   0x0	100034b8: R_386_32	passwbufA
100034bc:	e8 fc ff ff ff       	call   100034bd <firstRun(bool)+0xb68>	100034bd: R_386_PC32	memset
100034c1:	83 c4 10             	add    esp,0x10
100034c4:	83 ec 04             	sub    esp,0x4
100034c7:	6a 50                	push   0x50
100034c9:	6a 00                	push   0x0
100034cb:	68 00 00 00 00       	push   0x0	100034cc: R_386_32	passwbufB
100034d0:	e8 fc ff ff ff       	call   100034d1 <firstRun(bool)+0xb7c>	100034d1: R_386_PC32	memset
100034d5:	83 c4 10             	add    esp,0x10
100034d8:	e9 98 f5 ff ff       	jmp    10002a75 <firstRun(bool)+0x120>
100034dd:	83 ec 04             	sub    esp,0x4
100034e0:	6a 50                	push   0x50
100034e2:	6a 00                	push   0x0
100034e4:	68 00 00 00 00       	push   0x0	100034e5: R_386_32	passwbufA
100034e9:	e8 fc ff ff ff       	call   100034ea <firstRun(bool)+0xb95>	100034ea: R_386_PC32	memset
100034ee:	83 c4 10             	add    esp,0x10
100034f1:	83 ec 04             	sub    esp,0x4
100034f4:	6a 50                	push   0x50
100034f6:	6a 00                	push   0x0
100034f8:	68 00 00 00 00       	push   0x0	100034f9: R_386_32	passwbufB
100034fd:	e8 fc ff ff ff       	call   100034fe <firstRun(bool)+0xba9>	100034fe: R_386_PC32	memset
10003502:	83 c4 10             	add    esp,0x10
10003505:	83 ec 0c             	sub    esp,0xc
10003508:	68 d0 07 00 00       	push   0x7d0
1000350d:	e8 fc ff ff ff       	call   1000350e <firstRun(bool)+0xbb9>	1000350e: R_386_PC32	milliTenthSleep(unsigned int)
10003512:	83 c4 10             	add    esp,0x10
10003515:	eb 01                	jmp    10003518 <firstRun(bool)+0xbc3>
10003517:	90                   	nop
10003518:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000351a: R_386_32	installKey
1000351f:	e8 fc ff ff ff       	call   10003520 <firstRun(bool)+0xbcb>	10003520: R_386_PC32	drawBootScreen()
10003524:	83 ec 0c             	sub    esp,0xc
10003527:	68 3b 9e 00 10       	push   0x10009e3b	10003528: R_386_32	.text
1000352c:	6a 0d                	push   0xd
1000352e:	6a 32                	push   0x32
10003530:	6a 02                	push   0x2
10003532:	6a 16                	push   0x16
10003534:	e8 fc ff ff ff       	call   10003535 <firstRun(bool)+0xbe0>	10003535: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003539:	83 c4 20             	add    esp,0x20
1000353c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000353d: R_386_32	Krnl::computer
10003541:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
10003547:	a1 00 00 00 00       	mov    eax,ds:0x0	10003548: R_386_32	Krnl::computer
1000354c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10003552:	8b 00                	mov    eax,DWORD PTR [eax]
10003554:	83 c0 28             	add    eax,0x28
10003557:	8b 00                	mov    eax,DWORD PTR [eax]
10003559:	8d 95 98 fe ff ff    	lea    edx,[ebp-0x168]
1000355f:	83 ec 08             	sub    esp,0x8
10003562:	51                   	push   ecx
10003563:	52                   	push   edx
10003564:	ff d0                	call   eax
10003566:	83 c4 0c             	add    esp,0xc
10003569:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [ebp-0x168]
1000356f:	8b 95 9c fe ff ff    	mov    edx,DWORD PTR [ebp-0x164]
10003575:	89 85 d4 fe ff ff    	mov    DWORD PTR [ebp-0x12c],eax
1000357b:	89 95 d8 fe ff ff    	mov    DWORD PTR [ebp-0x128],edx
10003581:	83 ec 08             	sub    esp,0x8
10003584:	68 49 9e 00 10       	push   0x10009e49	10003585: R_386_32	.text
10003589:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
1000358f:	50                   	push   eax
10003590:	e8 fc ff ff ff       	call   10003591 <firstRun(bool)+0xc3c>	10003591: R_386_PC32	strcpy
10003595:	83 c4 10             	add    esp,0x10
10003598:	8a 85 d4 fe ff ff    	mov    al,BYTE PTR [ebp-0x12c]
1000359e:	0f b6 d0             	movzx  edx,al
100035a1:	89 d0                	mov    eax,edx
100035a3:	c1 e0 02             	shl    eax,0x2
100035a6:	01 d0                	add    eax,edx
100035a8:	c1 e0 03             	shl    eax,0x3
100035ab:	01 d0                	add    eax,edx
100035ad:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100035b4:	01 d0                	add    eax,edx
100035b6:	66 c1 e8 08          	shr    ax,0x8
100035ba:	c0 e8 03             	shr    al,0x3
100035bd:	83 c0 30             	add    eax,0x30
100035c0:	88 85 40 ff ff ff    	mov    BYTE PTR [ebp-0xc0],al
100035c6:	8a 8d d4 fe ff ff    	mov    cl,BYTE PTR [ebp-0x12c]
100035cc:	0f b6 d1             	movzx  edx,cl
100035cf:	89 d0                	mov    eax,edx
100035d1:	c1 e0 02             	shl    eax,0x2
100035d4:	01 d0                	add    eax,edx
100035d6:	c1 e0 03             	shl    eax,0x3
100035d9:	01 d0                	add    eax,edx
100035db:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100035e2:	01 d0                	add    eax,edx
100035e4:	66 c1 e8 08          	shr    ax,0x8
100035e8:	88 c2                	mov    dl,al
100035ea:	c0 ea 03             	shr    dl,0x3
100035ed:	88 d0                	mov    al,dl
100035ef:	c1 e0 02             	shl    eax,0x2
100035f2:	01 d0                	add    eax,edx
100035f4:	d1 e0                	shl    eax,1
100035f6:	29 c1                	sub    ecx,eax
100035f8:	88 ca                	mov    dl,cl
100035fa:	8d 42 30             	lea    eax,[edx+0x30]
100035fd:	88 85 41 ff ff ff    	mov    BYTE PTR [ebp-0xbf],al
10003603:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
10003609:	0f b6 c8             	movzx  ecx,al
1000360c:	b8 67 66 66 66       	mov    eax,0x66666667
10003611:	f7 e9                	imul   ecx
10003613:	c1 fa 02             	sar    edx,0x2
10003616:	89 c8                	mov    eax,ecx
10003618:	c1 f8 1f             	sar    eax,0x1f
1000361b:	29 c2                	sub    edx,eax
1000361d:	89 d0                	mov    eax,edx
1000361f:	83 c0 30             	add    eax,0x30
10003622:	88 85 43 ff ff ff    	mov    BYTE PTR [ebp-0xbd],al
10003628:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
1000362e:	0f b6 c8             	movzx  ecx,al
10003631:	b8 67 66 66 66       	mov    eax,0x66666667
10003636:	f7 e9                	imul   ecx
10003638:	c1 fa 02             	sar    edx,0x2
1000363b:	89 c8                	mov    eax,ecx
1000363d:	c1 f8 1f             	sar    eax,0x1f
10003640:	29 c2                	sub    edx,eax
10003642:	89 d0                	mov    eax,edx
10003644:	c1 e0 02             	shl    eax,0x2
10003647:	01 d0                	add    eax,edx
10003649:	01 c0                	add    eax,eax
1000364b:	29 c1                	sub    ecx,eax
1000364d:	89 ca                	mov    edx,ecx
1000364f:	88 d0                	mov    al,dl
10003651:	83 c0 30             	add    eax,0x30
10003654:	88 85 44 ff ff ff    	mov    BYTE PTR [ebp-0xbc],al
1000365a:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003661:	0f b7 c8             	movzx  ecx,ax
10003664:	b8 d3 4d 62 10       	mov    eax,0x10624dd3
10003669:	f7 e9                	imul   ecx
1000366b:	c1 fa 06             	sar    edx,0x6
1000366e:	89 c8                	mov    eax,ecx
10003670:	c1 f8 1f             	sar    eax,0x1f
10003673:	29 c2                	sub    edx,eax
10003675:	89 d0                	mov    eax,edx
10003677:	b9 0a 00 00 00       	mov    ecx,0xa
1000367c:	99                   	cdq    
1000367d:	f7 f9                	idiv   ecx
1000367f:	89 d0                	mov    eax,edx
10003681:	83 c0 30             	add    eax,0x30
10003684:	88 85 46 ff ff ff    	mov    BYTE PTR [ebp-0xba],al
1000368a:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003691:	0f b7 c8             	movzx  ecx,ax
10003694:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10003699:	f7 e9                	imul   ecx
1000369b:	c1 fa 05             	sar    edx,0x5
1000369e:	89 c8                	mov    eax,ecx
100036a0:	c1 f8 1f             	sar    eax,0x1f
100036a3:	29 c2                	sub    edx,eax
100036a5:	89 d0                	mov    eax,edx
100036a7:	b9 0a 00 00 00       	mov    ecx,0xa
100036ac:	99                   	cdq    
100036ad:	f7 f9                	idiv   ecx
100036af:	89 d0                	mov    eax,edx
100036b1:	83 c0 30             	add    eax,0x30
100036b4:	88 85 47 ff ff ff    	mov    BYTE PTR [ebp-0xb9],al
100036ba:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
100036c1:	0f b7 c8             	movzx  ecx,ax
100036c4:	b8 67 66 66 66       	mov    eax,0x66666667
100036c9:	f7 e9                	imul   ecx
100036cb:	c1 fa 02             	sar    edx,0x2
100036ce:	89 c8                	mov    eax,ecx
100036d0:	c1 f8 1f             	sar    eax,0x1f
100036d3:	89 d1                	mov    ecx,edx
100036d5:	29 c1                	sub    ecx,eax
100036d7:	b8 67 66 66 66       	mov    eax,0x66666667
100036dc:	f7 e9                	imul   ecx
100036de:	c1 fa 02             	sar    edx,0x2
100036e1:	89 c8                	mov    eax,ecx
100036e3:	c1 f8 1f             	sar    eax,0x1f
100036e6:	29 c2                	sub    edx,eax
100036e8:	89 d0                	mov    eax,edx
100036ea:	c1 e0 02             	shl    eax,0x2
100036ed:	01 d0                	add    eax,edx
100036ef:	01 c0                	add    eax,eax
100036f1:	29 c1                	sub    ecx,eax
100036f3:	89 ca                	mov    edx,ecx
100036f5:	88 d0                	mov    al,dl
100036f7:	83 c0 30             	add    eax,0x30
100036fa:	88 85 48 ff ff ff    	mov    BYTE PTR [ebp-0xb8],al
10003700:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003707:	0f b7 c0             	movzx  eax,ax
1000370a:	b9 0a 00 00 00       	mov    ecx,0xa
1000370f:	99                   	cdq    
10003710:	f7 f9                	idiv   ecx
10003712:	89 d0                	mov    eax,edx
10003714:	83 c0 30             	add    eax,0x30
10003717:	88 85 49 ff ff ff    	mov    BYTE PTR [ebp-0xb7],al
1000371d:	8a 85 d8 fe ff ff    	mov    al,BYTE PTR [ebp-0x128]
10003723:	0f b6 d0             	movzx  edx,al
10003726:	89 d0                	mov    eax,edx
10003728:	c1 e0 02             	shl    eax,0x2
1000372b:	01 d0                	add    eax,edx
1000372d:	c1 e0 03             	shl    eax,0x3
10003730:	01 d0                	add    eax,edx
10003732:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003739:	01 d0                	add    eax,edx
1000373b:	66 c1 e8 08          	shr    ax,0x8
1000373f:	c0 e8 03             	shr    al,0x3
10003742:	83 c0 30             	add    eax,0x30
10003745:	88 85 4b ff ff ff    	mov    BYTE PTR [ebp-0xb5],al
1000374b:	8a 8d d8 fe ff ff    	mov    cl,BYTE PTR [ebp-0x128]
10003751:	0f b6 d1             	movzx  edx,cl
10003754:	89 d0                	mov    eax,edx
10003756:	c1 e0 02             	shl    eax,0x2
10003759:	01 d0                	add    eax,edx
1000375b:	c1 e0 03             	shl    eax,0x3
1000375e:	01 d0                	add    eax,edx
10003760:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003767:	01 d0                	add    eax,edx
10003769:	66 c1 e8 08          	shr    ax,0x8
1000376d:	88 c2                	mov    dl,al
1000376f:	c0 ea 03             	shr    dl,0x3
10003772:	88 d0                	mov    al,dl
10003774:	c1 e0 02             	shl    eax,0x2
10003777:	01 d0                	add    eax,edx
10003779:	d1 e0                	shl    eax,1
1000377b:	29 c1                	sub    ecx,eax
1000377d:	88 ca                	mov    dl,cl
1000377f:	8d 42 30             	lea    eax,[edx+0x30]
10003782:	88 85 4c ff ff ff    	mov    BYTE PTR [ebp-0xb4],al
10003788:	8a 85 d9 fe ff ff    	mov    al,BYTE PTR [ebp-0x127]
1000378e:	0f b6 d0             	movzx  edx,al
10003791:	89 d0                	mov    eax,edx
10003793:	c1 e0 02             	shl    eax,0x2
10003796:	01 d0                	add    eax,edx
10003798:	c1 e0 03             	shl    eax,0x3
1000379b:	01 d0                	add    eax,edx
1000379d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100037a4:	01 d0                	add    eax,edx
100037a6:	66 c1 e8 08          	shr    ax,0x8
100037aa:	c0 e8 03             	shr    al,0x3
100037ad:	83 c0 30             	add    eax,0x30
100037b0:	88 85 4e ff ff ff    	mov    BYTE PTR [ebp-0xb2],al
100037b6:	8a 8d d9 fe ff ff    	mov    cl,BYTE PTR [ebp-0x127]
100037bc:	0f b6 d1             	movzx  edx,cl
100037bf:	89 d0                	mov    eax,edx
100037c1:	c1 e0 02             	shl    eax,0x2
100037c4:	01 d0                	add    eax,edx
100037c6:	c1 e0 03             	shl    eax,0x3
100037c9:	01 d0                	add    eax,edx
100037cb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100037d2:	01 d0                	add    eax,edx
100037d4:	66 c1 e8 08          	shr    ax,0x8
100037d8:	88 c2                	mov    dl,al
100037da:	c0 ea 03             	shr    dl,0x3
100037dd:	88 d0                	mov    al,dl
100037df:	c1 e0 02             	shl    eax,0x2
100037e2:	01 d0                	add    eax,edx
100037e4:	d1 e0                	shl    eax,1
100037e6:	29 c1                	sub    ecx,eax
100037e8:	88 ca                	mov    dl,cl
100037ea:	8d 42 30             	lea    eax,[edx+0x30]
100037ed:	88 85 4f ff ff ff    	mov    BYTE PTR [ebp-0xb1],al
100037f3:	8a 85 da fe ff ff    	mov    al,BYTE PTR [ebp-0x126]
100037f9:	0f b6 d0             	movzx  edx,al
100037fc:	89 d0                	mov    eax,edx
100037fe:	c1 e0 02             	shl    eax,0x2
10003801:	01 d0                	add    eax,edx
10003803:	c1 e0 03             	shl    eax,0x3
10003806:	01 d0                	add    eax,edx
10003808:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000380f:	01 d0                	add    eax,edx
10003811:	66 c1 e8 08          	shr    ax,0x8
10003815:	c0 e8 03             	shr    al,0x3
10003818:	83 c0 30             	add    eax,0x30
1000381b:	88 85 51 ff ff ff    	mov    BYTE PTR [ebp-0xaf],al
10003821:	8a 8d da fe ff ff    	mov    cl,BYTE PTR [ebp-0x126]
10003827:	0f b6 d1             	movzx  edx,cl
1000382a:	89 d0                	mov    eax,edx
1000382c:	c1 e0 02             	shl    eax,0x2
1000382f:	01 d0                	add    eax,edx
10003831:	c1 e0 03             	shl    eax,0x3
10003834:	01 d0                	add    eax,edx
10003836:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000383d:	01 d0                	add    eax,edx
1000383f:	66 c1 e8 08          	shr    ax,0x8
10003843:	88 c2                	mov    dl,al
10003845:	c0 ea 03             	shr    dl,0x3
10003848:	88 d0                	mov    al,dl
1000384a:	c1 e0 02             	shl    eax,0x2
1000384d:	01 d0                	add    eax,edx
1000384f:	d1 e0                	shl    eax,1
10003851:	29 c1                	sub    ecx,eax
10003853:	88 ca                	mov    dl,cl
10003855:	8d 42 30             	lea    eax,[edx+0x30]
10003858:	88 85 52 ff ff ff    	mov    BYTE PTR [ebp-0xae],al
1000385e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003865:	a1 00 00 00 00       	mov    eax,ds:0x0	10003866: R_386_32	term
1000386a:	83 ec 04             	sub    esp,0x4
1000386d:	6a 05                	push   0x5
1000386f:	6a 18                	push   0x18
10003871:	50                   	push   eax
10003872:	e8 fc ff ff ff       	call   10003873 <firstRun(bool)+0xf1e>	10003873: R_386_PC32	VgaText::setCursor(int, int)
10003877:	83 c4 10             	add    esp,0x10
1000387a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000387b: R_386_32	term
1000387f:	83 ec 08             	sub    esp,0x8
10003882:	68 60 9e 00 10       	push   0x10009e60	10003883: R_386_32	.text
10003887:	50                   	push   eax
10003888:	e8 fc ff ff ff       	call   10003889 <firstRun(bool)+0xf34>	10003889: R_386_PC32	VgaText::puts(char const*)
1000388d:	83 c4 10             	add    esp,0x10
10003890:	a1 00 00 00 00       	mov    eax,ds:0x0	10003891: R_386_32	term
10003895:	83 ec 04             	sub    esp,0x4
10003898:	6a 06                	push   0x6
1000389a:	6a 18                	push   0x18
1000389c:	50                   	push   eax
1000389d:	e8 fc ff ff ff       	call   1000389e <firstRun(bool)+0xf49>	1000389e: R_386_PC32	VgaText::setCursor(int, int)
100038a2:	83 c4 10             	add    esp,0x10
100038a5:	a1 00 00 00 00       	mov    eax,ds:0x0	100038a6: R_386_32	term
100038aa:	83 ec 08             	sub    esp,0x8
100038ad:	68 88 9e 00 10       	push   0x10009e88	100038ae: R_386_32	.text
100038b2:	50                   	push   eax
100038b3:	e8 fc ff ff ff       	call   100038b4 <firstRun(bool)+0xf5f>	100038b4: R_386_PC32	VgaText::puts(char const*)
100038b8:	83 c4 10             	add    esp,0x10
100038bb:	a1 00 00 00 00       	mov    eax,ds:0x0	100038bc: R_386_32	term
100038c0:	83 ec 04             	sub    esp,0x4
100038c3:	6a 09                	push   0x9
100038c5:	6a 1a                	push   0x1a
100038c7:	50                   	push   eax
100038c8:	e8 fc ff ff ff       	call   100038c9 <firstRun(bool)+0xf74>	100038c9: R_386_PC32	VgaText::setCursor(int, int)
100038cd:	83 c4 10             	add    esp,0x10
100038d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100038d1: R_386_32	term
100038d5:	6a 0f                	push   0xf
100038d7:	6a 07                	push   0x7
100038d9:	68 9e 9e 00 10       	push   0x10009e9e	100038da: R_386_32	.text
100038de:	50                   	push   eax
100038df:	e8 fc ff ff ff       	call   100038e0 <firstRun(bool)+0xf8b>	100038e0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100038e4:	83 c4 10             	add    esp,0x10
100038e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100038e8: R_386_32	term
100038ec:	83 ec 04             	sub    esp,0x4
100038ef:	6a 18                	push   0x18
100038f1:	6a 11                	push   0x11
100038f3:	50                   	push   eax
100038f4:	e8 fc ff ff ff       	call   100038f5 <firstRun(bool)+0xfa0>	100038f5: R_386_PC32	VgaText::setCursor(int, int)
100038f9:	83 c4 10             	add    esp,0x10
100038fc:	a1 00 00 00 00       	mov    eax,ds:0x0	100038fd: R_386_32	term
10003901:	6a 0b                	push   0xb
10003903:	6a 03                	push   0x3
10003905:	68 b2 9e 00 10       	push   0x10009eb2	10003906: R_386_32	.text
1000390a:	50                   	push   eax
1000390b:	e8 fc ff ff ff       	call   1000390c <firstRun(bool)+0xfb7>	1000390c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003910:	83 c4 10             	add    esp,0x10
10003913:	a1 00 00 00 00       	mov    eax,ds:0x0	10003914: R_386_32	term
10003918:	83 ec 04             	sub    esp,0x4
1000391b:	6a 08                	push   0x8
1000391d:	6a 1a                	push   0x1a
1000391f:	50                   	push   eax
10003920:	e8 fc ff ff ff       	call   10003921 <firstRun(bool)+0xfcc>	10003921: R_386_PC32	VgaText::setCursor(int, int)
10003925:	83 c4 10             	add    esp,0x10
10003928:	a1 00 00 00 00       	mov    eax,ds:0x0	10003929: R_386_32	term
1000392d:	83 ec 08             	sub    esp,0x8
10003930:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003936:	52                   	push   edx
10003937:	50                   	push   eax
10003938:	e8 fc ff ff ff       	call   10003939 <firstRun(bool)+0xfe4>	10003939: R_386_PC32	VgaText::puts(char const*)
1000393d:	83 c4 10             	add    esp,0x10
10003940:	a1 00 00 00 00       	mov    eax,ds:0x0	10003941: R_386_32	term
10003945:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003948:	83 c2 1a             	add    edx,0x1a
1000394b:	83 ec 04             	sub    esp,0x4
1000394e:	6a 08                	push   0x8
10003950:	52                   	push   edx
10003951:	50                   	push   eax
10003952:	e8 fc ff ff ff       	call   10003953 <firstRun(bool)+0xffe>	10003953: R_386_PC32	VgaText::setCursor(int, int)
10003957:	83 c4 10             	add    esp,0x10
1000395a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000395b: R_386_32	term
1000395f:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003965:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003968:	01 ca                	add    edx,ecx
1000396a:	8a 12                	mov    dl,BYTE PTR [edx]
1000396c:	0f be d2             	movsx  edx,dl
1000396f:	6a 00                	push   0x0
10003971:	6a 0f                	push   0xf
10003973:	52                   	push   edx
10003974:	50                   	push   eax
10003975:	e8 fc ff ff ff       	call   10003976 <firstRun(bool)+0x1021>	10003976: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000397a:	83 c4 10             	add    esp,0x10
1000397d:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
10003983:	0f be c0             	movsx  eax,al
10003986:	8d 50 d0             	lea    edx,[eax-0x30]
10003989:	89 d0                	mov    eax,edx
1000398b:	c1 e0 02             	shl    eax,0x2
1000398e:	01 d0                	add    eax,edx
10003990:	01 c0                	add    eax,eax
10003992:	89 c2                	mov    edx,eax
10003994:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
1000399a:	0f be c0             	movsx  eax,al
1000399d:	83 e8 30             	sub    eax,0x30
100039a0:	01 d0                	add    eax,edx
100039a2:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
100039a5:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
100039a8:	b9 0c 00 00 00       	mov    ecx,0xc
100039ad:	99                   	cdq    
100039ae:	f7 f9                	idiv   ecx
100039b0:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100039b3:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
100039b7:	75 07                	jne    100039c0 <firstRun(bool)+0x106b>
100039b9:	c7 45 cc 0c 00 00 00 	mov    DWORD PTR [ebp-0x34],0xc
100039c0:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
100039c6:	0f be c0             	movsx  eax,al
100039c9:	8d 50 d0             	lea    edx,[eax-0x30]
100039cc:	89 d0                	mov    eax,edx
100039ce:	c1 e0 02             	shl    eax,0x2
100039d1:	01 d0                	add    eax,edx
100039d3:	01 c0                	add    eax,eax
100039d5:	89 c2                	mov    edx,eax
100039d7:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
100039dd:	0f be c0             	movsx  eax,al
100039e0:	83 e8 30             	sub    eax,0x30
100039e3:	01 d0                	add    eax,edx
100039e5:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
100039e8:	83 ec 04             	sub    esp,0x4
100039eb:	6a 10                	push   0x10
100039ed:	6a 00                	push   0x0
100039ef:	8d 85 b6 fe ff ff    	lea    eax,[ebp-0x14a]
100039f5:	50                   	push   eax
100039f6:	e8 fc ff ff ff       	call   100039f7 <firstRun(bool)+0x10a2>	100039f7: R_386_PC32	memset
100039fb:	83 c4 10             	add    esp,0x10
100039fe:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [ebp-0x54],0x0
10003a05:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a08:	8d 50 01             	lea    edx,[eax+0x1]
10003a0b:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a0e:	c6 84 05 b6 fe ff ff 28 	mov    BYTE PTR [ebp+eax*1-0x14a],0x28
10003a16:	8b 4d cc             	mov    ecx,DWORD PTR [ebp-0x34]
10003a19:	b8 67 66 66 66       	mov    eax,0x66666667
10003a1e:	f7 e9                	imul   ecx
10003a20:	c1 fa 02             	sar    edx,0x2
10003a23:	89 c8                	mov    eax,ecx
10003a25:	c1 f8 1f             	sar    eax,0x1f
10003a28:	29 c2                	sub    edx,eax
10003a2a:	89 d0                	mov    eax,edx
10003a2c:	8d 48 30             	lea    ecx,[eax+0x30]
10003a2f:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a32:	8d 50 01             	lea    edx,[eax+0x1]
10003a35:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a38:	88 ca                	mov    dl,cl
10003a3a:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003a41:	8b 4d cc             	mov    ecx,DWORD PTR [ebp-0x34]
10003a44:	b8 67 66 66 66       	mov    eax,0x66666667
10003a49:	f7 e9                	imul   ecx
10003a4b:	c1 fa 02             	sar    edx,0x2
10003a4e:	89 c8                	mov    eax,ecx
10003a50:	c1 f8 1f             	sar    eax,0x1f
10003a53:	29 c2                	sub    edx,eax
10003a55:	89 d0                	mov    eax,edx
10003a57:	c1 e0 02             	shl    eax,0x2
10003a5a:	01 d0                	add    eax,edx
10003a5c:	01 c0                	add    eax,eax
10003a5e:	29 c1                	sub    ecx,eax
10003a60:	89 ca                	mov    edx,ecx
10003a62:	88 d0                	mov    al,dl
10003a64:	8d 48 30             	lea    ecx,[eax+0x30]
10003a67:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a6a:	8d 50 01             	lea    edx,[eax+0x1]
10003a6d:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a70:	88 ca                	mov    dl,cl
10003a72:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003a79:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a7c:	8d 50 01             	lea    edx,[eax+0x1]
10003a7f:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a82:	c6 84 05 b6 fe ff ff 3a 	mov    BYTE PTR [ebp+eax*1-0x14a],0x3a
10003a8a:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10003a8d:	b8 67 66 66 66       	mov    eax,0x66666667
10003a92:	f7 e9                	imul   ecx
10003a94:	c1 fa 02             	sar    edx,0x2
10003a97:	89 c8                	mov    eax,ecx
10003a99:	c1 f8 1f             	sar    eax,0x1f
10003a9c:	29 c2                	sub    edx,eax
10003a9e:	89 d0                	mov    eax,edx
10003aa0:	8d 48 30             	lea    ecx,[eax+0x30]
10003aa3:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003aa6:	8d 50 01             	lea    edx,[eax+0x1]
10003aa9:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003aac:	88 ca                	mov    dl,cl
10003aae:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003ab5:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10003ab8:	b8 67 66 66 66       	mov    eax,0x66666667
10003abd:	f7 e9                	imul   ecx
10003abf:	c1 fa 02             	sar    edx,0x2
10003ac2:	89 c8                	mov    eax,ecx
10003ac4:	c1 f8 1f             	sar    eax,0x1f
10003ac7:	29 c2                	sub    edx,eax
10003ac9:	89 d0                	mov    eax,edx
10003acb:	c1 e0 02             	shl    eax,0x2
10003ace:	01 d0                	add    eax,edx
10003ad0:	01 c0                	add    eax,eax
10003ad2:	29 c1                	sub    ecx,eax
10003ad4:	89 ca                	mov    edx,ecx
10003ad6:	88 d0                	mov    al,dl
10003ad8:	8d 48 30             	lea    ecx,[eax+0x30]
10003adb:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003ade:	8d 50 01             	lea    edx,[eax+0x1]
10003ae1:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003ae4:	88 ca                	mov    dl,cl
10003ae6:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003aed:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003af0:	8d 50 01             	lea    edx,[eax+0x1]
10003af3:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003af6:	c6 84 05 b6 fe ff ff 20 	mov    BYTE PTR [ebp+eax*1-0x14a],0x20
10003afe:	83 7d b4 0b          	cmp    DWORD PTR [ebp-0x4c],0xb
10003b02:	7e 04                	jle    10003b08 <firstRun(bool)+0x11b3>
10003b04:	b2 50                	mov    dl,0x50
10003b06:	eb 02                	jmp    10003b0a <firstRun(bool)+0x11b5>
10003b08:	b2 41                	mov    dl,0x41
10003b0a:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b0d:	8d 48 01             	lea    ecx,[eax+0x1]
10003b10:	89 4d ac             	mov    DWORD PTR [ebp-0x54],ecx
10003b13:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003b1a:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b1d:	8d 50 01             	lea    edx,[eax+0x1]
10003b20:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b23:	c6 84 05 b6 fe ff ff 4d 	mov    BYTE PTR [ebp+eax*1-0x14a],0x4d
10003b2b:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b2e:	8d 50 01             	lea    edx,[eax+0x1]
10003b31:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b34:	c6 84 05 b6 fe ff ff 29 	mov    BYTE PTR [ebp+eax*1-0x14a],0x29
10003b3c:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10003b3e: R_386_32	term
10003b42:	83 ec 0c             	sub    esp,0xc
10003b45:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003b4b:	50                   	push   eax
10003b4c:	e8 fc ff ff ff       	call   10003b4d <firstRun(bool)+0x11f8>	10003b4d: R_386_PC32	strlen
10003b51:	83 c4 10             	add    esp,0x10
10003b54:	83 c0 1e             	add    eax,0x1e
10003b57:	83 ec 04             	sub    esp,0x4
10003b5a:	6a 08                	push   0x8
10003b5c:	50                   	push   eax
10003b5d:	53                   	push   ebx
10003b5e:	e8 fc ff ff ff       	call   10003b5f <firstRun(bool)+0x120a>	10003b5f: R_386_PC32	VgaText::setCursor(int, int)
10003b63:	83 c4 10             	add    esp,0x10
10003b66:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b67: R_386_32	term
10003b6b:	83 ec 08             	sub    esp,0x8
10003b6e:	8d 95 b6 fe ff ff    	lea    edx,[ebp-0x14a]
10003b74:	52                   	push   edx
10003b75:	50                   	push   eax
10003b76:	e8 fc ff ff ff       	call   10003b77 <firstRun(bool)+0x1222>	10003b77: R_386_PC32	VgaText::puts(char const*)
10003b7b:	83 c4 10             	add    esp,0x10
10003b7e:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b7f: R_386_32	term
10003b83:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003b86:	83 c2 1a             	add    edx,0x1a
10003b89:	83 ec 04             	sub    esp,0x4
10003b8c:	6a 08                	push   0x8
10003b8e:	52                   	push   edx
10003b8f:	50                   	push   eax
10003b90:	e8 fc ff ff ff       	call   10003b91 <firstRun(bool)+0x123c>	10003b91: R_386_PC32	VgaText::setCursor(int, int)
10003b95:	83 c4 10             	add    esp,0x10
10003b98:	a0 00 00 00 00       	mov    al,ds:0x0	10003b99: R_386_32	installKey
10003b9d:	84 c0                	test   al,al
10003b9f:	0f 94 c0             	sete   al
10003ba2:	84 c0                	test   al,al
10003ba4:	74 02                	je     10003ba8 <firstRun(bool)+0x1253>
10003ba6:	eb f0                	jmp    10003b98 <firstRun(bool)+0x1243>
10003ba8:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ba9: R_386_32	term
10003bad:	05 82 00 00 00       	add    eax,0x82
10003bb2:	83 ec 04             	sub    esp,0x4
10003bb5:	6a 10                	push   0x10
10003bb7:	6a 00                	push   0x0
10003bb9:	50                   	push   eax
10003bba:	e8 fc ff ff ff       	call   10003bbb <firstRun(bool)+0x1266>	10003bbb: R_386_PC32	memset
10003bbf:	83 c4 10             	add    esp,0x10
10003bc2:	a1 00 00 00 00       	mov    eax,ds:0x0	10003bc3: R_386_32	term
10003bc7:	05 02 01 00 00       	add    eax,0x102
10003bcc:	83 ec 04             	sub    esp,0x4
10003bcf:	6a 10                	push   0x10
10003bd1:	6a 00                	push   0x0
10003bd3:	50                   	push   eax
10003bd4:	e8 fc ff ff ff       	call   10003bd5 <firstRun(bool)+0x1280>	10003bd5: R_386_PC32	memset
10003bd9:	83 c4 10             	add    esp,0x10
10003bdc:	a0 00 00 00 00       	mov    al,ds:0x0	10003bdd: R_386_32	installKey
10003be1:	3c 03                	cmp    al,0x3
10003be3:	74 09                	je     10003bee <firstRun(bool)+0x1299>
10003be5:	a0 00 00 00 00       	mov    al,ds:0x0	10003be6: R_386_32	installKey
10003bea:	3c 08                	cmp    al,0x8
10003bec:	75 04                	jne    10003bf2 <firstRun(bool)+0x129d>
10003bee:	b0 01                	mov    al,0x1
10003bf0:	eb 02                	jmp    10003bf4 <firstRun(bool)+0x129f>
10003bf2:	b0 00                	mov    al,0x0
10003bf4:	84 c0                	test   al,al
10003bf6:	74 58                	je     10003c50 <firstRun(bool)+0x12fb>
10003bf8:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
10003bfb:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10003bff:	75 16                	jne    10003c17 <firstRun(bool)+0x12c2>
10003c01:	83 ec 0c             	sub    esp,0xc
10003c04:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003c0a:	50                   	push   eax
10003c0b:	e8 fc ff ff ff       	call   10003c0c <firstRun(bool)+0x12b7>	10003c0c: R_386_PC32	strlen
10003c10:	83 c4 10             	add    esp,0x10
10003c13:	48                   	dec    eax
10003c14:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10003c17:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003c1d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003c20:	01 d0                	add    eax,edx
10003c22:	8a 00                	mov    al,BYTE PTR [eax]
10003c24:	3c 20                	cmp    al,0x20
10003c26:	74 d0                	je     10003bf8 <firstRun(bool)+0x12a3>
10003c28:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003c2e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003c31:	01 d0                	add    eax,edx
10003c33:	8a 00                	mov    al,BYTE PTR [eax]
10003c35:	3c 2f                	cmp    al,0x2f
10003c37:	74 bf                	je     10003bf8 <firstRun(bool)+0x12a3>
10003c39:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003c3f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003c42:	01 d0                	add    eax,edx
10003c44:	8a 00                	mov    al,BYTE PTR [eax]
10003c46:	3c 3a                	cmp    al,0x3a
10003c48:	0f 85 5e 04 00 00    	jne    100040ac <firstRun(bool)+0x1757>
10003c4e:	eb a8                	jmp    10003bf8 <firstRun(bool)+0x12a3>
10003c50:	a0 00 00 00 00       	mov    al,ds:0x0	10003c51: R_386_32	installKey
10003c55:	3c 2f                	cmp    al,0x2f
10003c57:	7e 09                	jle    10003c62 <firstRun(bool)+0x130d>
10003c59:	a0 00 00 00 00       	mov    al,ds:0x0	10003c5a: R_386_32	installKey
10003c5e:	3c 39                	cmp    al,0x39
10003c60:	7e 12                	jle    10003c74 <firstRun(bool)+0x131f>
10003c62:	a0 00 00 00 00       	mov    al,ds:0x0	10003c63: R_386_32	installKey
10003c67:	3c 20                	cmp    al,0x20
10003c69:	74 09                	je     10003c74 <firstRun(bool)+0x131f>
10003c6b:	a0 00 00 00 00       	mov    al,ds:0x0	10003c6c: R_386_32	installKey
10003c70:	3c 04                	cmp    al,0x4
10003c72:	75 04                	jne    10003c78 <firstRun(bool)+0x1323>
10003c74:	b0 01                	mov    al,0x1
10003c76:	eb 02                	jmp    10003c7a <firstRun(bool)+0x1325>
10003c78:	b0 00                	mov    al,0x0
10003c7a:	84 c0                	test   al,al
10003c7c:	0f 84 cf 01 00 00    	je     10003e51 <firstRun(bool)+0x14fc>
10003c82:	a0 00 00 00 00       	mov    al,ds:0x0	10003c83: R_386_32	installKey
10003c87:	3c 2f                	cmp    al,0x2f
10003c89:	7e 0d                	jle    10003c98 <firstRun(bool)+0x1343>
10003c8b:	a0 00 00 00 00       	mov    al,ds:0x0	10003c8c: R_386_32	installKey
10003c90:	3c 39                	cmp    al,0x39
10003c92:	7f 04                	jg     10003c98 <firstRun(bool)+0x1343>
10003c94:	b0 01                	mov    al,0x1
10003c96:	eb 02                	jmp    10003c9a <firstRun(bool)+0x1345>
10003c98:	b0 00                	mov    al,0x0
10003c9a:	84 c0                	test   al,al
10003c9c:	0f 84 51 01 00 00    	je     10003df3 <firstRun(bool)+0x149e>
10003ca2:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10003ca6:	75 0d                	jne    10003cb5 <firstRun(bool)+0x1360>
10003ca8:	a0 00 00 00 00       	mov    al,ds:0x0	10003ca9: R_386_32	installKey
10003cad:	3c 33                	cmp    al,0x33
10003caf:	7e 04                	jle    10003cb5 <firstRun(bool)+0x1360>
10003cb1:	b0 01                	mov    al,0x1
10003cb3:	eb 02                	jmp    10003cb7 <firstRun(bool)+0x1362>
10003cb5:	b0 00                	mov    al,0x0
10003cb7:	84 c0                	test   al,al
10003cb9:	74 28                	je     10003ce3 <firstRun(bool)+0x138e>
10003cbb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003cbe:	8d 50 01             	lea    edx,[eax+0x1]
10003cc1:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003cc4:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003ccc:	a0 00 00 00 00       	mov    al,ds:0x0	10003ccd: R_386_32	installKey
10003cd1:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003cd7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003cda:	01 ca                	add    edx,ecx
10003cdc:	88 02                	mov    BYTE PTR [edx],al
10003cde:	e9 10 01 00 00       	jmp    10003df3 <firstRun(bool)+0x149e>
10003ce3:	83 7d e4 03          	cmp    DWORD PTR [ebp-0x1c],0x3
10003ce7:	75 0d                	jne    10003cf6 <firstRun(bool)+0x13a1>
10003ce9:	a0 00 00 00 00       	mov    al,ds:0x0	10003cea: R_386_32	installKey
10003cee:	3c 31                	cmp    al,0x31
10003cf0:	7e 04                	jle    10003cf6 <firstRun(bool)+0x13a1>
10003cf2:	b0 01                	mov    al,0x1
10003cf4:	eb 02                	jmp    10003cf8 <firstRun(bool)+0x13a3>
10003cf6:	b0 00                	mov    al,0x0
10003cf8:	84 c0                	test   al,al
10003cfa:	74 28                	je     10003d24 <firstRun(bool)+0x13cf>
10003cfc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003cff:	8d 50 01             	lea    edx,[eax+0x1]
10003d02:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003d05:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003d0d:	a0 00 00 00 00       	mov    al,ds:0x0	10003d0e: R_386_32	installKey
10003d12:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003d18:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003d1b:	01 ca                	add    edx,ecx
10003d1d:	88 02                	mov    BYTE PTR [edx],al
10003d1f:	e9 cf 00 00 00       	jmp    10003df3 <firstRun(bool)+0x149e>
10003d24:	83 7d e4 0b          	cmp    DWORD PTR [ebp-0x1c],0xb
10003d28:	75 0d                	jne    10003d37 <firstRun(bool)+0x13e2>
10003d2a:	a0 00 00 00 00       	mov    al,ds:0x0	10003d2b: R_386_32	installKey
10003d2f:	3c 32                	cmp    al,0x32
10003d31:	7e 04                	jle    10003d37 <firstRun(bool)+0x13e2>
10003d33:	b0 01                	mov    al,0x1
10003d35:	eb 02                	jmp    10003d39 <firstRun(bool)+0x13e4>
10003d37:	b0 00                	mov    al,0x0
10003d39:	84 c0                	test   al,al
10003d3b:	74 28                	je     10003d65 <firstRun(bool)+0x1410>
10003d3d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d40:	8d 50 01             	lea    edx,[eax+0x1]
10003d43:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003d46:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003d4e:	a0 00 00 00 00       	mov    al,ds:0x0	10003d4f: R_386_32	installKey
10003d53:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003d59:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003d5c:	01 ca                	add    edx,ecx
10003d5e:	88 02                	mov    BYTE PTR [edx],al
10003d60:	e9 8e 00 00 00       	jmp    10003df3 <firstRun(bool)+0x149e>
10003d65:	83 7d e4 0e          	cmp    DWORD PTR [ebp-0x1c],0xe
10003d69:	75 0d                	jne    10003d78 <firstRun(bool)+0x1423>
10003d6b:	a0 00 00 00 00       	mov    al,ds:0x0	10003d6c: R_386_32	installKey
10003d70:	3c 35                	cmp    al,0x35
10003d72:	7e 04                	jle    10003d78 <firstRun(bool)+0x1423>
10003d74:	b0 01                	mov    al,0x1
10003d76:	eb 02                	jmp    10003d7a <firstRun(bool)+0x1425>
10003d78:	b0 00                	mov    al,0x0
10003d7a:	84 c0                	test   al,al
10003d7c:	74 25                	je     10003da3 <firstRun(bool)+0x144e>
10003d7e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d81:	8d 50 01             	lea    edx,[eax+0x1]
10003d84:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003d87:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003d8f:	a0 00 00 00 00       	mov    al,ds:0x0	10003d90: R_386_32	installKey
10003d94:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003d9a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003d9d:	01 ca                	add    edx,ecx
10003d9f:	88 02                	mov    BYTE PTR [edx],al
10003da1:	eb 50                	jmp    10003df3 <firstRun(bool)+0x149e>
10003da3:	83 7d e4 11          	cmp    DWORD PTR [ebp-0x1c],0x11
10003da7:	75 0d                	jne    10003db6 <firstRun(bool)+0x1461>
10003da9:	a0 00 00 00 00       	mov    al,ds:0x0	10003daa: R_386_32	installKey
10003dae:	3c 35                	cmp    al,0x35
10003db0:	7e 04                	jle    10003db6 <firstRun(bool)+0x1461>
10003db2:	b0 01                	mov    al,0x1
10003db4:	eb 02                	jmp    10003db8 <firstRun(bool)+0x1463>
10003db6:	b0 00                	mov    al,0x0
10003db8:	84 c0                	test   al,al
10003dba:	74 25                	je     10003de1 <firstRun(bool)+0x148c>
10003dbc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003dbf:	8d 50 01             	lea    edx,[eax+0x1]
10003dc2:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003dc5:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003dcd:	a0 00 00 00 00       	mov    al,ds:0x0	10003dce: R_386_32	installKey
10003dd2:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003dd8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003ddb:	01 ca                	add    edx,ecx
10003ddd:	88 02                	mov    BYTE PTR [edx],al
10003ddf:	eb 12                	jmp    10003df3 <firstRun(bool)+0x149e>
10003de1:	a0 00 00 00 00       	mov    al,ds:0x0	10003de2: R_386_32	installKey
10003de6:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003dec:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003def:	01 ca                	add    edx,ecx
10003df1:	88 02                	mov    BYTE PTR [edx],al
10003df3:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10003df6:	83 ec 0c             	sub    esp,0xc
10003df9:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003dff:	50                   	push   eax
10003e00:	e8 fc ff ff ff       	call   10003e01 <firstRun(bool)+0x14ac>	10003e01: R_386_PC32	strlen
10003e05:	83 c4 10             	add    esp,0x10
10003e08:	89 c2                	mov    edx,eax
10003e0a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e0d:	39 c2                	cmp    edx,eax
10003e0f:	77 07                	ja     10003e18 <firstRun(bool)+0x14c3>
10003e11:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003e18:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003e1e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e21:	01 d0                	add    eax,edx
10003e23:	8a 00                	mov    al,BYTE PTR [eax]
10003e25:	3c 20                	cmp    al,0x20
10003e27:	74 ca                	je     10003df3 <firstRun(bool)+0x149e>
10003e29:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003e2f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e32:	01 d0                	add    eax,edx
10003e34:	8a 00                	mov    al,BYTE PTR [eax]
10003e36:	3c 2f                	cmp    al,0x2f
10003e38:	74 b9                	je     10003df3 <firstRun(bool)+0x149e>
10003e3a:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003e40:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e43:	01 d0                	add    eax,edx
10003e45:	8a 00                	mov    al,BYTE PTR [eax]
10003e47:	3c 3a                	cmp    al,0x3a
10003e49:	0f 85 5d 02 00 00    	jne    100040ac <firstRun(bool)+0x1757>
10003e4f:	eb a2                	jmp    10003df3 <firstRun(bool)+0x149e>
10003e51:	a0 00 00 00 00       	mov    al,ds:0x0	10003e52: R_386_32	installKey
10003e56:	3c 0a                	cmp    al,0xa
10003e58:	0f 94 c0             	sete   al
10003e5b:	84 c0                	test   al,al
10003e5d:	0f 84 37 02 00 00    	je     1000409a <firstRun(bool)+0x1745>
10003e63:	8a 85 40 ff ff ff    	mov    al,BYTE PTR [ebp-0xc0]
10003e69:	0f be c0             	movsx  eax,al
10003e6c:	8d 50 d0             	lea    edx,[eax-0x30]
10003e6f:	89 d0                	mov    eax,edx
10003e71:	c1 e0 02             	shl    eax,0x2
10003e74:	01 d0                	add    eax,edx
10003e76:	01 c0                	add    eax,eax
10003e78:	89 c2                	mov    edx,eax
10003e7a:	8a 85 41 ff ff ff    	mov    al,BYTE PTR [ebp-0xbf]
10003e80:	0f be c0             	movsx  eax,al
10003e83:	83 e8 30             	sub    eax,0x30
10003e86:	01 d0                	add    eax,edx
10003e88:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10003e8b:	8a 85 43 ff ff ff    	mov    al,BYTE PTR [ebp-0xbd]
10003e91:	0f be c0             	movsx  eax,al
10003e94:	8d 50 d0             	lea    edx,[eax-0x30]
10003e97:	89 d0                	mov    eax,edx
10003e99:	c1 e0 02             	shl    eax,0x2
10003e9c:	01 d0                	add    eax,edx
10003e9e:	01 c0                	add    eax,eax
10003ea0:	89 c2                	mov    edx,eax
10003ea2:	8a 85 44 ff ff ff    	mov    al,BYTE PTR [ebp-0xbc]
10003ea8:	0f be c0             	movsx  eax,al
10003eab:	83 e8 30             	sub    eax,0x30
10003eae:	01 d0                	add    eax,edx
10003eb0:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10003eb3:	8a 85 46 ff ff ff    	mov    al,BYTE PTR [ebp-0xba]
10003eb9:	0f be c0             	movsx  eax,al
10003ebc:	8d 50 d0             	lea    edx,[eax-0x30]
10003ebf:	89 d0                	mov    eax,edx
10003ec1:	c1 e0 02             	shl    eax,0x2
10003ec4:	01 d0                	add    eax,edx
10003ec6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003ecd:	01 d0                	add    eax,edx
10003ecf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003ed6:	01 d0                	add    eax,edx
10003ed8:	c1 e0 03             	shl    eax,0x3
10003edb:	89 c1                	mov    ecx,eax
10003edd:	8a 85 47 ff ff ff    	mov    al,BYTE PTR [ebp-0xb9]
10003ee3:	0f be c0             	movsx  eax,al
10003ee6:	8d 50 d0             	lea    edx,[eax-0x30]
10003ee9:	89 d0                	mov    eax,edx
10003eeb:	c1 e0 02             	shl    eax,0x2
10003eee:	01 d0                	add    eax,edx
10003ef0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003ef7:	01 d0                	add    eax,edx
10003ef9:	c1 e0 02             	shl    eax,0x2
10003efc:	01 c1                	add    ecx,eax
10003efe:	8a 85 48 ff ff ff    	mov    al,BYTE PTR [ebp-0xb8]
10003f04:	0f be c0             	movsx  eax,al
10003f07:	8d 50 d0             	lea    edx,[eax-0x30]
10003f0a:	89 d0                	mov    eax,edx
10003f0c:	c1 e0 02             	shl    eax,0x2
10003f0f:	01 d0                	add    eax,edx
10003f11:	01 c0                	add    eax,eax
10003f13:	8d 14 01             	lea    edx,[ecx+eax*1]
10003f16:	8a 85 49 ff ff ff    	mov    al,BYTE PTR [ebp-0xb7]
10003f1c:	0f be c0             	movsx  eax,al
10003f1f:	83 e8 30             	sub    eax,0x30
10003f22:	01 d0                	add    eax,edx
10003f24:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10003f27:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
10003f2d:	0f be c0             	movsx  eax,al
10003f30:	8d 50 d0             	lea    edx,[eax-0x30]
10003f33:	89 d0                	mov    eax,edx
10003f35:	c1 e0 02             	shl    eax,0x2
10003f38:	01 d0                	add    eax,edx
10003f3a:	01 c0                	add    eax,eax
10003f3c:	89 c2                	mov    edx,eax
10003f3e:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
10003f44:	0f be c0             	movsx  eax,al
10003f47:	83 e8 30             	sub    eax,0x30
10003f4a:	01 d0                	add    eax,edx
10003f4c:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10003f4f:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
10003f55:	0f be c0             	movsx  eax,al
10003f58:	8d 50 d0             	lea    edx,[eax-0x30]
10003f5b:	89 d0                	mov    eax,edx
10003f5d:	c1 e0 02             	shl    eax,0x2
10003f60:	01 d0                	add    eax,edx
10003f62:	01 c0                	add    eax,eax
10003f64:	89 c2                	mov    edx,eax
10003f66:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
10003f6c:	0f be c0             	movsx  eax,al
10003f6f:	83 e8 30             	sub    eax,0x30
10003f72:	01 d0                	add    eax,edx
10003f74:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10003f77:	8a 85 51 ff ff ff    	mov    al,BYTE PTR [ebp-0xaf]
10003f7d:	0f be c0             	movsx  eax,al
10003f80:	8d 50 d0             	lea    edx,[eax-0x30]
10003f83:	89 d0                	mov    eax,edx
10003f85:	c1 e0 02             	shl    eax,0x2
10003f88:	01 d0                	add    eax,edx
10003f8a:	01 c0                	add    eax,eax
10003f8c:	89 c2                	mov    edx,eax
10003f8e:	8a 85 52 ff ff ff    	mov    al,BYTE PTR [ebp-0xae]
10003f94:	0f be c0             	movsx  eax,al
10003f97:	83 e8 30             	sub    eax,0x30
10003f9a:	01 d0                	add    eax,edx
10003f9c:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
10003f9f:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10003fa2:	83 e0 03             	and    eax,0x3
10003fa5:	85 c0                	test   eax,eax
10003fa7:	75 1f                	jne    10003fc8 <firstRun(bool)+0x1673>
10003fa9:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10003fac:	b9 19 00 00 00       	mov    ecx,0x19
10003fb1:	99                   	cdq    
10003fb2:	f7 f9                	idiv   ecx
10003fb4:	89 d0                	mov    eax,edx
10003fb6:	85 c0                	test   eax,eax
10003fb8:	75 0a                	jne    10003fc4 <firstRun(bool)+0x166f>
10003fba:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10003fbd:	83 e0 0f             	and    eax,0xf
10003fc0:	85 c0                	test   eax,eax
10003fc2:	75 04                	jne    10003fc8 <firstRun(bool)+0x1673>
10003fc4:	b0 01                	mov    al,0x1
10003fc6:	eb 02                	jmp    10003fca <firstRun(bool)+0x1675>
10003fc8:	b0 00                	mov    al,0x0
10003fca:	88 45 93             	mov    BYTE PTR [ebp-0x6d],al
10003fcd:	83 7d a8 1f          	cmp    DWORD PTR [ebp-0x58],0x1f
10003fd1:	7e 0c                	jle    10003fdf <firstRun(bool)+0x168a>
10003fd3:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003fda:	e9 cd 00 00 00       	jmp    100040ac <firstRun(bool)+0x1757>
10003fdf:	83 7d a8 1e          	cmp    DWORD PTR [ebp-0x58],0x1e
10003fe3:	7e 2a                	jle    1000400f <firstRun(bool)+0x16ba>
10003fe5:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
10003fe9:	74 18                	je     10004003 <firstRun(bool)+0x16ae>
10003feb:	83 7d a4 04          	cmp    DWORD PTR [ebp-0x5c],0x4
10003fef:	74 12                	je     10004003 <firstRun(bool)+0x16ae>
10003ff1:	83 7d a4 06          	cmp    DWORD PTR [ebp-0x5c],0x6
10003ff5:	74 0c                	je     10004003 <firstRun(bool)+0x16ae>
10003ff7:	83 7d a4 09          	cmp    DWORD PTR [ebp-0x5c],0x9
10003ffb:	74 06                	je     10004003 <firstRun(bool)+0x16ae>
10003ffd:	83 7d a4 0b          	cmp    DWORD PTR [ebp-0x5c],0xb
10004001:	75 0c                	jne    1000400f <firstRun(bool)+0x16ba>
10004003:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000400a:	e9 9d 00 00 00       	jmp    100040ac <firstRun(bool)+0x1757>
1000400f:	83 7d a8 1d          	cmp    DWORD PTR [ebp-0x58],0x1d
10004013:	75 19                	jne    1000402e <firstRun(bool)+0x16d9>
10004015:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
10004019:	75 13                	jne    1000402e <firstRun(bool)+0x16d9>
1000401b:	8a 45 93             	mov    al,BYTE PTR [ebp-0x6d]
1000401e:	83 f0 01             	xor    eax,0x1
10004021:	84 c0                	test   al,al
10004023:	74 09                	je     1000402e <firstRun(bool)+0x16d9>
10004025:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000402c:	eb 7e                	jmp    100040ac <firstRun(bool)+0x1757>
1000402e:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
10004032:	75 09                	jne    1000403d <firstRun(bool)+0x16e8>
10004034:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000403b:	eb 6f                	jmp    100040ac <firstRun(bool)+0x1757>
1000403d:	83 7d a4 0c          	cmp    DWORD PTR [ebp-0x5c],0xc
10004041:	7f 06                	jg     10004049 <firstRun(bool)+0x16f4>
10004043:	83 7d a4 00          	cmp    DWORD PTR [ebp-0x5c],0x0
10004047:	75 09                	jne    10004052 <firstRun(bool)+0x16fd>
10004049:	c7 45 e4 03 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x3
10004050:	eb 5a                	jmp    100040ac <firstRun(bool)+0x1757>
10004052:	81 7d a0 b7 0b 00 00 	cmp    DWORD PTR [ebp-0x60],0xbb7
10004059:	7f 09                	jg     10004064 <firstRun(bool)+0x170f>
1000405b:	81 7d a0 b1 07 00 00 	cmp    DWORD PTR [ebp-0x60],0x7b1
10004062:	7f 09                	jg     1000406d <firstRun(bool)+0x1718>
10004064:	c7 45 e4 06 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x6
1000406b:	eb 3f                	jmp    100040ac <firstRun(bool)+0x1757>
1000406d:	83 7d 9c 17          	cmp    DWORD PTR [ebp-0x64],0x17
10004071:	7e 09                	jle    1000407c <firstRun(bool)+0x1727>
10004073:	c7 45 e4 0b 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xb
1000407a:	eb 30                	jmp    100040ac <firstRun(bool)+0x1757>
1000407c:	83 7d 98 3b          	cmp    DWORD PTR [ebp-0x68],0x3b
10004080:	7e 09                	jle    1000408b <firstRun(bool)+0x1736>
10004082:	c7 45 e4 0e 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xe
10004089:	eb 21                	jmp    100040ac <firstRun(bool)+0x1757>
1000408b:	83 7d 94 3b          	cmp    DWORD PTR [ebp-0x6c],0x3b
1000408f:	7e 37                	jle    100040c8 <firstRun(bool)+0x1773>
10004091:	c7 45 e4 11 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x11
10004098:	eb 12                	jmp    100040ac <firstRun(bool)+0x1757>
1000409a:	a0 00 00 00 00       	mov    al,ds:0x0	1000409b: R_386_32	installKey
1000409f:	3c 1b                	cmp    al,0x1b
100040a1:	0f 94 c0             	sete   al
100040a4:	84 c0                	test   al,al
100040a6:	0f 85 c8 e9 ff ff    	jne    10002a74 <firstRun(bool)+0x11f>
100040ac:	83 ec 0c             	sub    esp,0xc
100040af:	68 4c 04 00 00       	push   0x44c
100040b4:	e8 fc ff ff ff       	call   100040b5 <firstRun(bool)+0x1760>	100040b5: R_386_PC32	milliTenthSleep(unsigned int)
100040b9:	83 c4 10             	add    esp,0x10
100040bc:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100040be: R_386_32	installKey
100040c3:	e9 4b f8 ff ff       	jmp    10003913 <firstRun(bool)+0xfbe>
100040c8:	90                   	nop
100040c9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100040cb: R_386_32	installKey
100040d0:	83 ec 0c             	sub    esp,0xc
100040d3:	68 a0 0f 00 00       	push   0xfa0
100040d8:	e8 fc ff ff ff       	call   100040d9 <firstRun(bool)+0x1784>	100040d9: R_386_PC32	milliTenthSleep(unsigned int)
100040dd:	83 c4 10             	add    esp,0x10
100040e0:	eb 01                	jmp    100040e3 <firstRun(bool)+0x178e>
100040e2:	90                   	nop
100040e3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100040e5: R_386_32	installKey
100040ea:	e8 fc ff ff ff       	call   100040eb <firstRun(bool)+0x1796>	100040eb: R_386_PC32	drawBootScreen()
100040ef:	83 ec 0c             	sub    esp,0xc
100040f2:	68 3b 9e 00 10       	push   0x10009e3b	100040f3: R_386_32	.text
100040f7:	6a 14                	push   0x14
100040f9:	6a 3c                	push   0x3c
100040fb:	6a 01                	push   0x1
100040fd:	6a 12                	push   0x12
100040ff:	e8 fc ff ff ff       	call   10004100 <firstRun(bool)+0x17ab>	10004100: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004104:	83 c4 20             	add    esp,0x20
10004107:	a1 00 00 00 00       	mov    eax,ds:0x0	10004108: R_386_32	term
1000410c:	83 ec 04             	sub    esp,0x4
1000410f:	6a 04                	push   0x4
10004111:	6a 14                	push   0x14
10004113:	50                   	push   eax
10004114:	e8 fc ff ff ff       	call   10004115 <firstRun(bool)+0x17c0>	10004115: R_386_PC32	VgaText::setCursor(int, int)
10004119:	83 c4 10             	add    esp,0x10
1000411c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000411d: R_386_32	term
10004121:	83 ec 08             	sub    esp,0x8
10004124:	68 c8 9e 00 10       	push   0x10009ec8	10004125: R_386_32	.text
10004129:	50                   	push   eax
1000412a:	e8 fc ff ff ff       	call   1000412b <firstRun(bool)+0x17d6>	1000412b: R_386_PC32	VgaText::puts(char const*)
1000412f:	83 c4 10             	add    esp,0x10
10004132:	a1 00 00 00 00       	mov    eax,ds:0x0	10004133: R_386_32	term
10004137:	83 ec 04             	sub    esp,0x4
1000413a:	6a 18                	push   0x18
1000413c:	6a 11                	push   0x11
1000413e:	50                   	push   eax
1000413f:	e8 fc ff ff ff       	call   10004140 <firstRun(bool)+0x17eb>	10004140: R_386_PC32	VgaText::setCursor(int, int)
10004144:	83 c4 10             	add    esp,0x10
10004147:	a1 00 00 00 00       	mov    eax,ds:0x0	10004148: R_386_32	term
1000414c:	6a 0b                	push   0xb
1000414e:	6a 03                	push   0x3
10004150:	68 b2 9e 00 10       	push   0x10009eb2	10004151: R_386_32	.text
10004155:	50                   	push   eax
10004156:	e8 fc ff ff ff       	call   10004157 <firstRun(bool)+0x1802>	10004157: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000415b:	83 c4 10             	add    esp,0x10
1000415e:	e8 fc ff ff ff       	call   1000415f <firstRun(bool)+0x180a>	1000415f: R_386_PC32	loadTimezoneStrings()
10004163:	89 45 8c             	mov    DWORD PTR [ebp-0x74],eax
10004166:	b8 d2 00 00 00       	mov    eax,0xd2
1000416b:	99                   	cdq    
1000416c:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
1000416f:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
10004172:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
10004179:	83 7d c8 0d          	cmp    DWORD PTR [ebp-0x38],0xd
1000417d:	7f 32                	jg     100041b1 <firstRun(bool)+0x185c>
1000417f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004180: R_386_32	term
10004184:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
10004187:	83 c2 07             	add    edx,0x7
1000418a:	83 ec 04             	sub    esp,0x4
1000418d:	52                   	push   edx
1000418e:	6a 4b                	push   0x4b
10004190:	50                   	push   eax
10004191:	e8 fc ff ff ff       	call   10004192 <firstRun(bool)+0x183d>	10004192: R_386_PC32	VgaText::setCursor(int, int)
10004196:	83 c4 10             	add    esp,0x10
10004199:	a1 00 00 00 00       	mov    eax,ds:0x0	1000419a: R_386_32	term
1000419e:	83 ec 08             	sub    esp,0x8
100041a1:	6a 20                	push   0x20
100041a3:	50                   	push   eax
100041a4:	e8 fc ff ff ff       	call   100041a5 <firstRun(bool)+0x1850>	100041a5: R_386_PC32	VgaText::putchar(char)
100041a9:	83 c4 10             	add    esp,0x10
100041ac:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
100041af:	eb c8                	jmp    10004179 <firstRun(bool)+0x1824>
100041b1:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
100041b8:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100041bb:	3b 45 88             	cmp    eax,DWORD PTR [ebp-0x78]
100041be:	7d 48                	jge    10004208 <firstRun(bool)+0x18b3>
100041c0:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100041c2: R_386_32	term
100041c6:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100041c9:	8d 58 07             	lea    ebx,[eax+0x7]
100041cc:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
100041cf:	89 d0                	mov    eax,edx
100041d1:	01 c0                	add    eax,eax
100041d3:	01 d0                	add    eax,edx
100041d5:	01 c0                	add    eax,eax
100041d7:	01 d0                	add    eax,edx
100041d9:	01 c0                	add    eax,eax
100041db:	99                   	cdq    
100041dc:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
100041df:	01 d8                	add    eax,ebx
100041e1:	83 ec 04             	sub    esp,0x4
100041e4:	50                   	push   eax
100041e5:	6a 4b                	push   0x4b
100041e7:	51                   	push   ecx
100041e8:	e8 fc ff ff ff       	call   100041e9 <firstRun(bool)+0x1894>	100041e9: R_386_PC32	VgaText::setCursor(int, int)
100041ed:	83 c4 10             	add    esp,0x10
100041f0:	a1 00 00 00 00       	mov    eax,ds:0x0	100041f1: R_386_32	term
100041f5:	83 ec 08             	sub    esp,0x8
100041f8:	6a db                	push   0xffffffdb
100041fa:	50                   	push   eax
100041fb:	e8 fc ff ff ff       	call   100041fc <firstRun(bool)+0x18a7>	100041fc: R_386_PC32	VgaText::putchar(char)
10004200:	83 c4 10             	add    esp,0x10
10004203:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
10004206:	eb b0                	jmp    100041b8 <firstRun(bool)+0x1863>
10004208:	a1 00 00 00 00       	mov    eax,ds:0x0	10004209: R_386_32	term
1000420d:	83 ec 04             	sub    esp,0x4
10004210:	6a 06                	push   0x6
10004212:	6a 4b                	push   0x4b
10004214:	50                   	push   eax
10004215:	e8 fc ff ff ff       	call   10004216 <firstRun(bool)+0x18c1>	10004216: R_386_PC32	VgaText::setCursor(int, int)
1000421a:	83 c4 10             	add    esp,0x10
1000421d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000421e: R_386_32	term
10004222:	83 ec 08             	sub    esp,0x8
10004225:	6a 1e                	push   0x1e
10004227:	50                   	push   eax
10004228:	e8 fc ff ff ff       	call   10004229 <firstRun(bool)+0x18d4>	10004229: R_386_PC32	VgaText::putchar(char)
1000422d:	83 c4 10             	add    esp,0x10
10004230:	a1 00 00 00 00       	mov    eax,ds:0x0	10004231: R_386_32	term
10004235:	83 ec 04             	sub    esp,0x4
10004238:	6a 14                	push   0x14
1000423a:	6a 4b                	push   0x4b
1000423c:	50                   	push   eax
1000423d:	e8 fc ff ff ff       	call   1000423e <firstRun(bool)+0x18e9>	1000423e: R_386_PC32	VgaText::setCursor(int, int)
10004242:	83 c4 10             	add    esp,0x10
10004245:	a1 00 00 00 00       	mov    eax,ds:0x0	10004246: R_386_32	term
1000424a:	83 ec 08             	sub    esp,0x8
1000424d:	6a 1f                	push   0x1f
1000424f:	50                   	push   eax
10004250:	e8 fc ff ff ff       	call   10004251 <firstRun(bool)+0x18fc>	10004251: R_386_PC32	VgaText::putchar(char)
10004255:	83 c4 10             	add    esp,0x10
10004258:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
1000425f:	83 7d c0 0e          	cmp    DWORD PTR [ebp-0x40],0xe
10004263:	7f 7e                	jg     100042e3 <firstRun(bool)+0x198e>
10004265:	a1 00 00 00 00       	mov    eax,ds:0x0	10004266: R_386_32	term
1000426a:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
1000426d:	83 c2 06             	add    edx,0x6
10004270:	83 ec 04             	sub    esp,0x4
10004273:	52                   	push   edx
10004274:	6a 14                	push   0x14
10004276:	50                   	push   eax
10004277:	e8 fc ff ff ff       	call   10004278 <firstRun(bool)+0x1923>	10004278: R_386_PC32	VgaText::setCursor(int, int)
1000427c:	83 c4 10             	add    esp,0x10
1000427f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004280: R_386_32	term
10004284:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10004287:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
1000428a:	01 d1                	add    ecx,edx
1000428c:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000428e: R_386_32	tzsel
10004292:	39 d1                	cmp    ecx,edx
10004294:	75 07                	jne    1000429d <firstRun(bool)+0x1948>
10004296:	bb 00 00 00 00       	mov    ebx,0x0
1000429b:	eb 05                	jmp    100042a2 <firstRun(bool)+0x194d>
1000429d:	bb 0f 00 00 00       	mov    ebx,0xf
100042a2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100042a5:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
100042a8:	01 d1                	add    ecx,edx
100042aa:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100042ac: R_386_32	tzsel
100042b0:	39 d1                	cmp    ecx,edx
100042b2:	75 07                	jne    100042bb <firstRun(bool)+0x1966>
100042b4:	b9 0f 00 00 00       	mov    ecx,0xf
100042b9:	eb 05                	jmp    100042c0 <firstRun(bool)+0x196b>
100042bb:	b9 00 00 00 00       	mov    ecx,0x0
100042c0:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
100042c3:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
100042c6:	01 f2                	add    edx,esi
100042c8:	8b 14 95 00 00 00 00 	mov    edx,DWORD PTR [edx*4+0x0]	100042cb: R_386_32	timezoneStrings
100042cf:	53                   	push   ebx
100042d0:	51                   	push   ecx
100042d1:	52                   	push   edx
100042d2:	50                   	push   eax
100042d3:	e8 fc ff ff ff       	call   100042d4 <firstRun(bool)+0x197f>	100042d4: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100042d8:	83 c4 10             	add    esp,0x10
100042db:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
100042de:	e9 7c ff ff ff       	jmp    1000425f <firstRun(bool)+0x190a>
100042e3:	a0 00 00 00 00       	mov    al,ds:0x0	100042e4: R_386_32	installKey
100042e8:	84 c0                	test   al,al
100042ea:	0f 94 c0             	sete   al
100042ed:	84 c0                	test   al,al
100042ef:	74 02                	je     100042f3 <firstRun(bool)+0x199e>
100042f1:	eb f0                	jmp    100042e3 <firstRun(bool)+0x198e>
100042f3:	a1 00 00 00 00       	mov    eax,ds:0x0	100042f4: R_386_32	term
100042f8:	05 82 00 00 00       	add    eax,0x82
100042fd:	83 ec 04             	sub    esp,0x4
10004300:	6a 04                	push   0x4
10004302:	6a 00                	push   0x0
10004304:	50                   	push   eax
10004305:	e8 fc ff ff ff       	call   10004306 <firstRun(bool)+0x19b1>	10004306: R_386_PC32	memset
1000430a:	83 c4 10             	add    esp,0x10
1000430d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000430e: R_386_32	term
10004312:	05 02 01 00 00       	add    eax,0x102
10004317:	83 ec 04             	sub    esp,0x4
1000431a:	6a 04                	push   0x4
1000431c:	6a 00                	push   0x0
1000431e:	50                   	push   eax
1000431f:	e8 fc ff ff ff       	call   10004320 <firstRun(bool)+0x19cb>	10004320: R_386_PC32	memset
10004324:	83 c4 10             	add    esp,0x10
10004327:	a0 00 00 00 00       	mov    al,ds:0x0	10004328: R_386_32	installKey
1000432c:	3c 01                	cmp    al,0x1
1000432e:	0f 94 c0             	sete   al
10004331:	84 c0                	test   al,al
10004333:	74 41                	je     10004376 <firstRun(bool)+0x1a21>
10004335:	a1 00 00 00 00       	mov    eax,ds:0x0	10004336: R_386_32	tzsel
1000433a:	48                   	dec    eax
1000433b:	a3 00 00 00 00       	mov    ds:0x0,eax	1000433c: R_386_32	tzsel
10004340:	a1 00 00 00 00       	mov    eax,ds:0x0	10004341: R_386_32	tzsel
10004345:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
10004348:	83 f8 04             	cmp    eax,0x4
1000434b:	7f 03                	jg     10004350 <firstRun(bool)+0x19fb>
1000434d:	ff 4d d8             	dec    DWORD PTR [ebp-0x28]
10004350:	a1 00 00 00 00       	mov    eax,ds:0x0	10004351: R_386_32	tzsel
10004355:	85 c0                	test   eax,eax
10004357:	79 0a                	jns    10004363 <firstRun(bool)+0x1a0e>
10004359:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000435b: R_386_32	tzsel
10004363:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10004367:	0f 89 82 00 00 00    	jns    100043ef <firstRun(bool)+0x1a9a>
1000436d:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10004374:	eb 79                	jmp    100043ef <firstRun(bool)+0x1a9a>
10004376:	a0 00 00 00 00       	mov    al,ds:0x0	10004377: R_386_32	installKey
1000437b:	3c 02                	cmp    al,0x2
1000437d:	0f 94 c0             	sete   al
10004380:	84 c0                	test   al,al
10004382:	74 4b                	je     100043cf <firstRun(bool)+0x1a7a>
10004384:	a1 00 00 00 00       	mov    eax,ds:0x0	10004385: R_386_32	tzsel
10004389:	40                   	inc    eax
1000438a:	a3 00 00 00 00       	mov    ds:0x0,eax	1000438b: R_386_32	tzsel
1000438f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004390: R_386_32	tzsel
10004394:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
10004397:	83 f8 0a             	cmp    eax,0xa
1000439a:	7e 03                	jle    1000439f <firstRun(bool)+0x1a4a>
1000439c:	ff 45 d8             	inc    DWORD PTR [ebp-0x28]
1000439f:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100043a2:	8d 50 ff             	lea    edx,[eax-0x1]
100043a5:	a1 00 00 00 00       	mov    eax,ds:0x0	100043a6: R_386_32	tzsel
100043aa:	39 c2                	cmp    edx,eax
100043ac:	7f 0b                	jg     100043b9 <firstRun(bool)+0x1a64>
100043ae:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100043b1:	83 e8 02             	sub    eax,0x2
100043b4:	a3 00 00 00 00       	mov    ds:0x0,eax	100043b5: R_386_32	tzsel
100043b9:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100043bc:	83 e8 0f             	sub    eax,0xf
100043bf:	39 45 d8             	cmp    DWORD PTR [ebp-0x28],eax
100043c2:	7c 2b                	jl     100043ef <firstRun(bool)+0x1a9a>
100043c4:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100043c7:	83 e8 10             	sub    eax,0x10
100043ca:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100043cd:	eb 20                	jmp    100043ef <firstRun(bool)+0x1a9a>
100043cf:	a0 00 00 00 00       	mov    al,ds:0x0	100043d0: R_386_32	installKey
100043d4:	3c 0a                	cmp    al,0xa
100043d6:	0f 94 c0             	sete   al
100043d9:	84 c0                	test   al,al
100043db:	75 2e                	jne    1000440b <firstRun(bool)+0x1ab6>
100043dd:	a0 00 00 00 00       	mov    al,ds:0x0	100043de: R_386_32	installKey
100043e2:	3c 1b                	cmp    al,0x1b
100043e4:	0f 94 c0             	sete   al
100043e7:	84 c0                	test   al,al
100043e9:	0f 85 28 f1 ff ff    	jne    10003517 <firstRun(bool)+0xbc2>
100043ef:	83 ec 0c             	sub    esp,0xc
100043f2:	68 f4 01 00 00       	push   0x1f4
100043f7:	e8 fc ff ff ff       	call   100043f8 <firstRun(bool)+0x1aa3>	100043f8: R_386_PC32	milliTenthSleep(unsigned int)
100043fc:	83 c4 10             	add    esp,0x10
100043ff:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004401: R_386_32	installKey
10004406:	e9 67 fd ff ff       	jmp    10004172 <firstRun(bool)+0x181d>
1000440b:	90                   	nop
1000440c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000440e: R_386_32	User::dstOn
10004413:	a1 00 00 00 00       	mov    eax,ds:0x0	10004414: R_386_32	tzsel
10004418:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000441b: R_386_32	timezoneStrings
1000441f:	83 c0 03             	add    eax,0x3
10004422:	8a 00                	mov    al,BYTE PTR [eax]
10004424:	3c 2e                	cmp    al,0x2e
10004426:	75 15                	jne    1000443d <firstRun(bool)+0x1ae8>
10004428:	a1 00 00 00 00       	mov    eax,ds:0x0	10004429: R_386_32	tzsel
1000442d:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10004430: R_386_32	timezoneStrings
10004434:	83 c0 04             	add    eax,0x4
10004437:	8a 00                	mov    al,BYTE PTR [eax]
10004439:	3c 35                	cmp    al,0x35
1000443b:	74 2a                	je     10004467 <firstRun(bool)+0x1b12>
1000443d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000443e: R_386_32	tzsel
10004442:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10004445: R_386_32	timezoneStrings
10004449:	83 c0 04             	add    eax,0x4
1000444c:	8a 00                	mov    al,BYTE PTR [eax]
1000444e:	3c 2e                	cmp    al,0x2e
10004450:	75 19                	jne    1000446b <firstRun(bool)+0x1b16>
10004452:	a1 00 00 00 00       	mov    eax,ds:0x0	10004453: R_386_32	tzsel
10004457:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000445a: R_386_32	timezoneStrings
1000445e:	83 c0 05             	add    eax,0x5
10004461:	8a 00                	mov    al,BYTE PTR [eax]
10004463:	3c 35                	cmp    al,0x35
10004465:	75 04                	jne    1000446b <firstRun(bool)+0x1b16>
10004467:	b0 01                	mov    al,0x1
10004469:	eb 02                	jmp    1000446d <firstRun(bool)+0x1b18>
1000446b:	b0 00                	mov    al,0x0
1000446d:	a2 00 00 00 00       	mov    ds:0x0,al	1000446e: R_386_32	User::timezoneHalfHourOffset
10004472:	a1 00 00 00 00       	mov    eax,ds:0x0	10004473: R_386_32	tzsel
10004477:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000447a: R_386_32	timezoneStrings
1000447e:	83 c0 02             	add    eax,0x2
10004481:	8a 00                	mov    al,BYTE PTR [eax]
10004483:	0f be c0             	movsx  eax,al
10004486:	83 e8 30             	sub    eax,0x30
10004489:	a3 00 00 00 00       	mov    ds:0x0,eax	1000448a: R_386_32	User::timezoneHourOffset
1000448e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000448f: R_386_32	tzsel
10004493:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10004496: R_386_32	timezoneStrings
1000449a:	83 c0 04             	add    eax,0x4
1000449d:	8a 00                	mov    al,BYTE PTR [eax]
1000449f:	3c 2e                	cmp    al,0x2e
100044a1:	75 37                	jne    100044da <firstRun(bool)+0x1b85>
100044a3:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100044a5: R_386_32	User::timezoneHourOffset
100044a9:	89 d0                	mov    eax,edx
100044ab:	c1 e0 02             	shl    eax,0x2
100044ae:	01 d0                	add    eax,edx
100044b0:	01 c0                	add    eax,eax
100044b2:	a3 00 00 00 00       	mov    ds:0x0,eax	100044b3: R_386_32	User::timezoneHourOffset
100044b7:	a1 00 00 00 00       	mov    eax,ds:0x0	100044b8: R_386_32	tzsel
100044bc:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100044bf: R_386_32	timezoneStrings
100044c3:	83 c0 03             	add    eax,0x3
100044c6:	8a 00                	mov    al,BYTE PTR [eax]
100044c8:	0f be c0             	movsx  eax,al
100044cb:	8d 50 d0             	lea    edx,[eax-0x30]
100044ce:	a1 00 00 00 00       	mov    eax,ds:0x0	100044cf: R_386_32	User::timezoneHourOffset
100044d3:	01 d0                	add    eax,edx
100044d5:	a3 00 00 00 00       	mov    ds:0x0,eax	100044d6: R_386_32	User::timezoneHourOffset
100044da:	a1 00 00 00 00       	mov    eax,ds:0x0	100044db: R_386_32	tzsel
100044df:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100044e2: R_386_32	timezoneStrings
100044e6:	40                   	inc    eax
100044e7:	8a 00                	mov    al,BYTE PTR [eax]
100044e9:	3c 2d                	cmp    al,0x2d
100044eb:	75 0c                	jne    100044f9 <firstRun(bool)+0x1ba4>
100044ed:	a1 00 00 00 00       	mov    eax,ds:0x0	100044ee: R_386_32	User::timezoneHourOffset
100044f2:	f7 d8                	neg    eax
100044f4:	a3 00 00 00 00       	mov    ds:0x0,eax	100044f5: R_386_32	User::timezoneHourOffset
100044f9:	a1 00 00 00 00       	mov    eax,ds:0x0	100044fa: R_386_32	User::timezoneHourOffset
100044fe:	83 ec 08             	sub    esp,0x8
10004501:	50                   	push   eax
10004502:	68 fa 9e 00 10       	push   0x10009efa	10004503: R_386_32	.text
10004507:	e8 fc ff ff ff       	call   10004508 <firstRun(bool)+0x1bb3>	10004508: R_386_PC32	Dbg::kprintf(char const*, ...)
1000450c:	83 c4 10             	add    esp,0x10
1000450f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004510: R_386_32	Krnl::computer
10004514:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
1000451a:	83 ec 04             	sub    esp,0x4
1000451d:	ff b5 d8 fe ff ff    	push   DWORD PTR [ebp-0x128]
10004523:	ff b5 d4 fe ff ff    	push   DWORD PTR [ebp-0x12c]
10004529:	50                   	push   eax
1000452a:	e8 fc ff ff ff       	call   1000452b <firstRun(bool)+0x1bd6>	1000452b: R_386_PC32	Clock::setTimeInDatetimeLocal(datetime_t)
1000452f:	83 c4 10             	add    esp,0x10
10004532:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004534: R_386_32	installKey
10004539:	83 ec 0c             	sub    esp,0xc
1000453c:	68 a0 0f 00 00       	push   0xfa0
10004541:	e8 fc ff ff ff       	call   10004542 <firstRun(bool)+0x1bed>	10004542: R_386_PC32	milliTenthSleep(unsigned int)
10004546:	83 c4 10             	add    esp,0x10
10004549:	eb 01                	jmp    1000454c <firstRun(bool)+0x1bf7>
1000454b:	90                   	nop
1000454c:	e8 fc ff ff ff       	call   1000454d <firstRun(bool)+0x1bf8>	1000454d: R_386_PC32	drawBootScreen()
10004551:	83 ec 0c             	sub    esp,0xc
10004554:	68 58 1b 00 00       	push   0x1b58
10004559:	e8 fc ff ff ff       	call   1000455a <firstRun(bool)+0x1c05>	1000455a: R_386_PC32	milliTenthSleep(unsigned int)
1000455e:	83 c4 10             	add    esp,0x10
10004561:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004563: R_386_32	installKey
10004568:	e8 fc ff ff ff       	call   10004569 <firstRun(bool)+0x1c14>	10004569: R_386_PC32	drawBootScreen()
1000456d:	83 ec 0c             	sub    esp,0xc
10004570:	68 0a 9f 00 10       	push   0x10009f0a	10004571: R_386_32	.text
10004575:	6a 10                	push   0x10
10004577:	6a 37                	push   0x37
10004579:	6a 03                	push   0x3
1000457b:	6a 14                	push   0x14
1000457d:	e8 fc ff ff ff       	call   1000457e <firstRun(bool)+0x1c29>	1000457e: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004582:	83 c4 20             	add    esp,0x20
10004585:	a1 00 00 00 00       	mov    eax,ds:0x0	10004586: R_386_32	term
1000458a:	83 ec 04             	sub    esp,0x4
1000458d:	6a 06                	push   0x6
1000458f:	6a 16                	push   0x16
10004591:	50                   	push   eax
10004592:	e8 fc ff ff ff       	call   10004593 <firstRun(bool)+0x1c3e>	10004593: R_386_PC32	VgaText::setCursor(int, int)
10004597:	83 c4 10             	add    esp,0x10
1000459a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000459b: R_386_32	term
1000459f:	83 ec 08             	sub    esp,0x8
100045a2:	68 1c 9f 00 10       	push   0x10009f1c	100045a3: R_386_32	.text
100045a7:	50                   	push   eax
100045a8:	e8 fc ff ff ff       	call   100045a9 <firstRun(bool)+0x1c54>	100045a9: R_386_PC32	VgaText::puts(char const*)
100045ad:	83 c4 10             	add    esp,0x10
100045b0:	a1 00 00 00 00       	mov    eax,ds:0x0	100045b1: R_386_32	term
100045b5:	83 ec 04             	sub    esp,0x4
100045b8:	6a 07                	push   0x7
100045ba:	6a 16                	push   0x16
100045bc:	50                   	push   eax
100045bd:	e8 fc ff ff ff       	call   100045be <firstRun(bool)+0x1c69>	100045be: R_386_PC32	VgaText::setCursor(int, int)
100045c2:	83 c4 10             	add    esp,0x10
100045c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100045c6: R_386_32	term
100045ca:	83 ec 08             	sub    esp,0x8
100045cd:	68 50 9f 00 10       	push   0x10009f50	100045ce: R_386_32	.text
100045d2:	50                   	push   eax
100045d3:	e8 fc ff ff ff       	call   100045d4 <firstRun(bool)+0x1c7f>	100045d4: R_386_PC32	VgaText::puts(char const*)
100045d8:	83 c4 10             	add    esp,0x10
100045db:	a1 00 00 00 00       	mov    eax,ds:0x0	100045dc: R_386_32	term
100045e0:	83 ec 04             	sub    esp,0x4
100045e3:	6a 18                	push   0x18
100045e5:	6a 11                	push   0x11
100045e7:	50                   	push   eax
100045e8:	e8 fc ff ff ff       	call   100045e9 <firstRun(bool)+0x1c94>	100045e9: R_386_PC32	VgaText::setCursor(int, int)
100045ed:	83 c4 10             	add    esp,0x10
100045f0:	a1 00 00 00 00       	mov    eax,ds:0x0	100045f1: R_386_32	term
100045f5:	6a 0b                	push   0xb
100045f7:	6a 03                	push   0x3
100045f9:	68 b2 9e 00 10       	push   0x10009eb2	100045fa: R_386_32	.text
100045fe:	50                   	push   eax
100045ff:	e8 fc ff ff ff       	call   10004600 <firstRun(bool)+0x1cab>	10004600: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004604:	83 c4 10             	add    esp,0x10
10004607:	c7 45 8c 03 00 00 00 	mov    DWORD PTR [ebp-0x74],0x3
1000460e:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10004614:	bb c8 a1 00 10       	mov    ebx,0x1000a1c8	10004615: R_386_32	.text
10004619:	ba 03 00 00 00       	mov    edx,0x3
1000461e:	89 c7                	mov    edi,eax
10004620:	89 de                	mov    esi,ebx
10004622:	89 d1                	mov    ecx,edx
10004624:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004626:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [ebp-0x44],0x0
1000462d:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10004630:	3b 45 8c             	cmp    eax,DWORD PTR [ebp-0x74]
10004633:	7d 68                	jge    1000469d <firstRun(bool)+0x1d48>
10004635:	a1 00 00 00 00       	mov    eax,ds:0x0	10004636: R_386_32	term
1000463a:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
1000463d:	83 c2 09             	add    edx,0x9
10004640:	83 ec 04             	sub    esp,0x4
10004643:	52                   	push   edx
10004644:	6a 16                	push   0x16
10004646:	50                   	push   eax
10004647:	e8 fc ff ff ff       	call   10004648 <firstRun(bool)+0x1cf3>	10004648: R_386_PC32	VgaText::setCursor(int, int)
1000464c:	83 c4 10             	add    esp,0x10
1000464f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004650: R_386_32	term
10004654:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004656: R_386_32	modesel
1000465a:	39 55 bc             	cmp    DWORD PTR [ebp-0x44],edx
1000465d:	75 07                	jne    10004666 <firstRun(bool)+0x1d11>
1000465f:	bb 00 00 00 00       	mov    ebx,0x0
10004664:	eb 05                	jmp    1000466b <firstRun(bool)+0x1d16>
10004666:	bb 0f 00 00 00       	mov    ebx,0xf
1000466b:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000466d: R_386_32	modesel
10004671:	39 55 bc             	cmp    DWORD PTR [ebp-0x44],edx
10004674:	75 07                	jne    1000467d <firstRun(bool)+0x1d28>
10004676:	b9 0f 00 00 00       	mov    ecx,0xf
1000467b:	eb 05                	jmp    10004682 <firstRun(bool)+0x1d2d>
1000467d:	b9 00 00 00 00       	mov    ecx,0x0
10004682:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10004685:	8b 94 95 c8 fe ff ff 	mov    edx,DWORD PTR [ebp+edx*4-0x138]
1000468c:	53                   	push   ebx
1000468d:	51                   	push   ecx
1000468e:	52                   	push   edx
1000468f:	50                   	push   eax
10004690:	e8 fc ff ff ff       	call   10004691 <firstRun(bool)+0x1d3c>	10004691: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004695:	83 c4 10             	add    esp,0x10
10004698:	ff 45 bc             	inc    DWORD PTR [ebp-0x44]
1000469b:	eb 90                	jmp    1000462d <firstRun(bool)+0x1cd8>
1000469d:	a0 00 00 00 00       	mov    al,ds:0x0	1000469e: R_386_32	installKey
100046a2:	84 c0                	test   al,al
100046a4:	0f 94 c0             	sete   al
100046a7:	84 c0                	test   al,al
100046a9:	74 02                	je     100046ad <firstRun(bool)+0x1d58>
100046ab:	eb f0                	jmp    1000469d <firstRun(bool)+0x1d48>
100046ad:	a1 00 00 00 00       	mov    eax,ds:0x0	100046ae: R_386_32	term
100046b2:	05 82 00 00 00       	add    eax,0x82
100046b7:	83 ec 04             	sub    esp,0x4
100046ba:	6a 04                	push   0x4
100046bc:	6a 00                	push   0x0
100046be:	50                   	push   eax
100046bf:	e8 fc ff ff ff       	call   100046c0 <firstRun(bool)+0x1d6b>	100046c0: R_386_PC32	memset
100046c4:	83 c4 10             	add    esp,0x10
100046c7:	a1 00 00 00 00       	mov    eax,ds:0x0	100046c8: R_386_32	term
100046cc:	05 02 01 00 00       	add    eax,0x102
100046d1:	83 ec 04             	sub    esp,0x4
100046d4:	6a 04                	push   0x4
100046d6:	6a 00                	push   0x0
100046d8:	50                   	push   eax
100046d9:	e8 fc ff ff ff       	call   100046da <firstRun(bool)+0x1d85>	100046da: R_386_PC32	memset
100046de:	83 c4 10             	add    esp,0x10
100046e1:	a0 00 00 00 00       	mov    al,ds:0x0	100046e2: R_386_32	installKey
100046e6:	3c 01                	cmp    al,0x1
100046e8:	0f 94 c0             	sete   al
100046eb:	84 c0                	test   al,al
100046ed:	74 20                	je     1000470f <firstRun(bool)+0x1dba>
100046ef:	a1 00 00 00 00       	mov    eax,ds:0x0	100046f0: R_386_32	modesel
100046f4:	48                   	dec    eax
100046f5:	a3 00 00 00 00       	mov    ds:0x0,eax	100046f6: R_386_32	modesel
100046fa:	a1 00 00 00 00       	mov    eax,ds:0x0	100046fb: R_386_32	modesel
100046ff:	85 c0                	test   eax,eax
10004701:	79 5a                	jns    1000475d <firstRun(bool)+0x1e08>
10004703:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004705: R_386_32	modesel
1000470d:	eb 4e                	jmp    1000475d <firstRun(bool)+0x1e08>
1000470f:	a0 00 00 00 00       	mov    al,ds:0x0	10004710: R_386_32	installKey
10004714:	3c 02                	cmp    al,0x2
10004716:	0f 94 c0             	sete   al
10004719:	84 c0                	test   al,al
1000471b:	74 20                	je     1000473d <firstRun(bool)+0x1de8>
1000471d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000471e: R_386_32	modesel
10004722:	40                   	inc    eax
10004723:	a3 00 00 00 00       	mov    ds:0x0,eax	10004724: R_386_32	modesel
10004728:	a1 00 00 00 00       	mov    eax,ds:0x0	10004729: R_386_32	modesel
1000472d:	39 45 8c             	cmp    DWORD PTR [ebp-0x74],eax
10004730:	7f 2b                	jg     1000475d <firstRun(bool)+0x1e08>
10004732:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004735:	48                   	dec    eax
10004736:	a3 00 00 00 00       	mov    ds:0x0,eax	10004737: R_386_32	modesel
1000473b:	eb 20                	jmp    1000475d <firstRun(bool)+0x1e08>
1000473d:	a0 00 00 00 00       	mov    al,ds:0x0	1000473e: R_386_32	installKey
10004742:	3c 0a                	cmp    al,0xa
10004744:	0f 94 c0             	sete   al
10004747:	84 c0                	test   al,al
10004749:	75 2e                	jne    10004779 <firstRun(bool)+0x1e24>
1000474b:	a0 00 00 00 00       	mov    al,ds:0x0	1000474c: R_386_32	installKey
10004750:	3c 1b                	cmp    al,0x1b
10004752:	0f 94 c0             	sete   al
10004755:	84 c0                	test   al,al
10004757:	0f 85 85 f9 ff ff    	jne    100040e2 <firstRun(bool)+0x178d>
1000475d:	83 ec 0c             	sub    esp,0xc
10004760:	68 f4 01 00 00       	push   0x1f4
10004765:	e8 fc ff ff ff       	call   10004766 <firstRun(bool)+0x1e11>	10004766: R_386_PC32	milliTenthSleep(unsigned int)
1000476a:	83 c4 10             	add    esp,0x10
1000476d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000476f: R_386_32	installKey
10004774:	e9 ad fe ff ff       	jmp    10004626 <firstRun(bool)+0x1cd1>
10004779:	90                   	nop
1000477a:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10004781:	0f 84 ff 00 00 00    	je     10004886 <firstRun(bool)+0x1f31>
10004787:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004789: R_386_32	showSidebar
1000478e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000478f: R_386_32	term
10004793:	83 ec 0c             	sub    esp,0xc
10004796:	50                   	push   eax
10004797:	e8 fc ff ff ff       	call   10004798 <firstRun(bool)+0x1e43>	10004798: R_386_PC32	setActiveTerminal(VgaText*)
1000479c:	83 c4 10             	add    esp,0x10
1000479f:	e8 fc ff ff ff       	call   100047a0 <firstRun(bool)+0x1e4b>	100047a0: R_386_PC32	drawBootScreen()
100047a4:	83 ec 0c             	sub    esp,0xc
100047a7:	68 85 9f 00 10       	push   0x10009f85	100047a8: R_386_32	.text
100047ac:	6a 0d                	push   0xd
100047ae:	6a 32                	push   0x32
100047b0:	6a 05                	push   0x5
100047b2:	6a 16                	push   0x16
100047b4:	e8 fc ff ff ff       	call   100047b5 <firstRun(bool)+0x1e60>	100047b5: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100047b9:	83 c4 20             	add    esp,0x20
100047bc:	a1 00 00 00 00       	mov    eax,ds:0x0	100047bd: R_386_32	term
100047c1:	83 ec 04             	sub    esp,0x4
100047c4:	6a 08                	push   0x8
100047c6:	6a 18                	push   0x18
100047c8:	50                   	push   eax
100047c9:	e8 fc ff ff ff       	call   100047ca <firstRun(bool)+0x1e75>	100047ca: R_386_PC32	VgaText::setCursor(int, int)
100047ce:	83 c4 10             	add    esp,0x10
100047d1:	a1 00 00 00 00       	mov    eax,ds:0x0	100047d2: R_386_32	term
100047d6:	83 ec 08             	sub    esp,0x8
100047d9:	68 9c 9f 00 10       	push   0x10009f9c	100047da: R_386_32	.text
100047de:	50                   	push   eax
100047df:	e8 fc ff ff ff       	call   100047e0 <firstRun(bool)+0x1e8b>	100047e0: R_386_PC32	VgaText::puts(char const*)
100047e4:	83 c4 10             	add    esp,0x10
100047e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100047e8: R_386_32	term
100047ec:	83 ec 04             	sub    esp,0x4
100047ef:	6a 0a                	push   0xa
100047f1:	6a 18                	push   0x18
100047f3:	50                   	push   eax
100047f4:	e8 fc ff ff ff       	call   100047f5 <firstRun(bool)+0x1ea0>	100047f5: R_386_PC32	VgaText::setCursor(int, int)
100047f9:	83 c4 10             	add    esp,0x10
100047fc:	a1 00 00 00 00       	mov    eax,ds:0x0	100047fd: R_386_32	term
10004801:	83 ec 08             	sub    esp,0x8
10004804:	68 c4 9f 00 10       	push   0x10009fc4	10004805: R_386_32	.text
10004809:	50                   	push   eax
1000480a:	e8 fc ff ff ff       	call   1000480b <firstRun(bool)+0x1eb6>	1000480b: R_386_PC32	VgaText::puts(char const*)
1000480f:	83 c4 10             	add    esp,0x10
10004812:	a1 00 00 00 00       	mov    eax,ds:0x0	10004813: R_386_32	term
10004817:	83 ec 04             	sub    esp,0x4
1000481a:	6a 0b                	push   0xb
1000481c:	6a 18                	push   0x18
1000481e:	50                   	push   eax
1000481f:	e8 fc ff ff ff       	call   10004820 <firstRun(bool)+0x1ecb>	10004820: R_386_PC32	VgaText::setCursor(int, int)
10004824:	83 c4 10             	add    esp,0x10
10004827:	a1 00 00 00 00       	mov    eax,ds:0x0	10004828: R_386_32	term
1000482c:	83 ec 08             	sub    esp,0x8
1000482f:	68 ed 9f 00 10       	push   0x10009fed	10004830: R_386_32	.text
10004834:	50                   	push   eax
10004835:	e8 fc ff ff ff       	call   10004836 <firstRun(bool)+0x1ee1>	10004836: R_386_PC32	VgaText::puts(char const*)
1000483a:	83 c4 10             	add    esp,0x10
1000483d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000483e: R_386_32	term
10004842:	83 ec 04             	sub    esp,0x4
10004845:	6a 0e                	push   0xe
10004847:	6a 18                	push   0x18
10004849:	50                   	push   eax
1000484a:	e8 fc ff ff ff       	call   1000484b <firstRun(bool)+0x1ef6>	1000484b: R_386_PC32	VgaText::setCursor(int, int)
1000484f:	83 c4 10             	add    esp,0x10
10004852:	a1 00 00 00 00       	mov    eax,ds:0x0	10004853: R_386_32	term
10004857:	83 ec 08             	sub    esp,0x8
1000485a:	68 fc 9f 00 10       	push   0x10009ffc	1000485b: R_386_32	.text
1000485f:	50                   	push   eax
10004860:	e8 fc ff ff ff       	call   10004861 <firstRun(bool)+0x1f0c>	10004861: R_386_PC32	VgaText::puts(char const*)
10004865:	83 c4 10             	add    esp,0x10
10004868:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000486a: R_386_32	installKey
1000486f:	a0 00 00 00 00       	mov    al,ds:0x0	10004870: R_386_32	installKey
10004874:	84 c0                	test   al,al
10004876:	0f 94 c0             	sete   al
10004879:	84 c0                	test   al,al
1000487b:	74 02                	je     1000487f <firstRun(bool)+0x1f2a>
1000487d:	eb f0                	jmp    1000486f <firstRun(bool)+0x1f1a>
1000487f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004881: R_386_32	installKey
10004886:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004888: R_386_32	installKey
1000488d:	83 ec 0c             	sub    esp,0xc
10004890:	68 84 03 00 00       	push   0x384
10004895:	e8 fc ff ff ff       	call   10004896 <firstRun(bool)+0x1f41>	10004896: R_386_PC32	milliTenthSleep(unsigned int)
1000489a:	83 c4 10             	add    esp,0x10
1000489d:	e8 fc ff ff ff       	call   1000489e <firstRun(bool)+0x1f49>	1000489e: R_386_PC32	drawBootScreen()
100048a2:	83 ec 0c             	sub    esp,0xc
100048a5:	68 18 2e 00 00       	push   0x2e18
100048aa:	e8 fc ff ff ff       	call   100048ab <firstRun(bool)+0x1f56>	100048ab: R_386_PC32	milliTenthSleep(unsigned int)
100048af:	83 c4 10             	add    esp,0x10
100048b2:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100048b9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100048bb: R_386_32	installKey
100048c0:	e8 fc ff ff ff       	call   100048c1 <firstRun(bool)+0x1f6c>	100048c1: R_386_PC32	drawBootScreen()
100048c5:	83 ec 0c             	sub    esp,0xc
100048c8:	68 26 a0 00 10       	push   0x1000a026	100048c9: R_386_32	.text
100048cd:	6a 0e                	push   0xe
100048cf:	6a 32                	push   0x32
100048d1:	6a 02                	push   0x2
100048d3:	6a 16                	push   0x16
100048d5:	e8 fc ff ff ff       	call   100048d6 <firstRun(bool)+0x1f81>	100048d6: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100048da:	83 c4 20             	add    esp,0x20
100048dd:	a1 00 00 00 00       	mov    eax,ds:0x0	100048de: R_386_32	term
100048e2:	83 ec 04             	sub    esp,0x4
100048e5:	6a 18                	push   0x18
100048e7:	6a 11                	push   0x11
100048e9:	50                   	push   eax
100048ea:	e8 fc ff ff ff       	call   100048eb <firstRun(bool)+0x1f96>	100048eb: R_386_PC32	VgaText::setCursor(int, int)
100048ef:	83 c4 10             	add    esp,0x10
100048f2:	a1 00 00 00 00       	mov    eax,ds:0x0	100048f3: R_386_32	term
100048f7:	6a 0b                	push   0xb
100048f9:	6a 03                	push   0x3
100048fb:	68 b2 9e 00 10       	push   0x10009eb2	100048fc: R_386_32	.text
10004900:	50                   	push   eax
10004901:	e8 fc ff ff ff       	call   10004902 <firstRun(bool)+0x1fad>	10004902: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004906:	83 c4 10             	add    esp,0x10
10004909:	a1 00 00 00 00       	mov    eax,ds:0x0	1000490a: R_386_32	term
1000490e:	83 ec 04             	sub    esp,0x4
10004911:	6a 05                	push   0x5
10004913:	6a 18                	push   0x18
10004915:	50                   	push   eax
10004916:	e8 fc ff ff ff       	call   10004917 <firstRun(bool)+0x1fc2>	10004917: R_386_PC32	VgaText::setCursor(int, int)
1000491b:	83 c4 10             	add    esp,0x10
1000491e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000491f: R_386_32	term
10004923:	83 ec 08             	sub    esp,0x8
10004926:	68 34 a0 00 10       	push   0x1000a034	10004927: R_386_32	.text
1000492b:	50                   	push   eax
1000492c:	e8 fc ff ff ff       	call   1000492d <firstRun(bool)+0x1fd8>	1000492d: R_386_PC32	VgaText::puts(char const*)
10004931:	83 c4 10             	add    esp,0x10
10004934:	a1 00 00 00 00       	mov    eax,ds:0x0	10004935: R_386_32	term
10004939:	83 ec 04             	sub    esp,0x4
1000493c:	6a 06                	push   0x6
1000493e:	6a 18                	push   0x18
10004940:	50                   	push   eax
10004941:	e8 fc ff ff ff       	call   10004942 <firstRun(bool)+0x1fed>	10004942: R_386_PC32	VgaText::setCursor(int, int)
10004946:	83 c4 10             	add    esp,0x10
10004949:	a1 00 00 00 00       	mov    eax,ds:0x0	1000494a: R_386_32	term
1000494e:	83 ec 08             	sub    esp,0x8
10004951:	68 88 9e 00 10       	push   0x10009e88	10004952: R_386_32	.text
10004956:	50                   	push   eax
10004957:	e8 fc ff ff ff       	call   10004958 <firstRun(bool)+0x2003>	10004958: R_386_PC32	VgaText::puts(char const*)
1000495c:	83 c4 10             	add    esp,0x10
1000495f:	c6 05 10 00 00 00 00 	mov    BYTE PTR ds:0x10,0x0	10004961: R_386_32	pkeybuf
10004966:	c6 05 11 00 00 00 00 	mov    BYTE PTR ds:0x11,0x0	10004968: R_386_32	pkeybuf
1000496d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000496e: R_386_32	term
10004972:	83 ec 04             	sub    esp,0x4
10004975:	6a 08                	push   0x8
10004977:	6a 1c                	push   0x1c
10004979:	50                   	push   eax
1000497a:	e8 fc ff ff ff       	call   1000497b <firstRun(bool)+0x2026>	1000497b: R_386_PC32	VgaText::setCursor(int, int)
1000497f:	83 c4 10             	add    esp,0x10
10004982:	a1 00 00 00 00       	mov    eax,ds:0x0	10004983: R_386_32	term
10004987:	83 ec 08             	sub    esp,0x8
1000498a:	68 00 00 00 00       	push   0x0	1000498b: R_386_32	pkeybuf
1000498f:	50                   	push   eax
10004990:	e8 fc ff ff ff       	call   10004991 <firstRun(bool)+0x203c>	10004991: R_386_PC32	VgaText::puts(char const*)
10004995:	83 c4 10             	add    esp,0x10
10004998:	a1 00 00 00 00       	mov    eax,ds:0x0	10004999: R_386_32	term
1000499d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100049a0:	83 c2 1c             	add    edx,0x1c
100049a3:	83 ec 04             	sub    esp,0x4
100049a6:	6a 08                	push   0x8
100049a8:	52                   	push   edx
100049a9:	50                   	push   eax
100049aa:	e8 fc ff ff ff       	call   100049ab <firstRun(bool)+0x2056>	100049ab: R_386_PC32	VgaText::setCursor(int, int)
100049af:	83 c4 10             	add    esp,0x10
100049b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100049b3: R_386_32	term
100049b7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100049ba:	81 c2 00 00 00 00    	add    edx,0x0	100049bc: R_386_32	pkeybuf
100049c0:	8a 12                	mov    dl,BYTE PTR [edx]
100049c2:	0f be d2             	movsx  edx,dl
100049c5:	6a 00                	push   0x0
100049c7:	6a 0f                	push   0xf
100049c9:	52                   	push   edx
100049ca:	50                   	push   eax
100049cb:	e8 fc ff ff ff       	call   100049cc <firstRun(bool)+0x2077>	100049cc: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100049d0:	83 c4 10             	add    esp,0x10
100049d3:	a1 00 00 00 00       	mov    eax,ds:0x0	100049d4: R_386_32	term
100049d8:	83 ec 04             	sub    esp,0x4
100049db:	6a 08                	push   0x8
100049dd:	6a 2c                	push   0x2c
100049df:	50                   	push   eax
100049e0:	e8 fc ff ff ff       	call   100049e1 <firstRun(bool)+0x208c>	100049e1: R_386_PC32	VgaText::setCursor(int, int)
100049e5:	83 c4 10             	add    esp,0x10
100049e8:	a1 00 00 00 00       	mov    eax,ds:0x0	100049e9: R_386_32	term
100049ed:	6a 0f                	push   0xf
100049ef:	6a 0f                	push   0xf
100049f1:	6a 20                	push   0x20
100049f3:	50                   	push   eax
100049f4:	e8 fc ff ff ff       	call   100049f5 <firstRun(bool)+0x20a0>	100049f5: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100049f9:	83 c4 10             	add    esp,0x10
100049fc:	a1 00 00 00 00       	mov    eax,ds:0x0	100049fd: R_386_32	term
10004a01:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004a04:	83 c2 1c             	add    edx,0x1c
10004a07:	83 ec 04             	sub    esp,0x4
10004a0a:	6a 08                	push   0x8
10004a0c:	52                   	push   edx
10004a0d:	50                   	push   eax
10004a0e:	e8 fc ff ff ff       	call   10004a0f <firstRun(bool)+0x20ba>	10004a0f: R_386_PC32	VgaText::setCursor(int, int)
10004a13:	83 c4 10             	add    esp,0x10
10004a16:	a0 00 00 00 00       	mov    al,ds:0x0	10004a17: R_386_32	installKey
10004a1b:	84 c0                	test   al,al
10004a1d:	0f 94 c0             	sete   al
10004a20:	84 c0                	test   al,al
10004a22:	74 02                	je     10004a26 <firstRun(bool)+0x20d1>
10004a24:	eb f0                	jmp    10004a16 <firstRun(bool)+0x20c1>
10004a26:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a27: R_386_32	term
10004a2b:	05 82 00 00 00       	add    eax,0x82
10004a30:	83 ec 04             	sub    esp,0x4
10004a33:	6a 10                	push   0x10
10004a35:	6a 00                	push   0x0
10004a37:	50                   	push   eax
10004a38:	e8 fc ff ff ff       	call   10004a39 <firstRun(bool)+0x20e4>	10004a39: R_386_PC32	memset
10004a3d:	83 c4 10             	add    esp,0x10
10004a40:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a41: R_386_32	term
10004a45:	05 02 01 00 00       	add    eax,0x102
10004a4a:	83 ec 04             	sub    esp,0x4
10004a4d:	6a 10                	push   0x10
10004a4f:	6a 00                	push   0x0
10004a51:	50                   	push   eax
10004a52:	e8 fc ff ff ff       	call   10004a53 <firstRun(bool)+0x20fe>	10004a53: R_386_PC32	memset
10004a57:	83 c4 10             	add    esp,0x10
10004a5a:	a0 00 00 00 00       	mov    al,ds:0x0	10004a5b: R_386_32	installKey
10004a5f:	3c 03                	cmp    al,0x3
10004a61:	74 09                	je     10004a6c <firstRun(bool)+0x2117>
10004a63:	a0 00 00 00 00       	mov    al,ds:0x0	10004a64: R_386_32	installKey
10004a68:	3c 08                	cmp    al,0x8
10004a6a:	75 04                	jne    10004a70 <firstRun(bool)+0x211b>
10004a6c:	b0 01                	mov    al,0x1
10004a6e:	eb 02                	jmp    10004a72 <firstRun(bool)+0x211d>
10004a70:	b0 00                	mov    al,0x0
10004a72:	84 c0                	test   al,al
10004a74:	74 31                	je     10004aa7 <firstRun(bool)+0x2152>
10004a76:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
10004a79:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10004a7d:	75 14                	jne    10004a93 <firstRun(bool)+0x213e>
10004a7f:	83 ec 0c             	sub    esp,0xc
10004a82:	68 00 00 00 00       	push   0x0	10004a83: R_386_32	pkeybuf
10004a87:	e8 fc ff ff ff       	call   10004a88 <firstRun(bool)+0x2133>	10004a88: R_386_PC32	strlen
10004a8c:	83 c4 10             	add    esp,0x10
10004a8f:	48                   	dec    eax
10004a90:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10004a93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004a96:	05 00 00 00 00       	add    eax,0x0	10004a97: R_386_32	pkeybuf
10004a9b:	8a 00                	mov    al,BYTE PTR [eax]
10004a9d:	3c 2d                	cmp    al,0x2d
10004a9f:	0f 85 6f 03 00 00    	jne    10004e14 <firstRun(bool)+0x24bf>
10004aa5:	eb cf                	jmp    10004a76 <firstRun(bool)+0x2121>
10004aa7:	a0 00 00 00 00       	mov    al,ds:0x0	10004aa8: R_386_32	installKey
10004aac:	3c 2f                	cmp    al,0x2f
10004aae:	7e 09                	jle    10004ab9 <firstRun(bool)+0x2164>
10004ab0:	a0 00 00 00 00       	mov    al,ds:0x0	10004ab1: R_386_32	installKey
10004ab5:	3c 39                	cmp    al,0x39
10004ab7:	7e 36                	jle    10004aef <firstRun(bool)+0x219a>
10004ab9:	a0 00 00 00 00       	mov    al,ds:0x0	10004aba: R_386_32	installKey
10004abe:	3c 40                	cmp    al,0x40
10004ac0:	7e 09                	jle    10004acb <firstRun(bool)+0x2176>
10004ac2:	a0 00 00 00 00       	mov    al,ds:0x0	10004ac3: R_386_32	installKey
10004ac7:	3c 5a                	cmp    al,0x5a
10004ac9:	7e 24                	jle    10004aef <firstRun(bool)+0x219a>
10004acb:	a0 00 00 00 00       	mov    al,ds:0x0	10004acc: R_386_32	installKey
10004ad0:	3c 60                	cmp    al,0x60
10004ad2:	7e 09                	jle    10004add <firstRun(bool)+0x2188>
10004ad4:	a0 00 00 00 00       	mov    al,ds:0x0	10004ad5: R_386_32	installKey
10004ad9:	3c 7a                	cmp    al,0x7a
10004adb:	7e 12                	jle    10004aef <firstRun(bool)+0x219a>
10004add:	a0 00 00 00 00       	mov    al,ds:0x0	10004ade: R_386_32	installKey
10004ae2:	3c 20                	cmp    al,0x20
10004ae4:	74 09                	je     10004aef <firstRun(bool)+0x219a>
10004ae6:	a0 00 00 00 00       	mov    al,ds:0x0	10004ae7: R_386_32	installKey
10004aeb:	3c 04                	cmp    al,0x4
10004aed:	75 04                	jne    10004af3 <firstRun(bool)+0x219e>
10004aef:	b0 01                	mov    al,0x1
10004af1:	eb 02                	jmp    10004af5 <firstRun(bool)+0x21a0>
10004af3:	b0 00                	mov    al,0x0
10004af5:	84 c0                	test   al,al
10004af7:	0f 84 a3 00 00 00    	je     10004ba0 <firstRun(bool)+0x224b>
10004afd:	a0 00 00 00 00       	mov    al,ds:0x0	10004afe: R_386_32	installKey
10004b02:	3c 2f                	cmp    al,0x2f
10004b04:	7e 09                	jle    10004b0f <firstRun(bool)+0x21ba>
10004b06:	a0 00 00 00 00       	mov    al,ds:0x0	10004b07: R_386_32	installKey
10004b0b:	3c 39                	cmp    al,0x39
10004b0d:	7e 24                	jle    10004b33 <firstRun(bool)+0x21de>
10004b0f:	a0 00 00 00 00       	mov    al,ds:0x0	10004b10: R_386_32	installKey
10004b14:	3c 40                	cmp    al,0x40
10004b16:	7e 09                	jle    10004b21 <firstRun(bool)+0x21cc>
10004b18:	a0 00 00 00 00       	mov    al,ds:0x0	10004b19: R_386_32	installKey
10004b1d:	3c 5a                	cmp    al,0x5a
10004b1f:	7e 12                	jle    10004b33 <firstRun(bool)+0x21de>
10004b21:	a0 00 00 00 00       	mov    al,ds:0x0	10004b22: R_386_32	installKey
10004b26:	3c 60                	cmp    al,0x60
10004b28:	7e 0d                	jle    10004b37 <firstRun(bool)+0x21e2>
10004b2a:	a0 00 00 00 00       	mov    al,ds:0x0	10004b2b: R_386_32	installKey
10004b2f:	3c 7a                	cmp    al,0x7a
10004b31:	7f 04                	jg     10004b37 <firstRun(bool)+0x21e2>
10004b33:	b0 01                	mov    al,0x1
10004b35:	eb 02                	jmp    10004b39 <firstRun(bool)+0x21e4>
10004b37:	b0 00                	mov    al,0x0
10004b39:	84 c0                	test   al,al
10004b3b:	74 2c                	je     10004b69 <firstRun(bool)+0x2214>
10004b3d:	a0 00 00 00 00       	mov    al,ds:0x0	10004b3e: R_386_32	installKey
10004b42:	3c 60                	cmp    al,0x60
10004b44:	7e 13                	jle    10004b59 <firstRun(bool)+0x2204>
10004b46:	a0 00 00 00 00       	mov    al,ds:0x0	10004b47: R_386_32	installKey
10004b4b:	3c 7a                	cmp    al,0x7a
10004b4d:	7f 0a                	jg     10004b59 <firstRun(bool)+0x2204>
10004b4f:	a0 00 00 00 00       	mov    al,ds:0x0	10004b50: R_386_32	installKey
10004b54:	83 e8 20             	sub    eax,0x20
10004b57:	eb 05                	jmp    10004b5e <firstRun(bool)+0x2209>
10004b59:	a0 00 00 00 00       	mov    al,ds:0x0	10004b5a: R_386_32	installKey
10004b5e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004b61:	81 c2 00 00 00 00    	add    edx,0x0	10004b63: R_386_32	pkeybuf
10004b67:	88 02                	mov    BYTE PTR [edx],al
10004b69:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10004b6c:	83 ec 0c             	sub    esp,0xc
10004b6f:	68 00 00 00 00       	push   0x0	10004b70: R_386_32	pkeybuf
10004b74:	e8 fc ff ff ff       	call   10004b75 <firstRun(bool)+0x2220>	10004b75: R_386_PC32	strlen
10004b79:	83 c4 10             	add    esp,0x10
10004b7c:	89 c2                	mov    edx,eax
10004b7e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004b81:	39 c2                	cmp    edx,eax
10004b83:	77 07                	ja     10004b8c <firstRun(bool)+0x2237>
10004b85:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004b8c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004b8f:	05 00 00 00 00       	add    eax,0x0	10004b90: R_386_32	pkeybuf
10004b94:	8a 00                	mov    al,BYTE PTR [eax]
10004b96:	3c 2d                	cmp    al,0x2d
10004b98:	0f 85 76 02 00 00    	jne    10004e14 <firstRun(bool)+0x24bf>
10004b9e:	eb c9                	jmp    10004b69 <firstRun(bool)+0x2214>
10004ba0:	a0 00 00 00 00       	mov    al,ds:0x0	10004ba1: R_386_32	installKey
10004ba5:	3c 1b                	cmp    al,0x1b
10004ba7:	0f 94 c0             	sete   al
10004baa:	84 c0                	test   al,al
10004bac:	0f 85 99 f9 ff ff    	jne    1000454b <firstRun(bool)+0x1bf6>
10004bb2:	a0 00 00 00 00       	mov    al,ds:0x0	10004bb3: R_386_32	installKey
10004bb7:	3c 0a                	cmp    al,0xa
10004bb9:	0f 94 c0             	sete   al
10004bbc:	84 c0                	test   al,al
10004bbe:	0f 84 50 02 00 00    	je     10004e14 <firstRun(bool)+0x24bf>
10004bc4:	83 ec 0c             	sub    esp,0xc
10004bc7:	68 00 00 00 00       	push   0x0	10004bc8: R_386_32	pkeybuf
10004bcc:	e8 fc ff ff ff       	call   10004bcd <firstRun(bool)+0x2278>	10004bcd: R_386_PC32	checkExtendedKey(char*)
10004bd1:	83 c4 10             	add    esp,0x10
10004bd4:	85 c0                	test   eax,eax
10004bd6:	0f 95 c0             	setne  al
10004bd9:	88 45 87             	mov    BYTE PTR [ebp-0x79],al
10004bdc:	80 7d 87 00          	cmp    BYTE PTR [ebp-0x79],0x0
10004be0:	74 5b                	je     10004c3d <firstRun(bool)+0x22e8>
10004be2:	83 ec 0c             	sub    esp,0xc
10004be5:	68 f0 0a 00 00       	push   0xaf0
10004bea:	e8 fc ff ff ff       	call   10004beb <firstRun(bool)+0x2296>	10004beb: R_386_PC32	milliTenthSleep(unsigned int)
10004bef:	83 c4 10             	add    esp,0x10
10004bf2:	e8 fc ff ff ff       	call   10004bf3 <firstRun(bool)+0x229e>	10004bf3: R_386_PC32	drawBootScreen()
10004bf7:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004bf9: R_386_32	installKey
10004bfe:	83 ec 0c             	sub    esp,0xc
10004c01:	68 84 03 00 00       	push   0x384
10004c06:	e8 fc ff ff ff       	call   10004c07 <firstRun(bool)+0x22b2>	10004c07: R_386_PC32	milliTenthSleep(unsigned int)
10004c0b:	83 c4 10             	add    esp,0x10
10004c0e:	e8 fc ff ff ff       	call   10004c0f <firstRun(bool)+0x22ba>	10004c0f: R_386_PC32	drawBootScreen()
10004c13:	83 ec 0c             	sub    esp,0xc
10004c16:	68 c0 12 00 00       	push   0x12c0
10004c1b:	e8 fc ff ff ff       	call   10004c1c <firstRun(bool)+0x22c7>	10004c1c: R_386_PC32	milliTenthSleep(unsigned int)
10004c20:	83 c4 10             	add    esp,0x10
10004c23:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004c25: R_386_32	installKey
10004c2a:	90                   	nop
10004c2b:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10004c32:	0f 84 e8 01 00 00    	je     10004e20 <firstRun(bool)+0x24cb>
10004c38:	e9 d2 02 00 00       	jmp    10004f0f <firstRun(bool)+0x25ba>
10004c3d:	83 ec 0c             	sub    esp,0xc
10004c40:	68 f0 0a 00 00       	push   0xaf0
10004c45:	e8 fc ff ff ff       	call   10004c46 <firstRun(bool)+0x22f1>	10004c46: R_386_PC32	milliTenthSleep(unsigned int)
10004c4a:	83 c4 10             	add    esp,0x10
10004c4d:	e8 fc ff ff ff       	call   10004c4e <firstRun(bool)+0x22f9>	10004c4e: R_386_PC32	drawBootScreen()
10004c52:	83 ec 08             	sub    esp,0x8
10004c55:	6a 01                	push   0x1
10004c57:	68 26 a0 00 10       	push   0x1000a026	10004c58: R_386_32	.text
10004c5c:	6a 0e                	push   0xe
10004c5e:	6a 32                	push   0x32
10004c60:	6a 02                	push   0x2
10004c62:	6a 16                	push   0x16
10004c64:	e8 fc ff ff ff       	call   10004c65 <firstRun(bool)+0x2310>	10004c65: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10004c69:	83 c4 20             	add    esp,0x20
10004c6c:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c6d: R_386_32	term
10004c71:	83 ec 04             	sub    esp,0x4
10004c74:	6a 05                	push   0x5
10004c76:	6a 18                	push   0x18
10004c78:	50                   	push   eax
10004c79:	e8 fc ff ff ff       	call   10004c7a <firstRun(bool)+0x2325>	10004c7a: R_386_PC32	VgaText::setCursor(int, int)
10004c7e:	83 c4 10             	add    esp,0x10
10004c81:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c82: R_386_32	term
10004c86:	6a 07                	push   0x7
10004c88:	6a 00                	push   0x0
10004c8a:	68 34 a0 00 10       	push   0x1000a034	10004c8b: R_386_32	.text
10004c8f:	50                   	push   eax
10004c90:	e8 fc ff ff ff       	call   10004c91 <firstRun(bool)+0x233c>	10004c91: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004c95:	83 c4 10             	add    esp,0x10
10004c98:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c99: R_386_32	term
10004c9d:	83 ec 04             	sub    esp,0x4
10004ca0:	6a 06                	push   0x6
10004ca2:	6a 18                	push   0x18
10004ca4:	50                   	push   eax
10004ca5:	e8 fc ff ff ff       	call   10004ca6 <firstRun(bool)+0x2351>	10004ca6: R_386_PC32	VgaText::setCursor(int, int)
10004caa:	83 c4 10             	add    esp,0x10
10004cad:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cae: R_386_32	term
10004cb2:	6a 07                	push   0x7
10004cb4:	6a 00                	push   0x0
10004cb6:	68 88 9e 00 10       	push   0x10009e88	10004cb7: R_386_32	.text
10004cbb:	50                   	push   eax
10004cbc:	e8 fc ff ff ff       	call   10004cbd <firstRun(bool)+0x2368>	10004cbd: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004cc1:	83 c4 10             	add    esp,0x10
10004cc4:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cc5: R_386_32	term
10004cc9:	83 ec 04             	sub    esp,0x4
10004ccc:	6a 08                	push   0x8
10004cce:	6a 1c                	push   0x1c
10004cd0:	50                   	push   eax
10004cd1:	e8 fc ff ff ff       	call   10004cd2 <firstRun(bool)+0x237d>	10004cd2: R_386_PC32	VgaText::setCursor(int, int)
10004cd6:	83 c4 10             	add    esp,0x10
10004cd9:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cda: R_386_32	term
10004cde:	6a 07                	push   0x7
10004ce0:	6a 00                	push   0x0
10004ce2:	68 00 00 00 00       	push   0x0	10004ce3: R_386_32	pkeybuf
10004ce7:	50                   	push   eax
10004ce8:	e8 fc ff ff ff       	call   10004ce9 <firstRun(bool)+0x2394>	10004ce9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004ced:	83 c4 10             	add    esp,0x10
10004cf0:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cf1: R_386_32	term
10004cf5:	83 ec 04             	sub    esp,0x4
10004cf8:	6a 08                	push   0x8
10004cfa:	6a 2c                	push   0x2c
10004cfc:	50                   	push   eax
10004cfd:	e8 fc ff ff ff       	call   10004cfe <firstRun(bool)+0x23a9>	10004cfe: R_386_PC32	VgaText::setCursor(int, int)
10004d02:	83 c4 10             	add    esp,0x10
10004d05:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d06: R_386_32	term
10004d0a:	6a 07                	push   0x7
10004d0c:	6a 07                	push   0x7
10004d0e:	6a 20                	push   0x20
10004d10:	50                   	push   eax
10004d11:	e8 fc ff ff ff       	call   10004d12 <firstRun(bool)+0x23bd>	10004d12: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004d16:	83 c4 10             	add    esp,0x10
10004d19:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d1a: R_386_32	term
10004d1e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004d21:	83 c2 1c             	add    edx,0x1c
10004d24:	83 ec 04             	sub    esp,0x4
10004d27:	6a 08                	push   0x8
10004d29:	52                   	push   edx
10004d2a:	50                   	push   eax
10004d2b:	e8 fc ff ff ff       	call   10004d2c <firstRun(bool)+0x23d7>	10004d2c: R_386_PC32	VgaText::setCursor(int, int)
10004d30:	83 c4 10             	add    esp,0x10
10004d33:	83 ec 0c             	sub    esp,0xc
10004d36:	68 85 9f 00 10       	push   0x10009f85	10004d37: R_386_32	.text
10004d3b:	6a 0b                	push   0xb
10004d3d:	6a 2b                	push   0x2b
10004d3f:	6a 0a                	push   0xa
10004d41:	6a 22                	push   0x22
10004d43:	e8 fc ff ff ff       	call   10004d44 <firstRun(bool)+0x23ef>	10004d44: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004d48:	83 c4 20             	add    esp,0x20
10004d4b:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d4c: R_386_32	term
10004d50:	83 ec 04             	sub    esp,0x4
10004d53:	6a 0d                	push   0xd
10004d55:	6a 24                	push   0x24
10004d57:	50                   	push   eax
10004d58:	e8 fc ff ff ff       	call   10004d59 <firstRun(bool)+0x2404>	10004d59: R_386_PC32	VgaText::setCursor(int, int)
10004d5d:	83 c4 10             	add    esp,0x10
10004d60:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d61: R_386_32	term
10004d65:	83 ec 08             	sub    esp,0x8
10004d68:	68 5c a0 00 10       	push   0x1000a05c	10004d69: R_386_32	.text
10004d6d:	50                   	push   eax
10004d6e:	e8 fc ff ff ff       	call   10004d6f <firstRun(bool)+0x241a>	10004d6f: R_386_PC32	VgaText::puts(char const*)
10004d73:	83 c4 10             	add    esp,0x10
10004d76:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d77: R_386_32	term
10004d7b:	83 ec 04             	sub    esp,0x4
10004d7e:	6a 0f                	push   0xf
10004d80:	6a 24                	push   0x24
10004d82:	50                   	push   eax
10004d83:	e8 fc ff ff ff       	call   10004d84 <firstRun(bool)+0x242f>	10004d84: R_386_PC32	VgaText::setCursor(int, int)
10004d88:	83 c4 10             	add    esp,0x10
10004d8b:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d8c: R_386_32	term
10004d90:	83 ec 08             	sub    esp,0x8
10004d93:	68 84 a0 00 10       	push   0x1000a084	10004d94: R_386_32	.text
10004d98:	50                   	push   eax
10004d99:	e8 fc ff ff ff       	call   10004d9a <firstRun(bool)+0x2445>	10004d9a: R_386_PC32	VgaText::puts(char const*)
10004d9e:	83 c4 10             	add    esp,0x10
10004da1:	a1 00 00 00 00       	mov    eax,ds:0x0	10004da2: R_386_32	term
10004da6:	83 ec 04             	sub    esp,0x4
10004da9:	6a 10                	push   0x10
10004dab:	6a 24                	push   0x24
10004dad:	50                   	push   eax
10004dae:	e8 fc ff ff ff       	call   10004daf <firstRun(bool)+0x245a>	10004daf: R_386_PC32	VgaText::setCursor(int, int)
10004db3:	83 c4 10             	add    esp,0x10
10004db6:	a1 00 00 00 00       	mov    eax,ds:0x0	10004db7: R_386_32	term
10004dbb:	83 ec 08             	sub    esp,0x8
10004dbe:	68 a8 a0 00 10       	push   0x1000a0a8	10004dbf: R_386_32	.text
10004dc3:	50                   	push   eax
10004dc4:	e8 fc ff ff ff       	call   10004dc5 <firstRun(bool)+0x2470>	10004dc5: R_386_PC32	VgaText::puts(char const*)
10004dc9:	83 c4 10             	add    esp,0x10
10004dcc:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004dce: R_386_32	installKey
10004dd3:	83 ec 0c             	sub    esp,0xc
10004dd6:	68 94 11 00 00       	push   0x1194
10004ddb:	e8 fc ff ff ff       	call   10004ddc <firstRun(bool)+0x2487>	10004ddc: R_386_PC32	milliTenthSleep(unsigned int)
10004de0:	83 c4 10             	add    esp,0x10
10004de3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004de5: R_386_32	installKey
10004dea:	a0 00 00 00 00       	mov    al,ds:0x0	10004deb: R_386_32	installKey
10004def:	84 c0                	test   al,al
10004df1:	0f 94 c0             	sete   al
10004df4:	84 c0                	test   al,al
10004df6:	74 02                	je     10004dfa <firstRun(bool)+0x24a5>
10004df8:	eb f0                	jmp    10004dea <firstRun(bool)+0x2495>
10004dfa:	e8 fc ff ff ff       	call   10004dfb <firstRun(bool)+0x24a6>	10004dfb: R_386_PC32	drawBootScreen()
10004dff:	83 ec 0c             	sub    esp,0xc
10004e02:	68 9c 18 00 00       	push   0x189c
10004e07:	e8 fc ff ff ff       	call   10004e08 <firstRun(bool)+0x24b3>	10004e08: R_386_PC32	milliTenthSleep(unsigned int)
10004e0c:	83 c4 10             	add    esp,0x10
10004e0f:	e9 a5 fa ff ff       	jmp    100048b9 <firstRun(bool)+0x1f64>
10004e14:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004e16: R_386_32	installKey
10004e1b:	e9 3f fb ff ff       	jmp    1000495f <firstRun(bool)+0x200a>
10004e20:	e8 fc ff ff ff       	call   10004e21 <firstRun(bool)+0x24cc>	10004e21: R_386_PC32	drawBootScreen()
10004e25:	83 ec 0c             	sub    esp,0xc
10004e28:	68 c9 a0 00 10       	push   0x1000a0c9	10004e29: R_386_32	.text
10004e2d:	6a 0d                	push   0xd
10004e2f:	6a 32                	push   0x32
10004e31:	6a 05                	push   0x5
10004e33:	6a 16                	push   0x16
10004e35:	e8 fc ff ff ff       	call   10004e36 <firstRun(bool)+0x24e1>	10004e36: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004e3a:	83 c4 20             	add    esp,0x20
10004e3d:	83 ec 0c             	sub    esp,0xc
10004e40:	6a 00                	push   0x0
10004e42:	e8 fc ff ff ff       	call   10004e43 <firstRun(bool)+0x24ee>	10004e43: R_386_PC32	bootInstallTasks(int)
10004e47:	83 c4 10             	add    esp,0x10
10004e4a:	83 ec 04             	sub    esp,0x4
10004e4d:	6a 0c                	push   0xc
10004e4f:	68 e1 a0 00 10       	push   0x1000a0e1	10004e50: R_386_32	.text
10004e54:	68 f2 a0 00 10       	push   0x1000a0f2	10004e55: R_386_32	.text
10004e59:	e8 fc ff ff ff       	call   10004e5a <firstRun(bool)+0x2505>	10004e5a: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
10004e5e:	83 c4 10             	add    esp,0x10
10004e61:	89 45 80             	mov    DWORD PTR [ebp-0x80],eax
10004e64:	83 ec 0c             	sub    esp,0xc
10004e67:	ff 75 80             	push   DWORD PTR [ebp-0x80]
10004e6a:	e8 fc ff ff ff       	call   10004e6b <firstRun(bool)+0x2516>	10004e6b: R_386_PC32	Virt::setupPageSwapping(int)
10004e6f:	83 c4 10             	add    esp,0x10
10004e72:	83 ec 0c             	sub    esp,0xc
10004e75:	6a 01                	push   0x1
10004e77:	e8 fc ff ff ff       	call   10004e78 <firstRun(bool)+0x2523>	10004e78: R_386_PC32	bootInstallTasks(int)
10004e7c:	83 c4 10             	add    esp,0x10
10004e7f:	83 ec 0c             	sub    esp,0xc
10004e82:	68 f9 a0 00 10       	push   0x1000a0f9	10004e83: R_386_32	.text
10004e87:	e8 fc ff ff ff       	call   10004e88 <firstRun(bool)+0x2533>	10004e88: R_386_PC32	rmtree(char*)
10004e8c:	83 c4 10             	add    esp,0x10
10004e8f:	83 ec 0c             	sub    esp,0xc
10004e92:	68 13 a1 00 10       	push   0x1000a113	10004e93: R_386_32	.text
10004e97:	e8 fc ff ff ff       	call   10004e98 <firstRun(bool)+0x2543>	10004e98: R_386_PC32	rmtree(char*)
10004e9c:	83 c4 10             	add    esp,0x10
10004e9f:	83 ec 08             	sub    esp,0x8
10004ea2:	68 c0 01 00 00       	push   0x1c0
10004ea7:	68 f9 a0 00 10       	push   0x1000a0f9	10004ea8: R_386_32	.text
10004eac:	e8 fc ff ff ff       	call   10004ead <firstRun(bool)+0x2558>	10004ead: R_386_PC32	mkdir(char const*, int)
10004eb1:	83 c4 10             	add    esp,0x10
10004eb4:	83 ec 08             	sub    esp,0x8
10004eb7:	68 c0 01 00 00       	push   0x1c0
10004ebc:	68 13 a1 00 10       	push   0x1000a113	10004ebd: R_386_32	.text
10004ec1:	e8 fc ff ff ff       	call   10004ec2 <firstRun(bool)+0x256d>	10004ec2: R_386_PC32	mkdir(char const*, int)
10004ec6:	83 c4 10             	add    esp,0x10
10004ec9:	83 ec 08             	sub    esp,0x8
10004ecc:	68 f9 a0 00 10       	push   0x1000a0f9	10004ecd: R_386_32	.text
10004ed1:	68 2c a1 00 10       	push   0x1000a12c	10004ed2: R_386_32	.text
10004ed6:	e8 fc ff ff ff       	call   10004ed7 <firstRun(bool)+0x2582>	10004ed7: R_386_PC32	copytree(char*, char*)
10004edb:	83 c4 10             	add    esp,0x10
10004ede:	83 ec 0c             	sub    esp,0xc
10004ee1:	6a 02                	push   0x2
10004ee3:	e8 fc ff ff ff       	call   10004ee4 <firstRun(bool)+0x258f>	10004ee4: R_386_PC32	bootInstallTasks(int)
10004ee8:	83 c4 10             	add    esp,0x10
10004eeb:	83 ec 0c             	sub    esp,0xc
10004eee:	68 00 00 00 00       	push   0x0	10004eef: R_386_32	currName
10004ef3:	e8 fc ff ff ff       	call   10004ef4 <firstRun(bool)+0x259f>	10004ef4: R_386_PC32	createUser(char const*)
10004ef8:	83 c4 10             	add    esp,0x10
10004efb:	83 ec 0c             	sub    esp,0xc
10004efe:	6a 03                	push   0x3
10004f00:	e8 fc ff ff ff       	call   10004f01 <firstRun(bool)+0x25ac>	10004f01: R_386_PC32	bootInstallTasks(int)
10004f05:	83 c4 10             	add    esp,0x10
10004f08:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10004f0a: R_386_32	VgaText::hiddenOut
10004f0f:	8d 65 f4             	lea    esp,[ebp-0xc]
10004f12:	5b                   	pop    ebx
10004f13:	5e                   	pop    esi
10004f14:	5f                   	pop    edi
10004f15:	5d                   	pop    ebp
10004f16:	c3                   	ret    

10004f17 <loadExtensions()>:
10004f17:	55                   	push   ebp
10004f18:	89 e5                	mov    ebp,esp
10004f1a:	83 ec 08             	sub    esp,0x8
10004f1d:	83 ec 0c             	sub    esp,0xc
10004f20:	68 d4 a1 00 10       	push   0x1000a1d4	10004f21: R_386_32	.text
10004f25:	e8 fc ff ff ff       	call   10004f26 <loadExtensions()+0xf>	10004f26: R_386_PC32	KeSetBootMessage(char const*)
10004f2a:	83 c4 10             	add    esp,0x10
10004f2d:	90                   	nop
10004f2e:	c9                   	leave  
10004f2f:	c3                   	ret    

10004f30 <rgtree(Reghive_Tag*, int, int)>:
10004f30:	55                   	push   ebp
10004f31:	89 e5                	mov    ebp,esp
10004f33:	53                   	push   ebx
10004f34:	83 ec 44             	sub    esp,0x44
10004f37:	83 7d 0c 01          	cmp    DWORD PTR [ebp+0xc],0x1
10004f3b:	75 16                	jne    10004f53 <rgtree(Reghive_Tag*, int, int)+0x23>
10004f3d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10004f41:	75 10                	jne    10004f53 <rgtree(Reghive_Tag*, int, int)+0x23>
10004f43:	83 ec 0c             	sub    esp,0xc
10004f46:	68 ea a1 00 10       	push   0x1000a1ea	10004f47: R_386_32	.text
10004f4b:	e8 fc ff ff ff       	call   10004f4c <rgtree(Reghive_Tag*, int, int)+0x1c>	10004f4c: R_386_PC32	Dbg::kprintf(char const*, ...)
10004f50:	83 c4 10             	add    esp,0x10
10004f53:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
10004f57:	0f 8e a9 00 00 00    	jle    10005006 <rgtree(Reghive_Tag*, int, int)+0xd6>
10004f5d:	83 ec 04             	sub    esp,0x4
10004f60:	6a 32                	push   0x32
10004f62:	6a 00                	push   0x0
10004f64:	8d 45 be             	lea    eax,[ebp-0x42]
10004f67:	50                   	push   eax
10004f68:	e8 fc ff ff ff       	call   10004f69 <rgtree(Reghive_Tag*, int, int)+0x39>	10004f69: R_386_PC32	memset
10004f6d:	83 c4 10             	add    esp,0x10
10004f70:	83 ec 04             	sub    esp,0x4
10004f73:	8d 45 be             	lea    eax,[ebp-0x42]
10004f76:	50                   	push   eax
10004f77:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004f7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004f7d:	e8 fc ff ff ff       	call   10004f7e <rgtree(Reghive_Tag*, int, int)+0x4e>	10004f7e: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
10004f82:	83 c4 10             	add    esp,0x10
10004f85:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10004f88:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10004f8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10004f92:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10004f95:	7d 15                	jge    10004fac <rgtree(Reghive_Tag*, int, int)+0x7c>
10004f97:	83 ec 0c             	sub    esp,0xc
10004f9a:	68 cb 9c 00 10       	push   0x10009ccb	10004f9b: R_386_32	.text
10004f9f:	e8 fc ff ff ff       	call   10004fa0 <rgtree(Reghive_Tag*, int, int)+0x70>	10004fa0: R_386_PC32	Dbg::kprintf(char const*, ...)
10004fa4:	83 c4 10             	add    esp,0x10
10004fa7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10004faa:	eb e3                	jmp    10004f8f <rgtree(Reghive_Tag*, int, int)+0x5f>
10004fac:	83 ec 08             	sub    esp,0x8
10004faf:	8d 45 be             	lea    eax,[ebp-0x42]
10004fb2:	50                   	push   eax
10004fb3:	68 ef a1 00 10       	push   0x1000a1ef	10004fb4: R_386_32	.text
10004fb8:	e8 fc ff ff ff       	call   10004fb9 <rgtree(Reghive_Tag*, int, int)+0x89>	10004fb9: R_386_PC32	Dbg::kprintf(char const*, ...)
10004fbd:	83 c4 10             	add    esp,0x10
10004fc0:	83 7d f0 4e          	cmp    DWORD PTR [ebp-0x10],0x4e
10004fc4:	75 27                	jne    10004fed <rgtree(Reghive_Tag*, int, int)+0xbd>
10004fc6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10004fc9:	8d 58 04             	lea    ebx,[eax+0x4]
10004fcc:	83 ec 08             	sub    esp,0x8
10004fcf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004fd2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004fd5:	e8 fc ff ff ff       	call   10004fd6 <rgtree(Reghive_Tag*, int, int)+0xa6>	10004fd6: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004fda:	83 c4 10             	add    esp,0x10
10004fdd:	83 ec 04             	sub    esp,0x4
10004fe0:	53                   	push   ebx
10004fe1:	50                   	push   eax
10004fe2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004fe5:	e8 fc ff ff ff       	call   10004fe6 <rgtree(Reghive_Tag*, int, int)+0xb6>	10004fe6: R_386_PC32	rgtree(Reghive_Tag*, int, int)
10004fea:	83 c4 10             	add    esp,0x10
10004fed:	83 ec 08             	sub    esp,0x8
10004ff0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004ff3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004ff6:	e8 fc ff ff ff       	call   10004ff7 <rgtree(Reghive_Tag*, int, int)+0xc7>	10004ff7: R_386_PC32	CmGetNext(Reghive_Tag*, int)
10004ffb:	83 c4 10             	add    esp,0x10
10004ffe:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10005001:	e9 4d ff ff ff       	jmp    10004f53 <rgtree(Reghive_Tag*, int, int)+0x23>
10005006:	90                   	nop
10005007:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000500a:	c9                   	leave  
1000500b:	c3                   	ret    

1000500c <getRegsafeName(char*, char*)>:
1000500c:	55                   	push   ebp
1000500d:	89 e5                	mov    ebp,esp
1000500f:	83 ec 10             	sub    esp,0x10
10005012:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005015:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10005018:	e8 fc ff ff ff       	call   10005019 <getRegsafeName(char*, char*)+0xd>	10005019: R_386_PC32	strcpy
1000501d:	83 c4 08             	add    esp,0x8
10005020:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10005027:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
1000502a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000502d:	01 d0                	add    eax,edx
1000502f:	8a 00                	mov    al,BYTE PTR [eax]
10005031:	84 c0                	test   al,al
10005033:	74 6e                	je     100050a3 <getRegsafeName(char*, char*)+0x97>
10005035:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005038:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000503b:	01 d0                	add    eax,edx
1000503d:	8a 00                	mov    al,BYTE PTR [eax]
1000503f:	3c 60                	cmp    al,0x60
10005041:	7e 42                	jle    10005085 <getRegsafeName(char*, char*)+0x79>
10005043:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005046:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005049:	01 d0                	add    eax,edx
1000504b:	8a 00                	mov    al,BYTE PTR [eax]
1000504d:	3c 7a                	cmp    al,0x7a
1000504f:	7f 34                	jg     10005085 <getRegsafeName(char*, char*)+0x79>
10005051:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005054:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005057:	01 d0                	add    eax,edx
10005059:	8a 00                	mov    al,BYTE PTR [eax]
1000505b:	8d 48 9f             	lea    ecx,[eax-0x61]
1000505e:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005061:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005064:	01 d0                	add    eax,edx
10005066:	88 ca                	mov    dl,cl
10005068:	88 10                	mov    BYTE PTR [eax],dl
1000506a:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
1000506d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005070:	01 d0                	add    eax,edx
10005072:	8a 00                	mov    al,BYTE PTR [eax]
10005074:	8d 48 41             	lea    ecx,[eax+0x41]
10005077:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
1000507a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000507d:	01 d0                	add    eax,edx
1000507f:	88 ca                	mov    dl,cl
10005081:	88 10                	mov    BYTE PTR [eax],dl
10005083:	eb 19                	jmp    1000509e <getRegsafeName(char*, char*)+0x92>
10005085:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005088:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000508b:	01 d0                	add    eax,edx
1000508d:	8a 00                	mov    al,BYTE PTR [eax]
1000508f:	3c 20                	cmp    al,0x20
10005091:	75 0b                	jne    1000509e <getRegsafeName(char*, char*)+0x92>
10005093:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005096:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005099:	01 d0                	add    eax,edx
1000509b:	c6 00 5f             	mov    BYTE PTR [eax],0x5f
1000509e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100050a1:	eb 84                	jmp    10005027 <getRegsafeName(char*, char*)+0x1b>
100050a3:	90                   	nop
100050a4:	c9                   	leave  
100050a5:	c3                   	ret    

100050a6 <begin(void*)>:
100050a6:	55                   	push   ebp
100050a7:	89 e5                	mov    ebp,esp
100050a9:	57                   	push   edi
100050aa:	56                   	push   esi
100050ab:	53                   	push   ebx
100050ac:	81 ec 2c 06 00 00    	sub    esp,0x62c
100050b2:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
100050b6:	83 ec 0c             	sub    esp,0xc
100050b9:	68 14 01 00 00       	push   0x114
100050be:	e8 fc ff ff ff       	call   100050bf <begin(void*)+0x19>	100050bf: R_386_PC32	operator new(unsigned long)
100050c3:	83 c4 10             	add    esp,0x10
100050c6:	89 c3                	mov    ebx,eax
100050c8:	a1 00 00 00 00       	mov    eax,ds:0x0	100050c9: R_386_32	kernelProcess
100050cd:	83 ec 04             	sub    esp,0x4
100050d0:	50                   	push   eax
100050d1:	68 f4 a1 00 10       	push   0x1000a1f4	100050d2: R_386_32	.text
100050d6:	53                   	push   ebx
100050d7:	e8 fc ff ff ff       	call   100050d8 <begin(void*)+0x32>	100050d8: R_386_PC32	File::File(char const*, Process*)
100050dc:	83 c4 10             	add    esp,0x10
100050df:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
100050e2:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100050e6:	75 10                	jne    100050f8 <begin(void*)+0x52>
100050e8:	83 ec 0c             	sub    esp,0xc
100050eb:	68 12 a2 00 10       	push   0x1000a212	100050ec: R_386_32	.text
100050f0:	e8 fc ff ff ff       	call   100050f1 <begin(void*)+0x4b>	100050f1: R_386_PC32	KePanic(char const*)
100050f5:	83 c4 10             	add    esp,0x10
100050f8:	83 ec 08             	sub    esp,0x8
100050fb:	6a 01                	push   0x1
100050fd:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
10005100:	e8 fc ff ff ff       	call   10005101 <begin(void*)+0x5b>	10005101: R_386_PC32	File::open(FileOpenMode)
10005105:	83 c4 10             	add    esp,0x10
10005108:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
1000510b:	83 7d b4 00          	cmp    DWORD PTR [ebp-0x4c],0x0
1000510f:	75 10                	jne    10005121 <begin(void*)+0x7b>
10005111:	83 ec 0c             	sub    esp,0xc
10005114:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
10005117:	e8 fc ff ff ff       	call   10005118 <begin(void*)+0x72>	10005118: R_386_PC32	File::close()
1000511c:	83 c4 10             	add    esp,0x10
1000511f:	eb 04                	jmp    10005125 <begin(void*)+0x7f>
10005121:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
10005125:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10005129:	74 15                	je     10005140 <begin(void*)+0x9a>
1000512b:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
1000512e:	8b 00                	mov    eax,DWORD PTR [eax]
10005130:	83 c0 08             	add    eax,0x8
10005133:	8b 00                	mov    eax,DWORD PTR [eax]
10005135:	83 ec 0c             	sub    esp,0xc
10005138:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
1000513b:	ff d0                	call   eax
1000513d:	83 c4 10             	add    esp,0x10
10005140:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10005142: R_386_32	KeIsPreemptionOn
10005147:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
1000514b:	74 0f                	je     1000515c <begin(void*)+0xb6>
1000514d:	83 ec 0c             	sub    esp,0xc
10005150:	6a 00                	push   0x0
10005152:	e8 fc ff ff ff       	call   10005153 <begin(void*)+0xad>	10005153: R_386_PC32	firstRun(bool)
10005157:	83 c4 10             	add    esp,0x10
1000515a:	eb 05                	jmp    10005161 <begin(void*)+0xbb>
1000515c:	e8 fc ff ff ff       	call   1000515d <begin(void*)+0xb7>	1000515d: R_386_PC32	loadExtensions()
10005161:	8d 45 88             	lea    eax,[ebp-0x78]
10005164:	bb f8 a5 00 10       	mov    ebx,0x1000a5f8	10005165: R_386_32	.text
10005169:	ba 04 00 00 00       	mov    edx,0x4
1000516e:	89 c7                	mov    edi,eax
10005170:	89 de                	mov    esi,ebx
10005172:	89 d1                	mov    ecx,edx
10005174:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005176:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
1000517a:	0f 84 45 09 00 00    	je     10005ac5 <begin(void*)+0xa1f>
10005180:	83 ec 0c             	sub    esp,0xc
10005183:	68 24 07 00 00       	push   0x724
10005188:	e8 fc ff ff ff       	call   10005189 <begin(void*)+0xe3>	10005189: R_386_PC32	operator new(unsigned long)
1000518d:	83 c4 10             	add    esp,0x10
10005190:	89 c3                	mov    ebx,eax
10005192:	8d 45 88             	lea    eax,[ebp-0x78]
10005195:	50                   	push   eax
10005196:	6a 00                	push   0x0
10005198:	68 22 a2 00 10       	push   0x1000a222	10005199: R_386_32	.text
1000519d:	53                   	push   ebx
1000519e:	e8 fc ff ff ff       	call   1000519f <begin(void*)+0xf9>	1000519f: R_386_PC32	Process::Process(char const*, Process*, char**)
100051a3:	83 c4 10             	add    esp,0x10
100051a6:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
100051a9:	83 ec 0c             	sub    esp,0xc
100051ac:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
100051af:	e8 fc ff ff ff       	call   100051b0 <begin(void*)+0x10a>	100051b0: R_386_PC32	Process::createUserThread()
100051b4:	83 c4 10             	add    esp,0x10
100051b7:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100051b9: R_386_32	VgaText::hiddenOut
100051be:	a1 00 00 00 00       	mov    eax,ds:0x0	100051bf: R_386_32	term
100051c3:	83 ec 0c             	sub    esp,0xc
100051c6:	50                   	push   eax
100051c7:	e8 fc ff ff ff       	call   100051c8 <begin(void*)+0x122>	100051c8: R_386_PC32	setActiveTerminal(VgaText*)
100051cc:	83 c4 10             	add    esp,0x10
100051cf:	e8 fc ff ff ff       	call   100051d0 <begin(void*)+0x12a>	100051d0: R_386_PC32	drawBootScreen()
100051d4:	83 ec 0c             	sub    esp,0xc
100051d7:	68 c9 a0 00 10       	push   0x1000a0c9	100051d8: R_386_32	.text
100051dc:	6a 0d                	push   0xd
100051de:	6a 32                	push   0x32
100051e0:	6a 05                	push   0x5
100051e2:	6a 16                	push   0x16
100051e4:	e8 fc ff ff ff       	call   100051e5 <begin(void*)+0x13f>	100051e5: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100051e9:	83 c4 20             	add    esp,0x20
100051ec:	83 ec 0c             	sub    esp,0xc
100051ef:	6a 03                	push   0x3
100051f1:	e8 fc ff ff ff       	call   100051f2 <begin(void*)+0x14c>	100051f2: R_386_PC32	bootInstallTasks(int)
100051f6:	83 c4 10             	add    esp,0x10
100051f9:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100051fb: R_386_32	VgaText::hiddenOut
10005200:	83 ec 0c             	sub    esp,0xc
10005203:	68 14 01 00 00       	push   0x114
10005208:	e8 fc ff ff ff       	call   10005209 <begin(void*)+0x163>	10005209: R_386_PC32	operator new(unsigned long)
1000520d:	83 c4 10             	add    esp,0x10
10005210:	89 c3                	mov    ebx,eax
10005212:	a1 00 00 00 00       	mov    eax,ds:0x0	10005213: R_386_32	kernelProcess
10005217:	83 ec 04             	sub    esp,0x4
1000521a:	50                   	push   eax
1000521b:	68 3f a2 00 10       	push   0x1000a23f	1000521c: R_386_32	.text
10005220:	53                   	push   ebx
10005221:	e8 fc ff ff ff       	call   10005222 <begin(void*)+0x17c>	10005222: R_386_PC32	File::File(char const*, Process*)
10005226:	83 c4 10             	add    esp,0x10
10005229:	89 5d ac             	mov    DWORD PTR [ebp-0x54],ebx
1000522c:	83 ec 08             	sub    esp,0x8
1000522f:	6a 01                	push   0x1
10005231:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10005234:	e8 fc ff ff ff       	call   10005235 <begin(void*)+0x18f>	10005235: R_386_PC32	File::open(FileOpenMode)
10005239:	83 c4 10             	add    esp,0x10
1000523c:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
1000523f:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
10005243:	75 39                	jne    1000527e <begin(void*)+0x1d8>
10005245:	83 ec 0c             	sub    esp,0xc
10005248:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
1000524b:	e8 fc ff ff ff       	call   1000524c <begin(void*)+0x1a6>	1000524c: R_386_PC32	File::close()
10005250:	83 c4 10             	add    esp,0x10
10005253:	83 ec 0c             	sub    esp,0xc
10005256:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10005259:	e8 fc ff ff ff       	call   1000525a <begin(void*)+0x1b4>	1000525a: R_386_PC32	File::unlink()
1000525e:	83 c4 10             	add    esp,0x10
10005261:	83 7d ac 00          	cmp    DWORD PTR [ebp-0x54],0x0
10005265:	74 44                	je     100052ab <begin(void*)+0x205>
10005267:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
1000526a:	8b 00                	mov    eax,DWORD PTR [eax]
1000526c:	83 c0 08             	add    eax,0x8
1000526f:	8b 00                	mov    eax,DWORD PTR [eax]
10005271:	83 ec 0c             	sub    esp,0xc
10005274:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10005277:	ff d0                	call   eax
10005279:	83 c4 10             	add    esp,0x10
1000527c:	eb 2d                	jmp    100052ab <begin(void*)+0x205>
1000527e:	83 7d ac 00          	cmp    DWORD PTR [ebp-0x54],0x0
10005282:	74 15                	je     10005299 <begin(void*)+0x1f3>
10005284:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10005287:	8b 00                	mov    eax,DWORD PTR [eax]
10005289:	83 c0 08             	add    eax,0x8
1000528c:	8b 00                	mov    eax,DWORD PTR [eax]
1000528e:	83 ec 0c             	sub    esp,0xc
10005291:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10005294:	ff d0                	call   eax
10005296:	83 c4 10             	add    esp,0x10
10005299:	83 ec 0c             	sub    esp,0xc
1000529c:	6a 01                	push   0x1
1000529e:	e8 fc ff ff ff       	call   1000529f <begin(void*)+0x1f9>	1000529f: R_386_PC32	sleep(unsigned int)
100052a3:	83 c4 10             	add    esp,0x10
100052a6:	e9 55 ff ff ff       	jmp    10005200 <begin(void*)+0x15a>
100052ab:	90                   	nop
100052ac:	83 ec 0c             	sub    esp,0xc
100052af:	6a 01                	push   0x1
100052b1:	e8 fc ff ff ff       	call   100052b2 <begin(void*)+0x20c>	100052b2: R_386_PC32	sleep(unsigned int)
100052b6:	83 c4 10             	add    esp,0x10
100052b9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100052bb: R_386_32	VgaText::hiddenOut
100052c0:	a1 00 00 00 00       	mov    eax,ds:0x0	100052c1: R_386_32	term
100052c5:	83 ec 0c             	sub    esp,0xc
100052c8:	50                   	push   eax
100052c9:	e8 fc ff ff ff       	call   100052ca <begin(void*)+0x224>	100052ca: R_386_PC32	setActiveTerminal(VgaText*)
100052ce:	83 c4 10             	add    esp,0x10
100052d1:	e8 fc ff ff ff       	call   100052d2 <begin(void*)+0x22c>	100052d2: R_386_PC32	drawBootScreen()
100052d6:	83 ec 0c             	sub    esp,0xc
100052d9:	68 c9 a0 00 10       	push   0x1000a0c9	100052da: R_386_32	.text
100052de:	6a 0d                	push   0xd
100052e0:	6a 32                	push   0x32
100052e2:	6a 05                	push   0x5
100052e4:	6a 16                	push   0x16
100052e6:	e8 fc ff ff ff       	call   100052e7 <begin(void*)+0x241>	100052e7: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100052eb:	83 c4 20             	add    esp,0x20
100052ee:	83 ec 0c             	sub    esp,0xc
100052f1:	6a 04                	push   0x4
100052f3:	e8 fc ff ff ff       	call   100052f4 <begin(void*)+0x24e>	100052f4: R_386_PC32	bootInstallTasks(int)
100052f8:	83 c4 10             	add    esp,0x10
100052fb:	83 ec 0c             	sub    esp,0xc
100052fe:	6a 05                	push   0x5
10005300:	e8 fc ff ff ff       	call   10005301 <begin(void*)+0x25b>	10005301: R_386_PC32	bootInstallTasks(int)
10005305:	83 c4 10             	add    esp,0x10
10005308:	83 ec 0c             	sub    esp,0xc
1000530b:	68 4c a2 00 10       	push   0x1000a24c	1000530c: R_386_32	.text
10005310:	e8 fc ff ff ff       	call   10005311 <begin(void*)+0x26b>	10005311: R_386_PC32	CmOpen(char const*)
10005315:	83 c4 10             	add    esp,0x10
10005318:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
1000531b:	83 ec 04             	sub    esp,0x4
1000531e:	68 71 a2 00 10       	push   0x1000a271	1000531f: R_386_32	.text
10005323:	6a 00                	push   0x0
10005325:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005328:	e8 fc ff ff ff       	call   10005329 <begin(void*)+0x283>	10005329: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000532d:	83 c4 10             	add    esp,0x10
10005330:	83 ec 08             	sub    esp,0x8
10005333:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005339:	50                   	push   eax
1000533a:	68 00 00 00 00       	push   0x0	1000533b: R_386_32	currName
1000533f:	e8 fc ff ff ff       	call   10005340 <begin(void*)+0x29a>	10005340: R_386_PC32	getRegsafeName(char*, char*)
10005344:	83 c4 10             	add    esp,0x10
10005347:	83 ec 08             	sub    esp,0x8
1000534a:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005350:	50                   	push   eax
10005351:	68 78 a2 00 10       	push   0x1000a278	10005352: R_386_32	.text
10005356:	e8 fc ff ff ff       	call   10005357 <begin(void*)+0x2b1>	10005357: R_386_PC32	Dbg::kprintf(char const*, ...)
1000535b:	83 c4 10             	add    esp,0x10
1000535e:	83 ec 08             	sub    esp,0x8
10005361:	68 8a a2 00 10       	push   0x1000a28a	10005362: R_386_32	.text
10005366:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
1000536c:	50                   	push   eax
1000536d:	e8 fc ff ff ff       	call   1000536e <begin(void*)+0x2c8>	1000536e: R_386_PC32	strcpy
10005372:	83 c4 10             	add    esp,0x10
10005375:	83 ec 08             	sub    esp,0x8
10005378:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000537e:	50                   	push   eax
1000537f:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005385:	50                   	push   eax
10005386:	e8 fc ff ff ff       	call   10005387 <begin(void*)+0x2e1>	10005387: R_386_PC32	strcat
1000538b:	83 c4 10             	add    esp,0x10
1000538e:	83 ec 08             	sub    esp,0x8
10005391:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005397:	50                   	push   eax
10005398:	68 98 a2 00 10       	push   0x1000a298	10005399: R_386_32	.text
1000539d:	e8 fc ff ff ff       	call   1000539e <begin(void*)+0x2f8>	1000539e: R_386_PC32	Dbg::kprintf(char const*, ...)
100053a2:	83 c4 10             	add    esp,0x10
100053a5:	83 ec 08             	sub    esp,0x8
100053a8:	68 71 a2 00 10       	push   0x1000a271	100053a9: R_386_32	.text
100053ad:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100053b0:	e8 fc ff ff ff       	call   100053b1 <begin(void*)+0x30b>	100053b1: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100053b5:	83 c4 10             	add    esp,0x10
100053b8:	83 ec 08             	sub    esp,0x8
100053bb:	50                   	push   eax
100053bc:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100053bf:	e8 fc ff ff ff       	call   100053c0 <begin(void*)+0x31a>	100053c0: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100053c4:	83 c4 10             	add    esp,0x10
100053c7:	83 ec 04             	sub    esp,0x4
100053ca:	68 ab a2 00 10       	push   0x1000a2ab	100053cb: R_386_32	.text
100053cf:	50                   	push   eax
100053d0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100053d3:	e8 fc ff ff ff       	call   100053d4 <begin(void*)+0x32e>	100053d4: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100053d8:	83 c4 10             	add    esp,0x10
100053db:	83 ec 08             	sub    esp,0x8
100053de:	68 71 a2 00 10       	push   0x1000a271	100053df: R_386_32	.text
100053e3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100053e6:	e8 fc ff ff ff       	call   100053e7 <begin(void*)+0x341>	100053e7: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100053eb:	83 c4 10             	add    esp,0x10
100053ee:	83 ec 08             	sub    esp,0x8
100053f1:	50                   	push   eax
100053f2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100053f5:	e8 fc ff ff ff       	call   100053f6 <begin(void*)+0x350>	100053f6: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100053fa:	83 c4 10             	add    esp,0x10
100053fd:	83 ec 04             	sub    esp,0x4
10005400:	68 b1 a2 00 10       	push   0x1000a2b1	10005401: R_386_32	.text
10005405:	50                   	push   eax
10005406:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005409:	e8 fc ff ff ff       	call   1000540a <begin(void*)+0x364>	1000540a: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000540e:	83 c4 10             	add    esp,0x10
10005411:	83 ec 08             	sub    esp,0x8
10005414:	68 71 a2 00 10       	push   0x1000a271	10005415: R_386_32	.text
10005419:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000541c:	e8 fc ff ff ff       	call   1000541d <begin(void*)+0x377>	1000541d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005421:	83 c4 10             	add    esp,0x10
10005424:	83 ec 08             	sub    esp,0x8
10005427:	50                   	push   eax
10005428:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000542b:	e8 fc ff ff ff       	call   1000542c <begin(void*)+0x386>	1000542c: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005430:	83 c4 10             	add    esp,0x10
10005433:	83 ec 04             	sub    esp,0x4
10005436:	68 b6 a2 00 10       	push   0x1000a2b6	10005437: R_386_32	.text
1000543b:	50                   	push   eax
1000543c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000543f:	e8 fc ff ff ff       	call   10005440 <begin(void*)+0x39a>	10005440: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005444:	83 c4 10             	add    esp,0x10
10005447:	83 ec 08             	sub    esp,0x8
1000544a:	68 71 a2 00 10       	push   0x1000a271	1000544b: R_386_32	.text
1000544f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005452:	e8 fc ff ff ff       	call   10005453 <begin(void*)+0x3ad>	10005453: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005457:	83 c4 10             	add    esp,0x10
1000545a:	83 ec 08             	sub    esp,0x8
1000545d:	50                   	push   eax
1000545e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005461:	e8 fc ff ff ff       	call   10005462 <begin(void*)+0x3bc>	10005462: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005466:	83 c4 10             	add    esp,0x10
10005469:	83 ec 04             	sub    esp,0x4
1000546c:	68 bb a2 00 10       	push   0x1000a2bb	1000546d: R_386_32	.text
10005471:	50                   	push   eax
10005472:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005475:	e8 fc ff ff ff       	call   10005476 <begin(void*)+0x3d0>	10005476: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000547a:	83 c4 10             	add    esp,0x10
1000547d:	83 ec 08             	sub    esp,0x8
10005480:	68 c1 a2 00 10       	push   0x1000a2c1	10005481: R_386_32	.text
10005485:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005488:	e8 fc ff ff ff       	call   10005489 <begin(void*)+0x3e3>	10005489: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000548d:	83 c4 10             	add    esp,0x10
10005490:	83 ec 08             	sub    esp,0x8
10005493:	50                   	push   eax
10005494:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005497:	e8 fc ff ff ff       	call   10005498 <begin(void*)+0x3f2>	10005498: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000549c:	83 c4 10             	add    esp,0x10
1000549f:	83 ec 04             	sub    esp,0x4
100054a2:	8d 95 06 fd ff ff    	lea    edx,[ebp-0x2fa]
100054a8:	52                   	push   edx
100054a9:	50                   	push   eax
100054aa:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054ad:	e8 fc ff ff ff       	call   100054ae <begin(void*)+0x408>	100054ae: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100054b2:	83 c4 10             	add    esp,0x10
100054b5:	83 ec 08             	sub    esp,0x8
100054b8:	68 ce a2 00 10       	push   0x1000a2ce	100054b9: R_386_32	.text
100054bd:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054c0:	e8 fc ff ff ff       	call   100054c1 <begin(void*)+0x41b>	100054c1: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100054c5:	83 c4 10             	add    esp,0x10
100054c8:	83 ec 08             	sub    esp,0x8
100054cb:	50                   	push   eax
100054cc:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054cf:	e8 fc ff ff ff       	call   100054d0 <begin(void*)+0x42a>	100054d0: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100054d4:	83 c4 10             	add    esp,0x10
100054d7:	83 ec 04             	sub    esp,0x4
100054da:	68 da a2 00 10       	push   0x1000a2da	100054db: R_386_32	.text
100054df:	50                   	push   eax
100054e0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054e3:	e8 fc ff ff ff       	call   100054e4 <begin(void*)+0x43e>	100054e4: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100054e8:	83 c4 10             	add    esp,0x10
100054eb:	83 ec 08             	sub    esp,0x8
100054ee:	68 e3 a2 00 10       	push   0x1000a2e3	100054ef: R_386_32	.text
100054f3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054f6:	e8 fc ff ff ff       	call   100054f7 <begin(void*)+0x451>	100054f7: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100054fb:	83 c4 10             	add    esp,0x10
100054fe:	83 ec 08             	sub    esp,0x8
10005501:	50                   	push   eax
10005502:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005505:	e8 fc ff ff ff       	call   10005506 <begin(void*)+0x460>	10005506: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000550a:	83 c4 10             	add    esp,0x10
1000550d:	83 ec 04             	sub    esp,0x4
10005510:	68 f0 a2 00 10       	push   0x1000a2f0	10005511: R_386_32	.text
10005515:	50                   	push   eax
10005516:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005519:	e8 fc ff ff ff       	call   1000551a <begin(void*)+0x474>	1000551a: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000551e:	83 c4 10             	add    esp,0x10
10005521:	83 ec 08             	sub    esp,0x8
10005524:	68 e3 a2 00 10       	push   0x1000a2e3	10005525: R_386_32	.text
10005529:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000552c:	e8 fc ff ff ff       	call   1000552d <begin(void*)+0x487>	1000552d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005531:	83 c4 10             	add    esp,0x10
10005534:	83 ec 08             	sub    esp,0x8
10005537:	50                   	push   eax
10005538:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000553b:	e8 fc ff ff ff       	call   1000553c <begin(void*)+0x496>	1000553c: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005540:	83 c4 10             	add    esp,0x10
10005543:	83 ec 04             	sub    esp,0x4
10005546:	68 f5 a2 00 10       	push   0x1000a2f5	10005547: R_386_32	.text
1000554b:	50                   	push   eax
1000554c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000554f:	e8 fc ff ff ff       	call   10005550 <begin(void*)+0x4aa>	10005550: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005554:	83 c4 10             	add    esp,0x10
10005557:	83 ec 08             	sub    esp,0x8
1000555a:	68 e3 a2 00 10       	push   0x1000a2e3	1000555b: R_386_32	.text
1000555f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005562:	e8 fc ff ff ff       	call   10005563 <begin(void*)+0x4bd>	10005563: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005567:	83 c4 10             	add    esp,0x10
1000556a:	83 ec 08             	sub    esp,0x8
1000556d:	50                   	push   eax
1000556e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005571:	e8 fc ff ff ff       	call   10005572 <begin(void*)+0x4cc>	10005572: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005576:	83 c4 10             	add    esp,0x10
10005579:	83 ec 04             	sub    esp,0x4
1000557c:	68 fd a2 00 10       	push   0x1000a2fd	1000557d: R_386_32	.text
10005581:	50                   	push   eax
10005582:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005585:	e8 fc ff ff ff       	call   10005586 <begin(void*)+0x4e0>	10005586: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000558a:	83 c4 10             	add    esp,0x10
1000558d:	83 ec 08             	sub    esp,0x8
10005590:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005596:	50                   	push   eax
10005597:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000559a:	e8 fc ff ff ff       	call   1000559b <begin(void*)+0x4f5>	1000559b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000559f:	83 c4 10             	add    esp,0x10
100055a2:	83 ec 08             	sub    esp,0x8
100055a5:	50                   	push   eax
100055a6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055a9:	e8 fc ff ff ff       	call   100055aa <begin(void*)+0x504>	100055aa: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100055ae:	83 c4 10             	add    esp,0x10
100055b1:	83 ec 04             	sub    esp,0x4
100055b4:	68 08 a3 00 10       	push   0x1000a308	100055b5: R_386_32	.text
100055b9:	50                   	push   eax
100055ba:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055bd:	e8 fc ff ff ff       	call   100055be <begin(void*)+0x518>	100055be: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100055c2:	83 c4 10             	add    esp,0x10
100055c5:	83 ec 08             	sub    esp,0x8
100055c8:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100055ce:	50                   	push   eax
100055cf:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055d2:	e8 fc ff ff ff       	call   100055d3 <begin(void*)+0x52d>	100055d3: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100055d7:	83 c4 10             	add    esp,0x10
100055da:	83 ec 08             	sub    esp,0x8
100055dd:	50                   	push   eax
100055de:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055e1:	e8 fc ff ff ff       	call   100055e2 <begin(void*)+0x53c>	100055e2: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100055e6:	83 c4 10             	add    esp,0x10
100055e9:	83 ec 04             	sub    esp,0x4
100055ec:	68 0d a3 00 10       	push   0x1000a30d	100055ed: R_386_32	.text
100055f1:	50                   	push   eax
100055f2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055f5:	e8 fc ff ff ff       	call   100055f6 <begin(void*)+0x550>	100055f6: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100055fa:	83 c4 10             	add    esp,0x10
100055fd:	83 ec 08             	sub    esp,0x8
10005600:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005606:	50                   	push   eax
10005607:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000560a:	e8 fc ff ff ff       	call   1000560b <begin(void*)+0x565>	1000560b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000560f:	83 c4 10             	add    esp,0x10
10005612:	83 ec 08             	sub    esp,0x8
10005615:	50                   	push   eax
10005616:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005619:	e8 fc ff ff ff       	call   1000561a <begin(void*)+0x574>	1000561a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000561e:	83 c4 10             	add    esp,0x10
10005621:	83 ec 04             	sub    esp,0x4
10005624:	68 16 a3 00 10       	push   0x1000a316	10005625: R_386_32	.text
10005629:	50                   	push   eax
1000562a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000562d:	e8 fc ff ff ff       	call   1000562e <begin(void*)+0x588>	1000562e: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005632:	83 c4 10             	add    esp,0x10
10005635:	a1 00 00 00 00       	mov    eax,ds:0x0	10005636: R_386_32	modesel
1000563a:	89 c3                	mov    ebx,eax
1000563c:	89 c6                	mov    esi,eax
1000563e:	c1 fe 1f             	sar    esi,0x1f
10005641:	83 ec 08             	sub    esp,0x8
10005644:	68 22 a3 00 10       	push   0x1000a322	10005645: R_386_32	.text
10005649:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000564c:	e8 fc ff ff ff       	call   1000564d <begin(void*)+0x5a7>	1000564d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005651:	83 c4 10             	add    esp,0x10
10005654:	83 ec 08             	sub    esp,0x8
10005657:	50                   	push   eax
10005658:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000565b:	e8 fc ff ff ff       	call   1000565c <begin(void*)+0x5b6>	1000565c: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005660:	83 c4 10             	add    esp,0x10
10005663:	83 ec 08             	sub    esp,0x8
10005666:	6a 6a                	push   0x6a
10005668:	56                   	push   esi
10005669:	53                   	push   ebx
1000566a:	68 2e a3 00 10       	push   0x1000a32e	1000566b: R_386_32	.text
1000566f:	50                   	push   eax
10005670:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005673:	e8 fc ff ff ff       	call   10005674 <begin(void*)+0x5ce>	10005674: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
10005678:	83 c4 20             	add    esp,0x20
1000567b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000567c: R_386_32	tzsel
10005680:	89 c3                	mov    ebx,eax
10005682:	89 c6                	mov    esi,eax
10005684:	c1 fe 1f             	sar    esi,0x1f
10005687:	83 ec 08             	sub    esp,0x8
1000568a:	68 ce a2 00 10       	push   0x1000a2ce	1000568b: R_386_32	.text
1000568f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005692:	e8 fc ff ff ff       	call   10005693 <begin(void*)+0x5ed>	10005693: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005697:	83 c4 10             	add    esp,0x10
1000569a:	83 ec 08             	sub    esp,0x8
1000569d:	50                   	push   eax
1000569e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056a1:	e8 fc ff ff ff       	call   100056a2 <begin(void*)+0x5fc>	100056a2: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100056a6:	83 c4 10             	add    esp,0x10
100056a9:	83 ec 08             	sub    esp,0x8
100056ac:	6a 6a                	push   0x6a
100056ae:	56                   	push   esi
100056af:	53                   	push   ebx
100056b0:	68 36 a3 00 10       	push   0x1000a336	100056b1: R_386_32	.text
100056b5:	50                   	push   eax
100056b6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056b9:	e8 fc ff ff ff       	call   100056ba <begin(void*)+0x614>	100056ba: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
100056be:	83 c4 20             	add    esp,0x20
100056c1:	a1 00 00 00 00       	mov    eax,ds:0x0	100056c2: R_386_32	tzsel
100056c6:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100056c9: R_386_32	timezoneStrings
100056cd:	8d 58 01             	lea    ebx,[eax+0x1]
100056d0:	83 ec 08             	sub    esp,0x8
100056d3:	68 41 a3 00 10       	push   0x1000a341	100056d4: R_386_32	.text
100056d8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056db:	e8 fc ff ff ff       	call   100056dc <begin(void*)+0x636>	100056dc: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100056e0:	83 c4 10             	add    esp,0x10
100056e3:	83 ec 04             	sub    esp,0x4
100056e6:	53                   	push   ebx
100056e7:	50                   	push   eax
100056e8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056eb:	e8 fc ff ff ff       	call   100056ec <begin(void*)+0x646>	100056ec: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100056f0:	83 c4 10             	add    esp,0x10
100056f3:	83 ec 08             	sub    esp,0x8
100056f6:	68 56 a3 00 10       	push   0x1000a356	100056f7: R_386_32	.text
100056fb:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056fe:	e8 fc ff ff ff       	call   100056ff <begin(void*)+0x659>	100056ff: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005703:	83 c4 10             	add    esp,0x10
10005706:	83 ec 04             	sub    esp,0x4
10005709:	68 00 00 00 00       	push   0x0	1000570a: R_386_32	currName
1000570e:	50                   	push   eax
1000570f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005712:	e8 fc ff ff ff       	call   10005713 <begin(void*)+0x66d>	10005713: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005717:	83 c4 10             	add    esp,0x10
1000571a:	83 ec 08             	sub    esp,0x8
1000571d:	68 68 a3 00 10       	push   0x1000a368	1000571e: R_386_32	.text
10005722:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005725:	e8 fc ff ff ff       	call   10005726 <begin(void*)+0x680>	10005726: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000572a:	83 c4 10             	add    esp,0x10
1000572d:	83 ec 04             	sub    esp,0x4
10005730:	68 00 00 00 00       	push   0x0	10005731: R_386_32	currComp
10005735:	50                   	push   eax
10005736:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005739:	e8 fc ff ff ff       	call   1000573a <begin(void*)+0x694>	1000573a: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000573e:	83 c4 10             	add    esp,0x10
10005741:	83 ec 08             	sub    esp,0x8
10005744:	68 7d a3 00 10       	push   0x1000a37d	10005745: R_386_32	.text
10005749:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000574c:	e8 fc ff ff ff       	call   1000574d <begin(void*)+0x6a7>	1000574d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005751:	83 c4 10             	add    esp,0x10
10005754:	83 ec 04             	sub    esp,0x4
10005757:	68 00 00 00 00       	push   0x0	10005758: R_386_32	pkeybuf
1000575c:	50                   	push   eax
1000575d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005760:	e8 fc ff ff ff       	call   10005761 <begin(void*)+0x6bb>	10005761: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005765:	83 c4 10             	add    esp,0x10
10005768:	83 ec 08             	sub    esp,0x8
1000576b:	68 8a a2 00 10       	push   0x1000a28a	1000576c: R_386_32	.text
10005770:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005776:	50                   	push   eax
10005777:	e8 fc ff ff ff       	call   10005778 <begin(void*)+0x6d2>	10005778: R_386_PC32	strcpy
1000577c:	83 c4 10             	add    esp,0x10
1000577f:	83 ec 08             	sub    esp,0x8
10005782:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005788:	50                   	push   eax
10005789:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
1000578f:	50                   	push   eax
10005790:	e8 fc ff ff ff       	call   10005791 <begin(void*)+0x6eb>	10005791: R_386_PC32	strcat
10005795:	83 c4 10             	add    esp,0x10
10005798:	83 ec 08             	sub    esp,0x8
1000579b:	68 95 a3 00 10       	push   0x1000a395	1000579c: R_386_32	.text
100057a0:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100057a6:	50                   	push   eax
100057a7:	e8 fc ff ff ff       	call   100057a8 <begin(void*)+0x702>	100057a8: R_386_PC32	strcat
100057ac:	83 c4 10             	add    esp,0x10
100057af:	83 ec 08             	sub    esp,0x8
100057b2:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100057b8:	50                   	push   eax
100057b9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057bc:	e8 fc ff ff ff       	call   100057bd <begin(void*)+0x717>	100057bd: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100057c1:	83 c4 10             	add    esp,0x10
100057c4:	83 ec 04             	sub    esp,0x4
100057c7:	68 00 00 00 00       	push   0x0	100057c8: R_386_32	passwhash
100057cc:	50                   	push   eax
100057cd:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057d0:	e8 fc ff ff ff       	call   100057d1 <begin(void*)+0x72b>	100057d1: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100057d5:	83 c4 10             	add    esp,0x10
100057d8:	83 ec 08             	sub    esp,0x8
100057db:	68 8a a2 00 10       	push   0x1000a28a	100057dc: R_386_32	.text
100057e0:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100057e6:	50                   	push   eax
100057e7:	e8 fc ff ff ff       	call   100057e8 <begin(void*)+0x742>	100057e8: R_386_PC32	strcpy
100057ec:	83 c4 10             	add    esp,0x10
100057ef:	83 ec 08             	sub    esp,0x8
100057f2:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100057f8:	50                   	push   eax
100057f9:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100057ff:	50                   	push   eax
10005800:	e8 fc ff ff ff       	call   10005801 <begin(void*)+0x75b>	10005801: R_386_PC32	strcat
10005805:	83 c4 10             	add    esp,0x10
10005808:	83 ec 08             	sub    esp,0x8
1000580b:	68 9f a3 00 10       	push   0x1000a39f	1000580c: R_386_32	.text
10005810:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005816:	50                   	push   eax
10005817:	e8 fc ff ff ff       	call   10005818 <begin(void*)+0x772>	10005818: R_386_PC32	strcat
1000581c:	83 c4 10             	add    esp,0x10
1000581f:	83 ec 08             	sub    esp,0x8
10005822:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005828:	50                   	push   eax
10005829:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000582c:	e8 fc ff ff ff       	call   1000582d <begin(void*)+0x787>	1000582d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005831:	83 c4 10             	add    esp,0x10
10005834:	83 ec 04             	sub    esp,0x4
10005837:	68 00 00 00 00       	push   0x0	10005838: R_386_32	passwsalt
1000583c:	50                   	push   eax
1000583d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005840:	e8 fc ff ff ff       	call   10005841 <begin(void*)+0x79b>	10005841: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005845:	83 c4 10             	add    esp,0x10
10005848:	83 ec 08             	sub    esp,0x8
1000584b:	68 8a a2 00 10       	push   0x1000a28a	1000584c: R_386_32	.text
10005850:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005856:	50                   	push   eax
10005857:	e8 fc ff ff ff       	call   10005858 <begin(void*)+0x7b2>	10005858: R_386_PC32	strcpy
1000585c:	83 c4 10             	add    esp,0x10
1000585f:	83 ec 08             	sub    esp,0x8
10005862:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005868:	50                   	push   eax
10005869:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
1000586f:	50                   	push   eax
10005870:	e8 fc ff ff ff       	call   10005871 <begin(void*)+0x7cb>	10005871: R_386_PC32	strcat
10005875:	83 c4 10             	add    esp,0x10
10005878:	83 ec 08             	sub    esp,0x8
1000587b:	68 a5 a3 00 10       	push   0x1000a3a5	1000587c: R_386_32	.text
10005880:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005886:	50                   	push   eax
10005887:	e8 fc ff ff ff       	call   10005888 <begin(void*)+0x7e2>	10005888: R_386_PC32	strcat
1000588c:	83 c4 10             	add    esp,0x10
1000588f:	83 ec 08             	sub    esp,0x8
10005892:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005898:	50                   	push   eax
10005899:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000589c:	e8 fc ff ff ff       	call   1000589d <begin(void*)+0x7f7>	1000589d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100058a1:	83 c4 10             	add    esp,0x10
100058a4:	83 ec 04             	sub    esp,0x4
100058a7:	68 00 00 00 00       	push   0x0	100058a8: R_386_32	currName
100058ac:	50                   	push   eax
100058ad:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058b0:	e8 fc ff ff ff       	call   100058b1 <begin(void*)+0x80b>	100058b1: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100058b5:	83 c4 10             	add    esp,0x10
100058b8:	83 ec 0c             	sub    esp,0xc
100058bb:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058be:	e8 fc ff ff ff       	call   100058bf <begin(void*)+0x819>	100058bf: R_386_PC32	CmClose(Reghive_Tag*)
100058c3:	83 c4 10             	add    esp,0x10
100058c6:	a1 00 00 00 00       	mov    eax,ds:0x0	100058c7: R_386_32	Krnl::computer
100058cb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
100058d1:	83 e0 80             	and    eax,0xffffff80
100058d4:	84 c0                	test   al,al
100058d6:	75 2a                	jne    10005902 <begin(void*)+0x85c>
100058d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100058d9: R_386_32	Krnl::computer
100058dd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
100058e3:	83 e0 20             	and    eax,0x20
100058e6:	84 c0                	test   al,al
100058e8:	74 1c                	je     10005906 <begin(void*)+0x860>
100058ea:	a1 00 00 00 00       	mov    eax,ds:0x0	100058eb: R_386_32	Krnl::computer
100058ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
100058f5:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
100058fb:	83 e0 04             	and    eax,0x4
100058fe:	84 c0                	test   al,al
10005900:	74 04                	je     10005906 <begin(void*)+0x860>
10005902:	b0 01                	mov    al,0x1
10005904:	eb 02                	jmp    10005908 <begin(void*)+0x862>
10005906:	b0 00                	mov    al,0x0
10005908:	84 c0                	test   al,al
1000590a:	0f 84 99 00 00 00    	je     100059a9 <begin(void*)+0x903>
10005910:	83 ec 0c             	sub    esp,0xc
10005913:	68 14 01 00 00       	push   0x114
10005918:	e8 fc ff ff ff       	call   10005919 <begin(void*)+0x873>	10005919: R_386_PC32	operator new(unsigned long)
1000591d:	83 c4 10             	add    esp,0x10
10005920:	89 c3                	mov    ebx,eax
10005922:	a1 00 00 00 00       	mov    eax,ds:0x0	10005923: R_386_32	kernelProcess
10005927:	83 ec 04             	sub    esp,0x4
1000592a:	50                   	push   eax
1000592b:	68 b2 a3 00 10       	push   0x1000a3b2	1000592c: R_386_32	.text
10005930:	53                   	push   ebx
10005931:	e8 fc ff ff ff       	call   10005932 <begin(void*)+0x88c>	10005932: R_386_PC32	File::File(char const*, Process*)
10005936:	83 c4 10             	add    esp,0x10
10005939:	89 5d a0             	mov    DWORD PTR [ebp-0x60],ebx
1000593c:	83 ec 08             	sub    esp,0x8
1000593f:	68 d0 a3 00 10       	push   0x1000a3d0	10005940: R_386_32	.text
10005944:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005947:	e8 fc ff ff ff       	call   10005948 <begin(void*)+0x8a2>	10005948: R_386_PC32	File::rename(char const*)
1000594c:	83 c4 10             	add    esp,0x10
1000594f:	83 7d a0 00          	cmp    DWORD PTR [ebp-0x60],0x0
10005953:	74 15                	je     1000596a <begin(void*)+0x8c4>
10005955:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10005958:	8b 00                	mov    eax,DWORD PTR [eax]
1000595a:	83 c0 08             	add    eax,0x8
1000595d:	8b 00                	mov    eax,DWORD PTR [eax]
1000595f:	83 ec 0c             	sub    esp,0xc
10005962:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005965:	ff d0                	call   eax
10005967:	83 c4 10             	add    esp,0x10
1000596a:	83 ec 0c             	sub    esp,0xc
1000596d:	68 14 01 00 00       	push   0x114
10005972:	e8 fc ff ff ff       	call   10005973 <begin(void*)+0x8cd>	10005973: R_386_PC32	operator new(unsigned long)
10005977:	83 c4 10             	add    esp,0x10
1000597a:	89 c3                	mov    ebx,eax
1000597c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000597d: R_386_32	kernelProcess
10005981:	83 ec 04             	sub    esp,0x4
10005984:	50                   	push   eax
10005985:	68 ee a3 00 10       	push   0x1000a3ee	10005986: R_386_32	.text
1000598a:	53                   	push   ebx
1000598b:	e8 fc ff ff ff       	call   1000598c <begin(void*)+0x8e6>	1000598c: R_386_PC32	File::File(char const*, Process*)
10005990:	83 c4 10             	add    esp,0x10
10005993:	89 5d a0             	mov    DWORD PTR [ebp-0x60],ebx
10005996:	83 ec 08             	sub    esp,0x8
10005999:	68 b2 a3 00 10       	push   0x1000a3b2	1000599a: R_386_32	.text
1000599e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100059a1:	e8 fc ff ff ff       	call   100059a2 <begin(void*)+0x8fc>	100059a2: R_386_PC32	File::rename(char const*)
100059a6:	83 c4 10             	add    esp,0x10
100059a9:	a1 00 00 00 00       	mov    eax,ds:0x0	100059aa: R_386_32	term
100059ae:	83 ec 0c             	sub    esp,0xc
100059b1:	50                   	push   eax
100059b2:	e8 fc ff ff ff       	call   100059b3 <begin(void*)+0x90d>	100059b3: R_386_PC32	setActiveTerminal(VgaText*)
100059b7:	83 c4 10             	add    esp,0x10
100059ba:	e8 fc ff ff ff       	call   100059bb <begin(void*)+0x915>	100059bb: R_386_PC32	drawBootScreen()
100059bf:	83 ec 0c             	sub    esp,0xc
100059c2:	68 c9 a0 00 10       	push   0x1000a0c9	100059c3: R_386_32	.text
100059c7:	6a 0d                	push   0xd
100059c9:	6a 32                	push   0x32
100059cb:	6a 05                	push   0x5
100059cd:	6a 16                	push   0x16
100059cf:	e8 fc ff ff ff       	call   100059d0 <begin(void*)+0x92a>	100059d0: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100059d4:	83 c4 20             	add    esp,0x20
100059d7:	a1 00 00 00 00       	mov    eax,ds:0x0	100059d8: R_386_32	term
100059dc:	83 ec 04             	sub    esp,0x4
100059df:	6a 08                	push   0x8
100059e1:	6a 18                	push   0x18
100059e3:	50                   	push   eax
100059e4:	e8 fc ff ff ff       	call   100059e5 <begin(void*)+0x93f>	100059e5: R_386_PC32	VgaText::setCursor(int, int)
100059e9:	83 c4 10             	add    esp,0x10
100059ec:	a1 00 00 00 00       	mov    eax,ds:0x0	100059ed: R_386_32	term
100059f1:	83 ec 08             	sub    esp,0x8
100059f4:	68 0c a4 00 10       	push   0x1000a40c	100059f5: R_386_32	.text
100059f9:	50                   	push   eax
100059fa:	e8 fc ff ff ff       	call   100059fb <begin(void*)+0x955>	100059fb: R_386_PC32	VgaText::puts(char const*)
100059ff:	83 c4 10             	add    esp,0x10
10005a02:	a1 00 00 00 00       	mov    eax,ds:0x0	10005a03: R_386_32	term
10005a07:	83 ec 04             	sub    esp,0x4
10005a0a:	6a 0a                	push   0xa
10005a0c:	6a 18                	push   0x18
10005a0e:	50                   	push   eax
10005a0f:	e8 fc ff ff ff       	call   10005a10 <begin(void*)+0x96a>	10005a10: R_386_PC32	VgaText::setCursor(int, int)
10005a14:	83 c4 10             	add    esp,0x10
10005a17:	a1 00 00 00 00       	mov    eax,ds:0x0	10005a18: R_386_32	term
10005a1c:	83 ec 08             	sub    esp,0x8
10005a1f:	68 34 a4 00 10       	push   0x1000a434	10005a20: R_386_32	.text
10005a24:	50                   	push   eax
10005a25:	e8 fc ff ff ff       	call   10005a26 <begin(void*)+0x980>	10005a26: R_386_PC32	VgaText::puts(char const*)
10005a2a:	83 c4 10             	add    esp,0x10
10005a2d:	a1 00 00 00 00       	mov    eax,ds:0x0	10005a2e: R_386_32	term
10005a32:	83 ec 04             	sub    esp,0x4
10005a35:	6a 0b                	push   0xb
10005a37:	6a 18                	push   0x18
10005a39:	50                   	push   eax
10005a3a:	e8 fc ff ff ff       	call   10005a3b <begin(void*)+0x995>	10005a3b: R_386_PC32	VgaText::setCursor(int, int)
10005a3f:	83 c4 10             	add    esp,0x10
10005a42:	a1 00 00 00 00       	mov    eax,ds:0x0	10005a43: R_386_32	term
10005a47:	83 ec 08             	sub    esp,0x8
10005a4a:	68 60 a4 00 10       	push   0x1000a460	10005a4b: R_386_32	.text
10005a4f:	50                   	push   eax
10005a50:	e8 fc ff ff ff       	call   10005a51 <begin(void*)+0x9ab>	10005a51: R_386_PC32	VgaText::puts(char const*)
10005a55:	83 c4 10             	add    esp,0x10
10005a58:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005a5a: R_386_32	installKey
10005a5f:	a0 00 00 00 00       	mov    al,ds:0x0	10005a60: R_386_32	installKey
10005a64:	84 c0                	test   al,al
10005a66:	0f 94 c0             	sete   al
10005a69:	84 c0                	test   al,al
10005a6b:	74 02                	je     10005a6f <begin(void*)+0x9c9>
10005a6d:	eb f0                	jmp    10005a5f <begin(void*)+0x9b9>
10005a6f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005a71: R_386_32	installKey
10005a76:	a1 00 00 00 00       	mov    eax,ds:0x0	10005a77: R_386_32	term
10005a7b:	83 ec 04             	sub    esp,0x4
10005a7e:	6a 0c                	push   0xc
10005a80:	6a 18                	push   0x18
10005a82:	50                   	push   eax
10005a83:	e8 fc ff ff ff       	call   10005a84 <begin(void*)+0x9de>	10005a84: R_386_PC32	VgaText::setCursor(int, int)
10005a88:	83 c4 10             	add    esp,0x10
10005a8b:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005a8d: R_386_32	Krnl::computer
10005a91:	a1 00 00 00 00       	mov    eax,ds:0x0	10005a92: R_386_32	Krnl::computer
10005a96:	8b 00                	mov    eax,DWORD PTR [eax]
10005a98:	83 c0 0c             	add    eax,0xc
10005a9b:	8b 00                	mov    eax,DWORD PTR [eax]
10005a9d:	6a 00                	push   0x0
10005a9f:	6a 00                	push   0x0
10005aa1:	6a 01                	push   0x1
10005aa3:	52                   	push   edx
10005aa4:	ff d0                	call   eax
10005aa6:	83 c4 10             	add    esp,0x10
10005aa9:	a1 00 00 00 00       	mov    eax,ds:0x0	10005aaa: R_386_32	term
10005aae:	6a 0f                	push   0xf
10005ab0:	6a 0c                	push   0xc
10005ab2:	68 74 a4 00 10       	push   0x1000a474	10005ab3: R_386_32	.text
10005ab7:	50                   	push   eax
10005ab8:	e8 fc ff ff ff       	call   10005ab9 <begin(void*)+0xa13>	10005ab9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10005abd:	83 c4 10             	add    esp,0x10
10005ac0:	e9 c2 0d 00 00       	jmp    10006887 <begin(void*)+0x17e1>
10005ac5:	e8 fc ff ff ff       	call   10005ac6 <begin(void*)+0xa20>	10005ac6: R_386_PC32	User::loadClockSettings()
10005aca:	83 ec 0c             	sub    esp,0xc
10005acd:	68 4c a2 00 10       	push   0x1000a24c	10005ace: R_386_32	.text
10005ad2:	e8 fc ff ff ff       	call   10005ad3 <begin(void*)+0xa2d>	10005ad3: R_386_PC32	CmOpen(char const*)
10005ad7:	83 c4 10             	add    esp,0x10
10005ada:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10005add:	83 ec 08             	sub    esp,0x8
10005ae0:	68 7d a3 00 10       	push   0x1000a37d	10005ae1: R_386_32	.text
10005ae5:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005ae8:	e8 fc ff ff ff       	call   10005ae9 <begin(void*)+0xa43>	10005ae9: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005aed:	83 c4 10             	add    esp,0x10
10005af0:	83 ec 04             	sub    esp,0x4
10005af3:	8d 95 86 fd ff ff    	lea    edx,[ebp-0x27a]
10005af9:	52                   	push   edx
10005afa:	50                   	push   eax
10005afb:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005afe:	e8 fc ff ff ff       	call   10005aff <begin(void*)+0xa59>	10005aff: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10005b03:	83 c4 10             	add    esp,0x10
10005b06:	83 ec 08             	sub    esp,0x8
10005b09:	68 9a a4 00 10       	push   0x1000a49a	10005b0a: R_386_32	.text
10005b0e:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005b11:	e8 fc ff ff ff       	call   10005b12 <begin(void*)+0xa6c>	10005b12: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b16:	83 c4 10             	add    esp,0x10
10005b19:	83 ec 04             	sub    esp,0x4
10005b1c:	8d 55 80             	lea    edx,[ebp-0x80]
10005b1f:	52                   	push   edx
10005b20:	50                   	push   eax
10005b21:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005b24:	e8 fc ff ff ff       	call   10005b25 <begin(void*)+0xa7f>	10005b25: R_386_PC32	CmGetInteger(Reghive_Tag*, int, unsigned long long*)
10005b29:	83 c4 10             	add    esp,0x10
10005b2c:	83 ec 0c             	sub    esp,0xc
10005b2f:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005b32:	e8 fc ff ff ff       	call   10005b33 <begin(void*)+0xa8d>	10005b33: R_386_PC32	CmClose(Reghive_Tag*)
10005b37:	83 c4 10             	add    esp,0x10
10005b3a:	83 ec 0c             	sub    esp,0xc
10005b3d:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005b43:	50                   	push   eax
10005b44:	e8 fc ff ff ff       	call   10005b45 <begin(void*)+0xa9f>	10005b45: R_386_PC32	checkExtendedKey(char*)
10005b49:	83 c4 10             	add    esp,0x10
10005b4c:	85 c0                	test   eax,eax
10005b4e:	0f 94 c0             	sete   al
10005b51:	84 c0                	test   al,al
10005b53:	0f 84 ed 01 00 00    	je     10005d46 <begin(void*)+0xca0>
10005b59:	83 ec 0c             	sub    esp,0xc
10005b5c:	6a 01                	push   0x1
10005b5e:	e8 fc ff ff ff       	call   10005b5f <begin(void*)+0xab9>	10005b5f: R_386_PC32	firstRun(bool)
10005b63:	83 c4 10             	add    esp,0x10
10005b66:	83 ec 0c             	sub    esp,0xc
10005b69:	68 4c a2 00 10       	push   0x1000a24c	10005b6a: R_386_32	.text
10005b6e:	e8 fc ff ff ff       	call   10005b6f <begin(void*)+0xac9>	10005b6f: R_386_PC32	CmOpen(char const*)
10005b73:	83 c4 10             	add    esp,0x10
10005b76:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10005b79:	83 ec 04             	sub    esp,0x4
10005b7c:	68 71 a2 00 10       	push   0x1000a271	10005b7d: R_386_32	.text
10005b81:	6a 00                	push   0x0
10005b83:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005b86:	e8 fc ff ff ff       	call   10005b87 <begin(void*)+0xae1>	10005b87: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005b8b:	83 c4 10             	add    esp,0x10
10005b8e:	83 ec 08             	sub    esp,0x8
10005b91:	68 71 a2 00 10       	push   0x1000a271	10005b92: R_386_32	.text
10005b96:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005b99:	e8 fc ff ff ff       	call   10005b9a <begin(void*)+0xaf4>	10005b9a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b9e:	83 c4 10             	add    esp,0x10
10005ba1:	83 ec 08             	sub    esp,0x8
10005ba4:	50                   	push   eax
10005ba5:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005ba8:	e8 fc ff ff ff       	call   10005ba9 <begin(void*)+0xb03>	10005ba9: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005bad:	83 c4 10             	add    esp,0x10
10005bb0:	83 ec 04             	sub    esp,0x4
10005bb3:	68 ab a2 00 10       	push   0x1000a2ab	10005bb4: R_386_32	.text
10005bb8:	50                   	push   eax
10005bb9:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005bbc:	e8 fc ff ff ff       	call   10005bbd <begin(void*)+0xb17>	10005bbd: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005bc1:	83 c4 10             	add    esp,0x10
10005bc4:	83 ec 08             	sub    esp,0x8
10005bc7:	68 e3 a2 00 10       	push   0x1000a2e3	10005bc8: R_386_32	.text
10005bcc:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005bcf:	e8 fc ff ff ff       	call   10005bd0 <begin(void*)+0xb2a>	10005bd0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005bd4:	83 c4 10             	add    esp,0x10
10005bd7:	83 ec 08             	sub    esp,0x8
10005bda:	50                   	push   eax
10005bdb:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005bde:	e8 fc ff ff ff       	call   10005bdf <begin(void*)+0xb39>	10005bdf: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005be3:	83 c4 10             	add    esp,0x10
10005be6:	83 ec 04             	sub    esp,0x4
10005be9:	68 fd a2 00 10       	push   0x1000a2fd	10005bea: R_386_32	.text
10005bee:	50                   	push   eax
10005bef:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005bf2:	e8 fc ff ff ff       	call   10005bf3 <begin(void*)+0xb4d>	10005bf3: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005bf7:	83 c4 10             	add    esp,0x10
10005bfa:	83 ec 08             	sub    esp,0x8
10005bfd:	68 7d a3 00 10       	push   0x1000a37d	10005bfe: R_386_32	.text
10005c02:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005c05:	e8 fc ff ff ff       	call   10005c06 <begin(void*)+0xb60>	10005c06: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c0a:	83 c4 10             	add    esp,0x10
10005c0d:	83 ec 04             	sub    esp,0x4
10005c10:	68 00 00 00 00       	push   0x0	10005c11: R_386_32	pkeybuf
10005c15:	50                   	push   eax
10005c16:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005c19:	e8 fc ff ff ff       	call   10005c1a <begin(void*)+0xb74>	10005c1a: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005c1e:	83 c4 10             	add    esp,0x10
10005c21:	83 ec 0c             	sub    esp,0xc
10005c24:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005c27:	e8 fc ff ff ff       	call   10005c28 <begin(void*)+0xb82>	10005c28: R_386_PC32	CmClose(Reghive_Tag*)
10005c2c:	83 c4 10             	add    esp,0x10
10005c2f:	a1 00 00 00 00       	mov    eax,ds:0x0	10005c30: R_386_32	term
10005c34:	83 ec 0c             	sub    esp,0xc
10005c37:	50                   	push   eax
10005c38:	e8 fc ff ff ff       	call   10005c39 <begin(void*)+0xb93>	10005c39: R_386_PC32	setActiveTerminal(VgaText*)
10005c3d:	83 c4 10             	add    esp,0x10
10005c40:	e8 fc ff ff ff       	call   10005c41 <begin(void*)+0xb9b>	10005c41: R_386_PC32	drawBootScreen()
10005c45:	83 ec 0c             	sub    esp,0xc
10005c48:	68 ae a4 00 10       	push   0x1000a4ae	10005c49: R_386_32	.text
10005c4d:	6a 0d                	push   0xd
10005c4f:	6a 32                	push   0x32
10005c51:	6a 05                	push   0x5
10005c53:	6a 16                	push   0x16
10005c55:	e8 fc ff ff ff       	call   10005c56 <begin(void*)+0xbb0>	10005c56: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005c5a:	83 c4 20             	add    esp,0x20
10005c5d:	a1 00 00 00 00       	mov    eax,ds:0x0	10005c5e: R_386_32	term
10005c62:	83 ec 04             	sub    esp,0x4
10005c65:	6a 08                	push   0x8
10005c67:	6a 18                	push   0x18
10005c69:	50                   	push   eax
10005c6a:	e8 fc ff ff ff       	call   10005c6b <begin(void*)+0xbc5>	10005c6b: R_386_PC32	VgaText::setCursor(int, int)
10005c6f:	83 c4 10             	add    esp,0x10
10005c72:	a1 00 00 00 00       	mov    eax,ds:0x0	10005c73: R_386_32	term
10005c77:	83 ec 08             	sub    esp,0x8
10005c7a:	68 c4 a4 00 10       	push   0x1000a4c4	10005c7b: R_386_32	.text
10005c7f:	50                   	push   eax
10005c80:	e8 fc ff ff ff       	call   10005c81 <begin(void*)+0xbdb>	10005c81: R_386_PC32	VgaText::puts(char const*)
10005c85:	83 c4 10             	add    esp,0x10
10005c88:	a1 00 00 00 00       	mov    eax,ds:0x0	10005c89: R_386_32	term
10005c8d:	83 ec 04             	sub    esp,0x4
10005c90:	6a 0a                	push   0xa
10005c92:	6a 18                	push   0x18
10005c94:	50                   	push   eax
10005c95:	e8 fc ff ff ff       	call   10005c96 <begin(void*)+0xbf0>	10005c96: R_386_PC32	VgaText::setCursor(int, int)
10005c9a:	83 c4 10             	add    esp,0x10
10005c9d:	a1 00 00 00 00       	mov    eax,ds:0x0	10005c9e: R_386_32	term
10005ca2:	83 ec 08             	sub    esp,0x8
10005ca5:	68 34 a4 00 10       	push   0x1000a434	10005ca6: R_386_32	.text
10005caa:	50                   	push   eax
10005cab:	e8 fc ff ff ff       	call   10005cac <begin(void*)+0xc06>	10005cac: R_386_PC32	VgaText::puts(char const*)
10005cb0:	83 c4 10             	add    esp,0x10
10005cb3:	a1 00 00 00 00       	mov    eax,ds:0x0	10005cb4: R_386_32	term
10005cb8:	83 ec 04             	sub    esp,0x4
10005cbb:	6a 0b                	push   0xb
10005cbd:	6a 18                	push   0x18
10005cbf:	50                   	push   eax
10005cc0:	e8 fc ff ff ff       	call   10005cc1 <begin(void*)+0xc1b>	10005cc1: R_386_PC32	VgaText::setCursor(int, int)
10005cc5:	83 c4 10             	add    esp,0x10
10005cc8:	a1 00 00 00 00       	mov    eax,ds:0x0	10005cc9: R_386_32	term
10005ccd:	83 ec 08             	sub    esp,0x8
10005cd0:	68 60 a4 00 10       	push   0x1000a460	10005cd1: R_386_32	.text
10005cd5:	50                   	push   eax
10005cd6:	e8 fc ff ff ff       	call   10005cd7 <begin(void*)+0xc31>	10005cd7: R_386_PC32	VgaText::puts(char const*)
10005cdb:	83 c4 10             	add    esp,0x10
10005cde:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005ce0: R_386_32	installKey
10005ce5:	a0 00 00 00 00       	mov    al,ds:0x0	10005ce6: R_386_32	installKey
10005cea:	84 c0                	test   al,al
10005cec:	0f 94 c0             	sete   al
10005cef:	84 c0                	test   al,al
10005cf1:	74 02                	je     10005cf5 <begin(void*)+0xc4f>
10005cf3:	eb f0                	jmp    10005ce5 <begin(void*)+0xc3f>
10005cf5:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005cf7: R_386_32	installKey
10005cfc:	a1 00 00 00 00       	mov    eax,ds:0x0	10005cfd: R_386_32	term
10005d01:	83 ec 04             	sub    esp,0x4
10005d04:	6a 0c                	push   0xc
10005d06:	6a 18                	push   0x18
10005d08:	50                   	push   eax
10005d09:	e8 fc ff ff ff       	call   10005d0a <begin(void*)+0xc64>	10005d0a: R_386_PC32	VgaText::setCursor(int, int)
10005d0e:	83 c4 10             	add    esp,0x10
10005d11:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005d13: R_386_32	Krnl::computer
10005d17:	a1 00 00 00 00       	mov    eax,ds:0x0	10005d18: R_386_32	Krnl::computer
10005d1c:	8b 00                	mov    eax,DWORD PTR [eax]
10005d1e:	83 c0 0c             	add    eax,0xc
10005d21:	8b 00                	mov    eax,DWORD PTR [eax]
10005d23:	6a 00                	push   0x0
10005d25:	6a 00                	push   0x0
10005d27:	6a 01                	push   0x1
10005d29:	52                   	push   edx
10005d2a:	ff d0                	call   eax
10005d2c:	83 c4 10             	add    esp,0x10
10005d2f:	a1 00 00 00 00       	mov    eax,ds:0x0	10005d30: R_386_32	term
10005d34:	6a 0f                	push   0xf
10005d36:	6a 0c                	push   0xc
10005d38:	68 74 a4 00 10       	push   0x1000a474	10005d39: R_386_32	.text
10005d3d:	50                   	push   eax
10005d3e:	e8 fc ff ff ff       	call   10005d3f <begin(void*)+0xc99>	10005d3f: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10005d43:	83 c4 10             	add    esp,0x10
10005d46:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005d48: R_386_32	showSidebar
10005d4d:	83 ec 0c             	sub    esp,0xc
10005d50:	68 84 01 00 00       	push   0x184
10005d55:	e8 fc ff ff ff       	call   10005d56 <begin(void*)+0xcb0>	10005d56: R_386_PC32	operator new(unsigned long)
10005d5a:	83 c4 10             	add    esp,0x10
10005d5d:	89 c3                	mov    ebx,eax
10005d5f:	83 ec 08             	sub    esp,0x8
10005d62:	68 04 9d 00 10       	push   0x10009d04	10005d63: R_386_32	.text
10005d67:	53                   	push   ebx
10005d68:	e8 fc ff ff ff       	call   10005d69 <begin(void*)+0xcc3>	10005d69: R_386_PC32	VgaText::VgaText(char const*)
10005d6d:	83 c4 10             	add    esp,0x10
10005d70:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10005d72: R_386_32	term
10005d76:	a1 00 00 00 00       	mov    eax,ds:0x0	10005d77: R_386_32	term
10005d7b:	83 ec 0c             	sub    esp,0xc
10005d7e:	50                   	push   eax
10005d7f:	e8 fc ff ff ff       	call   10005d80 <begin(void*)+0xcda>	10005d80: R_386_PC32	setActiveTerminal(VgaText*)
10005d84:	83 c4 10             	add    esp,0x10
10005d87:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10005d8e:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10005d95:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005d97: R_386_32	installKey
10005d9c:	83 ec 04             	sub    esp,0x4
10005d9f:	68 80 00 00 00       	push   0x80
10005da4:	6a 00                	push   0x0
10005da6:	8d 85 84 fa ff ff    	lea    eax,[ebp-0x57c]
10005dac:	50                   	push   eax
10005dad:	e8 fc ff ff ff       	call   10005dae <begin(void*)+0xd08>	10005dae: R_386_PC32	memset
10005db2:	83 c4 10             	add    esp,0x10
10005db5:	83 ec 04             	sub    esp,0x4
10005db8:	68 80 00 00 00       	push   0x80
10005dbd:	6a 00                	push   0x0
10005dbf:	8d 85 04 fb ff ff    	lea    eax,[ebp-0x4fc]
10005dc5:	50                   	push   eax
10005dc6:	e8 fc ff ff ff       	call   10005dc7 <begin(void*)+0xd21>	10005dc7: R_386_PC32	memset
10005dcb:	83 c4 10             	add    esp,0x10
10005dce:	83 ec 0c             	sub    esp,0xc
10005dd1:	68 4c a2 00 10       	push   0x1000a24c	10005dd2: R_386_32	.text
10005dd6:	e8 fc ff ff ff       	call   10005dd7 <begin(void*)+0xd31>	10005dd7: R_386_PC32	CmOpen(char const*)
10005ddb:	83 c4 10             	add    esp,0x10
10005dde:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10005de1:	83 ec 08             	sub    esp,0x8
10005de4:	68 c1 a2 00 10       	push   0x1000a2c1	10005de5: R_386_32	.text
10005de9:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005dec:	e8 fc ff ff ff       	call   10005ded <begin(void*)+0xd47>	10005ded: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005df1:	83 c4 10             	add    esp,0x10
10005df4:	83 ec 08             	sub    esp,0x8
10005df7:	50                   	push   eax
10005df8:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005dfb:	e8 fc ff ff ff       	call   10005dfc <begin(void*)+0xd56>	10005dfc: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005e00:	83 c4 10             	add    esp,0x10
10005e03:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10005e06:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10005e0a:	0f 84 88 01 00 00    	je     10005f98 <begin(void*)+0xef2>
10005e10:	83 ec 04             	sub    esp,0x4
10005e13:	6a 50                	push   0x50
10005e15:	6a 00                	push   0x0
10005e17:	8d 85 e4 f9 ff ff    	lea    eax,[ebp-0x61c]
10005e1d:	50                   	push   eax
10005e1e:	e8 fc ff ff ff       	call   10005e1f <begin(void*)+0xd79>	10005e1f: R_386_PC32	memset
10005e23:	83 c4 10             	add    esp,0x10
10005e26:	83 ec 04             	sub    esp,0x4
10005e29:	8d 85 e4 f9 ff ff    	lea    eax,[ebp-0x61c]
10005e2f:	50                   	push   eax
10005e30:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10005e33:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005e36:	e8 fc ff ff ff       	call   10005e37 <begin(void*)+0xd91>	10005e37: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
10005e3b:	83 c4 10             	add    esp,0x10
10005e3e:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10005e41:	83 7d 98 4e          	cmp    DWORD PTR [ebp-0x68],0x4e
10005e45:	0f 85 34 01 00 00    	jne    10005f7f <begin(void*)+0xed9>
10005e4b:	83 ec 0c             	sub    esp,0xc
10005e4e:	6a 50                	push   0x50
10005e50:	e8 fc ff ff ff       	call   10005e51 <begin(void*)+0xdab>	10005e51: R_386_PC32	malloc
10005e55:	83 c4 10             	add    esp,0x10
10005e58:	89 c2                	mov    edx,eax
10005e5a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10005e5d:	89 94 85 04 fb ff ff 	mov    DWORD PTR [ebp+eax*4-0x4fc],edx
10005e64:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10005e67:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
10005e6e:	83 ec 08             	sub    esp,0x8
10005e71:	8d 95 e4 f9 ff ff    	lea    edx,[ebp-0x61c]
10005e77:	52                   	push   edx
10005e78:	50                   	push   eax
10005e79:	e8 fc ff ff ff       	call   10005e7a <begin(void*)+0xdd4>	10005e7a: R_386_PC32	strcpy
10005e7e:	83 c4 10             	add    esp,0x10
10005e81:	83 ec 08             	sub    esp,0x8
10005e84:	68 8a a2 00 10       	push   0x1000a28a	10005e85: R_386_32	.text
10005e89:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005e8f:	50                   	push   eax
10005e90:	e8 fc ff ff ff       	call   10005e91 <begin(void*)+0xdeb>	10005e91: R_386_PC32	strcpy
10005e95:	83 c4 10             	add    esp,0x10
10005e98:	83 ec 08             	sub    esp,0x8
10005e9b:	8d 85 e4 f9 ff ff    	lea    eax,[ebp-0x61c]
10005ea1:	50                   	push   eax
10005ea2:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005ea8:	50                   	push   eax
10005ea9:	e8 fc ff ff ff       	call   10005eaa <begin(void*)+0xe04>	10005eaa: R_386_PC32	strcat
10005eae:	83 c4 10             	add    esp,0x10
10005eb1:	83 ec 08             	sub    esp,0x8
10005eb4:	68 a5 a3 00 10       	push   0x1000a3a5	10005eb5: R_386_32	.text
10005eb9:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005ebf:	50                   	push   eax
10005ec0:	e8 fc ff ff ff       	call   10005ec1 <begin(void*)+0xe1b>	10005ec1: R_386_PC32	strcat
10005ec5:	83 c4 10             	add    esp,0x10
10005ec8:	83 ec 08             	sub    esp,0x8
10005ecb:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005ed1:	50                   	push   eax
10005ed2:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005ed5:	e8 fc ff ff ff       	call   10005ed6 <begin(void*)+0xe30>	10005ed6: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005eda:	83 c4 10             	add    esp,0x10
10005edd:	83 ec 04             	sub    esp,0x4
10005ee0:	8d 95 e4 f9 ff ff    	lea    edx,[ebp-0x61c]
10005ee6:	52                   	push   edx
10005ee7:	50                   	push   eax
10005ee8:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005eeb:	e8 fc ff ff ff       	call   10005eec <begin(void*)+0xe46>	10005eec: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10005ef0:	83 c4 10             	add    esp,0x10
10005ef3:	83 ec 0c             	sub    esp,0xc
10005ef6:	6a 50                	push   0x50
10005ef8:	e8 fc ff ff ff       	call   10005ef9 <begin(void*)+0xe53>	10005ef9: R_386_PC32	malloc
10005efd:	83 c4 10             	add    esp,0x10
10005f00:	89 c2                	mov    edx,eax
10005f02:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10005f05:	89 94 85 84 fa ff ff 	mov    DWORD PTR [ebp+eax*4-0x57c],edx
10005f0c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10005f0f:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
10005f16:	83 ec 08             	sub    esp,0x8
10005f19:	68 cb 9c 00 10       	push   0x10009ccb	10005f1a: R_386_32	.text
10005f1e:	50                   	push   eax
10005f1f:	e8 fc ff ff ff       	call   10005f20 <begin(void*)+0xe7a>	10005f20: R_386_PC32	strcpy
10005f24:	83 c4 10             	add    esp,0x10
10005f27:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10005f2a:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
10005f31:	83 ec 08             	sub    esp,0x8
10005f34:	8d 95 e4 f9 ff ff    	lea    edx,[ebp-0x61c]
10005f3a:	52                   	push   edx
10005f3b:	50                   	push   eax
10005f3c:	e8 fc ff ff ff       	call   10005f3d <begin(void*)+0xe97>	10005f3d: R_386_PC32	strcat
10005f41:	83 c4 10             	add    esp,0x10
10005f44:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10005f47:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
10005f4e:	83 ec 0c             	sub    esp,0xc
10005f51:	50                   	push   eax
10005f52:	e8 fc ff ff ff       	call   10005f53 <begin(void*)+0xead>	10005f53: R_386_PC32	strlen
10005f57:	83 c4 10             	add    esp,0x10
10005f5a:	83 f8 31             	cmp    eax,0x31
10005f5d:	77 1d                	ja     10005f7c <begin(void*)+0xed6>
10005f5f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10005f62:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
10005f69:	83 ec 08             	sub    esp,0x8
10005f6c:	68 cb 9c 00 10       	push   0x10009ccb	10005f6d: R_386_32	.text
10005f71:	50                   	push   eax
10005f72:	e8 fc ff ff ff       	call   10005f73 <begin(void*)+0xecd>	10005f73: R_386_PC32	strcat
10005f77:	83 c4 10             	add    esp,0x10
10005f7a:	eb c8                	jmp    10005f44 <begin(void*)+0xe9e>
10005f7c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10005f7f:	83 ec 08             	sub    esp,0x8
10005f82:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10005f85:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005f88:	e8 fc ff ff ff       	call   10005f89 <begin(void*)+0xee3>	10005f89: R_386_PC32	CmGetNext(Reghive_Tag*, int)
10005f8d:	83 c4 10             	add    esp,0x10
10005f90:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10005f93:	e9 6e fe ff ff       	jmp    10005e06 <begin(void*)+0xd60>
10005f98:	83 ec 0c             	sub    esp,0xc
10005f9b:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10005f9e:	e8 fc ff ff ff       	call   10005f9f <begin(void*)+0xef9>	10005f9f: R_386_PC32	CmClose(Reghive_Tag*)
10005fa3:	83 c4 10             	add    esp,0x10
10005fa6:	83 ec 0c             	sub    esp,0xc
10005fa9:	6a 50                	push   0x50
10005fab:	e8 fc ff ff ff       	call   10005fac <begin(void*)+0xf06>	10005fac: R_386_PC32	malloc
10005fb0:	83 c4 10             	add    esp,0x10
10005fb3:	89 c2                	mov    edx,eax
10005fb5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10005fb8:	89 94 85 84 fa ff ff 	mov    DWORD PTR [ebp+eax*4-0x57c],edx
10005fbf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10005fc2:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
10005fc9:	83 ec 08             	sub    esp,0x8
10005fcc:	68 e8 a4 00 10       	push   0x1000a4e8	10005fcd: R_386_32	.text
10005fd1:	50                   	push   eax
10005fd2:	e8 fc ff ff ff       	call   10005fd3 <begin(void*)+0xf2d>	10005fd3: R_386_PC32	strcpy
10005fd7:	83 c4 10             	add    esp,0x10
10005fda:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10005fdd:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005fdf: R_386_32	guiKeyboardHandler
	10005fe3: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
10005fe7:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005fe9: R_386_32	installKey
10005fee:	e8 fc ff ff ff       	call   10005fef <begin(void*)+0xf49>	10005fef: R_386_PC32	drawBootScreen()
10005ff3:	83 ec 0c             	sub    esp,0xc
10005ff6:	68 1b a5 00 10       	push   0x1000a51b	10005ff7: R_386_32	.text
10005ffb:	6a 10                	push   0x10
10005ffd:	6a 39                	push   0x39
10005fff:	6a 03                	push   0x3
10006001:	6a 0c                	push   0xc
10006003:	e8 fc ff ff ff       	call   10006004 <begin(void*)+0xf5e>	10006004: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10006008:	83 c4 20             	add    esp,0x20
1000600b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000600c: R_386_32	term
10006010:	83 ec 04             	sub    esp,0x4
10006013:	6a 06                	push   0x6
10006015:	6a 0e                	push   0xe
10006017:	50                   	push   eax
10006018:	e8 fc ff ff ff       	call   10006019 <begin(void*)+0xf73>	10006019: R_386_PC32	VgaText::setCursor(int, int)
1000601d:	83 c4 10             	add    esp,0x10
10006020:	a1 00 00 00 00       	mov    eax,ds:0x0	10006021: R_386_32	term
10006025:	6a 0f                	push   0xf
10006027:	6a 00                	push   0x0
10006029:	68 24 a5 00 10       	push   0x1000a524	1000602a: R_386_32	.text
1000602e:	50                   	push   eax
1000602f:	e8 fc ff ff ff       	call   10006030 <begin(void*)+0xf8a>	10006030: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006034:	83 c4 10             	add    esp,0x10
10006037:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
1000603b:	75 0c                	jne    10006049 <begin(void*)+0xfa3>
1000603d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10006044:	e9 23 01 00 00       	jmp    1000616c <begin(void*)+0x10c6>
10006049:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10006050:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006053:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10006056:	7d 63                	jge    100060bb <begin(void*)+0x1015>
10006058:	a1 00 00 00 00       	mov    eax,ds:0x0	10006059: R_386_32	term
1000605d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10006060:	83 c2 08             	add    edx,0x8
10006063:	83 ec 04             	sub    esp,0x4
10006066:	52                   	push   edx
10006067:	6a 0f                	push   0xf
10006069:	50                   	push   eax
1000606a:	e8 fc ff ff ff       	call   1000606b <begin(void*)+0xfc5>	1000606b: R_386_PC32	VgaText::setCursor(int, int)
1000606f:	83 c4 10             	add    esp,0x10
10006072:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10006074: R_386_32	term
10006078:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
1000607b:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
1000607e:	75 07                	jne    10006087 <begin(void*)+0xfe1>
10006080:	b9 00 00 00 00       	mov    ecx,0x0
10006085:	eb 05                	jmp    1000608c <begin(void*)+0xfe6>
10006087:	b9 0f 00 00 00       	mov    ecx,0xf
1000608c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
1000608f:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006092:	75 07                	jne    1000609b <begin(void*)+0xff5>
10006094:	ba 0f 00 00 00       	mov    edx,0xf
10006099:	eb 05                	jmp    100060a0 <begin(void*)+0xffa>
1000609b:	ba 00 00 00 00       	mov    edx,0x0
100060a0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100060a3:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
100060aa:	51                   	push   ecx
100060ab:	52                   	push   edx
100060ac:	50                   	push   eax
100060ad:	53                   	push   ebx
100060ae:	e8 fc ff ff ff       	call   100060af <begin(void*)+0x1009>	100060af: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100060b3:	83 c4 10             	add    esp,0x10
100060b6:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
100060b9:	eb 95                	jmp    10006050 <begin(void*)+0xfaa>
100060bb:	a0 00 00 00 00       	mov    al,ds:0x0	100060bc: R_386_32	installKey
100060c0:	84 c0                	test   al,al
100060c2:	0f 94 c0             	sete   al
100060c5:	84 c0                	test   al,al
100060c7:	74 02                	je     100060cb <begin(void*)+0x1025>
100060c9:	eb f0                	jmp    100060bb <begin(void*)+0x1015>
100060cb:	a1 00 00 00 00       	mov    eax,ds:0x0	100060cc: R_386_32	term
100060d0:	05 82 00 00 00       	add    eax,0x82
100060d5:	83 ec 04             	sub    esp,0x4
100060d8:	6a 04                	push   0x4
100060da:	6a 00                	push   0x0
100060dc:	50                   	push   eax
100060dd:	e8 fc ff ff ff       	call   100060de <begin(void*)+0x1038>	100060de: R_386_PC32	memset
100060e2:	83 c4 10             	add    esp,0x10
100060e5:	a1 00 00 00 00       	mov    eax,ds:0x0	100060e6: R_386_32	term
100060ea:	05 02 01 00 00       	add    eax,0x102
100060ef:	83 ec 04             	sub    esp,0x4
100060f2:	6a 04                	push   0x4
100060f4:	6a 00                	push   0x0
100060f6:	50                   	push   eax
100060f7:	e8 fc ff ff ff       	call   100060f8 <begin(void*)+0x1052>	100060f8: R_386_PC32	memset
100060fc:	83 c4 10             	add    esp,0x10
100060ff:	a0 00 00 00 00       	mov    al,ds:0x0	10006100: R_386_32	installKey
10006104:	3c 01                	cmp    al,0x1
10006106:	0f 94 c0             	sete   al
10006109:	84 c0                	test   al,al
1000610b:	74 12                	je     1000611f <begin(void*)+0x1079>
1000610d:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10006110:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10006114:	79 39                	jns    1000614f <begin(void*)+0x10a9>
10006116:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
1000611d:	eb 30                	jmp    1000614f <begin(void*)+0x10a9>
1000611f:	a0 00 00 00 00       	mov    al,ds:0x0	10006120: R_386_32	installKey
10006124:	3c 02                	cmp    al,0x2
10006126:	0f 94 c0             	sete   al
10006129:	84 c0                	test   al,al
1000612b:	74 14                	je     10006141 <begin(void*)+0x109b>
1000612d:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10006130:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006133:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006136:	7f 17                	jg     1000614f <begin(void*)+0x10a9>
10006138:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000613b:	48                   	dec    eax
1000613c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000613f:	eb 0e                	jmp    1000614f <begin(void*)+0x10a9>
10006141:	a0 00 00 00 00       	mov    al,ds:0x0	10006142: R_386_32	installKey
10006146:	3c 0a                	cmp    al,0xa
10006148:	0f 94 c0             	sete   al
1000614b:	84 c0                	test   al,al
1000614d:	75 1c                	jne    1000616b <begin(void*)+0x10c5>
1000614f:	83 ec 0c             	sub    esp,0xc
10006152:	68 f4 01 00 00       	push   0x1f4
10006157:	e8 fc ff ff ff       	call   10006158 <begin(void*)+0x10b2>	10006158: R_386_PC32	milliTenthSleep(unsigned int)
1000615c:	83 c4 10             	add    esp,0x10
1000615f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006161: R_386_32	installKey
10006166:	e9 cc fe ff ff       	jmp    10006037 <begin(void*)+0xf91>
1000616b:	90                   	nop
1000616c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000616f:	48                   	dec    eax
10006170:	39 45 dc             	cmp    DWORD PTR [ebp-0x24],eax
10006173:	75 57                	jne    100061cc <begin(void*)+0x1126>
10006175:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006177: R_386_32	installKey
1000617c:	a0 00 00 00 00       	mov    al,ds:0x0	1000617d: R_386_32	installKey
10006181:	84 c0                	test   al,al
10006183:	0f 94 c0             	sete   al
10006186:	84 c0                	test   al,al
10006188:	74 02                	je     1000618c <begin(void*)+0x10e6>
1000618a:	eb f0                	jmp    1000617c <begin(void*)+0x10d6>
1000618c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000618d: R_386_32	term
10006191:	05 82 00 00 00       	add    eax,0x82
10006196:	83 ec 04             	sub    esp,0x4
10006199:	6a 04                	push   0x4
1000619b:	6a 00                	push   0x0
1000619d:	50                   	push   eax
1000619e:	e8 fc ff ff ff       	call   1000619f <begin(void*)+0x10f9>	1000619f: R_386_PC32	memset
100061a3:	83 c4 10             	add    esp,0x10
100061a6:	a1 00 00 00 00       	mov    eax,ds:0x0	100061a7: R_386_32	term
100061ab:	05 02 01 00 00       	add    eax,0x102
100061b0:	83 ec 04             	sub    esp,0x4
100061b3:	6a 04                	push   0x4
100061b5:	6a 00                	push   0x0
100061b7:	50                   	push   eax
100061b8:	e8 fc ff ff ff       	call   100061b9 <begin(void*)+0x1113>	100061b9: R_386_PC32	memset
100061bd:	83 c4 10             	add    esp,0x10
100061c0:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100061c2: R_386_32	installKey
100061c7:	e9 bb fb ff ff       	jmp    10005d87 <begin(void*)+0xce1>
100061cc:	83 ec 08             	sub    esp,0x8
100061cf:	68 8a a2 00 10       	push   0x1000a28a	100061d0: R_386_32	.text
100061d4:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
100061da:	50                   	push   eax
100061db:	e8 fc ff ff ff       	call   100061dc <begin(void*)+0x1136>	100061dc: R_386_PC32	strcpy
100061e0:	83 c4 10             	add    esp,0x10
100061e3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100061e6:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
100061ed:	83 ec 08             	sub    esp,0x8
100061f0:	50                   	push   eax
100061f1:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
100061f7:	50                   	push   eax
100061f8:	e8 fc ff ff ff       	call   100061f9 <begin(void*)+0x1153>	100061f9: R_386_PC32	strcat
100061fd:	83 c4 10             	add    esp,0x10
10006200:	83 ec 08             	sub    esp,0x8
10006203:	68 95 a3 00 10       	push   0x1000a395	10006204: R_386_32	.text
10006208:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
1000620e:	50                   	push   eax
1000620f:	e8 fc ff ff ff       	call   10006210 <begin(void*)+0x116a>	10006210: R_386_PC32	strcat
10006214:	83 c4 10             	add    esp,0x10
10006217:	83 ec 0c             	sub    esp,0xc
1000621a:	68 4c a2 00 10       	push   0x1000a24c	1000621b: R_386_32	.text
1000621f:	e8 fc ff ff ff       	call   10006220 <begin(void*)+0x117a>	10006220: R_386_PC32	CmOpen(char const*)
10006224:	83 c4 10             	add    esp,0x10
10006227:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
1000622a:	83 ec 08             	sub    esp,0x8
1000622d:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006233:	50                   	push   eax
10006234:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
10006237:	e8 fc ff ff ff       	call   10006238 <begin(void*)+0x1192>	10006238: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000623c:	83 c4 10             	add    esp,0x10
1000623f:	83 ec 04             	sub    esp,0x4
10006242:	8d 95 06 fc ff ff    	lea    edx,[ebp-0x3fa]
10006248:	52                   	push   edx
10006249:	50                   	push   eax
1000624a:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
1000624d:	e8 fc ff ff ff       	call   1000624e <begin(void*)+0x11a8>	1000624e: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006252:	83 c4 10             	add    esp,0x10
10006255:	83 ec 08             	sub    esp,0x8
10006258:	68 8a a2 00 10       	push   0x1000a28a	10006259: R_386_32	.text
1000625d:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006263:	50                   	push   eax
10006264:	e8 fc ff ff ff       	call   10006265 <begin(void*)+0x11bf>	10006265: R_386_PC32	strcpy
10006269:	83 c4 10             	add    esp,0x10
1000626c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
1000626f:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
10006276:	83 ec 08             	sub    esp,0x8
10006279:	50                   	push   eax
1000627a:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006280:	50                   	push   eax
10006281:	e8 fc ff ff ff       	call   10006282 <begin(void*)+0x11dc>	10006282: R_386_PC32	strcat
10006286:	83 c4 10             	add    esp,0x10
10006289:	83 ec 08             	sub    esp,0x8
1000628c:	68 9f a3 00 10       	push   0x1000a39f	1000628d: R_386_32	.text
10006291:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006297:	50                   	push   eax
10006298:	e8 fc ff ff ff       	call   10006299 <begin(void*)+0x11f3>	10006299: R_386_PC32	strcat
1000629d:	83 c4 10             	add    esp,0x10
100062a0:	83 ec 08             	sub    esp,0x8
100062a3:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
100062a9:	50                   	push   eax
100062aa:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
100062ad:	e8 fc ff ff ff       	call   100062ae <begin(void*)+0x1208>	100062ae: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100062b2:	83 c4 10             	add    esp,0x10
100062b5:	83 ec 04             	sub    esp,0x4
100062b8:	8d 95 34 fa ff ff    	lea    edx,[ebp-0x5cc]
100062be:	52                   	push   edx
100062bf:	50                   	push   eax
100062c0:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
100062c3:	e8 fc ff ff ff       	call   100062c4 <begin(void*)+0x121e>	100062c4: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
100062c8:	83 c4 10             	add    esp,0x10
100062cb:	83 ec 0c             	sub    esp,0xc
100062ce:	ff 75 9c             	push   DWORD PTR [ebp-0x64]
100062d1:	e8 fc ff ff ff       	call   100062d2 <begin(void*)+0x122c>	100062d2: R_386_PC32	CmClose(Reghive_Tag*)
100062d6:	83 c4 10             	add    esp,0x10
100062d9:	83 ec 04             	sub    esp,0x4
100062dc:	68 80 00 00 00       	push   0x80
100062e1:	6a 00                	push   0x0
100062e3:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
100062e9:	50                   	push   eax
100062ea:	e8 fc ff ff ff       	call   100062eb <begin(void*)+0x1245>	100062eb: R_386_PC32	memset
100062ef:	83 c4 10             	add    esp,0x10
100062f2:	e8 fc ff ff ff       	call   100062f3 <begin(void*)+0x124d>	100062f3: R_386_PC32	drawBootScreen()
100062f7:	83 ec 08             	sub    esp,0x8
100062fa:	6a 01                	push   0x1
100062fc:	68 1b a5 00 10       	push   0x1000a51b	100062fd: R_386_32	.text
10006301:	6a 10                	push   0x10
10006303:	6a 39                	push   0x39
10006305:	6a 03                	push   0x3
10006307:	6a 0c                	push   0xc
10006309:	e8 fc ff ff ff       	call   1000630a <begin(void*)+0x1264>	1000630a: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
1000630e:	83 c4 20             	add    esp,0x20
10006311:	a1 00 00 00 00       	mov    eax,ds:0x0	10006312: R_386_32	term
10006316:	83 ec 04             	sub    esp,0x4
10006319:	6a 06                	push   0x6
1000631b:	6a 0e                	push   0xe
1000631d:	50                   	push   eax
1000631e:	e8 fc ff ff ff       	call   1000631f <begin(void*)+0x1279>	1000631f: R_386_PC32	VgaText::setCursor(int, int)
10006323:	83 c4 10             	add    esp,0x10
10006326:	a1 00 00 00 00       	mov    eax,ds:0x0	10006327: R_386_32	term
1000632b:	6a 07                	push   0x7
1000632d:	6a 00                	push   0x0
1000632f:	68 24 a5 00 10       	push   0x1000a524	10006330: R_386_32	.text
10006334:	50                   	push   eax
10006335:	e8 fc ff ff ff       	call   10006336 <begin(void*)+0x1290>	10006336: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000633a:	83 c4 10             	add    esp,0x10
1000633d:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10006341:	7e 72                	jle    100063b5 <begin(void*)+0x130f>
10006343:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
1000634a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
1000634d:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10006350:	7d 63                	jge    100063b5 <begin(void*)+0x130f>
10006352:	a1 00 00 00 00       	mov    eax,ds:0x0	10006353: R_386_32	term
10006357:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
1000635a:	83 c2 08             	add    edx,0x8
1000635d:	83 ec 04             	sub    esp,0x4
10006360:	52                   	push   edx
10006361:	6a 0f                	push   0xf
10006363:	50                   	push   eax
10006364:	e8 fc ff ff ff       	call   10006365 <begin(void*)+0x12bf>	10006365: R_386_PC32	VgaText::setCursor(int, int)
10006369:	83 c4 10             	add    esp,0x10
1000636c:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	1000636e: R_386_32	term
10006372:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006375:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006378:	75 07                	jne    10006381 <begin(void*)+0x12db>
1000637a:	b9 00 00 00 00       	mov    ecx,0x0
1000637f:	eb 05                	jmp    10006386 <begin(void*)+0x12e0>
10006381:	b9 07 00 00 00       	mov    ecx,0x7
10006386:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006389:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
1000638c:	75 07                	jne    10006395 <begin(void*)+0x12ef>
1000638e:	ba 07 00 00 00       	mov    edx,0x7
10006393:	eb 05                	jmp    1000639a <begin(void*)+0x12f4>
10006395:	ba 00 00 00 00       	mov    edx,0x0
1000639a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
1000639d:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
100063a4:	51                   	push   ecx
100063a5:	52                   	push   edx
100063a6:	50                   	push   eax
100063a7:	53                   	push   ebx
100063a8:	e8 fc ff ff ff       	call   100063a9 <begin(void*)+0x1303>	100063a9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100063ad:	83 c4 10             	add    esp,0x10
100063b0:	ff 45 d0             	inc    DWORD PTR [ebp-0x30]
100063b3:	eb 95                	jmp    1000634a <begin(void*)+0x12a4>
100063b5:	83 ec 0c             	sub    esp,0xc
100063b8:	68 1b a5 00 10       	push   0x1000a51b	100063b9: R_386_32	.text
100063bd:	6a 0b                	push   0xb
100063bf:	6a 2d                	push   0x2d
100063c1:	6a 0a                	push   0xa
100063c3:	6a 1c                	push   0x1c
100063c5:	e8 fc ff ff ff       	call   100063c6 <begin(void*)+0x1320>	100063c6: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100063ca:	83 c4 20             	add    esp,0x20
100063cd:	c6 45 cf 01          	mov    BYTE PTR [ebp-0x31],0x1
100063d1:	83 ec 04             	sub    esp,0x4
100063d4:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
100063da:	50                   	push   eax
100063db:	8d 85 34 fa ff ff    	lea    eax,[ebp-0x5cc]
100063e1:	50                   	push   eax
100063e2:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
100063e8:	50                   	push   eax
100063e9:	e8 fc ff ff ff       	call   100063ea <begin(void*)+0x1344>	100063ea: R_386_PC32	bcrypt_hashpw
100063ee:	83 c4 10             	add    esp,0x10
100063f1:	83 ec 08             	sub    esp,0x8
100063f4:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
100063fa:	50                   	push   eax
100063fb:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
10006401:	50                   	push   eax
10006402:	e8 fc ff ff ff       	call   10006403 <begin(void*)+0x135d>	10006403: R_386_PC32	strcmp
10006407:	83 c4 10             	add    esp,0x10
1000640a:	85 c0                	test   eax,eax
1000640c:	75 04                	jne    10006412 <begin(void*)+0x136c>
1000640e:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
10006412:	83 ec 04             	sub    esp,0x4
10006415:	68 80 00 00 00       	push   0x80
1000641a:	6a 00                	push   0x0
1000641c:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10006422:	50                   	push   eax
10006423:	e8 fc ff ff ff       	call   10006424 <begin(void*)+0x137e>	10006424: R_386_PC32	memset
10006428:	83 c4 10             	add    esp,0x10
1000642b:	80 7d cf 00          	cmp    BYTE PTR [ebp-0x31],0x0
1000642f:	0f 84 9c 02 00 00    	je     100066d1 <begin(void*)+0x162b>
10006435:	a1 00 00 00 00       	mov    eax,ds:0x0	10006436: R_386_32	term
1000643a:	83 ec 04             	sub    esp,0x4
1000643d:	6a 0d                	push   0xd
1000643f:	6a 1e                	push   0x1e
10006441:	50                   	push   eax
10006442:	e8 fc ff ff ff       	call   10006443 <begin(void*)+0x139d>	10006443: R_386_PC32	VgaText::setCursor(int, int)
10006447:	83 c4 10             	add    esp,0x10
1000644a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000644b: R_386_32	term
1000644f:	83 ec 08             	sub    esp,0x8
10006452:	68 54 a5 00 10       	push   0x1000a554	10006453: R_386_32	.text
10006457:	50                   	push   eax
10006458:	e8 fc ff ff ff       	call   10006459 <begin(void*)+0x13b3>	10006459: R_386_PC32	VgaText::puts(char const*)
1000645d:	83 c4 10             	add    esp,0x10
10006460:	a1 00 00 00 00       	mov    eax,ds:0x0	10006461: R_386_32	term
10006465:	83 ec 04             	sub    esp,0x4
10006468:	6a 0e                	push   0xe
1000646a:	6a 1e                	push   0x1e
1000646c:	50                   	push   eax
1000646d:	e8 fc ff ff ff       	call   1000646e <begin(void*)+0x13c8>	1000646e: R_386_PC32	VgaText::setCursor(int, int)
10006472:	83 c4 10             	add    esp,0x10
10006475:	a1 00 00 00 00       	mov    eax,ds:0x0	10006476: R_386_32	term
1000647a:	83 ec 08             	sub    esp,0x8
1000647d:	68 7e a5 00 10       	push   0x1000a57e	1000647e: R_386_32	.text
10006482:	50                   	push   eax
10006483:	e8 fc ff ff ff       	call   10006484 <begin(void*)+0x13de>	10006484: R_386_PC32	VgaText::puts(char const*)
10006488:	83 c4 10             	add    esp,0x10
1000648b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000648c: R_386_32	term
10006490:	83 ec 04             	sub    esp,0x4
10006493:	6a 10                	push   0x10
10006495:	6a 1e                	push   0x1e
10006497:	50                   	push   eax
10006498:	e8 fc ff ff ff       	call   10006499 <begin(void*)+0x13f3>	10006499: R_386_PC32	VgaText::setCursor(int, int)
1000649d:	83 c4 10             	add    esp,0x10
100064a0:	a1 00 00 00 00       	mov    eax,ds:0x0	100064a1: R_386_32	term
100064a5:	6a 07                	push   0x7
100064a7:	6a 00                	push   0x0
100064a9:	68 a0 9d 00 10       	push   0x10009da0	100064aa: R_386_32	.text
100064ae:	50                   	push   eax
100064af:	e8 fc ff ff ff       	call   100064b0 <begin(void*)+0x140a>	100064b0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100064b4:	83 c4 10             	add    esp,0x10
100064b7:	a1 00 00 00 00       	mov    eax,ds:0x0	100064b8: R_386_32	term
100064bc:	83 ec 08             	sub    esp,0x8
100064bf:	6a 1e                	push   0x1e
100064c1:	50                   	push   eax
100064c2:	e8 fc ff ff ff       	call   100064c3 <begin(void*)+0x141d>	100064c3: R_386_PC32	VgaText::setCursorX(int)
100064c7:	83 c4 10             	add    esp,0x10
100064ca:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
100064d1:	83 ec 0c             	sub    esp,0xc
100064d4:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
100064da:	50                   	push   eax
100064db:	e8 fc ff ff ff       	call   100064dc <begin(void*)+0x1436>	100064dc: R_386_PC32	strlen
100064e0:	83 c4 10             	add    esp,0x10
100064e3:	89 c2                	mov    edx,eax
100064e5:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
100064e8:	39 c2                	cmp    edx,eax
100064ea:	76 1c                	jbe    10006508 <begin(void*)+0x1462>
100064ec:	a1 00 00 00 00       	mov    eax,ds:0x0	100064ed: R_386_32	term
100064f1:	6a 07                	push   0x7
100064f3:	6a 00                	push   0x0
100064f5:	68 cc 9d 00 10       	push   0x10009dcc	100064f6: R_386_32	.text
100064fa:	50                   	push   eax
100064fb:	e8 fc ff ff ff       	call   100064fc <begin(void*)+0x1456>	100064fc: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006500:	83 c4 10             	add    esp,0x10
10006503:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
10006506:	eb c9                	jmp    100064d1 <begin(void*)+0x142b>
10006508:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	1000650a: R_386_32	term
1000650e:	83 ec 0c             	sub    esp,0xc
10006511:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006517:	50                   	push   eax
10006518:	e8 fc ff ff ff       	call   10006519 <begin(void*)+0x1473>	10006519: R_386_PC32	strlen
1000651d:	83 c4 10             	add    esp,0x10
10006520:	83 c0 1e             	add    eax,0x1e
10006523:	83 ec 04             	sub    esp,0x4
10006526:	6a 10                	push   0x10
10006528:	50                   	push   eax
10006529:	53                   	push   ebx
1000652a:	e8 fc ff ff ff       	call   1000652b <begin(void*)+0x1485>	1000652b: R_386_PC32	VgaText::setCursor(int, int)
1000652f:	83 c4 10             	add    esp,0x10
10006532:	a0 00 00 00 00       	mov    al,ds:0x0	10006533: R_386_32	installKey
10006537:	84 c0                	test   al,al
10006539:	0f 94 c0             	sete   al
1000653c:	84 c0                	test   al,al
1000653e:	74 02                	je     10006542 <begin(void*)+0x149c>
10006540:	eb f0                	jmp    10006532 <begin(void*)+0x148c>
10006542:	a1 00 00 00 00       	mov    eax,ds:0x0	10006543: R_386_32	term
10006547:	05 82 00 00 00       	add    eax,0x82
1000654c:	83 ec 04             	sub    esp,0x4
1000654f:	6a 10                	push   0x10
10006551:	6a 00                	push   0x0
10006553:	50                   	push   eax
10006554:	e8 fc ff ff ff       	call   10006555 <begin(void*)+0x14af>	10006555: R_386_PC32	memset
10006559:	83 c4 10             	add    esp,0x10
1000655c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000655d: R_386_32	term
10006561:	05 02 01 00 00       	add    eax,0x102
10006566:	83 ec 04             	sub    esp,0x4
10006569:	6a 10                	push   0x10
1000656b:	6a 00                	push   0x0
1000656d:	50                   	push   eax
1000656e:	e8 fc ff ff ff       	call   1000656f <begin(void*)+0x14c9>	1000656f: R_386_PC32	memset
10006573:	83 c4 10             	add    esp,0x10
10006576:	a0 00 00 00 00       	mov    al,ds:0x0	10006577: R_386_32	installKey
1000657b:	3c 0a                	cmp    al,0xa
1000657d:	0f 94 c0             	sete   al
10006580:	84 c0                	test   al,al
10006582:	0f 84 88 00 00 00    	je     10006610 <begin(void*)+0x156a>
10006588:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000658a: R_386_32	installKey
1000658f:	83 ec 04             	sub    esp,0x4
10006592:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006598:	50                   	push   eax
10006599:	8d 85 34 fa ff ff    	lea    eax,[ebp-0x5cc]
1000659f:	50                   	push   eax
100065a0:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
100065a6:	50                   	push   eax
100065a7:	e8 fc ff ff ff       	call   100065a8 <begin(void*)+0x1502>	100065a8: R_386_PC32	bcrypt_hashpw
100065ac:	83 c4 10             	add    esp,0x10
100065af:	8d 85 34 fa ff ff    	lea    eax,[ebp-0x5cc]
100065b5:	50                   	push   eax
100065b6:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100065bc:	50                   	push   eax
100065bd:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
100065c3:	50                   	push   eax
100065c4:	68 98 a5 00 10       	push   0x1000a598	100065c5: R_386_32	.text
100065c9:	e8 fc ff ff ff       	call   100065ca <begin(void*)+0x1524>	100065ca: R_386_PC32	Dbg::kprintf(char const*, ...)
100065ce:	83 c4 10             	add    esp,0x10
100065d1:	83 ec 08             	sub    esp,0x8
100065d4:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100065da:	50                   	push   eax
100065db:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
100065e1:	50                   	push   eax
100065e2:	e8 fc ff ff ff       	call   100065e3 <begin(void*)+0x153d>	100065e3: R_386_PC32	strcmp
100065e7:	83 c4 10             	add    esp,0x10
100065ea:	85 c0                	test   eax,eax
100065ec:	0f 84 de 00 00 00    	je     100066d0 <begin(void*)+0x162a>
100065f2:	83 ec 04             	sub    esp,0x4
100065f5:	68 80 00 00 00       	push   0x80
100065fa:	6a 00                	push   0x0
100065fc:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006602:	50                   	push   eax
10006603:	e8 fc ff ff ff       	call   10006604 <begin(void*)+0x155e>	10006604: R_386_PC32	memset
10006608:	83 c4 10             	add    esp,0x10
1000660b:	e9 b4 00 00 00       	jmp    100066c4 <begin(void*)+0x161e>
10006610:	a0 00 00 00 00       	mov    al,ds:0x0	10006611: R_386_32	installKey
10006615:	3c 1f                	cmp    al,0x1f
10006617:	7e 0d                	jle    10006626 <begin(void*)+0x1580>
10006619:	a0 00 00 00 00       	mov    al,ds:0x0	1000661a: R_386_32	installKey
1000661e:	3c 7f                	cmp    al,0x7f
10006620:	74 04                	je     10006626 <begin(void*)+0x1580>
10006622:	b0 01                	mov    al,0x1
10006624:	eb 02                	jmp    10006628 <begin(void*)+0x1582>
10006626:	b0 00                	mov    al,0x0
10006628:	84 c0                	test   al,al
1000662a:	74 44                	je     10006670 <begin(void*)+0x15ca>
1000662c:	a0 00 00 00 00       	mov    al,ds:0x0	1000662d: R_386_32	installKey
10006631:	88 85 7a ff ff ff    	mov    BYTE PTR [ebp-0x86],al
10006637:	c6 85 7b ff ff ff 00 	mov    BYTE PTR [ebp-0x85],0x0
1000663e:	83 ec 0c             	sub    esp,0xc
10006641:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006647:	50                   	push   eax
10006648:	e8 fc ff ff ff       	call   10006649 <begin(void*)+0x15a3>	10006649: R_386_PC32	strlen
1000664d:	83 c4 10             	add    esp,0x10
10006650:	83 f8 22             	cmp    eax,0x22
10006653:	77 6f                	ja     100066c4 <begin(void*)+0x161e>
10006655:	83 ec 08             	sub    esp,0x8
10006658:	8d 85 7a ff ff ff    	lea    eax,[ebp-0x86]
1000665e:	50                   	push   eax
1000665f:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006665:	50                   	push   eax
10006666:	e8 fc ff ff ff       	call   10006667 <begin(void*)+0x15c1>	10006667: R_386_PC32	strcat
1000666b:	83 c4 10             	add    esp,0x10
1000666e:	eb 54                	jmp    100066c4 <begin(void*)+0x161e>
10006670:	a0 00 00 00 00       	mov    al,ds:0x0	10006671: R_386_32	installKey
10006675:	3c 08                	cmp    al,0x8
10006677:	0f 94 c0             	sete   al
1000667a:	84 c0                	test   al,al
1000667c:	74 33                	je     100066b1 <begin(void*)+0x160b>
1000667e:	83 ec 0c             	sub    esp,0xc
10006681:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
10006687:	50                   	push   eax
10006688:	e8 fc ff ff ff       	call   10006689 <begin(void*)+0x15e3>	10006689: R_386_PC32	strlen
1000668d:	83 c4 10             	add    esp,0x10
10006690:	85 c0                	test   eax,eax
10006692:	74 30                	je     100066c4 <begin(void*)+0x161e>
10006694:	83 ec 0c             	sub    esp,0xc
10006697:	8d 85 86 fb ff ff    	lea    eax,[ebp-0x47a]
1000669d:	50                   	push   eax
1000669e:	e8 fc ff ff ff       	call   1000669f <begin(void*)+0x15f9>	1000669f: R_386_PC32	strlen
100066a3:	83 c4 10             	add    esp,0x10
100066a6:	48                   	dec    eax
100066a7:	c6 84 05 86 fb ff ff 00 	mov    BYTE PTR [ebp+eax*1-0x47a],0x0
100066af:	eb 13                	jmp    100066c4 <begin(void*)+0x161e>
100066b1:	a0 00 00 00 00       	mov    al,ds:0x0	100066b2: R_386_32	installKey
100066b6:	3c 1b                	cmp    al,0x1b
100066b8:	0f 94 c0             	sete   al
100066bb:	84 c0                	test   al,al
100066bd:	74 05                	je     100066c4 <begin(void*)+0x161e>
100066bf:	e9 23 f9 ff ff       	jmp    10005fe7 <begin(void*)+0xf41>
100066c4:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100066c6: R_386_32	installKey
100066cb:	e9 5b fd ff ff       	jmp    1000642b <begin(void*)+0x1385>
100066d0:	90                   	nop
100066d1:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100066d3: R_386_32	guiKeyboardHandler
100066db:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
100066e2:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100066e5:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
100066e8:	7d 69                	jge    10006753 <begin(void*)+0x16ad>
100066ea:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100066ed:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
100066f4:	85 c0                	test   eax,eax
100066f6:	74 24                	je     1000671c <begin(void*)+0x1676>
100066f8:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100066fb:	8b 84 85 84 fa ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x57c]
10006702:	83 ec 0c             	sub    esp,0xc
10006705:	50                   	push   eax
10006706:	e8 fc ff ff ff       	call   10006707 <begin(void*)+0x1661>	10006707: R_386_PC32	free
1000670b:	83 c4 10             	add    esp,0x10
1000670e:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10006711:	c7 84 85 84 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x57c],0x0
1000671c:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
1000671f:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
10006726:	85 c0                	test   eax,eax
10006728:	74 24                	je     1000674e <begin(void*)+0x16a8>
1000672a:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
1000672d:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
10006734:	83 ec 0c             	sub    esp,0xc
10006737:	50                   	push   eax
10006738:	e8 fc ff ff ff       	call   10006739 <begin(void*)+0x1693>	10006739: R_386_PC32	free
1000673d:	83 c4 10             	add    esp,0x10
10006740:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10006743:	c7 84 85 04 fb ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x4fc],0x0
1000674e:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
10006751:	eb 8f                	jmp    100066e2 <begin(void*)+0x163c>
10006753:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006755: R_386_32	VgaText::hiddenOut
1000675a:	83 ec 0c             	sub    esp,0xc
1000675d:	68 24 07 00 00       	push   0x724
10006762:	e8 fc ff ff ff       	call   10006763 <begin(void*)+0x16bd>	10006763: R_386_PC32	operator new(unsigned long)
10006767:	83 c4 10             	add    esp,0x10
1000676a:	89 c3                	mov    ebx,eax
1000676c:	6a 00                	push   0x0
1000676e:	6a 00                	push   0x0
10006770:	68 22 a2 00 10       	push   0x1000a222	10006771: R_386_32	.text
10006775:	53                   	push   ebx
10006776:	e8 fc ff ff ff       	call   10006777 <begin(void*)+0x16d1>	10006777: R_386_PC32	Process::Process(char const*, Process*, char**)
1000677b:	83 c4 10             	add    esp,0x10
1000677e:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
10006781:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
10006784:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
1000678a:	83 ec 0c             	sub    esp,0xc
1000678d:	50                   	push   eax
1000678e:	e8 fc ff ff ff       	call   1000678f <begin(void*)+0x16e9>	1000678f: R_386_PC32	setActiveTerminal(VgaText*)
10006793:	83 c4 10             	add    esp,0x10
10006796:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
1000679d:	83 7d c0 18          	cmp    DWORD PTR [ebp-0x40],0x18
100067a1:	7f 2e                	jg     100067d1 <begin(void*)+0x172b>
100067a3:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [ebp-0x44],0x0
100067aa:	83 7d bc 4f          	cmp    DWORD PTR [ebp-0x44],0x4f
100067ae:	7f 1c                	jg     100067cc <begin(void*)+0x1726>
100067b0:	83 ec 0c             	sub    esp,0xc
100067b3:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100067b6:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
100067b9:	6a 00                	push   0x0
100067bb:	6a 07                	push   0x7
100067bd:	6a 20                	push   0x20
100067bf:	e8 fc ff ff ff       	call   100067c0 <begin(void*)+0x171a>	100067c0: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
100067c4:	83 c4 20             	add    esp,0x20
100067c7:	ff 45 bc             	inc    DWORD PTR [ebp-0x44]
100067ca:	eb de                	jmp    100067aa <begin(void*)+0x1704>
100067cc:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
100067cf:	eb cc                	jmp    1000679d <begin(void*)+0x16f7>
100067d1:	83 ec 0c             	sub    esp,0xc
100067d4:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
100067d7:	e8 fc ff ff ff       	call   100067d8 <begin(void*)+0x1732>	100067d8: R_386_PC32	Process::createUserThread()
100067dc:	83 c4 10             	add    esp,0x10
100067df:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
100067e2:	8b 55 84             	mov    edx,DWORD PTR [ebp-0x7c]
100067e5:	89 c1                	mov    ecx,eax
100067e7:	83 f1 01             	xor    ecx,0x1
100067ea:	89 8d d0 f9 ff ff    	mov    DWORD PTR [ebp-0x630],ecx
100067f0:	89 d0                	mov    eax,edx
100067f2:	80 f4 00             	xor    ah,0x0
100067f5:	89 85 d4 f9 ff ff    	mov    DWORD PTR [ebp-0x62c],eax
100067fb:	8b b5 d0 f9 ff ff    	mov    esi,DWORD PTR [ebp-0x630]
10006801:	8b bd d4 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x62c]
10006807:	89 f8                	mov    eax,edi
10006809:	09 f0                	or     eax,esi
1000680b:	85 c0                	test   eax,eax
1000680d:	75 17                	jne    10006826 <begin(void*)+0x1780>
1000680f:	a1 00 00 00 00       	mov    eax,ds:0x0	10006810: R_386_32	kernelProcess
10006814:	6a 01                	push   0x1
10006816:	6a 00                	push   0x0
10006818:	68 00 00 00 00       	push   0x0	10006819: R_386_32	startGUI(void*)
1000681d:	50                   	push   eax
1000681e:	e8 fc ff ff ff       	call   1000681f <begin(void*)+0x1779>	1000681f: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10006823:	83 c4 10             	add    esp,0x10
10006826:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10006829:	8b 55 84             	mov    edx,DWORD PTR [ebp-0x7c]
1000682c:	89 c6                	mov    esi,eax
1000682e:	83 f6 02             	xor    esi,0x2
10006831:	89 b5 c8 f9 ff ff    	mov    DWORD PTR [ebp-0x638],esi
10006837:	89 d0                	mov    eax,edx
10006839:	80 f4 00             	xor    ah,0x0
1000683c:	89 85 cc f9 ff ff    	mov    DWORD PTR [ebp-0x634],eax
10006842:	8b b5 c8 f9 ff ff    	mov    esi,DWORD PTR [ebp-0x638]
10006848:	8b bd cc f9 ff ff    	mov    edi,DWORD PTR [ebp-0x634]
1000684e:	89 f8                	mov    eax,edi
10006850:	09 f0                	or     eax,esi
10006852:	85 c0                	test   eax,eax
10006854:	75 17                	jne    1000686d <begin(void*)+0x17c7>
10006856:	a1 00 00 00 00       	mov    eax,ds:0x0	10006857: R_386_32	kernelProcess
1000685b:	6a 01                	push   0x1
1000685d:	6a 00                	push   0x0
1000685f:	68 00 00 00 00       	push   0x0	10006860: R_386_32	startGUIVESA(void*)
10006864:	50                   	push   eax
10006865:	e8 fc ff ff ff       	call   10006866 <begin(void*)+0x17c0>	10006866: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
1000686a:	83 c4 10             	add    esp,0x10
1000686d:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
10006870:	8b 00                	mov    eax,DWORD PTR [eax]
10006872:	83 ec 04             	sub    esp,0x4
10006875:	6a 00                	push   0x0
10006877:	8d 95 7c ff ff ff    	lea    edx,[ebp-0x84]
1000687d:	52                   	push   edx
1000687e:	50                   	push   eax
1000687f:	e8 fc ff ff ff       	call   10006880 <begin(void*)+0x17da>	10006880: R_386_PC32	waitTask(int, int*, int)
10006884:	83 c4 10             	add    esp,0x10
10006887:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10006889: R_386_32	Krnl::computer
1000688d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000688e: R_386_32	Krnl::computer
10006892:	8b 00                	mov    eax,DWORD PTR [eax]
10006894:	83 c0 0c             	add    eax,0xc
10006897:	8b 00                	mov    eax,DWORD PTR [eax]
10006899:	6a 00                	push   0x0
1000689b:	6a 00                	push   0x0
1000689d:	6a 00                	push   0x0
1000689f:	52                   	push   edx
100068a0:	ff d0                	call   eax
100068a2:	83 c4 10             	add    esp,0x10
100068a5:	83 ec 0c             	sub    esp,0xc
100068a8:	68 b8 a5 00 10       	push   0x1000a5b8	100068a9: R_386_32	.text
100068ad:	e8 fc ff ff ff       	call   100068ae <begin(void*)+0x1808>	100068ae: R_386_PC32	KePanic(char const*)
100068b2:	83 c4 10             	add    esp,0x10
100068b5:	eb fe                	jmp    100068b5 <begin(void*)+0x180f>

100068b7 <clean>:
100068b7:	57                   	push   edi
100068b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
100068bc:	b0 00                	mov    al,0x0
100068be:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
100068c2:	f3 aa                	rep stos BYTE PTR es:[edi],al
100068c4:	5f                   	pop    edi
100068c5:	c3                   	ret    

100068c6 <BF_decode>:
100068c6:	55                   	push   ebp
100068c7:	57                   	push   edi
100068c8:	56                   	push   esi
100068c9:	53                   	push   ebx
100068ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100068ce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100068d2:	89 d6                	mov    esi,edx
100068d4:	03 74 24 1c          	add    esi,DWORD PTR [esp+0x1c]
100068d8:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
100068db:	83 e8 20             	sub    eax,0x20
100068de:	83 f8 5f             	cmp    eax,0x5f
100068e1:	0f 87 a3 00 00 00    	ja     1000698a <BF_decode+0xc4>
100068e7:	8a 80 c0 b7 00 10    	mov    al,BYTE PTR [eax+0x1000b7c0]	100068e9: R_386_32	.data
100068ed:	3c 3f                	cmp    al,0x3f
100068ef:	0f 87 9f 00 00 00    	ja     10006994 <BF_decode+0xce>
100068f5:	0f b6 4b 01          	movzx  ecx,BYTE PTR [ebx+0x1]
100068f9:	83 e9 20             	sub    ecx,0x20
100068fc:	83 f9 5f             	cmp    ecx,0x5f
100068ff:	0f 87 96 00 00 00    	ja     1000699b <BF_decode+0xd5>
10006905:	8a 89 c0 b7 00 10    	mov    cl,BYTE PTR [ecx+0x1000b7c0]	10006907: R_386_32	.data
1000690b:	0f b6 f9             	movzx  edi,cl
1000690e:	83 ff 3f             	cmp    edi,0x3f
10006911:	0f 87 8b 00 00 00    	ja     100069a2 <BF_decode+0xdc>
10006917:	c1 e0 02             	shl    eax,0x2
1000691a:	c1 ef 04             	shr    edi,0x4
1000691d:	09 f8                	or     eax,edi
1000691f:	88 02                	mov    BYTE PTR [edx],al
10006921:	89 d7                	mov    edi,edx
10006923:	8d 42 01             	lea    eax,[edx+0x1]
10006926:	39 c6                	cmp    esi,eax
10006928:	76 7f                	jbe    100069a9 <BF_decode+0xe3>
1000692a:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
1000692e:	83 e8 20             	sub    eax,0x20
10006931:	83 f8 5f             	cmp    eax,0x5f
10006934:	77 7a                	ja     100069b0 <BF_decode+0xea>
10006936:	8a 80 c0 b7 00 10    	mov    al,BYTE PTR [eax+0x1000b7c0]	10006938: R_386_32	.data
1000693c:	0f b6 e8             	movzx  ebp,al
1000693f:	83 fd 3f             	cmp    ebp,0x3f
10006942:	77 73                	ja     100069b7 <BF_decode+0xf1>
10006944:	c1 e1 04             	shl    ecx,0x4
10006947:	c1 ed 02             	shr    ebp,0x2
1000694a:	09 e9                	or     ecx,ebp
1000694c:	88 4a 01             	mov    BYTE PTR [edx+0x1],cl
1000694f:	8d 52 02             	lea    edx,[edx+0x2]
10006952:	39 d6                	cmp    esi,edx
10006954:	76 68                	jbe    100069be <BF_decode+0xf8>
10006956:	83 c3 04             	add    ebx,0x4
10006959:	0f b6 53 ff          	movzx  edx,BYTE PTR [ebx-0x1]
1000695d:	83 ea 20             	sub    edx,0x20
10006960:	83 fa 5f             	cmp    edx,0x5f
10006963:	77 60                	ja     100069c5 <BF_decode+0xff>
10006965:	8a 8a c0 b7 00 10    	mov    cl,BYTE PTR [edx+0x1000b7c0]	10006967: R_386_32	.data
1000696b:	80 f9 3f             	cmp    cl,0x3f
1000696e:	77 5c                	ja     100069cc <BF_decode+0x106>
10006970:	8d 57 03             	lea    edx,[edi+0x3]
10006973:	c1 e0 06             	shl    eax,0x6
10006976:	09 c1                	or     ecx,eax
10006978:	88 4a ff             	mov    BYTE PTR [edx-0x1],cl
1000697b:	39 d6                	cmp    esi,edx
1000697d:	0f 87 55 ff ff ff    	ja     100068d8 <BF_decode+0x12>
10006983:	b8 00 00 00 00       	mov    eax,0x0
10006988:	eb 05                	jmp    1000698f <BF_decode+0xc9>
1000698a:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000698f:	5b                   	pop    ebx
10006990:	5e                   	pop    esi
10006991:	5f                   	pop    edi
10006992:	5d                   	pop    ebp
10006993:	c3                   	ret    
10006994:	b8 ff ff ff ff       	mov    eax,0xffffffff
10006999:	eb f4                	jmp    1000698f <BF_decode+0xc9>
1000699b:	b8 ff ff ff ff       	mov    eax,0xffffffff
100069a0:	eb ed                	jmp    1000698f <BF_decode+0xc9>
100069a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
100069a7:	eb e6                	jmp    1000698f <BF_decode+0xc9>
100069a9:	b8 00 00 00 00       	mov    eax,0x0
100069ae:	eb df                	jmp    1000698f <BF_decode+0xc9>
100069b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
100069b5:	eb d8                	jmp    1000698f <BF_decode+0xc9>
100069b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
100069bc:	eb d1                	jmp    1000698f <BF_decode+0xc9>
100069be:	b8 00 00 00 00       	mov    eax,0x0
100069c3:	eb ca                	jmp    1000698f <BF_decode+0xc9>
100069c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
100069ca:	eb c3                	jmp    1000698f <BF_decode+0xc9>
100069cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
100069d1:	eb bc                	jmp    1000698f <BF_decode+0xc9>

100069d3 <BF_encode>:
100069d3:	55                   	push   ebp
100069d4:	57                   	push   edi
100069d5:	56                   	push   esi
100069d6:	53                   	push   ebx
100069d7:	83 ec 04             	sub    esp,0x4
100069da:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
100069de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100069e2:	89 c7                	mov    edi,eax
100069e4:	03 7c 24 20          	add    edi,DWORD PTR [esp+0x20]
100069e8:	89 3c 24             	mov    DWORD PTR [esp],edi
100069eb:	0f b6 10             	movzx  edx,BYTE PTR [eax]
100069ee:	89 d6                	mov    esi,edx
100069f0:	c1 ee 02             	shr    esi,0x2
100069f3:	8a 9e 60 b7 00 10    	mov    bl,BYTE PTR [esi+0x1000b760]	100069f5: R_386_32	.data
100069f9:	88 19                	mov    BYTE PTR [ecx],bl
100069fb:	c1 e2 04             	shl    edx,0x4
100069fe:	83 e2 30             	and    edx,0x30
10006a01:	89 c7                	mov    edi,eax
10006a03:	8d 70 01             	lea    esi,[eax+0x1]
10006a06:	39 34 24             	cmp    DWORD PTR [esp],esi
10006a09:	76 51                	jbe    10006a5c <BF_encode+0x89>
10006a0b:	0f b6 70 01          	movzx  esi,BYTE PTR [eax+0x1]
10006a0f:	89 f5                	mov    ebp,esi
10006a11:	c1 ed 04             	shr    ebp,0x4
10006a14:	09 ea                	or     edx,ebp
10006a16:	8a 9a 60 b7 00 10    	mov    bl,BYTE PTR [edx+0x1000b760]	10006a18: R_386_32	.data
10006a1c:	88 59 01             	mov    BYTE PTR [ecx+0x1],bl
10006a1f:	c1 e6 02             	shl    esi,0x2
10006a22:	83 e6 3c             	and    esi,0x3c
10006a25:	83 c0 02             	add    eax,0x2
10006a28:	39 04 24             	cmp    DWORD PTR [esp],eax
10006a2b:	76 40                	jbe    10006a6d <BF_encode+0x9a>
10006a2d:	8d 47 03             	lea    eax,[edi+0x3]
10006a30:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
10006a33:	0f b6 d3             	movzx  edx,bl
10006a36:	c1 ea 06             	shr    edx,0x6
10006a39:	09 f2                	or     edx,esi
10006a3b:	8a 92 60 b7 00 10    	mov    dl,BYTE PTR [edx+0x1000b760]	10006a3d: R_386_32	.data
10006a41:	88 51 02             	mov    BYTE PTR [ecx+0x2],dl
10006a44:	83 c1 04             	add    ecx,0x4
10006a47:	89 da                	mov    edx,ebx
10006a49:	83 e2 3f             	and    edx,0x3f
10006a4c:	8a 9a 60 b7 00 10    	mov    bl,BYTE PTR [edx+0x1000b760]	10006a4e: R_386_32	.data
10006a52:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
10006a55:	39 04 24             	cmp    DWORD PTR [esp],eax
10006a58:	77 91                	ja     100069eb <BF_encode+0x18>
10006a5a:	eb 09                	jmp    10006a65 <BF_encode+0x92>
10006a5c:	8a 82 60 b7 00 10    	mov    al,BYTE PTR [edx+0x1000b760]	10006a5e: R_386_32	.data
10006a62:	88 41 01             	mov    BYTE PTR [ecx+0x1],al
10006a65:	83 c4 04             	add    esp,0x4
10006a68:	5b                   	pop    ebx
10006a69:	5e                   	pop    esi
10006a6a:	5f                   	pop    edi
10006a6b:	5d                   	pop    ebp
10006a6c:	c3                   	ret    
10006a6d:	8a 86 60 b7 00 10    	mov    al,BYTE PTR [esi+0x1000b760]	10006a6f: R_386_32	.data
10006a73:	88 41 02             	mov    BYTE PTR [ecx+0x2],al
10006a76:	eb ed                	jmp    10006a65 <BF_encode+0x92>

10006a78 <BF_swap>:
10006a78:	53                   	push   ebx
10006a79:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10006a7d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10006a81:	80 3d 20 b8 00 10 00 	cmp    BYTE PTR ds:0x1000b820,0x0	10006a83: R_386_32	.data
10006a88:	74 23                	je     10006aad <BF_swap+0x35>
10006a8a:	8b 01                	mov    eax,DWORD PTR [ecx]
10006a8c:	c1 c0 10             	rol    eax,0x10
10006a8f:	83 c1 04             	add    ecx,0x4
10006a92:	89 c2                	mov    edx,eax
10006a94:	c1 e2 08             	shl    edx,0x8
10006a97:	81 e2 00 ff 00 ff    	and    edx,0xff00ff00
10006a9d:	c1 e8 08             	shr    eax,0x8
10006aa0:	25 ff 00 ff 00       	and    eax,0xff00ff
10006aa5:	09 d0                	or     eax,edx
10006aa7:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
10006aaa:	4b                   	dec    ebx
10006aab:	75 dd                	jne    10006a8a <BF_swap+0x12>
10006aad:	5b                   	pop    ebx
10006aae:	c3                   	ret    

10006aaf <BF_set_key>:
10006aaf:	55                   	push   ebp
10006ab0:	57                   	push   edi
10006ab1:	56                   	push   esi
10006ab2:	53                   	push   ebx
10006ab3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10006ab7:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
10006abb:	89 f9                	mov    ecx,edi
10006abd:	be 00 00 00 00       	mov    esi,0x0
10006ac2:	eb 2d                	jmp    10006af1 <BF_set_key+0x42>
10006ac4:	89 f9                	mov    ecx,edi
10006ac6:	4a                   	dec    edx
10006ac7:	74 10                	je     10006ad9 <BF_set_key+0x2a>
10006ac9:	c1 e0 08             	shl    eax,0x8
10006acc:	0f b6 19             	movzx  ebx,BYTE PTR [ecx]
10006acf:	09 d8                	or     eax,ebx
10006ad1:	80 39 00             	cmp    BYTE PTR [ecx],0x0
10006ad4:	74 ee                	je     10006ac4 <BF_set_key+0x15>
10006ad6:	41                   	inc    ecx
10006ad7:	eb ed                	jmp    10006ac6 <BF_set_key+0x17>
10006ad9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10006add:	89 04 b2             	mov    DWORD PTR [edx+esi*4],eax
10006ae0:	33 04 b5 00 b7 00 10 	xor    eax,DWORD PTR [esi*4+0x1000b700]	10006ae3: R_386_32	.data
10006ae7:	89 44 b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],eax
10006aeb:	46                   	inc    esi
10006aec:	83 fe 12             	cmp    esi,0x12
10006aef:	74 0c                	je     10006afd <BF_set_key+0x4e>
10006af1:	ba 04 00 00 00       	mov    edx,0x4
10006af6:	b8 00 00 00 00       	mov    eax,0x0
10006afb:	eb cc                	jmp    10006ac9 <BF_set_key+0x1a>
10006afd:	5b                   	pop    ebx
10006afe:	5e                   	pop    esi
10006aff:	5f                   	pop    edi
10006b00:	5d                   	pop    ebp
10006b01:	c3                   	ret    

10006b02 <_crypt_blowfish_rn>:
10006b02:	55                   	push   ebp
10006b03:	57                   	push   edi
10006b04:	56                   	push   esi
10006b05:	53                   	push   ebx
10006b06:	81 ec 00 11 00 00    	sub    esp,0x1100
10006b0c:	83 bc 24 20 11 00 00 3c 	cmp    DWORD PTR [esp+0x1120],0x3c
10006b14:	0f 8e 9e 2d 00 00    	jle    100098b8 <_crypt_blowfish_rn+0x2db6>
10006b1a:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
10006b21:	80 38 24             	cmp    BYTE PTR [eax],0x24
10006b24:	0f 85 a8 2d 00 00    	jne    100098d2 <_crypt_blowfish_rn+0x2dd0>
10006b2a:	80 78 01 32          	cmp    BYTE PTR [eax+0x1],0x32
10006b2e:	0f 85 9e 2d 00 00    	jne    100098d2 <_crypt_blowfish_rn+0x2dd0>
10006b34:	80 78 02 61          	cmp    BYTE PTR [eax+0x2],0x61
10006b38:	0f 85 94 2d 00 00    	jne    100098d2 <_crypt_blowfish_rn+0x2dd0>
10006b3e:	80 78 03 24          	cmp    BYTE PTR [eax+0x3],0x24
10006b42:	0f 85 8a 2d 00 00    	jne    100098d2 <_crypt_blowfish_rn+0x2dd0>
10006b48:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10006b4b:	8d 50 d0             	lea    edx,[eax-0x30]
10006b4e:	80 fa 03             	cmp    dl,0x3
10006b51:	0f 87 7b 2d 00 00    	ja     100098d2 <_crypt_blowfish_rn+0x2dd0>
10006b57:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
10006b5e:	8a 53 05             	mov    dl,BYTE PTR [ebx+0x5]
10006b61:	8d 4a d0             	lea    ecx,[edx-0x30]
10006b64:	80 f9 09             	cmp    cl,0x9
10006b67:	0f 87 65 2d 00 00    	ja     100098d2 <_crypt_blowfish_rn+0x2dd0>
10006b6d:	3c 33                	cmp    al,0x33
10006b6f:	0f 84 54 2d 00 00    	je     100098c9 <_crypt_blowfish_rn+0x2dc7>
10006b75:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
10006b7c:	80 7b 06 24          	cmp    BYTE PTR [ebx+0x6],0x24
10006b80:	0f 85 4c 2d 00 00    	jne    100098d2 <_crypt_blowfish_rn+0x2dd0>
10006b86:	0f be c0             	movsx  eax,al
10006b89:	8d 84 80 10 ff ff ff 	lea    eax,[eax+eax*4-0xf0]
10006b90:	01 c0                	add    eax,eax
10006b92:	0f be d2             	movsx  edx,dl
10006b95:	8d 4c 10 d0          	lea    ecx,[eax+edx*1-0x30]
10006b99:	b8 01 00 00 00       	mov    eax,0x1
10006b9e:	d3 e0                	shl    eax,cl
10006ba0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10006ba4:	83 f8 0f             	cmp    eax,0xf
10006ba7:	0f 86 3f 2d 00 00    	jbe    100098ec <_crypt_blowfish_rn+0x2dea>
10006bad:	6a 10                	push   0x10
10006baf:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
10006bb6:	83 c0 07             	add    eax,0x7
10006bb9:	50                   	push   eax
10006bba:	8d 84 24 f0 10 00 00 	lea    eax,[esp+0x10f0]
10006bc1:	50                   	push   eax
10006bc2:	e8 ff fc ff ff       	call   100068c6 <BF_decode>
10006bc7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10006bcb:	83 c4 0c             	add    esp,0xc
10006bce:	85 c0                	test   eax,eax
10006bd0:	0f 85 16 2d 00 00    	jne    100098ec <_crypt_blowfish_rn+0x2dea>
10006bd6:	6a 04                	push   0x4
10006bd8:	8d 5c 24 5c          	lea    ebx,[esp+0x5c]
10006bdc:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
10006be3:	50                   	push   eax
10006be4:	e8 8f fe ff ff       	call   10006a78 <BF_swap>
10006be9:	8d 84 24 60 10 00 00 	lea    eax,[esp+0x1060]
10006bf0:	50                   	push   eax
10006bf1:	8d 84 24 ac 10 00 00 	lea    eax,[esp+0x10ac]
10006bf8:	50                   	push   eax
10006bf9:	ff b4 24 24 11 00 00 	push   DWORD PTR [esp+0x1124]
10006c00:	e8 aa fe ff ff       	call   10006aaf <BF_set_key>
10006c05:	be 00 a7 00 10       	mov    esi,0x1000a700	10006c06: R_386_32	.data
10006c0a:	b9 00 04 00 00       	mov    ecx,0x400
10006c0f:	89 df                	mov    edi,ebx
10006c11:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006c13:	83 c4 14             	add    esp,0x14
10006c16:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10006c1a:	89 04 24             	mov    DWORD PTR [esp],eax
10006c1d:	bb 00 00 00 00       	mov    ebx,0x0
10006c22:	b8 00 00 00 00       	mov    eax,0x0
10006c27:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10006c2a:	83 e1 02             	and    ecx,0x2
10006c2d:	8d 91 24 04 00 00    	lea    edx,[ecx+0x424]
10006c33:	8b 54 94 58          	mov    edx,DWORD PTR [esp+edx*4+0x58]
10006c37:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
10006c3e:	31 c2                	xor    edx,eax
10006c40:	89 d7                	mov    edi,edx
10006c42:	c1 ef 06             	shr    edi,0x6
10006c45:	89 d5                	mov    ebp,edx
10006c47:	c1 ed 0e             	shr    ebp,0xe
10006c4a:	89 d0                	mov    eax,edx
10006c4c:	c1 e8 16             	shr    eax,0x16
10006c4f:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10006c56:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006c5c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006c62:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006c68:	25 fc 03 00 00       	and    eax,0x3fc
10006c6d:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10006c71:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10006c78:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10006c7f:	81 c1 25 04 00 00    	add    ecx,0x425
10006c85:	8b 4c 8c 58          	mov    ecx,DWORD PTR [esp+ecx*4+0x58]
10006c89:	33 8c 24 5c 10 00 00 	xor    ecx,DWORD PTR [esp+0x105c]
10006c90:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10006c97:	31 c8                	xor    eax,ecx
10006c99:	31 c3                	xor    ebx,eax
10006c9b:	89 d8                	mov    eax,ebx
10006c9d:	c1 e8 06             	shr    eax,0x6
10006ca0:	89 c1                	mov    ecx,eax
10006ca2:	89 df                	mov    edi,ebx
10006ca4:	c1 ef 0e             	shr    edi,0xe
10006ca7:	89 d8                	mov    eax,ebx
10006ca9:	c1 e8 16             	shr    eax,0x16
10006cac:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10006cb3:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006cb9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006cbf:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006cc5:	25 fc 03 00 00       	and    eax,0x3fc
10006cca:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10006cce:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10006cd5:	33 84 0c 58 08 00 00 	xor    eax,DWORD PTR [esp+ecx*1+0x858]
10006cdc:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
10006ce3:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10006cea:	89 c1                	mov    ecx,eax
10006cec:	31 d1                	xor    ecx,edx
10006cee:	89 ca                	mov    edx,ecx
10006cf0:	c1 ea 06             	shr    edx,0x6
10006cf3:	89 cf                	mov    edi,ecx
10006cf5:	c1 ef 0e             	shr    edi,0xe
10006cf8:	89 c8                	mov    eax,ecx
10006cfa:	c1 e8 16             	shr    eax,0x16
10006cfd:	8d 34 8d 00 00 00 00 	lea    esi,[ecx*4+0x0]
10006d04:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006d0a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10006d10:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006d16:	25 fc 03 00 00       	and    eax,0x3fc
10006d1b:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10006d1f:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10006d26:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10006d2d:	33 9c 24 64 10 00 00 	xor    ebx,DWORD PTR [esp+0x1064]
10006d34:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10006d3b:	89 c2                	mov    edx,eax
10006d3d:	31 da                	xor    edx,ebx
10006d3f:	89 d6                	mov    esi,edx
10006d41:	c1 ee 06             	shr    esi,0x6
10006d44:	89 d7                	mov    edi,edx
10006d46:	c1 ef 0e             	shr    edi,0xe
10006d49:	89 d0                	mov    eax,edx
10006d4b:	c1 e8 16             	shr    eax,0x16
10006d4e:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10006d55:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006d5b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006d61:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006d67:	25 fc 03 00 00       	and    eax,0x3fc
10006d6c:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10006d70:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10006d77:	33 84 34 58 08 00 00 	xor    eax,DWORD PTR [esp+esi*1+0x858]
10006d7e:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
10006d85:	03 84 1c 58 0c 00 00 	add    eax,DWORD PTR [esp+ebx*1+0xc58]
10006d8c:	31 c8                	xor    eax,ecx
10006d8e:	89 c3                	mov    ebx,eax
10006d90:	c1 eb 06             	shr    ebx,0x6
10006d93:	89 c7                	mov    edi,eax
10006d95:	c1 ef 0e             	shr    edi,0xe
10006d98:	89 c6                	mov    esi,eax
10006d9a:	c1 ee 16             	shr    esi,0x16
10006d9d:	89 f1                	mov    ecx,esi
10006d9f:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006da6:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006dac:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006db2:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006db8:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006dbe:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006dc2:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006dc9:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10006dd0:	33 94 24 6c 10 00 00 	xor    edx,DWORD PTR [esp+0x106c]
10006dd7:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10006dde:	31 ca                	xor    edx,ecx
10006de0:	89 d6                	mov    esi,edx
10006de2:	c1 ee 06             	shr    esi,0x6
10006de5:	89 d7                	mov    edi,edx
10006de7:	c1 ef 0e             	shr    edi,0xe
10006dea:	89 d3                	mov    ebx,edx
10006dec:	c1 eb 16             	shr    ebx,0x16
10006def:	89 d9                	mov    ecx,ebx
10006df1:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10006df8:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006dfe:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006e04:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006e0a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006e10:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006e14:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006e1b:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10006e22:	33 84 24 70 10 00 00 	xor    eax,DWORD PTR [esp+0x1070]
10006e29:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10006e30:	31 c8                	xor    eax,ecx
10006e32:	89 c6                	mov    esi,eax
10006e34:	c1 ee 06             	shr    esi,0x6
10006e37:	89 c7                	mov    edi,eax
10006e39:	c1 ef 0e             	shr    edi,0xe
10006e3c:	89 c3                	mov    ebx,eax
10006e3e:	c1 eb 16             	shr    ebx,0x16
10006e41:	89 d9                	mov    ecx,ebx
10006e43:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10006e4a:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006e50:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006e56:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006e5c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006e62:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006e66:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006e6d:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10006e74:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10006e7b:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10006e82:	31 ca                	xor    edx,ecx
10006e84:	89 d6                	mov    esi,edx
10006e86:	c1 ee 06             	shr    esi,0x6
10006e89:	89 d7                	mov    edi,edx
10006e8b:	c1 ef 0e             	shr    edi,0xe
10006e8e:	89 d3                	mov    ebx,edx
10006e90:	c1 eb 16             	shr    ebx,0x16
10006e93:	89 d9                	mov    ecx,ebx
10006e95:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10006e9c:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006ea2:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006ea8:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006eae:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006eb4:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006eb8:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006ebf:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10006ec6:	33 84 24 78 10 00 00 	xor    eax,DWORD PTR [esp+0x1078]
10006ecd:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10006ed4:	31 c8                	xor    eax,ecx
10006ed6:	89 c6                	mov    esi,eax
10006ed8:	c1 ee 06             	shr    esi,0x6
10006edb:	89 c7                	mov    edi,eax
10006edd:	c1 ef 0e             	shr    edi,0xe
10006ee0:	89 c3                	mov    ebx,eax
10006ee2:	c1 eb 16             	shr    ebx,0x16
10006ee5:	89 d9                	mov    ecx,ebx
10006ee7:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10006eee:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006ef4:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006efa:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006f00:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006f06:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006f0a:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006f11:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10006f18:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10006f1f:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10006f26:	31 ca                	xor    edx,ecx
10006f28:	89 d6                	mov    esi,edx
10006f2a:	c1 ee 06             	shr    esi,0x6
10006f2d:	89 d7                	mov    edi,edx
10006f2f:	c1 ef 0e             	shr    edi,0xe
10006f32:	89 d3                	mov    ebx,edx
10006f34:	c1 eb 16             	shr    ebx,0x16
10006f37:	89 d9                	mov    ecx,ebx
10006f39:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10006f40:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006f46:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006f4c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006f52:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006f58:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006f5c:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006f63:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10006f6a:	33 84 24 80 10 00 00 	xor    eax,DWORD PTR [esp+0x1080]
10006f71:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10006f78:	31 c8                	xor    eax,ecx
10006f7a:	89 c6                	mov    esi,eax
10006f7c:	c1 ee 06             	shr    esi,0x6
10006f7f:	89 c7                	mov    edi,eax
10006f81:	c1 ef 0e             	shr    edi,0xe
10006f84:	89 c3                	mov    ebx,eax
10006f86:	c1 eb 16             	shr    ebx,0x16
10006f89:	89 d9                	mov    ecx,ebx
10006f8b:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10006f92:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006f98:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006f9e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006fa4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006faa:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006fae:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006fb5:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10006fbc:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10006fc3:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10006fca:	31 ca                	xor    edx,ecx
10006fcc:	89 d6                	mov    esi,edx
10006fce:	c1 ee 06             	shr    esi,0x6
10006fd1:	89 d7                	mov    edi,edx
10006fd3:	c1 ef 0e             	shr    edi,0xe
10006fd6:	89 d3                	mov    ebx,edx
10006fd8:	c1 eb 16             	shr    ebx,0x16
10006fdb:	89 d9                	mov    ecx,ebx
10006fdd:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10006fe4:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006fea:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006ff0:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006ff6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006ffc:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007000:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007007:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
1000700e:	33 84 24 88 10 00 00 	xor    eax,DWORD PTR [esp+0x1088]
10007015:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
1000701c:	31 c8                	xor    eax,ecx
1000701e:	89 c6                	mov    esi,eax
10007020:	c1 ee 06             	shr    esi,0x6
10007023:	89 c7                	mov    edi,eax
10007025:	c1 ef 0e             	shr    edi,0xe
10007028:	89 c3                	mov    ebx,eax
1000702a:	c1 eb 16             	shr    ebx,0x16
1000702d:	89 d9                	mov    ecx,ebx
1000702f:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007036:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000703c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007042:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007048:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000704e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007052:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007059:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007060:	33 94 24 8c 10 00 00 	xor    edx,DWORD PTR [esp+0x108c]
10007067:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
1000706e:	31 ca                	xor    edx,ecx
10007070:	89 d3                	mov    ebx,edx
10007072:	c1 eb 06             	shr    ebx,0x6
10007075:	89 d7                	mov    edi,edx
10007077:	c1 ef 0e             	shr    edi,0xe
1000707a:	89 d6                	mov    esi,edx
1000707c:	c1 ee 16             	shr    esi,0x16
1000707f:	89 f1                	mov    ecx,esi
10007081:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007088:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000708e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007094:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000709a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100070a0:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100070a4:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100070ab:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
100070b2:	33 84 24 90 10 00 00 	xor    eax,DWORD PTR [esp+0x1090]
100070b9:	89 cb                	mov    ebx,ecx
100070bb:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100070c2:	31 d8                	xor    eax,ebx
100070c4:	89 c6                	mov    esi,eax
100070c6:	c1 ee 06             	shr    esi,0x6
100070c9:	89 c7                	mov    edi,eax
100070cb:	c1 ef 0e             	shr    edi,0xe
100070ce:	89 c3                	mov    ebx,eax
100070d0:	c1 eb 16             	shr    ebx,0x16
100070d3:	89 d9                	mov    ecx,ebx
100070d5:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
100070dc:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100070e2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100070e8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100070ee:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100070f4:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100070f8:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100070ff:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007106:	33 94 24 94 10 00 00 	xor    edx,DWORD PTR [esp+0x1094]
1000710d:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007114:	31 ca                	xor    edx,ecx
10007116:	89 d3                	mov    ebx,edx
10007118:	c1 eb 06             	shr    ebx,0x6
1000711b:	89 d7                	mov    edi,edx
1000711d:	c1 ef 0e             	shr    edi,0xe
10007120:	89 d6                	mov    esi,edx
10007122:	c1 ee 16             	shr    esi,0x16
10007125:	89 f1                	mov    ecx,esi
10007127:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000712e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007134:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000713a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007140:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007146:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000714a:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007151:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10007158:	33 84 24 98 10 00 00 	xor    eax,DWORD PTR [esp+0x1098]
1000715f:	89 cb                	mov    ebx,ecx
10007161:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007168:	31 c3                	xor    ebx,eax
1000716a:	89 d0                	mov    eax,edx
1000716c:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10007173:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10007176:	89 84 8c 58 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x1058],eax
1000717d:	89 9c 8c 5c 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x105c],ebx
10007184:	83 c1 02             	add    ecx,0x2
10007187:	89 0c 24             	mov    DWORD PTR [esp],ecx
1000718a:	83 f9 12             	cmp    ecx,0x12
1000718d:	0f 85 94 fa ff ff    	jne    10006c27 <_crypt_blowfish_rn+0x125>
10007193:	8d 4c 24 58          	lea    ecx,[esp+0x58]
10007197:	83 c1 10             	add    ecx,0x10
1000719a:	8b 94 24 f0 10 00 00 	mov    edx,DWORD PTR [esp+0x10f0]
100071a1:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
100071a8:	31 c2                	xor    edx,eax
100071aa:	89 d7                	mov    edi,edx
100071ac:	c1 ef 06             	shr    edi,0x6
100071af:	89 d5                	mov    ebp,edx
100071b1:	c1 ed 0e             	shr    ebp,0xe
100071b4:	89 d0                	mov    eax,edx
100071b6:	c1 e8 16             	shr    eax,0x16
100071b9:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100071c0:	81 e6 fc 03 00 00    	and    esi,0x3fc
100071c6:	81 e7 fc 03 00 00    	and    edi,0x3fc
100071cc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100071d2:	25 fc 03 00 00       	and    eax,0x3fc
100071d7:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100071db:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100071e2:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100071e9:	89 c7                	mov    edi,eax
100071eb:	8b 84 24 f4 10 00 00 	mov    eax,DWORD PTR [esp+0x10f4]
100071f2:	33 84 24 5c 10 00 00 	xor    eax,DWORD PTR [esp+0x105c]
100071f9:	03 bc 34 58 0c 00 00 	add    edi,DWORD PTR [esp+esi*1+0xc58]
10007200:	31 f8                	xor    eax,edi
10007202:	31 d8                	xor    eax,ebx
10007204:	89 c7                	mov    edi,eax
10007206:	c1 ef 06             	shr    edi,0x6
10007209:	89 c5                	mov    ebp,eax
1000720b:	c1 ed 0e             	shr    ebp,0xe
1000720e:	89 c3                	mov    ebx,eax
10007210:	c1 eb 16             	shr    ebx,0x16
10007213:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000721a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007220:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007226:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000722c:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007232:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007236:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000723d:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007244:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
1000724b:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007252:	31 da                	xor    edx,ebx
10007254:	89 d7                	mov    edi,edx
10007256:	c1 ef 06             	shr    edi,0x6
10007259:	89 d5                	mov    ebp,edx
1000725b:	c1 ed 0e             	shr    ebp,0xe
1000725e:	89 d3                	mov    ebx,edx
10007260:	c1 eb 16             	shr    ebx,0x16
10007263:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000726a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007270:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007276:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000727c:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007282:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007286:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000728d:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007294:	33 84 24 64 10 00 00 	xor    eax,DWORD PTR [esp+0x1064]
1000729b:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100072a2:	31 d8                	xor    eax,ebx
100072a4:	89 c7                	mov    edi,eax
100072a6:	c1 ef 06             	shr    edi,0x6
100072a9:	89 c5                	mov    ebp,eax
100072ab:	c1 ed 0e             	shr    ebp,0xe
100072ae:	89 c3                	mov    ebx,eax
100072b0:	c1 eb 16             	shr    ebx,0x16
100072b3:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100072ba:	81 e6 fc 03 00 00    	and    esi,0x3fc
100072c0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100072c6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100072cc:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100072d2:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100072d6:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100072dd:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100072e4:	33 94 24 68 10 00 00 	xor    edx,DWORD PTR [esp+0x1068]
100072eb:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100072f2:	31 da                	xor    edx,ebx
100072f4:	89 d7                	mov    edi,edx
100072f6:	c1 ef 06             	shr    edi,0x6
100072f9:	89 d5                	mov    ebp,edx
100072fb:	c1 ed 0e             	shr    ebp,0xe
100072fe:	89 d3                	mov    ebx,edx
10007300:	c1 eb 16             	shr    ebx,0x16
10007303:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000730a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007310:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007316:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000731c:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007322:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007326:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000732d:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007334:	33 84 24 6c 10 00 00 	xor    eax,DWORD PTR [esp+0x106c]
1000733b:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007342:	31 d8                	xor    eax,ebx
10007344:	89 c7                	mov    edi,eax
10007346:	c1 ef 06             	shr    edi,0x6
10007349:	89 c5                	mov    ebp,eax
1000734b:	c1 ed 0e             	shr    ebp,0xe
1000734e:	89 c3                	mov    ebx,eax
10007350:	c1 eb 16             	shr    ebx,0x16
10007353:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000735a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007360:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007366:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000736c:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007372:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007376:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000737d:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007384:	33 94 24 70 10 00 00 	xor    edx,DWORD PTR [esp+0x1070]
1000738b:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007392:	31 da                	xor    edx,ebx
10007394:	89 d7                	mov    edi,edx
10007396:	c1 ef 06             	shr    edi,0x6
10007399:	89 d5                	mov    ebp,edx
1000739b:	c1 ed 0e             	shr    ebp,0xe
1000739e:	89 d3                	mov    ebx,edx
100073a0:	c1 eb 16             	shr    ebx,0x16
100073a3:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100073aa:	81 e6 fc 03 00 00    	and    esi,0x3fc
100073b0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100073b6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100073bc:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100073c2:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100073c6:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100073cd:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100073d4:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
100073db:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100073e2:	31 d8                	xor    eax,ebx
100073e4:	89 c7                	mov    edi,eax
100073e6:	c1 ef 06             	shr    edi,0x6
100073e9:	89 c5                	mov    ebp,eax
100073eb:	c1 ed 0e             	shr    ebp,0xe
100073ee:	89 c3                	mov    ebx,eax
100073f0:	c1 eb 16             	shr    ebx,0x16
100073f3:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100073fa:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007400:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007406:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000740c:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007412:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007416:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000741d:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007424:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
1000742b:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007432:	31 da                	xor    edx,ebx
10007434:	89 d7                	mov    edi,edx
10007436:	c1 ef 06             	shr    edi,0x6
10007439:	89 d5                	mov    ebp,edx
1000743b:	c1 ed 0e             	shr    ebp,0xe
1000743e:	89 d3                	mov    ebx,edx
10007440:	c1 eb 16             	shr    ebx,0x16
10007443:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000744a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007450:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007456:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000745c:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007462:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007466:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000746d:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007474:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
1000747b:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007482:	31 d8                	xor    eax,ebx
10007484:	89 c7                	mov    edi,eax
10007486:	c1 ef 06             	shr    edi,0x6
10007489:	89 c5                	mov    ebp,eax
1000748b:	c1 ed 0e             	shr    ebp,0xe
1000748e:	89 c3                	mov    ebx,eax
10007490:	c1 eb 16             	shr    ebx,0x16
10007493:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000749a:	81 e6 fc 03 00 00    	and    esi,0x3fc
100074a0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100074a6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100074ac:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100074b2:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100074b6:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100074bd:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100074c4:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
100074cb:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100074d2:	31 da                	xor    edx,ebx
100074d4:	89 d7                	mov    edi,edx
100074d6:	c1 ef 06             	shr    edi,0x6
100074d9:	89 d5                	mov    ebp,edx
100074db:	c1 ed 0e             	shr    ebp,0xe
100074de:	89 d3                	mov    ebx,edx
100074e0:	c1 eb 16             	shr    ebx,0x16
100074e3:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100074ea:	81 e6 fc 03 00 00    	and    esi,0x3fc
100074f0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100074f6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100074fc:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007502:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007506:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000750d:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007514:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
1000751b:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007522:	31 d8                	xor    eax,ebx
10007524:	89 c7                	mov    edi,eax
10007526:	c1 ef 06             	shr    edi,0x6
10007529:	89 c5                	mov    ebp,eax
1000752b:	c1 ed 0e             	shr    ebp,0xe
1000752e:	89 c3                	mov    ebx,eax
10007530:	c1 eb 16             	shr    ebx,0x16
10007533:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000753a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007540:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007546:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000754c:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007552:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007556:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000755d:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007564:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
1000756b:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007572:	31 da                	xor    edx,ebx
10007574:	89 d7                	mov    edi,edx
10007576:	c1 ef 06             	shr    edi,0x6
10007579:	89 d5                	mov    ebp,edx
1000757b:	c1 ed 0e             	shr    ebp,0xe
1000757e:	89 d3                	mov    ebx,edx
10007580:	c1 eb 16             	shr    ebx,0x16
10007583:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000758a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007590:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007596:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000759c:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100075a2:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100075a6:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100075ad:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100075b4:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
100075bb:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100075c2:	31 d8                	xor    eax,ebx
100075c4:	89 c7                	mov    edi,eax
100075c6:	c1 ef 06             	shr    edi,0x6
100075c9:	89 c5                	mov    ebp,eax
100075cb:	c1 ed 0e             	shr    ebp,0xe
100075ce:	89 c3                	mov    ebx,eax
100075d0:	c1 eb 16             	shr    ebx,0x16
100075d3:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100075da:	81 e6 fc 03 00 00    	and    esi,0x3fc
100075e0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100075e6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100075ec:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100075f2:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100075f6:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100075fd:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007604:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
1000760b:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007612:	31 da                	xor    edx,ebx
10007614:	89 d7                	mov    edi,edx
10007616:	c1 ef 06             	shr    edi,0x6
10007619:	89 d5                	mov    ebp,edx
1000761b:	c1 ed 0e             	shr    ebp,0xe
1000761e:	89 d3                	mov    ebx,edx
10007620:	c1 eb 16             	shr    ebx,0x16
10007623:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000762a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007630:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007636:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000763c:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007642:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007646:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000764d:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007654:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
1000765b:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007662:	31 d8                	xor    eax,ebx
10007664:	89 c6                	mov    esi,eax
10007666:	c1 ee 06             	shr    esi,0x6
10007669:	89 c5                	mov    ebp,eax
1000766b:	c1 ed 0e             	shr    ebp,0xe
1000766e:	89 c3                	mov    ebx,eax
10007670:	c1 eb 16             	shr    ebx,0x16
10007673:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000767a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007680:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007686:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000768c:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007692:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007696:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000769d:	33 9c 34 58 08 00 00 	xor    ebx,DWORD PTR [esp+esi*1+0x858]
100076a4:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
100076ab:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
100076b2:	31 da                	xor    edx,ebx
100076b4:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
100076bb:	89 41 f0             	mov    DWORD PTR [ecx-0x10],eax
100076be:	89 51 f4             	mov    DWORD PTR [ecx-0xc],edx
100076c1:	8b 9c 24 e8 10 00 00 	mov    ebx,DWORD PTR [esp+0x10e8]
100076c8:	33 9c 24 58 10 00 00 	xor    ebx,DWORD PTR [esp+0x1058]
100076cf:	31 d8                	xor    eax,ebx
100076d1:	89 c5                	mov    ebp,eax
100076d3:	c1 ed 06             	shr    ebp,0x6
100076d6:	89 c6                	mov    esi,eax
100076d8:	c1 ee 0e             	shr    esi,0xe
100076db:	89 c3                	mov    ebx,eax
100076dd:	c1 eb 16             	shr    ebx,0x16
100076e0:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100076e7:	81 e7 fc 03 00 00    	and    edi,0x3fc
100076ed:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100076f3:	81 e6 fc 03 00 00    	and    esi,0x3fc
100076f9:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100076ff:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007703:	03 9c 34 58 04 00 00 	add    ebx,DWORD PTR [esp+esi*1+0x458]
1000770a:	33 9c 2c 58 08 00 00 	xor    ebx,DWORD PTR [esp+ebp*1+0x858]
10007711:	8b b4 24 ec 10 00 00 	mov    esi,DWORD PTR [esp+0x10ec]
10007718:	33 b4 24 5c 10 00 00 	xor    esi,DWORD PTR [esp+0x105c]
1000771f:	31 f2                	xor    edx,esi
10007721:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10007728:	89 de                	mov    esi,ebx
1000772a:	31 d6                	xor    esi,edx
1000772c:	89 f5                	mov    ebp,esi
1000772e:	c1 ed 06             	shr    ebp,0x6
10007731:	89 f3                	mov    ebx,esi
10007733:	c1 eb 0e             	shr    ebx,0xe
10007736:	89 f2                	mov    edx,esi
10007738:	c1 ea 16             	shr    edx,0x16
1000773b:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10007742:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007748:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000774e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007754:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000775a:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000775e:	03 94 1c 58 04 00 00 	add    edx,DWORD PTR [esp+ebx*1+0x458]
10007765:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
1000776c:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10007773:	89 d3                	mov    ebx,edx
10007775:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
1000777c:	31 c3                	xor    ebx,eax
1000777e:	89 df                	mov    edi,ebx
10007780:	c1 ef 06             	shr    edi,0x6
10007783:	89 dd                	mov    ebp,ebx
10007785:	c1 ed 0e             	shr    ebp,0xe
10007788:	89 da                	mov    edx,ebx
1000778a:	c1 ea 16             	shr    edx,0x16
1000778d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
10007794:	25 fc 03 00 00       	and    eax,0x3fc
10007799:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000779f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100077a5:	81 e2 fc 03 00 00    	and    edx,0x3fc
100077ab:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100077af:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100077b6:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100077bd:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
100077c4:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
100077cb:	31 d6                	xor    esi,edx
100077cd:	89 f0                	mov    eax,esi
100077cf:	c1 e8 06             	shr    eax,0x6
100077d2:	89 f5                	mov    ebp,esi
100077d4:	c1 ed 0e             	shr    ebp,0xe
100077d7:	89 f2                	mov    edx,esi
100077d9:	c1 ea 16             	shr    edx,0x16
100077dc:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100077e3:	81 e7 fc 03 00 00    	and    edi,0x3fc
100077e9:	25 fc 03 00 00       	and    eax,0x3fc
100077ee:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100077f4:	81 e2 fc 03 00 00    	and    edx,0x3fc
100077fa:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100077fe:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007805:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
1000780c:	33 9c 24 68 10 00 00 	xor    ebx,DWORD PTR [esp+0x1068]
10007813:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
1000781a:	31 d3                	xor    ebx,edx
1000781c:	89 dd                	mov    ebp,ebx
1000781e:	c1 ed 06             	shr    ebp,0x6
10007821:	89 da                	mov    edx,ebx
10007823:	c1 ea 0e             	shr    edx,0xe
10007826:	89 d8                	mov    eax,ebx
10007828:	c1 e8 16             	shr    eax,0x16
1000782b:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
10007832:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007838:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000783e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007844:	25 fc 03 00 00       	and    eax,0x3fc
10007849:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000784d:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10007854:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
1000785b:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
10007862:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10007869:	89 c2                	mov    edx,eax
1000786b:	31 f2                	xor    edx,esi
1000786d:	89 d7                	mov    edi,edx
1000786f:	c1 ef 06             	shr    edi,0x6
10007872:	89 d5                	mov    ebp,edx
10007874:	c1 ed 0e             	shr    ebp,0xe
10007877:	89 d0                	mov    eax,edx
10007879:	c1 e8 16             	shr    eax,0x16
1000787c:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007883:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007889:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000788f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007895:	25 fc 03 00 00       	and    eax,0x3fc
1000789a:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000789e:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100078a5:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100078ac:	33 9c 24 70 10 00 00 	xor    ebx,DWORD PTR [esp+0x1070]
100078b3:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100078ba:	31 c3                	xor    ebx,eax
100078bc:	89 df                	mov    edi,ebx
100078be:	c1 ef 06             	shr    edi,0x6
100078c1:	89 dd                	mov    ebp,ebx
100078c3:	c1 ed 0e             	shr    ebp,0xe
100078c6:	89 d8                	mov    eax,ebx
100078c8:	c1 e8 16             	shr    eax,0x16
100078cb:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100078d2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100078d8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100078de:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100078e4:	25 fc 03 00 00       	and    eax,0x3fc
100078e9:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100078ed:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100078f4:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100078fb:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10007902:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10007909:	31 c2                	xor    edx,eax
1000790b:	89 d7                	mov    edi,edx
1000790d:	c1 ef 06             	shr    edi,0x6
10007910:	89 d5                	mov    ebp,edx
10007912:	c1 ed 0e             	shr    ebp,0xe
10007915:	89 d0                	mov    eax,edx
10007917:	c1 e8 16             	shr    eax,0x16
1000791a:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007921:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007927:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000792d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007933:	25 fc 03 00 00       	and    eax,0x3fc
10007938:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000793c:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007943:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000794a:	33 9c 24 78 10 00 00 	xor    ebx,DWORD PTR [esp+0x1078]
10007951:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10007958:	31 c3                	xor    ebx,eax
1000795a:	89 df                	mov    edi,ebx
1000795c:	c1 ef 06             	shr    edi,0x6
1000795f:	89 dd                	mov    ebp,ebx
10007961:	c1 ed 0e             	shr    ebp,0xe
10007964:	89 d8                	mov    eax,ebx
10007966:	c1 e8 16             	shr    eax,0x16
10007969:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10007970:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007976:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000797c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007982:	25 fc 03 00 00       	and    eax,0x3fc
10007987:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000798b:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007992:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007999:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
100079a0:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100079a7:	31 c2                	xor    edx,eax
100079a9:	89 d7                	mov    edi,edx
100079ab:	c1 ef 06             	shr    edi,0x6
100079ae:	89 d5                	mov    ebp,edx
100079b0:	c1 ed 0e             	shr    ebp,0xe
100079b3:	89 d0                	mov    eax,edx
100079b5:	c1 e8 16             	shr    eax,0x16
100079b8:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100079bf:	81 e6 fc 03 00 00    	and    esi,0x3fc
100079c5:	81 e7 fc 03 00 00    	and    edi,0x3fc
100079cb:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100079d1:	25 fc 03 00 00       	and    eax,0x3fc
100079d6:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100079da:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100079e1:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100079e8:	33 9c 24 80 10 00 00 	xor    ebx,DWORD PTR [esp+0x1080]
100079ef:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100079f6:	31 c3                	xor    ebx,eax
100079f8:	89 df                	mov    edi,ebx
100079fa:	c1 ef 06             	shr    edi,0x6
100079fd:	89 dd                	mov    ebp,ebx
100079ff:	c1 ed 0e             	shr    ebp,0xe
10007a02:	89 d8                	mov    eax,ebx
10007a04:	c1 e8 16             	shr    eax,0x16
10007a07:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10007a0e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007a14:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007a1a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007a20:	25 fc 03 00 00       	and    eax,0x3fc
10007a25:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007a29:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007a30:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007a37:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10007a3e:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10007a45:	31 d0                	xor    eax,edx
10007a47:	89 c7                	mov    edi,eax
10007a49:	c1 ef 06             	shr    edi,0x6
10007a4c:	89 c5                	mov    ebp,eax
10007a4e:	c1 ed 0e             	shr    ebp,0xe
10007a51:	89 c2                	mov    edx,eax
10007a53:	c1 ea 16             	shr    edx,0x16
10007a56:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007a5d:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007a63:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007a69:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007a6f:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007a75:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007a79:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007a80:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007a87:	33 9c 24 88 10 00 00 	xor    ebx,DWORD PTR [esp+0x1088]
10007a8e:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10007a95:	31 d3                	xor    ebx,edx
10007a97:	89 df                	mov    edi,ebx
10007a99:	c1 ef 06             	shr    edi,0x6
10007a9c:	89 dd                	mov    ebp,ebx
10007a9e:	c1 ed 0e             	shr    ebp,0xe
10007aa1:	89 da                	mov    edx,ebx
10007aa3:	c1 ea 16             	shr    edx,0x16
10007aa6:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10007aad:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007ab3:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007ab9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007abf:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007ac5:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007ac9:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007ad0:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007ad7:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10007ade:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10007ae5:	31 d0                	xor    eax,edx
10007ae7:	89 c7                	mov    edi,eax
10007ae9:	c1 ef 06             	shr    edi,0x6
10007aec:	89 c5                	mov    ebp,eax
10007aee:	c1 ed 0e             	shr    ebp,0xe
10007af1:	89 c2                	mov    edx,eax
10007af3:	c1 ea 16             	shr    edx,0x16
10007af6:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007afd:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007b03:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007b09:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007b0f:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007b15:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007b19:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007b20:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007b27:	33 9c 24 90 10 00 00 	xor    ebx,DWORD PTR [esp+0x1090]
10007b2e:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10007b35:	31 d3                	xor    ebx,edx
10007b37:	89 df                	mov    edi,ebx
10007b39:	c1 ef 06             	shr    edi,0x6
10007b3c:	89 dd                	mov    ebp,ebx
10007b3e:	c1 ed 0e             	shr    ebp,0xe
10007b41:	89 da                	mov    edx,ebx
10007b43:	c1 ea 16             	shr    edx,0x16
10007b46:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10007b4d:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007b53:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007b59:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007b5f:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007b65:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007b69:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007b70:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007b77:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10007b7e:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10007b85:	31 d0                	xor    eax,edx
10007b87:	89 c7                	mov    edi,eax
10007b89:	c1 ef 06             	shr    edi,0x6
10007b8c:	89 c5                	mov    ebp,eax
10007b8e:	c1 ed 0e             	shr    ebp,0xe
10007b91:	89 c2                	mov    edx,eax
10007b93:	c1 ea 16             	shr    edx,0x16
10007b96:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007b9d:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007ba3:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007ba9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007baf:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007bb5:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007bb9:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007bc0:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007bc7:	33 9c 24 98 10 00 00 	xor    ebx,DWORD PTR [esp+0x1098]
10007bce:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10007bd5:	31 d3                	xor    ebx,edx
10007bd7:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10007bde:	89 41 f8             	mov    DWORD PTR [ecx-0x8],eax
10007be1:	89 59 fc             	mov    DWORD PTR [ecx-0x4],ebx
10007be4:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10007beb:	39 d1                	cmp    ecx,edx
10007bed:	0f 85 a4 f5 ff ff    	jne    10007197 <_crypt_blowfish_rn+0x695>
10007bf3:	8b 84 24 a0 10 00 00 	mov    eax,DWORD PTR [esp+0x10a0]
10007bfa:	31 84 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],eax
10007c01:	8b 84 24 a4 10 00 00 	mov    eax,DWORD PTR [esp+0x10a4]
10007c08:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
10007c0f:	8b 84 24 a8 10 00 00 	mov    eax,DWORD PTR [esp+0x10a8]
10007c16:	31 84 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],eax
10007c1d:	8b 84 24 ac 10 00 00 	mov    eax,DWORD PTR [esp+0x10ac]
10007c24:	31 84 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],eax
10007c2b:	8b 84 24 b0 10 00 00 	mov    eax,DWORD PTR [esp+0x10b0]
10007c32:	31 84 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],eax
10007c39:	8b 84 24 b4 10 00 00 	mov    eax,DWORD PTR [esp+0x10b4]
10007c40:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
10007c47:	8b 84 24 b8 10 00 00 	mov    eax,DWORD PTR [esp+0x10b8]
10007c4e:	31 84 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],eax
10007c55:	8b 84 24 bc 10 00 00 	mov    eax,DWORD PTR [esp+0x10bc]
10007c5c:	31 84 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],eax
10007c63:	8b 84 24 c0 10 00 00 	mov    eax,DWORD PTR [esp+0x10c0]
10007c6a:	31 84 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],eax
10007c71:	8b 84 24 c4 10 00 00 	mov    eax,DWORD PTR [esp+0x10c4]
10007c78:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
10007c7f:	8b 84 24 c8 10 00 00 	mov    eax,DWORD PTR [esp+0x10c8]
10007c86:	31 84 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],eax
10007c8d:	8b 84 24 cc 10 00 00 	mov    eax,DWORD PTR [esp+0x10cc]
10007c94:	31 84 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],eax
10007c9b:	8b 84 24 d0 10 00 00 	mov    eax,DWORD PTR [esp+0x10d0]
10007ca2:	31 84 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],eax
10007ca9:	8b 84 24 d4 10 00 00 	mov    eax,DWORD PTR [esp+0x10d4]
10007cb0:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
10007cb7:	8b 84 24 d8 10 00 00 	mov    eax,DWORD PTR [esp+0x10d8]
10007cbe:	31 84 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],eax
10007cc5:	8b 84 24 dc 10 00 00 	mov    eax,DWORD PTR [esp+0x10dc]
10007ccc:	31 84 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],eax
10007cd3:	8b 84 24 e0 10 00 00 	mov    eax,DWORD PTR [esp+0x10e0]
10007cda:	31 84 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],eax
10007ce1:	8b 84 24 e4 10 00 00 	mov    eax,DWORD PTR [esp+0x10e4]
10007ce8:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
10007cef:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
10007cf6:	b9 00 00 00 00       	mov    ecx,0x0
10007cfb:	b8 00 00 00 00       	mov    eax,0x0
10007d00:	83 c3 08             	add    ebx,0x8
10007d03:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10007d0a:	89 c7                	mov    edi,eax
10007d0c:	c1 ef 06             	shr    edi,0x6
10007d0f:	89 c5                	mov    ebp,eax
10007d11:	c1 ed 0e             	shr    ebp,0xe
10007d14:	89 c2                	mov    edx,eax
10007d16:	c1 ea 16             	shr    edx,0x16
10007d19:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007d20:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007d26:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007d2c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007d32:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007d38:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007d3c:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007d43:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007d4a:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10007d51:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10007d58:	31 ca                	xor    edx,ecx
10007d5a:	89 d5                	mov    ebp,edx
10007d5c:	c1 ed 06             	shr    ebp,0x6
10007d5f:	89 d6                	mov    esi,edx
10007d61:	c1 ee 0e             	shr    esi,0xe
10007d64:	89 d1                	mov    ecx,edx
10007d66:	c1 e9 16             	shr    ecx,0x16
10007d69:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
10007d70:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007d76:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007d7c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007d82:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007d88:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007d8c:	03 8c 34 58 04 00 00 	add    ecx,DWORD PTR [esp+esi*1+0x458]
10007d93:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10007d9a:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10007da1:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
10007da8:	31 c8                	xor    eax,ecx
10007daa:	89 c7                	mov    edi,eax
10007dac:	c1 ef 06             	shr    edi,0x6
10007daf:	89 c5                	mov    ebp,eax
10007db1:	c1 ed 0e             	shr    ebp,0xe
10007db4:	89 c1                	mov    ecx,eax
10007db6:	c1 e9 16             	shr    ecx,0x16
10007db9:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007dc0:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007dc6:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007dcc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007dd2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007dd8:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007ddc:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007de3:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007dea:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10007df1:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10007df8:	31 d1                	xor    ecx,edx
10007dfa:	89 cd                	mov    ebp,ecx
10007dfc:	c1 ed 06             	shr    ebp,0x6
10007dff:	89 ce                	mov    esi,ecx
10007e01:	c1 ee 0e             	shr    esi,0xe
10007e04:	89 ca                	mov    edx,ecx
10007e06:	c1 ea 16             	shr    edx,0x16
10007e09:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10007e10:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007e16:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007e1c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007e22:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007e28:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007e2c:	03 94 34 58 04 00 00 	add    edx,DWORD PTR [esp+esi*1+0x458]
10007e33:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
10007e3a:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
10007e41:	89 d6                	mov    esi,edx
10007e43:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10007e4a:	31 c6                	xor    esi,eax
10007e4c:	89 f2                	mov    edx,esi
10007e4e:	c1 ea 06             	shr    edx,0x6
10007e51:	89 f5                	mov    ebp,esi
10007e53:	c1 ed 0e             	shr    ebp,0xe
10007e56:	89 f0                	mov    eax,esi
10007e58:	c1 e8 16             	shr    eax,0x16
10007e5b:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10007e62:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007e68:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007e6e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007e74:	25 fc 03 00 00       	and    eax,0x3fc
10007e79:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007e7d:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007e84:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10007e8b:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
10007e92:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10007e99:	31 c8                	xor    eax,ecx
10007e9b:	89 c7                	mov    edi,eax
10007e9d:	c1 ef 06             	shr    edi,0x6
10007ea0:	89 c5                	mov    ebp,eax
10007ea2:	c1 ed 0e             	shr    ebp,0xe
10007ea5:	89 c2                	mov    edx,eax
10007ea7:	c1 ea 16             	shr    edx,0x16
10007eaa:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10007eb1:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007eb7:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007ebd:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007ec3:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007ec9:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007ecd:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007ed4:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007edb:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
10007ee2:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10007ee9:	31 f2                	xor    edx,esi
10007eeb:	89 d7                	mov    edi,edx
10007eed:	c1 ef 06             	shr    edi,0x6
10007ef0:	89 d5                	mov    ebp,edx
10007ef2:	c1 ed 0e             	shr    ebp,0xe
10007ef5:	89 d1                	mov    ecx,edx
10007ef7:	c1 e9 16             	shr    ecx,0x16
10007efa:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007f01:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007f07:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007f0d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007f13:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007f19:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007f1d:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007f24:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007f2b:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10007f32:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10007f39:	31 c8                	xor    eax,ecx
10007f3b:	89 c7                	mov    edi,eax
10007f3d:	c1 ef 06             	shr    edi,0x6
10007f40:	89 c5                	mov    ebp,eax
10007f42:	c1 ed 0e             	shr    ebp,0xe
10007f45:	89 c1                	mov    ecx,eax
10007f47:	c1 e9 16             	shr    ecx,0x16
10007f4a:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007f51:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007f57:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007f5d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007f63:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007f69:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007f6d:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007f74:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007f7b:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10007f82:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10007f89:	31 ca                	xor    edx,ecx
10007f8b:	89 d7                	mov    edi,edx
10007f8d:	c1 ef 06             	shr    edi,0x6
10007f90:	89 d5                	mov    ebp,edx
10007f92:	c1 ed 0e             	shr    ebp,0xe
10007f95:	89 d1                	mov    ecx,edx
10007f97:	c1 e9 16             	shr    ecx,0x16
10007f9a:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007fa1:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007fa7:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007fad:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007fb3:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007fb9:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007fbd:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007fc4:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007fcb:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10007fd2:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10007fd9:	31 c8                	xor    eax,ecx
10007fdb:	89 c7                	mov    edi,eax
10007fdd:	c1 ef 06             	shr    edi,0x6
10007fe0:	89 c5                	mov    ebp,eax
10007fe2:	c1 ed 0e             	shr    ebp,0xe
10007fe5:	89 c1                	mov    ecx,eax
10007fe7:	c1 e9 16             	shr    ecx,0x16
10007fea:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007ff1:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007ff7:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007ffd:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008003:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008009:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000800d:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008014:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000801b:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10008022:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008029:	31 ca                	xor    edx,ecx
1000802b:	89 d7                	mov    edi,edx
1000802d:	c1 ef 06             	shr    edi,0x6
10008030:	89 d5                	mov    ebp,edx
10008032:	c1 ed 0e             	shr    ebp,0xe
10008035:	89 d1                	mov    ecx,edx
10008037:	c1 e9 16             	shr    ecx,0x16
1000803a:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008041:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008047:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000804d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008053:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008059:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000805d:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008064:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000806b:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10008072:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008079:	31 c8                	xor    eax,ecx
1000807b:	89 c7                	mov    edi,eax
1000807d:	c1 ef 06             	shr    edi,0x6
10008080:	89 c5                	mov    ebp,eax
10008082:	c1 ed 0e             	shr    ebp,0xe
10008085:	89 c1                	mov    ecx,eax
10008087:	c1 e9 16             	shr    ecx,0x16
1000808a:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008091:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008097:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000809d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100080a3:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100080a9:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100080ad:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100080b4:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100080bb:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
100080c2:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100080c9:	31 ca                	xor    edx,ecx
100080cb:	89 d7                	mov    edi,edx
100080cd:	c1 ef 06             	shr    edi,0x6
100080d0:	89 d5                	mov    ebp,edx
100080d2:	c1 ed 0e             	shr    ebp,0xe
100080d5:	89 d1                	mov    ecx,edx
100080d7:	c1 e9 16             	shr    ecx,0x16
100080da:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100080e1:	81 e6 fc 03 00 00    	and    esi,0x3fc
100080e7:	81 e7 fc 03 00 00    	and    edi,0x3fc
100080ed:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100080f3:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100080f9:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100080fd:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008104:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000810b:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10008112:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008119:	31 c8                	xor    eax,ecx
1000811b:	89 c7                	mov    edi,eax
1000811d:	c1 ef 06             	shr    edi,0x6
10008120:	89 c5                	mov    ebp,eax
10008122:	c1 ed 0e             	shr    ebp,0xe
10008125:	89 c1                	mov    ecx,eax
10008127:	c1 e9 16             	shr    ecx,0x16
1000812a:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008131:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008137:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000813d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008143:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008149:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000814d:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008154:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000815b:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10008162:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008169:	31 ca                	xor    edx,ecx
1000816b:	89 d7                	mov    edi,edx
1000816d:	c1 ef 06             	shr    edi,0x6
10008170:	89 d5                	mov    ebp,edx
10008172:	c1 ed 0e             	shr    ebp,0xe
10008175:	89 d6                	mov    esi,edx
10008177:	c1 ee 16             	shr    esi,0x16
1000817a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10008181:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008187:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000818d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008193:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008199:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000819d:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
100081a4:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
100081ab:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
100081b2:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
100081b9:	31 f0                	xor    eax,esi
100081bb:	89 c5                	mov    ebp,eax
100081bd:	c1 ed 06             	shr    ebp,0x6
100081c0:	89 c1                	mov    ecx,eax
100081c2:	c1 e9 0e             	shr    ecx,0xe
100081c5:	89 c6                	mov    esi,eax
100081c7:	c1 ee 16             	shr    esi,0x16
100081ca:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100081d1:	81 e7 fc 03 00 00    	and    edi,0x3fc
100081d7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100081dd:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100081e3:	81 e6 fc 03 00 00    	and    esi,0x3fc
100081e9:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
100081ed:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
100081f4:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
100081fb:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10008202:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10008209:	89 f1                	mov    ecx,esi
1000820b:	31 d1                	xor    ecx,edx
1000820d:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10008214:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10008217:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
1000821a:	8d b4 24 a0 10 00 00 	lea    esi,[esp+0x10a0]
10008221:	39 f3                	cmp    ebx,esi
10008223:	0f 85 d7 fa ff ff    	jne    10007d00 <_crypt_blowfish_rn+0x11fe>
10008229:	8d 5c 24 58          	lea    ebx,[esp+0x58]
1000822d:	83 c3 08             	add    ebx,0x8
10008230:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10008237:	89 c7                	mov    edi,eax
10008239:	c1 ef 06             	shr    edi,0x6
1000823c:	89 c5                	mov    ebp,eax
1000823e:	c1 ed 0e             	shr    ebp,0xe
10008241:	89 c2                	mov    edx,eax
10008243:	c1 ea 16             	shr    edx,0x16
10008246:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000824d:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008253:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008259:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000825f:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008265:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008269:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008270:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008277:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000827e:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10008285:	31 ca                	xor    edx,ecx
10008287:	89 d7                	mov    edi,edx
10008289:	c1 ef 06             	shr    edi,0x6
1000828c:	89 d5                	mov    ebp,edx
1000828e:	c1 ed 0e             	shr    ebp,0xe
10008291:	89 d1                	mov    ecx,edx
10008293:	c1 e9 16             	shr    ecx,0x16
10008296:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000829d:	81 e6 fc 03 00 00    	and    esi,0x3fc
100082a3:	81 e7 fc 03 00 00    	and    edi,0x3fc
100082a9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100082af:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100082b5:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100082b9:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100082c0:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100082c7:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
100082ce:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100082d5:	31 c1                	xor    ecx,eax
100082d7:	89 cd                	mov    ebp,ecx
100082d9:	c1 ed 06             	shr    ebp,0x6
100082dc:	89 c8                	mov    eax,ecx
100082de:	c1 e8 0e             	shr    eax,0xe
100082e1:	89 ce                	mov    esi,ecx
100082e3:	c1 ee 16             	shr    esi,0x16
100082e6:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100082ed:	81 e7 fc 03 00 00    	and    edi,0x3fc
100082f3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100082f9:	25 fc 03 00 00       	and    eax,0x3fc
100082fe:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008304:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008308:	03 b4 04 58 04 00 00 	add    esi,DWORD PTR [esp+eax*1+0x458]
1000830f:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10008316:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
1000831d:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10008324:	31 d6                	xor    esi,edx
10008326:	89 f5                	mov    ebp,esi
10008328:	c1 ed 06             	shr    ebp,0x6
1000832b:	89 f2                	mov    edx,esi
1000832d:	c1 ea 0e             	shr    edx,0xe
10008330:	89 f0                	mov    eax,esi
10008332:	c1 e8 16             	shr    eax,0x16
10008335:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000833c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008342:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008348:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000834e:	25 fc 03 00 00       	and    eax,0x3fc
10008353:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008357:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
1000835e:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10008365:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
1000836c:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008373:	31 c1                	xor    ecx,eax
10008375:	89 ca                	mov    edx,ecx
10008377:	c1 ea 06             	shr    edx,0x6
1000837a:	89 cd                	mov    ebp,ecx
1000837c:	c1 ed 0e             	shr    ebp,0xe
1000837f:	89 c8                	mov    eax,ecx
10008381:	c1 e8 16             	shr    eax,0x16
10008384:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000838b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008391:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008397:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000839d:	25 fc 03 00 00       	and    eax,0x3fc
100083a2:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100083a6:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100083ad:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
100083b4:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
100083bb:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100083c2:	31 f0                	xor    eax,esi
100083c4:	89 c7                	mov    edi,eax
100083c6:	c1 ef 06             	shr    edi,0x6
100083c9:	89 c5                	mov    ebp,eax
100083cb:	c1 ed 0e             	shr    ebp,0xe
100083ce:	89 c2                	mov    edx,eax
100083d0:	c1 ea 16             	shr    edx,0x16
100083d3:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100083da:	81 e6 fc 03 00 00    	and    esi,0x3fc
100083e0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100083e6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100083ec:	81 e2 fc 03 00 00    	and    edx,0x3fc
100083f2:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100083f6:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100083fd:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008404:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
1000840b:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008412:	31 ca                	xor    edx,ecx
10008414:	89 d7                	mov    edi,edx
10008416:	c1 ef 06             	shr    edi,0x6
10008419:	89 d5                	mov    ebp,edx
1000841b:	c1 ed 0e             	shr    ebp,0xe
1000841e:	89 d1                	mov    ecx,edx
10008420:	c1 e9 16             	shr    ecx,0x16
10008423:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000842a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008430:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008436:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000843c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008442:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008446:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000844d:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008454:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
1000845b:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008462:	31 c8                	xor    eax,ecx
10008464:	89 c7                	mov    edi,eax
10008466:	c1 ef 06             	shr    edi,0x6
10008469:	89 c5                	mov    ebp,eax
1000846b:	c1 ed 0e             	shr    ebp,0xe
1000846e:	89 c1                	mov    ecx,eax
10008470:	c1 e9 16             	shr    ecx,0x16
10008473:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000847a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008480:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008486:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000848c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008492:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008496:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000849d:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100084a4:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
100084ab:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100084b2:	31 ca                	xor    edx,ecx
100084b4:	89 d7                	mov    edi,edx
100084b6:	c1 ef 06             	shr    edi,0x6
100084b9:	89 d5                	mov    ebp,edx
100084bb:	c1 ed 0e             	shr    ebp,0xe
100084be:	89 d1                	mov    ecx,edx
100084c0:	c1 e9 16             	shr    ecx,0x16
100084c3:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100084ca:	81 e6 fc 03 00 00    	and    esi,0x3fc
100084d0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100084d6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100084dc:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100084e2:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100084e6:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100084ed:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100084f4:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
100084fb:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008502:	31 c8                	xor    eax,ecx
10008504:	89 c7                	mov    edi,eax
10008506:	c1 ef 06             	shr    edi,0x6
10008509:	89 c5                	mov    ebp,eax
1000850b:	c1 ed 0e             	shr    ebp,0xe
1000850e:	89 c1                	mov    ecx,eax
10008510:	c1 e9 16             	shr    ecx,0x16
10008513:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000851a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008520:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008526:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000852c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008532:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008536:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000853d:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008544:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
1000854b:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008552:	31 ca                	xor    edx,ecx
10008554:	89 d7                	mov    edi,edx
10008556:	c1 ef 06             	shr    edi,0x6
10008559:	89 d5                	mov    ebp,edx
1000855b:	c1 ed 0e             	shr    ebp,0xe
1000855e:	89 d1                	mov    ecx,edx
10008560:	c1 e9 16             	shr    ecx,0x16
10008563:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000856a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008570:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008576:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000857c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008582:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008586:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000858d:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008594:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
1000859b:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100085a2:	31 c8                	xor    eax,ecx
100085a4:	89 c7                	mov    edi,eax
100085a6:	c1 ef 06             	shr    edi,0x6
100085a9:	89 c5                	mov    ebp,eax
100085ab:	c1 ed 0e             	shr    ebp,0xe
100085ae:	89 c1                	mov    ecx,eax
100085b0:	c1 e9 16             	shr    ecx,0x16
100085b3:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100085ba:	81 e6 fc 03 00 00    	and    esi,0x3fc
100085c0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100085c6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100085cc:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100085d2:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100085d6:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100085dd:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100085e4:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
100085eb:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100085f2:	31 ca                	xor    edx,ecx
100085f4:	89 d7                	mov    edi,edx
100085f6:	c1 ef 06             	shr    edi,0x6
100085f9:	89 d5                	mov    ebp,edx
100085fb:	c1 ed 0e             	shr    ebp,0xe
100085fe:	89 d1                	mov    ecx,edx
10008600:	c1 e9 16             	shr    ecx,0x16
10008603:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000860a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008610:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008616:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000861c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008622:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008626:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000862d:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008634:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
1000863b:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008642:	31 c8                	xor    eax,ecx
10008644:	89 c7                	mov    edi,eax
10008646:	c1 ef 06             	shr    edi,0x6
10008649:	89 c5                	mov    ebp,eax
1000864b:	c1 ed 0e             	shr    ebp,0xe
1000864e:	89 c1                	mov    ecx,eax
10008650:	c1 e9 16             	shr    ecx,0x16
10008653:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000865a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008660:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008666:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000866c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008672:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008676:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000867d:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008684:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
1000868b:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008692:	31 ca                	xor    edx,ecx
10008694:	89 d7                	mov    edi,edx
10008696:	c1 ef 06             	shr    edi,0x6
10008699:	89 d5                	mov    ebp,edx
1000869b:	c1 ed 0e             	shr    ebp,0xe
1000869e:	89 d6                	mov    esi,edx
100086a0:	c1 ee 16             	shr    esi,0x16
100086a3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
100086aa:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100086b0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100086b6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100086bc:	81 e6 fc 03 00 00    	and    esi,0x3fc
100086c2:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
100086c6:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
100086cd:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
100086d4:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
100086db:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
100086e2:	31 f0                	xor    eax,esi
100086e4:	89 c5                	mov    ebp,eax
100086e6:	c1 ed 06             	shr    ebp,0x6
100086e9:	89 c1                	mov    ecx,eax
100086eb:	c1 e9 0e             	shr    ecx,0xe
100086ee:	89 c6                	mov    esi,eax
100086f0:	c1 ee 16             	shr    esi,0x16
100086f3:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100086fa:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008700:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008706:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000870c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008712:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008716:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
1000871d:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10008724:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
1000872b:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10008732:	89 f1                	mov    ecx,esi
10008734:	31 d1                	xor    ecx,edx
10008736:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
1000873d:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10008740:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
10008743:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
1000874a:	39 d3                	cmp    ebx,edx
1000874c:	0f 85 db fa ff ff    	jne    1000822d <_crypt_blowfish_rn+0x172b>
10008752:	8b 94 24 e8 10 00 00 	mov    edx,DWORD PTR [esp+0x10e8]
10008759:	8b 84 24 ec 10 00 00 	mov    eax,DWORD PTR [esp+0x10ec]
10008760:	8b 9c 24 f0 10 00 00 	mov    ebx,DWORD PTR [esp+0x10f0]
10008767:	8b 8c 24 f4 10 00 00 	mov    ecx,DWORD PTR [esp+0x10f4]
1000876e:	31 94 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],edx
10008775:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
1000877c:	31 9c 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],ebx
10008783:	31 8c 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],ecx
1000878a:	31 94 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],edx
10008791:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
10008798:	31 9c 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],ebx
1000879f:	31 8c 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],ecx
100087a6:	31 94 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],edx
100087ad:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
100087b4:	31 9c 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],ebx
100087bb:	31 8c 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],ecx
100087c2:	31 94 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],edx
100087c9:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
100087d0:	31 9c 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],ebx
100087d7:	31 8c 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],ecx
100087de:	31 94 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],edx
100087e5:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
100087ec:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
100087f3:	be 00 00 00 00       	mov    esi,0x0
100087f8:	b8 00 00 00 00       	mov    eax,0x0
100087fd:	83 c3 08             	add    ebx,0x8
10008800:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10008807:	89 c7                	mov    edi,eax
10008809:	c1 ef 06             	shr    edi,0x6
1000880c:	89 c5                	mov    ebp,eax
1000880e:	c1 ed 0e             	shr    ebp,0xe
10008811:	89 c2                	mov    edx,eax
10008813:	c1 ea 16             	shr    edx,0x16
10008816:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000881d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008823:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008829:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000882f:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008835:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008839:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008840:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008847:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000884e:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10008855:	31 d6                	xor    esi,edx
10008857:	89 f7                	mov    edi,esi
10008859:	c1 ef 06             	shr    edi,0x6
1000885c:	89 f5                	mov    ebp,esi
1000885e:	c1 ed 0e             	shr    ebp,0xe
10008861:	89 f1                	mov    ecx,esi
10008863:	c1 e9 16             	shr    ecx,0x16
10008866:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
1000886d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008873:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008879:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000887f:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008885:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008889:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008890:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008897:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
1000889e:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
100088a5:	31 c8                	xor    eax,ecx
100088a7:	89 c5                	mov    ebp,eax
100088a9:	c1 ed 06             	shr    ebp,0x6
100088ac:	89 c2                	mov    edx,eax
100088ae:	c1 ea 0e             	shr    edx,0xe
100088b1:	89 c1                	mov    ecx,eax
100088b3:	c1 e9 16             	shr    ecx,0x16
100088b6:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100088bd:	81 e7 fc 03 00 00    	and    edi,0x3fc
100088c3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100088c9:	81 e2 fc 03 00 00    	and    edx,0x3fc
100088cf:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100088d5:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100088d9:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
100088e0:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
100088e7:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
100088ee:	89 ca                	mov    edx,ecx
100088f0:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
100088f7:	31 d6                	xor    esi,edx
100088f9:	89 f7                	mov    edi,esi
100088fb:	c1 ef 06             	shr    edi,0x6
100088fe:	89 f5                	mov    ebp,esi
10008900:	c1 ed 0e             	shr    ebp,0xe
10008903:	89 f1                	mov    ecx,esi
10008905:	c1 e9 16             	shr    ecx,0x16
10008908:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
1000890f:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008915:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000891b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008921:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008927:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000892b:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008932:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008939:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
10008940:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10008947:	31 c1                	xor    ecx,eax
10008949:	89 cd                	mov    ebp,ecx
1000894b:	c1 ed 06             	shr    ebp,0x6
1000894e:	89 ca                	mov    edx,ecx
10008950:	c1 ea 0e             	shr    edx,0xe
10008953:	89 c8                	mov    eax,ecx
10008955:	c1 e8 16             	shr    eax,0x16
10008958:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000895f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008965:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000896b:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008971:	25 fc 03 00 00       	and    eax,0x3fc
10008976:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000897a:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10008981:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10008988:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
1000898f:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008996:	89 c2                	mov    edx,eax
10008998:	31 f2                	xor    edx,esi
1000899a:	89 d5                	mov    ebp,edx
1000899c:	c1 ed 06             	shr    ebp,0x6
1000899f:	89 d6                	mov    esi,edx
100089a1:	c1 ee 0e             	shr    esi,0xe
100089a4:	89 d0                	mov    eax,edx
100089a6:	c1 e8 16             	shr    eax,0x16
100089a9:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
100089b0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100089b6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100089bc:	81 e6 fc 03 00 00    	and    esi,0x3fc
100089c2:	25 fc 03 00 00       	and    eax,0x3fc
100089c7:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100089cb:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
100089d2:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
100089d9:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
100089e0:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100089e7:	89 c6                	mov    esi,eax
100089e9:	31 ce                	xor    esi,ecx
100089eb:	89 f7                	mov    edi,esi
100089ed:	c1 ef 06             	shr    edi,0x6
100089f0:	89 f5                	mov    ebp,esi
100089f2:	c1 ed 0e             	shr    ebp,0xe
100089f5:	89 f0                	mov    eax,esi
100089f7:	c1 e8 16             	shr    eax,0x16
100089fa:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10008a01:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008a07:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a0d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a13:	25 fc 03 00 00       	and    eax,0x3fc
10008a18:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008a1c:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008a23:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008a2a:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10008a31:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10008a38:	31 c2                	xor    edx,eax
10008a3a:	89 d7                	mov    edi,edx
10008a3c:	c1 ef 06             	shr    edi,0x6
10008a3f:	89 d5                	mov    ebp,edx
10008a41:	c1 ed 0e             	shr    ebp,0xe
10008a44:	89 d0                	mov    eax,edx
10008a46:	c1 e8 16             	shr    eax,0x16
10008a49:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10008a50:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008a56:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a5c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a62:	25 fc 03 00 00       	and    eax,0x3fc
10008a67:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008a6b:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008a72:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008a79:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
10008a80:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10008a87:	31 c6                	xor    esi,eax
10008a89:	89 f7                	mov    edi,esi
10008a8b:	c1 ef 06             	shr    edi,0x6
10008a8e:	89 f5                	mov    ebp,esi
10008a90:	c1 ed 0e             	shr    ebp,0xe
10008a93:	89 f0                	mov    eax,esi
10008a95:	c1 e8 16             	shr    eax,0x16
10008a98:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10008a9f:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008aa5:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008aab:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ab1:	25 fc 03 00 00       	and    eax,0x3fc
10008ab6:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008aba:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008ac1:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008ac8:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10008acf:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10008ad6:	31 c2                	xor    edx,eax
10008ad8:	89 d7                	mov    edi,edx
10008ada:	c1 ef 06             	shr    edi,0x6
10008add:	89 d5                	mov    ebp,edx
10008adf:	c1 ed 0e             	shr    ebp,0xe
10008ae2:	89 d0                	mov    eax,edx
10008ae4:	c1 e8 16             	shr    eax,0x16
10008ae7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10008aee:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008af4:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008afa:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b00:	25 fc 03 00 00       	and    eax,0x3fc
10008b05:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008b09:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008b10:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008b17:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
10008b1e:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10008b25:	31 c6                	xor    esi,eax
10008b27:	89 f7                	mov    edi,esi
10008b29:	c1 ef 06             	shr    edi,0x6
10008b2c:	89 f5                	mov    ebp,esi
10008b2e:	c1 ed 0e             	shr    ebp,0xe
10008b31:	89 f0                	mov    eax,esi
10008b33:	c1 e8 16             	shr    eax,0x16
10008b36:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10008b3d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008b43:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b49:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b4f:	25 fc 03 00 00       	and    eax,0x3fc
10008b54:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008b58:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008b5f:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008b66:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10008b6d:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10008b74:	31 d0                	xor    eax,edx
10008b76:	89 c7                	mov    edi,eax
10008b78:	c1 ef 06             	shr    edi,0x6
10008b7b:	89 c5                	mov    ebp,eax
10008b7d:	c1 ed 0e             	shr    ebp,0xe
10008b80:	89 c2                	mov    edx,eax
10008b82:	c1 ea 16             	shr    edx,0x16
10008b85:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10008b8c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008b92:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b98:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b9e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008ba4:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008ba8:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008baf:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008bb6:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
10008bbd:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10008bc4:	31 d6                	xor    esi,edx
10008bc6:	89 f7                	mov    edi,esi
10008bc8:	c1 ef 06             	shr    edi,0x6
10008bcb:	89 f5                	mov    ebp,esi
10008bcd:	c1 ed 0e             	shr    ebp,0xe
10008bd0:	89 f2                	mov    edx,esi
10008bd2:	c1 ea 16             	shr    edx,0x16
10008bd5:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10008bdc:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008be2:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008be8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008bee:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008bf4:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008bf8:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008bff:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008c06:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10008c0d:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10008c14:	31 d0                	xor    eax,edx
10008c16:	89 c7                	mov    edi,eax
10008c18:	c1 ef 06             	shr    edi,0x6
10008c1b:	89 c5                	mov    ebp,eax
10008c1d:	c1 ed 0e             	shr    ebp,0xe
10008c20:	89 c2                	mov    edx,eax
10008c22:	c1 ea 16             	shr    edx,0x16
10008c25:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10008c2c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008c32:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c38:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c3e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008c44:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008c48:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008c4f:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008c56:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
10008c5d:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10008c64:	31 d6                	xor    esi,edx
10008c66:	89 f2                	mov    edx,esi
10008c68:	c1 ea 06             	shr    edx,0x6
10008c6b:	89 f5                	mov    ebp,esi
10008c6d:	c1 ed 0e             	shr    ebp,0xe
10008c70:	89 f1                	mov    ecx,esi
10008c72:	c1 e9 16             	shr    ecx,0x16
10008c75:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008c7c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c82:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008c88:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c8e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008c94:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008c98:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008c9f:	33 8c 14 58 08 00 00 	xor    ecx,DWORD PTR [esp+edx*1+0x858]
10008ca6:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10008cad:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
10008cb4:	31 c8                	xor    eax,ecx
10008cb6:	89 c5                	mov    ebp,eax
10008cb8:	c1 ed 06             	shr    ebp,0x6
10008cbb:	89 c2                	mov    edx,eax
10008cbd:	c1 ea 0e             	shr    edx,0xe
10008cc0:	89 c1                	mov    ecx,eax
10008cc2:	c1 e9 16             	shr    ecx,0x16
10008cc5:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008ccc:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008cd2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008cd8:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008cde:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008ce4:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008ce8:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
10008cef:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10008cf6:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
10008cfd:	89 ca                	mov    edx,ecx
10008cff:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10008d06:	31 d6                	xor    esi,edx
10008d08:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10008d0f:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10008d12:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
10008d15:	8d bc 24 a0 10 00 00 	lea    edi,[esp+0x10a0]
10008d1c:	39 fb                	cmp    ebx,edi
10008d1e:	0f 85 d9 fa ff ff    	jne    100087fd <_crypt_blowfish_rn+0x1cfb>
10008d24:	8d 5c 24 58          	lea    ebx,[esp+0x58]
10008d28:	83 c3 08             	add    ebx,0x8
10008d2b:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10008d32:	89 c7                	mov    edi,eax
10008d34:	c1 ef 06             	shr    edi,0x6
10008d37:	89 c5                	mov    ebp,eax
10008d39:	c1 ed 0e             	shr    ebp,0xe
10008d3c:	89 c2                	mov    edx,eax
10008d3e:	c1 ea 16             	shr    edx,0x16
10008d41:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10008d48:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008d4e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d54:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d5a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008d60:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008d64:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008d6b:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008d72:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10008d79:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10008d80:	31 f2                	xor    edx,esi
10008d82:	89 d7                	mov    edi,edx
10008d84:	c1 ef 06             	shr    edi,0x6
10008d87:	89 d5                	mov    ebp,edx
10008d89:	c1 ed 0e             	shr    ebp,0xe
10008d8c:	89 d6                	mov    esi,edx
10008d8e:	c1 ee 16             	shr    esi,0x16
10008d91:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10008d98:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008d9e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008da4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008daa:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008db0:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008db4:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10008dbb:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10008dc2:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10008dc9:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10008dd0:	31 c6                	xor    esi,eax
10008dd2:	89 f7                	mov    edi,esi
10008dd4:	c1 ef 06             	shr    edi,0x6
10008dd7:	89 f5                	mov    ebp,esi
10008dd9:	c1 ed 0e             	shr    ebp,0xe
10008ddc:	89 f1                	mov    ecx,esi
10008dde:	c1 e9 16             	shr    ecx,0x16
10008de1:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
10008de8:	25 fc 03 00 00       	and    eax,0x3fc
10008ded:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008df3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008df9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008dff:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008e03:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008e0a:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008e11:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10008e18:	03 8c 04 58 0c 00 00 	add    ecx,DWORD PTR [esp+eax*1+0xc58]
10008e1f:	31 d1                	xor    ecx,edx
10008e21:	89 c8                	mov    eax,ecx
10008e23:	c1 e8 06             	shr    eax,0x6
10008e26:	89 cd                	mov    ebp,ecx
10008e28:	c1 ed 0e             	shr    ebp,0xe
10008e2b:	89 ca                	mov    edx,ecx
10008e2d:	c1 ea 16             	shr    edx,0x16
10008e30:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10008e37:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e3d:	25 fc 03 00 00       	and    eax,0x3fc
10008e42:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e48:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008e4e:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008e52:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008e59:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
10008e60:	33 b4 24 68 10 00 00 	xor    esi,DWORD PTR [esp+0x1068]
10008e67:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10008e6e:	31 d6                	xor    esi,edx
10008e70:	89 f2                	mov    edx,esi
10008e72:	c1 ea 06             	shr    edx,0x6
10008e75:	89 f5                	mov    ebp,esi
10008e77:	c1 ed 0e             	shr    ebp,0xe
10008e7a:	89 f0                	mov    eax,esi
10008e7c:	c1 e8 16             	shr    eax,0x16
10008e7f:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008e86:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e8c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008e92:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e98:	25 fc 03 00 00       	and    eax,0x3fc
10008e9d:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008ea1:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008ea8:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10008eaf:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
10008eb6:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008ebd:	31 c1                	xor    ecx,eax
10008ebf:	89 c8                	mov    eax,ecx
10008ec1:	c1 e8 06             	shr    eax,0x6
10008ec4:	89 cd                	mov    ebp,ecx
10008ec6:	c1 ed 0e             	shr    ebp,0xe
10008ec9:	89 ca                	mov    edx,ecx
10008ecb:	c1 ea 16             	shr    edx,0x16
10008ece:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10008ed5:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008edb:	25 fc 03 00 00       	and    eax,0x3fc
10008ee0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ee6:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008eec:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008ef0:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008ef7:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
10008efe:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
10008f05:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10008f0c:	31 d6                	xor    esi,edx
10008f0e:	89 f2                	mov    edx,esi
10008f10:	c1 ea 06             	shr    edx,0x6
10008f13:	89 f5                	mov    ebp,esi
10008f15:	c1 ed 0e             	shr    ebp,0xe
10008f18:	89 f0                	mov    eax,esi
10008f1a:	c1 e8 16             	shr    eax,0x16
10008f1d:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008f24:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f2a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008f30:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f36:	25 fc 03 00 00       	and    eax,0x3fc
10008f3b:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008f3f:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008f46:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10008f4d:	33 8c 24 74 10 00 00 	xor    ecx,DWORD PTR [esp+0x1074]
10008f54:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008f5b:	31 c1                	xor    ecx,eax
10008f5d:	89 cf                	mov    edi,ecx
10008f5f:	c1 ef 06             	shr    edi,0x6
10008f62:	89 cd                	mov    ebp,ecx
10008f64:	c1 ed 0e             	shr    ebp,0xe
10008f67:	89 ca                	mov    edx,ecx
10008f69:	c1 ea 16             	shr    edx,0x16
10008f6c:	8d 04 8d 00 00 00 00 	lea    eax,[ecx*4+0x0]
10008f73:	25 fc 03 00 00       	and    eax,0x3fc
10008f78:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f7e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f84:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008f8a:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008f8e:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008f95:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008f9c:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
10008fa3:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
10008faa:	31 d6                	xor    esi,edx
10008fac:	89 f2                	mov    edx,esi
10008fae:	c1 ea 06             	shr    edx,0x6
10008fb1:	89 f5                	mov    ebp,esi
10008fb3:	c1 ed 0e             	shr    ebp,0xe
10008fb6:	89 f0                	mov    eax,esi
10008fb8:	c1 e8 16             	shr    eax,0x16
10008fbb:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008fc2:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008fc8:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008fce:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008fd4:	25 fc 03 00 00       	and    eax,0x3fc
10008fd9:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008fdd:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008fe4:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10008feb:	33 8c 24 7c 10 00 00 	xor    ecx,DWORD PTR [esp+0x107c]
10008ff2:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008ff9:	31 c8                	xor    eax,ecx
10008ffb:	89 c7                	mov    edi,eax
10008ffd:	c1 ef 06             	shr    edi,0x6
10009000:	89 c5                	mov    ebp,eax
10009002:	c1 ed 0e             	shr    ebp,0xe
10009005:	89 c2                	mov    edx,eax
10009007:	c1 ea 16             	shr    edx,0x16
1000900a:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009011:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009017:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000901d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009023:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009029:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000902d:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009034:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000903b:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
10009042:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009049:	31 d6                	xor    esi,edx
1000904b:	89 f7                	mov    edi,esi
1000904d:	c1 ef 06             	shr    edi,0x6
10009050:	89 f5                	mov    ebp,esi
10009052:	c1 ed 0e             	shr    ebp,0xe
10009055:	89 f1                	mov    ecx,esi
10009057:	c1 e9 16             	shr    ecx,0x16
1000905a:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009061:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009067:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000906d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009073:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009079:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000907d:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009084:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000908b:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10009092:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009099:	31 c8                	xor    eax,ecx
1000909b:	89 c7                	mov    edi,eax
1000909d:	c1 ef 06             	shr    edi,0x6
100090a0:	89 c5                	mov    ebp,eax
100090a2:	c1 ed 0e             	shr    ebp,0xe
100090a5:	89 c2                	mov    edx,eax
100090a7:	c1 ea 16             	shr    edx,0x16
100090aa:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
100090b1:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100090b7:	81 e7 fc 03 00 00    	and    edi,0x3fc
100090bd:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100090c3:	81 e2 fc 03 00 00    	and    edx,0x3fc
100090c9:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100090cd:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100090d4:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100090db:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
100090e2:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100090e9:	31 d6                	xor    esi,edx
100090eb:	89 f7                	mov    edi,esi
100090ed:	c1 ef 06             	shr    edi,0x6
100090f0:	89 f5                	mov    ebp,esi
100090f2:	c1 ed 0e             	shr    ebp,0xe
100090f5:	89 f1                	mov    ecx,esi
100090f7:	c1 e9 16             	shr    ecx,0x16
100090fa:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009101:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009107:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000910d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009113:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009119:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000911d:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009124:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000912b:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10009132:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009139:	31 c8                	xor    eax,ecx
1000913b:	89 c7                	mov    edi,eax
1000913d:	c1 ef 06             	shr    edi,0x6
10009140:	89 c5                	mov    ebp,eax
10009142:	c1 ed 0e             	shr    ebp,0xe
10009145:	89 c2                	mov    edx,eax
10009147:	c1 ea 16             	shr    edx,0x16
1000914a:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009151:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009157:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000915d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009163:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009169:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000916d:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009174:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000917b:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
10009182:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009189:	31 d6                	xor    esi,edx
1000918b:	89 f7                	mov    edi,esi
1000918d:	c1 ef 06             	shr    edi,0x6
10009190:	89 f5                	mov    ebp,esi
10009192:	c1 ed 0e             	shr    ebp,0xe
10009195:	89 f1                	mov    ecx,esi
10009197:	c1 e9 16             	shr    ecx,0x16
1000919a:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
100091a1:	81 e2 fc 03 00 00    	and    edx,0x3fc
100091a7:	81 e7 fc 03 00 00    	and    edi,0x3fc
100091ad:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100091b3:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100091b9:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100091bd:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100091c4:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100091cb:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
100091d2:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
100091d9:	31 c8                	xor    eax,ecx
100091db:	89 c7                	mov    edi,eax
100091dd:	c1 ef 06             	shr    edi,0x6
100091e0:	89 c5                	mov    ebp,eax
100091e2:	c1 ed 0e             	shr    ebp,0xe
100091e5:	89 c2                	mov    edx,eax
100091e7:	c1 ea 16             	shr    edx,0x16
100091ea:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
100091f1:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100091f7:	81 e7 fc 03 00 00    	and    edi,0x3fc
100091fd:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009203:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009209:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000920d:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009214:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000921b:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
10009222:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009229:	31 d6                	xor    esi,edx
1000922b:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10009232:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10009235:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
10009238:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
1000923f:	39 d3                	cmp    ebx,edx
10009241:	0f 85 e1 fa ff ff    	jne    10008d28 <_crypt_blowfish_rn+0x2226>
10009247:	ff 4c 24 04          	dec    DWORD PTR [esp+0x4]
1000924b:	0f 85 a2 e9 ff ff    	jne    10007bf3 <_crypt_blowfish_rn+0x10f1>
10009251:	8b 84 24 58 10 00 00 	mov    eax,DWORD PTR [esp+0x1058]
10009258:	89 04 24             	mov    DWORD PTR [esp],eax
1000925b:	8b 84 24 5c 10 00 00 	mov    eax,DWORD PTR [esp+0x105c]
10009262:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10009266:	8b 84 24 60 10 00 00 	mov    eax,DWORD PTR [esp+0x1060]
1000926d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10009271:	8b 84 24 64 10 00 00 	mov    eax,DWORD PTR [esp+0x1064]
10009278:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000927c:	8b 84 24 68 10 00 00 	mov    eax,DWORD PTR [esp+0x1068]
10009283:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10009287:	8b 84 24 6c 10 00 00 	mov    eax,DWORD PTR [esp+0x106c]
1000928e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10009292:	8b 84 24 70 10 00 00 	mov    eax,DWORD PTR [esp+0x1070]
10009299:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000929d:	8b 84 24 74 10 00 00 	mov    eax,DWORD PTR [esp+0x1074]
100092a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100092a8:	8b 84 24 78 10 00 00 	mov    eax,DWORD PTR [esp+0x1078]
100092af:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100092b3:	8b 84 24 7c 10 00 00 	mov    eax,DWORD PTR [esp+0x107c]
100092ba:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
100092be:	8b 84 24 80 10 00 00 	mov    eax,DWORD PTR [esp+0x1080]
100092c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
100092c9:	8b 84 24 84 10 00 00 	mov    eax,DWORD PTR [esp+0x1084]
100092d0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100092d4:	8b 84 24 88 10 00 00 	mov    eax,DWORD PTR [esp+0x1088]
100092db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100092df:	8b 84 24 8c 10 00 00 	mov    eax,DWORD PTR [esp+0x108c]
100092e6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
100092ea:	8b 84 24 90 10 00 00 	mov    eax,DWORD PTR [esp+0x1090]
100092f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100092f5:	8b 84 24 94 10 00 00 	mov    eax,DWORD PTR [esp+0x1094]
100092fc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10009300:	8b 84 24 98 10 00 00 	mov    eax,DWORD PTR [esp+0x1098]
10009307:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
1000930b:	8b 84 24 9c 10 00 00 	mov    eax,DWORD PTR [esp+0x109c]
10009312:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10009316:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
1000931a:	89 5c 24 4c          	mov    DWORD PTR [esp+0x4c],ebx
1000931e:	8b 04 9d e0 a6 00 10 	mov    eax,DWORD PTR [ebx*4+0x1000a6e0]	10009321: R_386_32	.data
10009325:	8b 0c 9d e4 a6 00 10 	mov    ecx,DWORD PTR [ebx*4+0x1000a6e4]	10009328: R_386_32	.data
1000932c:	bb 40 00 00 00       	mov    ebx,0x40
10009331:	33 04 24             	xor    eax,DWORD PTR [esp]
10009334:	89 c7                	mov    edi,eax
10009336:	c1 ef 06             	shr    edi,0x6
10009339:	89 c5                	mov    ebp,eax
1000933b:	c1 ed 0e             	shr    ebp,0xe
1000933e:	89 c2                	mov    edx,eax
10009340:	c1 ea 16             	shr    edx,0x16
10009343:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000934a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009350:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009356:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000935c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009362:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009366:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000936d:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009374:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000937b:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
1000937f:	31 ca                	xor    edx,ecx
10009381:	89 d7                	mov    edi,edx
10009383:	c1 ef 06             	shr    edi,0x6
10009386:	89 d5                	mov    ebp,edx
10009388:	c1 ed 0e             	shr    ebp,0xe
1000938b:	89 d1                	mov    ecx,edx
1000938d:	c1 e9 16             	shr    ecx,0x16
10009390:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009397:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000939d:	81 e7 fc 03 00 00    	and    edi,0x3fc
100093a3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100093a9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100093af:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100093b3:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100093ba:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100093c1:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
100093c5:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100093cc:	31 c1                	xor    ecx,eax
100093ce:	89 cd                	mov    ebp,ecx
100093d0:	c1 ed 06             	shr    ebp,0x6
100093d3:	89 ce                	mov    esi,ecx
100093d5:	c1 ee 0e             	shr    esi,0xe
100093d8:	89 c8                	mov    eax,ecx
100093da:	c1 e8 16             	shr    eax,0x16
100093dd:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100093e4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100093ea:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100093f0:	81 e6 fc 03 00 00    	and    esi,0x3fc
100093f6:	25 fc 03 00 00       	and    eax,0x3fc
100093fb:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100093ff:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
10009406:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
1000940d:	33 54 24 0c          	xor    edx,DWORD PTR [esp+0xc]
10009411:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009418:	89 c6                	mov    esi,eax
1000941a:	31 d6                	xor    esi,edx
1000941c:	89 f5                	mov    ebp,esi
1000941e:	c1 ed 06             	shr    ebp,0x6
10009421:	89 f2                	mov    edx,esi
10009423:	c1 ea 0e             	shr    edx,0xe
10009426:	89 f0                	mov    eax,esi
10009428:	c1 e8 16             	shr    eax,0x16
1000942b:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009432:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009438:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000943e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009444:	25 fc 03 00 00       	and    eax,0x3fc
10009449:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000944d:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10009454:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
1000945b:	33 4c 24 10          	xor    ecx,DWORD PTR [esp+0x10]
1000945f:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009466:	31 c1                	xor    ecx,eax
10009468:	89 ca                	mov    edx,ecx
1000946a:	c1 ea 06             	shr    edx,0x6
1000946d:	89 cd                	mov    ebp,ecx
1000946f:	c1 ed 0e             	shr    ebp,0xe
10009472:	89 c8                	mov    eax,ecx
10009474:	c1 e8 16             	shr    eax,0x16
10009477:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000947e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009484:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000948a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009490:	25 fc 03 00 00       	and    eax,0x3fc
10009495:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009499:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100094a0:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
100094a7:	33 74 24 14          	xor    esi,DWORD PTR [esp+0x14]
100094ab:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100094b2:	31 f0                	xor    eax,esi
100094b4:	89 c7                	mov    edi,eax
100094b6:	c1 ef 06             	shr    edi,0x6
100094b9:	89 c5                	mov    ebp,eax
100094bb:	c1 ed 0e             	shr    ebp,0xe
100094be:	89 c2                	mov    edx,eax
100094c0:	c1 ea 16             	shr    edx,0x16
100094c3:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100094ca:	81 e6 fc 03 00 00    	and    esi,0x3fc
100094d0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100094d6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100094dc:	81 e2 fc 03 00 00    	and    edx,0x3fc
100094e2:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100094e6:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100094ed:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100094f4:	33 4c 24 18          	xor    ecx,DWORD PTR [esp+0x18]
100094f8:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100094ff:	31 ca                	xor    edx,ecx
10009501:	89 d7                	mov    edi,edx
10009503:	c1 ef 06             	shr    edi,0x6
10009506:	89 d5                	mov    ebp,edx
10009508:	c1 ed 0e             	shr    ebp,0xe
1000950b:	89 d1                	mov    ecx,edx
1000950d:	c1 e9 16             	shr    ecx,0x16
10009510:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009517:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000951d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009523:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009529:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000952f:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009533:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000953a:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009541:	33 44 24 1c          	xor    eax,DWORD PTR [esp+0x1c]
10009545:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000954c:	31 c8                	xor    eax,ecx
1000954e:	89 c7                	mov    edi,eax
10009550:	c1 ef 06             	shr    edi,0x6
10009553:	89 c5                	mov    ebp,eax
10009555:	c1 ed 0e             	shr    ebp,0xe
10009558:	89 c1                	mov    ecx,eax
1000955a:	c1 e9 16             	shr    ecx,0x16
1000955d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009564:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000956a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009570:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009576:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000957c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009580:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009587:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000958e:	33 54 24 20          	xor    edx,DWORD PTR [esp+0x20]
10009592:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009599:	31 ca                	xor    edx,ecx
1000959b:	89 d7                	mov    edi,edx
1000959d:	c1 ef 06             	shr    edi,0x6
100095a0:	89 d5                	mov    ebp,edx
100095a2:	c1 ed 0e             	shr    ebp,0xe
100095a5:	89 d1                	mov    ecx,edx
100095a7:	c1 e9 16             	shr    ecx,0x16
100095aa:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100095b1:	81 e6 fc 03 00 00    	and    esi,0x3fc
100095b7:	81 e7 fc 03 00 00    	and    edi,0x3fc
100095bd:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100095c3:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100095c9:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100095cd:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100095d4:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100095db:	33 44 24 24          	xor    eax,DWORD PTR [esp+0x24]
100095df:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100095e6:	31 c8                	xor    eax,ecx
100095e8:	89 c7                	mov    edi,eax
100095ea:	c1 ef 06             	shr    edi,0x6
100095ed:	89 c5                	mov    ebp,eax
100095ef:	c1 ed 0e             	shr    ebp,0xe
100095f2:	89 c1                	mov    ecx,eax
100095f4:	c1 e9 16             	shr    ecx,0x16
100095f7:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100095fe:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009604:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000960a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009610:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009616:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000961a:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009621:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009628:	33 54 24 28          	xor    edx,DWORD PTR [esp+0x28]
1000962c:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009633:	31 ca                	xor    edx,ecx
10009635:	89 d7                	mov    edi,edx
10009637:	c1 ef 06             	shr    edi,0x6
1000963a:	89 d5                	mov    ebp,edx
1000963c:	c1 ed 0e             	shr    ebp,0xe
1000963f:	89 d1                	mov    ecx,edx
10009641:	c1 e9 16             	shr    ecx,0x16
10009644:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000964b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009651:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009657:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000965d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009663:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009667:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000966e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009675:	33 44 24 2c          	xor    eax,DWORD PTR [esp+0x2c]
10009679:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009680:	31 c8                	xor    eax,ecx
10009682:	89 c7                	mov    edi,eax
10009684:	c1 ef 06             	shr    edi,0x6
10009687:	89 c5                	mov    ebp,eax
10009689:	c1 ed 0e             	shr    ebp,0xe
1000968c:	89 c1                	mov    ecx,eax
1000968e:	c1 e9 16             	shr    ecx,0x16
10009691:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009698:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000969e:	81 e7 fc 03 00 00    	and    edi,0x3fc
100096a4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100096aa:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100096b0:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100096b4:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100096bb:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100096c2:	33 54 24 30          	xor    edx,DWORD PTR [esp+0x30]
100096c6:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100096cd:	31 ca                	xor    edx,ecx
100096cf:	89 d7                	mov    edi,edx
100096d1:	c1 ef 06             	shr    edi,0x6
100096d4:	89 d5                	mov    ebp,edx
100096d6:	c1 ed 0e             	shr    ebp,0xe
100096d9:	89 d1                	mov    ecx,edx
100096db:	c1 e9 16             	shr    ecx,0x16
100096de:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100096e5:	81 e6 fc 03 00 00    	and    esi,0x3fc
100096eb:	81 e7 fc 03 00 00    	and    edi,0x3fc
100096f1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100096f7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100096fd:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009701:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009708:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000970f:	33 44 24 34          	xor    eax,DWORD PTR [esp+0x34]
10009713:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000971a:	31 c8                	xor    eax,ecx
1000971c:	89 c7                	mov    edi,eax
1000971e:	c1 ef 06             	shr    edi,0x6
10009721:	89 c5                	mov    ebp,eax
10009723:	c1 ed 0e             	shr    ebp,0xe
10009726:	89 c1                	mov    ecx,eax
10009728:	c1 e9 16             	shr    ecx,0x16
1000972b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009732:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009738:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000973e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009744:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000974a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000974e:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009755:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000975c:	33 54 24 38          	xor    edx,DWORD PTR [esp+0x38]
10009760:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009767:	31 ca                	xor    edx,ecx
10009769:	89 d7                	mov    edi,edx
1000976b:	c1 ef 06             	shr    edi,0x6
1000976e:	89 d5                	mov    ebp,edx
10009770:	c1 ed 0e             	shr    ebp,0xe
10009773:	89 d6                	mov    esi,edx
10009775:	c1 ee 16             	shr    esi,0x16
10009778:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000977f:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009785:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000978b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009791:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009797:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000979b:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
100097a2:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
100097a9:	33 44 24 3c          	xor    eax,DWORD PTR [esp+0x3c]
100097ad:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
100097b4:	31 f0                	xor    eax,esi
100097b6:	89 c5                	mov    ebp,eax
100097b8:	c1 ed 06             	shr    ebp,0x6
100097bb:	89 c1                	mov    ecx,eax
100097bd:	c1 e9 0e             	shr    ecx,0xe
100097c0:	89 c6                	mov    esi,eax
100097c2:	c1 ee 16             	shr    esi,0x16
100097c5:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100097cc:	81 e7 fc 03 00 00    	and    edi,0x3fc
100097d2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100097d8:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100097de:	81 e6 fc 03 00 00    	and    esi,0x3fc
100097e4:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
100097e8:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
100097ef:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
100097f6:	33 54 24 40          	xor    edx,DWORD PTR [esp+0x40]
100097fa:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10009801:	89 f1                	mov    ecx,esi
10009803:	31 d1                	xor    ecx,edx
10009805:	33 44 24 44          	xor    eax,DWORD PTR [esp+0x44]
10009809:	4b                   	dec    ebx
1000980a:	0f 85 21 fb ff ff    	jne    10009331 <_crypt_blowfish_rn+0x282f>
10009810:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
10009814:	89 84 9c e8 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10e8],eax
1000981b:	89 8c 9c ec 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10ec],ecx
10009822:	83 44 24 48 02       	add    DWORD PTR [esp+0x48],0x2
10009827:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000982b:	83 f8 06             	cmp    eax,0x6
1000982e:	0f 85 e2 fa ff ff    	jne    10009316 <_crypt_blowfish_rn+0x2814>
10009834:	b9 07 00 00 00       	mov    ecx,0x7
10009839:	8b bc 24 1c 11 00 00 	mov    edi,DWORD PTR [esp+0x111c]
10009840:	8b b4 24 18 11 00 00 	mov    esi,DWORD PTR [esp+0x1118]
10009847:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10009849:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
10009850:	0f be 40 1c          	movsx  eax,BYTE PTR [eax+0x1c]
10009854:	8a 80 a0 b7 00 10    	mov    al,BYTE PTR [eax+0x1000b7a0]	10009856: R_386_32	.data
1000985a:	83 e0 30             	and    eax,0x30
1000985d:	8a 80 60 b7 00 10    	mov    al,BYTE PTR [eax+0x1000b760]	1000985f: R_386_32	.data
10009863:	88 04 24             	mov    BYTE PTR [esp],al
10009866:	8b 9c 24 1c 11 00 00 	mov    ebx,DWORD PTR [esp+0x111c]
1000986d:	88 43 1c             	mov    BYTE PTR [ebx+0x1c],al
10009870:	6a 06                	push   0x6
10009872:	8d 74 24 5c          	lea    esi,[esp+0x5c]
10009876:	8d 9c 24 ec 10 00 00 	lea    ebx,[esp+0x10ec]
1000987d:	53                   	push   ebx
1000987e:	e8 f5 d1 ff ff       	call   10006a78 <BF_swap>
10009883:	6a 17                	push   0x17
10009885:	53                   	push   ebx
10009886:	8b 84 24 2c 11 00 00 	mov    eax,DWORD PTR [esp+0x112c]
1000988d:	83 c0 1d             	add    eax,0x1d
10009890:	50                   	push   eax
10009891:	e8 3d d1 ff ff       	call   100069d3 <BF_encode>
10009896:	8b 84 24 30 11 00 00 	mov    eax,DWORD PTR [esp+0x1130]
1000989d:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
100098a1:	68 a8 10 00 00       	push   0x10a8
100098a6:	56                   	push   esi
100098a7:	e8 0b d0 ff ff       	call   100068b7 <clean>
100098ac:	83 c4 1c             	add    esp,0x1c
100098af:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
100098b6:	eb 29                	jmp    100098e1 <_crypt_blowfish_rn+0x2ddf>
100098b8:	c7 05 00 00 00 00 22 00 00 00 	mov    DWORD PTR ds:0x0,0x22	100098ba: R_386_32	_bcrypt_errno
100098c2:	b8 00 00 00 00       	mov    eax,0x0
100098c7:	eb 18                	jmp    100098e1 <_crypt_blowfish_rn+0x2ddf>
100098c9:	80 fa 31             	cmp    dl,0x31
100098cc:	0f 8e a3 d2 ff ff    	jle    10006b75 <_crypt_blowfish_rn+0x73>
100098d2:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	100098d4: R_386_32	_bcrypt_errno
100098dc:	b8 00 00 00 00       	mov    eax,0x0
100098e1:	81 c4 00 11 00 00    	add    esp,0x1100
100098e7:	5b                   	pop    ebx
100098e8:	5e                   	pop    esi
100098e9:	5f                   	pop    edi
100098ea:	5d                   	pop    ebp
100098eb:	c3                   	ret    
100098ec:	6a 10                	push   0x10
100098ee:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
100098f5:	50                   	push   eax
100098f6:	e8 bc cf ff ff       	call   100068b7 <clean>
100098fb:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	100098fd: R_386_32	_bcrypt_errno
10009905:	83 c4 08             	add    esp,0x8
10009908:	b8 00 00 00 00       	mov    eax,0x0
1000990d:	eb d2                	jmp    100098e1 <_crypt_blowfish_rn+0x2ddf>

1000990f <_crypt_gensalt_blowfish_rn>:
1000990f:	53                   	push   ebx
10009910:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10009914:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10009918:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
1000991d:	7e 19                	jle    10009938 <_crypt_gensalt_blowfish_rn+0x29>
1000991f:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
10009924:	0f 8e 88 00 00 00    	jle    100099b2 <_crypt_gensalt_blowfish_rn+0xa3>
1000992a:	85 c9                	test   ecx,ecx
1000992c:	74 33                	je     10009961 <_crypt_gensalt_blowfish_rn+0x52>
1000992e:	8d 41 fc             	lea    eax,[ecx-0x4]
10009931:	83 f8 1b             	cmp    eax,0x1b
10009934:	76 30                	jbe    10009966 <_crypt_gensalt_blowfish_rn+0x57>
10009936:	eb 07                	jmp    1000993f <_crypt_gensalt_blowfish_rn+0x30>
10009938:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000993d:	7e 03                	jle    10009942 <_crypt_gensalt_blowfish_rn+0x33>
1000993f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
10009942:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
10009947:	7e 11                	jle    1000995a <_crypt_gensalt_blowfish_rn+0x4b>
10009949:	b8 16 00 00 00       	mov    eax,0x16
1000994e:	a3 00 00 00 00       	mov    ds:0x0,eax	1000994f: R_386_32	_bcrypt_errno
10009953:	b8 00 00 00 00       	mov    eax,0x0
10009958:	eb 56                	jmp    100099b0 <_crypt_gensalt_blowfish_rn+0xa1>
1000995a:	b8 22 00 00 00       	mov    eax,0x22
1000995f:	eb ed                	jmp    1000994e <_crypt_gensalt_blowfish_rn+0x3f>
10009961:	b9 05 00 00 00       	mov    ecx,0x5
10009966:	c6 03 24             	mov    BYTE PTR [ebx],0x24
10009969:	c6 43 01 32          	mov    BYTE PTR [ebx+0x1],0x32
1000996d:	c6 43 02 61          	mov    BYTE PTR [ebx+0x2],0x61
10009971:	c6 43 03 24          	mov    BYTE PTR [ebx+0x3],0x24
10009975:	b8 cd cc cc cc       	mov    eax,0xcccccccd
1000997a:	f7 e1                	mul    ecx
1000997c:	89 d0                	mov    eax,edx
1000997e:	c1 e8 03             	shr    eax,0x3
10009981:	8d 50 30             	lea    edx,[eax+0x30]
10009984:	88 53 04             	mov    BYTE PTR [ebx+0x4],dl
10009987:	8d 04 80             	lea    eax,[eax+eax*4]
1000998a:	01 c0                	add    eax,eax
1000998c:	29 c1                	sub    ecx,eax
1000998e:	83 c1 30             	add    ecx,0x30
10009991:	88 4b 05             	mov    BYTE PTR [ebx+0x5],cl
10009994:	c6 43 06 24          	mov    BYTE PTR [ebx+0x6],0x24
10009998:	6a 10                	push   0x10
1000999a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000999e:	8d 43 07             	lea    eax,[ebx+0x7]
100099a1:	50                   	push   eax
100099a2:	e8 2c d0 ff ff       	call   100069d3 <BF_encode>
100099a7:	c6 43 1d 00          	mov    BYTE PTR [ebx+0x1d],0x0
100099ab:	83 c4 0c             	add    esp,0xc
100099ae:	89 d8                	mov    eax,ebx
100099b0:	5b                   	pop    ebx
100099b1:	c3                   	ret    
100099b2:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
100099b7:	7f 86                	jg     1000993f <_crypt_gensalt_blowfish_rn+0x30>
100099b9:	b8 22 00 00 00       	mov    eax,0x22
100099be:	eb 8e                	jmp    1000994e <_crypt_gensalt_blowfish_rn+0x3f>

100099c0 <bcrypt_gensalt>:
100099c0:	57                   	push   edi
100099c1:	56                   	push   esi
100099c2:	53                   	push   ebx
100099c3:	83 ec 10             	sub    esp,0x10
100099c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
100099ca:	89 e3                	mov    ebx,esp
100099cc:	8d 74 24 10          	lea    esi,[esp+0x10]
100099d0:	e8 fc ff ff ff       	call   100099d1 <bcrypt_gensalt+0x11>	100099d1: R_386_PC32	_bcrypt_rand
100099d5:	88 03                	mov    BYTE PTR [ebx],al
100099d7:	43                   	inc    ebx
100099d8:	39 f3                	cmp    ebx,esi
100099da:	75 f4                	jne    100099d0 <bcrypt_gensalt+0x10>
100099dc:	8d 47 fc             	lea    eax,[edi-0x4]
100099df:	83 f8 1b             	cmp    eax,0x1b
100099e2:	76 05                	jbe    100099e9 <bcrypt_gensalt+0x29>
100099e4:	bf 0c 00 00 00       	mov    edi,0xc
100099e9:	83 ec 0c             	sub    esp,0xc
100099ec:	6a 40                	push   0x40
100099ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100099f2:	6a 10                	push   0x10
100099f4:	8d 44 24 18          	lea    eax,[esp+0x18]
100099f8:	50                   	push   eax
100099f9:	57                   	push   edi
100099fa:	e8 10 ff ff ff       	call   1000990f <_crypt_gensalt_blowfish_rn>
100099ff:	85 c0                	test   eax,eax
10009a01:	0f 94 c0             	sete   al
10009a04:	0f b6 c0             	movzx  eax,al
10009a07:	83 c4 30             	add    esp,0x30
10009a0a:	5b                   	pop    ebx
10009a0b:	5e                   	pop    esi
10009a0c:	5f                   	pop    edi
10009a0d:	c3                   	ret    

10009a0e <bcrypt_hashpw>:
10009a0e:	6a 40                	push   0x40
10009a10:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10009a14:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10009a18:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10009a1c:	e8 e1 d0 ff ff       	call   10006b02 <_crypt_blowfish_rn>
10009a21:	83 c4 10             	add    esp,0x10
10009a24:	85 c0                	test   eax,eax
10009a26:	0f 94 c0             	sete   al
10009a29:	0f b6 c0             	movzx  eax,al
10009a2c:	c3                   	ret    
10009a2d:	66 90                	xchg   ax,ax
10009a2f:	90                   	nop

10009a30 <TERMINAL_KEYBUFFER_IN_SIZE>:
10009a30:	80 00 00 00                                         ....

10009a34 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10009a34:	80 00 00 00 2e 00 2e 2e 00 2f 00 43 6f 75 6c 64     ........./.Could
10009a44:	6e 27 74 20 6f 70 65 6e 20 62 61 73 65 20 70 61     n't open base pa
10009a54:	74 68 2e 0a 00 25 73 20 2d 3e 20 25 73 0a 00 43     th...%s -> %s..C
10009a64:	4f 55 4c 44 20 4e 4f 54 20 43 52 45 41 54 45 00     OULD NOT CREATE.
10009a74:	43 4f 55 4c 44 20 4e 4f 54 20 43 4f 50 59 00 4e     COULD NOT COPY.N
10009a84:	4f 20 4d 45 4d 4f 52 59 00 42 61 63 6b 75 70 00     O MEMORY.Backup.
10009a94:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
10009aa4:	2f 42 61 63 6b 75 70 2f 00 30 31 32 33 34 35 36     /Backup/.0123456
10009ab4:	37 38 39 41 42 43 44 45 46 00 43 3a 2f 55 73 65     789ABCDEF.C:/Use
10009ac4:	72 73 2f 00 2f 44 65 73 6b 74 6f 70 00 2f 44 6f     rs/./Desktop./Do
10009ad4:	63 75 6d 65 6e 74 73 00 2f 44 6f 77 6e 6c 6f 61     cuments./Downloa
10009ae4:	64 73 00 2f 50 68 6f 74 6f 73 00 2f 54 72 61 73     ds./Photos./Tras
10009af4:	68 20 42 69 6e 00 2f 4d 75 73 69 63 00 2f 4d 6f     h Bin./Music./Mo
10009b04:	76 69 65 73 00 43 3a 2f 42 61 6e 61 6e 61 2f 52     vies.C:/Banana/R
10009b14:	65 67 69 73 74 72 79 2f 55 73 65 72 2f 00 00 00     egistry/User/...
10009b24:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
10009b34:	72 79 2f 44 65 66 61 75 6c 74 55 73 65 72 00 00     ry/DefaultUser..
10009b44:	43 68 65 63 6b 69 6e 67 0a 20 73 79 73 74 65 6d     Checking. system
10009b54:	0a 20 72 65 71 75 69 72 65 6d 65 6e 74 73 0a 0a     . requirements..
10009b64:	20 4c 65 67 61 6c 0a 20 6e 6f 74 69 63 65 73 0a      Legal. notices.
10009b74:	0a 20 43 68 6f 6f 73 69 6e 67 20 61 0a 20 70 61     . Choosing a. pa
10009b84:	72 74 69 74 69 6f 6e 0a 0a 20 46 6f 72 6d 61 74     rtition.. Format
10009b94:	74 69 6e 67 0a 0a 20 43 6f 70 79 69 6e 67 20 66     ting.. Copying f
10009ba4:	69 6c 65 73 0a 0a 20 52 65 73 74 61 72 74 69 6e     iles.. Restartin
10009bb4:	67 0a 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72     g. your computer
10009bc4:	0a 0a 00 20 46 69 6e 61 6c 69 73 69 6e 67 20 74     ... Finalising t
10009bd4:	68 65 0a 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     he. installation
10009be4:	00 00 00 00 50 6c 65 61 73 65 20 77 61 69 74 20     ....Please wait 
10009bf4:	77 68 69 6c 65 20 74 68 65 20 69 6e 73 74 61 6c     while the instal
10009c04:	6c 20 66 69 6e 69 73 68 65 73 2e 00 10 20 00 20     l finishes... . 
10009c14:	20 00 41 6c 6c 6f 63 61 74 69 6e 67 20 74 68 65      .Allocating the
10009c24:	20 73 77 61 70 66 69 6c 65 00 55 70 64 61 74 69      swapfile.Updati
10009c34:	6e 67 20 74 68 65 20 72 65 67 69 73 74 72 79 00     ng the registry.
10009c44:	43 72 65 61 74 69 6e 67 20 75 73 65 72 20 61 63     Creating user ac
10009c54:	63 6f 75 6e 74 00 49 6e 73 74 61 6c 6c 69 6e 67     count.Installing
10009c64:	20 70 61 63 6b 61 67 65 73 00 42 61 63 6b 69 6e      packages.Backin
10009c74:	67 20 75 70 20 73 79 73 74 65 6d 20 66 69 6c 65     g up system file
10009c84:	73 00 46 69 6e 69 73 68 69 6e 67 20 74 6f 75 63     s.Finishing touc
10009c94:	68 65 73 00 51 51 2d 30 30 30 2d 30 30 30 2d 30     hes.QQ-000-000-0
10009ca4:	30 30 2d 51 00 00 00 00 43 3a 2f 42 61 6e 61 6e     00-Q....C:/Banan
10009cb4:	61 2f 53 79 73 74 65 6d 2f 74 69 6d 65 7a 6f 6e     a/System/timezon
10009cc4:	65 73 2e 74 78 74 00 20 00 2e 2e 2e 20 00 00 00     es.txt. .... ...
10009cd4:	53 65 74 74 69 6e 67 20 75 70 20 74 68 65 20 73     Setting up the s
10009ce4:	79 73 74 65 6d 20 66 6f 72 20 74 68 65 20 66 69     ystem for the fi
10009cf4:	72 73 74 20 74 69 6d 65 00 0a 0a 0a 0a 0a 0a 00     rst time........
10009d04:	54 65 73 74 00 41 41 2d 30 30 30 30 30 2d 30 30     Test.AA-00000-00
10009d14:	30 30 30 2d 41 00 57 57 2d 38 38 33 38 38 2d 35     000-A.WW-88388-5
10009d24:	35 35 35 35 2d 4e 00 42 61 6e 61 6e 61 20 53 65     5555-N.Banana Se
10009d34:	74 75 70 00 50 6c 65 61 73 65 20 65 6e 74 65 72     tup.Please enter
10009d44:	20 79 6f 75 72 20 64 65 74 61 69 6c 73 2e 20 50      your details. P
10009d54:	72 65 73 73 20 54 41 42 20 74 6f 20 73 77 69 74     ress TAB to swit
10009d64:	63 68 00 62 65 74 77 65 65 6e 20 66 69 65 6c 64     ch.between field
10009d74:	73 2e 00 4e 61 6d 65 00 43 6f 6d 70 61 6e 79 00     s..Name.Company.
10009d84:	50 61 73 73 77 6f 72 64 00 43 6f 6e 66 69 72 6d     Password.Confirm
10009d94:	00 70 61 73 73 77 6f 72 64 00 00 00 20 20 20 20     .password...    
10009da4:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10009db4:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10009dc4:	00 20 11 00 20 20 20 00 2a 00 50 72 65 73 73 20     . ..   .*.Press 
10009dd4:	45 4e 54 45 52 20 74 6f 20 73 75 62 6d 69 74 00     ENTER to submit.
10009de4:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10009df4:	20 20 20 20 20 20 00 20 20 20 4f 4b 20 20 20 00           .   OK   .
10009e04:	20 20 11 00 43 4f 55 4c 44 20 4e 4f 54 20 53 41       ..COULD NOT SA
10009e14:	56 45 00 59 4f 55 52 20 50 41 53 53 57 4f 52 44     VE.YOUR PASSWORD
10009e24:	20 28 41 29 00 59 4f 55 52 20 50 41 53 53 57 4f      (A).YOUR PASSWO
10009e34:	52 44 20 28 42 29 00 44 61 74 65 20 61 6e 64 20     RD (B).Date and 
10009e44:	54 69 6d 65 00 31 34 2f 30 35 2f 32 30 32 31 20     Time.14/05/2021 
10009e54:	31 38 3a 35 35 3a 30 30 00 00 00 00 50 6c 65 61     18:55:00....Plea
10009e64:	73 65 20 65 6e 74 65 72 20 74 68 65 20 63 75 72     se enter the cur
10009e74:	72 65 6e 74 20 64 61 74 65 20 61 6e 64 20 74 69     rent date and ti
10009e84:	6d 65 2c 00 61 6e 64 20 74 68 65 6e 20 70 72 65     me,.and then pre
10009e94:	73 73 20 45 4e 54 45 52 2e 00 44 44 2f 4d 4d 2f     ss ENTER..DD/MM/
10009ea4:	59 59 59 59 20 48 48 3a 4d 4d 3a 53 53 00 45 53     YYYY HH:MM:SS.ES
10009eb4:	43 3a 20 47 6f 20 62 61 63 6b 20 61 20 73 63 72     C: Go back a scr
10009ec4:	65 65 6e 00 50 6c 65 61 73 65 20 73 65 6c 65 63     een.Please selec
10009ed4:	74 20 79 6f 75 72 20 74 69 6d 65 7a 6f 6e 65 20     t your timezone 
10009ee4:	61 6e 64 20 74 68 65 6e 20 70 72 65 73 73 20 45     and then press E
10009ef4:	4e 54 45 52 2e 00 54 69 6d 65 7a 6f 6e 65 3a 20     NTER..Timezone: 
10009f04:	25 64 2e 30 0a 00 55 73 65 72 20 49 6e 74 65 72     %d.0..User Inter
10009f14:	66 61 63 65 00 00 00 00 50 6c 65 61 73 65 20 73     face....Please s
10009f24:	65 6c 65 63 74 20 74 68 65 20 75 73 65 72 20 69     elect the user i
10009f34:	6e 74 65 72 66 61 63 65 20 79 6f 75 20 77 61 6e     nterface you wan
10009f44:	74 20 42 61 6e 61 6e 61 00 00 00 00 74 6f 20 62     t Banana....to b
10009f54:	6f 6f 74 20 69 6e 74 6f 20 62 79 20 64 65 66 61     oot into by defa
10009f64:	75 6c 74 20 77 68 65 6e 20 79 6f 75 20 73 74 61     ult when you sta
10009f74:	72 74 20 74 68 65 20 63 6f 6d 70 75 74 65 72 2e     rt the computer.
10009f84:	00 49 6e 76 61 6c 69 64 20 50 72 6f 64 75 63 74     .Invalid Product
10009f94:	20 4b 65 79 00 00 00 00 59 6f 75 20 64 6f 20 6e      Key....You do n
10009fa4:	6f 74 20 68 61 76 65 20 61 20 76 61 6c 69 64 20     ot have a valid 
10009fb4:	70 72 6f 64 75 63 74 20 6b 65 79 2e 0a 00 00 00     product key.....
10009fc4:	59 6f 75 20 6e 65 65 64 20 61 20 76 61 6c 69 64     You need a valid
10009fd4:	20 70 72 6f 64 75 63 74 20 6b 65 79 20 69 6e 20      product key in 
10009fe4:	6f 72 64 65 72 20 74 6f 00 75 73 65 20 42 61 6e     order to.use Ban
10009ff4:	61 6e 61 2e 00 00 00 00 50 72 65 73 73 20 45 4e     ana.....Press EN
1000a004:	54 45 52 20 74 6f 20 72 65 2d 65 6e 74 65 72 20     TER to re-enter 
1000a014:	79 6f 75 72 20 70 72 6f 64 75 63 74 20 6b 65 79     your product key
1000a024:	2e 00 50 72 6f 64 75 63 74 20 4b 65 79 00 00 00     ..Product Key...
1000a034:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 79 6f 75     Please enter you
1000a044:	72 20 70 72 6f 64 75 63 74 20 6b 65 79 20 62 65     r product key be
1000a054:	6c 6f 77 2c 00 00 00 00 54 68 65 20 65 6e 74 65     low,....The ente
1000a064:	72 65 64 20 70 72 6f 64 75 63 74 20 6b 65 79 20     red product key 
1000a074:	77 61 73 20 69 6e 76 61 6c 69 64 2e 00 00 00 00     was invalid.....
1000a084:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 20 74 6f     Press any key to
1000a094:	20 63 6f 6e 74 69 6e 75 65 20 61 6e 64 20 74 68      continue and th
1000a0a4:	65 6e 00 00 65 6e 74 65 72 20 74 68 65 20 70 72     en..enter the pr
1000a0b4:	6f 64 75 63 74 20 6b 65 79 20 63 6f 72 72 65 63     oduct key correc
1000a0c4:	74 6c 79 2e 00 46 69 6e 61 6c 69 73 69 6e 67 20     tly..Finalising 
1000a0d4:	49 6e 73 74 61 6c 6c 61 74 69 6f 6e 00 40 6d 65     Installation.@me
1000a0e4:	6d 6f 72 79 3a 73 77 61 70 66 69 6c 65 00 73 79     mory:swapfile.sy
1000a0f4:	73 74 65 6d 00 43 3a 2f 42 61 6e 61 6e 61 2f 52     stem.C:/Banana/R
1000a104:	65 67 69 73 74 72 79 2f 53 79 73 74 65 6d 00 43     egistry/System.C
1000a114:	3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74 72     :/Banana/Registr
1000a124:	79 2f 55 73 65 72 00 00 43 3a 2f 42 61 6e 61 6e     y/User..C:/Banan
1000a134:	61 2f 52 65 67 69 73 74 72 79 2f 44 65 66 61 75     a/Registry/Defau
1000a144:	6c 74 53 79 73 74 65 6d 00 00 00 00 20 42 6f 6f     ltSystem.... Boo
1000a154:	74 20 74 6f 20 63 6f 6d 6d 61 6e 64 20 6c 69 6e     t to command lin
1000a164:	65 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     e               
1000a174:	00 00 00 00 20 42 6f 6f 74 20 74 6f 20 67 72 61     .... Boot to gra
1000a184:	70 68 69 63 61 6c 20 69 6e 74 65 72 66 61 63 65     phical interface
1000a194:	20 28 56 47 41 29 20 20 00 00 00 00 20 42 6f 6f      (VGA)  .... Boo
1000a1a4:	74 20 74 6f 20 67 72 61 70 68 69 63 61 6c 20 69     t to graphical i
1000a1b4:	6e 74 65 72 66 61 63 65 20 28 56 45 53 41 29 20     nterface (VESA) 
1000a1c4:	00 00 00 00 50 a1 00 10 78 a1 00 10 a0 a1 00 10     ....P...x.......	1000a1c8: R_386_32	.text
	1000a1cc: R_386_32	.text
	1000a1d0: R_386_32	.text
1000a1d4:	4c 6f 61 64 69 6e 67 20 65 78 74 65 6e 73 69 6f     Loading extensio
1000a1e4:	6e 73 2e 2e 2e 00 0a 0a 3a 0a 00 2f 25 73 0a 00     ns......:../%s..
1000a1f4:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000a204:	2f 73 65 74 75 70 69 73 64 2e 6f 6e 65 00 53 59     /setupisd.one.SY
1000a214:	53 49 4e 49 54 20 46 41 49 4c 55 52 45 00 43 3a     SINIT FAILURE.C:
1000a224:	2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 63     /Banana/System/c
1000a234:	6f 6d 6d 61 6e 64 2e 65 78 65 00 43 3a 2f 44 45     ommand.exe.C:/DE
1000a244:	2e 42 55 47 00 00 00 00 43 3a 2f 42 61 6e 61 6e     .BUG....C:/Banan
1000a254:	61 2f 52 65 67 69 73 74 72 79 2f 53 79 73 74 65     a/Registry/Syste
1000a264:	6d 2f 53 59 53 54 45 4d 2e 52 45 47 00 42 41 4e     m/SYSTEM.REG.BAN
1000a274:	41 4e 41 00 72 65 67 73 61 66 65 6e 61 6d 65 20     ANA.regsafename 
1000a284:	3d 20 25 73 0a 00 42 41 4e 41 4e 41 2f 55 53 45     = %s..BANANA/USE
1000a294:	52 53 2f 00 75 73 65 72 42 61 73 65 50 61 74 68     RS/.userBasePath
1000a2a4:	20 3d 20 25 73 0a 00 53 45 54 55 50 00 42 4f 4f      = %s..SETUP.BOO
1000a2b4:	54 00 54 49 4d 45 00 55 53 45 52 53 00 42 41 4e     T.TIME.USERS.BAN
1000a2c4:	41 4e 41 2f 55 53 45 52 53 00 42 41 4e 41 4e 41     ANA/USERS.BANANA
1000a2d4:	2f 54 49 4d 45 00 54 49 4d 45 5a 4f 4e 45 00 42     /TIME.TIMEZONE.B
1000a2e4:	41 4e 41 4e 41 2f 53 45 54 55 50 00 4e 41 4d 45     ANANA/SETUP.NAME
1000a2f4:	00 43 4f 4d 50 41 4e 59 00 50 52 4f 44 55 43 54     .COMPANY.PRODUCT
1000a304:	4b 45 59 00 53 41 4c 54 00 50 41 53 53 57 4f 52     KEY.SALT.PASSWOR
1000a314:	44 00 44 49 53 50 4c 41 59 4e 41 4d 45 00 42 41     D.DISPLAYNAME.BA
1000a324:	4e 41 4e 41 2f 42 4f 4f 54 00 41 55 54 4f 47 55     NANA/BOOT.AUTOGU
1000a334:	49 00 54 49 4d 45 5a 4f 4e 45 49 44 00 42 41 4e     I.TIMEZONEID.BAN
1000a344:	41 4e 41 2f 54 49 4d 45 2f 54 49 4d 45 5a 4f 4e     ANA/TIME/TIMEZON
1000a354:	45 00 42 41 4e 41 4e 41 2f 53 45 54 55 50 2f 4e     E.BANANA/SETUP/N
1000a364:	41 4d 45 00 42 41 4e 41 4e 41 2f 53 45 54 55 50     AME.BANANA/SETUP
1000a374:	2f 43 4f 4d 50 41 4e 59 00 42 41 4e 41 4e 41 2f     /COMPANY.BANANA/
1000a384:	53 45 54 55 50 2f 50 52 4f 44 55 43 54 4b 45 59     SETUP/PRODUCTKEY
1000a394:	00 2f 50 41 53 53 57 4f 52 44 00 2f 53 41 4c 54     ./PASSWORD./SALT
1000a3a4:	00 2f 44 49 53 50 4c 41 59 4e 41 4d 45 00 43 3a     ./DISPLAYNAME.C:
1000a3b4:	2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 4b     /Banana/System/K
1000a3c4:	45 52 4e 45 4c 33 32 2e 45 58 45 00 43 3a 2f 42     ERNEL32.EXE.C:/B
1000a3d4:	61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 4b 52 4e     anana/System/KRN
1000a3e4:	4c 42 4b 55 50 2e 45 58 45 00 43 3a 2f 42 61 6e     LBKUP.EXE.C:/Ban
1000a3f4:	61 6e 61 2f 53 79 73 74 65 6d 2f 4b 52 4e 4c 50     ana/System/KRNLP
1000a404:	32 2e 45 58 45 00 00 00 54 68 65 20 69 6e 73 74     2.EXE...The inst
1000a414:	61 6c 6c 61 74 69 6f 6e 20 68 61 73 20 62 65 65     allation has bee
1000a424:	6e 20 63 6f 6d 70 6c 65 74 65 64 2e 0a 00 00 00     n completed.....
1000a434:	50 6c 65 61 73 65 20 70 72 65 73 73 20 45 4e 54     Please press ENT
1000a444:	45 52 20 74 6f 20 72 65 73 74 61 72 74 20 79 6f     ER to restart yo
1000a454:	75 72 20 63 6f 6d 70 75 74 65 72 00 61 6e 64 20     ur computer.and 
1000a464:	73 74 61 72 74 20 42 61 6e 61 6e 61 2e 00 00 00     start Banana....
1000a474:	50 4c 45 41 53 45 20 4d 41 4e 55 41 4c 4c 59 20     PLEASE MANUALLY 
1000a484:	52 45 53 54 41 52 54 20 59 4f 55 52 20 43 4f 4d     RESTART YOUR COM
1000a494:	50 55 54 45 52 00 42 41 4e 41 4e 41 2f 42 4f 4f     PUTER.BANANA/BOO
1000a4a4:	54 2f 41 55 54 4f 47 55 49 00 50 72 6f 64 75 63     T/AUTOGUI.Produc
1000a4b4:	74 20 4b 65 79 20 55 70 64 61 74 65 64 00 00 00     t Key Updated...
1000a4c4:	59 6f 75 72 20 70 72 6f 64 75 63 74 20 6b 65 79     Your product key
1000a4d4:	20 68 61 73 20 62 65 65 6e 20 75 70 64 61 74 65      has been update
1000a4e4:	64 2e 0a 00 20 43 72 65 61 74 65 20 6e 65 77 20     d... Create new 
1000a4f4:	75 73 65 72 2e 2e 2e 20 20 20 20 20 20 20 20 20     user...         
1000a504:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000a514:	20 20 20 20 20 20 00 4c 6f 67 69 6e 00 00 00 00           .Login....
1000a524:	50 6c 65 61 73 65 20 73 65 6c 65 63 74 20 79 6f     Please select yo
1000a534:	75 72 20 75 73 65 72 6e 61 6d 65 20 61 6e 64 20     ur username and 
1000a544:	70 72 65 73 73 20 45 4e 54 45 52 2e 00 00 00 00     press ENTER.....
1000a554:	50 6c 65 61 73 65 20 74 79 70 65 20 79 6f 75 72     Please type your
1000a564:	20 70 61 73 73 77 6f 72 64 20 61 6e 64 20 70 72      password and pr
1000a574:	65 73 73 20 45 4e 54 45 52 00 6f 72 20 70 72 65     ess ENTER.or pre
1000a584:	73 73 20 45 53 43 20 74 6f 20 67 6f 20 62 61 63     ss ESC to go bac
1000a594:	6b 2e 00 00 52 45 51 55 49 52 45 44 3a 20 25 73     k...REQUIRED: %s
1000a5a4:	0a 47 4f 54 3a 20 25 73 0a 53 41 4c 54 3a 20 25     .GOT: %s.SALT: %
1000a5b4:	73 0a 00 00 49 74 20 69 73 20 73 61 66 65 20 74     s...It is safe t
1000a5c4:	6f 20 74 75 72 6e 20 6f 66 66 20 79 6f 75 72 20     o turn off your 
1000a5d4:	50 43 00 63 61 6c 6c 00 43 3a 2f 42 61 6e 61 6e     PC.call.C:/Banan
1000a5e4:	61 2f 53 79 73 74 65 6d 2f 69 6e 69 74 2e 62 61     a/System/init.ba
1000a5f4:	74 00 00 00 22 a2 00 10 d7 a5 00 10 dc a5 00 10     t..."...........	1000a5f8: R_386_32	.text
	1000a5fc: R_386_32	.text
	1000a600: R_386_32	.text
1000a604:	00 00 00 00                                         ....
