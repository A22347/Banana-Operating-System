
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <NiMain(void*)>:
10000000:	55                   	push   ebp
10000001:	57                   	push   edi
10000002:	56                   	push   esi
10000003:	53                   	push   ebx
10000004:	83 ec 0c             	sub    esp,0xc
10000007:	e8 fc ff ff ff       	call   10000008 <NiMain(void*)+0x8>	10000008: R_386_PC32	NiInstallSysHooks()
1000000c:	e8 fc ff ff ff       	call   1000000d <NiMain(void*)+0xd>	1000000d: R_386_PC32	NiLoadCursors()
10000011:	83 ec 0c             	sub    esp,0xc
10000014:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000016: R_386_32	screen
1000001a:	e8 fc ff ff ff       	call   1000001b <NiMain(void*)+0x1b>	1000001b: R_386_PC32	Video::getWidth()
1000001f:	89 c6                	mov    esi,eax
10000021:	58                   	pop    eax
10000022:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000024: R_386_32	screen
10000028:	e8 fc ff ff ff       	call   10000029 <NiMain(void*)+0x29>	10000029: R_386_PC32	Video::getHeight()
1000002d:	5a                   	pop    edx
1000002e:	89 c7                	mov    edi,eax
10000030:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000032: R_386_32	screen
10000036:	e8 fc ff ff ff       	call   10000037 <NiMain(void*)+0x37>	10000037: R_386_PC32	Video::getWidth()
1000003b:	c7 04 24 1c 04 00 00 	mov    DWORD PTR [esp],0x41c
10000042:	89 c5                	mov    ebp,eax
10000044:	e8 fc ff ff ff       	call   10000045 <NiMain(void*)+0x45>	10000045: R_386_PC32	malloc
10000049:	59                   	pop    ecx
1000004a:	89 c3                	mov    ebx,eax
1000004c:	58                   	pop    eax
1000004d:	6a 20                	push   0x20
1000004f:	55                   	push   ebp
10000050:	57                   	push   edi
10000051:	56                   	push   esi
10000052:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000054: R_386_32	screen
10000058:	53                   	push   ebx
10000059:	e8 fc ff ff ff       	call   1000005a <NiMain(void*)+0x5a>	1000005a: R_386_PC32	NIContext::NIContext(Video*, int, int, int, int)
1000005e:	83 c4 14             	add    esp,0x14
10000061:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000063: R_386_32	ctxt
10000067:	68 24 04 00 00       	push   0x424
1000006c:	e8 fc ff ff ff       	call   1000006d <NiMain(void*)+0x6d>	1000006d: R_386_PC32	malloc
10000071:	89 c6                	mov    esi,eax
10000073:	58                   	pop    eax
10000074:	5a                   	pop    edx
10000075:	53                   	push   ebx
10000076:	56                   	push   esi
10000077:	e8 fc ff ff ff       	call   10000078 <NiMain(void*)+0x78>	10000078: R_386_PC32	NIDesktop::NIDesktop(NIContext*)
1000007c:	68 80 00 00 00       	push   0x80
10000081:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000083: R_386_32	desktop
10000087:	6a 00                	push   0x0
10000089:	68 00 00 00 00       	push   0x0	1000008a: R_386_32	NiClockEventThread(void*)
1000008e:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000090: R_386_32	kernelProcess
10000094:	e8 fc ff ff ff       	call   10000095 <NiMain(void*)+0x95>	10000095: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000099:	83 c4 14             	add    esp,0x14
1000009c:	68 94 02 00 00       	push   0x294
100000a1:	e8 fc ff ff ff       	call   100000a2 <NiMain(void*)+0xa2>	100000a2: R_386_PC32	malloc
100000a6:	59                   	pop    ecx
100000a7:	89 c3                	mov    ebx,eax
100000a9:	5e                   	pop    esi
100000aa:	6a 01                	push   0x1
100000ac:	6a 01                	push   0x1
100000ae:	6a 00                	push   0x0
100000b0:	6a 00                	push   0x0
100000b2:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000b4: R_386_32	ctxt
100000b8:	50                   	push   eax
100000b9:	e8 fc ff ff ff       	call   100000ba <NiMain(void*)+0xba>	100000ba: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000be:	83 c4 18             	add    esp,0x18
100000c1:	53                   	push   ebx
100000c2:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000c4: R_386_32	desktop
100000c8:	e8 fc ff ff ff       	call   100000c9 <NiMain(void*)+0xc9>	100000c9: R_386_PC32	NIDesktop::addWindow(NIWindow*)
100000cd:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
100000d4:	e8 fc ff ff ff       	call   100000d5 <NiMain(void*)+0xd5>	100000d5: R_386_PC32	malloc
100000d9:	6a 00                	push   0x0
100000db:	89 c3                	mov    ebx,eax
100000dd:	6a 00                	push   0x0
100000df:	68 21 6b 00 10       	push   0x10006b21	100000e0: R_386_32	.text
100000e4:	50                   	push   eax
100000e5:	e8 fc ff ff ff       	call   100000e6 <NiMain(void*)+0xe6>	100000e6: R_386_PC32	Process::Process(char const*, Process*, char**)
100000ea:	83 c4 14             	add    esp,0x14
100000ed:	53                   	push   ebx
100000ee:	e8 fc ff ff ff       	call   100000ef <NiMain(void*)+0xef>	100000ef: R_386_PC32	Process::createUserThread()
100000f3:	83 c4 10             	add    esp,0x10
100000f6:	83 ec 0c             	sub    esp,0xc
100000f9:	6a 02                	push   0x2
100000fb:	e8 fc ff ff ff       	call   100000fc <NiMain(void*)+0xfc>	100000fc: R_386_PC32	blockTask(TaskState)
10000100:	eb f1                	jmp    100000f3 <NiMain(void*)+0xf3>
10000102:	66 90                	xchg   ax,ax

10000104 <NiBegin(void*)>:
10000104:	83 ec 18             	sub    esp,0x18
10000107:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000010b:	e8 fc ff ff ff       	call   1000010c <NiBegin(void*)+0x8>	1000010c: R_386_PC32	NiMain(void*)

10000110 <_ssfn__bitreverse16>:
10000110:	89 c2                	mov    edx,eax
10000112:	01 c0                	add    eax,eax
10000114:	d1 fa                	sar    edx,1
10000116:	25 aa aa 00 00       	and    eax,0xaaaa
1000011b:	81 e2 55 55 00 00    	and    edx,0x5555
10000121:	09 c2                	or     edx,eax
10000123:	89 d0                	mov    eax,edx
10000125:	c1 e2 02             	shl    edx,0x2
10000128:	c1 f8 02             	sar    eax,0x2
1000012b:	81 e2 cc cc 00 00    	and    edx,0xcccc
10000131:	25 33 33 00 00       	and    eax,0x3333
10000136:	09 d0                	or     eax,edx
10000138:	89 c2                	mov    edx,eax
1000013a:	c1 e0 04             	shl    eax,0x4
1000013d:	c1 fa 04             	sar    edx,0x4
10000140:	25 f0 f0 00 00       	and    eax,0xf0f0
10000145:	81 e2 0f 0f 00 00    	and    edx,0xf0f
1000014b:	09 c2                	or     edx,eax
1000014d:	89 d1                	mov    ecx,edx
1000014f:	c1 e2 08             	shl    edx,0x8
10000152:	c1 f9 08             	sar    ecx,0x8
10000155:	0f b7 c2             	movzx  eax,dx
10000158:	09 c8                	or     eax,ecx
1000015a:	c3                   	ret    

1000015b <_ssfn__zhuffman_decode>:
1000015b:	55                   	push   ebp
1000015c:	57                   	push   edi
1000015d:	56                   	push   esi
1000015e:	53                   	push   ebx
1000015f:	83 78 04 0f          	cmp    DWORD PTR [eax+0x4],0xf
10000163:	7f 1d                	jg     10000182 <_ssfn__zhuffman_decode+0x27>
10000165:	8b 18                	mov    ebx,DWORD PTR [eax]
10000167:	8d 4b 01             	lea    ecx,[ebx+0x1]
1000016a:	89 08                	mov    DWORD PTR [eax],ecx
1000016c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
1000016f:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
10000172:	d3 e3                	shl    ebx,cl
10000174:	83 c1 08             	add    ecx,0x8
10000177:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
1000017a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
1000017d:	83 f9 18             	cmp    ecx,0x18
10000180:	eb e1                	jmp    10000163 <_ssfn__zhuffman_decode+0x8>
10000182:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
10000185:	89 f9                	mov    ecx,edi
10000187:	81 e1 ff 01 00 00    	and    ecx,0x1ff
1000018d:	0f b7 0c 4a          	movzx  ecx,WORD PTR [edx+ecx*2]
10000191:	89 cb                	mov    ebx,ecx
10000193:	85 c9                	test   ecx,ecx
10000195:	74 15                	je     100001ac <_ssfn__zhuffman_decode+0x51>
10000197:	c1 f9 09             	sar    ecx,0x9
1000019a:	89 da                	mov    edx,ebx
1000019c:	d3 ef                	shr    edi,cl
1000019e:	29 48 04             	sub    DWORD PTR [eax+0x4],ecx
100001a1:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
100001a4:	81 e2 ff 01 00 00    	and    edx,0x1ff
100001aa:	eb 58                	jmp    10000204 <_ssfn__zhuffman_decode+0xa9>
100001ac:	89 d5                	mov    ebp,edx
100001ae:	89 c3                	mov    ebx,eax
100001b0:	be 0a 00 00 00       	mov    esi,0xa
100001b5:	89 f8                	mov    eax,edi
100001b7:	e8 54 ff ff ff       	call   10000110 <_ssfn__bitreverse16>
100001bc:	3b 84 b5 20 04 00 00 	cmp    eax,DWORD PTR [ebp+esi*4+0x420]
100001c3:	7c 03                	jl     100001c8 <_ssfn__zhuffman_decode+0x6d>
100001c5:	46                   	inc    esi
100001c6:	eb f4                	jmp    100001bc <_ssfn__zhuffman_decode+0x61>
100001c8:	83 ca ff             	or     edx,0xffffffff
100001cb:	83 fe 10             	cmp    esi,0x10
100001ce:	74 34                	je     10000204 <_ssfn__zhuffman_decode+0xa9>
100001d0:	8d 14 36             	lea    edx,[esi+esi*1]
100001d3:	b9 10 00 00 00       	mov    ecx,0x10
100001d8:	01 ea                	add    edx,ebp
100001da:	29 f1                	sub    ecx,esi
100001dc:	d3 f8                	sar    eax,cl
100001de:	0f b7 8a 00 04 00 00 	movzx  ecx,WORD PTR [edx+0x400]
100001e5:	0f b7 92 64 04 00 00 	movzx  edx,WORD PTR [edx+0x464]
100001ec:	29 c8                	sub    eax,ecx
100001ee:	29 73 04             	sub    DWORD PTR [ebx+0x4],esi
100001f1:	89 f1                	mov    ecx,esi
100001f3:	8d 84 10 d0 02 00 00 	lea    eax,[eax+edx*1+0x2d0]
100001fa:	d3 ef                	shr    edi,cl
100001fc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
100001ff:	0f b7 54 45 04       	movzx  edx,WORD PTR [ebp+eax*2+0x4]
10000204:	5b                   	pop    ebx
10000205:	89 d0                	mov    eax,edx
10000207:	5e                   	pop    esi
10000208:	5f                   	pop    edi
10000209:	5d                   	pop    ebp
1000020a:	c3                   	ret    

1000020b <_ssfn__zexpand>:
1000020b:	55                   	push   ebp
1000020c:	57                   	push   edi
1000020d:	56                   	push   esi
1000020e:	53                   	push   ebx
1000020f:	83 ec 0c             	sub    esp,0xc
10000212:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
10000215:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
10000218:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
1000021b:	29 f9                	sub    ecx,edi
1000021d:	83 f9 08             	cmp    ecx,0x8
10000220:	74 04                	je     10000226 <_ssfn__zexpand+0x1b>
10000222:	31 c0                	xor    eax,eax
10000224:	eb 3c                	jmp    10000262 <_ssfn__zexpand+0x57>
10000226:	80 3f 53             	cmp    BYTE PTR [edi],0x53
10000229:	75 f7                	jne    10000222 <_ssfn__zexpand+0x17>
1000022b:	80 7f 01 46          	cmp    BYTE PTR [edi+0x1],0x46
1000022f:	75 f1                	jne    10000222 <_ssfn__zexpand+0x17>
10000231:	80 7f 02 4e          	cmp    BYTE PTR [edi+0x2],0x4e
10000235:	75 eb                	jne    10000222 <_ssfn__zexpand+0x17>
10000237:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
1000023a:	89 c3                	mov    ebx,eax
1000023c:	89 d6                	mov    esi,edx
1000023e:	50                   	push   eax
1000023f:	50                   	push   eax
10000240:	55                   	push   ebp
10000241:	57                   	push   edi
10000242:	e8 fc ff ff ff       	call   10000243 <_ssfn__zexpand+0x38>	10000243: R_386_PC32	realloc
10000247:	83 c4 10             	add    esp,0x10
1000024a:	85 c0                	test   eax,eax
1000024c:	74 d4                	je     10000222 <_ssfn__zexpand+0x17>
1000024e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10000251:	29 fe                	sub    esi,edi
10000253:	01 c6                	add    esi,eax
10000255:	01 e8                	add    eax,ebp
10000257:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
1000025a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
1000025d:	b8 01 00 00 00       	mov    eax,0x1
10000262:	83 c4 0c             	add    esp,0xc
10000265:	5b                   	pop    ebx
10000266:	5e                   	pop    esi
10000267:	5f                   	pop    edi
10000268:	5d                   	pop    ebp
10000269:	c3                   	ret    

1000026a <_ssfn__zbuild_huffman>:
1000026a:	55                   	push   ebp
1000026b:	57                   	push   edi
1000026c:	56                   	push   esi
1000026d:	53                   	push   ebx
1000026e:	89 c3                	mov    ebx,eax
10000270:	81 ec a0 00 00 00    	sub    esp,0xa0
10000276:	31 c0                	xor    eax,eax
10000278:	89 0c 24             	mov    DWORD PTR [esp],ecx
1000027b:	8d 6c 24 5c          	lea    ebp,[esp+0x5c]
1000027f:	b9 11 00 00 00       	mov    ecx,0x11
10000284:	89 ef                	mov    edi,ebp
10000286:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
1000028a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000028c:	b9 00 01 00 00       	mov    ecx,0x100
10000291:	89 df                	mov    edi,ebx
10000293:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10000295:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10000298:	7d 0f                	jge    100002a9 <_ssfn__zbuild_huffman+0x3f>
1000029a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
1000029e:	0f b6 0c 06          	movzx  ecx,BYTE PTR [esi+eax*1]
100002a2:	40                   	inc    eax
100002a3:	ff 44 8c 5c          	inc    DWORD PTR [esp+ecx*4+0x5c]
100002a7:	eb ec                	jmp    10000295 <_ssfn__zbuild_huffman+0x2b>
100002a9:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
100002b1:	b9 01 00 00 00       	mov    ecx,0x1
100002b6:	b8 01 00 00 00       	mov    eax,0x1
100002bb:	89 c7                	mov    edi,eax
100002bd:	d3 e7                	shl    edi,cl
100002bf:	39 7c 8d 00          	cmp    DWORD PTR [ebp+ecx*4+0x0],edi
100002c3:	0f 8f 10 01 00 00    	jg     100003d9 <_ssfn__zbuild_huffman+0x16f>
100002c9:	41                   	inc    ecx
100002ca:	83 f9 10             	cmp    ecx,0x10
100002cd:	75 ec                	jne    100002bb <_ssfn__zbuild_huffman+0x51>
100002cf:	31 ff                	xor    edi,edi
100002d1:	31 f6                	xor    esi,esi
100002d3:	b8 01 00 00 00       	mov    eax,0x1
100002d8:	8b 6c 84 5c          	mov    ebp,DWORD PTR [esp+eax*4+0x5c]
100002dc:	89 7c 84 1c          	mov    DWORD PTR [esp+eax*4+0x1c],edi
100002e0:	66 89 bc 43 00 04 00 00 	mov    WORD PTR [ebx+eax*2+0x400],di
100002e8:	66 89 b4 43 64 04 00 00 	mov    WORD PTR [ebx+eax*2+0x464],si
100002f0:	01 ef                	add    edi,ebp
100002f2:	85 ed                	test   ebp,ebp
100002f4:	74 11                	je     10000307 <_ssfn__zbuild_huffman+0x9d>
100002f6:	ba 01 00 00 00       	mov    edx,0x1
100002fb:	88 c1                	mov    cl,al
100002fd:	d3 e2                	shl    edx,cl
100002ff:	39 fa                	cmp    edx,edi
10000301:	0f 8c d2 00 00 00    	jl     100003d9 <_ssfn__zbuild_huffman+0x16f>
10000307:	89 fa                	mov    edx,edi
10000309:	b9 10 00 00 00       	mov    ecx,0x10
1000030e:	01 ff                	add    edi,edi
10000310:	29 c1                	sub    ecx,eax
10000312:	01 ee                	add    esi,ebp
10000314:	d3 e2                	shl    edx,cl
10000316:	89 94 83 20 04 00 00 	mov    DWORD PTR [ebx+eax*4+0x420],edx
1000031d:	40                   	inc    eax
1000031e:	83 f8 10             	cmp    eax,0x10
10000321:	75 b5                	jne    100002d8 <_ssfn__zbuild_huffman+0x6e>
10000323:	8b 04 24             	mov    eax,DWORD PTR [esp]
10000326:	c7 83 60 04 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x460],0x10000
10000330:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000334:	31 ff                	xor    edi,edi
10000336:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
1000033a:	0f 8d 9d 00 00 00    	jge    100003dd <_ssfn__zbuild_huffman+0x173>
10000340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000344:	0f b6 34 38          	movzx  esi,BYTE PTR [eax+edi*1]
10000348:	89 f2                	mov    edx,esi
1000034a:	85 f6                	test   esi,esi
1000034c:	0f 84 81 00 00 00    	je     100003d3 <_ssfn__zbuild_huffman+0x169>
10000352:	8d 0c 36             	lea    ecx,[esi+esi*1]
10000355:	8b 6c b4 1c          	mov    ebp,DWORD PTR [esp+esi*4+0x1c]
10000359:	8d 04 19             	lea    eax,[ecx+ebx*1]
1000035c:	89 e9                	mov    ecx,ebp
1000035e:	89 04 24             	mov    DWORD PTR [esp],eax
10000361:	0f b7 80 00 04 00 00 	movzx  eax,WORD PTR [eax+0x400]
10000368:	29 c1                	sub    ecx,eax
1000036a:	89 c8                	mov    eax,ecx
1000036c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
1000036f:	0f b7 89 64 04 00 00 	movzx  ecx,WORD PTR [ecx+0x464]
10000376:	01 c8                	add    eax,ecx
10000378:	83 fe 09             	cmp    esi,0x9
1000037b:	88 94 03 84 04 00 00 	mov    BYTE PTR [ebx+eax*1+0x484],dl
10000382:	66 89 bc 43 a4 05 00 00 	mov    WORD PTR [ebx+eax*2+0x5a4],di
1000038a:	7f 42                	jg     100003ce <_ssfn__zbuild_huffman+0x164>
1000038c:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
10000390:	89 e8                	mov    eax,ebp
10000392:	e8 79 fd ff ff       	call   10000110 <_ssfn__bitreverse16>
10000397:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
1000039b:	b9 10 00 00 00       	mov    ecx,0x10
100003a0:	29 f1                	sub    ecx,esi
100003a2:	d3 f8                	sar    eax,cl
100003a4:	88 d1                	mov    cl,dl
100003a6:	89 04 24             	mov    DWORD PTR [esp],eax
100003a9:	89 f2                	mov    edx,esi
100003ab:	b8 01 00 00 00       	mov    eax,0x1
100003b0:	c1 e2 09             	shl    edx,0x9
100003b3:	d3 e0                	shl    eax,cl
100003b5:	09 fa                	or     edx,edi
100003b7:	89 c1                	mov    ecx,eax
100003b9:	81 3c 24 ff 01 00 00 	cmp    DWORD PTR [esp],0x1ff
100003c0:	7f 0c                	jg     100003ce <_ssfn__zbuild_huffman+0x164>
100003c2:	8b 04 24             	mov    eax,DWORD PTR [esp]
100003c5:	01 0c 24             	add    DWORD PTR [esp],ecx
100003c8:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
100003cc:	eb eb                	jmp    100003b9 <_ssfn__zbuild_huffman+0x14f>
100003ce:	45                   	inc    ebp
100003cf:	89 6c b4 1c          	mov    DWORD PTR [esp+esi*4+0x1c],ebp
100003d3:	47                   	inc    edi
100003d4:	e9 5d ff ff ff       	jmp    10000336 <_ssfn__zbuild_huffman+0xcc>
100003d9:	31 c0                	xor    eax,eax
100003db:	eb 05                	jmp    100003e2 <_ssfn__zbuild_huffman+0x178>
100003dd:	b8 01 00 00 00       	mov    eax,0x1
100003e2:	81 c4 a0 00 00 00    	add    esp,0xa0
100003e8:	5b                   	pop    ebx
100003e9:	5e                   	pop    esi
100003ea:	5f                   	pop    edi
100003eb:	5d                   	pop    ebp
100003ec:	c3                   	ret    

100003ed <_ssfn_fc.part.1>:
100003ed:	55                   	push   ebp
100003ee:	57                   	push   edi
100003ef:	8d b8 6c f5 00 00    	lea    edi,[eax+0xf56c]
100003f5:	56                   	push   esi
100003f6:	53                   	push   ebx
100003f7:	8d 98 28 f5 00 00    	lea    ebx,[eax+0xf528]
100003fd:	83 ec 0c             	sub    esp,0xc
10000400:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
10000403:	74 5d                	je     10000462 <_ssfn_fc.part.1+0x75>
10000405:	31 f6                	xor    esi,esi
10000407:	8b 03                	mov    eax,DWORD PTR [ebx]
10000409:	83 3c 30 00          	cmp    DWORD PTR [eax+esi*1],0x0
1000040d:	74 35                	je     10000444 <_ssfn_fc.part.1+0x57>
1000040f:	31 ed                	xor    ebp,ebp
10000411:	8b 03                	mov    eax,DWORD PTR [ebx]
10000413:	8b 04 30             	mov    eax,DWORD PTR [eax+esi*1]
10000416:	8b 04 28             	mov    eax,DWORD PTR [eax+ebp*1]
10000419:	85 c0                	test   eax,eax
1000041b:	74 0c                	je     10000429 <_ssfn_fc.part.1+0x3c>
1000041d:	83 ec 0c             	sub    esp,0xc
10000420:	50                   	push   eax
10000421:	e8 fc ff ff ff       	call   10000422 <_ssfn_fc.part.1+0x35>	10000422: R_386_PC32	free
10000426:	83 c4 10             	add    esp,0x10
10000429:	83 c5 04             	add    ebp,0x4
1000042c:	81 fd 00 04 00 00    	cmp    ebp,0x400
10000432:	75 dd                	jne    10000411 <_ssfn_fc.part.1+0x24>
10000434:	83 ec 0c             	sub    esp,0xc
10000437:	8b 03                	mov    eax,DWORD PTR [ebx]
10000439:	ff 34 30             	push   DWORD PTR [eax+esi*1]
1000043c:	e8 fc ff ff ff       	call   1000043d <_ssfn_fc.part.1+0x50>	1000043d: R_386_PC32	free
10000441:	83 c4 10             	add    esp,0x10
10000444:	83 c6 04             	add    esi,0x4
10000447:	81 fe 00 04 00 00    	cmp    esi,0x400
1000044d:	75 b8                	jne    10000407 <_ssfn_fc.part.1+0x1a>
1000044f:	83 ec 0c             	sub    esp,0xc
10000452:	ff 33                	push   DWORD PTR [ebx]
10000454:	e8 fc ff ff ff       	call   10000455 <_ssfn_fc.part.1+0x68>	10000455: R_386_PC32	free
10000459:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
1000045f:	83 c4 10             	add    esp,0x10
10000462:	83 c3 04             	add    ebx,0x4
10000465:	39 fb                	cmp    ebx,edi
10000467:	75 97                	jne    10000400 <_ssfn_fc.part.1+0x13>
10000469:	83 c4 0c             	add    esp,0xc
1000046c:	5b                   	pop    ebx
1000046d:	5e                   	pop    esi
1000046e:	5f                   	pop    edi
1000046f:	5d                   	pop    ebp
10000470:	c3                   	ret    

10000471 <_ssfn_l>:
10000471:	57                   	push   edi
10000472:	56                   	push   esi
10000473:	53                   	push   ebx
10000474:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10000478:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
1000047c:	39 ce                	cmp    esi,ecx
1000047e:	89 f3                	mov    ebx,esi
10000480:	0f 9d c1             	setge  cl
10000483:	c1 eb 1f             	shr    ebx,0x1f
10000486:	09 d9                	or     ecx,ebx
10000488:	89 fb                	mov    ebx,edi
1000048a:	c1 eb 1f             	shr    ebx,0x1f
1000048d:	08 d9                	or     cl,bl
1000048f:	0f 85 e9 00 00 00    	jne    1000057e <_ssfn_l+0x10d>
10000495:	39 d7                	cmp    edi,edx
10000497:	0f 8d e1 00 00 00    	jge    1000057e <_ssfn_l+0x10d>
1000049d:	8b 88 9c f5 00 00    	mov    ecx,DWORD PTR [eax+0xf59c]
100004a3:	8d 51 08             	lea    edx,[ecx+0x8]
100004a6:	8d 4f 08             	lea    ecx,[edi+0x8]
100004a9:	c1 fa 04             	sar    edx,0x4
100004ac:	c1 f9 04             	sar    ecx,0x4
100004af:	39 ca                	cmp    edx,ecx
100004b1:	75 1a                	jne    100004cd <_ssfn_l+0x5c>
100004b3:	8b 90 a0 f5 00 00    	mov    edx,DWORD PTR [eax+0xf5a0]
100004b9:	8d 4e 08             	lea    ecx,[esi+0x8]
100004bc:	83 c2 08             	add    edx,0x8
100004bf:	c1 f9 04             	sar    ecx,0x4
100004c2:	c1 fa 04             	sar    edx,0x4
100004c5:	39 ca                	cmp    edx,ecx
100004c7:	0f 84 b1 00 00 00    	je     1000057e <_ssfn_l+0x10d>
100004cd:	89 c3                	mov    ebx,eax
100004cf:	8b 80 80 f5 00 00    	mov    eax,DWORD PTR [eax+0xf580]
100004d5:	39 83 84 f5 00 00    	cmp    DWORD PTR [ebx+0xf584],eax
100004db:	7f 3e                	jg     1000051b <_ssfn_l+0xaa>
100004dd:	05 00 02 00 00       	add    eax,0x200
100004e2:	89 83 84 f5 00 00    	mov    DWORD PTR [ebx+0xf584],eax
100004e8:	52                   	push   edx
100004e9:	01 c0                	add    eax,eax
100004eb:	52                   	push   edx
100004ec:	50                   	push   eax
100004ed:	ff b3 6c f5 00 00    	push   DWORD PTR [ebx+0xf56c]
100004f3:	e8 fc ff ff ff       	call   100004f4 <_ssfn_l+0x83>	100004f4: R_386_PC32	realloc
100004f8:	83 c4 10             	add    esp,0x10
100004fb:	89 83 6c f5 00 00    	mov    DWORD PTR [ebx+0xf56c],eax
10000501:	85 c0                	test   eax,eax
10000503:	75 16                	jne    1000051b <_ssfn_l+0xaa>
10000505:	c7 83 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf580],0x0
1000050f:	c7 83 84 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf584],0x0
10000519:	eb 63                	jmp    1000057e <_ssfn_l+0x10d>
1000051b:	83 bb 80 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf580],0x0
10000522:	75 26                	jne    1000054a <_ssfn_l+0xd9>
10000524:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000052a:	8b 93 94 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf594]
10000530:	66 89 10             	mov    WORD PTR [eax],dx
10000533:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000539:	8b 93 98 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf598]
1000053f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
10000543:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
1000054a:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000550:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000556:	66 89 3c 50          	mov    WORD PTR [eax+edx*2],di
1000055a:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000560:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000566:	66 89 74 50 02       	mov    WORD PTR [eax+edx*2+0x2],si
1000056b:	89 bb 9c f5 00 00    	mov    DWORD PTR [ebx+0xf59c],edi
10000571:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10000578:	89 b3 a0 f5 00 00    	mov    DWORD PTR [ebx+0xf5a0],esi
1000057e:	5b                   	pop    ebx
1000057f:	5e                   	pop    esi
10000580:	5f                   	pop    edi
10000581:	c3                   	ret    

10000582 <_ssfn_b>:
10000582:	55                   	push   ebp
10000583:	57                   	push   edi
10000584:	56                   	push   esi
10000585:	53                   	push   ebx
10000586:	83 ec 4c             	sub    esp,0x4c
10000589:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000058d:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
10000591:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10000595:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
10000599:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000059d:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
100005a1:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100005a5:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
100005a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100005ad:	8b 7c 24 70          	mov    edi,DWORD PTR [esp+0x70]
100005b1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
100005b5:	8b 4c 24 74          	mov    ecx,DWORD PTR [esp+0x74]
100005b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100005bd:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100005c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100005c5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100005cc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100005d0:	83 f8 04             	cmp    eax,0x4
100005d3:	75 28                	jne    100005fd <_ssfn_b+0x7b>
100005d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100005d9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
100005dd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
100005e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
100005e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100005e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
100005ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100005f1:	83 c4 4c             	add    esp,0x4c
100005f4:	5b                   	pop    ebx
100005f5:	5e                   	pop    esi
100005f6:	5f                   	pop    edi
100005f7:	5d                   	pop    ebp
100005f8:	e9 74 fe ff ff       	jmp    10000471 <_ssfn_l>
100005fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10000601:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
10000605:	75 0e                	jne    10000615 <_ssfn_b+0x93>
10000607:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
1000060b:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
1000060f:	0f 84 19 01 00 00    	je     1000072e <_ssfn_b+0x1ac>
10000615:	be 02 00 00 00       	mov    esi,0x2
1000061a:	89 d8                	mov    eax,ebx
1000061c:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
10000620:	99                   	cdq    
10000621:	f7 fe                	idiv   esi
10000623:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
10000627:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000062b:	89 e8                	mov    eax,ebp
1000062d:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
10000631:	99                   	cdq    
10000632:	f7 fe                	idiv   esi
10000634:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
10000638:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000063c:	89 f8                	mov    eax,edi
1000063e:	29 d8                	sub    eax,ebx
10000640:	99                   	cdq    
10000641:	f7 fe                	idiv   esi
10000643:	01 c3                	add    ebx,eax
10000645:	89 c8                	mov    eax,ecx
10000647:	29 e8                	sub    eax,ebp
10000649:	99                   	cdq    
1000064a:	f7 fe                	idiv   esi
1000064c:	01 e8                	add    eax,ebp
1000064e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000656:	29 f8                	sub    eax,edi
10000658:	99                   	cdq    
10000659:	f7 fe                	idiv   esi
1000065b:	01 f8                	add    eax,edi
1000065d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10000661:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10000665:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000669:	29 c8                	sub    eax,ecx
1000066b:	99                   	cdq    
1000066c:	f7 fe                	idiv   esi
1000066e:	01 c8                	add    eax,ecx
10000670:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10000674:	89 d8                	mov    eax,ebx
10000676:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
1000067a:	99                   	cdq    
1000067b:	f7 fe                	idiv   esi
1000067d:	8d 0c 38             	lea    ecx,[eax+edi*1]
10000680:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000684:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10000688:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
1000068c:	99                   	cdq    
1000068d:	f7 fe                	idiv   esi
1000068f:	8d 2c 38             	lea    ebp,[eax+edi*1]
10000692:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10000696:	29 d8                	sub    eax,ebx
10000698:	99                   	cdq    
10000699:	f7 fe                	idiv   esi
1000069b:	83 ec 0c             	sub    esp,0xc
1000069e:	01 d8                	add    eax,ebx
100006a0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100006a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100006a8:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
100006ac:	99                   	cdq    
100006ad:	f7 fe                	idiv   esi
100006af:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
100006b3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100006b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100006bb:	29 c8                	sub    eax,ecx
100006bd:	99                   	cdq    
100006be:	f7 fe                	idiv   esi
100006c0:	8d 1c 08             	lea    ebx,[eax+ecx*1]
100006c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100006c7:	29 e8                	sub    eax,ebp
100006c9:	99                   	cdq    
100006ca:	f7 fe                	idiv   esi
100006cc:	8d 34 28             	lea    esi,[eax+ebp*1]
100006cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100006d3:	8d 78 01             	lea    edi,[eax+0x1]
100006d6:	57                   	push   edi
100006d7:	56                   	push   esi
100006d8:	53                   	push   ebx
100006d9:	55                   	push   ebp
100006da:	51                   	push   ecx
100006db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100006df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100006e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100006e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100006eb:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100006ef:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
100006f3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100006f7:	e8 86 fe ff ff       	call   10000582 <_ssfn_b>
100006fc:	83 c4 24             	add    esp,0x24
100006ff:	57                   	push   edi
10000700:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000704:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000708:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
1000070c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
10000710:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
10000714:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
10000718:	56                   	push   esi
10000719:	53                   	push   ebx
1000071a:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
1000071e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
10000722:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10000726:	e8 57 fe ff ff       	call   10000582 <_ssfn_b>
1000072b:	83 c4 30             	add    esp,0x30
1000072e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10000733:	0f 85 9c fe ff ff    	jne    100005d5 <_ssfn_b+0x53>
10000739:	83 c4 4c             	add    esp,0x4c
1000073c:	5b                   	pop    ebx
1000073d:	5e                   	pop    esi
1000073e:	5f                   	pop    edi
1000073f:	5d                   	pop    ebp
10000740:	c3                   	ret    

10000741 <_ssfn__zreceive>:
10000741:	56                   	push   esi
10000742:	53                   	push   ebx
10000743:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
10000746:	7d 1d                	jge    10000765 <_ssfn__zreceive+0x24>
10000748:	8b 18                	mov    ebx,DWORD PTR [eax]
1000074a:	8d 4b 01             	lea    ecx,[ebx+0x1]
1000074d:	89 08                	mov    DWORD PTR [eax],ecx
1000074f:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
10000752:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
10000755:	d3 e3                	shl    ebx,cl
10000757:	83 c1 08             	add    ecx,0x8
1000075a:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
1000075d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000760:	83 f9 18             	cmp    ecx,0x18
10000763:	7e e3                	jle    10000748 <_ssfn__zreceive+0x7>
10000765:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
10000768:	29 50 04             	sub    DWORD PTR [eax+0x4],edx
1000076b:	89 f3                	mov    ebx,esi
1000076d:	88 d1                	mov    cl,dl
1000076f:	d3 eb                	shr    ebx,cl
10000771:	88 d1                	mov    cl,dl
10000773:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
10000776:	bb 01 00 00 00       	mov    ebx,0x1
1000077b:	d3 e3                	shl    ebx,cl
1000077d:	8d 43 ff             	lea    eax,[ebx-0x1]
10000780:	5b                   	pop    ebx
10000781:	21 f0                	and    eax,esi
10000783:	5e                   	pop    esi
10000784:	c3                   	ret    

10000785 <ssfn_utf8>:
10000785:	56                   	push   esi
10000786:	53                   	push   ebx
10000787:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
1000078b:	8b 11                	mov    edx,DWORD PTR [ecx]
1000078d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
10000790:	89 f0                	mov    eax,esi
10000792:	84 c0                	test   al,al
10000794:	0f be d8             	movsx  ebx,al
10000797:	78 04                	js     1000079d <ssfn_utf8+0x18>
10000799:	89 d8                	mov    eax,ebx
1000079b:	eb 7d                	jmp    1000081a <ssfn_utf8+0x95>
1000079d:	f7 c6 20 00 00 00    	test   esi,0x20
100007a3:	75 14                	jne    100007b9 <ssfn_utf8+0x34>
100007a5:	8a 42 01             	mov    al,BYTE PTR [edx+0x1]
100007a8:	c1 e3 06             	shl    ebx,0x6
100007ab:	83 e0 3f             	and    eax,0x3f
100007ae:	81 e3 c0 07 00 00    	and    ebx,0x7c0
100007b4:	42                   	inc    edx
100007b5:	09 d8                	or     eax,ebx
100007b7:	eb 5f                	jmp    10000818 <ssfn_utf8+0x93>
100007b9:	f7 c6 10 00 00 00    	test   esi,0x10
100007bf:	75 20                	jne    100007e1 <ssfn_utf8+0x5c>
100007c1:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
100007c5:	c1 e3 0c             	shl    ebx,0xc
100007c8:	c1 e0 06             	shl    eax,0x6
100007cb:	0f b7 db             	movzx  ebx,bx
100007ce:	25 c0 0f 00 00       	and    eax,0xfc0
100007d3:	83 c2 02             	add    edx,0x2
100007d6:	09 d8                	or     eax,ebx
100007d8:	8a 1a                	mov    bl,BYTE PTR [edx]
100007da:	83 e3 3f             	and    ebx,0x3f
100007dd:	09 d8                	or     eax,ebx
100007df:	eb 37                	jmp    10000818 <ssfn_utf8+0x93>
100007e1:	31 c0                	xor    eax,eax
100007e3:	83 e6 08             	and    esi,0x8
100007e6:	75 32                	jne    1000081a <ssfn_utf8+0x95>
100007e8:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
100007ec:	c1 e3 12             	shl    ebx,0x12
100007ef:	c1 e0 0c             	shl    eax,0xc
100007f2:	81 e3 00 00 1c 00    	and    ebx,0x1c0000
100007f8:	25 00 f0 03 00       	and    eax,0x3f000
100007fd:	83 c2 03             	add    edx,0x3
10000800:	09 d8                	or     eax,ebx
10000802:	8a 1a                	mov    bl,BYTE PTR [edx]
10000804:	83 e3 3f             	and    ebx,0x3f
10000807:	09 d8                	or     eax,ebx
10000809:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
1000080d:	c1 e3 06             	shl    ebx,0x6
10000810:	81 e3 c0 0f 00 00    	and    ebx,0xfc0
10000816:	09 d8                	or     eax,ebx
10000818:	89 11                	mov    DWORD PTR [ecx],edx
1000081a:	ff 01                	inc    DWORD PTR [ecx]
1000081c:	5b                   	pop    ebx
1000081d:	5e                   	pop    esi
1000081e:	c3                   	ret    

1000081f <_ssfn_c>:
1000081f:	55                   	push   ebp
10000820:	57                   	push   edi
10000821:	56                   	push   esi
10000822:	53                   	push   ebx
10000823:	83 ec 14             	sub    esp,0x14
10000826:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
1000082c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10000830:	85 c0                	test   eax,eax
10000832:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
10000838:	0f 84 e6 00 00 00    	je     10000924 <_ssfn_c+0x105>
1000083e:	31 ff                	xor    edi,edi
10000840:	83 78 10 00          	cmp    DWORD PTR [eax+0x10],0x0
10000844:	0f 84 f3 00 00 00    	je     1000093d <_ssfn_c+0x11e>
1000084a:	85 d2                	test   edx,edx
1000084c:	0f 84 eb 00 00 00    	je     1000093d <_ssfn_c+0x11e>
10000852:	80 3a 00             	cmp    BYTE PTR [edx],0x0
10000855:	0f 84 e2 00 00 00    	je     1000093d <_ssfn_c+0x11e>
1000085b:	89 d6                	mov    esi,edx
1000085d:	89 cd                	mov    ebp,ecx
1000085f:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10000862:	89 c3                	mov    ebx,eax
10000864:	85 d2                	test   edx,edx
10000866:	74 38                	je     100008a0 <_ssfn_c+0x81>
10000868:	8d 0c 13             	lea    ecx,[ebx+edx*1]
1000086b:	31 c0                	xor    eax,eax
1000086d:	89 0c 24             	mov    DWORD PTR [esp],ecx
10000870:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10000873:	0f b7 14 41          	movzx  edx,WORD PTR [ecx+eax*2]
10000877:	66 85 d2             	test   dx,dx
1000087a:	74 24                	je     100008a0 <_ssfn_c+0x81>
1000087c:	01 da                	add    edx,ebx
1000087e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10000882:	8a 0a                	mov    cl,BYTE PTR [edx]
10000884:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10000888:	84 c9                	test   cl,cl
1000088a:	0f 84 9e 00 00 00    	je     1000092e <_ssfn_c+0x10f>
10000890:	3a 0f                	cmp    cl,BYTE PTR [edi]
10000892:	0f 85 90 00 00 00    	jne    10000928 <_ssfn_c+0x109>
10000898:	47                   	inc    edi
10000899:	42                   	inc    edx
1000089a:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
1000089e:	eb e2                	jmp    10000882 <_ssfn_c+0x63>
100008a0:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
100008a4:	8d 44 24 10          	lea    eax,[esp+0x10]
100008a8:	50                   	push   eax
100008a9:	e8 fc ff ff ff       	call   100008aa <_ssfn_c+0x8b>	100008aa: R_386_PC32	ssfn_utf8
100008ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100008b2:	29 f2                	sub    edx,esi
100008b4:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
100008b7:	5a                   	pop    edx
100008b8:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
100008bc:	89 06                	mov    DWORD PTR [esi],eax
100008be:	03 5b 10             	add    ebx,DWORD PTR [ebx+0x10]
100008c1:	89 df                	mov    edi,ebx
100008c3:	31 db                	xor    ebx,ebx
100008c5:	8a 17                	mov    dl,BYTE PTR [edi]
100008c7:	80 fa ff             	cmp    dl,0xff
100008ca:	75 08                	jne    100008d4 <_ssfn_c+0xb5>
100008cc:	81 c3 ff ff 00 00    	add    ebx,0xffff
100008d2:	eb 2a                	jmp    100008fe <_ssfn_c+0xdf>
100008d4:	88 d1                	mov    cl,dl
100008d6:	83 e1 c0             	and    ecx,0xffffffc0
100008d9:	80 f9 c0             	cmp    cl,0xc0
100008dc:	75 16                	jne    100008f4 <_ssfn_c+0xd5>
100008de:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
100008e2:	c1 e2 08             	shl    edx,0x8
100008e5:	83 c7 02             	add    edi,0x2
100008e8:	81 e2 00 3f 00 00    	and    edx,0x3f00
100008ee:	09 ca                	or     edx,ecx
100008f0:	01 d3                	add    ebx,edx
100008f2:	eb 27                	jmp    1000091b <_ssfn_c+0xfc>
100008f4:	80 f9 80             	cmp    cl,0x80
100008f7:	75 08                	jne    10000901 <_ssfn_c+0xe2>
100008f9:	83 e2 3f             	and    edx,0x3f
100008fc:	01 d3                	add    ebx,edx
100008fe:	47                   	inc    edi
100008ff:	eb 1a                	jmp    1000091b <_ssfn_c+0xfc>
10000901:	39 d8                	cmp    eax,ebx
10000903:	74 38                	je     1000093d <_ssfn_c+0x11e>
10000905:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
10000909:	83 e2 40             	and    edx,0x40
1000090c:	80 fa 01             	cmp    dl,0x1
1000090f:	19 d2                	sbb    edx,edx
10000911:	83 c2 06             	add    edx,0x6
10000914:	0f af d1             	imul   edx,ecx
10000917:	8d 7c 17 06          	lea    edi,[edi+edx*1+0x6]
1000091b:	43                   	inc    ebx
1000091c:	81 fb ff ff 10 00    	cmp    ebx,0x10ffff
10000922:	76 a1                	jbe    100008c5 <_ssfn_c+0xa6>
10000924:	31 ff                	xor    edi,edi
10000926:	eb 15                	jmp    1000093d <_ssfn_c+0x11e>
10000928:	40                   	inc    eax
10000929:	e9 42 ff ff ff       	jmp    10000870 <_ssfn_c+0x51>
1000092e:	29 f7                	sub    edi,esi
10000930:	05 00 f0 00 00       	add    eax,0xf000
10000935:	89 7d 00             	mov    DWORD PTR [ebp+0x0],edi
10000938:	e9 7b ff ff ff       	jmp    100008b8 <_ssfn_c+0x99>
1000093d:	83 c4 14             	add    esp,0x14
10000940:	89 f8                	mov    eax,edi
10000942:	5b                   	pop    ebx
10000943:	5e                   	pop    esi
10000944:	5f                   	pop    edi
10000945:	5d                   	pop    ebp
10000946:	c3                   	ret    

10000947 <_ssfn_zlib_decode>:
10000947:	55                   	push   ebp
10000948:	57                   	push   edi
10000949:	56                   	push   esi
1000094a:	53                   	push   ebx
1000094b:	81 ec c8 19 00 00    	sub    esp,0x19c8
10000951:	6a 08                	push   0x8
10000953:	e8 fc ff ff ff       	call   10000954 <_ssfn_zlib_decode+0xd>	10000954: R_386_PC32	malloc
10000958:	83 c4 10             	add    esp,0x10
1000095b:	89 c2                	mov    edx,eax
1000095d:	85 c0                	test   eax,eax
1000095f:	0f 84 eb 04 00 00    	je     10000e50 <_ssfn_zlib_decode+0x509>
10000965:	8b 84 24 d0 19 00 00 	mov    eax,DWORD PTR [esp+0x19d0]
1000096c:	89 94 24 e0 09 00 00 	mov    DWORD PTR [esp+0x9e0],edx
10000973:	89 84 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],eax
1000097a:	89 94 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],edx
10000981:	31 c0                	xor    eax,eax
10000983:	83 c2 08             	add    edx,0x8
10000986:	89 94 24 e4 09 00 00 	mov    DWORD PTR [esp+0x9e4],edx
1000098d:	c6 80 80 70 03 10 08 	mov    BYTE PTR [eax+0x10037080],0x8	1000098f: R_386_32	.bss
10000994:	40                   	inc    eax
10000995:	3d 90 00 00 00       	cmp    eax,0x90
1000099a:	75 f1                	jne    1000098d <_ssfn_zlib_decode+0x46>
1000099c:	c6 80 80 70 03 10 09 	mov    BYTE PTR [eax+0x10037080],0x9	1000099e: R_386_32	.bss
100009a3:	40                   	inc    eax
100009a4:	3d 00 01 00 00       	cmp    eax,0x100
100009a9:	75 f1                	jne    1000099c <_ssfn_zlib_decode+0x55>
100009ab:	c6 80 80 70 03 10 07 	mov    BYTE PTR [eax+0x10037080],0x7	100009ad: R_386_32	.bss
100009b2:	40                   	inc    eax
100009b3:	3d 18 01 00 00       	cmp    eax,0x118
100009b8:	75 f1                	jne    100009ab <_ssfn_zlib_decode+0x64>
100009ba:	c7 05 98 71 03 10 08 08 08 08 	mov    DWORD PTR ds:0x10037198,0x8080808	100009bc: R_386_32	.bss
100009c4:	c7 05 9c 71 03 10 08 08 08 08 	mov    DWORD PTR ds:0x1003719c,0x8080808	100009c6: R_386_32	.bss
100009ce:	31 c0                	xor    eax,eax
100009d0:	c6 80 60 70 03 10 05 	mov    BYTE PTR [eax+0x10037060],0x5	100009d2: R_386_32	.bss
100009d7:	40                   	inc    eax
100009d8:	83 f8 20             	cmp    eax,0x20
100009db:	75 f3                	jne    100009d0 <_ssfn_zlib_decode+0x89>
100009dd:	c7 84 24 d4 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d4],0x0
100009e8:	c7 84 24 d8 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d8],0x0
100009f3:	ba 01 00 00 00       	mov    edx,0x1
100009f8:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
100009ff:	e8 3d fd ff ff       	call   10000741 <_ssfn__zreceive>
10000a04:	ba 02 00 00 00       	mov    edx,0x2
10000a09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000a0d:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000a14:	e8 28 fd ff ff       	call   10000741 <_ssfn__zreceive>
10000a19:	89 c6                	mov    esi,eax
10000a1b:	85 c0                	test   eax,eax
10000a1d:	0f 85 09 01 00 00    	jne    10000b2c <_ssfn_zlib_decode+0x1e5>
10000a23:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000a2a:	83 e2 07             	and    edx,0x7
10000a2d:	74 0c                	je     10000a3b <_ssfn_zlib_decode+0xf4>
10000a2f:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000a36:	e8 06 fd ff ff       	call   10000741 <_ssfn__zreceive>
10000a3b:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000a42:	8b 8c 24 d8 09 00 00 	mov    ecx,DWORD PTR [esp+0x9d8]
10000a49:	31 c0                	xor    eax,eax
10000a4b:	31 db                	xor    ebx,ebx
10000a4d:	85 d2                	test   edx,edx
10000a4f:	7f 14                	jg     10000a65 <_ssfn_zlib_decode+0x11e>
10000a51:	84 db                	test   bl,bl
10000a53:	74 22                	je     10000a77 <_ssfn_zlib_decode+0x130>
10000a55:	89 94 24 d4 09 00 00 	mov    DWORD PTR [esp+0x9d4],edx
10000a5c:	89 8c 24 d8 09 00 00 	mov    DWORD PTR [esp+0x9d8],ecx
10000a63:	eb 12                	jmp    10000a77 <_ssfn_zlib_decode+0x130>
10000a65:	40                   	inc    eax
10000a66:	83 ea 08             	sub    edx,0x8
10000a69:	88 8c 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],cl
10000a70:	b3 01                	mov    bl,0x1
10000a72:	c1 e9 08             	shr    ecx,0x8
10000a75:	eb d6                	jmp    10000a4d <_ssfn_zlib_decode+0x106>
10000a77:	83 f8 04             	cmp    eax,0x4
10000a7a:	74 1d                	je     10000a99 <_ssfn_zlib_decode+0x152>
10000a7c:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000a83:	40                   	inc    eax
10000a84:	8d 4a 01             	lea    ecx,[edx+0x1]
10000a87:	89 8c 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],ecx
10000a8e:	8a 12                	mov    dl,BYTE PTR [edx]
10000a90:	88 94 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],dl
10000a97:	eb de                	jmp    10000a77 <_ssfn_zlib_decode+0x130>
10000a99:	0f b6 84 24 ec 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ec]
10000aa1:	0f b6 94 24 ee 01 00 00 	movzx  edx,BYTE PTR [esp+0x1ee]
10000aa9:	0f b6 9c 24 ed 01 00 00 	movzx  ebx,BYTE PTR [esp+0x1ed]
10000ab1:	c1 e3 08             	shl    ebx,0x8
10000ab4:	01 c3                	add    ebx,eax
10000ab6:	0f b6 84 24 ef 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ef]
10000abe:	c1 e0 08             	shl    eax,0x8
10000ac1:	01 d0                	add    eax,edx
10000ac3:	89 da                	mov    edx,ebx
10000ac5:	81 f2 ff ff 00 00    	xor    edx,0xffff
10000acb:	39 d0                	cmp    eax,edx
10000acd:	0f 85 69 03 00 00    	jne    10000e3c <_ssfn_zlib_decode+0x4f5>
10000ad3:	8b 94 24 dc 09 00 00 	mov    edx,DWORD PTR [esp+0x9dc]
10000ada:	8d 04 1a             	lea    eax,[edx+ebx*1]
10000add:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000ae4:	73 14                	jae    10000afa <_ssfn_zlib_decode+0x1b3>
10000ae6:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000aed:	e8 19 f7 ff ff       	call   1000020b <_ssfn__zexpand>
10000af2:	85 c0                	test   eax,eax
10000af4:	0f 84 42 03 00 00    	je     10000e3c <_ssfn_zlib_decode+0x4f5>
10000afa:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000b01:	8b 84 24 dc 09 00 00 	mov    eax,DWORD PTR [esp+0x9dc]
10000b08:	39 f3                	cmp    ebx,esi
10000b0a:	74 09                	je     10000b15 <_ssfn_zlib_decode+0x1ce>
10000b0c:	8a 14 32             	mov    dl,BYTE PTR [edx+esi*1]
10000b0f:	88 14 30             	mov    BYTE PTR [eax+esi*1],dl
10000b12:	46                   	inc    esi
10000b13:	eb e5                	jmp    10000afa <_ssfn_zlib_decode+0x1b3>
10000b15:	01 da                	add    edx,ebx
10000b17:	01 c3                	add    ebx,eax
10000b19:	89 94 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],edx
10000b20:	89 9c 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebx
10000b27:	e9 fc 02 00 00       	jmp    10000e28 <_ssfn_zlib_decode+0x4e1>
10000b2c:	83 f8 03             	cmp    eax,0x3
10000b2f:	0f 84 07 03 00 00    	je     10000e3c <_ssfn_zlib_decode+0x4f5>
10000b35:	4e                   	dec    esi
10000b36:	75 2d                	jne    10000b65 <_ssfn_zlib_decode+0x21e>
10000b38:	b9 20 01 00 00       	mov    ecx,0x120
10000b3d:	ba 80 70 03 10       	mov    edx,0x10037080	10000b3e: R_386_32	.bss
10000b42:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000b49:	e8 1c f7 ff ff       	call   1000026a <_ssfn__zbuild_huffman>
10000b4e:	85 c0                	test   eax,eax
10000b50:	0f 84 e6 02 00 00    	je     10000e3c <_ssfn_zlib_decode+0x4f5>
10000b56:	b9 20 00 00 00       	mov    ecx,0x20
10000b5b:	ba 60 70 03 10       	mov    edx,0x10037060	10000b5c: R_386_32	.bss
10000b60:	e9 78 01 00 00       	jmp    10000cdd <_ssfn_zlib_decode+0x396>
10000b65:	ba 05 00 00 00       	mov    edx,0x5
10000b6a:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000b71:	8d 5c 24 12          	lea    ebx,[esp+0x12]
10000b75:	e8 c7 fb ff ff       	call   10000741 <_ssfn__zreceive>
10000b7a:	89 df                	mov    edi,ebx
10000b7c:	ba 05 00 00 00       	mov    edx,0x5
10000b81:	89 c5                	mov    ebp,eax
10000b83:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000b8a:	e8 b2 fb ff ff       	call   10000741 <_ssfn__zreceive>
10000b8f:	ba 04 00 00 00       	mov    edx,0x4
10000b94:	89 c6                	mov    esi,eax
10000b96:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000b9d:	e8 9f fb ff ff       	call   10000741 <_ssfn__zreceive>
10000ba2:	b9 13 00 00 00       	mov    ecx,0x13
10000ba7:	83 c0 04             	add    eax,0x4
10000baa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000bae:	31 c0                	xor    eax,eax
10000bb0:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000bb2:	31 ff                	xor    edi,edi
10000bb4:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10000bb8:	7e 1f                	jle    10000bd9 <_ssfn_zlib_decode+0x292>
10000bba:	ba 03 00 00 00       	mov    edx,0x3
10000bbf:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000bc6:	47                   	inc    edi
10000bc7:	e8 75 fb ff ff       	call   10000741 <_ssfn__zreceive>
10000bcc:	0f b6 97 5f 6c 00 10 	movzx  edx,BYTE PTR [edi+0x10006c5f]	10000bcf: R_386_32	.text
10000bd3:	88 44 14 12          	mov    BYTE PTR [esp+edx*1+0x12],al
10000bd7:	eb db                	jmp    10000bb4 <_ssfn_zlib_decode+0x26d>
10000bd9:	b9 13 00 00 00       	mov    ecx,0x13
10000bde:	89 da                	mov    edx,ebx
10000be0:	8d 84 24 ec 01 00 00 	lea    eax,[esp+0x1ec]
10000be7:	e8 7e f6 ff ff       	call   1000026a <_ssfn__zbuild_huffman>
10000bec:	85 c0                	test   eax,eax
10000bee:	0f 84 48 02 00 00    	je     10000e3c <_ssfn_zlib_decode+0x4f5>
10000bf4:	8d 46 01             	lea    eax,[esi+0x1]
10000bf7:	81 c5 01 01 00 00    	add    ebp,0x101
10000bfd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000c01:	31 f6                	xor    esi,esi
10000c03:	01 e8                	add    eax,ebp
10000c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000c09:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10000c0d:	0f 8e 9f 00 00 00    	jle    10000cb2 <_ssfn_zlib_decode+0x36b>
10000c13:	8d 94 24 ec 01 00 00 	lea    edx,[esp+0x1ec]
10000c1a:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c21:	e8 35 f5 ff ff       	call   1000015b <_ssfn__zhuffman_decode>
10000c26:	83 f8 12             	cmp    eax,0x12
10000c29:	0f 87 0d 02 00 00    	ja     10000e3c <_ssfn_zlib_decode+0x4f5>
10000c2f:	83 f8 0f             	cmp    eax,0xf
10000c32:	7f 07                	jg     10000c3b <_ssfn_zlib_decode+0x2f4>
10000c34:	88 44 34 25          	mov    BYTE PTR [esp+esi*1+0x25],al
10000c38:	46                   	inc    esi
10000c39:	eb ce                	jmp    10000c09 <_ssfn_zlib_decode+0x2c2>
10000c3b:	83 f8 10             	cmp    eax,0x10
10000c3e:	75 22                	jne    10000c62 <_ssfn_zlib_decode+0x31b>
10000c40:	ba 02 00 00 00       	mov    edx,0x2
10000c45:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c4c:	e8 f0 fa ff ff       	call   10000741 <_ssfn__zreceive>
10000c51:	85 f6                	test   esi,esi
10000c53:	8d 58 03             	lea    ebx,[eax+0x3]
10000c56:	0f 84 e0 01 00 00    	je     10000e3c <_ssfn_zlib_decode+0x4f5>
10000c5c:	8a 44 34 24          	mov    al,BYTE PTR [esp+esi*1+0x24]
10000c60:	eb 31                	jmp    10000c93 <_ssfn_zlib_decode+0x34c>
10000c62:	83 f8 11             	cmp    eax,0x11
10000c65:	75 16                	jne    10000c7d <_ssfn_zlib_decode+0x336>
10000c67:	ba 03 00 00 00       	mov    edx,0x3
10000c6c:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c73:	e8 c9 fa ff ff       	call   10000741 <_ssfn__zreceive>
10000c78:	8d 58 03             	lea    ebx,[eax+0x3]
10000c7b:	eb 14                	jmp    10000c91 <_ssfn_zlib_decode+0x34a>
10000c7d:	ba 07 00 00 00       	mov    edx,0x7
10000c82:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c89:	e8 b3 fa ff ff       	call   10000741 <_ssfn__zreceive>
10000c8e:	8d 58 0b             	lea    ebx,[eax+0xb]
10000c91:	31 c0                	xor    eax,eax
10000c93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000c97:	29 f2                	sub    edx,esi
10000c99:	39 da                	cmp    edx,ebx
10000c9b:	0f 8c 9b 01 00 00    	jl     10000e3c <_ssfn_zlib_decode+0x4f5>
10000ca1:	8d 54 34 25          	lea    edx,[esp+esi*1+0x25]
10000ca5:	89 d9                	mov    ecx,ebx
10000ca7:	89 d7                	mov    edi,edx
10000ca9:	01 de                	add    esi,ebx
10000cab:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000cad:	e9 57 ff ff ff       	jmp    10000c09 <_ssfn_zlib_decode+0x2c2>
10000cb2:	0f 85 84 01 00 00    	jne    10000e3c <_ssfn_zlib_decode+0x4f5>
10000cb8:	89 e9                	mov    ecx,ebp
10000cba:	8d 54 24 25          	lea    edx,[esp+0x25]
10000cbe:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000cc5:	e8 a0 f5 ff ff       	call   1000026a <_ssfn__zbuild_huffman>
10000cca:	85 c0                	test   eax,eax
10000ccc:	0f 84 6a 01 00 00    	je     10000e3c <_ssfn_zlib_decode+0x4f5>
10000cd2:	8d 44 24 25          	lea    eax,[esp+0x25]
10000cd6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10000cda:	8d 14 28             	lea    edx,[eax+ebp*1]
10000cdd:	8d 84 24 cc 11 00 00 	lea    eax,[esp+0x11cc]
10000ce4:	e8 81 f5 ff ff       	call   1000026a <_ssfn__zbuild_huffman>
10000ce9:	85 c0                	test   eax,eax
10000ceb:	0f 84 4b 01 00 00    	je     10000e3c <_ssfn_zlib_decode+0x4f5>
10000cf1:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000cf8:	8d 94 24 e8 09 00 00 	lea    edx,[esp+0x9e8]
10000cff:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d06:	e8 50 f4 ff ff       	call   1000015b <_ssfn__zhuffman_decode>
10000d0b:	89 c3                	mov    ebx,eax
10000d0d:	3d ff 00 00 00       	cmp    eax,0xff
10000d12:	7f 34                	jg     10000d48 <_ssfn_zlib_decode+0x401>
10000d14:	85 c0                	test   eax,eax
10000d16:	0f 88 20 01 00 00    	js     10000e3c <_ssfn_zlib_decode+0x4f5>
10000d1c:	39 ac 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],ebp
10000d23:	77 1d                	ja     10000d42 <_ssfn_zlib_decode+0x3fb>
10000d25:	89 ea                	mov    edx,ebp
10000d27:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d2e:	e8 d8 f4 ff ff       	call   1000020b <_ssfn__zexpand>
10000d33:	85 c0                	test   eax,eax
10000d35:	0f 84 01 01 00 00    	je     10000e3c <_ssfn_zlib_decode+0x4f5>
10000d3b:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000d42:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
10000d45:	45                   	inc    ebp
10000d46:	eb b0                	jmp    10000cf8 <_ssfn_zlib_decode+0x3b1>
10000d48:	3d 00 01 00 00       	cmp    eax,0x100
10000d4d:	75 0c                	jne    10000d5b <_ssfn_zlib_decode+0x414>
10000d4f:	89 ac 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebp
10000d56:	e9 cd 00 00 00       	jmp    10000e28 <_ssfn_zlib_decode+0x4e1>
10000d5b:	8d 80 ff fe ff ff    	lea    eax,[eax-0x101]
10000d61:	8b 14 85 80 6d 00 10 	mov    edx,DWORD PTR [eax*4+0x10006d80]	10000d64: R_386_32	.text
10000d68:	8b 1c 85 00 6e 00 10 	mov    ebx,DWORD PTR [eax*4+0x10006e00]	10000d6b: R_386_32	.text
10000d6f:	85 d2                	test   edx,edx
10000d71:	74 0e                	je     10000d81 <_ssfn_zlib_decode+0x43a>
10000d73:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d7a:	e8 c2 f9 ff ff       	call   10000741 <_ssfn__zreceive>
10000d7f:	01 c3                	add    ebx,eax
10000d81:	8d 94 24 cc 11 00 00 	lea    edx,[esp+0x11cc]
10000d88:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d8f:	e8 c7 f3 ff ff       	call   1000015b <_ssfn__zhuffman_decode>
10000d94:	85 c0                	test   eax,eax
10000d96:	0f 88 a0 00 00 00    	js     10000e3c <_ssfn_zlib_decode+0x4f5>
10000d9c:	8b 14 85 80 6c 00 10 	mov    edx,DWORD PTR [eax*4+0x10006c80]	10000d9f: R_386_32	.text
10000da3:	8b 3c 85 00 6d 00 10 	mov    edi,DWORD PTR [eax*4+0x10006d00]	10000da6: R_386_32	.text
10000daa:	85 d2                	test   edx,edx
10000dac:	74 0e                	je     10000dbc <_ssfn_zlib_decode+0x475>
10000dae:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000db5:	e8 87 f9 ff ff       	call   10000741 <_ssfn__zreceive>
10000dba:	01 c7                	add    edi,eax
10000dbc:	89 e8                	mov    eax,ebp
10000dbe:	2b 84 24 e0 09 00 00 	sub    eax,DWORD PTR [esp+0x9e0]
10000dc5:	39 f8                	cmp    eax,edi
10000dc7:	7c 73                	jl     10000e3c <_ssfn_zlib_decode+0x4f5>
10000dc9:	8d 44 1d 00          	lea    eax,[ebp+ebx*1+0x0]
10000dcd:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000dd4:	73 19                	jae    10000def <_ssfn_zlib_decode+0x4a8>
10000dd6:	89 ea                	mov    edx,ebp
10000dd8:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ddf:	e8 27 f4 ff ff       	call   1000020b <_ssfn__zexpand>
10000de4:	85 c0                	test   eax,eax
10000de6:	74 54                	je     10000e3c <_ssfn_zlib_decode+0x4f5>
10000de8:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000def:	89 ee                	mov    esi,ebp
10000df1:	29 fe                	sub    esi,edi
10000df3:	4f                   	dec    edi
10000df4:	75 19                	jne    10000e0f <_ssfn_zlib_decode+0x4c8>
10000df6:	85 db                	test   ebx,ebx
10000df8:	0f 84 fa fe ff ff    	je     10000cf8 <_ssfn_zlib_decode+0x3b1>
10000dfe:	8a 06                	mov    al,BYTE PTR [esi]
10000e00:	01 eb                	add    ebx,ebp
10000e02:	45                   	inc    ebp
10000e03:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000e06:	39 dd                	cmp    ebp,ebx
10000e08:	75 f8                	jne    10000e02 <_ssfn_zlib_decode+0x4bb>
10000e0a:	e9 e9 fe ff ff       	jmp    10000cf8 <_ssfn_zlib_decode+0x3b1>
10000e0f:	85 db                	test   ebx,ebx
10000e11:	0f 84 e1 fe ff ff    	je     10000cf8 <_ssfn_zlib_decode+0x3b1>
10000e17:	8d 04 1e             	lea    eax,[esi+ebx*1]
10000e1a:	89 ef                	mov    edi,ebp
10000e1c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000e1d:	39 f0                	cmp    eax,esi
10000e1f:	75 fb                	jne    10000e1c <_ssfn_zlib_decode+0x4d5>
10000e21:	01 dd                	add    ebp,ebx
10000e23:	e9 d0 fe ff ff       	jmp    10000cf8 <_ssfn_zlib_decode+0x3b1>
10000e28:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10000e2d:	0f 84 c0 fb ff ff    	je     100009f3 <_ssfn_zlib_decode+0xac>
10000e33:	8b 84 24 e0 09 00 00 	mov    eax,DWORD PTR [esp+0x9e0]
10000e3a:	eb 14                	jmp    10000e50 <_ssfn_zlib_decode+0x509>
10000e3c:	83 ec 0c             	sub    esp,0xc
10000e3f:	ff b4 24 ec 09 00 00 	push   DWORD PTR [esp+0x9ec]
10000e46:	e8 fc ff ff ff       	call   10000e47 <_ssfn_zlib_decode+0x500>	10000e47: R_386_PC32	free
10000e4b:	83 c4 10             	add    esp,0x10
10000e4e:	31 c0                	xor    eax,eax
10000e50:	81 c4 bc 19 00 00    	add    esp,0x19bc
10000e56:	5b                   	pop    ebx
10000e57:	5e                   	pop    esi
10000e58:	5f                   	pop    edi
10000e59:	5d                   	pop    ebp
10000e5a:	c3                   	ret    

10000e5b <ssfn_load>:
10000e5b:	55                   	push   ebp
10000e5c:	57                   	push   edi
10000e5d:	56                   	push   esi
10000e5e:	53                   	push   ebx
10000e5f:	83 ec 1c             	sub    esp,0x1c
10000e62:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10000e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10000e6a:	85 ff                	test   edi,edi
10000e6c:	0f 84 d0 01 00 00    	je     10001042 <ssfn_load+0x1e7>
10000e72:	85 f6                	test   esi,esi
10000e74:	0f 84 c8 01 00 00    	je     10001042 <ssfn_load+0x1e7>
10000e7a:	80 3e 1f             	cmp    BYTE PTR [esi],0x1f
10000e7d:	0f 85 a8 00 00 00    	jne    10000f2b <ssfn_load+0xd0>
10000e83:	80 7e 01 8b          	cmp    BYTE PTR [esi+0x1],0x8b
10000e87:	0f 85 9e 00 00 00    	jne    10000f2b <ssfn_load+0xd0>
10000e8d:	80 7e 02 08          	cmp    BYTE PTR [esi+0x2],0x8
10000e91:	74 0a                	je     10000e9d <ssfn_load+0x42>
10000e93:	bd fe ff ff ff       	mov    ebp,0xfffffffe
10000e98:	e9 aa 01 00 00       	jmp    10001047 <ssfn_load+0x1ec>
10000e9d:	8a 46 03             	mov    al,BYTE PTR [esi+0x3]
10000ea0:	a8 04                	test   al,0x4
10000ea2:	75 05                	jne    10000ea9 <ssfn_load+0x4e>
10000ea4:	83 c6 0a             	add    esi,0xa
10000ea7:	eb 08                	jmp    10000eb1 <ssfn_load+0x56>
10000ea9:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
10000ead:	8d 74 16 0c          	lea    esi,[esi+edx*1+0xc]
10000eb1:	a8 08                	test   al,0x8
10000eb3:	74 07                	je     10000ebc <ssfn_load+0x61>
10000eb5:	46                   	inc    esi
10000eb6:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000eba:	eb f7                	jmp    10000eb3 <ssfn_load+0x58>
10000ebc:	a8 10                	test   al,0x10
10000ebe:	74 07                	je     10000ec7 <ssfn_load+0x6c>
10000ec0:	46                   	inc    esi
10000ec1:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000ec5:	eb f7                	jmp    10000ebe <ssfn_load+0x63>
10000ec7:	83 ec 0c             	sub    esp,0xc
10000eca:	56                   	push   esi
10000ecb:	e8 fc ff ff ff       	call   10000ecc <ssfn_load+0x71>	10000ecc: R_386_PC32	_ssfn_zlib_decode
10000ed0:	83 c4 10             	add    esp,0x10
10000ed3:	89 c6                	mov    esi,eax
10000ed5:	85 c0                	test   eax,eax
10000ed7:	74 ba                	je     10000e93 <ssfn_load+0x38>
10000ed9:	50                   	push   eax
10000eda:	50                   	push   eax
10000edb:	8b 87 78 f5 00 00    	mov    eax,DWORD PTR [edi+0xf578]
10000ee1:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
10000ee8:	50                   	push   eax
10000ee9:	ff b7 70 f5 00 00    	push   DWORD PTR [edi+0xf570]
10000eef:	e8 fc ff ff ff       	call   10000ef0 <ssfn_load+0x95>	10000ef0: R_386_PC32	realloc
10000ef4:	83 c4 10             	add    esp,0x10
10000ef7:	89 87 70 f5 00 00    	mov    DWORD PTR [edi+0xf570],eax
10000efd:	85 c0                	test   eax,eax
10000eff:	75 0f                	jne    10000f10 <ssfn_load+0xb5>
10000f01:	c7 87 78 f5 00 00 00 00 00 00 	mov    DWORD PTR [edi+0xf578],0x0
10000f0b:	e9 1a 01 00 00       	jmp    1000102a <ssfn_load+0x1cf>
10000f10:	8b 97 78 f5 00 00    	mov    edx,DWORD PTR [edi+0xf578]
10000f16:	8d 4a 01             	lea    ecx,[edx+0x1]
10000f19:	89 8f 78 f5 00 00    	mov    DWORD PTR [edi+0xf578],ecx
10000f1f:	89 34 90             	mov    DWORD PTR [eax+edx*4],esi
10000f22:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000f25:	01 87 7c f5 00 00    	add    DWORD PTR [edi+0xf57c],eax
10000f2b:	50                   	push   eax
10000f2c:	6a 04                	push   0x4
10000f2e:	68 3e 6b 00 10       	push   0x10006b3e	10000f2f: R_386_32	.text
10000f33:	56                   	push   esi
10000f34:	e8 fc ff ff ff       	call   10000f35 <ssfn_load+0xda>	10000f35: R_386_PC32	memcmp
10000f39:	83 c4 10             	add    esp,0x10
10000f3c:	89 c5                	mov    ebp,eax
10000f3e:	85 c0                	test   eax,eax
10000f40:	75 29                	jne    10000f6b <ssfn_load+0x110>
10000f42:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10000f45:	01 f3                	add    ebx,esi
10000f47:	83 c6 08             	add    esi,0x8
10000f4a:	39 de                	cmp    esi,ebx
10000f4c:	0f 83 f5 00 00 00    	jae    10001047 <ssfn_load+0x1ec>
10000f52:	50                   	push   eax
10000f53:	50                   	push   eax
10000f54:	56                   	push   esi
10000f55:	57                   	push   edi
10000f56:	e8 fc ff ff ff       	call   10000f57 <ssfn_load+0xfc>	10000f57: R_386_PC32	ssfn_load
10000f5b:	83 c4 10             	add    esp,0x10
10000f5e:	85 c0                	test   eax,eax
10000f60:	0f 85 e1 00 00 00    	jne    10001047 <ssfn_load+0x1ec>
10000f66:	03 76 04             	add    esi,DWORD PTR [esi+0x4]
10000f69:	eb df                	jmp    10000f4a <ssfn_load+0xef>
10000f6b:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10000f6e:	83 e0 0f             	and    eax,0xf
10000f71:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10000f75:	53                   	push   ebx
10000f76:	6a 04                	push   0x4
10000f78:	68 43 6b 00 10       	push   0x10006b43	10000f79: R_386_32	.text
10000f7d:	56                   	push   esi
10000f7e:	e8 fc ff ff ff       	call   10000f7f <ssfn_load+0x124>	10000f7f: R_386_PC32	memcmp
10000f83:	83 c4 10             	add    esp,0x10
10000f86:	89 c5                	mov    ebp,eax
10000f88:	85 c0                	test   eax,eax
10000f8a:	0f 85 03 ff ff ff    	jne    10000e93 <ssfn_load+0x38>
10000f90:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10000f93:	8d 44 1e fc          	lea    eax,[esi+ebx*1-0x4]
10000f97:	51                   	push   ecx
10000f98:	6a 04                	push   0x4
10000f9a:	68 48 6b 00 10       	push   0x10006b48	10000f9b: R_386_32	.text
10000f9f:	50                   	push   eax
10000fa0:	e8 fc ff ff ff       	call   10000fa1 <ssfn_load+0x146>	10000fa1: R_386_PC32	memcmp
10000fa5:	83 c4 10             	add    esp,0x10
10000fa8:	85 c0                	test   eax,eax
10000faa:	0f 85 e3 fe ff ff    	jne    10000e93 <ssfn_load+0x38>
10000fb0:	80 7c 24 0f 04       	cmp    BYTE PTR [esp+0xf],0x4
10000fb5:	0f 87 d8 fe ff ff    	ja     10000e93 <ssfn_load+0x38>
10000fbb:	0f b7 4e 0e          	movzx  ecx,WORD PTR [esi+0xe]
10000fbf:	39 cb                	cmp    ebx,ecx
10000fc1:	0f 86 cc fe ff ff    	jbe    10000e93 <ssfn_load+0x38>
10000fc7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
10000fca:	39 c3                	cmp    ebx,eax
10000fcc:	0f 86 c1 fe ff ff    	jbe    10000e93 <ssfn_load+0x38>
10000fd2:	3b 5e 14             	cmp    ebx,DWORD PTR [esi+0x14]
10000fd5:	0f 86 b8 fe ff ff    	jbe    10000e93 <ssfn_load+0x38>
10000fdb:	3b 5e 18             	cmp    ebx,DWORD PTR [esi+0x18]
10000fde:	0f 86 af fe ff ff    	jbe    10000e93 <ssfn_load+0x38>
10000fe4:	3b 5e 1c             	cmp    ebx,DWORD PTR [esi+0x1c]
10000fe7:	0f 86 a6 fe ff ff    	jbe    10000e93 <ssfn_load+0x38>
10000fed:	39 c1                	cmp    ecx,eax
10000fef:	0f 83 9e fe ff ff    	jae    10000e93 <ssfn_load+0x38>
10000ff5:	0f b6 5c 24 0f       	movzx  ebx,BYTE PTR [esp+0xf]
10000ffa:	8d 1c 9f             	lea    ebx,[edi+ebx*4]
10000ffd:	8b 83 a4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a4]
10001003:	40                   	inc    eax
10001004:	89 83 a4 f5 00 00    	mov    DWORD PTR [ebx+0xf5a4],eax
1000100a:	52                   	push   edx
1000100b:	c1 e0 02             	shl    eax,0x2
1000100e:	52                   	push   edx
1000100f:	50                   	push   eax
10001010:	ff 33                	push   DWORD PTR [ebx]
10001012:	e8 fc ff ff ff       	call   10001013 <ssfn_load+0x1b8>	10001013: R_386_PC32	realloc
10001017:	83 c4 10             	add    esp,0x10
1000101a:	89 03                	mov    DWORD PTR [ebx],eax
1000101c:	85 c0                	test   eax,eax
1000101e:	75 0f                	jne    1000102f <ssfn_load+0x1d4>
10001020:	c7 83 a4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5a4],0x0
1000102a:	83 cd ff             	or     ebp,0xffffffff
1000102d:	eb 18                	jmp    10001047 <ssfn_load+0x1ec>
1000102f:	8b 93 a4 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf5a4]
10001035:	89 74 90 fc          	mov    DWORD PTR [eax+edx*4-0x4],esi
10001039:	89 f8                	mov    eax,edi
1000103b:	e8 ad f3 ff ff       	call   100003ed <_ssfn_fc.part.1>
10001040:	eb 05                	jmp    10001047 <ssfn_load+0x1ec>
10001042:	bd fc ff ff ff       	mov    ebp,0xfffffffc
10001047:	83 c4 1c             	add    esp,0x1c
1000104a:	89 e8                	mov    eax,ebp
1000104c:	5b                   	pop    ebx
1000104d:	5e                   	pop    esi
1000104e:	5f                   	pop    edi
1000104f:	5d                   	pop    ebp
10001050:	c3                   	ret    

10001051 <ssfn_free>:
10001051:	57                   	push   edi
10001052:	56                   	push   esi
10001053:	53                   	push   ebx
10001054:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001058:	85 db                	test   ebx,ebx
1000105a:	74 7e                	je     100010da <ssfn_free+0x89>
1000105c:	89 d8                	mov    eax,ebx
1000105e:	e8 8a f3 ff ff       	call   100003ed <_ssfn_fc.part.1>
10001063:	83 bb 70 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf570],0x0
1000106a:	74 32                	je     1000109e <ssfn_free+0x4d>
1000106c:	31 f6                	xor    esi,esi
1000106e:	8b 83 70 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf570]
10001074:	39 b3 78 f5 00 00    	cmp    DWORD PTR [ebx+0xf578],esi
1000107a:	7e 16                	jle    10001092 <ssfn_free+0x41>
1000107c:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
1000107f:	85 c0                	test   eax,eax
10001081:	74 0c                	je     1000108f <ssfn_free+0x3e>
10001083:	83 ec 0c             	sub    esp,0xc
10001086:	50                   	push   eax
10001087:	e8 fc ff ff ff       	call   10001088 <ssfn_free+0x37>	10001088: R_386_PC32	free
1000108c:	83 c4 10             	add    esp,0x10
1000108f:	46                   	inc    esi
10001090:	eb dc                	jmp    1000106e <ssfn_free+0x1d>
10001092:	83 ec 0c             	sub    esp,0xc
10001095:	50                   	push   eax
10001096:	e8 fc ff ff ff       	call   10001097 <ssfn_free+0x46>	10001097: R_386_PC32	free
1000109b:	83 c4 10             	add    esp,0x10
1000109e:	31 f6                	xor    esi,esi
100010a0:	8b 04 b3             	mov    eax,DWORD PTR [ebx+esi*4]
100010a3:	85 c0                	test   eax,eax
100010a5:	74 0c                	je     100010b3 <ssfn_free+0x62>
100010a7:	83 ec 0c             	sub    esp,0xc
100010aa:	50                   	push   eax
100010ab:	e8 fc ff ff ff       	call   100010ac <ssfn_free+0x5b>	100010ac: R_386_PC32	free
100010b0:	83 c4 10             	add    esp,0x10
100010b3:	46                   	inc    esi
100010b4:	83 fe 05             	cmp    esi,0x5
100010b7:	75 e7                	jne    100010a0 <ssfn_free+0x4f>
100010b9:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100010bf:	85 c0                	test   eax,eax
100010c1:	74 0c                	je     100010cf <ssfn_free+0x7e>
100010c3:	83 ec 0c             	sub    esp,0xc
100010c6:	50                   	push   eax
100010c7:	e8 fc ff ff ff       	call   100010c8 <ssfn_free+0x77>	100010c8: R_386_PC32	free
100010cc:	83 c4 10             	add    esp,0x10
100010cf:	b9 72 3d 00 00       	mov    ecx,0x3d72
100010d4:	31 c0                	xor    eax,eax
100010d6:	89 df                	mov    edi,ebx
100010d8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100010da:	5b                   	pop    ebx
100010db:	5e                   	pop    esi
100010dc:	5f                   	pop    edi
100010dd:	c3                   	ret    

100010de <ssfn_mem>:
100010de:	55                   	push   ebp
100010df:	31 c0                	xor    eax,eax
100010e1:	57                   	push   edi
100010e2:	56                   	push   esi
100010e3:	53                   	push   ebx
100010e4:	83 ec 08             	sub    esp,0x8
100010e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100010eb:	85 d2                	test   edx,edx
100010ed:	0f 84 8e 00 00 00    	je     10001181 <ssfn_mem+0xa3>
100010f3:	b8 c8 f5 00 00       	mov    eax,0xf5c8
100010f8:	31 c9                	xor    ecx,ecx
100010fa:	8b 9c 8a a4 f5 00 00 	mov    ebx,DWORD PTR [edx+ecx*4+0xf5a4]
10001101:	41                   	inc    ecx
10001102:	8d 04 98             	lea    eax,[eax+ebx*4]
10001105:	83 f9 05             	cmp    ecx,0x5
10001108:	75 f0                	jne    100010fa <ssfn_mem+0x1c>
1000110a:	03 82 7c f5 00 00    	add    eax,DWORD PTR [edx+0xf57c]
10001110:	31 c9                	xor    ecx,ecx
10001112:	8b b4 8a 28 f5 00 00 	mov    esi,DWORD PTR [edx+ecx*4+0xf528]
10001119:	89 34 24             	mov    DWORD PTR [esp],esi
1000111c:	85 f6                	test   esi,esi
1000111e:	74 48                	je     10001168 <ssfn_mem+0x8a>
10001120:	31 db                	xor    ebx,ebx
10001122:	8b 34 24             	mov    esi,DWORD PTR [esp]
10001125:	8b 3c 9e             	mov    edi,DWORD PTR [esi+ebx*4]
10001128:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
1000112c:	85 ff                	test   edi,edi
1000112e:	74 2a                	je     1000115a <ssfn_mem+0x7c>
10001130:	31 f6                	xor    esi,esi
10001132:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
10001136:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
10001139:	85 ed                	test   ebp,ebp
1000113b:	74 0f                	je     1000114c <ssfn_mem+0x6e>
1000113d:	0f b7 7d 00          	movzx  edi,WORD PTR [ebp+0x0]
10001141:	0f b6 6d 02          	movzx  ebp,BYTE PTR [ebp+0x2]
10001145:	0f af fd             	imul   edi,ebp
10001148:	8d 44 38 08          	lea    eax,[eax+edi*1+0x8]
1000114c:	46                   	inc    esi
1000114d:	81 fe 00 01 00 00    	cmp    esi,0x100
10001153:	75 dd                	jne    10001132 <ssfn_mem+0x54>
10001155:	05 00 04 00 00       	add    eax,0x400
1000115a:	43                   	inc    ebx
1000115b:	81 fb 00 01 00 00    	cmp    ebx,0x100
10001161:	75 bf                	jne    10001122 <ssfn_mem+0x44>
10001163:	05 00 04 00 00       	add    eax,0x400
10001168:	41                   	inc    ecx
10001169:	83 f9 11             	cmp    ecx,0x11
1000116c:	75 a4                	jne    10001112 <ssfn_mem+0x34>
1000116e:	83 ba 6c f5 00 00 00 	cmp    DWORD PTR [edx+0xf56c],0x0
10001175:	74 0a                	je     10001181 <ssfn_mem+0xa3>
10001177:	8b 92 84 f5 00 00    	mov    edx,DWORD PTR [edx+0xf584]
1000117d:	01 d2                	add    edx,edx
1000117f:	01 d0                	add    eax,edx
10001181:	83 c4 08             	add    esp,0x8
10001184:	5b                   	pop    ebx
10001185:	5e                   	pop    esi
10001186:	5f                   	pop    edi
10001187:	5d                   	pop    ebp
10001188:	c3                   	ret    

10001189 <ssfn_select>:
10001189:	55                   	push   ebp
1000118a:	57                   	push   edi
1000118b:	56                   	push   esi
1000118c:	53                   	push   ebx
1000118d:	83 ec 1c             	sub    esp,0x1c
10001190:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10001194:	85 db                	test   ebx,ebx
10001196:	75 0a                	jne    100011a2 <ssfn_select+0x19>
10001198:	be fc ff ff ff       	mov    esi,0xfffffffc
1000119d:	e9 13 01 00 00       	jmp    100012b5 <ssfn_select+0x12c>
100011a2:	89 d8                	mov    eax,ebx
100011a4:	e8 44 f2 ff ff       	call   100003ed <_ssfn_fc.part.1>
100011a9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100011ad:	81 e6 00 e0 ff ff    	and    esi,0xffffe000
100011b3:	0f 85 e9 00 00 00    	jne    100012a2 <ssfn_select+0x119>
100011b9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100011bd:	83 e8 08             	sub    eax,0x8
100011c0:	3d b8 00 00 00       	cmp    eax,0xb8
100011c5:	0f 87 de 00 00 00    	ja     100012a9 <ssfn_select+0x120>
100011cb:	81 7c 24 34 fe 00 00 00 	cmp    DWORD PTR [esp+0x34],0xfe
100011d3:	75 76                	jne    1000124b <ssfn_select+0xc2>
100011d5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
100011da:	74 bc                	je     10001198 <ssfn_select+0xf>
100011dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100011e0:	80 38 00             	cmp    BYTE PTR [eax],0x0
100011e3:	74 b3                	je     10001198 <ssfn_select+0xf>
100011e5:	31 ed                	xor    ebp,ebp
100011e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100011eb:	80 3c 28 00          	cmp    BYTE PTR [eax+ebp*1],0x0
100011ef:	74 03                	je     100011f4 <ssfn_select+0x6b>
100011f1:	45                   	inc    ebp
100011f2:	eb f3                	jmp    100011e7 <ssfn_select+0x5e>
100011f4:	8d 43 14             	lea    eax,[ebx+0x14]
100011f7:	89 df                	mov    edi,ebx
100011f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100011fd:	8b 87 a4 f5 00 00    	mov    eax,DWORD PTR [edi+0xf5a4]
10001203:	31 d2                	xor    edx,edx
10001205:	89 04 24             	mov    DWORD PTR [esp],eax
10001208:	39 14 24             	cmp    DWORD PTR [esp],edx
1000120b:	7e 33                	jle    10001240 <ssfn_select+0xb7>
1000120d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10001211:	8b 07                	mov    eax,DWORD PTR [edi]
10001213:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
10001216:	50                   	push   eax
10001217:	8d 41 20             	lea    eax,[ecx+0x20]
1000121a:	55                   	push   ebp
1000121b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
1000121f:	50                   	push   eax
10001220:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
10001224:	e8 fc ff ff ff       	call   10001225 <ssfn_select+0x9c>	10001225: R_386_PC32	memcmp
10001229:	83 c4 10             	add    esp,0x10
1000122c:	85 c0                	test   eax,eax
1000122e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10001232:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10001236:	75 05                	jne    1000123d <ssfn_select+0xb4>
10001238:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
1000123b:	eb 34                	jmp    10001271 <ssfn_select+0xe8>
1000123d:	42                   	inc    edx
1000123e:	eb c8                	jmp    10001208 <ssfn_select+0x7f>
10001240:	83 c7 04             	add    edi,0x4
10001243:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10001247:	75 b4                	jne    100011fd <ssfn_select+0x74>
10001249:	eb 65                	jmp    100012b0 <ssfn_select+0x127>
1000124b:	81 7c 24 34 ff 00 00 00 	cmp    DWORD PTR [esp+0x34],0xff
10001253:	74 15                	je     1000126a <ssfn_select+0xe1>
10001255:	83 7c 24 34 04       	cmp    DWORD PTR [esp+0x34],0x4
1000125a:	7f 54                	jg     100012b0 <ssfn_select+0x127>
1000125c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001260:	83 bc 83 a4 f5 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0xf5a4],0x0
10001268:	74 46                	je     100012b0 <ssfn_select+0x127>
1000126a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10001271:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001275:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
1000127c:	89 83 b8 f5 00 00    	mov    DWORD PTR [ebx+0xf5b8],eax
10001282:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
1000128c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001290:	89 83 bc f5 00 00    	mov    DWORD PTR [ebx+0xf5bc],eax
10001296:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000129a:	89 83 c0 f5 00 00    	mov    DWORD PTR [ebx+0xf5c0],eax
100012a0:	eb 13                	jmp    100012b5 <ssfn_select+0x12c>
100012a2:	be fb ff ff ff       	mov    esi,0xfffffffb
100012a7:	eb 0c                	jmp    100012b5 <ssfn_select+0x12c>
100012a9:	be fa ff ff ff       	mov    esi,0xfffffffa
100012ae:	eb 05                	jmp    100012b5 <ssfn_select+0x12c>
100012b0:	be fd ff ff ff       	mov    esi,0xfffffffd
100012b5:	83 c4 1c             	add    esp,0x1c
100012b8:	89 f0                	mov    eax,esi
100012ba:	5b                   	pop    ebx
100012bb:	5e                   	pop    esi
100012bc:	5f                   	pop    edi
100012bd:	5d                   	pop    ebp
100012be:	c3                   	ret    

100012bf <ssfn_render>:
100012bf:	55                   	push   ebp
100012c0:	57                   	push   edi
100012c1:	56                   	push   esi
100012c2:	53                   	push   ebx
100012c3:	81 ec dc 05 01 00    	sub    esp,0x105dc
100012c9:	8b ac 24 f0 05 01 00 	mov    ebp,DWORD PTR [esp+0x105f0]
100012d0:	c7 84 24 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc8],0x0
100012db:	85 ed                	test   ebp,ebp
100012dd:	0f 94 c2             	sete   dl
100012e0:	83 bc 24 f8 05 01 00 00 	cmp    DWORD PTR [esp+0x105f8],0x0
100012e8:	0f 94 c0             	sete   al
100012eb:	08 c2                	or     dl,al
100012ed:	74 0a                	je     100012f9 <ssfn_render+0x3a>
100012ef:	b9 fc ff ff ff       	mov    ecx,0xfffffffc
100012f4:	e9 14 1e 00 00       	jmp    1000310d <ssfn_render+0x1e4e>
100012f9:	8b 84 24 f8 05 01 00 	mov    eax,DWORD PTR [esp+0x105f8]
10001300:	31 c9                	xor    ecx,ecx
10001302:	8a 00                	mov    al,BYTE PTR [eax]
10001304:	84 c0                	test   al,al
10001306:	0f 84 01 1e 00 00    	je     1000310d <ssfn_render+0x1e4e>
1000130c:	3c 0d                	cmp    al,0xd
1000130e:	75 0f                	jne    1000131f <ssfn_render+0x60>
10001310:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10001317:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
1000131d:	eb 31                	jmp    10001350 <ssfn_render+0x91>
1000131f:	3c 0a                	cmp    al,0xa
10001321:	75 37                	jne    1000135a <ssfn_render+0x9b>
10001323:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000132a:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
10001330:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
10001333:	8b 85 c4 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c4]
10001339:	85 c0                	test   eax,eax
1000133b:	75 06                	jne    10001343 <ssfn_render+0x84>
1000133d:	8b 85 c0 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c0]
10001343:	01 d0                	add    eax,edx
10001345:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
1000134c:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
10001350:	b9 01 00 00 00       	mov    ecx,0x1
10001355:	e9 b3 1d 00 00       	jmp    1000310d <ssfn_render+0x1e4e>
1000135a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000135d:	85 c0                	test   eax,eax
1000135f:	74 3e                	je     1000139f <ssfn_render+0xe0>
10001361:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
10001364:	8d b4 24 c0 00 00 00 	lea    esi,[esp+0xc0]
1000136b:	56                   	push   esi
1000136c:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001373:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000137a:	e8 a0 f4 ff ff       	call   1000081f <_ssfn_c>
1000137f:	5b                   	pop    ebx
10001380:	85 c0                	test   eax,eax
10001382:	0f 85 71 02 00 00    	jne    100015f9 <ssfn_render+0x33a>
10001388:	8b 95 bc f5 00 00    	mov    edx,DWORD PTR [ebp+0xf5bc]
1000138e:	81 e2 00 01 00 00    	and    edx,0x100
10001394:	0f 84 fd 01 00 00    	je     10001597 <ssfn_render+0x2d8>
1000139a:	e9 1d 02 00 00       	jmp    100015bc <ssfn_render+0x2fd>
1000139f:	8b 85 b8 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5b8]
100013a5:	c7 45 18 00 00 00 00 	mov    DWORD PTR [ebp+0x18],0x0
100013ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100013b0:	3d fd 00 00 00       	cmp    eax,0xfd
100013b5:	7f 08                	jg     100013bf <ssfn_render+0x100>
100013b7:	89 c3                	mov    ebx,eax
100013b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100013bd:	eb 3f                	jmp    100013fe <ssfn_render+0x13f>
100013bf:	31 db                	xor    ebx,ebx
100013c1:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
100013c9:	eb 33                	jmp    100013fe <ssfn_render+0x13f>
100013cb:	85 c0                	test   eax,eax
100013cd:	0f 84 64 01 00 00    	je     10001537 <ssfn_render+0x278>
100013d3:	43                   	inc    ebx
100013d4:	3b 5c 24 10          	cmp    ebx,DWORD PTR [esp+0x10]
100013d8:	7e 28                	jle    10001402 <ssfn_render+0x143>
100013da:	85 c0                	test   eax,eax
100013dc:	0f 85 17 02 00 00    	jne    100015f9 <ssfn_render+0x33a>
100013e2:	31 db                	xor    ebx,ebx
100013e4:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
100013ec:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
100013f4:	74 92                	je     10001388 <ssfn_render+0xc9>
100013f6:	c7 44 24 0c ff 00 00 00 	mov    DWORD PTR [esp+0xc],0xff
100013fe:	31 c0                	xor    eax,eax
10001400:	eb d2                	jmp    100013d4 <ssfn_render+0x115>
10001402:	8b 74 9d 00          	mov    esi,DWORD PTR [ebp+ebx*4+0x0]
10001406:	f6 85 bc f5 00 00 03 	test   BYTE PTR [ebp+0xf5bc],0x3
1000140d:	74 bc                	je     100013cb <ssfn_render+0x10c>
1000140f:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000141a:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10001421:	39 94 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],edx
10001428:	7e 50                	jle    1000147a <ssfn_render+0x1bb>
1000142a:	8b 3c 96             	mov    edi,DWORD PTR [esi+edx*4]
1000142d:	0f b6 57 08          	movzx  edx,BYTE PTR [edi+0x8]
10001431:	c1 fa 04             	sar    edx,0x4
10001434:	33 95 bc f5 00 00    	xor    edx,DWORD PTR [ebp+0xf5bc]
1000143a:	80 e2 03             	and    dl,0x3
1000143d:	75 32                	jne    10001471 <ssfn_render+0x1b2>
1000143f:	0f b6 57 0b          	movzx  edx,BYTE PTR [edi+0xb]
10001443:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
10001449:	75 26                	jne    10001471 <ssfn_render+0x1b2>
1000144b:	8d 84 24 c0 00 00 00 	lea    eax,[esp+0xc0]
10001452:	50                   	push   eax
10001453:	89 f8                	mov    eax,edi
10001455:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
1000145c:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001463:	e8 b7 f3 ff ff       	call   1000081f <_ssfn_c>
10001468:	59                   	pop    ecx
10001469:	85 c0                	test   eax,eax
1000146b:	0f 85 04 01 00 00    	jne    10001575 <ssfn_render+0x2b6>
10001471:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001478:	eb a0                	jmp    1000141a <ssfn_render+0x15b>
1000147a:	85 c0                	test   eax,eax
1000147c:	0f 85 51 ff ff ff    	jne    100013d3 <ssfn_render+0x114>
10001482:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000148d:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001494:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
1000149b:	0f 8e f9 1b 00 00    	jle    1000309a <ssfn_render+0x1ddb>
100014a1:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100014a4:	0f b6 50 0b          	movzx  edx,BYTE PTR [eax+0xb]
100014a8:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
100014ae:	74 09                	je     100014b9 <ssfn_render+0x1fa>
100014b0:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100014b7:	eb d4                	jmp    1000148d <ssfn_render+0x1ce>
100014b9:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100014c0:	57                   	push   edi
100014c1:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100014c8:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100014cf:	e8 4b f3 ff ff       	call   1000081f <_ssfn_c>
100014d4:	5a                   	pop    edx
100014d5:	85 c0                	test   eax,eax
100014d7:	74 d7                	je     100014b0 <ssfn_render+0x1f1>
100014d9:	e9 97 00 00 00       	jmp    10001575 <ssfn_render+0x2b6>
100014de:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100014e1:	0f b6 50 08          	movzx  edx,BYTE PTR [eax+0x8]
100014e5:	c1 fa 04             	sar    edx,0x4
100014e8:	31 ca                	xor    edx,ecx
100014ea:	80 e2 03             	and    dl,0x3
100014ed:	0f 84 b7 1b 00 00    	je     100030aa <ssfn_render+0x1deb>
100014f3:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100014fa:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001501:	8b 8d bc f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf5bc]
10001507:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
1000150e:	7f ce                	jg     100014de <ssfn_render+0x21f>
10001510:	83 e1 03             	and    ecx,0x3
10001513:	83 f9 03             	cmp    ecx,0x3
10001516:	75 1f                	jne    10001537 <ssfn_render+0x278>
10001518:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001523:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000152a:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001531:	0f 8f 9c 1b 00 00    	jg     100030d3 <ssfn_render+0x1e14>
10001537:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001542:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001549:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001550:	7e 3e                	jle    10001590 <ssfn_render+0x2d1>
10001552:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001555:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
1000155c:	57                   	push   edi
1000155d:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001564:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000156b:	e8 af f2 ff ff       	call   1000081f <_ssfn_c>
10001570:	5a                   	pop    edx
10001571:	85 c0                	test   eax,eax
10001573:	74 12                	je     10001587 <ssfn_render+0x2c8>
10001575:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
1000157c:	8b 14 96             	mov    edx,DWORD PTR [esi+edx*4]
1000157f:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
10001582:	e9 4c fe ff ff       	jmp    100013d3 <ssfn_render+0x114>
10001587:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
1000158e:	eb b2                	jmp    10001542 <ssfn_render+0x283>
10001590:	31 c0                	xor    eax,eax
10001592:	e9 3c fe ff ff       	jmp    100013d3 <ssfn_render+0x114>
10001597:	8b 9d b8 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5b8]
1000159d:	c7 84 24 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc0],0x0
100015a8:	81 fb fd 00 00 00    	cmp    ebx,0xfd
100015ae:	7f 16                	jg     100015c6 <ssfn_render+0x307>
100015b0:	89 da                	mov    edx,ebx
100015b2:	31 c0                	xor    eax,eax
100015b4:	39 da                	cmp    edx,ebx
100015b6:	7e 15                	jle    100015cd <ssfn_render+0x30e>
100015b8:	85 c0                	test   eax,eax
100015ba:	75 3d                	jne    100015f9 <ssfn_render+0x33a>
100015bc:	b9 f9 ff ff ff       	mov    ecx,0xfffffff9
100015c1:	e9 47 1b 00 00       	jmp    1000310d <ssfn_render+0x1e4e>
100015c6:	bb 04 00 00 00       	mov    ebx,0x4
100015cb:	eb e5                	jmp    100015b2 <ssfn_render+0x2f3>
100015cd:	85 c0                	test   eax,eax
100015cf:	75 28                	jne    100015f9 <ssfn_render+0x33a>
100015d1:	83 bc 95 a4 f5 00 00 00 	cmp    DWORD PTR [ebp+edx*4+0xf5a4],0x0
100015d9:	74 1b                	je     100015f6 <ssfn_render+0x337>
100015db:	8b 4c 95 00          	mov    ecx,DWORD PTR [ebp+edx*4+0x0]
100015df:	8b 09                	mov    ecx,DWORD PTR [ecx]
100015e1:	85 c9                	test   ecx,ecx
100015e3:	74 11                	je     100015f6 <ssfn_render+0x337>
100015e5:	8b 71 10             	mov    esi,DWORD PTR [ecx+0x10]
100015e8:	80 3c 31 00          	cmp    BYTE PTR [ecx+esi*1],0x0
100015ec:	78 08                	js     100015f6 <ssfn_render+0x337>
100015ee:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
100015f1:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
100015f4:	01 c8                	add    eax,ecx
100015f6:	42                   	inc    edx
100015f7:	eb bb                	jmp    100015b4 <ssfn_render+0x2f5>
100015f9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
100015fc:	b9 fd ff ff ff       	mov    ecx,0xfffffffd
10001601:	85 d2                	test   edx,edx
10001603:	0f 84 04 1b 00 00    	je     1000310d <ssfn_render+0x1e4e>
10001609:	80 7a 0b 00          	cmp    BYTE PTR [edx+0xb],0x0
1000160d:	0f 84 fa 1a 00 00    	je     1000310d <ssfn_render+0x1e4e>
10001613:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
10001619:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
1000161d:	85 ff                	test   edi,edi
1000161f:	0f 84 e8 1a 00 00    	je     1000310d <ssfn_render+0x1e4e>
10001625:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
1000162c:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
10001630:	c1 ef 10             	shr    edi,0x10
10001633:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
10001637:	83 ff 10             	cmp    edi,0x10
1000163a:	0f 87 af fc ff ff    	ja     100012ef <ssfn_render+0x30>
10001640:	8d 70 06             	lea    esi,[eax+0x6]
10001643:	89 85 74 f5 00 00    	mov    DWORD PTR [ebp+0xf574],eax
10001649:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
1000164d:	8b b5 bc f5 00 00    	mov    esi,DWORD PTR [ebp+0xf5bc]
10001653:	89 f7                	mov    edi,esi
10001655:	81 e7 00 02 00 00    	and    edi,0x200
1000165b:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
1000165f:	75 34                	jne    10001695 <ssfn_render+0x3d6>
10001661:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001665:	8b 8c bd 28 f5 00 00 	mov    ecx,DWORD PTR [ebp+edi*4+0xf528]
1000166c:	85 c9                	test   ecx,ecx
1000166e:	74 25                	je     10001695 <ssfn_render+0x3d6>
10001670:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001674:	0f b6 ff             	movzx  edi,bh
10001677:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
1000167a:	85 c9                	test   ecx,ecx
1000167c:	74 17                	je     10001695 <ssfn_render+0x3d6>
1000167e:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
10001683:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
10001686:	85 c9                	test   ecx,ecx
10001688:	74 0b                	je     10001695 <ssfn_render+0x3d6>
1000168a:	89 8d 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],ecx
10001690:	e9 25 0d 00 00       	jmp    100023ba <ssfn_render+0x10fb>
10001695:	0f b6 4a 0b          	movzx  ecx,BYTE PTR [edx+0xb]
10001699:	f7 c6 40 00 00 00    	test   esi,0x40
1000169f:	75 1a                	jne    100016bb <ssfn_render+0x3fc>
100016a1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
100016a5:	7e 10                	jle    100016b7 <ssfn_render+0x3f8>
100016a7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100016ab:	83 c7 04             	add    edi,0x4
100016ae:	83 e7 fc             	and    edi,0xfffffffc
100016b1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100016b5:	eb 04                	jmp    100016bb <ssfn_render+0x3fc>
100016b7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
100016bb:	c6 44 24 28 00       	mov    BYTE PTR [esp+0x28],0x0
100016c0:	f7 c6 02 00 00 00    	test   esi,0x2
100016c6:	74 14                	je     100016dc <ssfn_render+0x41d>
100016c8:	8a 5a 08             	mov    bl,BYTE PTR [edx+0x8]
100016cb:	c0 eb 05             	shr    bl,0x5
100016ce:	89 df                	mov    edi,ebx
100016d0:	83 f7 01             	xor    edi,0x1
100016d3:	83 e7 01             	and    edi,0x1
100016d6:	89 fb                	mov    ebx,edi
100016d8:	88 5c 24 28          	mov    BYTE PTR [esp+0x28],bl
100016dc:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
100016e1:	83 e6 01             	and    esi,0x1
100016e4:	74 10                	je     100016f6 <ssfn_render+0x437>
100016e6:	f6 42 08 10          	test   BYTE PTR [edx+0x8],0x10
100016ea:	75 0a                	jne    100016f6 <ssfn_render+0x437>
100016ec:	8d 51 40             	lea    edx,[ecx+0x40]
100016ef:	c1 fa 06             	sar    edx,0x6
100016f2:	88 54 24 48          	mov    BYTE PTR [esp+0x48],dl
100016f6:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
100016fa:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100016ff:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10001703:	99                   	cdq    
10001704:	f7 f9                	idiv   ecx
10001706:	89 c1                	mov    ecx,eax
10001708:	31 c0                	xor    eax,eax
1000170a:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
1000170f:	74 0c                	je     1000171d <ssfn_render+0x45e>
10001711:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001715:	be 04 00 00 00       	mov    esi,0x4
1000171a:	99                   	cdq    
1000171b:	f7 fe                	idiv   esi
1000171d:	01 c8                	add    eax,ecx
1000171f:	0f b6 74 24 48       	movzx  esi,BYTE PTR [esp+0x48]
10001724:	b9 fa ff ff ff       	mov    ecx,0xfffffffa
10001729:	01 f0                	add    eax,esi
1000172b:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
1000172f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001733:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001737:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
1000173c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001740:	3d ff f4 00 00       	cmp    eax,0xf4ff
10001745:	0f 8f c2 19 00 00    	jg     1000310d <ssfn_render+0x1e4e>
1000174b:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
10001750:	0f 85 f0 00 00 00    	jne    10001846 <ssfn_render+0x587>
10001756:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000175a:	8d 74 85 00          	lea    esi,[ebp+eax*4+0x0]
1000175e:	83 be 28 f5 00 00 00 	cmp    DWORD PTR [esi+0xf528],0x0
10001765:	75 2f                	jne    10001796 <ssfn_render+0x4d7>
10001767:	83 ec 0c             	sub    esp,0xc
1000176a:	68 00 04 00 00       	push   0x400
1000176f:	e8 fc ff ff ff       	call   10001770 <ssfn_render+0x4b1>	10001770: R_386_PC32	malloc
10001774:	83 c4 10             	add    esp,0x10
10001777:	89 86 28 f5 00 00    	mov    DWORD PTR [esi+0xf528],eax
1000177d:	85 c0                	test   eax,eax
1000177f:	75 08                	jne    10001789 <ssfn_render+0x4ca>
10001781:	83 c9 ff             	or     ecx,0xffffffff
10001784:	e9 84 19 00 00       	jmp    1000310d <ssfn_render+0x1e4e>
10001789:	89 c7                	mov    edi,eax
1000178b:	b9 00 01 00 00       	mov    ecx,0x100
10001790:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001794:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10001796:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000179a:	0f b6 dc             	movzx  ebx,ah
1000179d:	8b 86 28 f5 00 00    	mov    eax,DWORD PTR [esi+0xf528]
100017a3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
100017a6:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
100017a9:	75 3a                	jne    100017e5 <ssfn_render+0x526>
100017ab:	83 ec 0c             	sub    esp,0xc
100017ae:	68 00 04 00 00       	push   0x400
100017b3:	e8 fc ff ff ff       	call   100017b4 <ssfn_render+0x4f5>	100017b4: R_386_PC32	malloc
100017b8:	89 03                	mov    DWORD PTR [ebx],eax
100017ba:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
100017c1:	83 c4 10             	add    esp,0x10
100017c4:	89 c2                	mov    edx,eax
100017c6:	0f b6 c4             	movzx  eax,ah
100017c9:	c1 ea 10             	shr    edx,0x10
100017cc:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
100017d3:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
100017d6:	85 d2                	test   edx,edx
100017d8:	74 a7                	je     10001781 <ssfn_render+0x4c2>
100017da:	b9 00 01 00 00       	mov    ecx,0x100
100017df:	31 c0                	xor    eax,eax
100017e1:	89 d7                	mov    edi,edx
100017e3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100017e5:	8b 84 24 c0 00 00 00 	mov    eax,DWORD PTR [esp+0xc0]
100017ec:	83 ec 0c             	sub    esp,0xc
100017ef:	0f b6 cc             	movzx  ecx,ah
100017f2:	89 c2                	mov    edx,eax
100017f4:	0f b6 c0             	movzx  eax,al
100017f7:	c1 ea 10             	shr    edx,0x10
100017fa:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001801:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
10001804:	8d 1c 82             	lea    ebx,[edx+eax*4]
10001807:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000180b:	83 c0 08             	add    eax,0x8
1000180e:	50                   	push   eax
1000180f:	e8 fc ff ff ff       	call   10001810 <ssfn_render+0x551>	10001810: R_386_PC32	malloc
10001814:	89 03                	mov    DWORD PTR [ebx],eax
10001816:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
1000181c:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
10001823:	83 c4 10             	add    esp,0x10
10001826:	89 c2                	mov    edx,eax
10001828:	0f b6 cc             	movzx  ecx,ah
1000182b:	c1 ea 10             	shr    edx,0x10
1000182e:	0f b6 c0             	movzx  eax,al
10001831:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001838:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
1000183b:	83 3c 82 00          	cmp    DWORD PTR [edx+eax*4],0x0
1000183f:	75 0e                	jne    1000184f <ssfn_render+0x590>
10001841:	e9 3b ff ff ff       	jmp    10001781 <ssfn_render+0x4c2>
10001846:	8d 45 1c             	lea    eax,[ebp+0x1c]
10001849:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
1000184f:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10001855:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10001859:	74 2a                	je     10001885 <ssfn_render+0x5c6>
1000185b:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001860:	74 23                	je     10001885 <ssfn_render+0x5c6>
10001862:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001865:	bb 04 00 00 00       	mov    ebx,0x4
1000186a:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
1000186e:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
10001872:	89 cf                	mov    edi,ecx
10001874:	29 c7                	sub    edi,eax
10001876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000187a:	0f af c7             	imul   eax,edi
1000187d:	99                   	cdq    
1000187e:	f7 fb                	idiv   ebx
10001880:	99                   	cdq    
10001881:	f7 f9                	idiv   ecx
10001883:	eb 02                	jmp    10001887 <ssfn_render+0x5c8>
10001885:	31 c0                	xor    eax,eax
10001887:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000188d:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10001891:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001895:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
1000189d:	66 89 32             	mov    WORD PTR [edx],si
100018a0:	c6 44 24 14 fe       	mov    BYTE PTR [esp+0x14],0xfe
100018a5:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100018ab:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
100018ae:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
100018b4:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100018ba:	8a 59 04             	mov    bl,BYTE PTR [ecx+0x4]
100018bd:	01 c3                	add    ebx,eax
100018bf:	88 5a 04             	mov    BYTE PTR [edx+0x4],bl
100018c2:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100018c8:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
100018ce:	8a 49 05             	mov    cl,BYTE PTR [ecx+0x5]
100018d1:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
100018d4:	8b 8d 24 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf524]
100018da:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
100018e0:	8a 12                	mov    dl,BYTE PTR [edx]
100018e2:	83 e2 3f             	and    edx,0x3f
100018e5:	01 d0                	add    eax,edx
100018e7:	88 41 03             	mov    BYTE PTR [ecx+0x3],al
100018ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
100018ee:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100018f4:	8d 50 08             	lea    edx,[eax+0x8]
100018f7:	b0 ff                	mov    al,0xff
100018f9:	89 d7                	mov    edi,edx
100018fb:	f3 aa                	rep stos BYTE PTR es:[edi],al
100018fd:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001903:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
10001907:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000190d:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
10001911:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001915:	c1 e0 04             	shl    eax,0x4
10001918:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
1000191c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001920:	c1 e0 04             	shl    eax,0x4
10001923:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10001927:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
1000192d:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
10001931:	3b 44 24 50          	cmp    eax,DWORD PTR [esp+0x50]
10001935:	0f 8e 4d 0a 00 00    	jle    10002388 <ssfn_render+0x10c9>
1000193b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
1000193f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001943:	8a 4e 01             	mov    cl,BYTE PTR [esi+0x1]
10001946:	0f b6 00             	movzx  eax,BYTE PTR [eax]
10001949:	8a 12                	mov    dl,BYTE PTR [edx]
1000194b:	0f b6 5e 02          	movzx  ebx,BYTE PTR [esi+0x2]
1000194f:	83 e2 40             	and    edx,0x40
10001952:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
10001956:	88 c2                	mov    dl,al
10001958:	21 ca                	and    edx,ecx
1000195a:	fe c2                	inc    dl
1000195c:	75 14                	jne    10001972 <ssfn_render+0x6b3>
1000195e:	80 7c 24 1c 01       	cmp    BYTE PTR [esp+0x1c],0x1
10001963:	19 c0                	sbb    eax,eax
10001965:	8d 44 06 06          	lea    eax,[esi+eax*1+0x6]
10001969:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000196d:	e9 09 0a 00 00       	jmp    1000237b <ssfn_render+0x10bc>
10001972:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10001976:	8b 7d 18             	mov    edi,DWORD PTR [ebp+0x18]
10001979:	c1 e0 04             	shl    eax,0x4
1000197c:	0f b6 77 0b          	movzx  esi,BYTE PTR [edi+0xb]
10001980:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001985:	99                   	cdq    
10001986:	f7 fe                	idiv   esi
10001988:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000198c:	0f b6 c1             	movzx  eax,cl
1000198f:	c1 e0 04             	shl    eax,0x4
10001992:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001997:	99                   	cdq    
10001998:	f7 fe                	idiv   esi
1000199a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000199e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100019a2:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
100019a6:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
100019aa:	c1 e2 10             	shl    edx,0x10
100019ad:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
100019b2:	74 0e                	je     100019c2 <ssfn_render+0x703>
100019b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100019b8:	83 44 24 18 06       	add    DWORD PTR [esp+0x18],0x6
100019bd:	8b 58 02             	mov    ebx,DWORD PTR [eax+0x2]
100019c0:	eb 0c                	jmp    100019ce <ssfn_render+0x70f>
100019c2:	c1 e0 08             	shl    eax,0x8
100019c5:	83 44 24 18 05       	add    DWORD PTR [esp+0x18],0x5
100019ca:	09 d0                	or     eax,edx
100019cc:	09 c3                	or     ebx,eax
100019ce:	8d 0c 1f             	lea    ecx,[edi+ebx*1]
100019d1:	8a 01                	mov    al,BYTE PTR [ecx]
100019d3:	84 c0                	test   al,al
100019d5:	0f 88 17 05 00 00    	js     10001ef2 <ssfn_render+0xc33>
100019db:	89 c7                	mov    edi,eax
100019dd:	83 e7 3f             	and    edi,0x3f
100019e0:	a8 40                	test   al,0x40
100019e2:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
100019e6:	74 10                	je     100019f8 <ssfn_render+0x739>
100019e8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
100019ec:	89 f8                	mov    eax,edi
100019ee:	41                   	inc    ecx
100019ef:	c1 e0 08             	shl    eax,0x8
100019f2:	09 c2                	or     edx,eax
100019f4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
100019f8:	8d 41 01             	lea    eax,[ecx+0x1]
100019fb:	c7 85 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf580],0x0
10001a05:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001a09:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001a14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001a18:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10001a1c:	83 c0 04             	add    eax,0x4
10001a1f:	c1 f8 02             	sar    eax,0x2
10001a22:	01 c7                	add    edi,eax
10001a24:	8b 8c 24 cc 00 00 00 	mov    ecx,DWORD PTR [esp+0xcc]
10001a2b:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001a2f:	0f 8f d7 01 00 00    	jg     10001c0c <ssfn_render+0x94d>
10001a35:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001a38:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
10001a3c:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
10001a40:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001a44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001a48:	0f b6 07             	movzx  eax,BYTE PTR [edi]
10001a4b:	c1 e0 04             	shl    eax,0x4
10001a4e:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a53:	99                   	cdq    
10001a54:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001a58:	01 c6                	add    esi,eax
10001a5a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10001a5e:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10001a62:	c1 e0 04             	shl    eax,0x4
10001a65:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a6a:	99                   	cdq    
10001a6b:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001a6f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001a73:	01 c3                	add    ebx,eax
10001a75:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10001a79:	89 c8                	mov    eax,ecx
10001a7b:	01 c9                	add    ecx,ecx
10001a7d:	c1 f8 02             	sar    eax,0x2
10001a80:	83 e1 06             	and    ecx,0x6
10001a83:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
10001a87:	d3 f8                	sar    eax,cl
10001a89:	83 e0 03             	and    eax,0x3
10001a8c:	89 c1                	mov    ecx,eax
10001a8e:	83 f8 02             	cmp    eax,0x2
10001a91:	74 4a                	je     10001add <ssfn_render+0x81e>
10001a93:	83 f8 03             	cmp    eax,0x3
10001a96:	0f 84 e4 00 00 00    	je     10001b80 <ssfn_render+0x8c1>
10001a9c:	49                   	dec    ecx
10001a9d:	74 20                	je     10001abf <ssfn_render+0x800>
10001a9f:	89 b5 9c f5 00 00    	mov    DWORD PTR [ebp+0xf59c],esi
10001aa5:	89 b5 94 f5 00 00    	mov    DWORD PTR [ebp+0xf594],esi
10001aab:	89 9d a0 f5 00 00    	mov    DWORD PTR [ebp+0xf5a0],ebx
10001ab1:	89 9d 98 f5 00 00    	mov    DWORD PTR [ebp+0xf598],ebx
10001ab7:	83 c7 02             	add    edi,0x2
10001aba:	e9 41 01 00 00       	jmp    10001c00 <ssfn_render+0x941>
10001abf:	83 c7 02             	add    edi,0x2
10001ac2:	50                   	push   eax
10001ac3:	50                   	push   eax
10001ac4:	89 e8                	mov    eax,ebp
10001ac6:	53                   	push   ebx
10001ac7:	56                   	push   esi
10001ac8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10001acc:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10001ad0:	e8 9c e9 ff ff       	call   10000471 <_ssfn_l>
10001ad5:	83 c4 10             	add    esp,0x10
10001ad8:	e9 23 01 00 00       	jmp    10001c00 <ssfn_render+0x941>
10001add:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
10001ae1:	83 c7 04             	add    edi,0x4
10001ae4:	c1 e0 04             	shl    eax,0x4
10001ae7:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001aec:	99                   	cdq    
10001aed:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001af1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001af5:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10001af9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001afd:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001b01:	c1 e0 04             	shl    eax,0x4
10001b04:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b09:	99                   	cdq    
10001b0a:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b0e:	83 ec 0c             	sub    esp,0xc
10001b11:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10001b15:	6a 00                	push   0x0
10001b17:	53                   	push   ebx
10001b18:	56                   	push   esi
10001b19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001b1d:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
10001b21:	99                   	cdq    
10001b22:	f7 f9                	idiv   ecx
10001b24:	01 d8                	add    eax,ebx
10001b26:	50                   	push   eax
10001b27:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10001b2b:	2b 44 24 70          	sub    eax,DWORD PTR [esp+0x70]
10001b2f:	99                   	cdq    
10001b30:	f7 f9                	idiv   ecx
10001b32:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10001b36:	50                   	push   eax
10001b37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001b3b:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001b3f:	2b 85 a0 f5 00 00    	sub    eax,DWORD PTR [ebp+0xf5a0]
10001b45:	99                   	cdq    
10001b46:	f7 f9                	idiv   ecx
10001b48:	03 85 a0 f5 00 00    	add    eax,DWORD PTR [ebp+0xf5a0]
10001b4e:	50                   	push   eax
10001b4f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10001b53:	2b 85 9c f5 00 00    	sub    eax,DWORD PTR [ebp+0xf59c]
10001b59:	99                   	cdq    
10001b5a:	f7 f9                	idiv   ecx
10001b5c:	03 85 9c f5 00 00    	add    eax,DWORD PTR [ebp+0xf59c]
10001b62:	50                   	push   eax
10001b63:	89 e8                	mov    eax,ebp
10001b65:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001b6b:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001b71:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001b75:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001b79:	e8 04 ea ff ff       	call   10000582 <_ssfn_b>
10001b7e:	eb 7d                	jmp    10001bfd <ssfn_render+0x93e>
10001b80:	83 ec 0c             	sub    esp,0xc
10001b83:	83 c7 06             	add    edi,0x6
10001b86:	6a 00                	push   0x0
10001b88:	53                   	push   ebx
10001b89:	56                   	push   esi
10001b8a:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001b8e:	c1 e0 04             	shl    eax,0x4
10001b91:	0f af 44 24 24       	imul   eax,DWORD PTR [esp+0x24]
10001b96:	99                   	cdq    
10001b97:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
10001b9b:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001b9f:	50                   	push   eax
10001ba0:	0f b6 47 fe          	movzx  eax,BYTE PTR [edi-0x2]
10001ba4:	c1 e0 04             	shl    eax,0x4
10001ba7:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10001bac:	99                   	cdq    
10001bad:	f7 7c 24 38          	idiv   DWORD PTR [esp+0x38]
10001bb1:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
10001bb5:	50                   	push   eax
10001bb6:	0f b6 47 fd          	movzx  eax,BYTE PTR [edi-0x3]
10001bba:	c1 e0 04             	shl    eax,0x4
10001bbd:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10001bc2:	99                   	cdq    
10001bc3:	f7 7c 24 3c          	idiv   DWORD PTR [esp+0x3c]
10001bc7:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001bcb:	50                   	push   eax
10001bcc:	0f b6 47 fc          	movzx  eax,BYTE PTR [edi-0x4]
10001bd0:	c1 e0 04             	shl    eax,0x4
10001bd3:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001bd8:	99                   	cdq    
10001bd9:	f7 7c 24 40          	idiv   DWORD PTR [esp+0x40]
10001bdd:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
10001be1:	50                   	push   eax
10001be2:	89 e8                	mov    eax,ebp
10001be4:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001bea:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001bf0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001bf4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001bf8:	e8 85 e9 ff ff       	call   10000582 <_ssfn_b>
10001bfd:	83 c4 30             	add    esp,0x30
10001c00:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001c07:	e9 18 fe ff ff       	jmp    10001a24 <ssfn_render+0x765>
10001c0c:	8b 85 94 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf594]
10001c12:	3b 85 9c f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf59c]
10001c18:	75 0e                	jne    10001c28 <ssfn_render+0x969>
10001c1a:	8b bd a0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5a0]
10001c20:	39 bd 98 f5 00 00    	cmp    DWORD PTR [ebp+0xf598],edi
10001c26:	74 2e                	je     10001c56 <ssfn_render+0x997>
10001c28:	8b 8d 80 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf580]
10001c2e:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001c34:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
10001c38:	8b 95 80 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf580]
10001c3e:	8b 85 6c f5 00 00    	mov    eax,DWORD PTR [ebp+0xf56c]
10001c44:	8b 8d 98 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf598]
10001c4a:	66 89 4c 50 02       	mov    WORD PTR [eax+edx*2+0x2],cx
10001c4f:	83 85 80 f5 00 00 02 	add    DWORD PTR [ebp+0xf580],0x2
10001c56:	b3 fe                	mov    bl,0xfe
10001c58:	83 bd 80 f5 00 00 04 	cmp    DWORD PTR [ebp+0xf580],0x4
10001c5f:	0f 8e 16 07 00 00    	jle    1000237b <ssfn_render+0x10bc>
10001c65:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10001c6d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001c75:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10001c7d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10001c85:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10001c8d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10001c91:	39 7c 24 2c          	cmp    DWORD PTR [esp+0x2c],edi
10001c95:	0f 8d de 06 00 00    	jge    10002379 <ssfn_render+0x10ba>
10001c9b:	8b 85 80 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf580]
10001ca1:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001cac:	83 e8 03             	sub    eax,0x3
10001caf:	31 f6                	xor    esi,esi
10001cb1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001cb5:	89 f8                	mov    eax,edi
10001cb7:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
10001cbb:	c1 f8 02             	sar    eax,0x2
10001cbe:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10001cc2:	8b bc 24 cc 00 00 00 	mov    edi,DWORD PTR [esp+0xcc]
10001cc9:	39 7c 24 54          	cmp    DWORD PTR [esp+0x54],edi
10001ccd:	0f 8e 16 01 00 00    	jle    10001de9 <ssfn_render+0xb2a>
10001cd3:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001cd9:	8d 47 01             	lea    eax,[edi+0x1]
10001cdc:	01 c0                	add    eax,eax
10001cde:	0f b7 1c 02          	movzx  ebx,WORD PTR [edx+eax*1]
10001ce2:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10001ce6:	0f b7 5c 02 04       	movzx  ebx,WORD PTR [edx+eax*1+0x4]
10001ceb:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10001cef:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001cf3:	7d 0c                	jge    10001d01 <ssfn_render+0xa42>
10001cf5:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001cf9:	0f 8f db 00 00 00    	jg     10001dda <ssfn_render+0xb1b>
10001cff:	eb 0a                	jmp    10001d0b <ssfn_render+0xa4c>
10001d01:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001d05:	0f 8e cf 00 00 00    	jle    10001dda <ssfn_render+0xb1b>
10001d0b:	0f b7 4c 02 fe       	movzx  ecx,WORD PTR [edx+eax*1-0x2]
10001d10:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001d14:	0f b7 4c 02 02       	movzx  ecx,WORD PTR [edx+eax*1+0x2]
10001d19:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001d1d:	89 d8                	mov    eax,ebx
10001d1f:	c1 fa 04             	sar    edx,0x4
10001d22:	c1 f8 04             	sar    eax,0x4
10001d25:	39 c2                	cmp    edx,eax
10001d27:	75 0a                	jne    10001d33 <ssfn_render+0xa74>
10001d29:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10001d2d:	01 c8                	add    eax,ecx
10001d2f:	d1 f8                	sar    eax,1
10001d31:	eb 1a                	jmp    10001d4d <ssfn_render+0xa8e>
10001d33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001d37:	2b 4c 24 4c          	sub    ecx,DWORD PTR [esp+0x4c]
10001d3b:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
10001d3f:	2b 5c 24 34          	sub    ebx,DWORD PTR [esp+0x34]
10001d43:	0f af c1             	imul   eax,ecx
10001d46:	99                   	cdq    
10001d47:	f7 fb                	idiv   ebx
10001d49:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10001d4d:	c1 f8 04             	sar    eax,0x4
10001d50:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001d55:	74 04                	je     10001d5b <ssfn_render+0xa9c>
10001d57:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
10001d5b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10001d60:	75 3f                	jne    10001da1 <ssfn_render+0xae2>
10001d62:	80 7c 24 48 00       	cmp    BYTE PTR [esp+0x48],0x0
10001d67:	74 38                	je     10001da1 <ssfn_render+0xae2>
10001d69:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001d6d:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001d73:	f7 db                	neg    ebx
10001d75:	01 c2                	add    edx,eax
10001d77:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001d7b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001d7f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001d83:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001d87:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10001d8b:	38 5c 11 08          	cmp    BYTE PTR [ecx+edx*1+0x8],bl
10001d8f:	74 10                	je     10001da1 <ssfn_render+0xae2>
10001d91:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10001d95:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001d99:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001d9d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001da1:	31 d2                	xor    edx,edx
10001da3:	39 f2                	cmp    edx,esi
10001da5:	75 0b                	jne    10001db2 <ssfn_render+0xaf3>
10001da7:	66 89 84 54 d0 00 00 00 	mov    WORD PTR [esp+edx*2+0xd0],ax
10001daf:	46                   	inc    esi
10001db0:	eb 28                	jmp    10001dda <ssfn_render+0xb1b>
10001db2:	0f b7 8c 54 d0 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd0]
10001dba:	39 c1                	cmp    ecx,eax
10001dbc:	7d 03                	jge    10001dc1 <ssfn_render+0xb02>
10001dbe:	42                   	inc    edx
10001dbf:	eb e2                	jmp    10001da3 <ssfn_render+0xae4>
10001dc1:	89 f1                	mov    ecx,esi
10001dc3:	49                   	dec    ecx
10001dc4:	66 8b 9c 4c d0 00 00 00 	mov    bx,WORD PTR [esp+ecx*2+0xd0]
10001dcc:	39 d1                	cmp    ecx,edx
10001dce:	66 89 9c 4c d2 00 00 00 	mov    WORD PTR [esp+ecx*2+0xd2],bx
10001dd6:	7f eb                	jg     10001dc3 <ssfn_render+0xb04>
10001dd8:	eb cd                	jmp    10001da7 <ssfn_render+0xae8>
10001dda:	8d 47 02             	lea    eax,[edi+0x2]
10001ddd:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10001de4:	e9 d9 fe ff ff       	jmp    10001cc2 <ssfn_render+0xa03>
10001de9:	83 fe 01             	cmp    esi,0x1
10001dec:	7e 1f                	jle    10001e0d <ssfn_render+0xb4e>
10001dee:	f7 c6 01 00 00 00    	test   esi,0x1
10001df4:	74 24                	je     10001e1a <ssfn_render+0xb5b>
10001df6:	8d 46 ff             	lea    eax,[esi-0x1]
10001df9:	66 8b 94 44 d0 00 00 00 	mov    dx,WORD PTR [esp+eax*2+0xd0]
10001e01:	66 89 94 74 cc 00 00 00 	mov    WORD PTR [esp+esi*2+0xcc],dx
10001e09:	89 c6                	mov    esi,eax
10001e0b:	eb 0d                	jmp    10001e1a <ssfn_render+0xb5b>
10001e0d:	85 f6                	test   esi,esi
10001e0f:	0f 84 c7 00 00 00    	je     10001edc <ssfn_render+0xc1d>
10001e15:	be 01 00 00 00       	mov    esi,0x1
10001e1a:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001e20:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001e24:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
10001e28:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001e2c:	39 d1                	cmp    ecx,edx
10001e2e:	7d 0b                	jge    10001e3b <ssfn_render+0xb7c>
10001e30:	8a 54 24 20          	mov    dl,BYTE PTR [esp+0x20]
10001e34:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001e38:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10001e3b:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001e46:	31 c0                	xor    eax,eax
10001e48:	31 d2                	xor    edx,edx
10001e4a:	8d 4e ff             	lea    ecx,[esi-0x1]
10001e4d:	39 d1                	cmp    ecx,edx
10001e4f:	7e 7d                	jle    10001ece <ssfn_render+0xc0f>
10001e51:	0f b7 84 54 d0 00 00 00 	movzx  eax,WORD PTR [esp+edx*2+0xd0]
10001e59:	0f b7 8c 54 d2 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd2]
10001e61:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001e65:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001e69:	79 02                	jns    10001e6d <ssfn_render+0xbae>
10001e6b:	31 c0                	xor    eax,eax
10001e6d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001e71:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
10001e75:	39 cf                	cmp    edi,ecx
10001e77:	7e 04                	jle    10001e7d <ssfn_render+0xbbe>
10001e79:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001e7d:	85 d2                	test   edx,edx
10001e7f:	74 12                	je     10001e93 <ssfn_render+0xbd4>
10001e81:	0f b7 8c 54 ce 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xce]
10001e89:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001e8d:	39 c8                	cmp    eax,ecx
10001e8f:	7d 02                	jge    10001e93 <ssfn_render+0xbd4>
10001e91:	89 c8                	mov    eax,ecx
10001e93:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10001e97:	7d 2b                	jge    10001ec4 <ssfn_render+0xc05>
10001e99:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001e9d:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
10001ea3:	8d 3c 01             	lea    edi,[ecx+eax*1]
10001ea6:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
10001eaa:	88 4c 24 34          	mov    BYTE PTR [esp+0x34],cl
10001eae:	38 4c 3b 08          	cmp    BYTE PTR [ebx+edi*1+0x8],cl
10001eb2:	75 05                	jne    10001eb9 <ssfn_render+0xbfa>
10001eb4:	c6 44 24 34 ff       	mov    BYTE PTR [esp+0x34],0xff
10001eb9:	8a 4c 24 34          	mov    cl,BYTE PTR [esp+0x34]
10001ebd:	40                   	inc    eax
10001ebe:	88 4c 3b 08          	mov    BYTE PTR [ebx+edi*1+0x8],cl
10001ec2:	eb cf                	jmp    10001e93 <ssfn_render+0xbd4>
10001ec4:	83 c2 02             	add    edx,0x2
10001ec7:	b0 01                	mov    al,0x1
10001ec9:	e9 7c ff ff ff       	jmp    10001e4a <ssfn_render+0xb8b>
10001ece:	83 e6 fe             	and    esi,0xfffffffe
10001ed1:	84 c0                	test   al,al
10001ed3:	74 07                	je     10001edc <ssfn_render+0xc1d>
10001ed5:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
10001edc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001ee0:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
10001ee4:	01 7c 24 44          	add    DWORD PTR [esp+0x44],edi
10001ee8:	83 44 24 30 10       	add    DWORD PTR [esp+0x30],0x10
10001eed:	e9 9b fd ff ff       	jmp    10001c8d <ssfn_render+0x9ce>
10001ef2:	88 c2                	mov    dl,al
10001ef4:	80 e2 60             	and    dl,0x60
10001ef7:	0f 85 95 02 00 00    	jne    10002192 <ssfn_render+0xed3>
10001efd:	83 e0 1f             	and    eax,0x1f
10001f00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001f04:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10001f0b:	c1 fb 04             	sar    ebx,0x4
10001f0e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10001f12:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10001f16:	40                   	inc    eax
10001f17:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001f1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001f1f:	c1 f8 04             	sar    eax,0x4
10001f22:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001f26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001f2a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001f2f:	99                   	cdq    
10001f30:	f7 fe                	idiv   esi
10001f32:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001f36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001f3a:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
10001f3f:	99                   	cdq    
10001f40:	f7 fe                	idiv   esi
10001f42:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001f46:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001f4c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001f50:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10001f54:	8d 14 3b             	lea    edx,[ebx+edi*1]
10001f57:	39 d6                	cmp    esi,edx
10001f59:	7d 0a                	jge    10001f65 <ssfn_render+0xca6>
10001f5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001f5f:	8d 14 3b             	lea    edx,[ebx+edi*1]
10001f62:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10001f65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001f69:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001f71:	0f af c3             	imul   eax,ebx
10001f74:	31 ff                	xor    edi,edi
10001f76:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10001f7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10001f7e:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10001f82:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001f86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001f8a:	29 d8                	sub    eax,ebx
10001f8c:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
10001f90:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
10001f94:	0f 8d b1 00 00 00    	jge    1000204b <ssfn_render+0xd8c>
10001f9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10001f9e:	99                   	cdq    
10001f9f:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001fa3:	89 c6                	mov    esi,eax
10001fa5:	31 c0                	xor    eax,eax
10001fa7:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001fac:	74 0e                	je     10001fbc <ssfn_render+0xcfd>
10001fae:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10001fb2:	bb 04 00 00 00       	mov    ebx,0x4
10001fb7:	29 f8                	sub    eax,edi
10001fb9:	99                   	cdq    
10001fba:	f7 fb                	idiv   ebx
10001fbc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10001fc0:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001fcb:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10001fcf:	0f af 74 24 30       	imul   esi,DWORD PTR [esp+0x30]
10001fd4:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001fdb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10001fdf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001fe3:	39 d8                	cmp    eax,ebx
10001fe5:	7d 4e                	jge    10002035 <ssfn_render+0xd76>
10001fe7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001feb:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
10001ff0:	99                   	cdq    
10001ff1:	f7 fb                	idiv   ebx
10001ff3:	8d 14 06             	lea    edx,[esi+eax*1]
10001ff6:	83 e0 07             	and    eax,0x7
10001ff9:	c1 fa 03             	sar    edx,0x3
10001ffc:	0f b6 54 11 02       	movzx  edx,BYTE PTR [ecx+edx*1+0x2]
10002001:	0f a3 c2             	bt     edx,eax
10002004:	72 0e                	jb     10002014 <ssfn_render+0xd55>
10002006:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
1000200a:	43                   	inc    ebx
1000200b:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
10002012:	eb c0                	jmp    10001fd4 <ssfn_render+0xd15>
10002014:	31 c0                	xor    eax,eax
10002016:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
1000201a:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
1000201e:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
10002024:	40                   	inc    eax
10002025:	03 54 24 58          	add    edx,DWORD PTR [esp+0x58]
10002029:	88 5c 10 07          	mov    BYTE PTR [eax+edx*1+0x7],bl
1000202d:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
10002031:	7d e3                	jge    10002016 <ssfn_render+0xd57>
10002033:	eb d1                	jmp    10002006 <ssfn_render+0xd47>
10002035:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002039:	47                   	inc    edi
1000203a:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
1000203e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10002042:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
10002046:	e9 45 ff ff ff       	jmp    10001f90 <ssfn_render+0xcd1>
1000204b:	b3 fe                	mov    bl,0xfe
1000204d:	f6 85 bc f5 00 00 40 	test   BYTE PTR [ebp+0xf5bc],0x40
10002054:	0f 85 21 03 00 00    	jne    1000237b <ssfn_render+0x10bc>
1000205a:	31 c0                	xor    eax,eax
1000205c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10002060:	80 7c 24 14 fd       	cmp    BYTE PTR [esp+0x14],0xfd
10002065:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10002069:	0f 95 c0             	setne  al
1000206c:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002070:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002074:	4f                   	dec    edi
10002075:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10002079:	81 44 24 20 fc 00 00 00 	add    DWORD PTR [esp+0x20],0xfc
10002081:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002085:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
1000208c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002090:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
10002094:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002098:	31 c0                	xor    eax,eax
1000209a:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
1000209d:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
100020a1:	83 c1 04             	add    ecx,0x4
100020a4:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
100020a8:	0f 8d c0 02 00 00    	jge    1000236e <ssfn_render+0x10af>
100020ae:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
100020b2:	8d 77 01             	lea    esi,[edi+0x1]
100020b5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
100020b9:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
100020bd:	4f                   	dec    edi
100020be:	be 01 00 00 00       	mov    esi,0x1
100020c3:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
100020c7:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
100020cb:	7e 63                	jle    10002130 <ssfn_render+0xe71>
100020cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100020d1:	b9 01 00 00 00       	mov    ecx,0x1
100020d6:	89 ca                	mov    edx,ecx
100020d8:	39 4c 24 44          	cmp    DWORD PTR [esp+0x44],ecx
100020dc:	7e 45                	jle    10002123 <ssfn_render+0xe64>
100020de:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100020e4:	80 7c 02 08 ff       	cmp    BYTE PTR [edx+eax*1+0x8],0xff
100020e9:	75 34                	jne    1000211f <ssfn_render+0xe60>
100020eb:	89 c7                	mov    edi,eax
100020ed:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100020f1:	2b 7c 24 10          	sub    edi,DWORD PTR [esp+0x10]
100020f5:	38 5c 3a 08          	cmp    BYTE PTR [edx+edi*1+0x8],bl
100020f9:	74 0c                	je     10002107 <ssfn_render+0xe48>
100020fb:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
100020ff:	01 d7                	add    edi,edx
10002101:	38 5c 38 08          	cmp    BYTE PTR [eax+edi*1+0x8],bl
10002105:	75 18                	jne    1000211f <ssfn_render+0xe60>
10002107:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
1000210b:	38 5c 02 07          	cmp    BYTE PTR [edx+eax*1+0x7],bl
1000210f:	74 06                	je     10002117 <ssfn_render+0xe58>
10002111:	38 5c 02 09          	cmp    BYTE PTR [edx+eax*1+0x9],bl
10002115:	75 08                	jne    1000211f <ssfn_render+0xe60>
10002117:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
1000211b:	88 5c 02 08          	mov    BYTE PTR [edx+eax*1+0x8],bl
1000211f:	41                   	inc    ecx
10002120:	40                   	inc    eax
10002121:	eb b3                	jmp    100020d6 <ssfn_render+0xe17>
10002123:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002127:	46                   	inc    esi
10002128:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
1000212c:	b0 01                	mov    al,0x1
1000212e:	eb 97                	jmp    100020c7 <ssfn_render+0xe08>
10002130:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
10002134:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10002138:	bb 01 00 00 00       	mov    ebx,0x1
1000213d:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002141:	7e 3d                	jle    10002180 <ssfn_render+0xec1>
10002143:	b8 01 00 00 00       	mov    eax,0x1
10002148:	89 c2                	mov    edx,eax
1000214a:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
1000214e:	7e 23                	jle    10002173 <ssfn_render+0xeb4>
10002150:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10002154:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
1000215a:	8d 14 07             	lea    edx,[edi+eax*1]
1000215d:	0f b6 7c 16 08       	movzx  edi,BYTE PTR [esi+edx*1+0x8]
10002162:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
10002166:	75 08                	jne    10002170 <ssfn_render+0xeb1>
10002168:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
1000216c:	88 4c 16 08          	mov    BYTE PTR [esi+edx*1+0x8],cl
10002170:	40                   	inc    eax
10002171:	eb d5                	jmp    10002148 <ssfn_render+0xe89>
10002173:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002177:	43                   	inc    ebx
10002178:	01 74 24 34          	add    DWORD PTR [esp+0x34],esi
1000217c:	b0 01                	mov    al,0x1
1000217e:	eb bd                	jmp    1000213d <ssfn_render+0xe7e>
10002180:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
10002183:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
10002187:	01 c9                	add    ecx,ecx
10002189:	29 4c 24 30          	sub    DWORD PTR [esp+0x30],ecx
1000218d:	e9 08 ff ff ff       	jmp    1000209a <ssfn_render+0xddb>
10002192:	b3 fe                	mov    bl,0xfe
10002194:	80 fa 20             	cmp    dl,0x20
10002197:	0f 85 de 01 00 00    	jne    1000237b <ssfn_render+0x10bc>
1000219d:	89 c3                	mov    ebx,eax
1000219f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
100021a3:	c1 e3 08             	shl    ebx,0x8
100021a6:	81 e3 00 1f 00 00    	and    ebx,0x1f00
100021ac:	09 c3                	or     ebx,eax
100021ae:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
100021b2:	43                   	inc    ebx
100021b3:	40                   	inc    eax
100021b4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100021b8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
100021bc:	40                   	inc    eax
100021bd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
100021c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100021c5:	c1 f8 04             	sar    eax,0x4
100021c8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100021cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100021d0:	c1 f8 04             	sar    eax,0x4
100021d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100021d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100021db:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
100021e0:	99                   	cdq    
100021e1:	f7 fe                	idiv   esi
100021e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100021e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100021eb:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
100021f0:	99                   	cdq    
100021f1:	f7 fe                	idiv   esi
100021f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100021f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100021fb:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002201:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
10002205:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10002209:	39 d6                	cmp    esi,edx
1000220b:	7d 0b                	jge    10002218 <ssfn_render+0xf59>
1000220d:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
10002211:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
10002215:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10002218:	83 c1 04             	add    ecx,0x4
1000221b:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10002226:	8d 04 19             	lea    eax,[ecx+ebx*1]
10002229:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
1000222d:	3b 4c 24 44          	cmp    ecx,DWORD PTR [esp+0x44]
10002231:	72 35                	jb     10002268 <ssfn_render+0xfa9>
10002233:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10002237:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
1000223b:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002240:	2b 74 24 14          	sub    esi,DWORD PTR [esp+0x14]
10002244:	03 54 24 38          	add    edx,DWORD PTR [esp+0x38]
10002248:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000224f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
10002253:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
1000225b:	31 d2                	xor    edx,edx
1000225d:	31 ff                	xor    edi,edi
1000225f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
10002263:	e9 cc 00 00 00       	jmp    10002334 <ssfn_render+0x1075>
10002268:	8a 11                	mov    dl,BYTE PTR [ecx]
1000226a:	89 d0                	mov    eax,edx
1000226c:	83 e0 7f             	and    eax,0x7f
1000226f:	84 d2                	test   dl,dl
10002271:	8d 78 01             	lea    edi,[eax+0x1]
10002274:	78 09                	js     1000227f <ssfn_render+0xfc0>
10002276:	41                   	inc    ecx
10002277:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000227b:	89 ca                	mov    edx,ecx
1000227d:	eb 3d                	jmp    100022bc <ssfn_render+0xffd>
1000227f:	48                   	dec    eax
10002280:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10002287:	83 f8 fe             	cmp    eax,0xfffffffe
1000228a:	74 16                	je     100022a2 <ssfn_render+0xfe3>
1000228c:	8d 5a 01             	lea    ebx,[edx+0x1]
1000228f:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
10002296:	8a 59 01             	mov    bl,BYTE PTR [ecx+0x1]
10002299:	88 9c 14 d0 05 00 00 	mov    BYTE PTR [esp+edx*1+0x5d0],bl
100022a0:	eb dd                	jmp    1000227f <ssfn_render+0xfc0>
100022a2:	83 c1 02             	add    ecx,0x2
100022a5:	eb 86                	jmp    1000222d <ssfn_render+0xf6e>
100022a7:	42                   	inc    edx
100022a8:	8d 73 01             	lea    esi,[ebx+0x1]
100022ab:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
100022b2:	8a 42 ff             	mov    al,BYTE PTR [edx-0x1]
100022b5:	88 84 1c d0 05 00 00 	mov    BYTE PTR [esp+ebx*1+0x5d0],al
100022bc:	ff 4c 24 2c          	dec    DWORD PTR [esp+0x2c]
100022c0:	8b 9c 24 cc 00 00 00 	mov    ebx,DWORD PTR [esp+0xcc]
100022c7:	83 7c 24 2c fe       	cmp    DWORD PTR [esp+0x2c],0xfffffffe
100022cc:	75 d9                	jne    100022a7 <ssfn_render+0xfe8>
100022ce:	01 f9                	add    ecx,edi
100022d0:	e9 58 ff ff ff       	jmp    1000222d <ssfn_render+0xf6e>
100022d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100022d9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
100022dd:	99                   	cdq    
100022de:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
100022e2:	0f af c8             	imul   ecx,eax
100022e5:	31 c0                	xor    eax,eax
100022e7:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
100022ec:	74 0e                	je     100022fc <ssfn_render+0x103d>
100022ee:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100022f2:	bb 04 00 00 00       	mov    ebx,0x4
100022f7:	29 f8                	sub    eax,edi
100022f9:	99                   	cdq    
100022fa:	f7 fb                	idiv   ebx
100022fc:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002300:	31 db                	xor    ebx,ebx
10002302:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002306:	31 f6                	xor    esi,esi
10002308:	8d 84 24 d0 05 01 00 	lea    eax,[esp+0x105d0]
1000230f:	01 c1                	add    ecx,eax
10002311:	39 74 24 1c          	cmp    DWORD PTR [esp+0x1c],esi
10002315:	7f 30                	jg     10002347 <ssfn_render+0x1088>
10002317:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000231b:	85 c0                	test   eax,eax
1000231d:	79 02                	jns    10002321 <ssfn_render+0x1062>
1000231f:	31 c0                	xor    eax,eax
10002321:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002325:	47                   	inc    edi
10002326:	01 5c 24 38          	add    DWORD PTR [esp+0x38],ebx
1000232a:	b2 01                	mov    dl,0x1
1000232c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
10002330:	01 5c 24 2c          	add    DWORD PTR [esp+0x2c],ebx
10002334:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
10002338:	7c 9b                	jl     100022d5 <ssfn_render+0x1016>
1000233a:	84 d2                	test   dl,dl
1000233c:	74 3b                	je     10002379 <ssfn_render+0x10ba>
1000233e:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10002345:	eb 32                	jmp    10002379 <ssfn_render+0x10ba>
10002347:	89 d8                	mov    eax,ebx
10002349:	99                   	cdq    
1000234a:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
1000234e:	8a 84 08 00 00 ff ff 	mov    al,BYTE PTR [eax+ecx*1-0x10000]
10002355:	3c ff                	cmp    al,0xff
10002357:	74 0e                	je     10002367 <ssfn_render+0x10a8>
10002359:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000235d:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
10002363:	88 44 16 08          	mov    BYTE PTR [esi+edx*1+0x8],al
10002367:	46                   	inc    esi
10002368:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
1000236c:	eb a3                	jmp    10002311 <ssfn_render+0x1052>
1000236e:	84 c0                	test   al,al
10002370:	74 07                	je     10002379 <ssfn_render+0x10ba>
10002372:	89 94 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],edx
10002379:	b3 fe                	mov    bl,0xfe
1000237b:	ff 44 24 50          	inc    DWORD PTR [esp+0x50]
1000237f:	88 5c 24 14          	mov    BYTE PTR [esp+0x14],bl
10002383:	e9 9f f5 ff ff       	jmp    10001927 <ssfn_render+0x668>
10002388:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000238e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10002391:	8a 52 0c             	mov    dl,BYTE PTR [edx+0xc]
10002394:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
10002397:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000239d:	0f b6 72 07          	movzx  esi,BYTE PTR [edx+0x7]
100023a1:	0f b6 5a 06          	movzx  ebx,BYTE PTR [edx+0x6]
100023a5:	89 f0                	mov    eax,esi
100023a7:	89 d9                	mov    ecx,ebx
100023a9:	43                   	inc    ebx
100023aa:	39 de                	cmp    esi,ebx
100023ac:	7e 08                	jle    100023b6 <ssfn_render+0x10f7>
100023ae:	48                   	dec    eax
100023af:	29 c8                	sub    eax,ecx
100023b1:	88 42 07             	mov    BYTE PTR [edx+0x7],al
100023b4:	eb 04                	jmp    100023ba <ssfn_render+0x10fb>
100023b6:	c6 42 07 00          	mov    BYTE PTR [edx+0x7],0x0
100023ba:	83 bc 24 f4 05 01 00 00 	cmp    DWORD PTR [esp+0x105f4],0x0
100023c2:	0f 84 c9 0c 00 00    	je     10003091 <ssfn_render+0x1dd2>
100023c8:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
100023ce:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
100023d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100023d8:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100023db:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100023df:	0f ba e0 0c          	bt     eax,0xc
100023e3:	72 22                	jb     10002407 <ssfn_render+0x1148>
100023e5:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
100023e8:	83 e0 0f             	and    eax,0xf
100023eb:	3c 03                	cmp    al,0x3
100023ed:	74 18                	je     10002407 <ssfn_render+0x1148>
100023ef:	0f b6 4e 0c          	movzx  ecx,BYTE PTR [esi+0xc]
100023f3:	84 c9                	test   cl,cl
100023f5:	74 10                	je     10002407 <ssfn_render+0x1148>
100023f7:	0f b6 56 0b          	movzx  edx,BYTE PTR [esi+0xb]
100023fb:	0f af d7             	imul   edx,edi
100023fe:	89 d0                	mov    eax,edx
10002400:	99                   	cdq    
10002401:	f7 f9                	idiv   ecx
10002403:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002407:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000240b:	39 85 c4 f5 00 00    	cmp    DWORD PTR [ebp+0xf5c4],eax
10002411:	7d 06                	jge    10002419 <ssfn_render+0x115a>
10002413:	89 85 c4 f5 00 00    	mov    DWORD PTR [ebp+0xf5c4],eax
10002419:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
1000241f:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
10002423:	0f b7 13             	movzx  edx,WORD PTR [ebx]
10002426:	0f af 54 24 0c       	imul   edx,DWORD PTR [esp+0xc]
1000242b:	89 d0                	mov    eax,edx
1000242d:	99                   	cdq    
1000242e:	f7 f9                	idiv   ecx
10002430:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
10002434:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002438:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
1000243b:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
1000243f:	0f b6 43 03          	movzx  eax,BYTE PTR [ebx+0x3]
10002443:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002447:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
1000244c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002450:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002455:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002459:	99                   	cdq    
1000245a:	f7 f9                	idiv   ecx
1000245c:	31 d2                	xor    edx,edx
1000245e:	83 ff 10             	cmp    edi,0x10
10002461:	0f 9f c2             	setg   dl
10002464:	42                   	inc    edx
10002465:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
10002469:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
1000246d:	7d 08                	jge    10002477 <ssfn_render+0x11b8>
1000246f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002473:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10002477:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
1000247b:	39 c2                	cmp    edx,eax
1000247d:	7d 04                	jge    10002483 <ssfn_render+0x11c4>
1000247f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002483:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
10002488:	74 4c                	je     100024d6 <ssfn_render+0x1217>
1000248a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000248e:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002493:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002497:	99                   	cdq    
10002498:	f7 f9                	idiv   ecx
1000249a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000249e:	81 e2 00 08 00 00    	and    edx,0x800
100024a4:	74 04                	je     100024aa <ssfn_render+0x11eb>
100024a6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100024aa:	01 d0                	add    eax,edx
100024ac:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
100024b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100024b6:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
100024ba:	0f b6 43 06          	movzx  eax,BYTE PTR [ebx+0x6]
100024be:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100024c3:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100024c7:	99                   	cdq    
100024c8:	f7 f9                	idiv   ecx
100024ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
100024ce:	89 85 8c f5 00 00    	mov    DWORD PTR [ebp+0xf58c],eax
100024d4:	eb 22                	jmp    100024f8 <ssfn_render+0x1239>
100024d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100024da:	c7 85 8c f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf58c],0x0
100024e4:	d1 f8                	sar    eax,1
100024e6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
100024ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100024f2:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
100024f8:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100024ff:	8b 18                	mov    ebx,DWORD PTR [eax]
10002501:	85 db                	test   ebx,ebx
10002503:	0f 84 2e 09 00 00    	je     10002e37 <ssfn_render+0x1b78>
10002509:	0f bf 50 04          	movsx  edx,WORD PTR [eax+0x4]
1000250d:	89 d1                	mov    ecx,edx
1000250f:	89 d0                	mov    eax,edx
10002511:	66 c1 f9 0b          	sar    cx,0xb
10002515:	c1 f8 1f             	sar    eax,0x1f
10002518:	31 c2                	xor    edx,eax
1000251a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
1000251e:	29 44 24 54          	sub    DWORD PTR [esp+0x54],eax
10002522:	88 c8                	mov    al,cl
10002524:	83 e0 10             	and    eax,0x10
10002527:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
1000252b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000252f:	83 c0 40             	add    eax,0x40
10002532:	c1 f8 06             	sar    eax,0x6
10002535:	89 84 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],eax
1000253c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002540:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002544:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
10002548:	7d 08                	jge    10002552 <ssfn_render+0x1293>
1000254a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
1000254e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002552:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002555:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
1000255d:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002561:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
10002569:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
1000256d:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002572:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002576:	99                   	cdq    
10002577:	f7 f9                	idiv   ecx
10002579:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
1000257d:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002584:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10002587:	0f b6 f4             	movzx  esi,ah
1000258a:	89 c2                	mov    edx,eax
1000258c:	89 74 24 5c          	mov    DWORD PTR [esp+0x5c],esi
10002590:	c1 ea 10             	shr    edx,0x10
10002593:	0f b6 fa             	movzx  edi,dl
10002596:	89 7c 24 58          	mov    DWORD PTR [esp+0x58],edi
1000259a:	0f b6 f8             	movzx  edi,al
1000259d:	c1 e8 18             	shr    eax,0x18
100025a0:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
100025a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100025a8:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100025af:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
100025b2:	0f b6 fc             	movzx  edi,ah
100025b5:	89 c2                	mov    edx,eax
100025b7:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
100025be:	c1 ea 10             	shr    edx,0x10
100025c1:	0f b6 c0             	movzx  eax,al
100025c4:	0f b6 f2             	movzx  esi,dl
100025c7:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
100025ce:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
100025d5:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
100025d9:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100025e0:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
100025e7:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
100025eb:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
100025ef:	0f af c2             	imul   eax,edx
100025f2:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
100025f6:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
100025fa:	8d 04 90             	lea    eax,[eax+edx*4]
100025fd:	01 d8                	add    eax,ebx
100025ff:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
10002606:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
1000260a:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
10002611:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002616:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
1000261d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10002621:	39 74 24 4c          	cmp    DWORD PTR [esp+0x4c],esi
10002625:	0f 8d e2 04 00 00    	jge    10002b0d <ssfn_render+0x184e>
1000262b:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002632:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002639:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
1000263d:	0f bf 57 06          	movsx  edx,WORD PTR [edi+0x6]
10002641:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10002645:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002649:	39 d0                	cmp    eax,edx
1000264b:	0f 8d bc 04 00 00    	jge    10002b0d <ssfn_render+0x184e>
10002651:	85 c0                	test   eax,eax
10002653:	0f 88 94 04 00 00    	js     10002aed <ssfn_render+0x182e>
10002659:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000265f:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10002663:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
10002667:	c1 e1 08             	shl    ecx,0x8
1000266a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
10002672:	89 c8                	mov    eax,ecx
10002674:	0f af c3             	imul   eax,ebx
10002677:	99                   	cdq    
10002678:	f7 fe                	idiv   esi
1000267a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
10002681:	c1 f8 08             	sar    eax,0x8
10002684:	89 84 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],eax
1000268b:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002691:	0f af c3             	imul   eax,ebx
10002694:	99                   	cdq    
10002695:	f7 fe                	idiv   esi
10002697:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
1000269b:	c1 f8 08             	sar    eax,0x8
1000269e:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
100026a5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
100026a9:	2b 84 24 94 00 00 00 	sub    eax,DWORD PTR [esp+0x94]
100026b0:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
100026b7:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100026be:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
100026c2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
100026c6:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
100026ca:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
100026ce:	0f 8d 19 04 00 00    	jge    10002aed <ssfn_render+0x182e>
100026d4:	85 c0                	test   eax,eax
100026d6:	0f 88 ff 03 00 00    	js     10002adb <ssfn_render+0x181c>
100026dc:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100026e3:	83 78 14 00          	cmp    DWORD PTR [eax+0x14],0x0
100026e7:	75 42                	jne    1000272b <ssfn_render+0x146c>
100026e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100026ed:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100026f4:	b9 10 00 00 00       	mov    ecx,0x10
100026f9:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
100026fc:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
10002703:	89 c2                	mov    edx,eax
10002705:	0f b6 fc             	movzx  edi,ah
10002708:	d3 ea                	shr    edx,cl
1000270a:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
10002711:	0f b6 f2             	movzx  esi,dl
10002714:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002718:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
1000271f:	d3 e8                	shr    eax,cl
10002721:	0f b6 c0             	movzx  eax,al
10002724:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
1000272b:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002731:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10002735:	0f b7 18             	movzx  ebx,WORD PTR [eax]
10002738:	c1 e1 08             	shl    ecx,0x8
1000273b:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
1000273f:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10002747:	89 c8                	mov    eax,ecx
10002749:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
10002751:	0f af c3             	imul   eax,ebx
10002754:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
1000275c:	99                   	cdq    
1000275d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10002765:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002769:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
10002771:	89 84 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],eax
10002778:	c1 f8 08             	sar    eax,0x8
1000277b:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
10002782:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002788:	0f af c3             	imul   eax,ebx
1000278b:	99                   	cdq    
1000278c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002790:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10002794:	c1 f8 08             	sar    eax,0x8
10002797:	89 84 24 b4 00 00 00 	mov    DWORD PTR [esp+0xb4],eax
1000279e:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
100027a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100027a9:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
100027ad:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
100027b1:	0f 8d 3b 02 00 00    	jge    100029f2 <ssfn_render+0x1733>
100027b7:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
100027bb:	c1 fa 08             	sar    edx,0x8
100027be:	3b 94 24 a8 00 00 00 	cmp    edx,DWORD PTR [esp+0xa8]
100027c5:	75 25                	jne    100027ec <ssfn_render+0x152d>
100027c7:	0f b6 4c 24 48       	movzx  ecx,BYTE PTR [esp+0x48]
100027cc:	8b bc 24 a0 00 00 00 	mov    edi,DWORD PTR [esp+0xa0]
100027d3:	b8 00 01 00 00       	mov    eax,0x100
100027d8:	81 64 24 48 00 ff ff ff 	and    DWORD PTR [esp+0x48],0xffffff00
100027e0:	29 c8                	sub    eax,ecx
100027e2:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
100027e6:	39 c7                	cmp    edi,eax
100027e8:	7e 1c                	jle    10002806 <ssfn_render+0x1547>
100027ea:	eb 16                	jmp    10002802 <ssfn_render+0x1543>
100027ec:	c7 44 24 2c 00 01 00 00 	mov    DWORD PTR [esp+0x2c],0x100
100027f4:	3b 94 24 ac 00 00 00 	cmp    edx,DWORD PTR [esp+0xac]
100027fb:	75 09                	jne    10002806 <ssfn_render+0x1547>
100027fd:	0f b6 44 24 68       	movzx  eax,BYTE PTR [esp+0x68]
10002802:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002806:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
1000280a:	0f b7 00             	movzx  eax,WORD PTR [eax]
1000280d:	0f af c2             	imul   eax,edx
10002810:	89 84 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],eax
10002817:	0f b6 44 24 6c       	movzx  eax,BYTE PTR [esp+0x6c]
1000281c:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10002821:	c1 f8 08             	sar    eax,0x8
10002824:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
1000282b:	8b 84 24 98 00 00 00 	mov    eax,DWORD PTR [esp+0x98]
10002832:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002836:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
1000283a:	39 74 24 44          	cmp    DWORD PTR [esp+0x44],esi
1000283e:	0f 8d a1 01 00 00    	jge    100029e5 <ssfn_render+0x1726>
10002844:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002848:	c1 f8 08             	sar    eax,0x8
1000284b:	3b 84 24 b0 00 00 00 	cmp    eax,DWORD PTR [esp+0xb0]
10002852:	75 3b                	jne    1000288f <ssfn_render+0x15d0>
10002854:	0f b6 4c 24 44       	movzx  ecx,BYTE PTR [esp+0x44]
10002859:	ba 00 01 00 00       	mov    edx,0x100
1000285e:	81 64 24 44 00 ff ff ff 	and    DWORD PTR [esp+0x44],0xffffff00
10002866:	29 ca                	sub    edx,ecx
10002868:	89 f1                	mov    ecx,esi
1000286a:	2b 8c 24 98 00 00 00 	sub    ecx,DWORD PTR [esp+0x98]
10002871:	39 d1                	cmp    ecx,edx
10002873:	7c 0e                	jl     10002883 <ssfn_render+0x15c4>
10002875:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002879:	81 fa 00 01 00 00    	cmp    edx,0x100
1000287f:	74 22                	je     100028a3 <ssfn_render+0x15e4>
10002881:	89 d1                	mov    ecx,edx
10002883:	0f af 4c 24 2c       	imul   ecx,DWORD PTR [esp+0x2c]
10002888:	89 cf                	mov    edi,ecx
1000288a:	c1 ff 08             	sar    edi,0x8
1000288d:	eb 14                	jmp    100028a3 <ssfn_render+0x15e4>
1000288f:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
10002896:	3b 84 24 b4 00 00 00 	cmp    eax,DWORD PTR [esp+0xb4]
1000289d:	74 04                	je     100028a3 <ssfn_render+0x15e4>
1000289f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
100028a3:	03 44 24 74          	add    eax,DWORD PTR [esp+0x74]
100028a7:	01 7c 24 30          	add    DWORD PTR [esp+0x30],edi
100028ab:	8b b4 24 b8 00 00 00 	mov    esi,DWORD PTR [esp+0xb8]
100028b2:	0f b6 54 06 08       	movzx  edx,BYTE PTR [esi+eax*1+0x8]
100028b7:	81 fa ff 00 00 00    	cmp    edx,0xff
100028bd:	75 37                	jne    100028f6 <ssfn_render+0x1637>
100028bf:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
100028c6:	81 44 24 40 ff 00 00 00 	add    DWORD PTR [esp+0x40],0xff
100028ce:	0f af c7             	imul   eax,edi
100028d1:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
100028d5:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
100028dc:	0f af c7             	imul   eax,edi
100028df:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
100028e3:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
100028ea:	0f af c7             	imul   eax,edi
100028ed:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
100028f1:	e9 e2 00 00 00       	jmp    100029d8 <ssfn_render+0x1719>
100028f6:	81 fa fe 00 00 00    	cmp    edx,0xfe
100028fc:	74 2d                	je     1000292b <ssfn_render+0x166c>
100028fe:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002901:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
10002904:	85 c9                	test   ecx,ecx
10002906:	74 23                	je     1000292b <ssfn_render+0x166c>
10002908:	01 c8                	add    eax,ecx
1000290a:	8b 1c 90             	mov    ebx,DWORD PTR [eax+edx*4]
1000290d:	89 d9                	mov    ecx,ebx
1000290f:	89 9c 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],ebx
10002916:	c1 e9 10             	shr    ecx,0x10
10002919:	0f b6 f7             	movzx  esi,bh
1000291c:	0f b6 c1             	movzx  eax,cl
1000291f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10002923:	0f b6 c3             	movzx  eax,bl
10002926:	c1 eb 18             	shr    ebx,0x18
10002929:	eb 14                	jmp    1000293f <ssfn_render+0x1680>
1000292b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
1000292f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002933:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10002937:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
1000293b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000293f:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002945:	75 25                	jne    1000296c <ssfn_render+0x16ad>
10002947:	0f af c7             	imul   eax,edi
1000294a:	0f af f7             	imul   esi,edi
1000294d:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002951:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10002955:	69 c7 ff 00 00 00    	imul   eax,edi,0xff
1000295b:	0f af cf             	imul   ecx,edi
1000295e:	01 74 24 38          	add    DWORD PTR [esp+0x38],esi
10002962:	01 4c 24 34          	add    DWORD PTR [esp+0x34],ecx
10002966:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
1000296a:	eb 6c                	jmp    100029d8 <ssfn_render+0x1719>
1000296c:	0f af f3             	imul   esi,ebx
1000296f:	0f af c3             	imul   eax,ebx
10002972:	b9 ff 00 00 00       	mov    ecx,0xff
10002977:	8b 94 24 88 00 00 00 	mov    edx,DWORD PTR [esp+0x88]
1000297e:	29 d9                	sub    ecx,ebx
10002980:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
10002984:	0f af d1             	imul   edx,ecx
10002987:	b9 ff 00 00 00       	mov    ecx,0xff
1000298c:	01 d0                	add    eax,edx
1000298e:	0f af c7             	imul   eax,edi
10002991:	99                   	cdq    
10002992:	f7 f9                	idiv   ecx
10002994:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002998:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
1000299c:	0f af 84 24 8c 00 00 00 	imul   eax,DWORD PTR [esp+0x8c]
100029a4:	01 f0                	add    eax,esi
100029a6:	89 ce                	mov    esi,ecx
100029a8:	0f af c7             	imul   eax,edi
100029ab:	99                   	cdq    
100029ac:	f7 f9                	idiv   ecx
100029ae:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
100029b2:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
100029b6:	0f af cb             	imul   ecx,ebx
100029b9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
100029bd:	0f af df             	imul   ebx,edi
100029c0:	0f af 84 24 90 00 00 00 	imul   eax,DWORD PTR [esp+0x90]
100029c8:	01 5c 24 40          	add    DWORD PTR [esp+0x40],ebx
100029cc:	01 c8                	add    eax,ecx
100029ce:	0f af c7             	imul   eax,edi
100029d1:	99                   	cdq    
100029d2:	f7 fe                	idiv   esi
100029d4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
100029d8:	81 44 24 44 00 01 00 00 	add    DWORD PTR [esp+0x44],0x100
100029e0:	e9 51 fe ff ff       	jmp    10002836 <ssfn_render+0x1577>
100029e5:	81 44 24 48 00 01 00 00 	add    DWORD PTR [esp+0x48],0x100
100029ed:	e9 b7 fd ff ff       	jmp    100027a9 <ssfn_render+0x14ea>
100029f2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
100029f7:	74 30                	je     10002a29 <ssfn_render+0x176a>
100029f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100029fd:	31 d2                	xor    edx,edx
100029ff:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a03:	31 d2                	xor    edx,edx
10002a05:	89 c1                	mov    ecx,eax
10002a07:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10002a0b:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a0f:	31 d2                	xor    edx,edx
10002a11:	89 c6                	mov    esi,eax
10002a13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10002a17:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a1b:	31 d2                	xor    edx,edx
10002a1d:	89 c3                	mov    ebx,eax
10002a1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002a23:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a27:	eb 1c                	jmp    10002a45 <ssfn_render+0x1786>
10002a29:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002a2d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
10002a31:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10002a35:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002a39:	c1 e9 08             	shr    ecx,0x8
10002a3c:	c1 ee 08             	shr    esi,0x8
10002a3f:	c1 eb 08             	shr    ebx,0x8
10002a42:	c1 e8 08             	shr    eax,0x8
10002a45:	83 f8 0f             	cmp    eax,0xf
10002a48:	0f 86 8d 00 00 00    	jbe    10002adb <ssfn_render+0x181c>
10002a4e:	89 ca                	mov    edx,ecx
10002a50:	81 f9 ff 00 00 00    	cmp    ecx,0xff
10002a56:	76 05                	jbe    10002a5d <ssfn_render+0x179e>
10002a58:	ba ff 00 00 00       	mov    edx,0xff
10002a5d:	b9 10 00 00 00       	mov    ecx,0x10
10002a62:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
10002a69:	d3 e2                	shl    edx,cl
10002a6b:	3d ff 00 00 00       	cmp    eax,0xff
10002a70:	89 d1                	mov    ecx,edx
10002a72:	76 05                	jbe    10002a79 <ssfn_render+0x17ba>
10002a74:	b8 ff 00 00 00       	mov    eax,0xff
10002a79:	c1 e0 18             	shl    eax,0x18
10002a7c:	09 c8                	or     eax,ecx
10002a7e:	81 fe ff 00 00 00    	cmp    esi,0xff
10002a84:	76 05                	jbe    10002a8b <ssfn_render+0x17cc>
10002a86:	be ff 00 00 00       	mov    esi,0xff
10002a8b:	c1 e6 08             	shl    esi,0x8
10002a8e:	09 f0                	or     eax,esi
10002a90:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002a96:	76 05                	jbe    10002a9d <ssfn_render+0x17de>
10002a98:	bb ff 00 00 00       	mov    ebx,0xff
10002a9d:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002aa1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002aa5:	d3 e3                	shl    ebx,cl
10002aa7:	09 c3                	or     ebx,eax
10002aa9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10002ab0:	89 1c b0             	mov    DWORD PTR [eax+esi*4],ebx
10002ab3:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002ab7:	39 5c 24 4c          	cmp    DWORD PTR [esp+0x4c],ebx
10002abb:	75 1e                	jne    10002adb <ssfn_render+0x181c>
10002abd:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
10002ac4:	7e 07                	jle    10002acd <ssfn_render+0x180e>
10002ac6:	89 b4 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],esi
10002acd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002ad1:	39 5c 24 7c          	cmp    DWORD PTR [esp+0x7c],ebx
10002ad5:	7d 04                	jge    10002adb <ssfn_render+0x181c>
10002ad7:	89 5c 24 7c          	mov    DWORD PTR [esp+0x7c],ebx
10002adb:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002ae3:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10002ae7:	0f 85 ca fb ff ff    	jne    100026b7 <ssfn_render+0x13f8>
10002aed:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002af4:	ff 44 24 4c          	inc    DWORD PTR [esp+0x4c]
10002af8:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002afc:	25 fc ff 00 00       	and    eax,0xfffc
10002b01:	01 84 24 80 00 00 00 	add    DWORD PTR [esp+0x80],eax
10002b08:	e9 10 fb ff ff       	jmp    1000261d <ssfn_render+0x135e>
10002b0d:	f6 85 bc f5 00 00 10 	test   BYTE PTR [ebp+0xf5bc],0x10
10002b14:	0f 84 90 01 00 00    	je     10002caa <ssfn_render+0x19eb>
10002b1a:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002b22:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
10002b29:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002b2d:	40                   	inc    eax
10002b2e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002b32:	29 c7                	sub    edi,eax
10002b34:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10002b38:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002b3c:	8d 44 18 02          	lea    eax,[eax+ebx*1+0x2]
10002b40:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002b44:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
10002b48:	7e 09                	jle    10002b53 <ssfn_render+0x1894>
10002b4a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002b4e:	40                   	inc    eax
10002b4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002b53:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002b5a:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002b61:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
10002b65:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002b69:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002b6d:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002b71:	0f af c2             	imul   eax,edx
10002b74:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
10002b78:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
10002b7c:	8d 44 90 fc          	lea    eax,[eax+edx*4-0x4]
10002b80:	03 07                	add    eax,DWORD PTR [edi]
10002b82:	89 c7                	mov    edi,eax
10002b84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002b88:	c1 e0 18             	shl    eax,0x18
10002b8b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002b8f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002b93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002b97:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002b9c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002ba0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002ba4:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002ba8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
10002bac:	0f 8e f8 00 00 00    	jle    10002caa <ssfn_render+0x19eb>
10002bb2:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002bb9:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
10002bc0:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002bc4:	0f bf 56 06          	movsx  edx,WORD PTR [esi+0x6]
10002bc8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002bcc:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002bd0:	39 d0                	cmp    eax,edx
10002bd2:	0f 8d d2 00 00 00    	jge    10002caa <ssfn_render+0x19eb>
10002bd8:	31 db                	xor    ebx,ebx
10002bda:	85 c0                	test   eax,eax
10002bdc:	79 23                	jns    10002c01 <ssfn_render+0x1942>
10002bde:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002be5:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002be9:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002bed:	25 fc ff 00 00       	and    eax,0xfffc
10002bf2:	01 c7                	add    edi,eax
10002bf4:	eb aa                	jmp    10002ba0 <ssfn_render+0x18e1>
10002bf6:	85 c0                	test   eax,eax
10002bf8:	79 20                	jns    10002c1a <ssfn_render+0x195b>
10002bfa:	43                   	inc    ebx
10002bfb:	39 5c 24 70          	cmp    DWORD PTR [esp+0x70],ebx
10002bff:	7c dd                	jl     10002bde <ssfn_render+0x191f>
10002c01:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c08:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002c0c:	01 d8                	add    eax,ebx
10002c0e:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002c12:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002c16:	7c de                	jl     10002bf6 <ssfn_render+0x1937>
10002c18:	eb c4                	jmp    10002bde <ssfn_render+0x191f>
10002c1a:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002c1e:	7e 06                	jle    10002c26 <ssfn_render+0x1967>
10002c20:	3b 5c 24 34          	cmp    ebx,DWORD PTR [esp+0x34]
10002c24:	7f d4                	jg     10002bfa <ssfn_render+0x193b>
10002c26:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
10002c29:	b8 10 00 00 00       	mov    eax,0x10
10002c2e:	0f b6 f6             	movzx  esi,dh
10002c31:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10002c35:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
10002c39:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002c3d:	89 d0                	mov    eax,edx
10002c3f:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002c43:	d3 e8                	shr    eax,cl
10002c45:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002c49:	0f b6 c0             	movzx  eax,al
10002c4c:	d3 ea                	shr    edx,cl
10002c4e:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002c52:	0f b6 f2             	movzx  esi,dl
10002c55:	29 c1                	sub    ecx,eax
10002c57:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002c5b:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002c60:	29 f2                	sub    edx,esi
10002c62:	c1 f9 08             	sar    ecx,0x8
10002c65:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002c6a:	01 c8                	add    eax,ecx
10002c6c:	c1 fa 08             	sar    edx,0x8
10002c6f:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002c73:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
10002c77:	d3 e0                	shl    eax,cl
10002c79:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002c7d:	03 74 24 40          	add    esi,DWORD PTR [esp+0x40]
10002c81:	2b 54 24 3c          	sub    edx,DWORD PTR [esp+0x3c]
10002c85:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002c89:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002c8e:	d3 e6                	shl    esi,cl
10002c90:	c1 fa 08             	sar    edx,0x8
10002c93:	03 54 24 3c          	add    edx,DWORD PTR [esp+0x3c]
10002c97:	c1 e2 08             	shl    edx,0x8
10002c9a:	09 d0                	or     eax,edx
10002c9c:	0b 44 24 44          	or     eax,DWORD PTR [esp+0x44]
10002ca0:	09 c6                	or     esi,eax
10002ca2:	89 34 9f             	mov    DWORD PTR [edi+ebx*4],esi
10002ca5:	e9 50 ff ff ff       	jmp    10002bfa <ssfn_render+0x193b>
10002caa:	f6 85 bc f5 00 00 20 	test   BYTE PTR [ebp+0xf5bc],0x20
10002cb1:	0f 84 80 01 00 00    	je     10002e37 <ssfn_render+0x1b78>
10002cb7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10002cbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002cbf:	d1 fa                	sar    edx,1
10002cc1:	40                   	inc    eax
10002cc2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002cc6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002cca:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
10002cce:	7e 09                	jle    10002cd9 <ssfn_render+0x1a1a>
10002cd0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002cd4:	40                   	inc    eax
10002cd5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002cd9:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002ce0:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002ce7:	0f b7 4b 08          	movzx  ecx,WORD PTR [ebx+0x8]
10002ceb:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002cef:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10002cf3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002cf7:	01 d0                	add    eax,edx
10002cf9:	0f af c1             	imul   eax,ecx
10002cfc:	0f bf 4b 0a          	movsx  ecx,WORD PTR [ebx+0xa]
10002d00:	2b 4c 24 1c          	sub    ecx,DWORD PTR [esp+0x1c]
10002d04:	8d 44 88 fc          	lea    eax,[eax+ecx*4-0x4]
10002d08:	03 03                	add    eax,DWORD PTR [ebx]
10002d0a:	89 c7                	mov    edi,eax
10002d0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002d10:	c1 e0 18             	shl    eax,0x18
10002d13:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002d17:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002d1f:	01 d0                	add    eax,edx
10002d21:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10002d25:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002d2a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10002d2e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002d32:	39 5c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebx
10002d36:	0f 8e fb 00 00 00    	jle    10002e37 <ssfn_render+0x1b78>
10002d3c:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002d43:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002d47:	01 d8                	add    eax,ebx
10002d49:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002d50:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002d54:	0f bf 53 06          	movsx  edx,WORD PTR [ebx+0x6]
10002d58:	39 d0                	cmp    eax,edx
10002d5a:	0f 8d d7 00 00 00    	jge    10002e37 <ssfn_render+0x1b78>
10002d60:	31 f6                	xor    esi,esi
10002d62:	85 c0                	test   eax,eax
10002d64:	0f 89 ad 00 00 00    	jns    10002e17 <ssfn_render+0x1b58>
10002d6a:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002d71:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002d75:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002d79:	25 fc ff 00 00       	and    eax,0xfffc
10002d7e:	01 c7                	add    edi,eax
10002d80:	eb ac                	jmp    10002d2e <ssfn_render+0x1a6f>
10002d82:	85 c0                	test   eax,eax
10002d84:	0f 88 82 00 00 00    	js     10002e0c <ssfn_render+0x1b4d>
10002d8a:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
10002d8d:	b8 10 00 00 00       	mov    eax,0x10
10002d92:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002d96:	2b 44 24 40          	sub    eax,DWORD PTR [esp+0x40]
10002d9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002d9e:	89 d8                	mov    eax,ebx
10002da0:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002da4:	d3 e8                	shr    eax,cl
10002da6:	0f b6 cf             	movzx  ecx,bh
10002da9:	0f b6 c0             	movzx  eax,al
10002dac:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
10002db0:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002db4:	d3 eb                	shr    ebx,cl
10002db6:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002dba:	0f b6 db             	movzx  ebx,bl
10002dbd:	29 c1                	sub    ecx,eax
10002dbf:	29 da                	sub    edx,ebx
10002dc1:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002dc6:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002dcb:	c1 f9 08             	sar    ecx,0x8
10002dce:	c1 fa 08             	sar    edx,0x8
10002dd1:	01 c8                	add    eax,ecx
10002dd3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
10002dd7:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002ddb:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002ddf:	d3 e0                	shl    eax,cl
10002de1:	2b 54 24 30          	sub    edx,DWORD PTR [esp+0x30]
10002de5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002de9:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002dee:	c1 fa 08             	sar    edx,0x8
10002df1:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
10002df5:	c1 e2 08             	shl    edx,0x8
10002df8:	09 d0                	or     eax,edx
10002dfa:	8d 14 19             	lea    edx,[ecx+ebx*1]
10002dfd:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
10002e01:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002e05:	d3 e2                	shl    edx,cl
10002e07:	09 c2                	or     edx,eax
10002e09:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
10002e0c:	46                   	inc    esi
10002e0d:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
10002e11:	0f 8c 53 ff ff ff    	jl     10002d6a <ssfn_render+0x1aab>
10002e17:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e1e:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002e22:	01 f0                	add    eax,esi
10002e24:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002e28:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002e2c:	0f 8c 50 ff ff ff    	jl     10002d82 <ssfn_render+0x1ac3>
10002e32:	e9 33 ff ff ff       	jmp    10002d6a <ssfn_render+0x1aab>
10002e37:	f6 85 bd f5 00 00 08 	test   BYTE PTR [ebp+0xf5bd],0x8
10002e3e:	74 04                	je     10002e44 <ssfn_render+0x1b85>
10002e40:	f7 5c 24 20          	neg    DWORD PTR [esp+0x20]
10002e44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002e48:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002e4c:	89 85 90 f5 00 00    	mov    DWORD PTR [ebp+0xf590],eax
10002e52:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e59:	66 01 78 0a          	add    WORD PTR [eax+0xa],di
10002e5d:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002e64:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002e67:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002e6b:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002e71:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
10002e75:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002e7a:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002e7e:	99                   	cdq    
10002e7f:	f7 f9                	idiv   ecx
10002e81:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10002e85:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10002e8b:	25 80 00 00 00       	and    eax,0x80
10002e90:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002e94:	0f 85 f7 01 00 00    	jne    10003091 <ssfn_render+0x1dd2>
10002e9a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002e9d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
10002ea1:	0f 84 ea 01 00 00    	je     10003091 <ssfn_render+0x1dd2>
10002ea7:	8b 94 24 f8 05 01 00 	mov    edx,DWORD PTR [esp+0x105f8]
10002eae:	83 ec 0c             	sub    esp,0xc
10002eb1:	03 94 24 d4 00 00 00 	add    edx,DWORD PTR [esp+0xd4]
10002eb8:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
10002ebf:	51                   	push   ecx
10002ec0:	8d 8c 24 dc 00 00 00 	lea    ecx,[esp+0xdc]
10002ec7:	e8 53 d9 ff ff       	call   1000081f <_ssfn_c>
10002ecc:	83 c4 10             	add    esp,0x10
10002ecf:	85 c0                	test   eax,eax
10002ed1:	0f 84 ba 01 00 00    	je     10003091 <ssfn_render+0x1dd2>
10002ed7:	83 bc 24 c4 00 00 00 20 	cmp    DWORD PTR [esp+0xc4],0x20
10002edf:	0f 86 ac 01 00 00    	jbe    10003091 <ssfn_render+0x1dd2>
10002ee5:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002eeb:	8d 48 06             	lea    ecx,[eax+0x6]
10002eee:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002ef4:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
10002ef8:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10002efc:	0f 8e 8f 01 00 00    	jle    10003091 <ssfn_render+0x1dd2>
10002f02:	8a 19                	mov    bl,BYTE PTR [ecx]
10002f04:	88 5c 24 18          	mov    BYTE PTR [esp+0x18],bl
10002f08:	8a 18                	mov    bl,BYTE PTR [eax]
10002f0a:	83 e3 40             	and    ebx,0x40
10002f0d:	80 7c 24 18 ff       	cmp    BYTE PTR [esp+0x18],0xff
10002f12:	75 14                	jne    10002f28 <ssfn_render+0x1c69>
10002f14:	80 79 01 ff          	cmp    BYTE PTR [ecx+0x1],0xff
10002f18:	75 0e                	jne    10002f28 <ssfn_render+0x1c69>
10002f1a:	80 fb 01             	cmp    bl,0x1
10002f1d:	19 c0                	sbb    eax,eax
10002f1f:	8d 4c 01 06          	lea    ecx,[ecx+eax*1+0x6]
10002f23:	e9 60 01 00 00       	jmp    10003088 <ssfn_render+0x1dc9>
10002f28:	0f b6 71 04          	movzx  esi,BYTE PTR [ecx+0x4]
10002f2c:	0f b6 51 03          	movzx  edx,BYTE PTR [ecx+0x3]
10002f30:	c1 e6 10             	shl    esi,0x10
10002f33:	0f b6 79 02          	movzx  edi,BYTE PTR [ecx+0x2]
10002f37:	84 db                	test   bl,bl
10002f39:	74 08                	je     10002f43 <ssfn_render+0x1c84>
10002f3b:	8b 79 02             	mov    edi,DWORD PTR [ecx+0x2]
10002f3e:	83 c1 06             	add    ecx,0x6
10002f41:	eb 0c                	jmp    10002f4f <ssfn_render+0x1c90>
10002f43:	c1 e2 08             	shl    edx,0x8
10002f46:	83 c1 05             	add    ecx,0x5
10002f49:	89 d0                	mov    eax,edx
10002f4b:	09 f0                	or     eax,esi
10002f4d:	09 c7                	or     edi,eax
10002f4f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002f52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002f56:	01 f8                	add    eax,edi
10002f58:	8a 10                	mov    dl,BYTE PTR [eax]
10002f5a:	88 d3                	mov    bl,dl
10002f5c:	83 e3 e0             	and    ebx,0xffffffe0
10002f5f:	80 fb c0             	cmp    bl,0xc0
10002f62:	0f 85 20 01 00 00    	jne    10003088 <ssfn_render+0x1dc9>
10002f68:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
10002f6c:	c1 e2 08             	shl    edx,0x8
10002f6f:	83 c0 02             	add    eax,0x2
10002f72:	81 e2 00 1f 00 00    	and    edx,0x1f00
10002f78:	09 da                	or     edx,ebx
10002f7a:	8d 72 01             	lea    esi,[edx+0x1]
10002f7d:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10002f81:	8b b4 24 c4 00 00 00 	mov    esi,DWORD PTR [esp+0xc4]
10002f88:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
10002f8c:	83 7c 24 1c ff       	cmp    DWORD PTR [esp+0x1c],0xffffffff
10002f91:	0f 84 f1 00 00 00    	je     10003088 <ssfn_render+0x1dc9>
10002f97:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
10002f9b:	0f b7 10             	movzx  edx,WORD PTR [eax]
10002f9e:	c1 e3 10             	shl    ebx,0x10
10002fa1:	81 e3 00 00 0f 00    	and    ebx,0xf0000
10002fa7:	09 d3                	or     ebx,edx
10002fa9:	39 de                	cmp    esi,ebx
10002fab:	0f 82 cf 00 00 00    	jb     10003080 <ssfn_render+0x1dc1>
10002fb1:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
10002fb4:	89 d7                	mov    edi,edx
10002fb6:	c1 e7 10             	shl    edi,0x10
10002fb9:	81 e7 00 00 0f 00    	and    edi,0xf0000
10002fbf:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10002fc3:	0f b7 78 03          	movzx  edi,WORD PTR [eax+0x3]
10002fc7:	0b 7c 24 20          	or     edi,DWORD PTR [esp+0x20]
10002fcb:	39 fe                	cmp    esi,edi
10002fcd:	0f 87 ad 00 00 00    	ja     10003080 <ssfn_render+0x1dc1>
10002fd3:	29 de                	sub    esi,ebx
10002fd5:	c0 ea 04             	shr    dl,0x4
10002fd8:	89 b4 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],esi
10002fdf:	0f b6 d2             	movzx  edx,dl
10002fe2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002fe6:	89 d3                	mov    ebx,edx
10002fe8:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
10002fec:	c1 e3 10             	shl    ebx,0x10
10002fef:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10002ff2:	09 da                	or     edx,ebx
10002ff4:	c0 e8 04             	shr    al,0x4
10002ff7:	c1 e0 18             	shl    eax,0x18
10002ffa:	09 c2                	or     edx,eax
10002ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003000:	03 50 18             	add    edx,DWORD PTR [eax+0x18]
10003003:	01 c2                	add    edx,eax
10003005:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003008:	8d 7c 06 fc          	lea    edi,[esi+eax*1-0x4]
1000300c:	39 d7                	cmp    edi,edx
1000300e:	76 78                	jbe    10003088 <ssfn_render+0x1dc9>
10003010:	8a 1a                	mov    bl,BYTE PTR [edx]
10003012:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
10003019:	89 de                	mov    esi,ebx
1000301b:	83 e6 7f             	and    esi,0x7f
1000301e:	39 c6                	cmp    esi,eax
10003020:	73 1d                	jae    1000303f <ssfn_render+0x1d80>
10003022:	48                   	dec    eax
10003023:	bb 02 00 00 00       	mov    ebx,0x2
10003028:	29 f0                	sub    eax,esi
1000302a:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
10003031:	0f b6 02             	movzx  eax,BYTE PTR [edx]
10003034:	84 c0                	test   al,al
10003036:	78 03                	js     1000303b <ssfn_render+0x1d7c>
10003038:	8d 58 02             	lea    ebx,[eax+0x2]
1000303b:	01 da                	add    edx,ebx
1000303d:	eb cd                	jmp    1000300c <ssfn_render+0x1d4d>
1000303f:	be 01 00 00 00       	mov    esi,0x1
10003044:	84 db                	test   bl,bl
10003046:	78 03                	js     1000304b <ssfn_render+0x1d8c>
10003048:	8d 70 01             	lea    esi,[eax+0x1]
1000304b:	0f be 04 32          	movsx  eax,BYTE PTR [edx+esi*1]
1000304f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10003053:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10003058:	0f b6 5b 0b          	movzx  ebx,BYTE PTR [ebx+0xb]
1000305c:	99                   	cdq    
1000305d:	f7 fb                	idiv   ebx
1000305f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10003064:	74 0d                	je     10003073 <ssfn_render+0x1db4>
10003066:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
1000306d:	66 01 47 0a          	add    WORD PTR [edi+0xa],ax
10003071:	eb 15                	jmp    10003088 <ssfn_render+0x1dc9>
10003073:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
1000307a:	66 01 46 0c          	add    WORD PTR [esi+0xc],ax
1000307e:	eb 08                	jmp    10003088 <ssfn_render+0x1dc9>
10003080:	83 c0 08             	add    eax,0x8
10003083:	e9 00 ff ff ff       	jmp    10002f88 <ssfn_render+0x1cc9>
10003088:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
1000308c:	e9 5d fe ff ff       	jmp    10002eee <ssfn_render+0x1c2f>
10003091:	8b 8c 24 c8 00 00 00 	mov    ecx,DWORD PTR [esp+0xc8]
10003098:	eb 73                	jmp    1000310d <ssfn_render+0x1e4e>
1000309a:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100030a5:	e9 50 e4 ff ff       	jmp    100014fa <ssfn_render+0x23b>
100030aa:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100030b1:	57                   	push   edi
100030b2:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100030b9:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100030c0:	e8 5a d7 ff ff       	call   1000081f <_ssfn_c>
100030c5:	5f                   	pop    edi
100030c6:	85 c0                	test   eax,eax
100030c8:	0f 84 25 e4 ff ff    	je     100014f3 <ssfn_render+0x234>
100030ce:	e9 a2 e4 ff ff       	jmp    10001575 <ssfn_render+0x2b6>
100030d3:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100030d6:	f6 40 08 30          	test   BYTE PTR [eax+0x8],0x30
100030da:	75 0c                	jne    100030e8 <ssfn_render+0x1e29>
100030dc:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100030e3:	e9 3b e4 ff ff       	jmp    10001523 <ssfn_render+0x264>
100030e8:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100030ef:	57                   	push   edi
100030f0:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100030f7:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100030fe:	e8 1c d7 ff ff       	call   1000081f <_ssfn_c>
10003103:	59                   	pop    ecx
10003104:	85 c0                	test   eax,eax
10003106:	74 d4                	je     100030dc <ssfn_render+0x1e1d>
10003108:	e9 68 e4 ff ff       	jmp    10001575 <ssfn_render+0x2b6>
1000310d:	81 c4 dc 05 01 00    	add    esp,0x105dc
10003113:	89 c8                	mov    eax,ecx
10003115:	5b                   	pop    ebx
10003116:	5e                   	pop    esi
10003117:	5f                   	pop    edi
10003118:	5d                   	pop    ebp
10003119:	c3                   	ret    

1000311a <ssfn_bbox>:
1000311a:	55                   	push   ebp
1000311b:	57                   	push   edi
1000311c:	56                   	push   esi
1000311d:	53                   	push   ebx
1000311e:	83 ec 3c             	sub    esp,0x3c
10003121:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
10003126:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
1000312a:	0f 94 c0             	sete   al
1000312d:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
10003132:	0f 94 c2             	sete   dl
10003135:	09 d0                	or     eax,edx
10003137:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
1000313c:	0f 94 c2             	sete   dl
1000313f:	09 d0                	or     eax,edx
10003141:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
10003146:	0f 94 c2             	sete   dl
10003149:	09 d0                	or     eax,edx
1000314b:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
10003150:	0f 94 c2             	sete   dl
10003153:	08 d0                	or     al,dl
10003155:	0f 85 7c 01 00 00    	jne    100032d7 <ssfn_bbox+0x1bd>
1000315b:	85 db                	test   ebx,ebx
1000315d:	0f 84 74 01 00 00    	je     100032d7 <ssfn_bbox+0x1bd>
10003163:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10003167:	31 f6                	xor    esi,esi
10003169:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000316f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003173:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003179:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
1000317d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003183:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10003187:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000318d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10003191:	80 38 00             	cmp    BYTE PTR [eax],0x0
10003194:	0f 84 42 01 00 00    	je     100032dc <ssfn_bbox+0x1c2>
1000319a:	8d 54 24 18          	lea    edx,[esp+0x18]
1000319e:	b9 06 00 00 00       	mov    ecx,0x6
100031a3:	89 d7                	mov    edi,edx
100031a5:	89 f0                	mov    eax,esi
100031a7:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
100031b1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100031b3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
100031bb:	31 ff                	xor    edi,edi
100031bd:	bd 01 00 00 00       	mov    ebp,0x1
100031c2:	50                   	push   eax
100031c3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100031c7:	8d 44 24 20          	lea    eax,[esp+0x20]
100031cb:	50                   	push   eax
100031cc:	53                   	push   ebx
100031cd:	e8 fc ff ff ff       	call   100031ce <ssfn_bbox+0xb4>	100031ce: R_386_PC32	ssfn_render
100031d2:	83 c4 10             	add    esp,0x10
100031d5:	89 c6                	mov    esi,eax
100031d7:	85 c0                	test   eax,eax
100031d9:	74 6f                	je     1000324a <ssfn_bbox+0x130>
100031db:	0f 88 fb 00 00 00    	js     100032dc <ssfn_bbox+0x1c2>
100031e1:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
100031e7:	85 c0                	test   eax,eax
100031e9:	0f 84 ed 00 00 00    	je     100032dc <ssfn_bbox+0x1c2>
100031ef:	85 ed                	test   ebp,ebp
100031f1:	74 0b                	je     100031fe <ssfn_bbox+0xe4>
100031f3:	8b bb 88 f5 00 00    	mov    edi,DWORD PTR [ebx+0xf588]
100031f9:	66 01 7c 24 22       	add    WORD PTR [esp+0x22],di
100031fe:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10003202:	74 12                	je     10003216 <ssfn_bbox+0xfc>
10003204:	8b 83 8c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf58c]
1000320a:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
1000320e:	7d 2f                	jge    1000323f <ssfn_bbox+0x125>
10003210:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003214:	eb 29                	jmp    1000323f <ssfn_bbox+0x125>
10003216:	0f b7 08             	movzx  ecx,WORD PTR [eax]
10003219:	0f bf 6c 24 1c       	movsx  ebp,WORD PTR [esp+0x1c]
1000321e:	39 cd                	cmp    ebp,ecx
10003220:	7d 05                	jge    10003227 <ssfn_bbox+0x10d>
10003222:	66 89 4c 24 1c       	mov    WORD PTR [esp+0x1c],cx
10003227:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
1000322b:	66 8b 4c 24 1e       	mov    cx,WORD PTR [esp+0x1e]
10003230:	84 d2                	test   dl,dl
10003232:	75 04                	jne    10003238 <ssfn_bbox+0x11e>
10003234:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
10003238:	01 ca                	add    edx,ecx
1000323a:	66 89 54 24 1e       	mov    WORD PTR [esp+0x1e],dx
1000323f:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
10003243:	31 ed                	xor    ebp,ebp
10003245:	e9 78 ff ff ff       	jmp    100031c2 <ssfn_bbox+0xa8>
1000324a:	f6 83 bc f5 00 00 02 	test   BYTE PTR [ebx+0xf5bc],0x2
10003251:	74 23                	je     10003276 <ssfn_bbox+0x15c>
10003253:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10003256:	f6 40 08 20          	test   BYTE PTR [eax+0x8],0x20
1000325a:	75 1a                	jne    10003276 <ssfn_bbox+0x15c>
1000325c:	8b 83 c0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c0]
10003262:	b9 04 00 00 00       	mov    ecx,0x4
10003267:	99                   	cdq    
10003268:	f7 f9                	idiv   ecx
1000326a:	66 03 44 24 22       	add    ax,WORD PTR [esp+0x22]
1000326f:	29 f8                	sub    eax,edi
10003271:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
10003276:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
1000327c:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10003280:	74 29                	je     100032ab <ssfn_bbox+0x191>
10003282:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
10003287:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
1000328b:	89 01                	mov    DWORD PTR [ecx],eax
1000328d:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10003291:	8b 83 c4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c4]
10003297:	89 01                	mov    DWORD PTR [ecx],eax
10003299:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000329d:	89 38                	mov    DWORD PTR [eax],edi
1000329f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100032a3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100032a7:	89 38                	mov    DWORD PTR [eax],edi
100032a9:	eb 31                	jmp    100032dc <ssfn_bbox+0x1c2>
100032ab:	0f bf 44 24 1c       	movsx  eax,WORD PTR [esp+0x1c]
100032b0:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
100032b4:	89 07                	mov    DWORD PTR [edi],eax
100032b6:	0f bf 44 24 24       	movsx  eax,WORD PTR [esp+0x24]
100032bb:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
100032bf:	89 07                	mov    DWORD PTR [edi],eax
100032c1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100032c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100032cb:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100032cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100032d5:	eb 05                	jmp    100032dc <ssfn_bbox+0x1c2>
100032d7:	be fc ff ff ff       	mov    esi,0xfffffffc
100032dc:	83 c4 3c             	add    esp,0x3c
100032df:	89 f0                	mov    eax,esi
100032e1:	5b                   	pop    ebx
100032e2:	5e                   	pop    esi
100032e3:	5f                   	pop    edi
100032e4:	5d                   	pop    ebp
100032e5:	c3                   	ret    

100032e6 <ssfn_text>:
100032e6:	55                   	push   ebp
100032e7:	57                   	push   edi
100032e8:	56                   	push   esi
100032e9:	53                   	push   ebx
100032ea:	83 ec 1c             	sub    esp,0x1c
100032ed:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100032f1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
100032f5:	85 f6                	test   esi,esi
100032f7:	0f 84 b2 00 00 00    	je     100033af <ssfn_text+0xc9>
100032fd:	85 ed                	test   ebp,ebp
100032ff:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
10003304:	0f 84 a5 00 00 00    	je     100033af <ssfn_text+0xc9>
1000330a:	83 ec 0c             	sub    esp,0xc
1000330d:	6a 18                	push   0x18
1000330f:	e8 fc ff ff ff       	call   10003310 <ssfn_text+0x2a>	10003310: R_386_PC32	malloc
10003314:	83 c4 10             	add    esp,0x10
10003317:	89 c3                	mov    ebx,eax
10003319:	85 c0                	test   eax,eax
1000331b:	0f 84 8e 00 00 00    	je     100033af <ssfn_text+0xc9>
10003321:	31 c0                	xor    eax,eax
10003323:	b9 06 00 00 00       	mov    ecx,0x6
10003328:	89 df                	mov    edi,ebx
1000332a:	80 3e 00             	cmp    BYTE PTR [esi],0x0
1000332d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000332f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10003333:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10003336:	74 79                	je     100033b1 <ssfn_text+0xcb>
10003338:	8d 43 0c             	lea    eax,[ebx+0xc]
1000333b:	52                   	push   edx
1000333c:	52                   	push   edx
1000333d:	50                   	push   eax
1000333e:	8d 43 0a             	lea    eax,[ebx+0xa]
10003341:	50                   	push   eax
10003342:	8d 43 06             	lea    eax,[ebx+0x6]
10003345:	50                   	push   eax
10003346:	8d 43 04             	lea    eax,[ebx+0x4]
10003349:	50                   	push   eax
1000334a:	56                   	push   esi
1000334b:	55                   	push   ebp
1000334c:	e8 fc ff ff ff       	call   1000334d <ssfn_text+0x67>	1000334d: R_386_PC32	ssfn_bbox
10003351:	83 c4 20             	add    esp,0x20
10003354:	85 c0                	test   eax,eax
10003356:	75 59                	jne    100033b1 <ssfn_text+0xcb>
10003358:	83 ec 0c             	sub    esp,0xc
1000335b:	0f bf 4b 04          	movsx  ecx,WORD PTR [ebx+0x4]
1000335f:	0f bf 43 06          	movsx  eax,WORD PTR [ebx+0x6]
10003363:	0f af c8             	imul   ecx,eax
10003366:	c1 e1 02             	shl    ecx,0x2
10003369:	51                   	push   ecx
1000336a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
1000336e:	e8 fc ff ff ff       	call   1000336f <ssfn_text+0x89>	1000336f: R_386_PC32	malloc
10003373:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10003377:	89 c7                	mov    edi,eax
10003379:	89 03                	mov    DWORD PTR [ebx],eax
1000337b:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
1000337f:	83 c4 10             	add    esp,0x10
10003382:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003384:	50                   	push   eax
10003385:	56                   	push   esi
10003386:	53                   	push   ebx
10003387:	55                   	push   ebp
10003388:	e8 fc ff ff ff       	call   10003389 <ssfn_text+0xa3>	10003389: R_386_PC32	ssfn_render
1000338d:	83 c4 10             	add    esp,0x10
10003390:	85 c0                	test   eax,eax
10003392:	7e 04                	jle    10003398 <ssfn_text+0xb2>
10003394:	01 c6                	add    esi,eax
10003396:	eb ec                	jmp    10003384 <ssfn_text+0x9e>
10003398:	74 17                	je     100033b1 <ssfn_text+0xcb>
1000339a:	83 ec 0c             	sub    esp,0xc
1000339d:	ff 33                	push   DWORD PTR [ebx]
1000339f:	e8 fc ff ff ff       	call   100033a0 <ssfn_text+0xba>	100033a0: R_386_PC32	free
100033a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
100033a7:	e8 fc ff ff ff       	call   100033a8 <ssfn_text+0xc2>	100033a8: R_386_PC32	free
100033ac:	83 c4 10             	add    esp,0x10
100033af:	31 db                	xor    ebx,ebx
100033b1:	83 c4 1c             	add    esp,0x1c
100033b4:	89 d8                	mov    eax,ebx
100033b6:	5b                   	pop    ebx
100033b7:	5e                   	pop    esi
100033b8:	5f                   	pop    edi
100033b9:	5d                   	pop    ebp
100033ba:	c3                   	ret    
100033bb:	90                   	nop

100033bc <NIContext::drvPutpixel4(int, int, unsigned int)>:
100033bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100033c0:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
100033c6:	8b 10                	mov    edx,DWORD PTR [eax]
100033c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100033cc:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
100033cf:	90                   	nop

100033d0 <NIContext::drvDarken4(int, int, int)>:
100033d0:	55                   	push   ebp
100033d1:	57                   	push   edi
100033d2:	56                   	push   esi
100033d3:	53                   	push   ebx
100033d4:	83 ec 20             	sub    esp,0x20
100033d7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
100033db:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100033df:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100033e3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
100033e7:	8b 87 08 04 00 00    	mov    eax,DWORD PTR [edi+0x408]
100033ed:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
100033f1:	8b 10                	mov    edx,DWORD PTR [eax]
100033f3:	56                   	push   esi
100033f4:	53                   	push   ebx
100033f5:	50                   	push   eax
100033f6:	ff 52 34             	call   DWORD PTR [edx+0x34]
100033f9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
100033fd:	89 c2                	mov    edx,eax
100033ff:	0f b6 ec             	movzx  ebp,ah
10003402:	c1 ea 10             	shr    edx,0x10
10003405:	0f af e9             	imul   ebp,ecx
10003408:	0f b6 d2             	movzx  edx,dl
1000340b:	0f b6 c0             	movzx  eax,al
1000340e:	0f af d1             	imul   edx,ecx
10003411:	0f af c1             	imul   eax,ecx
10003414:	c1 ea 07             	shr    edx,0x7
10003417:	8b 8f 08 04 00 00    	mov    ecx,DWORD PTR [edi+0x408]
1000341d:	c1 e8 07             	shr    eax,0x7
10003420:	8b 39                	mov    edi,DWORD PTR [ecx]
10003422:	c1 e2 10             	shl    edx,0x10
10003425:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
10003429:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
1000342d:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
10003431:	c1 ed 07             	shr    ebp,0x7
10003434:	c1 e5 08             	shl    ebp,0x8
10003437:	09 ea                	or     edx,ebp
10003439:	09 c2                	or     edx,eax
1000343b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
1000343f:	8b 47 24             	mov    eax,DWORD PTR [edi+0x24]
10003442:	83 c4 2c             	add    esp,0x2c
10003445:	5b                   	pop    ebx
10003446:	5e                   	pop    esi
10003447:	5f                   	pop    edi
10003448:	5d                   	pop    ebp
10003449:	ff e0                	jmp    eax
1000344b:	90                   	nop

1000344c <NIContext::renderTTF(int, int, unsigned int, char*, int*)>:
1000344c:	55                   	push   ebp
1000344d:	b9 00 40 00 00       	mov    ecx,0x4000
10003452:	57                   	push   edi
10003453:	b0 ff                	mov    al,0xff
10003455:	56                   	push   esi
10003456:	53                   	push   ebx
10003457:	83 ec 3c             	sub    esp,0x3c
1000345a:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
1000345e:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10003462:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
10003465:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
10003469:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000346b:	85 db                	test   ebx,ebx
1000346d:	75 10                	jne    1000347f <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x33>
1000346f:	83 ec 0c             	sub    esp,0xc
10003472:	68 4d 6b 00 10       	push   0x10006b4d	10003473: R_386_32	.text
10003477:	e8 fc ff ff ff       	call   10003478 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x2c>	10003478: R_386_PC32	KePanic(char const*)
1000347c:	83 c4 10             	add    esp,0x10
1000347f:	50                   	push   eax
10003480:	50                   	push   eax
10003481:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003485:	50                   	push   eax
10003486:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000348a:	50                   	push   eax
1000348b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000348f:	50                   	push   eax
10003490:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003494:	50                   	push   eax
10003495:	56                   	push   esi
10003496:	68 00 00 00 00       	push   0x0	10003497: R_386_32	ssfn_ctx
1000349b:	e8 fc ff ff ff       	call   1000349c <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x50>	1000349c: R_386_PC32	ssfn_bbox
100034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100034a3:	c7 44 24 3c 40 00 40 00 	mov    DWORD PTR [esp+0x3c],0x400040
100034ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100034af:	c7 44 24 40 00 01 00 00 	mov    DWORD PTR [esp+0x40],0x100
100034b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100034bb:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
100034c0:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100034c4:	0d 00 00 00 ff       	or     eax,0xff000000
100034c9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100034cd:	83 c4 1c             	add    esp,0x1c
100034d0:	56                   	push   esi
100034d1:	8d 44 24 20          	lea    eax,[esp+0x20]
100034d5:	50                   	push   eax
100034d6:	68 00 00 00 00       	push   0x0	100034d7: R_386_32	ssfn_ctx
100034db:	e8 fc ff ff ff       	call   100034dc <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x90>	100034dc: R_386_PC32	ssfn_render
100034e0:	83 c4 10             	add    esp,0x10
100034e3:	89 03                	mov    DWORD PTR [ebx],eax
100034e5:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
100034e9:	31 db                	xor    ebx,ebx
100034eb:	89 f0                	mov    eax,esi
100034ed:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
100034f1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
100034f5:	7e 3f                	jle    10003536 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xea>
100034f7:	31 ff                	xor    edi,edi
100034f9:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
100034fe:	39 f8                	cmp    eax,edi
10003500:	7e 2c                	jle    1000352e <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xe2>
10003502:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003505:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
10003508:	83 f8 ff             	cmp    eax,0xffffffff
1000350b:	74 1d                	je     1000352a <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xde>
1000350d:	8b 95 08 04 00 00    	mov    edx,DWORD PTR [ebp+0x408]
10003513:	25 ff ff ff 00       	and    eax,0xffffff
10003518:	8b 0a                	mov    ecx,DWORD PTR [edx]
1000351a:	50                   	push   eax
1000351b:	56                   	push   esi
1000351c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10003520:	01 f8                	add    eax,edi
10003522:	50                   	push   eax
10003523:	52                   	push   edx
10003524:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10003527:	83 c4 10             	add    esp,0x10
1000352a:	43                   	inc    ebx
1000352b:	47                   	inc    edi
1000352c:	eb cb                	jmp    100034f9 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xad>
1000352e:	29 c3                	sub    ebx,eax
10003530:	46                   	inc    esi
10003531:	83 c3 40             	add    ebx,0x40
10003534:	eb b5                	jmp    100034eb <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x9f>
10003536:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
1000353b:	83 c4 3c             	add    esp,0x3c
1000353e:	5b                   	pop    ebx
1000353f:	5e                   	pop    esi
10003540:	5f                   	pop    edi
10003541:	5d                   	pop    ebp
10003542:	c3                   	ret    
10003543:	90                   	nop

10003544 <NIContext::~NIContext()>:
10003544:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	10003548: R_386_32	ssfn_ctx
1000354c:	e9 00 db ff ff       	jmp    10001051 <ssfn_free>
10003551:	90                   	nop

10003552 <NIContext::NIContext(Video*, int, int, int, int)>:
10003552:	55                   	push   ebp
10003553:	ba 00 00 00 00       	mov    edx,0x0	10003554: R_386_32	ssfn_ctx
10003558:	57                   	push   edi
10003559:	b9 72 3d 00 00       	mov    ecx,0x3d72
1000355e:	56                   	push   esi
1000355f:	89 d7                	mov    edi,edx
10003561:	53                   	push   ebx
10003562:	81 ec 48 02 00 00    	sub    esp,0x248
10003568:	8b 9c 24 5c 02 00 00 	mov    ebx,DWORD PTR [esp+0x25c]
1000356f:	8b 84 24 60 02 00 00 	mov    eax,DWORD PTR [esp+0x260]
10003576:	89 83 08 04 00 00    	mov    DWORD PTR [ebx+0x408],eax
1000357c:	8b 84 24 64 02 00 00 	mov    eax,DWORD PTR [esp+0x264]
10003583:	89 83 0c 04 00 00    	mov    DWORD PTR [ebx+0x40c],eax
10003589:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
10003590:	89 83 10 04 00 00    	mov    DWORD PTR [ebx+0x410],eax
10003596:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
1000359d:	89 83 14 04 00 00    	mov    DWORD PTR [ebx+0x414],eax
100035a3:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
100035aa:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
100035b0:	31 c0                	xor    eax,eax
100035b2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100035b4:	68 00 40 00 00       	push   0x4000
100035b9:	e8 fc ff ff ff       	call   100035ba <NIContext::NIContext(Video*, int, int, int, int)+0x68>	100035ba: R_386_PC32	malloc
100035be:	c7 83 04 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x404],0x0
100035c8:	89 03                	mov    DWORD PTR [ebx],eax
100035ca:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
100035d1:	e8 fc ff ff ff       	call   100035d2 <NIContext::NIContext(Video*, int, int, int, int)+0x80>	100035d2: R_386_PC32	malloc
100035d6:	83 c4 0c             	add    esp,0xc
100035d9:	89 c6                	mov    esi,eax
100035db:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100035dd: R_386_32	kernelProcess
100035e1:	68 66 6b 00 10       	push   0x10006b66	100035e2: R_386_32	.text
100035e6:	50                   	push   eax
100035e7:	e8 fc ff ff ff       	call   100035e8 <NIContext::NIContext(Video*, int, int, int, int)+0x96>	100035e8: R_386_PC32	Directory::Directory(char const*, Process*)
100035ec:	83 c4 10             	add    esp,0x10
100035ef:	85 f6                	test   esi,esi
100035f1:	75 10                	jne    10003603 <NIContext::NIContext(Video*, int, int, int, int)+0xb1>
100035f3:	83 ec 0c             	sub    esp,0xc
100035f6:	68 7a 6b 00 10       	push   0x10006b7a	100035f7: R_386_32	.text
100035fb:	e8 fc ff ff ff       	call   100035fc <NIContext::NIContext(Video*, int, int, int, int)+0xaa>	100035fc: R_386_PC32	KePanic(char const*)
10003600:	83 c4 10             	add    esp,0x10
10003603:	83 ec 0c             	sub    esp,0xc
10003606:	56                   	push   esi
10003607:	e8 fc ff ff ff       	call   10003608 <NIContext::NIContext(Video*, int, int, int, int)+0xb6>	10003608: R_386_PC32	Directory::open()
1000360c:	83 c4 10             	add    esp,0x10
1000360f:	85 c0                	test   eax,eax
10003611:	75 e0                	jne    100035f3 <NIContext::NIContext(Video*, int, int, int, int)+0xa1>
10003613:	83 ec 0c             	sub    esp,0xc
10003616:	8b 06                	mov    eax,DWORD PTR [esi]
10003618:	8d 4c 24 20          	lea    ecx,[esp+0x20]
1000361c:	51                   	push   ecx
1000361d:	8d 94 24 30 01 00 00 	lea    edx,[esp+0x130]
10003624:	52                   	push   edx
10003625:	6a 00                	push   0x0
10003627:	68 10 01 00 00       	push   0x110
1000362c:	56                   	push   esi
1000362d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003630:	83 c4 20             	add    esp,0x20
10003633:	85 c0                	test   eax,eax
10003635:	0f 85 a0 01 00 00    	jne    100037db <NIContext::NIContext(Video*, int, int, int, int)+0x289>
1000363b:	81 7c 24 14 10 01 00 00 	cmp    DWORD PTR [esp+0x14],0x110
10003643:	0f 85 92 01 00 00    	jne    100037db <NIContext::NIContext(Video*, int, int, int, int)+0x289>
10003649:	8d ac 24 30 01 00 00 	lea    ebp,[esp+0x130]
10003650:	83 c9 ff             	or     ecx,0xffffffff
10003653:	83 ec 0c             	sub    esp,0xc
10003656:	89 ef                	mov    edi,ebp
10003658:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
1000365a:	8b bb 04 04 00 00    	mov    edi,DWORD PTR [ebx+0x404]
10003660:	89 ca                	mov    edx,ecx
10003662:	f7 d2                	not    edx
10003664:	52                   	push   edx
10003665:	e8 fc ff ff ff       	call   10003666 <NIContext::NIContext(Video*, int, int, int, int)+0x114>	10003666: R_386_PC32	malloc
1000366a:	89 44 bb 04          	mov    DWORD PTR [ebx+edi*4+0x4],eax
1000366e:	47                   	inc    edi
1000366f:	89 bb 04 04 00 00    	mov    DWORD PTR [ebx+0x404],edi
10003675:	5a                   	pop    edx
10003676:	59                   	pop    ecx
10003677:	55                   	push   ebp
10003678:	50                   	push   eax
10003679:	e8 fc ff ff ff       	call   1000367a <NIContext::NIContext(Video*, int, int, int, int)+0x128>	1000367a: R_386_PC32	strcpy
1000367e:	5f                   	pop    edi
1000367f:	58                   	pop    eax
10003680:	68 95 6b 00 10       	push   0x10006b95	10003681: R_386_32	.text
10003685:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
10003689:	57                   	push   edi
1000368a:	e8 fc ff ff ff       	call   1000368b <NIContext::NIContext(Video*, int, int, int, int)+0x139>	1000368b: R_386_PC32	strcpy
1000368f:	58                   	pop    eax
10003690:	5a                   	pop    edx
10003691:	55                   	push   ebp
10003692:	57                   	push   edi
10003693:	e8 fc ff ff ff       	call   10003694 <NIContext::NIContext(Video*, int, int, int, int)+0x142>	10003694: R_386_PC32	strcat
10003698:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
1000369f:	e8 fc ff ff ff       	call   100036a0 <NIContext::NIContext(Video*, int, int, int, int)+0x14e>	100036a0: R_386_PC32	malloc
100036a4:	83 c4 0c             	add    esp,0xc
100036a7:	89 c5                	mov    ebp,eax
100036a9:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100036ab: R_386_32	kernelProcess
100036af:	57                   	push   edi
100036b0:	50                   	push   eax
100036b1:	e8 fc ff ff ff       	call   100036b2 <NIContext::NIContext(Video*, int, int, int, int)+0x160>	100036b2: R_386_PC32	File::File(char const*, Process*)
100036b6:	83 c4 10             	add    esp,0x10
100036b9:	85 ed                	test   ebp,ebp
100036bb:	0f 84 52 ff ff ff    	je     10003613 <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
100036c1:	50                   	push   eax
100036c2:	50                   	push   eax
100036c3:	6a 01                	push   0x1
100036c5:	55                   	push   ebp
100036c6:	e8 fc ff ff ff       	call   100036c7 <NIContext::NIContext(Video*, int, int, int, int)+0x175>	100036c7: R_386_PC32	File::open(FileOpenMode)
100036cb:	83 c4 10             	add    esp,0x10
100036ce:	85 c0                	test   eax,eax
100036d0:	74 0c                	je     100036de <NIContext::NIContext(Video*, int, int, int, int)+0x18c>
100036d2:	83 ec 0c             	sub    esp,0xc
100036d5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100036d8:	55                   	push   ebp
100036d9:	e9 b4 00 00 00       	jmp    10003792 <NIContext::NIContext(Video*, int, int, int, int)+0x240>
100036de:	50                   	push   eax
100036df:	8d 44 24 17          	lea    eax,[esp+0x17]
100036e3:	50                   	push   eax
100036e4:	8d 44 24 20          	lea    eax,[esp+0x20]
100036e8:	50                   	push   eax
100036e9:	55                   	push   ebp
100036ea:	e8 fc ff ff ff       	call   100036eb <NIContext::NIContext(Video*, int, int, int, int)+0x199>	100036eb: R_386_PC32	File::stat(unsigned long long*, bool*)
100036ef:	83 c4 10             	add    esp,0x10
100036f2:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
100036f7:	74 0e                	je     10003707 <NIContext::NIContext(Video*, int, int, int, int)+0x1b5>
100036f9:	83 ec 0c             	sub    esp,0xc
100036fc:	55                   	push   ebp
100036fd:	e8 fc ff ff ff       	call   100036fe <NIContext::NIContext(Video*, int, int, int, int)+0x1ac>	100036fe: R_386_PC32	File::close()
10003702:	e9 85 00 00 00       	jmp    1000378c <NIContext::NIContext(Video*, int, int, int, int)+0x23a>
10003707:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
1000370b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
1000370f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003713:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10003717:	83 ec 0c             	sub    esp,0xc
1000371a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
1000371e:	e8 fc ff ff ff       	call   1000371f <NIContext::NIContext(Video*, int, int, int, int)+0x1cd>	1000371f: R_386_PC32	malloc
10003723:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003727:	58                   	pop    eax
10003728:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000372b:	8d 54 24 20          	lea    edx,[esp+0x20]
1000372f:	52                   	push   edx
10003730:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10003734:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003738:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000373c:	55                   	push   ebp
1000373d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003740:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10003744:	83 c4 1c             	add    esp,0x1c
10003747:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000374b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000374f:	68 aa 6b 00 10       	push   0x10006baa	10003750: R_386_32	.text
10003754:	e8 fc ff ff ff       	call   10003755 <NIContext::NIContext(Video*, int, int, int, int)+0x203>	10003755: R_386_PC32	Dbg::kprintf(char const*, ...)
10003759:	83 c4 10             	add    esp,0x10
1000375c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003760:	85 c0                	test   eax,eax
10003762:	75 15                	jne    10003779 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003764:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003768:	89 c1                	mov    ecx,eax
1000376a:	c1 f9 1f             	sar    ecx,0x1f
1000376d:	3b 4c 24 1c          	cmp    ecx,DWORD PTR [esp+0x1c]
10003771:	75 06                	jne    10003779 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003773:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10003777:	74 24                	je     1000379d <NIContext::NIContext(Video*, int, int, int, int)+0x24b>
10003779:	83 ec 0c             	sub    esp,0xc
1000377c:	55                   	push   ebp
1000377d:	e8 fc ff ff ff       	call   1000377e <NIContext::NIContext(Video*, int, int, int, int)+0x22c>	1000377e: R_386_PC32	File::close()
10003782:	58                   	pop    eax
10003783:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10003787:	e8 fc ff ff ff       	call   10003788 <NIContext::NIContext(Video*, int, int, int, int)+0x236>	10003788: R_386_PC32	free
1000378c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000378f:	89 2c 24             	mov    DWORD PTR [esp],ebp
10003792:	ff 50 08             	call   DWORD PTR [eax+0x8]
10003795:	83 c4 10             	add    esp,0x10
10003798:	e9 76 fe ff ff       	jmp    10003613 <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
1000379d:	50                   	push   eax
1000379e:	50                   	push   eax
1000379f:	57                   	push   edi
100037a0:	68 be 6b 00 10       	push   0x10006bbe	100037a1: R_386_32	.text
100037a5:	e8 fc ff ff ff       	call   100037a6 <NIContext::NIContext(Video*, int, int, int, int)+0x254>	100037a6: R_386_PC32	Dbg::kprintf(char const*, ...)
100037aa:	5a                   	pop    edx
100037ab:	59                   	pop    ecx
100037ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
100037b0:	68 00 00 00 00       	push   0x0	100037b1: R_386_32	ssfn_ctx
100037b5:	e8 fc ff ff ff       	call   100037b6 <NIContext::NIContext(Video*, int, int, int, int)+0x264>	100037b6: R_386_PC32	ssfn_load
100037ba:	5b                   	pop    ebx
100037bb:	5f                   	pop    edi
100037bc:	50                   	push   eax
100037bd:	68 cf 6b 00 10       	push   0x10006bcf	100037be: R_386_32	.text
100037c2:	e8 fc ff ff ff       	call   100037c3 <NIContext::NIContext(Video*, int, int, int, int)+0x271>	100037c3: R_386_PC32	Dbg::kprintf(char const*, ...)
100037c7:	89 2c 24             	mov    DWORD PTR [esp],ebp
100037ca:	e8 fc ff ff ff       	call   100037cb <NIContext::NIContext(Video*, int, int, int, int)+0x279>	100037cb: R_386_PC32	File::close()
100037cf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100037d2:	89 2c 24             	mov    DWORD PTR [esp],ebp
100037d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
100037d8:	83 c4 10             	add    esp,0x10
100037db:	83 ec 0c             	sub    esp,0xc
100037de:	56                   	push   esi
100037df:	e8 fc ff ff ff       	call   100037e0 <NIContext::NIContext(Video*, int, int, int, int)+0x28e>	100037e0: R_386_PC32	Directory::close()
100037e4:	8b 06                	mov    eax,DWORD PTR [esi]
100037e6:	89 34 24             	mov    DWORD PTR [esp],esi
100037e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
100037ec:	b8 00 00 00 00       	mov    eax,0x0	100037ed: R_386_32	ssfn_ctx
100037f1:	e8 f7 cb ff ff       	call   100003ed <_ssfn_fc.part.1>
100037f6:	c7 05 14 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x14,0x0	100037f8: R_386_32	ssfn_ctx
10003800:	c7 05 18 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x18,0x0	10003802: R_386_32	ssfn_ctx
1000380a:	c7 05 b8 f5 00 00 ff 00 00 00 	mov    DWORD PTR ds:0xf5b8,0xff	1000380c: R_386_32	ssfn_ctx
10003814:	c7 05 bc f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5bc,0x0	10003816: R_386_32	ssfn_ctx
1000381e:	c7 05 c0 f5 00 00 10 00 00 00 	mov    DWORD PTR ds:0xf5c0,0x10	10003820: R_386_32	ssfn_ctx
10003828:	c7 05 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5c4,0x0	1000382a: R_386_32	ssfn_ctx
10003832:	81 c4 4c 02 00 00    	add    esp,0x24c
10003838:	5b                   	pop    ebx
10003839:	5e                   	pop    esi
1000383a:	5f                   	pop    edi
1000383b:	5d                   	pop    ebp
1000383c:	c3                   	ret    
1000383d:	90                   	nop

1000383e <NiCreateEvent(NIWindow*, int, bool)>:
1000383e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003842:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10003846:	81 e2 ff ff 03 00    	and    edx,0x3ffff
1000384c:	89 d1                	mov    ecx,edx
1000384e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
10003851:	c1 e1 0d             	shl    ecx,0xd
10003854:	81 e2 ff 1f 00 80    	and    edx,0x80001fff
1000385a:	09 ca                	or     edx,ecx
1000385c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000385f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
10003863:	8a 50 07             	mov    dl,BYTE PTR [eax+0x7]
10003866:	c1 e1 07             	shl    ecx,0x7
10003869:	83 e2 7f             	and    edx,0x7f
1000386c:	09 ca                	or     edx,ecx
1000386e:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10003871:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10003875:	89 10                	mov    DWORD PTR [eax],edx
10003877:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003879: R_386_32	mouseDesktop
1000387d:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10003883:	66 89 48 08          	mov    WORD PTR [eax+0x8],cx
10003887:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
1000388d:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10003893:	66 89 48 0a          	mov    WORD PTR [eax+0xa],cx
10003897:	89 d1                	mov    ecx,edx
10003899:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
1000389c:	66 81 e1 ff 03       	and    cx,0x3ff
100038a1:	66 81 e2 00 fc       	and    dx,0xfc00
100038a6:	09 ca                	or     edx,ecx
100038a8:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
100038ac:	c2 04 00             	ret    0x4

100038af <NiKeyhandler(KeyboardToken, bool*)>:
100038af:	57                   	push   edi
100038b0:	56                   	push   esi
100038b1:	53                   	push   ebx
100038b2:	83 ec 20             	sub    esp,0x20
100038b5:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100038b7: R_386_32	mouseDesktop
100038bb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
100038bf:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100038c2:	8b 00                	mov    eax,DWORD PTR [eax]
100038c4:	85 c0                	test   eax,eax
100038c6:	0f 84 f9 00 00 00    	je     100039c5 <NiKeyhandler(KeyboardToken, bool*)+0x116>
100038cc:	8b 10                	mov    edx,DWORD PTR [eax]
100038ce:	85 d2                	test   edx,edx
100038d0:	0f 84 ef 00 00 00    	je     100039c5 <NiKeyhandler(KeyboardToken, bool*)+0x116>
100038d6:	80 7c 24 32 01       	cmp    BYTE PTR [esp+0x32],0x1
100038db:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100038df:	19 c0                	sbb    eax,eax
100038e1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
100038e5:	81 e6 ff 1f 00 80    	and    esi,0x80001fff
100038eb:	83 c0 09             	add    eax,0x9
100038ee:	25 ff ff 03 00       	and    eax,0x3ffff
100038f3:	c1 e0 0d             	shl    eax,0xd
100038f6:	09 f0                	or     eax,esi
100038f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100038fc:	80 64 24 0f 7f       	and    BYTE PTR [esp+0xf],0x7f
10003901:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
10003907:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
1000390c:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10003912:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
10003917:	8b 83 1c 04 00 00    	mov    eax,DWORD PTR [ebx+0x41c]
1000391d:	89 c3                	mov    ebx,eax
1000391f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003923:	66 81 e3 ff 03       	and    bx,0x3ff
10003928:	66 25 00 fc          	and    ax,0xfc00
1000392c:	09 d8                	or     eax,ebx
1000392e:	8a 99 04 01 00 00    	mov    bl,BYTE PTR [ecx+0x104]
10003934:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
10003939:	83 e3 01             	and    ebx,0x1
1000393c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10003940:	c1 e3 04             	shl    ebx,0x4
10003943:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
10003948:	8a 81 00 01 00 00    	mov    al,BYTE PTR [ecx+0x100]
1000394e:	8a 89 01 01 00 00    	mov    cl,BYTE PTR [ecx+0x101]
10003954:	83 e0 01             	and    eax,0x1
10003957:	83 e1 01             	and    ecx,0x1
1000395a:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10003961:	c1 e1 03             	shl    ecx,0x3
10003964:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
10003968:	83 e0 eb             	and    eax,0xffffffeb
1000396b:	09 f0                	or     eax,esi
1000396d:	09 d8                	or     eax,ebx
1000396f:	83 e0 f7             	and    eax,0xfffffff7
10003972:	09 c8                	or     eax,ecx
10003974:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	10003976: R_386_32	desktopHasFocus
1000397b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
1000397f:	75 19                	jne    1000399a <NiKeyhandler(KeyboardToken, bool*)+0xeb>
10003981:	83 ec 1c             	sub    esp,0x1c
10003984:	b9 06 00 00 00       	mov    ecx,0x6
10003989:	8d 74 24 24          	lea    esi,[esp+0x24]
1000398d:	89 e7                	mov    edi,esp
1000398f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10003991:	52                   	push   edx
10003992:	e8 fc ff ff ff       	call   10003993 <NiKeyhandler(KeyboardToken, bool*)+0xe4>	10003993: R_386_PC32	NIWindow::postEvent(NiEvent)
10003997:	83 c4 20             	add    esp,0x20
1000399a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000399b: R_386_32	desktopWindowDummy
1000399f:	85 c0                	test   eax,eax
100039a1:	74 22                	je     100039c5 <NiKeyhandler(KeyboardToken, bool*)+0x116>
100039a3:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	100039a5: R_386_32	desktopHasFocus
100039aa:	74 19                	je     100039c5 <NiKeyhandler(KeyboardToken, bool*)+0x116>
100039ac:	83 ec 1c             	sub    esp,0x1c
100039af:	b9 06 00 00 00       	mov    ecx,0x6
100039b4:	8d 74 24 24          	lea    esi,[esp+0x24]
100039b8:	89 e7                	mov    edi,esp
100039ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100039bc:	50                   	push   eax
100039bd:	e8 fc ff ff ff       	call   100039be <NiKeyhandler(KeyboardToken, bool*)+0x10f>	100039be: R_386_PC32	NIWindow::postEvent(NiEvent)
100039c2:	83 c4 20             	add    esp,0x20
100039c5:	83 c4 20             	add    esp,0x20
100039c8:	5b                   	pop    ebx
100039c9:	5e                   	pop    esi
100039ca:	5f                   	pop    edi
100039cb:	c3                   	ret    

100039cc <NiLoadCursors()>:
100039cc:	55                   	push   ebp
100039cd:	57                   	push   edi
100039ce:	56                   	push   esi
100039cf:	53                   	push   ebx
100039d0:	83 ec 38             	sub    esp,0x38
100039d3:	68 14 01 00 00       	push   0x114
100039d8:	e8 fc ff ff ff       	call   100039d9 <NiLoadCursors()+0xd>	100039d9: R_386_PC32	malloc
100039dd:	83 c4 0c             	add    esp,0xc
100039e0:	89 c5                	mov    ebp,eax
100039e2:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100039e4: R_386_32	kernelProcess
100039e8:	68 7c 6e 00 10       	push   0x10006e7c	100039e9: R_386_32	.text
100039ed:	50                   	push   eax
100039ee:	e8 fc ff ff ff       	call   100039ef <NiLoadCursors()+0x23>	100039ef: R_386_PC32	File::File(char const*, Process*)
100039f3:	58                   	pop    eax
100039f4:	5a                   	pop    edx
100039f5:	6a 01                	push   0x1
100039f7:	55                   	push   ebp
100039f8:	e8 fc ff ff ff       	call   100039f9 <NiLoadCursors()+0x2d>	100039f9: R_386_PC32	File::open(FileOpenMode)
100039fd:	83 c4 10             	add    esp,0x10
10003a00:	85 c0                	test   eax,eax
10003a02:	74 0a                	je     10003a0e <NiLoadCursors()+0x42>
10003a04:	83 ec 0c             	sub    esp,0xc
10003a07:	68 9b 6e 00 10       	push   0x10006e9b	10003a08: R_386_32	.text
10003a0c:	eb 4c                	jmp    10003a5a <NiLoadCursors()+0x8e>
10003a0e:	50                   	push   eax
10003a0f:	8d 44 24 17          	lea    eax,[esp+0x17]
10003a13:	50                   	push   eax
10003a14:	8d 44 24 20          	lea    eax,[esp+0x20]
10003a18:	50                   	push   eax
10003a19:	55                   	push   ebp
10003a1a:	e8 fc ff ff ff       	call   10003a1b <NiLoadCursors()+0x4f>	10003a1b: R_386_PC32	File::stat(unsigned long long*, bool*)
10003a1f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10003a23:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10003a27:	89 34 24             	mov    DWORD PTR [esp],esi
10003a2a:	e8 fc ff ff ff       	call   10003a2b <NiLoadCursors()+0x5f>	10003a2b: R_386_PC32	malloc
10003a2f:	89 c3                	mov    ebx,eax
10003a31:	58                   	pop    eax
10003a32:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003a35:	8d 54 24 20          	lea    edx,[esp+0x20]
10003a39:	52                   	push   edx
10003a3a:	53                   	push   ebx
10003a3b:	57                   	push   edi
10003a3c:	56                   	push   esi
10003a3d:	55                   	push   ebp
10003a3e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003a41:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10003a45:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10003a49:	83 c4 20             	add    esp,0x20
10003a4c:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
10003a50:	74 12                	je     10003a64 <NiLoadCursors()+0x98>
10003a52:	83 ec 0c             	sub    esp,0xc
10003a55:	68 af 6e 00 10       	push   0x10006eaf	10003a56: R_386_32	.text
10003a5a:	e8 fc ff ff ff       	call   10003a5b <NiLoadCursors()+0x8f>	10003a5b: R_386_PC32	Dbg::kprintf(char const*, ...)
10003a5f:	e9 24 01 00 00       	jmp    10003b88 <NiLoadCursors()+0x1bc>
10003a64:	6a 00                	push   0x0
10003a66:	31 ed                	xor    ebp,ebp
10003a68:	68 04 01 00 00       	push   0x104
10003a6d:	52                   	push   edx
10003a6e:	50                   	push   eax
10003a6f:	e8 fc ff ff ff       	call   10003a70 <NiLoadCursors()+0xa4>	10003a70: R_386_PC32	__udivdi3
10003a74:	83 c4 10             	add    esp,0x10
10003a77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003a7b:	8d 04 83             	lea    eax,[ebx+eax*4]
10003a7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003a82:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
10003a86:	0f 8d f3 00 00 00    	jge    10003b7f <NiLoadCursors()+0x1b3>
10003a8c:	8d 34 ab             	lea    esi,[ebx+ebp*4]
10003a8f:	50                   	push   eax
10003a90:	6a 04                	push   0x4
10003a92:	68 c3 6e 00 10       	push   0x10006ec3	10003a93: R_386_32	.text
10003a97:	56                   	push   esi
10003a98:	e8 fc ff ff ff       	call   10003a99 <NiLoadCursors()+0xcd>	10003a99: R_386_PC32	memcmp
10003a9d:	83 c4 10             	add    esp,0x10
10003aa0:	85 c0                	test   eax,eax
10003aa2:	0f 84 b8 00 00 00    	je     10003b60 <NiLoadCursors()+0x194>
10003aa8:	50                   	push   eax
10003aa9:	6a 04                	push   0x4
10003aab:	68 c8 6e 00 10       	push   0x10006ec8	10003aac: R_386_32	.text
10003ab0:	56                   	push   esi
10003ab1:	e8 fc ff ff ff       	call   10003ab2 <NiLoadCursors()+0xe6>	10003ab2: R_386_PC32	memcmp
10003ab6:	83 c4 10             	add    esp,0x10
10003ab9:	85 c0                	test   eax,eax
10003abb:	74 7b                	je     10003b38 <NiLoadCursors()+0x16c>
10003abd:	50                   	push   eax
10003abe:	6a 04                	push   0x4
10003ac0:	68 cd 6e 00 10       	push   0x10006ecd	10003ac1: R_386_32	.text
10003ac5:	56                   	push   esi
10003ac6:	e8 fc ff ff ff       	call   10003ac7 <NiLoadCursors()+0xfb>	10003ac7: R_386_PC32	memcmp
10003acb:	83 c4 10             	add    esp,0x10
10003ace:	85 c0                	test   eax,eax
10003ad0:	74 6d                	je     10003b3f <NiLoadCursors()+0x173>
10003ad2:	57                   	push   edi
10003ad3:	6a 04                	push   0x4
10003ad5:	68 d2 6e 00 10       	push   0x10006ed2	10003ad6: R_386_32	.text
10003ada:	56                   	push   esi
10003adb:	e8 fc ff ff ff       	call   10003adc <NiLoadCursors()+0x110>	10003adc: R_386_PC32	memcmp
10003ae0:	83 c4 10             	add    esp,0x10
10003ae3:	85 c0                	test   eax,eax
10003ae5:	74 5f                	je     10003b46 <NiLoadCursors()+0x17a>
10003ae7:	51                   	push   ecx
10003ae8:	6a 04                	push   0x4
10003aea:	68 d7 6e 00 10       	push   0x10006ed7	10003aeb: R_386_32	.text
10003aef:	56                   	push   esi
10003af0:	e8 fc ff ff ff       	call   10003af1 <NiLoadCursors()+0x125>	10003af1: R_386_PC32	memcmp
10003af5:	83 c4 10             	add    esp,0x10
10003af8:	85 c0                	test   eax,eax
10003afa:	74 51                	je     10003b4d <NiLoadCursors()+0x181>
10003afc:	52                   	push   edx
10003afd:	6a 04                	push   0x4
10003aff:	68 dc 6e 00 10       	push   0x10006edc	10003b00: R_386_32	.text
10003b04:	56                   	push   esi
10003b05:	e8 fc ff ff ff       	call   10003b06 <NiLoadCursors()+0x13a>	10003b06: R_386_PC32	memcmp
10003b0a:	83 c4 10             	add    esp,0x10
10003b0d:	85 c0                	test   eax,eax
10003b0f:	74 43                	je     10003b54 <NiLoadCursors()+0x188>
10003b11:	50                   	push   eax
10003b12:	6a 04                	push   0x4
10003b14:	68 e1 6e 00 10       	push   0x10006ee1	10003b15: R_386_32	.text
10003b19:	56                   	push   esi
10003b1a:	e8 fc ff ff ff       	call   10003b1b <NiLoadCursors()+0x14f>	10003b1b: R_386_PC32	memcmp
10003b1f:	83 c4 10             	add    esp,0x10
10003b22:	85 c0                	test   eax,eax
10003b24:	74 35                	je     10003b5b <NiLoadCursors()+0x18f>
10003b26:	83 ec 0c             	sub    esp,0xc
10003b29:	68 e6 6e 00 10       	push   0x10006ee6	10003b2a: R_386_32	.text
10003b2e:	e8 fc ff ff ff       	call   10003b2f <NiLoadCursors()+0x163>	10003b2f: R_386_PC32	Dbg::kprintf(char const*, ...)
10003b33:	83 c4 10             	add    esp,0x10
10003b36:	eb 47                	jmp    10003b7f <NiLoadCursors()+0x1b3>
10003b38:	b8 00 02 00 00       	mov    eax,0x200
10003b3d:	eb 21                	jmp    10003b60 <NiLoadCursors()+0x194>
10003b3f:	b8 00 03 00 00       	mov    eax,0x300
10003b44:	eb 1a                	jmp    10003b60 <NiLoadCursors()+0x194>
10003b46:	b8 00 01 00 00       	mov    eax,0x100
10003b4b:	eb 13                	jmp    10003b60 <NiLoadCursors()+0x194>
10003b4d:	b8 00 04 00 00       	mov    eax,0x400
10003b52:	eb 0c                	jmp    10003b60 <NiLoadCursors()+0x194>
10003b54:	b8 00 05 00 00       	mov    eax,0x500
10003b59:	eb 05                	jmp    10003b60 <NiLoadCursors()+0x194>
10003b5b:	b8 00 06 00 00       	mov    eax,0x600
10003b60:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10003b62: R_386_32	___mouse_data
10003b66:	b9 00 01 00 00       	mov    ecx,0x100
10003b6b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10003b6f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10003b71:	45                   	inc    ebp
10003b72:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10003b7a:	e9 03 ff ff ff       	jmp    10003a82 <NiLoadCursors()+0xb6>
10003b7f:	83 ec 0c             	sub    esp,0xc
10003b82:	53                   	push   ebx
10003b83:	e8 fc ff ff ff       	call   10003b84 <NiLoadCursors()+0x1b8>	10003b84: R_386_PC32	free
10003b88:	83 c4 10             	add    esp,0x10
10003b8b:	83 c4 2c             	add    esp,0x2c
10003b8e:	5b                   	pop    ebx
10003b8f:	5e                   	pop    esi
10003b90:	5f                   	pop    edi
10003b91:	5d                   	pop    ebp
10003b92:	c3                   	ret    
10003b93:	90                   	nop

10003b94 <NIDesktop::desktopDecode(int)>:
10003b94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003b98:	3d ff 0f 00 00       	cmp    eax,0xfff
10003b9d:	7e 06                	jle    10003ba5 <NIDesktop::desktopDecode(int)+0x11>
10003b9f:	25 ff ff ff 00       	and    eax,0xffffff
10003ba4:	c3                   	ret    
10003ba5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
10003ba9:	0f b6 c0             	movzx  eax,al
10003bac:	8b 44 82 08          	mov    eax,DWORD PTR [edx+eax*4+0x8]
10003bb0:	c3                   	ret    
10003bb1:	90                   	nop

10003bb2 <NIDesktop::NIDesktop(NIContext*)>:
10003bb2:	55                   	push   ebp
10003bb3:	57                   	push   edi
10003bb4:	31 ff                	xor    edi,edi
10003bb6:	56                   	push   esi
10003bb7:	53                   	push   ebx
10003bb8:	83 ec 1c             	sub    esp,0x1c
10003bbb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
10003bbf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
10003bc3:	c7 86 14 04 00 00 1e 00 00 00 	mov    DWORD PTR [esi+0x414],0x1e
10003bcd:	89 2e                	mov    DWORD PTR [esi],ebp
10003bcf:	c7 86 18 04 00 00 1e 00 00 00 	mov    DWORD PTR [esi+0x418],0x1e
10003bd9:	c7 86 20 04 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x420],0x0
10003be3:	89 f9                	mov    ecx,edi
10003be5:	89 fb                	mov    ebx,edi
10003be7:	83 e1 03             	and    ecx,0x3
10003bea:	c1 fb 02             	sar    ebx,0x2
10003bed:	69 c9 ff 00 00 00    	imul   ecx,ecx,0xff
10003bf3:	83 e3 07             	and    ebx,0x7
10003bf6:	89 f8                	mov    eax,edi
10003bf8:	69 d3 ff 00 00 00    	imul   edx,ebx,0xff
10003bfe:	c1 f8 05             	sar    eax,0x5
10003c01:	bb 03 00 00 00       	mov    ebx,0x3
10003c06:	69 c0 ff 00 00 00    	imul   eax,eax,0xff
10003c0c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
10003c10:	31 d2                	xor    edx,edx
10003c12:	f7 f3                	div    ebx
10003c14:	31 d2                	xor    edx,edx
10003c16:	c1 e0 10             	shl    eax,0x10
10003c19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003c1d:	89 c8                	mov    eax,ecx
10003c1f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003c23:	f7 f3                	div    ebx
10003c25:	31 d2                	xor    edx,edx
10003c27:	09 c1                	or     ecx,eax
10003c29:	bb 07 00 00 00       	mov    ebx,0x7
10003c2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003c32:	f7 f3                	div    ebx
10003c34:	c1 e0 08             	shl    eax,0x8
10003c37:	09 c1                	or     ecx,eax
10003c39:	89 4c be 08          	mov    DWORD PTR [esi+edi*4+0x8],ecx
10003c3d:	47                   	inc    edi
10003c3e:	81 ff 80 00 00 00    	cmp    edi,0x80
10003c44:	75 9d                	jne    10003be3 <NIDesktop::NIDesktop(NIContext*)+0x31>
10003c46:	83 ec 0c             	sub    esp,0xc
10003c49:	8b 85 10 04 00 00    	mov    eax,DWORD PTR [ebp+0x410]
10003c4f:	0f af 85 0c 04 00 00 	imul   eax,DWORD PTR [ebp+0x40c]
10003c56:	c1 e0 02             	shl    eax,0x2
10003c59:	50                   	push   eax
10003c5a:	e8 fc ff ff ff       	call   10003c5b <NIDesktop::NIDesktop(NIContext*)+0xa9>	10003c5b: R_386_PC32	malloc
10003c5f:	89 86 08 04 00 00    	mov    DWORD PTR [esi+0x408],eax
10003c65:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
10003c6c:	e8 fc ff ff ff       	call   10003c6d <NIDesktop::NIDesktop(NIContext*)+0xbb>	10003c6d: R_386_PC32	malloc
10003c71:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10003c73: R_386_32	mouseDesktop
10003c77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10003c7e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003c84:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
10003c87:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003c89: R_386_32	guiMouseHandler
	10003c8d: R_386_32	NiHandleMouse(int, int, int, int)
10003c91:	83 c4 2c             	add    esp,0x2c
10003c94:	5b                   	pop    ebx
10003c95:	5e                   	pop    esi
10003c96:	5f                   	pop    edi
10003c97:	5d                   	pop    ebp
10003c98:	c3                   	ret    

10003c99 <NiShutdownHandler(void*)>:
10003c99:	56                   	push   esi
10003c9a:	53                   	push   ebx
10003c9b:	31 db                	xor    ebx,ebx
10003c9d:	52                   	push   edx
10003c9e:	83 ec 0c             	sub    esp,0xc
10003ca1:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ca2: R_386_32	mouseDesktop
10003ca6:	8b 00                	mov    eax,DWORD PTR [eax]
10003ca8:	ff b0 08 04 00 00    	push   DWORD PTR [eax+0x408]
10003cae:	e8 fc ff ff ff       	call   10003caf <NiShutdownHandler(void*)+0x16>	10003caf: R_386_PC32	Video::getHeight()
10003cb3:	83 c4 10             	add    esp,0x10
10003cb6:	39 d8                	cmp    eax,ebx
10003cb8:	7e 45                	jle    10003cff <NiShutdownHandler(void*)+0x66>
10003cba:	31 f6                	xor    esi,esi
10003cbc:	83 ec 0c             	sub    esp,0xc
10003cbf:	a1 00 00 00 00       	mov    eax,ds:0x0	10003cc0: R_386_32	mouseDesktop
10003cc4:	8b 00                	mov    eax,DWORD PTR [eax]
10003cc6:	ff b0 08 04 00 00    	push   DWORD PTR [eax+0x408]
10003ccc:	e8 fc ff ff ff       	call   10003ccd <NiShutdownHandler(void*)+0x34>	10003ccd: R_386_PC32	Video::getWidth()
10003cd1:	83 c4 10             	add    esp,0x10
10003cd4:	39 f0                	cmp    eax,esi
10003cd6:	7e 24                	jle    10003cfc <NiShutdownHandler(void*)+0x63>
10003cd8:	8d 04 33             	lea    eax,[ebx+esi*1]
10003cdb:	a8 01                	test   al,0x1
10003cdd:	74 1a                	je     10003cf9 <NiShutdownHandler(void*)+0x60>
10003cdf:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ce0: R_386_32	mouseDesktop
10003ce4:	8b 00                	mov    eax,DWORD PTR [eax]
10003ce6:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10003cec:	8b 10                	mov    edx,DWORD PTR [eax]
10003cee:	6a 00                	push   0x0
10003cf0:	53                   	push   ebx
10003cf1:	56                   	push   esi
10003cf2:	50                   	push   eax
10003cf3:	ff 52 24             	call   DWORD PTR [edx+0x24]
10003cf6:	83 c4 10             	add    esp,0x10
10003cf9:	46                   	inc    esi
10003cfa:	eb c0                	jmp    10003cbc <NiShutdownHandler(void*)+0x23>
10003cfc:	43                   	inc    ebx
10003cfd:	eb 9f                	jmp    10003c9e <NiShutdownHandler(void*)+0x5>
10003cff:	58                   	pop    eax
10003d00:	5b                   	pop    ebx
10003d01:	5e                   	pop    esi
10003d02:	c3                   	ret    
10003d03:	90                   	nop

10003d04 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)>:
10003d04:	55                   	push   ebp
10003d05:	57                   	push   edi
10003d06:	56                   	push   esi
10003d07:	53                   	push   ebx
10003d08:	83 ec 2c             	sub    esp,0x2c
10003d0b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003d0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003d12:	8b 28                	mov    ebp,DWORD PTR [eax]
10003d14:	83 7d 04 00          	cmp    DWORD PTR [ebp+0x4],0x0
10003d18:	0f 84 a2 00 00 00    	je     10003dc0 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xbc>
10003d1e:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
10003d21:	85 db                	test   ebx,ebx
10003d23:	0f 84 8f 00 00 00    	je     10003db8 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xb4>
10003d29:	3b 5c 24 44          	cmp    ebx,DWORD PTR [esp+0x44]
10003d2d:	0f 84 85 00 00 00    	je     10003db8 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xb4>
10003d33:	83 ec 0c             	sub    esp,0xc
10003d36:	53                   	push   ebx
10003d37:	e8 fc ff ff ff       	call   10003d38 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x34>	10003d38: R_386_PC32	NIWindow::invalidate()
10003d3c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
10003d40:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
10003d44:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d45: R_386_32	milliTenthsSinceBoot
10003d49:	83 ec 0c             	sub    esp,0xc
10003d4c:	89 86 0c 04 00 00    	mov    DWORD PTR [esi+0x40c],eax
10003d52:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	10003d54: R_386_32	milliTenthsSinceBoot
10003d58:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10003d5c:	89 96 10 04 00 00    	mov    DWORD PTR [esi+0x410],edx
10003d62:	25 ff 1f 00 00       	and    eax,0x1fff
10003d67:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003d69: R_386_32	mouseDesktop
10003d6d:	0d 00 60 00 80       	or     eax,0x80006000
10003d72:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10003d78:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10003d7c:	66 89 4c 24 2c       	mov    WORD PTR [esp+0x2c],cx
10003d81:	66 25 00 7c          	and    ax,0x7c00
10003d85:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10003d8b:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10003d91:	66 89 4c 24 2e       	mov    WORD PTR [esp+0x2e],cx
10003d96:	66 81 e2 ff 03       	and    dx,0x3ff
10003d9b:	b9 06 00 00 00       	mov    ecx,0x6
10003da0:	09 d0                	or     eax,edx
10003da2:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
10003da7:	8d 74 24 24          	lea    esi,[esp+0x24]
10003dab:	89 e7                	mov    edi,esp
10003dad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10003daf:	53                   	push   ebx
10003db0:	e8 fc ff ff ff       	call   10003db1 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xad>	10003db1: R_386_PC32	NIWindow::postEvent(NiEvent)
10003db5:	83 c4 20             	add    esp,0x20
10003db8:	8b 6d 04             	mov    ebp,DWORD PTR [ebp+0x4]
10003dbb:	e9 54 ff ff ff       	jmp    10003d14 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x10>
10003dc0:	83 c4 2c             	add    esp,0x2c
10003dc3:	5b                   	pop    ebx
10003dc4:	5e                   	pop    esi
10003dc5:	5f                   	pop    edi
10003dc6:	5d                   	pop    ebp
10003dc7:	c3                   	ret    

10003dc8 <NIDesktop::getTopmostWindowAtPixel(int, int)>:
10003dc8:	57                   	push   edi
10003dc9:	56                   	push   esi
10003dca:	53                   	push   ebx
10003dcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003dcf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10003dd3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003dd6:	8b 00                	mov    eax,DWORD PTR [eax]
10003dd8:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10003ddb:	85 db                	test   ebx,ebx
10003ddd:	74 52                	je     10003e31 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x69>
10003ddf:	8b 00                	mov    eax,DWORD PTR [eax]
10003de1:	85 c0                	test   eax,eax
10003de3:	74 4e                	je     10003e33 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x6b>
10003de5:	8b 90 6c 02 00 00    	mov    edx,DWORD PTR [eax+0x26c]
10003deb:	39 ca                	cmp    edx,ecx
10003ded:	7e 04                	jle    10003df3 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x2b>
10003def:	89 d8                	mov    eax,ebx
10003df1:	eb e5                	jmp    10003dd8 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x10>
10003df3:	8b b0 74 02 00 00    	mov    esi,DWORD PTR [eax+0x274]
10003df9:	01 d6                	add    esi,edx
10003dfb:	39 ce                	cmp    esi,ecx
10003dfd:	7e f0                	jle    10003def <NIDesktop::getTopmostWindowAtPixel(int, int)+0x27>
10003dff:	89 ce                	mov    esi,ecx
10003e01:	29 d6                	sub    esi,edx
10003e03:	8b 90 64 02 00 00    	mov    edx,DWORD PTR [eax+0x264]
10003e09:	8d 34 b2             	lea    esi,[edx+esi*4]
10003e0c:	8b 90 68 02 00 00    	mov    edx,DWORD PTR [eax+0x268]
10003e12:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003e15:	01 d7                	add    edi,edx
10003e17:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
10003e1b:	7f d2                	jg     10003def <NIDesktop::getTopmostWindowAtPixel(int, int)+0x27>
10003e1d:	03 90 70 02 00 00    	add    edx,DWORD PTR [eax+0x270]
10003e23:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003e27:	29 f2                	sub    edx,esi
10003e29:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10003e2d:	7e c0                	jle    10003def <NIDesktop::getTopmostWindowAtPixel(int, int)+0x27>
10003e2f:	eb 02                	jmp    10003e33 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x6b>
10003e31:	31 c0                	xor    eax,eax
10003e33:	5b                   	pop    ebx
10003e34:	5e                   	pop    esi
10003e35:	5f                   	pop    edi
10003e36:	c3                   	ret    
10003e37:	90                   	nop

10003e38 <NIDesktop::renderScanline(int, int, int)>:
10003e38:	55                   	push   ebp
10003e39:	57                   	push   edi
10003e3a:	56                   	push   esi
10003e3b:	53                   	push   ebx
10003e3c:	83 ec 3c             	sub    esp,0x3c
10003e3f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
10003e44:	0f 88 e9 05 00 00    	js     10004433 <NIDesktop::renderScanline(int, int, int)+0x5fb>
10003e4a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
10003e4e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
10003e52:	8b 00                	mov    eax,DWORD PTR [eax]
10003e54:	39 98 10 04 00 00    	cmp    DWORD PTR [eax+0x410],ebx
10003e5a:	0f 8e d3 05 00 00    	jle    10004433 <NIDesktop::renderScanline(int, int, int)+0x5fb>
10003e60:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
10003e64:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
10003e68:	85 db                	test   ebx,ebx
10003e6a:	79 08                	jns    10003e74 <NIDesktop::renderScanline(int, int, int)+0x3c>
10003e6c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
10003e74:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
10003e7a:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
10003e7e:	7f 07                	jg     10003e87 <NIDesktop::renderScanline(int, int, int)+0x4f>
10003e80:	8d 78 ff             	lea    edi,[eax-0x1]
10003e83:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
10003e87:	8b 5c 24 5c          	mov    ebx,DWORD PTR [esp+0x5c]
10003e8b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
10003e8f:	85 db                	test   ebx,ebx
10003e91:	79 08                	jns    10003e9b <NIDesktop::renderScanline(int, int, int)+0x63>
10003e93:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10003e9b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
10003e9f:	7f 07                	jg     10003ea8 <NIDesktop::renderScanline(int, int, int)+0x70>
10003ea1:	8d 78 ff             	lea    edi,[eax-0x1]
10003ea4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
10003ea8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10003eac:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10003eb0:	7e 0c                	jle    10003ebe <NIDesktop::renderScanline(int, int, int)+0x86>
10003eb2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
10003eb6:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
10003eba:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
10003ebe:	0f af 44 24 54       	imul   eax,DWORD PTR [esp+0x54]
10003ec3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10003ec7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10003ecb:	2b 7c 24 04          	sub    edi,DWORD PTR [esp+0x4]
10003ecf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003ed3:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
10003ed7:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003ed9: R_386_32	render
10003edd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10003ee1:	31 c0                	xor    eax,eax
10003ee3:	89 d7                	mov    edi,edx
10003ee5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
10003eea:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003eec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003ef0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10003ef4:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003ef6: R_386_32	shadow
10003efa:	b0 80                	mov    al,0x80
10003efc:	89 d7                	mov    edi,edx
10003efe:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003f00:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
10003f04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003f07:	8b 00                	mov    eax,DWORD PTR [eax]
10003f09:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003f0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003f11:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10003f15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003f19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003f1c:	85 c0                	test   eax,eax
10003f1e:	0f 84 1a 04 00 00    	je     1000433e <NIDesktop::renderScanline(int, int, int)+0x506>
10003f24:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10003f28:	8b 1f                	mov    ebx,DWORD PTR [edi]
10003f2a:	85 db                	test   ebx,ebx
10003f2c:	0f 84 0c 04 00 00    	je     1000433e <NIDesktop::renderScanline(int, int, int)+0x506>
10003f32:	39 1d 00 00 00 00    	cmp    DWORD PTR ds:0x0,ebx	10003f34: R_386_32	movingWin
10003f38:	75 06                	jne    10003f40 <NIDesktop::renderScanline(int, int, int)+0x108>
10003f3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003f3e:	eb d5                	jmp    10003f15 <NIDesktop::renderScanline(int, int, int)+0xdd>
10003f40:	8b 93 90 02 00 00    	mov    edx,DWORD PTR [ebx+0x290]
10003f46:	89 d1                	mov    ecx,edx
10003f48:	83 e1 12             	and    ecx,0x12
10003f4b:	83 f9 12             	cmp    ecx,0x12
10003f4e:	74 ea                	je     10003f3a <NIDesktop::renderScanline(int, int, int)+0x102>
10003f50:	0f ba e2 09          	bt     edx,0x9
10003f54:	72 e4                	jb     10003f3a <NIDesktop::renderScanline(int, int, int)+0x102>
10003f56:	83 ec 0c             	sub    esp,0xc
10003f59:	53                   	push   ebx
10003f5a:	e8 fc ff ff ff       	call   10003f5b <NIDesktop::renderScanline(int, int, int)+0x123>	10003f5b: R_386_PC32	NIWindow::request()
10003f5f:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
10003f65:	8b 93 74 02 00 00    	mov    edx,DWORD PTR [ebx+0x274]
10003f6b:	83 c4 10             	add    esp,0x10
10003f6e:	01 c2                	add    edx,eax
10003f70:	3b 54 24 54          	cmp    edx,DWORD PTR [esp+0x54]
10003f74:	0f 8e 08 01 00 00    	jle    10004082 <NIDesktop::renderScanline(int, int, int)+0x24a>
10003f7a:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
10003f81:	0f 85 fb 00 00 00    	jne    10004082 <NIDesktop::renderScanline(int, int, int)+0x24a>
10003f87:	f6 83 90 02 00 00 40 	test   BYTE PTR [ebx+0x290],0x40
10003f8e:	0f 85 03 02 00 00    	jne    10004197 <NIDesktop::renderScanline(int, int, int)+0x35f>
10003f94:	8b 83 68 02 00 00    	mov    eax,DWORD PTR [ebx+0x268]
10003f9a:	8b b3 68 02 00 00    	mov    esi,DWORD PTR [ebx+0x268]
10003fa0:	8b bb 70 02 00 00    	mov    edi,DWORD PTR [ebx+0x270]
10003fa6:	01 f7                	add    edi,esi
10003fa8:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10003fac:	39 c7                	cmp    edi,eax
10003fae:	0f 8e e3 01 00 00    	jle    10004197 <NIDesktop::renderScanline(int, int, int)+0x35f>
10003fb4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
10003fb8:	0f 8f be 00 00 00    	jg     1000407c <NIDesktop::renderScanline(int, int, int)+0x244>
10003fbe:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
10003fc2:	0f 8c cf 01 00 00    	jl     10004197 <NIDesktop::renderScanline(int, int, int)+0x35f>
10003fc8:	8b bb 90 02 00 00    	mov    edi,DWORD PTR [ebx+0x290]
10003fce:	89 c5                	mov    ebp,eax
10003fd0:	81 e7 00 01 00 00    	and    edi,0x100
10003fd6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
10003fda:	83 ff 01             	cmp    edi,0x1
10003fdd:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
10003fe1:	19 c9                	sbb    ecx,ecx
10003fe3:	8b bb 6c 02 00 00    	mov    edi,DWORD PTR [ebx+0x26c]
10003fe9:	83 e1 03             	and    ecx,0x3
10003fec:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10003ff0:	29 f5                	sub    ebp,esi
10003ff2:	83 c1 02             	add    ecx,0x2
10003ff5:	6b ff fc             	imul   edi,edi,0xfffffffc
10003ff8:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
10003ffc:	39 54 24 20          	cmp    DWORD PTR [esp+0x20],edx
10004000:	7f 20                	jg     10004022 <NIDesktop::renderScanline(int, int, int)+0x1ea>
10004002:	8d 34 97             	lea    esi,[edi+edx*4]
10004005:	03 b3 64 02 00 00    	add    esi,DWORD PTR [ebx+0x264]
1000400b:	0f b7 2e             	movzx  ebp,WORD PTR [esi]
1000400e:	3b 6c 24 2c          	cmp    ebp,DWORD PTR [esp+0x2c]
10004012:	7f 0e                	jg     10004022 <NIDesktop::renderScanline(int, int, int)+0x1ea>
10004014:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10004018:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
1000401c:	29 f5                	sub    ebp,esi
1000401e:	39 c5                	cmp    ebp,eax
10004020:	7d 0b                	jge    1000402d <NIDesktop::renderScanline(int, int, int)+0x1f5>
10004022:	42                   	inc    edx
10004023:	89 d6                	mov    esi,edx
10004025:	2b 74 24 54          	sub    esi,DWORD PTR [esp+0x54]
10004029:	39 f1                	cmp    ecx,esi
1000402b:	7d cf                	jge    10003ffc <NIDesktop::renderScanline(int, int, int)+0x1c4>
1000402d:	89 d6                	mov    esi,edx
1000402f:	2b 74 24 54          	sub    esi,DWORD PTR [esp+0x54]
10004033:	39 f1                	cmp    ecx,esi
10004035:	0f 9f c1             	setg   cl
10004038:	85 f6                	test   esi,esi
1000403a:	0f 9f c2             	setg   dl
1000403d:	20 d1                	and    cl,dl
1000403f:	74 3b                	je     1000407c <NIDesktop::renderScanline(int, int, int)+0x244>
10004041:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10004043: R_386_32	render
10004048:	75 32                	jne    1000407c <NIDesktop::renderScanline(int, int, int)+0x244>
1000404a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
1000404f:	74 09                	je     1000405a <NIDesktop::renderScanline(int, int, int)+0x222>
10004051:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10004053: R_386_32	shadow
10004058:	eb 1e                	jmp    10004078 <NIDesktop::renderScanline(int, int, int)+0x240>
1000405a:	8d 34 f5 5d 00 00 00 	lea    esi,[esi*8+0x5d]
10004061:	0f b6 90 00 00 00 00 	movzx  edx,BYTE PTR [eax+0x0]	10004064: R_386_32	shadow
10004068:	0f af d6             	imul   edx,esi
1000406b:	d1 fe                	sar    esi,1
1000406d:	c1 fa 08             	sar    edx,0x8
10004070:	01 f2                	add    edx,esi
10004072:	88 90 00 00 00 00    	mov    BYTE PTR [eax+0x0],dl	10004074: R_386_32	shadow
10004078:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
1000407c:	40                   	inc    eax
1000407d:	e9 18 ff ff ff       	jmp    10003f9a <NIDesktop::renderScanline(int, int, int)+0x162>
10004082:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10004086:	0f 8d 0b 01 00 00    	jge    10004197 <NIDesktop::renderScanline(int, int, int)+0x35f>
1000408c:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
10004093:	0f 85 fe 00 00 00    	jne    10004197 <NIDesktop::renderScanline(int, int, int)+0x35f>
10004099:	f6 83 90 02 00 00 40 	test   BYTE PTR [ebx+0x290],0x40
100040a0:	0f 85 f1 00 00 00    	jne    10004197 <NIDesktop::renderScanline(int, int, int)+0x35f>
100040a6:	8b 83 68 02 00 00    	mov    eax,DWORD PTR [ebx+0x268]
100040ac:	8b b3 68 02 00 00    	mov    esi,DWORD PTR [ebx+0x268]
100040b2:	8b bb 70 02 00 00    	mov    edi,DWORD PTR [ebx+0x270]
100040b8:	01 f7                	add    edi,esi
100040ba:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
100040be:	39 c7                	cmp    edi,eax
100040c0:	0f 8e d1 00 00 00    	jle    10004197 <NIDesktop::renderScanline(int, int, int)+0x35f>
100040c6:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
100040ca:	0f 8f c1 00 00 00    	jg     10004191 <NIDesktop::renderScanline(int, int, int)+0x359>
100040d0:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
100040d4:	0f 8c bd 00 00 00    	jl     10004197 <NIDesktop::renderScanline(int, int, int)+0x35f>
100040da:	8b bb 90 02 00 00    	mov    edi,DWORD PTR [ebx+0x290]
100040e0:	8b 4c 24 54          	mov    ecx,DWORD PTR [esp+0x54]
100040e4:	81 e7 00 01 00 00    	and    edi,0x100
100040ea:	83 ff 01             	cmp    edi,0x1
100040ed:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
100040f1:	19 d2                	sbb    edx,edx
100040f3:	89 c7                	mov    edi,eax
100040f5:	83 e2 03             	and    edx,0x3
100040f8:	29 f7                	sub    edi,esi
100040fa:	83 c2 02             	add    edx,0x2
100040fd:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10004101:	49                   	dec    ecx
10004102:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
10004106:	29 cf                	sub    edi,ecx
10004108:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
1000410c:	39 fa                	cmp    edx,edi
1000410e:	7c 3b                	jl     1000414b <NIDesktop::renderScanline(int, int, int)+0x313>
10004110:	8b bb 6c 02 00 00    	mov    edi,DWORD PTR [ebx+0x26c]
10004116:	8b b3 74 02 00 00    	mov    esi,DWORD PTR [ebx+0x274]
1000411c:	8d 2c 37             	lea    ebp,[edi+esi*1]
1000411f:	39 cd                	cmp    ebp,ecx
10004121:	7e de                	jle    10004101 <NIDesktop::renderScanline(int, int, int)+0x2c9>
10004123:	89 cd                	mov    ebp,ecx
10004125:	29 fd                	sub    ebp,edi
10004127:	39 ee                	cmp    esi,ebp
10004129:	7e 20                	jle    1000414b <NIDesktop::renderScanline(int, int, int)+0x313>
1000412b:	8b b3 64 02 00 00    	mov    esi,DWORD PTR [ebx+0x264]
10004131:	8d 34 ae             	lea    esi,[esi+ebp*4]
10004134:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10004137:	3b 7c 24 2c          	cmp    edi,DWORD PTR [esp+0x2c]
1000413b:	7f c4                	jg     10004101 <NIDesktop::renderScanline(int, int, int)+0x2c9>
1000413d:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10004141:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10004145:	29 f7                	sub    edi,esi
10004147:	39 c7                	cmp    edi,eax
10004149:	7c b6                	jl     10004101 <NIDesktop::renderScanline(int, int, int)+0x2c9>
1000414b:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
1000414f:	76 40                	jbe    10004191 <NIDesktop::renderScanline(int, int, int)+0x359>
10004151:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10004153: R_386_32	render
10004158:	75 37                	jne    10004191 <NIDesktop::renderScanline(int, int, int)+0x359>
1000415a:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
1000415f:	74 09                	je     1000416a <NIDesktop::renderScanline(int, int, int)+0x332>
10004161:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10004163: R_386_32	shadow
10004168:	eb 22                	jmp    1000418c <NIDesktop::renderScanline(int, int, int)+0x354>
1000416a:	0f b6 90 00 00 00 00 	movzx  edx,BYTE PTR [eax+0x0]	1000416d: R_386_32	shadow
10004171:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10004175:	8d 0c f5 5d 00 00 00 	lea    ecx,[esi*8+0x5d]
1000417c:	0f af d1             	imul   edx,ecx
1000417f:	d1 f9                	sar    ecx,1
10004181:	c1 fa 08             	sar    edx,0x8
10004184:	01 d1                	add    ecx,edx
10004186:	88 88 00 00 00 00    	mov    BYTE PTR [eax+0x0],cl	10004188: R_386_32	shadow
1000418c:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
10004191:	40                   	inc    eax
10004192:	e9 15 ff ff ff       	jmp    100040ac <NIDesktop::renderScanline(int, int, int)+0x274>
10004197:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
1000419d:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
100041a1:	0f 8f 82 01 00 00    	jg     10004329 <NIDesktop::renderScanline(int, int, int)+0x4f1>
100041a7:	8b 93 74 02 00 00    	mov    edx,DWORD PTR [ebx+0x274]
100041ad:	01 c2                	add    edx,eax
100041af:	3b 54 24 54          	cmp    edx,DWORD PTR [esp+0x54]
100041b3:	0f 8e 70 01 00 00    	jle    10004329 <NIDesktop::renderScanline(int, int, int)+0x4f1>
100041b9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
100041bd:	29 c2                	sub    edx,eax
100041bf:	8b 83 64 02 00 00    	mov    eax,DWORD PTR [ebx+0x264]
100041c5:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
100041cc:	8d 04 90             	lea    eax,[eax+edx*4]
100041cf:	0f b7 08             	movzx  ecx,WORD PTR [eax]
100041d2:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
100041d6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
100041da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100041de:	0f 85 d8 00 00 00    	jne    100042bc <NIDesktop::renderScanline(int, int, int)+0x484>
100041e4:	8b 83 90 02 00 00    	mov    eax,DWORD PTR [ebx+0x290]
100041ea:	a8 40                	test   al,0x40
100041ec:	0f 85 ca 00 00 00    	jne    100042bc <NIDesktop::renderScanline(int, int, int)+0x484>
100041f2:	25 00 01 00 00       	and    eax,0x100
100041f7:	83 f8 01             	cmp    eax,0x1
100041fa:	19 c9                	sbb    ecx,ecx
100041fc:	83 e1 fe             	and    ecx,0xfffffffe
100041ff:	83 c1 03             	add    ecx,0x3
10004202:	8b 83 68 02 00 00    	mov    eax,DWORD PTR [ebx+0x268]
10004208:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
1000420c:	8b b3 90 02 00 00    	mov    esi,DWORD PTR [ebx+0x290]
10004212:	8d 7c 38 fc          	lea    edi,[eax+edi*1-0x4]
10004216:	81 e6 00 01 00 00    	and    esi,0x100
1000421c:	01 cf                	add    edi,ecx
1000421e:	03 83 70 02 00 00    	add    eax,DWORD PTR [ebx+0x270]
10004224:	89 f2                	mov    edx,esi
10004226:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
1000422a:	01 c8                	add    eax,ecx
1000422c:	83 fe 01             	cmp    esi,0x1
1000422f:	19 f6                	sbb    esi,esi
10004231:	f7 d6                	not    esi
10004233:	83 e6 03             	and    esi,0x3
10004236:	29 f0                	sub    eax,esi
10004238:	80 bf 00 00 00 00 00 	cmp    BYTE PTR [edi+0x0],0x0	1000423a: R_386_32	render
1000423f:	75 31                	jne    10004272 <NIDesktop::renderScanline(int, int, int)+0x43a>
10004241:	85 d2                	test   edx,edx
10004243:	74 09                	je     1000424e <NIDesktop::renderScanline(int, int, int)+0x416>
10004245:	c6 87 00 00 00 00 00 	mov    BYTE PTR [edi+0x0],0x0	10004247: R_386_32	shadow
1000424c:	eb 1f                	jmp    1000426d <NIDesktop::renderScanline(int, int, int)+0x435>
1000424e:	0f b6 b7 00 00 00 00 	movzx  esi,BYTE PTR [edi+0x0]	10004251: R_386_32	shadow
10004255:	6b e9 f8             	imul   ebp,ecx,0xfffffff8
10004258:	83 c5 7d             	add    ebp,0x7d
1000425b:	0f af f5             	imul   esi,ebp
1000425e:	d1 fd                	sar    ebp,1
10004260:	c1 fe 08             	sar    esi,0x8
10004263:	01 f5                	add    ebp,esi
10004265:	89 ea                	mov    edx,ebp
10004267:	88 97 00 00 00 00    	mov    BYTE PTR [edi+0x0],dl	10004269: R_386_32	shadow
1000426d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
10004272:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10004274: R_386_32	render
10004279:	75 37                	jne    100042b2 <NIDesktop::renderScanline(int, int, int)+0x47a>
1000427b:	f6 83 91 02 00 00 01 	test   BYTE PTR [ebx+0x291],0x1
10004282:	74 09                	je     1000428d <NIDesktop::renderScanline(int, int, int)+0x455>
10004284:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10004286: R_386_32	shadow
1000428b:	eb 20                	jmp    100042ad <NIDesktop::renderScanline(int, int, int)+0x475>
1000428d:	8d 3c cd 65 00 00 00 	lea    edi,[ecx*8+0x65]
10004294:	0f b6 b0 00 00 00 00 	movzx  esi,BYTE PTR [eax+0x0]	10004297: R_386_32	shadow
1000429b:	0f af f7             	imul   esi,edi
1000429e:	d1 ff                	sar    edi,1
100042a0:	c1 fe 08             	sar    esi,0x8
100042a3:	01 f7                	add    edi,esi
100042a5:	89 fa                	mov    edx,edi
100042a7:	88 90 00 00 00 00    	mov    BYTE PTR [eax+0x0],dl	100042a9: R_386_32	shadow
100042ad:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
100042b2:	41                   	inc    ecx
100042b3:	83 f9 04             	cmp    ecx,0x4
100042b6:	0f 85 46 ff ff ff    	jne    10004202 <NIDesktop::renderScanline(int, int, int)+0x3ca>
100042bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100042c0:	03 93 68 02 00 00    	add    edx,DWORD PTR [ebx+0x268]
100042c6:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100042cc:	03 83 68 02 00 00    	add    eax,DWORD PTR [ebx+0x268]
100042d2:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
100042d6:	39 d0                	cmp    eax,edx
100042d8:	7e 4f                	jle    10004329 <NIDesktop::renderScanline(int, int, int)+0x4f1>
100042da:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
100042de:	7f 46                	jg     10004326 <NIDesktop::renderScanline(int, int, int)+0x4ee>
100042e0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
100042e4:	7c 43                	jl     10004329 <NIDesktop::renderScanline(int, int, int)+0x4f1>
100042e6:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	100042e8: R_386_32	render
100042ed:	75 37                	jne    10004326 <NIDesktop::renderScanline(int, int, int)+0x4ee>
100042ef:	c6 82 00 00 00 00 01 	mov    BYTE PTR [edx+0x0],0x1	100042f1: R_386_32	render
100042f6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100042fa:	2b 83 6c 02 00 00    	sub    eax,DWORD PTR [ebx+0x26c]
10004300:	0f af 83 70 02 00 00 	imul   eax,DWORD PTR [ebx+0x270]
10004307:	89 c1                	mov    ecx,eax
10004309:	89 d0                	mov    eax,edx
1000430b:	2b 83 68 02 00 00    	sub    eax,DWORD PTR [ebx+0x268]
10004311:	01 c8                	add    eax,ecx
10004313:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10004316:	ff 4c 24 24          	dec    DWORD PTR [esp+0x24]
1000431a:	8b 04 81             	mov    eax,DWORD PTR [ecx+eax*4]
1000431d:	89 04 95 00 00 00 00 	mov    DWORD PTR [edx*4+0x0],eax	10004320: R_386_32	renderData
10004324:	74 64                	je     1000438a <NIDesktop::renderScanline(int, int, int)+0x552>
10004326:	42                   	inc    edx
10004327:	eb 9d                	jmp    100042c6 <NIDesktop::renderScanline(int, int, int)+0x48e>
10004329:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
10004330:	75 0c                	jne    1000433e <NIDesktop::renderScanline(int, int, int)+0x506>
10004332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004336:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10004339:	e9 fc fb ff ff       	jmp    10003f3a <NIDesktop::renderScanline(int, int, int)+0x102>
1000433e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10004342:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
10004346:	7e 42                	jle    1000438a <NIDesktop::renderScanline(int, int, int)+0x552>
10004348:	80 b9 00 00 00 00 00 	cmp    BYTE PTR [ecx+0x0],0x0	1000434a: R_386_32	render
1000434f:	75 36                	jne    10004387 <NIDesktop::renderScanline(int, int, int)+0x54f>
10004351:	c6 81 00 00 00 00 01 	mov    BYTE PTR [ecx+0x0],0x1	10004353: R_386_32	render
10004358:	50                   	push   eax
10004359:	50                   	push   eax
1000435a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000435e:	8d 14 08             	lea    edx,[eax+ecx*1]
10004361:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10004365:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
1000436b:	ff 34 90             	push   DWORD PTR [eax+edx*4]
1000436e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
10004372:	e8 fc ff ff ff       	call   10004373 <NIDesktop::renderScanline(int, int, int)+0x53b>	10004373: R_386_PC32	NIDesktop::desktopDecode(int)
10004377:	83 c4 10             	add    esp,0x10
1000437a:	89 04 8d 00 00 00 00 	mov    DWORD PTR [ecx*4+0x0],eax	1000437d: R_386_32	renderData
10004381:	ff 4c 24 24          	dec    DWORD PTR [esp+0x24]
10004385:	74 03                	je     1000438a <NIDesktop::renderScanline(int, int, int)+0x552>
10004387:	41                   	inc    ecx
10004388:	eb b8                	jmp    10004342 <NIDesktop::renderScanline(int, int, int)+0x50a>
1000438a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
1000438e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10004391:	8b 00                	mov    eax,DWORD PTR [eax]
10004393:	85 c0                	test   eax,eax
10004395:	74 69                	je     10004400 <NIDesktop::renderScanline(int, int, int)+0x5c8>
10004397:	8b 00                	mov    eax,DWORD PTR [eax]
10004399:	85 c0                	test   eax,eax
1000439b:	74 63                	je     10004400 <NIDesktop::renderScanline(int, int, int)+0x5c8>
1000439d:	80 b8 78 02 00 00 01 	cmp    BYTE PTR [eax+0x278],0x1
100043a4:	74 5a                	je     10004400 <NIDesktop::renderScanline(int, int, int)+0x5c8>
100043a6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
100043aa:	84 c0                	test   al,al
100043ac:	74 52                	je     10004400 <NIDesktop::renderScanline(int, int, int)+0x5c8>
100043ae:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
100043b2:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
100043b6:	7e 48                	jle    10004400 <NIDesktop::renderScanline(int, int, int)+0x5c8>
100043b8:	8a 83 00 00 00 00    	mov    al,BYTE PTR [ebx+0x0]	100043ba: R_386_32	shadow
100043be:	3c 80                	cmp    al,0x80
100043c0:	74 3b                	je     100043fd <NIDesktop::renderScanline(int, int, int)+0x5c5>
100043c2:	8b 14 9d 00 00 00 00 	mov    edx,DWORD PTR [ebx*4+0x0]	100043c5: R_386_32	renderData
100043c9:	0f b6 f0             	movzx  esi,al
100043cc:	89 d1                	mov    ecx,edx
100043ce:	0f b6 c6             	movzx  eax,dh
100043d1:	c1 e9 10             	shr    ecx,0x10
100043d4:	0f af c6             	imul   eax,esi
100043d7:	0f b6 c9             	movzx  ecx,cl
100043da:	0f b6 d2             	movzx  edx,dl
100043dd:	0f af ce             	imul   ecx,esi
100043e0:	0f af d6             	imul   edx,esi
100043e3:	c1 e9 07             	shr    ecx,0x7
100043e6:	c1 e8 07             	shr    eax,0x7
100043e9:	c1 e1 10             	shl    ecx,0x10
100043ec:	c1 e0 08             	shl    eax,0x8
100043ef:	c1 ea 07             	shr    edx,0x7
100043f2:	09 c1                	or     ecx,eax
100043f4:	09 ca                	or     edx,ecx
100043f6:	89 14 9d 00 00 00 00 	mov    DWORD PTR [ebx*4+0x0],edx	100043f9: R_386_32	renderData
100043fd:	43                   	inc    ebx
100043fe:	eb b2                	jmp    100043b2 <NIDesktop::renderScanline(int, int, int)+0x57a>
10004400:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
10004404:	83 ec 0c             	sub    esp,0xc
10004407:	8b 00                	mov    eax,DWORD PTR [eax]
10004409:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
1000440f:	8b 10                	mov    edx,DWORD PTR [eax]
10004411:	68 00 00 00 00       	push   0x0	10004412: R_386_32	renderData
10004416:	6a 00                	push   0x0
10004418:	6a 01                	push   0x1
1000441a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000441e:	6a 00                	push   0x0
10004420:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10004424:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
10004428:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000442c:	50                   	push   eax
1000442d:	ff 52 38             	call   DWORD PTR [edx+0x38]
10004430:	83 c4 30             	add    esp,0x30
10004433:	83 c4 3c             	add    esp,0x3c
10004436:	5b                   	pop    ebx
10004437:	5e                   	pop    esi
10004438:	5f                   	pop    edi
10004439:	5d                   	pop    ebp
1000443a:	c3                   	ret    
1000443b:	90                   	nop

1000443c <NIDesktop::rangeRefresh(int, int, int, int, bool*)>:
1000443c:	57                   	push   edi
1000443d:	56                   	push   esi
1000443e:	53                   	push   ebx
1000443f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10004443:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10004447:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
1000444b:	3b 5c 24 18          	cmp    ebx,DWORD PTR [esp+0x18]
1000444f:	7d 29                	jge    1000447a <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0x3e>
10004451:	85 f6                	test   esi,esi
10004453:	74 06                	je     1000445b <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0x1f>
10004455:	80 3c 1e 00          	cmp    BYTE PTR [esi+ebx*1],0x0
10004459:	74 1c                	je     10004477 <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0x3b>
1000445b:	8b 07                	mov    eax,DWORD PTR [edi]
1000445d:	39 98 10 04 00 00    	cmp    DWORD PTR [eax+0x410],ebx
10004463:	7e 15                	jle    1000447a <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0x3e>
10004465:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10004469:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000446d:	53                   	push   ebx
1000446e:	57                   	push   edi
1000446f:	e8 fc ff ff ff       	call   10004470 <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0x34>	10004470: R_386_PC32	NIDesktop::renderScanline(int, int, int)
10004474:	83 c4 10             	add    esp,0x10
10004477:	43                   	inc    ebx
10004478:	eb d1                	jmp    1000444b <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0xf>
1000447a:	5b                   	pop    ebx
1000447b:	5e                   	pop    esi
1000447c:	5f                   	pop    edi
1000447d:	c3                   	ret    

1000447e <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)>:
1000447e:	55                   	push   ebp
1000447f:	57                   	push   edi
10004480:	56                   	push   esi
10004481:	53                   	push   ebx
10004482:	83 ec 34             	sub    esp,0x34
10004485:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
10004489:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
1000448d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
10004491:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
10004497:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000449b:	8d 4a 20             	lea    ecx,[edx+0x20]
1000449e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100044a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100044a6:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
100044aa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100044ae:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
100044b4:	6a 00                	push   0x0
100044b6:	51                   	push   ecx
100044b7:	52                   	push   edx
100044b8:	8d 50 20             	lea    edx,[eax+0x20]
100044bb:	52                   	push   edx
100044bc:	50                   	push   eax
100044bd:	53                   	push   ebx
100044be:	e8 fc ff ff ff       	call   100044bf <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0x41>	100044bf: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
100044c3:	8b 86 6c 02 00 00    	mov    eax,DWORD PTR [esi+0x26c]
100044c9:	8b 3b                	mov    edi,DWORD PTR [ebx]
100044cb:	8b 96 74 02 00 00    	mov    edx,DWORD PTR [esi+0x274]
100044d1:	8b 8f 10 04 00 00    	mov    ecx,DWORD PTR [edi+0x410]
100044d7:	01 c2                	add    edx,eax
100044d9:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
100044dd:	83 e9 05             	sub    ecx,0x5
100044e0:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
100044e4:	83 c4 20             	add    esp,0x20
100044e7:	8d 4a 05             	lea    ecx,[edx+0x5]
100044ea:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
100044ee:	7f 05                	jg     100044f5 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0x77>
100044f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100044f4:	49                   	dec    ecx
100044f5:	8b 96 68 02 00 00    	mov    edx,DWORD PTR [esi+0x268]
100044fb:	89 d5                	mov    ebp,edx
100044fd:	83 fa 05             	cmp    edx,0x5
10004500:	7d 05                	jge    10004507 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0x89>
10004502:	bd 05 00 00 00       	mov    ebp,0x5
10004507:	03 96 70 02 00 00    	add    edx,DWORD PTR [esi+0x270]
1000450d:	83 ed 05             	sub    ebp,0x5
10004510:	8b bf 0c 04 00 00    	mov    edi,DWORD PTR [edi+0x40c]
10004516:	8d 77 fb             	lea    esi,[edi-0x5]
10004519:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
1000451d:	8d 72 05             	lea    esi,[edx+0x5]
10004520:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
10004524:	7f 03                	jg     10004529 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xab>
10004526:	8d 77 ff             	lea    esi,[edi-0x1]
10004529:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
1000452e:	75 07                	jne    10004537 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xb9>
10004530:	89 c2                	mov    edx,eax
10004532:	83 f8 05             	cmp    eax,0x5
10004535:	eb 09                	jmp    10004540 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xc2>
10004537:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000453b:	01 c2                	add    edx,eax
1000453d:	83 fa 05             	cmp    edx,0x5
10004540:	7d 05                	jge    10004547 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xc9>
10004542:	ba 05 00 00 00       	mov    edx,0x5
10004547:	83 ea 05             	sub    edx,0x5
1000454a:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
1000454f:	74 12                	je     10004563 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xe5>
10004551:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
10004555:	8d 48 05             	lea    ecx,[eax+0x5]
10004558:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
1000455c:	7f 05                	jg     10004563 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xe5>
1000455e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10004562:	49                   	dec    ecx
10004563:	50                   	push   eax
10004564:	50                   	push   eax
10004565:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10004569:	56                   	push   esi
1000456a:	55                   	push   ebp
1000456b:	51                   	push   ecx
1000456c:	52                   	push   edx
1000456d:	53                   	push   ebx
1000456e:	e8 fc ff ff ff       	call   1000456f <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xf1>	1000456f: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004573:	8b 03                	mov    eax,DWORD PTR [ebx]
10004575:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
1000457b:	8b 0a                	mov    ecx,DWORD PTR [edx]
1000457d:	c7 44 24 70 00 00 00 00 	mov    DWORD PTR [esp+0x70],0x0
10004585:	8b 83 20 04 00 00    	mov    eax,DWORD PTR [ebx+0x420]
1000458b:	05 00 00 00 00       	add    eax,0x0	1000458c: R_386_32	___mouse_data
10004590:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10004594:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
1000459a:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
1000459e:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
100045a4:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
100045a8:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
100045ac:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
100045af:	83 c4 4c             	add    esp,0x4c
100045b2:	5b                   	pop    ebx
100045b3:	5e                   	pop    esi
100045b4:	5f                   	pop    edi
100045b5:	5d                   	pop    ebp
100045b6:	ff e0                	jmp    eax

100045b8 <NIDesktop::completeRefresh()>:
100045b8:	56                   	push   esi
100045b9:	31 f6                	xor    esi,esi
100045bb:	53                   	push   ebx
100045bc:	83 ec 0c             	sub    esp,0xc
100045bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100045c3:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
100045c9:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
100045cf:	8d 4a 20             	lea    ecx,[edx+0x20]
100045d2:	6a 00                	push   0x0
100045d4:	51                   	push   ecx
100045d5:	52                   	push   edx
100045d6:	8d 50 20             	lea    edx,[eax+0x20]
100045d9:	52                   	push   edx
100045da:	50                   	push   eax
100045db:	53                   	push   ebx
100045dc:	e8 fc ff ff ff       	call   100045dd <NIDesktop::completeRefresh()+0x25>	100045dd: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
100045e1:	83 c4 20             	add    esp,0x20
100045e4:	8b 03                	mov    eax,DWORD PTR [ebx]
100045e6:	39 b0 10 04 00 00    	cmp    DWORD PTR [eax+0x410],esi
100045ec:	7e 15                	jle    10004603 <NIDesktop::completeRefresh()+0x4b>
100045ee:	ff b0 0c 04 00 00    	push   DWORD PTR [eax+0x40c]
100045f4:	6a 00                	push   0x0
100045f6:	56                   	push   esi
100045f7:	46                   	inc    esi
100045f8:	53                   	push   ebx
100045f9:	e8 fc ff ff ff       	call   100045fa <NIDesktop::completeRefresh()+0x42>	100045fa: R_386_PC32	NIDesktop::renderScanline(int, int, int)
100045fe:	83 c4 10             	add    esp,0x10
10004601:	eb e1                	jmp    100045e4 <NIDesktop::completeRefresh()+0x2c>
10004603:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004609:	83 ec 0c             	sub    esp,0xc
1000460c:	8b 0a                	mov    ecx,DWORD PTR [edx]
1000460e:	6a 00                	push   0x0
10004610:	8b 83 20 04 00 00    	mov    eax,DWORD PTR [ebx+0x420]
10004616:	05 00 00 00 00       	add    eax,0x0	10004617: R_386_32	___mouse_data
1000461b:	50                   	push   eax
1000461c:	ff b3 18 04 00 00    	push   DWORD PTR [ebx+0x418]
10004622:	ff b3 14 04 00 00    	push   DWORD PTR [ebx+0x414]
10004628:	52                   	push   edx
10004629:	ff 51 30             	call   DWORD PTR [ecx+0x30]
1000462c:	83 c4 24             	add    esp,0x24
1000462f:	5b                   	pop    ebx
10004630:	5e                   	pop    esi
10004631:	c3                   	ret    

10004632 <NIDesktop::addWindow(NIWindow*)>:
10004632:	56                   	push   esi
10004633:	53                   	push   ebx
10004634:	83 ec 0c             	sub    esp,0xc
10004637:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000463b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
1000463f:	56                   	push   esi
10004640:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10004643:	e8 fc ff ff ff       	call   10004644 <NIDesktop::addWindow(NIWindow*)+0x12>	10004644: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
10004648:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
1000464f:	6a ff                	push   0xffffffff
10004651:	6a ff                	push   0xffffffff
10004653:	56                   	push   esi
10004654:	53                   	push   ebx
10004655:	e8 fc ff ff ff       	call   10004656 <NIDesktop::addWindow(NIWindow*)+0x24>	10004656: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
1000465a:	83 c4 24             	add    esp,0x24
1000465d:	5b                   	pop    ebx
1000465e:	5e                   	pop    esi
1000465f:	c3                   	ret    

10004660 <NIDesktop::raiseWindow(NIWindow*)>:
10004660:	53                   	push   ebx
10004661:	83 ec 10             	sub    esp,0x10
10004664:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10004668:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000466c:	50                   	push   eax
1000466d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10004670:	e8 fc ff ff ff       	call   10004671 <NIDesktop::raiseWindow(NIWindow*)+0x11>	10004671: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
10004675:	58                   	pop    eax
10004676:	5a                   	pop    edx
10004677:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000467b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
1000467e:	e8 fc ff ff ff       	call   1000467f <NIDesktop::raiseWindow(NIWindow*)+0x1f>	1000467f: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
10004683:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
1000468a:	6a ff                	push   0xffffffff
1000468c:	6a ff                	push   0xffffffff
1000468e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10004692:	53                   	push   ebx
10004693:	e8 fc ff ff ff       	call   10004694 <NIDesktop::raiseWindow(NIWindow*)+0x34>	10004694: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
10004698:	83 c4 28             	add    esp,0x28
1000469b:	5b                   	pop    ebx
1000469c:	c3                   	ret    
1000469d:	90                   	nop

1000469e <NIDesktop::deleteWindow(NIWindow*)>:
1000469e:	53                   	push   ebx
1000469f:	83 ec 10             	sub    esp,0x10
100046a2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100046a6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100046aa:	50                   	push   eax
100046ab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
100046ae:	e8 fc ff ff ff       	call   100046af <NIDesktop::deleteWindow(NIWindow*)+0x11>	100046af: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
100046b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
100046ba:	6a ff                	push   0xffffffff
100046bc:	6a ff                	push   0xffffffff
100046be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100046c2:	53                   	push   ebx
100046c3:	e8 fc ff ff ff       	call   100046c4 <NIDesktop::deleteWindow(NIWindow*)+0x26>	100046c4: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
100046c8:	83 c4 28             	add    esp,0x28
100046cb:	5b                   	pop    ebx
100046cc:	c3                   	ret    
100046cd:	90                   	nop

100046ce <NIDesktop::handleMouse(int, int, int, int)>:
100046ce:	55                   	push   ebp
100046cf:	57                   	push   edi
100046d0:	56                   	push   esi
100046d1:	53                   	push   ebx
100046d2:	81 ec 74 01 00 00    	sub    esp,0x174
100046d8:	8b 9c 24 88 01 00 00 	mov    ebx,DWORD PTR [esp+0x188]
100046df:	8b b4 24 8c 01 00 00 	mov    esi,DWORD PTR [esp+0x18c]
100046e6:	8b bc 24 90 01 00 00 	mov    edi,DWORD PTR [esp+0x190]
100046ed:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
100046f3:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
100046f9:	8d 4a 20             	lea    ecx,[edx+0x20]
100046fc:	6a 00                	push   0x0
100046fe:	51                   	push   ecx
100046ff:	52                   	push   edx
10004700:	8d 50 20             	lea    edx,[eax+0x20]
10004703:	52                   	push   edx
10004704:	50                   	push   eax
10004705:	53                   	push   ebx
10004706:	e8 fc ff ff ff       	call   10004707 <NIDesktop::handleMouse(int, int, int, int)+0x39>	10004707: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
1000470b:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
10004711:	8b 8b 1c 04 00 00    	mov    ecx,DWORD PTR [ebx+0x41c]
10004717:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
1000471b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
1000471f:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10004725:	8b 8c 24 ac 01 00 00 	mov    ecx,DWORD PTR [esp+0x1ac]
1000472c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10004730:	89 8b 1c 04 00 00    	mov    DWORD PTR [ebx+0x41c],ecx
10004736:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000473a:	8d 14 30             	lea    edx,[eax+esi*1]
1000473d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004741:	89 93 14 04 00 00    	mov    DWORD PTR [ebx+0x414],edx
10004747:	01 f8                	add    eax,edi
10004749:	83 c4 20             	add    esp,0x20
1000474c:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
10004752:	85 d2                	test   edx,edx
10004754:	79 0a                	jns    10004760 <NIDesktop::handleMouse(int, int, int, int)+0x92>
10004756:	c7 83 14 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x414],0x0
10004760:	85 c0                	test   eax,eax
10004762:	79 0a                	jns    1000476e <NIDesktop::handleMouse(int, int, int, int)+0xa0>
10004764:	c7 83 18 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x418],0x0
1000476e:	8b 13                	mov    edx,DWORD PTR [ebx]
10004770:	8b 82 0c 04 00 00    	mov    eax,DWORD PTR [edx+0x40c]
10004776:	3b 83 14 04 00 00    	cmp    eax,DWORD PTR [ebx+0x414]
1000477c:	7f 07                	jg     10004785 <NIDesktop::handleMouse(int, int, int, int)+0xb7>
1000477e:	48                   	dec    eax
1000477f:	89 83 14 04 00 00    	mov    DWORD PTR [ebx+0x414],eax
10004785:	8b 82 10 04 00 00    	mov    eax,DWORD PTR [edx+0x410]
1000478b:	3b 83 18 04 00 00    	cmp    eax,DWORD PTR [ebx+0x418]
10004791:	7f 07                	jg     1000479a <NIDesktop::handleMouse(int, int, int, int)+0xcc>
10004793:	48                   	dec    eax
10004794:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
1000479a:	55                   	push   ebp
1000479b:	ff b3 18 04 00 00    	push   DWORD PTR [ebx+0x418]
100047a1:	ff b3 14 04 00 00    	push   DWORD PTR [ebx+0x414]
100047a7:	53                   	push   ebx
100047a8:	e8 fc ff ff ff       	call   100047a9 <NIDesktop::handleMouse(int, int, int, int)+0xdb>	100047a9: R_386_PC32	NIDesktop::getTopmostWindowAtPixel(int, int)
100047ad:	83 c4 10             	add    esp,0x10
100047b0:	89 04 24             	mov    DWORD PTR [esp],eax
100047b3:	8b 84 24 8c 01 00 00 	mov    eax,DWORD PTR [esp+0x18c]
100047ba:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
100047bd:	83 e0 01             	and    eax,0x1
100047c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
100047c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100047c8:	0f 85 fe 0c 00 00    	jne    100054cc <NIDesktop::handleMouse(int, int, int, int)+0xdfe>
100047ce:	8b 2d 00 00 00 00    	mov    ebp,DWORD PTR ds:0x0	100047d0: R_386_32	prevClickon
100047d4:	85 ed                	test   ebp,ebp
100047d6:	0f 85 f0 0c 00 00    	jne    100054cc <NIDesktop::handleMouse(int, int, int, int)+0xdfe>
100047dc:	8b 2d 00 00 00 00    	mov    ebp,DWORD PTR ds:0x0	100047de: R_386_32	desktopWindowDummy
100047e2:	85 ed                	test   ebp,ebp
100047e4:	0f 84 6b 02 00 00    	je     10004a55 <NIDesktop::handleMouse(int, int, int, int)+0x387>
100047ea:	09 fe                	or     esi,edi
100047ec:	74 72                	je     10004860 <NIDesktop::handleMouse(int, int, int, int)+0x192>
100047ee:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
100047f3:	0f 84 e8 00 00 00    	je     100048e1 <NIDesktop::handleMouse(int, int, int, int)+0x213>
100047f9:	8b 84 24 ec 00 00 00 	mov    eax,DWORD PTR [esp+0xec]
10004800:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004802: R_386_32	mouseDesktop
10004806:	89 ac 24 e8 00 00 00 	mov    DWORD PTR [esp+0xe8],ebp
1000480d:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10004813:	25 ff 1f 00 00       	and    eax,0x1fff
10004818:	66 89 8c 24 f0 00 00 00 	mov    WORD PTR [esp+0xf0],cx
10004820:	80 cc a0             	or     ah,0xa0
10004823:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10004829:	89 84 24 ec 00 00 00 	mov    DWORD PTR [esp+0xec],eax
10004830:	66 89 8c 24 f2 00 00 00 	mov    WORD PTR [esp+0xf2],cx
10004838:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
1000483e:	66 25 00 bc          	and    ax,0xbc00
10004842:	66 81 e2 ff 03       	and    dx,0x3ff
10004847:	83 ec 1c             	sub    esp,0x1c
1000484a:	09 d0                	or     eax,edx
1000484c:	66 89 84 24 08 01 00 00 	mov    WORD PTR [esp+0x108],ax
10004854:	8d b4 24 04 01 00 00 	lea    esi,[esp+0x104]
1000485b:	e9 ea 00 00 00       	jmp    1000494a <NIDesktop::handleMouse(int, int, int, int)+0x27c>
10004860:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004864:	83 e0 01             	and    eax,0x1
10004867:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
1000486c:	74 73                	je     100048e1 <NIDesktop::handleMouse(int, int, int, int)+0x213>
1000486e:	85 c0                	test   eax,eax
10004870:	0f 85 e6 00 00 00    	jne    1000495c <NIDesktop::handleMouse(int, int, int, int)+0x28e>
10004876:	8b 84 24 04 01 00 00 	mov    eax,DWORD PTR [esp+0x104]
1000487d:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000487f: R_386_32	mouseDesktop
10004883:	89 ac 24 00 01 00 00 	mov    DWORD PTR [esp+0x100],ebp
1000488a:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10004890:	25 ff 1f 00 00       	and    eax,0x1fff
10004895:	66 89 8c 24 08 01 00 00 	mov    WORD PTR [esp+0x108],cx
1000489d:	80 cc c0             	or     ah,0xc0
100048a0:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100048a6:	89 84 24 04 01 00 00 	mov    DWORD PTR [esp+0x104],eax
100048ad:	66 89 8c 24 0a 01 00 00 	mov    WORD PTR [esp+0x10a],cx
100048b5:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100048bb:	66 25 00 dc          	and    ax,0xdc00
100048bf:	66 81 e2 ff 03       	and    dx,0x3ff
100048c4:	83 ec 1c             	sub    esp,0x1c
100048c7:	09 d0                	or     eax,edx
100048c9:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100048cb: R_386_32	desktopHasFocus
100048d0:	66 89 84 24 20 01 00 00 	mov    WORD PTR [esp+0x120],ax
100048d8:	8d b4 24 1c 01 00 00 	lea    esi,[esp+0x11c]
100048df:	eb 69                	jmp    1000494a <NIDesktop::handleMouse(int, int, int, int)+0x27c>
100048e1:	f6 44 24 0c 01       	test   BYTE PTR [esp+0xc],0x1
100048e6:	74 74                	je     1000495c <NIDesktop::handleMouse(int, int, int, int)+0x28e>
100048e8:	8b 84 24 1c 01 00 00 	mov    eax,DWORD PTR [esp+0x11c]
100048ef:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100048f1: R_386_32	mouseDesktop
100048f5:	89 ac 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],ebp
100048fc:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10004902:	25 ff 1f 00 00       	and    eax,0x1fff
10004907:	66 89 8c 24 20 01 00 00 	mov    WORD PTR [esp+0x120],cx
1000490f:	80 cc e0             	or     ah,0xe0
10004912:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10004918:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
1000491f:	66 89 8c 24 22 01 00 00 	mov    WORD PTR [esp+0x122],cx
10004927:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
1000492d:	66 25 00 fc          	and    ax,0xfc00
10004931:	66 81 e2 ff 03       	and    dx,0x3ff
10004936:	83 ec 1c             	sub    esp,0x1c
10004939:	09 d0                	or     eax,edx
1000493b:	66 89 84 24 38 01 00 00 	mov    WORD PTR [esp+0x138],ax
10004943:	8d b4 24 34 01 00 00 	lea    esi,[esp+0x134]
1000494a:	89 e7                	mov    edi,esp
1000494c:	b9 06 00 00 00       	mov    ecx,0x6
10004951:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004953:	55                   	push   ebp
10004954:	e8 fc ff ff ff       	call   10004955 <NIDesktop::handleMouse(int, int, int, int)+0x287>	10004955: R_386_PC32	NIWindow::postEvent(NiEvent)
10004959:	83 c4 20             	add    esp,0x20
1000495c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004960:	83 e0 02             	and    eax,0x2
10004963:	f6 84 24 8c 01 00 00 02 	test   BYTE PTR [esp+0x18c],0x2
1000496b:	74 6e                	je     100049db <NIDesktop::handleMouse(int, int, int, int)+0x30d>
1000496d:	85 c0                	test   eax,eax
1000496f:	0f 85 e0 00 00 00    	jne    10004a55 <NIDesktop::handleMouse(int, int, int, int)+0x387>
10004975:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
1000497c:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000497e: R_386_32	mouseDesktop
10004982:	89 ac 24 30 01 00 00 	mov    DWORD PTR [esp+0x130],ebp
10004989:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
1000498f:	25 ff 1f 00 00       	and    eax,0x1fff
10004994:	66 89 8c 24 38 01 00 00 	mov    WORD PTR [esp+0x138],cx
1000499c:	0d 00 40 01 00       	or     eax,0x14000
100049a1:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100049a7:	89 84 24 34 01 00 00 	mov    DWORD PTR [esp+0x134],eax
100049ae:	66 89 8c 24 3a 01 00 00 	mov    WORD PTR [esp+0x13a],cx
100049b6:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100049bc:	66 25 00 5c          	and    ax,0x5c00
100049c0:	66 81 e2 ff 03       	and    dx,0x3ff
100049c5:	83 ec 1c             	sub    esp,0x1c
100049c8:	09 d0                	or     eax,edx
100049ca:	66 89 84 24 50 01 00 00 	mov    WORD PTR [esp+0x150],ax
100049d2:	8d b4 24 4c 01 00 00 	lea    esi,[esp+0x14c]
100049d9:	eb 68                	jmp    10004a43 <NIDesktop::handleMouse(int, int, int, int)+0x375>
100049db:	85 c0                	test   eax,eax
100049dd:	74 76                	je     10004a55 <NIDesktop::handleMouse(int, int, int, int)+0x387>
100049df:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
100049e6:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100049e8: R_386_32	mouseDesktop
100049ec:	89 ac 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebp
100049f3:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
100049f9:	25 ff 1f 00 00       	and    eax,0x1fff
100049fe:	66 89 8c 24 50 01 00 00 	mov    WORD PTR [esp+0x150],cx
10004a06:	0d 00 60 01 00       	or     eax,0x16000
10004a0b:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10004a11:	89 84 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],eax
10004a18:	66 89 8c 24 52 01 00 00 	mov    WORD PTR [esp+0x152],cx
10004a20:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10004a26:	66 25 00 7c          	and    ax,0x7c00
10004a2a:	66 81 e2 ff 03       	and    dx,0x3ff
10004a2f:	83 ec 1c             	sub    esp,0x1c
10004a32:	09 d0                	or     eax,edx
10004a34:	66 89 84 24 68 01 00 00 	mov    WORD PTR [esp+0x168],ax
10004a3c:	8d b4 24 64 01 00 00 	lea    esi,[esp+0x164]
10004a43:	89 e7                	mov    edi,esp
10004a45:	b9 06 00 00 00       	mov    ecx,0x6
10004a4a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004a4c:	55                   	push   ebp
10004a4d:	e8 fc ff ff ff       	call   10004a4e <NIDesktop::handleMouse(int, int, int, int)+0x380>	10004a4e: R_386_PC32	NIWindow::postEvent(NiEvent)
10004a52:	83 c4 20             	add    esp,0x20
10004a55:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004a57: R_386_32	movingWin
10004a5c:	0f 84 2b 02 00 00    	je     10004c8d <NIDesktop::handleMouse(int, int, int, int)+0x5bf>
10004a62:	83 3d 00 00 00 00 01 	cmp    DWORD PTR ds:0x0,0x1	10004a64: R_386_32	movingType
10004a69:	0f 85 1e 02 00 00    	jne    10004c8d <NIDesktop::handleMouse(int, int, int, int)+0x5bf>
10004a6f:	c6 44 24 0c 00       	mov    BYTE PTR [esp+0xc],0x0
10004a74:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
10004a79:	75 0c                	jne    10004a87 <NIDesktop::handleMouse(int, int, int, int)+0x3b9>
10004a7b:	a0 d8 a1 03 10       	mov    al,ds:0x1003a1d8	10004a7c: R_386_32	.bss
10004a80:	83 e0 01             	and    eax,0x1
10004a83:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
10004a87:	bf 01 00 00 00       	mov    edi,0x1
10004a8c:	8b 2d 00 00 00 00    	mov    ebp,DWORD PTR ds:0x0	10004a8e: R_386_32	movingWin
10004a92:	8b 85 74 02 00 00    	mov    eax,DWORD PTR [ebp+0x274]
10004a98:	48                   	dec    eax
10004a99:	39 f8                	cmp    eax,edi
10004a9b:	0f 8e c3 00 00 00    	jle    10004b64 <NIDesktop::handleMouse(int, int, int, int)+0x496>
10004aa1:	89 f8                	mov    eax,edi
10004aa3:	be 01 00 00 00       	mov    esi,0x1
10004aa8:	83 e0 07             	and    eax,0x7
10004aab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10004aaf:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ab0: R_386_32	movingWin
10004ab4:	8b 80 70 02 00 00    	mov    eax,DWORD PTR [eax+0x270]
10004aba:	48                   	dec    eax
10004abb:	39 f0                	cmp    eax,esi
10004abd:	0f 8e 9b 00 00 00    	jle    10004b5e <NIDesktop::handleMouse(int, int, int, int)+0x490>
10004ac3:	8d 04 37             	lea    eax,[edi+esi*1]
10004ac6:	83 e0 3f             	and    eax,0x3f
10004ac9:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
10004acd:	0f 85 85 00 00 00    	jne    10004b58 <NIDesktop::handleMouse(int, int, int, int)+0x48a>
10004ad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004ad7:	2b 05 d4 a1 03 10    	sub    eax,DWORD PTR ds:0x1003a1d4	10004ad9: R_386_32	.bss
10004add:	01 f0                	add    eax,esi
10004adf:	78 2d                	js     10004b0e <NIDesktop::handleMouse(int, int, int, int)+0x440>
10004ae1:	8b 13                	mov    edx,DWORD PTR [ebx]
10004ae3:	3b 82 0c 04 00 00    	cmp    eax,DWORD PTR [edx+0x40c]
10004ae9:	7d 23                	jge    10004b0e <NIDesktop::handleMouse(int, int, int, int)+0x440>
10004aeb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10004aef:	2b 15 d0 a1 03 10    	sub    edx,DWORD PTR ds:0x1003a1d0	10004af1: R_386_32	.bss
10004af5:	51                   	push   ecx
10004af6:	01 fa                	add    edx,edi
10004af8:	51                   	push   ecx
10004af9:	8d 48 01             	lea    ecx,[eax+0x1]
10004afc:	6a 00                	push   0x0
10004afe:	51                   	push   ecx
10004aff:	50                   	push   eax
10004b00:	8d 42 01             	lea    eax,[edx+0x1]
10004b03:	50                   	push   eax
10004b04:	52                   	push   edx
10004b05:	53                   	push   ebx
10004b06:	e8 fc ff ff ff       	call   10004b07 <NIDesktop::handleMouse(int, int, int, int)+0x439>	10004b07: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004b0b:	83 c4 20             	add    esp,0x20
10004b0e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
10004b13:	75 43                	jne    10004b58 <NIDesktop::handleMouse(int, int, int, int)+0x48a>
10004b15:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
10004b1b:	01 f0                	add    eax,esi
10004b1d:	2b 05 d4 a1 03 10    	sub    eax,DWORD PTR ds:0x1003a1d4	10004b1f: R_386_32	.bss
10004b23:	78 33                	js     10004b58 <NIDesktop::handleMouse(int, int, int, int)+0x48a>
10004b25:	8b 0b                	mov    ecx,DWORD PTR [ebx]
10004b27:	3b 81 0c 04 00 00    	cmp    eax,DWORD PTR [ecx+0x40c]
10004b2d:	7d 29                	jge    10004b58 <NIDesktop::handleMouse(int, int, int, int)+0x48a>
10004b2f:	8b 93 18 04 00 00    	mov    edx,DWORD PTR [ebx+0x418]
10004b35:	01 fa                	add    edx,edi
10004b37:	2b 15 d0 a1 03 10    	sub    edx,DWORD PTR ds:0x1003a1d0	10004b39: R_386_32	.bss
10004b3d:	3b 91 10 04 00 00    	cmp    edx,DWORD PTR [ecx+0x410]
10004b43:	7d 13                	jge    10004b58 <NIDesktop::handleMouse(int, int, int, int)+0x48a>
10004b45:	8b 89 08 04 00 00    	mov    ecx,DWORD PTR [ecx+0x408]
10004b4b:	8b 29                	mov    ebp,DWORD PTR [ecx]
10004b4d:	6a 00                	push   0x0
10004b4f:	52                   	push   edx
10004b50:	50                   	push   eax
10004b51:	51                   	push   ecx
10004b52:	ff 55 24             	call   DWORD PTR [ebp+0x24]
10004b55:	83 c4 10             	add    esp,0x10
10004b58:	46                   	inc    esi
10004b59:	e9 51 ff ff ff       	jmp    10004aaf <NIDesktop::handleMouse(int, int, int, int)+0x3e1>
10004b5e:	47                   	inc    edi
10004b5f:	e9 28 ff ff ff       	jmp    10004a8c <NIDesktop::handleMouse(int, int, int, int)+0x3be>
10004b64:	8b 0d d4 a1 03 10    	mov    ecx,DWORD PTR ds:0x1003a1d4	10004b66: R_386_32	.bss
10004b6a:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
10004b70:	29 c8                	sub    eax,ecx
10004b72:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
10004b77:	0f 85 c1 08 00 00    	jne    1000543e <NIDesktop::handleMouse(int, int, int, int)+0xd70>
10004b7d:	89 c2                	mov    edx,eax
10004b7f:	85 c0                	test   eax,eax
10004b81:	79 02                	jns    10004b85 <NIDesktop::handleMouse(int, int, int, int)+0x4b7>
10004b83:	31 d2                	xor    edx,edx
10004b85:	8b b5 70 02 00 00    	mov    esi,DWORD PTR [ebp+0x270]
10004b8b:	8d 2c 06             	lea    ebp,[esi+eax*1]
10004b8e:	8b 03                	mov    eax,DWORD PTR [ebx]
10004b90:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
10004b96:	39 c5                	cmp    ebp,eax
10004b98:	7d 04                	jge    10004b9e <NIDesktop::handleMouse(int, int, int, int)+0x4d0>
10004b9a:	29 d5                	sub    ebp,edx
10004b9c:	eb 0a                	jmp    10004ba8 <NIDesktop::handleMouse(int, int, int, int)+0x4da>
10004b9e:	89 c5                	mov    ebp,eax
10004ba0:	29 d5                	sub    ebp,edx
10004ba2:	0f 88 e5 00 00 00    	js     10004c8d <NIDesktop::handleMouse(int, int, int, int)+0x5bf>
10004ba8:	85 ed                	test   ebp,ebp
10004baa:	0f 84 dd 00 00 00    	je     10004c8d <NIDesktop::handleMouse(int, int, int, int)+0x5bf>
10004bb0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10004bb4:	29 cf                	sub    edi,ecx
10004bb6:	89 f9                	mov    ecx,edi
10004bb8:	79 02                	jns    10004bbc <NIDesktop::handleMouse(int, int, int, int)+0x4ee>
10004bba:	31 ff                	xor    edi,edi
10004bbc:	01 ce                	add    esi,ecx
10004bbe:	39 f0                	cmp    eax,esi
10004bc0:	7e 04                	jle    10004bc6 <NIDesktop::handleMouse(int, int, int, int)+0x4f8>
10004bc2:	29 fe                	sub    esi,edi
10004bc4:	eb 08                	jmp    10004bce <NIDesktop::handleMouse(int, int, int, int)+0x500>
10004bc6:	29 f8                	sub    eax,edi
10004bc8:	89 c6                	mov    esi,eax
10004bca:	79 02                	jns    10004bce <NIDesktop::handleMouse(int, int, int, int)+0x500>
10004bcc:	31 f6                	xor    esi,esi
10004bce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10004bd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004bd6:	01 fe                	add    esi,edi
10004bd8:	2b 05 d0 a1 03 10    	sub    eax,DWORD PTR ds:0x1003a1d0	10004bda: R_386_32	.bss
10004bde:	8d 48 01             	lea    ecx,[eax+0x1]
10004be1:	52                   	push   edx
10004be2:	52                   	push   edx
10004be3:	6a 00                	push   0x0
10004be5:	56                   	push   esi
10004be6:	57                   	push   edi
10004be7:	51                   	push   ecx
10004be8:	50                   	push   eax
10004be9:	53                   	push   ebx
10004bea:	e8 fc ff ff ff       	call   10004beb <NIDesktop::handleMouse(int, int, int, int)+0x51d>	10004beb: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004bef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004bf3:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004bf5: R_386_32	movingWin
10004bf9:	83 c4 18             	add    esp,0x18
10004bfc:	2b 05 d0 a1 03 10    	sub    eax,DWORD PTR ds:0x1003a1d0	10004bfe: R_386_32	.bss
10004c02:	03 81 74 02 00 00    	add    eax,DWORD PTR [ecx+0x274]
10004c08:	6a 00                	push   0x0
10004c0a:	56                   	push   esi
10004c0b:	57                   	push   edi
10004c0c:	50                   	push   eax
10004c0d:	48                   	dec    eax
10004c0e:	50                   	push   eax
10004c0f:	53                   	push   ebx
10004c10:	e8 fc ff ff ff       	call   10004c11 <NIDesktop::handleMouse(int, int, int, int)+0x543>	10004c11: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004c15:	83 c4 20             	add    esp,0x20
10004c18:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10004c1e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
10004c20:	2b 05 d0 a1 03 10    	sub    eax,DWORD PTR ds:0x1003a1d0	10004c22: R_386_32	.bss
10004c26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10004c2a:	3b 81 10 04 00 00    	cmp    eax,DWORD PTR [ecx+0x410]
10004c30:	7d 20                	jge    10004c52 <NIDesktop::handleMouse(int, int, int, int)+0x584>
10004c32:	8b 89 08 04 00 00    	mov    ecx,DWORD PTR [ecx+0x408]
10004c38:	57                   	push   edi
10004c39:	57                   	push   edi
10004c3a:	8b 31                	mov    esi,DWORD PTR [ecx]
10004c3c:	6a 00                	push   0x0
10004c3e:	6a 01                	push   0x1
10004c40:	55                   	push   ebp
10004c41:	50                   	push   eax
10004c42:	52                   	push   edx
10004c43:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
10004c47:	51                   	push   ecx
10004c48:	ff 56 28             	call   DWORD PTR [esi+0x28]
10004c4b:	83 c4 20             	add    esp,0x20
10004c4e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10004c52:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004c54: R_386_32	movingWin
10004c58:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10004c5e:	2b 05 d0 a1 03 10    	sub    eax,DWORD PTR ds:0x1003a1d0	10004c60: R_386_32	.bss
10004c64:	03 81 74 02 00 00    	add    eax,DWORD PTR [ecx+0x274]
10004c6a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
10004c6c:	3b 81 10 04 00 00    	cmp    eax,DWORD PTR [ecx+0x410]
10004c72:	7f 19                	jg     10004c8d <NIDesktop::handleMouse(int, int, int, int)+0x5bf>
10004c74:	8b 89 08 04 00 00    	mov    ecx,DWORD PTR [ecx+0x408]
10004c7a:	48                   	dec    eax
10004c7b:	56                   	push   esi
10004c7c:	56                   	push   esi
10004c7d:	8b 31                	mov    esi,DWORD PTR [ecx]
10004c7f:	6a 00                	push   0x0
10004c81:	6a 01                	push   0x1
10004c83:	55                   	push   ebp
10004c84:	50                   	push   eax
10004c85:	52                   	push   edx
10004c86:	51                   	push   ecx
10004c87:	ff 56 28             	call   DWORD PTR [esi+0x28]
10004c8a:	83 c4 20             	add    esp,0x20
10004c8d:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c8e: R_386_32	movingWin
10004c92:	85 c0                	test   eax,eax
10004c94:	0f 84 57 03 00 00    	je     10004ff1 <NIDesktop::handleMouse(int, int, int, int)+0x923>
10004c9a:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	10004c9c: R_386_32	movingType
10004ca0:	8d 57 fe             	lea    edx,[edi-0x2]
10004ca3:	83 fa 02             	cmp    edx,0x2
10004ca6:	0f 87 45 03 00 00    	ja     10004ff1 <NIDesktop::handleMouse(int, int, int, int)+0x923>
10004cac:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
10004cb1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
10004cb6:	75 0d                	jne    10004cc5 <NIDesktop::handleMouse(int, int, int, int)+0x5f7>
10004cb8:	8a 0d d8 a1 03 10    	mov    cl,BYTE PTR ds:0x1003a1d8	10004cba: R_386_32	.bss
10004cbe:	83 e1 01             	and    ecx,0x1
10004cc1:	88 4c 24 14          	mov    BYTE PTR [esp+0x14],cl
10004cc5:	8b 88 70 02 00 00    	mov    ecx,DWORD PTR [eax+0x270]
10004ccb:	8b b0 74 02 00 00    	mov    esi,DWORD PTR [eax+0x274]
10004cd1:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
10004cd5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004cd9:	01 cd                	add    ebp,ecx
10004cdb:	01 f0                	add    eax,esi
10004cdd:	2b 2d d4 a1 03 10    	sub    ebp,DWORD PTR ds:0x1003a1d4	10004cdf: R_386_32	.bss
10004ce3:	2b 05 d0 a1 03 10    	sub    eax,DWORD PTR ds:0x1003a1d0	10004ce5: R_386_32	.bss
10004ce9:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
10004cef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004cf3:	01 ca                	add    edx,ecx
10004cf5:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10004cfb:	2b 15 d4 a1 03 10    	sub    edx,DWORD PTR ds:0x1003a1d4	10004cfd: R_386_32	.bss
10004d01:	01 f0                	add    eax,esi
10004d03:	2b 05 d0 a1 03 10    	sub    eax,DWORD PTR ds:0x1003a1d0	10004d05: R_386_32	.bss
10004d09:	83 ff 03             	cmp    edi,0x3
10004d0c:	74 0d                	je     10004d1b <NIDesktop::handleMouse(int, int, int, int)+0x64d>
10004d0e:	83 ff 04             	cmp    edi,0x4
10004d11:	75 0c                	jne    10004d1f <NIDesktop::handleMouse(int, int, int, int)+0x651>
10004d13:	89 f0                	mov    eax,esi
10004d15:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
10004d19:	eb 04                	jmp    10004d1f <NIDesktop::handleMouse(int, int, int, int)+0x651>
10004d1b:	89 ca                	mov    edx,ecx
10004d1d:	89 cd                	mov    ebp,ecx
10004d1f:	89 d7                	mov    edi,edx
10004d21:	83 fa 32             	cmp    edx,0x32
10004d24:	7d 05                	jge    10004d2b <NIDesktop::handleMouse(int, int, int, int)+0x65d>
10004d26:	bf 32 00 00 00       	mov    edi,0x32
10004d2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10004d2f:	83 f8 32             	cmp    eax,0x32
10004d32:	7d 08                	jge    10004d3c <NIDesktop::handleMouse(int, int, int, int)+0x66e>
10004d34:	c7 44 24 04 32 00 00 00 	mov    DWORD PTR [esp+0x4],0x32
10004d3c:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
10004d40:	83 fd 32             	cmp    ebp,0x32
10004d43:	7d 08                	jge    10004d4d <NIDesktop::handleMouse(int, int, int, int)+0x67f>
10004d45:	c7 44 24 0c 32 00 00 00 	mov    DWORD PTR [esp+0xc],0x32
10004d4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004d51:	83 f8 32             	cmp    eax,0x32
10004d54:	7d 08                	jge    10004d5e <NIDesktop::handleMouse(int, int, int, int)+0x690>
10004d56:	c7 44 24 08 32 00 00 00 	mov    DWORD PTR [esp+0x8],0x32
10004d5e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
10004d62:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
10004d66:	7d 08                	jge    10004d70 <NIDesktop::handleMouse(int, int, int, int)+0x6a2>
10004d68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004d6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10004d70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004d74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004d78:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
10004d7c:	7d 08                	jge    10004d86 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
10004d7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004d82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004d86:	be 01 00 00 00       	mov    esi,0x1
10004d8b:	bd 01 00 00 00       	mov    ebp,0x1
10004d90:	8d 04 2e             	lea    eax,[esi+ebp*1]
10004d93:	89 f2                	mov    edx,esi
10004d95:	83 e0 3f             	and    eax,0x3f
10004d98:	83 e2 07             	and    edx,0x7
10004d9b:	09 d0                	or     eax,edx
10004d9d:	0f 85 a1 00 00 00    	jne    10004e44 <NIDesktop::handleMouse(int, int, int, int)+0x776>
10004da3:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004da5: R_386_32	movingWin
10004da9:	8b 81 68 02 00 00    	mov    eax,DWORD PTR [ecx+0x268]
10004daf:	89 c2                	mov    edx,eax
10004db1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10004db5:	01 ea                	add    edx,ebp
10004db7:	78 2f                	js     10004de8 <NIDesktop::handleMouse(int, int, int, int)+0x71a>
10004db9:	8b 03                	mov    eax,DWORD PTR [ebx]
10004dbb:	3b 90 0c 04 00 00    	cmp    edx,DWORD PTR [eax+0x40c]
10004dc1:	7d 25                	jge    10004de8 <NIDesktop::handleMouse(int, int, int, int)+0x71a>
10004dc3:	8b 89 6c 02 00 00    	mov    ecx,DWORD PTR [ecx+0x26c]
10004dc9:	50                   	push   eax
10004dca:	50                   	push   eax
10004dcb:	6a 00                	push   0x0
10004dcd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10004dd1:	8d 44 28 01          	lea    eax,[eax+ebp*1+0x1]
10004dd5:	50                   	push   eax
10004dd6:	8d 44 31 01          	lea    eax,[ecx+esi*1+0x1]
10004dda:	52                   	push   edx
10004ddb:	01 f1                	add    ecx,esi
10004ddd:	50                   	push   eax
10004dde:	51                   	push   ecx
10004ddf:	53                   	push   ebx
10004de0:	e8 fc ff ff ff       	call   10004de1 <NIDesktop::handleMouse(int, int, int, int)+0x713>	10004de1: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004de5:	83 c4 20             	add    esp,0x20
10004de8:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
10004dec:	83 f2 01             	xor    edx,0x1
10004def:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
10004df3:	0f 9f c0             	setg   al
10004df6:	84 c2                	test   dl,al
10004df8:	74 4a                	je     10004e44 <NIDesktop::handleMouse(int, int, int, int)+0x776>
10004dfa:	39 ef                	cmp    edi,ebp
10004dfc:	7e 46                	jle    10004e44 <NIDesktop::handleMouse(int, int, int, int)+0x776>
10004dfe:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004e00: R_386_32	movingWin
10004e04:	89 ea                	mov    edx,ebp
10004e06:	03 91 68 02 00 00    	add    edx,DWORD PTR [ecx+0x268]
10004e0c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10004e10:	78 32                	js     10004e44 <NIDesktop::handleMouse(int, int, int, int)+0x776>
10004e12:	8b 03                	mov    eax,DWORD PTR [ebx]
10004e14:	3b 90 0c 04 00 00    	cmp    edx,DWORD PTR [eax+0x40c]
10004e1a:	7d 28                	jge    10004e44 <NIDesktop::handleMouse(int, int, int, int)+0x776>
10004e1c:	8b 91 6c 02 00 00    	mov    edx,DWORD PTR [ecx+0x26c]
10004e22:	01 f2                	add    edx,esi
10004e24:	89 d1                	mov    ecx,edx
10004e26:	3b 90 10 04 00 00    	cmp    edx,DWORD PTR [eax+0x410]
10004e2c:	7d 16                	jge    10004e44 <NIDesktop::handleMouse(int, int, int, int)+0x776>
10004e2e:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004e34:	8b 10                	mov    edx,DWORD PTR [eax]
10004e36:	6a 00                	push   0x0
10004e38:	51                   	push   ecx
10004e39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10004e3d:	50                   	push   eax
10004e3e:	ff 52 24             	call   DWORD PTR [edx+0x24]
10004e41:	83 c4 10             	add    esp,0x10
10004e44:	45                   	inc    ebp
10004e45:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
10004e49:	0f 85 41 ff ff ff    	jne    10004d90 <NIDesktop::handleMouse(int, int, int, int)+0x6c2>
10004e4f:	46                   	inc    esi
10004e50:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
10004e54:	0f 85 31 ff ff ff    	jne    10004d8b <NIDesktop::handleMouse(int, int, int, int)+0x6bd>
10004e5a:	8b 2d 00 00 00 00    	mov    ebp,DWORD PTR ds:0x0	10004e5c: R_386_32	movingWin
10004e60:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
10004e65:	0f 85 2a 05 00 00    	jne    10005395 <NIDesktop::handleMouse(int, int, int, int)+0xcc7>
10004e6b:	8b 95 68 02 00 00    	mov    edx,DWORD PTR [ebp+0x268]
10004e71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004e75:	85 d2                	test   edx,edx
10004e77:	8d 0c 02             	lea    ecx,[edx+eax*1]
10004e7a:	8b 85 6c 02 00 00    	mov    eax,DWORD PTR [ebp+0x26c]
10004e80:	8d 70 01             	lea    esi,[eax+0x1]
10004e83:	0f 89 b9 00 00 00    	jns    10004f42 <NIDesktop::handleMouse(int, int, int, int)+0x874>
10004e89:	55                   	push   ebp
10004e8a:	55                   	push   ebp
10004e8b:	6a 00                	push   0x0
10004e8d:	51                   	push   ecx
10004e8e:	6a 00                	push   0x0
10004e90:	56                   	push   esi
10004e91:	50                   	push   eax
10004e92:	53                   	push   ebx
10004e93:	e8 fc ff ff ff       	call   10004e94 <NIDesktop::handleMouse(int, int, int, int)+0x7c6>	10004e94: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004e98:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004e9a: R_386_32	movingWin
10004e9e:	8b 03                	mov    eax,DWORD PTR [ebx]
10004ea0:	8b 91 6c 02 00 00    	mov    edx,DWORD PTR [ecx+0x26c]
10004ea6:	83 c4 20             	add    esp,0x20
10004ea9:	3b 90 10 04 00 00    	cmp    edx,DWORD PTR [eax+0x410]
10004eaf:	7d 21                	jge    10004ed2 <NIDesktop::handleMouse(int, int, int, int)+0x804>
10004eb1:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004eb7:	56                   	push   esi
10004eb8:	56                   	push   esi
10004eb9:	8b 30                	mov    esi,DWORD PTR [eax]
10004ebb:	6a 00                	push   0x0
10004ebd:	6a 01                	push   0x1
10004ebf:	8b a9 68 02 00 00    	mov    ebp,DWORD PTR [ecx+0x268]
10004ec5:	01 fd                	add    ebp,edi
10004ec7:	55                   	push   ebp
10004ec8:	52                   	push   edx
10004ec9:	6a 00                	push   0x0
10004ecb:	50                   	push   eax
10004ecc:	ff 56 28             	call   DWORD PTR [esi+0x28]
10004ecf:	83 c4 20             	add    esp,0x20
10004ed2:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004ed4: R_386_32	movingWin
10004ed8:	8b 82 6c 02 00 00    	mov    eax,DWORD PTR [edx+0x26c]
10004ede:	55                   	push   ebp
10004edf:	55                   	push   ebp
10004ee0:	6a 00                	push   0x0
10004ee2:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
10004ee6:	03 aa 68 02 00 00    	add    ebp,DWORD PTR [edx+0x268]
10004eec:	55                   	push   ebp
10004eed:	6a 00                	push   0x0
10004eef:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
10004ef3:	8d 54 30 01          	lea    edx,[eax+esi*1+0x1]
10004ef7:	52                   	push   edx
10004ef8:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
10004efc:	50                   	push   eax
10004efd:	53                   	push   ebx
10004efe:	e8 fc ff ff ff       	call   10004eff <NIDesktop::handleMouse(int, int, int, int)+0x831>	10004eff: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004f03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004f07:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004f09: R_386_32	movingWin
10004f0d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
10004f0f:	03 82 6c 02 00 00    	add    eax,DWORD PTR [edx+0x26c]
10004f15:	83 c4 20             	add    esp,0x20
10004f18:	3b 81 10 04 00 00    	cmp    eax,DWORD PTR [ecx+0x410]
10004f1e:	0f 8d cd 00 00 00    	jge    10004ff1 <NIDesktop::handleMouse(int, int, int, int)+0x923>
10004f24:	8b 89 08 04 00 00    	mov    ecx,DWORD PTR [ecx+0x408]
10004f2a:	56                   	push   esi
10004f2b:	56                   	push   esi
10004f2c:	8b 31                	mov    esi,DWORD PTR [ecx]
10004f2e:	6a 00                	push   0x0
10004f30:	6a 01                	push   0x1
10004f32:	03 ba 68 02 00 00    	add    edi,DWORD PTR [edx+0x268]
10004f38:	57                   	push   edi
10004f39:	50                   	push   eax
10004f3a:	6a 00                	push   0x0
10004f3c:	51                   	push   ecx
10004f3d:	e9 a9 00 00 00       	jmp    10004feb <NIDesktop::handleMouse(int, int, int, int)+0x91d>
10004f42:	55                   	push   ebp
10004f43:	55                   	push   ebp
10004f44:	6a 00                	push   0x0
10004f46:	51                   	push   ecx
10004f47:	52                   	push   edx
10004f48:	56                   	push   esi
10004f49:	50                   	push   eax
10004f4a:	53                   	push   ebx
10004f4b:	e8 fc ff ff ff       	call   10004f4c <NIDesktop::handleMouse(int, int, int, int)+0x87e>	10004f4c: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004f50:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004f52: R_386_32	movingWin
10004f56:	8b 03                	mov    eax,DWORD PTR [ebx]
10004f58:	8b 8a 6c 02 00 00    	mov    ecx,DWORD PTR [edx+0x26c]
10004f5e:	83 c4 20             	add    esp,0x20
10004f61:	3b 88 10 04 00 00    	cmp    ecx,DWORD PTR [eax+0x410]
10004f67:	7d 1d                	jge    10004f86 <NIDesktop::handleMouse(int, int, int, int)+0x8b8>
10004f69:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004f6f:	56                   	push   esi
10004f70:	56                   	push   esi
10004f71:	8b 30                	mov    esi,DWORD PTR [eax]
10004f73:	6a 00                	push   0x0
10004f75:	6a 01                	push   0x1
10004f77:	57                   	push   edi
10004f78:	51                   	push   ecx
10004f79:	ff b2 68 02 00 00    	push   DWORD PTR [edx+0x268]
10004f7f:	50                   	push   eax
10004f80:	ff 56 28             	call   DWORD PTR [esi+0x28]
10004f83:	83 c4 20             	add    esp,0x20
10004f86:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f87: R_386_32	movingWin
10004f8b:	8b 90 68 02 00 00    	mov    edx,DWORD PTR [eax+0x268]
10004f91:	8b 80 6c 02 00 00    	mov    eax,DWORD PTR [eax+0x26c]
10004f97:	55                   	push   ebp
10004f98:	55                   	push   ebp
10004f99:	6a 00                	push   0x0
10004f9b:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
10004f9f:	01 d5                	add    ebp,edx
10004fa1:	55                   	push   ebp
10004fa2:	52                   	push   edx
10004fa3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
10004fa7:	8d 54 30 01          	lea    edx,[eax+esi*1+0x1]
10004fab:	52                   	push   edx
10004fac:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
10004fb0:	50                   	push   eax
10004fb1:	53                   	push   ebx
10004fb2:	e8 fc ff ff ff       	call   10004fb3 <NIDesktop::handleMouse(int, int, int, int)+0x8e5>	10004fb3: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004fb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004fbb:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004fbd: R_386_32	movingWin
10004fc1:	8b 13                	mov    edx,DWORD PTR [ebx]
10004fc3:	03 81 6c 02 00 00    	add    eax,DWORD PTR [ecx+0x26c]
10004fc9:	83 c4 20             	add    esp,0x20
10004fcc:	3b 82 10 04 00 00    	cmp    eax,DWORD PTR [edx+0x410]
10004fd2:	7d 1d                	jge    10004ff1 <NIDesktop::handleMouse(int, int, int, int)+0x923>
10004fd4:	8b 92 08 04 00 00    	mov    edx,DWORD PTR [edx+0x408]
10004fda:	56                   	push   esi
10004fdb:	56                   	push   esi
10004fdc:	8b 32                	mov    esi,DWORD PTR [edx]
10004fde:	6a 00                	push   0x0
10004fe0:	6a 01                	push   0x1
10004fe2:	57                   	push   edi
10004fe3:	50                   	push   eax
10004fe4:	ff b1 68 02 00 00    	push   DWORD PTR [ecx+0x268]
10004fea:	52                   	push   edx
10004feb:	ff 56 28             	call   DWORD PTR [esi+0x28]
10004fee:	83 c4 20             	add    esp,0x20
10004ff1:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
10004ff5:	0f 84 4f 03 00 00    	je     1000534a <NIDesktop::handleMouse(int, int, int, int)+0xc7c>
10004ffb:	f6 84 24 8c 01 00 00 01 	test   BYTE PTR [esp+0x18c],0x1
10005003:	0f 84 41 03 00 00    	je     1000534a <NIDesktop::handleMouse(int, int, int, int)+0xc7c>
10005009:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000500c:	39 05 00 00 00 00    	cmp    DWORD PTR ds:0x0,eax	1000500e: R_386_32	clickonWhenMouseFirstClicked
10005012:	0f 85 32 03 00 00    	jne    1000534a <NIDesktop::handleMouse(int, int, int, int)+0xc7c>
10005018:	8b 0d d8 a1 03 10    	mov    ecx,DWORD PTR ds:0x1003a1d8	1000501a: R_386_32	.bss
1000501e:	83 e1 01             	and    ecx,0x1
10005021:	0f 85 b7 01 00 00    	jne    100051de <NIDesktop::handleMouse(int, int, int, int)+0xb10>
10005027:	a1 00 00 00 00       	mov    eax,ds:0x0	10005028: R_386_32	milliTenthsSinceBoot
1000502c:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	1000502e: R_386_32	milliTenthsSinceBoot
10005032:	2b 05 c8 a1 03 10    	sub    eax,DWORD PTR ds:0x1003a1c8	10005034: R_386_32	.bss
10005038:	be b7 0b 00 00       	mov    esi,0xbb7
1000503d:	1b 15 cc a1 03 10    	sbb    edx,DWORD PTR ds:0x1003a1cc	1000503f: R_386_32	.bss
10005043:	39 c6                	cmp    esi,eax
10005045:	19 d1                	sbb    ecx,edx
10005047:	0f 82 5b 01 00 00    	jb     100051a8 <NIDesktop::handleMouse(int, int, int, int)+0xada>
1000504d:	8b 04 24             	mov    eax,DWORD PTR [esp]
10005050:	8b 90 6c 02 00 00    	mov    edx,DWORD PTR [eax+0x26c]
10005056:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
1000505c:	29 d0                	sub    eax,edx
1000505e:	83 f8 18             	cmp    eax,0x18
10005061:	0f 8f 41 01 00 00    	jg     100051a8 <NIDesktop::handleMouse(int, int, int, int)+0xada>
10005067:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000506a:	f6 80 90 02 00 00 01 	test   BYTE PTR [eax+0x290],0x1
10005071:	0f 85 31 01 00 00    	jne    100051a8 <NIDesktop::handleMouse(int, int, int, int)+0xada>
10005077:	80 b8 78 02 00 00 00 	cmp    BYTE PTR [eax+0x278],0x0
1000507e:	74 44                	je     100050c4 <NIDesktop::handleMouse(int, int, int, int)+0x9f6>
10005080:	8b 3c 24             	mov    edi,DWORD PTR [esp]
10005083:	8b 80 7c 02 00 00    	mov    eax,DWORD PTR [eax+0x27c]
10005089:	89 87 68 02 00 00    	mov    DWORD PTR [edi+0x268],eax
1000508f:	8b 87 80 02 00 00    	mov    eax,DWORD PTR [edi+0x280]
10005095:	89 87 6c 02 00 00    	mov    DWORD PTR [edi+0x26c],eax
1000509b:	8b 87 84 02 00 00    	mov    eax,DWORD PTR [edi+0x284]
100050a1:	89 87 70 02 00 00    	mov    DWORD PTR [edi+0x270],eax
100050a7:	8b 87 88 02 00 00    	mov    eax,DWORD PTR [edi+0x288]
100050ad:	89 87 74 02 00 00    	mov    DWORD PTR [edi+0x274],eax
100050b3:	50                   	push   eax
100050b4:	50                   	push   eax
100050b5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
100050b9:	53                   	push   ebx
100050ba:	e8 fc ff ff ff       	call   100050bb <NIDesktop::handleMouse(int, int, int, int)+0x9ed>	100050bb: R_386_PC32	NIDesktop::invalidateAllDueToFullscreen(NIWindow*)
100050bf:	83 c4 10             	add    esp,0x10
100050c2:	eb 60                	jmp    10005124 <NIDesktop::handleMouse(int, int, int, int)+0xa56>
100050c4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
100050c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
100050ca:	8b 80 68 02 00 00    	mov    eax,DWORD PTR [eax+0x268]
100050d0:	89 97 80 02 00 00    	mov    DWORD PTR [edi+0x280],edx
100050d6:	89 87 7c 02 00 00    	mov    DWORD PTR [edi+0x27c],eax
100050dc:	c7 87 68 02 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x268],0x0
100050e6:	c7 87 6c 02 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x26c],0x0
100050f0:	8b 87 70 02 00 00    	mov    eax,DWORD PTR [edi+0x270]
100050f6:	89 87 84 02 00 00    	mov    DWORD PTR [edi+0x284],eax
100050fc:	8b 87 74 02 00 00    	mov    eax,DWORD PTR [edi+0x274]
10005102:	89 87 88 02 00 00    	mov    DWORD PTR [edi+0x288],eax
10005108:	8b 03                	mov    eax,DWORD PTR [ebx]
1000510a:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
10005110:	89 87 70 02 00 00    	mov    DWORD PTR [edi+0x270],eax
10005116:	8b 03                	mov    eax,DWORD PTR [ebx]
10005118:	8b 80 10 04 00 00    	mov    eax,DWORD PTR [eax+0x410]
1000511e:	89 87 74 02 00 00    	mov    DWORD PTR [edi+0x274],eax
10005124:	8b 04 24             	mov    eax,DWORD PTR [esp]
10005127:	8b 3c 24             	mov    edi,DWORD PTR [esp]
1000512a:	80 b0 78 02 00 00 01 	xor    BYTE PTR [eax+0x278],0x1
10005131:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
10005135:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10005139:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000513b: R_386_32	mouseDesktop
1000513f:	83 ec 1c             	sub    esp,0x1c
10005142:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10005148:	25 ff 1f 00 00       	and    eax,0x1fff
1000514d:	66 89 4c 24 4c       	mov    WORD PTR [esp+0x4c],cx
10005152:	0d 00 80 01 80       	or     eax,0x80018000
10005157:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
1000515d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10005161:	66 89 4c 24 4e       	mov    WORD PTR [esp+0x4e],cx
10005166:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
1000516c:	66 25 00 9c          	and    ax,0x9c00
10005170:	66 81 e2 ff 03       	and    dx,0x3ff
10005175:	b9 06 00 00 00       	mov    ecx,0x6
1000517a:	09 d0                	or     eax,edx
1000517c:	66 89 44 24 48       	mov    WORD PTR [esp+0x48],ax
10005181:	8d 74 24 44          	lea    esi,[esp+0x44]
10005185:	89 e7                	mov    edi,esp
10005187:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005189:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000518d:	e8 fc ff ff ff       	call   1000518e <NIDesktop::handleMouse(int, int, int, int)+0xac0>	1000518e: R_386_PC32	NIWindow::postEvent(NiEvent)
10005192:	83 c4 14             	add    esp,0x14
10005195:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10005199:	e8 fc ff ff ff       	call   1000519a <NIDesktop::handleMouse(int, int, int, int)+0xacc>	1000519a: R_386_PC32	NIWindow::rerender()
1000519e:	89 1c 24             	mov    DWORD PTR [esp],ebx
100051a1:	e8 fc ff ff ff       	call   100051a2 <NIDesktop::handleMouse(int, int, int, int)+0xad4>	100051a2: R_386_PC32	NIDesktop::completeRefresh()
100051a6:	eb 18                	jmp    100051c0 <NIDesktop::handleMouse(int, int, int, int)+0xaf2>
100051a8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100051ab:	8b 3c 24             	mov    edi,DWORD PTR [esp]
100051ae:	8b 00                	mov    eax,DWORD PTR [eax]
100051b0:	39 38                	cmp    DWORD PTR [eax],edi
100051b2:	74 0f                	je     100051c3 <NIDesktop::handleMouse(int, int, int, int)+0xaf5>
100051b4:	50                   	push   eax
100051b5:	50                   	push   eax
100051b6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
100051ba:	53                   	push   ebx
100051bb:	e8 fc ff ff ff       	call   100051bc <NIDesktop::handleMouse(int, int, int, int)+0xaee>	100051bc: R_386_PC32	NIDesktop::raiseWindow(NIWindow*)
100051c0:	83 c4 10             	add    esp,0x10
100051c3:	a1 00 00 00 00       	mov    eax,ds:0x0	100051c4: R_386_32	milliTenthsSinceBoot
100051c8:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	100051ca: R_386_32	milliTenthsSinceBoot
100051ce:	a3 c8 a1 03 10       	mov    ds:0x1003a1c8,eax	100051cf: R_386_32	.bss
100051d3:	89 15 cc a1 03 10    	mov    DWORD PTR ds:0x1003a1cc,edx	100051d5: R_386_32	.bss
100051d9:	e9 6c 01 00 00       	jmp    1000534a <NIDesktop::handleMouse(int, int, int, int)+0xc7c>
100051de:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100051e0: R_386_32	movingWin
100051e5:	0f 85 5f 01 00 00    	jne    1000534a <NIDesktop::handleMouse(int, int, int, int)+0xc7c>
100051eb:	8b 93 18 04 00 00    	mov    edx,DWORD PTR [ebx+0x418]
100051f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
100051f4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
100051f7:	8b 80 74 02 00 00    	mov    eax,DWORD PTR [eax+0x274]
100051fd:	89 d1                	mov    ecx,edx
100051ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10005203:	2b 8f 6c 02 00 00    	sub    ecx,DWORD PTR [edi+0x26c]
10005209:	83 e8 0e             	sub    eax,0xe
1000520c:	39 c8                	cmp    eax,ecx
1000520e:	7f 4c                	jg     1000525c <NIDesktop::handleMouse(int, int, int, int)+0xb8e>
10005210:	80 bf 78 02 00 00 00 	cmp    BYTE PTR [edi+0x278],0x0
10005217:	75 43                	jne    1000525c <NIDesktop::handleMouse(int, int, int, int)+0xb8e>
10005219:	f6 87 90 02 00 00 01 	test   BYTE PTR [edi+0x290],0x1
10005220:	75 3a                	jne    1000525c <NIDesktop::handleMouse(int, int, int, int)+0xb8e>
10005222:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
10005228:	c7 83 20 04 00 00 00 04 00 00 	mov    DWORD PTR [ebx+0x420],0x400
10005232:	a3 d4 a1 03 10       	mov    ds:0x1003a1d4,eax	10005233: R_386_32	.bss
10005237:	89 3d 00 00 00 00    	mov    DWORD PTR ds:0x0,edi	10005239: R_386_32	movingWin
1000523d:	c7 05 00 00 00 00 03 00 00 00 	mov    DWORD PTR ds:0x0,0x3	1000523f: R_386_32	movingType
10005247:	50                   	push   eax
10005248:	89 15 d0 a1 03 10    	mov    DWORD PTR ds:0x1003a1d0,edx	1000524a: R_386_32	.bss
1000524e:	50                   	push   eax
1000524f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10005253:	53                   	push   ebx
10005254:	e8 fc ff ff ff       	call   10005255 <NIDesktop::handleMouse(int, int, int, int)+0xb87>	10005255: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10005259:	83 c4 10             	add    esp,0x10
1000525c:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
10005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
10005265:	8b 3c 24             	mov    edi,DWORD PTR [esp]
10005268:	8b 80 70 02 00 00    	mov    eax,DWORD PTR [eax+0x270]
1000526e:	89 d1                	mov    ecx,edx
10005270:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10005274:	2b 8f 68 02 00 00    	sub    ecx,DWORD PTR [edi+0x268]
1000527a:	83 e8 0e             	sub    eax,0xe
1000527d:	39 c8                	cmp    eax,ecx
1000527f:	7f 6d                	jg     100052ee <NIDesktop::handleMouse(int, int, int, int)+0xc20>
10005281:	80 bf 78 02 00 00 00 	cmp    BYTE PTR [edi+0x278],0x0
10005288:	75 64                	jne    100052ee <NIDesktop::handleMouse(int, int, int, int)+0xc20>
1000528a:	f6 87 90 02 00 00 01 	test   BYTE PTR [edi+0x290],0x1
10005291:	75 5b                	jne    100052ee <NIDesktop::handleMouse(int, int, int, int)+0xc20>
10005293:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10005295: R_386_32	movingWin
1000529a:	75 3c                	jne    100052d8 <NIDesktop::handleMouse(int, int, int, int)+0xc0a>
1000529c:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
100052a2:	c7 83 20 04 00 00 00 05 00 00 	mov    DWORD PTR [ebx+0x420],0x500
100052ac:	89 3d 00 00 00 00    	mov    DWORD PTR ds:0x0,edi	100052ae: R_386_32	movingWin
100052b2:	55                   	push   ebp
100052b3:	c7 05 00 00 00 00 04 00 00 00 	mov    DWORD PTR ds:0x0,0x4	100052b5: R_386_32	movingType
100052bd:	55                   	push   ebp
100052be:	89 15 d4 a1 03 10    	mov    DWORD PTR ds:0x1003a1d4,edx	100052c0: R_386_32	.bss
100052c4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
100052c8:	a3 d0 a1 03 10       	mov    ds:0x1003a1d0,eax	100052c9: R_386_32	.bss
100052cd:	53                   	push   ebx
100052ce:	e8 fc ff ff ff       	call   100052cf <NIDesktop::handleMouse(int, int, int, int)+0xc01>	100052cf: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
100052d3:	83 c4 10             	add    esp,0x10
100052d6:	eb 16                	jmp    100052ee <NIDesktop::handleMouse(int, int, int, int)+0xc20>
100052d8:	c7 05 00 00 00 00 02 00 00 00 	mov    DWORD PTR ds:0x0,0x2	100052da: R_386_32	movingType
100052e2:	c7 83 20 04 00 00 00 03 00 00 	mov    DWORD PTR [ebx+0x420],0x300
100052ec:	eb 5c                	jmp    1000534a <NIDesktop::handleMouse(int, int, int, int)+0xc7c>
100052ee:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100052f0: R_386_32	movingWin
100052f5:	75 53                	jne    1000534a <NIDesktop::handleMouse(int, int, int, int)+0xc7c>
100052f7:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
100052fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
10005300:	2b 87 6c 02 00 00    	sub    eax,DWORD PTR [edi+0x26c]
10005306:	83 f8 18             	cmp    eax,0x18
10005309:	7f 3f                	jg     1000534a <NIDesktop::handleMouse(int, int, int, int)+0xc7c>
1000530b:	80 bf 78 02 00 00 00 	cmp    BYTE PTR [edi+0x278],0x0
10005312:	75 36                	jne    1000534a <NIDesktop::handleMouse(int, int, int, int)+0xc7c>
10005314:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
1000531a:	89 3d 00 00 00 00    	mov    DWORD PTR ds:0x0,edi	1000531c: R_386_32	movingWin
10005320:	2b 97 68 02 00 00    	sub    edx,DWORD PTR [edi+0x268]
10005326:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10005328: R_386_32	movingType
10005330:	89 15 d4 a1 03 10    	mov    DWORD PTR ds:0x1003a1d4,edx	10005332: R_386_32	.bss
10005336:	57                   	push   edi
10005337:	a3 d0 a1 03 10       	mov    ds:0x1003a1d0,eax	10005338: R_386_32	.bss
1000533c:	57                   	push   edi
1000533d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10005341:	53                   	push   ebx
10005342:	e8 fc ff ff ff       	call   10005343 <NIDesktop::handleMouse(int, int, int, int)+0xc75>	10005343: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10005347:	83 c4 10             	add    esp,0x10
1000534a:	8b 03                	mov    eax,DWORD PTR [ebx]
1000534c:	83 ec 0c             	sub    esp,0xc
1000534f:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10005355:	8b 0a                	mov    ecx,DWORD PTR [edx]
10005357:	6a 00                	push   0x0
10005359:	8b 83 20 04 00 00    	mov    eax,DWORD PTR [ebx+0x420]
1000535f:	05 00 00 00 00       	add    eax,0x0	10005360: R_386_32	___mouse_data
10005364:	50                   	push   eax
10005365:	ff b3 18 04 00 00    	push   DWORD PTR [ebx+0x418]
1000536b:	ff b3 14 04 00 00    	push   DWORD PTR [ebx+0x414]
10005371:	52                   	push   edx
10005372:	ff 51 30             	call   DWORD PTR [ecx+0x30]
10005375:	8b 84 24 ac 01 00 00 	mov    eax,DWORD PTR [esp+0x1ac]
1000537c:	a3 d8 a1 03 10       	mov    ds:0x1003a1d8,eax	1000537d: R_386_32	.bss
10005381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10005385:	a3 00 00 00 00       	mov    ds:0x0,eax	10005386: R_386_32	prevClickon
1000538a:	81 c4 8c 01 00 00    	add    esp,0x18c
10005390:	5b                   	pop    ebx
10005391:	5e                   	pop    esi
10005392:	5f                   	pop    edi
10005393:	5d                   	pop    ebp
10005394:	c3                   	ret    
10005395:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10005399:	89 6c 24 28          	mov    DWORD PTR [esp+0x28],ebp
1000539d:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000539f: R_386_32	mouseDesktop
100053a3:	83 ec 0c             	sub    esp,0xc
100053a6:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
100053ac:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100053ae: R_386_32	movingWin
100053b6:	66 89 4c 24 3c       	mov    WORD PTR [esp+0x3c],cx
100053bb:	25 ff 1f 00 00       	and    eax,0x1fff
100053c0:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100053c6:	0d 00 20 00 80       	or     eax,0x80002000
100053cb:	66 89 4c 24 3e       	mov    WORD PTR [esp+0x3e],cx
100053d0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100053d4:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100053da:	66 25 00 3c          	and    ax,0x3c00
100053de:	66 81 e2 ff 03       	and    dx,0x3ff
100053e3:	89 bd 70 02 00 00    	mov    DWORD PTR [ebp+0x270],edi
100053e9:	09 d0                	or     eax,edx
100053eb:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
100053f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100053f4:	89 85 74 02 00 00    	mov    DWORD PTR [ebp+0x274],eax
100053fa:	55                   	push   ebp
100053fb:	e8 fc ff ff ff       	call   100053fc <NIDesktop::handleMouse(int, int, int, int)+0xd2e>	100053fc: R_386_PC32	NIWindow::rerender()
10005400:	5a                   	pop    edx
10005401:	59                   	pop    ecx
10005402:	55                   	push   ebp
10005403:	53                   	push   ebx
10005404:	e8 fc ff ff ff       	call   10005405 <NIDesktop::handleMouse(int, int, int, int)+0xd37>	10005405: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10005409:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10005410:	6a ff                	push   0xffffffff
10005412:	6a ff                	push   0xffffffff
10005414:	55                   	push   ebp
10005415:	53                   	push   ebx
10005416:	e8 fc ff ff ff       	call   10005417 <NIDesktop::handleMouse(int, int, int, int)+0xd49>	10005417: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
1000541b:	5e                   	pop    esi
1000541c:	b9 06 00 00 00       	mov    ecx,0x6
10005421:	8d 74 24 44          	lea    esi,[esp+0x44]
10005425:	89 e7                	mov    edi,esp
10005427:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005429:	55                   	push   ebp
1000542a:	e8 fc ff ff ff       	call   1000542b <NIDesktop::handleMouse(int, int, int, int)+0xd5d>	1000542b: R_386_PC32	NIWindow::postEvent(NiEvent)
1000542f:	c7 83 20 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x420],0x0
10005439:	e9 b0 fb ff ff       	jmp    10004fee <NIDesktop::handleMouse(int, int, int, int)+0x920>
1000543e:	89 85 68 02 00 00    	mov    DWORD PTR [ebp+0x268],eax
10005444:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005446: R_386_32	movingWin
1000544e:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10005454:	2b 05 d0 a1 03 10    	sub    eax,DWORD PTR ds:0x1003a1d0	10005456: R_386_32	.bss
1000545a:	89 85 6c 02 00 00    	mov    DWORD PTR [ebp+0x26c],eax
10005460:	50                   	push   eax
10005461:	50                   	push   eax
10005462:	55                   	push   ebp
10005463:	53                   	push   ebx
10005464:	e8 fc ff ff ff       	call   10005465 <NIDesktop::handleMouse(int, int, int, int)+0xd97>	10005465: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10005469:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
1000546d:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
10005471:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005473: R_386_32	mouseDesktop
10005477:	83 ec 0c             	sub    esp,0xc
1000547a:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10005480:	25 ff 1f 00 00       	and    eax,0x1fff
10005485:	66 89 4c 24 4c       	mov    WORD PTR [esp+0x4c],cx
1000548a:	0d 00 40 00 80       	or     eax,0x80004000
1000548f:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10005495:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10005499:	66 89 4c 24 4e       	mov    WORD PTR [esp+0x4e],cx
1000549e:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100054a4:	66 25 00 5c          	and    ax,0x5c00
100054a8:	66 81 e2 ff 03       	and    dx,0x3ff
100054ad:	b9 06 00 00 00       	mov    ecx,0x6
100054b2:	09 d0                	or     eax,edx
100054b4:	66 89 44 24 48       	mov    WORD PTR [esp+0x48],ax
100054b9:	8d 74 24 44          	lea    esi,[esp+0x44]
100054bd:	89 e7                	mov    edi,esp
100054bf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100054c1:	55                   	push   ebp
100054c2:	e8 fc ff ff ff       	call   100054c3 <NIDesktop::handleMouse(int, int, int, int)+0xdf5>	100054c3: R_386_PC32	NIWindow::postEvent(NiEvent)
100054c7:	e9 be f7 ff ff       	jmp    10004c8a <NIDesktop::handleMouse(int, int, int, int)+0x5bc>
100054cc:	85 f6                	test   esi,esi
100054ce:	0f 84 f2 00 00 00    	je     100055c6 <NIDesktop::handleMouse(int, int, int, int)+0xef8>
100054d4:	39 2d 00 00 00 00    	cmp    DWORD PTR ds:0x0,ebp	100054d6: R_386_32	clickonWhenMouseFirstClicked
100054da:	74 08                	je     100054e4 <NIDesktop::handleMouse(int, int, int, int)+0xe16>
100054dc:	39 2d 00 00 00 00    	cmp    DWORD PTR ds:0x0,ebp	100054de: R_386_32	prevClickon
100054e2:	75 6e                	jne    10005552 <NIDesktop::handleMouse(int, int, int, int)+0xe84>
100054e4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
100054e9:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
100054ed:	19 c0                	sbb    eax,eax
100054ef:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
100054f3:	81 e2 ff 1f 00 80    	and    edx,0x80001fff
100054f9:	83 c0 05             	add    eax,0x5
100054fc:	25 ff ff 03 00       	and    eax,0x3ffff
10005501:	c1 e0 0d             	shl    eax,0xd
10005504:	09 d0                	or     eax,edx
10005506:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
1000550a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000550b: R_386_32	mouseDesktop
1000550f:	80 64 24 47 7f       	and    BYTE PTR [esp+0x47],0x7f
10005514:	83 ec 1c             	sub    esp,0x1c
10005517:	8b 90 14 04 00 00    	mov    edx,DWORD PTR [eax+0x414]
1000551d:	66 89 54 24 64       	mov    WORD PTR [esp+0x64],dx
10005522:	8b 90 18 04 00 00    	mov    edx,DWORD PTR [eax+0x418]
10005528:	8b 80 1c 04 00 00    	mov    eax,DWORD PTR [eax+0x41c]
1000552e:	66 89 54 24 66       	mov    WORD PTR [esp+0x66],dx
10005533:	89 c2                	mov    edx,eax
10005535:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10005539:	66 81 e2 ff 03       	and    dx,0x3ff
1000553e:	66 25 00 fc          	and    ax,0xfc00
10005542:	09 d0                	or     eax,edx
10005544:	66 89 44 24 60       	mov    WORD PTR [esp+0x60],ax
10005549:	8d 74 24 5c          	lea    esi,[esp+0x5c]
1000554d:	e9 c7 01 00 00       	jmp    10005719 <NIDesktop::handleMouse(int, int, int, int)+0x104b>
10005552:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
10005556:	0f 84 cf 01 00 00    	je     1000572b <NIDesktop::handleMouse(int, int, int, int)+0x105d>
1000555c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10005560:	8b 3c 24             	mov    edi,DWORD PTR [esp]
10005563:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005565: R_386_32	mouseDesktop
10005569:	89 7c 24 58          	mov    DWORD PTR [esp+0x58],edi
1000556d:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10005573:	83 ec 1c             	sub    esp,0x1c
10005576:	66 89 4c 24 7c       	mov    WORD PTR [esp+0x7c],cx
1000557b:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	1000557d: R_386_32	clickonWhenMouseFirstClicked
10005581:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10005587:	25 ff 1f 00 00       	and    eax,0x1fff
1000558c:	66 89 4c 24 7e       	mov    WORD PTR [esp+0x7e],cx
10005591:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10005597:	0d 00 a0 01 00       	or     eax,0x1a000
1000559c:	66 81 e2 ff 03       	and    dx,0x3ff
100055a1:	89 44 24 78          	mov    DWORD PTR [esp+0x78],eax
100055a5:	b9 06 00 00 00       	mov    ecx,0x6
100055aa:	66 25 00 bc          	and    ax,0xbc00
100055ae:	09 d0                	or     eax,edx
100055b0:	66 89 44 24 78       	mov    WORD PTR [esp+0x78],ax
100055b5:	8d 74 24 74          	lea    esi,[esp+0x74]
100055b9:	89 e7                	mov    edi,esp
100055bb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100055bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100055c1:	e9 5d 01 00 00       	jmp    10005723 <NIDesktop::handleMouse(int, int, int, int)+0x1055>
100055c6:	85 ff                	test   edi,edi
100055c8:	0f 85 06 ff ff ff    	jne    100054d4 <NIDesktop::handleMouse(int, int, int, int)+0xe06>
100055ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100055d2:	83 e0 01             	and    eax,0x1
100055d5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
100055da:	0f 84 3e 02 00 00    	je     1000581e <NIDesktop::handleMouse(int, int, int, int)+0x1150>
100055e0:	85 c0                	test   eax,eax
100055e2:	0f 85 43 01 00 00    	jne    1000572b <NIDesktop::handleMouse(int, int, int, int)+0x105d>
100055e8:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
100055ec:	74 06                	je     100055f4 <NIDesktop::handleMouse(int, int, int, int)+0xf26>
100055ee:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	100055f0: R_386_32	clickonWhenMouseFirstClicked
100055f4:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
100055f8:	89 6c 24 70          	mov    DWORD PTR [esp+0x70],ebp
100055fc:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100055fe: R_386_32	mouseDesktop
10005602:	83 ec 1c             	sub    esp,0x1c
10005605:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
1000560b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000560d: R_386_32	desktopHasFocus
10005612:	66 89 8c 24 94 00 00 00 	mov    WORD PTR [esp+0x94],cx
1000561a:	25 ff 1f 00 00       	and    eax,0x1fff
1000561f:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10005625:	80 cc c0             	or     ah,0xc0
10005628:	66 89 8c 24 96 00 00 00 	mov    WORD PTR [esp+0x96],cx
10005630:	89 84 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],eax
10005637:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
1000563d:	66 25 00 dc          	and    ax,0xdc00
10005641:	66 81 e2 ff 03       	and    dx,0x3ff
10005646:	b9 06 00 00 00       	mov    ecx,0x6
1000564b:	09 d0                	or     eax,edx
1000564d:	66 89 84 24 90 00 00 00 	mov    WORD PTR [esp+0x90],ax
10005655:	8d b4 24 8c 00 00 00 	lea    esi,[esp+0x8c]
1000565c:	89 e7                	mov    edi,esp
1000565e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005660:	55                   	push   ebp
10005661:	e8 fc ff ff ff       	call   10005662 <NIDesktop::handleMouse(int, int, int, int)+0xf94>	10005662: R_386_PC32	NIWindow::postEvent(NiEvent)
10005666:	83 c4 20             	add    esp,0x20
10005669:	f6 85 91 02 00 00 10 	test   BYTE PTR [ebp+0x291],0x10
10005670:	0f 85 b5 00 00 00    	jne    1000572b <NIDesktop::handleMouse(int, int, int, int)+0x105d>
10005676:	8b 93 18 04 00 00    	mov    edx,DWORD PTR [ebx+0x418]
1000567c:	8b 85 6c 02 00 00    	mov    eax,DWORD PTR [ebp+0x26c]
10005682:	39 c2                	cmp    edx,eax
10005684:	0f 8e a1 00 00 00    	jle    1000572b <NIDesktop::handleMouse(int, int, int, int)+0x105d>
1000568a:	83 c0 18             	add    eax,0x18
1000568d:	39 c2                	cmp    edx,eax
1000568f:	0f 8f 96 00 00 00    	jg     1000572b <NIDesktop::handleMouse(int, int, int, int)+0x105d>
10005695:	8b 85 70 02 00 00    	mov    eax,DWORD PTR [ebp+0x270]
1000569b:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
100056a1:	03 85 68 02 00 00    	add    eax,DWORD PTR [ebp+0x268]
100056a7:	8d 48 eb             	lea    ecx,[eax-0x15]
100056aa:	39 d1                	cmp    ecx,edx
100056ac:	7f 7d                	jg     1000572b <NIDesktop::handleMouse(int, int, int, int)+0x105d>
100056ae:	83 e8 03             	sub    eax,0x3
100056b1:	39 c2                	cmp    edx,eax
100056b3:	7d 76                	jge    1000572b <NIDesktop::handleMouse(int, int, int, int)+0x105d>
100056b5:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
100056bc:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100056be: R_386_32	mouseDesktop
100056c2:	89 ac 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ebp
100056c9:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
100056cf:	25 ff 1f 00 00       	and    eax,0x1fff
100056d4:	66 89 8c 24 90 00 00 00 	mov    WORD PTR [esp+0x90],cx
100056dc:	0d 00 c0 01 00       	or     eax,0x1c000
100056e1:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100056e7:	89 84 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],eax
100056ee:	66 89 8c 24 92 00 00 00 	mov    WORD PTR [esp+0x92],cx
100056f6:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100056fc:	66 25 00 dc          	and    ax,0xdc00
10005700:	66 81 e2 ff 03       	and    dx,0x3ff
10005705:	83 ec 1c             	sub    esp,0x1c
10005708:	09 d0                	or     eax,edx
1000570a:	66 89 84 24 a8 00 00 00 	mov    WORD PTR [esp+0xa8],ax
10005712:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
10005719:	89 e7                	mov    edi,esp
1000571b:	b9 06 00 00 00       	mov    ecx,0x6
10005720:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005722:	55                   	push   ebp
10005723:	e8 fc ff ff ff       	call   10005724 <NIDesktop::handleMouse(int, int, int, int)+0x1056>	10005724: R_386_PC32	NIWindow::postEvent(NiEvent)
10005728:	83 c4 20             	add    esp,0x20
1000572b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000572f:	83 e0 02             	and    eax,0x2
10005732:	f6 84 24 8c 01 00 00 02 	test   BYTE PTR [esp+0x18c],0x2
1000573a:	74 71                	je     100057ad <NIDesktop::handleMouse(int, int, int, int)+0x10df>
1000573c:	85 c0                	test   eax,eax
1000573e:	0f 85 11 f3 ff ff    	jne    10004a55 <NIDesktop::handleMouse(int, int, int, int)+0x387>
10005744:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
1000574b:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000574d: R_386_32	mouseDesktop
10005751:	89 ac 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],ebp
10005758:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
1000575e:	25 ff 1f 00 00       	and    eax,0x1fff
10005763:	66 89 8c 24 c0 00 00 00 	mov    WORD PTR [esp+0xc0],cx
1000576b:	0d 00 40 01 00       	or     eax,0x14000
10005770:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10005776:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
1000577d:	66 89 8c 24 c2 00 00 00 	mov    WORD PTR [esp+0xc2],cx
10005785:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
1000578b:	66 25 00 5c          	and    ax,0x5c00
1000578f:	66 81 e2 ff 03       	and    dx,0x3ff
10005794:	83 ec 1c             	sub    esp,0x1c
10005797:	09 d0                	or     eax,edx
10005799:	66 89 84 24 d8 00 00 00 	mov    WORD PTR [esp+0xd8],ax
100057a1:	8d b4 24 d4 00 00 00 	lea    esi,[esp+0xd4]
100057a8:	e9 96 f2 ff ff       	jmp    10004a43 <NIDesktop::handleMouse(int, int, int, int)+0x375>
100057ad:	85 c0                	test   eax,eax
100057af:	0f 84 a0 f2 ff ff    	je     10004a55 <NIDesktop::handleMouse(int, int, int, int)+0x387>
100057b5:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
100057bc:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100057be: R_386_32	mouseDesktop
100057c2:	89 ac 24 d0 00 00 00 	mov    DWORD PTR [esp+0xd0],ebp
100057c9:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
100057cf:	25 ff 1f 00 00       	and    eax,0x1fff
100057d4:	66 89 8c 24 d8 00 00 00 	mov    WORD PTR [esp+0xd8],cx
100057dc:	0d 00 60 01 00       	or     eax,0x16000
100057e1:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100057e7:	89 84 24 d4 00 00 00 	mov    DWORD PTR [esp+0xd4],eax
100057ee:	66 89 8c 24 da 00 00 00 	mov    WORD PTR [esp+0xda],cx
100057f6:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100057fc:	66 25 00 7c          	and    ax,0x7c00
10005800:	66 81 e2 ff 03       	and    dx,0x3ff
10005805:	83 ec 1c             	sub    esp,0x1c
10005808:	09 d0                	or     eax,edx
1000580a:	66 89 84 24 f0 00 00 00 	mov    WORD PTR [esp+0xf0],ax
10005812:	8d b4 24 ec 00 00 00 	lea    esi,[esp+0xec]
10005819:	e9 25 f2 ff ff       	jmp    10004a43 <NIDesktop::handleMouse(int, int, int, int)+0x375>
1000581e:	85 c0                	test   eax,eax
10005820:	0f 84 05 ff ff ff    	je     1000572b <NIDesktop::handleMouse(int, int, int, int)+0x105d>
10005826:	8b 84 24 a4 00 00 00 	mov    eax,DWORD PTR [esp+0xa4]
1000582d:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000582f: R_386_32	mouseDesktop
10005833:	89 ac 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],ebp
1000583a:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10005840:	25 ff 1f 00 00       	and    eax,0x1fff
10005845:	66 89 8c 24 a8 00 00 00 	mov    WORD PTR [esp+0xa8],cx
1000584d:	80 cc e0             	or     ah,0xe0
10005850:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10005856:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
1000585d:	66 89 8c 24 aa 00 00 00 	mov    WORD PTR [esp+0xaa],cx
10005865:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
1000586b:	66 25 00 fc          	and    ax,0xfc00
1000586f:	66 81 e2 ff 03       	and    dx,0x3ff
10005874:	83 ec 1c             	sub    esp,0x1c
10005877:	09 d0                	or     eax,edx
10005879:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000587b: R_386_32	clickonWhenMouseFirstClicked
10005883:	66 89 84 24 c0 00 00 00 	mov    WORD PTR [esp+0xc0],ax
1000588b:	8d b4 24 bc 00 00 00 	lea    esi,[esp+0xbc]
10005892:	e9 82 fe ff ff       	jmp    10005719 <NIDesktop::handleMouse(int, int, int, int)+0x104b>

10005897 <NiHandleMouse(int, int, int, int)>:
10005897:	83 ec 18             	sub    esp,0x18
1000589a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000589e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100058a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100058a6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100058aa:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100058ac: R_386_32	mouseDesktop
100058b0:	e8 fc ff ff ff       	call   100058b1 <NiHandleMouse(int, int, int, int)+0x1a>	100058b1: R_386_PC32	NIDesktop::handleMouse(int, int, int, int)
100058b5:	83 c4 2c             	add    esp,0x2c
100058b8:	c3                   	ret    

100058b9 <drawVGAChar(int, int, int)>:
100058b9:	55                   	push   ebp
100058ba:	57                   	push   edi
100058bb:	56                   	push   esi
100058bc:	53                   	push   ebx
100058bd:	31 db                	xor    ebx,ebx
100058bf:	83 ec 1c             	sub    esp,0x1c
100058c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100058c6:	c1 e0 04             	shl    eax,0x4
100058c9:	89 04 24             	mov    DWORD PTR [esp],eax
100058cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100058d0:	c1 e0 04             	shl    eax,0x4
100058d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100058d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100058db:	c1 e0 03             	shl    eax,0x3
100058de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100058e2:	8b 04 24             	mov    eax,DWORD PTR [esp]
100058e5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
100058e9:	8a 84 18 00 00 00 00 	mov    al,BYTE PTR [eax+ebx*1+0x0]	100058ec: R_386_32	cp
100058f0:	8d 3c 19             	lea    edi,[ecx+ebx*1]
100058f3:	31 f6                	xor    esi,esi
100058f5:	84 c0                	test   al,al
100058f7:	79 22                	jns    1000591b <drawVGAChar(int, int, int)+0x62>
100058f9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100058fd:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100058ff: R_386_32	screen
10005903:	8b 0a                	mov    ecx,DWORD PTR [edx]
10005905:	6a 00                	push   0x0
10005907:	57                   	push   edi
10005908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000590c:	8d 2c 06             	lea    ebp,[esi+eax*1]
1000590f:	55                   	push   ebp
10005910:	52                   	push   edx
10005911:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10005914:	83 c4 10             	add    esp,0x10
10005917:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
1000591b:	d1 e0                	shl    eax,1
1000591d:	46                   	inc    esi
1000591e:	83 fe 08             	cmp    esi,0x8
10005921:	75 d2                	jne    100058f5 <drawVGAChar(int, int, int)+0x3c>
10005923:	43                   	inc    ebx
10005924:	83 fb 10             	cmp    ebx,0x10
10005927:	75 b9                	jne    100058e2 <drawVGAChar(int, int, int)+0x29>
10005929:	83 c4 1c             	add    esp,0x1c
1000592c:	5b                   	pop    ebx
1000592d:	5e                   	pop    esi
1000592e:	5f                   	pop    edi
1000592f:	5d                   	pop    ebp
10005930:	c3                   	ret    

10005931 <NiDisplayRAM(void*)>:
10005931:	57                   	push   edi
10005932:	56                   	push   esi
10005933:	53                   	push   ebx
10005934:	f0 ff 0d 00 00 00 00 	lock dec DWORD PTR ds:0x0	10005937: R_386_32	irqDisableCounter
1000593b:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	1000593d: R_386_32	irqDisableCounter
10005942:	75 01                	jne    10005945 <NiDisplayRAM(void*)+0x14>
10005944:	fb                   	sti    
10005945:	a1 00 00 00 00       	mov    eax,ds:0x0	10005946: R_386_32	swapBalance
1000594a:	31 f6                	xor    esi,esi
1000594c:	03 05 00 00 00 00    	add    eax,DWORD PTR ds:0x0	1000594e: R_386_32	Phys::usedPages
10005952:	6b c0 64             	imul   eax,eax,0x64
10005955:	99                   	cdq    
10005956:	f7 3d 00 00 00 00    	idiv   DWORD PTR ds:0x0	10005958: R_386_32	Phys::usablePages
1000595c:	89 c3                	mov    ebx,eax
1000595e:	31 ff                	xor    edi,edi
10005960:	a1 00 00 00 00       	mov    eax,ds:0x0	10005961: R_386_32	screen
10005965:	8b 10                	mov    edx,DWORD PTR [eax]
10005967:	68 ff ff ff 00       	push   0xffffff
1000596c:	56                   	push   esi
1000596d:	57                   	push   edi
1000596e:	47                   	inc    edi
1000596f:	50                   	push   eax
10005970:	ff 52 24             	call   DWORD PTR [edx+0x24]
10005973:	83 c4 10             	add    esp,0x10
10005976:	83 ff 68             	cmp    edi,0x68
10005979:	75 e5                	jne    10005960 <NiDisplayRAM(void*)+0x2f>
1000597b:	46                   	inc    esi
1000597c:	83 fe 10             	cmp    esi,0x10
1000597f:	75 dd                	jne    1000595e <NiDisplayRAM(void*)+0x2d>
10005981:	8d 43 63             	lea    eax,[ebx+0x63]
10005984:	3d c6 00 00 00       	cmp    eax,0xc6
10005989:	76 1b                	jbe    100059a6 <NiDisplayRAM(void*)+0x75>
1000598b:	b9 64 00 00 00       	mov    ecx,0x64
10005990:	89 d8                	mov    eax,ebx
10005992:	99                   	cdq    
10005993:	56                   	push   esi
10005994:	f7 f9                	idiv   ecx
10005996:	83 c0 30             	add    eax,0x30
10005999:	50                   	push   eax
1000599a:	6a 00                	push   0x0
1000599c:	6a 00                	push   0x0
1000599e:	e8 fc ff ff ff       	call   1000599f <NiDisplayRAM(void*)+0x6e>	1000599f: R_386_PC32	drawVGAChar(int, int, int)
100059a3:	83 c4 10             	add    esp,0x10
100059a6:	b9 0a 00 00 00       	mov    ecx,0xa
100059ab:	50                   	push   eax
100059ac:	89 d8                	mov    eax,ebx
100059ae:	99                   	cdq    
100059af:	f7 f9                	idiv   ecx
100059b1:	89 d3                	mov    ebx,edx
100059b3:	99                   	cdq    
100059b4:	83 c3 30             	add    ebx,0x30
100059b7:	f7 f9                	idiv   ecx
100059b9:	8d 42 30             	lea    eax,[edx+0x30]
100059bc:	50                   	push   eax
100059bd:	6a 00                	push   0x0
100059bf:	6a 01                	push   0x1
100059c1:	e8 fc ff ff ff       	call   100059c2 <NiDisplayRAM(void*)+0x91>	100059c2: R_386_PC32	drawVGAChar(int, int, int)
100059c6:	83 c4 0c             	add    esp,0xc
100059c9:	53                   	push   ebx
100059ca:	6a 00                	push   0x0
100059cc:	6a 02                	push   0x2
100059ce:	e8 fc ff ff ff       	call   100059cf <NiDisplayRAM(void*)+0x9e>	100059cf: R_386_PC32	drawVGAChar(int, int, int)
100059d3:	83 c4 0c             	add    esp,0xc
100059d6:	6a 25                	push   0x25
100059d8:	6a 00                	push   0x0
100059da:	6a 03                	push   0x3
100059dc:	e8 fc ff ff ff       	call   100059dd <NiDisplayRAM(void*)+0xac>	100059dd: R_386_PC32	drawVGAChar(int, int, int)
100059e1:	83 c4 0c             	add    esp,0xc
100059e4:	6a 20                	push   0x20
100059e6:	6a 00                	push   0x0
100059e8:	6a 04                	push   0x4
100059ea:	e8 fc ff ff ff       	call   100059eb <NiDisplayRAM(void*)+0xba>	100059eb: R_386_PC32	drawVGAChar(int, int, int)
100059ef:	83 c4 0c             	add    esp,0xc
100059f2:	6a 52                	push   0x52
100059f4:	6a 00                	push   0x0
100059f6:	6a 05                	push   0x5
100059f8:	e8 fc ff ff ff       	call   100059f9 <NiDisplayRAM(void*)+0xc8>	100059f9: R_386_PC32	drawVGAChar(int, int, int)
100059fd:	83 c4 0c             	add    esp,0xc
10005a00:	6a 41                	push   0x41
10005a02:	6a 00                	push   0x0
10005a04:	6a 06                	push   0x6
10005a06:	e8 fc ff ff ff       	call   10005a07 <NiDisplayRAM(void*)+0xd6>	10005a07: R_386_PC32	drawVGAChar(int, int, int)
10005a0b:	83 c4 0c             	add    esp,0xc
10005a0e:	6a 4d                	push   0x4d
10005a10:	6a 00                	push   0x0
10005a12:	6a 07                	push   0x7
10005a14:	e8 fc ff ff ff       	call   10005a15 <NiDisplayRAM(void*)+0xe4>	10005a15: R_386_PC32	drawVGAChar(int, int, int)
10005a19:	83 c4 0c             	add    esp,0xc
10005a1c:	6a 20                	push   0x20
10005a1e:	6a 00                	push   0x0
10005a20:	6a 08                	push   0x8
10005a22:	e8 fc ff ff ff       	call   10005a23 <NiDisplayRAM(void*)+0xf2>	10005a23: R_386_PC32	drawVGAChar(int, int, int)
10005a27:	83 c4 0c             	add    esp,0xc
10005a2a:	6a 75                	push   0x75
10005a2c:	6a 00                	push   0x0
10005a2e:	6a 09                	push   0x9
10005a30:	e8 fc ff ff ff       	call   10005a31 <NiDisplayRAM(void*)+0x100>	10005a31: R_386_PC32	drawVGAChar(int, int, int)
10005a35:	83 c4 0c             	add    esp,0xc
10005a38:	6a 73                	push   0x73
10005a3a:	6a 00                	push   0x0
10005a3c:	6a 0a                	push   0xa
10005a3e:	e8 fc ff ff ff       	call   10005a3f <NiDisplayRAM(void*)+0x10e>	10005a3f: R_386_PC32	drawVGAChar(int, int, int)
10005a43:	83 c4 0c             	add    esp,0xc
10005a46:	6a 65                	push   0x65
10005a48:	6a 00                	push   0x0
10005a4a:	6a 0b                	push   0xb
10005a4c:	e8 fc ff ff ff       	call   10005a4d <NiDisplayRAM(void*)+0x11c>	10005a4d: R_386_PC32	drawVGAChar(int, int, int)
10005a51:	83 c4 0c             	add    esp,0xc
10005a54:	6a 64                	push   0x64
10005a56:	6a 00                	push   0x0
10005a58:	6a 0c                	push   0xc
10005a5a:	e8 fc ff ff ff       	call   10005a5b <NiDisplayRAM(void*)+0x12a>	10005a5b: R_386_PC32	drawVGAChar(int, int, int)
10005a5f:	5a                   	pop    edx
10005a60:	59                   	pop    ecx
10005a61:	6a 00                	push   0x0
10005a63:	68 4c 1d 00 00       	push   0x1d4c
10005a68:	e8 fc ff ff ff       	call   10005a69 <NiDisplayRAM(void*)+0x138>	10005a69: R_386_PC32	milliTenthSleep(unsigned long long)
10005a6d:	83 c4 10             	add    esp,0x10
10005a70:	e9 d0 fe ff ff       	jmp    10005945 <NiDisplayRAM(void*)+0x14>

10005a75 <NiClockEventThread(void*)>:
10005a75:	57                   	push   edi
10005a76:	56                   	push   esi
10005a77:	53                   	push   ebx
10005a78:	83 ec 20             	sub    esp,0x20
10005a7b:	f0 ff 0d 00 00 00 00 	lock dec DWORD PTR ds:0x0	10005a7e: R_386_32	irqDisableCounter
10005a82:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10005a84: R_386_32	irqDisableCounter
10005a89:	75 01                	jne    10005a8c <NiClockEventThread(void*)+0x17>
10005a8b:	fb                   	sti    
10005a8c:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10005a8e: R_386_32	desktopWindowDummy
10005a92:	85 db                	test   ebx,ebx
10005a94:	74 24                	je     10005aba <NiClockEventThread(void*)+0x45>
10005a96:	8d 74 24 08          	lea    esi,[esp+0x8]
10005a9a:	6a 00                	push   0x0
10005a9c:	6a 0f                	push   0xf
10005a9e:	53                   	push   ebx
10005a9f:	56                   	push   esi
10005aa0:	e8 fc ff ff ff       	call   10005aa1 <NiClockEventThread(void*)+0x2c>	10005aa1: R_386_PC32	NiCreateEvent(NIWindow*, int, bool)
10005aa5:	b9 06 00 00 00       	mov    ecx,0x6
10005aaa:	83 ec 20             	sub    esp,0x20
10005aad:	89 e7                	mov    edi,esp
10005aaf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005ab1:	53                   	push   ebx
10005ab2:	e8 fc ff ff ff       	call   10005ab3 <NiClockEventThread(void*)+0x3e>	10005ab3: R_386_PC32	NIWindow::postEvent(NiEvent)
10005ab7:	83 c4 30             	add    esp,0x30
10005aba:	50                   	push   eax
10005abb:	50                   	push   eax
10005abc:	6a 00                	push   0x0
10005abe:	68 05 0d 00 00       	push   0xd05
10005ac3:	e8 fc ff ff ff       	call   10005ac4 <NiClockEventThread(void*)+0x4f>	10005ac4: R_386_PC32	milliTenthSleep(unsigned long long)
10005ac8:	83 c4 10             	add    esp,0x10
10005acb:	eb bf                	jmp    10005a8c <NiClockEventThread(void*)+0x17>

10005acd <monikaBsod(char*)>:
10005acd:	55                   	push   ebp
10005ace:	57                   	push   edi
10005acf:	31 ff                	xor    edi,edi
10005ad1:	56                   	push   esi
10005ad2:	53                   	push   ebx
10005ad3:	31 db                	xor    ebx,ebx
10005ad5:	83 ec 24             	sub    esp,0x24
10005ad8:	a1 00 00 00 00       	mov    eax,ds:0x0	10005ad9: R_386_32	screen
10005add:	8b 10                	mov    edx,DWORD PTR [eax]
10005adf:	68 ff ff ff 00       	push   0xffffff
10005ae4:	50                   	push   eax
10005ae5:	ff 52 40             	call   DWORD PTR [edx+0x40]
10005ae8:	83 c4 10             	add    esp,0x10
10005aeb:	8a 8b 00 00 00 00    	mov    cl,BYTE PTR [ebx+0x0]	10005aed: R_386_32	justMonika
10005af1:	8d 43 01             	lea    eax,[ebx+0x1]
10005af4:	84 c9                	test   cl,cl
10005af6:	79 0e                	jns    10005b06 <monikaBsod(char*)+0x39>
10005af8:	8d 51 80             	lea    edx,[ecx-0x80]
10005afb:	83 c3 02             	add    ebx,0x2
10005afe:	8a 88 00 00 00 00    	mov    cl,BYTE PTR [eax+0x0]	10005b00: R_386_32	justMonika
10005b04:	eb 04                	jmp    10005b0a <monikaBsod(char*)+0x3d>
10005b06:	89 c3                	mov    ebx,eax
10005b08:	b2 01                	mov    dl,0x1
10005b0a:	0f b6 c1             	movzx  eax,cl
10005b0d:	83 e1 03             	and    ecx,0x3
10005b10:	89 c6                	mov    esi,eax
10005b12:	6b c9 55             	imul   ecx,ecx,0x55
10005b15:	c1 fe 05             	sar    esi,0x5
10005b18:	c1 f8 02             	sar    eax,0x2
10005b1b:	83 e6 03             	and    esi,0x3
10005b1e:	83 e0 07             	and    eax,0x7
10005b21:	6b f6 55             	imul   esi,esi,0x55
10005b24:	6b c0 24             	imul   eax,eax,0x24
10005b27:	c1 e6 10             	shl    esi,0x10
10005b2a:	c1 e0 08             	shl    eax,0x8
10005b2d:	09 f0                	or     eax,esi
10005b2f:	31 f6                	xor    esi,esi
10005b31:	09 c8                	or     eax,ecx
10005b33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10005b37:	0f b6 c2             	movzx  eax,dl
10005b3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10005b3e:	8d 04 37             	lea    eax,[edi+esi*1]
10005b41:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10005b45:	7f 10                	jg     10005b57 <monikaBsod(char*)+0x8a>
10005b47:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
10005b4b:	81 ff ff af 04 00    	cmp    edi,0x4afff
10005b51:	7e 98                	jle    10005aeb <monikaBsod(char*)+0x1e>
10005b53:	31 db                	xor    ebx,ebx
10005b55:	eb 25                	jmp    10005b7c <monikaBsod(char*)+0xaf>
10005b57:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005b59: R_386_32	screen
10005b5d:	b9 80 02 00 00       	mov    ecx,0x280
10005b62:	8b 2a                	mov    ebp,DWORD PTR [edx]
10005b64:	46                   	inc    esi
10005b65:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10005b69:	99                   	cdq    
10005b6a:	f7 f9                	idiv   ecx
10005b6c:	50                   	push   eax
10005b6d:	52                   	push   edx
10005b6e:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005b70: R_386_32	screen
10005b74:	ff 55 24             	call   DWORD PTR [ebp+0x24]
10005b77:	83 c4 10             	add    esp,0x10
10005b7a:	eb c2                	jmp    10005b3e <monikaBsod(char*)+0x71>
10005b7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10005b80:	0f be 04 18          	movsx  eax,BYTE PTR [eax+ebx*1]
10005b84:	84 c0                	test   al,al
10005b86:	74 1d                	je     10005ba5 <monikaBsod(char*)+0xd8>
10005b88:	b9 19 00 00 00       	mov    ecx,0x19
10005b8d:	52                   	push   edx
10005b8e:	50                   	push   eax
10005b8f:	89 d8                	mov    eax,ebx
10005b91:	43                   	inc    ebx
10005b92:	99                   	cdq    
10005b93:	f7 f9                	idiv   ecx
10005b95:	83 c0 0a             	add    eax,0xa
10005b98:	42                   	inc    edx
10005b99:	50                   	push   eax
10005b9a:	52                   	push   edx
10005b9b:	e8 fc ff ff ff       	call   10005b9c <monikaBsod(char*)+0xcf>	10005b9c: R_386_PC32	drawVGAChar(int, int, int)
10005ba0:	83 c4 10             	add    esp,0x10
10005ba3:	eb d7                	jmp    10005b7c <monikaBsod(char*)+0xaf>
10005ba5:	f4                   	hlt    
10005ba6:	eb fd                	jmp    10005ba5 <monikaBsod(char*)+0xd8>

10005ba8 <NiInstallSysHooks()>:
10005ba8:	83 ec 14             	sub    esp,0x14
10005bab:	6a 00                	push   0x0
10005bad:	68 00 00 00 00       	push   0x0	10005bae: R_386_32	NiShutdownHandler(void*)
10005bb2:	e8 fc ff ff ff       	call   10005bb3 <NiInstallSysHooks()+0xb>	10005bb3: R_386_PC32	KeRegisterAtexit(void (*)(void*), void*)
10005bb7:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005bb9: R_386_32	guiPanicHandler
	10005bbd: R_386_32	monikaBsod(char*)
10005bc1:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005bc3: R_386_32	guiKeyboardHandler
	10005bc7: R_386_32	NiKeyhandler(KeyboardToken, bool*)
10005bcb:	c7 05 bc 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xbc,0x0	10005bcd: R_386_32	systemCallHandlers
	10005bd1: R_386_32	NiSystemCallHandler(regs*)
10005bd5:	83 c4 1c             	add    esp,0x1c
10005bd8:	c3                   	ret    

10005bd9 <NiLinkCommandDestroyWindow(unsigned long, NiLinkWindowStruct*)>:
10005bd9:	83 ec 18             	sub    esp,0x18
10005bdc:	68 fa 6e 00 10       	push   0x10006efa	10005bdd: R_386_32	.text
10005be1:	e8 fc ff ff ff       	call   10005be2 <NiLinkCommandDestroyWindow(unsigned long, NiLinkWindowStruct*)+0x9>	10005be2: R_386_PC32	Dbg::kprintf(char const*, ...)
10005be6:	58                   	pop    eax
10005be7:	5a                   	pop    edx
10005be8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10005bec:	ff b0 a0 00 00 00    	push   DWORD PTR [eax+0xa0]
10005bf2:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005bf4: R_386_32	desktop
10005bf8:	e8 fc ff ff ff       	call   10005bf9 <NiLinkCommandDestroyWindow(unsigned long, NiLinkWindowStruct*)+0x20>	10005bf9: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10005bfd:	59                   	pop    ecx
10005bfe:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005c00: R_386_32	desktop
10005c04:	e8 fc ff ff ff       	call   10005c05 <NiLinkCommandDestroyWindow(unsigned long, NiLinkWindowStruct*)+0x2c>	10005c05: R_386_PC32	NIDesktop::completeRefresh()
10005c09:	31 c0                	xor    eax,eax
10005c0b:	31 d2                	xor    edx,edx
10005c0d:	83 c4 1c             	add    esp,0x1c
10005c10:	c3                   	ret    

10005c11 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)>:
10005c11:	56                   	push   esi
10005c12:	53                   	push   ebx
10005c13:	83 ec 10             	sub    esp,0x10
10005c16:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10005c1a:	68 16 6f 00 10       	push   0x10006f16	10005c1b: R_386_32	.text
10005c1f:	e8 fc ff ff ff       	call   10005c20 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0xf>	10005c20: R_386_PC32	Dbg::kprintf(char const*, ...)
10005c24:	c7 04 24 94 02 00 00 	mov    DWORD PTR [esp],0x294
10005c2b:	e8 fc ff ff ff       	call   10005c2c <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x1b>	10005c2c: R_386_PC32	malloc
10005c30:	89 c6                	mov    esi,eax
10005c32:	58                   	pop    eax
10005c33:	5a                   	pop    edx
10005c34:	ff b3 b0 00 00 00    	push   DWORD PTR [ebx+0xb0]
10005c3a:	ff b3 ac 00 00 00    	push   DWORD PTR [ebx+0xac]
10005c40:	ff b3 a8 00 00 00    	push   DWORD PTR [ebx+0xa8]
10005c46:	ff b3 a4 00 00 00    	push   DWORD PTR [ebx+0xa4]
10005c4c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005c4e: R_386_32	ctxt
10005c52:	56                   	push   esi
10005c53:	e8 fc ff ff ff       	call   10005c54 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x43>	10005c54: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10005c58:	8b 83 b4 00 00 00    	mov    eax,DWORD PTR [ebx+0xb4]
10005c5e:	83 c4 18             	add    esp,0x18
10005c61:	89 86 90 02 00 00    	mov    DWORD PTR [esi+0x290],eax
10005c67:	56                   	push   esi
10005c68:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005c6a: R_386_32	desktop
10005c6e:	e8 fc ff ff ff       	call   10005c6f <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x5e>	10005c6f: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10005c73:	59                   	pop    ecx
10005c74:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005c76: R_386_32	desktop
10005c7a:	e8 fc ff ff ff       	call   10005c7b <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x6a>	10005c7b: R_386_PC32	NIDesktop::completeRefresh()
10005c7f:	89 b3 a0 00 00 00    	mov    DWORD PTR [ebx+0xa0],esi
10005c85:	31 c0                	xor    eax,eax
10005c87:	83 c4 14             	add    esp,0x14
10005c8a:	31 d2                	xor    edx,edx
10005c8c:	5b                   	pop    ebx
10005c8d:	5e                   	pop    esi
10005c8e:	c3                   	ret    

10005c8f <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)>:
10005c8f:	53                   	push   ebx
10005c90:	83 ec 14             	sub    esp,0x14
10005c93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10005c97:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
10005c9d:	53                   	push   ebx
10005c9e:	e8 fc ff ff ff       	call   10005c9f <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)+0x10>	10005c9f: R_386_PC32	NIWindow::rerender()
10005ca3:	8b 83 90 02 00 00    	mov    eax,DWORD PTR [ebx+0x290]
10005ca9:	83 c4 10             	add    esp,0x10
10005cac:	89 c2                	mov    edx,eax
10005cae:	83 e2 ef             	and    edx,0xffffffef
10005cb1:	a8 20                	test   al,0x20
10005cb3:	89 93 90 02 00 00    	mov    DWORD PTR [ebx+0x290],edx
10005cb9:	74 0c                	je     10005cc7 <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)+0x38>
10005cbb:	83 ec 0c             	sub    esp,0xc
10005cbe:	53                   	push   ebx
10005cbf:	e8 fc ff ff ff       	call   10005cc0 <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)+0x31>	10005cc0: R_386_PC32	NIWindow::drawResizeMarker()
10005cc4:	83 c4 10             	add    esp,0x10
10005cc7:	83 ec 0c             	sub    esp,0xc
10005cca:	6a 00                	push   0x0
10005ccc:	6a ff                	push   0xffffffff
10005cce:	6a ff                	push   0xffffffff
10005cd0:	53                   	push   ebx
10005cd1:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005cd3: R_386_32	desktop
10005cd7:	e8 fc ff ff ff       	call   10005cd8 <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)+0x49>	10005cd8: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
10005cdc:	31 c0                	xor    eax,eax
10005cde:	31 d2                	xor    edx,edx
10005ce0:	83 c4 28             	add    esp,0x28
10005ce3:	5b                   	pop    ebx
10005ce4:	c3                   	ret    

10005ce5 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)>:
10005ce5:	55                   	push   ebp
10005ce6:	57                   	push   edi
10005ce7:	56                   	push   esi
10005ce8:	53                   	push   ebx
10005ce9:	83 ec 0c             	sub    esp,0xc
10005cec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
10005cf0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
10005cf4:	8d 41 ff             	lea    eax,[ecx-0x1]
10005cf7:	3d fe 0f 00 00       	cmp    eax,0xffe
10005cfc:	76 75                	jbe    10005d73 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0x8e>
10005cfe:	a1 00 00 00 00       	mov    eax,ds:0x0	10005cff: R_386_32	desktop
10005d03:	85 c9                	test   ecx,ecx
10005d05:	8b b8 08 04 00 00    	mov    edi,DWORD PTR [eax+0x408]
10005d0b:	75 1b                	jne    10005d28 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0x43>
10005d0d:	8b 00                	mov    eax,DWORD PTR [eax]
10005d0f:	8b 88 0c 04 00 00    	mov    ecx,DWORD PTR [eax+0x40c]
10005d15:	0f af 88 10 04 00 00 	imul   ecx,DWORD PTR [eax+0x410]
10005d1c:	c1 e1 02             	shl    ecx,0x2
10005d1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10005d21:	31 c0                	xor    eax,eax
10005d23:	e9 9d 00 00 00       	jmp    10005dc5 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xe0>
10005d28:	8b 19                	mov    ebx,DWORD PTR [ecx]
10005d2a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
10005d2d:	8b 69 08             	mov    ebp,DWORD PTR [ecx+0x8]
10005d30:	8b 51 0c             	mov    edx,DWORD PTR [ecx+0xc]
10005d33:	8d 3c 9f             	lea    edi,[edi+ebx*4]
10005d36:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10005d3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10005d3f:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	10005d41: R_386_32	desktop
10005d45:	8b 0e                	mov    ecx,DWORD PTR [esi]
10005d47:	01 d8                	add    eax,ebx
10005d49:	8b 89 0c 04 00 00    	mov    ecx,DWORD PTR [ecx+0x40c]
10005d4f:	57                   	push   edi
10005d50:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10005d54:	57                   	push   edi
10005d55:	6a 00                	push   0x0
10005d57:	52                   	push   edx
10005d58:	99                   	cdq    
10005d59:	55                   	push   ebp
10005d5a:	f7 f9                	idiv   ecx
10005d5c:	50                   	push   eax
10005d5d:	89 d8                	mov    eax,ebx
10005d5f:	99                   	cdq    
10005d60:	f7 f9                	idiv   ecx
10005d62:	50                   	push   eax
10005d63:	56                   	push   esi
10005d64:	e8 fc ff ff ff       	call   10005d65 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0x80>	10005d65: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10005d69:	83 c4 20             	add    esp,0x20
10005d6c:	b8 04 00 00 00       	mov    eax,0x4
10005d71:	eb 52                	jmp    10005dc5 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xe0>
10005d73:	83 f9 01             	cmp    ecx,0x1
10005d76:	75 2d                	jne    10005da5 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xc0>
10005d78:	a1 00 00 00 00       	mov    eax,ds:0x0	10005d79: R_386_32	desktop
10005d7d:	b9 00 02 00 00       	mov    ecx,0x200
10005d82:	8d b8 08 02 00 00    	lea    edi,[eax+0x208]
10005d88:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10005d8a:	a1 00 00 00 00       	mov    eax,ds:0x0	10005d8b: R_386_32	desktop
10005d8f:	8b 00                	mov    eax,DWORD PTR [eax]
10005d91:	8b 88 0c 04 00 00    	mov    ecx,DWORD PTR [eax+0x40c]
10005d97:	c1 e1 10             	shl    ecx,0x10
10005d9a:	0b 88 10 04 00 00    	or     ecx,DWORD PTR [eax+0x410]
10005da0:	89 c8                	mov    eax,ecx
10005da2:	99                   	cdq    
10005da3:	eb 22                	jmp    10005dc7 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xe2>
10005da5:	83 c8 ff             	or     eax,0xffffffff
10005da8:	83 f9 02             	cmp    ecx,0x2
10005dab:	89 c2                	mov    edx,eax
10005dad:	75 18                	jne    10005dc7 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xe2>
10005daf:	83 ec 0c             	sub    esp,0xc
10005db2:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005db4: R_386_32	desktop
10005db8:	e8 fc ff ff ff       	call   10005db9 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xd4>	10005db9: R_386_PC32	NIDesktop::completeRefresh()
10005dbd:	83 c4 10             	add    esp,0x10
10005dc0:	b8 02 00 00 00       	mov    eax,0x2
10005dc5:	31 d2                	xor    edx,edx
10005dc7:	83 c4 0c             	add    esp,0xc
10005dca:	5b                   	pop    ebx
10005dcb:	5e                   	pop    esi
10005dcc:	5f                   	pop    edi
10005dcd:	5d                   	pop    ebp
10005dce:	c3                   	ret    

10005dcf <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)>:
10005dcf:	55                   	push   ebp
10005dd0:	57                   	push   edi
10005dd1:	56                   	push   esi
10005dd2:	53                   	push   ebx
10005dd3:	81 ec 28 08 00 00    	sub    esp,0x828
10005dd9:	8b bc 24 3c 08 00 00 	mov    edi,DWORD PTR [esp+0x83c]
10005de0:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
10005de7:	0f b7 f7             	movzx  esi,di
10005dea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10005dee:	c1 ef 10             	shr    edi,0x10
10005df1:	8b 84 24 40 08 00 00 	mov    eax,DWORD PTR [esp+0x840]
10005df8:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
10005dfe:	53                   	push   ebx
10005dff:	e8 fc ff ff ff       	call   10005e00 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x31>	10005e00: R_386_PC32	NIWindow::request()
10005e04:	83 c4 10             	add    esp,0x10
10005e07:	81 fe ff ff 00 00    	cmp    esi,0xffff
10005e0d:	75 02                	jne    10005e11 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x42>
10005e0f:	31 f6                	xor    esi,esi
10005e11:	81 ff ff ff 00 00    	cmp    edi,0xffff
10005e17:	74 05                	je     10005e1e <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x4f>
10005e19:	89 3c 24             	mov    DWORD PTR [esp],edi
10005e1c:	eb 09                	jmp    10005e27 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x58>
10005e1e:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10005e24:	89 04 24             	mov    DWORD PTR [esp],eax
10005e27:	8b ab 70 02 00 00    	mov    ebp,DWORD PTR [ebx+0x270]
10005e2d:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
10005e31:	0f af ee             	imul   ebp,esi
10005e34:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10005e38:	39 0c 24             	cmp    DWORD PTR [esp],ecx
10005e3b:	7e 73                	jle    10005eb0 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0xe1>
10005e3d:	8d 84 24 10 08 00 00 	lea    eax,[esp+0x810]
10005e44:	8d 0c 08             	lea    ecx,[eax+ecx*1]
10005e47:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
10005e4d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10005e51:	01 c8                	add    eax,ecx
10005e53:	c6 80 00 f8 ff ff 00 	mov    BYTE PTR [eax-0x800],0x0
10005e5a:	89 e8                	mov    eax,ebp
10005e5c:	89 c1                	mov    ecx,eax
10005e5e:	29 e9                	sub    ecx,ebp
10005e60:	39 8b 70 02 00 00    	cmp    DWORD PTR [ebx+0x270],ecx
10005e66:	7e 40                	jle    10005ea8 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0xd9>
10005e68:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10005e6f:	89 d7                	mov    edi,edx
10005e71:	8b 94 24 34 08 00 00 	mov    edx,DWORD PTR [esp+0x834]
10005e78:	8b 8a b8 00 00 00    	mov    ecx,DWORD PTR [edx+0xb8]
10005e7e:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
10005e81:	83 f9 ff             	cmp    ecx,0xffffffff
10005e84:	74 1f                	je     10005ea5 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0xd6>
10005e86:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10005e89:	39 0c 82             	cmp    DWORD PTR [edx+eax*4],ecx
10005e8c:	74 11                	je     10005e9f <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0xd0>
10005e8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10005e92:	03 93 6c 02 00 00    	add    edx,DWORD PTR [ebx+0x26c]
10005e98:	c6 82 00 f8 ff ff 01 	mov    BYTE PTR [edx-0x800],0x1
10005e9f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10005ea2:	89 0c 3a             	mov    DWORD PTR [edx+edi*1],ecx
10005ea5:	40                   	inc    eax
10005ea6:	eb b4                	jmp    10005e5c <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x8d>
10005ea8:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
10005eac:	89 c5                	mov    ebp,eax
10005eae:	eb 84                	jmp    10005e34 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x65>
10005eb0:	8b 83 90 02 00 00    	mov    eax,DWORD PTR [ebx+0x290]
10005eb6:	89 c2                	mov    edx,eax
10005eb8:	83 e2 ef             	and    edx,0xffffffef
10005ebb:	a8 20                	test   al,0x20
10005ebd:	89 93 90 02 00 00    	mov    DWORD PTR [ebx+0x290],edx
10005ec3:	74 0c                	je     10005ed1 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x102>
10005ec5:	83 ec 0c             	sub    esp,0xc
10005ec8:	53                   	push   ebx
10005ec9:	e8 fc ff ff ff       	call   10005eca <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0xfb>	10005eca: R_386_PC32	NIWindow::drawResizeMarker()
10005ece:	83 c4 10             	add    esp,0x10
10005ed1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
10005ed6:	74 1c                	je     10005ef4 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x125>
10005ed8:	83 ec 0c             	sub    esp,0xc
10005edb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10005edf:	50                   	push   eax
10005ee0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10005ee4:	56                   	push   esi
10005ee5:	53                   	push   ebx
10005ee6:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005ee8: R_386_32	desktop
10005eec:	e8 fc ff ff ff       	call   10005eed <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x11e>	10005eed: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
10005ef1:	83 c4 20             	add    esp,0x20
10005ef4:	81 c4 1c 08 00 00    	add    esp,0x81c
10005efa:	31 c0                	xor    eax,eax
10005efc:	5b                   	pop    ebx
10005efd:	31 d2                	xor    edx,edx
10005eff:	5e                   	pop    esi
10005f00:	5f                   	pop    edi
10005f01:	5d                   	pop    ebp
10005f02:	c3                   	ret    

10005f03 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10005f03:	83 ec 10             	sub    esp,0x10
10005f06:	6a 00                	push   0x0
10005f08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10005f0c:	6a ff                	push   0xffffffff
10005f0e:	e8 fc ff ff ff       	call   10005f0f <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0xc>	10005f0f: R_386_PC32	NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)
10005f13:	58                   	pop    eax
10005f14:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005f16: R_386_32	desktop
10005f1a:	e8 fc ff ff ff       	call   10005f1b <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x18>	10005f1b: R_386_PC32	NIDesktop::completeRefresh()
10005f1f:	31 c0                	xor    eax,eax
10005f21:	31 d2                	xor    edx,edx
10005f23:	83 c4 1c             	add    esp,0x1c
10005f26:	c3                   	ret    

10005f27 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10005f27:	53                   	push   ebx
10005f28:	83 ec 14             	sub    esp,0x14
10005f2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10005f2f:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
10005f35:	53                   	push   ebx
10005f36:	e8 fc ff ff ff       	call   10005f37 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x10>	10005f37: R_386_PC32	NIWindow::request()
10005f3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
10005f3e:	e8 fc ff ff ff       	call   10005f3f <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x18>	10005f3f: R_386_PC32	NIWindow::drawBasicWindow()
10005f43:	31 c0                	xor    eax,eax
10005f45:	31 d2                	xor    edx,edx
10005f47:	83 c4 18             	add    esp,0x18
10005f4a:	5b                   	pop    ebx
10005f4b:	c3                   	ret    

10005f4c <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)>:
10005f4c:	55                   	push   ebp
10005f4d:	57                   	push   edi
10005f4e:	56                   	push   esi
10005f4f:	53                   	push   ebx
10005f50:	83 ec 38             	sub    esp,0x38
10005f53:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
10005f57:	8b 9d a0 00 00 00    	mov    ebx,DWORD PTR [ebp+0xa0]
10005f5d:	53                   	push   ebx
10005f5e:	e8 fc ff ff ff       	call   10005f5f <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x13>	10005f5f: R_386_PC32	NIWindow::getEventCount()
10005f63:	83 c4 10             	add    esp,0x10
10005f66:	85 c0                	test   eax,eax
10005f68:	74 54                	je     10005fbe <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x72>
10005f6a:	89 e6                	mov    esi,esp
10005f6c:	8d bd c0 00 00 00    	lea    edi,[ebp+0xc0]
10005f72:	50                   	push   eax
10005f73:	50                   	push   eax
10005f74:	53                   	push   ebx
10005f75:	56                   	push   esi
10005f76:	e8 fc ff ff ff       	call   10005f77 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x2b>	10005f77: R_386_PC32	NIWindow::grabEvent()
10005f7b:	b9 06 00 00 00       	mov    ecx,0x6
10005f80:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005f82:	8b 83 68 02 00 00    	mov    eax,DWORD PTR [ebx+0x268]
10005f88:	89 85 a4 00 00 00    	mov    DWORD PTR [ebp+0xa4],eax
10005f8e:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
10005f94:	89 85 a8 00 00 00    	mov    DWORD PTR [ebp+0xa8],eax
10005f9a:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10005fa0:	89 85 ac 00 00 00    	mov    DWORD PTR [ebp+0xac],eax
10005fa6:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10005fac:	89 85 b0 00 00 00    	mov    DWORD PTR [ebp+0xb0],eax
10005fb2:	53                   	push   ebx
10005fb3:	e8 fc ff ff ff       	call   10005fb4 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x68>	10005fb4: R_386_PC32	NIWindow::getEventCount()
10005fb8:	83 c4 10             	add    esp,0x10
10005fbb:	99                   	cdq    
10005fbc:	eb 05                	jmp    10005fc3 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x77>
10005fbe:	83 c8 ff             	or     eax,0xffffffff
10005fc1:	89 c2                	mov    edx,eax
10005fc3:	83 c4 2c             	add    esp,0x2c
10005fc6:	5b                   	pop    ebx
10005fc7:	5e                   	pop    esi
10005fc8:	5f                   	pop    edi
10005fc9:	5d                   	pop    ebp
10005fca:	c3                   	ret    

10005fcb <NiLinkCommandUpsync(unsigned long, NiLinkWindowStruct*)>:
10005fcb:	83 ec 18             	sub    esp,0x18
10005fce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10005fd2:	8b 82 a0 00 00 00    	mov    eax,DWORD PTR [edx+0xa0]
10005fd8:	8b 8a a4 00 00 00    	mov    ecx,DWORD PTR [edx+0xa4]
10005fde:	89 88 68 02 00 00    	mov    DWORD PTR [eax+0x268],ecx
10005fe4:	8b 8a a8 00 00 00    	mov    ecx,DWORD PTR [edx+0xa8]
10005fea:	89 88 6c 02 00 00    	mov    DWORD PTR [eax+0x26c],ecx
10005ff0:	8b 8a ac 00 00 00    	mov    ecx,DWORD PTR [edx+0xac]
10005ff6:	89 88 70 02 00 00    	mov    DWORD PTR [eax+0x270],ecx
10005ffc:	8b 92 b0 00 00 00    	mov    edx,DWORD PTR [edx+0xb0]
10006002:	89 90 74 02 00 00    	mov    DWORD PTR [eax+0x274],edx
10006008:	50                   	push   eax
10006009:	e8 fc ff ff ff       	call   1000600a <NiLinkCommandUpsync(unsigned long, NiLinkWindowStruct*)+0x3f>	1000600a: R_386_PC32	NIWindow::rerender()
1000600e:	31 c0                	xor    eax,eax
10006010:	31 d2                	xor    edx,edx
10006012:	83 c4 1c             	add    esp,0x1c
10006015:	c3                   	ret    

10006016 <NiLinkCommandReadFlags(unsigned long, NiLinkWindowStruct*)>:
10006016:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000601a:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
10006020:	8b 8a 90 02 00 00    	mov    ecx,DWORD PTR [edx+0x290]
10006026:	89 88 b4 00 00 00    	mov    DWORD PTR [eax+0xb4],ecx
1000602c:	8b 8a 68 02 00 00    	mov    ecx,DWORD PTR [edx+0x268]
10006032:	89 88 a4 00 00 00    	mov    DWORD PTR [eax+0xa4],ecx
10006038:	8b 8a 6c 02 00 00    	mov    ecx,DWORD PTR [edx+0x26c]
1000603e:	89 88 a8 00 00 00    	mov    DWORD PTR [eax+0xa8],ecx
10006044:	8b 8a 70 02 00 00    	mov    ecx,DWORD PTR [edx+0x270]
1000604a:	89 88 ac 00 00 00    	mov    DWORD PTR [eax+0xac],ecx
10006050:	8b 92 74 02 00 00    	mov    edx,DWORD PTR [edx+0x274]
10006056:	89 90 b0 00 00 00    	mov    DWORD PTR [eax+0xb0],edx
1000605c:	31 c0                	xor    eax,eax
1000605e:	31 d2                	xor    edx,edx
10006060:	c3                   	ret    

10006061 <NiLinkCommandUpdateFlags(unsigned long, NiLinkWindowStruct*)>:
10006061:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10006065:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
1000606b:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [eax+0xb4]
10006071:	89 82 90 02 00 00    	mov    DWORD PTR [edx+0x290],eax
10006077:	31 c0                	xor    eax,eax
10006079:	31 d2                	xor    edx,edx
1000607b:	c3                   	ret    

1000607c <NiLinkCommandBeTheDesktop(unsigned long, unsigned char*)>:
1000607c:	31 d2                	xor    edx,edx
1000607e:	b8 01 00 00 00       	mov    eax,0x1
10006083:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10006085: R_386_32	desktopWindowDummy
1000608a:	75 0d                	jne    10006099 <NiLinkCommandBeTheDesktop(unsigned long, unsigned char*)+0x1d>
1000608c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10006090:	31 d2                	xor    edx,edx
10006092:	a3 00 00 00 00       	mov    ds:0x0,eax	10006093: R_386_32	desktopWindowDummy
10006097:	31 c0                	xor    eax,eax
10006099:	c3                   	ret    

1000609a <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)>:
1000609a:	53                   	push   ebx
1000609b:	83 ec 08             	sub    esp,0x8
1000609e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100060a2:	a1 00 00 00 00       	mov    eax,ds:0x0	100060a3: R_386_32	desktop
100060a7:	85 d2                	test   edx,edx
100060a9:	75 0c                	jne    100060b7 <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x1d>
100060ab:	c7 80 20 04 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x420],0x0
100060b5:	eb 20                	jmp    100060d7 <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x3d>
100060b7:	83 fa 01             	cmp    edx,0x1
100060ba:	75 0c                	jne    100060c8 <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x2e>
100060bc:	c7 80 20 04 00 00 00 02 00 00 	mov    DWORD PTR [eax+0x420],0x200
100060c6:	eb 0f                	jmp    100060d7 <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x3d>
100060c8:	83 fa 02             	cmp    edx,0x2
100060cb:	75 0a                	jne    100060d7 <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x3d>
100060cd:	c7 80 20 04 00 00 00 01 00 00 	mov    DWORD PTR [eax+0x420],0x100
100060d7:	8b 88 14 04 00 00    	mov    ecx,DWORD PTR [eax+0x414]
100060dd:	8b 90 18 04 00 00    	mov    edx,DWORD PTR [eax+0x418]
100060e3:	53                   	push   ebx
100060e4:	53                   	push   ebx
100060e5:	8d 59 20             	lea    ebx,[ecx+0x20]
100060e8:	6a 00                	push   0x0
100060ea:	53                   	push   ebx
100060eb:	51                   	push   ecx
100060ec:	8d 4a 20             	lea    ecx,[edx+0x20]
100060ef:	51                   	push   ecx
100060f0:	52                   	push   edx
100060f1:	50                   	push   eax
100060f2:	e8 fc ff ff ff       	call   100060f3 <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x59>	100060f3: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
100060f7:	83 c4 14             	add    esp,0x14
100060fa:	a1 00 00 00 00       	mov    eax,ds:0x0	100060fb: R_386_32	desktop
100060ff:	8b 10                	mov    edx,DWORD PTR [eax]
10006101:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
10006107:	8b 19                	mov    ebx,DWORD PTR [ecx]
10006109:	6a 00                	push   0x0
1000610b:	8b 90 20 04 00 00    	mov    edx,DWORD PTR [eax+0x420]
10006111:	81 c2 00 00 00 00    	add    edx,0x0	10006113: R_386_32	___mouse_data
10006117:	52                   	push   edx
10006118:	ff b0 18 04 00 00    	push   DWORD PTR [eax+0x418]
1000611e:	ff b0 14 04 00 00    	push   DWORD PTR [eax+0x414]
10006124:	51                   	push   ecx
10006125:	ff 53 30             	call   DWORD PTR [ebx+0x30]
10006128:	31 c0                	xor    eax,eax
1000612a:	31 d2                	xor    edx,edx
1000612c:	83 c4 28             	add    esp,0x28
1000612f:	5b                   	pop    ebx
10006130:	c3                   	ret    

10006131 <NiSystemCallHandler(regs*)>:
10006131:	53                   	push   ebx
10006132:	83 ec 08             	sub    esp,0x8
10006135:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10006139:	fa                   	cli    
1000613a:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	1000613c: R_386_32	irqDisableCounter
10006140:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
10006145:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
10006148:	80 88 76 02 00 00 80 	or     BYTE PTR [eax+0x276],0x80
1000614f:	8b 59 20             	mov    ebx,DWORD PTR [ecx+0x20]
10006152:	83 fb 08             	cmp    ebx,0x8
10006155:	0f 84 02 01 00 00    	je     1000625d <NiSystemCallHandler(regs*)+0x12c>
1000615b:	77 4f                	ja     100061ac <NiSystemCallHandler(regs*)+0x7b>
1000615d:	83 fb 04             	cmp    ebx,0x4
10006160:	0f 84 c2 00 00 00    	je     10006228 <NiSystemCallHandler(regs*)+0xf7>
10006166:	77 13                	ja     1000617b <NiSystemCallHandler(regs*)+0x4a>
10006168:	85 db                	test   ebx,ebx
1000616a:	0f 84 94 00 00 00    	je     10006204 <NiSystemCallHandler(regs*)+0xd3>
10006170:	83 fb 03             	cmp    ebx,0x3
10006173:	0f 84 9d 00 00 00    	je     10006216 <NiSystemCallHandler(regs*)+0xe5>
10006179:	eb 7f                	jmp    100061fa <NiSystemCallHandler(regs*)+0xc9>
1000617b:	83 fb 06             	cmp    ebx,0x6
1000617e:	0f 84 b6 00 00 00    	je     1000623a <NiSystemCallHandler(regs*)+0x109>
10006184:	8b 41 24             	mov    eax,DWORD PTR [ecx+0x24]
10006187:	0f 87 bc 00 00 00    	ja     10006249 <NiSystemCallHandler(regs*)+0x118>
1000618d:	83 ec 0c             	sub    esp,0xc
10006190:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
10006196:	53                   	push   ebx
10006197:	e8 fc ff ff ff       	call   10006198 <NiSystemCallHandler(regs*)+0x67>	10006198: R_386_PC32	NIWindow::request()
1000619c:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000619f:	e8 fc ff ff ff       	call   100061a0 <NiSystemCallHandler(regs*)+0x6f>	100061a0: R_386_PC32	NIWindow::drawBasicWindow()
100061a4:	83 c4 10             	add    esp,0x10
100061a7:	e9 f7 00 00 00       	jmp    100062a3 <NiSystemCallHandler(regs*)+0x172>
100061ac:	83 fb 0c             	cmp    ebx,0xc
100061af:	0f 84 d6 00 00 00    	je     1000628b <NiSystemCallHandler(regs*)+0x15a>
100061b5:	77 21                	ja     100061d8 <NiSystemCallHandler(regs*)+0xa7>
100061b7:	83 fb 0a             	cmp    ebx,0xa
100061ba:	0f 84 ac 00 00 00    	je     1000626c <NiSystemCallHandler(regs*)+0x13b>
100061c0:	0f 87 b6 00 00 00    	ja     1000627c <NiSystemCallHandler(regs*)+0x14b>
100061c6:	50                   	push   eax
100061c7:	50                   	push   eax
100061c8:	ff 71 24             	push   DWORD PTR [ecx+0x24]
100061cb:	ff 71 28             	push   DWORD PTR [ecx+0x28]
100061ce:	e8 fc ff ff ff       	call   100061cf <NiSystemCallHandler(regs*)+0x9e>	100061cf: R_386_PC32	NiLinkCommandReadFlags(unsigned long, NiLinkWindowStruct*)
100061d3:	e9 ed 00 00 00       	jmp    100062c5 <NiSystemCallHandler(regs*)+0x194>
100061d8:	83 fb 0e             	cmp    ebx,0xe
100061db:	0f 84 d7 00 00 00    	je     100062b8 <NiSystemCallHandler(regs*)+0x187>
100061e1:	0f 82 c2 00 00 00    	jb     100062a9 <NiSystemCallHandler(regs*)+0x178>
100061e7:	31 d2                	xor    edx,edx
100061e9:	b8 04 00 00 00       	mov    eax,0x4
100061ee:	81 fb 96 78 34 a5    	cmp    ebx,0xa5347896
100061f4:	0f 84 ce 00 00 00    	je     100062c8 <NiSystemCallHandler(regs*)+0x197>
100061fa:	83 c8 ff             	or     eax,0xffffffff
100061fd:	89 c2                	mov    edx,eax
100061ff:	e9 c4 00 00 00       	jmp    100062c8 <NiSystemCallHandler(regs*)+0x197>
10006204:	50                   	push   eax
10006205:	50                   	push   eax
10006206:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10006209:	ff 71 28             	push   DWORD PTR [ecx+0x28]
1000620c:	e8 fc ff ff ff       	call   1000620d <NiSystemCallHandler(regs*)+0xdc>	1000620d: R_386_PC32	NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)
10006211:	e9 af 00 00 00       	jmp    100062c5 <NiSystemCallHandler(regs*)+0x194>
10006216:	50                   	push   eax
10006217:	50                   	push   eax
10006218:	ff 71 24             	push   DWORD PTR [ecx+0x24]
1000621b:	ff 71 28             	push   DWORD PTR [ecx+0x28]
1000621e:	e8 fc ff ff ff       	call   1000621f <NiSystemCallHandler(regs*)+0xee>	1000621f: R_386_PC32	NiLinkCommandDestroyWindow(unsigned long, NiLinkWindowStruct*)
10006223:	e9 9d 00 00 00       	jmp    100062c5 <NiSystemCallHandler(regs*)+0x194>
10006228:	53                   	push   ebx
10006229:	53                   	push   ebx
1000622a:	ff 71 24             	push   DWORD PTR [ecx+0x24]
1000622d:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10006230:	e8 fc ff ff ff       	call   10006231 <NiSystemCallHandler(regs*)+0x100>	10006231: R_386_PC32	NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)
10006235:	e9 8b 00 00 00       	jmp    100062c5 <NiSystemCallHandler(regs*)+0x194>
1000623a:	52                   	push   edx
1000623b:	52                   	push   edx
1000623c:	ff 71 24             	push   DWORD PTR [ecx+0x24]
1000623f:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10006242:	e8 fc ff ff ff       	call   10006243 <NiSystemCallHandler(regs*)+0x112>	10006243: R_386_PC32	NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)
10006247:	eb 7c                	jmp    100062c5 <NiSystemCallHandler(regs*)+0x194>
10006249:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
1000624f:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [eax+0xb4]
10006255:	89 82 90 02 00 00    	mov    DWORD PTR [edx+0x290],eax
1000625b:	eb 46                	jmp    100062a3 <NiSystemCallHandler(regs*)+0x172>
1000625d:	50                   	push   eax
1000625e:	50                   	push   eax
1000625f:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10006262:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10006265:	e8 fc ff ff ff       	call   10006266 <NiSystemCallHandler(regs*)+0x135>	10006266: R_386_PC32	NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)
1000626a:	eb 59                	jmp    100062c5 <NiSystemCallHandler(regs*)+0x194>
1000626c:	50                   	push   eax
1000626d:	6a 01                	push   0x1
1000626f:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10006272:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10006275:	e8 fc ff ff ff       	call   10006276 <NiSystemCallHandler(regs*)+0x145>	10006276: R_386_PC32	NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)
1000627a:	eb 49                	jmp    100062c5 <NiSystemCallHandler(regs*)+0x194>
1000627c:	50                   	push   eax
1000627d:	50                   	push   eax
1000627e:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10006281:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10006284:	e8 fc ff ff ff       	call   10006285 <NiSystemCallHandler(regs*)+0x154>	10006285: R_386_PC32	NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)
10006289:	eb 3a                	jmp    100062c5 <NiSystemCallHandler(regs*)+0x194>
1000628b:	31 d2                	xor    edx,edx
1000628d:	b8 01 00 00 00       	mov    eax,0x1
10006292:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10006294: R_386_32	desktopWindowDummy
10006299:	75 2d                	jne    100062c8 <NiSystemCallHandler(regs*)+0x197>
1000629b:	8b 41 24             	mov    eax,DWORD PTR [ecx+0x24]
1000629e:	a3 00 00 00 00       	mov    ds:0x0,eax	1000629f: R_386_32	desktopWindowDummy
100062a3:	31 c0                	xor    eax,eax
100062a5:	31 d2                	xor    edx,edx
100062a7:	eb 1f                	jmp    100062c8 <NiSystemCallHandler(regs*)+0x197>
100062a9:	50                   	push   eax
100062aa:	50                   	push   eax
100062ab:	ff 71 24             	push   DWORD PTR [ecx+0x24]
100062ae:	ff 71 28             	push   DWORD PTR [ecx+0x28]
100062b1:	e8 fc ff ff ff       	call   100062b2 <NiSystemCallHandler(regs*)+0x181>	100062b2: R_386_PC32	NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)
100062b6:	eb 0d                	jmp    100062c5 <NiSystemCallHandler(regs*)+0x194>
100062b8:	50                   	push   eax
100062b9:	50                   	push   eax
100062ba:	ff 71 24             	push   DWORD PTR [ecx+0x24]
100062bd:	ff 71 28             	push   DWORD PTR [ecx+0x28]
100062c0:	e8 fc ff ff ff       	call   100062c1 <NiSystemCallHandler(regs*)+0x190>	100062c1: R_386_PC32	NiLinkCommandUpsync(unsigned long, NiLinkWindowStruct*)
100062c5:	83 c4 10             	add    esp,0x10
100062c8:	f0 ff 0d 00 00 00 00 	lock dec DWORD PTR ds:0x0	100062cb: R_386_32	irqDisableCounter
100062cf:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100062d1: R_386_32	irqDisableCounter
100062d6:	75 01                	jne    100062d9 <NiSystemCallHandler(regs*)+0x1a8>
100062d8:	fb                   	sti    
100062d9:	83 c4 08             	add    esp,0x8
100062dc:	5b                   	pop    ebx
100062dd:	c3                   	ret    

100062de <NIWindow::postEvent(NiEvent)>:
100062de:	55                   	push   ebp
100062df:	57                   	push   edi
100062e0:	56                   	push   esi
100062e1:	53                   	push   ebx
100062e2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100062e6:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
100062e9:	83 fd 18             	cmp    ebp,0x18
100062ec:	74 25                	je     10006313 <NIWindow::postEvent(NiEvent)+0x35>
100062ee:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
100062f1:	8d 74 24 18          	lea    esi,[esp+0x18]
100062f5:	6b d0 18             	imul   edx,eax,0x18
100062f8:	b9 06 00 00 00       	mov    ecx,0x6
100062fd:	8d 7c 13 1c          	lea    edi,[ebx+edx*1+0x1c]
10006301:	40                   	inc    eax
10006302:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006304:	99                   	cdq    
10006305:	b9 18 00 00 00       	mov    ecx,0x18
1000630a:	45                   	inc    ebp
1000630b:	f7 f9                	idiv   ecx
1000630d:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
10006310:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
10006313:	5b                   	pop    ebx
10006314:	5e                   	pop    esi
10006315:	5f                   	pop    edi
10006316:	5d                   	pop    ebp
10006317:	c3                   	ret    

10006318 <NIWindow::getEventCount()>:
10006318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000631c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
1000631f:	c3                   	ret    

10006320 <NIWindow::grabEvent()>:
10006320:	57                   	push   edi
10006321:	b9 06 00 00 00       	mov    ecx,0x6
10006326:	56                   	push   esi
10006327:	53                   	push   ebx
10006328:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000632c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10006330:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
10006333:	6b c2 18             	imul   eax,edx,0x18
10006336:	01 d8                	add    eax,ebx
10006338:	8d 70 1c             	lea    esi,[eax+0x1c]
1000633b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000633d:	b9 18 00 00 00       	mov    ecx,0x18
10006342:	81 60 20 ff 1f 00 80 	and    DWORD PTR [eax+0x20],0x80001fff
10006349:	8d 42 01             	lea    eax,[edx+0x1]
1000634c:	ff 4b 10             	dec    DWORD PTR [ebx+0x10]
1000634f:	99                   	cdq    
10006350:	f7 f9                	idiv   ecx
10006352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10006356:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
10006359:	5b                   	pop    ebx
1000635a:	5e                   	pop    esi
1000635b:	5f                   	pop    edi
1000635c:	c2 04 00             	ret    0x4
1000635f:	90                   	nop

10006360 <NIWindow::invalidate()>:
10006360:	53                   	push   ebx
10006361:	83 ec 08             	sub    esp,0x8
10006364:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10006368:	80 bb 5c 02 00 00 00 	cmp    BYTE PTR [ebx+0x25c],0x0
1000636f:	74 28                	je     10006399 <NIWindow::invalidate()+0x39>
10006371:	83 bb 64 02 00 00 00 	cmp    DWORD PTR [ebx+0x264],0x0
10006378:	74 1f                	je     10006399 <NIWindow::invalidate()+0x39>
1000637a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
1000637d:	85 c0                	test   eax,eax
1000637f:	74 18                	je     10006399 <NIWindow::invalidate()+0x39>
10006381:	83 ec 0c             	sub    esp,0xc
10006384:	50                   	push   eax
10006385:	e8 fc ff ff ff       	call   10006386 <NIWindow::invalidate()+0x26>	10006386: R_386_PC32	free
1000638a:	59                   	pop    ecx
1000638b:	ff b3 64 02 00 00    	push   DWORD PTR [ebx+0x264]
10006391:	e8 fc ff ff ff       	call   10006392 <NIWindow::invalidate()+0x32>	10006392: R_386_PC32	free
10006396:	83 c4 10             	add    esp,0x10
10006399:	c7 83 64 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x264],0x0
100063a3:	c7 83 60 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x260],0x0
100063ad:	c6 83 5c 02 00 00 00 	mov    BYTE PTR [ebx+0x25c],0x0
100063b4:	c6 43 0c 00          	mov    BYTE PTR [ebx+0xc],0x0
100063b8:	83 8b 90 02 00 00 10 	or     DWORD PTR [ebx+0x290],0x10
100063bf:	83 c4 08             	add    esp,0x8
100063c2:	5b                   	pop    ebx
100063c3:	c3                   	ret    

100063c4 <NIWindow::putpixel(int, int, unsigned int)>:
100063c4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
100063c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100063cc:	8b 91 70 02 00 00    	mov    edx,DWORD PTR [ecx+0x270]
100063d2:	0f af c2             	imul   eax,edx
100063d5:	0f af 91 60 02 00 00 	imul   edx,DWORD PTR [ecx+0x260]
100063dc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
100063e0:	39 c2                	cmp    edx,eax
100063e2:	7c 0a                	jl     100063ee <NIWindow::putpixel(int, int, unsigned int)+0x2a>
100063e4:	8b 51 08             	mov    edx,DWORD PTR [ecx+0x8]
100063e7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100063eb:	89 0c 82             	mov    DWORD PTR [edx+eax*4],ecx
100063ee:	c3                   	ret    
100063ef:	90                   	nop

100063f0 <NIWindow::drawBasicWindow()>:
100063f0:	55                   	push   ebp
100063f1:	57                   	push   edi
100063f2:	56                   	push   esi
100063f3:	31 f6                	xor    esi,esi
100063f5:	53                   	push   ebx
100063f6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
100063fa:	39 b5 74 02 00 00    	cmp    DWORD PTR [ebp+0x274],esi
10006400:	7e 31                	jle    10006433 <NIWindow::drawBasicWindow()+0x43>
10006402:	31 db                	xor    ebx,ebx
10006404:	83 fe 19             	cmp    esi,0x19
10006407:	0f 9e c3             	setle  bl
1000640a:	31 ff                	xor    edi,edi
1000640c:	4b                   	dec    ebx
1000640d:	81 e3 d5 d4 d4 ff    	and    ebx,0xffd4d4d5
10006413:	81 c3 ff ff ff 00    	add    ebx,0xffffff
10006419:	39 bd 70 02 00 00    	cmp    DWORD PTR [ebp+0x270],edi
1000641f:	7e 0f                	jle    10006430 <NIWindow::drawBasicWindow()+0x40>
10006421:	53                   	push   ebx
10006422:	56                   	push   esi
10006423:	57                   	push   edi
10006424:	47                   	inc    edi
10006425:	55                   	push   ebp
10006426:	e8 fc ff ff ff       	call   10006427 <NIWindow::drawBasicWindow()+0x37>	10006427: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000642b:	83 c4 10             	add    esp,0x10
1000642e:	eb e9                	jmp    10006419 <NIWindow::drawBasicWindow()+0x29>
10006430:	46                   	inc    esi
10006431:	eb c7                	jmp    100063fa <NIWindow::drawBasicWindow()+0xa>
10006433:	5b                   	pop    ebx
10006434:	5e                   	pop    esi
10006435:	5f                   	pop    edi
10006436:	5d                   	pop    ebp
10006437:	c3                   	ret    

10006438 <NIWindow::rerender()>:
10006438:	57                   	push   edi
10006439:	56                   	push   esi
1000643a:	53                   	push   ebx
1000643b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000643f:	80 bb 5c 02 00 00 00 	cmp    BYTE PTR [ebx+0x25c],0x0
10006446:	74 0c                	je     10006454 <NIWindow::rerender()+0x1c>
10006448:	83 ec 0c             	sub    esp,0xc
1000644b:	53                   	push   ebx
1000644c:	e8 fc ff ff ff       	call   1000644d <NIWindow::rerender()+0x15>	1000644d: R_386_PC32	NIWindow::invalidate()
10006451:	83 c4 10             	add    esp,0x10
10006454:	8b b3 74 02 00 00    	mov    esi,DWORD PTR [ebx+0x274]
1000645a:	83 ec 0c             	sub    esp,0xc
1000645d:	89 b3 60 02 00 00    	mov    DWORD PTR [ebx+0x260],esi
10006463:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
1000646a:	50                   	push   eax
1000646b:	e8 fc ff ff ff       	call   1000646c <NIWindow::rerender()+0x34>	1000646c: R_386_PC32	malloc
10006470:	0f af b3 70 02 00 00 	imul   esi,DWORD PTR [ebx+0x270]
10006477:	89 83 64 02 00 00    	mov    DWORD PTR [ebx+0x264],eax
1000647d:	0f af 73 04          	imul   esi,DWORD PTR [ebx+0x4]
10006481:	89 34 24             	mov    DWORD PTR [esp],esi
10006484:	e8 fc ff ff ff       	call   10006485 <NIWindow::rerender()+0x4d>	10006485: R_386_PC32	malloc
10006489:	83 c4 10             	add    esp,0x10
1000648c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
1000648f:	31 c0                	xor    eax,eax
10006491:	39 83 60 02 00 00    	cmp    DWORD PTR [ebx+0x260],eax
10006497:	0f 8e 91 00 00 00    	jle    1000652e <NIWindow::rerender()+0xf6>
1000649d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100064a4:	8b 8b 64 02 00 00    	mov    ecx,DWORD PTR [ebx+0x264]
100064aa:	01 d1                	add    ecx,edx
100064ac:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
100064b3:	75 61                	jne    10006516 <NIWindow::rerender()+0xde>
100064b5:	f6 83 90 02 00 00 80 	test   BYTE PTR [ebx+0x290],0x80
100064bc:	75 58                	jne    10006516 <NIWindow::rerender()+0xde>
100064be:	83 f8 06             	cmp    eax,0x6
100064c1:	7f 1e                	jg     100064e1 <NIWindow::rerender()+0xa9>
100064c3:	8b 34 85 00 00 00 00 	mov    esi,DWORD PTR [eax*4+0x0]	100064c6: R_386_32	curveLookup7
100064ca:	66 89 31             	mov    WORD PTR [ecx],si
100064cd:	8b 8b 64 02 00 00    	mov    ecx,DWORD PTR [ebx+0x264]
100064d3:	8b 34 85 00 00 00 00 	mov    esi,DWORD PTR [eax*4+0x0]	100064d6: R_386_32	curveLookup7
100064da:	66 89 74 11 02       	mov    WORD PTR [ecx+edx*1+0x2],si
100064df:	eb 47                	jmp    10006528 <NIWindow::rerender()+0xf0>
100064e1:	8b b3 74 02 00 00    	mov    esi,DWORD PTR [ebx+0x274]
100064e7:	8d 7e fa             	lea    edi,[esi-0x6]
100064ea:	39 c7                	cmp    edi,eax
100064ec:	7f 28                	jg     10006516 <NIWindow::rerender()+0xde>
100064ee:	29 c6                	sub    esi,eax
100064f0:	8b 34 b5 00 00 00 00 	mov    esi,DWORD PTR [esi*4+0x0]	100064f3: R_386_32	curveLookup7
100064f7:	66 89 31             	mov    WORD PTR [ecx],si
100064fa:	8b 8b 74 02 00 00    	mov    ecx,DWORD PTR [ebx+0x274]
10006500:	8b b3 64 02 00 00    	mov    esi,DWORD PTR [ebx+0x264]
10006506:	29 c1                	sub    ecx,eax
10006508:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	1000650b: R_386_32	curveLookup7
1000650f:	66 89 4c 16 02       	mov    WORD PTR [esi+edx*1+0x2],cx
10006514:	eb 12                	jmp    10006528 <NIWindow::rerender()+0xf0>
10006516:	66 c7 01 00 00       	mov    WORD PTR [ecx],0x0
1000651b:	8b 8b 64 02 00 00    	mov    ecx,DWORD PTR [ebx+0x264]
10006521:	66 c7 44 11 02 00 00 	mov    WORD PTR [ecx+edx*1+0x2],0x0
10006528:	40                   	inc    eax
10006529:	e9 63 ff ff ff       	jmp    10006491 <NIWindow::rerender()+0x59>
1000652e:	8b 83 90 02 00 00    	mov    eax,DWORD PTR [ebx+0x290]
10006534:	c6 83 5c 02 00 00 01 	mov    BYTE PTR [ebx+0x25c],0x1
1000653b:	a8 02                	test   al,0x2
1000653d:	75 31                	jne    10006570 <NIWindow::rerender()+0x138>
1000653f:	a8 04                	test   al,0x4
10006541:	74 18                	je     1000655b <NIWindow::rerender()+0x123>
10006543:	8b 8b 74 02 00 00    	mov    ecx,DWORD PTR [ebx+0x274]
10006549:	31 c0                	xor    eax,eax
1000654b:	0f af 8b 70 02 00 00 	imul   ecx,DWORD PTR [ebx+0x270]
10006552:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
10006555:	0f af 4b 04          	imul   ecx,DWORD PTR [ebx+0x4]
10006559:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000655b:	f6 83 90 02 00 00 08 	test   BYTE PTR [ebx+0x290],0x8
10006562:	74 0c                	je     10006570 <NIWindow::rerender()+0x138>
10006564:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
10006568:	5b                   	pop    ebx
10006569:	5e                   	pop    esi
1000656a:	5f                   	pop    edi
1000656b:	e9 80 fe ff ff       	jmp    100063f0 <NIWindow::drawBasicWindow()>
10006570:	5b                   	pop    ebx
10006571:	5e                   	pop    esi
10006572:	5f                   	pop    edi
10006573:	c3                   	ret    

10006574 <NIWindow::changeContext(NIContext*, int, int)>:
10006574:	55                   	push   ebp
10006575:	57                   	push   edi
10006576:	56                   	push   esi
10006577:	53                   	push   ebx
10006578:	83 ec 18             	sub    esp,0x18
1000657b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
1000657f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
10006583:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
10006587:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
1000658b:	53                   	push   ebx
1000658c:	e8 fc ff ff ff       	call   1000658d <NIWindow::changeContext(NIContext*, int, int)+0x19>	1000658d: R_386_PC32	NIWindow::invalidate()
10006591:	89 33                	mov    DWORD PTR [ebx],esi
10006593:	89 ab 68 02 00 00    	mov    DWORD PTR [ebx+0x268],ebp
10006599:	89 bb 6c 02 00 00    	mov    DWORD PTR [ebx+0x26c],edi
1000659f:	83 c4 10             	add    esp,0x10
100065a2:	8b 86 18 04 00 00    	mov    eax,DWORD PTR [esi+0x418]
100065a8:	83 f8 08             	cmp    eax,0x8
100065ab:	7f 09                	jg     100065b6 <NIWindow::changeContext(NIContext*, int, int)+0x42>
100065ad:	c7 43 04 01 00 00 00 	mov    DWORD PTR [ebx+0x4],0x1
100065b4:	eb 15                	jmp    100065cb <NIWindow::changeContext(NIContext*, int, int)+0x57>
100065b6:	83 f8 10             	cmp    eax,0x10
100065b9:	7f 09                	jg     100065c4 <NIWindow::changeContext(NIContext*, int, int)+0x50>
100065bb:	c7 43 04 02 00 00 00 	mov    DWORD PTR [ebx+0x4],0x2
100065c2:	eb 07                	jmp    100065cb <NIWindow::changeContext(NIContext*, int, int)+0x57>
100065c4:	c7 43 04 04 00 00 00 	mov    DWORD PTR [ebx+0x4],0x4
100065cb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
100065cf:	83 c4 0c             	add    esp,0xc
100065d2:	5b                   	pop    ebx
100065d3:	5e                   	pop    esi
100065d4:	5f                   	pop    edi
100065d5:	5d                   	pop    ebp
100065d6:	e9 5d fe ff ff       	jmp    10006438 <NIWindow::rerender()>
100065db:	90                   	nop

100065dc <NIWindow::NIWindow(NIContext*, int, int, int, int)>:
100065dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100065e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100065e4:	c7 80 8c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x28c],0x0
100065ee:	89 90 70 02 00 00    	mov    DWORD PTR [eax+0x270],edx
100065f4:	c6 80 78 02 00 00 00 	mov    BYTE PTR [eax+0x278],0x0
100065fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100065ff:	c7 80 90 02 00 00 00 02 00 00 	mov    DWORD PTR [eax+0x290],0x200
10006609:	89 90 74 02 00 00    	mov    DWORD PTR [eax+0x274],edx
1000660f:	c6 80 5c 02 00 00 00 	mov    BYTE PTR [eax+0x25c],0x0
10006616:	c7 80 64 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x264],0x0
10006620:	c7 80 60 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x260],0x0
1000662a:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10006631:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10006638:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
1000663f:	e9 30 ff ff ff       	jmp    10006574 <NIWindow::changeContext(NIContext*, int, int)>

10006644 <NIWindow::request()>:
10006644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10006648:	80 b8 5c 02 00 00 00 	cmp    BYTE PTR [eax+0x25c],0x0
1000664f:	75 05                	jne    10006656 <NIWindow::request()+0x12>
10006651:	e9 e2 fd ff ff       	jmp    10006438 <NIWindow::rerender()>
10006656:	c3                   	ret    
10006657:	90                   	nop

10006658 <NIWindow::SHADOW_TEST()>:
10006658:	55                   	push   ebp
10006659:	57                   	push   edi
1000665a:	56                   	push   esi
1000665b:	53                   	push   ebx
1000665c:	83 ec 28             	sub    esp,0x28
1000665f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10006663:	53                   	push   ebx
10006664:	e8 fc ff ff ff       	call   10006665 <NIWindow::SHADOW_TEST()+0xd>	10006665: R_386_PC32	NIWindow::request()
10006669:	83 c4 10             	add    esp,0x10
1000666c:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006672:	39 83 60 02 00 00    	cmp    DWORD PTR [ebx+0x260],eax
10006678:	74 10                	je     1000668a <NIWindow::SHADOW_TEST()+0x32>
1000667a:	83 ec 0c             	sub    esp,0xc
1000667d:	68 31 6f 00 10       	push   0x10006f31	1000667e: R_386_32	.text
10006682:	e8 fc ff ff ff       	call   10006683 <NIWindow::SHADOW_TEST()+0x2b>	10006683: R_386_PC32	KePanic(char const*)
10006687:	83 c4 10             	add    esp,0x10
1000668a:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
1000668e:	0f 85 3a 01 00 00    	jne    100067ce <NIWindow::SHADOW_TEST()+0x176>
10006694:	c7 44 24 04 05 00 00 00 	mov    DWORD PTR [esp+0x4],0x5
1000669c:	31 ff                	xor    edi,edi
1000669e:	39 bb 74 02 00 00    	cmp    DWORD PTR [ebx+0x274],edi
100066a4:	0f 8e 24 01 00 00    	jle    100067ce <NIWindow::SHADOW_TEST()+0x176>
100066aa:	8b 83 64 02 00 00    	mov    eax,DWORD PTR [ebx+0x264]
100066b0:	8d 04 b8             	lea    eax,[eax+edi*4]
100066b3:	0f b7 30             	movzx  esi,WORD PTR [eax]
100066b6:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
100066ba:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
100066be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100066c2:	89 34 24             	mov    DWORD PTR [esp],esi
100066c5:	8b ab 70 02 00 00    	mov    ebp,DWORD PTR [ebx+0x270]
100066cb:	8b 8b 74 02 00 00    	mov    ecx,DWORD PTR [ebx+0x274]
100066d1:	2b 6c 24 0c          	sub    ebp,DWORD PTR [esp+0xc]
100066d5:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
100066d8:	0f 8e da 00 00 00    	jle    100067b8 <NIWindow::SHADOW_TEST()+0x160>
100066de:	83 ff 05             	cmp    edi,0x5
100066e1:	7e 1f                	jle    10006702 <NIWindow::SHADOW_TEST()+0xaa>
100066e3:	8d 41 fb             	lea    eax,[ecx-0x5]
100066e6:	39 f8                	cmp    eax,edi
100066e8:	7e 18                	jle    10006702 <NIWindow::SHADOW_TEST()+0xaa>
100066ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100066ee:	83 c0 05             	add    eax,0x5
100066f1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
100066f4:	7d 0c                	jge    10006702 <NIWindow::SHADOW_TEST()+0xaa>
100066f6:	8d 45 fb             	lea    eax,[ebp-0x5]
100066f9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
100066fc:	0f 8f ae 00 00 00    	jg     100067b0 <NIWindow::SHADOW_TEST()+0x158>
10006702:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
10006706:	be ea 01 00 00       	mov    esi,0x1ea
1000670b:	29 f9                	sub    ecx,edi
1000670d:	89 f0                	mov    eax,esi
1000670f:	83 c1 04             	add    ecx,0x4
10006712:	99                   	cdq    
10006713:	f7 f9                	idiv   ecx
10006715:	89 c1                	mov    ecx,eax
10006717:	89 f0                	mov    eax,esi
10006719:	99                   	cdq    
1000671a:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
1000671e:	83 f8 0a             	cmp    eax,0xa
10006721:	7d 05                	jge    10006728 <NIWindow::SHADOW_TEST()+0xd0>
10006723:	b8 0a 00 00 00       	mov    eax,0xa
10006728:	39 c1                	cmp    ecx,eax
1000672a:	7d 02                	jge    1000672e <NIWindow::SHADOW_TEST()+0xd6>
1000672c:	89 c1                	mov    ecx,eax
1000672e:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
10006731:	b8 ea 01 00 00       	mov    eax,0x1ea
10006736:	83 c5 04             	add    ebp,0x4
10006739:	99                   	cdq    
1000673a:	f7 fd                	idiv   ebp
1000673c:	89 c6                	mov    esi,eax
1000673e:	83 f8 0a             	cmp    eax,0xa
10006741:	7d 05                	jge    10006748 <NIWindow::SHADOW_TEST()+0xf0>
10006743:	be 0a 00 00 00       	mov    esi,0xa
10006748:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000674b:	8d 68 05             	lea    ebp,[eax+0x5]
1000674e:	b8 ea 01 00 00       	mov    eax,0x1ea
10006753:	99                   	cdq    
10006754:	f7 fd                	idiv   ebp
10006756:	39 c6                	cmp    esi,eax
10006758:	7d 02                	jge    1000675c <NIWindow::SHADOW_TEST()+0x104>
1000675a:	89 c6                	mov    esi,eax
1000675c:	89 f0                	mov    eax,esi
1000675e:	89 ca                	mov    edx,ecx
10006760:	0f af c6             	imul   eax,esi
10006763:	0f af d1             	imul   edx,ecx
10006766:	0f af f1             	imul   esi,ecx
10006769:	01 d0                	add    eax,edx
1000676b:	8d 04 c6             	lea    eax,[esi+eax*8]
1000676e:	c1 f8 08             	sar    eax,0x8
10006771:	83 f8 66             	cmp    eax,0x66
10006774:	7e 4c                	jle    100067c2 <NIWindow::SHADOW_TEST()+0x16a>
10006776:	8d 50 9a             	lea    edx,[eax-0x66]
10006779:	d1 fa                	sar    edx,1
1000677b:	8d 42 66             	lea    eax,[edx+0x66]
1000677e:	83 f8 73             	cmp    eax,0x73
10006781:	7e 3f                	jle    100067c2 <NIWindow::SHADOW_TEST()+0x16a>
10006783:	83 ea 0d             	sub    edx,0xd
10006786:	c1 fa 02             	sar    edx,0x2
10006789:	8d 42 73             	lea    eax,[edx+0x73]
1000678c:	83 f8 7f             	cmp    eax,0x7f
1000678f:	7f 1f                	jg     100067b0 <NIWindow::SHADOW_TEST()+0x158>
10006791:	50                   	push   eax
10006792:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
10006798:	01 f8                	add    eax,edi
1000679a:	50                   	push   eax
1000679b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000679f:	03 83 68 02 00 00    	add    eax,DWORD PTR [ebx+0x268]
100067a5:	50                   	push   eax
100067a6:	ff 33                	push   DWORD PTR [ebx]
100067a8:	e8 fc ff ff ff       	call   100067a9 <NIWindow::SHADOW_TEST()+0x151>	100067a9: R_386_PC32	NIContext::drvDarken4(int, int, int)
100067ad:	83 c4 10             	add    esp,0x10
100067b0:	ff 04 24             	inc    DWORD PTR [esp]
100067b3:	e9 0d ff ff ff       	jmp    100066c5 <NIWindow::SHADOW_TEST()+0x6d>
100067b8:	47                   	inc    edi
100067b9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
100067bd:	e9 dc fe ff ff       	jmp    1000669e <NIWindow::SHADOW_TEST()+0x46>
100067c2:	83 f8 0a             	cmp    eax,0xa
100067c5:	7d ca                	jge    10006791 <NIWindow::SHADOW_TEST()+0x139>
100067c7:	b8 0a 00 00 00       	mov    eax,0xa
100067cc:	eb c3                	jmp    10006791 <NIWindow::SHADOW_TEST()+0x139>
100067ce:	83 c4 1c             	add    esp,0x1c
100067d1:	5b                   	pop    ebx
100067d2:	5e                   	pop    esi
100067d3:	5f                   	pop    edi
100067d4:	5d                   	pop    ebp
100067d5:	c3                   	ret    

100067d6 <NIWindow::realdraw()>:
100067d6:	55                   	push   ebp
100067d7:	57                   	push   edi
100067d8:	56                   	push   esi
100067d9:	53                   	push   ebx
100067da:	83 ec 18             	sub    esp,0x18
100067dd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
100067e1:	53                   	push   ebx
100067e2:	e8 fc ff ff ff       	call   100067e3 <NIWindow::realdraw()+0xd>	100067e3: R_386_PC32	NIWindow::request()
100067e7:	83 c4 10             	add    esp,0x10
100067ea:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100067f0:	39 83 60 02 00 00    	cmp    DWORD PTR [ebx+0x260],eax
100067f6:	74 10                	je     10006808 <NIWindow::realdraw()+0x32>
100067f8:	83 ec 0c             	sub    esp,0xc
100067fb:	68 31 6f 00 10       	push   0x10006f31	100067fc: R_386_32	.text
10006800:	e8 fc ff ff ff       	call   10006801 <NIWindow::realdraw()+0x2b>	10006801: R_386_PC32	KePanic(char const*)
10006805:	83 c4 10             	add    esp,0x10
10006808:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
1000680c:	75 55                	jne    10006863 <NIWindow::realdraw()+0x8d>
1000680e:	31 f6                	xor    esi,esi
10006810:	39 b3 74 02 00 00    	cmp    DWORD PTR [ebx+0x274],esi
10006816:	7e 4b                	jle    10006863 <NIWindow::realdraw()+0x8d>
10006818:	8b 83 64 02 00 00    	mov    eax,DWORD PTR [ebx+0x264]
1000681e:	8d 04 b0             	lea    eax,[eax+esi*4]
10006821:	0f b7 28             	movzx  ebp,WORD PTR [eax]
10006824:	0f b7 78 02          	movzx  edi,WORD PTR [eax+0x2]
10006828:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
1000682e:	89 c2                	mov    edx,eax
10006830:	29 fa                	sub    edx,edi
10006832:	39 ea                	cmp    edx,ebp
10006834:	7e 2a                	jle    10006860 <NIWindow::realdraw()+0x8a>
10006836:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10006839:	0f af c6             	imul   eax,esi
1000683c:	01 e8                	add    eax,ebp
1000683e:	ff 34 82             	push   DWORD PTR [edx+eax*4]
10006841:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
10006847:	01 f0                	add    eax,esi
10006849:	50                   	push   eax
1000684a:	8b 83 68 02 00 00    	mov    eax,DWORD PTR [ebx+0x268]
10006850:	01 e8                	add    eax,ebp
10006852:	45                   	inc    ebp
10006853:	50                   	push   eax
10006854:	ff 33                	push   DWORD PTR [ebx]
10006856:	e8 fc ff ff ff       	call   10006857 <NIWindow::realdraw()+0x81>	10006857: R_386_PC32	NIContext::drvPutpixel4(int, int, unsigned int)
1000685b:	83 c4 10             	add    esp,0x10
1000685e:	eb c8                	jmp    10006828 <NIWindow::realdraw()+0x52>
10006860:	46                   	inc    esi
10006861:	eb ad                	jmp    10006810 <NIWindow::realdraw()+0x3a>
10006863:	83 c4 0c             	add    esp,0xc
10006866:	5b                   	pop    ebx
10006867:	5e                   	pop    esi
10006868:	5f                   	pop    edi
10006869:	5d                   	pop    ebp
1000686a:	c3                   	ret    
1000686b:	90                   	nop

1000686c <NIWindow::drawResizeMarker()>:
1000686c:	53                   	push   ebx
1000686d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
10006871:	f6 83 90 02 00 00 01 	test   BYTE PTR [ebx+0x290],0x1
10006878:	0f 85 f6 01 00 00    	jne    10006a74 <NIWindow::drawResizeMarker()+0x208>
1000687e:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
10006885:	0f 85 e9 01 00 00    	jne    10006a74 <NIWindow::drawResizeMarker()+0x208>
1000688b:	68 55 55 55 00       	push   0x555555
10006890:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006896:	83 e8 05             	sub    eax,0x5
10006899:	50                   	push   eax
1000689a:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100068a0:	83 e8 0d             	sub    eax,0xd
100068a3:	50                   	push   eax
100068a4:	53                   	push   ebx
100068a5:	e8 fc ff ff ff       	call   100068a6 <NIWindow::drawResizeMarker()+0x3a>	100068a6: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100068aa:	68 55 55 55 00       	push   0x555555
100068af:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100068b5:	83 e8 05             	sub    eax,0x5
100068b8:	50                   	push   eax
100068b9:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100068bf:	83 e8 0b             	sub    eax,0xb
100068c2:	50                   	push   eax
100068c3:	53                   	push   ebx
100068c4:	e8 fc ff ff ff       	call   100068c5 <NIWindow::drawResizeMarker()+0x59>	100068c5: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100068c9:	83 c4 20             	add    esp,0x20
100068cc:	68 55 55 55 00       	push   0x555555
100068d1:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100068d7:	83 e8 05             	sub    eax,0x5
100068da:	50                   	push   eax
100068db:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100068e1:	83 e8 09             	sub    eax,0x9
100068e4:	50                   	push   eax
100068e5:	53                   	push   ebx
100068e6:	e8 fc ff ff ff       	call   100068e7 <NIWindow::drawResizeMarker()+0x7b>	100068e7: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100068eb:	68 55 55 55 00       	push   0x555555
100068f0:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100068f6:	83 e8 05             	sub    eax,0x5
100068f9:	50                   	push   eax
100068fa:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006900:	83 e8 07             	sub    eax,0x7
10006903:	50                   	push   eax
10006904:	53                   	push   ebx
10006905:	e8 fc ff ff ff       	call   10006906 <NIWindow::drawResizeMarker()+0x9a>	10006906: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000690a:	83 c4 20             	add    esp,0x20
1000690d:	68 55 55 55 00       	push   0x555555
10006912:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006918:	83 e8 05             	sub    eax,0x5
1000691b:	50                   	push   eax
1000691c:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006922:	83 e8 05             	sub    eax,0x5
10006925:	50                   	push   eax
10006926:	53                   	push   ebx
10006927:	e8 fc ff ff ff       	call   10006928 <NIWindow::drawResizeMarker()+0xbc>	10006928: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000692c:	68 55 55 55 00       	push   0x555555
10006931:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006937:	83 e8 07             	sub    eax,0x7
1000693a:	50                   	push   eax
1000693b:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006941:	83 e8 0b             	sub    eax,0xb
10006944:	50                   	push   eax
10006945:	53                   	push   ebx
10006946:	e8 fc ff ff ff       	call   10006947 <NIWindow::drawResizeMarker()+0xdb>	10006947: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000694b:	83 c4 20             	add    esp,0x20
1000694e:	68 55 55 55 00       	push   0x555555
10006953:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006959:	83 e8 07             	sub    eax,0x7
1000695c:	50                   	push   eax
1000695d:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006963:	83 e8 09             	sub    eax,0x9
10006966:	50                   	push   eax
10006967:	53                   	push   ebx
10006968:	e8 fc ff ff ff       	call   10006969 <NIWindow::drawResizeMarker()+0xfd>	10006969: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000696d:	68 55 55 55 00       	push   0x555555
10006972:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006978:	83 e8 07             	sub    eax,0x7
1000697b:	50                   	push   eax
1000697c:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006982:	83 e8 07             	sub    eax,0x7
10006985:	50                   	push   eax
10006986:	53                   	push   ebx
10006987:	e8 fc ff ff ff       	call   10006988 <NIWindow::drawResizeMarker()+0x11c>	10006988: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000698c:	83 c4 20             	add    esp,0x20
1000698f:	68 55 55 55 00       	push   0x555555
10006994:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
1000699a:	83 e8 07             	sub    eax,0x7
1000699d:	50                   	push   eax
1000699e:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100069a4:	83 e8 05             	sub    eax,0x5
100069a7:	50                   	push   eax
100069a8:	53                   	push   ebx
100069a9:	e8 fc ff ff ff       	call   100069aa <NIWindow::drawResizeMarker()+0x13e>	100069aa: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100069ae:	68 55 55 55 00       	push   0x555555
100069b3:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100069b9:	83 e8 09             	sub    eax,0x9
100069bc:	50                   	push   eax
100069bd:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100069c3:	83 e8 09             	sub    eax,0x9
100069c6:	50                   	push   eax
100069c7:	53                   	push   ebx
100069c8:	e8 fc ff ff ff       	call   100069c9 <NIWindow::drawResizeMarker()+0x15d>	100069c9: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100069cd:	83 c4 20             	add    esp,0x20
100069d0:	68 55 55 55 00       	push   0x555555
100069d5:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100069db:	83 e8 09             	sub    eax,0x9
100069de:	50                   	push   eax
100069df:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100069e5:	83 e8 07             	sub    eax,0x7
100069e8:	50                   	push   eax
100069e9:	53                   	push   ebx
100069ea:	e8 fc ff ff ff       	call   100069eb <NIWindow::drawResizeMarker()+0x17f>	100069eb: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100069ef:	68 55 55 55 00       	push   0x555555
100069f4:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100069fa:	83 e8 09             	sub    eax,0x9
100069fd:	50                   	push   eax
100069fe:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006a04:	83 e8 05             	sub    eax,0x5
10006a07:	50                   	push   eax
10006a08:	53                   	push   ebx
10006a09:	e8 fc ff ff ff       	call   10006a0a <NIWindow::drawResizeMarker()+0x19e>	10006a0a: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10006a0e:	83 c4 20             	add    esp,0x20
10006a11:	68 55 55 55 00       	push   0x555555
10006a16:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006a1c:	83 e8 0b             	sub    eax,0xb
10006a1f:	50                   	push   eax
10006a20:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006a26:	83 e8 07             	sub    eax,0x7
10006a29:	50                   	push   eax
10006a2a:	53                   	push   ebx
10006a2b:	e8 fc ff ff ff       	call   10006a2c <NIWindow::drawResizeMarker()+0x1c0>	10006a2c: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10006a30:	68 55 55 55 00       	push   0x555555
10006a35:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006a3b:	83 e8 0b             	sub    eax,0xb
10006a3e:	50                   	push   eax
10006a3f:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006a45:	83 e8 05             	sub    eax,0x5
10006a48:	50                   	push   eax
10006a49:	53                   	push   ebx
10006a4a:	e8 fc ff ff ff       	call   10006a4b <NIWindow::drawResizeMarker()+0x1df>	10006a4b: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10006a4f:	83 c4 20             	add    esp,0x20
10006a52:	68 55 55 55 00       	push   0x555555
10006a57:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006a5d:	83 e8 0d             	sub    eax,0xd
10006a60:	50                   	push   eax
10006a61:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006a67:	83 e8 05             	sub    eax,0x5
10006a6a:	50                   	push   eax
10006a6b:	53                   	push   ebx
10006a6c:	e8 fc ff ff ff       	call   10006a6d <NIWindow::drawResizeMarker()+0x201>	10006a6d: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10006a71:	83 c4 10             	add    esp,0x10
10006a74:	5b                   	pop    ebx
10006a75:	c3                   	ret    

10006a76 <List<NIWindow*>::insertAtHead(NIWindow*)>:
10006a76:	53                   	push   ebx
10006a77:	83 ec 14             	sub    esp,0x14
10006a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10006a7e:	6a 0c                	push   0xc
10006a80:	e8 fc ff ff ff       	call   10006a81 <List<NIWindow*>::insertAtHead(NIWindow*)+0xb>	10006a81: R_386_PC32	malloc
10006a85:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10006a89:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10006a90:	89 10                	mov    DWORD PTR [eax],edx
10006a92:	83 c4 10             	add    esp,0x10
10006a95:	8b 13                	mov    edx,DWORD PTR [ebx]
10006a97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10006a9a:	85 d2                	test   edx,edx
10006a9c:	74 05                	je     10006aa3 <List<NIWindow*>::insertAtHead(NIWindow*)+0x2d>
10006a9e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
10006aa1:	eb 03                	jmp    10006aa6 <List<NIWindow*>::insertAtHead(NIWindow*)+0x30>
10006aa3:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10006aa6:	89 03                	mov    DWORD PTR [ebx],eax
10006aa8:	83 c4 08             	add    esp,0x8
10006aab:	5b                   	pop    ebx
10006aac:	c3                   	ret    
10006aad:	90                   	nop

10006aae <List<NIWindow*>::deleteElement(NIWindow*&)>:
10006aae:	57                   	push   edi
10006aaf:	56                   	push   esi
10006ab0:	53                   	push   ebx
10006ab1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10006ab5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10006ab9:	8b 19                	mov    ebx,DWORD PTR [ecx]
10006abb:	85 db                	test   ebx,ebx
10006abd:	74 5e                	je     10006b1d <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
10006abf:	8b 30                	mov    esi,DWORD PTR [eax]
10006ac1:	89 da                	mov    edx,ebx
10006ac3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
10006ac6:	8b 3a                	mov    edi,DWORD PTR [edx]
10006ac8:	85 c0                	test   eax,eax
10006aca:	74 08                	je     10006ad4 <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
10006acc:	39 f7                	cmp    edi,esi
10006ace:	73 04                	jae    10006ad4 <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
10006ad0:	89 c2                	mov    edx,eax
10006ad2:	eb ef                	jmp    10006ac3 <List<NIWindow*>::deleteElement(NIWindow*&)+0x15>
10006ad4:	39 f7                	cmp    edi,esi
10006ad6:	75 45                	jne    10006b1d <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
10006ad8:	39 d3                	cmp    ebx,edx
10006ada:	75 18                	jne    10006af4 <List<NIWindow*>::deleteElement(NIWindow*&)+0x46>
10006adc:	89 01                	mov    DWORD PTR [ecx],eax
10006ade:	85 c0                	test   eax,eax
10006ae0:	75 09                	jne    10006aeb <List<NIWindow*>::deleteElement(NIWindow*&)+0x3d>
10006ae2:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
10006ae9:	eb 1e                	jmp    10006b09 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
10006aeb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10006af2:	eb 15                	jmp    10006b09 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
10006af4:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
10006af7:	85 c0                	test   eax,eax
10006af9:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10006afc:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
10006aff:	74 05                	je     10006b06 <List<NIWindow*>::deleteElement(NIWindow*&)+0x58>
10006b01:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
10006b04:	eb 03                	jmp    10006b09 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
10006b06:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
10006b09:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
10006b11:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10006b15:	5b                   	pop    ebx
10006b16:	5e                   	pop    esi
10006b17:	5f                   	pop    edi
10006b18:	e9 fc ff ff ff       	jmp    10006b19 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6b>	10006b19: R_386_PC32	operator delete(void*, unsigned long)
10006b1d:	5b                   	pop    ebx
10006b1e:	5e                   	pop    esi
10006b1f:	5f                   	pop    edi
10006b20:	c3                   	ret    
10006b21:	43                   	inc    ebx
10006b22:	3a 2f                	cmp    ch,BYTE PTR [edi]
10006b24:	42                   	inc    edx
10006b25:	61                   	popa   
10006b26:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006b27:	61                   	popa   
10006b28:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006b29:	61                   	popa   
10006b2a:	2f                   	das    
10006b2b:	53                   	push   ebx
10006b2c:	79 73                	jns    10006ba1 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
10006b2e:	74 65                	je     10006b95 <List<NIWindow*>::deleteElement(NIWindow*&)+0xe7>
10006b30:	6d                   	ins    DWORD PTR es:[edi],dx
10006b31:	2f                   	das    
10006b32:	64 65 73 6b          	fs gs jae 10006ba1 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
10006b36:	74 6f                	je     10006ba7 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf9>
10006b38:	70 2e                	jo     10006b68 <List<NIWindow*>::deleteElement(NIWindow*&)+0xba>
10006b3a:	65 78 65             	gs js  10006ba2 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf4>
10006b3d:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
10006b40:	4e                   	dec    esi
10006b41:	43                   	inc    ebx
10006b42:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
10006b45:	4e                   	dec    esi
10006b46:	32 00                	xor    al,BYTE PTR [eax]
10006b48:	32 4e 46             	xor    cl,BYTE PTR [esi+0x46]
10006b4b:	53                   	push   ebx
10006b4c:	00 4e 49             	add    BYTE PTR [esi+0x49],cl
10006b4f:	43                   	inc    ebx
10006b50:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006b51:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006b52:	74 65                	je     10006bb9 <List<NIWindow*>::deleteElement(NIWindow*&)+0x10b>
10006b54:	78 74                	js     10006bca <List<NIWindow*>::deleteElement(NIWindow*&)+0x11c>
10006b56:	3a 3a                	cmp    bh,BYTE PTR [edx]
10006b58:	64 72 76             	fs jb  10006bd1 <List<NIWindow*>::deleteElement(NIWindow*&)+0x123>
10006b5b:	52                   	push   edx
10006b5c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10006b5e:	64 65 72 54          	fs gs jb 10006bb6 <List<NIWindow*>::deleteElement(NIWindow*&)+0x108>
10006b62:	54                   	push   esp
10006b63:	46                   	inc    esi
10006b64:	34 00                	xor    al,0x0
10006b66:	43                   	inc    ebx
10006b67:	3a 2f                	cmp    ch,BYTE PTR [edi]
10006b69:	42                   	inc    edx
10006b6a:	61                   	popa   
10006b6b:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006b6c:	61                   	popa   
10006b6d:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006b6e:	61                   	popa   
10006b6f:	2f                   	das    
10006b70:	46                   	inc    esi
10006b71:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006b72:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006b73:	74 73                	je     10006be8 <List<NIWindow*>::deleteElement(NIWindow*&)+0x13a>
10006b75:	2f                   	das    
10006b76:	53                   	push   ebx
10006b77:	46                   	inc    esi
10006b78:	4e                   	dec    esi
10006b79:	00 43 41             	add    BYTE PTR [ebx+0x41],al
10006b7c:	4e                   	dec    esi
10006b7d:	4e                   	dec    esi
10006b7e:	4f                   	dec    edi
10006b7f:	54                   	push   esp
10006b80:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10006b84:	44                   	inc    esp
10006b85:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10006b88:	4e                   	dec    esi
10006b89:	54                   	push   esp
10006b8a:	20 44 49 52          	and    BYTE PTR [ecx+ecx*2+0x52],al
10006b8e:	45                   	inc    ebp
10006b8f:	43                   	inc    ebx
10006b90:	54                   	push   esp
10006b91:	4f                   	dec    edi
10006b92:	52                   	push   edx
10006b93:	59                   	pop    ecx
10006b94:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10006b97:	2f                   	das    
10006b98:	42                   	inc    edx
10006b99:	61                   	popa   
10006b9a:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006b9b:	61                   	popa   
10006b9c:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006b9d:	61                   	popa   
10006b9e:	2f                   	das    
10006b9f:	46                   	inc    esi
10006ba0:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006ba1:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006ba2:	74 73                	je     10006c17 <List<NIWindow*>::deleteElement(NIWindow*&)+0x169>
10006ba4:	2f                   	das    
10006ba5:	53                   	push   ebx
10006ba6:	46                   	inc    esi
10006ba7:	4e                   	dec    esi
10006ba8:	2f                   	das    
10006ba9:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
10006bac:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006bad:	74 20                	je     10006bcf <List<NIWindow*>::deleteElement(NIWindow*&)+0x121>
10006baf:	69 73 20 6f 66 20 73 	imul   esi,DWORD PTR [ebx+0x20],0x7320666f
10006bb6:	69 7a 65 20 25 64 0a 	imul   edi,DWORD PTR [edx+0x65],0xa642520
10006bbd:	00 4c 6f 61          	add    BYTE PTR [edi+ebp*2+0x61],cl
10006bc1:	64 65 64 20 66 6f    	fs gs and BYTE PTR fs:[esi+0x6f],ah
10006bc7:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006bc8:	74 3a                	je     10006c04 <List<NIWindow*>::deleteElement(NIWindow*&)+0x156>
10006bca:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
10006bd0:	53                   	push   ebx
10006bd1:	46                   	inc    esi
10006bd2:	4e                   	dec    esi
10006bd3:	5f                   	pop    edi
10006bd4:	52                   	push   edx
10006bd5:	45                   	inc    ebp
10006bd6:	53                   	push   ebx
10006bd7:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10006bdd:	00 4d 65             	add    BYTE PTR [ebp+0x65],cl
10006be0:	6d                   	ins    DWORD PTR es:[edi],dx
10006be1:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006be2:	72 79                	jb     10006c5d <List<NIWindow*>::deleteElement(NIWindow*&)+0x1af>
10006be4:	20 61 6c             	and    BYTE PTR [ecx+0x6c],ah
10006be7:	6c                   	ins    BYTE PTR es:[edi],dx
10006be8:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006be9:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
10006bec:	69 6f 6e 20 65 72 72 	imul   ebp,DWORD PTR [edi+0x6e],0x72726520
10006bf3:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006bf4:	72 00                	jb     10006bf6 <List<NIWindow*>::deleteElement(NIWindow*&)+0x148>
10006bf6:	42                   	inc    edx
10006bf7:	61                   	popa   
10006bf8:	64 20 66 69          	and    BYTE PTR fs:[esi+0x69],ah
10006bfc:	6c                   	ins    BYTE PTR es:[edi],dx
10006bfd:	65 20 66 6f          	and    BYTE PTR gs:[esi+0x6f],ah
10006c01:	72 6d                	jb     10006c70 <_ssfn__compute_huffman_codes::length_dezigzag+0x10>
10006c03:	61                   	popa   
10006c04:	74 00                	je     10006c06 <List<NIWindow*>::deleteElement(NIWindow*&)+0x158>
10006c06:	4e                   	dec    esi
10006c07:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006c08:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10006c0b:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006c0c:	74 20                	je     10006c2e <List<NIWindow*>::deleteElement(NIWindow*&)+0x180>
10006c0e:	66 61                	popaw  
10006c10:	63 65 20             	arpl   WORD PTR [ebp+0x20],sp
10006c13:	66 6f                	outs   dx,WORD PTR ds:[esi]
10006c15:	75 6e                	jne    10006c85 <_ssfn__zdist_extra+0x5>
10006c17:	64 00 49 6e          	add    BYTE PTR fs:[ecx+0x6e],cl
10006c1b:	76 61                	jbe    10006c7e <_ssfn__compute_huffman_codes::length_dezigzag+0x1e>
10006c1d:	6c                   	ins    BYTE PTR es:[edi],dx
10006c1e:	69 64 20 69 6e 70 75 74 	imul   esp,DWORD PTR [eax+eiz*1+0x69],0x7475706e
10006c26:	20 76 61             	and    BYTE PTR [esi+0x61],dh
10006c29:	6c                   	ins    BYTE PTR es:[edi],dx
10006c2a:	75 65                	jne    10006c91 <_ssfn__zdist_extra+0x11>
10006c2c:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10006c2f:	76 61                	jbe    10006c92 <_ssfn__zdist_extra+0x12>
10006c31:	6c                   	ins    BYTE PTR es:[edi],dx
10006c32:	69 64 20 73 74 79 6c 65 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x656c7974
10006c3a:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10006c3d:	76 61                	jbe    10006ca0 <_ssfn__zdist_extra+0x20>
10006c3f:	6c                   	ins    BYTE PTR es:[edi],dx
10006c40:	69 64 20 73 69 7a 65 00 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x657a69
10006c48:	47                   	inc    edi
10006c49:	6c                   	ins    BYTE PTR es:[edi],dx
10006c4a:	79 70                	jns    10006cbc <_ssfn__zdist_extra+0x3c>
10006c4c:	68 20 6e 6f 74       	push   0x746f6e20
10006c51:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10006c54:	75 6e                	jne    10006cc4 <_ssfn__zdist_extra+0x44>
10006c56:	64 00 66 90          	add    BYTE PTR fs:[esi-0x70],ah
10006c5a:	66 90                	xchg   ax,ax
10006c5c:	66 90                	xchg   ax,ax
10006c5e:	66 90                	xchg   ax,ax

10006c60 <_ssfn__compute_huffman_codes::length_dezigzag>:
10006c60:	10 11 12 00 08 07 09 06 0a 05 0b 04 0c 03 0d 02     ................
10006c70:	0e 01 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

10006c80 <_ssfn__zdist_extra>:
	...
10006c90:	01 00 00 00 01 00 00 00 02 00 00 00 02 00 00 00     ................
10006ca0:	03 00 00 00 03 00 00 00 04 00 00 00 04 00 00 00     ................
10006cb0:	05 00 00 00 05 00 00 00 06 00 00 00 06 00 00 00     ................
10006cc0:	07 00 00 00 07 00 00 00 08 00 00 00 08 00 00 00     ................
10006cd0:	09 00 00 00 09 00 00 00 0a 00 00 00 0a 00 00 00     ................
10006ce0:	0b 00 00 00 0b 00 00 00 0c 00 00 00 0c 00 00 00     ................
10006cf0:	0d 00 00 00 0d 00 00 00 00 00 00 00 00 00 00 00     ................

10006d00 <_ssfn__zdist_base>:
10006d00:	01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00     ................
10006d10:	05 00 00 00 07 00 00 00 09 00 00 00 0d 00 00 00     ................
10006d20:	11 00 00 00 19 00 00 00 21 00 00 00 31 00 00 00     ........!...1...
10006d30:	41 00 00 00 61 00 00 00 81 00 00 00 c1 00 00 00     A...a...........
10006d40:	01 01 00 00 81 01 00 00 01 02 00 00 01 03 00 00     ................
10006d50:	01 04 00 00 01 06 00 00 01 08 00 00 01 0c 00 00     ................
10006d60:	01 10 00 00 01 18 00 00 01 20 00 00 01 30 00 00     ......... ...0..
10006d70:	01 40 00 00 01 60 00 00 00 00 00 00 00 00 00 00     .@...`..........

10006d80 <_ssfn__zlength_extra>:
	...
10006da0:	01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00     ................
10006db0:	02 00 00 00 02 00 00 00 02 00 00 00 02 00 00 00     ................
10006dc0:	03 00 00 00 03 00 00 00 03 00 00 00 03 00 00 00     ................
10006dd0:	04 00 00 00 04 00 00 00 04 00 00 00 04 00 00 00     ................
10006de0:	05 00 00 00 05 00 00 00 05 00 00 00 05 00 00 00     ................
	...

10006e00 <_ssfn__zlength_base>:
10006e00:	03 00 00 00 04 00 00 00 05 00 00 00 06 00 00 00     ................
10006e10:	07 00 00 00 08 00 00 00 09 00 00 00 0a 00 00 00     ................
10006e20:	0b 00 00 00 0d 00 00 00 0f 00 00 00 11 00 00 00     ................
10006e30:	13 00 00 00 17 00 00 00 1b 00 00 00 1f 00 00 00     ................
10006e40:	23 00 00 00 2b 00 00 00 33 00 00 00 3b 00 00 00     #...+...3...;...
10006e50:	43 00 00 00 53 00 00 00 63 00 00 00 73 00 00 00     C...S...c...s...
10006e60:	83 00 00 00 a3 00 00 00 c3 00 00 00 e3 00 00 00     ................
10006e70:	02 01 00 00 00 00 00 00 00 00 00 00 43 3a 2f 42     ............C:/B
10006e80:	61 6e 61 6e 61 2f 43 75 72 73 6f 72 73 2f 53 54     anana/Cursors/ST
10006e90:	41 4e 44 41 52 44 2e 43 55 52 00 43 55 52 53 4f     ANDARD.CUR.CURSO
10006ea0:	52 20 4c 4f 41 44 3a 20 42 41 44 20 31 0a 00 43     R LOAD: BAD 1..C
10006eb0:	55 52 53 4f 52 20 4c 4f 41 44 3a 20 42 41 44 20     URSOR LOAD: BAD 
10006ec0:	32 0a 00 4e 52 4d 4c 00 57 41 49 54 00 54 4c 44     2..NRML.WAIT.TLD
10006ed0:	52 00 54 45 58 54 00 56 45 52 54 00 48 4f 52 5a     R.TEXT.VERT.HORZ
10006ee0:	00 48 41 4e 44 00 43 55 52 53 4f 52 20 4c 4f 41     .HAND.CURSOR LOA
10006ef0:	44 3a 20 42 41 44 20 33 0a 00 4e 69 4c 69 6e 6b     D: BAD 3..NiLink
10006f00:	43 6f 6d 6d 61 6e 64 44 65 73 74 72 6f 79 57 69     CommandDestroyWi
10006f10:	6e 64 6f 77 0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d     ndow..NiLinkComm
10006f20:	61 6e 64 43 72 65 61 74 65 57 69 6e 64 6f 77 0a     andCreateWindow.
10006f30:	00 41 53 53 45 52 54 49 4f 4e 20 46 41 49 4c 55     .ASSERTION FAILU
10006f40:	52 45 20 28 41 29 2e 00                             RE (A)..
