
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <NiMain(void*)>:
10000000:	55                   	push   ebp
10000001:	57                   	push   edi
10000002:	56                   	push   esi
10000003:	53                   	push   ebx
10000004:	83 ec 0c             	sub    esp,0xc
10000007:	e8 fc ff ff ff       	call   10000008 <NiMain(void*)+0x8>	10000008: R_386_PC32	NiInstallSysHooks()
1000000c:	e8 fc ff ff ff       	call   1000000d <NiMain(void*)+0xd>	1000000d: R_386_PC32	NiLoadCursors()
10000011:	83 ec 0c             	sub    esp,0xc
10000014:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000016: R_386_32	screen
1000001a:	e8 fc ff ff ff       	call   1000001b <NiMain(void*)+0x1b>	1000001b: R_386_PC32	Video::getWidth()
1000001f:	89 c6                	mov    esi,eax
10000021:	58                   	pop    eax
10000022:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000024: R_386_32	screen
10000028:	e8 fc ff ff ff       	call   10000029 <NiMain(void*)+0x29>	10000029: R_386_PC32	Video::getHeight()
1000002d:	5a                   	pop    edx
1000002e:	89 c7                	mov    edi,eax
10000030:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000032: R_386_32	screen
10000036:	e8 fc ff ff ff       	call   10000037 <NiMain(void*)+0x37>	10000037: R_386_PC32	Video::getWidth()
1000003b:	c7 04 24 1c 04 00 00 	mov    DWORD PTR [esp],0x41c
10000042:	89 c5                	mov    ebp,eax
10000044:	e8 fc ff ff ff       	call   10000045 <NiMain(void*)+0x45>	10000045: R_386_PC32	malloc
10000049:	59                   	pop    ecx
1000004a:	89 c3                	mov    ebx,eax
1000004c:	58                   	pop    eax
1000004d:	6a 20                	push   0x20
1000004f:	55                   	push   ebp
10000050:	57                   	push   edi
10000051:	56                   	push   esi
10000052:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000054: R_386_32	screen
10000058:	53                   	push   ebx
10000059:	e8 fc ff ff ff       	call   1000005a <NiMain(void*)+0x5a>	1000005a: R_386_PC32	NIContext::NIContext(Video*, int, int, int, int)
1000005e:	83 c4 14             	add    esp,0x14
10000061:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000063: R_386_32	ctxt
10000067:	68 24 04 00 00       	push   0x424
1000006c:	e8 fc ff ff ff       	call   1000006d <NiMain(void*)+0x6d>	1000006d: R_386_PC32	malloc
10000071:	89 c6                	mov    esi,eax
10000073:	58                   	pop    eax
10000074:	5a                   	pop    edx
10000075:	53                   	push   ebx
10000076:	56                   	push   esi
10000077:	e8 fc ff ff ff       	call   10000078 <NiMain(void*)+0x78>	10000078: R_386_PC32	NIDesktop::NIDesktop(NIContext*)
1000007c:	68 80 00 00 00       	push   0x80
10000081:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000083: R_386_32	desktop
10000087:	6a 00                	push   0x0
10000089:	68 00 00 00 00       	push   0x0	1000008a: R_386_32	NiDisplayRAM(void*)
1000008e:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000090: R_386_32	kernelProcess
10000094:	e8 fc ff ff ff       	call   10000095 <NiMain(void*)+0x95>	10000095: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000099:	83 c4 14             	add    esp,0x14
1000009c:	68 90 02 00 00       	push   0x290
100000a1:	e8 fc ff ff ff       	call   100000a2 <NiMain(void*)+0xa2>	100000a2: R_386_PC32	malloc
100000a6:	59                   	pop    ecx
100000a7:	89 c3                	mov    ebx,eax
100000a9:	5e                   	pop    esi
100000aa:	6a 01                	push   0x1
100000ac:	6a 01                	push   0x1
100000ae:	6a 00                	push   0x0
100000b0:	6a 00                	push   0x0
100000b2:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000b4: R_386_32	ctxt
100000b8:	50                   	push   eax
100000b9:	e8 fc ff ff ff       	call   100000ba <NiMain(void*)+0xba>	100000ba: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000be:	83 c4 18             	add    esp,0x18
100000c1:	53                   	push   ebx
100000c2:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000c4: R_386_32	desktop
100000c8:	e8 fc ff ff ff       	call   100000c9 <NiMain(void*)+0xc9>	100000c9: R_386_PC32	NIDesktop::addWindow(NIWindow*)
100000cd:	c7 04 24 84 07 00 00 	mov    DWORD PTR [esp],0x784
100000d4:	e8 fc ff ff ff       	call   100000d5 <NiMain(void*)+0xd5>	100000d5: R_386_PC32	malloc
100000d9:	6a 00                	push   0x0
100000db:	89 c3                	mov    ebx,eax
100000dd:	6a 00                	push   0x0
100000df:	68 93 69 00 10       	push   0x10006993	100000e0: R_386_32	.text
100000e4:	50                   	push   eax
100000e5:	e8 fc ff ff ff       	call   100000e6 <NiMain(void*)+0xe6>	100000e6: R_386_PC32	Process::Process(char const*, Process*, char**)
100000ea:	83 c4 14             	add    esp,0x14
100000ed:	53                   	push   ebx
100000ee:	e8 fc ff ff ff       	call   100000ef <NiMain(void*)+0xef>	100000ef: R_386_PC32	Process::createUserThread()
100000f3:	c7 04 24 84 07 00 00 	mov    DWORD PTR [esp],0x784
100000fa:	e8 fc ff ff ff       	call   100000fb <NiMain(void*)+0xfb>	100000fb: R_386_PC32	malloc
100000ff:	6a 00                	push   0x0
10000101:	89 c3                	mov    ebx,eax
10000103:	6a 00                	push   0x0
10000105:	68 b0 69 00 10       	push   0x100069b0	10000106: R_386_32	.text
1000010a:	50                   	push   eax
1000010b:	e8 fc ff ff ff       	call   1000010c <NiMain(void*)+0x10c>	1000010c: R_386_PC32	Process::Process(char const*, Process*, char**)
10000110:	83 c4 14             	add    esp,0x14
10000113:	53                   	push   ebx
10000114:	e8 fc ff ff ff       	call   10000115 <NiMain(void*)+0x115>	10000115: R_386_PC32	Process::createUserThread()
10000119:	83 c4 10             	add    esp,0x10
1000011c:	83 ec 0c             	sub    esp,0xc
1000011f:	6a 02                	push   0x2
10000121:	e8 fc ff ff ff       	call   10000122 <NiMain(void*)+0x122>	10000122: R_386_PC32	blockTask(TaskState)
10000126:	eb f1                	jmp    10000119 <NiMain(void*)+0x119>

10000128 <NiBegin(void*)>:
10000128:	83 ec 18             	sub    esp,0x18
1000012b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000012f:	e8 fc ff ff ff       	call   10000130 <NiBegin(void*)+0x8>	10000130: R_386_PC32	NiMain(void*)

10000134 <_ssfn__bitreverse16>:
10000134:	89 c2                	mov    edx,eax
10000136:	01 c0                	add    eax,eax
10000138:	d1 fa                	sar    edx,1
1000013a:	25 aa aa 00 00       	and    eax,0xaaaa
1000013f:	81 e2 55 55 00 00    	and    edx,0x5555
10000145:	09 c2                	or     edx,eax
10000147:	89 d0                	mov    eax,edx
10000149:	c1 e2 02             	shl    edx,0x2
1000014c:	c1 f8 02             	sar    eax,0x2
1000014f:	81 e2 cc cc 00 00    	and    edx,0xcccc
10000155:	25 33 33 00 00       	and    eax,0x3333
1000015a:	09 d0                	or     eax,edx
1000015c:	89 c2                	mov    edx,eax
1000015e:	c1 e0 04             	shl    eax,0x4
10000161:	c1 fa 04             	sar    edx,0x4
10000164:	25 f0 f0 00 00       	and    eax,0xf0f0
10000169:	81 e2 0f 0f 00 00    	and    edx,0xf0f
1000016f:	09 c2                	or     edx,eax
10000171:	89 d1                	mov    ecx,edx
10000173:	c1 e2 08             	shl    edx,0x8
10000176:	c1 f9 08             	sar    ecx,0x8
10000179:	0f b7 c2             	movzx  eax,dx
1000017c:	09 c8                	or     eax,ecx
1000017e:	c3                   	ret    

1000017f <_ssfn__zhuffman_decode>:
1000017f:	55                   	push   ebp
10000180:	57                   	push   edi
10000181:	56                   	push   esi
10000182:	53                   	push   ebx
10000183:	83 78 04 0f          	cmp    DWORD PTR [eax+0x4],0xf
10000187:	7f 1d                	jg     100001a6 <_ssfn__zhuffman_decode+0x27>
10000189:	8b 18                	mov    ebx,DWORD PTR [eax]
1000018b:	8d 4b 01             	lea    ecx,[ebx+0x1]
1000018e:	89 08                	mov    DWORD PTR [eax],ecx
10000190:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
10000193:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
10000196:	d3 e3                	shl    ebx,cl
10000198:	83 c1 08             	add    ecx,0x8
1000019b:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
1000019e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
100001a1:	83 f9 18             	cmp    ecx,0x18
100001a4:	eb e1                	jmp    10000187 <_ssfn__zhuffman_decode+0x8>
100001a6:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
100001a9:	89 f9                	mov    ecx,edi
100001ab:	81 e1 ff 01 00 00    	and    ecx,0x1ff
100001b1:	0f b7 0c 4a          	movzx  ecx,WORD PTR [edx+ecx*2]
100001b5:	89 cb                	mov    ebx,ecx
100001b7:	85 c9                	test   ecx,ecx
100001b9:	74 15                	je     100001d0 <_ssfn__zhuffman_decode+0x51>
100001bb:	c1 f9 09             	sar    ecx,0x9
100001be:	89 da                	mov    edx,ebx
100001c0:	d3 ef                	shr    edi,cl
100001c2:	29 48 04             	sub    DWORD PTR [eax+0x4],ecx
100001c5:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
100001c8:	81 e2 ff 01 00 00    	and    edx,0x1ff
100001ce:	eb 58                	jmp    10000228 <_ssfn__zhuffman_decode+0xa9>
100001d0:	89 d5                	mov    ebp,edx
100001d2:	89 c3                	mov    ebx,eax
100001d4:	be 0a 00 00 00       	mov    esi,0xa
100001d9:	89 f8                	mov    eax,edi
100001db:	e8 54 ff ff ff       	call   10000134 <_ssfn__bitreverse16>
100001e0:	3b 84 b5 20 04 00 00 	cmp    eax,DWORD PTR [ebp+esi*4+0x420]
100001e7:	7c 03                	jl     100001ec <_ssfn__zhuffman_decode+0x6d>
100001e9:	46                   	inc    esi
100001ea:	eb f4                	jmp    100001e0 <_ssfn__zhuffman_decode+0x61>
100001ec:	83 ca ff             	or     edx,0xffffffff
100001ef:	83 fe 10             	cmp    esi,0x10
100001f2:	74 34                	je     10000228 <_ssfn__zhuffman_decode+0xa9>
100001f4:	8d 14 36             	lea    edx,[esi+esi*1]
100001f7:	b9 10 00 00 00       	mov    ecx,0x10
100001fc:	01 ea                	add    edx,ebp
100001fe:	29 f1                	sub    ecx,esi
10000200:	d3 f8                	sar    eax,cl
10000202:	0f b7 8a 00 04 00 00 	movzx  ecx,WORD PTR [edx+0x400]
10000209:	0f b7 92 64 04 00 00 	movzx  edx,WORD PTR [edx+0x464]
10000210:	29 c8                	sub    eax,ecx
10000212:	29 73 04             	sub    DWORD PTR [ebx+0x4],esi
10000215:	89 f1                	mov    ecx,esi
10000217:	8d 84 10 d0 02 00 00 	lea    eax,[eax+edx*1+0x2d0]
1000021e:	d3 ef                	shr    edi,cl
10000220:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
10000223:	0f b7 54 45 04       	movzx  edx,WORD PTR [ebp+eax*2+0x4]
10000228:	5b                   	pop    ebx
10000229:	89 d0                	mov    eax,edx
1000022b:	5e                   	pop    esi
1000022c:	5f                   	pop    edi
1000022d:	5d                   	pop    ebp
1000022e:	c3                   	ret    

1000022f <_ssfn__zexpand>:
1000022f:	55                   	push   ebp
10000230:	57                   	push   edi
10000231:	56                   	push   esi
10000232:	53                   	push   ebx
10000233:	83 ec 0c             	sub    esp,0xc
10000236:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
10000239:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
1000023c:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
1000023f:	29 f9                	sub    ecx,edi
10000241:	83 f9 08             	cmp    ecx,0x8
10000244:	74 04                	je     1000024a <_ssfn__zexpand+0x1b>
10000246:	31 c0                	xor    eax,eax
10000248:	eb 3c                	jmp    10000286 <_ssfn__zexpand+0x57>
1000024a:	80 3f 53             	cmp    BYTE PTR [edi],0x53
1000024d:	75 f7                	jne    10000246 <_ssfn__zexpand+0x17>
1000024f:	80 7f 01 46          	cmp    BYTE PTR [edi+0x1],0x46
10000253:	75 f1                	jne    10000246 <_ssfn__zexpand+0x17>
10000255:	80 7f 02 4e          	cmp    BYTE PTR [edi+0x2],0x4e
10000259:	75 eb                	jne    10000246 <_ssfn__zexpand+0x17>
1000025b:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
1000025e:	89 c3                	mov    ebx,eax
10000260:	89 d6                	mov    esi,edx
10000262:	50                   	push   eax
10000263:	50                   	push   eax
10000264:	55                   	push   ebp
10000265:	57                   	push   edi
10000266:	e8 fc ff ff ff       	call   10000267 <_ssfn__zexpand+0x38>	10000267: R_386_PC32	realloc
1000026b:	83 c4 10             	add    esp,0x10
1000026e:	85 c0                	test   eax,eax
10000270:	74 d4                	je     10000246 <_ssfn__zexpand+0x17>
10000272:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10000275:	29 fe                	sub    esi,edi
10000277:	01 c6                	add    esi,eax
10000279:	01 e8                	add    eax,ebp
1000027b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
1000027e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10000281:	b8 01 00 00 00       	mov    eax,0x1
10000286:	83 c4 0c             	add    esp,0xc
10000289:	5b                   	pop    ebx
1000028a:	5e                   	pop    esi
1000028b:	5f                   	pop    edi
1000028c:	5d                   	pop    ebp
1000028d:	c3                   	ret    

1000028e <_ssfn__zbuild_huffman>:
1000028e:	55                   	push   ebp
1000028f:	57                   	push   edi
10000290:	56                   	push   esi
10000291:	53                   	push   ebx
10000292:	89 c3                	mov    ebx,eax
10000294:	81 ec a0 00 00 00    	sub    esp,0xa0
1000029a:	31 c0                	xor    eax,eax
1000029c:	89 0c 24             	mov    DWORD PTR [esp],ecx
1000029f:	8d 6c 24 5c          	lea    ebp,[esp+0x5c]
100002a3:	b9 11 00 00 00       	mov    ecx,0x11
100002a8:	89 ef                	mov    edi,ebp
100002aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
100002ae:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100002b0:	b9 00 01 00 00       	mov    ecx,0x100
100002b5:	89 df                	mov    edi,ebx
100002b7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100002b9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
100002bc:	7d 0f                	jge    100002cd <_ssfn__zbuild_huffman+0x3f>
100002be:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
100002c2:	0f b6 0c 06          	movzx  ecx,BYTE PTR [esi+eax*1]
100002c6:	40                   	inc    eax
100002c7:	ff 44 8c 5c          	inc    DWORD PTR [esp+ecx*4+0x5c]
100002cb:	eb ec                	jmp    100002b9 <_ssfn__zbuild_huffman+0x2b>
100002cd:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
100002d5:	b9 01 00 00 00       	mov    ecx,0x1
100002da:	b8 01 00 00 00       	mov    eax,0x1
100002df:	89 c7                	mov    edi,eax
100002e1:	d3 e7                	shl    edi,cl
100002e3:	39 7c 8d 00          	cmp    DWORD PTR [ebp+ecx*4+0x0],edi
100002e7:	0f 8f 10 01 00 00    	jg     100003fd <_ssfn__zbuild_huffman+0x16f>
100002ed:	41                   	inc    ecx
100002ee:	83 f9 10             	cmp    ecx,0x10
100002f1:	75 ec                	jne    100002df <_ssfn__zbuild_huffman+0x51>
100002f3:	31 ff                	xor    edi,edi
100002f5:	31 f6                	xor    esi,esi
100002f7:	b8 01 00 00 00       	mov    eax,0x1
100002fc:	8b 6c 84 5c          	mov    ebp,DWORD PTR [esp+eax*4+0x5c]
10000300:	89 7c 84 1c          	mov    DWORD PTR [esp+eax*4+0x1c],edi
10000304:	66 89 bc 43 00 04 00 00 	mov    WORD PTR [ebx+eax*2+0x400],di
1000030c:	66 89 b4 43 64 04 00 00 	mov    WORD PTR [ebx+eax*2+0x464],si
10000314:	01 ef                	add    edi,ebp
10000316:	85 ed                	test   ebp,ebp
10000318:	74 11                	je     1000032b <_ssfn__zbuild_huffman+0x9d>
1000031a:	ba 01 00 00 00       	mov    edx,0x1
1000031f:	88 c1                	mov    cl,al
10000321:	d3 e2                	shl    edx,cl
10000323:	39 fa                	cmp    edx,edi
10000325:	0f 8c d2 00 00 00    	jl     100003fd <_ssfn__zbuild_huffman+0x16f>
1000032b:	89 fa                	mov    edx,edi
1000032d:	b9 10 00 00 00       	mov    ecx,0x10
10000332:	01 ff                	add    edi,edi
10000334:	29 c1                	sub    ecx,eax
10000336:	01 ee                	add    esi,ebp
10000338:	d3 e2                	shl    edx,cl
1000033a:	89 94 83 20 04 00 00 	mov    DWORD PTR [ebx+eax*4+0x420],edx
10000341:	40                   	inc    eax
10000342:	83 f8 10             	cmp    eax,0x10
10000345:	75 b5                	jne    100002fc <_ssfn__zbuild_huffman+0x6e>
10000347:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000034a:	c7 83 60 04 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x460],0x10000
10000354:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000358:	31 ff                	xor    edi,edi
1000035a:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
1000035e:	0f 8d 9d 00 00 00    	jge    10000401 <_ssfn__zbuild_huffman+0x173>
10000364:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000368:	0f b6 34 38          	movzx  esi,BYTE PTR [eax+edi*1]
1000036c:	89 f2                	mov    edx,esi
1000036e:	85 f6                	test   esi,esi
10000370:	0f 84 81 00 00 00    	je     100003f7 <_ssfn__zbuild_huffman+0x169>
10000376:	8d 0c 36             	lea    ecx,[esi+esi*1]
10000379:	8b 6c b4 1c          	mov    ebp,DWORD PTR [esp+esi*4+0x1c]
1000037d:	8d 04 19             	lea    eax,[ecx+ebx*1]
10000380:	89 e9                	mov    ecx,ebp
10000382:	89 04 24             	mov    DWORD PTR [esp],eax
10000385:	0f b7 80 00 04 00 00 	movzx  eax,WORD PTR [eax+0x400]
1000038c:	29 c1                	sub    ecx,eax
1000038e:	89 c8                	mov    eax,ecx
10000390:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10000393:	0f b7 89 64 04 00 00 	movzx  ecx,WORD PTR [ecx+0x464]
1000039a:	01 c8                	add    eax,ecx
1000039c:	83 fe 09             	cmp    esi,0x9
1000039f:	88 94 03 84 04 00 00 	mov    BYTE PTR [ebx+eax*1+0x484],dl
100003a6:	66 89 bc 43 a4 05 00 00 	mov    WORD PTR [ebx+eax*2+0x5a4],di
100003ae:	7f 42                	jg     100003f2 <_ssfn__zbuild_huffman+0x164>
100003b0:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
100003b4:	89 e8                	mov    eax,ebp
100003b6:	e8 79 fd ff ff       	call   10000134 <_ssfn__bitreverse16>
100003bb:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
100003bf:	b9 10 00 00 00       	mov    ecx,0x10
100003c4:	29 f1                	sub    ecx,esi
100003c6:	d3 f8                	sar    eax,cl
100003c8:	88 d1                	mov    cl,dl
100003ca:	89 04 24             	mov    DWORD PTR [esp],eax
100003cd:	89 f2                	mov    edx,esi
100003cf:	b8 01 00 00 00       	mov    eax,0x1
100003d4:	c1 e2 09             	shl    edx,0x9
100003d7:	d3 e0                	shl    eax,cl
100003d9:	09 fa                	or     edx,edi
100003db:	89 c1                	mov    ecx,eax
100003dd:	81 3c 24 ff 01 00 00 	cmp    DWORD PTR [esp],0x1ff
100003e4:	7f 0c                	jg     100003f2 <_ssfn__zbuild_huffman+0x164>
100003e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
100003e9:	01 0c 24             	add    DWORD PTR [esp],ecx
100003ec:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
100003f0:	eb eb                	jmp    100003dd <_ssfn__zbuild_huffman+0x14f>
100003f2:	45                   	inc    ebp
100003f3:	89 6c b4 1c          	mov    DWORD PTR [esp+esi*4+0x1c],ebp
100003f7:	47                   	inc    edi
100003f8:	e9 5d ff ff ff       	jmp    1000035a <_ssfn__zbuild_huffman+0xcc>
100003fd:	31 c0                	xor    eax,eax
100003ff:	eb 05                	jmp    10000406 <_ssfn__zbuild_huffman+0x178>
10000401:	b8 01 00 00 00       	mov    eax,0x1
10000406:	81 c4 a0 00 00 00    	add    esp,0xa0
1000040c:	5b                   	pop    ebx
1000040d:	5e                   	pop    esi
1000040e:	5f                   	pop    edi
1000040f:	5d                   	pop    ebp
10000410:	c3                   	ret    

10000411 <_ssfn_fc.part.1>:
10000411:	55                   	push   ebp
10000412:	57                   	push   edi
10000413:	8d b8 6c f5 00 00    	lea    edi,[eax+0xf56c]
10000419:	56                   	push   esi
1000041a:	53                   	push   ebx
1000041b:	8d 98 28 f5 00 00    	lea    ebx,[eax+0xf528]
10000421:	83 ec 0c             	sub    esp,0xc
10000424:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
10000427:	74 5d                	je     10000486 <_ssfn_fc.part.1+0x75>
10000429:	31 f6                	xor    esi,esi
1000042b:	8b 03                	mov    eax,DWORD PTR [ebx]
1000042d:	83 3c 30 00          	cmp    DWORD PTR [eax+esi*1],0x0
10000431:	74 35                	je     10000468 <_ssfn_fc.part.1+0x57>
10000433:	31 ed                	xor    ebp,ebp
10000435:	8b 03                	mov    eax,DWORD PTR [ebx]
10000437:	8b 04 30             	mov    eax,DWORD PTR [eax+esi*1]
1000043a:	8b 04 28             	mov    eax,DWORD PTR [eax+ebp*1]
1000043d:	85 c0                	test   eax,eax
1000043f:	74 0c                	je     1000044d <_ssfn_fc.part.1+0x3c>
10000441:	83 ec 0c             	sub    esp,0xc
10000444:	50                   	push   eax
10000445:	e8 fc ff ff ff       	call   10000446 <_ssfn_fc.part.1+0x35>	10000446: R_386_PC32	free
1000044a:	83 c4 10             	add    esp,0x10
1000044d:	83 c5 04             	add    ebp,0x4
10000450:	81 fd 00 04 00 00    	cmp    ebp,0x400
10000456:	75 dd                	jne    10000435 <_ssfn_fc.part.1+0x24>
10000458:	83 ec 0c             	sub    esp,0xc
1000045b:	8b 03                	mov    eax,DWORD PTR [ebx]
1000045d:	ff 34 30             	push   DWORD PTR [eax+esi*1]
10000460:	e8 fc ff ff ff       	call   10000461 <_ssfn_fc.part.1+0x50>	10000461: R_386_PC32	free
10000465:	83 c4 10             	add    esp,0x10
10000468:	83 c6 04             	add    esi,0x4
1000046b:	81 fe 00 04 00 00    	cmp    esi,0x400
10000471:	75 b8                	jne    1000042b <_ssfn_fc.part.1+0x1a>
10000473:	83 ec 0c             	sub    esp,0xc
10000476:	ff 33                	push   DWORD PTR [ebx]
10000478:	e8 fc ff ff ff       	call   10000479 <_ssfn_fc.part.1+0x68>	10000479: R_386_PC32	free
1000047d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
10000483:	83 c4 10             	add    esp,0x10
10000486:	83 c3 04             	add    ebx,0x4
10000489:	39 fb                	cmp    ebx,edi
1000048b:	75 97                	jne    10000424 <_ssfn_fc.part.1+0x13>
1000048d:	83 c4 0c             	add    esp,0xc
10000490:	5b                   	pop    ebx
10000491:	5e                   	pop    esi
10000492:	5f                   	pop    edi
10000493:	5d                   	pop    ebp
10000494:	c3                   	ret    

10000495 <_ssfn_l>:
10000495:	57                   	push   edi
10000496:	56                   	push   esi
10000497:	53                   	push   ebx
10000498:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
1000049c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
100004a0:	39 ce                	cmp    esi,ecx
100004a2:	89 f3                	mov    ebx,esi
100004a4:	0f 9d c1             	setge  cl
100004a7:	c1 eb 1f             	shr    ebx,0x1f
100004aa:	09 d9                	or     ecx,ebx
100004ac:	89 fb                	mov    ebx,edi
100004ae:	c1 eb 1f             	shr    ebx,0x1f
100004b1:	08 d9                	or     cl,bl
100004b3:	0f 85 e9 00 00 00    	jne    100005a2 <_ssfn_l+0x10d>
100004b9:	39 d7                	cmp    edi,edx
100004bb:	0f 8d e1 00 00 00    	jge    100005a2 <_ssfn_l+0x10d>
100004c1:	8b 88 9c f5 00 00    	mov    ecx,DWORD PTR [eax+0xf59c]
100004c7:	8d 51 08             	lea    edx,[ecx+0x8]
100004ca:	8d 4f 08             	lea    ecx,[edi+0x8]
100004cd:	c1 fa 04             	sar    edx,0x4
100004d0:	c1 f9 04             	sar    ecx,0x4
100004d3:	39 ca                	cmp    edx,ecx
100004d5:	75 1a                	jne    100004f1 <_ssfn_l+0x5c>
100004d7:	8b 90 a0 f5 00 00    	mov    edx,DWORD PTR [eax+0xf5a0]
100004dd:	8d 4e 08             	lea    ecx,[esi+0x8]
100004e0:	83 c2 08             	add    edx,0x8
100004e3:	c1 f9 04             	sar    ecx,0x4
100004e6:	c1 fa 04             	sar    edx,0x4
100004e9:	39 ca                	cmp    edx,ecx
100004eb:	0f 84 b1 00 00 00    	je     100005a2 <_ssfn_l+0x10d>
100004f1:	89 c3                	mov    ebx,eax
100004f3:	8b 80 80 f5 00 00    	mov    eax,DWORD PTR [eax+0xf580]
100004f9:	39 83 84 f5 00 00    	cmp    DWORD PTR [ebx+0xf584],eax
100004ff:	7f 3e                	jg     1000053f <_ssfn_l+0xaa>
10000501:	05 00 02 00 00       	add    eax,0x200
10000506:	89 83 84 f5 00 00    	mov    DWORD PTR [ebx+0xf584],eax
1000050c:	52                   	push   edx
1000050d:	01 c0                	add    eax,eax
1000050f:	52                   	push   edx
10000510:	50                   	push   eax
10000511:	ff b3 6c f5 00 00    	push   DWORD PTR [ebx+0xf56c]
10000517:	e8 fc ff ff ff       	call   10000518 <_ssfn_l+0x83>	10000518: R_386_PC32	realloc
1000051c:	83 c4 10             	add    esp,0x10
1000051f:	89 83 6c f5 00 00    	mov    DWORD PTR [ebx+0xf56c],eax
10000525:	85 c0                	test   eax,eax
10000527:	75 16                	jne    1000053f <_ssfn_l+0xaa>
10000529:	c7 83 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf580],0x0
10000533:	c7 83 84 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf584],0x0
1000053d:	eb 63                	jmp    100005a2 <_ssfn_l+0x10d>
1000053f:	83 bb 80 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf580],0x0
10000546:	75 26                	jne    1000056e <_ssfn_l+0xd9>
10000548:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000054e:	8b 93 94 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf594]
10000554:	66 89 10             	mov    WORD PTR [eax],dx
10000557:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000055d:	8b 93 98 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf598]
10000563:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
10000567:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
1000056e:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000574:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000057a:	66 89 3c 50          	mov    WORD PTR [eax+edx*2],di
1000057e:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000584:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000058a:	66 89 74 50 02       	mov    WORD PTR [eax+edx*2+0x2],si
1000058f:	89 bb 9c f5 00 00    	mov    DWORD PTR [ebx+0xf59c],edi
10000595:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
1000059c:	89 b3 a0 f5 00 00    	mov    DWORD PTR [ebx+0xf5a0],esi
100005a2:	5b                   	pop    ebx
100005a3:	5e                   	pop    esi
100005a4:	5f                   	pop    edi
100005a5:	c3                   	ret    

100005a6 <_ssfn_b>:
100005a6:	55                   	push   ebp
100005a7:	57                   	push   edi
100005a8:	56                   	push   esi
100005a9:	53                   	push   ebx
100005aa:	83 ec 4c             	sub    esp,0x4c
100005ad:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
100005b1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
100005b5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100005b9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
100005bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100005c1:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
100005c5:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100005c9:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
100005cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100005d1:	8b 7c 24 70          	mov    edi,DWORD PTR [esp+0x70]
100005d5:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
100005d9:	8b 4c 24 74          	mov    ecx,DWORD PTR [esp+0x74]
100005dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100005e1:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100005e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100005e9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100005f0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100005f4:	83 f8 04             	cmp    eax,0x4
100005f7:	75 28                	jne    10000621 <_ssfn_b+0x7b>
100005f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100005fd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
10000601:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
10000605:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10000609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000060d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
10000611:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10000615:	83 c4 4c             	add    esp,0x4c
10000618:	5b                   	pop    ebx
10000619:	5e                   	pop    esi
1000061a:	5f                   	pop    edi
1000061b:	5d                   	pop    ebp
1000061c:	e9 74 fe ff ff       	jmp    10000495 <_ssfn_l>
10000621:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10000625:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
10000629:	75 0e                	jne    10000639 <_ssfn_b+0x93>
1000062b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
1000062f:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
10000633:	0f 84 19 01 00 00    	je     10000752 <_ssfn_b+0x1ac>
10000639:	be 02 00 00 00       	mov    esi,0x2
1000063e:	89 d8                	mov    eax,ebx
10000640:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
10000644:	99                   	cdq    
10000645:	f7 fe                	idiv   esi
10000647:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
1000064b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000064f:	89 e8                	mov    eax,ebp
10000651:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
10000655:	99                   	cdq    
10000656:	f7 fe                	idiv   esi
10000658:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
1000065c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000660:	89 f8                	mov    eax,edi
10000662:	29 d8                	sub    eax,ebx
10000664:	99                   	cdq    
10000665:	f7 fe                	idiv   esi
10000667:	01 c3                	add    ebx,eax
10000669:	89 c8                	mov    eax,ecx
1000066b:	29 e8                	sub    eax,ebp
1000066d:	99                   	cdq    
1000066e:	f7 fe                	idiv   esi
10000670:	01 e8                	add    eax,ebp
10000672:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000067a:	29 f8                	sub    eax,edi
1000067c:	99                   	cdq    
1000067d:	f7 fe                	idiv   esi
1000067f:	01 f8                	add    eax,edi
10000681:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10000685:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10000689:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000068d:	29 c8                	sub    eax,ecx
1000068f:	99                   	cdq    
10000690:	f7 fe                	idiv   esi
10000692:	01 c8                	add    eax,ecx
10000694:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10000698:	89 d8                	mov    eax,ebx
1000069a:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
1000069e:	99                   	cdq    
1000069f:	f7 fe                	idiv   esi
100006a1:	8d 0c 38             	lea    ecx,[eax+edi*1]
100006a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100006a8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
100006ac:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
100006b0:	99                   	cdq    
100006b1:	f7 fe                	idiv   esi
100006b3:	8d 2c 38             	lea    ebp,[eax+edi*1]
100006b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100006ba:	29 d8                	sub    eax,ebx
100006bc:	99                   	cdq    
100006bd:	f7 fe                	idiv   esi
100006bf:	83 ec 0c             	sub    esp,0xc
100006c2:	01 d8                	add    eax,ebx
100006c4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100006c8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100006cc:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
100006d0:	99                   	cdq    
100006d1:	f7 fe                	idiv   esi
100006d3:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
100006d7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100006db:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100006df:	29 c8                	sub    eax,ecx
100006e1:	99                   	cdq    
100006e2:	f7 fe                	idiv   esi
100006e4:	8d 1c 08             	lea    ebx,[eax+ecx*1]
100006e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100006eb:	29 e8                	sub    eax,ebp
100006ed:	99                   	cdq    
100006ee:	f7 fe                	idiv   esi
100006f0:	8d 34 28             	lea    esi,[eax+ebp*1]
100006f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100006f7:	8d 78 01             	lea    edi,[eax+0x1]
100006fa:	57                   	push   edi
100006fb:	56                   	push   esi
100006fc:	53                   	push   ebx
100006fd:	55                   	push   ebp
100006fe:	51                   	push   ecx
100006ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10000703:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10000707:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
1000070b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
1000070f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10000713:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
10000717:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
1000071b:	e8 86 fe ff ff       	call   100005a6 <_ssfn_b>
10000720:	83 c4 24             	add    esp,0x24
10000723:	57                   	push   edi
10000724:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000728:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
1000072c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
10000730:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
10000734:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
10000738:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
1000073c:	56                   	push   esi
1000073d:	53                   	push   ebx
1000073e:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10000742:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
10000746:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
1000074a:	e8 57 fe ff ff       	call   100005a6 <_ssfn_b>
1000074f:	83 c4 30             	add    esp,0x30
10000752:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10000757:	0f 85 9c fe ff ff    	jne    100005f9 <_ssfn_b+0x53>
1000075d:	83 c4 4c             	add    esp,0x4c
10000760:	5b                   	pop    ebx
10000761:	5e                   	pop    esi
10000762:	5f                   	pop    edi
10000763:	5d                   	pop    ebp
10000764:	c3                   	ret    

10000765 <_ssfn__zreceive>:
10000765:	56                   	push   esi
10000766:	53                   	push   ebx
10000767:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
1000076a:	7d 1d                	jge    10000789 <_ssfn__zreceive+0x24>
1000076c:	8b 18                	mov    ebx,DWORD PTR [eax]
1000076e:	8d 4b 01             	lea    ecx,[ebx+0x1]
10000771:	89 08                	mov    DWORD PTR [eax],ecx
10000773:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
10000776:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
10000779:	d3 e3                	shl    ebx,cl
1000077b:	83 c1 08             	add    ecx,0x8
1000077e:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
10000781:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000784:	83 f9 18             	cmp    ecx,0x18
10000787:	7e e3                	jle    1000076c <_ssfn__zreceive+0x7>
10000789:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
1000078c:	29 50 04             	sub    DWORD PTR [eax+0x4],edx
1000078f:	89 f3                	mov    ebx,esi
10000791:	88 d1                	mov    cl,dl
10000793:	d3 eb                	shr    ebx,cl
10000795:	88 d1                	mov    cl,dl
10000797:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
1000079a:	bb 01 00 00 00       	mov    ebx,0x1
1000079f:	d3 e3                	shl    ebx,cl
100007a1:	8d 43 ff             	lea    eax,[ebx-0x1]
100007a4:	5b                   	pop    ebx
100007a5:	21 f0                	and    eax,esi
100007a7:	5e                   	pop    esi
100007a8:	c3                   	ret    

100007a9 <ssfn_utf8>:
100007a9:	56                   	push   esi
100007aa:	53                   	push   ebx
100007ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
100007af:	8b 11                	mov    edx,DWORD PTR [ecx]
100007b1:	0f b6 32             	movzx  esi,BYTE PTR [edx]
100007b4:	89 f0                	mov    eax,esi
100007b6:	84 c0                	test   al,al
100007b8:	0f be d8             	movsx  ebx,al
100007bb:	78 04                	js     100007c1 <ssfn_utf8+0x18>
100007bd:	89 d8                	mov    eax,ebx
100007bf:	eb 7d                	jmp    1000083e <ssfn_utf8+0x95>
100007c1:	f7 c6 20 00 00 00    	test   esi,0x20
100007c7:	75 14                	jne    100007dd <ssfn_utf8+0x34>
100007c9:	8a 42 01             	mov    al,BYTE PTR [edx+0x1]
100007cc:	c1 e3 06             	shl    ebx,0x6
100007cf:	83 e0 3f             	and    eax,0x3f
100007d2:	81 e3 c0 07 00 00    	and    ebx,0x7c0
100007d8:	42                   	inc    edx
100007d9:	09 d8                	or     eax,ebx
100007db:	eb 5f                	jmp    1000083c <ssfn_utf8+0x93>
100007dd:	f7 c6 10 00 00 00    	test   esi,0x10
100007e3:	75 20                	jne    10000805 <ssfn_utf8+0x5c>
100007e5:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
100007e9:	c1 e3 0c             	shl    ebx,0xc
100007ec:	c1 e0 06             	shl    eax,0x6
100007ef:	0f b7 db             	movzx  ebx,bx
100007f2:	25 c0 0f 00 00       	and    eax,0xfc0
100007f7:	83 c2 02             	add    edx,0x2
100007fa:	09 d8                	or     eax,ebx
100007fc:	8a 1a                	mov    bl,BYTE PTR [edx]
100007fe:	83 e3 3f             	and    ebx,0x3f
10000801:	09 d8                	or     eax,ebx
10000803:	eb 37                	jmp    1000083c <ssfn_utf8+0x93>
10000805:	31 c0                	xor    eax,eax
10000807:	83 e6 08             	and    esi,0x8
1000080a:	75 32                	jne    1000083e <ssfn_utf8+0x95>
1000080c:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
10000810:	c1 e3 12             	shl    ebx,0x12
10000813:	c1 e0 0c             	shl    eax,0xc
10000816:	81 e3 00 00 1c 00    	and    ebx,0x1c0000
1000081c:	25 00 f0 03 00       	and    eax,0x3f000
10000821:	83 c2 03             	add    edx,0x3
10000824:	09 d8                	or     eax,ebx
10000826:	8a 1a                	mov    bl,BYTE PTR [edx]
10000828:	83 e3 3f             	and    ebx,0x3f
1000082b:	09 d8                	or     eax,ebx
1000082d:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
10000831:	c1 e3 06             	shl    ebx,0x6
10000834:	81 e3 c0 0f 00 00    	and    ebx,0xfc0
1000083a:	09 d8                	or     eax,ebx
1000083c:	89 11                	mov    DWORD PTR [ecx],edx
1000083e:	ff 01                	inc    DWORD PTR [ecx]
10000840:	5b                   	pop    ebx
10000841:	5e                   	pop    esi
10000842:	c3                   	ret    

10000843 <_ssfn_c>:
10000843:	55                   	push   ebp
10000844:	57                   	push   edi
10000845:	56                   	push   esi
10000846:	53                   	push   ebx
10000847:	83 ec 14             	sub    esp,0x14
1000084a:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
10000850:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10000854:	85 c0                	test   eax,eax
10000856:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
1000085c:	0f 84 e6 00 00 00    	je     10000948 <_ssfn_c+0x105>
10000862:	31 ff                	xor    edi,edi
10000864:	83 78 10 00          	cmp    DWORD PTR [eax+0x10],0x0
10000868:	0f 84 f3 00 00 00    	je     10000961 <_ssfn_c+0x11e>
1000086e:	85 d2                	test   edx,edx
10000870:	0f 84 eb 00 00 00    	je     10000961 <_ssfn_c+0x11e>
10000876:	80 3a 00             	cmp    BYTE PTR [edx],0x0
10000879:	0f 84 e2 00 00 00    	je     10000961 <_ssfn_c+0x11e>
1000087f:	89 d6                	mov    esi,edx
10000881:	89 cd                	mov    ebp,ecx
10000883:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10000886:	89 c3                	mov    ebx,eax
10000888:	85 d2                	test   edx,edx
1000088a:	74 38                	je     100008c4 <_ssfn_c+0x81>
1000088c:	8d 0c 13             	lea    ecx,[ebx+edx*1]
1000088f:	31 c0                	xor    eax,eax
10000891:	89 0c 24             	mov    DWORD PTR [esp],ecx
10000894:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10000897:	0f b7 14 41          	movzx  edx,WORD PTR [ecx+eax*2]
1000089b:	66 85 d2             	test   dx,dx
1000089e:	74 24                	je     100008c4 <_ssfn_c+0x81>
100008a0:	01 da                	add    edx,ebx
100008a2:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
100008a6:	8a 0a                	mov    cl,BYTE PTR [edx]
100008a8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
100008ac:	84 c9                	test   cl,cl
100008ae:	0f 84 9e 00 00 00    	je     10000952 <_ssfn_c+0x10f>
100008b4:	3a 0f                	cmp    cl,BYTE PTR [edi]
100008b6:	0f 85 90 00 00 00    	jne    1000094c <_ssfn_c+0x109>
100008bc:	47                   	inc    edi
100008bd:	42                   	inc    edx
100008be:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
100008c2:	eb e2                	jmp    100008a6 <_ssfn_c+0x63>
100008c4:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
100008c8:	8d 44 24 10          	lea    eax,[esp+0x10]
100008cc:	50                   	push   eax
100008cd:	e8 fc ff ff ff       	call   100008ce <_ssfn_c+0x8b>	100008ce: R_386_PC32	ssfn_utf8
100008d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100008d6:	29 f2                	sub    edx,esi
100008d8:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
100008db:	5a                   	pop    edx
100008dc:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
100008e0:	89 06                	mov    DWORD PTR [esi],eax
100008e2:	03 5b 10             	add    ebx,DWORD PTR [ebx+0x10]
100008e5:	89 df                	mov    edi,ebx
100008e7:	31 db                	xor    ebx,ebx
100008e9:	8a 17                	mov    dl,BYTE PTR [edi]
100008eb:	80 fa ff             	cmp    dl,0xff
100008ee:	75 08                	jne    100008f8 <_ssfn_c+0xb5>
100008f0:	81 c3 ff ff 00 00    	add    ebx,0xffff
100008f6:	eb 2a                	jmp    10000922 <_ssfn_c+0xdf>
100008f8:	88 d1                	mov    cl,dl
100008fa:	83 e1 c0             	and    ecx,0xffffffc0
100008fd:	80 f9 c0             	cmp    cl,0xc0
10000900:	75 16                	jne    10000918 <_ssfn_c+0xd5>
10000902:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
10000906:	c1 e2 08             	shl    edx,0x8
10000909:	83 c7 02             	add    edi,0x2
1000090c:	81 e2 00 3f 00 00    	and    edx,0x3f00
10000912:	09 ca                	or     edx,ecx
10000914:	01 d3                	add    ebx,edx
10000916:	eb 27                	jmp    1000093f <_ssfn_c+0xfc>
10000918:	80 f9 80             	cmp    cl,0x80
1000091b:	75 08                	jne    10000925 <_ssfn_c+0xe2>
1000091d:	83 e2 3f             	and    edx,0x3f
10000920:	01 d3                	add    ebx,edx
10000922:	47                   	inc    edi
10000923:	eb 1a                	jmp    1000093f <_ssfn_c+0xfc>
10000925:	39 d8                	cmp    eax,ebx
10000927:	74 38                	je     10000961 <_ssfn_c+0x11e>
10000929:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
1000092d:	83 e2 40             	and    edx,0x40
10000930:	80 fa 01             	cmp    dl,0x1
10000933:	19 d2                	sbb    edx,edx
10000935:	83 c2 06             	add    edx,0x6
10000938:	0f af d1             	imul   edx,ecx
1000093b:	8d 7c 17 06          	lea    edi,[edi+edx*1+0x6]
1000093f:	43                   	inc    ebx
10000940:	81 fb ff ff 10 00    	cmp    ebx,0x10ffff
10000946:	76 a1                	jbe    100008e9 <_ssfn_c+0xa6>
10000948:	31 ff                	xor    edi,edi
1000094a:	eb 15                	jmp    10000961 <_ssfn_c+0x11e>
1000094c:	40                   	inc    eax
1000094d:	e9 42 ff ff ff       	jmp    10000894 <_ssfn_c+0x51>
10000952:	29 f7                	sub    edi,esi
10000954:	05 00 f0 00 00       	add    eax,0xf000
10000959:	89 7d 00             	mov    DWORD PTR [ebp+0x0],edi
1000095c:	e9 7b ff ff ff       	jmp    100008dc <_ssfn_c+0x99>
10000961:	83 c4 14             	add    esp,0x14
10000964:	89 f8                	mov    eax,edi
10000966:	5b                   	pop    ebx
10000967:	5e                   	pop    esi
10000968:	5f                   	pop    edi
10000969:	5d                   	pop    ebp
1000096a:	c3                   	ret    

1000096b <_ssfn_zlib_decode>:
1000096b:	55                   	push   ebp
1000096c:	57                   	push   edi
1000096d:	56                   	push   esi
1000096e:	53                   	push   ebx
1000096f:	81 ec c8 19 00 00    	sub    esp,0x19c8
10000975:	6a 08                	push   0x8
10000977:	e8 fc ff ff ff       	call   10000978 <_ssfn_zlib_decode+0xd>	10000978: R_386_PC32	malloc
1000097c:	83 c4 10             	add    esp,0x10
1000097f:	89 c2                	mov    edx,eax
10000981:	85 c0                	test   eax,eax
10000983:	0f 84 eb 04 00 00    	je     10000e74 <_ssfn_zlib_decode+0x509>
10000989:	8b 84 24 d0 19 00 00 	mov    eax,DWORD PTR [esp+0x19d0]
10000990:	89 94 24 e0 09 00 00 	mov    DWORD PTR [esp+0x9e0],edx
10000997:	89 84 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],eax
1000099e:	89 94 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],edx
100009a5:	31 c0                	xor    eax,eax
100009a7:	83 c2 08             	add    edx,0x8
100009aa:	89 94 24 e4 09 00 00 	mov    DWORD PTR [esp+0x9e4],edx
100009b1:	c6 80 20 6f 03 10 08 	mov    BYTE PTR [eax+0x10036f20],0x8	100009b3: R_386_32	.bss
100009b8:	40                   	inc    eax
100009b9:	3d 90 00 00 00       	cmp    eax,0x90
100009be:	75 f1                	jne    100009b1 <_ssfn_zlib_decode+0x46>
100009c0:	c6 80 20 6f 03 10 09 	mov    BYTE PTR [eax+0x10036f20],0x9	100009c2: R_386_32	.bss
100009c7:	40                   	inc    eax
100009c8:	3d 00 01 00 00       	cmp    eax,0x100
100009cd:	75 f1                	jne    100009c0 <_ssfn_zlib_decode+0x55>
100009cf:	c6 80 20 6f 03 10 07 	mov    BYTE PTR [eax+0x10036f20],0x7	100009d1: R_386_32	.bss
100009d6:	40                   	inc    eax
100009d7:	3d 18 01 00 00       	cmp    eax,0x118
100009dc:	75 f1                	jne    100009cf <_ssfn_zlib_decode+0x64>
100009de:	c7 05 38 70 03 10 08 08 08 08 	mov    DWORD PTR ds:0x10037038,0x8080808	100009e0: R_386_32	.bss
100009e8:	c7 05 3c 70 03 10 08 08 08 08 	mov    DWORD PTR ds:0x1003703c,0x8080808	100009ea: R_386_32	.bss
100009f2:	31 c0                	xor    eax,eax
100009f4:	c6 80 00 6f 03 10 05 	mov    BYTE PTR [eax+0x10036f00],0x5	100009f6: R_386_32	.bss
100009fb:	40                   	inc    eax
100009fc:	83 f8 20             	cmp    eax,0x20
100009ff:	75 f3                	jne    100009f4 <_ssfn_zlib_decode+0x89>
10000a01:	c7 84 24 d4 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d4],0x0
10000a0c:	c7 84 24 d8 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d8],0x0
10000a17:	ba 01 00 00 00       	mov    edx,0x1
10000a1c:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000a23:	e8 3d fd ff ff       	call   10000765 <_ssfn__zreceive>
10000a28:	ba 02 00 00 00       	mov    edx,0x2
10000a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000a31:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000a38:	e8 28 fd ff ff       	call   10000765 <_ssfn__zreceive>
10000a3d:	89 c6                	mov    esi,eax
10000a3f:	85 c0                	test   eax,eax
10000a41:	0f 85 09 01 00 00    	jne    10000b50 <_ssfn_zlib_decode+0x1e5>
10000a47:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000a4e:	83 e2 07             	and    edx,0x7
10000a51:	74 0c                	je     10000a5f <_ssfn_zlib_decode+0xf4>
10000a53:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000a5a:	e8 06 fd ff ff       	call   10000765 <_ssfn__zreceive>
10000a5f:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000a66:	8b 8c 24 d8 09 00 00 	mov    ecx,DWORD PTR [esp+0x9d8]
10000a6d:	31 c0                	xor    eax,eax
10000a6f:	31 db                	xor    ebx,ebx
10000a71:	85 d2                	test   edx,edx
10000a73:	7f 14                	jg     10000a89 <_ssfn_zlib_decode+0x11e>
10000a75:	84 db                	test   bl,bl
10000a77:	74 22                	je     10000a9b <_ssfn_zlib_decode+0x130>
10000a79:	89 94 24 d4 09 00 00 	mov    DWORD PTR [esp+0x9d4],edx
10000a80:	89 8c 24 d8 09 00 00 	mov    DWORD PTR [esp+0x9d8],ecx
10000a87:	eb 12                	jmp    10000a9b <_ssfn_zlib_decode+0x130>
10000a89:	40                   	inc    eax
10000a8a:	83 ea 08             	sub    edx,0x8
10000a8d:	88 8c 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],cl
10000a94:	b3 01                	mov    bl,0x1
10000a96:	c1 e9 08             	shr    ecx,0x8
10000a99:	eb d6                	jmp    10000a71 <_ssfn_zlib_decode+0x106>
10000a9b:	83 f8 04             	cmp    eax,0x4
10000a9e:	74 1d                	je     10000abd <_ssfn_zlib_decode+0x152>
10000aa0:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000aa7:	40                   	inc    eax
10000aa8:	8d 4a 01             	lea    ecx,[edx+0x1]
10000aab:	89 8c 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],ecx
10000ab2:	8a 12                	mov    dl,BYTE PTR [edx]
10000ab4:	88 94 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],dl
10000abb:	eb de                	jmp    10000a9b <_ssfn_zlib_decode+0x130>
10000abd:	0f b6 84 24 ec 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ec]
10000ac5:	0f b6 94 24 ee 01 00 00 	movzx  edx,BYTE PTR [esp+0x1ee]
10000acd:	0f b6 9c 24 ed 01 00 00 	movzx  ebx,BYTE PTR [esp+0x1ed]
10000ad5:	c1 e3 08             	shl    ebx,0x8
10000ad8:	01 c3                	add    ebx,eax
10000ada:	0f b6 84 24 ef 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ef]
10000ae2:	c1 e0 08             	shl    eax,0x8
10000ae5:	01 d0                	add    eax,edx
10000ae7:	89 da                	mov    edx,ebx
10000ae9:	81 f2 ff ff 00 00    	xor    edx,0xffff
10000aef:	39 d0                	cmp    eax,edx
10000af1:	0f 85 69 03 00 00    	jne    10000e60 <_ssfn_zlib_decode+0x4f5>
10000af7:	8b 94 24 dc 09 00 00 	mov    edx,DWORD PTR [esp+0x9dc]
10000afe:	8d 04 1a             	lea    eax,[edx+ebx*1]
10000b01:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000b08:	73 14                	jae    10000b1e <_ssfn_zlib_decode+0x1b3>
10000b0a:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000b11:	e8 19 f7 ff ff       	call   1000022f <_ssfn__zexpand>
10000b16:	85 c0                	test   eax,eax
10000b18:	0f 84 42 03 00 00    	je     10000e60 <_ssfn_zlib_decode+0x4f5>
10000b1e:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000b25:	8b 84 24 dc 09 00 00 	mov    eax,DWORD PTR [esp+0x9dc]
10000b2c:	39 f3                	cmp    ebx,esi
10000b2e:	74 09                	je     10000b39 <_ssfn_zlib_decode+0x1ce>
10000b30:	8a 14 32             	mov    dl,BYTE PTR [edx+esi*1]
10000b33:	88 14 30             	mov    BYTE PTR [eax+esi*1],dl
10000b36:	46                   	inc    esi
10000b37:	eb e5                	jmp    10000b1e <_ssfn_zlib_decode+0x1b3>
10000b39:	01 da                	add    edx,ebx
10000b3b:	01 c3                	add    ebx,eax
10000b3d:	89 94 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],edx
10000b44:	89 9c 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebx
10000b4b:	e9 fc 02 00 00       	jmp    10000e4c <_ssfn_zlib_decode+0x4e1>
10000b50:	83 f8 03             	cmp    eax,0x3
10000b53:	0f 84 07 03 00 00    	je     10000e60 <_ssfn_zlib_decode+0x4f5>
10000b59:	4e                   	dec    esi
10000b5a:	75 2d                	jne    10000b89 <_ssfn_zlib_decode+0x21e>
10000b5c:	b9 20 01 00 00       	mov    ecx,0x120
10000b61:	ba 20 6f 03 10       	mov    edx,0x10036f20	10000b62: R_386_32	.bss
10000b66:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000b6d:	e8 1c f7 ff ff       	call   1000028e <_ssfn__zbuild_huffman>
10000b72:	85 c0                	test   eax,eax
10000b74:	0f 84 e6 02 00 00    	je     10000e60 <_ssfn_zlib_decode+0x4f5>
10000b7a:	b9 20 00 00 00       	mov    ecx,0x20
10000b7f:	ba 00 6f 03 10       	mov    edx,0x10036f00	10000b80: R_386_32	.bss
10000b84:	e9 78 01 00 00       	jmp    10000d01 <_ssfn_zlib_decode+0x396>
10000b89:	ba 05 00 00 00       	mov    edx,0x5
10000b8e:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000b95:	8d 5c 24 12          	lea    ebx,[esp+0x12]
10000b99:	e8 c7 fb ff ff       	call   10000765 <_ssfn__zreceive>
10000b9e:	89 df                	mov    edi,ebx
10000ba0:	ba 05 00 00 00       	mov    edx,0x5
10000ba5:	89 c5                	mov    ebp,eax
10000ba7:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000bae:	e8 b2 fb ff ff       	call   10000765 <_ssfn__zreceive>
10000bb3:	ba 04 00 00 00       	mov    edx,0x4
10000bb8:	89 c6                	mov    esi,eax
10000bba:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000bc1:	e8 9f fb ff ff       	call   10000765 <_ssfn__zreceive>
10000bc6:	b9 13 00 00 00       	mov    ecx,0x13
10000bcb:	83 c0 04             	add    eax,0x4
10000bce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000bd2:	31 c0                	xor    eax,eax
10000bd4:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000bd6:	31 ff                	xor    edi,edi
10000bd8:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10000bdc:	7e 1f                	jle    10000bfd <_ssfn_zlib_decode+0x292>
10000bde:	ba 03 00 00 00       	mov    edx,0x3
10000be3:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000bea:	47                   	inc    edi
10000beb:	e8 75 fb ff ff       	call   10000765 <_ssfn__zreceive>
10000bf0:	0f b6 97 ff 6a 00 10 	movzx  edx,BYTE PTR [edi+0x10006aff]	10000bf3: R_386_32	.text
10000bf7:	88 44 14 12          	mov    BYTE PTR [esp+edx*1+0x12],al
10000bfb:	eb db                	jmp    10000bd8 <_ssfn_zlib_decode+0x26d>
10000bfd:	b9 13 00 00 00       	mov    ecx,0x13
10000c02:	89 da                	mov    edx,ebx
10000c04:	8d 84 24 ec 01 00 00 	lea    eax,[esp+0x1ec]
10000c0b:	e8 7e f6 ff ff       	call   1000028e <_ssfn__zbuild_huffman>
10000c10:	85 c0                	test   eax,eax
10000c12:	0f 84 48 02 00 00    	je     10000e60 <_ssfn_zlib_decode+0x4f5>
10000c18:	8d 46 01             	lea    eax,[esi+0x1]
10000c1b:	81 c5 01 01 00 00    	add    ebp,0x101
10000c21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000c25:	31 f6                	xor    esi,esi
10000c27:	01 e8                	add    eax,ebp
10000c29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000c2d:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10000c31:	0f 8e 9f 00 00 00    	jle    10000cd6 <_ssfn_zlib_decode+0x36b>
10000c37:	8d 94 24 ec 01 00 00 	lea    edx,[esp+0x1ec]
10000c3e:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c45:	e8 35 f5 ff ff       	call   1000017f <_ssfn__zhuffman_decode>
10000c4a:	83 f8 12             	cmp    eax,0x12
10000c4d:	0f 87 0d 02 00 00    	ja     10000e60 <_ssfn_zlib_decode+0x4f5>
10000c53:	83 f8 0f             	cmp    eax,0xf
10000c56:	7f 07                	jg     10000c5f <_ssfn_zlib_decode+0x2f4>
10000c58:	88 44 34 25          	mov    BYTE PTR [esp+esi*1+0x25],al
10000c5c:	46                   	inc    esi
10000c5d:	eb ce                	jmp    10000c2d <_ssfn_zlib_decode+0x2c2>
10000c5f:	83 f8 10             	cmp    eax,0x10
10000c62:	75 22                	jne    10000c86 <_ssfn_zlib_decode+0x31b>
10000c64:	ba 02 00 00 00       	mov    edx,0x2
10000c69:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c70:	e8 f0 fa ff ff       	call   10000765 <_ssfn__zreceive>
10000c75:	85 f6                	test   esi,esi
10000c77:	8d 58 03             	lea    ebx,[eax+0x3]
10000c7a:	0f 84 e0 01 00 00    	je     10000e60 <_ssfn_zlib_decode+0x4f5>
10000c80:	8a 44 34 24          	mov    al,BYTE PTR [esp+esi*1+0x24]
10000c84:	eb 31                	jmp    10000cb7 <_ssfn_zlib_decode+0x34c>
10000c86:	83 f8 11             	cmp    eax,0x11
10000c89:	75 16                	jne    10000ca1 <_ssfn_zlib_decode+0x336>
10000c8b:	ba 03 00 00 00       	mov    edx,0x3
10000c90:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c97:	e8 c9 fa ff ff       	call   10000765 <_ssfn__zreceive>
10000c9c:	8d 58 03             	lea    ebx,[eax+0x3]
10000c9f:	eb 14                	jmp    10000cb5 <_ssfn_zlib_decode+0x34a>
10000ca1:	ba 07 00 00 00       	mov    edx,0x7
10000ca6:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000cad:	e8 b3 fa ff ff       	call   10000765 <_ssfn__zreceive>
10000cb2:	8d 58 0b             	lea    ebx,[eax+0xb]
10000cb5:	31 c0                	xor    eax,eax
10000cb7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000cbb:	29 f2                	sub    edx,esi
10000cbd:	39 da                	cmp    edx,ebx
10000cbf:	0f 8c 9b 01 00 00    	jl     10000e60 <_ssfn_zlib_decode+0x4f5>
10000cc5:	8d 54 34 25          	lea    edx,[esp+esi*1+0x25]
10000cc9:	89 d9                	mov    ecx,ebx
10000ccb:	89 d7                	mov    edi,edx
10000ccd:	01 de                	add    esi,ebx
10000ccf:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000cd1:	e9 57 ff ff ff       	jmp    10000c2d <_ssfn_zlib_decode+0x2c2>
10000cd6:	0f 85 84 01 00 00    	jne    10000e60 <_ssfn_zlib_decode+0x4f5>
10000cdc:	89 e9                	mov    ecx,ebp
10000cde:	8d 54 24 25          	lea    edx,[esp+0x25]
10000ce2:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000ce9:	e8 a0 f5 ff ff       	call   1000028e <_ssfn__zbuild_huffman>
10000cee:	85 c0                	test   eax,eax
10000cf0:	0f 84 6a 01 00 00    	je     10000e60 <_ssfn_zlib_decode+0x4f5>
10000cf6:	8d 44 24 25          	lea    eax,[esp+0x25]
10000cfa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10000cfe:	8d 14 28             	lea    edx,[eax+ebp*1]
10000d01:	8d 84 24 cc 11 00 00 	lea    eax,[esp+0x11cc]
10000d08:	e8 81 f5 ff ff       	call   1000028e <_ssfn__zbuild_huffman>
10000d0d:	85 c0                	test   eax,eax
10000d0f:	0f 84 4b 01 00 00    	je     10000e60 <_ssfn_zlib_decode+0x4f5>
10000d15:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000d1c:	8d 94 24 e8 09 00 00 	lea    edx,[esp+0x9e8]
10000d23:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d2a:	e8 50 f4 ff ff       	call   1000017f <_ssfn__zhuffman_decode>
10000d2f:	89 c3                	mov    ebx,eax
10000d31:	3d ff 00 00 00       	cmp    eax,0xff
10000d36:	7f 34                	jg     10000d6c <_ssfn_zlib_decode+0x401>
10000d38:	85 c0                	test   eax,eax
10000d3a:	0f 88 20 01 00 00    	js     10000e60 <_ssfn_zlib_decode+0x4f5>
10000d40:	39 ac 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],ebp
10000d47:	77 1d                	ja     10000d66 <_ssfn_zlib_decode+0x3fb>
10000d49:	89 ea                	mov    edx,ebp
10000d4b:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d52:	e8 d8 f4 ff ff       	call   1000022f <_ssfn__zexpand>
10000d57:	85 c0                	test   eax,eax
10000d59:	0f 84 01 01 00 00    	je     10000e60 <_ssfn_zlib_decode+0x4f5>
10000d5f:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000d66:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
10000d69:	45                   	inc    ebp
10000d6a:	eb b0                	jmp    10000d1c <_ssfn_zlib_decode+0x3b1>
10000d6c:	3d 00 01 00 00       	cmp    eax,0x100
10000d71:	75 0c                	jne    10000d7f <_ssfn_zlib_decode+0x414>
10000d73:	89 ac 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebp
10000d7a:	e9 cd 00 00 00       	jmp    10000e4c <_ssfn_zlib_decode+0x4e1>
10000d7f:	8d 80 ff fe ff ff    	lea    eax,[eax-0x101]
10000d85:	8b 14 85 20 6c 00 10 	mov    edx,DWORD PTR [eax*4+0x10006c20]	10000d88: R_386_32	.text
10000d8c:	8b 1c 85 a0 6c 00 10 	mov    ebx,DWORD PTR [eax*4+0x10006ca0]	10000d8f: R_386_32	.text
10000d93:	85 d2                	test   edx,edx
10000d95:	74 0e                	je     10000da5 <_ssfn_zlib_decode+0x43a>
10000d97:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d9e:	e8 c2 f9 ff ff       	call   10000765 <_ssfn__zreceive>
10000da3:	01 c3                	add    ebx,eax
10000da5:	8d 94 24 cc 11 00 00 	lea    edx,[esp+0x11cc]
10000dac:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000db3:	e8 c7 f3 ff ff       	call   1000017f <_ssfn__zhuffman_decode>
10000db8:	85 c0                	test   eax,eax
10000dba:	0f 88 a0 00 00 00    	js     10000e60 <_ssfn_zlib_decode+0x4f5>
10000dc0:	8b 14 85 20 6b 00 10 	mov    edx,DWORD PTR [eax*4+0x10006b20]	10000dc3: R_386_32	.text
10000dc7:	8b 3c 85 a0 6b 00 10 	mov    edi,DWORD PTR [eax*4+0x10006ba0]	10000dca: R_386_32	.text
10000dce:	85 d2                	test   edx,edx
10000dd0:	74 0e                	je     10000de0 <_ssfn_zlib_decode+0x475>
10000dd2:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000dd9:	e8 87 f9 ff ff       	call   10000765 <_ssfn__zreceive>
10000dde:	01 c7                	add    edi,eax
10000de0:	89 e8                	mov    eax,ebp
10000de2:	2b 84 24 e0 09 00 00 	sub    eax,DWORD PTR [esp+0x9e0]
10000de9:	39 f8                	cmp    eax,edi
10000deb:	7c 73                	jl     10000e60 <_ssfn_zlib_decode+0x4f5>
10000ded:	8d 44 1d 00          	lea    eax,[ebp+ebx*1+0x0]
10000df1:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000df8:	73 19                	jae    10000e13 <_ssfn_zlib_decode+0x4a8>
10000dfa:	89 ea                	mov    edx,ebp
10000dfc:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000e03:	e8 27 f4 ff ff       	call   1000022f <_ssfn__zexpand>
10000e08:	85 c0                	test   eax,eax
10000e0a:	74 54                	je     10000e60 <_ssfn_zlib_decode+0x4f5>
10000e0c:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000e13:	89 ee                	mov    esi,ebp
10000e15:	29 fe                	sub    esi,edi
10000e17:	4f                   	dec    edi
10000e18:	75 19                	jne    10000e33 <_ssfn_zlib_decode+0x4c8>
10000e1a:	85 db                	test   ebx,ebx
10000e1c:	0f 84 fa fe ff ff    	je     10000d1c <_ssfn_zlib_decode+0x3b1>
10000e22:	8a 06                	mov    al,BYTE PTR [esi]
10000e24:	01 eb                	add    ebx,ebp
10000e26:	45                   	inc    ebp
10000e27:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000e2a:	39 dd                	cmp    ebp,ebx
10000e2c:	75 f8                	jne    10000e26 <_ssfn_zlib_decode+0x4bb>
10000e2e:	e9 e9 fe ff ff       	jmp    10000d1c <_ssfn_zlib_decode+0x3b1>
10000e33:	85 db                	test   ebx,ebx
10000e35:	0f 84 e1 fe ff ff    	je     10000d1c <_ssfn_zlib_decode+0x3b1>
10000e3b:	8d 04 1e             	lea    eax,[esi+ebx*1]
10000e3e:	89 ef                	mov    edi,ebp
10000e40:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000e41:	39 f0                	cmp    eax,esi
10000e43:	75 fb                	jne    10000e40 <_ssfn_zlib_decode+0x4d5>
10000e45:	01 dd                	add    ebp,ebx
10000e47:	e9 d0 fe ff ff       	jmp    10000d1c <_ssfn_zlib_decode+0x3b1>
10000e4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10000e51:	0f 84 c0 fb ff ff    	je     10000a17 <_ssfn_zlib_decode+0xac>
10000e57:	8b 84 24 e0 09 00 00 	mov    eax,DWORD PTR [esp+0x9e0]
10000e5e:	eb 14                	jmp    10000e74 <_ssfn_zlib_decode+0x509>
10000e60:	83 ec 0c             	sub    esp,0xc
10000e63:	ff b4 24 ec 09 00 00 	push   DWORD PTR [esp+0x9ec]
10000e6a:	e8 fc ff ff ff       	call   10000e6b <_ssfn_zlib_decode+0x500>	10000e6b: R_386_PC32	free
10000e6f:	83 c4 10             	add    esp,0x10
10000e72:	31 c0                	xor    eax,eax
10000e74:	81 c4 bc 19 00 00    	add    esp,0x19bc
10000e7a:	5b                   	pop    ebx
10000e7b:	5e                   	pop    esi
10000e7c:	5f                   	pop    edi
10000e7d:	5d                   	pop    ebp
10000e7e:	c3                   	ret    

10000e7f <ssfn_load>:
10000e7f:	55                   	push   ebp
10000e80:	57                   	push   edi
10000e81:	56                   	push   esi
10000e82:	53                   	push   ebx
10000e83:	83 ec 1c             	sub    esp,0x1c
10000e86:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10000e8a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10000e8e:	85 ff                	test   edi,edi
10000e90:	0f 84 d0 01 00 00    	je     10001066 <ssfn_load+0x1e7>
10000e96:	85 f6                	test   esi,esi
10000e98:	0f 84 c8 01 00 00    	je     10001066 <ssfn_load+0x1e7>
10000e9e:	80 3e 1f             	cmp    BYTE PTR [esi],0x1f
10000ea1:	0f 85 a8 00 00 00    	jne    10000f4f <ssfn_load+0xd0>
10000ea7:	80 7e 01 8b          	cmp    BYTE PTR [esi+0x1],0x8b
10000eab:	0f 85 9e 00 00 00    	jne    10000f4f <ssfn_load+0xd0>
10000eb1:	80 7e 02 08          	cmp    BYTE PTR [esi+0x2],0x8
10000eb5:	74 0a                	je     10000ec1 <ssfn_load+0x42>
10000eb7:	bd fe ff ff ff       	mov    ebp,0xfffffffe
10000ebc:	e9 aa 01 00 00       	jmp    1000106b <ssfn_load+0x1ec>
10000ec1:	8a 46 03             	mov    al,BYTE PTR [esi+0x3]
10000ec4:	a8 04                	test   al,0x4
10000ec6:	75 05                	jne    10000ecd <ssfn_load+0x4e>
10000ec8:	83 c6 0a             	add    esi,0xa
10000ecb:	eb 08                	jmp    10000ed5 <ssfn_load+0x56>
10000ecd:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
10000ed1:	8d 74 16 0c          	lea    esi,[esi+edx*1+0xc]
10000ed5:	a8 08                	test   al,0x8
10000ed7:	74 07                	je     10000ee0 <ssfn_load+0x61>
10000ed9:	46                   	inc    esi
10000eda:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000ede:	eb f7                	jmp    10000ed7 <ssfn_load+0x58>
10000ee0:	a8 10                	test   al,0x10
10000ee2:	74 07                	je     10000eeb <ssfn_load+0x6c>
10000ee4:	46                   	inc    esi
10000ee5:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000ee9:	eb f7                	jmp    10000ee2 <ssfn_load+0x63>
10000eeb:	83 ec 0c             	sub    esp,0xc
10000eee:	56                   	push   esi
10000eef:	e8 fc ff ff ff       	call   10000ef0 <ssfn_load+0x71>	10000ef0: R_386_PC32	_ssfn_zlib_decode
10000ef4:	83 c4 10             	add    esp,0x10
10000ef7:	89 c6                	mov    esi,eax
10000ef9:	85 c0                	test   eax,eax
10000efb:	74 ba                	je     10000eb7 <ssfn_load+0x38>
10000efd:	50                   	push   eax
10000efe:	50                   	push   eax
10000eff:	8b 87 78 f5 00 00    	mov    eax,DWORD PTR [edi+0xf578]
10000f05:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
10000f0c:	50                   	push   eax
10000f0d:	ff b7 70 f5 00 00    	push   DWORD PTR [edi+0xf570]
10000f13:	e8 fc ff ff ff       	call   10000f14 <ssfn_load+0x95>	10000f14: R_386_PC32	realloc
10000f18:	83 c4 10             	add    esp,0x10
10000f1b:	89 87 70 f5 00 00    	mov    DWORD PTR [edi+0xf570],eax
10000f21:	85 c0                	test   eax,eax
10000f23:	75 0f                	jne    10000f34 <ssfn_load+0xb5>
10000f25:	c7 87 78 f5 00 00 00 00 00 00 	mov    DWORD PTR [edi+0xf578],0x0
10000f2f:	e9 1a 01 00 00       	jmp    1000104e <ssfn_load+0x1cf>
10000f34:	8b 97 78 f5 00 00    	mov    edx,DWORD PTR [edi+0xf578]
10000f3a:	8d 4a 01             	lea    ecx,[edx+0x1]
10000f3d:	89 8f 78 f5 00 00    	mov    DWORD PTR [edi+0xf578],ecx
10000f43:	89 34 90             	mov    DWORD PTR [eax+edx*4],esi
10000f46:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000f49:	01 87 7c f5 00 00    	add    DWORD PTR [edi+0xf57c],eax
10000f4f:	50                   	push   eax
10000f50:	6a 04                	push   0x4
10000f52:	68 cc 69 00 10       	push   0x100069cc	10000f53: R_386_32	.text
10000f57:	56                   	push   esi
10000f58:	e8 fc ff ff ff       	call   10000f59 <ssfn_load+0xda>	10000f59: R_386_PC32	memcmp
10000f5d:	83 c4 10             	add    esp,0x10
10000f60:	89 c5                	mov    ebp,eax
10000f62:	85 c0                	test   eax,eax
10000f64:	75 29                	jne    10000f8f <ssfn_load+0x110>
10000f66:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10000f69:	01 f3                	add    ebx,esi
10000f6b:	83 c6 08             	add    esi,0x8
10000f6e:	39 de                	cmp    esi,ebx
10000f70:	0f 83 f5 00 00 00    	jae    1000106b <ssfn_load+0x1ec>
10000f76:	50                   	push   eax
10000f77:	50                   	push   eax
10000f78:	56                   	push   esi
10000f79:	57                   	push   edi
10000f7a:	e8 fc ff ff ff       	call   10000f7b <ssfn_load+0xfc>	10000f7b: R_386_PC32	ssfn_load
10000f7f:	83 c4 10             	add    esp,0x10
10000f82:	85 c0                	test   eax,eax
10000f84:	0f 85 e1 00 00 00    	jne    1000106b <ssfn_load+0x1ec>
10000f8a:	03 76 04             	add    esi,DWORD PTR [esi+0x4]
10000f8d:	eb df                	jmp    10000f6e <ssfn_load+0xef>
10000f8f:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10000f92:	83 e0 0f             	and    eax,0xf
10000f95:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10000f99:	53                   	push   ebx
10000f9a:	6a 04                	push   0x4
10000f9c:	68 d1 69 00 10       	push   0x100069d1	10000f9d: R_386_32	.text
10000fa1:	56                   	push   esi
10000fa2:	e8 fc ff ff ff       	call   10000fa3 <ssfn_load+0x124>	10000fa3: R_386_PC32	memcmp
10000fa7:	83 c4 10             	add    esp,0x10
10000faa:	89 c5                	mov    ebp,eax
10000fac:	85 c0                	test   eax,eax
10000fae:	0f 85 03 ff ff ff    	jne    10000eb7 <ssfn_load+0x38>
10000fb4:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10000fb7:	8d 44 1e fc          	lea    eax,[esi+ebx*1-0x4]
10000fbb:	51                   	push   ecx
10000fbc:	6a 04                	push   0x4
10000fbe:	68 d6 69 00 10       	push   0x100069d6	10000fbf: R_386_32	.text
10000fc3:	50                   	push   eax
10000fc4:	e8 fc ff ff ff       	call   10000fc5 <ssfn_load+0x146>	10000fc5: R_386_PC32	memcmp
10000fc9:	83 c4 10             	add    esp,0x10
10000fcc:	85 c0                	test   eax,eax
10000fce:	0f 85 e3 fe ff ff    	jne    10000eb7 <ssfn_load+0x38>
10000fd4:	80 7c 24 0f 04       	cmp    BYTE PTR [esp+0xf],0x4
10000fd9:	0f 87 d8 fe ff ff    	ja     10000eb7 <ssfn_load+0x38>
10000fdf:	0f b7 4e 0e          	movzx  ecx,WORD PTR [esi+0xe]
10000fe3:	39 cb                	cmp    ebx,ecx
10000fe5:	0f 86 cc fe ff ff    	jbe    10000eb7 <ssfn_load+0x38>
10000feb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
10000fee:	39 c3                	cmp    ebx,eax
10000ff0:	0f 86 c1 fe ff ff    	jbe    10000eb7 <ssfn_load+0x38>
10000ff6:	3b 5e 14             	cmp    ebx,DWORD PTR [esi+0x14]
10000ff9:	0f 86 b8 fe ff ff    	jbe    10000eb7 <ssfn_load+0x38>
10000fff:	3b 5e 18             	cmp    ebx,DWORD PTR [esi+0x18]
10001002:	0f 86 af fe ff ff    	jbe    10000eb7 <ssfn_load+0x38>
10001008:	3b 5e 1c             	cmp    ebx,DWORD PTR [esi+0x1c]
1000100b:	0f 86 a6 fe ff ff    	jbe    10000eb7 <ssfn_load+0x38>
10001011:	39 c1                	cmp    ecx,eax
10001013:	0f 83 9e fe ff ff    	jae    10000eb7 <ssfn_load+0x38>
10001019:	0f b6 5c 24 0f       	movzx  ebx,BYTE PTR [esp+0xf]
1000101e:	8d 1c 9f             	lea    ebx,[edi+ebx*4]
10001021:	8b 83 a4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a4]
10001027:	40                   	inc    eax
10001028:	89 83 a4 f5 00 00    	mov    DWORD PTR [ebx+0xf5a4],eax
1000102e:	52                   	push   edx
1000102f:	c1 e0 02             	shl    eax,0x2
10001032:	52                   	push   edx
10001033:	50                   	push   eax
10001034:	ff 33                	push   DWORD PTR [ebx]
10001036:	e8 fc ff ff ff       	call   10001037 <ssfn_load+0x1b8>	10001037: R_386_PC32	realloc
1000103b:	83 c4 10             	add    esp,0x10
1000103e:	89 03                	mov    DWORD PTR [ebx],eax
10001040:	85 c0                	test   eax,eax
10001042:	75 0f                	jne    10001053 <ssfn_load+0x1d4>
10001044:	c7 83 a4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5a4],0x0
1000104e:	83 cd ff             	or     ebp,0xffffffff
10001051:	eb 18                	jmp    1000106b <ssfn_load+0x1ec>
10001053:	8b 93 a4 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf5a4]
10001059:	89 74 90 fc          	mov    DWORD PTR [eax+edx*4-0x4],esi
1000105d:	89 f8                	mov    eax,edi
1000105f:	e8 ad f3 ff ff       	call   10000411 <_ssfn_fc.part.1>
10001064:	eb 05                	jmp    1000106b <ssfn_load+0x1ec>
10001066:	bd fc ff ff ff       	mov    ebp,0xfffffffc
1000106b:	83 c4 1c             	add    esp,0x1c
1000106e:	89 e8                	mov    eax,ebp
10001070:	5b                   	pop    ebx
10001071:	5e                   	pop    esi
10001072:	5f                   	pop    edi
10001073:	5d                   	pop    ebp
10001074:	c3                   	ret    

10001075 <ssfn_free>:
10001075:	57                   	push   edi
10001076:	56                   	push   esi
10001077:	53                   	push   ebx
10001078:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000107c:	85 db                	test   ebx,ebx
1000107e:	74 7e                	je     100010fe <ssfn_free+0x89>
10001080:	89 d8                	mov    eax,ebx
10001082:	e8 8a f3 ff ff       	call   10000411 <_ssfn_fc.part.1>
10001087:	83 bb 70 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf570],0x0
1000108e:	74 32                	je     100010c2 <ssfn_free+0x4d>
10001090:	31 f6                	xor    esi,esi
10001092:	8b 83 70 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf570]
10001098:	39 b3 78 f5 00 00    	cmp    DWORD PTR [ebx+0xf578],esi
1000109e:	7e 16                	jle    100010b6 <ssfn_free+0x41>
100010a0:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
100010a3:	85 c0                	test   eax,eax
100010a5:	74 0c                	je     100010b3 <ssfn_free+0x3e>
100010a7:	83 ec 0c             	sub    esp,0xc
100010aa:	50                   	push   eax
100010ab:	e8 fc ff ff ff       	call   100010ac <ssfn_free+0x37>	100010ac: R_386_PC32	free
100010b0:	83 c4 10             	add    esp,0x10
100010b3:	46                   	inc    esi
100010b4:	eb dc                	jmp    10001092 <ssfn_free+0x1d>
100010b6:	83 ec 0c             	sub    esp,0xc
100010b9:	50                   	push   eax
100010ba:	e8 fc ff ff ff       	call   100010bb <ssfn_free+0x46>	100010bb: R_386_PC32	free
100010bf:	83 c4 10             	add    esp,0x10
100010c2:	31 f6                	xor    esi,esi
100010c4:	8b 04 b3             	mov    eax,DWORD PTR [ebx+esi*4]
100010c7:	85 c0                	test   eax,eax
100010c9:	74 0c                	je     100010d7 <ssfn_free+0x62>
100010cb:	83 ec 0c             	sub    esp,0xc
100010ce:	50                   	push   eax
100010cf:	e8 fc ff ff ff       	call   100010d0 <ssfn_free+0x5b>	100010d0: R_386_PC32	free
100010d4:	83 c4 10             	add    esp,0x10
100010d7:	46                   	inc    esi
100010d8:	83 fe 05             	cmp    esi,0x5
100010db:	75 e7                	jne    100010c4 <ssfn_free+0x4f>
100010dd:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100010e3:	85 c0                	test   eax,eax
100010e5:	74 0c                	je     100010f3 <ssfn_free+0x7e>
100010e7:	83 ec 0c             	sub    esp,0xc
100010ea:	50                   	push   eax
100010eb:	e8 fc ff ff ff       	call   100010ec <ssfn_free+0x77>	100010ec: R_386_PC32	free
100010f0:	83 c4 10             	add    esp,0x10
100010f3:	b9 72 3d 00 00       	mov    ecx,0x3d72
100010f8:	31 c0                	xor    eax,eax
100010fa:	89 df                	mov    edi,ebx
100010fc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100010fe:	5b                   	pop    ebx
100010ff:	5e                   	pop    esi
10001100:	5f                   	pop    edi
10001101:	c3                   	ret    

10001102 <ssfn_mem>:
10001102:	55                   	push   ebp
10001103:	31 c0                	xor    eax,eax
10001105:	57                   	push   edi
10001106:	56                   	push   esi
10001107:	53                   	push   ebx
10001108:	83 ec 08             	sub    esp,0x8
1000110b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
1000110f:	85 d2                	test   edx,edx
10001111:	0f 84 8e 00 00 00    	je     100011a5 <ssfn_mem+0xa3>
10001117:	b8 c8 f5 00 00       	mov    eax,0xf5c8
1000111c:	31 c9                	xor    ecx,ecx
1000111e:	8b 9c 8a a4 f5 00 00 	mov    ebx,DWORD PTR [edx+ecx*4+0xf5a4]
10001125:	41                   	inc    ecx
10001126:	8d 04 98             	lea    eax,[eax+ebx*4]
10001129:	83 f9 05             	cmp    ecx,0x5
1000112c:	75 f0                	jne    1000111e <ssfn_mem+0x1c>
1000112e:	03 82 7c f5 00 00    	add    eax,DWORD PTR [edx+0xf57c]
10001134:	31 c9                	xor    ecx,ecx
10001136:	8b b4 8a 28 f5 00 00 	mov    esi,DWORD PTR [edx+ecx*4+0xf528]
1000113d:	89 34 24             	mov    DWORD PTR [esp],esi
10001140:	85 f6                	test   esi,esi
10001142:	74 48                	je     1000118c <ssfn_mem+0x8a>
10001144:	31 db                	xor    ebx,ebx
10001146:	8b 34 24             	mov    esi,DWORD PTR [esp]
10001149:	8b 3c 9e             	mov    edi,DWORD PTR [esi+ebx*4]
1000114c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
10001150:	85 ff                	test   edi,edi
10001152:	74 2a                	je     1000117e <ssfn_mem+0x7c>
10001154:	31 f6                	xor    esi,esi
10001156:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
1000115a:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
1000115d:	85 ed                	test   ebp,ebp
1000115f:	74 0f                	je     10001170 <ssfn_mem+0x6e>
10001161:	0f b7 7d 00          	movzx  edi,WORD PTR [ebp+0x0]
10001165:	0f b6 6d 02          	movzx  ebp,BYTE PTR [ebp+0x2]
10001169:	0f af fd             	imul   edi,ebp
1000116c:	8d 44 38 08          	lea    eax,[eax+edi*1+0x8]
10001170:	46                   	inc    esi
10001171:	81 fe 00 01 00 00    	cmp    esi,0x100
10001177:	75 dd                	jne    10001156 <ssfn_mem+0x54>
10001179:	05 00 04 00 00       	add    eax,0x400
1000117e:	43                   	inc    ebx
1000117f:	81 fb 00 01 00 00    	cmp    ebx,0x100
10001185:	75 bf                	jne    10001146 <ssfn_mem+0x44>
10001187:	05 00 04 00 00       	add    eax,0x400
1000118c:	41                   	inc    ecx
1000118d:	83 f9 11             	cmp    ecx,0x11
10001190:	75 a4                	jne    10001136 <ssfn_mem+0x34>
10001192:	83 ba 6c f5 00 00 00 	cmp    DWORD PTR [edx+0xf56c],0x0
10001199:	74 0a                	je     100011a5 <ssfn_mem+0xa3>
1000119b:	8b 92 84 f5 00 00    	mov    edx,DWORD PTR [edx+0xf584]
100011a1:	01 d2                	add    edx,edx
100011a3:	01 d0                	add    eax,edx
100011a5:	83 c4 08             	add    esp,0x8
100011a8:	5b                   	pop    ebx
100011a9:	5e                   	pop    esi
100011aa:	5f                   	pop    edi
100011ab:	5d                   	pop    ebp
100011ac:	c3                   	ret    

100011ad <ssfn_select>:
100011ad:	55                   	push   ebp
100011ae:	57                   	push   edi
100011af:	56                   	push   esi
100011b0:	53                   	push   ebx
100011b1:	83 ec 1c             	sub    esp,0x1c
100011b4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
100011b8:	85 db                	test   ebx,ebx
100011ba:	75 0a                	jne    100011c6 <ssfn_select+0x19>
100011bc:	be fc ff ff ff       	mov    esi,0xfffffffc
100011c1:	e9 13 01 00 00       	jmp    100012d9 <ssfn_select+0x12c>
100011c6:	89 d8                	mov    eax,ebx
100011c8:	e8 44 f2 ff ff       	call   10000411 <_ssfn_fc.part.1>
100011cd:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100011d1:	81 e6 00 e0 ff ff    	and    esi,0xffffe000
100011d7:	0f 85 e9 00 00 00    	jne    100012c6 <ssfn_select+0x119>
100011dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100011e1:	83 e8 08             	sub    eax,0x8
100011e4:	3d b8 00 00 00       	cmp    eax,0xb8
100011e9:	0f 87 de 00 00 00    	ja     100012cd <ssfn_select+0x120>
100011ef:	81 7c 24 34 fe 00 00 00 	cmp    DWORD PTR [esp+0x34],0xfe
100011f7:	75 76                	jne    1000126f <ssfn_select+0xc2>
100011f9:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
100011fe:	74 bc                	je     100011bc <ssfn_select+0xf>
10001200:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10001204:	80 38 00             	cmp    BYTE PTR [eax],0x0
10001207:	74 b3                	je     100011bc <ssfn_select+0xf>
10001209:	31 ed                	xor    ebp,ebp
1000120b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000120f:	80 3c 28 00          	cmp    BYTE PTR [eax+ebp*1],0x0
10001213:	74 03                	je     10001218 <ssfn_select+0x6b>
10001215:	45                   	inc    ebp
10001216:	eb f3                	jmp    1000120b <ssfn_select+0x5e>
10001218:	8d 43 14             	lea    eax,[ebx+0x14]
1000121b:	89 df                	mov    edi,ebx
1000121d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001221:	8b 87 a4 f5 00 00    	mov    eax,DWORD PTR [edi+0xf5a4]
10001227:	31 d2                	xor    edx,edx
10001229:	89 04 24             	mov    DWORD PTR [esp],eax
1000122c:	39 14 24             	cmp    DWORD PTR [esp],edx
1000122f:	7e 33                	jle    10001264 <ssfn_select+0xb7>
10001231:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10001235:	8b 07                	mov    eax,DWORD PTR [edi]
10001237:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
1000123a:	50                   	push   eax
1000123b:	8d 41 20             	lea    eax,[ecx+0x20]
1000123e:	55                   	push   ebp
1000123f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10001243:	50                   	push   eax
10001244:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
10001248:	e8 fc ff ff ff       	call   10001249 <ssfn_select+0x9c>	10001249: R_386_PC32	memcmp
1000124d:	83 c4 10             	add    esp,0x10
10001250:	85 c0                	test   eax,eax
10001252:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10001256:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
1000125a:	75 05                	jne    10001261 <ssfn_select+0xb4>
1000125c:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
1000125f:	eb 34                	jmp    10001295 <ssfn_select+0xe8>
10001261:	42                   	inc    edx
10001262:	eb c8                	jmp    1000122c <ssfn_select+0x7f>
10001264:	83 c7 04             	add    edi,0x4
10001267:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
1000126b:	75 b4                	jne    10001221 <ssfn_select+0x74>
1000126d:	eb 65                	jmp    100012d4 <ssfn_select+0x127>
1000126f:	81 7c 24 34 ff 00 00 00 	cmp    DWORD PTR [esp+0x34],0xff
10001277:	74 15                	je     1000128e <ssfn_select+0xe1>
10001279:	83 7c 24 34 04       	cmp    DWORD PTR [esp+0x34],0x4
1000127e:	7f 54                	jg     100012d4 <ssfn_select+0x127>
10001280:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001284:	83 bc 83 a4 f5 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0xf5a4],0x0
1000128c:	74 46                	je     100012d4 <ssfn_select+0x127>
1000128e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10001295:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001299:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
100012a0:	89 83 b8 f5 00 00    	mov    DWORD PTR [ebx+0xf5b8],eax
100012a6:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
100012b0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100012b4:	89 83 bc f5 00 00    	mov    DWORD PTR [ebx+0xf5bc],eax
100012ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100012be:	89 83 c0 f5 00 00    	mov    DWORD PTR [ebx+0xf5c0],eax
100012c4:	eb 13                	jmp    100012d9 <ssfn_select+0x12c>
100012c6:	be fb ff ff ff       	mov    esi,0xfffffffb
100012cb:	eb 0c                	jmp    100012d9 <ssfn_select+0x12c>
100012cd:	be fa ff ff ff       	mov    esi,0xfffffffa
100012d2:	eb 05                	jmp    100012d9 <ssfn_select+0x12c>
100012d4:	be fd ff ff ff       	mov    esi,0xfffffffd
100012d9:	83 c4 1c             	add    esp,0x1c
100012dc:	89 f0                	mov    eax,esi
100012de:	5b                   	pop    ebx
100012df:	5e                   	pop    esi
100012e0:	5f                   	pop    edi
100012e1:	5d                   	pop    ebp
100012e2:	c3                   	ret    

100012e3 <ssfn_render>:
100012e3:	55                   	push   ebp
100012e4:	57                   	push   edi
100012e5:	56                   	push   esi
100012e6:	53                   	push   ebx
100012e7:	81 ec dc 05 01 00    	sub    esp,0x105dc
100012ed:	8b ac 24 f0 05 01 00 	mov    ebp,DWORD PTR [esp+0x105f0]
100012f4:	c7 84 24 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc8],0x0
100012ff:	85 ed                	test   ebp,ebp
10001301:	0f 94 c2             	sete   dl
10001304:	83 bc 24 f8 05 01 00 00 	cmp    DWORD PTR [esp+0x105f8],0x0
1000130c:	0f 94 c0             	sete   al
1000130f:	08 c2                	or     dl,al
10001311:	74 0a                	je     1000131d <ssfn_render+0x3a>
10001313:	b9 fc ff ff ff       	mov    ecx,0xfffffffc
10001318:	e9 14 1e 00 00       	jmp    10003131 <ssfn_render+0x1e4e>
1000131d:	8b 84 24 f8 05 01 00 	mov    eax,DWORD PTR [esp+0x105f8]
10001324:	31 c9                	xor    ecx,ecx
10001326:	8a 00                	mov    al,BYTE PTR [eax]
10001328:	84 c0                	test   al,al
1000132a:	0f 84 01 1e 00 00    	je     10003131 <ssfn_render+0x1e4e>
10001330:	3c 0d                	cmp    al,0xd
10001332:	75 0f                	jne    10001343 <ssfn_render+0x60>
10001334:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000133b:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
10001341:	eb 31                	jmp    10001374 <ssfn_render+0x91>
10001343:	3c 0a                	cmp    al,0xa
10001345:	75 37                	jne    1000137e <ssfn_render+0x9b>
10001347:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000134e:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
10001354:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
10001357:	8b 85 c4 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c4]
1000135d:	85 c0                	test   eax,eax
1000135f:	75 06                	jne    10001367 <ssfn_render+0x84>
10001361:	8b 85 c0 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c0]
10001367:	01 d0                	add    eax,edx
10001369:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10001370:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
10001374:	b9 01 00 00 00       	mov    ecx,0x1
10001379:	e9 b3 1d 00 00       	jmp    10003131 <ssfn_render+0x1e4e>
1000137e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001381:	85 c0                	test   eax,eax
10001383:	74 3e                	je     100013c3 <ssfn_render+0xe0>
10001385:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
10001388:	8d b4 24 c0 00 00 00 	lea    esi,[esp+0xc0]
1000138f:	56                   	push   esi
10001390:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001397:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000139e:	e8 a0 f4 ff ff       	call   10000843 <_ssfn_c>
100013a3:	5b                   	pop    ebx
100013a4:	85 c0                	test   eax,eax
100013a6:	0f 85 71 02 00 00    	jne    1000161d <ssfn_render+0x33a>
100013ac:	8b 95 bc f5 00 00    	mov    edx,DWORD PTR [ebp+0xf5bc]
100013b2:	81 e2 00 01 00 00    	and    edx,0x100
100013b8:	0f 84 fd 01 00 00    	je     100015bb <ssfn_render+0x2d8>
100013be:	e9 1d 02 00 00       	jmp    100015e0 <ssfn_render+0x2fd>
100013c3:	8b 85 b8 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5b8]
100013c9:	c7 45 18 00 00 00 00 	mov    DWORD PTR [ebp+0x18],0x0
100013d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100013d4:	3d fd 00 00 00       	cmp    eax,0xfd
100013d9:	7f 08                	jg     100013e3 <ssfn_render+0x100>
100013db:	89 c3                	mov    ebx,eax
100013dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100013e1:	eb 3f                	jmp    10001422 <ssfn_render+0x13f>
100013e3:	31 db                	xor    ebx,ebx
100013e5:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
100013ed:	eb 33                	jmp    10001422 <ssfn_render+0x13f>
100013ef:	85 c0                	test   eax,eax
100013f1:	0f 84 64 01 00 00    	je     1000155b <ssfn_render+0x278>
100013f7:	43                   	inc    ebx
100013f8:	3b 5c 24 10          	cmp    ebx,DWORD PTR [esp+0x10]
100013fc:	7e 28                	jle    10001426 <ssfn_render+0x143>
100013fe:	85 c0                	test   eax,eax
10001400:	0f 85 17 02 00 00    	jne    1000161d <ssfn_render+0x33a>
10001406:	31 db                	xor    ebx,ebx
10001408:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
10001410:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
10001418:	74 92                	je     100013ac <ssfn_render+0xc9>
1000141a:	c7 44 24 0c ff 00 00 00 	mov    DWORD PTR [esp+0xc],0xff
10001422:	31 c0                	xor    eax,eax
10001424:	eb d2                	jmp    100013f8 <ssfn_render+0x115>
10001426:	8b 74 9d 00          	mov    esi,DWORD PTR [ebp+ebx*4+0x0]
1000142a:	f6 85 bc f5 00 00 03 	test   BYTE PTR [ebp+0xf5bc],0x3
10001431:	74 bc                	je     100013ef <ssfn_render+0x10c>
10001433:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000143e:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10001445:	39 94 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],edx
1000144c:	7e 50                	jle    1000149e <ssfn_render+0x1bb>
1000144e:	8b 3c 96             	mov    edi,DWORD PTR [esi+edx*4]
10001451:	0f b6 57 08          	movzx  edx,BYTE PTR [edi+0x8]
10001455:	c1 fa 04             	sar    edx,0x4
10001458:	33 95 bc f5 00 00    	xor    edx,DWORD PTR [ebp+0xf5bc]
1000145e:	80 e2 03             	and    dl,0x3
10001461:	75 32                	jne    10001495 <ssfn_render+0x1b2>
10001463:	0f b6 57 0b          	movzx  edx,BYTE PTR [edi+0xb]
10001467:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
1000146d:	75 26                	jne    10001495 <ssfn_render+0x1b2>
1000146f:	8d 84 24 c0 00 00 00 	lea    eax,[esp+0xc0]
10001476:	50                   	push   eax
10001477:	89 f8                	mov    eax,edi
10001479:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001480:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001487:	e8 b7 f3 ff ff       	call   10000843 <_ssfn_c>
1000148c:	59                   	pop    ecx
1000148d:	85 c0                	test   eax,eax
1000148f:	0f 85 04 01 00 00    	jne    10001599 <ssfn_render+0x2b6>
10001495:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
1000149c:	eb a0                	jmp    1000143e <ssfn_render+0x15b>
1000149e:	85 c0                	test   eax,eax
100014a0:	0f 85 51 ff ff ff    	jne    100013f7 <ssfn_render+0x114>
100014a6:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100014b1:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100014b8:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
100014bf:	0f 8e f9 1b 00 00    	jle    100030be <ssfn_render+0x1ddb>
100014c5:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100014c8:	0f b6 50 0b          	movzx  edx,BYTE PTR [eax+0xb]
100014cc:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
100014d2:	74 09                	je     100014dd <ssfn_render+0x1fa>
100014d4:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100014db:	eb d4                	jmp    100014b1 <ssfn_render+0x1ce>
100014dd:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100014e4:	57                   	push   edi
100014e5:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100014ec:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100014f3:	e8 4b f3 ff ff       	call   10000843 <_ssfn_c>
100014f8:	5a                   	pop    edx
100014f9:	85 c0                	test   eax,eax
100014fb:	74 d7                	je     100014d4 <ssfn_render+0x1f1>
100014fd:	e9 97 00 00 00       	jmp    10001599 <ssfn_render+0x2b6>
10001502:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001505:	0f b6 50 08          	movzx  edx,BYTE PTR [eax+0x8]
10001509:	c1 fa 04             	sar    edx,0x4
1000150c:	31 ca                	xor    edx,ecx
1000150e:	80 e2 03             	and    dl,0x3
10001511:	0f 84 b7 1b 00 00    	je     100030ce <ssfn_render+0x1deb>
10001517:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
1000151e:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001525:	8b 8d bc f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf5bc]
1000152b:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001532:	7f ce                	jg     10001502 <ssfn_render+0x21f>
10001534:	83 e1 03             	and    ecx,0x3
10001537:	83 f9 03             	cmp    ecx,0x3
1000153a:	75 1f                	jne    1000155b <ssfn_render+0x278>
1000153c:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001547:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000154e:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001555:	0f 8f 9c 1b 00 00    	jg     100030f7 <ssfn_render+0x1e14>
1000155b:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001566:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000156d:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001574:	7e 3e                	jle    100015b4 <ssfn_render+0x2d1>
10001576:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001579:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10001580:	57                   	push   edi
10001581:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001588:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000158f:	e8 af f2 ff ff       	call   10000843 <_ssfn_c>
10001594:	5a                   	pop    edx
10001595:	85 c0                	test   eax,eax
10001597:	74 12                	je     100015ab <ssfn_render+0x2c8>
10001599:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
100015a0:	8b 14 96             	mov    edx,DWORD PTR [esi+edx*4]
100015a3:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
100015a6:	e9 4c fe ff ff       	jmp    100013f7 <ssfn_render+0x114>
100015ab:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100015b2:	eb b2                	jmp    10001566 <ssfn_render+0x283>
100015b4:	31 c0                	xor    eax,eax
100015b6:	e9 3c fe ff ff       	jmp    100013f7 <ssfn_render+0x114>
100015bb:	8b 9d b8 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5b8]
100015c1:	c7 84 24 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc0],0x0
100015cc:	81 fb fd 00 00 00    	cmp    ebx,0xfd
100015d2:	7f 16                	jg     100015ea <ssfn_render+0x307>
100015d4:	89 da                	mov    edx,ebx
100015d6:	31 c0                	xor    eax,eax
100015d8:	39 da                	cmp    edx,ebx
100015da:	7e 15                	jle    100015f1 <ssfn_render+0x30e>
100015dc:	85 c0                	test   eax,eax
100015de:	75 3d                	jne    1000161d <ssfn_render+0x33a>
100015e0:	b9 f9 ff ff ff       	mov    ecx,0xfffffff9
100015e5:	e9 47 1b 00 00       	jmp    10003131 <ssfn_render+0x1e4e>
100015ea:	bb 04 00 00 00       	mov    ebx,0x4
100015ef:	eb e5                	jmp    100015d6 <ssfn_render+0x2f3>
100015f1:	85 c0                	test   eax,eax
100015f3:	75 28                	jne    1000161d <ssfn_render+0x33a>
100015f5:	83 bc 95 a4 f5 00 00 00 	cmp    DWORD PTR [ebp+edx*4+0xf5a4],0x0
100015fd:	74 1b                	je     1000161a <ssfn_render+0x337>
100015ff:	8b 4c 95 00          	mov    ecx,DWORD PTR [ebp+edx*4+0x0]
10001603:	8b 09                	mov    ecx,DWORD PTR [ecx]
10001605:	85 c9                	test   ecx,ecx
10001607:	74 11                	je     1000161a <ssfn_render+0x337>
10001609:	8b 71 10             	mov    esi,DWORD PTR [ecx+0x10]
1000160c:	80 3c 31 00          	cmp    BYTE PTR [ecx+esi*1],0x0
10001610:	78 08                	js     1000161a <ssfn_render+0x337>
10001612:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
10001615:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
10001618:	01 c8                	add    eax,ecx
1000161a:	42                   	inc    edx
1000161b:	eb bb                	jmp    100015d8 <ssfn_render+0x2f5>
1000161d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001620:	b9 fd ff ff ff       	mov    ecx,0xfffffffd
10001625:	85 d2                	test   edx,edx
10001627:	0f 84 04 1b 00 00    	je     10003131 <ssfn_render+0x1e4e>
1000162d:	80 7a 0b 00          	cmp    BYTE PTR [edx+0xb],0x0
10001631:	0f 84 fa 1a 00 00    	je     10003131 <ssfn_render+0x1e4e>
10001637:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
1000163d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10001641:	85 ff                	test   edi,edi
10001643:	0f 84 e8 1a 00 00    	je     10003131 <ssfn_render+0x1e4e>
10001649:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
10001650:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
10001654:	c1 ef 10             	shr    edi,0x10
10001657:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
1000165b:	83 ff 10             	cmp    edi,0x10
1000165e:	0f 87 af fc ff ff    	ja     10001313 <ssfn_render+0x30>
10001664:	8d 70 06             	lea    esi,[eax+0x6]
10001667:	89 85 74 f5 00 00    	mov    DWORD PTR [ebp+0xf574],eax
1000166d:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10001671:	8b b5 bc f5 00 00    	mov    esi,DWORD PTR [ebp+0xf5bc]
10001677:	89 f7                	mov    edi,esi
10001679:	81 e7 00 02 00 00    	and    edi,0x200
1000167f:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10001683:	75 34                	jne    100016b9 <ssfn_render+0x3d6>
10001685:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001689:	8b 8c bd 28 f5 00 00 	mov    ecx,DWORD PTR [ebp+edi*4+0xf528]
10001690:	85 c9                	test   ecx,ecx
10001692:	74 25                	je     100016b9 <ssfn_render+0x3d6>
10001694:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001698:	0f b6 ff             	movzx  edi,bh
1000169b:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
1000169e:	85 c9                	test   ecx,ecx
100016a0:	74 17                	je     100016b9 <ssfn_render+0x3d6>
100016a2:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
100016a7:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
100016aa:	85 c9                	test   ecx,ecx
100016ac:	74 0b                	je     100016b9 <ssfn_render+0x3d6>
100016ae:	89 8d 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],ecx
100016b4:	e9 25 0d 00 00       	jmp    100023de <ssfn_render+0x10fb>
100016b9:	0f b6 4a 0b          	movzx  ecx,BYTE PTR [edx+0xb]
100016bd:	f7 c6 40 00 00 00    	test   esi,0x40
100016c3:	75 1a                	jne    100016df <ssfn_render+0x3fc>
100016c5:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
100016c9:	7e 10                	jle    100016db <ssfn_render+0x3f8>
100016cb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100016cf:	83 c7 04             	add    edi,0x4
100016d2:	83 e7 fc             	and    edi,0xfffffffc
100016d5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100016d9:	eb 04                	jmp    100016df <ssfn_render+0x3fc>
100016db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
100016df:	c6 44 24 28 00       	mov    BYTE PTR [esp+0x28],0x0
100016e4:	f7 c6 02 00 00 00    	test   esi,0x2
100016ea:	74 14                	je     10001700 <ssfn_render+0x41d>
100016ec:	8a 5a 08             	mov    bl,BYTE PTR [edx+0x8]
100016ef:	c0 eb 05             	shr    bl,0x5
100016f2:	89 df                	mov    edi,ebx
100016f4:	83 f7 01             	xor    edi,0x1
100016f7:	83 e7 01             	and    edi,0x1
100016fa:	89 fb                	mov    ebx,edi
100016fc:	88 5c 24 28          	mov    BYTE PTR [esp+0x28],bl
10001700:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
10001705:	83 e6 01             	and    esi,0x1
10001708:	74 10                	je     1000171a <ssfn_render+0x437>
1000170a:	f6 42 08 10          	test   BYTE PTR [edx+0x8],0x10
1000170e:	75 0a                	jne    1000171a <ssfn_render+0x437>
10001710:	8d 51 40             	lea    edx,[ecx+0x40]
10001713:	c1 fa 06             	sar    edx,0x6
10001716:	88 54 24 48          	mov    BYTE PTR [esp+0x48],dl
1000171a:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
1000171e:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001723:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10001727:	99                   	cdq    
10001728:	f7 f9                	idiv   ecx
1000172a:	89 c1                	mov    ecx,eax
1000172c:	31 c0                	xor    eax,eax
1000172e:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001733:	74 0c                	je     10001741 <ssfn_render+0x45e>
10001735:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001739:	be 04 00 00 00       	mov    esi,0x4
1000173e:	99                   	cdq    
1000173f:	f7 fe                	idiv   esi
10001741:	01 c8                	add    eax,ecx
10001743:	0f b6 74 24 48       	movzx  esi,BYTE PTR [esp+0x48]
10001748:	b9 fa ff ff ff       	mov    ecx,0xfffffffa
1000174d:	01 f0                	add    eax,esi
1000174f:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
10001753:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001757:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000175b:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
10001760:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001764:	3d ff f4 00 00       	cmp    eax,0xf4ff
10001769:	0f 8f c2 19 00 00    	jg     10003131 <ssfn_render+0x1e4e>
1000176f:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
10001774:	0f 85 f0 00 00 00    	jne    1000186a <ssfn_render+0x587>
1000177a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000177e:	8d 74 85 00          	lea    esi,[ebp+eax*4+0x0]
10001782:	83 be 28 f5 00 00 00 	cmp    DWORD PTR [esi+0xf528],0x0
10001789:	75 2f                	jne    100017ba <ssfn_render+0x4d7>
1000178b:	83 ec 0c             	sub    esp,0xc
1000178e:	68 00 04 00 00       	push   0x400
10001793:	e8 fc ff ff ff       	call   10001794 <ssfn_render+0x4b1>	10001794: R_386_PC32	malloc
10001798:	83 c4 10             	add    esp,0x10
1000179b:	89 86 28 f5 00 00    	mov    DWORD PTR [esi+0xf528],eax
100017a1:	85 c0                	test   eax,eax
100017a3:	75 08                	jne    100017ad <ssfn_render+0x4ca>
100017a5:	83 c9 ff             	or     ecx,0xffffffff
100017a8:	e9 84 19 00 00       	jmp    10003131 <ssfn_render+0x1e4e>
100017ad:	89 c7                	mov    edi,eax
100017af:	b9 00 01 00 00       	mov    ecx,0x100
100017b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100017b8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100017ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100017be:	0f b6 dc             	movzx  ebx,ah
100017c1:	8b 86 28 f5 00 00    	mov    eax,DWORD PTR [esi+0xf528]
100017c7:	8d 1c 98             	lea    ebx,[eax+ebx*4]
100017ca:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
100017cd:	75 3a                	jne    10001809 <ssfn_render+0x526>
100017cf:	83 ec 0c             	sub    esp,0xc
100017d2:	68 00 04 00 00       	push   0x400
100017d7:	e8 fc ff ff ff       	call   100017d8 <ssfn_render+0x4f5>	100017d8: R_386_PC32	malloc
100017dc:	89 03                	mov    DWORD PTR [ebx],eax
100017de:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
100017e5:	83 c4 10             	add    esp,0x10
100017e8:	89 c2                	mov    edx,eax
100017ea:	0f b6 c4             	movzx  eax,ah
100017ed:	c1 ea 10             	shr    edx,0x10
100017f0:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
100017f7:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
100017fa:	85 d2                	test   edx,edx
100017fc:	74 a7                	je     100017a5 <ssfn_render+0x4c2>
100017fe:	b9 00 01 00 00       	mov    ecx,0x100
10001803:	31 c0                	xor    eax,eax
10001805:	89 d7                	mov    edi,edx
10001807:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10001809:	8b 84 24 c0 00 00 00 	mov    eax,DWORD PTR [esp+0xc0]
10001810:	83 ec 0c             	sub    esp,0xc
10001813:	0f b6 cc             	movzx  ecx,ah
10001816:	89 c2                	mov    edx,eax
10001818:	0f b6 c0             	movzx  eax,al
1000181b:	c1 ea 10             	shr    edx,0x10
1000181e:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001825:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
10001828:	8d 1c 82             	lea    ebx,[edx+eax*4]
1000182b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000182f:	83 c0 08             	add    eax,0x8
10001832:	50                   	push   eax
10001833:	e8 fc ff ff ff       	call   10001834 <ssfn_render+0x551>	10001834: R_386_PC32	malloc
10001838:	89 03                	mov    DWORD PTR [ebx],eax
1000183a:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10001840:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
10001847:	83 c4 10             	add    esp,0x10
1000184a:	89 c2                	mov    edx,eax
1000184c:	0f b6 cc             	movzx  ecx,ah
1000184f:	c1 ea 10             	shr    edx,0x10
10001852:	0f b6 c0             	movzx  eax,al
10001855:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
1000185c:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
1000185f:	83 3c 82 00          	cmp    DWORD PTR [edx+eax*4],0x0
10001863:	75 0e                	jne    10001873 <ssfn_render+0x590>
10001865:	e9 3b ff ff ff       	jmp    100017a5 <ssfn_render+0x4c2>
1000186a:	8d 45 1c             	lea    eax,[ebp+0x1c]
1000186d:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10001873:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10001879:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
1000187d:	74 2a                	je     100018a9 <ssfn_render+0x5c6>
1000187f:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001884:	74 23                	je     100018a9 <ssfn_render+0x5c6>
10001886:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001889:	bb 04 00 00 00       	mov    ebx,0x4
1000188e:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10001892:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
10001896:	89 cf                	mov    edi,ecx
10001898:	29 c7                	sub    edi,eax
1000189a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000189e:	0f af c7             	imul   eax,edi
100018a1:	99                   	cdq    
100018a2:	f7 fb                	idiv   ebx
100018a4:	99                   	cdq    
100018a5:	f7 f9                	idiv   ecx
100018a7:	eb 02                	jmp    100018ab <ssfn_render+0x5c8>
100018a9:	31 c0                	xor    eax,eax
100018ab:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100018b1:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
100018b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100018b9:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
100018c1:	66 89 32             	mov    WORD PTR [edx],si
100018c4:	c6 44 24 14 fe       	mov    BYTE PTR [esp+0x14],0xfe
100018c9:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100018cf:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
100018d2:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
100018d8:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100018de:	8a 59 04             	mov    bl,BYTE PTR [ecx+0x4]
100018e1:	01 c3                	add    ebx,eax
100018e3:	88 5a 04             	mov    BYTE PTR [edx+0x4],bl
100018e6:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100018ec:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
100018f2:	8a 49 05             	mov    cl,BYTE PTR [ecx+0x5]
100018f5:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
100018f8:	8b 8d 24 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf524]
100018fe:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
10001904:	8a 12                	mov    dl,BYTE PTR [edx]
10001906:	83 e2 3f             	and    edx,0x3f
10001909:	01 d0                	add    eax,edx
1000190b:	88 41 03             	mov    BYTE PTR [ecx+0x3],al
1000190e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
10001912:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001918:	8d 50 08             	lea    edx,[eax+0x8]
1000191b:	b0 ff                	mov    al,0xff
1000191d:	89 d7                	mov    edi,edx
1000191f:	f3 aa                	rep stos BYTE PTR es:[edi],al
10001921:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001927:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
1000192b:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001931:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
10001935:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001939:	c1 e0 04             	shl    eax,0x4
1000193c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10001940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001944:	c1 e0 04             	shl    eax,0x4
10001947:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
1000194b:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
10001951:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
10001955:	3b 44 24 50          	cmp    eax,DWORD PTR [esp+0x50]
10001959:	0f 8e 4d 0a 00 00    	jle    100023ac <ssfn_render+0x10c9>
1000195f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10001963:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001967:	8a 4e 01             	mov    cl,BYTE PTR [esi+0x1]
1000196a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
1000196d:	8a 12                	mov    dl,BYTE PTR [edx]
1000196f:	0f b6 5e 02          	movzx  ebx,BYTE PTR [esi+0x2]
10001973:	83 e2 40             	and    edx,0x40
10001976:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
1000197a:	88 c2                	mov    dl,al
1000197c:	21 ca                	and    edx,ecx
1000197e:	fe c2                	inc    dl
10001980:	75 14                	jne    10001996 <ssfn_render+0x6b3>
10001982:	80 7c 24 1c 01       	cmp    BYTE PTR [esp+0x1c],0x1
10001987:	19 c0                	sbb    eax,eax
10001989:	8d 44 06 06          	lea    eax,[esi+eax*1+0x6]
1000198d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001991:	e9 09 0a 00 00       	jmp    1000239f <ssfn_render+0x10bc>
10001996:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
1000199a:	8b 7d 18             	mov    edi,DWORD PTR [ebp+0x18]
1000199d:	c1 e0 04             	shl    eax,0x4
100019a0:	0f b6 77 0b          	movzx  esi,BYTE PTR [edi+0xb]
100019a4:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100019a9:	99                   	cdq    
100019aa:	f7 fe                	idiv   esi
100019ac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100019b0:	0f b6 c1             	movzx  eax,cl
100019b3:	c1 e0 04             	shl    eax,0x4
100019b6:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100019bb:	99                   	cdq    
100019bc:	f7 fe                	idiv   esi
100019be:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100019c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100019c6:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
100019ca:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
100019ce:	c1 e2 10             	shl    edx,0x10
100019d1:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
100019d6:	74 0e                	je     100019e6 <ssfn_render+0x703>
100019d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100019dc:	83 44 24 18 06       	add    DWORD PTR [esp+0x18],0x6
100019e1:	8b 58 02             	mov    ebx,DWORD PTR [eax+0x2]
100019e4:	eb 0c                	jmp    100019f2 <ssfn_render+0x70f>
100019e6:	c1 e0 08             	shl    eax,0x8
100019e9:	83 44 24 18 05       	add    DWORD PTR [esp+0x18],0x5
100019ee:	09 d0                	or     eax,edx
100019f0:	09 c3                	or     ebx,eax
100019f2:	8d 0c 1f             	lea    ecx,[edi+ebx*1]
100019f5:	8a 01                	mov    al,BYTE PTR [ecx]
100019f7:	84 c0                	test   al,al
100019f9:	0f 88 17 05 00 00    	js     10001f16 <ssfn_render+0xc33>
100019ff:	89 c7                	mov    edi,eax
10001a01:	83 e7 3f             	and    edi,0x3f
10001a04:	a8 40                	test   al,0x40
10001a06:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10001a0a:	74 10                	je     10001a1c <ssfn_render+0x739>
10001a0c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
10001a10:	89 f8                	mov    eax,edi
10001a12:	41                   	inc    ecx
10001a13:	c1 e0 08             	shl    eax,0x8
10001a16:	09 c2                	or     edx,eax
10001a18:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
10001a1c:	8d 41 01             	lea    eax,[ecx+0x1]
10001a1f:	c7 85 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf580],0x0
10001a29:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001a2d:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001a38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001a3c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10001a40:	83 c0 04             	add    eax,0x4
10001a43:	c1 f8 02             	sar    eax,0x2
10001a46:	01 c7                	add    edi,eax
10001a48:	8b 8c 24 cc 00 00 00 	mov    ecx,DWORD PTR [esp+0xcc]
10001a4f:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001a53:	0f 8f d7 01 00 00    	jg     10001c30 <ssfn_render+0x94d>
10001a59:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001a5c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
10001a60:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
10001a64:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001a68:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001a6c:	0f b6 07             	movzx  eax,BYTE PTR [edi]
10001a6f:	c1 e0 04             	shl    eax,0x4
10001a72:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a77:	99                   	cdq    
10001a78:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001a7c:	01 c6                	add    esi,eax
10001a7e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10001a82:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10001a86:	c1 e0 04             	shl    eax,0x4
10001a89:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a8e:	99                   	cdq    
10001a8f:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001a93:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001a97:	01 c3                	add    ebx,eax
10001a99:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10001a9d:	89 c8                	mov    eax,ecx
10001a9f:	01 c9                	add    ecx,ecx
10001aa1:	c1 f8 02             	sar    eax,0x2
10001aa4:	83 e1 06             	and    ecx,0x6
10001aa7:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
10001aab:	d3 f8                	sar    eax,cl
10001aad:	83 e0 03             	and    eax,0x3
10001ab0:	89 c1                	mov    ecx,eax
10001ab2:	83 f8 02             	cmp    eax,0x2
10001ab5:	74 4a                	je     10001b01 <ssfn_render+0x81e>
10001ab7:	83 f8 03             	cmp    eax,0x3
10001aba:	0f 84 e4 00 00 00    	je     10001ba4 <ssfn_render+0x8c1>
10001ac0:	49                   	dec    ecx
10001ac1:	74 20                	je     10001ae3 <ssfn_render+0x800>
10001ac3:	89 b5 9c f5 00 00    	mov    DWORD PTR [ebp+0xf59c],esi
10001ac9:	89 b5 94 f5 00 00    	mov    DWORD PTR [ebp+0xf594],esi
10001acf:	89 9d a0 f5 00 00    	mov    DWORD PTR [ebp+0xf5a0],ebx
10001ad5:	89 9d 98 f5 00 00    	mov    DWORD PTR [ebp+0xf598],ebx
10001adb:	83 c7 02             	add    edi,0x2
10001ade:	e9 41 01 00 00       	jmp    10001c24 <ssfn_render+0x941>
10001ae3:	83 c7 02             	add    edi,0x2
10001ae6:	50                   	push   eax
10001ae7:	50                   	push   eax
10001ae8:	89 e8                	mov    eax,ebp
10001aea:	53                   	push   ebx
10001aeb:	56                   	push   esi
10001aec:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10001af0:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10001af4:	e8 9c e9 ff ff       	call   10000495 <_ssfn_l>
10001af9:	83 c4 10             	add    esp,0x10
10001afc:	e9 23 01 00 00       	jmp    10001c24 <ssfn_render+0x941>
10001b01:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
10001b05:	83 c7 04             	add    edi,0x4
10001b08:	c1 e0 04             	shl    eax,0x4
10001b0b:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b10:	99                   	cdq    
10001b11:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b15:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001b19:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10001b1d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001b21:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001b25:	c1 e0 04             	shl    eax,0x4
10001b28:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b2d:	99                   	cdq    
10001b2e:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b32:	83 ec 0c             	sub    esp,0xc
10001b35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10001b39:	6a 00                	push   0x0
10001b3b:	53                   	push   ebx
10001b3c:	56                   	push   esi
10001b3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001b41:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
10001b45:	99                   	cdq    
10001b46:	f7 f9                	idiv   ecx
10001b48:	01 d8                	add    eax,ebx
10001b4a:	50                   	push   eax
10001b4b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10001b4f:	2b 44 24 70          	sub    eax,DWORD PTR [esp+0x70]
10001b53:	99                   	cdq    
10001b54:	f7 f9                	idiv   ecx
10001b56:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10001b5a:	50                   	push   eax
10001b5b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001b5f:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001b63:	2b 85 a0 f5 00 00    	sub    eax,DWORD PTR [ebp+0xf5a0]
10001b69:	99                   	cdq    
10001b6a:	f7 f9                	idiv   ecx
10001b6c:	03 85 a0 f5 00 00    	add    eax,DWORD PTR [ebp+0xf5a0]
10001b72:	50                   	push   eax
10001b73:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10001b77:	2b 85 9c f5 00 00    	sub    eax,DWORD PTR [ebp+0xf59c]
10001b7d:	99                   	cdq    
10001b7e:	f7 f9                	idiv   ecx
10001b80:	03 85 9c f5 00 00    	add    eax,DWORD PTR [ebp+0xf59c]
10001b86:	50                   	push   eax
10001b87:	89 e8                	mov    eax,ebp
10001b89:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001b8f:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001b95:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001b99:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001b9d:	e8 04 ea ff ff       	call   100005a6 <_ssfn_b>
10001ba2:	eb 7d                	jmp    10001c21 <ssfn_render+0x93e>
10001ba4:	83 ec 0c             	sub    esp,0xc
10001ba7:	83 c7 06             	add    edi,0x6
10001baa:	6a 00                	push   0x0
10001bac:	53                   	push   ebx
10001bad:	56                   	push   esi
10001bae:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001bb2:	c1 e0 04             	shl    eax,0x4
10001bb5:	0f af 44 24 24       	imul   eax,DWORD PTR [esp+0x24]
10001bba:	99                   	cdq    
10001bbb:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
10001bbf:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001bc3:	50                   	push   eax
10001bc4:	0f b6 47 fe          	movzx  eax,BYTE PTR [edi-0x2]
10001bc8:	c1 e0 04             	shl    eax,0x4
10001bcb:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10001bd0:	99                   	cdq    
10001bd1:	f7 7c 24 38          	idiv   DWORD PTR [esp+0x38]
10001bd5:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
10001bd9:	50                   	push   eax
10001bda:	0f b6 47 fd          	movzx  eax,BYTE PTR [edi-0x3]
10001bde:	c1 e0 04             	shl    eax,0x4
10001be1:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10001be6:	99                   	cdq    
10001be7:	f7 7c 24 3c          	idiv   DWORD PTR [esp+0x3c]
10001beb:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001bef:	50                   	push   eax
10001bf0:	0f b6 47 fc          	movzx  eax,BYTE PTR [edi-0x4]
10001bf4:	c1 e0 04             	shl    eax,0x4
10001bf7:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001bfc:	99                   	cdq    
10001bfd:	f7 7c 24 40          	idiv   DWORD PTR [esp+0x40]
10001c01:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
10001c05:	50                   	push   eax
10001c06:	89 e8                	mov    eax,ebp
10001c08:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001c0e:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001c14:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001c18:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001c1c:	e8 85 e9 ff ff       	call   100005a6 <_ssfn_b>
10001c21:	83 c4 30             	add    esp,0x30
10001c24:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001c2b:	e9 18 fe ff ff       	jmp    10001a48 <ssfn_render+0x765>
10001c30:	8b 85 94 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf594]
10001c36:	3b 85 9c f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf59c]
10001c3c:	75 0e                	jne    10001c4c <ssfn_render+0x969>
10001c3e:	8b bd a0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5a0]
10001c44:	39 bd 98 f5 00 00    	cmp    DWORD PTR [ebp+0xf598],edi
10001c4a:	74 2e                	je     10001c7a <ssfn_render+0x997>
10001c4c:	8b 8d 80 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf580]
10001c52:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001c58:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
10001c5c:	8b 95 80 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf580]
10001c62:	8b 85 6c f5 00 00    	mov    eax,DWORD PTR [ebp+0xf56c]
10001c68:	8b 8d 98 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf598]
10001c6e:	66 89 4c 50 02       	mov    WORD PTR [eax+edx*2+0x2],cx
10001c73:	83 85 80 f5 00 00 02 	add    DWORD PTR [ebp+0xf580],0x2
10001c7a:	b3 fe                	mov    bl,0xfe
10001c7c:	83 bd 80 f5 00 00 04 	cmp    DWORD PTR [ebp+0xf580],0x4
10001c83:	0f 8e 16 07 00 00    	jle    1000239f <ssfn_render+0x10bc>
10001c89:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10001c91:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001c99:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10001ca1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10001ca9:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10001cb1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10001cb5:	39 7c 24 2c          	cmp    DWORD PTR [esp+0x2c],edi
10001cb9:	0f 8d de 06 00 00    	jge    1000239d <ssfn_render+0x10ba>
10001cbf:	8b 85 80 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf580]
10001cc5:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001cd0:	83 e8 03             	sub    eax,0x3
10001cd3:	31 f6                	xor    esi,esi
10001cd5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001cd9:	89 f8                	mov    eax,edi
10001cdb:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
10001cdf:	c1 f8 02             	sar    eax,0x2
10001ce2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10001ce6:	8b bc 24 cc 00 00 00 	mov    edi,DWORD PTR [esp+0xcc]
10001ced:	39 7c 24 54          	cmp    DWORD PTR [esp+0x54],edi
10001cf1:	0f 8e 16 01 00 00    	jle    10001e0d <ssfn_render+0xb2a>
10001cf7:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001cfd:	8d 47 01             	lea    eax,[edi+0x1]
10001d00:	01 c0                	add    eax,eax
10001d02:	0f b7 1c 02          	movzx  ebx,WORD PTR [edx+eax*1]
10001d06:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10001d0a:	0f b7 5c 02 04       	movzx  ebx,WORD PTR [edx+eax*1+0x4]
10001d0f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10001d13:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001d17:	7d 0c                	jge    10001d25 <ssfn_render+0xa42>
10001d19:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001d1d:	0f 8f db 00 00 00    	jg     10001dfe <ssfn_render+0xb1b>
10001d23:	eb 0a                	jmp    10001d2f <ssfn_render+0xa4c>
10001d25:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001d29:	0f 8e cf 00 00 00    	jle    10001dfe <ssfn_render+0xb1b>
10001d2f:	0f b7 4c 02 fe       	movzx  ecx,WORD PTR [edx+eax*1-0x2]
10001d34:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001d38:	0f b7 4c 02 02       	movzx  ecx,WORD PTR [edx+eax*1+0x2]
10001d3d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001d41:	89 d8                	mov    eax,ebx
10001d43:	c1 fa 04             	sar    edx,0x4
10001d46:	c1 f8 04             	sar    eax,0x4
10001d49:	39 c2                	cmp    edx,eax
10001d4b:	75 0a                	jne    10001d57 <ssfn_render+0xa74>
10001d4d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10001d51:	01 c8                	add    eax,ecx
10001d53:	d1 f8                	sar    eax,1
10001d55:	eb 1a                	jmp    10001d71 <ssfn_render+0xa8e>
10001d57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001d5b:	2b 4c 24 4c          	sub    ecx,DWORD PTR [esp+0x4c]
10001d5f:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
10001d63:	2b 5c 24 34          	sub    ebx,DWORD PTR [esp+0x34]
10001d67:	0f af c1             	imul   eax,ecx
10001d6a:	99                   	cdq    
10001d6b:	f7 fb                	idiv   ebx
10001d6d:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10001d71:	c1 f8 04             	sar    eax,0x4
10001d74:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001d79:	74 04                	je     10001d7f <ssfn_render+0xa9c>
10001d7b:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
10001d7f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10001d84:	75 3f                	jne    10001dc5 <ssfn_render+0xae2>
10001d86:	80 7c 24 48 00       	cmp    BYTE PTR [esp+0x48],0x0
10001d8b:	74 38                	je     10001dc5 <ssfn_render+0xae2>
10001d8d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001d91:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001d97:	f7 db                	neg    ebx
10001d99:	01 c2                	add    edx,eax
10001d9b:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001d9f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001da3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001da7:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001dab:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10001daf:	38 5c 11 08          	cmp    BYTE PTR [ecx+edx*1+0x8],bl
10001db3:	74 10                	je     10001dc5 <ssfn_render+0xae2>
10001db5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10001db9:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001dbd:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001dc1:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001dc5:	31 d2                	xor    edx,edx
10001dc7:	39 f2                	cmp    edx,esi
10001dc9:	75 0b                	jne    10001dd6 <ssfn_render+0xaf3>
10001dcb:	66 89 84 54 d0 00 00 00 	mov    WORD PTR [esp+edx*2+0xd0],ax
10001dd3:	46                   	inc    esi
10001dd4:	eb 28                	jmp    10001dfe <ssfn_render+0xb1b>
10001dd6:	0f b7 8c 54 d0 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd0]
10001dde:	39 c1                	cmp    ecx,eax
10001de0:	7d 03                	jge    10001de5 <ssfn_render+0xb02>
10001de2:	42                   	inc    edx
10001de3:	eb e2                	jmp    10001dc7 <ssfn_render+0xae4>
10001de5:	89 f1                	mov    ecx,esi
10001de7:	49                   	dec    ecx
10001de8:	66 8b 9c 4c d0 00 00 00 	mov    bx,WORD PTR [esp+ecx*2+0xd0]
10001df0:	39 d1                	cmp    ecx,edx
10001df2:	66 89 9c 4c d2 00 00 00 	mov    WORD PTR [esp+ecx*2+0xd2],bx
10001dfa:	7f eb                	jg     10001de7 <ssfn_render+0xb04>
10001dfc:	eb cd                	jmp    10001dcb <ssfn_render+0xae8>
10001dfe:	8d 47 02             	lea    eax,[edi+0x2]
10001e01:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10001e08:	e9 d9 fe ff ff       	jmp    10001ce6 <ssfn_render+0xa03>
10001e0d:	83 fe 01             	cmp    esi,0x1
10001e10:	7e 1f                	jle    10001e31 <ssfn_render+0xb4e>
10001e12:	f7 c6 01 00 00 00    	test   esi,0x1
10001e18:	74 24                	je     10001e3e <ssfn_render+0xb5b>
10001e1a:	8d 46 ff             	lea    eax,[esi-0x1]
10001e1d:	66 8b 94 44 d0 00 00 00 	mov    dx,WORD PTR [esp+eax*2+0xd0]
10001e25:	66 89 94 74 cc 00 00 00 	mov    WORD PTR [esp+esi*2+0xcc],dx
10001e2d:	89 c6                	mov    esi,eax
10001e2f:	eb 0d                	jmp    10001e3e <ssfn_render+0xb5b>
10001e31:	85 f6                	test   esi,esi
10001e33:	0f 84 c7 00 00 00    	je     10001f00 <ssfn_render+0xc1d>
10001e39:	be 01 00 00 00       	mov    esi,0x1
10001e3e:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001e44:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001e48:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
10001e4c:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001e50:	39 d1                	cmp    ecx,edx
10001e52:	7d 0b                	jge    10001e5f <ssfn_render+0xb7c>
10001e54:	8a 54 24 20          	mov    dl,BYTE PTR [esp+0x20]
10001e58:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001e5c:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10001e5f:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001e6a:	31 c0                	xor    eax,eax
10001e6c:	31 d2                	xor    edx,edx
10001e6e:	8d 4e ff             	lea    ecx,[esi-0x1]
10001e71:	39 d1                	cmp    ecx,edx
10001e73:	7e 7d                	jle    10001ef2 <ssfn_render+0xc0f>
10001e75:	0f b7 84 54 d0 00 00 00 	movzx  eax,WORD PTR [esp+edx*2+0xd0]
10001e7d:	0f b7 8c 54 d2 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd2]
10001e85:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001e89:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001e8d:	79 02                	jns    10001e91 <ssfn_render+0xbae>
10001e8f:	31 c0                	xor    eax,eax
10001e91:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001e95:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
10001e99:	39 cf                	cmp    edi,ecx
10001e9b:	7e 04                	jle    10001ea1 <ssfn_render+0xbbe>
10001e9d:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001ea1:	85 d2                	test   edx,edx
10001ea3:	74 12                	je     10001eb7 <ssfn_render+0xbd4>
10001ea5:	0f b7 8c 54 ce 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xce]
10001ead:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001eb1:	39 c8                	cmp    eax,ecx
10001eb3:	7d 02                	jge    10001eb7 <ssfn_render+0xbd4>
10001eb5:	89 c8                	mov    eax,ecx
10001eb7:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10001ebb:	7d 2b                	jge    10001ee8 <ssfn_render+0xc05>
10001ebd:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001ec1:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
10001ec7:	8d 3c 01             	lea    edi,[ecx+eax*1]
10001eca:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
10001ece:	88 4c 24 34          	mov    BYTE PTR [esp+0x34],cl
10001ed2:	38 4c 3b 08          	cmp    BYTE PTR [ebx+edi*1+0x8],cl
10001ed6:	75 05                	jne    10001edd <ssfn_render+0xbfa>
10001ed8:	c6 44 24 34 ff       	mov    BYTE PTR [esp+0x34],0xff
10001edd:	8a 4c 24 34          	mov    cl,BYTE PTR [esp+0x34]
10001ee1:	40                   	inc    eax
10001ee2:	88 4c 3b 08          	mov    BYTE PTR [ebx+edi*1+0x8],cl
10001ee6:	eb cf                	jmp    10001eb7 <ssfn_render+0xbd4>
10001ee8:	83 c2 02             	add    edx,0x2
10001eeb:	b0 01                	mov    al,0x1
10001eed:	e9 7c ff ff ff       	jmp    10001e6e <ssfn_render+0xb8b>
10001ef2:	83 e6 fe             	and    esi,0xfffffffe
10001ef5:	84 c0                	test   al,al
10001ef7:	74 07                	je     10001f00 <ssfn_render+0xc1d>
10001ef9:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
10001f00:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001f04:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
10001f08:	01 7c 24 44          	add    DWORD PTR [esp+0x44],edi
10001f0c:	83 44 24 30 10       	add    DWORD PTR [esp+0x30],0x10
10001f11:	e9 9b fd ff ff       	jmp    10001cb1 <ssfn_render+0x9ce>
10001f16:	88 c2                	mov    dl,al
10001f18:	80 e2 60             	and    dl,0x60
10001f1b:	0f 85 95 02 00 00    	jne    100021b6 <ssfn_render+0xed3>
10001f21:	83 e0 1f             	and    eax,0x1f
10001f24:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001f28:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10001f2f:	c1 fb 04             	sar    ebx,0x4
10001f32:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10001f36:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10001f3a:	40                   	inc    eax
10001f3b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001f3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001f43:	c1 f8 04             	sar    eax,0x4
10001f46:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001f4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001f4e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001f53:	99                   	cdq    
10001f54:	f7 fe                	idiv   esi
10001f56:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001f5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001f5e:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
10001f63:	99                   	cdq    
10001f64:	f7 fe                	idiv   esi
10001f66:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001f6a:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001f70:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001f74:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10001f78:	8d 14 3b             	lea    edx,[ebx+edi*1]
10001f7b:	39 d6                	cmp    esi,edx
10001f7d:	7d 0a                	jge    10001f89 <ssfn_render+0xca6>
10001f7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001f83:	8d 14 3b             	lea    edx,[ebx+edi*1]
10001f86:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10001f89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001f8d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001f95:	0f af c3             	imul   eax,ebx
10001f98:	31 ff                	xor    edi,edi
10001f9a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10001f9e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10001fa2:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10001fa6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001faa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001fae:	29 d8                	sub    eax,ebx
10001fb0:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
10001fb4:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
10001fb8:	0f 8d b1 00 00 00    	jge    1000206f <ssfn_render+0xd8c>
10001fbe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10001fc2:	99                   	cdq    
10001fc3:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001fc7:	89 c6                	mov    esi,eax
10001fc9:	31 c0                	xor    eax,eax
10001fcb:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001fd0:	74 0e                	je     10001fe0 <ssfn_render+0xcfd>
10001fd2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10001fd6:	bb 04 00 00 00       	mov    ebx,0x4
10001fdb:	29 f8                	sub    eax,edi
10001fdd:	99                   	cdq    
10001fde:	f7 fb                	idiv   ebx
10001fe0:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10001fe4:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001fef:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10001ff3:	0f af 74 24 30       	imul   esi,DWORD PTR [esp+0x30]
10001ff8:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001fff:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10002003:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002007:	39 d8                	cmp    eax,ebx
10002009:	7d 4e                	jge    10002059 <ssfn_render+0xd76>
1000200b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000200f:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
10002014:	99                   	cdq    
10002015:	f7 fb                	idiv   ebx
10002017:	8d 14 06             	lea    edx,[esi+eax*1]
1000201a:	83 e0 07             	and    eax,0x7
1000201d:	c1 fa 03             	sar    edx,0x3
10002020:	0f b6 54 11 02       	movzx  edx,BYTE PTR [ecx+edx*1+0x2]
10002025:	0f a3 c2             	bt     edx,eax
10002028:	72 0e                	jb     10002038 <ssfn_render+0xd55>
1000202a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
1000202e:	43                   	inc    ebx
1000202f:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
10002036:	eb c0                	jmp    10001ff8 <ssfn_render+0xd15>
10002038:	31 c0                	xor    eax,eax
1000203a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
1000203e:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10002042:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
10002048:	40                   	inc    eax
10002049:	03 54 24 58          	add    edx,DWORD PTR [esp+0x58]
1000204d:	88 5c 10 07          	mov    BYTE PTR [eax+edx*1+0x7],bl
10002051:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
10002055:	7d e3                	jge    1000203a <ssfn_render+0xd57>
10002057:	eb d1                	jmp    1000202a <ssfn_render+0xd47>
10002059:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000205d:	47                   	inc    edi
1000205e:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
10002062:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10002066:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
1000206a:	e9 45 ff ff ff       	jmp    10001fb4 <ssfn_render+0xcd1>
1000206f:	b3 fe                	mov    bl,0xfe
10002071:	f6 85 bc f5 00 00 40 	test   BYTE PTR [ebp+0xf5bc],0x40
10002078:	0f 85 21 03 00 00    	jne    1000239f <ssfn_render+0x10bc>
1000207e:	31 c0                	xor    eax,eax
10002080:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10002084:	80 7c 24 14 fd       	cmp    BYTE PTR [esp+0x14],0xfd
10002089:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
1000208d:	0f 95 c0             	setne  al
10002090:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002094:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002098:	4f                   	dec    edi
10002099:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
1000209d:	81 44 24 20 fc 00 00 00 	add    DWORD PTR [esp+0x20],0xfc
100020a5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
100020a9:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
100020b0:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
100020b4:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
100020b8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100020bc:	31 c0                	xor    eax,eax
100020be:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
100020c1:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
100020c5:	83 c1 04             	add    ecx,0x4
100020c8:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
100020cc:	0f 8d c0 02 00 00    	jge    10002392 <ssfn_render+0x10af>
100020d2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
100020d6:	8d 77 01             	lea    esi,[edi+0x1]
100020d9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
100020dd:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
100020e1:	4f                   	dec    edi
100020e2:	be 01 00 00 00       	mov    esi,0x1
100020e7:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
100020eb:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
100020ef:	7e 63                	jle    10002154 <ssfn_render+0xe71>
100020f1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100020f5:	b9 01 00 00 00       	mov    ecx,0x1
100020fa:	89 ca                	mov    edx,ecx
100020fc:	39 4c 24 44          	cmp    DWORD PTR [esp+0x44],ecx
10002100:	7e 45                	jle    10002147 <ssfn_render+0xe64>
10002102:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10002108:	80 7c 02 08 ff       	cmp    BYTE PTR [edx+eax*1+0x8],0xff
1000210d:	75 34                	jne    10002143 <ssfn_render+0xe60>
1000210f:	89 c7                	mov    edi,eax
10002111:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10002115:	2b 7c 24 10          	sub    edi,DWORD PTR [esp+0x10]
10002119:	38 5c 3a 08          	cmp    BYTE PTR [edx+edi*1+0x8],bl
1000211d:	74 0c                	je     1000212b <ssfn_render+0xe48>
1000211f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10002123:	01 d7                	add    edi,edx
10002125:	38 5c 38 08          	cmp    BYTE PTR [eax+edi*1+0x8],bl
10002129:	75 18                	jne    10002143 <ssfn_render+0xe60>
1000212b:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
1000212f:	38 5c 02 07          	cmp    BYTE PTR [edx+eax*1+0x7],bl
10002133:	74 06                	je     1000213b <ssfn_render+0xe58>
10002135:	38 5c 02 09          	cmp    BYTE PTR [edx+eax*1+0x9],bl
10002139:	75 08                	jne    10002143 <ssfn_render+0xe60>
1000213b:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
1000213f:	88 5c 02 08          	mov    BYTE PTR [edx+eax*1+0x8],bl
10002143:	41                   	inc    ecx
10002144:	40                   	inc    eax
10002145:	eb b3                	jmp    100020fa <ssfn_render+0xe17>
10002147:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000214b:	46                   	inc    esi
1000214c:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
10002150:	b0 01                	mov    al,0x1
10002152:	eb 97                	jmp    100020eb <ssfn_render+0xe08>
10002154:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
10002158:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
1000215c:	bb 01 00 00 00       	mov    ebx,0x1
10002161:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002165:	7e 3d                	jle    100021a4 <ssfn_render+0xec1>
10002167:	b8 01 00 00 00       	mov    eax,0x1
1000216c:	89 c2                	mov    edx,eax
1000216e:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
10002172:	7e 23                	jle    10002197 <ssfn_render+0xeb4>
10002174:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10002178:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
1000217e:	8d 14 07             	lea    edx,[edi+eax*1]
10002181:	0f b6 7c 16 08       	movzx  edi,BYTE PTR [esi+edx*1+0x8]
10002186:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
1000218a:	75 08                	jne    10002194 <ssfn_render+0xeb1>
1000218c:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
10002190:	88 4c 16 08          	mov    BYTE PTR [esi+edx*1+0x8],cl
10002194:	40                   	inc    eax
10002195:	eb d5                	jmp    1000216c <ssfn_render+0xe89>
10002197:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000219b:	43                   	inc    ebx
1000219c:	01 74 24 34          	add    DWORD PTR [esp+0x34],esi
100021a0:	b0 01                	mov    al,0x1
100021a2:	eb bd                	jmp    10002161 <ssfn_render+0xe7e>
100021a4:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
100021a7:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
100021ab:	01 c9                	add    ecx,ecx
100021ad:	29 4c 24 30          	sub    DWORD PTR [esp+0x30],ecx
100021b1:	e9 08 ff ff ff       	jmp    100020be <ssfn_render+0xddb>
100021b6:	b3 fe                	mov    bl,0xfe
100021b8:	80 fa 20             	cmp    dl,0x20
100021bb:	0f 85 de 01 00 00    	jne    1000239f <ssfn_render+0x10bc>
100021c1:	89 c3                	mov    ebx,eax
100021c3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
100021c7:	c1 e3 08             	shl    ebx,0x8
100021ca:	81 e3 00 1f 00 00    	and    ebx,0x1f00
100021d0:	09 c3                	or     ebx,eax
100021d2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
100021d6:	43                   	inc    ebx
100021d7:	40                   	inc    eax
100021d8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100021dc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
100021e0:	40                   	inc    eax
100021e1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
100021e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100021e9:	c1 f8 04             	sar    eax,0x4
100021ec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100021f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100021f4:	c1 f8 04             	sar    eax,0x4
100021f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100021fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100021ff:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10002204:	99                   	cdq    
10002205:	f7 fe                	idiv   esi
10002207:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000220b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000220f:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
10002214:	99                   	cdq    
10002215:	f7 fe                	idiv   esi
10002217:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000221b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000221f:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002225:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
10002229:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
1000222d:	39 d6                	cmp    esi,edx
1000222f:	7d 0b                	jge    1000223c <ssfn_render+0xf59>
10002231:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
10002235:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
10002239:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
1000223c:	83 c1 04             	add    ecx,0x4
1000223f:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000224a:	8d 04 19             	lea    eax,[ecx+ebx*1]
1000224d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002251:	3b 4c 24 44          	cmp    ecx,DWORD PTR [esp+0x44]
10002255:	72 35                	jb     1000228c <ssfn_render+0xfa9>
10002257:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000225b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
1000225f:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002264:	2b 74 24 14          	sub    esi,DWORD PTR [esp+0x14]
10002268:	03 54 24 38          	add    edx,DWORD PTR [esp+0x38]
1000226c:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10002273:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
10002277:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
1000227f:	31 d2                	xor    edx,edx
10002281:	31 ff                	xor    edi,edi
10002283:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
10002287:	e9 cc 00 00 00       	jmp    10002358 <ssfn_render+0x1075>
1000228c:	8a 11                	mov    dl,BYTE PTR [ecx]
1000228e:	89 d0                	mov    eax,edx
10002290:	83 e0 7f             	and    eax,0x7f
10002293:	84 d2                	test   dl,dl
10002295:	8d 78 01             	lea    edi,[eax+0x1]
10002298:	78 09                	js     100022a3 <ssfn_render+0xfc0>
1000229a:	41                   	inc    ecx
1000229b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000229f:	89 ca                	mov    edx,ecx
100022a1:	eb 3d                	jmp    100022e0 <ssfn_render+0xffd>
100022a3:	48                   	dec    eax
100022a4:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
100022ab:	83 f8 fe             	cmp    eax,0xfffffffe
100022ae:	74 16                	je     100022c6 <ssfn_render+0xfe3>
100022b0:	8d 5a 01             	lea    ebx,[edx+0x1]
100022b3:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
100022ba:	8a 59 01             	mov    bl,BYTE PTR [ecx+0x1]
100022bd:	88 9c 14 d0 05 00 00 	mov    BYTE PTR [esp+edx*1+0x5d0],bl
100022c4:	eb dd                	jmp    100022a3 <ssfn_render+0xfc0>
100022c6:	83 c1 02             	add    ecx,0x2
100022c9:	eb 86                	jmp    10002251 <ssfn_render+0xf6e>
100022cb:	42                   	inc    edx
100022cc:	8d 73 01             	lea    esi,[ebx+0x1]
100022cf:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
100022d6:	8a 42 ff             	mov    al,BYTE PTR [edx-0x1]
100022d9:	88 84 1c d0 05 00 00 	mov    BYTE PTR [esp+ebx*1+0x5d0],al
100022e0:	ff 4c 24 2c          	dec    DWORD PTR [esp+0x2c]
100022e4:	8b 9c 24 cc 00 00 00 	mov    ebx,DWORD PTR [esp+0xcc]
100022eb:	83 7c 24 2c fe       	cmp    DWORD PTR [esp+0x2c],0xfffffffe
100022f0:	75 d9                	jne    100022cb <ssfn_render+0xfe8>
100022f2:	01 f9                	add    ecx,edi
100022f4:	e9 58 ff ff ff       	jmp    10002251 <ssfn_render+0xf6e>
100022f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100022fd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
10002301:	99                   	cdq    
10002302:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
10002306:	0f af c8             	imul   ecx,eax
10002309:	31 c0                	xor    eax,eax
1000230b:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10002310:	74 0e                	je     10002320 <ssfn_render+0x103d>
10002312:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002316:	bb 04 00 00 00       	mov    ebx,0x4
1000231b:	29 f8                	sub    eax,edi
1000231d:	99                   	cdq    
1000231e:	f7 fb                	idiv   ebx
10002320:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002324:	31 db                	xor    ebx,ebx
10002326:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000232a:	31 f6                	xor    esi,esi
1000232c:	8d 84 24 d0 05 01 00 	lea    eax,[esp+0x105d0]
10002333:	01 c1                	add    ecx,eax
10002335:	39 74 24 1c          	cmp    DWORD PTR [esp+0x1c],esi
10002339:	7f 30                	jg     1000236b <ssfn_render+0x1088>
1000233b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000233f:	85 c0                	test   eax,eax
10002341:	79 02                	jns    10002345 <ssfn_render+0x1062>
10002343:	31 c0                	xor    eax,eax
10002345:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002349:	47                   	inc    edi
1000234a:	01 5c 24 38          	add    DWORD PTR [esp+0x38],ebx
1000234e:	b2 01                	mov    dl,0x1
10002350:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
10002354:	01 5c 24 2c          	add    DWORD PTR [esp+0x2c],ebx
10002358:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
1000235c:	7c 9b                	jl     100022f9 <ssfn_render+0x1016>
1000235e:	84 d2                	test   dl,dl
10002360:	74 3b                	je     1000239d <ssfn_render+0x10ba>
10002362:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10002369:	eb 32                	jmp    1000239d <ssfn_render+0x10ba>
1000236b:	89 d8                	mov    eax,ebx
1000236d:	99                   	cdq    
1000236e:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10002372:	8a 84 08 00 00 ff ff 	mov    al,BYTE PTR [eax+ecx*1-0x10000]
10002379:	3c ff                	cmp    al,0xff
1000237b:	74 0e                	je     1000238b <ssfn_render+0x10a8>
1000237d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10002381:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
10002387:	88 44 16 08          	mov    BYTE PTR [esi+edx*1+0x8],al
1000238b:	46                   	inc    esi
1000238c:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
10002390:	eb a3                	jmp    10002335 <ssfn_render+0x1052>
10002392:	84 c0                	test   al,al
10002394:	74 07                	je     1000239d <ssfn_render+0x10ba>
10002396:	89 94 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],edx
1000239d:	b3 fe                	mov    bl,0xfe
1000239f:	ff 44 24 50          	inc    DWORD PTR [esp+0x50]
100023a3:	88 5c 24 14          	mov    BYTE PTR [esp+0x14],bl
100023a7:	e9 9f f5 ff ff       	jmp    1000194b <ssfn_render+0x668>
100023ac:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100023b2:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
100023b5:	8a 52 0c             	mov    dl,BYTE PTR [edx+0xc]
100023b8:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
100023bb:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100023c1:	0f b6 72 07          	movzx  esi,BYTE PTR [edx+0x7]
100023c5:	0f b6 5a 06          	movzx  ebx,BYTE PTR [edx+0x6]
100023c9:	89 f0                	mov    eax,esi
100023cb:	89 d9                	mov    ecx,ebx
100023cd:	43                   	inc    ebx
100023ce:	39 de                	cmp    esi,ebx
100023d0:	7e 08                	jle    100023da <ssfn_render+0x10f7>
100023d2:	48                   	dec    eax
100023d3:	29 c8                	sub    eax,ecx
100023d5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
100023d8:	eb 04                	jmp    100023de <ssfn_render+0x10fb>
100023da:	c6 42 07 00          	mov    BYTE PTR [edx+0x7],0x0
100023de:	83 bc 24 f4 05 01 00 00 	cmp    DWORD PTR [esp+0x105f4],0x0
100023e6:	0f 84 c9 0c 00 00    	je     100030b5 <ssfn_render+0x1dd2>
100023ec:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
100023f2:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
100023f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100023fc:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100023ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10002403:	0f ba e0 0c          	bt     eax,0xc
10002407:	72 22                	jb     1000242b <ssfn_render+0x1148>
10002409:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
1000240c:	83 e0 0f             	and    eax,0xf
1000240f:	3c 03                	cmp    al,0x3
10002411:	74 18                	je     1000242b <ssfn_render+0x1148>
10002413:	0f b6 4e 0c          	movzx  ecx,BYTE PTR [esi+0xc]
10002417:	84 c9                	test   cl,cl
10002419:	74 10                	je     1000242b <ssfn_render+0x1148>
1000241b:	0f b6 56 0b          	movzx  edx,BYTE PTR [esi+0xb]
1000241f:	0f af d7             	imul   edx,edi
10002422:	89 d0                	mov    eax,edx
10002424:	99                   	cdq    
10002425:	f7 f9                	idiv   ecx
10002427:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000242b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000242f:	39 85 c4 f5 00 00    	cmp    DWORD PTR [ebp+0xf5c4],eax
10002435:	7d 06                	jge    1000243d <ssfn_render+0x115a>
10002437:	89 85 c4 f5 00 00    	mov    DWORD PTR [ebp+0xf5c4],eax
1000243d:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
10002443:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
10002447:	0f b7 13             	movzx  edx,WORD PTR [ebx]
1000244a:	0f af 54 24 0c       	imul   edx,DWORD PTR [esp+0xc]
1000244f:	89 d0                	mov    eax,edx
10002451:	99                   	cdq    
10002452:	f7 f9                	idiv   ecx
10002454:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
10002458:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000245c:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
1000245f:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
10002463:	0f b6 43 03          	movzx  eax,BYTE PTR [ebx+0x3]
10002467:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000246b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
10002470:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002474:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002479:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000247d:	99                   	cdq    
1000247e:	f7 f9                	idiv   ecx
10002480:	31 d2                	xor    edx,edx
10002482:	83 ff 10             	cmp    edi,0x10
10002485:	0f 9f c2             	setg   dl
10002488:	42                   	inc    edx
10002489:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
1000248d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
10002491:	7d 08                	jge    1000249b <ssfn_render+0x11b8>
10002493:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002497:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
1000249b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
1000249f:	39 c2                	cmp    edx,eax
100024a1:	7d 04                	jge    100024a7 <ssfn_render+0x11c4>
100024a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100024a7:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
100024ac:	74 4c                	je     100024fa <ssfn_render+0x1217>
100024ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100024b2:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100024b7:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100024bb:	99                   	cdq    
100024bc:	f7 f9                	idiv   ecx
100024be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100024c2:	81 e2 00 08 00 00    	and    edx,0x800
100024c8:	74 04                	je     100024ce <ssfn_render+0x11eb>
100024ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100024ce:	01 d0                	add    eax,edx
100024d0:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
100024d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100024da:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
100024de:	0f b6 43 06          	movzx  eax,BYTE PTR [ebx+0x6]
100024e2:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100024e7:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100024eb:	99                   	cdq    
100024ec:	f7 f9                	idiv   ecx
100024ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
100024f2:	89 85 8c f5 00 00    	mov    DWORD PTR [ebp+0xf58c],eax
100024f8:	eb 22                	jmp    1000251c <ssfn_render+0x1239>
100024fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100024fe:	c7 85 8c f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf58c],0x0
10002508:	d1 f8                	sar    eax,1
1000250a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
10002512:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002516:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
1000251c:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002523:	8b 18                	mov    ebx,DWORD PTR [eax]
10002525:	85 db                	test   ebx,ebx
10002527:	0f 84 2e 09 00 00    	je     10002e5b <ssfn_render+0x1b78>
1000252d:	0f bf 50 04          	movsx  edx,WORD PTR [eax+0x4]
10002531:	89 d1                	mov    ecx,edx
10002533:	89 d0                	mov    eax,edx
10002535:	66 c1 f9 0b          	sar    cx,0xb
10002539:	c1 f8 1f             	sar    eax,0x1f
1000253c:	31 c2                	xor    edx,eax
1000253e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
10002542:	29 44 24 54          	sub    DWORD PTR [esp+0x54],eax
10002546:	88 c8                	mov    al,cl
10002548:	83 e0 10             	and    eax,0x10
1000254b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
1000254f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002553:	83 c0 40             	add    eax,0x40
10002556:	c1 f8 06             	sar    eax,0x6
10002559:	89 84 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],eax
10002560:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002564:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002568:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
1000256c:	7d 08                	jge    10002576 <ssfn_render+0x1293>
1000256e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002572:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002576:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002579:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
10002581:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002585:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
1000258d:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
10002591:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002596:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000259a:	99                   	cdq    
1000259b:	f7 f9                	idiv   ecx
1000259d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
100025a1:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100025a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100025ab:	0f b6 f4             	movzx  esi,ah
100025ae:	89 c2                	mov    edx,eax
100025b0:	89 74 24 5c          	mov    DWORD PTR [esp+0x5c],esi
100025b4:	c1 ea 10             	shr    edx,0x10
100025b7:	0f b6 fa             	movzx  edi,dl
100025ba:	89 7c 24 58          	mov    DWORD PTR [esp+0x58],edi
100025be:	0f b6 f8             	movzx  edi,al
100025c1:	c1 e8 18             	shr    eax,0x18
100025c4:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
100025c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100025cc:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100025d3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
100025d6:	0f b6 fc             	movzx  edi,ah
100025d9:	89 c2                	mov    edx,eax
100025db:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
100025e2:	c1 ea 10             	shr    edx,0x10
100025e5:	0f b6 c0             	movzx  eax,al
100025e8:	0f b6 f2             	movzx  esi,dl
100025eb:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
100025f2:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
100025f9:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
100025fd:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002604:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
1000260b:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
1000260f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002613:	0f af c2             	imul   eax,edx
10002616:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
1000261a:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
1000261e:	8d 04 90             	lea    eax,[eax+edx*4]
10002621:	01 d8                	add    eax,ebx
10002623:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
1000262a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
1000262e:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
10002635:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
1000263a:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
10002641:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10002645:	39 74 24 4c          	cmp    DWORD PTR [esp+0x4c],esi
10002649:	0f 8d e2 04 00 00    	jge    10002b31 <ssfn_render+0x184e>
1000264f:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002656:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
1000265d:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002661:	0f bf 57 06          	movsx  edx,WORD PTR [edi+0x6]
10002665:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10002669:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
1000266d:	39 d0                	cmp    eax,edx
1000266f:	0f 8d bc 04 00 00    	jge    10002b31 <ssfn_render+0x184e>
10002675:	85 c0                	test   eax,eax
10002677:	0f 88 94 04 00 00    	js     10002b11 <ssfn_render+0x182e>
1000267d:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002683:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10002687:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
1000268b:	c1 e1 08             	shl    ecx,0x8
1000268e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
10002696:	89 c8                	mov    eax,ecx
10002698:	0f af c3             	imul   eax,ebx
1000269b:	99                   	cdq    
1000269c:	f7 fe                	idiv   esi
1000269e:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
100026a5:	c1 f8 08             	sar    eax,0x8
100026a8:	89 84 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],eax
100026af:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
100026b5:	0f af c3             	imul   eax,ebx
100026b8:	99                   	cdq    
100026b9:	f7 fe                	idiv   esi
100026bb:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
100026bf:	c1 f8 08             	sar    eax,0x8
100026c2:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
100026c9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
100026cd:	2b 84 24 94 00 00 00 	sub    eax,DWORD PTR [esp+0x94]
100026d4:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
100026db:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100026e2:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
100026e6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
100026ea:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
100026ee:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
100026f2:	0f 8d 19 04 00 00    	jge    10002b11 <ssfn_render+0x182e>
100026f8:	85 c0                	test   eax,eax
100026fa:	0f 88 ff 03 00 00    	js     10002aff <ssfn_render+0x181c>
10002700:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002707:	83 78 14 00          	cmp    DWORD PTR [eax+0x14],0x0
1000270b:	75 42                	jne    1000274f <ssfn_render+0x146c>
1000270d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002711:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10002718:	b9 10 00 00 00       	mov    ecx,0x10
1000271d:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
10002720:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
10002727:	89 c2                	mov    edx,eax
10002729:	0f b6 fc             	movzx  edi,ah
1000272c:	d3 ea                	shr    edx,cl
1000272e:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
10002735:	0f b6 f2             	movzx  esi,dl
10002738:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
1000273c:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
10002743:	d3 e8                	shr    eax,cl
10002745:	0f b6 c0             	movzx  eax,al
10002748:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
1000274f:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002755:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10002759:	0f b7 18             	movzx  ebx,WORD PTR [eax]
1000275c:	c1 e1 08             	shl    ecx,0x8
1000275f:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
10002763:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
1000276b:	89 c8                	mov    eax,ecx
1000276d:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
10002775:	0f af c3             	imul   eax,ebx
10002778:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
10002780:	99                   	cdq    
10002781:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10002789:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
1000278d:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
10002795:	89 84 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],eax
1000279c:	c1 f8 08             	sar    eax,0x8
1000279f:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
100027a6:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
100027ac:	0f af c3             	imul   eax,ebx
100027af:	99                   	cdq    
100027b0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
100027b4:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
100027b8:	c1 f8 08             	sar    eax,0x8
100027bb:	89 84 24 b4 00 00 00 	mov    DWORD PTR [esp+0xb4],eax
100027c2:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
100027c9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100027cd:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
100027d1:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
100027d5:	0f 8d 3b 02 00 00    	jge    10002a16 <ssfn_render+0x1733>
100027db:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
100027df:	c1 fa 08             	sar    edx,0x8
100027e2:	3b 94 24 a8 00 00 00 	cmp    edx,DWORD PTR [esp+0xa8]
100027e9:	75 25                	jne    10002810 <ssfn_render+0x152d>
100027eb:	0f b6 4c 24 48       	movzx  ecx,BYTE PTR [esp+0x48]
100027f0:	8b bc 24 a0 00 00 00 	mov    edi,DWORD PTR [esp+0xa0]
100027f7:	b8 00 01 00 00       	mov    eax,0x100
100027fc:	81 64 24 48 00 ff ff ff 	and    DWORD PTR [esp+0x48],0xffffff00
10002804:	29 c8                	sub    eax,ecx
10002806:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
1000280a:	39 c7                	cmp    edi,eax
1000280c:	7e 1c                	jle    1000282a <ssfn_render+0x1547>
1000280e:	eb 16                	jmp    10002826 <ssfn_render+0x1543>
10002810:	c7 44 24 2c 00 01 00 00 	mov    DWORD PTR [esp+0x2c],0x100
10002818:	3b 94 24 ac 00 00 00 	cmp    edx,DWORD PTR [esp+0xac]
1000281f:	75 09                	jne    1000282a <ssfn_render+0x1547>
10002821:	0f b6 44 24 68       	movzx  eax,BYTE PTR [esp+0x68]
10002826:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000282a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
1000282e:	0f b7 00             	movzx  eax,WORD PTR [eax]
10002831:	0f af c2             	imul   eax,edx
10002834:	89 84 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],eax
1000283b:	0f b6 44 24 6c       	movzx  eax,BYTE PTR [esp+0x6c]
10002840:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10002845:	c1 f8 08             	sar    eax,0x8
10002848:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
1000284f:	8b 84 24 98 00 00 00 	mov    eax,DWORD PTR [esp+0x98]
10002856:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
1000285a:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
1000285e:	39 74 24 44          	cmp    DWORD PTR [esp+0x44],esi
10002862:	0f 8d a1 01 00 00    	jge    10002a09 <ssfn_render+0x1726>
10002868:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
1000286c:	c1 f8 08             	sar    eax,0x8
1000286f:	3b 84 24 b0 00 00 00 	cmp    eax,DWORD PTR [esp+0xb0]
10002876:	75 3b                	jne    100028b3 <ssfn_render+0x15d0>
10002878:	0f b6 4c 24 44       	movzx  ecx,BYTE PTR [esp+0x44]
1000287d:	ba 00 01 00 00       	mov    edx,0x100
10002882:	81 64 24 44 00 ff ff ff 	and    DWORD PTR [esp+0x44],0xffffff00
1000288a:	29 ca                	sub    edx,ecx
1000288c:	89 f1                	mov    ecx,esi
1000288e:	2b 8c 24 98 00 00 00 	sub    ecx,DWORD PTR [esp+0x98]
10002895:	39 d1                	cmp    ecx,edx
10002897:	7c 0e                	jl     100028a7 <ssfn_render+0x15c4>
10002899:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
1000289d:	81 fa 00 01 00 00    	cmp    edx,0x100
100028a3:	74 22                	je     100028c7 <ssfn_render+0x15e4>
100028a5:	89 d1                	mov    ecx,edx
100028a7:	0f af 4c 24 2c       	imul   ecx,DWORD PTR [esp+0x2c]
100028ac:	89 cf                	mov    edi,ecx
100028ae:	c1 ff 08             	sar    edi,0x8
100028b1:	eb 14                	jmp    100028c7 <ssfn_render+0x15e4>
100028b3:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
100028ba:	3b 84 24 b4 00 00 00 	cmp    eax,DWORD PTR [esp+0xb4]
100028c1:	74 04                	je     100028c7 <ssfn_render+0x15e4>
100028c3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
100028c7:	03 44 24 74          	add    eax,DWORD PTR [esp+0x74]
100028cb:	01 7c 24 30          	add    DWORD PTR [esp+0x30],edi
100028cf:	8b b4 24 b8 00 00 00 	mov    esi,DWORD PTR [esp+0xb8]
100028d6:	0f b6 54 06 08       	movzx  edx,BYTE PTR [esi+eax*1+0x8]
100028db:	81 fa ff 00 00 00    	cmp    edx,0xff
100028e1:	75 37                	jne    1000291a <ssfn_render+0x1637>
100028e3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
100028ea:	81 44 24 40 ff 00 00 00 	add    DWORD PTR [esp+0x40],0xff
100028f2:	0f af c7             	imul   eax,edi
100028f5:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
100028f9:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
10002900:	0f af c7             	imul   eax,edi
10002903:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
10002907:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
1000290e:	0f af c7             	imul   eax,edi
10002911:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
10002915:	e9 e2 00 00 00       	jmp    100029fc <ssfn_render+0x1719>
1000291a:	81 fa fe 00 00 00    	cmp    edx,0xfe
10002920:	74 2d                	je     1000294f <ssfn_render+0x166c>
10002922:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002925:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
10002928:	85 c9                	test   ecx,ecx
1000292a:	74 23                	je     1000294f <ssfn_render+0x166c>
1000292c:	01 c8                	add    eax,ecx
1000292e:	8b 1c 90             	mov    ebx,DWORD PTR [eax+edx*4]
10002931:	89 d9                	mov    ecx,ebx
10002933:	89 9c 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],ebx
1000293a:	c1 e9 10             	shr    ecx,0x10
1000293d:	0f b6 f7             	movzx  esi,bh
10002940:	0f b6 c1             	movzx  eax,cl
10002943:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10002947:	0f b6 c3             	movzx  eax,bl
1000294a:	c1 eb 18             	shr    ebx,0x18
1000294d:	eb 14                	jmp    10002963 <ssfn_render+0x1680>
1000294f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10002953:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002957:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
1000295b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
1000295f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002963:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002969:	75 25                	jne    10002990 <ssfn_render+0x16ad>
1000296b:	0f af c7             	imul   eax,edi
1000296e:	0f af f7             	imul   esi,edi
10002971:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002975:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10002979:	69 c7 ff 00 00 00    	imul   eax,edi,0xff
1000297f:	0f af cf             	imul   ecx,edi
10002982:	01 74 24 38          	add    DWORD PTR [esp+0x38],esi
10002986:	01 4c 24 34          	add    DWORD PTR [esp+0x34],ecx
1000298a:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
1000298e:	eb 6c                	jmp    100029fc <ssfn_render+0x1719>
10002990:	0f af f3             	imul   esi,ebx
10002993:	0f af c3             	imul   eax,ebx
10002996:	b9 ff 00 00 00       	mov    ecx,0xff
1000299b:	8b 94 24 88 00 00 00 	mov    edx,DWORD PTR [esp+0x88]
100029a2:	29 d9                	sub    ecx,ebx
100029a4:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
100029a8:	0f af d1             	imul   edx,ecx
100029ab:	b9 ff 00 00 00       	mov    ecx,0xff
100029b0:	01 d0                	add    eax,edx
100029b2:	0f af c7             	imul   eax,edi
100029b5:	99                   	cdq    
100029b6:	f7 f9                	idiv   ecx
100029b8:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
100029bc:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
100029c0:	0f af 84 24 8c 00 00 00 	imul   eax,DWORD PTR [esp+0x8c]
100029c8:	01 f0                	add    eax,esi
100029ca:	89 ce                	mov    esi,ecx
100029cc:	0f af c7             	imul   eax,edi
100029cf:	99                   	cdq    
100029d0:	f7 f9                	idiv   ecx
100029d2:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
100029d6:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
100029da:	0f af cb             	imul   ecx,ebx
100029dd:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
100029e1:	0f af df             	imul   ebx,edi
100029e4:	0f af 84 24 90 00 00 00 	imul   eax,DWORD PTR [esp+0x90]
100029ec:	01 5c 24 40          	add    DWORD PTR [esp+0x40],ebx
100029f0:	01 c8                	add    eax,ecx
100029f2:	0f af c7             	imul   eax,edi
100029f5:	99                   	cdq    
100029f6:	f7 fe                	idiv   esi
100029f8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
100029fc:	81 44 24 44 00 01 00 00 	add    DWORD PTR [esp+0x44],0x100
10002a04:	e9 51 fe ff ff       	jmp    1000285a <ssfn_render+0x1577>
10002a09:	81 44 24 48 00 01 00 00 	add    DWORD PTR [esp+0x48],0x100
10002a11:	e9 b7 fd ff ff       	jmp    100027cd <ssfn_render+0x14ea>
10002a16:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10002a1b:	74 30                	je     10002a4d <ssfn_render+0x176a>
10002a1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002a21:	31 d2                	xor    edx,edx
10002a23:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a27:	31 d2                	xor    edx,edx
10002a29:	89 c1                	mov    ecx,eax
10002a2b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10002a2f:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a33:	31 d2                	xor    edx,edx
10002a35:	89 c6                	mov    esi,eax
10002a37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10002a3b:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a3f:	31 d2                	xor    edx,edx
10002a41:	89 c3                	mov    ebx,eax
10002a43:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002a47:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a4b:	eb 1c                	jmp    10002a69 <ssfn_render+0x1786>
10002a4d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002a51:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
10002a55:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10002a59:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002a5d:	c1 e9 08             	shr    ecx,0x8
10002a60:	c1 ee 08             	shr    esi,0x8
10002a63:	c1 eb 08             	shr    ebx,0x8
10002a66:	c1 e8 08             	shr    eax,0x8
10002a69:	83 f8 0f             	cmp    eax,0xf
10002a6c:	0f 86 8d 00 00 00    	jbe    10002aff <ssfn_render+0x181c>
10002a72:	89 ca                	mov    edx,ecx
10002a74:	81 f9 ff 00 00 00    	cmp    ecx,0xff
10002a7a:	76 05                	jbe    10002a81 <ssfn_render+0x179e>
10002a7c:	ba ff 00 00 00       	mov    edx,0xff
10002a81:	b9 10 00 00 00       	mov    ecx,0x10
10002a86:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
10002a8d:	d3 e2                	shl    edx,cl
10002a8f:	3d ff 00 00 00       	cmp    eax,0xff
10002a94:	89 d1                	mov    ecx,edx
10002a96:	76 05                	jbe    10002a9d <ssfn_render+0x17ba>
10002a98:	b8 ff 00 00 00       	mov    eax,0xff
10002a9d:	c1 e0 18             	shl    eax,0x18
10002aa0:	09 c8                	or     eax,ecx
10002aa2:	81 fe ff 00 00 00    	cmp    esi,0xff
10002aa8:	76 05                	jbe    10002aaf <ssfn_render+0x17cc>
10002aaa:	be ff 00 00 00       	mov    esi,0xff
10002aaf:	c1 e6 08             	shl    esi,0x8
10002ab2:	09 f0                	or     eax,esi
10002ab4:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002aba:	76 05                	jbe    10002ac1 <ssfn_render+0x17de>
10002abc:	bb ff 00 00 00       	mov    ebx,0xff
10002ac1:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002ac5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002ac9:	d3 e3                	shl    ebx,cl
10002acb:	09 c3                	or     ebx,eax
10002acd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10002ad4:	89 1c b0             	mov    DWORD PTR [eax+esi*4],ebx
10002ad7:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002adb:	39 5c 24 4c          	cmp    DWORD PTR [esp+0x4c],ebx
10002adf:	75 1e                	jne    10002aff <ssfn_render+0x181c>
10002ae1:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
10002ae8:	7e 07                	jle    10002af1 <ssfn_render+0x180e>
10002aea:	89 b4 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],esi
10002af1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002af5:	39 5c 24 7c          	cmp    DWORD PTR [esp+0x7c],ebx
10002af9:	7d 04                	jge    10002aff <ssfn_render+0x181c>
10002afb:	89 5c 24 7c          	mov    DWORD PTR [esp+0x7c],ebx
10002aff:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002b07:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10002b0b:	0f 85 ca fb ff ff    	jne    100026db <ssfn_render+0x13f8>
10002b11:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002b18:	ff 44 24 4c          	inc    DWORD PTR [esp+0x4c]
10002b1c:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002b20:	25 fc ff 00 00       	and    eax,0xfffc
10002b25:	01 84 24 80 00 00 00 	add    DWORD PTR [esp+0x80],eax
10002b2c:	e9 10 fb ff ff       	jmp    10002641 <ssfn_render+0x135e>
10002b31:	f6 85 bc f5 00 00 10 	test   BYTE PTR [ebp+0xf5bc],0x10
10002b38:	0f 84 90 01 00 00    	je     10002cce <ssfn_render+0x19eb>
10002b3e:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002b46:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
10002b4d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002b51:	40                   	inc    eax
10002b52:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002b56:	29 c7                	sub    edi,eax
10002b58:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10002b5c:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002b60:	8d 44 18 02          	lea    eax,[eax+ebx*1+0x2]
10002b64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002b68:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
10002b6c:	7e 09                	jle    10002b77 <ssfn_render+0x1894>
10002b6e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002b72:	40                   	inc    eax
10002b73:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002b77:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002b7e:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002b85:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
10002b89:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002b8d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002b91:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002b95:	0f af c2             	imul   eax,edx
10002b98:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
10002b9c:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
10002ba0:	8d 44 90 fc          	lea    eax,[eax+edx*4-0x4]
10002ba4:	03 07                	add    eax,DWORD PTR [edi]
10002ba6:	89 c7                	mov    edi,eax
10002ba8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002bac:	c1 e0 18             	shl    eax,0x18
10002baf:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002bb3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002bb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002bbb:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002bc0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002bc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002bc8:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002bcc:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
10002bd0:	0f 8e f8 00 00 00    	jle    10002cce <ssfn_render+0x19eb>
10002bd6:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002bdd:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
10002be4:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002be8:	0f bf 56 06          	movsx  edx,WORD PTR [esi+0x6]
10002bec:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002bf0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002bf4:	39 d0                	cmp    eax,edx
10002bf6:	0f 8d d2 00 00 00    	jge    10002cce <ssfn_render+0x19eb>
10002bfc:	31 db                	xor    ebx,ebx
10002bfe:	85 c0                	test   eax,eax
10002c00:	79 23                	jns    10002c25 <ssfn_render+0x1942>
10002c02:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c09:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002c0d:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002c11:	25 fc ff 00 00       	and    eax,0xfffc
10002c16:	01 c7                	add    edi,eax
10002c18:	eb aa                	jmp    10002bc4 <ssfn_render+0x18e1>
10002c1a:	85 c0                	test   eax,eax
10002c1c:	79 20                	jns    10002c3e <ssfn_render+0x195b>
10002c1e:	43                   	inc    ebx
10002c1f:	39 5c 24 70          	cmp    DWORD PTR [esp+0x70],ebx
10002c23:	7c dd                	jl     10002c02 <ssfn_render+0x191f>
10002c25:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c2c:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002c30:	01 d8                	add    eax,ebx
10002c32:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002c36:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002c3a:	7c de                	jl     10002c1a <ssfn_render+0x1937>
10002c3c:	eb c4                	jmp    10002c02 <ssfn_render+0x191f>
10002c3e:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002c42:	7e 06                	jle    10002c4a <ssfn_render+0x1967>
10002c44:	3b 5c 24 34          	cmp    ebx,DWORD PTR [esp+0x34]
10002c48:	7f d4                	jg     10002c1e <ssfn_render+0x193b>
10002c4a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
10002c4d:	b8 10 00 00 00       	mov    eax,0x10
10002c52:	0f b6 f6             	movzx  esi,dh
10002c55:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10002c59:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
10002c5d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002c61:	89 d0                	mov    eax,edx
10002c63:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002c67:	d3 e8                	shr    eax,cl
10002c69:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002c6d:	0f b6 c0             	movzx  eax,al
10002c70:	d3 ea                	shr    edx,cl
10002c72:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002c76:	0f b6 f2             	movzx  esi,dl
10002c79:	29 c1                	sub    ecx,eax
10002c7b:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002c7f:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002c84:	29 f2                	sub    edx,esi
10002c86:	c1 f9 08             	sar    ecx,0x8
10002c89:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002c8e:	01 c8                	add    eax,ecx
10002c90:	c1 fa 08             	sar    edx,0x8
10002c93:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002c97:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
10002c9b:	d3 e0                	shl    eax,cl
10002c9d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002ca1:	03 74 24 40          	add    esi,DWORD PTR [esp+0x40]
10002ca5:	2b 54 24 3c          	sub    edx,DWORD PTR [esp+0x3c]
10002ca9:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002cad:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002cb2:	d3 e6                	shl    esi,cl
10002cb4:	c1 fa 08             	sar    edx,0x8
10002cb7:	03 54 24 3c          	add    edx,DWORD PTR [esp+0x3c]
10002cbb:	c1 e2 08             	shl    edx,0x8
10002cbe:	09 d0                	or     eax,edx
10002cc0:	0b 44 24 44          	or     eax,DWORD PTR [esp+0x44]
10002cc4:	09 c6                	or     esi,eax
10002cc6:	89 34 9f             	mov    DWORD PTR [edi+ebx*4],esi
10002cc9:	e9 50 ff ff ff       	jmp    10002c1e <ssfn_render+0x193b>
10002cce:	f6 85 bc f5 00 00 20 	test   BYTE PTR [ebp+0xf5bc],0x20
10002cd5:	0f 84 80 01 00 00    	je     10002e5b <ssfn_render+0x1b78>
10002cdb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10002cdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002ce3:	d1 fa                	sar    edx,1
10002ce5:	40                   	inc    eax
10002ce6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002cea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002cee:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
10002cf2:	7e 09                	jle    10002cfd <ssfn_render+0x1a1a>
10002cf4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002cf8:	40                   	inc    eax
10002cf9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002cfd:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002d04:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002d0b:	0f b7 4b 08          	movzx  ecx,WORD PTR [ebx+0x8]
10002d0f:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002d13:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10002d17:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002d1b:	01 d0                	add    eax,edx
10002d1d:	0f af c1             	imul   eax,ecx
10002d20:	0f bf 4b 0a          	movsx  ecx,WORD PTR [ebx+0xa]
10002d24:	2b 4c 24 1c          	sub    ecx,DWORD PTR [esp+0x1c]
10002d28:	8d 44 88 fc          	lea    eax,[eax+ecx*4-0x4]
10002d2c:	03 03                	add    eax,DWORD PTR [ebx]
10002d2e:	89 c7                	mov    edi,eax
10002d30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002d34:	c1 e0 18             	shl    eax,0x18
10002d37:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002d3b:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002d43:	01 d0                	add    eax,edx
10002d45:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10002d49:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002d4e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10002d52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002d56:	39 5c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebx
10002d5a:	0f 8e fb 00 00 00    	jle    10002e5b <ssfn_render+0x1b78>
10002d60:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002d67:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002d6b:	01 d8                	add    eax,ebx
10002d6d:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002d74:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002d78:	0f bf 53 06          	movsx  edx,WORD PTR [ebx+0x6]
10002d7c:	39 d0                	cmp    eax,edx
10002d7e:	0f 8d d7 00 00 00    	jge    10002e5b <ssfn_render+0x1b78>
10002d84:	31 f6                	xor    esi,esi
10002d86:	85 c0                	test   eax,eax
10002d88:	0f 89 ad 00 00 00    	jns    10002e3b <ssfn_render+0x1b58>
10002d8e:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002d95:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002d99:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002d9d:	25 fc ff 00 00       	and    eax,0xfffc
10002da2:	01 c7                	add    edi,eax
10002da4:	eb ac                	jmp    10002d52 <ssfn_render+0x1a6f>
10002da6:	85 c0                	test   eax,eax
10002da8:	0f 88 82 00 00 00    	js     10002e30 <ssfn_render+0x1b4d>
10002dae:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
10002db1:	b8 10 00 00 00       	mov    eax,0x10
10002db6:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002dba:	2b 44 24 40          	sub    eax,DWORD PTR [esp+0x40]
10002dbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002dc2:	89 d8                	mov    eax,ebx
10002dc4:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002dc8:	d3 e8                	shr    eax,cl
10002dca:	0f b6 cf             	movzx  ecx,bh
10002dcd:	0f b6 c0             	movzx  eax,al
10002dd0:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
10002dd4:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002dd8:	d3 eb                	shr    ebx,cl
10002dda:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002dde:	0f b6 db             	movzx  ebx,bl
10002de1:	29 c1                	sub    ecx,eax
10002de3:	29 da                	sub    edx,ebx
10002de5:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002dea:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002def:	c1 f9 08             	sar    ecx,0x8
10002df2:	c1 fa 08             	sar    edx,0x8
10002df5:	01 c8                	add    eax,ecx
10002df7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
10002dfb:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002dff:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002e03:	d3 e0                	shl    eax,cl
10002e05:	2b 54 24 30          	sub    edx,DWORD PTR [esp+0x30]
10002e09:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002e0d:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002e12:	c1 fa 08             	sar    edx,0x8
10002e15:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
10002e19:	c1 e2 08             	shl    edx,0x8
10002e1c:	09 d0                	or     eax,edx
10002e1e:	8d 14 19             	lea    edx,[ecx+ebx*1]
10002e21:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
10002e25:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002e29:	d3 e2                	shl    edx,cl
10002e2b:	09 c2                	or     edx,eax
10002e2d:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
10002e30:	46                   	inc    esi
10002e31:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
10002e35:	0f 8c 53 ff ff ff    	jl     10002d8e <ssfn_render+0x1aab>
10002e3b:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e42:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002e46:	01 f0                	add    eax,esi
10002e48:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002e4c:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002e50:	0f 8c 50 ff ff ff    	jl     10002da6 <ssfn_render+0x1ac3>
10002e56:	e9 33 ff ff ff       	jmp    10002d8e <ssfn_render+0x1aab>
10002e5b:	f6 85 bd f5 00 00 08 	test   BYTE PTR [ebp+0xf5bd],0x8
10002e62:	74 04                	je     10002e68 <ssfn_render+0x1b85>
10002e64:	f7 5c 24 20          	neg    DWORD PTR [esp+0x20]
10002e68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002e6c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002e70:	89 85 90 f5 00 00    	mov    DWORD PTR [ebp+0xf590],eax
10002e76:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e7d:	66 01 78 0a          	add    WORD PTR [eax+0xa],di
10002e81:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002e88:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002e8b:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002e8f:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002e95:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
10002e99:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002e9e:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002ea2:	99                   	cdq    
10002ea3:	f7 f9                	idiv   ecx
10002ea5:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10002ea9:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10002eaf:	25 80 00 00 00       	and    eax,0x80
10002eb4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002eb8:	0f 85 f7 01 00 00    	jne    100030b5 <ssfn_render+0x1dd2>
10002ebe:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002ec1:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
10002ec5:	0f 84 ea 01 00 00    	je     100030b5 <ssfn_render+0x1dd2>
10002ecb:	8b 94 24 f8 05 01 00 	mov    edx,DWORD PTR [esp+0x105f8]
10002ed2:	83 ec 0c             	sub    esp,0xc
10002ed5:	03 94 24 d4 00 00 00 	add    edx,DWORD PTR [esp+0xd4]
10002edc:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
10002ee3:	51                   	push   ecx
10002ee4:	8d 8c 24 dc 00 00 00 	lea    ecx,[esp+0xdc]
10002eeb:	e8 53 d9 ff ff       	call   10000843 <_ssfn_c>
10002ef0:	83 c4 10             	add    esp,0x10
10002ef3:	85 c0                	test   eax,eax
10002ef5:	0f 84 ba 01 00 00    	je     100030b5 <ssfn_render+0x1dd2>
10002efb:	83 bc 24 c4 00 00 00 20 	cmp    DWORD PTR [esp+0xc4],0x20
10002f03:	0f 86 ac 01 00 00    	jbe    100030b5 <ssfn_render+0x1dd2>
10002f09:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002f0f:	8d 48 06             	lea    ecx,[eax+0x6]
10002f12:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002f18:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
10002f1c:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10002f20:	0f 8e 8f 01 00 00    	jle    100030b5 <ssfn_render+0x1dd2>
10002f26:	8a 19                	mov    bl,BYTE PTR [ecx]
10002f28:	88 5c 24 18          	mov    BYTE PTR [esp+0x18],bl
10002f2c:	8a 18                	mov    bl,BYTE PTR [eax]
10002f2e:	83 e3 40             	and    ebx,0x40
10002f31:	80 7c 24 18 ff       	cmp    BYTE PTR [esp+0x18],0xff
10002f36:	75 14                	jne    10002f4c <ssfn_render+0x1c69>
10002f38:	80 79 01 ff          	cmp    BYTE PTR [ecx+0x1],0xff
10002f3c:	75 0e                	jne    10002f4c <ssfn_render+0x1c69>
10002f3e:	80 fb 01             	cmp    bl,0x1
10002f41:	19 c0                	sbb    eax,eax
10002f43:	8d 4c 01 06          	lea    ecx,[ecx+eax*1+0x6]
10002f47:	e9 60 01 00 00       	jmp    100030ac <ssfn_render+0x1dc9>
10002f4c:	0f b6 71 04          	movzx  esi,BYTE PTR [ecx+0x4]
10002f50:	0f b6 51 03          	movzx  edx,BYTE PTR [ecx+0x3]
10002f54:	c1 e6 10             	shl    esi,0x10
10002f57:	0f b6 79 02          	movzx  edi,BYTE PTR [ecx+0x2]
10002f5b:	84 db                	test   bl,bl
10002f5d:	74 08                	je     10002f67 <ssfn_render+0x1c84>
10002f5f:	8b 79 02             	mov    edi,DWORD PTR [ecx+0x2]
10002f62:	83 c1 06             	add    ecx,0x6
10002f65:	eb 0c                	jmp    10002f73 <ssfn_render+0x1c90>
10002f67:	c1 e2 08             	shl    edx,0x8
10002f6a:	83 c1 05             	add    ecx,0x5
10002f6d:	89 d0                	mov    eax,edx
10002f6f:	09 f0                	or     eax,esi
10002f71:	09 c7                	or     edi,eax
10002f73:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002f76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002f7a:	01 f8                	add    eax,edi
10002f7c:	8a 10                	mov    dl,BYTE PTR [eax]
10002f7e:	88 d3                	mov    bl,dl
10002f80:	83 e3 e0             	and    ebx,0xffffffe0
10002f83:	80 fb c0             	cmp    bl,0xc0
10002f86:	0f 85 20 01 00 00    	jne    100030ac <ssfn_render+0x1dc9>
10002f8c:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
10002f90:	c1 e2 08             	shl    edx,0x8
10002f93:	83 c0 02             	add    eax,0x2
10002f96:	81 e2 00 1f 00 00    	and    edx,0x1f00
10002f9c:	09 da                	or     edx,ebx
10002f9e:	8d 72 01             	lea    esi,[edx+0x1]
10002fa1:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10002fa5:	8b b4 24 c4 00 00 00 	mov    esi,DWORD PTR [esp+0xc4]
10002fac:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
10002fb0:	83 7c 24 1c ff       	cmp    DWORD PTR [esp+0x1c],0xffffffff
10002fb5:	0f 84 f1 00 00 00    	je     100030ac <ssfn_render+0x1dc9>
10002fbb:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
10002fbf:	0f b7 10             	movzx  edx,WORD PTR [eax]
10002fc2:	c1 e3 10             	shl    ebx,0x10
10002fc5:	81 e3 00 00 0f 00    	and    ebx,0xf0000
10002fcb:	09 d3                	or     ebx,edx
10002fcd:	39 de                	cmp    esi,ebx
10002fcf:	0f 82 cf 00 00 00    	jb     100030a4 <ssfn_render+0x1dc1>
10002fd5:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
10002fd8:	89 d7                	mov    edi,edx
10002fda:	c1 e7 10             	shl    edi,0x10
10002fdd:	81 e7 00 00 0f 00    	and    edi,0xf0000
10002fe3:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10002fe7:	0f b7 78 03          	movzx  edi,WORD PTR [eax+0x3]
10002feb:	0b 7c 24 20          	or     edi,DWORD PTR [esp+0x20]
10002fef:	39 fe                	cmp    esi,edi
10002ff1:	0f 87 ad 00 00 00    	ja     100030a4 <ssfn_render+0x1dc1>
10002ff7:	29 de                	sub    esi,ebx
10002ff9:	c0 ea 04             	shr    dl,0x4
10002ffc:	89 b4 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],esi
10003003:	0f b6 d2             	movzx  edx,dl
10003006:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000300a:	89 d3                	mov    ebx,edx
1000300c:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
10003010:	c1 e3 10             	shl    ebx,0x10
10003013:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10003016:	09 da                	or     edx,ebx
10003018:	c0 e8 04             	shr    al,0x4
1000301b:	c1 e0 18             	shl    eax,0x18
1000301e:	09 c2                	or     edx,eax
10003020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003024:	03 50 18             	add    edx,DWORD PTR [eax+0x18]
10003027:	01 c2                	add    edx,eax
10003029:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000302c:	8d 7c 06 fc          	lea    edi,[esi+eax*1-0x4]
10003030:	39 d7                	cmp    edi,edx
10003032:	76 78                	jbe    100030ac <ssfn_render+0x1dc9>
10003034:	8a 1a                	mov    bl,BYTE PTR [edx]
10003036:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
1000303d:	89 de                	mov    esi,ebx
1000303f:	83 e6 7f             	and    esi,0x7f
10003042:	39 c6                	cmp    esi,eax
10003044:	73 1d                	jae    10003063 <ssfn_render+0x1d80>
10003046:	48                   	dec    eax
10003047:	bb 02 00 00 00       	mov    ebx,0x2
1000304c:	29 f0                	sub    eax,esi
1000304e:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
10003055:	0f b6 02             	movzx  eax,BYTE PTR [edx]
10003058:	84 c0                	test   al,al
1000305a:	78 03                	js     1000305f <ssfn_render+0x1d7c>
1000305c:	8d 58 02             	lea    ebx,[eax+0x2]
1000305f:	01 da                	add    edx,ebx
10003061:	eb cd                	jmp    10003030 <ssfn_render+0x1d4d>
10003063:	be 01 00 00 00       	mov    esi,0x1
10003068:	84 db                	test   bl,bl
1000306a:	78 03                	js     1000306f <ssfn_render+0x1d8c>
1000306c:	8d 70 01             	lea    esi,[eax+0x1]
1000306f:	0f be 04 32          	movsx  eax,BYTE PTR [edx+esi*1]
10003073:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10003077:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000307c:	0f b6 5b 0b          	movzx  ebx,BYTE PTR [ebx+0xb]
10003080:	99                   	cdq    
10003081:	f7 fb                	idiv   ebx
10003083:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10003088:	74 0d                	je     10003097 <ssfn_render+0x1db4>
1000308a:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10003091:	66 01 47 0a          	add    WORD PTR [edi+0xa],ax
10003095:	eb 15                	jmp    100030ac <ssfn_render+0x1dc9>
10003097:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
1000309e:	66 01 46 0c          	add    WORD PTR [esi+0xc],ax
100030a2:	eb 08                	jmp    100030ac <ssfn_render+0x1dc9>
100030a4:	83 c0 08             	add    eax,0x8
100030a7:	e9 00 ff ff ff       	jmp    10002fac <ssfn_render+0x1cc9>
100030ac:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
100030b0:	e9 5d fe ff ff       	jmp    10002f12 <ssfn_render+0x1c2f>
100030b5:	8b 8c 24 c8 00 00 00 	mov    ecx,DWORD PTR [esp+0xc8]
100030bc:	eb 73                	jmp    10003131 <ssfn_render+0x1e4e>
100030be:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100030c9:	e9 50 e4 ff ff       	jmp    1000151e <ssfn_render+0x23b>
100030ce:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100030d5:	57                   	push   edi
100030d6:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100030dd:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100030e4:	e8 5a d7 ff ff       	call   10000843 <_ssfn_c>
100030e9:	5f                   	pop    edi
100030ea:	85 c0                	test   eax,eax
100030ec:	0f 84 25 e4 ff ff    	je     10001517 <ssfn_render+0x234>
100030f2:	e9 a2 e4 ff ff       	jmp    10001599 <ssfn_render+0x2b6>
100030f7:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100030fa:	f6 40 08 30          	test   BYTE PTR [eax+0x8],0x30
100030fe:	75 0c                	jne    1000310c <ssfn_render+0x1e29>
10003100:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10003107:	e9 3b e4 ff ff       	jmp    10001547 <ssfn_render+0x264>
1000310c:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10003113:	57                   	push   edi
10003114:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
1000311b:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10003122:	e8 1c d7 ff ff       	call   10000843 <_ssfn_c>
10003127:	59                   	pop    ecx
10003128:	85 c0                	test   eax,eax
1000312a:	74 d4                	je     10003100 <ssfn_render+0x1e1d>
1000312c:	e9 68 e4 ff ff       	jmp    10001599 <ssfn_render+0x2b6>
10003131:	81 c4 dc 05 01 00    	add    esp,0x105dc
10003137:	89 c8                	mov    eax,ecx
10003139:	5b                   	pop    ebx
1000313a:	5e                   	pop    esi
1000313b:	5f                   	pop    edi
1000313c:	5d                   	pop    ebp
1000313d:	c3                   	ret    

1000313e <ssfn_bbox>:
1000313e:	55                   	push   ebp
1000313f:	57                   	push   edi
10003140:	56                   	push   esi
10003141:	53                   	push   ebx
10003142:	83 ec 3c             	sub    esp,0x3c
10003145:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
1000314a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
1000314e:	0f 94 c0             	sete   al
10003151:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
10003156:	0f 94 c2             	sete   dl
10003159:	09 d0                	or     eax,edx
1000315b:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
10003160:	0f 94 c2             	sete   dl
10003163:	09 d0                	or     eax,edx
10003165:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
1000316a:	0f 94 c2             	sete   dl
1000316d:	09 d0                	or     eax,edx
1000316f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
10003174:	0f 94 c2             	sete   dl
10003177:	08 d0                	or     al,dl
10003179:	0f 85 7c 01 00 00    	jne    100032fb <ssfn_bbox+0x1bd>
1000317f:	85 db                	test   ebx,ebx
10003181:	0f 84 74 01 00 00    	je     100032fb <ssfn_bbox+0x1bd>
10003187:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000318b:	31 f6                	xor    esi,esi
1000318d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003193:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10003197:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000319d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
100031a1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100031a7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
100031ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100031b1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100031b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
100031b8:	0f 84 42 01 00 00    	je     10003300 <ssfn_bbox+0x1c2>
100031be:	8d 54 24 18          	lea    edx,[esp+0x18]
100031c2:	b9 06 00 00 00       	mov    ecx,0x6
100031c7:	89 d7                	mov    edi,edx
100031c9:	89 f0                	mov    eax,esi
100031cb:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
100031d5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100031d7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
100031df:	31 ff                	xor    edi,edi
100031e1:	bd 01 00 00 00       	mov    ebp,0x1
100031e6:	50                   	push   eax
100031e7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100031eb:	8d 44 24 20          	lea    eax,[esp+0x20]
100031ef:	50                   	push   eax
100031f0:	53                   	push   ebx
100031f1:	e8 fc ff ff ff       	call   100031f2 <ssfn_bbox+0xb4>	100031f2: R_386_PC32	ssfn_render
100031f6:	83 c4 10             	add    esp,0x10
100031f9:	89 c6                	mov    esi,eax
100031fb:	85 c0                	test   eax,eax
100031fd:	74 6f                	je     1000326e <ssfn_bbox+0x130>
100031ff:	0f 88 fb 00 00 00    	js     10003300 <ssfn_bbox+0x1c2>
10003205:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
1000320b:	85 c0                	test   eax,eax
1000320d:	0f 84 ed 00 00 00    	je     10003300 <ssfn_bbox+0x1c2>
10003213:	85 ed                	test   ebp,ebp
10003215:	74 0b                	je     10003222 <ssfn_bbox+0xe4>
10003217:	8b bb 88 f5 00 00    	mov    edi,DWORD PTR [ebx+0xf588]
1000321d:	66 01 7c 24 22       	add    WORD PTR [esp+0x22],di
10003222:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10003226:	74 12                	je     1000323a <ssfn_bbox+0xfc>
10003228:	8b 83 8c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf58c]
1000322e:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
10003232:	7d 2f                	jge    10003263 <ssfn_bbox+0x125>
10003234:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003238:	eb 29                	jmp    10003263 <ssfn_bbox+0x125>
1000323a:	0f b7 08             	movzx  ecx,WORD PTR [eax]
1000323d:	0f bf 6c 24 1c       	movsx  ebp,WORD PTR [esp+0x1c]
10003242:	39 cd                	cmp    ebp,ecx
10003244:	7d 05                	jge    1000324b <ssfn_bbox+0x10d>
10003246:	66 89 4c 24 1c       	mov    WORD PTR [esp+0x1c],cx
1000324b:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
1000324f:	66 8b 4c 24 1e       	mov    cx,WORD PTR [esp+0x1e]
10003254:	84 d2                	test   dl,dl
10003256:	75 04                	jne    1000325c <ssfn_bbox+0x11e>
10003258:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
1000325c:	01 ca                	add    edx,ecx
1000325e:	66 89 54 24 1e       	mov    WORD PTR [esp+0x1e],dx
10003263:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
10003267:	31 ed                	xor    ebp,ebp
10003269:	e9 78 ff ff ff       	jmp    100031e6 <ssfn_bbox+0xa8>
1000326e:	f6 83 bc f5 00 00 02 	test   BYTE PTR [ebx+0xf5bc],0x2
10003275:	74 23                	je     1000329a <ssfn_bbox+0x15c>
10003277:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
1000327a:	f6 40 08 20          	test   BYTE PTR [eax+0x8],0x20
1000327e:	75 1a                	jne    1000329a <ssfn_bbox+0x15c>
10003280:	8b 83 c0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c0]
10003286:	b9 04 00 00 00       	mov    ecx,0x4
1000328b:	99                   	cdq    
1000328c:	f7 f9                	idiv   ecx
1000328e:	66 03 44 24 22       	add    ax,WORD PTR [esp+0x22]
10003293:	29 f8                	sub    eax,edi
10003295:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
1000329a:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
100032a0:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
100032a4:	74 29                	je     100032cf <ssfn_bbox+0x191>
100032a6:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
100032ab:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
100032af:	89 01                	mov    DWORD PTR [ecx],eax
100032b1:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100032b5:	8b 83 c4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c4]
100032bb:	89 01                	mov    DWORD PTR [ecx],eax
100032bd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100032c1:	89 38                	mov    DWORD PTR [eax],edi
100032c3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100032c7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100032cb:	89 38                	mov    DWORD PTR [eax],edi
100032cd:	eb 31                	jmp    10003300 <ssfn_bbox+0x1c2>
100032cf:	0f bf 44 24 1c       	movsx  eax,WORD PTR [esp+0x1c]
100032d4:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
100032d8:	89 07                	mov    DWORD PTR [edi],eax
100032da:	0f bf 44 24 24       	movsx  eax,WORD PTR [esp+0x24]
100032df:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
100032e3:	89 07                	mov    DWORD PTR [edi],eax
100032e5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100032e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100032ef:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100032f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100032f9:	eb 05                	jmp    10003300 <ssfn_bbox+0x1c2>
100032fb:	be fc ff ff ff       	mov    esi,0xfffffffc
10003300:	83 c4 3c             	add    esp,0x3c
10003303:	89 f0                	mov    eax,esi
10003305:	5b                   	pop    ebx
10003306:	5e                   	pop    esi
10003307:	5f                   	pop    edi
10003308:	5d                   	pop    ebp
10003309:	c3                   	ret    

1000330a <ssfn_text>:
1000330a:	55                   	push   ebp
1000330b:	57                   	push   edi
1000330c:	56                   	push   esi
1000330d:	53                   	push   ebx
1000330e:	83 ec 1c             	sub    esp,0x1c
10003311:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10003315:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
10003319:	85 f6                	test   esi,esi
1000331b:	0f 84 b2 00 00 00    	je     100033d3 <ssfn_text+0xc9>
10003321:	85 ed                	test   ebp,ebp
10003323:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
10003328:	0f 84 a5 00 00 00    	je     100033d3 <ssfn_text+0xc9>
1000332e:	83 ec 0c             	sub    esp,0xc
10003331:	6a 18                	push   0x18
10003333:	e8 fc ff ff ff       	call   10003334 <ssfn_text+0x2a>	10003334: R_386_PC32	malloc
10003338:	83 c4 10             	add    esp,0x10
1000333b:	89 c3                	mov    ebx,eax
1000333d:	85 c0                	test   eax,eax
1000333f:	0f 84 8e 00 00 00    	je     100033d3 <ssfn_text+0xc9>
10003345:	31 c0                	xor    eax,eax
10003347:	b9 06 00 00 00       	mov    ecx,0x6
1000334c:	89 df                	mov    edi,ebx
1000334e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
10003351:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003353:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10003357:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
1000335a:	74 79                	je     100033d5 <ssfn_text+0xcb>
1000335c:	8d 43 0c             	lea    eax,[ebx+0xc]
1000335f:	52                   	push   edx
10003360:	52                   	push   edx
10003361:	50                   	push   eax
10003362:	8d 43 0a             	lea    eax,[ebx+0xa]
10003365:	50                   	push   eax
10003366:	8d 43 06             	lea    eax,[ebx+0x6]
10003369:	50                   	push   eax
1000336a:	8d 43 04             	lea    eax,[ebx+0x4]
1000336d:	50                   	push   eax
1000336e:	56                   	push   esi
1000336f:	55                   	push   ebp
10003370:	e8 fc ff ff ff       	call   10003371 <ssfn_text+0x67>	10003371: R_386_PC32	ssfn_bbox
10003375:	83 c4 20             	add    esp,0x20
10003378:	85 c0                	test   eax,eax
1000337a:	75 59                	jne    100033d5 <ssfn_text+0xcb>
1000337c:	83 ec 0c             	sub    esp,0xc
1000337f:	0f bf 4b 04          	movsx  ecx,WORD PTR [ebx+0x4]
10003383:	0f bf 43 06          	movsx  eax,WORD PTR [ebx+0x6]
10003387:	0f af c8             	imul   ecx,eax
1000338a:	c1 e1 02             	shl    ecx,0x2
1000338d:	51                   	push   ecx
1000338e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10003392:	e8 fc ff ff ff       	call   10003393 <ssfn_text+0x89>	10003393: R_386_PC32	malloc
10003397:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
1000339b:	89 c7                	mov    edi,eax
1000339d:	89 03                	mov    DWORD PTR [ebx],eax
1000339f:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
100033a3:	83 c4 10             	add    esp,0x10
100033a6:	f3 aa                	rep stos BYTE PTR es:[edi],al
100033a8:	50                   	push   eax
100033a9:	56                   	push   esi
100033aa:	53                   	push   ebx
100033ab:	55                   	push   ebp
100033ac:	e8 fc ff ff ff       	call   100033ad <ssfn_text+0xa3>	100033ad: R_386_PC32	ssfn_render
100033b1:	83 c4 10             	add    esp,0x10
100033b4:	85 c0                	test   eax,eax
100033b6:	7e 04                	jle    100033bc <ssfn_text+0xb2>
100033b8:	01 c6                	add    esi,eax
100033ba:	eb ec                	jmp    100033a8 <ssfn_text+0x9e>
100033bc:	74 17                	je     100033d5 <ssfn_text+0xcb>
100033be:	83 ec 0c             	sub    esp,0xc
100033c1:	ff 33                	push   DWORD PTR [ebx]
100033c3:	e8 fc ff ff ff       	call   100033c4 <ssfn_text+0xba>	100033c4: R_386_PC32	free
100033c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
100033cb:	e8 fc ff ff ff       	call   100033cc <ssfn_text+0xc2>	100033cc: R_386_PC32	free
100033d0:	83 c4 10             	add    esp,0x10
100033d3:	31 db                	xor    ebx,ebx
100033d5:	83 c4 1c             	add    esp,0x1c
100033d8:	89 d8                	mov    eax,ebx
100033da:	5b                   	pop    ebx
100033db:	5e                   	pop    esi
100033dc:	5f                   	pop    edi
100033dd:	5d                   	pop    ebp
100033de:	c3                   	ret    
100033df:	90                   	nop

100033e0 <NIContext::drvPutpixel4(int, int, unsigned int)>:
100033e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100033e4:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
100033ea:	8b 10                	mov    edx,DWORD PTR [eax]
100033ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100033f0:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
100033f3:	90                   	nop

100033f4 <NIContext::drvDarken4(int, int, int)>:
100033f4:	55                   	push   ebp
100033f5:	57                   	push   edi
100033f6:	56                   	push   esi
100033f7:	53                   	push   ebx
100033f8:	83 ec 20             	sub    esp,0x20
100033fb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
100033ff:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
10003403:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10003407:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
1000340b:	8b 87 08 04 00 00    	mov    eax,DWORD PTR [edi+0x408]
10003411:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10003415:	8b 10                	mov    edx,DWORD PTR [eax]
10003417:	56                   	push   esi
10003418:	53                   	push   ebx
10003419:	50                   	push   eax
1000341a:	ff 52 34             	call   DWORD PTR [edx+0x34]
1000341d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10003421:	89 c2                	mov    edx,eax
10003423:	0f b6 ec             	movzx  ebp,ah
10003426:	c1 ea 10             	shr    edx,0x10
10003429:	0f af e9             	imul   ebp,ecx
1000342c:	0f b6 d2             	movzx  edx,dl
1000342f:	0f b6 c0             	movzx  eax,al
10003432:	0f af d1             	imul   edx,ecx
10003435:	0f af c1             	imul   eax,ecx
10003438:	c1 ea 07             	shr    edx,0x7
1000343b:	8b 8f 08 04 00 00    	mov    ecx,DWORD PTR [edi+0x408]
10003441:	c1 e8 07             	shr    eax,0x7
10003444:	8b 39                	mov    edi,DWORD PTR [ecx]
10003446:	c1 e2 10             	shl    edx,0x10
10003449:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
1000344d:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
10003451:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
10003455:	c1 ed 07             	shr    ebp,0x7
10003458:	c1 e5 08             	shl    ebp,0x8
1000345b:	09 ea                	or     edx,ebp
1000345d:	09 c2                	or     edx,eax
1000345f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
10003463:	8b 47 24             	mov    eax,DWORD PTR [edi+0x24]
10003466:	83 c4 2c             	add    esp,0x2c
10003469:	5b                   	pop    ebx
1000346a:	5e                   	pop    esi
1000346b:	5f                   	pop    edi
1000346c:	5d                   	pop    ebp
1000346d:	ff e0                	jmp    eax
1000346f:	90                   	nop

10003470 <NIContext::renderTTF(int, int, unsigned int, char*, int*)>:
10003470:	55                   	push   ebp
10003471:	b9 00 40 00 00       	mov    ecx,0x4000
10003476:	57                   	push   edi
10003477:	b0 ff                	mov    al,0xff
10003479:	56                   	push   esi
1000347a:	53                   	push   ebx
1000347b:	83 ec 3c             	sub    esp,0x3c
1000347e:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
10003482:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10003486:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
10003489:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
1000348d:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000348f:	85 db                	test   ebx,ebx
10003491:	75 10                	jne    100034a3 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x33>
10003493:	83 ec 0c             	sub    esp,0xc
10003496:	68 db 69 00 10       	push   0x100069db	10003497: R_386_32	.text
1000349b:	e8 fc ff ff ff       	call   1000349c <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x2c>	1000349c: R_386_PC32	KePanic(char const*)
100034a0:	83 c4 10             	add    esp,0x10
100034a3:	50                   	push   eax
100034a4:	50                   	push   eax
100034a5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100034a9:	50                   	push   eax
100034aa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100034ae:	50                   	push   eax
100034af:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100034b3:	50                   	push   eax
100034b4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100034b8:	50                   	push   eax
100034b9:	56                   	push   esi
100034ba:	68 00 00 00 00       	push   0x0	100034bb: R_386_32	ssfn_ctx
100034bf:	e8 fc ff ff ff       	call   100034c0 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x50>	100034c0: R_386_PC32	ssfn_bbox
100034c4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100034c7:	c7 44 24 3c 40 00 40 00 	mov    DWORD PTR [esp+0x3c],0x400040
100034cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100034d3:	c7 44 24 40 00 01 00 00 	mov    DWORD PTR [esp+0x40],0x100
100034db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100034df:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
100034e4:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100034e8:	0d 00 00 00 ff       	or     eax,0xff000000
100034ed:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100034f1:	83 c4 1c             	add    esp,0x1c
100034f4:	56                   	push   esi
100034f5:	8d 44 24 20          	lea    eax,[esp+0x20]
100034f9:	50                   	push   eax
100034fa:	68 00 00 00 00       	push   0x0	100034fb: R_386_32	ssfn_ctx
100034ff:	e8 fc ff ff ff       	call   10003500 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x90>	10003500: R_386_PC32	ssfn_render
10003504:	83 c4 10             	add    esp,0x10
10003507:	89 03                	mov    DWORD PTR [ebx],eax
10003509:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
1000350d:	31 db                	xor    ebx,ebx
1000350f:	89 f0                	mov    eax,esi
10003511:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
10003515:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
10003519:	7e 3f                	jle    1000355a <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xea>
1000351b:	31 ff                	xor    edi,edi
1000351d:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
10003522:	39 f8                	cmp    eax,edi
10003524:	7e 2c                	jle    10003552 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xe2>
10003526:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003529:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
1000352c:	83 f8 ff             	cmp    eax,0xffffffff
1000352f:	74 1d                	je     1000354e <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xde>
10003531:	8b 95 08 04 00 00    	mov    edx,DWORD PTR [ebp+0x408]
10003537:	25 ff ff ff 00       	and    eax,0xffffff
1000353c:	8b 0a                	mov    ecx,DWORD PTR [edx]
1000353e:	50                   	push   eax
1000353f:	56                   	push   esi
10003540:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10003544:	01 f8                	add    eax,edi
10003546:	50                   	push   eax
10003547:	52                   	push   edx
10003548:	ff 51 24             	call   DWORD PTR [ecx+0x24]
1000354b:	83 c4 10             	add    esp,0x10
1000354e:	43                   	inc    ebx
1000354f:	47                   	inc    edi
10003550:	eb cb                	jmp    1000351d <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xad>
10003552:	29 c3                	sub    ebx,eax
10003554:	46                   	inc    esi
10003555:	83 c3 40             	add    ebx,0x40
10003558:	eb b5                	jmp    1000350f <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x9f>
1000355a:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
1000355f:	83 c4 3c             	add    esp,0x3c
10003562:	5b                   	pop    ebx
10003563:	5e                   	pop    esi
10003564:	5f                   	pop    edi
10003565:	5d                   	pop    ebp
10003566:	c3                   	ret    
10003567:	90                   	nop

10003568 <NIContext::~NIContext()>:
10003568:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	1000356c: R_386_32	ssfn_ctx
10003570:	e9 00 db ff ff       	jmp    10001075 <ssfn_free>
10003575:	90                   	nop

10003576 <NIContext::NIContext(Video*, int, int, int, int)>:
10003576:	55                   	push   ebp
10003577:	ba 00 00 00 00       	mov    edx,0x0	10003578: R_386_32	ssfn_ctx
1000357c:	57                   	push   edi
1000357d:	b9 72 3d 00 00       	mov    ecx,0x3d72
10003582:	56                   	push   esi
10003583:	89 d7                	mov    edi,edx
10003585:	53                   	push   ebx
10003586:	81 ec 48 02 00 00    	sub    esp,0x248
1000358c:	8b 9c 24 5c 02 00 00 	mov    ebx,DWORD PTR [esp+0x25c]
10003593:	8b 84 24 60 02 00 00 	mov    eax,DWORD PTR [esp+0x260]
1000359a:	89 83 08 04 00 00    	mov    DWORD PTR [ebx+0x408],eax
100035a0:	8b 84 24 64 02 00 00 	mov    eax,DWORD PTR [esp+0x264]
100035a7:	89 83 0c 04 00 00    	mov    DWORD PTR [ebx+0x40c],eax
100035ad:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
100035b4:	89 83 10 04 00 00    	mov    DWORD PTR [ebx+0x410],eax
100035ba:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
100035c1:	89 83 14 04 00 00    	mov    DWORD PTR [ebx+0x414],eax
100035c7:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
100035ce:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
100035d4:	31 c0                	xor    eax,eax
100035d6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100035d8:	68 00 40 00 00       	push   0x4000
100035dd:	e8 fc ff ff ff       	call   100035de <NIContext::NIContext(Video*, int, int, int, int)+0x68>	100035de: R_386_PC32	malloc
100035e2:	c7 83 04 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x404],0x0
100035ec:	89 03                	mov    DWORD PTR [ebx],eax
100035ee:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
100035f5:	e8 fc ff ff ff       	call   100035f6 <NIContext::NIContext(Video*, int, int, int, int)+0x80>	100035f6: R_386_PC32	malloc
100035fa:	83 c4 0c             	add    esp,0xc
100035fd:	89 c6                	mov    esi,eax
100035ff:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10003601: R_386_32	kernelProcess
10003605:	68 f4 69 00 10       	push   0x100069f4	10003606: R_386_32	.text
1000360a:	50                   	push   eax
1000360b:	e8 fc ff ff ff       	call   1000360c <NIContext::NIContext(Video*, int, int, int, int)+0x96>	1000360c: R_386_PC32	Directory::Directory(char const*, Process*)
10003610:	83 c4 10             	add    esp,0x10
10003613:	85 f6                	test   esi,esi
10003615:	75 10                	jne    10003627 <NIContext::NIContext(Video*, int, int, int, int)+0xb1>
10003617:	83 ec 0c             	sub    esp,0xc
1000361a:	68 08 6a 00 10       	push   0x10006a08	1000361b: R_386_32	.text
1000361f:	e8 fc ff ff ff       	call   10003620 <NIContext::NIContext(Video*, int, int, int, int)+0xaa>	10003620: R_386_PC32	KePanic(char const*)
10003624:	83 c4 10             	add    esp,0x10
10003627:	83 ec 0c             	sub    esp,0xc
1000362a:	56                   	push   esi
1000362b:	e8 fc ff ff ff       	call   1000362c <NIContext::NIContext(Video*, int, int, int, int)+0xb6>	1000362c: R_386_PC32	Directory::open()
10003630:	83 c4 10             	add    esp,0x10
10003633:	85 c0                	test   eax,eax
10003635:	75 e0                	jne    10003617 <NIContext::NIContext(Video*, int, int, int, int)+0xa1>
10003637:	83 ec 0c             	sub    esp,0xc
1000363a:	8b 06                	mov    eax,DWORD PTR [esi]
1000363c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
10003640:	51                   	push   ecx
10003641:	8d 94 24 30 01 00 00 	lea    edx,[esp+0x130]
10003648:	52                   	push   edx
10003649:	6a 00                	push   0x0
1000364b:	68 10 01 00 00       	push   0x110
10003650:	56                   	push   esi
10003651:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003654:	83 c4 20             	add    esp,0x20
10003657:	85 c0                	test   eax,eax
10003659:	0f 85 a0 01 00 00    	jne    100037ff <NIContext::NIContext(Video*, int, int, int, int)+0x289>
1000365f:	81 7c 24 14 10 01 00 00 	cmp    DWORD PTR [esp+0x14],0x110
10003667:	0f 85 92 01 00 00    	jne    100037ff <NIContext::NIContext(Video*, int, int, int, int)+0x289>
1000366d:	8d ac 24 30 01 00 00 	lea    ebp,[esp+0x130]
10003674:	83 c9 ff             	or     ecx,0xffffffff
10003677:	83 ec 0c             	sub    esp,0xc
1000367a:	89 ef                	mov    edi,ebp
1000367c:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
1000367e:	8b bb 04 04 00 00    	mov    edi,DWORD PTR [ebx+0x404]
10003684:	89 ca                	mov    edx,ecx
10003686:	f7 d2                	not    edx
10003688:	52                   	push   edx
10003689:	e8 fc ff ff ff       	call   1000368a <NIContext::NIContext(Video*, int, int, int, int)+0x114>	1000368a: R_386_PC32	malloc
1000368e:	89 44 bb 04          	mov    DWORD PTR [ebx+edi*4+0x4],eax
10003692:	47                   	inc    edi
10003693:	89 bb 04 04 00 00    	mov    DWORD PTR [ebx+0x404],edi
10003699:	5a                   	pop    edx
1000369a:	59                   	pop    ecx
1000369b:	55                   	push   ebp
1000369c:	50                   	push   eax
1000369d:	e8 fc ff ff ff       	call   1000369e <NIContext::NIContext(Video*, int, int, int, int)+0x128>	1000369e: R_386_PC32	strcpy
100036a2:	5f                   	pop    edi
100036a3:	58                   	pop    eax
100036a4:	68 23 6a 00 10       	push   0x10006a23	100036a5: R_386_32	.text
100036a9:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
100036ad:	57                   	push   edi
100036ae:	e8 fc ff ff ff       	call   100036af <NIContext::NIContext(Video*, int, int, int, int)+0x139>	100036af: R_386_PC32	strcpy
100036b3:	58                   	pop    eax
100036b4:	5a                   	pop    edx
100036b5:	55                   	push   ebp
100036b6:	57                   	push   edi
100036b7:	e8 fc ff ff ff       	call   100036b8 <NIContext::NIContext(Video*, int, int, int, int)+0x142>	100036b8: R_386_PC32	strcat
100036bc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
100036c3:	e8 fc ff ff ff       	call   100036c4 <NIContext::NIContext(Video*, int, int, int, int)+0x14e>	100036c4: R_386_PC32	malloc
100036c8:	83 c4 0c             	add    esp,0xc
100036cb:	89 c5                	mov    ebp,eax
100036cd:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100036cf: R_386_32	kernelProcess
100036d3:	57                   	push   edi
100036d4:	50                   	push   eax
100036d5:	e8 fc ff ff ff       	call   100036d6 <NIContext::NIContext(Video*, int, int, int, int)+0x160>	100036d6: R_386_PC32	File::File(char const*, Process*)
100036da:	83 c4 10             	add    esp,0x10
100036dd:	85 ed                	test   ebp,ebp
100036df:	0f 84 52 ff ff ff    	je     10003637 <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
100036e5:	50                   	push   eax
100036e6:	50                   	push   eax
100036e7:	6a 01                	push   0x1
100036e9:	55                   	push   ebp
100036ea:	e8 fc ff ff ff       	call   100036eb <NIContext::NIContext(Video*, int, int, int, int)+0x175>	100036eb: R_386_PC32	File::open(FileOpenMode)
100036ef:	83 c4 10             	add    esp,0x10
100036f2:	85 c0                	test   eax,eax
100036f4:	74 0c                	je     10003702 <NIContext::NIContext(Video*, int, int, int, int)+0x18c>
100036f6:	83 ec 0c             	sub    esp,0xc
100036f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100036fc:	55                   	push   ebp
100036fd:	e9 b4 00 00 00       	jmp    100037b6 <NIContext::NIContext(Video*, int, int, int, int)+0x240>
10003702:	50                   	push   eax
10003703:	8d 44 24 17          	lea    eax,[esp+0x17]
10003707:	50                   	push   eax
10003708:	8d 44 24 20          	lea    eax,[esp+0x20]
1000370c:	50                   	push   eax
1000370d:	55                   	push   ebp
1000370e:	e8 fc ff ff ff       	call   1000370f <NIContext::NIContext(Video*, int, int, int, int)+0x199>	1000370f: R_386_PC32	File::stat(unsigned long long*, bool*)
10003713:	83 c4 10             	add    esp,0x10
10003716:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
1000371b:	74 0e                	je     1000372b <NIContext::NIContext(Video*, int, int, int, int)+0x1b5>
1000371d:	83 ec 0c             	sub    esp,0xc
10003720:	55                   	push   ebp
10003721:	e8 fc ff ff ff       	call   10003722 <NIContext::NIContext(Video*, int, int, int, int)+0x1ac>	10003722: R_386_PC32	File::close()
10003726:	e9 85 00 00 00       	jmp    100037b0 <NIContext::NIContext(Video*, int, int, int, int)+0x23a>
1000372b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
1000372f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10003733:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003737:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
1000373b:	83 ec 0c             	sub    esp,0xc
1000373e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10003742:	e8 fc ff ff ff       	call   10003743 <NIContext::NIContext(Video*, int, int, int, int)+0x1cd>	10003743: R_386_PC32	malloc
10003747:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000374b:	58                   	pop    eax
1000374c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000374f:	8d 54 24 20          	lea    edx,[esp+0x20]
10003753:	52                   	push   edx
10003754:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10003758:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000375c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003760:	55                   	push   ebp
10003761:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003764:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10003768:	83 c4 1c             	add    esp,0x1c
1000376b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000376f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003773:	68 38 6a 00 10       	push   0x10006a38	10003774: R_386_32	.text
10003778:	e8 fc ff ff ff       	call   10003779 <NIContext::NIContext(Video*, int, int, int, int)+0x203>	10003779: R_386_PC32	Dbg::kprintf(char const*, ...)
1000377d:	83 c4 10             	add    esp,0x10
10003780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003784:	85 c0                	test   eax,eax
10003786:	75 15                	jne    1000379d <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003788:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000378c:	89 c1                	mov    ecx,eax
1000378e:	c1 f9 1f             	sar    ecx,0x1f
10003791:	3b 4c 24 1c          	cmp    ecx,DWORD PTR [esp+0x1c]
10003795:	75 06                	jne    1000379d <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003797:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
1000379b:	74 24                	je     100037c1 <NIContext::NIContext(Video*, int, int, int, int)+0x24b>
1000379d:	83 ec 0c             	sub    esp,0xc
100037a0:	55                   	push   ebp
100037a1:	e8 fc ff ff ff       	call   100037a2 <NIContext::NIContext(Video*, int, int, int, int)+0x22c>	100037a2: R_386_PC32	File::close()
100037a6:	58                   	pop    eax
100037a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
100037ab:	e8 fc ff ff ff       	call   100037ac <NIContext::NIContext(Video*, int, int, int, int)+0x236>	100037ac: R_386_PC32	free
100037b0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100037b3:	89 2c 24             	mov    DWORD PTR [esp],ebp
100037b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
100037b9:	83 c4 10             	add    esp,0x10
100037bc:	e9 76 fe ff ff       	jmp    10003637 <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
100037c1:	50                   	push   eax
100037c2:	50                   	push   eax
100037c3:	57                   	push   edi
100037c4:	68 4c 6a 00 10       	push   0x10006a4c	100037c5: R_386_32	.text
100037c9:	e8 fc ff ff ff       	call   100037ca <NIContext::NIContext(Video*, int, int, int, int)+0x254>	100037ca: R_386_PC32	Dbg::kprintf(char const*, ...)
100037ce:	5a                   	pop    edx
100037cf:	59                   	pop    ecx
100037d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
100037d4:	68 00 00 00 00       	push   0x0	100037d5: R_386_32	ssfn_ctx
100037d9:	e8 fc ff ff ff       	call   100037da <NIContext::NIContext(Video*, int, int, int, int)+0x264>	100037da: R_386_PC32	ssfn_load
100037de:	5b                   	pop    ebx
100037df:	5f                   	pop    edi
100037e0:	50                   	push   eax
100037e1:	68 5d 6a 00 10       	push   0x10006a5d	100037e2: R_386_32	.text
100037e6:	e8 fc ff ff ff       	call   100037e7 <NIContext::NIContext(Video*, int, int, int, int)+0x271>	100037e7: R_386_PC32	Dbg::kprintf(char const*, ...)
100037eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
100037ee:	e8 fc ff ff ff       	call   100037ef <NIContext::NIContext(Video*, int, int, int, int)+0x279>	100037ef: R_386_PC32	File::close()
100037f3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100037f6:	89 2c 24             	mov    DWORD PTR [esp],ebp
100037f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
100037fc:	83 c4 10             	add    esp,0x10
100037ff:	83 ec 0c             	sub    esp,0xc
10003802:	56                   	push   esi
10003803:	e8 fc ff ff ff       	call   10003804 <NIContext::NIContext(Video*, int, int, int, int)+0x28e>	10003804: R_386_PC32	Directory::close()
10003808:	8b 06                	mov    eax,DWORD PTR [esi]
1000380a:	89 34 24             	mov    DWORD PTR [esp],esi
1000380d:	ff 50 08             	call   DWORD PTR [eax+0x8]
10003810:	b8 00 00 00 00       	mov    eax,0x0	10003811: R_386_32	ssfn_ctx
10003815:	e8 f7 cb ff ff       	call   10000411 <_ssfn_fc.part.1>
1000381a:	c7 05 14 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x14,0x0	1000381c: R_386_32	ssfn_ctx
10003824:	c7 05 18 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x18,0x0	10003826: R_386_32	ssfn_ctx
1000382e:	c7 05 b8 f5 00 00 ff 00 00 00 	mov    DWORD PTR ds:0xf5b8,0xff	10003830: R_386_32	ssfn_ctx
10003838:	c7 05 bc f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5bc,0x0	1000383a: R_386_32	ssfn_ctx
10003842:	c7 05 c0 f5 00 00 10 00 00 00 	mov    DWORD PTR ds:0xf5c0,0x10	10003844: R_386_32	ssfn_ctx
1000384c:	c7 05 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5c4,0x0	1000384e: R_386_32	ssfn_ctx
10003856:	81 c4 4c 02 00 00    	add    esp,0x24c
1000385c:	5b                   	pop    ebx
1000385d:	5e                   	pop    esi
1000385e:	5f                   	pop    edi
1000385f:	5d                   	pop    ebp
10003860:	c3                   	ret    
10003861:	90                   	nop

10003862 <NiCreateEvent(NIWindow*, int, bool)>:
10003862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003866:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
1000386a:	81 e2 ff ff 03 00    	and    edx,0x3ffff
10003870:	89 d1                	mov    ecx,edx
10003872:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
10003875:	c1 e1 0d             	shl    ecx,0xd
10003878:	81 e2 ff 1f 00 80    	and    edx,0x80001fff
1000387e:	09 ca                	or     edx,ecx
10003880:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10003883:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
10003887:	8a 50 07             	mov    dl,BYTE PTR [eax+0x7]
1000388a:	c1 e1 07             	shl    ecx,0x7
1000388d:	83 e2 7f             	and    edx,0x7f
10003890:	09 ca                	or     edx,ecx
10003892:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10003895:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10003899:	89 10                	mov    DWORD PTR [eax],edx
1000389b:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000389d: R_386_32	mouseDesktop
100038a1:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
100038a7:	66 89 48 08          	mov    WORD PTR [eax+0x8],cx
100038ab:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100038b1:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100038b7:	66 89 48 0a          	mov    WORD PTR [eax+0xa],cx
100038bb:	89 d1                	mov    ecx,edx
100038bd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
100038c0:	66 81 e1 ff 03       	and    cx,0x3ff
100038c5:	66 81 e2 00 fc       	and    dx,0xfc00
100038ca:	09 ca                	or     edx,ecx
100038cc:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
100038d0:	c2 04 00             	ret    0x4

100038d3 <NiKeyhandler(KeyboardToken, bool*)>:
100038d3:	57                   	push   edi
100038d4:	56                   	push   esi
100038d5:	53                   	push   ebx
100038d6:	83 ec 20             	sub    esp,0x20
100038d9:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100038db: R_386_32	mouseDesktop
100038df:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
100038e3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100038e6:	8b 00                	mov    eax,DWORD PTR [eax]
100038e8:	85 c0                	test   eax,eax
100038ea:	0f 84 f9 00 00 00    	je     100039e9 <NiKeyhandler(KeyboardToken, bool*)+0x116>
100038f0:	8b 10                	mov    edx,DWORD PTR [eax]
100038f2:	85 d2                	test   edx,edx
100038f4:	0f 84 ef 00 00 00    	je     100039e9 <NiKeyhandler(KeyboardToken, bool*)+0x116>
100038fa:	80 7c 24 32 01       	cmp    BYTE PTR [esp+0x32],0x1
100038ff:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10003903:	19 c0                	sbb    eax,eax
10003905:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
10003909:	81 e6 ff 1f 00 80    	and    esi,0x80001fff
1000390f:	83 c0 09             	add    eax,0x9
10003912:	25 ff ff 03 00       	and    eax,0x3ffff
10003917:	c1 e0 0d             	shl    eax,0xd
1000391a:	09 f0                	or     eax,esi
1000391c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003920:	80 64 24 0f 7f       	and    BYTE PTR [esp+0xf],0x7f
10003925:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
1000392b:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
10003930:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10003936:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
1000393b:	8b 83 1c 04 00 00    	mov    eax,DWORD PTR [ebx+0x41c]
10003941:	89 c3                	mov    ebx,eax
10003943:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003947:	66 81 e3 ff 03       	and    bx,0x3ff
1000394c:	66 25 00 fc          	and    ax,0xfc00
10003950:	09 d8                	or     eax,ebx
10003952:	8a 99 04 01 00 00    	mov    bl,BYTE PTR [ecx+0x104]
10003958:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
1000395d:	83 e3 01             	and    ebx,0x1
10003960:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10003964:	c1 e3 04             	shl    ebx,0x4
10003967:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
1000396c:	8a 81 00 01 00 00    	mov    al,BYTE PTR [ecx+0x100]
10003972:	8a 89 01 01 00 00    	mov    cl,BYTE PTR [ecx+0x101]
10003978:	83 e0 01             	and    eax,0x1
1000397b:	83 e1 01             	and    ecx,0x1
1000397e:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10003985:	c1 e1 03             	shl    ecx,0x3
10003988:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
1000398c:	83 e0 eb             	and    eax,0xffffffeb
1000398f:	09 f0                	or     eax,esi
10003991:	09 d8                	or     eax,ebx
10003993:	83 e0 f7             	and    eax,0xfffffff7
10003996:	09 c8                	or     eax,ecx
10003998:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	1000399a: R_386_32	desktopHasFocus
1000399f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
100039a3:	75 19                	jne    100039be <NiKeyhandler(KeyboardToken, bool*)+0xeb>
100039a5:	83 ec 1c             	sub    esp,0x1c
100039a8:	b9 06 00 00 00       	mov    ecx,0x6
100039ad:	8d 74 24 24          	lea    esi,[esp+0x24]
100039b1:	89 e7                	mov    edi,esp
100039b3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100039b5:	52                   	push   edx
100039b6:	e8 fc ff ff ff       	call   100039b7 <NiKeyhandler(KeyboardToken, bool*)+0xe4>	100039b7: R_386_PC32	NIWindow::postEvent(NiEvent)
100039bb:	83 c4 20             	add    esp,0x20
100039be:	a1 00 00 00 00       	mov    eax,ds:0x0	100039bf: R_386_32	desktopWindowDummy
100039c3:	85 c0                	test   eax,eax
100039c5:	74 22                	je     100039e9 <NiKeyhandler(KeyboardToken, bool*)+0x116>
100039c7:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	100039c9: R_386_32	desktopHasFocus
100039ce:	74 19                	je     100039e9 <NiKeyhandler(KeyboardToken, bool*)+0x116>
100039d0:	83 ec 1c             	sub    esp,0x1c
100039d3:	b9 06 00 00 00       	mov    ecx,0x6
100039d8:	8d 74 24 24          	lea    esi,[esp+0x24]
100039dc:	89 e7                	mov    edi,esp
100039de:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100039e0:	50                   	push   eax
100039e1:	e8 fc ff ff ff       	call   100039e2 <NiKeyhandler(KeyboardToken, bool*)+0x10f>	100039e2: R_386_PC32	NIWindow::postEvent(NiEvent)
100039e6:	83 c4 20             	add    esp,0x20
100039e9:	83 c4 20             	add    esp,0x20
100039ec:	5b                   	pop    ebx
100039ed:	5e                   	pop    esi
100039ee:	5f                   	pop    edi
100039ef:	c3                   	ret    

100039f0 <NiLoadCursors()>:
100039f0:	55                   	push   ebp
100039f1:	57                   	push   edi
100039f2:	56                   	push   esi
100039f3:	53                   	push   ebx
100039f4:	83 ec 38             	sub    esp,0x38
100039f7:	68 14 01 00 00       	push   0x114
100039fc:	e8 fc ff ff ff       	call   100039fd <NiLoadCursors()+0xd>	100039fd: R_386_PC32	malloc
10003a01:	83 c4 0c             	add    esp,0xc
10003a04:	89 c5                	mov    ebp,eax
10003a06:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10003a08: R_386_32	kernelProcess
10003a0c:	68 1c 6d 00 10       	push   0x10006d1c	10003a0d: R_386_32	.text
10003a11:	50                   	push   eax
10003a12:	e8 fc ff ff ff       	call   10003a13 <NiLoadCursors()+0x23>	10003a13: R_386_PC32	File::File(char const*, Process*)
10003a17:	58                   	pop    eax
10003a18:	5a                   	pop    edx
10003a19:	6a 01                	push   0x1
10003a1b:	55                   	push   ebp
10003a1c:	e8 fc ff ff ff       	call   10003a1d <NiLoadCursors()+0x2d>	10003a1d: R_386_PC32	File::open(FileOpenMode)
10003a21:	83 c4 10             	add    esp,0x10
10003a24:	85 c0                	test   eax,eax
10003a26:	74 0a                	je     10003a32 <NiLoadCursors()+0x42>
10003a28:	83 ec 0c             	sub    esp,0xc
10003a2b:	68 3b 6d 00 10       	push   0x10006d3b	10003a2c: R_386_32	.text
10003a30:	eb 4c                	jmp    10003a7e <NiLoadCursors()+0x8e>
10003a32:	50                   	push   eax
10003a33:	8d 44 24 17          	lea    eax,[esp+0x17]
10003a37:	50                   	push   eax
10003a38:	8d 44 24 20          	lea    eax,[esp+0x20]
10003a3c:	50                   	push   eax
10003a3d:	55                   	push   ebp
10003a3e:	e8 fc ff ff ff       	call   10003a3f <NiLoadCursors()+0x4f>	10003a3f: R_386_PC32	File::stat(unsigned long long*, bool*)
10003a43:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10003a47:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10003a4b:	89 34 24             	mov    DWORD PTR [esp],esi
10003a4e:	e8 fc ff ff ff       	call   10003a4f <NiLoadCursors()+0x5f>	10003a4f: R_386_PC32	malloc
10003a53:	89 c3                	mov    ebx,eax
10003a55:	58                   	pop    eax
10003a56:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003a59:	8d 54 24 20          	lea    edx,[esp+0x20]
10003a5d:	52                   	push   edx
10003a5e:	53                   	push   ebx
10003a5f:	57                   	push   edi
10003a60:	56                   	push   esi
10003a61:	55                   	push   ebp
10003a62:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003a65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10003a69:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10003a6d:	83 c4 20             	add    esp,0x20
10003a70:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
10003a74:	74 12                	je     10003a88 <NiLoadCursors()+0x98>
10003a76:	83 ec 0c             	sub    esp,0xc
10003a79:	68 4f 6d 00 10       	push   0x10006d4f	10003a7a: R_386_32	.text
10003a7e:	e8 fc ff ff ff       	call   10003a7f <NiLoadCursors()+0x8f>	10003a7f: R_386_PC32	Dbg::kprintf(char const*, ...)
10003a83:	e9 24 01 00 00       	jmp    10003bac <NiLoadCursors()+0x1bc>
10003a88:	6a 00                	push   0x0
10003a8a:	31 ed                	xor    ebp,ebp
10003a8c:	68 04 01 00 00       	push   0x104
10003a91:	52                   	push   edx
10003a92:	50                   	push   eax
10003a93:	e8 fc ff ff ff       	call   10003a94 <NiLoadCursors()+0xa4>	10003a94: R_386_PC32	__udivdi3
10003a98:	83 c4 10             	add    esp,0x10
10003a9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003a9f:	8d 04 83             	lea    eax,[ebx+eax*4]
10003aa2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003aa6:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
10003aaa:	0f 8d f3 00 00 00    	jge    10003ba3 <NiLoadCursors()+0x1b3>
10003ab0:	8d 34 ab             	lea    esi,[ebx+ebp*4]
10003ab3:	50                   	push   eax
10003ab4:	6a 04                	push   0x4
10003ab6:	68 63 6d 00 10       	push   0x10006d63	10003ab7: R_386_32	.text
10003abb:	56                   	push   esi
10003abc:	e8 fc ff ff ff       	call   10003abd <NiLoadCursors()+0xcd>	10003abd: R_386_PC32	memcmp
10003ac1:	83 c4 10             	add    esp,0x10
10003ac4:	85 c0                	test   eax,eax
10003ac6:	0f 84 b8 00 00 00    	je     10003b84 <NiLoadCursors()+0x194>
10003acc:	50                   	push   eax
10003acd:	6a 04                	push   0x4
10003acf:	68 68 6d 00 10       	push   0x10006d68	10003ad0: R_386_32	.text
10003ad4:	56                   	push   esi
10003ad5:	e8 fc ff ff ff       	call   10003ad6 <NiLoadCursors()+0xe6>	10003ad6: R_386_PC32	memcmp
10003ada:	83 c4 10             	add    esp,0x10
10003add:	85 c0                	test   eax,eax
10003adf:	74 7b                	je     10003b5c <NiLoadCursors()+0x16c>
10003ae1:	50                   	push   eax
10003ae2:	6a 04                	push   0x4
10003ae4:	68 6d 6d 00 10       	push   0x10006d6d	10003ae5: R_386_32	.text
10003ae9:	56                   	push   esi
10003aea:	e8 fc ff ff ff       	call   10003aeb <NiLoadCursors()+0xfb>	10003aeb: R_386_PC32	memcmp
10003aef:	83 c4 10             	add    esp,0x10
10003af2:	85 c0                	test   eax,eax
10003af4:	74 6d                	je     10003b63 <NiLoadCursors()+0x173>
10003af6:	57                   	push   edi
10003af7:	6a 04                	push   0x4
10003af9:	68 72 6d 00 10       	push   0x10006d72	10003afa: R_386_32	.text
10003afe:	56                   	push   esi
10003aff:	e8 fc ff ff ff       	call   10003b00 <NiLoadCursors()+0x110>	10003b00: R_386_PC32	memcmp
10003b04:	83 c4 10             	add    esp,0x10
10003b07:	85 c0                	test   eax,eax
10003b09:	74 5f                	je     10003b6a <NiLoadCursors()+0x17a>
10003b0b:	51                   	push   ecx
10003b0c:	6a 04                	push   0x4
10003b0e:	68 77 6d 00 10       	push   0x10006d77	10003b0f: R_386_32	.text
10003b13:	56                   	push   esi
10003b14:	e8 fc ff ff ff       	call   10003b15 <NiLoadCursors()+0x125>	10003b15: R_386_PC32	memcmp
10003b19:	83 c4 10             	add    esp,0x10
10003b1c:	85 c0                	test   eax,eax
10003b1e:	74 51                	je     10003b71 <NiLoadCursors()+0x181>
10003b20:	52                   	push   edx
10003b21:	6a 04                	push   0x4
10003b23:	68 7c 6d 00 10       	push   0x10006d7c	10003b24: R_386_32	.text
10003b28:	56                   	push   esi
10003b29:	e8 fc ff ff ff       	call   10003b2a <NiLoadCursors()+0x13a>	10003b2a: R_386_PC32	memcmp
10003b2e:	83 c4 10             	add    esp,0x10
10003b31:	85 c0                	test   eax,eax
10003b33:	74 43                	je     10003b78 <NiLoadCursors()+0x188>
10003b35:	50                   	push   eax
10003b36:	6a 04                	push   0x4
10003b38:	68 81 6d 00 10       	push   0x10006d81	10003b39: R_386_32	.text
10003b3d:	56                   	push   esi
10003b3e:	e8 fc ff ff ff       	call   10003b3f <NiLoadCursors()+0x14f>	10003b3f: R_386_PC32	memcmp
10003b43:	83 c4 10             	add    esp,0x10
10003b46:	85 c0                	test   eax,eax
10003b48:	74 35                	je     10003b7f <NiLoadCursors()+0x18f>
10003b4a:	83 ec 0c             	sub    esp,0xc
10003b4d:	68 86 6d 00 10       	push   0x10006d86	10003b4e: R_386_32	.text
10003b52:	e8 fc ff ff ff       	call   10003b53 <NiLoadCursors()+0x163>	10003b53: R_386_PC32	Dbg::kprintf(char const*, ...)
10003b57:	83 c4 10             	add    esp,0x10
10003b5a:	eb 47                	jmp    10003ba3 <NiLoadCursors()+0x1b3>
10003b5c:	b8 00 02 00 00       	mov    eax,0x200
10003b61:	eb 21                	jmp    10003b84 <NiLoadCursors()+0x194>
10003b63:	b8 00 03 00 00       	mov    eax,0x300
10003b68:	eb 1a                	jmp    10003b84 <NiLoadCursors()+0x194>
10003b6a:	b8 00 01 00 00       	mov    eax,0x100
10003b6f:	eb 13                	jmp    10003b84 <NiLoadCursors()+0x194>
10003b71:	b8 00 04 00 00       	mov    eax,0x400
10003b76:	eb 0c                	jmp    10003b84 <NiLoadCursors()+0x194>
10003b78:	b8 00 05 00 00       	mov    eax,0x500
10003b7d:	eb 05                	jmp    10003b84 <NiLoadCursors()+0x194>
10003b7f:	b8 00 06 00 00       	mov    eax,0x600
10003b84:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10003b86: R_386_32	___mouse_data
10003b8a:	b9 00 01 00 00       	mov    ecx,0x100
10003b8f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10003b93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10003b95:	45                   	inc    ebp
10003b96:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10003b9e:	e9 03 ff ff ff       	jmp    10003aa6 <NiLoadCursors()+0xb6>
10003ba3:	83 ec 0c             	sub    esp,0xc
10003ba6:	53                   	push   ebx
10003ba7:	e8 fc ff ff ff       	call   10003ba8 <NiLoadCursors()+0x1b8>	10003ba8: R_386_PC32	free
10003bac:	83 c4 10             	add    esp,0x10
10003baf:	83 c4 2c             	add    esp,0x2c
10003bb2:	5b                   	pop    ebx
10003bb3:	5e                   	pop    esi
10003bb4:	5f                   	pop    edi
10003bb5:	5d                   	pop    ebp
10003bb6:	c3                   	ret    
10003bb7:	90                   	nop

10003bb8 <NIDesktop::desktopDecode(int)>:
10003bb8:	57                   	push   edi
10003bb9:	56                   	push   esi
10003bba:	53                   	push   ebx
10003bbb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10003bbf:	0f ba e1 0f          	bt     ecx,0xf
10003bc3:	73 45                	jae    10003c0a <NIDesktop::desktopDecode(int)+0x52>
10003bc5:	bf 33 00 00 00       	mov    edi,0x33
10003bca:	89 ce                	mov    esi,ecx
10003bcc:	89 cb                	mov    ebx,ecx
10003bce:	83 e6 1f             	and    esi,0x1f
10003bd1:	c1 fb 05             	sar    ebx,0x5
10003bd4:	c1 f9 0a             	sar    ecx,0xa
10003bd7:	83 e3 1f             	and    ebx,0x1f
10003bda:	83 e1 1f             	and    ecx,0x1f
10003bdd:	69 f6 a5 01 00 00    	imul   esi,esi,0x1a5
10003be3:	69 c1 a5 01 00 00    	imul   eax,ecx,0x1a5
10003be9:	69 db a5 01 00 00    	imul   ebx,ebx,0x1a5
10003bef:	99                   	cdq    
10003bf0:	f7 ff                	idiv   edi
10003bf2:	c1 e0 10             	shl    eax,0x10
10003bf5:	89 c1                	mov    ecx,eax
10003bf7:	89 d8                	mov    eax,ebx
10003bf9:	99                   	cdq    
10003bfa:	f7 ff                	idiv   edi
10003bfc:	c1 e0 08             	shl    eax,0x8
10003bff:	09 c1                	or     ecx,eax
10003c01:	89 f0                	mov    eax,esi
10003c03:	99                   	cdq    
10003c04:	f7 ff                	idiv   edi
10003c06:	09 c8                	or     eax,ecx
10003c08:	eb 0b                	jmp    10003c15 <NIDesktop::desktopDecode(int)+0x5d>
10003c0a:	0f b6 c9             	movzx  ecx,cl
10003c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003c11:	8b 44 88 08          	mov    eax,DWORD PTR [eax+ecx*4+0x8]
10003c15:	5b                   	pop    ebx
10003c16:	5e                   	pop    esi
10003c17:	5f                   	pop    edi
10003c18:	c3                   	ret    
10003c19:	90                   	nop

10003c1a <NIDesktop::NIDesktop(NIContext*)>:
10003c1a:	55                   	push   ebp
10003c1b:	57                   	push   edi
10003c1c:	31 ff                	xor    edi,edi
10003c1e:	56                   	push   esi
10003c1f:	53                   	push   ebx
10003c20:	83 ec 1c             	sub    esp,0x1c
10003c23:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
10003c27:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
10003c2b:	c7 86 14 04 00 00 1e 00 00 00 	mov    DWORD PTR [esi+0x414],0x1e
10003c35:	89 2e                	mov    DWORD PTR [esi],ebp
10003c37:	c7 86 18 04 00 00 1e 00 00 00 	mov    DWORD PTR [esi+0x418],0x1e
10003c41:	c7 86 20 04 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x420],0x0
10003c4b:	89 f9                	mov    ecx,edi
10003c4d:	89 fb                	mov    ebx,edi
10003c4f:	83 e1 03             	and    ecx,0x3
10003c52:	c1 fb 02             	sar    ebx,0x2
10003c55:	69 c9 ff 00 00 00    	imul   ecx,ecx,0xff
10003c5b:	83 e3 07             	and    ebx,0x7
10003c5e:	89 f8                	mov    eax,edi
10003c60:	69 d3 ff 00 00 00    	imul   edx,ebx,0xff
10003c66:	c1 f8 05             	sar    eax,0x5
10003c69:	bb 03 00 00 00       	mov    ebx,0x3
10003c6e:	69 c0 ff 00 00 00    	imul   eax,eax,0xff
10003c74:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
10003c78:	31 d2                	xor    edx,edx
10003c7a:	f7 f3                	div    ebx
10003c7c:	31 d2                	xor    edx,edx
10003c7e:	c1 e0 10             	shl    eax,0x10
10003c81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003c85:	89 c8                	mov    eax,ecx
10003c87:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003c8b:	f7 f3                	div    ebx
10003c8d:	31 d2                	xor    edx,edx
10003c8f:	09 c1                	or     ecx,eax
10003c91:	bb 07 00 00 00       	mov    ebx,0x7
10003c96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003c9a:	f7 f3                	div    ebx
10003c9c:	c1 e0 08             	shl    eax,0x8
10003c9f:	09 c1                	or     ecx,eax
10003ca1:	89 4c be 08          	mov    DWORD PTR [esi+edi*4+0x8],ecx
10003ca5:	47                   	inc    edi
10003ca6:	81 ff 80 00 00 00    	cmp    edi,0x80
10003cac:	75 9d                	jne    10003c4b <NIDesktop::NIDesktop(NIContext*)+0x31>
10003cae:	83 ec 0c             	sub    esp,0xc
10003cb1:	8b 85 10 04 00 00    	mov    eax,DWORD PTR [ebp+0x410]
10003cb7:	0f af 85 0c 04 00 00 	imul   eax,DWORD PTR [ebp+0x40c]
10003cbe:	01 c0                	add    eax,eax
10003cc0:	50                   	push   eax
10003cc1:	e8 fc ff ff ff       	call   10003cc2 <NIDesktop::NIDesktop(NIContext*)+0xa8>	10003cc2: R_386_PC32	malloc
10003cc6:	89 86 08 04 00 00    	mov    DWORD PTR [esi+0x408],eax
10003ccc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
10003cd3:	e8 fc ff ff ff       	call   10003cd4 <NIDesktop::NIDesktop(NIContext*)+0xba>	10003cd4: R_386_PC32	malloc
10003cd8:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10003cda: R_386_32	mouseDesktop
10003cde:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10003ce5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003ceb:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
10003cee:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003cf0: R_386_32	guiMouseHandler
	10003cf4: R_386_32	NiHandleMouse(int, int, int, int)
10003cf8:	83 c4 2c             	add    esp,0x2c
10003cfb:	5b                   	pop    ebx
10003cfc:	5e                   	pop    esi
10003cfd:	5f                   	pop    edi
10003cfe:	5d                   	pop    ebp
10003cff:	c3                   	ret    

10003d00 <NiShutdownHandler(void*)>:
10003d00:	56                   	push   esi
10003d01:	53                   	push   ebx
10003d02:	31 db                	xor    ebx,ebx
10003d04:	52                   	push   edx
10003d05:	83 ec 0c             	sub    esp,0xc
10003d08:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d09: R_386_32	mouseDesktop
10003d0d:	8b 00                	mov    eax,DWORD PTR [eax]
10003d0f:	ff b0 08 04 00 00    	push   DWORD PTR [eax+0x408]
10003d15:	e8 fc ff ff ff       	call   10003d16 <NiShutdownHandler(void*)+0x16>	10003d16: R_386_PC32	Video::getHeight()
10003d1a:	83 c4 10             	add    esp,0x10
10003d1d:	39 d8                	cmp    eax,ebx
10003d1f:	7e 45                	jle    10003d66 <NiShutdownHandler(void*)+0x66>
10003d21:	31 f6                	xor    esi,esi
10003d23:	83 ec 0c             	sub    esp,0xc
10003d26:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d27: R_386_32	mouseDesktop
10003d2b:	8b 00                	mov    eax,DWORD PTR [eax]
10003d2d:	ff b0 08 04 00 00    	push   DWORD PTR [eax+0x408]
10003d33:	e8 fc ff ff ff       	call   10003d34 <NiShutdownHandler(void*)+0x34>	10003d34: R_386_PC32	Video::getWidth()
10003d38:	83 c4 10             	add    esp,0x10
10003d3b:	39 f0                	cmp    eax,esi
10003d3d:	7e 24                	jle    10003d63 <NiShutdownHandler(void*)+0x63>
10003d3f:	8d 04 33             	lea    eax,[ebx+esi*1]
10003d42:	a8 01                	test   al,0x1
10003d44:	74 1a                	je     10003d60 <NiShutdownHandler(void*)+0x60>
10003d46:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d47: R_386_32	mouseDesktop
10003d4b:	8b 00                	mov    eax,DWORD PTR [eax]
10003d4d:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10003d53:	8b 10                	mov    edx,DWORD PTR [eax]
10003d55:	6a 00                	push   0x0
10003d57:	53                   	push   ebx
10003d58:	56                   	push   esi
10003d59:	50                   	push   eax
10003d5a:	ff 52 24             	call   DWORD PTR [edx+0x24]
10003d5d:	83 c4 10             	add    esp,0x10
10003d60:	46                   	inc    esi
10003d61:	eb c0                	jmp    10003d23 <NiShutdownHandler(void*)+0x23>
10003d63:	43                   	inc    ebx
10003d64:	eb 9f                	jmp    10003d05 <NiShutdownHandler(void*)+0x5>
10003d66:	58                   	pop    eax
10003d67:	5b                   	pop    ebx
10003d68:	5e                   	pop    esi
10003d69:	c3                   	ret    

10003d6a <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)>:
10003d6a:	55                   	push   ebp
10003d6b:	57                   	push   edi
10003d6c:	56                   	push   esi
10003d6d:	53                   	push   ebx
10003d6e:	83 ec 2c             	sub    esp,0x2c
10003d71:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003d75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003d78:	8b 28                	mov    ebp,DWORD PTR [eax]
10003d7a:	83 7d 04 00          	cmp    DWORD PTR [ebp+0x4],0x0
10003d7e:	0f 84 a2 00 00 00    	je     10003e26 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xbc>
10003d84:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
10003d87:	85 db                	test   ebx,ebx
10003d89:	0f 84 8f 00 00 00    	je     10003e1e <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xb4>
10003d8f:	3b 5c 24 44          	cmp    ebx,DWORD PTR [esp+0x44]
10003d93:	0f 84 85 00 00 00    	je     10003e1e <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xb4>
10003d99:	83 ec 0c             	sub    esp,0xc
10003d9c:	53                   	push   ebx
10003d9d:	e8 fc ff ff ff       	call   10003d9e <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x34>	10003d9e: R_386_PC32	NIWindow::invalidate()
10003da2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
10003da6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
10003daa:	a1 00 00 00 00       	mov    eax,ds:0x0	10003dab: R_386_32	milliTenthsSinceBoot
10003daf:	83 ec 0c             	sub    esp,0xc
10003db2:	89 86 0c 04 00 00    	mov    DWORD PTR [esi+0x40c],eax
10003db8:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	10003dba: R_386_32	milliTenthsSinceBoot
10003dbe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10003dc2:	89 96 10 04 00 00    	mov    DWORD PTR [esi+0x410],edx
10003dc8:	25 ff 1f 00 00       	and    eax,0x1fff
10003dcd:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003dcf: R_386_32	mouseDesktop
10003dd3:	0d 00 60 00 80       	or     eax,0x80006000
10003dd8:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10003dde:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10003de2:	66 89 4c 24 2c       	mov    WORD PTR [esp+0x2c],cx
10003de7:	66 25 00 7c          	and    ax,0x7c00
10003deb:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10003df1:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10003df7:	66 89 4c 24 2e       	mov    WORD PTR [esp+0x2e],cx
10003dfc:	66 81 e2 ff 03       	and    dx,0x3ff
10003e01:	b9 06 00 00 00       	mov    ecx,0x6
10003e06:	09 d0                	or     eax,edx
10003e08:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
10003e0d:	8d 74 24 24          	lea    esi,[esp+0x24]
10003e11:	89 e7                	mov    edi,esp
10003e13:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10003e15:	53                   	push   ebx
10003e16:	e8 fc ff ff ff       	call   10003e17 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xad>	10003e17: R_386_PC32	NIWindow::postEvent(NiEvent)
10003e1b:	83 c4 20             	add    esp,0x20
10003e1e:	8b 6d 04             	mov    ebp,DWORD PTR [ebp+0x4]
10003e21:	e9 54 ff ff ff       	jmp    10003d7a <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x10>
10003e26:	83 c4 2c             	add    esp,0x2c
10003e29:	5b                   	pop    ebx
10003e2a:	5e                   	pop    esi
10003e2b:	5f                   	pop    edi
10003e2c:	5d                   	pop    ebp
10003e2d:	c3                   	ret    

10003e2e <NIDesktop::getTopmostWindowAtPixel(int, int)>:
10003e2e:	57                   	push   edi
10003e2f:	56                   	push   esi
10003e30:	53                   	push   ebx
10003e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003e35:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10003e39:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003e3c:	8b 00                	mov    eax,DWORD PTR [eax]
10003e3e:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10003e41:	85 db                	test   ebx,ebx
10003e43:	74 52                	je     10003e97 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x69>
10003e45:	8b 00                	mov    eax,DWORD PTR [eax]
10003e47:	85 c0                	test   eax,eax
10003e49:	74 4e                	je     10003e99 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x6b>
10003e4b:	8b 90 6c 02 00 00    	mov    edx,DWORD PTR [eax+0x26c]
10003e51:	39 ca                	cmp    edx,ecx
10003e53:	7e 04                	jle    10003e59 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x2b>
10003e55:	89 d8                	mov    eax,ebx
10003e57:	eb e5                	jmp    10003e3e <NIDesktop::getTopmostWindowAtPixel(int, int)+0x10>
10003e59:	8b b0 74 02 00 00    	mov    esi,DWORD PTR [eax+0x274]
10003e5f:	01 d6                	add    esi,edx
10003e61:	39 ce                	cmp    esi,ecx
10003e63:	7e f0                	jle    10003e55 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x27>
10003e65:	89 ce                	mov    esi,ecx
10003e67:	29 d6                	sub    esi,edx
10003e69:	8b 90 64 02 00 00    	mov    edx,DWORD PTR [eax+0x264]
10003e6f:	8d 34 b2             	lea    esi,[edx+esi*4]
10003e72:	8b 90 68 02 00 00    	mov    edx,DWORD PTR [eax+0x268]
10003e78:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003e7b:	01 d7                	add    edi,edx
10003e7d:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
10003e81:	7f d2                	jg     10003e55 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x27>
10003e83:	03 90 70 02 00 00    	add    edx,DWORD PTR [eax+0x270]
10003e89:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003e8d:	29 f2                	sub    edx,esi
10003e8f:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10003e93:	7e c0                	jle    10003e55 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x27>
10003e95:	eb 02                	jmp    10003e99 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x6b>
10003e97:	31 c0                	xor    eax,eax
10003e99:	5b                   	pop    ebx
10003e9a:	5e                   	pop    esi
10003e9b:	5f                   	pop    edi
10003e9c:	c3                   	ret    
10003e9d:	90                   	nop

10003e9e <NIDesktop::renderScanline(int, int, int)>:
10003e9e:	55                   	push   ebp
10003e9f:	57                   	push   edi
10003ea0:	56                   	push   esi
10003ea1:	53                   	push   ebx
10003ea2:	83 ec 3c             	sub    esp,0x3c
10003ea5:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
10003eaa:	0f 88 cd 05 00 00    	js     1000447d <NIDesktop::renderScanline(int, int, int)+0x5df>
10003eb0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
10003eb4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
10003eb8:	8b 00                	mov    eax,DWORD PTR [eax]
10003eba:	39 98 10 04 00 00    	cmp    DWORD PTR [eax+0x410],ebx
10003ec0:	0f 8e b7 05 00 00    	jle    1000447d <NIDesktop::renderScanline(int, int, int)+0x5df>
10003ec6:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
10003ecb:	0f 88 ac 05 00 00    	js     1000447d <NIDesktop::renderScanline(int, int, int)+0x5df>
10003ed1:	8b 90 0c 04 00 00    	mov    edx,DWORD PTR [eax+0x40c]
10003ed7:	3b 54 24 58          	cmp    edx,DWORD PTR [esp+0x58]
10003edb:	0f 9c c0             	setl   al
10003ede:	3b 54 24 5c          	cmp    edx,DWORD PTR [esp+0x5c]
10003ee2:	0f 9c c1             	setl   cl
10003ee5:	09 c8                	or     eax,ecx
10003ee7:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10003eeb:	c1 e9 1f             	shr    ecx,0x1f
10003eee:	08 c8                	or     al,cl
10003ef0:	89 c5                	mov    ebp,eax
10003ef2:	0f 85 85 05 00 00    	jne    1000447d <NIDesktop::renderScanline(int, int, int)+0x5df>
10003ef8:	0f af d3             	imul   edx,ebx
10003efb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10003eff:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
10003f03:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
10003f07:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003f0b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10003f0f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10003f13:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003f15: R_386_32	render
10003f19:	89 e8                	mov    eax,ebp
10003f1b:	89 d7                	mov    edi,edx
10003f1d:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003f1f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10003f23:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10003f27:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003f29: R_386_32	shadow
10003f2d:	b0 80                	mov    al,0x80
10003f2f:	89 d7                	mov    edi,edx
10003f31:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003f33:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
10003f37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003f3a:	8b 00                	mov    eax,DWORD PTR [eax]
10003f3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003f40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003f44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10003f48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003f4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003f4f:	85 c0                	test   eax,eax
10003f51:	0f 84 2e 04 00 00    	je     10004385 <NIDesktop::renderScanline(int, int, int)+0x4e7>
10003f57:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10003f5b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
10003f5d:	85 db                	test   ebx,ebx
10003f5f:	0f 84 20 04 00 00    	je     10004385 <NIDesktop::renderScanline(int, int, int)+0x4e7>
10003f65:	39 1d 00 00 00 00    	cmp    DWORD PTR ds:0x0,ebx	10003f67: R_386_32	movingWin
10003f6b:	75 06                	jne    10003f73 <NIDesktop::renderScanline(int, int, int)+0xd5>
10003f6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003f71:	eb d5                	jmp    10003f48 <NIDesktop::renderScanline(int, int, int)+0xaa>
10003f73:	8b 93 8c 02 00 00    	mov    edx,DWORD PTR [ebx+0x28c]
10003f79:	89 d1                	mov    ecx,edx
10003f7b:	83 e1 12             	and    ecx,0x12
10003f7e:	83 f9 12             	cmp    ecx,0x12
10003f81:	74 ea                	je     10003f6d <NIDesktop::renderScanline(int, int, int)+0xcf>
10003f83:	0f ba e2 09          	bt     edx,0x9
10003f87:	72 e4                	jb     10003f6d <NIDesktop::renderScanline(int, int, int)+0xcf>
10003f89:	83 ec 0c             	sub    esp,0xc
10003f8c:	53                   	push   ebx
10003f8d:	e8 fc ff ff ff       	call   10003f8e <NIDesktop::renderScanline(int, int, int)+0xf0>	10003f8e: R_386_PC32	NIWindow::request()
10003f92:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
10003f98:	8b 93 74 02 00 00    	mov    edx,DWORD PTR [ebx+0x274]
10003f9e:	83 c4 10             	add    esp,0x10
10003fa1:	01 c2                	add    edx,eax
10003fa3:	3b 54 24 54          	cmp    edx,DWORD PTR [esp+0x54]
10003fa7:	0f 8e 0e 01 00 00    	jle    100040bb <NIDesktop::renderScanline(int, int, int)+0x21d>
10003fad:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
10003fb4:	0f 85 01 01 00 00    	jne    100040bb <NIDesktop::renderScanline(int, int, int)+0x21d>
10003fba:	f6 83 8c 02 00 00 40 	test   BYTE PTR [ebx+0x28c],0x40
10003fc1:	0f 85 17 02 00 00    	jne    100041de <NIDesktop::renderScanline(int, int, int)+0x340>
10003fc7:	8b 83 68 02 00 00    	mov    eax,DWORD PTR [ebx+0x268]
10003fcd:	8b b3 68 02 00 00    	mov    esi,DWORD PTR [ebx+0x268]
10003fd3:	8b bb 70 02 00 00    	mov    edi,DWORD PTR [ebx+0x270]
10003fd9:	01 f7                	add    edi,esi
10003fdb:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
10003fdf:	39 c7                	cmp    edi,eax
10003fe1:	0f 8e f7 01 00 00    	jle    100041de <NIDesktop::renderScanline(int, int, int)+0x340>
10003fe7:	3b 44 24 58          	cmp    eax,DWORD PTR [esp+0x58]
10003feb:	0f 8c c4 00 00 00    	jl     100040b5 <NIDesktop::renderScanline(int, int, int)+0x217>
10003ff1:	3b 44 24 5c          	cmp    eax,DWORD PTR [esp+0x5c]
10003ff5:	0f 8f e3 01 00 00    	jg     100041de <NIDesktop::renderScanline(int, int, int)+0x340>
10003ffb:	8b bb 8c 02 00 00    	mov    edi,DWORD PTR [ebx+0x28c]
10004001:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
10004005:	81 e7 00 01 00 00    	and    edi,0x100
1000400b:	83 ff 01             	cmp    edi,0x1
1000400e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10004012:	19 c9                	sbb    ecx,ecx
10004014:	8b bb 6c 02 00 00    	mov    edi,DWORD PTR [ebx+0x26c]
1000401a:	83 e1 03             	and    ecx,0x3
1000401d:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10004021:	83 c1 02             	add    ecx,0x2
10004024:	6b ff fc             	imul   edi,edi,0xfffffffc
10004027:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
1000402b:	89 c7                	mov    edi,eax
1000402d:	29 f7                	sub    edi,esi
1000402f:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10004033:	39 54 24 20          	cmp    DWORD PTR [esp+0x20],edx
10004037:	7f 24                	jg     1000405d <NIDesktop::renderScanline(int, int, int)+0x1bf>
10004039:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
1000403d:	8d 34 96             	lea    esi,[esi+edx*4]
10004040:	03 b3 64 02 00 00    	add    esi,DWORD PTR [ebx+0x264]
10004046:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10004049:	3b 7c 24 2c          	cmp    edi,DWORD PTR [esp+0x2c]
1000404d:	7f 0e                	jg     1000405d <NIDesktop::renderScanline(int, int, int)+0x1bf>
1000404f:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10004053:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10004057:	29 f7                	sub    edi,esi
10004059:	39 c7                	cmp    edi,eax
1000405b:	7d 0b                	jge    10004068 <NIDesktop::renderScanline(int, int, int)+0x1ca>
1000405d:	42                   	inc    edx
1000405e:	89 d6                	mov    esi,edx
10004060:	2b 74 24 54          	sub    esi,DWORD PTR [esp+0x54]
10004064:	39 f1                	cmp    ecx,esi
10004066:	7d cb                	jge    10004033 <NIDesktop::renderScanline(int, int, int)+0x195>
10004068:	89 d6                	mov    esi,edx
1000406a:	2b 74 24 54          	sub    esi,DWORD PTR [esp+0x54]
1000406e:	39 f1                	cmp    ecx,esi
10004070:	0f 9f c1             	setg   cl
10004073:	85 f6                	test   esi,esi
10004075:	0f 9f c2             	setg   dl
10004078:	20 d1                	and    cl,dl
1000407a:	74 39                	je     100040b5 <NIDesktop::renderScanline(int, int, int)+0x217>
1000407c:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	1000407e: R_386_32	render
10004083:	75 30                	jne    100040b5 <NIDesktop::renderScanline(int, int, int)+0x217>
10004085:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000408a:	74 09                	je     10004095 <NIDesktop::renderScanline(int, int, int)+0x1f7>
1000408c:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	1000408e: R_386_32	shadow
10004093:	eb 1e                	jmp    100040b3 <NIDesktop::renderScanline(int, int, int)+0x215>
10004095:	8d 34 f5 5d 00 00 00 	lea    esi,[esi*8+0x5d]
1000409c:	0f b6 90 00 00 00 00 	movzx  edx,BYTE PTR [eax+0x0]	1000409f: R_386_32	shadow
100040a3:	0f af d6             	imul   edx,esi
100040a6:	d1 fe                	sar    esi,1
100040a8:	c1 fa 08             	sar    edx,0x8
100040ab:	01 f2                	add    edx,esi
100040ad:	88 90 00 00 00 00    	mov    BYTE PTR [eax+0x0],dl	100040af: R_386_32	shadow
100040b3:	89 cd                	mov    ebp,ecx
100040b5:	40                   	inc    eax
100040b6:	e9 12 ff ff ff       	jmp    10003fcd <NIDesktop::renderScanline(int, int, int)+0x12f>
100040bb:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
100040bf:	0f 8d 19 01 00 00    	jge    100041de <NIDesktop::renderScanline(int, int, int)+0x340>
100040c5:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
100040cc:	0f 85 0c 01 00 00    	jne    100041de <NIDesktop::renderScanline(int, int, int)+0x340>
100040d2:	f6 83 8c 02 00 00 40 	test   BYTE PTR [ebx+0x28c],0x40
100040d9:	0f 85 ff 00 00 00    	jne    100041de <NIDesktop::renderScanline(int, int, int)+0x340>
100040df:	8b 83 68 02 00 00    	mov    eax,DWORD PTR [ebx+0x268]
100040e5:	8b b3 68 02 00 00    	mov    esi,DWORD PTR [ebx+0x268]
100040eb:	8b bb 70 02 00 00    	mov    edi,DWORD PTR [ebx+0x270]
100040f1:	01 f7                	add    edi,esi
100040f3:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
100040f7:	39 c7                	cmp    edi,eax
100040f9:	0f 8e df 00 00 00    	jle    100041de <NIDesktop::renderScanline(int, int, int)+0x340>
100040ff:	3b 44 24 58          	cmp    eax,DWORD PTR [esp+0x58]
10004103:	0f 8c cf 00 00 00    	jl     100041d8 <NIDesktop::renderScanline(int, int, int)+0x33a>
10004109:	3b 44 24 5c          	cmp    eax,DWORD PTR [esp+0x5c]
1000410d:	0f 8f cb 00 00 00    	jg     100041de <NIDesktop::renderScanline(int, int, int)+0x340>
10004113:	8b bb 8c 02 00 00    	mov    edi,DWORD PTR [ebx+0x28c]
10004119:	81 e7 00 01 00 00    	and    edi,0x100
1000411f:	83 ff 01             	cmp    edi,0x1
10004122:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
10004126:	19 c9                	sbb    ecx,ecx
10004128:	89 c7                	mov    edi,eax
1000412a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
1000412e:	29 f7                	sub    edi,esi
10004130:	83 64 24 10 03       	and    DWORD PTR [esp+0x10],0x3
10004135:	8b 4c 24 54          	mov    ecx,DWORD PTR [esp+0x54]
10004139:	83 44 24 10 02       	add    DWORD PTR [esp+0x10],0x2
1000413e:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10004142:	49                   	dec    ecx
10004143:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
10004147:	29 cf                	sub    edi,ecx
10004149:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
1000414d:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
10004151:	7c 3b                	jl     1000418e <NIDesktop::renderScanline(int, int, int)+0x2f0>
10004153:	8b bb 6c 02 00 00    	mov    edi,DWORD PTR [ebx+0x26c]
10004159:	8b b3 74 02 00 00    	mov    esi,DWORD PTR [ebx+0x274]
1000415f:	8d 14 37             	lea    edx,[edi+esi*1]
10004162:	39 ca                	cmp    edx,ecx
10004164:	7e dc                	jle    10004142 <NIDesktop::renderScanline(int, int, int)+0x2a4>
10004166:	89 ca                	mov    edx,ecx
10004168:	29 fa                	sub    edx,edi
1000416a:	39 d6                	cmp    esi,edx
1000416c:	7e 20                	jle    1000418e <NIDesktop::renderScanline(int, int, int)+0x2f0>
1000416e:	8b b3 64 02 00 00    	mov    esi,DWORD PTR [ebx+0x264]
10004174:	8d 34 96             	lea    esi,[esi+edx*4]
10004177:	0f b7 3e             	movzx  edi,WORD PTR [esi]
1000417a:	3b 7c 24 2c          	cmp    edi,DWORD PTR [esp+0x2c]
1000417e:	7f c2                	jg     10004142 <NIDesktop::renderScanline(int, int, int)+0x2a4>
10004180:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10004184:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10004188:	29 f7                	sub    edi,esi
1000418a:	39 c7                	cmp    edi,eax
1000418c:	7c b4                	jl     10004142 <NIDesktop::renderScanline(int, int, int)+0x2a4>
1000418e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004192:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
10004196:	76 40                	jbe    100041d8 <NIDesktop::renderScanline(int, int, int)+0x33a>
10004198:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	1000419a: R_386_32	render
1000419f:	75 37                	jne    100041d8 <NIDesktop::renderScanline(int, int, int)+0x33a>
100041a1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
100041a6:	74 09                	je     100041b1 <NIDesktop::renderScanline(int, int, int)+0x313>
100041a8:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	100041aa: R_386_32	shadow
100041af:	eb 22                	jmp    100041d3 <NIDesktop::renderScanline(int, int, int)+0x335>
100041b1:	0f b6 90 00 00 00 00 	movzx  edx,BYTE PTR [eax+0x0]	100041b4: R_386_32	shadow
100041b8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
100041bc:	8d 0c f5 5d 00 00 00 	lea    ecx,[esi*8+0x5d]
100041c3:	0f af d1             	imul   edx,ecx
100041c6:	d1 f9                	sar    ecx,1
100041c8:	c1 fa 08             	sar    edx,0x8
100041cb:	01 d1                	add    ecx,edx
100041cd:	88 88 00 00 00 00    	mov    BYTE PTR [eax+0x0],cl	100041cf: R_386_32	shadow
100041d3:	bd 01 00 00 00       	mov    ebp,0x1
100041d8:	40                   	inc    eax
100041d9:	e9 07 ff ff ff       	jmp    100040e5 <NIDesktop::renderScanline(int, int, int)+0x247>
100041de:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
100041e4:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
100041e8:	0f 8f 82 01 00 00    	jg     10004370 <NIDesktop::renderScanline(int, int, int)+0x4d2>
100041ee:	8b 93 74 02 00 00    	mov    edx,DWORD PTR [ebx+0x274]
100041f4:	01 c2                	add    edx,eax
100041f6:	3b 54 24 54          	cmp    edx,DWORD PTR [esp+0x54]
100041fa:	0f 8e 70 01 00 00    	jle    10004370 <NIDesktop::renderScanline(int, int, int)+0x4d2>
10004200:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
10004204:	29 c2                	sub    edx,eax
10004206:	8b 83 64 02 00 00    	mov    eax,DWORD PTR [ebx+0x264]
1000420c:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
10004213:	8d 04 90             	lea    eax,[eax+edx*4]
10004216:	0f b7 30             	movzx  esi,WORD PTR [eax]
10004219:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
1000421d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10004221:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004225:	0f 85 d8 00 00 00    	jne    10004303 <NIDesktop::renderScanline(int, int, int)+0x465>
1000422b:	8b 83 8c 02 00 00    	mov    eax,DWORD PTR [ebx+0x28c]
10004231:	a8 40                	test   al,0x40
10004233:	0f 85 ca 00 00 00    	jne    10004303 <NIDesktop::renderScanline(int, int, int)+0x465>
10004239:	25 00 01 00 00       	and    eax,0x100
1000423e:	83 f8 01             	cmp    eax,0x1
10004241:	19 c9                	sbb    ecx,ecx
10004243:	83 e1 fe             	and    ecx,0xfffffffe
10004246:	83 c1 03             	add    ecx,0x3
10004249:	8b 83 68 02 00 00    	mov    eax,DWORD PTR [ebx+0x268]
1000424f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10004253:	8b bb 8c 02 00 00    	mov    edi,DWORD PTR [ebx+0x28c]
10004259:	8d 74 30 fc          	lea    esi,[eax+esi*1-0x4]
1000425d:	81 e7 00 01 00 00    	and    edi,0x100
10004263:	01 ce                	add    esi,ecx
10004265:	03 83 70 02 00 00    	add    eax,DWORD PTR [ebx+0x270]
1000426b:	89 fa                	mov    edx,edi
1000426d:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
10004271:	01 c8                	add    eax,ecx
10004273:	83 ff 01             	cmp    edi,0x1
10004276:	19 ff                	sbb    edi,edi
10004278:	f7 d7                	not    edi
1000427a:	83 e7 03             	and    edi,0x3
1000427d:	29 f8                	sub    eax,edi
1000427f:	80 be 00 00 00 00 00 	cmp    BYTE PTR [esi+0x0],0x0	10004281: R_386_32	render
10004286:	75 31                	jne    100042b9 <NIDesktop::renderScanline(int, int, int)+0x41b>
10004288:	85 d2                	test   edx,edx
1000428a:	74 09                	je     10004295 <NIDesktop::renderScanline(int, int, int)+0x3f7>
1000428c:	c6 86 00 00 00 00 00 	mov    BYTE PTR [esi+0x0],0x0	1000428e: R_386_32	shadow
10004293:	eb 1f                	jmp    100042b4 <NIDesktop::renderScanline(int, int, int)+0x416>
10004295:	0f b6 be 00 00 00 00 	movzx  edi,BYTE PTR [esi+0x0]	10004298: R_386_32	shadow
1000429c:	6b e9 f8             	imul   ebp,ecx,0xfffffff8
1000429f:	83 c5 7d             	add    ebp,0x7d
100042a2:	0f af fd             	imul   edi,ebp
100042a5:	d1 fd                	sar    ebp,1
100042a7:	c1 ff 08             	sar    edi,0x8
100042aa:	01 fd                	add    ebp,edi
100042ac:	89 ea                	mov    edx,ebp
100042ae:	88 96 00 00 00 00    	mov    BYTE PTR [esi+0x0],dl	100042b0: R_386_32	shadow
100042b4:	bd 01 00 00 00       	mov    ebp,0x1
100042b9:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	100042bb: R_386_32	render
100042c0:	75 37                	jne    100042f9 <NIDesktop::renderScanline(int, int, int)+0x45b>
100042c2:	f6 83 8d 02 00 00 01 	test   BYTE PTR [ebx+0x28d],0x1
100042c9:	74 09                	je     100042d4 <NIDesktop::renderScanline(int, int, int)+0x436>
100042cb:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	100042cd: R_386_32	shadow
100042d2:	eb 20                	jmp    100042f4 <NIDesktop::renderScanline(int, int, int)+0x456>
100042d4:	8d 3c cd 65 00 00 00 	lea    edi,[ecx*8+0x65]
100042db:	0f b6 b0 00 00 00 00 	movzx  esi,BYTE PTR [eax+0x0]	100042de: R_386_32	shadow
100042e2:	0f af f7             	imul   esi,edi
100042e5:	d1 ff                	sar    edi,1
100042e7:	c1 fe 08             	sar    esi,0x8
100042ea:	01 f7                	add    edi,esi
100042ec:	89 fa                	mov    edx,edi
100042ee:	88 90 00 00 00 00    	mov    BYTE PTR [eax+0x0],dl	100042f0: R_386_32	shadow
100042f4:	bd 01 00 00 00       	mov    ebp,0x1
100042f9:	41                   	inc    ecx
100042fa:	83 f9 04             	cmp    ecx,0x4
100042fd:	0f 85 46 ff ff ff    	jne    10004249 <NIDesktop::renderScanline(int, int, int)+0x3ab>
10004303:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10004307:	03 93 68 02 00 00    	add    edx,DWORD PTR [ebx+0x268]
1000430d:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10004313:	03 83 68 02 00 00    	add    eax,DWORD PTR [ebx+0x268]
10004319:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
1000431d:	39 d0                	cmp    eax,edx
1000431f:	7e 4f                	jle    10004370 <NIDesktop::renderScanline(int, int, int)+0x4d2>
10004321:	3b 54 24 58          	cmp    edx,DWORD PTR [esp+0x58]
10004325:	7c 46                	jl     1000436d <NIDesktop::renderScanline(int, int, int)+0x4cf>
10004327:	3b 54 24 5c          	cmp    edx,DWORD PTR [esp+0x5c]
1000432b:	7f 43                	jg     10004370 <NIDesktop::renderScanline(int, int, int)+0x4d2>
1000432d:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	1000432f: R_386_32	render
10004334:	75 37                	jne    1000436d <NIDesktop::renderScanline(int, int, int)+0x4cf>
10004336:	c6 82 00 00 00 00 01 	mov    BYTE PTR [edx+0x0],0x1	10004338: R_386_32	render
1000433d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10004341:	2b 83 6c 02 00 00    	sub    eax,DWORD PTR [ebx+0x26c]
10004347:	0f af 83 70 02 00 00 	imul   eax,DWORD PTR [ebx+0x270]
1000434e:	89 c1                	mov    ecx,eax
10004350:	89 d0                	mov    eax,edx
10004352:	2b 83 68 02 00 00    	sub    eax,DWORD PTR [ebx+0x268]
10004358:	01 c8                	add    eax,ecx
1000435a:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
1000435d:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
10004361:	8b 04 81             	mov    eax,DWORD PTR [ecx+eax*4]
10004364:	89 04 95 00 00 00 00 	mov    DWORD PTR [edx*4+0x0],eax	10004367: R_386_32	renderData
1000436b:	74 66                	je     100043d3 <NIDesktop::renderScanline(int, int, int)+0x535>
1000436d:	42                   	inc    edx
1000436e:	eb 9d                	jmp    1000430d <NIDesktop::renderScanline(int, int, int)+0x46f>
10004370:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
10004377:	75 0c                	jne    10004385 <NIDesktop::renderScanline(int, int, int)+0x4e7>
10004379:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000437d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10004380:	e9 e8 fb ff ff       	jmp    10003f6d <NIDesktop::renderScanline(int, int, int)+0xcf>
10004385:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
10004389:	3b 5c 24 5c          	cmp    ebx,DWORD PTR [esp+0x5c]
1000438d:	7d 44                	jge    100043d3 <NIDesktop::renderScanline(int, int, int)+0x535>
1000438f:	80 bb 00 00 00 00 00 	cmp    BYTE PTR [ebx+0x0],0x0	10004391: R_386_32	render
10004396:	75 38                	jne    100043d0 <NIDesktop::renderScanline(int, int, int)+0x532>
10004398:	c6 83 00 00 00 00 01 	mov    BYTE PTR [ebx+0x0],0x1	1000439a: R_386_32	render
1000439f:	50                   	push   eax
100043a0:	50                   	push   eax
100043a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100043a5:	8d 14 18             	lea    edx,[eax+ebx*1]
100043a8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
100043ac:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
100043b2:	0f b7 04 50          	movzx  eax,WORD PTR [eax+edx*2]
100043b6:	50                   	push   eax
100043b7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
100043bb:	e8 fc ff ff ff       	call   100043bc <NIDesktop::renderScanline(int, int, int)+0x51e>	100043bc: R_386_PC32	NIDesktop::desktopDecode(int)
100043c0:	83 c4 10             	add    esp,0x10
100043c3:	89 04 9d 00 00 00 00 	mov    DWORD PTR [ebx*4+0x0],eax	100043c6: R_386_32	renderData
100043ca:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
100043ce:	74 03                	je     100043d3 <NIDesktop::renderScanline(int, int, int)+0x535>
100043d0:	43                   	inc    ebx
100043d1:	eb b6                	jmp    10004389 <NIDesktop::renderScanline(int, int, int)+0x4eb>
100043d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
100043d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100043da:	8b 00                	mov    eax,DWORD PTR [eax]
100043dc:	85 c0                	test   eax,eax
100043de:	74 67                	je     10004447 <NIDesktop::renderScanline(int, int, int)+0x5a9>
100043e0:	8b 00                	mov    eax,DWORD PTR [eax]
100043e2:	85 c0                	test   eax,eax
100043e4:	74 61                	je     10004447 <NIDesktop::renderScanline(int, int, int)+0x5a9>
100043e6:	80 b8 78 02 00 00 01 	cmp    BYTE PTR [eax+0x278],0x1
100043ed:	74 58                	je     10004447 <NIDesktop::renderScanline(int, int, int)+0x5a9>
100043ef:	89 e8                	mov    eax,ebp
100043f1:	84 c0                	test   al,al
100043f3:	74 52                	je     10004447 <NIDesktop::renderScanline(int, int, int)+0x5a9>
100043f5:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
100043f9:	3b 5c 24 5c          	cmp    ebx,DWORD PTR [esp+0x5c]
100043fd:	7d 48                	jge    10004447 <NIDesktop::renderScanline(int, int, int)+0x5a9>
100043ff:	8a 83 00 00 00 00    	mov    al,BYTE PTR [ebx+0x0]	10004401: R_386_32	shadow
10004405:	3c 80                	cmp    al,0x80
10004407:	74 3b                	je     10004444 <NIDesktop::renderScanline(int, int, int)+0x5a6>
10004409:	8b 14 9d 00 00 00 00 	mov    edx,DWORD PTR [ebx*4+0x0]	1000440c: R_386_32	renderData
10004410:	0f b6 f0             	movzx  esi,al
10004413:	89 d1                	mov    ecx,edx
10004415:	0f b6 c6             	movzx  eax,dh
10004418:	c1 e9 10             	shr    ecx,0x10
1000441b:	0f af c6             	imul   eax,esi
1000441e:	0f b6 c9             	movzx  ecx,cl
10004421:	0f b6 d2             	movzx  edx,dl
10004424:	0f af ce             	imul   ecx,esi
10004427:	0f af d6             	imul   edx,esi
1000442a:	c1 e9 07             	shr    ecx,0x7
1000442d:	c1 e8 07             	shr    eax,0x7
10004430:	c1 e1 10             	shl    ecx,0x10
10004433:	c1 e0 08             	shl    eax,0x8
10004436:	c1 ea 07             	shr    edx,0x7
10004439:	09 c1                	or     ecx,eax
1000443b:	09 ca                	or     edx,ecx
1000443d:	89 14 9d 00 00 00 00 	mov    DWORD PTR [ebx*4+0x0],edx	10004440: R_386_32	renderData
10004444:	43                   	inc    ebx
10004445:	eb b2                	jmp    100043f9 <NIDesktop::renderScanline(int, int, int)+0x55b>
10004447:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
1000444b:	83 ec 0c             	sub    esp,0xc
1000444e:	8b 00                	mov    eax,DWORD PTR [eax]
10004450:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004456:	8b 10                	mov    edx,DWORD PTR [eax]
10004458:	68 00 00 00 00       	push   0x0	10004459: R_386_32	renderData
1000445d:	6a 00                	push   0x0
1000445f:	6a 01                	push   0x1
10004461:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10004465:	6a 00                	push   0x0
10004467:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
1000446b:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
1000446f:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
10004476:	50                   	push   eax
10004477:	ff 52 38             	call   DWORD PTR [edx+0x38]
1000447a:	83 c4 30             	add    esp,0x30
1000447d:	83 c4 3c             	add    esp,0x3c
10004480:	5b                   	pop    ebx
10004481:	5e                   	pop    esi
10004482:	5f                   	pop    edi
10004483:	5d                   	pop    ebp
10004484:	c3                   	ret    
10004485:	90                   	nop

10004486 <NIDesktop::rangeRefresh(int, int, int, int, bool*)>:
10004486:	57                   	push   edi
10004487:	56                   	push   esi
10004488:	53                   	push   ebx
10004489:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
1000448d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10004491:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
10004495:	3b 5c 24 18          	cmp    ebx,DWORD PTR [esp+0x18]
10004499:	7d 29                	jge    100044c4 <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0x3e>
1000449b:	85 f6                	test   esi,esi
1000449d:	74 06                	je     100044a5 <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0x1f>
1000449f:	80 3c 1e 00          	cmp    BYTE PTR [esi+ebx*1],0x0
100044a3:	74 1c                	je     100044c1 <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0x3b>
100044a5:	8b 07                	mov    eax,DWORD PTR [edi]
100044a7:	39 98 10 04 00 00    	cmp    DWORD PTR [eax+0x410],ebx
100044ad:	7e 15                	jle    100044c4 <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0x3e>
100044af:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100044b3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100044b7:	53                   	push   ebx
100044b8:	57                   	push   edi
100044b9:	e8 fc ff ff ff       	call   100044ba <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0x34>	100044ba: R_386_PC32	NIDesktop::renderScanline(int, int, int)
100044be:	83 c4 10             	add    esp,0x10
100044c1:	43                   	inc    ebx
100044c2:	eb d1                	jmp    10004495 <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0xf>
100044c4:	5b                   	pop    ebx
100044c5:	5e                   	pop    esi
100044c6:	5f                   	pop    edi
100044c7:	c3                   	ret    

100044c8 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)>:
100044c8:	55                   	push   ebp
100044c9:	57                   	push   edi
100044ca:	56                   	push   esi
100044cb:	53                   	push   ebx
100044cc:	83 ec 34             	sub    esp,0x34
100044cf:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
100044d3:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
100044d7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
100044db:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
100044e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100044e5:	8d 4a 20             	lea    ecx,[edx+0x20]
100044e8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100044ec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100044f0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
100044f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100044f8:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
100044fe:	6a 00                	push   0x0
10004500:	51                   	push   ecx
10004501:	52                   	push   edx
10004502:	8d 50 20             	lea    edx,[eax+0x20]
10004505:	52                   	push   edx
10004506:	50                   	push   eax
10004507:	53                   	push   ebx
10004508:	e8 fc ff ff ff       	call   10004509 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0x41>	10004509: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
1000450d:	8b 86 6c 02 00 00    	mov    eax,DWORD PTR [esi+0x26c]
10004513:	8b 3b                	mov    edi,DWORD PTR [ebx]
10004515:	8b 96 74 02 00 00    	mov    edx,DWORD PTR [esi+0x274]
1000451b:	8b 8f 10 04 00 00    	mov    ecx,DWORD PTR [edi+0x410]
10004521:	01 c2                	add    edx,eax
10004523:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
10004527:	83 e9 05             	sub    ecx,0x5
1000452a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
1000452e:	83 c4 20             	add    esp,0x20
10004531:	8d 4a 05             	lea    ecx,[edx+0x5]
10004534:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
10004538:	7f 05                	jg     1000453f <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0x77>
1000453a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000453e:	49                   	dec    ecx
1000453f:	8b 96 68 02 00 00    	mov    edx,DWORD PTR [esi+0x268]
10004545:	89 d5                	mov    ebp,edx
10004547:	83 fa 05             	cmp    edx,0x5
1000454a:	7d 05                	jge    10004551 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0x89>
1000454c:	bd 05 00 00 00       	mov    ebp,0x5
10004551:	03 96 70 02 00 00    	add    edx,DWORD PTR [esi+0x270]
10004557:	83 ed 05             	sub    ebp,0x5
1000455a:	8b bf 0c 04 00 00    	mov    edi,DWORD PTR [edi+0x40c]
10004560:	8d 77 fb             	lea    esi,[edi-0x5]
10004563:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10004567:	8d 72 05             	lea    esi,[edx+0x5]
1000456a:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
1000456e:	7f 03                	jg     10004573 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xab>
10004570:	8d 77 ff             	lea    esi,[edi-0x1]
10004573:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
10004578:	75 07                	jne    10004581 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xb9>
1000457a:	89 c2                	mov    edx,eax
1000457c:	83 f8 05             	cmp    eax,0x5
1000457f:	eb 09                	jmp    1000458a <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xc2>
10004581:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10004585:	01 c2                	add    edx,eax
10004587:	83 fa 05             	cmp    edx,0x5
1000458a:	7d 05                	jge    10004591 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xc9>
1000458c:	ba 05 00 00 00       	mov    edx,0x5
10004591:	83 ea 05             	sub    edx,0x5
10004594:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
10004599:	74 12                	je     100045ad <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xe5>
1000459b:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
1000459f:	8d 48 05             	lea    ecx,[eax+0x5]
100045a2:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
100045a6:	7f 05                	jg     100045ad <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xe5>
100045a8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100045ac:	49                   	dec    ecx
100045ad:	50                   	push   eax
100045ae:	50                   	push   eax
100045af:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100045b3:	56                   	push   esi
100045b4:	55                   	push   ebp
100045b5:	51                   	push   ecx
100045b6:	52                   	push   edx
100045b7:	53                   	push   ebx
100045b8:	e8 fc ff ff ff       	call   100045b9 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xf1>	100045b9: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
100045bd:	8b 03                	mov    eax,DWORD PTR [ebx]
100045bf:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
100045c5:	8b 0a                	mov    ecx,DWORD PTR [edx]
100045c7:	c7 44 24 70 00 00 00 00 	mov    DWORD PTR [esp+0x70],0x0
100045cf:	8b 83 20 04 00 00    	mov    eax,DWORD PTR [ebx+0x420]
100045d5:	05 00 00 00 00       	add    eax,0x0	100045d6: R_386_32	___mouse_data
100045da:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
100045de:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
100045e4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
100045e8:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
100045ee:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
100045f2:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
100045f6:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
100045f9:	83 c4 4c             	add    esp,0x4c
100045fc:	5b                   	pop    ebx
100045fd:	5e                   	pop    esi
100045fe:	5f                   	pop    edi
100045ff:	5d                   	pop    ebp
10004600:	ff e0                	jmp    eax

10004602 <NIDesktop::completeRefresh()>:
10004602:	56                   	push   esi
10004603:	31 f6                	xor    esi,esi
10004605:	53                   	push   ebx
10004606:	83 ec 0c             	sub    esp,0xc
10004609:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000460d:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
10004613:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10004619:	8d 4a 20             	lea    ecx,[edx+0x20]
1000461c:	6a 00                	push   0x0
1000461e:	51                   	push   ecx
1000461f:	52                   	push   edx
10004620:	8d 50 20             	lea    edx,[eax+0x20]
10004623:	52                   	push   edx
10004624:	50                   	push   eax
10004625:	53                   	push   ebx
10004626:	e8 fc ff ff ff       	call   10004627 <NIDesktop::completeRefresh()+0x25>	10004627: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
1000462b:	83 c4 20             	add    esp,0x20
1000462e:	8b 03                	mov    eax,DWORD PTR [ebx]
10004630:	39 b0 10 04 00 00    	cmp    DWORD PTR [eax+0x410],esi
10004636:	7e 15                	jle    1000464d <NIDesktop::completeRefresh()+0x4b>
10004638:	ff b0 0c 04 00 00    	push   DWORD PTR [eax+0x40c]
1000463e:	6a 00                	push   0x0
10004640:	56                   	push   esi
10004641:	46                   	inc    esi
10004642:	53                   	push   ebx
10004643:	e8 fc ff ff ff       	call   10004644 <NIDesktop::completeRefresh()+0x42>	10004644: R_386_PC32	NIDesktop::renderScanline(int, int, int)
10004648:	83 c4 10             	add    esp,0x10
1000464b:	eb e1                	jmp    1000462e <NIDesktop::completeRefresh()+0x2c>
1000464d:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004653:	83 ec 0c             	sub    esp,0xc
10004656:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004658:	6a 00                	push   0x0
1000465a:	8b 83 20 04 00 00    	mov    eax,DWORD PTR [ebx+0x420]
10004660:	05 00 00 00 00       	add    eax,0x0	10004661: R_386_32	___mouse_data
10004665:	50                   	push   eax
10004666:	ff b3 18 04 00 00    	push   DWORD PTR [ebx+0x418]
1000466c:	ff b3 14 04 00 00    	push   DWORD PTR [ebx+0x414]
10004672:	52                   	push   edx
10004673:	ff 51 30             	call   DWORD PTR [ecx+0x30]
10004676:	83 c4 24             	add    esp,0x24
10004679:	5b                   	pop    ebx
1000467a:	5e                   	pop    esi
1000467b:	c3                   	ret    

1000467c <NIDesktop::addWindow(NIWindow*)>:
1000467c:	56                   	push   esi
1000467d:	53                   	push   ebx
1000467e:	83 ec 0c             	sub    esp,0xc
10004681:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10004685:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
10004689:	56                   	push   esi
1000468a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
1000468d:	e8 fc ff ff ff       	call   1000468e <NIDesktop::addWindow(NIWindow*)+0x12>	1000468e: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
10004692:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10004699:	6a ff                	push   0xffffffff
1000469b:	6a ff                	push   0xffffffff
1000469d:	56                   	push   esi
1000469e:	53                   	push   ebx
1000469f:	e8 fc ff ff ff       	call   100046a0 <NIDesktop::addWindow(NIWindow*)+0x24>	100046a0: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
100046a4:	83 c4 24             	add    esp,0x24
100046a7:	5b                   	pop    ebx
100046a8:	5e                   	pop    esi
100046a9:	c3                   	ret    

100046aa <NIDesktop::raiseWindow(NIWindow*)>:
100046aa:	53                   	push   ebx
100046ab:	83 ec 10             	sub    esp,0x10
100046ae:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100046b2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100046b6:	50                   	push   eax
100046b7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
100046ba:	e8 fc ff ff ff       	call   100046bb <NIDesktop::raiseWindow(NIWindow*)+0x11>	100046bb: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
100046bf:	58                   	pop    eax
100046c0:	5a                   	pop    edx
100046c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100046c5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
100046c8:	e8 fc ff ff ff       	call   100046c9 <NIDesktop::raiseWindow(NIWindow*)+0x1f>	100046c9: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
100046cd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
100046d4:	6a ff                	push   0xffffffff
100046d6:	6a ff                	push   0xffffffff
100046d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100046dc:	53                   	push   ebx
100046dd:	e8 fc ff ff ff       	call   100046de <NIDesktop::raiseWindow(NIWindow*)+0x34>	100046de: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
100046e2:	83 c4 28             	add    esp,0x28
100046e5:	5b                   	pop    ebx
100046e6:	c3                   	ret    
100046e7:	90                   	nop

100046e8 <NIDesktop::deleteWindow(NIWindow*)>:
100046e8:	53                   	push   ebx
100046e9:	83 ec 10             	sub    esp,0x10
100046ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100046f0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100046f4:	50                   	push   eax
100046f5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
100046f8:	e8 fc ff ff ff       	call   100046f9 <NIDesktop::deleteWindow(NIWindow*)+0x11>	100046f9: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
100046fd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10004704:	6a ff                	push   0xffffffff
10004706:	6a ff                	push   0xffffffff
10004708:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000470c:	53                   	push   ebx
1000470d:	e8 fc ff ff ff       	call   1000470e <NIDesktop::deleteWindow(NIWindow*)+0x26>	1000470e: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
10004712:	83 c4 28             	add    esp,0x28
10004715:	5b                   	pop    ebx
10004716:	c3                   	ret    
10004717:	90                   	nop

10004718 <NIDesktop::handleMouse(int, int, int, int)>:
10004718:	55                   	push   ebp
10004719:	57                   	push   edi
1000471a:	56                   	push   esi
1000471b:	53                   	push   ebx
1000471c:	81 ec 64 01 00 00    	sub    esp,0x164
10004722:	8b 9c 24 78 01 00 00 	mov    ebx,DWORD PTR [esp+0x178]
10004729:	8b b4 24 7c 01 00 00 	mov    esi,DWORD PTR [esp+0x17c]
10004730:	8b bc 24 80 01 00 00 	mov    edi,DWORD PTR [esp+0x180]
10004737:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
1000473d:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10004743:	8d 4a 20             	lea    ecx,[edx+0x20]
10004746:	6a 00                	push   0x0
10004748:	51                   	push   ecx
10004749:	52                   	push   edx
1000474a:	8d 50 20             	lea    edx,[eax+0x20]
1000474d:	52                   	push   edx
1000474e:	50                   	push   eax
1000474f:	53                   	push   ebx
10004750:	e8 fc ff ff ff       	call   10004751 <NIDesktop::handleMouse(int, int, int, int)+0x39>	10004751: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004755:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
1000475b:	8b 8b 1c 04 00 00    	mov    ecx,DWORD PTR [ebx+0x41c]
10004761:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10004765:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
10004769:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
1000476f:	8b 8c 24 9c 01 00 00 	mov    ecx,DWORD PTR [esp+0x19c]
10004776:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
1000477a:	89 8b 1c 04 00 00    	mov    DWORD PTR [ebx+0x41c],ecx
10004780:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10004784:	8d 14 30             	lea    edx,[eax+esi*1]
10004787:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000478b:	89 93 14 04 00 00    	mov    DWORD PTR [ebx+0x414],edx
10004791:	01 f8                	add    eax,edi
10004793:	83 c4 20             	add    esp,0x20
10004796:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
1000479c:	85 d2                	test   edx,edx
1000479e:	79 0a                	jns    100047aa <NIDesktop::handleMouse(int, int, int, int)+0x92>
100047a0:	c7 83 14 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x414],0x0
100047aa:	85 c0                	test   eax,eax
100047ac:	79 0a                	jns    100047b8 <NIDesktop::handleMouse(int, int, int, int)+0xa0>
100047ae:	c7 83 18 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x418],0x0
100047b8:	8b 13                	mov    edx,DWORD PTR [ebx]
100047ba:	8b 82 0c 04 00 00    	mov    eax,DWORD PTR [edx+0x40c]
100047c0:	3b 83 14 04 00 00    	cmp    eax,DWORD PTR [ebx+0x414]
100047c6:	7f 07                	jg     100047cf <NIDesktop::handleMouse(int, int, int, int)+0xb7>
100047c8:	48                   	dec    eax
100047c9:	89 83 14 04 00 00    	mov    DWORD PTR [ebx+0x414],eax
100047cf:	8b 82 10 04 00 00    	mov    eax,DWORD PTR [edx+0x410]
100047d5:	3b 83 18 04 00 00    	cmp    eax,DWORD PTR [ebx+0x418]
100047db:	7f 07                	jg     100047e4 <NIDesktop::handleMouse(int, int, int, int)+0xcc>
100047dd:	48                   	dec    eax
100047de:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
100047e4:	55                   	push   ebp
100047e5:	ff b3 18 04 00 00    	push   DWORD PTR [ebx+0x418]
100047eb:	ff b3 14 04 00 00    	push   DWORD PTR [ebx+0x414]
100047f1:	53                   	push   ebx
100047f2:	e8 fc ff ff ff       	call   100047f3 <NIDesktop::handleMouse(int, int, int, int)+0xdb>	100047f3: R_386_PC32	NIDesktop::getTopmostWindowAtPixel(int, int)
100047f7:	83 c4 10             	add    esp,0x10
100047fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100047fe:	8b 84 24 7c 01 00 00 	mov    eax,DWORD PTR [esp+0x17c]
10004805:	83 e0 01             	and    eax,0x1
10004808:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
1000480d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10004811:	0f 85 b6 0c 00 00    	jne    100054cd <NIDesktop::handleMouse(int, int, int, int)+0xdb5>
10004817:	8b 2d 00 00 00 00    	mov    ebp,DWORD PTR ds:0x0	10004819: R_386_32	prevClickon
1000481d:	85 ed                	test   ebp,ebp
1000481f:	0f 85 ac 0c 00 00    	jne    100054d1 <NIDesktop::handleMouse(int, int, int, int)+0xdb9>
10004825:	8b 2d 00 00 00 00    	mov    ebp,DWORD PTR ds:0x0	10004827: R_386_32	desktopWindowDummy
1000482b:	85 ed                	test   ebp,ebp
1000482d:	0f 84 6b 02 00 00    	je     10004a9e <NIDesktop::handleMouse(int, int, int, int)+0x386>
10004833:	09 fe                	or     esi,edi
10004835:	74 72                	je     100048a9 <NIDesktop::handleMouse(int, int, int, int)+0x191>
10004837:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
1000483c:	0f 84 e8 00 00 00    	je     1000492a <NIDesktop::handleMouse(int, int, int, int)+0x212>
10004842:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10004849:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000484b: R_386_32	mouseDesktop
1000484f:	89 ac 24 d8 00 00 00 	mov    DWORD PTR [esp+0xd8],ebp
10004856:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
1000485c:	25 ff 1f 00 00       	and    eax,0x1fff
10004861:	66 89 8c 24 e0 00 00 00 	mov    WORD PTR [esp+0xe0],cx
10004869:	80 cc a0             	or     ah,0xa0
1000486c:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10004872:	89 84 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],eax
10004879:	66 89 8c 24 e2 00 00 00 	mov    WORD PTR [esp+0xe2],cx
10004881:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10004887:	66 25 00 bc          	and    ax,0xbc00
1000488b:	66 81 e2 ff 03       	and    dx,0x3ff
10004890:	83 ec 1c             	sub    esp,0x1c
10004893:	09 d0                	or     eax,edx
10004895:	66 89 84 24 f8 00 00 00 	mov    WORD PTR [esp+0xf8],ax
1000489d:	8d b4 24 f4 00 00 00 	lea    esi,[esp+0xf4]
100048a4:	e9 ea 00 00 00       	jmp    10004993 <NIDesktop::handleMouse(int, int, int, int)+0x27b>
100048a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100048ad:	83 e0 01             	and    eax,0x1
100048b0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
100048b5:	74 73                	je     1000492a <NIDesktop::handleMouse(int, int, int, int)+0x212>
100048b7:	85 c0                	test   eax,eax
100048b9:	0f 85 e6 00 00 00    	jne    100049a5 <NIDesktop::handleMouse(int, int, int, int)+0x28d>
100048bf:	8b 84 24 f4 00 00 00 	mov    eax,DWORD PTR [esp+0xf4]
100048c6:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100048c8: R_386_32	mouseDesktop
100048cc:	89 ac 24 f0 00 00 00 	mov    DWORD PTR [esp+0xf0],ebp
100048d3:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
100048d9:	25 ff 1f 00 00       	and    eax,0x1fff
100048de:	66 89 8c 24 f8 00 00 00 	mov    WORD PTR [esp+0xf8],cx
100048e6:	80 cc c0             	or     ah,0xc0
100048e9:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100048ef:	89 84 24 f4 00 00 00 	mov    DWORD PTR [esp+0xf4],eax
100048f6:	66 89 8c 24 fa 00 00 00 	mov    WORD PTR [esp+0xfa],cx
100048fe:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10004904:	66 25 00 dc          	and    ax,0xdc00
10004908:	66 81 e2 ff 03       	and    dx,0x3ff
1000490d:	83 ec 1c             	sub    esp,0x1c
10004910:	09 d0                	or     eax,edx
10004912:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10004914: R_386_32	desktopHasFocus
10004919:	66 89 84 24 10 01 00 00 	mov    WORD PTR [esp+0x110],ax
10004921:	8d b4 24 0c 01 00 00 	lea    esi,[esp+0x10c]
10004928:	eb 69                	jmp    10004993 <NIDesktop::handleMouse(int, int, int, int)+0x27b>
1000492a:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
1000492f:	74 74                	je     100049a5 <NIDesktop::handleMouse(int, int, int, int)+0x28d>
10004931:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
10004938:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000493a: R_386_32	mouseDesktop
1000493e:	89 ac 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],ebp
10004945:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
1000494b:	25 ff 1f 00 00       	and    eax,0x1fff
10004950:	66 89 8c 24 10 01 00 00 	mov    WORD PTR [esp+0x110],cx
10004958:	80 cc e0             	or     ah,0xe0
1000495b:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10004961:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
10004968:	66 89 8c 24 12 01 00 00 	mov    WORD PTR [esp+0x112],cx
10004970:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10004976:	66 25 00 fc          	and    ax,0xfc00
1000497a:	66 81 e2 ff 03       	and    dx,0x3ff
1000497f:	83 ec 1c             	sub    esp,0x1c
10004982:	09 d0                	or     eax,edx
10004984:	66 89 84 24 28 01 00 00 	mov    WORD PTR [esp+0x128],ax
1000498c:	8d b4 24 24 01 00 00 	lea    esi,[esp+0x124]
10004993:	89 e7                	mov    edi,esp
10004995:	b9 06 00 00 00       	mov    ecx,0x6
1000499a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000499c:	55                   	push   ebp
1000499d:	e8 fc ff ff ff       	call   1000499e <NIDesktop::handleMouse(int, int, int, int)+0x286>	1000499e: R_386_PC32	NIWindow::postEvent(NiEvent)
100049a2:	83 c4 20             	add    esp,0x20
100049a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100049a9:	83 e0 02             	and    eax,0x2
100049ac:	f6 84 24 7c 01 00 00 02 	test   BYTE PTR [esp+0x17c],0x2
100049b4:	74 6e                	je     10004a24 <NIDesktop::handleMouse(int, int, int, int)+0x30c>
100049b6:	85 c0                	test   eax,eax
100049b8:	0f 85 e0 00 00 00    	jne    10004a9e <NIDesktop::handleMouse(int, int, int, int)+0x386>
100049be:	8b 84 24 24 01 00 00 	mov    eax,DWORD PTR [esp+0x124]
100049c5:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100049c7: R_386_32	mouseDesktop
100049cb:	89 ac 24 20 01 00 00 	mov    DWORD PTR [esp+0x120],ebp
100049d2:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
100049d8:	25 ff 1f 00 00       	and    eax,0x1fff
100049dd:	66 89 8c 24 28 01 00 00 	mov    WORD PTR [esp+0x128],cx
100049e5:	0d 00 40 01 00       	or     eax,0x14000
100049ea:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100049f0:	89 84 24 24 01 00 00 	mov    DWORD PTR [esp+0x124],eax
100049f7:	66 89 8c 24 2a 01 00 00 	mov    WORD PTR [esp+0x12a],cx
100049ff:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10004a05:	66 25 00 5c          	and    ax,0x5c00
10004a09:	66 81 e2 ff 03       	and    dx,0x3ff
10004a0e:	83 ec 1c             	sub    esp,0x1c
10004a11:	09 d0                	or     eax,edx
10004a13:	66 89 84 24 40 01 00 00 	mov    WORD PTR [esp+0x140],ax
10004a1b:	8d b4 24 3c 01 00 00 	lea    esi,[esp+0x13c]
10004a22:	eb 68                	jmp    10004a8c <NIDesktop::handleMouse(int, int, int, int)+0x374>
10004a24:	85 c0                	test   eax,eax
10004a26:	74 76                	je     10004a9e <NIDesktop::handleMouse(int, int, int, int)+0x386>
10004a28:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
10004a2f:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004a31: R_386_32	mouseDesktop
10004a35:	89 ac 24 38 01 00 00 	mov    DWORD PTR [esp+0x138],ebp
10004a3c:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10004a42:	25 ff 1f 00 00       	and    eax,0x1fff
10004a47:	66 89 8c 24 40 01 00 00 	mov    WORD PTR [esp+0x140],cx
10004a4f:	0d 00 60 01 00       	or     eax,0x16000
10004a54:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10004a5a:	89 84 24 3c 01 00 00 	mov    DWORD PTR [esp+0x13c],eax
10004a61:	66 89 8c 24 42 01 00 00 	mov    WORD PTR [esp+0x142],cx
10004a69:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10004a6f:	66 25 00 7c          	and    ax,0x7c00
10004a73:	66 81 e2 ff 03       	and    dx,0x3ff
10004a78:	83 ec 1c             	sub    esp,0x1c
10004a7b:	09 d0                	or     eax,edx
10004a7d:	66 89 84 24 58 01 00 00 	mov    WORD PTR [esp+0x158],ax
10004a85:	8d b4 24 54 01 00 00 	lea    esi,[esp+0x154]
10004a8c:	89 e7                	mov    edi,esp
10004a8e:	b9 06 00 00 00       	mov    ecx,0x6
10004a93:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004a95:	55                   	push   ebp
10004a96:	e8 fc ff ff ff       	call   10004a97 <NIDesktop::handleMouse(int, int, int, int)+0x37f>	10004a97: R_386_PC32	NIWindow::postEvent(NiEvent)
10004a9b:	83 c4 20             	add    esp,0x20
10004a9e:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004aa0: R_386_32	movingWin
10004aa5:	0f 84 0a 02 00 00    	je     10004cb5 <NIDesktop::handleMouse(int, int, int, int)+0x59d>
10004aab:	83 3d 00 00 00 00 01 	cmp    DWORD PTR ds:0x0,0x1	10004aad: R_386_32	movingType
10004ab2:	0f 85 fd 01 00 00    	jne    10004cb5 <NIDesktop::handleMouse(int, int, int, int)+0x59d>
10004ab8:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
10004abd:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
10004ac2:	75 0c                	jne    10004ad0 <NIDesktop::handleMouse(int, int, int, int)+0x3b8>
10004ac4:	a0 78 a0 03 10       	mov    al,ds:0x1003a078	10004ac5: R_386_32	.bss
10004ac9:	83 e0 01             	and    eax,0x1
10004acc:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
10004ad0:	bf 01 00 00 00       	mov    edi,0x1
10004ad5:	8b 2d 00 00 00 00    	mov    ebp,DWORD PTR ds:0x0	10004ad7: R_386_32	movingWin
10004adb:	8b 85 74 02 00 00    	mov    eax,DWORD PTR [ebp+0x274]
10004ae1:	48                   	dec    eax
10004ae2:	39 f8                	cmp    eax,edi
10004ae4:	0f 8e b7 00 00 00    	jle    10004ba1 <NIDesktop::handleMouse(int, int, int, int)+0x489>
10004aea:	89 f8                	mov    eax,edi
10004aec:	be 01 00 00 00       	mov    esi,0x1
10004af1:	83 e0 07             	and    eax,0x7
10004af4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10004af8:	a1 00 00 00 00       	mov    eax,ds:0x0	10004af9: R_386_32	movingWin
10004afd:	8b 80 70 02 00 00    	mov    eax,DWORD PTR [eax+0x270]
10004b03:	48                   	dec    eax
10004b04:	39 f0                	cmp    eax,esi
10004b06:	0f 8e 8f 00 00 00    	jle    10004b9b <NIDesktop::handleMouse(int, int, int, int)+0x483>
10004b0c:	8d 04 37             	lea    eax,[edi+esi*1]
10004b0f:	83 e0 3f             	and    eax,0x3f
10004b12:	0b 44 24 20          	or     eax,DWORD PTR [esp+0x20]
10004b16:	75 7d                	jne    10004b95 <NIDesktop::handleMouse(int, int, int, int)+0x47d>
10004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10004b1c:	2b 05 74 a0 03 10    	sub    eax,DWORD PTR ds:0x1003a074	10004b1e: R_386_32	.bss
10004b22:	01 f0                	add    eax,esi
10004b24:	78 2d                	js     10004b53 <NIDesktop::handleMouse(int, int, int, int)+0x43b>
10004b26:	8b 13                	mov    edx,DWORD PTR [ebx]
10004b28:	3b 82 0c 04 00 00    	cmp    eax,DWORD PTR [edx+0x40c]
10004b2e:	7d 23                	jge    10004b53 <NIDesktop::handleMouse(int, int, int, int)+0x43b>
10004b30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10004b34:	2b 15 70 a0 03 10    	sub    edx,DWORD PTR ds:0x1003a070	10004b36: R_386_32	.bss
10004b3a:	51                   	push   ecx
10004b3b:	01 fa                	add    edx,edi
10004b3d:	51                   	push   ecx
10004b3e:	8d 48 01             	lea    ecx,[eax+0x1]
10004b41:	6a 00                	push   0x0
10004b43:	51                   	push   ecx
10004b44:	50                   	push   eax
10004b45:	8d 42 01             	lea    eax,[edx+0x1]
10004b48:	50                   	push   eax
10004b49:	52                   	push   edx
10004b4a:	53                   	push   ebx
10004b4b:	e8 fc ff ff ff       	call   10004b4c <NIDesktop::handleMouse(int, int, int, int)+0x434>	10004b4c: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004b50:	83 c4 20             	add    esp,0x20
10004b53:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10004b58:	75 3b                	jne    10004b95 <NIDesktop::handleMouse(int, int, int, int)+0x47d>
10004b5a:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
10004b60:	01 f0                	add    eax,esi
10004b62:	2b 05 74 a0 03 10    	sub    eax,DWORD PTR ds:0x1003a074	10004b64: R_386_32	.bss
10004b68:	78 2b                	js     10004b95 <NIDesktop::handleMouse(int, int, int, int)+0x47d>
10004b6a:	8b 13                	mov    edx,DWORD PTR [ebx]
10004b6c:	3b 82 0c 04 00 00    	cmp    eax,DWORD PTR [edx+0x40c]
10004b72:	7d 21                	jge    10004b95 <NIDesktop::handleMouse(int, int, int, int)+0x47d>
10004b74:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
10004b7a:	8b 29                	mov    ebp,DWORD PTR [ecx]
10004b7c:	6a 00                	push   0x0
10004b7e:	8b 93 18 04 00 00    	mov    edx,DWORD PTR [ebx+0x418]
10004b84:	01 fa                	add    edx,edi
10004b86:	2b 15 70 a0 03 10    	sub    edx,DWORD PTR ds:0x1003a070	10004b88: R_386_32	.bss
10004b8c:	52                   	push   edx
10004b8d:	50                   	push   eax
10004b8e:	51                   	push   ecx
10004b8f:	ff 55 24             	call   DWORD PTR [ebp+0x24]
10004b92:	83 c4 10             	add    esp,0x10
10004b95:	46                   	inc    esi
10004b96:	e9 5d ff ff ff       	jmp    10004af8 <NIDesktop::handleMouse(int, int, int, int)+0x3e0>
10004b9b:	47                   	inc    edi
10004b9c:	e9 34 ff ff ff       	jmp    10004ad5 <NIDesktop::handleMouse(int, int, int, int)+0x3bd>
10004ba1:	8b 15 74 a0 03 10    	mov    edx,DWORD PTR ds:0x1003a074	10004ba3: R_386_32	.bss
10004ba7:	8b b3 14 04 00 00    	mov    esi,DWORD PTR [ebx+0x414]
10004bad:	29 d6                	sub    esi,edx
10004baf:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10004bb4:	0f 85 85 08 00 00    	jne    1000543f <NIDesktop::handleMouse(int, int, int, int)+0xd27>
10004bba:	89 f1                	mov    ecx,esi
10004bbc:	85 f6                	test   esi,esi
10004bbe:	79 02                	jns    10004bc2 <NIDesktop::handleMouse(int, int, int, int)+0x4aa>
10004bc0:	31 c9                	xor    ecx,ecx
10004bc2:	8b bd 70 02 00 00    	mov    edi,DWORD PTR [ebp+0x270]
10004bc8:	8b 03                	mov    eax,DWORD PTR [ebx]
10004bca:	01 fe                	add    esi,edi
10004bcc:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
10004bd2:	39 c6                	cmp    esi,eax
10004bd4:	7d 04                	jge    10004bda <NIDesktop::handleMouse(int, int, int, int)+0x4c2>
10004bd6:	29 ce                	sub    esi,ecx
10004bd8:	eb 0a                	jmp    10004be4 <NIDesktop::handleMouse(int, int, int, int)+0x4cc>
10004bda:	89 c6                	mov    esi,eax
10004bdc:	29 ce                	sub    esi,ecx
10004bde:	0f 88 d1 00 00 00    	js     10004cb5 <NIDesktop::handleMouse(int, int, int, int)+0x59d>
10004be4:	85 f6                	test   esi,esi
10004be6:	0f 84 c9 00 00 00    	je     10004cb5 <NIDesktop::handleMouse(int, int, int, int)+0x59d>
10004bec:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
10004bf0:	29 d5                	sub    ebp,edx
10004bf2:	89 ea                	mov    edx,ebp
10004bf4:	79 02                	jns    10004bf8 <NIDesktop::handleMouse(int, int, int, int)+0x4e0>
10004bf6:	31 ed                	xor    ebp,ebp
10004bf8:	01 d7                	add    edi,edx
10004bfa:	39 f8                	cmp    eax,edi
10004bfc:	7e 04                	jle    10004c02 <NIDesktop::handleMouse(int, int, int, int)+0x4ea>
10004bfe:	29 ef                	sub    edi,ebp
10004c00:	eb 08                	jmp    10004c0a <NIDesktop::handleMouse(int, int, int, int)+0x4f2>
10004c02:	29 e8                	sub    eax,ebp
10004c04:	89 c7                	mov    edi,eax
10004c06:	79 02                	jns    10004c0a <NIDesktop::handleMouse(int, int, int, int)+0x4f2>
10004c08:	31 ff                	xor    edi,edi
10004c0a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
10004c0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004c12:	01 ef                	add    edi,ebp
10004c14:	2b 05 70 a0 03 10    	sub    eax,DWORD PTR ds:0x1003a070	10004c16: R_386_32	.bss
10004c1a:	52                   	push   edx
10004c1b:	52                   	push   edx
10004c1c:	8d 50 01             	lea    edx,[eax+0x1]
10004c1f:	6a 00                	push   0x0
10004c21:	57                   	push   edi
10004c22:	55                   	push   ebp
10004c23:	52                   	push   edx
10004c24:	50                   	push   eax
10004c25:	53                   	push   ebx
10004c26:	e8 fc ff ff ff       	call   10004c27 <NIDesktop::handleMouse(int, int, int, int)+0x50f>	10004c27: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004c2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10004c2f:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004c31: R_386_32	movingWin
10004c35:	83 c4 18             	add    esp,0x18
10004c38:	2b 05 70 a0 03 10    	sub    eax,DWORD PTR ds:0x1003a070	10004c3a: R_386_32	.bss
10004c3e:	03 82 74 02 00 00    	add    eax,DWORD PTR [edx+0x274]
10004c44:	6a 00                	push   0x0
10004c46:	57                   	push   edi
10004c47:	55                   	push   ebp
10004c48:	50                   	push   eax
10004c49:	48                   	dec    eax
10004c4a:	50                   	push   eax
10004c4b:	53                   	push   ebx
10004c4c:	e8 fc ff ff ff       	call   10004c4d <NIDesktop::handleMouse(int, int, int, int)+0x535>	10004c4d: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004c51:	83 c4 18             	add    esp,0x18
10004c54:	8b 03                	mov    eax,DWORD PTR [ebx]
10004c56:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004c5c:	8b 3a                	mov    edi,DWORD PTR [edx]
10004c5e:	6a 00                	push   0x0
10004c60:	6a 01                	push   0x1
10004c62:	56                   	push   esi
10004c63:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10004c69:	2b 05 70 a0 03 10    	sub    eax,DWORD PTR ds:0x1003a070	10004c6b: R_386_32	.bss
10004c6f:	50                   	push   eax
10004c70:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
10004c74:	51                   	push   ecx
10004c75:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
10004c79:	52                   	push   edx
10004c7a:	ff 57 28             	call   DWORD PTR [edi+0x28]
10004c7d:	8b 03                	mov    eax,DWORD PTR [ebx]
10004c7f:	83 c4 18             	add    esp,0x18
10004c82:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004c88:	8b 3a                	mov    edi,DWORD PTR [edx]
10004c8a:	6a 00                	push   0x0
10004c8c:	6a 01                	push   0x1
10004c8e:	56                   	push   esi
10004c8f:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	10004c91: R_386_32	movingWin
10004c95:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10004c9b:	2b 05 70 a0 03 10    	sub    eax,DWORD PTR ds:0x1003a070	10004c9d: R_386_32	.bss
10004ca1:	03 86 74 02 00 00    	add    eax,DWORD PTR [esi+0x274]
10004ca7:	48                   	dec    eax
10004ca8:	50                   	push   eax
10004ca9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
10004cad:	51                   	push   ecx
10004cae:	52                   	push   edx
10004caf:	ff 57 28             	call   DWORD PTR [edi+0x28]
10004cb2:	83 c4 20             	add    esp,0x20
10004cb5:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cb6: R_386_32	movingWin
10004cba:	85 c0                	test   eax,eax
10004cbc:	0f 84 21 03 00 00    	je     10004fe3 <NIDesktop::handleMouse(int, int, int, int)+0x8cb>
10004cc2:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	10004cc4: R_386_32	movingType
10004cc8:	8d 57 fe             	lea    edx,[edi-0x2]
10004ccb:	83 fa 02             	cmp    edx,0x2
10004cce:	0f 87 0f 03 00 00    	ja     10004fe3 <NIDesktop::handleMouse(int, int, int, int)+0x8cb>
10004cd4:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
10004cd9:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
10004cde:	75 0d                	jne    10004ced <NIDesktop::handleMouse(int, int, int, int)+0x5d5>
10004ce0:	8a 0d 78 a0 03 10    	mov    cl,BYTE PTR ds:0x1003a078	10004ce2: R_386_32	.bss
10004ce6:	83 e1 01             	and    ecx,0x1
10004ce9:	88 4c 24 20          	mov    BYTE PTR [esp+0x20],cl
10004ced:	8b 88 70 02 00 00    	mov    ecx,DWORD PTR [eax+0x270]
10004cf3:	8b b0 74 02 00 00    	mov    esi,DWORD PTR [eax+0x274]
10004cf9:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
10004cfd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004d01:	01 cd                	add    ebp,ecx
10004d03:	01 f0                	add    eax,esi
10004d05:	2b 2d 74 a0 03 10    	sub    ebp,DWORD PTR ds:0x1003a074	10004d07: R_386_32	.bss
10004d0b:	2b 05 70 a0 03 10    	sub    eax,DWORD PTR ds:0x1003a070	10004d0d: R_386_32	.bss
10004d11:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
10004d17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10004d1b:	01 ca                	add    edx,ecx
10004d1d:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10004d23:	2b 15 74 a0 03 10    	sub    edx,DWORD PTR ds:0x1003a074	10004d25: R_386_32	.bss
10004d29:	01 f0                	add    eax,esi
10004d2b:	2b 05 70 a0 03 10    	sub    eax,DWORD PTR ds:0x1003a070	10004d2d: R_386_32	.bss
10004d31:	83 ff 03             	cmp    edi,0x3
10004d34:	74 0d                	je     10004d43 <NIDesktop::handleMouse(int, int, int, int)+0x62b>
10004d36:	83 ff 04             	cmp    edi,0x4
10004d39:	75 0c                	jne    10004d47 <NIDesktop::handleMouse(int, int, int, int)+0x62f>
10004d3b:	89 f0                	mov    eax,esi
10004d3d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
10004d41:	eb 04                	jmp    10004d47 <NIDesktop::handleMouse(int, int, int, int)+0x62f>
10004d43:	89 ca                	mov    edx,ecx
10004d45:	89 cd                	mov    ebp,ecx
10004d47:	89 d7                	mov    edi,edx
10004d49:	83 fa 32             	cmp    edx,0x32
10004d4c:	7d 05                	jge    10004d53 <NIDesktop::handleMouse(int, int, int, int)+0x63b>
10004d4e:	bf 32 00 00 00       	mov    edi,0x32
10004d53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10004d57:	83 f8 32             	cmp    eax,0x32
10004d5a:	7d 08                	jge    10004d64 <NIDesktop::handleMouse(int, int, int, int)+0x64c>
10004d5c:	c7 44 24 10 32 00 00 00 	mov    DWORD PTR [esp+0x10],0x32
10004d64:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
10004d68:	83 fd 32             	cmp    ebp,0x32
10004d6b:	7d 08                	jge    10004d75 <NIDesktop::handleMouse(int, int, int, int)+0x65d>
10004d6d:	c7 44 24 18 32 00 00 00 	mov    DWORD PTR [esp+0x18],0x32
10004d75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004d79:	83 f8 32             	cmp    eax,0x32
10004d7c:	7d 08                	jge    10004d86 <NIDesktop::handleMouse(int, int, int, int)+0x66e>
10004d7e:	c7 44 24 14 32 00 00 00 	mov    DWORD PTR [esp+0x14],0x32
10004d86:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
10004d8a:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
10004d8e:	7d 08                	jge    10004d98 <NIDesktop::handleMouse(int, int, int, int)+0x680>
10004d90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10004d94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10004d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004d9c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10004da0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10004da4:	7d 08                	jge    10004dae <NIDesktop::handleMouse(int, int, int, int)+0x696>
10004da6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004daa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10004dae:	be 01 00 00 00       	mov    esi,0x1
10004db3:	bd 01 00 00 00       	mov    ebp,0x1
10004db8:	8d 04 2e             	lea    eax,[esi+ebp*1]
10004dbb:	89 f2                	mov    edx,esi
10004dbd:	83 e0 3f             	and    eax,0x3f
10004dc0:	83 e2 07             	and    edx,0x7
10004dc3:	09 d0                	or     eax,edx
10004dc5:	0f 85 9e 00 00 00    	jne    10004e69 <NIDesktop::handleMouse(int, int, int, int)+0x751>
10004dcb:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004dcd: R_386_32	movingWin
10004dd1:	8b 81 68 02 00 00    	mov    eax,DWORD PTR [ecx+0x268]
10004dd7:	89 c2                	mov    edx,eax
10004dd9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10004ddd:	01 ea                	add    edx,ebp
10004ddf:	78 2f                	js     10004e10 <NIDesktop::handleMouse(int, int, int, int)+0x6f8>
10004de1:	8b 03                	mov    eax,DWORD PTR [ebx]
10004de3:	3b 90 0c 04 00 00    	cmp    edx,DWORD PTR [eax+0x40c]
10004de9:	7d 25                	jge    10004e10 <NIDesktop::handleMouse(int, int, int, int)+0x6f8>
10004deb:	8b 89 6c 02 00 00    	mov    ecx,DWORD PTR [ecx+0x26c]
10004df1:	50                   	push   eax
10004df2:	50                   	push   eax
10004df3:	6a 00                	push   0x0
10004df5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004df9:	8d 44 28 01          	lea    eax,[eax+ebp*1+0x1]
10004dfd:	50                   	push   eax
10004dfe:	8d 44 31 01          	lea    eax,[ecx+esi*1+0x1]
10004e02:	52                   	push   edx
10004e03:	01 f1                	add    ecx,esi
10004e05:	50                   	push   eax
10004e06:	51                   	push   ecx
10004e07:	53                   	push   ebx
10004e08:	e8 fc ff ff ff       	call   10004e09 <NIDesktop::handleMouse(int, int, int, int)+0x6f1>	10004e09: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004e0d:	83 c4 20             	add    esp,0x20
10004e10:	8a 54 24 20          	mov    dl,BYTE PTR [esp+0x20]
10004e14:	83 f2 01             	xor    edx,0x1
10004e17:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
10004e1b:	0f 9f c0             	setg   al
10004e1e:	84 c2                	test   dl,al
10004e20:	74 47                	je     10004e69 <NIDesktop::handleMouse(int, int, int, int)+0x751>
10004e22:	39 ef                	cmp    edi,ebp
10004e24:	7e 43                	jle    10004e69 <NIDesktop::handleMouse(int, int, int, int)+0x751>
10004e26:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e27: R_386_32	movingWin
10004e2b:	89 e9                	mov    ecx,ebp
10004e2d:	03 88 68 02 00 00    	add    ecx,DWORD PTR [eax+0x268]
10004e33:	78 34                	js     10004e69 <NIDesktop::handleMouse(int, int, int, int)+0x751>
10004e35:	8b 13                	mov    edx,DWORD PTR [ebx]
10004e37:	3b 8a 0c 04 00 00    	cmp    ecx,DWORD PTR [edx+0x40c]
10004e3d:	7d 2a                	jge    10004e69 <NIDesktop::handleMouse(int, int, int, int)+0x751>
10004e3f:	8b 92 08 04 00 00    	mov    edx,DWORD PTR [edx+0x408]
10004e45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
10004e49:	8b 12                	mov    edx,DWORD PTR [edx]
10004e4b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
10004e4f:	6a 00                	push   0x0
10004e51:	8b 90 6c 02 00 00    	mov    edx,DWORD PTR [eax+0x26c]
10004e57:	01 f2                	add    edx,esi
10004e59:	52                   	push   edx
10004e5a:	51                   	push   ecx
10004e5b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004e5f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10004e63:	ff 50 24             	call   DWORD PTR [eax+0x24]
10004e66:	83 c4 10             	add    esp,0x10
10004e69:	45                   	inc    ebp
10004e6a:	3b 6c 24 28          	cmp    ebp,DWORD PTR [esp+0x28]
10004e6e:	0f 85 44 ff ff ff    	jne    10004db8 <NIDesktop::handleMouse(int, int, int, int)+0x6a0>
10004e74:	46                   	inc    esi
10004e75:	3b 74 24 24          	cmp    esi,DWORD PTR [esp+0x24]
10004e79:	0f 85 34 ff ff ff    	jne    10004db3 <NIDesktop::handleMouse(int, int, int, int)+0x69b>
10004e7f:	8b 2d 00 00 00 00    	mov    ebp,DWORD PTR ds:0x0	10004e81: R_386_32	movingWin
10004e85:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
10004e8a:	0f 85 06 05 00 00    	jne    10005396 <NIDesktop::handleMouse(int, int, int, int)+0xc7e>
10004e90:	8b 95 68 02 00 00    	mov    edx,DWORD PTR [ebp+0x268]
10004e96:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10004e9a:	85 d2                	test   edx,edx
10004e9c:	8d 0c 02             	lea    ecx,[edx+eax*1]
10004e9f:	8b 85 6c 02 00 00    	mov    eax,DWORD PTR [ebp+0x26c]
10004ea5:	8d 70 01             	lea    esi,[eax+0x1]
10004ea8:	0f 89 9d 00 00 00    	jns    10004f4b <NIDesktop::handleMouse(int, int, int, int)+0x833>
10004eae:	52                   	push   edx
10004eaf:	52                   	push   edx
10004eb0:	6a 00                	push   0x0
10004eb2:	51                   	push   ecx
10004eb3:	6a 00                	push   0x0
10004eb5:	56                   	push   esi
10004eb6:	50                   	push   eax
10004eb7:	53                   	push   ebx
10004eb8:	e8 fc ff ff ff       	call   10004eb9 <NIDesktop::handleMouse(int, int, int, int)+0x7a1>	10004eb9: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004ebd:	83 c4 18             	add    esp,0x18
10004ec0:	8b 03                	mov    eax,DWORD PTR [ebx]
10004ec2:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004ec4: R_386_32	movingWin
10004ec8:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004ece:	8b 08                	mov    ecx,DWORD PTR [eax]
10004ed0:	6a 00                	push   0x0
10004ed2:	6a 01                	push   0x1
10004ed4:	8b b2 68 02 00 00    	mov    esi,DWORD PTR [edx+0x268]
10004eda:	01 fe                	add    esi,edi
10004edc:	56                   	push   esi
10004edd:	ff b2 6c 02 00 00    	push   DWORD PTR [edx+0x26c]
10004ee3:	6a 00                	push   0x0
10004ee5:	50                   	push   eax
10004ee6:	ff 51 28             	call   DWORD PTR [ecx+0x28]
10004ee9:	83 c4 18             	add    esp,0x18
10004eec:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004eee: R_386_32	movingWin
10004ef2:	8b 82 6c 02 00 00    	mov    eax,DWORD PTR [edx+0x26c]
10004ef8:	6a 00                	push   0x0
10004efa:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
10004efe:	03 aa 68 02 00 00    	add    ebp,DWORD PTR [edx+0x268]
10004f04:	55                   	push   ebp
10004f05:	6a 00                	push   0x0
10004f07:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10004f0b:	8d 54 30 01          	lea    edx,[eax+esi*1+0x1]
10004f0f:	52                   	push   edx
10004f10:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10004f14:	50                   	push   eax
10004f15:	53                   	push   ebx
10004f16:	e8 fc ff ff ff       	call   10004f17 <NIDesktop::handleMouse(int, int, int, int)+0x7ff>	10004f17: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004f1b:	8b 03                	mov    eax,DWORD PTR [ebx]
10004f1d:	83 c4 18             	add    esp,0x18
10004f20:	8b 88 08 04 00 00    	mov    ecx,DWORD PTR [eax+0x408]
10004f26:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f27: R_386_32	movingWin
10004f2b:	8b 31                	mov    esi,DWORD PTR [ecx]
10004f2d:	6a 00                	push   0x0
10004f2f:	6a 01                	push   0x1
10004f31:	03 b8 68 02 00 00    	add    edi,DWORD PTR [eax+0x268]
10004f37:	57                   	push   edi
10004f38:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
10004f3c:	03 b8 6c 02 00 00    	add    edi,DWORD PTR [eax+0x26c]
10004f42:	57                   	push   edi
10004f43:	6a 00                	push   0x0
10004f45:	51                   	push   ecx
10004f46:	e9 92 00 00 00       	jmp    10004fdd <NIDesktop::handleMouse(int, int, int, int)+0x8c5>
10004f4b:	55                   	push   ebp
10004f4c:	55                   	push   ebp
10004f4d:	6a 00                	push   0x0
10004f4f:	51                   	push   ecx
10004f50:	52                   	push   edx
10004f51:	56                   	push   esi
10004f52:	50                   	push   eax
10004f53:	53                   	push   ebx
10004f54:	e8 fc ff ff ff       	call   10004f55 <NIDesktop::handleMouse(int, int, int, int)+0x83d>	10004f55: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004f59:	83 c4 18             	add    esp,0x18
10004f5c:	8b 03                	mov    eax,DWORD PTR [ebx]
10004f5e:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004f60: R_386_32	movingWin
10004f64:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004f6a:	8b 08                	mov    ecx,DWORD PTR [eax]
10004f6c:	6a 00                	push   0x0
10004f6e:	6a 01                	push   0x1
10004f70:	57                   	push   edi
10004f71:	ff b2 6c 02 00 00    	push   DWORD PTR [edx+0x26c]
10004f77:	ff b2 68 02 00 00    	push   DWORD PTR [edx+0x268]
10004f7d:	50                   	push   eax
10004f7e:	ff 51 28             	call   DWORD PTR [ecx+0x28]
10004f81:	83 c4 18             	add    esp,0x18
10004f84:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f85: R_386_32	movingWin
10004f89:	8b 90 68 02 00 00    	mov    edx,DWORD PTR [eax+0x268]
10004f8f:	8b 80 6c 02 00 00    	mov    eax,DWORD PTR [eax+0x26c]
10004f95:	6a 00                	push   0x0
10004f97:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
10004f9b:	01 d5                	add    ebp,edx
10004f9d:	55                   	push   ebp
10004f9e:	52                   	push   edx
10004f9f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10004fa3:	8d 54 30 01          	lea    edx,[eax+esi*1+0x1]
10004fa7:	52                   	push   edx
10004fa8:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10004fac:	50                   	push   eax
10004fad:	53                   	push   ebx
10004fae:	e8 fc ff ff ff       	call   10004faf <NIDesktop::handleMouse(int, int, int, int)+0x897>	10004faf: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004fb3:	8b 03                	mov    eax,DWORD PTR [ebx]
10004fb5:	83 c4 18             	add    esp,0x18
10004fb8:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004fbe:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004fc0: R_386_32	movingWin
10004fc4:	8b 32                	mov    esi,DWORD PTR [edx]
10004fc6:	6a 00                	push   0x0
10004fc8:	6a 01                	push   0x1
10004fca:	57                   	push   edi
10004fcb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004fcf:	03 81 6c 02 00 00    	add    eax,DWORD PTR [ecx+0x26c]
10004fd5:	50                   	push   eax
10004fd6:	ff b1 68 02 00 00    	push   DWORD PTR [ecx+0x268]
10004fdc:	52                   	push   edx
10004fdd:	ff 56 28             	call   DWORD PTR [esi+0x28]
10004fe0:	83 c4 20             	add    esp,0x20
10004fe3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10004fe8:	0f 84 5d 03 00 00    	je     1000534b <NIDesktop::handleMouse(int, int, int, int)+0xc33>
10004fee:	f6 84 24 7c 01 00 00 01 	test   BYTE PTR [esp+0x17c],0x1
10004ff6:	0f 84 4f 03 00 00    	je     1000534b <NIDesktop::handleMouse(int, int, int, int)+0xc33>
10004ffc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10005000:	39 05 00 00 00 00    	cmp    DWORD PTR ds:0x0,eax	10005002: R_386_32	clickonWhenMouseFirstClicked
10005006:	0f 85 3f 03 00 00    	jne    1000534b <NIDesktop::handleMouse(int, int, int, int)+0xc33>
1000500c:	8b 0d 78 a0 03 10    	mov    ecx,DWORD PTR ds:0x1003a078	1000500e: R_386_32	.bss
10005012:	83 e1 01             	and    ecx,0x1
10005015:	0f 85 bf 01 00 00    	jne    100051da <NIDesktop::handleMouse(int, int, int, int)+0xac2>
1000501b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000501c: R_386_32	milliTenthsSinceBoot
10005020:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	10005022: R_386_32	milliTenthsSinceBoot
10005026:	2b 05 68 a0 03 10    	sub    eax,DWORD PTR ds:0x1003a068	10005028: R_386_32	.bss
1000502c:	be b7 0b 00 00       	mov    esi,0xbb7
10005031:	1b 15 6c a0 03 10    	sbb    edx,DWORD PTR ds:0x1003a06c	10005033: R_386_32	.bss
10005037:	39 c6                	cmp    esi,eax
10005039:	19 d1                	sbb    ecx,edx
1000503b:	0f 82 62 01 00 00    	jb     100051a3 <NIDesktop::handleMouse(int, int, int, int)+0xa8b>
10005041:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10005045:	8b 90 6c 02 00 00    	mov    edx,DWORD PTR [eax+0x26c]
1000504b:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10005051:	29 d0                	sub    eax,edx
10005053:	83 f8 18             	cmp    eax,0x18
10005056:	0f 8f 47 01 00 00    	jg     100051a3 <NIDesktop::handleMouse(int, int, int, int)+0xa8b>
1000505c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10005060:	f6 80 8c 02 00 00 01 	test   BYTE PTR [eax+0x28c],0x1
10005067:	0f 85 36 01 00 00    	jne    100051a3 <NIDesktop::handleMouse(int, int, int, int)+0xa8b>
1000506d:	80 b8 78 02 00 00 00 	cmp    BYTE PTR [eax+0x278],0x0
10005074:	74 45                	je     100050bb <NIDesktop::handleMouse(int, int, int, int)+0x9a3>
10005076:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
1000507a:	8b 80 7c 02 00 00    	mov    eax,DWORD PTR [eax+0x27c]
10005080:	89 87 68 02 00 00    	mov    DWORD PTR [edi+0x268],eax
10005086:	8b 87 80 02 00 00    	mov    eax,DWORD PTR [edi+0x280]
1000508c:	89 87 6c 02 00 00    	mov    DWORD PTR [edi+0x26c],eax
10005092:	8b 87 84 02 00 00    	mov    eax,DWORD PTR [edi+0x284]
10005098:	89 87 70 02 00 00    	mov    DWORD PTR [edi+0x270],eax
1000509e:	8b 87 88 02 00 00    	mov    eax,DWORD PTR [edi+0x288]
100050a4:	89 87 74 02 00 00    	mov    DWORD PTR [edi+0x274],eax
100050aa:	50                   	push   eax
100050ab:	50                   	push   eax
100050ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100050b0:	53                   	push   ebx
100050b1:	e8 fc ff ff ff       	call   100050b2 <NIDesktop::handleMouse(int, int, int, int)+0x99a>	100050b2: R_386_PC32	NIDesktop::invalidateAllDueToFullscreen(NIWindow*)
100050b6:	83 c4 10             	add    esp,0x10
100050b9:	eb 62                	jmp    1000511d <NIDesktop::handleMouse(int, int, int, int)+0xa05>
100050bb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100050bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100050c3:	8b 80 68 02 00 00    	mov    eax,DWORD PTR [eax+0x268]
100050c9:	89 97 80 02 00 00    	mov    DWORD PTR [edi+0x280],edx
100050cf:	89 87 7c 02 00 00    	mov    DWORD PTR [edi+0x27c],eax
100050d5:	c7 87 68 02 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x268],0x0
100050df:	c7 87 6c 02 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x26c],0x0
100050e9:	8b 87 70 02 00 00    	mov    eax,DWORD PTR [edi+0x270]
100050ef:	89 87 84 02 00 00    	mov    DWORD PTR [edi+0x284],eax
100050f5:	8b 87 74 02 00 00    	mov    eax,DWORD PTR [edi+0x274]
100050fb:	89 87 88 02 00 00    	mov    DWORD PTR [edi+0x288],eax
10005101:	8b 03                	mov    eax,DWORD PTR [ebx]
10005103:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
10005109:	89 87 70 02 00 00    	mov    DWORD PTR [edi+0x270],eax
1000510f:	8b 03                	mov    eax,DWORD PTR [ebx]
10005111:	8b 80 10 04 00 00    	mov    eax,DWORD PTR [eax+0x410]
10005117:	89 87 74 02 00 00    	mov    DWORD PTR [edi+0x274],eax
1000511d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10005121:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10005125:	80 b0 78 02 00 00 01 	xor    BYTE PTR [eax+0x278],0x1
1000512c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
10005130:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10005134:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005136: R_386_32	mouseDesktop
1000513a:	83 ec 1c             	sub    esp,0x1c
1000513d:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10005143:	25 ff 1f 00 00       	and    eax,0x1fff
10005148:	66 89 4c 24 54       	mov    WORD PTR [esp+0x54],cx
1000514d:	0d 00 80 01 80       	or     eax,0x80018000
10005152:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10005158:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
1000515c:	66 89 4c 24 56       	mov    WORD PTR [esp+0x56],cx
10005161:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10005167:	66 25 00 9c          	and    ax,0x9c00
1000516b:	66 81 e2 ff 03       	and    dx,0x3ff
10005170:	b9 06 00 00 00       	mov    ecx,0x6
10005175:	09 d0                	or     eax,edx
10005177:	66 89 44 24 50       	mov    WORD PTR [esp+0x50],ax
1000517c:	8d 74 24 4c          	lea    esi,[esp+0x4c]
10005180:	89 e7                	mov    edi,esp
10005182:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005184:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10005188:	e8 fc ff ff ff       	call   10005189 <NIDesktop::handleMouse(int, int, int, int)+0xa71>	10005189: R_386_PC32	NIWindow::postEvent(NiEvent)
1000518d:	83 c4 14             	add    esp,0x14
10005190:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10005194:	e8 fc ff ff ff       	call   10005195 <NIDesktop::handleMouse(int, int, int, int)+0xa7d>	10005195: R_386_PC32	NIWindow::rerender()
10005199:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000519c:	e8 fc ff ff ff       	call   1000519d <NIDesktop::handleMouse(int, int, int, int)+0xa85>	1000519d: R_386_PC32	NIDesktop::completeRefresh()
100051a1:	eb 19                	jmp    100051bc <NIDesktop::handleMouse(int, int, int, int)+0xaa4>
100051a3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100051a6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100051aa:	8b 00                	mov    eax,DWORD PTR [eax]
100051ac:	39 38                	cmp    DWORD PTR [eax],edi
100051ae:	74 0f                	je     100051bf <NIDesktop::handleMouse(int, int, int, int)+0xaa7>
100051b0:	50                   	push   eax
100051b1:	50                   	push   eax
100051b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100051b6:	53                   	push   ebx
100051b7:	e8 fc ff ff ff       	call   100051b8 <NIDesktop::handleMouse(int, int, int, int)+0xaa0>	100051b8: R_386_PC32	NIDesktop::raiseWindow(NIWindow*)
100051bc:	83 c4 10             	add    esp,0x10
100051bf:	a1 00 00 00 00       	mov    eax,ds:0x0	100051c0: R_386_32	milliTenthsSinceBoot
100051c4:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	100051c6: R_386_32	milliTenthsSinceBoot
100051ca:	a3 68 a0 03 10       	mov    ds:0x1003a068,eax	100051cb: R_386_32	.bss
100051cf:	89 15 6c a0 03 10    	mov    DWORD PTR ds:0x1003a06c,edx	100051d1: R_386_32	.bss
100051d5:	e9 71 01 00 00       	jmp    1000534b <NIDesktop::handleMouse(int, int, int, int)+0xc33>
100051da:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100051dc: R_386_32	movingWin
100051e1:	0f 85 64 01 00 00    	jne    1000534b <NIDesktop::handleMouse(int, int, int, int)+0xc33>
100051e7:	8b 93 18 04 00 00    	mov    edx,DWORD PTR [ebx+0x418]
100051ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100051f1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100051f5:	8b 80 74 02 00 00    	mov    eax,DWORD PTR [eax+0x274]
100051fb:	89 d1                	mov    ecx,edx
100051fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10005201:	2b 8e 6c 02 00 00    	sub    ecx,DWORD PTR [esi+0x26c]
10005207:	83 e8 0e             	sub    eax,0xe
1000520a:	39 c8                	cmp    eax,ecx
1000520c:	7f 4c                	jg     1000525a <NIDesktop::handleMouse(int, int, int, int)+0xb42>
1000520e:	80 be 78 02 00 00 00 	cmp    BYTE PTR [esi+0x278],0x0
10005215:	75 43                	jne    1000525a <NIDesktop::handleMouse(int, int, int, int)+0xb42>
10005217:	f6 86 8c 02 00 00 01 	test   BYTE PTR [esi+0x28c],0x1
1000521e:	75 3a                	jne    1000525a <NIDesktop::handleMouse(int, int, int, int)+0xb42>
10005220:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
10005226:	c7 83 20 04 00 00 00 04 00 00 	mov    DWORD PTR [ebx+0x420],0x400
10005230:	a3 74 a0 03 10       	mov    ds:0x1003a074,eax	10005231: R_386_32	.bss
10005235:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10005237: R_386_32	movingWin
1000523b:	c7 05 00 00 00 00 03 00 00 00 	mov    DWORD PTR ds:0x0,0x3	1000523d: R_386_32	movingType
10005245:	50                   	push   eax
10005246:	89 15 70 a0 03 10    	mov    DWORD PTR ds:0x1003a070,edx	10005248: R_386_32	.bss
1000524c:	50                   	push   eax
1000524d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10005251:	53                   	push   ebx
10005252:	e8 fc ff ff ff       	call   10005253 <NIDesktop::handleMouse(int, int, int, int)+0xb3b>	10005253: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10005257:	83 c4 10             	add    esp,0x10
1000525a:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
10005260:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10005264:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10005268:	8b 80 70 02 00 00    	mov    eax,DWORD PTR [eax+0x270]
1000526e:	89 d1                	mov    ecx,edx
10005270:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10005274:	2b 8e 68 02 00 00    	sub    ecx,DWORD PTR [esi+0x268]
1000527a:	83 e8 0e             	sub    eax,0xe
1000527d:	39 c8                	cmp    eax,ecx
1000527f:	7f 6d                	jg     100052ee <NIDesktop::handleMouse(int, int, int, int)+0xbd6>
10005281:	80 be 78 02 00 00 00 	cmp    BYTE PTR [esi+0x278],0x0
10005288:	75 64                	jne    100052ee <NIDesktop::handleMouse(int, int, int, int)+0xbd6>
1000528a:	f6 86 8c 02 00 00 01 	test   BYTE PTR [esi+0x28c],0x1
10005291:	75 5b                	jne    100052ee <NIDesktop::handleMouse(int, int, int, int)+0xbd6>
10005293:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10005295: R_386_32	movingWin
1000529a:	75 3c                	jne    100052d8 <NIDesktop::handleMouse(int, int, int, int)+0xbc0>
1000529c:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
100052a2:	c7 83 20 04 00 00 00 05 00 00 	mov    DWORD PTR [ebx+0x420],0x500
100052ac:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	100052ae: R_386_32	movingWin
100052b2:	55                   	push   ebp
100052b3:	c7 05 00 00 00 00 04 00 00 00 	mov    DWORD PTR ds:0x0,0x4	100052b5: R_386_32	movingType
100052bd:	55                   	push   ebp
100052be:	89 15 74 a0 03 10    	mov    DWORD PTR ds:0x1003a074,edx	100052c0: R_386_32	.bss
100052c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
100052c8:	a3 70 a0 03 10       	mov    ds:0x1003a070,eax	100052c9: R_386_32	.bss
100052cd:	53                   	push   ebx
100052ce:	e8 fc ff ff ff       	call   100052cf <NIDesktop::handleMouse(int, int, int, int)+0xbb7>	100052cf: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
100052d3:	83 c4 10             	add    esp,0x10
100052d6:	eb 16                	jmp    100052ee <NIDesktop::handleMouse(int, int, int, int)+0xbd6>
100052d8:	c7 05 00 00 00 00 02 00 00 00 	mov    DWORD PTR ds:0x0,0x2	100052da: R_386_32	movingType
100052e2:	c7 83 20 04 00 00 00 03 00 00 	mov    DWORD PTR [ebx+0x420],0x300
100052ec:	eb 5d                	jmp    1000534b <NIDesktop::handleMouse(int, int, int, int)+0xc33>
100052ee:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100052f0: R_386_32	movingWin
100052f5:	75 54                	jne    1000534b <NIDesktop::handleMouse(int, int, int, int)+0xc33>
100052f7:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
100052fd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10005301:	2b 86 6c 02 00 00    	sub    eax,DWORD PTR [esi+0x26c]
10005307:	83 f8 18             	cmp    eax,0x18
1000530a:	7f 3f                	jg     1000534b <NIDesktop::handleMouse(int, int, int, int)+0xc33>
1000530c:	80 be 78 02 00 00 00 	cmp    BYTE PTR [esi+0x278],0x0
10005313:	75 36                	jne    1000534b <NIDesktop::handleMouse(int, int, int, int)+0xc33>
10005315:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
1000531b:	2b 96 68 02 00 00    	sub    edx,DWORD PTR [esi+0x268]
10005321:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10005323: R_386_32	movingWin
10005327:	57                   	push   edi
10005328:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	1000532a: R_386_32	movingType
10005332:	57                   	push   edi
10005333:	89 15 74 a0 03 10    	mov    DWORD PTR ds:0x1003a074,edx	10005335: R_386_32	.bss
10005339:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
1000533d:	a3 70 a0 03 10       	mov    ds:0x1003a070,eax	1000533e: R_386_32	.bss
10005342:	53                   	push   ebx
10005343:	e8 fc ff ff ff       	call   10005344 <NIDesktop::handleMouse(int, int, int, int)+0xc2c>	10005344: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10005348:	83 c4 10             	add    esp,0x10
1000534b:	8b 03                	mov    eax,DWORD PTR [ebx]
1000534d:	83 ec 0c             	sub    esp,0xc
10005350:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10005356:	8b 0a                	mov    ecx,DWORD PTR [edx]
10005358:	6a 00                	push   0x0
1000535a:	8b 83 20 04 00 00    	mov    eax,DWORD PTR [ebx+0x420]
10005360:	05 00 00 00 00       	add    eax,0x0	10005361: R_386_32	___mouse_data
10005365:	50                   	push   eax
10005366:	ff b3 18 04 00 00    	push   DWORD PTR [ebx+0x418]
1000536c:	ff b3 14 04 00 00    	push   DWORD PTR [ebx+0x414]
10005372:	52                   	push   edx
10005373:	ff 51 30             	call   DWORD PTR [ecx+0x30]
10005376:	8b 84 24 9c 01 00 00 	mov    eax,DWORD PTR [esp+0x19c]
1000537d:	a3 78 a0 03 10       	mov    ds:0x1003a078,eax	1000537e: R_386_32	.bss
10005382:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10005386:	a3 00 00 00 00       	mov    ds:0x0,eax	10005387: R_386_32	prevClickon
1000538b:	81 c4 7c 01 00 00    	add    esp,0x17c
10005391:	5b                   	pop    ebx
10005392:	5e                   	pop    esi
10005393:	5f                   	pop    edi
10005394:	5d                   	pop    ebp
10005395:	c3                   	ret    
10005396:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000539a:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
1000539e:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100053a0: R_386_32	mouseDesktop
100053a4:	83 ec 0c             	sub    esp,0xc
100053a7:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
100053ad:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100053af: R_386_32	movingWin
100053b7:	66 89 4c 24 44       	mov    WORD PTR [esp+0x44],cx
100053bc:	25 ff 1f 00 00       	and    eax,0x1fff
100053c1:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100053c7:	0d 00 20 00 80       	or     eax,0x80002000
100053cc:	66 89 4c 24 46       	mov    WORD PTR [esp+0x46],cx
100053d1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
100053d5:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100053db:	66 25 00 3c          	and    ax,0x3c00
100053df:	66 81 e2 ff 03       	and    dx,0x3ff
100053e4:	89 bd 70 02 00 00    	mov    DWORD PTR [ebp+0x270],edi
100053ea:	09 d0                	or     eax,edx
100053ec:	66 89 44 24 40       	mov    WORD PTR [esp+0x40],ax
100053f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100053f5:	89 85 74 02 00 00    	mov    DWORD PTR [ebp+0x274],eax
100053fb:	55                   	push   ebp
100053fc:	e8 fc ff ff ff       	call   100053fd <NIDesktop::handleMouse(int, int, int, int)+0xce5>	100053fd: R_386_PC32	NIWindow::rerender()
10005401:	5a                   	pop    edx
10005402:	59                   	pop    ecx
10005403:	55                   	push   ebp
10005404:	53                   	push   ebx
10005405:	e8 fc ff ff ff       	call   10005406 <NIDesktop::handleMouse(int, int, int, int)+0xcee>	10005406: R_386_PC32	NIDesktop::addWindow(NIWindow*)
1000540a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10005411:	6a ff                	push   0xffffffff
10005413:	6a ff                	push   0xffffffff
10005415:	55                   	push   ebp
10005416:	53                   	push   ebx
10005417:	e8 fc ff ff ff       	call   10005418 <NIDesktop::handleMouse(int, int, int, int)+0xd00>	10005418: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
1000541c:	5e                   	pop    esi
1000541d:	b9 06 00 00 00       	mov    ecx,0x6
10005422:	8d 74 24 4c          	lea    esi,[esp+0x4c]
10005426:	89 e7                	mov    edi,esp
10005428:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000542a:	55                   	push   ebp
1000542b:	e8 fc ff ff ff       	call   1000542c <NIDesktop::handleMouse(int, int, int, int)+0xd14>	1000542c: R_386_PC32	NIWindow::postEvent(NiEvent)
10005430:	c7 83 20 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x420],0x0
1000543a:	e9 a1 fb ff ff       	jmp    10004fe0 <NIDesktop::handleMouse(int, int, int, int)+0x8c8>
1000543f:	89 b5 68 02 00 00    	mov    DWORD PTR [ebp+0x268],esi
10005445:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005447: R_386_32	movingWin
1000544f:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10005455:	2b 05 70 a0 03 10    	sub    eax,DWORD PTR ds:0x1003a070	10005457: R_386_32	.bss
1000545b:	89 85 6c 02 00 00    	mov    DWORD PTR [ebp+0x26c],eax
10005461:	50                   	push   eax
10005462:	50                   	push   eax
10005463:	55                   	push   ebp
10005464:	53                   	push   ebx
10005465:	e8 fc ff ff ff       	call   10005466 <NIDesktop::handleMouse(int, int, int, int)+0xd4e>	10005466: R_386_PC32	NIDesktop::addWindow(NIWindow*)
1000546a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
1000546e:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
10005472:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005474: R_386_32	mouseDesktop
10005478:	83 ec 0c             	sub    esp,0xc
1000547b:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10005481:	25 ff 1f 00 00       	and    eax,0x1fff
10005486:	66 89 4c 24 54       	mov    WORD PTR [esp+0x54],cx
1000548b:	0d 00 40 00 80       	or     eax,0x80004000
10005490:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10005496:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
1000549a:	66 89 4c 24 56       	mov    WORD PTR [esp+0x56],cx
1000549f:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100054a5:	66 25 00 5c          	and    ax,0x5c00
100054a9:	66 81 e2 ff 03       	and    dx,0x3ff
100054ae:	b9 06 00 00 00       	mov    ecx,0x6
100054b3:	09 d0                	or     eax,edx
100054b5:	66 89 44 24 50       	mov    WORD PTR [esp+0x50],ax
100054ba:	8d 74 24 4c          	lea    esi,[esp+0x4c]
100054be:	89 e7                	mov    edi,esp
100054c0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100054c2:	55                   	push   ebp
100054c3:	e8 fc ff ff ff       	call   100054c4 <NIDesktop::handleMouse(int, int, int, int)+0xdac>	100054c4: R_386_PC32	NIWindow::postEvent(NiEvent)
100054c8:	e9 e5 f7 ff ff       	jmp    10004cb2 <NIDesktop::handleMouse(int, int, int, int)+0x59a>
100054cd:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
100054d1:	85 f6                	test   esi,esi
100054d3:	0f 84 00 01 00 00    	je     100055d9 <NIDesktop::handleMouse(int, int, int, int)+0xec1>
100054d9:	39 2d 00 00 00 00    	cmp    DWORD PTR ds:0x0,ebp	100054db: R_386_32	clickonWhenMouseFirstClicked
100054df:	74 08                	je     100054e9 <NIDesktop::handleMouse(int, int, int, int)+0xdd1>
100054e1:	39 2d 00 00 00 00    	cmp    DWORD PTR ds:0x0,ebp	100054e3: R_386_32	prevClickon
100054e7:	75 6e                	jne    10005557 <NIDesktop::handleMouse(int, int, int, int)+0xe3f>
100054e9:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
100054ee:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
100054f2:	19 c0                	sbb    eax,eax
100054f4:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
100054f8:	81 e2 ff 1f 00 80    	and    edx,0x80001fff
100054fe:	83 c0 05             	add    eax,0x5
10005501:	25 ff ff 03 00       	and    eax,0x3ffff
10005506:	c1 e0 0d             	shl    eax,0xd
10005509:	09 d0                	or     eax,edx
1000550b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
1000550f:	a1 00 00 00 00       	mov    eax,ds:0x0	10005510: R_386_32	mouseDesktop
10005514:	80 64 24 4f 7f       	and    BYTE PTR [esp+0x4f],0x7f
10005519:	83 ec 1c             	sub    esp,0x1c
1000551c:	8b 90 14 04 00 00    	mov    edx,DWORD PTR [eax+0x414]
10005522:	66 89 54 24 6c       	mov    WORD PTR [esp+0x6c],dx
10005527:	8b 90 18 04 00 00    	mov    edx,DWORD PTR [eax+0x418]
1000552d:	8b 80 1c 04 00 00    	mov    eax,DWORD PTR [eax+0x41c]
10005533:	66 89 54 24 6e       	mov    WORD PTR [esp+0x6e],dx
10005538:	89 c2                	mov    edx,eax
1000553a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
1000553e:	66 81 e2 ff 03       	and    dx,0x3ff
10005543:	66 25 00 fc          	and    ax,0xfc00
10005547:	09 d0                	or     eax,edx
10005549:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
1000554e:	8d 74 24 64          	lea    esi,[esp+0x64]
10005552:	e9 0d 01 00 00       	jmp    10005664 <NIDesktop::handleMouse(int, int, int, int)+0xf4c>
10005557:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
1000555c:	0f 84 14 01 00 00    	je     10005676 <NIDesktop::handleMouse(int, int, int, int)+0xf5e>
10005562:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10005566:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
1000556a:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000556c: R_386_32	mouseDesktop
10005570:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
10005574:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
1000557a:	83 ec 1c             	sub    esp,0x1c
1000557d:	66 89 8c 24 84 00 00 00 	mov    WORD PTR [esp+0x84],cx
10005585:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	10005587: R_386_32	clickonWhenMouseFirstClicked
1000558b:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10005591:	25 ff 1f 00 00       	and    eax,0x1fff
10005596:	66 89 8c 24 86 00 00 00 	mov    WORD PTR [esp+0x86],cx
1000559e:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100055a4:	0d 00 a0 01 00       	or     eax,0x1a000
100055a9:	66 81 e2 ff 03       	and    dx,0x3ff
100055ae:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
100055b5:	b9 06 00 00 00       	mov    ecx,0x6
100055ba:	66 25 00 bc          	and    ax,0xbc00
100055be:	09 d0                	or     eax,edx
100055c0:	66 89 84 24 80 00 00 00 	mov    WORD PTR [esp+0x80],ax
100055c8:	8d 74 24 7c          	lea    esi,[esp+0x7c]
100055cc:	89 e7                	mov    edi,esp
100055ce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100055d0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100055d4:	e9 95 00 00 00       	jmp    1000566e <NIDesktop::handleMouse(int, int, int, int)+0xf56>
100055d9:	85 ff                	test   edi,edi
100055db:	0f 85 f8 fe ff ff    	jne    100054d9 <NIDesktop::handleMouse(int, int, int, int)+0xdc1>
100055e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100055e5:	83 e0 01             	and    eax,0x1
100055e8:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
100055ed:	0f 84 76 01 00 00    	je     10005769 <NIDesktop::handleMouse(int, int, int, int)+0x1051>
100055f3:	85 c0                	test   eax,eax
100055f5:	75 7f                	jne    10005676 <NIDesktop::handleMouse(int, int, int, int)+0xf5e>
100055f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
100055fc:	74 06                	je     10005604 <NIDesktop::handleMouse(int, int, int, int)+0xeec>
100055fe:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	10005600: R_386_32	clickonWhenMouseFirstClicked
10005604:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10005608:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000560a: R_386_32	mouseDesktop
1000560e:	89 6c 24 78          	mov    DWORD PTR [esp+0x78],ebp
10005612:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10005618:	25 ff 1f 00 00       	and    eax,0x1fff
1000561d:	66 89 8c 24 80 00 00 00 	mov    WORD PTR [esp+0x80],cx
10005625:	80 cc c0             	or     ah,0xc0
10005628:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
1000562e:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
10005632:	66 89 8c 24 82 00 00 00 	mov    WORD PTR [esp+0x82],cx
1000563a:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10005640:	66 25 00 dc          	and    ax,0xdc00
10005644:	66 81 e2 ff 03       	and    dx,0x3ff
10005649:	83 ec 1c             	sub    esp,0x1c
1000564c:	09 d0                	or     eax,edx
1000564e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005650: R_386_32	desktopHasFocus
10005655:	66 89 84 24 98 00 00 00 	mov    WORD PTR [esp+0x98],ax
1000565d:	8d b4 24 94 00 00 00 	lea    esi,[esp+0x94]
10005664:	89 e7                	mov    edi,esp
10005666:	b9 06 00 00 00       	mov    ecx,0x6
1000566b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000566d:	55                   	push   ebp
1000566e:	e8 fc ff ff ff       	call   1000566f <NIDesktop::handleMouse(int, int, int, int)+0xf57>	1000566f: R_386_PC32	NIWindow::postEvent(NiEvent)
10005673:	83 c4 20             	add    esp,0x20
10005676:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
1000567a:	83 e0 02             	and    eax,0x2
1000567d:	f6 84 24 7c 01 00 00 02 	test   BYTE PTR [esp+0x17c],0x2
10005685:	74 71                	je     100056f8 <NIDesktop::handleMouse(int, int, int, int)+0xfe0>
10005687:	85 c0                	test   eax,eax
10005689:	0f 85 0f f4 ff ff    	jne    10004a9e <NIDesktop::handleMouse(int, int, int, int)+0x386>
1000568f:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
10005696:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005698: R_386_32	mouseDesktop
1000569c:	89 ac 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],ebp
100056a3:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
100056a9:	25 ff 1f 00 00       	and    eax,0x1fff
100056ae:	66 89 8c 24 b0 00 00 00 	mov    WORD PTR [esp+0xb0],cx
100056b6:	0d 00 40 01 00       	or     eax,0x14000
100056bb:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100056c1:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
100056c8:	66 89 8c 24 b2 00 00 00 	mov    WORD PTR [esp+0xb2],cx
100056d0:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100056d6:	66 25 00 5c          	and    ax,0x5c00
100056da:	66 81 e2 ff 03       	and    dx,0x3ff
100056df:	83 ec 1c             	sub    esp,0x1c
100056e2:	09 d0                	or     eax,edx
100056e4:	66 89 84 24 c8 00 00 00 	mov    WORD PTR [esp+0xc8],ax
100056ec:	8d b4 24 c4 00 00 00 	lea    esi,[esp+0xc4]
100056f3:	e9 94 f3 ff ff       	jmp    10004a8c <NIDesktop::handleMouse(int, int, int, int)+0x374>
100056f8:	85 c0                	test   eax,eax
100056fa:	0f 84 9e f3 ff ff    	je     10004a9e <NIDesktop::handleMouse(int, int, int, int)+0x386>
10005700:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
10005707:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005709: R_386_32	mouseDesktop
1000570d:	89 ac 24 c0 00 00 00 	mov    DWORD PTR [esp+0xc0],ebp
10005714:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
1000571a:	25 ff 1f 00 00       	and    eax,0x1fff
1000571f:	66 89 8c 24 c8 00 00 00 	mov    WORD PTR [esp+0xc8],cx
10005727:	0d 00 60 01 00       	or     eax,0x16000
1000572c:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10005732:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
10005739:	66 89 8c 24 ca 00 00 00 	mov    WORD PTR [esp+0xca],cx
10005741:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10005747:	66 25 00 7c          	and    ax,0x7c00
1000574b:	66 81 e2 ff 03       	and    dx,0x3ff
10005750:	83 ec 1c             	sub    esp,0x1c
10005753:	09 d0                	or     eax,edx
10005755:	66 89 84 24 e0 00 00 00 	mov    WORD PTR [esp+0xe0],ax
1000575d:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
10005764:	e9 23 f3 ff ff       	jmp    10004a8c <NIDesktop::handleMouse(int, int, int, int)+0x374>
10005769:	85 c0                	test   eax,eax
1000576b:	0f 84 05 ff ff ff    	je     10005676 <NIDesktop::handleMouse(int, int, int, int)+0xf5e>
10005771:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
10005778:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000577a: R_386_32	mouseDesktop
1000577e:	89 ac 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],ebp
10005785:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
1000578b:	25 ff 1f 00 00       	and    eax,0x1fff
10005790:	66 89 8c 24 98 00 00 00 	mov    WORD PTR [esp+0x98],cx
10005798:	80 cc e0             	or     ah,0xe0
1000579b:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100057a1:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
100057a8:	66 89 8c 24 9a 00 00 00 	mov    WORD PTR [esp+0x9a],cx
100057b0:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100057b6:	66 25 00 fc          	and    ax,0xfc00
100057ba:	66 81 e2 ff 03       	and    dx,0x3ff
100057bf:	83 ec 1c             	sub    esp,0x1c
100057c2:	09 d0                	or     eax,edx
100057c4:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100057c6: R_386_32	clickonWhenMouseFirstClicked
100057ce:	66 89 84 24 b0 00 00 00 	mov    WORD PTR [esp+0xb0],ax
100057d6:	8d b4 24 ac 00 00 00 	lea    esi,[esp+0xac]
100057dd:	e9 82 fe ff ff       	jmp    10005664 <NIDesktop::handleMouse(int, int, int, int)+0xf4c>

100057e2 <NiHandleMouse(int, int, int, int)>:
100057e2:	83 ec 18             	sub    esp,0x18
100057e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100057e9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100057ed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100057f1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100057f5:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100057f7: R_386_32	mouseDesktop
100057fb:	e8 fc ff ff ff       	call   100057fc <NiHandleMouse(int, int, int, int)+0x1a>	100057fc: R_386_PC32	NIDesktop::handleMouse(int, int, int, int)
10005800:	83 c4 2c             	add    esp,0x2c
10005803:	c3                   	ret    

10005804 <drawVGAChar(int, int, int)>:
10005804:	55                   	push   ebp
10005805:	57                   	push   edi
10005806:	56                   	push   esi
10005807:	53                   	push   ebx
10005808:	31 db                	xor    ebx,ebx
1000580a:	83 ec 1c             	sub    esp,0x1c
1000580d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10005811:	c1 e0 04             	shl    eax,0x4
10005814:	89 04 24             	mov    DWORD PTR [esp],eax
10005817:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000581b:	c1 e0 04             	shl    eax,0x4
1000581e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10005822:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10005826:	c1 e0 03             	shl    eax,0x3
10005829:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000582d:	8b 04 24             	mov    eax,DWORD PTR [esp]
10005830:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10005834:	8a 84 18 00 00 00 00 	mov    al,BYTE PTR [eax+ebx*1+0x0]	10005837: R_386_32	cp
1000583b:	8d 3c 19             	lea    edi,[ecx+ebx*1]
1000583e:	31 f6                	xor    esi,esi
10005840:	84 c0                	test   al,al
10005842:	79 22                	jns    10005866 <drawVGAChar(int, int, int)+0x62>
10005844:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10005848:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000584a: R_386_32	screen
1000584e:	8b 0a                	mov    ecx,DWORD PTR [edx]
10005850:	6a 00                	push   0x0
10005852:	57                   	push   edi
10005853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10005857:	8d 2c 06             	lea    ebp,[esi+eax*1]
1000585a:	55                   	push   ebp
1000585b:	52                   	push   edx
1000585c:	ff 51 24             	call   DWORD PTR [ecx+0x24]
1000585f:	83 c4 10             	add    esp,0x10
10005862:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
10005866:	d1 e0                	shl    eax,1
10005868:	46                   	inc    esi
10005869:	83 fe 08             	cmp    esi,0x8
1000586c:	75 d2                	jne    10005840 <drawVGAChar(int, int, int)+0x3c>
1000586e:	43                   	inc    ebx
1000586f:	83 fb 10             	cmp    ebx,0x10
10005872:	75 b9                	jne    1000582d <drawVGAChar(int, int, int)+0x29>
10005874:	83 c4 1c             	add    esp,0x1c
10005877:	5b                   	pop    ebx
10005878:	5e                   	pop    esi
10005879:	5f                   	pop    edi
1000587a:	5d                   	pop    ebp
1000587b:	c3                   	ret    

1000587c <NiDisplayRAM(void*)>:
1000587c:	57                   	push   edi
1000587d:	56                   	push   esi
1000587e:	53                   	push   ebx
1000587f:	f0 ff 0d 00 00 00 00 	lock dec DWORD PTR ds:0x0	10005882: R_386_32	irqDisableCounter
10005886:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10005888: R_386_32	irqDisableCounter
1000588d:	75 01                	jne    10005890 <NiDisplayRAM(void*)+0x14>
1000588f:	fb                   	sti    
10005890:	a1 00 00 00 00       	mov    eax,ds:0x0	10005891: R_386_32	swapBalance
10005895:	31 f6                	xor    esi,esi
10005897:	03 05 00 00 00 00    	add    eax,DWORD PTR ds:0x0	10005899: R_386_32	Phys::usedPages
1000589d:	6b c0 64             	imul   eax,eax,0x64
100058a0:	99                   	cdq    
100058a1:	f7 3d 00 00 00 00    	idiv   DWORD PTR ds:0x0	100058a3: R_386_32	Phys::usablePages
100058a7:	89 c3                	mov    ebx,eax
100058a9:	31 ff                	xor    edi,edi
100058ab:	a1 00 00 00 00       	mov    eax,ds:0x0	100058ac: R_386_32	screen
100058b0:	8b 10                	mov    edx,DWORD PTR [eax]
100058b2:	68 ff ff ff 00       	push   0xffffff
100058b7:	56                   	push   esi
100058b8:	57                   	push   edi
100058b9:	47                   	inc    edi
100058ba:	50                   	push   eax
100058bb:	ff 52 24             	call   DWORD PTR [edx+0x24]
100058be:	83 c4 10             	add    esp,0x10
100058c1:	83 ff 68             	cmp    edi,0x68
100058c4:	75 e5                	jne    100058ab <NiDisplayRAM(void*)+0x2f>
100058c6:	46                   	inc    esi
100058c7:	83 fe 10             	cmp    esi,0x10
100058ca:	75 dd                	jne    100058a9 <NiDisplayRAM(void*)+0x2d>
100058cc:	8d 43 63             	lea    eax,[ebx+0x63]
100058cf:	3d c6 00 00 00       	cmp    eax,0xc6
100058d4:	76 1b                	jbe    100058f1 <NiDisplayRAM(void*)+0x75>
100058d6:	b9 64 00 00 00       	mov    ecx,0x64
100058db:	89 d8                	mov    eax,ebx
100058dd:	99                   	cdq    
100058de:	56                   	push   esi
100058df:	f7 f9                	idiv   ecx
100058e1:	83 c0 30             	add    eax,0x30
100058e4:	50                   	push   eax
100058e5:	6a 00                	push   0x0
100058e7:	6a 00                	push   0x0
100058e9:	e8 fc ff ff ff       	call   100058ea <NiDisplayRAM(void*)+0x6e>	100058ea: R_386_PC32	drawVGAChar(int, int, int)
100058ee:	83 c4 10             	add    esp,0x10
100058f1:	b9 0a 00 00 00       	mov    ecx,0xa
100058f6:	50                   	push   eax
100058f7:	89 d8                	mov    eax,ebx
100058f9:	99                   	cdq    
100058fa:	f7 f9                	idiv   ecx
100058fc:	89 d3                	mov    ebx,edx
100058fe:	99                   	cdq    
100058ff:	83 c3 30             	add    ebx,0x30
10005902:	f7 f9                	idiv   ecx
10005904:	8d 42 30             	lea    eax,[edx+0x30]
10005907:	50                   	push   eax
10005908:	6a 00                	push   0x0
1000590a:	6a 01                	push   0x1
1000590c:	e8 fc ff ff ff       	call   1000590d <NiDisplayRAM(void*)+0x91>	1000590d: R_386_PC32	drawVGAChar(int, int, int)
10005911:	83 c4 0c             	add    esp,0xc
10005914:	53                   	push   ebx
10005915:	6a 00                	push   0x0
10005917:	6a 02                	push   0x2
10005919:	e8 fc ff ff ff       	call   1000591a <NiDisplayRAM(void*)+0x9e>	1000591a: R_386_PC32	drawVGAChar(int, int, int)
1000591e:	83 c4 0c             	add    esp,0xc
10005921:	6a 25                	push   0x25
10005923:	6a 00                	push   0x0
10005925:	6a 03                	push   0x3
10005927:	e8 fc ff ff ff       	call   10005928 <NiDisplayRAM(void*)+0xac>	10005928: R_386_PC32	drawVGAChar(int, int, int)
1000592c:	83 c4 0c             	add    esp,0xc
1000592f:	6a 20                	push   0x20
10005931:	6a 00                	push   0x0
10005933:	6a 04                	push   0x4
10005935:	e8 fc ff ff ff       	call   10005936 <NiDisplayRAM(void*)+0xba>	10005936: R_386_PC32	drawVGAChar(int, int, int)
1000593a:	83 c4 0c             	add    esp,0xc
1000593d:	6a 52                	push   0x52
1000593f:	6a 00                	push   0x0
10005941:	6a 05                	push   0x5
10005943:	e8 fc ff ff ff       	call   10005944 <NiDisplayRAM(void*)+0xc8>	10005944: R_386_PC32	drawVGAChar(int, int, int)
10005948:	83 c4 0c             	add    esp,0xc
1000594b:	6a 41                	push   0x41
1000594d:	6a 00                	push   0x0
1000594f:	6a 06                	push   0x6
10005951:	e8 fc ff ff ff       	call   10005952 <NiDisplayRAM(void*)+0xd6>	10005952: R_386_PC32	drawVGAChar(int, int, int)
10005956:	83 c4 0c             	add    esp,0xc
10005959:	6a 4d                	push   0x4d
1000595b:	6a 00                	push   0x0
1000595d:	6a 07                	push   0x7
1000595f:	e8 fc ff ff ff       	call   10005960 <NiDisplayRAM(void*)+0xe4>	10005960: R_386_PC32	drawVGAChar(int, int, int)
10005964:	83 c4 0c             	add    esp,0xc
10005967:	6a 20                	push   0x20
10005969:	6a 00                	push   0x0
1000596b:	6a 08                	push   0x8
1000596d:	e8 fc ff ff ff       	call   1000596e <NiDisplayRAM(void*)+0xf2>	1000596e: R_386_PC32	drawVGAChar(int, int, int)
10005972:	83 c4 0c             	add    esp,0xc
10005975:	6a 75                	push   0x75
10005977:	6a 00                	push   0x0
10005979:	6a 09                	push   0x9
1000597b:	e8 fc ff ff ff       	call   1000597c <NiDisplayRAM(void*)+0x100>	1000597c: R_386_PC32	drawVGAChar(int, int, int)
10005980:	83 c4 0c             	add    esp,0xc
10005983:	6a 73                	push   0x73
10005985:	6a 00                	push   0x0
10005987:	6a 0a                	push   0xa
10005989:	e8 fc ff ff ff       	call   1000598a <NiDisplayRAM(void*)+0x10e>	1000598a: R_386_PC32	drawVGAChar(int, int, int)
1000598e:	83 c4 0c             	add    esp,0xc
10005991:	6a 65                	push   0x65
10005993:	6a 00                	push   0x0
10005995:	6a 0b                	push   0xb
10005997:	e8 fc ff ff ff       	call   10005998 <NiDisplayRAM(void*)+0x11c>	10005998: R_386_PC32	drawVGAChar(int, int, int)
1000599c:	83 c4 0c             	add    esp,0xc
1000599f:	6a 64                	push   0x64
100059a1:	6a 00                	push   0x0
100059a3:	6a 0c                	push   0xc
100059a5:	e8 fc ff ff ff       	call   100059a6 <NiDisplayRAM(void*)+0x12a>	100059a6: R_386_PC32	drawVGAChar(int, int, int)
100059aa:	5a                   	pop    edx
100059ab:	59                   	pop    ecx
100059ac:	6a 00                	push   0x0
100059ae:	68 4c 1d 00 00       	push   0x1d4c
100059b3:	e8 fc ff ff ff       	call   100059b4 <NiDisplayRAM(void*)+0x138>	100059b4: R_386_PC32	milliTenthSleep(unsigned long long)
100059b8:	83 c4 10             	add    esp,0x10
100059bb:	e9 d0 fe ff ff       	jmp    10005890 <NiDisplayRAM(void*)+0x14>

100059c0 <monikaBsod(char*)>:
100059c0:	55                   	push   ebp
100059c1:	57                   	push   edi
100059c2:	31 ff                	xor    edi,edi
100059c4:	56                   	push   esi
100059c5:	53                   	push   ebx
100059c6:	31 db                	xor    ebx,ebx
100059c8:	83 ec 24             	sub    esp,0x24
100059cb:	a1 00 00 00 00       	mov    eax,ds:0x0	100059cc: R_386_32	screen
100059d0:	8b 10                	mov    edx,DWORD PTR [eax]
100059d2:	68 ff ff ff 00       	push   0xffffff
100059d7:	50                   	push   eax
100059d8:	ff 52 40             	call   DWORD PTR [edx+0x40]
100059db:	83 c4 10             	add    esp,0x10
100059de:	8a 8b 00 00 00 00    	mov    cl,BYTE PTR [ebx+0x0]	100059e0: R_386_32	justMonika
100059e4:	8d 43 01             	lea    eax,[ebx+0x1]
100059e7:	84 c9                	test   cl,cl
100059e9:	79 0e                	jns    100059f9 <monikaBsod(char*)+0x39>
100059eb:	8d 51 80             	lea    edx,[ecx-0x80]
100059ee:	83 c3 02             	add    ebx,0x2
100059f1:	8a 88 00 00 00 00    	mov    cl,BYTE PTR [eax+0x0]	100059f3: R_386_32	justMonika
100059f7:	eb 04                	jmp    100059fd <monikaBsod(char*)+0x3d>
100059f9:	89 c3                	mov    ebx,eax
100059fb:	b2 01                	mov    dl,0x1
100059fd:	0f b6 c1             	movzx  eax,cl
10005a00:	83 e1 03             	and    ecx,0x3
10005a03:	89 c6                	mov    esi,eax
10005a05:	6b c9 55             	imul   ecx,ecx,0x55
10005a08:	c1 fe 05             	sar    esi,0x5
10005a0b:	c1 f8 02             	sar    eax,0x2
10005a0e:	83 e6 03             	and    esi,0x3
10005a11:	83 e0 07             	and    eax,0x7
10005a14:	6b f6 55             	imul   esi,esi,0x55
10005a17:	6b c0 24             	imul   eax,eax,0x24
10005a1a:	c1 e6 10             	shl    esi,0x10
10005a1d:	c1 e0 08             	shl    eax,0x8
10005a20:	09 f0                	or     eax,esi
10005a22:	31 f6                	xor    esi,esi
10005a24:	09 c8                	or     eax,ecx
10005a26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10005a2a:	0f b6 c2             	movzx  eax,dl
10005a2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10005a31:	8d 04 37             	lea    eax,[edi+esi*1]
10005a34:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10005a38:	7f 10                	jg     10005a4a <monikaBsod(char*)+0x8a>
10005a3a:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
10005a3e:	81 ff ff af 04 00    	cmp    edi,0x4afff
10005a44:	7e 98                	jle    100059de <monikaBsod(char*)+0x1e>
10005a46:	31 db                	xor    ebx,ebx
10005a48:	eb 25                	jmp    10005a6f <monikaBsod(char*)+0xaf>
10005a4a:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005a4c: R_386_32	screen
10005a50:	b9 80 02 00 00       	mov    ecx,0x280
10005a55:	8b 2a                	mov    ebp,DWORD PTR [edx]
10005a57:	46                   	inc    esi
10005a58:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10005a5c:	99                   	cdq    
10005a5d:	f7 f9                	idiv   ecx
10005a5f:	50                   	push   eax
10005a60:	52                   	push   edx
10005a61:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005a63: R_386_32	screen
10005a67:	ff 55 24             	call   DWORD PTR [ebp+0x24]
10005a6a:	83 c4 10             	add    esp,0x10
10005a6d:	eb c2                	jmp    10005a31 <monikaBsod(char*)+0x71>
10005a6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10005a73:	0f be 04 18          	movsx  eax,BYTE PTR [eax+ebx*1]
10005a77:	84 c0                	test   al,al
10005a79:	74 1d                	je     10005a98 <monikaBsod(char*)+0xd8>
10005a7b:	b9 19 00 00 00       	mov    ecx,0x19
10005a80:	52                   	push   edx
10005a81:	50                   	push   eax
10005a82:	89 d8                	mov    eax,ebx
10005a84:	43                   	inc    ebx
10005a85:	99                   	cdq    
10005a86:	f7 f9                	idiv   ecx
10005a88:	83 c0 0a             	add    eax,0xa
10005a8b:	42                   	inc    edx
10005a8c:	50                   	push   eax
10005a8d:	52                   	push   edx
10005a8e:	e8 fc ff ff ff       	call   10005a8f <monikaBsod(char*)+0xcf>	10005a8f: R_386_PC32	drawVGAChar(int, int, int)
10005a93:	83 c4 10             	add    esp,0x10
10005a96:	eb d7                	jmp    10005a6f <monikaBsod(char*)+0xaf>
10005a98:	f4                   	hlt    
10005a99:	eb fd                	jmp    10005a98 <monikaBsod(char*)+0xd8>

10005a9b <NiInstallSysHooks()>:
10005a9b:	83 ec 14             	sub    esp,0x14
10005a9e:	6a 00                	push   0x0
10005aa0:	68 00 00 00 00       	push   0x0	10005aa1: R_386_32	NiShutdownHandler(void*)
10005aa5:	e8 fc ff ff ff       	call   10005aa6 <NiInstallSysHooks()+0xb>	10005aa6: R_386_PC32	KeRegisterAtexit(void (*)(void*), void*)
10005aaa:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005aac: R_386_32	guiPanicHandler
	10005ab0: R_386_32	monikaBsod(char*)
10005ab4:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005ab6: R_386_32	guiKeyboardHandler
	10005aba: R_386_32	NiKeyhandler(KeyboardToken, bool*)
10005abe:	c7 05 bc 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xbc,0x0	10005ac0: R_386_32	systemCallHandlers
	10005ac4: R_386_32	NiSystemCallHandler(regs*)
10005ac8:	83 c4 1c             	add    esp,0x1c
10005acb:	c3                   	ret    

10005acc <NiLinkCommandDestroyWindow(unsigned long, NiLinkWindowStruct*)>:
10005acc:	83 ec 18             	sub    esp,0x18
10005acf:	68 9a 6d 00 10       	push   0x10006d9a	10005ad0: R_386_32	.text
10005ad4:	e8 fc ff ff ff       	call   10005ad5 <NiLinkCommandDestroyWindow(unsigned long, NiLinkWindowStruct*)+0x9>	10005ad5: R_386_PC32	Dbg::kprintf(char const*, ...)
10005ad9:	58                   	pop    eax
10005ada:	5a                   	pop    edx
10005adb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10005adf:	ff b0 a0 00 00 00    	push   DWORD PTR [eax+0xa0]
10005ae5:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005ae7: R_386_32	desktop
10005aeb:	e8 fc ff ff ff       	call   10005aec <NiLinkCommandDestroyWindow(unsigned long, NiLinkWindowStruct*)+0x20>	10005aec: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10005af0:	59                   	pop    ecx
10005af1:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005af3: R_386_32	desktop
10005af7:	e8 fc ff ff ff       	call   10005af8 <NiLinkCommandDestroyWindow(unsigned long, NiLinkWindowStruct*)+0x2c>	10005af8: R_386_PC32	NIDesktop::completeRefresh()
10005afc:	31 c0                	xor    eax,eax
10005afe:	31 d2                	xor    edx,edx
10005b00:	83 c4 1c             	add    esp,0x1c
10005b03:	c3                   	ret    

10005b04 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)>:
10005b04:	56                   	push   esi
10005b05:	53                   	push   ebx
10005b06:	83 ec 10             	sub    esp,0x10
10005b09:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10005b0d:	68 b6 6d 00 10       	push   0x10006db6	10005b0e: R_386_32	.text
10005b12:	e8 fc ff ff ff       	call   10005b13 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0xf>	10005b13: R_386_PC32	Dbg::kprintf(char const*, ...)
10005b17:	c7 04 24 90 02 00 00 	mov    DWORD PTR [esp],0x290
10005b1e:	e8 fc ff ff ff       	call   10005b1f <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x1b>	10005b1f: R_386_PC32	malloc
10005b23:	89 c6                	mov    esi,eax
10005b25:	58                   	pop    eax
10005b26:	5a                   	pop    edx
10005b27:	ff b3 b0 00 00 00    	push   DWORD PTR [ebx+0xb0]
10005b2d:	ff b3 ac 00 00 00    	push   DWORD PTR [ebx+0xac]
10005b33:	ff b3 a8 00 00 00    	push   DWORD PTR [ebx+0xa8]
10005b39:	ff b3 a4 00 00 00    	push   DWORD PTR [ebx+0xa4]
10005b3f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005b41: R_386_32	ctxt
10005b45:	56                   	push   esi
10005b46:	e8 fc ff ff ff       	call   10005b47 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x43>	10005b47: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10005b4b:	8b 83 b4 00 00 00    	mov    eax,DWORD PTR [ebx+0xb4]
10005b51:	83 c4 18             	add    esp,0x18
10005b54:	89 86 8c 02 00 00    	mov    DWORD PTR [esi+0x28c],eax
10005b5a:	56                   	push   esi
10005b5b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005b5d: R_386_32	desktop
10005b61:	e8 fc ff ff ff       	call   10005b62 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x5e>	10005b62: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10005b66:	59                   	pop    ecx
10005b67:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005b69: R_386_32	desktop
10005b6d:	e8 fc ff ff ff       	call   10005b6e <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x6a>	10005b6e: R_386_PC32	NIDesktop::completeRefresh()
10005b72:	89 b3 a0 00 00 00    	mov    DWORD PTR [ebx+0xa0],esi
10005b78:	31 c0                	xor    eax,eax
10005b7a:	83 c4 14             	add    esp,0x14
10005b7d:	31 d2                	xor    edx,edx
10005b7f:	5b                   	pop    ebx
10005b80:	5e                   	pop    esi
10005b81:	c3                   	ret    

10005b82 <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)>:
10005b82:	53                   	push   ebx
10005b83:	83 ec 14             	sub    esp,0x14
10005b86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10005b8a:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
10005b90:	53                   	push   ebx
10005b91:	e8 fc ff ff ff       	call   10005b92 <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)+0x10>	10005b92: R_386_PC32	NIWindow::rerender()
10005b96:	8b 83 8c 02 00 00    	mov    eax,DWORD PTR [ebx+0x28c]
10005b9c:	83 c4 10             	add    esp,0x10
10005b9f:	89 c2                	mov    edx,eax
10005ba1:	83 e2 ef             	and    edx,0xffffffef
10005ba4:	a8 20                	test   al,0x20
10005ba6:	89 93 8c 02 00 00    	mov    DWORD PTR [ebx+0x28c],edx
10005bac:	74 0c                	je     10005bba <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)+0x38>
10005bae:	83 ec 0c             	sub    esp,0xc
10005bb1:	53                   	push   ebx
10005bb2:	e8 fc ff ff ff       	call   10005bb3 <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)+0x31>	10005bb3: R_386_PC32	NIWindow::drawResizeMarker()
10005bb7:	83 c4 10             	add    esp,0x10
10005bba:	83 ec 0c             	sub    esp,0xc
10005bbd:	6a 00                	push   0x0
10005bbf:	6a ff                	push   0xffffffff
10005bc1:	6a ff                	push   0xffffffff
10005bc3:	53                   	push   ebx
10005bc4:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005bc6: R_386_32	desktop
10005bca:	e8 fc ff ff ff       	call   10005bcb <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)+0x49>	10005bcb: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
10005bcf:	31 c0                	xor    eax,eax
10005bd1:	31 d2                	xor    edx,edx
10005bd3:	83 c4 28             	add    esp,0x28
10005bd6:	5b                   	pop    ebx
10005bd7:	c3                   	ret    

10005bd8 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)>:
10005bd8:	55                   	push   ebp
10005bd9:	57                   	push   edi
10005bda:	56                   	push   esi
10005bdb:	53                   	push   ebx
10005bdc:	83 ec 0c             	sub    esp,0xc
10005bdf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
10005be3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
10005be7:	8d 41 ff             	lea    eax,[ecx-0x1]
10005bea:	3d fe 0f 00 00       	cmp    eax,0xffe
10005bef:	76 72                	jbe    10005c63 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0x8b>
10005bf1:	a1 00 00 00 00       	mov    eax,ds:0x0	10005bf2: R_386_32	desktop
10005bf6:	85 c9                	test   ecx,ecx
10005bf8:	8b b8 08 04 00 00    	mov    edi,DWORD PTR [eax+0x408]
10005bfe:	75 1a                	jne    10005c1a <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0x42>
10005c00:	8b 00                	mov    eax,DWORD PTR [eax]
10005c02:	8b 88 0c 04 00 00    	mov    ecx,DWORD PTR [eax+0x40c]
10005c08:	0f af 88 10 04 00 00 	imul   ecx,DWORD PTR [eax+0x410]
10005c0f:	01 c9                	add    ecx,ecx
10005c11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10005c13:	31 c0                	xor    eax,eax
10005c15:	e9 9b 00 00 00       	jmp    10005cb5 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xdd>
10005c1a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
10005c1d:	8b 19                	mov    ebx,DWORD PTR [ecx]
10005c1f:	8b 69 08             	mov    ebp,DWORD PTR [ecx+0x8]
10005c22:	8b 51 0c             	mov    edx,DWORD PTR [ecx+0xc]
10005c25:	8d 0c 1b             	lea    ecx,[ebx+ebx*1]
10005c28:	01 cf                	add    edi,ecx
10005c2a:	8d 0c 00             	lea    ecx,[eax+eax*1]
10005c2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10005c2f:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	10005c31: R_386_32	desktop
10005c35:	8b 0e                	mov    ecx,DWORD PTR [esi]
10005c37:	01 d8                	add    eax,ebx
10005c39:	8b 89 0c 04 00 00    	mov    ecx,DWORD PTR [ecx+0x40c]
10005c3f:	57                   	push   edi
10005c40:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10005c44:	57                   	push   edi
10005c45:	6a 00                	push   0x0
10005c47:	52                   	push   edx
10005c48:	99                   	cdq    
10005c49:	55                   	push   ebp
10005c4a:	f7 f9                	idiv   ecx
10005c4c:	50                   	push   eax
10005c4d:	89 d8                	mov    eax,ebx
10005c4f:	99                   	cdq    
10005c50:	f7 f9                	idiv   ecx
10005c52:	50                   	push   eax
10005c53:	56                   	push   esi
10005c54:	e8 fc ff ff ff       	call   10005c55 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0x7d>	10005c55: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10005c59:	83 c4 20             	add    esp,0x20
10005c5c:	b8 04 00 00 00       	mov    eax,0x4
10005c61:	eb 52                	jmp    10005cb5 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xdd>
10005c63:	83 f9 01             	cmp    ecx,0x1
10005c66:	75 2d                	jne    10005c95 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xbd>
10005c68:	a1 00 00 00 00       	mov    eax,ds:0x0	10005c69: R_386_32	desktop
10005c6d:	b9 00 02 00 00       	mov    ecx,0x200
10005c72:	8d b8 08 02 00 00    	lea    edi,[eax+0x208]
10005c78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10005c7a:	a1 00 00 00 00       	mov    eax,ds:0x0	10005c7b: R_386_32	desktop
10005c7f:	8b 00                	mov    eax,DWORD PTR [eax]
10005c81:	8b 88 0c 04 00 00    	mov    ecx,DWORD PTR [eax+0x40c]
10005c87:	c1 e1 10             	shl    ecx,0x10
10005c8a:	0b 88 10 04 00 00    	or     ecx,DWORD PTR [eax+0x410]
10005c90:	89 c8                	mov    eax,ecx
10005c92:	99                   	cdq    
10005c93:	eb 22                	jmp    10005cb7 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xdf>
10005c95:	83 c8 ff             	or     eax,0xffffffff
10005c98:	83 f9 02             	cmp    ecx,0x2
10005c9b:	89 c2                	mov    edx,eax
10005c9d:	75 18                	jne    10005cb7 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xdf>
10005c9f:	83 ec 0c             	sub    esp,0xc
10005ca2:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005ca4: R_386_32	desktop
10005ca8:	e8 fc ff ff ff       	call   10005ca9 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xd1>	10005ca9: R_386_PC32	NIDesktop::completeRefresh()
10005cad:	83 c4 10             	add    esp,0x10
10005cb0:	b8 02 00 00 00       	mov    eax,0x2
10005cb5:	31 d2                	xor    edx,edx
10005cb7:	83 c4 0c             	add    esp,0xc
10005cba:	5b                   	pop    ebx
10005cbb:	5e                   	pop    esi
10005cbc:	5f                   	pop    edi
10005cbd:	5d                   	pop    ebp
10005cbe:	c3                   	ret    

10005cbf <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)>:
10005cbf:	55                   	push   ebp
10005cc0:	57                   	push   edi
10005cc1:	56                   	push   esi
10005cc2:	53                   	push   ebx
10005cc3:	81 ec 28 08 00 00    	sub    esp,0x828
10005cc9:	8b bc 24 3c 08 00 00 	mov    edi,DWORD PTR [esp+0x83c]
10005cd0:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
10005cd7:	0f b7 f7             	movzx  esi,di
10005cda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10005cde:	c1 ef 10             	shr    edi,0x10
10005ce1:	8b 84 24 40 08 00 00 	mov    eax,DWORD PTR [esp+0x840]
10005ce8:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
10005cee:	53                   	push   ebx
10005cef:	e8 fc ff ff ff       	call   10005cf0 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x31>	10005cf0: R_386_PC32	NIWindow::request()
10005cf4:	83 c4 10             	add    esp,0x10
10005cf7:	81 fe ff ff 00 00    	cmp    esi,0xffff
10005cfd:	75 02                	jne    10005d01 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x42>
10005cff:	31 f6                	xor    esi,esi
10005d01:	81 ff ff ff 00 00    	cmp    edi,0xffff
10005d07:	74 05                	je     10005d0e <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x4f>
10005d09:	89 3c 24             	mov    DWORD PTR [esp],edi
10005d0c:	eb 09                	jmp    10005d17 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x58>
10005d0e:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10005d14:	89 04 24             	mov    DWORD PTR [esp],eax
10005d17:	8b ab 70 02 00 00    	mov    ebp,DWORD PTR [ebx+0x270]
10005d1d:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
10005d21:	0f af ee             	imul   ebp,esi
10005d24:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10005d28:	39 0c 24             	cmp    DWORD PTR [esp],ecx
10005d2b:	7e 73                	jle    10005da0 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0xe1>
10005d2d:	8d 84 24 10 08 00 00 	lea    eax,[esp+0x810]
10005d34:	8d 0c 08             	lea    ecx,[eax+ecx*1]
10005d37:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
10005d3d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10005d41:	01 c8                	add    eax,ecx
10005d43:	c6 80 00 f8 ff ff 00 	mov    BYTE PTR [eax-0x800],0x0
10005d4a:	89 e8                	mov    eax,ebp
10005d4c:	89 c1                	mov    ecx,eax
10005d4e:	29 e9                	sub    ecx,ebp
10005d50:	39 8b 70 02 00 00    	cmp    DWORD PTR [ebx+0x270],ecx
10005d56:	7e 40                	jle    10005d98 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0xd9>
10005d58:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10005d5f:	89 d7                	mov    edi,edx
10005d61:	8b 94 24 34 08 00 00 	mov    edx,DWORD PTR [esp+0x834]
10005d68:	8b 8a b8 00 00 00    	mov    ecx,DWORD PTR [edx+0xb8]
10005d6e:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
10005d71:	83 f9 ff             	cmp    ecx,0xffffffff
10005d74:	74 1f                	je     10005d95 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0xd6>
10005d76:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10005d79:	39 0c 82             	cmp    DWORD PTR [edx+eax*4],ecx
10005d7c:	74 11                	je     10005d8f <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0xd0>
10005d7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10005d82:	03 93 6c 02 00 00    	add    edx,DWORD PTR [ebx+0x26c]
10005d88:	c6 82 00 f8 ff ff 01 	mov    BYTE PTR [edx-0x800],0x1
10005d8f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10005d92:	89 0c 3a             	mov    DWORD PTR [edx+edi*1],ecx
10005d95:	40                   	inc    eax
10005d96:	eb b4                	jmp    10005d4c <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x8d>
10005d98:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
10005d9c:	89 c5                	mov    ebp,eax
10005d9e:	eb 84                	jmp    10005d24 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x65>
10005da0:	8b 83 8c 02 00 00    	mov    eax,DWORD PTR [ebx+0x28c]
10005da6:	89 c2                	mov    edx,eax
10005da8:	83 e2 ef             	and    edx,0xffffffef
10005dab:	a8 20                	test   al,0x20
10005dad:	89 93 8c 02 00 00    	mov    DWORD PTR [ebx+0x28c],edx
10005db3:	74 0c                	je     10005dc1 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x102>
10005db5:	83 ec 0c             	sub    esp,0xc
10005db8:	53                   	push   ebx
10005db9:	e8 fc ff ff ff       	call   10005dba <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0xfb>	10005dba: R_386_PC32	NIWindow::drawResizeMarker()
10005dbe:	83 c4 10             	add    esp,0x10
10005dc1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
10005dc6:	74 1c                	je     10005de4 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x125>
10005dc8:	83 ec 0c             	sub    esp,0xc
10005dcb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10005dcf:	50                   	push   eax
10005dd0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10005dd4:	56                   	push   esi
10005dd5:	53                   	push   ebx
10005dd6:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005dd8: R_386_32	desktop
10005ddc:	e8 fc ff ff ff       	call   10005ddd <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x11e>	10005ddd: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
10005de1:	83 c4 20             	add    esp,0x20
10005de4:	81 c4 1c 08 00 00    	add    esp,0x81c
10005dea:	31 c0                	xor    eax,eax
10005dec:	5b                   	pop    ebx
10005ded:	31 d2                	xor    edx,edx
10005def:	5e                   	pop    esi
10005df0:	5f                   	pop    edi
10005df1:	5d                   	pop    ebp
10005df2:	c3                   	ret    

10005df3 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10005df3:	83 ec 10             	sub    esp,0x10
10005df6:	6a 00                	push   0x0
10005df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10005dfc:	6a ff                	push   0xffffffff
10005dfe:	e8 fc ff ff ff       	call   10005dff <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0xc>	10005dff: R_386_PC32	NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)
10005e03:	58                   	pop    eax
10005e04:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005e06: R_386_32	desktop
10005e0a:	e8 fc ff ff ff       	call   10005e0b <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x18>	10005e0b: R_386_PC32	NIDesktop::completeRefresh()
10005e0f:	31 c0                	xor    eax,eax
10005e11:	31 d2                	xor    edx,edx
10005e13:	83 c4 1c             	add    esp,0x1c
10005e16:	c3                   	ret    

10005e17 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10005e17:	53                   	push   ebx
10005e18:	83 ec 14             	sub    esp,0x14
10005e1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10005e1f:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
10005e25:	53                   	push   ebx
10005e26:	e8 fc ff ff ff       	call   10005e27 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x10>	10005e27: R_386_PC32	NIWindow::request()
10005e2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
10005e2e:	e8 fc ff ff ff       	call   10005e2f <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x18>	10005e2f: R_386_PC32	NIWindow::drawBasicWindow()
10005e33:	31 c0                	xor    eax,eax
10005e35:	31 d2                	xor    edx,edx
10005e37:	83 c4 18             	add    esp,0x18
10005e3a:	5b                   	pop    ebx
10005e3b:	c3                   	ret    

10005e3c <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)>:
10005e3c:	55                   	push   ebp
10005e3d:	57                   	push   edi
10005e3e:	56                   	push   esi
10005e3f:	53                   	push   ebx
10005e40:	83 ec 38             	sub    esp,0x38
10005e43:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
10005e47:	8b 9d a0 00 00 00    	mov    ebx,DWORD PTR [ebp+0xa0]
10005e4d:	53                   	push   ebx
10005e4e:	e8 fc ff ff ff       	call   10005e4f <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x13>	10005e4f: R_386_PC32	NIWindow::getEventCount()
10005e53:	83 c4 10             	add    esp,0x10
10005e56:	85 c0                	test   eax,eax
10005e58:	74 54                	je     10005eae <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x72>
10005e5a:	89 e6                	mov    esi,esp
10005e5c:	8d bd c0 00 00 00    	lea    edi,[ebp+0xc0]
10005e62:	50                   	push   eax
10005e63:	50                   	push   eax
10005e64:	53                   	push   ebx
10005e65:	56                   	push   esi
10005e66:	e8 fc ff ff ff       	call   10005e67 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x2b>	10005e67: R_386_PC32	NIWindow::grabEvent()
10005e6b:	b9 06 00 00 00       	mov    ecx,0x6
10005e70:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005e72:	8b 83 68 02 00 00    	mov    eax,DWORD PTR [ebx+0x268]
10005e78:	89 85 a4 00 00 00    	mov    DWORD PTR [ebp+0xa4],eax
10005e7e:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
10005e84:	89 85 a8 00 00 00    	mov    DWORD PTR [ebp+0xa8],eax
10005e8a:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10005e90:	89 85 ac 00 00 00    	mov    DWORD PTR [ebp+0xac],eax
10005e96:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10005e9c:	89 85 b0 00 00 00    	mov    DWORD PTR [ebp+0xb0],eax
10005ea2:	53                   	push   ebx
10005ea3:	e8 fc ff ff ff       	call   10005ea4 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x68>	10005ea4: R_386_PC32	NIWindow::getEventCount()
10005ea8:	83 c4 10             	add    esp,0x10
10005eab:	99                   	cdq    
10005eac:	eb 05                	jmp    10005eb3 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x77>
10005eae:	83 c8 ff             	or     eax,0xffffffff
10005eb1:	89 c2                	mov    edx,eax
10005eb3:	83 c4 2c             	add    esp,0x2c
10005eb6:	5b                   	pop    ebx
10005eb7:	5e                   	pop    esi
10005eb8:	5f                   	pop    edi
10005eb9:	5d                   	pop    ebp
10005eba:	c3                   	ret    

10005ebb <NiLinkCommandReadFlags(unsigned long, NiLinkWindowStruct*)>:
10005ebb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10005ebf:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
10005ec5:	8b 8a 8c 02 00 00    	mov    ecx,DWORD PTR [edx+0x28c]
10005ecb:	89 88 b4 00 00 00    	mov    DWORD PTR [eax+0xb4],ecx
10005ed1:	8b 8a 68 02 00 00    	mov    ecx,DWORD PTR [edx+0x268]
10005ed7:	89 88 a4 00 00 00    	mov    DWORD PTR [eax+0xa4],ecx
10005edd:	8b 8a 6c 02 00 00    	mov    ecx,DWORD PTR [edx+0x26c]
10005ee3:	89 88 a8 00 00 00    	mov    DWORD PTR [eax+0xa8],ecx
10005ee9:	8b 8a 70 02 00 00    	mov    ecx,DWORD PTR [edx+0x270]
10005eef:	89 88 ac 00 00 00    	mov    DWORD PTR [eax+0xac],ecx
10005ef5:	8b 92 74 02 00 00    	mov    edx,DWORD PTR [edx+0x274]
10005efb:	89 90 b0 00 00 00    	mov    DWORD PTR [eax+0xb0],edx
10005f01:	31 c0                	xor    eax,eax
10005f03:	31 d2                	xor    edx,edx
10005f05:	c3                   	ret    

10005f06 <NiLinkCommandUpdateFlags(unsigned long, NiLinkWindowStruct*)>:
10005f06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10005f0a:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
10005f10:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [eax+0xb4]
10005f16:	89 82 8c 02 00 00    	mov    DWORD PTR [edx+0x28c],eax
10005f1c:	31 c0                	xor    eax,eax
10005f1e:	31 d2                	xor    edx,edx
10005f20:	c3                   	ret    

10005f21 <NiLinkCommandBeTheDesktop(unsigned long, unsigned char*)>:
10005f21:	31 d2                	xor    edx,edx
10005f23:	b8 01 00 00 00       	mov    eax,0x1
10005f28:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10005f2a: R_386_32	desktopWindowDummy
10005f2f:	75 0d                	jne    10005f3e <NiLinkCommandBeTheDesktop(unsigned long, unsigned char*)+0x1d>
10005f31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10005f35:	31 d2                	xor    edx,edx
10005f37:	a3 00 00 00 00       	mov    ds:0x0,eax	10005f38: R_386_32	desktopWindowDummy
10005f3c:	31 c0                	xor    eax,eax
10005f3e:	c3                   	ret    

10005f3f <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)>:
10005f3f:	53                   	push   ebx
10005f40:	83 ec 08             	sub    esp,0x8
10005f43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10005f47:	a1 00 00 00 00       	mov    eax,ds:0x0	10005f48: R_386_32	desktop
10005f4c:	85 d2                	test   edx,edx
10005f4e:	75 0c                	jne    10005f5c <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x1d>
10005f50:	c7 80 20 04 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x420],0x0
10005f5a:	eb 20                	jmp    10005f7c <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x3d>
10005f5c:	83 fa 01             	cmp    edx,0x1
10005f5f:	75 0c                	jne    10005f6d <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x2e>
10005f61:	c7 80 20 04 00 00 00 02 00 00 	mov    DWORD PTR [eax+0x420],0x200
10005f6b:	eb 0f                	jmp    10005f7c <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x3d>
10005f6d:	83 fa 02             	cmp    edx,0x2
10005f70:	75 0a                	jne    10005f7c <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x3d>
10005f72:	c7 80 20 04 00 00 00 01 00 00 	mov    DWORD PTR [eax+0x420],0x100
10005f7c:	8b 88 14 04 00 00    	mov    ecx,DWORD PTR [eax+0x414]
10005f82:	8b 90 18 04 00 00    	mov    edx,DWORD PTR [eax+0x418]
10005f88:	53                   	push   ebx
10005f89:	53                   	push   ebx
10005f8a:	8d 59 20             	lea    ebx,[ecx+0x20]
10005f8d:	6a 00                	push   0x0
10005f8f:	53                   	push   ebx
10005f90:	51                   	push   ecx
10005f91:	8d 4a 20             	lea    ecx,[edx+0x20]
10005f94:	51                   	push   ecx
10005f95:	52                   	push   edx
10005f96:	50                   	push   eax
10005f97:	e8 fc ff ff ff       	call   10005f98 <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x59>	10005f98: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10005f9c:	83 c4 14             	add    esp,0x14
10005f9f:	a1 00 00 00 00       	mov    eax,ds:0x0	10005fa0: R_386_32	desktop
10005fa4:	8b 10                	mov    edx,DWORD PTR [eax]
10005fa6:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
10005fac:	8b 19                	mov    ebx,DWORD PTR [ecx]
10005fae:	6a 00                	push   0x0
10005fb0:	8b 90 20 04 00 00    	mov    edx,DWORD PTR [eax+0x420]
10005fb6:	81 c2 00 00 00 00    	add    edx,0x0	10005fb8: R_386_32	___mouse_data
10005fbc:	52                   	push   edx
10005fbd:	ff b0 18 04 00 00    	push   DWORD PTR [eax+0x418]
10005fc3:	ff b0 14 04 00 00    	push   DWORD PTR [eax+0x414]
10005fc9:	51                   	push   ecx
10005fca:	ff 53 30             	call   DWORD PTR [ebx+0x30]
10005fcd:	31 c0                	xor    eax,eax
10005fcf:	31 d2                	xor    edx,edx
10005fd1:	83 c4 28             	add    esp,0x28
10005fd4:	5b                   	pop    ebx
10005fd5:	c3                   	ret    

10005fd6 <NiSystemCallHandler(regs*)>:
10005fd6:	53                   	push   ebx
10005fd7:	83 ec 08             	sub    esp,0x8
10005fda:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10005fde:	fa                   	cli    
10005fdf:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	10005fe1: R_386_32	irqDisableCounter
10005fe5:	8b 59 20             	mov    ebx,DWORD PTR [ecx+0x20]
10005fe8:	83 fb 08             	cmp    ebx,0x8
10005feb:	0f 84 f5 00 00 00    	je     100060e6 <NiSystemCallHandler(regs*)+0x110>
10005ff1:	77 4f                	ja     10006042 <NiSystemCallHandler(regs*)+0x6c>
10005ff3:	83 fb 04             	cmp    ebx,0x4
10005ff6:	0f 84 b5 00 00 00    	je     100060b1 <NiSystemCallHandler(regs*)+0xdb>
10005ffc:	77 13                	ja     10006011 <NiSystemCallHandler(regs*)+0x3b>
10005ffe:	85 db                	test   ebx,ebx
10006000:	0f 84 87 00 00 00    	je     1000608d <NiSystemCallHandler(regs*)+0xb7>
10006006:	83 fb 03             	cmp    ebx,0x3
10006009:	0f 84 90 00 00 00    	je     1000609f <NiSystemCallHandler(regs*)+0xc9>
1000600f:	eb 72                	jmp    10006083 <NiSystemCallHandler(regs*)+0xad>
10006011:	83 fb 06             	cmp    ebx,0x6
10006014:	0f 84 a9 00 00 00    	je     100060c3 <NiSystemCallHandler(regs*)+0xed>
1000601a:	8b 41 24             	mov    eax,DWORD PTR [ecx+0x24]
1000601d:	0f 87 af 00 00 00    	ja     100060d2 <NiSystemCallHandler(regs*)+0xfc>
10006023:	83 ec 0c             	sub    esp,0xc
10006026:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
1000602c:	53                   	push   ebx
1000602d:	e8 fc ff ff ff       	call   1000602e <NiSystemCallHandler(regs*)+0x58>	1000602e: R_386_PC32	NIWindow::request()
10006032:	89 1c 24             	mov    DWORD PTR [esp],ebx
10006035:	e8 fc ff ff ff       	call   10006036 <NiSystemCallHandler(regs*)+0x60>	10006036: R_386_PC32	NIWindow::drawBasicWindow()
1000603a:	83 c4 10             	add    esp,0x10
1000603d:	e9 f9 00 00 00       	jmp    1000613b <NiSystemCallHandler(regs*)+0x165>
10006042:	83 fb 0b             	cmp    ebx,0xb
10006045:	0f 84 c9 00 00 00    	je     10006114 <NiSystemCallHandler(regs*)+0x13e>
1000604b:	77 14                	ja     10006061 <NiSystemCallHandler(regs*)+0x8b>
1000604d:	83 fb 09             	cmp    ebx,0x9
10006050:	0f 84 9f 00 00 00    	je     100060f5 <NiSystemCallHandler(regs*)+0x11f>
10006056:	83 fb 0a             	cmp    ebx,0xa
10006059:	0f 84 a5 00 00 00    	je     10006104 <NiSystemCallHandler(regs*)+0x12e>
1000605f:	eb 22                	jmp    10006083 <NiSystemCallHandler(regs*)+0xad>
10006061:	83 fb 0d             	cmp    ebx,0xd
10006064:	0f 84 d7 00 00 00    	je     10006141 <NiSystemCallHandler(regs*)+0x16b>
1000606a:	0f 82 b3 00 00 00    	jb     10006123 <NiSystemCallHandler(regs*)+0x14d>
10006070:	31 d2                	xor    edx,edx
10006072:	b8 04 00 00 00       	mov    eax,0x4
10006077:	81 fb 96 78 34 a5    	cmp    ebx,0xa5347896
1000607d:	0f 84 ce 00 00 00    	je     10006151 <NiSystemCallHandler(regs*)+0x17b>
10006083:	83 c8 ff             	or     eax,0xffffffff
10006086:	89 c2                	mov    edx,eax
10006088:	e9 c4 00 00 00       	jmp    10006151 <NiSystemCallHandler(regs*)+0x17b>
1000608d:	50                   	push   eax
1000608e:	50                   	push   eax
1000608f:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10006092:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10006095:	e8 fc ff ff ff       	call   10006096 <NiSystemCallHandler(regs*)+0xc0>	10006096: R_386_PC32	NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)
1000609a:	e9 af 00 00 00       	jmp    1000614e <NiSystemCallHandler(regs*)+0x178>
1000609f:	53                   	push   ebx
100060a0:	53                   	push   ebx
100060a1:	ff 71 24             	push   DWORD PTR [ecx+0x24]
100060a4:	ff 71 28             	push   DWORD PTR [ecx+0x28]
100060a7:	e8 fc ff ff ff       	call   100060a8 <NiSystemCallHandler(regs*)+0xd2>	100060a8: R_386_PC32	NiLinkCommandDestroyWindow(unsigned long, NiLinkWindowStruct*)
100060ac:	e9 9d 00 00 00       	jmp    1000614e <NiSystemCallHandler(regs*)+0x178>
100060b1:	52                   	push   edx
100060b2:	52                   	push   edx
100060b3:	ff 71 24             	push   DWORD PTR [ecx+0x24]
100060b6:	ff 71 28             	push   DWORD PTR [ecx+0x28]
100060b9:	e8 fc ff ff ff       	call   100060ba <NiSystemCallHandler(regs*)+0xe4>	100060ba: R_386_PC32	NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)
100060be:	e9 8b 00 00 00       	jmp    1000614e <NiSystemCallHandler(regs*)+0x178>
100060c3:	50                   	push   eax
100060c4:	50                   	push   eax
100060c5:	ff 71 24             	push   DWORD PTR [ecx+0x24]
100060c8:	ff 71 28             	push   DWORD PTR [ecx+0x28]
100060cb:	e8 fc ff ff ff       	call   100060cc <NiSystemCallHandler(regs*)+0xf6>	100060cc: R_386_PC32	NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)
100060d0:	eb 7c                	jmp    1000614e <NiSystemCallHandler(regs*)+0x178>
100060d2:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
100060d8:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [eax+0xb4]
100060de:	89 82 8c 02 00 00    	mov    DWORD PTR [edx+0x28c],eax
100060e4:	eb 55                	jmp    1000613b <NiSystemCallHandler(regs*)+0x165>
100060e6:	50                   	push   eax
100060e7:	50                   	push   eax
100060e8:	ff 71 24             	push   DWORD PTR [ecx+0x24]
100060eb:	ff 71 28             	push   DWORD PTR [ecx+0x28]
100060ee:	e8 fc ff ff ff       	call   100060ef <NiSystemCallHandler(regs*)+0x119>	100060ef: R_386_PC32	NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)
100060f3:	eb 59                	jmp    1000614e <NiSystemCallHandler(regs*)+0x178>
100060f5:	50                   	push   eax
100060f6:	50                   	push   eax
100060f7:	ff 71 24             	push   DWORD PTR [ecx+0x24]
100060fa:	ff 71 28             	push   DWORD PTR [ecx+0x28]
100060fd:	e8 fc ff ff ff       	call   100060fe <NiSystemCallHandler(regs*)+0x128>	100060fe: R_386_PC32	NiLinkCommandReadFlags(unsigned long, NiLinkWindowStruct*)
10006102:	eb 4a                	jmp    1000614e <NiSystemCallHandler(regs*)+0x178>
10006104:	50                   	push   eax
10006105:	6a 01                	push   0x1
10006107:	ff 71 24             	push   DWORD PTR [ecx+0x24]
1000610a:	ff 71 28             	push   DWORD PTR [ecx+0x28]
1000610d:	e8 fc ff ff ff       	call   1000610e <NiSystemCallHandler(regs*)+0x138>	1000610e: R_386_PC32	NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)
10006112:	eb 3a                	jmp    1000614e <NiSystemCallHandler(regs*)+0x178>
10006114:	50                   	push   eax
10006115:	50                   	push   eax
10006116:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10006119:	ff 71 28             	push   DWORD PTR [ecx+0x28]
1000611c:	e8 fc ff ff ff       	call   1000611d <NiSystemCallHandler(regs*)+0x147>	1000611d: R_386_PC32	NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)
10006121:	eb 2b                	jmp    1000614e <NiSystemCallHandler(regs*)+0x178>
10006123:	31 d2                	xor    edx,edx
10006125:	b8 01 00 00 00       	mov    eax,0x1
1000612a:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	1000612c: R_386_32	desktopWindowDummy
10006131:	75 1e                	jne    10006151 <NiSystemCallHandler(regs*)+0x17b>
10006133:	8b 41 24             	mov    eax,DWORD PTR [ecx+0x24]
10006136:	a3 00 00 00 00       	mov    ds:0x0,eax	10006137: R_386_32	desktopWindowDummy
1000613b:	31 c0                	xor    eax,eax
1000613d:	31 d2                	xor    edx,edx
1000613f:	eb 10                	jmp    10006151 <NiSystemCallHandler(regs*)+0x17b>
10006141:	50                   	push   eax
10006142:	50                   	push   eax
10006143:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10006146:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10006149:	e8 fc ff ff ff       	call   1000614a <NiSystemCallHandler(regs*)+0x174>	1000614a: R_386_PC32	NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)
1000614e:	83 c4 10             	add    esp,0x10
10006151:	f0 ff 0d 00 00 00 00 	lock dec DWORD PTR ds:0x0	10006154: R_386_32	irqDisableCounter
10006158:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	1000615a: R_386_32	irqDisableCounter
1000615f:	75 01                	jne    10006162 <NiSystemCallHandler(regs*)+0x18c>
10006161:	fb                   	sti    
10006162:	83 c4 08             	add    esp,0x8
10006165:	5b                   	pop    ebx
10006166:	c3                   	ret    
10006167:	90                   	nop

10006168 <NIWindow::postEvent(NiEvent)>:
10006168:	55                   	push   ebp
10006169:	57                   	push   edi
1000616a:	56                   	push   esi
1000616b:	53                   	push   ebx
1000616c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10006170:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
10006173:	83 fd 18             	cmp    ebp,0x18
10006176:	74 25                	je     1000619d <NIWindow::postEvent(NiEvent)+0x35>
10006178:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
1000617b:	8d 74 24 18          	lea    esi,[esp+0x18]
1000617f:	6b d0 18             	imul   edx,eax,0x18
10006182:	b9 06 00 00 00       	mov    ecx,0x6
10006187:	8d 7c 13 1c          	lea    edi,[ebx+edx*1+0x1c]
1000618b:	40                   	inc    eax
1000618c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000618e:	99                   	cdq    
1000618f:	b9 18 00 00 00       	mov    ecx,0x18
10006194:	45                   	inc    ebp
10006195:	f7 f9                	idiv   ecx
10006197:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
1000619a:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
1000619d:	5b                   	pop    ebx
1000619e:	5e                   	pop    esi
1000619f:	5f                   	pop    edi
100061a0:	5d                   	pop    ebp
100061a1:	c3                   	ret    

100061a2 <NIWindow::getEventCount()>:
100061a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100061a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100061a9:	c3                   	ret    

100061aa <NIWindow::grabEvent()>:
100061aa:	57                   	push   edi
100061ab:	b9 06 00 00 00       	mov    ecx,0x6
100061b0:	56                   	push   esi
100061b1:	53                   	push   ebx
100061b2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100061b6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
100061ba:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
100061bd:	6b c2 18             	imul   eax,edx,0x18
100061c0:	01 d8                	add    eax,ebx
100061c2:	8d 70 1c             	lea    esi,[eax+0x1c]
100061c5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100061c7:	b9 18 00 00 00       	mov    ecx,0x18
100061cc:	81 60 20 ff 1f 00 80 	and    DWORD PTR [eax+0x20],0x80001fff
100061d3:	8d 42 01             	lea    eax,[edx+0x1]
100061d6:	ff 4b 10             	dec    DWORD PTR [ebx+0x10]
100061d9:	99                   	cdq    
100061da:	f7 f9                	idiv   ecx
100061dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100061e0:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
100061e3:	5b                   	pop    ebx
100061e4:	5e                   	pop    esi
100061e5:	5f                   	pop    edi
100061e6:	c2 04 00             	ret    0x4
100061e9:	90                   	nop

100061ea <NIWindow::invalidate()>:
100061ea:	53                   	push   ebx
100061eb:	83 ec 08             	sub    esp,0x8
100061ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100061f2:	80 bb 5c 02 00 00 00 	cmp    BYTE PTR [ebx+0x25c],0x0
100061f9:	74 28                	je     10006223 <NIWindow::invalidate()+0x39>
100061fb:	83 bb 64 02 00 00 00 	cmp    DWORD PTR [ebx+0x264],0x0
10006202:	74 1f                	je     10006223 <NIWindow::invalidate()+0x39>
10006204:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10006207:	85 c0                	test   eax,eax
10006209:	74 18                	je     10006223 <NIWindow::invalidate()+0x39>
1000620b:	83 ec 0c             	sub    esp,0xc
1000620e:	50                   	push   eax
1000620f:	e8 fc ff ff ff       	call   10006210 <NIWindow::invalidate()+0x26>	10006210: R_386_PC32	free
10006214:	59                   	pop    ecx
10006215:	ff b3 64 02 00 00    	push   DWORD PTR [ebx+0x264]
1000621b:	e8 fc ff ff ff       	call   1000621c <NIWindow::invalidate()+0x32>	1000621c: R_386_PC32	free
10006220:	83 c4 10             	add    esp,0x10
10006223:	c7 83 64 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x264],0x0
1000622d:	c7 83 60 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x260],0x0
10006237:	c6 83 5c 02 00 00 00 	mov    BYTE PTR [ebx+0x25c],0x0
1000623e:	c6 43 0c 00          	mov    BYTE PTR [ebx+0xc],0x0
10006242:	83 8b 8c 02 00 00 10 	or     DWORD PTR [ebx+0x28c],0x10
10006249:	83 c4 08             	add    esp,0x8
1000624c:	5b                   	pop    ebx
1000624d:	c3                   	ret    

1000624e <NIWindow::putpixel(int, int, unsigned int)>:
1000624e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
10006252:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10006256:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
1000625a:	0f af 82 70 02 00 00 	imul   eax,DWORD PTR [edx+0x270]
10006261:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
10006264:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
10006268:	89 0c 82             	mov    DWORD PTR [edx+eax*4],ecx
1000626b:	c3                   	ret    

1000626c <NIWindow::drawBasicWindow()>:
1000626c:	55                   	push   ebp
1000626d:	57                   	push   edi
1000626e:	56                   	push   esi
1000626f:	31 f6                	xor    esi,esi
10006271:	53                   	push   ebx
10006272:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
10006276:	39 b5 74 02 00 00    	cmp    DWORD PTR [ebp+0x274],esi
1000627c:	7e 31                	jle    100062af <NIWindow::drawBasicWindow()+0x43>
1000627e:	31 db                	xor    ebx,ebx
10006280:	83 fe 19             	cmp    esi,0x19
10006283:	0f 9e c3             	setle  bl
10006286:	31 ff                	xor    edi,edi
10006288:	4b                   	dec    ebx
10006289:	81 e3 d5 d4 d4 ff    	and    ebx,0xffd4d4d5
1000628f:	81 c3 ff ff ff 00    	add    ebx,0xffffff
10006295:	39 bd 70 02 00 00    	cmp    DWORD PTR [ebp+0x270],edi
1000629b:	7e 0f                	jle    100062ac <NIWindow::drawBasicWindow()+0x40>
1000629d:	53                   	push   ebx
1000629e:	56                   	push   esi
1000629f:	57                   	push   edi
100062a0:	47                   	inc    edi
100062a1:	55                   	push   ebp
100062a2:	e8 fc ff ff ff       	call   100062a3 <NIWindow::drawBasicWindow()+0x37>	100062a3: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100062a7:	83 c4 10             	add    esp,0x10
100062aa:	eb e9                	jmp    10006295 <NIWindow::drawBasicWindow()+0x29>
100062ac:	46                   	inc    esi
100062ad:	eb c7                	jmp    10006276 <NIWindow::drawBasicWindow()+0xa>
100062af:	5b                   	pop    ebx
100062b0:	5e                   	pop    esi
100062b1:	5f                   	pop    edi
100062b2:	5d                   	pop    ebp
100062b3:	c3                   	ret    

100062b4 <NIWindow::rerender()>:
100062b4:	57                   	push   edi
100062b5:	56                   	push   esi
100062b6:	53                   	push   ebx
100062b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100062bb:	80 bb 5c 02 00 00 00 	cmp    BYTE PTR [ebx+0x25c],0x0
100062c2:	74 0c                	je     100062d0 <NIWindow::rerender()+0x1c>
100062c4:	83 ec 0c             	sub    esp,0xc
100062c7:	53                   	push   ebx
100062c8:	e8 fc ff ff ff       	call   100062c9 <NIWindow::rerender()+0x15>	100062c9: R_386_PC32	NIWindow::invalidate()
100062cd:	83 c4 10             	add    esp,0x10
100062d0:	8b b3 74 02 00 00    	mov    esi,DWORD PTR [ebx+0x274]
100062d6:	83 ec 0c             	sub    esp,0xc
100062d9:	89 b3 60 02 00 00    	mov    DWORD PTR [ebx+0x260],esi
100062df:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
100062e6:	50                   	push   eax
100062e7:	e8 fc ff ff ff       	call   100062e8 <NIWindow::rerender()+0x34>	100062e8: R_386_PC32	malloc
100062ec:	0f af b3 70 02 00 00 	imul   esi,DWORD PTR [ebx+0x270]
100062f3:	89 83 64 02 00 00    	mov    DWORD PTR [ebx+0x264],eax
100062f9:	0f af 73 04          	imul   esi,DWORD PTR [ebx+0x4]
100062fd:	89 34 24             	mov    DWORD PTR [esp],esi
10006300:	e8 fc ff ff ff       	call   10006301 <NIWindow::rerender()+0x4d>	10006301: R_386_PC32	malloc
10006305:	83 c4 10             	add    esp,0x10
10006308:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
1000630b:	31 c0                	xor    eax,eax
1000630d:	39 83 60 02 00 00    	cmp    DWORD PTR [ebx+0x260],eax
10006313:	0f 8e 91 00 00 00    	jle    100063aa <NIWindow::rerender()+0xf6>
10006319:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10006320:	8b 8b 64 02 00 00    	mov    ecx,DWORD PTR [ebx+0x264]
10006326:	01 d1                	add    ecx,edx
10006328:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
1000632f:	75 61                	jne    10006392 <NIWindow::rerender()+0xde>
10006331:	f6 83 8c 02 00 00 80 	test   BYTE PTR [ebx+0x28c],0x80
10006338:	75 58                	jne    10006392 <NIWindow::rerender()+0xde>
1000633a:	83 f8 06             	cmp    eax,0x6
1000633d:	7f 1e                	jg     1000635d <NIWindow::rerender()+0xa9>
1000633f:	8b 34 85 00 00 00 00 	mov    esi,DWORD PTR [eax*4+0x0]	10006342: R_386_32	curveLookup7
10006346:	66 89 31             	mov    WORD PTR [ecx],si
10006349:	8b 8b 64 02 00 00    	mov    ecx,DWORD PTR [ebx+0x264]
1000634f:	8b 34 85 00 00 00 00 	mov    esi,DWORD PTR [eax*4+0x0]	10006352: R_386_32	curveLookup7
10006356:	66 89 74 11 02       	mov    WORD PTR [ecx+edx*1+0x2],si
1000635b:	eb 47                	jmp    100063a4 <NIWindow::rerender()+0xf0>
1000635d:	8b b3 74 02 00 00    	mov    esi,DWORD PTR [ebx+0x274]
10006363:	8d 7e fa             	lea    edi,[esi-0x6]
10006366:	39 c7                	cmp    edi,eax
10006368:	7f 28                	jg     10006392 <NIWindow::rerender()+0xde>
1000636a:	29 c6                	sub    esi,eax
1000636c:	8b 34 b5 00 00 00 00 	mov    esi,DWORD PTR [esi*4+0x0]	1000636f: R_386_32	curveLookup7
10006373:	66 89 31             	mov    WORD PTR [ecx],si
10006376:	8b 8b 74 02 00 00    	mov    ecx,DWORD PTR [ebx+0x274]
1000637c:	8b b3 64 02 00 00    	mov    esi,DWORD PTR [ebx+0x264]
10006382:	29 c1                	sub    ecx,eax
10006384:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10006387: R_386_32	curveLookup7
1000638b:	66 89 4c 16 02       	mov    WORD PTR [esi+edx*1+0x2],cx
10006390:	eb 12                	jmp    100063a4 <NIWindow::rerender()+0xf0>
10006392:	66 c7 01 00 00       	mov    WORD PTR [ecx],0x0
10006397:	8b 8b 64 02 00 00    	mov    ecx,DWORD PTR [ebx+0x264]
1000639d:	66 c7 44 11 02 00 00 	mov    WORD PTR [ecx+edx*1+0x2],0x0
100063a4:	40                   	inc    eax
100063a5:	e9 63 ff ff ff       	jmp    1000630d <NIWindow::rerender()+0x59>
100063aa:	8b 83 8c 02 00 00    	mov    eax,DWORD PTR [ebx+0x28c]
100063b0:	c6 83 5c 02 00 00 01 	mov    BYTE PTR [ebx+0x25c],0x1
100063b7:	a8 02                	test   al,0x2
100063b9:	75 31                	jne    100063ec <NIWindow::rerender()+0x138>
100063bb:	a8 04                	test   al,0x4
100063bd:	74 18                	je     100063d7 <NIWindow::rerender()+0x123>
100063bf:	8b 8b 74 02 00 00    	mov    ecx,DWORD PTR [ebx+0x274]
100063c5:	31 c0                	xor    eax,eax
100063c7:	0f af 8b 70 02 00 00 	imul   ecx,DWORD PTR [ebx+0x270]
100063ce:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
100063d1:	0f af 4b 04          	imul   ecx,DWORD PTR [ebx+0x4]
100063d5:	f3 aa                	rep stos BYTE PTR es:[edi],al
100063d7:	f6 83 8c 02 00 00 08 	test   BYTE PTR [ebx+0x28c],0x8
100063de:	74 0c                	je     100063ec <NIWindow::rerender()+0x138>
100063e0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
100063e4:	5b                   	pop    ebx
100063e5:	5e                   	pop    esi
100063e6:	5f                   	pop    edi
100063e7:	e9 80 fe ff ff       	jmp    1000626c <NIWindow::drawBasicWindow()>
100063ec:	5b                   	pop    ebx
100063ed:	5e                   	pop    esi
100063ee:	5f                   	pop    edi
100063ef:	c3                   	ret    

100063f0 <NIWindow::changeContext(NIContext*, int, int)>:
100063f0:	55                   	push   ebp
100063f1:	57                   	push   edi
100063f2:	56                   	push   esi
100063f3:	53                   	push   ebx
100063f4:	83 ec 18             	sub    esp,0x18
100063f7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
100063fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
100063ff:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
10006403:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10006407:	53                   	push   ebx
10006408:	e8 fc ff ff ff       	call   10006409 <NIWindow::changeContext(NIContext*, int, int)+0x19>	10006409: R_386_PC32	NIWindow::invalidate()
1000640d:	89 33                	mov    DWORD PTR [ebx],esi
1000640f:	89 ab 68 02 00 00    	mov    DWORD PTR [ebx+0x268],ebp
10006415:	89 bb 6c 02 00 00    	mov    DWORD PTR [ebx+0x26c],edi
1000641b:	83 c4 10             	add    esp,0x10
1000641e:	8b 86 18 04 00 00    	mov    eax,DWORD PTR [esi+0x418]
10006424:	83 f8 08             	cmp    eax,0x8
10006427:	7f 09                	jg     10006432 <NIWindow::changeContext(NIContext*, int, int)+0x42>
10006429:	c7 43 04 01 00 00 00 	mov    DWORD PTR [ebx+0x4],0x1
10006430:	eb 15                	jmp    10006447 <NIWindow::changeContext(NIContext*, int, int)+0x57>
10006432:	83 f8 10             	cmp    eax,0x10
10006435:	7f 09                	jg     10006440 <NIWindow::changeContext(NIContext*, int, int)+0x50>
10006437:	c7 43 04 02 00 00 00 	mov    DWORD PTR [ebx+0x4],0x2
1000643e:	eb 07                	jmp    10006447 <NIWindow::changeContext(NIContext*, int, int)+0x57>
10006440:	c7 43 04 04 00 00 00 	mov    DWORD PTR [ebx+0x4],0x4
10006447:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
1000644b:	83 c4 0c             	add    esp,0xc
1000644e:	5b                   	pop    ebx
1000644f:	5e                   	pop    esi
10006450:	5f                   	pop    edi
10006451:	5d                   	pop    ebp
10006452:	e9 5d fe ff ff       	jmp    100062b4 <NIWindow::rerender()>
10006457:	90                   	nop

10006458 <NIWindow::NIWindow(NIContext*, int, int, int, int)>:
10006458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000645c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10006460:	c6 80 78 02 00 00 00 	mov    BYTE PTR [eax+0x278],0x0
10006467:	89 90 70 02 00 00    	mov    DWORD PTR [eax+0x270],edx
1000646d:	c7 80 8c 02 00 00 00 02 00 00 	mov    DWORD PTR [eax+0x28c],0x200
10006477:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
1000647b:	c6 80 5c 02 00 00 00 	mov    BYTE PTR [eax+0x25c],0x0
10006482:	89 90 74 02 00 00    	mov    DWORD PTR [eax+0x274],edx
10006488:	c7 80 64 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x264],0x0
10006492:	c7 80 60 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x260],0x0
1000649c:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
100064a3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
100064aa:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
100064b1:	e9 3a ff ff ff       	jmp    100063f0 <NIWindow::changeContext(NIContext*, int, int)>

100064b6 <NIWindow::request()>:
100064b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100064ba:	80 b8 5c 02 00 00 00 	cmp    BYTE PTR [eax+0x25c],0x0
100064c1:	75 05                	jne    100064c8 <NIWindow::request()+0x12>
100064c3:	e9 ec fd ff ff       	jmp    100062b4 <NIWindow::rerender()>
100064c8:	c3                   	ret    
100064c9:	90                   	nop

100064ca <NIWindow::SHADOW_TEST()>:
100064ca:	55                   	push   ebp
100064cb:	57                   	push   edi
100064cc:	56                   	push   esi
100064cd:	53                   	push   ebx
100064ce:	83 ec 28             	sub    esp,0x28
100064d1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
100064d5:	53                   	push   ebx
100064d6:	e8 fc ff ff ff       	call   100064d7 <NIWindow::SHADOW_TEST()+0xd>	100064d7: R_386_PC32	NIWindow::request()
100064db:	83 c4 10             	add    esp,0x10
100064de:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100064e4:	39 83 60 02 00 00    	cmp    DWORD PTR [ebx+0x260],eax
100064ea:	74 10                	je     100064fc <NIWindow::SHADOW_TEST()+0x32>
100064ec:	83 ec 0c             	sub    esp,0xc
100064ef:	68 d1 6d 00 10       	push   0x10006dd1	100064f0: R_386_32	.text
100064f4:	e8 fc ff ff ff       	call   100064f5 <NIWindow::SHADOW_TEST()+0x2b>	100064f5: R_386_PC32	KePanic(char const*)
100064f9:	83 c4 10             	add    esp,0x10
100064fc:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
10006500:	0f 85 3a 01 00 00    	jne    10006640 <NIWindow::SHADOW_TEST()+0x176>
10006506:	c7 44 24 04 05 00 00 00 	mov    DWORD PTR [esp+0x4],0x5
1000650e:	31 ff                	xor    edi,edi
10006510:	39 bb 74 02 00 00    	cmp    DWORD PTR [ebx+0x274],edi
10006516:	0f 8e 24 01 00 00    	jle    10006640 <NIWindow::SHADOW_TEST()+0x176>
1000651c:	8b 83 64 02 00 00    	mov    eax,DWORD PTR [ebx+0x264]
10006522:	8d 04 b8             	lea    eax,[eax+edi*4]
10006525:	0f b7 30             	movzx  esi,WORD PTR [eax]
10006528:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
1000652c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
10006530:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10006534:	89 34 24             	mov    DWORD PTR [esp],esi
10006537:	8b ab 70 02 00 00    	mov    ebp,DWORD PTR [ebx+0x270]
1000653d:	8b 8b 74 02 00 00    	mov    ecx,DWORD PTR [ebx+0x274]
10006543:	2b 6c 24 0c          	sub    ebp,DWORD PTR [esp+0xc]
10006547:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
1000654a:	0f 8e da 00 00 00    	jle    1000662a <NIWindow::SHADOW_TEST()+0x160>
10006550:	83 ff 05             	cmp    edi,0x5
10006553:	7e 1f                	jle    10006574 <NIWindow::SHADOW_TEST()+0xaa>
10006555:	8d 41 fb             	lea    eax,[ecx-0x5]
10006558:	39 f8                	cmp    eax,edi
1000655a:	7e 18                	jle    10006574 <NIWindow::SHADOW_TEST()+0xaa>
1000655c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10006560:	83 c0 05             	add    eax,0x5
10006563:	3b 04 24             	cmp    eax,DWORD PTR [esp]
10006566:	7d 0c                	jge    10006574 <NIWindow::SHADOW_TEST()+0xaa>
10006568:	8d 45 fb             	lea    eax,[ebp-0x5]
1000656b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
1000656e:	0f 8f ae 00 00 00    	jg     10006622 <NIWindow::SHADOW_TEST()+0x158>
10006574:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
10006578:	be ea 01 00 00       	mov    esi,0x1ea
1000657d:	29 f9                	sub    ecx,edi
1000657f:	89 f0                	mov    eax,esi
10006581:	83 c1 04             	add    ecx,0x4
10006584:	99                   	cdq    
10006585:	f7 f9                	idiv   ecx
10006587:	89 c1                	mov    ecx,eax
10006589:	89 f0                	mov    eax,esi
1000658b:	99                   	cdq    
1000658c:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
10006590:	83 f8 0a             	cmp    eax,0xa
10006593:	7d 05                	jge    1000659a <NIWindow::SHADOW_TEST()+0xd0>
10006595:	b8 0a 00 00 00       	mov    eax,0xa
1000659a:	39 c1                	cmp    ecx,eax
1000659c:	7d 02                	jge    100065a0 <NIWindow::SHADOW_TEST()+0xd6>
1000659e:	89 c1                	mov    ecx,eax
100065a0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
100065a3:	b8 ea 01 00 00       	mov    eax,0x1ea
100065a8:	83 c5 04             	add    ebp,0x4
100065ab:	99                   	cdq    
100065ac:	f7 fd                	idiv   ebp
100065ae:	89 c6                	mov    esi,eax
100065b0:	83 f8 0a             	cmp    eax,0xa
100065b3:	7d 05                	jge    100065ba <NIWindow::SHADOW_TEST()+0xf0>
100065b5:	be 0a 00 00 00       	mov    esi,0xa
100065ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
100065bd:	8d 68 05             	lea    ebp,[eax+0x5]
100065c0:	b8 ea 01 00 00       	mov    eax,0x1ea
100065c5:	99                   	cdq    
100065c6:	f7 fd                	idiv   ebp
100065c8:	39 c6                	cmp    esi,eax
100065ca:	7d 02                	jge    100065ce <NIWindow::SHADOW_TEST()+0x104>
100065cc:	89 c6                	mov    esi,eax
100065ce:	89 f0                	mov    eax,esi
100065d0:	89 ca                	mov    edx,ecx
100065d2:	0f af c6             	imul   eax,esi
100065d5:	0f af d1             	imul   edx,ecx
100065d8:	0f af f1             	imul   esi,ecx
100065db:	01 d0                	add    eax,edx
100065dd:	8d 04 c6             	lea    eax,[esi+eax*8]
100065e0:	c1 f8 08             	sar    eax,0x8
100065e3:	83 f8 66             	cmp    eax,0x66
100065e6:	7e 4c                	jle    10006634 <NIWindow::SHADOW_TEST()+0x16a>
100065e8:	8d 50 9a             	lea    edx,[eax-0x66]
100065eb:	d1 fa                	sar    edx,1
100065ed:	8d 42 66             	lea    eax,[edx+0x66]
100065f0:	83 f8 73             	cmp    eax,0x73
100065f3:	7e 3f                	jle    10006634 <NIWindow::SHADOW_TEST()+0x16a>
100065f5:	83 ea 0d             	sub    edx,0xd
100065f8:	c1 fa 02             	sar    edx,0x2
100065fb:	8d 42 73             	lea    eax,[edx+0x73]
100065fe:	83 f8 7f             	cmp    eax,0x7f
10006601:	7f 1f                	jg     10006622 <NIWindow::SHADOW_TEST()+0x158>
10006603:	50                   	push   eax
10006604:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
1000660a:	01 f8                	add    eax,edi
1000660c:	50                   	push   eax
1000660d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10006611:	03 83 68 02 00 00    	add    eax,DWORD PTR [ebx+0x268]
10006617:	50                   	push   eax
10006618:	ff 33                	push   DWORD PTR [ebx]
1000661a:	e8 fc ff ff ff       	call   1000661b <NIWindow::SHADOW_TEST()+0x151>	1000661b: R_386_PC32	NIContext::drvDarken4(int, int, int)
1000661f:	83 c4 10             	add    esp,0x10
10006622:	ff 04 24             	inc    DWORD PTR [esp]
10006625:	e9 0d ff ff ff       	jmp    10006537 <NIWindow::SHADOW_TEST()+0x6d>
1000662a:	47                   	inc    edi
1000662b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
1000662f:	e9 dc fe ff ff       	jmp    10006510 <NIWindow::SHADOW_TEST()+0x46>
10006634:	83 f8 0a             	cmp    eax,0xa
10006637:	7d ca                	jge    10006603 <NIWindow::SHADOW_TEST()+0x139>
10006639:	b8 0a 00 00 00       	mov    eax,0xa
1000663e:	eb c3                	jmp    10006603 <NIWindow::SHADOW_TEST()+0x139>
10006640:	83 c4 1c             	add    esp,0x1c
10006643:	5b                   	pop    ebx
10006644:	5e                   	pop    esi
10006645:	5f                   	pop    edi
10006646:	5d                   	pop    ebp
10006647:	c3                   	ret    

10006648 <NIWindow::realdraw()>:
10006648:	55                   	push   ebp
10006649:	57                   	push   edi
1000664a:	56                   	push   esi
1000664b:	53                   	push   ebx
1000664c:	83 ec 18             	sub    esp,0x18
1000664f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10006653:	53                   	push   ebx
10006654:	e8 fc ff ff ff       	call   10006655 <NIWindow::realdraw()+0xd>	10006655: R_386_PC32	NIWindow::request()
10006659:	83 c4 10             	add    esp,0x10
1000665c:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006662:	39 83 60 02 00 00    	cmp    DWORD PTR [ebx+0x260],eax
10006668:	74 10                	je     1000667a <NIWindow::realdraw()+0x32>
1000666a:	83 ec 0c             	sub    esp,0xc
1000666d:	68 d1 6d 00 10       	push   0x10006dd1	1000666e: R_386_32	.text
10006672:	e8 fc ff ff ff       	call   10006673 <NIWindow::realdraw()+0x2b>	10006673: R_386_PC32	KePanic(char const*)
10006677:	83 c4 10             	add    esp,0x10
1000667a:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
1000667e:	75 55                	jne    100066d5 <NIWindow::realdraw()+0x8d>
10006680:	31 f6                	xor    esi,esi
10006682:	39 b3 74 02 00 00    	cmp    DWORD PTR [ebx+0x274],esi
10006688:	7e 4b                	jle    100066d5 <NIWindow::realdraw()+0x8d>
1000668a:	8b 83 64 02 00 00    	mov    eax,DWORD PTR [ebx+0x264]
10006690:	8d 04 b0             	lea    eax,[eax+esi*4]
10006693:	0f b7 28             	movzx  ebp,WORD PTR [eax]
10006696:	0f b7 78 02          	movzx  edi,WORD PTR [eax+0x2]
1000669a:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100066a0:	89 c2                	mov    edx,eax
100066a2:	29 fa                	sub    edx,edi
100066a4:	39 ea                	cmp    edx,ebp
100066a6:	7e 2a                	jle    100066d2 <NIWindow::realdraw()+0x8a>
100066a8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
100066ab:	0f af c6             	imul   eax,esi
100066ae:	01 e8                	add    eax,ebp
100066b0:	ff 34 82             	push   DWORD PTR [edx+eax*4]
100066b3:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
100066b9:	01 f0                	add    eax,esi
100066bb:	50                   	push   eax
100066bc:	8b 83 68 02 00 00    	mov    eax,DWORD PTR [ebx+0x268]
100066c2:	01 e8                	add    eax,ebp
100066c4:	45                   	inc    ebp
100066c5:	50                   	push   eax
100066c6:	ff 33                	push   DWORD PTR [ebx]
100066c8:	e8 fc ff ff ff       	call   100066c9 <NIWindow::realdraw()+0x81>	100066c9: R_386_PC32	NIContext::drvPutpixel4(int, int, unsigned int)
100066cd:	83 c4 10             	add    esp,0x10
100066d0:	eb c8                	jmp    1000669a <NIWindow::realdraw()+0x52>
100066d2:	46                   	inc    esi
100066d3:	eb ad                	jmp    10006682 <NIWindow::realdraw()+0x3a>
100066d5:	83 c4 0c             	add    esp,0xc
100066d8:	5b                   	pop    ebx
100066d9:	5e                   	pop    esi
100066da:	5f                   	pop    edi
100066db:	5d                   	pop    ebp
100066dc:	c3                   	ret    
100066dd:	90                   	nop

100066de <NIWindow::drawResizeMarker()>:
100066de:	53                   	push   ebx
100066df:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
100066e3:	f6 83 8c 02 00 00 01 	test   BYTE PTR [ebx+0x28c],0x1
100066ea:	0f 85 f6 01 00 00    	jne    100068e6 <NIWindow::drawResizeMarker()+0x208>
100066f0:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
100066f7:	0f 85 e9 01 00 00    	jne    100068e6 <NIWindow::drawResizeMarker()+0x208>
100066fd:	68 55 55 55 00       	push   0x555555
10006702:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006708:	83 e8 05             	sub    eax,0x5
1000670b:	50                   	push   eax
1000670c:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006712:	83 e8 0d             	sub    eax,0xd
10006715:	50                   	push   eax
10006716:	53                   	push   ebx
10006717:	e8 fc ff ff ff       	call   10006718 <NIWindow::drawResizeMarker()+0x3a>	10006718: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000671c:	68 55 55 55 00       	push   0x555555
10006721:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006727:	83 e8 05             	sub    eax,0x5
1000672a:	50                   	push   eax
1000672b:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006731:	83 e8 0b             	sub    eax,0xb
10006734:	50                   	push   eax
10006735:	53                   	push   ebx
10006736:	e8 fc ff ff ff       	call   10006737 <NIWindow::drawResizeMarker()+0x59>	10006737: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000673b:	83 c4 20             	add    esp,0x20
1000673e:	68 55 55 55 00       	push   0x555555
10006743:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006749:	83 e8 05             	sub    eax,0x5
1000674c:	50                   	push   eax
1000674d:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006753:	83 e8 09             	sub    eax,0x9
10006756:	50                   	push   eax
10006757:	53                   	push   ebx
10006758:	e8 fc ff ff ff       	call   10006759 <NIWindow::drawResizeMarker()+0x7b>	10006759: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000675d:	68 55 55 55 00       	push   0x555555
10006762:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006768:	83 e8 05             	sub    eax,0x5
1000676b:	50                   	push   eax
1000676c:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006772:	83 e8 07             	sub    eax,0x7
10006775:	50                   	push   eax
10006776:	53                   	push   ebx
10006777:	e8 fc ff ff ff       	call   10006778 <NIWindow::drawResizeMarker()+0x9a>	10006778: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000677c:	83 c4 20             	add    esp,0x20
1000677f:	68 55 55 55 00       	push   0x555555
10006784:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
1000678a:	83 e8 05             	sub    eax,0x5
1000678d:	50                   	push   eax
1000678e:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006794:	83 e8 05             	sub    eax,0x5
10006797:	50                   	push   eax
10006798:	53                   	push   ebx
10006799:	e8 fc ff ff ff       	call   1000679a <NIWindow::drawResizeMarker()+0xbc>	1000679a: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000679e:	68 55 55 55 00       	push   0x555555
100067a3:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100067a9:	83 e8 07             	sub    eax,0x7
100067ac:	50                   	push   eax
100067ad:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100067b3:	83 e8 0b             	sub    eax,0xb
100067b6:	50                   	push   eax
100067b7:	53                   	push   ebx
100067b8:	e8 fc ff ff ff       	call   100067b9 <NIWindow::drawResizeMarker()+0xdb>	100067b9: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100067bd:	83 c4 20             	add    esp,0x20
100067c0:	68 55 55 55 00       	push   0x555555
100067c5:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100067cb:	83 e8 07             	sub    eax,0x7
100067ce:	50                   	push   eax
100067cf:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100067d5:	83 e8 09             	sub    eax,0x9
100067d8:	50                   	push   eax
100067d9:	53                   	push   ebx
100067da:	e8 fc ff ff ff       	call   100067db <NIWindow::drawResizeMarker()+0xfd>	100067db: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100067df:	68 55 55 55 00       	push   0x555555
100067e4:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100067ea:	83 e8 07             	sub    eax,0x7
100067ed:	50                   	push   eax
100067ee:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100067f4:	83 e8 07             	sub    eax,0x7
100067f7:	50                   	push   eax
100067f8:	53                   	push   ebx
100067f9:	e8 fc ff ff ff       	call   100067fa <NIWindow::drawResizeMarker()+0x11c>	100067fa: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100067fe:	83 c4 20             	add    esp,0x20
10006801:	68 55 55 55 00       	push   0x555555
10006806:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
1000680c:	83 e8 07             	sub    eax,0x7
1000680f:	50                   	push   eax
10006810:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006816:	83 e8 05             	sub    eax,0x5
10006819:	50                   	push   eax
1000681a:	53                   	push   ebx
1000681b:	e8 fc ff ff ff       	call   1000681c <NIWindow::drawResizeMarker()+0x13e>	1000681c: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10006820:	68 55 55 55 00       	push   0x555555
10006825:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
1000682b:	83 e8 09             	sub    eax,0x9
1000682e:	50                   	push   eax
1000682f:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006835:	83 e8 09             	sub    eax,0x9
10006838:	50                   	push   eax
10006839:	53                   	push   ebx
1000683a:	e8 fc ff ff ff       	call   1000683b <NIWindow::drawResizeMarker()+0x15d>	1000683b: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000683f:	83 c4 20             	add    esp,0x20
10006842:	68 55 55 55 00       	push   0x555555
10006847:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
1000684d:	83 e8 09             	sub    eax,0x9
10006850:	50                   	push   eax
10006851:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006857:	83 e8 07             	sub    eax,0x7
1000685a:	50                   	push   eax
1000685b:	53                   	push   ebx
1000685c:	e8 fc ff ff ff       	call   1000685d <NIWindow::drawResizeMarker()+0x17f>	1000685d: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10006861:	68 55 55 55 00       	push   0x555555
10006866:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
1000686c:	83 e8 09             	sub    eax,0x9
1000686f:	50                   	push   eax
10006870:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006876:	83 e8 05             	sub    eax,0x5
10006879:	50                   	push   eax
1000687a:	53                   	push   ebx
1000687b:	e8 fc ff ff ff       	call   1000687c <NIWindow::drawResizeMarker()+0x19e>	1000687c: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10006880:	83 c4 20             	add    esp,0x20
10006883:	68 55 55 55 00       	push   0x555555
10006888:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
1000688e:	83 e8 0b             	sub    eax,0xb
10006891:	50                   	push   eax
10006892:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006898:	83 e8 07             	sub    eax,0x7
1000689b:	50                   	push   eax
1000689c:	53                   	push   ebx
1000689d:	e8 fc ff ff ff       	call   1000689e <NIWindow::drawResizeMarker()+0x1c0>	1000689e: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100068a2:	68 55 55 55 00       	push   0x555555
100068a7:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100068ad:	83 e8 0b             	sub    eax,0xb
100068b0:	50                   	push   eax
100068b1:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100068b7:	83 e8 05             	sub    eax,0x5
100068ba:	50                   	push   eax
100068bb:	53                   	push   ebx
100068bc:	e8 fc ff ff ff       	call   100068bd <NIWindow::drawResizeMarker()+0x1df>	100068bd: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100068c1:	83 c4 20             	add    esp,0x20
100068c4:	68 55 55 55 00       	push   0x555555
100068c9:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100068cf:	83 e8 0d             	sub    eax,0xd
100068d2:	50                   	push   eax
100068d3:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100068d9:	83 e8 05             	sub    eax,0x5
100068dc:	50                   	push   eax
100068dd:	53                   	push   ebx
100068de:	e8 fc ff ff ff       	call   100068df <NIWindow::drawResizeMarker()+0x201>	100068df: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100068e3:	83 c4 10             	add    esp,0x10
100068e6:	5b                   	pop    ebx
100068e7:	c3                   	ret    

100068e8 <List<NIWindow*>::insertAtHead(NIWindow*)>:
100068e8:	53                   	push   ebx
100068e9:	83 ec 14             	sub    esp,0x14
100068ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
100068f0:	6a 0c                	push   0xc
100068f2:	e8 fc ff ff ff       	call   100068f3 <List<NIWindow*>::insertAtHead(NIWindow*)+0xb>	100068f3: R_386_PC32	malloc
100068f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
100068fb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10006902:	89 10                	mov    DWORD PTR [eax],edx
10006904:	83 c4 10             	add    esp,0x10
10006907:	8b 13                	mov    edx,DWORD PTR [ebx]
10006909:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000690c:	85 d2                	test   edx,edx
1000690e:	74 05                	je     10006915 <List<NIWindow*>::insertAtHead(NIWindow*)+0x2d>
10006910:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
10006913:	eb 03                	jmp    10006918 <List<NIWindow*>::insertAtHead(NIWindow*)+0x30>
10006915:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10006918:	89 03                	mov    DWORD PTR [ebx],eax
1000691a:	83 c4 08             	add    esp,0x8
1000691d:	5b                   	pop    ebx
1000691e:	c3                   	ret    
1000691f:	90                   	nop

10006920 <List<NIWindow*>::deleteElement(NIWindow*&)>:
10006920:	57                   	push   edi
10006921:	56                   	push   esi
10006922:	53                   	push   ebx
10006923:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10006927:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000692b:	8b 19                	mov    ebx,DWORD PTR [ecx]
1000692d:	85 db                	test   ebx,ebx
1000692f:	74 5e                	je     1000698f <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
10006931:	8b 30                	mov    esi,DWORD PTR [eax]
10006933:	89 da                	mov    edx,ebx
10006935:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
10006938:	8b 3a                	mov    edi,DWORD PTR [edx]
1000693a:	85 c0                	test   eax,eax
1000693c:	74 08                	je     10006946 <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
1000693e:	39 f7                	cmp    edi,esi
10006940:	73 04                	jae    10006946 <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
10006942:	89 c2                	mov    edx,eax
10006944:	eb ef                	jmp    10006935 <List<NIWindow*>::deleteElement(NIWindow*&)+0x15>
10006946:	39 f7                	cmp    edi,esi
10006948:	75 45                	jne    1000698f <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
1000694a:	39 d3                	cmp    ebx,edx
1000694c:	75 18                	jne    10006966 <List<NIWindow*>::deleteElement(NIWindow*&)+0x46>
1000694e:	89 01                	mov    DWORD PTR [ecx],eax
10006950:	85 c0                	test   eax,eax
10006952:	75 09                	jne    1000695d <List<NIWindow*>::deleteElement(NIWindow*&)+0x3d>
10006954:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
1000695b:	eb 1e                	jmp    1000697b <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
1000695d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10006964:	eb 15                	jmp    1000697b <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
10006966:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
10006969:	85 c0                	test   eax,eax
1000696b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
1000696e:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
10006971:	74 05                	je     10006978 <List<NIWindow*>::deleteElement(NIWindow*&)+0x58>
10006973:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
10006976:	eb 03                	jmp    1000697b <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
10006978:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
1000697b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
10006983:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10006987:	5b                   	pop    ebx
10006988:	5e                   	pop    esi
10006989:	5f                   	pop    edi
1000698a:	e9 fc ff ff ff       	jmp    1000698b <List<NIWindow*>::deleteElement(NIWindow*&)+0x6b>	1000698b: R_386_PC32	operator delete(void*, unsigned long)
1000698f:	5b                   	pop    ebx
10006990:	5e                   	pop    esi
10006991:	5f                   	pop    edi
10006992:	c3                   	ret    
10006993:	43                   	inc    ebx
10006994:	3a 2f                	cmp    ch,BYTE PTR [edi]
10006996:	42                   	inc    edx
10006997:	61                   	popa   
10006998:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006999:	61                   	popa   
1000699a:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000699b:	61                   	popa   
1000699c:	2f                   	das    
1000699d:	53                   	push   ebx
1000699e:	79 73                	jns    10006a13 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
100069a0:	74 65                	je     10006a07 <List<NIWindow*>::deleteElement(NIWindow*&)+0xe7>
100069a2:	6d                   	ins    DWORD PTR es:[edi],dx
100069a3:	2f                   	das    
100069a4:	64 65 73 6b          	fs gs jae 10006a13 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
100069a8:	74 6f                	je     10006a19 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf9>
100069aa:	70 2e                	jo     100069da <List<NIWindow*>::deleteElement(NIWindow*&)+0xba>
100069ac:	65 78 65             	gs js  10006a14 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf4>
100069af:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
100069b2:	2f                   	das    
100069b3:	42                   	inc    edx
100069b4:	61                   	popa   
100069b5:	6e                   	outs   dx,BYTE PTR ds:[esi]
100069b6:	61                   	popa   
100069b7:	6e                   	outs   dx,BYTE PTR ds:[esi]
100069b8:	61                   	popa   
100069b9:	2f                   	das    
100069ba:	53                   	push   ebx
100069bb:	79 73                	jns    10006a30 <List<NIWindow*>::deleteElement(NIWindow*&)+0x110>
100069bd:	74 65                	je     10006a24 <List<NIWindow*>::deleteElement(NIWindow*&)+0x104>
100069bf:	6d                   	ins    DWORD PTR es:[edi],dx
100069c0:	2f                   	das    
100069c1:	6e                   	outs   dx,BYTE PTR ds:[esi]
100069c2:	65 77 67             	gs ja  10006a2c <List<NIWindow*>::deleteElement(NIWindow*&)+0x10c>
100069c5:	75 69                	jne    10006a30 <List<NIWindow*>::deleteElement(NIWindow*&)+0x110>
100069c7:	2e 65 78 65          	cs gs js 10006a30 <List<NIWindow*>::deleteElement(NIWindow*&)+0x110>
100069cb:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
100069ce:	4e                   	dec    esi
100069cf:	43                   	inc    ebx
100069d0:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
100069d3:	4e                   	dec    esi
100069d4:	32 00                	xor    al,BYTE PTR [eax]
100069d6:	32 4e 46             	xor    cl,BYTE PTR [esi+0x46]
100069d9:	53                   	push   ebx
100069da:	00 4e 49             	add    BYTE PTR [esi+0x49],cl
100069dd:	43                   	inc    ebx
100069de:	6f                   	outs   dx,DWORD PTR ds:[esi]
100069df:	6e                   	outs   dx,BYTE PTR ds:[esi]
100069e0:	74 65                	je     10006a47 <List<NIWindow*>::deleteElement(NIWindow*&)+0x127>
100069e2:	78 74                	js     10006a58 <List<NIWindow*>::deleteElement(NIWindow*&)+0x138>
100069e4:	3a 3a                	cmp    bh,BYTE PTR [edx]
100069e6:	64 72 76             	fs jb  10006a5f <List<NIWindow*>::deleteElement(NIWindow*&)+0x13f>
100069e9:	52                   	push   edx
100069ea:	65 6e                	outs   dx,BYTE PTR gs:[esi]
100069ec:	64 65 72 54          	fs gs jb 10006a44 <List<NIWindow*>::deleteElement(NIWindow*&)+0x124>
100069f0:	54                   	push   esp
100069f1:	46                   	inc    esi
100069f2:	34 00                	xor    al,0x0
100069f4:	43                   	inc    ebx
100069f5:	3a 2f                	cmp    ch,BYTE PTR [edi]
100069f7:	42                   	inc    edx
100069f8:	61                   	popa   
100069f9:	6e                   	outs   dx,BYTE PTR ds:[esi]
100069fa:	61                   	popa   
100069fb:	6e                   	outs   dx,BYTE PTR ds:[esi]
100069fc:	61                   	popa   
100069fd:	2f                   	das    
100069fe:	46                   	inc    esi
100069ff:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006a00:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006a01:	74 73                	je     10006a76 <List<NIWindow*>::deleteElement(NIWindow*&)+0x156>
10006a03:	2f                   	das    
10006a04:	53                   	push   ebx
10006a05:	46                   	inc    esi
10006a06:	4e                   	dec    esi
10006a07:	00 43 41             	add    BYTE PTR [ebx+0x41],al
10006a0a:	4e                   	dec    esi
10006a0b:	4e                   	dec    esi
10006a0c:	4f                   	dec    edi
10006a0d:	54                   	push   esp
10006a0e:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10006a12:	44                   	inc    esp
10006a13:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10006a16:	4e                   	dec    esi
10006a17:	54                   	push   esp
10006a18:	20 44 49 52          	and    BYTE PTR [ecx+ecx*2+0x52],al
10006a1c:	45                   	inc    ebp
10006a1d:	43                   	inc    ebx
10006a1e:	54                   	push   esp
10006a1f:	4f                   	dec    edi
10006a20:	52                   	push   edx
10006a21:	59                   	pop    ecx
10006a22:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10006a25:	2f                   	das    
10006a26:	42                   	inc    edx
10006a27:	61                   	popa   
10006a28:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006a29:	61                   	popa   
10006a2a:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006a2b:	61                   	popa   
10006a2c:	2f                   	das    
10006a2d:	46                   	inc    esi
10006a2e:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006a2f:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006a30:	74 73                	je     10006aa5 <List<NIWindow*>::deleteElement(NIWindow*&)+0x185>
10006a32:	2f                   	das    
10006a33:	53                   	push   ebx
10006a34:	46                   	inc    esi
10006a35:	4e                   	dec    esi
10006a36:	2f                   	das    
10006a37:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
10006a3a:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006a3b:	74 20                	je     10006a5d <List<NIWindow*>::deleteElement(NIWindow*&)+0x13d>
10006a3d:	69 73 20 6f 66 20 73 	imul   esi,DWORD PTR [ebx+0x20],0x7320666f
10006a44:	69 7a 65 20 25 64 0a 	imul   edi,DWORD PTR [edx+0x65],0xa642520
10006a4b:	00 4c 6f 61          	add    BYTE PTR [edi+ebp*2+0x61],cl
10006a4f:	64 65 64 20 66 6f    	fs gs and BYTE PTR fs:[esi+0x6f],ah
10006a55:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006a56:	74 3a                	je     10006a92 <List<NIWindow*>::deleteElement(NIWindow*&)+0x172>
10006a58:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
10006a5e:	53                   	push   ebx
10006a5f:	46                   	inc    esi
10006a60:	4e                   	dec    esi
10006a61:	5f                   	pop    edi
10006a62:	52                   	push   edx
10006a63:	45                   	inc    ebp
10006a64:	53                   	push   ebx
10006a65:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10006a6b:	00 4d 65             	add    BYTE PTR [ebp+0x65],cl
10006a6e:	6d                   	ins    DWORD PTR es:[edi],dx
10006a6f:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006a70:	72 79                	jb     10006aeb <List<NIWindow*>::deleteElement(NIWindow*&)+0x1cb>
10006a72:	20 61 6c             	and    BYTE PTR [ecx+0x6c],ah
10006a75:	6c                   	ins    BYTE PTR es:[edi],dx
10006a76:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006a77:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
10006a7a:	69 6f 6e 20 65 72 72 	imul   ebp,DWORD PTR [edi+0x6e],0x72726520
10006a81:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006a82:	72 00                	jb     10006a84 <List<NIWindow*>::deleteElement(NIWindow*&)+0x164>
10006a84:	42                   	inc    edx
10006a85:	61                   	popa   
10006a86:	64 20 66 69          	and    BYTE PTR fs:[esi+0x69],ah
10006a8a:	6c                   	ins    BYTE PTR es:[edi],dx
10006a8b:	65 20 66 6f          	and    BYTE PTR gs:[esi+0x6f],ah
10006a8f:	72 6d                	jb     10006afe <List<NIWindow*>::deleteElement(NIWindow*&)+0x1de>
10006a91:	61                   	popa   
10006a92:	74 00                	je     10006a94 <List<NIWindow*>::deleteElement(NIWindow*&)+0x174>
10006a94:	4e                   	dec    esi
10006a95:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006a96:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10006a99:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006a9a:	74 20                	je     10006abc <List<NIWindow*>::deleteElement(NIWindow*&)+0x19c>
10006a9c:	66 61                	popaw  
10006a9e:	63 65 20             	arpl   WORD PTR [ebp+0x20],sp
10006aa1:	66 6f                	outs   dx,WORD PTR ds:[esi]
10006aa3:	75 6e                	jne    10006b13 <_ssfn__compute_huffman_codes::length_dezigzag+0x13>
10006aa5:	64 00 49 6e          	add    BYTE PTR fs:[ecx+0x6e],cl
10006aa9:	76 61                	jbe    10006b0c <_ssfn__compute_huffman_codes::length_dezigzag+0xc>
10006aab:	6c                   	ins    BYTE PTR es:[edi],dx
10006aac:	69 64 20 69 6e 70 75 74 	imul   esp,DWORD PTR [eax+eiz*1+0x69],0x7475706e
10006ab4:	20 76 61             	and    BYTE PTR [esi+0x61],dh
10006ab7:	6c                   	ins    BYTE PTR es:[edi],dx
10006ab8:	75 65                	jne    10006b1f <_ssfn__compute_huffman_codes::length_dezigzag+0x1f>
10006aba:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10006abd:	76 61                	jbe    10006b20 <_ssfn__zdist_extra>
10006abf:	6c                   	ins    BYTE PTR es:[edi],dx
10006ac0:	69 64 20 73 74 79 6c 65 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x656c7974
10006ac8:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10006acb:	76 61                	jbe    10006b2e <_ssfn__zdist_extra+0xe>
10006acd:	6c                   	ins    BYTE PTR es:[edi],dx
10006ace:	69 64 20 73 69 7a 65 00 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x657a69
10006ad6:	47                   	inc    edi
10006ad7:	6c                   	ins    BYTE PTR es:[edi],dx
10006ad8:	79 70                	jns    10006b4a <_ssfn__zdist_extra+0x2a>
10006ada:	68 20 6e 6f 74       	push   0x746f6e20
10006adf:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10006ae2:	75 6e                	jne    10006b52 <_ssfn__zdist_extra+0x32>
10006ae4:	64 00 66 90          	add    BYTE PTR fs:[esi-0x70],ah
10006ae8:	66 90                	xchg   ax,ax
10006aea:	66 90                	xchg   ax,ax
10006aec:	66 90                	xchg   ax,ax
10006aee:	66 90                	xchg   ax,ax
10006af0:	66 90                	xchg   ax,ax
10006af2:	66 90                	xchg   ax,ax
10006af4:	66 90                	xchg   ax,ax
10006af6:	66 90                	xchg   ax,ax
10006af8:	66 90                	xchg   ax,ax
10006afa:	66 90                	xchg   ax,ax
10006afc:	66 90                	xchg   ax,ax
10006afe:	66 90                	xchg   ax,ax

10006b00 <_ssfn__compute_huffman_codes::length_dezigzag>:
10006b00:	10 11 12 00 08 07 09 06 0a 05 0b 04 0c 03 0d 02     ................
10006b10:	0e 01 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

10006b20 <_ssfn__zdist_extra>:
	...
10006b30:	01 00 00 00 01 00 00 00 02 00 00 00 02 00 00 00     ................
10006b40:	03 00 00 00 03 00 00 00 04 00 00 00 04 00 00 00     ................
10006b50:	05 00 00 00 05 00 00 00 06 00 00 00 06 00 00 00     ................
10006b60:	07 00 00 00 07 00 00 00 08 00 00 00 08 00 00 00     ................
10006b70:	09 00 00 00 09 00 00 00 0a 00 00 00 0a 00 00 00     ................
10006b80:	0b 00 00 00 0b 00 00 00 0c 00 00 00 0c 00 00 00     ................
10006b90:	0d 00 00 00 0d 00 00 00 00 00 00 00 00 00 00 00     ................

10006ba0 <_ssfn__zdist_base>:
10006ba0:	01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00     ................
10006bb0:	05 00 00 00 07 00 00 00 09 00 00 00 0d 00 00 00     ................
10006bc0:	11 00 00 00 19 00 00 00 21 00 00 00 31 00 00 00     ........!...1...
10006bd0:	41 00 00 00 61 00 00 00 81 00 00 00 c1 00 00 00     A...a...........
10006be0:	01 01 00 00 81 01 00 00 01 02 00 00 01 03 00 00     ................
10006bf0:	01 04 00 00 01 06 00 00 01 08 00 00 01 0c 00 00     ................
10006c00:	01 10 00 00 01 18 00 00 01 20 00 00 01 30 00 00     ......... ...0..
10006c10:	01 40 00 00 01 60 00 00 00 00 00 00 00 00 00 00     .@...`..........

10006c20 <_ssfn__zlength_extra>:
	...
10006c40:	01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00     ................
10006c50:	02 00 00 00 02 00 00 00 02 00 00 00 02 00 00 00     ................
10006c60:	03 00 00 00 03 00 00 00 03 00 00 00 03 00 00 00     ................
10006c70:	04 00 00 00 04 00 00 00 04 00 00 00 04 00 00 00     ................
10006c80:	05 00 00 00 05 00 00 00 05 00 00 00 05 00 00 00     ................
	...

10006ca0 <_ssfn__zlength_base>:
10006ca0:	03 00 00 00 04 00 00 00 05 00 00 00 06 00 00 00     ................
10006cb0:	07 00 00 00 08 00 00 00 09 00 00 00 0a 00 00 00     ................
10006cc0:	0b 00 00 00 0d 00 00 00 0f 00 00 00 11 00 00 00     ................
10006cd0:	13 00 00 00 17 00 00 00 1b 00 00 00 1f 00 00 00     ................
10006ce0:	23 00 00 00 2b 00 00 00 33 00 00 00 3b 00 00 00     #...+...3...;...
10006cf0:	43 00 00 00 53 00 00 00 63 00 00 00 73 00 00 00     C...S...c...s...
10006d00:	83 00 00 00 a3 00 00 00 c3 00 00 00 e3 00 00 00     ................
10006d10:	02 01 00 00 00 00 00 00 00 00 00 00 43 3a 2f 42     ............C:/B
10006d20:	61 6e 61 6e 61 2f 43 75 72 73 6f 72 73 2f 53 54     anana/Cursors/ST
10006d30:	41 4e 44 41 52 44 2e 43 55 52 00 43 55 52 53 4f     ANDARD.CUR.CURSO
10006d40:	52 20 4c 4f 41 44 3a 20 42 41 44 20 31 0a 00 43     R LOAD: BAD 1..C
10006d50:	55 52 53 4f 52 20 4c 4f 41 44 3a 20 42 41 44 20     URSOR LOAD: BAD 
10006d60:	32 0a 00 4e 52 4d 4c 00 57 41 49 54 00 54 4c 44     2..NRML.WAIT.TLD
10006d70:	52 00 54 45 58 54 00 56 45 52 54 00 48 4f 52 5a     R.TEXT.VERT.HORZ
10006d80:	00 48 41 4e 44 00 43 55 52 53 4f 52 20 4c 4f 41     .HAND.CURSOR LOA
10006d90:	44 3a 20 42 41 44 20 33 0a 00 4e 69 4c 69 6e 6b     D: BAD 3..NiLink
10006da0:	43 6f 6d 6d 61 6e 64 44 65 73 74 72 6f 79 57 69     CommandDestroyWi
10006db0:	6e 64 6f 77 0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d     ndow..NiLinkComm
10006dc0:	61 6e 64 43 72 65 61 74 65 57 69 6e 64 6f 77 0a     andCreateWindow.
10006dd0:	00 41 53 53 45 52 54 49 4f 4e 20 46 41 49 4c 55     .ASSERTION FAILU
10006de0:	52 45 20 28 41 29 2e 00                             RE (A)..
