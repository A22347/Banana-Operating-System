
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <NiBegin(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <NiBegin(void*)+0xd>	1000000d: R_386_PC32	NiMain(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <kernelMouseHandler(int, int, int, int)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 08             	sub    esp,0x8
1000001d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000001e: R_386_32	screen
10000022:	83 ec 08             	sub    esp,0x8
10000025:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10000028:	6a 00                	push   0x0
1000002a:	6a 00                	push   0x0
1000002c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000002f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000032:	50                   	push   eax
10000033:	e8 fc ff ff ff       	call   10000034 <kernelMouseHandler(int, int, int, int)+0x1d>	10000034: R_386_PC32	handleMouse(Video*, int, int, int, int, int)
10000038:	83 c4 20             	add    esp,0x20
1000003b:	90                   	nop
1000003c:	c9                   	leave  
1000003d:	c3                   	ret    

1000003e <drawVGAChar(int, int, int, int, int)>:
1000003e:	55                   	push   ebp
1000003f:	89 e5                	mov    ebp,esp
10000041:	57                   	push   edi
10000042:	56                   	push   esi
10000043:	53                   	push   ebx
10000044:	83 ec 1c             	sub    esp,0x1c
10000047:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000004e:	83 7d e4 0f          	cmp    DWORD PTR [ebp-0x1c],0xf
10000052:	7f 76                	jg     100000ca <drawVGAChar(int, int, int, int, int)+0x8c>
10000054:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000057:	c1 e0 04             	shl    eax,0x4
1000005a:	89 c2                	mov    edx,eax
1000005c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000005f:	01 d0                	add    eax,edx
10000061:	8a 80 00 00 00 00    	mov    al,BYTE PTR [eax+0x0]	10000063: R_386_32	cp
10000067:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
1000006a:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000071:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000075:	7f 4e                	jg     100000c5 <drawVGAChar(int, int, int, int, int)+0x87>
10000077:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10000079: R_386_32	screen
1000007d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000007e: R_386_32	screen
10000082:	8b 00                	mov    eax,DWORD PTR [eax]
10000084:	83 c0 24             	add    eax,0x24
10000087:	8b 10                	mov    edx,DWORD PTR [eax]
10000089:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
1000008c:	84 c0                	test   al,al
1000008e:	79 05                	jns    10000095 <drawVGAChar(int, int, int, int, int)+0x57>
10000090:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10000093:	eb 03                	jmp    10000098 <drawVGAChar(int, int, int, int, int)+0x5a>
10000095:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10000098:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
1000009b:	89 de                	mov    esi,ebx
1000009d:	c1 e6 04             	shl    esi,0x4
100000a0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
100000a3:	01 de                	add    esi,ebx
100000a5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100000a8:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
100000af:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
100000b2:	01 fb                	add    ebx,edi
100000b4:	50                   	push   eax
100000b5:	56                   	push   esi
100000b6:	53                   	push   ebx
100000b7:	51                   	push   ecx
100000b8:	ff d2                	call   edx
100000ba:	83 c4 10             	add    esp,0x10
100000bd:	d0 65 e3             	shl    BYTE PTR [ebp-0x1d],1
100000c0:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
100000c3:	eb ac                	jmp    10000071 <drawVGAChar(int, int, int, int, int)+0x33>
100000c5:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100000c8:	eb 84                	jmp    1000004e <drawVGAChar(int, int, int, int, int)+0x10>
100000ca:	90                   	nop
100000cb:	8d 65 f4             	lea    esp,[ebp-0xc]
100000ce:	5b                   	pop    ebx
100000cf:	5e                   	pop    esi
100000d0:	5f                   	pop    edi
100000d1:	5d                   	pop    ebp
100000d2:	c3                   	ret    

100000d3 <kernelPanicHandler(char*)>:
100000d3:	55                   	push   ebp
100000d4:	89 e5                	mov    ebp,esp
100000d6:	83 ec 18             	sub    esp,0x18
100000d9:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100000db: R_386_32	screen
100000df:	a1 00 00 00 00       	mov    eax,ds:0x0	100000e0: R_386_32	screen
100000e4:	8b 00                	mov    eax,DWORD PTR [eax]
100000e6:	83 c0 40             	add    eax,0x40
100000e9:	8b 00                	mov    eax,DWORD PTR [eax]
100000eb:	83 ec 08             	sub    esp,0x8
100000ee:	68 80 00 00 00       	push   0x80
100000f3:	52                   	push   edx
100000f4:	ff d0                	call   eax
100000f6:	83 c4 10             	add    esp,0x10
100000f9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000100:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000103:	05 61 85 00 10       	add    eax,0x10008561	10000104: R_386_32	.text
10000108:	8a 00                	mov    al,BYTE PTR [eax]
1000010a:	84 c0                	test   al,al
1000010c:	74 31                	je     1000013f <kernelPanicHandler(char*)+0x6c>
1000010e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000111:	05 61 85 00 10       	add    eax,0x10008561	10000112: R_386_32	.text
10000116:	8a 00                	mov    al,BYTE PTR [eax]
10000118:	0f be c0             	movsx  eax,al
1000011b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000011e:	83 c2 06             	add    edx,0x6
10000121:	83 ec 0c             	sub    esp,0xc
10000124:	68 ff ff ff 00       	push   0xffffff
10000129:	68 80 00 00 00       	push   0x80
1000012e:	50                   	push   eax
1000012f:	6a 02                	push   0x2
10000131:	52                   	push   edx
10000132:	e8 fc ff ff ff       	call   10000133 <kernelPanicHandler(char*)+0x60>	10000133: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000137:	83 c4 20             	add    esp,0x20
1000013a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000013d:	eb c1                	jmp    10000100 <kernelPanicHandler(char*)+0x2d>
1000013f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000146:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000149:	05 70 85 00 10       	add    eax,0x10008570	1000014a: R_386_32	.text
1000014e:	8a 00                	mov    al,BYTE PTR [eax]
10000150:	84 c0                	test   al,al
10000152:	74 31                	je     10000185 <kernelPanicHandler(char*)+0xb2>
10000154:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000157:	05 70 85 00 10       	add    eax,0x10008570	10000158: R_386_32	.text
1000015c:	8a 00                	mov    al,BYTE PTR [eax]
1000015e:	0f be c0             	movsx  eax,al
10000161:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000164:	83 c2 06             	add    edx,0x6
10000167:	83 ec 0c             	sub    esp,0xc
1000016a:	68 80 00 00 00       	push   0x80
1000016f:	68 ff ff ff 00       	push   0xffffff
10000174:	50                   	push   eax
10000175:	6a 04                	push   0x4
10000177:	52                   	push   edx
10000178:	e8 fc ff ff ff       	call   10000179 <kernelPanicHandler(char*)+0xa6>	10000179: R_386_PC32	drawVGAChar(int, int, int, int, int)
1000017d:	83 c4 20             	add    esp,0x20
10000180:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10000183:	eb c1                	jmp    10000146 <kernelPanicHandler(char*)+0x73>
10000185:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
1000018c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
1000018f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000192:	01 d0                	add    eax,edx
10000194:	8a 00                	mov    al,BYTE PTR [eax]
10000196:	84 c0                	test   al,al
10000198:	74 31                	je     100001cb <kernelPanicHandler(char*)+0xf8>
1000019a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
1000019d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001a0:	01 d0                	add    eax,edx
100001a2:	8a 00                	mov    al,BYTE PTR [eax]
100001a4:	0f be c0             	movsx  eax,al
100001a7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
100001aa:	83 c2 0a             	add    edx,0xa
100001ad:	83 ec 0c             	sub    esp,0xc
100001b0:	68 80 00 00 00       	push   0x80
100001b5:	68 ff ff ff 00       	push   0xffffff
100001ba:	50                   	push   eax
100001bb:	6a 06                	push   0x6
100001bd:	52                   	push   edx
100001be:	e8 fc ff ff ff       	call   100001bf <kernelPanicHandler(char*)+0xec>	100001bf: R_386_PC32	drawVGAChar(int, int, int, int, int)
100001c3:	83 c4 20             	add    esp,0x20
100001c6:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100001c9:	eb c1                	jmp    1000018c <kernelPanicHandler(char*)+0xb9>
100001cb:	f4                   	hlt    
100001cc:	eb fd                	jmp    100001cb <kernelPanicHandler(char*)+0xf8>

100001ce <NiMain(void*)>:
100001ce:	55                   	push   ebp
100001cf:	89 e5                	mov    ebp,esp
100001d1:	57                   	push   edi
100001d2:	56                   	push   esi
100001d3:	53                   	push   ebx
100001d4:	81 ec dc 00 00 00    	sub    esp,0xdc
100001da:	83 ec 0c             	sub    esp,0xc
100001dd:	68 a2 85 00 10       	push   0x100085a2	100001de: R_386_32	.text
100001e2:	e8 fc ff ff ff       	call   100001e3 <NiMain(void*)+0x15>	100001e3: R_386_PC32	Dbg::kprintf(char const*, ...)
100001e7:	83 c4 10             	add    esp,0x10
100001ea:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100001ec: R_386_32	guiPanicHandler
	100001f0: R_386_32	kernelPanicHandler(char*)
100001f4:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001f6: R_386_32	screen
100001fa:	a1 00 00 00 00       	mov    eax,ds:0x0	100001fb: R_386_32	screen
100001ff:	8b 00                	mov    eax,DWORD PTR [eax]
10000201:	83 c0 40             	add    eax,0x40
10000204:	8b 00                	mov    eax,DWORD PTR [eax]
10000206:	83 ec 08             	sub    esp,0x8
10000209:	68 80 80 00 00       	push   0x8080
1000020e:	52                   	push   edx
1000020f:	ff d0                	call   eax
10000211:	83 c4 10             	add    esp,0x10
10000214:	c7 05 00 00 00 00 32 00 00 00 	mov    DWORD PTR ds:0x0,0x32	10000216: R_386_32	mouseX
1000021e:	c7 05 00 00 00 00 32 00 00 00 	mov    DWORD PTR ds:0x0,0x32	10000220: R_386_32	mouseY
10000228:	e8 fc ff ff ff       	call   10000229 <NiMain(void*)+0x5b>	10000229: R_386_PC32	initFonts()
1000022d:	6a 00                	push   0x0
1000022f:	6a 0c                	push   0xc
10000231:	68 d4 83 00 10       	push   0x100083d4	10000232: R_386_32	.text
10000236:	8d 85 44 ff ff ff    	lea    eax,[ebp-0xbc]
1000023c:	50                   	push   eax
1000023d:	e8 fc ff ff ff       	call   1000023e <NiMain(void*)+0x70>	1000023e: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
10000242:	83 c4 10             	add    esp,0x10
10000245:	83 ec 08             	sub    esp,0x8
10000248:	81 ec 88 00 00 00    	sub    esp,0x88
1000024e:	89 e0                	mov    eax,esp
10000250:	89 c3                	mov    ebx,eax
10000252:	8d 85 44 ff ff ff    	lea    eax,[ebp-0xbc]
10000258:	ba 22 00 00 00       	mov    edx,0x22
1000025d:	89 df                	mov    edi,ebx
1000025f:	89 c6                	mov    esi,eax
10000261:	89 d1                	mov    ecx,edx
10000263:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000265:	e8 fc ff ff ff       	call   10000266 <NiMain(void*)+0x98>	10000266: R_386_PC32	getFontHandle(FontStyle)
1000026a:	81 c4 90 00 00 00    	add    esp,0x90
10000270:	a3 00 00 00 00       	mov    ds:0x0,eax	10000271: R_386_32	SYSTEM_FONT_HANDLE
10000275:	a1 00 00 00 00       	mov    eax,ds:0x0	10000276: R_386_32	SYSTEM_FONT_HANDLE
1000027a:	83 ec 08             	sub    esp,0x8
1000027d:	50                   	push   eax
1000027e:	68 be 85 00 10       	push   0x100085be	1000027f: R_386_32	.text
10000283:	e8 fc ff ff ff       	call   10000284 <NiMain(void*)+0xb6>	10000284: R_386_PC32	Dbg::kprintf(char const*, ...)
10000288:	83 c4 10             	add    esp,0x10
1000028b:	c7 45 cc 90 00 00 00 	mov    DWORD PTR [ebp-0x34],0x90
10000292:	83 ec 0c             	sub    esp,0xc
10000295:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000298:	e8 fc ff ff ff       	call   10000299 <NiMain(void*)+0xcb>	10000299: R_386_PC32	malloc
1000029d:	83 c4 10             	add    esp,0x10
100002a0:	89 c3                	mov    ebx,eax
100002a2:	83 ec 04             	sub    esp,0x4
100002a5:	6a 00                	push   0x0
100002a7:	68 d7 85 00 10       	push   0x100085d7	100002a8: R_386_32	.text
100002ac:	68 5e 01 00 00       	push   0x15e
100002b1:	68 5e 01 00 00       	push   0x15e
100002b6:	6a 32                	push   0x32
100002b8:	6a 50                	push   0x50
100002ba:	53                   	push   ebx
100002bb:	e8 fc ff ff ff       	call   100002bc <NiMain(void*)+0xee>	100002bc: R_386_PC32	NWindow::NWindow(int, int, int, int, char const*, int)
100002c0:	83 c4 20             	add    esp,0x20
100002c3:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
100002c6:	c7 45 d0 90 00 00 00 	mov    DWORD PTR [ebp-0x30],0x90
100002cd:	83 ec 0c             	sub    esp,0xc
100002d0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100002d3:	e8 fc ff ff ff       	call   100002d4 <NiMain(void*)+0x106>	100002d4: R_386_PC32	malloc
100002d8:	83 c4 10             	add    esp,0x10
100002db:	89 c3                	mov    ebx,eax
100002dd:	83 ec 04             	sub    esp,0x4
100002e0:	6a 00                	push   0x0
100002e2:	68 d7 85 00 10       	push   0x100085d7	100002e3: R_386_32	.text
100002e7:	68 c2 01 00 00       	push   0x1c2
100002ec:	68 c2 01 00 00       	push   0x1c2
100002f1:	6a 58                	push   0x58
100002f3:	68 b4 00 00 00       	push   0xb4
100002f8:	53                   	push   ebx
100002f9:	e8 fc ff ff ff       	call   100002fa <NiMain(void*)+0x12c>	100002fa: R_386_PC32	NWindow::NWindow(int, int, int, int, char const*, int)
100002fe:	83 c4 20             	add    esp,0x20
10000301:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
10000304:	c7 45 d4 88 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x88
1000030b:	83 ec 0c             	sub    esp,0xc
1000030e:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000311:	e8 fc ff ff ff       	call   10000312 <NiMain(void*)+0x144>	10000312: R_386_PC32	malloc
10000316:	83 c4 10             	add    esp,0x10
10000319:	89 c3                	mov    ebx,eax
1000031b:	83 ec 0c             	sub    esp,0xc
1000031e:	68 58 02 00 00       	push   0x258
10000323:	68 40 06 00 00       	push   0x640
10000328:	6a 28                	push   0x28
1000032a:	6a 0f                	push   0xf
1000032c:	53                   	push   ebx
1000032d:	e8 fc ff ff ff       	call   1000032e <NiMain(void*)+0x160>	1000032e: R_386_PC32	NButton::NButton(int, int, int, int)
10000332:	83 c4 20             	add    esp,0x20
10000335:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10000338:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000033b:	83 ec 08             	sub    esp,0x8
1000033e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10000341:	50                   	push   eax
10000342:	e8 fc ff ff ff       	call   10000343 <NiMain(void*)+0x175>	10000343: R_386_PC32	NFrame::addChild(NFrame*)
10000347:	83 c4 10             	add    esp,0x10
1000034a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000034b: R_386_32	screen
1000034f:	83 ec 0c             	sub    esp,0xc
10000352:	50                   	push   eax
10000353:	e8 fc ff ff ff       	call   10000354 <NiMain(void*)+0x186>	10000354: R_386_PC32	Video::getWidth()
10000358:	83 c4 10             	add    esp,0x10
1000035b:	89 c6                	mov    esi,eax
1000035d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000035e: R_386_32	screen
10000362:	83 ec 0c             	sub    esp,0xc
10000365:	50                   	push   eax
10000366:	e8 fc ff ff ff       	call   10000367 <NiMain(void*)+0x199>	10000367: R_386_PC32	Video::getHeight()
1000036b:	83 c4 10             	add    esp,0x10
1000036e:	89 c7                	mov    edi,eax
10000370:	c7 45 d8 8c 00 00 00 	mov    DWORD PTR [ebp-0x28],0x8c
10000377:	83 ec 0c             	sub    esp,0xc
1000037a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000037d:	e8 fc ff ff ff       	call   1000037e <NiMain(void*)+0x1b0>	1000037e: R_386_PC32	malloc
10000382:	83 c4 10             	add    esp,0x10
10000385:	89 c3                	mov    ebx,eax
10000387:	83 ec 08             	sub    esp,0x8
1000038a:	68 80 80 00 00       	push   0x8080
1000038f:	57                   	push   edi
10000390:	56                   	push   esi
10000391:	6a 00                	push   0x0
10000393:	6a 00                	push   0x0
10000395:	53                   	push   ebx
10000396:	e8 fc ff ff ff       	call   10000397 <NiMain(void*)+0x1c9>	10000397: R_386_PC32	NDesktopWindow::NDesktopWindow(int, int, int, int, int)
1000039b:	83 c4 20             	add    esp,0x20
1000039e:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100003a0: R_386_32	desktopWindow
100003a4:	a1 00 00 00 00       	mov    eax,ds:0x0	100003a5: R_386_32	desktopWindow
100003a9:	83 ec 08             	sub    esp,0x8
100003ac:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
100003af:	50                   	push   eax
100003b0:	e8 fc ff ff ff       	call   100003b1 <NiMain(void*)+0x1e3>	100003b1: R_386_PC32	NFrame::addChild(NFrame*)
100003b5:	83 c4 10             	add    esp,0x10
100003b8:	a1 00 00 00 00       	mov    eax,ds:0x0	100003b9: R_386_32	desktopWindow
100003bd:	83 ec 08             	sub    esp,0x8
100003c0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100003c3:	50                   	push   eax
100003c4:	e8 fc ff ff ff       	call   100003c5 <NiMain(void*)+0x1f7>	100003c5: R_386_PC32	NFrame::addChild(NFrame*)
100003c9:	83 c4 10             	add    esp,0x10
100003cc:	a1 00 00 00 00       	mov    eax,ds:0x0	100003cd: R_386_32	screen
100003d1:	83 ec 0c             	sub    esp,0xc
100003d4:	50                   	push   eax
100003d5:	e8 fc ff ff ff       	call   100003d6 <NiMain(void*)+0x208>	100003d6: R_386_PC32	mouseInit(Video*)
100003da:	83 c4 10             	add    esp,0x10
100003dd:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100003df: R_386_32	guiMouseHandler
	100003e3: R_386_32	kernelMouseHandler(int, int, int, int)
100003e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100003e8: R_386_32	screen
100003ec:	83 ec 0c             	sub    esp,0xc
100003ef:	50                   	push   eax
100003f0:	e8 fc ff ff ff       	call   100003f1 <NiMain(void*)+0x223>	100003f1: R_386_PC32	Video::getWidth()
100003f5:	83 c4 10             	add    esp,0x10
100003f8:	8d 50 01             	lea    edx,[eax+0x1]
100003fb:	8d 85 28 ff ff ff    	lea    eax,[ebp-0xd8]
10000401:	83 ec 0c             	sub    esp,0xc
10000404:	6a 01                	push   0x1
10000406:	6a 01                	push   0x1
10000408:	6a 01                	push   0x1
1000040a:	52                   	push   edx
1000040b:	50                   	push   eax
1000040c:	e8 fc ff ff ff       	call   1000040d <NiMain(void*)+0x23f>	1000040d: R_386_PC32	createRectangleRegion(int, int, int, int)
10000411:	83 c4 1c             	add    esp,0x1c
10000414:	a1 00 00 00 00       	mov    eax,ds:0x0	10000415: R_386_32	desktopWindow
10000419:	83 ec 0c             	sub    esp,0xc
1000041c:	50                   	push   eax
1000041d:	e8 fc ff ff ff       	call   1000041e <NiMain(void*)+0x250>	1000041e: R_386_PC32	NFrame::tryInvalidate()
10000422:	83 c4 10             	add    esp,0x10
10000425:	a1 00 00 00 00       	mov    eax,ds:0x0	10000426: R_386_32	desktopWindow
1000042a:	89 85 24 ff ff ff    	mov    DWORD PTR [ebp-0xdc],eax
10000430:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10000432: R_386_32	screen
10000436:	89 8d 20 ff ff ff    	mov    DWORD PTR [ebp-0xe0],ecx
1000043c:	83 ec 0c             	sub    esp,0xc
1000043f:	83 ec 1c             	sub    esp,0x1c
10000442:	89 e0                	mov    eax,esp
10000444:	89 c3                	mov    ebx,eax
10000446:	8d 85 28 ff ff ff    	lea    eax,[ebp-0xd8]
1000044c:	ba 07 00 00 00       	mov    edx,0x7
10000451:	89 df                	mov    edi,ebx
10000453:	89 c6                	mov    esi,eax
10000455:	89 d1                	mov    ecx,edx
10000457:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000459:	ff b5 20 ff ff ff    	push   DWORD PTR [ebp-0xe0]
1000045f:	ff b5 24 ff ff ff    	push   DWORD PTR [ebp-0xdc]
10000465:	e8 fc ff ff ff       	call   10000466 <NiMain(void*)+0x298>	10000466: R_386_PC32	NFrame::repaint(Video*, Region)
1000046a:	83 c4 30             	add    esp,0x30
1000046d:	83 ec 0c             	sub    esp,0xc
10000470:	6a 02                	push   0x2
10000472:	e8 fc ff ff ff       	call   10000473 <NiMain(void*)+0x2a5>	10000473: R_386_PC32	blockTask(TaskState)
10000477:	83 c4 10             	add    esp,0x10
1000047a:	eb f1                	jmp    1000046d <NiMain(void*)+0x29f>

1000047c <lookupInFontTableByNameOnly(char const*, int)>:
1000047c:	55                   	push   ebp
1000047d:	89 e5                	mov    ebp,esp
1000047f:	83 ec 18             	sub    esp,0x18
10000482:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000489:	a1 00 00 00 00       	mov    eax,ds:0x0	1000048a: R_386_32	fontTable
1000048e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10000491:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10000494:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10000498:	74 43                	je     100004dd <lookupInFontTableByNameOnly(char const*, int)+0x61>
1000049a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000049d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004a0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100004a6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100004a9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100004ac:	8b 00                	mov    eax,DWORD PTR [eax]
100004ae:	85 c0                	test   eax,eax
100004b0:	74 2a                	je     100004dc <lookupInFontTableByNameOnly(char const*, int)+0x60>
100004b2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100004b5:	8b 00                	mov    eax,DWORD PTR [eax]
100004b7:	83 ec 08             	sub    esp,0x8
100004ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004bd:	50                   	push   eax
100004be:	e8 fc ff ff ff       	call   100004bf <lookupInFontTableByNameOnly(char const*, int)+0x43>	100004bf: R_386_PC32	strcmp
100004c3:	83 c4 10             	add    esp,0x10
100004c6:	85 c0                	test   eax,eax
100004c8:	75 0d                	jne    100004d7 <lookupInFontTableByNameOnly(char const*, int)+0x5b>
100004ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100004cd:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
100004d0:	74 05                	je     100004d7 <lookupInFontTableByNameOnly(char const*, int)+0x5b>
100004d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100004d5:	eb 0b                	jmp    100004e2 <lookupInFontTableByNameOnly(char const*, int)+0x66>
100004d7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100004da:	eb b8                	jmp    10000494 <lookupInFontTableByNameOnly(char const*, int)+0x18>
100004dc:	90                   	nop
100004dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
100004e2:	c9                   	leave  
100004e3:	c3                   	ret    

100004e4 <lookupInFontTable(FontStyle)>:
100004e4:	55                   	push   ebp
100004e5:	89 e5                	mov    ebp,esp
100004e7:	83 ec 18             	sub    esp,0x18
100004ea:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100004f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100004f2: R_386_32	fontTable
100004f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100004f9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100004fc:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10000500:	74 66                	je     10000568 <lookupInFontTable(FontStyle)+0x84>
10000502:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000505:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000508:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000050b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000050e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10000511:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000514:	8b 00                	mov    eax,DWORD PTR [eax]
10000516:	85 c0                	test   eax,eax
10000518:	74 4d                	je     10000567 <lookupInFontTable(FontStyle)+0x83>
1000051a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000051d:	8b 00                	mov    eax,DWORD PTR [eax]
1000051f:	8b 90 80 00 00 00    	mov    edx,DWORD PTR [eax+0x80]
10000525:	8b 85 88 00 00 00    	mov    eax,DWORD PTR [ebp+0x88]
1000052b:	39 c2                	cmp    edx,eax
1000052d:	75 33                	jne    10000562 <lookupInFontTable(FontStyle)+0x7e>
1000052f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000532:	8b 00                	mov    eax,DWORD PTR [eax]
10000534:	83 ec 08             	sub    esp,0x8
10000537:	8d 55 08             	lea    edx,[ebp+0x8]
1000053a:	52                   	push   edx
1000053b:	50                   	push   eax
1000053c:	e8 fc ff ff ff       	call   1000053d <lookupInFontTable(FontStyle)+0x59>	1000053d: R_386_PC32	strcmp
10000541:	83 c4 10             	add    esp,0x10
10000544:	85 c0                	test   eax,eax
10000546:	75 1a                	jne    10000562 <lookupInFontTable(FontStyle)+0x7e>
10000548:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000054b:	8b 00                	mov    eax,DWORD PTR [eax]
1000054d:	8b 90 84 00 00 00    	mov    edx,DWORD PTR [eax+0x84]
10000553:	8b 85 8c 00 00 00    	mov    eax,DWORD PTR [ebp+0x8c]
10000559:	39 c2                	cmp    edx,eax
1000055b:	75 05                	jne    10000562 <lookupInFontTable(FontStyle)+0x7e>
1000055d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000560:	eb 0b                	jmp    1000056d <lookupInFontTable(FontStyle)+0x89>
10000562:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000565:	eb 95                	jmp    100004fc <lookupInFontTable(FontStyle)+0x18>
10000567:	90                   	nop
10000568:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000056d:	c9                   	leave  
1000056e:	c3                   	ret    

1000056f <getFontHandle(FontStyle)>:
1000056f:	55                   	push   ebp
10000570:	89 e5                	mov    ebp,esp
10000572:	57                   	push   edi
10000573:	56                   	push   esi
10000574:	53                   	push   ebx
10000575:	83 ec 2c             	sub    esp,0x2c
10000578:	a1 00 00 00 00       	mov    eax,ds:0x0	10000579: R_386_32	fontTable
1000057d:	85 c0                	test   eax,eax
1000057f:	75 29                	jne    100005aa <getFontHandle(FontStyle)+0x3b>
10000581:	c7 45 d8 0c 00 00 00 	mov    DWORD PTR [ebp-0x28],0xc
10000588:	83 ec 0c             	sub    esp,0xc
1000058b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000058e:	e8 fc ff ff ff       	call   1000058f <getFontHandle(FontStyle)+0x20>	1000058f: R_386_PC32	malloc
10000593:	83 c4 10             	add    esp,0x10
10000596:	89 c3                	mov    ebx,eax
10000598:	83 ec 0c             	sub    esp,0xc
1000059b:	53                   	push   ebx
1000059c:	e8 fc ff ff ff       	call   1000059d <getFontHandle(FontStyle)+0x2e>	1000059d: R_386_PC32	LinkedList2<Font*>::LinkedList2()
100005a1:	83 c4 10             	add    esp,0x10
100005a4:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100005a6: R_386_32	fontTable
100005aa:	83 ec 08             	sub    esp,0x8
100005ad:	81 ec 88 00 00 00    	sub    esp,0x88
100005b3:	89 e0                	mov    eax,esp
100005b5:	89 c2                	mov    edx,eax
100005b7:	8d 5d 08             	lea    ebx,[ebp+0x8]
100005ba:	b8 22 00 00 00       	mov    eax,0x22
100005bf:	89 d7                	mov    edi,edx
100005c1:	89 de                	mov    esi,ebx
100005c3:	89 c1                	mov    ecx,eax
100005c5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100005c7:	e8 fc ff ff ff       	call   100005c8 <getFontHandle(FontStyle)+0x59>	100005c8: R_386_PC32	lookupInFontTable(FontStyle)
100005cc:	81 c4 90 00 00 00    	add    esp,0x90
100005d2:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100005d5:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
100005d9:	74 08                	je     100005e3 <getFontHandle(FontStyle)+0x74>
100005db:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100005de:	e9 ea 00 00 00       	jmp    100006cd <getFontHandle(FontStyle)+0x15e>
100005e3:	c7 45 d4 94 06 00 00 	mov    DWORD PTR [ebp-0x2c],0x694
100005ea:	83 ec 0c             	sub    esp,0xc
100005ed:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100005f0:	e8 fc ff ff ff       	call   100005f1 <getFontHandle(FontStyle)+0x82>	100005f1: R_386_PC32	malloc
100005f5:	83 c4 10             	add    esp,0x10
100005f8:	89 c6                	mov    esi,eax
100005fa:	89 f3                	mov    ebx,esi
100005fc:	ba a5 01 00 00       	mov    edx,0x1a5
10000601:	b8 00 00 00 00       	mov    eax,0x0
10000606:	89 df                	mov    edi,ebx
10000608:	89 d1                	mov    ecx,edx
1000060a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000060c:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
1000060f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000612:	83 ec 08             	sub    esp,0x8
10000615:	8d 55 08             	lea    edx,[ebp+0x8]
10000618:	52                   	push   edx
10000619:	50                   	push   eax
1000061a:	e8 fc ff ff ff       	call   1000061b <getFontHandle(FontStyle)+0xac>	1000061b: R_386_PC32	strcpy
1000061f:	83 c4 10             	add    esp,0x10
10000622:	8b 95 88 00 00 00    	mov    edx,DWORD PTR [ebp+0x88]
10000628:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
1000062b:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
10000631:	8b 95 8c 00 00 00    	mov    edx,DWORD PTR [ebp+0x8c]
10000637:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
1000063a:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
10000640:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
10000643:	3c 2a                	cmp    al,0x2a
10000645:	0f 94 c2             	sete   dl
10000648:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
1000064b:	88 90 88 00 00 00    	mov    BYTE PTR [eax+0x88],dl
10000651:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000654:	c7 80 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x8c],0x0
1000065e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10000665:	83 7d e4 7f          	cmp    DWORD PTR [ebp-0x1c],0x7f
10000669:	7f 19                	jg     10000684 <getFontHandle(FontStyle)+0x115>
1000066b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
1000066e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10000671:	81 c2 24 01 00 00    	add    edx,0x124
10000677:	c7 44 90 04 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x4],0x0
1000067f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10000682:	eb e1                	jmp    10000665 <getFontHandle(FontStyle)+0xf6>
10000684:	a1 00 00 00 00       	mov    eax,ds:0x0	10000685: R_386_32	fontTable
10000689:	83 ec 0c             	sub    esp,0xc
1000068c:	50                   	push   eax
1000068d:	e8 fc ff ff ff       	call   1000068e <getFontHandle(FontStyle)+0x11f>	1000068e: R_386_PC32	LinkedList2<Font*>::length()
10000692:	83 c4 10             	add    esp,0x10
10000695:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000698:	a1 00 00 00 00       	mov    eax,ds:0x0	10000699: R_386_32	fontTable
1000069d:	83 ec 08             	sub    esp,0x8
100006a0:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100006a3:	50                   	push   eax
100006a4:	e8 fc ff ff ff       	call   100006a5 <getFontHandle(FontStyle)+0x136>	100006a5: R_386_PC32	LinkedList2<Font*>::appendNode(Font*)
100006a9:	83 c4 10             	add    esp,0x10
100006ac:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100006af:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
100006b5:	85 c0                	test   eax,eax
100006b7:	75 11                	jne    100006ca <getFontHandle(FontStyle)+0x15b>
100006b9:	83 ec 08             	sub    esp,0x8
100006bc:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100006bf:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100006c2:	e8 fc ff ff ff       	call   100006c3 <getFontHandle(FontStyle)+0x154>	100006c3: R_386_PC32	loadSSFNFont(Font*, int)
100006c7:	83 c4 10             	add    esp,0x10
100006ca:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100006cd:	8d 65 f4             	lea    esp,[ebp-0xc]
100006d0:	5b                   	pop    ebx
100006d1:	5e                   	pop    esi
100006d2:	5f                   	pop    edi
100006d3:	5d                   	pop    ebp
100006d4:	c3                   	ret    

100006d5 <getFontFromHandle(int)>:
100006d5:	55                   	push   ebp
100006d6:	89 e5                	mov    ebp,esp
100006d8:	83 ec 10             	sub    esp,0x10
100006db:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
100006e2:	a1 00 00 00 00       	mov    eax,ds:0x0	100006e3: R_386_32	fontTable
100006e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100006ea:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
100006ed:	83 7d f8 00          	cmp    DWORD PTR [ebp-0x8],0x0
100006f1:	74 23                	je     10000716 <getFontFromHandle(int)+0x41>
100006f3:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100006f6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100006f9:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100006fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100006ff:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000702:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000705:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
10000708:	75 07                	jne    10000711 <getFontFromHandle(int)+0x3c>
1000070a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000070d:	8b 00                	mov    eax,DWORD PTR [eax]
1000070f:	eb 0a                	jmp    1000071b <getFontFromHandle(int)+0x46>
10000711:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000714:	eb d7                	jmp    100006ed <getFontFromHandle(int)+0x18>
10000716:	b8 00 00 00 00       	mov    eax,0x0
1000071b:	c9                   	leave  
1000071c:	c3                   	ret    

1000071d <getFontRegion(int, int, bool*, int*, int*)>:
1000071d:	55                   	push   ebp
1000071e:	89 e5                	mov    ebp,esp
10000720:	57                   	push   edi
10000721:	56                   	push   esi
10000722:	53                   	push   ebx
10000723:	83 ec 6c             	sub    esp,0x6c
10000726:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000729:	e8 fc ff ff ff       	call   1000072a <getFontRegion(int, int, bool*, int*, int*)+0xd>	1000072a: R_386_PC32	getFontFromHandle(int)
1000072e:	83 c4 04             	add    esp,0x4
10000731:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000734:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000737:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000073a:	81 c2 24 01 00 00    	add    edx,0x124
10000740:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
10000744:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000747:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000074a:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000074d:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10000751:	74 3f                	je     10000792 <getFontRegion(int, int, bool*, int*, int*)+0x75>
10000753:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000756:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000759:	83 c2 24             	add    edx,0x24
1000075c:	8b 14 90             	mov    edx,DWORD PTR [eax+edx*4]
1000075f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10000762:	89 10                	mov    DWORD PTR [eax],edx
10000764:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000767:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000076a:	81 c2 a4 00 00 00    	add    edx,0xa4
10000770:	8b 14 90             	mov    edx,DWORD PTR [eax+edx*4]
10000773:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10000776:	89 10                	mov    DWORD PTR [eax],edx
10000778:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000077b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000077e:	89 c3                	mov    ebx,eax
10000780:	b8 07 00 00 00       	mov    eax,0x7
10000785:	89 d7                	mov    edi,edx
10000787:	89 de                	mov    esi,ebx
10000789:	89 c1                	mov    ecx,eax
1000078b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000078d:	e9 1f 01 00 00       	jmp    100008b1 <getFontRegion(int, int, bool*, int*, int*)+0x194>
10000792:	83 ec 0c             	sub    esp,0xc
10000795:	8d 45 88             	lea    eax,[ebp-0x78]
10000798:	50                   	push   eax
10000799:	e8 fc ff ff ff       	call   1000079a <getFontRegion(int, int, bool*, int*, int*)+0x7d>	1000079a: R_386_PC32	Region::Region()
1000079e:	83 c4 10             	add    esp,0x10
100007a1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100007a4:	8a 80 88 00 00 00    	mov    al,BYTE PTR [eax+0x88]
100007aa:	84 c0                	test   al,al
100007ac:	74 2e                	je     100007dc <getFontRegion(int, int, bool*, int*, int*)+0xbf>
100007ae:	8d 45 a4             	lea    eax,[ebp-0x5c]
100007b1:	83 ec 0c             	sub    esp,0xc
100007b4:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
100007b7:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100007ba:	ff 75 10             	push   DWORD PTR [ebp+0x10]
100007bd:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
100007c0:	50                   	push   eax
100007c1:	e8 fc ff ff ff       	call   100007c2 <getFontRegion(int, int, bool*, int*, int*)+0xa5>	100007c2: R_386_PC32	getLegacyFontRegion(Font*, int, int*, int*)
100007c6:	83 c4 1c             	add    esp,0x1c
100007c9:	8d 45 88             	lea    eax,[ebp-0x78]
100007cc:	8d 55 a4             	lea    edx,[ebp-0x5c]
100007cf:	b9 19 00 00 00       	mov    ecx,0x19
100007d4:	89 c7                	mov    edi,eax
100007d6:	89 d6                	mov    esi,edx
100007d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100007da:	eb 2c                	jmp    10000808 <getFontRegion(int, int, bool*, int*, int*)+0xeb>
100007dc:	8d 45 c0             	lea    eax,[ebp-0x40]
100007df:	83 ec 0c             	sub    esp,0xc
100007e2:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
100007e5:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100007e8:	ff 75 10             	push   DWORD PTR [ebp+0x10]
100007eb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
100007ee:	50                   	push   eax
100007ef:	e8 fc ff ff ff       	call   100007f0 <getFontRegion(int, int, bool*, int*, int*)+0xd3>	100007f0: R_386_PC32	getSSFNFontRegion(Font*, int, int*, int*)
100007f4:	83 c4 1c             	add    esp,0x1c
100007f7:	8d 45 88             	lea    eax,[ebp-0x78]
100007fa:	8d 55 c0             	lea    edx,[ebp-0x40]
100007fd:	b9 19 00 00 00       	mov    ecx,0x19
10000802:	89 c7                	mov    edi,eax
10000804:	89 d6                	mov    esi,edx
10000806:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000808:	83 7d 10 7f          	cmp    DWORD PTR [ebp+0x10],0x7f
1000080c:	0f 8f 84 00 00 00    	jg     10000896 <getFontRegion(int, int, bool*, int*, int*)+0x179>
10000812:	c7 45 dc 1c 00 00 00 	mov    DWORD PTR [ebp-0x24],0x1c
10000819:	83 ec 0c             	sub    esp,0xc
1000081c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000081f:	e8 fc ff ff ff       	call   10000820 <getFontRegion(int, int, bool*, int*, int*)+0x103>	10000820: R_386_PC32	malloc
10000824:	83 c4 10             	add    esp,0x10
10000827:	89 c3                	mov    ebx,eax
10000829:	83 ec 0c             	sub    esp,0xc
1000082c:	6a 00                	push   0x0
1000082e:	6a 00                	push   0x0
10000830:	6a 00                	push   0x0
10000832:	6a 00                	push   0x0
10000834:	53                   	push   ebx
10000835:	e8 fc ff ff ff       	call   10000836 <getFontRegion(int, int, bool*, int*, int*)+0x119>	10000836: R_386_PC32	Region::Region(int, int, int, int)
1000083a:	83 c4 20             	add    esp,0x20
1000083d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000840:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000843:	81 c2 24 01 00 00    	add    edx,0x124
10000849:	89 5c 90 04          	mov    DWORD PTR [eax+edx*4+0x4],ebx
1000084d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000850:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000853:	81 c2 24 01 00 00    	add    edx,0x124
10000859:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
1000085d:	89 c3                	mov    ebx,eax
1000085f:	8d 45 88             	lea    eax,[ebp-0x78]
10000862:	ba 19 00 00 00       	mov    edx,0x19
10000867:	89 df                	mov    edi,ebx
10000869:	89 c6                	mov    esi,eax
1000086b:	89 d1                	mov    ecx,edx
1000086d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000086f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10000872:	8b 10                	mov    edx,DWORD PTR [eax]
10000874:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000877:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
1000087a:	83 c1 24             	add    ecx,0x24
1000087d:	89 14 88             	mov    DWORD PTR [eax+ecx*4],edx
10000880:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10000883:	8b 10                	mov    edx,DWORD PTR [eax]
10000885:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000888:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
1000088b:	81 c1 a4 00 00 00    	add    ecx,0xa4
10000891:	89 14 88             	mov    DWORD PTR [eax+ecx*4],edx
10000894:	eb 06                	jmp    1000089c <getFontRegion(int, int, bool*, int*, int*)+0x17f>
10000896:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10000899:	c6 00 01             	mov    BYTE PTR [eax],0x1
1000089c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000089f:	89 c3                	mov    ebx,eax
100008a1:	8d 45 88             	lea    eax,[ebp-0x78]
100008a4:	ba 07 00 00 00       	mov    edx,0x7
100008a9:	89 df                	mov    edi,ebx
100008ab:	89 c6                	mov    esi,eax
100008ad:	89 d1                	mov    ecx,edx
100008af:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008b4:	8d 65 f4             	lea    esp,[ebp-0xc]
100008b7:	5b                   	pop    ebx
100008b8:	5e                   	pop    esi
100008b9:	5f                   	pop    edi
100008ba:	5d                   	pop    ebp
100008bb:	c2 04 00             	ret    0x4

100008be <initFonts()>:
100008be:	55                   	push   ebp
100008bf:	89 e5                	mov    ebp,esp
100008c1:	83 ec 08             	sub    esp,0x8
100008c4:	e8 fc ff ff ff       	call   100008c5 <initFonts()+0x7>	100008c5: R_386_PC32	loadLegacyFonts()
100008c9:	90                   	nop
100008ca:	c9                   	leave  
100008cb:	c3                   	ret    

100008cc <loadFont(FontStyle)>:
100008cc:	55                   	push   ebp
100008cd:	89 e5                	mov    ebp,esp
100008cf:	57                   	push   edi
100008d0:	56                   	push   esi
100008d1:	53                   	push   ebx
100008d2:	83 ec 0c             	sub    esp,0xc
100008d5:	83 ec 08             	sub    esp,0x8
100008d8:	81 ec 88 00 00 00    	sub    esp,0x88
100008de:	89 e0                	mov    eax,esp
100008e0:	89 c2                	mov    edx,eax
100008e2:	8d 5d 08             	lea    ebx,[ebp+0x8]
100008e5:	b8 22 00 00 00       	mov    eax,0x22
100008ea:	89 d7                	mov    edi,edx
100008ec:	89 de                	mov    esi,ebx
100008ee:	89 c1                	mov    ecx,eax
100008f0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008f2:	e8 fc ff ff ff       	call   100008f3 <loadFont(FontStyle)+0x27>	100008f3: R_386_PC32	getFontHandle(FontStyle)
100008f7:	81 c4 90 00 00 00    	add    esp,0x90
100008fd:	8d 65 f4             	lea    esp,[ebp-0xc]
10000900:	5b                   	pop    ebx
10000901:	5e                   	pop    esi
10000902:	5f                   	pop    edi
10000903:	5d                   	pop    ebp
10000904:	c3                   	ret    

10000905 <reverse(unsigned char)>:
10000905:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
10000909:	c0 c0 04             	rol    al,0x4
1000090c:	0f b6 c0             	movzx  eax,al
1000090f:	89 c2                	mov    edx,eax
10000911:	c1 e0 02             	shl    eax,0x2
10000914:	c1 fa 02             	sar    edx,0x2
10000917:	83 e0 cc             	and    eax,0xffffffcc
1000091a:	83 e2 33             	and    edx,0x33
1000091d:	09 c2                	or     edx,eax
1000091f:	0f b6 d2             	movzx  edx,dl
10000922:	89 d0                	mov    eax,edx
10000924:	01 d2                	add    edx,edx
10000926:	d1 f8                	sar    eax,1
10000928:	83 e2 aa             	and    edx,0xffffffaa
1000092b:	83 e0 55             	and    eax,0x55
1000092e:	09 d0                	or     eax,edx
10000930:	c3                   	ret    

10000931 <loadLegacyFonts()>:
10000931:	57                   	push   edi
10000932:	b9 10 10 00 00       	mov    ecx,0x1010
10000937:	56                   	push   esi
10000938:	bf 00 00 00 00       	mov    edi,0x0	10000939: R_386_32	FONT
1000093d:	53                   	push   ebx
1000093e:	be 00 00 00 00       	mov    esi,0x0	1000093f: R_386_32	systemFontBuiltin
10000943:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000945:	b9 00 02 00 00       	mov    ecx,0x200
1000094a:	0f be 81 10 00 00 00 	movsx  eax,BYTE PTR [ecx+0x10]	1000094d: R_386_32	FONT
10000951:	8a 91 1f 00 00 00    	mov    dl,BYTE PTR [ecx+0x1f]	10000953: R_386_32	FONT
10000957:	6b f0 1c             	imul   esi,eax,0x1c
1000095a:	88 90 00 00 00 00    	mov    BYTE PTR [eax+0x0],dl	1000095c: R_386_32	FontWidths
10000960:	31 db                	xor    ebx,ebx
10000962:	0f b6 84 19 11 00 00 00 	movzx  eax,BYTE PTR [ecx+ebx*1+0x11]	10000966: R_386_32	FONT
1000096a:	50                   	push   eax
1000096b:	e8 fc ff ff ff       	call   1000096c <loadLegacyFonts()+0x3b>	1000096c: R_386_PC32	reverse(unsigned char)
10000970:	5a                   	pop    edx
10000971:	0f b6 c0             	movzx  eax,al
10000974:	66 89 84 5e 00 00 00 00 	mov    WORD PTR [esi+ebx*2+0x0],ax	10000978: R_386_32	Fonts
1000097c:	43                   	inc    ebx
1000097d:	83 fb 0e             	cmp    ebx,0xe
10000980:	75 e0                	jne    10000962 <loadLegacyFonts()+0x31>
10000982:	83 c1 10             	add    ecx,0x10
10000985:	81 f9 00 08 00 00    	cmp    ecx,0x800
1000098b:	75 bd                	jne    1000094a <loadLegacyFonts()+0x19>
1000098d:	5b                   	pop    ebx
1000098e:	5e                   	pop    esi
1000098f:	5f                   	pop    edi
10000990:	c3                   	ret    

10000991 <getLegacyFontRegion(Font*, int, int*, int*)>:
10000991:	55                   	push   ebp
10000992:	b9 38 00 00 00       	mov    ecx,0x38
10000997:	57                   	push   edi
10000998:	56                   	push   esi
10000999:	53                   	push   ebx
1000099a:	81 ec fc 00 00 00    	sub    esp,0xfc
100009a0:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
100009a7:	8d 74 24 10          	lea    esi,[esp+0x10]
100009ab:	8b 9a 84 00 00 00    	mov    ebx,DWORD PTR [edx+0x84]
100009b1:	89 f7                	mov    edi,esi
100009b3:	89 d8                	mov    eax,ebx
100009b5:	8b b2 8c 00 00 00    	mov    esi,DWORD PTR [edx+0x8c]
100009bb:	83 e0 02             	and    eax,0x2
100009be:	69 d6 e4 1b 00 00    	imul   edx,esi,0x1be4
100009c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100009c8:	83 e3 01             	and    ebx,0x1
100009cb:	31 c0                	xor    eax,eax
100009cd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100009cf:	6b 84 24 18 01 00 00 1c 	imul   eax,DWORD PTR [esp+0x118],0x1c
100009d7:	01 d0                	add    eax,edx
100009d9:	31 d2                	xor    edx,edx
100009db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100009df:	31 c0                	xor    eax,eax
100009e1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
100009e6:	74 0a                	je     100009f2 <getLegacyFontRegion(Font*, int, int*, int*)+0x61>
100009e8:	b8 0e 00 00 00       	mov    eax,0xe
100009ed:	29 d0                	sub    eax,edx
100009ef:	c1 f8 02             	sar    eax,0x2
100009f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100009f6:	89 d5                	mov    ebp,edx
100009f8:	0f b6 bc 57 00 00 00 00 	movzx  edi,BYTE PTR [edi+edx*2+0x0]	100009fc: R_386_32	Fonts
10000a00:	c1 e5 04             	shl    ebp,0x4
10000a03:	8d 0c 28             	lea    ecx,[eax+ebp*1]
10000a06:	8d 6c 28 08          	lea    ebp,[eax+ebp*1+0x8]
10000a0a:	89 f8                	mov    eax,edi
10000a0c:	83 e7 01             	and    edi,0x1
10000a0f:	0f b6 c0             	movzx  eax,al
10000a12:	74 0e                	je     10000a22 <getLegacyFontRegion(Font*, int, int*, int*)+0x91>
10000a14:	c6 44 0c 10 01       	mov    BYTE PTR [esp+ecx*1+0x10],0x1
10000a19:	85 db                	test   ebx,ebx
10000a1b:	74 05                	je     10000a22 <getLegacyFontRegion(Font*, int, int*, int*)+0x91>
10000a1d:	c6 44 0c 11 01       	mov    BYTE PTR [esp+ecx*1+0x11],0x1
10000a22:	d1 f8                	sar    eax,1
10000a24:	41                   	inc    ecx
10000a25:	89 c7                	mov    edi,eax
10000a27:	39 cd                	cmp    ebp,ecx
10000a29:	75 df                	jne    10000a0a <getLegacyFontRegion(Font*, int, int*, int*)+0x79>
10000a2b:	42                   	inc    edx
10000a2c:	83 fa 0e             	cmp    edx,0xe
10000a2f:	75 ae                	jne    100009df <getLegacyFontRegion(Font*, int, int*, int*)+0x4e>
10000a31:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
10000a38:	69 f6 ff 00 00 00    	imul   esi,esi,0xff
10000a3e:	0f b6 84 30 00 00 00 00 	movzx  eax,BYTE PTR [eax+esi*1+0x0]	10000a42: R_386_32	FontWidths
10000a46:	01 c3                	add    ebx,eax
10000a48:	8b 84 24 1c 01 00 00 	mov    eax,DWORD PTR [esp+0x11c]
10000a4f:	89 18                	mov    DWORD PTR [eax],ebx
10000a51:	8b 84 24 20 01 00 00 	mov    eax,DWORD PTR [esp+0x120]
10000a58:	c7 00 0e 00 00 00    	mov    DWORD PTR [eax],0xe
10000a5e:	50                   	push   eax
10000a5f:	50                   	push   eax
10000a60:	6a 0e                	push   0xe
10000a62:	6a 10                	push   0x10
10000a64:	8d 44 24 20          	lea    eax,[esp+0x20]
10000a68:	50                   	push   eax
10000a69:	6a 00                	push   0x0
10000a6b:	6a 00                	push   0x0
10000a6d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
10000a74:	e8 fc ff ff ff       	call   10000a75 <getLegacyFontRegion(Font*, int, int*, int*)+0xe4>	10000a75: R_386_PC32	createTightFontRegion(int, int, unsigned char*, int, int)
10000a79:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
10000a80:	81 c4 18 01 00 00    	add    esp,0x118
10000a86:	5b                   	pop    ebx
10000a87:	5e                   	pop    esi
10000a88:	5f                   	pop    edi
10000a89:	5d                   	pop    ebp
10000a8a:	c2 04 00             	ret    0x4

10000a8d <loadCursorFile(char const*)>:
10000a8d:	57                   	push   edi
10000a8e:	56                   	push   esi
10000a8f:	53                   	push   ebx
10000a90:	83 ec 2c             	sub    esp,0x2c
10000a93:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10000a97:	68 14 01 00 00       	push   0x114
10000a9c:	e8 fc ff ff ff       	call   10000a9d <loadCursorFile(char const*)+0x10>	10000a9d: R_386_PC32	malloc
10000aa1:	83 c4 0c             	add    esp,0xc
10000aa4:	89 c6                	mov    esi,eax
10000aa6:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000aa8: R_386_32	kernelProcess
10000aac:	53                   	push   ebx
10000aad:	50                   	push   eax
10000aae:	e8 fc ff ff ff       	call   10000aaf <loadCursorFile(char const*)+0x22>	10000aaf: R_386_PC32	File::File(char const*, Process*)
10000ab3:	5a                   	pop    edx
10000ab4:	59                   	pop    ecx
10000ab5:	6a 01                	push   0x1
10000ab7:	56                   	push   esi
10000ab8:	e8 fc ff ff ff       	call   10000ab9 <loadCursorFile(char const*)+0x2c>	10000ab9: R_386_PC32	File::open(FileOpenMode)
10000abd:	83 c4 10             	add    esp,0x10
10000ac0:	85 c0                	test   eax,eax
10000ac2:	74 0a                	je     10000ace <loadCursorFile(char const*)+0x41>
10000ac4:	83 ec 0c             	sub    esp,0xc
10000ac7:	68 38 86 00 10       	push   0x10008638	10000ac8: R_386_32	.text
10000acc:	eb 5b                	jmp    10000b29 <loadCursorFile(char const*)+0x9c>
10000ace:	50                   	push   eax
10000acf:	8d 44 24 17          	lea    eax,[esp+0x17]
10000ad3:	50                   	push   eax
10000ad4:	8d 44 24 20          	lea    eax,[esp+0x20]
10000ad8:	50                   	push   eax
10000ad9:	56                   	push   esi
10000ada:	e8 fc ff ff ff       	call   10000adb <loadCursorFile(char const*)+0x4e>	10000adb: R_386_PC32	File::stat(unsigned long long*, bool*)
10000adf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
10000ae3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10000ae7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
10000aeb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10000aef:	58                   	pop    eax
10000af0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10000af4:	e8 fc ff ff ff       	call   10000af5 <loadCursorFile(char const*)+0x68>	10000af5: R_386_PC32	malloc
10000af9:	89 c3                	mov    ebx,eax
10000afb:	58                   	pop    eax
10000afc:	8b 06                	mov    eax,DWORD PTR [esi]
10000afe:	8d 4c 24 20          	lea    ecx,[esp+0x20]
10000b02:	51                   	push   ecx
10000b03:	53                   	push   ebx
10000b04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000b08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000b0c:	56                   	push   esi
10000b0d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10000b10:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10000b14:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10000b18:	83 c4 20             	add    esp,0x20
10000b1b:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
10000b1f:	74 17                	je     10000b38 <loadCursorFile(char const*)+0xab>
10000b21:	83 ec 0c             	sub    esp,0xc
10000b24:	68 4c 86 00 10       	push   0x1000864c	10000b25: R_386_32	.text
10000b29:	e8 fc ff ff ff       	call   10000b2a <loadCursorFile(char const*)+0x9d>	10000b2a: R_386_PC32	Dbg::kprintf(char const*, ...)
10000b2e:	83 c4 10             	add    esp,0x10
10000b31:	83 c4 20             	add    esp,0x20
10000b34:	5b                   	pop    ebx
10000b35:	5e                   	pop    esi
10000b36:	5f                   	pop    edi
10000b37:	c3                   	ret    
10000b38:	6a 00                	push   0x0
10000b3a:	68 04 01 00 00       	push   0x104
10000b3f:	52                   	push   edx
10000b40:	50                   	push   eax
10000b41:	e8 fc ff ff ff       	call   10000b42 <loadCursorFile(char const*)+0xb5>	10000b42: R_386_PC32	__udivdi3
10000b46:	83 c4 10             	add    esp,0x10
10000b49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000b4d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10000b54:	8d 04 83             	lea    eax,[ebx+eax*4]
10000b57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000b5b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10000b5f:	39 14 24             	cmp    DWORD PTR [esp],edx
10000b62:	0f 8d f8 00 00 00    	jge    10000c60 <loadCursorFile(char const*)+0x1d3>
10000b68:	8b 04 24             	mov    eax,DWORD PTR [esp]
10000b6b:	8d 34 83             	lea    esi,[ebx+eax*4]
10000b6e:	50                   	push   eax
10000b6f:	6a 04                	push   0x4
10000b71:	68 60 86 00 10       	push   0x10008660	10000b72: R_386_32	.text
10000b76:	56                   	push   esi
10000b77:	e8 fc ff ff ff       	call   10000b78 <loadCursorFile(char const*)+0xeb>	10000b78: R_386_PC32	memcmp
10000b7c:	83 c4 10             	add    esp,0x10
10000b7f:	85 c0                	test   eax,eax
10000b81:	0f 84 b8 00 00 00    	je     10000c3f <loadCursorFile(char const*)+0x1b2>
10000b87:	50                   	push   eax
10000b88:	6a 04                	push   0x4
10000b8a:	68 65 86 00 10       	push   0x10008665	10000b8b: R_386_32	.text
10000b8f:	56                   	push   esi
10000b90:	e8 fc ff ff ff       	call   10000b91 <loadCursorFile(char const*)+0x104>	10000b91: R_386_PC32	memcmp
10000b95:	83 c4 10             	add    esp,0x10
10000b98:	85 c0                	test   eax,eax
10000b9a:	74 7b                	je     10000c17 <loadCursorFile(char const*)+0x18a>
10000b9c:	50                   	push   eax
10000b9d:	6a 04                	push   0x4
10000b9f:	68 6a 86 00 10       	push   0x1000866a	10000ba0: R_386_32	.text
10000ba4:	56                   	push   esi
10000ba5:	e8 fc ff ff ff       	call   10000ba6 <loadCursorFile(char const*)+0x119>	10000ba6: R_386_PC32	memcmp
10000baa:	83 c4 10             	add    esp,0x10
10000bad:	85 c0                	test   eax,eax
10000baf:	74 6d                	je     10000c1e <loadCursorFile(char const*)+0x191>
10000bb1:	57                   	push   edi
10000bb2:	6a 04                	push   0x4
10000bb4:	68 6f 86 00 10       	push   0x1000866f	10000bb5: R_386_32	.text
10000bb9:	56                   	push   esi
10000bba:	e8 fc ff ff ff       	call   10000bbb <loadCursorFile(char const*)+0x12e>	10000bbb: R_386_PC32	memcmp
10000bbf:	83 c4 10             	add    esp,0x10
10000bc2:	85 c0                	test   eax,eax
10000bc4:	74 5f                	je     10000c25 <loadCursorFile(char const*)+0x198>
10000bc6:	51                   	push   ecx
10000bc7:	6a 04                	push   0x4
10000bc9:	68 74 86 00 10       	push   0x10008674	10000bca: R_386_32	.text
10000bce:	56                   	push   esi
10000bcf:	e8 fc ff ff ff       	call   10000bd0 <loadCursorFile(char const*)+0x143>	10000bd0: R_386_PC32	memcmp
10000bd4:	83 c4 10             	add    esp,0x10
10000bd7:	85 c0                	test   eax,eax
10000bd9:	74 51                	je     10000c2c <loadCursorFile(char const*)+0x19f>
10000bdb:	52                   	push   edx
10000bdc:	6a 04                	push   0x4
10000bde:	68 79 86 00 10       	push   0x10008679	10000bdf: R_386_32	.text
10000be3:	56                   	push   esi
10000be4:	e8 fc ff ff ff       	call   10000be5 <loadCursorFile(char const*)+0x158>	10000be5: R_386_PC32	memcmp
10000be9:	83 c4 10             	add    esp,0x10
10000bec:	85 c0                	test   eax,eax
10000bee:	74 43                	je     10000c33 <loadCursorFile(char const*)+0x1a6>
10000bf0:	50                   	push   eax
10000bf1:	6a 04                	push   0x4
10000bf3:	68 7e 86 00 10       	push   0x1000867e	10000bf4: R_386_32	.text
10000bf8:	56                   	push   esi
10000bf9:	e8 fc ff ff ff       	call   10000bfa <loadCursorFile(char const*)+0x16d>	10000bfa: R_386_PC32	memcmp
10000bfe:	83 c4 10             	add    esp,0x10
10000c01:	85 c0                	test   eax,eax
10000c03:	74 35                	je     10000c3a <loadCursorFile(char const*)+0x1ad>
10000c05:	83 ec 0c             	sub    esp,0xc
10000c08:	68 83 86 00 10       	push   0x10008683	10000c09: R_386_32	.text
10000c0d:	e8 fc ff ff ff       	call   10000c0e <loadCursorFile(char const*)+0x181>	10000c0e: R_386_PC32	Dbg::kprintf(char const*, ...)
10000c12:	83 c4 10             	add    esp,0x10
10000c15:	eb 49                	jmp    10000c60 <loadCursorFile(char const*)+0x1d3>
10000c17:	b8 00 02 00 00       	mov    eax,0x200
10000c1c:	eb 21                	jmp    10000c3f <loadCursorFile(char const*)+0x1b2>
10000c1e:	b8 00 03 00 00       	mov    eax,0x300
10000c23:	eb 1a                	jmp    10000c3f <loadCursorFile(char const*)+0x1b2>
10000c25:	b8 00 01 00 00       	mov    eax,0x100
10000c2a:	eb 13                	jmp    10000c3f <loadCursorFile(char const*)+0x1b2>
10000c2c:	b8 00 04 00 00       	mov    eax,0x400
10000c31:	eb 0c                	jmp    10000c3f <loadCursorFile(char const*)+0x1b2>
10000c33:	b8 00 05 00 00       	mov    eax,0x500
10000c38:	eb 05                	jmp    10000c3f <loadCursorFile(char const*)+0x1b2>
10000c3a:	b8 00 06 00 00       	mov    eax,0x600
10000c3f:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10000c41: R_386_32	___mouse_data
10000c45:	b9 00 01 00 00       	mov    ecx,0x100
10000c4a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10000c4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000c50:	ff 04 24             	inc    DWORD PTR [esp]
10000c53:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10000c5b:	e9 fb fe ff ff       	jmp    10000b5b <loadCursorFile(char const*)+0xce>
10000c60:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
10000c64:	83 c4 20             	add    esp,0x20
10000c67:	5b                   	pop    ebx
10000c68:	5e                   	pop    esi
10000c69:	5f                   	pop    edi
10000c6a:	e9 fc ff ff ff       	jmp    10000c6b <loadCursorFile(char const*)+0x1de>	10000c6b: R_386_PC32	free

10000c6f <mouseInit(Video*)>:
10000c6f:	57                   	push   edi
10000c70:	bf 00 00 00 00       	mov    edi,0x0	10000c71: R_386_32	tightMouseRegionOld
10000c75:	56                   	push   esi
10000c76:	53                   	push   ebx
10000c77:	83 ec 2c             	sub    esp,0x2c
10000c7a:	68 97 86 00 10       	push   0x10008697	10000c7b: R_386_32	.text
10000c7f:	8d 5c 24 14          	lea    ebx,[esp+0x14]
10000c83:	e8 fc ff ff ff       	call   10000c84 <mouseInit(Video*)+0x15>	10000c84: R_386_PC32	loadCursorFile(char const*)
10000c88:	89 de                	mov    esi,ebx
10000c8a:	68 00 00 00 00       	push   0x0	10000c8b: R_386_32	___mouse_data
10000c8f:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000c91: R_386_32	cursorOffset
10000c99:	6a 00                	push   0x0
10000c9b:	6a 00                	push   0x0
10000c9d:	53                   	push   ebx
10000c9e:	e8 fc ff ff ff       	call   10000c9f <mouseInit(Video*)+0x30>	10000c9f: R_386_PC32	createTightCursorRegion(int, int, unsigned int*)
10000ca3:	a1 00 00 00 00       	mov    eax,ds:0x0	10000ca4: R_386_32	cursorOffset
10000ca8:	83 c4 1c             	add    esp,0x1c
10000cab:	05 00 00 00 00       	add    eax,0x0	10000cac: R_386_32	___mouse_data
10000cb0:	b9 19 00 00 00       	mov    ecx,0x19
10000cb5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000cb7:	50                   	push   eax
10000cb8:	89 de                	mov    esi,ebx
10000cba:	6a 00                	push   0x0
10000cbc:	bf 00 00 00 00       	mov    edi,0x0	10000cbd: R_386_32	tightMouseRegionNew
10000cc1:	6a 00                	push   0x0
10000cc3:	53                   	push   ebx
10000cc4:	e8 fc ff ff ff       	call   10000cc5 <mouseInit(Video*)+0x56>	10000cc5: R_386_PC32	createTightCursorRegion(int, int, unsigned int*)
10000cc9:	b9 19 00 00 00       	mov    ecx,0x19
10000cce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000cd0:	83 c4 2c             	add    esp,0x2c
10000cd3:	5b                   	pop    ebx
10000cd4:	5e                   	pop    esi
10000cd5:	5f                   	pop    edi
10000cd6:	c3                   	ret    

10000cd7 <hideCursor(Video*, int, int, int, int)>:
10000cd7:	57                   	push   edi
10000cd8:	b8 00 00 00 00       	mov    eax,0x0	10000cd9: R_386_32	tightMouseRegionOld
10000cdd:	56                   	push   esi
10000cde:	be 00 00 00 00       	mov    esi,0x0	10000cdf: R_386_32	tightMouseRegionNew
10000ce3:	53                   	push   ebx
10000ce4:	83 ec 30             	sub    esp,0x30
10000ce7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
10000ceb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10000cef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10000cf3:	8d 5c 24 14          	lea    ebx,[esp+0x14]
10000cf7:	89 0d 10 00 00 00    	mov    DWORD PTR ds:0x10,ecx	10000cf9: R_386_32	tightMouseRegionOld
10000cfd:	83 ec 20             	sub    esp,0x20
10000d00:	8b 4c 24 68          	mov    ecx,DWORD PTR [esp+0x68]
10000d04:	89 0d 14 00 00 00    	mov    DWORD PTR ds:0x14,ecx	10000d06: R_386_32	tightMouseRegionOld
10000d0a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10000d0e:	89 0d 10 00 00 00    	mov    DWORD PTR ds:0x10,ecx	10000d10: R_386_32	tightMouseRegionNew
10000d14:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
10000d18:	89 e7                	mov    edi,esp
10000d1a:	89 0d 14 00 00 00    	mov    DWORD PTR ds:0x14,ecx	10000d1c: R_386_32	tightMouseRegionNew
10000d20:	83 ec 1c             	sub    esp,0x1c
10000d23:	b9 07 00 00 00       	mov    ecx,0x7
10000d28:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d2a:	89 c6                	mov    esi,eax
10000d2c:	89 e7                	mov    edi,esp
10000d2e:	b9 07 00 00 00       	mov    ecx,0x7
10000d33:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d35:	53                   	push   ebx
10000d36:	89 de                	mov    esi,ebx
10000d38:	e8 fc ff ff ff       	call   10000d39 <hideCursor(Video*, int, int, int, int)+0x62>	10000d39: R_386_PC32	getRegionDifference(Region, Region)
10000d3d:	b9 07 00 00 00       	mov    ecx,0x7
10000d42:	83 c4 30             	add    esp,0x30
10000d45:	68 80 80 00 00       	push   0x8080
10000d4a:	83 ec 1c             	sub    esp,0x1c
10000d4d:	89 e7                	mov    edi,esp
10000d4f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d51:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
10000d55:	52                   	push   edx
10000d56:	e8 fc ff ff ff       	call   10000d57 <hideCursor(Video*, int, int, int, int)+0x80>	10000d57: R_386_PC32	fillRegion(Video*, Region, unsigned int)
10000d5b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10000d5f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10000d63:	83 c4 60             	add    esp,0x60
10000d66:	5b                   	pop    ebx
10000d67:	5e                   	pop    esi
10000d68:	5f                   	pop    edi
10000d69:	e9 fc ff ff ff       	jmp    10000d6a <hideCursor(Video*, int, int, int, int)+0x93>	10000d6a: R_386_PC32	free

10000d6e <showCursor(Video*)>:
10000d6e:	83 ec 0c             	sub    esp,0xc
10000d71:	a1 00 00 00 00       	mov    eax,ds:0x0	10000d72: R_386_32	cursorOffset
10000d76:	05 00 00 00 00       	add    eax,0x0	10000d77: R_386_32	___mouse_data
10000d7b:	50                   	push   eax
10000d7c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000d7e: R_386_32	mouseY
10000d82:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000d84: R_386_32	mouseX
10000d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000d8c:	e8 fc ff ff ff       	call   10000d8d <showCursor(Video*)+0x1f>	10000d8d: R_386_PC32	videoDrawCursor(Video*, int, int, unsigned int*)
10000d91:	83 c4 1c             	add    esp,0x1c
10000d94:	c3                   	ret    

10000d95 <changeCursor(Video*, int)>:
10000d95:	c3                   	ret    

10000d96 <handleMouse(Video*, int, int, int, int, int)>:
10000d96:	57                   	push   edi
10000d97:	56                   	push   esi
10000d98:	53                   	push   ebx
10000d99:	83 ec 20             	sub    esp,0x20
10000d9c:	a1 00 00 00 00       	mov    eax,ds:0x0	10000d9d: R_386_32	mouseX
10000da1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
10000da5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000da9:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10000dab: R_386_32	mouseButtons
10000daf:	a1 00 00 00 00       	mov    eax,ds:0x0	10000db0: R_386_32	mouseY
10000db4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10000db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10000dbc:	03 54 24 34          	add    edx,DWORD PTR [esp+0x34]
10000dc0:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10000dc4:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10000dc6: R_386_32	mouseX
10000dca:	a3 00 00 00 00       	mov    ds:0x0,eax	10000dcb: R_386_32	mouseY
10000dcf:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000dd1: R_386_32	mouseButtons
10000dd5:	85 d2                	test   edx,edx
10000dd7:	79 0a                	jns    10000de3 <handleMouse(Video*, int, int, int, int, int)+0x4d>
10000dd9:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000ddb: R_386_32	mouseX
10000de3:	85 c0                	test   eax,eax
10000de5:	79 0a                	jns    10000df1 <handleMouse(Video*, int, int, int, int, int)+0x5b>
10000de7:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000de9: R_386_32	mouseY
10000df1:	83 ec 0c             	sub    esp,0xc
10000df4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10000df8:	e8 fc ff ff ff       	call   10000df9 <handleMouse(Video*, int, int, int, int, int)+0x63>	10000df9: R_386_PC32	Video::getWidth()
10000dfd:	83 c4 10             	add    esp,0x10
10000e00:	3b 05 00 00 00 00    	cmp    eax,DWORD PTR ds:0x0	10000e02: R_386_32	mouseX
10000e06:	7f 15                	jg     10000e1d <handleMouse(Video*, int, int, int, int, int)+0x87>
10000e08:	83 ec 0c             	sub    esp,0xc
10000e0b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10000e0f:	e8 fc ff ff ff       	call   10000e10 <handleMouse(Video*, int, int, int, int, int)+0x7a>	10000e10: R_386_PC32	Video::getWidth()
10000e14:	83 c4 10             	add    esp,0x10
10000e17:	48                   	dec    eax
10000e18:	a3 00 00 00 00       	mov    ds:0x0,eax	10000e19: R_386_32	mouseX
10000e1d:	83 ec 0c             	sub    esp,0xc
10000e20:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10000e24:	e8 fc ff ff ff       	call   10000e25 <handleMouse(Video*, int, int, int, int, int)+0x8f>	10000e25: R_386_PC32	Video::getHeight()
10000e29:	83 c4 10             	add    esp,0x10
10000e2c:	3b 05 00 00 00 00    	cmp    eax,DWORD PTR ds:0x0	10000e2e: R_386_32	mouseY
10000e32:	7f 15                	jg     10000e49 <handleMouse(Video*, int, int, int, int, int)+0xb3>
10000e34:	83 ec 0c             	sub    esp,0xc
10000e37:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10000e3b:	e8 fc ff ff ff       	call   10000e3c <handleMouse(Video*, int, int, int, int, int)+0xa6>	10000e3c: R_386_PC32	Video::getHeight()
10000e40:	83 c4 10             	add    esp,0x10
10000e43:	48                   	dec    eax
10000e44:	a3 00 00 00 00       	mov    ds:0x0,eax	10000e45: R_386_32	mouseY
10000e49:	83 ec 0c             	sub    esp,0xc
10000e4c:	83 e3 01             	and    ebx,0x1
10000e4f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000e51: R_386_32	mouseY
10000e55:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000e57: R_386_32	mouseX
10000e5b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000e5f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000e63:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000e67:	e8 fc ff ff ff       	call   10000e68 <handleMouse(Video*, int, int, int, int, int)+0xd2>	10000e68: R_386_PC32	hideCursor(Video*, int, int, int, int)
10000e6c:	83 c4 14             	add    esp,0x14
10000e6f:	6a 01                	push   0x1
10000e71:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000e73: R_386_32	mouseY
10000e77:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000e79: R_386_32	mouseX
10000e7d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10000e81:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000e83: R_386_32	desktopWindow
10000e87:	e8 fc ff ff ff       	call   10000e88 <handleMouse(Video*, int, int, int, int, int)+0xf2>	10000e88: R_386_PC32	NFrame::getPixelOwner(Video*, int, int, bool)
10000e8c:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10000e90:	89 c7                	mov    edi,eax
10000e92:	83 c4 20             	add    esp,0x20
10000e95:	83 e6 01             	and    esi,0x1
10000e98:	0f 84 da 04 00 00    	je     10001378 <handleMouse(Video*, int, int, int, int, int)+0x5e2>
10000e9e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
10000ea3:	0f 85 4d 02 00 00    	jne    100010f6 <handleMouse(Video*, int, int, int, int, int)+0x360>
10000ea9:	be 0a 00 00 00       	mov    esi,0xa
10000eae:	a1 00 00 00 00       	mov    eax,ds:0x0	10000eaf: R_386_32	milliTenthsSinceBoot
10000eb3:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	10000eb5: R_386_32	milliTenthsSinceBoot
10000eb9:	89 c1                	mov    ecx,eax
10000ebb:	89 d3                	mov    ebx,edx
10000ebd:	2b 0d b0 f6 00 10    	sub    ecx,DWORD PTR ds:0x1000f6b0	10000ebf: R_386_32	.bss
10000ec3:	a3 b0 f6 00 10       	mov    ds:0x1000f6b0,eax	10000ec4: R_386_32	.bss
10000ec8:	1b 1d b4 f6 00 10    	sbb    ebx,DWORD PTR ds:0x1000f6b4	10000eca: R_386_32	.bss
10000ece:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
10000ed2:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10000ed6:	b9 a0 86 01 00       	mov    ecx,0x186a0
10000edb:	83 ec 0c             	sub    esp,0xc
10000ede:	89 15 b4 f6 00 10    	mov    DWORD PTR ds:0x1000f6b4,edx	10000ee0: R_386_32	.bss
10000ee4:	a1 00 00 00 00       	mov    eax,ds:0x0	10000ee5: R_386_32	Phys::usablePages
10000ee9:	c1 e0 02             	shl    eax,0x2
10000eec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000ef0:	6a 00                	push   0x0
10000ef2:	a1 00 00 00 00       	mov    eax,ds:0x0	10000ef3: R_386_32	Phys::usedPages
10000ef7:	68 ff ff ff 00       	push   0xffffff
10000efc:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10000f03:	89 d8                	mov    eax,ebx
10000f05:	99                   	cdq    
10000f06:	f7 f9                	idiv   ecx
10000f08:	99                   	cdq    
10000f09:	f7 fe                	idiv   esi
10000f0b:	8d 42 30             	lea    eax,[edx+0x30]
10000f0e:	50                   	push   eax
10000f0f:	6a 00                	push   0x0
10000f11:	6a 00                	push   0x0
10000f13:	e8 fc ff ff ff       	call   10000f14 <handleMouse(Video*, int, int, int, int, int)+0x17e>	10000f14: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000f18:	83 c4 14             	add    esp,0x14
10000f1b:	b9 10 27 00 00       	mov    ecx,0x2710
10000f20:	6a 00                	push   0x0
10000f22:	89 d8                	mov    eax,ebx
10000f24:	68 ff ff ff 00       	push   0xffffff
10000f29:	99                   	cdq    
10000f2a:	f7 f9                	idiv   ecx
10000f2c:	99                   	cdq    
10000f2d:	f7 fe                	idiv   esi
10000f2f:	8d 42 30             	lea    eax,[edx+0x30]
10000f32:	50                   	push   eax
10000f33:	6a 00                	push   0x0
10000f35:	6a 01                	push   0x1
10000f37:	e8 fc ff ff ff       	call   10000f38 <handleMouse(Video*, int, int, int, int, int)+0x1a2>	10000f38: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000f3c:	83 c4 14             	add    esp,0x14
10000f3f:	89 d8                	mov    eax,ebx
10000f41:	6a 00                	push   0x0
10000f43:	b9 e8 03 00 00       	mov    ecx,0x3e8
10000f48:	68 ff ff ff 00       	push   0xffffff
10000f4d:	99                   	cdq    
10000f4e:	f7 f9                	idiv   ecx
10000f50:	99                   	cdq    
10000f51:	f7 fe                	idiv   esi
10000f53:	8d 42 30             	lea    eax,[edx+0x30]
10000f56:	50                   	push   eax
10000f57:	6a 00                	push   0x0
10000f59:	6a 02                	push   0x2
10000f5b:	e8 fc ff ff ff       	call   10000f5c <handleMouse(Video*, int, int, int, int, int)+0x1c6>	10000f5c: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000f60:	83 c4 14             	add    esp,0x14
10000f63:	b9 64 00 00 00       	mov    ecx,0x64
10000f68:	6a 00                	push   0x0
10000f6a:	89 d8                	mov    eax,ebx
10000f6c:	68 ff ff ff 00       	push   0xffffff
10000f71:	99                   	cdq    
10000f72:	f7 f9                	idiv   ecx
10000f74:	99                   	cdq    
10000f75:	f7 fe                	idiv   esi
10000f77:	8d 42 30             	lea    eax,[edx+0x30]
10000f7a:	50                   	push   eax
10000f7b:	6a 00                	push   0x0
10000f7d:	6a 03                	push   0x3
10000f7f:	e8 fc ff ff ff       	call   10000f80 <handleMouse(Video*, int, int, int, int, int)+0x1ea>	10000f80: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000f84:	83 c4 14             	add    esp,0x14
10000f87:	89 d8                	mov    eax,ebx
10000f89:	6a 00                	push   0x0
10000f8b:	99                   	cdq    
10000f8c:	68 ff ff ff 00       	push   0xffffff
10000f91:	f7 fe                	idiv   esi
10000f93:	89 d3                	mov    ebx,edx
10000f95:	99                   	cdq    
10000f96:	f7 fe                	idiv   esi
10000f98:	8d 42 30             	lea    eax,[edx+0x30]
10000f9b:	50                   	push   eax
10000f9c:	6a 00                	push   0x0
10000f9e:	6a 04                	push   0x4
10000fa0:	e8 fc ff ff ff       	call   10000fa1 <handleMouse(Video*, int, int, int, int, int)+0x20b>	10000fa1: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000fa5:	83 c4 14             	add    esp,0x14
10000fa8:	83 c3 30             	add    ebx,0x30
10000fab:	6a 00                	push   0x0
10000fad:	68 ff ff ff 00       	push   0xffffff
10000fb2:	53                   	push   ebx
10000fb3:	6a 00                	push   0x0
10000fb5:	6a 05                	push   0x5
10000fb7:	e8 fc ff ff ff       	call   10000fb8 <handleMouse(Video*, int, int, int, int, int)+0x222>	10000fb8: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000fbc:	83 c4 14             	add    esp,0x14
10000fbf:	6a 00                	push   0x0
10000fc1:	68 ff ff ff 00       	push   0xffffff
10000fc6:	6a 2f                	push   0x2f
10000fc8:	6a 00                	push   0x0
10000fca:	6a 06                	push   0x6
10000fcc:	e8 fc ff ff ff       	call   10000fcd <handleMouse(Video*, int, int, int, int, int)+0x237>	10000fcd: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000fd1:	83 c4 14             	add    esp,0x14
10000fd4:	b9 a0 86 01 00       	mov    ecx,0x186a0
10000fd9:	6a 00                	push   0x0
10000fdb:	68 ff ff ff 00       	push   0xffffff
10000fe0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000fe4:	99                   	cdq    
10000fe5:	f7 f9                	idiv   ecx
10000fe7:	99                   	cdq    
10000fe8:	f7 fe                	idiv   esi
10000fea:	8d 42 30             	lea    eax,[edx+0x30]
10000fed:	50                   	push   eax
10000fee:	6a 00                	push   0x0
10000ff0:	6a 07                	push   0x7
10000ff2:	e8 fc ff ff ff       	call   10000ff3 <handleMouse(Video*, int, int, int, int, int)+0x25d>	10000ff3: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000ff7:	83 c4 14             	add    esp,0x14
10000ffa:	b9 10 27 00 00       	mov    ecx,0x2710
10000fff:	6a 00                	push   0x0
10001001:	68 ff ff ff 00       	push   0xffffff
10001006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000100a:	99                   	cdq    
1000100b:	f7 f9                	idiv   ecx
1000100d:	99                   	cdq    
1000100e:	f7 fe                	idiv   esi
10001010:	8d 42 30             	lea    eax,[edx+0x30]
10001013:	50                   	push   eax
10001014:	6a 00                	push   0x0
10001016:	6a 08                	push   0x8
10001018:	e8 fc ff ff ff       	call   10001019 <handleMouse(Video*, int, int, int, int, int)+0x283>	10001019: R_386_PC32	drawVGAChar(int, int, int, int, int)
1000101d:	83 c4 14             	add    esp,0x14
10001020:	b9 e8 03 00 00       	mov    ecx,0x3e8
10001025:	6a 00                	push   0x0
10001027:	68 ff ff ff 00       	push   0xffffff
1000102c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10001030:	99                   	cdq    
10001031:	f7 f9                	idiv   ecx
10001033:	99                   	cdq    
10001034:	f7 fe                	idiv   esi
10001036:	8d 42 30             	lea    eax,[edx+0x30]
10001039:	50                   	push   eax
1000103a:	6a 00                	push   0x0
1000103c:	6a 09                	push   0x9
1000103e:	e8 fc ff ff ff       	call   1000103f <handleMouse(Video*, int, int, int, int, int)+0x2a9>	1000103f: R_386_PC32	drawVGAChar(int, int, int, int, int)
10001043:	83 c4 14             	add    esp,0x14
10001046:	b9 64 00 00 00       	mov    ecx,0x64
1000104b:	6a 00                	push   0x0
1000104d:	68 ff ff ff 00       	push   0xffffff
10001052:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10001056:	99                   	cdq    
10001057:	f7 f9                	idiv   ecx
10001059:	99                   	cdq    
1000105a:	f7 fe                	idiv   esi
1000105c:	83 c2 30             	add    edx,0x30
1000105f:	52                   	push   edx
10001060:	6a 00                	push   0x0
10001062:	6a 0a                	push   0xa
10001064:	e8 fc ff ff ff       	call   10001065 <handleMouse(Video*, int, int, int, int, int)+0x2cf>	10001065: R_386_PC32	drawVGAChar(int, int, int, int, int)
10001069:	83 c4 14             	add    esp,0x14
1000106c:	6a 00                	push   0x0
1000106e:	68 ff ff ff 00       	push   0xffffff
10001073:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10001077:	99                   	cdq    
10001078:	f7 fe                	idiv   esi
1000107a:	89 d3                	mov    ebx,edx
1000107c:	99                   	cdq    
1000107d:	83 c3 30             	add    ebx,0x30
10001080:	f7 fe                	idiv   esi
10001082:	8d 42 30             	lea    eax,[edx+0x30]
10001085:	50                   	push   eax
10001086:	6a 00                	push   0x0
10001088:	6a 0b                	push   0xb
1000108a:	e8 fc ff ff ff       	call   1000108b <handleMouse(Video*, int, int, int, int, int)+0x2f5>	1000108b: R_386_PC32	drawVGAChar(int, int, int, int, int)
1000108f:	83 c4 14             	add    esp,0x14
10001092:	6a 00                	push   0x0
10001094:	68 ff ff ff 00       	push   0xffffff
10001099:	53                   	push   ebx
1000109a:	6a 00                	push   0x0
1000109c:	6a 0c                	push   0xc
1000109e:	e8 fc ff ff ff       	call   1000109f <handleMouse(Video*, int, int, int, int, int)+0x309>	1000109f: R_386_PC32	drawVGAChar(int, int, int, int, int)
100010a3:	83 c4 14             	add    esp,0x14
100010a6:	6a 00                	push   0x0
100010a8:	68 ff ff ff 00       	push   0xffffff
100010ad:	6a 20                	push   0x20
100010af:	6a 00                	push   0x0
100010b1:	6a 0d                	push   0xd
100010b3:	e8 fc ff ff ff       	call   100010b4 <handleMouse(Video*, int, int, int, int, int)+0x31e>	100010b4: R_386_PC32	drawVGAChar(int, int, int, int, int)
100010b8:	83 c4 14             	add    esp,0x14
100010bb:	6a 00                	push   0x0
100010bd:	68 ff ff ff 00       	push   0xffffff
100010c2:	6a 4b                	push   0x4b
100010c4:	6a 00                	push   0x0
100010c6:	6a 0e                	push   0xe
100010c8:	e8 fc ff ff ff       	call   100010c9 <handleMouse(Video*, int, int, int, int, int)+0x333>	100010c9: R_386_PC32	drawVGAChar(int, int, int, int, int)
100010cd:	83 c4 14             	add    esp,0x14
100010d0:	6a 00                	push   0x0
100010d2:	68 ff ff ff 00       	push   0xffffff
100010d7:	6a 42                	push   0x42
100010d9:	6a 00                	push   0x0
100010db:	6a 0f                	push   0xf
100010dd:	e8 fc ff ff ff       	call   100010de <handleMouse(Video*, int, int, int, int, int)+0x348>	100010de: R_386_PC32	drawVGAChar(int, int, int, int, int)
100010e2:	83 c4 20             	add    esp,0x20
100010e5:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100010e7: R_386_32	draggingWindow
100010ec:	75 08                	jne    100010f6 <handleMouse(Video*, int, int, int, int, int)+0x360>
100010ee:	39 3d 00 00 00 00    	cmp    DWORD PTR ds:0x0,edi	100010f0: R_386_32	desktopWindow
100010f4:	75 07                	jne    100010fd <handleMouse(Video*, int, int, int, int, int)+0x367>
100010f6:	31 db                	xor    ebx,ebx
100010f8:	e9 3c 01 00 00       	jmp    10001239 <handleMouse(Video*, int, int, int, int, int)+0x4a3>
100010fd:	83 ec 0c             	sub    esp,0xc
10001100:	57                   	push   edi
10001101:	e8 fc ff ff ff       	call   10001102 <handleMouse(Video*, int, int, int, int, int)+0x36c>	10001102: R_386_PC32	NFrame::raise()
10001106:	89 3c 24             	mov    DWORD PTR [esp],edi
10001109:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	1000110b: R_386_32	mouseX
1000110f:	e8 fc ff ff ff       	call   10001110 <handleMouse(Video*, int, int, int, int, int)+0x37a>	10001110: R_386_PC32	NFrame::getAbsX()
10001114:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	10001116: R_386_32	mouseY
1000111a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000111e:	89 3c 24             	mov    DWORD PTR [esp],edi
10001121:	e8 fc ff ff ff       	call   10001122 <handleMouse(Video*, int, int, int, int, int)+0x38c>	10001122: R_386_PC32	NFrame::getAbsY()
10001126:	83 c4 10             	add    esp,0x10
10001129:	29 c6                	sub    esi,eax
1000112b:	78 37                	js     10001164 <handleMouse(Video*, int, int, int, int, int)+0x3ce>
1000112d:	83 ec 0c             	sub    esp,0xc
10001130:	57                   	push   edi
10001131:	e8 fc ff ff ff       	call   10001132 <handleMouse(Video*, int, int, int, int, int)+0x39c>	10001132: R_386_PC32	NFrame::getTitlebarHeight()
10001136:	83 c4 10             	add    esp,0x10
10001139:	39 f0                	cmp    eax,esi
1000113b:	7e 27                	jle    10001164 <handleMouse(Video*, int, int, int, int, int)+0x3ce>
1000113d:	b8 b7 0b 00 00       	mov    eax,0xbb7
10001142:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10001146:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000114a:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
1000114e:	72 5a                	jb     100011aa <handleMouse(Video*, int, int, int, int, int)+0x414>
10001150:	50                   	push   eax
10001151:	50                   	push   eax
10001152:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
10001156:	57                   	push   edi
10001157:	e8 fc ff ff ff       	call   10001158 <handleMouse(Video*, int, int, int, int, int)+0x3c2>	10001158: R_386_PC32	NFrame::toggleFullscreen(Video*)
1000115c:	83 c4 10             	add    esp,0x10
1000115f:	e9 d3 00 00 00       	jmp    10001237 <handleMouse(Video*, int, int, int, int, int)+0x4a1>
10001164:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
10001168:	83 ec 0c             	sub    esp,0xc
1000116b:	57                   	push   edi
1000116c:	e8 fc ff ff ff       	call   1000116d <handleMouse(Video*, int, int, int, int, int)+0x3d7>	1000116d: R_386_PC32	NFrame::getHeight()
10001171:	83 c4 10             	add    esp,0x10
10001174:	83 e8 14             	sub    eax,0x14
10001177:	39 f0                	cmp    eax,esi
10001179:	7e 50                	jle    100011cb <handleMouse(Video*, int, int, int, int, int)+0x435>
1000117b:	83 ec 0c             	sub    esp,0xc
1000117e:	57                   	push   edi
1000117f:	e8 fc ff ff ff       	call   10001180 <handleMouse(Video*, int, int, int, int, int)+0x3ea>	10001180: R_386_PC32	NFrame::getHeight()
10001184:	83 c4 10             	add    esp,0x10
10001187:	83 e8 0c             	sub    eax,0xc
1000118a:	39 f0                	cmp    eax,esi
1000118c:	7f 69                	jg     100011f7 <handleMouse(Video*, int, int, int, int, int)+0x461>
1000118e:	89 3d 00 00 00 00    	mov    DWORD PTR ds:0x0,edi	10001190: R_386_32	draggingWindow
10001194:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001196: R_386_32	startedDragging
1000119b:	c7 05 00 00 00 00 03 00 00 00 	mov    DWORD PTR ds:0x0,0x3	1000119d: R_386_32	dragMode
100011a5:	e9 8d 00 00 00       	jmp    10001237 <handleMouse(Video*, int, int, int, int, int)+0x4a1>
100011aa:	83 ec 0c             	sub    esp,0xc
100011ad:	57                   	push   edi
100011ae:	e8 fc ff ff ff       	call   100011af <handleMouse(Video*, int, int, int, int, int)+0x419>	100011af: R_386_PC32	NFrame::isFullscreen()
100011b3:	83 c4 10             	add    esp,0x10
100011b6:	88 c3                	mov    bl,al
100011b8:	84 c0                	test   al,al
100011ba:	75 7d                	jne    10001239 <handleMouse(Video*, int, int, int, int, int)+0x4a3>
100011bc:	89 3d 00 00 00 00    	mov    DWORD PTR ds:0x0,edi	100011be: R_386_32	draggingWindow
100011c2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100011c4: R_386_32	startedDragging
100011c9:	eb 62                	jmp    1000122d <handleMouse(Video*, int, int, int, int, int)+0x497>
100011cb:	83 ec 0c             	sub    esp,0xc
100011ce:	57                   	push   edi
100011cf:	e8 fc ff ff ff       	call   100011d0 <handleMouse(Video*, int, int, int, int, int)+0x43a>	100011d0: R_386_PC32	NFrame::getWidth()
100011d4:	83 c4 10             	add    esp,0x10
100011d7:	83 e8 14             	sub    eax,0x14
100011da:	39 d8                	cmp    eax,ebx
100011dc:	7f 9d                	jg     1000117b <handleMouse(Video*, int, int, int, int, int)+0x3e5>
100011de:	89 3d 00 00 00 00    	mov    DWORD PTR ds:0x0,edi	100011e0: R_386_32	draggingWindow
100011e4:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100011e6: R_386_32	startedDragging
100011eb:	c7 05 00 00 00 00 02 00 00 00 	mov    DWORD PTR ds:0x0,0x2	100011ed: R_386_32	dragMode
100011f5:	eb 40                	jmp    10001237 <handleMouse(Video*, int, int, int, int, int)+0x4a1>
100011f7:	83 ec 0c             	sub    esp,0xc
100011fa:	57                   	push   edi
100011fb:	e8 fc ff ff ff       	call   100011fc <handleMouse(Video*, int, int, int, int, int)+0x466>	100011fc: R_386_PC32	NFrame::getWidth()
10001200:	83 c4 10             	add    esp,0x10
10001203:	83 e8 0c             	sub    eax,0xc
10001206:	39 d8                	cmp    eax,ebx
10001208:	7f 19                	jg     10001223 <handleMouse(Video*, int, int, int, int, int)+0x48d>
1000120a:	89 3d 00 00 00 00    	mov    DWORD PTR ds:0x0,edi	1000120c: R_386_32	draggingWindow
10001210:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001212: R_386_32	startedDragging
10001217:	c7 05 00 00 00 00 04 00 00 00 	mov    DWORD PTR ds:0x0,0x4	10001219: R_386_32	dragMode
10001221:	eb 14                	jmp    10001237 <handleMouse(Video*, int, int, int, int, int)+0x4a1>
10001223:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10001225: R_386_32	draggingWindow
1000122d:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	1000122f: R_386_32	dragMode
10001237:	b3 01                	mov    bl,0x1
10001239:	a1 00 00 00 00       	mov    eax,ds:0x0	1000123a: R_386_32	draggingWindow
1000123e:	85 c0                	test   eax,eax
10001240:	0f 84 ef 00 00 00    	je     10001335 <handleMouse(Video*, int, int, int, int, int)+0x59f>
10001246:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
1000124a:	0b 7c 24 38          	or     edi,DWORD PTR [esp+0x38]
1000124e:	0f 84 e1 00 00 00    	je     10001335 <handleMouse(Video*, int, int, int, int, int)+0x59f>
10001254:	83 ec 0c             	sub    esp,0xc
10001257:	50                   	push   eax
10001258:	e8 fc ff ff ff       	call   10001259 <handleMouse(Video*, int, int, int, int, int)+0x4c3>	10001259: R_386_PC32	NFrame::getX()
1000125d:	89 c3                	mov    ebx,eax
1000125f:	58                   	pop    eax
10001260:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001262: R_386_32	draggingWindow
10001266:	e8 fc ff ff ff       	call   10001267 <handleMouse(Video*, int, int, int, int, int)+0x4d1>	10001267: R_386_PC32	NFrame::getY()
1000126b:	89 c6                	mov    esi,eax
1000126d:	58                   	pop    eax
1000126e:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001270: R_386_32	draggingWindow
10001274:	e8 fc ff ff ff       	call   10001275 <handleMouse(Video*, int, int, int, int, int)+0x4df>	10001275: R_386_PC32	NFrame::getWidth()
10001279:	89 c7                	mov    edi,eax
1000127b:	58                   	pop    eax
1000127c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000127e: R_386_32	draggingWindow
10001282:	e8 fc ff ff ff       	call   10001283 <handleMouse(Video*, int, int, int, int, int)+0x4ed>	10001283: R_386_PC32	NFrame::getHeight()
10001287:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10001289: R_386_32	mouseX
1000128d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
10001291:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10001293: R_386_32	mouseY
10001297:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
1000129b:	83 c4 10             	add    esp,0x10
1000129e:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	100012a0: R_386_32	startedDragging
100012a5:	75 20                	jne    100012c7 <handleMouse(Video*, int, int, int, int, int)+0x531>
100012a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100012ab:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100012ad: R_386_32	startedDragging
100012b2:	83 ec 0c             	sub    esp,0xc
100012b5:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100012b7: R_386_32	draggingWindow
100012bb:	e8 fc ff ff ff       	call   100012bc <handleMouse(Video*, int, int, int, int, int)+0x526>	100012bc: R_386_PC32	NFrame::startDragState()
100012c0:	83 c4 10             	add    esp,0x10
100012c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100012c7:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100012c9: R_386_32	dragMode
100012cd:	83 fa 01             	cmp    edx,0x1
100012d0:	75 24                	jne    100012f6 <handleMouse(Video*, int, int, int, int, int)+0x560>
100012d2:	50                   	push   eax
100012d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100012d7:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
100012db:	01 c6                	add    esi,eax
100012dd:	56                   	push   esi
100012de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100012e2:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
100012e6:	01 c3                	add    ebx,eax
100012e8:	53                   	push   ebx
100012e9:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100012eb: R_386_32	draggingWindow
100012ef:	e8 fc ff ff ff       	call   100012f0 <handleMouse(Video*, int, int, int, int, int)+0x55a>	100012f0: R_386_PC32	NFrame::setPosition(int, int)
100012f4:	eb 29                	jmp    1000131f <handleMouse(Video*, int, int, int, int, int)+0x589>
100012f6:	83 fa 02             	cmp    edx,0x2
100012f9:	75 0a                	jne    10001305 <handleMouse(Video*, int, int, int, int, int)+0x56f>
100012fb:	a1 00 00 00 00       	mov    eax,ds:0x0	100012fc: R_386_32	mouseY
10001300:	57                   	push   edi
10001301:	29 f0                	sub    eax,esi
10001303:	eb 25                	jmp    1000132a <handleMouse(Video*, int, int, int, int, int)+0x594>
10001305:	83 fa 03             	cmp    edx,0x3
10001308:	75 1a                	jne    10001324 <handleMouse(Video*, int, int, int, int, int)+0x58e>
1000130a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000130b: R_386_32	mouseY
1000130f:	53                   	push   ebx
10001310:	29 f0                	sub    eax,esi
10001312:	50                   	push   eax
10001313:	57                   	push   edi
10001314:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001316: R_386_32	draggingWindow
1000131a:	e8 fc ff ff ff       	call   1000131b <handleMouse(Video*, int, int, int, int, int)+0x585>	1000131b: R_386_PC32	NFrame::setSize(int, int)
1000131f:	83 c4 10             	add    esp,0x10
10001322:	eb 19                	jmp    1000133d <handleMouse(Video*, int, int, int, int, int)+0x5a7>
10001324:	83 fa 04             	cmp    edx,0x4
10001327:	75 14                	jne    1000133d <handleMouse(Video*, int, int, int, int, int)+0x5a7>
10001329:	51                   	push   ecx
1000132a:	50                   	push   eax
1000132b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000132c: R_386_32	mouseX
10001330:	29 d8                	sub    eax,ebx
10001332:	50                   	push   eax
10001333:	eb df                	jmp    10001314 <handleMouse(Video*, int, int, int, int, int)+0x57e>
10001335:	84 db                	test   bl,bl
10001337:	0f 84 87 00 00 00    	je     100013c4 <handleMouse(Video*, int, int, int, int, int)+0x62e>
1000133d:	83 ec 28             	sub    esp,0x28
10001340:	a1 00 00 00 00       	mov    eax,ds:0x0	10001341: R_386_32	mouseX
10001345:	89 e7                	mov    edi,esp
10001347:	a3 10 00 00 00       	mov    ds:0x10,eax	10001348: R_386_32	tightMouseRegionNew
1000134c:	be 00 00 00 00       	mov    esi,0x0	1000134d: R_386_32	tightMouseRegionNew
10001351:	a1 00 00 00 00       	mov    eax,ds:0x0	10001352: R_386_32	mouseY
10001356:	b9 07 00 00 00       	mov    ecx,0x7
1000135b:	a3 14 00 00 00       	mov    ds:0x14,eax	1000135c: R_386_32	tightMouseRegionNew
10001360:	b3 01                	mov    bl,0x1
10001362:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001364:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10001368:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000136a: R_386_32	desktopWindow
1000136e:	e8 fc ff ff ff       	call   1000136f <handleMouse(Video*, int, int, int, int, int)+0x5d9>	1000136f: R_386_PC32	NFrame::repaint(Video*, Region)
10001373:	83 c4 30             	add    esp,0x30
10001376:	eb 4c                	jmp    100013c4 <handleMouse(Video*, int, int, int, int, int)+0x62e>
10001378:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
1000137d:	0f 84 73 fd ff ff    	je     100010f6 <handleMouse(Video*, int, int, int, int, int)+0x360>
10001383:	a1 00 00 00 00       	mov    eax,ds:0x0	10001384: R_386_32	draggingWindow
10001388:	31 db                	xor    ebx,ebx
1000138a:	85 c0                	test   eax,eax
1000138c:	74 16                	je     100013a4 <handleMouse(Video*, int, int, int, int, int)+0x60e>
1000138e:	8a 1d 00 00 00 00    	mov    bl,BYTE PTR ds:0x0	10001390: R_386_32	startedDragging
10001394:	84 db                	test   bl,bl
10001396:	74 0c                	je     100013a4 <handleMouse(Video*, int, int, int, int, int)+0x60e>
10001398:	83 ec 0c             	sub    esp,0xc
1000139b:	50                   	push   eax
1000139c:	e8 fc ff ff ff       	call   1000139d <handleMouse(Video*, int, int, int, int, int)+0x607>	1000139d: R_386_PC32	NFrame::endDragState()
100013a1:	83 c4 10             	add    esp,0x10
100013a4:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100013a6: R_386_32	startedDragging
100013ab:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	100013ad: R_386_32	dragMode
100013b5:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100013b7: R_386_32	draggingWindow
100013bf:	e9 75 fe ff ff       	jmp    10001239 <handleMouse(Video*, int, int, int, int, int)+0x4a3>
100013c4:	bf 00 00 00 00       	mov    edi,0x0	100013c5: R_386_32	pixelsUnderCursor
100013c9:	50                   	push   eax
100013ca:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100013cc: R_386_32	mouseY
100013d0:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100013d2: R_386_32	mouseX
100013d6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100013da:	e8 fc ff ff ff       	call   100013db <handleMouse(Video*, int, int, int, int, int)+0x645>	100013db: R_386_PC32	videoSaveAreaUnderCursor(Video*, int, int)
100013df:	b9 00 10 00 00       	mov    ecx,0x1000
100013e4:	89 c6                	mov    esi,eax
100013e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100013e8:	5a                   	pop    edx
100013e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100013ed:	e8 fc ff ff ff       	call   100013ee <handleMouse(Video*, int, int, int, int, int)+0x658>	100013ee: R_386_PC32	showCursor(Video*)
100013f2:	83 c4 30             	add    esp,0x30
100013f5:	88 d8                	mov    al,bl
100013f7:	5b                   	pop    ebx
100013f8:	5e                   	pop    esi
100013f9:	5f                   	pop    edi
100013fa:	c3                   	ret    

100013fb <__static_initialization_and_destruction_0(int, int)>:
100013fb:	83 ec 0c             	sub    esp,0xc
100013fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001402:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
1000140a:	75 20                	jne    1000142c <__static_initialization_and_destruction_0(int, int)+0x31>
1000140c:	48                   	dec    eax
1000140d:	75 1d                	jne    1000142c <__static_initialization_and_destruction_0(int, int)+0x31>
1000140f:	83 ec 0c             	sub    esp,0xc
10001412:	68 00 00 00 00       	push   0x0	10001413: R_386_32	tightMouseRegionOld
10001417:	e8 fc ff ff ff       	call   10001418 <__static_initialization_and_destruction_0(int, int)+0x1d>	10001418: R_386_PC32	Region::Region()
1000141c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0	10001420: R_386_32	tightMouseRegionNew
10001424:	83 c4 1c             	add    esp,0x1c
10001427:	e9 fc ff ff ff       	jmp    10001428 <__static_initialization_and_destruction_0(int, int)+0x2d>	10001428: R_386_PC32	Region::Region()
1000142c:	83 c4 0c             	add    esp,0xc
1000142f:	c3                   	ret    

10001430 <drawCharacter(Video*, Region, int, int, unsigned int, char)>:
10001430:	55                   	push   ebp
10001431:	57                   	push   edi
10001432:	31 ff                	xor    edi,edi
10001434:	56                   	push   esi
10001435:	31 f6                	xor    esi,esi
10001437:	53                   	push   ebx
10001438:	83 ec 3c             	sub    esp,0x3c
1000143b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
1000143f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001443:	0f be 44 24 7c       	movsx  eax,BYTE PTR [esp+0x7c]
10001448:	89 c5                	mov    ebp,eax
1000144a:	39 74 24 5c          	cmp    DWORD PTR [esp+0x5c],esi
1000144e:	0f 8e 15 01 00 00    	jle    10001569 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x139>
10001454:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
10001458:	83 c0 0c             	add    eax,0xc
1000145b:	39 f0                	cmp    eax,esi
1000145d:	0f 8e 06 01 00 00    	jle    10001569 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x139>
10001463:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
10001467:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
1000146e:	8b 14 b9             	mov    edx,DWORD PTR [ecx+edi*4]
10001471:	0f b7 ca             	movzx  ecx,dx
10001474:	c1 ea 10             	shr    edx,0x10
10001477:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
1000147b:	8d 7c 0f 01          	lea    edi,[edi+ecx*1+0x1]
1000147f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
10001483:	8d 0c 16             	lea    ecx,[esi+edx*1]
10001486:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
1000148a:	3b 4c 24 74          	cmp    ecx,DWORD PTR [esp+0x74]
1000148e:	7d 06                	jge    10001496 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x66>
10001490:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10001494:	eb b4                	jmp    1000144a <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x1a>
10001496:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
1000149a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
1000149f:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
100014a3:	31 db                	xor    ebx,ebx
100014a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100014a9:	39 5c 24 58          	cmp    DWORD PTR [esp+0x58],ebx
100014ad:	7e e1                	jle    10001490 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x60>
100014af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100014b3:	39 18                	cmp    DWORD PTR [eax],ebx
100014b5:	75 0e                	jne    100014c5 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x95>
100014b7:	83 44 24 10 04       	add    DWORD PTR [esp+0x10],0x4
100014bc:	80 74 24 1f 01       	xor    BYTE PTR [esp+0x1f],0x1
100014c1:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
100014c5:	89 d9                	mov    ecx,ebx
100014c7:	2b 4c 24 70          	sub    ecx,DWORD PTR [esp+0x70]
100014cb:	83 f9 07             	cmp    ecx,0x7
100014ce:	77 6d                	ja     1000153d <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x10d>
100014d0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
100014d5:	74 66                	je     1000153d <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x10d>
100014d7:	89 f0                	mov    eax,esi
100014d9:	2b 44 24 74          	sub    eax,DWORD PTR [esp+0x74]
100014dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100014e1:	31 c0                	xor    eax,eax
100014e3:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
100014e7:	7d 54                	jge    1000153d <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x10d>
100014e9:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
100014ee:	77 46                	ja     10001536 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x106>
100014f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100014f4:	c1 e2 07             	shl    edx,0x7
100014f7:	0f b6 94 2a 00 00 00 00 	movzx  edx,BYTE PTR [edx+ebp*1+0x0]	100014fb: R_386_32	font_array
100014ff:	d3 e2                	shl    edx,cl
10001501:	80 e2 80             	and    dl,0x80
10001504:	74 30                	je     10001536 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x106>
10001506:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
1000150a:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
1000150e:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
10001512:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001516:	01 f2                	add    edx,esi
10001518:	01 c2                	add    edx,eax
1000151a:	52                   	push   edx
1000151b:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
1000151f:	01 da                	add    edx,ebx
10001521:	52                   	push   edx
10001522:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
10001526:	e8 fc ff ff ff       	call   10001527 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0xf7>	10001527: R_386_PC32	videoPutpixel(Video*, int, int, unsigned int)
1000152b:	83 c4 10             	add    esp,0x10
1000152e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
10001532:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001536:	40                   	inc    eax
10001537:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
1000153b:	eb a6                	jmp    100014e3 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0xb3>
1000153d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10001542:	74 10                	je     10001554 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x124>
10001544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001548:	8b 00                	mov    eax,DWORD PTR [eax]
1000154a:	3b 44 24 70          	cmp    eax,DWORD PTR [esp+0x70]
1000154e:	73 04                	jae    10001554 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x124>
10001550:	89 c3                	mov    ebx,eax
10001552:	eb 01                	jmp    10001555 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x125>
10001554:	43                   	inc    ebx
10001555:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10001559:	83 c0 08             	add    eax,0x8
1000155c:	39 d8                	cmp    eax,ebx
1000155e:	0f 8d 45 ff ff ff    	jge    100014a9 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x79>
10001564:	e9 27 ff ff ff       	jmp    10001490 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x60>
10001569:	83 c4 3c             	add    esp,0x3c
1000156c:	b8 08 00 0c 00       	mov    eax,0xc0008
10001571:	5b                   	pop    ebx
10001572:	5e                   	pop    esi
10001573:	5f                   	pop    edi
10001574:	5d                   	pop    ebp
10001575:	c3                   	ret    

10001576 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)>:
10001576:	57                   	push   edi
10001577:	56                   	push   esi
10001578:	53                   	push   ebx
10001579:	83 ec 50             	sub    esp,0x50
1000157c:	8d 74 24 18          	lea    esi,[esp+0x18]
10001580:	50                   	push   eax
10001581:	50                   	push   eax
10001582:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10001586:	50                   	push   eax
10001587:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000158b:	50                   	push   eax
1000158c:	8d 44 24 1f          	lea    eax,[esp+0x1f]
10001590:	50                   	push   eax
10001591:	ff b4 24 98 00 00 00 	push   DWORD PTR [esp+0x98]
10001598:	ff b4 24 98 00 00 00 	push   DWORD PTR [esp+0x98]
1000159f:	56                   	push   esi
100015a0:	e8 fc ff ff ff       	call   100015a1 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0x2b>	100015a1: R_386_PC32	getFontRegion(int, int, bool*, int*, int*)
100015a5:	b9 07 00 00 00       	mov    ecx,0x7
100015aa:	8b 84 24 a4 00 00 00 	mov    eax,DWORD PTR [esp+0xa4]
100015b1:	8d 5c 24 50          	lea    ebx,[esp+0x50]
100015b5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100015b9:	8b 84 24 a8 00 00 00 	mov    eax,DWORD PTR [esp+0xa8]
100015c0:	83 ec 14             	sub    esp,0x14
100015c3:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
100015c7:	89 e7                	mov    edi,esp
100015c9:	83 ec 1c             	sub    esp,0x1c
100015cc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015ce:	8d b4 24 b0 00 00 00 	lea    esi,[esp+0xb0]
100015d5:	89 e7                	mov    edi,esp
100015d7:	b9 07 00 00 00       	mov    ecx,0x7
100015dc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015de:	53                   	push   ebx
100015df:	89 de                	mov    esi,ebx
100015e1:	e8 fc ff ff ff       	call   100015e2 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0x6c>	100015e2: R_386_PC32	getRegionIntersection(Region, Region)
100015e6:	b9 07 00 00 00       	mov    ecx,0x7
100015eb:	83 c4 40             	add    esp,0x40
100015ee:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
100015f5:	83 ec 1c             	sub    esp,0x1c
100015f8:	89 e7                	mov    edi,esp
100015fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015fc:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
10001603:	e8 fc ff ff ff       	call   10001604 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0x8e>	10001604: R_386_PC32	fillRegion(Video*, Region, unsigned int)
10001608:	83 c4 30             	add    esp,0x30
1000160b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
10001610:	74 0f                	je     10001621 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0xab>
10001612:	83 ec 0c             	sub    esp,0xc
10001615:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10001619:	e8 fc ff ff ff       	call   1000161a <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0xa4>	1000161a: R_386_PC32	free
1000161e:	83 c4 10             	add    esp,0x10
10001621:	83 ec 0c             	sub    esp,0xc
10001624:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
10001628:	e8 fc ff ff ff       	call   10001629 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0xb3>	10001629: R_386_PC32	free
1000162d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10001631:	c1 e0 10             	shl    eax,0x10
10001634:	0b 44 24 20          	or     eax,DWORD PTR [esp+0x20]
10001638:	83 c4 60             	add    esp,0x60
1000163b:	5b                   	pop    ebx
1000163c:	5e                   	pop    esi
1000163d:	5f                   	pop    edi
1000163e:	c3                   	ret    

1000163f <blitRegion(Video*, Region, int, int, unsigned int*, int, int)>:
1000163f:	55                   	push   ebp
10001640:	57                   	push   edi
10001641:	31 ff                	xor    edi,edi
10001643:	56                   	push   esi
10001644:	31 f6                	xor    esi,esi
10001646:	53                   	push   ebx
10001647:	83 ec 2c             	sub    esp,0x2c
1000164a:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
1000164e:	39 74 24 4c          	cmp    DWORD PTR [esp+0x4c],esi
10001652:	0f 8e 07 01 00 00    	jle    1000175f <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x120>
10001658:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
1000165c:	03 44 24 70          	add    eax,DWORD PTR [esp+0x70]
10001660:	39 f0                	cmp    eax,esi
10001662:	0f 8e f7 00 00 00    	jle    1000175f <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x120>
10001668:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
1000166c:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
10001673:	0f b7 da             	movzx  ebx,dx
10001676:	c1 ea 10             	shr    edx,0x10
10001679:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
1000167d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
10001681:	8d 7c 1f 01          	lea    edi,[edi+ebx*1+0x1]
10001685:	8d 14 16             	lea    edx,[esi+edx*1]
10001688:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
1000168c:	3b 54 24 64          	cmp    edx,DWORD PTR [esp+0x64]
10001690:	7d 06                	jge    10001698 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x59>
10001692:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001696:	eb b6                	jmp    1000164e <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xf>
10001698:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
1000169c:	31 db                	xor    ebx,ebx
1000169e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100016a2:	31 d2                	xor    edx,edx
100016a4:	39 5c 24 48          	cmp    DWORD PTR [esp+0x48],ebx
100016a8:	7e e8                	jle    10001692 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x53>
100016aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100016ae:	39 18                	cmp    DWORD PTR [eax],ebx
100016b0:	75 0c                	jne    100016be <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x7f>
100016b2:	83 44 24 08 04       	add    DWORD PTR [esp+0x8],0x4
100016b7:	83 f2 01             	xor    edx,0x1
100016ba:	ff 4c 24 04          	dec    DWORD PTR [esp+0x4]
100016be:	89 d8                	mov    eax,ebx
100016c0:	2b 44 24 60          	sub    eax,DWORD PTR [esp+0x60]
100016c4:	89 c1                	mov    ecx,eax
100016c6:	f7 d1                	not    ecx
100016c8:	c1 e9 1f             	shr    ecx,0x1f
100016cb:	3b 44 24 6c          	cmp    eax,DWORD PTR [esp+0x6c]
100016cf:	0f 9c c0             	setl   al
100016d2:	84 c8                	test   al,cl
100016d4:	74 5c                	je     10001732 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xf3>
100016d6:	84 d2                	test   dl,dl
100016d8:	74 58                	je     10001732 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xf3>
100016da:	89 f0                	mov    eax,esi
100016dc:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
100016e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100016e4:	31 c0                	xor    eax,eax
100016e6:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
100016ea:	7d 46                	jge    10001732 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xf3>
100016ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
100016f0:	39 4c 24 70          	cmp    DWORD PTR [esp+0x70],ecx
100016f4:	7e 35                	jle    1000172b <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xec>
100016f6:	85 c9                	test   ecx,ecx
100016f8:	78 31                	js     1000172b <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xec>
100016fa:	88 54 24 1f          	mov    BYTE PTR [esp+0x1f],dl
100016fe:	68 00 00 ff 00       	push   0xff0000
10001703:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10001707:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000170b:	01 f1                	add    ecx,esi
1000170d:	01 c1                	add    ecx,eax
1000170f:	51                   	push   ecx
10001710:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10001714:	01 d9                	add    ecx,ebx
10001716:	51                   	push   ecx
10001717:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
1000171b:	e8 fc ff ff ff       	call   1000171c <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xdd>	1000171c: R_386_PC32	videoPutpixel(Video*, int, int, unsigned int)
10001720:	83 c4 10             	add    esp,0x10
10001723:	8a 54 24 1f          	mov    dl,BYTE PTR [esp+0x1f]
10001727:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
1000172b:	40                   	inc    eax
1000172c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
10001730:	eb b4                	jmp    100016e6 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xa7>
10001732:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
10001737:	74 10                	je     10001749 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x10a>
10001739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000173d:	8b 00                	mov    eax,DWORD PTR [eax]
1000173f:	3b 44 24 60          	cmp    eax,DWORD PTR [esp+0x60]
10001743:	73 04                	jae    10001749 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x10a>
10001745:	89 c3                	mov    ebx,eax
10001747:	eb 01                	jmp    1000174a <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x10b>
10001749:	43                   	inc    ebx
1000174a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000174e:	03 44 24 6c          	add    eax,DWORD PTR [esp+0x6c]
10001752:	39 d8                	cmp    eax,ebx
10001754:	0f 8d 4a ff ff ff    	jge    100016a4 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x65>
1000175a:	e9 33 ff ff ff       	jmp    10001692 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x53>
1000175f:	83 c4 2c             	add    esp,0x2c
10001762:	5b                   	pop    ebx
10001763:	5e                   	pop    esi
10001764:	5f                   	pop    edi
10001765:	5d                   	pop    ebp
10001766:	c3                   	ret    

10001767 <shitBlit(Video*, Region, int, int, unsigned int*, int, int)>:
10001767:	55                   	push   ebp
10001768:	57                   	push   edi
10001769:	56                   	push   esi
1000176a:	53                   	push   ebx
1000176b:	83 ec 4c             	sub    esp,0x4c
1000176e:	8b 9c 24 84 00 00 00 	mov    ebx,DWORD PTR [esp+0x84]
10001775:	89 d8                	mov    eax,ebx
10001777:	2b 84 24 84 00 00 00 	sub    eax,DWORD PTR [esp+0x84]
1000177e:	39 84 24 90 00 00 00 	cmp    DWORD PTR [esp+0x90],eax
10001785:	0f 8e a5 00 00 00    	jle    10001830 <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0xc9>
1000178b:	31 ed                	xor    ebp,ebp
1000178d:	3b ac 24 8c 00 00 00 	cmp    ebp,DWORD PTR [esp+0x8c]
10001794:	0f 8d 90 00 00 00    	jge    1000182a <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0xc3>
1000179a:	8d 44 24 08          	lea    eax,[esp+0x8]
1000179e:	83 ec 0c             	sub    esp,0xc
100017a1:	6a 01                	push   0x1
100017a3:	6a 01                	push   0x1
100017a5:	53                   	push   ebx
100017a6:	8b 94 24 98 00 00 00 	mov    edx,DWORD PTR [esp+0x98]
100017ad:	01 ea                	add    edx,ebp
100017af:	45                   	inc    ebp
100017b0:	52                   	push   edx
100017b1:	50                   	push   eax
100017b2:	e8 fc ff ff ff       	call   100017b3 <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0x4c>	100017b3: R_386_PC32	createRectangleRegion(int, int, int, int)
100017b7:	b9 07 00 00 00       	mov    ecx,0x7
100017bc:	8d 54 24 40          	lea    edx,[esp+0x40]
100017c0:	83 ec 14             	sub    esp,0x14
100017c3:	8d b4 24 94 00 00 00 	lea    esi,[esp+0x94]
100017ca:	89 e7                	mov    edi,esp
100017cc:	83 ec 1c             	sub    esp,0x1c
100017cf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017d1:	8d 44 24 54          	lea    eax,[esp+0x54]
100017d5:	89 e7                	mov    edi,esp
100017d7:	89 c6                	mov    esi,eax
100017d9:	b9 07 00 00 00       	mov    ecx,0x7
100017de:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017e0:	52                   	push   edx
100017e1:	e8 fc ff ff ff       	call   100017e2 <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0x7b>	100017e2: R_386_PC32	getRegionIntersection(Region, Region)
100017e6:	b9 07 00 00 00       	mov    ecx,0x7
100017eb:	83 c4 40             	add    esp,0x40
100017ee:	68 80 80 00 00       	push   0x8080
100017f3:	83 ec 1c             	sub    esp,0x1c
100017f6:	8d 54 24 50          	lea    edx,[esp+0x50]
100017fa:	89 e7                	mov    edi,esp
100017fc:	89 d6                	mov    esi,edx
100017fe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001800:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
10001807:	e8 fc ff ff ff       	call   10001808 <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0xa1>	10001808: R_386_PC32	fillRegion(Video*, Region, unsigned int)
1000180c:	83 c4 24             	add    esp,0x24
1000180f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10001813:	e8 fc ff ff ff       	call   10001814 <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0xad>	10001814: R_386_PC32	free
10001818:	58                   	pop    eax
10001819:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
1000181d:	e8 fc ff ff ff       	call   1000181e <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0xb7>	1000181e: R_386_PC32	free
10001822:	83 c4 10             	add    esp,0x10
10001825:	e9 63 ff ff ff       	jmp    1000178d <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0x26>
1000182a:	43                   	inc    ebx
1000182b:	e9 45 ff ff ff       	jmp    10001775 <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0xe>
10001830:	83 c4 4c             	add    esp,0x4c
10001833:	5b                   	pop    ebx
10001834:	5e                   	pop    esi
10001835:	5f                   	pop    edi
10001836:	5d                   	pop    ebp
10001837:	c3                   	ret    

10001838 <fillRegion(Video*, Region, unsigned int)>:
10001838:	55                   	push   ebp
10001839:	31 ed                	xor    ebp,ebp
1000183b:	57                   	push   edi
1000183c:	56                   	push   esi
1000183d:	53                   	push   ebx
1000183e:	83 ec 2c             	sub    esp,0x2c
10001841:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10001845:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
1000184d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10001851:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10001855:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001859:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
1000185d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10001865:	39 44 24 4c          	cmp    DWORD PTR [esp+0x4c],eax
10001869:	0f 8e b6 00 00 00    	jle    10001925 <fillRegion(Video*, Region, unsigned int)+0xed>
1000186f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10001873:	8d 45 01             	lea    eax,[ebp+0x1]
10001876:	8b 0c ae             	mov    ecx,DWORD PTR [esi+ebp*4]
10001879:	8d 14 ad 00 00 00 00 	lea    edx,[ebp*4+0x0]
10001880:	83 f9 ff             	cmp    ecx,0xffffffff
10001883:	0f 84 9c 00 00 00    	je     10001925 <fillRegion(Video*, Region, unsigned int)+0xed>
10001889:	0f b7 f1             	movzx  esi,cx
1000188c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10001890:	c1 e9 10             	shr    ecx,0x10
10001893:	8d 7c 17 04          	lea    edi,[edi+edx*1+0x4]
10001897:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
1000189b:	8d 2c 30             	lea    ebp,[eax+esi*1]
1000189e:	31 db                	xor    ebx,ebx
100018a0:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
100018a5:	39 5c 24 48          	cmp    DWORD PTR [esp+0x48],ebx
100018a9:	7e 6d                	jle    10001918 <fillRegion(Video*, Region, unsigned int)+0xe0>
100018ab:	39 1f                	cmp    DWORD PTR [edi],ebx
100018ad:	75 09                	jne    100018b8 <fillRegion(Video*, Region, unsigned int)+0x80>
100018af:	83 c7 04             	add    edi,0x4
100018b2:	80 74 24 13 01       	xor    BYTE PTR [esp+0x13],0x1
100018b7:	4e                   	dec    esi
100018b8:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
100018bd:	74 55                	je     10001914 <fillRegion(Video*, Region, unsigned int)+0xdc>
100018bf:	8b 07                	mov    eax,DWORD PTR [edi]
100018c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100018c5:	29 d8                	sub    eax,ebx
100018c7:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
100018cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100018cf:	01 da                	add    edx,ebx
100018d1:	80 7c 24 5c 00       	cmp    BYTE PTR [esp+0x5c],0x0
100018d6:	74 19                	je     100018f1 <fillRegion(Video*, Region, unsigned int)+0xb9>
100018d8:	83 ec 08             	sub    esp,0x8
100018db:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
100018df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100018e3:	50                   	push   eax
100018e4:	51                   	push   ecx
100018e5:	52                   	push   edx
100018e6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
100018ea:	e8 fc ff ff ff       	call   100018eb <fillRegion(Video*, Region, unsigned int)+0xb3>	100018eb: R_386_PC32	videoDrawRectDotted(Video*, int, int, int, int, unsigned int)
100018ef:	eb 17                	jmp    10001908 <fillRegion(Video*, Region, unsigned int)+0xd0>
100018f1:	83 ec 08             	sub    esp,0x8
100018f4:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
100018f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100018fc:	50                   	push   eax
100018fd:	51                   	push   ecx
100018fe:	52                   	push   edx
100018ff:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
10001903:	e8 fc ff ff ff       	call   10001904 <fillRegion(Video*, Region, unsigned int)+0xcc>	10001904: R_386_PC32	videoDrawRect(Video*, int, int, int, int, unsigned int)
10001908:	83 c4 20             	add    esp,0x20
1000190b:	43                   	inc    ebx
1000190c:	85 f6                	test   esi,esi
1000190e:	74 95                	je     100018a5 <fillRegion(Video*, Region, unsigned int)+0x6d>
10001910:	8b 1f                	mov    ebx,DWORD PTR [edi]
10001912:	eb 91                	jmp    100018a5 <fillRegion(Video*, Region, unsigned int)+0x6d>
10001914:	85 f6                	test   esi,esi
10001916:	75 f8                	jne    10001910 <fillRegion(Video*, Region, unsigned int)+0xd8>
10001918:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
1000191c:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
10001920:	e9 3c ff ff ff       	jmp    10001861 <fillRegion(Video*, Region, unsigned int)+0x29>
10001925:	83 c4 2c             	add    esp,0x2c
10001928:	5b                   	pop    ebx
10001929:	5e                   	pop    esi
1000192a:	5f                   	pop    edi
1000192b:	5d                   	pop    ebp
1000192c:	c3                   	ret    

1000192d <readUnaligned32(unsigned char*)>:
1000192d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10001931:	8b 00                	mov    eax,DWORD PTR [eax]
10001933:	c3                   	ret    

10001934 <writeUnaligned32(unsigned char*, unsigned int)>:
10001934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10001938:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
1000193c:	89 10                	mov    DWORD PTR [eax],edx
1000193e:	c3                   	ret    

1000193f <createTightFontRegion(int, int, unsigned char*, int, int)>:
1000193f:	55                   	push   ebp
10001940:	57                   	push   edi
10001941:	31 ff                	xor    edi,edi
10001943:	56                   	push   esi
10001944:	53                   	push   ebx
10001945:	83 ec 68             	sub    esp,0x68
10001948:	8b 5c 24 7c          	mov    ebx,DWORD PTR [esp+0x7c]
1000194c:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
10001953:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
10001957:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
1000195a:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
10001961:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10001964:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
1000196b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
1000196e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
10001975:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10001978:	6b 84 24 90 00 00 00 11 	imul   eax,DWORD PTR [esp+0x90],0x11
10001980:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
10001987:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
1000198a:	50                   	push   eax
1000198b:	e8 fc ff ff ff       	call   1000198c <createTightFontRegion(int, int, unsigned char*, int, int)+0x4d>	1000198c: R_386_PC32	malloc
10001990:	8b ac 24 8c 00 00 00 	mov    ebp,DWORD PTR [esp+0x8c]
10001997:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000199b:	89 03                	mov    DWORD PTR [ebx],eax
1000199d:	83 c4 10             	add    esp,0x10
100019a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
100019a4:	3b bc 24 84 00 00 00 	cmp    edi,DWORD PTR [esp+0x84]
100019ab:	7d 6c                	jge    10001a19 <createTightFontRegion(int, int, unsigned char*, int, int)+0xda>
100019ad:	31 f6                	xor    esi,esi
100019af:	31 c0                	xor    eax,eax
100019b1:	31 c9                	xor    ecx,ecx
100019b3:	3b b4 24 80 00 00 00 	cmp    esi,DWORD PTR [esp+0x80]
100019ba:	7d 24                	jge    100019e0 <createTightFontRegion(int, int, unsigned char*, int, int)+0xa1>
100019bc:	80 7c 35 00 00       	cmp    BYTE PTR [ebp+esi*1+0x0],0x0
100019c1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100019c5:	0f 95 44 24 0e       	setne  BYTE PTR [esp+0xe]
100019ca:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
100019ce:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
100019d2:	74 05                	je     100019d9 <createTightFontRegion(int, int, unsigned char*, int, int)+0x9a>
100019d4:	89 74 8c 10          	mov    DWORD PTR [esp+ecx*4+0x10],esi
100019d8:	41                   	inc    ecx
100019d9:	46                   	inc    esi
100019da:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
100019de:	eb d3                	jmp    100019b3 <createTightFontRegion(int, int, unsigned char*, int, int)+0x74>
100019e0:	84 c0                	test   al,al
100019e2:	74 0c                	je     100019f0 <createTightFontRegion(int, int, unsigned char*, int, int)+0xb1>
100019e4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100019eb:	89 44 8c 10          	mov    DWORD PTR [esp+ecx*4+0x10],eax
100019ef:	41                   	inc    ecx
100019f0:	89 ce                	mov    esi,ecx
100019f2:	81 ce 00 00 01 00    	or     esi,0x10000
100019f8:	89 32                	mov    DWORD PTR [edx],esi
100019fa:	31 f6                	xor    esi,esi
100019fc:	39 f1                	cmp    ecx,esi
100019fe:	74 0b                	je     10001a0b <createTightFontRegion(int, int, unsigned char*, int, int)+0xcc>
10001a00:	8b 44 b4 10          	mov    eax,DWORD PTR [esp+esi*4+0x10]
10001a04:	89 44 b2 04          	mov    DWORD PTR [edx+esi*4+0x4],eax
10001a08:	46                   	inc    esi
10001a09:	eb f1                	jmp    100019fc <createTightFontRegion(int, int, unsigned char*, int, int)+0xbd>
10001a0b:	8d 54 8a 04          	lea    edx,[edx+ecx*4+0x4]
10001a0f:	47                   	inc    edi
10001a10:	03 ac 24 80 00 00 00 	add    ebp,DWORD PTR [esp+0x80]
10001a17:	eb 8b                	jmp    100019a4 <createTightFontRegion(int, int, unsigned char*, int, int)+0x65>
10001a19:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
10001a1f:	89 d8                	mov    eax,ebx
10001a21:	83 c2 04             	add    edx,0x4
10001a24:	2b 54 24 08          	sub    edx,DWORD PTR [esp+0x8]
10001a28:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
10001a2b:	83 c4 5c             	add    esp,0x5c
10001a2e:	5b                   	pop    ebx
10001a2f:	5e                   	pop    esi
10001a30:	5f                   	pop    edi
10001a31:	5d                   	pop    ebp
10001a32:	c2 04 00             	ret    0x4

10001a35 <createTightCursorRegion(int, int, unsigned int*)>:
10001a35:	55                   	push   ebp
10001a36:	57                   	push   edi
10001a37:	56                   	push   esi
10001a38:	31 f6                	xor    esi,esi
10001a3a:	53                   	push   ebx
10001a3b:	83 ec 68             	sub    esp,0x68
10001a3e:	8b 5c 24 7c          	mov    ebx,DWORD PTR [esp+0x7c]
10001a42:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10001a49:	c7 43 04 20 00 00 00 	mov    DWORD PTR [ebx+0x4],0x20
10001a50:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10001a53:	c7 43 08 20 00 00 00 	mov    DWORD PTR [ebx+0x8],0x20
10001a5a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
10001a61:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
10001a65:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10001a68:	c7 43 0c 84 08 00 00 	mov    DWORD PTR [ebx+0xc],0x884
10001a6f:	68 84 08 00 00       	push   0x884
10001a74:	e8 fc ff ff ff       	call   10001a75 <createTightCursorRegion(int, int, unsigned int*)+0x40>	10001a75: R_386_PC32	malloc
10001a79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001a7d:	89 03                	mov    DWORD PTR [ebx],eax
10001a7f:	83 c4 10             	add    esp,0x10
10001a82:	89 c1                	mov    ecx,eax
10001a84:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10001a88:	31 ed                	xor    ebp,ebp
10001a8a:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
10001a8d:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
10001a92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001a96:	31 d2                	xor    edx,edx
10001a98:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10001a9c:	8b 84 b0 80 00 00 00 	mov    eax,DWORD PTR [eax+esi*4+0x80]
10001aa3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001aa7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10001aab:	0b 7c 24 08          	or     edi,DWORD PTR [esp+0x8]
10001aaf:	83 e7 01             	and    edi,0x1
10001ab2:	89 f8                	mov    eax,edi
10001ab4:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
10001ab8:	74 05                	je     10001abf <createTightCursorRegion(int, int, unsigned int*)+0x8a>
10001aba:	89 6c 94 10          	mov    DWORD PTR [esp+edx*4+0x10],ebp
10001abe:	42                   	inc    edx
10001abf:	d1 6c 24 08          	shr    DWORD PTR [esp+0x8],1
10001ac3:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
10001ac7:	45                   	inc    ebp
10001ac8:	89 f8                	mov    eax,edi
10001aca:	83 fd 20             	cmp    ebp,0x20
10001acd:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
10001ad1:	75 d4                	jne    10001aa7 <createTightCursorRegion(int, int, unsigned int*)+0x72>
10001ad3:	84 c0                	test   al,al
10001ad5:	74 09                	je     10001ae0 <createTightCursorRegion(int, int, unsigned int*)+0xab>
10001ad7:	c7 44 94 10 20 00 00 00 	mov    DWORD PTR [esp+edx*4+0x10],0x20
10001adf:	42                   	inc    edx
10001ae0:	89 d7                	mov    edi,edx
10001ae2:	8d 69 04             	lea    ebp,[ecx+0x4]
10001ae5:	81 cf 00 00 01 00    	or     edi,0x10000
10001aeb:	89 39                	mov    DWORD PTR [ecx],edi
10001aed:	31 ff                	xor    edi,edi
10001aef:	39 fa                	cmp    edx,edi
10001af1:	74 0b                	je     10001afe <createTightCursorRegion(int, int, unsigned int*)+0xc9>
10001af3:	8b 44 bc 10          	mov    eax,DWORD PTR [esp+edi*4+0x10]
10001af7:	89 44 b9 04          	mov    DWORD PTR [ecx+edi*4+0x4],eax
10001afb:	47                   	inc    edi
10001afc:	eb f1                	jmp    10001aef <createTightCursorRegion(int, int, unsigned int*)+0xba>
10001afe:	c1 e2 02             	shl    edx,0x2
10001b01:	46                   	inc    esi
10001b02:	8d 4c 15 00          	lea    ecx,[ebp+edx*1+0x0]
10001b06:	83 fe 20             	cmp    esi,0x20
10001b09:	8d 54 15 04          	lea    edx,[ebp+edx*1+0x4]
10001b0d:	0f 85 71 ff ff ff    	jne    10001a84 <createTightCursorRegion(int, int, unsigned int*)+0x4f>
10001b13:	c7 01 ff ff ff ff    	mov    DWORD PTR [ecx],0xffffffff
10001b19:	2b 14 24             	sub    edx,DWORD PTR [esp]
10001b1c:	89 d8                	mov    eax,ebx
10001b1e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
10001b21:	83 c4 5c             	add    esp,0x5c
10001b24:	5b                   	pop    ebx
10001b25:	5e                   	pop    esi
10001b26:	5f                   	pop    edi
10001b27:	5d                   	pop    ebp
10001b28:	c2 04 00             	ret    0x4

10001b2b <createEllipseRegion(int, int, int, int)>:
10001b2b:	55                   	push   ebp
10001b2c:	57                   	push   edi
10001b2d:	56                   	push   esi
10001b2e:	53                   	push   ebx
10001b2f:	83 ec 28             	sub    esp,0x28
10001b32:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10001b36:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
10001b3a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10001b3e:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
10001b41:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
10001b44:	c6 46 18 00          	mov    BYTE PTR [esi+0x18],0x0
10001b48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10001b4c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
10001b4f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10001b53:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
10001b56:	6b c3 0c             	imul   eax,ebx,0xc
10001b59:	83 c0 04             	add    eax,0x4
10001b5c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
10001b5f:	50                   	push   eax
10001b60:	e8 fc ff ff ff       	call   10001b61 <createEllipseRegion(int, int, int, int)+0x36>	10001b61: R_386_PC32	malloc
10001b65:	83 c4 10             	add    esp,0x10
10001b68:	89 c5                	mov    ebp,eax
10001b6a:	89 06                	mov    DWORD PTR [esi],eax
10001b6c:	85 c0                	test   eax,eax
10001b6e:	75 10                	jne    10001b80 <createEllipseRegion(int, int, int, int)+0x55>
10001b70:	83 ec 0c             	sub    esp,0xc
10001b73:	68 b6 86 00 10       	push   0x100086b6	10001b74: R_386_32	.text
10001b78:	e8 fc ff ff ff       	call   10001b79 <createEllipseRegion(int, int, int, int)+0x4e>	10001b79: R_386_PC32	KePanic(char const*)
10001b7d:	83 c4 10             	add    esp,0x10
10001b80:	89 ef                	mov    edi,ebp
10001b82:	31 c0                	xor    eax,eax
10001b84:	39 d8                	cmp    eax,ebx
10001b86:	0f 8d 88 00 00 00    	jge    10001c14 <createEllipseRegion(int, int, int, int)+0xe9>
10001b8c:	89 04 24             	mov    DWORD PTR [esp],eax
10001b8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001b93:	db 04 24             	fild   DWORD PTR [esp]
10001b96:	8d 53 ff             	lea    edx,[ebx-0x1]
10001b99:	83 ec 10             	sub    esp,0x10
10001b9c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10001ba0:	d8 c0                	fadd   st,st(0)
10001ba2:	83 c7 0c             	add    edi,0xc
10001ba5:	da 74 24 10          	fidiv  DWORD PTR [esp+0x10]
10001ba9:	d9 e8                	fld1   
10001bab:	dc e1                	fsubr  st(1),st
10001bad:	d9 c9                	fxch   st(1)
10001baf:	d8 c8                	fmul   st,st(0)
10001bb1:	de e9                	fsubp  st(1),st
10001bb3:	dd 1c 24             	fstp   QWORD PTR [esp]
10001bb6:	e8 fc ff ff ff       	call   10001bb7 <createEllipseRegion(int, int, int, int)+0x8c>	10001bb7: R_386_PC32	sqrt
10001bbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001bbf:	d9 7c 24 1e          	fnstcw WORD PTR [esp+0x1e]
10001bc3:	db 44 24 4c          	fild   DWORD PTR [esp+0x4c]
10001bc7:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
10001bcc:	dc c9                	fmul   st(1),st
10001bce:	80 ce 0c             	or     dh,0xc
10001bd1:	d8 e1                	fsub   st,st(1)
10001bd3:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
10001bd8:	d8 0d bc 86 00 10    	fmul   DWORD PTR ds:0x100086bc	10001bda: R_386_32	.text
10001bde:	40                   	inc    eax
10001bdf:	d9 6c 24 1c          	fldcw  WORD PTR [esp+0x1c]
10001be3:	db 5c 24 18          	fistp  DWORD PTR [esp+0x18]
10001be7:	d9 6c 24 1e          	fldcw  WORD PTR [esp+0x1e]
10001beb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10001bef:	c7 47 f4 02 00 01 00 	mov    DWORD PTR [edi-0xc],0x10002
10001bf6:	89 57 f8             	mov    DWORD PTR [edi-0x8],edx
10001bf9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10001bfd:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
10001c01:	d9 6c 24 1c          	fldcw  WORD PTR [esp+0x1c]
10001c05:	db 5f fc             	fistp  DWORD PTR [edi-0x4]
10001c08:	d9 6c 24 1e          	fldcw  WORD PTR [esp+0x1e]
10001c0c:	83 c4 10             	add    esp,0x10
10001c0f:	e9 70 ff ff ff       	jmp    10001b84 <createEllipseRegion(int, int, int, int)+0x59>
10001c14:	85 db                	test   ebx,ebx
10001c16:	79 02                	jns    10001c1a <createEllipseRegion(int, int, int, int)+0xef>
10001c18:	31 db                	xor    ebx,ebx
10001c1a:	6b db 0c             	imul   ebx,ebx,0xc
10001c1d:	89 f0                	mov    eax,esi
10001c1f:	c7 44 1d 00 ff ff ff ff 	mov    DWORD PTR [ebp+ebx*1+0x0],0xffffffff
10001c27:	83 c4 1c             	add    esp,0x1c
10001c2a:	5b                   	pop    ebx
10001c2b:	5e                   	pop    esi
10001c2c:	5f                   	pop    edi
10001c2d:	5d                   	pop    ebp
10001c2e:	c2 04 00             	ret    0x4

10001c31 <createPolygonRegion(int*, int*, int)>:
10001c31:	55                   	push   ebp
10001c32:	57                   	push   edi
10001c33:	56                   	push   esi
10001c34:	53                   	push   ebx
10001c35:	51                   	push   ecx
10001c36:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
10001c3a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10001c3e:	8b 0e                	mov    ecx,DWORD PTR [esi]
10001c40:	8b 17                	mov    edx,DWORD PTR [edi]
10001c42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001c46:	89 14 24             	mov    DWORD PTR [esp],edx
10001c49:	89 cb                	mov    ebx,ecx
10001c4b:	31 f6                	xor    esi,esi
10001c4d:	3b 74 24 24          	cmp    esi,DWORD PTR [esp+0x24]
10001c51:	7d 2b                	jge    10001c7e <createPolygonRegion(int*, int*, int)+0x4d>
10001c53:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001c57:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
10001c5a:	39 e9                	cmp    ecx,ebp
10001c5c:	7e 02                	jle    10001c60 <createPolygonRegion(int*, int*, int)+0x2f>
10001c5e:	89 e9                	mov    ecx,ebp
10001c60:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10001c64:	8b 3c b7             	mov    edi,DWORD PTR [edi+esi*4]
10001c67:	39 fa                	cmp    edx,edi
10001c69:	7e 02                	jle    10001c6d <createPolygonRegion(int*, int*, int)+0x3c>
10001c6b:	89 fa                	mov    edx,edi
10001c6d:	39 eb                	cmp    ebx,ebp
10001c6f:	7d 02                	jge    10001c73 <createPolygonRegion(int*, int*, int)+0x42>
10001c71:	89 eb                	mov    ebx,ebp
10001c73:	39 3c 24             	cmp    DWORD PTR [esp],edi
10001c76:	7d 03                	jge    10001c7b <createPolygonRegion(int*, int*, int)+0x4a>
10001c78:	89 3c 24             	mov    DWORD PTR [esp],edi
10001c7b:	46                   	inc    esi
10001c7c:	eb cf                	jmp    10001c4d <createPolygonRegion(int*, int*, int)+0x1c>
10001c7e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10001c84:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
10001c8b:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
10001c8e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
10001c91:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
10001c95:	29 cb                	sub    ebx,ecx
10001c97:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
10001c9a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
10001c9d:	29 d3                	sub    ebx,edx
10001c9f:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
10001ca2:	5a                   	pop    edx
10001ca3:	5b                   	pop    ebx
10001ca4:	5e                   	pop    esi
10001ca5:	5f                   	pop    edi
10001ca6:	5d                   	pop    ebp
10001ca7:	c2 04 00             	ret    0x4

10001caa <createRectangleRegion(int, int, int, int)>:
10001caa:	57                   	push   edi
10001cab:	56                   	push   esi
10001cac:	53                   	push   ebx
10001cad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001cb1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001cb5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10001cb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001cbd:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
10001cc0:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10001cc3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10001cc6:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
10001cca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001cce:	c7 43 0c 10 00 00 00 	mov    DWORD PTR [ebx+0xc],0x10
10001cd5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10001cd8:	83 ec 0c             	sub    esp,0xc
10001cdb:	c1 e6 10             	shl    esi,0x10
10001cde:	6a 10                	push   0x10
10001ce0:	83 ce 02             	or     esi,0x2
10001ce3:	e8 fc ff ff ff       	call   10001ce4 <createRectangleRegion(int, int, int, int)+0x3a>	10001ce4: R_386_PC32	malloc
10001ce8:	83 c4 10             	add    esp,0x10
10001ceb:	89 03                	mov    DWORD PTR [ebx],eax
10001ced:	89 30                	mov    DWORD PTR [eax],esi
10001cef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001cf6:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
10001cf9:	c7 40 0c ff ff ff ff 	mov    DWORD PTR [eax+0xc],0xffffffff
10001d00:	89 d8                	mov    eax,ebx
10001d02:	5b                   	pop    ebx
10001d03:	5e                   	pop    esi
10001d04:	5f                   	pop    edi
10001d05:	c2 04 00             	ret    0x4

10001d08 <createBorderRegion(int, int, int, int, int)>:
10001d08:	55                   	push   ebp
10001d09:	57                   	push   edi
10001d0a:	56                   	push   esi
10001d0b:	53                   	push   ebx
10001d0c:	83 ec 18             	sub    esp,0x18
10001d0f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10001d13:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10001d17:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10001d1b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10001d1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001d23:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
10001d26:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10001d29:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10001d2c:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
10001d30:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001d34:	c7 43 0c 30 00 00 00 	mov    DWORD PTR [ebx+0xc],0x30
10001d3b:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10001d3e:	6a 30                	push   0x30
10001d40:	e8 fc ff ff ff       	call   10001d41 <createBorderRegion(int, int, int, int, int)+0x39>	10001d41: R_386_PC32	malloc
10001d45:	8d 4c 2d 00          	lea    ecx,[ebp+ebp*1+0x0]
10001d49:	89 03                	mov    DWORD PTR [ebx],eax
10001d4b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001d52:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
10001d55:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10001d5c:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
10001d5f:	89 78 1c             	mov    DWORD PTR [eax+0x1c],edi
10001d62:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
10001d69:	89 78 28             	mov    DWORD PTR [eax+0x28],edi
10001d6c:	c7 40 2c ff ff ff ff 	mov    DWORD PTR [eax+0x2c],0xffffffff
10001d73:	89 ea                	mov    edx,ebp
10001d75:	29 ce                	sub    esi,ecx
10001d77:	c1 e2 10             	shl    edx,0x10
10001d7a:	89 f9                	mov    ecx,edi
10001d7c:	83 ca 02             	or     edx,0x2
10001d7f:	29 e9                	sub    ecx,ebp
10001d81:	89 10                	mov    DWORD PTR [eax],edx
10001d83:	89 48 18             	mov    DWORD PTR [eax+0x18],ecx
10001d86:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
10001d89:	c1 e6 10             	shl    esi,0x10
10001d8c:	83 ce 04             	or     esi,0x4
10001d8f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
10001d92:	83 c4 1c             	add    esp,0x1c
10001d95:	89 d8                	mov    eax,ebx
10001d97:	5b                   	pop    ebx
10001d98:	5e                   	pop    esi
10001d99:	5f                   	pop    edi
10001d9a:	5d                   	pop    ebp
10001d9b:	c2 04 00             	ret    0x4

10001d9e <createAntRegion(int, int, int, int, int)>:
10001d9e:	53                   	push   ebx
10001d9f:	83 ec 10             	sub    esp,0x10
10001da2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10001da6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001daa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001dae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001db2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001db6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001dba:	53                   	push   ebx
10001dbb:	e8 fc ff ff ff       	call   10001dbc <createAntRegion(int, int, int, int, int)+0x1e>	10001dbc: R_386_PC32	createBorderRegion(int, int, int, int, int)
10001dc0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
10001dc4:	89 d8                	mov    eax,ebx
10001dc6:	83 c4 24             	add    esp,0x24
10001dc9:	5b                   	pop    ebx
10001dca:	c2 04 00             	ret    0x4

10001dcd <compressScanlineAndAddToRegion(Region*, int, unsigned int*, unsigned int, unsigned int)>:
10001dcd:	57                   	push   edi
10001dce:	56                   	push   esi
10001dcf:	be 04 00 00 00       	mov    esi,0x4
10001dd4:	53                   	push   ebx
10001dd5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10001dd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001ddd:	8b 18                	mov    ebx,DWORD PTR [eax]
10001ddf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001de3:	99                   	cdq    
10001de4:	f7 fe                	idiv   esi
10001de6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001dea:	8d 7c 83 04          	lea    edi,[ebx+eax*4+0x4]
10001dee:	c1 e2 10             	shl    edx,0x10
10001df1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10001df5:	09 ca                	or     edx,ecx
10001df7:	89 14 83             	mov    DWORD PTR [ebx+eax*4],edx
10001dfa:	8d 14 8d 00 00 00 00 	lea    edx,[ecx*4+0x0]
10001e01:	89 d1                	mov    ecx,edx
10001e03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10001e05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001e09:	5b                   	pop    ebx
10001e0a:	8d 44 02 04          	lea    eax,[edx+eax*1+0x4]
10001e0e:	5e                   	pop    esi
10001e0f:	5f                   	pop    edi
10001e10:	c3                   	ret    

10001e11 <performRegionOperation(Region, Region, RegionOperation)>:
10001e11:	55                   	push   ebp
10001e12:	57                   	push   edi
10001e13:	56                   	push   esi
10001e14:	53                   	push   ebx
10001e15:	81 ec 7c 20 00 00    	sub    esp,0x207c
10001e1b:	8b 84 24 94 20 00 00 	mov    eax,DWORD PTR [esp+0x2094]
10001e22:	8b b4 24 b0 20 00 00 	mov    esi,DWORD PTR [esp+0x20b0]
10001e29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001e2d:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10001e31:	8b 84 24 9c 20 00 00 	mov    eax,DWORD PTR [esp+0x209c]
10001e38:	8b b4 24 b8 20 00 00 	mov    esi,DWORD PTR [esp+0x20b8]
10001e3f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10001e43:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
10001e47:	8b 84 24 a0 20 00 00 	mov    eax,DWORD PTR [esp+0x20a0]
10001e4e:	8b b4 24 bc 20 00 00 	mov    esi,DWORD PTR [esp+0x20bc]
10001e55:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10001e59:	8b 94 24 c0 20 00 00 	mov    edx,DWORD PTR [esp+0x20c0]
10001e60:	8b 84 24 a4 20 00 00 	mov    eax,DWORD PTR [esp+0x20a4]
10001e67:	8b ac 24 90 20 00 00 	mov    ebp,DWORD PTR [esp+0x2090]
10001e6e:	8b 8c 24 a8 20 00 00 	mov    ecx,DWORD PTR [esp+0x20a8]
10001e75:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10001e79:	8b 9c 24 c4 20 00 00 	mov    ebx,DWORD PTR [esp+0x20c4]
10001e80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001e84:	39 d0                	cmp    eax,edx
10001e86:	7e 04                	jle    10001e8c <performRegionOperation(Region, Region, RegionOperation)+0x7b>
10001e88:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
10001e8c:	89 ce                	mov    esi,ecx
10001e8e:	39 d9                	cmp    ecx,ebx
10001e90:	7e 02                	jle    10001e94 <performRegionOperation(Region, Region, RegionOperation)+0x83>
10001e92:	89 de                	mov    esi,ebx
10001e94:	8b bc 24 98 20 00 00 	mov    edi,DWORD PTR [esp+0x2098]
10001e9b:	01 c7                	add    edi,eax
10001e9d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
10001ea1:	8b bc 24 b4 20 00 00 	mov    edi,DWORD PTR [esp+0x20b4]
10001ea8:	01 d7                	add    edi,edx
10001eaa:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
10001eae:	7d 04                	jge    10001eb4 <performRegionOperation(Region, Region, RegionOperation)+0xa3>
10001eb0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10001eb4:	2b 7c 24 04          	sub    edi,DWORD PTR [esp+0x4]
10001eb8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10001ebc:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
10001ec0:	01 cf                	add    edi,ecx
10001ec2:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
10001ec6:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
10001eca:	01 df                	add    edi,ebx
10001ecc:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
10001ed0:	7d 04                	jge    10001ed6 <performRegionOperation(Region, Region, RegionOperation)+0xc5>
10001ed2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10001ed6:	29 f7                	sub    edi,esi
10001ed8:	39 d9                	cmp    ecx,ebx
10001eda:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
10001ede:	7c 10                	jl     10001ef0 <performRegionOperation(Region, Region, RegionOperation)+0xdf>
10001ee0:	89 cf                	mov    edi,ecx
10001ee2:	29 df                	sub    edi,ebx
10001ee4:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10001ee8:	31 ff                	xor    edi,edi
10001eea:	39 d9                	cmp    ecx,ebx
10001eec:	75 0e                	jne    10001efc <performRegionOperation(Region, Region, RegionOperation)+0xeb>
10001eee:	eb 08                	jmp    10001ef8 <performRegionOperation(Region, Region, RegionOperation)+0xe7>
10001ef0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
10001ef8:	29 cb                	sub    ebx,ecx
10001efa:	89 df                	mov    edi,ebx
10001efc:	39 d0                	cmp    eax,edx
10001efe:	7c 16                	jl     10001f16 <performRegionOperation(Region, Region, RegionOperation)+0x105>
10001f00:	89 c3                	mov    ebx,eax
10001f02:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10001f0a:	29 d3                	sub    ebx,edx
10001f0c:	39 d0                	cmp    eax,edx
10001f0e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
10001f12:	75 10                	jne    10001f24 <performRegionOperation(Region, Region, RegionOperation)+0x113>
10001f14:	eb 08                	jmp    10001f1e <performRegionOperation(Region, Region, RegionOperation)+0x10d>
10001f16:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001f1e:	29 c2                	sub    edx,eax
10001f20:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
10001f24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001f28:	89 75 14             	mov    DWORD PTR [ebp+0x14],esi
10001f2b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
10001f2e:	c6 45 18 00          	mov    BYTE PTR [ebp+0x18],0x0
10001f32:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001f36:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10001f39:	f7 df                	neg    edi
10001f3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10001f3f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
10001f42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001f46:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
10001f4a:	c1 e0 02             	shl    eax,0x2
10001f4d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10001f50:	51                   	push   ecx
10001f51:	51                   	push   ecx
10001f52:	6a 01                	push   0x1
10001f54:	50                   	push   eax
10001f55:	e8 fc ff ff ff       	call   10001f56 <performRegionOperation(Region, Region, RegionOperation)+0x145>	10001f56: R_386_PC32	calloc
10001f5a:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
10001f62:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
10001f6a:	c7 84 24 80 08 00 00 ff ff ff ff 	mov    DWORD PTR [esp+0x880],0xffffffff
10001f75:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10001f79:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
10001f7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10001f80:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
10001f84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001f88:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10001f8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001f90:	f7 d8                	neg    eax
10001f92:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001f96:	83 c4 10             	add    esp,0x10
10001f99:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
10001fa1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
10001fa9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10001fb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10001fb5:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
10001fb9:	39 44 24 3c          	cmp    DWORD PTR [esp+0x3c],eax
10001fbd:	0f 8e cc 01 00 00    	jle    1000218f <performRegionOperation(Region, Region, RegionOperation)+0x37e>
10001fc3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
10001fc7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10001fcb:	f7 d2                	not    edx
10001fcd:	c1 ea 1f             	shr    edx,0x1f
10001fd0:	39 74 24 40          	cmp    DWORD PTR [esp+0x40],esi
10001fd4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
10001fd8:	0f 9f c0             	setg   al
10001fdb:	21 d0                	and    eax,edx
10001fdd:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
10001fe1:	88 44 24 56          	mov    BYTE PTR [esp+0x56],al
10001fe5:	89 f2                	mov    edx,esi
10001fe7:	0f 9f c0             	setg   al
10001fea:	f7 d2                	not    edx
10001fec:	31 db                	xor    ebx,ebx
10001fee:	c1 ea 1f             	shr    edx,0x1f
10001ff1:	21 d0                	and    eax,edx
10001ff3:	88 44 24 57          	mov    BYTE PTR [esp+0x57],al
10001ff7:	80 7c 1c 56 00       	cmp    BYTE PTR [esp+ebx*1+0x56],0x0
10001ffc:	75 0a                	jne    10002008 <performRegionOperation(Region, Region, RegionOperation)+0x1f7>
10001ffe:	c7 44 9c 68 00 00 00 00 	mov    DWORD PTR [esp+ebx*4+0x68],0x0
10002006:	eb 1b                	jmp    10002023 <performRegionOperation(Region, Region, RegionOperation)+0x212>
10002008:	83 7c 9c 68 00       	cmp    DWORD PTR [esp+ebx*4+0x68],0x0
1000200d:	75 14                	jne    10002023 <performRegionOperation(Region, Region, RegionOperation)+0x212>
1000200f:	8b 4c 9c 58          	mov    ecx,DWORD PTR [esp+ebx*4+0x58]
10002013:	8b 01                	mov    eax,DWORD PTR [ecx]
10002015:	83 f8 ff             	cmp    eax,0xffffffff
10002018:	0f 85 a5 01 00 00    	jne    100021c3 <performRegionOperation(Region, Region, RegionOperation)+0x3b2>
1000201e:	c6 44 1c 56 00       	mov    BYTE PTR [esp+ebx*1+0x56],0x0
10002023:	83 fb 01             	cmp    ebx,0x1
10002026:	74 07                	je     1000202f <performRegionOperation(Region, Region, RegionOperation)+0x21e>
10002028:	bb 01 00 00 00       	mov    ebx,0x1
1000202d:	eb c8                	jmp    10001ff7 <performRegionOperation(Region, Region, RegionOperation)+0x1e6>
1000202f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10002033:	c6 44 24 4e 01       	mov    BYTE PTR [esp+0x4e],0x1
10002038:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000203c:	c6 44 24 4d 00       	mov    BYTE PTR [esp+0x4d],0x0
10002041:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
10002046:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000204a:	0f 95 44 24 4f       	setne  BYTE PTR [esp+0x4f]
1000204f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002053:	31 f6                	xor    esi,esi
10002055:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
10002059:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
10002061:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002065:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
1000206d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002071:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
10002079:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
1000207d:	31 c0                	xor    eax,eax
1000207f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
10002084:	74 0a                	je     10002090 <performRegionOperation(Region, Region, RegionOperation)+0x27f>
10002086:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
1000208a:	39 54 24 2c          	cmp    DWORD PTR [esp+0x2c],edx
1000208e:	7f 22                	jg     100020b2 <performRegionOperation(Region, Region, RegionOperation)+0x2a1>
10002090:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10002095:	74 62                	je     100020f9 <performRegionOperation(Region, Region, RegionOperation)+0x2e8>
10002097:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000209b:	39 54 24 34          	cmp    DWORD PTR [esp+0x34],edx
1000209f:	7e 58                	jle    100020f9 <performRegionOperation(Region, Region, RegionOperation)+0x2e8>
100020a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100020a5:	39 54 24 2c          	cmp    DWORD PTR [esp+0x2c],edx
100020a9:	7e 2e                	jle    100020d9 <performRegionOperation(Region, Region, RegionOperation)+0x2c8>
100020ab:	80 7c 24 4f 00       	cmp    BYTE PTR [esp+0x4f],0x0
100020b0:	74 27                	je     100020d9 <performRegionOperation(Region, Region, RegionOperation)+0x2c8>
100020b2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100020b6:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
100020ba:	03 8c 94 70 10 00 00 	add    ecx,DWORD PTR [esp+edx*4+0x1070]
100020c1:	83 ca ff             	or     edx,0xffffffff
100020c4:	89 cf                	mov    edi,ecx
100020c6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
100020ca:	39 4c 24 34          	cmp    DWORD PTR [esp+0x34],ecx
100020ce:	7e 1b                	jle    100020eb <performRegionOperation(Region, Region, RegionOperation)+0x2da>
100020d0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
100020d5:	74 14                	je     100020eb <performRegionOperation(Region, Region, RegionOperation)+0x2da>
100020d7:	eb 03                	jmp    100020dc <performRegionOperation(Region, Region, RegionOperation)+0x2cb>
100020d9:	83 cf ff             	or     edi,0xffffffff
100020dc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
100020e0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
100020e4:	03 94 8c 70 18 00 00 	add    edx,DWORD PTR [esp+ecx*4+0x1870]
100020eb:	83 ff ff             	cmp    edi,0xffffffff
100020ee:	0f 85 9e 01 00 00    	jne    10002292 <performRegionOperation(Region, Region, RegionOperation)+0x481>
100020f4:	e9 18 01 00 00       	jmp    10002211 <performRegionOperation(Region, Region, RegionOperation)+0x400>
100020f9:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
100020fd:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
10002101:	75 16                	jne    10002119 <performRegionOperation(Region, Region, RegionOperation)+0x308>
10002103:	80 7c 24 4e 00       	cmp    BYTE PTR [esp+0x4e],0x0
10002108:	74 0f                	je     10002119 <performRegionOperation(Region, Region, RegionOperation)+0x308>
1000210a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
1000210e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002112:	43                   	inc    ebx
10002113:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10002117:	eb 43                	jmp    1000215c <performRegionOperation(Region, Region, RegionOperation)+0x34b>
10002119:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
1000211e:	74 24                	je     10002144 <performRegionOperation(Region, Region, RegionOperation)+0x333>
10002120:	83 ec 0c             	sub    esp,0xc
10002123:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10002127:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000212b:	8d 84 24 84 08 00 00 	lea    eax,[esp+0x884]
10002132:	50                   	push   eax
10002133:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10002137:	55                   	push   ebp
10002138:	e8 fc ff ff ff       	call   10002139 <performRegionOperation(Region, Region, RegionOperation)+0x328>	10002139: R_386_PC32	compressScanlineAndAddToRegion(Region*, int, unsigned int*, unsigned int, unsigned int)
1000213d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10002141:	83 c4 20             	add    esp,0x20
10002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10002148:	8d 74 24 70          	lea    esi,[esp+0x70]
1000214c:	8d bc 24 70 08 00 00 	lea    edi,[esp+0x870]
10002153:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000215a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000215c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10002160:	85 c0                	test   eax,eax
10002162:	74 05                	je     10002169 <performRegionOperation(Region, Region, RegionOperation)+0x358>
10002164:	48                   	dec    eax
10002165:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
10002169:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
1000216d:	85 c0                	test   eax,eax
1000216f:	74 05                	je     10002176 <performRegionOperation(Region, Region, RegionOperation)+0x365>
10002171:	48                   	dec    eax
10002172:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10002176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000217a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
1000217e:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
10002182:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002186:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
1000218a:	e9 22 fe ff ff       	jmp    10001fb1 <performRegionOperation(Region, Region, RegionOperation)+0x1a0>
1000218f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10002194:	0f 84 2f 01 00 00    	je     100022c9 <performRegionOperation(Region, Region, RegionOperation)+0x4b8>
1000219a:	83 ec 0c             	sub    esp,0xc
1000219d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100021a1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100021a5:	8d 84 24 84 08 00 00 	lea    eax,[esp+0x884]
100021ac:	50                   	push   eax
100021ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100021b1:	55                   	push   ebp
100021b2:	e8 fc ff ff ff       	call   100021b3 <performRegionOperation(Region, Region, RegionOperation)+0x3a2>	100021b3: R_386_PC32	compressScanlineAndAddToRegion(Region*, int, unsigned int*, unsigned int, unsigned int)
100021b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
100021bb:	83 c4 20             	add    esp,0x20
100021be:	e9 06 01 00 00       	jmp    100022c9 <performRegionOperation(Region, Region, RegionOperation)+0x4b8>
100021c3:	0f b7 d0             	movzx  edx,ax
100021c6:	83 c1 04             	add    ecx,0x4
100021c9:	c1 e8 10             	shr    eax,0x10
100021cc:	89 54 9c 60          	mov    DWORD PTR [esp+ebx*4+0x60],edx
100021d0:	89 44 9c 68          	mov    DWORD PTR [esp+ebx*4+0x68],eax
100021d4:	89 4c 9c 58          	mov    DWORD PTR [esp+ebx*4+0x58],ecx
100021d8:	89 d8                	mov    eax,ebx
100021da:	8d b4 24 70 10 00 00 	lea    esi,[esp+0x1070]
100021e1:	c1 e0 0b             	shl    eax,0xb
100021e4:	89 d9                	mov    ecx,ebx
100021e6:	01 f0                	add    eax,esi
100021e8:	c1 e1 09             	shl    ecx,0x9
100021eb:	01 ca                	add    edx,ecx
100021ed:	8d 8c 94 70 10 00 00 	lea    ecx,[esp+edx*4+0x1070]
100021f4:	39 c8                	cmp    eax,ecx
100021f6:	0f 84 27 fe ff ff    	je     10002023 <performRegionOperation(Region, Region, RegionOperation)+0x212>
100021fc:	8b 54 9c 58          	mov    edx,DWORD PTR [esp+ebx*4+0x58]
10002200:	83 c0 04             	add    eax,0x4
10002203:	8b 32                	mov    esi,DWORD PTR [edx]
10002205:	83 c2 04             	add    edx,0x4
10002208:	89 70 fc             	mov    DWORD PTR [eax-0x4],esi
1000220b:	89 54 9c 58          	mov    DWORD PTR [esp+ebx*4+0x58],edx
1000220f:	eb e3                	jmp    100021f4 <performRegionOperation(Region, Region, RegionOperation)+0x3e3>
10002211:	31 c0                	xor    eax,eax
10002213:	83 fa ff             	cmp    edx,0xffffffff
10002216:	74 0b                	je     10002223 <performRegionOperation(Region, Region, RegionOperation)+0x412>
10002218:	83 f6 01             	xor    esi,0x1
1000221b:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
1000221f:	89 d7                	mov    edi,edx
10002221:	eb 02                	jmp    10002225 <performRegionOperation(Region, Region, RegionOperation)+0x414>
10002223:	31 f6                	xor    esi,esi
10002225:	89 f2                	mov    edx,esi
10002227:	21 c2                	and    edx,eax
10002229:	83 bc 24 cc 20 00 00 01 	cmp    DWORD PTR [esp+0x20cc],0x1
10002231:	74 2f                	je     10002262 <performRegionOperation(Region, Region, RegionOperation)+0x451>
10002233:	89 f2                	mov    edx,esi
10002235:	7f 0c                	jg     10002243 <performRegionOperation(Region, Region, RegionOperation)+0x432>
10002237:	09 c2                	or     edx,eax
10002239:	83 bc 24 cc 20 00 00 00 	cmp    DWORD PTR [esp+0x20cc],0x0
10002241:	eb 14                	jmp    10002257 <performRegionOperation(Region, Region, RegionOperation)+0x446>
10002243:	83 bc 24 cc 20 00 00 02 	cmp    DWORD PTR [esp+0x20cc],0x2
1000224b:	74 10                	je     1000225d <performRegionOperation(Region, Region, RegionOperation)+0x44c>
1000224d:	31 c2                	xor    edx,eax
1000224f:	83 bc 24 cc 20 00 00 03 	cmp    DWORD PTR [esp+0x20cc],0x3
10002257:	74 09                	je     10002262 <performRegionOperation(Region, Region, RegionOperation)+0x451>
10002259:	88 c2                	mov    dl,al
1000225b:	eb 05                	jmp    10002262 <performRegionOperation(Region, Region, RegionOperation)+0x451>
1000225d:	83 f2 01             	xor    edx,0x1
10002260:	21 c2                	and    edx,eax
10002262:	38 54 24 4d          	cmp    BYTE PTR [esp+0x4d],dl
10002266:	75 09                	jne    10002271 <performRegionOperation(Region, Region, RegionOperation)+0x460>
10002268:	88 54 24 4d          	mov    BYTE PTR [esp+0x4d],dl
1000226c:	e9 0e fe ff ff       	jmp    1000207f <performRegionOperation(Region, Region, RegionOperation)+0x26e>
10002271:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10002275:	39 bc 8c 70 08 00 00 	cmp    DWORD PTR [esp+ecx*4+0x870],edi
1000227c:	74 05                	je     10002283 <performRegionOperation(Region, Region, RegionOperation)+0x472>
1000227e:	c6 44 24 4e 00       	mov    BYTE PTR [esp+0x4e],0x0
10002283:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10002287:	89 7c 8c 70          	mov    DWORD PTR [esp+ecx*4+0x70],edi
1000228b:	41                   	inc    ecx
1000228c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
10002290:	eb d6                	jmp    10002268 <performRegionOperation(Region, Region, RegionOperation)+0x457>
10002292:	83 fa ff             	cmp    edx,0xffffffff
10002295:	74 0a                	je     100022a1 <performRegionOperation(Region, Region, RegionOperation)+0x490>
10002297:	39 d7                	cmp    edi,edx
10002299:	0f 8f 79 ff ff ff    	jg     10002218 <performRegionOperation(Region, Region, RegionOperation)+0x407>
1000229f:	eb 02                	jmp    100022a3 <performRegionOperation(Region, Region, RegionOperation)+0x492>
100022a1:	31 f6                	xor    esi,esi
100022a3:	83 f0 01             	xor    eax,0x1
100022a6:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
100022aa:	83 fa ff             	cmp    edx,0xffffffff
100022ad:	0f 84 72 ff ff ff    	je     10002225 <performRegionOperation(Region, Region, RegionOperation)+0x414>
100022b3:	39 d7                	cmp    edi,edx
100022b5:	0f 8d 5d ff ff ff    	jge    10002218 <performRegionOperation(Region, Region, RegionOperation)+0x407>
100022bb:	83 ff ff             	cmp    edi,0xffffffff
100022be:	0f 85 61 ff ff ff    	jne    10002225 <performRegionOperation(Region, Region, RegionOperation)+0x414>
100022c4:	e9 4f ff ff ff       	jmp    10002218 <performRegionOperation(Region, Region, RegionOperation)+0x407>
100022c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100022cd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
100022d0:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100022d3:	bb 04 00 00 00       	mov    ebx,0x4
100022d8:	99                   	cdq    
100022d9:	f7 fb                	idiv   ebx
100022db:	c7 04 81 ff ff ff ff 	mov    DWORD PTR [ecx+eax*4],0xffffffff
100022e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100022e5:	83 c0 04             	add    eax,0x4
100022e8:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100022eb:	52                   	push   edx
100022ec:	52                   	push   edx
100022ed:	50                   	push   eax
100022ee:	51                   	push   ecx
100022ef:	e8 fc ff ff ff       	call   100022f0 <performRegionOperation(Region, Region, RegionOperation)+0x4df>	100022f0: R_386_PC32	realloc
100022f4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
100022f7:	81 c4 8c 20 00 00    	add    esp,0x208c
100022fd:	89 e8                	mov    eax,ebp
100022ff:	5b                   	pop    ebx
10002300:	5e                   	pop    esi
10002301:	5f                   	pop    edi
10002302:	5d                   	pop    ebp
10002303:	c2 04 00             	ret    0x4

10002306 <getRegionUnion(Region, Region)>:
10002306:	57                   	push   edi
10002307:	b9 07 00 00 00       	mov    ecx,0x7
1000230c:	56                   	push   esi
1000230d:	53                   	push   ebx
1000230e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002312:	6a 00                	push   0x0
10002314:	83 ec 1c             	sub    esp,0x1c
10002317:	8d 74 24 50          	lea    esi,[esp+0x50]
1000231b:	89 e7                	mov    edi,esp
1000231d:	83 ec 1c             	sub    esp,0x1c
10002320:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002322:	8d 74 24 50          	lea    esi,[esp+0x50]
10002326:	89 e7                	mov    edi,esp
10002328:	b9 07 00 00 00       	mov    ecx,0x7
1000232d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000232f:	53                   	push   ebx
10002330:	e8 fc ff ff ff       	call   10002331 <getRegionUnion(Region, Region)+0x2b>	10002331: R_386_PC32	performRegionOperation(Region, Region, RegionOperation)
10002335:	89 d8                	mov    eax,ebx
10002337:	83 c4 3c             	add    esp,0x3c
1000233a:	5b                   	pop    ebx
1000233b:	5e                   	pop    esi
1000233c:	5f                   	pop    edi
1000233d:	c2 04 00             	ret    0x4

10002340 <getRegionDifference(Region, Region)>:
10002340:	57                   	push   edi
10002341:	b9 07 00 00 00       	mov    ecx,0x7
10002346:	56                   	push   esi
10002347:	53                   	push   ebx
10002348:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000234c:	6a 02                	push   0x2
1000234e:	83 ec 1c             	sub    esp,0x1c
10002351:	8d 74 24 50          	lea    esi,[esp+0x50]
10002355:	89 e7                	mov    edi,esp
10002357:	83 ec 1c             	sub    esp,0x1c
1000235a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000235c:	8d 74 24 50          	lea    esi,[esp+0x50]
10002360:	89 e7                	mov    edi,esp
10002362:	b9 07 00 00 00       	mov    ecx,0x7
10002367:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002369:	53                   	push   ebx
1000236a:	e8 fc ff ff ff       	call   1000236b <getRegionDifference(Region, Region)+0x2b>	1000236b: R_386_PC32	performRegionOperation(Region, Region, RegionOperation)
1000236f:	89 d8                	mov    eax,ebx
10002371:	83 c4 3c             	add    esp,0x3c
10002374:	5b                   	pop    ebx
10002375:	5e                   	pop    esi
10002376:	5f                   	pop    edi
10002377:	c2 04 00             	ret    0x4

1000237a <createSlowRoundedRectangleRegion(int, int, int, int, int)>:
1000237a:	55                   	push   ebp
1000237b:	57                   	push   edi
1000237c:	56                   	push   esi
1000237d:	53                   	push   ebx
1000237e:	81 ec 4c 01 00 00    	sub    esp,0x14c
10002384:	8b 9c 24 64 01 00 00 	mov    ebx,DWORD PTR [esp+0x164]
1000238b:	8b b4 24 68 01 00 00 	mov    esi,DWORD PTR [esp+0x168]
10002392:	8d 6c 24 28          	lea    ebp,[esp+0x28]
10002396:	83 ec 0c             	sub    esp,0xc
10002399:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
100023a0:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
100023a7:	56                   	push   esi
100023a8:	53                   	push   ebx
100023a9:	55                   	push   ebp
100023aa:	e8 fc ff ff ff       	call   100023ab <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x31>	100023ab: R_386_PC32	createRectangleRegion(int, int, int, int)
100023af:	ff b4 24 90 01 00 00 	push   DWORD PTR [esp+0x190]
100023b6:	ff b4 24 94 01 00 00 	push   DWORD PTR [esp+0x194]
100023bd:	56                   	push   esi
100023be:	53                   	push   ebx
100023bf:	8d 44 24 70          	lea    eax,[esp+0x70]
100023c3:	50                   	push   eax
100023c4:	e8 fc ff ff ff       	call   100023c5 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x4b>	100023c5: R_386_PC32	createRectangleRegion(int, int, int, int)
100023c9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100023d0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100023d4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
100023db:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
100023df:	8b 84 24 a0 01 00 00 	mov    eax,DWORD PTR [esp+0x1a0]
100023e6:	83 c4 20             	add    esp,0x20
100023e9:	01 c0                	add    eax,eax
100023eb:	50                   	push   eax
100023ec:	50                   	push   eax
100023ed:	56                   	push   esi
100023ee:	53                   	push   ebx
100023ef:	8d 44 24 7c          	lea    eax,[esp+0x7c]
100023f3:	50                   	push   eax
100023f4:	e8 fc ff ff ff       	call   100023f5 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x7b>	100023f5: R_386_PC32	createEllipseRegion(int, int, int, int)
100023f9:	b9 07 00 00 00       	mov    ecx,0x7
100023fe:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
10002405:	8d 9c 24 98 00 00 00 	lea    ebx,[esp+0x98]
1000240c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002410:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
10002417:	83 ec 14             	sub    esp,0x14
1000241a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
1000241e:	89 e7                	mov    edi,esp
10002420:	8d 74 24 74          	lea    esi,[esp+0x74]
10002424:	83 ec 1c             	sub    esp,0x1c
10002427:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002429:	89 e7                	mov    edi,esp
1000242b:	89 ee                	mov    esi,ebp
1000242d:	b9 07 00 00 00       	mov    ecx,0x7
10002432:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002434:	53                   	push   ebx
10002435:	e8 fc ff ff ff       	call   10002436 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0xbc>	10002436: R_386_PC32	getRegionDifference(Region, Region)
1000243a:	b9 07 00 00 00       	mov    ecx,0x7
1000243f:	8b 94 24 b8 01 00 00 	mov    edx,DWORD PTR [esp+0x1b8]
10002446:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
1000244a:	2b 94 24 c0 01 00 00 	sub    edx,DWORD PTR [esp+0x1c0]
10002451:	8d ac 24 e4 00 00 00 	lea    ebp,[esp+0xe4]
10002458:	01 d0                	add    eax,edx
1000245a:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
1000245e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
10002465:	83 c4 2c             	add    esp,0x2c
10002468:	89 e7                	mov    edi,esp
1000246a:	8d 74 24 64          	lea    esi,[esp+0x64]
1000246e:	83 ec 1c             	sub    esp,0x1c
10002471:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002473:	89 e7                	mov    edi,esp
10002475:	89 de                	mov    esi,ebx
10002477:	b9 07 00 00 00       	mov    ecx,0x7
1000247c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000247e:	55                   	push   ebp
1000247f:	e8 fc ff ff ff       	call   10002480 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x106>	10002480: R_386_PC32	getRegionDifference(Region, Region)
10002484:	b9 07 00 00 00       	mov    ecx,0x7
10002489:	8b 84 24 ac 01 00 00 	mov    eax,DWORD PTR [esp+0x1ac]
10002490:	8d 9c 24 f0 00 00 00 	lea    ebx,[esp+0xf0]
10002497:	2b 84 24 b0 01 00 00 	sub    eax,DWORD PTR [esp+0x1b0]
1000249e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100024a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
100024a6:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
100024aa:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
100024b1:	83 c4 1c             	add    esp,0x1c
100024b4:	89 e7                	mov    edi,esp
100024b6:	8d 74 24 64          	lea    esi,[esp+0x64]
100024ba:	83 ec 1c             	sub    esp,0x1c
100024bd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100024bf:	89 e7                	mov    edi,esp
100024c1:	89 ee                	mov    esi,ebp
100024c3:	b9 07 00 00 00       	mov    ecx,0x7
100024c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100024ca:	53                   	push   ebx
100024cb:	e8 fc ff ff ff       	call   100024cc <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x152>	100024cc: R_386_PC32	getRegionDifference(Region, Region)
100024d0:	b9 07 00 00 00       	mov    ecx,0x7
100024d5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100024d9:	89 84 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],eax
100024e0:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
100024e7:	83 c4 1c             	add    esp,0x1c
100024ea:	89 e7                	mov    edi,esp
100024ec:	8d 74 24 64          	lea    esi,[esp+0x64]
100024f0:	83 ec 1c             	sub    esp,0x1c
100024f3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100024f5:	89 e7                	mov    edi,esp
100024f7:	89 de                	mov    esi,ebx
100024f9:	b9 07 00 00 00       	mov    ecx,0x7
100024fe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002500:	50                   	push   eax
10002501:	e8 fc ff ff ff       	call   10002502 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x188>	10002502: R_386_PC32	getRegionDifference(Region, Region)
10002506:	b9 07 00 00 00       	mov    ecx,0x7
1000250b:	8d ac 24 28 01 00 00 	lea    ebp,[esp+0x128]
10002512:	83 c4 1c             	add    esp,0x1c
10002515:	89 e7                	mov    edi,esp
10002517:	8d b4 24 80 00 00 00 	lea    esi,[esp+0x80]
1000251e:	83 ec 1c             	sub    esp,0x1c
10002521:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002523:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
1000252a:	89 e7                	mov    edi,esp
1000252c:	89 c6                	mov    esi,eax
1000252e:	b9 07 00 00 00       	mov    ecx,0x7
10002533:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002535:	55                   	push   ebp
10002536:	e8 fc ff ff ff       	call   10002537 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x1bd>	10002537: R_386_PC32	getRegionUnion(Region, Region)
1000253b:	b9 07 00 00 00       	mov    ecx,0x7
10002540:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
10002544:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
1000254b:	2b 94 24 b0 01 00 00 	sub    edx,DWORD PTR [esp+0x1b0]
10002552:	03 54 24 4c          	add    edx,DWORD PTR [esp+0x4c]
10002556:	89 94 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],edx
1000255d:	83 c4 1c             	add    esp,0x1c
10002560:	89 e7                	mov    edi,esp
10002562:	8d b4 24 80 00 00 00 	lea    esi,[esp+0x80]
10002569:	83 ec 1c             	sub    esp,0x1c
1000256c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000256e:	89 e7                	mov    edi,esp
10002570:	89 ee                	mov    esi,ebp
10002572:	b9 07 00 00 00       	mov    ecx,0x7
10002577:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002579:	53                   	push   ebx
1000257a:	e8 fc ff ff ff       	call   1000257b <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x201>	1000257b: R_386_PC32	getRegionUnion(Region, Region)
1000257f:	b9 07 00 00 00       	mov    ecx,0x7
10002584:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002588:	8d ac 24 60 01 00 00 	lea    ebp,[esp+0x160]
1000258f:	2b 84 24 b0 01 00 00 	sub    eax,DWORD PTR [esp+0x1b0]
10002596:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
1000259a:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
100025a1:	83 c4 1c             	add    esp,0x1c
100025a4:	89 e7                	mov    edi,esp
100025a6:	8d b4 24 80 00 00 00 	lea    esi,[esp+0x80]
100025ad:	83 ec 1c             	sub    esp,0x1c
100025b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100025b2:	89 e7                	mov    edi,esp
100025b4:	89 de                	mov    esi,ebx
100025b6:	b9 07 00 00 00       	mov    ecx,0x7
100025bb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100025bd:	55                   	push   ebp
100025be:	e8 fc ff ff ff       	call   100025bf <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x245>	100025bf: R_386_PC32	getRegionUnion(Region, Region)
100025c3:	b9 07 00 00 00       	mov    ecx,0x7
100025c8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
100025cc:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
100025d3:	83 c4 1c             	add    esp,0x1c
100025d6:	89 e7                	mov    edi,esp
100025d8:	8d b4 24 80 00 00 00 	lea    esi,[esp+0x80]
100025df:	83 ec 1c             	sub    esp,0x1c
100025e2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100025e4:	89 e7                	mov    edi,esp
100025e6:	89 ee                	mov    esi,ebp
100025e8:	b9 07 00 00 00       	mov    ecx,0x7
100025ed:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100025ef:	ff b4 24 9c 01 00 00 	push   DWORD PTR [esp+0x19c]
100025f6:	e8 fc ff ff ff       	call   100025f7 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x27d>	100025f7: R_386_PC32	getRegionUnion(Region, Region)
100025fb:	83 c4 30             	add    esp,0x30
100025fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
10002602:	e8 fc ff ff ff       	call   10002603 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x289>	10002603: R_386_PC32	free
10002607:	58                   	pop    eax
10002608:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
1000260c:	e8 fc ff ff ff       	call   1000260d <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x293>	1000260d: R_386_PC32	free
10002611:	5a                   	pop    edx
10002612:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
10002616:	e8 fc ff ff ff       	call   10002617 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x29d>	10002617: R_386_PC32	free
1000261b:	59                   	pop    ecx
1000261c:	ff b4 24 88 00 00 00 	push   DWORD PTR [esp+0x88]
10002623:	e8 fc ff ff ff       	call   10002624 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2aa>	10002624: R_386_PC32	free
10002628:	5b                   	pop    ebx
10002629:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
10002630:	e8 fc ff ff ff       	call   10002631 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2b7>	10002631: R_386_PC32	free
10002635:	5e                   	pop    esi
10002636:	ff b4 24 c0 00 00 00 	push   DWORD PTR [esp+0xc0]
1000263d:	e8 fc ff ff ff       	call   1000263e <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2c4>	1000263e: R_386_PC32	free
10002642:	5f                   	pop    edi
10002643:	ff b4 24 dc 00 00 00 	push   DWORD PTR [esp+0xdc]
1000264a:	e8 fc ff ff ff       	call   1000264b <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2d1>	1000264b: R_386_PC32	free
1000264f:	5d                   	pop    ebp
10002650:	ff b4 24 f8 00 00 00 	push   DWORD PTR [esp+0xf8]
10002657:	e8 fc ff ff ff       	call   10002658 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2de>	10002658: R_386_PC32	free
1000265c:	58                   	pop    eax
1000265d:	ff b4 24 14 01 00 00 	push   DWORD PTR [esp+0x114]
10002664:	e8 fc ff ff ff       	call   10002665 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2eb>	10002665: R_386_PC32	free
10002669:	58                   	pop    eax
1000266a:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
10002671:	e8 fc ff ff ff       	call   10002672 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2f8>	10002672: R_386_PC32	free
10002676:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
1000267d:	81 c4 5c 01 00 00    	add    esp,0x15c
10002683:	5b                   	pop    ebx
10002684:	5e                   	pop    esi
10002685:	5f                   	pop    edi
10002686:	5d                   	pop    ebp
10002687:	c2 04 00             	ret    0x4

1000268a <getRegionIntersection(Region, Region)>:
1000268a:	57                   	push   edi
1000268b:	b9 07 00 00 00       	mov    ecx,0x7
10002690:	56                   	push   esi
10002691:	53                   	push   ebx
10002692:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002696:	6a 01                	push   0x1
10002698:	83 ec 1c             	sub    esp,0x1c
1000269b:	8d 74 24 50          	lea    esi,[esp+0x50]
1000269f:	89 e7                	mov    edi,esp
100026a1:	83 ec 1c             	sub    esp,0x1c
100026a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100026a6:	8d 74 24 50          	lea    esi,[esp+0x50]
100026aa:	89 e7                	mov    edi,esp
100026ac:	b9 07 00 00 00       	mov    ecx,0x7
100026b1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100026b3:	53                   	push   ebx
100026b4:	e8 fc ff ff ff       	call   100026b5 <getRegionIntersection(Region, Region)+0x2b>	100026b5: R_386_PC32	performRegionOperation(Region, Region, RegionOperation)
100026b9:	89 d8                	mov    eax,ebx
100026bb:	83 c4 3c             	add    esp,0x3c
100026be:	5b                   	pop    ebx
100026bf:	5e                   	pop    esi
100026c0:	5f                   	pop    edi
100026c1:	c2 04 00             	ret    0x4

100026c4 <getRegionXOR(Region, Region)>:
100026c4:	57                   	push   edi
100026c5:	b9 07 00 00 00       	mov    ecx,0x7
100026ca:	56                   	push   esi
100026cb:	53                   	push   ebx
100026cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100026d0:	6a 03                	push   0x3
100026d2:	83 ec 1c             	sub    esp,0x1c
100026d5:	8d 74 24 50          	lea    esi,[esp+0x50]
100026d9:	89 e7                	mov    edi,esp
100026db:	83 ec 1c             	sub    esp,0x1c
100026de:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100026e0:	8d 74 24 50          	lea    esi,[esp+0x50]
100026e4:	89 e7                	mov    edi,esp
100026e6:	b9 07 00 00 00       	mov    ecx,0x7
100026eb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100026ed:	53                   	push   ebx
100026ee:	e8 fc ff ff ff       	call   100026ef <getRegionXOR(Region, Region)+0x2b>	100026ef: R_386_PC32	performRegionOperation(Region, Region, RegionOperation)
100026f3:	89 d8                	mov    eax,ebx
100026f5:	83 c4 3c             	add    esp,0x3c
100026f8:	5b                   	pop    ebx
100026f9:	5e                   	pop    esi
100026fa:	5f                   	pop    edi
100026fb:	c2 04 00             	ret    0x4

100026fe <isPointInRegion(Region, int, int)>:
100026fe:	55                   	push   ebp
100026ff:	31 c9                	xor    ecx,ecx
10002701:	57                   	push   edi
10002702:	31 ff                	xor    edi,edi
10002704:	56                   	push   esi
10002705:	53                   	push   ebx
10002706:	83 ec 20             	sub    esp,0x20
10002709:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000270d:	89 04 24             	mov    DWORD PTR [esp],eax
10002710:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002714:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10002718:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000271c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002720:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10002724:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002728:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000272c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002730:	39 4c 24 14          	cmp    DWORD PTR [esp+0x14],ecx
10002734:	0f 8e 9f 00 00 00    	jle    100027d9 <isPointInRegion(Region, int, int)+0xdb>
1000273a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
1000273d:	8d 47 01             	lea    eax,[edi+0x1]
10002740:	8b 34 bb             	mov    esi,DWORD PTR [ebx+edi*4]
10002743:	8d 14 bd 00 00 00 00 	lea    edx,[edi*4+0x0]
1000274a:	83 fe ff             	cmp    esi,0xffffffff
1000274d:	0f 84 86 00 00 00    	je     100027d9 <isPointInRegion(Region, int, int)+0xdb>
10002753:	0f b7 de             	movzx  ebx,si
10002756:	8b 3c 24             	mov    edi,DWORD PTR [esp]
10002759:	c1 ee 10             	shr    esi,0x10
1000275c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
10002760:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
10002764:	01 cd                	add    ebp,ecx
10002766:	8d 74 17 04          	lea    esi,[edi+edx*1+0x4]
1000276a:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
1000276e:	8d 3c 18             	lea    edi,[eax+ebx*1]
10002771:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
10002775:	31 d2                	xor    edx,edx
10002777:	31 c0                	xor    eax,eax
10002779:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
1000277d:	39 54 24 18          	cmp    DWORD PTR [esp+0x18],edx
10002781:	7e 41                	jle    100027c4 <isPointInRegion(Region, int, int)+0xc6>
10002783:	39 16                	cmp    DWORD PTR [esi],edx
10002785:	75 07                	jne    1000278e <isPointInRegion(Region, int, int)+0x90>
10002787:	83 c6 04             	add    esi,0x4
1000278a:	83 f0 01             	xor    eax,0x1
1000278d:	4b                   	dec    ebx
1000278e:	84 c0                	test   al,al
10002790:	74 2e                	je     100027c0 <isPointInRegion(Region, int, int)+0xc2>
10002792:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
10002796:	3b 6c 24 54          	cmp    ebp,DWORD PTR [esp+0x54]
1000279a:	7f 41                	jg     100027dd <isPointInRegion(Region, int, int)+0xdf>
1000279c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
100027a0:	3b 6c 24 54          	cmp    ebp,DWORD PTR [esp+0x54]
100027a4:	7e 37                	jle    100027dd <isPointInRegion(Region, int, int)+0xdf>
100027a6:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
100027aa:	01 d5                	add    ebp,edx
100027ac:	3b 6c 24 50          	cmp    ebp,DWORD PTR [esp+0x50]
100027b0:	7f 2b                	jg     100027dd <isPointInRegion(Region, int, int)+0xdf>
100027b2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
100027b6:	03 2e                	add    ebp,DWORD PTR [esi]
100027b8:	3b 6c 24 50          	cmp    ebp,DWORD PTR [esp+0x50]
100027bc:	76 1f                	jbe    100027dd <isPointInRegion(Region, int, int)+0xdf>
100027be:	eb 26                	jmp    100027e6 <isPointInRegion(Region, int, int)+0xe8>
100027c0:	85 db                	test   ebx,ebx
100027c2:	75 1e                	jne    100027e2 <isPointInRegion(Region, int, int)+0xe4>
100027c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100027c8:	01 c8                	add    eax,ecx
100027ca:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
100027ce:	74 09                	je     100027d9 <isPointInRegion(Region, int, int)+0xdb>
100027d0:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
100027d4:	e9 57 ff ff ff       	jmp    10002730 <isPointInRegion(Region, int, int)+0x32>
100027d9:	31 c0                	xor    eax,eax
100027db:	eb 09                	jmp    100027e6 <isPointInRegion(Region, int, int)+0xe8>
100027dd:	42                   	inc    edx
100027de:	85 db                	test   ebx,ebx
100027e0:	74 9b                	je     1000277d <isPointInRegion(Region, int, int)+0x7f>
100027e2:	8b 16                	mov    edx,DWORD PTR [esi]
100027e4:	eb 97                	jmp    1000277d <isPointInRegion(Region, int, int)+0x7f>
100027e6:	83 c4 20             	add    esp,0x20
100027e9:	5b                   	pop    ebx
100027ea:	5e                   	pop    esi
100027eb:	5f                   	pop    edi
100027ec:	5d                   	pop    ebp
100027ed:	c3                   	ret    

100027ee <ssfn_utf8>:
100027ee:	56                   	push   esi
100027ef:	53                   	push   ebx
100027f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
100027f4:	8b 11                	mov    edx,DWORD PTR [ecx]
100027f6:	0f b6 32             	movzx  esi,BYTE PTR [edx]
100027f9:	89 f0                	mov    eax,esi
100027fb:	84 c0                	test   al,al
100027fd:	0f be d8             	movsx  ebx,al
10002800:	78 04                	js     10002806 <ssfn_utf8+0x18>
10002802:	89 d8                	mov    eax,ebx
10002804:	eb 7d                	jmp    10002883 <ssfn_utf8+0x95>
10002806:	f7 c6 20 00 00 00    	test   esi,0x20
1000280c:	75 14                	jne    10002822 <ssfn_utf8+0x34>
1000280e:	8a 42 01             	mov    al,BYTE PTR [edx+0x1]
10002811:	c1 e3 06             	shl    ebx,0x6
10002814:	83 e0 3f             	and    eax,0x3f
10002817:	81 e3 c0 07 00 00    	and    ebx,0x7c0
1000281d:	42                   	inc    edx
1000281e:	09 d8                	or     eax,ebx
10002820:	eb 5f                	jmp    10002881 <ssfn_utf8+0x93>
10002822:	f7 c6 10 00 00 00    	test   esi,0x10
10002828:	75 20                	jne    1000284a <ssfn_utf8+0x5c>
1000282a:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
1000282e:	c1 e3 0c             	shl    ebx,0xc
10002831:	c1 e0 06             	shl    eax,0x6
10002834:	0f b7 db             	movzx  ebx,bx
10002837:	25 c0 0f 00 00       	and    eax,0xfc0
1000283c:	83 c2 02             	add    edx,0x2
1000283f:	09 d8                	or     eax,ebx
10002841:	8a 1a                	mov    bl,BYTE PTR [edx]
10002843:	83 e3 3f             	and    ebx,0x3f
10002846:	09 d8                	or     eax,ebx
10002848:	eb 37                	jmp    10002881 <ssfn_utf8+0x93>
1000284a:	31 c0                	xor    eax,eax
1000284c:	83 e6 08             	and    esi,0x8
1000284f:	75 32                	jne    10002883 <ssfn_utf8+0x95>
10002851:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
10002855:	c1 e3 12             	shl    ebx,0x12
10002858:	c1 e0 0c             	shl    eax,0xc
1000285b:	81 e3 00 00 1c 00    	and    ebx,0x1c0000
10002861:	25 00 f0 03 00       	and    eax,0x3f000
10002866:	83 c2 03             	add    edx,0x3
10002869:	09 d8                	or     eax,ebx
1000286b:	8a 1a                	mov    bl,BYTE PTR [edx]
1000286d:	83 e3 3f             	and    ebx,0x3f
10002870:	09 d8                	or     eax,ebx
10002872:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
10002876:	c1 e3 06             	shl    ebx,0x6
10002879:	81 e3 c0 0f 00 00    	and    ebx,0xfc0
1000287f:	09 d8                	or     eax,ebx
10002881:	89 11                	mov    DWORD PTR [ecx],edx
10002883:	ff 01                	inc    DWORD PTR [ecx]
10002885:	5b                   	pop    ebx
10002886:	5e                   	pop    esi
10002887:	c3                   	ret    

10002888 <_ssfn_c>:
10002888:	55                   	push   ebp
10002889:	57                   	push   edi
1000288a:	56                   	push   esi
1000288b:	53                   	push   ebx
1000288c:	51                   	push   ecx
1000288d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002891:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002895:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
1000289b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
1000289f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
100028a3:	85 c0                	test   eax,eax
100028a5:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
100028ab:	0f 84 63 01 00 00    	je     10002a14 <_ssfn_c+0x18c>
100028b1:	83 78 10 00          	cmp    DWORD PTR [eax+0x10],0x0
100028b5:	0f 84 59 01 00 00    	je     10002a14 <_ssfn_c+0x18c>
100028bb:	85 c9                	test   ecx,ecx
100028bd:	0f 84 51 01 00 00    	je     10002a14 <_ssfn_c+0x18c>
100028c3:	8a 11                	mov    dl,BYTE PTR [ecx]
100028c5:	84 d2                	test   dl,dl
100028c7:	0f 84 47 01 00 00    	je     10002a14 <_ssfn_c+0x18c>
100028cd:	8b 68 14             	mov    ebp,DWORD PTR [eax+0x14]
100028d0:	85 ed                	test   ebp,ebp
100028d2:	74 34                	je     10002908 <_ssfn_c+0x80>
100028d4:	8d 74 05 00          	lea    esi,[ebp+eax*1+0x0]
100028d8:	31 ff                	xor    edi,edi
100028da:	89 34 24             	mov    DWORD PTR [esp],esi
100028dd:	8b 34 24             	mov    esi,DWORD PTR [esp]
100028e0:	0f b7 34 7e          	movzx  esi,WORD PTR [esi+edi*2]
100028e4:	66 85 f6             	test   si,si
100028e7:	74 1f                	je     10002908 <_ssfn_c+0x80>
100028e9:	01 c6                	add    esi,eax
100028eb:	89 cd                	mov    ebp,ecx
100028ed:	8a 1e                	mov    bl,BYTE PTR [esi]
100028ef:	84 db                	test   bl,bl
100028f1:	0f 84 27 01 00 00    	je     10002a1e <_ssfn_c+0x196>
100028f7:	3a 5d 00             	cmp    bl,BYTE PTR [ebp+0x0]
100028fa:	0f 85 18 01 00 00    	jne    10002a18 <_ssfn_c+0x190>
10002900:	89 eb                	mov    ebx,ebp
10002902:	46                   	inc    esi
10002903:	43                   	inc    ebx
10002904:	89 dd                	mov    ebp,ebx
10002906:	eb e5                	jmp    100028ed <_ssfn_c+0x65>
10002908:	84 d2                	test   dl,dl
1000290a:	0f b6 da             	movzx  ebx,dl
1000290d:	78 09                	js     10002918 <_ssfn_c+0x90>
1000290f:	89 da                	mov    edx,ebx
10002911:	89 cb                	mov    ebx,ecx
10002913:	e9 83 00 00 00       	jmp    1000299b <_ssfn_c+0x113>
10002918:	f6 c2 20             	test   dl,0x20
1000291b:	75 16                	jne    10002933 <_ssfn_c+0xab>
1000291d:	c1 e3 06             	shl    ebx,0x6
10002920:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
10002923:	81 e3 c0 07 00 00    	and    ebx,0x7c0
10002929:	83 e2 3f             	and    edx,0x3f
1000292c:	09 da                	or     edx,ebx
1000292e:	8d 59 01             	lea    ebx,[ecx+0x1]
10002931:	eb 68                	jmp    1000299b <_ssfn_c+0x113>
10002933:	f6 c2 10             	test   dl,0x10
10002936:	75 23                	jne    1000295b <_ssfn_c+0xd3>
10002938:	c1 e3 0c             	shl    ebx,0xc
1000293b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
1000293f:	0f b6 71 02          	movzx  esi,BYTE PTR [ecx+0x2]
10002943:	c1 e2 06             	shl    edx,0x6
10002946:	83 e6 3f             	and    esi,0x3f
10002949:	81 e2 c0 0f 00 00    	and    edx,0xfc0
1000294f:	09 d6                	or     esi,edx
10002951:	0f b7 d3             	movzx  edx,bx
10002954:	8d 59 02             	lea    ebx,[ecx+0x2]
10002957:	09 f2                	or     edx,esi
10002959:	eb 40                	jmp    1000299b <_ssfn_c+0x113>
1000295b:	80 e2 08             	and    dl,0x8
1000295e:	75 37                	jne    10002997 <_ssfn_c+0x10f>
10002960:	c1 e3 12             	shl    ebx,0x12
10002963:	0f b6 71 01          	movzx  esi,BYTE PTR [ecx+0x1]
10002967:	0f b6 51 02          	movzx  edx,BYTE PTR [ecx+0x2]
1000296b:	c1 e6 0c             	shl    esi,0xc
1000296e:	c1 e2 06             	shl    edx,0x6
10002971:	81 e6 00 f0 03 00    	and    esi,0x3f000
10002977:	81 e2 c0 0f 00 00    	and    edx,0xfc0
1000297d:	09 f2                	or     edx,esi
1000297f:	0f b6 71 03          	movzx  esi,BYTE PTR [ecx+0x3]
10002983:	83 e6 3f             	and    esi,0x3f
10002986:	09 d6                	or     esi,edx
10002988:	89 da                	mov    edx,ebx
1000298a:	8d 59 03             	lea    ebx,[ecx+0x3]
1000298d:	81 e2 00 00 1c 00    	and    edx,0x1c0000
10002993:	09 f2                	or     edx,esi
10002995:	eb 04                	jmp    1000299b <_ssfn_c+0x113>
10002997:	89 cb                	mov    ebx,ecx
10002999:	31 d2                	xor    edx,edx
1000299b:	8d 7b 01             	lea    edi,[ebx+0x1]
1000299e:	89 fd                	mov    ebp,edi
100029a0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
100029a4:	89 eb                	mov    ebx,ebp
100029a6:	31 f6                	xor    esi,esi
100029a8:	29 cb                	sub    ebx,ecx
100029aa:	89 1f                	mov    DWORD PTR [edi],ebx
100029ac:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
100029b0:	89 17                	mov    DWORD PTR [edi],edx
100029b2:	03 40 10             	add    eax,DWORD PTR [eax+0x10]
100029b5:	8a 08                	mov    cl,BYTE PTR [eax]
100029b7:	80 f9 ff             	cmp    cl,0xff
100029ba:	75 08                	jne    100029c4 <_ssfn_c+0x13c>
100029bc:	81 c6 ff ff 00 00    	add    esi,0xffff
100029c2:	eb 2a                	jmp    100029ee <_ssfn_c+0x166>
100029c4:	88 cb                	mov    bl,cl
100029c6:	83 e3 c0             	and    ebx,0xffffffc0
100029c9:	80 fb c0             	cmp    bl,0xc0
100029cc:	75 16                	jne    100029e4 <_ssfn_c+0x15c>
100029ce:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
100029d2:	c1 e1 08             	shl    ecx,0x8
100029d5:	83 c0 02             	add    eax,0x2
100029d8:	81 e1 00 3f 00 00    	and    ecx,0x3f00
100029de:	09 d9                	or     ecx,ebx
100029e0:	01 ce                	add    esi,ecx
100029e2:	eb 27                	jmp    10002a0b <_ssfn_c+0x183>
100029e4:	80 fb 80             	cmp    bl,0x80
100029e7:	75 08                	jne    100029f1 <_ssfn_c+0x169>
100029e9:	83 e1 3f             	and    ecx,0x3f
100029ec:	01 ce                	add    esi,ecx
100029ee:	40                   	inc    eax
100029ef:	eb 1a                	jmp    10002a0b <_ssfn_c+0x183>
100029f1:	39 f2                	cmp    edx,esi
100029f3:	74 34                	je     10002a29 <_ssfn_c+0x1a1>
100029f5:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
100029f9:	83 e1 40             	and    ecx,0x40
100029fc:	80 f9 01             	cmp    cl,0x1
100029ff:	19 c9                	sbb    ecx,ecx
10002a01:	83 c1 06             	add    ecx,0x6
10002a04:	0f af cb             	imul   ecx,ebx
10002a07:	8d 44 08 06          	lea    eax,[eax+ecx*1+0x6]
10002a0b:	46                   	inc    esi
10002a0c:	81 fe ff ff 10 00    	cmp    esi,0x10ffff
10002a12:	76 a1                	jbe    100029b5 <_ssfn_c+0x12d>
10002a14:	31 c0                	xor    eax,eax
10002a16:	eb 11                	jmp    10002a29 <_ssfn_c+0x1a1>
10002a18:	47                   	inc    edi
10002a19:	e9 bf fe ff ff       	jmp    100028dd <_ssfn_c+0x55>
10002a1e:	8d 97 00 f0 00 00    	lea    edx,[edi+0xf000]
10002a24:	e9 77 ff ff ff       	jmp    100029a0 <_ssfn_c+0x118>
10002a29:	5a                   	pop    edx
10002a2a:	5b                   	pop    ebx
10002a2b:	5e                   	pop    esi
10002a2c:	5f                   	pop    edi
10002a2d:	5d                   	pop    ebp
10002a2e:	c3                   	ret    

10002a2f <_ssfn_l>:
10002a2f:	57                   	push   edi
10002a30:	56                   	push   esi
10002a31:	53                   	push   ebx
10002a32:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10002a36:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10002a3a:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
10002a3e:	89 f2                	mov    edx,esi
10002a40:	0f 9d c0             	setge  al
10002a43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002a47:	c1 ea 1f             	shr    edx,0x1f
10002a4a:	09 d0                	or     eax,edx
10002a4c:	89 fa                	mov    edx,edi
10002a4e:	c1 ea 1f             	shr    edx,0x1f
10002a51:	08 d0                	or     al,dl
10002a53:	0f 85 e9 00 00 00    	jne    10002b42 <_ssfn_l+0x113>
10002a59:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
10002a5d:	0f 8d df 00 00 00    	jge    10002b42 <_ssfn_l+0x113>
10002a63:	8b 83 9c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf59c]
10002a69:	8d 57 08             	lea    edx,[edi+0x8]
10002a6c:	83 c0 08             	add    eax,0x8
10002a6f:	c1 fa 04             	sar    edx,0x4
10002a72:	c1 f8 04             	sar    eax,0x4
10002a75:	39 d0                	cmp    eax,edx
10002a77:	75 1a                	jne    10002a93 <_ssfn_l+0x64>
10002a79:	8b 83 a0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a0]
10002a7f:	8d 56 08             	lea    edx,[esi+0x8]
10002a82:	83 c0 08             	add    eax,0x8
10002a85:	c1 fa 04             	sar    edx,0x4
10002a88:	c1 f8 04             	sar    eax,0x4
10002a8b:	39 d0                	cmp    eax,edx
10002a8d:	0f 84 af 00 00 00    	je     10002b42 <_ssfn_l+0x113>
10002a93:	8b 83 80 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf580]
10002a99:	39 83 84 f5 00 00    	cmp    DWORD PTR [ebx+0xf584],eax
10002a9f:	7f 3e                	jg     10002adf <_ssfn_l+0xb0>
10002aa1:	05 00 02 00 00       	add    eax,0x200
10002aa6:	89 83 84 f5 00 00    	mov    DWORD PTR [ebx+0xf584],eax
10002aac:	52                   	push   edx
10002aad:	01 c0                	add    eax,eax
10002aaf:	52                   	push   edx
10002ab0:	50                   	push   eax
10002ab1:	ff b3 6c f5 00 00    	push   DWORD PTR [ebx+0xf56c]
10002ab7:	e8 fc ff ff ff       	call   10002ab8 <_ssfn_l+0x89>	10002ab8: R_386_PC32	realloc
10002abc:	83 c4 10             	add    esp,0x10
10002abf:	89 83 6c f5 00 00    	mov    DWORD PTR [ebx+0xf56c],eax
10002ac5:	85 c0                	test   eax,eax
10002ac7:	75 16                	jne    10002adf <_ssfn_l+0xb0>
10002ac9:	c7 83 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf580],0x0
10002ad3:	c7 83 84 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf584],0x0
10002add:	eb 63                	jmp    10002b42 <_ssfn_l+0x113>
10002adf:	83 bb 80 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf580],0x0
10002ae6:	75 26                	jne    10002b0e <_ssfn_l+0xdf>
10002ae8:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10002aee:	8b 93 94 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf594]
10002af4:	66 89 10             	mov    WORD PTR [eax],dx
10002af7:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10002afd:	8b 93 98 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf598]
10002b03:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
10002b07:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10002b0e:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10002b14:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10002b1a:	66 89 3c 50          	mov    WORD PTR [eax+edx*2],di
10002b1e:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10002b24:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10002b2a:	66 89 74 50 02       	mov    WORD PTR [eax+edx*2+0x2],si
10002b2f:	89 bb 9c f5 00 00    	mov    DWORD PTR [ebx+0xf59c],edi
10002b35:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10002b3c:	89 b3 a0 f5 00 00    	mov    DWORD PTR [ebx+0xf5a0],esi
10002b42:	5b                   	pop    ebx
10002b43:	5e                   	pop    esi
10002b44:	5f                   	pop    edi
10002b45:	c3                   	ret    

10002b46 <_ssfn_b>:
10002b46:	55                   	push   ebp
10002b47:	57                   	push   edi
10002b48:	56                   	push   esi
10002b49:	53                   	push   ebx
10002b4a:	83 ec 4c             	sub    esp,0x4c
10002b4d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002b51:	8b 6c 24 74          	mov    ebp,DWORD PTR [esp+0x74]
10002b55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002b59:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
10002b5d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002b61:	8b 5c 24 7c          	mov    ebx,DWORD PTR [esp+0x7c]
10002b65:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002b69:	8b 8c 24 80 00 00 00 	mov    ecx,DWORD PTR [esp+0x80]
10002b70:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10002b74:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10002b78:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
10002b7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10002b80:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10002b84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10002b88:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
10002b8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002b93:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
10002b9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002b9e:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
10002ba5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10002ba9:	83 f8 03             	cmp    eax,0x3
10002bac:	7e 34                	jle    10002be2 <_ssfn_b+0x9c>
10002bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002bb2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002bb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002bba:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10002bbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10002bc2:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
10002bc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002bca:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
10002bce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10002bd2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
10002bd6:	83 c4 4c             	add    esp,0x4c
10002bd9:	5b                   	pop    ebx
10002bda:	5e                   	pop    esi
10002bdb:	5f                   	pop    edi
10002bdc:	5d                   	pop    ebp
10002bdd:	e9 4d fe ff ff       	jmp    10002a2f <_ssfn_l>
10002be2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10002be6:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10002bea:	75 0e                	jne    10002bfa <_ssfn_b+0xb4>
10002bec:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10002bf0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
10002bf4:	0f 84 12 01 00 00    	je     10002d0c <_ssfn_b+0x1c6>
10002bfa:	bf 02 00 00 00       	mov    edi,0x2
10002bff:	89 e8                	mov    eax,ebp
10002c01:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
10002c05:	99                   	cdq    
10002c06:	f7 ff                	idiv   edi
10002c08:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
10002c0c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002c10:	89 f0                	mov    eax,esi
10002c12:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
10002c16:	99                   	cdq    
10002c17:	f7 ff                	idiv   edi
10002c19:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
10002c1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002c21:	89 d8                	mov    eax,ebx
10002c23:	29 e8                	sub    eax,ebp
10002c25:	99                   	cdq    
10002c26:	f7 ff                	idiv   edi
10002c28:	01 c5                	add    ebp,eax
10002c2a:	89 c8                	mov    eax,ecx
10002c2c:	29 f0                	sub    eax,esi
10002c2e:	99                   	cdq    
10002c2f:	f7 ff                	idiv   edi
10002c31:	01 c6                	add    esi,eax
10002c33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002c37:	29 d8                	sub    eax,ebx
10002c39:	99                   	cdq    
10002c3a:	f7 ff                	idiv   edi
10002c3c:	01 d8                	add    eax,ebx
10002c3e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002c42:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002c46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002c4a:	29 c8                	sub    eax,ecx
10002c4c:	99                   	cdq    
10002c4d:	f7 ff                	idiv   edi
10002c4f:	01 c8                	add    eax,ecx
10002c51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002c55:	89 e8                	mov    eax,ebp
10002c57:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
10002c5b:	99                   	cdq    
10002c5c:	f7 ff                	idiv   edi
10002c5e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
10002c61:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10002c65:	89 f0                	mov    eax,esi
10002c67:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
10002c6b:	99                   	cdq    
10002c6c:	f7 ff                	idiv   edi
10002c6e:	01 c3                	add    ebx,eax
10002c70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002c74:	29 e8                	sub    eax,ebp
10002c76:	99                   	cdq    
10002c77:	f7 ff                	idiv   edi
10002c79:	01 e8                	add    eax,ebp
10002c7b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10002c7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002c83:	29 f0                	sub    eax,esi
10002c85:	99                   	cdq    
10002c86:	f7 ff                	idiv   edi
10002c88:	8d 2c 30             	lea    ebp,[eax+esi*1]
10002c8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002c8f:	29 c8                	sub    eax,ecx
10002c91:	99                   	cdq    
10002c92:	f7 ff                	idiv   edi
10002c94:	8d 34 08             	lea    esi,[eax+ecx*1]
10002c97:	89 e8                	mov    eax,ebp
10002c99:	29 d8                	sub    eax,ebx
10002c9b:	99                   	cdq    
10002c9c:	f7 ff                	idiv   edi
10002c9e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
10002ca2:	01 d8                	add    eax,ebx
10002ca4:	8d 57 01             	lea    edx,[edi+0x1]
10002ca7:	52                   	push   edx
10002ca8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
10002cac:	50                   	push   eax
10002cad:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10002cb1:	56                   	push   esi
10002cb2:	53                   	push   ebx
10002cb3:	51                   	push   ecx
10002cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10002cb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10002cbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10002cc0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10002cc4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002cc8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002ccc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002cd0:	e8 71 fe ff ff       	call   10002b46 <_ssfn_b>
10002cd5:	83 c4 30             	add    esp,0x30
10002cd8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10002cdc:	52                   	push   edx
10002cdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10002ce1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10002ce5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10002ce9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10002ced:	55                   	push   ebp
10002cee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10002cf2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10002cf6:	50                   	push   eax
10002cf7:	56                   	push   esi
10002cf8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002cfc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002d00:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002d04:	e8 3d fe ff ff       	call   10002b46 <_ssfn_b>
10002d09:	83 c4 30             	add    esp,0x30
10002d0c:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
10002d11:	0f 85 97 fe ff ff    	jne    10002bae <_ssfn_b+0x68>
10002d17:	83 c4 4c             	add    esp,0x4c
10002d1a:	5b                   	pop    ebx
10002d1b:	5e                   	pop    esi
10002d1c:	5f                   	pop    edi
10002d1d:	5d                   	pop    ebp
10002d1e:	c3                   	ret    

10002d1f <_ssfn_fc>:
10002d1f:	55                   	push   ebp
10002d20:	57                   	push   edi
10002d21:	56                   	push   esi
10002d22:	53                   	push   ebx
10002d23:	83 ec 0c             	sub    esp,0xc
10002d26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002d2a:	85 c0                	test   eax,eax
10002d2c:	74 75                	je     10002da3 <_ssfn_fc+0x84>
10002d2e:	8d 98 28 f5 00 00    	lea    ebx,[eax+0xf528]
10002d34:	8d a8 6c f5 00 00    	lea    ebp,[eax+0xf56c]
10002d3a:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
10002d3d:	74 5d                	je     10002d9c <_ssfn_fc+0x7d>
10002d3f:	31 f6                	xor    esi,esi
10002d41:	8b 03                	mov    eax,DWORD PTR [ebx]
10002d43:	83 3c 30 00          	cmp    DWORD PTR [eax+esi*1],0x0
10002d47:	74 35                	je     10002d7e <_ssfn_fc+0x5f>
10002d49:	31 ff                	xor    edi,edi
10002d4b:	8b 03                	mov    eax,DWORD PTR [ebx]
10002d4d:	8b 04 30             	mov    eax,DWORD PTR [eax+esi*1]
10002d50:	8b 04 38             	mov    eax,DWORD PTR [eax+edi*1]
10002d53:	85 c0                	test   eax,eax
10002d55:	74 0c                	je     10002d63 <_ssfn_fc+0x44>
10002d57:	83 ec 0c             	sub    esp,0xc
10002d5a:	50                   	push   eax
10002d5b:	e8 fc ff ff ff       	call   10002d5c <_ssfn_fc+0x3d>	10002d5c: R_386_PC32	free
10002d60:	83 c4 10             	add    esp,0x10
10002d63:	83 c7 04             	add    edi,0x4
10002d66:	81 ff 00 04 00 00    	cmp    edi,0x400
10002d6c:	75 dd                	jne    10002d4b <_ssfn_fc+0x2c>
10002d6e:	83 ec 0c             	sub    esp,0xc
10002d71:	8b 03                	mov    eax,DWORD PTR [ebx]
10002d73:	ff 34 30             	push   DWORD PTR [eax+esi*1]
10002d76:	e8 fc ff ff ff       	call   10002d77 <_ssfn_fc+0x58>	10002d77: R_386_PC32	free
10002d7b:	83 c4 10             	add    esp,0x10
10002d7e:	83 c6 04             	add    esi,0x4
10002d81:	81 fe 00 04 00 00    	cmp    esi,0x400
10002d87:	75 b8                	jne    10002d41 <_ssfn_fc+0x22>
10002d89:	83 ec 0c             	sub    esp,0xc
10002d8c:	ff 33                	push   DWORD PTR [ebx]
10002d8e:	e8 fc ff ff ff       	call   10002d8f <_ssfn_fc+0x70>	10002d8f: R_386_PC32	free
10002d93:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
10002d99:	83 c4 10             	add    esp,0x10
10002d9c:	83 c3 04             	add    ebx,0x4
10002d9f:	39 eb                	cmp    ebx,ebp
10002da1:	75 97                	jne    10002d3a <_ssfn_fc+0x1b>
10002da3:	83 c4 0c             	add    esp,0xc
10002da6:	5b                   	pop    ebx
10002da7:	5e                   	pop    esi
10002da8:	5f                   	pop    edi
10002da9:	5d                   	pop    ebp
10002daa:	c3                   	ret    

10002dab <_ssfn__bitreverse16>:
10002dab:	89 c2                	mov    edx,eax
10002dad:	01 c0                	add    eax,eax
10002daf:	d1 fa                	sar    edx,1
10002db1:	25 aa aa 00 00       	and    eax,0xaaaa
10002db6:	81 e2 55 55 00 00    	and    edx,0x5555
10002dbc:	09 c2                	or     edx,eax
10002dbe:	89 d0                	mov    eax,edx
10002dc0:	c1 e2 02             	shl    edx,0x2
10002dc3:	c1 f8 02             	sar    eax,0x2
10002dc6:	81 e2 cc cc 00 00    	and    edx,0xcccc
10002dcc:	25 33 33 00 00       	and    eax,0x3333
10002dd1:	09 d0                	or     eax,edx
10002dd3:	89 c2                	mov    edx,eax
10002dd5:	c1 e0 04             	shl    eax,0x4
10002dd8:	c1 fa 04             	sar    edx,0x4
10002ddb:	25 f0 f0 00 00       	and    eax,0xf0f0
10002de0:	81 e2 0f 0f 00 00    	and    edx,0xf0f
10002de6:	09 c2                	or     edx,eax
10002de8:	89 d1                	mov    ecx,edx
10002dea:	c1 e2 08             	shl    edx,0x8
10002ded:	c1 f9 08             	sar    ecx,0x8
10002df0:	0f b7 c2             	movzx  eax,dx
10002df3:	09 c8                	or     eax,ecx
10002df5:	c3                   	ret    

10002df6 <_ssfn__zbuild_huffman>:
10002df6:	55                   	push   ebp
10002df7:	b9 11 00 00 00       	mov    ecx,0x11
10002dfc:	57                   	push   edi
10002dfd:	56                   	push   esi
10002dfe:	53                   	push   ebx
10002dff:	81 ec 98 00 00 00    	sub    esp,0x98
10002e05:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
10002e0c:	8d 54 24 54          	lea    edx,[esp+0x54]
10002e10:	89 04 24             	mov    DWORD PTR [esp],eax
10002e13:	89 d7                	mov    edi,edx
10002e15:	31 c0                	xor    eax,eax
10002e17:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10002e19:	b9 00 01 00 00       	mov    ecx,0x100
10002e1e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
10002e21:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10002e23:	3b 84 24 b4 00 00 00 	cmp    eax,DWORD PTR [esp+0xb4]
10002e2a:	7d 12                	jge    10002e3e <_ssfn__zbuild_huffman+0x48>
10002e2c:	8b 9c 24 b0 00 00 00 	mov    ebx,DWORD PTR [esp+0xb0]
10002e33:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
10002e37:	40                   	inc    eax
10002e38:	ff 44 8c 54          	inc    DWORD PTR [esp+ecx*4+0x54]
10002e3c:	eb e5                	jmp    10002e23 <_ssfn__zbuild_huffman+0x2d>
10002e3e:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
10002e46:	b9 01 00 00 00       	mov    ecx,0x1
10002e4b:	b8 01 00 00 00       	mov    eax,0x1
10002e50:	89 c6                	mov    esi,eax
10002e52:	d3 e6                	shl    esi,cl
10002e54:	39 34 8a             	cmp    DWORD PTR [edx+ecx*4],esi
10002e57:	0f 8f 0c 01 00 00    	jg     10002f69 <_ssfn__zbuild_huffman+0x173>
10002e5d:	41                   	inc    ecx
10002e5e:	83 f9 10             	cmp    ecx,0x10
10002e61:	75 ed                	jne    10002e50 <_ssfn__zbuild_huffman+0x5a>
10002e63:	31 d2                	xor    edx,edx
10002e65:	31 f6                	xor    esi,esi
10002e67:	b8 01 00 00 00       	mov    eax,0x1
10002e6c:	bd 01 00 00 00       	mov    ebp,0x1
10002e71:	8b 3c 24             	mov    edi,DWORD PTR [esp]
10002e74:	89 54 84 14          	mov    DWORD PTR [esp+eax*4+0x14],edx
10002e78:	66 89 94 47 00 04 00 00 	mov    WORD PTR [edi+eax*2+0x400],dx
10002e80:	66 89 b4 47 64 04 00 00 	mov    WORD PTR [edi+eax*2+0x464],si
10002e88:	8b 7c 84 54          	mov    edi,DWORD PTR [esp+eax*4+0x54]
10002e8c:	01 fa                	add    edx,edi
10002e8e:	85 ff                	test   edi,edi
10002e90:	74 0e                	je     10002ea0 <_ssfn__zbuild_huffman+0xaa>
10002e92:	89 eb                	mov    ebx,ebp
10002e94:	88 c1                	mov    cl,al
10002e96:	d3 e3                	shl    ebx,cl
10002e98:	39 d3                	cmp    ebx,edx
10002e9a:	0f 8c c9 00 00 00    	jl     10002f69 <_ssfn__zbuild_huffman+0x173>
10002ea0:	89 d3                	mov    ebx,edx
10002ea2:	b9 10 00 00 00       	mov    ecx,0x10
10002ea7:	01 d2                	add    edx,edx
10002ea9:	29 c1                	sub    ecx,eax
10002eab:	01 fe                	add    esi,edi
10002ead:	d3 e3                	shl    ebx,cl
10002eaf:	89 d9                	mov    ecx,ebx
10002eb1:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
10002eb4:	89 8c 83 20 04 00 00 	mov    DWORD PTR [ebx+eax*4+0x420],ecx
10002ebb:	40                   	inc    eax
10002ebc:	83 f8 10             	cmp    eax,0x10
10002ebf:	75 b0                	jne    10002e71 <_ssfn__zbuild_huffman+0x7b>
10002ec1:	c7 83 60 04 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x460],0x10000
10002ecb:	31 ff                	xor    edi,edi
10002ecd:	3b bc 24 b4 00 00 00 	cmp    edi,DWORD PTR [esp+0xb4]
10002ed4:	0f 8d 93 00 00 00    	jge    10002f6d <_ssfn__zbuild_huffman+0x177>
10002eda:	8b 84 24 b0 00 00 00 	mov    eax,DWORD PTR [esp+0xb0]
10002ee1:	0f b6 34 38          	movzx  esi,BYTE PTR [eax+edi*1]
10002ee5:	89 f2                	mov    edx,esi
10002ee7:	85 f6                	test   esi,esi
10002ee9:	74 78                	je     10002f63 <_ssfn__zbuild_huffman+0x16d>
10002eeb:	8b 6c b4 14          	mov    ebp,DWORD PTR [esp+esi*4+0x14]
10002eef:	8d 0c 36             	lea    ecx,[esi+esi*1]
10002ef2:	89 eb                	mov    ebx,ebp
10002ef4:	03 0c 24             	add    ecx,DWORD PTR [esp]
10002ef7:	0f b7 81 00 04 00 00 	movzx  eax,WORD PTR [ecx+0x400]
10002efe:	0f b7 89 64 04 00 00 	movzx  ecx,WORD PTR [ecx+0x464]
10002f05:	29 c3                	sub    ebx,eax
10002f07:	89 d8                	mov    eax,ebx
10002f09:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
10002f0c:	01 c8                	add    eax,ecx
10002f0e:	83 fe 09             	cmp    esi,0x9
10002f11:	88 94 03 84 04 00 00 	mov    BYTE PTR [ebx+eax*1+0x484],dl
10002f18:	66 89 bc 43 a4 05 00 00 	mov    WORD PTR [ebx+eax*2+0x5a4],di
10002f20:	7f 3c                	jg     10002f5e <_ssfn__zbuild_huffman+0x168>
10002f22:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
10002f26:	89 e8                	mov    eax,ebp
10002f28:	bb 01 00 00 00       	mov    ebx,0x1
10002f2d:	e8 79 fe ff ff       	call   10002dab <_ssfn__bitreverse16>
10002f32:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
10002f36:	b9 10 00 00 00       	mov    ecx,0x10
10002f3b:	29 f1                	sub    ecx,esi
10002f3d:	d3 f8                	sar    eax,cl
10002f3f:	88 d1                	mov    cl,dl
10002f41:	89 f2                	mov    edx,esi
10002f43:	d3 e3                	shl    ebx,cl
10002f45:	c1 e2 09             	shl    edx,0x9
10002f48:	89 d9                	mov    ecx,ebx
10002f4a:	09 fa                	or     edx,edi
10002f4c:	3d ff 01 00 00       	cmp    eax,0x1ff
10002f51:	7f 0b                	jg     10002f5e <_ssfn__zbuild_huffman+0x168>
10002f53:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
10002f56:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
10002f5a:	01 c8                	add    eax,ecx
10002f5c:	eb ee                	jmp    10002f4c <_ssfn__zbuild_huffman+0x156>
10002f5e:	45                   	inc    ebp
10002f5f:	89 6c b4 14          	mov    DWORD PTR [esp+esi*4+0x14],ebp
10002f63:	47                   	inc    edi
10002f64:	e9 64 ff ff ff       	jmp    10002ecd <_ssfn__zbuild_huffman+0xd7>
10002f69:	31 c0                	xor    eax,eax
10002f6b:	eb 05                	jmp    10002f72 <_ssfn__zbuild_huffman+0x17c>
10002f6d:	b8 01 00 00 00       	mov    eax,0x1
10002f72:	81 c4 98 00 00 00    	add    esp,0x98
10002f78:	5b                   	pop    ebx
10002f79:	5e                   	pop    esi
10002f7a:	5f                   	pop    edi
10002f7b:	5d                   	pop    ebp
10002f7c:	c3                   	ret    

10002f7d <_ssfn__fill_bits>:
10002f7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10002f81:	8b 10                	mov    edx,DWORD PTR [eax]
10002f83:	8d 4a 01             	lea    ecx,[edx+0x1]
10002f86:	89 08                	mov    DWORD PTR [eax],ecx
10002f88:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
10002f8b:	0f b6 12             	movzx  edx,BYTE PTR [edx]
10002f8e:	d3 e2                	shl    edx,cl
10002f90:	83 c1 08             	add    ecx,0x8
10002f93:	09 50 08             	or     DWORD PTR [eax+0x8],edx
10002f96:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10002f99:	83 f9 18             	cmp    ecx,0x18
10002f9c:	7e e3                	jle    10002f81 <_ssfn__fill_bits+0x4>
10002f9e:	c3                   	ret    

10002f9f <_ssfn__zreceive>:
10002f9f:	56                   	push   esi
10002fa0:	89 d1                	mov    ecx,edx
10002fa2:	53                   	push   ebx
10002fa3:	89 c6                	mov    esi,eax
10002fa5:	53                   	push   ebx
10002fa6:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
10002fa9:	7d 0d                	jge    10002fb8 <_ssfn__zreceive+0x19>
10002fab:	89 14 24             	mov    DWORD PTR [esp],edx
10002fae:	50                   	push   eax
10002faf:	e8 c9 ff ff ff       	call   10002f7d <_ssfn__fill_bits>
10002fb4:	59                   	pop    ecx
10002fb5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10002fb8:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
10002fbb:	29 4e 04             	sub    DWORD PTR [esi+0x4],ecx
10002fbe:	89 d0                	mov    eax,edx
10002fc0:	bb 01 00 00 00       	mov    ebx,0x1
10002fc5:	d3 e8                	shr    eax,cl
10002fc7:	d3 e3                	shl    ebx,cl
10002fc9:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
10002fcc:	8d 43 ff             	lea    eax,[ebx-0x1]
10002fcf:	21 d0                	and    eax,edx
10002fd1:	5a                   	pop    edx
10002fd2:	5b                   	pop    ebx
10002fd3:	5e                   	pop    esi
10002fd4:	c3                   	ret    

10002fd5 <_ssfn__zhuffman_decode_slowpath>:
10002fd5:	55                   	push   ebp
10002fd6:	57                   	push   edi
10002fd7:	56                   	push   esi
10002fd8:	53                   	push   ebx
10002fd9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002fdd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10002fe1:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
10002fe4:	89 f8                	mov    eax,edi
10002fe6:	e8 c0 fd ff ff       	call   10002dab <_ssfn__bitreverse16>
10002feb:	ba 0a 00 00 00       	mov    edx,0xa
10002ff0:	39 84 96 20 04 00 00 	cmp    DWORD PTR [esi+edx*4+0x420],eax
10002ff7:	7f 03                	jg     10002ffc <_ssfn__zhuffman_decode_slowpath+0x27>
10002ff9:	42                   	inc    edx
10002ffa:	eb f4                	jmp    10002ff0 <_ssfn__zhuffman_decode_slowpath+0x1b>
10002ffc:	83 c9 ff             	or     ecx,0xffffffff
10002fff:	83 fa 10             	cmp    edx,0x10
10003002:	74 34                	je     10003038 <_ssfn__zhuffman_decode_slowpath+0x63>
10003004:	8d 2c 12             	lea    ebp,[edx+edx*1]
10003007:	b9 10 00 00 00       	mov    ecx,0x10
1000300c:	01 f5                	add    ebp,esi
1000300e:	29 d1                	sub    ecx,edx
10003010:	d3 f8                	sar    eax,cl
10003012:	0f b7 8d 00 04 00 00 	movzx  ecx,WORD PTR [ebp+0x400]
10003019:	0f b7 ad 64 04 00 00 	movzx  ebp,WORD PTR [ebp+0x464]
10003020:	29 c8                	sub    eax,ecx
10003022:	29 53 04             	sub    DWORD PTR [ebx+0x4],edx
10003025:	88 d1                	mov    cl,dl
10003027:	8d 84 28 d0 02 00 00 	lea    eax,[eax+ebp*1+0x2d0]
1000302e:	d3 ef                	shr    edi,cl
10003030:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
10003033:	0f b7 4c 46 04       	movzx  ecx,WORD PTR [esi+eax*2+0x4]
10003038:	5b                   	pop    ebx
10003039:	89 c8                	mov    eax,ecx
1000303b:	5e                   	pop    esi
1000303c:	5f                   	pop    edi
1000303d:	5d                   	pop    ebp
1000303e:	c3                   	ret    

1000303f <_ssfn__zhuffman_decode>:
1000303f:	57                   	push   edi
10003040:	89 d7                	mov    edi,edx
10003042:	56                   	push   esi
10003043:	53                   	push   ebx
10003044:	89 c3                	mov    ebx,eax
10003046:	83 78 04 0f          	cmp    DWORD PTR [eax+0x4],0xf
1000304a:	7f 07                	jg     10003053 <_ssfn__zhuffman_decode+0x14>
1000304c:	50                   	push   eax
1000304d:	e8 2b ff ff ff       	call   10002f7d <_ssfn__fill_bits>
10003052:	5e                   	pop    esi
10003053:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
10003056:	89 f0                	mov    eax,esi
10003058:	25 ff 01 00 00       	and    eax,0x1ff
1000305d:	0f b7 0c 47          	movzx  ecx,WORD PTR [edi+eax*2]
10003061:	89 c8                	mov    eax,ecx
10003063:	85 c9                	test   ecx,ecx
10003065:	74 12                	je     10003079 <_ssfn__zhuffman_decode+0x3a>
10003067:	c1 f9 09             	sar    ecx,0x9
1000306a:	25 ff 01 00 00       	and    eax,0x1ff
1000306f:	d3 ee                	shr    esi,cl
10003071:	29 4b 04             	sub    DWORD PTR [ebx+0x4],ecx
10003074:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10003077:	eb 09                	jmp    10003082 <_ssfn__zhuffman_decode+0x43>
10003079:	57                   	push   edi
1000307a:	53                   	push   ebx
1000307b:	e8 55 ff ff ff       	call   10002fd5 <_ssfn__zhuffman_decode_slowpath>
10003080:	5a                   	pop    edx
10003081:	59                   	pop    ecx
10003082:	5b                   	pop    ebx
10003083:	5e                   	pop    esi
10003084:	5f                   	pop    edi
10003085:	c3                   	ret    

10003086 <_ssfn__zexpand>:
10003086:	55                   	push   ebp
10003087:	57                   	push   edi
10003088:	56                   	push   esi
10003089:	53                   	push   ebx
1000308a:	83 ec 0c             	sub    esp,0xc
1000308d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10003091:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
10003095:	8b 5e 10             	mov    ebx,DWORD PTR [esi+0x10]
10003098:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
1000309b:	89 7e 0c             	mov    DWORD PTR [esi+0xc],edi
1000309e:	29 d8                	sub    eax,ebx
100030a0:	83 f8 08             	cmp    eax,0x8
100030a3:	74 04                	je     100030a9 <_ssfn__zexpand+0x23>
100030a5:	31 c0                	xor    eax,eax
100030a7:	eb 38                	jmp    100030e1 <_ssfn__zexpand+0x5b>
100030a9:	80 3b 53             	cmp    BYTE PTR [ebx],0x53
100030ac:	75 f7                	jne    100030a5 <_ssfn__zexpand+0x1f>
100030ae:	80 7b 01 46          	cmp    BYTE PTR [ebx+0x1],0x46
100030b2:	75 f1                	jne    100030a5 <_ssfn__zexpand+0x1f>
100030b4:	80 7b 02 4e          	cmp    BYTE PTR [ebx+0x2],0x4e
100030b8:	75 eb                	jne    100030a5 <_ssfn__zexpand+0x1f>
100030ba:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
100030bd:	50                   	push   eax
100030be:	50                   	push   eax
100030bf:	55                   	push   ebp
100030c0:	53                   	push   ebx
100030c1:	e8 fc ff ff ff       	call   100030c2 <_ssfn__zexpand+0x3c>	100030c2: R_386_PC32	realloc
100030c6:	83 c4 10             	add    esp,0x10
100030c9:	85 c0                	test   eax,eax
100030cb:	74 d8                	je     100030a5 <_ssfn__zexpand+0x1f>
100030cd:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
100030d0:	29 df                	sub    edi,ebx
100030d2:	01 c7                	add    edi,eax
100030d4:	01 e8                	add    eax,ebp
100030d6:	89 7e 0c             	mov    DWORD PTR [esi+0xc],edi
100030d9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
100030dc:	b8 01 00 00 00       	mov    eax,0x1
100030e1:	83 c4 0c             	add    esp,0xc
100030e4:	5b                   	pop    ebx
100030e5:	5e                   	pop    esi
100030e6:	5f                   	pop    edi
100030e7:	5d                   	pop    ebp
100030e8:	c3                   	ret    

100030e9 <_ssfn__parse_huffman_block>:
100030e9:	55                   	push   ebp
100030ea:	57                   	push   edi
100030eb:	56                   	push   esi
100030ec:	53                   	push   ebx
100030ed:	83 ec 1c             	sub    esp,0x1c
100030f0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
100030f4:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
100030f7:	8d 53 18             	lea    edx,[ebx+0x18]
100030fa:	89 d8                	mov    eax,ebx
100030fc:	e8 3e ff ff ff       	call   1000303f <_ssfn__zhuffman_decode>
10003101:	89 c5                	mov    ebp,eax
10003103:	3d ff 00 00 00       	cmp    eax,0xff
10003108:	7f 2c                	jg     10003136 <_ssfn__parse_huffman_block+0x4d>
1000310a:	85 c0                	test   eax,eax
1000310c:	0f 88 ef 00 00 00    	js     10003201 <_ssfn__parse_huffman_block+0x118>
10003112:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
10003115:	77 17                	ja     1000312e <_ssfn__parse_huffman_block+0x45>
10003117:	52                   	push   edx
10003118:	52                   	push   edx
10003119:	57                   	push   edi
1000311a:	53                   	push   ebx
1000311b:	e8 66 ff ff ff       	call   10003086 <_ssfn__zexpand>
10003120:	83 c4 10             	add    esp,0x10
10003123:	85 c0                	test   eax,eax
10003125:	0f 84 d6 00 00 00    	je     10003201 <_ssfn__parse_huffman_block+0x118>
1000312b:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
1000312e:	89 e8                	mov    eax,ebp
10003130:	47                   	inc    edi
10003131:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
10003134:	eb c1                	jmp    100030f7 <_ssfn__parse_huffman_block+0xe>
10003136:	3d 00 01 00 00       	cmp    eax,0x100
1000313b:	75 0d                	jne    1000314a <_ssfn__parse_huffman_block+0x61>
1000313d:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
10003140:	b8 01 00 00 00       	mov    eax,0x1
10003145:	e9 b9 00 00 00       	jmp    10003203 <_ssfn__parse_huffman_block+0x11a>
1000314a:	8d 80 ff fe ff ff    	lea    eax,[eax-0x101]
10003150:	8b 14 85 e0 b6 00 10 	mov    edx,DWORD PTR [eax*4+0x1000b6e0]	10003153: R_386_32	.data
10003157:	8b 2c 85 60 b6 00 10 	mov    ebp,DWORD PTR [eax*4+0x1000b660]	1000315a: R_386_32	.data
1000315e:	85 d2                	test   edx,edx
10003160:	74 09                	je     1000316b <_ssfn__parse_huffman_block+0x82>
10003162:	89 d8                	mov    eax,ebx
10003164:	e8 36 fe ff ff       	call   10002f9f <_ssfn__zreceive>
10003169:	01 c5                	add    ebp,eax
1000316b:	8d 93 fc 07 00 00    	lea    edx,[ebx+0x7fc]
10003171:	89 d8                	mov    eax,ebx
10003173:	e8 c7 fe ff ff       	call   1000303f <_ssfn__zhuffman_decode>
10003178:	85 c0                	test   eax,eax
1000317a:	0f 88 81 00 00 00    	js     10003201 <_ssfn__parse_huffman_block+0x118>
10003180:	8b 0c 85 60 b7 00 10 	mov    ecx,DWORD PTR [eax*4+0x1000b760]	10003183: R_386_32	.data
10003187:	8b 14 85 e0 b7 00 10 	mov    edx,DWORD PTR [eax*4+0x1000b7e0]	1000318a: R_386_32	.data
1000318e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10003192:	85 d2                	test   edx,edx
10003194:	74 0b                	je     100031a1 <_ssfn__parse_huffman_block+0xb8>
10003196:	89 d8                	mov    eax,ebx
10003198:	e8 02 fe ff ff       	call   10002f9f <_ssfn__zreceive>
1000319d:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
100031a1:	89 f8                	mov    eax,edi
100031a3:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
100031a6:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
100031aa:	7c 55                	jl     10003201 <_ssfn__parse_huffman_block+0x118>
100031ac:	8d 04 2f             	lea    eax,[edi+ebp*1]
100031af:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
100031b2:	73 13                	jae    100031c7 <_ssfn__parse_huffman_block+0xde>
100031b4:	50                   	push   eax
100031b5:	50                   	push   eax
100031b6:	57                   	push   edi
100031b7:	53                   	push   ebx
100031b8:	e8 c9 fe ff ff       	call   10003086 <_ssfn__zexpand>
100031bd:	83 c4 10             	add    esp,0x10
100031c0:	85 c0                	test   eax,eax
100031c2:	74 3d                	je     10003201 <_ssfn__parse_huffman_block+0x118>
100031c4:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
100031c7:	89 fe                	mov    esi,edi
100031c9:	2b 74 24 0c          	sub    esi,DWORD PTR [esp+0xc]
100031cd:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
100031d2:	75 19                	jne    100031ed <_ssfn__parse_huffman_block+0x104>
100031d4:	85 ed                	test   ebp,ebp
100031d6:	0f 84 1b ff ff ff    	je     100030f7 <_ssfn__parse_huffman_block+0xe>
100031dc:	8a 06                	mov    al,BYTE PTR [esi]
100031de:	01 fd                	add    ebp,edi
100031e0:	47                   	inc    edi
100031e1:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
100031e4:	39 ef                	cmp    edi,ebp
100031e6:	75 f8                	jne    100031e0 <_ssfn__parse_huffman_block+0xf7>
100031e8:	e9 0a ff ff ff       	jmp    100030f7 <_ssfn__parse_huffman_block+0xe>
100031ed:	85 ed                	test   ebp,ebp
100031ef:	0f 84 02 ff ff ff    	je     100030f7 <_ssfn__parse_huffman_block+0xe>
100031f5:	01 fd                	add    ebp,edi
100031f7:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
100031f8:	39 ef                	cmp    edi,ebp
100031fa:	75 fb                	jne    100031f7 <_ssfn__parse_huffman_block+0x10e>
100031fc:	e9 f6 fe ff ff       	jmp    100030f7 <_ssfn__parse_huffman_block+0xe>
10003201:	31 c0                	xor    eax,eax
10003203:	83 c4 1c             	add    esp,0x1c
10003206:	5b                   	pop    ebx
10003207:	5e                   	pop    esi
10003208:	5f                   	pop    edi
10003209:	5d                   	pop    ebp
1000320a:	c3                   	ret    

1000320b <_ssfn__compute_huffman_codes>:
1000320b:	55                   	push   ebp
1000320c:	ba 05 00 00 00       	mov    edx,0x5
10003211:	57                   	push   edi
10003212:	56                   	push   esi
10003213:	53                   	push   ebx
10003214:	81 ec c8 09 00 00    	sub    esp,0x9c8
1000321a:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10003221:	8d 5c 24 0a          	lea    ebx,[esp+0xa]
10003225:	89 e8                	mov    eax,ebp
10003227:	89 df                	mov    edi,ebx
10003229:	e8 71 fd ff ff       	call   10002f9f <_ssfn__zreceive>
1000322e:	ba 05 00 00 00       	mov    edx,0x5
10003233:	89 c6                	mov    esi,eax
10003235:	89 e8                	mov    eax,ebp
10003237:	e8 63 fd ff ff       	call   10002f9f <_ssfn__zreceive>
1000323c:	ba 04 00 00 00       	mov    edx,0x4
10003241:	89 04 24             	mov    DWORD PTR [esp],eax
10003244:	89 e8                	mov    eax,ebp
10003246:	e8 54 fd ff ff       	call   10002f9f <_ssfn__zreceive>
1000324b:	b9 13 00 00 00       	mov    ecx,0x13
10003250:	83 c0 04             	add    eax,0x4
10003253:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003257:	31 c0                	xor    eax,eax
10003259:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000325b:	31 ff                	xor    edi,edi
1000325d:	3b 7c 24 04          	cmp    edi,DWORD PTR [esp+0x4]
10003261:	7d 1a                	jge    1000327d <_ssfn__compute_huffman_codes+0x72>
10003263:	ba 03 00 00 00       	mov    edx,0x3
10003268:	89 e8                	mov    eax,ebp
1000326a:	47                   	inc    edi
1000326b:	e8 2f fd ff ff       	call   10002f9f <_ssfn__zreceive>
10003270:	0f b6 97 5f b8 00 10 	movzx  edx,BYTE PTR [edi+0x1000b85f]	10003273: R_386_32	.data
10003277:	88 44 14 0a          	mov    BYTE PTR [esp+edx*1+0xa],al
1000327b:	eb e0                	jmp    1000325d <_ssfn__compute_huffman_codes+0x52>
1000327d:	6a 13                	push   0x13
1000327f:	53                   	push   ebx
10003280:	8d 84 24 ec 01 00 00 	lea    eax,[esp+0x1ec]
10003287:	50                   	push   eax
10003288:	e8 69 fb ff ff       	call   10002df6 <_ssfn__zbuild_huffman>
1000328d:	83 c4 0c             	add    esp,0xc
10003290:	85 c0                	test   eax,eax
10003292:	75 07                	jne    1000329b <_ssfn__compute_huffman_codes+0x90>
10003294:	31 c0                	xor    eax,eax
10003296:	e9 dd 00 00 00       	jmp    10003378 <_ssfn__compute_huffman_codes+0x16d>
1000329b:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000329e:	81 c6 01 01 00 00    	add    esi,0x101
100032a4:	40                   	inc    eax
100032a5:	31 db                	xor    ebx,ebx
100032a7:	89 04 24             	mov    DWORD PTR [esp],eax
100032aa:	01 f0                	add    eax,esi
100032ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100032b0:	3b 5c 24 04          	cmp    ebx,DWORD PTR [esp+0x4]
100032b4:	0f 8d 81 00 00 00    	jge    1000333b <_ssfn__compute_huffman_codes+0x130>
100032ba:	8d 94 24 e4 01 00 00 	lea    edx,[esp+0x1e4]
100032c1:	89 e8                	mov    eax,ebp
100032c3:	e8 77 fd ff ff       	call   1000303f <_ssfn__zhuffman_decode>
100032c8:	83 f8 12             	cmp    eax,0x12
100032cb:	77 c7                	ja     10003294 <_ssfn__compute_huffman_codes+0x89>
100032cd:	83 f8 0f             	cmp    eax,0xf
100032d0:	7f 07                	jg     100032d9 <_ssfn__compute_huffman_codes+0xce>
100032d2:	88 44 1c 1d          	mov    BYTE PTR [esp+ebx*1+0x1d],al
100032d6:	43                   	inc    ebx
100032d7:	eb d7                	jmp    100032b0 <_ssfn__compute_huffman_codes+0xa5>
100032d9:	83 f8 10             	cmp    eax,0x10
100032dc:	75 19                	jne    100032f7 <_ssfn__compute_huffman_codes+0xec>
100032de:	ba 02 00 00 00       	mov    edx,0x2
100032e3:	89 e8                	mov    eax,ebp
100032e5:	e8 b5 fc ff ff       	call   10002f9f <_ssfn__zreceive>
100032ea:	85 db                	test   ebx,ebx
100032ec:	8d 50 03             	lea    edx,[eax+0x3]
100032ef:	74 a3                	je     10003294 <_ssfn__compute_huffman_codes+0x89>
100032f1:	8a 44 1c 1c          	mov    al,BYTE PTR [esp+ebx*1+0x1c]
100032f5:	eb 27                	jmp    1000331e <_ssfn__compute_huffman_codes+0x113>
100032f7:	83 f8 11             	cmp    eax,0x11
100032fa:	75 11                	jne    1000330d <_ssfn__compute_huffman_codes+0x102>
100032fc:	ba 03 00 00 00       	mov    edx,0x3
10003301:	89 e8                	mov    eax,ebp
10003303:	e8 97 fc ff ff       	call   10002f9f <_ssfn__zreceive>
10003308:	8d 50 03             	lea    edx,[eax+0x3]
1000330b:	eb 0f                	jmp    1000331c <_ssfn__compute_huffman_codes+0x111>
1000330d:	ba 07 00 00 00       	mov    edx,0x7
10003312:	89 e8                	mov    eax,ebp
10003314:	e8 86 fc ff ff       	call   10002f9f <_ssfn__zreceive>
10003319:	8d 50 0b             	lea    edx,[eax+0xb]
1000331c:	31 c0                	xor    eax,eax
1000331e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10003322:	29 d9                	sub    ecx,ebx
10003324:	39 d1                	cmp    ecx,edx
10003326:	0f 8c 68 ff ff ff    	jl     10003294 <_ssfn__compute_huffman_codes+0x89>
1000332c:	8d 7c 1c 1d          	lea    edi,[esp+ebx*1+0x1d]
10003330:	89 d1                	mov    ecx,edx
10003332:	01 d3                	add    ebx,edx
10003334:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003336:	e9 75 ff ff ff       	jmp    100032b0 <_ssfn__compute_huffman_codes+0xa5>
1000333b:	0f 85 53 ff ff ff    	jne    10003294 <_ssfn__compute_huffman_codes+0x89>
10003341:	56                   	push   esi
10003342:	8d 45 18             	lea    eax,[ebp+0x18]
10003345:	8d 5c 24 21          	lea    ebx,[esp+0x21]
10003349:	53                   	push   ebx
1000334a:	50                   	push   eax
1000334b:	e8 a6 fa ff ff       	call   10002df6 <_ssfn__zbuild_huffman>
10003350:	83 c4 0c             	add    esp,0xc
10003353:	85 c0                	test   eax,eax
10003355:	0f 84 39 ff ff ff    	je     10003294 <_ssfn__compute_huffman_codes+0x89>
1000335b:	ff 34 24             	push   DWORD PTR [esp]
1000335e:	01 de                	add    esi,ebx
10003360:	8d 85 fc 07 00 00    	lea    eax,[ebp+0x7fc]
10003366:	56                   	push   esi
10003367:	50                   	push   eax
10003368:	e8 89 fa ff ff       	call   10002df6 <_ssfn__zbuild_huffman>
1000336d:	83 c4 0c             	add    esp,0xc
10003370:	85 c0                	test   eax,eax
10003372:	0f 95 c0             	setne  al
10003375:	0f b6 c0             	movzx  eax,al
10003378:	81 c4 c8 09 00 00    	add    esp,0x9c8
1000337e:	5b                   	pop    ebx
1000337f:	5e                   	pop    esi
10003380:	5f                   	pop    edi
10003381:	5d                   	pop    ebp
10003382:	c3                   	ret    

10003383 <_ssfn__init_zdefaults>:
10003383:	31 c0                	xor    eax,eax
10003385:	c6 80 c0 f6 00 10 08 	mov    BYTE PTR [eax+0x1000f6c0],0x8	10003387: R_386_32	.bss
1000338c:	40                   	inc    eax
1000338d:	3d 90 00 00 00       	cmp    eax,0x90
10003392:	75 f1                	jne    10003385 <_ssfn__init_zdefaults+0x2>
10003394:	c6 80 c0 f6 00 10 09 	mov    BYTE PTR [eax+0x1000f6c0],0x9	10003396: R_386_32	.bss
1000339b:	40                   	inc    eax
1000339c:	3d 00 01 00 00       	cmp    eax,0x100
100033a1:	75 f1                	jne    10003394 <_ssfn__init_zdefaults+0x11>
100033a3:	c6 80 c0 f6 00 10 07 	mov    BYTE PTR [eax+0x1000f6c0],0x7	100033a5: R_386_32	.bss
100033aa:	40                   	inc    eax
100033ab:	3d 18 01 00 00       	cmp    eax,0x118
100033b0:	75 f1                	jne    100033a3 <_ssfn__init_zdefaults+0x20>
100033b2:	c7 05 d8 f7 00 10 08 08 08 08 	mov    DWORD PTR ds:0x1000f7d8,0x8080808	100033b4: R_386_32	.bss
100033bc:	c7 05 dc f7 00 10 08 08 08 08 	mov    DWORD PTR ds:0x1000f7dc,0x8080808	100033be: R_386_32	.bss
100033c6:	31 c0                	xor    eax,eax
100033c8:	c6 80 e0 f7 00 10 05 	mov    BYTE PTR [eax+0x1000f7e0],0x5	100033ca: R_386_32	.bss
100033cf:	40                   	inc    eax
100033d0:	83 f8 20             	cmp    eax,0x20
100033d3:	75 f3                	jne    100033c8 <_ssfn__init_zdefaults+0x45>
100033d5:	c3                   	ret    

100033d6 <_ssfn__parse_zlib>:
100033d6:	55                   	push   ebp
100033d7:	57                   	push   edi
100033d8:	56                   	push   esi
100033d9:	53                   	push   ebx
100033da:	83 ec 1c             	sub    esp,0x1c
100033dd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
100033e1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
100033e8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
100033ef:	ba 01 00 00 00       	mov    edx,0x1
100033f4:	89 d8                	mov    eax,ebx
100033f6:	e8 a4 fb ff ff       	call   10002f9f <_ssfn__zreceive>
100033fb:	ba 02 00 00 00       	mov    edx,0x2
10003400:	89 c5                	mov    ebp,eax
10003402:	89 d8                	mov    eax,ebx
10003404:	e8 96 fb ff ff       	call   10002f9f <_ssfn__zreceive>
10003409:	89 c6                	mov    esi,eax
1000340b:	85 c0                	test   eax,eax
1000340d:	0f 85 ad 00 00 00    	jne    100034c0 <_ssfn__parse_zlib+0xea>
10003413:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10003416:	83 e2 07             	and    edx,0x7
10003419:	74 07                	je     10003422 <_ssfn__parse_zlib+0x4c>
1000341b:	89 d8                	mov    eax,ebx
1000341d:	e8 7d fb ff ff       	call   10002f9f <_ssfn__zreceive>
10003422:	31 c0                	xor    eax,eax
10003424:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
10003427:	85 c9                	test   ecx,ecx
10003429:	7e 16                	jle    10003441 <_ssfn__parse_zlib+0x6b>
1000342b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
1000342e:	40                   	inc    eax
1000342f:	83 e9 08             	sub    ecx,0x8
10003432:	88 54 04 0b          	mov    BYTE PTR [esp+eax*1+0xb],dl
10003436:	89 4b 04             	mov    DWORD PTR [ebx+0x4],ecx
10003439:	c1 ea 08             	shr    edx,0x8
1000343c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
1000343f:	eb e3                	jmp    10003424 <_ssfn__parse_zlib+0x4e>
10003441:	83 f8 04             	cmp    eax,0x4
10003444:	74 10                	je     10003456 <_ssfn__parse_zlib+0x80>
10003446:	8b 13                	mov    edx,DWORD PTR [ebx]
10003448:	40                   	inc    eax
10003449:	8d 4a 01             	lea    ecx,[edx+0x1]
1000344c:	89 0b                	mov    DWORD PTR [ebx],ecx
1000344e:	8a 12                	mov    dl,BYTE PTR [edx]
10003450:	88 54 04 0b          	mov    BYTE PTR [esp+eax*1+0xb],dl
10003454:	eb eb                	jmp    10003441 <_ssfn__parse_zlib+0x6b>
10003456:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
1000345b:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
10003460:	0f b6 7c 24 0d       	movzx  edi,BYTE PTR [esp+0xd]
10003465:	c1 e7 08             	shl    edi,0x8
10003468:	01 c7                	add    edi,eax
1000346a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
1000346f:	c1 e0 08             	shl    eax,0x8
10003472:	01 d0                	add    eax,edx
10003474:	89 fa                	mov    edx,edi
10003476:	81 f2 ff ff 00 00    	xor    edx,0xffff
1000347c:	39 d0                	cmp    eax,edx
1000347e:	0f 85 a6 00 00 00    	jne    1000352a <_ssfn__parse_zlib+0x154>
10003484:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10003487:	8d 14 38             	lea    edx,[eax+edi*1]
1000348a:	39 53 14             	cmp    DWORD PTR [ebx+0x14],edx
1000348d:	73 14                	jae    100034a3 <_ssfn__parse_zlib+0xcd>
1000348f:	51                   	push   ecx
10003490:	51                   	push   ecx
10003491:	50                   	push   eax
10003492:	53                   	push   ebx
10003493:	e8 ee fb ff ff       	call   10003086 <_ssfn__zexpand>
10003498:	83 c4 10             	add    esp,0x10
1000349b:	85 c0                	test   eax,eax
1000349d:	0f 84 87 00 00 00    	je     1000352a <_ssfn__parse_zlib+0x154>
100034a3:	8b 03                	mov    eax,DWORD PTR [ebx]
100034a5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
100034a8:	39 f7                	cmp    edi,esi
100034aa:	74 09                	je     100034b5 <_ssfn__parse_zlib+0xdf>
100034ac:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
100034af:	88 04 32             	mov    BYTE PTR [edx+esi*1],al
100034b2:	46                   	inc    esi
100034b3:	eb ee                	jmp    100034a3 <_ssfn__parse_zlib+0xcd>
100034b5:	01 f8                	add    eax,edi
100034b7:	01 d7                	add    edi,edx
100034b9:	89 03                	mov    DWORD PTR [ebx],eax
100034bb:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
100034be:	eb 5d                	jmp    1000351d <_ssfn__parse_zlib+0x147>
100034c0:	83 f8 03             	cmp    eax,0x3
100034c3:	75 04                	jne    100034c9 <_ssfn__parse_zlib+0xf3>
100034c5:	31 f6                	xor    esi,esi
100034c7:	eb 61                	jmp    1000352a <_ssfn__parse_zlib+0x154>
100034c9:	4e                   	dec    esi
100034ca:	75 31                	jne    100034fd <_ssfn__parse_zlib+0x127>
100034cc:	8d 43 18             	lea    eax,[ebx+0x18]
100034cf:	52                   	push   edx
100034d0:	68 20 01 00 00       	push   0x120
100034d5:	68 c0 f6 00 10       	push   0x1000f6c0	100034d6: R_386_32	.bss
100034da:	50                   	push   eax
100034db:	e8 16 f9 ff ff       	call   10002df6 <_ssfn__zbuild_huffman>
100034e0:	83 c4 10             	add    esp,0x10
100034e3:	85 c0                	test   eax,eax
100034e5:	74 de                	je     100034c5 <_ssfn__parse_zlib+0xef>
100034e7:	50                   	push   eax
100034e8:	8d 83 fc 07 00 00    	lea    eax,[ebx+0x7fc]
100034ee:	6a 20                	push   0x20
100034f0:	68 e0 f7 00 10       	push   0x1000f7e0	100034f1: R_386_32	.bss
100034f5:	50                   	push   eax
100034f6:	e8 fb f8 ff ff       	call   10002df6 <_ssfn__zbuild_huffman>
100034fb:	eb 09                	jmp    10003506 <_ssfn__parse_zlib+0x130>
100034fd:	83 ec 0c             	sub    esp,0xc
10003500:	53                   	push   ebx
10003501:	e8 05 fd ff ff       	call   1000320b <_ssfn__compute_huffman_codes>
10003506:	83 c4 10             	add    esp,0x10
10003509:	85 c0                	test   eax,eax
1000350b:	74 b8                	je     100034c5 <_ssfn__parse_zlib+0xef>
1000350d:	83 ec 0c             	sub    esp,0xc
10003510:	53                   	push   ebx
10003511:	e8 d3 fb ff ff       	call   100030e9 <_ssfn__parse_huffman_block>
10003516:	83 c4 10             	add    esp,0x10
10003519:	85 c0                	test   eax,eax
1000351b:	74 a8                	je     100034c5 <_ssfn__parse_zlib+0xef>
1000351d:	85 ed                	test   ebp,ebp
1000351f:	0f 84 ca fe ff ff    	je     100033ef <_ssfn__parse_zlib+0x19>
10003525:	be 01 00 00 00       	mov    esi,0x1
1000352a:	83 c4 1c             	add    esp,0x1c
1000352d:	89 f0                	mov    eax,esi
1000352f:	5b                   	pop    ebx
10003530:	5e                   	pop    esi
10003531:	5f                   	pop    edi
10003532:	5d                   	pop    ebp
10003533:	c3                   	ret    

10003534 <_ssfn_zlib_decode>:
10003534:	81 ec f8 0f 00 00    	sub    esp,0xff8
1000353a:	6a 08                	push   0x8
1000353c:	e8 fc ff ff ff       	call   1000353d <_ssfn_zlib_decode+0x9>	1000353d: R_386_PC32	malloc
10003541:	83 c4 10             	add    esp,0x10
10003544:	85 c0                	test   eax,eax
10003546:	74 49                	je     10003591 <_ssfn_zlib_decode+0x5d>
10003548:	8b 94 24 f0 0f 00 00 	mov    edx,DWORD PTR [esp+0xff0]
1000354f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003553:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003557:	89 14 24             	mov    DWORD PTR [esp],edx
1000355a:	83 c0 08             	add    eax,0x8
1000355d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003561:	e8 1d fe ff ff       	call   10003383 <_ssfn__init_zdefaults>
10003566:	83 ec 0c             	sub    esp,0xc
10003569:	8d 44 24 0c          	lea    eax,[esp+0xc]
1000356d:	50                   	push   eax
1000356e:	e8 63 fe ff ff       	call   100033d6 <_ssfn__parse_zlib>
10003573:	83 c4 10             	add    esp,0x10
10003576:	85 c0                	test   eax,eax
10003578:	74 06                	je     10003580 <_ssfn_zlib_decode+0x4c>
1000357a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000357e:	eb 11                	jmp    10003591 <_ssfn_zlib_decode+0x5d>
10003580:	83 ec 0c             	sub    esp,0xc
10003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003587:	e8 fc ff ff ff       	call   10003588 <_ssfn_zlib_decode+0x54>	10003588: R_386_PC32	free
1000358c:	83 c4 10             	add    esp,0x10
1000358f:	31 c0                	xor    eax,eax
10003591:	81 c4 ec 0f 00 00    	add    esp,0xfec
10003597:	c3                   	ret    

10003598 <ssfn_load>:
10003598:	55                   	push   ebp
10003599:	57                   	push   edi
1000359a:	56                   	push   esi
1000359b:	53                   	push   ebx
1000359c:	83 ec 1c             	sub    esp,0x1c
1000359f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
100035a3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100035a7:	85 ff                	test   edi,edi
100035a9:	0f 84 d5 01 00 00    	je     10003784 <ssfn_load+0x1ec>
100035af:	85 f6                	test   esi,esi
100035b1:	0f 84 cd 01 00 00    	je     10003784 <ssfn_load+0x1ec>
100035b7:	80 3e 1f             	cmp    BYTE PTR [esi],0x1f
100035ba:	0f 85 a8 00 00 00    	jne    10003668 <ssfn_load+0xd0>
100035c0:	80 7e 01 8b          	cmp    BYTE PTR [esi+0x1],0x8b
100035c4:	0f 85 9e 00 00 00    	jne    10003668 <ssfn_load+0xd0>
100035ca:	80 7e 02 08          	cmp    BYTE PTR [esi+0x2],0x8
100035ce:	74 0a                	je     100035da <ssfn_load+0x42>
100035d0:	bd fe ff ff ff       	mov    ebp,0xfffffffe
100035d5:	e9 af 01 00 00       	jmp    10003789 <ssfn_load+0x1f1>
100035da:	8a 46 03             	mov    al,BYTE PTR [esi+0x3]
100035dd:	a8 04                	test   al,0x4
100035df:	75 05                	jne    100035e6 <ssfn_load+0x4e>
100035e1:	83 c6 0a             	add    esi,0xa
100035e4:	eb 08                	jmp    100035ee <ssfn_load+0x56>
100035e6:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
100035ea:	8d 74 16 0c          	lea    esi,[esi+edx*1+0xc]
100035ee:	a8 08                	test   al,0x8
100035f0:	74 07                	je     100035f9 <ssfn_load+0x61>
100035f2:	46                   	inc    esi
100035f3:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
100035f7:	eb f7                	jmp    100035f0 <ssfn_load+0x58>
100035f9:	a8 10                	test   al,0x10
100035fb:	74 07                	je     10003604 <ssfn_load+0x6c>
100035fd:	46                   	inc    esi
100035fe:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10003602:	eb f7                	jmp    100035fb <ssfn_load+0x63>
10003604:	83 ec 0c             	sub    esp,0xc
10003607:	56                   	push   esi
10003608:	e8 fc ff ff ff       	call   10003609 <ssfn_load+0x71>	10003609: R_386_PC32	_ssfn_zlib_decode
1000360d:	83 c4 10             	add    esp,0x10
10003610:	89 c6                	mov    esi,eax
10003612:	85 c0                	test   eax,eax
10003614:	74 ba                	je     100035d0 <ssfn_load+0x38>
10003616:	50                   	push   eax
10003617:	50                   	push   eax
10003618:	8b 87 78 f5 00 00    	mov    eax,DWORD PTR [edi+0xf578]
1000361e:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
10003625:	50                   	push   eax
10003626:	ff b7 70 f5 00 00    	push   DWORD PTR [edi+0xf570]
1000362c:	e8 fc ff ff ff       	call   1000362d <ssfn_load+0x95>	1000362d: R_386_PC32	realloc
10003631:	83 c4 10             	add    esp,0x10
10003634:	89 87 70 f5 00 00    	mov    DWORD PTR [edi+0xf570],eax
1000363a:	85 c0                	test   eax,eax
1000363c:	75 0f                	jne    1000364d <ssfn_load+0xb5>
1000363e:	c7 87 78 f5 00 00 00 00 00 00 	mov    DWORD PTR [edi+0xf578],0x0
10003648:	e9 1a 01 00 00       	jmp    10003767 <ssfn_load+0x1cf>
1000364d:	8b 97 78 f5 00 00    	mov    edx,DWORD PTR [edi+0xf578]
10003653:	8d 4a 01             	lea    ecx,[edx+0x1]
10003656:	89 8f 78 f5 00 00    	mov    DWORD PTR [edi+0xf578],ecx
1000365c:	89 34 90             	mov    DWORD PTR [eax+edx*4],esi
1000365f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10003662:	01 87 7c f5 00 00    	add    DWORD PTR [edi+0xf57c],eax
10003668:	50                   	push   eax
10003669:	6a 04                	push   0x4
1000366b:	68 3a 87 00 10       	push   0x1000873a	1000366c: R_386_32	.text
10003670:	56                   	push   esi
10003671:	e8 fc ff ff ff       	call   10003672 <ssfn_load+0xda>	10003672: R_386_PC32	memcmp
10003676:	83 c4 10             	add    esp,0x10
10003679:	89 c5                	mov    ebp,eax
1000367b:	85 c0                	test   eax,eax
1000367d:	75 29                	jne    100036a8 <ssfn_load+0x110>
1000367f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10003682:	01 f3                	add    ebx,esi
10003684:	83 c6 08             	add    esi,0x8
10003687:	39 de                	cmp    esi,ebx
10003689:	0f 83 fa 00 00 00    	jae    10003789 <ssfn_load+0x1f1>
1000368f:	50                   	push   eax
10003690:	50                   	push   eax
10003691:	56                   	push   esi
10003692:	57                   	push   edi
10003693:	e8 fc ff ff ff       	call   10003694 <ssfn_load+0xfc>	10003694: R_386_PC32	ssfn_load
10003698:	83 c4 10             	add    esp,0x10
1000369b:	85 c0                	test   eax,eax
1000369d:	0f 85 e6 00 00 00    	jne    10003789 <ssfn_load+0x1f1>
100036a3:	03 76 04             	add    esi,DWORD PTR [esi+0x4]
100036a6:	eb df                	jmp    10003687 <ssfn_load+0xef>
100036a8:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
100036ab:	83 e0 0f             	and    eax,0xf
100036ae:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100036b2:	53                   	push   ebx
100036b3:	6a 04                	push   0x4
100036b5:	68 3f 87 00 10       	push   0x1000873f	100036b6: R_386_32	.text
100036ba:	56                   	push   esi
100036bb:	e8 fc ff ff ff       	call   100036bc <ssfn_load+0x124>	100036bc: R_386_PC32	memcmp
100036c0:	83 c4 10             	add    esp,0x10
100036c3:	89 c5                	mov    ebp,eax
100036c5:	85 c0                	test   eax,eax
100036c7:	0f 85 03 ff ff ff    	jne    100035d0 <ssfn_load+0x38>
100036cd:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
100036d0:	8d 44 1e fc          	lea    eax,[esi+ebx*1-0x4]
100036d4:	51                   	push   ecx
100036d5:	6a 04                	push   0x4
100036d7:	68 44 87 00 10       	push   0x10008744	100036d8: R_386_32	.text
100036dc:	50                   	push   eax
100036dd:	e8 fc ff ff ff       	call   100036de <ssfn_load+0x146>	100036de: R_386_PC32	memcmp
100036e2:	83 c4 10             	add    esp,0x10
100036e5:	85 c0                	test   eax,eax
100036e7:	0f 85 e3 fe ff ff    	jne    100035d0 <ssfn_load+0x38>
100036ed:	80 7c 24 0f 04       	cmp    BYTE PTR [esp+0xf],0x4
100036f2:	0f 87 d8 fe ff ff    	ja     100035d0 <ssfn_load+0x38>
100036f8:	0f b7 4e 0e          	movzx  ecx,WORD PTR [esi+0xe]
100036fc:	39 cb                	cmp    ebx,ecx
100036fe:	0f 86 cc fe ff ff    	jbe    100035d0 <ssfn_load+0x38>
10003704:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
10003707:	39 c3                	cmp    ebx,eax
10003709:	0f 86 c1 fe ff ff    	jbe    100035d0 <ssfn_load+0x38>
1000370f:	3b 5e 14             	cmp    ebx,DWORD PTR [esi+0x14]
10003712:	0f 86 b8 fe ff ff    	jbe    100035d0 <ssfn_load+0x38>
10003718:	3b 5e 18             	cmp    ebx,DWORD PTR [esi+0x18]
1000371b:	0f 86 af fe ff ff    	jbe    100035d0 <ssfn_load+0x38>
10003721:	3b 5e 1c             	cmp    ebx,DWORD PTR [esi+0x1c]
10003724:	0f 86 a6 fe ff ff    	jbe    100035d0 <ssfn_load+0x38>
1000372a:	39 c1                	cmp    ecx,eax
1000372c:	0f 83 9e fe ff ff    	jae    100035d0 <ssfn_load+0x38>
10003732:	0f b6 5c 24 0f       	movzx  ebx,BYTE PTR [esp+0xf]
10003737:	8d 1c 9f             	lea    ebx,[edi+ebx*4]
1000373a:	8b 83 a4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a4]
10003740:	40                   	inc    eax
10003741:	89 83 a4 f5 00 00    	mov    DWORD PTR [ebx+0xf5a4],eax
10003747:	52                   	push   edx
10003748:	c1 e0 02             	shl    eax,0x2
1000374b:	52                   	push   edx
1000374c:	50                   	push   eax
1000374d:	ff 33                	push   DWORD PTR [ebx]
1000374f:	e8 fc ff ff ff       	call   10003750 <ssfn_load+0x1b8>	10003750: R_386_PC32	realloc
10003754:	83 c4 10             	add    esp,0x10
10003757:	89 03                	mov    DWORD PTR [ebx],eax
10003759:	85 c0                	test   eax,eax
1000375b:	75 0f                	jne    1000376c <ssfn_load+0x1d4>
1000375d:	c7 83 a4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5a4],0x0
10003767:	83 cd ff             	or     ebp,0xffffffff
1000376a:	eb 1d                	jmp    10003789 <ssfn_load+0x1f1>
1000376c:	8b 93 a4 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf5a4]
10003772:	83 ec 0c             	sub    esp,0xc
10003775:	89 74 90 fc          	mov    DWORD PTR [eax+edx*4-0x4],esi
10003779:	57                   	push   edi
1000377a:	e8 a0 f5 ff ff       	call   10002d1f <_ssfn_fc>
1000377f:	83 c4 10             	add    esp,0x10
10003782:	eb 05                	jmp    10003789 <ssfn_load+0x1f1>
10003784:	bd fc ff ff ff       	mov    ebp,0xfffffffc
10003789:	83 c4 1c             	add    esp,0x1c
1000378c:	89 e8                	mov    eax,ebp
1000378e:	5b                   	pop    ebx
1000378f:	5e                   	pop    esi
10003790:	5f                   	pop    edi
10003791:	5d                   	pop    ebp
10003792:	c3                   	ret    

10003793 <ssfn_free>:
10003793:	57                   	push   edi
10003794:	56                   	push   esi
10003795:	53                   	push   ebx
10003796:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000379a:	85 db                	test   ebx,ebx
1000379c:	0f 84 83 00 00 00    	je     10003825 <ssfn_free+0x92>
100037a2:	83 ec 0c             	sub    esp,0xc
100037a5:	53                   	push   ebx
100037a6:	e8 74 f5 ff ff       	call   10002d1f <_ssfn_fc>
100037ab:	83 c4 10             	add    esp,0x10
100037ae:	83 bb 70 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf570],0x0
100037b5:	74 32                	je     100037e9 <ssfn_free+0x56>
100037b7:	31 f6                	xor    esi,esi
100037b9:	8b 83 70 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf570]
100037bf:	39 b3 78 f5 00 00    	cmp    DWORD PTR [ebx+0xf578],esi
100037c5:	7e 16                	jle    100037dd <ssfn_free+0x4a>
100037c7:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
100037ca:	85 c0                	test   eax,eax
100037cc:	74 0c                	je     100037da <ssfn_free+0x47>
100037ce:	83 ec 0c             	sub    esp,0xc
100037d1:	50                   	push   eax
100037d2:	e8 fc ff ff ff       	call   100037d3 <ssfn_free+0x40>	100037d3: R_386_PC32	free
100037d7:	83 c4 10             	add    esp,0x10
100037da:	46                   	inc    esi
100037db:	eb dc                	jmp    100037b9 <ssfn_free+0x26>
100037dd:	83 ec 0c             	sub    esp,0xc
100037e0:	50                   	push   eax
100037e1:	e8 fc ff ff ff       	call   100037e2 <ssfn_free+0x4f>	100037e2: R_386_PC32	free
100037e6:	83 c4 10             	add    esp,0x10
100037e9:	31 f6                	xor    esi,esi
100037eb:	8b 04 b3             	mov    eax,DWORD PTR [ebx+esi*4]
100037ee:	85 c0                	test   eax,eax
100037f0:	74 0c                	je     100037fe <ssfn_free+0x6b>
100037f2:	83 ec 0c             	sub    esp,0xc
100037f5:	50                   	push   eax
100037f6:	e8 fc ff ff ff       	call   100037f7 <ssfn_free+0x64>	100037f7: R_386_PC32	free
100037fb:	83 c4 10             	add    esp,0x10
100037fe:	46                   	inc    esi
100037ff:	83 fe 05             	cmp    esi,0x5
10003802:	75 e7                	jne    100037eb <ssfn_free+0x58>
10003804:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000380a:	85 c0                	test   eax,eax
1000380c:	74 0c                	je     1000381a <ssfn_free+0x87>
1000380e:	83 ec 0c             	sub    esp,0xc
10003811:	50                   	push   eax
10003812:	e8 fc ff ff ff       	call   10003813 <ssfn_free+0x80>	10003813: R_386_PC32	free
10003817:	83 c4 10             	add    esp,0x10
1000381a:	b9 72 3d 00 00       	mov    ecx,0x3d72
1000381f:	31 c0                	xor    eax,eax
10003821:	89 df                	mov    edi,ebx
10003823:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003825:	5b                   	pop    ebx
10003826:	5e                   	pop    esi
10003827:	5f                   	pop    edi
10003828:	c3                   	ret    

10003829 <ssfn_mem>:
10003829:	55                   	push   ebp
1000382a:	31 c0                	xor    eax,eax
1000382c:	57                   	push   edi
1000382d:	56                   	push   esi
1000382e:	53                   	push   ebx
1000382f:	83 ec 08             	sub    esp,0x8
10003832:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10003836:	85 d2                	test   edx,edx
10003838:	0f 84 8e 00 00 00    	je     100038cc <ssfn_mem+0xa3>
1000383e:	b8 c8 f5 00 00       	mov    eax,0xf5c8
10003843:	31 c9                	xor    ecx,ecx
10003845:	8b 9c 8a a4 f5 00 00 	mov    ebx,DWORD PTR [edx+ecx*4+0xf5a4]
1000384c:	41                   	inc    ecx
1000384d:	8d 04 98             	lea    eax,[eax+ebx*4]
10003850:	83 f9 05             	cmp    ecx,0x5
10003853:	75 f0                	jne    10003845 <ssfn_mem+0x1c>
10003855:	03 82 7c f5 00 00    	add    eax,DWORD PTR [edx+0xf57c]
1000385b:	31 c9                	xor    ecx,ecx
1000385d:	8b b4 8a 28 f5 00 00 	mov    esi,DWORD PTR [edx+ecx*4+0xf528]
10003864:	89 34 24             	mov    DWORD PTR [esp],esi
10003867:	85 f6                	test   esi,esi
10003869:	74 48                	je     100038b3 <ssfn_mem+0x8a>
1000386b:	31 db                	xor    ebx,ebx
1000386d:	8b 34 24             	mov    esi,DWORD PTR [esp]
10003870:	8b 3c 9e             	mov    edi,DWORD PTR [esi+ebx*4]
10003873:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
10003877:	85 ff                	test   edi,edi
10003879:	74 2a                	je     100038a5 <ssfn_mem+0x7c>
1000387b:	31 f6                	xor    esi,esi
1000387d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
10003881:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
10003884:	85 ed                	test   ebp,ebp
10003886:	74 0f                	je     10003897 <ssfn_mem+0x6e>
10003888:	0f b7 7d 00          	movzx  edi,WORD PTR [ebp+0x0]
1000388c:	0f b6 6d 02          	movzx  ebp,BYTE PTR [ebp+0x2]
10003890:	0f af fd             	imul   edi,ebp
10003893:	8d 44 38 08          	lea    eax,[eax+edi*1+0x8]
10003897:	46                   	inc    esi
10003898:	81 fe 00 01 00 00    	cmp    esi,0x100
1000389e:	75 dd                	jne    1000387d <ssfn_mem+0x54>
100038a0:	05 00 04 00 00       	add    eax,0x400
100038a5:	43                   	inc    ebx
100038a6:	81 fb 00 01 00 00    	cmp    ebx,0x100
100038ac:	75 bf                	jne    1000386d <ssfn_mem+0x44>
100038ae:	05 00 04 00 00       	add    eax,0x400
100038b3:	41                   	inc    ecx
100038b4:	83 f9 11             	cmp    ecx,0x11
100038b7:	75 a4                	jne    1000385d <ssfn_mem+0x34>
100038b9:	83 ba 6c f5 00 00 00 	cmp    DWORD PTR [edx+0xf56c],0x0
100038c0:	74 0a                	je     100038cc <ssfn_mem+0xa3>
100038c2:	8b 92 84 f5 00 00    	mov    edx,DWORD PTR [edx+0xf584]
100038c8:	01 d2                	add    edx,edx
100038ca:	01 d0                	add    eax,edx
100038cc:	83 c4 08             	add    esp,0x8
100038cf:	5b                   	pop    ebx
100038d0:	5e                   	pop    esi
100038d1:	5f                   	pop    edi
100038d2:	5d                   	pop    ebp
100038d3:	c3                   	ret    

100038d4 <ssfn_select>:
100038d4:	55                   	push   ebp
100038d5:	57                   	push   edi
100038d6:	56                   	push   esi
100038d7:	53                   	push   ebx
100038d8:	83 ec 1c             	sub    esp,0x1c
100038db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
100038df:	85 db                	test   ebx,ebx
100038e1:	75 0a                	jne    100038ed <ssfn_select+0x19>
100038e3:	be fc ff ff ff       	mov    esi,0xfffffffc
100038e8:	e9 18 01 00 00       	jmp    10003a05 <ssfn_select+0x131>
100038ed:	83 ec 0c             	sub    esp,0xc
100038f0:	53                   	push   ebx
100038f1:	e8 29 f4 ff ff       	call   10002d1f <_ssfn_fc>
100038f6:	83 c4 10             	add    esp,0x10
100038f9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100038fd:	81 e6 00 c0 ff ff    	and    esi,0xffffc000
10003903:	0f 85 e9 00 00 00    	jne    100039f2 <ssfn_select+0x11e>
10003909:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000390d:	83 e8 08             	sub    eax,0x8
10003910:	3d b8 00 00 00       	cmp    eax,0xb8
10003915:	0f 87 de 00 00 00    	ja     100039f9 <ssfn_select+0x125>
1000391b:	81 7c 24 34 fe 00 00 00 	cmp    DWORD PTR [esp+0x34],0xfe
10003923:	75 76                	jne    1000399b <ssfn_select+0xc7>
10003925:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
1000392a:	74 b7                	je     100038e3 <ssfn_select+0xf>
1000392c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10003930:	80 38 00             	cmp    BYTE PTR [eax],0x0
10003933:	74 ae                	je     100038e3 <ssfn_select+0xf>
10003935:	31 ed                	xor    ebp,ebp
10003937:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000393b:	80 3c 28 00          	cmp    BYTE PTR [eax+ebp*1],0x0
1000393f:	74 03                	je     10003944 <ssfn_select+0x70>
10003941:	45                   	inc    ebp
10003942:	eb f3                	jmp    10003937 <ssfn_select+0x63>
10003944:	8d 43 14             	lea    eax,[ebx+0x14]
10003947:	89 df                	mov    edi,ebx
10003949:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000394d:	8b 87 a4 f5 00 00    	mov    eax,DWORD PTR [edi+0xf5a4]
10003953:	31 d2                	xor    edx,edx
10003955:	89 04 24             	mov    DWORD PTR [esp],eax
10003958:	39 14 24             	cmp    DWORD PTR [esp],edx
1000395b:	7e 33                	jle    10003990 <ssfn_select+0xbc>
1000395d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10003961:	8b 07                	mov    eax,DWORD PTR [edi]
10003963:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
10003966:	50                   	push   eax
10003967:	8d 41 20             	lea    eax,[ecx+0x20]
1000396a:	55                   	push   ebp
1000396b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
1000396f:	50                   	push   eax
10003970:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
10003974:	e8 fc ff ff ff       	call   10003975 <ssfn_select+0xa1>	10003975: R_386_PC32	memcmp
10003979:	83 c4 10             	add    esp,0x10
1000397c:	85 c0                	test   eax,eax
1000397e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10003982:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10003986:	75 05                	jne    1000398d <ssfn_select+0xb9>
10003988:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
1000398b:	eb 34                	jmp    100039c1 <ssfn_select+0xed>
1000398d:	42                   	inc    edx
1000398e:	eb c8                	jmp    10003958 <ssfn_select+0x84>
10003990:	83 c7 04             	add    edi,0x4
10003993:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10003997:	75 b4                	jne    1000394d <ssfn_select+0x79>
10003999:	eb 65                	jmp    10003a00 <ssfn_select+0x12c>
1000399b:	81 7c 24 34 ff 00 00 00 	cmp    DWORD PTR [esp+0x34],0xff
100039a3:	74 15                	je     100039ba <ssfn_select+0xe6>
100039a5:	83 7c 24 34 04       	cmp    DWORD PTR [esp+0x34],0x4
100039aa:	7f 54                	jg     10003a00 <ssfn_select+0x12c>
100039ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100039b0:	83 bc 83 a4 f5 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0xf5a4],0x0
100039b8:	74 46                	je     10003a00 <ssfn_select+0x12c>
100039ba:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
100039c1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100039c5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
100039cc:	89 83 b8 f5 00 00    	mov    DWORD PTR [ebx+0xf5b8],eax
100039d2:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
100039dc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100039e0:	89 83 bc f5 00 00    	mov    DWORD PTR [ebx+0xf5bc],eax
100039e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100039ea:	89 83 c0 f5 00 00    	mov    DWORD PTR [ebx+0xf5c0],eax
100039f0:	eb 13                	jmp    10003a05 <ssfn_select+0x131>
100039f2:	be fb ff ff ff       	mov    esi,0xfffffffb
100039f7:	eb 0c                	jmp    10003a05 <ssfn_select+0x131>
100039f9:	be fa ff ff ff       	mov    esi,0xfffffffa
100039fe:	eb 05                	jmp    10003a05 <ssfn_select+0x131>
10003a00:	be fd ff ff ff       	mov    esi,0xfffffffd
10003a05:	83 c4 1c             	add    esp,0x1c
10003a08:	89 f0                	mov    eax,esi
10003a0a:	5b                   	pop    ebx
10003a0b:	5e                   	pop    esi
10003a0c:	5f                   	pop    edi
10003a0d:	5d                   	pop    ebp
10003a0e:	c3                   	ret    

10003a0f <ssfn_render>:
10003a0f:	55                   	push   ebp
10003a10:	57                   	push   edi
10003a11:	56                   	push   esi
10003a12:	53                   	push   ebx
10003a13:	81 ec ec 05 01 00    	sub    esp,0x105ec
10003a19:	83 bc 24 08 06 01 00 00 	cmp    DWORD PTR [esp+0x10608],0x0
10003a21:	8b ac 24 00 06 01 00 	mov    ebp,DWORD PTR [esp+0x10600]
10003a28:	0f 94 c2             	sete   dl
10003a2b:	c7 84 24 d8 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xd8],0x0
10003a36:	85 ed                	test   ebp,ebp
10003a38:	0f 94 c0             	sete   al
10003a3b:	08 c2                	or     dl,al
10003a3d:	74 0a                	je     10003a49 <ssfn_render+0x3a>
10003a3f:	b8 fc ff ff ff       	mov    eax,0xfffffffc
10003a44:	e9 c8 1d 00 00       	jmp    10005811 <ssfn_render+0x1e02>
10003a49:	8b 84 24 08 06 01 00 	mov    eax,DWORD PTR [esp+0x10608]
10003a50:	8a 10                	mov    dl,BYTE PTR [eax]
10003a52:	31 c0                	xor    eax,eax
10003a54:	84 d2                	test   dl,dl
10003a56:	0f 84 b5 1d 00 00    	je     10005811 <ssfn_render+0x1e02>
10003a5c:	80 fa 0d             	cmp    dl,0xd
10003a5f:	75 0f                	jne    10003a70 <ssfn_render+0x61>
10003a61:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10003a68:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
10003a6e:	eb 32                	jmp    10003aa2 <ssfn_render+0x93>
10003a70:	80 fa 0a             	cmp    dl,0xa
10003a73:	75 37                	jne    10003aac <ssfn_render+0x9d>
10003a75:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10003a7c:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
10003a82:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
10003a85:	8b 85 c4 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c4]
10003a8b:	85 c0                	test   eax,eax
10003a8d:	75 06                	jne    10003a95 <ssfn_render+0x86>
10003a8f:	8b 85 c0 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c0]
10003a95:	01 d0                	add    eax,edx
10003a97:	8b bc 24 04 06 01 00 	mov    edi,DWORD PTR [esp+0x10604]
10003a9e:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
10003aa2:	b8 01 00 00 00       	mov    eax,0x1
10003aa7:	e9 65 1d 00 00       	jmp    10005811 <ssfn_render+0x1e02>
10003aac:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10003aaf:	85 c0                	test   eax,eax
10003ab1:	74 43                	je     10003af6 <ssfn_render+0xe7>
10003ab3:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
10003ab6:	8d b4 24 d0 00 00 00 	lea    esi,[esp+0xd0]
10003abd:	56                   	push   esi
10003abe:	8d 94 24 dc 00 00 00 	lea    edx,[esp+0xdc]
10003ac5:	52                   	push   edx
10003ac6:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
10003acd:	50                   	push   eax
10003ace:	e8 b5 ed ff ff       	call   10002888 <_ssfn_c>
10003ad3:	83 c4 10             	add    esp,0x10
10003ad6:	89 c1                	mov    ecx,eax
10003ad8:	85 c0                	test   eax,eax
10003ada:	0f 85 71 02 00 00    	jne    10003d51 <ssfn_render+0x342>
10003ae0:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10003ae6:	25 00 01 00 00       	and    eax,0x100
10003aeb:	0f 84 fe 01 00 00    	je     10003cef <ssfn_render+0x2e0>
10003af1:	e9 1e 02 00 00       	jmp    10003d14 <ssfn_render+0x305>
10003af6:	8b b5 b8 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf5b8]
10003afc:	c7 45 18 00 00 00 00 	mov    DWORD PTR [ebp+0x18],0x0
10003b03:	81 fe fd 00 00 00    	cmp    esi,0xfd
10003b09:	7f 07                	jg     10003b12 <ssfn_render+0x103>
10003b0b:	89 f3                	mov    ebx,esi
10003b0d:	89 34 24             	mov    DWORD PTR [esp],esi
10003b10:	eb 37                	jmp    10003b49 <ssfn_render+0x13a>
10003b12:	31 db                	xor    ebx,ebx
10003b14:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
10003b1b:	eb 2c                	jmp    10003b49 <ssfn_render+0x13a>
10003b1d:	85 c9                	test   ecx,ecx
10003b1f:	0f 84 65 01 00 00    	je     10003c8a <ssfn_render+0x27b>
10003b25:	43                   	inc    ebx
10003b26:	3b 1c 24             	cmp    ebx,DWORD PTR [esp]
10003b29:	7e 22                	jle    10003b4d <ssfn_render+0x13e>
10003b2b:	85 c9                	test   ecx,ecx
10003b2d:	0f 85 1e 02 00 00    	jne    10003d51 <ssfn_render+0x342>
10003b33:	31 db                	xor    ebx,ebx
10003b35:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
10003b3c:	81 fe ff 00 00 00    	cmp    esi,0xff
10003b42:	74 9c                	je     10003ae0 <ssfn_render+0xd1>
10003b44:	be ff 00 00 00       	mov    esi,0xff
10003b49:	31 c9                	xor    ecx,ecx
10003b4b:	eb d9                	jmp    10003b26 <ssfn_render+0x117>
10003b4d:	8b 7c 9d 00          	mov    edi,DWORD PTR [ebp+ebx*4+0x0]
10003b51:	f6 85 bc f5 00 00 03 	test   BYTE PTR [ebp+0xf5bc],0x3
10003b58:	74 c3                	je     10003b1d <ssfn_render+0x10e>
10003b5a:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10003b65:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003b6c:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10003b73:	7e 53                	jle    10003bc8 <ssfn_render+0x1b9>
10003b75:	8b 14 87             	mov    edx,DWORD PTR [edi+eax*4]
10003b78:	0f b6 42 08          	movzx  eax,BYTE PTR [edx+0x8]
10003b7c:	c1 f8 04             	sar    eax,0x4
10003b7f:	33 85 bc f5 00 00    	xor    eax,DWORD PTR [ebp+0xf5bc]
10003b85:	a8 03                	test   al,0x3
10003b87:	75 36                	jne    10003bbf <ssfn_render+0x1b0>
10003b89:	0f b6 42 0b          	movzx  eax,BYTE PTR [edx+0xb]
10003b8d:	3b 85 c0 f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf5c0]
10003b93:	75 2a                	jne    10003bbf <ssfn_render+0x1b0>
10003b95:	8d 84 24 d0 00 00 00 	lea    eax,[esp+0xd0]
10003b9c:	50                   	push   eax
10003b9d:	8d 84 24 dc 00 00 00 	lea    eax,[esp+0xdc]
10003ba4:	50                   	push   eax
10003ba5:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
10003bac:	52                   	push   edx
10003bad:	e8 d6 ec ff ff       	call   10002888 <_ssfn_c>
10003bb2:	83 c4 10             	add    esp,0x10
10003bb5:	89 c1                	mov    ecx,eax
10003bb7:	85 c0                	test   eax,eax
10003bb9:	0f 85 0e 01 00 00    	jne    10003ccd <ssfn_render+0x2be>
10003bbf:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
10003bc6:	eb 9d                	jmp    10003b65 <ssfn_render+0x156>
10003bc8:	85 c9                	test   ecx,ecx
10003bca:	0f 85 55 ff ff ff    	jne    10003b25 <ssfn_render+0x116>
10003bd0:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10003bdb:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003be2:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10003be9:	0f 8e a3 1b 00 00    	jle    10005792 <ssfn_render+0x1d83>
10003bef:	8b 04 87             	mov    eax,DWORD PTR [edi+eax*4]
10003bf2:	0f b6 50 0b          	movzx  edx,BYTE PTR [eax+0xb]
10003bf6:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
10003bfc:	74 09                	je     10003c07 <ssfn_render+0x1f8>
10003bfe:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
10003c05:	eb d4                	jmp    10003bdb <ssfn_render+0x1cc>
10003c07:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
10003c0e:	51                   	push   ecx
10003c0f:	8d 94 24 dc 00 00 00 	lea    edx,[esp+0xdc]
10003c16:	52                   	push   edx
10003c17:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
10003c1e:	50                   	push   eax
10003c1f:	e8 64 ec ff ff       	call   10002888 <_ssfn_c>
10003c24:	83 c4 10             	add    esp,0x10
10003c27:	89 c1                	mov    ecx,eax
10003c29:	85 c0                	test   eax,eax
10003c2b:	74 d1                	je     10003bfe <ssfn_render+0x1ef>
10003c2d:	e9 9b 00 00 00       	jmp    10003ccd <ssfn_render+0x2be>
10003c32:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
10003c35:	0f b6 41 08          	movzx  eax,BYTE PTR [ecx+0x8]
10003c39:	c1 f8 04             	sar    eax,0x4
10003c3c:	31 d0                	xor    eax,edx
10003c3e:	a8 03                	test   al,0x3
10003c40:	0f 84 5c 1b 00 00    	je     100057a2 <ssfn_render+0x1d93>
10003c46:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
10003c4d:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003c54:	8b 95 bc f5 00 00    	mov    edx,DWORD PTR [ebp+0xf5bc]
10003c5a:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10003c61:	7f cf                	jg     10003c32 <ssfn_render+0x223>
10003c63:	83 e2 03             	and    edx,0x3
10003c66:	83 fa 03             	cmp    edx,0x3
10003c69:	75 1f                	jne    10003c8a <ssfn_render+0x27b>
10003c6b:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10003c76:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003c7d:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10003c84:	0f 8f 47 1b 00 00    	jg     100057d1 <ssfn_render+0x1dc2>
10003c8a:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10003c95:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003c9c:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10003ca3:	7e 43                	jle    10003ce8 <ssfn_render+0x2d9>
10003ca5:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
10003cac:	51                   	push   ecx
10003cad:	8d 94 24 dc 00 00 00 	lea    edx,[esp+0xdc]
10003cb4:	52                   	push   edx
10003cb5:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
10003cbc:	ff 34 87             	push   DWORD PTR [edi+eax*4]
10003cbf:	e8 c4 eb ff ff       	call   10002888 <_ssfn_c>
10003cc4:	83 c4 10             	add    esp,0x10
10003cc7:	89 c1                	mov    ecx,eax
10003cc9:	85 c0                	test   eax,eax
10003ccb:	74 12                	je     10003cdf <ssfn_render+0x2d0>
10003ccd:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003cd4:	8b 04 87             	mov    eax,DWORD PTR [edi+eax*4]
10003cd7:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
10003cda:	e9 46 fe ff ff       	jmp    10003b25 <ssfn_render+0x116>
10003cdf:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
10003ce6:	eb ad                	jmp    10003c95 <ssfn_render+0x286>
10003ce8:	31 c9                	xor    ecx,ecx
10003cea:	e9 36 fe ff ff       	jmp    10003b25 <ssfn_render+0x116>
10003cef:	8b 9d b8 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5b8]
10003cf5:	c7 84 24 d0 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xd0],0x0
10003d00:	81 fb fd 00 00 00    	cmp    ebx,0xfd
10003d06:	7f 16                	jg     10003d1e <ssfn_render+0x30f>
10003d08:	89 d8                	mov    eax,ebx
10003d0a:	31 c9                	xor    ecx,ecx
10003d0c:	39 d8                	cmp    eax,ebx
10003d0e:	7e 15                	jle    10003d25 <ssfn_render+0x316>
10003d10:	85 c9                	test   ecx,ecx
10003d12:	75 3d                	jne    10003d51 <ssfn_render+0x342>
10003d14:	b8 f9 ff ff ff       	mov    eax,0xfffffff9
10003d19:	e9 f3 1a 00 00       	jmp    10005811 <ssfn_render+0x1e02>
10003d1e:	bb 04 00 00 00       	mov    ebx,0x4
10003d23:	eb e5                	jmp    10003d0a <ssfn_render+0x2fb>
10003d25:	85 c9                	test   ecx,ecx
10003d27:	75 28                	jne    10003d51 <ssfn_render+0x342>
10003d29:	83 bc 85 a4 f5 00 00 00 	cmp    DWORD PTR [ebp+eax*4+0xf5a4],0x0
10003d31:	74 1b                	je     10003d4e <ssfn_render+0x33f>
10003d33:	8b 54 85 00          	mov    edx,DWORD PTR [ebp+eax*4+0x0]
10003d37:	8b 12                	mov    edx,DWORD PTR [edx]
10003d39:	85 d2                	test   edx,edx
10003d3b:	74 11                	je     10003d4e <ssfn_render+0x33f>
10003d3d:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
10003d40:	80 3c 32 00          	cmp    BYTE PTR [edx+esi*1],0x0
10003d44:	78 08                	js     10003d4e <ssfn_render+0x33f>
10003d46:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
10003d49:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
10003d4c:	01 d1                	add    ecx,edx
10003d4e:	40                   	inc    eax
10003d4f:	eb bb                	jmp    10003d0c <ssfn_render+0x2fd>
10003d51:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
10003d54:	b8 fd ff ff ff       	mov    eax,0xfffffffd
10003d59:	85 f6                	test   esi,esi
10003d5b:	0f 84 b0 1a 00 00    	je     10005811 <ssfn_render+0x1e02>
10003d61:	80 7e 0b 00          	cmp    BYTE PTR [esi+0xb],0x0
10003d65:	0f 84 a6 1a 00 00    	je     10005811 <ssfn_render+0x1e02>
10003d6b:	8b 9d c0 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5c0]
10003d71:	85 db                	test   ebx,ebx
10003d73:	0f 84 98 1a 00 00    	je     10005811 <ssfn_render+0x1e02>
10003d79:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
10003d80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003d84:	c1 e8 10             	shr    eax,0x10
10003d87:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003d8b:	83 f8 10             	cmp    eax,0x10
10003d8e:	0f 87 ab fc ff ff    	ja     10003a3f <ssfn_render+0x30>
10003d94:	8d 41 06             	lea    eax,[ecx+0x6]
10003d97:	89 8d 74 f5 00 00    	mov    DWORD PTR [ebp+0xf574],ecx
10003d9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003da1:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
10003da5:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10003dab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003daf:	0f ba e0 0c          	bt     eax,0xc
10003db3:	72 22                	jb     10003dd7 <ssfn_render+0x3c8>
10003db5:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10003db8:	83 e0 0f             	and    eax,0xf
10003dbb:	3c 03                	cmp    al,0x3
10003dbd:	74 18                	je     10003dd7 <ssfn_render+0x3c8>
10003dbf:	8a 56 0c             	mov    dl,BYTE PTR [esi+0xc]
10003dc2:	84 d2                	test   dl,dl
10003dc4:	74 11                	je     10003dd7 <ssfn_render+0x3c8>
10003dc6:	0f b6 fa             	movzx  edi,dl
10003dc9:	0f b6 46 0b          	movzx  eax,BYTE PTR [esi+0xb]
10003dcd:	0f af c3             	imul   eax,ebx
10003dd0:	99                   	cdq    
10003dd1:	f7 ff                	idiv   edi
10003dd3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003dd7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003ddb:	25 00 02 00 00       	and    eax,0x200
10003de0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10003de4:	75 34                	jne    10003e1a <ssfn_render+0x40b>
10003de6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003dea:	8b 84 85 28 f5 00 00 	mov    eax,DWORD PTR [ebp+eax*4+0xf528]
10003df1:	85 c0                	test   eax,eax
10003df3:	74 25                	je     10003e1a <ssfn_render+0x40b>
10003df5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10003df9:	0f b6 d6             	movzx  edx,dh
10003dfc:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10003dff:	85 c0                	test   eax,eax
10003e01:	74 17                	je     10003e1a <ssfn_render+0x40b>
10003e03:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
10003e08:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10003e0b:	85 c0                	test   eax,eax
10003e0d:	74 0b                	je     10003e1a <ssfn_render+0x40b>
10003e0f:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10003e15:	e9 cf 0c 00 00       	jmp    10004ae9 <ssfn_render+0x10da>
10003e1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003e1e:	0f b6 7e 0b          	movzx  edi,BYTE PTR [esi+0xb]
10003e22:	89 04 24             	mov    DWORD PTR [esp],eax
10003e25:	f6 44 24 08 40       	test   BYTE PTR [esp+0x8],0x40
10003e2a:	75 10                	jne    10003e3c <ssfn_render+0x42d>
10003e2c:	89 3c 24             	mov    DWORD PTR [esp],edi
10003e2f:	39 fb                	cmp    ebx,edi
10003e31:	7e 09                	jle    10003e3c <ssfn_render+0x42d>
10003e33:	83 c3 04             	add    ebx,0x4
10003e36:	83 e3 fc             	and    ebx,0xfffffffc
10003e39:	89 1c 24             	mov    DWORD PTR [esp],ebx
10003e3c:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
10003e41:	f6 44 24 08 02       	test   BYTE PTR [esp+0x8],0x2
10003e46:	74 10                	je     10003e58 <ssfn_render+0x449>
10003e48:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10003e4b:	c0 e8 05             	shr    al,0x5
10003e4e:	83 f0 01             	xor    eax,0x1
10003e51:	83 e0 01             	and    eax,0x1
10003e54:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
10003e58:	c6 44 24 40 00       	mov    BYTE PTR [esp+0x40],0x0
10003e5d:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
10003e62:	74 10                	je     10003e74 <ssfn_render+0x465>
10003e64:	f6 46 08 10          	test   BYTE PTR [esi+0x8],0x10
10003e68:	75 0a                	jne    10003e74 <ssfn_render+0x465>
10003e6a:	8d 47 40             	lea    eax,[edi+0x40]
10003e6d:	c1 f8 06             	sar    eax,0x6
10003e70:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
10003e74:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
10003e78:	0f af 04 24          	imul   eax,DWORD PTR [esp]
10003e7c:	8d 44 07 ff          	lea    eax,[edi+eax*1-0x1]
10003e80:	99                   	cdq    
10003e81:	f7 ff                	idiv   edi
10003e83:	89 c1                	mov    ecx,eax
10003e85:	31 c0                	xor    eax,eax
10003e87:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
10003e8c:	74 0b                	je     10003e99 <ssfn_render+0x48a>
10003e8e:	8b 04 24             	mov    eax,DWORD PTR [esp]
10003e91:	bb 04 00 00 00       	mov    ebx,0x4
10003e96:	99                   	cdq    
10003e97:	f7 fb                	idiv   ebx
10003e99:	0f b6 7c 24 40       	movzx  edi,BYTE PTR [esp+0x40]
10003e9e:	01 c8                	add    eax,ecx
10003ea0:	8b 34 24             	mov    esi,DWORD PTR [esp]
10003ea3:	01 f8                	add    eax,edi
10003ea5:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
10003ea9:	0f af f0             	imul   esi,eax
10003eac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003eb0:	81 fe ff f4 00 00    	cmp    esi,0xf4ff
10003eb6:	b8 fa ff ff ff       	mov    eax,0xfffffffa
10003ebb:	0f 8f 50 19 00 00    	jg     10005811 <ssfn_render+0x1e02>
10003ec1:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
10003ec6:	0f 85 e4 00 00 00    	jne    10003fb0 <ssfn_render+0x5a1>
10003ecc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003ed0:	8d 5c 85 00          	lea    ebx,[ebp+eax*4+0x0]
10003ed4:	83 bb 28 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf528],0x0
10003edb:	75 2f                	jne    10003f0c <ssfn_render+0x4fd>
10003edd:	83 ec 0c             	sub    esp,0xc
10003ee0:	68 00 04 00 00       	push   0x400
10003ee5:	e8 fc ff ff ff       	call   10003ee6 <ssfn_render+0x4d7>	10003ee6: R_386_PC32	malloc
10003eea:	83 c4 10             	add    esp,0x10
10003eed:	89 83 28 f5 00 00    	mov    DWORD PTR [ebx+0xf528],eax
10003ef3:	85 c0                	test   eax,eax
10003ef5:	75 08                	jne    10003eff <ssfn_render+0x4f0>
10003ef7:	83 c8 ff             	or     eax,0xffffffff
10003efa:	e9 12 19 00 00       	jmp    10005811 <ssfn_render+0x1e02>
10003eff:	89 c7                	mov    edi,eax
10003f01:	b9 00 01 00 00       	mov    ecx,0x100
10003f06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10003f0a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003f0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003f10:	0f b6 fc             	movzx  edi,ah
10003f13:	8b 83 28 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf528]
10003f19:	8d 14 b8             	lea    edx,[eax+edi*4]
10003f1c:	83 3a 00             	cmp    DWORD PTR [edx],0x0
10003f1f:	75 32                	jne    10003f53 <ssfn_render+0x544>
10003f21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10003f25:	83 ec 0c             	sub    esp,0xc
10003f28:	68 00 04 00 00       	push   0x400
10003f2d:	e8 fc ff ff ff       	call   10003f2e <ssfn_render+0x51f>	10003f2e: R_386_PC32	malloc
10003f32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10003f36:	83 c4 10             	add    esp,0x10
10003f39:	89 02                	mov    DWORD PTR [edx],eax
10003f3b:	8b 83 28 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf528]
10003f41:	8b 14 b8             	mov    edx,DWORD PTR [eax+edi*4]
10003f44:	85 d2                	test   edx,edx
10003f46:	74 af                	je     10003ef7 <ssfn_render+0x4e8>
10003f48:	b9 00 01 00 00       	mov    ecx,0x100
10003f4d:	31 c0                	xor    eax,eax
10003f4f:	89 d7                	mov    edi,edx
10003f51:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003f53:	8b 9c 24 d0 00 00 00 	mov    ebx,DWORD PTR [esp+0xd0]
10003f5a:	83 ec 0c             	sub    esp,0xc
10003f5d:	0f b6 ff             	movzx  edi,bh
10003f60:	89 d8                	mov    eax,ebx
10003f62:	0f b6 db             	movzx  ebx,bl
10003f65:	c1 e8 10             	shr    eax,0x10
10003f68:	8d 54 85 00          	lea    edx,[ebp+eax*4+0x0]
10003f6c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
10003f70:	8b 82 28 f5 00 00    	mov    eax,DWORD PTR [edx+0xf528]
10003f76:	8b 04 b8             	mov    eax,DWORD PTR [eax+edi*4]
10003f79:	8d 0c 98             	lea    ecx,[eax+ebx*4]
10003f7c:	8d 46 08             	lea    eax,[esi+0x8]
10003f7f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
10003f83:	50                   	push   eax
10003f84:	e8 fc ff ff ff       	call   10003f85 <ssfn_render+0x576>	10003f85: R_386_PC32	malloc
10003f89:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10003f8d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10003f91:	89 01                	mov    DWORD PTR [ecx],eax
10003f93:	83 c4 10             	add    esp,0x10
10003f96:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10003f9c:	8b 82 28 f5 00 00    	mov    eax,DWORD PTR [edx+0xf528]
10003fa2:	8b 04 b8             	mov    eax,DWORD PTR [eax+edi*4]
10003fa5:	83 3c 98 00          	cmp    DWORD PTR [eax+ebx*4],0x0
10003fa9:	75 0e                	jne    10003fb9 <ssfn_render+0x5aa>
10003fab:	e9 47 ff ff ff       	jmp    10003ef7 <ssfn_render+0x4e8>
10003fb0:	8d 45 1c             	lea    eax,[ebp+0x1c]
10003fb3:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10003fb9:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10003fbf:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10003fc3:	74 29                	je     10003fee <ssfn_render+0x5df>
10003fc5:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
10003fca:	74 22                	je     10003fee <ssfn_render+0x5df>
10003fcc:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10003fcf:	bb 04 00 00 00       	mov    ebx,0x4
10003fd4:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10003fd8:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
10003fdc:	89 cf                	mov    edi,ecx
10003fde:	29 c7                	sub    edi,eax
10003fe0:	8b 04 24             	mov    eax,DWORD PTR [esp]
10003fe3:	0f af c7             	imul   eax,edi
10003fe6:	99                   	cdq    
10003fe7:	f7 fb                	idiv   ebx
10003fe9:	99                   	cdq    
10003fea:	f7 f9                	idiv   ecx
10003fec:	eb 02                	jmp    10003ff0 <ssfn_render+0x5e1>
10003fee:	31 c0                	xor    eax,eax
10003ff0:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10003ff6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10003ffa:	8a 1c 24             	mov    bl,BYTE PTR [esp]
10003ffd:	66 89 3a             	mov    WORD PTR [edx],di
10004000:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
10004008:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000400e:	c6 44 24 0c fe       	mov    BYTE PTR [esp+0xc],0xfe
10004013:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
10004016:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
1000401c:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10004022:	8a 59 04             	mov    bl,BYTE PTR [ecx+0x4]
10004025:	01 c3                	add    ebx,eax
10004027:	88 5a 04             	mov    BYTE PTR [edx+0x4],bl
1000402a:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10004030:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10004036:	8a 49 05             	mov    cl,BYTE PTR [ecx+0x5]
10004039:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
1000403c:	8b 8d 24 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf524]
10004042:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
10004048:	8a 12                	mov    dl,BYTE PTR [edx]
1000404a:	83 e2 3f             	and    edx,0x3f
1000404d:	01 d0                	add    eax,edx
1000404f:	88 41 03             	mov    BYTE PTR [ecx+0x3],al
10004052:	89 f1                	mov    ecx,esi
10004054:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000405a:	8d 50 08             	lea    edx,[eax+0x8]
1000405d:	b0 ff                	mov    al,0xff
1000405f:	89 d7                	mov    edi,edx
10004061:	f3 aa                	rep stos BYTE PTR es:[edi],al
10004063:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004069:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
1000406d:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004073:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
10004077:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000407a:	c1 e0 04             	shl    eax,0x4
1000407d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10004081:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004085:	c1 e0 04             	shl    eax,0x4
10004088:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000408c:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
10004092:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
10004096:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
1000409a:	0f 8e 17 0a 00 00    	jle    10004ab7 <ssfn_render+0x10a8>
100040a0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
100040a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100040a8:	8a 4f 01             	mov    cl,BYTE PTR [edi+0x1]
100040ab:	0f b6 00             	movzx  eax,BYTE PTR [eax]
100040ae:	8a 12                	mov    dl,BYTE PTR [edx]
100040b0:	0f b6 5f 02          	movzx  ebx,BYTE PTR [edi+0x2]
100040b4:	83 e2 40             	and    edx,0x40
100040b7:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
100040bb:	88 c2                	mov    dl,al
100040bd:	21 ca                	and    edx,ecx
100040bf:	fe c2                	inc    dl
100040c1:	75 14                	jne    100040d7 <ssfn_render+0x6c8>
100040c3:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
100040c8:	19 c0                	sbb    eax,eax
100040ca:	8d 44 07 06          	lea    eax,[edi+eax*1+0x6]
100040ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100040d2:	e9 d3 09 00 00       	jmp    10004aaa <ssfn_render+0x109b>
100040d7:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
100040db:	8b 7d 18             	mov    edi,DWORD PTR [ebp+0x18]
100040de:	c1 e0 04             	shl    eax,0x4
100040e1:	0f b6 77 0b          	movzx  esi,BYTE PTR [edi+0xb]
100040e5:	0f af 04 24          	imul   eax,DWORD PTR [esp]
100040e9:	99                   	cdq    
100040ea:	f7 fe                	idiv   esi
100040ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
100040f0:	0f b6 c1             	movzx  eax,cl
100040f3:	c1 e0 04             	shl    eax,0x4
100040f6:	0f af 04 24          	imul   eax,DWORD PTR [esp]
100040fa:	99                   	cdq    
100040fb:	f7 fe                	idiv   esi
100040fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004105:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
10004109:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
1000410d:	c1 e2 10             	shl    edx,0x10
10004110:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
10004115:	74 0e                	je     10004125 <ssfn_render+0x716>
10004117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000411b:	83 44 24 10 06       	add    DWORD PTR [esp+0x10],0x6
10004120:	8b 58 02             	mov    ebx,DWORD PTR [eax+0x2]
10004123:	eb 0c                	jmp    10004131 <ssfn_render+0x722>
10004125:	c1 e0 08             	shl    eax,0x8
10004128:	83 44 24 10 05       	add    DWORD PTR [esp+0x10],0x5
1000412d:	09 d0                	or     eax,edx
1000412f:	09 c3                	or     ebx,eax
10004131:	8d 0c 1f             	lea    ecx,[edi+ebx*1]
10004134:	8a 01                	mov    al,BYTE PTR [ecx]
10004136:	84 c0                	test   al,al
10004138:	0f 88 dc 04 00 00    	js     1000461a <ssfn_render+0xc0b>
1000413e:	89 c7                	mov    edi,eax
10004140:	83 e7 3f             	and    edi,0x3f
10004143:	a8 40                	test   al,0x40
10004145:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
10004149:	74 10                	je     1000415b <ssfn_render+0x74c>
1000414b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
1000414f:	89 f8                	mov    eax,edi
10004151:	41                   	inc    ecx
10004152:	c1 e0 08             	shl    eax,0x8
10004155:	09 c2                	or     edx,eax
10004157:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
1000415b:	8d 41 01             	lea    eax,[ecx+0x1]
1000415e:	c7 85 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf580],0x0
10004168:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000416c:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10004177:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
1000417b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
1000417f:	83 c0 04             	add    eax,0x4
10004182:	c1 f8 02             	sar    eax,0x2
10004185:	01 c7                	add    edi,eax
10004187:	8b 8c 24 dc 00 00 00 	mov    ecx,DWORD PTR [esp+0xdc]
1000418e:	3b 4c 24 28          	cmp    ecx,DWORD PTR [esp+0x28]
10004192:	0f 8f cb 01 00 00    	jg     10004363 <ssfn_render+0x954>
10004198:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000419b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
1000419f:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
100041a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100041a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100041ab:	0f b6 07             	movzx  eax,BYTE PTR [edi]
100041ae:	c1 e0 04             	shl    eax,0x4
100041b1:	0f af 04 24          	imul   eax,DWORD PTR [esp]
100041b5:	99                   	cdq    
100041b6:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
100041ba:	01 c6                	add    esi,eax
100041bc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
100041c0:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
100041c4:	c1 e0 04             	shl    eax,0x4
100041c7:	0f af 04 24          	imul   eax,DWORD PTR [esp]
100041cb:	99                   	cdq    
100041cc:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
100041d0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
100041d4:	01 c3                	add    ebx,eax
100041d6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100041da:	89 c8                	mov    eax,ecx
100041dc:	01 c9                	add    ecx,ecx
100041de:	c1 f8 02             	sar    eax,0x2
100041e1:	83 e1 06             	and    ecx,0x6
100041e4:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
100041e8:	d3 f8                	sar    eax,cl
100041ea:	83 e0 03             	and    eax,0x3
100041ed:	89 c1                	mov    ecx,eax
100041ef:	83 f8 02             	cmp    eax,0x2
100041f2:	74 4a                	je     1000423e <ssfn_render+0x82f>
100041f4:	83 f8 03             	cmp    eax,0x3
100041f7:	0f 84 de 00 00 00    	je     100042db <ssfn_render+0x8cc>
100041fd:	49                   	dec    ecx
100041fe:	74 20                	je     10004220 <ssfn_render+0x811>
10004200:	89 b5 9c f5 00 00    	mov    DWORD PTR [ebp+0xf59c],esi
10004206:	89 b5 94 f5 00 00    	mov    DWORD PTR [ebp+0xf594],esi
1000420c:	89 9d a0 f5 00 00    	mov    DWORD PTR [ebp+0xf5a0],ebx
10004212:	89 9d 98 f5 00 00    	mov    DWORD PTR [ebp+0xf598],ebx
10004218:	83 c7 02             	add    edi,0x2
1000421b:	e9 37 01 00 00       	jmp    10004357 <ssfn_render+0x948>
10004220:	83 ec 0c             	sub    esp,0xc
10004223:	83 c7 02             	add    edi,0x2
10004226:	53                   	push   ebx
10004227:	56                   	push   esi
10004228:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
1000422c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
10004230:	55                   	push   ebp
10004231:	e8 f9 e7 ff ff       	call   10002a2f <_ssfn_l>
10004236:	83 c4 20             	add    esp,0x20
10004239:	e9 19 01 00 00       	jmp    10004357 <ssfn_render+0x948>
1000423e:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
10004242:	83 c7 04             	add    edi,0x4
10004245:	c1 e0 04             	shl    eax,0x4
10004248:	0f af 04 24          	imul   eax,DWORD PTR [esp]
1000424c:	99                   	cdq    
1000424d:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
10004251:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10004255:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10004259:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
1000425d:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10004261:	c1 e0 04             	shl    eax,0x4
10004264:	0f af 04 24          	imul   eax,DWORD PTR [esp]
10004268:	99                   	cdq    
10004269:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
1000426d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10004271:	6a 00                	push   0x0
10004273:	53                   	push   ebx
10004274:	56                   	push   esi
10004275:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10004279:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
1000427d:	99                   	cdq    
1000427e:	f7 f9                	idiv   ecx
10004280:	01 d8                	add    eax,ebx
10004282:	50                   	push   eax
10004283:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10004287:	2b 44 24 5c          	sub    eax,DWORD PTR [esp+0x5c]
1000428b:	99                   	cdq    
1000428c:	f7 f9                	idiv   ecx
1000428e:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10004292:	50                   	push   eax
10004293:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004297:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
1000429b:	2b 85 a0 f5 00 00    	sub    eax,DWORD PTR [ebp+0xf5a0]
100042a1:	99                   	cdq    
100042a2:	f7 f9                	idiv   ecx
100042a4:	03 85 a0 f5 00 00    	add    eax,DWORD PTR [ebp+0xf5a0]
100042aa:	50                   	push   eax
100042ab:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100042af:	2b 85 9c f5 00 00    	sub    eax,DWORD PTR [ebp+0xf59c]
100042b5:	99                   	cdq    
100042b6:	f7 f9                	idiv   ecx
100042b8:	03 85 9c f5 00 00    	add    eax,DWORD PTR [ebp+0xf59c]
100042be:	50                   	push   eax
100042bf:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
100042c5:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
100042cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100042cf:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
100042d3:	55                   	push   ebp
100042d4:	e8 6d e8 ff ff       	call   10002b46 <_ssfn_b>
100042d9:	eb 79                	jmp    10004354 <ssfn_render+0x945>
100042db:	6a 00                	push   0x0
100042dd:	83 c7 06             	add    edi,0x6
100042e0:	53                   	push   ebx
100042e1:	56                   	push   esi
100042e2:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
100042e6:	c1 e0 04             	shl    eax,0x4
100042e9:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100042ee:	99                   	cdq    
100042ef:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
100042f3:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
100042f7:	50                   	push   eax
100042f8:	0f b6 47 fe          	movzx  eax,BYTE PTR [edi-0x2]
100042fc:	c1 e0 04             	shl    eax,0x4
100042ff:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
10004304:	99                   	cdq    
10004305:	f7 7c 24 24          	idiv   DWORD PTR [esp+0x24]
10004309:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
1000430d:	50                   	push   eax
1000430e:	0f b6 47 fd          	movzx  eax,BYTE PTR [edi-0x3]
10004312:	c1 e0 04             	shl    eax,0x4
10004315:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
1000431a:	99                   	cdq    
1000431b:	f7 7c 24 28          	idiv   DWORD PTR [esp+0x28]
1000431f:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10004323:	50                   	push   eax
10004324:	0f b6 47 fc          	movzx  eax,BYTE PTR [edi-0x4]
10004328:	c1 e0 04             	shl    eax,0x4
1000432b:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
10004330:	99                   	cdq    
10004331:	f7 7c 24 2c          	idiv   DWORD PTR [esp+0x2c]
10004335:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
10004339:	50                   	push   eax
1000433a:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10004340:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10004346:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
1000434a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
1000434e:	55                   	push   ebp
1000434f:	e8 f2 e7 ff ff       	call   10002b46 <_ssfn_b>
10004354:	83 c4 30             	add    esp,0x30
10004357:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
1000435e:	e9 24 fe ff ff       	jmp    10004187 <ssfn_render+0x778>
10004363:	8b 85 94 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf594]
10004369:	3b 85 9c f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf59c]
1000436f:	75 0e                	jne    1000437f <ssfn_render+0x970>
10004371:	8b bd a0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5a0]
10004377:	39 bd 98 f5 00 00    	cmp    DWORD PTR [ebp+0xf598],edi
1000437d:	74 2e                	je     100043ad <ssfn_render+0x99e>
1000437f:	8b 9d 80 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf580]
10004385:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
1000438b:	66 89 04 5a          	mov    WORD PTR [edx+ebx*2],ax
1000438f:	8b 95 80 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf580]
10004395:	8b 85 6c f5 00 00    	mov    eax,DWORD PTR [ebp+0xf56c]
1000439b:	8b 9d 98 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf598]
100043a1:	66 89 5c 50 02       	mov    WORD PTR [eax+edx*2+0x2],bx
100043a6:	83 85 80 f5 00 00 02 	add    DWORD PTR [ebp+0xf580],0x2
100043ad:	b3 fe                	mov    bl,0xfe
100043af:	83 bd 80 f5 00 00 04 	cmp    DWORD PTR [ebp+0xf580],0x4
100043b6:	0f 8e ee 06 00 00    	jle    10004aaa <ssfn_render+0x109b>
100043bc:	31 c0                	xor    eax,eax
100043be:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
100043c6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
100043ce:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
100043d6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
100043de:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
100043e6:	8b 34 24             	mov    esi,DWORD PTR [esp]
100043e9:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
100043ed:	0f 8d aa 06 00 00    	jge    10004a9d <ssfn_render+0x108e>
100043f3:	8b 85 80 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf580]
100043f9:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10004401:	83 e8 03             	sub    eax,0x3
10004404:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10004408:	89 f0                	mov    eax,esi
1000440a:	31 f6                	xor    esi,esi
1000440c:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
10004410:	c1 f8 02             	sar    eax,0x2
10004413:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10004417:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
1000441b:	39 4c 24 4c          	cmp    DWORD PTR [esp+0x4c],ecx
1000441f:	0f 8e 05 01 00 00    	jle    1000452a <ssfn_render+0xb1b>
10004425:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
1000442b:	89 c8                	mov    eax,ecx
1000442d:	40                   	inc    eax
1000442e:	01 c0                	add    eax,eax
10004430:	0f b7 3c 02          	movzx  edi,WORD PTR [edx+eax*1]
10004434:	0f b7 5c 02 04       	movzx  ebx,WORD PTR [edx+eax*1+0x4]
10004439:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
1000443d:	7d 0c                	jge    1000444b <ssfn_render+0xa3c>
1000443f:	39 5c 24 28          	cmp    DWORD PTR [esp+0x28],ebx
10004443:	0f 8f d7 00 00 00    	jg     10004520 <ssfn_render+0xb11>
10004449:	eb 0a                	jmp    10004455 <ssfn_render+0xa46>
1000444b:	39 5c 24 28          	cmp    DWORD PTR [esp+0x28],ebx
1000444f:	0f 8e cb 00 00 00    	jle    10004520 <ssfn_render+0xb11>
10004455:	0f b7 4c 02 fe       	movzx  ecx,WORD PTR [edx+eax*1-0x2]
1000445a:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
1000445e:	0f b7 4c 02 02       	movzx  ecx,WORD PTR [edx+eax*1+0x2]
10004463:	89 fa                	mov    edx,edi
10004465:	89 d8                	mov    eax,ebx
10004467:	c1 fa 04             	sar    edx,0x4
1000446a:	c1 f8 04             	sar    eax,0x4
1000446d:	39 c2                	cmp    edx,eax
1000446f:	75 0a                	jne    1000447b <ssfn_render+0xa6c>
10004471:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10004475:	01 cf                	add    edi,ecx
10004477:	d1 ff                	sar    edi,1
10004479:	eb 18                	jmp    10004493 <ssfn_render+0xa84>
1000447b:	29 fb                	sub    ebx,edi
1000447d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004481:	2b 4c 24 44          	sub    ecx,DWORD PTR [esp+0x44]
10004485:	29 f8                	sub    eax,edi
10004487:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
1000448b:	0f af c1             	imul   eax,ecx
1000448e:	99                   	cdq    
1000448f:	f7 fb                	idiv   ebx
10004491:	01 c7                	add    edi,eax
10004493:	c1 ff 04             	sar    edi,0x4
10004496:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
1000449b:	74 04                	je     100044a1 <ssfn_render+0xa92>
1000449d:	03 7c 24 50          	add    edi,DWORD PTR [esp+0x50]
100044a1:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
100044a6:	75 3f                	jne    100044e7 <ssfn_render+0xad8>
100044a8:	80 7c 24 40 00       	cmp    BYTE PTR [esp+0x40],0x0
100044ad:	74 38                	je     100044e7 <ssfn_render+0xad8>
100044af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
100044b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100044b7:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
100044bb:	f7 d8                	neg    eax
100044bd:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
100044c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100044c5:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
100044c9:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100044cf:	01 f8                	add    eax,edi
100044d1:	38 5c 01 08          	cmp    BYTE PTR [ecx+eax*1+0x8],bl
100044d5:	74 10                	je     100044e7 <ssfn_render+0xad8>
100044d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100044db:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100044df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100044e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100044e7:	31 c0                	xor    eax,eax
100044e9:	39 f0                	cmp    eax,esi
100044eb:	75 0b                	jne    100044f8 <ssfn_render+0xae9>
100044ed:	66 89 bc 44 e0 00 00 00 	mov    WORD PTR [esp+eax*2+0xe0],di
100044f5:	46                   	inc    esi
100044f6:	eb 28                	jmp    10004520 <ssfn_render+0xb11>
100044f8:	0f b7 94 44 e0 00 00 00 	movzx  edx,WORD PTR [esp+eax*2+0xe0]
10004500:	39 fa                	cmp    edx,edi
10004502:	7d 03                	jge    10004507 <ssfn_render+0xaf8>
10004504:	40                   	inc    eax
10004505:	eb e2                	jmp    100044e9 <ssfn_render+0xada>
10004507:	89 f2                	mov    edx,esi
10004509:	4a                   	dec    edx
1000450a:	66 8b 8c 54 e0 00 00 00 	mov    cx,WORD PTR [esp+edx*2+0xe0]
10004512:	39 c2                	cmp    edx,eax
10004514:	66 89 8c 54 e2 00 00 00 	mov    WORD PTR [esp+edx*2+0xe2],cx
1000451c:	7f eb                	jg     10004509 <ssfn_render+0xafa>
1000451e:	eb cd                	jmp    100044ed <ssfn_render+0xade>
10004520:	83 44 24 30 02       	add    DWORD PTR [esp+0x30],0x2
10004525:	e9 ed fe ff ff       	jmp    10004417 <ssfn_render+0xa08>
1000452a:	83 fe 01             	cmp    esi,0x1
1000452d:	7e 1f                	jle    1000454e <ssfn_render+0xb3f>
1000452f:	f7 c6 01 00 00 00    	test   esi,0x1
10004535:	74 24                	je     1000455b <ssfn_render+0xb4c>
10004537:	8d 46 ff             	lea    eax,[esi-0x1]
1000453a:	66 8b 94 44 e0 00 00 00 	mov    dx,WORD PTR [esp+eax*2+0xe0]
10004542:	66 89 94 74 dc 00 00 00 	mov    WORD PTR [esp+esi*2+0xdc],dx
1000454a:	89 c6                	mov    esi,eax
1000454c:	eb 0d                	jmp    1000455b <ssfn_render+0xb4c>
1000454e:	85 f6                	test   esi,esi
10004550:	0f 84 ac 00 00 00    	je     10004602 <ssfn_render+0xbf3>
10004556:	be 01 00 00 00       	mov    esi,0x1
1000455b:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004561:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10004565:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
10004569:	03 54 24 24          	add    edx,DWORD PTR [esp+0x24]
1000456d:	39 d1                	cmp    ecx,edx
1000456f:	7d 0b                	jge    1000457c <ssfn_render+0xb6d>
10004571:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
10004575:	03 54 24 24          	add    edx,DWORD PTR [esp+0x24]
10004579:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
1000457c:	31 d2                	xor    edx,edx
1000457e:	8d 46 ff             	lea    eax,[esi-0x1]
10004581:	39 d0                	cmp    eax,edx
10004583:	7e 78                	jle    100045fd <ssfn_render+0xbee>
10004585:	0f b7 84 54 e0 00 00 00 	movzx  eax,WORD PTR [esp+edx*2+0xe0]
1000458d:	0f b7 8c 54 e2 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xe2]
10004595:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
10004599:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
1000459d:	79 02                	jns    100045a1 <ssfn_render+0xb92>
1000459f:	31 c0                	xor    eax,eax
100045a1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
100045a5:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
100045a9:	39 cf                	cmp    edi,ecx
100045ab:	7e 04                	jle    100045b1 <ssfn_render+0xba2>
100045ad:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
100045b1:	85 d2                	test   edx,edx
100045b3:	74 12                	je     100045c7 <ssfn_render+0xbb8>
100045b5:	0f b7 8c 54 de 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xde]
100045bd:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
100045c1:	39 c8                	cmp    eax,ecx
100045c3:	7d 02                	jge    100045c7 <ssfn_render+0xbb8>
100045c5:	89 c8                	mov    eax,ecx
100045c7:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
100045cb:	7d 2b                	jge    100045f8 <ssfn_render+0xbe9>
100045cd:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
100045d1:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
100045d7:	8d 3c 01             	lea    edi,[ecx+eax*1]
100045da:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
100045de:	88 4c 24 30          	mov    BYTE PTR [esp+0x30],cl
100045e2:	38 4c 3b 08          	cmp    BYTE PTR [ebx+edi*1+0x8],cl
100045e6:	75 05                	jne    100045ed <ssfn_render+0xbde>
100045e8:	c6 44 24 30 ff       	mov    BYTE PTR [esp+0x30],0xff
100045ed:	8a 4c 24 30          	mov    cl,BYTE PTR [esp+0x30]
100045f1:	40                   	inc    eax
100045f2:	88 4c 3b 08          	mov    BYTE PTR [ebx+edi*1+0x8],cl
100045f6:	eb cf                	jmp    100045c7 <ssfn_render+0xbb8>
100045f8:	83 c2 02             	add    edx,0x2
100045fb:	eb 81                	jmp    1000457e <ssfn_render+0xb6f>
100045fd:	83 e6 fe             	and    esi,0xfffffffe
10004600:	89 f1                	mov    ecx,esi
10004602:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10004606:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
1000460a:	01 7c 24 3c          	add    DWORD PTR [esp+0x3c],edi
1000460e:	83 44 24 28 10       	add    DWORD PTR [esp+0x28],0x10
10004613:	b0 01                	mov    al,0x1
10004615:	e9 cc fd ff ff       	jmp    100043e6 <ssfn_render+0x9d7>
1000461a:	88 c2                	mov    dl,al
1000461c:	80 e2 60             	and    dl,0x60
1000461f:	0f 85 a4 02 00 00    	jne    100048c9 <ssfn_render+0xeba>
10004625:	83 e0 1f             	and    eax,0x1f
10004628:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000462c:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10004633:	c1 fb 04             	sar    ebx,0x4
10004636:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000463a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
1000463e:	40                   	inc    eax
1000463f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10004643:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004647:	c1 f8 04             	sar    eax,0x4
1000464a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
1000464e:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004651:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10004656:	99                   	cdq    
10004657:	f7 fe                	idiv   esi
10004659:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004660:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10004665:	99                   	cdq    
10004666:	f7 fe                	idiv   esi
10004668:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000466c:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004672:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10004676:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
1000467a:	8d 14 3b             	lea    edx,[ebx+edi*1]
1000467d:	39 d6                	cmp    esi,edx
1000467f:	7d 0a                	jge    1000468b <ssfn_render+0xc7c>
10004681:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10004685:	8d 14 3b             	lea    edx,[ebx+edi*1]
10004688:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
1000468b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000468f:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
10004697:	0f af c3             	imul   eax,ebx
1000469a:	31 f6                	xor    esi,esi
1000469c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100046a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100046a4:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
100046a8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
100046ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
100046af:	29 d8                	sub    eax,ebx
100046b1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
100046b5:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
100046b9:	0f 8d b1 00 00 00    	jge    10004770 <ssfn_render+0xd61>
100046bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100046c3:	99                   	cdq    
100046c4:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
100046c8:	89 c7                	mov    edi,eax
100046ca:	31 c0                	xor    eax,eax
100046cc:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
100046d1:	74 0e                	je     100046e1 <ssfn_render+0xcd2>
100046d3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100046d7:	bb 04 00 00 00       	mov    ebx,0x4
100046dc:	29 f0                	sub    eax,esi
100046de:	99                   	cdq    
100046df:	f7 fb                	idiv   ebx
100046e1:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
100046e5:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
100046f0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100046f4:	0f af 7c 24 28       	imul   edi,DWORD PTR [esp+0x28]
100046f9:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10004700:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10004704:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004708:	39 d8                	cmp    eax,ebx
1000470a:	7d 4e                	jge    1000475a <ssfn_render+0xd4b>
1000470c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004710:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
10004715:	99                   	cdq    
10004716:	f7 fb                	idiv   ebx
10004718:	8d 14 07             	lea    edx,[edi+eax*1]
1000471b:	83 e0 07             	and    eax,0x7
1000471e:	c1 fa 03             	sar    edx,0x3
10004721:	0f b6 54 11 02       	movzx  edx,BYTE PTR [ecx+edx*1+0x2]
10004726:	0f a3 c2             	bt     edx,eax
10004729:	72 0e                	jb     10004739 <ssfn_render+0xd2a>
1000472b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000472f:	43                   	inc    ebx
10004730:	89 9c 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],ebx
10004737:	eb c0                	jmp    100046f9 <ssfn_render+0xcea>
10004739:	31 c0                	xor    eax,eax
1000473b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
1000473f:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10004743:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
10004749:	40                   	inc    eax
1000474a:	03 54 24 50          	add    edx,DWORD PTR [esp+0x50]
1000474e:	88 5c 10 07          	mov    BYTE PTR [eax+edx*1+0x7],bl
10004752:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
10004756:	7d e3                	jge    1000473b <ssfn_render+0xd2c>
10004758:	eb d1                	jmp    1000472b <ssfn_render+0xd1c>
1000475a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
1000475e:	46                   	inc    esi
1000475f:	01 7c 24 4c          	add    DWORD PTR [esp+0x4c],edi
10004763:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10004767:	01 7c 24 3c          	add    DWORD PTR [esp+0x3c],edi
1000476b:	e9 45 ff ff ff       	jmp    100046b5 <ssfn_render+0xca6>
10004770:	b3 fe                	mov    bl,0xfe
10004772:	f7 85 bc f5 00 00 40 20 00 00 	test   DWORD PTR [ebp+0xf5bc],0x2040
1000477c:	0f 85 28 03 00 00    	jne    10004aaa <ssfn_render+0x109b>
10004782:	31 c0                	xor    eax,eax
10004784:	8b 34 24             	mov    esi,DWORD PTR [esp]
10004787:	80 7c 24 0c fd       	cmp    BYTE PTR [esp+0xc],0xfd
1000478c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
10004790:	0f 95 c0             	setne  al
10004793:	8b 94 24 dc 00 00 00 	mov    edx,DWORD PTR [esp+0xdc]
1000479a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000479e:	4f                   	dec    edi
1000479f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100047a3:	81 44 24 18 fc 00 00 00 	add    DWORD PTR [esp+0x18],0xfc
100047ab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
100047af:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
100047b3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
100047b7:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
100047bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100047bf:	31 c0                	xor    eax,eax
100047c1:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
100047c4:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
100047c8:	83 c1 04             	add    ecx,0x4
100047cb:	3b 4c 24 28          	cmp    ecx,DWORD PTR [esp+0x28]
100047cf:	7d 19                	jge    100047ea <ssfn_render+0xddb>
100047d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
100047d5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
100047d9:	46                   	inc    esi
100047da:	4f                   	dec    edi
100047db:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
100047df:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
100047e3:	be 01 00 00 00       	mov    esi,0x1
100047e8:	eb 36                	jmp    10004820 <ssfn_render+0xe11>
100047ea:	84 c0                	test   al,al
100047ec:	0f 84 b6 02 00 00    	je     10004aa8 <ssfn_render+0x1099>
100047f2:	89 94 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],edx
100047f9:	e9 aa 02 00 00       	jmp    10004aa8 <ssfn_render+0x1099>
100047fe:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10004804:	80 7c 02 08 ff       	cmp    BYTE PTR [edx+eax*1+0x8],0xff
10004809:	74 26                	je     10004831 <ssfn_render+0xe22>
1000480b:	41                   	inc    ecx
1000480c:	40                   	inc    eax
1000480d:	89 ca                	mov    edx,ecx
1000480f:	3b 4c 24 3c          	cmp    ecx,DWORD PTR [esp+0x3c]
10004813:	7c e9                	jl     100047fe <ssfn_render+0xdef>
10004815:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10004819:	46                   	inc    esi
1000481a:	01 7c 24 2c          	add    DWORD PTR [esp+0x2c],edi
1000481e:	b0 01                	mov    al,0x1
10004820:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
10004824:	7e 41                	jle    10004867 <ssfn_render+0xe58>
10004826:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000482a:	b9 01 00 00 00       	mov    ecx,0x1
1000482f:	eb dc                	jmp    1000480d <ssfn_render+0xdfe>
10004831:	89 c7                	mov    edi,eax
10004833:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10004837:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
1000483b:	38 5c 3a 08          	cmp    BYTE PTR [edx+edi*1+0x8],bl
1000483f:	74 0c                	je     1000484d <ssfn_render+0xe3e>
10004841:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10004845:	01 d7                	add    edi,edx
10004847:	38 5c 38 08          	cmp    BYTE PTR [eax+edi*1+0x8],bl
1000484b:	75 be                	jne    1000480b <ssfn_render+0xdfc>
1000484d:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10004851:	38 5c 02 07          	cmp    BYTE PTR [edx+eax*1+0x7],bl
10004855:	74 06                	je     1000485d <ssfn_render+0xe4e>
10004857:	38 5c 02 09          	cmp    BYTE PTR [edx+eax*1+0x9],bl
1000485b:	75 ae                	jne    1000480b <ssfn_render+0xdfc>
1000485d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
10004861:	88 5c 02 08          	mov    BYTE PTR [edx+eax*1+0x8],bl
10004865:	eb a4                	jmp    1000480b <ssfn_render+0xdfc>
10004867:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
1000486b:	bb 01 00 00 00       	mov    ebx,0x1
10004870:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10004874:	39 5c 24 24          	cmp    DWORD PTR [esp+0x24],ebx
10004878:	7e 3d                	jle    100048b7 <ssfn_render+0xea8>
1000487a:	b8 01 00 00 00       	mov    eax,0x1
1000487f:	89 c2                	mov    edx,eax
10004881:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
10004885:	7d 23                	jge    100048aa <ssfn_render+0xe9b>
10004887:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
1000488b:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
10004891:	8d 14 07             	lea    edx,[edi+eax*1]
10004894:	0f b6 7c 16 08       	movzx  edi,BYTE PTR [esi+edx*1+0x8]
10004899:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
1000489d:	75 08                	jne    100048a7 <ssfn_render+0xe98>
1000489f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
100048a3:	88 4c 16 08          	mov    BYTE PTR [esi+edx*1+0x8],cl
100048a7:	40                   	inc    eax
100048a8:	eb d5                	jmp    1000487f <ssfn_render+0xe70>
100048aa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
100048ae:	43                   	inc    ebx
100048af:	01 7c 24 2c          	add    DWORD PTR [esp+0x2c],edi
100048b3:	b0 01                	mov    al,0x1
100048b5:	eb bd                	jmp    10004874 <ssfn_render+0xe65>
100048b7:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
100048ba:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
100048be:	01 c9                	add    ecx,ecx
100048c0:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
100048c4:	e9 f8 fe ff ff       	jmp    100047c1 <ssfn_render+0xdb2>
100048c9:	b3 fe                	mov    bl,0xfe
100048cb:	80 fa 20             	cmp    dl,0x20
100048ce:	0f 85 d6 01 00 00    	jne    10004aaa <ssfn_render+0x109b>
100048d4:	89 c3                	mov    ebx,eax
100048d6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
100048da:	c1 e3 08             	shl    ebx,0x8
100048dd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
100048e1:	81 e3 00 1f 00 00    	and    ebx,0x1f00
100048e7:	c1 ff 04             	sar    edi,0x4
100048ea:	09 c3                	or     ebx,eax
100048ec:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
100048f0:	43                   	inc    ebx
100048f1:	40                   	inc    eax
100048f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
100048f6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
100048fa:	40                   	inc    eax
100048fb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100048ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004903:	c1 f8 04             	sar    eax,0x4
10004906:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000490a:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000490d:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10004912:	99                   	cdq    
10004913:	f7 fe                	idiv   esi
10004915:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004919:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000491c:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10004921:	99                   	cdq    
10004922:	f7 fe                	idiv   esi
10004924:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10004928:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000492e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10004932:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10004936:	01 fa                	add    edx,edi
10004938:	39 d6                	cmp    esi,edx
1000493a:	7d 0a                	jge    10004946 <ssfn_render+0xf37>
1000493c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10004940:	8d 14 37             	lea    edx,[edi+esi*1]
10004943:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10004946:	83 c1 04             	add    ecx,0x4
10004949:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10004954:	8d 04 19             	lea    eax,[ecx+ebx*1]
10004957:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
1000495b:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
1000495f:	72 30                	jb     10004991 <ssfn_render+0xf82>
10004961:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10004965:	8b 34 24             	mov    esi,DWORD PTR [esp]
10004968:	0f af d7             	imul   edx,edi
1000496b:	29 fe                	sub    esi,edi
1000496d:	03 54 24 24          	add    edx,DWORD PTR [esp+0x24]
10004971:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10004978:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
1000497c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
10004984:	31 d2                	xor    edx,edx
10004986:	31 db                	xor    ebx,ebx
10004988:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
1000498c:	e9 d2 00 00 00       	jmp    10004a63 <ssfn_render+0x1054>
10004991:	8a 11                	mov    dl,BYTE PTR [ecx]
10004993:	89 d0                	mov    eax,edx
10004995:	83 e0 7f             	and    eax,0x7f
10004998:	84 d2                	test   dl,dl
1000499a:	8d 70 01             	lea    esi,[eax+0x1]
1000499d:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
100049a1:	78 09                	js     100049ac <ssfn_render+0xf9d>
100049a3:	41                   	inc    ecx
100049a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100049a8:	89 ca                	mov    edx,ecx
100049aa:	eb 3d                	jmp    100049e9 <ssfn_render+0xfda>
100049ac:	48                   	dec    eax
100049ad:	8b 94 24 dc 00 00 00 	mov    edx,DWORD PTR [esp+0xdc]
100049b4:	83 f8 fe             	cmp    eax,0xfffffffe
100049b7:	74 16                	je     100049cf <ssfn_render+0xfc0>
100049b9:	8d 5a 01             	lea    ebx,[edx+0x1]
100049bc:	89 9c 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],ebx
100049c3:	8a 59 01             	mov    bl,BYTE PTR [ecx+0x1]
100049c6:	88 9c 14 e0 05 00 00 	mov    BYTE PTR [esp+edx*1+0x5e0],bl
100049cd:	eb dd                	jmp    100049ac <ssfn_render+0xf9d>
100049cf:	83 c1 02             	add    ecx,0x2
100049d2:	eb 87                	jmp    1000495b <ssfn_render+0xf4c>
100049d4:	42                   	inc    edx
100049d5:	8d 73 01             	lea    esi,[ebx+0x1]
100049d8:	89 b4 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],esi
100049df:	8a 42 ff             	mov    al,BYTE PTR [edx-0x1]
100049e2:	88 84 1c e0 05 00 00 	mov    BYTE PTR [esp+ebx*1+0x5e0],al
100049e9:	ff 4c 24 18          	dec    DWORD PTR [esp+0x18]
100049ed:	8b 9c 24 dc 00 00 00 	mov    ebx,DWORD PTR [esp+0xdc]
100049f4:	83 7c 24 18 fe       	cmp    DWORD PTR [esp+0x18],0xfffffffe
100049f9:	75 d9                	jne    100049d4 <ssfn_render+0xfc5>
100049fb:	03 4c 24 3c          	add    ecx,DWORD PTR [esp+0x3c]
100049ff:	e9 57 ff ff ff       	jmp    1000495b <ssfn_render+0xf4c>
10004a04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10004a08:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
10004a0c:	99                   	cdq    
10004a0d:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
10004a11:	0f af c8             	imul   ecx,eax
10004a14:	31 c0                	xor    eax,eax
10004a16:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
10004a1b:	74 0e                	je     10004a2b <ssfn_render+0x101c>
10004a1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10004a21:	be 04 00 00 00       	mov    esi,0x4
10004a26:	29 d8                	sub    eax,ebx
10004a28:	99                   	cdq    
10004a29:	f7 fe                	idiv   esi
10004a2b:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10004a2f:	31 f6                	xor    esi,esi
10004a31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10004a35:	31 ff                	xor    edi,edi
10004a37:	8d 84 24 e0 05 01 00 	lea    eax,[esp+0x105e0]
10004a3e:	01 c1                	add    ecx,eax
10004a40:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
10004a44:	7f 30                	jg     10004a76 <ssfn_render+0x1067>
10004a46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004a4a:	85 c0                	test   eax,eax
10004a4c:	79 02                	jns    10004a50 <ssfn_render+0x1041>
10004a4e:	31 c0                	xor    eax,eax
10004a50:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10004a54:	43                   	inc    ebx
10004a55:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
10004a59:	b2 01                	mov    dl,0x1
10004a5b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
10004a5f:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
10004a63:	3b 5c 24 14          	cmp    ebx,DWORD PTR [esp+0x14]
10004a67:	7c 9b                	jl     10004a04 <ssfn_render+0xff5>
10004a69:	84 d2                	test   dl,dl
10004a6b:	74 3b                	je     10004aa8 <ssfn_render+0x1099>
10004a6d:	89 84 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],eax
10004a74:	eb 32                	jmp    10004aa8 <ssfn_render+0x1099>
10004a76:	89 f0                	mov    eax,esi
10004a78:	99                   	cdq    
10004a79:	f7 7c 24 0c          	idiv   DWORD PTR [esp+0xc]
10004a7d:	8a 84 08 00 00 ff ff 	mov    al,BYTE PTR [eax+ecx*1-0x10000]
10004a84:	3c ff                	cmp    al,0xff
10004a86:	74 0e                	je     10004a96 <ssfn_render+0x1087>
10004a88:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
10004a8c:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
10004a92:	88 44 17 08          	mov    BYTE PTR [edi+edx*1+0x8],al
10004a96:	47                   	inc    edi
10004a97:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
10004a9b:	eb a3                	jmp    10004a40 <ssfn_render+0x1031>
10004a9d:	84 c0                	test   al,al
10004a9f:	74 07                	je     10004aa8 <ssfn_render+0x1099>
10004aa1:	89 8c 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],ecx
10004aa8:	b3 fe                	mov    bl,0xfe
10004aaa:	ff 44 24 48          	inc    DWORD PTR [esp+0x48]
10004aae:	88 5c 24 0c          	mov    BYTE PTR [esp+0xc],bl
10004ab2:	e9 d5 f5 ff ff       	jmp    1000408c <ssfn_render+0x67d>
10004ab7:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004abd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10004ac0:	8a 52 0c             	mov    dl,BYTE PTR [edx+0xc]
10004ac3:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
10004ac6:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10004acc:	0f b6 72 07          	movzx  esi,BYTE PTR [edx+0x7]
10004ad0:	0f b6 5a 06          	movzx  ebx,BYTE PTR [edx+0x6]
10004ad4:	89 f0                	mov    eax,esi
10004ad6:	89 d9                	mov    ecx,ebx
10004ad8:	43                   	inc    ebx
10004ad9:	39 de                	cmp    esi,ebx
10004adb:	7e 08                	jle    10004ae5 <ssfn_render+0x10d6>
10004add:	48                   	dec    eax
10004ade:	29 c8                	sub    eax,ecx
10004ae0:	88 42 07             	mov    BYTE PTR [edx+0x7],al
10004ae3:	eb 04                	jmp    10004ae9 <ssfn_render+0x10da>
10004ae5:	c6 42 07 00          	mov    BYTE PTR [edx+0x7],0x0
10004ae9:	83 bc 24 04 06 01 00 00 	cmp    DWORD PTR [esp+0x10604],0x0
10004af1:	0f 84 92 0c 00 00    	je     10005789 <ssfn_render+0x1d7a>
10004af7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004afb:	39 85 c4 f5 00 00    	cmp    DWORD PTR [ebp+0xf5c4],eax
10004b01:	7d 06                	jge    10004b09 <ssfn_render+0x10fa>
10004b03:	89 85 c4 f5 00 00    	mov    DWORD PTR [ebp+0xf5c4],eax
10004b09:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
10004b0f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
10004b12:	0f b6 4e 02          	movzx  ecx,BYTE PTR [esi+0x2]
10004b16:	0f b7 16             	movzx  edx,WORD PTR [esi]
10004b19:	0f b6 7e 03          	movzx  edi,BYTE PTR [esi+0x3]
10004b1d:	0f af 54 24 04       	imul   edx,DWORD PTR [esp+0x4]
10004b22:	89 d0                	mov    eax,edx
10004b24:	99                   	cdq    
10004b25:	f7 f9                	idiv   ecx
10004b27:	0f b6 4b 0b          	movzx  ecx,BYTE PTR [ebx+0xb]
10004b2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004b2f:	0f b6 46 04          	movzx  eax,BYTE PTR [esi+0x4]
10004b33:	88 04 24             	mov    BYTE PTR [esp],al
10004b36:	29 f8                	sub    eax,edi
10004b38:	0f af 44 24 04       	imul   eax,DWORD PTR [esp+0x4]
10004b3d:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10004b41:	99                   	cdq    
10004b42:	f7 f9                	idiv   ecx
10004b44:	31 d2                	xor    edx,edx
10004b46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10004b4a:	83 bd c0 f5 00 00 10 	cmp    DWORD PTR [ebp+0xf5c0],0x10
10004b51:	0f 9f c2             	setg   dl
10004b54:	42                   	inc    edx
10004b55:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
10004b59:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
10004b5d:	7d 08                	jge    10004b67 <ssfn_render+0x1158>
10004b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004b63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004b67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10004b6b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10004b6f:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
10004b73:	7d 04                	jge    10004b79 <ssfn_render+0x116a>
10004b75:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10004b79:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
10004b7d:	74 46                	je     10004bc5 <ssfn_render+0x11b6>
10004b7f:	0f af 7c 24 04       	imul   edi,DWORD PTR [esp+0x4]
10004b84:	8d 44 39 ff          	lea    eax,[ecx+edi*1-0x1]
10004b88:	99                   	cdq    
10004b89:	f7 f9                	idiv   ecx
10004b8b:	8b 8d bc f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf5bc]
10004b91:	81 e1 00 08 00 00    	and    ecx,0x800
10004b97:	74 04                	je     10004b9d <ssfn_render+0x118e>
10004b99:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10004b9d:	01 c1                	add    ecx,eax
10004b9f:	89 8d 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],ecx
10004ba5:	0f b6 5b 0b          	movzx  ebx,BYTE PTR [ebx+0xb]
10004ba9:	0f b6 46 06          	movzx  eax,BYTE PTR [esi+0x6]
10004bad:	0f af 44 24 04       	imul   eax,DWORD PTR [esp+0x4]
10004bb2:	8d 44 03 ff          	lea    eax,[ebx+eax*1-0x1]
10004bb6:	99                   	cdq    
10004bb7:	f7 fb                	idiv   ebx
10004bb9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10004bbd:	89 85 8c f5 00 00    	mov    DWORD PTR [ebp+0xf58c],eax
10004bc3:	eb 1e                	jmp    10004be3 <ssfn_render+0x11d4>
10004bc5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10004bc9:	c7 85 8c f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf58c],0x0
10004bd3:	d1 f9                	sar    ecx,1
10004bd5:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
10004bdd:	89 8d 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],ecx
10004be3:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004bea:	8b 00                	mov    eax,DWORD PTR [eax]
10004bec:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10004bf0:	85 c0                	test   eax,eax
10004bf2:	0f 84 42 09 00 00    	je     1000553a <ssfn_render+0x1b2b>
10004bf8:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004bff:	0f bf 50 04          	movsx  edx,WORD PTR [eax+0x4]
10004c03:	89 d3                	mov    ebx,edx
10004c05:	89 d0                	mov    eax,edx
10004c07:	66 c1 fb 0b          	sar    bx,0xb
10004c0b:	c1 f8 1f             	sar    eax,0x1f
10004c0e:	31 c2                	xor    edx,eax
10004c10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
10004c14:	29 44 24 54          	sub    DWORD PTR [esp+0x54],eax
10004c18:	88 d8                	mov    al,bl
10004c1a:	83 e0 10             	and    eax,0x10
10004c1d:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
10004c21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004c25:	83 c0 40             	add    eax,0x40
10004c28:	c1 f8 06             	sar    eax,0x6
10004c2b:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
10004c32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004c36:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10004c3a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
10004c3e:	7d 08                	jge    10004c48 <ssfn_render+0x1239>
10004c40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004c44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10004c48:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10004c4b:	0f b6 58 0b          	movzx  ebx,BYTE PTR [eax+0xb]
10004c4f:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
10004c53:	0f af 44 24 04       	imul   eax,DWORD PTR [esp+0x4]
10004c58:	8d 44 03 ff          	lea    eax,[ebx+eax*1-0x1]
10004c5c:	99                   	cdq    
10004c5d:	f7 fb                	idiv   ebx
10004c5f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10004c63:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004c6a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10004c6d:	0f b6 fc             	movzx  edi,ah
10004c70:	89 c2                	mov    edx,eax
10004c72:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
10004c76:	c1 ea 10             	shr    edx,0x10
10004c79:	0f b6 f2             	movzx  esi,dl
10004c7c:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
10004c80:	0f b6 f0             	movzx  esi,al
10004c83:	c1 e8 18             	shr    eax,0x18
10004c86:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
10004c8a:	89 04 24             	mov    DWORD PTR [esp],eax
10004c8d:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004c94:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10004c97:	89 c2                	mov    edx,eax
10004c99:	0f b6 f4             	movzx  esi,ah
10004c9c:	c1 ea 10             	shr    edx,0x10
10004c9f:	0f b6 c0             	movzx  eax,al
10004ca2:	0f b6 fa             	movzx  edi,dl
10004ca5:	89 84 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],eax
10004cac:	89 bc 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],edi
10004cb3:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004cba:	89 b4 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],esi
10004cc1:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10004cc5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10004cc9:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004cd0:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10004cd4:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
10004cd8:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
10004cdc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10004ce0:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004ce7:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10004ceb:	29 c8                	sub    eax,ecx
10004ced:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10004cf1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10004cf5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10004cf9:	0f af 44 24 4c       	imul   eax,DWORD PTR [esp+0x4c]
10004cfe:	8d 04 b8             	lea    eax,[eax+edi*4]
10004d01:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
10004d05:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
10004d0c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10004d10:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
10004d18:	25 fc ff 00 00       	and    eax,0xfffc
10004d1d:	c7 84 24 84 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x84],0x0
10004d28:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
10004d2f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10004d33:	89 84 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],eax
10004d3a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10004d3e:	89 84 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],eax
10004d45:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
10004d4a:	89 84 24 b4 00 00 00 	mov    DWORD PTR [esp+0xb4],eax
10004d51:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
10004d55:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10004d59:	0f 8e ef 04 00 00    	jle    1000524e <ssfn_render+0x183f>
10004d5f:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004d66:	0f bf 40 06          	movsx  eax,WORD PTR [eax+0x6]
10004d6a:	3b 84 24 9c 00 00 00 	cmp    eax,DWORD PTR [esp+0x9c]
10004d71:	0f 8e d7 04 00 00    	jle    1000524e <ssfn_render+0x183f>
10004d77:	83 bc 24 9c 00 00 00 00 	cmp    DWORD PTR [esp+0x9c],0x0
10004d7f:	0f 88 ab 04 00 00    	js     10005230 <ssfn_render+0x1821>
10004d85:	89 f9                	mov    ecx,edi
10004d87:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004d8d:	c1 e1 08             	shl    ecx,0x8
10004d90:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
10004d94:	31 ff                	xor    edi,edi
10004d96:	89 c8                	mov    eax,ecx
10004d98:	0f af c3             	imul   eax,ebx
10004d9b:	99                   	cdq    
10004d9c:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
10004da0:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
10004da7:	c1 f8 08             	sar    eax,0x8
10004daa:	89 84 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],eax
10004db1:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10004db7:	0f af c3             	imul   eax,ebx
10004dba:	99                   	cdq    
10004dbb:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
10004dbf:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
10004dc3:	c1 f8 08             	sar    eax,0x8
10004dc6:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
10004dcd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10004dd1:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
10004dd8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10004ddc:	2b 84 24 a4 00 00 00 	sub    eax,DWORD PTR [esp+0xa4]
10004de3:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
10004dea:	8b b4 24 a0 00 00 00 	mov    esi,DWORD PTR [esp+0xa0]
10004df1:	39 74 24 54          	cmp    DWORD PTR [esp+0x54],esi
10004df5:	0f 8e 35 04 00 00    	jle    10005230 <ssfn_render+0x1821>
10004dfb:	85 f6                	test   esi,esi
10004dfd:	0f 88 1b 04 00 00    	js     1000521e <ssfn_render+0x180f>
10004e03:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004e0a:	83 78 14 00          	cmp    DWORD PTR [eax+0x14],0x0
10004e0e:	75 3e                	jne    10004e4e <ssfn_render+0x143f>
10004e10:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
10004e17:	b9 10 00 00 00       	mov    ecx,0x10
10004e1c:	8b 04 b8             	mov    eax,DWORD PTR [eax+edi*4]
10004e1f:	2b 8c 24 b4 00 00 00 	sub    ecx,DWORD PTR [esp+0xb4]
10004e26:	89 c2                	mov    edx,eax
10004e28:	d3 ea                	shr    edx,cl
10004e2a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
10004e2e:	0f b6 f2             	movzx  esi,dl
10004e31:	89 b4 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],esi
10004e38:	0f b6 f4             	movzx  esi,ah
10004e3b:	d3 e8                	shr    eax,cl
10004e3d:	89 b4 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],esi
10004e44:	0f b6 c0             	movzx  eax,al
10004e47:	89 84 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],eax
10004e4e:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004e54:	89 f9                	mov    ecx,edi
10004e56:	0f b7 18             	movzx  ebx,WORD PTR [eax]
10004e59:	c1 e1 08             	shl    ecx,0x8
10004e5c:	89 44 24 78          	mov    DWORD PTR [esp+0x78],eax
10004e60:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
10004e68:	89 c8                	mov    eax,ecx
10004e6a:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10004e72:	0f af c3             	imul   eax,ebx
10004e75:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10004e7d:	99                   	cdq    
10004e7e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
10004e86:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
10004e8a:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
10004e92:	89 84 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],eax
10004e99:	c1 f8 08             	sar    eax,0x8
10004e9c:	89 84 24 c0 00 00 00 	mov    DWORD PTR [esp+0xc0],eax
10004ea3:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10004ea9:	0f af c3             	imul   eax,ebx
10004eac:	99                   	cdq    
10004ead:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
10004eb1:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10004eb5:	c1 f8 08             	sar    eax,0x8
10004eb8:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
10004ebf:	8b 84 24 a4 00 00 00 	mov    eax,DWORD PTR [esp+0xa4]
10004ec6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10004eca:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
10004ece:	39 74 24 3c          	cmp    DWORD PTR [esp+0x3c],esi
10004ed2:	0f 8d 46 02 00 00    	jge    1000511e <ssfn_render+0x170f>
10004ed8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10004edc:	c1 fa 08             	sar    edx,0x8
10004edf:	3b 94 24 b8 00 00 00 	cmp    edx,DWORD PTR [esp+0xb8]
10004ee6:	75 25                	jne    10004f0d <ssfn_render+0x14fe>
10004ee8:	0f b6 4c 24 3c       	movzx  ecx,BYTE PTR [esp+0x3c]
10004eed:	8b b4 24 b0 00 00 00 	mov    esi,DWORD PTR [esp+0xb0]
10004ef4:	b8 00 01 00 00       	mov    eax,0x100
10004ef9:	81 64 24 3c 00 ff ff ff 	and    DWORD PTR [esp+0x3c],0xffffff00
10004f01:	29 c8                	sub    eax,ecx
10004f03:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10004f07:	39 c6                	cmp    esi,eax
10004f09:	7e 1c                	jle    10004f27 <ssfn_render+0x1518>
10004f0b:	eb 16                	jmp    10004f23 <ssfn_render+0x1514>
10004f0d:	c7 44 24 18 00 01 00 00 	mov    DWORD PTR [esp+0x18],0x100
10004f15:	3b 94 24 bc 00 00 00 	cmp    edx,DWORD PTR [esp+0xbc]
10004f1c:	75 09                	jne    10004f27 <ssfn_render+0x1518>
10004f1e:	0f b6 44 24 68       	movzx  eax,BYTE PTR [esp+0x68]
10004f23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004f27:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10004f2b:	0f b7 00             	movzx  eax,WORD PTR [eax]
10004f2e:	0f af c2             	imul   eax,edx
10004f31:	89 84 24 c8 00 00 00 	mov    DWORD PTR [esp+0xc8],eax
10004f38:	0f b6 44 24 6c       	movzx  eax,BYTE PTR [esp+0x6c]
10004f3d:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
10004f42:	c1 f8 08             	sar    eax,0x8
10004f45:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10004f4c:	8b 84 24 a8 00 00 00 	mov    eax,DWORD PTR [esp+0xa8]
10004f53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10004f57:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
10004f5b:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
10004f5f:	0f 8d ac 01 00 00    	jge    10005111 <ssfn_render+0x1702>
10004f65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10004f69:	c1 f8 08             	sar    eax,0x8
10004f6c:	3b 84 24 c0 00 00 00 	cmp    eax,DWORD PTR [esp+0xc0]
10004f73:	75 39                	jne    10004fae <ssfn_render+0x159f>
10004f75:	0f b6 4c 24 38       	movzx  ecx,BYTE PTR [esp+0x38]
10004f7a:	ba 00 01 00 00       	mov    edx,0x100
10004f7f:	81 64 24 38 00 ff ff ff 	and    DWORD PTR [esp+0x38],0xffffff00
10004f87:	29 ca                	sub    edx,ecx
10004f89:	89 f1                	mov    ecx,esi
10004f8b:	2b 8c 24 a8 00 00 00 	sub    ecx,DWORD PTR [esp+0xa8]
10004f92:	39 d1                	cmp    ecx,edx
10004f94:	7c 0e                	jl     10004fa4 <ssfn_render+0x1595>
10004f96:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004f9a:	81 fa 00 01 00 00    	cmp    edx,0x100
10004fa0:	74 20                	je     10004fc2 <ssfn_render+0x15b3>
10004fa2:	89 d1                	mov    ecx,edx
10004fa4:	0f af 4c 24 18       	imul   ecx,DWORD PTR [esp+0x18]
10004fa9:	c1 f9 08             	sar    ecx,0x8
10004fac:	eb 14                	jmp    10004fc2 <ssfn_render+0x15b3>
10004fae:	8b 8c 24 cc 00 00 00 	mov    ecx,DWORD PTR [esp+0xcc]
10004fb5:	3b 84 24 c4 00 00 00 	cmp    eax,DWORD PTR [esp+0xc4]
10004fbc:	74 04                	je     10004fc2 <ssfn_render+0x15b3>
10004fbe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004fc2:	03 44 24 78          	add    eax,DWORD PTR [esp+0x78]
10004fc6:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
10004fca:	8b b4 24 c8 00 00 00 	mov    esi,DWORD PTR [esp+0xc8]
10004fd1:	0f b6 54 06 08       	movzx  edx,BYTE PTR [esi+eax*1+0x8]
10004fd6:	81 fa ff 00 00 00    	cmp    edx,0xff
10004fdc:	75 35                	jne    10005013 <ssfn_render+0x1604>
10004fde:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
10004fe5:	81 44 24 30 ff 00 00 00 	add    DWORD PTR [esp+0x30],0xff
10004fed:	0f af c1             	imul   eax,ecx
10004ff0:	01 44 24 2c          	add    DWORD PTR [esp+0x2c],eax
10004ff4:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
10004ffb:	0f af c1             	imul   eax,ecx
10004ffe:	0f af 8c 24 98 00 00 00 	imul   ecx,DWORD PTR [esp+0x98]
10005006:	01 44 24 28          	add    DWORD PTR [esp+0x28],eax
1000500a:	01 4c 24 24          	add    DWORD PTR [esp+0x24],ecx
1000500e:	e9 f1 00 00 00       	jmp    10005104 <ssfn_render+0x16f5>
10005013:	81 fa fe 00 00 00    	cmp    edx,0xfe
10005019:	74 31                	je     1000504c <ssfn_render+0x163d>
1000501b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000501e:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
10005021:	85 db                	test   ebx,ebx
10005023:	74 27                	je     1000504c <ssfn_render+0x163d>
10005025:	01 d8                	add    eax,ebx
10005027:	8b 14 90             	mov    edx,DWORD PTR [eax+edx*4]
1000502a:	89 d3                	mov    ebx,edx
1000502c:	89 94 24 d4 00 00 00 	mov    DWORD PTR [esp+0xd4],edx
10005033:	c1 eb 10             	shr    ebx,0x10
10005036:	0f b6 f6             	movzx  esi,dh
10005039:	0f b6 c3             	movzx  eax,bl
1000503c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10005040:	0f b6 c2             	movzx  eax,dl
10005043:	c1 ea 18             	shr    edx,0x18
10005046:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
1000504a:	eb 17                	jmp    10005063 <ssfn_render+0x1654>
1000504c:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000504f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
10005053:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10005057:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
1000505b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
1000505f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10005063:	81 7c 24 14 ff 00 00 00 	cmp    DWORD PTR [esp+0x14],0xff
1000506b:	75 21                	jne    1000508e <ssfn_render+0x167f>
1000506d:	0f af c1             	imul   eax,ecx
10005070:	0f af f1             	imul   esi,ecx
10005073:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
10005077:	01 44 24 2c          	add    DWORD PTR [esp+0x2c],eax
1000507b:	0f af d9             	imul   ebx,ecx
1000507e:	01 74 24 28          	add    DWORD PTR [esp+0x28],esi
10005082:	01 5c 24 24          	add    DWORD PTR [esp+0x24],ebx
10005086:	69 c9 ff 00 00 00    	imul   ecx,ecx,0xff
1000508c:	eb 72                	jmp    10005100 <ssfn_render+0x16f1>
1000508e:	0f af 74 24 14       	imul   esi,DWORD PTR [esp+0x14]
10005093:	bb ff 00 00 00       	mov    ebx,0xff
10005098:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
1000509d:	2b 5c 24 14          	sub    ebx,DWORD PTR [esp+0x14]
100050a1:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
100050a8:	89 5c 24 7c          	mov    DWORD PTR [esp+0x7c],ebx
100050ac:	0f af d3             	imul   edx,ebx
100050af:	bb ff 00 00 00       	mov    ebx,0xff
100050b4:	01 d0                	add    eax,edx
100050b6:	0f af c1             	imul   eax,ecx
100050b9:	99                   	cdq    
100050ba:	f7 fb                	idiv   ebx
100050bc:	01 44 24 2c          	add    DWORD PTR [esp+0x2c],eax
100050c0:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100050c4:	0f af 84 24 94 00 00 00 	imul   eax,DWORD PTR [esp+0x94]
100050cc:	01 f0                	add    eax,esi
100050ce:	89 de                	mov    esi,ebx
100050d0:	0f af c1             	imul   eax,ecx
100050d3:	99                   	cdq    
100050d4:	f7 fb                	idiv   ebx
100050d6:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
100050da:	01 44 24 28          	add    DWORD PTR [esp+0x28],eax
100050de:	0f af 5c 24 14       	imul   ebx,DWORD PTR [esp+0x14]
100050e3:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100050e7:	0f af 84 24 98 00 00 00 	imul   eax,DWORD PTR [esp+0x98]
100050ef:	01 d8                	add    eax,ebx
100050f1:	0f af c1             	imul   eax,ecx
100050f4:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
100050f9:	99                   	cdq    
100050fa:	f7 fe                	idiv   esi
100050fc:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
10005100:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
10005104:	81 44 24 38 00 01 00 00 	add    DWORD PTR [esp+0x38],0x100
1000510c:	e9 46 fe ff ff       	jmp    10004f57 <ssfn_render+0x1548>
10005111:	81 44 24 3c 00 01 00 00 	add    DWORD PTR [esp+0x3c],0x100
10005119:	e9 ac fd ff ff       	jmp    10004eca <ssfn_render+0x14bb>
1000511e:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
10005123:	74 30                	je     10005155 <ssfn_render+0x1746>
10005125:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10005129:	31 d2                	xor    edx,edx
1000512b:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
1000512f:	31 d2                	xor    edx,edx
10005131:	89 c1                	mov    ecx,eax
10005133:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10005137:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
1000513b:	31 d2                	xor    edx,edx
1000513d:	89 c6                	mov    esi,eax
1000513f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10005143:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
10005147:	31 d2                	xor    edx,edx
10005149:	89 c3                	mov    ebx,eax
1000514b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000514f:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
10005153:	eb 1c                	jmp    10005171 <ssfn_render+0x1762>
10005155:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
10005159:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
1000515d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10005161:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10005165:	c1 e9 08             	shr    ecx,0x8
10005168:	c1 ee 08             	shr    esi,0x8
1000516b:	c1 eb 08             	shr    ebx,0x8
1000516e:	c1 e8 08             	shr    eax,0x8
10005171:	f6 85 bc f5 00 00 40 	test   BYTE PTR [ebp+0xf5bc],0x40
10005178:	74 10                	je     1000518a <ssfn_render+0x177b>
1000517a:	83 f8 7f             	cmp    eax,0x7f
1000517d:	0f 86 9b 00 00 00    	jbe    1000521e <ssfn_render+0x180f>
10005183:	b8 ff 00 00 00       	mov    eax,0xff
10005188:	eb 09                	jmp    10005193 <ssfn_render+0x1784>
1000518a:	83 f8 0f             	cmp    eax,0xf
1000518d:	0f 86 8b 00 00 00    	jbe    1000521e <ssfn_render+0x180f>
10005193:	89 ca                	mov    edx,ecx
10005195:	81 f9 ff 00 00 00    	cmp    ecx,0xff
1000519b:	76 05                	jbe    100051a2 <ssfn_render+0x1793>
1000519d:	ba ff 00 00 00       	mov    edx,0xff
100051a2:	b9 10 00 00 00       	mov    ecx,0x10
100051a7:	2b 8c 24 b4 00 00 00 	sub    ecx,DWORD PTR [esp+0xb4]
100051ae:	d3 e2                	shl    edx,cl
100051b0:	81 fe ff 00 00 00    	cmp    esi,0xff
100051b6:	89 d1                	mov    ecx,edx
100051b8:	76 05                	jbe    100051bf <ssfn_render+0x17b0>
100051ba:	be ff 00 00 00       	mov    esi,0xff
100051bf:	c1 e6 08             	shl    esi,0x8
100051c2:	09 ce                	or     esi,ecx
100051c4:	81 fb ff 00 00 00    	cmp    ebx,0xff
100051ca:	76 05                	jbe    100051d1 <ssfn_render+0x17c2>
100051cc:	bb ff 00 00 00       	mov    ebx,0xff
100051d1:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
100051d5:	d3 e3                	shl    ebx,cl
100051d7:	09 de                	or     esi,ebx
100051d9:	3d ff 00 00 00       	cmp    eax,0xff
100051de:	76 05                	jbe    100051e5 <ssfn_render+0x17d6>
100051e0:	b8 ff 00 00 00       	mov    eax,0xff
100051e5:	c1 e0 18             	shl    eax,0x18
100051e8:	09 f0                	or     eax,esi
100051ea:	8b b4 24 88 00 00 00 	mov    esi,DWORD PTR [esp+0x88]
100051f1:	89 04 be             	mov    DWORD PTR [esi+edi*4],eax
100051f4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
100051f8:	39 74 24 40          	cmp    DWORD PTR [esp+0x40],esi
100051fc:	75 20                	jne    1000521e <ssfn_render+0x180f>
100051fe:	39 bc 24 8c 00 00 00 	cmp    DWORD PTR [esp+0x8c],edi
10005205:	7e 07                	jle    1000520e <ssfn_render+0x17ff>
10005207:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
1000520e:	39 bc 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],edi
10005215:	7d 07                	jge    1000521e <ssfn_render+0x180f>
10005217:	89 bc 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edi
1000521e:	47                   	inc    edi
1000521f:	ff 84 24 a0 00 00 00 	inc    DWORD PTR [esp+0xa0]
10005226:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
1000522a:	0f 85 ba fb ff ff    	jne    10004dea <ssfn_render+0x13db>
10005230:	8b bc 24 80 00 00 00 	mov    edi,DWORD PTR [esp+0x80]
10005237:	ff 44 24 64          	inc    DWORD PTR [esp+0x64]
1000523b:	01 bc 24 88 00 00 00 	add    DWORD PTR [esp+0x88],edi
10005242:	ff 84 24 9c 00 00 00 	inc    DWORD PTR [esp+0x9c]
10005249:	e9 03 fb ff ff       	jmp    10004d51 <ssfn_render+0x1342>
1000524e:	f6 85 bc f5 00 00 10 	test   BYTE PTR [ebp+0xf5bc],0x10
10005255:	0f 84 7c 01 00 00    	je     100053d7 <ssfn_render+0x19c8>
1000525b:	0f b6 84 24 ac 00 00 00 	movzx  eax,BYTE PTR [esp+0xac]
10005263:	8b bc 24 8c 00 00 00 	mov    edi,DWORD PTR [esp+0x8c]
1000526a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000526e:	40                   	inc    eax
1000526f:	29 c7                	sub    edi,eax
10005271:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
10005278:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
1000527c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10005280:	8d 44 38 02          	lea    eax,[eax+edi*1+0x2]
10005284:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10005288:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
1000528c:	7e 09                	jle    10005297 <ssfn_render+0x1888>
1000528e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10005292:	40                   	inc    eax
10005293:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10005297:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
1000529b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
1000529f:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
100052a3:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
100052a8:	8d 44 b8 fc          	lea    eax,[eax+edi*4-0x4]
100052ac:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
100052b0:	01 c7                	add    edi,eax
100052b2:	8b 04 24             	mov    eax,DWORD PTR [esp]
100052b5:	c1 e0 18             	shl    eax,0x18
100052b8:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100052bc:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
100052c0:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
100052c4:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
100052c8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
100052cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100052d0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100052d4:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
100052d9:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
100052dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100052e1:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
100052e5:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
100052e9:	0f 8e e8 00 00 00    	jle    100053d7 <ssfn_render+0x19c8>
100052ef:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
100052f6:	0f bf 40 06          	movsx  eax,WORD PTR [eax+0x6]
100052fa:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
100052fe:	0f 8e d3 00 00 00    	jle    100053d7 <ssfn_render+0x19c8>
10005304:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
10005309:	79 11                	jns    1000531c <ssfn_render+0x190d>
1000530b:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
1000530f:	03 bc 24 80 00 00 00 	add    edi,DWORD PTR [esp+0x80]
10005316:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
1000531a:	eb c1                	jmp    100052dd <ssfn_render+0x18ce>
1000531c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10005320:	31 f6                	xor    esi,esi
10005322:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10005326:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
1000532a:	39 5c 24 54          	cmp    DWORD PTR [esp+0x54],ebx
1000532e:	7e db                	jle    1000530b <ssfn_render+0x18fc>
10005330:	85 db                	test   ebx,ebx
10005332:	0f 88 8b 00 00 00    	js     100053c3 <ssfn_render+0x19b4>
10005338:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
1000533c:	7e 06                	jle    10005344 <ssfn_render+0x1935>
1000533e:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
10005342:	7f 7f                	jg     100053c3 <ssfn_render+0x19b4>
10005344:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
10005347:	b8 10 00 00 00       	mov    eax,0x10
1000534c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10005350:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
10005354:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10005358:	89 d8                	mov    eax,ebx
1000535a:	8a 4c 24 2c          	mov    cl,BYTE PTR [esp+0x2c]
1000535e:	d3 e8                	shr    eax,cl
10005360:	0f b6 cf             	movzx  ecx,bh
10005363:	0f b6 c0             	movzx  eax,al
10005366:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
1000536a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
1000536e:	d3 eb                	shr    ebx,cl
10005370:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10005374:	0f b6 db             	movzx  ebx,bl
10005377:	29 c1                	sub    ecx,eax
10005379:	29 da                	sub    edx,ebx
1000537b:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
1000537f:	0f af 14 24          	imul   edx,DWORD PTR [esp]
10005383:	c1 f9 08             	sar    ecx,0x8
10005386:	c1 fa 08             	sar    edx,0x8
10005389:	01 c8                	add    eax,ecx
1000538b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
1000538f:	8a 4c 24 2c          	mov    cl,BYTE PTR [esp+0x2c]
10005393:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10005397:	d3 e0                	shl    eax,cl
10005399:	2b 54 24 38          	sub    edx,DWORD PTR [esp+0x38]
1000539d:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
100053a1:	0f af 14 24          	imul   edx,DWORD PTR [esp]
100053a5:	c1 fa 08             	sar    edx,0x8
100053a8:	03 54 24 38          	add    edx,DWORD PTR [esp+0x38]
100053ac:	c1 e2 08             	shl    edx,0x8
100053af:	09 d0                	or     eax,edx
100053b1:	8d 14 19             	lea    edx,[ecx+ebx*1]
100053b4:	0b 44 24 50          	or     eax,DWORD PTR [esp+0x50]
100053b8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
100053bc:	d3 e2                	shl    edx,cl
100053be:	09 c2                	or     edx,eax
100053c0:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
100053c3:	46                   	inc    esi
100053c4:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
100053c8:	39 74 24 70          	cmp    DWORD PTR [esp+0x70],esi
100053cc:	0f 8d 54 ff ff ff    	jge    10005326 <ssfn_render+0x1917>
100053d2:	e9 34 ff ff ff       	jmp    1000530b <ssfn_render+0x18fc>
100053d7:	f6 85 bc f5 00 00 20 	test   BYTE PTR [ebp+0xf5bc],0x20
100053de:	0f 84 56 01 00 00    	je     1000553a <ssfn_render+0x1b2b>
100053e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100053e8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100053ec:	d1 f8                	sar    eax,1
100053ee:	47                   	inc    edi
100053ef:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100053f3:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
100053f7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
100053fb:	7e 09                	jle    10005406 <ssfn_render+0x19f7>
100053fd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10005401:	47                   	inc    edi
10005402:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
10005406:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
1000540a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000540e:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
10005412:	8b 34 24             	mov    esi,DWORD PTR [esp]
10005415:	01 c2                	add    edx,eax
10005417:	c1 e6 18             	shl    esi,0x18
1000541a:	0f af 54 24 48       	imul   edx,DWORD PTR [esp+0x48]
1000541f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
10005423:	8d 54 ba fc          	lea    edx,[edx+edi*4-0x4]
10005427:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
1000542b:	01 d7                	add    edi,edx
1000542d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
10005431:	01 c2                	add    edx,eax
10005433:	0f b6 84 24 ac 00 00 00 	movzx  eax,BYTE PTR [esp+0xac]
1000543b:	2b 54 24 34          	sub    edx,DWORD PTR [esp+0x34]
1000543f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
10005443:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
10005447:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
1000544b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
10005450:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10005454:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10005458:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
1000545c:	0f 8e d8 00 00 00    	jle    1000553a <ssfn_render+0x1b2b>
10005462:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10005469:	0f bf 40 06          	movsx  eax,WORD PTR [eax+0x6]
1000546d:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10005471:	0f 8e c3 00 00 00    	jle    1000553a <ssfn_render+0x1b2b>
10005477:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
1000547c:	79 11                	jns    1000548f <ssfn_render+0x1a80>
1000547e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
10005482:	03 bc 24 80 00 00 00 	add    edi,DWORD PTR [esp+0x80]
10005489:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
1000548d:	eb c5                	jmp    10005454 <ssfn_render+0x1a45>
1000548f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10005493:	31 f6                	xor    esi,esi
10005495:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10005499:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000549d:	39 5c 24 54          	cmp    DWORD PTR [esp+0x54],ebx
100054a1:	7e db                	jle    1000547e <ssfn_render+0x1a6f>
100054a3:	85 db                	test   ebx,ebx
100054a5:	78 7f                	js     10005526 <ssfn_render+0x1b17>
100054a7:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
100054aa:	b8 10 00 00 00       	mov    eax,0x10
100054af:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
100054b3:	2b 44 24 38          	sub    eax,DWORD PTR [esp+0x38]
100054b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100054bb:	89 d8                	mov    eax,ebx
100054bd:	8a 4c 24 20          	mov    cl,BYTE PTR [esp+0x20]
100054c1:	d3 e8                	shr    eax,cl
100054c3:	0f b6 cf             	movzx  ecx,bh
100054c6:	0f b6 c0             	movzx  eax,al
100054c9:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
100054cd:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
100054d1:	d3 eb                	shr    ebx,cl
100054d3:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
100054d7:	0f b6 db             	movzx  ebx,bl
100054da:	29 c1                	sub    ecx,eax
100054dc:	29 da                	sub    edx,ebx
100054de:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
100054e2:	0f af 14 24          	imul   edx,DWORD PTR [esp]
100054e6:	c1 f9 08             	sar    ecx,0x8
100054e9:	c1 fa 08             	sar    edx,0x8
100054ec:	01 c8                	add    eax,ecx
100054ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
100054f2:	8a 4c 24 20          	mov    cl,BYTE PTR [esp+0x20]
100054f6:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
100054fa:	d3 e0                	shl    eax,cl
100054fc:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
10005500:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
10005504:	0f af 14 24          	imul   edx,DWORD PTR [esp]
10005508:	c1 fa 08             	sar    edx,0x8
1000550b:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
1000550f:	c1 e2 08             	shl    edx,0x8
10005512:	09 d0                	or     eax,edx
10005514:	8d 14 19             	lea    edx,[ecx+ebx*1]
10005517:	0b 44 24 30          	or     eax,DWORD PTR [esp+0x30]
1000551b:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
1000551f:	d3 e2                	shl    edx,cl
10005521:	09 c2                	or     edx,eax
10005523:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
10005526:	46                   	inc    esi
10005527:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
1000552b:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
1000552f:	0f 8d 64 ff ff ff    	jge    10005499 <ssfn_render+0x1a8a>
10005535:	e9 44 ff ff ff       	jmp    1000547e <ssfn_render+0x1a6f>
1000553a:	f6 85 bd f5 00 00 08 	test   BYTE PTR [ebp+0xf5bd],0x8
10005541:	74 04                	je     10005547 <ssfn_render+0x1b38>
10005543:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
10005547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000554b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
1000554f:	89 85 90 f5 00 00    	mov    DWORD PTR [ebp+0xf590],eax
10005555:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
1000555c:	66 01 78 0a          	add    WORD PTR [eax+0xa],di
10005560:	8b bc 24 04 06 01 00 	mov    edi,DWORD PTR [esp+0x10604]
10005567:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000556a:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
1000556e:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10005574:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
10005578:	0f af 44 24 04       	imul   eax,DWORD PTR [esp+0x4]
1000557d:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10005581:	99                   	cdq    
10005582:	f7 f9                	idiv   ecx
10005584:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10005588:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
1000558e:	25 80 00 00 00       	and    eax,0x80
10005593:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10005597:	0f 85 ec 01 00 00    	jne    10005789 <ssfn_render+0x1d7a>
1000559d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100055a0:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
100055a4:	0f 84 df 01 00 00    	je     10005789 <ssfn_render+0x1d7a>
100055aa:	8d 94 24 d4 00 00 00 	lea    edx,[esp+0xd4]
100055b1:	52                   	push   edx
100055b2:	8d 94 24 e0 00 00 00 	lea    edx,[esp+0xe0]
100055b9:	52                   	push   edx
100055ba:	8b 94 24 10 06 01 00 	mov    edx,DWORD PTR [esp+0x10610]
100055c1:	03 94 24 e0 00 00 00 	add    edx,DWORD PTR [esp+0xe0]
100055c8:	52                   	push   edx
100055c9:	50                   	push   eax
100055ca:	e8 b9 d2 ff ff       	call   10002888 <_ssfn_c>
100055cf:	83 c4 10             	add    esp,0x10
100055d2:	85 c0                	test   eax,eax
100055d4:	0f 84 af 01 00 00    	je     10005789 <ssfn_render+0x1d7a>
100055da:	83 bc 24 d4 00 00 00 20 	cmp    DWORD PTR [esp+0xd4],0x20
100055e2:	0f 86 a1 01 00 00    	jbe    10005789 <ssfn_render+0x1d7a>
100055e8:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
100055ee:	8d 48 06             	lea    ecx,[eax+0x6]
100055f1:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
100055f7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
100055fb:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
100055ff:	0f 8e 84 01 00 00    	jle    10005789 <ssfn_render+0x1d7a>
10005605:	8a 19                	mov    bl,BYTE PTR [ecx]
10005607:	88 5c 24 0c          	mov    BYTE PTR [esp+0xc],bl
1000560b:	8a 18                	mov    bl,BYTE PTR [eax]
1000560d:	83 e3 40             	and    ebx,0x40
10005610:	80 7c 24 0c ff       	cmp    BYTE PTR [esp+0xc],0xff
10005615:	75 14                	jne    1000562b <ssfn_render+0x1c1c>
10005617:	80 79 01 ff          	cmp    BYTE PTR [ecx+0x1],0xff
1000561b:	75 0e                	jne    1000562b <ssfn_render+0x1c1c>
1000561d:	80 fb 01             	cmp    bl,0x1
10005620:	19 c0                	sbb    eax,eax
10005622:	8d 4c 01 06          	lea    ecx,[ecx+eax*1+0x6]
10005626:	e9 55 01 00 00       	jmp    10005780 <ssfn_render+0x1d71>
1000562b:	0f b6 71 04          	movzx  esi,BYTE PTR [ecx+0x4]
1000562f:	0f b6 51 03          	movzx  edx,BYTE PTR [ecx+0x3]
10005633:	c1 e6 10             	shl    esi,0x10
10005636:	0f b6 79 02          	movzx  edi,BYTE PTR [ecx+0x2]
1000563a:	84 db                	test   bl,bl
1000563c:	74 08                	je     10005646 <ssfn_render+0x1c37>
1000563e:	8b 79 02             	mov    edi,DWORD PTR [ecx+0x2]
10005641:	83 c1 06             	add    ecx,0x6
10005644:	eb 0c                	jmp    10005652 <ssfn_render+0x1c43>
10005646:	c1 e2 08             	shl    edx,0x8
10005649:	83 c1 05             	add    ecx,0x5
1000564c:	89 d0                	mov    eax,edx
1000564e:	09 f0                	or     eax,esi
10005650:	09 c7                	or     edi,eax
10005652:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10005655:	89 04 24             	mov    DWORD PTR [esp],eax
10005658:	01 f8                	add    eax,edi
1000565a:	8a 10                	mov    dl,BYTE PTR [eax]
1000565c:	88 d3                	mov    bl,dl
1000565e:	83 e3 e0             	and    ebx,0xffffffe0
10005661:	80 fb c0             	cmp    bl,0xc0
10005664:	0f 85 16 01 00 00    	jne    10005780 <ssfn_render+0x1d71>
1000566a:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
1000566e:	c1 e2 08             	shl    edx,0x8
10005671:	83 c0 02             	add    eax,0x2
10005674:	81 e2 00 1f 00 00    	and    edx,0x1f00
1000567a:	8b b4 24 d4 00 00 00 	mov    esi,DWORD PTR [esp+0xd4]
10005681:	09 da                	or     edx,ebx
10005683:	8d 7a 01             	lea    edi,[edx+0x1]
10005686:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
1000568a:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
1000568e:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
10005693:	0f 84 e7 00 00 00    	je     10005780 <ssfn_render+0x1d71>
10005699:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
1000569d:	0f b7 10             	movzx  edx,WORD PTR [eax]
100056a0:	c1 e3 10             	shl    ebx,0x10
100056a3:	81 e3 00 00 0f 00    	and    ebx,0xf0000
100056a9:	09 d3                	or     ebx,edx
100056ab:	39 de                	cmp    esi,ebx
100056ad:	0f 82 c5 00 00 00    	jb     10005778 <ssfn_render+0x1d69>
100056b3:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
100056b6:	89 d7                	mov    edi,edx
100056b8:	c1 e7 10             	shl    edi,0x10
100056bb:	81 e7 00 00 0f 00    	and    edi,0xf0000
100056c1:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
100056c5:	0f b7 78 03          	movzx  edi,WORD PTR [eax+0x3]
100056c9:	0b 7c 24 14          	or     edi,DWORD PTR [esp+0x14]
100056cd:	39 fe                	cmp    esi,edi
100056cf:	0f 87 a3 00 00 00    	ja     10005778 <ssfn_render+0x1d69>
100056d5:	29 de                	sub    esi,ebx
100056d7:	c0 ea 04             	shr    dl,0x4
100056da:	89 b4 24 d4 00 00 00 	mov    DWORD PTR [esp+0xd4],esi
100056e1:	0f b6 d2             	movzx  edx,dl
100056e4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
100056e7:	89 d3                	mov    ebx,edx
100056e9:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
100056ed:	c1 e3 10             	shl    ebx,0x10
100056f0:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
100056f3:	09 da                	or     edx,ebx
100056f5:	c0 e8 04             	shr    al,0x4
100056f8:	c1 e0 18             	shl    eax,0x18
100056fb:	09 c2                	or     edx,eax
100056fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
10005700:	03 50 18             	add    edx,DWORD PTR [eax+0x18]
10005703:	01 c2                	add    edx,eax
10005705:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10005708:	8d 7c 07 fc          	lea    edi,[edi+eax*1-0x4]
1000570c:	39 d7                	cmp    edi,edx
1000570e:	76 70                	jbe    10005780 <ssfn_render+0x1d71>
10005710:	8a 1a                	mov    bl,BYTE PTR [edx]
10005712:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
10005719:	89 de                	mov    esi,ebx
1000571b:	83 e6 7f             	and    esi,0x7f
1000571e:	39 c6                	cmp    esi,eax
10005720:	73 1d                	jae    1000573f <ssfn_render+0x1d30>
10005722:	48                   	dec    eax
10005723:	bb 02 00 00 00       	mov    ebx,0x2
10005728:	29 f0                	sub    eax,esi
1000572a:	89 84 24 d4 00 00 00 	mov    DWORD PTR [esp+0xd4],eax
10005731:	0f b6 02             	movzx  eax,BYTE PTR [edx]
10005734:	84 c0                	test   al,al
10005736:	78 03                	js     1000573b <ssfn_render+0x1d2c>
10005738:	8d 58 02             	lea    ebx,[eax+0x2]
1000573b:	01 da                	add    edx,ebx
1000573d:	eb cd                	jmp    1000570c <ssfn_render+0x1cfd>
1000573f:	be 01 00 00 00       	mov    esi,0x1
10005744:	84 db                	test   bl,bl
10005746:	78 03                	js     1000574b <ssfn_render+0x1d3c>
10005748:	8d 70 01             	lea    esi,[eax+0x1]
1000574b:	0f be 04 32          	movsx  eax,BYTE PTR [edx+esi*1]
1000574f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
10005752:	0f af 44 24 04       	imul   eax,DWORD PTR [esp+0x4]
10005757:	0f b6 5f 0b          	movzx  ebx,BYTE PTR [edi+0xb]
1000575b:	99                   	cdq    
1000575c:	8b bc 24 04 06 01 00 	mov    edi,DWORD PTR [esp+0x10604]
10005763:	f7 fb                	idiv   ebx
10005765:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
1000576a:	74 06                	je     10005772 <ssfn_render+0x1d63>
1000576c:	66 01 47 0a          	add    WORD PTR [edi+0xa],ax
10005770:	eb 0e                	jmp    10005780 <ssfn_render+0x1d71>
10005772:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10005776:	eb 08                	jmp    10005780 <ssfn_render+0x1d71>
10005778:	83 c0 08             	add    eax,0x8
1000577b:	e9 0a ff ff ff       	jmp    1000568a <ssfn_render+0x1c7b>
10005780:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
10005784:	e9 68 fe ff ff       	jmp    100055f1 <ssfn_render+0x1be2>
10005789:	8b 84 24 d8 00 00 00 	mov    eax,DWORD PTR [esp+0xd8]
10005790:	eb 7f                	jmp    10005811 <ssfn_render+0x1e02>
10005792:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
1000579d:	e9 ab e4 ff ff       	jmp    10003c4d <ssfn_render+0x23e>
100057a2:	8d 84 24 d0 00 00 00 	lea    eax,[esp+0xd0]
100057a9:	50                   	push   eax
100057aa:	8d 84 24 dc 00 00 00 	lea    eax,[esp+0xdc]
100057b1:	50                   	push   eax
100057b2:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
100057b9:	51                   	push   ecx
100057ba:	e8 c9 d0 ff ff       	call   10002888 <_ssfn_c>
100057bf:	83 c4 10             	add    esp,0x10
100057c2:	89 c1                	mov    ecx,eax
100057c4:	85 c0                	test   eax,eax
100057c6:	0f 84 7a e4 ff ff    	je     10003c46 <ssfn_render+0x237>
100057cc:	e9 fc e4 ff ff       	jmp    10003ccd <ssfn_render+0x2be>
100057d1:	8b 04 87             	mov    eax,DWORD PTR [edi+eax*4]
100057d4:	f6 40 08 30          	test   BYTE PTR [eax+0x8],0x30
100057d8:	75 0c                	jne    100057e6 <ssfn_render+0x1dd7>
100057da:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
100057e1:	e9 90 e4 ff ff       	jmp    10003c76 <ssfn_render+0x267>
100057e6:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
100057ed:	51                   	push   ecx
100057ee:	8d 94 24 dc 00 00 00 	lea    edx,[esp+0xdc]
100057f5:	52                   	push   edx
100057f6:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
100057fd:	50                   	push   eax
100057fe:	e8 85 d0 ff ff       	call   10002888 <_ssfn_c>
10005803:	83 c4 10             	add    esp,0x10
10005806:	89 c1                	mov    ecx,eax
10005808:	85 c0                	test   eax,eax
1000580a:	74 ce                	je     100057da <ssfn_render+0x1dcb>
1000580c:	e9 bc e4 ff ff       	jmp    10003ccd <ssfn_render+0x2be>
10005811:	81 c4 ec 05 01 00    	add    esp,0x105ec
10005817:	5b                   	pop    ebx
10005818:	5e                   	pop    esi
10005819:	5f                   	pop    edi
1000581a:	5d                   	pop    ebp
1000581b:	c3                   	ret    

1000581c <ssfn_bbox>:
1000581c:	55                   	push   ebp
1000581d:	57                   	push   edi
1000581e:	56                   	push   esi
1000581f:	53                   	push   ebx
10005820:	83 ec 3c             	sub    esp,0x3c
10005823:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
10005828:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
1000582c:	0f 94 c0             	sete   al
1000582f:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
10005834:	0f 94 c2             	sete   dl
10005837:	09 d0                	or     eax,edx
10005839:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
1000583e:	0f 94 c2             	sete   dl
10005841:	09 d0                	or     eax,edx
10005843:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
10005848:	0f 94 c2             	sete   dl
1000584b:	09 d0                	or     eax,edx
1000584d:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
10005852:	0f 94 c2             	sete   dl
10005855:	08 d0                	or     al,dl
10005857:	0f 85 7c 01 00 00    	jne    100059d9 <ssfn_bbox+0x1bd>
1000585d:	85 db                	test   ebx,ebx
1000585f:	0f 84 74 01 00 00    	je     100059d9 <ssfn_bbox+0x1bd>
10005865:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10005869:	31 f6                	xor    esi,esi
1000586b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10005871:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10005875:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000587b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
1000587f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10005885:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10005889:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000588f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10005893:	80 38 00             	cmp    BYTE PTR [eax],0x0
10005896:	0f 84 42 01 00 00    	je     100059de <ssfn_bbox+0x1c2>
1000589c:	8d 54 24 18          	lea    edx,[esp+0x18]
100058a0:	b9 06 00 00 00       	mov    ecx,0x6
100058a5:	89 d7                	mov    edi,edx
100058a7:	89 f0                	mov    eax,esi
100058a9:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
100058b3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100058b5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
100058bd:	31 ff                	xor    edi,edi
100058bf:	bd 01 00 00 00       	mov    ebp,0x1
100058c4:	50                   	push   eax
100058c5:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100058c9:	8d 44 24 20          	lea    eax,[esp+0x20]
100058cd:	50                   	push   eax
100058ce:	53                   	push   ebx
100058cf:	e8 fc ff ff ff       	call   100058d0 <ssfn_bbox+0xb4>	100058d0: R_386_PC32	ssfn_render
100058d4:	83 c4 10             	add    esp,0x10
100058d7:	89 c6                	mov    esi,eax
100058d9:	85 c0                	test   eax,eax
100058db:	74 6f                	je     1000594c <ssfn_bbox+0x130>
100058dd:	0f 88 fb 00 00 00    	js     100059de <ssfn_bbox+0x1c2>
100058e3:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
100058e9:	85 c0                	test   eax,eax
100058eb:	0f 84 ed 00 00 00    	je     100059de <ssfn_bbox+0x1c2>
100058f1:	85 ed                	test   ebp,ebp
100058f3:	74 0b                	je     10005900 <ssfn_bbox+0xe4>
100058f5:	8b bb 88 f5 00 00    	mov    edi,DWORD PTR [ebx+0xf588]
100058fb:	66 01 7c 24 22       	add    WORD PTR [esp+0x22],di
10005900:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10005904:	74 12                	je     10005918 <ssfn_bbox+0xfc>
10005906:	8b 83 8c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf58c]
1000590c:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
10005910:	7d 2f                	jge    10005941 <ssfn_bbox+0x125>
10005912:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10005916:	eb 29                	jmp    10005941 <ssfn_bbox+0x125>
10005918:	0f b7 08             	movzx  ecx,WORD PTR [eax]
1000591b:	0f bf 6c 24 1c       	movsx  ebp,WORD PTR [esp+0x1c]
10005920:	39 cd                	cmp    ebp,ecx
10005922:	7d 05                	jge    10005929 <ssfn_bbox+0x10d>
10005924:	66 89 4c 24 1c       	mov    WORD PTR [esp+0x1c],cx
10005929:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
1000592d:	66 8b 4c 24 1e       	mov    cx,WORD PTR [esp+0x1e]
10005932:	84 d2                	test   dl,dl
10005934:	75 04                	jne    1000593a <ssfn_bbox+0x11e>
10005936:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
1000593a:	01 ca                	add    edx,ecx
1000593c:	66 89 54 24 1e       	mov    WORD PTR [esp+0x1e],dx
10005941:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
10005945:	31 ed                	xor    ebp,ebp
10005947:	e9 78 ff ff ff       	jmp    100058c4 <ssfn_bbox+0xa8>
1000594c:	f6 83 bc f5 00 00 02 	test   BYTE PTR [ebx+0xf5bc],0x2
10005953:	74 23                	je     10005978 <ssfn_bbox+0x15c>
10005955:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10005958:	f6 40 08 20          	test   BYTE PTR [eax+0x8],0x20
1000595c:	75 1a                	jne    10005978 <ssfn_bbox+0x15c>
1000595e:	8b 83 c0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c0]
10005964:	b9 04 00 00 00       	mov    ecx,0x4
10005969:	99                   	cdq    
1000596a:	f7 f9                	idiv   ecx
1000596c:	66 03 44 24 22       	add    ax,WORD PTR [esp+0x22]
10005971:	29 f8                	sub    eax,edi
10005973:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
10005978:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
1000597e:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10005982:	74 29                	je     100059ad <ssfn_bbox+0x191>
10005984:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
10005989:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
1000598d:	89 01                	mov    DWORD PTR [ecx],eax
1000598f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10005993:	8b 83 c4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c4]
10005999:	89 01                	mov    DWORD PTR [ecx],eax
1000599b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000599f:	89 38                	mov    DWORD PTR [eax],edi
100059a1:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100059a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100059a9:	89 38                	mov    DWORD PTR [eax],edi
100059ab:	eb 31                	jmp    100059de <ssfn_bbox+0x1c2>
100059ad:	0f bf 44 24 1c       	movsx  eax,WORD PTR [esp+0x1c]
100059b2:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
100059b6:	89 07                	mov    DWORD PTR [edi],eax
100059b8:	0f bf 44 24 24       	movsx  eax,WORD PTR [esp+0x24]
100059bd:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
100059c1:	89 07                	mov    DWORD PTR [edi],eax
100059c3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100059c7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100059cd:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100059d1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100059d7:	eb 05                	jmp    100059de <ssfn_bbox+0x1c2>
100059d9:	be fc ff ff ff       	mov    esi,0xfffffffc
100059de:	83 c4 3c             	add    esp,0x3c
100059e1:	89 f0                	mov    eax,esi
100059e3:	5b                   	pop    ebx
100059e4:	5e                   	pop    esi
100059e5:	5f                   	pop    edi
100059e6:	5d                   	pop    ebp
100059e7:	c3                   	ret    

100059e8 <ssfn_text>:
100059e8:	55                   	push   ebp
100059e9:	57                   	push   edi
100059ea:	56                   	push   esi
100059eb:	53                   	push   ebx
100059ec:	83 ec 1c             	sub    esp,0x1c
100059ef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100059f3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
100059f7:	85 f6                	test   esi,esi
100059f9:	0f 84 b2 00 00 00    	je     10005ab1 <ssfn_text+0xc9>
100059ff:	85 ed                	test   ebp,ebp
10005a01:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
10005a06:	0f 84 a5 00 00 00    	je     10005ab1 <ssfn_text+0xc9>
10005a0c:	83 ec 0c             	sub    esp,0xc
10005a0f:	6a 18                	push   0x18
10005a11:	e8 fc ff ff ff       	call   10005a12 <ssfn_text+0x2a>	10005a12: R_386_PC32	malloc
10005a16:	83 c4 10             	add    esp,0x10
10005a19:	89 c3                	mov    ebx,eax
10005a1b:	85 c0                	test   eax,eax
10005a1d:	0f 84 8e 00 00 00    	je     10005ab1 <ssfn_text+0xc9>
10005a23:	31 c0                	xor    eax,eax
10005a25:	b9 06 00 00 00       	mov    ecx,0x6
10005a2a:	89 df                	mov    edi,ebx
10005a2c:	80 3e 00             	cmp    BYTE PTR [esi],0x0
10005a2f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10005a31:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10005a35:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10005a38:	74 79                	je     10005ab3 <ssfn_text+0xcb>
10005a3a:	8d 43 0c             	lea    eax,[ebx+0xc]
10005a3d:	52                   	push   edx
10005a3e:	52                   	push   edx
10005a3f:	50                   	push   eax
10005a40:	8d 43 0a             	lea    eax,[ebx+0xa]
10005a43:	50                   	push   eax
10005a44:	8d 43 06             	lea    eax,[ebx+0x6]
10005a47:	50                   	push   eax
10005a48:	8d 43 04             	lea    eax,[ebx+0x4]
10005a4b:	50                   	push   eax
10005a4c:	56                   	push   esi
10005a4d:	55                   	push   ebp
10005a4e:	e8 fc ff ff ff       	call   10005a4f <ssfn_text+0x67>	10005a4f: R_386_PC32	ssfn_bbox
10005a53:	83 c4 20             	add    esp,0x20
10005a56:	85 c0                	test   eax,eax
10005a58:	75 59                	jne    10005ab3 <ssfn_text+0xcb>
10005a5a:	83 ec 0c             	sub    esp,0xc
10005a5d:	0f bf 4b 04          	movsx  ecx,WORD PTR [ebx+0x4]
10005a61:	0f bf 43 06          	movsx  eax,WORD PTR [ebx+0x6]
10005a65:	0f af c8             	imul   ecx,eax
10005a68:	c1 e1 02             	shl    ecx,0x2
10005a6b:	51                   	push   ecx
10005a6c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10005a70:	e8 fc ff ff ff       	call   10005a71 <ssfn_text+0x89>	10005a71: R_386_PC32	malloc
10005a75:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10005a79:	89 c7                	mov    edi,eax
10005a7b:	89 03                	mov    DWORD PTR [ebx],eax
10005a7d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
10005a81:	83 c4 10             	add    esp,0x10
10005a84:	f3 aa                	rep stos BYTE PTR es:[edi],al
10005a86:	50                   	push   eax
10005a87:	56                   	push   esi
10005a88:	53                   	push   ebx
10005a89:	55                   	push   ebp
10005a8a:	e8 fc ff ff ff       	call   10005a8b <ssfn_text+0xa3>	10005a8b: R_386_PC32	ssfn_render
10005a8f:	83 c4 10             	add    esp,0x10
10005a92:	85 c0                	test   eax,eax
10005a94:	7e 04                	jle    10005a9a <ssfn_text+0xb2>
10005a96:	01 c6                	add    esi,eax
10005a98:	eb ec                	jmp    10005a86 <ssfn_text+0x9e>
10005a9a:	74 17                	je     10005ab3 <ssfn_text+0xcb>
10005a9c:	83 ec 0c             	sub    esp,0xc
10005a9f:	ff 33                	push   DWORD PTR [ebx]
10005aa1:	e8 fc ff ff ff       	call   10005aa2 <ssfn_text+0xba>	10005aa2: R_386_PC32	free
10005aa6:	89 1c 24             	mov    DWORD PTR [esp],ebx
10005aa9:	e8 fc ff ff ff       	call   10005aaa <ssfn_text+0xc2>	10005aaa: R_386_PC32	free
10005aae:	83 c4 10             	add    esp,0x10
10005ab1:	31 db                	xor    ebx,ebx
10005ab3:	83 c4 1c             	add    esp,0x1c
10005ab6:	89 d8                	mov    eax,ebx
10005ab8:	5b                   	pop    ebx
10005ab9:	5e                   	pop    esi
10005aba:	5f                   	pop    edi
10005abb:	5d                   	pop    ebp
10005abc:	c3                   	ret    

10005abd <loadSSFNFont(Font*, int)>:
10005abd:	55                   	push   ebp
10005abe:	57                   	push   edi
10005abf:	56                   	push   esi
10005ac0:	53                   	push   ebx
10005ac1:	81 ec 34 01 00 00    	sub    esp,0x134
10005ac7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
10005ace:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
10005ad5:	e8 fc ff ff ff       	call   10005ad6 <loadSSFNFont(Font*, int)+0x19>	10005ad6: R_386_PC32	lookupInFontTableByNameOnly(char const*, int)
10005ada:	83 c4 10             	add    esp,0x10
10005add:	83 f8 ff             	cmp    eax,0xffffffff
10005ae0:	0f 85 44 01 00 00    	jne    10005c2a <loadSSFNFont(Font*, int)+0x16d>
10005ae6:	50                   	push   eax
10005ae7:	50                   	push   eax
10005ae8:	68 49 87 00 10       	push   0x10008749	10005ae9: R_386_32	.text
10005aed:	8d 74 24 2c          	lea    esi,[esp+0x2c]
10005af1:	56                   	push   esi
10005af2:	e8 fc ff ff ff       	call   10005af3 <loadSSFNFont(Font*, int)+0x36>	10005af3: R_386_PC32	strcpy
10005af7:	58                   	pop    eax
10005af8:	5a                   	pop    edx
10005af9:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
10005b00:	56                   	push   esi
10005b01:	e8 fc ff ff ff       	call   10005b02 <loadSSFNFont(Font*, int)+0x45>	10005b02: R_386_PC32	strcat
10005b06:	59                   	pop    ecx
10005b07:	5b                   	pop    ebx
10005b08:	68 5e 87 00 10       	push   0x1000875e	10005b09: R_386_32	.text
10005b0d:	56                   	push   esi
10005b0e:	e8 fc ff ff ff       	call   10005b0f <loadSSFNFont(Font*, int)+0x52>	10005b0f: R_386_PC32	strcat
10005b13:	5f                   	pop    edi
10005b14:	5d                   	pop    ebp
10005b15:	56                   	push   esi
10005b16:	68 63 87 00 10       	push   0x10008763	10005b17: R_386_32	.text
10005b1b:	e8 fc ff ff ff       	call   10005b1c <loadSSFNFont(Font*, int)+0x5f>	10005b1c: R_386_PC32	Dbg::kprintf(char const*, ...)
10005b20:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10005b27:	e8 fc ff ff ff       	call   10005b28 <loadSSFNFont(Font*, int)+0x6b>	10005b28: R_386_PC32	malloc
10005b2c:	83 c4 0c             	add    esp,0xc
10005b2f:	89 c3                	mov    ebx,eax
10005b31:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005b33: R_386_32	kernelProcess
10005b37:	56                   	push   esi
10005b38:	50                   	push   eax
10005b39:	e8 fc ff ff ff       	call   10005b3a <loadSSFNFont(Font*, int)+0x7d>	10005b3a: R_386_PC32	File::File(char const*, Process*)
10005b3e:	83 c4 10             	add    esp,0x10
10005b41:	85 db                	test   ebx,ebx
10005b43:	75 0d                	jne    10005b52 <loadSSFNFont(Font*, int)+0x95>
10005b45:	83 ec 0c             	sub    esp,0xc
10005b48:	68 76 87 00 10       	push   0x10008776	10005b49: R_386_32	.text
10005b4d:	e9 8d 00 00 00       	jmp    10005bdf <loadSSFNFont(Font*, int)+0x122>
10005b52:	50                   	push   eax
10005b53:	50                   	push   eax
10005b54:	6a 01                	push   0x1
10005b56:	53                   	push   ebx
10005b57:	e8 fc ff ff ff       	call   10005b58 <loadSSFNFont(Font*, int)+0x9b>	10005b58: R_386_PC32	File::open(FileOpenMode)
10005b5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10005b60:	83 c4 10             	add    esp,0x10
10005b63:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10005b68:	74 1a                	je     10005b84 <loadSSFNFont(Font*, int)+0xc7>
10005b6a:	83 ec 0c             	sub    esp,0xc
10005b6d:	68 8b 87 00 10       	push   0x1000878b	10005b6e: R_386_32	.text
10005b72:	e8 fc ff ff ff       	call   10005b73 <loadSSFNFont(Font*, int)+0xb6>	10005b73: R_386_PC32	Dbg::kprintf(char const*, ...)
10005b77:	8b 03                	mov    eax,DWORD PTR [ebx]
10005b79:	89 1c 24             	mov    DWORD PTR [esp],ebx
10005b7c:	ff 50 08             	call   DWORD PTR [eax+0x8]
10005b7f:	e9 ec 00 00 00       	jmp    10005c70 <loadSSFNFont(Font*, int)+0x1b3>
10005b84:	51                   	push   ecx
10005b85:	8d 44 24 17          	lea    eax,[esp+0x17]
10005b89:	50                   	push   eax
10005b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
10005b8e:	50                   	push   eax
10005b8f:	53                   	push   ebx
10005b90:	e8 fc ff ff ff       	call   10005b91 <loadSSFNFont(Font*, int)+0xd4>	10005b91: R_386_PC32	File::stat(unsigned long long*, bool*)
10005b95:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
10005b99:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
10005b9d:	89 3c 24             	mov    DWORD PTR [esp],edi
10005ba0:	e8 fc ff ff ff       	call   10005ba1 <loadSSFNFont(Font*, int)+0xe4>	10005ba1: R_386_PC32	malloc
10005ba5:	89 c6                	mov    esi,eax
10005ba7:	58                   	pop    eax
10005ba8:	8b 03                	mov    eax,DWORD PTR [ebx]
10005baa:	8d 4c 24 20          	lea    ecx,[esp+0x20]
10005bae:	51                   	push   ecx
10005baf:	56                   	push   esi
10005bb0:	55                   	push   ebp
10005bb1:	57                   	push   edi
10005bb2:	53                   	push   ebx
10005bb3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10005bb6:	83 c4 14             	add    esp,0x14
10005bb9:	53                   	push   ebx
10005bba:	e8 fc ff ff ff       	call   10005bbb <loadSSFNFont(Font*, int)+0xfe>	10005bbb: R_386_PC32	File::close()
10005bbf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10005bc3:	83 c4 10             	add    esp,0x10
10005bc6:	89 c1                	mov    ecx,eax
10005bc8:	c1 f9 1f             	sar    ecx,0x1f
10005bcb:	3b 4c 24 1c          	cmp    ecx,DWORD PTR [esp+0x1c]
10005bcf:	75 06                	jne    10005bd7 <loadSSFNFont(Font*, int)+0x11a>
10005bd1:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10005bd5:	74 17                	je     10005bee <loadSSFNFont(Font*, int)+0x131>
10005bd7:	52                   	push   edx
10005bd8:	52                   	push   edx
10005bd9:	50                   	push   eax
10005bda:	68 a0 87 00 10       	push   0x100087a0	10005bdb: R_386_32	.text
10005bdf:	e8 fc ff ff ff       	call   10005be0 <loadSSFNFont(Font*, int)+0x123>	10005be0: R_386_PC32	Dbg::kprintf(char const*, ...)
10005be4:	83 c4 10             	add    esp,0x10
10005be7:	31 c0                	xor    eax,eax
10005be9:	e9 87 00 00 00       	jmp    10005c75 <loadSSFNFont(Font*, int)+0x1b8>
10005bee:	83 ec 0c             	sub    esp,0xc
10005bf1:	68 c8 f5 00 00       	push   0xf5c8
10005bf6:	e8 fc ff ff ff       	call   10005bf7 <loadSSFNFont(Font*, int)+0x13a>	10005bf7: R_386_PC32	malloc
10005bfb:	b9 72 3d 00 00       	mov    ecx,0x3d72
10005c00:	89 c2                	mov    edx,eax
10005c02:	89 c7                	mov    edi,eax
10005c04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10005c08:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10005c0a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
10005c11:	89 90 90 04 00 00    	mov    DWORD PTR [eax+0x490],edx
10005c17:	5f                   	pop    edi
10005c18:	5d                   	pop    ebp
10005c19:	56                   	push   esi
10005c1a:	52                   	push   edx
10005c1b:	e8 fc ff ff ff       	call   10005c1c <loadSSFNFont(Font*, int)+0x15f>	10005c1c: R_386_PC32	ssfn_load
10005c20:	89 34 24             	mov    DWORD PTR [esp],esi
10005c23:	e8 fc ff ff ff       	call   10005c24 <loadSSFNFont(Font*, int)+0x167>	10005c24: R_386_PC32	free
10005c28:	eb 46                	jmp    10005c70 <loadSSFNFont(Font*, int)+0x1b3>
10005c2a:	89 c6                	mov    esi,eax
10005c2c:	50                   	push   eax
10005c2d:	50                   	push   eax
10005c2e:	56                   	push   esi
10005c2f:	68 bc 87 00 10       	push   0x100087bc	10005c30: R_386_32	.text
10005c34:	e8 fc ff ff ff       	call   10005c35 <loadSSFNFont(Font*, int)+0x178>	10005c35: R_386_PC32	Dbg::kprintf(char const*, ...)
10005c39:	89 34 24             	mov    DWORD PTR [esp],esi
10005c3c:	e8 fc ff ff ff       	call   10005c3d <loadSSFNFont(Font*, int)+0x180>	10005c3d: R_386_PC32	getFontFromHandle(int)
10005c41:	5a                   	pop    edx
10005c42:	89 c6                	mov    esi,eax
10005c44:	59                   	pop    ecx
10005c45:	50                   	push   eax
10005c46:	68 d2 87 00 10       	push   0x100087d2	10005c47: R_386_32	.text
10005c4b:	e8 fc ff ff ff       	call   10005c4c <loadSSFNFont(Font*, int)+0x18f>	10005c4c: R_386_PC32	Dbg::kprintf(char const*, ...)
10005c50:	8b 8c 24 50 01 00 00 	mov    ecx,DWORD PTR [esp+0x150]
10005c57:	8b 86 90 04 00 00    	mov    eax,DWORD PTR [esi+0x490]
10005c5d:	89 81 90 04 00 00    	mov    DWORD PTR [ecx+0x490],eax
10005c63:	5b                   	pop    ebx
10005c64:	5e                   	pop    esi
10005c65:	50                   	push   eax
10005c66:	68 e8 87 00 10       	push   0x100087e8	10005c67: R_386_32	.text
10005c6b:	e8 fc ff ff ff       	call   10005c6c <loadSSFNFont(Font*, int)+0x1af>	10005c6c: R_386_PC32	Dbg::kprintf(char const*, ...)
10005c70:	83 c4 10             	add    esp,0x10
10005c73:	b0 01                	mov    al,0x1
10005c75:	81 c4 2c 01 00 00    	add    esp,0x12c
10005c7b:	5b                   	pop    ebx
10005c7c:	5e                   	pop    esi
10005c7d:	5f                   	pop    edi
10005c7e:	5d                   	pop    ebp
10005c7f:	c3                   	ret    

10005c80 <getSSFNFontRegion(Font*, int, int*, int*)>:
10005c80:	55                   	push   ebp
10005c81:	57                   	push   edi
10005c82:	56                   	push   esi
10005c83:	53                   	push   ebx
10005c84:	83 ec 4c             	sub    esp,0x4c
10005c87:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
10005c8b:	8b 5c 24 6c          	mov    ebx,DWORD PTR [esp+0x6c]
10005c8f:	8b 96 84 00 00 00    	mov    edx,DWORD PTR [esi+0x84]
10005c95:	89 d0                	mov    eax,edx
10005c97:	83 e0 01             	and    eax,0x1
10005c9a:	f6 c2 02             	test   dl,0x2
10005c9d:	74 03                	je     10005ca2 <getSSFNFontRegion(Font*, int, int*, int*)+0x22>
10005c9f:	83 c8 02             	or     eax,0x2
10005ca2:	f6 c2 04             	test   dl,0x4
10005ca5:	74 03                	je     10005caa <getSSFNFontRegion(Font*, int, int*, int*)+0x2a>
10005ca7:	83 c8 10             	or     eax,0x10
10005caa:	80 e2 08             	and    dl,0x8
10005cad:	74 03                	je     10005cb2 <getSSFNFontRegion(Font*, int, int*, int*)+0x32>
10005caf:	83 c8 20             	or     eax,0x20
10005cb2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
10005cb6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
10005cbb:	88 54 24 1e          	mov    BYTE PTR [esp+0x1e],dl
10005cbf:	0d 40 02 00 00       	or     eax,0x240
10005cc4:	83 ec 0c             	sub    esp,0xc
10005cc7:	ff b6 80 00 00 00    	push   DWORD PTR [esi+0x80]
10005ccd:	50                   	push   eax
10005cce:	6a 00                	push   0x0
10005cd0:	68 ff 00 00 00       	push   0xff
10005cd5:	ff b6 90 04 00 00    	push   DWORD PTR [esi+0x490]
10005cdb:	e8 fc ff ff ff       	call   10005cdc <getSSFNFontRegion(Font*, int, int*, int*)+0x5c>	10005cdc: R_386_PC32	ssfn_select
10005ce0:	83 c4 18             	add    esp,0x18
10005ce3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
10005ce7:	50                   	push   eax
10005ce8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
10005cec:	50                   	push   eax
10005ced:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
10005cf4:	53                   	push   ebx
10005cf5:	8d 6c 24 36          	lea    ebp,[esp+0x36]
10005cf9:	55                   	push   ebp
10005cfa:	ff b6 90 04 00 00    	push   DWORD PTR [esi+0x490]
10005d00:	e8 fc ff ff ff       	call   10005d01 <getSSFNFontRegion(Font*, int, int*, int*)+0x81>	10005d01: R_386_PC32	ssfn_bbox
10005d05:	83 c4 14             	add    esp,0x14
10005d08:	8b 03                	mov    eax,DWORD PTR [ebx]
10005d0a:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
10005d0e:	0f af 07             	imul   eax,DWORD PTR [edi]
10005d11:	c1 e0 02             	shl    eax,0x2
10005d14:	50                   	push   eax
10005d15:	e8 fc ff ff ff       	call   10005d16 <getSSFNFontRegion(Font*, int, int*, int*)+0x96>	10005d16: R_386_PC32	malloc
10005d1a:	66 c7 44 24 42 00 00 	mov    WORD PTR [esp+0x42],0x0
10005d21:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10005d25:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
10005d2d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10005d34:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10005d38:	c7 44 24 48 20 20 20 ff 	mov    DWORD PTR [esp+0x48],0xff202020
10005d40:	8b 13                	mov    edx,DWORD PTR [ebx]
10005d42:	8b 00                	mov    eax,DWORD PTR [eax]
10005d44:	66 89 54 24 3c       	mov    WORD PTR [esp+0x3c],dx
10005d49:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10005d4d:	89 c1                	mov    ecx,eax
10005d4f:	31 c0                	xor    eax,eax
10005d51:	0f af ca             	imul   ecx,edx
10005d54:	c1 e2 02             	shl    edx,0x2
10005d57:	c1 e1 02             	shl    ecx,0x2
10005d5a:	66 89 54 24 40       	mov    WORD PTR [esp+0x40],dx
10005d5f:	f3 aa                	rep stos BYTE PTR es:[edi],al
10005d61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10005d65:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
10005d6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10005d6e:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
10005d73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10005d77:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10005d7b:	83 c4 0c             	add    esp,0xc
10005d7e:	55                   	push   ebp
10005d7f:	8d 44 24 30          	lea    eax,[esp+0x30]
10005d83:	50                   	push   eax
10005d84:	ff b6 90 04 00 00    	push   DWORD PTR [esi+0x490]
10005d8a:	e8 fc ff ff ff       	call   10005d8b <getSSFNFontRegion(Font*, int, int*, int*)+0x10b>	10005d8b: R_386_PC32	ssfn_render
10005d8f:	8b 03                	mov    eax,DWORD PTR [ebx]
10005d91:	8b bc 24 80 00 00 00 	mov    edi,DWORD PTR [esp+0x80]
10005d98:	0f af 07             	imul   eax,DWORD PTR [edi]
10005d9b:	89 04 24             	mov    DWORD PTR [esp],eax
10005d9e:	e8 fc ff ff ff       	call   10005d9f <getSSFNFontRegion(Font*, int, int*, int*)+0x11f>	10005d9f: R_386_PC32	malloc
10005da3:	31 c9                	xor    ecx,ecx
10005da5:	89 c6                	mov    esi,eax
10005da7:	0f bf 44 24 3e       	movsx  eax,WORD PTR [esp+0x3e]
10005dac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10005db0:	0f bf 44 24 3c       	movsx  eax,WORD PTR [esp+0x3c]
10005db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10005db9:	83 c4 10             	add    esp,0x10
10005dbc:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
10005dc0:	7e 23                	jle    10005de5 <getSSFNFontRegion(Font*, int, int*, int*)+0x165>
10005dc2:	8b 2b                	mov    ebp,DWORD PTR [ebx]
10005dc4:	31 d2                	xor    edx,edx
10005dc6:	0f af e9             	imul   ebp,ecx
10005dc9:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
10005dcd:	7e 13                	jle    10005de2 <getSSFNFontRegion(Font*, int, int*, int*)+0x162>
10005dcf:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
10005dd3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
10005dd7:	83 3c 87 00          	cmp    DWORD PTR [edi+eax*4],0x0
10005ddb:	0f 95 04 06          	setne  BYTE PTR [esi+eax*1]
10005ddf:	42                   	inc    edx
10005de0:	eb e7                	jmp    10005dc9 <getSSFNFontRegion(Font*, int, int*, int*)+0x149>
10005de2:	41                   	inc    ecx
10005de3:	eb d7                	jmp    10005dbc <getSSFNFontRegion(Font*, int, int*, int*)+0x13c>
10005de5:	50                   	push   eax
10005de6:	50                   	push   eax
10005de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10005deb:	ff 30                	push   DWORD PTR [eax]
10005ded:	ff 33                	push   DWORD PTR [ebx]
10005def:	56                   	push   esi
10005df0:	6a 00                	push   0x0
10005df2:	6a 00                	push   0x0
10005df4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
10005df8:	e8 fc ff ff ff       	call   10005df9 <getSSFNFontRegion(Font*, int, int*, int*)+0x179>	10005df9: R_386_PC32	createTightFontRegion(int, int, unsigned char*, int, int)
10005dfd:	56                   	push   esi
10005dfe:	e8 fc ff ff ff       	call   10005dff <getSSFNFontRegion(Font*, int, int*, int*)+0x17f>	10005dff: R_386_PC32	free
10005e03:	83 c4 14             	add    esp,0x14
10005e06:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10005e0a:	e8 fc ff ff ff       	call   10005e0b <getSSFNFontRegion(Font*, int, int*, int*)+0x18b>	10005e0b: R_386_PC32	free
10005e0f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10005e13:	83 c4 5c             	add    esp,0x5c
10005e16:	5b                   	pop    ebx
10005e17:	5e                   	pop    esi
10005e18:	5f                   	pop    edi
10005e19:	5d                   	pop    ebp
10005e1a:	c2 04 00             	ret    0x4

10005e1d <videoDrawRect(Video*, int, int, int, int, unsigned int)>:
10005e1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10005e21:	8b 00                	mov    eax,DWORD PTR [eax]
10005e23:	ff 60 28             	jmp    DWORD PTR [eax+0x28]

10005e26 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)>:
10005e26:	55                   	push   ebp
10005e27:	57                   	push   edi
10005e28:	56                   	push   esi
10005e29:	53                   	push   ebx
10005e2a:	83 ec 28             	sub    esp,0x28
10005e2d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10005e31:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10005e35:	53                   	push   ebx
10005e36:	e8 fc ff ff ff       	call   10005e37 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x11>	10005e37: R_386_PC32	Video::getWidth()
10005e3b:	83 c4 10             	add    esp,0x10
10005e3e:	39 f0                	cmp    eax,esi
10005e40:	0f 8c df 00 00 00    	jl     10005f25 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xff>
10005e46:	83 ec 0c             	sub    esp,0xc
10005e49:	53                   	push   ebx
10005e4a:	e8 fc ff ff ff       	call   10005e4b <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x25>	10005e4b: R_386_PC32	Video::getHeight()
10005e4f:	83 c4 10             	add    esp,0x10
10005e52:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
10005e56:	0f 8c c9 00 00 00    	jl     10005f25 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xff>
10005e5c:	89 f7                	mov    edi,esi
10005e5e:	03 7c 24 3c          	add    edi,DWORD PTR [esp+0x3c]
10005e62:	0f 88 bd 00 00 00    	js     10005f25 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xff>
10005e68:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
10005e6c:	03 6c 24 40          	add    ebp,DWORD PTR [esp+0x40]
10005e70:	0f 88 af 00 00 00    	js     10005f25 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xff>
10005e76:	85 f6                	test   esi,esi
10005e78:	79 06                	jns    10005e80 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x5a>
10005e7a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
10005e7e:	31 f6                	xor    esi,esi
10005e80:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10005e85:	79 0c                	jns    10005e93 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x6d>
10005e87:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
10005e8b:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10005e93:	83 ec 0c             	sub    esp,0xc
10005e96:	53                   	push   ebx
10005e97:	e8 fc ff ff ff       	call   10005e98 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x72>	10005e98: R_386_PC32	Video::getWidth()
10005e9c:	83 c4 10             	add    esp,0x10
10005e9f:	39 c7                	cmp    edi,eax
10005ea1:	7e 12                	jle    10005eb5 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x8f>
10005ea3:	83 ec 0c             	sub    esp,0xc
10005ea6:	53                   	push   ebx
10005ea7:	e8 fc ff ff ff       	call   10005ea8 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x82>	10005ea8: R_386_PC32	Video::getWidth()
10005eac:	29 f0                	sub    eax,esi
10005eae:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10005eb2:	83 c4 10             	add    esp,0x10
10005eb5:	83 ec 0c             	sub    esp,0xc
10005eb8:	53                   	push   ebx
10005eb9:	e8 fc ff ff ff       	call   10005eba <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x94>	10005eba: R_386_PC32	Video::getHeight()
10005ebe:	83 c4 10             	add    esp,0x10
10005ec1:	39 c5                	cmp    ebp,eax
10005ec3:	7e 14                	jle    10005ed9 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xb3>
10005ec5:	83 ec 0c             	sub    esp,0xc
10005ec8:	53                   	push   ebx
10005ec9:	e8 fc ff ff ff       	call   10005eca <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xa4>	10005eca: R_386_PC32	Video::getHeight()
10005ece:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10005ed2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10005ed6:	83 c4 10             	add    esp,0x10
10005ed9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10005edd:	89 f8                	mov    eax,edi
10005edf:	2b 44 24 38          	sub    eax,DWORD PTR [esp+0x38]
10005ee3:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
10005ee7:	7e 3c                	jle    10005f25 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xff>
10005ee9:	8d 14 37             	lea    edx,[edi+esi*1]
10005eec:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10005ef0:	80 e2 01             	and    dl,0x1
10005ef3:	74 05                	je     10005efa <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xd4>
10005ef5:	35 ff ff ff 00       	xor    eax,0xffffff
10005efa:	31 ed                	xor    ebp,ebp
10005efc:	39 6c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebp
10005f00:	7e 20                	jle    10005f22 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xfc>
10005f02:	8b 13                	mov    edx,DWORD PTR [ebx]
10005f04:	8d 4c 35 00          	lea    ecx,[ebp+esi*1+0x0]
10005f08:	50                   	push   eax
10005f09:	45                   	inc    ebp
10005f0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10005f0e:	57                   	push   edi
10005f0f:	51                   	push   ecx
10005f10:	53                   	push   ebx
10005f11:	ff 52 24             	call   DWORD PTR [edx+0x24]
10005f14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10005f18:	83 c4 10             	add    esp,0x10
10005f1b:	35 ff ff ff 00       	xor    eax,0xffffff
10005f20:	eb da                	jmp    10005efc <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xd6>
10005f22:	47                   	inc    edi
10005f23:	eb b8                	jmp    10005edd <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xb7>
10005f25:	83 c4 1c             	add    esp,0x1c
10005f28:	5b                   	pop    ebx
10005f29:	5e                   	pop    esi
10005f2a:	5f                   	pop    edi
10005f2b:	5d                   	pop    ebp
10005f2c:	c3                   	ret    

10005f2d <videoSaveAreaUnderCursor(Video*, int, int)>:
10005f2d:	55                   	push   ebp
10005f2e:	57                   	push   edi
10005f2f:	56                   	push   esi
10005f30:	53                   	push   ebx
10005f31:	31 db                	xor    ebx,ebx
10005f33:	83 ec 1c             	sub    esp,0x1c
10005f36:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10005f3a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
10005f3e:	83 ec 0c             	sub    esp,0xc
10005f41:	57                   	push   edi
10005f42:	e8 fc ff ff ff       	call   10005f43 <videoSaveAreaUnderCursor(Video*, int, int)+0x16>	10005f43: R_386_PC32	Video::getHeight()
10005f47:	83 c4 10             	add    esp,0x10
10005f4a:	39 c6                	cmp    esi,eax
10005f4c:	7d 45                	jge    10005f93 <videoSaveAreaUnderCursor(Video*, int, int)+0x66>
10005f4e:	31 ed                	xor    ebp,ebp
10005f50:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10005f54:	83 ec 0c             	sub    esp,0xc
10005f57:	01 ea                	add    edx,ebp
10005f59:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
10005f5d:	57                   	push   edi
10005f5e:	e8 fc ff ff ff       	call   10005f5f <videoSaveAreaUnderCursor(Video*, int, int)+0x32>	10005f5f: R_386_PC32	Video::getWidth()
10005f63:	83 c4 10             	add    esp,0x10
10005f66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10005f6a:	39 d0                	cmp    eax,edx
10005f6c:	7e 19                	jle    10005f87 <videoSaveAreaUnderCursor(Video*, int, int)+0x5a>
10005f6e:	50                   	push   eax
10005f6f:	8b 07                	mov    eax,DWORD PTR [edi]
10005f71:	56                   	push   esi
10005f72:	52                   	push   edx
10005f73:	57                   	push   edi
10005f74:	ff 50 34             	call   DWORD PTR [eax+0x34]
10005f77:	83 c4 10             	add    esp,0x10
10005f7a:	89 84 ab 00 00 00 00 	mov    DWORD PTR [ebx+ebp*4+0x0],eax	10005f7d: R_386_32	cursorBuffer
10005f81:	45                   	inc    ebp
10005f82:	83 fd 20             	cmp    ebp,0x20
10005f85:	75 c9                	jne    10005f50 <videoSaveAreaUnderCursor(Video*, int, int)+0x23>
10005f87:	46                   	inc    esi
10005f88:	83 eb 80             	sub    ebx,0xffffff80
10005f8b:	81 fb 00 10 00 00    	cmp    ebx,0x1000
10005f91:	75 ab                	jne    10005f3e <videoSaveAreaUnderCursor(Video*, int, int)+0x11>
10005f93:	83 c4 1c             	add    esp,0x1c
10005f96:	b8 00 00 00 00       	mov    eax,0x0	10005f97: R_386_32	cursorBuffer
10005f9b:	5b                   	pop    ebx
10005f9c:	5e                   	pop    esi
10005f9d:	5f                   	pop    edi
10005f9e:	5d                   	pop    ebp
10005f9f:	c3                   	ret    

10005fa0 <videoPutpixel(Video*, int, int, unsigned int)>:
10005fa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10005fa4:	8b 00                	mov    eax,DWORD PTR [eax]
10005fa6:	ff 60 24             	jmp    DWORD PTR [eax+0x24]

10005fa9 <videoDrawCursor(Video*, int, int, unsigned int*)>:
10005fa9:	83 ec 18             	sub    esp,0x18
10005fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10005fb0:	8b 10                	mov    edx,DWORD PTR [eax]
10005fb2:	6a 00                	push   0x0
10005fb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10005fb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10005fbc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10005fc0:	50                   	push   eax
10005fc1:	ff 52 30             	call   DWORD PTR [edx+0x30]
10005fc4:	83 c4 2c             	add    esp,0x2c
10005fc7:	c3                   	ret    

10005fc8 <Region::Region()>:
10005fc8:	55                   	push   ebp
10005fc9:	89 e5                	mov    ebp,esp
10005fcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005fce:	c7 40 04 39 94 60 f9 	mov    DWORD PTR [eax+0x4],0xf9609439
10005fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005fd8:	c7 40 08 72 28 c1 f2 	mov    DWORD PTR [eax+0x8],0xf2c12872
10005fdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005fe2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10005fe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005feb:	c7 40 0c ab bc 21 ec 	mov    DWORD PTR [eax+0xc],0xec21bcab
10005ff2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005ff5:	c7 40 10 e4 50 82 e5 	mov    DWORD PTR [eax+0x10],0xe58250e4
10005ffc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005fff:	c7 40 14 1d e5 e2 de 	mov    DWORD PTR [eax+0x14],0xdee2e51d
10006006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006009:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
1000600d:	90                   	nop
1000600e:	5d                   	pop    ebp
1000600f:	c3                   	ret    

10006010 <FontStyle::FontStyle(char const*, int, int)>:
10006010:	55                   	push   ebp
10006011:	89 e5                	mov    ebp,esp
10006013:	83 ec 08             	sub    esp,0x8
10006016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006019:	83 ec 08             	sub    esp,0x8
1000601c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000601f:	50                   	push   eax
10006020:	e8 fc ff ff ff       	call   10006021 <FontStyle::FontStyle(char const*, int, int)+0x11>	10006021: R_386_PC32	strcpy
10006025:	83 c4 10             	add    esp,0x10
10006028:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000602b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000602e:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
10006034:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006037:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
1000603a:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
10006040:	90                   	nop
10006041:	c9                   	leave  
10006042:	c3                   	ret    
10006043:	90                   	nop

10006044 <NFrame::Graphics::Graphics(Video*, Region)>:
10006044:	55                   	push   ebp
10006045:	89 e5                	mov    ebp,esp
10006047:	57                   	push   edi
10006048:	56                   	push   esi
10006049:	53                   	push   ebx
1000604a:	83 ec 0c             	sub    esp,0xc
1000604d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006050:	83 c0 04             	add    eax,0x4
10006053:	83 ec 0c             	sub    esp,0xc
10006056:	50                   	push   eax
10006057:	e8 fc ff ff ff       	call   10006058 <NFrame::Graphics::Graphics(Video*, Region)+0x14>	10006058: R_386_PC32	Region::Region()
1000605c:	83 c4 10             	add    esp,0x10
1000605f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006062:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10006065:	89 10                	mov    DWORD PTR [eax],edx
10006067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000606a:	8d 58 04             	lea    ebx,[eax+0x4]
1000606d:	8d 45 10             	lea    eax,[ebp+0x10]
10006070:	ba 19 00 00 00       	mov    edx,0x19
10006075:	89 df                	mov    edi,ebx
10006077:	89 c6                	mov    esi,eax
10006079:	89 d1                	mov    ecx,edx
1000607b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000607d:	90                   	nop
1000607e:	8d 65 f4             	lea    esp,[ebp-0xc]
10006081:	5b                   	pop    ebx
10006082:	5e                   	pop    esi
10006083:	5f                   	pop    edi
10006084:	5d                   	pop    ebp
10006085:	c3                   	ret    

10006086 <NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)>:
10006086:	55                   	push   ebp
10006087:	89 e5                	mov    ebp,esp
10006089:	57                   	push   edi
1000608a:	56                   	push   esi
1000608b:	53                   	push   ebx
1000608c:	83 ec 3c             	sub    esp,0x3c
1000608f:	8d 45 cc             	lea    eax,[ebp-0x34]
10006092:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10006095:	83 ec 04             	sub    esp,0x4
10006098:	83 ec 1c             	sub    esp,0x1c
1000609b:	89 e0                	mov    eax,esp
1000609d:	89 c3                	mov    ebx,eax
1000609f:	8d 45 0c             	lea    eax,[ebp+0xc]
100060a2:	ba 07 00 00 00       	mov    edx,0x7
100060a7:	89 df                	mov    edi,ebx
100060a9:	89 c6                	mov    esi,eax
100060ab:	89 d1                	mov    ecx,edx
100060ad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100060af:	83 ec 1c             	sub    esp,0x1c
100060b2:	89 e0                	mov    eax,esp
100060b4:	89 c3                	mov    ebx,eax
100060b6:	8d 45 2c             	lea    eax,[ebp+0x2c]
100060b9:	ba 07 00 00 00       	mov    edx,0x7
100060be:	89 df                	mov    edi,ebx
100060c0:	89 c6                	mov    esi,eax
100060c2:	89 d1                	mov    ecx,edx
100060c4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100060c6:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100060c9:	e8 fc ff ff ff       	call   100060ca <NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)+0x44>	100060ca: R_386_PC32	getRegionIntersection(Region, Region)
100060ce:	83 c4 3c             	add    esp,0x3c
100060d1:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
100060d4:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
100060d7:	83 ec 0c             	sub    esp,0xc
100060da:	ff 75 48             	push   DWORD PTR [ebp+0x48]
100060dd:	83 ec 1c             	sub    esp,0x1c
100060e0:	89 e0                	mov    eax,esp
100060e2:	89 c3                	mov    ebx,eax
100060e4:	8d 45 cc             	lea    eax,[ebp-0x34]
100060e7:	ba 07 00 00 00       	mov    edx,0x7
100060ec:	89 df                	mov    edi,ebx
100060ee:	89 c6                	mov    esi,eax
100060f0:	89 d1                	mov    ecx,edx
100060f2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100060f4:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100060f7:	e8 fc ff ff ff       	call   100060f8 <NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)+0x72>	100060f8: R_386_PC32	fillRegion(Video*, Region, unsigned int)
100060fc:	83 c4 30             	add    esp,0x30
100060ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006102:	83 ec 0c             	sub    esp,0xc
10006105:	50                   	push   eax
10006106:	e8 fc ff ff ff       	call   10006107 <NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)+0x81>	10006107: R_386_PC32	free
1000610b:	83 c4 10             	add    esp,0x10
1000610e:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10006111:	83 ec 0c             	sub    esp,0xc
10006114:	50                   	push   eax
10006115:	e8 fc ff ff ff       	call   10006116 <NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)+0x90>	10006116: R_386_PC32	free
1000611a:	83 c4 10             	add    esp,0x10
1000611d:	90                   	nop
1000611e:	8d 65 f4             	lea    esp,[ebp-0xc]
10006121:	5b                   	pop    ebx
10006122:	5e                   	pop    esi
10006123:	5f                   	pop    edi
10006124:	5d                   	pop    ebp
10006125:	c3                   	ret    

10006126 <NFrame::markRegionAsDirty(Region)>:
10006126:	55                   	push   ebp
10006127:	89 e5                	mov    ebp,esp
10006129:	57                   	push   edi
1000612a:	56                   	push   esi
1000612b:	53                   	push   ebx
1000612c:	83 ec 3c             	sub    esp,0x3c
1000612f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006132:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10006135:	85 c0                	test   eax,eax
10006137:	74 2d                	je     10006166 <NFrame::markRegionAsDirty(Region)+0x40>
10006139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000613c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
1000613f:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10006142:	83 ec 1c             	sub    esp,0x1c
10006145:	89 e0                	mov    eax,esp
10006147:	89 c3                	mov    ebx,eax
10006149:	8d 45 0c             	lea    eax,[ebp+0xc]
1000614c:	ba 07 00 00 00       	mov    edx,0x7
10006151:	89 df                	mov    edi,ebx
10006153:	89 c6                	mov    esi,eax
10006155:	89 d1                	mov    ecx,edx
10006157:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006159:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000615c:	e8 fc ff ff ff       	call   1000615d <NFrame::markRegionAsDirty(Region)+0x37>	1000615d: R_386_PC32	NFrame::markRegionAsDirty(Region)
10006161:	83 c4 20             	add    esp,0x20
10006164:	eb 6b                	jmp    100061d1 <NFrame::markRegionAsDirty(Region)+0xab>
10006166:	8d 45 cc             	lea    eax,[ebp-0x34]
10006169:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
1000616c:	83 ec 04             	sub    esp,0x4
1000616f:	83 ec 1c             	sub    esp,0x1c
10006172:	89 e0                	mov    eax,esp
10006174:	89 c3                	mov    ebx,eax
10006176:	8d 45 0c             	lea    eax,[ebp+0xc]
10006179:	ba 07 00 00 00       	mov    edx,0x7
1000617e:	89 df                	mov    edi,ebx
10006180:	89 c6                	mov    esi,eax
10006182:	89 d1                	mov    ecx,edx
10006184:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006189:	83 ec 1c             	sub    esp,0x1c
1000618c:	89 e2                	mov    edx,esp
1000618e:	8d 58 4c             	lea    ebx,[eax+0x4c]
10006191:	b8 07 00 00 00       	mov    eax,0x7
10006196:	89 d7                	mov    edi,edx
10006198:	89 de                	mov    esi,ebx
1000619a:	89 c1                	mov    ecx,eax
1000619c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000619e:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100061a1:	e8 fc ff ff ff       	call   100061a2 <NFrame::markRegionAsDirty(Region)+0x7c>	100061a2: R_386_PC32	getRegionUnion(Region, Region)
100061a6:	83 c4 3c             	add    esp,0x3c
100061a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100061ac:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
100061af:	83 ec 0c             	sub    esp,0xc
100061b2:	50                   	push   eax
100061b3:	e8 fc ff ff ff       	call   100061b4 <NFrame::markRegionAsDirty(Region)+0x8e>	100061b4: R_386_PC32	free
100061b8:	83 c4 10             	add    esp,0x10
100061bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100061be:	8d 58 4c             	lea    ebx,[eax+0x4c]
100061c1:	8d 45 cc             	lea    eax,[ebp-0x34]
100061c4:	ba 19 00 00 00       	mov    edx,0x19
100061c9:	89 df                	mov    edi,ebx
100061cb:	89 c6                	mov    esi,eax
100061cd:	89 d1                	mov    ecx,edx
100061cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100061d1:	90                   	nop
100061d2:	8d 65 f4             	lea    esp,[ebp-0xc]
100061d5:	5b                   	pop    ebx
100061d6:	5e                   	pop    esi
100061d7:	5f                   	pop    edi
100061d8:	5d                   	pop    ebp
100061d9:	c3                   	ret    

100061da <NFrame::invalidate()>:
100061da:	55                   	push   ebp
100061db:	89 e5                	mov    ebp,esp
100061dd:	57                   	push   edi
100061de:	56                   	push   esi
100061df:	53                   	push   ebx
100061e0:	83 ec 2c             	sub    esp,0x2c
100061e3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100061e6:	8d 45 cc             	lea    eax,[ebp-0x34]
100061e9:	8d 5a 14             	lea    ebx,[edx+0x14]
100061ec:	ba 07 00 00 00       	mov    edx,0x7
100061f1:	89 c7                	mov    edi,eax
100061f3:	89 de                	mov    esi,ebx
100061f5:	89 d1                	mov    ecx,edx
100061f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100061f9:	83 ec 0c             	sub    esp,0xc
100061fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100061ff:	e8 fc ff ff ff       	call   10006200 <NFrame::invalidate()+0x26>	10006200: R_386_PC32	NFrame::getAbsX()
10006204:	83 c4 10             	add    esp,0x10
10006207:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000620a:	83 ec 0c             	sub    esp,0xc
1000620d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006210:	e8 fc ff ff ff       	call   10006211 <NFrame::invalidate()+0x37>	10006211: R_386_PC32	NFrame::getAbsY()
10006215:	83 c4 10             	add    esp,0x10
10006218:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
1000621b:	83 ec 1c             	sub    esp,0x1c
1000621e:	89 e0                	mov    eax,esp
10006220:	89 c3                	mov    ebx,eax
10006222:	8d 45 cc             	lea    eax,[ebp-0x34]
10006225:	ba 07 00 00 00       	mov    edx,0x7
1000622a:	89 df                	mov    edi,ebx
1000622c:	89 c6                	mov    esi,eax
1000622e:	89 d1                	mov    ecx,edx
10006230:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006232:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006235:	e8 fc ff ff ff       	call   10006236 <NFrame::invalidate()+0x5c>	10006236: R_386_PC32	NFrame::markRegionAsDirty(Region)
1000623a:	83 c4 20             	add    esp,0x20
1000623d:	90                   	nop
1000623e:	8d 65 f4             	lea    esp,[ebp-0xc]
10006241:	5b                   	pop    ebx
10006242:	5e                   	pop    esi
10006243:	5f                   	pop    edi
10006244:	5d                   	pop    ebp
10006245:	c3                   	ret    

10006246 <NFrame::postResizeCleanup()>:
10006246:	55                   	push   ebp
10006247:	89 e5                	mov    ebp,esp
10006249:	83 ec 08             	sub    esp,0x8
1000624c:	83 ec 0c             	sub    esp,0xc
1000624f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006252:	e8 fc ff ff ff       	call   10006253 <NFrame::postResizeCleanup()+0xd>	10006253: R_386_PC32	NFrame::tryInvalidate()
10006257:	83 c4 10             	add    esp,0x10
1000625a:	90                   	nop
1000625b:	c9                   	leave  
1000625c:	c3                   	ret    
1000625d:	90                   	nop

1000625e <NFrame::repaintAux(Video*, Region, bool)>:
1000625e:	55                   	push   ebp
1000625f:	89 e5                	mov    ebp,esp
10006261:	57                   	push   edi
10006262:	56                   	push   esi
10006263:	53                   	push   ebx
10006264:	81 ec 2c 01 00 00    	sub    esp,0x12c
1000626a:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
1000626d:	88 85 d4 fe ff ff    	mov    BYTE PTR [ebp-0x12c],al
10006273:	8d 45 84             	lea    eax,[ebp-0x7c]
10006276:	83 ec 08             	sub    esp,0x8
10006279:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000627c:	50                   	push   eax
1000627d:	e8 fc ff ff ff       	call   1000627e <NFrame::repaintAux(Video*, Region, bool)+0x20>	1000627e: R_386_PC32	NFrame::getDrawRegion()
10006282:	83 c4 0c             	add    esp,0xc
10006285:	83 ec 0c             	sub    esp,0xc
10006288:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000628b:	e8 fc ff ff ff       	call   1000628c <NFrame::repaintAux(Video*, Region, bool)+0x2e>	1000628c: R_386_PC32	NFrame::getAbsX()
10006290:	83 c4 10             	add    esp,0x10
10006293:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
10006296:	83 ec 0c             	sub    esp,0xc
10006299:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000629c:	e8 fc ff ff ff       	call   1000629d <NFrame::repaintAux(Video*, Region, bool)+0x3f>	1000629d: R_386_PC32	NFrame::getAbsY()
100062a1:	83 c4 10             	add    esp,0x10
100062a4:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
100062a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100062aa:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
100062b0:	83 ec 04             	sub    esp,0x4
100062b3:	83 ec 1c             	sub    esp,0x1c
100062b6:	89 e0                	mov    eax,esp
100062b8:	89 c3                	mov    ebx,eax
100062ba:	8d 45 14             	lea    eax,[ebp+0x14]
100062bd:	ba 07 00 00 00       	mov    edx,0x7
100062c2:	89 df                	mov    edi,ebx
100062c4:	89 c6                	mov    esi,eax
100062c6:	89 d1                	mov    ecx,edx
100062c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100062ca:	83 ec 1c             	sub    esp,0x1c
100062cd:	89 e0                	mov    eax,esp
100062cf:	89 c3                	mov    ebx,eax
100062d1:	8d 45 84             	lea    eax,[ebp-0x7c]
100062d4:	ba 07 00 00 00       	mov    edx,0x7
100062d9:	89 df                	mov    edi,ebx
100062db:	89 c6                	mov    esi,eax
100062dd:	89 d1                	mov    ecx,edx
100062df:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100062e1:	ff b5 d0 fe ff ff    	push   DWORD PTR [ebp-0x130]
100062e7:	e8 fc ff ff ff       	call   100062e8 <NFrame::repaintAux(Video*, Region, bool)+0x8a>	100062e8: R_386_PC32	getRegionIntersection(Region, Region)
100062ec:	83 c4 3c             	add    esp,0x3c
100062ef:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
100062f2:	83 ec 0c             	sub    esp,0xc
100062f5:	50                   	push   eax
100062f6:	e8 fc ff ff ff       	call   100062f7 <NFrame::repaintAux(Video*, Region, bool)+0x99>	100062f7: R_386_PC32	free
100062fb:	83 c4 10             	add    esp,0x10
100062fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006301:	8b 00                	mov    eax,DWORD PTR [eax]
10006303:	83 c0 04             	add    eax,0x4
10006306:	8b 00                	mov    eax,DWORD PTR [eax]
10006308:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
1000630e:	83 ec 0c             	sub    esp,0xc
10006311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006314:	83 ec 1c             	sub    esp,0x1c
10006317:	89 e2                	mov    edx,esp
10006319:	89 c3                	mov    ebx,eax
1000631b:	b8 07 00 00 00       	mov    eax,0x7
10006320:	89 d7                	mov    edi,edx
10006322:	89 de                	mov    esi,ebx
10006324:	89 c1                	mov    ecx,eax
10006326:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006328:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000632b:	8d 45 a0             	lea    eax,[ebp-0x60]
1000632e:	50                   	push   eax
1000632f:	e8 fc ff ff ff       	call   10006330 <NFrame::repaintAux(Video*, Region, bool)+0xd2>	10006330: R_386_PC32	NFrame::Graphics::Graphics(Video*, Region)
10006334:	83 c4 30             	add    esp,0x30
10006337:	83 ec 0c             	sub    esp,0xc
1000633a:	83 ec 20             	sub    esp,0x20
1000633d:	89 e0                	mov    eax,esp
1000633f:	89 c3                	mov    ebx,eax
10006341:	8d 45 a0             	lea    eax,[ebp-0x60]
10006344:	ba 08 00 00 00       	mov    edx,0x8
10006349:	89 df                	mov    edi,ebx
1000634b:	89 c6                	mov    esi,eax
1000634d:	89 d1                	mov    ecx,edx
1000634f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006351:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006354:	8b 85 d0 fe ff ff    	mov    eax,DWORD PTR [ebp-0x130]
1000635a:	ff d0                	call   eax
1000635c:	83 c4 30             	add    esp,0x30
1000635f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10006362:	8d 85 68 ff ff ff    	lea    eax,[ebp-0x98]
10006368:	8d 5a 14             	lea    ebx,[edx+0x14]
1000636b:	ba 07 00 00 00       	mov    edx,0x7
10006370:	89 c7                	mov    edi,eax
10006372:	89 de                	mov    esi,ebx
10006374:	89 d1                	mov    ecx,edx
10006376:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006378:	83 ec 0c             	sub    esp,0xc
1000637b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000637e:	e8 fc ff ff ff       	call   1000637f <NFrame::repaintAux(Video*, Region, bool)+0x121>	1000637f: R_386_PC32	NFrame::getAbsX()
10006383:	83 c4 10             	add    esp,0x10
10006386:	89 85 78 ff ff ff    	mov    DWORD PTR [ebp-0x88],eax
1000638c:	83 ec 0c             	sub    esp,0xc
1000638f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006392:	e8 fc ff ff ff       	call   10006393 <NFrame::repaintAux(Video*, Region, bool)+0x135>	10006393: R_386_PC32	NFrame::getAbsY()
10006397:	83 c4 10             	add    esp,0x10
1000639a:	89 85 7c ff ff ff    	mov    DWORD PTR [ebp-0x84],eax
100063a0:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
100063a6:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
100063ac:	83 ec 04             	sub    esp,0x4
100063af:	83 ec 1c             	sub    esp,0x1c
100063b2:	89 e0                	mov    eax,esp
100063b4:	89 c3                	mov    ebx,eax
100063b6:	8d 85 68 ff ff ff    	lea    eax,[ebp-0x98]
100063bc:	ba 07 00 00 00       	mov    edx,0x7
100063c1:	89 df                	mov    edi,ebx
100063c3:	89 c6                	mov    esi,eax
100063c5:	89 d1                	mov    ecx,edx
100063c7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100063c9:	83 ec 1c             	sub    esp,0x1c
100063cc:	89 e0                	mov    eax,esp
100063ce:	89 c3                	mov    ebx,eax
100063d0:	8d 45 14             	lea    eax,[ebp+0x14]
100063d3:	ba 07 00 00 00       	mov    edx,0x7
100063d8:	89 df                	mov    edi,ebx
100063da:	89 c6                	mov    esi,eax
100063dc:	89 d1                	mov    ecx,edx
100063de:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100063e0:	ff b5 d0 fe ff ff    	push   DWORD PTR [ebp-0x130]
100063e6:	e8 fc ff ff ff       	call   100063e7 <NFrame::repaintAux(Video*, Region, bool)+0x189>	100063e7: R_386_PC32	getRegionIntersection(Region, Region)
100063eb:	83 c4 3c             	add    esp,0x3c
100063ee:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100063f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100063f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
100063fb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100063fe:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10006402:	0f 84 8d 01 00 00    	je     10006595 <NFrame::repaintAux(Video*, Region, bool)+0x337>
10006408:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000640b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000640e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006411:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10006414:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10006417:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
1000641a:	8b 00                	mov    eax,DWORD PTR [eax]
1000641c:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
1000641f:	84 c0                	test   al,al
10006421:	74 1a                	je     1000643d <NFrame::repaintAux(Video*, Region, bool)+0x1df>
10006423:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006426:	8b 00                	mov    eax,DWORD PTR [eax]
10006428:	8a 40 69             	mov    al,BYTE PTR [eax+0x69]
1000642b:	84 c0                	test   al,al
1000642d:	0f 84 5c 01 00 00    	je     1000658f <NFrame::repaintAux(Video*, Region, bool)+0x331>
10006433:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006436:	8b 00                	mov    eax,DWORD PTR [eax]
10006438:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000643b:	eb c1                	jmp    100063fe <NFrame::repaintAux(Video*, Region, bool)+0x1a0>
1000643d:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006440:	8b 00                	mov    eax,DWORD PTR [eax]
10006442:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
10006448:	8d 9d 30 ff ff ff    	lea    ebx,[ebp-0xd0]
1000644e:	89 9d cc fe ff ff    	mov    DWORD PTR [ebp-0x134],ebx
10006454:	83 ec 04             	sub    esp,0x4
10006457:	6a 01                	push   0x1
10006459:	83 ec 1c             	sub    esp,0x1c
1000645c:	89 e0                	mov    eax,esp
1000645e:	89 c3                	mov    ebx,eax
10006460:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006466:	ba 07 00 00 00       	mov    edx,0x7
1000646b:	89 df                	mov    edi,ebx
1000646d:	89 c6                	mov    esi,eax
1000646f:	89 d1                	mov    ecx,edx
10006471:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006473:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10006476:	ff b5 d0 fe ff ff    	push   DWORD PTR [ebp-0x130]
1000647c:	ff b5 cc fe ff ff    	push   DWORD PTR [ebp-0x134]
10006482:	e8 fc ff ff ff       	call   10006483 <NFrame::repaintAux(Video*, Region, bool)+0x225>	10006483: R_386_PC32	NFrame::repaintAux(Video*, Region, bool)
10006487:	83 c4 2c             	add    esp,0x2c
1000648a:	8d 85 14 ff ff ff    	lea    eax,[ebp-0xec]
10006490:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
10006496:	83 ec 04             	sub    esp,0x4
10006499:	83 ec 1c             	sub    esp,0x1c
1000649c:	89 e0                	mov    eax,esp
1000649e:	89 c3                	mov    ebx,eax
100064a0:	8d 85 30 ff ff ff    	lea    eax,[ebp-0xd0]
100064a6:	ba 07 00 00 00       	mov    edx,0x7
100064ab:	89 df                	mov    edi,ebx
100064ad:	89 c6                	mov    esi,eax
100064af:	89 d1                	mov    ecx,edx
100064b1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100064b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100064b6:	83 ec 1c             	sub    esp,0x1c
100064b9:	89 e2                	mov    edx,esp
100064bb:	89 c3                	mov    ebx,eax
100064bd:	b8 07 00 00 00       	mov    eax,0x7
100064c2:	89 d7                	mov    edi,edx
100064c4:	89 de                	mov    esi,ebx
100064c6:	89 c1                	mov    ecx,eax
100064c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100064ca:	ff b5 d0 fe ff ff    	push   DWORD PTR [ebp-0x130]
100064d0:	e8 fc ff ff ff       	call   100064d1 <NFrame::repaintAux(Video*, Region, bool)+0x273>	100064d1: R_386_PC32	getRegionUnion(Region, Region)
100064d5:	83 c4 3c             	add    esp,0x3c
100064d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100064db:	8b 00                	mov    eax,DWORD PTR [eax]
100064dd:	83 ec 0c             	sub    esp,0xc
100064e0:	50                   	push   eax
100064e1:	e8 fc ff ff ff       	call   100064e2 <NFrame::repaintAux(Video*, Region, bool)+0x284>	100064e2: R_386_PC32	free
100064e6:	83 c4 10             	add    esp,0x10
100064e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100064ec:	89 c3                	mov    ebx,eax
100064ee:	8d 85 14 ff ff ff    	lea    eax,[ebp-0xec]
100064f4:	ba 19 00 00 00       	mov    edx,0x19
100064f9:	89 df                	mov    edi,ebx
100064fb:	89 c6                	mov    esi,eax
100064fd:	89 d1                	mov    ecx,edx
100064ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006501:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10006507:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
1000650d:	83 ec 04             	sub    esp,0x4
10006510:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006513:	83 ec 1c             	sub    esp,0x1c
10006516:	89 e2                	mov    edx,esp
10006518:	89 c3                	mov    ebx,eax
1000651a:	b8 07 00 00 00       	mov    eax,0x7
1000651f:	89 d7                	mov    edi,edx
10006521:	89 de                	mov    esi,ebx
10006523:	89 c1                	mov    ecx,eax
10006525:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006527:	83 ec 1c             	sub    esp,0x1c
1000652a:	89 e0                	mov    eax,esp
1000652c:	89 c3                	mov    ebx,eax
1000652e:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006534:	ba 07 00 00 00       	mov    edx,0x7
10006539:	89 df                	mov    edi,ebx
1000653b:	89 c6                	mov    esi,eax
1000653d:	89 d1                	mov    ecx,edx
1000653f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006541:	ff b5 d0 fe ff ff    	push   DWORD PTR [ebp-0x130]
10006547:	e8 fc ff ff ff       	call   10006548 <NFrame::repaintAux(Video*, Region, bool)+0x2ea>	10006548: R_386_PC32	getRegionDifference(Region, Region)
1000654c:	83 c4 3c             	add    esp,0x3c
1000654f:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [ebp-0xb4]
10006555:	83 ec 0c             	sub    esp,0xc
10006558:	50                   	push   eax
10006559:	e8 fc ff ff ff       	call   1000655a <NFrame::repaintAux(Video*, Region, bool)+0x2fc>	1000655a: R_386_PC32	free
1000655e:	83 c4 10             	add    esp,0x10
10006561:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006567:	8d 95 f8 fe ff ff    	lea    edx,[ebp-0x108]
1000656d:	b9 19 00 00 00       	mov    ecx,0x19
10006572:	89 c7                	mov    edi,eax
10006574:	89 d6                	mov    esi,edx
10006576:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006578:	8b 85 30 ff ff ff    	mov    eax,DWORD PTR [ebp-0xd0]
1000657e:	83 ec 0c             	sub    esp,0xc
10006581:	50                   	push   eax
10006582:	e8 fc ff ff ff       	call   10006583 <NFrame::repaintAux(Video*, Region, bool)+0x325>	10006583: R_386_PC32	free
10006587:	83 c4 10             	add    esp,0x10
1000658a:	e9 6f fe ff ff       	jmp    100063fe <NFrame::repaintAux(Video*, Region, bool)+0x1a0>
1000658f:	90                   	nop
10006590:	e9 69 fe ff ff       	jmp    100063fe <NFrame::repaintAux(Video*, Region, bool)+0x1a0>
10006595:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [ebp-0xb4]
1000659b:	83 ec 0c             	sub    esp,0xc
1000659e:	50                   	push   eax
1000659f:	e8 fc ff ff ff       	call   100065a0 <NFrame::repaintAux(Video*, Region, bool)+0x342>	100065a0: R_386_PC32	free
100065a4:	83 c4 10             	add    esp,0x10
100065a7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100065aa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100065ad:	85 c0                	test   eax,eax
100065af:	75 48                	jne    100065f9 <NFrame::repaintAux(Video*, Region, bool)+0x39b>
100065b1:	80 bd d4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x12c],0x0
100065b8:	74 3f                	je     100065f9 <NFrame::repaintAux(Video*, Region, bool)+0x39b>
100065ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100065bd:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
100065c0:	83 ec 0c             	sub    esp,0xc
100065c3:	50                   	push   eax
100065c4:	e8 fc ff ff ff       	call   100065c5 <NFrame::repaintAux(Video*, Region, bool)+0x367>	100065c5: R_386_PC32	free
100065c9:	83 c4 10             	add    esp,0x10
100065cc:	8d 45 c0             	lea    eax,[ebp-0x40]
100065cf:	83 ec 0c             	sub    esp,0xc
100065d2:	6a 01                	push   0x1
100065d4:	6a 00                	push   0x0
100065d6:	6a 00                	push   0x0
100065d8:	6a 00                	push   0x0
100065da:	50                   	push   eax
100065db:	e8 fc ff ff ff       	call   100065dc <NFrame::repaintAux(Video*, Region, bool)+0x37e>	100065dc: R_386_PC32	createRectangleRegion(int, int, int, int)
100065e0:	83 c4 1c             	add    esp,0x1c
100065e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100065e6:	8d 58 4c             	lea    ebx,[eax+0x4c]
100065e9:	8d 45 c0             	lea    eax,[ebp-0x40]
100065ec:	ba 19 00 00 00       	mov    edx,0x19
100065f1:	89 df                	mov    edi,ebx
100065f3:	89 c6                	mov    esi,eax
100065f5:	89 d1                	mov    ecx,edx
100065f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100065f9:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
100065fd:	0f 84 80 00 00 00    	je     10006683 <NFrame::repaintAux(Video*, Region, bool)+0x425>
10006603:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10006606:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
1000660c:	8d 5a 30             	lea    ebx,[edx+0x30]
1000660f:	ba 07 00 00 00       	mov    edx,0x7
10006614:	89 c7                	mov    edi,eax
10006616:	89 de                	mov    esi,ebx
10006618:	89 d1                	mov    ecx,edx
1000661a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000661c:	83 ec 0c             	sub    esp,0xc
1000661f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006622:	e8 fc ff ff ff       	call   10006623 <NFrame::repaintAux(Video*, Region, bool)+0x3c5>	10006623: R_386_PC32	NFrame::getAbsX()
10006627:	83 c4 10             	add    esp,0x10
1000662a:	89 c2                	mov    edx,eax
1000662c:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [ebp-0x114]
10006632:	01 d0                	add    eax,edx
10006634:	89 85 ec fe ff ff    	mov    DWORD PTR [ebp-0x114],eax
1000663a:	83 ec 0c             	sub    esp,0xc
1000663d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006640:	e8 fc ff ff ff       	call   10006641 <NFrame::repaintAux(Video*, Region, bool)+0x3e3>	10006641: R_386_PC32	NFrame::getAbsY()
10006645:	83 c4 10             	add    esp,0x10
10006648:	89 c2                	mov    edx,eax
1000664a:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [ebp-0x110]
10006650:	01 d0                	add    eax,edx
10006652:	89 85 f0 fe ff ff    	mov    DWORD PTR [ebp-0x110],eax
10006658:	83 ec 0c             	sub    esp,0xc
1000665b:	6a 00                	push   0x0
1000665d:	83 ec 1c             	sub    esp,0x1c
10006660:	89 e0                	mov    eax,esp
10006662:	89 c3                	mov    ebx,eax
10006664:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
1000666a:	ba 07 00 00 00       	mov    edx,0x7
1000666f:	89 df                	mov    edi,ebx
10006671:	89 c6                	mov    esi,eax
10006673:	89 d1                	mov    ecx,edx
10006675:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006677:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000667a:	e8 fc ff ff ff       	call   1000667b <NFrame::repaintAux(Video*, Region, bool)+0x41d>	1000667b: R_386_PC32	fillRegion(Video*, Region, unsigned int)
1000667f:	83 c4 30             	add    esp,0x30
10006682:	90                   	nop
10006683:	90                   	nop
10006684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006687:	8d 65 f4             	lea    esp,[ebp-0xc]
1000668a:	5b                   	pop    ebx
1000668b:	5e                   	pop    esi
1000668c:	5f                   	pop    edi
1000668d:	5d                   	pop    ebp
1000668e:	c2 04 00             	ret    0x4
10006691:	90                   	nop

10006692 <NFrame::NFrame(Region)>:
10006692:	55                   	push   ebp
10006693:	89 e5                	mov    ebp,esp
10006695:	57                   	push   edi
10006696:	56                   	push   esi
10006697:	53                   	push   ebx
10006698:	83 ec 2c             	sub    esp,0x2c
1000669b:	ba 08 00 00 00       	mov    edx,0x8	1000669c: R_386_32	vtable for NFrame
100066a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100066a3:	89 10                	mov    DWORD PTR [eax],edx
100066a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100066a8:	83 c0 04             	add    eax,0x4
100066ab:	83 ec 0c             	sub    esp,0xc
100066ae:	50                   	push   eax
100066af:	e8 fc ff ff ff       	call   100066b0 <NFrame::NFrame(Region)+0x1e>	100066b0: R_386_PC32	LinkedList2<NFrame*>::LinkedList2()
100066b4:	83 c4 10             	add    esp,0x10
100066b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100066ba:	83 c0 14             	add    eax,0x14
100066bd:	83 ec 0c             	sub    esp,0xc
100066c0:	50                   	push   eax
100066c1:	e8 fc ff ff ff       	call   100066c2 <NFrame::NFrame(Region)+0x30>	100066c2: R_386_PC32	Region::Region()
100066c6:	83 c4 10             	add    esp,0x10
100066c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100066cc:	83 c0 30             	add    eax,0x30
100066cf:	83 ec 0c             	sub    esp,0xc
100066d2:	50                   	push   eax
100066d3:	e8 fc ff ff ff       	call   100066d4 <NFrame::NFrame(Region)+0x42>	100066d4: R_386_PC32	Region::Region()
100066d8:	83 c4 10             	add    esp,0x10
100066db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100066de:	83 c0 4c             	add    eax,0x4c
100066e1:	83 ec 0c             	sub    esp,0xc
100066e4:	50                   	push   eax
100066e5:	e8 fc ff ff ff       	call   100066e6 <NFrame::NFrame(Region)+0x54>	100066e6: R_386_PC32	Region::Region()
100066ea:	83 c4 10             	add    esp,0x10
100066ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100066f0:	c6 40 68 00          	mov    BYTE PTR [eax+0x68],0x0
100066f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100066f7:	c6 40 69 00          	mov    BYTE PTR [eax+0x69],0x0
100066fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100066fe:	c7 40 6c 00 00 00 00 	mov    DWORD PTR [eax+0x6c],0x0
10006705:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006708:	c6 40 70 00          	mov    BYTE PTR [eax+0x70],0x0
1000670c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000670f:	c7 40 74 0a 00 00 00 	mov    DWORD PTR [eax+0x74],0xa
10006716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006719:	c7 40 78 0a 00 00 00 	mov    DWORD PTR [eax+0x78],0xa
10006720:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006723:	c7 40 7c 64 00 00 00 	mov    DWORD PTR [eax+0x7c],0x64
1000672a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000672d:	c7 80 80 00 00 00 4b 00 00 00 	mov    DWORD PTR [eax+0x80],0x4b
10006737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000673a:	c7 80 84 00 00 00 18 00 00 00 	mov    DWORD PTR [eax+0x84],0x18
10006744:	8d 45 cc             	lea    eax,[ebp-0x34]
10006747:	83 ec 0c             	sub    esp,0xc
1000674a:	6a 01                	push   0x1
1000674c:	6a 00                	push   0x0
1000674e:	6a 00                	push   0x0
10006750:	6a 00                	push   0x0
10006752:	50                   	push   eax
10006753:	e8 fc ff ff ff       	call   10006754 <NFrame::NFrame(Region)+0xc2>	10006754: R_386_PC32	createRectangleRegion(int, int, int, int)
10006758:	83 c4 1c             	add    esp,0x1c
1000675b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000675e:	8d 58 4c             	lea    ebx,[eax+0x4c]
10006761:	8d 45 cc             	lea    eax,[ebp-0x34]
10006764:	ba 19 00 00 00       	mov    edx,0x19
10006769:	89 df                	mov    edi,ebx
1000676b:	89 c6                	mov    esi,eax
1000676d:	89 d1                	mov    ecx,edx
1000676f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006774:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
1000677b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000677e:	8d 58 14             	lea    ebx,[eax+0x14]
10006781:	8d 45 0c             	lea    eax,[ebp+0xc]
10006784:	ba 19 00 00 00       	mov    edx,0x19
10006789:	89 df                	mov    edi,ebx
1000678b:	89 c6                	mov    esi,eax
1000678d:	89 d1                	mov    ecx,edx
1000678f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006791:	90                   	nop
10006792:	8d 65 f4             	lea    esp,[ebp-0xc]
10006795:	5b                   	pop    ebx
10006796:	5e                   	pop    esi
10006797:	5f                   	pop    edi
10006798:	5d                   	pop    ebp
10006799:	c3                   	ret    

1000679a <NFrame::NFrame(int, int, int, int)>:
1000679a:	55                   	push   ebp
1000679b:	89 e5                	mov    ebp,esp
1000679d:	57                   	push   edi
1000679e:	56                   	push   esi
1000679f:	53                   	push   ebx
100067a0:	83 ec 4c             	sub    esp,0x4c
100067a3:	ba 08 00 00 00       	mov    edx,0x8	100067a4: R_386_32	vtable for NFrame
100067a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100067ab:	89 10                	mov    DWORD PTR [eax],edx
100067ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100067b0:	83 c0 04             	add    eax,0x4
100067b3:	83 ec 0c             	sub    esp,0xc
100067b6:	50                   	push   eax
100067b7:	e8 fc ff ff ff       	call   100067b8 <NFrame::NFrame(int, int, int, int)+0x1e>	100067b8: R_386_PC32	LinkedList2<NFrame*>::LinkedList2()
100067bc:	83 c4 10             	add    esp,0x10
100067bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100067c2:	83 c0 14             	add    eax,0x14
100067c5:	83 ec 0c             	sub    esp,0xc
100067c8:	50                   	push   eax
100067c9:	e8 fc ff ff ff       	call   100067ca <NFrame::NFrame(int, int, int, int)+0x30>	100067ca: R_386_PC32	Region::Region()
100067ce:	83 c4 10             	add    esp,0x10
100067d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100067d4:	83 c0 30             	add    eax,0x30
100067d7:	83 ec 0c             	sub    esp,0xc
100067da:	50                   	push   eax
100067db:	e8 fc ff ff ff       	call   100067dc <NFrame::NFrame(int, int, int, int)+0x42>	100067dc: R_386_PC32	Region::Region()
100067e0:	83 c4 10             	add    esp,0x10
100067e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100067e6:	83 c0 4c             	add    eax,0x4c
100067e9:	83 ec 0c             	sub    esp,0xc
100067ec:	50                   	push   eax
100067ed:	e8 fc ff ff ff       	call   100067ee <NFrame::NFrame(int, int, int, int)+0x54>	100067ee: R_386_PC32	Region::Region()
100067f2:	83 c4 10             	add    esp,0x10
100067f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100067f8:	c6 40 68 00          	mov    BYTE PTR [eax+0x68],0x0
100067fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100067ff:	c6 40 69 00          	mov    BYTE PTR [eax+0x69],0x0
10006803:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006806:	c7 40 6c 00 00 00 00 	mov    DWORD PTR [eax+0x6c],0x0
1000680d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006810:	c6 40 70 00          	mov    BYTE PTR [eax+0x70],0x0
10006814:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006817:	c7 40 74 0a 00 00 00 	mov    DWORD PTR [eax+0x74],0xa
1000681e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006821:	c7 40 78 0a 00 00 00 	mov    DWORD PTR [eax+0x78],0xa
10006828:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000682b:	c7 40 7c 64 00 00 00 	mov    DWORD PTR [eax+0x7c],0x64
10006832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006835:	c7 80 80 00 00 00 4b 00 00 00 	mov    DWORD PTR [eax+0x80],0x4b
1000683f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006842:	c7 80 84 00 00 00 18 00 00 00 	mov    DWORD PTR [eax+0x84],0x18
1000684c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000684f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10006856:	8d 45 b0             	lea    eax,[ebp-0x50]
10006859:	83 ec 0c             	sub    esp,0xc
1000685c:	6a 01                	push   0x1
1000685e:	6a 00                	push   0x0
10006860:	6a 00                	push   0x0
10006862:	6a 00                	push   0x0
10006864:	50                   	push   eax
10006865:	e8 fc ff ff ff       	call   10006866 <NFrame::NFrame(int, int, int, int)+0xcc>	10006866: R_386_PC32	createRectangleRegion(int, int, int, int)
1000686a:	83 c4 1c             	add    esp,0x1c
1000686d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006870:	8d 58 4c             	lea    ebx,[eax+0x4c]
10006873:	8d 45 b0             	lea    eax,[ebp-0x50]
10006876:	ba 19 00 00 00       	mov    edx,0x19
1000687b:	89 df                	mov    edi,ebx
1000687d:	89 c6                	mov    esi,eax
1000687f:	89 d1                	mov    ecx,edx
10006881:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006883:	8d 45 cc             	lea    eax,[ebp-0x34]
10006886:	83 ec 0c             	sub    esp,0xc
10006889:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000688c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000688f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10006892:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006895:	50                   	push   eax
10006896:	e8 fc ff ff ff       	call   10006897 <NFrame::NFrame(int, int, int, int)+0xfd>	10006897: R_386_PC32	createRectangleRegion(int, int, int, int)
1000689b:	83 c4 1c             	add    esp,0x1c
1000689e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100068a1:	8d 58 14             	lea    ebx,[eax+0x14]
100068a4:	8d 45 cc             	lea    eax,[ebp-0x34]
100068a7:	ba 19 00 00 00       	mov    edx,0x19
100068ac:	89 df                	mov    edi,ebx
100068ae:	89 c6                	mov    esi,eax
100068b0:	89 d1                	mov    ecx,edx
100068b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100068b4:	90                   	nop
100068b5:	8d 65 f4             	lea    esp,[ebp-0xc]
100068b8:	5b                   	pop    ebx
100068b9:	5e                   	pop    esi
100068ba:	5f                   	pop    edi
100068bb:	5d                   	pop    ebp
100068bc:	c3                   	ret    
100068bd:	90                   	nop

100068be <NFrame::addChild(NFrame*)>:
100068be:	55                   	push   ebp
100068bf:	89 e5                	mov    ebp,esp
100068c1:	83 ec 08             	sub    esp,0x8
100068c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100068c7:	83 c0 04             	add    eax,0x4
100068ca:	83 ec 08             	sub    esp,0x8
100068cd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100068d0:	50                   	push   eax
100068d1:	e8 fc ff ff ff       	call   100068d2 <NFrame::addChild(NFrame*)+0x14>	100068d2: R_386_PC32	LinkedList2<NFrame*>::prependNode(NFrame*)
100068d6:	83 c4 10             	add    esp,0x10
100068d9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100068dc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100068df:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
100068e2:	90                   	nop
100068e3:	c9                   	leave  
100068e4:	c3                   	ret    
100068e5:	90                   	nop

100068e6 <NFrame::getDirtyRegion()>:
100068e6:	55                   	push   ebp
100068e7:	89 e5                	mov    ebp,esp
100068e9:	57                   	push   edi
100068ea:	56                   	push   esi
100068eb:	53                   	push   ebx
100068ec:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100068ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100068f2:	8d 58 4c             	lea    ebx,[eax+0x4c]
100068f5:	b8 07 00 00 00       	mov    eax,0x7
100068fa:	89 d7                	mov    edi,edx
100068fc:	89 de                	mov    esi,ebx
100068fe:	89 c1                	mov    ecx,eax
10006900:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006905:	5b                   	pop    ebx
10006906:	5e                   	pop    esi
10006907:	5f                   	pop    edi
10006908:	5d                   	pop    ebp
10006909:	c2 04 00             	ret    0x4

1000690c <NFrame::getDrawRegion()>:
1000690c:	55                   	push   ebp
1000690d:	89 e5                	mov    ebp,esp
1000690f:	57                   	push   edi
10006910:	56                   	push   esi
10006911:	53                   	push   ebx
10006912:	83 ec 7c             	sub    esp,0x7c
10006915:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006918:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
1000691b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000691e:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
10006921:	8d 45 c4             	lea    eax,[ebp-0x3c]
10006924:	83 ec 0c             	sub    esp,0xc
10006927:	6a 01                	push   0x1
10006929:	6a 00                	push   0x0
1000692b:	51                   	push   ecx
1000692c:	52                   	push   edx
1000692d:	50                   	push   eax
1000692e:	e8 fc ff ff ff       	call   1000692f <NFrame::getDrawRegion()+0x23>	1000692f: R_386_PC32	createRectangleRegion(int, int, int, int)
10006933:	83 c4 1c             	add    esp,0x1c
10006936:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006939:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
1000693c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000693f:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10006943:	0f 84 c0 00 00 00    	je     10006a09 <NFrame::getDrawRegion()+0xfd>
10006949:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000694c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
1000694f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10006952:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10006955:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10006958:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000695b:	8b 00                	mov    eax,DWORD PTR [eax]
1000695d:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10006960:	84 c0                	test   al,al
10006962:	0f 85 9b 00 00 00    	jne    10006a03 <NFrame::getDrawRegion()+0xf7>
10006968:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000696b:	8b 10                	mov    edx,DWORD PTR [eax]
1000696d:	8d 45 a8             	lea    eax,[ebp-0x58]
10006970:	8d 5a 14             	lea    ebx,[edx+0x14]
10006973:	ba 07 00 00 00       	mov    edx,0x7
10006978:	89 c7                	mov    edi,eax
1000697a:	89 de                	mov    esi,ebx
1000697c:	89 d1                	mov    ecx,edx
1000697e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006980:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10006983:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006986:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
10006989:	01 d0                	add    eax,edx
1000698b:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
1000698e:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10006991:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006994:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
10006997:	01 d0                	add    eax,edx
10006999:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
1000699c:	8d 45 8c             	lea    eax,[ebp-0x74]
1000699f:	89 45 84             	mov    DWORD PTR [ebp-0x7c],eax
100069a2:	83 ec 04             	sub    esp,0x4
100069a5:	83 ec 1c             	sub    esp,0x1c
100069a8:	89 e0                	mov    eax,esp
100069aa:	89 c3                	mov    ebx,eax
100069ac:	8d 45 a8             	lea    eax,[ebp-0x58]
100069af:	ba 07 00 00 00       	mov    edx,0x7
100069b4:	89 df                	mov    edi,ebx
100069b6:	89 c6                	mov    esi,eax
100069b8:	89 d1                	mov    ecx,edx
100069ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100069bc:	83 ec 1c             	sub    esp,0x1c
100069bf:	89 e0                	mov    eax,esp
100069c1:	89 c3                	mov    ebx,eax
100069c3:	8d 45 c4             	lea    eax,[ebp-0x3c]
100069c6:	ba 07 00 00 00       	mov    edx,0x7
100069cb:	89 df                	mov    edi,ebx
100069cd:	89 c6                	mov    esi,eax
100069cf:	89 d1                	mov    ecx,edx
100069d1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100069d3:	ff 75 84             	push   DWORD PTR [ebp-0x7c]
100069d6:	e8 fc ff ff ff       	call   100069d7 <NFrame::getDrawRegion()+0xcb>	100069d7: R_386_PC32	getRegionUnion(Region, Region)
100069db:	83 c4 3c             	add    esp,0x3c
100069de:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100069e1:	83 ec 0c             	sub    esp,0xc
100069e4:	50                   	push   eax
100069e5:	e8 fc ff ff ff       	call   100069e6 <NFrame::getDrawRegion()+0xda>	100069e6: R_386_PC32	free
100069ea:	83 c4 10             	add    esp,0x10
100069ed:	8d 45 c4             	lea    eax,[ebp-0x3c]
100069f0:	8d 55 8c             	lea    edx,[ebp-0x74]
100069f3:	b9 19 00 00 00       	mov    ecx,0x19
100069f8:	89 c7                	mov    edi,eax
100069fa:	89 d6                	mov    esi,edx
100069fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100069fe:	e9 3c ff ff ff       	jmp    1000693f <NFrame::getDrawRegion()+0x33>
10006a03:	90                   	nop
10006a04:	e9 36 ff ff ff       	jmp    1000693f <NFrame::getDrawRegion()+0x33>
10006a09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006a0c:	89 45 84             	mov    DWORD PTR [ebp-0x7c],eax
10006a0f:	83 ec 04             	sub    esp,0x4
10006a12:	83 ec 1c             	sub    esp,0x1c
10006a15:	89 e0                	mov    eax,esp
10006a17:	89 c3                	mov    ebx,eax
10006a19:	8d 45 c4             	lea    eax,[ebp-0x3c]
10006a1c:	ba 07 00 00 00       	mov    edx,0x7
10006a21:	89 df                	mov    edi,ebx
10006a23:	89 c6                	mov    esi,eax
10006a25:	89 d1                	mov    ecx,edx
10006a27:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006a29:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006a2c:	83 ec 1c             	sub    esp,0x1c
10006a2f:	89 e2                	mov    edx,esp
10006a31:	8d 58 14             	lea    ebx,[eax+0x14]
10006a34:	b8 07 00 00 00       	mov    eax,0x7
10006a39:	89 d7                	mov    edi,edx
10006a3b:	89 de                	mov    esi,ebx
10006a3d:	89 c1                	mov    ecx,eax
10006a3f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006a41:	ff 75 84             	push   DWORD PTR [ebp-0x7c]
10006a44:	e8 fc ff ff ff       	call   10006a45 <NFrame::getDrawRegion()+0x139>	10006a45: R_386_PC32	getRegionDifference(Region, Region)
10006a49:	83 c4 3c             	add    esp,0x3c
10006a4c:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10006a4f:	83 ec 0c             	sub    esp,0xc
10006a52:	50                   	push   eax
10006a53:	e8 fc ff ff ff       	call   10006a54 <NFrame::getDrawRegion()+0x148>	10006a54: R_386_PC32	free
10006a58:	83 c4 10             	add    esp,0x10
10006a5b:	90                   	nop
10006a5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006a5f:	8d 65 f4             	lea    esp,[ebp-0xc]
10006a62:	5b                   	pop    ebx
10006a63:	5e                   	pop    esi
10006a64:	5f                   	pop    edi
10006a65:	5d                   	pop    ebp
10006a66:	c2 04 00             	ret    0x4
10006a69:	90                   	nop

10006a6a <NFrame::regenerateRegion()>:
10006a6a:	55                   	push   ebp
10006a6b:	89 e5                	mov    ebp,esp
10006a6d:	57                   	push   edi
10006a6e:	56                   	push   esi
10006a6f:	53                   	push   ebx
10006a70:	83 ec 6c             	sub    esp,0x6c
10006a73:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10006a76:	8d 45 94             	lea    eax,[ebp-0x6c]
10006a79:	8d 5a 14             	lea    ebx,[edx+0x14]
10006a7c:	ba 07 00 00 00       	mov    edx,0x7
10006a81:	89 c7                	mov    edi,eax
10006a83:	89 de                	mov    esi,ebx
10006a85:	89 d1                	mov    ecx,edx
10006a87:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006a89:	8b 75 9c             	mov    esi,DWORD PTR [ebp-0x64]
10006a8c:	8b 5d 98             	mov    ebx,DWORD PTR [ebp-0x68]
10006a8f:	8b 4d a8             	mov    ecx,DWORD PTR [ebp-0x58]
10006a92:	8b 55 a4             	mov    edx,DWORD PTR [ebp-0x5c]
10006a95:	8d 45 b0             	lea    eax,[ebp-0x50]
10006a98:	83 ec 0c             	sub    esp,0xc
10006a9b:	56                   	push   esi
10006a9c:	53                   	push   ebx
10006a9d:	51                   	push   ecx
10006a9e:	52                   	push   edx
10006a9f:	50                   	push   eax
10006aa0:	e8 fc ff ff ff       	call   10006aa1 <NFrame::regenerateRegion()+0x37>	10006aa1: R_386_PC32	createRectangleRegion(int, int, int, int)
10006aa5:	83 c4 1c             	add    esp,0x1c
10006aa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006aab:	8d 58 14             	lea    ebx,[eax+0x14]
10006aae:	8d 45 b0             	lea    eax,[ebp-0x50]
10006ab1:	ba 19 00 00 00       	mov    edx,0x19
10006ab6:	89 df                	mov    edi,ebx
10006ab8:	89 c6                	mov    esi,eax
10006aba:	89 d1                	mov    ecx,edx
10006abc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006abe:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
10006ac1:	83 ec 0c             	sub    esp,0xc
10006ac4:	50                   	push   eax
10006ac5:	e8 fc ff ff ff       	call   10006ac6 <NFrame::regenerateRegion()+0x5c>	10006ac6: R_386_PC32	free
10006aca:	83 c4 10             	add    esp,0x10
10006acd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006ad0:	8a 40 69             	mov    al,BYTE PTR [eax+0x69]
10006ad3:	84 c0                	test   al,al
10006ad5:	74 68                	je     10006b3f <NFrame::regenerateRegion()+0xd5>
10006ad7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10006ada:	8d 45 94             	lea    eax,[ebp-0x6c]
10006add:	8d 5a 30             	lea    ebx,[edx+0x30]
10006ae0:	ba 19 00 00 00       	mov    edx,0x19
10006ae5:	89 c7                	mov    edi,eax
10006ae7:	89 de                	mov    esi,ebx
10006ae9:	89 d1                	mov    ecx,edx
10006aeb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006aed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006af0:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
10006af3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006af6:	8b 58 18             	mov    ebx,DWORD PTR [eax+0x18]
10006af9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006afc:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
10006aff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006b02:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
10006b05:	8d 45 cc             	lea    eax,[ebp-0x34]
10006b08:	83 ec 08             	sub    esp,0x8
10006b0b:	6a 02                	push   0x2
10006b0d:	56                   	push   esi
10006b0e:	53                   	push   ebx
10006b0f:	51                   	push   ecx
10006b10:	52                   	push   edx
10006b11:	50                   	push   eax
10006b12:	e8 fc ff ff ff       	call   10006b13 <NFrame::regenerateRegion()+0xa9>	10006b13: R_386_PC32	createAntRegion(int, int, int, int, int)
10006b17:	83 c4 1c             	add    esp,0x1c
10006b1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006b1d:	8d 58 30             	lea    ebx,[eax+0x30]
10006b20:	8d 45 cc             	lea    eax,[ebp-0x34]
10006b23:	ba 19 00 00 00       	mov    edx,0x19
10006b28:	89 df                	mov    edi,ebx
10006b2a:	89 c6                	mov    esi,eax
10006b2c:	89 d1                	mov    ecx,edx
10006b2e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006b30:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
10006b33:	83 ec 0c             	sub    esp,0xc
10006b36:	50                   	push   eax
10006b37:	e8 fc ff ff ff       	call   10006b38 <NFrame::regenerateRegion()+0xce>	10006b38: R_386_PC32	free
10006b3c:	83 c4 10             	add    esp,0x10
10006b3f:	90                   	nop
10006b40:	8d 65 f4             	lea    esp,[ebp-0xc]
10006b43:	5b                   	pop    ebx
10006b44:	5e                   	pop    esi
10006b45:	5f                   	pop    edi
10006b46:	5d                   	pop    ebp
10006b47:	c3                   	ret    

10006b48 <NFrame::isHiddenOverall()>:
10006b48:	55                   	push   ebp
10006b49:	89 e5                	mov    ebp,esp
10006b4b:	83 ec 08             	sub    esp,0x8
10006b4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006b51:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10006b54:	84 c0                	test   al,al
10006b56:	75 20                	jne    10006b78 <NFrame::isHiddenOverall()+0x30>
10006b58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006b5b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10006b5e:	85 c0                	test   eax,eax
10006b60:	74 1a                	je     10006b7c <NFrame::isHiddenOverall()+0x34>
10006b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006b65:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10006b68:	83 ec 0c             	sub    esp,0xc
10006b6b:	50                   	push   eax
10006b6c:	e8 fc ff ff ff       	call   10006b6d <NFrame::isHiddenOverall()+0x25>	10006b6d: R_386_PC32	NFrame::isHiddenOverall()
10006b71:	83 c4 10             	add    esp,0x10
10006b74:	84 c0                	test   al,al
10006b76:	74 04                	je     10006b7c <NFrame::isHiddenOverall()+0x34>
10006b78:	b0 01                	mov    al,0x1
10006b7a:	eb 02                	jmp    10006b7e <NFrame::isHiddenOverall()+0x36>
10006b7c:	b0 00                	mov    al,0x0
10006b7e:	c9                   	leave  
10006b7f:	c3                   	ret    

10006b80 <NFrame::tryInvalidate()>:
10006b80:	55                   	push   ebp
10006b81:	89 e5                	mov    ebp,esp
10006b83:	57                   	push   edi
10006b84:	56                   	push   esi
10006b85:	53                   	push   ebx
10006b86:	83 ec 2c             	sub    esp,0x2c
10006b89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006b8c:	8a 40 69             	mov    al,BYTE PTR [eax+0x69]
10006b8f:	84 c0                	test   al,al
10006b91:	74 5c                	je     10006bef <NFrame::tryInvalidate()+0x6f>
10006b93:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10006b96:	8d 45 cc             	lea    eax,[ebp-0x34]
10006b99:	8d 5a 30             	lea    ebx,[edx+0x30]
10006b9c:	ba 07 00 00 00       	mov    edx,0x7
10006ba1:	89 c7                	mov    edi,eax
10006ba3:	89 de                	mov    esi,ebx
10006ba5:	89 d1                	mov    ecx,edx
10006ba7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006ba9:	83 ec 0c             	sub    esp,0xc
10006bac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006baf:	e8 fc ff ff ff       	call   10006bb0 <NFrame::tryInvalidate()+0x30>	10006bb0: R_386_PC32	NFrame::getAbsX()
10006bb4:	83 c4 10             	add    esp,0x10
10006bb7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10006bba:	83 ec 0c             	sub    esp,0xc
10006bbd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006bc0:	e8 fc ff ff ff       	call   10006bc1 <NFrame::tryInvalidate()+0x41>	10006bc1: R_386_PC32	NFrame::getAbsY()
10006bc5:	83 c4 10             	add    esp,0x10
10006bc8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10006bcb:	83 ec 1c             	sub    esp,0x1c
10006bce:	89 e0                	mov    eax,esp
10006bd0:	89 c3                	mov    ebx,eax
10006bd2:	8d 45 cc             	lea    eax,[ebp-0x34]
10006bd5:	ba 07 00 00 00       	mov    edx,0x7
10006bda:	89 df                	mov    edi,ebx
10006bdc:	89 c6                	mov    esi,eax
10006bde:	89 d1                	mov    ecx,edx
10006be0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006be2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006be5:	e8 fc ff ff ff       	call   10006be6 <NFrame::tryInvalidate()+0x66>	10006be6: R_386_PC32	NFrame::markRegionAsDirty(Region)
10006bea:	83 c4 20             	add    esp,0x20
10006bed:	eb 23                	jmp    10006c12 <NFrame::tryInvalidate()+0x92>
10006bef:	83 ec 0c             	sub    esp,0xc
10006bf2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006bf5:	e8 fc ff ff ff       	call   10006bf6 <NFrame::tryInvalidate()+0x76>	10006bf6: R_386_PC32	NFrame::isHiddenOverall()
10006bfa:	83 c4 10             	add    esp,0x10
10006bfd:	83 f0 01             	xor    eax,0x1
10006c00:	84 c0                	test   al,al
10006c02:	74 0e                	je     10006c12 <NFrame::tryInvalidate()+0x92>
10006c04:	83 ec 0c             	sub    esp,0xc
10006c07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006c0a:	e8 fc ff ff ff       	call   10006c0b <NFrame::tryInvalidate()+0x8b>	10006c0b: R_386_PC32	NFrame::invalidate()
10006c0f:	83 c4 10             	add    esp,0x10
10006c12:	8d 65 f4             	lea    esp,[ebp-0xc]
10006c15:	5b                   	pop    ebx
10006c16:	5e                   	pop    esi
10006c17:	5f                   	pop    edi
10006c18:	5d                   	pop    ebp
10006c19:	c3                   	ret    

10006c1a <NFrame::getAbsX()>:
10006c1a:	55                   	push   ebp
10006c1b:	89 e5                	mov    ebp,esp
10006c1d:	83 ec 08             	sub    esp,0x8
10006c20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006c23:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10006c26:	85 c0                	test   eax,eax
10006c28:	74 1e                	je     10006c48 <NFrame::getAbsX()+0x2e>
10006c2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006c2d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10006c30:	83 ec 0c             	sub    esp,0xc
10006c33:	50                   	push   eax
10006c34:	e8 fc ff ff ff       	call   10006c35 <NFrame::getAbsX()+0x1b>	10006c35: R_386_PC32	NFrame::getAbsX()
10006c39:	83 c4 10             	add    esp,0x10
10006c3c:	89 c2                	mov    edx,eax
10006c3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006c41:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
10006c44:	01 d0                	add    eax,edx
10006c46:	eb 06                	jmp    10006c4e <NFrame::getAbsX()+0x34>
10006c48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006c4b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
10006c4e:	c9                   	leave  
10006c4f:	c3                   	ret    

10006c50 <NFrame::getAbsY()>:
10006c50:	55                   	push   ebp
10006c51:	89 e5                	mov    ebp,esp
10006c53:	83 ec 08             	sub    esp,0x8
10006c56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006c59:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10006c5c:	85 c0                	test   eax,eax
10006c5e:	74 1e                	je     10006c7e <NFrame::getAbsY()+0x2e>
10006c60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006c63:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10006c66:	83 ec 0c             	sub    esp,0xc
10006c69:	50                   	push   eax
10006c6a:	e8 fc ff ff ff       	call   10006c6b <NFrame::getAbsY()+0x1b>	10006c6b: R_386_PC32	NFrame::getAbsY()
10006c6f:	83 c4 10             	add    esp,0x10
10006c72:	89 c2                	mov    edx,eax
10006c74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006c77:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
10006c7a:	01 d0                	add    eax,edx
10006c7c:	eb 06                	jmp    10006c84 <NFrame::getAbsY()+0x34>
10006c7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006c81:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
10006c84:	c9                   	leave  
10006c85:	c3                   	ret    

10006c86 <NFrame::repaint(Video*, Region)>:
10006c86:	55                   	push   ebp
10006c87:	89 e5                	mov    ebp,esp
10006c89:	57                   	push   edi
10006c8a:	56                   	push   esi
10006c8b:	53                   	push   ebx
10006c8c:	83 ec 5c             	sub    esp,0x5c
10006c8f:	8d 45 cc             	lea    eax,[ebp-0x34]
10006c92:	83 ec 08             	sub    esp,0x8
10006c95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006c98:	50                   	push   eax
10006c99:	e8 fc ff ff ff       	call   10006c9a <NFrame::repaint(Video*, Region)+0x14>	10006c9a: R_386_PC32	NFrame::getDirtyRegion()
10006c9e:	83 c4 0c             	add    esp,0xc
10006ca1:	8d 45 b0             	lea    eax,[ebp-0x50]
10006ca4:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10006ca7:	83 ec 04             	sub    esp,0x4
10006caa:	6a 01                	push   0x1
10006cac:	83 ec 1c             	sub    esp,0x1c
10006caf:	89 e0                	mov    eax,esp
10006cb1:	89 c3                	mov    ebx,eax
10006cb3:	8d 45 cc             	lea    eax,[ebp-0x34]
10006cb6:	ba 07 00 00 00       	mov    edx,0x7
10006cbb:	89 df                	mov    edi,ebx
10006cbd:	89 c6                	mov    esi,eax
10006cbf:	89 d1                	mov    ecx,edx
10006cc1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006cc3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006cc6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006cc9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006ccc:	e8 fc ff ff ff       	call   10006ccd <NFrame::repaint(Video*, Region)+0x47>	10006ccd: R_386_PC32	NFrame::repaintAux(Video*, Region, bool)
10006cd1:	83 c4 2c             	add    esp,0x2c
10006cd4:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
10006cd7:	83 ec 0c             	sub    esp,0xc
10006cda:	50                   	push   eax
10006cdb:	e8 fc ff ff ff       	call   10006cdc <NFrame::repaint(Video*, Region)+0x56>	10006cdc: R_386_PC32	free
10006ce0:	83 c4 10             	add    esp,0x10
10006ce3:	90                   	nop
10006ce4:	8d 65 f4             	lea    esp,[ebp-0xc]
10006ce7:	5b                   	pop    ebx
10006ce8:	5e                   	pop    esi
10006ce9:	5f                   	pop    edi
10006cea:	5d                   	pop    ebp
10006ceb:	c3                   	ret    

10006cec <NFrame::paintSolid(NFrame::Graphics, unsigned int)>:
10006cec:	55                   	push   ebp
10006ced:	89 e5                	mov    ebp,esp
10006cef:	57                   	push   edi
10006cf0:	56                   	push   esi
10006cf1:	53                   	push   ebx
10006cf2:	83 ec 1c             	sub    esp,0x1c
10006cf5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006cf8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10006cfb:	83 ec 0c             	sub    esp,0xc
10006cfe:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
10006d01:	83 ec 1c             	sub    esp,0x1c
10006d04:	89 e0                	mov    eax,esp
10006d06:	89 c3                	mov    ebx,eax
10006d08:	8d 45 10             	lea    eax,[ebp+0x10]
10006d0b:	ba 07 00 00 00       	mov    edx,0x7
10006d10:	89 df                	mov    edi,ebx
10006d12:	89 c6                	mov    esi,eax
10006d14:	89 d1                	mov    ecx,edx
10006d16:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006d18:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10006d1b:	e8 fc ff ff ff       	call   10006d1c <NFrame::paintSolid(NFrame::Graphics, unsigned int)+0x30>	10006d1c: R_386_PC32	fillRegion(Video*, Region, unsigned int)
10006d20:	83 c4 30             	add    esp,0x30
10006d23:	90                   	nop
10006d24:	8d 65 f4             	lea    esp,[ebp-0xc]
10006d27:	5b                   	pop    ebx
10006d28:	5e                   	pop    esi
10006d29:	5f                   	pop    edi
10006d2a:	5d                   	pop    ebp
10006d2b:	c3                   	ret    

10006d2c <NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)>:
10006d2c:	55                   	push   ebp
10006d2d:	89 e5                	mov    ebp,esp
10006d2f:	57                   	push   edi
10006d30:	56                   	push   esi
10006d31:	53                   	push   ebx
10006d32:	83 ec 2c             	sub    esp,0x2c
10006d35:	83 ec 0c             	sub    esp,0xc
10006d38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006d3b:	e8 fc ff ff ff       	call   10006d3c <NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)+0x10>	10006d3c: R_386_PC32	NFrame::getAbsY()
10006d40:	83 c4 10             	add    esp,0x10
10006d43:	89 c2                	mov    edx,eax
10006d45:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
10006d48:	8d 1c 02             	lea    ebx,[edx+eax*1]
10006d4b:	83 ec 0c             	sub    esp,0xc
10006d4e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006d51:	e8 fc ff ff ff       	call   10006d52 <NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)+0x26>	10006d52: R_386_PC32	NFrame::getAbsX()
10006d56:	83 c4 10             	add    esp,0x10
10006d59:	89 c2                	mov    edx,eax
10006d5b:	8b 45 2c             	mov    eax,DWORD PTR [ebp+0x2c]
10006d5e:	01 c2                	add    edx,eax
10006d60:	8d 45 cc             	lea    eax,[ebp-0x34]
10006d63:	83 ec 0c             	sub    esp,0xc
10006d66:	ff 75 38             	push   DWORD PTR [ebp+0x38]
10006d69:	ff 75 34             	push   DWORD PTR [ebp+0x34]
10006d6c:	53                   	push   ebx
10006d6d:	52                   	push   edx
10006d6e:	50                   	push   eax
10006d6f:	e8 fc ff ff ff       	call   10006d70 <NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)+0x44>	10006d70: R_386_PC32	createRectangleRegion(int, int, int, int)
10006d74:	83 c4 1c             	add    esp,0x1c
10006d77:	83 ec 0c             	sub    esp,0xc
10006d7a:	ff 75 3c             	push   DWORD PTR [ebp+0x3c]
10006d7d:	83 ec 20             	sub    esp,0x20
10006d80:	89 e0                	mov    eax,esp
10006d82:	89 c3                	mov    ebx,eax
10006d84:	8d 45 0c             	lea    eax,[ebp+0xc]
10006d87:	ba 08 00 00 00       	mov    edx,0x8
10006d8c:	89 df                	mov    edi,ebx
10006d8e:	89 c6                	mov    esi,eax
10006d90:	89 d1                	mov    ecx,edx
10006d92:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006d94:	83 ec 1c             	sub    esp,0x1c
10006d97:	89 e0                	mov    eax,esp
10006d99:	89 c3                	mov    ebx,eax
10006d9b:	8d 45 cc             	lea    eax,[ebp-0x34]
10006d9e:	ba 07 00 00 00       	mov    edx,0x7
10006da3:	89 df                	mov    edi,ebx
10006da5:	89 c6                	mov    esi,eax
10006da7:	89 d1                	mov    ecx,edx
10006da9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006dab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006dae:	e8 fc ff ff ff       	call   10006daf <NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)+0x83>	10006daf: R_386_PC32	NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)
10006db3:	83 c4 50             	add    esp,0x50
10006db6:	90                   	nop
10006db7:	8d 65 f4             	lea    esp,[ebp-0xc]
10006dba:	5b                   	pop    ebx
10006dbb:	5e                   	pop    esi
10006dbc:	5f                   	pop    edi
10006dbd:	5d                   	pop    ebp
10006dbe:	c3                   	ret    
10006dbf:	90                   	nop

10006dc0 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)>:
10006dc0:	55                   	push   ebp
10006dc1:	89 e5                	mov    ebp,esp
10006dc3:	57                   	push   edi
10006dc4:	56                   	push   esi
10006dc5:	53                   	push   ebx
10006dc6:	81 ec bc 00 00 00    	sub    esp,0xbc
10006dcc:	83 7d 3c ff          	cmp    DWORD PTR [ebp+0x3c],0xffffffff
10006dd0:	75 46                	jne    10006e18 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x58>
10006dd2:	6a 00                	push   0x0
10006dd4:	6a 0c                	push   0xc
10006dd6:	68 d4 83 00 10       	push   0x100083d4	10006dd7: R_386_32	.text
10006ddb:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006de1:	50                   	push   eax
10006de2:	e8 fc ff ff ff       	call   10006de3 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x23>	10006de3: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
10006de7:	83 c4 10             	add    esp,0x10
10006dea:	83 ec 08             	sub    esp,0x8
10006ded:	81 ec 88 00 00 00    	sub    esp,0x88
10006df3:	89 e0                	mov    eax,esp
10006df5:	89 c3                	mov    ebx,eax
10006df7:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006dfd:	ba 22 00 00 00       	mov    edx,0x22
10006e02:	89 df                	mov    edi,ebx
10006e04:	89 c6                	mov    esi,eax
10006e06:	89 d1                	mov    ecx,edx
10006e08:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006e0a:	e8 fc ff ff ff       	call   10006e0b <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x4b>	10006e0b: R_386_PC32	getFontHandle(FontStyle)
10006e0f:	81 c4 90 00 00 00    	add    esp,0x90
10006e15:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
10006e18:	83 ec 0c             	sub    esp,0xc
10006e1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006e1e:	e8 fc ff ff ff       	call   10006e1f <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x5f>	10006e1f: R_386_PC32	NFrame::getAbsX()
10006e23:	83 c4 10             	add    esp,0x10
10006e26:	01 45 2c             	add    DWORD PTR [ebp+0x2c],eax
10006e29:	83 ec 0c             	sub    esp,0xc
10006e2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006e2f:	e8 fc ff ff ff       	call   10006e30 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x70>	10006e30: R_386_PC32	NFrame::getAbsY()
10006e34:	83 c4 10             	add    esp,0x10
10006e37:	01 45 30             	add    DWORD PTR [ebp+0x30],eax
10006e3a:	8b 45 2c             	mov    eax,DWORD PTR [ebp+0x2c]
10006e3d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10006e40:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10006e47:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10006e4e:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10006e51:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
10006e54:	01 d0                	add    eax,edx
10006e56:	8a 00                	mov    al,BYTE PTR [eax]
10006e58:	84 c0                	test   al,al
10006e5a:	0f 84 9e 00 00 00    	je     10006efe <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x13e>
10006e60:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10006e63:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
10006e66:	01 d0                	add    eax,edx
10006e68:	8a 00                	mov    al,BYTE PTR [eax]
10006e6a:	3c 0a                	cmp    al,0xa
10006e6c:	75 15                	jne    10006e83 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0xc3>
10006e6e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10006e71:	01 45 30             	add    DWORD PTR [ebp+0x30],eax
10006e74:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10006e7b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006e7e:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
10006e81:	eb 73                	jmp    10006ef6 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x136>
10006e83:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10006e86:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
10006e89:	01 d0                	add    eax,edx
10006e8b:	8a 00                	mov    al,BYTE PTR [eax]
10006e8d:	0f be c0             	movsx  eax,al
10006e90:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10006e93:	89 8d 44 ff ff ff    	mov    DWORD PTR [ebp-0xbc],ecx
10006e99:	83 ec 0c             	sub    esp,0xc
10006e9c:	ff 75 38             	push   DWORD PTR [ebp+0x38]
10006e9f:	ff 75 30             	push   DWORD PTR [ebp+0x30]
10006ea2:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
10006ea5:	50                   	push   eax
10006ea6:	ff 75 3c             	push   DWORD PTR [ebp+0x3c]
10006ea9:	83 ec 1c             	sub    esp,0x1c
10006eac:	89 e0                	mov    eax,esp
10006eae:	89 c3                	mov    ebx,eax
10006eb0:	8d 45 10             	lea    eax,[ebp+0x10]
10006eb3:	ba 07 00 00 00       	mov    edx,0x7
10006eb8:	89 df                	mov    edi,ebx
10006eba:	89 c6                	mov    esi,eax
10006ebc:	89 d1                	mov    ecx,edx
10006ebe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006ec0:	ff b5 44 ff ff ff    	push   DWORD PTR [ebp-0xbc]
10006ec6:	e8 fc ff ff ff       	call   10006ec7 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x107>	10006ec7: R_386_PC32	drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)
10006ecb:	83 c4 40             	add    esp,0x40
10006ece:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10006ed1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10006ed4:	0f b7 d0             	movzx  edx,ax
10006ed7:	8b 45 2c             	mov    eax,DWORD PTR [ebp+0x2c]
10006eda:	01 d0                	add    eax,edx
10006edc:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
10006edf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10006ee2:	c1 e8 10             	shr    eax,0x10
10006ee5:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10006ee8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006eeb:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
10006eee:	7e 06                	jle    10006ef6 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x136>
10006ef0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006ef3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10006ef6:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10006ef9:	e9 50 ff ff ff       	jmp    10006e4e <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x8e>
10006efe:	90                   	nop
10006eff:	8d 65 f4             	lea    esp,[ebp-0xc]
10006f02:	5b                   	pop    ebx
10006f03:	5e                   	pop    esi
10006f04:	5f                   	pop    edi
10006f05:	5d                   	pop    ebp
10006f06:	c3                   	ret    
10006f07:	90                   	nop

10006f08 <NWindow::NWindow(int, int, int, int, char const*, int)>:
10006f08:	55                   	push   ebp
10006f09:	89 e5                	mov    ebp,esp
10006f0b:	57                   	push   edi
10006f0c:	56                   	push   esi
10006f0d:	53                   	push   ebx
10006f0e:	83 ec 3c             	sub    esp,0x3c
10006f11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f14:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10006f17:	8d 45 cc             	lea    eax,[ebp-0x34]
10006f1a:	83 ec 0c             	sub    esp,0xc
10006f1d:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10006f20:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10006f23:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10006f26:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006f29:	50                   	push   eax
10006f2a:	e8 fc ff ff ff       	call   10006f2b <NWindow::NWindow(int, int, int, int, char const*, int)+0x23>	10006f2b: R_386_PC32	createRectangleRegion(int, int, int, int)
10006f2f:	83 c4 1c             	add    esp,0x1c
10006f32:	83 ec 1c             	sub    esp,0x1c
10006f35:	89 e0                	mov    eax,esp
10006f37:	89 c3                	mov    ebx,eax
10006f39:	8d 45 cc             	lea    eax,[ebp-0x34]
10006f3c:	ba 07 00 00 00       	mov    edx,0x7
10006f41:	89 df                	mov    edi,ebx
10006f43:	89 c6                	mov    esi,eax
10006f45:	89 d1                	mov    ecx,edx
10006f47:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006f49:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10006f4c:	e8 fc ff ff ff       	call   10006f4d <NWindow::NWindow(int, int, int, int, char const*, int)+0x45>	10006f4d: R_386_PC32	NFrame::NFrame(Region)
10006f51:	83 c4 20             	add    esp,0x20
10006f54:	ba 08 00 00 00       	mov    edx,0x8	10006f55: R_386_32	vtable for NWindow
10006f59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f5c:	89 10                	mov    DWORD PTR [eax],edx
10006f5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f61:	c7 80 88 00 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x88],0x3
10006f6b:	c6 45 cb 00          	mov    BYTE PTR [ebp-0x35],0x0
10006f6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f72:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
10006f75:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
10006f78:	83 7d 1c 00          	cmp    DWORD PTR [ebp+0x1c],0x0
10006f7c:	75 06                	jne    10006f84 <NWindow::NWindow(int, int, int, int, char const*, int)+0x7c>
10006f7e:	8d 45 cb             	lea    eax,[ebp-0x35]
10006f81:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
10006f84:	83 ec 0c             	sub    esp,0xc
10006f87:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
10006f8a:	e8 fc ff ff ff       	call   10006f8b <NWindow::NWindow(int, int, int, int, char const*, int)+0x83>	10006f8b: R_386_PC32	strlen
10006f8f:	83 c4 10             	add    esp,0x10
10006f92:	40                   	inc    eax
10006f93:	83 ec 0c             	sub    esp,0xc
10006f96:	50                   	push   eax
10006f97:	e8 fc ff ff ff       	call   10006f98 <NWindow::NWindow(int, int, int, int, char const*, int)+0x90>	10006f98: R_386_PC32	malloc
10006f9c:	83 c4 10             	add    esp,0x10
10006f9f:	89 c2                	mov    edx,eax
10006fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006fa4:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
10006faa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006fad:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
10006fb3:	83 ec 08             	sub    esp,0x8
10006fb6:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
10006fb9:	50                   	push   eax
10006fba:	e8 fc ff ff ff       	call   10006fbb <NWindow::NWindow(int, int, int, int, char const*, int)+0xb3>	10006fbb: R_386_PC32	strcpy
10006fbf:	83 c4 10             	add    esp,0x10
10006fc2:	83 ec 0c             	sub    esp,0xc
10006fc5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006fc8:	e8 fc ff ff ff       	call   10006fc9 <NWindow::NWindow(int, int, int, int, char const*, int)+0xc1>	10006fc9: R_386_PC32	NWindow::clipCornersIfNeededToMakeShadows()
10006fcd:	83 c4 10             	add    esp,0x10
10006fd0:	90                   	nop
10006fd1:	8d 65 f4             	lea    esp,[ebp-0xc]
10006fd4:	5b                   	pop    ebx
10006fd5:	5e                   	pop    esi
10006fd6:	5f                   	pop    edi
10006fd7:	5d                   	pop    ebp
10006fd8:	c3                   	ret    
10006fd9:	90                   	nop

10006fda <NWindow::clipCornersIfNeededToMakeShadows()>:
10006fda:	55                   	push   ebp
10006fdb:	89 e5                	mov    ebp,esp
10006fdd:	57                   	push   edi
10006fde:	56                   	push   esi
10006fdf:	53                   	push   ebx
10006fe0:	81 ec 8c 00 00 00    	sub    esp,0x8c
10006fe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006fe9:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10006fec:	83 e0 04             	and    eax,0x4
10006fef:	85 c0                	test   eax,eax
10006ff1:	0f 85 96 01 00 00    	jne    1000718d <NWindow::clipCornersIfNeededToMakeShadows()+0x1b3>
10006ff7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006ffa:	8a 40 70             	mov    al,BYTE PTR [eax+0x70]
10006ffd:	83 f0 01             	xor    eax,0x1
10007000:	84 c0                	test   al,al
10007002:	0f 84 85 01 00 00    	je     1000718d <NWindow::clipCornersIfNeededToMakeShadows()+0x1b3>
10007008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000700b:	c7 80 88 00 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x88],0x3
10007015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007018:	8b 98 88 00 00 00    	mov    ebx,DWORD PTR [eax+0x88]
1000701e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007021:	8b 88 88 00 00 00    	mov    ecx,DWORD PTR [eax+0x88]
10007027:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000702a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
1000702d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007030:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
10007033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007036:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10007039:	01 c6                	add    esi,eax
1000703b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000703e:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
10007044:	29 c6                	sub    esi,eax
10007046:	8d 45 cc             	lea    eax,[ebp-0x34]
10007049:	83 ec 0c             	sub    esp,0xc
1000704c:	53                   	push   ebx
1000704d:	51                   	push   ecx
1000704e:	52                   	push   edx
1000704f:	56                   	push   esi
10007050:	50                   	push   eax
10007051:	e8 fc ff ff ff       	call   10007052 <NWindow::clipCornersIfNeededToMakeShadows()+0x78>	10007052: R_386_PC32	createRectangleRegion(int, int, int, int)
10007056:	83 c4 1c             	add    esp,0x1c
10007059:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000705c:	8b 98 88 00 00 00    	mov    ebx,DWORD PTR [eax+0x88]
10007062:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007065:	8b 88 88 00 00 00    	mov    ecx,DWORD PTR [eax+0x88]
1000706b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000706e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
10007071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007074:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
10007077:	01 c2                	add    edx,eax
10007079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000707c:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
10007082:	89 d6                	mov    esi,edx
10007084:	29 c6                	sub    esi,eax
10007086:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007089:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
1000708c:	8d 45 b0             	lea    eax,[ebp-0x50]
1000708f:	83 ec 0c             	sub    esp,0xc
10007092:	53                   	push   ebx
10007093:	51                   	push   ecx
10007094:	56                   	push   esi
10007095:	52                   	push   edx
10007096:	50                   	push   eax
10007097:	e8 fc ff ff ff       	call   10007098 <NWindow::clipCornersIfNeededToMakeShadows()+0xbe>	10007098: R_386_PC32	createRectangleRegion(int, int, int, int)
1000709c:	83 c4 1c             	add    esp,0x1c
1000709f:	8d 45 94             	lea    eax,[ebp-0x6c]
100070a2:	89 85 74 ff ff ff    	mov    DWORD PTR [ebp-0x8c],eax
100070a8:	83 ec 04             	sub    esp,0x4
100070ab:	83 ec 1c             	sub    esp,0x1c
100070ae:	89 e0                	mov    eax,esp
100070b0:	89 c3                	mov    ebx,eax
100070b2:	8d 45 b0             	lea    eax,[ebp-0x50]
100070b5:	ba 07 00 00 00       	mov    edx,0x7
100070ba:	89 df                	mov    edi,ebx
100070bc:	89 c6                	mov    esi,eax
100070be:	89 d1                	mov    ecx,edx
100070c0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100070c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100070c5:	83 ec 1c             	sub    esp,0x1c
100070c8:	89 e2                	mov    edx,esp
100070ca:	8d 58 14             	lea    ebx,[eax+0x14]
100070cd:	b8 07 00 00 00       	mov    eax,0x7
100070d2:	89 d7                	mov    edi,edx
100070d4:	89 de                	mov    esi,ebx
100070d6:	89 c1                	mov    ecx,eax
100070d8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100070da:	ff b5 74 ff ff ff    	push   DWORD PTR [ebp-0x8c]
100070e0:	e8 fc ff ff ff       	call   100070e1 <NWindow::clipCornersIfNeededToMakeShadows()+0x107>	100070e1: R_386_PC32	getRegionDifference(Region, Region)
100070e5:	83 c4 3c             	add    esp,0x3c
100070e8:	8d 85 78 ff ff ff    	lea    eax,[ebp-0x88]
100070ee:	89 85 74 ff ff ff    	mov    DWORD PTR [ebp-0x8c],eax
100070f4:	83 ec 04             	sub    esp,0x4
100070f7:	83 ec 1c             	sub    esp,0x1c
100070fa:	89 e0                	mov    eax,esp
100070fc:	89 c3                	mov    ebx,eax
100070fe:	8d 45 cc             	lea    eax,[ebp-0x34]
10007101:	ba 07 00 00 00       	mov    edx,0x7
10007106:	89 df                	mov    edi,ebx
10007108:	89 c6                	mov    esi,eax
1000710a:	89 d1                	mov    ecx,edx
1000710c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000710e:	83 ec 1c             	sub    esp,0x1c
10007111:	89 e0                	mov    eax,esp
10007113:	89 c3                	mov    ebx,eax
10007115:	8d 45 94             	lea    eax,[ebp-0x6c]
10007118:	ba 07 00 00 00       	mov    edx,0x7
1000711d:	89 df                	mov    edi,ebx
1000711f:	89 c6                	mov    esi,eax
10007121:	89 d1                	mov    ecx,edx
10007123:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007125:	ff b5 74 ff ff ff    	push   DWORD PTR [ebp-0x8c]
1000712b:	e8 fc ff ff ff       	call   1000712c <NWindow::clipCornersIfNeededToMakeShadows()+0x152>	1000712c: R_386_PC32	getRegionDifference(Region, Region)
10007130:	83 c4 3c             	add    esp,0x3c
10007133:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007136:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10007139:	83 ec 0c             	sub    esp,0xc
1000713c:	50                   	push   eax
1000713d:	e8 fc ff ff ff       	call   1000713e <NWindow::clipCornersIfNeededToMakeShadows()+0x164>	1000713e: R_386_PC32	free
10007142:	83 c4 10             	add    esp,0x10
10007145:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
10007148:	83 ec 0c             	sub    esp,0xc
1000714b:	50                   	push   eax
1000714c:	e8 fc ff ff ff       	call   1000714d <NWindow::clipCornersIfNeededToMakeShadows()+0x173>	1000714d: R_386_PC32	free
10007151:	83 c4 10             	add    esp,0x10
10007154:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10007157:	83 ec 0c             	sub    esp,0xc
1000715a:	50                   	push   eax
1000715b:	e8 fc ff ff ff       	call   1000715c <NWindow::clipCornersIfNeededToMakeShadows()+0x182>	1000715c: R_386_PC32	free
10007160:	83 c4 10             	add    esp,0x10
10007163:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
10007166:	83 ec 0c             	sub    esp,0xc
10007169:	50                   	push   eax
1000716a:	e8 fc ff ff ff       	call   1000716b <NWindow::clipCornersIfNeededToMakeShadows()+0x191>	1000716b: R_386_PC32	free
1000716f:	83 c4 10             	add    esp,0x10
10007172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007175:	8d 58 14             	lea    ebx,[eax+0x14]
10007178:	8d 85 78 ff ff ff    	lea    eax,[ebp-0x88]
1000717e:	ba 19 00 00 00       	mov    edx,0x19
10007183:	89 df                	mov    edi,ebx
10007185:	89 c6                	mov    esi,eax
10007187:	89 d1                	mov    ecx,edx
10007189:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000718b:	eb 0d                	jmp    1000719a <NWindow::clipCornersIfNeededToMakeShadows()+0x1c0>
1000718d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007190:	c7 80 88 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x88],0x0
1000719a:	90                   	nop
1000719b:	8d 65 f4             	lea    esp,[ebp-0xc]
1000719e:	5b                   	pop    ebx
1000719f:	5e                   	pop    esi
100071a0:	5f                   	pop    edi
100071a1:	5d                   	pop    ebp
100071a2:	c3                   	ret    
100071a3:	90                   	nop

100071a4 <NWindow::postResizeCleanup()>:
100071a4:	55                   	push   ebp
100071a5:	89 e5                	mov    ebp,esp
100071a7:	83 ec 08             	sub    esp,0x8
100071aa:	83 ec 0c             	sub    esp,0xc
100071ad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100071b0:	e8 fc ff ff ff       	call   100071b1 <NWindow::postResizeCleanup()+0xd>	100071b1: R_386_PC32	NWindow::clipCornersIfNeededToMakeShadows()
100071b5:	83 c4 10             	add    esp,0x10
100071b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100071bb:	83 ec 0c             	sub    esp,0xc
100071be:	50                   	push   eax
100071bf:	e8 fc ff ff ff       	call   100071c0 <NWindow::postResizeCleanup()+0x1c>	100071c0: R_386_PC32	NFrame::tryInvalidate()
100071c4:	83 c4 10             	add    esp,0x10
100071c7:	90                   	nop
100071c8:	c9                   	leave  
100071c9:	c3                   	ret    

100071ca <NWindow::paintHandler(NFrame::Graphics)>:
100071ca:	55                   	push   ebp
100071cb:	89 e5                	mov    ebp,esp
100071cd:	57                   	push   edi
100071ce:	56                   	push   esi
100071cf:	53                   	push   ebx
100071d0:	83 ec 4c             	sub    esp,0x4c
100071d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100071d6:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
100071d9:	83 e0 08             	and    eax,0x8
100071dc:	85 c0                	test   eax,eax
100071de:	0f 85 5a 04 00 00    	jne    1000763e <NWindow::paintHandler(NFrame::Graphics)+0x474>
100071e4:	c7 45 e4 18 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x18
100071eb:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100071f2:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100071f9:	c7 45 d8 c0 c0 c0 00 	mov    DWORD PTR [ebp-0x28],0xc0c0c0
10007200:	c7 45 d4 ff ff ff 00 	mov    DWORD PTR [ebp-0x2c],0xffffff
10007207:	c7 45 d0 ff ff ff 00 	mov    DWORD PTR [ebp-0x30],0xffffff
1000720e:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
10007215:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
1000721c:	c7 45 c4 c0 c0 c0 00 	mov    DWORD PTR [ebp-0x3c],0xc0c0c0
10007223:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007226:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007229:	83 e0 01             	and    eax,0x1
1000722c:	85 c0                	test   eax,eax
1000722e:	0f 85 0d 02 00 00    	jne    10007441 <NWindow::paintHandler(NFrame::Graphics)+0x277>
10007234:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007237:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
1000723a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000723d:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10007240:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007243:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
10007249:	89 d1                	mov    ecx,edx
1000724b:	29 c1                	sub    ecx,eax
1000724d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007250:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
10007253:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007256:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
1000725c:	83 ec 08             	sub    esp,0x8
1000725f:	68 c0 c0 c0 00       	push   0xc0c0c0
10007264:	51                   	push   ecx
10007265:	52                   	push   edx
10007266:	50                   	push   eax
10007267:	6a 00                	push   0x0
10007269:	83 ec 20             	sub    esp,0x20
1000726c:	89 e0                	mov    eax,esp
1000726e:	89 c3                	mov    ebx,eax
10007270:	8d 45 0c             	lea    eax,[ebp+0xc]
10007273:	ba 08 00 00 00       	mov    edx,0x8
10007278:	89 df                	mov    edi,ebx
1000727a:	89 c6                	mov    esi,eax
1000727c:	89 d1                	mov    ecx,edx
1000727e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007280:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007283:	e8 fc ff ff ff       	call   10007284 <NWindow::paintHandler(NFrame::Graphics)+0xba>	10007284: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007288:	83 c4 40             	add    esp,0x40
1000728b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000728e:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007291:	83 e0 02             	and    eax,0x2
10007294:	85 c0                	test   eax,eax
10007296:	0f 85 14 01 00 00    	jne    100073b0 <NWindow::paintHandler(NFrame::Graphics)+0x1e6>
1000729c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000729f:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
100072a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100072a5:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
100072ab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100072ae:	8b 4a 18             	mov    ecx,DWORD PTR [edx+0x18]
100072b1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100072b4:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
100072ba:	29 d1                	sub    ecx,edx
100072bc:	89 ca                	mov    edx,ecx
100072be:	83 ea 18             	sub    edx,0x18
100072c1:	83 ec 08             	sub    esp,0x8
100072c4:	68 ff ff ff 00       	push   0xffffff
100072c9:	50                   	push   eax
100072ca:	52                   	push   edx
100072cb:	6a 00                	push   0x0
100072cd:	6a 00                	push   0x0
100072cf:	83 ec 20             	sub    esp,0x20
100072d2:	89 e0                	mov    eax,esp
100072d4:	89 c3                	mov    ebx,eax
100072d6:	8d 45 0c             	lea    eax,[ebp+0xc]
100072d9:	ba 08 00 00 00       	mov    edx,0x8
100072de:	89 df                	mov    edi,ebx
100072e0:	89 c6                	mov    esi,eax
100072e2:	89 d1                	mov    ecx,edx
100072e4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100072e6:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
100072e9:	e8 fc ff ff ff       	call   100072ea <NWindow::paintHandler(NFrame::Graphics)+0x120>	100072ea: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
100072ee:	83 c4 40             	add    esp,0x40
100072f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100072f4:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
100072f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100072fa:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
10007300:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007303:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
10007306:	8d 4a e8             	lea    ecx,[edx-0x18]
10007309:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000730c:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
10007312:	29 d1                	sub    ecx,edx
10007314:	89 ca                	mov    edx,ecx
10007316:	83 ec 08             	sub    esp,0x8
10007319:	68 ff ff ff 00       	push   0xffffff
1000731e:	50                   	push   eax
1000731f:	6a 18                	push   0x18
10007321:	6a 00                	push   0x0
10007323:	52                   	push   edx
10007324:	83 ec 20             	sub    esp,0x20
10007327:	89 e0                	mov    eax,esp
10007329:	89 c3                	mov    ebx,eax
1000732b:	8d 45 0c             	lea    eax,[ebp+0xc]
1000732e:	ba 08 00 00 00       	mov    edx,0x8
10007333:	89 df                	mov    edi,ebx
10007335:	89 c6                	mov    esi,eax
10007337:	89 d1                	mov    ecx,edx
10007339:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000733b:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
1000733e:	e8 fc ff ff ff       	call   1000733f <NWindow::paintHandler(NFrame::Graphics)+0x175>	1000733f: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007343:	83 c4 40             	add    esp,0x40
10007346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007349:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
1000734c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000734f:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007352:	83 e0 10             	and    eax,0x10
10007355:	85 c0                	test   eax,eax
10007357:	74 07                	je     10007360 <NWindow::paintHandler(NFrame::Graphics)+0x196>
10007359:	b8 c0 c0 c0 00       	mov    eax,0xc0c0c0
1000735e:	eb 05                	jmp    10007365 <NWindow::paintHandler(NFrame::Graphics)+0x19b>
10007360:	b8 00 00 00 00       	mov    eax,0x0
10007365:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007368:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
1000736b:	8d 4a e8             	lea    ecx,[edx-0x18]
1000736e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007371:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
10007377:	29 d1                	sub    ecx,edx
10007379:	89 ca                	mov    edx,ecx
1000737b:	83 c2 08             	add    edx,0x8
1000737e:	83 ec 08             	sub    esp,0x8
10007381:	6a ff                	push   0xffffffff
10007383:	50                   	push   eax
10007384:	68 dc 83 00 10       	push   0x100083dc	10007385: R_386_32	.text
10007389:	6a 06                	push   0x6
1000738b:	52                   	push   edx
1000738c:	83 ec 20             	sub    esp,0x20
1000738f:	89 e0                	mov    eax,esp
10007391:	89 c3                	mov    ebx,eax
10007393:	8d 45 0c             	lea    eax,[ebp+0xc]
10007396:	ba 08 00 00 00       	mov    edx,0x8
1000739b:	89 df                	mov    edi,ebx
1000739d:	89 c6                	mov    esi,eax
1000739f:	89 d1                	mov    ecx,edx
100073a1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100073a3:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
100073a6:	e8 fc ff ff ff       	call   100073a7 <NWindow::paintHandler(NFrame::Graphics)+0x1dd>	100073a7: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
100073ab:	83 c4 40             	add    esp,0x40
100073ae:	eb 52                	jmp    10007402 <NWindow::paintHandler(NFrame::Graphics)+0x238>
100073b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100073b3:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
100073b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100073b9:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
100073bf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100073c2:	8b 4a 18             	mov    ecx,DWORD PTR [edx+0x18]
100073c5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100073c8:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
100073ce:	29 d1                	sub    ecx,edx
100073d0:	89 ca                	mov    edx,ecx
100073d2:	83 ec 08             	sub    esp,0x8
100073d5:	68 ff ff ff 00       	push   0xffffff
100073da:	50                   	push   eax
100073db:	52                   	push   edx
100073dc:	6a 00                	push   0x0
100073de:	6a 00                	push   0x0
100073e0:	83 ec 20             	sub    esp,0x20
100073e3:	89 e0                	mov    eax,esp
100073e5:	89 c3                	mov    ebx,eax
100073e7:	8d 45 0c             	lea    eax,[ebp+0xc]
100073ea:	ba 08 00 00 00       	mov    edx,0x8
100073ef:	89 df                	mov    edi,ebx
100073f1:	89 c6                	mov    esi,eax
100073f3:	89 d1                	mov    ecx,edx
100073f5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100073f7:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
100073fa:	e8 fc ff ff ff       	call   100073fb <NWindow::paintHandler(NFrame::Graphics)+0x231>	100073fb: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
100073ff:	83 c4 40             	add    esp,0x40
10007402:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007405:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000740b:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
10007411:	83 ec 08             	sub    esp,0x8
10007414:	6a ff                	push   0xffffffff
10007416:	6a 00                	push   0x0
10007418:	50                   	push   eax
10007419:	6a 06                	push   0x6
1000741b:	6a 08                	push   0x8
1000741d:	83 ec 20             	sub    esp,0x20
10007420:	89 e0                	mov    eax,esp
10007422:	89 c3                	mov    ebx,eax
10007424:	8d 45 0c             	lea    eax,[ebp+0xc]
10007427:	ba 08 00 00 00       	mov    edx,0x8
1000742c:	89 df                	mov    edi,ebx
1000742e:	89 c6                	mov    esi,eax
10007430:	89 d1                	mov    ecx,edx
10007432:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007434:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007437:	e8 fc ff ff ff       	call   10007438 <NWindow::paintHandler(NFrame::Graphics)+0x26e>	10007438: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
1000743c:	83 c4 40             	add    esp,0x40
1000743f:	eb 30                	jmp    10007471 <NWindow::paintHandler(NFrame::Graphics)+0x2a7>
10007441:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007444:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007447:	83 ec 08             	sub    esp,0x8
1000744a:	68 c0 c0 c0 00       	push   0xc0c0c0
1000744f:	83 ec 20             	sub    esp,0x20
10007452:	89 e0                	mov    eax,esp
10007454:	89 c3                	mov    ebx,eax
10007456:	8d 45 0c             	lea    eax,[ebp+0xc]
10007459:	ba 08 00 00 00       	mov    edx,0x8
1000745e:	89 df                	mov    edi,ebx
10007460:	89 c6                	mov    esi,eax
10007462:	89 d1                	mov    ecx,edx
10007464:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007466:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007469:	e8 fc ff ff ff       	call   1000746a <NWindow::paintHandler(NFrame::Graphics)+0x2a0>	1000746a: R_386_PC32	NFrame::paintSolid(NFrame::Graphics, unsigned int)
1000746e:	83 c4 30             	add    esp,0x30
10007471:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007474:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007477:	83 e0 04             	and    eax,0x4
1000747a:	85 c0                	test   eax,eax
1000747c:	0f 85 bd 01 00 00    	jne    1000763f <NWindow::paintHandler(NFrame::Graphics)+0x475>
10007482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007485:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007488:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000748b:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
1000748e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007491:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
10007497:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000749a:	8b 59 18             	mov    ebx,DWORD PTR [ecx+0x18]
1000749d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100074a0:	8b 89 88 00 00 00    	mov    ecx,DWORD PTR [ecx+0x88]
100074a6:	29 cb                	sub    ebx,ecx
100074a8:	89 d9                	mov    ecx,ebx
100074aa:	83 ec 08             	sub    esp,0x8
100074ad:	6a 00                	push   0x0
100074af:	52                   	push   edx
100074b0:	50                   	push   eax
100074b1:	6a 00                	push   0x0
100074b3:	51                   	push   ecx
100074b4:	83 ec 20             	sub    esp,0x20
100074b7:	89 e0                	mov    eax,esp
100074b9:	89 c3                	mov    ebx,eax
100074bb:	8d 45 0c             	lea    eax,[ebp+0xc]
100074be:	ba 08 00 00 00       	mov    edx,0x8
100074c3:	89 df                	mov    edi,ebx
100074c5:	89 c6                	mov    esi,eax
100074c7:	89 d1                	mov    ecx,edx
100074c9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100074cb:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
100074ce:	e8 fc ff ff ff       	call   100074cf <NWindow::paintHandler(NFrame::Graphics)+0x305>	100074cf: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
100074d3:	83 c4 40             	add    esp,0x40
100074d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100074d9:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
100074dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100074df:	8b 90 88 00 00 00    	mov    edx,DWORD PTR [eax+0x88]
100074e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100074e8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
100074eb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100074ee:	8b 59 1c             	mov    ebx,DWORD PTR [ecx+0x1c]
100074f1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100074f4:	8b 89 88 00 00 00    	mov    ecx,DWORD PTR [ecx+0x88]
100074fa:	29 cb                	sub    ebx,ecx
100074fc:	89 d9                	mov    ecx,ebx
100074fe:	83 ec 08             	sub    esp,0x8
10007501:	6a 00                	push   0x0
10007503:	52                   	push   edx
10007504:	50                   	push   eax
10007505:	51                   	push   ecx
10007506:	6a 00                	push   0x0
10007508:	83 ec 20             	sub    esp,0x20
1000750b:	89 e0                	mov    eax,esp
1000750d:	89 c3                	mov    ebx,eax
1000750f:	8d 45 0c             	lea    eax,[ebp+0xc]
10007512:	ba 08 00 00 00       	mov    edx,0x8
10007517:	89 df                	mov    edi,ebx
10007519:	89 c6                	mov    esi,eax
1000751b:	89 d1                	mov    ecx,edx
1000751d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000751f:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007522:	e8 fc ff ff ff       	call   10007523 <NWindow::paintHandler(NFrame::Graphics)+0x359>	10007523: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007527:	83 c4 40             	add    esp,0x40
1000752a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000752d:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007533:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10007536:	83 ec 08             	sub    esp,0x8
10007539:	6a 00                	push   0x0
1000753b:	6a 01                	push   0x1
1000753d:	50                   	push   eax
1000753e:	6a 00                	push   0x0
10007540:	6a 00                	push   0x0
10007542:	83 ec 20             	sub    esp,0x20
10007545:	89 e0                	mov    eax,esp
10007547:	89 c3                	mov    ebx,eax
10007549:	8d 45 0c             	lea    eax,[ebp+0xc]
1000754c:	ba 08 00 00 00       	mov    edx,0x8
10007551:	89 df                	mov    edi,ebx
10007553:	89 c6                	mov    esi,eax
10007555:	89 d1                	mov    ecx,edx
10007557:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007559:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
1000755c:	e8 fc ff ff ff       	call   1000755d <NWindow::paintHandler(NFrame::Graphics)+0x393>	1000755d: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007561:	83 c4 40             	add    esp,0x40
10007564:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007567:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
1000756a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000756d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
10007570:	83 ec 08             	sub    esp,0x8
10007573:	6a 00                	push   0x0
10007575:	50                   	push   eax
10007576:	6a 01                	push   0x1
10007578:	6a 00                	push   0x0
1000757a:	6a 00                	push   0x0
1000757c:	83 ec 20             	sub    esp,0x20
1000757f:	89 e0                	mov    eax,esp
10007581:	89 c3                	mov    ebx,eax
10007583:	8d 45 0c             	lea    eax,[ebp+0xc]
10007586:	ba 08 00 00 00       	mov    edx,0x8
1000758b:	89 df                	mov    edi,ebx
1000758d:	89 c6                	mov    esi,eax
1000758f:	89 d1                	mov    ecx,edx
10007591:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007593:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007596:	e8 fc ff ff ff       	call   10007597 <NWindow::paintHandler(NFrame::Graphics)+0x3cd>	10007597: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
1000759b:	83 c4 40             	add    esp,0x40
1000759e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100075a1:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
100075a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100075a7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
100075aa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100075ad:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
100075b0:	8d 4a ff             	lea    ecx,[edx-0x1]
100075b3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100075b6:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
100075bc:	29 d1                	sub    ecx,edx
100075be:	89 ca                	mov    edx,ecx
100075c0:	83 ec 08             	sub    esp,0x8
100075c3:	6a 00                	push   0x0
100075c5:	6a 01                	push   0x1
100075c7:	50                   	push   eax
100075c8:	52                   	push   edx
100075c9:	6a 00                	push   0x0
100075cb:	83 ec 20             	sub    esp,0x20
100075ce:	89 e0                	mov    eax,esp
100075d0:	89 c3                	mov    ebx,eax
100075d2:	8d 45 0c             	lea    eax,[ebp+0xc]
100075d5:	ba 08 00 00 00       	mov    edx,0x8
100075da:	89 df                	mov    edi,ebx
100075dc:	89 c6                	mov    esi,eax
100075de:	89 d1                	mov    ecx,edx
100075e0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100075e2:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
100075e5:	e8 fc ff ff ff       	call   100075e6 <NWindow::paintHandler(NFrame::Graphics)+0x41c>	100075e6: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
100075ea:	83 c4 40             	add    esp,0x40
100075ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100075f0:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
100075f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100075f6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
100075f9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100075fc:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
100075ff:	8d 4a ff             	lea    ecx,[edx-0x1]
10007602:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007605:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
1000760b:	29 d1                	sub    ecx,edx
1000760d:	89 ca                	mov    edx,ecx
1000760f:	83 ec 08             	sub    esp,0x8
10007612:	6a 00                	push   0x0
10007614:	50                   	push   eax
10007615:	6a 01                	push   0x1
10007617:	6a 00                	push   0x0
10007619:	52                   	push   edx
1000761a:	83 ec 20             	sub    esp,0x20
1000761d:	89 e0                	mov    eax,esp
1000761f:	89 c3                	mov    ebx,eax
10007621:	8d 45 0c             	lea    eax,[ebp+0xc]
10007624:	ba 08 00 00 00       	mov    edx,0x8
10007629:	89 df                	mov    edi,ebx
1000762b:	89 c6                	mov    esi,eax
1000762d:	89 d1                	mov    ecx,edx
1000762f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007631:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007634:	e8 fc ff ff ff       	call   10007635 <NWindow::paintHandler(NFrame::Graphics)+0x46b>	10007635: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007639:	83 c4 40             	add    esp,0x40
1000763c:	eb 01                	jmp    1000763f <NWindow::paintHandler(NFrame::Graphics)+0x475>
1000763e:	90                   	nop
1000763f:	8d 65 f4             	lea    esp,[ebp-0xc]
10007642:	5b                   	pop    ebx
10007643:	5e                   	pop    esi
10007644:	5f                   	pop    edi
10007645:	5d                   	pop    ebp
10007646:	c3                   	ret    
10007647:	90                   	nop

10007648 <NDesktopWindow::NDesktopWindow(int, int, int, int, int)>:
10007648:	55                   	push   ebp
10007649:	89 e5                	mov    ebp,esp
1000764b:	83 ec 08             	sub    esp,0x8
1000764e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007651:	83 ec 0c             	sub    esp,0xc
10007654:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10007657:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000765a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000765d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10007660:	50                   	push   eax
10007661:	e8 fc ff ff ff       	call   10007662 <NDesktopWindow::NDesktopWindow(int, int, int, int, int)+0x1a>	10007662: R_386_PC32	NFrame::NFrame(int, int, int, int)
10007666:	83 c4 20             	add    esp,0x20
10007669:	ba 08 00 00 00       	mov    edx,0x8	1000766a: R_386_32	vtable for NDesktopWindow
1000766e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007671:	89 10                	mov    DWORD PTR [eax],edx
10007673:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007676:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
10007679:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
1000767f:	90                   	nop
10007680:	c9                   	leave  
10007681:	c3                   	ret    

10007682 <NDesktopWindow::paintHandler(NFrame::Graphics)>:
10007682:	55                   	push   ebp
10007683:	89 e5                	mov    ebp,esp
10007685:	57                   	push   edi
10007686:	56                   	push   esi
10007687:	53                   	push   ebx
10007688:	83 ec 1c             	sub    esp,0x1c
1000768b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000768e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10007691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007694:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
1000769a:	89 c1                	mov    ecx,eax
1000769c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000769f:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
100076a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100076a5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
100076a8:	83 ec 08             	sub    esp,0x8
100076ab:	51                   	push   ecx
100076ac:	52                   	push   edx
100076ad:	50                   	push   eax
100076ae:	6a 00                	push   0x0
100076b0:	6a 00                	push   0x0
100076b2:	83 ec 20             	sub    esp,0x20
100076b5:	89 e0                	mov    eax,esp
100076b7:	89 c3                	mov    ebx,eax
100076b9:	8d 45 0c             	lea    eax,[ebp+0xc]
100076bc:	ba 08 00 00 00       	mov    edx,0x8
100076c1:	89 df                	mov    edi,ebx
100076c3:	89 c6                	mov    esi,eax
100076c5:	89 d1                	mov    ecx,edx
100076c7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100076c9:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
100076cc:	e8 fc ff ff ff       	call   100076cd <NDesktopWindow::paintHandler(NFrame::Graphics)+0x4b>	100076cd: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
100076d1:	83 c4 40             	add    esp,0x40
100076d4:	90                   	nop
100076d5:	8d 65 f4             	lea    esp,[ebp-0xc]
100076d8:	5b                   	pop    ebx
100076d9:	5e                   	pop    esi
100076da:	5f                   	pop    edi
100076db:	5d                   	pop    ebp
100076dc:	c3                   	ret    
100076dd:	90                   	nop

100076de <NButton::NButton(int, int, int, int)>:
100076de:	55                   	push   ebp
100076df:	89 e5                	mov    ebp,esp
100076e1:	83 ec 08             	sub    esp,0x8
100076e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100076e7:	83 ec 0c             	sub    esp,0xc
100076ea:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100076ed:	ff 75 14             	push   DWORD PTR [ebp+0x14]
100076f0:	ff 75 10             	push   DWORD PTR [ebp+0x10]
100076f3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100076f6:	50                   	push   eax
100076f7:	e8 fc ff ff ff       	call   100076f8 <NButton::NButton(int, int, int, int)+0x1a>	100076f8: R_386_PC32	NFrame::NFrame(int, int, int, int)
100076fc:	83 c4 20             	add    esp,0x20
100076ff:	ba 08 00 00 00       	mov    edx,0x8	10007700: R_386_32	vtable for NButton
10007704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007707:	89 10                	mov    DWORD PTR [eax],edx
10007709:	90                   	nop
1000770a:	c9                   	leave  
1000770b:	c3                   	ret    

1000770c <NButton::paintHandler(NFrame::Graphics)>:
1000770c:	55                   	push   ebp
1000770d:	89 e5                	mov    ebp,esp
1000770f:	57                   	push   edi
10007710:	56                   	push   esi
10007711:	53                   	push   ebx
10007712:	81 ec 4c 03 00 00    	sub    esp,0x34c
10007718:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000771b:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
10007721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007724:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10007727:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000772a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
1000772d:	83 ec 08             	sub    esp,0x8
10007730:	68 c0 c0 c0 00       	push   0xc0c0c0
10007735:	52                   	push   edx
10007736:	50                   	push   eax
10007737:	6a 00                	push   0x0
10007739:	6a 00                	push   0x0
1000773b:	83 ec 20             	sub    esp,0x20
1000773e:	89 e0                	mov    eax,esp
10007740:	89 c3                	mov    ebx,eax
10007742:	8d 45 0c             	lea    eax,[ebp+0xc]
10007745:	ba 08 00 00 00       	mov    edx,0x8
1000774a:	89 df                	mov    edi,ebx
1000774c:	89 c6                	mov    esi,eax
1000774e:	89 d1                	mov    ecx,edx
10007750:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007752:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
10007758:	e8 fc ff ff ff       	call   10007759 <NButton::paintHandler(NFrame::Graphics)+0x4d>	10007759: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
1000775d:	83 c4 40             	add    esp,0x40
10007760:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007763:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
10007769:	6a 00                	push   0x0
1000776b:	6a 0c                	push   0xc
1000776d:	68 de 83 00 10       	push   0x100083de	1000776e: R_386_32	.text
10007772:	8d 85 b8 fc ff ff    	lea    eax,[ebp-0x348]
10007778:	50                   	push   eax
10007779:	e8 fc ff ff ff       	call   1000777a <NButton::paintHandler(NFrame::Graphics)+0x6e>	1000777a: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
1000777e:	83 c4 10             	add    esp,0x10
10007781:	83 ec 08             	sub    esp,0x8
10007784:	81 ec 88 00 00 00    	sub    esp,0x88
1000778a:	89 e0                	mov    eax,esp
1000778c:	89 c3                	mov    ebx,eax
1000778e:	8d 85 b8 fc ff ff    	lea    eax,[ebp-0x348]
10007794:	ba 22 00 00 00       	mov    edx,0x22
10007799:	89 df                	mov    edi,ebx
1000779b:	89 c6                	mov    esi,eax
1000779d:	89 d1                	mov    ecx,edx
1000779f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100077a1:	e8 fc ff ff ff       	call   100077a2 <NButton::paintHandler(NFrame::Graphics)+0x96>	100077a2: R_386_PC32	getFontHandle(FontStyle)
100077a6:	81 c4 90 00 00 00    	add    esp,0x90
100077ac:	83 ec 08             	sub    esp,0x8
100077af:	50                   	push   eax
100077b0:	6a 00                	push   0x0
100077b2:	68 e4 83 00 10       	push   0x100083e4	100077b3: R_386_32	.text
100077b7:	6a 00                	push   0x0
100077b9:	6a 00                	push   0x0
100077bb:	83 ec 20             	sub    esp,0x20
100077be:	89 e0                	mov    eax,esp
100077c0:	89 c3                	mov    ebx,eax
100077c2:	8d 45 0c             	lea    eax,[ebp+0xc]
100077c5:	ba 08 00 00 00       	mov    edx,0x8
100077ca:	89 df                	mov    edi,ebx
100077cc:	89 c6                	mov    esi,eax
100077ce:	89 d1                	mov    ecx,edx
100077d0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100077d2:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
100077d8:	e8 fc ff ff ff       	call   100077d9 <NButton::paintHandler(NFrame::Graphics)+0xcd>	100077d9: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
100077dd:	83 c4 40             	add    esp,0x40
100077e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100077e3:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
100077e9:	6a 00                	push   0x0
100077eb:	6a 0c                	push   0xc
100077ed:	68 de 83 00 10       	push   0x100083de	100077ee: R_386_32	.text
100077f2:	8d 85 40 fd ff ff    	lea    eax,[ebp-0x2c0]
100077f8:	50                   	push   eax
100077f9:	e8 fc ff ff ff       	call   100077fa <NButton::paintHandler(NFrame::Graphics)+0xee>	100077fa: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
100077fe:	83 c4 10             	add    esp,0x10
10007801:	83 ec 08             	sub    esp,0x8
10007804:	81 ec 88 00 00 00    	sub    esp,0x88
1000780a:	89 e0                	mov    eax,esp
1000780c:	89 c3                	mov    ebx,eax
1000780e:	8d 85 40 fd ff ff    	lea    eax,[ebp-0x2c0]
10007814:	ba 22 00 00 00       	mov    edx,0x22
10007819:	89 df                	mov    edi,ebx
1000781b:	89 c6                	mov    esi,eax
1000781d:	89 d1                	mov    ecx,edx
1000781f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007821:	e8 fc ff ff ff       	call   10007822 <NButton::paintHandler(NFrame::Graphics)+0x116>	10007822: R_386_PC32	getFontHandle(FontStyle)
10007826:	81 c4 90 00 00 00    	add    esp,0x90
1000782c:	83 ec 08             	sub    esp,0x8
1000782f:	50                   	push   eax
10007830:	6a 00                	push   0x0
10007832:	68 10 84 00 10       	push   0x10008410	10007833: R_386_32	.text
10007837:	6a 19                	push   0x19
10007839:	6a 00                	push   0x0
1000783b:	83 ec 20             	sub    esp,0x20
1000783e:	89 e0                	mov    eax,esp
10007840:	89 c3                	mov    ebx,eax
10007842:	8d 45 0c             	lea    eax,[ebp+0xc]
10007845:	ba 08 00 00 00       	mov    edx,0x8
1000784a:	89 df                	mov    edi,ebx
1000784c:	89 c6                	mov    esi,eax
1000784e:	89 d1                	mov    ecx,edx
10007850:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007852:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
10007858:	e8 fc ff ff ff       	call   10007859 <NButton::paintHandler(NFrame::Graphics)+0x14d>	10007859: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
1000785d:	83 c4 40             	add    esp,0x40
10007860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007863:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
10007869:	6a 00                	push   0x0
1000786b:	6a 0c                	push   0xc
1000786d:	68 de 83 00 10       	push   0x100083de	1000786e: R_386_32	.text
10007872:	8d 85 c8 fd ff ff    	lea    eax,[ebp-0x238]
10007878:	50                   	push   eax
10007879:	e8 fc ff ff ff       	call   1000787a <NButton::paintHandler(NFrame::Graphics)+0x16e>	1000787a: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
1000787e:	83 c4 10             	add    esp,0x10
10007881:	83 ec 08             	sub    esp,0x8
10007884:	81 ec 88 00 00 00    	sub    esp,0x88
1000788a:	89 e0                	mov    eax,esp
1000788c:	89 c3                	mov    ebx,eax
1000788e:	8d 85 c8 fd ff ff    	lea    eax,[ebp-0x238]
10007894:	ba 22 00 00 00       	mov    edx,0x22
10007899:	89 df                	mov    edi,ebx
1000789b:	89 c6                	mov    esi,eax
1000789d:	89 d1                	mov    ecx,edx
1000789f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100078a1:	e8 fc ff ff ff       	call   100078a2 <NButton::paintHandler(NFrame::Graphics)+0x196>	100078a2: R_386_PC32	getFontHandle(FontStyle)
100078a6:	81 c4 90 00 00 00    	add    esp,0x90
100078ac:	83 ec 08             	sub    esp,0x8
100078af:	50                   	push   eax
100078b0:	6a 00                	push   0x0
100078b2:	68 f0 84 00 10       	push   0x100084f0	100078b3: R_386_32	.text
100078b7:	6a 32                	push   0x32
100078b9:	6a 00                	push   0x0
100078bb:	83 ec 20             	sub    esp,0x20
100078be:	89 e0                	mov    eax,esp
100078c0:	89 c3                	mov    ebx,eax
100078c2:	8d 45 0c             	lea    eax,[ebp+0xc]
100078c5:	ba 08 00 00 00       	mov    edx,0x8
100078ca:	89 df                	mov    edi,ebx
100078cc:	89 c6                	mov    esi,eax
100078ce:	89 d1                	mov    ecx,edx
100078d0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100078d2:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
100078d8:	e8 fc ff ff ff       	call   100078d9 <NButton::paintHandler(NFrame::Graphics)+0x1cd>	100078d9: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
100078dd:	83 c4 40             	add    esp,0x40
100078e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100078e3:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
100078e9:	6a 00                	push   0x0
100078eb:	6a 0c                	push   0xc
100078ed:	68 de 83 00 10       	push   0x100083de	100078ee: R_386_32	.text
100078f2:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
100078f8:	50                   	push   eax
100078f9:	e8 fc ff ff ff       	call   100078fa <NButton::paintHandler(NFrame::Graphics)+0x1ee>	100078fa: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
100078fe:	83 c4 10             	add    esp,0x10
10007901:	83 ec 08             	sub    esp,0x8
10007904:	81 ec 88 00 00 00    	sub    esp,0x88
1000790a:	89 e0                	mov    eax,esp
1000790c:	89 c3                	mov    ebx,eax
1000790e:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10007914:	ba 22 00 00 00       	mov    edx,0x22
10007919:	89 df                	mov    edi,ebx
1000791b:	89 c6                	mov    esi,eax
1000791d:	89 d1                	mov    ecx,edx
1000791f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007921:	e8 fc ff ff ff       	call   10007922 <NButton::paintHandler(NFrame::Graphics)+0x216>	10007922: R_386_PC32	getFontHandle(FontStyle)
10007926:	81 c4 90 00 00 00    	add    esp,0x90
1000792c:	83 ec 08             	sub    esp,0x8
1000792f:	50                   	push   eax
10007930:	6a 00                	push   0x0
10007932:	68 2c 85 00 10       	push   0x1000852c	10007933: R_386_32	.text
10007937:	6a 4b                	push   0x4b
10007939:	6a 00                	push   0x0
1000793b:	83 ec 20             	sub    esp,0x20
1000793e:	89 e0                	mov    eax,esp
10007940:	89 c3                	mov    ebx,eax
10007942:	8d 45 0c             	lea    eax,[ebp+0xc]
10007945:	ba 08 00 00 00       	mov    edx,0x8
1000794a:	89 df                	mov    edi,ebx
1000794c:	89 c6                	mov    esi,eax
1000794e:	89 d1                	mov    ecx,edx
10007950:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007952:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
10007958:	e8 fc ff ff ff       	call   10007959 <NButton::paintHandler(NFrame::Graphics)+0x24d>	10007959: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
1000795d:	83 c4 40             	add    esp,0x40
10007960:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007963:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
10007969:	6a 00                	push   0x0
1000796b:	6a 10                	push   0x10
1000796d:	68 de 83 00 10       	push   0x100083de	1000796e: R_386_32	.text
10007972:	8d 85 d8 fe ff ff    	lea    eax,[ebp-0x128]
10007978:	50                   	push   eax
10007979:	e8 fc ff ff ff       	call   1000797a <NButton::paintHandler(NFrame::Graphics)+0x26e>	1000797a: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
1000797e:	83 c4 10             	add    esp,0x10
10007981:	83 ec 08             	sub    esp,0x8
10007984:	81 ec 88 00 00 00    	sub    esp,0x88
1000798a:	89 e0                	mov    eax,esp
1000798c:	89 c3                	mov    ebx,eax
1000798e:	8d 85 d8 fe ff ff    	lea    eax,[ebp-0x128]
10007994:	ba 22 00 00 00       	mov    edx,0x22
10007999:	89 df                	mov    edi,ebx
1000799b:	89 c6                	mov    esi,eax
1000799d:	89 d1                	mov    ecx,edx
1000799f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100079a1:	e8 fc ff ff ff       	call   100079a2 <NButton::paintHandler(NFrame::Graphics)+0x296>	100079a2: R_386_PC32	getFontHandle(FontStyle)
100079a6:	81 c4 90 00 00 00    	add    esp,0x90
100079ac:	83 ec 08             	sub    esp,0x8
100079af:	50                   	push   eax
100079b0:	6a 00                	push   0x0
100079b2:	68 e4 83 00 10       	push   0x100083e4	100079b3: R_386_32	.text
100079b7:	6a 64                	push   0x64
100079b9:	6a 00                	push   0x0
100079bb:	83 ec 20             	sub    esp,0x20
100079be:	89 e0                	mov    eax,esp
100079c0:	89 c3                	mov    ebx,eax
100079c2:	8d 45 0c             	lea    eax,[ebp+0xc]
100079c5:	ba 08 00 00 00       	mov    edx,0x8
100079ca:	89 df                	mov    edi,ebx
100079cc:	89 c6                	mov    esi,eax
100079ce:	89 d1                	mov    ecx,edx
100079d0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100079d2:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
100079d8:	e8 fc ff ff ff       	call   100079d9 <NButton::paintHandler(NFrame::Graphics)+0x2cd>	100079d9: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
100079dd:	83 c4 40             	add    esp,0x40
100079e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100079e3:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
100079e9:	6a 00                	push   0x0
100079eb:	6a 18                	push   0x18
100079ed:	68 de 83 00 10       	push   0x100083de	100079ee: R_386_32	.text
100079f2:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
100079f8:	50                   	push   eax
100079f9:	e8 fc ff ff ff       	call   100079fa <NButton::paintHandler(NFrame::Graphics)+0x2ee>	100079fa: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
100079fe:	83 c4 10             	add    esp,0x10
10007a01:	83 ec 08             	sub    esp,0x8
10007a04:	81 ec 88 00 00 00    	sub    esp,0x88
10007a0a:	89 e0                	mov    eax,esp
10007a0c:	89 c3                	mov    ebx,eax
10007a0e:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
10007a14:	ba 22 00 00 00       	mov    edx,0x22
10007a19:	89 df                	mov    edi,ebx
10007a1b:	89 c6                	mov    esi,eax
10007a1d:	89 d1                	mov    ecx,edx
10007a1f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007a21:	e8 fc ff ff ff       	call   10007a22 <NButton::paintHandler(NFrame::Graphics)+0x316>	10007a22: R_386_PC32	getFontHandle(FontStyle)
10007a26:	81 c4 90 00 00 00    	add    esp,0x90
10007a2c:	83 ec 08             	sub    esp,0x8
10007a2f:	50                   	push   eax
10007a30:	6a 00                	push   0x0
10007a32:	68 e4 83 00 10       	push   0x100083e4	10007a33: R_386_32	.text
10007a37:	68 82 00 00 00       	push   0x82
10007a3c:	6a 00                	push   0x0
10007a3e:	83 ec 20             	sub    esp,0x20
10007a41:	89 e0                	mov    eax,esp
10007a43:	89 c3                	mov    ebx,eax
10007a45:	8d 45 0c             	lea    eax,[ebp+0xc]
10007a48:	ba 08 00 00 00       	mov    edx,0x8
10007a4d:	89 df                	mov    edi,ebx
10007a4f:	89 c6                	mov    esi,eax
10007a51:	89 d1                	mov    ecx,edx
10007a53:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007a55:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
10007a5b:	e8 fc ff ff ff       	call   10007a5c <NButton::paintHandler(NFrame::Graphics)+0x350>	10007a5c: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
10007a60:	83 c4 40             	add    esp,0x40
10007a63:	90                   	nop
10007a64:	8d 65 f4             	lea    esp,[ebp-0xc]
10007a67:	5b                   	pop    ebx
10007a68:	5e                   	pop    esi
10007a69:	5f                   	pop    edi
10007a6a:	5d                   	pop    ebp
10007a6b:	c3                   	ret    

10007a6c <LinkedList2<NFrame*>::LinkedList2()>:
10007a6c:	55                   	push   ebp
10007a6d:	89 e5                	mov    ebp,esp
10007a6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10007a78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a7b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10007a82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a85:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10007a8c:	90                   	nop
10007a8d:	5d                   	pop    ebp
10007a8e:	c3                   	ret    
10007a8f:	90                   	nop

10007a90 <LinkedList2<NFrame*>::prependNode(NFrame*)>:
10007a90:	55                   	push   ebp
10007a91:	89 e5                	mov    ebp,esp
10007a93:	83 ec 18             	sub    esp,0x18
10007a96:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
10007a9d:	83 ec 0c             	sub    esp,0xc
10007aa0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10007aa3:	e8 fc ff ff ff       	call   10007aa4 <LinkedList2<NFrame*>::prependNode(NFrame*)+0x14>	10007aa4: R_386_PC32	malloc
10007aa8:	83 c4 10             	add    esp,0x10
10007aab:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10007aae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10007ab1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10007ab4:	89 10                	mov    DWORD PTR [eax],edx
10007ab6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ab9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
10007abc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10007abf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10007ac2:	83 ec 0c             	sub    esp,0xc
10007ac5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007ac8:	e8 fc ff ff ff       	call   10007ac9 <LinkedList2<NFrame*>::prependNode(NFrame*)+0x39>	10007ac9: R_386_PC32	LinkedList2<NFrame*>::isEmpty()
10007acd:	83 c4 10             	add    esp,0x10
10007ad0:	84 c0                	test   al,al
10007ad2:	74 09                	je     10007add <LinkedList2<NFrame*>::prependNode(NFrame*)+0x4d>
10007ad4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ad7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10007ada:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10007add:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ae0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10007ae3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10007ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ae9:	8b 00                	mov    eax,DWORD PTR [eax]
10007aeb:	8d 50 01             	lea    edx,[eax+0x1]
10007aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007af1:	89 10                	mov    DWORD PTR [eax],edx
10007af3:	90                   	nop
10007af4:	c9                   	leave  
10007af5:	c3                   	ret    

10007af6 <LinkedList2<NFrame*>::isEmpty()>:
10007af6:	55                   	push   ebp
10007af7:	89 e5                	mov    ebp,esp
10007af9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007afc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10007aff:	85 c0                	test   eax,eax
10007b01:	0f 94 c0             	sete   al
10007b04:	5d                   	pop    ebp
10007b05:	c3                   	ret    

10007b06 <Region::Region(int, int, int, int)>:
10007b06:	55                   	push   ebp
10007b07:	89 e5                	mov    ebp,esp
10007b09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b0c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10007b0f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10007b12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b15:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10007b18:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10007b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b1e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10007b24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b27:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
10007b2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b31:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10007b34:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
10007b37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b3a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10007b3d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
10007b40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b43:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
10007b47:	90                   	nop
10007b48:	5d                   	pop    ebp
10007b49:	c3                   	ret    

10007b4a <LinkedList2<Font*>::LinkedList2()>:
10007b4a:	55                   	push   ebp
10007b4b:	89 e5                	mov    ebp,esp
10007b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10007b56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10007b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b63:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10007b6a:	90                   	nop
10007b6b:	5d                   	pop    ebp
10007b6c:	c3                   	ret    
10007b6d:	90                   	nop

10007b6e <LinkedList2<Font*>::length()>:
10007b6e:	55                   	push   ebp
10007b6f:	89 e5                	mov    ebp,esp
10007b71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b74:	8b 00                	mov    eax,DWORD PTR [eax]
10007b76:	5d                   	pop    ebp
10007b77:	c3                   	ret    

10007b78 <LinkedList2<Font*>::appendNode(Font*)>:
10007b78:	55                   	push   ebp
10007b79:	89 e5                	mov    ebp,esp
10007b7b:	83 ec 18             	sub    esp,0x18
10007b7e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10007b85:	83 ec 0c             	sub    esp,0xc
10007b88:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007b8b:	e8 fc ff ff ff       	call   10007b8c <LinkedList2<Font*>::appendNode(Font*)+0x14>	10007b8c: R_386_PC32	LinkedList2<Font*>::isEmpty()
10007b90:	83 c4 10             	add    esp,0x10
10007b93:	84 c0                	test   al,al
10007b95:	74 23                	je     10007bba <LinkedList2<Font*>::appendNode(Font*)+0x42>
10007b97:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
10007b9e:	83 ec 0c             	sub    esp,0xc
10007ba1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10007ba4:	e8 fc ff ff ff       	call   10007ba5 <LinkedList2<Font*>::appendNode(Font*)+0x2d>	10007ba5: R_386_PC32	malloc
10007ba9:	83 c4 10             	add    esp,0x10
10007bac:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10007baf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007bb2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10007bb5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10007bb8:	eb 2f                	jmp    10007be9 <LinkedList2<Font*>::appendNode(Font*)+0x71>
10007bba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007bbd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
10007bc0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10007bc3:	c7 45 ec 08 00 00 00 	mov    DWORD PTR [ebp-0x14],0x8
10007bca:	83 ec 0c             	sub    esp,0xc
10007bcd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10007bd0:	e8 fc ff ff ff       	call   10007bd1 <LinkedList2<Font*>::appendNode(Font*)+0x59>	10007bd1: R_386_PC32	malloc
10007bd5:	83 c4 10             	add    esp,0x10
10007bd8:	89 c2                	mov    edx,eax
10007bda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10007bdd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10007be0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10007be3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10007be6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10007be9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10007bec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10007bef:	89 10                	mov    DWORD PTR [eax],edx
10007bf1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10007bf4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10007bfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007bfe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10007c01:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10007c04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007c07:	8b 00                	mov    eax,DWORD PTR [eax]
10007c09:	8d 50 01             	lea    edx,[eax+0x1]
10007c0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007c0f:	89 10                	mov    DWORD PTR [eax],edx
10007c11:	90                   	nop
10007c12:	c9                   	leave  
10007c13:	c3                   	ret    

10007c14 <LinkedList2<Font*>::isEmpty()>:
10007c14:	55                   	push   ebp
10007c15:	89 e5                	mov    ebp,esp
10007c17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007c1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10007c1d:	85 c0                	test   eax,eax
10007c1f:	0f 94 c0             	sete   al
10007c22:	5d                   	pop    ebp
10007c23:	c3                   	ret    

10007c24 <NFrame::invalidateRectangularBoundingBox()>:
10007c24:	55                   	push   ebp
10007c25:	89 e5                	mov    ebp,esp
10007c27:	57                   	push   edi
10007c28:	56                   	push   esi
10007c29:	53                   	push   ebx
10007c2a:	83 ec 2c             	sub    esp,0x2c
10007c2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007c30:	8b 78 1c             	mov    edi,DWORD PTR [eax+0x1c]
10007c33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007c36:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
10007c39:	83 ec 0c             	sub    esp,0xc
10007c3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007c3f:	e8 fc ff ff ff       	call   10007c40 <NFrame::invalidateRectangularBoundingBox()+0x1c>	10007c40: R_386_PC32	NFrame::getAbsY()
10007c44:	83 c4 10             	add    esp,0x10
10007c47:	89 c3                	mov    ebx,eax
10007c49:	83 ec 0c             	sub    esp,0xc
10007c4c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007c4f:	e8 fc ff ff ff       	call   10007c50 <NFrame::invalidateRectangularBoundingBox()+0x2c>	10007c50: R_386_PC32	NFrame::getAbsX()
10007c54:	83 c4 10             	add    esp,0x10
10007c57:	89 c2                	mov    edx,eax
10007c59:	8d 45 cc             	lea    eax,[ebp-0x34]
10007c5c:	83 ec 0c             	sub    esp,0xc
10007c5f:	57                   	push   edi
10007c60:	56                   	push   esi
10007c61:	53                   	push   ebx
10007c62:	52                   	push   edx
10007c63:	50                   	push   eax
10007c64:	e8 fc ff ff ff       	call   10007c65 <NFrame::invalidateRectangularBoundingBox()+0x41>	10007c65: R_386_PC32	createRectangleRegion(int, int, int, int)
10007c69:	83 c4 1c             	add    esp,0x1c
10007c6c:	83 ec 1c             	sub    esp,0x1c
10007c6f:	89 e0                	mov    eax,esp
10007c71:	89 c3                	mov    ebx,eax
10007c73:	8d 45 cc             	lea    eax,[ebp-0x34]
10007c76:	ba 07 00 00 00       	mov    edx,0x7
10007c7b:	89 df                	mov    edi,ebx
10007c7d:	89 c6                	mov    esi,eax
10007c7f:	89 d1                	mov    ecx,edx
10007c81:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007c83:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007c86:	e8 fc ff ff ff       	call   10007c87 <NFrame::invalidateRectangularBoundingBox()+0x63>	10007c87: R_386_PC32	NFrame::markRegionAsDirty(Region)
10007c8b:	83 c4 20             	add    esp,0x20
10007c8e:	90                   	nop
10007c8f:	8d 65 f4             	lea    esp,[ebp-0xc]
10007c92:	5b                   	pop    ebx
10007c93:	5e                   	pop    esi
10007c94:	5f                   	pop    edi
10007c95:	5d                   	pop    ebp
10007c96:	c3                   	ret    
10007c97:	90                   	nop

10007c98 <NFrame::raiseChild(NFrame*)>:
10007c98:	55                   	push   ebp
10007c99:	89 e5                	mov    ebp,esp
10007c9b:	83 ec 08             	sub    esp,0x8
10007c9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ca1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
10007ca4:	85 c0                	test   eax,eax
10007ca6:	74 0c                	je     10007cb4 <NFrame::raiseChild(NFrame*)+0x1c>
10007ca8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007cab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
10007cae:	8b 00                	mov    eax,DWORD PTR [eax]
10007cb0:	85 c0                	test   eax,eax
10007cb2:	75 04                	jne    10007cb8 <NFrame::raiseChild(NFrame*)+0x20>
10007cb4:	b0 00                	mov    al,0x0
10007cb6:	eb 39                	jmp    10007cf1 <NFrame::raiseChild(NFrame*)+0x59>
10007cb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007cbb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
10007cbe:	8b 00                	mov    eax,DWORD PTR [eax]
10007cc0:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10007cc3:	75 04                	jne    10007cc9 <NFrame::raiseChild(NFrame*)+0x31>
10007cc5:	b0 00                	mov    al,0x0
10007cc7:	eb 28                	jmp    10007cf1 <NFrame::raiseChild(NFrame*)+0x59>
10007cc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ccc:	83 c0 04             	add    eax,0x4
10007ccf:	83 ec 08             	sub    esp,0x8
10007cd2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10007cd5:	50                   	push   eax
10007cd6:	e8 fc ff ff ff       	call   10007cd7 <NFrame::raiseChild(NFrame*)+0x3f>	10007cd7: R_386_PC32	LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)
10007cdb:	83 c4 10             	add    esp,0x10
10007cde:	83 ec 08             	sub    esp,0x8
10007ce1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10007ce4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007ce7:	e8 fc ff ff ff       	call   10007ce8 <NFrame::raiseChild(NFrame*)+0x50>	10007ce8: R_386_PC32	NFrame::addChild(NFrame*)
10007cec:	83 c4 10             	add    esp,0x10
10007cef:	b0 01                	mov    al,0x1
10007cf1:	c9                   	leave  
10007cf2:	c3                   	ret    
10007cf3:	90                   	nop

10007cf4 <NFrame::getPixelOwner(Video*, int, int, bool)>:
10007cf4:	55                   	push   ebp
10007cf5:	89 e5                	mov    ebp,esp
10007cf7:	57                   	push   edi
10007cf8:	56                   	push   esi
10007cf9:	53                   	push   ebx
10007cfa:	83 ec 4c             	sub    esp,0x4c
10007cfd:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10007d00:	88 45 b4             	mov    BYTE PTR [ebp-0x4c],al
10007d03:	8d 45 c0             	lea    eax,[ebp-0x40]
10007d06:	83 ec 08             	sub    esp,0x8
10007d09:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007d0c:	50                   	push   eax
10007d0d:	e8 fc ff ff ff       	call   10007d0e <NFrame::getPixelOwner(Video*, int, int, bool)+0x1a>	10007d0e: R_386_PC32	NFrame::getDrawRegion()
10007d12:	83 c4 0c             	add    esp,0xc
10007d15:	83 ec 0c             	sub    esp,0xc
10007d18:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007d1b:	e8 fc ff ff ff       	call   10007d1c <NFrame::getPixelOwner(Video*, int, int, bool)+0x28>	10007d1c: R_386_PC32	NFrame::getAbsX()
10007d20:	83 c4 10             	add    esp,0x10
10007d23:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10007d26:	83 ec 0c             	sub    esp,0xc
10007d29:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007d2c:	e8 fc ff ff ff       	call   10007d2d <NFrame::getPixelOwner(Video*, int, int, bool)+0x39>	10007d2d: R_386_PC32	NFrame::getAbsY()
10007d31:	83 c4 10             	add    esp,0x10
10007d34:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10007d37:	83 ec 0c             	sub    esp,0xc
10007d3a:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10007d3d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10007d40:	83 ec 1c             	sub    esp,0x1c
10007d43:	89 e0                	mov    eax,esp
10007d45:	89 c3                	mov    ebx,eax
10007d47:	8d 45 c0             	lea    eax,[ebp-0x40]
10007d4a:	ba 07 00 00 00       	mov    edx,0x7
10007d4f:	89 df                	mov    edi,ebx
10007d51:	89 c6                	mov    esi,eax
10007d53:	89 d1                	mov    ecx,edx
10007d55:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007d57:	e8 fc ff ff ff       	call   10007d58 <NFrame::getPixelOwner(Video*, int, int, bool)+0x64>	10007d58: R_386_PC32	isPointInRegion(Region, int, int)
10007d5c:	83 c4 30             	add    esp,0x30
10007d5f:	84 c0                	test   al,al
10007d61:	74 17                	je     10007d7a <NFrame::getPixelOwner(Video*, int, int, bool)+0x86>
10007d63:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10007d66:	83 ec 0c             	sub    esp,0xc
10007d69:	50                   	push   eax
10007d6a:	e8 fc ff ff ff       	call   10007d6b <NFrame::getPixelOwner(Video*, int, int, bool)+0x77>	10007d6b: R_386_PC32	free
10007d6f:	83 c4 10             	add    esp,0x10
10007d72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007d75:	e9 83 00 00 00       	jmp    10007dfd <NFrame::getPixelOwner(Video*, int, int, bool)+0x109>
10007d7a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10007d7d:	83 ec 0c             	sub    esp,0xc
10007d80:	50                   	push   eax
10007d81:	e8 fc ff ff ff       	call   10007d82 <NFrame::getPixelOwner(Video*, int, int, bool)+0x8e>	10007d82: R_386_PC32	free
10007d86:	83 c4 10             	add    esp,0x10
10007d89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007d8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
10007d8f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10007d92:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10007d96:	74 60                	je     10007df8 <NFrame::getPixelOwner(Video*, int, int, bool)+0x104>
10007d98:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10007d9b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10007d9e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10007da1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10007da4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10007da7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10007daa:	8b 00                	mov    eax,DWORD PTR [eax]
10007dac:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10007daf:	84 c0                	test   al,al
10007db1:	75 42                	jne    10007df5 <NFrame::getPixelOwner(Video*, int, int, bool)+0x101>
10007db3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10007db6:	8b 00                	mov    eax,DWORD PTR [eax]
10007db8:	0f b6 55 b4          	movzx  edx,BYTE PTR [ebp-0x4c]
10007dbc:	83 ec 0c             	sub    esp,0xc
10007dbf:	52                   	push   edx
10007dc0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10007dc3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10007dc6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10007dc9:	50                   	push   eax
10007dca:	e8 fc ff ff ff       	call   10007dcb <NFrame::getPixelOwner(Video*, int, int, bool)+0xd7>	10007dcb: R_386_PC32	NFrame::getPixelOwner(Video*, int, int, bool)
10007dcf:	83 c4 20             	add    esp,0x20
10007dd2:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10007dd5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10007dd9:	74 b7                	je     10007d92 <NFrame::getPixelOwner(Video*, int, int, bool)+0x9e>
10007ddb:	80 7d b4 00          	cmp    BYTE PTR [ebp-0x4c],0x0
10007ddf:	74 0f                	je     10007df0 <NFrame::getPixelOwner(Video*, int, int, bool)+0xfc>
10007de1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007de4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10007de7:	85 c0                	test   eax,eax
10007de9:	74 05                	je     10007df0 <NFrame::getPixelOwner(Video*, int, int, bool)+0xfc>
10007deb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007dee:	eb 0d                	jmp    10007dfd <NFrame::getPixelOwner(Video*, int, int, bool)+0x109>
10007df0:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10007df3:	eb 08                	jmp    10007dfd <NFrame::getPixelOwner(Video*, int, int, bool)+0x109>
10007df5:	90                   	nop
10007df6:	eb 9a                	jmp    10007d92 <NFrame::getPixelOwner(Video*, int, int, bool)+0x9e>
10007df8:	b8 00 00 00 00       	mov    eax,0x0
10007dfd:	8d 65 f4             	lea    esp,[ebp-0xc]
10007e00:	5b                   	pop    ebx
10007e01:	5e                   	pop    esi
10007e02:	5f                   	pop    edi
10007e03:	5d                   	pop    ebp
10007e04:	c3                   	ret    
10007e05:	90                   	nop

10007e06 <NFrame::unhide()>:
10007e06:	55                   	push   ebp
10007e07:	89 e5                	mov    ebp,esp
10007e09:	83 ec 08             	sub    esp,0x8
10007e0c:	83 ec 08             	sub    esp,0x8
10007e0f:	6a 00                	push   0x0
10007e11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007e14:	e8 fc ff ff ff       	call   10007e15 <NFrame::unhide()+0xf>	10007e15: R_386_PC32	NFrame::hide(bool)
10007e19:	83 c4 10             	add    esp,0x10
10007e1c:	90                   	nop
10007e1d:	c9                   	leave  
10007e1e:	c3                   	ret    
10007e1f:	90                   	nop

10007e20 <NFrame::hide(bool)>:
10007e20:	55                   	push   ebp
10007e21:	89 e5                	mov    ebp,esp
10007e23:	83 ec 18             	sub    esp,0x18
10007e26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10007e29:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10007e2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007e2f:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10007e32:	38 45 f4             	cmp    BYTE PTR [ebp-0xc],al
10007e35:	74 31                	je     10007e68 <NFrame::hide(bool)+0x48>
10007e37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007e3a:	8a 55 f4             	mov    dl,BYTE PTR [ebp-0xc]
10007e3d:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
10007e40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007e43:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10007e46:	84 c0                	test   al,al
10007e48:	74 10                	je     10007e5a <NFrame::hide(bool)+0x3a>
10007e4a:	83 ec 0c             	sub    esp,0xc
10007e4d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007e50:	e8 fc ff ff ff       	call   10007e51 <NFrame::hide(bool)+0x31>	10007e51: R_386_PC32	NFrame::invalidate()
10007e55:	83 c4 10             	add    esp,0x10
10007e58:	eb 0e                	jmp    10007e68 <NFrame::hide(bool)+0x48>
10007e5a:	83 ec 0c             	sub    esp,0xc
10007e5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007e60:	e8 fc ff ff ff       	call   10007e61 <NFrame::hide(bool)+0x41>	10007e61: R_386_PC32	NFrame::invalidateRectangularBoundingBox()
10007e65:	83 c4 10             	add    esp,0x10
10007e68:	90                   	nop
10007e69:	c9                   	leave  
10007e6a:	c3                   	ret    
10007e6b:	90                   	nop

10007e6c <NFrame::getWidth()>:
10007e6c:	55                   	push   ebp
10007e6d:	89 e5                	mov    ebp,esp
10007e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007e72:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10007e75:	5d                   	pop    ebp
10007e76:	c3                   	ret    
10007e77:	90                   	nop

10007e78 <NFrame::getHeight()>:
10007e78:	55                   	push   ebp
10007e79:	89 e5                	mov    ebp,esp
10007e7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007e7e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
10007e81:	5d                   	pop    ebp
10007e82:	c3                   	ret    
10007e83:	90                   	nop

10007e84 <NFrame::startDragState()>:
10007e84:	55                   	push   ebp
10007e85:	89 e5                	mov    ebp,esp
10007e87:	57                   	push   edi
10007e88:	56                   	push   esi
10007e89:	53                   	push   ebx
10007e8a:	83 ec 2c             	sub    esp,0x2c
10007e8d:	83 ec 08             	sub    esp,0x8
10007e90:	6a 01                	push   0x1
10007e92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007e95:	e8 fc ff ff ff       	call   10007e96 <NFrame::startDragState()+0x12>	10007e96: R_386_PC32	NFrame::hide(bool)
10007e9a:	83 c4 10             	add    esp,0x10
10007e9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ea0:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
10007ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ea6:	8b 58 18             	mov    ebx,DWORD PTR [eax+0x18]
10007ea9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007eac:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
10007eaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007eb2:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
10007eb5:	8d 45 cc             	lea    eax,[ebp-0x34]
10007eb8:	83 ec 08             	sub    esp,0x8
10007ebb:	6a 02                	push   0x2
10007ebd:	56                   	push   esi
10007ebe:	53                   	push   ebx
10007ebf:	51                   	push   ecx
10007ec0:	52                   	push   edx
10007ec1:	50                   	push   eax
10007ec2:	e8 fc ff ff ff       	call   10007ec3 <NFrame::startDragState()+0x3f>	10007ec3: R_386_PC32	createAntRegion(int, int, int, int, int)
10007ec7:	83 c4 1c             	add    esp,0x1c
10007eca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ecd:	8d 58 30             	lea    ebx,[eax+0x30]
10007ed0:	8d 45 cc             	lea    eax,[ebp-0x34]
10007ed3:	ba 19 00 00 00       	mov    edx,0x19
10007ed8:	89 df                	mov    edi,ebx
10007eda:	89 c6                	mov    esi,eax
10007edc:	89 d1                	mov    ecx,edx
10007ede:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10007ee0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ee3:	c6 40 69 01          	mov    BYTE PTR [eax+0x69],0x1
10007ee7:	90                   	nop
10007ee8:	8d 65 f4             	lea    esp,[ebp-0xc]
10007eeb:	5b                   	pop    ebx
10007eec:	5e                   	pop    esi
10007eed:	5f                   	pop    edi
10007eee:	5d                   	pop    ebp
10007eef:	c3                   	ret    

10007ef0 <NFrame::endDragState()>:
10007ef0:	55                   	push   ebp
10007ef1:	89 e5                	mov    ebp,esp
10007ef3:	83 ec 08             	sub    esp,0x8
10007ef6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ef9:	c6 40 69 00          	mov    BYTE PTR [eax+0x69],0x0
10007efd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f00:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
10007f03:	83 ec 0c             	sub    esp,0xc
10007f06:	50                   	push   eax
10007f07:	e8 fc ff ff ff       	call   10007f08 <NFrame::endDragState()+0x18>	10007f08: R_386_PC32	free
10007f0c:	83 c4 10             	add    esp,0x10
10007f0f:	83 ec 0c             	sub    esp,0xc
10007f12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007f15:	e8 fc ff ff ff       	call   10007f16 <NFrame::endDragState()+0x26>	10007f16: R_386_PC32	NFrame::unhide()
10007f1a:	83 c4 10             	add    esp,0x10
10007f1d:	90                   	nop
10007f1e:	c9                   	leave  
10007f1f:	c3                   	ret    

10007f20 <NFrame::setSize(int, int)>:
10007f20:	55                   	push   ebp
10007f21:	89 e5                	mov    ebp,esp
10007f23:	83 ec 08             	sub    esp,0x8
10007f26:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
10007f2a:	7f 07                	jg     10007f33 <NFrame::setSize(int, int)+0x13>
10007f2c:	c7 45 0c 01 00 00 00 	mov    DWORD PTR [ebp+0xc],0x1
10007f33:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10007f37:	7f 07                	jg     10007f40 <NFrame::setSize(int, int)+0x20>
10007f39:	c7 45 10 01 00 00 00 	mov    DWORD PTR [ebp+0x10],0x1
10007f40:	83 ec 0c             	sub    esp,0xc
10007f43:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007f46:	e8 fc ff ff ff       	call   10007f47 <NFrame::setSize(int, int)+0x27>	10007f47: R_386_PC32	NFrame::hasTitleBar()
10007f4b:	83 c4 10             	add    esp,0x10
10007f4e:	84 c0                	test   al,al
10007f50:	74 1a                	je     10007f6c <NFrame::setSize(int, int)+0x4c>
10007f52:	83 7d 0c 4a          	cmp    DWORD PTR [ebp+0xc],0x4a
10007f56:	7f 07                	jg     10007f5f <NFrame::setSize(int, int)+0x3f>
10007f58:	c7 45 0c 4b 00 00 00 	mov    DWORD PTR [ebp+0xc],0x4b
10007f5f:	83 7d 10 27          	cmp    DWORD PTR [ebp+0x10],0x27
10007f63:	7f 07                	jg     10007f6c <NFrame::setSize(int, int)+0x4c>
10007f65:	c7 45 10 28 00 00 00 	mov    DWORD PTR [ebp+0x10],0x28
10007f6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f6f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10007f72:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10007f75:	75 0b                	jne    10007f82 <NFrame::setSize(int, int)+0x62>
10007f77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f7a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
10007f7d:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
10007f80:	74 4b                	je     10007fcd <NFrame::setSize(int, int)+0xad>
10007f82:	83 ec 0c             	sub    esp,0xc
10007f85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007f88:	e8 fc ff ff ff       	call   10007f89 <NFrame::setSize(int, int)+0x69>	10007f89: R_386_PC32	NFrame::tryInvalidate()
10007f8d:	83 c4 10             	add    esp,0x10
10007f90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f93:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10007f96:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
10007f99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f9c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10007f9f:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
10007fa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007fa5:	8b 00                	mov    eax,DWORD PTR [eax]
10007fa7:	83 c0 08             	add    eax,0x8
10007faa:	8b 00                	mov    eax,DWORD PTR [eax]
10007fac:	83 ec 0c             	sub    esp,0xc
10007faf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007fb2:	ff d0                	call   eax
10007fb4:	83 c4 10             	add    esp,0x10
10007fb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007fba:	8b 00                	mov    eax,DWORD PTR [eax]
10007fbc:	8b 00                	mov    eax,DWORD PTR [eax]
10007fbe:	83 ec 0c             	sub    esp,0xc
10007fc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007fc4:	ff d0                	call   eax
10007fc6:	83 c4 10             	add    esp,0x10
10007fc9:	b0 01                	mov    al,0x1
10007fcb:	eb 02                	jmp    10007fcf <NFrame::setSize(int, int)+0xaf>
10007fcd:	b0 00                	mov    al,0x0
10007fcf:	c9                   	leave  
10007fd0:	c3                   	ret    
10007fd1:	90                   	nop

10007fd2 <NFrame::hasTitleBar()>:
10007fd2:	55                   	push   ebp
10007fd3:	89 e5                	mov    ebp,esp
10007fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007fd8:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007fdb:	83 e0 08             	and    eax,0x8
10007fde:	85 c0                	test   eax,eax
10007fe0:	75 11                	jne    10007ff3 <NFrame::hasTitleBar()+0x21>
10007fe2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007fe5:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007fe8:	83 e0 01             	and    eax,0x1
10007feb:	85 c0                	test   eax,eax
10007fed:	75 04                	jne    10007ff3 <NFrame::hasTitleBar()+0x21>
10007fef:	b0 01                	mov    al,0x1
10007ff1:	eb 02                	jmp    10007ff5 <NFrame::hasTitleBar()+0x23>
10007ff3:	b0 00                	mov    al,0x0
10007ff5:	5d                   	pop    ebp
10007ff6:	c3                   	ret    
10007ff7:	90                   	nop

10007ff8 <NFrame::getX()>:
10007ff8:	55                   	push   ebp
10007ff9:	89 e5                	mov    ebp,esp
10007ffb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ffe:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
10008001:	5d                   	pop    ebp
10008002:	c3                   	ret    
10008003:	90                   	nop

10008004 <NFrame::getY()>:
10008004:	55                   	push   ebp
10008005:	89 e5                	mov    ebp,esp
10008007:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000800a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
1000800d:	5d                   	pop    ebp
1000800e:	c3                   	ret    
1000800f:	90                   	nop

10008010 <NFrame::setPosition(int, int)>:
10008010:	55                   	push   ebp
10008011:	89 e5                	mov    ebp,esp
10008013:	83 ec 08             	sub    esp,0x8
10008016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008019:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
1000801c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
1000801f:	75 0b                	jne    1000802c <NFrame::setPosition(int, int)+0x1c>
10008021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008024:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
10008027:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
1000802a:	74 7b                	je     100080a7 <NFrame::setPosition(int, int)+0x97>
1000802c:	83 ec 0c             	sub    esp,0xc
1000802f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008032:	e8 fc ff ff ff       	call   10008033 <NFrame::setPosition(int, int)+0x23>	10008033: R_386_PC32	NFrame::tryInvalidate()
10008037:	83 c4 10             	add    esp,0x10
1000803a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000803d:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10008040:	84 c0                	test   al,al
10008042:	74 36                	je     1000807a <NFrame::setPosition(int, int)+0x6a>
10008044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008047:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
1000804a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000804d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
10008050:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10008053:	29 c1                	sub    ecx,eax
10008055:	89 c8                	mov    eax,ecx
10008057:	01 c2                	add    edx,eax
10008059:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000805c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
1000805f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008062:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
10008065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008068:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
1000806b:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
1000806e:	29 c1                	sub    ecx,eax
10008070:	89 c8                	mov    eax,ecx
10008072:	01 c2                	add    edx,eax
10008074:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008077:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
1000807a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000807d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10008080:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
10008083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008086:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10008089:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
1000808c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000808f:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10008092:	83 f0 01             	xor    eax,0x1
10008095:	84 c0                	test   al,al
10008097:	74 0e                	je     100080a7 <NFrame::setPosition(int, int)+0x97>
10008099:	83 ec 0c             	sub    esp,0xc
1000809c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000809f:	e8 fc ff ff ff       	call   100080a0 <NFrame::setPosition(int, int)+0x90>	100080a0: R_386_PC32	NFrame::tryInvalidate()
100080a4:	83 c4 10             	add    esp,0x10
100080a7:	90                   	nop
100080a8:	c9                   	leave  
100080a9:	c3                   	ret    

100080aa <NFrame::raise()>:
100080aa:	55                   	push   ebp
100080ab:	89 e5                	mov    ebp,esp
100080ad:	83 ec 18             	sub    esp,0x18
100080b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100080b3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100080b6:	85 c0                	test   eax,eax
100080b8:	74 2c                	je     100080e6 <NFrame::raise()+0x3c>
100080ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100080bd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100080c0:	83 ec 08             	sub    esp,0x8
100080c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100080c6:	50                   	push   eax
100080c7:	e8 fc ff ff ff       	call   100080c8 <NFrame::raise()+0x1e>	100080c8: R_386_PC32	NFrame::raiseChild(NFrame*)
100080cc:	83 c4 10             	add    esp,0x10
100080cf:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100080d2:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
100080d6:	74 0e                	je     100080e6 <NFrame::raise()+0x3c>
100080d8:	83 ec 0c             	sub    esp,0xc
100080db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100080de:	e8 fc ff ff ff       	call   100080df <NFrame::raise()+0x35>	100080df: R_386_PC32	NFrame::invalidate()
100080e3:	83 c4 10             	add    esp,0x10
100080e6:	90                   	nop
100080e7:	c9                   	leave  
100080e8:	c3                   	ret    
100080e9:	90                   	nop

100080ea <NFrame::isFullscreen()>:
100080ea:	55                   	push   ebp
100080eb:	89 e5                	mov    ebp,esp
100080ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100080f0:	8a 40 70             	mov    al,BYTE PTR [eax+0x70]
100080f3:	5d                   	pop    ebp
100080f4:	c3                   	ret    
100080f5:	90                   	nop

100080f6 <NFrame::toggleFullscreen(Video*)>:
100080f6:	55                   	push   ebp
100080f7:	89 e5                	mov    ebp,esp
100080f9:	53                   	push   ebx
100080fa:	83 ec 04             	sub    esp,0x4
100080fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008100:	8a 40 70             	mov    al,BYTE PTR [eax+0x70]
10008103:	84 c0                	test   al,al
10008105:	74 47                	je     1000814e <NFrame::toggleFullscreen(Video*)+0x58>
10008107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000810a:	c6 40 70 00          	mov    BYTE PTR [eax+0x70],0x0
1000810e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008111:	8b 90 80 00 00 00    	mov    edx,DWORD PTR [eax+0x80]
10008117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000811a:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
1000811d:	83 ec 04             	sub    esp,0x4
10008120:	52                   	push   edx
10008121:	50                   	push   eax
10008122:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008125:	e8 fc ff ff ff       	call   10008126 <NFrame::toggleFullscreen(Video*)+0x30>	10008126: R_386_PC32	NFrame::setSize(int, int)
1000812a:	83 c4 10             	add    esp,0x10
1000812d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008130:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
10008133:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008136:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
10008139:	83 ec 04             	sub    esp,0x4
1000813c:	52                   	push   edx
1000813d:	50                   	push   eax
1000813e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008141:	e8 fc ff ff ff       	call   10008142 <NFrame::toggleFullscreen(Video*)+0x4c>	10008142: R_386_PC32	NFrame::setPosition(int, int)
10008146:	83 c4 10             	add    esp,0x10
10008149:	e9 88 00 00 00       	jmp    100081d6 <NFrame::toggleFullscreen(Video*)+0xe0>
1000814e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008151:	c6 40 70 01          	mov    BYTE PTR [eax+0x70],0x1
10008155:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008158:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
1000815b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000815e:	89 50 74             	mov    DWORD PTR [eax+0x74],edx
10008161:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008164:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
10008167:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000816a:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
1000816d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008170:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
10008173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008176:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
10008179:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000817c:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
1000817f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008182:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
10008188:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000818b:	c6 40 68 01          	mov    BYTE PTR [eax+0x68],0x1
1000818f:	83 ec 04             	sub    esp,0x4
10008192:	6a 00                	push   0x0
10008194:	6a 00                	push   0x0
10008196:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008199:	e8 fc ff ff ff       	call   1000819a <NFrame::toggleFullscreen(Video*)+0xa4>	1000819a: R_386_PC32	NFrame::setPosition(int, int)
1000819e:	83 c4 10             	add    esp,0x10
100081a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100081a4:	c6 40 68 00          	mov    BYTE PTR [eax+0x68],0x0
100081a8:	83 ec 0c             	sub    esp,0xc
100081ab:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100081ae:	e8 fc ff ff ff       	call   100081af <NFrame::toggleFullscreen(Video*)+0xb9>	100081af: R_386_PC32	Video::getHeight()
100081b3:	83 c4 10             	add    esp,0x10
100081b6:	89 c3                	mov    ebx,eax
100081b8:	83 ec 0c             	sub    esp,0xc
100081bb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100081be:	e8 fc ff ff ff       	call   100081bf <NFrame::toggleFullscreen(Video*)+0xc9>	100081bf: R_386_PC32	Video::getWidth()
100081c3:	83 c4 10             	add    esp,0x10
100081c6:	83 ec 04             	sub    esp,0x4
100081c9:	53                   	push   ebx
100081ca:	50                   	push   eax
100081cb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100081ce:	e8 fc ff ff ff       	call   100081cf <NFrame::toggleFullscreen(Video*)+0xd9>	100081cf: R_386_PC32	NFrame::setSize(int, int)
100081d3:	83 c4 10             	add    esp,0x10
100081d6:	90                   	nop
100081d7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100081da:	c9                   	leave  
100081db:	c3                   	ret    

100081dc <NFrame::getTitlebarHeight()>:
100081dc:	55                   	push   ebp
100081dd:	89 e5                	mov    ebp,esp
100081df:	83 ec 08             	sub    esp,0x8
100081e2:	83 ec 0c             	sub    esp,0xc
100081e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100081e8:	e8 fc ff ff ff       	call   100081e9 <NFrame::getTitlebarHeight()+0xd>	100081e9: R_386_PC32	NFrame::hasTitleBar()
100081ed:	83 c4 10             	add    esp,0x10
100081f0:	84 c0                	test   al,al
100081f2:	74 0b                	je     100081ff <NFrame::getTitlebarHeight()+0x23>
100081f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100081f7:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
100081fd:	eb 05                	jmp    10008204 <NFrame::getTitlebarHeight()+0x28>
100081ff:	b8 00 00 00 00       	mov    eax,0x0
10008204:	c9                   	leave  
10008205:	c3                   	ret    

10008206 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)>:
10008206:	55                   	push   ebp
10008207:	89 e5                	mov    ebp,esp
10008209:	83 ec 18             	sub    esp,0x18
1000820c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10008213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008216:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008219:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000821c:	83 ec 0c             	sub    esp,0xc
1000821f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008222:	e8 fc ff ff ff       	call   10008223 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x1d>	10008223: R_386_PC32	LinkedList2<NFrame*>::isEmpty()
10008227:	83 c4 10             	add    esp,0x10
1000822a:	83 f0 01             	xor    eax,0x1
1000822d:	84 c0                	test   al,al
1000822f:	74 0e                	je     1000823f <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x39>
10008231:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008234:	8b 00                	mov    eax,DWORD PTR [eax]
10008236:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10008239:	75 04                	jne    1000823f <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x39>
1000823b:	b0 01                	mov    al,0x1
1000823d:	eb 02                	jmp    10008241 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x3b>
1000823f:	b0 00                	mov    al,0x0
10008241:	84 c0                	test   al,al
10008243:	74 30                	je     10008275 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x6f>
10008245:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008248:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000824b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000824e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
10008251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008254:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10008257:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000825a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000825d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10008260:	83 ec 08             	sub    esp,0x8
10008263:	6a 08                	push   0x8
10008265:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10008268:	e8 fc ff ff ff       	call   10008269 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x63>	10008269: R_386_PC32	operator delete(void*, unsigned long)
1000826d:	83 c4 10             	add    esp,0x10
10008270:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10008273:	eb a7                	jmp    1000821c <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x16>
10008275:	83 ec 0c             	sub    esp,0xc
10008278:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000827b:	e8 fc ff ff ff       	call   1000827c <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x76>	1000827c: R_386_PC32	LinkedList2<NFrame*>::isEmpty()
10008280:	83 c4 10             	add    esp,0x10
10008283:	83 f0 01             	xor    eax,0x1
10008286:	84 c0                	test   al,al
10008288:	74 14                	je     1000829e <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x98>
1000828a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000828e:	74 0e                	je     1000829e <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x98>
10008290:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008293:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008296:	85 c0                	test   eax,eax
10008298:	74 04                	je     1000829e <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x98>
1000829a:	b0 01                	mov    al,0x1
1000829c:	eb 02                	jmp    100082a0 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x9a>
1000829e:	b0 00                	mov    al,0x0
100082a0:	84 c0                	test   al,al
100082a2:	74 59                	je     100082fd <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0xf7>
100082a4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100082a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100082aa:	8b 00                	mov    eax,DWORD PTR [eax]
100082ac:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
100082af:	75 3e                	jne    100082ef <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0xe9>
100082b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100082b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100082b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100082ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100082bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100082c0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
100082c3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100082c6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100082c9:	83 ec 08             	sub    esp,0x8
100082cc:	6a 08                	push   0x8
100082ce:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100082d1:	e8 fc ff ff ff       	call   100082d2 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0xcc>	100082d2: R_386_PC32	operator delete(void*, unsigned long)
100082d6:	83 c4 10             	add    esp,0x10
100082d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100082dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100082df:	85 c0                	test   eax,eax
100082e1:	75 09                	jne    100082ec <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0xe6>
100082e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100082e6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100082e9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
100082ec:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100082ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100082f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100082f5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100082f8:	e9 78 ff ff ff       	jmp    10008275 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x6f>
100082fd:	83 ec 0c             	sub    esp,0xc
10008300:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008303:	e8 fc ff ff ff       	call   10008304 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0xfe>	10008304: R_386_PC32	LinkedList2<NFrame*>::isEmpty()
10008308:	83 c4 10             	add    esp,0x10
1000830b:	84 c0                	test   al,al
1000830d:	74 0a                	je     10008319 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x113>
1000830f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008312:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10008319:	90                   	nop
1000831a:	c9                   	leave  
1000831b:	c3                   	ret    

1000831c <_GLOBAL__sub_I_mouseX>:
1000831c:	83 ec 18             	sub    esp,0x18
1000831f:	68 00 00 00 00       	push   0x0	10008320: R_386_32	tightMouseRegionOld
10008324:	e8 fc ff ff ff       	call   10008325 <_GLOBAL__sub_I_mouseX+0x9>	10008325: R_386_PC32	Region::Region()
10008329:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	1000832c: R_386_32	tightMouseRegionNew
10008330:	e8 fc ff ff ff       	call   10008331 <_GLOBAL__sub_I_mouseX+0x15>	10008331: R_386_PC32	Region::Region()
10008335:	83 c4 1c             	add    esp,0x1c
10008338:	c3                   	ret    
10008339:	66 90                	xchg   ax,ax
1000833b:	90                   	nop

1000833c <PHYS_RAM_TABLE_SIZE>:
1000833c:	13 05 00 00                                         ....

10008340 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10008340:	24 05 00 00                                         $...

10008344 <PHYS_RAM_TABLE>:
10008344:	00 06 00 00                                         ....

10008348 <PHYS_DMA_MEMORY_1>:
10008348:	00 00 01 00                                         ....

1000834c <PHYS_PHYS_PAGE_BITMAP>:
1000834c:	00 00 02 00                                         ....

10008350 <PHYS_VIRT_PAGE_BITMAP>:
10008350:	00 00 04 00                                         ....

10008354 <PHYS_DMA_MEMORY_2>:
10008354:	00 00 06 00                                         ....

10008358 <PHYS_ALLOCED_VIRT_PAGES>:
10008358:	00 00 10 00                                         ....

1000835c <PHYS_KRNL_PAGE_DIRECTORY>:
1000835c:	00 10 00 00                                         ....

10008360 <VIRT_KERNEL_BASE>:
10008360:	00 00 00 c0                                         ....

10008364 <VIRT_LOW_MEGS>:
10008364:	00 00 00 c2                                         ....

10008368 <VIRT_CPU_SPECIFIC>:
10008368:	00 00 40 c2                                         ..@.

1000836c <VIRT_RECURSIVE_SPOT_1>:
1000836c:	00 00 80 c2                                         ....

10008370 <VIRT_RECURSIVE_SPOT_2>:
10008370:	00 00 c0 c2                                         ....

10008374 <VIRT_DMA_MEMORY_1>:
10008374:	00 00 01 c2                                         ....

10008378 <SIZE_DMA_MEMORY_1>:
10008378:	00 00 01 00                                         ....

1000837c <VIRT_KRNL_PAGE_DIRECTORY>:
1000837c:	00 10 00 c2                                         ....

10008380 <VIRT_PHYS_PAGE_BITMAP>:
10008380:	00 00 02 c2                                         ....

10008384 <SIZE_PHYS_PAGE_BITMAP>:
10008384:	00 00 02 00                                         ....

10008388 <VIRT_VIRT_PAGE_BITMAP>:
10008388:	00 00 04 c2                                         ....

1000838c <SIZE_VIRT_PAGE_BITMAP>:
1000838c:	00 80 00 00                                         ....

10008390 <VIRT_RAM_TABLE>:
10008390:	00 06 00 c2                                         ....

10008394 <VIRT_RAM_TABLE_SIZE>:
10008394:	13 05 00 c2                                         ....

10008398 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10008398:	24 05 00 c2                                         $...

1000839c <SIZE_APP_STACK_USER>:
1000839c:	00 00 18 00                                         ....

100083a0 <SIZE_APP_STACK_KRNL>:
100083a0:	00 00 08 00                                         ....

100083a4 <SIZE_APP_STACK_TOTAL>:
100083a4:	00 00 20 00                                         .. .

100083a8 <VIRT_APP_DATA>:
100083a8:	00 00 00 10                                         ....

100083ac <VIRT_APP_STACK_USER_TOP>:
100083ac:	00 00 00 02                                         ....

100083b0 <VIRT_APP_STACK_KRNL_TOP>:
100083b0:	00 00 e8 01                                         ....

100083b4 <VIRT_HEAP_MIN>:
100083b4:	00 00 00 c8                                         ....

100083b8 <VIRT_HEAP_MAX>:
100083b8:	ff ff ff ef                                         ....

100083bc <VIRT_SBRK_MIN>:
100083bc:	00 00 00 f0                                         ....

100083c0 <VIRT_SBRK_MAX>:
100083c0:	00 00 c0 ff                                         ....

100083c4 <VIRT_ALLOCED_VIRT_PAGES>:
100083c4:	00 00 10 c2                                         ....

100083c8 <VIRT_ACPI_DRIVER>:
100083c8:	00 40 48 c2                                         .@H.

100083cc <TERMINAL_KEYBUFFER_IN_SIZE>:
100083cc:	80 00 00 00                                         ....

100083d0 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100083d0:	80 00 00 00 2a 53 59 53 54 45 4d 00 58 00 53 65     ....*SYSTEM.X.Se
100083e0:	72 69 66 00 54 68 65 20 71 75 69 63 6b 20 62 72     rif.The quick br
100083f0:	6f 77 6e 20 66 6f 78 20 6a 75 6d 70 73 20 6f 76     own fox jumps ov
10008400:	65 72 20 61 20 6c 61 7a 79 20 64 6f 67 2e 00 00     er a lazy dog...
10008410:	31 3e 43 3a 2f 55 73 65 72 73 2f 41 6c 65 78 2f     1>C:/Users/Alex/
10008420:	44 65 73 6b 74 6f 70 2f 42 61 6e 61 6e 61 2f 6b     Desktop/Banana/k
10008430:	65 72 6e 65 6c 2f 6c 69 62 6b 2f 73 74 72 69 6e     ernel/libk/strin
10008440:	67 2e 68 28 33 36 2c 38 29 3a 20 77 61 72 6e 69     g.h(36,8): warni
10008450:	6e 67 20 47 41 45 34 42 46 37 39 39 3a 20 64 65     ng GAE4BF799: de
10008460:	63 6c 61 72 61 74 69 6f 6e 20 6f 66 20 27 63 68     claration of 'ch
10008470:	61 72 2a 20 73 74 72 63 68 72 28 63 68 61 72 2a     ar* strchr(char*
10008480:	2c 20 69 6e 74 29 27 20 63 6f 6e 66 6c 69 63 74     , int)' conflict
10008490:	73 20 77 69 74 68 20 62 75 69 6c 74 2d 69 6e 20     s with built-in 
100084a0:	64 65 63 6c 61 72 61 74 69 6f 6e 20 27 63 68 61     declaration 'cha
100084b0:	72 2a 20 73 74 72 63 68 72 28 63 6f 6e 73 74 20     r* strchr(const 
100084c0:	63 68 61 72 2a 2c 20 69 6e 74 29 27 20 5b 2d 57     char*, int)' [-W
100084d0:	62 75 69 6c 74 69 6e 2d 64 65 63 6c 61 72 61 74     builtin-declarat
100084e0:	69 6f 6e 2d 6d 69 73 6d 61 74 63 68 5d 00 00 00     ion-mismatch]...
100084f0:	4e 42 75 74 74 6f 6e 28 69 6e 74 20 78 2c 20 69     NButton(int x, i
10008500:	6e 74 20 79 2c 20 69 6e 74 20 77 2c 20 69 6e 74     nt y, int w, int
10008510:	20 68 29 20 3a 20 4e 46 72 61 6d 65 28 78 2c 20      h) : NFrame(x, 
10008520:	79 2c 20 77 2c 20 68 29 00 00 00 00 70 61 69 6e     y, w, h)....pain
10008530:	74 52 65 63 74 61 6e 67 6c 65 28 67 2c 20 30 2c     tRectangle(g, 0,
10008540:	20 30 2c 20 72 67 6e 2e 77 69 64 74 68 2c 20 72      0, rgn.width, r
10008550:	67 6e 2e 68 65 69 67 68 74 2c 20 63 6f 6c 29 3b     gn.height, col);
10008560:	00 20 53 54 4f 50 20 45 52 52 4f 52 20 00 00 00     . STOP ERROR ...
10008570:	41 20 70 72 6f 62 6c 65 6d 20 68 61 73 20 6f 63     A problem has oc
10008580:	63 75 72 65 64 20 61 6e 64 20 42 61 6e 61 6e 61     cured and Banana
10008590:	20 63 61 6e 6e 6f 74 20 63 6f 6e 74 69 6e 75 65      cannot continue
100085a0:	2e 00 43 6c 69 70 64 72 61 77 20 69 73 20 6e 6f     ..Clipdraw is no
100085b0:	77 20 72 75 6e 6e 69 6e 67 2e 2e 2e 0a 00 53 79     w running.....Sy
100085c0:	73 74 65 6d 20 66 6f 6e 74 20 68 61 6e 64 6c 65     stem font handle
100085d0:	20 3d 20 25 64 0a 00 55 6e 74 69 74 6c 65 64 20      = %d..Untitled 
100085e0:	57 69 6e 64 6f 77 00 90                             Window..

100085e8 <vtable for NButton>:
	...
	100085f0: R_386_32	NFrame::postResizeCleanup()
	100085f4: R_386_32	NButton::paintHandler(NFrame::Graphics)
	100085f8: R_386_32	NFrame::regenerateRegion()

100085fc <vtable for NDesktopWindow>:
	...
	10008604: R_386_32	NFrame::postResizeCleanup()
	10008608: R_386_32	NDesktopWindow::paintHandler(NFrame::Graphics)
	1000860c: R_386_32	NFrame::regenerateRegion()

10008610 <vtable for NWindow>:
	...
	10008618: R_386_32	NWindow::postResizeCleanup()
	1000861c: R_386_32	NWindow::paintHandler(NFrame::Graphics)
	10008620: R_386_32	NFrame::regenerateRegion()

10008624 <vtable for NFrame>:
	...
	1000862c: R_386_32	NFrame::postResizeCleanup()
	10008630: R_386_32	__cxa_pure_virtual
	10008634: R_386_32	NFrame::regenerateRegion()
10008638:	43 55 52 53 4f 52 20 4c 4f 41 44 3a 20 42 41 44     CURSOR LOAD: BAD
10008648:	20 31 0a 00 43 55 52 53 4f 52 20 4c 4f 41 44 3a      1..CURSOR LOAD:
10008658:	20 42 41 44 20 32 0a 00 4e 52 4d 4c 00 57 41 49      BAD 2..NRML.WAI
10008668:	54 00 54 4c 44 52 00 54 45 58 54 00 56 45 52 54     T.TLDR.TEXT.VERT
10008678:	00 48 4f 52 5a 00 48 41 4e 44 00 43 55 52 53 4f     .HORZ.HAND.CURSO
10008688:	52 20 4c 4f 41 44 3a 20 42 41 44 20 33 0a 00 43     R LOAD: BAD 3..C
10008698:	3a 2f 42 61 6e 61 6e 61 2f 43 75 72 73 6f 72 73     :/Banana/Cursors
100086a8:	2f 53 54 41 4e 44 41 52 44 2e 43 55 52 00 61 62     /STANDARD.CUR.ab
100086b8:	6f 72 74 00 00 00 00 3f 4d 65 6d 6f 72 79 20 61     ort....?Memory a
100086c8:	6c 6c 6f 63 61 74 69 6f 6e 20 65 72 72 6f 72 00     llocation error.
100086d8:	42 61 64 20 66 69 6c 65 20 66 6f 72 6d 61 74 00     Bad file format.
100086e8:	4e 6f 20 66 6f 6e 74 20 66 61 63 65 20 66 6f 75     No font face fou
100086f8:	6e 64 00 49 6e 76 61 6c 69 64 20 69 6e 70 75 74     nd.Invalid input
10008708:	20 76 61 6c 75 65 00 49 6e 76 61 6c 69 64 20 73      value.Invalid s
10008718:	74 79 6c 65 00 49 6e 76 61 6c 69 64 20 73 69 7a     tyle.Invalid siz
10008728:	65 00 47 6c 79 70 68 20 6e 6f 74 20 66 6f 75 6e     e.Glyph not foun
10008738:	64 00 53 46 4e 43 00 53 46 4e 32 00 32 4e 46 53     d.SFNC.SFN2.2NFS
10008748:	00 43 3a 2f 42 61 6e 61 6e 61 2f 46 6f 6e 74 73     .C:/Banana/Fonts
10008758:	2f 53 46 4e 2f 00 2e 53 46 4e 00 4c 6f 61 64 69     /SFN/..SFN.Loadi
10008768:	6e 67 20 66 6f 6e 74 20 27 25 73 27 0a 00 63 61     ng font '%s'..ca
10008778:	6e 6e 6f 74 20 63 72 65 61 74 65 20 66 69 6c 65     nnot create file
10008788:	2e 0a 00 63 61 6e 6e 6f 74 20 63 72 65 61 74 65     ...cannot create
10008798:	20 72 65 61 64 2e 0a 00 62 75 74 20 77 65 20 6f      read...but we o
100087a8:	6e 6c 79 20 72 65 61 64 20 25 64 20 62 79 74 65     nly read %d byte
100087b8:	73 2e 0a 00 65 78 69 73 74 69 6e 67 20 68 61 6e     s...existing han
100087c8:	64 6c 65 20 3d 20 25 64 0a 00 65 78 69 73 74 69     dle = %d..existi
100087d8:	6e 67 20 66 6f 6e 74 20 3d 20 30 78 25 58 0a 00     ng font = 0x%X..
100087e8:	65 78 69 73 74 69 6e 67 46 6f 6e 74 2d 3e 73 73     existingFont->ss
100087f8:	66 6e 44 61 74 61 20 3d 20 30 78 25 58 0a 00        fnData = 0x%X..
