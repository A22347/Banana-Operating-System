
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <NiBegin(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <NiBegin(void*)+0xd>	1000000d: R_386_PC32	NiMain(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <NiMain(void*)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	57                   	push   edi
1000001b:	56                   	push   esi
1000001c:	53                   	push   ebx
1000001d:	81 ec ec 00 00 00    	sub    esp,0xec
10000023:	83 ec 0c             	sub    esp,0xc
10000026:	68 75 8e 00 10       	push   0x10008e75	10000027: R_386_32	.text
1000002b:	e8 fc ff ff ff       	call   1000002c <NiMain(void*)+0x15>	1000002c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000030:	83 c4 10             	add    esp,0x10
10000033:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10000035: R_386_32	screen
10000039:	a1 00 00 00 00       	mov    eax,ds:0x0	1000003a: R_386_32	screen
1000003e:	8b 00                	mov    eax,DWORD PTR [eax]
10000040:	83 c0 40             	add    eax,0x40
10000043:	8b 00                	mov    eax,DWORD PTR [eax]
10000045:	83 ec 08             	sub    esp,0x8
10000048:	68 80 80 00 00       	push   0x8080
1000004d:	52                   	push   edx
1000004e:	ff d0                	call   eax
10000050:	83 c4 10             	add    esp,0x10
10000053:	c7 05 00 00 00 00 32 00 00 00 	mov    DWORD PTR ds:0x0,0x32	10000055: R_386_32	mouseX
1000005d:	c7 05 00 00 00 00 32 00 00 00 	mov    DWORD PTR ds:0x0,0x32	1000005f: R_386_32	mouseY
10000067:	e8 fc ff ff ff       	call   10000068 <NiMain(void*)+0x51>	10000068: R_386_PC32	initFonts()
1000006c:	6a 00                	push   0x0
1000006e:	6a 0c                	push   0xc
10000070:	68 e8 8c 00 10       	push   0x10008ce8	10000071: R_386_32	.text
10000075:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
1000007b:	50                   	push   eax
1000007c:	e8 fc ff ff ff       	call   1000007d <NiMain(void*)+0x66>	1000007d: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
10000081:	83 c4 10             	add    esp,0x10
10000084:	83 ec 08             	sub    esp,0x8
10000087:	81 ec 88 00 00 00    	sub    esp,0x88
1000008d:	89 e0                	mov    eax,esp
1000008f:	89 c3                	mov    ebx,eax
10000091:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10000097:	ba 22 00 00 00       	mov    edx,0x22
1000009c:	89 df                	mov    edi,ebx
1000009e:	89 c6                	mov    esi,eax
100000a0:	89 d1                	mov    ecx,edx
100000a2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100000a4:	e8 fc ff ff ff       	call   100000a5 <NiMain(void*)+0x8e>	100000a5: R_386_PC32	getFontHandle(FontStyle)
100000a9:	81 c4 90 00 00 00    	add    esp,0x90
100000af:	a3 00 00 00 00       	mov    ds:0x0,eax	100000b0: R_386_32	SYSTEM_FONT_HANDLE
100000b4:	a1 00 00 00 00       	mov    eax,ds:0x0	100000b5: R_386_32	SYSTEM_FONT_HANDLE
100000b9:	83 ec 08             	sub    esp,0x8
100000bc:	50                   	push   eax
100000bd:	68 91 8e 00 10       	push   0x10008e91	100000be: R_386_32	.text
100000c2:	e8 fc ff ff ff       	call   100000c3 <NiMain(void*)+0xac>	100000c3: R_386_PC32	Dbg::kprintf(char const*, ...)
100000c7:	83 c4 10             	add    esp,0x10
100000ca:	c7 45 c8 90 00 00 00 	mov    DWORD PTR [ebp-0x38],0x90
100000d1:	83 ec 0c             	sub    esp,0xc
100000d4:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
100000d7:	e8 fc ff ff ff       	call   100000d8 <NiMain(void*)+0xc1>	100000d8: R_386_PC32	malloc
100000dc:	83 c4 10             	add    esp,0x10
100000df:	89 c3                	mov    ebx,eax
100000e1:	83 ec 04             	sub    esp,0x4
100000e4:	6a 00                	push   0x0
100000e6:	68 aa 8e 00 10       	push   0x10008eaa	100000e7: R_386_32	.text
100000eb:	68 5e 01 00 00       	push   0x15e
100000f0:	68 5e 01 00 00       	push   0x15e
100000f5:	6a 32                	push   0x32
100000f7:	6a 50                	push   0x50
100000f9:	53                   	push   ebx
100000fa:	e8 fc ff ff ff       	call   100000fb <NiMain(void*)+0xe4>	100000fb: R_386_PC32	NWindow::NWindow(int, int, int, int, char const*, int)
100000ff:	83 c4 20             	add    esp,0x20
10000102:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000105:	c7 45 cc 90 00 00 00 	mov    DWORD PTR [ebp-0x34],0x90
1000010c:	83 ec 0c             	sub    esp,0xc
1000010f:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000112:	e8 fc ff ff ff       	call   10000113 <NiMain(void*)+0xfc>	10000113: R_386_PC32	malloc
10000117:	83 c4 10             	add    esp,0x10
1000011a:	89 c3                	mov    ebx,eax
1000011c:	83 ec 04             	sub    esp,0x4
1000011f:	6a 00                	push   0x0
10000121:	68 aa 8e 00 10       	push   0x10008eaa	10000122: R_386_32	.text
10000126:	68 c2 01 00 00       	push   0x1c2
1000012b:	68 c2 01 00 00       	push   0x1c2
10000130:	6a 58                	push   0x58
10000132:	68 b4 00 00 00       	push   0xb4
10000137:	53                   	push   ebx
10000138:	e8 fc ff ff ff       	call   10000139 <NiMain(void*)+0x122>	10000139: R_386_PC32	NWindow::NWindow(int, int, int, int, char const*, int)
1000013d:	83 c4 20             	add    esp,0x20
10000140:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
10000143:	c7 45 d0 88 00 00 00 	mov    DWORD PTR [ebp-0x30],0x88
1000014a:	83 ec 0c             	sub    esp,0xc
1000014d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000150:	e8 fc ff ff ff       	call   10000151 <NiMain(void*)+0x13a>	10000151: R_386_PC32	malloc
10000155:	83 c4 10             	add    esp,0x10
10000158:	89 c3                	mov    ebx,eax
1000015a:	83 ec 0c             	sub    esp,0xc
1000015d:	68 58 02 00 00       	push   0x258
10000162:	68 40 06 00 00       	push   0x640
10000167:	6a 28                	push   0x28
10000169:	6a 0f                	push   0xf
1000016b:	53                   	push   ebx
1000016c:	e8 fc ff ff ff       	call   1000016d <NiMain(void*)+0x156>	1000016d: R_386_PC32	NButton::NButton(int, int, int, int)
10000171:	83 c4 20             	add    esp,0x20
10000174:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10000177:	a1 00 00 00 00       	mov    eax,ds:0x0	10000178: R_386_32	screen
1000017c:	83 ec 0c             	sub    esp,0xc
1000017f:	50                   	push   eax
10000180:	e8 fc ff ff ff       	call   10000181 <NiMain(void*)+0x16a>	10000181: R_386_PC32	Video::getWidth()
10000185:	83 c4 10             	add    esp,0x10
10000188:	89 c6                	mov    esi,eax
1000018a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000018b: R_386_32	screen
1000018f:	83 ec 0c             	sub    esp,0xc
10000192:	50                   	push   eax
10000193:	e8 fc ff ff ff       	call   10000194 <NiMain(void*)+0x17d>	10000194: R_386_PC32	Video::getHeight()
10000198:	83 c4 10             	add    esp,0x10
1000019b:	89 c7                	mov    edi,eax
1000019d:	c7 45 d4 8c 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x8c
100001a4:	83 ec 0c             	sub    esp,0xc
100001a7:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100001aa:	e8 fc ff ff ff       	call   100001ab <NiMain(void*)+0x194>	100001ab: R_386_PC32	malloc
100001af:	83 c4 10             	add    esp,0x10
100001b2:	89 c3                	mov    ebx,eax
100001b4:	83 ec 08             	sub    esp,0x8
100001b7:	68 80 80 00 00       	push   0x8080
100001bc:	57                   	push   edi
100001bd:	56                   	push   esi
100001be:	6a 00                	push   0x0
100001c0:	6a 00                	push   0x0
100001c2:	53                   	push   ebx
100001c3:	e8 fc ff ff ff       	call   100001c4 <NiMain(void*)+0x1ad>	100001c4: R_386_PC32	NDesktopWindow::NDesktopWindow(int, int, int, int, int)
100001c8:	83 c4 20             	add    esp,0x20
100001cb:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100001cd: R_386_32	desktopWindow
100001d1:	a1 00 00 00 00       	mov    eax,ds:0x0	100001d2: R_386_32	desktopWindow
100001d6:	83 ec 08             	sub    esp,0x8
100001d9:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
100001dc:	50                   	push   eax
100001dd:	e8 fc ff ff ff       	call   100001de <NiMain(void*)+0x1c7>	100001de: R_386_PC32	NFrame::addChild(NFrame*)
100001e2:	83 c4 10             	add    esp,0x10
100001e5:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e6: R_386_32	desktopWindow
100001ea:	83 ec 08             	sub    esp,0x8
100001ed:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100001f0:	50                   	push   eax
100001f1:	e8 fc ff ff ff       	call   100001f2 <NiMain(void*)+0x1db>	100001f2: R_386_PC32	NFrame::addChild(NFrame*)
100001f6:	83 c4 10             	add    esp,0x10
100001f9:	a1 00 00 00 00       	mov    eax,ds:0x0	100001fa: R_386_32	screen
100001fe:	83 ec 0c             	sub    esp,0xc
10000201:	50                   	push   eax
10000202:	e8 fc ff ff ff       	call   10000203 <NiMain(void*)+0x1ec>	10000203: R_386_PC32	mouseInit(Video*)
10000207:	83 c4 10             	add    esp,0x10
1000020a:	e8 fc ff ff ff       	call   1000020b <NiMain(void*)+0x1f4>	1000020b: R_386_PC32	installSystemHooks()
1000020f:	a1 00 00 00 00       	mov    eax,ds:0x0	10000210: R_386_32	screen
10000214:	83 ec 0c             	sub    esp,0xc
10000217:	50                   	push   eax
10000218:	e8 fc ff ff ff       	call   10000219 <NiMain(void*)+0x202>	10000219: R_386_PC32	Video::getWidth()
1000021d:	83 c4 10             	add    esp,0x10
10000220:	8d 50 01             	lea    edx,[eax+0x1]
10000223:	8d 85 24 ff ff ff    	lea    eax,[ebp-0xdc]
10000229:	83 ec 0c             	sub    esp,0xc
1000022c:	6a 01                	push   0x1
1000022e:	6a 01                	push   0x1
10000230:	6a 01                	push   0x1
10000232:	52                   	push   edx
10000233:	50                   	push   eax
10000234:	e8 fc ff ff ff       	call   10000235 <NiMain(void*)+0x21e>	10000235: R_386_PC32	createRectangleRegion(int, int, int, int)
10000239:	83 c4 1c             	add    esp,0x1c
1000023c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000023d: R_386_32	desktopWindow
10000241:	83 ec 0c             	sub    esp,0xc
10000244:	50                   	push   eax
10000245:	e8 fc ff ff ff       	call   10000246 <NiMain(void*)+0x22f>	10000246: R_386_PC32	NFrame::tryInvalidate()
1000024a:	83 c4 10             	add    esp,0x10
1000024d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000024e: R_386_32	desktopWindow
10000252:	89 85 14 ff ff ff    	mov    DWORD PTR [ebp-0xec],eax
10000258:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	1000025a: R_386_32	screen
1000025e:	89 8d 10 ff ff ff    	mov    DWORD PTR [ebp-0xf0],ecx
10000264:	83 ec 0c             	sub    esp,0xc
10000267:	83 ec 1c             	sub    esp,0x1c
1000026a:	89 e0                	mov    eax,esp
1000026c:	89 c3                	mov    ebx,eax
1000026e:	8d 85 24 ff ff ff    	lea    eax,[ebp-0xdc]
10000274:	ba 07 00 00 00       	mov    edx,0x7
10000279:	89 df                	mov    edi,ebx
1000027b:	89 c6                	mov    esi,eax
1000027d:	89 d1                	mov    ecx,edx
1000027f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000281:	ff b5 10 ff ff ff    	push   DWORD PTR [ebp-0xf0]
10000287:	ff b5 14 ff ff ff    	push   DWORD PTR [ebp-0xec]
1000028d:	e8 fc ff ff ff       	call   1000028e <NiMain(void*)+0x277>	1000028e: R_386_PC32	NFrame::repaint(Video*, Region)
10000292:	83 c4 30             	add    esp,0x30
10000295:	c7 45 d8 c4 07 00 00 	mov    DWORD PTR [ebp-0x28],0x7c4
1000029c:	83 ec 0c             	sub    esp,0xc
1000029f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100002a2:	e8 fc ff ff ff       	call   100002a3 <NiMain(void*)+0x28c>	100002a3: R_386_PC32	malloc
100002a7:	83 c4 10             	add    esp,0x10
100002aa:	89 c3                	mov    ebx,eax
100002ac:	6a 00                	push   0x0
100002ae:	6a 00                	push   0x0
100002b0:	68 ba 8e 00 10       	push   0x10008eba	100002b1: R_386_32	.text
100002b5:	53                   	push   ebx
100002b6:	e8 fc ff ff ff       	call   100002b7 <NiMain(void*)+0x2a0>	100002b7: R_386_PC32	Process::Process(char const*, Process*, char**)
100002bb:	83 c4 10             	add    esp,0x10
100002be:	83 ec 0c             	sub    esp,0xc
100002c1:	53                   	push   ebx
100002c2:	e8 fc ff ff ff       	call   100002c3 <NiMain(void*)+0x2ac>	100002c3: R_386_PC32	Process::createUserThread()
100002c7:	83 c4 10             	add    esp,0x10
100002ca:	83 ec 0c             	sub    esp,0xc
100002cd:	6a 02                	push   0x2
100002cf:	e8 fc ff ff ff       	call   100002d0 <NiMain(void*)+0x2b9>	100002d0: R_386_PC32	blockTask(TaskState)
100002d4:	83 c4 10             	add    esp,0x10
100002d7:	eb f1                	jmp    100002ca <NiMain(void*)+0x2b3>

100002d9 <lookupInFontTableByNameOnly(char const*, int)>:
100002d9:	55                   	push   ebp
100002da:	89 e5                	mov    ebp,esp
100002dc:	83 ec 18             	sub    esp,0x18
100002df:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100002e6:	a1 00 00 00 00       	mov    eax,ds:0x0	100002e7: R_386_32	fontTable
100002eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100002ee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100002f1:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100002f5:	74 43                	je     1000033a <lookupInFontTableByNameOnly(char const*, int)+0x61>
100002f7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100002fa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100002fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000300:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10000303:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10000306:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000309:	8b 00                	mov    eax,DWORD PTR [eax]
1000030b:	85 c0                	test   eax,eax
1000030d:	74 2a                	je     10000339 <lookupInFontTableByNameOnly(char const*, int)+0x60>
1000030f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000312:	8b 00                	mov    eax,DWORD PTR [eax]
10000314:	83 ec 08             	sub    esp,0x8
10000317:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000031a:	50                   	push   eax
1000031b:	e8 fc ff ff ff       	call   1000031c <lookupInFontTableByNameOnly(char const*, int)+0x43>	1000031c: R_386_PC32	strcmp
10000320:	83 c4 10             	add    esp,0x10
10000323:	85 c0                	test   eax,eax
10000325:	75 0d                	jne    10000334 <lookupInFontTableByNameOnly(char const*, int)+0x5b>
10000327:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000032a:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
1000032d:	74 05                	je     10000334 <lookupInFontTableByNameOnly(char const*, int)+0x5b>
1000032f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000332:	eb 0b                	jmp    1000033f <lookupInFontTableByNameOnly(char const*, int)+0x66>
10000334:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000337:	eb b8                	jmp    100002f1 <lookupInFontTableByNameOnly(char const*, int)+0x18>
10000339:	90                   	nop
1000033a:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000033f:	c9                   	leave  
10000340:	c3                   	ret    

10000341 <lookupInFontTable(FontStyle)>:
10000341:	55                   	push   ebp
10000342:	89 e5                	mov    ebp,esp
10000344:	83 ec 18             	sub    esp,0x18
10000347:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000034e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000034f: R_386_32	fontTable
10000353:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10000356:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10000359:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000035d:	74 66                	je     100003c5 <lookupInFontTable(FontStyle)+0x84>
1000035f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000362:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000365:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000368:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000036b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000036e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000371:	8b 00                	mov    eax,DWORD PTR [eax]
10000373:	85 c0                	test   eax,eax
10000375:	74 4d                	je     100003c4 <lookupInFontTable(FontStyle)+0x83>
10000377:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000037a:	8b 00                	mov    eax,DWORD PTR [eax]
1000037c:	8b 90 80 00 00 00    	mov    edx,DWORD PTR [eax+0x80]
10000382:	8b 85 88 00 00 00    	mov    eax,DWORD PTR [ebp+0x88]
10000388:	39 c2                	cmp    edx,eax
1000038a:	75 33                	jne    100003bf <lookupInFontTable(FontStyle)+0x7e>
1000038c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000038f:	8b 00                	mov    eax,DWORD PTR [eax]
10000391:	83 ec 08             	sub    esp,0x8
10000394:	8d 55 08             	lea    edx,[ebp+0x8]
10000397:	52                   	push   edx
10000398:	50                   	push   eax
10000399:	e8 fc ff ff ff       	call   1000039a <lookupInFontTable(FontStyle)+0x59>	1000039a: R_386_PC32	strcmp
1000039e:	83 c4 10             	add    esp,0x10
100003a1:	85 c0                	test   eax,eax
100003a3:	75 1a                	jne    100003bf <lookupInFontTable(FontStyle)+0x7e>
100003a5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100003a8:	8b 00                	mov    eax,DWORD PTR [eax]
100003aa:	8b 90 84 00 00 00    	mov    edx,DWORD PTR [eax+0x84]
100003b0:	8b 85 8c 00 00 00    	mov    eax,DWORD PTR [ebp+0x8c]
100003b6:	39 c2                	cmp    edx,eax
100003b8:	75 05                	jne    100003bf <lookupInFontTable(FontStyle)+0x7e>
100003ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100003bd:	eb 0b                	jmp    100003ca <lookupInFontTable(FontStyle)+0x89>
100003bf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100003c2:	eb 95                	jmp    10000359 <lookupInFontTable(FontStyle)+0x18>
100003c4:	90                   	nop
100003c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
100003ca:	c9                   	leave  
100003cb:	c3                   	ret    

100003cc <getFontHandle(FontStyle)>:
100003cc:	55                   	push   ebp
100003cd:	89 e5                	mov    ebp,esp
100003cf:	57                   	push   edi
100003d0:	56                   	push   esi
100003d1:	53                   	push   ebx
100003d2:	83 ec 2c             	sub    esp,0x2c
100003d5:	a1 00 00 00 00       	mov    eax,ds:0x0	100003d6: R_386_32	fontTable
100003da:	85 c0                	test   eax,eax
100003dc:	75 29                	jne    10000407 <getFontHandle(FontStyle)+0x3b>
100003de:	c7 45 d8 0c 00 00 00 	mov    DWORD PTR [ebp-0x28],0xc
100003e5:	83 ec 0c             	sub    esp,0xc
100003e8:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100003eb:	e8 fc ff ff ff       	call   100003ec <getFontHandle(FontStyle)+0x20>	100003ec: R_386_PC32	malloc
100003f0:	83 c4 10             	add    esp,0x10
100003f3:	89 c3                	mov    ebx,eax
100003f5:	83 ec 0c             	sub    esp,0xc
100003f8:	53                   	push   ebx
100003f9:	e8 fc ff ff ff       	call   100003fa <getFontHandle(FontStyle)+0x2e>	100003fa: R_386_PC32	LinkedList2<Font*>::LinkedList2()
100003fe:	83 c4 10             	add    esp,0x10
10000401:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000403: R_386_32	fontTable
10000407:	83 ec 08             	sub    esp,0x8
1000040a:	81 ec 88 00 00 00    	sub    esp,0x88
10000410:	89 e0                	mov    eax,esp
10000412:	89 c2                	mov    edx,eax
10000414:	8d 5d 08             	lea    ebx,[ebp+0x8]
10000417:	b8 22 00 00 00       	mov    eax,0x22
1000041c:	89 d7                	mov    edi,edx
1000041e:	89 de                	mov    esi,ebx
10000420:	89 c1                	mov    ecx,eax
10000422:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000424:	e8 fc ff ff ff       	call   10000425 <getFontHandle(FontStyle)+0x59>	10000425: R_386_PC32	lookupInFontTable(FontStyle)
10000429:	81 c4 90 00 00 00    	add    esp,0x90
1000042f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000432:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
10000436:	74 08                	je     10000440 <getFontHandle(FontStyle)+0x74>
10000438:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000043b:	e9 ea 00 00 00       	jmp    1000052a <getFontHandle(FontStyle)+0x15e>
10000440:	c7 45 d4 94 06 00 00 	mov    DWORD PTR [ebp-0x2c],0x694
10000447:	83 ec 0c             	sub    esp,0xc
1000044a:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
1000044d:	e8 fc ff ff ff       	call   1000044e <getFontHandle(FontStyle)+0x82>	1000044e: R_386_PC32	malloc
10000452:	83 c4 10             	add    esp,0x10
10000455:	89 c6                	mov    esi,eax
10000457:	89 f3                	mov    ebx,esi
10000459:	ba a5 01 00 00       	mov    edx,0x1a5
1000045e:	b8 00 00 00 00       	mov    eax,0x0
10000463:	89 df                	mov    edi,ebx
10000465:	89 d1                	mov    ecx,edx
10000467:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10000469:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
1000046c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
1000046f:	83 ec 08             	sub    esp,0x8
10000472:	8d 55 08             	lea    edx,[ebp+0x8]
10000475:	52                   	push   edx
10000476:	50                   	push   eax
10000477:	e8 fc ff ff ff       	call   10000478 <getFontHandle(FontStyle)+0xac>	10000478: R_386_PC32	strcpy
1000047c:	83 c4 10             	add    esp,0x10
1000047f:	8b 95 88 00 00 00    	mov    edx,DWORD PTR [ebp+0x88]
10000485:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000488:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
1000048e:	8b 95 8c 00 00 00    	mov    edx,DWORD PTR [ebp+0x8c]
10000494:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000497:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
1000049d:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
100004a0:	3c 2a                	cmp    al,0x2a
100004a2:	0f 94 c2             	sete   dl
100004a5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100004a8:	88 90 88 00 00 00    	mov    BYTE PTR [eax+0x88],dl
100004ae:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100004b1:	c7 80 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x8c],0x0
100004bb:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100004c2:	83 7d e4 7f          	cmp    DWORD PTR [ebp-0x1c],0x7f
100004c6:	7f 19                	jg     100004e1 <getFontHandle(FontStyle)+0x115>
100004c8:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100004cb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100004ce:	81 c2 24 01 00 00    	add    edx,0x124
100004d4:	c7 44 90 04 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x4],0x0
100004dc:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100004df:	eb e1                	jmp    100004c2 <getFontHandle(FontStyle)+0xf6>
100004e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100004e2: R_386_32	fontTable
100004e6:	83 ec 0c             	sub    esp,0xc
100004e9:	50                   	push   eax
100004ea:	e8 fc ff ff ff       	call   100004eb <getFontHandle(FontStyle)+0x11f>	100004eb: R_386_PC32	LinkedList2<Font*>::length()
100004ef:	83 c4 10             	add    esp,0x10
100004f2:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100004f5:	a1 00 00 00 00       	mov    eax,ds:0x0	100004f6: R_386_32	fontTable
100004fa:	83 ec 08             	sub    esp,0x8
100004fd:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10000500:	50                   	push   eax
10000501:	e8 fc ff ff ff       	call   10000502 <getFontHandle(FontStyle)+0x136>	10000502: R_386_PC32	LinkedList2<Font*>::appendNode(Font*)
10000506:	83 c4 10             	add    esp,0x10
10000509:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
1000050c:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
10000512:	85 c0                	test   eax,eax
10000514:	75 11                	jne    10000527 <getFontHandle(FontStyle)+0x15b>
10000516:	83 ec 08             	sub    esp,0x8
10000519:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
1000051c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000051f:	e8 fc ff ff ff       	call   10000520 <getFontHandle(FontStyle)+0x154>	10000520: R_386_PC32	loadSSFNFont(Font*, int)
10000524:	83 c4 10             	add    esp,0x10
10000527:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000052a:	8d 65 f4             	lea    esp,[ebp-0xc]
1000052d:	5b                   	pop    ebx
1000052e:	5e                   	pop    esi
1000052f:	5f                   	pop    edi
10000530:	5d                   	pop    ebp
10000531:	c3                   	ret    

10000532 <getFontFromHandle(int)>:
10000532:	55                   	push   ebp
10000533:	89 e5                	mov    ebp,esp
10000535:	83 ec 10             	sub    esp,0x10
10000538:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000053f:	a1 00 00 00 00       	mov    eax,ds:0x0	10000540: R_386_32	fontTable
10000544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10000547:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000054a:	83 7d f8 00          	cmp    DWORD PTR [ebp-0x8],0x0
1000054e:	74 23                	je     10000573 <getFontFromHandle(int)+0x41>
10000550:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000553:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10000556:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000559:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000055c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000055f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000562:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
10000565:	75 07                	jne    1000056e <getFontFromHandle(int)+0x3c>
10000567:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000056a:	8b 00                	mov    eax,DWORD PTR [eax]
1000056c:	eb 0a                	jmp    10000578 <getFontFromHandle(int)+0x46>
1000056e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000571:	eb d7                	jmp    1000054a <getFontFromHandle(int)+0x18>
10000573:	b8 00 00 00 00       	mov    eax,0x0
10000578:	c9                   	leave  
10000579:	c3                   	ret    

1000057a <getFontRegion(int, int, bool*, int*, int*)>:
1000057a:	55                   	push   ebp
1000057b:	89 e5                	mov    ebp,esp
1000057d:	57                   	push   edi
1000057e:	56                   	push   esi
1000057f:	53                   	push   ebx
10000580:	83 ec 6c             	sub    esp,0x6c
10000583:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000586:	e8 fc ff ff ff       	call   10000587 <getFontRegion(int, int, bool*, int*, int*)+0xd>	10000587: R_386_PC32	getFontFromHandle(int)
1000058b:	83 c4 04             	add    esp,0x4
1000058e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000591:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000594:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000597:	81 c2 24 01 00 00    	add    edx,0x124
1000059d:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
100005a1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100005a4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100005a7:	c6 00 00             	mov    BYTE PTR [eax],0x0
100005aa:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100005ae:	74 3f                	je     100005ef <getFontRegion(int, int, bool*, int*, int*)+0x75>
100005b0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100005b3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100005b6:	83 c2 24             	add    edx,0x24
100005b9:	8b 14 90             	mov    edx,DWORD PTR [eax+edx*4]
100005bc:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100005bf:	89 10                	mov    DWORD PTR [eax],edx
100005c1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100005c4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100005c7:	81 c2 a4 00 00 00    	add    edx,0xa4
100005cd:	8b 14 90             	mov    edx,DWORD PTR [eax+edx*4]
100005d0:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
100005d3:	89 10                	mov    DWORD PTR [eax],edx
100005d5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100005d8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100005db:	89 c3                	mov    ebx,eax
100005dd:	b8 07 00 00 00       	mov    eax,0x7
100005e2:	89 d7                	mov    edi,edx
100005e4:	89 de                	mov    esi,ebx
100005e6:	89 c1                	mov    ecx,eax
100005e8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100005ea:	e9 1f 01 00 00       	jmp    1000070e <getFontRegion(int, int, bool*, int*, int*)+0x194>
100005ef:	83 ec 0c             	sub    esp,0xc
100005f2:	8d 45 88             	lea    eax,[ebp-0x78]
100005f5:	50                   	push   eax
100005f6:	e8 fc ff ff ff       	call   100005f7 <getFontRegion(int, int, bool*, int*, int*)+0x7d>	100005f7: R_386_PC32	Region::Region()
100005fb:	83 c4 10             	add    esp,0x10
100005fe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000601:	8a 80 88 00 00 00    	mov    al,BYTE PTR [eax+0x88]
10000607:	84 c0                	test   al,al
10000609:	74 2e                	je     10000639 <getFontRegion(int, int, bool*, int*, int*)+0xbf>
1000060b:	8d 45 a4             	lea    eax,[ebp-0x5c]
1000060e:	83 ec 0c             	sub    esp,0xc
10000611:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
10000614:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10000617:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000061a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000061d:	50                   	push   eax
1000061e:	e8 fc ff ff ff       	call   1000061f <getFontRegion(int, int, bool*, int*, int*)+0xa5>	1000061f: R_386_PC32	getLegacyFontRegion(Font*, int, int*, int*)
10000623:	83 c4 1c             	add    esp,0x1c
10000626:	8d 45 88             	lea    eax,[ebp-0x78]
10000629:	8d 55 a4             	lea    edx,[ebp-0x5c]
1000062c:	b9 19 00 00 00       	mov    ecx,0x19
10000631:	89 c7                	mov    edi,eax
10000633:	89 d6                	mov    esi,edx
10000635:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000637:	eb 2c                	jmp    10000665 <getFontRegion(int, int, bool*, int*, int*)+0xeb>
10000639:	8d 45 c0             	lea    eax,[ebp-0x40]
1000063c:	83 ec 0c             	sub    esp,0xc
1000063f:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
10000642:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10000645:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10000648:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000064b:	50                   	push   eax
1000064c:	e8 fc ff ff ff       	call   1000064d <getFontRegion(int, int, bool*, int*, int*)+0xd3>	1000064d: R_386_PC32	getSSFNFontRegion(Font*, int, int*, int*)
10000651:	83 c4 1c             	add    esp,0x1c
10000654:	8d 45 88             	lea    eax,[ebp-0x78]
10000657:	8d 55 c0             	lea    edx,[ebp-0x40]
1000065a:	b9 19 00 00 00       	mov    ecx,0x19
1000065f:	89 c7                	mov    edi,eax
10000661:	89 d6                	mov    esi,edx
10000663:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000665:	83 7d 10 7f          	cmp    DWORD PTR [ebp+0x10],0x7f
10000669:	0f 8f 84 00 00 00    	jg     100006f3 <getFontRegion(int, int, bool*, int*, int*)+0x179>
1000066f:	c7 45 dc 1c 00 00 00 	mov    DWORD PTR [ebp-0x24],0x1c
10000676:	83 ec 0c             	sub    esp,0xc
10000679:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000067c:	e8 fc ff ff ff       	call   1000067d <getFontRegion(int, int, bool*, int*, int*)+0x103>	1000067d: R_386_PC32	malloc
10000681:	83 c4 10             	add    esp,0x10
10000684:	89 c3                	mov    ebx,eax
10000686:	83 ec 0c             	sub    esp,0xc
10000689:	6a 00                	push   0x0
1000068b:	6a 00                	push   0x0
1000068d:	6a 00                	push   0x0
1000068f:	6a 00                	push   0x0
10000691:	53                   	push   ebx
10000692:	e8 fc ff ff ff       	call   10000693 <getFontRegion(int, int, bool*, int*, int*)+0x119>	10000693: R_386_PC32	Region::Region(int, int, int, int)
10000697:	83 c4 20             	add    esp,0x20
1000069a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000069d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100006a0:	81 c2 24 01 00 00    	add    edx,0x124
100006a6:	89 5c 90 04          	mov    DWORD PTR [eax+edx*4+0x4],ebx
100006aa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100006ad:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100006b0:	81 c2 24 01 00 00    	add    edx,0x124
100006b6:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
100006ba:	89 c3                	mov    ebx,eax
100006bc:	8d 45 88             	lea    eax,[ebp-0x78]
100006bf:	ba 19 00 00 00       	mov    edx,0x19
100006c4:	89 df                	mov    edi,ebx
100006c6:	89 c6                	mov    esi,eax
100006c8:	89 d1                	mov    ecx,edx
100006ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100006cc:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100006cf:	8b 10                	mov    edx,DWORD PTR [eax]
100006d1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100006d4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
100006d7:	83 c1 24             	add    ecx,0x24
100006da:	89 14 88             	mov    DWORD PTR [eax+ecx*4],edx
100006dd:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
100006e0:	8b 10                	mov    edx,DWORD PTR [eax]
100006e2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100006e5:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
100006e8:	81 c1 a4 00 00 00    	add    ecx,0xa4
100006ee:	89 14 88             	mov    DWORD PTR [eax+ecx*4],edx
100006f1:	eb 06                	jmp    100006f9 <getFontRegion(int, int, bool*, int*, int*)+0x17f>
100006f3:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100006f6:	c6 00 01             	mov    BYTE PTR [eax],0x1
100006f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006fc:	89 c3                	mov    ebx,eax
100006fe:	8d 45 88             	lea    eax,[ebp-0x78]
10000701:	ba 07 00 00 00       	mov    edx,0x7
10000706:	89 df                	mov    edi,ebx
10000708:	89 c6                	mov    esi,eax
1000070a:	89 d1                	mov    ecx,edx
1000070c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000070e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000711:	8d 65 f4             	lea    esp,[ebp-0xc]
10000714:	5b                   	pop    ebx
10000715:	5e                   	pop    esi
10000716:	5f                   	pop    edi
10000717:	5d                   	pop    ebp
10000718:	c2 04 00             	ret    0x4

1000071b <initFonts()>:
1000071b:	55                   	push   ebp
1000071c:	89 e5                	mov    ebp,esp
1000071e:	83 ec 08             	sub    esp,0x8
10000721:	e8 fc ff ff ff       	call   10000722 <initFonts()+0x7>	10000722: R_386_PC32	loadLegacyFonts()
10000726:	90                   	nop
10000727:	c9                   	leave  
10000728:	c3                   	ret    

10000729 <loadFont(FontStyle)>:
10000729:	55                   	push   ebp
1000072a:	89 e5                	mov    ebp,esp
1000072c:	57                   	push   edi
1000072d:	56                   	push   esi
1000072e:	53                   	push   ebx
1000072f:	83 ec 0c             	sub    esp,0xc
10000732:	83 ec 08             	sub    esp,0x8
10000735:	81 ec 88 00 00 00    	sub    esp,0x88
1000073b:	89 e0                	mov    eax,esp
1000073d:	89 c2                	mov    edx,eax
1000073f:	8d 5d 08             	lea    ebx,[ebp+0x8]
10000742:	b8 22 00 00 00       	mov    eax,0x22
10000747:	89 d7                	mov    edi,edx
10000749:	89 de                	mov    esi,ebx
1000074b:	89 c1                	mov    ecx,eax
1000074d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000074f:	e8 fc ff ff ff       	call   10000750 <loadFont(FontStyle)+0x27>	10000750: R_386_PC32	getFontHandle(FontStyle)
10000754:	81 c4 90 00 00 00    	add    esp,0x90
1000075a:	8d 65 f4             	lea    esp,[ebp-0xc]
1000075d:	5b                   	pop    ebx
1000075e:	5e                   	pop    esi
1000075f:	5f                   	pop    edi
10000760:	5d                   	pop    ebp
10000761:	c3                   	ret    

10000762 <reverse(unsigned char)>:
10000762:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
10000766:	c0 c0 04             	rol    al,0x4
10000769:	0f b6 c0             	movzx  eax,al
1000076c:	89 c2                	mov    edx,eax
1000076e:	c1 e0 02             	shl    eax,0x2
10000771:	c1 fa 02             	sar    edx,0x2
10000774:	83 e0 cc             	and    eax,0xffffffcc
10000777:	83 e2 33             	and    edx,0x33
1000077a:	09 c2                	or     edx,eax
1000077c:	0f b6 d2             	movzx  edx,dl
1000077f:	89 d0                	mov    eax,edx
10000781:	01 d2                	add    edx,edx
10000783:	d1 f8                	sar    eax,1
10000785:	83 e2 aa             	and    edx,0xffffffaa
10000788:	83 e0 55             	and    eax,0x55
1000078b:	09 d0                	or     eax,edx
1000078d:	c3                   	ret    

1000078e <loadLegacyFonts()>:
1000078e:	57                   	push   edi
1000078f:	b9 10 10 00 00       	mov    ecx,0x1010
10000794:	56                   	push   esi
10000795:	bf 00 00 00 00       	mov    edi,0x0	10000796: R_386_32	FONT
1000079a:	53                   	push   ebx
1000079b:	be 00 00 00 00       	mov    esi,0x0	1000079c: R_386_32	systemFontBuiltin
100007a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100007a2:	b9 00 02 00 00       	mov    ecx,0x200
100007a7:	0f be 81 10 00 00 00 	movsx  eax,BYTE PTR [ecx+0x10]	100007aa: R_386_32	FONT
100007ae:	8a 91 1f 00 00 00    	mov    dl,BYTE PTR [ecx+0x1f]	100007b0: R_386_32	FONT
100007b4:	6b f0 1c             	imul   esi,eax,0x1c
100007b7:	88 90 00 00 00 00    	mov    BYTE PTR [eax+0x0],dl	100007b9: R_386_32	FontWidths
100007bd:	31 db                	xor    ebx,ebx
100007bf:	0f b6 84 19 11 00 00 00 	movzx  eax,BYTE PTR [ecx+ebx*1+0x11]	100007c3: R_386_32	FONT
100007c7:	50                   	push   eax
100007c8:	e8 fc ff ff ff       	call   100007c9 <loadLegacyFonts()+0x3b>	100007c9: R_386_PC32	reverse(unsigned char)
100007cd:	5a                   	pop    edx
100007ce:	0f b6 c0             	movzx  eax,al
100007d1:	66 89 84 5e 00 00 00 00 	mov    WORD PTR [esi+ebx*2+0x0],ax	100007d5: R_386_32	Fonts
100007d9:	43                   	inc    ebx
100007da:	83 fb 0e             	cmp    ebx,0xe
100007dd:	75 e0                	jne    100007bf <loadLegacyFonts()+0x31>
100007df:	83 c1 10             	add    ecx,0x10
100007e2:	81 f9 00 08 00 00    	cmp    ecx,0x800
100007e8:	75 bd                	jne    100007a7 <loadLegacyFonts()+0x19>
100007ea:	5b                   	pop    ebx
100007eb:	5e                   	pop    esi
100007ec:	5f                   	pop    edi
100007ed:	c3                   	ret    

100007ee <getLegacyFontRegion(Font*, int, int*, int*)>:
100007ee:	55                   	push   ebp
100007ef:	b9 38 00 00 00       	mov    ecx,0x38
100007f4:	57                   	push   edi
100007f5:	56                   	push   esi
100007f6:	53                   	push   ebx
100007f7:	81 ec fc 00 00 00    	sub    esp,0xfc
100007fd:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
10000804:	8d 74 24 10          	lea    esi,[esp+0x10]
10000808:	8b 9a 84 00 00 00    	mov    ebx,DWORD PTR [edx+0x84]
1000080e:	89 f7                	mov    edi,esi
10000810:	89 d8                	mov    eax,ebx
10000812:	8b b2 8c 00 00 00    	mov    esi,DWORD PTR [edx+0x8c]
10000818:	83 e0 02             	and    eax,0x2
1000081b:	69 d6 e4 1b 00 00    	imul   edx,esi,0x1be4
10000821:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000825:	83 e3 01             	and    ebx,0x1
10000828:	31 c0                	xor    eax,eax
1000082a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000082c:	6b 84 24 18 01 00 00 1c 	imul   eax,DWORD PTR [esp+0x118],0x1c
10000834:	01 d0                	add    eax,edx
10000836:	31 d2                	xor    edx,edx
10000838:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000083c:	31 c0                	xor    eax,eax
1000083e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
10000843:	74 0a                	je     1000084f <getLegacyFontRegion(Font*, int, int*, int*)+0x61>
10000845:	b8 0e 00 00 00       	mov    eax,0xe
1000084a:	29 d0                	sub    eax,edx
1000084c:	c1 f8 02             	sar    eax,0x2
1000084f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10000853:	89 d5                	mov    ebp,edx
10000855:	0f b6 bc 57 00 00 00 00 	movzx  edi,BYTE PTR [edi+edx*2+0x0]	10000859: R_386_32	Fonts
1000085d:	c1 e5 04             	shl    ebp,0x4
10000860:	8d 0c 28             	lea    ecx,[eax+ebp*1]
10000863:	8d 6c 28 08          	lea    ebp,[eax+ebp*1+0x8]
10000867:	89 f8                	mov    eax,edi
10000869:	83 e7 01             	and    edi,0x1
1000086c:	0f b6 c0             	movzx  eax,al
1000086f:	74 0e                	je     1000087f <getLegacyFontRegion(Font*, int, int*, int*)+0x91>
10000871:	c6 44 0c 10 01       	mov    BYTE PTR [esp+ecx*1+0x10],0x1
10000876:	85 db                	test   ebx,ebx
10000878:	74 05                	je     1000087f <getLegacyFontRegion(Font*, int, int*, int*)+0x91>
1000087a:	c6 44 0c 11 01       	mov    BYTE PTR [esp+ecx*1+0x11],0x1
1000087f:	d1 f8                	sar    eax,1
10000881:	41                   	inc    ecx
10000882:	89 c7                	mov    edi,eax
10000884:	39 cd                	cmp    ebp,ecx
10000886:	75 df                	jne    10000867 <getLegacyFontRegion(Font*, int, int*, int*)+0x79>
10000888:	42                   	inc    edx
10000889:	83 fa 0e             	cmp    edx,0xe
1000088c:	75 ae                	jne    1000083c <getLegacyFontRegion(Font*, int, int*, int*)+0x4e>
1000088e:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
10000895:	69 f6 ff 00 00 00    	imul   esi,esi,0xff
1000089b:	0f b6 84 30 00 00 00 00 	movzx  eax,BYTE PTR [eax+esi*1+0x0]	1000089f: R_386_32	FontWidths
100008a3:	01 c3                	add    ebx,eax
100008a5:	8b 84 24 1c 01 00 00 	mov    eax,DWORD PTR [esp+0x11c]
100008ac:	89 18                	mov    DWORD PTR [eax],ebx
100008ae:	8b 84 24 20 01 00 00 	mov    eax,DWORD PTR [esp+0x120]
100008b5:	c7 00 0e 00 00 00    	mov    DWORD PTR [eax],0xe
100008bb:	50                   	push   eax
100008bc:	50                   	push   eax
100008bd:	6a 0e                	push   0xe
100008bf:	6a 10                	push   0x10
100008c1:	8d 44 24 20          	lea    eax,[esp+0x20]
100008c5:	50                   	push   eax
100008c6:	6a 00                	push   0x0
100008c8:	6a 00                	push   0x0
100008ca:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
100008d1:	e8 fc ff ff ff       	call   100008d2 <getLegacyFontRegion(Font*, int, int*, int*)+0xe4>	100008d2: R_386_PC32	createTightFontRegion(int, int, unsigned char*, int, int)
100008d6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
100008dd:	81 c4 18 01 00 00    	add    esp,0x118
100008e3:	5b                   	pop    ebx
100008e4:	5e                   	pop    esi
100008e5:	5f                   	pop    edi
100008e6:	5d                   	pop    ebp
100008e7:	c2 04 00             	ret    0x4

100008ea <loadCursorFile(char const*)>:
100008ea:	57                   	push   edi
100008eb:	56                   	push   esi
100008ec:	53                   	push   ebx
100008ed:	83 ec 2c             	sub    esp,0x2c
100008f0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
100008f4:	68 14 01 00 00       	push   0x114
100008f9:	e8 fc ff ff ff       	call   100008fa <loadCursorFile(char const*)+0x10>	100008fa: R_386_PC32	malloc
100008fe:	83 c4 0c             	add    esp,0xc
10000901:	89 c6                	mov    esi,eax
10000903:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000905: R_386_32	kernelProcess
10000909:	53                   	push   ebx
1000090a:	50                   	push   eax
1000090b:	e8 fc ff ff ff       	call   1000090c <loadCursorFile(char const*)+0x22>	1000090c: R_386_PC32	File::File(char const*, Process*)
10000910:	5a                   	pop    edx
10000911:	59                   	pop    ecx
10000912:	6a 01                	push   0x1
10000914:	56                   	push   esi
10000915:	e8 fc ff ff ff       	call   10000916 <loadCursorFile(char const*)+0x2c>	10000916: R_386_PC32	File::open(FileOpenMode)
1000091a:	83 c4 10             	add    esp,0x10
1000091d:	85 c0                	test   eax,eax
1000091f:	74 0a                	je     1000092b <loadCursorFile(char const*)+0x41>
10000921:	83 ec 0c             	sub    esp,0xc
10000924:	68 38 8f 00 10       	push   0x10008f38	10000925: R_386_32	.text
10000929:	eb 5b                	jmp    10000986 <loadCursorFile(char const*)+0x9c>
1000092b:	50                   	push   eax
1000092c:	8d 44 24 17          	lea    eax,[esp+0x17]
10000930:	50                   	push   eax
10000931:	8d 44 24 20          	lea    eax,[esp+0x20]
10000935:	50                   	push   eax
10000936:	56                   	push   esi
10000937:	e8 fc ff ff ff       	call   10000938 <loadCursorFile(char const*)+0x4e>	10000938: R_386_PC32	File::stat(unsigned long long*, bool*)
1000093c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
10000940:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10000944:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
10000948:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000094c:	58                   	pop    eax
1000094d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10000951:	e8 fc ff ff ff       	call   10000952 <loadCursorFile(char const*)+0x68>	10000952: R_386_PC32	malloc
10000956:	89 c3                	mov    ebx,eax
10000958:	58                   	pop    eax
10000959:	8b 06                	mov    eax,DWORD PTR [esi]
1000095b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
1000095f:	51                   	push   ecx
10000960:	53                   	push   ebx
10000961:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000965:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000969:	56                   	push   esi
1000096a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
1000096d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10000971:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10000975:	83 c4 20             	add    esp,0x20
10000978:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
1000097c:	74 17                	je     10000995 <loadCursorFile(char const*)+0xab>
1000097e:	83 ec 0c             	sub    esp,0xc
10000981:	68 4c 8f 00 10       	push   0x10008f4c	10000982: R_386_32	.text
10000986:	e8 fc ff ff ff       	call   10000987 <loadCursorFile(char const*)+0x9d>	10000987: R_386_PC32	Dbg::kprintf(char const*, ...)
1000098b:	83 c4 10             	add    esp,0x10
1000098e:	83 c4 20             	add    esp,0x20
10000991:	5b                   	pop    ebx
10000992:	5e                   	pop    esi
10000993:	5f                   	pop    edi
10000994:	c3                   	ret    
10000995:	6a 00                	push   0x0
10000997:	68 04 01 00 00       	push   0x104
1000099c:	52                   	push   edx
1000099d:	50                   	push   eax
1000099e:	e8 fc ff ff ff       	call   1000099f <loadCursorFile(char const*)+0xb5>	1000099f: R_386_PC32	__udivdi3
100009a3:	83 c4 10             	add    esp,0x10
100009a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100009aa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
100009b1:	8d 04 83             	lea    eax,[ebx+eax*4]
100009b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100009b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100009bc:	39 14 24             	cmp    DWORD PTR [esp],edx
100009bf:	0f 8d f8 00 00 00    	jge    10000abd <loadCursorFile(char const*)+0x1d3>
100009c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
100009c8:	8d 34 83             	lea    esi,[ebx+eax*4]
100009cb:	50                   	push   eax
100009cc:	6a 04                	push   0x4
100009ce:	68 60 8f 00 10       	push   0x10008f60	100009cf: R_386_32	.text
100009d3:	56                   	push   esi
100009d4:	e8 fc ff ff ff       	call   100009d5 <loadCursorFile(char const*)+0xeb>	100009d5: R_386_PC32	memcmp
100009d9:	83 c4 10             	add    esp,0x10
100009dc:	85 c0                	test   eax,eax
100009de:	0f 84 b8 00 00 00    	je     10000a9c <loadCursorFile(char const*)+0x1b2>
100009e4:	50                   	push   eax
100009e5:	6a 04                	push   0x4
100009e7:	68 65 8f 00 10       	push   0x10008f65	100009e8: R_386_32	.text
100009ec:	56                   	push   esi
100009ed:	e8 fc ff ff ff       	call   100009ee <loadCursorFile(char const*)+0x104>	100009ee: R_386_PC32	memcmp
100009f2:	83 c4 10             	add    esp,0x10
100009f5:	85 c0                	test   eax,eax
100009f7:	74 7b                	je     10000a74 <loadCursorFile(char const*)+0x18a>
100009f9:	50                   	push   eax
100009fa:	6a 04                	push   0x4
100009fc:	68 6a 8f 00 10       	push   0x10008f6a	100009fd: R_386_32	.text
10000a01:	56                   	push   esi
10000a02:	e8 fc ff ff ff       	call   10000a03 <loadCursorFile(char const*)+0x119>	10000a03: R_386_PC32	memcmp
10000a07:	83 c4 10             	add    esp,0x10
10000a0a:	85 c0                	test   eax,eax
10000a0c:	74 6d                	je     10000a7b <loadCursorFile(char const*)+0x191>
10000a0e:	57                   	push   edi
10000a0f:	6a 04                	push   0x4
10000a11:	68 6f 8f 00 10       	push   0x10008f6f	10000a12: R_386_32	.text
10000a16:	56                   	push   esi
10000a17:	e8 fc ff ff ff       	call   10000a18 <loadCursorFile(char const*)+0x12e>	10000a18: R_386_PC32	memcmp
10000a1c:	83 c4 10             	add    esp,0x10
10000a1f:	85 c0                	test   eax,eax
10000a21:	74 5f                	je     10000a82 <loadCursorFile(char const*)+0x198>
10000a23:	51                   	push   ecx
10000a24:	6a 04                	push   0x4
10000a26:	68 74 8f 00 10       	push   0x10008f74	10000a27: R_386_32	.text
10000a2b:	56                   	push   esi
10000a2c:	e8 fc ff ff ff       	call   10000a2d <loadCursorFile(char const*)+0x143>	10000a2d: R_386_PC32	memcmp
10000a31:	83 c4 10             	add    esp,0x10
10000a34:	85 c0                	test   eax,eax
10000a36:	74 51                	je     10000a89 <loadCursorFile(char const*)+0x19f>
10000a38:	52                   	push   edx
10000a39:	6a 04                	push   0x4
10000a3b:	68 79 8f 00 10       	push   0x10008f79	10000a3c: R_386_32	.text
10000a40:	56                   	push   esi
10000a41:	e8 fc ff ff ff       	call   10000a42 <loadCursorFile(char const*)+0x158>	10000a42: R_386_PC32	memcmp
10000a46:	83 c4 10             	add    esp,0x10
10000a49:	85 c0                	test   eax,eax
10000a4b:	74 43                	je     10000a90 <loadCursorFile(char const*)+0x1a6>
10000a4d:	50                   	push   eax
10000a4e:	6a 04                	push   0x4
10000a50:	68 7e 8f 00 10       	push   0x10008f7e	10000a51: R_386_32	.text
10000a55:	56                   	push   esi
10000a56:	e8 fc ff ff ff       	call   10000a57 <loadCursorFile(char const*)+0x16d>	10000a57: R_386_PC32	memcmp
10000a5b:	83 c4 10             	add    esp,0x10
10000a5e:	85 c0                	test   eax,eax
10000a60:	74 35                	je     10000a97 <loadCursorFile(char const*)+0x1ad>
10000a62:	83 ec 0c             	sub    esp,0xc
10000a65:	68 83 8f 00 10       	push   0x10008f83	10000a66: R_386_32	.text
10000a6a:	e8 fc ff ff ff       	call   10000a6b <loadCursorFile(char const*)+0x181>	10000a6b: R_386_PC32	Dbg::kprintf(char const*, ...)
10000a6f:	83 c4 10             	add    esp,0x10
10000a72:	eb 49                	jmp    10000abd <loadCursorFile(char const*)+0x1d3>
10000a74:	b8 00 02 00 00       	mov    eax,0x200
10000a79:	eb 21                	jmp    10000a9c <loadCursorFile(char const*)+0x1b2>
10000a7b:	b8 00 03 00 00       	mov    eax,0x300
10000a80:	eb 1a                	jmp    10000a9c <loadCursorFile(char const*)+0x1b2>
10000a82:	b8 00 01 00 00       	mov    eax,0x100
10000a87:	eb 13                	jmp    10000a9c <loadCursorFile(char const*)+0x1b2>
10000a89:	b8 00 04 00 00       	mov    eax,0x400
10000a8e:	eb 0c                	jmp    10000a9c <loadCursorFile(char const*)+0x1b2>
10000a90:	b8 00 05 00 00       	mov    eax,0x500
10000a95:	eb 05                	jmp    10000a9c <loadCursorFile(char const*)+0x1b2>
10000a97:	b8 00 06 00 00       	mov    eax,0x600
10000a9c:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10000a9e: R_386_32	___mouse_data
10000aa2:	b9 00 01 00 00       	mov    ecx,0x100
10000aa7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10000aab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000aad:	ff 04 24             	inc    DWORD PTR [esp]
10000ab0:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10000ab8:	e9 fb fe ff ff       	jmp    100009b8 <loadCursorFile(char const*)+0xce>
10000abd:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
10000ac1:	83 c4 20             	add    esp,0x20
10000ac4:	5b                   	pop    ebx
10000ac5:	5e                   	pop    esi
10000ac6:	5f                   	pop    edi
10000ac7:	e9 fc ff ff ff       	jmp    10000ac8 <loadCursorFile(char const*)+0x1de>	10000ac8: R_386_PC32	free

10000acc <mouseInit(Video*)>:
10000acc:	57                   	push   edi
10000acd:	bf 00 00 00 00       	mov    edi,0x0	10000ace: R_386_32	tightMouseRegionOld
10000ad2:	56                   	push   esi
10000ad3:	53                   	push   ebx
10000ad4:	83 ec 2c             	sub    esp,0x2c
10000ad7:	68 97 8f 00 10       	push   0x10008f97	10000ad8: R_386_32	.text
10000adc:	8d 5c 24 14          	lea    ebx,[esp+0x14]
10000ae0:	e8 fc ff ff ff       	call   10000ae1 <mouseInit(Video*)+0x15>	10000ae1: R_386_PC32	loadCursorFile(char const*)
10000ae5:	89 de                	mov    esi,ebx
10000ae7:	68 00 00 00 00       	push   0x0	10000ae8: R_386_32	___mouse_data
10000aec:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000aee: R_386_32	cursorOffset
10000af6:	6a 00                	push   0x0
10000af8:	6a 00                	push   0x0
10000afa:	53                   	push   ebx
10000afb:	e8 fc ff ff ff       	call   10000afc <mouseInit(Video*)+0x30>	10000afc: R_386_PC32	createTightCursorRegion(int, int, unsigned int*)
10000b00:	a1 00 00 00 00       	mov    eax,ds:0x0	10000b01: R_386_32	cursorOffset
10000b05:	83 c4 1c             	add    esp,0x1c
10000b08:	05 00 00 00 00       	add    eax,0x0	10000b09: R_386_32	___mouse_data
10000b0d:	b9 19 00 00 00       	mov    ecx,0x19
10000b12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000b14:	50                   	push   eax
10000b15:	89 de                	mov    esi,ebx
10000b17:	6a 00                	push   0x0
10000b19:	bf 00 00 00 00       	mov    edi,0x0	10000b1a: R_386_32	tightMouseRegionNew
10000b1e:	6a 00                	push   0x0
10000b20:	53                   	push   ebx
10000b21:	e8 fc ff ff ff       	call   10000b22 <mouseInit(Video*)+0x56>	10000b22: R_386_PC32	createTightCursorRegion(int, int, unsigned int*)
10000b26:	b9 19 00 00 00       	mov    ecx,0x19
10000b2b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000b2d:	83 c4 2c             	add    esp,0x2c
10000b30:	5b                   	pop    ebx
10000b31:	5e                   	pop    esi
10000b32:	5f                   	pop    edi
10000b33:	c3                   	ret    

10000b34 <hideCursor(Video*, int, int, int, int)>:
10000b34:	57                   	push   edi
10000b35:	b8 00 00 00 00       	mov    eax,0x0	10000b36: R_386_32	tightMouseRegionOld
10000b3a:	56                   	push   esi
10000b3b:	be 00 00 00 00       	mov    esi,0x0	10000b3c: R_386_32	tightMouseRegionNew
10000b40:	53                   	push   ebx
10000b41:	83 ec 30             	sub    esp,0x30
10000b44:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
10000b48:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10000b4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10000b50:	8d 5c 24 14          	lea    ebx,[esp+0x14]
10000b54:	89 0d 10 00 00 00    	mov    DWORD PTR ds:0x10,ecx	10000b56: R_386_32	tightMouseRegionOld
10000b5a:	83 ec 20             	sub    esp,0x20
10000b5d:	8b 4c 24 68          	mov    ecx,DWORD PTR [esp+0x68]
10000b61:	89 0d 14 00 00 00    	mov    DWORD PTR ds:0x14,ecx	10000b63: R_386_32	tightMouseRegionOld
10000b67:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10000b6b:	89 0d 10 00 00 00    	mov    DWORD PTR ds:0x10,ecx	10000b6d: R_386_32	tightMouseRegionNew
10000b71:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
10000b75:	89 e7                	mov    edi,esp
10000b77:	89 0d 14 00 00 00    	mov    DWORD PTR ds:0x14,ecx	10000b79: R_386_32	tightMouseRegionNew
10000b7d:	83 ec 1c             	sub    esp,0x1c
10000b80:	b9 07 00 00 00       	mov    ecx,0x7
10000b85:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b87:	89 c6                	mov    esi,eax
10000b89:	89 e7                	mov    edi,esp
10000b8b:	b9 07 00 00 00       	mov    ecx,0x7
10000b90:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b92:	53                   	push   ebx
10000b93:	89 de                	mov    esi,ebx
10000b95:	e8 fc ff ff ff       	call   10000b96 <hideCursor(Video*, int, int, int, int)+0x62>	10000b96: R_386_PC32	getRegionDifference(Region, Region)
10000b9a:	b9 07 00 00 00       	mov    ecx,0x7
10000b9f:	83 c4 30             	add    esp,0x30
10000ba2:	68 80 80 00 00       	push   0x8080
10000ba7:	83 ec 1c             	sub    esp,0x1c
10000baa:	89 e7                	mov    edi,esp
10000bac:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000bae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
10000bb2:	52                   	push   edx
10000bb3:	e8 fc ff ff ff       	call   10000bb4 <hideCursor(Video*, int, int, int, int)+0x80>	10000bb4: R_386_PC32	fillRegion(Video*, Region, unsigned int)
10000bb8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10000bbc:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10000bc0:	83 c4 60             	add    esp,0x60
10000bc3:	5b                   	pop    ebx
10000bc4:	5e                   	pop    esi
10000bc5:	5f                   	pop    edi
10000bc6:	e9 fc ff ff ff       	jmp    10000bc7 <hideCursor(Video*, int, int, int, int)+0x93>	10000bc7: R_386_PC32	free

10000bcb <showCursor(Video*)>:
10000bcb:	83 ec 0c             	sub    esp,0xc
10000bce:	a1 00 00 00 00       	mov    eax,ds:0x0	10000bcf: R_386_32	cursorOffset
10000bd3:	05 00 00 00 00       	add    eax,0x0	10000bd4: R_386_32	___mouse_data
10000bd8:	50                   	push   eax
10000bd9:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000bdb: R_386_32	mouseY
10000bdf:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000be1: R_386_32	mouseX
10000be5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000be9:	e8 fc ff ff ff       	call   10000bea <showCursor(Video*)+0x1f>	10000bea: R_386_PC32	videoDrawCursor(Video*, int, int, unsigned int*)
10000bee:	83 c4 1c             	add    esp,0x1c
10000bf1:	c3                   	ret    

10000bf2 <changeCursor(Video*, int)>:
10000bf2:	57                   	push   edi
10000bf3:	bf 00 00 00 00       	mov    edi,0x0	10000bf4: R_386_32	tightMouseRegionNew
10000bf8:	56                   	push   esi
10000bf9:	53                   	push   ebx
10000bfa:	83 ec 4c             	sub    esp,0x4c
10000bfd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10000c01:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000c03: R_386_32	tightMouseRegionNew
10000c07:	a3 00 00 00 00       	mov    ds:0x0,eax	10000c08: R_386_32	cursorOffset
10000c0c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
10000c10:	a1 00 00 00 00       	mov    eax,ds:0x0	10000c11: R_386_32	mouseX
10000c15:	89 de                	mov    esi,ebx
10000c17:	a3 10 00 00 00       	mov    ds:0x10,eax	10000c18: R_386_32	tightMouseRegionOld
10000c1c:	a1 00 00 00 00       	mov    eax,ds:0x0	10000c1d: R_386_32	mouseY
10000c21:	a3 14 00 00 00       	mov    ds:0x14,eax	10000c22: R_386_32	tightMouseRegionOld
10000c26:	e8 fc ff ff ff       	call   10000c27 <changeCursor(Video*, int)+0x35>	10000c27: R_386_PC32	free
10000c2b:	a1 00 00 00 00       	mov    eax,ds:0x0	10000c2c: R_386_32	cursorOffset
10000c30:	05 00 00 00 00       	add    eax,0x0	10000c31: R_386_32	___mouse_data
10000c35:	50                   	push   eax
10000c36:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000c38: R_386_32	mouseY
10000c3c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000c3e: R_386_32	mouseX
10000c42:	53                   	push   ebx
10000c43:	e8 fc ff ff ff       	call   10000c44 <changeCursor(Video*, int)+0x52>	10000c44: R_386_PC32	createTightCursorRegion(int, int, unsigned int*)
10000c48:	b9 19 00 00 00       	mov    ecx,0x19
10000c4d:	8d 44 24 24          	lea    eax,[esp+0x24]
10000c51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000c53:	83 ec 14             	sub    esp,0x14
10000c56:	b9 07 00 00 00       	mov    ecx,0x7
10000c5b:	89 e7                	mov    edi,esp
10000c5d:	be 00 00 00 00       	mov    esi,0x0	10000c5e: R_386_32	tightMouseRegionNew
10000c62:	83 ec 1c             	sub    esp,0x1c
10000c65:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000c67:	89 e7                	mov    edi,esp
10000c69:	b9 07 00 00 00       	mov    ecx,0x7
10000c6e:	be 00 00 00 00       	mov    esi,0x0	10000c6f: R_386_32	tightMouseRegionOld
10000c73:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000c75:	50                   	push   eax
10000c76:	e8 fc ff ff ff       	call   10000c77 <changeCursor(Video*, int)+0x85>	10000c77: R_386_PC32	getRegionDifference(Region, Region)
10000c7b:	b9 07 00 00 00       	mov    ecx,0x7
10000c80:	83 c4 40             	add    esp,0x40
10000c83:	68 80 80 00 00       	push   0x8080
10000c88:	83 ec 1c             	sub    esp,0x1c
10000c8b:	8d 44 24 34          	lea    eax,[esp+0x34]
10000c8f:	89 e7                	mov    edi,esp
10000c91:	89 c6                	mov    esi,eax
10000c93:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000c95:	89 de                	mov    esi,ebx
10000c97:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
10000c9b:	bf 00 00 00 00       	mov    edi,0x0	10000c9c: R_386_32	tightMouseRegionOld
10000ca0:	e8 fc ff ff ff       	call   10000ca1 <changeCursor(Video*, int)+0xaf>	10000ca1: R_386_PC32	fillRegion(Video*, Region, unsigned int)
10000ca5:	83 c4 24             	add    esp,0x24
10000ca8:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000caa: R_386_32	tightMouseRegionOld
10000cae:	e8 fc ff ff ff       	call   10000caf <changeCursor(Video*, int)+0xbd>	10000caf: R_386_PC32	free
10000cb3:	a1 00 00 00 00       	mov    eax,ds:0x0	10000cb4: R_386_32	cursorOffset
10000cb8:	05 00 00 00 00       	add    eax,0x0	10000cb9: R_386_32	___mouse_data
10000cbd:	50                   	push   eax
10000cbe:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000cc0: R_386_32	mouseY
10000cc4:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000cc6: R_386_32	mouseX
10000cca:	53                   	push   ebx
10000ccb:	e8 fc ff ff ff       	call   10000ccc <changeCursor(Video*, int)+0xda>	10000ccc: R_386_PC32	createTightCursorRegion(int, int, unsigned int*)
10000cd0:	b9 19 00 00 00       	mov    ecx,0x19
10000cd5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000cd7:	83 c4 5c             	add    esp,0x5c
10000cda:	5b                   	pop    ebx
10000cdb:	5e                   	pop    esi
10000cdc:	5f                   	pop    edi
10000cdd:	c3                   	ret    

10000cde <handleMouse(Video*, int, int, int, int, int)>:
10000cde:	57                   	push   edi
10000cdf:	56                   	push   esi
10000ce0:	53                   	push   ebx
10000ce1:	83 ec 40             	sub    esp,0x40
10000ce4:	a1 00 00 00 00       	mov    eax,ds:0x0	10000ce5: R_386_32	mouseX
10000ce9:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10000ced:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000cf1:	a1 00 00 00 00       	mov    eax,ds:0x0	10000cf2: R_386_32	mouseY
10000cf6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10000cfa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10000cfe:	03 54 24 54          	add    edx,DWORD PTR [esp+0x54]
10000d02:	a1 00 00 00 00       	mov    eax,ds:0x0	10000d03: R_386_32	mouseButtons
10000d07:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10000d09: R_386_32	mouseX
10000d0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000d11:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000d13: R_386_32	mouseButtons
10000d17:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10000d1b:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
10000d1f:	85 d2                	test   edx,edx
10000d21:	a3 00 00 00 00       	mov    ds:0x0,eax	10000d22: R_386_32	mouseY
10000d26:	79 0a                	jns    10000d32 <handleMouse(Video*, int, int, int, int, int)+0x54>
10000d28:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000d2a: R_386_32	mouseX
10000d32:	85 c0                	test   eax,eax
10000d34:	79 0a                	jns    10000d40 <handleMouse(Video*, int, int, int, int, int)+0x62>
10000d36:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000d38: R_386_32	mouseY
10000d40:	83 ec 0c             	sub    esp,0xc
10000d43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
10000d47:	e8 fc ff ff ff       	call   10000d48 <handleMouse(Video*, int, int, int, int, int)+0x6a>	10000d48: R_386_PC32	Video::getWidth()
10000d4c:	83 c4 10             	add    esp,0x10
10000d4f:	3b 05 00 00 00 00    	cmp    eax,DWORD PTR ds:0x0	10000d51: R_386_32	mouseX
10000d55:	7f 15                	jg     10000d6c <handleMouse(Video*, int, int, int, int, int)+0x8e>
10000d57:	83 ec 0c             	sub    esp,0xc
10000d5a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
10000d5e:	e8 fc ff ff ff       	call   10000d5f <handleMouse(Video*, int, int, int, int, int)+0x81>	10000d5f: R_386_PC32	Video::getWidth()
10000d63:	83 c4 10             	add    esp,0x10
10000d66:	48                   	dec    eax
10000d67:	a3 00 00 00 00       	mov    ds:0x0,eax	10000d68: R_386_32	mouseX
10000d6c:	83 ec 0c             	sub    esp,0xc
10000d6f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
10000d73:	e8 fc ff ff ff       	call   10000d74 <handleMouse(Video*, int, int, int, int, int)+0x96>	10000d74: R_386_PC32	Video::getHeight()
10000d78:	83 c4 10             	add    esp,0x10
10000d7b:	3b 05 00 00 00 00    	cmp    eax,DWORD PTR ds:0x0	10000d7d: R_386_32	mouseY
10000d81:	7f 15                	jg     10000d98 <handleMouse(Video*, int, int, int, int, int)+0xba>
10000d83:	83 ec 0c             	sub    esp,0xc
10000d86:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
10000d8a:	e8 fc ff ff ff       	call   10000d8b <handleMouse(Video*, int, int, int, int, int)+0xad>	10000d8b: R_386_PC32	Video::getHeight()
10000d8f:	83 c4 10             	add    esp,0x10
10000d92:	48                   	dec    eax
10000d93:	a3 00 00 00 00       	mov    ds:0x0,eax	10000d94: R_386_32	mouseY
10000d98:	83 ec 0c             	sub    esp,0xc
10000d9b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000d9d: R_386_32	mouseY
10000da1:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000da3: R_386_32	mouseX
10000da7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10000dab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000daf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
10000db3:	e8 fc ff ff ff       	call   10000db4 <handleMouse(Video*, int, int, int, int, int)+0xd6>	10000db4: R_386_PC32	hideCursor(Video*, int, int, int, int)
10000db8:	8d 74 24 44          	lea    esi,[esp+0x44]
10000dbc:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10000dbe: R_386_32	desktopWindow
10000dc2:	83 c4 18             	add    esp,0x18
10000dc5:	53                   	push   ebx
10000dc6:	56                   	push   esi
10000dc7:	e8 fc ff ff ff       	call   10000dc8 <handleMouse(Video*, int, int, int, int, int)+0xea>	10000dc8: R_386_PC32	NFrame::_getRegion()
10000dcc:	b9 07 00 00 00       	mov    ecx,0x7
10000dd1:	83 ec 10             	sub    esp,0x10
10000dd4:	89 e7                	mov    edi,esp
10000dd6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000dd8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
10000ddc:	6a 01                	push   0x1
10000dde:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000de0: R_386_32	mouseY
10000de4:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000de6: R_386_32	mouseX
10000dea:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
10000dee:	53                   	push   ebx
10000def:	e8 fc ff ff ff       	call   10000df0 <handleMouse(Video*, int, int, int, int, int)+0x112>	10000df0: R_386_PC32	NFrame::getPixelOwner(Video*, int, int, bool, Region)
10000df4:	83 c4 24             	add    esp,0x24
10000df7:	89 c3                	mov    ebx,eax
10000df9:	50                   	push   eax
10000dfa:	e8 fc ff ff ff       	call   10000dfb <handleMouse(Video*, int, int, int, int, int)+0x11d>	10000dfb: R_386_PC32	NFrame::getHeight()
10000dff:	89 1c 24             	mov    DWORD PTR [esp],ebx
10000e02:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000e06:	e8 fc ff ff ff       	call   10000e07 <handleMouse(Video*, int, int, int, int, int)+0x129>	10000e07: R_386_PC32	NFrame::getWidth()
10000e0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
10000e0e:	89 c7                	mov    edi,eax
10000e10:	e8 fc ff ff ff       	call   10000e11 <handleMouse(Video*, int, int, int, int, int)+0x133>	10000e11: R_386_PC32	NFrame::getAbsY()
10000e15:	89 1c 24             	mov    DWORD PTR [esp],ebx
10000e18:	89 c6                	mov    esi,eax
10000e1a:	e8 fc ff ff ff       	call   10000e1b <handleMouse(Video*, int, int, int, int, int)+0x13d>	10000e1b: R_386_PC32	NFrame::getAbsX()
10000e1f:	5a                   	pop    edx
10000e20:	59                   	pop    ecx
10000e21:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10000e25:	52                   	push   edx
10000e26:	57                   	push   edi
10000e27:	56                   	push   esi
10000e28:	50                   	push   eax
10000e29:	53                   	push   ebx
10000e2a:	68 b6 8f 00 10       	push   0x10008fb6	10000e2b: R_386_32	.text
10000e2f:	e8 fc ff ff ff       	call   10000e30 <handleMouse(Video*, int, int, int, int, int)+0x152>	10000e30: R_386_PC32	Dbg::kprintf(char const*, ...)
10000e34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10000e38:	83 c4 20             	add    esp,0x20
10000e3b:	83 e0 01             	and    eax,0x1
10000e3e:	f6 44 24 64 01       	test   BYTE PTR [esp+0x64],0x1
10000e43:	0f 84 02 05 00 00    	je     1000134b <handleMouse(Video*, int, int, int, int, int)+0x66d>
10000e49:	85 c0                	test   eax,eax
10000e4b:	0f 85 4d 02 00 00    	jne    1000109e <handleMouse(Video*, int, int, int, int, int)+0x3c0>
10000e51:	a1 00 00 00 00       	mov    eax,ds:0x0	10000e52: R_386_32	milliTenthsSinceBoot
10000e56:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	10000e58: R_386_32	milliTenthsSinceBoot
10000e5c:	b9 a0 86 01 00       	mov    ecx,0x186a0
10000e61:	89 c6                	mov    esi,eax
10000e63:	89 d7                	mov    edi,edx
10000e65:	2b 35 30 00 01 10    	sub    esi,DWORD PTR ds:0x10010030	10000e67: R_386_32	.bss
10000e6b:	a3 30 00 01 10       	mov    ds:0x10010030,eax	10000e6c: R_386_32	.bss
10000e70:	1b 3d 34 00 01 10    	sbb    edi,DWORD PTR ds:0x10010034	10000e72: R_386_32	.bss
10000e76:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
10000e7a:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
10000e7e:	89 15 34 00 01 10    	mov    DWORD PTR ds:0x10010034,edx	10000e80: R_386_32	.bss
10000e84:	bf 0a 00 00 00       	mov    edi,0xa
10000e89:	83 ec 0c             	sub    esp,0xc
10000e8c:	a1 00 00 00 00       	mov    eax,ds:0x0	10000e8d: R_386_32	Phys::usablePages
10000e91:	c1 e0 02             	shl    eax,0x2
10000e94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000e98:	6a 00                	push   0x0
10000e9a:	a1 00 00 00 00       	mov    eax,ds:0x0	10000e9b: R_386_32	Phys::usedPages
10000e9f:	68 ff ff ff 00       	push   0xffffff
10000ea4:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10000eab:	89 f0                	mov    eax,esi
10000ead:	99                   	cdq    
10000eae:	f7 f9                	idiv   ecx
10000eb0:	99                   	cdq    
10000eb1:	f7 ff                	idiv   edi
10000eb3:	8d 42 30             	lea    eax,[edx+0x30]
10000eb6:	50                   	push   eax
10000eb7:	6a 00                	push   0x0
10000eb9:	6a 00                	push   0x0
10000ebb:	e8 fc ff ff ff       	call   10000ebc <handleMouse(Video*, int, int, int, int, int)+0x1de>	10000ebc: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000ec0:	83 c4 14             	add    esp,0x14
10000ec3:	89 f0                	mov    eax,esi
10000ec5:	6a 00                	push   0x0
10000ec7:	b9 10 27 00 00       	mov    ecx,0x2710
10000ecc:	68 ff ff ff 00       	push   0xffffff
10000ed1:	99                   	cdq    
10000ed2:	f7 f9                	idiv   ecx
10000ed4:	99                   	cdq    
10000ed5:	f7 ff                	idiv   edi
10000ed7:	8d 42 30             	lea    eax,[edx+0x30]
10000eda:	50                   	push   eax
10000edb:	6a 00                	push   0x0
10000edd:	6a 01                	push   0x1
10000edf:	e8 fc ff ff ff       	call   10000ee0 <handleMouse(Video*, int, int, int, int, int)+0x202>	10000ee0: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000ee4:	83 c4 14             	add    esp,0x14
10000ee7:	89 f0                	mov    eax,esi
10000ee9:	6a 00                	push   0x0
10000eeb:	b9 e8 03 00 00       	mov    ecx,0x3e8
10000ef0:	68 ff ff ff 00       	push   0xffffff
10000ef5:	99                   	cdq    
10000ef6:	f7 f9                	idiv   ecx
10000ef8:	99                   	cdq    
10000ef9:	f7 ff                	idiv   edi
10000efb:	8d 42 30             	lea    eax,[edx+0x30]
10000efe:	50                   	push   eax
10000eff:	6a 00                	push   0x0
10000f01:	6a 02                	push   0x2
10000f03:	e8 fc ff ff ff       	call   10000f04 <handleMouse(Video*, int, int, int, int, int)+0x226>	10000f04: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000f08:	83 c4 14             	add    esp,0x14
10000f0b:	b9 64 00 00 00       	mov    ecx,0x64
10000f10:	6a 00                	push   0x0
10000f12:	89 f0                	mov    eax,esi
10000f14:	68 ff ff ff 00       	push   0xffffff
10000f19:	99                   	cdq    
10000f1a:	f7 f9                	idiv   ecx
10000f1c:	99                   	cdq    
10000f1d:	f7 ff                	idiv   edi
10000f1f:	8d 42 30             	lea    eax,[edx+0x30]
10000f22:	50                   	push   eax
10000f23:	6a 00                	push   0x0
10000f25:	6a 03                	push   0x3
10000f27:	e8 fc ff ff ff       	call   10000f28 <handleMouse(Video*, int, int, int, int, int)+0x24a>	10000f28: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000f2c:	83 c4 14             	add    esp,0x14
10000f2f:	89 f0                	mov    eax,esi
10000f31:	6a 00                	push   0x0
10000f33:	99                   	cdq    
10000f34:	68 ff ff ff 00       	push   0xffffff
10000f39:	f7 ff                	idiv   edi
10000f3b:	89 d6                	mov    esi,edx
10000f3d:	99                   	cdq    
10000f3e:	f7 ff                	idiv   edi
10000f40:	8d 42 30             	lea    eax,[edx+0x30]
10000f43:	50                   	push   eax
10000f44:	6a 00                	push   0x0
10000f46:	6a 04                	push   0x4
10000f48:	e8 fc ff ff ff       	call   10000f49 <handleMouse(Video*, int, int, int, int, int)+0x26b>	10000f49: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000f4d:	83 c4 14             	add    esp,0x14
10000f50:	83 c6 30             	add    esi,0x30
10000f53:	6a 00                	push   0x0
10000f55:	68 ff ff ff 00       	push   0xffffff
10000f5a:	56                   	push   esi
10000f5b:	6a 00                	push   0x0
10000f5d:	6a 05                	push   0x5
10000f5f:	e8 fc ff ff ff       	call   10000f60 <handleMouse(Video*, int, int, int, int, int)+0x282>	10000f60: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000f64:	83 c4 14             	add    esp,0x14
10000f67:	6a 00                	push   0x0
10000f69:	68 ff ff ff 00       	push   0xffffff
10000f6e:	6a 2f                	push   0x2f
10000f70:	6a 00                	push   0x0
10000f72:	6a 06                	push   0x6
10000f74:	e8 fc ff ff ff       	call   10000f75 <handleMouse(Video*, int, int, int, int, int)+0x297>	10000f75: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000f79:	83 c4 14             	add    esp,0x14
10000f7c:	b9 a0 86 01 00       	mov    ecx,0x186a0
10000f81:	6a 00                	push   0x0
10000f83:	68 ff ff ff 00       	push   0xffffff
10000f88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000f8c:	99                   	cdq    
10000f8d:	f7 f9                	idiv   ecx
10000f8f:	99                   	cdq    
10000f90:	f7 ff                	idiv   edi
10000f92:	8d 42 30             	lea    eax,[edx+0x30]
10000f95:	50                   	push   eax
10000f96:	6a 00                	push   0x0
10000f98:	6a 07                	push   0x7
10000f9a:	e8 fc ff ff ff       	call   10000f9b <handleMouse(Video*, int, int, int, int, int)+0x2bd>	10000f9b: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000f9f:	83 c4 14             	add    esp,0x14
10000fa2:	b9 10 27 00 00       	mov    ecx,0x2710
10000fa7:	6a 00                	push   0x0
10000fa9:	68 ff ff ff 00       	push   0xffffff
10000fae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000fb2:	99                   	cdq    
10000fb3:	f7 f9                	idiv   ecx
10000fb5:	99                   	cdq    
10000fb6:	f7 ff                	idiv   edi
10000fb8:	8d 42 30             	lea    eax,[edx+0x30]
10000fbb:	50                   	push   eax
10000fbc:	6a 00                	push   0x0
10000fbe:	6a 08                	push   0x8
10000fc0:	e8 fc ff ff ff       	call   10000fc1 <handleMouse(Video*, int, int, int, int, int)+0x2e3>	10000fc1: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000fc5:	83 c4 14             	add    esp,0x14
10000fc8:	b9 e8 03 00 00       	mov    ecx,0x3e8
10000fcd:	6a 00                	push   0x0
10000fcf:	68 ff ff ff 00       	push   0xffffff
10000fd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000fd8:	99                   	cdq    
10000fd9:	f7 f9                	idiv   ecx
10000fdb:	99                   	cdq    
10000fdc:	f7 ff                	idiv   edi
10000fde:	8d 42 30             	lea    eax,[edx+0x30]
10000fe1:	50                   	push   eax
10000fe2:	6a 00                	push   0x0
10000fe4:	6a 09                	push   0x9
10000fe6:	e8 fc ff ff ff       	call   10000fe7 <handleMouse(Video*, int, int, int, int, int)+0x309>	10000fe7: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000feb:	83 c4 14             	add    esp,0x14
10000fee:	b9 64 00 00 00       	mov    ecx,0x64
10000ff3:	6a 00                	push   0x0
10000ff5:	68 ff ff ff 00       	push   0xffffff
10000ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000ffe:	99                   	cdq    
10000fff:	f7 f9                	idiv   ecx
10001001:	99                   	cdq    
10001002:	f7 ff                	idiv   edi
10001004:	83 c2 30             	add    edx,0x30
10001007:	52                   	push   edx
10001008:	6a 00                	push   0x0
1000100a:	6a 0a                	push   0xa
1000100c:	e8 fc ff ff ff       	call   1000100d <handleMouse(Video*, int, int, int, int, int)+0x32f>	1000100d: R_386_PC32	drawVGAChar(int, int, int, int, int)
10001011:	83 c4 14             	add    esp,0x14
10001014:	6a 00                	push   0x0
10001016:	68 ff ff ff 00       	push   0xffffff
1000101b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000101f:	99                   	cdq    
10001020:	f7 ff                	idiv   edi
10001022:	89 d6                	mov    esi,edx
10001024:	99                   	cdq    
10001025:	83 c6 30             	add    esi,0x30
10001028:	f7 ff                	idiv   edi
1000102a:	8d 42 30             	lea    eax,[edx+0x30]
1000102d:	50                   	push   eax
1000102e:	6a 00                	push   0x0
10001030:	6a 0b                	push   0xb
10001032:	e8 fc ff ff ff       	call   10001033 <handleMouse(Video*, int, int, int, int, int)+0x355>	10001033: R_386_PC32	drawVGAChar(int, int, int, int, int)
10001037:	83 c4 14             	add    esp,0x14
1000103a:	6a 00                	push   0x0
1000103c:	68 ff ff ff 00       	push   0xffffff
10001041:	56                   	push   esi
10001042:	6a 00                	push   0x0
10001044:	6a 0c                	push   0xc
10001046:	e8 fc ff ff ff       	call   10001047 <handleMouse(Video*, int, int, int, int, int)+0x369>	10001047: R_386_PC32	drawVGAChar(int, int, int, int, int)
1000104b:	83 c4 14             	add    esp,0x14
1000104e:	6a 00                	push   0x0
10001050:	68 ff ff ff 00       	push   0xffffff
10001055:	6a 20                	push   0x20
10001057:	6a 00                	push   0x0
10001059:	6a 0d                	push   0xd
1000105b:	e8 fc ff ff ff       	call   1000105c <handleMouse(Video*, int, int, int, int, int)+0x37e>	1000105c: R_386_PC32	drawVGAChar(int, int, int, int, int)
10001060:	83 c4 14             	add    esp,0x14
10001063:	6a 00                	push   0x0
10001065:	68 ff ff ff 00       	push   0xffffff
1000106a:	6a 4b                	push   0x4b
1000106c:	6a 00                	push   0x0
1000106e:	6a 0e                	push   0xe
10001070:	e8 fc ff ff ff       	call   10001071 <handleMouse(Video*, int, int, int, int, int)+0x393>	10001071: R_386_PC32	drawVGAChar(int, int, int, int, int)
10001075:	83 c4 14             	add    esp,0x14
10001078:	6a 00                	push   0x0
1000107a:	68 ff ff ff 00       	push   0xffffff
1000107f:	6a 42                	push   0x42
10001081:	6a 00                	push   0x0
10001083:	6a 0f                	push   0xf
10001085:	e8 fc ff ff ff       	call   10001086 <handleMouse(Video*, int, int, int, int, int)+0x3a8>	10001086: R_386_PC32	drawVGAChar(int, int, int, int, int)
1000108a:	83 c4 20             	add    esp,0x20
1000108d:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	1000108f: R_386_32	draggingWindow
10001094:	75 08                	jne    1000109e <handleMouse(Video*, int, int, int, int, int)+0x3c0>
10001096:	39 1d 00 00 00 00    	cmp    DWORD PTR ds:0x0,ebx	10001098: R_386_32	desktopWindow
1000109c:	75 07                	jne    100010a5 <handleMouse(Video*, int, int, int, int, int)+0x3c7>
1000109e:	31 d2                	xor    edx,edx
100010a0:	e9 5e 01 00 00       	jmp    10001203 <handleMouse(Video*, int, int, int, int, int)+0x525>
100010a5:	83 ec 0c             	sub    esp,0xc
100010a8:	53                   	push   ebx
100010a9:	e8 fc ff ff ff       	call   100010aa <handleMouse(Video*, int, int, int, int, int)+0x3cc>	100010aa: R_386_PC32	NFrame::raise()
100010ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
100010b1:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	100010b3: R_386_32	mouseX
100010b7:	e8 fc ff ff ff       	call   100010b8 <handleMouse(Video*, int, int, int, int, int)+0x3da>	100010b8: R_386_PC32	NFrame::getAbsX()
100010bc:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	100010be: R_386_32	mouseY
100010c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100010c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
100010c9:	e8 fc ff ff ff       	call   100010ca <handleMouse(Video*, int, int, int, int, int)+0x3ec>	100010ca: R_386_PC32	NFrame::getAbsY()
100010ce:	83 c4 10             	add    esp,0x10
100010d1:	29 c6                	sub    esi,eax
100010d3:	78 34                	js     10001109 <handleMouse(Video*, int, int, int, int, int)+0x42b>
100010d5:	83 ec 0c             	sub    esp,0xc
100010d8:	53                   	push   ebx
100010d9:	e8 fc ff ff ff       	call   100010da <handleMouse(Video*, int, int, int, int, int)+0x3fc>	100010da: R_386_PC32	NFrame::getTitlebarHeight()
100010de:	83 c4 10             	add    esp,0x10
100010e1:	39 f0                	cmp    eax,esi
100010e3:	7e 24                	jle    10001109 <handleMouse(Video*, int, int, int, int, int)+0x42b>
100010e5:	b8 b7 0b 00 00       	mov    eax,0xbb7
100010ea:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
100010ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100010f2:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
100010f6:	72 5e                	jb     10001156 <handleMouse(Video*, int, int, int, int, int)+0x478>
100010f8:	51                   	push   ecx
100010f9:	51                   	push   ecx
100010fa:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100010fe:	53                   	push   ebx
100010ff:	e8 fc ff ff ff       	call   10001100 <handleMouse(Video*, int, int, int, int, int)+0x422>	10001100: R_386_PC32	NFrame::toggleFullscreen(Video*)
10001104:	e9 df 00 00 00       	jmp    100011e8 <handleMouse(Video*, int, int, int, int, int)+0x50a>
10001109:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
1000110d:	83 ec 0c             	sub    esp,0xc
10001110:	53                   	push   ebx
10001111:	e8 fc ff ff ff       	call   10001112 <handleMouse(Video*, int, int, int, int, int)+0x434>	10001112: R_386_PC32	NFrame::getHeight()
10001116:	83 c4 10             	add    esp,0x10
10001119:	83 e8 14             	sub    eax,0x14
1000111c:	39 f0                	cmp    eax,esi
1000111e:	7e 5b                	jle    1000117b <handleMouse(Video*, int, int, int, int, int)+0x49d>
10001120:	83 ec 0c             	sub    esp,0xc
10001123:	53                   	push   ebx
10001124:	e8 fc ff ff ff       	call   10001125 <handleMouse(Video*, int, int, int, int, int)+0x447>	10001125: R_386_PC32	NFrame::getHeight()
10001129:	83 c4 10             	add    esp,0x10
1000112c:	83 e8 0c             	sub    eax,0xc
1000112f:	39 f0                	cmp    eax,esi
10001131:	7f 7b                	jg     100011ae <handleMouse(Video*, int, int, int, int, int)+0x4d0>
10001133:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10001135: R_386_32	draggingWindow
10001139:	50                   	push   eax
1000113a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000113c: R_386_32	startedDragging
10001141:	50                   	push   eax
10001142:	c7 05 00 00 00 00 03 00 00 00 	mov    DWORD PTR ds:0x0,0x3	10001144: R_386_32	dragMode
1000114c:	68 00 04 00 00       	push   0x400
10001151:	e9 89 00 00 00       	jmp    100011df <handleMouse(Video*, int, int, int, int, int)+0x501>
10001156:	83 ec 0c             	sub    esp,0xc
10001159:	53                   	push   ebx
1000115a:	e8 fc ff ff ff       	call   1000115b <handleMouse(Video*, int, int, int, int, int)+0x47d>	1000115b: R_386_PC32	NFrame::isFullscreen()
1000115f:	83 c4 10             	add    esp,0x10
10001162:	88 c2                	mov    dl,al
10001164:	84 c0                	test   al,al
10001166:	0f 85 97 00 00 00    	jne    10001203 <handleMouse(Video*, int, int, int, int, int)+0x525>
1000116c:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	1000116e: R_386_32	draggingWindow
10001172:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001174: R_386_32	startedDragging
10001179:	eb 7c                	jmp    100011f7 <handleMouse(Video*, int, int, int, int, int)+0x519>
1000117b:	83 ec 0c             	sub    esp,0xc
1000117e:	53                   	push   ebx
1000117f:	e8 fc ff ff ff       	call   10001180 <handleMouse(Video*, int, int, int, int, int)+0x4a2>	10001180: R_386_PC32	NFrame::getWidth()
10001184:	83 c4 10             	add    esp,0x10
10001187:	83 e8 14             	sub    eax,0x14
1000118a:	39 f8                	cmp    eax,edi
1000118c:	7f 92                	jg     10001120 <handleMouse(Video*, int, int, int, int, int)+0x442>
1000118e:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10001190: R_386_32	draggingWindow
10001194:	52                   	push   edx
10001195:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001197: R_386_32	startedDragging
1000119c:	52                   	push   edx
1000119d:	c7 05 00 00 00 00 02 00 00 00 	mov    DWORD PTR ds:0x0,0x2	1000119f: R_386_32	dragMode
100011a7:	68 00 03 00 00       	push   0x300
100011ac:	eb 31                	jmp    100011df <handleMouse(Video*, int, int, int, int, int)+0x501>
100011ae:	83 ec 0c             	sub    esp,0xc
100011b1:	53                   	push   ebx
100011b2:	e8 fc ff ff ff       	call   100011b3 <handleMouse(Video*, int, int, int, int, int)+0x4d5>	100011b3: R_386_PC32	NFrame::getWidth()
100011b7:	83 c4 10             	add    esp,0x10
100011ba:	83 e8 0c             	sub    eax,0xc
100011bd:	39 f8                	cmp    eax,edi
100011bf:	7f 2c                	jg     100011ed <handleMouse(Video*, int, int, int, int, int)+0x50f>
100011c1:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100011c3: R_386_32	draggingWindow
100011c7:	50                   	push   eax
100011c8:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100011ca: R_386_32	startedDragging
100011cf:	50                   	push   eax
100011d0:	c7 05 00 00 00 00 04 00 00 00 	mov    DWORD PTR ds:0x0,0x4	100011d2: R_386_32	dragMode
100011da:	68 00 05 00 00       	push   0x500
100011df:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
100011e3:	e8 fc ff ff ff       	call   100011e4 <handleMouse(Video*, int, int, int, int, int)+0x506>	100011e4: R_386_PC32	changeCursor(Video*, int)
100011e8:	83 c4 10             	add    esp,0x10
100011eb:	eb 14                	jmp    10001201 <handleMouse(Video*, int, int, int, int, int)+0x523>
100011ed:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100011ef: R_386_32	draggingWindow
100011f7:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	100011f9: R_386_32	dragMode
10001201:	b2 01                	mov    dl,0x1
10001203:	a1 00 00 00 00       	mov    eax,ds:0x0	10001204: R_386_32	draggingWindow
10001208:	85 c0                	test   eax,eax
1000120a:	0f 84 f8 00 00 00    	je     10001308 <handleMouse(Video*, int, int, int, int, int)+0x62a>
10001210:	8b 4c 24 54          	mov    ecx,DWORD PTR [esp+0x54]
10001214:	0b 4c 24 58          	or     ecx,DWORD PTR [esp+0x58]
10001218:	0f 84 ea 00 00 00    	je     10001308 <handleMouse(Video*, int, int, int, int, int)+0x62a>
1000121e:	83 ec 0c             	sub    esp,0xc
10001221:	50                   	push   eax
10001222:	e8 fc ff ff ff       	call   10001223 <handleMouse(Video*, int, int, int, int, int)+0x545>	10001223: R_386_PC32	NFrame::getX()
10001227:	89 c3                	mov    ebx,eax
10001229:	58                   	pop    eax
1000122a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000122c: R_386_32	draggingWindow
10001230:	e8 fc ff ff ff       	call   10001231 <handleMouse(Video*, int, int, int, int, int)+0x553>	10001231: R_386_PC32	NFrame::getY()
10001235:	89 c6                	mov    esi,eax
10001237:	58                   	pop    eax
10001238:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000123a: R_386_32	draggingWindow
1000123e:	e8 fc ff ff ff       	call   1000123f <handleMouse(Video*, int, int, int, int, int)+0x561>	1000123f: R_386_PC32	NFrame::getWidth()
10001243:	89 c7                	mov    edi,eax
10001245:	58                   	pop    eax
10001246:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001248: R_386_32	draggingWindow
1000124c:	e8 fc ff ff ff       	call   1000124d <handleMouse(Video*, int, int, int, int, int)+0x56f>	1000124d: R_386_PC32	NFrame::getHeight()
10001251:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10001253: R_386_32	mouseX
10001257:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
1000125b:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	1000125d: R_386_32	mouseY
10001261:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
10001265:	83 c4 10             	add    esp,0x10
10001268:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	1000126a: R_386_32	startedDragging
1000126f:	75 29                	jne    1000129a <handleMouse(Video*, int, int, int, int, int)+0x5bc>
10001271:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10001273: R_386_32	startedDragging
10001278:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	1000127a: R_386_32	showWindowContentsWhileDragging
1000127f:	75 19                	jne    1000129a <handleMouse(Video*, int, int, int, int, int)+0x5bc>
10001281:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001285:	83 ec 0c             	sub    esp,0xc
10001288:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000128a: R_386_32	draggingWindow
1000128e:	e8 fc ff ff ff       	call   1000128f <handleMouse(Video*, int, int, int, int, int)+0x5b1>	1000128f: R_386_PC32	NFrame::startDragState()
10001293:	83 c4 10             	add    esp,0x10
10001296:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000129a:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000129c: R_386_32	dragMode
100012a0:	83 fa 01             	cmp    edx,0x1
100012a3:	75 24                	jne    100012c9 <handleMouse(Video*, int, int, int, int, int)+0x5eb>
100012a5:	50                   	push   eax
100012a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100012aa:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
100012ae:	01 c6                	add    esi,eax
100012b0:	56                   	push   esi
100012b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100012b5:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
100012b9:	01 c3                	add    ebx,eax
100012bb:	53                   	push   ebx
100012bc:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100012be: R_386_32	draggingWindow
100012c2:	e8 fc ff ff ff       	call   100012c3 <handleMouse(Video*, int, int, int, int, int)+0x5e5>	100012c3: R_386_PC32	NFrame::setPosition(int, int)
100012c7:	eb 29                	jmp    100012f2 <handleMouse(Video*, int, int, int, int, int)+0x614>
100012c9:	83 fa 02             	cmp    edx,0x2
100012cc:	75 0a                	jne    100012d8 <handleMouse(Video*, int, int, int, int, int)+0x5fa>
100012ce:	a1 00 00 00 00       	mov    eax,ds:0x0	100012cf: R_386_32	mouseY
100012d3:	57                   	push   edi
100012d4:	29 f0                	sub    eax,esi
100012d6:	eb 25                	jmp    100012fd <handleMouse(Video*, int, int, int, int, int)+0x61f>
100012d8:	83 fa 03             	cmp    edx,0x3
100012db:	75 1a                	jne    100012f7 <handleMouse(Video*, int, int, int, int, int)+0x619>
100012dd:	a1 00 00 00 00       	mov    eax,ds:0x0	100012de: R_386_32	mouseY
100012e2:	53                   	push   ebx
100012e3:	29 f0                	sub    eax,esi
100012e5:	50                   	push   eax
100012e6:	57                   	push   edi
100012e7:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100012e9: R_386_32	draggingWindow
100012ed:	e8 fc ff ff ff       	call   100012ee <handleMouse(Video*, int, int, int, int, int)+0x610>	100012ee: R_386_PC32	NFrame::setSize(int, int)
100012f2:	83 c4 10             	add    esp,0x10
100012f5:	eb 19                	jmp    10001310 <handleMouse(Video*, int, int, int, int, int)+0x632>
100012f7:	83 fa 04             	cmp    edx,0x4
100012fa:	75 14                	jne    10001310 <handleMouse(Video*, int, int, int, int, int)+0x632>
100012fc:	51                   	push   ecx
100012fd:	50                   	push   eax
100012fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100012ff: R_386_32	mouseX
10001303:	29 d8                	sub    eax,ebx
10001305:	50                   	push   eax
10001306:	eb df                	jmp    100012e7 <handleMouse(Video*, int, int, int, int, int)+0x609>
10001308:	84 d2                	test   dl,dl
1000130a:	0f 84 b3 00 00 00    	je     100013c3 <handleMouse(Video*, int, int, int, int, int)+0x6e5>
10001310:	83 ec 28             	sub    esp,0x28
10001313:	a1 00 00 00 00       	mov    eax,ds:0x0	10001314: R_386_32	mouseX
10001318:	89 e7                	mov    edi,esp
1000131a:	a3 10 00 00 00       	mov    ds:0x10,eax	1000131b: R_386_32	tightMouseRegionNew
1000131f:	be 00 00 00 00       	mov    esi,0x0	10001320: R_386_32	tightMouseRegionNew
10001324:	a1 00 00 00 00       	mov    eax,ds:0x0	10001325: R_386_32	mouseY
10001329:	b9 07 00 00 00       	mov    ecx,0x7
1000132e:	a3 14 00 00 00       	mov    ds:0x14,eax	1000132f: R_386_32	tightMouseRegionNew
10001333:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001335:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
10001339:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000133b: R_386_32	desktopWindow
1000133f:	e8 fc ff ff ff       	call   10001340 <handleMouse(Video*, int, int, int, int, int)+0x662>	10001340: R_386_PC32	NFrame::repaint(Video*, Region)
10001344:	83 c4 30             	add    esp,0x30
10001347:	b2 01                	mov    dl,0x1
10001349:	eb 78                	jmp    100013c3 <handleMouse(Video*, int, int, int, int, int)+0x6e5>
1000134b:	85 c0                	test   eax,eax
1000134d:	0f 84 4b fd ff ff    	je     1000109e <handleMouse(Video*, int, int, int, int, int)+0x3c0>
10001353:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10001355: R_386_32	draggingWindow
1000135a:	74 10                	je     1000136c <handleMouse(Video*, int, int, int, int, int)+0x68e>
1000135c:	53                   	push   ebx
1000135d:	53                   	push   ebx
1000135e:	6a 00                	push   0x0
10001360:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
10001364:	e8 fc ff ff ff       	call   10001365 <handleMouse(Video*, int, int, int, int, int)+0x687>	10001365: R_386_PC32	changeCursor(Video*, int)
10001369:	83 c4 10             	add    esp,0x10
1000136c:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	1000136e: R_386_32	draggingWindow
10001372:	31 d2                	xor    edx,edx
10001374:	85 c9                	test   ecx,ecx
10001376:	74 2b                	je     100013a3 <handleMouse(Video*, int, int, int, int, int)+0x6c5>
10001378:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	1000137a: R_386_32	startedDragging
1000137e:	84 d2                	test   dl,dl
10001380:	74 21                	je     100013a3 <handleMouse(Video*, int, int, int, int, int)+0x6c5>
10001382:	a0 00 00 00 00       	mov    al,ds:0x0	10001383: R_386_32	showWindowContentsWhileDragging
10001387:	84 c0                	test   al,al
10001389:	75 16                	jne    100013a1 <handleMouse(Video*, int, int, int, int, int)+0x6c3>
1000138b:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
1000138f:	83 ec 0c             	sub    esp,0xc
10001392:	51                   	push   ecx
10001393:	e8 fc ff ff ff       	call   10001394 <handleMouse(Video*, int, int, int, int, int)+0x6b6>	10001394: R_386_PC32	NFrame::endDragState()
10001398:	83 c4 10             	add    esp,0x10
1000139b:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
1000139f:	eb 02                	jmp    100013a3 <handleMouse(Video*, int, int, int, int, int)+0x6c5>
100013a1:	88 c2                	mov    dl,al
100013a3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100013a5: R_386_32	startedDragging
100013aa:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	100013ac: R_386_32	dragMode
100013b4:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100013b6: R_386_32	draggingWindow
100013be:	e9 40 fe ff ff       	jmp    10001203 <handleMouse(Video*, int, int, int, int, int)+0x525>
100013c3:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
100013c7:	bf 00 00 00 00       	mov    edi,0x0	100013c8: R_386_32	pixelsUnderCursor
100013cc:	50                   	push   eax
100013cd:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100013cf: R_386_32	mouseY
100013d3:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100013d5: R_386_32	mouseX
100013d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
100013dd:	e8 fc ff ff ff       	call   100013de <handleMouse(Video*, int, int, int, int, int)+0x700>	100013de: R_386_PC32	videoSaveAreaUnderCursor(Video*, int, int)
100013e2:	b9 00 10 00 00       	mov    ecx,0x1000
100013e7:	89 c6                	mov    esi,eax
100013e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100013eb:	5a                   	pop    edx
100013ec:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
100013f0:	e8 fc ff ff ff       	call   100013f1 <handleMouse(Video*, int, int, int, int, int)+0x713>	100013f1: R_386_PC32	showCursor(Video*)
100013f5:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
100013f9:	83 c4 50             	add    esp,0x50
100013fc:	88 d0                	mov    al,dl
100013fe:	5b                   	pop    ebx
100013ff:	5e                   	pop    esi
10001400:	5f                   	pop    edi
10001401:	c3                   	ret    

10001402 <__static_initialization_and_destruction_0(int, int)>:
10001402:	83 ec 0c             	sub    esp,0xc
10001405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001409:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
10001411:	75 20                	jne    10001433 <__static_initialization_and_destruction_0(int, int)+0x31>
10001413:	48                   	dec    eax
10001414:	75 1d                	jne    10001433 <__static_initialization_and_destruction_0(int, int)+0x31>
10001416:	83 ec 0c             	sub    esp,0xc
10001419:	68 00 00 00 00       	push   0x0	1000141a: R_386_32	tightMouseRegionOld
1000141e:	e8 fc ff ff ff       	call   1000141f <__static_initialization_and_destruction_0(int, int)+0x1d>	1000141f: R_386_PC32	Region::Region()
10001423:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0	10001427: R_386_32	tightMouseRegionNew
1000142b:	83 c4 1c             	add    esp,0x1c
1000142e:	e9 fc ff ff ff       	jmp    1000142f <__static_initialization_and_destruction_0(int, int)+0x2d>	1000142f: R_386_PC32	Region::Region()
10001433:	83 c4 0c             	add    esp,0xc
10001436:	c3                   	ret    

10001437 <drawCharacter(Video*, Region, int, int, unsigned int, char)>:
10001437:	55                   	push   ebp
10001438:	57                   	push   edi
10001439:	31 ff                	xor    edi,edi
1000143b:	56                   	push   esi
1000143c:	31 f6                	xor    esi,esi
1000143e:	53                   	push   ebx
1000143f:	83 ec 3c             	sub    esp,0x3c
10001442:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10001446:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000144a:	0f be 44 24 7c       	movsx  eax,BYTE PTR [esp+0x7c]
1000144f:	89 c5                	mov    ebp,eax
10001451:	39 74 24 5c          	cmp    DWORD PTR [esp+0x5c],esi
10001455:	0f 8e 15 01 00 00    	jle    10001570 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x139>
1000145b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
1000145f:	83 c0 0c             	add    eax,0xc
10001462:	39 f0                	cmp    eax,esi
10001464:	0f 8e 06 01 00 00    	jle    10001570 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x139>
1000146a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
1000146e:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
10001475:	8b 14 b9             	mov    edx,DWORD PTR [ecx+edi*4]
10001478:	0f b7 ca             	movzx  ecx,dx
1000147b:	c1 ea 10             	shr    edx,0x10
1000147e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10001482:	8d 7c 0f 01          	lea    edi,[edi+ecx*1+0x1]
10001486:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
1000148a:	8d 0c 16             	lea    ecx,[esi+edx*1]
1000148d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
10001491:	3b 4c 24 74          	cmp    ecx,DWORD PTR [esp+0x74]
10001495:	7d 06                	jge    1000149d <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x66>
10001497:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
1000149b:	eb b4                	jmp    10001451 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x1a>
1000149d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
100014a1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
100014a6:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
100014aa:	31 db                	xor    ebx,ebx
100014ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100014b0:	39 5c 24 58          	cmp    DWORD PTR [esp+0x58],ebx
100014b4:	7e e1                	jle    10001497 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x60>
100014b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100014ba:	39 18                	cmp    DWORD PTR [eax],ebx
100014bc:	75 0e                	jne    100014cc <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x95>
100014be:	83 44 24 10 04       	add    DWORD PTR [esp+0x10],0x4
100014c3:	80 74 24 1f 01       	xor    BYTE PTR [esp+0x1f],0x1
100014c8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
100014cc:	89 d9                	mov    ecx,ebx
100014ce:	2b 4c 24 70          	sub    ecx,DWORD PTR [esp+0x70]
100014d2:	83 f9 07             	cmp    ecx,0x7
100014d5:	77 6d                	ja     10001544 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x10d>
100014d7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
100014dc:	74 66                	je     10001544 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x10d>
100014de:	89 f0                	mov    eax,esi
100014e0:	2b 44 24 74          	sub    eax,DWORD PTR [esp+0x74]
100014e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100014e8:	31 c0                	xor    eax,eax
100014ea:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
100014ee:	7d 54                	jge    10001544 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x10d>
100014f0:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
100014f5:	77 46                	ja     1000153d <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x106>
100014f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100014fb:	c1 e2 07             	shl    edx,0x7
100014fe:	0f b6 94 2a 00 00 00 00 	movzx  edx,BYTE PTR [edx+ebp*1+0x0]	10001502: R_386_32	font_array
10001506:	d3 e2                	shl    edx,cl
10001508:	80 e2 80             	and    dl,0x80
1000150b:	74 30                	je     1000153d <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x106>
1000150d:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
10001511:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
10001515:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
10001519:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000151d:	01 f2                	add    edx,esi
1000151f:	01 c2                	add    edx,eax
10001521:	52                   	push   edx
10001522:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
10001526:	01 da                	add    edx,ebx
10001528:	52                   	push   edx
10001529:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
1000152d:	e8 fc ff ff ff       	call   1000152e <drawCharacter(Video*, Region, int, int, unsigned int, char)+0xf7>	1000152e: R_386_PC32	videoPutpixel(Video*, int, int, unsigned int)
10001532:	83 c4 10             	add    esp,0x10
10001535:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
10001539:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
1000153d:	40                   	inc    eax
1000153e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
10001542:	eb a6                	jmp    100014ea <drawCharacter(Video*, Region, int, int, unsigned int, char)+0xb3>
10001544:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10001549:	74 10                	je     1000155b <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x124>
1000154b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000154f:	8b 00                	mov    eax,DWORD PTR [eax]
10001551:	3b 44 24 70          	cmp    eax,DWORD PTR [esp+0x70]
10001555:	73 04                	jae    1000155b <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x124>
10001557:	89 c3                	mov    ebx,eax
10001559:	eb 01                	jmp    1000155c <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x125>
1000155b:	43                   	inc    ebx
1000155c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10001560:	83 c0 08             	add    eax,0x8
10001563:	39 d8                	cmp    eax,ebx
10001565:	0f 8d 45 ff ff ff    	jge    100014b0 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x79>
1000156b:	e9 27 ff ff ff       	jmp    10001497 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x60>
10001570:	83 c4 3c             	add    esp,0x3c
10001573:	b8 08 00 0c 00       	mov    eax,0xc0008
10001578:	5b                   	pop    ebx
10001579:	5e                   	pop    esi
1000157a:	5f                   	pop    edi
1000157b:	5d                   	pop    ebp
1000157c:	c3                   	ret    

1000157d <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)>:
1000157d:	57                   	push   edi
1000157e:	56                   	push   esi
1000157f:	53                   	push   ebx
10001580:	83 ec 50             	sub    esp,0x50
10001583:	8d 74 24 18          	lea    esi,[esp+0x18]
10001587:	50                   	push   eax
10001588:	50                   	push   eax
10001589:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000158d:	50                   	push   eax
1000158e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10001592:	50                   	push   eax
10001593:	8d 44 24 1f          	lea    eax,[esp+0x1f]
10001597:	50                   	push   eax
10001598:	ff b4 24 98 00 00 00 	push   DWORD PTR [esp+0x98]
1000159f:	ff b4 24 98 00 00 00 	push   DWORD PTR [esp+0x98]
100015a6:	56                   	push   esi
100015a7:	e8 fc ff ff ff       	call   100015a8 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0x2b>	100015a8: R_386_PC32	getFontRegion(int, int, bool*, int*, int*)
100015ac:	b9 07 00 00 00       	mov    ecx,0x7
100015b1:	8b 84 24 a4 00 00 00 	mov    eax,DWORD PTR [esp+0xa4]
100015b8:	8d 5c 24 50          	lea    ebx,[esp+0x50]
100015bc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100015c0:	8b 84 24 a8 00 00 00 	mov    eax,DWORD PTR [esp+0xa8]
100015c7:	83 ec 14             	sub    esp,0x14
100015ca:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
100015ce:	89 e7                	mov    edi,esp
100015d0:	83 ec 1c             	sub    esp,0x1c
100015d3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015d5:	8d b4 24 b0 00 00 00 	lea    esi,[esp+0xb0]
100015dc:	89 e7                	mov    edi,esp
100015de:	b9 07 00 00 00       	mov    ecx,0x7
100015e3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015e5:	53                   	push   ebx
100015e6:	89 de                	mov    esi,ebx
100015e8:	e8 fc ff ff ff       	call   100015e9 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0x6c>	100015e9: R_386_PC32	getRegionIntersection(Region, Region)
100015ed:	b9 07 00 00 00       	mov    ecx,0x7
100015f2:	83 c4 40             	add    esp,0x40
100015f5:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
100015fc:	83 ec 1c             	sub    esp,0x1c
100015ff:	89 e7                	mov    edi,esp
10001601:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001603:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
1000160a:	e8 fc ff ff ff       	call   1000160b <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0x8e>	1000160b: R_386_PC32	fillRegion(Video*, Region, unsigned int)
1000160f:	83 c4 30             	add    esp,0x30
10001612:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
10001617:	74 0f                	je     10001628 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0xab>
10001619:	83 ec 0c             	sub    esp,0xc
1000161c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10001620:	e8 fc ff ff ff       	call   10001621 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0xa4>	10001621: R_386_PC32	free
10001625:	83 c4 10             	add    esp,0x10
10001628:	83 ec 0c             	sub    esp,0xc
1000162b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
1000162f:	e8 fc ff ff ff       	call   10001630 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0xb3>	10001630: R_386_PC32	free
10001634:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10001638:	c1 e0 10             	shl    eax,0x10
1000163b:	0b 44 24 20          	or     eax,DWORD PTR [esp+0x20]
1000163f:	83 c4 60             	add    esp,0x60
10001642:	5b                   	pop    ebx
10001643:	5e                   	pop    esi
10001644:	5f                   	pop    edi
10001645:	c3                   	ret    

10001646 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)>:
10001646:	55                   	push   ebp
10001647:	57                   	push   edi
10001648:	31 ff                	xor    edi,edi
1000164a:	56                   	push   esi
1000164b:	31 f6                	xor    esi,esi
1000164d:	53                   	push   ebx
1000164e:	83 ec 2c             	sub    esp,0x2c
10001651:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
10001655:	39 74 24 4c          	cmp    DWORD PTR [esp+0x4c],esi
10001659:	0f 8e 07 01 00 00    	jle    10001766 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x120>
1000165f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10001663:	03 44 24 70          	add    eax,DWORD PTR [esp+0x70]
10001667:	39 f0                	cmp    eax,esi
10001669:	0f 8e f7 00 00 00    	jle    10001766 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x120>
1000166f:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
10001673:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
1000167a:	0f b7 da             	movzx  ebx,dx
1000167d:	c1 ea 10             	shr    edx,0x10
10001680:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
10001684:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
10001688:	8d 7c 1f 01          	lea    edi,[edi+ebx*1+0x1]
1000168c:	8d 14 16             	lea    edx,[esi+edx*1]
1000168f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10001693:	3b 54 24 64          	cmp    edx,DWORD PTR [esp+0x64]
10001697:	7d 06                	jge    1000169f <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x59>
10001699:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000169d:	eb b6                	jmp    10001655 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xf>
1000169f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
100016a3:	31 db                	xor    ebx,ebx
100016a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100016a9:	31 d2                	xor    edx,edx
100016ab:	39 5c 24 48          	cmp    DWORD PTR [esp+0x48],ebx
100016af:	7e e8                	jle    10001699 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x53>
100016b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100016b5:	39 18                	cmp    DWORD PTR [eax],ebx
100016b7:	75 0c                	jne    100016c5 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x7f>
100016b9:	83 44 24 08 04       	add    DWORD PTR [esp+0x8],0x4
100016be:	83 f2 01             	xor    edx,0x1
100016c1:	ff 4c 24 04          	dec    DWORD PTR [esp+0x4]
100016c5:	89 d8                	mov    eax,ebx
100016c7:	2b 44 24 60          	sub    eax,DWORD PTR [esp+0x60]
100016cb:	89 c1                	mov    ecx,eax
100016cd:	f7 d1                	not    ecx
100016cf:	c1 e9 1f             	shr    ecx,0x1f
100016d2:	3b 44 24 6c          	cmp    eax,DWORD PTR [esp+0x6c]
100016d6:	0f 9c c0             	setl   al
100016d9:	84 c8                	test   al,cl
100016db:	74 5c                	je     10001739 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xf3>
100016dd:	84 d2                	test   dl,dl
100016df:	74 58                	je     10001739 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xf3>
100016e1:	89 f0                	mov    eax,esi
100016e3:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
100016e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100016eb:	31 c0                	xor    eax,eax
100016ed:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
100016f1:	7d 46                	jge    10001739 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xf3>
100016f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
100016f7:	39 4c 24 70          	cmp    DWORD PTR [esp+0x70],ecx
100016fb:	7e 35                	jle    10001732 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xec>
100016fd:	85 c9                	test   ecx,ecx
100016ff:	78 31                	js     10001732 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xec>
10001701:	88 54 24 1f          	mov    BYTE PTR [esp+0x1f],dl
10001705:	68 00 00 ff 00       	push   0xff0000
1000170a:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
1000170e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001712:	01 f1                	add    ecx,esi
10001714:	01 c1                	add    ecx,eax
10001716:	51                   	push   ecx
10001717:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
1000171b:	01 d9                	add    ecx,ebx
1000171d:	51                   	push   ecx
1000171e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10001722:	e8 fc ff ff ff       	call   10001723 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xdd>	10001723: R_386_PC32	videoPutpixel(Video*, int, int, unsigned int)
10001727:	83 c4 10             	add    esp,0x10
1000172a:	8a 54 24 1f          	mov    dl,BYTE PTR [esp+0x1f]
1000172e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001732:	40                   	inc    eax
10001733:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
10001737:	eb b4                	jmp    100016ed <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xa7>
10001739:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
1000173e:	74 10                	je     10001750 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x10a>
10001740:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10001744:	8b 00                	mov    eax,DWORD PTR [eax]
10001746:	3b 44 24 60          	cmp    eax,DWORD PTR [esp+0x60]
1000174a:	73 04                	jae    10001750 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x10a>
1000174c:	89 c3                	mov    ebx,eax
1000174e:	eb 01                	jmp    10001751 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x10b>
10001750:	43                   	inc    ebx
10001751:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10001755:	03 44 24 6c          	add    eax,DWORD PTR [esp+0x6c]
10001759:	39 d8                	cmp    eax,ebx
1000175b:	0f 8d 4a ff ff ff    	jge    100016ab <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x65>
10001761:	e9 33 ff ff ff       	jmp    10001699 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x53>
10001766:	83 c4 2c             	add    esp,0x2c
10001769:	5b                   	pop    ebx
1000176a:	5e                   	pop    esi
1000176b:	5f                   	pop    edi
1000176c:	5d                   	pop    ebp
1000176d:	c3                   	ret    

1000176e <shitBlit(Video*, Region, int, int, unsigned int*, int, int)>:
1000176e:	55                   	push   ebp
1000176f:	57                   	push   edi
10001770:	56                   	push   esi
10001771:	53                   	push   ebx
10001772:	83 ec 4c             	sub    esp,0x4c
10001775:	8b 9c 24 84 00 00 00 	mov    ebx,DWORD PTR [esp+0x84]
1000177c:	89 d8                	mov    eax,ebx
1000177e:	2b 84 24 84 00 00 00 	sub    eax,DWORD PTR [esp+0x84]
10001785:	39 84 24 90 00 00 00 	cmp    DWORD PTR [esp+0x90],eax
1000178c:	0f 8e a5 00 00 00    	jle    10001837 <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0xc9>
10001792:	31 ed                	xor    ebp,ebp
10001794:	3b ac 24 8c 00 00 00 	cmp    ebp,DWORD PTR [esp+0x8c]
1000179b:	0f 8d 90 00 00 00    	jge    10001831 <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0xc3>
100017a1:	8d 44 24 08          	lea    eax,[esp+0x8]
100017a5:	83 ec 0c             	sub    esp,0xc
100017a8:	6a 01                	push   0x1
100017aa:	6a 01                	push   0x1
100017ac:	53                   	push   ebx
100017ad:	8b 94 24 98 00 00 00 	mov    edx,DWORD PTR [esp+0x98]
100017b4:	01 ea                	add    edx,ebp
100017b6:	45                   	inc    ebp
100017b7:	52                   	push   edx
100017b8:	50                   	push   eax
100017b9:	e8 fc ff ff ff       	call   100017ba <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0x4c>	100017ba: R_386_PC32	createRectangleRegion(int, int, int, int)
100017be:	b9 07 00 00 00       	mov    ecx,0x7
100017c3:	8d 54 24 40          	lea    edx,[esp+0x40]
100017c7:	83 ec 14             	sub    esp,0x14
100017ca:	8d b4 24 94 00 00 00 	lea    esi,[esp+0x94]
100017d1:	89 e7                	mov    edi,esp
100017d3:	83 ec 1c             	sub    esp,0x1c
100017d6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017d8:	8d 44 24 54          	lea    eax,[esp+0x54]
100017dc:	89 e7                	mov    edi,esp
100017de:	89 c6                	mov    esi,eax
100017e0:	b9 07 00 00 00       	mov    ecx,0x7
100017e5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017e7:	52                   	push   edx
100017e8:	e8 fc ff ff ff       	call   100017e9 <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0x7b>	100017e9: R_386_PC32	getRegionIntersection(Region, Region)
100017ed:	b9 07 00 00 00       	mov    ecx,0x7
100017f2:	83 c4 40             	add    esp,0x40
100017f5:	68 80 80 00 00       	push   0x8080
100017fa:	83 ec 1c             	sub    esp,0x1c
100017fd:	8d 54 24 50          	lea    edx,[esp+0x50]
10001801:	89 e7                	mov    edi,esp
10001803:	89 d6                	mov    esi,edx
10001805:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001807:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
1000180e:	e8 fc ff ff ff       	call   1000180f <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0xa1>	1000180f: R_386_PC32	fillRegion(Video*, Region, unsigned int)
10001813:	83 c4 24             	add    esp,0x24
10001816:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
1000181a:	e8 fc ff ff ff       	call   1000181b <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0xad>	1000181b: R_386_PC32	free
1000181f:	58                   	pop    eax
10001820:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
10001824:	e8 fc ff ff ff       	call   10001825 <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0xb7>	10001825: R_386_PC32	free
10001829:	83 c4 10             	add    esp,0x10
1000182c:	e9 63 ff ff ff       	jmp    10001794 <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0x26>
10001831:	43                   	inc    ebx
10001832:	e9 45 ff ff ff       	jmp    1000177c <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0xe>
10001837:	83 c4 4c             	add    esp,0x4c
1000183a:	5b                   	pop    ebx
1000183b:	5e                   	pop    esi
1000183c:	5f                   	pop    edi
1000183d:	5d                   	pop    ebp
1000183e:	c3                   	ret    

1000183f <fillRegion(Video*, Region, unsigned int)>:
1000183f:	55                   	push   ebp
10001840:	31 ed                	xor    ebp,ebp
10001842:	57                   	push   edi
10001843:	56                   	push   esi
10001844:	53                   	push   ebx
10001845:	83 ec 1c             	sub    esp,0x1c
10001848:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000184c:	89 04 24             	mov    DWORD PTR [esp],eax
1000184f:	31 c0                	xor    eax,eax
10001851:	39 6c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebp
10001855:	0f 8e 91 00 00 00    	jle    100018ec <fillRegion(Video*, Region, unsigned int)+0xad>
1000185b:	8d 50 01             	lea    edx,[eax+0x1]
1000185e:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10001865:	8b 34 24             	mov    esi,DWORD PTR [esp]
10001868:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
1000186b:	83 f8 ff             	cmp    eax,0xffffffff
1000186e:	74 7c                	je     100018ec <fillRegion(Video*, Region, unsigned int)+0xad>
10001870:	0f b7 f0             	movzx  esi,ax
10001873:	31 db                	xor    ebx,ebx
10001875:	c1 e8 10             	shr    eax,0x10
10001878:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000187c:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000187f:	8d 7c 08 04          	lea    edi,[eax+ecx*1+0x4]
10001883:	8d 04 32             	lea    eax,[edx+esi*1]
10001886:	31 d2                	xor    edx,edx
10001888:	39 5c 24 38          	cmp    DWORD PTR [esp+0x38],ebx
1000188c:	7e 55                	jle    100018e3 <fillRegion(Video*, Region, unsigned int)+0xa4>
1000188e:	39 1f                	cmp    DWORD PTR [edi],ebx
10001890:	75 07                	jne    10001899 <fillRegion(Video*, Region, unsigned int)+0x5a>
10001892:	83 c7 04             	add    edi,0x4
10001895:	83 f2 01             	xor    edx,0x1
10001898:	4e                   	dec    esi
10001899:	84 d2                	test   dl,dl
1000189b:	74 42                	je     100018df <fillRegion(Video*, Region, unsigned int)+0xa0>
1000189d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100018a1:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
100018a5:	50                   	push   eax
100018a6:	50                   	push   eax
100018a7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100018ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
100018af:	8b 0f                	mov    ecx,DWORD PTR [edi]
100018b1:	29 d9                	sub    ecx,ebx
100018b3:	51                   	push   ecx
100018b4:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100018b8:	01 e9                	add    ecx,ebp
100018ba:	51                   	push   ecx
100018bb:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100018bf:	01 d9                	add    ecx,ebx
100018c1:	43                   	inc    ebx
100018c2:	51                   	push   ecx
100018c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
100018c7:	e8 fc ff ff ff       	call   100018c8 <fillRegion(Video*, Region, unsigned int)+0x89>	100018c8: R_386_PC32	videoDrawRect(Video*, int, int, int, int, unsigned int)
100018cc:	83 c4 20             	add    esp,0x20
100018cf:	85 f6                	test   esi,esi
100018d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100018d5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
100018d9:	74 ad                	je     10001888 <fillRegion(Video*, Region, unsigned int)+0x49>
100018db:	8b 1f                	mov    ebx,DWORD PTR [edi]
100018dd:	eb a9                	jmp    10001888 <fillRegion(Video*, Region, unsigned int)+0x49>
100018df:	85 f6                	test   esi,esi
100018e1:	75 f8                	jne    100018db <fillRegion(Video*, Region, unsigned int)+0x9c>
100018e3:	03 6c 24 04          	add    ebp,DWORD PTR [esp+0x4]
100018e7:	e9 65 ff ff ff       	jmp    10001851 <fillRegion(Video*, Region, unsigned int)+0x12>
100018ec:	83 c4 1c             	add    esp,0x1c
100018ef:	5b                   	pop    ebx
100018f0:	5e                   	pop    esi
100018f1:	5f                   	pop    edi
100018f2:	5d                   	pop    ebp
100018f3:	c3                   	ret    

100018f4 <readUnaligned32(unsigned char*)>:
100018f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100018f8:	8b 00                	mov    eax,DWORD PTR [eax]
100018fa:	c3                   	ret    

100018fb <writeUnaligned32(unsigned char*, unsigned int)>:
100018fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100018ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10001903:	89 10                	mov    DWORD PTR [eax],edx
10001905:	c3                   	ret    

10001906 <createTightFontRegion(int, int, unsigned char*, int, int)>:
10001906:	55                   	push   ebp
10001907:	57                   	push   edi
10001908:	31 ff                	xor    edi,edi
1000190a:	56                   	push   esi
1000190b:	53                   	push   ebx
1000190c:	83 ec 68             	sub    esp,0x68
1000190f:	8b 5c 24 7c          	mov    ebx,DWORD PTR [esp+0x7c]
10001913:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
1000191a:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
1000191e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10001921:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
10001928:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
1000192b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10001932:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10001935:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
1000193c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
1000193f:	6b 84 24 90 00 00 00 11 	imul   eax,DWORD PTR [esp+0x90],0x11
10001947:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
1000194e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
10001951:	50                   	push   eax
10001952:	e8 fc ff ff ff       	call   10001953 <createTightFontRegion(int, int, unsigned char*, int, int)+0x4d>	10001953: R_386_PC32	malloc
10001957:	8b ac 24 8c 00 00 00 	mov    ebp,DWORD PTR [esp+0x8c]
1000195e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001962:	89 03                	mov    DWORD PTR [ebx],eax
10001964:	83 c4 10             	add    esp,0x10
10001967:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
1000196b:	3b bc 24 84 00 00 00 	cmp    edi,DWORD PTR [esp+0x84]
10001972:	7d 6c                	jge    100019e0 <createTightFontRegion(int, int, unsigned char*, int, int)+0xda>
10001974:	31 f6                	xor    esi,esi
10001976:	31 c0                	xor    eax,eax
10001978:	31 c9                	xor    ecx,ecx
1000197a:	3b b4 24 80 00 00 00 	cmp    esi,DWORD PTR [esp+0x80]
10001981:	7d 24                	jge    100019a7 <createTightFontRegion(int, int, unsigned char*, int, int)+0xa1>
10001983:	80 7c 35 00 00       	cmp    BYTE PTR [ebp+esi*1+0x0],0x0
10001988:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
1000198c:	0f 95 44 24 0e       	setne  BYTE PTR [esp+0xe]
10001991:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
10001995:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
10001999:	74 05                	je     100019a0 <createTightFontRegion(int, int, unsigned char*, int, int)+0x9a>
1000199b:	89 74 8c 10          	mov    DWORD PTR [esp+ecx*4+0x10],esi
1000199f:	41                   	inc    ecx
100019a0:	46                   	inc    esi
100019a1:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
100019a5:	eb d3                	jmp    1000197a <createTightFontRegion(int, int, unsigned char*, int, int)+0x74>
100019a7:	84 c0                	test   al,al
100019a9:	74 0c                	je     100019b7 <createTightFontRegion(int, int, unsigned char*, int, int)+0xb1>
100019ab:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100019b2:	89 44 8c 10          	mov    DWORD PTR [esp+ecx*4+0x10],eax
100019b6:	41                   	inc    ecx
100019b7:	89 ce                	mov    esi,ecx
100019b9:	81 ce 00 00 01 00    	or     esi,0x10000
100019bf:	89 32                	mov    DWORD PTR [edx],esi
100019c1:	31 f6                	xor    esi,esi
100019c3:	39 f1                	cmp    ecx,esi
100019c5:	74 0b                	je     100019d2 <createTightFontRegion(int, int, unsigned char*, int, int)+0xcc>
100019c7:	8b 44 b4 10          	mov    eax,DWORD PTR [esp+esi*4+0x10]
100019cb:	89 44 b2 04          	mov    DWORD PTR [edx+esi*4+0x4],eax
100019cf:	46                   	inc    esi
100019d0:	eb f1                	jmp    100019c3 <createTightFontRegion(int, int, unsigned char*, int, int)+0xbd>
100019d2:	8d 54 8a 04          	lea    edx,[edx+ecx*4+0x4]
100019d6:	47                   	inc    edi
100019d7:	03 ac 24 80 00 00 00 	add    ebp,DWORD PTR [esp+0x80]
100019de:	eb 8b                	jmp    1000196b <createTightFontRegion(int, int, unsigned char*, int, int)+0x65>
100019e0:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
100019e6:	89 d8                	mov    eax,ebx
100019e8:	83 c2 04             	add    edx,0x4
100019eb:	2b 54 24 08          	sub    edx,DWORD PTR [esp+0x8]
100019ef:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
100019f2:	83 c4 5c             	add    esp,0x5c
100019f5:	5b                   	pop    ebx
100019f6:	5e                   	pop    esi
100019f7:	5f                   	pop    edi
100019f8:	5d                   	pop    ebp
100019f9:	c2 04 00             	ret    0x4

100019fc <createTightCursorRegion(int, int, unsigned int*)>:
100019fc:	55                   	push   ebp
100019fd:	57                   	push   edi
100019fe:	56                   	push   esi
100019ff:	31 f6                	xor    esi,esi
10001a01:	53                   	push   ebx
10001a02:	83 ec 68             	sub    esp,0x68
10001a05:	8b 5c 24 7c          	mov    ebx,DWORD PTR [esp+0x7c]
10001a09:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10001a10:	c7 43 04 20 00 00 00 	mov    DWORD PTR [ebx+0x4],0x20
10001a17:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10001a1a:	c7 43 08 20 00 00 00 	mov    DWORD PTR [ebx+0x8],0x20
10001a21:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
10001a28:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
10001a2c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10001a2f:	c7 43 0c 84 08 00 00 	mov    DWORD PTR [ebx+0xc],0x884
10001a36:	68 84 08 00 00       	push   0x884
10001a3b:	e8 fc ff ff ff       	call   10001a3c <createTightCursorRegion(int, int, unsigned int*)+0x40>	10001a3c: R_386_PC32	malloc
10001a40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001a44:	89 03                	mov    DWORD PTR [ebx],eax
10001a46:	83 c4 10             	add    esp,0x10
10001a49:	89 c1                	mov    ecx,eax
10001a4b:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10001a4f:	31 ed                	xor    ebp,ebp
10001a51:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
10001a54:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
10001a59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001a5d:	31 d2                	xor    edx,edx
10001a5f:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10001a63:	8b 84 b0 80 00 00 00 	mov    eax,DWORD PTR [eax+esi*4+0x80]
10001a6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001a6e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10001a72:	0b 7c 24 08          	or     edi,DWORD PTR [esp+0x8]
10001a76:	83 e7 01             	and    edi,0x1
10001a79:	89 f8                	mov    eax,edi
10001a7b:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
10001a7f:	74 05                	je     10001a86 <createTightCursorRegion(int, int, unsigned int*)+0x8a>
10001a81:	89 6c 94 10          	mov    DWORD PTR [esp+edx*4+0x10],ebp
10001a85:	42                   	inc    edx
10001a86:	d1 6c 24 08          	shr    DWORD PTR [esp+0x8],1
10001a8a:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
10001a8e:	45                   	inc    ebp
10001a8f:	89 f8                	mov    eax,edi
10001a91:	83 fd 20             	cmp    ebp,0x20
10001a94:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
10001a98:	75 d4                	jne    10001a6e <createTightCursorRegion(int, int, unsigned int*)+0x72>
10001a9a:	84 c0                	test   al,al
10001a9c:	74 09                	je     10001aa7 <createTightCursorRegion(int, int, unsigned int*)+0xab>
10001a9e:	c7 44 94 10 20 00 00 00 	mov    DWORD PTR [esp+edx*4+0x10],0x20
10001aa6:	42                   	inc    edx
10001aa7:	89 d7                	mov    edi,edx
10001aa9:	8d 69 04             	lea    ebp,[ecx+0x4]
10001aac:	81 cf 00 00 01 00    	or     edi,0x10000
10001ab2:	89 39                	mov    DWORD PTR [ecx],edi
10001ab4:	31 ff                	xor    edi,edi
10001ab6:	39 fa                	cmp    edx,edi
10001ab8:	74 0b                	je     10001ac5 <createTightCursorRegion(int, int, unsigned int*)+0xc9>
10001aba:	8b 44 bc 10          	mov    eax,DWORD PTR [esp+edi*4+0x10]
10001abe:	89 44 b9 04          	mov    DWORD PTR [ecx+edi*4+0x4],eax
10001ac2:	47                   	inc    edi
10001ac3:	eb f1                	jmp    10001ab6 <createTightCursorRegion(int, int, unsigned int*)+0xba>
10001ac5:	c1 e2 02             	shl    edx,0x2
10001ac8:	46                   	inc    esi
10001ac9:	8d 4c 15 00          	lea    ecx,[ebp+edx*1+0x0]
10001acd:	83 fe 20             	cmp    esi,0x20
10001ad0:	8d 54 15 04          	lea    edx,[ebp+edx*1+0x4]
10001ad4:	0f 85 71 ff ff ff    	jne    10001a4b <createTightCursorRegion(int, int, unsigned int*)+0x4f>
10001ada:	c7 01 ff ff ff ff    	mov    DWORD PTR [ecx],0xffffffff
10001ae0:	2b 14 24             	sub    edx,DWORD PTR [esp]
10001ae3:	89 d8                	mov    eax,ebx
10001ae5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
10001ae8:	83 c4 5c             	add    esp,0x5c
10001aeb:	5b                   	pop    ebx
10001aec:	5e                   	pop    esi
10001aed:	5f                   	pop    edi
10001aee:	5d                   	pop    ebp
10001aef:	c2 04 00             	ret    0x4

10001af2 <createEllipseRegion(int, int, int, int)>:
10001af2:	55                   	push   ebp
10001af3:	57                   	push   edi
10001af4:	56                   	push   esi
10001af5:	53                   	push   ebx
10001af6:	83 ec 28             	sub    esp,0x28
10001af9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10001afd:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
10001b01:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10001b05:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
10001b08:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
10001b0b:	c6 46 18 00          	mov    BYTE PTR [esi+0x18],0x0
10001b0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10001b13:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
10001b16:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10001b1a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
10001b1d:	6b c3 0c             	imul   eax,ebx,0xc
10001b20:	83 c0 04             	add    eax,0x4
10001b23:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
10001b26:	50                   	push   eax
10001b27:	e8 fc ff ff ff       	call   10001b28 <createEllipseRegion(int, int, int, int)+0x36>	10001b28: R_386_PC32	malloc
10001b2c:	83 c4 10             	add    esp,0x10
10001b2f:	89 c5                	mov    ebp,eax
10001b31:	89 06                	mov    DWORD PTR [esi],eax
10001b33:	85 c0                	test   eax,eax
10001b35:	75 10                	jne    10001b47 <createEllipseRegion(int, int, int, int)+0x55>
10001b37:	83 ec 0c             	sub    esp,0xc
10001b3a:	68 d7 8f 00 10       	push   0x10008fd7	10001b3b: R_386_32	.text
10001b3f:	e8 fc ff ff ff       	call   10001b40 <createEllipseRegion(int, int, int, int)+0x4e>	10001b40: R_386_PC32	KePanic(char const*)
10001b44:	83 c4 10             	add    esp,0x10
10001b47:	89 ef                	mov    edi,ebp
10001b49:	31 c0                	xor    eax,eax
10001b4b:	39 d8                	cmp    eax,ebx
10001b4d:	0f 8d 88 00 00 00    	jge    10001bdb <createEllipseRegion(int, int, int, int)+0xe9>
10001b53:	89 04 24             	mov    DWORD PTR [esp],eax
10001b56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001b5a:	db 04 24             	fild   DWORD PTR [esp]
10001b5d:	8d 53 ff             	lea    edx,[ebx-0x1]
10001b60:	83 ec 10             	sub    esp,0x10
10001b63:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10001b67:	d8 c0                	fadd   st,st(0)
10001b69:	83 c7 0c             	add    edi,0xc
10001b6c:	da 74 24 10          	fidiv  DWORD PTR [esp+0x10]
10001b70:	d9 e8                	fld1   
10001b72:	dc e1                	fsubr  st(1),st
10001b74:	d9 c9                	fxch   st(1)
10001b76:	d8 c8                	fmul   st,st(0)
10001b78:	de e9                	fsubp  st(1),st
10001b7a:	dd 1c 24             	fstp   QWORD PTR [esp]
10001b7d:	e8 fc ff ff ff       	call   10001b7e <createEllipseRegion(int, int, int, int)+0x8c>	10001b7e: R_386_PC32	sqrt
10001b82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001b86:	d9 7c 24 1e          	fnstcw WORD PTR [esp+0x1e]
10001b8a:	db 44 24 4c          	fild   DWORD PTR [esp+0x4c]
10001b8e:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
10001b93:	dc c9                	fmul   st(1),st
10001b95:	80 ce 0c             	or     dh,0xc
10001b98:	d8 e1                	fsub   st,st(1)
10001b9a:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
10001b9f:	d8 0d e0 8f 00 10    	fmul   DWORD PTR ds:0x10008fe0	10001ba1: R_386_32	.text
10001ba5:	40                   	inc    eax
10001ba6:	d9 6c 24 1c          	fldcw  WORD PTR [esp+0x1c]
10001baa:	db 5c 24 18          	fistp  DWORD PTR [esp+0x18]
10001bae:	d9 6c 24 1e          	fldcw  WORD PTR [esp+0x1e]
10001bb2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10001bb6:	c7 47 f4 02 00 01 00 	mov    DWORD PTR [edi-0xc],0x10002
10001bbd:	89 57 f8             	mov    DWORD PTR [edi-0x8],edx
10001bc0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10001bc4:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
10001bc8:	d9 6c 24 1c          	fldcw  WORD PTR [esp+0x1c]
10001bcc:	db 5f fc             	fistp  DWORD PTR [edi-0x4]
10001bcf:	d9 6c 24 1e          	fldcw  WORD PTR [esp+0x1e]
10001bd3:	83 c4 10             	add    esp,0x10
10001bd6:	e9 70 ff ff ff       	jmp    10001b4b <createEllipseRegion(int, int, int, int)+0x59>
10001bdb:	85 db                	test   ebx,ebx
10001bdd:	79 02                	jns    10001be1 <createEllipseRegion(int, int, int, int)+0xef>
10001bdf:	31 db                	xor    ebx,ebx
10001be1:	6b db 0c             	imul   ebx,ebx,0xc
10001be4:	89 f0                	mov    eax,esi
10001be6:	c7 44 1d 00 ff ff ff ff 	mov    DWORD PTR [ebp+ebx*1+0x0],0xffffffff
10001bee:	83 c4 1c             	add    esp,0x1c
10001bf1:	5b                   	pop    ebx
10001bf2:	5e                   	pop    esi
10001bf3:	5f                   	pop    edi
10001bf4:	5d                   	pop    ebp
10001bf5:	c2 04 00             	ret    0x4

10001bf8 <createPolygonRegion(int*, int*, int)>:
10001bf8:	55                   	push   ebp
10001bf9:	57                   	push   edi
10001bfa:	56                   	push   esi
10001bfb:	53                   	push   ebx
10001bfc:	51                   	push   ecx
10001bfd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
10001c01:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10001c05:	8b 0e                	mov    ecx,DWORD PTR [esi]
10001c07:	8b 17                	mov    edx,DWORD PTR [edi]
10001c09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001c0d:	89 14 24             	mov    DWORD PTR [esp],edx
10001c10:	89 cb                	mov    ebx,ecx
10001c12:	31 f6                	xor    esi,esi
10001c14:	3b 74 24 24          	cmp    esi,DWORD PTR [esp+0x24]
10001c18:	7d 2b                	jge    10001c45 <createPolygonRegion(int*, int*, int)+0x4d>
10001c1a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001c1e:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
10001c21:	39 e9                	cmp    ecx,ebp
10001c23:	7e 02                	jle    10001c27 <createPolygonRegion(int*, int*, int)+0x2f>
10001c25:	89 e9                	mov    ecx,ebp
10001c27:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10001c2b:	8b 3c b7             	mov    edi,DWORD PTR [edi+esi*4]
10001c2e:	39 fa                	cmp    edx,edi
10001c30:	7e 02                	jle    10001c34 <createPolygonRegion(int*, int*, int)+0x3c>
10001c32:	89 fa                	mov    edx,edi
10001c34:	39 eb                	cmp    ebx,ebp
10001c36:	7d 02                	jge    10001c3a <createPolygonRegion(int*, int*, int)+0x42>
10001c38:	89 eb                	mov    ebx,ebp
10001c3a:	39 3c 24             	cmp    DWORD PTR [esp],edi
10001c3d:	7d 03                	jge    10001c42 <createPolygonRegion(int*, int*, int)+0x4a>
10001c3f:	89 3c 24             	mov    DWORD PTR [esp],edi
10001c42:	46                   	inc    esi
10001c43:	eb cf                	jmp    10001c14 <createPolygonRegion(int*, int*, int)+0x1c>
10001c45:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10001c4b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
10001c52:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
10001c55:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
10001c58:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
10001c5c:	29 cb                	sub    ebx,ecx
10001c5e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
10001c61:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
10001c64:	29 d3                	sub    ebx,edx
10001c66:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
10001c69:	5a                   	pop    edx
10001c6a:	5b                   	pop    ebx
10001c6b:	5e                   	pop    esi
10001c6c:	5f                   	pop    edi
10001c6d:	5d                   	pop    ebp
10001c6e:	c2 04 00             	ret    0x4

10001c71 <createRectangleRegion(int, int, int, int)>:
10001c71:	57                   	push   edi
10001c72:	56                   	push   esi
10001c73:	53                   	push   ebx
10001c74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001c78:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001c7c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10001c80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001c84:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
10001c87:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10001c8a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10001c8d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
10001c91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001c95:	c7 43 0c 10 00 00 00 	mov    DWORD PTR [ebx+0xc],0x10
10001c9c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10001c9f:	83 ec 0c             	sub    esp,0xc
10001ca2:	c1 e6 10             	shl    esi,0x10
10001ca5:	6a 10                	push   0x10
10001ca7:	83 ce 02             	or     esi,0x2
10001caa:	e8 fc ff ff ff       	call   10001cab <createRectangleRegion(int, int, int, int)+0x3a>	10001cab: R_386_PC32	malloc
10001caf:	83 c4 10             	add    esp,0x10
10001cb2:	89 03                	mov    DWORD PTR [ebx],eax
10001cb4:	89 30                	mov    DWORD PTR [eax],esi
10001cb6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001cbd:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
10001cc0:	c7 40 0c ff ff ff ff 	mov    DWORD PTR [eax+0xc],0xffffffff
10001cc7:	89 d8                	mov    eax,ebx
10001cc9:	5b                   	pop    ebx
10001cca:	5e                   	pop    esi
10001ccb:	5f                   	pop    edi
10001ccc:	c2 04 00             	ret    0x4

10001ccf <createBorderRegion(int, int, int, int, int)>:
10001ccf:	55                   	push   ebp
10001cd0:	57                   	push   edi
10001cd1:	56                   	push   esi
10001cd2:	53                   	push   ebx
10001cd3:	83 ec 18             	sub    esp,0x18
10001cd6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10001cda:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10001cde:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10001ce2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10001ce6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001cea:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
10001ced:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10001cf0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10001cf3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
10001cf7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001cfb:	c7 43 0c 30 00 00 00 	mov    DWORD PTR [ebx+0xc],0x30
10001d02:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10001d05:	6a 30                	push   0x30
10001d07:	e8 fc ff ff ff       	call   10001d08 <createBorderRegion(int, int, int, int, int)+0x39>	10001d08: R_386_PC32	malloc
10001d0c:	8d 4c 2d 00          	lea    ecx,[ebp+ebp*1+0x0]
10001d10:	89 03                	mov    DWORD PTR [ebx],eax
10001d12:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001d19:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
10001d1c:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10001d23:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
10001d26:	89 78 1c             	mov    DWORD PTR [eax+0x1c],edi
10001d29:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
10001d30:	89 78 28             	mov    DWORD PTR [eax+0x28],edi
10001d33:	c7 40 2c ff ff ff ff 	mov    DWORD PTR [eax+0x2c],0xffffffff
10001d3a:	89 ea                	mov    edx,ebp
10001d3c:	29 ce                	sub    esi,ecx
10001d3e:	c1 e2 10             	shl    edx,0x10
10001d41:	89 f9                	mov    ecx,edi
10001d43:	83 ca 02             	or     edx,0x2
10001d46:	29 e9                	sub    ecx,ebp
10001d48:	89 10                	mov    DWORD PTR [eax],edx
10001d4a:	89 48 18             	mov    DWORD PTR [eax+0x18],ecx
10001d4d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
10001d50:	c1 e6 10             	shl    esi,0x10
10001d53:	83 ce 04             	or     esi,0x4
10001d56:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
10001d59:	83 c4 1c             	add    esp,0x1c
10001d5c:	89 d8                	mov    eax,ebx
10001d5e:	5b                   	pop    ebx
10001d5f:	5e                   	pop    esi
10001d60:	5f                   	pop    edi
10001d61:	5d                   	pop    ebp
10001d62:	c2 04 00             	ret    0x4

10001d65 <createAntRegion(int, int, int, int, int)>:
10001d65:	53                   	push   ebx
10001d66:	83 ec 10             	sub    esp,0x10
10001d69:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10001d6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001d71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001d75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001d79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001d7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001d81:	53                   	push   ebx
10001d82:	e8 fc ff ff ff       	call   10001d83 <createAntRegion(int, int, int, int, int)+0x1e>	10001d83: R_386_PC32	createBorderRegion(int, int, int, int, int)
10001d87:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
10001d8b:	89 d8                	mov    eax,ebx
10001d8d:	83 c4 24             	add    esp,0x24
10001d90:	5b                   	pop    ebx
10001d91:	c2 04 00             	ret    0x4

10001d94 <compressScanlineAndAddToRegion(Region*, int, unsigned int*, unsigned int, unsigned int)>:
10001d94:	57                   	push   edi
10001d95:	56                   	push   esi
10001d96:	be 04 00 00 00       	mov    esi,0x4
10001d9b:	53                   	push   ebx
10001d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10001da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001da4:	8b 18                	mov    ebx,DWORD PTR [eax]
10001da6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001daa:	99                   	cdq    
10001dab:	f7 fe                	idiv   esi
10001dad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001db1:	8d 7c 83 04          	lea    edi,[ebx+eax*4+0x4]
10001db5:	c1 e2 10             	shl    edx,0x10
10001db8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10001dbc:	09 ca                	or     edx,ecx
10001dbe:	89 14 83             	mov    DWORD PTR [ebx+eax*4],edx
10001dc1:	8d 14 8d 00 00 00 00 	lea    edx,[ecx*4+0x0]
10001dc8:	89 d1                	mov    ecx,edx
10001dca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10001dcc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001dd0:	5b                   	pop    ebx
10001dd1:	8d 44 02 04          	lea    eax,[edx+eax*1+0x4]
10001dd5:	5e                   	pop    esi
10001dd6:	5f                   	pop    edi
10001dd7:	c3                   	ret    

10001dd8 <performRegionOperation(Region, Region, RegionOperation)>:
10001dd8:	55                   	push   ebp
10001dd9:	57                   	push   edi
10001dda:	56                   	push   esi
10001ddb:	53                   	push   ebx
10001ddc:	81 ec 7c 20 00 00    	sub    esp,0x207c
10001de2:	8b 84 24 94 20 00 00 	mov    eax,DWORD PTR [esp+0x2094]
10001de9:	8b b4 24 b0 20 00 00 	mov    esi,DWORD PTR [esp+0x20b0]
10001df0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001df4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10001df8:	8b 84 24 9c 20 00 00 	mov    eax,DWORD PTR [esp+0x209c]
10001dff:	8b b4 24 b8 20 00 00 	mov    esi,DWORD PTR [esp+0x20b8]
10001e06:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10001e0a:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
10001e0e:	8b 84 24 a0 20 00 00 	mov    eax,DWORD PTR [esp+0x20a0]
10001e15:	8b b4 24 bc 20 00 00 	mov    esi,DWORD PTR [esp+0x20bc]
10001e1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10001e20:	8b 94 24 c0 20 00 00 	mov    edx,DWORD PTR [esp+0x20c0]
10001e27:	8b 84 24 a4 20 00 00 	mov    eax,DWORD PTR [esp+0x20a4]
10001e2e:	8b ac 24 90 20 00 00 	mov    ebp,DWORD PTR [esp+0x2090]
10001e35:	8b 8c 24 a8 20 00 00 	mov    ecx,DWORD PTR [esp+0x20a8]
10001e3c:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10001e40:	8b 9c 24 c4 20 00 00 	mov    ebx,DWORD PTR [esp+0x20c4]
10001e47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001e4b:	39 d0                	cmp    eax,edx
10001e4d:	7e 04                	jle    10001e53 <performRegionOperation(Region, Region, RegionOperation)+0x7b>
10001e4f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
10001e53:	89 ce                	mov    esi,ecx
10001e55:	39 d9                	cmp    ecx,ebx
10001e57:	7e 02                	jle    10001e5b <performRegionOperation(Region, Region, RegionOperation)+0x83>
10001e59:	89 de                	mov    esi,ebx
10001e5b:	8b bc 24 98 20 00 00 	mov    edi,DWORD PTR [esp+0x2098]
10001e62:	01 c7                	add    edi,eax
10001e64:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
10001e68:	8b bc 24 b4 20 00 00 	mov    edi,DWORD PTR [esp+0x20b4]
10001e6f:	01 d7                	add    edi,edx
10001e71:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
10001e75:	7d 04                	jge    10001e7b <performRegionOperation(Region, Region, RegionOperation)+0xa3>
10001e77:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10001e7b:	2b 7c 24 04          	sub    edi,DWORD PTR [esp+0x4]
10001e7f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10001e83:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
10001e87:	01 cf                	add    edi,ecx
10001e89:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
10001e8d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
10001e91:	01 df                	add    edi,ebx
10001e93:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
10001e97:	7d 04                	jge    10001e9d <performRegionOperation(Region, Region, RegionOperation)+0xc5>
10001e99:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10001e9d:	29 f7                	sub    edi,esi
10001e9f:	39 d9                	cmp    ecx,ebx
10001ea1:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
10001ea5:	7c 10                	jl     10001eb7 <performRegionOperation(Region, Region, RegionOperation)+0xdf>
10001ea7:	89 cf                	mov    edi,ecx
10001ea9:	29 df                	sub    edi,ebx
10001eab:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10001eaf:	31 ff                	xor    edi,edi
10001eb1:	39 d9                	cmp    ecx,ebx
10001eb3:	75 0e                	jne    10001ec3 <performRegionOperation(Region, Region, RegionOperation)+0xeb>
10001eb5:	eb 08                	jmp    10001ebf <performRegionOperation(Region, Region, RegionOperation)+0xe7>
10001eb7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
10001ebf:	29 cb                	sub    ebx,ecx
10001ec1:	89 df                	mov    edi,ebx
10001ec3:	39 d0                	cmp    eax,edx
10001ec5:	7c 16                	jl     10001edd <performRegionOperation(Region, Region, RegionOperation)+0x105>
10001ec7:	89 c3                	mov    ebx,eax
10001ec9:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10001ed1:	29 d3                	sub    ebx,edx
10001ed3:	39 d0                	cmp    eax,edx
10001ed5:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
10001ed9:	75 10                	jne    10001eeb <performRegionOperation(Region, Region, RegionOperation)+0x113>
10001edb:	eb 08                	jmp    10001ee5 <performRegionOperation(Region, Region, RegionOperation)+0x10d>
10001edd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001ee5:	29 c2                	sub    edx,eax
10001ee7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
10001eeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001eef:	89 75 14             	mov    DWORD PTR [ebp+0x14],esi
10001ef2:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
10001ef5:	c6 45 18 00          	mov    BYTE PTR [ebp+0x18],0x0
10001ef9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001efd:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10001f00:	f7 df                	neg    edi
10001f02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10001f06:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
10001f09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001f0d:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
10001f11:	c1 e0 02             	shl    eax,0x2
10001f14:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10001f17:	51                   	push   ecx
10001f18:	51                   	push   ecx
10001f19:	6a 01                	push   0x1
10001f1b:	50                   	push   eax
10001f1c:	e8 fc ff ff ff       	call   10001f1d <performRegionOperation(Region, Region, RegionOperation)+0x145>	10001f1d: R_386_PC32	calloc
10001f21:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
10001f29:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
10001f31:	c7 84 24 80 08 00 00 ff ff ff ff 	mov    DWORD PTR [esp+0x880],0xffffffff
10001f3c:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10001f40:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
10001f43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10001f47:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
10001f4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001f4f:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10001f53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001f57:	f7 d8                	neg    eax
10001f59:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001f5d:	83 c4 10             	add    esp,0x10
10001f60:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
10001f68:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
10001f70:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10001f78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10001f7c:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
10001f80:	39 44 24 3c          	cmp    DWORD PTR [esp+0x3c],eax
10001f84:	0f 8e cc 01 00 00    	jle    10002156 <performRegionOperation(Region, Region, RegionOperation)+0x37e>
10001f8a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
10001f8e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10001f92:	f7 d2                	not    edx
10001f94:	c1 ea 1f             	shr    edx,0x1f
10001f97:	39 74 24 40          	cmp    DWORD PTR [esp+0x40],esi
10001f9b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
10001f9f:	0f 9f c0             	setg   al
10001fa2:	21 d0                	and    eax,edx
10001fa4:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
10001fa8:	88 44 24 56          	mov    BYTE PTR [esp+0x56],al
10001fac:	89 f2                	mov    edx,esi
10001fae:	0f 9f c0             	setg   al
10001fb1:	f7 d2                	not    edx
10001fb3:	31 db                	xor    ebx,ebx
10001fb5:	c1 ea 1f             	shr    edx,0x1f
10001fb8:	21 d0                	and    eax,edx
10001fba:	88 44 24 57          	mov    BYTE PTR [esp+0x57],al
10001fbe:	80 7c 1c 56 00       	cmp    BYTE PTR [esp+ebx*1+0x56],0x0
10001fc3:	75 0a                	jne    10001fcf <performRegionOperation(Region, Region, RegionOperation)+0x1f7>
10001fc5:	c7 44 9c 68 00 00 00 00 	mov    DWORD PTR [esp+ebx*4+0x68],0x0
10001fcd:	eb 1b                	jmp    10001fea <performRegionOperation(Region, Region, RegionOperation)+0x212>
10001fcf:	83 7c 9c 68 00       	cmp    DWORD PTR [esp+ebx*4+0x68],0x0
10001fd4:	75 14                	jne    10001fea <performRegionOperation(Region, Region, RegionOperation)+0x212>
10001fd6:	8b 4c 9c 58          	mov    ecx,DWORD PTR [esp+ebx*4+0x58]
10001fda:	8b 01                	mov    eax,DWORD PTR [ecx]
10001fdc:	83 f8 ff             	cmp    eax,0xffffffff
10001fdf:	0f 85 a5 01 00 00    	jne    1000218a <performRegionOperation(Region, Region, RegionOperation)+0x3b2>
10001fe5:	c6 44 1c 56 00       	mov    BYTE PTR [esp+ebx*1+0x56],0x0
10001fea:	83 fb 01             	cmp    ebx,0x1
10001fed:	74 07                	je     10001ff6 <performRegionOperation(Region, Region, RegionOperation)+0x21e>
10001fef:	bb 01 00 00 00       	mov    ebx,0x1
10001ff4:	eb c8                	jmp    10001fbe <performRegionOperation(Region, Region, RegionOperation)+0x1e6>
10001ff6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10001ffa:	c6 44 24 4e 01       	mov    BYTE PTR [esp+0x4e],0x1
10001fff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10002003:	c6 44 24 4d 00       	mov    BYTE PTR [esp+0x4d],0x0
10002008:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
1000200d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002011:	0f 95 44 24 4f       	setne  BYTE PTR [esp+0x4f]
10002016:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000201a:	31 f6                	xor    esi,esi
1000201c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
10002020:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
10002028:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
1000202c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
10002034:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002038:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
10002040:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10002044:	31 c0                	xor    eax,eax
10002046:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
1000204b:	74 0a                	je     10002057 <performRegionOperation(Region, Region, RegionOperation)+0x27f>
1000204d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10002051:	39 54 24 2c          	cmp    DWORD PTR [esp+0x2c],edx
10002055:	7f 22                	jg     10002079 <performRegionOperation(Region, Region, RegionOperation)+0x2a1>
10002057:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
1000205c:	74 62                	je     100020c0 <performRegionOperation(Region, Region, RegionOperation)+0x2e8>
1000205e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10002062:	39 54 24 34          	cmp    DWORD PTR [esp+0x34],edx
10002066:	7e 58                	jle    100020c0 <performRegionOperation(Region, Region, RegionOperation)+0x2e8>
10002068:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
1000206c:	39 54 24 2c          	cmp    DWORD PTR [esp+0x2c],edx
10002070:	7e 2e                	jle    100020a0 <performRegionOperation(Region, Region, RegionOperation)+0x2c8>
10002072:	80 7c 24 4f 00       	cmp    BYTE PTR [esp+0x4f],0x0
10002077:	74 27                	je     100020a0 <performRegionOperation(Region, Region, RegionOperation)+0x2c8>
10002079:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
1000207d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10002081:	03 8c 94 70 10 00 00 	add    ecx,DWORD PTR [esp+edx*4+0x1070]
10002088:	83 ca ff             	or     edx,0xffffffff
1000208b:	89 cf                	mov    edi,ecx
1000208d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10002091:	39 4c 24 34          	cmp    DWORD PTR [esp+0x34],ecx
10002095:	7e 1b                	jle    100020b2 <performRegionOperation(Region, Region, RegionOperation)+0x2da>
10002097:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
1000209c:	74 14                	je     100020b2 <performRegionOperation(Region, Region, RegionOperation)+0x2da>
1000209e:	eb 03                	jmp    100020a3 <performRegionOperation(Region, Region, RegionOperation)+0x2cb>
100020a0:	83 cf ff             	or     edi,0xffffffff
100020a3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
100020a7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
100020ab:	03 94 8c 70 18 00 00 	add    edx,DWORD PTR [esp+ecx*4+0x1870]
100020b2:	83 ff ff             	cmp    edi,0xffffffff
100020b5:	0f 85 9e 01 00 00    	jne    10002259 <performRegionOperation(Region, Region, RegionOperation)+0x481>
100020bb:	e9 18 01 00 00       	jmp    100021d8 <performRegionOperation(Region, Region, RegionOperation)+0x400>
100020c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
100020c4:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
100020c8:	75 16                	jne    100020e0 <performRegionOperation(Region, Region, RegionOperation)+0x308>
100020ca:	80 7c 24 4e 00       	cmp    BYTE PTR [esp+0x4e],0x0
100020cf:	74 0f                	je     100020e0 <performRegionOperation(Region, Region, RegionOperation)+0x308>
100020d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
100020d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100020d9:	43                   	inc    ebx
100020da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100020de:	eb 43                	jmp    10002123 <performRegionOperation(Region, Region, RegionOperation)+0x34b>
100020e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
100020e5:	74 24                	je     1000210b <performRegionOperation(Region, Region, RegionOperation)+0x333>
100020e7:	83 ec 0c             	sub    esp,0xc
100020ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100020ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100020f2:	8d 84 24 84 08 00 00 	lea    eax,[esp+0x884]
100020f9:	50                   	push   eax
100020fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100020fe:	55                   	push   ebp
100020ff:	e8 fc ff ff ff       	call   10002100 <performRegionOperation(Region, Region, RegionOperation)+0x328>	10002100: R_386_PC32	compressScanlineAndAddToRegion(Region*, int, unsigned int*, unsigned int, unsigned int)
10002104:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10002108:	83 c4 20             	add    esp,0x20
1000210b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000210f:	8d 74 24 70          	lea    esi,[esp+0x70]
10002113:	8d bc 24 70 08 00 00 	lea    edi,[esp+0x870]
1000211a:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10002121:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002123:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10002127:	85 c0                	test   eax,eax
10002129:	74 05                	je     10002130 <performRegionOperation(Region, Region, RegionOperation)+0x358>
1000212b:	48                   	dec    eax
1000212c:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
10002130:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
10002134:	85 c0                	test   eax,eax
10002136:	74 05                	je     1000213d <performRegionOperation(Region, Region, RegionOperation)+0x365>
10002138:	48                   	dec    eax
10002139:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
1000213d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10002141:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
10002145:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
10002149:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000214d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
10002151:	e9 22 fe ff ff       	jmp    10001f78 <performRegionOperation(Region, Region, RegionOperation)+0x1a0>
10002156:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
1000215b:	0f 84 2f 01 00 00    	je     10002290 <performRegionOperation(Region, Region, RegionOperation)+0x4b8>
10002161:	83 ec 0c             	sub    esp,0xc
10002164:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10002168:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000216c:	8d 84 24 84 08 00 00 	lea    eax,[esp+0x884]
10002173:	50                   	push   eax
10002174:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10002178:	55                   	push   ebp
10002179:	e8 fc ff ff ff       	call   1000217a <performRegionOperation(Region, Region, RegionOperation)+0x3a2>	1000217a: R_386_PC32	compressScanlineAndAddToRegion(Region*, int, unsigned int*, unsigned int, unsigned int)
1000217e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10002182:	83 c4 20             	add    esp,0x20
10002185:	e9 06 01 00 00       	jmp    10002290 <performRegionOperation(Region, Region, RegionOperation)+0x4b8>
1000218a:	0f b7 d0             	movzx  edx,ax
1000218d:	83 c1 04             	add    ecx,0x4
10002190:	c1 e8 10             	shr    eax,0x10
10002193:	89 54 9c 60          	mov    DWORD PTR [esp+ebx*4+0x60],edx
10002197:	89 44 9c 68          	mov    DWORD PTR [esp+ebx*4+0x68],eax
1000219b:	89 4c 9c 58          	mov    DWORD PTR [esp+ebx*4+0x58],ecx
1000219f:	89 d8                	mov    eax,ebx
100021a1:	8d b4 24 70 10 00 00 	lea    esi,[esp+0x1070]
100021a8:	c1 e0 0b             	shl    eax,0xb
100021ab:	89 d9                	mov    ecx,ebx
100021ad:	01 f0                	add    eax,esi
100021af:	c1 e1 09             	shl    ecx,0x9
100021b2:	01 ca                	add    edx,ecx
100021b4:	8d 8c 94 70 10 00 00 	lea    ecx,[esp+edx*4+0x1070]
100021bb:	39 c8                	cmp    eax,ecx
100021bd:	0f 84 27 fe ff ff    	je     10001fea <performRegionOperation(Region, Region, RegionOperation)+0x212>
100021c3:	8b 54 9c 58          	mov    edx,DWORD PTR [esp+ebx*4+0x58]
100021c7:	83 c0 04             	add    eax,0x4
100021ca:	8b 32                	mov    esi,DWORD PTR [edx]
100021cc:	83 c2 04             	add    edx,0x4
100021cf:	89 70 fc             	mov    DWORD PTR [eax-0x4],esi
100021d2:	89 54 9c 58          	mov    DWORD PTR [esp+ebx*4+0x58],edx
100021d6:	eb e3                	jmp    100021bb <performRegionOperation(Region, Region, RegionOperation)+0x3e3>
100021d8:	31 c0                	xor    eax,eax
100021da:	83 fa ff             	cmp    edx,0xffffffff
100021dd:	74 0b                	je     100021ea <performRegionOperation(Region, Region, RegionOperation)+0x412>
100021df:	83 f6 01             	xor    esi,0x1
100021e2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
100021e6:	89 d7                	mov    edi,edx
100021e8:	eb 02                	jmp    100021ec <performRegionOperation(Region, Region, RegionOperation)+0x414>
100021ea:	31 f6                	xor    esi,esi
100021ec:	89 f2                	mov    edx,esi
100021ee:	21 c2                	and    edx,eax
100021f0:	83 bc 24 cc 20 00 00 01 	cmp    DWORD PTR [esp+0x20cc],0x1
100021f8:	74 2f                	je     10002229 <performRegionOperation(Region, Region, RegionOperation)+0x451>
100021fa:	89 f2                	mov    edx,esi
100021fc:	7f 0c                	jg     1000220a <performRegionOperation(Region, Region, RegionOperation)+0x432>
100021fe:	09 c2                	or     edx,eax
10002200:	83 bc 24 cc 20 00 00 00 	cmp    DWORD PTR [esp+0x20cc],0x0
10002208:	eb 14                	jmp    1000221e <performRegionOperation(Region, Region, RegionOperation)+0x446>
1000220a:	83 bc 24 cc 20 00 00 02 	cmp    DWORD PTR [esp+0x20cc],0x2
10002212:	74 10                	je     10002224 <performRegionOperation(Region, Region, RegionOperation)+0x44c>
10002214:	31 c2                	xor    edx,eax
10002216:	83 bc 24 cc 20 00 00 03 	cmp    DWORD PTR [esp+0x20cc],0x3
1000221e:	74 09                	je     10002229 <performRegionOperation(Region, Region, RegionOperation)+0x451>
10002220:	88 c2                	mov    dl,al
10002222:	eb 05                	jmp    10002229 <performRegionOperation(Region, Region, RegionOperation)+0x451>
10002224:	83 f2 01             	xor    edx,0x1
10002227:	21 c2                	and    edx,eax
10002229:	38 54 24 4d          	cmp    BYTE PTR [esp+0x4d],dl
1000222d:	75 09                	jne    10002238 <performRegionOperation(Region, Region, RegionOperation)+0x460>
1000222f:	88 54 24 4d          	mov    BYTE PTR [esp+0x4d],dl
10002233:	e9 0e fe ff ff       	jmp    10002046 <performRegionOperation(Region, Region, RegionOperation)+0x26e>
10002238:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
1000223c:	39 bc 8c 70 08 00 00 	cmp    DWORD PTR [esp+ecx*4+0x870],edi
10002243:	74 05                	je     1000224a <performRegionOperation(Region, Region, RegionOperation)+0x472>
10002245:	c6 44 24 4e 00       	mov    BYTE PTR [esp+0x4e],0x0
1000224a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
1000224e:	89 7c 8c 70          	mov    DWORD PTR [esp+ecx*4+0x70],edi
10002252:	41                   	inc    ecx
10002253:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
10002257:	eb d6                	jmp    1000222f <performRegionOperation(Region, Region, RegionOperation)+0x457>
10002259:	83 fa ff             	cmp    edx,0xffffffff
1000225c:	74 0a                	je     10002268 <performRegionOperation(Region, Region, RegionOperation)+0x490>
1000225e:	39 d7                	cmp    edi,edx
10002260:	0f 8f 79 ff ff ff    	jg     100021df <performRegionOperation(Region, Region, RegionOperation)+0x407>
10002266:	eb 02                	jmp    1000226a <performRegionOperation(Region, Region, RegionOperation)+0x492>
10002268:	31 f6                	xor    esi,esi
1000226a:	83 f0 01             	xor    eax,0x1
1000226d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
10002271:	83 fa ff             	cmp    edx,0xffffffff
10002274:	0f 84 72 ff ff ff    	je     100021ec <performRegionOperation(Region, Region, RegionOperation)+0x414>
1000227a:	39 d7                	cmp    edi,edx
1000227c:	0f 8d 5d ff ff ff    	jge    100021df <performRegionOperation(Region, Region, RegionOperation)+0x407>
10002282:	83 ff ff             	cmp    edi,0xffffffff
10002285:	0f 85 61 ff ff ff    	jne    100021ec <performRegionOperation(Region, Region, RegionOperation)+0x414>
1000228b:	e9 4f ff ff ff       	jmp    100021df <performRegionOperation(Region, Region, RegionOperation)+0x407>
10002290:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10002294:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
10002297:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
1000229a:	bb 04 00 00 00       	mov    ebx,0x4
1000229f:	99                   	cdq    
100022a0:	f7 fb                	idiv   ebx
100022a2:	c7 04 81 ff ff ff ff 	mov    DWORD PTR [ecx+eax*4],0xffffffff
100022a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100022ac:	83 c0 04             	add    eax,0x4
100022af:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100022b2:	52                   	push   edx
100022b3:	52                   	push   edx
100022b4:	50                   	push   eax
100022b5:	51                   	push   ecx
100022b6:	e8 fc ff ff ff       	call   100022b7 <performRegionOperation(Region, Region, RegionOperation)+0x4df>	100022b7: R_386_PC32	realloc
100022bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
100022be:	81 c4 8c 20 00 00    	add    esp,0x208c
100022c4:	89 e8                	mov    eax,ebp
100022c6:	5b                   	pop    ebx
100022c7:	5e                   	pop    esi
100022c8:	5f                   	pop    edi
100022c9:	5d                   	pop    ebp
100022ca:	c2 04 00             	ret    0x4

100022cd <getRegionUnion(Region, Region)>:
100022cd:	57                   	push   edi
100022ce:	b9 07 00 00 00       	mov    ecx,0x7
100022d3:	56                   	push   esi
100022d4:	53                   	push   ebx
100022d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100022d9:	6a 00                	push   0x0
100022db:	83 ec 1c             	sub    esp,0x1c
100022de:	8d 74 24 50          	lea    esi,[esp+0x50]
100022e2:	89 e7                	mov    edi,esp
100022e4:	83 ec 1c             	sub    esp,0x1c
100022e7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022e9:	8d 74 24 50          	lea    esi,[esp+0x50]
100022ed:	89 e7                	mov    edi,esp
100022ef:	b9 07 00 00 00       	mov    ecx,0x7
100022f4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022f6:	53                   	push   ebx
100022f7:	e8 fc ff ff ff       	call   100022f8 <getRegionUnion(Region, Region)+0x2b>	100022f8: R_386_PC32	performRegionOperation(Region, Region, RegionOperation)
100022fc:	89 d8                	mov    eax,ebx
100022fe:	83 c4 3c             	add    esp,0x3c
10002301:	5b                   	pop    ebx
10002302:	5e                   	pop    esi
10002303:	5f                   	pop    edi
10002304:	c2 04 00             	ret    0x4

10002307 <getRegionDifference(Region, Region)>:
10002307:	57                   	push   edi
10002308:	b9 07 00 00 00       	mov    ecx,0x7
1000230d:	56                   	push   esi
1000230e:	53                   	push   ebx
1000230f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002313:	6a 02                	push   0x2
10002315:	83 ec 1c             	sub    esp,0x1c
10002318:	8d 74 24 50          	lea    esi,[esp+0x50]
1000231c:	89 e7                	mov    edi,esp
1000231e:	83 ec 1c             	sub    esp,0x1c
10002321:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002323:	8d 74 24 50          	lea    esi,[esp+0x50]
10002327:	89 e7                	mov    edi,esp
10002329:	b9 07 00 00 00       	mov    ecx,0x7
1000232e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002330:	53                   	push   ebx
10002331:	e8 fc ff ff ff       	call   10002332 <getRegionDifference(Region, Region)+0x2b>	10002332: R_386_PC32	performRegionOperation(Region, Region, RegionOperation)
10002336:	89 d8                	mov    eax,ebx
10002338:	83 c4 3c             	add    esp,0x3c
1000233b:	5b                   	pop    ebx
1000233c:	5e                   	pop    esi
1000233d:	5f                   	pop    edi
1000233e:	c2 04 00             	ret    0x4

10002341 <createSlowRoundedRectangleRegion(int, int, int, int, int)>:
10002341:	55                   	push   ebp
10002342:	57                   	push   edi
10002343:	56                   	push   esi
10002344:	53                   	push   ebx
10002345:	81 ec 4c 01 00 00    	sub    esp,0x14c
1000234b:	8b 9c 24 64 01 00 00 	mov    ebx,DWORD PTR [esp+0x164]
10002352:	8b b4 24 68 01 00 00 	mov    esi,DWORD PTR [esp+0x168]
10002359:	8d 6c 24 28          	lea    ebp,[esp+0x28]
1000235d:	83 ec 0c             	sub    esp,0xc
10002360:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
10002367:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
1000236e:	56                   	push   esi
1000236f:	53                   	push   ebx
10002370:	55                   	push   ebp
10002371:	e8 fc ff ff ff       	call   10002372 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x31>	10002372: R_386_PC32	createRectangleRegion(int, int, int, int)
10002376:	ff b4 24 90 01 00 00 	push   DWORD PTR [esp+0x190]
1000237d:	ff b4 24 94 01 00 00 	push   DWORD PTR [esp+0x194]
10002384:	56                   	push   esi
10002385:	53                   	push   ebx
10002386:	8d 44 24 70          	lea    eax,[esp+0x70]
1000238a:	50                   	push   eax
1000238b:	e8 fc ff ff ff       	call   1000238c <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x4b>	1000238c: R_386_PC32	createRectangleRegion(int, int, int, int)
10002390:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10002397:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000239b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
100023a2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
100023a6:	8b 84 24 a0 01 00 00 	mov    eax,DWORD PTR [esp+0x1a0]
100023ad:	83 c4 20             	add    esp,0x20
100023b0:	01 c0                	add    eax,eax
100023b2:	50                   	push   eax
100023b3:	50                   	push   eax
100023b4:	56                   	push   esi
100023b5:	53                   	push   ebx
100023b6:	8d 44 24 7c          	lea    eax,[esp+0x7c]
100023ba:	50                   	push   eax
100023bb:	e8 fc ff ff ff       	call   100023bc <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x7b>	100023bc: R_386_PC32	createEllipseRegion(int, int, int, int)
100023c0:	b9 07 00 00 00       	mov    ecx,0x7
100023c5:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
100023cc:	8d 9c 24 98 00 00 00 	lea    ebx,[esp+0x98]
100023d3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100023d7:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
100023de:	83 ec 14             	sub    esp,0x14
100023e1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100023e5:	89 e7                	mov    edi,esp
100023e7:	8d 74 24 74          	lea    esi,[esp+0x74]
100023eb:	83 ec 1c             	sub    esp,0x1c
100023ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100023f0:	89 e7                	mov    edi,esp
100023f2:	89 ee                	mov    esi,ebp
100023f4:	b9 07 00 00 00       	mov    ecx,0x7
100023f9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100023fb:	53                   	push   ebx
100023fc:	e8 fc ff ff ff       	call   100023fd <createSlowRoundedRectangleRegion(int, int, int, int, int)+0xbc>	100023fd: R_386_PC32	getRegionDifference(Region, Region)
10002401:	b9 07 00 00 00       	mov    ecx,0x7
10002406:	8b 94 24 b8 01 00 00 	mov    edx,DWORD PTR [esp+0x1b8]
1000240d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10002411:	2b 94 24 c0 01 00 00 	sub    edx,DWORD PTR [esp+0x1c0]
10002418:	8d ac 24 e4 00 00 00 	lea    ebp,[esp+0xe4]
1000241f:	01 d0                	add    eax,edx
10002421:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
10002425:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
1000242c:	83 c4 2c             	add    esp,0x2c
1000242f:	89 e7                	mov    edi,esp
10002431:	8d 74 24 64          	lea    esi,[esp+0x64]
10002435:	83 ec 1c             	sub    esp,0x1c
10002438:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000243a:	89 e7                	mov    edi,esp
1000243c:	89 de                	mov    esi,ebx
1000243e:	b9 07 00 00 00       	mov    ecx,0x7
10002443:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002445:	55                   	push   ebp
10002446:	e8 fc ff ff ff       	call   10002447 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x106>	10002447: R_386_PC32	getRegionDifference(Region, Region)
1000244b:	b9 07 00 00 00       	mov    ecx,0x7
10002450:	8b 84 24 ac 01 00 00 	mov    eax,DWORD PTR [esp+0x1ac]
10002457:	8d 9c 24 f0 00 00 00 	lea    ebx,[esp+0xf0]
1000245e:	2b 84 24 b0 01 00 00 	sub    eax,DWORD PTR [esp+0x1b0]
10002465:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002469:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
1000246d:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
10002471:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
10002478:	83 c4 1c             	add    esp,0x1c
1000247b:	89 e7                	mov    edi,esp
1000247d:	8d 74 24 64          	lea    esi,[esp+0x64]
10002481:	83 ec 1c             	sub    esp,0x1c
10002484:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002486:	89 e7                	mov    edi,esp
10002488:	89 ee                	mov    esi,ebp
1000248a:	b9 07 00 00 00       	mov    ecx,0x7
1000248f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002491:	53                   	push   ebx
10002492:	e8 fc ff ff ff       	call   10002493 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x152>	10002493: R_386_PC32	getRegionDifference(Region, Region)
10002497:	b9 07 00 00 00       	mov    ecx,0x7
1000249c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100024a0:	89 84 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],eax
100024a7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
100024ae:	83 c4 1c             	add    esp,0x1c
100024b1:	89 e7                	mov    edi,esp
100024b3:	8d 74 24 64          	lea    esi,[esp+0x64]
100024b7:	83 ec 1c             	sub    esp,0x1c
100024ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100024bc:	89 e7                	mov    edi,esp
100024be:	89 de                	mov    esi,ebx
100024c0:	b9 07 00 00 00       	mov    ecx,0x7
100024c5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100024c7:	50                   	push   eax
100024c8:	e8 fc ff ff ff       	call   100024c9 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x188>	100024c9: R_386_PC32	getRegionDifference(Region, Region)
100024cd:	b9 07 00 00 00       	mov    ecx,0x7
100024d2:	8d ac 24 28 01 00 00 	lea    ebp,[esp+0x128]
100024d9:	83 c4 1c             	add    esp,0x1c
100024dc:	89 e7                	mov    edi,esp
100024de:	8d b4 24 80 00 00 00 	lea    esi,[esp+0x80]
100024e5:	83 ec 1c             	sub    esp,0x1c
100024e8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100024ea:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
100024f1:	89 e7                	mov    edi,esp
100024f3:	89 c6                	mov    esi,eax
100024f5:	b9 07 00 00 00       	mov    ecx,0x7
100024fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100024fc:	55                   	push   ebp
100024fd:	e8 fc ff ff ff       	call   100024fe <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x1bd>	100024fe: R_386_PC32	getRegionUnion(Region, Region)
10002502:	b9 07 00 00 00       	mov    ecx,0x7
10002507:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
1000250b:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
10002512:	2b 94 24 b0 01 00 00 	sub    edx,DWORD PTR [esp+0x1b0]
10002519:	03 54 24 4c          	add    edx,DWORD PTR [esp+0x4c]
1000251d:	89 94 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],edx
10002524:	83 c4 1c             	add    esp,0x1c
10002527:	89 e7                	mov    edi,esp
10002529:	8d b4 24 80 00 00 00 	lea    esi,[esp+0x80]
10002530:	83 ec 1c             	sub    esp,0x1c
10002533:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002535:	89 e7                	mov    edi,esp
10002537:	89 ee                	mov    esi,ebp
10002539:	b9 07 00 00 00       	mov    ecx,0x7
1000253e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002540:	53                   	push   ebx
10002541:	e8 fc ff ff ff       	call   10002542 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x201>	10002542: R_386_PC32	getRegionUnion(Region, Region)
10002546:	b9 07 00 00 00       	mov    ecx,0x7
1000254b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
1000254f:	8d ac 24 60 01 00 00 	lea    ebp,[esp+0x160]
10002556:	2b 84 24 b0 01 00 00 	sub    eax,DWORD PTR [esp+0x1b0]
1000255d:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10002561:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
10002568:	83 c4 1c             	add    esp,0x1c
1000256b:	89 e7                	mov    edi,esp
1000256d:	8d b4 24 80 00 00 00 	lea    esi,[esp+0x80]
10002574:	83 ec 1c             	sub    esp,0x1c
10002577:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002579:	89 e7                	mov    edi,esp
1000257b:	89 de                	mov    esi,ebx
1000257d:	b9 07 00 00 00       	mov    ecx,0x7
10002582:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002584:	55                   	push   ebp
10002585:	e8 fc ff ff ff       	call   10002586 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x245>	10002586: R_386_PC32	getRegionUnion(Region, Region)
1000258a:	b9 07 00 00 00       	mov    ecx,0x7
1000258f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10002593:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
1000259a:	83 c4 1c             	add    esp,0x1c
1000259d:	89 e7                	mov    edi,esp
1000259f:	8d b4 24 80 00 00 00 	lea    esi,[esp+0x80]
100025a6:	83 ec 1c             	sub    esp,0x1c
100025a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100025ab:	89 e7                	mov    edi,esp
100025ad:	89 ee                	mov    esi,ebp
100025af:	b9 07 00 00 00       	mov    ecx,0x7
100025b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100025b6:	ff b4 24 9c 01 00 00 	push   DWORD PTR [esp+0x19c]
100025bd:	e8 fc ff ff ff       	call   100025be <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x27d>	100025be: R_386_PC32	getRegionUnion(Region, Region)
100025c2:	83 c4 30             	add    esp,0x30
100025c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100025c9:	e8 fc ff ff ff       	call   100025ca <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x289>	100025ca: R_386_PC32	free
100025ce:	58                   	pop    eax
100025cf:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
100025d3:	e8 fc ff ff ff       	call   100025d4 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x293>	100025d4: R_386_PC32	free
100025d8:	5a                   	pop    edx
100025d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
100025dd:	e8 fc ff ff ff       	call   100025de <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x29d>	100025de: R_386_PC32	free
100025e2:	59                   	pop    ecx
100025e3:	ff b4 24 88 00 00 00 	push   DWORD PTR [esp+0x88]
100025ea:	e8 fc ff ff ff       	call   100025eb <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2aa>	100025eb: R_386_PC32	free
100025ef:	5b                   	pop    ebx
100025f0:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
100025f7:	e8 fc ff ff ff       	call   100025f8 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2b7>	100025f8: R_386_PC32	free
100025fc:	5e                   	pop    esi
100025fd:	ff b4 24 c0 00 00 00 	push   DWORD PTR [esp+0xc0]
10002604:	e8 fc ff ff ff       	call   10002605 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2c4>	10002605: R_386_PC32	free
10002609:	5f                   	pop    edi
1000260a:	ff b4 24 dc 00 00 00 	push   DWORD PTR [esp+0xdc]
10002611:	e8 fc ff ff ff       	call   10002612 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2d1>	10002612: R_386_PC32	free
10002616:	5d                   	pop    ebp
10002617:	ff b4 24 f8 00 00 00 	push   DWORD PTR [esp+0xf8]
1000261e:	e8 fc ff ff ff       	call   1000261f <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2de>	1000261f: R_386_PC32	free
10002623:	58                   	pop    eax
10002624:	ff b4 24 14 01 00 00 	push   DWORD PTR [esp+0x114]
1000262b:	e8 fc ff ff ff       	call   1000262c <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2eb>	1000262c: R_386_PC32	free
10002630:	58                   	pop    eax
10002631:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
10002638:	e8 fc ff ff ff       	call   10002639 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2f8>	10002639: R_386_PC32	free
1000263d:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
10002644:	81 c4 5c 01 00 00    	add    esp,0x15c
1000264a:	5b                   	pop    ebx
1000264b:	5e                   	pop    esi
1000264c:	5f                   	pop    edi
1000264d:	5d                   	pop    ebp
1000264e:	c2 04 00             	ret    0x4

10002651 <getRegionIntersection(Region, Region)>:
10002651:	57                   	push   edi
10002652:	b9 07 00 00 00       	mov    ecx,0x7
10002657:	56                   	push   esi
10002658:	53                   	push   ebx
10002659:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000265d:	6a 01                	push   0x1
1000265f:	83 ec 1c             	sub    esp,0x1c
10002662:	8d 74 24 50          	lea    esi,[esp+0x50]
10002666:	89 e7                	mov    edi,esp
10002668:	83 ec 1c             	sub    esp,0x1c
1000266b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000266d:	8d 74 24 50          	lea    esi,[esp+0x50]
10002671:	89 e7                	mov    edi,esp
10002673:	b9 07 00 00 00       	mov    ecx,0x7
10002678:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000267a:	53                   	push   ebx
1000267b:	e8 fc ff ff ff       	call   1000267c <getRegionIntersection(Region, Region)+0x2b>	1000267c: R_386_PC32	performRegionOperation(Region, Region, RegionOperation)
10002680:	89 d8                	mov    eax,ebx
10002682:	83 c4 3c             	add    esp,0x3c
10002685:	5b                   	pop    ebx
10002686:	5e                   	pop    esi
10002687:	5f                   	pop    edi
10002688:	c2 04 00             	ret    0x4

1000268b <getRegionXOR(Region, Region)>:
1000268b:	57                   	push   edi
1000268c:	b9 07 00 00 00       	mov    ecx,0x7
10002691:	56                   	push   esi
10002692:	53                   	push   ebx
10002693:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002697:	6a 03                	push   0x3
10002699:	83 ec 1c             	sub    esp,0x1c
1000269c:	8d 74 24 50          	lea    esi,[esp+0x50]
100026a0:	89 e7                	mov    edi,esp
100026a2:	83 ec 1c             	sub    esp,0x1c
100026a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100026a7:	8d 74 24 50          	lea    esi,[esp+0x50]
100026ab:	89 e7                	mov    edi,esp
100026ad:	b9 07 00 00 00       	mov    ecx,0x7
100026b2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100026b4:	53                   	push   ebx
100026b5:	e8 fc ff ff ff       	call   100026b6 <getRegionXOR(Region, Region)+0x2b>	100026b6: R_386_PC32	performRegionOperation(Region, Region, RegionOperation)
100026ba:	89 d8                	mov    eax,ebx
100026bc:	83 c4 3c             	add    esp,0x3c
100026bf:	5b                   	pop    ebx
100026c0:	5e                   	pop    esi
100026c1:	5f                   	pop    edi
100026c2:	c2 04 00             	ret    0x4

100026c5 <isPointInRegion(Region, int, int)>:
100026c5:	55                   	push   ebp
100026c6:	31 ed                	xor    ebp,ebp
100026c8:	57                   	push   edi
100026c9:	31 ff                	xor    edi,edi
100026cb:	56                   	push   esi
100026cc:	53                   	push   ebx
100026cd:	83 ec 24             	sub    esp,0x24
100026d0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100026d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100026d8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100026dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100026e0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100026e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100026e8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
100026ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100026f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100026f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100026f8:	39 6c 24 18          	cmp    DWORD PTR [esp+0x18],ebp
100026fc:	0f 8e bf 00 00 00    	jle    100027c1 <isPointInRegion(Region, int, int)+0xfc>
10002702:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10002706:	8d 47 01             	lea    eax,[edi+0x1]
10002709:	8b 1c be             	mov    ebx,DWORD PTR [esi+edi*4]
1000270c:	8d 14 bd 00 00 00 00 	lea    edx,[edi*4+0x0]
10002713:	83 fb ff             	cmp    ebx,0xffffffff
10002716:	0f 84 a5 00 00 00    	je     100027c1 <isPointInRegion(Region, int, int)+0xfc>
1000271c:	8d 7c 16 04          	lea    edi,[esi+edx*1+0x4]
10002720:	0f b7 cb             	movzx  ecx,bx
10002723:	89 3c 24             	mov    DWORD PTR [esp],edi
10002726:	c1 eb 10             	shr    ebx,0x10
10002729:	8d 3c 08             	lea    edi,[eax+ecx*1]
1000272c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
10002730:	31 d2                	xor    edx,edx
10002732:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002736:	31 c0                	xor    eax,eax
10002738:	01 eb                	add    ebx,ebp
1000273a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
1000273e:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
10002742:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
10002746:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
1000274a:	7d 60                	jge    100027ac <isPointInRegion(Region, int, int)+0xe7>
1000274c:	8b 34 24             	mov    esi,DWORD PTR [esp]
1000274f:	39 16                	cmp    DWORD PTR [esi],edx
10002751:	75 08                	jne    1000275b <isPointInRegion(Region, int, int)+0x96>
10002753:	83 04 24 04          	add    DWORD PTR [esp],0x4
10002757:	83 f0 01             	xor    eax,0x1
1000275a:	49                   	dec    ecx
1000275b:	84 c0                	test   al,al
1000275d:	74 49                	je     100027a8 <isPointInRegion(Region, int, int)+0xe3>
1000275f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002763:	3b 5c 24 58          	cmp    ebx,DWORD PTR [esp+0x58]
10002767:	7f 5c                	jg     100027c5 <isPointInRegion(Region, int, int)+0x100>
10002769:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
1000276d:	3b 5c 24 58          	cmp    ebx,DWORD PTR [esp+0x58]
10002771:	7e 52                	jle    100027c5 <isPointInRegion(Region, int, int)+0x100>
10002773:	bb 01 00 00 00       	mov    ebx,0x1
10002778:	85 c9                	test   ecx,ecx
1000277a:	74 07                	je     10002783 <isPointInRegion(Region, int, int)+0xbe>
1000277c:	8b 34 24             	mov    esi,DWORD PTR [esp]
1000277f:	8b 1e                	mov    ebx,DWORD PTR [esi]
10002781:	29 d3                	sub    ebx,edx
10002783:	8d 34 1a             	lea    esi,[edx+ebx*1]
10002786:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
1000278a:	7e 06                	jle    10002792 <isPointInRegion(Region, int, int)+0xcd>
1000278c:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
10002790:	29 d3                	sub    ebx,edx
10002792:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
10002796:	01 d6                	add    esi,edx
10002798:	3b 74 24 54          	cmp    esi,DWORD PTR [esp+0x54]
1000279c:	7f 27                	jg     100027c5 <isPointInRegion(Region, int, int)+0x100>
1000279e:	01 f3                	add    ebx,esi
100027a0:	3b 5c 24 54          	cmp    ebx,DWORD PTR [esp+0x54]
100027a4:	7e 1f                	jle    100027c5 <isPointInRegion(Region, int, int)+0x100>
100027a6:	eb 30                	jmp    100027d8 <isPointInRegion(Region, int, int)+0x113>
100027a8:	85 c9                	test   ecx,ecx
100027aa:	75 22                	jne    100027ce <isPointInRegion(Region, int, int)+0x109>
100027ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100027b0:	01 e8                	add    eax,ebp
100027b2:	3b 44 24 58          	cmp    eax,DWORD PTR [esp+0x58]
100027b6:	74 09                	je     100027c1 <isPointInRegion(Region, int, int)+0xfc>
100027b8:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
100027bc:	e9 37 ff ff ff       	jmp    100026f8 <isPointInRegion(Region, int, int)+0x33>
100027c1:	31 c0                	xor    eax,eax
100027c3:	eb 13                	jmp    100027d8 <isPointInRegion(Region, int, int)+0x113>
100027c5:	42                   	inc    edx
100027c6:	85 c9                	test   ecx,ecx
100027c8:	0f 84 78 ff ff ff    	je     10002746 <isPointInRegion(Region, int, int)+0x81>
100027ce:	8b 14 24             	mov    edx,DWORD PTR [esp]
100027d1:	8b 12                	mov    edx,DWORD PTR [edx]
100027d3:	e9 6e ff ff ff       	jmp    10002746 <isPointInRegion(Region, int, int)+0x81>
100027d8:	83 c4 24             	add    esp,0x24
100027db:	5b                   	pop    ebx
100027dc:	5e                   	pop    esi
100027dd:	5f                   	pop    edi
100027de:	5d                   	pop    ebp
100027df:	c3                   	ret    

100027e0 <ssfn_utf8>:
100027e0:	56                   	push   esi
100027e1:	53                   	push   ebx
100027e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
100027e6:	8b 11                	mov    edx,DWORD PTR [ecx]
100027e8:	0f b6 32             	movzx  esi,BYTE PTR [edx]
100027eb:	89 f0                	mov    eax,esi
100027ed:	84 c0                	test   al,al
100027ef:	0f be d8             	movsx  ebx,al
100027f2:	78 04                	js     100027f8 <ssfn_utf8+0x18>
100027f4:	89 d8                	mov    eax,ebx
100027f6:	eb 7d                	jmp    10002875 <ssfn_utf8+0x95>
100027f8:	f7 c6 20 00 00 00    	test   esi,0x20
100027fe:	75 14                	jne    10002814 <ssfn_utf8+0x34>
10002800:	8a 42 01             	mov    al,BYTE PTR [edx+0x1]
10002803:	c1 e3 06             	shl    ebx,0x6
10002806:	83 e0 3f             	and    eax,0x3f
10002809:	81 e3 c0 07 00 00    	and    ebx,0x7c0
1000280f:	42                   	inc    edx
10002810:	09 d8                	or     eax,ebx
10002812:	eb 5f                	jmp    10002873 <ssfn_utf8+0x93>
10002814:	f7 c6 10 00 00 00    	test   esi,0x10
1000281a:	75 20                	jne    1000283c <ssfn_utf8+0x5c>
1000281c:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
10002820:	c1 e3 0c             	shl    ebx,0xc
10002823:	c1 e0 06             	shl    eax,0x6
10002826:	0f b7 db             	movzx  ebx,bx
10002829:	25 c0 0f 00 00       	and    eax,0xfc0
1000282e:	83 c2 02             	add    edx,0x2
10002831:	09 d8                	or     eax,ebx
10002833:	8a 1a                	mov    bl,BYTE PTR [edx]
10002835:	83 e3 3f             	and    ebx,0x3f
10002838:	09 d8                	or     eax,ebx
1000283a:	eb 37                	jmp    10002873 <ssfn_utf8+0x93>
1000283c:	31 c0                	xor    eax,eax
1000283e:	83 e6 08             	and    esi,0x8
10002841:	75 32                	jne    10002875 <ssfn_utf8+0x95>
10002843:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
10002847:	c1 e3 12             	shl    ebx,0x12
1000284a:	c1 e0 0c             	shl    eax,0xc
1000284d:	81 e3 00 00 1c 00    	and    ebx,0x1c0000
10002853:	25 00 f0 03 00       	and    eax,0x3f000
10002858:	83 c2 03             	add    edx,0x3
1000285b:	09 d8                	or     eax,ebx
1000285d:	8a 1a                	mov    bl,BYTE PTR [edx]
1000285f:	83 e3 3f             	and    ebx,0x3f
10002862:	09 d8                	or     eax,ebx
10002864:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
10002868:	c1 e3 06             	shl    ebx,0x6
1000286b:	81 e3 c0 0f 00 00    	and    ebx,0xfc0
10002871:	09 d8                	or     eax,ebx
10002873:	89 11                	mov    DWORD PTR [ecx],edx
10002875:	ff 01                	inc    DWORD PTR [ecx]
10002877:	5b                   	pop    ebx
10002878:	5e                   	pop    esi
10002879:	c3                   	ret    

1000287a <_ssfn_c>:
1000287a:	55                   	push   ebp
1000287b:	57                   	push   edi
1000287c:	56                   	push   esi
1000287d:	53                   	push   ebx
1000287e:	51                   	push   ecx
1000287f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002883:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002887:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
1000288d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10002891:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
10002895:	85 c0                	test   eax,eax
10002897:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
1000289d:	0f 84 63 01 00 00    	je     10002a06 <_ssfn_c+0x18c>
100028a3:	83 78 10 00          	cmp    DWORD PTR [eax+0x10],0x0
100028a7:	0f 84 59 01 00 00    	je     10002a06 <_ssfn_c+0x18c>
100028ad:	85 c9                	test   ecx,ecx
100028af:	0f 84 51 01 00 00    	je     10002a06 <_ssfn_c+0x18c>
100028b5:	8a 11                	mov    dl,BYTE PTR [ecx]
100028b7:	84 d2                	test   dl,dl
100028b9:	0f 84 47 01 00 00    	je     10002a06 <_ssfn_c+0x18c>
100028bf:	8b 68 14             	mov    ebp,DWORD PTR [eax+0x14]
100028c2:	85 ed                	test   ebp,ebp
100028c4:	74 34                	je     100028fa <_ssfn_c+0x80>
100028c6:	8d 74 05 00          	lea    esi,[ebp+eax*1+0x0]
100028ca:	31 ff                	xor    edi,edi
100028cc:	89 34 24             	mov    DWORD PTR [esp],esi
100028cf:	8b 34 24             	mov    esi,DWORD PTR [esp]
100028d2:	0f b7 34 7e          	movzx  esi,WORD PTR [esi+edi*2]
100028d6:	66 85 f6             	test   si,si
100028d9:	74 1f                	je     100028fa <_ssfn_c+0x80>
100028db:	01 c6                	add    esi,eax
100028dd:	89 cd                	mov    ebp,ecx
100028df:	8a 1e                	mov    bl,BYTE PTR [esi]
100028e1:	84 db                	test   bl,bl
100028e3:	0f 84 27 01 00 00    	je     10002a10 <_ssfn_c+0x196>
100028e9:	3a 5d 00             	cmp    bl,BYTE PTR [ebp+0x0]
100028ec:	0f 85 18 01 00 00    	jne    10002a0a <_ssfn_c+0x190>
100028f2:	89 eb                	mov    ebx,ebp
100028f4:	46                   	inc    esi
100028f5:	43                   	inc    ebx
100028f6:	89 dd                	mov    ebp,ebx
100028f8:	eb e5                	jmp    100028df <_ssfn_c+0x65>
100028fa:	84 d2                	test   dl,dl
100028fc:	0f b6 da             	movzx  ebx,dl
100028ff:	78 09                	js     1000290a <_ssfn_c+0x90>
10002901:	89 da                	mov    edx,ebx
10002903:	89 cb                	mov    ebx,ecx
10002905:	e9 83 00 00 00       	jmp    1000298d <_ssfn_c+0x113>
1000290a:	f6 c2 20             	test   dl,0x20
1000290d:	75 16                	jne    10002925 <_ssfn_c+0xab>
1000290f:	c1 e3 06             	shl    ebx,0x6
10002912:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
10002915:	81 e3 c0 07 00 00    	and    ebx,0x7c0
1000291b:	83 e2 3f             	and    edx,0x3f
1000291e:	09 da                	or     edx,ebx
10002920:	8d 59 01             	lea    ebx,[ecx+0x1]
10002923:	eb 68                	jmp    1000298d <_ssfn_c+0x113>
10002925:	f6 c2 10             	test   dl,0x10
10002928:	75 23                	jne    1000294d <_ssfn_c+0xd3>
1000292a:	c1 e3 0c             	shl    ebx,0xc
1000292d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
10002931:	0f b6 71 02          	movzx  esi,BYTE PTR [ecx+0x2]
10002935:	c1 e2 06             	shl    edx,0x6
10002938:	83 e6 3f             	and    esi,0x3f
1000293b:	81 e2 c0 0f 00 00    	and    edx,0xfc0
10002941:	09 d6                	or     esi,edx
10002943:	0f b7 d3             	movzx  edx,bx
10002946:	8d 59 02             	lea    ebx,[ecx+0x2]
10002949:	09 f2                	or     edx,esi
1000294b:	eb 40                	jmp    1000298d <_ssfn_c+0x113>
1000294d:	80 e2 08             	and    dl,0x8
10002950:	75 37                	jne    10002989 <_ssfn_c+0x10f>
10002952:	c1 e3 12             	shl    ebx,0x12
10002955:	0f b6 71 01          	movzx  esi,BYTE PTR [ecx+0x1]
10002959:	0f b6 51 02          	movzx  edx,BYTE PTR [ecx+0x2]
1000295d:	c1 e6 0c             	shl    esi,0xc
10002960:	c1 e2 06             	shl    edx,0x6
10002963:	81 e6 00 f0 03 00    	and    esi,0x3f000
10002969:	81 e2 c0 0f 00 00    	and    edx,0xfc0
1000296f:	09 f2                	or     edx,esi
10002971:	0f b6 71 03          	movzx  esi,BYTE PTR [ecx+0x3]
10002975:	83 e6 3f             	and    esi,0x3f
10002978:	09 d6                	or     esi,edx
1000297a:	89 da                	mov    edx,ebx
1000297c:	8d 59 03             	lea    ebx,[ecx+0x3]
1000297f:	81 e2 00 00 1c 00    	and    edx,0x1c0000
10002985:	09 f2                	or     edx,esi
10002987:	eb 04                	jmp    1000298d <_ssfn_c+0x113>
10002989:	89 cb                	mov    ebx,ecx
1000298b:	31 d2                	xor    edx,edx
1000298d:	8d 7b 01             	lea    edi,[ebx+0x1]
10002990:	89 fd                	mov    ebp,edi
10002992:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002996:	89 eb                	mov    ebx,ebp
10002998:	31 f6                	xor    esi,esi
1000299a:	29 cb                	sub    ebx,ecx
1000299c:	89 1f                	mov    DWORD PTR [edi],ebx
1000299e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
100029a2:	89 17                	mov    DWORD PTR [edi],edx
100029a4:	03 40 10             	add    eax,DWORD PTR [eax+0x10]
100029a7:	8a 08                	mov    cl,BYTE PTR [eax]
100029a9:	80 f9 ff             	cmp    cl,0xff
100029ac:	75 08                	jne    100029b6 <_ssfn_c+0x13c>
100029ae:	81 c6 ff ff 00 00    	add    esi,0xffff
100029b4:	eb 2a                	jmp    100029e0 <_ssfn_c+0x166>
100029b6:	88 cb                	mov    bl,cl
100029b8:	83 e3 c0             	and    ebx,0xffffffc0
100029bb:	80 fb c0             	cmp    bl,0xc0
100029be:	75 16                	jne    100029d6 <_ssfn_c+0x15c>
100029c0:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
100029c4:	c1 e1 08             	shl    ecx,0x8
100029c7:	83 c0 02             	add    eax,0x2
100029ca:	81 e1 00 3f 00 00    	and    ecx,0x3f00
100029d0:	09 d9                	or     ecx,ebx
100029d2:	01 ce                	add    esi,ecx
100029d4:	eb 27                	jmp    100029fd <_ssfn_c+0x183>
100029d6:	80 fb 80             	cmp    bl,0x80
100029d9:	75 08                	jne    100029e3 <_ssfn_c+0x169>
100029db:	83 e1 3f             	and    ecx,0x3f
100029de:	01 ce                	add    esi,ecx
100029e0:	40                   	inc    eax
100029e1:	eb 1a                	jmp    100029fd <_ssfn_c+0x183>
100029e3:	39 f2                	cmp    edx,esi
100029e5:	74 34                	je     10002a1b <_ssfn_c+0x1a1>
100029e7:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
100029eb:	83 e1 40             	and    ecx,0x40
100029ee:	80 f9 01             	cmp    cl,0x1
100029f1:	19 c9                	sbb    ecx,ecx
100029f3:	83 c1 06             	add    ecx,0x6
100029f6:	0f af cb             	imul   ecx,ebx
100029f9:	8d 44 08 06          	lea    eax,[eax+ecx*1+0x6]
100029fd:	46                   	inc    esi
100029fe:	81 fe ff ff 10 00    	cmp    esi,0x10ffff
10002a04:	76 a1                	jbe    100029a7 <_ssfn_c+0x12d>
10002a06:	31 c0                	xor    eax,eax
10002a08:	eb 11                	jmp    10002a1b <_ssfn_c+0x1a1>
10002a0a:	47                   	inc    edi
10002a0b:	e9 bf fe ff ff       	jmp    100028cf <_ssfn_c+0x55>
10002a10:	8d 97 00 f0 00 00    	lea    edx,[edi+0xf000]
10002a16:	e9 77 ff ff ff       	jmp    10002992 <_ssfn_c+0x118>
10002a1b:	5a                   	pop    edx
10002a1c:	5b                   	pop    ebx
10002a1d:	5e                   	pop    esi
10002a1e:	5f                   	pop    edi
10002a1f:	5d                   	pop    ebp
10002a20:	c3                   	ret    

10002a21 <_ssfn_l>:
10002a21:	57                   	push   edi
10002a22:	56                   	push   esi
10002a23:	53                   	push   ebx
10002a24:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10002a28:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10002a2c:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
10002a30:	89 f2                	mov    edx,esi
10002a32:	0f 9d c0             	setge  al
10002a35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002a39:	c1 ea 1f             	shr    edx,0x1f
10002a3c:	09 d0                	or     eax,edx
10002a3e:	89 fa                	mov    edx,edi
10002a40:	c1 ea 1f             	shr    edx,0x1f
10002a43:	08 d0                	or     al,dl
10002a45:	0f 85 e9 00 00 00    	jne    10002b34 <_ssfn_l+0x113>
10002a4b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
10002a4f:	0f 8d df 00 00 00    	jge    10002b34 <_ssfn_l+0x113>
10002a55:	8b 83 9c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf59c]
10002a5b:	8d 57 08             	lea    edx,[edi+0x8]
10002a5e:	83 c0 08             	add    eax,0x8
10002a61:	c1 fa 04             	sar    edx,0x4
10002a64:	c1 f8 04             	sar    eax,0x4
10002a67:	39 d0                	cmp    eax,edx
10002a69:	75 1a                	jne    10002a85 <_ssfn_l+0x64>
10002a6b:	8b 83 a0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a0]
10002a71:	8d 56 08             	lea    edx,[esi+0x8]
10002a74:	83 c0 08             	add    eax,0x8
10002a77:	c1 fa 04             	sar    edx,0x4
10002a7a:	c1 f8 04             	sar    eax,0x4
10002a7d:	39 d0                	cmp    eax,edx
10002a7f:	0f 84 af 00 00 00    	je     10002b34 <_ssfn_l+0x113>
10002a85:	8b 83 80 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf580]
10002a8b:	39 83 84 f5 00 00    	cmp    DWORD PTR [ebx+0xf584],eax
10002a91:	7f 3e                	jg     10002ad1 <_ssfn_l+0xb0>
10002a93:	05 00 02 00 00       	add    eax,0x200
10002a98:	89 83 84 f5 00 00    	mov    DWORD PTR [ebx+0xf584],eax
10002a9e:	52                   	push   edx
10002a9f:	01 c0                	add    eax,eax
10002aa1:	52                   	push   edx
10002aa2:	50                   	push   eax
10002aa3:	ff b3 6c f5 00 00    	push   DWORD PTR [ebx+0xf56c]
10002aa9:	e8 fc ff ff ff       	call   10002aaa <_ssfn_l+0x89>	10002aaa: R_386_PC32	realloc
10002aae:	83 c4 10             	add    esp,0x10
10002ab1:	89 83 6c f5 00 00    	mov    DWORD PTR [ebx+0xf56c],eax
10002ab7:	85 c0                	test   eax,eax
10002ab9:	75 16                	jne    10002ad1 <_ssfn_l+0xb0>
10002abb:	c7 83 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf580],0x0
10002ac5:	c7 83 84 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf584],0x0
10002acf:	eb 63                	jmp    10002b34 <_ssfn_l+0x113>
10002ad1:	83 bb 80 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf580],0x0
10002ad8:	75 26                	jne    10002b00 <_ssfn_l+0xdf>
10002ada:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10002ae0:	8b 93 94 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf594]
10002ae6:	66 89 10             	mov    WORD PTR [eax],dx
10002ae9:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10002aef:	8b 93 98 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf598]
10002af5:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
10002af9:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10002b00:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10002b06:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10002b0c:	66 89 3c 50          	mov    WORD PTR [eax+edx*2],di
10002b10:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10002b16:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10002b1c:	66 89 74 50 02       	mov    WORD PTR [eax+edx*2+0x2],si
10002b21:	89 bb 9c f5 00 00    	mov    DWORD PTR [ebx+0xf59c],edi
10002b27:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10002b2e:	89 b3 a0 f5 00 00    	mov    DWORD PTR [ebx+0xf5a0],esi
10002b34:	5b                   	pop    ebx
10002b35:	5e                   	pop    esi
10002b36:	5f                   	pop    edi
10002b37:	c3                   	ret    

10002b38 <_ssfn_b>:
10002b38:	55                   	push   ebp
10002b39:	57                   	push   edi
10002b3a:	56                   	push   esi
10002b3b:	53                   	push   ebx
10002b3c:	83 ec 4c             	sub    esp,0x4c
10002b3f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002b43:	8b 6c 24 74          	mov    ebp,DWORD PTR [esp+0x74]
10002b47:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002b4b:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
10002b4f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002b53:	8b 5c 24 7c          	mov    ebx,DWORD PTR [esp+0x7c]
10002b57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002b5b:	8b 8c 24 80 00 00 00 	mov    ecx,DWORD PTR [esp+0x80]
10002b62:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10002b66:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10002b6a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
10002b6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10002b72:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10002b76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10002b7a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
10002b81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002b85:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
10002b8c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002b90:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
10002b97:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10002b9b:	83 f8 03             	cmp    eax,0x3
10002b9e:	7e 34                	jle    10002bd4 <_ssfn_b+0x9c>
10002ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002ba4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002bac:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10002bb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10002bb4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
10002bb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002bbc:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
10002bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10002bc4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
10002bc8:	83 c4 4c             	add    esp,0x4c
10002bcb:	5b                   	pop    ebx
10002bcc:	5e                   	pop    esi
10002bcd:	5f                   	pop    edi
10002bce:	5d                   	pop    ebp
10002bcf:	e9 4d fe ff ff       	jmp    10002a21 <_ssfn_l>
10002bd4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10002bd8:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10002bdc:	75 0e                	jne    10002bec <_ssfn_b+0xb4>
10002bde:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10002be2:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
10002be6:	0f 84 12 01 00 00    	je     10002cfe <_ssfn_b+0x1c6>
10002bec:	bf 02 00 00 00       	mov    edi,0x2
10002bf1:	89 e8                	mov    eax,ebp
10002bf3:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
10002bf7:	99                   	cdq    
10002bf8:	f7 ff                	idiv   edi
10002bfa:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
10002bfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002c02:	89 f0                	mov    eax,esi
10002c04:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
10002c08:	99                   	cdq    
10002c09:	f7 ff                	idiv   edi
10002c0b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
10002c0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002c13:	89 d8                	mov    eax,ebx
10002c15:	29 e8                	sub    eax,ebp
10002c17:	99                   	cdq    
10002c18:	f7 ff                	idiv   edi
10002c1a:	01 c5                	add    ebp,eax
10002c1c:	89 c8                	mov    eax,ecx
10002c1e:	29 f0                	sub    eax,esi
10002c20:	99                   	cdq    
10002c21:	f7 ff                	idiv   edi
10002c23:	01 c6                	add    esi,eax
10002c25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002c29:	29 d8                	sub    eax,ebx
10002c2b:	99                   	cdq    
10002c2c:	f7 ff                	idiv   edi
10002c2e:	01 d8                	add    eax,ebx
10002c30:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002c34:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002c3c:	29 c8                	sub    eax,ecx
10002c3e:	99                   	cdq    
10002c3f:	f7 ff                	idiv   edi
10002c41:	01 c8                	add    eax,ecx
10002c43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002c47:	89 e8                	mov    eax,ebp
10002c49:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
10002c4d:	99                   	cdq    
10002c4e:	f7 ff                	idiv   edi
10002c50:	8d 0c 18             	lea    ecx,[eax+ebx*1]
10002c53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10002c57:	89 f0                	mov    eax,esi
10002c59:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
10002c5d:	99                   	cdq    
10002c5e:	f7 ff                	idiv   edi
10002c60:	01 c3                	add    ebx,eax
10002c62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002c66:	29 e8                	sub    eax,ebp
10002c68:	99                   	cdq    
10002c69:	f7 ff                	idiv   edi
10002c6b:	01 e8                	add    eax,ebp
10002c6d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10002c71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002c75:	29 f0                	sub    eax,esi
10002c77:	99                   	cdq    
10002c78:	f7 ff                	idiv   edi
10002c7a:	8d 2c 30             	lea    ebp,[eax+esi*1]
10002c7d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002c81:	29 c8                	sub    eax,ecx
10002c83:	99                   	cdq    
10002c84:	f7 ff                	idiv   edi
10002c86:	8d 34 08             	lea    esi,[eax+ecx*1]
10002c89:	89 e8                	mov    eax,ebp
10002c8b:	29 d8                	sub    eax,ebx
10002c8d:	99                   	cdq    
10002c8e:	f7 ff                	idiv   edi
10002c90:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
10002c94:	01 d8                	add    eax,ebx
10002c96:	8d 57 01             	lea    edx,[edi+0x1]
10002c99:	52                   	push   edx
10002c9a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
10002c9e:	50                   	push   eax
10002c9f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10002ca3:	56                   	push   esi
10002ca4:	53                   	push   ebx
10002ca5:	51                   	push   ecx
10002ca6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10002caa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10002cae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10002cb2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10002cb6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002cba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002cbe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002cc2:	e8 71 fe ff ff       	call   10002b38 <_ssfn_b>
10002cc7:	83 c4 30             	add    esp,0x30
10002cca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10002cce:	52                   	push   edx
10002ccf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10002cd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10002cd7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10002cdb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10002cdf:	55                   	push   ebp
10002ce0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10002ce4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10002ce8:	50                   	push   eax
10002ce9:	56                   	push   esi
10002cea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002cee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002cf2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002cf6:	e8 3d fe ff ff       	call   10002b38 <_ssfn_b>
10002cfb:	83 c4 30             	add    esp,0x30
10002cfe:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
10002d03:	0f 85 97 fe ff ff    	jne    10002ba0 <_ssfn_b+0x68>
10002d09:	83 c4 4c             	add    esp,0x4c
10002d0c:	5b                   	pop    ebx
10002d0d:	5e                   	pop    esi
10002d0e:	5f                   	pop    edi
10002d0f:	5d                   	pop    ebp
10002d10:	c3                   	ret    

10002d11 <_ssfn_fc>:
10002d11:	55                   	push   ebp
10002d12:	57                   	push   edi
10002d13:	56                   	push   esi
10002d14:	53                   	push   ebx
10002d15:	83 ec 0c             	sub    esp,0xc
10002d18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002d1c:	85 c0                	test   eax,eax
10002d1e:	74 75                	je     10002d95 <_ssfn_fc+0x84>
10002d20:	8d 98 28 f5 00 00    	lea    ebx,[eax+0xf528]
10002d26:	8d a8 6c f5 00 00    	lea    ebp,[eax+0xf56c]
10002d2c:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
10002d2f:	74 5d                	je     10002d8e <_ssfn_fc+0x7d>
10002d31:	31 f6                	xor    esi,esi
10002d33:	8b 03                	mov    eax,DWORD PTR [ebx]
10002d35:	83 3c 30 00          	cmp    DWORD PTR [eax+esi*1],0x0
10002d39:	74 35                	je     10002d70 <_ssfn_fc+0x5f>
10002d3b:	31 ff                	xor    edi,edi
10002d3d:	8b 03                	mov    eax,DWORD PTR [ebx]
10002d3f:	8b 04 30             	mov    eax,DWORD PTR [eax+esi*1]
10002d42:	8b 04 38             	mov    eax,DWORD PTR [eax+edi*1]
10002d45:	85 c0                	test   eax,eax
10002d47:	74 0c                	je     10002d55 <_ssfn_fc+0x44>
10002d49:	83 ec 0c             	sub    esp,0xc
10002d4c:	50                   	push   eax
10002d4d:	e8 fc ff ff ff       	call   10002d4e <_ssfn_fc+0x3d>	10002d4e: R_386_PC32	free
10002d52:	83 c4 10             	add    esp,0x10
10002d55:	83 c7 04             	add    edi,0x4
10002d58:	81 ff 00 04 00 00    	cmp    edi,0x400
10002d5e:	75 dd                	jne    10002d3d <_ssfn_fc+0x2c>
10002d60:	83 ec 0c             	sub    esp,0xc
10002d63:	8b 03                	mov    eax,DWORD PTR [ebx]
10002d65:	ff 34 30             	push   DWORD PTR [eax+esi*1]
10002d68:	e8 fc ff ff ff       	call   10002d69 <_ssfn_fc+0x58>	10002d69: R_386_PC32	free
10002d6d:	83 c4 10             	add    esp,0x10
10002d70:	83 c6 04             	add    esi,0x4
10002d73:	81 fe 00 04 00 00    	cmp    esi,0x400
10002d79:	75 b8                	jne    10002d33 <_ssfn_fc+0x22>
10002d7b:	83 ec 0c             	sub    esp,0xc
10002d7e:	ff 33                	push   DWORD PTR [ebx]
10002d80:	e8 fc ff ff ff       	call   10002d81 <_ssfn_fc+0x70>	10002d81: R_386_PC32	free
10002d85:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
10002d8b:	83 c4 10             	add    esp,0x10
10002d8e:	83 c3 04             	add    ebx,0x4
10002d91:	39 eb                	cmp    ebx,ebp
10002d93:	75 97                	jne    10002d2c <_ssfn_fc+0x1b>
10002d95:	83 c4 0c             	add    esp,0xc
10002d98:	5b                   	pop    ebx
10002d99:	5e                   	pop    esi
10002d9a:	5f                   	pop    edi
10002d9b:	5d                   	pop    ebp
10002d9c:	c3                   	ret    

10002d9d <_ssfn__bitreverse16>:
10002d9d:	89 c2                	mov    edx,eax
10002d9f:	01 c0                	add    eax,eax
10002da1:	d1 fa                	sar    edx,1
10002da3:	25 aa aa 00 00       	and    eax,0xaaaa
10002da8:	81 e2 55 55 00 00    	and    edx,0x5555
10002dae:	09 c2                	or     edx,eax
10002db0:	89 d0                	mov    eax,edx
10002db2:	c1 e2 02             	shl    edx,0x2
10002db5:	c1 f8 02             	sar    eax,0x2
10002db8:	81 e2 cc cc 00 00    	and    edx,0xcccc
10002dbe:	25 33 33 00 00       	and    eax,0x3333
10002dc3:	09 d0                	or     eax,edx
10002dc5:	89 c2                	mov    edx,eax
10002dc7:	c1 e0 04             	shl    eax,0x4
10002dca:	c1 fa 04             	sar    edx,0x4
10002dcd:	25 f0 f0 00 00       	and    eax,0xf0f0
10002dd2:	81 e2 0f 0f 00 00    	and    edx,0xf0f
10002dd8:	09 c2                	or     edx,eax
10002dda:	89 d1                	mov    ecx,edx
10002ddc:	c1 e2 08             	shl    edx,0x8
10002ddf:	c1 f9 08             	sar    ecx,0x8
10002de2:	0f b7 c2             	movzx  eax,dx
10002de5:	09 c8                	or     eax,ecx
10002de7:	c3                   	ret    

10002de8 <_ssfn__zbuild_huffman>:
10002de8:	55                   	push   ebp
10002de9:	b9 11 00 00 00       	mov    ecx,0x11
10002dee:	57                   	push   edi
10002def:	56                   	push   esi
10002df0:	53                   	push   ebx
10002df1:	81 ec 98 00 00 00    	sub    esp,0x98
10002df7:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
10002dfe:	8d 54 24 54          	lea    edx,[esp+0x54]
10002e02:	89 04 24             	mov    DWORD PTR [esp],eax
10002e05:	89 d7                	mov    edi,edx
10002e07:	31 c0                	xor    eax,eax
10002e09:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10002e0b:	b9 00 01 00 00       	mov    ecx,0x100
10002e10:	8b 3c 24             	mov    edi,DWORD PTR [esp]
10002e13:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10002e15:	3b 84 24 b4 00 00 00 	cmp    eax,DWORD PTR [esp+0xb4]
10002e1c:	7d 12                	jge    10002e30 <_ssfn__zbuild_huffman+0x48>
10002e1e:	8b 9c 24 b0 00 00 00 	mov    ebx,DWORD PTR [esp+0xb0]
10002e25:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
10002e29:	40                   	inc    eax
10002e2a:	ff 44 8c 54          	inc    DWORD PTR [esp+ecx*4+0x54]
10002e2e:	eb e5                	jmp    10002e15 <_ssfn__zbuild_huffman+0x2d>
10002e30:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
10002e38:	b9 01 00 00 00       	mov    ecx,0x1
10002e3d:	b8 01 00 00 00       	mov    eax,0x1
10002e42:	89 c6                	mov    esi,eax
10002e44:	d3 e6                	shl    esi,cl
10002e46:	39 34 8a             	cmp    DWORD PTR [edx+ecx*4],esi
10002e49:	0f 8f 0c 01 00 00    	jg     10002f5b <_ssfn__zbuild_huffman+0x173>
10002e4f:	41                   	inc    ecx
10002e50:	83 f9 10             	cmp    ecx,0x10
10002e53:	75 ed                	jne    10002e42 <_ssfn__zbuild_huffman+0x5a>
10002e55:	31 d2                	xor    edx,edx
10002e57:	31 f6                	xor    esi,esi
10002e59:	b8 01 00 00 00       	mov    eax,0x1
10002e5e:	bd 01 00 00 00       	mov    ebp,0x1
10002e63:	8b 3c 24             	mov    edi,DWORD PTR [esp]
10002e66:	89 54 84 14          	mov    DWORD PTR [esp+eax*4+0x14],edx
10002e6a:	66 89 94 47 00 04 00 00 	mov    WORD PTR [edi+eax*2+0x400],dx
10002e72:	66 89 b4 47 64 04 00 00 	mov    WORD PTR [edi+eax*2+0x464],si
10002e7a:	8b 7c 84 54          	mov    edi,DWORD PTR [esp+eax*4+0x54]
10002e7e:	01 fa                	add    edx,edi
10002e80:	85 ff                	test   edi,edi
10002e82:	74 0e                	je     10002e92 <_ssfn__zbuild_huffman+0xaa>
10002e84:	89 eb                	mov    ebx,ebp
10002e86:	88 c1                	mov    cl,al
10002e88:	d3 e3                	shl    ebx,cl
10002e8a:	39 d3                	cmp    ebx,edx
10002e8c:	0f 8c c9 00 00 00    	jl     10002f5b <_ssfn__zbuild_huffman+0x173>
10002e92:	89 d3                	mov    ebx,edx
10002e94:	b9 10 00 00 00       	mov    ecx,0x10
10002e99:	01 d2                	add    edx,edx
10002e9b:	29 c1                	sub    ecx,eax
10002e9d:	01 fe                	add    esi,edi
10002e9f:	d3 e3                	shl    ebx,cl
10002ea1:	89 d9                	mov    ecx,ebx
10002ea3:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
10002ea6:	89 8c 83 20 04 00 00 	mov    DWORD PTR [ebx+eax*4+0x420],ecx
10002ead:	40                   	inc    eax
10002eae:	83 f8 10             	cmp    eax,0x10
10002eb1:	75 b0                	jne    10002e63 <_ssfn__zbuild_huffman+0x7b>
10002eb3:	c7 83 60 04 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x460],0x10000
10002ebd:	31 ff                	xor    edi,edi
10002ebf:	3b bc 24 b4 00 00 00 	cmp    edi,DWORD PTR [esp+0xb4]
10002ec6:	0f 8d 93 00 00 00    	jge    10002f5f <_ssfn__zbuild_huffman+0x177>
10002ecc:	8b 84 24 b0 00 00 00 	mov    eax,DWORD PTR [esp+0xb0]
10002ed3:	0f b6 34 38          	movzx  esi,BYTE PTR [eax+edi*1]
10002ed7:	89 f2                	mov    edx,esi
10002ed9:	85 f6                	test   esi,esi
10002edb:	74 78                	je     10002f55 <_ssfn__zbuild_huffman+0x16d>
10002edd:	8b 6c b4 14          	mov    ebp,DWORD PTR [esp+esi*4+0x14]
10002ee1:	8d 0c 36             	lea    ecx,[esi+esi*1]
10002ee4:	89 eb                	mov    ebx,ebp
10002ee6:	03 0c 24             	add    ecx,DWORD PTR [esp]
10002ee9:	0f b7 81 00 04 00 00 	movzx  eax,WORD PTR [ecx+0x400]
10002ef0:	0f b7 89 64 04 00 00 	movzx  ecx,WORD PTR [ecx+0x464]
10002ef7:	29 c3                	sub    ebx,eax
10002ef9:	89 d8                	mov    eax,ebx
10002efb:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
10002efe:	01 c8                	add    eax,ecx
10002f00:	83 fe 09             	cmp    esi,0x9
10002f03:	88 94 03 84 04 00 00 	mov    BYTE PTR [ebx+eax*1+0x484],dl
10002f0a:	66 89 bc 43 a4 05 00 00 	mov    WORD PTR [ebx+eax*2+0x5a4],di
10002f12:	7f 3c                	jg     10002f50 <_ssfn__zbuild_huffman+0x168>
10002f14:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
10002f18:	89 e8                	mov    eax,ebp
10002f1a:	bb 01 00 00 00       	mov    ebx,0x1
10002f1f:	e8 79 fe ff ff       	call   10002d9d <_ssfn__bitreverse16>
10002f24:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
10002f28:	b9 10 00 00 00       	mov    ecx,0x10
10002f2d:	29 f1                	sub    ecx,esi
10002f2f:	d3 f8                	sar    eax,cl
10002f31:	88 d1                	mov    cl,dl
10002f33:	89 f2                	mov    edx,esi
10002f35:	d3 e3                	shl    ebx,cl
10002f37:	c1 e2 09             	shl    edx,0x9
10002f3a:	89 d9                	mov    ecx,ebx
10002f3c:	09 fa                	or     edx,edi
10002f3e:	3d ff 01 00 00       	cmp    eax,0x1ff
10002f43:	7f 0b                	jg     10002f50 <_ssfn__zbuild_huffman+0x168>
10002f45:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
10002f48:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
10002f4c:	01 c8                	add    eax,ecx
10002f4e:	eb ee                	jmp    10002f3e <_ssfn__zbuild_huffman+0x156>
10002f50:	45                   	inc    ebp
10002f51:	89 6c b4 14          	mov    DWORD PTR [esp+esi*4+0x14],ebp
10002f55:	47                   	inc    edi
10002f56:	e9 64 ff ff ff       	jmp    10002ebf <_ssfn__zbuild_huffman+0xd7>
10002f5b:	31 c0                	xor    eax,eax
10002f5d:	eb 05                	jmp    10002f64 <_ssfn__zbuild_huffman+0x17c>
10002f5f:	b8 01 00 00 00       	mov    eax,0x1
10002f64:	81 c4 98 00 00 00    	add    esp,0x98
10002f6a:	5b                   	pop    ebx
10002f6b:	5e                   	pop    esi
10002f6c:	5f                   	pop    edi
10002f6d:	5d                   	pop    ebp
10002f6e:	c3                   	ret    

10002f6f <_ssfn__fill_bits>:
10002f6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10002f73:	8b 10                	mov    edx,DWORD PTR [eax]
10002f75:	8d 4a 01             	lea    ecx,[edx+0x1]
10002f78:	89 08                	mov    DWORD PTR [eax],ecx
10002f7a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
10002f7d:	0f b6 12             	movzx  edx,BYTE PTR [edx]
10002f80:	d3 e2                	shl    edx,cl
10002f82:	83 c1 08             	add    ecx,0x8
10002f85:	09 50 08             	or     DWORD PTR [eax+0x8],edx
10002f88:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10002f8b:	83 f9 18             	cmp    ecx,0x18
10002f8e:	7e e3                	jle    10002f73 <_ssfn__fill_bits+0x4>
10002f90:	c3                   	ret    

10002f91 <_ssfn__zreceive>:
10002f91:	56                   	push   esi
10002f92:	89 d1                	mov    ecx,edx
10002f94:	53                   	push   ebx
10002f95:	89 c6                	mov    esi,eax
10002f97:	53                   	push   ebx
10002f98:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
10002f9b:	7d 0d                	jge    10002faa <_ssfn__zreceive+0x19>
10002f9d:	89 14 24             	mov    DWORD PTR [esp],edx
10002fa0:	50                   	push   eax
10002fa1:	e8 c9 ff ff ff       	call   10002f6f <_ssfn__fill_bits>
10002fa6:	59                   	pop    ecx
10002fa7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10002faa:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
10002fad:	29 4e 04             	sub    DWORD PTR [esi+0x4],ecx
10002fb0:	89 d0                	mov    eax,edx
10002fb2:	bb 01 00 00 00       	mov    ebx,0x1
10002fb7:	d3 e8                	shr    eax,cl
10002fb9:	d3 e3                	shl    ebx,cl
10002fbb:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
10002fbe:	8d 43 ff             	lea    eax,[ebx-0x1]
10002fc1:	21 d0                	and    eax,edx
10002fc3:	5a                   	pop    edx
10002fc4:	5b                   	pop    ebx
10002fc5:	5e                   	pop    esi
10002fc6:	c3                   	ret    

10002fc7 <_ssfn__zhuffman_decode_slowpath>:
10002fc7:	55                   	push   ebp
10002fc8:	57                   	push   edi
10002fc9:	56                   	push   esi
10002fca:	53                   	push   ebx
10002fcb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002fcf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10002fd3:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
10002fd6:	89 f8                	mov    eax,edi
10002fd8:	e8 c0 fd ff ff       	call   10002d9d <_ssfn__bitreverse16>
10002fdd:	ba 0a 00 00 00       	mov    edx,0xa
10002fe2:	39 84 96 20 04 00 00 	cmp    DWORD PTR [esi+edx*4+0x420],eax
10002fe9:	7f 03                	jg     10002fee <_ssfn__zhuffman_decode_slowpath+0x27>
10002feb:	42                   	inc    edx
10002fec:	eb f4                	jmp    10002fe2 <_ssfn__zhuffman_decode_slowpath+0x1b>
10002fee:	83 c9 ff             	or     ecx,0xffffffff
10002ff1:	83 fa 10             	cmp    edx,0x10
10002ff4:	74 34                	je     1000302a <_ssfn__zhuffman_decode_slowpath+0x63>
10002ff6:	8d 2c 12             	lea    ebp,[edx+edx*1]
10002ff9:	b9 10 00 00 00       	mov    ecx,0x10
10002ffe:	01 f5                	add    ebp,esi
10003000:	29 d1                	sub    ecx,edx
10003002:	d3 f8                	sar    eax,cl
10003004:	0f b7 8d 00 04 00 00 	movzx  ecx,WORD PTR [ebp+0x400]
1000300b:	0f b7 ad 64 04 00 00 	movzx  ebp,WORD PTR [ebp+0x464]
10003012:	29 c8                	sub    eax,ecx
10003014:	29 53 04             	sub    DWORD PTR [ebx+0x4],edx
10003017:	88 d1                	mov    cl,dl
10003019:	8d 84 28 d0 02 00 00 	lea    eax,[eax+ebp*1+0x2d0]
10003020:	d3 ef                	shr    edi,cl
10003022:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
10003025:	0f b7 4c 46 04       	movzx  ecx,WORD PTR [esi+eax*2+0x4]
1000302a:	5b                   	pop    ebx
1000302b:	89 c8                	mov    eax,ecx
1000302d:	5e                   	pop    esi
1000302e:	5f                   	pop    edi
1000302f:	5d                   	pop    ebp
10003030:	c3                   	ret    

10003031 <_ssfn__zhuffman_decode>:
10003031:	57                   	push   edi
10003032:	89 d7                	mov    edi,edx
10003034:	56                   	push   esi
10003035:	53                   	push   ebx
10003036:	89 c3                	mov    ebx,eax
10003038:	83 78 04 0f          	cmp    DWORD PTR [eax+0x4],0xf
1000303c:	7f 07                	jg     10003045 <_ssfn__zhuffman_decode+0x14>
1000303e:	50                   	push   eax
1000303f:	e8 2b ff ff ff       	call   10002f6f <_ssfn__fill_bits>
10003044:	5e                   	pop    esi
10003045:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
10003048:	89 f0                	mov    eax,esi
1000304a:	25 ff 01 00 00       	and    eax,0x1ff
1000304f:	0f b7 0c 47          	movzx  ecx,WORD PTR [edi+eax*2]
10003053:	89 c8                	mov    eax,ecx
10003055:	85 c9                	test   ecx,ecx
10003057:	74 12                	je     1000306b <_ssfn__zhuffman_decode+0x3a>
10003059:	c1 f9 09             	sar    ecx,0x9
1000305c:	25 ff 01 00 00       	and    eax,0x1ff
10003061:	d3 ee                	shr    esi,cl
10003063:	29 4b 04             	sub    DWORD PTR [ebx+0x4],ecx
10003066:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10003069:	eb 09                	jmp    10003074 <_ssfn__zhuffman_decode+0x43>
1000306b:	57                   	push   edi
1000306c:	53                   	push   ebx
1000306d:	e8 55 ff ff ff       	call   10002fc7 <_ssfn__zhuffman_decode_slowpath>
10003072:	5a                   	pop    edx
10003073:	59                   	pop    ecx
10003074:	5b                   	pop    ebx
10003075:	5e                   	pop    esi
10003076:	5f                   	pop    edi
10003077:	c3                   	ret    

10003078 <_ssfn__zexpand>:
10003078:	55                   	push   ebp
10003079:	57                   	push   edi
1000307a:	56                   	push   esi
1000307b:	53                   	push   ebx
1000307c:	83 ec 0c             	sub    esp,0xc
1000307f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10003083:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
10003087:	8b 5e 10             	mov    ebx,DWORD PTR [esi+0x10]
1000308a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
1000308d:	89 7e 0c             	mov    DWORD PTR [esi+0xc],edi
10003090:	29 d8                	sub    eax,ebx
10003092:	83 f8 08             	cmp    eax,0x8
10003095:	74 04                	je     1000309b <_ssfn__zexpand+0x23>
10003097:	31 c0                	xor    eax,eax
10003099:	eb 38                	jmp    100030d3 <_ssfn__zexpand+0x5b>
1000309b:	80 3b 53             	cmp    BYTE PTR [ebx],0x53
1000309e:	75 f7                	jne    10003097 <_ssfn__zexpand+0x1f>
100030a0:	80 7b 01 46          	cmp    BYTE PTR [ebx+0x1],0x46
100030a4:	75 f1                	jne    10003097 <_ssfn__zexpand+0x1f>
100030a6:	80 7b 02 4e          	cmp    BYTE PTR [ebx+0x2],0x4e
100030aa:	75 eb                	jne    10003097 <_ssfn__zexpand+0x1f>
100030ac:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
100030af:	50                   	push   eax
100030b0:	50                   	push   eax
100030b1:	55                   	push   ebp
100030b2:	53                   	push   ebx
100030b3:	e8 fc ff ff ff       	call   100030b4 <_ssfn__zexpand+0x3c>	100030b4: R_386_PC32	realloc
100030b8:	83 c4 10             	add    esp,0x10
100030bb:	85 c0                	test   eax,eax
100030bd:	74 d8                	je     10003097 <_ssfn__zexpand+0x1f>
100030bf:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
100030c2:	29 df                	sub    edi,ebx
100030c4:	01 c7                	add    edi,eax
100030c6:	01 e8                	add    eax,ebp
100030c8:	89 7e 0c             	mov    DWORD PTR [esi+0xc],edi
100030cb:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
100030ce:	b8 01 00 00 00       	mov    eax,0x1
100030d3:	83 c4 0c             	add    esp,0xc
100030d6:	5b                   	pop    ebx
100030d7:	5e                   	pop    esi
100030d8:	5f                   	pop    edi
100030d9:	5d                   	pop    ebp
100030da:	c3                   	ret    

100030db <_ssfn__parse_huffman_block>:
100030db:	55                   	push   ebp
100030dc:	57                   	push   edi
100030dd:	56                   	push   esi
100030de:	53                   	push   ebx
100030df:	83 ec 1c             	sub    esp,0x1c
100030e2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
100030e6:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
100030e9:	8d 53 18             	lea    edx,[ebx+0x18]
100030ec:	89 d8                	mov    eax,ebx
100030ee:	e8 3e ff ff ff       	call   10003031 <_ssfn__zhuffman_decode>
100030f3:	89 c5                	mov    ebp,eax
100030f5:	3d ff 00 00 00       	cmp    eax,0xff
100030fa:	7f 2c                	jg     10003128 <_ssfn__parse_huffman_block+0x4d>
100030fc:	85 c0                	test   eax,eax
100030fe:	0f 88 ef 00 00 00    	js     100031f3 <_ssfn__parse_huffman_block+0x118>
10003104:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
10003107:	77 17                	ja     10003120 <_ssfn__parse_huffman_block+0x45>
10003109:	52                   	push   edx
1000310a:	52                   	push   edx
1000310b:	57                   	push   edi
1000310c:	53                   	push   ebx
1000310d:	e8 66 ff ff ff       	call   10003078 <_ssfn__zexpand>
10003112:	83 c4 10             	add    esp,0x10
10003115:	85 c0                	test   eax,eax
10003117:	0f 84 d6 00 00 00    	je     100031f3 <_ssfn__parse_huffman_block+0x118>
1000311d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
10003120:	89 e8                	mov    eax,ebp
10003122:	47                   	inc    edi
10003123:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
10003126:	eb c1                	jmp    100030e9 <_ssfn__parse_huffman_block+0xe>
10003128:	3d 00 01 00 00       	cmp    eax,0x100
1000312d:	75 0d                	jne    1000313c <_ssfn__parse_huffman_block+0x61>
1000312f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
10003132:	b8 01 00 00 00       	mov    eax,0x1
10003137:	e9 b9 00 00 00       	jmp    100031f5 <_ssfn__parse_huffman_block+0x11a>
1000313c:	8d 80 ff fe ff ff    	lea    eax,[eax-0x101]
10003142:	8b 14 85 60 b0 00 10 	mov    edx,DWORD PTR [eax*4+0x1000b060]	10003145: R_386_32	.data
10003149:	8b 2c 85 e0 af 00 10 	mov    ebp,DWORD PTR [eax*4+0x1000afe0]	1000314c: R_386_32	.data
10003150:	85 d2                	test   edx,edx
10003152:	74 09                	je     1000315d <_ssfn__parse_huffman_block+0x82>
10003154:	89 d8                	mov    eax,ebx
10003156:	e8 36 fe ff ff       	call   10002f91 <_ssfn__zreceive>
1000315b:	01 c5                	add    ebp,eax
1000315d:	8d 93 fc 07 00 00    	lea    edx,[ebx+0x7fc]
10003163:	89 d8                	mov    eax,ebx
10003165:	e8 c7 fe ff ff       	call   10003031 <_ssfn__zhuffman_decode>
1000316a:	85 c0                	test   eax,eax
1000316c:	0f 88 81 00 00 00    	js     100031f3 <_ssfn__parse_huffman_block+0x118>
10003172:	8b 0c 85 e0 b0 00 10 	mov    ecx,DWORD PTR [eax*4+0x1000b0e0]	10003175: R_386_32	.data
10003179:	8b 14 85 60 b1 00 10 	mov    edx,DWORD PTR [eax*4+0x1000b160]	1000317c: R_386_32	.data
10003180:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10003184:	85 d2                	test   edx,edx
10003186:	74 0b                	je     10003193 <_ssfn__parse_huffman_block+0xb8>
10003188:	89 d8                	mov    eax,ebx
1000318a:	e8 02 fe ff ff       	call   10002f91 <_ssfn__zreceive>
1000318f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
10003193:	89 f8                	mov    eax,edi
10003195:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
10003198:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
1000319c:	7c 55                	jl     100031f3 <_ssfn__parse_huffman_block+0x118>
1000319e:	8d 04 2f             	lea    eax,[edi+ebp*1]
100031a1:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
100031a4:	73 13                	jae    100031b9 <_ssfn__parse_huffman_block+0xde>
100031a6:	50                   	push   eax
100031a7:	50                   	push   eax
100031a8:	57                   	push   edi
100031a9:	53                   	push   ebx
100031aa:	e8 c9 fe ff ff       	call   10003078 <_ssfn__zexpand>
100031af:	83 c4 10             	add    esp,0x10
100031b2:	85 c0                	test   eax,eax
100031b4:	74 3d                	je     100031f3 <_ssfn__parse_huffman_block+0x118>
100031b6:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
100031b9:	89 fe                	mov    esi,edi
100031bb:	2b 74 24 0c          	sub    esi,DWORD PTR [esp+0xc]
100031bf:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
100031c4:	75 19                	jne    100031df <_ssfn__parse_huffman_block+0x104>
100031c6:	85 ed                	test   ebp,ebp
100031c8:	0f 84 1b ff ff ff    	je     100030e9 <_ssfn__parse_huffman_block+0xe>
100031ce:	8a 06                	mov    al,BYTE PTR [esi]
100031d0:	01 fd                	add    ebp,edi
100031d2:	47                   	inc    edi
100031d3:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
100031d6:	39 ef                	cmp    edi,ebp
100031d8:	75 f8                	jne    100031d2 <_ssfn__parse_huffman_block+0xf7>
100031da:	e9 0a ff ff ff       	jmp    100030e9 <_ssfn__parse_huffman_block+0xe>
100031df:	85 ed                	test   ebp,ebp
100031e1:	0f 84 02 ff ff ff    	je     100030e9 <_ssfn__parse_huffman_block+0xe>
100031e7:	01 fd                	add    ebp,edi
100031e9:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
100031ea:	39 ef                	cmp    edi,ebp
100031ec:	75 fb                	jne    100031e9 <_ssfn__parse_huffman_block+0x10e>
100031ee:	e9 f6 fe ff ff       	jmp    100030e9 <_ssfn__parse_huffman_block+0xe>
100031f3:	31 c0                	xor    eax,eax
100031f5:	83 c4 1c             	add    esp,0x1c
100031f8:	5b                   	pop    ebx
100031f9:	5e                   	pop    esi
100031fa:	5f                   	pop    edi
100031fb:	5d                   	pop    ebp
100031fc:	c3                   	ret    

100031fd <_ssfn__compute_huffman_codes>:
100031fd:	55                   	push   ebp
100031fe:	ba 05 00 00 00       	mov    edx,0x5
10003203:	57                   	push   edi
10003204:	56                   	push   esi
10003205:	53                   	push   ebx
10003206:	81 ec c8 09 00 00    	sub    esp,0x9c8
1000320c:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10003213:	8d 5c 24 0a          	lea    ebx,[esp+0xa]
10003217:	89 e8                	mov    eax,ebp
10003219:	89 df                	mov    edi,ebx
1000321b:	e8 71 fd ff ff       	call   10002f91 <_ssfn__zreceive>
10003220:	ba 05 00 00 00       	mov    edx,0x5
10003225:	89 c6                	mov    esi,eax
10003227:	89 e8                	mov    eax,ebp
10003229:	e8 63 fd ff ff       	call   10002f91 <_ssfn__zreceive>
1000322e:	ba 04 00 00 00       	mov    edx,0x4
10003233:	89 04 24             	mov    DWORD PTR [esp],eax
10003236:	89 e8                	mov    eax,ebp
10003238:	e8 54 fd ff ff       	call   10002f91 <_ssfn__zreceive>
1000323d:	b9 13 00 00 00       	mov    ecx,0x13
10003242:	83 c0 04             	add    eax,0x4
10003245:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003249:	31 c0                	xor    eax,eax
1000324b:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000324d:	31 ff                	xor    edi,edi
1000324f:	3b 7c 24 04          	cmp    edi,DWORD PTR [esp+0x4]
10003253:	7d 1a                	jge    1000326f <_ssfn__compute_huffman_codes+0x72>
10003255:	ba 03 00 00 00       	mov    edx,0x3
1000325a:	89 e8                	mov    eax,ebp
1000325c:	47                   	inc    edi
1000325d:	e8 2f fd ff ff       	call   10002f91 <_ssfn__zreceive>
10003262:	0f b6 97 df b1 00 10 	movzx  edx,BYTE PTR [edi+0x1000b1df]	10003265: R_386_32	.data
10003269:	88 44 14 0a          	mov    BYTE PTR [esp+edx*1+0xa],al
1000326d:	eb e0                	jmp    1000324f <_ssfn__compute_huffman_codes+0x52>
1000326f:	6a 13                	push   0x13
10003271:	53                   	push   ebx
10003272:	8d 84 24 ec 01 00 00 	lea    eax,[esp+0x1ec]
10003279:	50                   	push   eax
1000327a:	e8 69 fb ff ff       	call   10002de8 <_ssfn__zbuild_huffman>
1000327f:	83 c4 0c             	add    esp,0xc
10003282:	85 c0                	test   eax,eax
10003284:	75 07                	jne    1000328d <_ssfn__compute_huffman_codes+0x90>
10003286:	31 c0                	xor    eax,eax
10003288:	e9 dd 00 00 00       	jmp    1000336a <_ssfn__compute_huffman_codes+0x16d>
1000328d:	8b 04 24             	mov    eax,DWORD PTR [esp]
10003290:	81 c6 01 01 00 00    	add    esi,0x101
10003296:	40                   	inc    eax
10003297:	31 db                	xor    ebx,ebx
10003299:	89 04 24             	mov    DWORD PTR [esp],eax
1000329c:	01 f0                	add    eax,esi
1000329e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100032a2:	3b 5c 24 04          	cmp    ebx,DWORD PTR [esp+0x4]
100032a6:	0f 8d 81 00 00 00    	jge    1000332d <_ssfn__compute_huffman_codes+0x130>
100032ac:	8d 94 24 e4 01 00 00 	lea    edx,[esp+0x1e4]
100032b3:	89 e8                	mov    eax,ebp
100032b5:	e8 77 fd ff ff       	call   10003031 <_ssfn__zhuffman_decode>
100032ba:	83 f8 12             	cmp    eax,0x12
100032bd:	77 c7                	ja     10003286 <_ssfn__compute_huffman_codes+0x89>
100032bf:	83 f8 0f             	cmp    eax,0xf
100032c2:	7f 07                	jg     100032cb <_ssfn__compute_huffman_codes+0xce>
100032c4:	88 44 1c 1d          	mov    BYTE PTR [esp+ebx*1+0x1d],al
100032c8:	43                   	inc    ebx
100032c9:	eb d7                	jmp    100032a2 <_ssfn__compute_huffman_codes+0xa5>
100032cb:	83 f8 10             	cmp    eax,0x10
100032ce:	75 19                	jne    100032e9 <_ssfn__compute_huffman_codes+0xec>
100032d0:	ba 02 00 00 00       	mov    edx,0x2
100032d5:	89 e8                	mov    eax,ebp
100032d7:	e8 b5 fc ff ff       	call   10002f91 <_ssfn__zreceive>
100032dc:	85 db                	test   ebx,ebx
100032de:	8d 50 03             	lea    edx,[eax+0x3]
100032e1:	74 a3                	je     10003286 <_ssfn__compute_huffman_codes+0x89>
100032e3:	8a 44 1c 1c          	mov    al,BYTE PTR [esp+ebx*1+0x1c]
100032e7:	eb 27                	jmp    10003310 <_ssfn__compute_huffman_codes+0x113>
100032e9:	83 f8 11             	cmp    eax,0x11
100032ec:	75 11                	jne    100032ff <_ssfn__compute_huffman_codes+0x102>
100032ee:	ba 03 00 00 00       	mov    edx,0x3
100032f3:	89 e8                	mov    eax,ebp
100032f5:	e8 97 fc ff ff       	call   10002f91 <_ssfn__zreceive>
100032fa:	8d 50 03             	lea    edx,[eax+0x3]
100032fd:	eb 0f                	jmp    1000330e <_ssfn__compute_huffman_codes+0x111>
100032ff:	ba 07 00 00 00       	mov    edx,0x7
10003304:	89 e8                	mov    eax,ebp
10003306:	e8 86 fc ff ff       	call   10002f91 <_ssfn__zreceive>
1000330b:	8d 50 0b             	lea    edx,[eax+0xb]
1000330e:	31 c0                	xor    eax,eax
10003310:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10003314:	29 d9                	sub    ecx,ebx
10003316:	39 d1                	cmp    ecx,edx
10003318:	0f 8c 68 ff ff ff    	jl     10003286 <_ssfn__compute_huffman_codes+0x89>
1000331e:	8d 7c 1c 1d          	lea    edi,[esp+ebx*1+0x1d]
10003322:	89 d1                	mov    ecx,edx
10003324:	01 d3                	add    ebx,edx
10003326:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003328:	e9 75 ff ff ff       	jmp    100032a2 <_ssfn__compute_huffman_codes+0xa5>
1000332d:	0f 85 53 ff ff ff    	jne    10003286 <_ssfn__compute_huffman_codes+0x89>
10003333:	56                   	push   esi
10003334:	8d 45 18             	lea    eax,[ebp+0x18]
10003337:	8d 5c 24 21          	lea    ebx,[esp+0x21]
1000333b:	53                   	push   ebx
1000333c:	50                   	push   eax
1000333d:	e8 a6 fa ff ff       	call   10002de8 <_ssfn__zbuild_huffman>
10003342:	83 c4 0c             	add    esp,0xc
10003345:	85 c0                	test   eax,eax
10003347:	0f 84 39 ff ff ff    	je     10003286 <_ssfn__compute_huffman_codes+0x89>
1000334d:	ff 34 24             	push   DWORD PTR [esp]
10003350:	01 de                	add    esi,ebx
10003352:	8d 85 fc 07 00 00    	lea    eax,[ebp+0x7fc]
10003358:	56                   	push   esi
10003359:	50                   	push   eax
1000335a:	e8 89 fa ff ff       	call   10002de8 <_ssfn__zbuild_huffman>
1000335f:	83 c4 0c             	add    esp,0xc
10003362:	85 c0                	test   eax,eax
10003364:	0f 95 c0             	setne  al
10003367:	0f b6 c0             	movzx  eax,al
1000336a:	81 c4 c8 09 00 00    	add    esp,0x9c8
10003370:	5b                   	pop    ebx
10003371:	5e                   	pop    esi
10003372:	5f                   	pop    edi
10003373:	5d                   	pop    ebp
10003374:	c3                   	ret    

10003375 <_ssfn__init_zdefaults>:
10003375:	31 c0                	xor    eax,eax
10003377:	c6 80 40 00 01 10 08 	mov    BYTE PTR [eax+0x10010040],0x8	10003379: R_386_32	.bss
1000337e:	40                   	inc    eax
1000337f:	3d 90 00 00 00       	cmp    eax,0x90
10003384:	75 f1                	jne    10003377 <_ssfn__init_zdefaults+0x2>
10003386:	c6 80 40 00 01 10 09 	mov    BYTE PTR [eax+0x10010040],0x9	10003388: R_386_32	.bss
1000338d:	40                   	inc    eax
1000338e:	3d 00 01 00 00       	cmp    eax,0x100
10003393:	75 f1                	jne    10003386 <_ssfn__init_zdefaults+0x11>
10003395:	c6 80 40 00 01 10 07 	mov    BYTE PTR [eax+0x10010040],0x7	10003397: R_386_32	.bss
1000339c:	40                   	inc    eax
1000339d:	3d 18 01 00 00       	cmp    eax,0x118
100033a2:	75 f1                	jne    10003395 <_ssfn__init_zdefaults+0x20>
100033a4:	c7 05 58 01 01 10 08 08 08 08 	mov    DWORD PTR ds:0x10010158,0x8080808	100033a6: R_386_32	.bss
100033ae:	c7 05 5c 01 01 10 08 08 08 08 	mov    DWORD PTR ds:0x1001015c,0x8080808	100033b0: R_386_32	.bss
100033b8:	31 c0                	xor    eax,eax
100033ba:	c6 80 60 01 01 10 05 	mov    BYTE PTR [eax+0x10010160],0x5	100033bc: R_386_32	.bss
100033c1:	40                   	inc    eax
100033c2:	83 f8 20             	cmp    eax,0x20
100033c5:	75 f3                	jne    100033ba <_ssfn__init_zdefaults+0x45>
100033c7:	c3                   	ret    

100033c8 <_ssfn__parse_zlib>:
100033c8:	55                   	push   ebp
100033c9:	57                   	push   edi
100033ca:	56                   	push   esi
100033cb:	53                   	push   ebx
100033cc:	83 ec 1c             	sub    esp,0x1c
100033cf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
100033d3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
100033da:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
100033e1:	ba 01 00 00 00       	mov    edx,0x1
100033e6:	89 d8                	mov    eax,ebx
100033e8:	e8 a4 fb ff ff       	call   10002f91 <_ssfn__zreceive>
100033ed:	ba 02 00 00 00       	mov    edx,0x2
100033f2:	89 c5                	mov    ebp,eax
100033f4:	89 d8                	mov    eax,ebx
100033f6:	e8 96 fb ff ff       	call   10002f91 <_ssfn__zreceive>
100033fb:	89 c6                	mov    esi,eax
100033fd:	85 c0                	test   eax,eax
100033ff:	0f 85 ad 00 00 00    	jne    100034b2 <_ssfn__parse_zlib+0xea>
10003405:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10003408:	83 e2 07             	and    edx,0x7
1000340b:	74 07                	je     10003414 <_ssfn__parse_zlib+0x4c>
1000340d:	89 d8                	mov    eax,ebx
1000340f:	e8 7d fb ff ff       	call   10002f91 <_ssfn__zreceive>
10003414:	31 c0                	xor    eax,eax
10003416:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
10003419:	85 c9                	test   ecx,ecx
1000341b:	7e 16                	jle    10003433 <_ssfn__parse_zlib+0x6b>
1000341d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10003420:	40                   	inc    eax
10003421:	83 e9 08             	sub    ecx,0x8
10003424:	88 54 04 0b          	mov    BYTE PTR [esp+eax*1+0xb],dl
10003428:	89 4b 04             	mov    DWORD PTR [ebx+0x4],ecx
1000342b:	c1 ea 08             	shr    edx,0x8
1000342e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
10003431:	eb e3                	jmp    10003416 <_ssfn__parse_zlib+0x4e>
10003433:	83 f8 04             	cmp    eax,0x4
10003436:	74 10                	je     10003448 <_ssfn__parse_zlib+0x80>
10003438:	8b 13                	mov    edx,DWORD PTR [ebx]
1000343a:	40                   	inc    eax
1000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
1000343e:	89 0b                	mov    DWORD PTR [ebx],ecx
10003440:	8a 12                	mov    dl,BYTE PTR [edx]
10003442:	88 54 04 0b          	mov    BYTE PTR [esp+eax*1+0xb],dl
10003446:	eb eb                	jmp    10003433 <_ssfn__parse_zlib+0x6b>
10003448:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
1000344d:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
10003452:	0f b6 7c 24 0d       	movzx  edi,BYTE PTR [esp+0xd]
10003457:	c1 e7 08             	shl    edi,0x8
1000345a:	01 c7                	add    edi,eax
1000345c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
10003461:	c1 e0 08             	shl    eax,0x8
10003464:	01 d0                	add    eax,edx
10003466:	89 fa                	mov    edx,edi
10003468:	81 f2 ff ff 00 00    	xor    edx,0xffff
1000346e:	39 d0                	cmp    eax,edx
10003470:	0f 85 a6 00 00 00    	jne    1000351c <_ssfn__parse_zlib+0x154>
10003476:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10003479:	8d 14 38             	lea    edx,[eax+edi*1]
1000347c:	39 53 14             	cmp    DWORD PTR [ebx+0x14],edx
1000347f:	73 14                	jae    10003495 <_ssfn__parse_zlib+0xcd>
10003481:	51                   	push   ecx
10003482:	51                   	push   ecx
10003483:	50                   	push   eax
10003484:	53                   	push   ebx
10003485:	e8 ee fb ff ff       	call   10003078 <_ssfn__zexpand>
1000348a:	83 c4 10             	add    esp,0x10
1000348d:	85 c0                	test   eax,eax
1000348f:	0f 84 87 00 00 00    	je     1000351c <_ssfn__parse_zlib+0x154>
10003495:	8b 03                	mov    eax,DWORD PTR [ebx]
10003497:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
1000349a:	39 f7                	cmp    edi,esi
1000349c:	74 09                	je     100034a7 <_ssfn__parse_zlib+0xdf>
1000349e:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
100034a1:	88 04 32             	mov    BYTE PTR [edx+esi*1],al
100034a4:	46                   	inc    esi
100034a5:	eb ee                	jmp    10003495 <_ssfn__parse_zlib+0xcd>
100034a7:	01 f8                	add    eax,edi
100034a9:	01 d7                	add    edi,edx
100034ab:	89 03                	mov    DWORD PTR [ebx],eax
100034ad:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
100034b0:	eb 5d                	jmp    1000350f <_ssfn__parse_zlib+0x147>
100034b2:	83 f8 03             	cmp    eax,0x3
100034b5:	75 04                	jne    100034bb <_ssfn__parse_zlib+0xf3>
100034b7:	31 f6                	xor    esi,esi
100034b9:	eb 61                	jmp    1000351c <_ssfn__parse_zlib+0x154>
100034bb:	4e                   	dec    esi
100034bc:	75 31                	jne    100034ef <_ssfn__parse_zlib+0x127>
100034be:	8d 43 18             	lea    eax,[ebx+0x18]
100034c1:	52                   	push   edx
100034c2:	68 20 01 00 00       	push   0x120
100034c7:	68 40 00 01 10       	push   0x10010040	100034c8: R_386_32	.bss
100034cc:	50                   	push   eax
100034cd:	e8 16 f9 ff ff       	call   10002de8 <_ssfn__zbuild_huffman>
100034d2:	83 c4 10             	add    esp,0x10
100034d5:	85 c0                	test   eax,eax
100034d7:	74 de                	je     100034b7 <_ssfn__parse_zlib+0xef>
100034d9:	50                   	push   eax
100034da:	8d 83 fc 07 00 00    	lea    eax,[ebx+0x7fc]
100034e0:	6a 20                	push   0x20
100034e2:	68 60 01 01 10       	push   0x10010160	100034e3: R_386_32	.bss
100034e7:	50                   	push   eax
100034e8:	e8 fb f8 ff ff       	call   10002de8 <_ssfn__zbuild_huffman>
100034ed:	eb 09                	jmp    100034f8 <_ssfn__parse_zlib+0x130>
100034ef:	83 ec 0c             	sub    esp,0xc
100034f2:	53                   	push   ebx
100034f3:	e8 05 fd ff ff       	call   100031fd <_ssfn__compute_huffman_codes>
100034f8:	83 c4 10             	add    esp,0x10
100034fb:	85 c0                	test   eax,eax
100034fd:	74 b8                	je     100034b7 <_ssfn__parse_zlib+0xef>
100034ff:	83 ec 0c             	sub    esp,0xc
10003502:	53                   	push   ebx
10003503:	e8 d3 fb ff ff       	call   100030db <_ssfn__parse_huffman_block>
10003508:	83 c4 10             	add    esp,0x10
1000350b:	85 c0                	test   eax,eax
1000350d:	74 a8                	je     100034b7 <_ssfn__parse_zlib+0xef>
1000350f:	85 ed                	test   ebp,ebp
10003511:	0f 84 ca fe ff ff    	je     100033e1 <_ssfn__parse_zlib+0x19>
10003517:	be 01 00 00 00       	mov    esi,0x1
1000351c:	83 c4 1c             	add    esp,0x1c
1000351f:	89 f0                	mov    eax,esi
10003521:	5b                   	pop    ebx
10003522:	5e                   	pop    esi
10003523:	5f                   	pop    edi
10003524:	5d                   	pop    ebp
10003525:	c3                   	ret    

10003526 <_ssfn_zlib_decode>:
10003526:	81 ec f8 0f 00 00    	sub    esp,0xff8
1000352c:	6a 08                	push   0x8
1000352e:	e8 fc ff ff ff       	call   1000352f <_ssfn_zlib_decode+0x9>	1000352f: R_386_PC32	malloc
10003533:	83 c4 10             	add    esp,0x10
10003536:	85 c0                	test   eax,eax
10003538:	74 49                	je     10003583 <_ssfn_zlib_decode+0x5d>
1000353a:	8b 94 24 f0 0f 00 00 	mov    edx,DWORD PTR [esp+0xff0]
10003541:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003545:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003549:	89 14 24             	mov    DWORD PTR [esp],edx
1000354c:	83 c0 08             	add    eax,0x8
1000354f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003553:	e8 1d fe ff ff       	call   10003375 <_ssfn__init_zdefaults>
10003558:	83 ec 0c             	sub    esp,0xc
1000355b:	8d 44 24 0c          	lea    eax,[esp+0xc]
1000355f:	50                   	push   eax
10003560:	e8 63 fe ff ff       	call   100033c8 <_ssfn__parse_zlib>
10003565:	83 c4 10             	add    esp,0x10
10003568:	85 c0                	test   eax,eax
1000356a:	74 06                	je     10003572 <_ssfn_zlib_decode+0x4c>
1000356c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003570:	eb 11                	jmp    10003583 <_ssfn_zlib_decode+0x5d>
10003572:	83 ec 0c             	sub    esp,0xc
10003575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003579:	e8 fc ff ff ff       	call   1000357a <_ssfn_zlib_decode+0x54>	1000357a: R_386_PC32	free
1000357e:	83 c4 10             	add    esp,0x10
10003581:	31 c0                	xor    eax,eax
10003583:	81 c4 ec 0f 00 00    	add    esp,0xfec
10003589:	c3                   	ret    

1000358a <ssfn_load>:
1000358a:	55                   	push   ebp
1000358b:	57                   	push   edi
1000358c:	56                   	push   esi
1000358d:	53                   	push   ebx
1000358e:	83 ec 1c             	sub    esp,0x1c
10003591:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10003595:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10003599:	85 ff                	test   edi,edi
1000359b:	0f 84 d5 01 00 00    	je     10003776 <ssfn_load+0x1ec>
100035a1:	85 f6                	test   esi,esi
100035a3:	0f 84 cd 01 00 00    	je     10003776 <ssfn_load+0x1ec>
100035a9:	80 3e 1f             	cmp    BYTE PTR [esi],0x1f
100035ac:	0f 85 a8 00 00 00    	jne    1000365a <ssfn_load+0xd0>
100035b2:	80 7e 01 8b          	cmp    BYTE PTR [esi+0x1],0x8b
100035b6:	0f 85 9e 00 00 00    	jne    1000365a <ssfn_load+0xd0>
100035bc:	80 7e 02 08          	cmp    BYTE PTR [esi+0x2],0x8
100035c0:	74 0a                	je     100035cc <ssfn_load+0x42>
100035c2:	bd fe ff ff ff       	mov    ebp,0xfffffffe
100035c7:	e9 af 01 00 00       	jmp    1000377b <ssfn_load+0x1f1>
100035cc:	8a 46 03             	mov    al,BYTE PTR [esi+0x3]
100035cf:	a8 04                	test   al,0x4
100035d1:	75 05                	jne    100035d8 <ssfn_load+0x4e>
100035d3:	83 c6 0a             	add    esi,0xa
100035d6:	eb 08                	jmp    100035e0 <ssfn_load+0x56>
100035d8:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
100035dc:	8d 74 16 0c          	lea    esi,[esi+edx*1+0xc]
100035e0:	a8 08                	test   al,0x8
100035e2:	74 07                	je     100035eb <ssfn_load+0x61>
100035e4:	46                   	inc    esi
100035e5:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
100035e9:	eb f7                	jmp    100035e2 <ssfn_load+0x58>
100035eb:	a8 10                	test   al,0x10
100035ed:	74 07                	je     100035f6 <ssfn_load+0x6c>
100035ef:	46                   	inc    esi
100035f0:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
100035f4:	eb f7                	jmp    100035ed <ssfn_load+0x63>
100035f6:	83 ec 0c             	sub    esp,0xc
100035f9:	56                   	push   esi
100035fa:	e8 fc ff ff ff       	call   100035fb <ssfn_load+0x71>	100035fb: R_386_PC32	_ssfn_zlib_decode
100035ff:	83 c4 10             	add    esp,0x10
10003602:	89 c6                	mov    esi,eax
10003604:	85 c0                	test   eax,eax
10003606:	74 ba                	je     100035c2 <ssfn_load+0x38>
10003608:	50                   	push   eax
10003609:	50                   	push   eax
1000360a:	8b 87 78 f5 00 00    	mov    eax,DWORD PTR [edi+0xf578]
10003610:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
10003617:	50                   	push   eax
10003618:	ff b7 70 f5 00 00    	push   DWORD PTR [edi+0xf570]
1000361e:	e8 fc ff ff ff       	call   1000361f <ssfn_load+0x95>	1000361f: R_386_PC32	realloc
10003623:	83 c4 10             	add    esp,0x10
10003626:	89 87 70 f5 00 00    	mov    DWORD PTR [edi+0xf570],eax
1000362c:	85 c0                	test   eax,eax
1000362e:	75 0f                	jne    1000363f <ssfn_load+0xb5>
10003630:	c7 87 78 f5 00 00 00 00 00 00 	mov    DWORD PTR [edi+0xf578],0x0
1000363a:	e9 1a 01 00 00       	jmp    10003759 <ssfn_load+0x1cf>
1000363f:	8b 97 78 f5 00 00    	mov    edx,DWORD PTR [edi+0xf578]
10003645:	8d 4a 01             	lea    ecx,[edx+0x1]
10003648:	89 8f 78 f5 00 00    	mov    DWORD PTR [edi+0xf578],ecx
1000364e:	89 34 90             	mov    DWORD PTR [eax+edx*4],esi
10003651:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10003654:	01 87 7c f5 00 00    	add    DWORD PTR [edi+0xf57c],eax
1000365a:	50                   	push   eax
1000365b:	6a 04                	push   0x4
1000365d:	68 5e 90 00 10       	push   0x1000905e	1000365e: R_386_32	.text
10003662:	56                   	push   esi
10003663:	e8 fc ff ff ff       	call   10003664 <ssfn_load+0xda>	10003664: R_386_PC32	memcmp
10003668:	83 c4 10             	add    esp,0x10
1000366b:	89 c5                	mov    ebp,eax
1000366d:	85 c0                	test   eax,eax
1000366f:	75 29                	jne    1000369a <ssfn_load+0x110>
10003671:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10003674:	01 f3                	add    ebx,esi
10003676:	83 c6 08             	add    esi,0x8
10003679:	39 de                	cmp    esi,ebx
1000367b:	0f 83 fa 00 00 00    	jae    1000377b <ssfn_load+0x1f1>
10003681:	50                   	push   eax
10003682:	50                   	push   eax
10003683:	56                   	push   esi
10003684:	57                   	push   edi
10003685:	e8 fc ff ff ff       	call   10003686 <ssfn_load+0xfc>	10003686: R_386_PC32	ssfn_load
1000368a:	83 c4 10             	add    esp,0x10
1000368d:	85 c0                	test   eax,eax
1000368f:	0f 85 e6 00 00 00    	jne    1000377b <ssfn_load+0x1f1>
10003695:	03 76 04             	add    esi,DWORD PTR [esi+0x4]
10003698:	eb df                	jmp    10003679 <ssfn_load+0xef>
1000369a:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
1000369d:	83 e0 0f             	and    eax,0xf
100036a0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100036a4:	53                   	push   ebx
100036a5:	6a 04                	push   0x4
100036a7:	68 63 90 00 10       	push   0x10009063	100036a8: R_386_32	.text
100036ac:	56                   	push   esi
100036ad:	e8 fc ff ff ff       	call   100036ae <ssfn_load+0x124>	100036ae: R_386_PC32	memcmp
100036b2:	83 c4 10             	add    esp,0x10
100036b5:	89 c5                	mov    ebp,eax
100036b7:	85 c0                	test   eax,eax
100036b9:	0f 85 03 ff ff ff    	jne    100035c2 <ssfn_load+0x38>
100036bf:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
100036c2:	8d 44 1e fc          	lea    eax,[esi+ebx*1-0x4]
100036c6:	51                   	push   ecx
100036c7:	6a 04                	push   0x4
100036c9:	68 68 90 00 10       	push   0x10009068	100036ca: R_386_32	.text
100036ce:	50                   	push   eax
100036cf:	e8 fc ff ff ff       	call   100036d0 <ssfn_load+0x146>	100036d0: R_386_PC32	memcmp
100036d4:	83 c4 10             	add    esp,0x10
100036d7:	85 c0                	test   eax,eax
100036d9:	0f 85 e3 fe ff ff    	jne    100035c2 <ssfn_load+0x38>
100036df:	80 7c 24 0f 04       	cmp    BYTE PTR [esp+0xf],0x4
100036e4:	0f 87 d8 fe ff ff    	ja     100035c2 <ssfn_load+0x38>
100036ea:	0f b7 4e 0e          	movzx  ecx,WORD PTR [esi+0xe]
100036ee:	39 cb                	cmp    ebx,ecx
100036f0:	0f 86 cc fe ff ff    	jbe    100035c2 <ssfn_load+0x38>
100036f6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
100036f9:	39 c3                	cmp    ebx,eax
100036fb:	0f 86 c1 fe ff ff    	jbe    100035c2 <ssfn_load+0x38>
10003701:	3b 5e 14             	cmp    ebx,DWORD PTR [esi+0x14]
10003704:	0f 86 b8 fe ff ff    	jbe    100035c2 <ssfn_load+0x38>
1000370a:	3b 5e 18             	cmp    ebx,DWORD PTR [esi+0x18]
1000370d:	0f 86 af fe ff ff    	jbe    100035c2 <ssfn_load+0x38>
10003713:	3b 5e 1c             	cmp    ebx,DWORD PTR [esi+0x1c]
10003716:	0f 86 a6 fe ff ff    	jbe    100035c2 <ssfn_load+0x38>
1000371c:	39 c1                	cmp    ecx,eax
1000371e:	0f 83 9e fe ff ff    	jae    100035c2 <ssfn_load+0x38>
10003724:	0f b6 5c 24 0f       	movzx  ebx,BYTE PTR [esp+0xf]
10003729:	8d 1c 9f             	lea    ebx,[edi+ebx*4]
1000372c:	8b 83 a4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a4]
10003732:	40                   	inc    eax
10003733:	89 83 a4 f5 00 00    	mov    DWORD PTR [ebx+0xf5a4],eax
10003739:	52                   	push   edx
1000373a:	c1 e0 02             	shl    eax,0x2
1000373d:	52                   	push   edx
1000373e:	50                   	push   eax
1000373f:	ff 33                	push   DWORD PTR [ebx]
10003741:	e8 fc ff ff ff       	call   10003742 <ssfn_load+0x1b8>	10003742: R_386_PC32	realloc
10003746:	83 c4 10             	add    esp,0x10
10003749:	89 03                	mov    DWORD PTR [ebx],eax
1000374b:	85 c0                	test   eax,eax
1000374d:	75 0f                	jne    1000375e <ssfn_load+0x1d4>
1000374f:	c7 83 a4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5a4],0x0
10003759:	83 cd ff             	or     ebp,0xffffffff
1000375c:	eb 1d                	jmp    1000377b <ssfn_load+0x1f1>
1000375e:	8b 93 a4 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf5a4]
10003764:	83 ec 0c             	sub    esp,0xc
10003767:	89 74 90 fc          	mov    DWORD PTR [eax+edx*4-0x4],esi
1000376b:	57                   	push   edi
1000376c:	e8 a0 f5 ff ff       	call   10002d11 <_ssfn_fc>
10003771:	83 c4 10             	add    esp,0x10
10003774:	eb 05                	jmp    1000377b <ssfn_load+0x1f1>
10003776:	bd fc ff ff ff       	mov    ebp,0xfffffffc
1000377b:	83 c4 1c             	add    esp,0x1c
1000377e:	89 e8                	mov    eax,ebp
10003780:	5b                   	pop    ebx
10003781:	5e                   	pop    esi
10003782:	5f                   	pop    edi
10003783:	5d                   	pop    ebp
10003784:	c3                   	ret    

10003785 <ssfn_free>:
10003785:	57                   	push   edi
10003786:	56                   	push   esi
10003787:	53                   	push   ebx
10003788:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000378c:	85 db                	test   ebx,ebx
1000378e:	0f 84 83 00 00 00    	je     10003817 <ssfn_free+0x92>
10003794:	83 ec 0c             	sub    esp,0xc
10003797:	53                   	push   ebx
10003798:	e8 74 f5 ff ff       	call   10002d11 <_ssfn_fc>
1000379d:	83 c4 10             	add    esp,0x10
100037a0:	83 bb 70 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf570],0x0
100037a7:	74 32                	je     100037db <ssfn_free+0x56>
100037a9:	31 f6                	xor    esi,esi
100037ab:	8b 83 70 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf570]
100037b1:	39 b3 78 f5 00 00    	cmp    DWORD PTR [ebx+0xf578],esi
100037b7:	7e 16                	jle    100037cf <ssfn_free+0x4a>
100037b9:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
100037bc:	85 c0                	test   eax,eax
100037be:	74 0c                	je     100037cc <ssfn_free+0x47>
100037c0:	83 ec 0c             	sub    esp,0xc
100037c3:	50                   	push   eax
100037c4:	e8 fc ff ff ff       	call   100037c5 <ssfn_free+0x40>	100037c5: R_386_PC32	free
100037c9:	83 c4 10             	add    esp,0x10
100037cc:	46                   	inc    esi
100037cd:	eb dc                	jmp    100037ab <ssfn_free+0x26>
100037cf:	83 ec 0c             	sub    esp,0xc
100037d2:	50                   	push   eax
100037d3:	e8 fc ff ff ff       	call   100037d4 <ssfn_free+0x4f>	100037d4: R_386_PC32	free
100037d8:	83 c4 10             	add    esp,0x10
100037db:	31 f6                	xor    esi,esi
100037dd:	8b 04 b3             	mov    eax,DWORD PTR [ebx+esi*4]
100037e0:	85 c0                	test   eax,eax
100037e2:	74 0c                	je     100037f0 <ssfn_free+0x6b>
100037e4:	83 ec 0c             	sub    esp,0xc
100037e7:	50                   	push   eax
100037e8:	e8 fc ff ff ff       	call   100037e9 <ssfn_free+0x64>	100037e9: R_386_PC32	free
100037ed:	83 c4 10             	add    esp,0x10
100037f0:	46                   	inc    esi
100037f1:	83 fe 05             	cmp    esi,0x5
100037f4:	75 e7                	jne    100037dd <ssfn_free+0x58>
100037f6:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100037fc:	85 c0                	test   eax,eax
100037fe:	74 0c                	je     1000380c <ssfn_free+0x87>
10003800:	83 ec 0c             	sub    esp,0xc
10003803:	50                   	push   eax
10003804:	e8 fc ff ff ff       	call   10003805 <ssfn_free+0x80>	10003805: R_386_PC32	free
10003809:	83 c4 10             	add    esp,0x10
1000380c:	b9 72 3d 00 00       	mov    ecx,0x3d72
10003811:	31 c0                	xor    eax,eax
10003813:	89 df                	mov    edi,ebx
10003815:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003817:	5b                   	pop    ebx
10003818:	5e                   	pop    esi
10003819:	5f                   	pop    edi
1000381a:	c3                   	ret    

1000381b <ssfn_mem>:
1000381b:	55                   	push   ebp
1000381c:	31 c0                	xor    eax,eax
1000381e:	57                   	push   edi
1000381f:	56                   	push   esi
10003820:	53                   	push   ebx
10003821:	83 ec 08             	sub    esp,0x8
10003824:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10003828:	85 d2                	test   edx,edx
1000382a:	0f 84 8e 00 00 00    	je     100038be <ssfn_mem+0xa3>
10003830:	b8 c8 f5 00 00       	mov    eax,0xf5c8
10003835:	31 c9                	xor    ecx,ecx
10003837:	8b 9c 8a a4 f5 00 00 	mov    ebx,DWORD PTR [edx+ecx*4+0xf5a4]
1000383e:	41                   	inc    ecx
1000383f:	8d 04 98             	lea    eax,[eax+ebx*4]
10003842:	83 f9 05             	cmp    ecx,0x5
10003845:	75 f0                	jne    10003837 <ssfn_mem+0x1c>
10003847:	03 82 7c f5 00 00    	add    eax,DWORD PTR [edx+0xf57c]
1000384d:	31 c9                	xor    ecx,ecx
1000384f:	8b b4 8a 28 f5 00 00 	mov    esi,DWORD PTR [edx+ecx*4+0xf528]
10003856:	89 34 24             	mov    DWORD PTR [esp],esi
10003859:	85 f6                	test   esi,esi
1000385b:	74 48                	je     100038a5 <ssfn_mem+0x8a>
1000385d:	31 db                	xor    ebx,ebx
1000385f:	8b 34 24             	mov    esi,DWORD PTR [esp]
10003862:	8b 3c 9e             	mov    edi,DWORD PTR [esi+ebx*4]
10003865:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
10003869:	85 ff                	test   edi,edi
1000386b:	74 2a                	je     10003897 <ssfn_mem+0x7c>
1000386d:	31 f6                	xor    esi,esi
1000386f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
10003873:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
10003876:	85 ed                	test   ebp,ebp
10003878:	74 0f                	je     10003889 <ssfn_mem+0x6e>
1000387a:	0f b7 7d 00          	movzx  edi,WORD PTR [ebp+0x0]
1000387e:	0f b6 6d 02          	movzx  ebp,BYTE PTR [ebp+0x2]
10003882:	0f af fd             	imul   edi,ebp
10003885:	8d 44 38 08          	lea    eax,[eax+edi*1+0x8]
10003889:	46                   	inc    esi
1000388a:	81 fe 00 01 00 00    	cmp    esi,0x100
10003890:	75 dd                	jne    1000386f <ssfn_mem+0x54>
10003892:	05 00 04 00 00       	add    eax,0x400
10003897:	43                   	inc    ebx
10003898:	81 fb 00 01 00 00    	cmp    ebx,0x100
1000389e:	75 bf                	jne    1000385f <ssfn_mem+0x44>
100038a0:	05 00 04 00 00       	add    eax,0x400
100038a5:	41                   	inc    ecx
100038a6:	83 f9 11             	cmp    ecx,0x11
100038a9:	75 a4                	jne    1000384f <ssfn_mem+0x34>
100038ab:	83 ba 6c f5 00 00 00 	cmp    DWORD PTR [edx+0xf56c],0x0
100038b2:	74 0a                	je     100038be <ssfn_mem+0xa3>
100038b4:	8b 92 84 f5 00 00    	mov    edx,DWORD PTR [edx+0xf584]
100038ba:	01 d2                	add    edx,edx
100038bc:	01 d0                	add    eax,edx
100038be:	83 c4 08             	add    esp,0x8
100038c1:	5b                   	pop    ebx
100038c2:	5e                   	pop    esi
100038c3:	5f                   	pop    edi
100038c4:	5d                   	pop    ebp
100038c5:	c3                   	ret    

100038c6 <ssfn_select>:
100038c6:	55                   	push   ebp
100038c7:	57                   	push   edi
100038c8:	56                   	push   esi
100038c9:	53                   	push   ebx
100038ca:	83 ec 1c             	sub    esp,0x1c
100038cd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
100038d1:	85 db                	test   ebx,ebx
100038d3:	75 0a                	jne    100038df <ssfn_select+0x19>
100038d5:	be fc ff ff ff       	mov    esi,0xfffffffc
100038da:	e9 18 01 00 00       	jmp    100039f7 <ssfn_select+0x131>
100038df:	83 ec 0c             	sub    esp,0xc
100038e2:	53                   	push   ebx
100038e3:	e8 29 f4 ff ff       	call   10002d11 <_ssfn_fc>
100038e8:	83 c4 10             	add    esp,0x10
100038eb:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100038ef:	81 e6 00 c0 ff ff    	and    esi,0xffffc000
100038f5:	0f 85 e9 00 00 00    	jne    100039e4 <ssfn_select+0x11e>
100038fb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100038ff:	83 e8 08             	sub    eax,0x8
10003902:	3d b8 00 00 00       	cmp    eax,0xb8
10003907:	0f 87 de 00 00 00    	ja     100039eb <ssfn_select+0x125>
1000390d:	81 7c 24 34 fe 00 00 00 	cmp    DWORD PTR [esp+0x34],0xfe
10003915:	75 76                	jne    1000398d <ssfn_select+0xc7>
10003917:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
1000391c:	74 b7                	je     100038d5 <ssfn_select+0xf>
1000391e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10003922:	80 38 00             	cmp    BYTE PTR [eax],0x0
10003925:	74 ae                	je     100038d5 <ssfn_select+0xf>
10003927:	31 ed                	xor    ebp,ebp
10003929:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000392d:	80 3c 28 00          	cmp    BYTE PTR [eax+ebp*1],0x0
10003931:	74 03                	je     10003936 <ssfn_select+0x70>
10003933:	45                   	inc    ebp
10003934:	eb f3                	jmp    10003929 <ssfn_select+0x63>
10003936:	8d 43 14             	lea    eax,[ebx+0x14]
10003939:	89 df                	mov    edi,ebx
1000393b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000393f:	8b 87 a4 f5 00 00    	mov    eax,DWORD PTR [edi+0xf5a4]
10003945:	31 d2                	xor    edx,edx
10003947:	89 04 24             	mov    DWORD PTR [esp],eax
1000394a:	39 14 24             	cmp    DWORD PTR [esp],edx
1000394d:	7e 33                	jle    10003982 <ssfn_select+0xbc>
1000394f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10003953:	8b 07                	mov    eax,DWORD PTR [edi]
10003955:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
10003958:	50                   	push   eax
10003959:	8d 41 20             	lea    eax,[ecx+0x20]
1000395c:	55                   	push   ebp
1000395d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10003961:	50                   	push   eax
10003962:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
10003966:	e8 fc ff ff ff       	call   10003967 <ssfn_select+0xa1>	10003967: R_386_PC32	memcmp
1000396b:	83 c4 10             	add    esp,0x10
1000396e:	85 c0                	test   eax,eax
10003970:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10003974:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10003978:	75 05                	jne    1000397f <ssfn_select+0xb9>
1000397a:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
1000397d:	eb 34                	jmp    100039b3 <ssfn_select+0xed>
1000397f:	42                   	inc    edx
10003980:	eb c8                	jmp    1000394a <ssfn_select+0x84>
10003982:	83 c7 04             	add    edi,0x4
10003985:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10003989:	75 b4                	jne    1000393f <ssfn_select+0x79>
1000398b:	eb 65                	jmp    100039f2 <ssfn_select+0x12c>
1000398d:	81 7c 24 34 ff 00 00 00 	cmp    DWORD PTR [esp+0x34],0xff
10003995:	74 15                	je     100039ac <ssfn_select+0xe6>
10003997:	83 7c 24 34 04       	cmp    DWORD PTR [esp+0x34],0x4
1000399c:	7f 54                	jg     100039f2 <ssfn_select+0x12c>
1000399e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100039a2:	83 bc 83 a4 f5 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0xf5a4],0x0
100039aa:	74 46                	je     100039f2 <ssfn_select+0x12c>
100039ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
100039b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100039b7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
100039be:	89 83 b8 f5 00 00    	mov    DWORD PTR [ebx+0xf5b8],eax
100039c4:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
100039ce:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100039d2:	89 83 bc f5 00 00    	mov    DWORD PTR [ebx+0xf5bc],eax
100039d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100039dc:	89 83 c0 f5 00 00    	mov    DWORD PTR [ebx+0xf5c0],eax
100039e2:	eb 13                	jmp    100039f7 <ssfn_select+0x131>
100039e4:	be fb ff ff ff       	mov    esi,0xfffffffb
100039e9:	eb 0c                	jmp    100039f7 <ssfn_select+0x131>
100039eb:	be fa ff ff ff       	mov    esi,0xfffffffa
100039f0:	eb 05                	jmp    100039f7 <ssfn_select+0x131>
100039f2:	be fd ff ff ff       	mov    esi,0xfffffffd
100039f7:	83 c4 1c             	add    esp,0x1c
100039fa:	89 f0                	mov    eax,esi
100039fc:	5b                   	pop    ebx
100039fd:	5e                   	pop    esi
100039fe:	5f                   	pop    edi
100039ff:	5d                   	pop    ebp
10003a00:	c3                   	ret    

10003a01 <ssfn_render>:
10003a01:	55                   	push   ebp
10003a02:	57                   	push   edi
10003a03:	56                   	push   esi
10003a04:	53                   	push   ebx
10003a05:	81 ec ec 05 01 00    	sub    esp,0x105ec
10003a0b:	83 bc 24 08 06 01 00 00 	cmp    DWORD PTR [esp+0x10608],0x0
10003a13:	8b ac 24 00 06 01 00 	mov    ebp,DWORD PTR [esp+0x10600]
10003a1a:	0f 94 c2             	sete   dl
10003a1d:	c7 84 24 d8 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xd8],0x0
10003a28:	85 ed                	test   ebp,ebp
10003a2a:	0f 94 c0             	sete   al
10003a2d:	08 c2                	or     dl,al
10003a2f:	74 0a                	je     10003a3b <ssfn_render+0x3a>
10003a31:	b8 fc ff ff ff       	mov    eax,0xfffffffc
10003a36:	e9 c8 1d 00 00       	jmp    10005803 <ssfn_render+0x1e02>
10003a3b:	8b 84 24 08 06 01 00 	mov    eax,DWORD PTR [esp+0x10608]
10003a42:	8a 10                	mov    dl,BYTE PTR [eax]
10003a44:	31 c0                	xor    eax,eax
10003a46:	84 d2                	test   dl,dl
10003a48:	0f 84 b5 1d 00 00    	je     10005803 <ssfn_render+0x1e02>
10003a4e:	80 fa 0d             	cmp    dl,0xd
10003a51:	75 0f                	jne    10003a62 <ssfn_render+0x61>
10003a53:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10003a5a:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
10003a60:	eb 32                	jmp    10003a94 <ssfn_render+0x93>
10003a62:	80 fa 0a             	cmp    dl,0xa
10003a65:	75 37                	jne    10003a9e <ssfn_render+0x9d>
10003a67:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10003a6e:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
10003a74:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
10003a77:	8b 85 c4 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c4]
10003a7d:	85 c0                	test   eax,eax
10003a7f:	75 06                	jne    10003a87 <ssfn_render+0x86>
10003a81:	8b 85 c0 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c0]
10003a87:	01 d0                	add    eax,edx
10003a89:	8b bc 24 04 06 01 00 	mov    edi,DWORD PTR [esp+0x10604]
10003a90:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
10003a94:	b8 01 00 00 00       	mov    eax,0x1
10003a99:	e9 65 1d 00 00       	jmp    10005803 <ssfn_render+0x1e02>
10003a9e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10003aa1:	85 c0                	test   eax,eax
10003aa3:	74 43                	je     10003ae8 <ssfn_render+0xe7>
10003aa5:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
10003aa8:	8d b4 24 d0 00 00 00 	lea    esi,[esp+0xd0]
10003aaf:	56                   	push   esi
10003ab0:	8d 94 24 dc 00 00 00 	lea    edx,[esp+0xdc]
10003ab7:	52                   	push   edx
10003ab8:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
10003abf:	50                   	push   eax
10003ac0:	e8 b5 ed ff ff       	call   1000287a <_ssfn_c>
10003ac5:	83 c4 10             	add    esp,0x10
10003ac8:	89 c1                	mov    ecx,eax
10003aca:	85 c0                	test   eax,eax
10003acc:	0f 85 71 02 00 00    	jne    10003d43 <ssfn_render+0x342>
10003ad2:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10003ad8:	25 00 01 00 00       	and    eax,0x100
10003add:	0f 84 fe 01 00 00    	je     10003ce1 <ssfn_render+0x2e0>
10003ae3:	e9 1e 02 00 00       	jmp    10003d06 <ssfn_render+0x305>
10003ae8:	8b b5 b8 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf5b8]
10003aee:	c7 45 18 00 00 00 00 	mov    DWORD PTR [ebp+0x18],0x0
10003af5:	81 fe fd 00 00 00    	cmp    esi,0xfd
10003afb:	7f 07                	jg     10003b04 <ssfn_render+0x103>
10003afd:	89 f3                	mov    ebx,esi
10003aff:	89 34 24             	mov    DWORD PTR [esp],esi
10003b02:	eb 37                	jmp    10003b3b <ssfn_render+0x13a>
10003b04:	31 db                	xor    ebx,ebx
10003b06:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
10003b0d:	eb 2c                	jmp    10003b3b <ssfn_render+0x13a>
10003b0f:	85 c9                	test   ecx,ecx
10003b11:	0f 84 65 01 00 00    	je     10003c7c <ssfn_render+0x27b>
10003b17:	43                   	inc    ebx
10003b18:	3b 1c 24             	cmp    ebx,DWORD PTR [esp]
10003b1b:	7e 22                	jle    10003b3f <ssfn_render+0x13e>
10003b1d:	85 c9                	test   ecx,ecx
10003b1f:	0f 85 1e 02 00 00    	jne    10003d43 <ssfn_render+0x342>
10003b25:	31 db                	xor    ebx,ebx
10003b27:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
10003b2e:	81 fe ff 00 00 00    	cmp    esi,0xff
10003b34:	74 9c                	je     10003ad2 <ssfn_render+0xd1>
10003b36:	be ff 00 00 00       	mov    esi,0xff
10003b3b:	31 c9                	xor    ecx,ecx
10003b3d:	eb d9                	jmp    10003b18 <ssfn_render+0x117>
10003b3f:	8b 7c 9d 00          	mov    edi,DWORD PTR [ebp+ebx*4+0x0]
10003b43:	f6 85 bc f5 00 00 03 	test   BYTE PTR [ebp+0xf5bc],0x3
10003b4a:	74 c3                	je     10003b0f <ssfn_render+0x10e>
10003b4c:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10003b57:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003b5e:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10003b65:	7e 53                	jle    10003bba <ssfn_render+0x1b9>
10003b67:	8b 14 87             	mov    edx,DWORD PTR [edi+eax*4]
10003b6a:	0f b6 42 08          	movzx  eax,BYTE PTR [edx+0x8]
10003b6e:	c1 f8 04             	sar    eax,0x4
10003b71:	33 85 bc f5 00 00    	xor    eax,DWORD PTR [ebp+0xf5bc]
10003b77:	a8 03                	test   al,0x3
10003b79:	75 36                	jne    10003bb1 <ssfn_render+0x1b0>
10003b7b:	0f b6 42 0b          	movzx  eax,BYTE PTR [edx+0xb]
10003b7f:	3b 85 c0 f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf5c0]
10003b85:	75 2a                	jne    10003bb1 <ssfn_render+0x1b0>
10003b87:	8d 84 24 d0 00 00 00 	lea    eax,[esp+0xd0]
10003b8e:	50                   	push   eax
10003b8f:	8d 84 24 dc 00 00 00 	lea    eax,[esp+0xdc]
10003b96:	50                   	push   eax
10003b97:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
10003b9e:	52                   	push   edx
10003b9f:	e8 d6 ec ff ff       	call   1000287a <_ssfn_c>
10003ba4:	83 c4 10             	add    esp,0x10
10003ba7:	89 c1                	mov    ecx,eax
10003ba9:	85 c0                	test   eax,eax
10003bab:	0f 85 0e 01 00 00    	jne    10003cbf <ssfn_render+0x2be>
10003bb1:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
10003bb8:	eb 9d                	jmp    10003b57 <ssfn_render+0x156>
10003bba:	85 c9                	test   ecx,ecx
10003bbc:	0f 85 55 ff ff ff    	jne    10003b17 <ssfn_render+0x116>
10003bc2:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10003bcd:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003bd4:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10003bdb:	0f 8e a3 1b 00 00    	jle    10005784 <ssfn_render+0x1d83>
10003be1:	8b 04 87             	mov    eax,DWORD PTR [edi+eax*4]
10003be4:	0f b6 50 0b          	movzx  edx,BYTE PTR [eax+0xb]
10003be8:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
10003bee:	74 09                	je     10003bf9 <ssfn_render+0x1f8>
10003bf0:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
10003bf7:	eb d4                	jmp    10003bcd <ssfn_render+0x1cc>
10003bf9:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
10003c00:	51                   	push   ecx
10003c01:	8d 94 24 dc 00 00 00 	lea    edx,[esp+0xdc]
10003c08:	52                   	push   edx
10003c09:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
10003c10:	50                   	push   eax
10003c11:	e8 64 ec ff ff       	call   1000287a <_ssfn_c>
10003c16:	83 c4 10             	add    esp,0x10
10003c19:	89 c1                	mov    ecx,eax
10003c1b:	85 c0                	test   eax,eax
10003c1d:	74 d1                	je     10003bf0 <ssfn_render+0x1ef>
10003c1f:	e9 9b 00 00 00       	jmp    10003cbf <ssfn_render+0x2be>
10003c24:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
10003c27:	0f b6 41 08          	movzx  eax,BYTE PTR [ecx+0x8]
10003c2b:	c1 f8 04             	sar    eax,0x4
10003c2e:	31 d0                	xor    eax,edx
10003c30:	a8 03                	test   al,0x3
10003c32:	0f 84 5c 1b 00 00    	je     10005794 <ssfn_render+0x1d93>
10003c38:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
10003c3f:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003c46:	8b 95 bc f5 00 00    	mov    edx,DWORD PTR [ebp+0xf5bc]
10003c4c:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10003c53:	7f cf                	jg     10003c24 <ssfn_render+0x223>
10003c55:	83 e2 03             	and    edx,0x3
10003c58:	83 fa 03             	cmp    edx,0x3
10003c5b:	75 1f                	jne    10003c7c <ssfn_render+0x27b>
10003c5d:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10003c68:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003c6f:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10003c76:	0f 8f 47 1b 00 00    	jg     100057c3 <ssfn_render+0x1dc2>
10003c7c:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10003c87:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003c8e:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10003c95:	7e 43                	jle    10003cda <ssfn_render+0x2d9>
10003c97:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
10003c9e:	51                   	push   ecx
10003c9f:	8d 94 24 dc 00 00 00 	lea    edx,[esp+0xdc]
10003ca6:	52                   	push   edx
10003ca7:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
10003cae:	ff 34 87             	push   DWORD PTR [edi+eax*4]
10003cb1:	e8 c4 eb ff ff       	call   1000287a <_ssfn_c>
10003cb6:	83 c4 10             	add    esp,0x10
10003cb9:	89 c1                	mov    ecx,eax
10003cbb:	85 c0                	test   eax,eax
10003cbd:	74 12                	je     10003cd1 <ssfn_render+0x2d0>
10003cbf:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003cc6:	8b 04 87             	mov    eax,DWORD PTR [edi+eax*4]
10003cc9:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
10003ccc:	e9 46 fe ff ff       	jmp    10003b17 <ssfn_render+0x116>
10003cd1:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
10003cd8:	eb ad                	jmp    10003c87 <ssfn_render+0x286>
10003cda:	31 c9                	xor    ecx,ecx
10003cdc:	e9 36 fe ff ff       	jmp    10003b17 <ssfn_render+0x116>
10003ce1:	8b 9d b8 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5b8]
10003ce7:	c7 84 24 d0 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xd0],0x0
10003cf2:	81 fb fd 00 00 00    	cmp    ebx,0xfd
10003cf8:	7f 16                	jg     10003d10 <ssfn_render+0x30f>
10003cfa:	89 d8                	mov    eax,ebx
10003cfc:	31 c9                	xor    ecx,ecx
10003cfe:	39 d8                	cmp    eax,ebx
10003d00:	7e 15                	jle    10003d17 <ssfn_render+0x316>
10003d02:	85 c9                	test   ecx,ecx
10003d04:	75 3d                	jne    10003d43 <ssfn_render+0x342>
10003d06:	b8 f9 ff ff ff       	mov    eax,0xfffffff9
10003d0b:	e9 f3 1a 00 00       	jmp    10005803 <ssfn_render+0x1e02>
10003d10:	bb 04 00 00 00       	mov    ebx,0x4
10003d15:	eb e5                	jmp    10003cfc <ssfn_render+0x2fb>
10003d17:	85 c9                	test   ecx,ecx
10003d19:	75 28                	jne    10003d43 <ssfn_render+0x342>
10003d1b:	83 bc 85 a4 f5 00 00 00 	cmp    DWORD PTR [ebp+eax*4+0xf5a4],0x0
10003d23:	74 1b                	je     10003d40 <ssfn_render+0x33f>
10003d25:	8b 54 85 00          	mov    edx,DWORD PTR [ebp+eax*4+0x0]
10003d29:	8b 12                	mov    edx,DWORD PTR [edx]
10003d2b:	85 d2                	test   edx,edx
10003d2d:	74 11                	je     10003d40 <ssfn_render+0x33f>
10003d2f:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
10003d32:	80 3c 32 00          	cmp    BYTE PTR [edx+esi*1],0x0
10003d36:	78 08                	js     10003d40 <ssfn_render+0x33f>
10003d38:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
10003d3b:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
10003d3e:	01 d1                	add    ecx,edx
10003d40:	40                   	inc    eax
10003d41:	eb bb                	jmp    10003cfe <ssfn_render+0x2fd>
10003d43:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
10003d46:	b8 fd ff ff ff       	mov    eax,0xfffffffd
10003d4b:	85 f6                	test   esi,esi
10003d4d:	0f 84 b0 1a 00 00    	je     10005803 <ssfn_render+0x1e02>
10003d53:	80 7e 0b 00          	cmp    BYTE PTR [esi+0xb],0x0
10003d57:	0f 84 a6 1a 00 00    	je     10005803 <ssfn_render+0x1e02>
10003d5d:	8b 9d c0 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5c0]
10003d63:	85 db                	test   ebx,ebx
10003d65:	0f 84 98 1a 00 00    	je     10005803 <ssfn_render+0x1e02>
10003d6b:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
10003d72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003d76:	c1 e8 10             	shr    eax,0x10
10003d79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003d7d:	83 f8 10             	cmp    eax,0x10
10003d80:	0f 87 ab fc ff ff    	ja     10003a31 <ssfn_render+0x30>
10003d86:	8d 41 06             	lea    eax,[ecx+0x6]
10003d89:	89 8d 74 f5 00 00    	mov    DWORD PTR [ebp+0xf574],ecx
10003d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003d93:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
10003d97:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10003d9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003da1:	0f ba e0 0c          	bt     eax,0xc
10003da5:	72 22                	jb     10003dc9 <ssfn_render+0x3c8>
10003da7:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10003daa:	83 e0 0f             	and    eax,0xf
10003dad:	3c 03                	cmp    al,0x3
10003daf:	74 18                	je     10003dc9 <ssfn_render+0x3c8>
10003db1:	8a 56 0c             	mov    dl,BYTE PTR [esi+0xc]
10003db4:	84 d2                	test   dl,dl
10003db6:	74 11                	je     10003dc9 <ssfn_render+0x3c8>
10003db8:	0f b6 fa             	movzx  edi,dl
10003dbb:	0f b6 46 0b          	movzx  eax,BYTE PTR [esi+0xb]
10003dbf:	0f af c3             	imul   eax,ebx
10003dc2:	99                   	cdq    
10003dc3:	f7 ff                	idiv   edi
10003dc5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003dc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003dcd:	25 00 02 00 00       	and    eax,0x200
10003dd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10003dd6:	75 34                	jne    10003e0c <ssfn_render+0x40b>
10003dd8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003ddc:	8b 84 85 28 f5 00 00 	mov    eax,DWORD PTR [ebp+eax*4+0xf528]
10003de3:	85 c0                	test   eax,eax
10003de5:	74 25                	je     10003e0c <ssfn_render+0x40b>
10003de7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10003deb:	0f b6 d6             	movzx  edx,dh
10003dee:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10003df1:	85 c0                	test   eax,eax
10003df3:	74 17                	je     10003e0c <ssfn_render+0x40b>
10003df5:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
10003dfa:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10003dfd:	85 c0                	test   eax,eax
10003dff:	74 0b                	je     10003e0c <ssfn_render+0x40b>
10003e01:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10003e07:	e9 cf 0c 00 00       	jmp    10004adb <ssfn_render+0x10da>
10003e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003e10:	0f b6 7e 0b          	movzx  edi,BYTE PTR [esi+0xb]
10003e14:	89 04 24             	mov    DWORD PTR [esp],eax
10003e17:	f6 44 24 08 40       	test   BYTE PTR [esp+0x8],0x40
10003e1c:	75 10                	jne    10003e2e <ssfn_render+0x42d>
10003e1e:	89 3c 24             	mov    DWORD PTR [esp],edi
10003e21:	39 fb                	cmp    ebx,edi
10003e23:	7e 09                	jle    10003e2e <ssfn_render+0x42d>
10003e25:	83 c3 04             	add    ebx,0x4
10003e28:	83 e3 fc             	and    ebx,0xfffffffc
10003e2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
10003e2e:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
10003e33:	f6 44 24 08 02       	test   BYTE PTR [esp+0x8],0x2
10003e38:	74 10                	je     10003e4a <ssfn_render+0x449>
10003e3a:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10003e3d:	c0 e8 05             	shr    al,0x5
10003e40:	83 f0 01             	xor    eax,0x1
10003e43:	83 e0 01             	and    eax,0x1
10003e46:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
10003e4a:	c6 44 24 40 00       	mov    BYTE PTR [esp+0x40],0x0
10003e4f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
10003e54:	74 10                	je     10003e66 <ssfn_render+0x465>
10003e56:	f6 46 08 10          	test   BYTE PTR [esi+0x8],0x10
10003e5a:	75 0a                	jne    10003e66 <ssfn_render+0x465>
10003e5c:	8d 47 40             	lea    eax,[edi+0x40]
10003e5f:	c1 f8 06             	sar    eax,0x6
10003e62:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
10003e66:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
10003e6a:	0f af 04 24          	imul   eax,DWORD PTR [esp]
10003e6e:	8d 44 07 ff          	lea    eax,[edi+eax*1-0x1]
10003e72:	99                   	cdq    
10003e73:	f7 ff                	idiv   edi
10003e75:	89 c1                	mov    ecx,eax
10003e77:	31 c0                	xor    eax,eax
10003e79:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
10003e7e:	74 0b                	je     10003e8b <ssfn_render+0x48a>
10003e80:	8b 04 24             	mov    eax,DWORD PTR [esp]
10003e83:	bb 04 00 00 00       	mov    ebx,0x4
10003e88:	99                   	cdq    
10003e89:	f7 fb                	idiv   ebx
10003e8b:	0f b6 7c 24 40       	movzx  edi,BYTE PTR [esp+0x40]
10003e90:	01 c8                	add    eax,ecx
10003e92:	8b 34 24             	mov    esi,DWORD PTR [esp]
10003e95:	01 f8                	add    eax,edi
10003e97:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
10003e9b:	0f af f0             	imul   esi,eax
10003e9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003ea2:	81 fe ff f4 00 00    	cmp    esi,0xf4ff
10003ea8:	b8 fa ff ff ff       	mov    eax,0xfffffffa
10003ead:	0f 8f 50 19 00 00    	jg     10005803 <ssfn_render+0x1e02>
10003eb3:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
10003eb8:	0f 85 e4 00 00 00    	jne    10003fa2 <ssfn_render+0x5a1>
10003ebe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003ec2:	8d 5c 85 00          	lea    ebx,[ebp+eax*4+0x0]
10003ec6:	83 bb 28 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf528],0x0
10003ecd:	75 2f                	jne    10003efe <ssfn_render+0x4fd>
10003ecf:	83 ec 0c             	sub    esp,0xc
10003ed2:	68 00 04 00 00       	push   0x400
10003ed7:	e8 fc ff ff ff       	call   10003ed8 <ssfn_render+0x4d7>	10003ed8: R_386_PC32	malloc
10003edc:	83 c4 10             	add    esp,0x10
10003edf:	89 83 28 f5 00 00    	mov    DWORD PTR [ebx+0xf528],eax
10003ee5:	85 c0                	test   eax,eax
10003ee7:	75 08                	jne    10003ef1 <ssfn_render+0x4f0>
10003ee9:	83 c8 ff             	or     eax,0xffffffff
10003eec:	e9 12 19 00 00       	jmp    10005803 <ssfn_render+0x1e02>
10003ef1:	89 c7                	mov    edi,eax
10003ef3:	b9 00 01 00 00       	mov    ecx,0x100
10003ef8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10003efc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003efe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003f02:	0f b6 fc             	movzx  edi,ah
10003f05:	8b 83 28 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf528]
10003f0b:	8d 14 b8             	lea    edx,[eax+edi*4]
10003f0e:	83 3a 00             	cmp    DWORD PTR [edx],0x0
10003f11:	75 32                	jne    10003f45 <ssfn_render+0x544>
10003f13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10003f17:	83 ec 0c             	sub    esp,0xc
10003f1a:	68 00 04 00 00       	push   0x400
10003f1f:	e8 fc ff ff ff       	call   10003f20 <ssfn_render+0x51f>	10003f20: R_386_PC32	malloc
10003f24:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10003f28:	83 c4 10             	add    esp,0x10
10003f2b:	89 02                	mov    DWORD PTR [edx],eax
10003f2d:	8b 83 28 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf528]
10003f33:	8b 14 b8             	mov    edx,DWORD PTR [eax+edi*4]
10003f36:	85 d2                	test   edx,edx
10003f38:	74 af                	je     10003ee9 <ssfn_render+0x4e8>
10003f3a:	b9 00 01 00 00       	mov    ecx,0x100
10003f3f:	31 c0                	xor    eax,eax
10003f41:	89 d7                	mov    edi,edx
10003f43:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003f45:	8b 9c 24 d0 00 00 00 	mov    ebx,DWORD PTR [esp+0xd0]
10003f4c:	83 ec 0c             	sub    esp,0xc
10003f4f:	0f b6 ff             	movzx  edi,bh
10003f52:	89 d8                	mov    eax,ebx
10003f54:	0f b6 db             	movzx  ebx,bl
10003f57:	c1 e8 10             	shr    eax,0x10
10003f5a:	8d 54 85 00          	lea    edx,[ebp+eax*4+0x0]
10003f5e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
10003f62:	8b 82 28 f5 00 00    	mov    eax,DWORD PTR [edx+0xf528]
10003f68:	8b 04 b8             	mov    eax,DWORD PTR [eax+edi*4]
10003f6b:	8d 0c 98             	lea    ecx,[eax+ebx*4]
10003f6e:	8d 46 08             	lea    eax,[esi+0x8]
10003f71:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
10003f75:	50                   	push   eax
10003f76:	e8 fc ff ff ff       	call   10003f77 <ssfn_render+0x576>	10003f77: R_386_PC32	malloc
10003f7b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10003f7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10003f83:	89 01                	mov    DWORD PTR [ecx],eax
10003f85:	83 c4 10             	add    esp,0x10
10003f88:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10003f8e:	8b 82 28 f5 00 00    	mov    eax,DWORD PTR [edx+0xf528]
10003f94:	8b 04 b8             	mov    eax,DWORD PTR [eax+edi*4]
10003f97:	83 3c 98 00          	cmp    DWORD PTR [eax+ebx*4],0x0
10003f9b:	75 0e                	jne    10003fab <ssfn_render+0x5aa>
10003f9d:	e9 47 ff ff ff       	jmp    10003ee9 <ssfn_render+0x4e8>
10003fa2:	8d 45 1c             	lea    eax,[ebp+0x1c]
10003fa5:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10003fab:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10003fb1:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10003fb5:	74 29                	je     10003fe0 <ssfn_render+0x5df>
10003fb7:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
10003fbc:	74 22                	je     10003fe0 <ssfn_render+0x5df>
10003fbe:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10003fc1:	bb 04 00 00 00       	mov    ebx,0x4
10003fc6:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10003fca:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
10003fce:	89 cf                	mov    edi,ecx
10003fd0:	29 c7                	sub    edi,eax
10003fd2:	8b 04 24             	mov    eax,DWORD PTR [esp]
10003fd5:	0f af c7             	imul   eax,edi
10003fd8:	99                   	cdq    
10003fd9:	f7 fb                	idiv   ebx
10003fdb:	99                   	cdq    
10003fdc:	f7 f9                	idiv   ecx
10003fde:	eb 02                	jmp    10003fe2 <ssfn_render+0x5e1>
10003fe0:	31 c0                	xor    eax,eax
10003fe2:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10003fe8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10003fec:	8a 1c 24             	mov    bl,BYTE PTR [esp]
10003fef:	66 89 3a             	mov    WORD PTR [edx],di
10003ff2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
10003ffa:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10004000:	c6 44 24 0c fe       	mov    BYTE PTR [esp+0xc],0xfe
10004005:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
10004008:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
1000400e:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10004014:	8a 59 04             	mov    bl,BYTE PTR [ecx+0x4]
10004017:	01 c3                	add    ebx,eax
10004019:	88 5a 04             	mov    BYTE PTR [edx+0x4],bl
1000401c:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10004022:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10004028:	8a 49 05             	mov    cl,BYTE PTR [ecx+0x5]
1000402b:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
1000402e:	8b 8d 24 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf524]
10004034:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
1000403a:	8a 12                	mov    dl,BYTE PTR [edx]
1000403c:	83 e2 3f             	and    edx,0x3f
1000403f:	01 d0                	add    eax,edx
10004041:	88 41 03             	mov    BYTE PTR [ecx+0x3],al
10004044:	89 f1                	mov    ecx,esi
10004046:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000404c:	8d 50 08             	lea    edx,[eax+0x8]
1000404f:	b0 ff                	mov    al,0xff
10004051:	89 d7                	mov    edi,edx
10004053:	f3 aa                	rep stos BYTE PTR es:[edi],al
10004055:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000405b:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
1000405f:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004065:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
10004069:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000406c:	c1 e0 04             	shl    eax,0x4
1000406f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10004073:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004077:	c1 e0 04             	shl    eax,0x4
1000407a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000407e:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
10004084:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
10004088:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
1000408c:	0f 8e 17 0a 00 00    	jle    10004aa9 <ssfn_render+0x10a8>
10004092:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10004096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000409a:	8a 4f 01             	mov    cl,BYTE PTR [edi+0x1]
1000409d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
100040a0:	8a 12                	mov    dl,BYTE PTR [edx]
100040a2:	0f b6 5f 02          	movzx  ebx,BYTE PTR [edi+0x2]
100040a6:	83 e2 40             	and    edx,0x40
100040a9:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
100040ad:	88 c2                	mov    dl,al
100040af:	21 ca                	and    edx,ecx
100040b1:	fe c2                	inc    dl
100040b3:	75 14                	jne    100040c9 <ssfn_render+0x6c8>
100040b5:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
100040ba:	19 c0                	sbb    eax,eax
100040bc:	8d 44 07 06          	lea    eax,[edi+eax*1+0x6]
100040c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100040c4:	e9 d3 09 00 00       	jmp    10004a9c <ssfn_render+0x109b>
100040c9:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
100040cd:	8b 7d 18             	mov    edi,DWORD PTR [ebp+0x18]
100040d0:	c1 e0 04             	shl    eax,0x4
100040d3:	0f b6 77 0b          	movzx  esi,BYTE PTR [edi+0xb]
100040d7:	0f af 04 24          	imul   eax,DWORD PTR [esp]
100040db:	99                   	cdq    
100040dc:	f7 fe                	idiv   esi
100040de:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
100040e2:	0f b6 c1             	movzx  eax,cl
100040e5:	c1 e0 04             	shl    eax,0x4
100040e8:	0f af 04 24          	imul   eax,DWORD PTR [esp]
100040ec:	99                   	cdq    
100040ed:	f7 fe                	idiv   esi
100040ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100040f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100040f7:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
100040fb:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
100040ff:	c1 e2 10             	shl    edx,0x10
10004102:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
10004107:	74 0e                	je     10004117 <ssfn_render+0x716>
10004109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000410d:	83 44 24 10 06       	add    DWORD PTR [esp+0x10],0x6
10004112:	8b 58 02             	mov    ebx,DWORD PTR [eax+0x2]
10004115:	eb 0c                	jmp    10004123 <ssfn_render+0x722>
10004117:	c1 e0 08             	shl    eax,0x8
1000411a:	83 44 24 10 05       	add    DWORD PTR [esp+0x10],0x5
1000411f:	09 d0                	or     eax,edx
10004121:	09 c3                	or     ebx,eax
10004123:	8d 0c 1f             	lea    ecx,[edi+ebx*1]
10004126:	8a 01                	mov    al,BYTE PTR [ecx]
10004128:	84 c0                	test   al,al
1000412a:	0f 88 dc 04 00 00    	js     1000460c <ssfn_render+0xc0b>
10004130:	89 c7                	mov    edi,eax
10004132:	83 e7 3f             	and    edi,0x3f
10004135:	a8 40                	test   al,0x40
10004137:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
1000413b:	74 10                	je     1000414d <ssfn_render+0x74c>
1000413d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
10004141:	89 f8                	mov    eax,edi
10004143:	41                   	inc    ecx
10004144:	c1 e0 08             	shl    eax,0x8
10004147:	09 c2                	or     edx,eax
10004149:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
1000414d:	8d 41 01             	lea    eax,[ecx+0x1]
10004150:	c7 85 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf580],0x0
1000415a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000415e:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10004169:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
1000416d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10004171:	83 c0 04             	add    eax,0x4
10004174:	c1 f8 02             	sar    eax,0x2
10004177:	01 c7                	add    edi,eax
10004179:	8b 8c 24 dc 00 00 00 	mov    ecx,DWORD PTR [esp+0xdc]
10004180:	3b 4c 24 28          	cmp    ecx,DWORD PTR [esp+0x28]
10004184:	0f 8f cb 01 00 00    	jg     10004355 <ssfn_render+0x954>
1000418a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000418d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
10004191:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
10004195:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10004199:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000419d:	0f b6 07             	movzx  eax,BYTE PTR [edi]
100041a0:	c1 e0 04             	shl    eax,0x4
100041a3:	0f af 04 24          	imul   eax,DWORD PTR [esp]
100041a7:	99                   	cdq    
100041a8:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
100041ac:	01 c6                	add    esi,eax
100041ae:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
100041b2:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
100041b6:	c1 e0 04             	shl    eax,0x4
100041b9:	0f af 04 24          	imul   eax,DWORD PTR [esp]
100041bd:	99                   	cdq    
100041be:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
100041c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
100041c6:	01 c3                	add    ebx,eax
100041c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100041cc:	89 c8                	mov    eax,ecx
100041ce:	01 c9                	add    ecx,ecx
100041d0:	c1 f8 02             	sar    eax,0x2
100041d3:	83 e1 06             	and    ecx,0x6
100041d6:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
100041da:	d3 f8                	sar    eax,cl
100041dc:	83 e0 03             	and    eax,0x3
100041df:	89 c1                	mov    ecx,eax
100041e1:	83 f8 02             	cmp    eax,0x2
100041e4:	74 4a                	je     10004230 <ssfn_render+0x82f>
100041e6:	83 f8 03             	cmp    eax,0x3
100041e9:	0f 84 de 00 00 00    	je     100042cd <ssfn_render+0x8cc>
100041ef:	49                   	dec    ecx
100041f0:	74 20                	je     10004212 <ssfn_render+0x811>
100041f2:	89 b5 9c f5 00 00    	mov    DWORD PTR [ebp+0xf59c],esi
100041f8:	89 b5 94 f5 00 00    	mov    DWORD PTR [ebp+0xf594],esi
100041fe:	89 9d a0 f5 00 00    	mov    DWORD PTR [ebp+0xf5a0],ebx
10004204:	89 9d 98 f5 00 00    	mov    DWORD PTR [ebp+0xf598],ebx
1000420a:	83 c7 02             	add    edi,0x2
1000420d:	e9 37 01 00 00       	jmp    10004349 <ssfn_render+0x948>
10004212:	83 ec 0c             	sub    esp,0xc
10004215:	83 c7 02             	add    edi,0x2
10004218:	53                   	push   ebx
10004219:	56                   	push   esi
1000421a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
1000421e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
10004222:	55                   	push   ebp
10004223:	e8 f9 e7 ff ff       	call   10002a21 <_ssfn_l>
10004228:	83 c4 20             	add    esp,0x20
1000422b:	e9 19 01 00 00       	jmp    10004349 <ssfn_render+0x948>
10004230:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
10004234:	83 c7 04             	add    edi,0x4
10004237:	c1 e0 04             	shl    eax,0x4
1000423a:	0f af 04 24          	imul   eax,DWORD PTR [esp]
1000423e:	99                   	cdq    
1000423f:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
10004243:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10004247:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
1000424b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
1000424f:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10004253:	c1 e0 04             	shl    eax,0x4
10004256:	0f af 04 24          	imul   eax,DWORD PTR [esp]
1000425a:	99                   	cdq    
1000425b:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
1000425f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10004263:	6a 00                	push   0x0
10004265:	53                   	push   ebx
10004266:	56                   	push   esi
10004267:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
1000426b:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
1000426f:	99                   	cdq    
10004270:	f7 f9                	idiv   ecx
10004272:	01 d8                	add    eax,ebx
10004274:	50                   	push   eax
10004275:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10004279:	2b 44 24 5c          	sub    eax,DWORD PTR [esp+0x5c]
1000427d:	99                   	cdq    
1000427e:	f7 f9                	idiv   ecx
10004280:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10004284:	50                   	push   eax
10004285:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004289:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
1000428d:	2b 85 a0 f5 00 00    	sub    eax,DWORD PTR [ebp+0xf5a0]
10004293:	99                   	cdq    
10004294:	f7 f9                	idiv   ecx
10004296:	03 85 a0 f5 00 00    	add    eax,DWORD PTR [ebp+0xf5a0]
1000429c:	50                   	push   eax
1000429d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100042a1:	2b 85 9c f5 00 00    	sub    eax,DWORD PTR [ebp+0xf59c]
100042a7:	99                   	cdq    
100042a8:	f7 f9                	idiv   ecx
100042aa:	03 85 9c f5 00 00    	add    eax,DWORD PTR [ebp+0xf59c]
100042b0:	50                   	push   eax
100042b1:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
100042b7:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
100042bd:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100042c1:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
100042c5:	55                   	push   ebp
100042c6:	e8 6d e8 ff ff       	call   10002b38 <_ssfn_b>
100042cb:	eb 79                	jmp    10004346 <ssfn_render+0x945>
100042cd:	6a 00                	push   0x0
100042cf:	83 c7 06             	add    edi,0x6
100042d2:	53                   	push   ebx
100042d3:	56                   	push   esi
100042d4:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
100042d8:	c1 e0 04             	shl    eax,0x4
100042db:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100042e0:	99                   	cdq    
100042e1:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
100042e5:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
100042e9:	50                   	push   eax
100042ea:	0f b6 47 fe          	movzx  eax,BYTE PTR [edi-0x2]
100042ee:	c1 e0 04             	shl    eax,0x4
100042f1:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
100042f6:	99                   	cdq    
100042f7:	f7 7c 24 24          	idiv   DWORD PTR [esp+0x24]
100042fb:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
100042ff:	50                   	push   eax
10004300:	0f b6 47 fd          	movzx  eax,BYTE PTR [edi-0x3]
10004304:	c1 e0 04             	shl    eax,0x4
10004307:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
1000430c:	99                   	cdq    
1000430d:	f7 7c 24 28          	idiv   DWORD PTR [esp+0x28]
10004311:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10004315:	50                   	push   eax
10004316:	0f b6 47 fc          	movzx  eax,BYTE PTR [edi-0x4]
1000431a:	c1 e0 04             	shl    eax,0x4
1000431d:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
10004322:	99                   	cdq    
10004323:	f7 7c 24 2c          	idiv   DWORD PTR [esp+0x2c]
10004327:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
1000432b:	50                   	push   eax
1000432c:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10004332:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10004338:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
1000433c:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
10004340:	55                   	push   ebp
10004341:	e8 f2 e7 ff ff       	call   10002b38 <_ssfn_b>
10004346:	83 c4 30             	add    esp,0x30
10004349:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
10004350:	e9 24 fe ff ff       	jmp    10004179 <ssfn_render+0x778>
10004355:	8b 85 94 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf594]
1000435b:	3b 85 9c f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf59c]
10004361:	75 0e                	jne    10004371 <ssfn_render+0x970>
10004363:	8b bd a0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5a0]
10004369:	39 bd 98 f5 00 00    	cmp    DWORD PTR [ebp+0xf598],edi
1000436f:	74 2e                	je     1000439f <ssfn_render+0x99e>
10004371:	8b 9d 80 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf580]
10004377:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
1000437d:	66 89 04 5a          	mov    WORD PTR [edx+ebx*2],ax
10004381:	8b 95 80 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf580]
10004387:	8b 85 6c f5 00 00    	mov    eax,DWORD PTR [ebp+0xf56c]
1000438d:	8b 9d 98 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf598]
10004393:	66 89 5c 50 02       	mov    WORD PTR [eax+edx*2+0x2],bx
10004398:	83 85 80 f5 00 00 02 	add    DWORD PTR [ebp+0xf580],0x2
1000439f:	b3 fe                	mov    bl,0xfe
100043a1:	83 bd 80 f5 00 00 04 	cmp    DWORD PTR [ebp+0xf580],0x4
100043a8:	0f 8e ee 06 00 00    	jle    10004a9c <ssfn_render+0x109b>
100043ae:	31 c0                	xor    eax,eax
100043b0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
100043b8:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
100043c0:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
100043c8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
100043d0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
100043d8:	8b 34 24             	mov    esi,DWORD PTR [esp]
100043db:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
100043df:	0f 8d aa 06 00 00    	jge    10004a8f <ssfn_render+0x108e>
100043e5:	8b 85 80 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf580]
100043eb:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
100043f3:	83 e8 03             	sub    eax,0x3
100043f6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
100043fa:	89 f0                	mov    eax,esi
100043fc:	31 f6                	xor    esi,esi
100043fe:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
10004402:	c1 f8 02             	sar    eax,0x2
10004405:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10004409:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
1000440d:	39 4c 24 4c          	cmp    DWORD PTR [esp+0x4c],ecx
10004411:	0f 8e 05 01 00 00    	jle    1000451c <ssfn_render+0xb1b>
10004417:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
1000441d:	89 c8                	mov    eax,ecx
1000441f:	40                   	inc    eax
10004420:	01 c0                	add    eax,eax
10004422:	0f b7 3c 02          	movzx  edi,WORD PTR [edx+eax*1]
10004426:	0f b7 5c 02 04       	movzx  ebx,WORD PTR [edx+eax*1+0x4]
1000442b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
1000442f:	7d 0c                	jge    1000443d <ssfn_render+0xa3c>
10004431:	39 5c 24 28          	cmp    DWORD PTR [esp+0x28],ebx
10004435:	0f 8f d7 00 00 00    	jg     10004512 <ssfn_render+0xb11>
1000443b:	eb 0a                	jmp    10004447 <ssfn_render+0xa46>
1000443d:	39 5c 24 28          	cmp    DWORD PTR [esp+0x28],ebx
10004441:	0f 8e cb 00 00 00    	jle    10004512 <ssfn_render+0xb11>
10004447:	0f b7 4c 02 fe       	movzx  ecx,WORD PTR [edx+eax*1-0x2]
1000444c:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
10004450:	0f b7 4c 02 02       	movzx  ecx,WORD PTR [edx+eax*1+0x2]
10004455:	89 fa                	mov    edx,edi
10004457:	89 d8                	mov    eax,ebx
10004459:	c1 fa 04             	sar    edx,0x4
1000445c:	c1 f8 04             	sar    eax,0x4
1000445f:	39 c2                	cmp    edx,eax
10004461:	75 0a                	jne    1000446d <ssfn_render+0xa6c>
10004463:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10004467:	01 cf                	add    edi,ecx
10004469:	d1 ff                	sar    edi,1
1000446b:	eb 18                	jmp    10004485 <ssfn_render+0xa84>
1000446d:	29 fb                	sub    ebx,edi
1000446f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004473:	2b 4c 24 44          	sub    ecx,DWORD PTR [esp+0x44]
10004477:	29 f8                	sub    eax,edi
10004479:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
1000447d:	0f af c1             	imul   eax,ecx
10004480:	99                   	cdq    
10004481:	f7 fb                	idiv   ebx
10004483:	01 c7                	add    edi,eax
10004485:	c1 ff 04             	sar    edi,0x4
10004488:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
1000448d:	74 04                	je     10004493 <ssfn_render+0xa92>
1000448f:	03 7c 24 50          	add    edi,DWORD PTR [esp+0x50]
10004493:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
10004498:	75 3f                	jne    100044d9 <ssfn_render+0xad8>
1000449a:	80 7c 24 40 00       	cmp    BYTE PTR [esp+0x40],0x0
1000449f:	74 38                	je     100044d9 <ssfn_render+0xad8>
100044a1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
100044a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100044a9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
100044ad:	f7 d8                	neg    eax
100044af:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
100044b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100044b7:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
100044bb:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100044c1:	01 f8                	add    eax,edi
100044c3:	38 5c 01 08          	cmp    BYTE PTR [ecx+eax*1+0x8],bl
100044c7:	74 10                	je     100044d9 <ssfn_render+0xad8>
100044c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100044cd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100044d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100044d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100044d9:	31 c0                	xor    eax,eax
100044db:	39 f0                	cmp    eax,esi
100044dd:	75 0b                	jne    100044ea <ssfn_render+0xae9>
100044df:	66 89 bc 44 e0 00 00 00 	mov    WORD PTR [esp+eax*2+0xe0],di
100044e7:	46                   	inc    esi
100044e8:	eb 28                	jmp    10004512 <ssfn_render+0xb11>
100044ea:	0f b7 94 44 e0 00 00 00 	movzx  edx,WORD PTR [esp+eax*2+0xe0]
100044f2:	39 fa                	cmp    edx,edi
100044f4:	7d 03                	jge    100044f9 <ssfn_render+0xaf8>
100044f6:	40                   	inc    eax
100044f7:	eb e2                	jmp    100044db <ssfn_render+0xada>
100044f9:	89 f2                	mov    edx,esi
100044fb:	4a                   	dec    edx
100044fc:	66 8b 8c 54 e0 00 00 00 	mov    cx,WORD PTR [esp+edx*2+0xe0]
10004504:	39 c2                	cmp    edx,eax
10004506:	66 89 8c 54 e2 00 00 00 	mov    WORD PTR [esp+edx*2+0xe2],cx
1000450e:	7f eb                	jg     100044fb <ssfn_render+0xafa>
10004510:	eb cd                	jmp    100044df <ssfn_render+0xade>
10004512:	83 44 24 30 02       	add    DWORD PTR [esp+0x30],0x2
10004517:	e9 ed fe ff ff       	jmp    10004409 <ssfn_render+0xa08>
1000451c:	83 fe 01             	cmp    esi,0x1
1000451f:	7e 1f                	jle    10004540 <ssfn_render+0xb3f>
10004521:	f7 c6 01 00 00 00    	test   esi,0x1
10004527:	74 24                	je     1000454d <ssfn_render+0xb4c>
10004529:	8d 46 ff             	lea    eax,[esi-0x1]
1000452c:	66 8b 94 44 e0 00 00 00 	mov    dx,WORD PTR [esp+eax*2+0xe0]
10004534:	66 89 94 74 dc 00 00 00 	mov    WORD PTR [esp+esi*2+0xdc],dx
1000453c:	89 c6                	mov    esi,eax
1000453e:	eb 0d                	jmp    1000454d <ssfn_render+0xb4c>
10004540:	85 f6                	test   esi,esi
10004542:	0f 84 ac 00 00 00    	je     100045f4 <ssfn_render+0xbf3>
10004548:	be 01 00 00 00       	mov    esi,0x1
1000454d:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004553:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10004557:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
1000455b:	03 54 24 24          	add    edx,DWORD PTR [esp+0x24]
1000455f:	39 d1                	cmp    ecx,edx
10004561:	7d 0b                	jge    1000456e <ssfn_render+0xb6d>
10004563:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
10004567:	03 54 24 24          	add    edx,DWORD PTR [esp+0x24]
1000456b:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
1000456e:	31 d2                	xor    edx,edx
10004570:	8d 46 ff             	lea    eax,[esi-0x1]
10004573:	39 d0                	cmp    eax,edx
10004575:	7e 78                	jle    100045ef <ssfn_render+0xbee>
10004577:	0f b7 84 54 e0 00 00 00 	movzx  eax,WORD PTR [esp+edx*2+0xe0]
1000457f:	0f b7 8c 54 e2 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xe2]
10004587:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
1000458b:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
1000458f:	79 02                	jns    10004593 <ssfn_render+0xb92>
10004591:	31 c0                	xor    eax,eax
10004593:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10004597:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
1000459b:	39 cf                	cmp    edi,ecx
1000459d:	7e 04                	jle    100045a3 <ssfn_render+0xba2>
1000459f:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
100045a3:	85 d2                	test   edx,edx
100045a5:	74 12                	je     100045b9 <ssfn_render+0xbb8>
100045a7:	0f b7 8c 54 de 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xde]
100045af:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
100045b3:	39 c8                	cmp    eax,ecx
100045b5:	7d 02                	jge    100045b9 <ssfn_render+0xbb8>
100045b7:	89 c8                	mov    eax,ecx
100045b9:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
100045bd:	7d 2b                	jge    100045ea <ssfn_render+0xbe9>
100045bf:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
100045c3:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
100045c9:	8d 3c 01             	lea    edi,[ecx+eax*1]
100045cc:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
100045d0:	88 4c 24 30          	mov    BYTE PTR [esp+0x30],cl
100045d4:	38 4c 3b 08          	cmp    BYTE PTR [ebx+edi*1+0x8],cl
100045d8:	75 05                	jne    100045df <ssfn_render+0xbde>
100045da:	c6 44 24 30 ff       	mov    BYTE PTR [esp+0x30],0xff
100045df:	8a 4c 24 30          	mov    cl,BYTE PTR [esp+0x30]
100045e3:	40                   	inc    eax
100045e4:	88 4c 3b 08          	mov    BYTE PTR [ebx+edi*1+0x8],cl
100045e8:	eb cf                	jmp    100045b9 <ssfn_render+0xbb8>
100045ea:	83 c2 02             	add    edx,0x2
100045ed:	eb 81                	jmp    10004570 <ssfn_render+0xb6f>
100045ef:	83 e6 fe             	and    esi,0xfffffffe
100045f2:	89 f1                	mov    ecx,esi
100045f4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
100045f8:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
100045fc:	01 7c 24 3c          	add    DWORD PTR [esp+0x3c],edi
10004600:	83 44 24 28 10       	add    DWORD PTR [esp+0x28],0x10
10004605:	b0 01                	mov    al,0x1
10004607:	e9 cc fd ff ff       	jmp    100043d8 <ssfn_render+0x9d7>
1000460c:	88 c2                	mov    dl,al
1000460e:	80 e2 60             	and    dl,0x60
10004611:	0f 85 a4 02 00 00    	jne    100048bb <ssfn_render+0xeba>
10004617:	83 e0 1f             	and    eax,0x1f
1000461a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000461e:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10004625:	c1 fb 04             	sar    ebx,0x4
10004628:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000462c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10004630:	40                   	inc    eax
10004631:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10004635:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004639:	c1 f8 04             	sar    eax,0x4
1000463c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10004640:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004643:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10004648:	99                   	cdq    
10004649:	f7 fe                	idiv   esi
1000464b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000464f:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004652:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10004657:	99                   	cdq    
10004658:	f7 fe                	idiv   esi
1000465a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000465e:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004664:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10004668:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
1000466c:	8d 14 3b             	lea    edx,[ebx+edi*1]
1000466f:	39 d6                	cmp    esi,edx
10004671:	7d 0a                	jge    1000467d <ssfn_render+0xc7c>
10004673:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10004677:	8d 14 3b             	lea    edx,[ebx+edi*1]
1000467a:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
1000467d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004681:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
10004689:	0f af c3             	imul   eax,ebx
1000468c:	31 f6                	xor    esi,esi
1000468e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10004692:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10004696:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
1000469a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
1000469e:	8b 04 24             	mov    eax,DWORD PTR [esp]
100046a1:	29 d8                	sub    eax,ebx
100046a3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
100046a7:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
100046ab:	0f 8d b1 00 00 00    	jge    10004762 <ssfn_render+0xd61>
100046b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100046b5:	99                   	cdq    
100046b6:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
100046ba:	89 c7                	mov    edi,eax
100046bc:	31 c0                	xor    eax,eax
100046be:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
100046c3:	74 0e                	je     100046d3 <ssfn_render+0xcd2>
100046c5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100046c9:	bb 04 00 00 00       	mov    ebx,0x4
100046ce:	29 f0                	sub    eax,esi
100046d0:	99                   	cdq    
100046d1:	f7 fb                	idiv   ebx
100046d3:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
100046d7:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
100046e2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100046e6:	0f af 7c 24 28       	imul   edi,DWORD PTR [esp+0x28]
100046eb:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
100046f2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
100046f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100046fa:	39 d8                	cmp    eax,ebx
100046fc:	7d 4e                	jge    1000474c <ssfn_render+0xd4b>
100046fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004702:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
10004707:	99                   	cdq    
10004708:	f7 fb                	idiv   ebx
1000470a:	8d 14 07             	lea    edx,[edi+eax*1]
1000470d:	83 e0 07             	and    eax,0x7
10004710:	c1 fa 03             	sar    edx,0x3
10004713:	0f b6 54 11 02       	movzx  edx,BYTE PTR [ecx+edx*1+0x2]
10004718:	0f a3 c2             	bt     edx,eax
1000471b:	72 0e                	jb     1000472b <ssfn_render+0xd2a>
1000471d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10004721:	43                   	inc    ebx
10004722:	89 9c 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],ebx
10004729:	eb c0                	jmp    100046eb <ssfn_render+0xcea>
1000472b:	31 c0                	xor    eax,eax
1000472d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10004731:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10004735:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
1000473b:	40                   	inc    eax
1000473c:	03 54 24 50          	add    edx,DWORD PTR [esp+0x50]
10004740:	88 5c 10 07          	mov    BYTE PTR [eax+edx*1+0x7],bl
10004744:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
10004748:	7d e3                	jge    1000472d <ssfn_render+0xd2c>
1000474a:	eb d1                	jmp    1000471d <ssfn_render+0xd1c>
1000474c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10004750:	46                   	inc    esi
10004751:	01 7c 24 4c          	add    DWORD PTR [esp+0x4c],edi
10004755:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10004759:	01 7c 24 3c          	add    DWORD PTR [esp+0x3c],edi
1000475d:	e9 45 ff ff ff       	jmp    100046a7 <ssfn_render+0xca6>
10004762:	b3 fe                	mov    bl,0xfe
10004764:	f7 85 bc f5 00 00 40 20 00 00 	test   DWORD PTR [ebp+0xf5bc],0x2040
1000476e:	0f 85 28 03 00 00    	jne    10004a9c <ssfn_render+0x109b>
10004774:	31 c0                	xor    eax,eax
10004776:	8b 34 24             	mov    esi,DWORD PTR [esp]
10004779:	80 7c 24 0c fd       	cmp    BYTE PTR [esp+0xc],0xfd
1000477e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
10004782:	0f 95 c0             	setne  al
10004785:	8b 94 24 dc 00 00 00 	mov    edx,DWORD PTR [esp+0xdc]
1000478c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004790:	4f                   	dec    edi
10004791:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10004795:	81 44 24 18 fc 00 00 00 	add    DWORD PTR [esp+0x18],0xfc
1000479d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
100047a1:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
100047a5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
100047a9:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
100047ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100047b1:	31 c0                	xor    eax,eax
100047b3:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
100047b6:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
100047ba:	83 c1 04             	add    ecx,0x4
100047bd:	3b 4c 24 28          	cmp    ecx,DWORD PTR [esp+0x28]
100047c1:	7d 19                	jge    100047dc <ssfn_render+0xddb>
100047c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
100047c7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
100047cb:	46                   	inc    esi
100047cc:	4f                   	dec    edi
100047cd:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
100047d1:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
100047d5:	be 01 00 00 00       	mov    esi,0x1
100047da:	eb 36                	jmp    10004812 <ssfn_render+0xe11>
100047dc:	84 c0                	test   al,al
100047de:	0f 84 b6 02 00 00    	je     10004a9a <ssfn_render+0x1099>
100047e4:	89 94 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],edx
100047eb:	e9 aa 02 00 00       	jmp    10004a9a <ssfn_render+0x1099>
100047f0:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100047f6:	80 7c 02 08 ff       	cmp    BYTE PTR [edx+eax*1+0x8],0xff
100047fb:	74 26                	je     10004823 <ssfn_render+0xe22>
100047fd:	41                   	inc    ecx
100047fe:	40                   	inc    eax
100047ff:	89 ca                	mov    edx,ecx
10004801:	3b 4c 24 3c          	cmp    ecx,DWORD PTR [esp+0x3c]
10004805:	7c e9                	jl     100047f0 <ssfn_render+0xdef>
10004807:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
1000480b:	46                   	inc    esi
1000480c:	01 7c 24 2c          	add    DWORD PTR [esp+0x2c],edi
10004810:	b0 01                	mov    al,0x1
10004812:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
10004816:	7e 41                	jle    10004859 <ssfn_render+0xe58>
10004818:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000481c:	b9 01 00 00 00       	mov    ecx,0x1
10004821:	eb dc                	jmp    100047ff <ssfn_render+0xdfe>
10004823:	89 c7                	mov    edi,eax
10004825:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10004829:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
1000482d:	38 5c 3a 08          	cmp    BYTE PTR [edx+edi*1+0x8],bl
10004831:	74 0c                	je     1000483f <ssfn_render+0xe3e>
10004833:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10004837:	01 d7                	add    edi,edx
10004839:	38 5c 38 08          	cmp    BYTE PTR [eax+edi*1+0x8],bl
1000483d:	75 be                	jne    100047fd <ssfn_render+0xdfc>
1000483f:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10004843:	38 5c 02 07          	cmp    BYTE PTR [edx+eax*1+0x7],bl
10004847:	74 06                	je     1000484f <ssfn_render+0xe4e>
10004849:	38 5c 02 09          	cmp    BYTE PTR [edx+eax*1+0x9],bl
1000484d:	75 ae                	jne    100047fd <ssfn_render+0xdfc>
1000484f:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
10004853:	88 5c 02 08          	mov    BYTE PTR [edx+eax*1+0x8],bl
10004857:	eb a4                	jmp    100047fd <ssfn_render+0xdfc>
10004859:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
1000485d:	bb 01 00 00 00       	mov    ebx,0x1
10004862:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10004866:	39 5c 24 24          	cmp    DWORD PTR [esp+0x24],ebx
1000486a:	7e 3d                	jle    100048a9 <ssfn_render+0xea8>
1000486c:	b8 01 00 00 00       	mov    eax,0x1
10004871:	89 c2                	mov    edx,eax
10004873:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
10004877:	7d 23                	jge    1000489c <ssfn_render+0xe9b>
10004879:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
1000487d:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
10004883:	8d 14 07             	lea    edx,[edi+eax*1]
10004886:	0f b6 7c 16 08       	movzx  edi,BYTE PTR [esi+edx*1+0x8]
1000488b:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
1000488f:	75 08                	jne    10004899 <ssfn_render+0xe98>
10004891:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
10004895:	88 4c 16 08          	mov    BYTE PTR [esi+edx*1+0x8],cl
10004899:	40                   	inc    eax
1000489a:	eb d5                	jmp    10004871 <ssfn_render+0xe70>
1000489c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
100048a0:	43                   	inc    ebx
100048a1:	01 7c 24 2c          	add    DWORD PTR [esp+0x2c],edi
100048a5:	b0 01                	mov    al,0x1
100048a7:	eb bd                	jmp    10004866 <ssfn_render+0xe65>
100048a9:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
100048ac:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
100048b0:	01 c9                	add    ecx,ecx
100048b2:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
100048b6:	e9 f8 fe ff ff       	jmp    100047b3 <ssfn_render+0xdb2>
100048bb:	b3 fe                	mov    bl,0xfe
100048bd:	80 fa 20             	cmp    dl,0x20
100048c0:	0f 85 d6 01 00 00    	jne    10004a9c <ssfn_render+0x109b>
100048c6:	89 c3                	mov    ebx,eax
100048c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
100048cc:	c1 e3 08             	shl    ebx,0x8
100048cf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
100048d3:	81 e3 00 1f 00 00    	and    ebx,0x1f00
100048d9:	c1 ff 04             	sar    edi,0x4
100048dc:	09 c3                	or     ebx,eax
100048de:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
100048e2:	43                   	inc    ebx
100048e3:	40                   	inc    eax
100048e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
100048e8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
100048ec:	40                   	inc    eax
100048ed:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100048f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100048f5:	c1 f8 04             	sar    eax,0x4
100048f8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
100048fc:	8b 04 24             	mov    eax,DWORD PTR [esp]
100048ff:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10004904:	99                   	cdq    
10004905:	f7 fe                	idiv   esi
10004907:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000490b:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000490e:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10004913:	99                   	cdq    
10004914:	f7 fe                	idiv   esi
10004916:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000491a:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004920:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10004924:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10004928:	01 fa                	add    edx,edi
1000492a:	39 d6                	cmp    esi,edx
1000492c:	7d 0a                	jge    10004938 <ssfn_render+0xf37>
1000492e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10004932:	8d 14 37             	lea    edx,[edi+esi*1]
10004935:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10004938:	83 c1 04             	add    ecx,0x4
1000493b:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10004946:	8d 04 19             	lea    eax,[ecx+ebx*1]
10004949:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
1000494d:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10004951:	72 30                	jb     10004983 <ssfn_render+0xf82>
10004953:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10004957:	8b 34 24             	mov    esi,DWORD PTR [esp]
1000495a:	0f af d7             	imul   edx,edi
1000495d:	29 fe                	sub    esi,edi
1000495f:	03 54 24 24          	add    edx,DWORD PTR [esp+0x24]
10004963:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
1000496a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
1000496e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
10004976:	31 d2                	xor    edx,edx
10004978:	31 db                	xor    ebx,ebx
1000497a:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
1000497e:	e9 d2 00 00 00       	jmp    10004a55 <ssfn_render+0x1054>
10004983:	8a 11                	mov    dl,BYTE PTR [ecx]
10004985:	89 d0                	mov    eax,edx
10004987:	83 e0 7f             	and    eax,0x7f
1000498a:	84 d2                	test   dl,dl
1000498c:	8d 70 01             	lea    esi,[eax+0x1]
1000498f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
10004993:	78 09                	js     1000499e <ssfn_render+0xf9d>
10004995:	41                   	inc    ecx
10004996:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000499a:	89 ca                	mov    edx,ecx
1000499c:	eb 3d                	jmp    100049db <ssfn_render+0xfda>
1000499e:	48                   	dec    eax
1000499f:	8b 94 24 dc 00 00 00 	mov    edx,DWORD PTR [esp+0xdc]
100049a6:	83 f8 fe             	cmp    eax,0xfffffffe
100049a9:	74 16                	je     100049c1 <ssfn_render+0xfc0>
100049ab:	8d 5a 01             	lea    ebx,[edx+0x1]
100049ae:	89 9c 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],ebx
100049b5:	8a 59 01             	mov    bl,BYTE PTR [ecx+0x1]
100049b8:	88 9c 14 e0 05 00 00 	mov    BYTE PTR [esp+edx*1+0x5e0],bl
100049bf:	eb dd                	jmp    1000499e <ssfn_render+0xf9d>
100049c1:	83 c1 02             	add    ecx,0x2
100049c4:	eb 87                	jmp    1000494d <ssfn_render+0xf4c>
100049c6:	42                   	inc    edx
100049c7:	8d 73 01             	lea    esi,[ebx+0x1]
100049ca:	89 b4 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],esi
100049d1:	8a 42 ff             	mov    al,BYTE PTR [edx-0x1]
100049d4:	88 84 1c e0 05 00 00 	mov    BYTE PTR [esp+ebx*1+0x5e0],al
100049db:	ff 4c 24 18          	dec    DWORD PTR [esp+0x18]
100049df:	8b 9c 24 dc 00 00 00 	mov    ebx,DWORD PTR [esp+0xdc]
100049e6:	83 7c 24 18 fe       	cmp    DWORD PTR [esp+0x18],0xfffffffe
100049eb:	75 d9                	jne    100049c6 <ssfn_render+0xfc5>
100049ed:	03 4c 24 3c          	add    ecx,DWORD PTR [esp+0x3c]
100049f1:	e9 57 ff ff ff       	jmp    1000494d <ssfn_render+0xf4c>
100049f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100049fa:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
100049fe:	99                   	cdq    
100049ff:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
10004a03:	0f af c8             	imul   ecx,eax
10004a06:	31 c0                	xor    eax,eax
10004a08:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
10004a0d:	74 0e                	je     10004a1d <ssfn_render+0x101c>
10004a0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10004a13:	be 04 00 00 00       	mov    esi,0x4
10004a18:	29 d8                	sub    eax,ebx
10004a1a:	99                   	cdq    
10004a1b:	f7 fe                	idiv   esi
10004a1d:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10004a21:	31 f6                	xor    esi,esi
10004a23:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10004a27:	31 ff                	xor    edi,edi
10004a29:	8d 84 24 e0 05 01 00 	lea    eax,[esp+0x105e0]
10004a30:	01 c1                	add    ecx,eax
10004a32:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
10004a36:	7f 30                	jg     10004a68 <ssfn_render+0x1067>
10004a38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004a3c:	85 c0                	test   eax,eax
10004a3e:	79 02                	jns    10004a42 <ssfn_render+0x1041>
10004a40:	31 c0                	xor    eax,eax
10004a42:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10004a46:	43                   	inc    ebx
10004a47:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
10004a4b:	b2 01                	mov    dl,0x1
10004a4d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
10004a51:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
10004a55:	3b 5c 24 14          	cmp    ebx,DWORD PTR [esp+0x14]
10004a59:	7c 9b                	jl     100049f6 <ssfn_render+0xff5>
10004a5b:	84 d2                	test   dl,dl
10004a5d:	74 3b                	je     10004a9a <ssfn_render+0x1099>
10004a5f:	89 84 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],eax
10004a66:	eb 32                	jmp    10004a9a <ssfn_render+0x1099>
10004a68:	89 f0                	mov    eax,esi
10004a6a:	99                   	cdq    
10004a6b:	f7 7c 24 0c          	idiv   DWORD PTR [esp+0xc]
10004a6f:	8a 84 08 00 00 ff ff 	mov    al,BYTE PTR [eax+ecx*1-0x10000]
10004a76:	3c ff                	cmp    al,0xff
10004a78:	74 0e                	je     10004a88 <ssfn_render+0x1087>
10004a7a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
10004a7e:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
10004a84:	88 44 17 08          	mov    BYTE PTR [edi+edx*1+0x8],al
10004a88:	47                   	inc    edi
10004a89:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
10004a8d:	eb a3                	jmp    10004a32 <ssfn_render+0x1031>
10004a8f:	84 c0                	test   al,al
10004a91:	74 07                	je     10004a9a <ssfn_render+0x1099>
10004a93:	89 8c 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],ecx
10004a9a:	b3 fe                	mov    bl,0xfe
10004a9c:	ff 44 24 48          	inc    DWORD PTR [esp+0x48]
10004aa0:	88 5c 24 0c          	mov    BYTE PTR [esp+0xc],bl
10004aa4:	e9 d5 f5 ff ff       	jmp    1000407e <ssfn_render+0x67d>
10004aa9:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004aaf:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10004ab2:	8a 52 0c             	mov    dl,BYTE PTR [edx+0xc]
10004ab5:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
10004ab8:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10004abe:	0f b6 72 07          	movzx  esi,BYTE PTR [edx+0x7]
10004ac2:	0f b6 5a 06          	movzx  ebx,BYTE PTR [edx+0x6]
10004ac6:	89 f0                	mov    eax,esi
10004ac8:	89 d9                	mov    ecx,ebx
10004aca:	43                   	inc    ebx
10004acb:	39 de                	cmp    esi,ebx
10004acd:	7e 08                	jle    10004ad7 <ssfn_render+0x10d6>
10004acf:	48                   	dec    eax
10004ad0:	29 c8                	sub    eax,ecx
10004ad2:	88 42 07             	mov    BYTE PTR [edx+0x7],al
10004ad5:	eb 04                	jmp    10004adb <ssfn_render+0x10da>
10004ad7:	c6 42 07 00          	mov    BYTE PTR [edx+0x7],0x0
10004adb:	83 bc 24 04 06 01 00 00 	cmp    DWORD PTR [esp+0x10604],0x0
10004ae3:	0f 84 92 0c 00 00    	je     1000577b <ssfn_render+0x1d7a>
10004ae9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004aed:	39 85 c4 f5 00 00    	cmp    DWORD PTR [ebp+0xf5c4],eax
10004af3:	7d 06                	jge    10004afb <ssfn_render+0x10fa>
10004af5:	89 85 c4 f5 00 00    	mov    DWORD PTR [ebp+0xf5c4],eax
10004afb:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
10004b01:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
10004b04:	0f b6 4e 02          	movzx  ecx,BYTE PTR [esi+0x2]
10004b08:	0f b7 16             	movzx  edx,WORD PTR [esi]
10004b0b:	0f b6 7e 03          	movzx  edi,BYTE PTR [esi+0x3]
10004b0f:	0f af 54 24 04       	imul   edx,DWORD PTR [esp+0x4]
10004b14:	89 d0                	mov    eax,edx
10004b16:	99                   	cdq    
10004b17:	f7 f9                	idiv   ecx
10004b19:	0f b6 4b 0b          	movzx  ecx,BYTE PTR [ebx+0xb]
10004b1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004b21:	0f b6 46 04          	movzx  eax,BYTE PTR [esi+0x4]
10004b25:	88 04 24             	mov    BYTE PTR [esp],al
10004b28:	29 f8                	sub    eax,edi
10004b2a:	0f af 44 24 04       	imul   eax,DWORD PTR [esp+0x4]
10004b2f:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10004b33:	99                   	cdq    
10004b34:	f7 f9                	idiv   ecx
10004b36:	31 d2                	xor    edx,edx
10004b38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10004b3c:	83 bd c0 f5 00 00 10 	cmp    DWORD PTR [ebp+0xf5c0],0x10
10004b43:	0f 9f c2             	setg   dl
10004b46:	42                   	inc    edx
10004b47:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
10004b4b:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
10004b4f:	7d 08                	jge    10004b59 <ssfn_render+0x1158>
10004b51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004b55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004b59:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10004b5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10004b61:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
10004b65:	7d 04                	jge    10004b6b <ssfn_render+0x116a>
10004b67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10004b6b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
10004b6f:	74 46                	je     10004bb7 <ssfn_render+0x11b6>
10004b71:	0f af 7c 24 04       	imul   edi,DWORD PTR [esp+0x4]
10004b76:	8d 44 39 ff          	lea    eax,[ecx+edi*1-0x1]
10004b7a:	99                   	cdq    
10004b7b:	f7 f9                	idiv   ecx
10004b7d:	8b 8d bc f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf5bc]
10004b83:	81 e1 00 08 00 00    	and    ecx,0x800
10004b89:	74 04                	je     10004b8f <ssfn_render+0x118e>
10004b8b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10004b8f:	01 c1                	add    ecx,eax
10004b91:	89 8d 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],ecx
10004b97:	0f b6 5b 0b          	movzx  ebx,BYTE PTR [ebx+0xb]
10004b9b:	0f b6 46 06          	movzx  eax,BYTE PTR [esi+0x6]
10004b9f:	0f af 44 24 04       	imul   eax,DWORD PTR [esp+0x4]
10004ba4:	8d 44 03 ff          	lea    eax,[ebx+eax*1-0x1]
10004ba8:	99                   	cdq    
10004ba9:	f7 fb                	idiv   ebx
10004bab:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10004baf:	89 85 8c f5 00 00    	mov    DWORD PTR [ebp+0xf58c],eax
10004bb5:	eb 1e                	jmp    10004bd5 <ssfn_render+0x11d4>
10004bb7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10004bbb:	c7 85 8c f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf58c],0x0
10004bc5:	d1 f9                	sar    ecx,1
10004bc7:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
10004bcf:	89 8d 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],ecx
10004bd5:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004bdc:	8b 00                	mov    eax,DWORD PTR [eax]
10004bde:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10004be2:	85 c0                	test   eax,eax
10004be4:	0f 84 42 09 00 00    	je     1000552c <ssfn_render+0x1b2b>
10004bea:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004bf1:	0f bf 50 04          	movsx  edx,WORD PTR [eax+0x4]
10004bf5:	89 d3                	mov    ebx,edx
10004bf7:	89 d0                	mov    eax,edx
10004bf9:	66 c1 fb 0b          	sar    bx,0xb
10004bfd:	c1 f8 1f             	sar    eax,0x1f
10004c00:	31 c2                	xor    edx,eax
10004c02:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
10004c06:	29 44 24 54          	sub    DWORD PTR [esp+0x54],eax
10004c0a:	88 d8                	mov    al,bl
10004c0c:	83 e0 10             	and    eax,0x10
10004c0f:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
10004c13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004c17:	83 c0 40             	add    eax,0x40
10004c1a:	c1 f8 06             	sar    eax,0x6
10004c1d:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
10004c24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004c28:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10004c2c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
10004c30:	7d 08                	jge    10004c3a <ssfn_render+0x1239>
10004c32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004c36:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10004c3a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10004c3d:	0f b6 58 0b          	movzx  ebx,BYTE PTR [eax+0xb]
10004c41:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
10004c45:	0f af 44 24 04       	imul   eax,DWORD PTR [esp+0x4]
10004c4a:	8d 44 03 ff          	lea    eax,[ebx+eax*1-0x1]
10004c4e:	99                   	cdq    
10004c4f:	f7 fb                	idiv   ebx
10004c51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10004c55:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004c5c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10004c5f:	0f b6 fc             	movzx  edi,ah
10004c62:	89 c2                	mov    edx,eax
10004c64:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
10004c68:	c1 ea 10             	shr    edx,0x10
10004c6b:	0f b6 f2             	movzx  esi,dl
10004c6e:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
10004c72:	0f b6 f0             	movzx  esi,al
10004c75:	c1 e8 18             	shr    eax,0x18
10004c78:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
10004c7c:	89 04 24             	mov    DWORD PTR [esp],eax
10004c7f:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004c86:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10004c89:	89 c2                	mov    edx,eax
10004c8b:	0f b6 f4             	movzx  esi,ah
10004c8e:	c1 ea 10             	shr    edx,0x10
10004c91:	0f b6 c0             	movzx  eax,al
10004c94:	0f b6 fa             	movzx  edi,dl
10004c97:	89 84 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],eax
10004c9e:	89 bc 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],edi
10004ca5:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004cac:	89 b4 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],esi
10004cb3:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10004cb7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10004cbb:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004cc2:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10004cc6:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
10004cca:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
10004cce:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10004cd2:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004cd9:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10004cdd:	29 c8                	sub    eax,ecx
10004cdf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10004ce3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10004ce7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10004ceb:	0f af 44 24 4c       	imul   eax,DWORD PTR [esp+0x4c]
10004cf0:	8d 04 b8             	lea    eax,[eax+edi*4]
10004cf3:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
10004cf7:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
10004cfe:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10004d02:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
10004d0a:	25 fc ff 00 00       	and    eax,0xfffc
10004d0f:	c7 84 24 84 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x84],0x0
10004d1a:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
10004d21:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10004d25:	89 84 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],eax
10004d2c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10004d30:	89 84 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],eax
10004d37:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
10004d3c:	89 84 24 b4 00 00 00 	mov    DWORD PTR [esp+0xb4],eax
10004d43:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
10004d47:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10004d4b:	0f 8e ef 04 00 00    	jle    10005240 <ssfn_render+0x183f>
10004d51:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004d58:	0f bf 40 06          	movsx  eax,WORD PTR [eax+0x6]
10004d5c:	3b 84 24 9c 00 00 00 	cmp    eax,DWORD PTR [esp+0x9c]
10004d63:	0f 8e d7 04 00 00    	jle    10005240 <ssfn_render+0x183f>
10004d69:	83 bc 24 9c 00 00 00 00 	cmp    DWORD PTR [esp+0x9c],0x0
10004d71:	0f 88 ab 04 00 00    	js     10005222 <ssfn_render+0x1821>
10004d77:	89 f9                	mov    ecx,edi
10004d79:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004d7f:	c1 e1 08             	shl    ecx,0x8
10004d82:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
10004d86:	31 ff                	xor    edi,edi
10004d88:	89 c8                	mov    eax,ecx
10004d8a:	0f af c3             	imul   eax,ebx
10004d8d:	99                   	cdq    
10004d8e:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
10004d92:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
10004d99:	c1 f8 08             	sar    eax,0x8
10004d9c:	89 84 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],eax
10004da3:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10004da9:	0f af c3             	imul   eax,ebx
10004dac:	99                   	cdq    
10004dad:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
10004db1:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
10004db5:	c1 f8 08             	sar    eax,0x8
10004db8:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
10004dbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10004dc3:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
10004dca:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10004dce:	2b 84 24 a4 00 00 00 	sub    eax,DWORD PTR [esp+0xa4]
10004dd5:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
10004ddc:	8b b4 24 a0 00 00 00 	mov    esi,DWORD PTR [esp+0xa0]
10004de3:	39 74 24 54          	cmp    DWORD PTR [esp+0x54],esi
10004de7:	0f 8e 35 04 00 00    	jle    10005222 <ssfn_render+0x1821>
10004ded:	85 f6                	test   esi,esi
10004def:	0f 88 1b 04 00 00    	js     10005210 <ssfn_render+0x180f>
10004df5:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004dfc:	83 78 14 00          	cmp    DWORD PTR [eax+0x14],0x0
10004e00:	75 3e                	jne    10004e40 <ssfn_render+0x143f>
10004e02:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
10004e09:	b9 10 00 00 00       	mov    ecx,0x10
10004e0e:	8b 04 b8             	mov    eax,DWORD PTR [eax+edi*4]
10004e11:	2b 8c 24 b4 00 00 00 	sub    ecx,DWORD PTR [esp+0xb4]
10004e18:	89 c2                	mov    edx,eax
10004e1a:	d3 ea                	shr    edx,cl
10004e1c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
10004e20:	0f b6 f2             	movzx  esi,dl
10004e23:	89 b4 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],esi
10004e2a:	0f b6 f4             	movzx  esi,ah
10004e2d:	d3 e8                	shr    eax,cl
10004e2f:	89 b4 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],esi
10004e36:	0f b6 c0             	movzx  eax,al
10004e39:	89 84 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],eax
10004e40:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004e46:	89 f9                	mov    ecx,edi
10004e48:	0f b7 18             	movzx  ebx,WORD PTR [eax]
10004e4b:	c1 e1 08             	shl    ecx,0x8
10004e4e:	89 44 24 78          	mov    DWORD PTR [esp+0x78],eax
10004e52:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
10004e5a:	89 c8                	mov    eax,ecx
10004e5c:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10004e64:	0f af c3             	imul   eax,ebx
10004e67:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10004e6f:	99                   	cdq    
10004e70:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
10004e78:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
10004e7c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
10004e84:	89 84 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],eax
10004e8b:	c1 f8 08             	sar    eax,0x8
10004e8e:	89 84 24 c0 00 00 00 	mov    DWORD PTR [esp+0xc0],eax
10004e95:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10004e9b:	0f af c3             	imul   eax,ebx
10004e9e:	99                   	cdq    
10004e9f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
10004ea3:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10004ea7:	c1 f8 08             	sar    eax,0x8
10004eaa:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
10004eb1:	8b 84 24 a4 00 00 00 	mov    eax,DWORD PTR [esp+0xa4]
10004eb8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10004ebc:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
10004ec0:	39 74 24 3c          	cmp    DWORD PTR [esp+0x3c],esi
10004ec4:	0f 8d 46 02 00 00    	jge    10005110 <ssfn_render+0x170f>
10004eca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10004ece:	c1 fa 08             	sar    edx,0x8
10004ed1:	3b 94 24 b8 00 00 00 	cmp    edx,DWORD PTR [esp+0xb8]
10004ed8:	75 25                	jne    10004eff <ssfn_render+0x14fe>
10004eda:	0f b6 4c 24 3c       	movzx  ecx,BYTE PTR [esp+0x3c]
10004edf:	8b b4 24 b0 00 00 00 	mov    esi,DWORD PTR [esp+0xb0]
10004ee6:	b8 00 01 00 00       	mov    eax,0x100
10004eeb:	81 64 24 3c 00 ff ff ff 	and    DWORD PTR [esp+0x3c],0xffffff00
10004ef3:	29 c8                	sub    eax,ecx
10004ef5:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10004ef9:	39 c6                	cmp    esi,eax
10004efb:	7e 1c                	jle    10004f19 <ssfn_render+0x1518>
10004efd:	eb 16                	jmp    10004f15 <ssfn_render+0x1514>
10004eff:	c7 44 24 18 00 01 00 00 	mov    DWORD PTR [esp+0x18],0x100
10004f07:	3b 94 24 bc 00 00 00 	cmp    edx,DWORD PTR [esp+0xbc]
10004f0e:	75 09                	jne    10004f19 <ssfn_render+0x1518>
10004f10:	0f b6 44 24 68       	movzx  eax,BYTE PTR [esp+0x68]
10004f15:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004f19:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10004f1d:	0f b7 00             	movzx  eax,WORD PTR [eax]
10004f20:	0f af c2             	imul   eax,edx
10004f23:	89 84 24 c8 00 00 00 	mov    DWORD PTR [esp+0xc8],eax
10004f2a:	0f b6 44 24 6c       	movzx  eax,BYTE PTR [esp+0x6c]
10004f2f:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
10004f34:	c1 f8 08             	sar    eax,0x8
10004f37:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10004f3e:	8b 84 24 a8 00 00 00 	mov    eax,DWORD PTR [esp+0xa8]
10004f45:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10004f49:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
10004f4d:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
10004f51:	0f 8d ac 01 00 00    	jge    10005103 <ssfn_render+0x1702>
10004f57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10004f5b:	c1 f8 08             	sar    eax,0x8
10004f5e:	3b 84 24 c0 00 00 00 	cmp    eax,DWORD PTR [esp+0xc0]
10004f65:	75 39                	jne    10004fa0 <ssfn_render+0x159f>
10004f67:	0f b6 4c 24 38       	movzx  ecx,BYTE PTR [esp+0x38]
10004f6c:	ba 00 01 00 00       	mov    edx,0x100
10004f71:	81 64 24 38 00 ff ff ff 	and    DWORD PTR [esp+0x38],0xffffff00
10004f79:	29 ca                	sub    edx,ecx
10004f7b:	89 f1                	mov    ecx,esi
10004f7d:	2b 8c 24 a8 00 00 00 	sub    ecx,DWORD PTR [esp+0xa8]
10004f84:	39 d1                	cmp    ecx,edx
10004f86:	7c 0e                	jl     10004f96 <ssfn_render+0x1595>
10004f88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004f8c:	81 fa 00 01 00 00    	cmp    edx,0x100
10004f92:	74 20                	je     10004fb4 <ssfn_render+0x15b3>
10004f94:	89 d1                	mov    ecx,edx
10004f96:	0f af 4c 24 18       	imul   ecx,DWORD PTR [esp+0x18]
10004f9b:	c1 f9 08             	sar    ecx,0x8
10004f9e:	eb 14                	jmp    10004fb4 <ssfn_render+0x15b3>
10004fa0:	8b 8c 24 cc 00 00 00 	mov    ecx,DWORD PTR [esp+0xcc]
10004fa7:	3b 84 24 c4 00 00 00 	cmp    eax,DWORD PTR [esp+0xc4]
10004fae:	74 04                	je     10004fb4 <ssfn_render+0x15b3>
10004fb0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004fb4:	03 44 24 78          	add    eax,DWORD PTR [esp+0x78]
10004fb8:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
10004fbc:	8b b4 24 c8 00 00 00 	mov    esi,DWORD PTR [esp+0xc8]
10004fc3:	0f b6 54 06 08       	movzx  edx,BYTE PTR [esi+eax*1+0x8]
10004fc8:	81 fa ff 00 00 00    	cmp    edx,0xff
10004fce:	75 35                	jne    10005005 <ssfn_render+0x1604>
10004fd0:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
10004fd7:	81 44 24 30 ff 00 00 00 	add    DWORD PTR [esp+0x30],0xff
10004fdf:	0f af c1             	imul   eax,ecx
10004fe2:	01 44 24 2c          	add    DWORD PTR [esp+0x2c],eax
10004fe6:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
10004fed:	0f af c1             	imul   eax,ecx
10004ff0:	0f af 8c 24 98 00 00 00 	imul   ecx,DWORD PTR [esp+0x98]
10004ff8:	01 44 24 28          	add    DWORD PTR [esp+0x28],eax
10004ffc:	01 4c 24 24          	add    DWORD PTR [esp+0x24],ecx
10005000:	e9 f1 00 00 00       	jmp    100050f6 <ssfn_render+0x16f5>
10005005:	81 fa fe 00 00 00    	cmp    edx,0xfe
1000500b:	74 31                	je     1000503e <ssfn_render+0x163d>
1000500d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10005010:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
10005013:	85 db                	test   ebx,ebx
10005015:	74 27                	je     1000503e <ssfn_render+0x163d>
10005017:	01 d8                	add    eax,ebx
10005019:	8b 14 90             	mov    edx,DWORD PTR [eax+edx*4]
1000501c:	89 d3                	mov    ebx,edx
1000501e:	89 94 24 d4 00 00 00 	mov    DWORD PTR [esp+0xd4],edx
10005025:	c1 eb 10             	shr    ebx,0x10
10005028:	0f b6 f6             	movzx  esi,dh
1000502b:	0f b6 c3             	movzx  eax,bl
1000502e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10005032:	0f b6 c2             	movzx  eax,dl
10005035:	c1 ea 18             	shr    edx,0x18
10005038:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
1000503c:	eb 17                	jmp    10005055 <ssfn_render+0x1654>
1000503e:	8b 04 24             	mov    eax,DWORD PTR [esp]
10005041:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
10005045:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10005049:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
1000504d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10005051:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10005055:	81 7c 24 14 ff 00 00 00 	cmp    DWORD PTR [esp+0x14],0xff
1000505d:	75 21                	jne    10005080 <ssfn_render+0x167f>
1000505f:	0f af c1             	imul   eax,ecx
10005062:	0f af f1             	imul   esi,ecx
10005065:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
10005069:	01 44 24 2c          	add    DWORD PTR [esp+0x2c],eax
1000506d:	0f af d9             	imul   ebx,ecx
10005070:	01 74 24 28          	add    DWORD PTR [esp+0x28],esi
10005074:	01 5c 24 24          	add    DWORD PTR [esp+0x24],ebx
10005078:	69 c9 ff 00 00 00    	imul   ecx,ecx,0xff
1000507e:	eb 72                	jmp    100050f2 <ssfn_render+0x16f1>
10005080:	0f af 74 24 14       	imul   esi,DWORD PTR [esp+0x14]
10005085:	bb ff 00 00 00       	mov    ebx,0xff
1000508a:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
1000508f:	2b 5c 24 14          	sub    ebx,DWORD PTR [esp+0x14]
10005093:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
1000509a:	89 5c 24 7c          	mov    DWORD PTR [esp+0x7c],ebx
1000509e:	0f af d3             	imul   edx,ebx
100050a1:	bb ff 00 00 00       	mov    ebx,0xff
100050a6:	01 d0                	add    eax,edx
100050a8:	0f af c1             	imul   eax,ecx
100050ab:	99                   	cdq    
100050ac:	f7 fb                	idiv   ebx
100050ae:	01 44 24 2c          	add    DWORD PTR [esp+0x2c],eax
100050b2:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100050b6:	0f af 84 24 94 00 00 00 	imul   eax,DWORD PTR [esp+0x94]
100050be:	01 f0                	add    eax,esi
100050c0:	89 de                	mov    esi,ebx
100050c2:	0f af c1             	imul   eax,ecx
100050c5:	99                   	cdq    
100050c6:	f7 fb                	idiv   ebx
100050c8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
100050cc:	01 44 24 28          	add    DWORD PTR [esp+0x28],eax
100050d0:	0f af 5c 24 14       	imul   ebx,DWORD PTR [esp+0x14]
100050d5:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100050d9:	0f af 84 24 98 00 00 00 	imul   eax,DWORD PTR [esp+0x98]
100050e1:	01 d8                	add    eax,ebx
100050e3:	0f af c1             	imul   eax,ecx
100050e6:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
100050eb:	99                   	cdq    
100050ec:	f7 fe                	idiv   esi
100050ee:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
100050f2:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
100050f6:	81 44 24 38 00 01 00 00 	add    DWORD PTR [esp+0x38],0x100
100050fe:	e9 46 fe ff ff       	jmp    10004f49 <ssfn_render+0x1548>
10005103:	81 44 24 3c 00 01 00 00 	add    DWORD PTR [esp+0x3c],0x100
1000510b:	e9 ac fd ff ff       	jmp    10004ebc <ssfn_render+0x14bb>
10005110:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
10005115:	74 30                	je     10005147 <ssfn_render+0x1746>
10005117:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
1000511b:	31 d2                	xor    edx,edx
1000511d:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
10005121:	31 d2                	xor    edx,edx
10005123:	89 c1                	mov    ecx,eax
10005125:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10005129:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
1000512d:	31 d2                	xor    edx,edx
1000512f:	89 c6                	mov    esi,eax
10005131:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10005135:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
10005139:	31 d2                	xor    edx,edx
1000513b:	89 c3                	mov    ebx,eax
1000513d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10005141:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
10005145:	eb 1c                	jmp    10005163 <ssfn_render+0x1762>
10005147:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
1000514b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
1000514f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10005153:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10005157:	c1 e9 08             	shr    ecx,0x8
1000515a:	c1 ee 08             	shr    esi,0x8
1000515d:	c1 eb 08             	shr    ebx,0x8
10005160:	c1 e8 08             	shr    eax,0x8
10005163:	f6 85 bc f5 00 00 40 	test   BYTE PTR [ebp+0xf5bc],0x40
1000516a:	74 10                	je     1000517c <ssfn_render+0x177b>
1000516c:	83 f8 7f             	cmp    eax,0x7f
1000516f:	0f 86 9b 00 00 00    	jbe    10005210 <ssfn_render+0x180f>
10005175:	b8 ff 00 00 00       	mov    eax,0xff
1000517a:	eb 09                	jmp    10005185 <ssfn_render+0x1784>
1000517c:	83 f8 0f             	cmp    eax,0xf
1000517f:	0f 86 8b 00 00 00    	jbe    10005210 <ssfn_render+0x180f>
10005185:	89 ca                	mov    edx,ecx
10005187:	81 f9 ff 00 00 00    	cmp    ecx,0xff
1000518d:	76 05                	jbe    10005194 <ssfn_render+0x1793>
1000518f:	ba ff 00 00 00       	mov    edx,0xff
10005194:	b9 10 00 00 00       	mov    ecx,0x10
10005199:	2b 8c 24 b4 00 00 00 	sub    ecx,DWORD PTR [esp+0xb4]
100051a0:	d3 e2                	shl    edx,cl
100051a2:	81 fe ff 00 00 00    	cmp    esi,0xff
100051a8:	89 d1                	mov    ecx,edx
100051aa:	76 05                	jbe    100051b1 <ssfn_render+0x17b0>
100051ac:	be ff 00 00 00       	mov    esi,0xff
100051b1:	c1 e6 08             	shl    esi,0x8
100051b4:	09 ce                	or     esi,ecx
100051b6:	81 fb ff 00 00 00    	cmp    ebx,0xff
100051bc:	76 05                	jbe    100051c3 <ssfn_render+0x17c2>
100051be:	bb ff 00 00 00       	mov    ebx,0xff
100051c3:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
100051c7:	d3 e3                	shl    ebx,cl
100051c9:	09 de                	or     esi,ebx
100051cb:	3d ff 00 00 00       	cmp    eax,0xff
100051d0:	76 05                	jbe    100051d7 <ssfn_render+0x17d6>
100051d2:	b8 ff 00 00 00       	mov    eax,0xff
100051d7:	c1 e0 18             	shl    eax,0x18
100051da:	09 f0                	or     eax,esi
100051dc:	8b b4 24 88 00 00 00 	mov    esi,DWORD PTR [esp+0x88]
100051e3:	89 04 be             	mov    DWORD PTR [esi+edi*4],eax
100051e6:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
100051ea:	39 74 24 40          	cmp    DWORD PTR [esp+0x40],esi
100051ee:	75 20                	jne    10005210 <ssfn_render+0x180f>
100051f0:	39 bc 24 8c 00 00 00 	cmp    DWORD PTR [esp+0x8c],edi
100051f7:	7e 07                	jle    10005200 <ssfn_render+0x17ff>
100051f9:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
10005200:	39 bc 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],edi
10005207:	7d 07                	jge    10005210 <ssfn_render+0x180f>
10005209:	89 bc 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edi
10005210:	47                   	inc    edi
10005211:	ff 84 24 a0 00 00 00 	inc    DWORD PTR [esp+0xa0]
10005218:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
1000521c:	0f 85 ba fb ff ff    	jne    10004ddc <ssfn_render+0x13db>
10005222:	8b bc 24 80 00 00 00 	mov    edi,DWORD PTR [esp+0x80]
10005229:	ff 44 24 64          	inc    DWORD PTR [esp+0x64]
1000522d:	01 bc 24 88 00 00 00 	add    DWORD PTR [esp+0x88],edi
10005234:	ff 84 24 9c 00 00 00 	inc    DWORD PTR [esp+0x9c]
1000523b:	e9 03 fb ff ff       	jmp    10004d43 <ssfn_render+0x1342>
10005240:	f6 85 bc f5 00 00 10 	test   BYTE PTR [ebp+0xf5bc],0x10
10005247:	0f 84 7c 01 00 00    	je     100053c9 <ssfn_render+0x19c8>
1000524d:	0f b6 84 24 ac 00 00 00 	movzx  eax,BYTE PTR [esp+0xac]
10005255:	8b bc 24 8c 00 00 00 	mov    edi,DWORD PTR [esp+0x8c]
1000525c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10005260:	40                   	inc    eax
10005261:	29 c7                	sub    edi,eax
10005263:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
1000526a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
1000526e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10005272:	8d 44 38 02          	lea    eax,[eax+edi*1+0x2]
10005276:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000527a:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
1000527e:	7e 09                	jle    10005289 <ssfn_render+0x1888>
10005280:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10005284:	40                   	inc    eax
10005285:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10005289:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
1000528d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10005291:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10005295:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
1000529a:	8d 44 b8 fc          	lea    eax,[eax+edi*4-0x4]
1000529e:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
100052a2:	01 c7                	add    edi,eax
100052a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
100052a7:	c1 e0 18             	shl    eax,0x18
100052aa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100052ae:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
100052b2:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
100052b6:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
100052ba:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
100052be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100052c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100052c6:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
100052cb:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
100052cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100052d3:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
100052d7:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
100052db:	0f 8e e8 00 00 00    	jle    100053c9 <ssfn_render+0x19c8>
100052e1:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
100052e8:	0f bf 40 06          	movsx  eax,WORD PTR [eax+0x6]
100052ec:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
100052f0:	0f 8e d3 00 00 00    	jle    100053c9 <ssfn_render+0x19c8>
100052f6:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
100052fb:	79 11                	jns    1000530e <ssfn_render+0x190d>
100052fd:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
10005301:	03 bc 24 80 00 00 00 	add    edi,DWORD PTR [esp+0x80]
10005308:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
1000530c:	eb c1                	jmp    100052cf <ssfn_render+0x18ce>
1000530e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10005312:	31 f6                	xor    esi,esi
10005314:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10005318:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
1000531c:	39 5c 24 54          	cmp    DWORD PTR [esp+0x54],ebx
10005320:	7e db                	jle    100052fd <ssfn_render+0x18fc>
10005322:	85 db                	test   ebx,ebx
10005324:	0f 88 8b 00 00 00    	js     100053b5 <ssfn_render+0x19b4>
1000532a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
1000532e:	7e 06                	jle    10005336 <ssfn_render+0x1935>
10005330:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
10005334:	7f 7f                	jg     100053b5 <ssfn_render+0x19b4>
10005336:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
10005339:	b8 10 00 00 00       	mov    eax,0x10
1000533e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10005342:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
10005346:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000534a:	89 d8                	mov    eax,ebx
1000534c:	8a 4c 24 2c          	mov    cl,BYTE PTR [esp+0x2c]
10005350:	d3 e8                	shr    eax,cl
10005352:	0f b6 cf             	movzx  ecx,bh
10005355:	0f b6 c0             	movzx  eax,al
10005358:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
1000535c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
10005360:	d3 eb                	shr    ebx,cl
10005362:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10005366:	0f b6 db             	movzx  ebx,bl
10005369:	29 c1                	sub    ecx,eax
1000536b:	29 da                	sub    edx,ebx
1000536d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
10005371:	0f af 14 24          	imul   edx,DWORD PTR [esp]
10005375:	c1 f9 08             	sar    ecx,0x8
10005378:	c1 fa 08             	sar    edx,0x8
1000537b:	01 c8                	add    eax,ecx
1000537d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
10005381:	8a 4c 24 2c          	mov    cl,BYTE PTR [esp+0x2c]
10005385:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10005389:	d3 e0                	shl    eax,cl
1000538b:	2b 54 24 38          	sub    edx,DWORD PTR [esp+0x38]
1000538f:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
10005393:	0f af 14 24          	imul   edx,DWORD PTR [esp]
10005397:	c1 fa 08             	sar    edx,0x8
1000539a:	03 54 24 38          	add    edx,DWORD PTR [esp+0x38]
1000539e:	c1 e2 08             	shl    edx,0x8
100053a1:	09 d0                	or     eax,edx
100053a3:	8d 14 19             	lea    edx,[ecx+ebx*1]
100053a6:	0b 44 24 50          	or     eax,DWORD PTR [esp+0x50]
100053aa:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
100053ae:	d3 e2                	shl    edx,cl
100053b0:	09 c2                	or     edx,eax
100053b2:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
100053b5:	46                   	inc    esi
100053b6:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
100053ba:	39 74 24 70          	cmp    DWORD PTR [esp+0x70],esi
100053be:	0f 8d 54 ff ff ff    	jge    10005318 <ssfn_render+0x1917>
100053c4:	e9 34 ff ff ff       	jmp    100052fd <ssfn_render+0x18fc>
100053c9:	f6 85 bc f5 00 00 20 	test   BYTE PTR [ebp+0xf5bc],0x20
100053d0:	0f 84 56 01 00 00    	je     1000552c <ssfn_render+0x1b2b>
100053d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100053da:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100053de:	d1 f8                	sar    eax,1
100053e0:	47                   	inc    edi
100053e1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100053e5:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
100053e9:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
100053ed:	7e 09                	jle    100053f8 <ssfn_render+0x19f7>
100053ef:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
100053f3:	47                   	inc    edi
100053f4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
100053f8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
100053fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10005400:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
10005404:	8b 34 24             	mov    esi,DWORD PTR [esp]
10005407:	01 c2                	add    edx,eax
10005409:	c1 e6 18             	shl    esi,0x18
1000540c:	0f af 54 24 48       	imul   edx,DWORD PTR [esp+0x48]
10005411:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
10005415:	8d 54 ba fc          	lea    edx,[edx+edi*4-0x4]
10005419:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
1000541d:	01 d7                	add    edi,edx
1000541f:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
10005423:	01 c2                	add    edx,eax
10005425:	0f b6 84 24 ac 00 00 00 	movzx  eax,BYTE PTR [esp+0xac]
1000542d:	2b 54 24 34          	sub    edx,DWORD PTR [esp+0x34]
10005431:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
10005435:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
10005439:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
1000543d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
10005442:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10005446:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
1000544a:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
1000544e:	0f 8e d8 00 00 00    	jle    1000552c <ssfn_render+0x1b2b>
10005454:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
1000545b:	0f bf 40 06          	movsx  eax,WORD PTR [eax+0x6]
1000545f:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10005463:	0f 8e c3 00 00 00    	jle    1000552c <ssfn_render+0x1b2b>
10005469:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
1000546e:	79 11                	jns    10005481 <ssfn_render+0x1a80>
10005470:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
10005474:	03 bc 24 80 00 00 00 	add    edi,DWORD PTR [esp+0x80]
1000547b:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
1000547f:	eb c5                	jmp    10005446 <ssfn_render+0x1a45>
10005481:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10005485:	31 f6                	xor    esi,esi
10005487:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000548b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000548f:	39 5c 24 54          	cmp    DWORD PTR [esp+0x54],ebx
10005493:	7e db                	jle    10005470 <ssfn_render+0x1a6f>
10005495:	85 db                	test   ebx,ebx
10005497:	78 7f                	js     10005518 <ssfn_render+0x1b17>
10005499:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
1000549c:	b8 10 00 00 00       	mov    eax,0x10
100054a1:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
100054a5:	2b 44 24 38          	sub    eax,DWORD PTR [esp+0x38]
100054a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100054ad:	89 d8                	mov    eax,ebx
100054af:	8a 4c 24 20          	mov    cl,BYTE PTR [esp+0x20]
100054b3:	d3 e8                	shr    eax,cl
100054b5:	0f b6 cf             	movzx  ecx,bh
100054b8:	0f b6 c0             	movzx  eax,al
100054bb:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
100054bf:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
100054c3:	d3 eb                	shr    ebx,cl
100054c5:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
100054c9:	0f b6 db             	movzx  ebx,bl
100054cc:	29 c1                	sub    ecx,eax
100054ce:	29 da                	sub    edx,ebx
100054d0:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
100054d4:	0f af 14 24          	imul   edx,DWORD PTR [esp]
100054d8:	c1 f9 08             	sar    ecx,0x8
100054db:	c1 fa 08             	sar    edx,0x8
100054de:	01 c8                	add    eax,ecx
100054e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
100054e4:	8a 4c 24 20          	mov    cl,BYTE PTR [esp+0x20]
100054e8:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
100054ec:	d3 e0                	shl    eax,cl
100054ee:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
100054f2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
100054f6:	0f af 14 24          	imul   edx,DWORD PTR [esp]
100054fa:	c1 fa 08             	sar    edx,0x8
100054fd:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
10005501:	c1 e2 08             	shl    edx,0x8
10005504:	09 d0                	or     eax,edx
10005506:	8d 14 19             	lea    edx,[ecx+ebx*1]
10005509:	0b 44 24 30          	or     eax,DWORD PTR [esp+0x30]
1000550d:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
10005511:	d3 e2                	shl    edx,cl
10005513:	09 c2                	or     edx,eax
10005515:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
10005518:	46                   	inc    esi
10005519:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
1000551d:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
10005521:	0f 8d 64 ff ff ff    	jge    1000548b <ssfn_render+0x1a8a>
10005527:	e9 44 ff ff ff       	jmp    10005470 <ssfn_render+0x1a6f>
1000552c:	f6 85 bd f5 00 00 08 	test   BYTE PTR [ebp+0xf5bd],0x8
10005533:	74 04                	je     10005539 <ssfn_render+0x1b38>
10005535:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
10005539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000553d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10005541:	89 85 90 f5 00 00    	mov    DWORD PTR [ebp+0xf590],eax
10005547:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
1000554e:	66 01 78 0a          	add    WORD PTR [eax+0xa],di
10005552:	8b bc 24 04 06 01 00 	mov    edi,DWORD PTR [esp+0x10604]
10005559:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000555c:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10005560:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10005566:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
1000556a:	0f af 44 24 04       	imul   eax,DWORD PTR [esp+0x4]
1000556f:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10005573:	99                   	cdq    
10005574:	f7 f9                	idiv   ecx
10005576:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
1000557a:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10005580:	25 80 00 00 00       	and    eax,0x80
10005585:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10005589:	0f 85 ec 01 00 00    	jne    1000577b <ssfn_render+0x1d7a>
1000558f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10005592:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
10005596:	0f 84 df 01 00 00    	je     1000577b <ssfn_render+0x1d7a>
1000559c:	8d 94 24 d4 00 00 00 	lea    edx,[esp+0xd4]
100055a3:	52                   	push   edx
100055a4:	8d 94 24 e0 00 00 00 	lea    edx,[esp+0xe0]
100055ab:	52                   	push   edx
100055ac:	8b 94 24 10 06 01 00 	mov    edx,DWORD PTR [esp+0x10610]
100055b3:	03 94 24 e0 00 00 00 	add    edx,DWORD PTR [esp+0xe0]
100055ba:	52                   	push   edx
100055bb:	50                   	push   eax
100055bc:	e8 b9 d2 ff ff       	call   1000287a <_ssfn_c>
100055c1:	83 c4 10             	add    esp,0x10
100055c4:	85 c0                	test   eax,eax
100055c6:	0f 84 af 01 00 00    	je     1000577b <ssfn_render+0x1d7a>
100055cc:	83 bc 24 d4 00 00 00 20 	cmp    DWORD PTR [esp+0xd4],0x20
100055d4:	0f 86 a1 01 00 00    	jbe    1000577b <ssfn_render+0x1d7a>
100055da:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
100055e0:	8d 48 06             	lea    ecx,[eax+0x6]
100055e3:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
100055e9:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
100055ed:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
100055f1:	0f 8e 84 01 00 00    	jle    1000577b <ssfn_render+0x1d7a>
100055f7:	8a 19                	mov    bl,BYTE PTR [ecx]
100055f9:	88 5c 24 0c          	mov    BYTE PTR [esp+0xc],bl
100055fd:	8a 18                	mov    bl,BYTE PTR [eax]
100055ff:	83 e3 40             	and    ebx,0x40
10005602:	80 7c 24 0c ff       	cmp    BYTE PTR [esp+0xc],0xff
10005607:	75 14                	jne    1000561d <ssfn_render+0x1c1c>
10005609:	80 79 01 ff          	cmp    BYTE PTR [ecx+0x1],0xff
1000560d:	75 0e                	jne    1000561d <ssfn_render+0x1c1c>
1000560f:	80 fb 01             	cmp    bl,0x1
10005612:	19 c0                	sbb    eax,eax
10005614:	8d 4c 01 06          	lea    ecx,[ecx+eax*1+0x6]
10005618:	e9 55 01 00 00       	jmp    10005772 <ssfn_render+0x1d71>
1000561d:	0f b6 71 04          	movzx  esi,BYTE PTR [ecx+0x4]
10005621:	0f b6 51 03          	movzx  edx,BYTE PTR [ecx+0x3]
10005625:	c1 e6 10             	shl    esi,0x10
10005628:	0f b6 79 02          	movzx  edi,BYTE PTR [ecx+0x2]
1000562c:	84 db                	test   bl,bl
1000562e:	74 08                	je     10005638 <ssfn_render+0x1c37>
10005630:	8b 79 02             	mov    edi,DWORD PTR [ecx+0x2]
10005633:	83 c1 06             	add    ecx,0x6
10005636:	eb 0c                	jmp    10005644 <ssfn_render+0x1c43>
10005638:	c1 e2 08             	shl    edx,0x8
1000563b:	83 c1 05             	add    ecx,0x5
1000563e:	89 d0                	mov    eax,edx
10005640:	09 f0                	or     eax,esi
10005642:	09 c7                	or     edi,eax
10005644:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10005647:	89 04 24             	mov    DWORD PTR [esp],eax
1000564a:	01 f8                	add    eax,edi
1000564c:	8a 10                	mov    dl,BYTE PTR [eax]
1000564e:	88 d3                	mov    bl,dl
10005650:	83 e3 e0             	and    ebx,0xffffffe0
10005653:	80 fb c0             	cmp    bl,0xc0
10005656:	0f 85 16 01 00 00    	jne    10005772 <ssfn_render+0x1d71>
1000565c:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
10005660:	c1 e2 08             	shl    edx,0x8
10005663:	83 c0 02             	add    eax,0x2
10005666:	81 e2 00 1f 00 00    	and    edx,0x1f00
1000566c:	8b b4 24 d4 00 00 00 	mov    esi,DWORD PTR [esp+0xd4]
10005673:	09 da                	or     edx,ebx
10005675:	8d 7a 01             	lea    edi,[edx+0x1]
10005678:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
1000567c:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
10005680:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
10005685:	0f 84 e7 00 00 00    	je     10005772 <ssfn_render+0x1d71>
1000568b:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
1000568f:	0f b7 10             	movzx  edx,WORD PTR [eax]
10005692:	c1 e3 10             	shl    ebx,0x10
10005695:	81 e3 00 00 0f 00    	and    ebx,0xf0000
1000569b:	09 d3                	or     ebx,edx
1000569d:	39 de                	cmp    esi,ebx
1000569f:	0f 82 c5 00 00 00    	jb     1000576a <ssfn_render+0x1d69>
100056a5:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
100056a8:	89 d7                	mov    edi,edx
100056aa:	c1 e7 10             	shl    edi,0x10
100056ad:	81 e7 00 00 0f 00    	and    edi,0xf0000
100056b3:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
100056b7:	0f b7 78 03          	movzx  edi,WORD PTR [eax+0x3]
100056bb:	0b 7c 24 14          	or     edi,DWORD PTR [esp+0x14]
100056bf:	39 fe                	cmp    esi,edi
100056c1:	0f 87 a3 00 00 00    	ja     1000576a <ssfn_render+0x1d69>
100056c7:	29 de                	sub    esi,ebx
100056c9:	c0 ea 04             	shr    dl,0x4
100056cc:	89 b4 24 d4 00 00 00 	mov    DWORD PTR [esp+0xd4],esi
100056d3:	0f b6 d2             	movzx  edx,dl
100056d6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
100056d9:	89 d3                	mov    ebx,edx
100056db:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
100056df:	c1 e3 10             	shl    ebx,0x10
100056e2:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
100056e5:	09 da                	or     edx,ebx
100056e7:	c0 e8 04             	shr    al,0x4
100056ea:	c1 e0 18             	shl    eax,0x18
100056ed:	09 c2                	or     edx,eax
100056ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
100056f2:	03 50 18             	add    edx,DWORD PTR [eax+0x18]
100056f5:	01 c2                	add    edx,eax
100056f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100056fa:	8d 7c 07 fc          	lea    edi,[edi+eax*1-0x4]
100056fe:	39 d7                	cmp    edi,edx
10005700:	76 70                	jbe    10005772 <ssfn_render+0x1d71>
10005702:	8a 1a                	mov    bl,BYTE PTR [edx]
10005704:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
1000570b:	89 de                	mov    esi,ebx
1000570d:	83 e6 7f             	and    esi,0x7f
10005710:	39 c6                	cmp    esi,eax
10005712:	73 1d                	jae    10005731 <ssfn_render+0x1d30>
10005714:	48                   	dec    eax
10005715:	bb 02 00 00 00       	mov    ebx,0x2
1000571a:	29 f0                	sub    eax,esi
1000571c:	89 84 24 d4 00 00 00 	mov    DWORD PTR [esp+0xd4],eax
10005723:	0f b6 02             	movzx  eax,BYTE PTR [edx]
10005726:	84 c0                	test   al,al
10005728:	78 03                	js     1000572d <ssfn_render+0x1d2c>
1000572a:	8d 58 02             	lea    ebx,[eax+0x2]
1000572d:	01 da                	add    edx,ebx
1000572f:	eb cd                	jmp    100056fe <ssfn_render+0x1cfd>
10005731:	be 01 00 00 00       	mov    esi,0x1
10005736:	84 db                	test   bl,bl
10005738:	78 03                	js     1000573d <ssfn_render+0x1d3c>
1000573a:	8d 70 01             	lea    esi,[eax+0x1]
1000573d:	0f be 04 32          	movsx  eax,BYTE PTR [edx+esi*1]
10005741:	8b 3c 24             	mov    edi,DWORD PTR [esp]
10005744:	0f af 44 24 04       	imul   eax,DWORD PTR [esp+0x4]
10005749:	0f b6 5f 0b          	movzx  ebx,BYTE PTR [edi+0xb]
1000574d:	99                   	cdq    
1000574e:	8b bc 24 04 06 01 00 	mov    edi,DWORD PTR [esp+0x10604]
10005755:	f7 fb                	idiv   ebx
10005757:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
1000575c:	74 06                	je     10005764 <ssfn_render+0x1d63>
1000575e:	66 01 47 0a          	add    WORD PTR [edi+0xa],ax
10005762:	eb 0e                	jmp    10005772 <ssfn_render+0x1d71>
10005764:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10005768:	eb 08                	jmp    10005772 <ssfn_render+0x1d71>
1000576a:	83 c0 08             	add    eax,0x8
1000576d:	e9 0a ff ff ff       	jmp    1000567c <ssfn_render+0x1c7b>
10005772:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
10005776:	e9 68 fe ff ff       	jmp    100055e3 <ssfn_render+0x1be2>
1000577b:	8b 84 24 d8 00 00 00 	mov    eax,DWORD PTR [esp+0xd8]
10005782:	eb 7f                	jmp    10005803 <ssfn_render+0x1e02>
10005784:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
1000578f:	e9 ab e4 ff ff       	jmp    10003c3f <ssfn_render+0x23e>
10005794:	8d 84 24 d0 00 00 00 	lea    eax,[esp+0xd0]
1000579b:	50                   	push   eax
1000579c:	8d 84 24 dc 00 00 00 	lea    eax,[esp+0xdc]
100057a3:	50                   	push   eax
100057a4:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
100057ab:	51                   	push   ecx
100057ac:	e8 c9 d0 ff ff       	call   1000287a <_ssfn_c>
100057b1:	83 c4 10             	add    esp,0x10
100057b4:	89 c1                	mov    ecx,eax
100057b6:	85 c0                	test   eax,eax
100057b8:	0f 84 7a e4 ff ff    	je     10003c38 <ssfn_render+0x237>
100057be:	e9 fc e4 ff ff       	jmp    10003cbf <ssfn_render+0x2be>
100057c3:	8b 04 87             	mov    eax,DWORD PTR [edi+eax*4]
100057c6:	f6 40 08 30          	test   BYTE PTR [eax+0x8],0x30
100057ca:	75 0c                	jne    100057d8 <ssfn_render+0x1dd7>
100057cc:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
100057d3:	e9 90 e4 ff ff       	jmp    10003c68 <ssfn_render+0x267>
100057d8:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
100057df:	51                   	push   ecx
100057e0:	8d 94 24 dc 00 00 00 	lea    edx,[esp+0xdc]
100057e7:	52                   	push   edx
100057e8:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
100057ef:	50                   	push   eax
100057f0:	e8 85 d0 ff ff       	call   1000287a <_ssfn_c>
100057f5:	83 c4 10             	add    esp,0x10
100057f8:	89 c1                	mov    ecx,eax
100057fa:	85 c0                	test   eax,eax
100057fc:	74 ce                	je     100057cc <ssfn_render+0x1dcb>
100057fe:	e9 bc e4 ff ff       	jmp    10003cbf <ssfn_render+0x2be>
10005803:	81 c4 ec 05 01 00    	add    esp,0x105ec
10005809:	5b                   	pop    ebx
1000580a:	5e                   	pop    esi
1000580b:	5f                   	pop    edi
1000580c:	5d                   	pop    ebp
1000580d:	c3                   	ret    

1000580e <ssfn_bbox>:
1000580e:	55                   	push   ebp
1000580f:	57                   	push   edi
10005810:	56                   	push   esi
10005811:	53                   	push   ebx
10005812:	83 ec 3c             	sub    esp,0x3c
10005815:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
1000581a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
1000581e:	0f 94 c0             	sete   al
10005821:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
10005826:	0f 94 c2             	sete   dl
10005829:	09 d0                	or     eax,edx
1000582b:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
10005830:	0f 94 c2             	sete   dl
10005833:	09 d0                	or     eax,edx
10005835:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
1000583a:	0f 94 c2             	sete   dl
1000583d:	09 d0                	or     eax,edx
1000583f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
10005844:	0f 94 c2             	sete   dl
10005847:	08 d0                	or     al,dl
10005849:	0f 85 7c 01 00 00    	jne    100059cb <ssfn_bbox+0x1bd>
1000584f:	85 db                	test   ebx,ebx
10005851:	0f 84 74 01 00 00    	je     100059cb <ssfn_bbox+0x1bd>
10005857:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000585b:	31 f6                	xor    esi,esi
1000585d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10005863:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10005867:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000586d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10005871:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10005877:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
1000587b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10005881:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10005885:	80 38 00             	cmp    BYTE PTR [eax],0x0
10005888:	0f 84 42 01 00 00    	je     100059d0 <ssfn_bbox+0x1c2>
1000588e:	8d 54 24 18          	lea    edx,[esp+0x18]
10005892:	b9 06 00 00 00       	mov    ecx,0x6
10005897:	89 d7                	mov    edi,edx
10005899:	89 f0                	mov    eax,esi
1000589b:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
100058a5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100058a7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
100058af:	31 ff                	xor    edi,edi
100058b1:	bd 01 00 00 00       	mov    ebp,0x1
100058b6:	50                   	push   eax
100058b7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100058bb:	8d 44 24 20          	lea    eax,[esp+0x20]
100058bf:	50                   	push   eax
100058c0:	53                   	push   ebx
100058c1:	e8 fc ff ff ff       	call   100058c2 <ssfn_bbox+0xb4>	100058c2: R_386_PC32	ssfn_render
100058c6:	83 c4 10             	add    esp,0x10
100058c9:	89 c6                	mov    esi,eax
100058cb:	85 c0                	test   eax,eax
100058cd:	74 6f                	je     1000593e <ssfn_bbox+0x130>
100058cf:	0f 88 fb 00 00 00    	js     100059d0 <ssfn_bbox+0x1c2>
100058d5:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
100058db:	85 c0                	test   eax,eax
100058dd:	0f 84 ed 00 00 00    	je     100059d0 <ssfn_bbox+0x1c2>
100058e3:	85 ed                	test   ebp,ebp
100058e5:	74 0b                	je     100058f2 <ssfn_bbox+0xe4>
100058e7:	8b bb 88 f5 00 00    	mov    edi,DWORD PTR [ebx+0xf588]
100058ed:	66 01 7c 24 22       	add    WORD PTR [esp+0x22],di
100058f2:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
100058f6:	74 12                	je     1000590a <ssfn_bbox+0xfc>
100058f8:	8b 83 8c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf58c]
100058fe:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
10005902:	7d 2f                	jge    10005933 <ssfn_bbox+0x125>
10005904:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10005908:	eb 29                	jmp    10005933 <ssfn_bbox+0x125>
1000590a:	0f b7 08             	movzx  ecx,WORD PTR [eax]
1000590d:	0f bf 6c 24 1c       	movsx  ebp,WORD PTR [esp+0x1c]
10005912:	39 cd                	cmp    ebp,ecx
10005914:	7d 05                	jge    1000591b <ssfn_bbox+0x10d>
10005916:	66 89 4c 24 1c       	mov    WORD PTR [esp+0x1c],cx
1000591b:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
1000591f:	66 8b 4c 24 1e       	mov    cx,WORD PTR [esp+0x1e]
10005924:	84 d2                	test   dl,dl
10005926:	75 04                	jne    1000592c <ssfn_bbox+0x11e>
10005928:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
1000592c:	01 ca                	add    edx,ecx
1000592e:	66 89 54 24 1e       	mov    WORD PTR [esp+0x1e],dx
10005933:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
10005937:	31 ed                	xor    ebp,ebp
10005939:	e9 78 ff ff ff       	jmp    100058b6 <ssfn_bbox+0xa8>
1000593e:	f6 83 bc f5 00 00 02 	test   BYTE PTR [ebx+0xf5bc],0x2
10005945:	74 23                	je     1000596a <ssfn_bbox+0x15c>
10005947:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
1000594a:	f6 40 08 20          	test   BYTE PTR [eax+0x8],0x20
1000594e:	75 1a                	jne    1000596a <ssfn_bbox+0x15c>
10005950:	8b 83 c0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c0]
10005956:	b9 04 00 00 00       	mov    ecx,0x4
1000595b:	99                   	cdq    
1000595c:	f7 f9                	idiv   ecx
1000595e:	66 03 44 24 22       	add    ax,WORD PTR [esp+0x22]
10005963:	29 f8                	sub    eax,edi
10005965:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
1000596a:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
10005970:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10005974:	74 29                	je     1000599f <ssfn_bbox+0x191>
10005976:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
1000597b:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
1000597f:	89 01                	mov    DWORD PTR [ecx],eax
10005981:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10005985:	8b 83 c4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c4]
1000598b:	89 01                	mov    DWORD PTR [ecx],eax
1000598d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10005991:	89 38                	mov    DWORD PTR [eax],edi
10005993:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10005997:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
1000599b:	89 38                	mov    DWORD PTR [eax],edi
1000599d:	eb 31                	jmp    100059d0 <ssfn_bbox+0x1c2>
1000599f:	0f bf 44 24 1c       	movsx  eax,WORD PTR [esp+0x1c]
100059a4:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
100059a8:	89 07                	mov    DWORD PTR [edi],eax
100059aa:	0f bf 44 24 24       	movsx  eax,WORD PTR [esp+0x24]
100059af:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
100059b3:	89 07                	mov    DWORD PTR [edi],eax
100059b5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100059b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100059bf:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100059c3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100059c9:	eb 05                	jmp    100059d0 <ssfn_bbox+0x1c2>
100059cb:	be fc ff ff ff       	mov    esi,0xfffffffc
100059d0:	83 c4 3c             	add    esp,0x3c
100059d3:	89 f0                	mov    eax,esi
100059d5:	5b                   	pop    ebx
100059d6:	5e                   	pop    esi
100059d7:	5f                   	pop    edi
100059d8:	5d                   	pop    ebp
100059d9:	c3                   	ret    

100059da <ssfn_text>:
100059da:	55                   	push   ebp
100059db:	57                   	push   edi
100059dc:	56                   	push   esi
100059dd:	53                   	push   ebx
100059de:	83 ec 1c             	sub    esp,0x1c
100059e1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100059e5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
100059e9:	85 f6                	test   esi,esi
100059eb:	0f 84 b2 00 00 00    	je     10005aa3 <ssfn_text+0xc9>
100059f1:	85 ed                	test   ebp,ebp
100059f3:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
100059f8:	0f 84 a5 00 00 00    	je     10005aa3 <ssfn_text+0xc9>
100059fe:	83 ec 0c             	sub    esp,0xc
10005a01:	6a 18                	push   0x18
10005a03:	e8 fc ff ff ff       	call   10005a04 <ssfn_text+0x2a>	10005a04: R_386_PC32	malloc
10005a08:	83 c4 10             	add    esp,0x10
10005a0b:	89 c3                	mov    ebx,eax
10005a0d:	85 c0                	test   eax,eax
10005a0f:	0f 84 8e 00 00 00    	je     10005aa3 <ssfn_text+0xc9>
10005a15:	31 c0                	xor    eax,eax
10005a17:	b9 06 00 00 00       	mov    ecx,0x6
10005a1c:	89 df                	mov    edi,ebx
10005a1e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
10005a21:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10005a23:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10005a27:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10005a2a:	74 79                	je     10005aa5 <ssfn_text+0xcb>
10005a2c:	8d 43 0c             	lea    eax,[ebx+0xc]
10005a2f:	52                   	push   edx
10005a30:	52                   	push   edx
10005a31:	50                   	push   eax
10005a32:	8d 43 0a             	lea    eax,[ebx+0xa]
10005a35:	50                   	push   eax
10005a36:	8d 43 06             	lea    eax,[ebx+0x6]
10005a39:	50                   	push   eax
10005a3a:	8d 43 04             	lea    eax,[ebx+0x4]
10005a3d:	50                   	push   eax
10005a3e:	56                   	push   esi
10005a3f:	55                   	push   ebp
10005a40:	e8 fc ff ff ff       	call   10005a41 <ssfn_text+0x67>	10005a41: R_386_PC32	ssfn_bbox
10005a45:	83 c4 20             	add    esp,0x20
10005a48:	85 c0                	test   eax,eax
10005a4a:	75 59                	jne    10005aa5 <ssfn_text+0xcb>
10005a4c:	83 ec 0c             	sub    esp,0xc
10005a4f:	0f bf 4b 04          	movsx  ecx,WORD PTR [ebx+0x4]
10005a53:	0f bf 43 06          	movsx  eax,WORD PTR [ebx+0x6]
10005a57:	0f af c8             	imul   ecx,eax
10005a5a:	c1 e1 02             	shl    ecx,0x2
10005a5d:	51                   	push   ecx
10005a5e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10005a62:	e8 fc ff ff ff       	call   10005a63 <ssfn_text+0x89>	10005a63: R_386_PC32	malloc
10005a67:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10005a6b:	89 c7                	mov    edi,eax
10005a6d:	89 03                	mov    DWORD PTR [ebx],eax
10005a6f:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
10005a73:	83 c4 10             	add    esp,0x10
10005a76:	f3 aa                	rep stos BYTE PTR es:[edi],al
10005a78:	50                   	push   eax
10005a79:	56                   	push   esi
10005a7a:	53                   	push   ebx
10005a7b:	55                   	push   ebp
10005a7c:	e8 fc ff ff ff       	call   10005a7d <ssfn_text+0xa3>	10005a7d: R_386_PC32	ssfn_render
10005a81:	83 c4 10             	add    esp,0x10
10005a84:	85 c0                	test   eax,eax
10005a86:	7e 04                	jle    10005a8c <ssfn_text+0xb2>
10005a88:	01 c6                	add    esi,eax
10005a8a:	eb ec                	jmp    10005a78 <ssfn_text+0x9e>
10005a8c:	74 17                	je     10005aa5 <ssfn_text+0xcb>
10005a8e:	83 ec 0c             	sub    esp,0xc
10005a91:	ff 33                	push   DWORD PTR [ebx]
10005a93:	e8 fc ff ff ff       	call   10005a94 <ssfn_text+0xba>	10005a94: R_386_PC32	free
10005a98:	89 1c 24             	mov    DWORD PTR [esp],ebx
10005a9b:	e8 fc ff ff ff       	call   10005a9c <ssfn_text+0xc2>	10005a9c: R_386_PC32	free
10005aa0:	83 c4 10             	add    esp,0x10
10005aa3:	31 db                	xor    ebx,ebx
10005aa5:	83 c4 1c             	add    esp,0x1c
10005aa8:	89 d8                	mov    eax,ebx
10005aaa:	5b                   	pop    ebx
10005aab:	5e                   	pop    esi
10005aac:	5f                   	pop    edi
10005aad:	5d                   	pop    ebp
10005aae:	c3                   	ret    

10005aaf <loadSSFNFont(Font*, int)>:
10005aaf:	55                   	push   ebp
10005ab0:	57                   	push   edi
10005ab1:	56                   	push   esi
10005ab2:	53                   	push   ebx
10005ab3:	81 ec 34 01 00 00    	sub    esp,0x134
10005ab9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
10005ac0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
10005ac7:	e8 fc ff ff ff       	call   10005ac8 <loadSSFNFont(Font*, int)+0x19>	10005ac8: R_386_PC32	lookupInFontTableByNameOnly(char const*, int)
10005acc:	83 c4 10             	add    esp,0x10
10005acf:	83 f8 ff             	cmp    eax,0xffffffff
10005ad2:	0f 85 44 01 00 00    	jne    10005c1c <loadSSFNFont(Font*, int)+0x16d>
10005ad8:	50                   	push   eax
10005ad9:	50                   	push   eax
10005ada:	68 6d 90 00 10       	push   0x1000906d	10005adb: R_386_32	.text
10005adf:	8d 74 24 2c          	lea    esi,[esp+0x2c]
10005ae3:	56                   	push   esi
10005ae4:	e8 fc ff ff ff       	call   10005ae5 <loadSSFNFont(Font*, int)+0x36>	10005ae5: R_386_PC32	strcpy
10005ae9:	58                   	pop    eax
10005aea:	5a                   	pop    edx
10005aeb:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
10005af2:	56                   	push   esi
10005af3:	e8 fc ff ff ff       	call   10005af4 <loadSSFNFont(Font*, int)+0x45>	10005af4: R_386_PC32	strcat
10005af8:	59                   	pop    ecx
10005af9:	5b                   	pop    ebx
10005afa:	68 82 90 00 10       	push   0x10009082	10005afb: R_386_32	.text
10005aff:	56                   	push   esi
10005b00:	e8 fc ff ff ff       	call   10005b01 <loadSSFNFont(Font*, int)+0x52>	10005b01: R_386_PC32	strcat
10005b05:	5f                   	pop    edi
10005b06:	5d                   	pop    ebp
10005b07:	56                   	push   esi
10005b08:	68 87 90 00 10       	push   0x10009087	10005b09: R_386_32	.text
10005b0d:	e8 fc ff ff ff       	call   10005b0e <loadSSFNFont(Font*, int)+0x5f>	10005b0e: R_386_PC32	Dbg::kprintf(char const*, ...)
10005b12:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10005b19:	e8 fc ff ff ff       	call   10005b1a <loadSSFNFont(Font*, int)+0x6b>	10005b1a: R_386_PC32	malloc
10005b1e:	83 c4 0c             	add    esp,0xc
10005b21:	89 c3                	mov    ebx,eax
10005b23:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005b25: R_386_32	kernelProcess
10005b29:	56                   	push   esi
10005b2a:	50                   	push   eax
10005b2b:	e8 fc ff ff ff       	call   10005b2c <loadSSFNFont(Font*, int)+0x7d>	10005b2c: R_386_PC32	File::File(char const*, Process*)
10005b30:	83 c4 10             	add    esp,0x10
10005b33:	85 db                	test   ebx,ebx
10005b35:	75 0d                	jne    10005b44 <loadSSFNFont(Font*, int)+0x95>
10005b37:	83 ec 0c             	sub    esp,0xc
10005b3a:	68 9a 90 00 10       	push   0x1000909a	10005b3b: R_386_32	.text
10005b3f:	e9 8d 00 00 00       	jmp    10005bd1 <loadSSFNFont(Font*, int)+0x122>
10005b44:	50                   	push   eax
10005b45:	50                   	push   eax
10005b46:	6a 01                	push   0x1
10005b48:	53                   	push   ebx
10005b49:	e8 fc ff ff ff       	call   10005b4a <loadSSFNFont(Font*, int)+0x9b>	10005b4a: R_386_PC32	File::open(FileOpenMode)
10005b4e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10005b52:	83 c4 10             	add    esp,0x10
10005b55:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10005b5a:	74 1a                	je     10005b76 <loadSSFNFont(Font*, int)+0xc7>
10005b5c:	83 ec 0c             	sub    esp,0xc
10005b5f:	68 af 90 00 10       	push   0x100090af	10005b60: R_386_32	.text
10005b64:	e8 fc ff ff ff       	call   10005b65 <loadSSFNFont(Font*, int)+0xb6>	10005b65: R_386_PC32	Dbg::kprintf(char const*, ...)
10005b69:	8b 03                	mov    eax,DWORD PTR [ebx]
10005b6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
10005b6e:	ff 50 08             	call   DWORD PTR [eax+0x8]
10005b71:	e9 ec 00 00 00       	jmp    10005c62 <loadSSFNFont(Font*, int)+0x1b3>
10005b76:	51                   	push   ecx
10005b77:	8d 44 24 17          	lea    eax,[esp+0x17]
10005b7b:	50                   	push   eax
10005b7c:	8d 44 24 20          	lea    eax,[esp+0x20]
10005b80:	50                   	push   eax
10005b81:	53                   	push   ebx
10005b82:	e8 fc ff ff ff       	call   10005b83 <loadSSFNFont(Font*, int)+0xd4>	10005b83: R_386_PC32	File::stat(unsigned long long*, bool*)
10005b87:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
10005b8b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
10005b8f:	89 3c 24             	mov    DWORD PTR [esp],edi
10005b92:	e8 fc ff ff ff       	call   10005b93 <loadSSFNFont(Font*, int)+0xe4>	10005b93: R_386_PC32	malloc
10005b97:	89 c6                	mov    esi,eax
10005b99:	58                   	pop    eax
10005b9a:	8b 03                	mov    eax,DWORD PTR [ebx]
10005b9c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
10005ba0:	51                   	push   ecx
10005ba1:	56                   	push   esi
10005ba2:	55                   	push   ebp
10005ba3:	57                   	push   edi
10005ba4:	53                   	push   ebx
10005ba5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10005ba8:	83 c4 14             	add    esp,0x14
10005bab:	53                   	push   ebx
10005bac:	e8 fc ff ff ff       	call   10005bad <loadSSFNFont(Font*, int)+0xfe>	10005bad: R_386_PC32	File::close()
10005bb1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10005bb5:	83 c4 10             	add    esp,0x10
10005bb8:	89 c1                	mov    ecx,eax
10005bba:	c1 f9 1f             	sar    ecx,0x1f
10005bbd:	3b 4c 24 1c          	cmp    ecx,DWORD PTR [esp+0x1c]
10005bc1:	75 06                	jne    10005bc9 <loadSSFNFont(Font*, int)+0x11a>
10005bc3:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10005bc7:	74 17                	je     10005be0 <loadSSFNFont(Font*, int)+0x131>
10005bc9:	52                   	push   edx
10005bca:	52                   	push   edx
10005bcb:	50                   	push   eax
10005bcc:	68 c4 90 00 10       	push   0x100090c4	10005bcd: R_386_32	.text
10005bd1:	e8 fc ff ff ff       	call   10005bd2 <loadSSFNFont(Font*, int)+0x123>	10005bd2: R_386_PC32	Dbg::kprintf(char const*, ...)
10005bd6:	83 c4 10             	add    esp,0x10
10005bd9:	31 c0                	xor    eax,eax
10005bdb:	e9 87 00 00 00       	jmp    10005c67 <loadSSFNFont(Font*, int)+0x1b8>
10005be0:	83 ec 0c             	sub    esp,0xc
10005be3:	68 c8 f5 00 00       	push   0xf5c8
10005be8:	e8 fc ff ff ff       	call   10005be9 <loadSSFNFont(Font*, int)+0x13a>	10005be9: R_386_PC32	malloc
10005bed:	b9 72 3d 00 00       	mov    ecx,0x3d72
10005bf2:	89 c2                	mov    edx,eax
10005bf4:	89 c7                	mov    edi,eax
10005bf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10005bfa:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10005bfc:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
10005c03:	89 90 90 04 00 00    	mov    DWORD PTR [eax+0x490],edx
10005c09:	5f                   	pop    edi
10005c0a:	5d                   	pop    ebp
10005c0b:	56                   	push   esi
10005c0c:	52                   	push   edx
10005c0d:	e8 fc ff ff ff       	call   10005c0e <loadSSFNFont(Font*, int)+0x15f>	10005c0e: R_386_PC32	ssfn_load
10005c12:	89 34 24             	mov    DWORD PTR [esp],esi
10005c15:	e8 fc ff ff ff       	call   10005c16 <loadSSFNFont(Font*, int)+0x167>	10005c16: R_386_PC32	free
10005c1a:	eb 46                	jmp    10005c62 <loadSSFNFont(Font*, int)+0x1b3>
10005c1c:	89 c6                	mov    esi,eax
10005c1e:	50                   	push   eax
10005c1f:	50                   	push   eax
10005c20:	56                   	push   esi
10005c21:	68 e0 90 00 10       	push   0x100090e0	10005c22: R_386_32	.text
10005c26:	e8 fc ff ff ff       	call   10005c27 <loadSSFNFont(Font*, int)+0x178>	10005c27: R_386_PC32	Dbg::kprintf(char const*, ...)
10005c2b:	89 34 24             	mov    DWORD PTR [esp],esi
10005c2e:	e8 fc ff ff ff       	call   10005c2f <loadSSFNFont(Font*, int)+0x180>	10005c2f: R_386_PC32	getFontFromHandle(int)
10005c33:	5a                   	pop    edx
10005c34:	89 c6                	mov    esi,eax
10005c36:	59                   	pop    ecx
10005c37:	50                   	push   eax
10005c38:	68 f6 90 00 10       	push   0x100090f6	10005c39: R_386_32	.text
10005c3d:	e8 fc ff ff ff       	call   10005c3e <loadSSFNFont(Font*, int)+0x18f>	10005c3e: R_386_PC32	Dbg::kprintf(char const*, ...)
10005c42:	8b 8c 24 50 01 00 00 	mov    ecx,DWORD PTR [esp+0x150]
10005c49:	8b 86 90 04 00 00    	mov    eax,DWORD PTR [esi+0x490]
10005c4f:	89 81 90 04 00 00    	mov    DWORD PTR [ecx+0x490],eax
10005c55:	5b                   	pop    ebx
10005c56:	5e                   	pop    esi
10005c57:	50                   	push   eax
10005c58:	68 0c 91 00 10       	push   0x1000910c	10005c59: R_386_32	.text
10005c5d:	e8 fc ff ff ff       	call   10005c5e <loadSSFNFont(Font*, int)+0x1af>	10005c5e: R_386_PC32	Dbg::kprintf(char const*, ...)
10005c62:	83 c4 10             	add    esp,0x10
10005c65:	b0 01                	mov    al,0x1
10005c67:	81 c4 2c 01 00 00    	add    esp,0x12c
10005c6d:	5b                   	pop    ebx
10005c6e:	5e                   	pop    esi
10005c6f:	5f                   	pop    edi
10005c70:	5d                   	pop    ebp
10005c71:	c3                   	ret    

10005c72 <getSSFNFontRegion(Font*, int, int*, int*)>:
10005c72:	55                   	push   ebp
10005c73:	57                   	push   edi
10005c74:	56                   	push   esi
10005c75:	53                   	push   ebx
10005c76:	83 ec 4c             	sub    esp,0x4c
10005c79:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
10005c7d:	8b 5c 24 6c          	mov    ebx,DWORD PTR [esp+0x6c]
10005c81:	8b 96 84 00 00 00    	mov    edx,DWORD PTR [esi+0x84]
10005c87:	89 d0                	mov    eax,edx
10005c89:	83 e0 01             	and    eax,0x1
10005c8c:	f6 c2 02             	test   dl,0x2
10005c8f:	74 03                	je     10005c94 <getSSFNFontRegion(Font*, int, int*, int*)+0x22>
10005c91:	83 c8 02             	or     eax,0x2
10005c94:	f6 c2 04             	test   dl,0x4
10005c97:	74 03                	je     10005c9c <getSSFNFontRegion(Font*, int, int*, int*)+0x2a>
10005c99:	83 c8 10             	or     eax,0x10
10005c9c:	80 e2 08             	and    dl,0x8
10005c9f:	74 03                	je     10005ca4 <getSSFNFontRegion(Font*, int, int*, int*)+0x32>
10005ca1:	83 c8 20             	or     eax,0x20
10005ca4:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
10005ca8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
10005cad:	88 54 24 1e          	mov    BYTE PTR [esp+0x1e],dl
10005cb1:	0d 40 02 00 00       	or     eax,0x240
10005cb6:	83 ec 0c             	sub    esp,0xc
10005cb9:	ff b6 80 00 00 00    	push   DWORD PTR [esi+0x80]
10005cbf:	50                   	push   eax
10005cc0:	6a 00                	push   0x0
10005cc2:	68 ff 00 00 00       	push   0xff
10005cc7:	ff b6 90 04 00 00    	push   DWORD PTR [esi+0x490]
10005ccd:	e8 fc ff ff ff       	call   10005cce <getSSFNFontRegion(Font*, int, int*, int*)+0x5c>	10005cce: R_386_PC32	ssfn_select
10005cd2:	83 c4 18             	add    esp,0x18
10005cd5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
10005cd9:	50                   	push   eax
10005cda:	8d 44 24 2c          	lea    eax,[esp+0x2c]
10005cde:	50                   	push   eax
10005cdf:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
10005ce6:	53                   	push   ebx
10005ce7:	8d 6c 24 36          	lea    ebp,[esp+0x36]
10005ceb:	55                   	push   ebp
10005cec:	ff b6 90 04 00 00    	push   DWORD PTR [esi+0x490]
10005cf2:	e8 fc ff ff ff       	call   10005cf3 <getSSFNFontRegion(Font*, int, int*, int*)+0x81>	10005cf3: R_386_PC32	ssfn_bbox
10005cf7:	83 c4 14             	add    esp,0x14
10005cfa:	8b 03                	mov    eax,DWORD PTR [ebx]
10005cfc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
10005d00:	0f af 07             	imul   eax,DWORD PTR [edi]
10005d03:	c1 e0 02             	shl    eax,0x2
10005d06:	50                   	push   eax
10005d07:	e8 fc ff ff ff       	call   10005d08 <getSSFNFontRegion(Font*, int, int*, int*)+0x96>	10005d08: R_386_PC32	malloc
10005d0c:	66 c7 44 24 42 00 00 	mov    WORD PTR [esp+0x42],0x0
10005d13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10005d17:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
10005d1f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10005d26:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10005d2a:	c7 44 24 48 20 20 20 ff 	mov    DWORD PTR [esp+0x48],0xff202020
10005d32:	8b 13                	mov    edx,DWORD PTR [ebx]
10005d34:	8b 00                	mov    eax,DWORD PTR [eax]
10005d36:	66 89 54 24 3c       	mov    WORD PTR [esp+0x3c],dx
10005d3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10005d3f:	89 c1                	mov    ecx,eax
10005d41:	31 c0                	xor    eax,eax
10005d43:	0f af ca             	imul   ecx,edx
10005d46:	c1 e2 02             	shl    edx,0x2
10005d49:	c1 e1 02             	shl    ecx,0x2
10005d4c:	66 89 54 24 40       	mov    WORD PTR [esp+0x40],dx
10005d51:	f3 aa                	rep stos BYTE PTR es:[edi],al
10005d53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10005d57:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
10005d5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10005d60:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
10005d65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10005d69:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10005d6d:	83 c4 0c             	add    esp,0xc
10005d70:	55                   	push   ebp
10005d71:	8d 44 24 30          	lea    eax,[esp+0x30]
10005d75:	50                   	push   eax
10005d76:	ff b6 90 04 00 00    	push   DWORD PTR [esi+0x490]
10005d7c:	e8 fc ff ff ff       	call   10005d7d <getSSFNFontRegion(Font*, int, int*, int*)+0x10b>	10005d7d: R_386_PC32	ssfn_render
10005d81:	8b 03                	mov    eax,DWORD PTR [ebx]
10005d83:	8b bc 24 80 00 00 00 	mov    edi,DWORD PTR [esp+0x80]
10005d8a:	0f af 07             	imul   eax,DWORD PTR [edi]
10005d8d:	89 04 24             	mov    DWORD PTR [esp],eax
10005d90:	e8 fc ff ff ff       	call   10005d91 <getSSFNFontRegion(Font*, int, int*, int*)+0x11f>	10005d91: R_386_PC32	malloc
10005d95:	31 c9                	xor    ecx,ecx
10005d97:	89 c6                	mov    esi,eax
10005d99:	0f bf 44 24 3e       	movsx  eax,WORD PTR [esp+0x3e]
10005d9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10005da2:	0f bf 44 24 3c       	movsx  eax,WORD PTR [esp+0x3c]
10005da7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10005dab:	83 c4 10             	add    esp,0x10
10005dae:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
10005db2:	7e 23                	jle    10005dd7 <getSSFNFontRegion(Font*, int, int*, int*)+0x165>
10005db4:	8b 2b                	mov    ebp,DWORD PTR [ebx]
10005db6:	31 d2                	xor    edx,edx
10005db8:	0f af e9             	imul   ebp,ecx
10005dbb:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
10005dbf:	7e 13                	jle    10005dd4 <getSSFNFontRegion(Font*, int, int*, int*)+0x162>
10005dc1:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
10005dc5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
10005dc9:	83 3c 87 00          	cmp    DWORD PTR [edi+eax*4],0x0
10005dcd:	0f 95 04 06          	setne  BYTE PTR [esi+eax*1]
10005dd1:	42                   	inc    edx
10005dd2:	eb e7                	jmp    10005dbb <getSSFNFontRegion(Font*, int, int*, int*)+0x149>
10005dd4:	41                   	inc    ecx
10005dd5:	eb d7                	jmp    10005dae <getSSFNFontRegion(Font*, int, int*, int*)+0x13c>
10005dd7:	50                   	push   eax
10005dd8:	50                   	push   eax
10005dd9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10005ddd:	ff 30                	push   DWORD PTR [eax]
10005ddf:	ff 33                	push   DWORD PTR [ebx]
10005de1:	56                   	push   esi
10005de2:	6a 00                	push   0x0
10005de4:	6a 00                	push   0x0
10005de6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
10005dea:	e8 fc ff ff ff       	call   10005deb <getSSFNFontRegion(Font*, int, int*, int*)+0x179>	10005deb: R_386_PC32	createTightFontRegion(int, int, unsigned char*, int, int)
10005def:	56                   	push   esi
10005df0:	e8 fc ff ff ff       	call   10005df1 <getSSFNFontRegion(Font*, int, int*, int*)+0x17f>	10005df1: R_386_PC32	free
10005df5:	83 c4 14             	add    esp,0x14
10005df8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10005dfc:	e8 fc ff ff ff       	call   10005dfd <getSSFNFontRegion(Font*, int, int*, int*)+0x18b>	10005dfd: R_386_PC32	free
10005e01:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10005e05:	83 c4 5c             	add    esp,0x5c
10005e08:	5b                   	pop    ebx
10005e09:	5e                   	pop    esi
10005e0a:	5f                   	pop    edi
10005e0b:	5d                   	pop    ebp
10005e0c:	c2 04 00             	ret    0x4

10005e0f <kernelPanicHandler(char*)>:
10005e0f:	53                   	push   ebx
10005e10:	bb 06 00 00 00       	mov    ebx,0x6
10005e15:	83 ec 10             	sub    esp,0x10
10005e18:	a1 00 00 00 00       	mov    eax,ds:0x0	10005e19: R_386_32	screen
10005e1d:	8b 10                	mov    edx,DWORD PTR [eax]
10005e1f:	68 80 00 00 00       	push   0x80
10005e24:	50                   	push   eax
10005e25:	ff 52 40             	call   DWORD PTR [edx+0x40]
10005e28:	83 c4 10             	add    esp,0x10
10005e2b:	0f be 83 25 91 00 10 	movsx  eax,BYTE PTR [ebx+0x10009125]	10005e2e: R_386_32	.LC0
10005e32:	84 c0                	test   al,al
10005e34:	74 1c                	je     10005e52 <kernelPanicHandler(char*)+0x43>
10005e36:	83 ec 0c             	sub    esp,0xc
10005e39:	68 ff ff ff 00       	push   0xffffff
10005e3e:	68 80 00 00 00       	push   0x80
10005e43:	50                   	push   eax
10005e44:	6a 02                	push   0x2
10005e46:	53                   	push   ebx
10005e47:	43                   	inc    ebx
10005e48:	e8 fc ff ff ff       	call   10005e49 <kernelPanicHandler(char*)+0x3a>	10005e49: R_386_PC32	drawVGAChar(int, int, int, int, int)
10005e4d:	83 c4 20             	add    esp,0x20
10005e50:	eb d9                	jmp    10005e2b <kernelPanicHandler(char*)+0x1c>
10005e52:	bb 06 00 00 00       	mov    ebx,0x6
10005e57:	0f be 83 32 91 00 10 	movsx  eax,BYTE PTR [ebx+0x10009132]	10005e5a: R_386_32	.LC1
10005e5e:	84 c0                	test   al,al
10005e60:	74 1c                	je     10005e7e <kernelPanicHandler(char*)+0x6f>
10005e62:	83 ec 0c             	sub    esp,0xc
10005e65:	68 80 00 00 00       	push   0x80
10005e6a:	68 ff ff ff 00       	push   0xffffff
10005e6f:	50                   	push   eax
10005e70:	6a 04                	push   0x4
10005e72:	53                   	push   ebx
10005e73:	43                   	inc    ebx
10005e74:	e8 fc ff ff ff       	call   10005e75 <kernelPanicHandler(char*)+0x66>	10005e75: R_386_PC32	drawVGAChar(int, int, int, int, int)
10005e79:	83 c4 20             	add    esp,0x20
10005e7c:	eb d9                	jmp    10005e57 <kernelPanicHandler(char*)+0x48>
10005e7e:	bb 0a 00 00 00       	mov    ebx,0xa
10005e83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10005e87:	0f be 44 18 f6       	movsx  eax,BYTE PTR [eax+ebx*1-0xa]
10005e8c:	84 c0                	test   al,al
10005e8e:	74 1c                	je     10005eac <kernelPanicHandler(char*)+0x9d>
10005e90:	83 ec 0c             	sub    esp,0xc
10005e93:	68 80 00 00 00       	push   0x80
10005e98:	68 ff ff ff 00       	push   0xffffff
10005e9d:	50                   	push   eax
10005e9e:	6a 06                	push   0x6
10005ea0:	53                   	push   ebx
10005ea1:	43                   	inc    ebx
10005ea2:	e8 fc ff ff ff       	call   10005ea3 <kernelPanicHandler(char*)+0x94>	10005ea3: R_386_PC32	drawVGAChar(int, int, int, int, int)
10005ea7:	83 c4 20             	add    esp,0x20
10005eaa:	eb d7                	jmp    10005e83 <kernelPanicHandler(char*)+0x74>
10005eac:	f4                   	hlt    
10005ead:	eb fd                	jmp    10005eac <kernelPanicHandler(char*)+0x9d>

10005eaf <kernelMouseHandler(int, int, int, int)>:
10005eaf:	83 ec 14             	sub    esp,0x14
10005eb2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10005eb6:	6a 00                	push   0x0
10005eb8:	6a 00                	push   0x0
10005eba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10005ebe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10005ec2:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005ec4: R_386_32	screen
10005ec8:	e8 fc ff ff ff       	call   10005ec9 <kernelMouseHandler(int, int, int, int)+0x1a>	10005ec9: R_386_PC32	handleMouse(Video*, int, int, int, int, int)
10005ecd:	83 c4 2c             	add    esp,0x2c
10005ed0:	c3                   	ret    

10005ed1 <kernelSystemCallHandler(regs*)>:
10005ed1:	83 ec 10             	sub    esp,0x10
10005ed4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10005ed8:	ff 70 24             	push   DWORD PTR [eax+0x24]
10005edb:	ff 70 28             	push   DWORD PTR [eax+0x28]
10005ede:	ff 70 20             	push   DWORD PTR [eax+0x20]
10005ee1:	e8 fc ff ff ff       	call   10005ee2 <kernelSystemCallHandler(regs*)+0x11>	10005ee2: R_386_PC32	usermodeLinkHandler(UserCommand, NFrame*, void*)
10005ee6:	83 c4 1c             	add    esp,0x1c
10005ee9:	c3                   	ret    

10005eea <installSystemHooks()>:
10005eea:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005eec: R_386_32	guiPanicHandler
	10005ef0: R_386_32	kernelPanicHandler(char*)
10005ef4:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005ef6: R_386_32	guiMouseHandler
	10005efa: R_386_32	kernelMouseHandler(int, int, int, int)
10005efe:	c7 05 bc 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xbc,0x0	10005f00: R_386_32	systemCallHandlers
	10005f04: R_386_32	kernelSystemCallHandler(regs*)
10005f08:	c3                   	ret    

10005f09 <userlinkCreateWindow(UserCommandArg::CreateWindow*)>:
10005f09:	55                   	push   ebp
10005f0a:	89 e5                	mov    ebp,esp
10005f0c:	57                   	push   edi
10005f0d:	56                   	push   esi
10005f0e:	53                   	push   ebx
10005f0f:	83 ec 2c             	sub    esp,0x2c
10005f12:	c7 45 e0 90 00 00 00 	mov    DWORD PTR [ebp-0x20],0x90
10005f19:	83 ec 0c             	sub    esp,0xc
10005f1c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10005f1f:	e8 fc ff ff ff       	call   10005f20 <userlinkCreateWindow(UserCommandArg::CreateWindow*)+0x17>	10005f20: R_386_PC32	malloc
10005f24:	83 c4 10             	add    esp,0x10
10005f27:	89 c3                	mov    ebx,eax
10005f29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005f2c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
10005f2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005f32:	83 c0 14             	add    eax,0x14
10005f35:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10005f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005f3b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
10005f3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005f41:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
10005f44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005f47:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
10005f4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005f4d:	8b 00                	mov    eax,DWORD PTR [eax]
10005f4f:	83 ec 04             	sub    esp,0x4
10005f52:	57                   	push   edi
10005f53:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10005f56:	56                   	push   esi
10005f57:	51                   	push   ecx
10005f58:	52                   	push   edx
10005f59:	50                   	push   eax
10005f5a:	53                   	push   ebx
10005f5b:	e8 fc ff ff ff       	call   10005f5c <userlinkCreateWindow(UserCommandArg::CreateWindow*)+0x53>	10005f5c: R_386_PC32	NWindow::NWindow(int, int, int, int, char const*, int)
10005f60:	83 c4 20             	add    esp,0x20
10005f63:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10005f66:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10005f69:	8d 65 f4             	lea    esp,[ebp-0xc]
10005f6c:	5b                   	pop    ebx
10005f6d:	5e                   	pop    esi
10005f6e:	5f                   	pop    edi
10005f6f:	5d                   	pop    ebp
10005f70:	c3                   	ret    

10005f71 <userlinkAddChild(NFrame*, UserCommandArg::AddChild*)>:
10005f71:	55                   	push   ebp
10005f72:	89 e5                	mov    ebp,esp
10005f74:	83 ec 08             	sub    esp,0x8
10005f77:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005f7a:	8b 00                	mov    eax,DWORD PTR [eax]
10005f7c:	83 ec 08             	sub    esp,0x8
10005f7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005f82:	50                   	push   eax
10005f83:	e8 fc ff ff ff       	call   10005f84 <userlinkAddChild(NFrame*, UserCommandArg::AddChild*)+0x13>	10005f84: R_386_PC32	NFrame::addChild(NFrame*)
10005f88:	83 c4 10             	add    esp,0x10
10005f8b:	90                   	nop
10005f8c:	c9                   	leave  
10005f8d:	c3                   	ret    

10005f8e <userlinkGetDesktop()>:
10005f8e:	a1 00 00 00 00       	mov    eax,ds:0x0	10005f8f: R_386_32	desktopWindow
10005f93:	c3                   	ret    

10005f94 <userlinkGetCoordinates(NFrame*, UserCommandArg::Coordinates*)>:
10005f94:	55                   	push   ebp
10005f95:	89 e5                	mov    ebp,esp
10005f97:	83 ec 08             	sub    esp,0x8
10005f9a:	83 ec 0c             	sub    esp,0xc
10005f9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005fa0:	e8 fc ff ff ff       	call   10005fa1 <userlinkGetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0xd>	10005fa1: R_386_PC32	NFrame::getAbsX()
10005fa5:	83 c4 10             	add    esp,0x10
10005fa8:	89 c2                	mov    edx,eax
10005faa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005fad:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
10005fb0:	83 ec 0c             	sub    esp,0xc
10005fb3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005fb6:	e8 fc ff ff ff       	call   10005fb7 <userlinkGetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x23>	10005fb7: R_386_PC32	NFrame::getAbsY()
10005fbb:	83 c4 10             	add    esp,0x10
10005fbe:	89 c2                	mov    edx,eax
10005fc0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005fc3:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
10005fc6:	83 ec 0c             	sub    esp,0xc
10005fc9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005fcc:	e8 fc ff ff ff       	call   10005fcd <userlinkGetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x39>	10005fcd: R_386_PC32	NFrame::getX()
10005fd1:	83 c4 10             	add    esp,0x10
10005fd4:	89 c2                	mov    edx,eax
10005fd6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005fd9:	89 10                	mov    DWORD PTR [eax],edx
10005fdb:	83 ec 0c             	sub    esp,0xc
10005fde:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005fe1:	e8 fc ff ff ff       	call   10005fe2 <userlinkGetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x4e>	10005fe2: R_386_PC32	NFrame::getY()
10005fe6:	83 c4 10             	add    esp,0x10
10005fe9:	89 c2                	mov    edx,eax
10005feb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005fee:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10005ff1:	83 ec 0c             	sub    esp,0xc
10005ff4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005ff7:	e8 fc ff ff ff       	call   10005ff8 <userlinkGetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x64>	10005ff8: R_386_PC32	NFrame::getWidth()
10005ffc:	83 c4 10             	add    esp,0x10
10005fff:	89 c2                	mov    edx,eax
10006001:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006004:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10006007:	83 ec 0c             	sub    esp,0xc
1000600a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000600d:	e8 fc ff ff ff       	call   1000600e <userlinkGetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x7a>	1000600e: R_386_PC32	NFrame::getHeight()
10006012:	83 c4 10             	add    esp,0x10
10006015:	89 c2                	mov    edx,eax
10006017:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000601a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
1000601d:	b8 00 00 00 00       	mov    eax,0x0
10006022:	ba 00 00 00 00       	mov    edx,0x0
10006027:	c9                   	leave  
10006028:	c3                   	ret    

10006029 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)>:
10006029:	55                   	push   ebp
1000602a:	89 e5                	mov    ebp,esp
1000602c:	83 ec 08             	sub    esp,0x8
1000602f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006032:	8a 40 1c             	mov    al,BYTE PTR [eax+0x1c]
10006035:	84 c0                	test   al,al
10006037:	75 0a                	jne    10006043 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x1a>
10006039:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000603c:	8a 40 18             	mov    al,BYTE PTR [eax+0x18]
1000603f:	84 c0                	test   al,al
10006041:	74 14                	je     10006057 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x2e>
10006043:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006046:	8b 00                	mov    eax,DWORD PTR [eax]
10006048:	83 ec 08             	sub    esp,0x8
1000604b:	50                   	push   eax
1000604c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000604f:	e8 fc ff ff ff       	call   10006050 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x27>	10006050: R_386_PC32	NFrame::setX(int)
10006054:	83 c4 10             	add    esp,0x10
10006057:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000605a:	8a 40 1c             	mov    al,BYTE PTR [eax+0x1c]
1000605d:	84 c0                	test   al,al
1000605f:	75 0a                	jne    1000606b <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x42>
10006061:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006064:	8a 40 19             	mov    al,BYTE PTR [eax+0x19]
10006067:	84 c0                	test   al,al
10006069:	74 15                	je     10006080 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x57>
1000606b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000606e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10006071:	83 ec 08             	sub    esp,0x8
10006074:	50                   	push   eax
10006075:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006078:	e8 fc ff ff ff       	call   10006079 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x50>	10006079: R_386_PC32	NFrame::setY(int)
1000607d:	83 c4 10             	add    esp,0x10
10006080:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006083:	8a 40 1c             	mov    al,BYTE PTR [eax+0x1c]
10006086:	84 c0                	test   al,al
10006088:	75 0a                	jne    10006094 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x6b>
1000608a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000608d:	8a 40 1a             	mov    al,BYTE PTR [eax+0x1a]
10006090:	84 c0                	test   al,al
10006092:	74 15                	je     100060a9 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x80>
10006094:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006097:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
1000609a:	83 ec 08             	sub    esp,0x8
1000609d:	50                   	push   eax
1000609e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100060a1:	e8 fc ff ff ff       	call   100060a2 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x79>	100060a2: R_386_PC32	NFrame::setWidth(int)
100060a6:	83 c4 10             	add    esp,0x10
100060a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100060ac:	8a 40 1c             	mov    al,BYTE PTR [eax+0x1c]
100060af:	84 c0                	test   al,al
100060b1:	75 0a                	jne    100060bd <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x94>
100060b3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100060b6:	8a 40 1b             	mov    al,BYTE PTR [eax+0x1b]
100060b9:	84 c0                	test   al,al
100060bb:	74 15                	je     100060d2 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0xa9>
100060bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100060c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100060c3:	83 ec 08             	sub    esp,0x8
100060c6:	50                   	push   eax
100060c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100060ca:	e8 fc ff ff ff       	call   100060cb <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0xa2>	100060cb: R_386_PC32	NFrame::setHeight(int)
100060cf:	83 c4 10             	add    esp,0x10
100060d2:	83 ec 0c             	sub    esp,0xc
100060d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100060d8:	e8 fc ff ff ff       	call   100060d9 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0xb0>	100060d9: R_386_PC32	NFrame::getAbsX()
100060dd:	83 c4 10             	add    esp,0x10
100060e0:	89 c2                	mov    edx,eax
100060e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100060e5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
100060e8:	83 ec 0c             	sub    esp,0xc
100060eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100060ee:	e8 fc ff ff ff       	call   100060ef <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0xc6>	100060ef: R_386_PC32	NFrame::getAbsY()
100060f3:	83 c4 10             	add    esp,0x10
100060f6:	89 c2                	mov    edx,eax
100060f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100060fb:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
100060fe:	83 ec 0c             	sub    esp,0xc
10006101:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006104:	e8 fc ff ff ff       	call   10006105 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0xdc>	10006105: R_386_PC32	NFrame::getX()
10006109:	83 c4 10             	add    esp,0x10
1000610c:	89 c2                	mov    edx,eax
1000610e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006111:	89 10                	mov    DWORD PTR [eax],edx
10006113:	83 ec 0c             	sub    esp,0xc
10006116:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006119:	e8 fc ff ff ff       	call   1000611a <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0xf1>	1000611a: R_386_PC32	NFrame::getY()
1000611e:	83 c4 10             	add    esp,0x10
10006121:	89 c2                	mov    edx,eax
10006123:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006126:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10006129:	83 ec 0c             	sub    esp,0xc
1000612c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000612f:	e8 fc ff ff ff       	call   10006130 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x107>	10006130: R_386_PC32	NFrame::getWidth()
10006134:	83 c4 10             	add    esp,0x10
10006137:	89 c2                	mov    edx,eax
10006139:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000613c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
1000613f:	83 ec 0c             	sub    esp,0xc
10006142:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006145:	e8 fc ff ff ff       	call   10006146 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x11d>	10006146: R_386_PC32	NFrame::getHeight()
1000614a:	83 c4 10             	add    esp,0x10
1000614d:	89 c2                	mov    edx,eax
1000614f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006152:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
10006155:	b8 00 00 00 00       	mov    eax,0x0
1000615a:	ba 00 00 00 00       	mov    edx,0x0
1000615f:	c9                   	leave  
10006160:	c3                   	ret    

10006161 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)>:
10006161:	55                   	push   ebp
10006162:	89 e5                	mov    ebp,esp
10006164:	83 ec 08             	sub    esp,0x8
10006167:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000616a:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
1000616d:	84 c0                	test   al,al
1000616f:	74 7a                	je     100061eb <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x8a>
10006171:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006174:	8a 00                	mov    al,BYTE PTR [eax]
10006176:	84 c0                	test   al,al
10006178:	74 19                	je     10006193 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x32>
1000617a:	83 ec 0c             	sub    esp,0xc
1000617d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006180:	e8 fc ff ff ff       	call   10006181 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x20>	10006181: R_386_PC32	NFrame::isFullscreen()
10006185:	83 c4 10             	add    esp,0x10
10006188:	83 f0 01             	xor    eax,0x1
1000618b:	84 c0                	test   al,al
1000618d:	74 04                	je     10006193 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x32>
1000618f:	b0 01                	mov    al,0x1
10006191:	eb 02                	jmp    10006195 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x34>
10006193:	b0 00                	mov    al,0x0
10006195:	84 c0                	test   al,al
10006197:	74 14                	je     100061ad <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x4c>
10006199:	a1 00 00 00 00       	mov    eax,ds:0x0	1000619a: R_386_32	screen
1000619e:	83 ec 08             	sub    esp,0x8
100061a1:	50                   	push   eax
100061a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100061a5:	e8 fc ff ff ff       	call   100061a6 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x45>	100061a6: R_386_PC32	NFrame::toggleFullscreen(Video*)
100061aa:	83 c4 10             	add    esp,0x10
100061ad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100061b0:	8a 00                	mov    al,BYTE PTR [eax]
100061b2:	83 f0 01             	xor    eax,0x1
100061b5:	84 c0                	test   al,al
100061b7:	74 16                	je     100061cf <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x6e>
100061b9:	83 ec 0c             	sub    esp,0xc
100061bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100061bf:	e8 fc ff ff ff       	call   100061c0 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x5f>	100061c0: R_386_PC32	NFrame::isFullscreen()
100061c4:	83 c4 10             	add    esp,0x10
100061c7:	84 c0                	test   al,al
100061c9:	74 04                	je     100061cf <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x6e>
100061cb:	b0 01                	mov    al,0x1
100061cd:	eb 02                	jmp    100061d1 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x70>
100061cf:	b0 00                	mov    al,0x0
100061d1:	84 c0                	test   al,al
100061d3:	74 34                	je     10006209 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0xa8>
100061d5:	a1 00 00 00 00       	mov    eax,ds:0x0	100061d6: R_386_32	screen
100061da:	83 ec 08             	sub    esp,0x8
100061dd:	50                   	push   eax
100061de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100061e1:	e8 fc ff ff ff       	call   100061e2 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x81>	100061e2: R_386_PC32	NFrame::toggleFullscreen(Video*)
100061e6:	83 c4 10             	add    esp,0x10
100061e9:	eb 1e                	jmp    10006209 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0xa8>
100061eb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100061ee:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
100061f1:	84 c0                	test   al,al
100061f3:	74 14                	je     10006209 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0xa8>
100061f5:	a1 00 00 00 00       	mov    eax,ds:0x0	100061f6: R_386_32	screen
100061fa:	83 ec 08             	sub    esp,0x8
100061fd:	50                   	push   eax
100061fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006201:	e8 fc ff ff ff       	call   10006202 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0xa1>	10006202: R_386_PC32	NFrame::toggleFullscreen(Video*)
10006206:	83 c4 10             	add    esp,0x10
10006209:	83 ec 0c             	sub    esp,0xc
1000620c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000620f:	e8 fc ff ff ff       	call   10006210 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0xaf>	10006210: R_386_PC32	NFrame::isFullscreen()
10006214:	83 c4 10             	add    esp,0x10
10006217:	88 c2                	mov    dl,al
10006219:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000621c:	88 10                	mov    BYTE PTR [eax],dl
1000621e:	b8 00 00 00 00       	mov    eax,0x0
10006223:	ba 00 00 00 00       	mov    edx,0x0
10006228:	c9                   	leave  
10006229:	c3                   	ret    

1000622a <userlinkHide(NFrame*, UserCommandArg::Hide*)>:
1000622a:	55                   	push   ebp
1000622b:	89 e5                	mov    ebp,esp
1000622d:	83 ec 08             	sub    esp,0x8
10006230:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006233:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
10006236:	84 c0                	test   al,al
10006238:	74 17                	je     10006251 <userlinkHide(NFrame*, UserCommandArg::Hide*)+0x27>
1000623a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000623d:	8a 00                	mov    al,BYTE PTR [eax]
1000623f:	0f b6 c0             	movzx  eax,al
10006242:	83 ec 08             	sub    esp,0x8
10006245:	50                   	push   eax
10006246:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006249:	e8 fc ff ff ff       	call   1000624a <userlinkHide(NFrame*, UserCommandArg::Hide*)+0x20>	1000624a: R_386_PC32	NFrame::hide(bool)
1000624e:	83 c4 10             	add    esp,0x10
10006251:	83 ec 0c             	sub    esp,0xc
10006254:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006257:	e8 fc ff ff ff       	call   10006258 <userlinkHide(NFrame*, UserCommandArg::Hide*)+0x2e>	10006258: R_386_PC32	NFrame::isHidden()
1000625c:	83 c4 10             	add    esp,0x10
1000625f:	88 c2                	mov    dl,al
10006261:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006264:	88 10                	mov    BYTE PTR [eax],dl
10006266:	83 ec 0c             	sub    esp,0xc
10006269:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000626c:	e8 fc ff ff ff       	call   1000626d <userlinkHide(NFrame*, UserCommandArg::Hide*)+0x43>	1000626d: R_386_PC32	NFrame::isHiddenOverall()
10006271:	83 c4 10             	add    esp,0x10
10006274:	88 c2                	mov    dl,al
10006276:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006279:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
1000627c:	b8 00 00 00 00       	mov    eax,0x0
10006281:	ba 00 00 00 00       	mov    edx,0x0
10006286:	c9                   	leave  
10006287:	c3                   	ret    

10006288 <userlinkRaise(NFrame*)>:
10006288:	55                   	push   ebp
10006289:	89 e5                	mov    ebp,esp
1000628b:	83 ec 08             	sub    esp,0x8
1000628e:	83 ec 0c             	sub    esp,0xc
10006291:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006294:	e8 fc ff ff ff       	call   10006295 <userlinkRaise(NFrame*)+0xd>	10006295: R_386_PC32	NFrame::raise()
10006299:	83 c4 10             	add    esp,0x10
1000629c:	b8 00 00 00 00       	mov    eax,0x0
100062a1:	ba 00 00 00 00       	mov    edx,0x0
100062a6:	c9                   	leave  
100062a7:	c3                   	ret    

100062a8 <userlinkInvalidate(NFrame*)>:
100062a8:	55                   	push   ebp
100062a9:	89 e5                	mov    ebp,esp
100062ab:	83 ec 08             	sub    esp,0x8
100062ae:	83 ec 0c             	sub    esp,0xc
100062b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100062b4:	e8 fc ff ff ff       	call   100062b5 <userlinkInvalidate(NFrame*)+0xd>	100062b5: R_386_PC32	NFrame::tryInvalidate()
100062b9:	83 c4 10             	add    esp,0x10
100062bc:	b8 00 00 00 00       	mov    eax,0x0
100062c1:	ba 00 00 00 00       	mov    edx,0x0
100062c6:	c9                   	leave  
100062c7:	c3                   	ret    

100062c8 <usermodeLinkHandler(UserCommand, NFrame*, void*)>:
100062c8:	55                   	push   ebp
100062c9:	89 e5                	mov    ebp,esp
100062cb:	83 ec 08             	sub    esp,0x8
100062ce:	83 7d 08 08          	cmp    DWORD PTR [ebp+0x8],0x8
100062d2:	0f 87 aa 00 00 00    	ja     10006382 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xba>
100062d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100062db:	c1 e0 02             	shl    eax,0x2
100062de:	05 78 91 00 10       	add    eax,0x10009178	100062df: R_386_32	.text
100062e3:	8b 00                	mov    eax,DWORD PTR [eax]
100062e5:	ff e0                	jmp    eax
100062e7:	83 ec 0c             	sub    esp,0xc
100062ea:	ff 75 10             	push   DWORD PTR [ebp+0x10]
100062ed:	e8 fc ff ff ff       	call   100062ee <usermodeLinkHandler(UserCommand, NFrame*, void*)+0x26>	100062ee: R_386_PC32	userlinkCreateWindow(UserCommandArg::CreateWindow*)
100062f2:	83 c4 10             	add    esp,0x10
100062f5:	99                   	cdq    
100062f6:	e9 91 00 00 00       	jmp    1000638c <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xc4>
100062fb:	83 ec 08             	sub    esp,0x8
100062fe:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10006301:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006304:	e8 fc ff ff ff       	call   10006305 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0x3d>	10006305: R_386_PC32	userlinkAddChild(NFrame*, UserCommandArg::AddChild*)
10006309:	83 c4 10             	add    esp,0x10
1000630c:	eb 7e                	jmp    1000638c <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xc4>
1000630e:	e8 fc ff ff ff       	call   1000630f <usermodeLinkHandler(UserCommand, NFrame*, void*)+0x47>	1000630f: R_386_PC32	userlinkGetDesktop()
10006313:	99                   	cdq    
10006314:	eb 76                	jmp    1000638c <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xc4>
10006316:	83 ec 08             	sub    esp,0x8
10006319:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000631c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000631f:	e8 fc ff ff ff       	call   10006320 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0x58>	10006320: R_386_PC32	userlinkGetCoordinates(NFrame*, UserCommandArg::Coordinates*)
10006324:	83 c4 10             	add    esp,0x10
10006327:	eb 63                	jmp    1000638c <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xc4>
10006329:	83 ec 08             	sub    esp,0x8
1000632c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000632f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006332:	e8 fc ff ff ff       	call   10006333 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0x6b>	10006333: R_386_PC32	userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)
10006337:	83 c4 10             	add    esp,0x10
1000633a:	eb 50                	jmp    1000638c <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xc4>
1000633c:	83 ec 08             	sub    esp,0x8
1000633f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10006342:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006345:	e8 fc ff ff ff       	call   10006346 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0x7e>	10006346: R_386_PC32	userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)
1000634a:	83 c4 10             	add    esp,0x10
1000634d:	eb 3d                	jmp    1000638c <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xc4>
1000634f:	83 ec 08             	sub    esp,0x8
10006352:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10006355:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006358:	e8 fc ff ff ff       	call   10006359 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0x91>	10006359: R_386_PC32	userlinkHide(NFrame*, UserCommandArg::Hide*)
1000635d:	83 c4 10             	add    esp,0x10
10006360:	eb 2a                	jmp    1000638c <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xc4>
10006362:	83 ec 0c             	sub    esp,0xc
10006365:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006368:	e8 fc ff ff ff       	call   10006369 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xa1>	10006369: R_386_PC32	userlinkRaise(NFrame*)
1000636d:	83 c4 10             	add    esp,0x10
10006370:	eb 1a                	jmp    1000638c <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xc4>
10006372:	83 ec 0c             	sub    esp,0xc
10006375:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006378:	e8 fc ff ff ff       	call   10006379 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xb1>	10006379: R_386_PC32	userlinkInvalidate(NFrame*)
1000637d:	83 c4 10             	add    esp,0x10
10006380:	eb 0a                	jmp    1000638c <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xc4>
10006382:	b8 ff ff ff ff       	mov    eax,0xffffffff
10006387:	ba ff ff ff ff       	mov    edx,0xffffffff
1000638c:	c9                   	leave  
1000638d:	c3                   	ret    

1000638e <drawVGAChar(int, int, int, int, int)>:
1000638e:	55                   	push   ebp
1000638f:	57                   	push   edi
10006390:	56                   	push   esi
10006391:	53                   	push   ebx
10006392:	83 ec 1c             	sub    esp,0x1c
10006395:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10006399:	c1 e0 04             	shl    eax,0x4
1000639c:	89 04 24             	mov    DWORD PTR [esp],eax
1000639f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100063a3:	c1 e0 04             	shl    eax,0x4
100063a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100063aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100063ae:	c1 e0 03             	shl    eax,0x3
100063b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100063b5:	31 db                	xor    ebx,ebx
100063b7:	8b 04 24             	mov    eax,DWORD PTR [esp]
100063ba:	8a 84 18 00 00 00 00 	mov    al,BYTE PTR [eax+ebx*1+0x0]	100063bd: R_386_32	cp
100063c1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
100063c5:	8d 2c 1f             	lea    ebp,[edi+ebx*1]
100063c8:	31 f6                	xor    esi,esi
100063ca:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100063cc: R_386_32	screen
100063d0:	8b 0a                	mov    ecx,DWORD PTR [edx]
100063d2:	8b 79 24             	mov    edi,DWORD PTR [ecx+0x24]
100063d5:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
100063d9:	84 c0                	test   al,al
100063db:	79 04                	jns    100063e1 <drawVGAChar(int, int, int, int, int)+0x53>
100063dd:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
100063e1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100063e5:	51                   	push   ecx
100063e6:	55                   	push   ebp
100063e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100063eb:	8d 0c 06             	lea    ecx,[esi+eax*1]
100063ee:	51                   	push   ecx
100063ef:	52                   	push   edx
100063f0:	ff d7                	call   edi
100063f2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
100063f6:	d1 e0                	shl    eax,1
100063f8:	46                   	inc    esi
100063f9:	83 c4 10             	add    esp,0x10
100063fc:	83 fe 08             	cmp    esi,0x8
100063ff:	75 c9                	jne    100063ca <drawVGAChar(int, int, int, int, int)+0x3c>
10006401:	43                   	inc    ebx
10006402:	83 fb 10             	cmp    ebx,0x10
10006405:	75 b0                	jne    100063b7 <drawVGAChar(int, int, int, int, int)+0x29>
10006407:	83 c4 1c             	add    esp,0x1c
1000640a:	5b                   	pop    ebx
1000640b:	5e                   	pop    esi
1000640c:	5f                   	pop    edi
1000640d:	5d                   	pop    ebp
1000640e:	c3                   	ret    

1000640f <videoDrawRect(Video*, int, int, int, int, unsigned int)>:
1000640f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10006413:	8b 00                	mov    eax,DWORD PTR [eax]
10006415:	ff 60 28             	jmp    DWORD PTR [eax+0x28]

10006418 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)>:
10006418:	55                   	push   ebp
10006419:	57                   	push   edi
1000641a:	56                   	push   esi
1000641b:	53                   	push   ebx
1000641c:	83 ec 28             	sub    esp,0x28
1000641f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10006423:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10006427:	53                   	push   ebx
10006428:	e8 fc ff ff ff       	call   10006429 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x11>	10006429: R_386_PC32	Video::getWidth()
1000642d:	83 c4 10             	add    esp,0x10
10006430:	39 f0                	cmp    eax,esi
10006432:	0f 8c df 00 00 00    	jl     10006517 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xff>
10006438:	83 ec 0c             	sub    esp,0xc
1000643b:	53                   	push   ebx
1000643c:	e8 fc ff ff ff       	call   1000643d <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x25>	1000643d: R_386_PC32	Video::getHeight()
10006441:	83 c4 10             	add    esp,0x10
10006444:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
10006448:	0f 8c c9 00 00 00    	jl     10006517 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xff>
1000644e:	89 f7                	mov    edi,esi
10006450:	03 7c 24 3c          	add    edi,DWORD PTR [esp+0x3c]
10006454:	0f 88 bd 00 00 00    	js     10006517 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xff>
1000645a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
1000645e:	03 6c 24 40          	add    ebp,DWORD PTR [esp+0x40]
10006462:	0f 88 af 00 00 00    	js     10006517 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xff>
10006468:	85 f6                	test   esi,esi
1000646a:	79 06                	jns    10006472 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x5a>
1000646c:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
10006470:	31 f6                	xor    esi,esi
10006472:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10006477:	79 0c                	jns    10006485 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x6d>
10006479:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
1000647d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10006485:	83 ec 0c             	sub    esp,0xc
10006488:	53                   	push   ebx
10006489:	e8 fc ff ff ff       	call   1000648a <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x72>	1000648a: R_386_PC32	Video::getWidth()
1000648e:	83 c4 10             	add    esp,0x10
10006491:	39 c7                	cmp    edi,eax
10006493:	7e 12                	jle    100064a7 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x8f>
10006495:	83 ec 0c             	sub    esp,0xc
10006498:	53                   	push   ebx
10006499:	e8 fc ff ff ff       	call   1000649a <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x82>	1000649a: R_386_PC32	Video::getWidth()
1000649e:	29 f0                	sub    eax,esi
100064a0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
100064a4:	83 c4 10             	add    esp,0x10
100064a7:	83 ec 0c             	sub    esp,0xc
100064aa:	53                   	push   ebx
100064ab:	e8 fc ff ff ff       	call   100064ac <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x94>	100064ac: R_386_PC32	Video::getHeight()
100064b0:	83 c4 10             	add    esp,0x10
100064b3:	39 c5                	cmp    ebp,eax
100064b5:	7e 14                	jle    100064cb <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xb3>
100064b7:	83 ec 0c             	sub    esp,0xc
100064ba:	53                   	push   ebx
100064bb:	e8 fc ff ff ff       	call   100064bc <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xa4>	100064bc: R_386_PC32	Video::getHeight()
100064c0:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
100064c4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100064c8:	83 c4 10             	add    esp,0x10
100064cb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
100064cf:	89 f8                	mov    eax,edi
100064d1:	2b 44 24 38          	sub    eax,DWORD PTR [esp+0x38]
100064d5:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
100064d9:	7e 3c                	jle    10006517 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xff>
100064db:	8d 14 37             	lea    edx,[edi+esi*1]
100064de:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100064e2:	80 e2 01             	and    dl,0x1
100064e5:	74 05                	je     100064ec <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xd4>
100064e7:	35 ff ff ff 00       	xor    eax,0xffffff
100064ec:	31 ed                	xor    ebp,ebp
100064ee:	39 6c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebp
100064f2:	7e 20                	jle    10006514 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xfc>
100064f4:	8b 13                	mov    edx,DWORD PTR [ebx]
100064f6:	8d 4c 35 00          	lea    ecx,[ebp+esi*1+0x0]
100064fa:	50                   	push   eax
100064fb:	45                   	inc    ebp
100064fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10006500:	57                   	push   edi
10006501:	51                   	push   ecx
10006502:	53                   	push   ebx
10006503:	ff 52 24             	call   DWORD PTR [edx+0x24]
10006506:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000650a:	83 c4 10             	add    esp,0x10
1000650d:	35 ff ff ff 00       	xor    eax,0xffffff
10006512:	eb da                	jmp    100064ee <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xd6>
10006514:	47                   	inc    edi
10006515:	eb b8                	jmp    100064cf <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xb7>
10006517:	83 c4 1c             	add    esp,0x1c
1000651a:	5b                   	pop    ebx
1000651b:	5e                   	pop    esi
1000651c:	5f                   	pop    edi
1000651d:	5d                   	pop    ebp
1000651e:	c3                   	ret    

1000651f <videoSaveAreaUnderCursor(Video*, int, int)>:
1000651f:	55                   	push   ebp
10006520:	57                   	push   edi
10006521:	56                   	push   esi
10006522:	53                   	push   ebx
10006523:	31 db                	xor    ebx,ebx
10006525:	83 ec 1c             	sub    esp,0x1c
10006528:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
1000652c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
10006530:	83 ec 0c             	sub    esp,0xc
10006533:	57                   	push   edi
10006534:	e8 fc ff ff ff       	call   10006535 <videoSaveAreaUnderCursor(Video*, int, int)+0x16>	10006535: R_386_PC32	Video::getHeight()
10006539:	83 c4 10             	add    esp,0x10
1000653c:	39 c6                	cmp    esi,eax
1000653e:	7d 45                	jge    10006585 <videoSaveAreaUnderCursor(Video*, int, int)+0x66>
10006540:	31 ed                	xor    ebp,ebp
10006542:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10006546:	83 ec 0c             	sub    esp,0xc
10006549:	01 ea                	add    edx,ebp
1000654b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
1000654f:	57                   	push   edi
10006550:	e8 fc ff ff ff       	call   10006551 <videoSaveAreaUnderCursor(Video*, int, int)+0x32>	10006551: R_386_PC32	Video::getWidth()
10006555:	83 c4 10             	add    esp,0x10
10006558:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
1000655c:	39 d0                	cmp    eax,edx
1000655e:	7e 19                	jle    10006579 <videoSaveAreaUnderCursor(Video*, int, int)+0x5a>
10006560:	50                   	push   eax
10006561:	8b 07                	mov    eax,DWORD PTR [edi]
10006563:	56                   	push   esi
10006564:	52                   	push   edx
10006565:	57                   	push   edi
10006566:	ff 50 34             	call   DWORD PTR [eax+0x34]
10006569:	83 c4 10             	add    esp,0x10
1000656c:	89 84 ab 00 00 00 00 	mov    DWORD PTR [ebx+ebp*4+0x0],eax	1000656f: R_386_32	cursorBuffer
10006573:	45                   	inc    ebp
10006574:	83 fd 20             	cmp    ebp,0x20
10006577:	75 c9                	jne    10006542 <videoSaveAreaUnderCursor(Video*, int, int)+0x23>
10006579:	46                   	inc    esi
1000657a:	83 eb 80             	sub    ebx,0xffffff80
1000657d:	81 fb 00 10 00 00    	cmp    ebx,0x1000
10006583:	75 ab                	jne    10006530 <videoSaveAreaUnderCursor(Video*, int, int)+0x11>
10006585:	83 c4 1c             	add    esp,0x1c
10006588:	b8 00 00 00 00       	mov    eax,0x0	10006589: R_386_32	cursorBuffer
1000658d:	5b                   	pop    ebx
1000658e:	5e                   	pop    esi
1000658f:	5f                   	pop    edi
10006590:	5d                   	pop    ebp
10006591:	c3                   	ret    

10006592 <videoPutpixel(Video*, int, int, unsigned int)>:
10006592:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10006596:	8b 00                	mov    eax,DWORD PTR [eax]
10006598:	ff 60 24             	jmp    DWORD PTR [eax+0x24]

1000659b <videoDrawCursor(Video*, int, int, unsigned int*)>:
1000659b:	83 ec 18             	sub    esp,0x18
1000659e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100065a2:	8b 10                	mov    edx,DWORD PTR [eax]
100065a4:	6a 00                	push   0x0
100065a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100065aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100065ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100065b2:	50                   	push   eax
100065b3:	ff 52 30             	call   DWORD PTR [edx+0x30]
100065b6:	83 c4 2c             	add    esp,0x2c
100065b9:	c3                   	ret    

100065ba <Region::Region()>:
100065ba:	55                   	push   ebp
100065bb:	89 e5                	mov    ebp,esp
100065bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065c0:	c7 40 04 39 94 60 f9 	mov    DWORD PTR [eax+0x4],0xf9609439
100065c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065ca:	c7 40 08 72 28 c1 f2 	mov    DWORD PTR [eax+0x8],0xf2c12872
100065d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065d4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100065da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065dd:	c7 40 0c ab bc 21 ec 	mov    DWORD PTR [eax+0xc],0xec21bcab
100065e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065e7:	c7 40 10 e4 50 82 e5 	mov    DWORD PTR [eax+0x10],0xe58250e4
100065ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065f1:	c7 40 14 1d e5 e2 de 	mov    DWORD PTR [eax+0x14],0xdee2e51d
100065f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065fb:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
100065ff:	90                   	nop
10006600:	5d                   	pop    ebp
10006601:	c3                   	ret    

10006602 <Region::Region(int, int, int, int)>:
10006602:	55                   	push   ebp
10006603:	89 e5                	mov    ebp,esp
10006605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006608:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
1000660b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000660e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006611:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10006614:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10006617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000661a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10006620:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006623:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
1000662a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000662d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10006630:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
10006633:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006636:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10006639:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
1000663c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000663f:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
10006643:	90                   	nop
10006644:	5d                   	pop    ebp
10006645:	c3                   	ret    

10006646 <FontStyle::FontStyle(char const*, int, int)>:
10006646:	55                   	push   ebp
10006647:	89 e5                	mov    ebp,esp
10006649:	83 ec 08             	sub    esp,0x8
1000664c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000664f:	83 ec 08             	sub    esp,0x8
10006652:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006655:	50                   	push   eax
10006656:	e8 fc ff ff ff       	call   10006657 <FontStyle::FontStyle(char const*, int, int)+0x11>	10006657: R_386_PC32	strcpy
1000665b:	83 c4 10             	add    esp,0x10
1000665e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006661:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10006664:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
1000666a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000666d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10006670:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
10006676:	90                   	nop
10006677:	c9                   	leave  
10006678:	c3                   	ret    
10006679:	90                   	nop

1000667a <NFrame::Graphics::Graphics(Video*, Region)>:
1000667a:	55                   	push   ebp
1000667b:	89 e5                	mov    ebp,esp
1000667d:	57                   	push   edi
1000667e:	56                   	push   esi
1000667f:	53                   	push   ebx
10006680:	83 ec 0c             	sub    esp,0xc
10006683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006686:	83 c0 04             	add    eax,0x4
10006689:	83 ec 0c             	sub    esp,0xc
1000668c:	50                   	push   eax
1000668d:	e8 fc ff ff ff       	call   1000668e <NFrame::Graphics::Graphics(Video*, Region)+0x14>	1000668e: R_386_PC32	Region::Region()
10006692:	83 c4 10             	add    esp,0x10
10006695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006698:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000669b:	89 10                	mov    DWORD PTR [eax],edx
1000669d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100066a0:	8d 58 04             	lea    ebx,[eax+0x4]
100066a3:	8d 45 10             	lea    eax,[ebp+0x10]
100066a6:	ba 19 00 00 00       	mov    edx,0x19
100066ab:	89 df                	mov    edi,ebx
100066ad:	89 c6                	mov    esi,eax
100066af:	89 d1                	mov    ecx,edx
100066b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100066b3:	90                   	nop
100066b4:	8d 65 f4             	lea    esp,[ebp-0xc]
100066b7:	5b                   	pop    ebx
100066b8:	5e                   	pop    esi
100066b9:	5f                   	pop    edi
100066ba:	5d                   	pop    ebp
100066bb:	c3                   	ret    

100066bc <NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)>:
100066bc:	55                   	push   ebp
100066bd:	89 e5                	mov    ebp,esp
100066bf:	57                   	push   edi
100066c0:	56                   	push   esi
100066c1:	53                   	push   ebx
100066c2:	83 ec 3c             	sub    esp,0x3c
100066c5:	8d 45 cc             	lea    eax,[ebp-0x34]
100066c8:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
100066cb:	83 ec 04             	sub    esp,0x4
100066ce:	83 ec 1c             	sub    esp,0x1c
100066d1:	89 e0                	mov    eax,esp
100066d3:	89 c3                	mov    ebx,eax
100066d5:	8d 45 0c             	lea    eax,[ebp+0xc]
100066d8:	ba 07 00 00 00       	mov    edx,0x7
100066dd:	89 df                	mov    edi,ebx
100066df:	89 c6                	mov    esi,eax
100066e1:	89 d1                	mov    ecx,edx
100066e3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100066e5:	83 ec 1c             	sub    esp,0x1c
100066e8:	89 e0                	mov    eax,esp
100066ea:	89 c3                	mov    ebx,eax
100066ec:	8d 45 2c             	lea    eax,[ebp+0x2c]
100066ef:	ba 07 00 00 00       	mov    edx,0x7
100066f4:	89 df                	mov    edi,ebx
100066f6:	89 c6                	mov    esi,eax
100066f8:	89 d1                	mov    ecx,edx
100066fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100066fc:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100066ff:	e8 fc ff ff ff       	call   10006700 <NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)+0x44>	10006700: R_386_PC32	getRegionIntersection(Region, Region)
10006704:	83 c4 3c             	add    esp,0x3c
10006707:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
1000670a:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
1000670d:	83 ec 0c             	sub    esp,0xc
10006710:	ff 75 48             	push   DWORD PTR [ebp+0x48]
10006713:	83 ec 1c             	sub    esp,0x1c
10006716:	89 e0                	mov    eax,esp
10006718:	89 c3                	mov    ebx,eax
1000671a:	8d 45 cc             	lea    eax,[ebp-0x34]
1000671d:	ba 07 00 00 00       	mov    edx,0x7
10006722:	89 df                	mov    edi,ebx
10006724:	89 c6                	mov    esi,eax
10006726:	89 d1                	mov    ecx,edx
10006728:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000672a:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000672d:	e8 fc ff ff ff       	call   1000672e <NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)+0x72>	1000672e: R_386_PC32	fillRegion(Video*, Region, unsigned int)
10006732:	83 c4 30             	add    esp,0x30
10006735:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006738:	83 ec 0c             	sub    esp,0xc
1000673b:	50                   	push   eax
1000673c:	e8 fc ff ff ff       	call   1000673d <NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)+0x81>	1000673d: R_386_PC32	free
10006741:	83 c4 10             	add    esp,0x10
10006744:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10006747:	83 ec 0c             	sub    esp,0xc
1000674a:	50                   	push   eax
1000674b:	e8 fc ff ff ff       	call   1000674c <NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)+0x90>	1000674c: R_386_PC32	free
10006750:	83 c4 10             	add    esp,0x10
10006753:	90                   	nop
10006754:	8d 65 f4             	lea    esp,[ebp-0xc]
10006757:	5b                   	pop    ebx
10006758:	5e                   	pop    esi
10006759:	5f                   	pop    edi
1000675a:	5d                   	pop    ebp
1000675b:	c3                   	ret    

1000675c <NFrame::markRegionAsDirty(Region)>:
1000675c:	55                   	push   ebp
1000675d:	89 e5                	mov    ebp,esp
1000675f:	57                   	push   edi
10006760:	56                   	push   esi
10006761:	53                   	push   ebx
10006762:	83 ec 3c             	sub    esp,0x3c
10006765:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006768:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
1000676b:	85 c0                	test   eax,eax
1000676d:	74 2d                	je     1000679c <NFrame::markRegionAsDirty(Region)+0x40>
1000676f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006772:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10006775:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10006778:	83 ec 1c             	sub    esp,0x1c
1000677b:	89 e0                	mov    eax,esp
1000677d:	89 c3                	mov    ebx,eax
1000677f:	8d 45 0c             	lea    eax,[ebp+0xc]
10006782:	ba 07 00 00 00       	mov    edx,0x7
10006787:	89 df                	mov    edi,ebx
10006789:	89 c6                	mov    esi,eax
1000678b:	89 d1                	mov    ecx,edx
1000678d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000678f:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10006792:	e8 fc ff ff ff       	call   10006793 <NFrame::markRegionAsDirty(Region)+0x37>	10006793: R_386_PC32	NFrame::markRegionAsDirty(Region)
10006797:	83 c4 20             	add    esp,0x20
1000679a:	eb 6b                	jmp    10006807 <NFrame::markRegionAsDirty(Region)+0xab>
1000679c:	8d 45 cc             	lea    eax,[ebp-0x34]
1000679f:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
100067a2:	83 ec 04             	sub    esp,0x4
100067a5:	83 ec 1c             	sub    esp,0x1c
100067a8:	89 e0                	mov    eax,esp
100067aa:	89 c3                	mov    ebx,eax
100067ac:	8d 45 0c             	lea    eax,[ebp+0xc]
100067af:	ba 07 00 00 00       	mov    edx,0x7
100067b4:	89 df                	mov    edi,ebx
100067b6:	89 c6                	mov    esi,eax
100067b8:	89 d1                	mov    ecx,edx
100067ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100067bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100067bf:	83 ec 1c             	sub    esp,0x1c
100067c2:	89 e2                	mov    edx,esp
100067c4:	8d 58 4c             	lea    ebx,[eax+0x4c]
100067c7:	b8 07 00 00 00       	mov    eax,0x7
100067cc:	89 d7                	mov    edi,edx
100067ce:	89 de                	mov    esi,ebx
100067d0:	89 c1                	mov    ecx,eax
100067d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100067d4:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100067d7:	e8 fc ff ff ff       	call   100067d8 <NFrame::markRegionAsDirty(Region)+0x7c>	100067d8: R_386_PC32	getRegionUnion(Region, Region)
100067dc:	83 c4 3c             	add    esp,0x3c
100067df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100067e2:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
100067e5:	83 ec 0c             	sub    esp,0xc
100067e8:	50                   	push   eax
100067e9:	e8 fc ff ff ff       	call   100067ea <NFrame::markRegionAsDirty(Region)+0x8e>	100067ea: R_386_PC32	free
100067ee:	83 c4 10             	add    esp,0x10
100067f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100067f4:	8d 58 4c             	lea    ebx,[eax+0x4c]
100067f7:	8d 45 cc             	lea    eax,[ebp-0x34]
100067fa:	ba 19 00 00 00       	mov    edx,0x19
100067ff:	89 df                	mov    edi,ebx
10006801:	89 c6                	mov    esi,eax
10006803:	89 d1                	mov    ecx,edx
10006805:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006807:	90                   	nop
10006808:	8d 65 f4             	lea    esp,[ebp-0xc]
1000680b:	5b                   	pop    ebx
1000680c:	5e                   	pop    esi
1000680d:	5f                   	pop    edi
1000680e:	5d                   	pop    ebp
1000680f:	c3                   	ret    

10006810 <NFrame::invalidate()>:
10006810:	55                   	push   ebp
10006811:	89 e5                	mov    ebp,esp
10006813:	57                   	push   edi
10006814:	56                   	push   esi
10006815:	53                   	push   ebx
10006816:	83 ec 2c             	sub    esp,0x2c
10006819:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000681c:	8d 45 cc             	lea    eax,[ebp-0x34]
1000681f:	8d 5a 14             	lea    ebx,[edx+0x14]
10006822:	ba 07 00 00 00       	mov    edx,0x7
10006827:	89 c7                	mov    edi,eax
10006829:	89 de                	mov    esi,ebx
1000682b:	89 d1                	mov    ecx,edx
1000682d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000682f:	83 ec 0c             	sub    esp,0xc
10006832:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006835:	e8 fc ff ff ff       	call   10006836 <NFrame::invalidate()+0x26>	10006836: R_386_PC32	NFrame::getAbsX()
1000683a:	83 c4 10             	add    esp,0x10
1000683d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10006840:	83 ec 0c             	sub    esp,0xc
10006843:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006846:	e8 fc ff ff ff       	call   10006847 <NFrame::invalidate()+0x37>	10006847: R_386_PC32	NFrame::getAbsY()
1000684b:	83 c4 10             	add    esp,0x10
1000684e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10006851:	83 ec 1c             	sub    esp,0x1c
10006854:	89 e0                	mov    eax,esp
10006856:	89 c3                	mov    ebx,eax
10006858:	8d 45 cc             	lea    eax,[ebp-0x34]
1000685b:	ba 07 00 00 00       	mov    edx,0x7
10006860:	89 df                	mov    edi,ebx
10006862:	89 c6                	mov    esi,eax
10006864:	89 d1                	mov    ecx,edx
10006866:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006868:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000686b:	e8 fc ff ff ff       	call   1000686c <NFrame::invalidate()+0x5c>	1000686c: R_386_PC32	NFrame::markRegionAsDirty(Region)
10006870:	83 c4 20             	add    esp,0x20
10006873:	90                   	nop
10006874:	8d 65 f4             	lea    esp,[ebp-0xc]
10006877:	5b                   	pop    ebx
10006878:	5e                   	pop    esi
10006879:	5f                   	pop    edi
1000687a:	5d                   	pop    ebp
1000687b:	c3                   	ret    

1000687c <NFrame::postResizeCleanup()>:
1000687c:	55                   	push   ebp
1000687d:	89 e5                	mov    ebp,esp
1000687f:	83 ec 08             	sub    esp,0x8
10006882:	83 ec 0c             	sub    esp,0xc
10006885:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006888:	e8 fc ff ff ff       	call   10006889 <NFrame::postResizeCleanup()+0xd>	10006889: R_386_PC32	NFrame::tryInvalidate()
1000688d:	83 c4 10             	add    esp,0x10
10006890:	90                   	nop
10006891:	c9                   	leave  
10006892:	c3                   	ret    
10006893:	90                   	nop

10006894 <NFrame::getChildAllowableRegion()>:
10006894:	55                   	push   ebp
10006895:	89 e5                	mov    ebp,esp
10006897:	57                   	push   edi
10006898:	56                   	push   esi
10006899:	53                   	push   ebx
1000689a:	83 ec 2c             	sub    esp,0x2c
1000689d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100068a0:	8b 78 1c             	mov    edi,DWORD PTR [eax+0x1c]
100068a3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100068a6:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
100068a9:	83 ec 0c             	sub    esp,0xc
100068ac:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100068af:	e8 fc ff ff ff       	call   100068b0 <NFrame::getChildAllowableRegion()+0x1c>	100068b0: R_386_PC32	NFrame::getAbsY()
100068b4:	83 c4 10             	add    esp,0x10
100068b7:	89 c3                	mov    ebx,eax
100068b9:	83 ec 0c             	sub    esp,0xc
100068bc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100068bf:	e8 fc ff ff ff       	call   100068c0 <NFrame::getChildAllowableRegion()+0x2c>	100068c0: R_386_PC32	NFrame::getAbsX()
100068c4:	83 c4 10             	add    esp,0x10
100068c7:	83 ec 0c             	sub    esp,0xc
100068ca:	57                   	push   edi
100068cb:	56                   	push   esi
100068cc:	53                   	push   ebx
100068cd:	50                   	push   eax
100068ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100068d1:	e8 fc ff ff ff       	call   100068d2 <NFrame::getChildAllowableRegion()+0x3e>	100068d2: R_386_PC32	Region::Region(int, int, int, int)
100068d6:	83 c4 20             	add    esp,0x20
100068d9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100068dc:	8a 50 2c             	mov    dl,BYTE PTR [eax+0x2c]
100068df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100068e2:	88 50 18             	mov    BYTE PTR [eax+0x18],dl
100068e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100068e8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
100068eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100068ee:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
100068f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100068f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100068f7:	83 ec 0c             	sub    esp,0xc
100068fa:	50                   	push   eax
100068fb:	e8 fc ff ff ff       	call   100068fc <NFrame::getChildAllowableRegion()+0x68>	100068fc: R_386_PC32	malloc
10006900:	83 c4 10             	add    esp,0x10
10006903:	89 c2                	mov    edx,eax
10006905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006908:	89 10                	mov    DWORD PTR [eax],edx
1000690a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000690d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10006910:	89 c1                	mov    ecx,eax
10006912:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006915:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10006918:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000691b:	8b 12                	mov    edx,DWORD PTR [edx]
1000691d:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10006920:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10006923:	89 4d dc             	mov    DWORD PTR [ebp-0x24],ecx
10006926:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10006929:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000692c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000692f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10006932:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10006935:	89 c6                	mov    esi,eax
10006937:	89 d7                	mov    edi,edx
10006939:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000693b:	89 c8                	mov    eax,ecx
1000693d:	89 fa                	mov    edx,edi
1000693f:	89 f3                	mov    ebx,esi
10006941:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
10006944:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
10006947:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
1000694a:	90                   	nop
1000694b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000694e:	8d 65 f4             	lea    esp,[ebp-0xc]
10006951:	5b                   	pop    ebx
10006952:	5e                   	pop    esi
10006953:	5f                   	pop    edi
10006954:	5d                   	pop    ebp
10006955:	c2 04 00             	ret    0x4

10006958 <NFrame::repaintAux(Video*, Region, bool)>:
10006958:	55                   	push   ebp
10006959:	89 e5                	mov    ebp,esp
1000695b:	57                   	push   edi
1000695c:	56                   	push   esi
1000695d:	53                   	push   ebx
1000695e:	81 ec 2c 01 00 00    	sub    esp,0x12c
10006964:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
10006967:	88 85 d4 fe ff ff    	mov    BYTE PTR [ebp-0x12c],al
1000696d:	8d 45 84             	lea    eax,[ebp-0x7c]
10006970:	83 ec 08             	sub    esp,0x8
10006973:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006976:	50                   	push   eax
10006977:	e8 fc ff ff ff       	call   10006978 <NFrame::repaintAux(Video*, Region, bool)+0x20>	10006978: R_386_PC32	NFrame::getDrawRegion()
1000697c:	83 c4 0c             	add    esp,0xc
1000697f:	83 ec 0c             	sub    esp,0xc
10006982:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006985:	e8 fc ff ff ff       	call   10006986 <NFrame::repaintAux(Video*, Region, bool)+0x2e>	10006986: R_386_PC32	NFrame::getAbsX()
1000698a:	83 c4 10             	add    esp,0x10
1000698d:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
10006990:	83 ec 0c             	sub    esp,0xc
10006993:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006996:	e8 fc ff ff ff       	call   10006997 <NFrame::repaintAux(Video*, Region, bool)+0x3f>	10006997: R_386_PC32	NFrame::getAbsY()
1000699b:	83 c4 10             	add    esp,0x10
1000699e:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
100069a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100069a4:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
100069aa:	83 ec 04             	sub    esp,0x4
100069ad:	83 ec 1c             	sub    esp,0x1c
100069b0:	89 e0                	mov    eax,esp
100069b2:	89 c3                	mov    ebx,eax
100069b4:	8d 45 14             	lea    eax,[ebp+0x14]
100069b7:	ba 07 00 00 00       	mov    edx,0x7
100069bc:	89 df                	mov    edi,ebx
100069be:	89 c6                	mov    esi,eax
100069c0:	89 d1                	mov    ecx,edx
100069c2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100069c4:	83 ec 1c             	sub    esp,0x1c
100069c7:	89 e0                	mov    eax,esp
100069c9:	89 c3                	mov    ebx,eax
100069cb:	8d 45 84             	lea    eax,[ebp-0x7c]
100069ce:	ba 07 00 00 00       	mov    edx,0x7
100069d3:	89 df                	mov    edi,ebx
100069d5:	89 c6                	mov    esi,eax
100069d7:	89 d1                	mov    ecx,edx
100069d9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100069db:	ff b5 d0 fe ff ff    	push   DWORD PTR [ebp-0x130]
100069e1:	e8 fc ff ff ff       	call   100069e2 <NFrame::repaintAux(Video*, Region, bool)+0x8a>	100069e2: R_386_PC32	getRegionIntersection(Region, Region)
100069e6:	83 c4 3c             	add    esp,0x3c
100069e9:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
100069ec:	83 ec 0c             	sub    esp,0xc
100069ef:	50                   	push   eax
100069f0:	e8 fc ff ff ff       	call   100069f1 <NFrame::repaintAux(Video*, Region, bool)+0x99>	100069f1: R_386_PC32	free
100069f5:	83 c4 10             	add    esp,0x10
100069f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100069fb:	8b 00                	mov    eax,DWORD PTR [eax]
100069fd:	83 c0 04             	add    eax,0x4
10006a00:	8b 00                	mov    eax,DWORD PTR [eax]
10006a02:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
10006a08:	83 ec 0c             	sub    esp,0xc
10006a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006a0e:	83 ec 1c             	sub    esp,0x1c
10006a11:	89 e2                	mov    edx,esp
10006a13:	89 c3                	mov    ebx,eax
10006a15:	b8 07 00 00 00       	mov    eax,0x7
10006a1a:	89 d7                	mov    edi,edx
10006a1c:	89 de                	mov    esi,ebx
10006a1e:	89 c1                	mov    ecx,eax
10006a20:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006a22:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10006a25:	8d 45 a0             	lea    eax,[ebp-0x60]
10006a28:	50                   	push   eax
10006a29:	e8 fc ff ff ff       	call   10006a2a <NFrame::repaintAux(Video*, Region, bool)+0xd2>	10006a2a: R_386_PC32	NFrame::Graphics::Graphics(Video*, Region)
10006a2e:	83 c4 30             	add    esp,0x30
10006a31:	83 ec 0c             	sub    esp,0xc
10006a34:	83 ec 20             	sub    esp,0x20
10006a37:	89 e0                	mov    eax,esp
10006a39:	89 c3                	mov    ebx,eax
10006a3b:	8d 45 a0             	lea    eax,[ebp-0x60]
10006a3e:	ba 08 00 00 00       	mov    edx,0x8
10006a43:	89 df                	mov    edi,ebx
10006a45:	89 c6                	mov    esi,eax
10006a47:	89 d1                	mov    ecx,edx
10006a49:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006a4b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006a4e:	8b 85 d0 fe ff ff    	mov    eax,DWORD PTR [ebp-0x130]
10006a54:	ff d0                	call   eax
10006a56:	83 c4 30             	add    esp,0x30
10006a59:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006a5c:	8b 00                	mov    eax,DWORD PTR [eax]
10006a5e:	83 c0 08             	add    eax,0x8
10006a61:	8b 00                	mov    eax,DWORD PTR [eax]
10006a63:	8d 95 68 ff ff ff    	lea    edx,[ebp-0x98]
10006a69:	83 ec 08             	sub    esp,0x8
10006a6c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006a6f:	52                   	push   edx
10006a70:	ff d0                	call   eax
10006a72:	83 c4 0c             	add    esp,0xc
10006a75:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006a7b:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
10006a81:	83 ec 04             	sub    esp,0x4
10006a84:	83 ec 1c             	sub    esp,0x1c
10006a87:	89 e0                	mov    eax,esp
10006a89:	89 c3                	mov    ebx,eax
10006a8b:	8d 85 68 ff ff ff    	lea    eax,[ebp-0x98]
10006a91:	ba 07 00 00 00       	mov    edx,0x7
10006a96:	89 df                	mov    edi,ebx
10006a98:	89 c6                	mov    esi,eax
10006a9a:	89 d1                	mov    ecx,edx
10006a9c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006a9e:	83 ec 1c             	sub    esp,0x1c
10006aa1:	89 e0                	mov    eax,esp
10006aa3:	89 c3                	mov    ebx,eax
10006aa5:	8d 45 14             	lea    eax,[ebp+0x14]
10006aa8:	ba 07 00 00 00       	mov    edx,0x7
10006aad:	89 df                	mov    edi,ebx
10006aaf:	89 c6                	mov    esi,eax
10006ab1:	89 d1                	mov    ecx,edx
10006ab3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006ab5:	ff b5 d0 fe ff ff    	push   DWORD PTR [ebp-0x130]
10006abb:	e8 fc ff ff ff       	call   10006abc <NFrame::repaintAux(Video*, Region, bool)+0x164>	10006abc: R_386_PC32	getRegionIntersection(Region, Region)
10006ac0:	83 c4 3c             	add    esp,0x3c
10006ac3:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [ebp-0x98]
10006ac9:	83 ec 0c             	sub    esp,0xc
10006acc:	50                   	push   eax
10006acd:	e8 fc ff ff ff       	call   10006ace <NFrame::repaintAux(Video*, Region, bool)+0x176>	10006ace: R_386_PC32	free
10006ad2:	83 c4 10             	add    esp,0x10
10006ad5:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10006adc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006adf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
10006ae2:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10006ae5:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10006ae9:	0f 84 8d 01 00 00    	je     10006c7c <NFrame::repaintAux(Video*, Region, bool)+0x324>
10006aef:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006af2:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10006af5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006af8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10006afb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10006afe:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006b01:	8b 00                	mov    eax,DWORD PTR [eax]
10006b03:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10006b06:	84 c0                	test   al,al
10006b08:	74 1a                	je     10006b24 <NFrame::repaintAux(Video*, Region, bool)+0x1cc>
10006b0a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006b0d:	8b 00                	mov    eax,DWORD PTR [eax]
10006b0f:	8a 40 69             	mov    al,BYTE PTR [eax+0x69]
10006b12:	84 c0                	test   al,al
10006b14:	0f 84 5c 01 00 00    	je     10006c76 <NFrame::repaintAux(Video*, Region, bool)+0x31e>
10006b1a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006b1d:	8b 00                	mov    eax,DWORD PTR [eax]
10006b1f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10006b22:	eb c1                	jmp    10006ae5 <NFrame::repaintAux(Video*, Region, bool)+0x18d>
10006b24:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006b27:	8b 00                	mov    eax,DWORD PTR [eax]
10006b29:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
10006b2f:	8d 9d 30 ff ff ff    	lea    ebx,[ebp-0xd0]
10006b35:	89 9d cc fe ff ff    	mov    DWORD PTR [ebp-0x134],ebx
10006b3b:	83 ec 04             	sub    esp,0x4
10006b3e:	6a 01                	push   0x1
10006b40:	83 ec 1c             	sub    esp,0x1c
10006b43:	89 e0                	mov    eax,esp
10006b45:	89 c3                	mov    ebx,eax
10006b47:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006b4d:	ba 07 00 00 00       	mov    edx,0x7
10006b52:	89 df                	mov    edi,ebx
10006b54:	89 c6                	mov    esi,eax
10006b56:	89 d1                	mov    ecx,edx
10006b58:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006b5a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10006b5d:	ff b5 d0 fe ff ff    	push   DWORD PTR [ebp-0x130]
10006b63:	ff b5 cc fe ff ff    	push   DWORD PTR [ebp-0x134]
10006b69:	e8 fc ff ff ff       	call   10006b6a <NFrame::repaintAux(Video*, Region, bool)+0x212>	10006b6a: R_386_PC32	NFrame::repaintAux(Video*, Region, bool)
10006b6e:	83 c4 2c             	add    esp,0x2c
10006b71:	8d 85 14 ff ff ff    	lea    eax,[ebp-0xec]
10006b77:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
10006b7d:	83 ec 04             	sub    esp,0x4
10006b80:	83 ec 1c             	sub    esp,0x1c
10006b83:	89 e0                	mov    eax,esp
10006b85:	89 c3                	mov    ebx,eax
10006b87:	8d 85 30 ff ff ff    	lea    eax,[ebp-0xd0]
10006b8d:	ba 07 00 00 00       	mov    edx,0x7
10006b92:	89 df                	mov    edi,ebx
10006b94:	89 c6                	mov    esi,eax
10006b96:	89 d1                	mov    ecx,edx
10006b98:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006b9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006b9d:	83 ec 1c             	sub    esp,0x1c
10006ba0:	89 e2                	mov    edx,esp
10006ba2:	89 c3                	mov    ebx,eax
10006ba4:	b8 07 00 00 00       	mov    eax,0x7
10006ba9:	89 d7                	mov    edi,edx
10006bab:	89 de                	mov    esi,ebx
10006bad:	89 c1                	mov    ecx,eax
10006baf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006bb1:	ff b5 d0 fe ff ff    	push   DWORD PTR [ebp-0x130]
10006bb7:	e8 fc ff ff ff       	call   10006bb8 <NFrame::repaintAux(Video*, Region, bool)+0x260>	10006bb8: R_386_PC32	getRegionUnion(Region, Region)
10006bbc:	83 c4 3c             	add    esp,0x3c
10006bbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006bc2:	8b 00                	mov    eax,DWORD PTR [eax]
10006bc4:	83 ec 0c             	sub    esp,0xc
10006bc7:	50                   	push   eax
10006bc8:	e8 fc ff ff ff       	call   10006bc9 <NFrame::repaintAux(Video*, Region, bool)+0x271>	10006bc9: R_386_PC32	free
10006bcd:	83 c4 10             	add    esp,0x10
10006bd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006bd3:	89 c3                	mov    ebx,eax
10006bd5:	8d 85 14 ff ff ff    	lea    eax,[ebp-0xec]
10006bdb:	ba 19 00 00 00       	mov    edx,0x19
10006be0:	89 df                	mov    edi,ebx
10006be2:	89 c6                	mov    esi,eax
10006be4:	89 d1                	mov    ecx,edx
10006be6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006be8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10006bee:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
10006bf4:	83 ec 04             	sub    esp,0x4
10006bf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006bfa:	83 ec 1c             	sub    esp,0x1c
10006bfd:	89 e2                	mov    edx,esp
10006bff:	89 c3                	mov    ebx,eax
10006c01:	b8 07 00 00 00       	mov    eax,0x7
10006c06:	89 d7                	mov    edi,edx
10006c08:	89 de                	mov    esi,ebx
10006c0a:	89 c1                	mov    ecx,eax
10006c0c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006c0e:	83 ec 1c             	sub    esp,0x1c
10006c11:	89 e0                	mov    eax,esp
10006c13:	89 c3                	mov    ebx,eax
10006c15:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006c1b:	ba 07 00 00 00       	mov    edx,0x7
10006c20:	89 df                	mov    edi,ebx
10006c22:	89 c6                	mov    esi,eax
10006c24:	89 d1                	mov    ecx,edx
10006c26:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006c28:	ff b5 d0 fe ff ff    	push   DWORD PTR [ebp-0x130]
10006c2e:	e8 fc ff ff ff       	call   10006c2f <NFrame::repaintAux(Video*, Region, bool)+0x2d7>	10006c2f: R_386_PC32	getRegionDifference(Region, Region)
10006c33:	83 c4 3c             	add    esp,0x3c
10006c36:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [ebp-0xb4]
10006c3c:	83 ec 0c             	sub    esp,0xc
10006c3f:	50                   	push   eax
10006c40:	e8 fc ff ff ff       	call   10006c41 <NFrame::repaintAux(Video*, Region, bool)+0x2e9>	10006c41: R_386_PC32	free
10006c45:	83 c4 10             	add    esp,0x10
10006c48:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006c4e:	8d 95 f8 fe ff ff    	lea    edx,[ebp-0x108]
10006c54:	b9 19 00 00 00       	mov    ecx,0x19
10006c59:	89 c7                	mov    edi,eax
10006c5b:	89 d6                	mov    esi,edx
10006c5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006c5f:	8b 85 30 ff ff ff    	mov    eax,DWORD PTR [ebp-0xd0]
10006c65:	83 ec 0c             	sub    esp,0xc
10006c68:	50                   	push   eax
10006c69:	e8 fc ff ff ff       	call   10006c6a <NFrame::repaintAux(Video*, Region, bool)+0x312>	10006c6a: R_386_PC32	free
10006c6e:	83 c4 10             	add    esp,0x10
10006c71:	e9 6f fe ff ff       	jmp    10006ae5 <NFrame::repaintAux(Video*, Region, bool)+0x18d>
10006c76:	90                   	nop
10006c77:	e9 69 fe ff ff       	jmp    10006ae5 <NFrame::repaintAux(Video*, Region, bool)+0x18d>
10006c7c:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [ebp-0xb4]
10006c82:	83 ec 0c             	sub    esp,0xc
10006c85:	50                   	push   eax
10006c86:	e8 fc ff ff ff       	call   10006c87 <NFrame::repaintAux(Video*, Region, bool)+0x32f>	10006c87: R_386_PC32	free
10006c8b:	83 c4 10             	add    esp,0x10
10006c8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006c91:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10006c94:	85 c0                	test   eax,eax
10006c96:	75 48                	jne    10006ce0 <NFrame::repaintAux(Video*, Region, bool)+0x388>
10006c98:	80 bd d4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x12c],0x0
10006c9f:	74 3f                	je     10006ce0 <NFrame::repaintAux(Video*, Region, bool)+0x388>
10006ca1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006ca4:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
10006ca7:	83 ec 0c             	sub    esp,0xc
10006caa:	50                   	push   eax
10006cab:	e8 fc ff ff ff       	call   10006cac <NFrame::repaintAux(Video*, Region, bool)+0x354>	10006cac: R_386_PC32	free
10006cb0:	83 c4 10             	add    esp,0x10
10006cb3:	8d 45 c0             	lea    eax,[ebp-0x40]
10006cb6:	83 ec 0c             	sub    esp,0xc
10006cb9:	6a 01                	push   0x1
10006cbb:	6a 00                	push   0x0
10006cbd:	6a 00                	push   0x0
10006cbf:	6a 00                	push   0x0
10006cc1:	50                   	push   eax
10006cc2:	e8 fc ff ff ff       	call   10006cc3 <NFrame::repaintAux(Video*, Region, bool)+0x36b>	10006cc3: R_386_PC32	createRectangleRegion(int, int, int, int)
10006cc7:	83 c4 1c             	add    esp,0x1c
10006cca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006ccd:	8d 58 4c             	lea    ebx,[eax+0x4c]
10006cd0:	8d 45 c0             	lea    eax,[ebp-0x40]
10006cd3:	ba 19 00 00 00       	mov    edx,0x19
10006cd8:	89 df                	mov    edi,ebx
10006cda:	89 c6                	mov    esi,eax
10006cdc:	89 d1                	mov    ecx,edx
10006cde:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006ce0:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10006ce4:	0f 84 80 00 00 00    	je     10006d6a <NFrame::repaintAux(Video*, Region, bool)+0x412>
10006cea:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10006ced:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10006cf3:	8d 5a 30             	lea    ebx,[edx+0x30]
10006cf6:	ba 07 00 00 00       	mov    edx,0x7
10006cfb:	89 c7                	mov    edi,eax
10006cfd:	89 de                	mov    esi,ebx
10006cff:	89 d1                	mov    ecx,edx
10006d01:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006d03:	83 ec 0c             	sub    esp,0xc
10006d06:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006d09:	e8 fc ff ff ff       	call   10006d0a <NFrame::repaintAux(Video*, Region, bool)+0x3b2>	10006d0a: R_386_PC32	NFrame::getAbsX()
10006d0e:	83 c4 10             	add    esp,0x10
10006d11:	89 c2                	mov    edx,eax
10006d13:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [ebp-0x114]
10006d19:	01 d0                	add    eax,edx
10006d1b:	89 85 ec fe ff ff    	mov    DWORD PTR [ebp-0x114],eax
10006d21:	83 ec 0c             	sub    esp,0xc
10006d24:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006d27:	e8 fc ff ff ff       	call   10006d28 <NFrame::repaintAux(Video*, Region, bool)+0x3d0>	10006d28: R_386_PC32	NFrame::getAbsY()
10006d2c:	83 c4 10             	add    esp,0x10
10006d2f:	89 c2                	mov    edx,eax
10006d31:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [ebp-0x110]
10006d37:	01 d0                	add    eax,edx
10006d39:	89 85 f0 fe ff ff    	mov    DWORD PTR [ebp-0x110],eax
10006d3f:	83 ec 0c             	sub    esp,0xc
10006d42:	6a 00                	push   0x0
10006d44:	83 ec 1c             	sub    esp,0x1c
10006d47:	89 e0                	mov    eax,esp
10006d49:	89 c3                	mov    ebx,eax
10006d4b:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10006d51:	ba 07 00 00 00       	mov    edx,0x7
10006d56:	89 df                	mov    edi,ebx
10006d58:	89 c6                	mov    esi,eax
10006d5a:	89 d1                	mov    ecx,edx
10006d5c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006d5e:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10006d61:	e8 fc ff ff ff       	call   10006d62 <NFrame::repaintAux(Video*, Region, bool)+0x40a>	10006d62: R_386_PC32	fillRegion(Video*, Region, unsigned int)
10006d66:	83 c4 30             	add    esp,0x30
10006d69:	90                   	nop
10006d6a:	90                   	nop
10006d6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006d6e:	8d 65 f4             	lea    esp,[ebp-0xc]
10006d71:	5b                   	pop    ebx
10006d72:	5e                   	pop    esi
10006d73:	5f                   	pop    edi
10006d74:	5d                   	pop    ebp
10006d75:	c2 04 00             	ret    0x4

10006d78 <NFrame::NFrame(Region)>:
10006d78:	55                   	push   ebp
10006d79:	89 e5                	mov    ebp,esp
10006d7b:	57                   	push   edi
10006d7c:	56                   	push   esi
10006d7d:	53                   	push   ebx
10006d7e:	83 ec 2c             	sub    esp,0x2c
10006d81:	ba 08 00 00 00       	mov    edx,0x8	10006d82: R_386_32	vtable for NFrame
10006d86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006d89:	89 10                	mov    DWORD PTR [eax],edx
10006d8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006d8e:	83 c0 04             	add    eax,0x4
10006d91:	83 ec 0c             	sub    esp,0xc
10006d94:	50                   	push   eax
10006d95:	e8 fc ff ff ff       	call   10006d96 <NFrame::NFrame(Region)+0x1e>	10006d96: R_386_PC32	LinkedList2<NFrame*>::LinkedList2()
10006d9a:	83 c4 10             	add    esp,0x10
10006d9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006da0:	83 c0 14             	add    eax,0x14
10006da3:	83 ec 0c             	sub    esp,0xc
10006da6:	50                   	push   eax
10006da7:	e8 fc ff ff ff       	call   10006da8 <NFrame::NFrame(Region)+0x30>	10006da8: R_386_PC32	Region::Region()
10006dac:	83 c4 10             	add    esp,0x10
10006daf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006db2:	83 c0 30             	add    eax,0x30
10006db5:	83 ec 0c             	sub    esp,0xc
10006db8:	50                   	push   eax
10006db9:	e8 fc ff ff ff       	call   10006dba <NFrame::NFrame(Region)+0x42>	10006dba: R_386_PC32	Region::Region()
10006dbe:	83 c4 10             	add    esp,0x10
10006dc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006dc4:	83 c0 4c             	add    eax,0x4c
10006dc7:	83 ec 0c             	sub    esp,0xc
10006dca:	50                   	push   eax
10006dcb:	e8 fc ff ff ff       	call   10006dcc <NFrame::NFrame(Region)+0x54>	10006dcc: R_386_PC32	Region::Region()
10006dd0:	83 c4 10             	add    esp,0x10
10006dd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006dd6:	c6 40 68 00          	mov    BYTE PTR [eax+0x68],0x0
10006dda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006ddd:	c6 40 69 00          	mov    BYTE PTR [eax+0x69],0x0
10006de1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006de4:	c7 40 6c 00 00 00 00 	mov    DWORD PTR [eax+0x6c],0x0
10006deb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006dee:	c6 40 70 00          	mov    BYTE PTR [eax+0x70],0x0
10006df2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006df5:	c7 40 74 0a 00 00 00 	mov    DWORD PTR [eax+0x74],0xa
10006dfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006dff:	c7 40 78 0a 00 00 00 	mov    DWORD PTR [eax+0x78],0xa
10006e06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e09:	c7 40 7c 64 00 00 00 	mov    DWORD PTR [eax+0x7c],0x64
10006e10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e13:	c7 80 80 00 00 00 4b 00 00 00 	mov    DWORD PTR [eax+0x80],0x4b
10006e1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e20:	c7 80 84 00 00 00 18 00 00 00 	mov    DWORD PTR [eax+0x84],0x18
10006e2a:	8d 45 cc             	lea    eax,[ebp-0x34]
10006e2d:	83 ec 0c             	sub    esp,0xc
10006e30:	6a 01                	push   0x1
10006e32:	6a 00                	push   0x0
10006e34:	6a 00                	push   0x0
10006e36:	6a 00                	push   0x0
10006e38:	50                   	push   eax
10006e39:	e8 fc ff ff ff       	call   10006e3a <NFrame::NFrame(Region)+0xc2>	10006e3a: R_386_PC32	createRectangleRegion(int, int, int, int)
10006e3e:	83 c4 1c             	add    esp,0x1c
10006e41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e44:	8d 58 4c             	lea    ebx,[eax+0x4c]
10006e47:	8d 45 cc             	lea    eax,[ebp-0x34]
10006e4a:	ba 19 00 00 00       	mov    edx,0x19
10006e4f:	89 df                	mov    edi,ebx
10006e51:	89 c6                	mov    esi,eax
10006e53:	89 d1                	mov    ecx,edx
10006e55:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e5a:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10006e61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e64:	8d 58 14             	lea    ebx,[eax+0x14]
10006e67:	8d 45 0c             	lea    eax,[ebp+0xc]
10006e6a:	ba 19 00 00 00       	mov    edx,0x19
10006e6f:	89 df                	mov    edi,ebx
10006e71:	89 c6                	mov    esi,eax
10006e73:	89 d1                	mov    ecx,edx
10006e75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006e77:	90                   	nop
10006e78:	8d 65 f4             	lea    esp,[ebp-0xc]
10006e7b:	5b                   	pop    ebx
10006e7c:	5e                   	pop    esi
10006e7d:	5f                   	pop    edi
10006e7e:	5d                   	pop    ebp
10006e7f:	c3                   	ret    

10006e80 <NFrame::NFrame(int, int, int, int)>:
10006e80:	55                   	push   ebp
10006e81:	89 e5                	mov    ebp,esp
10006e83:	57                   	push   edi
10006e84:	56                   	push   esi
10006e85:	53                   	push   ebx
10006e86:	83 ec 4c             	sub    esp,0x4c
10006e89:	ba 08 00 00 00       	mov    edx,0x8	10006e8a: R_386_32	vtable for NFrame
10006e8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e91:	89 10                	mov    DWORD PTR [eax],edx
10006e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e96:	83 c0 04             	add    eax,0x4
10006e99:	83 ec 0c             	sub    esp,0xc
10006e9c:	50                   	push   eax
10006e9d:	e8 fc ff ff ff       	call   10006e9e <NFrame::NFrame(int, int, int, int)+0x1e>	10006e9e: R_386_PC32	LinkedList2<NFrame*>::LinkedList2()
10006ea2:	83 c4 10             	add    esp,0x10
10006ea5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006ea8:	83 c0 14             	add    eax,0x14
10006eab:	83 ec 0c             	sub    esp,0xc
10006eae:	50                   	push   eax
10006eaf:	e8 fc ff ff ff       	call   10006eb0 <NFrame::NFrame(int, int, int, int)+0x30>	10006eb0: R_386_PC32	Region::Region()
10006eb4:	83 c4 10             	add    esp,0x10
10006eb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006eba:	83 c0 30             	add    eax,0x30
10006ebd:	83 ec 0c             	sub    esp,0xc
10006ec0:	50                   	push   eax
10006ec1:	e8 fc ff ff ff       	call   10006ec2 <NFrame::NFrame(int, int, int, int)+0x42>	10006ec2: R_386_PC32	Region::Region()
10006ec6:	83 c4 10             	add    esp,0x10
10006ec9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006ecc:	83 c0 4c             	add    eax,0x4c
10006ecf:	83 ec 0c             	sub    esp,0xc
10006ed2:	50                   	push   eax
10006ed3:	e8 fc ff ff ff       	call   10006ed4 <NFrame::NFrame(int, int, int, int)+0x54>	10006ed4: R_386_PC32	Region::Region()
10006ed8:	83 c4 10             	add    esp,0x10
10006edb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006ede:	c6 40 68 00          	mov    BYTE PTR [eax+0x68],0x0
10006ee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006ee5:	c6 40 69 00          	mov    BYTE PTR [eax+0x69],0x0
10006ee9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006eec:	c7 40 6c 00 00 00 00 	mov    DWORD PTR [eax+0x6c],0x0
10006ef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006ef6:	c6 40 70 00          	mov    BYTE PTR [eax+0x70],0x0
10006efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006efd:	c7 40 74 0a 00 00 00 	mov    DWORD PTR [eax+0x74],0xa
10006f04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f07:	c7 40 78 0a 00 00 00 	mov    DWORD PTR [eax+0x78],0xa
10006f0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f11:	c7 40 7c 64 00 00 00 	mov    DWORD PTR [eax+0x7c],0x64
10006f18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f1b:	c7 80 80 00 00 00 4b 00 00 00 	mov    DWORD PTR [eax+0x80],0x4b
10006f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f28:	c7 80 84 00 00 00 18 00 00 00 	mov    DWORD PTR [eax+0x84],0x18
10006f32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f35:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10006f3c:	8d 45 b0             	lea    eax,[ebp-0x50]
10006f3f:	83 ec 0c             	sub    esp,0xc
10006f42:	6a 01                	push   0x1
10006f44:	6a 00                	push   0x0
10006f46:	6a 00                	push   0x0
10006f48:	6a 00                	push   0x0
10006f4a:	50                   	push   eax
10006f4b:	e8 fc ff ff ff       	call   10006f4c <NFrame::NFrame(int, int, int, int)+0xcc>	10006f4c: R_386_PC32	createRectangleRegion(int, int, int, int)
10006f50:	83 c4 1c             	add    esp,0x1c
10006f53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f56:	8d 58 4c             	lea    ebx,[eax+0x4c]
10006f59:	8d 45 b0             	lea    eax,[ebp-0x50]
10006f5c:	ba 19 00 00 00       	mov    edx,0x19
10006f61:	89 df                	mov    edi,ebx
10006f63:	89 c6                	mov    esi,eax
10006f65:	89 d1                	mov    ecx,edx
10006f67:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006f69:	8d 45 cc             	lea    eax,[ebp-0x34]
10006f6c:	83 ec 0c             	sub    esp,0xc
10006f6f:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10006f72:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10006f75:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10006f78:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006f7b:	50                   	push   eax
10006f7c:	e8 fc ff ff ff       	call   10006f7d <NFrame::NFrame(int, int, int, int)+0xfd>	10006f7d: R_386_PC32	createRectangleRegion(int, int, int, int)
10006f81:	83 c4 1c             	add    esp,0x1c
10006f84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f87:	8d 58 14             	lea    ebx,[eax+0x14]
10006f8a:	8d 45 cc             	lea    eax,[ebp-0x34]
10006f8d:	ba 19 00 00 00       	mov    edx,0x19
10006f92:	89 df                	mov    edi,ebx
10006f94:	89 c6                	mov    esi,eax
10006f96:	89 d1                	mov    ecx,edx
10006f98:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006f9a:	90                   	nop
10006f9b:	8d 65 f4             	lea    esp,[ebp-0xc]
10006f9e:	5b                   	pop    ebx
10006f9f:	5e                   	pop    esi
10006fa0:	5f                   	pop    edi
10006fa1:	5d                   	pop    ebp
10006fa2:	c3                   	ret    
10006fa3:	90                   	nop

10006fa4 <NFrame::addChild(NFrame*)>:
10006fa4:	55                   	push   ebp
10006fa5:	89 e5                	mov    ebp,esp
10006fa7:	83 ec 08             	sub    esp,0x8
10006faa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006fad:	83 c0 04             	add    eax,0x4
10006fb0:	83 ec 08             	sub    esp,0x8
10006fb3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006fb6:	50                   	push   eax
10006fb7:	e8 fc ff ff ff       	call   10006fb8 <NFrame::addChild(NFrame*)+0x14>	10006fb8: R_386_PC32	LinkedList2<NFrame*>::prependNode(NFrame*)
10006fbc:	83 c4 10             	add    esp,0x10
10006fbf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006fc2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10006fc5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
10006fc8:	90                   	nop
10006fc9:	c9                   	leave  
10006fca:	c3                   	ret    
10006fcb:	90                   	nop

10006fcc <NFrame::getDirtyRegion()>:
10006fcc:	55                   	push   ebp
10006fcd:	89 e5                	mov    ebp,esp
10006fcf:	57                   	push   edi
10006fd0:	56                   	push   esi
10006fd1:	53                   	push   ebx
10006fd2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10006fd5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006fd8:	8d 58 4c             	lea    ebx,[eax+0x4c]
10006fdb:	b8 07 00 00 00       	mov    eax,0x7
10006fe0:	89 d7                	mov    edi,edx
10006fe2:	89 de                	mov    esi,ebx
10006fe4:	89 c1                	mov    ecx,eax
10006fe6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006fe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006feb:	5b                   	pop    ebx
10006fec:	5e                   	pop    esi
10006fed:	5f                   	pop    edi
10006fee:	5d                   	pop    ebp
10006fef:	c2 04 00             	ret    0x4

10006ff2 <NFrame::getDrawRegion()>:
10006ff2:	55                   	push   ebp
10006ff3:	89 e5                	mov    ebp,esp
10006ff5:	57                   	push   edi
10006ff6:	56                   	push   esi
10006ff7:	53                   	push   ebx
10006ff8:	81 ec bc 00 00 00    	sub    esp,0xbc
10006ffe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10007001:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
10007004:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10007007:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
1000700a:	8d 45 c4             	lea    eax,[ebp-0x3c]
1000700d:	83 ec 0c             	sub    esp,0xc
10007010:	6a 01                	push   0x1
10007012:	6a 00                	push   0x0
10007014:	51                   	push   ecx
10007015:	52                   	push   edx
10007016:	50                   	push   eax
10007017:	e8 fc ff ff ff       	call   10007018 <NFrame::getDrawRegion()+0x26>	10007018: R_386_PC32	createRectangleRegion(int, int, int, int)
1000701c:	83 c4 1c             	add    esp,0x1c
1000701f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10007022:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
10007025:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10007028:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000702c:	0f 84 54 01 00 00    	je     10007186 <NFrame::getDrawRegion()+0x194>
10007032:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10007035:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10007038:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000703b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000703e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10007041:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10007044:	8b 00                	mov    eax,DWORD PTR [eax]
10007046:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10007049:	84 c0                	test   al,al
1000704b:	0f 85 2f 01 00 00    	jne    10007180 <NFrame::getDrawRegion()+0x18e>
10007051:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10007054:	8b 10                	mov    edx,DWORD PTR [eax]
10007056:	8d 45 a8             	lea    eax,[ebp-0x58]
10007059:	8d 5a 14             	lea    ebx,[edx+0x14]
1000705c:	ba 07 00 00 00       	mov    edx,0x7
10007061:	89 c7                	mov    edi,eax
10007063:	89 de                	mov    esi,ebx
10007065:	89 d1                	mov    ecx,edx
10007067:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007069:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
1000706c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000706f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
10007072:	01 d0                	add    eax,edx
10007074:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10007077:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
1000707a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000707d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
10007080:	01 d0                	add    eax,edx
10007082:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10007085:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10007088:	8b 00                	mov    eax,DWORD PTR [eax]
1000708a:	83 c0 08             	add    eax,0x8
1000708d:	8b 00                	mov    eax,DWORD PTR [eax]
1000708f:	8d 55 8c             	lea    edx,[ebp-0x74]
10007092:	83 ec 08             	sub    esp,0x8
10007095:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10007098:	52                   	push   edx
10007099:	ff d0                	call   eax
1000709b:	83 c4 0c             	add    esp,0xc
1000709e:	8d 85 70 ff ff ff    	lea    eax,[ebp-0x90]
100070a4:	89 85 44 ff ff ff    	mov    DWORD PTR [ebp-0xbc],eax
100070aa:	83 ec 04             	sub    esp,0x4
100070ad:	83 ec 1c             	sub    esp,0x1c
100070b0:	89 e0                	mov    eax,esp
100070b2:	89 c3                	mov    ebx,eax
100070b4:	8d 45 a8             	lea    eax,[ebp-0x58]
100070b7:	ba 07 00 00 00       	mov    edx,0x7
100070bc:	89 df                	mov    edi,ebx
100070be:	89 c6                	mov    esi,eax
100070c0:	89 d1                	mov    ecx,edx
100070c2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100070c4:	83 ec 1c             	sub    esp,0x1c
100070c7:	89 e0                	mov    eax,esp
100070c9:	89 c3                	mov    ebx,eax
100070cb:	8d 45 8c             	lea    eax,[ebp-0x74]
100070ce:	ba 07 00 00 00       	mov    edx,0x7
100070d3:	89 df                	mov    edi,ebx
100070d5:	89 c6                	mov    esi,eax
100070d7:	89 d1                	mov    ecx,edx
100070d9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100070db:	ff b5 44 ff ff ff    	push   DWORD PTR [ebp-0xbc]
100070e1:	e8 fc ff ff ff       	call   100070e2 <NFrame::getDrawRegion()+0xf0>	100070e2: R_386_PC32	getRegionIntersection(Region, Region)
100070e6:	83 c4 3c             	add    esp,0x3c
100070e9:	8d 85 54 ff ff ff    	lea    eax,[ebp-0xac]
100070ef:	89 85 44 ff ff ff    	mov    DWORD PTR [ebp-0xbc],eax
100070f5:	83 ec 04             	sub    esp,0x4
100070f8:	83 ec 1c             	sub    esp,0x1c
100070fb:	89 e0                	mov    eax,esp
100070fd:	89 c3                	mov    ebx,eax
100070ff:	8d 85 70 ff ff ff    	lea    eax,[ebp-0x90]
10007105:	ba 07 00 00 00       	mov    edx,0x7
1000710a:	89 df                	mov    edi,ebx
1000710c:	89 c6                	mov    esi,eax
1000710e:	89 d1                	mov    ecx,edx
10007110:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007112:	83 ec 1c             	sub    esp,0x1c
10007115:	89 e0                	mov    eax,esp
10007117:	89 c3                	mov    ebx,eax
10007119:	8d 45 c4             	lea    eax,[ebp-0x3c]
1000711c:	ba 07 00 00 00       	mov    edx,0x7
10007121:	89 df                	mov    edi,ebx
10007123:	89 c6                	mov    esi,eax
10007125:	89 d1                	mov    ecx,edx
10007127:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007129:	ff b5 44 ff ff ff    	push   DWORD PTR [ebp-0xbc]
1000712f:	e8 fc ff ff ff       	call   10007130 <NFrame::getDrawRegion()+0x13e>	10007130: R_386_PC32	getRegionUnion(Region, Region)
10007134:	83 c4 3c             	add    esp,0x3c
10007137:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
1000713a:	83 ec 0c             	sub    esp,0xc
1000713d:	50                   	push   eax
1000713e:	e8 fc ff ff ff       	call   1000713f <NFrame::getDrawRegion()+0x14d>	1000713f: R_386_PC32	free
10007143:	83 c4 10             	add    esp,0x10
10007146:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10007149:	83 ec 0c             	sub    esp,0xc
1000714c:	50                   	push   eax
1000714d:	e8 fc ff ff ff       	call   1000714e <NFrame::getDrawRegion()+0x15c>	1000714e: R_386_PC32	free
10007152:	83 c4 10             	add    esp,0x10
10007155:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [ebp-0x90]
1000715b:	83 ec 0c             	sub    esp,0xc
1000715e:	50                   	push   eax
1000715f:	e8 fc ff ff ff       	call   10007160 <NFrame::getDrawRegion()+0x16e>	10007160: R_386_PC32	free
10007164:	83 c4 10             	add    esp,0x10
10007167:	8d 45 c4             	lea    eax,[ebp-0x3c]
1000716a:	8d 95 54 ff ff ff    	lea    edx,[ebp-0xac]
10007170:	b9 19 00 00 00       	mov    ecx,0x19
10007175:	89 c7                	mov    edi,eax
10007177:	89 d6                	mov    esi,edx
10007179:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000717b:	e9 a8 fe ff ff       	jmp    10007028 <NFrame::getDrawRegion()+0x36>
10007180:	90                   	nop
10007181:	e9 a2 fe ff ff       	jmp    10007028 <NFrame::getDrawRegion()+0x36>
10007186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007189:	89 85 44 ff ff ff    	mov    DWORD PTR [ebp-0xbc],eax
1000718f:	83 ec 04             	sub    esp,0x4
10007192:	83 ec 1c             	sub    esp,0x1c
10007195:	89 e0                	mov    eax,esp
10007197:	89 c3                	mov    ebx,eax
10007199:	8d 45 c4             	lea    eax,[ebp-0x3c]
1000719c:	ba 07 00 00 00       	mov    edx,0x7
100071a1:	89 df                	mov    edi,ebx
100071a3:	89 c6                	mov    esi,eax
100071a5:	89 d1                	mov    ecx,edx
100071a7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100071a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100071ac:	83 ec 1c             	sub    esp,0x1c
100071af:	89 e2                	mov    edx,esp
100071b1:	8d 58 14             	lea    ebx,[eax+0x14]
100071b4:	b8 07 00 00 00       	mov    eax,0x7
100071b9:	89 d7                	mov    edi,edx
100071bb:	89 de                	mov    esi,ebx
100071bd:	89 c1                	mov    ecx,eax
100071bf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100071c1:	ff b5 44 ff ff ff    	push   DWORD PTR [ebp-0xbc]
100071c7:	e8 fc ff ff ff       	call   100071c8 <NFrame::getDrawRegion()+0x1d6>	100071c8: R_386_PC32	getRegionDifference(Region, Region)
100071cc:	83 c4 3c             	add    esp,0x3c
100071cf:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071d2:	83 ec 0c             	sub    esp,0xc
100071d5:	50                   	push   eax
100071d6:	e8 fc ff ff ff       	call   100071d7 <NFrame::getDrawRegion()+0x1e5>	100071d7: R_386_PC32	free
100071db:	83 c4 10             	add    esp,0x10
100071de:	90                   	nop
100071df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100071e2:	8d 65 f4             	lea    esp,[ebp-0xc]
100071e5:	5b                   	pop    ebx
100071e6:	5e                   	pop    esi
100071e7:	5f                   	pop    edi
100071e8:	5d                   	pop    ebp
100071e9:	c2 04 00             	ret    0x4

100071ec <NFrame::regenerateRegion()>:
100071ec:	55                   	push   ebp
100071ed:	89 e5                	mov    ebp,esp
100071ef:	57                   	push   edi
100071f0:	56                   	push   esi
100071f1:	53                   	push   ebx
100071f2:	83 ec 6c             	sub    esp,0x6c
100071f5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100071f8:	8d 45 94             	lea    eax,[ebp-0x6c]
100071fb:	8d 5a 14             	lea    ebx,[edx+0x14]
100071fe:	ba 07 00 00 00       	mov    edx,0x7
10007203:	89 c7                	mov    edi,eax
10007205:	89 de                	mov    esi,ebx
10007207:	89 d1                	mov    ecx,edx
10007209:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000720b:	8b 75 9c             	mov    esi,DWORD PTR [ebp-0x64]
1000720e:	8b 5d 98             	mov    ebx,DWORD PTR [ebp-0x68]
10007211:	8b 4d a8             	mov    ecx,DWORD PTR [ebp-0x58]
10007214:	8b 55 a4             	mov    edx,DWORD PTR [ebp-0x5c]
10007217:	8d 45 b0             	lea    eax,[ebp-0x50]
1000721a:	83 ec 0c             	sub    esp,0xc
1000721d:	56                   	push   esi
1000721e:	53                   	push   ebx
1000721f:	51                   	push   ecx
10007220:	52                   	push   edx
10007221:	50                   	push   eax
10007222:	e8 fc ff ff ff       	call   10007223 <NFrame::regenerateRegion()+0x37>	10007223: R_386_PC32	createRectangleRegion(int, int, int, int)
10007227:	83 c4 1c             	add    esp,0x1c
1000722a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000722d:	8d 58 14             	lea    ebx,[eax+0x14]
10007230:	8d 45 b0             	lea    eax,[ebp-0x50]
10007233:	ba 19 00 00 00       	mov    edx,0x19
10007238:	89 df                	mov    edi,ebx
1000723a:	89 c6                	mov    esi,eax
1000723c:	89 d1                	mov    ecx,edx
1000723e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10007240:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
10007243:	83 ec 0c             	sub    esp,0xc
10007246:	50                   	push   eax
10007247:	e8 fc ff ff ff       	call   10007248 <NFrame::regenerateRegion()+0x5c>	10007248: R_386_PC32	free
1000724c:	83 c4 10             	add    esp,0x10
1000724f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007252:	8a 40 69             	mov    al,BYTE PTR [eax+0x69]
10007255:	84 c0                	test   al,al
10007257:	74 68                	je     100072c1 <NFrame::regenerateRegion()+0xd5>
10007259:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000725c:	8d 45 94             	lea    eax,[ebp-0x6c]
1000725f:	8d 5a 30             	lea    ebx,[edx+0x30]
10007262:	ba 19 00 00 00       	mov    edx,0x19
10007267:	89 c7                	mov    edi,eax
10007269:	89 de                	mov    esi,ebx
1000726b:	89 d1                	mov    ecx,edx
1000726d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000726f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007272:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
10007275:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007278:	8b 58 18             	mov    ebx,DWORD PTR [eax+0x18]
1000727b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000727e:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
10007281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007284:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
10007287:	8d 45 cc             	lea    eax,[ebp-0x34]
1000728a:	83 ec 08             	sub    esp,0x8
1000728d:	6a 02                	push   0x2
1000728f:	56                   	push   esi
10007290:	53                   	push   ebx
10007291:	51                   	push   ecx
10007292:	52                   	push   edx
10007293:	50                   	push   eax
10007294:	e8 fc ff ff ff       	call   10007295 <NFrame::regenerateRegion()+0xa9>	10007295: R_386_PC32	createAntRegion(int, int, int, int, int)
10007299:	83 c4 1c             	add    esp,0x1c
1000729c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000729f:	8d 58 30             	lea    ebx,[eax+0x30]
100072a2:	8d 45 cc             	lea    eax,[ebp-0x34]
100072a5:	ba 19 00 00 00       	mov    edx,0x19
100072aa:	89 df                	mov    edi,ebx
100072ac:	89 c6                	mov    esi,eax
100072ae:	89 d1                	mov    ecx,edx
100072b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100072b2:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
100072b5:	83 ec 0c             	sub    esp,0xc
100072b8:	50                   	push   eax
100072b9:	e8 fc ff ff ff       	call   100072ba <NFrame::regenerateRegion()+0xce>	100072ba: R_386_PC32	free
100072be:	83 c4 10             	add    esp,0x10
100072c1:	90                   	nop
100072c2:	8d 65 f4             	lea    esp,[ebp-0xc]
100072c5:	5b                   	pop    ebx
100072c6:	5e                   	pop    esi
100072c7:	5f                   	pop    edi
100072c8:	5d                   	pop    ebp
100072c9:	c3                   	ret    

100072ca <NFrame::hasTitleBar()>:
100072ca:	55                   	push   ebp
100072cb:	89 e5                	mov    ebp,esp
100072cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100072d0:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
100072d3:	83 e0 08             	and    eax,0x8
100072d6:	85 c0                	test   eax,eax
100072d8:	75 11                	jne    100072eb <NFrame::hasTitleBar()+0x21>
100072da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100072dd:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
100072e0:	83 e0 01             	and    eax,0x1
100072e3:	85 c0                	test   eax,eax
100072e5:	75 04                	jne    100072eb <NFrame::hasTitleBar()+0x21>
100072e7:	b0 01                	mov    al,0x1
100072e9:	eb 02                	jmp    100072ed <NFrame::hasTitleBar()+0x23>
100072eb:	b0 00                	mov    al,0x0
100072ed:	5d                   	pop    ebp
100072ee:	c3                   	ret    
100072ef:	90                   	nop

100072f0 <NFrame::isHiddenOverall()>:
100072f0:	55                   	push   ebp
100072f1:	89 e5                	mov    ebp,esp
100072f3:	83 ec 08             	sub    esp,0x8
100072f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100072f9:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
100072fc:	84 c0                	test   al,al
100072fe:	75 20                	jne    10007320 <NFrame::isHiddenOverall()+0x30>
10007300:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007303:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10007306:	85 c0                	test   eax,eax
10007308:	74 1a                	je     10007324 <NFrame::isHiddenOverall()+0x34>
1000730a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000730d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10007310:	83 ec 0c             	sub    esp,0xc
10007313:	50                   	push   eax
10007314:	e8 fc ff ff ff       	call   10007315 <NFrame::isHiddenOverall()+0x25>	10007315: R_386_PC32	NFrame::isHiddenOverall()
10007319:	83 c4 10             	add    esp,0x10
1000731c:	84 c0                	test   al,al
1000731e:	74 04                	je     10007324 <NFrame::isHiddenOverall()+0x34>
10007320:	b0 01                	mov    al,0x1
10007322:	eb 02                	jmp    10007326 <NFrame::isHiddenOverall()+0x36>
10007324:	b0 00                	mov    al,0x0
10007326:	c9                   	leave  
10007327:	c3                   	ret    

10007328 <NFrame::tryInvalidate()>:
10007328:	55                   	push   ebp
10007329:	89 e5                	mov    ebp,esp
1000732b:	57                   	push   edi
1000732c:	56                   	push   esi
1000732d:	53                   	push   ebx
1000732e:	83 ec 2c             	sub    esp,0x2c
10007331:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007334:	8a 40 69             	mov    al,BYTE PTR [eax+0x69]
10007337:	84 c0                	test   al,al
10007339:	74 5c                	je     10007397 <NFrame::tryInvalidate()+0x6f>
1000733b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000733e:	8d 45 cc             	lea    eax,[ebp-0x34]
10007341:	8d 5a 30             	lea    ebx,[edx+0x30]
10007344:	ba 07 00 00 00       	mov    edx,0x7
10007349:	89 c7                	mov    edi,eax
1000734b:	89 de                	mov    esi,ebx
1000734d:	89 d1                	mov    ecx,edx
1000734f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007351:	83 ec 0c             	sub    esp,0xc
10007354:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007357:	e8 fc ff ff ff       	call   10007358 <NFrame::tryInvalidate()+0x30>	10007358: R_386_PC32	NFrame::getAbsX()
1000735c:	83 c4 10             	add    esp,0x10
1000735f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10007362:	83 ec 0c             	sub    esp,0xc
10007365:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007368:	e8 fc ff ff ff       	call   10007369 <NFrame::tryInvalidate()+0x41>	10007369: R_386_PC32	NFrame::getAbsY()
1000736d:	83 c4 10             	add    esp,0x10
10007370:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10007373:	83 ec 1c             	sub    esp,0x1c
10007376:	89 e0                	mov    eax,esp
10007378:	89 c3                	mov    ebx,eax
1000737a:	8d 45 cc             	lea    eax,[ebp-0x34]
1000737d:	ba 07 00 00 00       	mov    edx,0x7
10007382:	89 df                	mov    edi,ebx
10007384:	89 c6                	mov    esi,eax
10007386:	89 d1                	mov    ecx,edx
10007388:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000738a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000738d:	e8 fc ff ff ff       	call   1000738e <NFrame::tryInvalidate()+0x66>	1000738e: R_386_PC32	NFrame::markRegionAsDirty(Region)
10007392:	83 c4 20             	add    esp,0x20
10007395:	eb 23                	jmp    100073ba <NFrame::tryInvalidate()+0x92>
10007397:	83 ec 0c             	sub    esp,0xc
1000739a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000739d:	e8 fc ff ff ff       	call   1000739e <NFrame::tryInvalidate()+0x76>	1000739e: R_386_PC32	NFrame::isHiddenOverall()
100073a2:	83 c4 10             	add    esp,0x10
100073a5:	83 f0 01             	xor    eax,0x1
100073a8:	84 c0                	test   al,al
100073aa:	74 0e                	je     100073ba <NFrame::tryInvalidate()+0x92>
100073ac:	83 ec 0c             	sub    esp,0xc
100073af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100073b2:	e8 fc ff ff ff       	call   100073b3 <NFrame::tryInvalidate()+0x8b>	100073b3: R_386_PC32	NFrame::invalidate()
100073b7:	83 c4 10             	add    esp,0x10
100073ba:	8d 65 f4             	lea    esp,[ebp-0xc]
100073bd:	5b                   	pop    ebx
100073be:	5e                   	pop    esi
100073bf:	5f                   	pop    edi
100073c0:	5d                   	pop    ebp
100073c1:	c3                   	ret    

100073c2 <NFrame::getAbsX()>:
100073c2:	55                   	push   ebp
100073c3:	89 e5                	mov    ebp,esp
100073c5:	83 ec 08             	sub    esp,0x8
100073c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100073cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100073ce:	85 c0                	test   eax,eax
100073d0:	74 1e                	je     100073f0 <NFrame::getAbsX()+0x2e>
100073d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100073d5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100073d8:	83 ec 0c             	sub    esp,0xc
100073db:	50                   	push   eax
100073dc:	e8 fc ff ff ff       	call   100073dd <NFrame::getAbsX()+0x1b>	100073dd: R_386_PC32	NFrame::getAbsX()
100073e1:	83 c4 10             	add    esp,0x10
100073e4:	89 c2                	mov    edx,eax
100073e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100073e9:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
100073ec:	01 d0                	add    eax,edx
100073ee:	eb 06                	jmp    100073f6 <NFrame::getAbsX()+0x34>
100073f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100073f3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
100073f6:	c9                   	leave  
100073f7:	c3                   	ret    

100073f8 <NFrame::getAbsY()>:
100073f8:	55                   	push   ebp
100073f9:	89 e5                	mov    ebp,esp
100073fb:	83 ec 08             	sub    esp,0x8
100073fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007401:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10007404:	85 c0                	test   eax,eax
10007406:	74 1e                	je     10007426 <NFrame::getAbsY()+0x2e>
10007408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000740b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
1000740e:	83 ec 0c             	sub    esp,0xc
10007411:	50                   	push   eax
10007412:	e8 fc ff ff ff       	call   10007413 <NFrame::getAbsY()+0x1b>	10007413: R_386_PC32	NFrame::getAbsY()
10007417:	83 c4 10             	add    esp,0x10
1000741a:	89 c2                	mov    edx,eax
1000741c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000741f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
10007422:	01 d0                	add    eax,edx
10007424:	eb 06                	jmp    1000742c <NFrame::getAbsY()+0x34>
10007426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007429:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
1000742c:	c9                   	leave  
1000742d:	c3                   	ret    

1000742e <NFrame::repaint(Video*, Region)>:
1000742e:	55                   	push   ebp
1000742f:	89 e5                	mov    ebp,esp
10007431:	57                   	push   edi
10007432:	56                   	push   esi
10007433:	53                   	push   ebx
10007434:	83 ec 5c             	sub    esp,0x5c
10007437:	8d 45 cc             	lea    eax,[ebp-0x34]
1000743a:	83 ec 08             	sub    esp,0x8
1000743d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007440:	50                   	push   eax
10007441:	e8 fc ff ff ff       	call   10007442 <NFrame::repaint(Video*, Region)+0x14>	10007442: R_386_PC32	NFrame::getDirtyRegion()
10007446:	83 c4 0c             	add    esp,0xc
10007449:	8d 45 b0             	lea    eax,[ebp-0x50]
1000744c:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
1000744f:	83 ec 04             	sub    esp,0x4
10007452:	6a 01                	push   0x1
10007454:	83 ec 1c             	sub    esp,0x1c
10007457:	89 e0                	mov    eax,esp
10007459:	89 c3                	mov    ebx,eax
1000745b:	8d 45 cc             	lea    eax,[ebp-0x34]
1000745e:	ba 07 00 00 00       	mov    edx,0x7
10007463:	89 df                	mov    edi,ebx
10007465:	89 c6                	mov    esi,eax
10007467:	89 d1                	mov    ecx,edx
10007469:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000746b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000746e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007471:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10007474:	e8 fc ff ff ff       	call   10007475 <NFrame::repaint(Video*, Region)+0x47>	10007475: R_386_PC32	NFrame::repaintAux(Video*, Region, bool)
10007479:	83 c4 2c             	add    esp,0x2c
1000747c:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
1000747f:	83 ec 0c             	sub    esp,0xc
10007482:	50                   	push   eax
10007483:	e8 fc ff ff ff       	call   10007484 <NFrame::repaint(Video*, Region)+0x56>	10007484: R_386_PC32	free
10007488:	83 c4 10             	add    esp,0x10
1000748b:	90                   	nop
1000748c:	8d 65 f4             	lea    esp,[ebp-0xc]
1000748f:	5b                   	pop    ebx
10007490:	5e                   	pop    esi
10007491:	5f                   	pop    edi
10007492:	5d                   	pop    ebp
10007493:	c3                   	ret    

10007494 <NFrame::paintSolid(NFrame::Graphics, unsigned int)>:
10007494:	55                   	push   ebp
10007495:	89 e5                	mov    ebp,esp
10007497:	57                   	push   edi
10007498:	56                   	push   esi
10007499:	53                   	push   ebx
1000749a:	83 ec 1c             	sub    esp,0x1c
1000749d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100074a0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100074a3:	83 ec 0c             	sub    esp,0xc
100074a6:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
100074a9:	83 ec 1c             	sub    esp,0x1c
100074ac:	89 e0                	mov    eax,esp
100074ae:	89 c3                	mov    ebx,eax
100074b0:	8d 45 10             	lea    eax,[ebp+0x10]
100074b3:	ba 07 00 00 00       	mov    edx,0x7
100074b8:	89 df                	mov    edi,ebx
100074ba:	89 c6                	mov    esi,eax
100074bc:	89 d1                	mov    ecx,edx
100074be:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100074c0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
100074c3:	e8 fc ff ff ff       	call   100074c4 <NFrame::paintSolid(NFrame::Graphics, unsigned int)+0x30>	100074c4: R_386_PC32	fillRegion(Video*, Region, unsigned int)
100074c8:	83 c4 30             	add    esp,0x30
100074cb:	90                   	nop
100074cc:	8d 65 f4             	lea    esp,[ebp-0xc]
100074cf:	5b                   	pop    ebx
100074d0:	5e                   	pop    esi
100074d1:	5f                   	pop    edi
100074d2:	5d                   	pop    ebp
100074d3:	c3                   	ret    

100074d4 <NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)>:
100074d4:	55                   	push   ebp
100074d5:	89 e5                	mov    ebp,esp
100074d7:	57                   	push   edi
100074d8:	56                   	push   esi
100074d9:	53                   	push   ebx
100074da:	83 ec 2c             	sub    esp,0x2c
100074dd:	83 ec 0c             	sub    esp,0xc
100074e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100074e3:	e8 fc ff ff ff       	call   100074e4 <NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)+0x10>	100074e4: R_386_PC32	NFrame::getAbsY()
100074e8:	83 c4 10             	add    esp,0x10
100074eb:	89 c2                	mov    edx,eax
100074ed:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
100074f0:	8d 1c 02             	lea    ebx,[edx+eax*1]
100074f3:	83 ec 0c             	sub    esp,0xc
100074f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100074f9:	e8 fc ff ff ff       	call   100074fa <NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)+0x26>	100074fa: R_386_PC32	NFrame::getAbsX()
100074fe:	83 c4 10             	add    esp,0x10
10007501:	89 c2                	mov    edx,eax
10007503:	8b 45 2c             	mov    eax,DWORD PTR [ebp+0x2c]
10007506:	01 c2                	add    edx,eax
10007508:	8d 45 cc             	lea    eax,[ebp-0x34]
1000750b:	83 ec 0c             	sub    esp,0xc
1000750e:	ff 75 38             	push   DWORD PTR [ebp+0x38]
10007511:	ff 75 34             	push   DWORD PTR [ebp+0x34]
10007514:	53                   	push   ebx
10007515:	52                   	push   edx
10007516:	50                   	push   eax
10007517:	e8 fc ff ff ff       	call   10007518 <NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)+0x44>	10007518: R_386_PC32	createRectangleRegion(int, int, int, int)
1000751c:	83 c4 1c             	add    esp,0x1c
1000751f:	83 ec 0c             	sub    esp,0xc
10007522:	ff 75 3c             	push   DWORD PTR [ebp+0x3c]
10007525:	83 ec 20             	sub    esp,0x20
10007528:	89 e0                	mov    eax,esp
1000752a:	89 c3                	mov    ebx,eax
1000752c:	8d 45 0c             	lea    eax,[ebp+0xc]
1000752f:	ba 08 00 00 00       	mov    edx,0x8
10007534:	89 df                	mov    edi,ebx
10007536:	89 c6                	mov    esi,eax
10007538:	89 d1                	mov    ecx,edx
1000753a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000753c:	83 ec 1c             	sub    esp,0x1c
1000753f:	89 e0                	mov    eax,esp
10007541:	89 c3                	mov    ebx,eax
10007543:	8d 45 cc             	lea    eax,[ebp-0x34]
10007546:	ba 07 00 00 00       	mov    edx,0x7
1000754b:	89 df                	mov    edi,ebx
1000754d:	89 c6                	mov    esi,eax
1000754f:	89 d1                	mov    ecx,edx
10007551:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007553:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007556:	e8 fc ff ff ff       	call   10007557 <NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)+0x83>	10007557: R_386_PC32	NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)
1000755b:	83 c4 50             	add    esp,0x50
1000755e:	90                   	nop
1000755f:	8d 65 f4             	lea    esp,[ebp-0xc]
10007562:	5b                   	pop    ebx
10007563:	5e                   	pop    esi
10007564:	5f                   	pop    edi
10007565:	5d                   	pop    ebp
10007566:	c3                   	ret    
10007567:	90                   	nop

10007568 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)>:
10007568:	55                   	push   ebp
10007569:	89 e5                	mov    ebp,esp
1000756b:	57                   	push   edi
1000756c:	56                   	push   esi
1000756d:	53                   	push   ebx
1000756e:	81 ec bc 00 00 00    	sub    esp,0xbc
10007574:	83 7d 3c ff          	cmp    DWORD PTR [ebp+0x3c],0xffffffff
10007578:	75 46                	jne    100075c0 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x58>
1000757a:	6a 00                	push   0x0
1000757c:	6a 0c                	push   0xc
1000757e:	68 e8 8c 00 10       	push   0x10008ce8	1000757f: R_386_32	.text
10007583:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10007589:	50                   	push   eax
1000758a:	e8 fc ff ff ff       	call   1000758b <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x23>	1000758b: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
1000758f:	83 c4 10             	add    esp,0x10
10007592:	83 ec 08             	sub    esp,0x8
10007595:	81 ec 88 00 00 00    	sub    esp,0x88
1000759b:	89 e0                	mov    eax,esp
1000759d:	89 c3                	mov    ebx,eax
1000759f:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
100075a5:	ba 22 00 00 00       	mov    edx,0x22
100075aa:	89 df                	mov    edi,ebx
100075ac:	89 c6                	mov    esi,eax
100075ae:	89 d1                	mov    ecx,edx
100075b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100075b2:	e8 fc ff ff ff       	call   100075b3 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x4b>	100075b3: R_386_PC32	getFontHandle(FontStyle)
100075b7:	81 c4 90 00 00 00    	add    esp,0x90
100075bd:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
100075c0:	83 ec 0c             	sub    esp,0xc
100075c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100075c6:	e8 fc ff ff ff       	call   100075c7 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x5f>	100075c7: R_386_PC32	NFrame::getAbsX()
100075cb:	83 c4 10             	add    esp,0x10
100075ce:	01 45 2c             	add    DWORD PTR [ebp+0x2c],eax
100075d1:	83 ec 0c             	sub    esp,0xc
100075d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100075d7:	e8 fc ff ff ff       	call   100075d8 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x70>	100075d8: R_386_PC32	NFrame::getAbsY()
100075dc:	83 c4 10             	add    esp,0x10
100075df:	01 45 30             	add    DWORD PTR [ebp+0x30],eax
100075e2:	8b 45 2c             	mov    eax,DWORD PTR [ebp+0x2c]
100075e5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100075e8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100075ef:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100075f6:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
100075f9:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
100075fc:	01 d0                	add    eax,edx
100075fe:	8a 00                	mov    al,BYTE PTR [eax]
10007600:	84 c0                	test   al,al
10007602:	0f 84 9e 00 00 00    	je     100076a6 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x13e>
10007608:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
1000760b:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
1000760e:	01 d0                	add    eax,edx
10007610:	8a 00                	mov    al,BYTE PTR [eax]
10007612:	3c 0a                	cmp    al,0xa
10007614:	75 15                	jne    1000762b <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0xc3>
10007616:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10007619:	01 45 30             	add    DWORD PTR [ebp+0x30],eax
1000761c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10007623:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10007626:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
10007629:	eb 73                	jmp    1000769e <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x136>
1000762b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
1000762e:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
10007631:	01 d0                	add    eax,edx
10007633:	8a 00                	mov    al,BYTE PTR [eax]
10007635:	0f be c0             	movsx  eax,al
10007638:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000763b:	89 8d 44 ff ff ff    	mov    DWORD PTR [ebp-0xbc],ecx
10007641:	83 ec 0c             	sub    esp,0xc
10007644:	ff 75 38             	push   DWORD PTR [ebp+0x38]
10007647:	ff 75 30             	push   DWORD PTR [ebp+0x30]
1000764a:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
1000764d:	50                   	push   eax
1000764e:	ff 75 3c             	push   DWORD PTR [ebp+0x3c]
10007651:	83 ec 1c             	sub    esp,0x1c
10007654:	89 e0                	mov    eax,esp
10007656:	89 c3                	mov    ebx,eax
10007658:	8d 45 10             	lea    eax,[ebp+0x10]
1000765b:	ba 07 00 00 00       	mov    edx,0x7
10007660:	89 df                	mov    edi,ebx
10007662:	89 c6                	mov    esi,eax
10007664:	89 d1                	mov    ecx,edx
10007666:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007668:	ff b5 44 ff ff ff    	push   DWORD PTR [ebp-0xbc]
1000766e:	e8 fc ff ff ff       	call   1000766f <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x107>	1000766f: R_386_PC32	drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)
10007673:	83 c4 40             	add    esp,0x40
10007676:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10007679:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
1000767c:	0f b7 d0             	movzx  edx,ax
1000767f:	8b 45 2c             	mov    eax,DWORD PTR [ebp+0x2c]
10007682:	01 d0                	add    eax,edx
10007684:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
10007687:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
1000768a:	c1 e8 10             	shr    eax,0x10
1000768d:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10007690:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10007693:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
10007696:	7e 06                	jle    1000769e <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x136>
10007698:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
1000769b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000769e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
100076a1:	e9 50 ff ff ff       	jmp    100075f6 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x8e>
100076a6:	90                   	nop
100076a7:	8d 65 f4             	lea    esp,[ebp-0xc]
100076aa:	5b                   	pop    ebx
100076ab:	5e                   	pop    esi
100076ac:	5f                   	pop    edi
100076ad:	5d                   	pop    ebp
100076ae:	c3                   	ret    
100076af:	90                   	nop

100076b0 <NFrame::getTitlebarHeight()>:
100076b0:	55                   	push   ebp
100076b1:	89 e5                	mov    ebp,esp
100076b3:	83 ec 08             	sub    esp,0x8
100076b6:	83 ec 0c             	sub    esp,0xc
100076b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100076bc:	e8 fc ff ff ff       	call   100076bd <NFrame::getTitlebarHeight()+0xd>	100076bd: R_386_PC32	NFrame::hasTitleBar()
100076c1:	83 c4 10             	add    esp,0x10
100076c4:	84 c0                	test   al,al
100076c6:	74 0b                	je     100076d3 <NFrame::getTitlebarHeight()+0x23>
100076c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100076cb:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
100076d1:	eb 05                	jmp    100076d8 <NFrame::getTitlebarHeight()+0x28>
100076d3:	b8 00 00 00 00       	mov    eax,0x0
100076d8:	c9                   	leave  
100076d9:	c3                   	ret    

100076da <NWindow::NWindow(int, int, int, int, char const*, int)>:
100076da:	55                   	push   ebp
100076db:	89 e5                	mov    ebp,esp
100076dd:	57                   	push   edi
100076de:	56                   	push   esi
100076df:	53                   	push   ebx
100076e0:	83 ec 3c             	sub    esp,0x3c
100076e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100076e6:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
100076e9:	8d 45 cc             	lea    eax,[ebp-0x34]
100076ec:	83 ec 0c             	sub    esp,0xc
100076ef:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100076f2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
100076f5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
100076f8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100076fb:	50                   	push   eax
100076fc:	e8 fc ff ff ff       	call   100076fd <NWindow::NWindow(int, int, int, int, char const*, int)+0x23>	100076fd: R_386_PC32	createRectangleRegion(int, int, int, int)
10007701:	83 c4 1c             	add    esp,0x1c
10007704:	83 ec 1c             	sub    esp,0x1c
10007707:	89 e0                	mov    eax,esp
10007709:	89 c3                	mov    ebx,eax
1000770b:	8d 45 cc             	lea    eax,[ebp-0x34]
1000770e:	ba 07 00 00 00       	mov    edx,0x7
10007713:	89 df                	mov    edi,ebx
10007715:	89 c6                	mov    esi,eax
10007717:	89 d1                	mov    ecx,edx
10007719:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000771b:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000771e:	e8 fc ff ff ff       	call   1000771f <NWindow::NWindow(int, int, int, int, char const*, int)+0x45>	1000771f: R_386_PC32	NFrame::NFrame(Region)
10007723:	83 c4 20             	add    esp,0x20
10007726:	ba 08 00 00 00       	mov    edx,0x8	10007727: R_386_32	vtable for NWindow
1000772b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000772e:	89 10                	mov    DWORD PTR [eax],edx
10007730:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007733:	c7 80 88 00 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x88],0x3
1000773d:	c6 45 cb 00          	mov    BYTE PTR [ebp-0x35],0x0
10007741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007744:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
10007747:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
1000774a:	83 7d 1c 00          	cmp    DWORD PTR [ebp+0x1c],0x0
1000774e:	75 06                	jne    10007756 <NWindow::NWindow(int, int, int, int, char const*, int)+0x7c>
10007750:	8d 45 cb             	lea    eax,[ebp-0x35]
10007753:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
10007756:	83 ec 0c             	sub    esp,0xc
10007759:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
1000775c:	e8 fc ff ff ff       	call   1000775d <NWindow::NWindow(int, int, int, int, char const*, int)+0x83>	1000775d: R_386_PC32	strlen
10007761:	83 c4 10             	add    esp,0x10
10007764:	40                   	inc    eax
10007765:	83 ec 0c             	sub    esp,0xc
10007768:	50                   	push   eax
10007769:	e8 fc ff ff ff       	call   1000776a <NWindow::NWindow(int, int, int, int, char const*, int)+0x90>	1000776a: R_386_PC32	malloc
1000776e:	83 c4 10             	add    esp,0x10
10007771:	89 c2                	mov    edx,eax
10007773:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007776:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
1000777c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000777f:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
10007785:	83 ec 08             	sub    esp,0x8
10007788:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
1000778b:	50                   	push   eax
1000778c:	e8 fc ff ff ff       	call   1000778d <NWindow::NWindow(int, int, int, int, char const*, int)+0xb3>	1000778d: R_386_PC32	strcpy
10007791:	83 c4 10             	add    esp,0x10
10007794:	83 ec 0c             	sub    esp,0xc
10007797:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000779a:	e8 fc ff ff ff       	call   1000779b <NWindow::NWindow(int, int, int, int, char const*, int)+0xc1>	1000779b: R_386_PC32	NWindow::clipCornersIfNeededToMakeShadows()
1000779f:	83 c4 10             	add    esp,0x10
100077a2:	90                   	nop
100077a3:	8d 65 f4             	lea    esp,[ebp-0xc]
100077a6:	5b                   	pop    ebx
100077a7:	5e                   	pop    esi
100077a8:	5f                   	pop    edi
100077a9:	5d                   	pop    ebp
100077aa:	c3                   	ret    
100077ab:	90                   	nop

100077ac <NWindow::getChildAllowableRegion()>:
100077ac:	55                   	push   ebp
100077ad:	89 e5                	mov    ebp,esp
100077af:	57                   	push   edi
100077b0:	56                   	push   esi
100077b1:	53                   	push   ebx
100077b2:	83 ec 2c             	sub    esp,0x2c
100077b5:	83 ec 0c             	sub    esp,0xc
100077b8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100077bb:	e8 fc ff ff ff       	call   100077bc <NWindow::getChildAllowableRegion()+0x10>	100077bc: R_386_PC32	NWindow::allowShadows()
100077c0:	83 c4 10             	add    esp,0x10
100077c3:	84 c0                	test   al,al
100077c5:	0f 84 9e 00 00 00    	je     10007869 <NWindow::getChildAllowableRegion()+0xbd>
100077cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100077ce:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
100077d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100077d4:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
100077da:	29 c2                	sub    edx,eax
100077dc:	89 d0                	mov    eax,edx
100077de:	8d 58 fe             	lea    ebx,[eax-0x2]
100077e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100077e4:	83 ec 0c             	sub    esp,0xc
100077e7:	50                   	push   eax
100077e8:	e8 fc ff ff ff       	call   100077e9 <NWindow::getChildAllowableRegion()+0x3d>	100077e9: R_386_PC32	NFrame::getTitlebarHeight()
100077ed:	83 c4 10             	add    esp,0x10
100077f0:	89 df                	mov    edi,ebx
100077f2:	29 c7                	sub    edi,eax
100077f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100077f7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
100077fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100077fd:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
10007803:	29 c2                	sub    edx,eax
10007805:	89 d0                	mov    eax,edx
10007807:	8d 70 fe             	lea    esi,[eax-0x2]
1000780a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000780d:	83 ec 0c             	sub    esp,0xc
10007810:	50                   	push   eax
10007811:	e8 fc ff ff ff       	call   10007812 <NWindow::getChildAllowableRegion()+0x66>	10007812: R_386_PC32	NFrame::getAbsY()
10007816:	83 c4 10             	add    esp,0x10
10007819:	8d 58 01             	lea    ebx,[eax+0x1]
1000781c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000781f:	83 ec 0c             	sub    esp,0xc
10007822:	50                   	push   eax
10007823:	e8 fc ff ff ff       	call   10007824 <NWindow::getChildAllowableRegion()+0x78>	10007824: R_386_PC32	NFrame::getTitlebarHeight()
10007828:	83 c4 10             	add    esp,0x10
1000782b:	01 c3                	add    ebx,eax
1000782d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10007830:	83 ec 0c             	sub    esp,0xc
10007833:	50                   	push   eax
10007834:	e8 fc ff ff ff       	call   10007835 <NWindow::getChildAllowableRegion()+0x89>	10007835: R_386_PC32	NFrame::getAbsX()
10007839:	83 c4 10             	add    esp,0x10
1000783c:	8d 50 01             	lea    edx,[eax+0x1]
1000783f:	8d 45 cc             	lea    eax,[ebp-0x34]
10007842:	83 ec 0c             	sub    esp,0xc
10007845:	57                   	push   edi
10007846:	56                   	push   esi
10007847:	53                   	push   ebx
10007848:	52                   	push   edx
10007849:	50                   	push   eax
1000784a:	e8 fc ff ff ff       	call   1000784b <NWindow::getChildAllowableRegion()+0x9f>	1000784b: R_386_PC32	createRectangleRegion(int, int, int, int)
1000784f:	83 c4 1c             	add    esp,0x1c
10007852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007855:	89 c3                	mov    ebx,eax
10007857:	8d 45 cc             	lea    eax,[ebp-0x34]
1000785a:	ba 07 00 00 00       	mov    edx,0x7
1000785f:	89 df                	mov    edi,ebx
10007861:	89 c6                	mov    esi,eax
10007863:	89 d1                	mov    ecx,edx
10007865:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007867:	eb 13                	jmp    1000787c <NWindow::getChildAllowableRegion()+0xd0>
10007869:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000786c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000786f:	83 ec 08             	sub    esp,0x8
10007872:	52                   	push   edx
10007873:	50                   	push   eax
10007874:	e8 fc ff ff ff       	call   10007875 <NWindow::getChildAllowableRegion()+0xc9>	10007875: R_386_PC32	NFrame::getChildAllowableRegion()
10007879:	83 c4 0c             	add    esp,0xc
1000787c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000787f:	8d 65 f4             	lea    esp,[ebp-0xc]
10007882:	5b                   	pop    ebx
10007883:	5e                   	pop    esi
10007884:	5f                   	pop    edi
10007885:	5d                   	pop    ebp
10007886:	c2 04 00             	ret    0x4
10007889:	90                   	nop

1000788a <NWindow::allowShadows()>:
1000788a:	55                   	push   ebp
1000788b:	89 e5                	mov    ebp,esp
1000788d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007890:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007893:	83 e0 04             	and    eax,0x4
10007896:	85 c0                	test   eax,eax
10007898:	75 11                	jne    100078ab <NWindow::allowShadows()+0x21>
1000789a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000789d:	8a 40 70             	mov    al,BYTE PTR [eax+0x70]
100078a0:	83 f0 01             	xor    eax,0x1
100078a3:	84 c0                	test   al,al
100078a5:	74 04                	je     100078ab <NWindow::allowShadows()+0x21>
100078a7:	b0 01                	mov    al,0x1
100078a9:	eb 02                	jmp    100078ad <NWindow::allowShadows()+0x23>
100078ab:	b0 00                	mov    al,0x0
100078ad:	5d                   	pop    ebp
100078ae:	c3                   	ret    
100078af:	90                   	nop

100078b0 <NWindow::clipCornersIfNeededToMakeShadows()>:
100078b0:	55                   	push   ebp
100078b1:	89 e5                	mov    ebp,esp
100078b3:	57                   	push   edi
100078b4:	56                   	push   esi
100078b5:	53                   	push   ebx
100078b6:	81 ec 8c 00 00 00    	sub    esp,0x8c
100078bc:	83 ec 0c             	sub    esp,0xc
100078bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100078c2:	e8 fc ff ff ff       	call   100078c3 <NWindow::clipCornersIfNeededToMakeShadows()+0x13>	100078c3: R_386_PC32	NWindow::allowShadows()
100078c7:	83 c4 10             	add    esp,0x10
100078ca:	84 c0                	test   al,al
100078cc:	0f 84 85 01 00 00    	je     10007a57 <NWindow::clipCornersIfNeededToMakeShadows()+0x1a7>
100078d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100078d5:	c7 80 88 00 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x88],0x3
100078df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100078e2:	8b 98 88 00 00 00    	mov    ebx,DWORD PTR [eax+0x88]
100078e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100078eb:	8b 88 88 00 00 00    	mov    ecx,DWORD PTR [eax+0x88]
100078f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100078f4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
100078f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100078fa:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
100078fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007900:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10007903:	01 c6                	add    esi,eax
10007905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007908:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
1000790e:	29 c6                	sub    esi,eax
10007910:	8d 45 cc             	lea    eax,[ebp-0x34]
10007913:	83 ec 0c             	sub    esp,0xc
10007916:	53                   	push   ebx
10007917:	51                   	push   ecx
10007918:	52                   	push   edx
10007919:	56                   	push   esi
1000791a:	50                   	push   eax
1000791b:	e8 fc ff ff ff       	call   1000791c <NWindow::clipCornersIfNeededToMakeShadows()+0x6c>	1000791c: R_386_PC32	createRectangleRegion(int, int, int, int)
10007920:	83 c4 1c             	add    esp,0x1c
10007923:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007926:	8b 98 88 00 00 00    	mov    ebx,DWORD PTR [eax+0x88]
1000792c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000792f:	8b 88 88 00 00 00    	mov    ecx,DWORD PTR [eax+0x88]
10007935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007938:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
1000793b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000793e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
10007941:	01 c2                	add    edx,eax
10007943:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007946:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
1000794c:	89 d6                	mov    esi,edx
1000794e:	29 c6                	sub    esi,eax
10007950:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007953:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
10007956:	8d 45 b0             	lea    eax,[ebp-0x50]
10007959:	83 ec 0c             	sub    esp,0xc
1000795c:	53                   	push   ebx
1000795d:	51                   	push   ecx
1000795e:	56                   	push   esi
1000795f:	52                   	push   edx
10007960:	50                   	push   eax
10007961:	e8 fc ff ff ff       	call   10007962 <NWindow::clipCornersIfNeededToMakeShadows()+0xb2>	10007962: R_386_PC32	createRectangleRegion(int, int, int, int)
10007966:	83 c4 1c             	add    esp,0x1c
10007969:	8d 45 94             	lea    eax,[ebp-0x6c]
1000796c:	89 85 74 ff ff ff    	mov    DWORD PTR [ebp-0x8c],eax
10007972:	83 ec 04             	sub    esp,0x4
10007975:	83 ec 1c             	sub    esp,0x1c
10007978:	89 e0                	mov    eax,esp
1000797a:	89 c3                	mov    ebx,eax
1000797c:	8d 45 b0             	lea    eax,[ebp-0x50]
1000797f:	ba 07 00 00 00       	mov    edx,0x7
10007984:	89 df                	mov    edi,ebx
10007986:	89 c6                	mov    esi,eax
10007988:	89 d1                	mov    ecx,edx
1000798a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000798c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000798f:	83 ec 1c             	sub    esp,0x1c
10007992:	89 e2                	mov    edx,esp
10007994:	8d 58 14             	lea    ebx,[eax+0x14]
10007997:	b8 07 00 00 00       	mov    eax,0x7
1000799c:	89 d7                	mov    edi,edx
1000799e:	89 de                	mov    esi,ebx
100079a0:	89 c1                	mov    ecx,eax
100079a2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100079a4:	ff b5 74 ff ff ff    	push   DWORD PTR [ebp-0x8c]
100079aa:	e8 fc ff ff ff       	call   100079ab <NWindow::clipCornersIfNeededToMakeShadows()+0xfb>	100079ab: R_386_PC32	getRegionDifference(Region, Region)
100079af:	83 c4 3c             	add    esp,0x3c
100079b2:	8d 85 78 ff ff ff    	lea    eax,[ebp-0x88]
100079b8:	89 85 74 ff ff ff    	mov    DWORD PTR [ebp-0x8c],eax
100079be:	83 ec 04             	sub    esp,0x4
100079c1:	83 ec 1c             	sub    esp,0x1c
100079c4:	89 e0                	mov    eax,esp
100079c6:	89 c3                	mov    ebx,eax
100079c8:	8d 45 cc             	lea    eax,[ebp-0x34]
100079cb:	ba 07 00 00 00       	mov    edx,0x7
100079d0:	89 df                	mov    edi,ebx
100079d2:	89 c6                	mov    esi,eax
100079d4:	89 d1                	mov    ecx,edx
100079d6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100079d8:	83 ec 1c             	sub    esp,0x1c
100079db:	89 e0                	mov    eax,esp
100079dd:	89 c3                	mov    ebx,eax
100079df:	8d 45 94             	lea    eax,[ebp-0x6c]
100079e2:	ba 07 00 00 00       	mov    edx,0x7
100079e7:	89 df                	mov    edi,ebx
100079e9:	89 c6                	mov    esi,eax
100079eb:	89 d1                	mov    ecx,edx
100079ed:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100079ef:	ff b5 74 ff ff ff    	push   DWORD PTR [ebp-0x8c]
100079f5:	e8 fc ff ff ff       	call   100079f6 <NWindow::clipCornersIfNeededToMakeShadows()+0x146>	100079f6: R_386_PC32	getRegionDifference(Region, Region)
100079fa:	83 c4 3c             	add    esp,0x3c
100079fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a00:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10007a03:	83 ec 0c             	sub    esp,0xc
10007a06:	50                   	push   eax
10007a07:	e8 fc ff ff ff       	call   10007a08 <NWindow::clipCornersIfNeededToMakeShadows()+0x158>	10007a08: R_386_PC32	free
10007a0c:	83 c4 10             	add    esp,0x10
10007a0f:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
10007a12:	83 ec 0c             	sub    esp,0xc
10007a15:	50                   	push   eax
10007a16:	e8 fc ff ff ff       	call   10007a17 <NWindow::clipCornersIfNeededToMakeShadows()+0x167>	10007a17: R_386_PC32	free
10007a1b:	83 c4 10             	add    esp,0x10
10007a1e:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10007a21:	83 ec 0c             	sub    esp,0xc
10007a24:	50                   	push   eax
10007a25:	e8 fc ff ff ff       	call   10007a26 <NWindow::clipCornersIfNeededToMakeShadows()+0x176>	10007a26: R_386_PC32	free
10007a2a:	83 c4 10             	add    esp,0x10
10007a2d:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
10007a30:	83 ec 0c             	sub    esp,0xc
10007a33:	50                   	push   eax
10007a34:	e8 fc ff ff ff       	call   10007a35 <NWindow::clipCornersIfNeededToMakeShadows()+0x185>	10007a35: R_386_PC32	free
10007a39:	83 c4 10             	add    esp,0x10
10007a3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a3f:	8d 58 14             	lea    ebx,[eax+0x14]
10007a42:	8d 85 78 ff ff ff    	lea    eax,[ebp-0x88]
10007a48:	ba 19 00 00 00       	mov    edx,0x19
10007a4d:	89 df                	mov    edi,ebx
10007a4f:	89 c6                	mov    esi,eax
10007a51:	89 d1                	mov    ecx,edx
10007a53:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10007a55:	eb 0d                	jmp    10007a64 <NWindow::clipCornersIfNeededToMakeShadows()+0x1b4>
10007a57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a5a:	c7 80 88 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x88],0x0
10007a64:	90                   	nop
10007a65:	8d 65 f4             	lea    esp,[ebp-0xc]
10007a68:	5b                   	pop    ebx
10007a69:	5e                   	pop    esi
10007a6a:	5f                   	pop    edi
10007a6b:	5d                   	pop    ebp
10007a6c:	c3                   	ret    
10007a6d:	90                   	nop

10007a6e <NWindow::postResizeCleanup()>:
10007a6e:	55                   	push   ebp
10007a6f:	89 e5                	mov    ebp,esp
10007a71:	83 ec 08             	sub    esp,0x8
10007a74:	83 ec 0c             	sub    esp,0xc
10007a77:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007a7a:	e8 fc ff ff ff       	call   10007a7b <NWindow::postResizeCleanup()+0xd>	10007a7b: R_386_PC32	NWindow::clipCornersIfNeededToMakeShadows()
10007a7f:	83 c4 10             	add    esp,0x10
10007a82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a85:	83 ec 0c             	sub    esp,0xc
10007a88:	50                   	push   eax
10007a89:	e8 fc ff ff ff       	call   10007a8a <NWindow::postResizeCleanup()+0x1c>	10007a8a: R_386_PC32	NFrame::tryInvalidate()
10007a8e:	83 c4 10             	add    esp,0x10
10007a91:	90                   	nop
10007a92:	c9                   	leave  
10007a93:	c3                   	ret    

10007a94 <NWindow::paintHandler(NFrame::Graphics)>:
10007a94:	55                   	push   ebp
10007a95:	89 e5                	mov    ebp,esp
10007a97:	57                   	push   edi
10007a98:	56                   	push   esi
10007a99:	53                   	push   ebx
10007a9a:	83 ec 4c             	sub    esp,0x4c
10007a9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007aa0:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007aa3:	83 e0 08             	and    eax,0x8
10007aa6:	85 c0                	test   eax,eax
10007aa8:	0f 85 5a 04 00 00    	jne    10007f08 <NWindow::paintHandler(NFrame::Graphics)+0x474>
10007aae:	c7 45 e4 18 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x18
10007ab5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10007abc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10007ac3:	c7 45 d8 c0 c0 c0 00 	mov    DWORD PTR [ebp-0x28],0xc0c0c0
10007aca:	c7 45 d4 ff ff ff 00 	mov    DWORD PTR [ebp-0x2c],0xffffff
10007ad1:	c7 45 d0 ff ff ff 00 	mov    DWORD PTR [ebp-0x30],0xffffff
10007ad8:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
10007adf:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
10007ae6:	c7 45 c4 c0 c0 c0 00 	mov    DWORD PTR [ebp-0x3c],0xc0c0c0
10007aed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007af0:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007af3:	83 e0 01             	and    eax,0x1
10007af6:	85 c0                	test   eax,eax
10007af8:	0f 85 0d 02 00 00    	jne    10007d0b <NWindow::paintHandler(NFrame::Graphics)+0x277>
10007afe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b01:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007b04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b07:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10007b0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b0d:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
10007b13:	89 d1                	mov    ecx,edx
10007b15:	29 c1                	sub    ecx,eax
10007b17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b1a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
10007b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b20:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
10007b26:	83 ec 08             	sub    esp,0x8
10007b29:	68 c0 c0 c0 00       	push   0xc0c0c0
10007b2e:	51                   	push   ecx
10007b2f:	52                   	push   edx
10007b30:	50                   	push   eax
10007b31:	6a 00                	push   0x0
10007b33:	83 ec 20             	sub    esp,0x20
10007b36:	89 e0                	mov    eax,esp
10007b38:	89 c3                	mov    ebx,eax
10007b3a:	8d 45 0c             	lea    eax,[ebp+0xc]
10007b3d:	ba 08 00 00 00       	mov    edx,0x8
10007b42:	89 df                	mov    edi,ebx
10007b44:	89 c6                	mov    esi,eax
10007b46:	89 d1                	mov    ecx,edx
10007b48:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007b4a:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007b4d:	e8 fc ff ff ff       	call   10007b4e <NWindow::paintHandler(NFrame::Graphics)+0xba>	10007b4e: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007b52:	83 c4 40             	add    esp,0x40
10007b55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b58:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007b5b:	83 e0 02             	and    eax,0x2
10007b5e:	85 c0                	test   eax,eax
10007b60:	0f 85 14 01 00 00    	jne    10007c7a <NWindow::paintHandler(NFrame::Graphics)+0x1e6>
10007b66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b69:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007b6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b6f:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
10007b75:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007b78:	8b 4a 18             	mov    ecx,DWORD PTR [edx+0x18]
10007b7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007b7e:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
10007b84:	29 d1                	sub    ecx,edx
10007b86:	89 ca                	mov    edx,ecx
10007b88:	83 ea 18             	sub    edx,0x18
10007b8b:	83 ec 08             	sub    esp,0x8
10007b8e:	68 ff ff ff 00       	push   0xffffff
10007b93:	50                   	push   eax
10007b94:	52                   	push   edx
10007b95:	6a 00                	push   0x0
10007b97:	6a 00                	push   0x0
10007b99:	83 ec 20             	sub    esp,0x20
10007b9c:	89 e0                	mov    eax,esp
10007b9e:	89 c3                	mov    ebx,eax
10007ba0:	8d 45 0c             	lea    eax,[ebp+0xc]
10007ba3:	ba 08 00 00 00       	mov    edx,0x8
10007ba8:	89 df                	mov    edi,ebx
10007baa:	89 c6                	mov    esi,eax
10007bac:	89 d1                	mov    ecx,edx
10007bae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007bb0:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007bb3:	e8 fc ff ff ff       	call   10007bb4 <NWindow::paintHandler(NFrame::Graphics)+0x120>	10007bb4: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007bb8:	83 c4 40             	add    esp,0x40
10007bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007bbe:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007bc4:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
10007bca:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007bcd:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
10007bd0:	8d 4a e8             	lea    ecx,[edx-0x18]
10007bd3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007bd6:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
10007bdc:	29 d1                	sub    ecx,edx
10007bde:	89 ca                	mov    edx,ecx
10007be0:	83 ec 08             	sub    esp,0x8
10007be3:	68 ff ff ff 00       	push   0xffffff
10007be8:	50                   	push   eax
10007be9:	6a 18                	push   0x18
10007beb:	6a 00                	push   0x0
10007bed:	52                   	push   edx
10007bee:	83 ec 20             	sub    esp,0x20
10007bf1:	89 e0                	mov    eax,esp
10007bf3:	89 c3                	mov    ebx,eax
10007bf5:	8d 45 0c             	lea    eax,[ebp+0xc]
10007bf8:	ba 08 00 00 00       	mov    edx,0x8
10007bfd:	89 df                	mov    edi,ebx
10007bff:	89 c6                	mov    esi,eax
10007c01:	89 d1                	mov    ecx,edx
10007c03:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007c05:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007c08:	e8 fc ff ff ff       	call   10007c09 <NWindow::paintHandler(NFrame::Graphics)+0x175>	10007c09: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007c0d:	83 c4 40             	add    esp,0x40
10007c10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007c13:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007c16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007c19:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007c1c:	83 e0 10             	and    eax,0x10
10007c1f:	85 c0                	test   eax,eax
10007c21:	74 07                	je     10007c2a <NWindow::paintHandler(NFrame::Graphics)+0x196>
10007c23:	b8 c0 c0 c0 00       	mov    eax,0xc0c0c0
10007c28:	eb 05                	jmp    10007c2f <NWindow::paintHandler(NFrame::Graphics)+0x19b>
10007c2a:	b8 00 00 00 00       	mov    eax,0x0
10007c2f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007c32:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
10007c35:	8d 4a e8             	lea    ecx,[edx-0x18]
10007c38:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007c3b:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
10007c41:	29 d1                	sub    ecx,edx
10007c43:	89 ca                	mov    edx,ecx
10007c45:	83 c2 08             	add    edx,0x8
10007c48:	83 ec 08             	sub    esp,0x8
10007c4b:	6a ff                	push   0xffffffff
10007c4d:	50                   	push   eax
10007c4e:	68 f0 8c 00 10       	push   0x10008cf0	10007c4f: R_386_32	.text
10007c53:	6a 06                	push   0x6
10007c55:	52                   	push   edx
10007c56:	83 ec 20             	sub    esp,0x20
10007c59:	89 e0                	mov    eax,esp
10007c5b:	89 c3                	mov    ebx,eax
10007c5d:	8d 45 0c             	lea    eax,[ebp+0xc]
10007c60:	ba 08 00 00 00       	mov    edx,0x8
10007c65:	89 df                	mov    edi,ebx
10007c67:	89 c6                	mov    esi,eax
10007c69:	89 d1                	mov    ecx,edx
10007c6b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007c6d:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007c70:	e8 fc ff ff ff       	call   10007c71 <NWindow::paintHandler(NFrame::Graphics)+0x1dd>	10007c71: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
10007c75:	83 c4 40             	add    esp,0x40
10007c78:	eb 52                	jmp    10007ccc <NWindow::paintHandler(NFrame::Graphics)+0x238>
10007c7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007c7d:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007c80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007c83:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
10007c89:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007c8c:	8b 4a 18             	mov    ecx,DWORD PTR [edx+0x18]
10007c8f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007c92:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
10007c98:	29 d1                	sub    ecx,edx
10007c9a:	89 ca                	mov    edx,ecx
10007c9c:	83 ec 08             	sub    esp,0x8
10007c9f:	68 ff ff ff 00       	push   0xffffff
10007ca4:	50                   	push   eax
10007ca5:	52                   	push   edx
10007ca6:	6a 00                	push   0x0
10007ca8:	6a 00                	push   0x0
10007caa:	83 ec 20             	sub    esp,0x20
10007cad:	89 e0                	mov    eax,esp
10007caf:	89 c3                	mov    ebx,eax
10007cb1:	8d 45 0c             	lea    eax,[ebp+0xc]
10007cb4:	ba 08 00 00 00       	mov    edx,0x8
10007cb9:	89 df                	mov    edi,ebx
10007cbb:	89 c6                	mov    esi,eax
10007cbd:	89 d1                	mov    ecx,edx
10007cbf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007cc1:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007cc4:	e8 fc ff ff ff       	call   10007cc5 <NWindow::paintHandler(NFrame::Graphics)+0x231>	10007cc5: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007cc9:	83 c4 40             	add    esp,0x40
10007ccc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ccf:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007cd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007cd5:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
10007cdb:	83 ec 08             	sub    esp,0x8
10007cde:	6a ff                	push   0xffffffff
10007ce0:	6a 00                	push   0x0
10007ce2:	50                   	push   eax
10007ce3:	6a 06                	push   0x6
10007ce5:	6a 08                	push   0x8
10007ce7:	83 ec 20             	sub    esp,0x20
10007cea:	89 e0                	mov    eax,esp
10007cec:	89 c3                	mov    ebx,eax
10007cee:	8d 45 0c             	lea    eax,[ebp+0xc]
10007cf1:	ba 08 00 00 00       	mov    edx,0x8
10007cf6:	89 df                	mov    edi,ebx
10007cf8:	89 c6                	mov    esi,eax
10007cfa:	89 d1                	mov    ecx,edx
10007cfc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007cfe:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007d01:	e8 fc ff ff ff       	call   10007d02 <NWindow::paintHandler(NFrame::Graphics)+0x26e>	10007d02: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
10007d06:	83 c4 40             	add    esp,0x40
10007d09:	eb 30                	jmp    10007d3b <NWindow::paintHandler(NFrame::Graphics)+0x2a7>
10007d0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007d0e:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007d11:	83 ec 08             	sub    esp,0x8
10007d14:	68 c0 c0 c0 00       	push   0xc0c0c0
10007d19:	83 ec 20             	sub    esp,0x20
10007d1c:	89 e0                	mov    eax,esp
10007d1e:	89 c3                	mov    ebx,eax
10007d20:	8d 45 0c             	lea    eax,[ebp+0xc]
10007d23:	ba 08 00 00 00       	mov    edx,0x8
10007d28:	89 df                	mov    edi,ebx
10007d2a:	89 c6                	mov    esi,eax
10007d2c:	89 d1                	mov    ecx,edx
10007d2e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007d30:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007d33:	e8 fc ff ff ff       	call   10007d34 <NWindow::paintHandler(NFrame::Graphics)+0x2a0>	10007d34: R_386_PC32	NFrame::paintSolid(NFrame::Graphics, unsigned int)
10007d38:	83 c4 30             	add    esp,0x30
10007d3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007d3e:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007d41:	83 e0 04             	and    eax,0x4
10007d44:	85 c0                	test   eax,eax
10007d46:	0f 85 bd 01 00 00    	jne    10007f09 <NWindow::paintHandler(NFrame::Graphics)+0x475>
10007d4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007d4f:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007d52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007d55:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10007d58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007d5b:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
10007d61:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10007d64:	8b 59 18             	mov    ebx,DWORD PTR [ecx+0x18]
10007d67:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10007d6a:	8b 89 88 00 00 00    	mov    ecx,DWORD PTR [ecx+0x88]
10007d70:	29 cb                	sub    ebx,ecx
10007d72:	89 d9                	mov    ecx,ebx
10007d74:	83 ec 08             	sub    esp,0x8
10007d77:	6a 00                	push   0x0
10007d79:	52                   	push   edx
10007d7a:	50                   	push   eax
10007d7b:	6a 00                	push   0x0
10007d7d:	51                   	push   ecx
10007d7e:	83 ec 20             	sub    esp,0x20
10007d81:	89 e0                	mov    eax,esp
10007d83:	89 c3                	mov    ebx,eax
10007d85:	8d 45 0c             	lea    eax,[ebp+0xc]
10007d88:	ba 08 00 00 00       	mov    edx,0x8
10007d8d:	89 df                	mov    edi,ebx
10007d8f:	89 c6                	mov    esi,eax
10007d91:	89 d1                	mov    ecx,edx
10007d93:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007d95:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007d98:	e8 fc ff ff ff       	call   10007d99 <NWindow::paintHandler(NFrame::Graphics)+0x305>	10007d99: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007d9d:	83 c4 40             	add    esp,0x40
10007da0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007da3:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007da6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007da9:	8b 90 88 00 00 00    	mov    edx,DWORD PTR [eax+0x88]
10007daf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007db2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10007db5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10007db8:	8b 59 1c             	mov    ebx,DWORD PTR [ecx+0x1c]
10007dbb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10007dbe:	8b 89 88 00 00 00    	mov    ecx,DWORD PTR [ecx+0x88]
10007dc4:	29 cb                	sub    ebx,ecx
10007dc6:	89 d9                	mov    ecx,ebx
10007dc8:	83 ec 08             	sub    esp,0x8
10007dcb:	6a 00                	push   0x0
10007dcd:	52                   	push   edx
10007dce:	50                   	push   eax
10007dcf:	51                   	push   ecx
10007dd0:	6a 00                	push   0x0
10007dd2:	83 ec 20             	sub    esp,0x20
10007dd5:	89 e0                	mov    eax,esp
10007dd7:	89 c3                	mov    ebx,eax
10007dd9:	8d 45 0c             	lea    eax,[ebp+0xc]
10007ddc:	ba 08 00 00 00       	mov    edx,0x8
10007de1:	89 df                	mov    edi,ebx
10007de3:	89 c6                	mov    esi,eax
10007de5:	89 d1                	mov    ecx,edx
10007de7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007de9:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007dec:	e8 fc ff ff ff       	call   10007ded <NWindow::paintHandler(NFrame::Graphics)+0x359>	10007ded: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007df1:	83 c4 40             	add    esp,0x40
10007df4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007df7:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007dfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007dfd:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10007e00:	83 ec 08             	sub    esp,0x8
10007e03:	6a 00                	push   0x0
10007e05:	6a 01                	push   0x1
10007e07:	50                   	push   eax
10007e08:	6a 00                	push   0x0
10007e0a:	6a 00                	push   0x0
10007e0c:	83 ec 20             	sub    esp,0x20
10007e0f:	89 e0                	mov    eax,esp
10007e11:	89 c3                	mov    ebx,eax
10007e13:	8d 45 0c             	lea    eax,[ebp+0xc]
10007e16:	ba 08 00 00 00       	mov    edx,0x8
10007e1b:	89 df                	mov    edi,ebx
10007e1d:	89 c6                	mov    esi,eax
10007e1f:	89 d1                	mov    ecx,edx
10007e21:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007e23:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007e26:	e8 fc ff ff ff       	call   10007e27 <NWindow::paintHandler(NFrame::Graphics)+0x393>	10007e27: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007e2b:	83 c4 40             	add    esp,0x40
10007e2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007e31:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007e34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007e37:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
10007e3a:	83 ec 08             	sub    esp,0x8
10007e3d:	6a 00                	push   0x0
10007e3f:	50                   	push   eax
10007e40:	6a 01                	push   0x1
10007e42:	6a 00                	push   0x0
10007e44:	6a 00                	push   0x0
10007e46:	83 ec 20             	sub    esp,0x20
10007e49:	89 e0                	mov    eax,esp
10007e4b:	89 c3                	mov    ebx,eax
10007e4d:	8d 45 0c             	lea    eax,[ebp+0xc]
10007e50:	ba 08 00 00 00       	mov    edx,0x8
10007e55:	89 df                	mov    edi,ebx
10007e57:	89 c6                	mov    esi,eax
10007e59:	89 d1                	mov    ecx,edx
10007e5b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007e5d:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007e60:	e8 fc ff ff ff       	call   10007e61 <NWindow::paintHandler(NFrame::Graphics)+0x3cd>	10007e61: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007e65:	83 c4 40             	add    esp,0x40
10007e68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007e6b:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007e6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007e71:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10007e74:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007e77:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
10007e7a:	8d 4a ff             	lea    ecx,[edx-0x1]
10007e7d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007e80:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
10007e86:	29 d1                	sub    ecx,edx
10007e88:	89 ca                	mov    edx,ecx
10007e8a:	83 ec 08             	sub    esp,0x8
10007e8d:	6a 00                	push   0x0
10007e8f:	6a 01                	push   0x1
10007e91:	50                   	push   eax
10007e92:	52                   	push   edx
10007e93:	6a 00                	push   0x0
10007e95:	83 ec 20             	sub    esp,0x20
10007e98:	89 e0                	mov    eax,esp
10007e9a:	89 c3                	mov    ebx,eax
10007e9c:	8d 45 0c             	lea    eax,[ebp+0xc]
10007e9f:	ba 08 00 00 00       	mov    edx,0x8
10007ea4:	89 df                	mov    edi,ebx
10007ea6:	89 c6                	mov    esi,eax
10007ea8:	89 d1                	mov    ecx,edx
10007eaa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007eac:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007eaf:	e8 fc ff ff ff       	call   10007eb0 <NWindow::paintHandler(NFrame::Graphics)+0x41c>	10007eb0: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007eb4:	83 c4 40             	add    esp,0x40
10007eb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007eba:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007ebd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ec0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
10007ec3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007ec6:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
10007ec9:	8d 4a ff             	lea    ecx,[edx-0x1]
10007ecc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007ecf:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
10007ed5:	29 d1                	sub    ecx,edx
10007ed7:	89 ca                	mov    edx,ecx
10007ed9:	83 ec 08             	sub    esp,0x8
10007edc:	6a 00                	push   0x0
10007ede:	50                   	push   eax
10007edf:	6a 01                	push   0x1
10007ee1:	6a 00                	push   0x0
10007ee3:	52                   	push   edx
10007ee4:	83 ec 20             	sub    esp,0x20
10007ee7:	89 e0                	mov    eax,esp
10007ee9:	89 c3                	mov    ebx,eax
10007eeb:	8d 45 0c             	lea    eax,[ebp+0xc]
10007eee:	ba 08 00 00 00       	mov    edx,0x8
10007ef3:	89 df                	mov    edi,ebx
10007ef5:	89 c6                	mov    esi,eax
10007ef7:	89 d1                	mov    ecx,edx
10007ef9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007efb:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007efe:	e8 fc ff ff ff       	call   10007eff <NWindow::paintHandler(NFrame::Graphics)+0x46b>	10007eff: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007f03:	83 c4 40             	add    esp,0x40
10007f06:	eb 01                	jmp    10007f09 <NWindow::paintHandler(NFrame::Graphics)+0x475>
10007f08:	90                   	nop
10007f09:	8d 65 f4             	lea    esp,[ebp-0xc]
10007f0c:	5b                   	pop    ebx
10007f0d:	5e                   	pop    esi
10007f0e:	5f                   	pop    edi
10007f0f:	5d                   	pop    ebp
10007f10:	c3                   	ret    
10007f11:	90                   	nop

10007f12 <NDesktopWindow::NDesktopWindow(int, int, int, int, int)>:
10007f12:	55                   	push   ebp
10007f13:	89 e5                	mov    ebp,esp
10007f15:	83 ec 08             	sub    esp,0x8
10007f18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f1b:	83 ec 0c             	sub    esp,0xc
10007f1e:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10007f21:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10007f24:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10007f27:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10007f2a:	50                   	push   eax
10007f2b:	e8 fc ff ff ff       	call   10007f2c <NDesktopWindow::NDesktopWindow(int, int, int, int, int)+0x1a>	10007f2c: R_386_PC32	NFrame::NFrame(int, int, int, int)
10007f30:	83 c4 20             	add    esp,0x20
10007f33:	ba 08 00 00 00       	mov    edx,0x8	10007f34: R_386_32	vtable for NDesktopWindow
10007f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f3b:	89 10                	mov    DWORD PTR [eax],edx
10007f3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f40:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
10007f43:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
10007f49:	90                   	nop
10007f4a:	c9                   	leave  
10007f4b:	c3                   	ret    

10007f4c <NDesktopWindow::paintHandler(NFrame::Graphics)>:
10007f4c:	55                   	push   ebp
10007f4d:	89 e5                	mov    ebp,esp
10007f4f:	57                   	push   edi
10007f50:	56                   	push   esi
10007f51:	53                   	push   ebx
10007f52:	83 ec 1c             	sub    esp,0x1c
10007f55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f58:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10007f5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f5e:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
10007f64:	89 c1                	mov    ecx,eax
10007f66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f69:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10007f6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f6f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10007f72:	83 ec 08             	sub    esp,0x8
10007f75:	51                   	push   ecx
10007f76:	52                   	push   edx
10007f77:	50                   	push   eax
10007f78:	6a 00                	push   0x0
10007f7a:	6a 00                	push   0x0
10007f7c:	83 ec 20             	sub    esp,0x20
10007f7f:	89 e0                	mov    eax,esp
10007f81:	89 c3                	mov    ebx,eax
10007f83:	8d 45 0c             	lea    eax,[ebp+0xc]
10007f86:	ba 08 00 00 00       	mov    edx,0x8
10007f8b:	89 df                	mov    edi,ebx
10007f8d:	89 c6                	mov    esi,eax
10007f8f:	89 d1                	mov    ecx,edx
10007f91:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007f93:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10007f96:	e8 fc ff ff ff       	call   10007f97 <NDesktopWindow::paintHandler(NFrame::Graphics)+0x4b>	10007f97: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007f9b:	83 c4 40             	add    esp,0x40
10007f9e:	90                   	nop
10007f9f:	8d 65 f4             	lea    esp,[ebp-0xc]
10007fa2:	5b                   	pop    ebx
10007fa3:	5e                   	pop    esi
10007fa4:	5f                   	pop    edi
10007fa5:	5d                   	pop    ebp
10007fa6:	c3                   	ret    
10007fa7:	90                   	nop

10007fa8 <NButton::NButton(int, int, int, int)>:
10007fa8:	55                   	push   ebp
10007fa9:	89 e5                	mov    ebp,esp
10007fab:	83 ec 08             	sub    esp,0x8
10007fae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007fb1:	83 ec 0c             	sub    esp,0xc
10007fb4:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10007fb7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10007fba:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10007fbd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10007fc0:	50                   	push   eax
10007fc1:	e8 fc ff ff ff       	call   10007fc2 <NButton::NButton(int, int, int, int)+0x1a>	10007fc2: R_386_PC32	NFrame::NFrame(int, int, int, int)
10007fc6:	83 c4 20             	add    esp,0x20
10007fc9:	ba 08 00 00 00       	mov    edx,0x8	10007fca: R_386_32	vtable for NButton
10007fce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007fd1:	89 10                	mov    DWORD PTR [eax],edx
10007fd3:	90                   	nop
10007fd4:	c9                   	leave  
10007fd5:	c3                   	ret    

10007fd6 <NButton::paintHandler(NFrame::Graphics)>:
10007fd6:	55                   	push   ebp
10007fd7:	89 e5                	mov    ebp,esp
10007fd9:	57                   	push   edi
10007fda:	56                   	push   esi
10007fdb:	53                   	push   ebx
10007fdc:	81 ec 4c 03 00 00    	sub    esp,0x34c
10007fe2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007fe5:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
10007feb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007fee:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10007ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ff4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10007ff7:	83 ec 08             	sub    esp,0x8
10007ffa:	68 c0 c0 c0 00       	push   0xc0c0c0
10007fff:	52                   	push   edx
10008000:	50                   	push   eax
10008001:	6a 00                	push   0x0
10008003:	6a 00                	push   0x0
10008005:	83 ec 20             	sub    esp,0x20
10008008:	89 e0                	mov    eax,esp
1000800a:	89 c3                	mov    ebx,eax
1000800c:	8d 45 0c             	lea    eax,[ebp+0xc]
1000800f:	ba 08 00 00 00       	mov    edx,0x8
10008014:	89 df                	mov    edi,ebx
10008016:	89 c6                	mov    esi,eax
10008018:	89 d1                	mov    ecx,edx
1000801a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000801c:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
10008022:	e8 fc ff ff ff       	call   10008023 <NButton::paintHandler(NFrame::Graphics)+0x4d>	10008023: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10008027:	83 c4 40             	add    esp,0x40
1000802a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000802d:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
10008033:	6a 00                	push   0x0
10008035:	6a 0c                	push   0xc
10008037:	68 f2 8c 00 10       	push   0x10008cf2	10008038: R_386_32	.text
1000803c:	8d 85 b8 fc ff ff    	lea    eax,[ebp-0x348]
10008042:	50                   	push   eax
10008043:	e8 fc ff ff ff       	call   10008044 <NButton::paintHandler(NFrame::Graphics)+0x6e>	10008044: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
10008048:	83 c4 10             	add    esp,0x10
1000804b:	83 ec 08             	sub    esp,0x8
1000804e:	81 ec 88 00 00 00    	sub    esp,0x88
10008054:	89 e0                	mov    eax,esp
10008056:	89 c3                	mov    ebx,eax
10008058:	8d 85 b8 fc ff ff    	lea    eax,[ebp-0x348]
1000805e:	ba 22 00 00 00       	mov    edx,0x22
10008063:	89 df                	mov    edi,ebx
10008065:	89 c6                	mov    esi,eax
10008067:	89 d1                	mov    ecx,edx
10008069:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000806b:	e8 fc ff ff ff       	call   1000806c <NButton::paintHandler(NFrame::Graphics)+0x96>	1000806c: R_386_PC32	getFontHandle(FontStyle)
10008070:	81 c4 90 00 00 00    	add    esp,0x90
10008076:	83 ec 08             	sub    esp,0x8
10008079:	50                   	push   eax
1000807a:	6a 00                	push   0x0
1000807c:	68 f8 8c 00 10       	push   0x10008cf8	1000807d: R_386_32	.text
10008081:	6a 00                	push   0x0
10008083:	6a 00                	push   0x0
10008085:	83 ec 20             	sub    esp,0x20
10008088:	89 e0                	mov    eax,esp
1000808a:	89 c3                	mov    ebx,eax
1000808c:	8d 45 0c             	lea    eax,[ebp+0xc]
1000808f:	ba 08 00 00 00       	mov    edx,0x8
10008094:	89 df                	mov    edi,ebx
10008096:	89 c6                	mov    esi,eax
10008098:	89 d1                	mov    ecx,edx
1000809a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000809c:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
100080a2:	e8 fc ff ff ff       	call   100080a3 <NButton::paintHandler(NFrame::Graphics)+0xcd>	100080a3: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
100080a7:	83 c4 40             	add    esp,0x40
100080aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100080ad:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
100080b3:	6a 00                	push   0x0
100080b5:	6a 0c                	push   0xc
100080b7:	68 f2 8c 00 10       	push   0x10008cf2	100080b8: R_386_32	.text
100080bc:	8d 85 40 fd ff ff    	lea    eax,[ebp-0x2c0]
100080c2:	50                   	push   eax
100080c3:	e8 fc ff ff ff       	call   100080c4 <NButton::paintHandler(NFrame::Graphics)+0xee>	100080c4: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
100080c8:	83 c4 10             	add    esp,0x10
100080cb:	83 ec 08             	sub    esp,0x8
100080ce:	81 ec 88 00 00 00    	sub    esp,0x88
100080d4:	89 e0                	mov    eax,esp
100080d6:	89 c3                	mov    ebx,eax
100080d8:	8d 85 40 fd ff ff    	lea    eax,[ebp-0x2c0]
100080de:	ba 22 00 00 00       	mov    edx,0x22
100080e3:	89 df                	mov    edi,ebx
100080e5:	89 c6                	mov    esi,eax
100080e7:	89 d1                	mov    ecx,edx
100080e9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100080eb:	e8 fc ff ff ff       	call   100080ec <NButton::paintHandler(NFrame::Graphics)+0x116>	100080ec: R_386_PC32	getFontHandle(FontStyle)
100080f0:	81 c4 90 00 00 00    	add    esp,0x90
100080f6:	83 ec 08             	sub    esp,0x8
100080f9:	50                   	push   eax
100080fa:	6a 00                	push   0x0
100080fc:	68 24 8d 00 10       	push   0x10008d24	100080fd: R_386_32	.text
10008101:	6a 19                	push   0x19
10008103:	6a 00                	push   0x0
10008105:	83 ec 20             	sub    esp,0x20
10008108:	89 e0                	mov    eax,esp
1000810a:	89 c3                	mov    ebx,eax
1000810c:	8d 45 0c             	lea    eax,[ebp+0xc]
1000810f:	ba 08 00 00 00       	mov    edx,0x8
10008114:	89 df                	mov    edi,ebx
10008116:	89 c6                	mov    esi,eax
10008118:	89 d1                	mov    ecx,edx
1000811a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000811c:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
10008122:	e8 fc ff ff ff       	call   10008123 <NButton::paintHandler(NFrame::Graphics)+0x14d>	10008123: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
10008127:	83 c4 40             	add    esp,0x40
1000812a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000812d:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
10008133:	6a 00                	push   0x0
10008135:	6a 0c                	push   0xc
10008137:	68 f2 8c 00 10       	push   0x10008cf2	10008138: R_386_32	.text
1000813c:	8d 85 c8 fd ff ff    	lea    eax,[ebp-0x238]
10008142:	50                   	push   eax
10008143:	e8 fc ff ff ff       	call   10008144 <NButton::paintHandler(NFrame::Graphics)+0x16e>	10008144: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
10008148:	83 c4 10             	add    esp,0x10
1000814b:	83 ec 08             	sub    esp,0x8
1000814e:	81 ec 88 00 00 00    	sub    esp,0x88
10008154:	89 e0                	mov    eax,esp
10008156:	89 c3                	mov    ebx,eax
10008158:	8d 85 c8 fd ff ff    	lea    eax,[ebp-0x238]
1000815e:	ba 22 00 00 00       	mov    edx,0x22
10008163:	89 df                	mov    edi,ebx
10008165:	89 c6                	mov    esi,eax
10008167:	89 d1                	mov    ecx,edx
10008169:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000816b:	e8 fc ff ff ff       	call   1000816c <NButton::paintHandler(NFrame::Graphics)+0x196>	1000816c: R_386_PC32	getFontHandle(FontStyle)
10008170:	81 c4 90 00 00 00    	add    esp,0x90
10008176:	83 ec 08             	sub    esp,0x8
10008179:	50                   	push   eax
1000817a:	6a 00                	push   0x0
1000817c:	68 04 8e 00 10       	push   0x10008e04	1000817d: R_386_32	.text
10008181:	6a 32                	push   0x32
10008183:	6a 00                	push   0x0
10008185:	83 ec 20             	sub    esp,0x20
10008188:	89 e0                	mov    eax,esp
1000818a:	89 c3                	mov    ebx,eax
1000818c:	8d 45 0c             	lea    eax,[ebp+0xc]
1000818f:	ba 08 00 00 00       	mov    edx,0x8
10008194:	89 df                	mov    edi,ebx
10008196:	89 c6                	mov    esi,eax
10008198:	89 d1                	mov    ecx,edx
1000819a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000819c:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
100081a2:	e8 fc ff ff ff       	call   100081a3 <NButton::paintHandler(NFrame::Graphics)+0x1cd>	100081a3: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
100081a7:	83 c4 40             	add    esp,0x40
100081aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100081ad:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
100081b3:	6a 00                	push   0x0
100081b5:	6a 0c                	push   0xc
100081b7:	68 f2 8c 00 10       	push   0x10008cf2	100081b8: R_386_32	.text
100081bc:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
100081c2:	50                   	push   eax
100081c3:	e8 fc ff ff ff       	call   100081c4 <NButton::paintHandler(NFrame::Graphics)+0x1ee>	100081c4: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
100081c8:	83 c4 10             	add    esp,0x10
100081cb:	83 ec 08             	sub    esp,0x8
100081ce:	81 ec 88 00 00 00    	sub    esp,0x88
100081d4:	89 e0                	mov    eax,esp
100081d6:	89 c3                	mov    ebx,eax
100081d8:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
100081de:	ba 22 00 00 00       	mov    edx,0x22
100081e3:	89 df                	mov    edi,ebx
100081e5:	89 c6                	mov    esi,eax
100081e7:	89 d1                	mov    ecx,edx
100081e9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100081eb:	e8 fc ff ff ff       	call   100081ec <NButton::paintHandler(NFrame::Graphics)+0x216>	100081ec: R_386_PC32	getFontHandle(FontStyle)
100081f0:	81 c4 90 00 00 00    	add    esp,0x90
100081f6:	83 ec 08             	sub    esp,0x8
100081f9:	50                   	push   eax
100081fa:	6a 00                	push   0x0
100081fc:	68 40 8e 00 10       	push   0x10008e40	100081fd: R_386_32	.text
10008201:	6a 4b                	push   0x4b
10008203:	6a 00                	push   0x0
10008205:	83 ec 20             	sub    esp,0x20
10008208:	89 e0                	mov    eax,esp
1000820a:	89 c3                	mov    ebx,eax
1000820c:	8d 45 0c             	lea    eax,[ebp+0xc]
1000820f:	ba 08 00 00 00       	mov    edx,0x8
10008214:	89 df                	mov    edi,ebx
10008216:	89 c6                	mov    esi,eax
10008218:	89 d1                	mov    ecx,edx
1000821a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000821c:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
10008222:	e8 fc ff ff ff       	call   10008223 <NButton::paintHandler(NFrame::Graphics)+0x24d>	10008223: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
10008227:	83 c4 40             	add    esp,0x40
1000822a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000822d:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
10008233:	6a 00                	push   0x0
10008235:	6a 10                	push   0x10
10008237:	68 f2 8c 00 10       	push   0x10008cf2	10008238: R_386_32	.text
1000823c:	8d 85 d8 fe ff ff    	lea    eax,[ebp-0x128]
10008242:	50                   	push   eax
10008243:	e8 fc ff ff ff       	call   10008244 <NButton::paintHandler(NFrame::Graphics)+0x26e>	10008244: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
10008248:	83 c4 10             	add    esp,0x10
1000824b:	83 ec 08             	sub    esp,0x8
1000824e:	81 ec 88 00 00 00    	sub    esp,0x88
10008254:	89 e0                	mov    eax,esp
10008256:	89 c3                	mov    ebx,eax
10008258:	8d 85 d8 fe ff ff    	lea    eax,[ebp-0x128]
1000825e:	ba 22 00 00 00       	mov    edx,0x22
10008263:	89 df                	mov    edi,ebx
10008265:	89 c6                	mov    esi,eax
10008267:	89 d1                	mov    ecx,edx
10008269:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000826b:	e8 fc ff ff ff       	call   1000826c <NButton::paintHandler(NFrame::Graphics)+0x296>	1000826c: R_386_PC32	getFontHandle(FontStyle)
10008270:	81 c4 90 00 00 00    	add    esp,0x90
10008276:	83 ec 08             	sub    esp,0x8
10008279:	50                   	push   eax
1000827a:	6a 00                	push   0x0
1000827c:	68 f8 8c 00 10       	push   0x10008cf8	1000827d: R_386_32	.text
10008281:	6a 64                	push   0x64
10008283:	6a 00                	push   0x0
10008285:	83 ec 20             	sub    esp,0x20
10008288:	89 e0                	mov    eax,esp
1000828a:	89 c3                	mov    ebx,eax
1000828c:	8d 45 0c             	lea    eax,[ebp+0xc]
1000828f:	ba 08 00 00 00       	mov    edx,0x8
10008294:	89 df                	mov    edi,ebx
10008296:	89 c6                	mov    esi,eax
10008298:	89 d1                	mov    ecx,edx
1000829a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000829c:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
100082a2:	e8 fc ff ff ff       	call   100082a3 <NButton::paintHandler(NFrame::Graphics)+0x2cd>	100082a3: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
100082a7:	83 c4 40             	add    esp,0x40
100082aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100082ad:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
100082b3:	6a 00                	push   0x0
100082b5:	6a 18                	push   0x18
100082b7:	68 f2 8c 00 10       	push   0x10008cf2	100082b8: R_386_32	.text
100082bc:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
100082c2:	50                   	push   eax
100082c3:	e8 fc ff ff ff       	call   100082c4 <NButton::paintHandler(NFrame::Graphics)+0x2ee>	100082c4: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
100082c8:	83 c4 10             	add    esp,0x10
100082cb:	83 ec 08             	sub    esp,0x8
100082ce:	81 ec 88 00 00 00    	sub    esp,0x88
100082d4:	89 e0                	mov    eax,esp
100082d6:	89 c3                	mov    ebx,eax
100082d8:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
100082de:	ba 22 00 00 00       	mov    edx,0x22
100082e3:	89 df                	mov    edi,ebx
100082e5:	89 c6                	mov    esi,eax
100082e7:	89 d1                	mov    ecx,edx
100082e9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100082eb:	e8 fc ff ff ff       	call   100082ec <NButton::paintHandler(NFrame::Graphics)+0x316>	100082ec: R_386_PC32	getFontHandle(FontStyle)
100082f0:	81 c4 90 00 00 00    	add    esp,0x90
100082f6:	83 ec 08             	sub    esp,0x8
100082f9:	50                   	push   eax
100082fa:	6a 00                	push   0x0
100082fc:	68 f8 8c 00 10       	push   0x10008cf8	100082fd: R_386_32	.text
10008301:	68 82 00 00 00       	push   0x82
10008306:	6a 00                	push   0x0
10008308:	83 ec 20             	sub    esp,0x20
1000830b:	89 e0                	mov    eax,esp
1000830d:	89 c3                	mov    ebx,eax
1000830f:	8d 45 0c             	lea    eax,[ebp+0xc]
10008312:	ba 08 00 00 00       	mov    edx,0x8
10008317:	89 df                	mov    edi,ebx
10008319:	89 c6                	mov    esi,eax
1000831b:	89 d1                	mov    ecx,edx
1000831d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000831f:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
10008325:	e8 fc ff ff ff       	call   10008326 <NButton::paintHandler(NFrame::Graphics)+0x350>	10008326: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
1000832a:	83 c4 40             	add    esp,0x40
1000832d:	90                   	nop
1000832e:	8d 65 f4             	lea    esp,[ebp-0xc]
10008331:	5b                   	pop    ebx
10008332:	5e                   	pop    esi
10008333:	5f                   	pop    edi
10008334:	5d                   	pop    ebp
10008335:	c3                   	ret    

10008336 <LinkedList2<NFrame*>::LinkedList2()>:
10008336:	55                   	push   ebp
10008337:	89 e5                	mov    ebp,esp
10008339:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000833c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10008342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008345:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
1000834c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000834f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10008356:	90                   	nop
10008357:	5d                   	pop    ebp
10008358:	c3                   	ret    
10008359:	90                   	nop

1000835a <LinkedList2<NFrame*>::prependNode(NFrame*)>:
1000835a:	55                   	push   ebp
1000835b:	89 e5                	mov    ebp,esp
1000835d:	83 ec 18             	sub    esp,0x18
10008360:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
10008367:	83 ec 0c             	sub    esp,0xc
1000836a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000836d:	e8 fc ff ff ff       	call   1000836e <LinkedList2<NFrame*>::prependNode(NFrame*)+0x14>	1000836e: R_386_PC32	malloc
10008372:	83 c4 10             	add    esp,0x10
10008375:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10008378:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000837b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000837e:	89 10                	mov    DWORD PTR [eax],edx
10008380:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008383:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
10008386:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10008389:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000838c:	83 ec 0c             	sub    esp,0xc
1000838f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008392:	e8 fc ff ff ff       	call   10008393 <LinkedList2<NFrame*>::prependNode(NFrame*)+0x39>	10008393: R_386_PC32	LinkedList2<NFrame*>::isEmpty()
10008397:	83 c4 10             	add    esp,0x10
1000839a:	84 c0                	test   al,al
1000839c:	74 09                	je     100083a7 <LinkedList2<NFrame*>::prependNode(NFrame*)+0x4d>
1000839e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100083a1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100083a4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
100083a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100083aa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100083ad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100083b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100083b3:	8b 00                	mov    eax,DWORD PTR [eax]
100083b5:	8d 50 01             	lea    edx,[eax+0x1]
100083b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100083bb:	89 10                	mov    DWORD PTR [eax],edx
100083bd:	90                   	nop
100083be:	c9                   	leave  
100083bf:	c3                   	ret    

100083c0 <LinkedList2<NFrame*>::isEmpty()>:
100083c0:	55                   	push   ebp
100083c1:	89 e5                	mov    ebp,esp
100083c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100083c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100083c9:	85 c0                	test   eax,eax
100083cb:	0f 94 c0             	sete   al
100083ce:	5d                   	pop    ebp
100083cf:	c3                   	ret    

100083d0 <LinkedList2<Font*>::LinkedList2()>:
100083d0:	55                   	push   ebp
100083d1:	89 e5                	mov    ebp,esp
100083d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100083d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100083dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100083df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100083e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100083e9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
100083f0:	90                   	nop
100083f1:	5d                   	pop    ebp
100083f2:	c3                   	ret    
100083f3:	90                   	nop

100083f4 <LinkedList2<Font*>::length()>:
100083f4:	55                   	push   ebp
100083f5:	89 e5                	mov    ebp,esp
100083f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100083fa:	8b 00                	mov    eax,DWORD PTR [eax]
100083fc:	5d                   	pop    ebp
100083fd:	c3                   	ret    

100083fe <LinkedList2<Font*>::appendNode(Font*)>:
100083fe:	55                   	push   ebp
100083ff:	89 e5                	mov    ebp,esp
10008401:	83 ec 18             	sub    esp,0x18
10008404:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000840b:	83 ec 0c             	sub    esp,0xc
1000840e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008411:	e8 fc ff ff ff       	call   10008412 <LinkedList2<Font*>::appendNode(Font*)+0x14>	10008412: R_386_PC32	LinkedList2<Font*>::isEmpty()
10008416:	83 c4 10             	add    esp,0x10
10008419:	84 c0                	test   al,al
1000841b:	74 23                	je     10008440 <LinkedList2<Font*>::appendNode(Font*)+0x42>
1000841d:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
10008424:	83 ec 0c             	sub    esp,0xc
10008427:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000842a:	e8 fc ff ff ff       	call   1000842b <LinkedList2<Font*>::appendNode(Font*)+0x2d>	1000842b: R_386_PC32	malloc
1000842f:	83 c4 10             	add    esp,0x10
10008432:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10008435:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008438:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000843b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000843e:	eb 2f                	jmp    1000846f <LinkedList2<Font*>::appendNode(Font*)+0x71>
10008440:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008443:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
10008446:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10008449:	c7 45 ec 08 00 00 00 	mov    DWORD PTR [ebp-0x14],0x8
10008450:	83 ec 0c             	sub    esp,0xc
10008453:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10008456:	e8 fc ff ff ff       	call   10008457 <LinkedList2<Font*>::appendNode(Font*)+0x59>	10008457: R_386_PC32	malloc
1000845b:	83 c4 10             	add    esp,0x10
1000845e:	89 c2                	mov    edx,eax
10008460:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10008463:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10008466:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10008469:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000846c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000846f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10008472:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10008475:	89 10                	mov    DWORD PTR [eax],edx
10008477:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000847a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10008481:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008484:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10008487:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
1000848a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000848d:	8b 00                	mov    eax,DWORD PTR [eax]
1000848f:	8d 50 01             	lea    edx,[eax+0x1]
10008492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008495:	89 10                	mov    DWORD PTR [eax],edx
10008497:	90                   	nop
10008498:	c9                   	leave  
10008499:	c3                   	ret    

1000849a <LinkedList2<Font*>::isEmpty()>:
1000849a:	55                   	push   ebp
1000849b:	89 e5                	mov    ebp,esp
1000849d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100084a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100084a3:	85 c0                	test   eax,eax
100084a5:	0f 94 c0             	sete   al
100084a8:	5d                   	pop    ebp
100084a9:	c3                   	ret    

100084aa <NFrame::invalidateRectangularBoundingBox()>:
100084aa:	55                   	push   ebp
100084ab:	89 e5                	mov    ebp,esp
100084ad:	57                   	push   edi
100084ae:	56                   	push   esi
100084af:	53                   	push   ebx
100084b0:	83 ec 2c             	sub    esp,0x2c
100084b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100084b6:	8b 78 1c             	mov    edi,DWORD PTR [eax+0x1c]
100084b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100084bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
100084bf:	83 ec 0c             	sub    esp,0xc
100084c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100084c5:	e8 fc ff ff ff       	call   100084c6 <NFrame::invalidateRectangularBoundingBox()+0x1c>	100084c6: R_386_PC32	NFrame::getAbsY()
100084ca:	83 c4 10             	add    esp,0x10
100084cd:	89 c3                	mov    ebx,eax
100084cf:	83 ec 0c             	sub    esp,0xc
100084d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100084d5:	e8 fc ff ff ff       	call   100084d6 <NFrame::invalidateRectangularBoundingBox()+0x2c>	100084d6: R_386_PC32	NFrame::getAbsX()
100084da:	83 c4 10             	add    esp,0x10
100084dd:	89 c2                	mov    edx,eax
100084df:	8d 45 cc             	lea    eax,[ebp-0x34]
100084e2:	83 ec 0c             	sub    esp,0xc
100084e5:	57                   	push   edi
100084e6:	56                   	push   esi
100084e7:	53                   	push   ebx
100084e8:	52                   	push   edx
100084e9:	50                   	push   eax
100084ea:	e8 fc ff ff ff       	call   100084eb <NFrame::invalidateRectangularBoundingBox()+0x41>	100084eb: R_386_PC32	createRectangleRegion(int, int, int, int)
100084ef:	83 c4 1c             	add    esp,0x1c
100084f2:	83 ec 1c             	sub    esp,0x1c
100084f5:	89 e0                	mov    eax,esp
100084f7:	89 c3                	mov    ebx,eax
100084f9:	8d 45 cc             	lea    eax,[ebp-0x34]
100084fc:	ba 07 00 00 00       	mov    edx,0x7
10008501:	89 df                	mov    edi,ebx
10008503:	89 c6                	mov    esi,eax
10008505:	89 d1                	mov    ecx,edx
10008507:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10008509:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000850c:	e8 fc ff ff ff       	call   1000850d <NFrame::invalidateRectangularBoundingBox()+0x63>	1000850d: R_386_PC32	NFrame::markRegionAsDirty(Region)
10008511:	83 c4 20             	add    esp,0x20
10008514:	90                   	nop
10008515:	8d 65 f4             	lea    esp,[ebp-0xc]
10008518:	5b                   	pop    ebx
10008519:	5e                   	pop    esi
1000851a:	5f                   	pop    edi
1000851b:	5d                   	pop    ebp
1000851c:	c3                   	ret    
1000851d:	90                   	nop

1000851e <NFrame::raiseChild(NFrame*)>:
1000851e:	55                   	push   ebp
1000851f:	89 e5                	mov    ebp,esp
10008521:	83 ec 08             	sub    esp,0x8
10008524:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008527:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
1000852a:	85 c0                	test   eax,eax
1000852c:	74 0c                	je     1000853a <NFrame::raiseChild(NFrame*)+0x1c>
1000852e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008531:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
10008534:	8b 00                	mov    eax,DWORD PTR [eax]
10008536:	85 c0                	test   eax,eax
10008538:	75 04                	jne    1000853e <NFrame::raiseChild(NFrame*)+0x20>
1000853a:	b0 00                	mov    al,0x0
1000853c:	eb 39                	jmp    10008577 <NFrame::raiseChild(NFrame*)+0x59>
1000853e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008541:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
10008544:	8b 00                	mov    eax,DWORD PTR [eax]
10008546:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10008549:	75 04                	jne    1000854f <NFrame::raiseChild(NFrame*)+0x31>
1000854b:	b0 00                	mov    al,0x0
1000854d:	eb 28                	jmp    10008577 <NFrame::raiseChild(NFrame*)+0x59>
1000854f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008552:	83 c0 04             	add    eax,0x4
10008555:	83 ec 08             	sub    esp,0x8
10008558:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000855b:	50                   	push   eax
1000855c:	e8 fc ff ff ff       	call   1000855d <NFrame::raiseChild(NFrame*)+0x3f>	1000855d: R_386_PC32	LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)
10008561:	83 c4 10             	add    esp,0x10
10008564:	83 ec 08             	sub    esp,0x8
10008567:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000856a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000856d:	e8 fc ff ff ff       	call   1000856e <NFrame::raiseChild(NFrame*)+0x50>	1000856e: R_386_PC32	NFrame::addChild(NFrame*)
10008572:	83 c4 10             	add    esp,0x10
10008575:	b0 01                	mov    al,0x1
10008577:	c9                   	leave  
10008578:	c3                   	ret    
10008579:	90                   	nop

1000857a <NFrame::getPixelOwner(Video*, int, int, bool, Region)>:
1000857a:	55                   	push   ebp
1000857b:	89 e5                	mov    ebp,esp
1000857d:	57                   	push   edi
1000857e:	56                   	push   esi
1000857f:	53                   	push   ebx
10008580:	83 ec 4c             	sub    esp,0x4c
10008583:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10008586:	88 45 b4             	mov    BYTE PTR [ebp-0x4c],al
10008589:	8d 45 c0             	lea    eax,[ebp-0x40]
1000858c:	83 ec 08             	sub    esp,0x8
1000858f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008592:	50                   	push   eax
10008593:	e8 fc ff ff ff       	call   10008594 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x1a>	10008594: R_386_PC32	NFrame::getDrawRegion()
10008598:	83 c4 0c             	add    esp,0xc
1000859b:	83 ec 0c             	sub    esp,0xc
1000859e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100085a1:	e8 fc ff ff ff       	call   100085a2 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x28>	100085a2: R_386_PC32	NFrame::getAbsX()
100085a6:	83 c4 10             	add    esp,0x10
100085a9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100085ac:	83 ec 0c             	sub    esp,0xc
100085af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100085b2:	e8 fc ff ff ff       	call   100085b3 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x39>	100085b3: R_386_PC32	NFrame::getAbsY()
100085b7:	83 c4 10             	add    esp,0x10
100085ba:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
100085bd:	83 ec 0c             	sub    esp,0xc
100085c0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
100085c3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
100085c6:	83 ec 1c             	sub    esp,0x1c
100085c9:	89 e0                	mov    eax,esp
100085cb:	89 c3                	mov    ebx,eax
100085cd:	8d 45 c0             	lea    eax,[ebp-0x40]
100085d0:	ba 07 00 00 00       	mov    edx,0x7
100085d5:	89 df                	mov    edi,ebx
100085d7:	89 c6                	mov    esi,eax
100085d9:	89 d1                	mov    ecx,edx
100085db:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100085dd:	e8 fc ff ff ff       	call   100085de <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x64>	100085de: R_386_PC32	isPointInRegion(Region, int, int)
100085e2:	83 c4 30             	add    esp,0x30
100085e5:	84 c0                	test   al,al
100085e7:	74 17                	je     10008600 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x86>
100085e9:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100085ec:	83 ec 0c             	sub    esp,0xc
100085ef:	50                   	push   eax
100085f0:	e8 fc ff ff ff       	call   100085f1 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x77>	100085f1: R_386_PC32	free
100085f5:	83 c4 10             	add    esp,0x10
100085f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100085fb:	e9 a8 00 00 00       	jmp    100086a8 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x12e>
10008600:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10008603:	83 ec 0c             	sub    esp,0xc
10008606:	50                   	push   eax
10008607:	e8 fc ff ff ff       	call   10008608 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x8e>	10008608: R_386_PC32	free
1000860c:	83 c4 10             	add    esp,0x10
1000860f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008612:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
10008615:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10008618:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000861c:	0f 84 81 00 00 00    	je     100086a3 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x129>
10008622:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10008625:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10008628:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000862b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000862e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10008631:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10008634:	8b 00                	mov    eax,DWORD PTR [eax]
10008636:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10008639:	84 c0                	test   al,al
1000863b:	75 60                	jne    1000869d <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x123>
1000863d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10008640:	8b 00                	mov    eax,DWORD PTR [eax]
10008642:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
10008645:	0f b6 55 b4          	movzx  edx,BYTE PTR [ebp-0x4c]
10008649:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
1000864c:	83 ec 1c             	sub    esp,0x1c
1000864f:	89 e0                	mov    eax,esp
10008651:	89 c3                	mov    ebx,eax
10008653:	8d 45 1c             	lea    eax,[ebp+0x1c]
10008656:	ba 07 00 00 00       	mov    edx,0x7
1000865b:	89 df                	mov    edi,ebx
1000865d:	89 c6                	mov    esi,eax
1000865f:	89 d1                	mov    ecx,edx
10008661:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10008663:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10008666:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10008669:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000866c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000866f:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
10008672:	e8 fc ff ff ff       	call   10008673 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0xf9>	10008673: R_386_PC32	NFrame::getPixelOwner(Video*, int, int, bool, Region)
10008677:	83 c4 30             	add    esp,0x30
1000867a:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000867d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10008681:	74 95                	je     10008618 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x9e>
10008683:	80 7d b4 00          	cmp    BYTE PTR [ebp-0x4c],0x0
10008687:	74 0f                	je     10008698 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x11e>
10008689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000868c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
1000868f:	85 c0                	test   eax,eax
10008691:	74 05                	je     10008698 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x11e>
10008693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008696:	eb 10                	jmp    100086a8 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x12e>
10008698:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
1000869b:	eb 0b                	jmp    100086a8 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x12e>
1000869d:	90                   	nop
1000869e:	e9 75 ff ff ff       	jmp    10008618 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x9e>
100086a3:	b8 00 00 00 00       	mov    eax,0x0
100086a8:	8d 65 f4             	lea    esp,[ebp-0xc]
100086ab:	5b                   	pop    ebx
100086ac:	5e                   	pop    esi
100086ad:	5f                   	pop    edi
100086ae:	5d                   	pop    ebp
100086af:	c3                   	ret    

100086b0 <NFrame::unhide()>:
100086b0:	55                   	push   ebp
100086b1:	89 e5                	mov    ebp,esp
100086b3:	83 ec 08             	sub    esp,0x8
100086b6:	83 ec 08             	sub    esp,0x8
100086b9:	6a 00                	push   0x0
100086bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100086be:	e8 fc ff ff ff       	call   100086bf <NFrame::unhide()+0xf>	100086bf: R_386_PC32	NFrame::hide(bool)
100086c3:	83 c4 10             	add    esp,0x10
100086c6:	90                   	nop
100086c7:	c9                   	leave  
100086c8:	c3                   	ret    
100086c9:	90                   	nop

100086ca <NFrame::hide(bool)>:
100086ca:	55                   	push   ebp
100086cb:	89 e5                	mov    ebp,esp
100086cd:	83 ec 18             	sub    esp,0x18
100086d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100086d3:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
100086d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100086d9:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
100086dc:	38 45 f4             	cmp    BYTE PTR [ebp-0xc],al
100086df:	74 31                	je     10008712 <NFrame::hide(bool)+0x48>
100086e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100086e4:	8a 55 f4             	mov    dl,BYTE PTR [ebp-0xc]
100086e7:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
100086ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100086ed:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
100086f0:	84 c0                	test   al,al
100086f2:	74 10                	je     10008704 <NFrame::hide(bool)+0x3a>
100086f4:	83 ec 0c             	sub    esp,0xc
100086f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100086fa:	e8 fc ff ff ff       	call   100086fb <NFrame::hide(bool)+0x31>	100086fb: R_386_PC32	NFrame::invalidate()
100086ff:	83 c4 10             	add    esp,0x10
10008702:	eb 0e                	jmp    10008712 <NFrame::hide(bool)+0x48>
10008704:	83 ec 0c             	sub    esp,0xc
10008707:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000870a:	e8 fc ff ff ff       	call   1000870b <NFrame::hide(bool)+0x41>	1000870b: R_386_PC32	NFrame::invalidateRectangularBoundingBox()
1000870f:	83 c4 10             	add    esp,0x10
10008712:	90                   	nop
10008713:	c9                   	leave  
10008714:	c3                   	ret    
10008715:	90                   	nop

10008716 <NFrame::_getRegion()>:
10008716:	55                   	push   ebp
10008717:	89 e5                	mov    ebp,esp
10008719:	57                   	push   edi
1000871a:	56                   	push   esi
1000871b:	53                   	push   ebx
1000871c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000871f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10008722:	8d 58 14             	lea    ebx,[eax+0x14]
10008725:	b8 07 00 00 00       	mov    eax,0x7
1000872a:	89 d7                	mov    edi,edx
1000872c:	89 de                	mov    esi,ebx
1000872e:	89 c1                	mov    ecx,eax
10008730:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10008732:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008735:	5b                   	pop    ebx
10008736:	5e                   	pop    esi
10008737:	5f                   	pop    edi
10008738:	5d                   	pop    ebp
10008739:	c2 04 00             	ret    0x4

1000873c <NFrame::getWidth()>:
1000873c:	55                   	push   ebp
1000873d:	89 e5                	mov    ebp,esp
1000873f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008742:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10008745:	5d                   	pop    ebp
10008746:	c3                   	ret    
10008747:	90                   	nop

10008748 <NFrame::getHeight()>:
10008748:	55                   	push   ebp
10008749:	89 e5                	mov    ebp,esp
1000874b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000874e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
10008751:	5d                   	pop    ebp
10008752:	c3                   	ret    
10008753:	90                   	nop

10008754 <NFrame::startDragState()>:
10008754:	55                   	push   ebp
10008755:	89 e5                	mov    ebp,esp
10008757:	57                   	push   edi
10008758:	56                   	push   esi
10008759:	53                   	push   ebx
1000875a:	83 ec 2c             	sub    esp,0x2c
1000875d:	83 ec 08             	sub    esp,0x8
10008760:	6a 01                	push   0x1
10008762:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008765:	e8 fc ff ff ff       	call   10008766 <NFrame::startDragState()+0x12>	10008766: R_386_PC32	NFrame::hide(bool)
1000876a:	83 c4 10             	add    esp,0x10
1000876d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008770:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
10008773:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008776:	8b 58 18             	mov    ebx,DWORD PTR [eax+0x18]
10008779:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000877c:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
1000877f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008782:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
10008785:	8d 45 cc             	lea    eax,[ebp-0x34]
10008788:	83 ec 08             	sub    esp,0x8
1000878b:	6a 02                	push   0x2
1000878d:	56                   	push   esi
1000878e:	53                   	push   ebx
1000878f:	51                   	push   ecx
10008790:	52                   	push   edx
10008791:	50                   	push   eax
10008792:	e8 fc ff ff ff       	call   10008793 <NFrame::startDragState()+0x3f>	10008793: R_386_PC32	createAntRegion(int, int, int, int, int)
10008797:	83 c4 1c             	add    esp,0x1c
1000879a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000879d:	8d 58 30             	lea    ebx,[eax+0x30]
100087a0:	8d 45 cc             	lea    eax,[ebp-0x34]
100087a3:	ba 19 00 00 00       	mov    edx,0x19
100087a8:	89 df                	mov    edi,ebx
100087aa:	89 c6                	mov    esi,eax
100087ac:	89 d1                	mov    ecx,edx
100087ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100087b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100087b3:	c6 40 69 01          	mov    BYTE PTR [eax+0x69],0x1
100087b7:	90                   	nop
100087b8:	8d 65 f4             	lea    esp,[ebp-0xc]
100087bb:	5b                   	pop    ebx
100087bc:	5e                   	pop    esi
100087bd:	5f                   	pop    edi
100087be:	5d                   	pop    ebp
100087bf:	c3                   	ret    

100087c0 <NFrame::endDragState()>:
100087c0:	55                   	push   ebp
100087c1:	89 e5                	mov    ebp,esp
100087c3:	83 ec 08             	sub    esp,0x8
100087c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100087c9:	c6 40 69 00          	mov    BYTE PTR [eax+0x69],0x0
100087cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100087d0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
100087d3:	83 ec 0c             	sub    esp,0xc
100087d6:	50                   	push   eax
100087d7:	e8 fc ff ff ff       	call   100087d8 <NFrame::endDragState()+0x18>	100087d8: R_386_PC32	free
100087dc:	83 c4 10             	add    esp,0x10
100087df:	83 ec 0c             	sub    esp,0xc
100087e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100087e5:	e8 fc ff ff ff       	call   100087e6 <NFrame::endDragState()+0x26>	100087e6: R_386_PC32	NFrame::unhide()
100087ea:	83 c4 10             	add    esp,0x10
100087ed:	90                   	nop
100087ee:	c9                   	leave  
100087ef:	c3                   	ret    

100087f0 <NFrame::setSize(int, int)>:
100087f0:	55                   	push   ebp
100087f1:	89 e5                	mov    ebp,esp
100087f3:	83 ec 08             	sub    esp,0x8
100087f6:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
100087fa:	7f 07                	jg     10008803 <NFrame::setSize(int, int)+0x13>
100087fc:	c7 45 0c 01 00 00 00 	mov    DWORD PTR [ebp+0xc],0x1
10008803:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10008807:	7f 07                	jg     10008810 <NFrame::setSize(int, int)+0x20>
10008809:	c7 45 10 01 00 00 00 	mov    DWORD PTR [ebp+0x10],0x1
10008810:	83 ec 0c             	sub    esp,0xc
10008813:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008816:	e8 fc ff ff ff       	call   10008817 <NFrame::setSize(int, int)+0x27>	10008817: R_386_PC32	NFrame::hasTitleBar()
1000881b:	83 c4 10             	add    esp,0x10
1000881e:	84 c0                	test   al,al
10008820:	74 1a                	je     1000883c <NFrame::setSize(int, int)+0x4c>
10008822:	83 7d 0c 4a          	cmp    DWORD PTR [ebp+0xc],0x4a
10008826:	7f 07                	jg     1000882f <NFrame::setSize(int, int)+0x3f>
10008828:	c7 45 0c 4b 00 00 00 	mov    DWORD PTR [ebp+0xc],0x4b
1000882f:	83 7d 10 27          	cmp    DWORD PTR [ebp+0x10],0x27
10008833:	7f 07                	jg     1000883c <NFrame::setSize(int, int)+0x4c>
10008835:	c7 45 10 28 00 00 00 	mov    DWORD PTR [ebp+0x10],0x28
1000883c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000883f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10008842:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10008845:	75 0b                	jne    10008852 <NFrame::setSize(int, int)+0x62>
10008847:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000884a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
1000884d:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
10008850:	74 4b                	je     1000889d <NFrame::setSize(int, int)+0xad>
10008852:	83 ec 0c             	sub    esp,0xc
10008855:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008858:	e8 fc ff ff ff       	call   10008859 <NFrame::setSize(int, int)+0x69>	10008859: R_386_PC32	NFrame::tryInvalidate()
1000885d:	83 c4 10             	add    esp,0x10
10008860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008863:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10008866:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
10008869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000886c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000886f:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
10008872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008875:	8b 00                	mov    eax,DWORD PTR [eax]
10008877:	83 c0 0c             	add    eax,0xc
1000887a:	8b 00                	mov    eax,DWORD PTR [eax]
1000887c:	83 ec 0c             	sub    esp,0xc
1000887f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008882:	ff d0                	call   eax
10008884:	83 c4 10             	add    esp,0x10
10008887:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000888a:	8b 00                	mov    eax,DWORD PTR [eax]
1000888c:	8b 00                	mov    eax,DWORD PTR [eax]
1000888e:	83 ec 0c             	sub    esp,0xc
10008891:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008894:	ff d0                	call   eax
10008896:	83 c4 10             	add    esp,0x10
10008899:	b0 01                	mov    al,0x1
1000889b:	eb 02                	jmp    1000889f <NFrame::setSize(int, int)+0xaf>
1000889d:	b0 00                	mov    al,0x0
1000889f:	c9                   	leave  
100088a0:	c3                   	ret    
100088a1:	90                   	nop

100088a2 <NFrame::getX()>:
100088a2:	55                   	push   ebp
100088a3:	89 e5                	mov    ebp,esp
100088a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100088a8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
100088ab:	5d                   	pop    ebp
100088ac:	c3                   	ret    
100088ad:	90                   	nop

100088ae <NFrame::getY()>:
100088ae:	55                   	push   ebp
100088af:	89 e5                	mov    ebp,esp
100088b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100088b4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
100088b7:	5d                   	pop    ebp
100088b8:	c3                   	ret    
100088b9:	90                   	nop

100088ba <NFrame::setPosition(int, int)>:
100088ba:	55                   	push   ebp
100088bb:	89 e5                	mov    ebp,esp
100088bd:	83 ec 08             	sub    esp,0x8
100088c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100088c3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
100088c6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
100088c9:	75 0b                	jne    100088d6 <NFrame::setPosition(int, int)+0x1c>
100088cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100088ce:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
100088d1:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
100088d4:	74 7b                	je     10008951 <NFrame::setPosition(int, int)+0x97>
100088d6:	83 ec 0c             	sub    esp,0xc
100088d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100088dc:	e8 fc ff ff ff       	call   100088dd <NFrame::setPosition(int, int)+0x23>	100088dd: R_386_PC32	NFrame::tryInvalidate()
100088e1:	83 c4 10             	add    esp,0x10
100088e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100088e7:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
100088ea:	84 c0                	test   al,al
100088ec:	74 36                	je     10008924 <NFrame::setPosition(int, int)+0x6a>
100088ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100088f1:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
100088f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100088f7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
100088fa:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100088fd:	29 c1                	sub    ecx,eax
100088ff:	89 c8                	mov    eax,ecx
10008901:	01 c2                	add    edx,eax
10008903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008906:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
10008909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000890c:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
1000890f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008912:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
10008915:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10008918:	29 c1                	sub    ecx,eax
1000891a:	89 c8                	mov    eax,ecx
1000891c:	01 c2                	add    edx,eax
1000891e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008921:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
10008924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008927:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000892a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
1000892d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008930:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10008933:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
10008936:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008939:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
1000893c:	83 f0 01             	xor    eax,0x1
1000893f:	84 c0                	test   al,al
10008941:	74 0e                	je     10008951 <NFrame::setPosition(int, int)+0x97>
10008943:	83 ec 0c             	sub    esp,0xc
10008946:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008949:	e8 fc ff ff ff       	call   1000894a <NFrame::setPosition(int, int)+0x90>	1000894a: R_386_PC32	NFrame::tryInvalidate()
1000894e:	83 c4 10             	add    esp,0x10
10008951:	90                   	nop
10008952:	c9                   	leave  
10008953:	c3                   	ret    

10008954 <NFrame::raise()>:
10008954:	55                   	push   ebp
10008955:	89 e5                	mov    ebp,esp
10008957:	83 ec 18             	sub    esp,0x18
1000895a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000895d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10008960:	85 c0                	test   eax,eax
10008962:	74 2c                	je     10008990 <NFrame::raise()+0x3c>
10008964:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008967:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
1000896a:	83 ec 08             	sub    esp,0x8
1000896d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008970:	50                   	push   eax
10008971:	e8 fc ff ff ff       	call   10008972 <NFrame::raise()+0x1e>	10008972: R_386_PC32	NFrame::raiseChild(NFrame*)
10008976:	83 c4 10             	add    esp,0x10
10008979:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000897c:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10008980:	74 0e                	je     10008990 <NFrame::raise()+0x3c>
10008982:	83 ec 0c             	sub    esp,0xc
10008985:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008988:	e8 fc ff ff ff       	call   10008989 <NFrame::raise()+0x35>	10008989: R_386_PC32	NFrame::invalidate()
1000898d:	83 c4 10             	add    esp,0x10
10008990:	90                   	nop
10008991:	c9                   	leave  
10008992:	c3                   	ret    
10008993:	90                   	nop

10008994 <NFrame::isFullscreen()>:
10008994:	55                   	push   ebp
10008995:	89 e5                	mov    ebp,esp
10008997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000899a:	8a 40 70             	mov    al,BYTE PTR [eax+0x70]
1000899d:	5d                   	pop    ebp
1000899e:	c3                   	ret    
1000899f:	90                   	nop

100089a0 <NFrame::toggleFullscreen(Video*)>:
100089a0:	55                   	push   ebp
100089a1:	89 e5                	mov    ebp,esp
100089a3:	53                   	push   ebx
100089a4:	83 ec 04             	sub    esp,0x4
100089a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100089aa:	8a 40 70             	mov    al,BYTE PTR [eax+0x70]
100089ad:	84 c0                	test   al,al
100089af:	74 47                	je     100089f8 <NFrame::toggleFullscreen(Video*)+0x58>
100089b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100089b4:	c6 40 70 00          	mov    BYTE PTR [eax+0x70],0x0
100089b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100089bb:	8b 90 80 00 00 00    	mov    edx,DWORD PTR [eax+0x80]
100089c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100089c4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
100089c7:	83 ec 04             	sub    esp,0x4
100089ca:	52                   	push   edx
100089cb:	50                   	push   eax
100089cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100089cf:	e8 fc ff ff ff       	call   100089d0 <NFrame::toggleFullscreen(Video*)+0x30>	100089d0: R_386_PC32	NFrame::setSize(int, int)
100089d4:	83 c4 10             	add    esp,0x10
100089d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100089da:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
100089dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100089e0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
100089e3:	83 ec 04             	sub    esp,0x4
100089e6:	52                   	push   edx
100089e7:	50                   	push   eax
100089e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100089eb:	e8 fc ff ff ff       	call   100089ec <NFrame::toggleFullscreen(Video*)+0x4c>	100089ec: R_386_PC32	NFrame::setPosition(int, int)
100089f0:	83 c4 10             	add    esp,0x10
100089f3:	e9 88 00 00 00       	jmp    10008a80 <NFrame::toggleFullscreen(Video*)+0xe0>
100089f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100089fb:	c6 40 70 01          	mov    BYTE PTR [eax+0x70],0x1
100089ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008a02:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
10008a05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008a08:	89 50 74             	mov    DWORD PTR [eax+0x74],edx
10008a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008a0e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
10008a11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008a14:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
10008a17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008a1a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
10008a1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008a20:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
10008a23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008a26:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10008a29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008a2c:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
10008a32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008a35:	c6 40 68 01          	mov    BYTE PTR [eax+0x68],0x1
10008a39:	83 ec 04             	sub    esp,0x4
10008a3c:	6a 00                	push   0x0
10008a3e:	6a 00                	push   0x0
10008a40:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008a43:	e8 fc ff ff ff       	call   10008a44 <NFrame::toggleFullscreen(Video*)+0xa4>	10008a44: R_386_PC32	NFrame::setPosition(int, int)
10008a48:	83 c4 10             	add    esp,0x10
10008a4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008a4e:	c6 40 68 00          	mov    BYTE PTR [eax+0x68],0x0
10008a52:	83 ec 0c             	sub    esp,0xc
10008a55:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10008a58:	e8 fc ff ff ff       	call   10008a59 <NFrame::toggleFullscreen(Video*)+0xb9>	10008a59: R_386_PC32	Video::getHeight()
10008a5d:	83 c4 10             	add    esp,0x10
10008a60:	89 c3                	mov    ebx,eax
10008a62:	83 ec 0c             	sub    esp,0xc
10008a65:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10008a68:	e8 fc ff ff ff       	call   10008a69 <NFrame::toggleFullscreen(Video*)+0xc9>	10008a69: R_386_PC32	Video::getWidth()
10008a6d:	83 c4 10             	add    esp,0x10
10008a70:	83 ec 04             	sub    esp,0x4
10008a73:	53                   	push   ebx
10008a74:	50                   	push   eax
10008a75:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008a78:	e8 fc ff ff ff       	call   10008a79 <NFrame::toggleFullscreen(Video*)+0xd9>	10008a79: R_386_PC32	NFrame::setSize(int, int)
10008a7d:	83 c4 10             	add    esp,0x10
10008a80:	90                   	nop
10008a81:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10008a84:	c9                   	leave  
10008a85:	c3                   	ret    

10008a86 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)>:
10008a86:	55                   	push   ebp
10008a87:	89 e5                	mov    ebp,esp
10008a89:	83 ec 18             	sub    esp,0x18
10008a8c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10008a93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008a96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008a99:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10008a9c:	83 ec 0c             	sub    esp,0xc
10008a9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008aa2:	e8 fc ff ff ff       	call   10008aa3 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x1d>	10008aa3: R_386_PC32	LinkedList2<NFrame*>::isEmpty()
10008aa7:	83 c4 10             	add    esp,0x10
10008aaa:	83 f0 01             	xor    eax,0x1
10008aad:	84 c0                	test   al,al
10008aaf:	74 0e                	je     10008abf <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x39>
10008ab1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008ab4:	8b 00                	mov    eax,DWORD PTR [eax]
10008ab6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10008ab9:	75 04                	jne    10008abf <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x39>
10008abb:	b0 01                	mov    al,0x1
10008abd:	eb 02                	jmp    10008ac1 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x3b>
10008abf:	b0 00                	mov    al,0x0
10008ac1:	84 c0                	test   al,al
10008ac3:	74 30                	je     10008af5 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x6f>
10008ac5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008ac8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10008acb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008ace:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
10008ad1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008ad4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10008ad7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008ada:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008add:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10008ae0:	83 ec 08             	sub    esp,0x8
10008ae3:	6a 08                	push   0x8
10008ae5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10008ae8:	e8 fc ff ff ff       	call   10008ae9 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x63>	10008ae9: R_386_PC32	operator delete(void*, unsigned long)
10008aed:	83 c4 10             	add    esp,0x10
10008af0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10008af3:	eb a7                	jmp    10008a9c <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x16>
10008af5:	83 ec 0c             	sub    esp,0xc
10008af8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008afb:	e8 fc ff ff ff       	call   10008afc <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x76>	10008afc: R_386_PC32	LinkedList2<NFrame*>::isEmpty()
10008b00:	83 c4 10             	add    esp,0x10
10008b03:	83 f0 01             	xor    eax,0x1
10008b06:	84 c0                	test   al,al
10008b08:	74 14                	je     10008b1e <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x98>
10008b0a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10008b0e:	74 0e                	je     10008b1e <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x98>
10008b10:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008b13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008b16:	85 c0                	test   eax,eax
10008b18:	74 04                	je     10008b1e <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x98>
10008b1a:	b0 01                	mov    al,0x1
10008b1c:	eb 02                	jmp    10008b20 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x9a>
10008b1e:	b0 00                	mov    al,0x0
10008b20:	84 c0                	test   al,al
10008b22:	74 59                	je     10008b7d <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0xf7>
10008b24:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008b27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008b2a:	8b 00                	mov    eax,DWORD PTR [eax]
10008b2c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10008b2f:	75 3e                	jne    10008b6f <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0xe9>
10008b31:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008b34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008b37:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10008b3a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008b3d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008b40:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
10008b43:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008b46:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10008b49:	83 ec 08             	sub    esp,0x8
10008b4c:	6a 08                	push   0x8
10008b4e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10008b51:	e8 fc ff ff ff       	call   10008b52 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0xcc>	10008b52: R_386_PC32	operator delete(void*, unsigned long)
10008b56:	83 c4 10             	add    esp,0x10
10008b59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008b5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008b5f:	85 c0                	test   eax,eax
10008b61:	75 09                	jne    10008b6c <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0xe6>
10008b63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008b66:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10008b69:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10008b6c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10008b6f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008b72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008b75:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10008b78:	e9 78 ff ff ff       	jmp    10008af5 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x6f>
10008b7d:	83 ec 0c             	sub    esp,0xc
10008b80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008b83:	e8 fc ff ff ff       	call   10008b84 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0xfe>	10008b84: R_386_PC32	LinkedList2<NFrame*>::isEmpty()
10008b88:	83 c4 10             	add    esp,0x10
10008b8b:	84 c0                	test   al,al
10008b8d:	74 0a                	je     10008b99 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x113>
10008b8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008b92:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10008b99:	90                   	nop
10008b9a:	c9                   	leave  
10008b9b:	c3                   	ret    

10008b9c <_GLOBAL__sub_I_mouseX>:
10008b9c:	83 ec 18             	sub    esp,0x18
10008b9f:	68 00 00 00 00       	push   0x0	10008ba0: R_386_32	tightMouseRegionOld
10008ba4:	e8 fc ff ff ff       	call   10008ba5 <_GLOBAL__sub_I_mouseX+0x9>	10008ba5: R_386_PC32	Region::Region()
10008ba9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10008bac: R_386_32	tightMouseRegionNew
10008bb0:	e8 fc ff ff ff       	call   10008bb1 <_GLOBAL__sub_I_mouseX+0x15>	10008bb1: R_386_PC32	Region::Region()
10008bb5:	83 c4 1c             	add    esp,0x1c
10008bb8:	c3                   	ret    
10008bb9:	90                   	nop

10008bba <NFrame::isHidden()>:
10008bba:	55                   	push   ebp
10008bbb:	89 e5                	mov    ebp,esp
10008bbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008bc0:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10008bc3:	5d                   	pop    ebp
10008bc4:	c3                   	ret    
10008bc5:	90                   	nop

10008bc6 <NFrame::setWidth(int)>:
10008bc6:	55                   	push   ebp
10008bc7:	89 e5                	mov    ebp,esp
10008bc9:	83 ec 08             	sub    esp,0x8
10008bcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008bcf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
10008bd2:	83 ec 04             	sub    esp,0x4
10008bd5:	50                   	push   eax
10008bd6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10008bd9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008bdc:	e8 fc ff ff ff       	call   10008bdd <NFrame::setWidth(int)+0x17>	10008bdd: R_386_PC32	NFrame::setSize(int, int)
10008be1:	83 c4 10             	add    esp,0x10
10008be4:	90                   	nop
10008be5:	c9                   	leave  
10008be6:	c3                   	ret    
10008be7:	90                   	nop

10008be8 <NFrame::setHeight(int)>:
10008be8:	55                   	push   ebp
10008be9:	89 e5                	mov    ebp,esp
10008beb:	83 ec 08             	sub    esp,0x8
10008bee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008bf1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10008bf4:	83 ec 04             	sub    esp,0x4
10008bf7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10008bfa:	50                   	push   eax
10008bfb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008bfe:	e8 fc ff ff ff       	call   10008bff <NFrame::setHeight(int)+0x17>	10008bff: R_386_PC32	NFrame::setSize(int, int)
10008c03:	83 c4 10             	add    esp,0x10
10008c06:	90                   	nop
10008c07:	c9                   	leave  
10008c08:	c3                   	ret    
10008c09:	90                   	nop

10008c0a <NFrame::setX(int)>:
10008c0a:	55                   	push   ebp
10008c0b:	89 e5                	mov    ebp,esp
10008c0d:	83 ec 08             	sub    esp,0x8
10008c10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008c13:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
10008c16:	83 ec 04             	sub    esp,0x4
10008c19:	50                   	push   eax
10008c1a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10008c1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008c20:	e8 fc ff ff ff       	call   10008c21 <NFrame::setX(int)+0x17>	10008c21: R_386_PC32	NFrame::setPosition(int, int)
10008c25:	83 c4 10             	add    esp,0x10
10008c28:	90                   	nop
10008c29:	c9                   	leave  
10008c2a:	c3                   	ret    
10008c2b:	90                   	nop

10008c2c <NFrame::setY(int)>:
10008c2c:	55                   	push   ebp
10008c2d:	89 e5                	mov    ebp,esp
10008c2f:	83 ec 08             	sub    esp,0x8
10008c32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008c35:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
10008c38:	83 ec 04             	sub    esp,0x4
10008c3b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10008c3e:	50                   	push   eax
10008c3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008c42:	e8 fc ff ff ff       	call   10008c43 <NFrame::setY(int)+0x17>	10008c43: R_386_PC32	NFrame::setPosition(int, int)
10008c47:	83 c4 10             	add    esp,0x10
10008c4a:	90                   	nop
10008c4b:	c9                   	leave  
10008c4c:	c3                   	ret    
10008c4d:	66 90                	xchg   ax,ax
10008c4f:	90                   	nop

10008c50 <PHYS_RAM_TABLE_SIZE>:
10008c50:	13 05 00 00                                         ....

10008c54 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10008c54:	24 05 00 00                                         $...

10008c58 <PHYS_RAM_TABLE>:
10008c58:	00 06 00 00                                         ....

10008c5c <PHYS_DMA_MEMORY_1>:
10008c5c:	00 00 01 00                                         ....

10008c60 <PHYS_PHYS_PAGE_BITMAP>:
10008c60:	00 00 02 00                                         ....

10008c64 <PHYS_VIRT_PAGE_BITMAP>:
10008c64:	00 00 04 00                                         ....

10008c68 <PHYS_DMA_MEMORY_2>:
10008c68:	00 00 06 00                                         ....

10008c6c <PHYS_ALLOCED_VIRT_PAGES>:
10008c6c:	00 00 10 00                                         ....

10008c70 <PHYS_KRNL_PAGE_DIRECTORY>:
10008c70:	00 10 00 00                                         ....

10008c74 <VIRT_KERNEL_BASE>:
10008c74:	00 00 00 c0                                         ....

10008c78 <VIRT_LOW_MEGS>:
10008c78:	00 00 00 c2                                         ....

10008c7c <VIRT_CPU_SPECIFIC>:
10008c7c:	00 00 40 c2                                         ..@.

10008c80 <VIRT_RECURSIVE_SPOT_1>:
10008c80:	00 00 80 c2                                         ....

10008c84 <VIRT_RECURSIVE_SPOT_2>:
10008c84:	00 00 c0 c2                                         ....

10008c88 <VIRT_DMA_MEMORY_1>:
10008c88:	00 00 01 c2                                         ....

10008c8c <SIZE_DMA_MEMORY_1>:
10008c8c:	00 00 01 00                                         ....

10008c90 <VIRT_KRNL_PAGE_DIRECTORY>:
10008c90:	00 10 00 c2                                         ....

10008c94 <VIRT_PHYS_PAGE_BITMAP>:
10008c94:	00 00 02 c2                                         ....

10008c98 <SIZE_PHYS_PAGE_BITMAP>:
10008c98:	00 00 02 00                                         ....

10008c9c <VIRT_VIRT_PAGE_BITMAP>:
10008c9c:	00 00 04 c2                                         ....

10008ca0 <SIZE_VIRT_PAGE_BITMAP>:
10008ca0:	00 80 00 00                                         ....

10008ca4 <VIRT_RAM_TABLE>:
10008ca4:	00 06 00 c2                                         ....

10008ca8 <VIRT_RAM_TABLE_SIZE>:
10008ca8:	13 05 00 c2                                         ....

10008cac <VIRT_HIGHEST_UNUSED_ADDRESS>:
10008cac:	24 05 00 c2                                         $...

10008cb0 <SIZE_APP_STACK_USER>:
10008cb0:	00 00 18 00                                         ....

10008cb4 <SIZE_APP_STACK_KRNL>:
10008cb4:	00 00 08 00                                         ....

10008cb8 <SIZE_APP_STACK_TOTAL>:
10008cb8:	00 00 20 00                                         .. .

10008cbc <VIRT_APP_DATA>:
10008cbc:	00 00 00 10                                         ....

10008cc0 <VIRT_APP_STACK_USER_TOP>:
10008cc0:	00 00 00 02                                         ....

10008cc4 <VIRT_APP_STACK_KRNL_TOP>:
10008cc4:	00 00 e8 01                                         ....

10008cc8 <VIRT_HEAP_MIN>:
10008cc8:	00 00 00 c8                                         ....

10008ccc <VIRT_HEAP_MAX>:
10008ccc:	ff ff ff ef                                         ....

10008cd0 <VIRT_SBRK_MIN>:
10008cd0:	00 00 00 f0                                         ....

10008cd4 <VIRT_SBRK_MAX>:
10008cd4:	00 00 c0 ff                                         ....

10008cd8 <VIRT_ALLOCED_VIRT_PAGES>:
10008cd8:	00 00 10 c2                                         ....

10008cdc <VIRT_ACPI_DRIVER>:
10008cdc:	00 40 48 c2                                         .@H.

10008ce0 <TERMINAL_KEYBUFFER_IN_SIZE>:
10008ce0:	80 00 00 00                                         ....

10008ce4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10008ce4:	80 00 00 00 2a 53 59 53 54 45 4d 00 58 00 53 65     ....*SYSTEM.X.Se
10008cf4:	72 69 66 00 54 68 65 20 71 75 69 63 6b 20 62 72     rif.The quick br
10008d04:	6f 77 6e 20 66 6f 78 20 6a 75 6d 70 73 20 6f 76     own fox jumps ov
10008d14:	65 72 20 61 20 6c 61 7a 79 20 64 6f 67 2e 00 00     er a lazy dog...
10008d24:	31 3e 43 3a 2f 55 73 65 72 73 2f 41 6c 65 78 2f     1>C:/Users/Alex/
10008d34:	44 65 73 6b 74 6f 70 2f 42 61 6e 61 6e 61 2f 6b     Desktop/Banana/k
10008d44:	65 72 6e 65 6c 2f 6c 69 62 6b 2f 73 74 72 69 6e     ernel/libk/strin
10008d54:	67 2e 68 28 33 36 2c 38 29 3a 20 77 61 72 6e 69     g.h(36,8): warni
10008d64:	6e 67 20 47 41 45 34 42 46 37 39 39 3a 20 64 65     ng GAE4BF799: de
10008d74:	63 6c 61 72 61 74 69 6f 6e 20 6f 66 20 27 63 68     claration of 'ch
10008d84:	61 72 2a 20 73 74 72 63 68 72 28 63 68 61 72 2a     ar* strchr(char*
10008d94:	2c 20 69 6e 74 29 27 20 63 6f 6e 66 6c 69 63 74     , int)' conflict
10008da4:	73 20 77 69 74 68 20 62 75 69 6c 74 2d 69 6e 20     s with built-in 
10008db4:	64 65 63 6c 61 72 61 74 69 6f 6e 20 27 63 68 61     declaration 'cha
10008dc4:	72 2a 20 73 74 72 63 68 72 28 63 6f 6e 73 74 20     r* strchr(const 
10008dd4:	63 68 61 72 2a 2c 20 69 6e 74 29 27 20 5b 2d 57     char*, int)' [-W
10008de4:	62 75 69 6c 74 69 6e 2d 64 65 63 6c 61 72 61 74     builtin-declarat
10008df4:	69 6f 6e 2d 6d 69 73 6d 61 74 63 68 5d 00 00 00     ion-mismatch]...
10008e04:	4e 42 75 74 74 6f 6e 28 69 6e 74 20 78 2c 20 69     NButton(int x, i
10008e14:	6e 74 20 79 2c 20 69 6e 74 20 77 2c 20 69 6e 74     nt y, int w, int
10008e24:	20 68 29 20 3a 20 4e 46 72 61 6d 65 28 78 2c 20      h) : NFrame(x, 
10008e34:	79 2c 20 77 2c 20 68 29 00 00 00 00 70 61 69 6e     y, w, h)....pain
10008e44:	74 52 65 63 74 61 6e 67 6c 65 28 67 2c 20 30 2c     tRectangle(g, 0,
10008e54:	20 30 2c 20 72 67 6e 2e 77 69 64 74 68 2c 20 72      0, rgn.width, r
10008e64:	67 6e 2e 68 65 69 67 68 74 2c 20 63 6f 6c 29 3b     gn.height, col);
10008e74:	00 43 6c 69 70 64 72 61 77 20 69 73 20 6e 6f 77     .Clipdraw is now
10008e84:	20 72 75 6e 6e 69 6e 67 2e 2e 2e 0a 00 53 79 73      running.....Sys
10008e94:	74 65 6d 20 66 6f 6e 74 20 68 61 6e 64 6c 65 20     tem font handle 
10008ea4:	3d 20 25 64 0a 00 55 6e 74 69 74 6c 65 64 20 57     = %d..Untitled W
10008eb4:	69 6e 64 6f 77 00 43 3a 2f 42 61 6e 61 6e 61 2f     indow.C:/Banana/
10008ec4:	53 79 73 74 65 6d 2f 43 4c 49 50 44 45 4d 4f 2e     System/CLIPDEMO.
10008ed4:	45 58 45 00                                         EXE.

10008ed8 <vtable for NButton>:
	...
	10008ee0: R_386_32	NFrame::postResizeCleanup()
	10008ee4: R_386_32	NButton::paintHandler(NFrame::Graphics)
	10008ee8: R_386_32	NFrame::getChildAllowableRegion()
	10008eec: R_386_32	NFrame::regenerateRegion()

10008ef0 <vtable for NDesktopWindow>:
	...
	10008ef8: R_386_32	NFrame::postResizeCleanup()
	10008efc: R_386_32	NDesktopWindow::paintHandler(NFrame::Graphics)
	10008f00: R_386_32	NFrame::getChildAllowableRegion()
	10008f04: R_386_32	NFrame::regenerateRegion()

10008f08 <vtable for NWindow>:
	...
	10008f10: R_386_32	NWindow::postResizeCleanup()
	10008f14: R_386_32	NWindow::paintHandler(NFrame::Graphics)
	10008f18: R_386_32	NWindow::getChildAllowableRegion()
	10008f1c: R_386_32	NFrame::regenerateRegion()

10008f20 <vtable for NFrame>:
	...
	10008f28: R_386_32	NFrame::postResizeCleanup()
	10008f2c: R_386_32	__cxa_pure_virtual
	10008f30: R_386_32	NFrame::getChildAllowableRegion()
	10008f34: R_386_32	NFrame::regenerateRegion()
10008f38:	43 55 52 53 4f 52 20 4c 4f 41 44 3a 20 42 41 44     CURSOR LOAD: BAD
10008f48:	20 31 0a 00 43 55 52 53 4f 52 20 4c 4f 41 44 3a      1..CURSOR LOAD:
10008f58:	20 42 41 44 20 32 0a 00 4e 52 4d 4c 00 57 41 49      BAD 2..NRML.WAI
10008f68:	54 00 54 4c 44 52 00 54 45 58 54 00 56 45 52 54     T.TLDR.TEXT.VERT
10008f78:	00 48 4f 52 5a 00 48 41 4e 44 00 43 55 52 53 4f     .HORZ.HAND.CURSO
10008f88:	52 20 4c 4f 41 44 3a 20 42 41 44 20 33 0a 00 43     R LOAD: BAD 3..C
10008f98:	3a 2f 42 61 6e 61 6e 61 2f 43 75 72 73 6f 72 73     :/Banana/Cursors
10008fa8:	2f 53 54 41 4e 44 41 52 44 2e 43 55 52 00 70 69     /STANDARD.CUR.pi
10008fb8:	78 65 6c 20 6f 77 6e 65 72 20 3d 20 30 78 25 58     xel owner = 0x%X
10008fc8:	2c 20 25 64 78 25 64 20 25 64 78 25 64 0a 00 61     , %dx%d %dx%d..a
10008fd8:	62 6f 72 74 00 66 90 90 00 00 00 3f 4d 65 6d 6f     bort.f.....?Memo
10008fe8:	72 79 20 61 6c 6c 6f 63 61 74 69 6f 6e 20 65 72     ry allocation er
10008ff8:	72 6f 72 00 42 61 64 20 66 69 6c 65 20 66 6f 72     ror.Bad file for
10009008:	6d 61 74 00 4e 6f 20 66 6f 6e 74 20 66 61 63 65     mat.No font face
10009018:	20 66 6f 75 6e 64 00 49 6e 76 61 6c 69 64 20 69      found.Invalid i
10009028:	6e 70 75 74 20 76 61 6c 75 65 00 49 6e 76 61 6c     nput value.Inval
10009038:	69 64 20 73 74 79 6c 65 00 49 6e 76 61 6c 69 64     id style.Invalid
10009048:	20 73 69 7a 65 00 47 6c 79 70 68 20 6e 6f 74 20      size.Glyph not 
10009058:	66 6f 75 6e 64 00 53 46 4e 43 00 53 46 4e 32 00     found.SFNC.SFN2.
10009068:	32 4e 46 53 00 43 3a 2f 42 61 6e 61 6e 61 2f 46     2NFS.C:/Banana/F
10009078:	6f 6e 74 73 2f 53 46 4e 2f 00 2e 53 46 4e 00 4c     onts/SFN/..SFN.L
10009088:	6f 61 64 69 6e 67 20 66 6f 6e 74 20 27 25 73 27     oading font '%s'
10009098:	0a 00 63 61 6e 6e 6f 74 20 63 72 65 61 74 65 20     ..cannot create 
100090a8:	66 69 6c 65 2e 0a 00 63 61 6e 6e 6f 74 20 63 72     file...cannot cr
100090b8:	65 61 74 65 20 72 65 61 64 2e 0a 00 62 75 74 20     eate read...but 
100090c8:	77 65 20 6f 6e 6c 79 20 72 65 61 64 20 25 64 20     we only read %d 
100090d8:	62 79 74 65 73 2e 0a 00 65 78 69 73 74 69 6e 67     bytes...existing
100090e8:	20 68 61 6e 64 6c 65 20 3d 20 25 64 0a 00 65 78      handle = %d..ex
100090f8:	69 73 74 69 6e 67 20 66 6f 6e 74 20 3d 20 30 78     isting font = 0x
10009108:	25 58 0a 00 65 78 69 73 74 69 6e 67 46 6f 6e 74     %X..existingFont
10009118:	2d 3e 73 73 66 6e 44 61 74 61 20 3d 20 30 78 25     ->ssfnData = 0x%
10009128:	58 0a 00                                            X..

1000912b <.LC0>:
1000912b:	20 53 54             	and    BYTE PTR [ebx+0x54],dl
1000912e:	4f                   	dec    edi
1000912f:	50                   	push   eax
10009130:	20 45 52             	and    BYTE PTR [ebp+0x52],al
10009133:	52                   	push   edx
10009134:	4f                   	dec    edi
10009135:	52                   	push   edx
10009136:	20 00                	and    BYTE PTR [eax],al

10009138 <.LC1>:
10009138:	41                   	inc    ecx
10009139:	20 70 72             	and    BYTE PTR [eax+0x72],dh
1000913c:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000913d:	62 6c 65 6d          	bound  ebp,QWORD PTR [ebp+eiz*2+0x6d]
10009141:	20 68 61             	and    BYTE PTR [eax+0x61],ch
10009144:	73 20                	jae    10009166 <.LC1+0x2e>
10009146:	6f                   	outs   dx,DWORD PTR ds:[esi]
10009147:	63 63 75             	arpl   WORD PTR [ebx+0x75],sp
1000914a:	72 65                	jb     100091b1 <systemFontBuiltin+0x11>
1000914c:	64 20 61 6e          	and    BYTE PTR fs:[ecx+0x6e],ah
10009150:	64 20 42 61          	and    BYTE PTR fs:[edx+0x61],al
10009154:	6e                   	outs   dx,BYTE PTR ds:[esi]
10009155:	61                   	popa   
10009156:	6e                   	outs   dx,BYTE PTR ds:[esi]
10009157:	61                   	popa   
10009158:	20 63 61             	and    BYTE PTR [ebx+0x61],ah
1000915b:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000915c:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000915d:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000915e:	74 20                	je     10009180 <.LC1+0x48>
10009160:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
10009163:	74 69                	je     100091ce <systemFontBuiltin+0x2e>
10009165:	6e                   	outs   dx,BYTE PTR ds:[esi]
10009166:	75 65                	jne    100091cd <systemFontBuiltin+0x2d>
10009168:	2e 00 66 90          	add    BYTE PTR cs:[esi-0x70],ah
1000916c:	2a 53 59             	sub    dl,BYTE PTR [ebx+0x59]
1000916f:	53                   	push   ebx
10009170:	54                   	push   esp
10009171:	45                   	inc    ebp
10009172:	4d                   	dec    ebp
10009173:	00 58 00             	add    BYTE PTR [eax+0x0],bl
10009176:	00 00                	add    BYTE PTR [eax],al
10009178:	e7 62                	out    0x62,eax	10009178: R_386_32	.text
1000917a:	00 10                	add    BYTE PTR [eax],dl
1000917c:	fb                   	sti    	1000917c: R_386_32	.text
1000917d:	62 00                	bound  eax,QWORD PTR [eax]
1000917f:	10 0e                	adc    BYTE PTR [esi],cl	10009180: R_386_32	.text
10009181:	63 00                	arpl   WORD PTR [eax],ax
10009183:	10 29                	adc    BYTE PTR [ecx],ch	10009184: R_386_32	.text
10009185:	63 00                	arpl   WORD PTR [eax],ax
10009187:	10 16                	adc    BYTE PTR [esi],dl	10009188: R_386_32	.text
10009189:	63 00                	arpl   WORD PTR [eax],ax
1000918b:	10 3c 63             	adc    BYTE PTR [ebx+eiz*2],bh	1000918c: R_386_32	.text
1000918e:	00 10                	add    BYTE PTR [eax],dl
10009190:	62 63 00             	bound  esp,QWORD PTR [ebx+0x0]	10009190: R_386_32	.text
10009193:	10 4f 63             	adc    BYTE PTR [edi+0x63],cl	10009194: R_386_32	.text
10009196:	00 10                	add    BYTE PTR [eax],dl
10009198:	72 63                	jb     100091fd <systemFontBuiltin+0x5d>	10009198: R_386_32	.text
1000919a:	00 10                	add    BYTE PTR [eax],dl
