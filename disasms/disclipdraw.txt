
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <NiBegin(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <NiBegin(void*)+0xd>	1000000d: R_386_PC32	NiMain(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <kernelMouseHandler(int, int, int, int)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 08             	sub    esp,0x8
1000001d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000001e: R_386_32	screen
10000022:	83 ec 08             	sub    esp,0x8
10000025:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10000028:	6a 00                	push   0x0
1000002a:	6a 00                	push   0x0
1000002c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000002f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000032:	50                   	push   eax
10000033:	e8 fc ff ff ff       	call   10000034 <kernelMouseHandler(int, int, int, int)+0x1d>	10000034: R_386_PC32	handleMouse(Video*, int, int, int, int, int)
10000038:	83 c4 20             	add    esp,0x20
1000003b:	90                   	nop
1000003c:	c9                   	leave  
1000003d:	c3                   	ret    

1000003e <drawVGAChar(int, int, int, int, int)>:
1000003e:	55                   	push   ebp
1000003f:	89 e5                	mov    ebp,esp
10000041:	57                   	push   edi
10000042:	56                   	push   esi
10000043:	53                   	push   ebx
10000044:	83 ec 1c             	sub    esp,0x1c
10000047:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000004e:	83 7d e4 0f          	cmp    DWORD PTR [ebp-0x1c],0xf
10000052:	7f 76                	jg     100000ca <drawVGAChar(int, int, int, int, int)+0x8c>
10000054:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000057:	c1 e0 04             	shl    eax,0x4
1000005a:	89 c2                	mov    edx,eax
1000005c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000005f:	01 d0                	add    eax,edx
10000061:	8a 80 00 00 00 00    	mov    al,BYTE PTR [eax+0x0]	10000063: R_386_32	cp
10000067:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
1000006a:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000071:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000075:	7f 4e                	jg     100000c5 <drawVGAChar(int, int, int, int, int)+0x87>
10000077:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10000079: R_386_32	screen
1000007d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000007e: R_386_32	screen
10000082:	8b 00                	mov    eax,DWORD PTR [eax]
10000084:	83 c0 24             	add    eax,0x24
10000087:	8b 10                	mov    edx,DWORD PTR [eax]
10000089:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
1000008c:	84 c0                	test   al,al
1000008e:	79 05                	jns    10000095 <drawVGAChar(int, int, int, int, int)+0x57>
10000090:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10000093:	eb 03                	jmp    10000098 <drawVGAChar(int, int, int, int, int)+0x5a>
10000095:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10000098:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
1000009b:	89 de                	mov    esi,ebx
1000009d:	c1 e6 04             	shl    esi,0x4
100000a0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
100000a3:	01 de                	add    esi,ebx
100000a5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100000a8:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
100000af:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
100000b2:	01 fb                	add    ebx,edi
100000b4:	50                   	push   eax
100000b5:	56                   	push   esi
100000b6:	53                   	push   ebx
100000b7:	51                   	push   ecx
100000b8:	ff d2                	call   edx
100000ba:	83 c4 10             	add    esp,0x10
100000bd:	d0 65 e3             	shl    BYTE PTR [ebp-0x1d],1
100000c0:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
100000c3:	eb ac                	jmp    10000071 <drawVGAChar(int, int, int, int, int)+0x33>
100000c5:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100000c8:	eb 84                	jmp    1000004e <drawVGAChar(int, int, int, int, int)+0x10>
100000ca:	90                   	nop
100000cb:	8d 65 f4             	lea    esp,[ebp-0xc]
100000ce:	5b                   	pop    ebx
100000cf:	5e                   	pop    esi
100000d0:	5f                   	pop    edi
100000d1:	5d                   	pop    ebp
100000d2:	c3                   	ret    

100000d3 <kernelPanicHandler(char*)>:
100000d3:	55                   	push   ebp
100000d4:	89 e5                	mov    ebp,esp
100000d6:	83 ec 18             	sub    esp,0x18
100000d9:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100000db: R_386_32	screen
100000df:	a1 00 00 00 00       	mov    eax,ds:0x0	100000e0: R_386_32	screen
100000e4:	8b 00                	mov    eax,DWORD PTR [eax]
100000e6:	83 c0 40             	add    eax,0x40
100000e9:	8b 00                	mov    eax,DWORD PTR [eax]
100000eb:	83 ec 08             	sub    esp,0x8
100000ee:	68 80 00 00 00       	push   0x80
100000f3:	52                   	push   edx
100000f4:	ff d0                	call   eax
100000f6:	83 c4 10             	add    esp,0x10
100000f9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000100:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000103:	05 65 84 00 10       	add    eax,0x10008465	10000104: R_386_32	.text
10000108:	8a 00                	mov    al,BYTE PTR [eax]
1000010a:	84 c0                	test   al,al
1000010c:	74 31                	je     1000013f <kernelPanicHandler(char*)+0x6c>
1000010e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000111:	05 65 84 00 10       	add    eax,0x10008465	10000112: R_386_32	.text
10000116:	8a 00                	mov    al,BYTE PTR [eax]
10000118:	0f be c0             	movsx  eax,al
1000011b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000011e:	83 c2 06             	add    edx,0x6
10000121:	83 ec 0c             	sub    esp,0xc
10000124:	68 ff ff ff 00       	push   0xffffff
10000129:	68 80 00 00 00       	push   0x80
1000012e:	50                   	push   eax
1000012f:	6a 02                	push   0x2
10000131:	52                   	push   edx
10000132:	e8 fc ff ff ff       	call   10000133 <kernelPanicHandler(char*)+0x60>	10000133: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000137:	83 c4 20             	add    esp,0x20
1000013a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000013d:	eb c1                	jmp    10000100 <kernelPanicHandler(char*)+0x2d>
1000013f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000146:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000149:	05 74 84 00 10       	add    eax,0x10008474	1000014a: R_386_32	.text
1000014e:	8a 00                	mov    al,BYTE PTR [eax]
10000150:	84 c0                	test   al,al
10000152:	74 31                	je     10000185 <kernelPanicHandler(char*)+0xb2>
10000154:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000157:	05 74 84 00 10       	add    eax,0x10008474	10000158: R_386_32	.text
1000015c:	8a 00                	mov    al,BYTE PTR [eax]
1000015e:	0f be c0             	movsx  eax,al
10000161:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000164:	83 c2 06             	add    edx,0x6
10000167:	83 ec 0c             	sub    esp,0xc
1000016a:	68 80 00 00 00       	push   0x80
1000016f:	68 ff ff ff 00       	push   0xffffff
10000174:	50                   	push   eax
10000175:	6a 04                	push   0x4
10000177:	52                   	push   edx
10000178:	e8 fc ff ff ff       	call   10000179 <kernelPanicHandler(char*)+0xa6>	10000179: R_386_PC32	drawVGAChar(int, int, int, int, int)
1000017d:	83 c4 20             	add    esp,0x20
10000180:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10000183:	eb c1                	jmp    10000146 <kernelPanicHandler(char*)+0x73>
10000185:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
1000018c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
1000018f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000192:	01 d0                	add    eax,edx
10000194:	8a 00                	mov    al,BYTE PTR [eax]
10000196:	84 c0                	test   al,al
10000198:	74 31                	je     100001cb <kernelPanicHandler(char*)+0xf8>
1000019a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
1000019d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001a0:	01 d0                	add    eax,edx
100001a2:	8a 00                	mov    al,BYTE PTR [eax]
100001a4:	0f be c0             	movsx  eax,al
100001a7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
100001aa:	83 c2 0a             	add    edx,0xa
100001ad:	83 ec 0c             	sub    esp,0xc
100001b0:	68 80 00 00 00       	push   0x80
100001b5:	68 ff ff ff 00       	push   0xffffff
100001ba:	50                   	push   eax
100001bb:	6a 06                	push   0x6
100001bd:	52                   	push   edx
100001be:	e8 fc ff ff ff       	call   100001bf <kernelPanicHandler(char*)+0xec>	100001bf: R_386_PC32	drawVGAChar(int, int, int, int, int)
100001c3:	83 c4 20             	add    esp,0x20
100001c6:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100001c9:	eb c1                	jmp    1000018c <kernelPanicHandler(char*)+0xb9>
100001cb:	f4                   	hlt    
100001cc:	eb fd                	jmp    100001cb <kernelPanicHandler(char*)+0xf8>

100001ce <NiMain(void*)>:
100001ce:	55                   	push   ebp
100001cf:	89 e5                	mov    ebp,esp
100001d1:	57                   	push   edi
100001d2:	56                   	push   esi
100001d3:	53                   	push   ebx
100001d4:	81 ec dc 00 00 00    	sub    esp,0xdc
100001da:	83 ec 0c             	sub    esp,0xc
100001dd:	68 a6 84 00 10       	push   0x100084a6	100001de: R_386_32	.text
100001e2:	e8 fc ff ff ff       	call   100001e3 <NiMain(void*)+0x15>	100001e3: R_386_PC32	Dbg::kprintf(char const*, ...)
100001e7:	83 c4 10             	add    esp,0x10
100001ea:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100001ec: R_386_32	guiPanicHandler
	100001f0: R_386_32	kernelPanicHandler(char*)
100001f4:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001f6: R_386_32	screen
100001fa:	a1 00 00 00 00       	mov    eax,ds:0x0	100001fb: R_386_32	screen
100001ff:	8b 00                	mov    eax,DWORD PTR [eax]
10000201:	83 c0 40             	add    eax,0x40
10000204:	8b 00                	mov    eax,DWORD PTR [eax]
10000206:	83 ec 08             	sub    esp,0x8
10000209:	68 80 80 00 00       	push   0x8080
1000020e:	52                   	push   edx
1000020f:	ff d0                	call   eax
10000211:	83 c4 10             	add    esp,0x10
10000214:	c7 05 00 00 00 00 32 00 00 00 	mov    DWORD PTR ds:0x0,0x32	10000216: R_386_32	mouseX
1000021e:	c7 05 00 00 00 00 32 00 00 00 	mov    DWORD PTR ds:0x0,0x32	10000220: R_386_32	mouseY
10000228:	e8 fc ff ff ff       	call   10000229 <NiMain(void*)+0x5b>	10000229: R_386_PC32	initFonts()
1000022d:	6a 00                	push   0x0
1000022f:	6a 0c                	push   0xc
10000231:	68 d8 82 00 10       	push   0x100082d8	10000232: R_386_32	.text
10000236:	8d 85 44 ff ff ff    	lea    eax,[ebp-0xbc]
1000023c:	50                   	push   eax
1000023d:	e8 fc ff ff ff       	call   1000023e <NiMain(void*)+0x70>	1000023e: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
10000242:	83 c4 10             	add    esp,0x10
10000245:	83 ec 08             	sub    esp,0x8
10000248:	81 ec 88 00 00 00    	sub    esp,0x88
1000024e:	89 e0                	mov    eax,esp
10000250:	89 c3                	mov    ebx,eax
10000252:	8d 85 44 ff ff ff    	lea    eax,[ebp-0xbc]
10000258:	ba 22 00 00 00       	mov    edx,0x22
1000025d:	89 df                	mov    edi,ebx
1000025f:	89 c6                	mov    esi,eax
10000261:	89 d1                	mov    ecx,edx
10000263:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000265:	e8 fc ff ff ff       	call   10000266 <NiMain(void*)+0x98>	10000266: R_386_PC32	getFontHandle(FontStyle)
1000026a:	81 c4 90 00 00 00    	add    esp,0x90
10000270:	a3 00 00 00 00       	mov    ds:0x0,eax	10000271: R_386_32	SYSTEM_FONT_HANDLE
10000275:	a1 00 00 00 00       	mov    eax,ds:0x0	10000276: R_386_32	SYSTEM_FONT_HANDLE
1000027a:	83 ec 08             	sub    esp,0x8
1000027d:	50                   	push   eax
1000027e:	68 c2 84 00 10       	push   0x100084c2	1000027f: R_386_32	.text
10000283:	e8 fc ff ff ff       	call   10000284 <NiMain(void*)+0xb6>	10000284: R_386_PC32	Dbg::kprintf(char const*, ...)
10000288:	83 c4 10             	add    esp,0x10
1000028b:	c7 45 cc 90 00 00 00 	mov    DWORD PTR [ebp-0x34],0x90
10000292:	83 ec 0c             	sub    esp,0xc
10000295:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000298:	e8 fc ff ff ff       	call   10000299 <NiMain(void*)+0xcb>	10000299: R_386_PC32	malloc
1000029d:	83 c4 10             	add    esp,0x10
100002a0:	89 c3                	mov    ebx,eax
100002a2:	83 ec 04             	sub    esp,0x4
100002a5:	6a 00                	push   0x0
100002a7:	68 db 84 00 10       	push   0x100084db	100002a8: R_386_32	.text
100002ac:	68 5e 01 00 00       	push   0x15e
100002b1:	68 5e 01 00 00       	push   0x15e
100002b6:	6a 32                	push   0x32
100002b8:	6a 50                	push   0x50
100002ba:	53                   	push   ebx
100002bb:	e8 fc ff ff ff       	call   100002bc <NiMain(void*)+0xee>	100002bc: R_386_PC32	NWindow::NWindow(int, int, int, int, char const*, int)
100002c0:	83 c4 20             	add    esp,0x20
100002c3:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
100002c6:	c7 45 d0 90 00 00 00 	mov    DWORD PTR [ebp-0x30],0x90
100002cd:	83 ec 0c             	sub    esp,0xc
100002d0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100002d3:	e8 fc ff ff ff       	call   100002d4 <NiMain(void*)+0x106>	100002d4: R_386_PC32	malloc
100002d8:	83 c4 10             	add    esp,0x10
100002db:	89 c3                	mov    ebx,eax
100002dd:	83 ec 04             	sub    esp,0x4
100002e0:	6a 00                	push   0x0
100002e2:	68 db 84 00 10       	push   0x100084db	100002e3: R_386_32	.text
100002e7:	68 c2 01 00 00       	push   0x1c2
100002ec:	68 c2 01 00 00       	push   0x1c2
100002f1:	6a 58                	push   0x58
100002f3:	68 b4 00 00 00       	push   0xb4
100002f8:	53                   	push   ebx
100002f9:	e8 fc ff ff ff       	call   100002fa <NiMain(void*)+0x12c>	100002fa: R_386_PC32	NWindow::NWindow(int, int, int, int, char const*, int)
100002fe:	83 c4 20             	add    esp,0x20
10000301:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
10000304:	c7 45 d4 88 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x88
1000030b:	83 ec 0c             	sub    esp,0xc
1000030e:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000311:	e8 fc ff ff ff       	call   10000312 <NiMain(void*)+0x144>	10000312: R_386_PC32	malloc
10000316:	83 c4 10             	add    esp,0x10
10000319:	89 c3                	mov    ebx,eax
1000031b:	83 ec 0c             	sub    esp,0xc
1000031e:	68 58 02 00 00       	push   0x258
10000323:	68 40 06 00 00       	push   0x640
10000328:	6a 28                	push   0x28
1000032a:	6a 0f                	push   0xf
1000032c:	53                   	push   ebx
1000032d:	e8 fc ff ff ff       	call   1000032e <NiMain(void*)+0x160>	1000032e: R_386_PC32	NButton::NButton(int, int, int, int)
10000332:	83 c4 20             	add    esp,0x20
10000335:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10000338:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000033b:	83 ec 08             	sub    esp,0x8
1000033e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10000341:	50                   	push   eax
10000342:	e8 fc ff ff ff       	call   10000343 <NiMain(void*)+0x175>	10000343: R_386_PC32	NFrame::addChild(NFrame*)
10000347:	83 c4 10             	add    esp,0x10
1000034a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000034b: R_386_32	screen
1000034f:	83 ec 0c             	sub    esp,0xc
10000352:	50                   	push   eax
10000353:	e8 fc ff ff ff       	call   10000354 <NiMain(void*)+0x186>	10000354: R_386_PC32	Video::getWidth()
10000358:	83 c4 10             	add    esp,0x10
1000035b:	89 c6                	mov    esi,eax
1000035d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000035e: R_386_32	screen
10000362:	83 ec 0c             	sub    esp,0xc
10000365:	50                   	push   eax
10000366:	e8 fc ff ff ff       	call   10000367 <NiMain(void*)+0x199>	10000367: R_386_PC32	Video::getHeight()
1000036b:	83 c4 10             	add    esp,0x10
1000036e:	89 c7                	mov    edi,eax
10000370:	c7 45 d8 8c 00 00 00 	mov    DWORD PTR [ebp-0x28],0x8c
10000377:	83 ec 0c             	sub    esp,0xc
1000037a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000037d:	e8 fc ff ff ff       	call   1000037e <NiMain(void*)+0x1b0>	1000037e: R_386_PC32	malloc
10000382:	83 c4 10             	add    esp,0x10
10000385:	89 c3                	mov    ebx,eax
10000387:	83 ec 08             	sub    esp,0x8
1000038a:	68 80 80 00 00       	push   0x8080
1000038f:	57                   	push   edi
10000390:	56                   	push   esi
10000391:	6a 00                	push   0x0
10000393:	6a 00                	push   0x0
10000395:	53                   	push   ebx
10000396:	e8 fc ff ff ff       	call   10000397 <NiMain(void*)+0x1c9>	10000397: R_386_PC32	NDesktopWindow::NDesktopWindow(int, int, int, int, int)
1000039b:	83 c4 20             	add    esp,0x20
1000039e:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100003a0: R_386_32	desktopWindow
100003a4:	a1 00 00 00 00       	mov    eax,ds:0x0	100003a5: R_386_32	desktopWindow
100003a9:	83 ec 08             	sub    esp,0x8
100003ac:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
100003af:	50                   	push   eax
100003b0:	e8 fc ff ff ff       	call   100003b1 <NiMain(void*)+0x1e3>	100003b1: R_386_PC32	NFrame::addChild(NFrame*)
100003b5:	83 c4 10             	add    esp,0x10
100003b8:	a1 00 00 00 00       	mov    eax,ds:0x0	100003b9: R_386_32	desktopWindow
100003bd:	83 ec 08             	sub    esp,0x8
100003c0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100003c3:	50                   	push   eax
100003c4:	e8 fc ff ff ff       	call   100003c5 <NiMain(void*)+0x1f7>	100003c5: R_386_PC32	NFrame::addChild(NFrame*)
100003c9:	83 c4 10             	add    esp,0x10
100003cc:	a1 00 00 00 00       	mov    eax,ds:0x0	100003cd: R_386_32	screen
100003d1:	83 ec 0c             	sub    esp,0xc
100003d4:	50                   	push   eax
100003d5:	e8 fc ff ff ff       	call   100003d6 <NiMain(void*)+0x208>	100003d6: R_386_PC32	mouseInit(Video*)
100003da:	83 c4 10             	add    esp,0x10
100003dd:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100003df: R_386_32	guiMouseHandler
	100003e3: R_386_32	kernelMouseHandler(int, int, int, int)
100003e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100003e8: R_386_32	screen
100003ec:	83 ec 0c             	sub    esp,0xc
100003ef:	50                   	push   eax
100003f0:	e8 fc ff ff ff       	call   100003f1 <NiMain(void*)+0x223>	100003f1: R_386_PC32	Video::getWidth()
100003f5:	83 c4 10             	add    esp,0x10
100003f8:	8d 50 01             	lea    edx,[eax+0x1]
100003fb:	8d 85 28 ff ff ff    	lea    eax,[ebp-0xd8]
10000401:	83 ec 0c             	sub    esp,0xc
10000404:	6a 01                	push   0x1
10000406:	6a 01                	push   0x1
10000408:	6a 01                	push   0x1
1000040a:	52                   	push   edx
1000040b:	50                   	push   eax
1000040c:	e8 fc ff ff ff       	call   1000040d <NiMain(void*)+0x23f>	1000040d: R_386_PC32	createRectangleRegion(int, int, int, int)
10000411:	83 c4 1c             	add    esp,0x1c
10000414:	a1 00 00 00 00       	mov    eax,ds:0x0	10000415: R_386_32	desktopWindow
10000419:	83 ec 0c             	sub    esp,0xc
1000041c:	50                   	push   eax
1000041d:	e8 fc ff ff ff       	call   1000041e <NiMain(void*)+0x250>	1000041e: R_386_PC32	NFrame::tryInvalidate()
10000422:	83 c4 10             	add    esp,0x10
10000425:	a1 00 00 00 00       	mov    eax,ds:0x0	10000426: R_386_32	desktopWindow
1000042a:	89 85 24 ff ff ff    	mov    DWORD PTR [ebp-0xdc],eax
10000430:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10000432: R_386_32	screen
10000436:	89 8d 20 ff ff ff    	mov    DWORD PTR [ebp-0xe0],ecx
1000043c:	83 ec 0c             	sub    esp,0xc
1000043f:	83 ec 1c             	sub    esp,0x1c
10000442:	89 e0                	mov    eax,esp
10000444:	89 c3                	mov    ebx,eax
10000446:	8d 85 28 ff ff ff    	lea    eax,[ebp-0xd8]
1000044c:	ba 07 00 00 00       	mov    edx,0x7
10000451:	89 df                	mov    edi,ebx
10000453:	89 c6                	mov    esi,eax
10000455:	89 d1                	mov    ecx,edx
10000457:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000459:	ff b5 20 ff ff ff    	push   DWORD PTR [ebp-0xe0]
1000045f:	ff b5 24 ff ff ff    	push   DWORD PTR [ebp-0xdc]
10000465:	e8 fc ff ff ff       	call   10000466 <NiMain(void*)+0x298>	10000466: R_386_PC32	NFrame::repaint(Video*, Region)
1000046a:	83 c4 30             	add    esp,0x30
1000046d:	83 ec 0c             	sub    esp,0xc
10000470:	6a 02                	push   0x2
10000472:	e8 fc ff ff ff       	call   10000473 <NiMain(void*)+0x2a5>	10000473: R_386_PC32	blockTask(TaskState)
10000477:	83 c4 10             	add    esp,0x10
1000047a:	eb f1                	jmp    1000046d <NiMain(void*)+0x29f>

1000047c <lookupInFontTableByNameOnly(char const*, int)>:
1000047c:	55                   	push   ebp
1000047d:	89 e5                	mov    ebp,esp
1000047f:	83 ec 18             	sub    esp,0x18
10000482:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000489:	a1 00 00 00 00       	mov    eax,ds:0x0	1000048a: R_386_32	fontTable
1000048e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10000491:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10000494:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10000498:	74 43                	je     100004dd <lookupInFontTableByNameOnly(char const*, int)+0x61>
1000049a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000049d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004a0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100004a6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100004a9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100004ac:	8b 00                	mov    eax,DWORD PTR [eax]
100004ae:	85 c0                	test   eax,eax
100004b0:	74 2a                	je     100004dc <lookupInFontTableByNameOnly(char const*, int)+0x60>
100004b2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100004b5:	8b 00                	mov    eax,DWORD PTR [eax]
100004b7:	83 ec 08             	sub    esp,0x8
100004ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004bd:	50                   	push   eax
100004be:	e8 fc ff ff ff       	call   100004bf <lookupInFontTableByNameOnly(char const*, int)+0x43>	100004bf: R_386_PC32	strcmp
100004c3:	83 c4 10             	add    esp,0x10
100004c6:	85 c0                	test   eax,eax
100004c8:	75 0d                	jne    100004d7 <lookupInFontTableByNameOnly(char const*, int)+0x5b>
100004ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100004cd:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
100004d0:	74 05                	je     100004d7 <lookupInFontTableByNameOnly(char const*, int)+0x5b>
100004d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100004d5:	eb 0b                	jmp    100004e2 <lookupInFontTableByNameOnly(char const*, int)+0x66>
100004d7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100004da:	eb b8                	jmp    10000494 <lookupInFontTableByNameOnly(char const*, int)+0x18>
100004dc:	90                   	nop
100004dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
100004e2:	c9                   	leave  
100004e3:	c3                   	ret    

100004e4 <lookupInFontTable(FontStyle)>:
100004e4:	55                   	push   ebp
100004e5:	89 e5                	mov    ebp,esp
100004e7:	83 ec 18             	sub    esp,0x18
100004ea:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100004f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100004f2: R_386_32	fontTable
100004f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100004f9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100004fc:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10000500:	74 66                	je     10000568 <lookupInFontTable(FontStyle)+0x84>
10000502:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000505:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000508:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000050b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000050e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10000511:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000514:	8b 00                	mov    eax,DWORD PTR [eax]
10000516:	85 c0                	test   eax,eax
10000518:	74 4d                	je     10000567 <lookupInFontTable(FontStyle)+0x83>
1000051a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000051d:	8b 00                	mov    eax,DWORD PTR [eax]
1000051f:	8b 90 80 00 00 00    	mov    edx,DWORD PTR [eax+0x80]
10000525:	8b 85 88 00 00 00    	mov    eax,DWORD PTR [ebp+0x88]
1000052b:	39 c2                	cmp    edx,eax
1000052d:	75 33                	jne    10000562 <lookupInFontTable(FontStyle)+0x7e>
1000052f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000532:	8b 00                	mov    eax,DWORD PTR [eax]
10000534:	83 ec 08             	sub    esp,0x8
10000537:	8d 55 08             	lea    edx,[ebp+0x8]
1000053a:	52                   	push   edx
1000053b:	50                   	push   eax
1000053c:	e8 fc ff ff ff       	call   1000053d <lookupInFontTable(FontStyle)+0x59>	1000053d: R_386_PC32	strcmp
10000541:	83 c4 10             	add    esp,0x10
10000544:	85 c0                	test   eax,eax
10000546:	75 1a                	jne    10000562 <lookupInFontTable(FontStyle)+0x7e>
10000548:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000054b:	8b 00                	mov    eax,DWORD PTR [eax]
1000054d:	8b 90 84 00 00 00    	mov    edx,DWORD PTR [eax+0x84]
10000553:	8b 85 8c 00 00 00    	mov    eax,DWORD PTR [ebp+0x8c]
10000559:	39 c2                	cmp    edx,eax
1000055b:	75 05                	jne    10000562 <lookupInFontTable(FontStyle)+0x7e>
1000055d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000560:	eb 0b                	jmp    1000056d <lookupInFontTable(FontStyle)+0x89>
10000562:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000565:	eb 95                	jmp    100004fc <lookupInFontTable(FontStyle)+0x18>
10000567:	90                   	nop
10000568:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000056d:	c9                   	leave  
1000056e:	c3                   	ret    

1000056f <getFontHandle(FontStyle)>:
1000056f:	55                   	push   ebp
10000570:	89 e5                	mov    ebp,esp
10000572:	57                   	push   edi
10000573:	56                   	push   esi
10000574:	53                   	push   ebx
10000575:	83 ec 2c             	sub    esp,0x2c
10000578:	a1 00 00 00 00       	mov    eax,ds:0x0	10000579: R_386_32	fontTable
1000057d:	85 c0                	test   eax,eax
1000057f:	75 29                	jne    100005aa <getFontHandle(FontStyle)+0x3b>
10000581:	c7 45 d8 0c 00 00 00 	mov    DWORD PTR [ebp-0x28],0xc
10000588:	83 ec 0c             	sub    esp,0xc
1000058b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000058e:	e8 fc ff ff ff       	call   1000058f <getFontHandle(FontStyle)+0x20>	1000058f: R_386_PC32	malloc
10000593:	83 c4 10             	add    esp,0x10
10000596:	89 c3                	mov    ebx,eax
10000598:	83 ec 0c             	sub    esp,0xc
1000059b:	53                   	push   ebx
1000059c:	e8 fc ff ff ff       	call   1000059d <getFontHandle(FontStyle)+0x2e>	1000059d: R_386_PC32	LinkedList2<Font*>::LinkedList2()
100005a1:	83 c4 10             	add    esp,0x10
100005a4:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100005a6: R_386_32	fontTable
100005aa:	83 ec 08             	sub    esp,0x8
100005ad:	81 ec 88 00 00 00    	sub    esp,0x88
100005b3:	89 e0                	mov    eax,esp
100005b5:	89 c2                	mov    edx,eax
100005b7:	8d 5d 08             	lea    ebx,[ebp+0x8]
100005ba:	b8 22 00 00 00       	mov    eax,0x22
100005bf:	89 d7                	mov    edi,edx
100005c1:	89 de                	mov    esi,ebx
100005c3:	89 c1                	mov    ecx,eax
100005c5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100005c7:	e8 fc ff ff ff       	call   100005c8 <getFontHandle(FontStyle)+0x59>	100005c8: R_386_PC32	lookupInFontTable(FontStyle)
100005cc:	81 c4 90 00 00 00    	add    esp,0x90
100005d2:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100005d5:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
100005d9:	74 08                	je     100005e3 <getFontHandle(FontStyle)+0x74>
100005db:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100005de:	e9 ea 00 00 00       	jmp    100006cd <getFontHandle(FontStyle)+0x15e>
100005e3:	c7 45 d4 94 06 00 00 	mov    DWORD PTR [ebp-0x2c],0x694
100005ea:	83 ec 0c             	sub    esp,0xc
100005ed:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100005f0:	e8 fc ff ff ff       	call   100005f1 <getFontHandle(FontStyle)+0x82>	100005f1: R_386_PC32	malloc
100005f5:	83 c4 10             	add    esp,0x10
100005f8:	89 c6                	mov    esi,eax
100005fa:	89 f3                	mov    ebx,esi
100005fc:	ba a5 01 00 00       	mov    edx,0x1a5
10000601:	b8 00 00 00 00       	mov    eax,0x0
10000606:	89 df                	mov    edi,ebx
10000608:	89 d1                	mov    ecx,edx
1000060a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000060c:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
1000060f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000612:	83 ec 08             	sub    esp,0x8
10000615:	8d 55 08             	lea    edx,[ebp+0x8]
10000618:	52                   	push   edx
10000619:	50                   	push   eax
1000061a:	e8 fc ff ff ff       	call   1000061b <getFontHandle(FontStyle)+0xac>	1000061b: R_386_PC32	strcpy
1000061f:	83 c4 10             	add    esp,0x10
10000622:	8b 95 88 00 00 00    	mov    edx,DWORD PTR [ebp+0x88]
10000628:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
1000062b:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
10000631:	8b 95 8c 00 00 00    	mov    edx,DWORD PTR [ebp+0x8c]
10000637:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
1000063a:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
10000640:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
10000643:	3c 2a                	cmp    al,0x2a
10000645:	0f 94 c2             	sete   dl
10000648:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
1000064b:	88 90 88 00 00 00    	mov    BYTE PTR [eax+0x88],dl
10000651:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000654:	c7 80 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x8c],0x0
1000065e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10000665:	83 7d e4 7f          	cmp    DWORD PTR [ebp-0x1c],0x7f
10000669:	7f 19                	jg     10000684 <getFontHandle(FontStyle)+0x115>
1000066b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
1000066e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10000671:	81 c2 24 01 00 00    	add    edx,0x124
10000677:	c7 44 90 04 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x4],0x0
1000067f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10000682:	eb e1                	jmp    10000665 <getFontHandle(FontStyle)+0xf6>
10000684:	a1 00 00 00 00       	mov    eax,ds:0x0	10000685: R_386_32	fontTable
10000689:	83 ec 0c             	sub    esp,0xc
1000068c:	50                   	push   eax
1000068d:	e8 fc ff ff ff       	call   1000068e <getFontHandle(FontStyle)+0x11f>	1000068e: R_386_PC32	LinkedList2<Font*>::length()
10000692:	83 c4 10             	add    esp,0x10
10000695:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000698:	a1 00 00 00 00       	mov    eax,ds:0x0	10000699: R_386_32	fontTable
1000069d:	83 ec 08             	sub    esp,0x8
100006a0:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100006a3:	50                   	push   eax
100006a4:	e8 fc ff ff ff       	call   100006a5 <getFontHandle(FontStyle)+0x136>	100006a5: R_386_PC32	LinkedList2<Font*>::appendNode(Font*)
100006a9:	83 c4 10             	add    esp,0x10
100006ac:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100006af:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
100006b5:	85 c0                	test   eax,eax
100006b7:	75 11                	jne    100006ca <getFontHandle(FontStyle)+0x15b>
100006b9:	83 ec 08             	sub    esp,0x8
100006bc:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100006bf:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100006c2:	e8 fc ff ff ff       	call   100006c3 <getFontHandle(FontStyle)+0x154>	100006c3: R_386_PC32	loadSSFNFont(Font*, int)
100006c7:	83 c4 10             	add    esp,0x10
100006ca:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100006cd:	8d 65 f4             	lea    esp,[ebp-0xc]
100006d0:	5b                   	pop    ebx
100006d1:	5e                   	pop    esi
100006d2:	5f                   	pop    edi
100006d3:	5d                   	pop    ebp
100006d4:	c3                   	ret    

100006d5 <getFontFromHandle(int)>:
100006d5:	55                   	push   ebp
100006d6:	89 e5                	mov    ebp,esp
100006d8:	83 ec 10             	sub    esp,0x10
100006db:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
100006e2:	a1 00 00 00 00       	mov    eax,ds:0x0	100006e3: R_386_32	fontTable
100006e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100006ea:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
100006ed:	83 7d f8 00          	cmp    DWORD PTR [ebp-0x8],0x0
100006f1:	74 23                	je     10000716 <getFontFromHandle(int)+0x41>
100006f3:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100006f6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100006f9:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100006fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100006ff:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000702:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000705:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
10000708:	75 07                	jne    10000711 <getFontFromHandle(int)+0x3c>
1000070a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000070d:	8b 00                	mov    eax,DWORD PTR [eax]
1000070f:	eb 0a                	jmp    1000071b <getFontFromHandle(int)+0x46>
10000711:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000714:	eb d7                	jmp    100006ed <getFontFromHandle(int)+0x18>
10000716:	b8 00 00 00 00       	mov    eax,0x0
1000071b:	c9                   	leave  
1000071c:	c3                   	ret    

1000071d <getFontRegion(int, int, bool*, int*, int*)>:
1000071d:	55                   	push   ebp
1000071e:	89 e5                	mov    ebp,esp
10000720:	57                   	push   edi
10000721:	56                   	push   esi
10000722:	53                   	push   ebx
10000723:	83 ec 6c             	sub    esp,0x6c
10000726:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000729:	e8 fc ff ff ff       	call   1000072a <getFontRegion(int, int, bool*, int*, int*)+0xd>	1000072a: R_386_PC32	getFontFromHandle(int)
1000072e:	83 c4 04             	add    esp,0x4
10000731:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000734:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000737:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000073a:	81 c2 24 01 00 00    	add    edx,0x124
10000740:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
10000744:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000747:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000074a:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000074d:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10000751:	74 3f                	je     10000792 <getFontRegion(int, int, bool*, int*, int*)+0x75>
10000753:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000756:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000759:	83 c2 24             	add    edx,0x24
1000075c:	8b 14 90             	mov    edx,DWORD PTR [eax+edx*4]
1000075f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10000762:	89 10                	mov    DWORD PTR [eax],edx
10000764:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000767:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000076a:	81 c2 a4 00 00 00    	add    edx,0xa4
10000770:	8b 14 90             	mov    edx,DWORD PTR [eax+edx*4]
10000773:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10000776:	89 10                	mov    DWORD PTR [eax],edx
10000778:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000077b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000077e:	89 c3                	mov    ebx,eax
10000780:	b8 07 00 00 00       	mov    eax,0x7
10000785:	89 d7                	mov    edi,edx
10000787:	89 de                	mov    esi,ebx
10000789:	89 c1                	mov    ecx,eax
1000078b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000078d:	e9 1f 01 00 00       	jmp    100008b1 <getFontRegion(int, int, bool*, int*, int*)+0x194>
10000792:	83 ec 0c             	sub    esp,0xc
10000795:	8d 45 88             	lea    eax,[ebp-0x78]
10000798:	50                   	push   eax
10000799:	e8 fc ff ff ff       	call   1000079a <getFontRegion(int, int, bool*, int*, int*)+0x7d>	1000079a: R_386_PC32	Region::Region()
1000079e:	83 c4 10             	add    esp,0x10
100007a1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100007a4:	8a 80 88 00 00 00    	mov    al,BYTE PTR [eax+0x88]
100007aa:	84 c0                	test   al,al
100007ac:	74 2e                	je     100007dc <getFontRegion(int, int, bool*, int*, int*)+0xbf>
100007ae:	8d 45 a4             	lea    eax,[ebp-0x5c]
100007b1:	83 ec 0c             	sub    esp,0xc
100007b4:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
100007b7:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100007ba:	ff 75 10             	push   DWORD PTR [ebp+0x10]
100007bd:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
100007c0:	50                   	push   eax
100007c1:	e8 fc ff ff ff       	call   100007c2 <getFontRegion(int, int, bool*, int*, int*)+0xa5>	100007c2: R_386_PC32	getLegacyFontRegion(Font*, int, int*, int*)
100007c6:	83 c4 1c             	add    esp,0x1c
100007c9:	8d 45 88             	lea    eax,[ebp-0x78]
100007cc:	8d 55 a4             	lea    edx,[ebp-0x5c]
100007cf:	b9 19 00 00 00       	mov    ecx,0x19
100007d4:	89 c7                	mov    edi,eax
100007d6:	89 d6                	mov    esi,edx
100007d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100007da:	eb 2c                	jmp    10000808 <getFontRegion(int, int, bool*, int*, int*)+0xeb>
100007dc:	8d 45 c0             	lea    eax,[ebp-0x40]
100007df:	83 ec 0c             	sub    esp,0xc
100007e2:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
100007e5:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100007e8:	ff 75 10             	push   DWORD PTR [ebp+0x10]
100007eb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
100007ee:	50                   	push   eax
100007ef:	e8 fc ff ff ff       	call   100007f0 <getFontRegion(int, int, bool*, int*, int*)+0xd3>	100007f0: R_386_PC32	getSSFNFontRegion(Font*, int, int*, int*)
100007f4:	83 c4 1c             	add    esp,0x1c
100007f7:	8d 45 88             	lea    eax,[ebp-0x78]
100007fa:	8d 55 c0             	lea    edx,[ebp-0x40]
100007fd:	b9 19 00 00 00       	mov    ecx,0x19
10000802:	89 c7                	mov    edi,eax
10000804:	89 d6                	mov    esi,edx
10000806:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000808:	83 7d 10 7f          	cmp    DWORD PTR [ebp+0x10],0x7f
1000080c:	0f 8f 84 00 00 00    	jg     10000896 <getFontRegion(int, int, bool*, int*, int*)+0x179>
10000812:	c7 45 dc 1c 00 00 00 	mov    DWORD PTR [ebp-0x24],0x1c
10000819:	83 ec 0c             	sub    esp,0xc
1000081c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000081f:	e8 fc ff ff ff       	call   10000820 <getFontRegion(int, int, bool*, int*, int*)+0x103>	10000820: R_386_PC32	malloc
10000824:	83 c4 10             	add    esp,0x10
10000827:	89 c3                	mov    ebx,eax
10000829:	83 ec 0c             	sub    esp,0xc
1000082c:	6a 00                	push   0x0
1000082e:	6a 00                	push   0x0
10000830:	6a 00                	push   0x0
10000832:	6a 00                	push   0x0
10000834:	53                   	push   ebx
10000835:	e8 fc ff ff ff       	call   10000836 <getFontRegion(int, int, bool*, int*, int*)+0x119>	10000836: R_386_PC32	Region::Region(int, int, int, int)
1000083a:	83 c4 20             	add    esp,0x20
1000083d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000840:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000843:	81 c2 24 01 00 00    	add    edx,0x124
10000849:	89 5c 90 04          	mov    DWORD PTR [eax+edx*4+0x4],ebx
1000084d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000850:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000853:	81 c2 24 01 00 00    	add    edx,0x124
10000859:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
1000085d:	89 c3                	mov    ebx,eax
1000085f:	8d 45 88             	lea    eax,[ebp-0x78]
10000862:	ba 19 00 00 00       	mov    edx,0x19
10000867:	89 df                	mov    edi,ebx
10000869:	89 c6                	mov    esi,eax
1000086b:	89 d1                	mov    ecx,edx
1000086d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000086f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10000872:	8b 10                	mov    edx,DWORD PTR [eax]
10000874:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000877:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
1000087a:	83 c1 24             	add    ecx,0x24
1000087d:	89 14 88             	mov    DWORD PTR [eax+ecx*4],edx
10000880:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10000883:	8b 10                	mov    edx,DWORD PTR [eax]
10000885:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000888:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
1000088b:	81 c1 a4 00 00 00    	add    ecx,0xa4
10000891:	89 14 88             	mov    DWORD PTR [eax+ecx*4],edx
10000894:	eb 06                	jmp    1000089c <getFontRegion(int, int, bool*, int*, int*)+0x17f>
10000896:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10000899:	c6 00 01             	mov    BYTE PTR [eax],0x1
1000089c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000089f:	89 c3                	mov    ebx,eax
100008a1:	8d 45 88             	lea    eax,[ebp-0x78]
100008a4:	ba 07 00 00 00       	mov    edx,0x7
100008a9:	89 df                	mov    edi,ebx
100008ab:	89 c6                	mov    esi,eax
100008ad:	89 d1                	mov    ecx,edx
100008af:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008b4:	8d 65 f4             	lea    esp,[ebp-0xc]
100008b7:	5b                   	pop    ebx
100008b8:	5e                   	pop    esi
100008b9:	5f                   	pop    edi
100008ba:	5d                   	pop    ebp
100008bb:	c2 04 00             	ret    0x4

100008be <initFonts()>:
100008be:	55                   	push   ebp
100008bf:	89 e5                	mov    ebp,esp
100008c1:	83 ec 08             	sub    esp,0x8
100008c4:	e8 fc ff ff ff       	call   100008c5 <initFonts()+0x7>	100008c5: R_386_PC32	loadLegacyFonts()
100008c9:	90                   	nop
100008ca:	c9                   	leave  
100008cb:	c3                   	ret    

100008cc <loadFont(FontStyle)>:
100008cc:	55                   	push   ebp
100008cd:	89 e5                	mov    ebp,esp
100008cf:	57                   	push   edi
100008d0:	56                   	push   esi
100008d1:	53                   	push   ebx
100008d2:	83 ec 0c             	sub    esp,0xc
100008d5:	83 ec 08             	sub    esp,0x8
100008d8:	81 ec 88 00 00 00    	sub    esp,0x88
100008de:	89 e0                	mov    eax,esp
100008e0:	89 c2                	mov    edx,eax
100008e2:	8d 5d 08             	lea    ebx,[ebp+0x8]
100008e5:	b8 22 00 00 00       	mov    eax,0x22
100008ea:	89 d7                	mov    edi,edx
100008ec:	89 de                	mov    esi,ebx
100008ee:	89 c1                	mov    ecx,eax
100008f0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008f2:	e8 fc ff ff ff       	call   100008f3 <loadFont(FontStyle)+0x27>	100008f3: R_386_PC32	getFontHandle(FontStyle)
100008f7:	81 c4 90 00 00 00    	add    esp,0x90
100008fd:	8d 65 f4             	lea    esp,[ebp-0xc]
10000900:	5b                   	pop    ebx
10000901:	5e                   	pop    esi
10000902:	5f                   	pop    edi
10000903:	5d                   	pop    ebp
10000904:	c3                   	ret    

10000905 <reverse(unsigned char)>:
10000905:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
10000909:	c0 c0 04             	rol    al,0x4
1000090c:	0f b6 c0             	movzx  eax,al
1000090f:	89 c2                	mov    edx,eax
10000911:	c1 e0 02             	shl    eax,0x2
10000914:	c1 fa 02             	sar    edx,0x2
10000917:	83 e0 cc             	and    eax,0xffffffcc
1000091a:	83 e2 33             	and    edx,0x33
1000091d:	09 c2                	or     edx,eax
1000091f:	0f b6 d2             	movzx  edx,dl
10000922:	89 d0                	mov    eax,edx
10000924:	01 d2                	add    edx,edx
10000926:	d1 f8                	sar    eax,1
10000928:	83 e2 aa             	and    edx,0xffffffaa
1000092b:	83 e0 55             	and    eax,0x55
1000092e:	09 d0                	or     eax,edx
10000930:	c3                   	ret    

10000931 <loadLegacyFonts()>:
10000931:	57                   	push   edi
10000932:	b9 10 10 00 00       	mov    ecx,0x1010
10000937:	56                   	push   esi
10000938:	bf 00 00 00 00       	mov    edi,0x0	10000939: R_386_32	FONT
1000093d:	53                   	push   ebx
1000093e:	be 00 00 00 00       	mov    esi,0x0	1000093f: R_386_32	systemFontBuiltin
10000943:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000945:	b9 00 02 00 00       	mov    ecx,0x200
1000094a:	0f be 81 10 00 00 00 	movsx  eax,BYTE PTR [ecx+0x10]	1000094d: R_386_32	FONT
10000951:	8a 91 1f 00 00 00    	mov    dl,BYTE PTR [ecx+0x1f]	10000953: R_386_32	FONT
10000957:	6b f0 1c             	imul   esi,eax,0x1c
1000095a:	88 90 00 00 00 00    	mov    BYTE PTR [eax+0x0],dl	1000095c: R_386_32	FontWidths
10000960:	31 db                	xor    ebx,ebx
10000962:	0f b6 84 19 11 00 00 00 	movzx  eax,BYTE PTR [ecx+ebx*1+0x11]	10000966: R_386_32	FONT
1000096a:	50                   	push   eax
1000096b:	e8 fc ff ff ff       	call   1000096c <loadLegacyFonts()+0x3b>	1000096c: R_386_PC32	reverse(unsigned char)
10000970:	5a                   	pop    edx
10000971:	0f b6 c0             	movzx  eax,al
10000974:	66 89 84 5e 00 00 00 00 	mov    WORD PTR [esi+ebx*2+0x0],ax	10000978: R_386_32	Fonts
1000097c:	43                   	inc    ebx
1000097d:	83 fb 0e             	cmp    ebx,0xe
10000980:	75 e0                	jne    10000962 <loadLegacyFonts()+0x31>
10000982:	83 c1 10             	add    ecx,0x10
10000985:	81 f9 00 08 00 00    	cmp    ecx,0x800
1000098b:	75 bd                	jne    1000094a <loadLegacyFonts()+0x19>
1000098d:	5b                   	pop    ebx
1000098e:	5e                   	pop    esi
1000098f:	5f                   	pop    edi
10000990:	c3                   	ret    

10000991 <getLegacyFontRegion(Font*, int, int*, int*)>:
10000991:	55                   	push   ebp
10000992:	b9 38 00 00 00       	mov    ecx,0x38
10000997:	57                   	push   edi
10000998:	56                   	push   esi
10000999:	53                   	push   ebx
1000099a:	81 ec fc 00 00 00    	sub    esp,0xfc
100009a0:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
100009a7:	8d 74 24 10          	lea    esi,[esp+0x10]
100009ab:	8b 9a 84 00 00 00    	mov    ebx,DWORD PTR [edx+0x84]
100009b1:	89 f7                	mov    edi,esi
100009b3:	89 d8                	mov    eax,ebx
100009b5:	8b b2 8c 00 00 00    	mov    esi,DWORD PTR [edx+0x8c]
100009bb:	83 e0 02             	and    eax,0x2
100009be:	69 d6 e4 1b 00 00    	imul   edx,esi,0x1be4
100009c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100009c8:	83 e3 01             	and    ebx,0x1
100009cb:	31 c0                	xor    eax,eax
100009cd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100009cf:	6b 84 24 18 01 00 00 1c 	imul   eax,DWORD PTR [esp+0x118],0x1c
100009d7:	01 d0                	add    eax,edx
100009d9:	31 d2                	xor    edx,edx
100009db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100009df:	31 c0                	xor    eax,eax
100009e1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
100009e6:	74 0a                	je     100009f2 <getLegacyFontRegion(Font*, int, int*, int*)+0x61>
100009e8:	b8 0e 00 00 00       	mov    eax,0xe
100009ed:	29 d0                	sub    eax,edx
100009ef:	c1 f8 02             	sar    eax,0x2
100009f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100009f6:	89 d5                	mov    ebp,edx
100009f8:	0f b6 bc 57 00 00 00 00 	movzx  edi,BYTE PTR [edi+edx*2+0x0]	100009fc: R_386_32	Fonts
10000a00:	c1 e5 04             	shl    ebp,0x4
10000a03:	8d 0c 28             	lea    ecx,[eax+ebp*1]
10000a06:	8d 6c 28 08          	lea    ebp,[eax+ebp*1+0x8]
10000a0a:	89 f8                	mov    eax,edi
10000a0c:	83 e7 01             	and    edi,0x1
10000a0f:	0f b6 c0             	movzx  eax,al
10000a12:	74 0e                	je     10000a22 <getLegacyFontRegion(Font*, int, int*, int*)+0x91>
10000a14:	c6 44 0c 10 01       	mov    BYTE PTR [esp+ecx*1+0x10],0x1
10000a19:	85 db                	test   ebx,ebx
10000a1b:	74 05                	je     10000a22 <getLegacyFontRegion(Font*, int, int*, int*)+0x91>
10000a1d:	c6 44 0c 11 01       	mov    BYTE PTR [esp+ecx*1+0x11],0x1
10000a22:	d1 f8                	sar    eax,1
10000a24:	41                   	inc    ecx
10000a25:	89 c7                	mov    edi,eax
10000a27:	39 cd                	cmp    ebp,ecx
10000a29:	75 df                	jne    10000a0a <getLegacyFontRegion(Font*, int, int*, int*)+0x79>
10000a2b:	42                   	inc    edx
10000a2c:	83 fa 0e             	cmp    edx,0xe
10000a2f:	75 ae                	jne    100009df <getLegacyFontRegion(Font*, int, int*, int*)+0x4e>
10000a31:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
10000a38:	69 f6 ff 00 00 00    	imul   esi,esi,0xff
10000a3e:	0f b6 84 30 00 00 00 00 	movzx  eax,BYTE PTR [eax+esi*1+0x0]	10000a42: R_386_32	FontWidths
10000a46:	01 c3                	add    ebx,eax
10000a48:	8b 84 24 1c 01 00 00 	mov    eax,DWORD PTR [esp+0x11c]
10000a4f:	89 18                	mov    DWORD PTR [eax],ebx
10000a51:	8b 84 24 20 01 00 00 	mov    eax,DWORD PTR [esp+0x120]
10000a58:	c7 00 0e 00 00 00    	mov    DWORD PTR [eax],0xe
10000a5e:	50                   	push   eax
10000a5f:	50                   	push   eax
10000a60:	6a 0e                	push   0xe
10000a62:	6a 10                	push   0x10
10000a64:	8d 44 24 20          	lea    eax,[esp+0x20]
10000a68:	50                   	push   eax
10000a69:	6a 00                	push   0x0
10000a6b:	6a 00                	push   0x0
10000a6d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
10000a74:	e8 fc ff ff ff       	call   10000a75 <getLegacyFontRegion(Font*, int, int*, int*)+0xe4>	10000a75: R_386_PC32	createTightFontRegion(int, int, unsigned char*, int, int)
10000a79:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
10000a80:	81 c4 18 01 00 00    	add    esp,0x118
10000a86:	5b                   	pop    ebx
10000a87:	5e                   	pop    esi
10000a88:	5f                   	pop    edi
10000a89:	5d                   	pop    ebp
10000a8a:	c2 04 00             	ret    0x4

10000a8d <loadCursorFile(char const*)>:
10000a8d:	57                   	push   edi
10000a8e:	56                   	push   esi
10000a8f:	53                   	push   ebx
10000a90:	83 ec 2c             	sub    esp,0x2c
10000a93:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10000a97:	68 14 01 00 00       	push   0x114
10000a9c:	e8 fc ff ff ff       	call   10000a9d <loadCursorFile(char const*)+0x10>	10000a9d: R_386_PC32	malloc
10000aa1:	83 c4 0c             	add    esp,0xc
10000aa4:	89 c6                	mov    esi,eax
10000aa6:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000aa8: R_386_32	kernelProcess
10000aac:	53                   	push   ebx
10000aad:	50                   	push   eax
10000aae:	e8 fc ff ff ff       	call   10000aaf <loadCursorFile(char const*)+0x22>	10000aaf: R_386_PC32	File::File(char const*, Process*)
10000ab3:	5a                   	pop    edx
10000ab4:	59                   	pop    ecx
10000ab5:	6a 01                	push   0x1
10000ab7:	56                   	push   esi
10000ab8:	e8 fc ff ff ff       	call   10000ab9 <loadCursorFile(char const*)+0x2c>	10000ab9: R_386_PC32	File::open(FileOpenMode)
10000abd:	83 c4 10             	add    esp,0x10
10000ac0:	85 c0                	test   eax,eax
10000ac2:	74 0a                	je     10000ace <loadCursorFile(char const*)+0x41>
10000ac4:	83 ec 0c             	sub    esp,0xc
10000ac7:	68 3c 85 00 10       	push   0x1000853c	10000ac8: R_386_32	.text
10000acc:	eb 5b                	jmp    10000b29 <loadCursorFile(char const*)+0x9c>
10000ace:	50                   	push   eax
10000acf:	8d 44 24 17          	lea    eax,[esp+0x17]
10000ad3:	50                   	push   eax
10000ad4:	8d 44 24 20          	lea    eax,[esp+0x20]
10000ad8:	50                   	push   eax
10000ad9:	56                   	push   esi
10000ada:	e8 fc ff ff ff       	call   10000adb <loadCursorFile(char const*)+0x4e>	10000adb: R_386_PC32	File::stat(unsigned long long*, bool*)
10000adf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
10000ae3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10000ae7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
10000aeb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10000aef:	58                   	pop    eax
10000af0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10000af4:	e8 fc ff ff ff       	call   10000af5 <loadCursorFile(char const*)+0x68>	10000af5: R_386_PC32	malloc
10000af9:	89 c3                	mov    ebx,eax
10000afb:	58                   	pop    eax
10000afc:	8b 06                	mov    eax,DWORD PTR [esi]
10000afe:	8d 4c 24 20          	lea    ecx,[esp+0x20]
10000b02:	51                   	push   ecx
10000b03:	53                   	push   ebx
10000b04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000b08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000b0c:	56                   	push   esi
10000b0d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10000b10:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10000b14:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10000b18:	83 c4 20             	add    esp,0x20
10000b1b:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
10000b1f:	74 17                	je     10000b38 <loadCursorFile(char const*)+0xab>
10000b21:	83 ec 0c             	sub    esp,0xc
10000b24:	68 50 85 00 10       	push   0x10008550	10000b25: R_386_32	.text
10000b29:	e8 fc ff ff ff       	call   10000b2a <loadCursorFile(char const*)+0x9d>	10000b2a: R_386_PC32	Dbg::kprintf(char const*, ...)
10000b2e:	83 c4 10             	add    esp,0x10
10000b31:	83 c4 20             	add    esp,0x20
10000b34:	5b                   	pop    ebx
10000b35:	5e                   	pop    esi
10000b36:	5f                   	pop    edi
10000b37:	c3                   	ret    
10000b38:	6a 00                	push   0x0
10000b3a:	68 04 01 00 00       	push   0x104
10000b3f:	52                   	push   edx
10000b40:	50                   	push   eax
10000b41:	e8 fc ff ff ff       	call   10000b42 <loadCursorFile(char const*)+0xb5>	10000b42: R_386_PC32	__udivdi3
10000b46:	83 c4 10             	add    esp,0x10
10000b49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000b4d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10000b54:	8d 04 83             	lea    eax,[ebx+eax*4]
10000b57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000b5b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10000b5f:	39 14 24             	cmp    DWORD PTR [esp],edx
10000b62:	0f 8d f8 00 00 00    	jge    10000c60 <loadCursorFile(char const*)+0x1d3>
10000b68:	8b 04 24             	mov    eax,DWORD PTR [esp]
10000b6b:	8d 34 83             	lea    esi,[ebx+eax*4]
10000b6e:	50                   	push   eax
10000b6f:	6a 04                	push   0x4
10000b71:	68 64 85 00 10       	push   0x10008564	10000b72: R_386_32	.text
10000b76:	56                   	push   esi
10000b77:	e8 fc ff ff ff       	call   10000b78 <loadCursorFile(char const*)+0xeb>	10000b78: R_386_PC32	memcmp
10000b7c:	83 c4 10             	add    esp,0x10
10000b7f:	85 c0                	test   eax,eax
10000b81:	0f 84 b8 00 00 00    	je     10000c3f <loadCursorFile(char const*)+0x1b2>
10000b87:	50                   	push   eax
10000b88:	6a 04                	push   0x4
10000b8a:	68 69 85 00 10       	push   0x10008569	10000b8b: R_386_32	.text
10000b8f:	56                   	push   esi
10000b90:	e8 fc ff ff ff       	call   10000b91 <loadCursorFile(char const*)+0x104>	10000b91: R_386_PC32	memcmp
10000b95:	83 c4 10             	add    esp,0x10
10000b98:	85 c0                	test   eax,eax
10000b9a:	74 7b                	je     10000c17 <loadCursorFile(char const*)+0x18a>
10000b9c:	50                   	push   eax
10000b9d:	6a 04                	push   0x4
10000b9f:	68 6e 85 00 10       	push   0x1000856e	10000ba0: R_386_32	.text
10000ba4:	56                   	push   esi
10000ba5:	e8 fc ff ff ff       	call   10000ba6 <loadCursorFile(char const*)+0x119>	10000ba6: R_386_PC32	memcmp
10000baa:	83 c4 10             	add    esp,0x10
10000bad:	85 c0                	test   eax,eax
10000baf:	74 6d                	je     10000c1e <loadCursorFile(char const*)+0x191>
10000bb1:	57                   	push   edi
10000bb2:	6a 04                	push   0x4
10000bb4:	68 73 85 00 10       	push   0x10008573	10000bb5: R_386_32	.text
10000bb9:	56                   	push   esi
10000bba:	e8 fc ff ff ff       	call   10000bbb <loadCursorFile(char const*)+0x12e>	10000bbb: R_386_PC32	memcmp
10000bbf:	83 c4 10             	add    esp,0x10
10000bc2:	85 c0                	test   eax,eax
10000bc4:	74 5f                	je     10000c25 <loadCursorFile(char const*)+0x198>
10000bc6:	51                   	push   ecx
10000bc7:	6a 04                	push   0x4
10000bc9:	68 78 85 00 10       	push   0x10008578	10000bca: R_386_32	.text
10000bce:	56                   	push   esi
10000bcf:	e8 fc ff ff ff       	call   10000bd0 <loadCursorFile(char const*)+0x143>	10000bd0: R_386_PC32	memcmp
10000bd4:	83 c4 10             	add    esp,0x10
10000bd7:	85 c0                	test   eax,eax
10000bd9:	74 51                	je     10000c2c <loadCursorFile(char const*)+0x19f>
10000bdb:	52                   	push   edx
10000bdc:	6a 04                	push   0x4
10000bde:	68 7d 85 00 10       	push   0x1000857d	10000bdf: R_386_32	.text
10000be3:	56                   	push   esi
10000be4:	e8 fc ff ff ff       	call   10000be5 <loadCursorFile(char const*)+0x158>	10000be5: R_386_PC32	memcmp
10000be9:	83 c4 10             	add    esp,0x10
10000bec:	85 c0                	test   eax,eax
10000bee:	74 43                	je     10000c33 <loadCursorFile(char const*)+0x1a6>
10000bf0:	50                   	push   eax
10000bf1:	6a 04                	push   0x4
10000bf3:	68 82 85 00 10       	push   0x10008582	10000bf4: R_386_32	.text
10000bf8:	56                   	push   esi
10000bf9:	e8 fc ff ff ff       	call   10000bfa <loadCursorFile(char const*)+0x16d>	10000bfa: R_386_PC32	memcmp
10000bfe:	83 c4 10             	add    esp,0x10
10000c01:	85 c0                	test   eax,eax
10000c03:	74 35                	je     10000c3a <loadCursorFile(char const*)+0x1ad>
10000c05:	83 ec 0c             	sub    esp,0xc
10000c08:	68 87 85 00 10       	push   0x10008587	10000c09: R_386_32	.text
10000c0d:	e8 fc ff ff ff       	call   10000c0e <loadCursorFile(char const*)+0x181>	10000c0e: R_386_PC32	Dbg::kprintf(char const*, ...)
10000c12:	83 c4 10             	add    esp,0x10
10000c15:	eb 49                	jmp    10000c60 <loadCursorFile(char const*)+0x1d3>
10000c17:	b8 00 02 00 00       	mov    eax,0x200
10000c1c:	eb 21                	jmp    10000c3f <loadCursorFile(char const*)+0x1b2>
10000c1e:	b8 00 03 00 00       	mov    eax,0x300
10000c23:	eb 1a                	jmp    10000c3f <loadCursorFile(char const*)+0x1b2>
10000c25:	b8 00 01 00 00       	mov    eax,0x100
10000c2a:	eb 13                	jmp    10000c3f <loadCursorFile(char const*)+0x1b2>
10000c2c:	b8 00 04 00 00       	mov    eax,0x400
10000c31:	eb 0c                	jmp    10000c3f <loadCursorFile(char const*)+0x1b2>
10000c33:	b8 00 05 00 00       	mov    eax,0x500
10000c38:	eb 05                	jmp    10000c3f <loadCursorFile(char const*)+0x1b2>
10000c3a:	b8 00 06 00 00       	mov    eax,0x600
10000c3f:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10000c41: R_386_32	___mouse_data
10000c45:	b9 00 01 00 00       	mov    ecx,0x100
10000c4a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10000c4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000c50:	ff 04 24             	inc    DWORD PTR [esp]
10000c53:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10000c5b:	e9 fb fe ff ff       	jmp    10000b5b <loadCursorFile(char const*)+0xce>
10000c60:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
10000c64:	83 c4 20             	add    esp,0x20
10000c67:	5b                   	pop    ebx
10000c68:	5e                   	pop    esi
10000c69:	5f                   	pop    edi
10000c6a:	e9 fc ff ff ff       	jmp    10000c6b <loadCursorFile(char const*)+0x1de>	10000c6b: R_386_PC32	free

10000c6f <mouseInit(Video*)>:
10000c6f:	57                   	push   edi
10000c70:	bf 00 00 00 00       	mov    edi,0x0	10000c71: R_386_32	tightMouseRegionOld
10000c75:	56                   	push   esi
10000c76:	53                   	push   ebx
10000c77:	83 ec 2c             	sub    esp,0x2c
10000c7a:	68 9b 85 00 10       	push   0x1000859b	10000c7b: R_386_32	.text
10000c7f:	8d 5c 24 14          	lea    ebx,[esp+0x14]
10000c83:	e8 fc ff ff ff       	call   10000c84 <mouseInit(Video*)+0x15>	10000c84: R_386_PC32	loadCursorFile(char const*)
10000c88:	89 de                	mov    esi,ebx
10000c8a:	68 00 00 00 00       	push   0x0	10000c8b: R_386_32	___mouse_data
10000c8f:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000c91: R_386_32	cursorOffset
10000c99:	6a 00                	push   0x0
10000c9b:	6a 00                	push   0x0
10000c9d:	53                   	push   ebx
10000c9e:	e8 fc ff ff ff       	call   10000c9f <mouseInit(Video*)+0x30>	10000c9f: R_386_PC32	createTightCursorRegion(int, int, unsigned int*)
10000ca3:	a1 00 00 00 00       	mov    eax,ds:0x0	10000ca4: R_386_32	cursorOffset
10000ca8:	83 c4 1c             	add    esp,0x1c
10000cab:	05 00 00 00 00       	add    eax,0x0	10000cac: R_386_32	___mouse_data
10000cb0:	b9 19 00 00 00       	mov    ecx,0x19
10000cb5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000cb7:	50                   	push   eax
10000cb8:	89 de                	mov    esi,ebx
10000cba:	6a 00                	push   0x0
10000cbc:	bf 00 00 00 00       	mov    edi,0x0	10000cbd: R_386_32	tightMouseRegionNew
10000cc1:	6a 00                	push   0x0
10000cc3:	53                   	push   ebx
10000cc4:	e8 fc ff ff ff       	call   10000cc5 <mouseInit(Video*)+0x56>	10000cc5: R_386_PC32	createTightCursorRegion(int, int, unsigned int*)
10000cc9:	b9 19 00 00 00       	mov    ecx,0x19
10000cce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000cd0:	83 c4 2c             	add    esp,0x2c
10000cd3:	5b                   	pop    ebx
10000cd4:	5e                   	pop    esi
10000cd5:	5f                   	pop    edi
10000cd6:	c3                   	ret    

10000cd7 <hideCursor(Video*, int, int, int, int)>:
10000cd7:	57                   	push   edi
10000cd8:	b8 00 00 00 00       	mov    eax,0x0	10000cd9: R_386_32	tightMouseRegionOld
10000cdd:	56                   	push   esi
10000cde:	be 00 00 00 00       	mov    esi,0x0	10000cdf: R_386_32	tightMouseRegionNew
10000ce3:	53                   	push   ebx
10000ce4:	83 ec 30             	sub    esp,0x30
10000ce7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
10000ceb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10000cef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10000cf3:	8d 5c 24 14          	lea    ebx,[esp+0x14]
10000cf7:	89 0d 10 00 00 00    	mov    DWORD PTR ds:0x10,ecx	10000cf9: R_386_32	tightMouseRegionOld
10000cfd:	83 ec 20             	sub    esp,0x20
10000d00:	8b 4c 24 68          	mov    ecx,DWORD PTR [esp+0x68]
10000d04:	89 0d 14 00 00 00    	mov    DWORD PTR ds:0x14,ecx	10000d06: R_386_32	tightMouseRegionOld
10000d0a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10000d0e:	89 0d 10 00 00 00    	mov    DWORD PTR ds:0x10,ecx	10000d10: R_386_32	tightMouseRegionNew
10000d14:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
10000d18:	89 e7                	mov    edi,esp
10000d1a:	89 0d 14 00 00 00    	mov    DWORD PTR ds:0x14,ecx	10000d1c: R_386_32	tightMouseRegionNew
10000d20:	83 ec 1c             	sub    esp,0x1c
10000d23:	b9 07 00 00 00       	mov    ecx,0x7
10000d28:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d2a:	89 c6                	mov    esi,eax
10000d2c:	89 e7                	mov    edi,esp
10000d2e:	b9 07 00 00 00       	mov    ecx,0x7
10000d33:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d35:	53                   	push   ebx
10000d36:	89 de                	mov    esi,ebx
10000d38:	e8 fc ff ff ff       	call   10000d39 <hideCursor(Video*, int, int, int, int)+0x62>	10000d39: R_386_PC32	getRegionDifference(Region, Region)
10000d3d:	b9 07 00 00 00       	mov    ecx,0x7
10000d42:	83 c4 14             	add    esp,0x14
10000d45:	89 e7                	mov    edi,esp
10000d47:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d49:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10000d4d:	52                   	push   edx
10000d4e:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000d50: R_386_32	desktopWindow
10000d54:	e8 fc ff ff ff       	call   10000d55 <hideCursor(Video*, int, int, int, int)+0x7e>	10000d55: R_386_PC32	NFrame::repaintCursorRegion(Video*, Region)
10000d59:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10000d5d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10000d61:	83 c4 60             	add    esp,0x60
10000d64:	5b                   	pop    ebx
10000d65:	5e                   	pop    esi
10000d66:	5f                   	pop    edi
10000d67:	e9 fc ff ff ff       	jmp    10000d68 <hideCursor(Video*, int, int, int, int)+0x91>	10000d68: R_386_PC32	free

10000d6c <showCursor(Video*)>:
10000d6c:	83 ec 0c             	sub    esp,0xc
10000d6f:	a1 00 00 00 00       	mov    eax,ds:0x0	10000d70: R_386_32	cursorOffset
10000d74:	05 00 00 00 00       	add    eax,0x0	10000d75: R_386_32	___mouse_data
10000d79:	50                   	push   eax
10000d7a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000d7c: R_386_32	mouseY
10000d80:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000d82: R_386_32	mouseX
10000d86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000d8a:	e8 fc ff ff ff       	call   10000d8b <showCursor(Video*)+0x1f>	10000d8b: R_386_PC32	videoDrawCursor(Video*, int, int, unsigned int*)
10000d8f:	83 c4 1c             	add    esp,0x1c
10000d92:	c3                   	ret    

10000d93 <changeCursor(Video*, int)>:
10000d93:	57                   	push   edi
10000d94:	bf 00 00 00 00       	mov    edi,0x0	10000d95: R_386_32	tightMouseRegionNew
10000d99:	56                   	push   esi
10000d9a:	53                   	push   ebx
10000d9b:	83 ec 4c             	sub    esp,0x4c
10000d9e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10000da2:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000da4: R_386_32	tightMouseRegionNew
10000da8:	a3 00 00 00 00       	mov    ds:0x0,eax	10000da9: R_386_32	cursorOffset
10000dad:	8d 5c 24 34          	lea    ebx,[esp+0x34]
10000db1:	a1 00 00 00 00       	mov    eax,ds:0x0	10000db2: R_386_32	mouseX
10000db6:	89 de                	mov    esi,ebx
10000db8:	a3 10 00 00 00       	mov    ds:0x10,eax	10000db9: R_386_32	tightMouseRegionOld
10000dbd:	a1 00 00 00 00       	mov    eax,ds:0x0	10000dbe: R_386_32	mouseY
10000dc2:	a3 14 00 00 00       	mov    ds:0x14,eax	10000dc3: R_386_32	tightMouseRegionOld
10000dc7:	e8 fc ff ff ff       	call   10000dc8 <changeCursor(Video*, int)+0x35>	10000dc8: R_386_PC32	free
10000dcc:	a1 00 00 00 00       	mov    eax,ds:0x0	10000dcd: R_386_32	cursorOffset
10000dd1:	05 00 00 00 00       	add    eax,0x0	10000dd2: R_386_32	___mouse_data
10000dd6:	50                   	push   eax
10000dd7:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000dd9: R_386_32	mouseY
10000ddd:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000ddf: R_386_32	mouseX
10000de3:	53                   	push   ebx
10000de4:	e8 fc ff ff ff       	call   10000de5 <changeCursor(Video*, int)+0x52>	10000de5: R_386_PC32	createTightCursorRegion(int, int, unsigned int*)
10000de9:	b9 19 00 00 00       	mov    ecx,0x19
10000dee:	8d 44 24 24          	lea    eax,[esp+0x24]
10000df2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000df4:	83 ec 14             	sub    esp,0x14
10000df7:	b9 07 00 00 00       	mov    ecx,0x7
10000dfc:	89 e7                	mov    edi,esp
10000dfe:	be 00 00 00 00       	mov    esi,0x0	10000dff: R_386_32	tightMouseRegionNew
10000e03:	83 ec 1c             	sub    esp,0x1c
10000e06:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000e08:	89 e7                	mov    edi,esp
10000e0a:	b9 07 00 00 00       	mov    ecx,0x7
10000e0f:	be 00 00 00 00       	mov    esi,0x0	10000e10: R_386_32	tightMouseRegionOld
10000e14:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000e16:	50                   	push   eax
10000e17:	e8 fc ff ff ff       	call   10000e18 <changeCursor(Video*, int)+0x85>	10000e18: R_386_PC32	getRegionDifference(Region, Region)
10000e1c:	b9 07 00 00 00       	mov    ecx,0x7
10000e21:	83 c4 24             	add    esp,0x24
10000e24:	8d 44 24 30          	lea    eax,[esp+0x30]
10000e28:	89 e7                	mov    edi,esp
10000e2a:	89 c6                	mov    esi,eax
10000e2c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000e2e:	89 de                	mov    esi,ebx
10000e30:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
10000e34:	bf 00 00 00 00       	mov    edi,0x0	10000e35: R_386_32	tightMouseRegionOld
10000e39:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000e3b: R_386_32	desktopWindow
10000e3f:	e8 fc ff ff ff       	call   10000e40 <changeCursor(Video*, int)+0xad>	10000e40: R_386_PC32	NFrame::repaintCursorRegion(Video*, Region)
10000e44:	83 c4 24             	add    esp,0x24
10000e47:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000e49: R_386_32	tightMouseRegionOld
10000e4d:	e8 fc ff ff ff       	call   10000e4e <changeCursor(Video*, int)+0xbb>	10000e4e: R_386_PC32	free
10000e52:	a1 00 00 00 00       	mov    eax,ds:0x0	10000e53: R_386_32	cursorOffset
10000e57:	05 00 00 00 00       	add    eax,0x0	10000e58: R_386_32	___mouse_data
10000e5c:	50                   	push   eax
10000e5d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000e5f: R_386_32	mouseY
10000e63:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000e65: R_386_32	mouseX
10000e69:	53                   	push   ebx
10000e6a:	e8 fc ff ff ff       	call   10000e6b <changeCursor(Video*, int)+0xd8>	10000e6b: R_386_PC32	createTightCursorRegion(int, int, unsigned int*)
10000e6f:	b9 19 00 00 00       	mov    ecx,0x19
10000e74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000e76:	83 c4 5c             	add    esp,0x5c
10000e79:	5b                   	pop    ebx
10000e7a:	5e                   	pop    esi
10000e7b:	5f                   	pop    edi
10000e7c:	c3                   	ret    

10000e7d <handleMouse(Video*, int, int, int, int, int)>:
10000e7d:	57                   	push   edi
10000e7e:	56                   	push   esi
10000e7f:	53                   	push   ebx
10000e80:	83 ec 20             	sub    esp,0x20
10000e83:	a1 00 00 00 00       	mov    eax,ds:0x0	10000e84: R_386_32	mouseX
10000e88:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
10000e8c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10000e90:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10000e92: R_386_32	mouseButtons
10000e96:	a1 00 00 00 00       	mov    eax,ds:0x0	10000e97: R_386_32	mouseY
10000e9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10000e9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000ea3:	03 54 24 34          	add    edx,DWORD PTR [esp+0x34]
10000ea7:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10000eab:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10000ead: R_386_32	mouseX
10000eb1:	a3 00 00 00 00       	mov    ds:0x0,eax	10000eb2: R_386_32	mouseY
10000eb6:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000eb8: R_386_32	mouseButtons
10000ebc:	85 d2                	test   edx,edx
10000ebe:	79 0a                	jns    10000eca <handleMouse(Video*, int, int, int, int, int)+0x4d>
10000ec0:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000ec2: R_386_32	mouseX
10000eca:	85 c0                	test   eax,eax
10000ecc:	79 0a                	jns    10000ed8 <handleMouse(Video*, int, int, int, int, int)+0x5b>
10000ece:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000ed0: R_386_32	mouseY
10000ed8:	83 ec 0c             	sub    esp,0xc
10000edb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10000edf:	e8 fc ff ff ff       	call   10000ee0 <handleMouse(Video*, int, int, int, int, int)+0x63>	10000ee0: R_386_PC32	Video::getWidth()
10000ee4:	83 c4 10             	add    esp,0x10
10000ee7:	3b 05 00 00 00 00    	cmp    eax,DWORD PTR ds:0x0	10000ee9: R_386_32	mouseX
10000eed:	7f 15                	jg     10000f04 <handleMouse(Video*, int, int, int, int, int)+0x87>
10000eef:	83 ec 0c             	sub    esp,0xc
10000ef2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10000ef6:	e8 fc ff ff ff       	call   10000ef7 <handleMouse(Video*, int, int, int, int, int)+0x7a>	10000ef7: R_386_PC32	Video::getWidth()
10000efb:	83 c4 10             	add    esp,0x10
10000efe:	48                   	dec    eax
10000eff:	a3 00 00 00 00       	mov    ds:0x0,eax	10000f00: R_386_32	mouseX
10000f04:	83 ec 0c             	sub    esp,0xc
10000f07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10000f0b:	e8 fc ff ff ff       	call   10000f0c <handleMouse(Video*, int, int, int, int, int)+0x8f>	10000f0c: R_386_PC32	Video::getHeight()
10000f10:	83 c4 10             	add    esp,0x10
10000f13:	3b 05 00 00 00 00    	cmp    eax,DWORD PTR ds:0x0	10000f15: R_386_32	mouseY
10000f19:	7f 15                	jg     10000f30 <handleMouse(Video*, int, int, int, int, int)+0xb3>
10000f1b:	83 ec 0c             	sub    esp,0xc
10000f1e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10000f22:	e8 fc ff ff ff       	call   10000f23 <handleMouse(Video*, int, int, int, int, int)+0xa6>	10000f23: R_386_PC32	Video::getHeight()
10000f27:	83 c4 10             	add    esp,0x10
10000f2a:	48                   	dec    eax
10000f2b:	a3 00 00 00 00       	mov    ds:0x0,eax	10000f2c: R_386_32	mouseY
10000f30:	83 ec 0c             	sub    esp,0xc
10000f33:	83 e3 01             	and    ebx,0x1
10000f36:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000f38: R_386_32	mouseY
10000f3c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000f3e: R_386_32	mouseX
10000f42:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10000f46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10000f4a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000f4e:	e8 fc ff ff ff       	call   10000f4f <handleMouse(Video*, int, int, int, int, int)+0xd2>	10000f4f: R_386_PC32	hideCursor(Video*, int, int, int, int)
10000f53:	83 c4 14             	add    esp,0x14
10000f56:	6a 01                	push   0x1
10000f58:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000f5a: R_386_32	mouseY
10000f5e:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000f60: R_386_32	mouseX
10000f64:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10000f68:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000f6a: R_386_32	desktopWindow
10000f6e:	e8 fc ff ff ff       	call   10000f6f <handleMouse(Video*, int, int, int, int, int)+0xf2>	10000f6f: R_386_PC32	NFrame::getPixelOwner(Video*, int, int, bool)
10000f73:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
10000f77:	89 c7                	mov    edi,eax
10000f79:	83 c4 20             	add    esp,0x20
10000f7c:	83 e6 01             	and    esi,0x1
10000f7f:	0f 84 23 05 00 00    	je     100014a8 <handleMouse(Video*, int, int, int, int, int)+0x62b>
10000f85:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10000f8a:	0f 85 4d 02 00 00    	jne    100011dd <handleMouse(Video*, int, int, int, int, int)+0x360>
10000f90:	be 0a 00 00 00       	mov    esi,0xa
10000f95:	a1 00 00 00 00       	mov    eax,ds:0x0	10000f96: R_386_32	milliTenthsSinceBoot
10000f9a:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	10000f9c: R_386_32	milliTenthsSinceBoot
10000fa0:	89 c1                	mov    ecx,eax
10000fa2:	89 d3                	mov    ebx,edx
10000fa4:	2b 0d 88 e5 00 10    	sub    ecx,DWORD PTR ds:0x1000e588	10000fa6: R_386_32	.bss
10000faa:	a3 88 e5 00 10       	mov    ds:0x1000e588,eax	10000fab: R_386_32	.bss
10000faf:	1b 1d 8c e5 00 10    	sbb    ebx,DWORD PTR ds:0x1000e58c	10000fb1: R_386_32	.bss
10000fb5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
10000fb9:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10000fbd:	b9 a0 86 01 00       	mov    ecx,0x186a0
10000fc2:	83 ec 0c             	sub    esp,0xc
10000fc5:	89 15 8c e5 00 10    	mov    DWORD PTR ds:0x1000e58c,edx	10000fc7: R_386_32	.bss
10000fcb:	a1 00 00 00 00       	mov    eax,ds:0x0	10000fcc: R_386_32	Phys::usablePages
10000fd0:	c1 e0 02             	shl    eax,0x2
10000fd3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000fd7:	6a 00                	push   0x0
10000fd9:	a1 00 00 00 00       	mov    eax,ds:0x0	10000fda: R_386_32	Phys::usedPages
10000fde:	68 ff ff ff 00       	push   0xffffff
10000fe3:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10000fea:	89 d8                	mov    eax,ebx
10000fec:	99                   	cdq    
10000fed:	f7 f9                	idiv   ecx
10000fef:	99                   	cdq    
10000ff0:	f7 fe                	idiv   esi
10000ff2:	8d 42 30             	lea    eax,[edx+0x30]
10000ff5:	50                   	push   eax
10000ff6:	6a 00                	push   0x0
10000ff8:	6a 00                	push   0x0
10000ffa:	e8 fc ff ff ff       	call   10000ffb <handleMouse(Video*, int, int, int, int, int)+0x17e>	10000ffb: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000fff:	83 c4 14             	add    esp,0x14
10001002:	b9 10 27 00 00       	mov    ecx,0x2710
10001007:	6a 00                	push   0x0
10001009:	89 d8                	mov    eax,ebx
1000100b:	68 ff ff ff 00       	push   0xffffff
10001010:	99                   	cdq    
10001011:	f7 f9                	idiv   ecx
10001013:	99                   	cdq    
10001014:	f7 fe                	idiv   esi
10001016:	8d 42 30             	lea    eax,[edx+0x30]
10001019:	50                   	push   eax
1000101a:	6a 00                	push   0x0
1000101c:	6a 01                	push   0x1
1000101e:	e8 fc ff ff ff       	call   1000101f <handleMouse(Video*, int, int, int, int, int)+0x1a2>	1000101f: R_386_PC32	drawVGAChar(int, int, int, int, int)
10001023:	83 c4 14             	add    esp,0x14
10001026:	89 d8                	mov    eax,ebx
10001028:	6a 00                	push   0x0
1000102a:	b9 e8 03 00 00       	mov    ecx,0x3e8
1000102f:	68 ff ff ff 00       	push   0xffffff
10001034:	99                   	cdq    
10001035:	f7 f9                	idiv   ecx
10001037:	99                   	cdq    
10001038:	f7 fe                	idiv   esi
1000103a:	8d 42 30             	lea    eax,[edx+0x30]
1000103d:	50                   	push   eax
1000103e:	6a 00                	push   0x0
10001040:	6a 02                	push   0x2
10001042:	e8 fc ff ff ff       	call   10001043 <handleMouse(Video*, int, int, int, int, int)+0x1c6>	10001043: R_386_PC32	drawVGAChar(int, int, int, int, int)
10001047:	83 c4 14             	add    esp,0x14
1000104a:	b9 64 00 00 00       	mov    ecx,0x64
1000104f:	6a 00                	push   0x0
10001051:	89 d8                	mov    eax,ebx
10001053:	68 ff ff ff 00       	push   0xffffff
10001058:	99                   	cdq    
10001059:	f7 f9                	idiv   ecx
1000105b:	99                   	cdq    
1000105c:	f7 fe                	idiv   esi
1000105e:	8d 42 30             	lea    eax,[edx+0x30]
10001061:	50                   	push   eax
10001062:	6a 00                	push   0x0
10001064:	6a 03                	push   0x3
10001066:	e8 fc ff ff ff       	call   10001067 <handleMouse(Video*, int, int, int, int, int)+0x1ea>	10001067: R_386_PC32	drawVGAChar(int, int, int, int, int)
1000106b:	83 c4 14             	add    esp,0x14
1000106e:	89 d8                	mov    eax,ebx
10001070:	6a 00                	push   0x0
10001072:	99                   	cdq    
10001073:	68 ff ff ff 00       	push   0xffffff
10001078:	f7 fe                	idiv   esi
1000107a:	89 d3                	mov    ebx,edx
1000107c:	99                   	cdq    
1000107d:	f7 fe                	idiv   esi
1000107f:	8d 42 30             	lea    eax,[edx+0x30]
10001082:	50                   	push   eax
10001083:	6a 00                	push   0x0
10001085:	6a 04                	push   0x4
10001087:	e8 fc ff ff ff       	call   10001088 <handleMouse(Video*, int, int, int, int, int)+0x20b>	10001088: R_386_PC32	drawVGAChar(int, int, int, int, int)
1000108c:	83 c4 14             	add    esp,0x14
1000108f:	83 c3 30             	add    ebx,0x30
10001092:	6a 00                	push   0x0
10001094:	68 ff ff ff 00       	push   0xffffff
10001099:	53                   	push   ebx
1000109a:	6a 00                	push   0x0
1000109c:	6a 05                	push   0x5
1000109e:	e8 fc ff ff ff       	call   1000109f <handleMouse(Video*, int, int, int, int, int)+0x222>	1000109f: R_386_PC32	drawVGAChar(int, int, int, int, int)
100010a3:	83 c4 14             	add    esp,0x14
100010a6:	6a 00                	push   0x0
100010a8:	68 ff ff ff 00       	push   0xffffff
100010ad:	6a 2f                	push   0x2f
100010af:	6a 00                	push   0x0
100010b1:	6a 06                	push   0x6
100010b3:	e8 fc ff ff ff       	call   100010b4 <handleMouse(Video*, int, int, int, int, int)+0x237>	100010b4: R_386_PC32	drawVGAChar(int, int, int, int, int)
100010b8:	83 c4 14             	add    esp,0x14
100010bb:	b9 a0 86 01 00       	mov    ecx,0x186a0
100010c0:	6a 00                	push   0x0
100010c2:	68 ff ff ff 00       	push   0xffffff
100010c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100010cb:	99                   	cdq    
100010cc:	f7 f9                	idiv   ecx
100010ce:	99                   	cdq    
100010cf:	f7 fe                	idiv   esi
100010d1:	8d 42 30             	lea    eax,[edx+0x30]
100010d4:	50                   	push   eax
100010d5:	6a 00                	push   0x0
100010d7:	6a 07                	push   0x7
100010d9:	e8 fc ff ff ff       	call   100010da <handleMouse(Video*, int, int, int, int, int)+0x25d>	100010da: R_386_PC32	drawVGAChar(int, int, int, int, int)
100010de:	83 c4 14             	add    esp,0x14
100010e1:	b9 10 27 00 00       	mov    ecx,0x2710
100010e6:	6a 00                	push   0x0
100010e8:	68 ff ff ff 00       	push   0xffffff
100010ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100010f1:	99                   	cdq    
100010f2:	f7 f9                	idiv   ecx
100010f4:	99                   	cdq    
100010f5:	f7 fe                	idiv   esi
100010f7:	8d 42 30             	lea    eax,[edx+0x30]
100010fa:	50                   	push   eax
100010fb:	6a 00                	push   0x0
100010fd:	6a 08                	push   0x8
100010ff:	e8 fc ff ff ff       	call   10001100 <handleMouse(Video*, int, int, int, int, int)+0x283>	10001100: R_386_PC32	drawVGAChar(int, int, int, int, int)
10001104:	83 c4 14             	add    esp,0x14
10001107:	b9 e8 03 00 00       	mov    ecx,0x3e8
1000110c:	6a 00                	push   0x0
1000110e:	68 ff ff ff 00       	push   0xffffff
10001113:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10001117:	99                   	cdq    
10001118:	f7 f9                	idiv   ecx
1000111a:	99                   	cdq    
1000111b:	f7 fe                	idiv   esi
1000111d:	8d 42 30             	lea    eax,[edx+0x30]
10001120:	50                   	push   eax
10001121:	6a 00                	push   0x0
10001123:	6a 09                	push   0x9
10001125:	e8 fc ff ff ff       	call   10001126 <handleMouse(Video*, int, int, int, int, int)+0x2a9>	10001126: R_386_PC32	drawVGAChar(int, int, int, int, int)
1000112a:	83 c4 14             	add    esp,0x14
1000112d:	b9 64 00 00 00       	mov    ecx,0x64
10001132:	6a 00                	push   0x0
10001134:	68 ff ff ff 00       	push   0xffffff
10001139:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000113d:	99                   	cdq    
1000113e:	f7 f9                	idiv   ecx
10001140:	99                   	cdq    
10001141:	f7 fe                	idiv   esi
10001143:	83 c2 30             	add    edx,0x30
10001146:	52                   	push   edx
10001147:	6a 00                	push   0x0
10001149:	6a 0a                	push   0xa
1000114b:	e8 fc ff ff ff       	call   1000114c <handleMouse(Video*, int, int, int, int, int)+0x2cf>	1000114c: R_386_PC32	drawVGAChar(int, int, int, int, int)
10001150:	83 c4 14             	add    esp,0x14
10001153:	6a 00                	push   0x0
10001155:	68 ff ff ff 00       	push   0xffffff
1000115a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000115e:	99                   	cdq    
1000115f:	f7 fe                	idiv   esi
10001161:	89 d3                	mov    ebx,edx
10001163:	99                   	cdq    
10001164:	83 c3 30             	add    ebx,0x30
10001167:	f7 fe                	idiv   esi
10001169:	8d 42 30             	lea    eax,[edx+0x30]
1000116c:	50                   	push   eax
1000116d:	6a 00                	push   0x0
1000116f:	6a 0b                	push   0xb
10001171:	e8 fc ff ff ff       	call   10001172 <handleMouse(Video*, int, int, int, int, int)+0x2f5>	10001172: R_386_PC32	drawVGAChar(int, int, int, int, int)
10001176:	83 c4 14             	add    esp,0x14
10001179:	6a 00                	push   0x0
1000117b:	68 ff ff ff 00       	push   0xffffff
10001180:	53                   	push   ebx
10001181:	6a 00                	push   0x0
10001183:	6a 0c                	push   0xc
10001185:	e8 fc ff ff ff       	call   10001186 <handleMouse(Video*, int, int, int, int, int)+0x309>	10001186: R_386_PC32	drawVGAChar(int, int, int, int, int)
1000118a:	83 c4 14             	add    esp,0x14
1000118d:	6a 00                	push   0x0
1000118f:	68 ff ff ff 00       	push   0xffffff
10001194:	6a 20                	push   0x20
10001196:	6a 00                	push   0x0
10001198:	6a 0d                	push   0xd
1000119a:	e8 fc ff ff ff       	call   1000119b <handleMouse(Video*, int, int, int, int, int)+0x31e>	1000119b: R_386_PC32	drawVGAChar(int, int, int, int, int)
1000119f:	83 c4 14             	add    esp,0x14
100011a2:	6a 00                	push   0x0
100011a4:	68 ff ff ff 00       	push   0xffffff
100011a9:	6a 4b                	push   0x4b
100011ab:	6a 00                	push   0x0
100011ad:	6a 0e                	push   0xe
100011af:	e8 fc ff ff ff       	call   100011b0 <handleMouse(Video*, int, int, int, int, int)+0x333>	100011b0: R_386_PC32	drawVGAChar(int, int, int, int, int)
100011b4:	83 c4 14             	add    esp,0x14
100011b7:	6a 00                	push   0x0
100011b9:	68 ff ff ff 00       	push   0xffffff
100011be:	6a 42                	push   0x42
100011c0:	6a 00                	push   0x0
100011c2:	6a 0f                	push   0xf
100011c4:	e8 fc ff ff ff       	call   100011c5 <handleMouse(Video*, int, int, int, int, int)+0x348>	100011c5: R_386_PC32	drawVGAChar(int, int, int, int, int)
100011c9:	83 c4 20             	add    esp,0x20
100011cc:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100011ce: R_386_32	draggingWindow
100011d3:	75 08                	jne    100011dd <handleMouse(Video*, int, int, int, int, int)+0x360>
100011d5:	39 3d 00 00 00 00    	cmp    DWORD PTR ds:0x0,edi	100011d7: R_386_32	desktopWindow
100011db:	75 07                	jne    100011e4 <handleMouse(Video*, int, int, int, int, int)+0x367>
100011dd:	31 db                	xor    ebx,ebx
100011df:	e9 5e 01 00 00       	jmp    10001342 <handleMouse(Video*, int, int, int, int, int)+0x4c5>
100011e4:	83 ec 0c             	sub    esp,0xc
100011e7:	57                   	push   edi
100011e8:	e8 fc ff ff ff       	call   100011e9 <handleMouse(Video*, int, int, int, int, int)+0x36c>	100011e9: R_386_PC32	NFrame::raise()
100011ed:	89 3c 24             	mov    DWORD PTR [esp],edi
100011f0:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100011f2: R_386_32	mouseX
100011f6:	e8 fc ff ff ff       	call   100011f7 <handleMouse(Video*, int, int, int, int, int)+0x37a>	100011f7: R_386_PC32	NFrame::getAbsX()
100011fb:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	100011fd: R_386_32	mouseY
10001201:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001205:	89 3c 24             	mov    DWORD PTR [esp],edi
10001208:	e8 fc ff ff ff       	call   10001209 <handleMouse(Video*, int, int, int, int, int)+0x38c>	10001209: R_386_PC32	NFrame::getAbsY()
1000120d:	83 c4 10             	add    esp,0x10
10001210:	29 c6                	sub    esi,eax
10001212:	78 34                	js     10001248 <handleMouse(Video*, int, int, int, int, int)+0x3cb>
10001214:	83 ec 0c             	sub    esp,0xc
10001217:	57                   	push   edi
10001218:	e8 fc ff ff ff       	call   10001219 <handleMouse(Video*, int, int, int, int, int)+0x39c>	10001219: R_386_PC32	NFrame::getTitlebarHeight()
1000121d:	83 c4 10             	add    esp,0x10
10001220:	39 f0                	cmp    eax,esi
10001222:	7e 24                	jle    10001248 <handleMouse(Video*, int, int, int, int, int)+0x3cb>
10001224:	b8 b7 0b 00 00       	mov    eax,0xbb7
10001229:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
1000122d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001231:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
10001235:	72 5e                	jb     10001295 <handleMouse(Video*, int, int, int, int, int)+0x418>
10001237:	51                   	push   ecx
10001238:	51                   	push   ecx
10001239:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
1000123d:	57                   	push   edi
1000123e:	e8 fc ff ff ff       	call   1000123f <handleMouse(Video*, int, int, int, int, int)+0x3c2>	1000123f: R_386_PC32	NFrame::toggleFullscreen(Video*)
10001243:	e9 df 00 00 00       	jmp    10001327 <handleMouse(Video*, int, int, int, int, int)+0x4aa>
10001248:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
1000124c:	83 ec 0c             	sub    esp,0xc
1000124f:	57                   	push   edi
10001250:	e8 fc ff ff ff       	call   10001251 <handleMouse(Video*, int, int, int, int, int)+0x3d4>	10001251: R_386_PC32	NFrame::getHeight()
10001255:	83 c4 10             	add    esp,0x10
10001258:	83 e8 14             	sub    eax,0x14
1000125b:	39 f0                	cmp    eax,esi
1000125d:	7e 5b                	jle    100012ba <handleMouse(Video*, int, int, int, int, int)+0x43d>
1000125f:	83 ec 0c             	sub    esp,0xc
10001262:	57                   	push   edi
10001263:	e8 fc ff ff ff       	call   10001264 <handleMouse(Video*, int, int, int, int, int)+0x3e7>	10001264: R_386_PC32	NFrame::getHeight()
10001268:	83 c4 10             	add    esp,0x10
1000126b:	83 e8 0c             	sub    eax,0xc
1000126e:	39 f0                	cmp    eax,esi
10001270:	7f 7b                	jg     100012ed <handleMouse(Video*, int, int, int, int, int)+0x470>
10001272:	89 3d 00 00 00 00    	mov    DWORD PTR ds:0x0,edi	10001274: R_386_32	draggingWindow
10001278:	50                   	push   eax
10001279:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000127b: R_386_32	startedDragging
10001280:	50                   	push   eax
10001281:	c7 05 00 00 00 00 03 00 00 00 	mov    DWORD PTR ds:0x0,0x3	10001283: R_386_32	dragMode
1000128b:	68 00 04 00 00       	push   0x400
10001290:	e9 89 00 00 00       	jmp    1000131e <handleMouse(Video*, int, int, int, int, int)+0x4a1>
10001295:	83 ec 0c             	sub    esp,0xc
10001298:	57                   	push   edi
10001299:	e8 fc ff ff ff       	call   1000129a <handleMouse(Video*, int, int, int, int, int)+0x41d>	1000129a: R_386_PC32	NFrame::isFullscreen()
1000129e:	83 c4 10             	add    esp,0x10
100012a1:	88 c3                	mov    bl,al
100012a3:	84 c0                	test   al,al
100012a5:	0f 85 97 00 00 00    	jne    10001342 <handleMouse(Video*, int, int, int, int, int)+0x4c5>
100012ab:	89 3d 00 00 00 00    	mov    DWORD PTR ds:0x0,edi	100012ad: R_386_32	draggingWindow
100012b1:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100012b3: R_386_32	startedDragging
100012b8:	eb 7c                	jmp    10001336 <handleMouse(Video*, int, int, int, int, int)+0x4b9>
100012ba:	83 ec 0c             	sub    esp,0xc
100012bd:	57                   	push   edi
100012be:	e8 fc ff ff ff       	call   100012bf <handleMouse(Video*, int, int, int, int, int)+0x442>	100012bf: R_386_PC32	NFrame::getWidth()
100012c3:	83 c4 10             	add    esp,0x10
100012c6:	83 e8 14             	sub    eax,0x14
100012c9:	39 d8                	cmp    eax,ebx
100012cb:	7f 92                	jg     1000125f <handleMouse(Video*, int, int, int, int, int)+0x3e2>
100012cd:	89 3d 00 00 00 00    	mov    DWORD PTR ds:0x0,edi	100012cf: R_386_32	draggingWindow
100012d3:	52                   	push   edx
100012d4:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100012d6: R_386_32	startedDragging
100012db:	52                   	push   edx
100012dc:	c7 05 00 00 00 00 02 00 00 00 	mov    DWORD PTR ds:0x0,0x2	100012de: R_386_32	dragMode
100012e6:	68 00 03 00 00       	push   0x300
100012eb:	eb 31                	jmp    1000131e <handleMouse(Video*, int, int, int, int, int)+0x4a1>
100012ed:	83 ec 0c             	sub    esp,0xc
100012f0:	57                   	push   edi
100012f1:	e8 fc ff ff ff       	call   100012f2 <handleMouse(Video*, int, int, int, int, int)+0x475>	100012f2: R_386_PC32	NFrame::getWidth()
100012f6:	83 c4 10             	add    esp,0x10
100012f9:	83 e8 0c             	sub    eax,0xc
100012fc:	39 d8                	cmp    eax,ebx
100012fe:	7f 2c                	jg     1000132c <handleMouse(Video*, int, int, int, int, int)+0x4af>
10001300:	89 3d 00 00 00 00    	mov    DWORD PTR ds:0x0,edi	10001302: R_386_32	draggingWindow
10001306:	50                   	push   eax
10001307:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001309: R_386_32	startedDragging
1000130e:	50                   	push   eax
1000130f:	c7 05 00 00 00 00 04 00 00 00 	mov    DWORD PTR ds:0x0,0x4	10001311: R_386_32	dragMode
10001319:	68 00 05 00 00       	push   0x500
1000131e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10001322:	e8 fc ff ff ff       	call   10001323 <handleMouse(Video*, int, int, int, int, int)+0x4a6>	10001323: R_386_PC32	changeCursor(Video*, int)
10001327:	83 c4 10             	add    esp,0x10
1000132a:	eb 14                	jmp    10001340 <handleMouse(Video*, int, int, int, int, int)+0x4c3>
1000132c:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000132e: R_386_32	draggingWindow
10001336:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10001338: R_386_32	dragMode
10001340:	b3 01                	mov    bl,0x1
10001342:	a1 00 00 00 00       	mov    eax,ds:0x0	10001343: R_386_32	draggingWindow
10001347:	85 c0                	test   eax,eax
10001349:	0f 84 09 01 00 00    	je     10001458 <handleMouse(Video*, int, int, int, int, int)+0x5db>
1000134f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10001353:	0b 7c 24 38          	or     edi,DWORD PTR [esp+0x38]
10001357:	0f 84 fb 00 00 00    	je     10001458 <handleMouse(Video*, int, int, int, int, int)+0x5db>
1000135d:	83 ec 0c             	sub    esp,0xc
10001360:	50                   	push   eax
10001361:	e8 fc ff ff ff       	call   10001362 <handleMouse(Video*, int, int, int, int, int)+0x4e5>	10001362: R_386_PC32	NFrame::getX()
10001366:	89 c7                	mov    edi,eax
10001368:	58                   	pop    eax
10001369:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000136b: R_386_32	draggingWindow
1000136f:	e8 fc ff ff ff       	call   10001370 <handleMouse(Video*, int, int, int, int, int)+0x4f3>	10001370: R_386_PC32	NFrame::getY()
10001374:	89 c6                	mov    esi,eax
10001376:	58                   	pop    eax
10001377:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001379: R_386_32	draggingWindow
1000137d:	e8 fc ff ff ff       	call   1000137e <handleMouse(Video*, int, int, int, int, int)+0x501>	1000137e: R_386_PC32	NFrame::getWidth()
10001382:	89 c3                	mov    ebx,eax
10001384:	58                   	pop    eax
10001385:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001387: R_386_32	draggingWindow
1000138b:	e8 fc ff ff ff       	call   1000138c <handleMouse(Video*, int, int, int, int, int)+0x50f>	1000138c: R_386_PC32	NFrame::getHeight()
10001390:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10001392: R_386_32	mouseX
10001396:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
1000139a:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	1000139c: R_386_32	mouseY
100013a0:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
100013a4:	83 c4 10             	add    esp,0x10
100013a7:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	100013a9: R_386_32	startedDragging
100013ae:	75 20                	jne    100013d0 <handleMouse(Video*, int, int, int, int, int)+0x553>
100013b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100013b4:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100013b6: R_386_32	startedDragging
100013bb:	83 ec 0c             	sub    esp,0xc
100013be:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100013c0: R_386_32	draggingWindow
100013c4:	e8 fc ff ff ff       	call   100013c5 <handleMouse(Video*, int, int, int, int, int)+0x548>	100013c5: R_386_PC32	NFrame::startDragState()
100013c9:	83 c4 10             	add    esp,0x10
100013cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100013d0:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100013d2: R_386_32	dragMode
100013d6:	83 f9 01             	cmp    ecx,0x1
100013d9:	75 25                	jne    10001400 <handleMouse(Video*, int, int, int, int, int)+0x583>
100013db:	50                   	push   eax
100013dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100013e0:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
100013e4:	01 c6                	add    esi,eax
100013e6:	56                   	push   esi
100013e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100013eb:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
100013ef:	8d 1c 38             	lea    ebx,[eax+edi*1]
100013f2:	53                   	push   ebx
100013f3:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100013f5: R_386_32	draggingWindow
100013f9:	e8 fc ff ff ff       	call   100013fa <handleMouse(Video*, int, int, int, int, int)+0x57d>	100013fa: R_386_PC32	NFrame::setPosition(int, int)
100013fe:	eb 32                	jmp    10001432 <handleMouse(Video*, int, int, int, int, int)+0x5b5>
10001400:	83 f9 02             	cmp    ecx,0x2
10001403:	75 13                	jne    10001418 <handleMouse(Video*, int, int, int, int, int)+0x59b>
10001405:	a1 00 00 00 00       	mov    eax,ds:0x0	10001406: R_386_32	mouseY
1000140a:	53                   	push   ebx
1000140b:	29 f0                	sub    eax,esi
1000140d:	50                   	push   eax
1000140e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000140f: R_386_32	mouseX
10001413:	29 f8                	sub    eax,edi
10001415:	50                   	push   eax
10001416:	eb 0f                	jmp    10001427 <handleMouse(Video*, int, int, int, int, int)+0x5aa>
10001418:	83 f9 03             	cmp    ecx,0x3
1000141b:	75 1c                	jne    10001439 <handleMouse(Video*, int, int, int, int, int)+0x5bc>
1000141d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000141e: R_386_32	mouseY
10001422:	51                   	push   ecx
10001423:	29 f0                	sub    eax,esi
10001425:	50                   	push   eax
10001426:	53                   	push   ebx
10001427:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001429: R_386_32	draggingWindow
1000142d:	e8 fc ff ff ff       	call   1000142e <handleMouse(Video*, int, int, int, int, int)+0x5b1>	1000142e: R_386_PC32	NFrame::setSize(int, int)
10001432:	83 c4 10             	add    esp,0x10
10001435:	b3 01                	mov    bl,0x1
10001437:	eb 1f                	jmp    10001458 <handleMouse(Video*, int, int, int, int, int)+0x5db>
10001439:	b3 01                	mov    bl,0x1
1000143b:	83 f9 04             	cmp    ecx,0x4
1000143e:	75 18                	jne    10001458 <handleMouse(Video*, int, int, int, int, int)+0x5db>
10001440:	52                   	push   edx
10001441:	50                   	push   eax
10001442:	a1 00 00 00 00       	mov    eax,ds:0x0	10001443: R_386_32	mouseX
10001447:	29 f8                	sub    eax,edi
10001449:	50                   	push   eax
1000144a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000144c: R_386_32	draggingWindow
10001450:	e8 fc ff ff ff       	call   10001451 <handleMouse(Video*, int, int, int, int, int)+0x5d4>	10001451: R_386_PC32	NFrame::setSize(int, int)
10001455:	83 c4 10             	add    esp,0x10
10001458:	83 ec 0c             	sub    esp,0xc
1000145b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
1000145f:	e8 fc ff ff ff       	call   10001460 <handleMouse(Video*, int, int, int, int, int)+0x5e3>	10001460: R_386_PC32	showCursor(Video*)
10001464:	83 c4 10             	add    esp,0x10
10001467:	84 db                	test   bl,bl
10001469:	0f 84 9e 00 00 00    	je     1000150d <handleMouse(Video*, int, int, int, int, int)+0x690>
1000146f:	83 ec 28             	sub    esp,0x28
10001472:	a1 00 00 00 00       	mov    eax,ds:0x0	10001473: R_386_32	mouseX
10001477:	89 e7                	mov    edi,esp
10001479:	a3 10 00 00 00       	mov    ds:0x10,eax	1000147a: R_386_32	tightMouseRegionNew
1000147e:	be 00 00 00 00       	mov    esi,0x0	1000147f: R_386_32	tightMouseRegionNew
10001483:	a1 00 00 00 00       	mov    eax,ds:0x0	10001484: R_386_32	mouseY
10001488:	b9 07 00 00 00       	mov    ecx,0x7
1000148d:	a3 14 00 00 00       	mov    ds:0x14,eax	1000148e: R_386_32	tightMouseRegionNew
10001492:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001494:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10001498:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000149a: R_386_32	desktopWindow
1000149e:	e8 fc ff ff ff       	call   1000149f <handleMouse(Video*, int, int, int, int, int)+0x622>	1000149f: R_386_PC32	NFrame::repaint(Video*, Region)
100014a3:	83 c4 30             	add    esp,0x30
100014a6:	eb 65                	jmp    1000150d <handleMouse(Video*, int, int, int, int, int)+0x690>
100014a8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
100014ad:	0f 84 2a fd ff ff    	je     100011dd <handleMouse(Video*, int, int, int, int, int)+0x360>
100014b3:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100014b5: R_386_32	draggingWindow
100014ba:	74 10                	je     100014cc <handleMouse(Video*, int, int, int, int, int)+0x64f>
100014bc:	53                   	push   ebx
100014bd:	53                   	push   ebx
100014be:	6a 00                	push   0x0
100014c0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100014c4:	e8 fc ff ff ff       	call   100014c5 <handleMouse(Video*, int, int, int, int, int)+0x648>	100014c5: R_386_PC32	changeCursor(Video*, int)
100014c9:	83 c4 10             	add    esp,0x10
100014cc:	a1 00 00 00 00       	mov    eax,ds:0x0	100014cd: R_386_32	draggingWindow
100014d1:	31 db                	xor    ebx,ebx
100014d3:	85 c0                	test   eax,eax
100014d5:	74 16                	je     100014ed <handleMouse(Video*, int, int, int, int, int)+0x670>
100014d7:	8a 1d 00 00 00 00    	mov    bl,BYTE PTR ds:0x0	100014d9: R_386_32	startedDragging
100014dd:	84 db                	test   bl,bl
100014df:	74 0c                	je     100014ed <handleMouse(Video*, int, int, int, int, int)+0x670>
100014e1:	83 ec 0c             	sub    esp,0xc
100014e4:	50                   	push   eax
100014e5:	e8 fc ff ff ff       	call   100014e6 <handleMouse(Video*, int, int, int, int, int)+0x669>	100014e6: R_386_PC32	NFrame::endDragState()
100014ea:	83 c4 10             	add    esp,0x10
100014ed:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100014ef: R_386_32	startedDragging
100014f4:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	100014f6: R_386_32	dragMode
100014fe:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10001500: R_386_32	draggingWindow
10001508:	e9 35 fe ff ff       	jmp    10001342 <handleMouse(Video*, int, int, int, int, int)+0x4c5>
1000150d:	83 c4 20             	add    esp,0x20
10001510:	88 d8                	mov    al,bl
10001512:	5b                   	pop    ebx
10001513:	5e                   	pop    esi
10001514:	5f                   	pop    edi
10001515:	c3                   	ret    

10001516 <__static_initialization_and_destruction_0(int, int)>:
10001516:	83 ec 0c             	sub    esp,0xc
10001519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000151d:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
10001525:	75 20                	jne    10001547 <__static_initialization_and_destruction_0(int, int)+0x31>
10001527:	48                   	dec    eax
10001528:	75 1d                	jne    10001547 <__static_initialization_and_destruction_0(int, int)+0x31>
1000152a:	83 ec 0c             	sub    esp,0xc
1000152d:	68 00 00 00 00       	push   0x0	1000152e: R_386_32	tightMouseRegionOld
10001532:	e8 fc ff ff ff       	call   10001533 <__static_initialization_and_destruction_0(int, int)+0x1d>	10001533: R_386_PC32	Region::Region()
10001537:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0	1000153b: R_386_32	tightMouseRegionNew
1000153f:	83 c4 1c             	add    esp,0x1c
10001542:	e9 fc ff ff ff       	jmp    10001543 <__static_initialization_and_destruction_0(int, int)+0x2d>	10001543: R_386_PC32	Region::Region()
10001547:	83 c4 0c             	add    esp,0xc
1000154a:	c3                   	ret    

1000154b <drawCharacter(Video*, Region, int, int, unsigned int, char)>:
1000154b:	55                   	push   ebp
1000154c:	57                   	push   edi
1000154d:	31 ff                	xor    edi,edi
1000154f:	56                   	push   esi
10001550:	31 f6                	xor    esi,esi
10001552:	53                   	push   ebx
10001553:	83 ec 3c             	sub    esp,0x3c
10001556:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
1000155a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000155e:	0f be 44 24 7c       	movsx  eax,BYTE PTR [esp+0x7c]
10001563:	89 c5                	mov    ebp,eax
10001565:	39 74 24 5c          	cmp    DWORD PTR [esp+0x5c],esi
10001569:	0f 8e 15 01 00 00    	jle    10001684 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x139>
1000156f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
10001573:	83 c0 0c             	add    eax,0xc
10001576:	39 f0                	cmp    eax,esi
10001578:	0f 8e 06 01 00 00    	jle    10001684 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x139>
1000157e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
10001582:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
10001589:	8b 14 b9             	mov    edx,DWORD PTR [ecx+edi*4]
1000158c:	0f b7 ca             	movzx  ecx,dx
1000158f:	c1 ea 10             	shr    edx,0x10
10001592:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10001596:	8d 7c 0f 01          	lea    edi,[edi+ecx*1+0x1]
1000159a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
1000159e:	8d 0c 16             	lea    ecx,[esi+edx*1]
100015a1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
100015a5:	3b 4c 24 74          	cmp    ecx,DWORD PTR [esp+0x74]
100015a9:	7d 06                	jge    100015b1 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x66>
100015ab:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
100015af:	eb b4                	jmp    10001565 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x1a>
100015b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
100015b5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
100015ba:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
100015be:	31 db                	xor    ebx,ebx
100015c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100015c4:	39 5c 24 58          	cmp    DWORD PTR [esp+0x58],ebx
100015c8:	7e e1                	jle    100015ab <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x60>
100015ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100015ce:	39 18                	cmp    DWORD PTR [eax],ebx
100015d0:	75 0e                	jne    100015e0 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x95>
100015d2:	83 44 24 10 04       	add    DWORD PTR [esp+0x10],0x4
100015d7:	80 74 24 1f 01       	xor    BYTE PTR [esp+0x1f],0x1
100015dc:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
100015e0:	89 d9                	mov    ecx,ebx
100015e2:	2b 4c 24 70          	sub    ecx,DWORD PTR [esp+0x70]
100015e6:	83 f9 07             	cmp    ecx,0x7
100015e9:	77 6d                	ja     10001658 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x10d>
100015eb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
100015f0:	74 66                	je     10001658 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x10d>
100015f2:	89 f0                	mov    eax,esi
100015f4:	2b 44 24 74          	sub    eax,DWORD PTR [esp+0x74]
100015f8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100015fc:	31 c0                	xor    eax,eax
100015fe:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
10001602:	7d 54                	jge    10001658 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x10d>
10001604:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
10001609:	77 46                	ja     10001651 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x106>
1000160b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000160f:	c1 e2 07             	shl    edx,0x7
10001612:	0f b6 94 2a 00 00 00 00 	movzx  edx,BYTE PTR [edx+ebp*1+0x0]	10001616: R_386_32	font_array
1000161a:	d3 e2                	shl    edx,cl
1000161c:	80 e2 80             	and    dl,0x80
1000161f:	74 30                	je     10001651 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x106>
10001621:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
10001625:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
10001629:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
1000162d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001631:	01 f2                	add    edx,esi
10001633:	01 c2                	add    edx,eax
10001635:	52                   	push   edx
10001636:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
1000163a:	01 da                	add    edx,ebx
1000163c:	52                   	push   edx
1000163d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
10001641:	e8 fc ff ff ff       	call   10001642 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0xf7>	10001642: R_386_PC32	videoPutpixel(Video*, int, int, unsigned int)
10001646:	83 c4 10             	add    esp,0x10
10001649:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
1000164d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001651:	40                   	inc    eax
10001652:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
10001656:	eb a6                	jmp    100015fe <drawCharacter(Video*, Region, int, int, unsigned int, char)+0xb3>
10001658:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
1000165d:	74 10                	je     1000166f <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x124>
1000165f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001663:	8b 00                	mov    eax,DWORD PTR [eax]
10001665:	3b 44 24 70          	cmp    eax,DWORD PTR [esp+0x70]
10001669:	73 04                	jae    1000166f <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x124>
1000166b:	89 c3                	mov    ebx,eax
1000166d:	eb 01                	jmp    10001670 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x125>
1000166f:	43                   	inc    ebx
10001670:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10001674:	83 c0 08             	add    eax,0x8
10001677:	39 d8                	cmp    eax,ebx
10001679:	0f 8d 45 ff ff ff    	jge    100015c4 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x79>
1000167f:	e9 27 ff ff ff       	jmp    100015ab <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x60>
10001684:	83 c4 3c             	add    esp,0x3c
10001687:	b8 08 00 0c 00       	mov    eax,0xc0008
1000168c:	5b                   	pop    ebx
1000168d:	5e                   	pop    esi
1000168e:	5f                   	pop    edi
1000168f:	5d                   	pop    ebp
10001690:	c3                   	ret    

10001691 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)>:
10001691:	57                   	push   edi
10001692:	56                   	push   esi
10001693:	53                   	push   ebx
10001694:	83 ec 50             	sub    esp,0x50
10001697:	8d 74 24 18          	lea    esi,[esp+0x18]
1000169b:	50                   	push   eax
1000169c:	50                   	push   eax
1000169d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100016a1:	50                   	push   eax
100016a2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100016a6:	50                   	push   eax
100016a7:	8d 44 24 1f          	lea    eax,[esp+0x1f]
100016ab:	50                   	push   eax
100016ac:	ff b4 24 98 00 00 00 	push   DWORD PTR [esp+0x98]
100016b3:	ff b4 24 98 00 00 00 	push   DWORD PTR [esp+0x98]
100016ba:	56                   	push   esi
100016bb:	e8 fc ff ff ff       	call   100016bc <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0x2b>	100016bc: R_386_PC32	getFontRegion(int, int, bool*, int*, int*)
100016c0:	b9 07 00 00 00       	mov    ecx,0x7
100016c5:	8b 84 24 a4 00 00 00 	mov    eax,DWORD PTR [esp+0xa4]
100016cc:	8d 5c 24 50          	lea    ebx,[esp+0x50]
100016d0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100016d4:	8b 84 24 a8 00 00 00 	mov    eax,DWORD PTR [esp+0xa8]
100016db:	83 ec 14             	sub    esp,0x14
100016de:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
100016e2:	89 e7                	mov    edi,esp
100016e4:	83 ec 1c             	sub    esp,0x1c
100016e7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016e9:	8d b4 24 b0 00 00 00 	lea    esi,[esp+0xb0]
100016f0:	89 e7                	mov    edi,esp
100016f2:	b9 07 00 00 00       	mov    ecx,0x7
100016f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016f9:	53                   	push   ebx
100016fa:	89 de                	mov    esi,ebx
100016fc:	e8 fc ff ff ff       	call   100016fd <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0x6c>	100016fd: R_386_PC32	getRegionIntersection(Region, Region)
10001701:	b9 07 00 00 00       	mov    ecx,0x7
10001706:	83 c4 40             	add    esp,0x40
10001709:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
10001710:	83 ec 1c             	sub    esp,0x1c
10001713:	89 e7                	mov    edi,esp
10001715:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001717:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
1000171e:	e8 fc ff ff ff       	call   1000171f <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0x8e>	1000171f: R_386_PC32	fillRegion(Video*, Region, unsigned int)
10001723:	83 c4 30             	add    esp,0x30
10001726:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
1000172b:	74 0f                	je     1000173c <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0xab>
1000172d:	83 ec 0c             	sub    esp,0xc
10001730:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10001734:	e8 fc ff ff ff       	call   10001735 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0xa4>	10001735: R_386_PC32	free
10001739:	83 c4 10             	add    esp,0x10
1000173c:	83 ec 0c             	sub    esp,0xc
1000173f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
10001743:	e8 fc ff ff ff       	call   10001744 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0xb3>	10001744: R_386_PC32	free
10001748:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
1000174c:	c1 e0 10             	shl    eax,0x10
1000174f:	0b 44 24 20          	or     eax,DWORD PTR [esp+0x20]
10001753:	83 c4 60             	add    esp,0x60
10001756:	5b                   	pop    ebx
10001757:	5e                   	pop    esi
10001758:	5f                   	pop    edi
10001759:	c3                   	ret    

1000175a <fillRegion(Video*, Region, unsigned int)>:
1000175a:	55                   	push   ebp
1000175b:	31 ed                	xor    ebp,ebp
1000175d:	57                   	push   edi
1000175e:	56                   	push   esi
1000175f:	53                   	push   ebx
10001760:	83 ec 2c             	sub    esp,0x2c
10001763:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10001767:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
1000176f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10001773:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10001777:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000177b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
1000177f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001783:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10001787:	39 44 24 4c          	cmp    DWORD PTR [esp+0x4c],eax
1000178b:	0f 8e b6 00 00 00    	jle    10001847 <fillRegion(Video*, Region, unsigned int)+0xed>
10001791:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10001795:	8d 45 01             	lea    eax,[ebp+0x1]
10001798:	8b 0c ae             	mov    ecx,DWORD PTR [esi+ebp*4]
1000179b:	8d 14 ad 00 00 00 00 	lea    edx,[ebp*4+0x0]
100017a2:	83 f9 ff             	cmp    ecx,0xffffffff
100017a5:	0f 84 9c 00 00 00    	je     10001847 <fillRegion(Video*, Region, unsigned int)+0xed>
100017ab:	0f b7 f1             	movzx  esi,cx
100017ae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
100017b2:	c1 e9 10             	shr    ecx,0x10
100017b5:	8d 7c 17 04          	lea    edi,[edi+edx*1+0x4]
100017b9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
100017bd:	8d 2c 30             	lea    ebp,[eax+esi*1]
100017c0:	31 db                	xor    ebx,ebx
100017c2:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
100017c7:	39 5c 24 48          	cmp    DWORD PTR [esp+0x48],ebx
100017cb:	7e 6d                	jle    1000183a <fillRegion(Video*, Region, unsigned int)+0xe0>
100017cd:	39 1f                	cmp    DWORD PTR [edi],ebx
100017cf:	75 09                	jne    100017da <fillRegion(Video*, Region, unsigned int)+0x80>
100017d1:	83 c7 04             	add    edi,0x4
100017d4:	80 74 24 13 01       	xor    BYTE PTR [esp+0x13],0x1
100017d9:	4e                   	dec    esi
100017da:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
100017df:	74 55                	je     10001836 <fillRegion(Video*, Region, unsigned int)+0xdc>
100017e1:	8b 07                	mov    eax,DWORD PTR [edi]
100017e3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100017e7:	29 d8                	sub    eax,ebx
100017e9:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
100017ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100017f1:	01 da                	add    edx,ebx
100017f3:	80 7c 24 5c 00       	cmp    BYTE PTR [esp+0x5c],0x0
100017f8:	74 19                	je     10001813 <fillRegion(Video*, Region, unsigned int)+0xb9>
100017fa:	83 ec 08             	sub    esp,0x8
100017fd:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
10001801:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10001805:	50                   	push   eax
10001806:	51                   	push   ecx
10001807:	52                   	push   edx
10001808:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
1000180c:	e8 fc ff ff ff       	call   1000180d <fillRegion(Video*, Region, unsigned int)+0xb3>	1000180d: R_386_PC32	videoDrawRectDotted(Video*, int, int, int, int, unsigned int)
10001811:	eb 17                	jmp    1000182a <fillRegion(Video*, Region, unsigned int)+0xd0>
10001813:	83 ec 08             	sub    esp,0x8
10001816:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
1000181a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
1000181e:	50                   	push   eax
1000181f:	51                   	push   ecx
10001820:	52                   	push   edx
10001821:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
10001825:	e8 fc ff ff ff       	call   10001826 <fillRegion(Video*, Region, unsigned int)+0xcc>	10001826: R_386_PC32	videoDrawRect(Video*, int, int, int, int, unsigned int)
1000182a:	83 c4 20             	add    esp,0x20
1000182d:	43                   	inc    ebx
1000182e:	85 f6                	test   esi,esi
10001830:	74 95                	je     100017c7 <fillRegion(Video*, Region, unsigned int)+0x6d>
10001832:	8b 1f                	mov    ebx,DWORD PTR [edi]
10001834:	eb 91                	jmp    100017c7 <fillRegion(Video*, Region, unsigned int)+0x6d>
10001836:	85 f6                	test   esi,esi
10001838:	75 f8                	jne    10001832 <fillRegion(Video*, Region, unsigned int)+0xd8>
1000183a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
1000183e:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
10001842:	e9 3c ff ff ff       	jmp    10001783 <fillRegion(Video*, Region, unsigned int)+0x29>
10001847:	83 c4 2c             	add    esp,0x2c
1000184a:	5b                   	pop    ebx
1000184b:	5e                   	pop    esi
1000184c:	5f                   	pop    edi
1000184d:	5d                   	pop    ebp
1000184e:	c3                   	ret    

1000184f <readUnaligned32(unsigned char*)>:
1000184f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10001853:	8b 00                	mov    eax,DWORD PTR [eax]
10001855:	c3                   	ret    

10001856 <writeUnaligned32(unsigned char*, unsigned int)>:
10001856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000185a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
1000185e:	89 10                	mov    DWORD PTR [eax],edx
10001860:	c3                   	ret    

10001861 <createTightFontRegion(int, int, unsigned char*, int, int)>:
10001861:	55                   	push   ebp
10001862:	57                   	push   edi
10001863:	31 ff                	xor    edi,edi
10001865:	56                   	push   esi
10001866:	53                   	push   ebx
10001867:	83 ec 68             	sub    esp,0x68
1000186a:	8b 5c 24 7c          	mov    ebx,DWORD PTR [esp+0x7c]
1000186e:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
10001875:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
10001879:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
1000187c:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
10001883:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10001886:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
1000188d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10001890:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
10001897:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
1000189a:	6b 84 24 90 00 00 00 11 	imul   eax,DWORD PTR [esp+0x90],0x11
100018a2:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
100018a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
100018ac:	50                   	push   eax
100018ad:	e8 fc ff ff ff       	call   100018ae <createTightFontRegion(int, int, unsigned char*, int, int)+0x4d>	100018ae: R_386_PC32	malloc
100018b2:	8b ac 24 8c 00 00 00 	mov    ebp,DWORD PTR [esp+0x8c]
100018b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100018bd:	89 03                	mov    DWORD PTR [ebx],eax
100018bf:	83 c4 10             	add    esp,0x10
100018c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
100018c6:	3b bc 24 84 00 00 00 	cmp    edi,DWORD PTR [esp+0x84]
100018cd:	7d 6c                	jge    1000193b <createTightFontRegion(int, int, unsigned char*, int, int)+0xda>
100018cf:	31 f6                	xor    esi,esi
100018d1:	31 c0                	xor    eax,eax
100018d3:	31 c9                	xor    ecx,ecx
100018d5:	3b b4 24 80 00 00 00 	cmp    esi,DWORD PTR [esp+0x80]
100018dc:	7d 24                	jge    10001902 <createTightFontRegion(int, int, unsigned char*, int, int)+0xa1>
100018de:	80 7c 35 00 00       	cmp    BYTE PTR [ebp+esi*1+0x0],0x0
100018e3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100018e7:	0f 95 44 24 0e       	setne  BYTE PTR [esp+0xe]
100018ec:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
100018f0:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
100018f4:	74 05                	je     100018fb <createTightFontRegion(int, int, unsigned char*, int, int)+0x9a>
100018f6:	89 74 8c 10          	mov    DWORD PTR [esp+ecx*4+0x10],esi
100018fa:	41                   	inc    ecx
100018fb:	46                   	inc    esi
100018fc:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
10001900:	eb d3                	jmp    100018d5 <createTightFontRegion(int, int, unsigned char*, int, int)+0x74>
10001902:	84 c0                	test   al,al
10001904:	74 0c                	je     10001912 <createTightFontRegion(int, int, unsigned char*, int, int)+0xb1>
10001906:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
1000190d:	89 44 8c 10          	mov    DWORD PTR [esp+ecx*4+0x10],eax
10001911:	41                   	inc    ecx
10001912:	89 ce                	mov    esi,ecx
10001914:	81 ce 00 00 01 00    	or     esi,0x10000
1000191a:	89 32                	mov    DWORD PTR [edx],esi
1000191c:	31 f6                	xor    esi,esi
1000191e:	39 f1                	cmp    ecx,esi
10001920:	74 0b                	je     1000192d <createTightFontRegion(int, int, unsigned char*, int, int)+0xcc>
10001922:	8b 44 b4 10          	mov    eax,DWORD PTR [esp+esi*4+0x10]
10001926:	89 44 b2 04          	mov    DWORD PTR [edx+esi*4+0x4],eax
1000192a:	46                   	inc    esi
1000192b:	eb f1                	jmp    1000191e <createTightFontRegion(int, int, unsigned char*, int, int)+0xbd>
1000192d:	8d 54 8a 04          	lea    edx,[edx+ecx*4+0x4]
10001931:	47                   	inc    edi
10001932:	03 ac 24 80 00 00 00 	add    ebp,DWORD PTR [esp+0x80]
10001939:	eb 8b                	jmp    100018c6 <createTightFontRegion(int, int, unsigned char*, int, int)+0x65>
1000193b:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
10001941:	89 d8                	mov    eax,ebx
10001943:	83 c2 04             	add    edx,0x4
10001946:	2b 54 24 08          	sub    edx,DWORD PTR [esp+0x8]
1000194a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
1000194d:	83 c4 5c             	add    esp,0x5c
10001950:	5b                   	pop    ebx
10001951:	5e                   	pop    esi
10001952:	5f                   	pop    edi
10001953:	5d                   	pop    ebp
10001954:	c2 04 00             	ret    0x4

10001957 <createTightCursorRegion(int, int, unsigned int*)>:
10001957:	55                   	push   ebp
10001958:	57                   	push   edi
10001959:	56                   	push   esi
1000195a:	31 f6                	xor    esi,esi
1000195c:	53                   	push   ebx
1000195d:	83 ec 68             	sub    esp,0x68
10001960:	8b 5c 24 7c          	mov    ebx,DWORD PTR [esp+0x7c]
10001964:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
1000196b:	c7 43 04 20 00 00 00 	mov    DWORD PTR [ebx+0x4],0x20
10001972:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10001975:	c7 43 08 20 00 00 00 	mov    DWORD PTR [ebx+0x8],0x20
1000197c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
10001983:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
10001987:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
1000198a:	c7 43 0c 84 08 00 00 	mov    DWORD PTR [ebx+0xc],0x884
10001991:	68 84 08 00 00       	push   0x884
10001996:	e8 fc ff ff ff       	call   10001997 <createTightCursorRegion(int, int, unsigned int*)+0x40>	10001997: R_386_PC32	malloc
1000199b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000199f:	89 03                	mov    DWORD PTR [ebx],eax
100019a1:	83 c4 10             	add    esp,0x10
100019a4:	89 c1                	mov    ecx,eax
100019a6:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100019aa:	31 ed                	xor    ebp,ebp
100019ac:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
100019af:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
100019b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100019b8:	31 d2                	xor    edx,edx
100019ba:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100019be:	8b 84 b0 80 00 00 00 	mov    eax,DWORD PTR [eax+esi*4+0x80]
100019c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100019c9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100019cd:	0b 7c 24 08          	or     edi,DWORD PTR [esp+0x8]
100019d1:	83 e7 01             	and    edi,0x1
100019d4:	89 f8                	mov    eax,edi
100019d6:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
100019da:	74 05                	je     100019e1 <createTightCursorRegion(int, int, unsigned int*)+0x8a>
100019dc:	89 6c 94 10          	mov    DWORD PTR [esp+edx*4+0x10],ebp
100019e0:	42                   	inc    edx
100019e1:	d1 6c 24 08          	shr    DWORD PTR [esp+0x8],1
100019e5:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
100019e9:	45                   	inc    ebp
100019ea:	89 f8                	mov    eax,edi
100019ec:	83 fd 20             	cmp    ebp,0x20
100019ef:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
100019f3:	75 d4                	jne    100019c9 <createTightCursorRegion(int, int, unsigned int*)+0x72>
100019f5:	84 c0                	test   al,al
100019f7:	74 09                	je     10001a02 <createTightCursorRegion(int, int, unsigned int*)+0xab>
100019f9:	c7 44 94 10 20 00 00 00 	mov    DWORD PTR [esp+edx*4+0x10],0x20
10001a01:	42                   	inc    edx
10001a02:	89 d7                	mov    edi,edx
10001a04:	8d 69 04             	lea    ebp,[ecx+0x4]
10001a07:	81 cf 00 00 01 00    	or     edi,0x10000
10001a0d:	89 39                	mov    DWORD PTR [ecx],edi
10001a0f:	31 ff                	xor    edi,edi
10001a11:	39 fa                	cmp    edx,edi
10001a13:	74 0b                	je     10001a20 <createTightCursorRegion(int, int, unsigned int*)+0xc9>
10001a15:	8b 44 bc 10          	mov    eax,DWORD PTR [esp+edi*4+0x10]
10001a19:	89 44 b9 04          	mov    DWORD PTR [ecx+edi*4+0x4],eax
10001a1d:	47                   	inc    edi
10001a1e:	eb f1                	jmp    10001a11 <createTightCursorRegion(int, int, unsigned int*)+0xba>
10001a20:	c1 e2 02             	shl    edx,0x2
10001a23:	46                   	inc    esi
10001a24:	8d 4c 15 00          	lea    ecx,[ebp+edx*1+0x0]
10001a28:	83 fe 20             	cmp    esi,0x20
10001a2b:	8d 54 15 04          	lea    edx,[ebp+edx*1+0x4]
10001a2f:	0f 85 71 ff ff ff    	jne    100019a6 <createTightCursorRegion(int, int, unsigned int*)+0x4f>
10001a35:	c7 01 ff ff ff ff    	mov    DWORD PTR [ecx],0xffffffff
10001a3b:	2b 14 24             	sub    edx,DWORD PTR [esp]
10001a3e:	89 d8                	mov    eax,ebx
10001a40:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
10001a43:	83 c4 5c             	add    esp,0x5c
10001a46:	5b                   	pop    ebx
10001a47:	5e                   	pop    esi
10001a48:	5f                   	pop    edi
10001a49:	5d                   	pop    ebp
10001a4a:	c2 04 00             	ret    0x4

10001a4d <createEllipseRegion(int, int, int, int)>:
10001a4d:	55                   	push   ebp
10001a4e:	57                   	push   edi
10001a4f:	56                   	push   esi
10001a50:	53                   	push   ebx
10001a51:	83 ec 28             	sub    esp,0x28
10001a54:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10001a58:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
10001a5c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10001a60:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
10001a63:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
10001a66:	c6 46 18 00          	mov    BYTE PTR [esi+0x18],0x0
10001a6a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10001a6e:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
10001a71:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10001a75:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
10001a78:	6b c3 0c             	imul   eax,ebx,0xc
10001a7b:	83 c0 04             	add    eax,0x4
10001a7e:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
10001a81:	50                   	push   eax
10001a82:	e8 fc ff ff ff       	call   10001a83 <createEllipseRegion(int, int, int, int)+0x36>	10001a83: R_386_PC32	malloc
10001a87:	83 c4 10             	add    esp,0x10
10001a8a:	89 c5                	mov    ebp,eax
10001a8c:	89 06                	mov    DWORD PTR [esi],eax
10001a8e:	85 c0                	test   eax,eax
10001a90:	75 10                	jne    10001aa2 <createEllipseRegion(int, int, int, int)+0x55>
10001a92:	83 ec 0c             	sub    esp,0xc
10001a95:	68 ba 85 00 10       	push   0x100085ba	10001a96: R_386_32	.text
10001a9a:	e8 fc ff ff ff       	call   10001a9b <createEllipseRegion(int, int, int, int)+0x4e>	10001a9b: R_386_PC32	KePanic(char const*)
10001a9f:	83 c4 10             	add    esp,0x10
10001aa2:	89 ef                	mov    edi,ebp
10001aa4:	31 c0                	xor    eax,eax
10001aa6:	39 d8                	cmp    eax,ebx
10001aa8:	0f 8d 88 00 00 00    	jge    10001b36 <createEllipseRegion(int, int, int, int)+0xe9>
10001aae:	89 04 24             	mov    DWORD PTR [esp],eax
10001ab1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001ab5:	db 04 24             	fild   DWORD PTR [esp]
10001ab8:	8d 53 ff             	lea    edx,[ebx-0x1]
10001abb:	83 ec 10             	sub    esp,0x10
10001abe:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10001ac2:	d8 c0                	fadd   st,st(0)
10001ac4:	83 c7 0c             	add    edi,0xc
10001ac7:	da 74 24 10          	fidiv  DWORD PTR [esp+0x10]
10001acb:	d9 e8                	fld1   
10001acd:	dc e1                	fsubr  st(1),st
10001acf:	d9 c9                	fxch   st(1)
10001ad1:	d8 c8                	fmul   st,st(0)
10001ad3:	de e9                	fsubp  st(1),st
10001ad5:	dd 1c 24             	fstp   QWORD PTR [esp]
10001ad8:	e8 fc ff ff ff       	call   10001ad9 <createEllipseRegion(int, int, int, int)+0x8c>	10001ad9: R_386_PC32	sqrt
10001add:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001ae1:	d9 7c 24 1e          	fnstcw WORD PTR [esp+0x1e]
10001ae5:	db 44 24 4c          	fild   DWORD PTR [esp+0x4c]
10001ae9:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
10001aee:	dc c9                	fmul   st(1),st
10001af0:	80 ce 0c             	or     dh,0xc
10001af3:	d8 e1                	fsub   st,st(1)
10001af5:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
10001afa:	d8 0d c0 85 00 10    	fmul   DWORD PTR ds:0x100085c0	10001afc: R_386_32	.text
10001b00:	40                   	inc    eax
10001b01:	d9 6c 24 1c          	fldcw  WORD PTR [esp+0x1c]
10001b05:	db 5c 24 18          	fistp  DWORD PTR [esp+0x18]
10001b09:	d9 6c 24 1e          	fldcw  WORD PTR [esp+0x1e]
10001b0d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10001b11:	c7 47 f4 02 00 01 00 	mov    DWORD PTR [edi-0xc],0x10002
10001b18:	89 57 f8             	mov    DWORD PTR [edi-0x8],edx
10001b1b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10001b1f:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
10001b23:	d9 6c 24 1c          	fldcw  WORD PTR [esp+0x1c]
10001b27:	db 5f fc             	fistp  DWORD PTR [edi-0x4]
10001b2a:	d9 6c 24 1e          	fldcw  WORD PTR [esp+0x1e]
10001b2e:	83 c4 10             	add    esp,0x10
10001b31:	e9 70 ff ff ff       	jmp    10001aa6 <createEllipseRegion(int, int, int, int)+0x59>
10001b36:	85 db                	test   ebx,ebx
10001b38:	79 02                	jns    10001b3c <createEllipseRegion(int, int, int, int)+0xef>
10001b3a:	31 db                	xor    ebx,ebx
10001b3c:	6b db 0c             	imul   ebx,ebx,0xc
10001b3f:	89 f0                	mov    eax,esi
10001b41:	c7 44 1d 00 ff ff ff ff 	mov    DWORD PTR [ebp+ebx*1+0x0],0xffffffff
10001b49:	83 c4 1c             	add    esp,0x1c
10001b4c:	5b                   	pop    ebx
10001b4d:	5e                   	pop    esi
10001b4e:	5f                   	pop    edi
10001b4f:	5d                   	pop    ebp
10001b50:	c2 04 00             	ret    0x4

10001b53 <createPolygonRegion(int*, int*, int)>:
10001b53:	55                   	push   ebp
10001b54:	57                   	push   edi
10001b55:	56                   	push   esi
10001b56:	53                   	push   ebx
10001b57:	51                   	push   ecx
10001b58:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
10001b5c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10001b60:	8b 0e                	mov    ecx,DWORD PTR [esi]
10001b62:	8b 17                	mov    edx,DWORD PTR [edi]
10001b64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001b68:	89 14 24             	mov    DWORD PTR [esp],edx
10001b6b:	89 cb                	mov    ebx,ecx
10001b6d:	31 f6                	xor    esi,esi
10001b6f:	3b 74 24 24          	cmp    esi,DWORD PTR [esp+0x24]
10001b73:	7d 2b                	jge    10001ba0 <createPolygonRegion(int*, int*, int)+0x4d>
10001b75:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001b79:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
10001b7c:	39 e9                	cmp    ecx,ebp
10001b7e:	7e 02                	jle    10001b82 <createPolygonRegion(int*, int*, int)+0x2f>
10001b80:	89 e9                	mov    ecx,ebp
10001b82:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10001b86:	8b 3c b7             	mov    edi,DWORD PTR [edi+esi*4]
10001b89:	39 fa                	cmp    edx,edi
10001b8b:	7e 02                	jle    10001b8f <createPolygonRegion(int*, int*, int)+0x3c>
10001b8d:	89 fa                	mov    edx,edi
10001b8f:	39 eb                	cmp    ebx,ebp
10001b91:	7d 02                	jge    10001b95 <createPolygonRegion(int*, int*, int)+0x42>
10001b93:	89 eb                	mov    ebx,ebp
10001b95:	39 3c 24             	cmp    DWORD PTR [esp],edi
10001b98:	7d 03                	jge    10001b9d <createPolygonRegion(int*, int*, int)+0x4a>
10001b9a:	89 3c 24             	mov    DWORD PTR [esp],edi
10001b9d:	46                   	inc    esi
10001b9e:	eb cf                	jmp    10001b6f <createPolygonRegion(int*, int*, int)+0x1c>
10001ba0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10001ba6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
10001bad:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
10001bb0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
10001bb3:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
10001bb7:	29 cb                	sub    ebx,ecx
10001bb9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
10001bbc:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
10001bbf:	29 d3                	sub    ebx,edx
10001bc1:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
10001bc4:	5a                   	pop    edx
10001bc5:	5b                   	pop    ebx
10001bc6:	5e                   	pop    esi
10001bc7:	5f                   	pop    edi
10001bc8:	5d                   	pop    ebp
10001bc9:	c2 04 00             	ret    0x4

10001bcc <createRectangleRegion(int, int, int, int)>:
10001bcc:	57                   	push   edi
10001bcd:	56                   	push   esi
10001bce:	53                   	push   ebx
10001bcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001bd3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001bd7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10001bdb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001bdf:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
10001be2:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10001be5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10001be8:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
10001bec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001bf0:	c7 43 0c 10 00 00 00 	mov    DWORD PTR [ebx+0xc],0x10
10001bf7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10001bfa:	83 ec 0c             	sub    esp,0xc
10001bfd:	c1 e6 10             	shl    esi,0x10
10001c00:	6a 10                	push   0x10
10001c02:	83 ce 02             	or     esi,0x2
10001c05:	e8 fc ff ff ff       	call   10001c06 <createRectangleRegion(int, int, int, int)+0x3a>	10001c06: R_386_PC32	malloc
10001c0a:	83 c4 10             	add    esp,0x10
10001c0d:	89 03                	mov    DWORD PTR [ebx],eax
10001c0f:	89 30                	mov    DWORD PTR [eax],esi
10001c11:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001c18:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
10001c1b:	c7 40 0c ff ff ff ff 	mov    DWORD PTR [eax+0xc],0xffffffff
10001c22:	89 d8                	mov    eax,ebx
10001c24:	5b                   	pop    ebx
10001c25:	5e                   	pop    esi
10001c26:	5f                   	pop    edi
10001c27:	c2 04 00             	ret    0x4

10001c2a <createBorderRegion(int, int, int, int, int)>:
10001c2a:	55                   	push   ebp
10001c2b:	57                   	push   edi
10001c2c:	56                   	push   esi
10001c2d:	53                   	push   ebx
10001c2e:	83 ec 18             	sub    esp,0x18
10001c31:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10001c35:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10001c39:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10001c3d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10001c41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001c45:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
10001c48:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10001c4b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10001c4e:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
10001c52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001c56:	c7 43 0c 30 00 00 00 	mov    DWORD PTR [ebx+0xc],0x30
10001c5d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10001c60:	6a 30                	push   0x30
10001c62:	e8 fc ff ff ff       	call   10001c63 <createBorderRegion(int, int, int, int, int)+0x39>	10001c63: R_386_PC32	malloc
10001c67:	8d 4c 2d 00          	lea    ecx,[ebp+ebp*1+0x0]
10001c6b:	89 03                	mov    DWORD PTR [ebx],eax
10001c6d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001c74:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
10001c77:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10001c7e:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
10001c81:	89 78 1c             	mov    DWORD PTR [eax+0x1c],edi
10001c84:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
10001c8b:	89 78 28             	mov    DWORD PTR [eax+0x28],edi
10001c8e:	c7 40 2c ff ff ff ff 	mov    DWORD PTR [eax+0x2c],0xffffffff
10001c95:	89 ea                	mov    edx,ebp
10001c97:	29 ce                	sub    esi,ecx
10001c99:	c1 e2 10             	shl    edx,0x10
10001c9c:	89 f9                	mov    ecx,edi
10001c9e:	83 ca 02             	or     edx,0x2
10001ca1:	29 e9                	sub    ecx,ebp
10001ca3:	89 10                	mov    DWORD PTR [eax],edx
10001ca5:	89 48 18             	mov    DWORD PTR [eax+0x18],ecx
10001ca8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
10001cab:	c1 e6 10             	shl    esi,0x10
10001cae:	83 ce 04             	or     esi,0x4
10001cb1:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
10001cb4:	83 c4 1c             	add    esp,0x1c
10001cb7:	89 d8                	mov    eax,ebx
10001cb9:	5b                   	pop    ebx
10001cba:	5e                   	pop    esi
10001cbb:	5f                   	pop    edi
10001cbc:	5d                   	pop    ebp
10001cbd:	c2 04 00             	ret    0x4

10001cc0 <createAntRegion(int, int, int, int, int)>:
10001cc0:	53                   	push   ebx
10001cc1:	83 ec 10             	sub    esp,0x10
10001cc4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10001cc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001ccc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001cd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001cdc:	53                   	push   ebx
10001cdd:	e8 fc ff ff ff       	call   10001cde <createAntRegion(int, int, int, int, int)+0x1e>	10001cde: R_386_PC32	createBorderRegion(int, int, int, int, int)
10001ce2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
10001ce6:	89 d8                	mov    eax,ebx
10001ce8:	83 c4 24             	add    esp,0x24
10001ceb:	5b                   	pop    ebx
10001cec:	c2 04 00             	ret    0x4

10001cef <compressScanlineAndAddToRegion(Region*, int, unsigned int*, unsigned int, unsigned int)>:
10001cef:	57                   	push   edi
10001cf0:	56                   	push   esi
10001cf1:	be 04 00 00 00       	mov    esi,0x4
10001cf6:	53                   	push   ebx
10001cf7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10001cfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001cff:	8b 18                	mov    ebx,DWORD PTR [eax]
10001d01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001d05:	99                   	cdq    
10001d06:	f7 fe                	idiv   esi
10001d08:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001d0c:	8d 7c 83 04          	lea    edi,[ebx+eax*4+0x4]
10001d10:	c1 e2 10             	shl    edx,0x10
10001d13:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10001d17:	09 ca                	or     edx,ecx
10001d19:	89 14 83             	mov    DWORD PTR [ebx+eax*4],edx
10001d1c:	8d 14 8d 00 00 00 00 	lea    edx,[ecx*4+0x0]
10001d23:	89 d1                	mov    ecx,edx
10001d25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10001d27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001d2b:	5b                   	pop    ebx
10001d2c:	8d 44 02 04          	lea    eax,[edx+eax*1+0x4]
10001d30:	5e                   	pop    esi
10001d31:	5f                   	pop    edi
10001d32:	c3                   	ret    

10001d33 <performRegionOperation(Region, Region, RegionOperation)>:
10001d33:	55                   	push   ebp
10001d34:	57                   	push   edi
10001d35:	56                   	push   esi
10001d36:	53                   	push   ebx
10001d37:	81 ec 7c 20 00 00    	sub    esp,0x207c
10001d3d:	8b 84 24 94 20 00 00 	mov    eax,DWORD PTR [esp+0x2094]
10001d44:	8b b4 24 b0 20 00 00 	mov    esi,DWORD PTR [esp+0x20b0]
10001d4b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001d4f:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10001d53:	8b 84 24 9c 20 00 00 	mov    eax,DWORD PTR [esp+0x209c]
10001d5a:	8b b4 24 b8 20 00 00 	mov    esi,DWORD PTR [esp+0x20b8]
10001d61:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10001d65:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
10001d69:	8b 84 24 a0 20 00 00 	mov    eax,DWORD PTR [esp+0x20a0]
10001d70:	8b b4 24 bc 20 00 00 	mov    esi,DWORD PTR [esp+0x20bc]
10001d77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10001d7b:	8b 94 24 c0 20 00 00 	mov    edx,DWORD PTR [esp+0x20c0]
10001d82:	8b 84 24 a4 20 00 00 	mov    eax,DWORD PTR [esp+0x20a4]
10001d89:	8b ac 24 90 20 00 00 	mov    ebp,DWORD PTR [esp+0x2090]
10001d90:	8b 8c 24 a8 20 00 00 	mov    ecx,DWORD PTR [esp+0x20a8]
10001d97:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10001d9b:	8b 9c 24 c4 20 00 00 	mov    ebx,DWORD PTR [esp+0x20c4]
10001da2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001da6:	39 d0                	cmp    eax,edx
10001da8:	7e 04                	jle    10001dae <performRegionOperation(Region, Region, RegionOperation)+0x7b>
10001daa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
10001dae:	89 ce                	mov    esi,ecx
10001db0:	39 d9                	cmp    ecx,ebx
10001db2:	7e 02                	jle    10001db6 <performRegionOperation(Region, Region, RegionOperation)+0x83>
10001db4:	89 de                	mov    esi,ebx
10001db6:	8b bc 24 98 20 00 00 	mov    edi,DWORD PTR [esp+0x2098]
10001dbd:	01 c7                	add    edi,eax
10001dbf:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
10001dc3:	8b bc 24 b4 20 00 00 	mov    edi,DWORD PTR [esp+0x20b4]
10001dca:	01 d7                	add    edi,edx
10001dcc:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
10001dd0:	7d 04                	jge    10001dd6 <performRegionOperation(Region, Region, RegionOperation)+0xa3>
10001dd2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10001dd6:	2b 7c 24 04          	sub    edi,DWORD PTR [esp+0x4]
10001dda:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10001dde:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
10001de2:	01 cf                	add    edi,ecx
10001de4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
10001de8:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
10001dec:	01 df                	add    edi,ebx
10001dee:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
10001df2:	7d 04                	jge    10001df8 <performRegionOperation(Region, Region, RegionOperation)+0xc5>
10001df4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10001df8:	29 f7                	sub    edi,esi
10001dfa:	39 d9                	cmp    ecx,ebx
10001dfc:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
10001e00:	7c 10                	jl     10001e12 <performRegionOperation(Region, Region, RegionOperation)+0xdf>
10001e02:	89 cf                	mov    edi,ecx
10001e04:	29 df                	sub    edi,ebx
10001e06:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10001e0a:	31 ff                	xor    edi,edi
10001e0c:	39 d9                	cmp    ecx,ebx
10001e0e:	75 0e                	jne    10001e1e <performRegionOperation(Region, Region, RegionOperation)+0xeb>
10001e10:	eb 08                	jmp    10001e1a <performRegionOperation(Region, Region, RegionOperation)+0xe7>
10001e12:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
10001e1a:	29 cb                	sub    ebx,ecx
10001e1c:	89 df                	mov    edi,ebx
10001e1e:	39 d0                	cmp    eax,edx
10001e20:	7c 16                	jl     10001e38 <performRegionOperation(Region, Region, RegionOperation)+0x105>
10001e22:	89 c3                	mov    ebx,eax
10001e24:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10001e2c:	29 d3                	sub    ebx,edx
10001e2e:	39 d0                	cmp    eax,edx
10001e30:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
10001e34:	75 10                	jne    10001e46 <performRegionOperation(Region, Region, RegionOperation)+0x113>
10001e36:	eb 08                	jmp    10001e40 <performRegionOperation(Region, Region, RegionOperation)+0x10d>
10001e38:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001e40:	29 c2                	sub    edx,eax
10001e42:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
10001e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001e4a:	89 75 14             	mov    DWORD PTR [ebp+0x14],esi
10001e4d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
10001e50:	c6 45 18 00          	mov    BYTE PTR [ebp+0x18],0x0
10001e54:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001e58:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10001e5b:	f7 df                	neg    edi
10001e5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10001e61:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
10001e64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001e68:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
10001e6c:	c1 e0 02             	shl    eax,0x2
10001e6f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10001e72:	51                   	push   ecx
10001e73:	51                   	push   ecx
10001e74:	6a 01                	push   0x1
10001e76:	50                   	push   eax
10001e77:	e8 fc ff ff ff       	call   10001e78 <performRegionOperation(Region, Region, RegionOperation)+0x145>	10001e78: R_386_PC32	calloc
10001e7c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
10001e84:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
10001e8c:	c7 84 24 80 08 00 00 ff ff ff ff 	mov    DWORD PTR [esp+0x880],0xffffffff
10001e97:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10001e9b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
10001e9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10001ea2:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
10001ea6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001eaa:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10001eae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001eb2:	f7 d8                	neg    eax
10001eb4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001eb8:	83 c4 10             	add    esp,0x10
10001ebb:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
10001ec3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
10001ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10001ed3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10001ed7:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
10001edb:	39 44 24 3c          	cmp    DWORD PTR [esp+0x3c],eax
10001edf:	0f 8e cc 01 00 00    	jle    100020b1 <performRegionOperation(Region, Region, RegionOperation)+0x37e>
10001ee5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
10001ee9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10001eed:	f7 d2                	not    edx
10001eef:	c1 ea 1f             	shr    edx,0x1f
10001ef2:	39 74 24 40          	cmp    DWORD PTR [esp+0x40],esi
10001ef6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
10001efa:	0f 9f c0             	setg   al
10001efd:	21 d0                	and    eax,edx
10001eff:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
10001f03:	88 44 24 56          	mov    BYTE PTR [esp+0x56],al
10001f07:	89 f2                	mov    edx,esi
10001f09:	0f 9f c0             	setg   al
10001f0c:	f7 d2                	not    edx
10001f0e:	31 db                	xor    ebx,ebx
10001f10:	c1 ea 1f             	shr    edx,0x1f
10001f13:	21 d0                	and    eax,edx
10001f15:	88 44 24 57          	mov    BYTE PTR [esp+0x57],al
10001f19:	80 7c 1c 56 00       	cmp    BYTE PTR [esp+ebx*1+0x56],0x0
10001f1e:	75 0a                	jne    10001f2a <performRegionOperation(Region, Region, RegionOperation)+0x1f7>
10001f20:	c7 44 9c 68 00 00 00 00 	mov    DWORD PTR [esp+ebx*4+0x68],0x0
10001f28:	eb 1b                	jmp    10001f45 <performRegionOperation(Region, Region, RegionOperation)+0x212>
10001f2a:	83 7c 9c 68 00       	cmp    DWORD PTR [esp+ebx*4+0x68],0x0
10001f2f:	75 14                	jne    10001f45 <performRegionOperation(Region, Region, RegionOperation)+0x212>
10001f31:	8b 4c 9c 58          	mov    ecx,DWORD PTR [esp+ebx*4+0x58]
10001f35:	8b 01                	mov    eax,DWORD PTR [ecx]
10001f37:	83 f8 ff             	cmp    eax,0xffffffff
10001f3a:	0f 85 a5 01 00 00    	jne    100020e5 <performRegionOperation(Region, Region, RegionOperation)+0x3b2>
10001f40:	c6 44 1c 56 00       	mov    BYTE PTR [esp+ebx*1+0x56],0x0
10001f45:	83 fb 01             	cmp    ebx,0x1
10001f48:	74 07                	je     10001f51 <performRegionOperation(Region, Region, RegionOperation)+0x21e>
10001f4a:	bb 01 00 00 00       	mov    ebx,0x1
10001f4f:	eb c8                	jmp    10001f19 <performRegionOperation(Region, Region, RegionOperation)+0x1e6>
10001f51:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10001f55:	c6 44 24 4e 01       	mov    BYTE PTR [esp+0x4e],0x1
10001f5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10001f5e:	c6 44 24 4d 00       	mov    BYTE PTR [esp+0x4d],0x0
10001f63:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
10001f68:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10001f6c:	0f 95 44 24 4f       	setne  BYTE PTR [esp+0x4f]
10001f71:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001f75:	31 f6                	xor    esi,esi
10001f77:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
10001f7b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
10001f83:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10001f87:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
10001f8f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10001f93:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
10001f9b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001f9f:	31 c0                	xor    eax,eax
10001fa1:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
10001fa6:	74 0a                	je     10001fb2 <performRegionOperation(Region, Region, RegionOperation)+0x27f>
10001fa8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10001fac:	39 54 24 2c          	cmp    DWORD PTR [esp+0x2c],edx
10001fb0:	7f 22                	jg     10001fd4 <performRegionOperation(Region, Region, RegionOperation)+0x2a1>
10001fb2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10001fb7:	74 62                	je     1000201b <performRegionOperation(Region, Region, RegionOperation)+0x2e8>
10001fb9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10001fbd:	39 54 24 34          	cmp    DWORD PTR [esp+0x34],edx
10001fc1:	7e 58                	jle    1000201b <performRegionOperation(Region, Region, RegionOperation)+0x2e8>
10001fc3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10001fc7:	39 54 24 2c          	cmp    DWORD PTR [esp+0x2c],edx
10001fcb:	7e 2e                	jle    10001ffb <performRegionOperation(Region, Region, RegionOperation)+0x2c8>
10001fcd:	80 7c 24 4f 00       	cmp    BYTE PTR [esp+0x4f],0x0
10001fd2:	74 27                	je     10001ffb <performRegionOperation(Region, Region, RegionOperation)+0x2c8>
10001fd4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10001fd8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001fdc:	03 8c 94 70 10 00 00 	add    ecx,DWORD PTR [esp+edx*4+0x1070]
10001fe3:	83 ca ff             	or     edx,0xffffffff
10001fe6:	89 cf                	mov    edi,ecx
10001fe8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10001fec:	39 4c 24 34          	cmp    DWORD PTR [esp+0x34],ecx
10001ff0:	7e 1b                	jle    1000200d <performRegionOperation(Region, Region, RegionOperation)+0x2da>
10001ff2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10001ff7:	74 14                	je     1000200d <performRegionOperation(Region, Region, RegionOperation)+0x2da>
10001ff9:	eb 03                	jmp    10001ffe <performRegionOperation(Region, Region, RegionOperation)+0x2cb>
10001ffb:	83 cf ff             	or     edi,0xffffffff
10001ffe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10002002:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
10002006:	03 94 8c 70 18 00 00 	add    edx,DWORD PTR [esp+ecx*4+0x1870]
1000200d:	83 ff ff             	cmp    edi,0xffffffff
10002010:	0f 85 9e 01 00 00    	jne    100021b4 <performRegionOperation(Region, Region, RegionOperation)+0x481>
10002016:	e9 18 01 00 00       	jmp    10002133 <performRegionOperation(Region, Region, RegionOperation)+0x400>
1000201b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
1000201f:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
10002023:	75 16                	jne    1000203b <performRegionOperation(Region, Region, RegionOperation)+0x308>
10002025:	80 7c 24 4e 00       	cmp    BYTE PTR [esp+0x4e],0x0
1000202a:	74 0f                	je     1000203b <performRegionOperation(Region, Region, RegionOperation)+0x308>
1000202c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10002030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002034:	43                   	inc    ebx
10002035:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10002039:	eb 43                	jmp    1000207e <performRegionOperation(Region, Region, RegionOperation)+0x34b>
1000203b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10002040:	74 24                	je     10002066 <performRegionOperation(Region, Region, RegionOperation)+0x333>
10002042:	83 ec 0c             	sub    esp,0xc
10002045:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10002049:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000204d:	8d 84 24 84 08 00 00 	lea    eax,[esp+0x884]
10002054:	50                   	push   eax
10002055:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10002059:	55                   	push   ebp
1000205a:	e8 fc ff ff ff       	call   1000205b <performRegionOperation(Region, Region, RegionOperation)+0x328>	1000205b: R_386_PC32	compressScanlineAndAddToRegion(Region*, int, unsigned int*, unsigned int, unsigned int)
1000205f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10002063:	83 c4 20             	add    esp,0x20
10002066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000206a:	8d 74 24 70          	lea    esi,[esp+0x70]
1000206e:	8d bc 24 70 08 00 00 	lea    edi,[esp+0x870]
10002075:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000207c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000207e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10002082:	85 c0                	test   eax,eax
10002084:	74 05                	je     1000208b <performRegionOperation(Region, Region, RegionOperation)+0x358>
10002086:	48                   	dec    eax
10002087:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
1000208b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
1000208f:	85 c0                	test   eax,eax
10002091:	74 05                	je     10002098 <performRegionOperation(Region, Region, RegionOperation)+0x365>
10002093:	48                   	dec    eax
10002094:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10002098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000209c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
100020a0:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
100020a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100020a8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
100020ac:	e9 22 fe ff ff       	jmp    10001ed3 <performRegionOperation(Region, Region, RegionOperation)+0x1a0>
100020b1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
100020b6:	0f 84 2f 01 00 00    	je     100021eb <performRegionOperation(Region, Region, RegionOperation)+0x4b8>
100020bc:	83 ec 0c             	sub    esp,0xc
100020bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100020c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100020c7:	8d 84 24 84 08 00 00 	lea    eax,[esp+0x884]
100020ce:	50                   	push   eax
100020cf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100020d3:	55                   	push   ebp
100020d4:	e8 fc ff ff ff       	call   100020d5 <performRegionOperation(Region, Region, RegionOperation)+0x3a2>	100020d5: R_386_PC32	compressScanlineAndAddToRegion(Region*, int, unsigned int*, unsigned int, unsigned int)
100020d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
100020dd:	83 c4 20             	add    esp,0x20
100020e0:	e9 06 01 00 00       	jmp    100021eb <performRegionOperation(Region, Region, RegionOperation)+0x4b8>
100020e5:	0f b7 d0             	movzx  edx,ax
100020e8:	83 c1 04             	add    ecx,0x4
100020eb:	c1 e8 10             	shr    eax,0x10
100020ee:	89 54 9c 60          	mov    DWORD PTR [esp+ebx*4+0x60],edx
100020f2:	89 44 9c 68          	mov    DWORD PTR [esp+ebx*4+0x68],eax
100020f6:	89 4c 9c 58          	mov    DWORD PTR [esp+ebx*4+0x58],ecx
100020fa:	89 d8                	mov    eax,ebx
100020fc:	8d b4 24 70 10 00 00 	lea    esi,[esp+0x1070]
10002103:	c1 e0 0b             	shl    eax,0xb
10002106:	89 d9                	mov    ecx,ebx
10002108:	01 f0                	add    eax,esi
1000210a:	c1 e1 09             	shl    ecx,0x9
1000210d:	01 ca                	add    edx,ecx
1000210f:	8d 8c 94 70 10 00 00 	lea    ecx,[esp+edx*4+0x1070]
10002116:	39 c8                	cmp    eax,ecx
10002118:	0f 84 27 fe ff ff    	je     10001f45 <performRegionOperation(Region, Region, RegionOperation)+0x212>
1000211e:	8b 54 9c 58          	mov    edx,DWORD PTR [esp+ebx*4+0x58]
10002122:	83 c0 04             	add    eax,0x4
10002125:	8b 32                	mov    esi,DWORD PTR [edx]
10002127:	83 c2 04             	add    edx,0x4
1000212a:	89 70 fc             	mov    DWORD PTR [eax-0x4],esi
1000212d:	89 54 9c 58          	mov    DWORD PTR [esp+ebx*4+0x58],edx
10002131:	eb e3                	jmp    10002116 <performRegionOperation(Region, Region, RegionOperation)+0x3e3>
10002133:	31 c0                	xor    eax,eax
10002135:	83 fa ff             	cmp    edx,0xffffffff
10002138:	74 0b                	je     10002145 <performRegionOperation(Region, Region, RegionOperation)+0x412>
1000213a:	83 f6 01             	xor    esi,0x1
1000213d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
10002141:	89 d7                	mov    edi,edx
10002143:	eb 02                	jmp    10002147 <performRegionOperation(Region, Region, RegionOperation)+0x414>
10002145:	31 f6                	xor    esi,esi
10002147:	89 f2                	mov    edx,esi
10002149:	21 c2                	and    edx,eax
1000214b:	83 bc 24 cc 20 00 00 01 	cmp    DWORD PTR [esp+0x20cc],0x1
10002153:	74 2f                	je     10002184 <performRegionOperation(Region, Region, RegionOperation)+0x451>
10002155:	89 f2                	mov    edx,esi
10002157:	7f 0c                	jg     10002165 <performRegionOperation(Region, Region, RegionOperation)+0x432>
10002159:	09 c2                	or     edx,eax
1000215b:	83 bc 24 cc 20 00 00 00 	cmp    DWORD PTR [esp+0x20cc],0x0
10002163:	eb 14                	jmp    10002179 <performRegionOperation(Region, Region, RegionOperation)+0x446>
10002165:	83 bc 24 cc 20 00 00 02 	cmp    DWORD PTR [esp+0x20cc],0x2
1000216d:	74 10                	je     1000217f <performRegionOperation(Region, Region, RegionOperation)+0x44c>
1000216f:	31 c2                	xor    edx,eax
10002171:	83 bc 24 cc 20 00 00 03 	cmp    DWORD PTR [esp+0x20cc],0x3
10002179:	74 09                	je     10002184 <performRegionOperation(Region, Region, RegionOperation)+0x451>
1000217b:	88 c2                	mov    dl,al
1000217d:	eb 05                	jmp    10002184 <performRegionOperation(Region, Region, RegionOperation)+0x451>
1000217f:	83 f2 01             	xor    edx,0x1
10002182:	21 c2                	and    edx,eax
10002184:	38 54 24 4d          	cmp    BYTE PTR [esp+0x4d],dl
10002188:	75 09                	jne    10002193 <performRegionOperation(Region, Region, RegionOperation)+0x460>
1000218a:	88 54 24 4d          	mov    BYTE PTR [esp+0x4d],dl
1000218e:	e9 0e fe ff ff       	jmp    10001fa1 <performRegionOperation(Region, Region, RegionOperation)+0x26e>
10002193:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10002197:	39 bc 8c 70 08 00 00 	cmp    DWORD PTR [esp+ecx*4+0x870],edi
1000219e:	74 05                	je     100021a5 <performRegionOperation(Region, Region, RegionOperation)+0x472>
100021a0:	c6 44 24 4e 00       	mov    BYTE PTR [esp+0x4e],0x0
100021a5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
100021a9:	89 7c 8c 70          	mov    DWORD PTR [esp+ecx*4+0x70],edi
100021ad:	41                   	inc    ecx
100021ae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
100021b2:	eb d6                	jmp    1000218a <performRegionOperation(Region, Region, RegionOperation)+0x457>
100021b4:	83 fa ff             	cmp    edx,0xffffffff
100021b7:	74 0a                	je     100021c3 <performRegionOperation(Region, Region, RegionOperation)+0x490>
100021b9:	39 d7                	cmp    edi,edx
100021bb:	0f 8f 79 ff ff ff    	jg     1000213a <performRegionOperation(Region, Region, RegionOperation)+0x407>
100021c1:	eb 02                	jmp    100021c5 <performRegionOperation(Region, Region, RegionOperation)+0x492>
100021c3:	31 f6                	xor    esi,esi
100021c5:	83 f0 01             	xor    eax,0x1
100021c8:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
100021cc:	83 fa ff             	cmp    edx,0xffffffff
100021cf:	0f 84 72 ff ff ff    	je     10002147 <performRegionOperation(Region, Region, RegionOperation)+0x414>
100021d5:	39 d7                	cmp    edi,edx
100021d7:	0f 8d 5d ff ff ff    	jge    1000213a <performRegionOperation(Region, Region, RegionOperation)+0x407>
100021dd:	83 ff ff             	cmp    edi,0xffffffff
100021e0:	0f 85 61 ff ff ff    	jne    10002147 <performRegionOperation(Region, Region, RegionOperation)+0x414>
100021e6:	e9 4f ff ff ff       	jmp    1000213a <performRegionOperation(Region, Region, RegionOperation)+0x407>
100021eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100021ef:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
100021f2:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100021f5:	bb 04 00 00 00       	mov    ebx,0x4
100021fa:	99                   	cdq    
100021fb:	f7 fb                	idiv   ebx
100021fd:	c7 04 81 ff ff ff ff 	mov    DWORD PTR [ecx+eax*4],0xffffffff
10002204:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002207:	83 c0 04             	add    eax,0x4
1000220a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
1000220d:	52                   	push   edx
1000220e:	52                   	push   edx
1000220f:	50                   	push   eax
10002210:	51                   	push   ecx
10002211:	e8 fc ff ff ff       	call   10002212 <performRegionOperation(Region, Region, RegionOperation)+0x4df>	10002212: R_386_PC32	realloc
10002216:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
10002219:	81 c4 8c 20 00 00    	add    esp,0x208c
1000221f:	89 e8                	mov    eax,ebp
10002221:	5b                   	pop    ebx
10002222:	5e                   	pop    esi
10002223:	5f                   	pop    edi
10002224:	5d                   	pop    ebp
10002225:	c2 04 00             	ret    0x4

10002228 <getRegionUnion(Region, Region)>:
10002228:	57                   	push   edi
10002229:	b9 07 00 00 00       	mov    ecx,0x7
1000222e:	56                   	push   esi
1000222f:	53                   	push   ebx
10002230:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002234:	6a 00                	push   0x0
10002236:	83 ec 1c             	sub    esp,0x1c
10002239:	8d 74 24 50          	lea    esi,[esp+0x50]
1000223d:	89 e7                	mov    edi,esp
1000223f:	83 ec 1c             	sub    esp,0x1c
10002242:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002244:	8d 74 24 50          	lea    esi,[esp+0x50]
10002248:	89 e7                	mov    edi,esp
1000224a:	b9 07 00 00 00       	mov    ecx,0x7
1000224f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002251:	53                   	push   ebx
10002252:	e8 fc ff ff ff       	call   10002253 <getRegionUnion(Region, Region)+0x2b>	10002253: R_386_PC32	performRegionOperation(Region, Region, RegionOperation)
10002257:	89 d8                	mov    eax,ebx
10002259:	83 c4 3c             	add    esp,0x3c
1000225c:	5b                   	pop    ebx
1000225d:	5e                   	pop    esi
1000225e:	5f                   	pop    edi
1000225f:	c2 04 00             	ret    0x4

10002262 <getRegionDifference(Region, Region)>:
10002262:	57                   	push   edi
10002263:	b9 07 00 00 00       	mov    ecx,0x7
10002268:	56                   	push   esi
10002269:	53                   	push   ebx
1000226a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000226e:	6a 02                	push   0x2
10002270:	83 ec 1c             	sub    esp,0x1c
10002273:	8d 74 24 50          	lea    esi,[esp+0x50]
10002277:	89 e7                	mov    edi,esp
10002279:	83 ec 1c             	sub    esp,0x1c
1000227c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000227e:	8d 74 24 50          	lea    esi,[esp+0x50]
10002282:	89 e7                	mov    edi,esp
10002284:	b9 07 00 00 00       	mov    ecx,0x7
10002289:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000228b:	53                   	push   ebx
1000228c:	e8 fc ff ff ff       	call   1000228d <getRegionDifference(Region, Region)+0x2b>	1000228d: R_386_PC32	performRegionOperation(Region, Region, RegionOperation)
10002291:	89 d8                	mov    eax,ebx
10002293:	83 c4 3c             	add    esp,0x3c
10002296:	5b                   	pop    ebx
10002297:	5e                   	pop    esi
10002298:	5f                   	pop    edi
10002299:	c2 04 00             	ret    0x4

1000229c <createSlowRoundedRectangleRegion(int, int, int, int, int)>:
1000229c:	55                   	push   ebp
1000229d:	57                   	push   edi
1000229e:	56                   	push   esi
1000229f:	53                   	push   ebx
100022a0:	81 ec 4c 01 00 00    	sub    esp,0x14c
100022a6:	8b 9c 24 64 01 00 00 	mov    ebx,DWORD PTR [esp+0x164]
100022ad:	8b b4 24 68 01 00 00 	mov    esi,DWORD PTR [esp+0x168]
100022b4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
100022b8:	83 ec 0c             	sub    esp,0xc
100022bb:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
100022c2:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
100022c9:	56                   	push   esi
100022ca:	53                   	push   ebx
100022cb:	55                   	push   ebp
100022cc:	e8 fc ff ff ff       	call   100022cd <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x31>	100022cd: R_386_PC32	createRectangleRegion(int, int, int, int)
100022d1:	ff b4 24 90 01 00 00 	push   DWORD PTR [esp+0x190]
100022d8:	ff b4 24 94 01 00 00 	push   DWORD PTR [esp+0x194]
100022df:	56                   	push   esi
100022e0:	53                   	push   ebx
100022e1:	8d 44 24 70          	lea    eax,[esp+0x70]
100022e5:	50                   	push   eax
100022e6:	e8 fc ff ff ff       	call   100022e7 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x4b>	100022e7: R_386_PC32	createRectangleRegion(int, int, int, int)
100022eb:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100022f2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100022f6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
100022fd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10002301:	8b 84 24 a0 01 00 00 	mov    eax,DWORD PTR [esp+0x1a0]
10002308:	83 c4 20             	add    esp,0x20
1000230b:	01 c0                	add    eax,eax
1000230d:	50                   	push   eax
1000230e:	50                   	push   eax
1000230f:	56                   	push   esi
10002310:	53                   	push   ebx
10002311:	8d 44 24 7c          	lea    eax,[esp+0x7c]
10002315:	50                   	push   eax
10002316:	e8 fc ff ff ff       	call   10002317 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x7b>	10002317: R_386_PC32	createEllipseRegion(int, int, int, int)
1000231b:	b9 07 00 00 00       	mov    ecx,0x7
10002320:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
10002327:	8d 9c 24 98 00 00 00 	lea    ebx,[esp+0x98]
1000232e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002332:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
10002339:	83 ec 14             	sub    esp,0x14
1000233c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002340:	89 e7                	mov    edi,esp
10002342:	8d 74 24 74          	lea    esi,[esp+0x74]
10002346:	83 ec 1c             	sub    esp,0x1c
10002349:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000234b:	89 e7                	mov    edi,esp
1000234d:	89 ee                	mov    esi,ebp
1000234f:	b9 07 00 00 00       	mov    ecx,0x7
10002354:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002356:	53                   	push   ebx
10002357:	e8 fc ff ff ff       	call   10002358 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0xbc>	10002358: R_386_PC32	getRegionDifference(Region, Region)
1000235c:	b9 07 00 00 00       	mov    ecx,0x7
10002361:	8b 94 24 b8 01 00 00 	mov    edx,DWORD PTR [esp+0x1b8]
10002368:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
1000236c:	2b 94 24 c0 01 00 00 	sub    edx,DWORD PTR [esp+0x1c0]
10002373:	8d ac 24 e4 00 00 00 	lea    ebp,[esp+0xe4]
1000237a:	01 d0                	add    eax,edx
1000237c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
10002380:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
10002387:	83 c4 2c             	add    esp,0x2c
1000238a:	89 e7                	mov    edi,esp
1000238c:	8d 74 24 64          	lea    esi,[esp+0x64]
10002390:	83 ec 1c             	sub    esp,0x1c
10002393:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002395:	89 e7                	mov    edi,esp
10002397:	89 de                	mov    esi,ebx
10002399:	b9 07 00 00 00       	mov    ecx,0x7
1000239e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100023a0:	55                   	push   ebp
100023a1:	e8 fc ff ff ff       	call   100023a2 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x106>	100023a2: R_386_PC32	getRegionDifference(Region, Region)
100023a6:	b9 07 00 00 00       	mov    ecx,0x7
100023ab:	8b 84 24 ac 01 00 00 	mov    eax,DWORD PTR [esp+0x1ac]
100023b2:	8d 9c 24 f0 00 00 00 	lea    ebx,[esp+0xf0]
100023b9:	2b 84 24 b0 01 00 00 	sub    eax,DWORD PTR [esp+0x1b0]
100023c0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100023c4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
100023c8:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
100023cc:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
100023d3:	83 c4 1c             	add    esp,0x1c
100023d6:	89 e7                	mov    edi,esp
100023d8:	8d 74 24 64          	lea    esi,[esp+0x64]
100023dc:	83 ec 1c             	sub    esp,0x1c
100023df:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100023e1:	89 e7                	mov    edi,esp
100023e3:	89 ee                	mov    esi,ebp
100023e5:	b9 07 00 00 00       	mov    ecx,0x7
100023ea:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100023ec:	53                   	push   ebx
100023ed:	e8 fc ff ff ff       	call   100023ee <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x152>	100023ee: R_386_PC32	getRegionDifference(Region, Region)
100023f2:	b9 07 00 00 00       	mov    ecx,0x7
100023f7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100023fb:	89 84 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],eax
10002402:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
10002409:	83 c4 1c             	add    esp,0x1c
1000240c:	89 e7                	mov    edi,esp
1000240e:	8d 74 24 64          	lea    esi,[esp+0x64]
10002412:	83 ec 1c             	sub    esp,0x1c
10002415:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002417:	89 e7                	mov    edi,esp
10002419:	89 de                	mov    esi,ebx
1000241b:	b9 07 00 00 00       	mov    ecx,0x7
10002420:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002422:	50                   	push   eax
10002423:	e8 fc ff ff ff       	call   10002424 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x188>	10002424: R_386_PC32	getRegionDifference(Region, Region)
10002428:	b9 07 00 00 00       	mov    ecx,0x7
1000242d:	8d ac 24 28 01 00 00 	lea    ebp,[esp+0x128]
10002434:	83 c4 1c             	add    esp,0x1c
10002437:	89 e7                	mov    edi,esp
10002439:	8d b4 24 80 00 00 00 	lea    esi,[esp+0x80]
10002440:	83 ec 1c             	sub    esp,0x1c
10002443:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002445:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
1000244c:	89 e7                	mov    edi,esp
1000244e:	89 c6                	mov    esi,eax
10002450:	b9 07 00 00 00       	mov    ecx,0x7
10002455:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002457:	55                   	push   ebp
10002458:	e8 fc ff ff ff       	call   10002459 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x1bd>	10002459: R_386_PC32	getRegionUnion(Region, Region)
1000245d:	b9 07 00 00 00       	mov    ecx,0x7
10002462:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
10002466:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
1000246d:	2b 94 24 b0 01 00 00 	sub    edx,DWORD PTR [esp+0x1b0]
10002474:	03 54 24 4c          	add    edx,DWORD PTR [esp+0x4c]
10002478:	89 94 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],edx
1000247f:	83 c4 1c             	add    esp,0x1c
10002482:	89 e7                	mov    edi,esp
10002484:	8d b4 24 80 00 00 00 	lea    esi,[esp+0x80]
1000248b:	83 ec 1c             	sub    esp,0x1c
1000248e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002490:	89 e7                	mov    edi,esp
10002492:	89 ee                	mov    esi,ebp
10002494:	b9 07 00 00 00       	mov    ecx,0x7
10002499:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000249b:	53                   	push   ebx
1000249c:	e8 fc ff ff ff       	call   1000249d <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x201>	1000249d: R_386_PC32	getRegionUnion(Region, Region)
100024a1:	b9 07 00 00 00       	mov    ecx,0x7
100024a6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100024aa:	8d ac 24 60 01 00 00 	lea    ebp,[esp+0x160]
100024b1:	2b 84 24 b0 01 00 00 	sub    eax,DWORD PTR [esp+0x1b0]
100024b8:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
100024bc:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
100024c3:	83 c4 1c             	add    esp,0x1c
100024c6:	89 e7                	mov    edi,esp
100024c8:	8d b4 24 80 00 00 00 	lea    esi,[esp+0x80]
100024cf:	83 ec 1c             	sub    esp,0x1c
100024d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100024d4:	89 e7                	mov    edi,esp
100024d6:	89 de                	mov    esi,ebx
100024d8:	b9 07 00 00 00       	mov    ecx,0x7
100024dd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100024df:	55                   	push   ebp
100024e0:	e8 fc ff ff ff       	call   100024e1 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x245>	100024e1: R_386_PC32	getRegionUnion(Region, Region)
100024e5:	b9 07 00 00 00       	mov    ecx,0x7
100024ea:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
100024ee:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
100024f5:	83 c4 1c             	add    esp,0x1c
100024f8:	89 e7                	mov    edi,esp
100024fa:	8d b4 24 80 00 00 00 	lea    esi,[esp+0x80]
10002501:	83 ec 1c             	sub    esp,0x1c
10002504:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002506:	89 e7                	mov    edi,esp
10002508:	89 ee                	mov    esi,ebp
1000250a:	b9 07 00 00 00       	mov    ecx,0x7
1000250f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002511:	ff b4 24 9c 01 00 00 	push   DWORD PTR [esp+0x19c]
10002518:	e8 fc ff ff ff       	call   10002519 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x27d>	10002519: R_386_PC32	getRegionUnion(Region, Region)
1000251d:	83 c4 30             	add    esp,0x30
10002520:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
10002524:	e8 fc ff ff ff       	call   10002525 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x289>	10002525: R_386_PC32	free
10002529:	58                   	pop    eax
1000252a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
1000252e:	e8 fc ff ff ff       	call   1000252f <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x293>	1000252f: R_386_PC32	free
10002533:	5a                   	pop    edx
10002534:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
10002538:	e8 fc ff ff ff       	call   10002539 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x29d>	10002539: R_386_PC32	free
1000253d:	59                   	pop    ecx
1000253e:	ff b4 24 88 00 00 00 	push   DWORD PTR [esp+0x88]
10002545:	e8 fc ff ff ff       	call   10002546 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2aa>	10002546: R_386_PC32	free
1000254a:	5b                   	pop    ebx
1000254b:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
10002552:	e8 fc ff ff ff       	call   10002553 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2b7>	10002553: R_386_PC32	free
10002557:	5e                   	pop    esi
10002558:	ff b4 24 c0 00 00 00 	push   DWORD PTR [esp+0xc0]
1000255f:	e8 fc ff ff ff       	call   10002560 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2c4>	10002560: R_386_PC32	free
10002564:	5f                   	pop    edi
10002565:	ff b4 24 dc 00 00 00 	push   DWORD PTR [esp+0xdc]
1000256c:	e8 fc ff ff ff       	call   1000256d <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2d1>	1000256d: R_386_PC32	free
10002571:	5d                   	pop    ebp
10002572:	ff b4 24 f8 00 00 00 	push   DWORD PTR [esp+0xf8]
10002579:	e8 fc ff ff ff       	call   1000257a <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2de>	1000257a: R_386_PC32	free
1000257e:	58                   	pop    eax
1000257f:	ff b4 24 14 01 00 00 	push   DWORD PTR [esp+0x114]
10002586:	e8 fc ff ff ff       	call   10002587 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2eb>	10002587: R_386_PC32	free
1000258b:	58                   	pop    eax
1000258c:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
10002593:	e8 fc ff ff ff       	call   10002594 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2f8>	10002594: R_386_PC32	free
10002598:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
1000259f:	81 c4 5c 01 00 00    	add    esp,0x15c
100025a5:	5b                   	pop    ebx
100025a6:	5e                   	pop    esi
100025a7:	5f                   	pop    edi
100025a8:	5d                   	pop    ebp
100025a9:	c2 04 00             	ret    0x4

100025ac <getRegionIntersection(Region, Region)>:
100025ac:	57                   	push   edi
100025ad:	b9 07 00 00 00       	mov    ecx,0x7
100025b2:	56                   	push   esi
100025b3:	53                   	push   ebx
100025b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100025b8:	6a 01                	push   0x1
100025ba:	83 ec 1c             	sub    esp,0x1c
100025bd:	8d 74 24 50          	lea    esi,[esp+0x50]
100025c1:	89 e7                	mov    edi,esp
100025c3:	83 ec 1c             	sub    esp,0x1c
100025c6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100025c8:	8d 74 24 50          	lea    esi,[esp+0x50]
100025cc:	89 e7                	mov    edi,esp
100025ce:	b9 07 00 00 00       	mov    ecx,0x7
100025d3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100025d5:	53                   	push   ebx
100025d6:	e8 fc ff ff ff       	call   100025d7 <getRegionIntersection(Region, Region)+0x2b>	100025d7: R_386_PC32	performRegionOperation(Region, Region, RegionOperation)
100025db:	89 d8                	mov    eax,ebx
100025dd:	83 c4 3c             	add    esp,0x3c
100025e0:	5b                   	pop    ebx
100025e1:	5e                   	pop    esi
100025e2:	5f                   	pop    edi
100025e3:	c2 04 00             	ret    0x4

100025e6 <getRegionXOR(Region, Region)>:
100025e6:	57                   	push   edi
100025e7:	b9 07 00 00 00       	mov    ecx,0x7
100025ec:	56                   	push   esi
100025ed:	53                   	push   ebx
100025ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100025f2:	6a 03                	push   0x3
100025f4:	83 ec 1c             	sub    esp,0x1c
100025f7:	8d 74 24 50          	lea    esi,[esp+0x50]
100025fb:	89 e7                	mov    edi,esp
100025fd:	83 ec 1c             	sub    esp,0x1c
10002600:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002602:	8d 74 24 50          	lea    esi,[esp+0x50]
10002606:	89 e7                	mov    edi,esp
10002608:	b9 07 00 00 00       	mov    ecx,0x7
1000260d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000260f:	53                   	push   ebx
10002610:	e8 fc ff ff ff       	call   10002611 <getRegionXOR(Region, Region)+0x2b>	10002611: R_386_PC32	performRegionOperation(Region, Region, RegionOperation)
10002615:	89 d8                	mov    eax,ebx
10002617:	83 c4 3c             	add    esp,0x3c
1000261a:	5b                   	pop    ebx
1000261b:	5e                   	pop    esi
1000261c:	5f                   	pop    edi
1000261d:	c2 04 00             	ret    0x4

10002620 <isPointInRegion(Region, int, int)>:
10002620:	55                   	push   ebp
10002621:	31 c9                	xor    ecx,ecx
10002623:	57                   	push   edi
10002624:	31 ff                	xor    edi,edi
10002626:	56                   	push   esi
10002627:	53                   	push   ebx
10002628:	83 ec 20             	sub    esp,0x20
1000262b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000262f:	89 04 24             	mov    DWORD PTR [esp],eax
10002632:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002636:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000263a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000263e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002642:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10002646:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000264a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000264e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002652:	39 4c 24 14          	cmp    DWORD PTR [esp+0x14],ecx
10002656:	0f 8e 9f 00 00 00    	jle    100026fb <isPointInRegion(Region, int, int)+0xdb>
1000265c:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
1000265f:	8d 47 01             	lea    eax,[edi+0x1]
10002662:	8b 34 bb             	mov    esi,DWORD PTR [ebx+edi*4]
10002665:	8d 14 bd 00 00 00 00 	lea    edx,[edi*4+0x0]
1000266c:	83 fe ff             	cmp    esi,0xffffffff
1000266f:	0f 84 86 00 00 00    	je     100026fb <isPointInRegion(Region, int, int)+0xdb>
10002675:	0f b7 de             	movzx  ebx,si
10002678:	8b 3c 24             	mov    edi,DWORD PTR [esp]
1000267b:	c1 ee 10             	shr    esi,0x10
1000267e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
10002682:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
10002686:	01 cd                	add    ebp,ecx
10002688:	8d 74 17 04          	lea    esi,[edi+edx*1+0x4]
1000268c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
10002690:	8d 3c 18             	lea    edi,[eax+ebx*1]
10002693:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
10002697:	31 d2                	xor    edx,edx
10002699:	31 c0                	xor    eax,eax
1000269b:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
1000269f:	39 54 24 18          	cmp    DWORD PTR [esp+0x18],edx
100026a3:	7e 41                	jle    100026e6 <isPointInRegion(Region, int, int)+0xc6>
100026a5:	39 16                	cmp    DWORD PTR [esi],edx
100026a7:	75 07                	jne    100026b0 <isPointInRegion(Region, int, int)+0x90>
100026a9:	83 c6 04             	add    esi,0x4
100026ac:	83 f0 01             	xor    eax,0x1
100026af:	4b                   	dec    ebx
100026b0:	84 c0                	test   al,al
100026b2:	74 2e                	je     100026e2 <isPointInRegion(Region, int, int)+0xc2>
100026b4:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
100026b8:	3b 6c 24 54          	cmp    ebp,DWORD PTR [esp+0x54]
100026bc:	7f 41                	jg     100026ff <isPointInRegion(Region, int, int)+0xdf>
100026be:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
100026c2:	3b 6c 24 54          	cmp    ebp,DWORD PTR [esp+0x54]
100026c6:	7e 37                	jle    100026ff <isPointInRegion(Region, int, int)+0xdf>
100026c8:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
100026cc:	01 d5                	add    ebp,edx
100026ce:	3b 6c 24 50          	cmp    ebp,DWORD PTR [esp+0x50]
100026d2:	7f 2b                	jg     100026ff <isPointInRegion(Region, int, int)+0xdf>
100026d4:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
100026d8:	03 2e                	add    ebp,DWORD PTR [esi]
100026da:	3b 6c 24 50          	cmp    ebp,DWORD PTR [esp+0x50]
100026de:	76 1f                	jbe    100026ff <isPointInRegion(Region, int, int)+0xdf>
100026e0:	eb 26                	jmp    10002708 <isPointInRegion(Region, int, int)+0xe8>
100026e2:	85 db                	test   ebx,ebx
100026e4:	75 1e                	jne    10002704 <isPointInRegion(Region, int, int)+0xe4>
100026e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100026ea:	01 c8                	add    eax,ecx
100026ec:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
100026f0:	74 09                	je     100026fb <isPointInRegion(Region, int, int)+0xdb>
100026f2:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
100026f6:	e9 57 ff ff ff       	jmp    10002652 <isPointInRegion(Region, int, int)+0x32>
100026fb:	31 c0                	xor    eax,eax
100026fd:	eb 09                	jmp    10002708 <isPointInRegion(Region, int, int)+0xe8>
100026ff:	42                   	inc    edx
10002700:	85 db                	test   ebx,ebx
10002702:	74 9b                	je     1000269f <isPointInRegion(Region, int, int)+0x7f>
10002704:	8b 16                	mov    edx,DWORD PTR [esi]
10002706:	eb 97                	jmp    1000269f <isPointInRegion(Region, int, int)+0x7f>
10002708:	83 c4 20             	add    esp,0x20
1000270b:	5b                   	pop    ebx
1000270c:	5e                   	pop    esi
1000270d:	5f                   	pop    edi
1000270e:	5d                   	pop    ebp
1000270f:	c3                   	ret    

10002710 <ssfn_utf8>:
10002710:	56                   	push   esi
10002711:	53                   	push   ebx
10002712:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10002716:	8b 11                	mov    edx,DWORD PTR [ecx]
10002718:	0f b6 32             	movzx  esi,BYTE PTR [edx]
1000271b:	89 f0                	mov    eax,esi
1000271d:	84 c0                	test   al,al
1000271f:	0f be d8             	movsx  ebx,al
10002722:	78 04                	js     10002728 <ssfn_utf8+0x18>
10002724:	89 d8                	mov    eax,ebx
10002726:	eb 7d                	jmp    100027a5 <ssfn_utf8+0x95>
10002728:	f7 c6 20 00 00 00    	test   esi,0x20
1000272e:	75 14                	jne    10002744 <ssfn_utf8+0x34>
10002730:	8a 42 01             	mov    al,BYTE PTR [edx+0x1]
10002733:	c1 e3 06             	shl    ebx,0x6
10002736:	83 e0 3f             	and    eax,0x3f
10002739:	81 e3 c0 07 00 00    	and    ebx,0x7c0
1000273f:	42                   	inc    edx
10002740:	09 d8                	or     eax,ebx
10002742:	eb 5f                	jmp    100027a3 <ssfn_utf8+0x93>
10002744:	f7 c6 10 00 00 00    	test   esi,0x10
1000274a:	75 20                	jne    1000276c <ssfn_utf8+0x5c>
1000274c:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
10002750:	c1 e3 0c             	shl    ebx,0xc
10002753:	c1 e0 06             	shl    eax,0x6
10002756:	0f b7 db             	movzx  ebx,bx
10002759:	25 c0 0f 00 00       	and    eax,0xfc0
1000275e:	83 c2 02             	add    edx,0x2
10002761:	09 d8                	or     eax,ebx
10002763:	8a 1a                	mov    bl,BYTE PTR [edx]
10002765:	83 e3 3f             	and    ebx,0x3f
10002768:	09 d8                	or     eax,ebx
1000276a:	eb 37                	jmp    100027a3 <ssfn_utf8+0x93>
1000276c:	31 c0                	xor    eax,eax
1000276e:	83 e6 08             	and    esi,0x8
10002771:	75 32                	jne    100027a5 <ssfn_utf8+0x95>
10002773:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
10002777:	c1 e3 12             	shl    ebx,0x12
1000277a:	c1 e0 0c             	shl    eax,0xc
1000277d:	81 e3 00 00 1c 00    	and    ebx,0x1c0000
10002783:	25 00 f0 03 00       	and    eax,0x3f000
10002788:	83 c2 03             	add    edx,0x3
1000278b:	09 d8                	or     eax,ebx
1000278d:	8a 1a                	mov    bl,BYTE PTR [edx]
1000278f:	83 e3 3f             	and    ebx,0x3f
10002792:	09 d8                	or     eax,ebx
10002794:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
10002798:	c1 e3 06             	shl    ebx,0x6
1000279b:	81 e3 c0 0f 00 00    	and    ebx,0xfc0
100027a1:	09 d8                	or     eax,ebx
100027a3:	89 11                	mov    DWORD PTR [ecx],edx
100027a5:	ff 01                	inc    DWORD PTR [ecx]
100027a7:	5b                   	pop    ebx
100027a8:	5e                   	pop    esi
100027a9:	c3                   	ret    

100027aa <_ssfn_c>:
100027aa:	55                   	push   ebp
100027ab:	57                   	push   edi
100027ac:	56                   	push   esi
100027ad:	53                   	push   ebx
100027ae:	51                   	push   ecx
100027af:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
100027b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100027b7:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
100027bd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
100027c1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
100027c5:	85 c0                	test   eax,eax
100027c7:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
100027cd:	0f 84 63 01 00 00    	je     10002936 <_ssfn_c+0x18c>
100027d3:	83 78 10 00          	cmp    DWORD PTR [eax+0x10],0x0
100027d7:	0f 84 59 01 00 00    	je     10002936 <_ssfn_c+0x18c>
100027dd:	85 c9                	test   ecx,ecx
100027df:	0f 84 51 01 00 00    	je     10002936 <_ssfn_c+0x18c>
100027e5:	8a 11                	mov    dl,BYTE PTR [ecx]
100027e7:	84 d2                	test   dl,dl
100027e9:	0f 84 47 01 00 00    	je     10002936 <_ssfn_c+0x18c>
100027ef:	8b 68 14             	mov    ebp,DWORD PTR [eax+0x14]
100027f2:	85 ed                	test   ebp,ebp
100027f4:	74 34                	je     1000282a <_ssfn_c+0x80>
100027f6:	8d 74 05 00          	lea    esi,[ebp+eax*1+0x0]
100027fa:	31 ff                	xor    edi,edi
100027fc:	89 34 24             	mov    DWORD PTR [esp],esi
100027ff:	8b 34 24             	mov    esi,DWORD PTR [esp]
10002802:	0f b7 34 7e          	movzx  esi,WORD PTR [esi+edi*2]
10002806:	66 85 f6             	test   si,si
10002809:	74 1f                	je     1000282a <_ssfn_c+0x80>
1000280b:	01 c6                	add    esi,eax
1000280d:	89 cd                	mov    ebp,ecx
1000280f:	8a 1e                	mov    bl,BYTE PTR [esi]
10002811:	84 db                	test   bl,bl
10002813:	0f 84 27 01 00 00    	je     10002940 <_ssfn_c+0x196>
10002819:	3a 5d 00             	cmp    bl,BYTE PTR [ebp+0x0]
1000281c:	0f 85 18 01 00 00    	jne    1000293a <_ssfn_c+0x190>
10002822:	89 eb                	mov    ebx,ebp
10002824:	46                   	inc    esi
10002825:	43                   	inc    ebx
10002826:	89 dd                	mov    ebp,ebx
10002828:	eb e5                	jmp    1000280f <_ssfn_c+0x65>
1000282a:	84 d2                	test   dl,dl
1000282c:	0f b6 da             	movzx  ebx,dl
1000282f:	78 09                	js     1000283a <_ssfn_c+0x90>
10002831:	89 da                	mov    edx,ebx
10002833:	89 cb                	mov    ebx,ecx
10002835:	e9 83 00 00 00       	jmp    100028bd <_ssfn_c+0x113>
1000283a:	f6 c2 20             	test   dl,0x20
1000283d:	75 16                	jne    10002855 <_ssfn_c+0xab>
1000283f:	c1 e3 06             	shl    ebx,0x6
10002842:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
10002845:	81 e3 c0 07 00 00    	and    ebx,0x7c0
1000284b:	83 e2 3f             	and    edx,0x3f
1000284e:	09 da                	or     edx,ebx
10002850:	8d 59 01             	lea    ebx,[ecx+0x1]
10002853:	eb 68                	jmp    100028bd <_ssfn_c+0x113>
10002855:	f6 c2 10             	test   dl,0x10
10002858:	75 23                	jne    1000287d <_ssfn_c+0xd3>
1000285a:	c1 e3 0c             	shl    ebx,0xc
1000285d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
10002861:	0f b6 71 02          	movzx  esi,BYTE PTR [ecx+0x2]
10002865:	c1 e2 06             	shl    edx,0x6
10002868:	83 e6 3f             	and    esi,0x3f
1000286b:	81 e2 c0 0f 00 00    	and    edx,0xfc0
10002871:	09 d6                	or     esi,edx
10002873:	0f b7 d3             	movzx  edx,bx
10002876:	8d 59 02             	lea    ebx,[ecx+0x2]
10002879:	09 f2                	or     edx,esi
1000287b:	eb 40                	jmp    100028bd <_ssfn_c+0x113>
1000287d:	80 e2 08             	and    dl,0x8
10002880:	75 37                	jne    100028b9 <_ssfn_c+0x10f>
10002882:	c1 e3 12             	shl    ebx,0x12
10002885:	0f b6 71 01          	movzx  esi,BYTE PTR [ecx+0x1]
10002889:	0f b6 51 02          	movzx  edx,BYTE PTR [ecx+0x2]
1000288d:	c1 e6 0c             	shl    esi,0xc
10002890:	c1 e2 06             	shl    edx,0x6
10002893:	81 e6 00 f0 03 00    	and    esi,0x3f000
10002899:	81 e2 c0 0f 00 00    	and    edx,0xfc0
1000289f:	09 f2                	or     edx,esi
100028a1:	0f b6 71 03          	movzx  esi,BYTE PTR [ecx+0x3]
100028a5:	83 e6 3f             	and    esi,0x3f
100028a8:	09 d6                	or     esi,edx
100028aa:	89 da                	mov    edx,ebx
100028ac:	8d 59 03             	lea    ebx,[ecx+0x3]
100028af:	81 e2 00 00 1c 00    	and    edx,0x1c0000
100028b5:	09 f2                	or     edx,esi
100028b7:	eb 04                	jmp    100028bd <_ssfn_c+0x113>
100028b9:	89 cb                	mov    ebx,ecx
100028bb:	31 d2                	xor    edx,edx
100028bd:	8d 7b 01             	lea    edi,[ebx+0x1]
100028c0:	89 fd                	mov    ebp,edi
100028c2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
100028c6:	89 eb                	mov    ebx,ebp
100028c8:	31 f6                	xor    esi,esi
100028ca:	29 cb                	sub    ebx,ecx
100028cc:	89 1f                	mov    DWORD PTR [edi],ebx
100028ce:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
100028d2:	89 17                	mov    DWORD PTR [edi],edx
100028d4:	03 40 10             	add    eax,DWORD PTR [eax+0x10]
100028d7:	8a 08                	mov    cl,BYTE PTR [eax]
100028d9:	80 f9 ff             	cmp    cl,0xff
100028dc:	75 08                	jne    100028e6 <_ssfn_c+0x13c>
100028de:	81 c6 ff ff 00 00    	add    esi,0xffff
100028e4:	eb 2a                	jmp    10002910 <_ssfn_c+0x166>
100028e6:	88 cb                	mov    bl,cl
100028e8:	83 e3 c0             	and    ebx,0xffffffc0
100028eb:	80 fb c0             	cmp    bl,0xc0
100028ee:	75 16                	jne    10002906 <_ssfn_c+0x15c>
100028f0:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
100028f4:	c1 e1 08             	shl    ecx,0x8
100028f7:	83 c0 02             	add    eax,0x2
100028fa:	81 e1 00 3f 00 00    	and    ecx,0x3f00
10002900:	09 d9                	or     ecx,ebx
10002902:	01 ce                	add    esi,ecx
10002904:	eb 27                	jmp    1000292d <_ssfn_c+0x183>
10002906:	80 fb 80             	cmp    bl,0x80
10002909:	75 08                	jne    10002913 <_ssfn_c+0x169>
1000290b:	83 e1 3f             	and    ecx,0x3f
1000290e:	01 ce                	add    esi,ecx
10002910:	40                   	inc    eax
10002911:	eb 1a                	jmp    1000292d <_ssfn_c+0x183>
10002913:	39 f2                	cmp    edx,esi
10002915:	74 34                	je     1000294b <_ssfn_c+0x1a1>
10002917:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
1000291b:	83 e1 40             	and    ecx,0x40
1000291e:	80 f9 01             	cmp    cl,0x1
10002921:	19 c9                	sbb    ecx,ecx
10002923:	83 c1 06             	add    ecx,0x6
10002926:	0f af cb             	imul   ecx,ebx
10002929:	8d 44 08 06          	lea    eax,[eax+ecx*1+0x6]
1000292d:	46                   	inc    esi
1000292e:	81 fe ff ff 10 00    	cmp    esi,0x10ffff
10002934:	76 a1                	jbe    100028d7 <_ssfn_c+0x12d>
10002936:	31 c0                	xor    eax,eax
10002938:	eb 11                	jmp    1000294b <_ssfn_c+0x1a1>
1000293a:	47                   	inc    edi
1000293b:	e9 bf fe ff ff       	jmp    100027ff <_ssfn_c+0x55>
10002940:	8d 97 00 f0 00 00    	lea    edx,[edi+0xf000]
10002946:	e9 77 ff ff ff       	jmp    100028c2 <_ssfn_c+0x118>
1000294b:	5a                   	pop    edx
1000294c:	5b                   	pop    ebx
1000294d:	5e                   	pop    esi
1000294e:	5f                   	pop    edi
1000294f:	5d                   	pop    ebp
10002950:	c3                   	ret    

10002951 <_ssfn_l>:
10002951:	57                   	push   edi
10002952:	56                   	push   esi
10002953:	53                   	push   ebx
10002954:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10002958:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
1000295c:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
10002960:	89 f2                	mov    edx,esi
10002962:	0f 9d c0             	setge  al
10002965:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002969:	c1 ea 1f             	shr    edx,0x1f
1000296c:	09 d0                	or     eax,edx
1000296e:	89 fa                	mov    edx,edi
10002970:	c1 ea 1f             	shr    edx,0x1f
10002973:	08 d0                	or     al,dl
10002975:	0f 85 e9 00 00 00    	jne    10002a64 <_ssfn_l+0x113>
1000297b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
1000297f:	0f 8d df 00 00 00    	jge    10002a64 <_ssfn_l+0x113>
10002985:	8b 83 9c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf59c]
1000298b:	8d 57 08             	lea    edx,[edi+0x8]
1000298e:	83 c0 08             	add    eax,0x8
10002991:	c1 fa 04             	sar    edx,0x4
10002994:	c1 f8 04             	sar    eax,0x4
10002997:	39 d0                	cmp    eax,edx
10002999:	75 1a                	jne    100029b5 <_ssfn_l+0x64>
1000299b:	8b 83 a0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a0]
100029a1:	8d 56 08             	lea    edx,[esi+0x8]
100029a4:	83 c0 08             	add    eax,0x8
100029a7:	c1 fa 04             	sar    edx,0x4
100029aa:	c1 f8 04             	sar    eax,0x4
100029ad:	39 d0                	cmp    eax,edx
100029af:	0f 84 af 00 00 00    	je     10002a64 <_ssfn_l+0x113>
100029b5:	8b 83 80 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf580]
100029bb:	39 83 84 f5 00 00    	cmp    DWORD PTR [ebx+0xf584],eax
100029c1:	7f 3e                	jg     10002a01 <_ssfn_l+0xb0>
100029c3:	05 00 02 00 00       	add    eax,0x200
100029c8:	89 83 84 f5 00 00    	mov    DWORD PTR [ebx+0xf584],eax
100029ce:	52                   	push   edx
100029cf:	01 c0                	add    eax,eax
100029d1:	52                   	push   edx
100029d2:	50                   	push   eax
100029d3:	ff b3 6c f5 00 00    	push   DWORD PTR [ebx+0xf56c]
100029d9:	e8 fc ff ff ff       	call   100029da <_ssfn_l+0x89>	100029da: R_386_PC32	realloc
100029de:	83 c4 10             	add    esp,0x10
100029e1:	89 83 6c f5 00 00    	mov    DWORD PTR [ebx+0xf56c],eax
100029e7:	85 c0                	test   eax,eax
100029e9:	75 16                	jne    10002a01 <_ssfn_l+0xb0>
100029eb:	c7 83 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf580],0x0
100029f5:	c7 83 84 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf584],0x0
100029ff:	eb 63                	jmp    10002a64 <_ssfn_l+0x113>
10002a01:	83 bb 80 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf580],0x0
10002a08:	75 26                	jne    10002a30 <_ssfn_l+0xdf>
10002a0a:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10002a10:	8b 93 94 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf594]
10002a16:	66 89 10             	mov    WORD PTR [eax],dx
10002a19:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10002a1f:	8b 93 98 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf598]
10002a25:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
10002a29:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10002a30:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10002a36:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10002a3c:	66 89 3c 50          	mov    WORD PTR [eax+edx*2],di
10002a40:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10002a46:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10002a4c:	66 89 74 50 02       	mov    WORD PTR [eax+edx*2+0x2],si
10002a51:	89 bb 9c f5 00 00    	mov    DWORD PTR [ebx+0xf59c],edi
10002a57:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10002a5e:	89 b3 a0 f5 00 00    	mov    DWORD PTR [ebx+0xf5a0],esi
10002a64:	5b                   	pop    ebx
10002a65:	5e                   	pop    esi
10002a66:	5f                   	pop    edi
10002a67:	c3                   	ret    

10002a68 <_ssfn_b>:
10002a68:	55                   	push   ebp
10002a69:	57                   	push   edi
10002a6a:	56                   	push   esi
10002a6b:	53                   	push   ebx
10002a6c:	83 ec 4c             	sub    esp,0x4c
10002a6f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002a73:	8b 6c 24 74          	mov    ebp,DWORD PTR [esp+0x74]
10002a77:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002a7b:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
10002a7f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002a83:	8b 5c 24 7c          	mov    ebx,DWORD PTR [esp+0x7c]
10002a87:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002a8b:	8b 8c 24 80 00 00 00 	mov    ecx,DWORD PTR [esp+0x80]
10002a92:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10002a96:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10002a9a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
10002a9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10002aa2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10002aa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10002aaa:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
10002ab1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002ab5:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
10002abc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002ac0:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
10002ac7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10002acb:	83 f8 03             	cmp    eax,0x3
10002ace:	7e 34                	jle    10002b04 <_ssfn_b+0x9c>
10002ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002ad4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002ad8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002adc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10002ae0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10002ae4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
10002ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002aec:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
10002af0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10002af4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
10002af8:	83 c4 4c             	add    esp,0x4c
10002afb:	5b                   	pop    ebx
10002afc:	5e                   	pop    esi
10002afd:	5f                   	pop    edi
10002afe:	5d                   	pop    ebp
10002aff:	e9 4d fe ff ff       	jmp    10002951 <_ssfn_l>
10002b04:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10002b08:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10002b0c:	75 0e                	jne    10002b1c <_ssfn_b+0xb4>
10002b0e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10002b12:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
10002b16:	0f 84 12 01 00 00    	je     10002c2e <_ssfn_b+0x1c6>
10002b1c:	bf 02 00 00 00       	mov    edi,0x2
10002b21:	89 e8                	mov    eax,ebp
10002b23:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
10002b27:	99                   	cdq    
10002b28:	f7 ff                	idiv   edi
10002b2a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
10002b2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002b32:	89 f0                	mov    eax,esi
10002b34:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
10002b38:	99                   	cdq    
10002b39:	f7 ff                	idiv   edi
10002b3b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
10002b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002b43:	89 d8                	mov    eax,ebx
10002b45:	29 e8                	sub    eax,ebp
10002b47:	99                   	cdq    
10002b48:	f7 ff                	idiv   edi
10002b4a:	01 c5                	add    ebp,eax
10002b4c:	89 c8                	mov    eax,ecx
10002b4e:	29 f0                	sub    eax,esi
10002b50:	99                   	cdq    
10002b51:	f7 ff                	idiv   edi
10002b53:	01 c6                	add    esi,eax
10002b55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002b59:	29 d8                	sub    eax,ebx
10002b5b:	99                   	cdq    
10002b5c:	f7 ff                	idiv   edi
10002b5e:	01 d8                	add    eax,ebx
10002b60:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002b64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002b6c:	29 c8                	sub    eax,ecx
10002b6e:	99                   	cdq    
10002b6f:	f7 ff                	idiv   edi
10002b71:	01 c8                	add    eax,ecx
10002b73:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002b77:	89 e8                	mov    eax,ebp
10002b79:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
10002b7d:	99                   	cdq    
10002b7e:	f7 ff                	idiv   edi
10002b80:	8d 0c 18             	lea    ecx,[eax+ebx*1]
10002b83:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10002b87:	89 f0                	mov    eax,esi
10002b89:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
10002b8d:	99                   	cdq    
10002b8e:	f7 ff                	idiv   edi
10002b90:	01 c3                	add    ebx,eax
10002b92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002b96:	29 e8                	sub    eax,ebp
10002b98:	99                   	cdq    
10002b99:	f7 ff                	idiv   edi
10002b9b:	01 e8                	add    eax,ebp
10002b9d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10002ba1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002ba5:	29 f0                	sub    eax,esi
10002ba7:	99                   	cdq    
10002ba8:	f7 ff                	idiv   edi
10002baa:	8d 2c 30             	lea    ebp,[eax+esi*1]
10002bad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002bb1:	29 c8                	sub    eax,ecx
10002bb3:	99                   	cdq    
10002bb4:	f7 ff                	idiv   edi
10002bb6:	8d 34 08             	lea    esi,[eax+ecx*1]
10002bb9:	89 e8                	mov    eax,ebp
10002bbb:	29 d8                	sub    eax,ebx
10002bbd:	99                   	cdq    
10002bbe:	f7 ff                	idiv   edi
10002bc0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
10002bc4:	01 d8                	add    eax,ebx
10002bc6:	8d 57 01             	lea    edx,[edi+0x1]
10002bc9:	52                   	push   edx
10002bca:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
10002bce:	50                   	push   eax
10002bcf:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10002bd3:	56                   	push   esi
10002bd4:	53                   	push   ebx
10002bd5:	51                   	push   ecx
10002bd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10002bda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10002bde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10002be2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10002be6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002bea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002bee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002bf2:	e8 71 fe ff ff       	call   10002a68 <_ssfn_b>
10002bf7:	83 c4 30             	add    esp,0x30
10002bfa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10002bfe:	52                   	push   edx
10002bff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10002c03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10002c07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10002c0b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10002c0f:	55                   	push   ebp
10002c10:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10002c14:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10002c18:	50                   	push   eax
10002c19:	56                   	push   esi
10002c1a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002c1e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002c22:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002c26:	e8 3d fe ff ff       	call   10002a68 <_ssfn_b>
10002c2b:	83 c4 30             	add    esp,0x30
10002c2e:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
10002c33:	0f 85 97 fe ff ff    	jne    10002ad0 <_ssfn_b+0x68>
10002c39:	83 c4 4c             	add    esp,0x4c
10002c3c:	5b                   	pop    ebx
10002c3d:	5e                   	pop    esi
10002c3e:	5f                   	pop    edi
10002c3f:	5d                   	pop    ebp
10002c40:	c3                   	ret    

10002c41 <_ssfn_fc>:
10002c41:	55                   	push   ebp
10002c42:	57                   	push   edi
10002c43:	56                   	push   esi
10002c44:	53                   	push   ebx
10002c45:	83 ec 0c             	sub    esp,0xc
10002c48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002c4c:	85 c0                	test   eax,eax
10002c4e:	74 75                	je     10002cc5 <_ssfn_fc+0x84>
10002c50:	8d 98 28 f5 00 00    	lea    ebx,[eax+0xf528]
10002c56:	8d a8 6c f5 00 00    	lea    ebp,[eax+0xf56c]
10002c5c:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
10002c5f:	74 5d                	je     10002cbe <_ssfn_fc+0x7d>
10002c61:	31 f6                	xor    esi,esi
10002c63:	8b 03                	mov    eax,DWORD PTR [ebx]
10002c65:	83 3c 30 00          	cmp    DWORD PTR [eax+esi*1],0x0
10002c69:	74 35                	je     10002ca0 <_ssfn_fc+0x5f>
10002c6b:	31 ff                	xor    edi,edi
10002c6d:	8b 03                	mov    eax,DWORD PTR [ebx]
10002c6f:	8b 04 30             	mov    eax,DWORD PTR [eax+esi*1]
10002c72:	8b 04 38             	mov    eax,DWORD PTR [eax+edi*1]
10002c75:	85 c0                	test   eax,eax
10002c77:	74 0c                	je     10002c85 <_ssfn_fc+0x44>
10002c79:	83 ec 0c             	sub    esp,0xc
10002c7c:	50                   	push   eax
10002c7d:	e8 fc ff ff ff       	call   10002c7e <_ssfn_fc+0x3d>	10002c7e: R_386_PC32	free
10002c82:	83 c4 10             	add    esp,0x10
10002c85:	83 c7 04             	add    edi,0x4
10002c88:	81 ff 00 04 00 00    	cmp    edi,0x400
10002c8e:	75 dd                	jne    10002c6d <_ssfn_fc+0x2c>
10002c90:	83 ec 0c             	sub    esp,0xc
10002c93:	8b 03                	mov    eax,DWORD PTR [ebx]
10002c95:	ff 34 30             	push   DWORD PTR [eax+esi*1]
10002c98:	e8 fc ff ff ff       	call   10002c99 <_ssfn_fc+0x58>	10002c99: R_386_PC32	free
10002c9d:	83 c4 10             	add    esp,0x10
10002ca0:	83 c6 04             	add    esi,0x4
10002ca3:	81 fe 00 04 00 00    	cmp    esi,0x400
10002ca9:	75 b8                	jne    10002c63 <_ssfn_fc+0x22>
10002cab:	83 ec 0c             	sub    esp,0xc
10002cae:	ff 33                	push   DWORD PTR [ebx]
10002cb0:	e8 fc ff ff ff       	call   10002cb1 <_ssfn_fc+0x70>	10002cb1: R_386_PC32	free
10002cb5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
10002cbb:	83 c4 10             	add    esp,0x10
10002cbe:	83 c3 04             	add    ebx,0x4
10002cc1:	39 eb                	cmp    ebx,ebp
10002cc3:	75 97                	jne    10002c5c <_ssfn_fc+0x1b>
10002cc5:	83 c4 0c             	add    esp,0xc
10002cc8:	5b                   	pop    ebx
10002cc9:	5e                   	pop    esi
10002cca:	5f                   	pop    edi
10002ccb:	5d                   	pop    ebp
10002ccc:	c3                   	ret    

10002ccd <_ssfn__bitreverse16>:
10002ccd:	89 c2                	mov    edx,eax
10002ccf:	01 c0                	add    eax,eax
10002cd1:	d1 fa                	sar    edx,1
10002cd3:	25 aa aa 00 00       	and    eax,0xaaaa
10002cd8:	81 e2 55 55 00 00    	and    edx,0x5555
10002cde:	09 c2                	or     edx,eax
10002ce0:	89 d0                	mov    eax,edx
10002ce2:	c1 e2 02             	shl    edx,0x2
10002ce5:	c1 f8 02             	sar    eax,0x2
10002ce8:	81 e2 cc cc 00 00    	and    edx,0xcccc
10002cee:	25 33 33 00 00       	and    eax,0x3333
10002cf3:	09 d0                	or     eax,edx
10002cf5:	89 c2                	mov    edx,eax
10002cf7:	c1 e0 04             	shl    eax,0x4
10002cfa:	c1 fa 04             	sar    edx,0x4
10002cfd:	25 f0 f0 00 00       	and    eax,0xf0f0
10002d02:	81 e2 0f 0f 00 00    	and    edx,0xf0f
10002d08:	09 c2                	or     edx,eax
10002d0a:	89 d1                	mov    ecx,edx
10002d0c:	c1 e2 08             	shl    edx,0x8
10002d0f:	c1 f9 08             	sar    ecx,0x8
10002d12:	0f b7 c2             	movzx  eax,dx
10002d15:	09 c8                	or     eax,ecx
10002d17:	c3                   	ret    

10002d18 <_ssfn__zbuild_huffman>:
10002d18:	55                   	push   ebp
10002d19:	b9 11 00 00 00       	mov    ecx,0x11
10002d1e:	57                   	push   edi
10002d1f:	56                   	push   esi
10002d20:	53                   	push   ebx
10002d21:	81 ec 98 00 00 00    	sub    esp,0x98
10002d27:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
10002d2e:	8d 54 24 54          	lea    edx,[esp+0x54]
10002d32:	89 04 24             	mov    DWORD PTR [esp],eax
10002d35:	89 d7                	mov    edi,edx
10002d37:	31 c0                	xor    eax,eax
10002d39:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10002d3b:	b9 00 01 00 00       	mov    ecx,0x100
10002d40:	8b 3c 24             	mov    edi,DWORD PTR [esp]
10002d43:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10002d45:	3b 84 24 b4 00 00 00 	cmp    eax,DWORD PTR [esp+0xb4]
10002d4c:	7d 12                	jge    10002d60 <_ssfn__zbuild_huffman+0x48>
10002d4e:	8b 9c 24 b0 00 00 00 	mov    ebx,DWORD PTR [esp+0xb0]
10002d55:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
10002d59:	40                   	inc    eax
10002d5a:	ff 44 8c 54          	inc    DWORD PTR [esp+ecx*4+0x54]
10002d5e:	eb e5                	jmp    10002d45 <_ssfn__zbuild_huffman+0x2d>
10002d60:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
10002d68:	b9 01 00 00 00       	mov    ecx,0x1
10002d6d:	b8 01 00 00 00       	mov    eax,0x1
10002d72:	89 c6                	mov    esi,eax
10002d74:	d3 e6                	shl    esi,cl
10002d76:	39 34 8a             	cmp    DWORD PTR [edx+ecx*4],esi
10002d79:	0f 8f 0c 01 00 00    	jg     10002e8b <_ssfn__zbuild_huffman+0x173>
10002d7f:	41                   	inc    ecx
10002d80:	83 f9 10             	cmp    ecx,0x10
10002d83:	75 ed                	jne    10002d72 <_ssfn__zbuild_huffman+0x5a>
10002d85:	31 d2                	xor    edx,edx
10002d87:	31 f6                	xor    esi,esi
10002d89:	b8 01 00 00 00       	mov    eax,0x1
10002d8e:	bd 01 00 00 00       	mov    ebp,0x1
10002d93:	8b 3c 24             	mov    edi,DWORD PTR [esp]
10002d96:	89 54 84 14          	mov    DWORD PTR [esp+eax*4+0x14],edx
10002d9a:	66 89 94 47 00 04 00 00 	mov    WORD PTR [edi+eax*2+0x400],dx
10002da2:	66 89 b4 47 64 04 00 00 	mov    WORD PTR [edi+eax*2+0x464],si
10002daa:	8b 7c 84 54          	mov    edi,DWORD PTR [esp+eax*4+0x54]
10002dae:	01 fa                	add    edx,edi
10002db0:	85 ff                	test   edi,edi
10002db2:	74 0e                	je     10002dc2 <_ssfn__zbuild_huffman+0xaa>
10002db4:	89 eb                	mov    ebx,ebp
10002db6:	88 c1                	mov    cl,al
10002db8:	d3 e3                	shl    ebx,cl
10002dba:	39 d3                	cmp    ebx,edx
10002dbc:	0f 8c c9 00 00 00    	jl     10002e8b <_ssfn__zbuild_huffman+0x173>
10002dc2:	89 d3                	mov    ebx,edx
10002dc4:	b9 10 00 00 00       	mov    ecx,0x10
10002dc9:	01 d2                	add    edx,edx
10002dcb:	29 c1                	sub    ecx,eax
10002dcd:	01 fe                	add    esi,edi
10002dcf:	d3 e3                	shl    ebx,cl
10002dd1:	89 d9                	mov    ecx,ebx
10002dd3:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
10002dd6:	89 8c 83 20 04 00 00 	mov    DWORD PTR [ebx+eax*4+0x420],ecx
10002ddd:	40                   	inc    eax
10002dde:	83 f8 10             	cmp    eax,0x10
10002de1:	75 b0                	jne    10002d93 <_ssfn__zbuild_huffman+0x7b>
10002de3:	c7 83 60 04 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x460],0x10000
10002ded:	31 ff                	xor    edi,edi
10002def:	3b bc 24 b4 00 00 00 	cmp    edi,DWORD PTR [esp+0xb4]
10002df6:	0f 8d 93 00 00 00    	jge    10002e8f <_ssfn__zbuild_huffman+0x177>
10002dfc:	8b 84 24 b0 00 00 00 	mov    eax,DWORD PTR [esp+0xb0]
10002e03:	0f b6 34 38          	movzx  esi,BYTE PTR [eax+edi*1]
10002e07:	89 f2                	mov    edx,esi
10002e09:	85 f6                	test   esi,esi
10002e0b:	74 78                	je     10002e85 <_ssfn__zbuild_huffman+0x16d>
10002e0d:	8b 6c b4 14          	mov    ebp,DWORD PTR [esp+esi*4+0x14]
10002e11:	8d 0c 36             	lea    ecx,[esi+esi*1]
10002e14:	89 eb                	mov    ebx,ebp
10002e16:	03 0c 24             	add    ecx,DWORD PTR [esp]
10002e19:	0f b7 81 00 04 00 00 	movzx  eax,WORD PTR [ecx+0x400]
10002e20:	0f b7 89 64 04 00 00 	movzx  ecx,WORD PTR [ecx+0x464]
10002e27:	29 c3                	sub    ebx,eax
10002e29:	89 d8                	mov    eax,ebx
10002e2b:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
10002e2e:	01 c8                	add    eax,ecx
10002e30:	83 fe 09             	cmp    esi,0x9
10002e33:	88 94 03 84 04 00 00 	mov    BYTE PTR [ebx+eax*1+0x484],dl
10002e3a:	66 89 bc 43 a4 05 00 00 	mov    WORD PTR [ebx+eax*2+0x5a4],di
10002e42:	7f 3c                	jg     10002e80 <_ssfn__zbuild_huffman+0x168>
10002e44:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
10002e48:	89 e8                	mov    eax,ebp
10002e4a:	bb 01 00 00 00       	mov    ebx,0x1
10002e4f:	e8 79 fe ff ff       	call   10002ccd <_ssfn__bitreverse16>
10002e54:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
10002e58:	b9 10 00 00 00       	mov    ecx,0x10
10002e5d:	29 f1                	sub    ecx,esi
10002e5f:	d3 f8                	sar    eax,cl
10002e61:	88 d1                	mov    cl,dl
10002e63:	89 f2                	mov    edx,esi
10002e65:	d3 e3                	shl    ebx,cl
10002e67:	c1 e2 09             	shl    edx,0x9
10002e6a:	89 d9                	mov    ecx,ebx
10002e6c:	09 fa                	or     edx,edi
10002e6e:	3d ff 01 00 00       	cmp    eax,0x1ff
10002e73:	7f 0b                	jg     10002e80 <_ssfn__zbuild_huffman+0x168>
10002e75:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
10002e78:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
10002e7c:	01 c8                	add    eax,ecx
10002e7e:	eb ee                	jmp    10002e6e <_ssfn__zbuild_huffman+0x156>
10002e80:	45                   	inc    ebp
10002e81:	89 6c b4 14          	mov    DWORD PTR [esp+esi*4+0x14],ebp
10002e85:	47                   	inc    edi
10002e86:	e9 64 ff ff ff       	jmp    10002def <_ssfn__zbuild_huffman+0xd7>
10002e8b:	31 c0                	xor    eax,eax
10002e8d:	eb 05                	jmp    10002e94 <_ssfn__zbuild_huffman+0x17c>
10002e8f:	b8 01 00 00 00       	mov    eax,0x1
10002e94:	81 c4 98 00 00 00    	add    esp,0x98
10002e9a:	5b                   	pop    ebx
10002e9b:	5e                   	pop    esi
10002e9c:	5f                   	pop    edi
10002e9d:	5d                   	pop    ebp
10002e9e:	c3                   	ret    

10002e9f <_ssfn__fill_bits>:
10002e9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10002ea3:	8b 10                	mov    edx,DWORD PTR [eax]
10002ea5:	8d 4a 01             	lea    ecx,[edx+0x1]
10002ea8:	89 08                	mov    DWORD PTR [eax],ecx
10002eaa:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
10002ead:	0f b6 12             	movzx  edx,BYTE PTR [edx]
10002eb0:	d3 e2                	shl    edx,cl
10002eb2:	83 c1 08             	add    ecx,0x8
10002eb5:	09 50 08             	or     DWORD PTR [eax+0x8],edx
10002eb8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10002ebb:	83 f9 18             	cmp    ecx,0x18
10002ebe:	7e e3                	jle    10002ea3 <_ssfn__fill_bits+0x4>
10002ec0:	c3                   	ret    

10002ec1 <_ssfn__zreceive>:
10002ec1:	56                   	push   esi
10002ec2:	89 d1                	mov    ecx,edx
10002ec4:	53                   	push   ebx
10002ec5:	89 c6                	mov    esi,eax
10002ec7:	53                   	push   ebx
10002ec8:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
10002ecb:	7d 0d                	jge    10002eda <_ssfn__zreceive+0x19>
10002ecd:	89 14 24             	mov    DWORD PTR [esp],edx
10002ed0:	50                   	push   eax
10002ed1:	e8 c9 ff ff ff       	call   10002e9f <_ssfn__fill_bits>
10002ed6:	59                   	pop    ecx
10002ed7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10002eda:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
10002edd:	29 4e 04             	sub    DWORD PTR [esi+0x4],ecx
10002ee0:	89 d0                	mov    eax,edx
10002ee2:	bb 01 00 00 00       	mov    ebx,0x1
10002ee7:	d3 e8                	shr    eax,cl
10002ee9:	d3 e3                	shl    ebx,cl
10002eeb:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
10002eee:	8d 43 ff             	lea    eax,[ebx-0x1]
10002ef1:	21 d0                	and    eax,edx
10002ef3:	5a                   	pop    edx
10002ef4:	5b                   	pop    ebx
10002ef5:	5e                   	pop    esi
10002ef6:	c3                   	ret    

10002ef7 <_ssfn__zhuffman_decode_slowpath>:
10002ef7:	55                   	push   ebp
10002ef8:	57                   	push   edi
10002ef9:	56                   	push   esi
10002efa:	53                   	push   ebx
10002efb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002eff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10002f03:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
10002f06:	89 f8                	mov    eax,edi
10002f08:	e8 c0 fd ff ff       	call   10002ccd <_ssfn__bitreverse16>
10002f0d:	ba 0a 00 00 00       	mov    edx,0xa
10002f12:	39 84 96 20 04 00 00 	cmp    DWORD PTR [esi+edx*4+0x420],eax
10002f19:	7f 03                	jg     10002f1e <_ssfn__zhuffman_decode_slowpath+0x27>
10002f1b:	42                   	inc    edx
10002f1c:	eb f4                	jmp    10002f12 <_ssfn__zhuffman_decode_slowpath+0x1b>
10002f1e:	83 c9 ff             	or     ecx,0xffffffff
10002f21:	83 fa 10             	cmp    edx,0x10
10002f24:	74 34                	je     10002f5a <_ssfn__zhuffman_decode_slowpath+0x63>
10002f26:	8d 2c 12             	lea    ebp,[edx+edx*1]
10002f29:	b9 10 00 00 00       	mov    ecx,0x10
10002f2e:	01 f5                	add    ebp,esi
10002f30:	29 d1                	sub    ecx,edx
10002f32:	d3 f8                	sar    eax,cl
10002f34:	0f b7 8d 00 04 00 00 	movzx  ecx,WORD PTR [ebp+0x400]
10002f3b:	0f b7 ad 64 04 00 00 	movzx  ebp,WORD PTR [ebp+0x464]
10002f42:	29 c8                	sub    eax,ecx
10002f44:	29 53 04             	sub    DWORD PTR [ebx+0x4],edx
10002f47:	88 d1                	mov    cl,dl
10002f49:	8d 84 28 d0 02 00 00 	lea    eax,[eax+ebp*1+0x2d0]
10002f50:	d3 ef                	shr    edi,cl
10002f52:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
10002f55:	0f b7 4c 46 04       	movzx  ecx,WORD PTR [esi+eax*2+0x4]
10002f5a:	5b                   	pop    ebx
10002f5b:	89 c8                	mov    eax,ecx
10002f5d:	5e                   	pop    esi
10002f5e:	5f                   	pop    edi
10002f5f:	5d                   	pop    ebp
10002f60:	c3                   	ret    

10002f61 <_ssfn__zhuffman_decode>:
10002f61:	57                   	push   edi
10002f62:	89 d7                	mov    edi,edx
10002f64:	56                   	push   esi
10002f65:	53                   	push   ebx
10002f66:	89 c3                	mov    ebx,eax
10002f68:	83 78 04 0f          	cmp    DWORD PTR [eax+0x4],0xf
10002f6c:	7f 07                	jg     10002f75 <_ssfn__zhuffman_decode+0x14>
10002f6e:	50                   	push   eax
10002f6f:	e8 2b ff ff ff       	call   10002e9f <_ssfn__fill_bits>
10002f74:	5e                   	pop    esi
10002f75:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
10002f78:	89 f0                	mov    eax,esi
10002f7a:	25 ff 01 00 00       	and    eax,0x1ff
10002f7f:	0f b7 0c 47          	movzx  ecx,WORD PTR [edi+eax*2]
10002f83:	89 c8                	mov    eax,ecx
10002f85:	85 c9                	test   ecx,ecx
10002f87:	74 12                	je     10002f9b <_ssfn__zhuffman_decode+0x3a>
10002f89:	c1 f9 09             	sar    ecx,0x9
10002f8c:	25 ff 01 00 00       	and    eax,0x1ff
10002f91:	d3 ee                	shr    esi,cl
10002f93:	29 4b 04             	sub    DWORD PTR [ebx+0x4],ecx
10002f96:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10002f99:	eb 09                	jmp    10002fa4 <_ssfn__zhuffman_decode+0x43>
10002f9b:	57                   	push   edi
10002f9c:	53                   	push   ebx
10002f9d:	e8 55 ff ff ff       	call   10002ef7 <_ssfn__zhuffman_decode_slowpath>
10002fa2:	5a                   	pop    edx
10002fa3:	59                   	pop    ecx
10002fa4:	5b                   	pop    ebx
10002fa5:	5e                   	pop    esi
10002fa6:	5f                   	pop    edi
10002fa7:	c3                   	ret    

10002fa8 <_ssfn__zexpand>:
10002fa8:	55                   	push   ebp
10002fa9:	57                   	push   edi
10002faa:	56                   	push   esi
10002fab:	53                   	push   ebx
10002fac:	83 ec 0c             	sub    esp,0xc
10002faf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10002fb3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
10002fb7:	8b 5e 10             	mov    ebx,DWORD PTR [esi+0x10]
10002fba:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
10002fbd:	89 7e 0c             	mov    DWORD PTR [esi+0xc],edi
10002fc0:	29 d8                	sub    eax,ebx
10002fc2:	83 f8 08             	cmp    eax,0x8
10002fc5:	74 04                	je     10002fcb <_ssfn__zexpand+0x23>
10002fc7:	31 c0                	xor    eax,eax
10002fc9:	eb 38                	jmp    10003003 <_ssfn__zexpand+0x5b>
10002fcb:	80 3b 53             	cmp    BYTE PTR [ebx],0x53
10002fce:	75 f7                	jne    10002fc7 <_ssfn__zexpand+0x1f>
10002fd0:	80 7b 01 46          	cmp    BYTE PTR [ebx+0x1],0x46
10002fd4:	75 f1                	jne    10002fc7 <_ssfn__zexpand+0x1f>
10002fd6:	80 7b 02 4e          	cmp    BYTE PTR [ebx+0x2],0x4e
10002fda:	75 eb                	jne    10002fc7 <_ssfn__zexpand+0x1f>
10002fdc:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
10002fdf:	50                   	push   eax
10002fe0:	50                   	push   eax
10002fe1:	55                   	push   ebp
10002fe2:	53                   	push   ebx
10002fe3:	e8 fc ff ff ff       	call   10002fe4 <_ssfn__zexpand+0x3c>	10002fe4: R_386_PC32	realloc
10002fe8:	83 c4 10             	add    esp,0x10
10002feb:	85 c0                	test   eax,eax
10002fed:	74 d8                	je     10002fc7 <_ssfn__zexpand+0x1f>
10002fef:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
10002ff2:	29 df                	sub    edi,ebx
10002ff4:	01 c7                	add    edi,eax
10002ff6:	01 e8                	add    eax,ebp
10002ff8:	89 7e 0c             	mov    DWORD PTR [esi+0xc],edi
10002ffb:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
10002ffe:	b8 01 00 00 00       	mov    eax,0x1
10003003:	83 c4 0c             	add    esp,0xc
10003006:	5b                   	pop    ebx
10003007:	5e                   	pop    esi
10003008:	5f                   	pop    edi
10003009:	5d                   	pop    ebp
1000300a:	c3                   	ret    

1000300b <_ssfn__parse_huffman_block>:
1000300b:	55                   	push   ebp
1000300c:	57                   	push   edi
1000300d:	56                   	push   esi
1000300e:	53                   	push   ebx
1000300f:	83 ec 1c             	sub    esp,0x1c
10003012:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10003016:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
10003019:	8d 53 18             	lea    edx,[ebx+0x18]
1000301c:	89 d8                	mov    eax,ebx
1000301e:	e8 3e ff ff ff       	call   10002f61 <_ssfn__zhuffman_decode>
10003023:	89 c5                	mov    ebp,eax
10003025:	3d ff 00 00 00       	cmp    eax,0xff
1000302a:	7f 2c                	jg     10003058 <_ssfn__parse_huffman_block+0x4d>
1000302c:	85 c0                	test   eax,eax
1000302e:	0f 88 ef 00 00 00    	js     10003123 <_ssfn__parse_huffman_block+0x118>
10003034:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
10003037:	77 17                	ja     10003050 <_ssfn__parse_huffman_block+0x45>
10003039:	52                   	push   edx
1000303a:	52                   	push   edx
1000303b:	57                   	push   edi
1000303c:	53                   	push   ebx
1000303d:	e8 66 ff ff ff       	call   10002fa8 <_ssfn__zexpand>
10003042:	83 c4 10             	add    esp,0x10
10003045:	85 c0                	test   eax,eax
10003047:	0f 84 d6 00 00 00    	je     10003123 <_ssfn__parse_huffman_block+0x118>
1000304d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
10003050:	89 e8                	mov    eax,ebp
10003052:	47                   	inc    edi
10003053:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
10003056:	eb c1                	jmp    10003019 <_ssfn__parse_huffman_block+0xe>
10003058:	3d 00 01 00 00       	cmp    eax,0x100
1000305d:	75 0d                	jne    1000306c <_ssfn__parse_huffman_block+0x61>
1000305f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
10003062:	b8 01 00 00 00       	mov    eax,0x1
10003067:	e9 b9 00 00 00       	jmp    10003125 <_ssfn__parse_huffman_block+0x11a>
1000306c:	8d 80 ff fe ff ff    	lea    eax,[eax-0x101]
10003072:	8b 14 85 e0 b5 00 10 	mov    edx,DWORD PTR [eax*4+0x1000b5e0]	10003075: R_386_32	.data
10003079:	8b 2c 85 60 b5 00 10 	mov    ebp,DWORD PTR [eax*4+0x1000b560]	1000307c: R_386_32	.data
10003080:	85 d2                	test   edx,edx
10003082:	74 09                	je     1000308d <_ssfn__parse_huffman_block+0x82>
10003084:	89 d8                	mov    eax,ebx
10003086:	e8 36 fe ff ff       	call   10002ec1 <_ssfn__zreceive>
1000308b:	01 c5                	add    ebp,eax
1000308d:	8d 93 fc 07 00 00    	lea    edx,[ebx+0x7fc]
10003093:	89 d8                	mov    eax,ebx
10003095:	e8 c7 fe ff ff       	call   10002f61 <_ssfn__zhuffman_decode>
1000309a:	85 c0                	test   eax,eax
1000309c:	0f 88 81 00 00 00    	js     10003123 <_ssfn__parse_huffman_block+0x118>
100030a2:	8b 0c 85 60 b6 00 10 	mov    ecx,DWORD PTR [eax*4+0x1000b660]	100030a5: R_386_32	.data
100030a9:	8b 14 85 e0 b6 00 10 	mov    edx,DWORD PTR [eax*4+0x1000b6e0]	100030ac: R_386_32	.data
100030b0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
100030b4:	85 d2                	test   edx,edx
100030b6:	74 0b                	je     100030c3 <_ssfn__parse_huffman_block+0xb8>
100030b8:	89 d8                	mov    eax,ebx
100030ba:	e8 02 fe ff ff       	call   10002ec1 <_ssfn__zreceive>
100030bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
100030c3:	89 f8                	mov    eax,edi
100030c5:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
100030c8:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
100030cc:	7c 55                	jl     10003123 <_ssfn__parse_huffman_block+0x118>
100030ce:	8d 04 2f             	lea    eax,[edi+ebp*1]
100030d1:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
100030d4:	73 13                	jae    100030e9 <_ssfn__parse_huffman_block+0xde>
100030d6:	50                   	push   eax
100030d7:	50                   	push   eax
100030d8:	57                   	push   edi
100030d9:	53                   	push   ebx
100030da:	e8 c9 fe ff ff       	call   10002fa8 <_ssfn__zexpand>
100030df:	83 c4 10             	add    esp,0x10
100030e2:	85 c0                	test   eax,eax
100030e4:	74 3d                	je     10003123 <_ssfn__parse_huffman_block+0x118>
100030e6:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
100030e9:	89 fe                	mov    esi,edi
100030eb:	2b 74 24 0c          	sub    esi,DWORD PTR [esp+0xc]
100030ef:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
100030f4:	75 19                	jne    1000310f <_ssfn__parse_huffman_block+0x104>
100030f6:	85 ed                	test   ebp,ebp
100030f8:	0f 84 1b ff ff ff    	je     10003019 <_ssfn__parse_huffman_block+0xe>
100030fe:	8a 06                	mov    al,BYTE PTR [esi]
10003100:	01 fd                	add    ebp,edi
10003102:	47                   	inc    edi
10003103:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
10003106:	39 ef                	cmp    edi,ebp
10003108:	75 f8                	jne    10003102 <_ssfn__parse_huffman_block+0xf7>
1000310a:	e9 0a ff ff ff       	jmp    10003019 <_ssfn__parse_huffman_block+0xe>
1000310f:	85 ed                	test   ebp,ebp
10003111:	0f 84 02 ff ff ff    	je     10003019 <_ssfn__parse_huffman_block+0xe>
10003117:	01 fd                	add    ebp,edi
10003119:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000311a:	39 ef                	cmp    edi,ebp
1000311c:	75 fb                	jne    10003119 <_ssfn__parse_huffman_block+0x10e>
1000311e:	e9 f6 fe ff ff       	jmp    10003019 <_ssfn__parse_huffman_block+0xe>
10003123:	31 c0                	xor    eax,eax
10003125:	83 c4 1c             	add    esp,0x1c
10003128:	5b                   	pop    ebx
10003129:	5e                   	pop    esi
1000312a:	5f                   	pop    edi
1000312b:	5d                   	pop    ebp
1000312c:	c3                   	ret    

1000312d <_ssfn__compute_huffman_codes>:
1000312d:	55                   	push   ebp
1000312e:	ba 05 00 00 00       	mov    edx,0x5
10003133:	57                   	push   edi
10003134:	56                   	push   esi
10003135:	53                   	push   ebx
10003136:	81 ec c8 09 00 00    	sub    esp,0x9c8
1000313c:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10003143:	8d 5c 24 0a          	lea    ebx,[esp+0xa]
10003147:	89 e8                	mov    eax,ebp
10003149:	89 df                	mov    edi,ebx
1000314b:	e8 71 fd ff ff       	call   10002ec1 <_ssfn__zreceive>
10003150:	ba 05 00 00 00       	mov    edx,0x5
10003155:	89 c6                	mov    esi,eax
10003157:	89 e8                	mov    eax,ebp
10003159:	e8 63 fd ff ff       	call   10002ec1 <_ssfn__zreceive>
1000315e:	ba 04 00 00 00       	mov    edx,0x4
10003163:	89 04 24             	mov    DWORD PTR [esp],eax
10003166:	89 e8                	mov    eax,ebp
10003168:	e8 54 fd ff ff       	call   10002ec1 <_ssfn__zreceive>
1000316d:	b9 13 00 00 00       	mov    ecx,0x13
10003172:	83 c0 04             	add    eax,0x4
10003175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003179:	31 c0                	xor    eax,eax
1000317b:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000317d:	31 ff                	xor    edi,edi
1000317f:	3b 7c 24 04          	cmp    edi,DWORD PTR [esp+0x4]
10003183:	7d 1a                	jge    1000319f <_ssfn__compute_huffman_codes+0x72>
10003185:	ba 03 00 00 00       	mov    edx,0x3
1000318a:	89 e8                	mov    eax,ebp
1000318c:	47                   	inc    edi
1000318d:	e8 2f fd ff ff       	call   10002ec1 <_ssfn__zreceive>
10003192:	0f b6 97 5f b7 00 10 	movzx  edx,BYTE PTR [edi+0x1000b75f]	10003195: R_386_32	.data
10003199:	88 44 14 0a          	mov    BYTE PTR [esp+edx*1+0xa],al
1000319d:	eb e0                	jmp    1000317f <_ssfn__compute_huffman_codes+0x52>
1000319f:	6a 13                	push   0x13
100031a1:	53                   	push   ebx
100031a2:	8d 84 24 ec 01 00 00 	lea    eax,[esp+0x1ec]
100031a9:	50                   	push   eax
100031aa:	e8 69 fb ff ff       	call   10002d18 <_ssfn__zbuild_huffman>
100031af:	83 c4 0c             	add    esp,0xc
100031b2:	85 c0                	test   eax,eax
100031b4:	75 07                	jne    100031bd <_ssfn__compute_huffman_codes+0x90>
100031b6:	31 c0                	xor    eax,eax
100031b8:	e9 dd 00 00 00       	jmp    1000329a <_ssfn__compute_huffman_codes+0x16d>
100031bd:	8b 04 24             	mov    eax,DWORD PTR [esp]
100031c0:	81 c6 01 01 00 00    	add    esi,0x101
100031c6:	40                   	inc    eax
100031c7:	31 db                	xor    ebx,ebx
100031c9:	89 04 24             	mov    DWORD PTR [esp],eax
100031cc:	01 f0                	add    eax,esi
100031ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100031d2:	3b 5c 24 04          	cmp    ebx,DWORD PTR [esp+0x4]
100031d6:	0f 8d 81 00 00 00    	jge    1000325d <_ssfn__compute_huffman_codes+0x130>
100031dc:	8d 94 24 e4 01 00 00 	lea    edx,[esp+0x1e4]
100031e3:	89 e8                	mov    eax,ebp
100031e5:	e8 77 fd ff ff       	call   10002f61 <_ssfn__zhuffman_decode>
100031ea:	83 f8 12             	cmp    eax,0x12
100031ed:	77 c7                	ja     100031b6 <_ssfn__compute_huffman_codes+0x89>
100031ef:	83 f8 0f             	cmp    eax,0xf
100031f2:	7f 07                	jg     100031fb <_ssfn__compute_huffman_codes+0xce>
100031f4:	88 44 1c 1d          	mov    BYTE PTR [esp+ebx*1+0x1d],al
100031f8:	43                   	inc    ebx
100031f9:	eb d7                	jmp    100031d2 <_ssfn__compute_huffman_codes+0xa5>
100031fb:	83 f8 10             	cmp    eax,0x10
100031fe:	75 19                	jne    10003219 <_ssfn__compute_huffman_codes+0xec>
10003200:	ba 02 00 00 00       	mov    edx,0x2
10003205:	89 e8                	mov    eax,ebp
10003207:	e8 b5 fc ff ff       	call   10002ec1 <_ssfn__zreceive>
1000320c:	85 db                	test   ebx,ebx
1000320e:	8d 50 03             	lea    edx,[eax+0x3]
10003211:	74 a3                	je     100031b6 <_ssfn__compute_huffman_codes+0x89>
10003213:	8a 44 1c 1c          	mov    al,BYTE PTR [esp+ebx*1+0x1c]
10003217:	eb 27                	jmp    10003240 <_ssfn__compute_huffman_codes+0x113>
10003219:	83 f8 11             	cmp    eax,0x11
1000321c:	75 11                	jne    1000322f <_ssfn__compute_huffman_codes+0x102>
1000321e:	ba 03 00 00 00       	mov    edx,0x3
10003223:	89 e8                	mov    eax,ebp
10003225:	e8 97 fc ff ff       	call   10002ec1 <_ssfn__zreceive>
1000322a:	8d 50 03             	lea    edx,[eax+0x3]
1000322d:	eb 0f                	jmp    1000323e <_ssfn__compute_huffman_codes+0x111>
1000322f:	ba 07 00 00 00       	mov    edx,0x7
10003234:	89 e8                	mov    eax,ebp
10003236:	e8 86 fc ff ff       	call   10002ec1 <_ssfn__zreceive>
1000323b:	8d 50 0b             	lea    edx,[eax+0xb]
1000323e:	31 c0                	xor    eax,eax
10003240:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10003244:	29 d9                	sub    ecx,ebx
10003246:	39 d1                	cmp    ecx,edx
10003248:	0f 8c 68 ff ff ff    	jl     100031b6 <_ssfn__compute_huffman_codes+0x89>
1000324e:	8d 7c 1c 1d          	lea    edi,[esp+ebx*1+0x1d]
10003252:	89 d1                	mov    ecx,edx
10003254:	01 d3                	add    ebx,edx
10003256:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003258:	e9 75 ff ff ff       	jmp    100031d2 <_ssfn__compute_huffman_codes+0xa5>
1000325d:	0f 85 53 ff ff ff    	jne    100031b6 <_ssfn__compute_huffman_codes+0x89>
10003263:	56                   	push   esi
10003264:	8d 45 18             	lea    eax,[ebp+0x18]
10003267:	8d 5c 24 21          	lea    ebx,[esp+0x21]
1000326b:	53                   	push   ebx
1000326c:	50                   	push   eax
1000326d:	e8 a6 fa ff ff       	call   10002d18 <_ssfn__zbuild_huffman>
10003272:	83 c4 0c             	add    esp,0xc
10003275:	85 c0                	test   eax,eax
10003277:	0f 84 39 ff ff ff    	je     100031b6 <_ssfn__compute_huffman_codes+0x89>
1000327d:	ff 34 24             	push   DWORD PTR [esp]
10003280:	01 de                	add    esi,ebx
10003282:	8d 85 fc 07 00 00    	lea    eax,[ebp+0x7fc]
10003288:	56                   	push   esi
10003289:	50                   	push   eax
1000328a:	e8 89 fa ff ff       	call   10002d18 <_ssfn__zbuild_huffman>
1000328f:	83 c4 0c             	add    esp,0xc
10003292:	85 c0                	test   eax,eax
10003294:	0f 95 c0             	setne  al
10003297:	0f b6 c0             	movzx  eax,al
1000329a:	81 c4 c8 09 00 00    	add    esp,0x9c8
100032a0:	5b                   	pop    ebx
100032a1:	5e                   	pop    esi
100032a2:	5f                   	pop    edi
100032a3:	5d                   	pop    ebp
100032a4:	c3                   	ret    

100032a5 <_ssfn__init_zdefaults>:
100032a5:	31 c0                	xor    eax,eax
100032a7:	c6 80 a0 e5 00 10 08 	mov    BYTE PTR [eax+0x1000e5a0],0x8	100032a9: R_386_32	.bss
100032ae:	40                   	inc    eax
100032af:	3d 90 00 00 00       	cmp    eax,0x90
100032b4:	75 f1                	jne    100032a7 <_ssfn__init_zdefaults+0x2>
100032b6:	c6 80 a0 e5 00 10 09 	mov    BYTE PTR [eax+0x1000e5a0],0x9	100032b8: R_386_32	.bss
100032bd:	40                   	inc    eax
100032be:	3d 00 01 00 00       	cmp    eax,0x100
100032c3:	75 f1                	jne    100032b6 <_ssfn__init_zdefaults+0x11>
100032c5:	c6 80 a0 e5 00 10 07 	mov    BYTE PTR [eax+0x1000e5a0],0x7	100032c7: R_386_32	.bss
100032cc:	40                   	inc    eax
100032cd:	3d 18 01 00 00       	cmp    eax,0x118
100032d2:	75 f1                	jne    100032c5 <_ssfn__init_zdefaults+0x20>
100032d4:	c7 05 b8 e6 00 10 08 08 08 08 	mov    DWORD PTR ds:0x1000e6b8,0x8080808	100032d6: R_386_32	.bss
100032de:	c7 05 bc e6 00 10 08 08 08 08 	mov    DWORD PTR ds:0x1000e6bc,0x8080808	100032e0: R_386_32	.bss
100032e8:	31 c0                	xor    eax,eax
100032ea:	c6 80 c0 e6 00 10 05 	mov    BYTE PTR [eax+0x1000e6c0],0x5	100032ec: R_386_32	.bss
100032f1:	40                   	inc    eax
100032f2:	83 f8 20             	cmp    eax,0x20
100032f5:	75 f3                	jne    100032ea <_ssfn__init_zdefaults+0x45>
100032f7:	c3                   	ret    

100032f8 <_ssfn__parse_zlib>:
100032f8:	55                   	push   ebp
100032f9:	57                   	push   edi
100032fa:	56                   	push   esi
100032fb:	53                   	push   ebx
100032fc:	83 ec 1c             	sub    esp,0x1c
100032ff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10003303:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
1000330a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
10003311:	ba 01 00 00 00       	mov    edx,0x1
10003316:	89 d8                	mov    eax,ebx
10003318:	e8 a4 fb ff ff       	call   10002ec1 <_ssfn__zreceive>
1000331d:	ba 02 00 00 00       	mov    edx,0x2
10003322:	89 c5                	mov    ebp,eax
10003324:	89 d8                	mov    eax,ebx
10003326:	e8 96 fb ff ff       	call   10002ec1 <_ssfn__zreceive>
1000332b:	89 c6                	mov    esi,eax
1000332d:	85 c0                	test   eax,eax
1000332f:	0f 85 ad 00 00 00    	jne    100033e2 <_ssfn__parse_zlib+0xea>
10003335:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10003338:	83 e2 07             	and    edx,0x7
1000333b:	74 07                	je     10003344 <_ssfn__parse_zlib+0x4c>
1000333d:	89 d8                	mov    eax,ebx
1000333f:	e8 7d fb ff ff       	call   10002ec1 <_ssfn__zreceive>
10003344:	31 c0                	xor    eax,eax
10003346:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
10003349:	85 c9                	test   ecx,ecx
1000334b:	7e 16                	jle    10003363 <_ssfn__parse_zlib+0x6b>
1000334d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10003350:	40                   	inc    eax
10003351:	83 e9 08             	sub    ecx,0x8
10003354:	88 54 04 0b          	mov    BYTE PTR [esp+eax*1+0xb],dl
10003358:	89 4b 04             	mov    DWORD PTR [ebx+0x4],ecx
1000335b:	c1 ea 08             	shr    edx,0x8
1000335e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
10003361:	eb e3                	jmp    10003346 <_ssfn__parse_zlib+0x4e>
10003363:	83 f8 04             	cmp    eax,0x4
10003366:	74 10                	je     10003378 <_ssfn__parse_zlib+0x80>
10003368:	8b 13                	mov    edx,DWORD PTR [ebx]
1000336a:	40                   	inc    eax
1000336b:	8d 4a 01             	lea    ecx,[edx+0x1]
1000336e:	89 0b                	mov    DWORD PTR [ebx],ecx
10003370:	8a 12                	mov    dl,BYTE PTR [edx]
10003372:	88 54 04 0b          	mov    BYTE PTR [esp+eax*1+0xb],dl
10003376:	eb eb                	jmp    10003363 <_ssfn__parse_zlib+0x6b>
10003378:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
1000337d:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
10003382:	0f b6 7c 24 0d       	movzx  edi,BYTE PTR [esp+0xd]
10003387:	c1 e7 08             	shl    edi,0x8
1000338a:	01 c7                	add    edi,eax
1000338c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
10003391:	c1 e0 08             	shl    eax,0x8
10003394:	01 d0                	add    eax,edx
10003396:	89 fa                	mov    edx,edi
10003398:	81 f2 ff ff 00 00    	xor    edx,0xffff
1000339e:	39 d0                	cmp    eax,edx
100033a0:	0f 85 a6 00 00 00    	jne    1000344c <_ssfn__parse_zlib+0x154>
100033a6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
100033a9:	8d 14 38             	lea    edx,[eax+edi*1]
100033ac:	39 53 14             	cmp    DWORD PTR [ebx+0x14],edx
100033af:	73 14                	jae    100033c5 <_ssfn__parse_zlib+0xcd>
100033b1:	51                   	push   ecx
100033b2:	51                   	push   ecx
100033b3:	50                   	push   eax
100033b4:	53                   	push   ebx
100033b5:	e8 ee fb ff ff       	call   10002fa8 <_ssfn__zexpand>
100033ba:	83 c4 10             	add    esp,0x10
100033bd:	85 c0                	test   eax,eax
100033bf:	0f 84 87 00 00 00    	je     1000344c <_ssfn__parse_zlib+0x154>
100033c5:	8b 03                	mov    eax,DWORD PTR [ebx]
100033c7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
100033ca:	39 f7                	cmp    edi,esi
100033cc:	74 09                	je     100033d7 <_ssfn__parse_zlib+0xdf>
100033ce:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
100033d1:	88 04 32             	mov    BYTE PTR [edx+esi*1],al
100033d4:	46                   	inc    esi
100033d5:	eb ee                	jmp    100033c5 <_ssfn__parse_zlib+0xcd>
100033d7:	01 f8                	add    eax,edi
100033d9:	01 d7                	add    edi,edx
100033db:	89 03                	mov    DWORD PTR [ebx],eax
100033dd:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
100033e0:	eb 5d                	jmp    1000343f <_ssfn__parse_zlib+0x147>
100033e2:	83 f8 03             	cmp    eax,0x3
100033e5:	75 04                	jne    100033eb <_ssfn__parse_zlib+0xf3>
100033e7:	31 f6                	xor    esi,esi
100033e9:	eb 61                	jmp    1000344c <_ssfn__parse_zlib+0x154>
100033eb:	4e                   	dec    esi
100033ec:	75 31                	jne    1000341f <_ssfn__parse_zlib+0x127>
100033ee:	8d 43 18             	lea    eax,[ebx+0x18]
100033f1:	52                   	push   edx
100033f2:	68 20 01 00 00       	push   0x120
100033f7:	68 a0 e5 00 10       	push   0x1000e5a0	100033f8: R_386_32	.bss
100033fc:	50                   	push   eax
100033fd:	e8 16 f9 ff ff       	call   10002d18 <_ssfn__zbuild_huffman>
10003402:	83 c4 10             	add    esp,0x10
10003405:	85 c0                	test   eax,eax
10003407:	74 de                	je     100033e7 <_ssfn__parse_zlib+0xef>
10003409:	50                   	push   eax
1000340a:	8d 83 fc 07 00 00    	lea    eax,[ebx+0x7fc]
10003410:	6a 20                	push   0x20
10003412:	68 c0 e6 00 10       	push   0x1000e6c0	10003413: R_386_32	.bss
10003417:	50                   	push   eax
10003418:	e8 fb f8 ff ff       	call   10002d18 <_ssfn__zbuild_huffman>
1000341d:	eb 09                	jmp    10003428 <_ssfn__parse_zlib+0x130>
1000341f:	83 ec 0c             	sub    esp,0xc
10003422:	53                   	push   ebx
10003423:	e8 05 fd ff ff       	call   1000312d <_ssfn__compute_huffman_codes>
10003428:	83 c4 10             	add    esp,0x10
1000342b:	85 c0                	test   eax,eax
1000342d:	74 b8                	je     100033e7 <_ssfn__parse_zlib+0xef>
1000342f:	83 ec 0c             	sub    esp,0xc
10003432:	53                   	push   ebx
10003433:	e8 d3 fb ff ff       	call   1000300b <_ssfn__parse_huffman_block>
10003438:	83 c4 10             	add    esp,0x10
1000343b:	85 c0                	test   eax,eax
1000343d:	74 a8                	je     100033e7 <_ssfn__parse_zlib+0xef>
1000343f:	85 ed                	test   ebp,ebp
10003441:	0f 84 ca fe ff ff    	je     10003311 <_ssfn__parse_zlib+0x19>
10003447:	be 01 00 00 00       	mov    esi,0x1
1000344c:	83 c4 1c             	add    esp,0x1c
1000344f:	89 f0                	mov    eax,esi
10003451:	5b                   	pop    ebx
10003452:	5e                   	pop    esi
10003453:	5f                   	pop    edi
10003454:	5d                   	pop    ebp
10003455:	c3                   	ret    

10003456 <_ssfn_zlib_decode>:
10003456:	81 ec f8 0f 00 00    	sub    esp,0xff8
1000345c:	6a 08                	push   0x8
1000345e:	e8 fc ff ff ff       	call   1000345f <_ssfn_zlib_decode+0x9>	1000345f: R_386_PC32	malloc
10003463:	83 c4 10             	add    esp,0x10
10003466:	85 c0                	test   eax,eax
10003468:	74 49                	je     100034b3 <_ssfn_zlib_decode+0x5d>
1000346a:	8b 94 24 f0 0f 00 00 	mov    edx,DWORD PTR [esp+0xff0]
10003471:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003475:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003479:	89 14 24             	mov    DWORD PTR [esp],edx
1000347c:	83 c0 08             	add    eax,0x8
1000347f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003483:	e8 1d fe ff ff       	call   100032a5 <_ssfn__init_zdefaults>
10003488:	83 ec 0c             	sub    esp,0xc
1000348b:	8d 44 24 0c          	lea    eax,[esp+0xc]
1000348f:	50                   	push   eax
10003490:	e8 63 fe ff ff       	call   100032f8 <_ssfn__parse_zlib>
10003495:	83 c4 10             	add    esp,0x10
10003498:	85 c0                	test   eax,eax
1000349a:	74 06                	je     100034a2 <_ssfn_zlib_decode+0x4c>
1000349c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100034a0:	eb 11                	jmp    100034b3 <_ssfn_zlib_decode+0x5d>
100034a2:	83 ec 0c             	sub    esp,0xc
100034a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100034a9:	e8 fc ff ff ff       	call   100034aa <_ssfn_zlib_decode+0x54>	100034aa: R_386_PC32	free
100034ae:	83 c4 10             	add    esp,0x10
100034b1:	31 c0                	xor    eax,eax
100034b3:	81 c4 ec 0f 00 00    	add    esp,0xfec
100034b9:	c3                   	ret    

100034ba <ssfn_load>:
100034ba:	55                   	push   ebp
100034bb:	57                   	push   edi
100034bc:	56                   	push   esi
100034bd:	53                   	push   ebx
100034be:	83 ec 1c             	sub    esp,0x1c
100034c1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
100034c5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100034c9:	85 ff                	test   edi,edi
100034cb:	0f 84 d5 01 00 00    	je     100036a6 <ssfn_load+0x1ec>
100034d1:	85 f6                	test   esi,esi
100034d3:	0f 84 cd 01 00 00    	je     100036a6 <ssfn_load+0x1ec>
100034d9:	80 3e 1f             	cmp    BYTE PTR [esi],0x1f
100034dc:	0f 85 a8 00 00 00    	jne    1000358a <ssfn_load+0xd0>
100034e2:	80 7e 01 8b          	cmp    BYTE PTR [esi+0x1],0x8b
100034e6:	0f 85 9e 00 00 00    	jne    1000358a <ssfn_load+0xd0>
100034ec:	80 7e 02 08          	cmp    BYTE PTR [esi+0x2],0x8
100034f0:	74 0a                	je     100034fc <ssfn_load+0x42>
100034f2:	bd fe ff ff ff       	mov    ebp,0xfffffffe
100034f7:	e9 af 01 00 00       	jmp    100036ab <ssfn_load+0x1f1>
100034fc:	8a 46 03             	mov    al,BYTE PTR [esi+0x3]
100034ff:	a8 04                	test   al,0x4
10003501:	75 05                	jne    10003508 <ssfn_load+0x4e>
10003503:	83 c6 0a             	add    esi,0xa
10003506:	eb 08                	jmp    10003510 <ssfn_load+0x56>
10003508:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
1000350c:	8d 74 16 0c          	lea    esi,[esi+edx*1+0xc]
10003510:	a8 08                	test   al,0x8
10003512:	74 07                	je     1000351b <ssfn_load+0x61>
10003514:	46                   	inc    esi
10003515:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10003519:	eb f7                	jmp    10003512 <ssfn_load+0x58>
1000351b:	a8 10                	test   al,0x10
1000351d:	74 07                	je     10003526 <ssfn_load+0x6c>
1000351f:	46                   	inc    esi
10003520:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10003524:	eb f7                	jmp    1000351d <ssfn_load+0x63>
10003526:	83 ec 0c             	sub    esp,0xc
10003529:	56                   	push   esi
1000352a:	e8 fc ff ff ff       	call   1000352b <ssfn_load+0x71>	1000352b: R_386_PC32	_ssfn_zlib_decode
1000352f:	83 c4 10             	add    esp,0x10
10003532:	89 c6                	mov    esi,eax
10003534:	85 c0                	test   eax,eax
10003536:	74 ba                	je     100034f2 <ssfn_load+0x38>
10003538:	50                   	push   eax
10003539:	50                   	push   eax
1000353a:	8b 87 78 f5 00 00    	mov    eax,DWORD PTR [edi+0xf578]
10003540:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
10003547:	50                   	push   eax
10003548:	ff b7 70 f5 00 00    	push   DWORD PTR [edi+0xf570]
1000354e:	e8 fc ff ff ff       	call   1000354f <ssfn_load+0x95>	1000354f: R_386_PC32	realloc
10003553:	83 c4 10             	add    esp,0x10
10003556:	89 87 70 f5 00 00    	mov    DWORD PTR [edi+0xf570],eax
1000355c:	85 c0                	test   eax,eax
1000355e:	75 0f                	jne    1000356f <ssfn_load+0xb5>
10003560:	c7 87 78 f5 00 00 00 00 00 00 	mov    DWORD PTR [edi+0xf578],0x0
1000356a:	e9 1a 01 00 00       	jmp    10003689 <ssfn_load+0x1cf>
1000356f:	8b 97 78 f5 00 00    	mov    edx,DWORD PTR [edi+0xf578]
10003575:	8d 4a 01             	lea    ecx,[edx+0x1]
10003578:	89 8f 78 f5 00 00    	mov    DWORD PTR [edi+0xf578],ecx
1000357e:	89 34 90             	mov    DWORD PTR [eax+edx*4],esi
10003581:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10003584:	01 87 7c f5 00 00    	add    DWORD PTR [edi+0xf57c],eax
1000358a:	50                   	push   eax
1000358b:	6a 04                	push   0x4
1000358d:	68 3e 86 00 10       	push   0x1000863e	1000358e: R_386_32	.text
10003592:	56                   	push   esi
10003593:	e8 fc ff ff ff       	call   10003594 <ssfn_load+0xda>	10003594: R_386_PC32	memcmp
10003598:	83 c4 10             	add    esp,0x10
1000359b:	89 c5                	mov    ebp,eax
1000359d:	85 c0                	test   eax,eax
1000359f:	75 29                	jne    100035ca <ssfn_load+0x110>
100035a1:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
100035a4:	01 f3                	add    ebx,esi
100035a6:	83 c6 08             	add    esi,0x8
100035a9:	39 de                	cmp    esi,ebx
100035ab:	0f 83 fa 00 00 00    	jae    100036ab <ssfn_load+0x1f1>
100035b1:	50                   	push   eax
100035b2:	50                   	push   eax
100035b3:	56                   	push   esi
100035b4:	57                   	push   edi
100035b5:	e8 fc ff ff ff       	call   100035b6 <ssfn_load+0xfc>	100035b6: R_386_PC32	ssfn_load
100035ba:	83 c4 10             	add    esp,0x10
100035bd:	85 c0                	test   eax,eax
100035bf:	0f 85 e6 00 00 00    	jne    100036ab <ssfn_load+0x1f1>
100035c5:	03 76 04             	add    esi,DWORD PTR [esi+0x4]
100035c8:	eb df                	jmp    100035a9 <ssfn_load+0xef>
100035ca:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
100035cd:	83 e0 0f             	and    eax,0xf
100035d0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100035d4:	53                   	push   ebx
100035d5:	6a 04                	push   0x4
100035d7:	68 43 86 00 10       	push   0x10008643	100035d8: R_386_32	.text
100035dc:	56                   	push   esi
100035dd:	e8 fc ff ff ff       	call   100035de <ssfn_load+0x124>	100035de: R_386_PC32	memcmp
100035e2:	83 c4 10             	add    esp,0x10
100035e5:	89 c5                	mov    ebp,eax
100035e7:	85 c0                	test   eax,eax
100035e9:	0f 85 03 ff ff ff    	jne    100034f2 <ssfn_load+0x38>
100035ef:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
100035f2:	8d 44 1e fc          	lea    eax,[esi+ebx*1-0x4]
100035f6:	51                   	push   ecx
100035f7:	6a 04                	push   0x4
100035f9:	68 48 86 00 10       	push   0x10008648	100035fa: R_386_32	.text
100035fe:	50                   	push   eax
100035ff:	e8 fc ff ff ff       	call   10003600 <ssfn_load+0x146>	10003600: R_386_PC32	memcmp
10003604:	83 c4 10             	add    esp,0x10
10003607:	85 c0                	test   eax,eax
10003609:	0f 85 e3 fe ff ff    	jne    100034f2 <ssfn_load+0x38>
1000360f:	80 7c 24 0f 04       	cmp    BYTE PTR [esp+0xf],0x4
10003614:	0f 87 d8 fe ff ff    	ja     100034f2 <ssfn_load+0x38>
1000361a:	0f b7 4e 0e          	movzx  ecx,WORD PTR [esi+0xe]
1000361e:	39 cb                	cmp    ebx,ecx
10003620:	0f 86 cc fe ff ff    	jbe    100034f2 <ssfn_load+0x38>
10003626:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
10003629:	39 c3                	cmp    ebx,eax
1000362b:	0f 86 c1 fe ff ff    	jbe    100034f2 <ssfn_load+0x38>
10003631:	3b 5e 14             	cmp    ebx,DWORD PTR [esi+0x14]
10003634:	0f 86 b8 fe ff ff    	jbe    100034f2 <ssfn_load+0x38>
1000363a:	3b 5e 18             	cmp    ebx,DWORD PTR [esi+0x18]
1000363d:	0f 86 af fe ff ff    	jbe    100034f2 <ssfn_load+0x38>
10003643:	3b 5e 1c             	cmp    ebx,DWORD PTR [esi+0x1c]
10003646:	0f 86 a6 fe ff ff    	jbe    100034f2 <ssfn_load+0x38>
1000364c:	39 c1                	cmp    ecx,eax
1000364e:	0f 83 9e fe ff ff    	jae    100034f2 <ssfn_load+0x38>
10003654:	0f b6 5c 24 0f       	movzx  ebx,BYTE PTR [esp+0xf]
10003659:	8d 1c 9f             	lea    ebx,[edi+ebx*4]
1000365c:	8b 83 a4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a4]
10003662:	40                   	inc    eax
10003663:	89 83 a4 f5 00 00    	mov    DWORD PTR [ebx+0xf5a4],eax
10003669:	52                   	push   edx
1000366a:	c1 e0 02             	shl    eax,0x2
1000366d:	52                   	push   edx
1000366e:	50                   	push   eax
1000366f:	ff 33                	push   DWORD PTR [ebx]
10003671:	e8 fc ff ff ff       	call   10003672 <ssfn_load+0x1b8>	10003672: R_386_PC32	realloc
10003676:	83 c4 10             	add    esp,0x10
10003679:	89 03                	mov    DWORD PTR [ebx],eax
1000367b:	85 c0                	test   eax,eax
1000367d:	75 0f                	jne    1000368e <ssfn_load+0x1d4>
1000367f:	c7 83 a4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5a4],0x0
10003689:	83 cd ff             	or     ebp,0xffffffff
1000368c:	eb 1d                	jmp    100036ab <ssfn_load+0x1f1>
1000368e:	8b 93 a4 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf5a4]
10003694:	83 ec 0c             	sub    esp,0xc
10003697:	89 74 90 fc          	mov    DWORD PTR [eax+edx*4-0x4],esi
1000369b:	57                   	push   edi
1000369c:	e8 a0 f5 ff ff       	call   10002c41 <_ssfn_fc>
100036a1:	83 c4 10             	add    esp,0x10
100036a4:	eb 05                	jmp    100036ab <ssfn_load+0x1f1>
100036a6:	bd fc ff ff ff       	mov    ebp,0xfffffffc
100036ab:	83 c4 1c             	add    esp,0x1c
100036ae:	89 e8                	mov    eax,ebp
100036b0:	5b                   	pop    ebx
100036b1:	5e                   	pop    esi
100036b2:	5f                   	pop    edi
100036b3:	5d                   	pop    ebp
100036b4:	c3                   	ret    

100036b5 <ssfn_free>:
100036b5:	57                   	push   edi
100036b6:	56                   	push   esi
100036b7:	53                   	push   ebx
100036b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100036bc:	85 db                	test   ebx,ebx
100036be:	0f 84 83 00 00 00    	je     10003747 <ssfn_free+0x92>
100036c4:	83 ec 0c             	sub    esp,0xc
100036c7:	53                   	push   ebx
100036c8:	e8 74 f5 ff ff       	call   10002c41 <_ssfn_fc>
100036cd:	83 c4 10             	add    esp,0x10
100036d0:	83 bb 70 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf570],0x0
100036d7:	74 32                	je     1000370b <ssfn_free+0x56>
100036d9:	31 f6                	xor    esi,esi
100036db:	8b 83 70 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf570]
100036e1:	39 b3 78 f5 00 00    	cmp    DWORD PTR [ebx+0xf578],esi
100036e7:	7e 16                	jle    100036ff <ssfn_free+0x4a>
100036e9:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
100036ec:	85 c0                	test   eax,eax
100036ee:	74 0c                	je     100036fc <ssfn_free+0x47>
100036f0:	83 ec 0c             	sub    esp,0xc
100036f3:	50                   	push   eax
100036f4:	e8 fc ff ff ff       	call   100036f5 <ssfn_free+0x40>	100036f5: R_386_PC32	free
100036f9:	83 c4 10             	add    esp,0x10
100036fc:	46                   	inc    esi
100036fd:	eb dc                	jmp    100036db <ssfn_free+0x26>
100036ff:	83 ec 0c             	sub    esp,0xc
10003702:	50                   	push   eax
10003703:	e8 fc ff ff ff       	call   10003704 <ssfn_free+0x4f>	10003704: R_386_PC32	free
10003708:	83 c4 10             	add    esp,0x10
1000370b:	31 f6                	xor    esi,esi
1000370d:	8b 04 b3             	mov    eax,DWORD PTR [ebx+esi*4]
10003710:	85 c0                	test   eax,eax
10003712:	74 0c                	je     10003720 <ssfn_free+0x6b>
10003714:	83 ec 0c             	sub    esp,0xc
10003717:	50                   	push   eax
10003718:	e8 fc ff ff ff       	call   10003719 <ssfn_free+0x64>	10003719: R_386_PC32	free
1000371d:	83 c4 10             	add    esp,0x10
10003720:	46                   	inc    esi
10003721:	83 fe 05             	cmp    esi,0x5
10003724:	75 e7                	jne    1000370d <ssfn_free+0x58>
10003726:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000372c:	85 c0                	test   eax,eax
1000372e:	74 0c                	je     1000373c <ssfn_free+0x87>
10003730:	83 ec 0c             	sub    esp,0xc
10003733:	50                   	push   eax
10003734:	e8 fc ff ff ff       	call   10003735 <ssfn_free+0x80>	10003735: R_386_PC32	free
10003739:	83 c4 10             	add    esp,0x10
1000373c:	b9 72 3d 00 00       	mov    ecx,0x3d72
10003741:	31 c0                	xor    eax,eax
10003743:	89 df                	mov    edi,ebx
10003745:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003747:	5b                   	pop    ebx
10003748:	5e                   	pop    esi
10003749:	5f                   	pop    edi
1000374a:	c3                   	ret    

1000374b <ssfn_mem>:
1000374b:	55                   	push   ebp
1000374c:	31 c0                	xor    eax,eax
1000374e:	57                   	push   edi
1000374f:	56                   	push   esi
10003750:	53                   	push   ebx
10003751:	83 ec 08             	sub    esp,0x8
10003754:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10003758:	85 d2                	test   edx,edx
1000375a:	0f 84 8e 00 00 00    	je     100037ee <ssfn_mem+0xa3>
10003760:	b8 c8 f5 00 00       	mov    eax,0xf5c8
10003765:	31 c9                	xor    ecx,ecx
10003767:	8b 9c 8a a4 f5 00 00 	mov    ebx,DWORD PTR [edx+ecx*4+0xf5a4]
1000376e:	41                   	inc    ecx
1000376f:	8d 04 98             	lea    eax,[eax+ebx*4]
10003772:	83 f9 05             	cmp    ecx,0x5
10003775:	75 f0                	jne    10003767 <ssfn_mem+0x1c>
10003777:	03 82 7c f5 00 00    	add    eax,DWORD PTR [edx+0xf57c]
1000377d:	31 c9                	xor    ecx,ecx
1000377f:	8b b4 8a 28 f5 00 00 	mov    esi,DWORD PTR [edx+ecx*4+0xf528]
10003786:	89 34 24             	mov    DWORD PTR [esp],esi
10003789:	85 f6                	test   esi,esi
1000378b:	74 48                	je     100037d5 <ssfn_mem+0x8a>
1000378d:	31 db                	xor    ebx,ebx
1000378f:	8b 34 24             	mov    esi,DWORD PTR [esp]
10003792:	8b 3c 9e             	mov    edi,DWORD PTR [esi+ebx*4]
10003795:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
10003799:	85 ff                	test   edi,edi
1000379b:	74 2a                	je     100037c7 <ssfn_mem+0x7c>
1000379d:	31 f6                	xor    esi,esi
1000379f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
100037a3:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
100037a6:	85 ed                	test   ebp,ebp
100037a8:	74 0f                	je     100037b9 <ssfn_mem+0x6e>
100037aa:	0f b7 7d 00          	movzx  edi,WORD PTR [ebp+0x0]
100037ae:	0f b6 6d 02          	movzx  ebp,BYTE PTR [ebp+0x2]
100037b2:	0f af fd             	imul   edi,ebp
100037b5:	8d 44 38 08          	lea    eax,[eax+edi*1+0x8]
100037b9:	46                   	inc    esi
100037ba:	81 fe 00 01 00 00    	cmp    esi,0x100
100037c0:	75 dd                	jne    1000379f <ssfn_mem+0x54>
100037c2:	05 00 04 00 00       	add    eax,0x400
100037c7:	43                   	inc    ebx
100037c8:	81 fb 00 01 00 00    	cmp    ebx,0x100
100037ce:	75 bf                	jne    1000378f <ssfn_mem+0x44>
100037d0:	05 00 04 00 00       	add    eax,0x400
100037d5:	41                   	inc    ecx
100037d6:	83 f9 11             	cmp    ecx,0x11
100037d9:	75 a4                	jne    1000377f <ssfn_mem+0x34>
100037db:	83 ba 6c f5 00 00 00 	cmp    DWORD PTR [edx+0xf56c],0x0
100037e2:	74 0a                	je     100037ee <ssfn_mem+0xa3>
100037e4:	8b 92 84 f5 00 00    	mov    edx,DWORD PTR [edx+0xf584]
100037ea:	01 d2                	add    edx,edx
100037ec:	01 d0                	add    eax,edx
100037ee:	83 c4 08             	add    esp,0x8
100037f1:	5b                   	pop    ebx
100037f2:	5e                   	pop    esi
100037f3:	5f                   	pop    edi
100037f4:	5d                   	pop    ebp
100037f5:	c3                   	ret    

100037f6 <ssfn_select>:
100037f6:	55                   	push   ebp
100037f7:	57                   	push   edi
100037f8:	56                   	push   esi
100037f9:	53                   	push   ebx
100037fa:	83 ec 1c             	sub    esp,0x1c
100037fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10003801:	85 db                	test   ebx,ebx
10003803:	75 0a                	jne    1000380f <ssfn_select+0x19>
10003805:	be fc ff ff ff       	mov    esi,0xfffffffc
1000380a:	e9 18 01 00 00       	jmp    10003927 <ssfn_select+0x131>
1000380f:	83 ec 0c             	sub    esp,0xc
10003812:	53                   	push   ebx
10003813:	e8 29 f4 ff ff       	call   10002c41 <_ssfn_fc>
10003818:	83 c4 10             	add    esp,0x10
1000381b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
1000381f:	81 e6 00 c0 ff ff    	and    esi,0xffffc000
10003825:	0f 85 e9 00 00 00    	jne    10003914 <ssfn_select+0x11e>
1000382b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000382f:	83 e8 08             	sub    eax,0x8
10003832:	3d b8 00 00 00       	cmp    eax,0xb8
10003837:	0f 87 de 00 00 00    	ja     1000391b <ssfn_select+0x125>
1000383d:	81 7c 24 34 fe 00 00 00 	cmp    DWORD PTR [esp+0x34],0xfe
10003845:	75 76                	jne    100038bd <ssfn_select+0xc7>
10003847:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
1000384c:	74 b7                	je     10003805 <ssfn_select+0xf>
1000384e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10003852:	80 38 00             	cmp    BYTE PTR [eax],0x0
10003855:	74 ae                	je     10003805 <ssfn_select+0xf>
10003857:	31 ed                	xor    ebp,ebp
10003859:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000385d:	80 3c 28 00          	cmp    BYTE PTR [eax+ebp*1],0x0
10003861:	74 03                	je     10003866 <ssfn_select+0x70>
10003863:	45                   	inc    ebp
10003864:	eb f3                	jmp    10003859 <ssfn_select+0x63>
10003866:	8d 43 14             	lea    eax,[ebx+0x14]
10003869:	89 df                	mov    edi,ebx
1000386b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000386f:	8b 87 a4 f5 00 00    	mov    eax,DWORD PTR [edi+0xf5a4]
10003875:	31 d2                	xor    edx,edx
10003877:	89 04 24             	mov    DWORD PTR [esp],eax
1000387a:	39 14 24             	cmp    DWORD PTR [esp],edx
1000387d:	7e 33                	jle    100038b2 <ssfn_select+0xbc>
1000387f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10003883:	8b 07                	mov    eax,DWORD PTR [edi]
10003885:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
10003888:	50                   	push   eax
10003889:	8d 41 20             	lea    eax,[ecx+0x20]
1000388c:	55                   	push   ebp
1000388d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10003891:	50                   	push   eax
10003892:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
10003896:	e8 fc ff ff ff       	call   10003897 <ssfn_select+0xa1>	10003897: R_386_PC32	memcmp
1000389b:	83 c4 10             	add    esp,0x10
1000389e:	85 c0                	test   eax,eax
100038a0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100038a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100038a8:	75 05                	jne    100038af <ssfn_select+0xb9>
100038aa:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
100038ad:	eb 34                	jmp    100038e3 <ssfn_select+0xed>
100038af:	42                   	inc    edx
100038b0:	eb c8                	jmp    1000387a <ssfn_select+0x84>
100038b2:	83 c7 04             	add    edi,0x4
100038b5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
100038b9:	75 b4                	jne    1000386f <ssfn_select+0x79>
100038bb:	eb 65                	jmp    10003922 <ssfn_select+0x12c>
100038bd:	81 7c 24 34 ff 00 00 00 	cmp    DWORD PTR [esp+0x34],0xff
100038c5:	74 15                	je     100038dc <ssfn_select+0xe6>
100038c7:	83 7c 24 34 04       	cmp    DWORD PTR [esp+0x34],0x4
100038cc:	7f 54                	jg     10003922 <ssfn_select+0x12c>
100038ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100038d2:	83 bc 83 a4 f5 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0xf5a4],0x0
100038da:	74 46                	je     10003922 <ssfn_select+0x12c>
100038dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
100038e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100038e7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
100038ee:	89 83 b8 f5 00 00    	mov    DWORD PTR [ebx+0xf5b8],eax
100038f4:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
100038fe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10003902:	89 83 bc f5 00 00    	mov    DWORD PTR [ebx+0xf5bc],eax
10003908:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000390c:	89 83 c0 f5 00 00    	mov    DWORD PTR [ebx+0xf5c0],eax
10003912:	eb 13                	jmp    10003927 <ssfn_select+0x131>
10003914:	be fb ff ff ff       	mov    esi,0xfffffffb
10003919:	eb 0c                	jmp    10003927 <ssfn_select+0x131>
1000391b:	be fa ff ff ff       	mov    esi,0xfffffffa
10003920:	eb 05                	jmp    10003927 <ssfn_select+0x131>
10003922:	be fd ff ff ff       	mov    esi,0xfffffffd
10003927:	83 c4 1c             	add    esp,0x1c
1000392a:	89 f0                	mov    eax,esi
1000392c:	5b                   	pop    ebx
1000392d:	5e                   	pop    esi
1000392e:	5f                   	pop    edi
1000392f:	5d                   	pop    ebp
10003930:	c3                   	ret    

10003931 <ssfn_render>:
10003931:	55                   	push   ebp
10003932:	57                   	push   edi
10003933:	56                   	push   esi
10003934:	53                   	push   ebx
10003935:	81 ec ec 05 01 00    	sub    esp,0x105ec
1000393b:	83 bc 24 08 06 01 00 00 	cmp    DWORD PTR [esp+0x10608],0x0
10003943:	8b ac 24 00 06 01 00 	mov    ebp,DWORD PTR [esp+0x10600]
1000394a:	0f 94 c2             	sete   dl
1000394d:	c7 84 24 d8 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xd8],0x0
10003958:	85 ed                	test   ebp,ebp
1000395a:	0f 94 c0             	sete   al
1000395d:	08 c2                	or     dl,al
1000395f:	74 0a                	je     1000396b <ssfn_render+0x3a>
10003961:	b8 fc ff ff ff       	mov    eax,0xfffffffc
10003966:	e9 c8 1d 00 00       	jmp    10005733 <ssfn_render+0x1e02>
1000396b:	8b 84 24 08 06 01 00 	mov    eax,DWORD PTR [esp+0x10608]
10003972:	8a 10                	mov    dl,BYTE PTR [eax]
10003974:	31 c0                	xor    eax,eax
10003976:	84 d2                	test   dl,dl
10003978:	0f 84 b5 1d 00 00    	je     10005733 <ssfn_render+0x1e02>
1000397e:	80 fa 0d             	cmp    dl,0xd
10003981:	75 0f                	jne    10003992 <ssfn_render+0x61>
10003983:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
1000398a:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
10003990:	eb 32                	jmp    100039c4 <ssfn_render+0x93>
10003992:	80 fa 0a             	cmp    dl,0xa
10003995:	75 37                	jne    100039ce <ssfn_render+0x9d>
10003997:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
1000399e:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
100039a4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
100039a7:	8b 85 c4 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c4]
100039ad:	85 c0                	test   eax,eax
100039af:	75 06                	jne    100039b7 <ssfn_render+0x86>
100039b1:	8b 85 c0 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c0]
100039b7:	01 d0                	add    eax,edx
100039b9:	8b bc 24 04 06 01 00 	mov    edi,DWORD PTR [esp+0x10604]
100039c0:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
100039c4:	b8 01 00 00 00       	mov    eax,0x1
100039c9:	e9 65 1d 00 00       	jmp    10005733 <ssfn_render+0x1e02>
100039ce:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100039d1:	85 c0                	test   eax,eax
100039d3:	74 43                	je     10003a18 <ssfn_render+0xe7>
100039d5:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
100039d8:	8d b4 24 d0 00 00 00 	lea    esi,[esp+0xd0]
100039df:	56                   	push   esi
100039e0:	8d 94 24 dc 00 00 00 	lea    edx,[esp+0xdc]
100039e7:	52                   	push   edx
100039e8:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
100039ef:	50                   	push   eax
100039f0:	e8 b5 ed ff ff       	call   100027aa <_ssfn_c>
100039f5:	83 c4 10             	add    esp,0x10
100039f8:	89 c1                	mov    ecx,eax
100039fa:	85 c0                	test   eax,eax
100039fc:	0f 85 71 02 00 00    	jne    10003c73 <ssfn_render+0x342>
10003a02:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10003a08:	25 00 01 00 00       	and    eax,0x100
10003a0d:	0f 84 fe 01 00 00    	je     10003c11 <ssfn_render+0x2e0>
10003a13:	e9 1e 02 00 00       	jmp    10003c36 <ssfn_render+0x305>
10003a18:	8b b5 b8 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf5b8]
10003a1e:	c7 45 18 00 00 00 00 	mov    DWORD PTR [ebp+0x18],0x0
10003a25:	81 fe fd 00 00 00    	cmp    esi,0xfd
10003a2b:	7f 07                	jg     10003a34 <ssfn_render+0x103>
10003a2d:	89 f3                	mov    ebx,esi
10003a2f:	89 34 24             	mov    DWORD PTR [esp],esi
10003a32:	eb 37                	jmp    10003a6b <ssfn_render+0x13a>
10003a34:	31 db                	xor    ebx,ebx
10003a36:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
10003a3d:	eb 2c                	jmp    10003a6b <ssfn_render+0x13a>
10003a3f:	85 c9                	test   ecx,ecx
10003a41:	0f 84 65 01 00 00    	je     10003bac <ssfn_render+0x27b>
10003a47:	43                   	inc    ebx
10003a48:	3b 1c 24             	cmp    ebx,DWORD PTR [esp]
10003a4b:	7e 22                	jle    10003a6f <ssfn_render+0x13e>
10003a4d:	85 c9                	test   ecx,ecx
10003a4f:	0f 85 1e 02 00 00    	jne    10003c73 <ssfn_render+0x342>
10003a55:	31 db                	xor    ebx,ebx
10003a57:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
10003a5e:	81 fe ff 00 00 00    	cmp    esi,0xff
10003a64:	74 9c                	je     10003a02 <ssfn_render+0xd1>
10003a66:	be ff 00 00 00       	mov    esi,0xff
10003a6b:	31 c9                	xor    ecx,ecx
10003a6d:	eb d9                	jmp    10003a48 <ssfn_render+0x117>
10003a6f:	8b 7c 9d 00          	mov    edi,DWORD PTR [ebp+ebx*4+0x0]
10003a73:	f6 85 bc f5 00 00 03 	test   BYTE PTR [ebp+0xf5bc],0x3
10003a7a:	74 c3                	je     10003a3f <ssfn_render+0x10e>
10003a7c:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10003a87:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003a8e:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10003a95:	7e 53                	jle    10003aea <ssfn_render+0x1b9>
10003a97:	8b 14 87             	mov    edx,DWORD PTR [edi+eax*4]
10003a9a:	0f b6 42 08          	movzx  eax,BYTE PTR [edx+0x8]
10003a9e:	c1 f8 04             	sar    eax,0x4
10003aa1:	33 85 bc f5 00 00    	xor    eax,DWORD PTR [ebp+0xf5bc]
10003aa7:	a8 03                	test   al,0x3
10003aa9:	75 36                	jne    10003ae1 <ssfn_render+0x1b0>
10003aab:	0f b6 42 0b          	movzx  eax,BYTE PTR [edx+0xb]
10003aaf:	3b 85 c0 f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf5c0]
10003ab5:	75 2a                	jne    10003ae1 <ssfn_render+0x1b0>
10003ab7:	8d 84 24 d0 00 00 00 	lea    eax,[esp+0xd0]
10003abe:	50                   	push   eax
10003abf:	8d 84 24 dc 00 00 00 	lea    eax,[esp+0xdc]
10003ac6:	50                   	push   eax
10003ac7:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
10003ace:	52                   	push   edx
10003acf:	e8 d6 ec ff ff       	call   100027aa <_ssfn_c>
10003ad4:	83 c4 10             	add    esp,0x10
10003ad7:	89 c1                	mov    ecx,eax
10003ad9:	85 c0                	test   eax,eax
10003adb:	0f 85 0e 01 00 00    	jne    10003bef <ssfn_render+0x2be>
10003ae1:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
10003ae8:	eb 9d                	jmp    10003a87 <ssfn_render+0x156>
10003aea:	85 c9                	test   ecx,ecx
10003aec:	0f 85 55 ff ff ff    	jne    10003a47 <ssfn_render+0x116>
10003af2:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10003afd:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003b04:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10003b0b:	0f 8e a3 1b 00 00    	jle    100056b4 <ssfn_render+0x1d83>
10003b11:	8b 04 87             	mov    eax,DWORD PTR [edi+eax*4]
10003b14:	0f b6 50 0b          	movzx  edx,BYTE PTR [eax+0xb]
10003b18:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
10003b1e:	74 09                	je     10003b29 <ssfn_render+0x1f8>
10003b20:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
10003b27:	eb d4                	jmp    10003afd <ssfn_render+0x1cc>
10003b29:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
10003b30:	51                   	push   ecx
10003b31:	8d 94 24 dc 00 00 00 	lea    edx,[esp+0xdc]
10003b38:	52                   	push   edx
10003b39:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
10003b40:	50                   	push   eax
10003b41:	e8 64 ec ff ff       	call   100027aa <_ssfn_c>
10003b46:	83 c4 10             	add    esp,0x10
10003b49:	89 c1                	mov    ecx,eax
10003b4b:	85 c0                	test   eax,eax
10003b4d:	74 d1                	je     10003b20 <ssfn_render+0x1ef>
10003b4f:	e9 9b 00 00 00       	jmp    10003bef <ssfn_render+0x2be>
10003b54:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
10003b57:	0f b6 41 08          	movzx  eax,BYTE PTR [ecx+0x8]
10003b5b:	c1 f8 04             	sar    eax,0x4
10003b5e:	31 d0                	xor    eax,edx
10003b60:	a8 03                	test   al,0x3
10003b62:	0f 84 5c 1b 00 00    	je     100056c4 <ssfn_render+0x1d93>
10003b68:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
10003b6f:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003b76:	8b 95 bc f5 00 00    	mov    edx,DWORD PTR [ebp+0xf5bc]
10003b7c:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10003b83:	7f cf                	jg     10003b54 <ssfn_render+0x223>
10003b85:	83 e2 03             	and    edx,0x3
10003b88:	83 fa 03             	cmp    edx,0x3
10003b8b:	75 1f                	jne    10003bac <ssfn_render+0x27b>
10003b8d:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10003b98:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003b9f:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10003ba6:	0f 8f 47 1b 00 00    	jg     100056f3 <ssfn_render+0x1dc2>
10003bac:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10003bb7:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003bbe:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10003bc5:	7e 43                	jle    10003c0a <ssfn_render+0x2d9>
10003bc7:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
10003bce:	51                   	push   ecx
10003bcf:	8d 94 24 dc 00 00 00 	lea    edx,[esp+0xdc]
10003bd6:	52                   	push   edx
10003bd7:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
10003bde:	ff 34 87             	push   DWORD PTR [edi+eax*4]
10003be1:	e8 c4 eb ff ff       	call   100027aa <_ssfn_c>
10003be6:	83 c4 10             	add    esp,0x10
10003be9:	89 c1                	mov    ecx,eax
10003beb:	85 c0                	test   eax,eax
10003bed:	74 12                	je     10003c01 <ssfn_render+0x2d0>
10003bef:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003bf6:	8b 04 87             	mov    eax,DWORD PTR [edi+eax*4]
10003bf9:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
10003bfc:	e9 46 fe ff ff       	jmp    10003a47 <ssfn_render+0x116>
10003c01:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
10003c08:	eb ad                	jmp    10003bb7 <ssfn_render+0x286>
10003c0a:	31 c9                	xor    ecx,ecx
10003c0c:	e9 36 fe ff ff       	jmp    10003a47 <ssfn_render+0x116>
10003c11:	8b 9d b8 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5b8]
10003c17:	c7 84 24 d0 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xd0],0x0
10003c22:	81 fb fd 00 00 00    	cmp    ebx,0xfd
10003c28:	7f 16                	jg     10003c40 <ssfn_render+0x30f>
10003c2a:	89 d8                	mov    eax,ebx
10003c2c:	31 c9                	xor    ecx,ecx
10003c2e:	39 d8                	cmp    eax,ebx
10003c30:	7e 15                	jle    10003c47 <ssfn_render+0x316>
10003c32:	85 c9                	test   ecx,ecx
10003c34:	75 3d                	jne    10003c73 <ssfn_render+0x342>
10003c36:	b8 f9 ff ff ff       	mov    eax,0xfffffff9
10003c3b:	e9 f3 1a 00 00       	jmp    10005733 <ssfn_render+0x1e02>
10003c40:	bb 04 00 00 00       	mov    ebx,0x4
10003c45:	eb e5                	jmp    10003c2c <ssfn_render+0x2fb>
10003c47:	85 c9                	test   ecx,ecx
10003c49:	75 28                	jne    10003c73 <ssfn_render+0x342>
10003c4b:	83 bc 85 a4 f5 00 00 00 	cmp    DWORD PTR [ebp+eax*4+0xf5a4],0x0
10003c53:	74 1b                	je     10003c70 <ssfn_render+0x33f>
10003c55:	8b 54 85 00          	mov    edx,DWORD PTR [ebp+eax*4+0x0]
10003c59:	8b 12                	mov    edx,DWORD PTR [edx]
10003c5b:	85 d2                	test   edx,edx
10003c5d:	74 11                	je     10003c70 <ssfn_render+0x33f>
10003c5f:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
10003c62:	80 3c 32 00          	cmp    BYTE PTR [edx+esi*1],0x0
10003c66:	78 08                	js     10003c70 <ssfn_render+0x33f>
10003c68:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
10003c6b:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
10003c6e:	01 d1                	add    ecx,edx
10003c70:	40                   	inc    eax
10003c71:	eb bb                	jmp    10003c2e <ssfn_render+0x2fd>
10003c73:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
10003c76:	b8 fd ff ff ff       	mov    eax,0xfffffffd
10003c7b:	85 f6                	test   esi,esi
10003c7d:	0f 84 b0 1a 00 00    	je     10005733 <ssfn_render+0x1e02>
10003c83:	80 7e 0b 00          	cmp    BYTE PTR [esi+0xb],0x0
10003c87:	0f 84 a6 1a 00 00    	je     10005733 <ssfn_render+0x1e02>
10003c8d:	8b 9d c0 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5c0]
10003c93:	85 db                	test   ebx,ebx
10003c95:	0f 84 98 1a 00 00    	je     10005733 <ssfn_render+0x1e02>
10003c9b:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
10003ca2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003ca6:	c1 e8 10             	shr    eax,0x10
10003ca9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003cad:	83 f8 10             	cmp    eax,0x10
10003cb0:	0f 87 ab fc ff ff    	ja     10003961 <ssfn_render+0x30>
10003cb6:	8d 41 06             	lea    eax,[ecx+0x6]
10003cb9:	89 8d 74 f5 00 00    	mov    DWORD PTR [ebp+0xf574],ecx
10003cbf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003cc3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
10003cc7:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10003ccd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003cd1:	0f ba e0 0c          	bt     eax,0xc
10003cd5:	72 22                	jb     10003cf9 <ssfn_render+0x3c8>
10003cd7:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10003cda:	83 e0 0f             	and    eax,0xf
10003cdd:	3c 03                	cmp    al,0x3
10003cdf:	74 18                	je     10003cf9 <ssfn_render+0x3c8>
10003ce1:	8a 56 0c             	mov    dl,BYTE PTR [esi+0xc]
10003ce4:	84 d2                	test   dl,dl
10003ce6:	74 11                	je     10003cf9 <ssfn_render+0x3c8>
10003ce8:	0f b6 fa             	movzx  edi,dl
10003ceb:	0f b6 46 0b          	movzx  eax,BYTE PTR [esi+0xb]
10003cef:	0f af c3             	imul   eax,ebx
10003cf2:	99                   	cdq    
10003cf3:	f7 ff                	idiv   edi
10003cf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003cf9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003cfd:	25 00 02 00 00       	and    eax,0x200
10003d02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10003d06:	75 34                	jne    10003d3c <ssfn_render+0x40b>
10003d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003d0c:	8b 84 85 28 f5 00 00 	mov    eax,DWORD PTR [ebp+eax*4+0xf528]
10003d13:	85 c0                	test   eax,eax
10003d15:	74 25                	je     10003d3c <ssfn_render+0x40b>
10003d17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10003d1b:	0f b6 d6             	movzx  edx,dh
10003d1e:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10003d21:	85 c0                	test   eax,eax
10003d23:	74 17                	je     10003d3c <ssfn_render+0x40b>
10003d25:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
10003d2a:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10003d2d:	85 c0                	test   eax,eax
10003d2f:	74 0b                	je     10003d3c <ssfn_render+0x40b>
10003d31:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10003d37:	e9 cf 0c 00 00       	jmp    10004a0b <ssfn_render+0x10da>
10003d3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003d40:	0f b6 7e 0b          	movzx  edi,BYTE PTR [esi+0xb]
10003d44:	89 04 24             	mov    DWORD PTR [esp],eax
10003d47:	f6 44 24 08 40       	test   BYTE PTR [esp+0x8],0x40
10003d4c:	75 10                	jne    10003d5e <ssfn_render+0x42d>
10003d4e:	89 3c 24             	mov    DWORD PTR [esp],edi
10003d51:	39 fb                	cmp    ebx,edi
10003d53:	7e 09                	jle    10003d5e <ssfn_render+0x42d>
10003d55:	83 c3 04             	add    ebx,0x4
10003d58:	83 e3 fc             	and    ebx,0xfffffffc
10003d5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
10003d5e:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
10003d63:	f6 44 24 08 02       	test   BYTE PTR [esp+0x8],0x2
10003d68:	74 10                	je     10003d7a <ssfn_render+0x449>
10003d6a:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10003d6d:	c0 e8 05             	shr    al,0x5
10003d70:	83 f0 01             	xor    eax,0x1
10003d73:	83 e0 01             	and    eax,0x1
10003d76:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
10003d7a:	c6 44 24 40 00       	mov    BYTE PTR [esp+0x40],0x0
10003d7f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
10003d84:	74 10                	je     10003d96 <ssfn_render+0x465>
10003d86:	f6 46 08 10          	test   BYTE PTR [esi+0x8],0x10
10003d8a:	75 0a                	jne    10003d96 <ssfn_render+0x465>
10003d8c:	8d 47 40             	lea    eax,[edi+0x40]
10003d8f:	c1 f8 06             	sar    eax,0x6
10003d92:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
10003d96:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
10003d9a:	0f af 04 24          	imul   eax,DWORD PTR [esp]
10003d9e:	8d 44 07 ff          	lea    eax,[edi+eax*1-0x1]
10003da2:	99                   	cdq    
10003da3:	f7 ff                	idiv   edi
10003da5:	89 c1                	mov    ecx,eax
10003da7:	31 c0                	xor    eax,eax
10003da9:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
10003dae:	74 0b                	je     10003dbb <ssfn_render+0x48a>
10003db0:	8b 04 24             	mov    eax,DWORD PTR [esp]
10003db3:	bb 04 00 00 00       	mov    ebx,0x4
10003db8:	99                   	cdq    
10003db9:	f7 fb                	idiv   ebx
10003dbb:	0f b6 7c 24 40       	movzx  edi,BYTE PTR [esp+0x40]
10003dc0:	01 c8                	add    eax,ecx
10003dc2:	8b 34 24             	mov    esi,DWORD PTR [esp]
10003dc5:	01 f8                	add    eax,edi
10003dc7:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
10003dcb:	0f af f0             	imul   esi,eax
10003dce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003dd2:	81 fe ff f4 00 00    	cmp    esi,0xf4ff
10003dd8:	b8 fa ff ff ff       	mov    eax,0xfffffffa
10003ddd:	0f 8f 50 19 00 00    	jg     10005733 <ssfn_render+0x1e02>
10003de3:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
10003de8:	0f 85 e4 00 00 00    	jne    10003ed2 <ssfn_render+0x5a1>
10003dee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003df2:	8d 5c 85 00          	lea    ebx,[ebp+eax*4+0x0]
10003df6:	83 bb 28 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf528],0x0
10003dfd:	75 2f                	jne    10003e2e <ssfn_render+0x4fd>
10003dff:	83 ec 0c             	sub    esp,0xc
10003e02:	68 00 04 00 00       	push   0x400
10003e07:	e8 fc ff ff ff       	call   10003e08 <ssfn_render+0x4d7>	10003e08: R_386_PC32	malloc
10003e0c:	83 c4 10             	add    esp,0x10
10003e0f:	89 83 28 f5 00 00    	mov    DWORD PTR [ebx+0xf528],eax
10003e15:	85 c0                	test   eax,eax
10003e17:	75 08                	jne    10003e21 <ssfn_render+0x4f0>
10003e19:	83 c8 ff             	or     eax,0xffffffff
10003e1c:	e9 12 19 00 00       	jmp    10005733 <ssfn_render+0x1e02>
10003e21:	89 c7                	mov    edi,eax
10003e23:	b9 00 01 00 00       	mov    ecx,0x100
10003e28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10003e2c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003e2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003e32:	0f b6 fc             	movzx  edi,ah
10003e35:	8b 83 28 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf528]
10003e3b:	8d 14 b8             	lea    edx,[eax+edi*4]
10003e3e:	83 3a 00             	cmp    DWORD PTR [edx],0x0
10003e41:	75 32                	jne    10003e75 <ssfn_render+0x544>
10003e43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10003e47:	83 ec 0c             	sub    esp,0xc
10003e4a:	68 00 04 00 00       	push   0x400
10003e4f:	e8 fc ff ff ff       	call   10003e50 <ssfn_render+0x51f>	10003e50: R_386_PC32	malloc
10003e54:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10003e58:	83 c4 10             	add    esp,0x10
10003e5b:	89 02                	mov    DWORD PTR [edx],eax
10003e5d:	8b 83 28 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf528]
10003e63:	8b 14 b8             	mov    edx,DWORD PTR [eax+edi*4]
10003e66:	85 d2                	test   edx,edx
10003e68:	74 af                	je     10003e19 <ssfn_render+0x4e8>
10003e6a:	b9 00 01 00 00       	mov    ecx,0x100
10003e6f:	31 c0                	xor    eax,eax
10003e71:	89 d7                	mov    edi,edx
10003e73:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003e75:	8b 9c 24 d0 00 00 00 	mov    ebx,DWORD PTR [esp+0xd0]
10003e7c:	83 ec 0c             	sub    esp,0xc
10003e7f:	0f b6 ff             	movzx  edi,bh
10003e82:	89 d8                	mov    eax,ebx
10003e84:	0f b6 db             	movzx  ebx,bl
10003e87:	c1 e8 10             	shr    eax,0x10
10003e8a:	8d 54 85 00          	lea    edx,[ebp+eax*4+0x0]
10003e8e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
10003e92:	8b 82 28 f5 00 00    	mov    eax,DWORD PTR [edx+0xf528]
10003e98:	8b 04 b8             	mov    eax,DWORD PTR [eax+edi*4]
10003e9b:	8d 0c 98             	lea    ecx,[eax+ebx*4]
10003e9e:	8d 46 08             	lea    eax,[esi+0x8]
10003ea1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
10003ea5:	50                   	push   eax
10003ea6:	e8 fc ff ff ff       	call   10003ea7 <ssfn_render+0x576>	10003ea7: R_386_PC32	malloc
10003eab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10003eaf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10003eb3:	89 01                	mov    DWORD PTR [ecx],eax
10003eb5:	83 c4 10             	add    esp,0x10
10003eb8:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10003ebe:	8b 82 28 f5 00 00    	mov    eax,DWORD PTR [edx+0xf528]
10003ec4:	8b 04 b8             	mov    eax,DWORD PTR [eax+edi*4]
10003ec7:	83 3c 98 00          	cmp    DWORD PTR [eax+ebx*4],0x0
10003ecb:	75 0e                	jne    10003edb <ssfn_render+0x5aa>
10003ecd:	e9 47 ff ff ff       	jmp    10003e19 <ssfn_render+0x4e8>
10003ed2:	8d 45 1c             	lea    eax,[ebp+0x1c]
10003ed5:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10003edb:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10003ee1:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10003ee5:	74 29                	je     10003f10 <ssfn_render+0x5df>
10003ee7:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
10003eec:	74 22                	je     10003f10 <ssfn_render+0x5df>
10003eee:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10003ef1:	bb 04 00 00 00       	mov    ebx,0x4
10003ef6:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10003efa:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
10003efe:	89 cf                	mov    edi,ecx
10003f00:	29 c7                	sub    edi,eax
10003f02:	8b 04 24             	mov    eax,DWORD PTR [esp]
10003f05:	0f af c7             	imul   eax,edi
10003f08:	99                   	cdq    
10003f09:	f7 fb                	idiv   ebx
10003f0b:	99                   	cdq    
10003f0c:	f7 f9                	idiv   ecx
10003f0e:	eb 02                	jmp    10003f12 <ssfn_render+0x5e1>
10003f10:	31 c0                	xor    eax,eax
10003f12:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10003f18:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10003f1c:	8a 1c 24             	mov    bl,BYTE PTR [esp]
10003f1f:	66 89 3a             	mov    WORD PTR [edx],di
10003f22:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
10003f2a:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10003f30:	c6 44 24 0c fe       	mov    BYTE PTR [esp+0xc],0xfe
10003f35:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
10003f38:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10003f3e:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10003f44:	8a 59 04             	mov    bl,BYTE PTR [ecx+0x4]
10003f47:	01 c3                	add    ebx,eax
10003f49:	88 5a 04             	mov    BYTE PTR [edx+0x4],bl
10003f4c:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10003f52:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10003f58:	8a 49 05             	mov    cl,BYTE PTR [ecx+0x5]
10003f5b:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
10003f5e:	8b 8d 24 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf524]
10003f64:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
10003f6a:	8a 12                	mov    dl,BYTE PTR [edx]
10003f6c:	83 e2 3f             	and    edx,0x3f
10003f6f:	01 d0                	add    eax,edx
10003f71:	88 41 03             	mov    BYTE PTR [ecx+0x3],al
10003f74:	89 f1                	mov    ecx,esi
10003f76:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10003f7c:	8d 50 08             	lea    edx,[eax+0x8]
10003f7f:	b0 ff                	mov    al,0xff
10003f81:	89 d7                	mov    edi,edx
10003f83:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003f85:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10003f8b:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
10003f8f:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10003f95:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
10003f99:	8b 04 24             	mov    eax,DWORD PTR [esp]
10003f9c:	c1 e0 04             	shl    eax,0x4
10003f9f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10003fa3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003fa7:	c1 e0 04             	shl    eax,0x4
10003faa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10003fae:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
10003fb4:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
10003fb8:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
10003fbc:	0f 8e 17 0a 00 00    	jle    100049d9 <ssfn_render+0x10a8>
10003fc2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10003fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003fca:	8a 4f 01             	mov    cl,BYTE PTR [edi+0x1]
10003fcd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
10003fd0:	8a 12                	mov    dl,BYTE PTR [edx]
10003fd2:	0f b6 5f 02          	movzx  ebx,BYTE PTR [edi+0x2]
10003fd6:	83 e2 40             	and    edx,0x40
10003fd9:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
10003fdd:	88 c2                	mov    dl,al
10003fdf:	21 ca                	and    edx,ecx
10003fe1:	fe c2                	inc    dl
10003fe3:	75 14                	jne    10003ff9 <ssfn_render+0x6c8>
10003fe5:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
10003fea:	19 c0                	sbb    eax,eax
10003fec:	8d 44 07 06          	lea    eax,[edi+eax*1+0x6]
10003ff0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003ff4:	e9 d3 09 00 00       	jmp    100049cc <ssfn_render+0x109b>
10003ff9:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
10003ffd:	8b 7d 18             	mov    edi,DWORD PTR [ebp+0x18]
10004000:	c1 e0 04             	shl    eax,0x4
10004003:	0f b6 77 0b          	movzx  esi,BYTE PTR [edi+0xb]
10004007:	0f af 04 24          	imul   eax,DWORD PTR [esp]
1000400b:	99                   	cdq    
1000400c:	f7 fe                	idiv   esi
1000400e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10004012:	0f b6 c1             	movzx  eax,cl
10004015:	c1 e0 04             	shl    eax,0x4
10004018:	0f af 04 24          	imul   eax,DWORD PTR [esp]
1000401c:	99                   	cdq    
1000401d:	f7 fe                	idiv   esi
1000401f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004027:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
1000402b:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
1000402f:	c1 e2 10             	shl    edx,0x10
10004032:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
10004037:	74 0e                	je     10004047 <ssfn_render+0x716>
10004039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000403d:	83 44 24 10 06       	add    DWORD PTR [esp+0x10],0x6
10004042:	8b 58 02             	mov    ebx,DWORD PTR [eax+0x2]
10004045:	eb 0c                	jmp    10004053 <ssfn_render+0x722>
10004047:	c1 e0 08             	shl    eax,0x8
1000404a:	83 44 24 10 05       	add    DWORD PTR [esp+0x10],0x5
1000404f:	09 d0                	or     eax,edx
10004051:	09 c3                	or     ebx,eax
10004053:	8d 0c 1f             	lea    ecx,[edi+ebx*1]
10004056:	8a 01                	mov    al,BYTE PTR [ecx]
10004058:	84 c0                	test   al,al
1000405a:	0f 88 dc 04 00 00    	js     1000453c <ssfn_render+0xc0b>
10004060:	89 c7                	mov    edi,eax
10004062:	83 e7 3f             	and    edi,0x3f
10004065:	a8 40                	test   al,0x40
10004067:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
1000406b:	74 10                	je     1000407d <ssfn_render+0x74c>
1000406d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
10004071:	89 f8                	mov    eax,edi
10004073:	41                   	inc    ecx
10004074:	c1 e0 08             	shl    eax,0x8
10004077:	09 c2                	or     edx,eax
10004079:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
1000407d:	8d 41 01             	lea    eax,[ecx+0x1]
10004080:	c7 85 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf580],0x0
1000408a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000408e:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10004099:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
1000409d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
100040a1:	83 c0 04             	add    eax,0x4
100040a4:	c1 f8 02             	sar    eax,0x2
100040a7:	01 c7                	add    edi,eax
100040a9:	8b 8c 24 dc 00 00 00 	mov    ecx,DWORD PTR [esp+0xdc]
100040b0:	3b 4c 24 28          	cmp    ecx,DWORD PTR [esp+0x28]
100040b4:	0f 8f cb 01 00 00    	jg     10004285 <ssfn_render+0x954>
100040ba:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100040bd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
100040c1:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
100040c5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100040c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100040cd:	0f b6 07             	movzx  eax,BYTE PTR [edi]
100040d0:	c1 e0 04             	shl    eax,0x4
100040d3:	0f af 04 24          	imul   eax,DWORD PTR [esp]
100040d7:	99                   	cdq    
100040d8:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
100040dc:	01 c6                	add    esi,eax
100040de:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
100040e2:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
100040e6:	c1 e0 04             	shl    eax,0x4
100040e9:	0f af 04 24          	imul   eax,DWORD PTR [esp]
100040ed:	99                   	cdq    
100040ee:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
100040f2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
100040f6:	01 c3                	add    ebx,eax
100040f8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100040fc:	89 c8                	mov    eax,ecx
100040fe:	01 c9                	add    ecx,ecx
10004100:	c1 f8 02             	sar    eax,0x2
10004103:	83 e1 06             	and    ecx,0x6
10004106:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
1000410a:	d3 f8                	sar    eax,cl
1000410c:	83 e0 03             	and    eax,0x3
1000410f:	89 c1                	mov    ecx,eax
10004111:	83 f8 02             	cmp    eax,0x2
10004114:	74 4a                	je     10004160 <ssfn_render+0x82f>
10004116:	83 f8 03             	cmp    eax,0x3
10004119:	0f 84 de 00 00 00    	je     100041fd <ssfn_render+0x8cc>
1000411f:	49                   	dec    ecx
10004120:	74 20                	je     10004142 <ssfn_render+0x811>
10004122:	89 b5 9c f5 00 00    	mov    DWORD PTR [ebp+0xf59c],esi
10004128:	89 b5 94 f5 00 00    	mov    DWORD PTR [ebp+0xf594],esi
1000412e:	89 9d a0 f5 00 00    	mov    DWORD PTR [ebp+0xf5a0],ebx
10004134:	89 9d 98 f5 00 00    	mov    DWORD PTR [ebp+0xf598],ebx
1000413a:	83 c7 02             	add    edi,0x2
1000413d:	e9 37 01 00 00       	jmp    10004279 <ssfn_render+0x948>
10004142:	83 ec 0c             	sub    esp,0xc
10004145:	83 c7 02             	add    edi,0x2
10004148:	53                   	push   ebx
10004149:	56                   	push   esi
1000414a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
1000414e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
10004152:	55                   	push   ebp
10004153:	e8 f9 e7 ff ff       	call   10002951 <_ssfn_l>
10004158:	83 c4 20             	add    esp,0x20
1000415b:	e9 19 01 00 00       	jmp    10004279 <ssfn_render+0x948>
10004160:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
10004164:	83 c7 04             	add    edi,0x4
10004167:	c1 e0 04             	shl    eax,0x4
1000416a:	0f af 04 24          	imul   eax,DWORD PTR [esp]
1000416e:	99                   	cdq    
1000416f:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
10004173:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10004177:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
1000417b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
1000417f:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10004183:	c1 e0 04             	shl    eax,0x4
10004186:	0f af 04 24          	imul   eax,DWORD PTR [esp]
1000418a:	99                   	cdq    
1000418b:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
1000418f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10004193:	6a 00                	push   0x0
10004195:	53                   	push   ebx
10004196:	56                   	push   esi
10004197:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
1000419b:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
1000419f:	99                   	cdq    
100041a0:	f7 f9                	idiv   ecx
100041a2:	01 d8                	add    eax,ebx
100041a4:	50                   	push   eax
100041a5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
100041a9:	2b 44 24 5c          	sub    eax,DWORD PTR [esp+0x5c]
100041ad:	99                   	cdq    
100041ae:	f7 f9                	idiv   ecx
100041b0:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
100041b4:	50                   	push   eax
100041b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
100041b9:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
100041bd:	2b 85 a0 f5 00 00    	sub    eax,DWORD PTR [ebp+0xf5a0]
100041c3:	99                   	cdq    
100041c4:	f7 f9                	idiv   ecx
100041c6:	03 85 a0 f5 00 00    	add    eax,DWORD PTR [ebp+0xf5a0]
100041cc:	50                   	push   eax
100041cd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100041d1:	2b 85 9c f5 00 00    	sub    eax,DWORD PTR [ebp+0xf59c]
100041d7:	99                   	cdq    
100041d8:	f7 f9                	idiv   ecx
100041da:	03 85 9c f5 00 00    	add    eax,DWORD PTR [ebp+0xf59c]
100041e0:	50                   	push   eax
100041e1:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
100041e7:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
100041ed:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100041f1:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
100041f5:	55                   	push   ebp
100041f6:	e8 6d e8 ff ff       	call   10002a68 <_ssfn_b>
100041fb:	eb 79                	jmp    10004276 <ssfn_render+0x945>
100041fd:	6a 00                	push   0x0
100041ff:	83 c7 06             	add    edi,0x6
10004202:	53                   	push   ebx
10004203:	56                   	push   esi
10004204:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10004208:	c1 e0 04             	shl    eax,0x4
1000420b:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10004210:	99                   	cdq    
10004211:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
10004215:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10004219:	50                   	push   eax
1000421a:	0f b6 47 fe          	movzx  eax,BYTE PTR [edi-0x2]
1000421e:	c1 e0 04             	shl    eax,0x4
10004221:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
10004226:	99                   	cdq    
10004227:	f7 7c 24 24          	idiv   DWORD PTR [esp+0x24]
1000422b:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
1000422f:	50                   	push   eax
10004230:	0f b6 47 fd          	movzx  eax,BYTE PTR [edi-0x3]
10004234:	c1 e0 04             	shl    eax,0x4
10004237:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
1000423c:	99                   	cdq    
1000423d:	f7 7c 24 28          	idiv   DWORD PTR [esp+0x28]
10004241:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10004245:	50                   	push   eax
10004246:	0f b6 47 fc          	movzx  eax,BYTE PTR [edi-0x4]
1000424a:	c1 e0 04             	shl    eax,0x4
1000424d:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
10004252:	99                   	cdq    
10004253:	f7 7c 24 2c          	idiv   DWORD PTR [esp+0x2c]
10004257:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
1000425b:	50                   	push   eax
1000425c:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10004262:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10004268:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
1000426c:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
10004270:	55                   	push   ebp
10004271:	e8 f2 e7 ff ff       	call   10002a68 <_ssfn_b>
10004276:	83 c4 30             	add    esp,0x30
10004279:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
10004280:	e9 24 fe ff ff       	jmp    100040a9 <ssfn_render+0x778>
10004285:	8b 85 94 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf594]
1000428b:	3b 85 9c f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf59c]
10004291:	75 0e                	jne    100042a1 <ssfn_render+0x970>
10004293:	8b bd a0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5a0]
10004299:	39 bd 98 f5 00 00    	cmp    DWORD PTR [ebp+0xf598],edi
1000429f:	74 2e                	je     100042cf <ssfn_render+0x99e>
100042a1:	8b 9d 80 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf580]
100042a7:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
100042ad:	66 89 04 5a          	mov    WORD PTR [edx+ebx*2],ax
100042b1:	8b 95 80 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf580]
100042b7:	8b 85 6c f5 00 00    	mov    eax,DWORD PTR [ebp+0xf56c]
100042bd:	8b 9d 98 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf598]
100042c3:	66 89 5c 50 02       	mov    WORD PTR [eax+edx*2+0x2],bx
100042c8:	83 85 80 f5 00 00 02 	add    DWORD PTR [ebp+0xf580],0x2
100042cf:	b3 fe                	mov    bl,0xfe
100042d1:	83 bd 80 f5 00 00 04 	cmp    DWORD PTR [ebp+0xf580],0x4
100042d8:	0f 8e ee 06 00 00    	jle    100049cc <ssfn_render+0x109b>
100042de:	31 c0                	xor    eax,eax
100042e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
100042e8:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
100042f0:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
100042f8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
10004300:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10004308:	8b 34 24             	mov    esi,DWORD PTR [esp]
1000430b:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
1000430f:	0f 8d aa 06 00 00    	jge    100049bf <ssfn_render+0x108e>
10004315:	8b 85 80 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf580]
1000431b:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10004323:	83 e8 03             	sub    eax,0x3
10004326:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
1000432a:	89 f0                	mov    eax,esi
1000432c:	31 f6                	xor    esi,esi
1000432e:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
10004332:	c1 f8 02             	sar    eax,0x2
10004335:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10004339:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
1000433d:	39 4c 24 4c          	cmp    DWORD PTR [esp+0x4c],ecx
10004341:	0f 8e 05 01 00 00    	jle    1000444c <ssfn_render+0xb1b>
10004347:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
1000434d:	89 c8                	mov    eax,ecx
1000434f:	40                   	inc    eax
10004350:	01 c0                	add    eax,eax
10004352:	0f b7 3c 02          	movzx  edi,WORD PTR [edx+eax*1]
10004356:	0f b7 5c 02 04       	movzx  ebx,WORD PTR [edx+eax*1+0x4]
1000435b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
1000435f:	7d 0c                	jge    1000436d <ssfn_render+0xa3c>
10004361:	39 5c 24 28          	cmp    DWORD PTR [esp+0x28],ebx
10004365:	0f 8f d7 00 00 00    	jg     10004442 <ssfn_render+0xb11>
1000436b:	eb 0a                	jmp    10004377 <ssfn_render+0xa46>
1000436d:	39 5c 24 28          	cmp    DWORD PTR [esp+0x28],ebx
10004371:	0f 8e cb 00 00 00    	jle    10004442 <ssfn_render+0xb11>
10004377:	0f b7 4c 02 fe       	movzx  ecx,WORD PTR [edx+eax*1-0x2]
1000437c:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
10004380:	0f b7 4c 02 02       	movzx  ecx,WORD PTR [edx+eax*1+0x2]
10004385:	89 fa                	mov    edx,edi
10004387:	89 d8                	mov    eax,ebx
10004389:	c1 fa 04             	sar    edx,0x4
1000438c:	c1 f8 04             	sar    eax,0x4
1000438f:	39 c2                	cmp    edx,eax
10004391:	75 0a                	jne    1000439d <ssfn_render+0xa6c>
10004393:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10004397:	01 cf                	add    edi,ecx
10004399:	d1 ff                	sar    edi,1
1000439b:	eb 18                	jmp    100043b5 <ssfn_render+0xa84>
1000439d:	29 fb                	sub    ebx,edi
1000439f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
100043a3:	2b 4c 24 44          	sub    ecx,DWORD PTR [esp+0x44]
100043a7:	29 f8                	sub    eax,edi
100043a9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
100043ad:	0f af c1             	imul   eax,ecx
100043b0:	99                   	cdq    
100043b1:	f7 fb                	idiv   ebx
100043b3:	01 c7                	add    edi,eax
100043b5:	c1 ff 04             	sar    edi,0x4
100043b8:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
100043bd:	74 04                	je     100043c3 <ssfn_render+0xa92>
100043bf:	03 7c 24 50          	add    edi,DWORD PTR [esp+0x50]
100043c3:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
100043c8:	75 3f                	jne    10004409 <ssfn_render+0xad8>
100043ca:	80 7c 24 40 00       	cmp    BYTE PTR [esp+0x40],0x0
100043cf:	74 38                	je     10004409 <ssfn_render+0xad8>
100043d1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
100043d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100043d9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
100043dd:	f7 d8                	neg    eax
100043df:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
100043e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100043e7:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
100043eb:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100043f1:	01 f8                	add    eax,edi
100043f3:	38 5c 01 08          	cmp    BYTE PTR [ecx+eax*1+0x8],bl
100043f7:	74 10                	je     10004409 <ssfn_render+0xad8>
100043f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100043fd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10004401:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10004405:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10004409:	31 c0                	xor    eax,eax
1000440b:	39 f0                	cmp    eax,esi
1000440d:	75 0b                	jne    1000441a <ssfn_render+0xae9>
1000440f:	66 89 bc 44 e0 00 00 00 	mov    WORD PTR [esp+eax*2+0xe0],di
10004417:	46                   	inc    esi
10004418:	eb 28                	jmp    10004442 <ssfn_render+0xb11>
1000441a:	0f b7 94 44 e0 00 00 00 	movzx  edx,WORD PTR [esp+eax*2+0xe0]
10004422:	39 fa                	cmp    edx,edi
10004424:	7d 03                	jge    10004429 <ssfn_render+0xaf8>
10004426:	40                   	inc    eax
10004427:	eb e2                	jmp    1000440b <ssfn_render+0xada>
10004429:	89 f2                	mov    edx,esi
1000442b:	4a                   	dec    edx
1000442c:	66 8b 8c 54 e0 00 00 00 	mov    cx,WORD PTR [esp+edx*2+0xe0]
10004434:	39 c2                	cmp    edx,eax
10004436:	66 89 8c 54 e2 00 00 00 	mov    WORD PTR [esp+edx*2+0xe2],cx
1000443e:	7f eb                	jg     1000442b <ssfn_render+0xafa>
10004440:	eb cd                	jmp    1000440f <ssfn_render+0xade>
10004442:	83 44 24 30 02       	add    DWORD PTR [esp+0x30],0x2
10004447:	e9 ed fe ff ff       	jmp    10004339 <ssfn_render+0xa08>
1000444c:	83 fe 01             	cmp    esi,0x1
1000444f:	7e 1f                	jle    10004470 <ssfn_render+0xb3f>
10004451:	f7 c6 01 00 00 00    	test   esi,0x1
10004457:	74 24                	je     1000447d <ssfn_render+0xb4c>
10004459:	8d 46 ff             	lea    eax,[esi-0x1]
1000445c:	66 8b 94 44 e0 00 00 00 	mov    dx,WORD PTR [esp+eax*2+0xe0]
10004464:	66 89 94 74 dc 00 00 00 	mov    WORD PTR [esp+esi*2+0xdc],dx
1000446c:	89 c6                	mov    esi,eax
1000446e:	eb 0d                	jmp    1000447d <ssfn_render+0xb4c>
10004470:	85 f6                	test   esi,esi
10004472:	0f 84 ac 00 00 00    	je     10004524 <ssfn_render+0xbf3>
10004478:	be 01 00 00 00       	mov    esi,0x1
1000447d:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004483:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10004487:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
1000448b:	03 54 24 24          	add    edx,DWORD PTR [esp+0x24]
1000448f:	39 d1                	cmp    ecx,edx
10004491:	7d 0b                	jge    1000449e <ssfn_render+0xb6d>
10004493:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
10004497:	03 54 24 24          	add    edx,DWORD PTR [esp+0x24]
1000449b:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
1000449e:	31 d2                	xor    edx,edx
100044a0:	8d 46 ff             	lea    eax,[esi-0x1]
100044a3:	39 d0                	cmp    eax,edx
100044a5:	7e 78                	jle    1000451f <ssfn_render+0xbee>
100044a7:	0f b7 84 54 e0 00 00 00 	movzx  eax,WORD PTR [esp+edx*2+0xe0]
100044af:	0f b7 8c 54 e2 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xe2]
100044b7:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
100044bb:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
100044bf:	79 02                	jns    100044c3 <ssfn_render+0xb92>
100044c1:	31 c0                	xor    eax,eax
100044c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
100044c7:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
100044cb:	39 cf                	cmp    edi,ecx
100044cd:	7e 04                	jle    100044d3 <ssfn_render+0xba2>
100044cf:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
100044d3:	85 d2                	test   edx,edx
100044d5:	74 12                	je     100044e9 <ssfn_render+0xbb8>
100044d7:	0f b7 8c 54 de 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xde]
100044df:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
100044e3:	39 c8                	cmp    eax,ecx
100044e5:	7d 02                	jge    100044e9 <ssfn_render+0xbb8>
100044e7:	89 c8                	mov    eax,ecx
100044e9:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
100044ed:	7d 2b                	jge    1000451a <ssfn_render+0xbe9>
100044ef:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
100044f3:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
100044f9:	8d 3c 01             	lea    edi,[ecx+eax*1]
100044fc:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
10004500:	88 4c 24 30          	mov    BYTE PTR [esp+0x30],cl
10004504:	38 4c 3b 08          	cmp    BYTE PTR [ebx+edi*1+0x8],cl
10004508:	75 05                	jne    1000450f <ssfn_render+0xbde>
1000450a:	c6 44 24 30 ff       	mov    BYTE PTR [esp+0x30],0xff
1000450f:	8a 4c 24 30          	mov    cl,BYTE PTR [esp+0x30]
10004513:	40                   	inc    eax
10004514:	88 4c 3b 08          	mov    BYTE PTR [ebx+edi*1+0x8],cl
10004518:	eb cf                	jmp    100044e9 <ssfn_render+0xbb8>
1000451a:	83 c2 02             	add    edx,0x2
1000451d:	eb 81                	jmp    100044a0 <ssfn_render+0xb6f>
1000451f:	83 e6 fe             	and    esi,0xfffffffe
10004522:	89 f1                	mov    ecx,esi
10004524:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10004528:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
1000452c:	01 7c 24 3c          	add    DWORD PTR [esp+0x3c],edi
10004530:	83 44 24 28 10       	add    DWORD PTR [esp+0x28],0x10
10004535:	b0 01                	mov    al,0x1
10004537:	e9 cc fd ff ff       	jmp    10004308 <ssfn_render+0x9d7>
1000453c:	88 c2                	mov    dl,al
1000453e:	80 e2 60             	and    dl,0x60
10004541:	0f 85 a4 02 00 00    	jne    100047eb <ssfn_render+0xeba>
10004547:	83 e0 1f             	and    eax,0x1f
1000454a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000454e:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10004555:	c1 fb 04             	sar    ebx,0x4
10004558:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000455c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10004560:	40                   	inc    eax
10004561:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10004565:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004569:	c1 f8 04             	sar    eax,0x4
1000456c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10004570:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004573:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10004578:	99                   	cdq    
10004579:	f7 fe                	idiv   esi
1000457b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000457f:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004582:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10004587:	99                   	cdq    
10004588:	f7 fe                	idiv   esi
1000458a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000458e:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004594:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10004598:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
1000459c:	8d 14 3b             	lea    edx,[ebx+edi*1]
1000459f:	39 d6                	cmp    esi,edx
100045a1:	7d 0a                	jge    100045ad <ssfn_render+0xc7c>
100045a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
100045a7:	8d 14 3b             	lea    edx,[ebx+edi*1]
100045aa:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
100045ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100045b1:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
100045b9:	0f af c3             	imul   eax,ebx
100045bc:	31 f6                	xor    esi,esi
100045be:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100045c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100045c6:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
100045ca:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
100045ce:	8b 04 24             	mov    eax,DWORD PTR [esp]
100045d1:	29 d8                	sub    eax,ebx
100045d3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
100045d7:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
100045db:	0f 8d b1 00 00 00    	jge    10004692 <ssfn_render+0xd61>
100045e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100045e5:	99                   	cdq    
100045e6:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
100045ea:	89 c7                	mov    edi,eax
100045ec:	31 c0                	xor    eax,eax
100045ee:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
100045f3:	74 0e                	je     10004603 <ssfn_render+0xcd2>
100045f5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100045f9:	bb 04 00 00 00       	mov    ebx,0x4
100045fe:	29 f0                	sub    eax,esi
10004600:	99                   	cdq    
10004601:	f7 fb                	idiv   ebx
10004603:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10004607:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10004612:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10004616:	0f af 7c 24 28       	imul   edi,DWORD PTR [esp+0x28]
1000461b:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10004622:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10004626:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000462a:	39 d8                	cmp    eax,ebx
1000462c:	7d 4e                	jge    1000467c <ssfn_render+0xd4b>
1000462e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004632:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
10004637:	99                   	cdq    
10004638:	f7 fb                	idiv   ebx
1000463a:	8d 14 07             	lea    edx,[edi+eax*1]
1000463d:	83 e0 07             	and    eax,0x7
10004640:	c1 fa 03             	sar    edx,0x3
10004643:	0f b6 54 11 02       	movzx  edx,BYTE PTR [ecx+edx*1+0x2]
10004648:	0f a3 c2             	bt     edx,eax
1000464b:	72 0e                	jb     1000465b <ssfn_render+0xd2a>
1000464d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10004651:	43                   	inc    ebx
10004652:	89 9c 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],ebx
10004659:	eb c0                	jmp    1000461b <ssfn_render+0xcea>
1000465b:	31 c0                	xor    eax,eax
1000465d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10004661:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10004665:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
1000466b:	40                   	inc    eax
1000466c:	03 54 24 50          	add    edx,DWORD PTR [esp+0x50]
10004670:	88 5c 10 07          	mov    BYTE PTR [eax+edx*1+0x7],bl
10004674:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
10004678:	7d e3                	jge    1000465d <ssfn_render+0xd2c>
1000467a:	eb d1                	jmp    1000464d <ssfn_render+0xd1c>
1000467c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10004680:	46                   	inc    esi
10004681:	01 7c 24 4c          	add    DWORD PTR [esp+0x4c],edi
10004685:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10004689:	01 7c 24 3c          	add    DWORD PTR [esp+0x3c],edi
1000468d:	e9 45 ff ff ff       	jmp    100045d7 <ssfn_render+0xca6>
10004692:	b3 fe                	mov    bl,0xfe
10004694:	f7 85 bc f5 00 00 40 20 00 00 	test   DWORD PTR [ebp+0xf5bc],0x2040
1000469e:	0f 85 28 03 00 00    	jne    100049cc <ssfn_render+0x109b>
100046a4:	31 c0                	xor    eax,eax
100046a6:	8b 34 24             	mov    esi,DWORD PTR [esp]
100046a9:	80 7c 24 0c fd       	cmp    BYTE PTR [esp+0xc],0xfd
100046ae:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
100046b2:	0f 95 c0             	setne  al
100046b5:	8b 94 24 dc 00 00 00 	mov    edx,DWORD PTR [esp+0xdc]
100046bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100046c0:	4f                   	dec    edi
100046c1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100046c5:	81 44 24 18 fc 00 00 00 	add    DWORD PTR [esp+0x18],0xfc
100046cd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
100046d1:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
100046d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
100046d9:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
100046dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100046e1:	31 c0                	xor    eax,eax
100046e3:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
100046e6:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
100046ea:	83 c1 04             	add    ecx,0x4
100046ed:	3b 4c 24 28          	cmp    ecx,DWORD PTR [esp+0x28]
100046f1:	7d 19                	jge    1000470c <ssfn_render+0xddb>
100046f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
100046f7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
100046fb:	46                   	inc    esi
100046fc:	4f                   	dec    edi
100046fd:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
10004701:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
10004705:	be 01 00 00 00       	mov    esi,0x1
1000470a:	eb 36                	jmp    10004742 <ssfn_render+0xe11>
1000470c:	84 c0                	test   al,al
1000470e:	0f 84 b6 02 00 00    	je     100049ca <ssfn_render+0x1099>
10004714:	89 94 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],edx
1000471b:	e9 aa 02 00 00       	jmp    100049ca <ssfn_render+0x1099>
10004720:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10004726:	80 7c 02 08 ff       	cmp    BYTE PTR [edx+eax*1+0x8],0xff
1000472b:	74 26                	je     10004753 <ssfn_render+0xe22>
1000472d:	41                   	inc    ecx
1000472e:	40                   	inc    eax
1000472f:	89 ca                	mov    edx,ecx
10004731:	3b 4c 24 3c          	cmp    ecx,DWORD PTR [esp+0x3c]
10004735:	7c e9                	jl     10004720 <ssfn_render+0xdef>
10004737:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
1000473b:	46                   	inc    esi
1000473c:	01 7c 24 2c          	add    DWORD PTR [esp+0x2c],edi
10004740:	b0 01                	mov    al,0x1
10004742:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
10004746:	7e 41                	jle    10004789 <ssfn_render+0xe58>
10004748:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000474c:	b9 01 00 00 00       	mov    ecx,0x1
10004751:	eb dc                	jmp    1000472f <ssfn_render+0xdfe>
10004753:	89 c7                	mov    edi,eax
10004755:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10004759:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
1000475d:	38 5c 3a 08          	cmp    BYTE PTR [edx+edi*1+0x8],bl
10004761:	74 0c                	je     1000476f <ssfn_render+0xe3e>
10004763:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10004767:	01 d7                	add    edi,edx
10004769:	38 5c 38 08          	cmp    BYTE PTR [eax+edi*1+0x8],bl
1000476d:	75 be                	jne    1000472d <ssfn_render+0xdfc>
1000476f:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10004773:	38 5c 02 07          	cmp    BYTE PTR [edx+eax*1+0x7],bl
10004777:	74 06                	je     1000477f <ssfn_render+0xe4e>
10004779:	38 5c 02 09          	cmp    BYTE PTR [edx+eax*1+0x9],bl
1000477d:	75 ae                	jne    1000472d <ssfn_render+0xdfc>
1000477f:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
10004783:	88 5c 02 08          	mov    BYTE PTR [edx+eax*1+0x8],bl
10004787:	eb a4                	jmp    1000472d <ssfn_render+0xdfc>
10004789:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
1000478d:	bb 01 00 00 00       	mov    ebx,0x1
10004792:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10004796:	39 5c 24 24          	cmp    DWORD PTR [esp+0x24],ebx
1000479a:	7e 3d                	jle    100047d9 <ssfn_render+0xea8>
1000479c:	b8 01 00 00 00       	mov    eax,0x1
100047a1:	89 c2                	mov    edx,eax
100047a3:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
100047a7:	7d 23                	jge    100047cc <ssfn_render+0xe9b>
100047a9:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
100047ad:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
100047b3:	8d 14 07             	lea    edx,[edi+eax*1]
100047b6:	0f b6 7c 16 08       	movzx  edi,BYTE PTR [esi+edx*1+0x8]
100047bb:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
100047bf:	75 08                	jne    100047c9 <ssfn_render+0xe98>
100047c1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
100047c5:	88 4c 16 08          	mov    BYTE PTR [esi+edx*1+0x8],cl
100047c9:	40                   	inc    eax
100047ca:	eb d5                	jmp    100047a1 <ssfn_render+0xe70>
100047cc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
100047d0:	43                   	inc    ebx
100047d1:	01 7c 24 2c          	add    DWORD PTR [esp+0x2c],edi
100047d5:	b0 01                	mov    al,0x1
100047d7:	eb bd                	jmp    10004796 <ssfn_render+0xe65>
100047d9:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
100047dc:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
100047e0:	01 c9                	add    ecx,ecx
100047e2:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
100047e6:	e9 f8 fe ff ff       	jmp    100046e3 <ssfn_render+0xdb2>
100047eb:	b3 fe                	mov    bl,0xfe
100047ed:	80 fa 20             	cmp    dl,0x20
100047f0:	0f 85 d6 01 00 00    	jne    100049cc <ssfn_render+0x109b>
100047f6:	89 c3                	mov    ebx,eax
100047f8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
100047fc:	c1 e3 08             	shl    ebx,0x8
100047ff:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10004803:	81 e3 00 1f 00 00    	and    ebx,0x1f00
10004809:	c1 ff 04             	sar    edi,0x4
1000480c:	09 c3                	or     ebx,eax
1000480e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
10004812:	43                   	inc    ebx
10004813:	40                   	inc    eax
10004814:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10004818:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
1000481c:	40                   	inc    eax
1000481d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10004821:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004825:	c1 f8 04             	sar    eax,0x4
10004828:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000482c:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000482f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10004834:	99                   	cdq    
10004835:	f7 fe                	idiv   esi
10004837:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000483b:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000483e:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10004843:	99                   	cdq    
10004844:	f7 fe                	idiv   esi
10004846:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000484a:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004850:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10004854:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10004858:	01 fa                	add    edx,edi
1000485a:	39 d6                	cmp    esi,edx
1000485c:	7d 0a                	jge    10004868 <ssfn_render+0xf37>
1000485e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10004862:	8d 14 37             	lea    edx,[edi+esi*1]
10004865:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10004868:	83 c1 04             	add    ecx,0x4
1000486b:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10004876:	8d 04 19             	lea    eax,[ecx+ebx*1]
10004879:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
1000487d:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10004881:	72 30                	jb     100048b3 <ssfn_render+0xf82>
10004883:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10004887:	8b 34 24             	mov    esi,DWORD PTR [esp]
1000488a:	0f af d7             	imul   edx,edi
1000488d:	29 fe                	sub    esi,edi
1000488f:	03 54 24 24          	add    edx,DWORD PTR [esp+0x24]
10004893:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
1000489a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
1000489e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
100048a6:	31 d2                	xor    edx,edx
100048a8:	31 db                	xor    ebx,ebx
100048aa:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
100048ae:	e9 d2 00 00 00       	jmp    10004985 <ssfn_render+0x1054>
100048b3:	8a 11                	mov    dl,BYTE PTR [ecx]
100048b5:	89 d0                	mov    eax,edx
100048b7:	83 e0 7f             	and    eax,0x7f
100048ba:	84 d2                	test   dl,dl
100048bc:	8d 70 01             	lea    esi,[eax+0x1]
100048bf:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
100048c3:	78 09                	js     100048ce <ssfn_render+0xf9d>
100048c5:	41                   	inc    ecx
100048c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100048ca:	89 ca                	mov    edx,ecx
100048cc:	eb 3d                	jmp    1000490b <ssfn_render+0xfda>
100048ce:	48                   	dec    eax
100048cf:	8b 94 24 dc 00 00 00 	mov    edx,DWORD PTR [esp+0xdc]
100048d6:	83 f8 fe             	cmp    eax,0xfffffffe
100048d9:	74 16                	je     100048f1 <ssfn_render+0xfc0>
100048db:	8d 5a 01             	lea    ebx,[edx+0x1]
100048de:	89 9c 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],ebx
100048e5:	8a 59 01             	mov    bl,BYTE PTR [ecx+0x1]
100048e8:	88 9c 14 e0 05 00 00 	mov    BYTE PTR [esp+edx*1+0x5e0],bl
100048ef:	eb dd                	jmp    100048ce <ssfn_render+0xf9d>
100048f1:	83 c1 02             	add    ecx,0x2
100048f4:	eb 87                	jmp    1000487d <ssfn_render+0xf4c>
100048f6:	42                   	inc    edx
100048f7:	8d 73 01             	lea    esi,[ebx+0x1]
100048fa:	89 b4 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],esi
10004901:	8a 42 ff             	mov    al,BYTE PTR [edx-0x1]
10004904:	88 84 1c e0 05 00 00 	mov    BYTE PTR [esp+ebx*1+0x5e0],al
1000490b:	ff 4c 24 18          	dec    DWORD PTR [esp+0x18]
1000490f:	8b 9c 24 dc 00 00 00 	mov    ebx,DWORD PTR [esp+0xdc]
10004916:	83 7c 24 18 fe       	cmp    DWORD PTR [esp+0x18],0xfffffffe
1000491b:	75 d9                	jne    100048f6 <ssfn_render+0xfc5>
1000491d:	03 4c 24 3c          	add    ecx,DWORD PTR [esp+0x3c]
10004921:	e9 57 ff ff ff       	jmp    1000487d <ssfn_render+0xf4c>
10004926:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
1000492a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
1000492e:	99                   	cdq    
1000492f:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
10004933:	0f af c8             	imul   ecx,eax
10004936:	31 c0                	xor    eax,eax
10004938:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
1000493d:	74 0e                	je     1000494d <ssfn_render+0x101c>
1000493f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10004943:	be 04 00 00 00       	mov    esi,0x4
10004948:	29 d8                	sub    eax,ebx
1000494a:	99                   	cdq    
1000494b:	f7 fe                	idiv   esi
1000494d:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10004951:	31 f6                	xor    esi,esi
10004953:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10004957:	31 ff                	xor    edi,edi
10004959:	8d 84 24 e0 05 01 00 	lea    eax,[esp+0x105e0]
10004960:	01 c1                	add    ecx,eax
10004962:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
10004966:	7f 30                	jg     10004998 <ssfn_render+0x1067>
10004968:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000496c:	85 c0                	test   eax,eax
1000496e:	79 02                	jns    10004972 <ssfn_render+0x1041>
10004970:	31 c0                	xor    eax,eax
10004972:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10004976:	43                   	inc    ebx
10004977:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
1000497b:	b2 01                	mov    dl,0x1
1000497d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
10004981:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
10004985:	3b 5c 24 14          	cmp    ebx,DWORD PTR [esp+0x14]
10004989:	7c 9b                	jl     10004926 <ssfn_render+0xff5>
1000498b:	84 d2                	test   dl,dl
1000498d:	74 3b                	je     100049ca <ssfn_render+0x1099>
1000498f:	89 84 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],eax
10004996:	eb 32                	jmp    100049ca <ssfn_render+0x1099>
10004998:	89 f0                	mov    eax,esi
1000499a:	99                   	cdq    
1000499b:	f7 7c 24 0c          	idiv   DWORD PTR [esp+0xc]
1000499f:	8a 84 08 00 00 ff ff 	mov    al,BYTE PTR [eax+ecx*1-0x10000]
100049a6:	3c ff                	cmp    al,0xff
100049a8:	74 0e                	je     100049b8 <ssfn_render+0x1087>
100049aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
100049ae:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
100049b4:	88 44 17 08          	mov    BYTE PTR [edi+edx*1+0x8],al
100049b8:	47                   	inc    edi
100049b9:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
100049bd:	eb a3                	jmp    10004962 <ssfn_render+0x1031>
100049bf:	84 c0                	test   al,al
100049c1:	74 07                	je     100049ca <ssfn_render+0x1099>
100049c3:	89 8c 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],ecx
100049ca:	b3 fe                	mov    bl,0xfe
100049cc:	ff 44 24 48          	inc    DWORD PTR [esp+0x48]
100049d0:	88 5c 24 0c          	mov    BYTE PTR [esp+0xc],bl
100049d4:	e9 d5 f5 ff ff       	jmp    10003fae <ssfn_render+0x67d>
100049d9:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100049df:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
100049e2:	8a 52 0c             	mov    dl,BYTE PTR [edx+0xc]
100049e5:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
100049e8:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100049ee:	0f b6 72 07          	movzx  esi,BYTE PTR [edx+0x7]
100049f2:	0f b6 5a 06          	movzx  ebx,BYTE PTR [edx+0x6]
100049f6:	89 f0                	mov    eax,esi
100049f8:	89 d9                	mov    ecx,ebx
100049fa:	43                   	inc    ebx
100049fb:	39 de                	cmp    esi,ebx
100049fd:	7e 08                	jle    10004a07 <ssfn_render+0x10d6>
100049ff:	48                   	dec    eax
10004a00:	29 c8                	sub    eax,ecx
10004a02:	88 42 07             	mov    BYTE PTR [edx+0x7],al
10004a05:	eb 04                	jmp    10004a0b <ssfn_render+0x10da>
10004a07:	c6 42 07 00          	mov    BYTE PTR [edx+0x7],0x0
10004a0b:	83 bc 24 04 06 01 00 00 	cmp    DWORD PTR [esp+0x10604],0x0
10004a13:	0f 84 92 0c 00 00    	je     100056ab <ssfn_render+0x1d7a>
10004a19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004a1d:	39 85 c4 f5 00 00    	cmp    DWORD PTR [ebp+0xf5c4],eax
10004a23:	7d 06                	jge    10004a2b <ssfn_render+0x10fa>
10004a25:	89 85 c4 f5 00 00    	mov    DWORD PTR [ebp+0xf5c4],eax
10004a2b:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
10004a31:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
10004a34:	0f b6 4e 02          	movzx  ecx,BYTE PTR [esi+0x2]
10004a38:	0f b7 16             	movzx  edx,WORD PTR [esi]
10004a3b:	0f b6 7e 03          	movzx  edi,BYTE PTR [esi+0x3]
10004a3f:	0f af 54 24 04       	imul   edx,DWORD PTR [esp+0x4]
10004a44:	89 d0                	mov    eax,edx
10004a46:	99                   	cdq    
10004a47:	f7 f9                	idiv   ecx
10004a49:	0f b6 4b 0b          	movzx  ecx,BYTE PTR [ebx+0xb]
10004a4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004a51:	0f b6 46 04          	movzx  eax,BYTE PTR [esi+0x4]
10004a55:	88 04 24             	mov    BYTE PTR [esp],al
10004a58:	29 f8                	sub    eax,edi
10004a5a:	0f af 44 24 04       	imul   eax,DWORD PTR [esp+0x4]
10004a5f:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10004a63:	99                   	cdq    
10004a64:	f7 f9                	idiv   ecx
10004a66:	31 d2                	xor    edx,edx
10004a68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10004a6c:	83 bd c0 f5 00 00 10 	cmp    DWORD PTR [ebp+0xf5c0],0x10
10004a73:	0f 9f c2             	setg   dl
10004a76:	42                   	inc    edx
10004a77:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
10004a7b:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
10004a7f:	7d 08                	jge    10004a89 <ssfn_render+0x1158>
10004a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004a85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004a89:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10004a8d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10004a91:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
10004a95:	7d 04                	jge    10004a9b <ssfn_render+0x116a>
10004a97:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10004a9b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
10004a9f:	74 46                	je     10004ae7 <ssfn_render+0x11b6>
10004aa1:	0f af 7c 24 04       	imul   edi,DWORD PTR [esp+0x4]
10004aa6:	8d 44 39 ff          	lea    eax,[ecx+edi*1-0x1]
10004aaa:	99                   	cdq    
10004aab:	f7 f9                	idiv   ecx
10004aad:	8b 8d bc f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf5bc]
10004ab3:	81 e1 00 08 00 00    	and    ecx,0x800
10004ab9:	74 04                	je     10004abf <ssfn_render+0x118e>
10004abb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10004abf:	01 c1                	add    ecx,eax
10004ac1:	89 8d 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],ecx
10004ac7:	0f b6 5b 0b          	movzx  ebx,BYTE PTR [ebx+0xb]
10004acb:	0f b6 46 06          	movzx  eax,BYTE PTR [esi+0x6]
10004acf:	0f af 44 24 04       	imul   eax,DWORD PTR [esp+0x4]
10004ad4:	8d 44 03 ff          	lea    eax,[ebx+eax*1-0x1]
10004ad8:	99                   	cdq    
10004ad9:	f7 fb                	idiv   ebx
10004adb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10004adf:	89 85 8c f5 00 00    	mov    DWORD PTR [ebp+0xf58c],eax
10004ae5:	eb 1e                	jmp    10004b05 <ssfn_render+0x11d4>
10004ae7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10004aeb:	c7 85 8c f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf58c],0x0
10004af5:	d1 f9                	sar    ecx,1
10004af7:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
10004aff:	89 8d 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],ecx
10004b05:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004b0c:	8b 00                	mov    eax,DWORD PTR [eax]
10004b0e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10004b12:	85 c0                	test   eax,eax
10004b14:	0f 84 42 09 00 00    	je     1000545c <ssfn_render+0x1b2b>
10004b1a:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004b21:	0f bf 50 04          	movsx  edx,WORD PTR [eax+0x4]
10004b25:	89 d3                	mov    ebx,edx
10004b27:	89 d0                	mov    eax,edx
10004b29:	66 c1 fb 0b          	sar    bx,0xb
10004b2d:	c1 f8 1f             	sar    eax,0x1f
10004b30:	31 c2                	xor    edx,eax
10004b32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
10004b36:	29 44 24 54          	sub    DWORD PTR [esp+0x54],eax
10004b3a:	88 d8                	mov    al,bl
10004b3c:	83 e0 10             	and    eax,0x10
10004b3f:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
10004b43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004b47:	83 c0 40             	add    eax,0x40
10004b4a:	c1 f8 06             	sar    eax,0x6
10004b4d:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
10004b54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004b58:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10004b5c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
10004b60:	7d 08                	jge    10004b6a <ssfn_render+0x1239>
10004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004b66:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10004b6a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10004b6d:	0f b6 58 0b          	movzx  ebx,BYTE PTR [eax+0xb]
10004b71:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
10004b75:	0f af 44 24 04       	imul   eax,DWORD PTR [esp+0x4]
10004b7a:	8d 44 03 ff          	lea    eax,[ebx+eax*1-0x1]
10004b7e:	99                   	cdq    
10004b7f:	f7 fb                	idiv   ebx
10004b81:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10004b85:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004b8c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10004b8f:	0f b6 fc             	movzx  edi,ah
10004b92:	89 c2                	mov    edx,eax
10004b94:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
10004b98:	c1 ea 10             	shr    edx,0x10
10004b9b:	0f b6 f2             	movzx  esi,dl
10004b9e:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
10004ba2:	0f b6 f0             	movzx  esi,al
10004ba5:	c1 e8 18             	shr    eax,0x18
10004ba8:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
10004bac:	89 04 24             	mov    DWORD PTR [esp],eax
10004baf:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004bb6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10004bb9:	89 c2                	mov    edx,eax
10004bbb:	0f b6 f4             	movzx  esi,ah
10004bbe:	c1 ea 10             	shr    edx,0x10
10004bc1:	0f b6 c0             	movzx  eax,al
10004bc4:	0f b6 fa             	movzx  edi,dl
10004bc7:	89 84 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],eax
10004bce:	89 bc 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],edi
10004bd5:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004bdc:	89 b4 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],esi
10004be3:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10004be7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10004beb:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004bf2:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10004bf6:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
10004bfa:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
10004bfe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10004c02:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004c09:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10004c0d:	29 c8                	sub    eax,ecx
10004c0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10004c13:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10004c17:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10004c1b:	0f af 44 24 4c       	imul   eax,DWORD PTR [esp+0x4c]
10004c20:	8d 04 b8             	lea    eax,[eax+edi*4]
10004c23:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
10004c27:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
10004c2e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10004c32:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
10004c3a:	25 fc ff 00 00       	and    eax,0xfffc
10004c3f:	c7 84 24 84 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x84],0x0
10004c4a:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
10004c51:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10004c55:	89 84 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],eax
10004c5c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10004c60:	89 84 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],eax
10004c67:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
10004c6c:	89 84 24 b4 00 00 00 	mov    DWORD PTR [esp+0xb4],eax
10004c73:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
10004c77:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10004c7b:	0f 8e ef 04 00 00    	jle    10005170 <ssfn_render+0x183f>
10004c81:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004c88:	0f bf 40 06          	movsx  eax,WORD PTR [eax+0x6]
10004c8c:	3b 84 24 9c 00 00 00 	cmp    eax,DWORD PTR [esp+0x9c]
10004c93:	0f 8e d7 04 00 00    	jle    10005170 <ssfn_render+0x183f>
10004c99:	83 bc 24 9c 00 00 00 00 	cmp    DWORD PTR [esp+0x9c],0x0
10004ca1:	0f 88 ab 04 00 00    	js     10005152 <ssfn_render+0x1821>
10004ca7:	89 f9                	mov    ecx,edi
10004ca9:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004caf:	c1 e1 08             	shl    ecx,0x8
10004cb2:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
10004cb6:	31 ff                	xor    edi,edi
10004cb8:	89 c8                	mov    eax,ecx
10004cba:	0f af c3             	imul   eax,ebx
10004cbd:	99                   	cdq    
10004cbe:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
10004cc2:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
10004cc9:	c1 f8 08             	sar    eax,0x8
10004ccc:	89 84 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],eax
10004cd3:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10004cd9:	0f af c3             	imul   eax,ebx
10004cdc:	99                   	cdq    
10004cdd:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
10004ce1:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
10004ce5:	c1 f8 08             	sar    eax,0x8
10004ce8:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
10004cef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10004cf3:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
10004cfa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10004cfe:	2b 84 24 a4 00 00 00 	sub    eax,DWORD PTR [esp+0xa4]
10004d05:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
10004d0c:	8b b4 24 a0 00 00 00 	mov    esi,DWORD PTR [esp+0xa0]
10004d13:	39 74 24 54          	cmp    DWORD PTR [esp+0x54],esi
10004d17:	0f 8e 35 04 00 00    	jle    10005152 <ssfn_render+0x1821>
10004d1d:	85 f6                	test   esi,esi
10004d1f:	0f 88 1b 04 00 00    	js     10005140 <ssfn_render+0x180f>
10004d25:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004d2c:	83 78 14 00          	cmp    DWORD PTR [eax+0x14],0x0
10004d30:	75 3e                	jne    10004d70 <ssfn_render+0x143f>
10004d32:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
10004d39:	b9 10 00 00 00       	mov    ecx,0x10
10004d3e:	8b 04 b8             	mov    eax,DWORD PTR [eax+edi*4]
10004d41:	2b 8c 24 b4 00 00 00 	sub    ecx,DWORD PTR [esp+0xb4]
10004d48:	89 c2                	mov    edx,eax
10004d4a:	d3 ea                	shr    edx,cl
10004d4c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
10004d50:	0f b6 f2             	movzx  esi,dl
10004d53:	89 b4 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],esi
10004d5a:	0f b6 f4             	movzx  esi,ah
10004d5d:	d3 e8                	shr    eax,cl
10004d5f:	89 b4 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],esi
10004d66:	0f b6 c0             	movzx  eax,al
10004d69:	89 84 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],eax
10004d70:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004d76:	89 f9                	mov    ecx,edi
10004d78:	0f b7 18             	movzx  ebx,WORD PTR [eax]
10004d7b:	c1 e1 08             	shl    ecx,0x8
10004d7e:	89 44 24 78          	mov    DWORD PTR [esp+0x78],eax
10004d82:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
10004d8a:	89 c8                	mov    eax,ecx
10004d8c:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10004d94:	0f af c3             	imul   eax,ebx
10004d97:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10004d9f:	99                   	cdq    
10004da0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
10004da8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
10004dac:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
10004db4:	89 84 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],eax
10004dbb:	c1 f8 08             	sar    eax,0x8
10004dbe:	89 84 24 c0 00 00 00 	mov    DWORD PTR [esp+0xc0],eax
10004dc5:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10004dcb:	0f af c3             	imul   eax,ebx
10004dce:	99                   	cdq    
10004dcf:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
10004dd3:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10004dd7:	c1 f8 08             	sar    eax,0x8
10004dda:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
10004de1:	8b 84 24 a4 00 00 00 	mov    eax,DWORD PTR [esp+0xa4]
10004de8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10004dec:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
10004df0:	39 74 24 3c          	cmp    DWORD PTR [esp+0x3c],esi
10004df4:	0f 8d 46 02 00 00    	jge    10005040 <ssfn_render+0x170f>
10004dfa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10004dfe:	c1 fa 08             	sar    edx,0x8
10004e01:	3b 94 24 b8 00 00 00 	cmp    edx,DWORD PTR [esp+0xb8]
10004e08:	75 25                	jne    10004e2f <ssfn_render+0x14fe>
10004e0a:	0f b6 4c 24 3c       	movzx  ecx,BYTE PTR [esp+0x3c]
10004e0f:	8b b4 24 b0 00 00 00 	mov    esi,DWORD PTR [esp+0xb0]
10004e16:	b8 00 01 00 00       	mov    eax,0x100
10004e1b:	81 64 24 3c 00 ff ff ff 	and    DWORD PTR [esp+0x3c],0xffffff00
10004e23:	29 c8                	sub    eax,ecx
10004e25:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10004e29:	39 c6                	cmp    esi,eax
10004e2b:	7e 1c                	jle    10004e49 <ssfn_render+0x1518>
10004e2d:	eb 16                	jmp    10004e45 <ssfn_render+0x1514>
10004e2f:	c7 44 24 18 00 01 00 00 	mov    DWORD PTR [esp+0x18],0x100
10004e37:	3b 94 24 bc 00 00 00 	cmp    edx,DWORD PTR [esp+0xbc]
10004e3e:	75 09                	jne    10004e49 <ssfn_render+0x1518>
10004e40:	0f b6 44 24 68       	movzx  eax,BYTE PTR [esp+0x68]
10004e45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004e49:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10004e4d:	0f b7 00             	movzx  eax,WORD PTR [eax]
10004e50:	0f af c2             	imul   eax,edx
10004e53:	89 84 24 c8 00 00 00 	mov    DWORD PTR [esp+0xc8],eax
10004e5a:	0f b6 44 24 6c       	movzx  eax,BYTE PTR [esp+0x6c]
10004e5f:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
10004e64:	c1 f8 08             	sar    eax,0x8
10004e67:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10004e6e:	8b 84 24 a8 00 00 00 	mov    eax,DWORD PTR [esp+0xa8]
10004e75:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10004e79:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
10004e7d:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
10004e81:	0f 8d ac 01 00 00    	jge    10005033 <ssfn_render+0x1702>
10004e87:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10004e8b:	c1 f8 08             	sar    eax,0x8
10004e8e:	3b 84 24 c0 00 00 00 	cmp    eax,DWORD PTR [esp+0xc0]
10004e95:	75 39                	jne    10004ed0 <ssfn_render+0x159f>
10004e97:	0f b6 4c 24 38       	movzx  ecx,BYTE PTR [esp+0x38]
10004e9c:	ba 00 01 00 00       	mov    edx,0x100
10004ea1:	81 64 24 38 00 ff ff ff 	and    DWORD PTR [esp+0x38],0xffffff00
10004ea9:	29 ca                	sub    edx,ecx
10004eab:	89 f1                	mov    ecx,esi
10004ead:	2b 8c 24 a8 00 00 00 	sub    ecx,DWORD PTR [esp+0xa8]
10004eb4:	39 d1                	cmp    ecx,edx
10004eb6:	7c 0e                	jl     10004ec6 <ssfn_render+0x1595>
10004eb8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004ebc:	81 fa 00 01 00 00    	cmp    edx,0x100
10004ec2:	74 20                	je     10004ee4 <ssfn_render+0x15b3>
10004ec4:	89 d1                	mov    ecx,edx
10004ec6:	0f af 4c 24 18       	imul   ecx,DWORD PTR [esp+0x18]
10004ecb:	c1 f9 08             	sar    ecx,0x8
10004ece:	eb 14                	jmp    10004ee4 <ssfn_render+0x15b3>
10004ed0:	8b 8c 24 cc 00 00 00 	mov    ecx,DWORD PTR [esp+0xcc]
10004ed7:	3b 84 24 c4 00 00 00 	cmp    eax,DWORD PTR [esp+0xc4]
10004ede:	74 04                	je     10004ee4 <ssfn_render+0x15b3>
10004ee0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004ee4:	03 44 24 78          	add    eax,DWORD PTR [esp+0x78]
10004ee8:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
10004eec:	8b b4 24 c8 00 00 00 	mov    esi,DWORD PTR [esp+0xc8]
10004ef3:	0f b6 54 06 08       	movzx  edx,BYTE PTR [esi+eax*1+0x8]
10004ef8:	81 fa ff 00 00 00    	cmp    edx,0xff
10004efe:	75 35                	jne    10004f35 <ssfn_render+0x1604>
10004f00:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
10004f07:	81 44 24 30 ff 00 00 00 	add    DWORD PTR [esp+0x30],0xff
10004f0f:	0f af c1             	imul   eax,ecx
10004f12:	01 44 24 2c          	add    DWORD PTR [esp+0x2c],eax
10004f16:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
10004f1d:	0f af c1             	imul   eax,ecx
10004f20:	0f af 8c 24 98 00 00 00 	imul   ecx,DWORD PTR [esp+0x98]
10004f28:	01 44 24 28          	add    DWORD PTR [esp+0x28],eax
10004f2c:	01 4c 24 24          	add    DWORD PTR [esp+0x24],ecx
10004f30:	e9 f1 00 00 00       	jmp    10005026 <ssfn_render+0x16f5>
10004f35:	81 fa fe 00 00 00    	cmp    edx,0xfe
10004f3b:	74 31                	je     10004f6e <ssfn_render+0x163d>
10004f3d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10004f40:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
10004f43:	85 db                	test   ebx,ebx
10004f45:	74 27                	je     10004f6e <ssfn_render+0x163d>
10004f47:	01 d8                	add    eax,ebx
10004f49:	8b 14 90             	mov    edx,DWORD PTR [eax+edx*4]
10004f4c:	89 d3                	mov    ebx,edx
10004f4e:	89 94 24 d4 00 00 00 	mov    DWORD PTR [esp+0xd4],edx
10004f55:	c1 eb 10             	shr    ebx,0x10
10004f58:	0f b6 f6             	movzx  esi,dh
10004f5b:	0f b6 c3             	movzx  eax,bl
10004f5e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10004f62:	0f b6 c2             	movzx  eax,dl
10004f65:	c1 ea 18             	shr    edx,0x18
10004f68:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
10004f6c:	eb 17                	jmp    10004f85 <ssfn_render+0x1654>
10004f6e:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004f71:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
10004f75:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10004f79:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10004f7d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10004f81:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10004f85:	81 7c 24 14 ff 00 00 00 	cmp    DWORD PTR [esp+0x14],0xff
10004f8d:	75 21                	jne    10004fb0 <ssfn_render+0x167f>
10004f8f:	0f af c1             	imul   eax,ecx
10004f92:	0f af f1             	imul   esi,ecx
10004f95:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
10004f99:	01 44 24 2c          	add    DWORD PTR [esp+0x2c],eax
10004f9d:	0f af d9             	imul   ebx,ecx
10004fa0:	01 74 24 28          	add    DWORD PTR [esp+0x28],esi
10004fa4:	01 5c 24 24          	add    DWORD PTR [esp+0x24],ebx
10004fa8:	69 c9 ff 00 00 00    	imul   ecx,ecx,0xff
10004fae:	eb 72                	jmp    10005022 <ssfn_render+0x16f1>
10004fb0:	0f af 74 24 14       	imul   esi,DWORD PTR [esp+0x14]
10004fb5:	bb ff 00 00 00       	mov    ebx,0xff
10004fba:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
10004fbf:	2b 5c 24 14          	sub    ebx,DWORD PTR [esp+0x14]
10004fc3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
10004fca:	89 5c 24 7c          	mov    DWORD PTR [esp+0x7c],ebx
10004fce:	0f af d3             	imul   edx,ebx
10004fd1:	bb ff 00 00 00       	mov    ebx,0xff
10004fd6:	01 d0                	add    eax,edx
10004fd8:	0f af c1             	imul   eax,ecx
10004fdb:	99                   	cdq    
10004fdc:	f7 fb                	idiv   ebx
10004fde:	01 44 24 2c          	add    DWORD PTR [esp+0x2c],eax
10004fe2:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10004fe6:	0f af 84 24 94 00 00 00 	imul   eax,DWORD PTR [esp+0x94]
10004fee:	01 f0                	add    eax,esi
10004ff0:	89 de                	mov    esi,ebx
10004ff2:	0f af c1             	imul   eax,ecx
10004ff5:	99                   	cdq    
10004ff6:	f7 fb                	idiv   ebx
10004ff8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
10004ffc:	01 44 24 28          	add    DWORD PTR [esp+0x28],eax
10005000:	0f af 5c 24 14       	imul   ebx,DWORD PTR [esp+0x14]
10005005:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10005009:	0f af 84 24 98 00 00 00 	imul   eax,DWORD PTR [esp+0x98]
10005011:	01 d8                	add    eax,ebx
10005013:	0f af c1             	imul   eax,ecx
10005016:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
1000501b:	99                   	cdq    
1000501c:	f7 fe                	idiv   esi
1000501e:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
10005022:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
10005026:	81 44 24 38 00 01 00 00 	add    DWORD PTR [esp+0x38],0x100
1000502e:	e9 46 fe ff ff       	jmp    10004e79 <ssfn_render+0x1548>
10005033:	81 44 24 3c 00 01 00 00 	add    DWORD PTR [esp+0x3c],0x100
1000503b:	e9 ac fd ff ff       	jmp    10004dec <ssfn_render+0x14bb>
10005040:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
10005045:	74 30                	je     10005077 <ssfn_render+0x1746>
10005047:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
1000504b:	31 d2                	xor    edx,edx
1000504d:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
10005051:	31 d2                	xor    edx,edx
10005053:	89 c1                	mov    ecx,eax
10005055:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10005059:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
1000505d:	31 d2                	xor    edx,edx
1000505f:	89 c6                	mov    esi,eax
10005061:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10005065:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
10005069:	31 d2                	xor    edx,edx
1000506b:	89 c3                	mov    ebx,eax
1000506d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10005071:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
10005075:	eb 1c                	jmp    10005093 <ssfn_render+0x1762>
10005077:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
1000507b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
1000507f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10005083:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10005087:	c1 e9 08             	shr    ecx,0x8
1000508a:	c1 ee 08             	shr    esi,0x8
1000508d:	c1 eb 08             	shr    ebx,0x8
10005090:	c1 e8 08             	shr    eax,0x8
10005093:	f6 85 bc f5 00 00 40 	test   BYTE PTR [ebp+0xf5bc],0x40
1000509a:	74 10                	je     100050ac <ssfn_render+0x177b>
1000509c:	83 f8 7f             	cmp    eax,0x7f
1000509f:	0f 86 9b 00 00 00    	jbe    10005140 <ssfn_render+0x180f>
100050a5:	b8 ff 00 00 00       	mov    eax,0xff
100050aa:	eb 09                	jmp    100050b5 <ssfn_render+0x1784>
100050ac:	83 f8 0f             	cmp    eax,0xf
100050af:	0f 86 8b 00 00 00    	jbe    10005140 <ssfn_render+0x180f>
100050b5:	89 ca                	mov    edx,ecx
100050b7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
100050bd:	76 05                	jbe    100050c4 <ssfn_render+0x1793>
100050bf:	ba ff 00 00 00       	mov    edx,0xff
100050c4:	b9 10 00 00 00       	mov    ecx,0x10
100050c9:	2b 8c 24 b4 00 00 00 	sub    ecx,DWORD PTR [esp+0xb4]
100050d0:	d3 e2                	shl    edx,cl
100050d2:	81 fe ff 00 00 00    	cmp    esi,0xff
100050d8:	89 d1                	mov    ecx,edx
100050da:	76 05                	jbe    100050e1 <ssfn_render+0x17b0>
100050dc:	be ff 00 00 00       	mov    esi,0xff
100050e1:	c1 e6 08             	shl    esi,0x8
100050e4:	09 ce                	or     esi,ecx
100050e6:	81 fb ff 00 00 00    	cmp    ebx,0xff
100050ec:	76 05                	jbe    100050f3 <ssfn_render+0x17c2>
100050ee:	bb ff 00 00 00       	mov    ebx,0xff
100050f3:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
100050f7:	d3 e3                	shl    ebx,cl
100050f9:	09 de                	or     esi,ebx
100050fb:	3d ff 00 00 00       	cmp    eax,0xff
10005100:	76 05                	jbe    10005107 <ssfn_render+0x17d6>
10005102:	b8 ff 00 00 00       	mov    eax,0xff
10005107:	c1 e0 18             	shl    eax,0x18
1000510a:	09 f0                	or     eax,esi
1000510c:	8b b4 24 88 00 00 00 	mov    esi,DWORD PTR [esp+0x88]
10005113:	89 04 be             	mov    DWORD PTR [esi+edi*4],eax
10005116:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
1000511a:	39 74 24 40          	cmp    DWORD PTR [esp+0x40],esi
1000511e:	75 20                	jne    10005140 <ssfn_render+0x180f>
10005120:	39 bc 24 8c 00 00 00 	cmp    DWORD PTR [esp+0x8c],edi
10005127:	7e 07                	jle    10005130 <ssfn_render+0x17ff>
10005129:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
10005130:	39 bc 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],edi
10005137:	7d 07                	jge    10005140 <ssfn_render+0x180f>
10005139:	89 bc 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edi
10005140:	47                   	inc    edi
10005141:	ff 84 24 a0 00 00 00 	inc    DWORD PTR [esp+0xa0]
10005148:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
1000514c:	0f 85 ba fb ff ff    	jne    10004d0c <ssfn_render+0x13db>
10005152:	8b bc 24 80 00 00 00 	mov    edi,DWORD PTR [esp+0x80]
10005159:	ff 44 24 64          	inc    DWORD PTR [esp+0x64]
1000515d:	01 bc 24 88 00 00 00 	add    DWORD PTR [esp+0x88],edi
10005164:	ff 84 24 9c 00 00 00 	inc    DWORD PTR [esp+0x9c]
1000516b:	e9 03 fb ff ff       	jmp    10004c73 <ssfn_render+0x1342>
10005170:	f6 85 bc f5 00 00 10 	test   BYTE PTR [ebp+0xf5bc],0x10
10005177:	0f 84 7c 01 00 00    	je     100052f9 <ssfn_render+0x19c8>
1000517d:	0f b6 84 24 ac 00 00 00 	movzx  eax,BYTE PTR [esp+0xac]
10005185:	8b bc 24 8c 00 00 00 	mov    edi,DWORD PTR [esp+0x8c]
1000518c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10005190:	40                   	inc    eax
10005191:	29 c7                	sub    edi,eax
10005193:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
1000519a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
1000519e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
100051a2:	8d 44 38 02          	lea    eax,[eax+edi*1+0x2]
100051a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100051aa:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
100051ae:	7e 09                	jle    100051b9 <ssfn_render+0x1888>
100051b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100051b4:	40                   	inc    eax
100051b5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100051b9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
100051bd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
100051c1:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
100051c5:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
100051ca:	8d 44 b8 fc          	lea    eax,[eax+edi*4-0x4]
100051ce:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
100051d2:	01 c7                	add    edi,eax
100051d4:	8b 04 24             	mov    eax,DWORD PTR [esp]
100051d7:	c1 e0 18             	shl    eax,0x18
100051da:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100051de:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
100051e2:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
100051e6:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
100051ea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
100051ee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100051f2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100051f6:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
100051fb:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
100051ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10005203:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10005207:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
1000520b:	0f 8e e8 00 00 00    	jle    100052f9 <ssfn_render+0x19c8>
10005211:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10005218:	0f bf 40 06          	movsx  eax,WORD PTR [eax+0x6]
1000521c:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
10005220:	0f 8e d3 00 00 00    	jle    100052f9 <ssfn_render+0x19c8>
10005226:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
1000522b:	79 11                	jns    1000523e <ssfn_render+0x190d>
1000522d:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
10005231:	03 bc 24 80 00 00 00 	add    edi,DWORD PTR [esp+0x80]
10005238:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
1000523c:	eb c1                	jmp    100051ff <ssfn_render+0x18ce>
1000523e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10005242:	31 f6                	xor    esi,esi
10005244:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10005248:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
1000524c:	39 5c 24 54          	cmp    DWORD PTR [esp+0x54],ebx
10005250:	7e db                	jle    1000522d <ssfn_render+0x18fc>
10005252:	85 db                	test   ebx,ebx
10005254:	0f 88 8b 00 00 00    	js     100052e5 <ssfn_render+0x19b4>
1000525a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
1000525e:	7e 06                	jle    10005266 <ssfn_render+0x1935>
10005260:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
10005264:	7f 7f                	jg     100052e5 <ssfn_render+0x19b4>
10005266:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
10005269:	b8 10 00 00 00       	mov    eax,0x10
1000526e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10005272:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
10005276:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000527a:	89 d8                	mov    eax,ebx
1000527c:	8a 4c 24 2c          	mov    cl,BYTE PTR [esp+0x2c]
10005280:	d3 e8                	shr    eax,cl
10005282:	0f b6 cf             	movzx  ecx,bh
10005285:	0f b6 c0             	movzx  eax,al
10005288:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
1000528c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
10005290:	d3 eb                	shr    ebx,cl
10005292:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10005296:	0f b6 db             	movzx  ebx,bl
10005299:	29 c1                	sub    ecx,eax
1000529b:	29 da                	sub    edx,ebx
1000529d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
100052a1:	0f af 14 24          	imul   edx,DWORD PTR [esp]
100052a5:	c1 f9 08             	sar    ecx,0x8
100052a8:	c1 fa 08             	sar    edx,0x8
100052ab:	01 c8                	add    eax,ecx
100052ad:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
100052b1:	8a 4c 24 2c          	mov    cl,BYTE PTR [esp+0x2c]
100052b5:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
100052b9:	d3 e0                	shl    eax,cl
100052bb:	2b 54 24 38          	sub    edx,DWORD PTR [esp+0x38]
100052bf:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
100052c3:	0f af 14 24          	imul   edx,DWORD PTR [esp]
100052c7:	c1 fa 08             	sar    edx,0x8
100052ca:	03 54 24 38          	add    edx,DWORD PTR [esp+0x38]
100052ce:	c1 e2 08             	shl    edx,0x8
100052d1:	09 d0                	or     eax,edx
100052d3:	8d 14 19             	lea    edx,[ecx+ebx*1]
100052d6:	0b 44 24 50          	or     eax,DWORD PTR [esp+0x50]
100052da:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
100052de:	d3 e2                	shl    edx,cl
100052e0:	09 c2                	or     edx,eax
100052e2:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
100052e5:	46                   	inc    esi
100052e6:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
100052ea:	39 74 24 70          	cmp    DWORD PTR [esp+0x70],esi
100052ee:	0f 8d 54 ff ff ff    	jge    10005248 <ssfn_render+0x1917>
100052f4:	e9 34 ff ff ff       	jmp    1000522d <ssfn_render+0x18fc>
100052f9:	f6 85 bc f5 00 00 20 	test   BYTE PTR [ebp+0xf5bc],0x20
10005300:	0f 84 56 01 00 00    	je     1000545c <ssfn_render+0x1b2b>
10005306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000530a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
1000530e:	d1 f8                	sar    eax,1
10005310:	47                   	inc    edi
10005311:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10005315:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
10005319:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
1000531d:	7e 09                	jle    10005328 <ssfn_render+0x19f7>
1000531f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10005323:	47                   	inc    edi
10005324:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
10005328:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
1000532c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10005330:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
10005334:	8b 34 24             	mov    esi,DWORD PTR [esp]
10005337:	01 c2                	add    edx,eax
10005339:	c1 e6 18             	shl    esi,0x18
1000533c:	0f af 54 24 48       	imul   edx,DWORD PTR [esp+0x48]
10005341:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
10005345:	8d 54 ba fc          	lea    edx,[edx+edi*4-0x4]
10005349:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
1000534d:	01 d7                	add    edi,edx
1000534f:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
10005353:	01 c2                	add    edx,eax
10005355:	0f b6 84 24 ac 00 00 00 	movzx  eax,BYTE PTR [esp+0xac]
1000535d:	2b 54 24 34          	sub    edx,DWORD PTR [esp+0x34]
10005361:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
10005365:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
10005369:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
1000536d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
10005372:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10005376:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
1000537a:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
1000537e:	0f 8e d8 00 00 00    	jle    1000545c <ssfn_render+0x1b2b>
10005384:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
1000538b:	0f bf 40 06          	movsx  eax,WORD PTR [eax+0x6]
1000538f:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10005393:	0f 8e c3 00 00 00    	jle    1000545c <ssfn_render+0x1b2b>
10005399:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
1000539e:	79 11                	jns    100053b1 <ssfn_render+0x1a80>
100053a0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
100053a4:	03 bc 24 80 00 00 00 	add    edi,DWORD PTR [esp+0x80]
100053ab:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
100053af:	eb c5                	jmp    10005376 <ssfn_render+0x1a45>
100053b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100053b5:	31 f6                	xor    esi,esi
100053b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100053bb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100053bf:	39 5c 24 54          	cmp    DWORD PTR [esp+0x54],ebx
100053c3:	7e db                	jle    100053a0 <ssfn_render+0x1a6f>
100053c5:	85 db                	test   ebx,ebx
100053c7:	78 7f                	js     10005448 <ssfn_render+0x1b17>
100053c9:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
100053cc:	b8 10 00 00 00       	mov    eax,0x10
100053d1:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
100053d5:	2b 44 24 38          	sub    eax,DWORD PTR [esp+0x38]
100053d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100053dd:	89 d8                	mov    eax,ebx
100053df:	8a 4c 24 20          	mov    cl,BYTE PTR [esp+0x20]
100053e3:	d3 e8                	shr    eax,cl
100053e5:	0f b6 cf             	movzx  ecx,bh
100053e8:	0f b6 c0             	movzx  eax,al
100053eb:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
100053ef:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
100053f3:	d3 eb                	shr    ebx,cl
100053f5:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
100053f9:	0f b6 db             	movzx  ebx,bl
100053fc:	29 c1                	sub    ecx,eax
100053fe:	29 da                	sub    edx,ebx
10005400:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
10005404:	0f af 14 24          	imul   edx,DWORD PTR [esp]
10005408:	c1 f9 08             	sar    ecx,0x8
1000540b:	c1 fa 08             	sar    edx,0x8
1000540e:	01 c8                	add    eax,ecx
10005410:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
10005414:	8a 4c 24 20          	mov    cl,BYTE PTR [esp+0x20]
10005418:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
1000541c:	d3 e0                	shl    eax,cl
1000541e:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
10005422:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
10005426:	0f af 14 24          	imul   edx,DWORD PTR [esp]
1000542a:	c1 fa 08             	sar    edx,0x8
1000542d:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
10005431:	c1 e2 08             	shl    edx,0x8
10005434:	09 d0                	or     eax,edx
10005436:	8d 14 19             	lea    edx,[ecx+ebx*1]
10005439:	0b 44 24 30          	or     eax,DWORD PTR [esp+0x30]
1000543d:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
10005441:	d3 e2                	shl    edx,cl
10005443:	09 c2                	or     edx,eax
10005445:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
10005448:	46                   	inc    esi
10005449:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
1000544d:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
10005451:	0f 8d 64 ff ff ff    	jge    100053bb <ssfn_render+0x1a8a>
10005457:	e9 44 ff ff ff       	jmp    100053a0 <ssfn_render+0x1a6f>
1000545c:	f6 85 bd f5 00 00 08 	test   BYTE PTR [ebp+0xf5bd],0x8
10005463:	74 04                	je     10005469 <ssfn_render+0x1b38>
10005465:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
10005469:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000546d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10005471:	89 85 90 f5 00 00    	mov    DWORD PTR [ebp+0xf590],eax
10005477:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
1000547e:	66 01 78 0a          	add    WORD PTR [eax+0xa],di
10005482:	8b bc 24 04 06 01 00 	mov    edi,DWORD PTR [esp+0x10604]
10005489:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000548c:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10005490:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10005496:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
1000549a:	0f af 44 24 04       	imul   eax,DWORD PTR [esp+0x4]
1000549f:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100054a3:	99                   	cdq    
100054a4:	f7 f9                	idiv   ecx
100054a6:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
100054aa:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
100054b0:	25 80 00 00 00       	and    eax,0x80
100054b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100054b9:	0f 85 ec 01 00 00    	jne    100056ab <ssfn_render+0x1d7a>
100054bf:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100054c2:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
100054c6:	0f 84 df 01 00 00    	je     100056ab <ssfn_render+0x1d7a>
100054cc:	8d 94 24 d4 00 00 00 	lea    edx,[esp+0xd4]
100054d3:	52                   	push   edx
100054d4:	8d 94 24 e0 00 00 00 	lea    edx,[esp+0xe0]
100054db:	52                   	push   edx
100054dc:	8b 94 24 10 06 01 00 	mov    edx,DWORD PTR [esp+0x10610]
100054e3:	03 94 24 e0 00 00 00 	add    edx,DWORD PTR [esp+0xe0]
100054ea:	52                   	push   edx
100054eb:	50                   	push   eax
100054ec:	e8 b9 d2 ff ff       	call   100027aa <_ssfn_c>
100054f1:	83 c4 10             	add    esp,0x10
100054f4:	85 c0                	test   eax,eax
100054f6:	0f 84 af 01 00 00    	je     100056ab <ssfn_render+0x1d7a>
100054fc:	83 bc 24 d4 00 00 00 20 	cmp    DWORD PTR [esp+0xd4],0x20
10005504:	0f 86 a1 01 00 00    	jbe    100056ab <ssfn_render+0x1d7a>
1000550a:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10005510:	8d 48 06             	lea    ecx,[eax+0x6]
10005513:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10005519:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
1000551d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
10005521:	0f 8e 84 01 00 00    	jle    100056ab <ssfn_render+0x1d7a>
10005527:	8a 19                	mov    bl,BYTE PTR [ecx]
10005529:	88 5c 24 0c          	mov    BYTE PTR [esp+0xc],bl
1000552d:	8a 18                	mov    bl,BYTE PTR [eax]
1000552f:	83 e3 40             	and    ebx,0x40
10005532:	80 7c 24 0c ff       	cmp    BYTE PTR [esp+0xc],0xff
10005537:	75 14                	jne    1000554d <ssfn_render+0x1c1c>
10005539:	80 79 01 ff          	cmp    BYTE PTR [ecx+0x1],0xff
1000553d:	75 0e                	jne    1000554d <ssfn_render+0x1c1c>
1000553f:	80 fb 01             	cmp    bl,0x1
10005542:	19 c0                	sbb    eax,eax
10005544:	8d 4c 01 06          	lea    ecx,[ecx+eax*1+0x6]
10005548:	e9 55 01 00 00       	jmp    100056a2 <ssfn_render+0x1d71>
1000554d:	0f b6 71 04          	movzx  esi,BYTE PTR [ecx+0x4]
10005551:	0f b6 51 03          	movzx  edx,BYTE PTR [ecx+0x3]
10005555:	c1 e6 10             	shl    esi,0x10
10005558:	0f b6 79 02          	movzx  edi,BYTE PTR [ecx+0x2]
1000555c:	84 db                	test   bl,bl
1000555e:	74 08                	je     10005568 <ssfn_render+0x1c37>
10005560:	8b 79 02             	mov    edi,DWORD PTR [ecx+0x2]
10005563:	83 c1 06             	add    ecx,0x6
10005566:	eb 0c                	jmp    10005574 <ssfn_render+0x1c43>
10005568:	c1 e2 08             	shl    edx,0x8
1000556b:	83 c1 05             	add    ecx,0x5
1000556e:	89 d0                	mov    eax,edx
10005570:	09 f0                	or     eax,esi
10005572:	09 c7                	or     edi,eax
10005574:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10005577:	89 04 24             	mov    DWORD PTR [esp],eax
1000557a:	01 f8                	add    eax,edi
1000557c:	8a 10                	mov    dl,BYTE PTR [eax]
1000557e:	88 d3                	mov    bl,dl
10005580:	83 e3 e0             	and    ebx,0xffffffe0
10005583:	80 fb c0             	cmp    bl,0xc0
10005586:	0f 85 16 01 00 00    	jne    100056a2 <ssfn_render+0x1d71>
1000558c:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
10005590:	c1 e2 08             	shl    edx,0x8
10005593:	83 c0 02             	add    eax,0x2
10005596:	81 e2 00 1f 00 00    	and    edx,0x1f00
1000559c:	8b b4 24 d4 00 00 00 	mov    esi,DWORD PTR [esp+0xd4]
100055a3:	09 da                	or     edx,ebx
100055a5:	8d 7a 01             	lea    edi,[edx+0x1]
100055a8:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
100055ac:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
100055b0:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
100055b5:	0f 84 e7 00 00 00    	je     100056a2 <ssfn_render+0x1d71>
100055bb:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
100055bf:	0f b7 10             	movzx  edx,WORD PTR [eax]
100055c2:	c1 e3 10             	shl    ebx,0x10
100055c5:	81 e3 00 00 0f 00    	and    ebx,0xf0000
100055cb:	09 d3                	or     ebx,edx
100055cd:	39 de                	cmp    esi,ebx
100055cf:	0f 82 c5 00 00 00    	jb     1000569a <ssfn_render+0x1d69>
100055d5:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
100055d8:	89 d7                	mov    edi,edx
100055da:	c1 e7 10             	shl    edi,0x10
100055dd:	81 e7 00 00 0f 00    	and    edi,0xf0000
100055e3:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
100055e7:	0f b7 78 03          	movzx  edi,WORD PTR [eax+0x3]
100055eb:	0b 7c 24 14          	or     edi,DWORD PTR [esp+0x14]
100055ef:	39 fe                	cmp    esi,edi
100055f1:	0f 87 a3 00 00 00    	ja     1000569a <ssfn_render+0x1d69>
100055f7:	29 de                	sub    esi,ebx
100055f9:	c0 ea 04             	shr    dl,0x4
100055fc:	89 b4 24 d4 00 00 00 	mov    DWORD PTR [esp+0xd4],esi
10005603:	0f b6 d2             	movzx  edx,dl
10005606:	8b 3c 24             	mov    edi,DWORD PTR [esp]
10005609:	89 d3                	mov    ebx,edx
1000560b:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
1000560f:	c1 e3 10             	shl    ebx,0x10
10005612:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10005615:	09 da                	or     edx,ebx
10005617:	c0 e8 04             	shr    al,0x4
1000561a:	c1 e0 18             	shl    eax,0x18
1000561d:	09 c2                	or     edx,eax
1000561f:	8b 04 24             	mov    eax,DWORD PTR [esp]
10005622:	03 50 18             	add    edx,DWORD PTR [eax+0x18]
10005625:	01 c2                	add    edx,eax
10005627:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000562a:	8d 7c 07 fc          	lea    edi,[edi+eax*1-0x4]
1000562e:	39 d7                	cmp    edi,edx
10005630:	76 70                	jbe    100056a2 <ssfn_render+0x1d71>
10005632:	8a 1a                	mov    bl,BYTE PTR [edx]
10005634:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
1000563b:	89 de                	mov    esi,ebx
1000563d:	83 e6 7f             	and    esi,0x7f
10005640:	39 c6                	cmp    esi,eax
10005642:	73 1d                	jae    10005661 <ssfn_render+0x1d30>
10005644:	48                   	dec    eax
10005645:	bb 02 00 00 00       	mov    ebx,0x2
1000564a:	29 f0                	sub    eax,esi
1000564c:	89 84 24 d4 00 00 00 	mov    DWORD PTR [esp+0xd4],eax
10005653:	0f b6 02             	movzx  eax,BYTE PTR [edx]
10005656:	84 c0                	test   al,al
10005658:	78 03                	js     1000565d <ssfn_render+0x1d2c>
1000565a:	8d 58 02             	lea    ebx,[eax+0x2]
1000565d:	01 da                	add    edx,ebx
1000565f:	eb cd                	jmp    1000562e <ssfn_render+0x1cfd>
10005661:	be 01 00 00 00       	mov    esi,0x1
10005666:	84 db                	test   bl,bl
10005668:	78 03                	js     1000566d <ssfn_render+0x1d3c>
1000566a:	8d 70 01             	lea    esi,[eax+0x1]
1000566d:	0f be 04 32          	movsx  eax,BYTE PTR [edx+esi*1]
10005671:	8b 3c 24             	mov    edi,DWORD PTR [esp]
10005674:	0f af 44 24 04       	imul   eax,DWORD PTR [esp+0x4]
10005679:	0f b6 5f 0b          	movzx  ebx,BYTE PTR [edi+0xb]
1000567d:	99                   	cdq    
1000567e:	8b bc 24 04 06 01 00 	mov    edi,DWORD PTR [esp+0x10604]
10005685:	f7 fb                	idiv   ebx
10005687:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
1000568c:	74 06                	je     10005694 <ssfn_render+0x1d63>
1000568e:	66 01 47 0a          	add    WORD PTR [edi+0xa],ax
10005692:	eb 0e                	jmp    100056a2 <ssfn_render+0x1d71>
10005694:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10005698:	eb 08                	jmp    100056a2 <ssfn_render+0x1d71>
1000569a:	83 c0 08             	add    eax,0x8
1000569d:	e9 0a ff ff ff       	jmp    100055ac <ssfn_render+0x1c7b>
100056a2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
100056a6:	e9 68 fe ff ff       	jmp    10005513 <ssfn_render+0x1be2>
100056ab:	8b 84 24 d8 00 00 00 	mov    eax,DWORD PTR [esp+0xd8]
100056b2:	eb 7f                	jmp    10005733 <ssfn_render+0x1e02>
100056b4:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
100056bf:	e9 ab e4 ff ff       	jmp    10003b6f <ssfn_render+0x23e>
100056c4:	8d 84 24 d0 00 00 00 	lea    eax,[esp+0xd0]
100056cb:	50                   	push   eax
100056cc:	8d 84 24 dc 00 00 00 	lea    eax,[esp+0xdc]
100056d3:	50                   	push   eax
100056d4:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
100056db:	51                   	push   ecx
100056dc:	e8 c9 d0 ff ff       	call   100027aa <_ssfn_c>
100056e1:	83 c4 10             	add    esp,0x10
100056e4:	89 c1                	mov    ecx,eax
100056e6:	85 c0                	test   eax,eax
100056e8:	0f 84 7a e4 ff ff    	je     10003b68 <ssfn_render+0x237>
100056ee:	e9 fc e4 ff ff       	jmp    10003bef <ssfn_render+0x2be>
100056f3:	8b 04 87             	mov    eax,DWORD PTR [edi+eax*4]
100056f6:	f6 40 08 30          	test   BYTE PTR [eax+0x8],0x30
100056fa:	75 0c                	jne    10005708 <ssfn_render+0x1dd7>
100056fc:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
10005703:	e9 90 e4 ff ff       	jmp    10003b98 <ssfn_render+0x267>
10005708:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
1000570f:	51                   	push   ecx
10005710:	8d 94 24 dc 00 00 00 	lea    edx,[esp+0xdc]
10005717:	52                   	push   edx
10005718:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
1000571f:	50                   	push   eax
10005720:	e8 85 d0 ff ff       	call   100027aa <_ssfn_c>
10005725:	83 c4 10             	add    esp,0x10
10005728:	89 c1                	mov    ecx,eax
1000572a:	85 c0                	test   eax,eax
1000572c:	74 ce                	je     100056fc <ssfn_render+0x1dcb>
1000572e:	e9 bc e4 ff ff       	jmp    10003bef <ssfn_render+0x2be>
10005733:	81 c4 ec 05 01 00    	add    esp,0x105ec
10005739:	5b                   	pop    ebx
1000573a:	5e                   	pop    esi
1000573b:	5f                   	pop    edi
1000573c:	5d                   	pop    ebp
1000573d:	c3                   	ret    

1000573e <ssfn_bbox>:
1000573e:	55                   	push   ebp
1000573f:	57                   	push   edi
10005740:	56                   	push   esi
10005741:	53                   	push   ebx
10005742:	83 ec 3c             	sub    esp,0x3c
10005745:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
1000574a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
1000574e:	0f 94 c0             	sete   al
10005751:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
10005756:	0f 94 c2             	sete   dl
10005759:	09 d0                	or     eax,edx
1000575b:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
10005760:	0f 94 c2             	sete   dl
10005763:	09 d0                	or     eax,edx
10005765:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
1000576a:	0f 94 c2             	sete   dl
1000576d:	09 d0                	or     eax,edx
1000576f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
10005774:	0f 94 c2             	sete   dl
10005777:	08 d0                	or     al,dl
10005779:	0f 85 7c 01 00 00    	jne    100058fb <ssfn_bbox+0x1bd>
1000577f:	85 db                	test   ebx,ebx
10005781:	0f 84 74 01 00 00    	je     100058fb <ssfn_bbox+0x1bd>
10005787:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000578b:	31 f6                	xor    esi,esi
1000578d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10005793:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10005797:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000579d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
100057a1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100057a7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
100057ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100057b1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100057b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
100057b8:	0f 84 42 01 00 00    	je     10005900 <ssfn_bbox+0x1c2>
100057be:	8d 54 24 18          	lea    edx,[esp+0x18]
100057c2:	b9 06 00 00 00       	mov    ecx,0x6
100057c7:	89 d7                	mov    edi,edx
100057c9:	89 f0                	mov    eax,esi
100057cb:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
100057d5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100057d7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
100057df:	31 ff                	xor    edi,edi
100057e1:	bd 01 00 00 00       	mov    ebp,0x1
100057e6:	50                   	push   eax
100057e7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100057eb:	8d 44 24 20          	lea    eax,[esp+0x20]
100057ef:	50                   	push   eax
100057f0:	53                   	push   ebx
100057f1:	e8 fc ff ff ff       	call   100057f2 <ssfn_bbox+0xb4>	100057f2: R_386_PC32	ssfn_render
100057f6:	83 c4 10             	add    esp,0x10
100057f9:	89 c6                	mov    esi,eax
100057fb:	85 c0                	test   eax,eax
100057fd:	74 6f                	je     1000586e <ssfn_bbox+0x130>
100057ff:	0f 88 fb 00 00 00    	js     10005900 <ssfn_bbox+0x1c2>
10005805:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
1000580b:	85 c0                	test   eax,eax
1000580d:	0f 84 ed 00 00 00    	je     10005900 <ssfn_bbox+0x1c2>
10005813:	85 ed                	test   ebp,ebp
10005815:	74 0b                	je     10005822 <ssfn_bbox+0xe4>
10005817:	8b bb 88 f5 00 00    	mov    edi,DWORD PTR [ebx+0xf588]
1000581d:	66 01 7c 24 22       	add    WORD PTR [esp+0x22],di
10005822:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10005826:	74 12                	je     1000583a <ssfn_bbox+0xfc>
10005828:	8b 83 8c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf58c]
1000582e:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
10005832:	7d 2f                	jge    10005863 <ssfn_bbox+0x125>
10005834:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10005838:	eb 29                	jmp    10005863 <ssfn_bbox+0x125>
1000583a:	0f b7 08             	movzx  ecx,WORD PTR [eax]
1000583d:	0f bf 6c 24 1c       	movsx  ebp,WORD PTR [esp+0x1c]
10005842:	39 cd                	cmp    ebp,ecx
10005844:	7d 05                	jge    1000584b <ssfn_bbox+0x10d>
10005846:	66 89 4c 24 1c       	mov    WORD PTR [esp+0x1c],cx
1000584b:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
1000584f:	66 8b 4c 24 1e       	mov    cx,WORD PTR [esp+0x1e]
10005854:	84 d2                	test   dl,dl
10005856:	75 04                	jne    1000585c <ssfn_bbox+0x11e>
10005858:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
1000585c:	01 ca                	add    edx,ecx
1000585e:	66 89 54 24 1e       	mov    WORD PTR [esp+0x1e],dx
10005863:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
10005867:	31 ed                	xor    ebp,ebp
10005869:	e9 78 ff ff ff       	jmp    100057e6 <ssfn_bbox+0xa8>
1000586e:	f6 83 bc f5 00 00 02 	test   BYTE PTR [ebx+0xf5bc],0x2
10005875:	74 23                	je     1000589a <ssfn_bbox+0x15c>
10005877:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
1000587a:	f6 40 08 20          	test   BYTE PTR [eax+0x8],0x20
1000587e:	75 1a                	jne    1000589a <ssfn_bbox+0x15c>
10005880:	8b 83 c0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c0]
10005886:	b9 04 00 00 00       	mov    ecx,0x4
1000588b:	99                   	cdq    
1000588c:	f7 f9                	idiv   ecx
1000588e:	66 03 44 24 22       	add    ax,WORD PTR [esp+0x22]
10005893:	29 f8                	sub    eax,edi
10005895:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
1000589a:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
100058a0:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
100058a4:	74 29                	je     100058cf <ssfn_bbox+0x191>
100058a6:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
100058ab:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
100058af:	89 01                	mov    DWORD PTR [ecx],eax
100058b1:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100058b5:	8b 83 c4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c4]
100058bb:	89 01                	mov    DWORD PTR [ecx],eax
100058bd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100058c1:	89 38                	mov    DWORD PTR [eax],edi
100058c3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100058c7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100058cb:	89 38                	mov    DWORD PTR [eax],edi
100058cd:	eb 31                	jmp    10005900 <ssfn_bbox+0x1c2>
100058cf:	0f bf 44 24 1c       	movsx  eax,WORD PTR [esp+0x1c]
100058d4:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
100058d8:	89 07                	mov    DWORD PTR [edi],eax
100058da:	0f bf 44 24 24       	movsx  eax,WORD PTR [esp+0x24]
100058df:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
100058e3:	89 07                	mov    DWORD PTR [edi],eax
100058e5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100058e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100058ef:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100058f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100058f9:	eb 05                	jmp    10005900 <ssfn_bbox+0x1c2>
100058fb:	be fc ff ff ff       	mov    esi,0xfffffffc
10005900:	83 c4 3c             	add    esp,0x3c
10005903:	89 f0                	mov    eax,esi
10005905:	5b                   	pop    ebx
10005906:	5e                   	pop    esi
10005907:	5f                   	pop    edi
10005908:	5d                   	pop    ebp
10005909:	c3                   	ret    

1000590a <ssfn_text>:
1000590a:	55                   	push   ebp
1000590b:	57                   	push   edi
1000590c:	56                   	push   esi
1000590d:	53                   	push   ebx
1000590e:	83 ec 1c             	sub    esp,0x1c
10005911:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10005915:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
10005919:	85 f6                	test   esi,esi
1000591b:	0f 84 b2 00 00 00    	je     100059d3 <ssfn_text+0xc9>
10005921:	85 ed                	test   ebp,ebp
10005923:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
10005928:	0f 84 a5 00 00 00    	je     100059d3 <ssfn_text+0xc9>
1000592e:	83 ec 0c             	sub    esp,0xc
10005931:	6a 18                	push   0x18
10005933:	e8 fc ff ff ff       	call   10005934 <ssfn_text+0x2a>	10005934: R_386_PC32	malloc
10005938:	83 c4 10             	add    esp,0x10
1000593b:	89 c3                	mov    ebx,eax
1000593d:	85 c0                	test   eax,eax
1000593f:	0f 84 8e 00 00 00    	je     100059d3 <ssfn_text+0xc9>
10005945:	31 c0                	xor    eax,eax
10005947:	b9 06 00 00 00       	mov    ecx,0x6
1000594c:	89 df                	mov    edi,ebx
1000594e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
10005951:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10005953:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10005957:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
1000595a:	74 79                	je     100059d5 <ssfn_text+0xcb>
1000595c:	8d 43 0c             	lea    eax,[ebx+0xc]
1000595f:	52                   	push   edx
10005960:	52                   	push   edx
10005961:	50                   	push   eax
10005962:	8d 43 0a             	lea    eax,[ebx+0xa]
10005965:	50                   	push   eax
10005966:	8d 43 06             	lea    eax,[ebx+0x6]
10005969:	50                   	push   eax
1000596a:	8d 43 04             	lea    eax,[ebx+0x4]
1000596d:	50                   	push   eax
1000596e:	56                   	push   esi
1000596f:	55                   	push   ebp
10005970:	e8 fc ff ff ff       	call   10005971 <ssfn_text+0x67>	10005971: R_386_PC32	ssfn_bbox
10005975:	83 c4 20             	add    esp,0x20
10005978:	85 c0                	test   eax,eax
1000597a:	75 59                	jne    100059d5 <ssfn_text+0xcb>
1000597c:	83 ec 0c             	sub    esp,0xc
1000597f:	0f bf 4b 04          	movsx  ecx,WORD PTR [ebx+0x4]
10005983:	0f bf 43 06          	movsx  eax,WORD PTR [ebx+0x6]
10005987:	0f af c8             	imul   ecx,eax
1000598a:	c1 e1 02             	shl    ecx,0x2
1000598d:	51                   	push   ecx
1000598e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10005992:	e8 fc ff ff ff       	call   10005993 <ssfn_text+0x89>	10005993: R_386_PC32	malloc
10005997:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
1000599b:	89 c7                	mov    edi,eax
1000599d:	89 03                	mov    DWORD PTR [ebx],eax
1000599f:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
100059a3:	83 c4 10             	add    esp,0x10
100059a6:	f3 aa                	rep stos BYTE PTR es:[edi],al
100059a8:	50                   	push   eax
100059a9:	56                   	push   esi
100059aa:	53                   	push   ebx
100059ab:	55                   	push   ebp
100059ac:	e8 fc ff ff ff       	call   100059ad <ssfn_text+0xa3>	100059ad: R_386_PC32	ssfn_render
100059b1:	83 c4 10             	add    esp,0x10
100059b4:	85 c0                	test   eax,eax
100059b6:	7e 04                	jle    100059bc <ssfn_text+0xb2>
100059b8:	01 c6                	add    esi,eax
100059ba:	eb ec                	jmp    100059a8 <ssfn_text+0x9e>
100059bc:	74 17                	je     100059d5 <ssfn_text+0xcb>
100059be:	83 ec 0c             	sub    esp,0xc
100059c1:	ff 33                	push   DWORD PTR [ebx]
100059c3:	e8 fc ff ff ff       	call   100059c4 <ssfn_text+0xba>	100059c4: R_386_PC32	free
100059c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
100059cb:	e8 fc ff ff ff       	call   100059cc <ssfn_text+0xc2>	100059cc: R_386_PC32	free
100059d0:	83 c4 10             	add    esp,0x10
100059d3:	31 db                	xor    ebx,ebx
100059d5:	83 c4 1c             	add    esp,0x1c
100059d8:	89 d8                	mov    eax,ebx
100059da:	5b                   	pop    ebx
100059db:	5e                   	pop    esi
100059dc:	5f                   	pop    edi
100059dd:	5d                   	pop    ebp
100059de:	c3                   	ret    

100059df <loadSSFNFont(Font*, int)>:
100059df:	55                   	push   ebp
100059e0:	57                   	push   edi
100059e1:	56                   	push   esi
100059e2:	53                   	push   ebx
100059e3:	81 ec 34 01 00 00    	sub    esp,0x134
100059e9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
100059f0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
100059f7:	e8 fc ff ff ff       	call   100059f8 <loadSSFNFont(Font*, int)+0x19>	100059f8: R_386_PC32	lookupInFontTableByNameOnly(char const*, int)
100059fc:	83 c4 10             	add    esp,0x10
100059ff:	83 f8 ff             	cmp    eax,0xffffffff
10005a02:	0f 85 44 01 00 00    	jne    10005b4c <loadSSFNFont(Font*, int)+0x16d>
10005a08:	50                   	push   eax
10005a09:	50                   	push   eax
10005a0a:	68 4d 86 00 10       	push   0x1000864d	10005a0b: R_386_32	.text
10005a0f:	8d 74 24 2c          	lea    esi,[esp+0x2c]
10005a13:	56                   	push   esi
10005a14:	e8 fc ff ff ff       	call   10005a15 <loadSSFNFont(Font*, int)+0x36>	10005a15: R_386_PC32	strcpy
10005a19:	58                   	pop    eax
10005a1a:	5a                   	pop    edx
10005a1b:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
10005a22:	56                   	push   esi
10005a23:	e8 fc ff ff ff       	call   10005a24 <loadSSFNFont(Font*, int)+0x45>	10005a24: R_386_PC32	strcat
10005a28:	59                   	pop    ecx
10005a29:	5b                   	pop    ebx
10005a2a:	68 62 86 00 10       	push   0x10008662	10005a2b: R_386_32	.text
10005a2f:	56                   	push   esi
10005a30:	e8 fc ff ff ff       	call   10005a31 <loadSSFNFont(Font*, int)+0x52>	10005a31: R_386_PC32	strcat
10005a35:	5f                   	pop    edi
10005a36:	5d                   	pop    ebp
10005a37:	56                   	push   esi
10005a38:	68 67 86 00 10       	push   0x10008667	10005a39: R_386_32	.text
10005a3d:	e8 fc ff ff ff       	call   10005a3e <loadSSFNFont(Font*, int)+0x5f>	10005a3e: R_386_PC32	Dbg::kprintf(char const*, ...)
10005a42:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10005a49:	e8 fc ff ff ff       	call   10005a4a <loadSSFNFont(Font*, int)+0x6b>	10005a4a: R_386_PC32	malloc
10005a4e:	83 c4 0c             	add    esp,0xc
10005a51:	89 c3                	mov    ebx,eax
10005a53:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005a55: R_386_32	kernelProcess
10005a59:	56                   	push   esi
10005a5a:	50                   	push   eax
10005a5b:	e8 fc ff ff ff       	call   10005a5c <loadSSFNFont(Font*, int)+0x7d>	10005a5c: R_386_PC32	File::File(char const*, Process*)
10005a60:	83 c4 10             	add    esp,0x10
10005a63:	85 db                	test   ebx,ebx
10005a65:	75 0d                	jne    10005a74 <loadSSFNFont(Font*, int)+0x95>
10005a67:	83 ec 0c             	sub    esp,0xc
10005a6a:	68 7a 86 00 10       	push   0x1000867a	10005a6b: R_386_32	.text
10005a6f:	e9 8d 00 00 00       	jmp    10005b01 <loadSSFNFont(Font*, int)+0x122>
10005a74:	50                   	push   eax
10005a75:	50                   	push   eax
10005a76:	6a 01                	push   0x1
10005a78:	53                   	push   ebx
10005a79:	e8 fc ff ff ff       	call   10005a7a <loadSSFNFont(Font*, int)+0x9b>	10005a7a: R_386_PC32	File::open(FileOpenMode)
10005a7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10005a82:	83 c4 10             	add    esp,0x10
10005a85:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10005a8a:	74 1a                	je     10005aa6 <loadSSFNFont(Font*, int)+0xc7>
10005a8c:	83 ec 0c             	sub    esp,0xc
10005a8f:	68 8f 86 00 10       	push   0x1000868f	10005a90: R_386_32	.text
10005a94:	e8 fc ff ff ff       	call   10005a95 <loadSSFNFont(Font*, int)+0xb6>	10005a95: R_386_PC32	Dbg::kprintf(char const*, ...)
10005a99:	8b 03                	mov    eax,DWORD PTR [ebx]
10005a9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
10005a9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
10005aa1:	e9 ec 00 00 00       	jmp    10005b92 <loadSSFNFont(Font*, int)+0x1b3>
10005aa6:	51                   	push   ecx
10005aa7:	8d 44 24 17          	lea    eax,[esp+0x17]
10005aab:	50                   	push   eax
10005aac:	8d 44 24 20          	lea    eax,[esp+0x20]
10005ab0:	50                   	push   eax
10005ab1:	53                   	push   ebx
10005ab2:	e8 fc ff ff ff       	call   10005ab3 <loadSSFNFont(Font*, int)+0xd4>	10005ab3: R_386_PC32	File::stat(unsigned long long*, bool*)
10005ab7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
10005abb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
10005abf:	89 3c 24             	mov    DWORD PTR [esp],edi
10005ac2:	e8 fc ff ff ff       	call   10005ac3 <loadSSFNFont(Font*, int)+0xe4>	10005ac3: R_386_PC32	malloc
10005ac7:	89 c6                	mov    esi,eax
10005ac9:	58                   	pop    eax
10005aca:	8b 03                	mov    eax,DWORD PTR [ebx]
10005acc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
10005ad0:	51                   	push   ecx
10005ad1:	56                   	push   esi
10005ad2:	55                   	push   ebp
10005ad3:	57                   	push   edi
10005ad4:	53                   	push   ebx
10005ad5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10005ad8:	83 c4 14             	add    esp,0x14
10005adb:	53                   	push   ebx
10005adc:	e8 fc ff ff ff       	call   10005add <loadSSFNFont(Font*, int)+0xfe>	10005add: R_386_PC32	File::close()
10005ae1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10005ae5:	83 c4 10             	add    esp,0x10
10005ae8:	89 c1                	mov    ecx,eax
10005aea:	c1 f9 1f             	sar    ecx,0x1f
10005aed:	3b 4c 24 1c          	cmp    ecx,DWORD PTR [esp+0x1c]
10005af1:	75 06                	jne    10005af9 <loadSSFNFont(Font*, int)+0x11a>
10005af3:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10005af7:	74 17                	je     10005b10 <loadSSFNFont(Font*, int)+0x131>
10005af9:	52                   	push   edx
10005afa:	52                   	push   edx
10005afb:	50                   	push   eax
10005afc:	68 a4 86 00 10       	push   0x100086a4	10005afd: R_386_32	.text
10005b01:	e8 fc ff ff ff       	call   10005b02 <loadSSFNFont(Font*, int)+0x123>	10005b02: R_386_PC32	Dbg::kprintf(char const*, ...)
10005b06:	83 c4 10             	add    esp,0x10
10005b09:	31 c0                	xor    eax,eax
10005b0b:	e9 87 00 00 00       	jmp    10005b97 <loadSSFNFont(Font*, int)+0x1b8>
10005b10:	83 ec 0c             	sub    esp,0xc
10005b13:	68 c8 f5 00 00       	push   0xf5c8
10005b18:	e8 fc ff ff ff       	call   10005b19 <loadSSFNFont(Font*, int)+0x13a>	10005b19: R_386_PC32	malloc
10005b1d:	b9 72 3d 00 00       	mov    ecx,0x3d72
10005b22:	89 c2                	mov    edx,eax
10005b24:	89 c7                	mov    edi,eax
10005b26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10005b2a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10005b2c:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
10005b33:	89 90 90 04 00 00    	mov    DWORD PTR [eax+0x490],edx
10005b39:	5f                   	pop    edi
10005b3a:	5d                   	pop    ebp
10005b3b:	56                   	push   esi
10005b3c:	52                   	push   edx
10005b3d:	e8 fc ff ff ff       	call   10005b3e <loadSSFNFont(Font*, int)+0x15f>	10005b3e: R_386_PC32	ssfn_load
10005b42:	89 34 24             	mov    DWORD PTR [esp],esi
10005b45:	e8 fc ff ff ff       	call   10005b46 <loadSSFNFont(Font*, int)+0x167>	10005b46: R_386_PC32	free
10005b4a:	eb 46                	jmp    10005b92 <loadSSFNFont(Font*, int)+0x1b3>
10005b4c:	89 c6                	mov    esi,eax
10005b4e:	50                   	push   eax
10005b4f:	50                   	push   eax
10005b50:	56                   	push   esi
10005b51:	68 c0 86 00 10       	push   0x100086c0	10005b52: R_386_32	.text
10005b56:	e8 fc ff ff ff       	call   10005b57 <loadSSFNFont(Font*, int)+0x178>	10005b57: R_386_PC32	Dbg::kprintf(char const*, ...)
10005b5b:	89 34 24             	mov    DWORD PTR [esp],esi
10005b5e:	e8 fc ff ff ff       	call   10005b5f <loadSSFNFont(Font*, int)+0x180>	10005b5f: R_386_PC32	getFontFromHandle(int)
10005b63:	5a                   	pop    edx
10005b64:	89 c6                	mov    esi,eax
10005b66:	59                   	pop    ecx
10005b67:	50                   	push   eax
10005b68:	68 d6 86 00 10       	push   0x100086d6	10005b69: R_386_32	.text
10005b6d:	e8 fc ff ff ff       	call   10005b6e <loadSSFNFont(Font*, int)+0x18f>	10005b6e: R_386_PC32	Dbg::kprintf(char const*, ...)
10005b72:	8b 8c 24 50 01 00 00 	mov    ecx,DWORD PTR [esp+0x150]
10005b79:	8b 86 90 04 00 00    	mov    eax,DWORD PTR [esi+0x490]
10005b7f:	89 81 90 04 00 00    	mov    DWORD PTR [ecx+0x490],eax
10005b85:	5b                   	pop    ebx
10005b86:	5e                   	pop    esi
10005b87:	50                   	push   eax
10005b88:	68 ec 86 00 10       	push   0x100086ec	10005b89: R_386_32	.text
10005b8d:	e8 fc ff ff ff       	call   10005b8e <loadSSFNFont(Font*, int)+0x1af>	10005b8e: R_386_PC32	Dbg::kprintf(char const*, ...)
10005b92:	83 c4 10             	add    esp,0x10
10005b95:	b0 01                	mov    al,0x1
10005b97:	81 c4 2c 01 00 00    	add    esp,0x12c
10005b9d:	5b                   	pop    ebx
10005b9e:	5e                   	pop    esi
10005b9f:	5f                   	pop    edi
10005ba0:	5d                   	pop    ebp
10005ba1:	c3                   	ret    

10005ba2 <getSSFNFontRegion(Font*, int, int*, int*)>:
10005ba2:	55                   	push   ebp
10005ba3:	57                   	push   edi
10005ba4:	56                   	push   esi
10005ba5:	53                   	push   ebx
10005ba6:	83 ec 4c             	sub    esp,0x4c
10005ba9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
10005bad:	8b 5c 24 6c          	mov    ebx,DWORD PTR [esp+0x6c]
10005bb1:	8b 96 84 00 00 00    	mov    edx,DWORD PTR [esi+0x84]
10005bb7:	89 d0                	mov    eax,edx
10005bb9:	83 e0 01             	and    eax,0x1
10005bbc:	f6 c2 02             	test   dl,0x2
10005bbf:	74 03                	je     10005bc4 <getSSFNFontRegion(Font*, int, int*, int*)+0x22>
10005bc1:	83 c8 02             	or     eax,0x2
10005bc4:	f6 c2 04             	test   dl,0x4
10005bc7:	74 03                	je     10005bcc <getSSFNFontRegion(Font*, int, int*, int*)+0x2a>
10005bc9:	83 c8 10             	or     eax,0x10
10005bcc:	80 e2 08             	and    dl,0x8
10005bcf:	74 03                	je     10005bd4 <getSSFNFontRegion(Font*, int, int*, int*)+0x32>
10005bd1:	83 c8 20             	or     eax,0x20
10005bd4:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
10005bd8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
10005bdd:	88 54 24 1e          	mov    BYTE PTR [esp+0x1e],dl
10005be1:	0d 40 02 00 00       	or     eax,0x240
10005be6:	83 ec 0c             	sub    esp,0xc
10005be9:	ff b6 80 00 00 00    	push   DWORD PTR [esi+0x80]
10005bef:	50                   	push   eax
10005bf0:	6a 00                	push   0x0
10005bf2:	68 ff 00 00 00       	push   0xff
10005bf7:	ff b6 90 04 00 00    	push   DWORD PTR [esi+0x490]
10005bfd:	e8 fc ff ff ff       	call   10005bfe <getSSFNFontRegion(Font*, int, int*, int*)+0x5c>	10005bfe: R_386_PC32	ssfn_select
10005c02:	83 c4 18             	add    esp,0x18
10005c05:	8d 44 24 2c          	lea    eax,[esp+0x2c]
10005c09:	50                   	push   eax
10005c0a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
10005c0e:	50                   	push   eax
10005c0f:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
10005c16:	53                   	push   ebx
10005c17:	8d 6c 24 36          	lea    ebp,[esp+0x36]
10005c1b:	55                   	push   ebp
10005c1c:	ff b6 90 04 00 00    	push   DWORD PTR [esi+0x490]
10005c22:	e8 fc ff ff ff       	call   10005c23 <getSSFNFontRegion(Font*, int, int*, int*)+0x81>	10005c23: R_386_PC32	ssfn_bbox
10005c27:	83 c4 14             	add    esp,0x14
10005c2a:	8b 03                	mov    eax,DWORD PTR [ebx]
10005c2c:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
10005c30:	0f af 07             	imul   eax,DWORD PTR [edi]
10005c33:	c1 e0 02             	shl    eax,0x2
10005c36:	50                   	push   eax
10005c37:	e8 fc ff ff ff       	call   10005c38 <getSSFNFontRegion(Font*, int, int*, int*)+0x96>	10005c38: R_386_PC32	malloc
10005c3c:	66 c7 44 24 42 00 00 	mov    WORD PTR [esp+0x42],0x0
10005c43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10005c47:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
10005c4f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10005c56:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10005c5a:	c7 44 24 48 20 20 20 ff 	mov    DWORD PTR [esp+0x48],0xff202020
10005c62:	8b 13                	mov    edx,DWORD PTR [ebx]
10005c64:	8b 00                	mov    eax,DWORD PTR [eax]
10005c66:	66 89 54 24 3c       	mov    WORD PTR [esp+0x3c],dx
10005c6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10005c6f:	89 c1                	mov    ecx,eax
10005c71:	31 c0                	xor    eax,eax
10005c73:	0f af ca             	imul   ecx,edx
10005c76:	c1 e2 02             	shl    edx,0x2
10005c79:	c1 e1 02             	shl    ecx,0x2
10005c7c:	66 89 54 24 40       	mov    WORD PTR [esp+0x40],dx
10005c81:	f3 aa                	rep stos BYTE PTR es:[edi],al
10005c83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10005c87:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
10005c8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10005c90:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
10005c95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10005c99:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10005c9d:	83 c4 0c             	add    esp,0xc
10005ca0:	55                   	push   ebp
10005ca1:	8d 44 24 30          	lea    eax,[esp+0x30]
10005ca5:	50                   	push   eax
10005ca6:	ff b6 90 04 00 00    	push   DWORD PTR [esi+0x490]
10005cac:	e8 fc ff ff ff       	call   10005cad <getSSFNFontRegion(Font*, int, int*, int*)+0x10b>	10005cad: R_386_PC32	ssfn_render
10005cb1:	8b 03                	mov    eax,DWORD PTR [ebx]
10005cb3:	8b bc 24 80 00 00 00 	mov    edi,DWORD PTR [esp+0x80]
10005cba:	0f af 07             	imul   eax,DWORD PTR [edi]
10005cbd:	89 04 24             	mov    DWORD PTR [esp],eax
10005cc0:	e8 fc ff ff ff       	call   10005cc1 <getSSFNFontRegion(Font*, int, int*, int*)+0x11f>	10005cc1: R_386_PC32	malloc
10005cc5:	31 c9                	xor    ecx,ecx
10005cc7:	89 c6                	mov    esi,eax
10005cc9:	0f bf 44 24 3e       	movsx  eax,WORD PTR [esp+0x3e]
10005cce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10005cd2:	0f bf 44 24 3c       	movsx  eax,WORD PTR [esp+0x3c]
10005cd7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10005cdb:	83 c4 10             	add    esp,0x10
10005cde:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
10005ce2:	7e 23                	jle    10005d07 <getSSFNFontRegion(Font*, int, int*, int*)+0x165>
10005ce4:	8b 2b                	mov    ebp,DWORD PTR [ebx]
10005ce6:	31 d2                	xor    edx,edx
10005ce8:	0f af e9             	imul   ebp,ecx
10005ceb:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
10005cef:	7e 13                	jle    10005d04 <getSSFNFontRegion(Font*, int, int*, int*)+0x162>
10005cf1:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
10005cf5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
10005cf9:	83 3c 87 00          	cmp    DWORD PTR [edi+eax*4],0x0
10005cfd:	0f 95 04 06          	setne  BYTE PTR [esi+eax*1]
10005d01:	42                   	inc    edx
10005d02:	eb e7                	jmp    10005ceb <getSSFNFontRegion(Font*, int, int*, int*)+0x149>
10005d04:	41                   	inc    ecx
10005d05:	eb d7                	jmp    10005cde <getSSFNFontRegion(Font*, int, int*, int*)+0x13c>
10005d07:	50                   	push   eax
10005d08:	50                   	push   eax
10005d09:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10005d0d:	ff 30                	push   DWORD PTR [eax]
10005d0f:	ff 33                	push   DWORD PTR [ebx]
10005d11:	56                   	push   esi
10005d12:	6a 00                	push   0x0
10005d14:	6a 00                	push   0x0
10005d16:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
10005d1a:	e8 fc ff ff ff       	call   10005d1b <getSSFNFontRegion(Font*, int, int*, int*)+0x179>	10005d1b: R_386_PC32	createTightFontRegion(int, int, unsigned char*, int, int)
10005d1f:	56                   	push   esi
10005d20:	e8 fc ff ff ff       	call   10005d21 <getSSFNFontRegion(Font*, int, int*, int*)+0x17f>	10005d21: R_386_PC32	free
10005d25:	83 c4 14             	add    esp,0x14
10005d28:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10005d2c:	e8 fc ff ff ff       	call   10005d2d <getSSFNFontRegion(Font*, int, int*, int*)+0x18b>	10005d2d: R_386_PC32	free
10005d31:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10005d35:	83 c4 5c             	add    esp,0x5c
10005d38:	5b                   	pop    ebx
10005d39:	5e                   	pop    esi
10005d3a:	5f                   	pop    edi
10005d3b:	5d                   	pop    ebp
10005d3c:	c2 04 00             	ret    0x4

10005d3f <videoDrawRect(Video*, int, int, int, int, unsigned int)>:
10005d3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10005d43:	8b 00                	mov    eax,DWORD PTR [eax]
10005d45:	ff 60 28             	jmp    DWORD PTR [eax+0x28]

10005d48 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)>:
10005d48:	55                   	push   ebp
10005d49:	57                   	push   edi
10005d4a:	56                   	push   esi
10005d4b:	53                   	push   ebx
10005d4c:	83 ec 28             	sub    esp,0x28
10005d4f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
10005d53:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10005d57:	53                   	push   ebx
10005d58:	e8 fc ff ff ff       	call   10005d59 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x11>	10005d59: R_386_PC32	Video::getWidth()
10005d5d:	83 c4 10             	add    esp,0x10
10005d60:	39 f0                	cmp    eax,esi
10005d62:	0f 8c df 00 00 00    	jl     10005e47 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xff>
10005d68:	83 ec 0c             	sub    esp,0xc
10005d6b:	53                   	push   ebx
10005d6c:	e8 fc ff ff ff       	call   10005d6d <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x25>	10005d6d: R_386_PC32	Video::getHeight()
10005d71:	83 c4 10             	add    esp,0x10
10005d74:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
10005d78:	0f 8c c9 00 00 00    	jl     10005e47 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xff>
10005d7e:	89 f7                	mov    edi,esi
10005d80:	03 7c 24 3c          	add    edi,DWORD PTR [esp+0x3c]
10005d84:	0f 88 bd 00 00 00    	js     10005e47 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xff>
10005d8a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
10005d8e:	03 6c 24 40          	add    ebp,DWORD PTR [esp+0x40]
10005d92:	0f 88 af 00 00 00    	js     10005e47 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xff>
10005d98:	85 f6                	test   esi,esi
10005d9a:	79 06                	jns    10005da2 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x5a>
10005d9c:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
10005da0:	31 f6                	xor    esi,esi
10005da2:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10005da7:	79 0c                	jns    10005db5 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x6d>
10005da9:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
10005dad:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10005db5:	83 ec 0c             	sub    esp,0xc
10005db8:	53                   	push   ebx
10005db9:	e8 fc ff ff ff       	call   10005dba <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x72>	10005dba: R_386_PC32	Video::getWidth()
10005dbe:	83 c4 10             	add    esp,0x10
10005dc1:	39 c7                	cmp    edi,eax
10005dc3:	7e 12                	jle    10005dd7 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x8f>
10005dc5:	83 ec 0c             	sub    esp,0xc
10005dc8:	53                   	push   ebx
10005dc9:	e8 fc ff ff ff       	call   10005dca <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x82>	10005dca: R_386_PC32	Video::getWidth()
10005dce:	29 f0                	sub    eax,esi
10005dd0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10005dd4:	83 c4 10             	add    esp,0x10
10005dd7:	83 ec 0c             	sub    esp,0xc
10005dda:	53                   	push   ebx
10005ddb:	e8 fc ff ff ff       	call   10005ddc <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x94>	10005ddc: R_386_PC32	Video::getHeight()
10005de0:	83 c4 10             	add    esp,0x10
10005de3:	39 c5                	cmp    ebp,eax
10005de5:	7e 14                	jle    10005dfb <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xb3>
10005de7:	83 ec 0c             	sub    esp,0xc
10005dea:	53                   	push   ebx
10005deb:	e8 fc ff ff ff       	call   10005dec <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xa4>	10005dec: R_386_PC32	Video::getHeight()
10005df0:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10005df4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10005df8:	83 c4 10             	add    esp,0x10
10005dfb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10005dff:	89 f8                	mov    eax,edi
10005e01:	2b 44 24 38          	sub    eax,DWORD PTR [esp+0x38]
10005e05:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
10005e09:	7e 3c                	jle    10005e47 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xff>
10005e0b:	8d 14 37             	lea    edx,[edi+esi*1]
10005e0e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10005e12:	80 e2 01             	and    dl,0x1
10005e15:	74 05                	je     10005e1c <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xd4>
10005e17:	35 ff ff ff 00       	xor    eax,0xffffff
10005e1c:	31 ed                	xor    ebp,ebp
10005e1e:	39 6c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebp
10005e22:	7e 20                	jle    10005e44 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xfc>
10005e24:	8b 13                	mov    edx,DWORD PTR [ebx]
10005e26:	8d 4c 35 00          	lea    ecx,[ebp+esi*1+0x0]
10005e2a:	50                   	push   eax
10005e2b:	45                   	inc    ebp
10005e2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10005e30:	57                   	push   edi
10005e31:	51                   	push   ecx
10005e32:	53                   	push   ebx
10005e33:	ff 52 24             	call   DWORD PTR [edx+0x24]
10005e36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10005e3a:	83 c4 10             	add    esp,0x10
10005e3d:	35 ff ff ff 00       	xor    eax,0xffffff
10005e42:	eb da                	jmp    10005e1e <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xd6>
10005e44:	47                   	inc    edi
10005e45:	eb b8                	jmp    10005dff <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xb7>
10005e47:	83 c4 1c             	add    esp,0x1c
10005e4a:	5b                   	pop    ebx
10005e4b:	5e                   	pop    esi
10005e4c:	5f                   	pop    edi
10005e4d:	5d                   	pop    ebp
10005e4e:	c3                   	ret    

10005e4f <videoPutpixel(Video*, int, int, unsigned int)>:
10005e4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10005e53:	8b 00                	mov    eax,DWORD PTR [eax]
10005e55:	ff 60 24             	jmp    DWORD PTR [eax+0x24]

10005e58 <videoDrawCursor(Video*, int, int, unsigned int*)>:
10005e58:	83 ec 18             	sub    esp,0x18
10005e5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10005e5f:	8b 10                	mov    edx,DWORD PTR [eax]
10005e61:	6a 00                	push   0x0
10005e63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10005e67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10005e6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10005e6f:	50                   	push   eax
10005e70:	ff 52 30             	call   DWORD PTR [edx+0x30]
10005e73:	83 c4 2c             	add    esp,0x2c
10005e76:	c3                   	ret    
10005e77:	90                   	nop

10005e78 <Region::Region()>:
10005e78:	55                   	push   ebp
10005e79:	89 e5                	mov    ebp,esp
10005e7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005e7e:	c7 40 04 39 94 60 f9 	mov    DWORD PTR [eax+0x4],0xf9609439
10005e85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005e88:	c7 40 08 72 28 c1 f2 	mov    DWORD PTR [eax+0x8],0xf2c12872
10005e8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005e92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10005e98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005e9b:	c7 40 0c ab bc 21 ec 	mov    DWORD PTR [eax+0xc],0xec21bcab
10005ea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005ea5:	c7 40 10 e4 50 82 e5 	mov    DWORD PTR [eax+0x10],0xe58250e4
10005eac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005eaf:	c7 40 14 1d e5 e2 de 	mov    DWORD PTR [eax+0x14],0xdee2e51d
10005eb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005eb9:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
10005ebd:	90                   	nop
10005ebe:	5d                   	pop    ebp
10005ebf:	c3                   	ret    

10005ec0 <FontStyle::FontStyle(char const*, int, int)>:
10005ec0:	55                   	push   ebp
10005ec1:	89 e5                	mov    ebp,esp
10005ec3:	83 ec 08             	sub    esp,0x8
10005ec6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005ec9:	83 ec 08             	sub    esp,0x8
10005ecc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10005ecf:	50                   	push   eax
10005ed0:	e8 fc ff ff ff       	call   10005ed1 <FontStyle::FontStyle(char const*, int, int)+0x11>	10005ed1: R_386_PC32	strcpy
10005ed5:	83 c4 10             	add    esp,0x10
10005ed8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005edb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10005ede:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
10005ee4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005ee7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10005eea:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
10005ef0:	90                   	nop
10005ef1:	c9                   	leave  
10005ef2:	c3                   	ret    
10005ef3:	90                   	nop

10005ef4 <NFrame::Graphics::Graphics(Video*, Region)>:
10005ef4:	55                   	push   ebp
10005ef5:	89 e5                	mov    ebp,esp
10005ef7:	57                   	push   edi
10005ef8:	56                   	push   esi
10005ef9:	53                   	push   ebx
10005efa:	83 ec 0c             	sub    esp,0xc
10005efd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005f00:	83 c0 04             	add    eax,0x4
10005f03:	83 ec 0c             	sub    esp,0xc
10005f06:	50                   	push   eax
10005f07:	e8 fc ff ff ff       	call   10005f08 <NFrame::Graphics::Graphics(Video*, Region)+0x14>	10005f08: R_386_PC32	Region::Region()
10005f0c:	83 c4 10             	add    esp,0x10
10005f0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005f12:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10005f15:	89 10                	mov    DWORD PTR [eax],edx
10005f17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005f1a:	8d 58 04             	lea    ebx,[eax+0x4]
10005f1d:	8d 45 10             	lea    eax,[ebp+0x10]
10005f20:	ba 19 00 00 00       	mov    edx,0x19
10005f25:	89 df                	mov    edi,ebx
10005f27:	89 c6                	mov    esi,eax
10005f29:	89 d1                	mov    ecx,edx
10005f2b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10005f2d:	90                   	nop
10005f2e:	8d 65 f4             	lea    esp,[ebp-0xc]
10005f31:	5b                   	pop    ebx
10005f32:	5e                   	pop    esi
10005f33:	5f                   	pop    edi
10005f34:	5d                   	pop    ebp
10005f35:	c3                   	ret    

10005f36 <NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)>:
10005f36:	55                   	push   ebp
10005f37:	89 e5                	mov    ebp,esp
10005f39:	57                   	push   edi
10005f3a:	56                   	push   esi
10005f3b:	53                   	push   ebx
10005f3c:	83 ec 3c             	sub    esp,0x3c
10005f3f:	8d 45 cc             	lea    eax,[ebp-0x34]
10005f42:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10005f45:	83 ec 04             	sub    esp,0x4
10005f48:	83 ec 1c             	sub    esp,0x1c
10005f4b:	89 e0                	mov    eax,esp
10005f4d:	89 c3                	mov    ebx,eax
10005f4f:	8d 45 0c             	lea    eax,[ebp+0xc]
10005f52:	ba 07 00 00 00       	mov    edx,0x7
10005f57:	89 df                	mov    edi,ebx
10005f59:	89 c6                	mov    esi,eax
10005f5b:	89 d1                	mov    ecx,edx
10005f5d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005f5f:	83 ec 1c             	sub    esp,0x1c
10005f62:	89 e0                	mov    eax,esp
10005f64:	89 c3                	mov    ebx,eax
10005f66:	8d 45 2c             	lea    eax,[ebp+0x2c]
10005f69:	ba 07 00 00 00       	mov    edx,0x7
10005f6e:	89 df                	mov    edi,ebx
10005f70:	89 c6                	mov    esi,eax
10005f72:	89 d1                	mov    ecx,edx
10005f74:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005f76:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005f79:	e8 fc ff ff ff       	call   10005f7a <NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)+0x44>	10005f7a: R_386_PC32	getRegionIntersection(Region, Region)
10005f7e:	83 c4 3c             	add    esp,0x3c
10005f81:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
10005f84:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10005f87:	83 ec 0c             	sub    esp,0xc
10005f8a:	ff 75 48             	push   DWORD PTR [ebp+0x48]
10005f8d:	83 ec 1c             	sub    esp,0x1c
10005f90:	89 e0                	mov    eax,esp
10005f92:	89 c3                	mov    ebx,eax
10005f94:	8d 45 cc             	lea    eax,[ebp-0x34]
10005f97:	ba 07 00 00 00       	mov    edx,0x7
10005f9c:	89 df                	mov    edi,ebx
10005f9e:	89 c6                	mov    esi,eax
10005fa0:	89 d1                	mov    ecx,edx
10005fa2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005fa4:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005fa7:	e8 fc ff ff ff       	call   10005fa8 <NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)+0x72>	10005fa8: R_386_PC32	fillRegion(Video*, Region, unsigned int)
10005fac:	83 c4 30             	add    esp,0x30
10005faf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005fb2:	83 ec 0c             	sub    esp,0xc
10005fb5:	50                   	push   eax
10005fb6:	e8 fc ff ff ff       	call   10005fb7 <NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)+0x81>	10005fb7: R_386_PC32	free
10005fbb:	83 c4 10             	add    esp,0x10
10005fbe:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10005fc1:	83 ec 0c             	sub    esp,0xc
10005fc4:	50                   	push   eax
10005fc5:	e8 fc ff ff ff       	call   10005fc6 <NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)+0x90>	10005fc6: R_386_PC32	free
10005fca:	83 c4 10             	add    esp,0x10
10005fcd:	90                   	nop
10005fce:	8d 65 f4             	lea    esp,[ebp-0xc]
10005fd1:	5b                   	pop    ebx
10005fd2:	5e                   	pop    esi
10005fd3:	5f                   	pop    edi
10005fd4:	5d                   	pop    ebp
10005fd5:	c3                   	ret    

10005fd6 <NFrame::markRegionAsDirty(Region)>:
10005fd6:	55                   	push   ebp
10005fd7:	89 e5                	mov    ebp,esp
10005fd9:	57                   	push   edi
10005fda:	56                   	push   esi
10005fdb:	53                   	push   ebx
10005fdc:	83 ec 3c             	sub    esp,0x3c
10005fdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005fe2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10005fe5:	85 c0                	test   eax,eax
10005fe7:	74 2d                	je     10006016 <NFrame::markRegionAsDirty(Region)+0x40>
10005fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005fec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10005fef:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10005ff2:	83 ec 1c             	sub    esp,0x1c
10005ff5:	89 e0                	mov    eax,esp
10005ff7:	89 c3                	mov    ebx,eax
10005ff9:	8d 45 0c             	lea    eax,[ebp+0xc]
10005ffc:	ba 07 00 00 00       	mov    edx,0x7
10006001:	89 df                	mov    edi,ebx
10006003:	89 c6                	mov    esi,eax
10006005:	89 d1                	mov    ecx,edx
10006007:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006009:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000600c:	e8 fc ff ff ff       	call   1000600d <NFrame::markRegionAsDirty(Region)+0x37>	1000600d: R_386_PC32	NFrame::markRegionAsDirty(Region)
10006011:	83 c4 20             	add    esp,0x20
10006014:	eb 6b                	jmp    10006081 <NFrame::markRegionAsDirty(Region)+0xab>
10006016:	8d 45 cc             	lea    eax,[ebp-0x34]
10006019:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
1000601c:	83 ec 04             	sub    esp,0x4
1000601f:	83 ec 1c             	sub    esp,0x1c
10006022:	89 e0                	mov    eax,esp
10006024:	89 c3                	mov    ebx,eax
10006026:	8d 45 0c             	lea    eax,[ebp+0xc]
10006029:	ba 07 00 00 00       	mov    edx,0x7
1000602e:	89 df                	mov    edi,ebx
10006030:	89 c6                	mov    esi,eax
10006032:	89 d1                	mov    ecx,edx
10006034:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006039:	83 ec 1c             	sub    esp,0x1c
1000603c:	89 e2                	mov    edx,esp
1000603e:	8d 58 4c             	lea    ebx,[eax+0x4c]
10006041:	b8 07 00 00 00       	mov    eax,0x7
10006046:	89 d7                	mov    edi,edx
10006048:	89 de                	mov    esi,ebx
1000604a:	89 c1                	mov    ecx,eax
1000604c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000604e:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10006051:	e8 fc ff ff ff       	call   10006052 <NFrame::markRegionAsDirty(Region)+0x7c>	10006052: R_386_PC32	getRegionUnion(Region, Region)
10006056:	83 c4 3c             	add    esp,0x3c
10006059:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000605c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
1000605f:	83 ec 0c             	sub    esp,0xc
10006062:	50                   	push   eax
10006063:	e8 fc ff ff ff       	call   10006064 <NFrame::markRegionAsDirty(Region)+0x8e>	10006064: R_386_PC32	free
10006068:	83 c4 10             	add    esp,0x10
1000606b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000606e:	8d 58 4c             	lea    ebx,[eax+0x4c]
10006071:	8d 45 cc             	lea    eax,[ebp-0x34]
10006074:	ba 19 00 00 00       	mov    edx,0x19
10006079:	89 df                	mov    edi,ebx
1000607b:	89 c6                	mov    esi,eax
1000607d:	89 d1                	mov    ecx,edx
1000607f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006081:	90                   	nop
10006082:	8d 65 f4             	lea    esp,[ebp-0xc]
10006085:	5b                   	pop    ebx
10006086:	5e                   	pop    esi
10006087:	5f                   	pop    edi
10006088:	5d                   	pop    ebp
10006089:	c3                   	ret    

1000608a <NFrame::invalidate()>:
1000608a:	55                   	push   ebp
1000608b:	89 e5                	mov    ebp,esp
1000608d:	57                   	push   edi
1000608e:	56                   	push   esi
1000608f:	53                   	push   ebx
10006090:	83 ec 2c             	sub    esp,0x2c
10006093:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10006096:	8d 45 cc             	lea    eax,[ebp-0x34]
10006099:	8d 5a 14             	lea    ebx,[edx+0x14]
1000609c:	ba 07 00 00 00       	mov    edx,0x7
100060a1:	89 c7                	mov    edi,eax
100060a3:	89 de                	mov    esi,ebx
100060a5:	89 d1                	mov    ecx,edx
100060a7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100060a9:	83 ec 0c             	sub    esp,0xc
100060ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100060af:	e8 fc ff ff ff       	call   100060b0 <NFrame::invalidate()+0x26>	100060b0: R_386_PC32	NFrame::getAbsX()
100060b4:	83 c4 10             	add    esp,0x10
100060b7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100060ba:	83 ec 0c             	sub    esp,0xc
100060bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100060c0:	e8 fc ff ff ff       	call   100060c1 <NFrame::invalidate()+0x37>	100060c1: R_386_PC32	NFrame::getAbsY()
100060c5:	83 c4 10             	add    esp,0x10
100060c8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100060cb:	83 ec 1c             	sub    esp,0x1c
100060ce:	89 e0                	mov    eax,esp
100060d0:	89 c3                	mov    ebx,eax
100060d2:	8d 45 cc             	lea    eax,[ebp-0x34]
100060d5:	ba 07 00 00 00       	mov    edx,0x7
100060da:	89 df                	mov    edi,ebx
100060dc:	89 c6                	mov    esi,eax
100060de:	89 d1                	mov    ecx,edx
100060e0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100060e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100060e5:	e8 fc ff ff ff       	call   100060e6 <NFrame::invalidate()+0x5c>	100060e6: R_386_PC32	NFrame::markRegionAsDirty(Region)
100060ea:	83 c4 20             	add    esp,0x20
100060ed:	90                   	nop
100060ee:	8d 65 f4             	lea    esp,[ebp-0xc]
100060f1:	5b                   	pop    ebx
100060f2:	5e                   	pop    esi
100060f3:	5f                   	pop    edi
100060f4:	5d                   	pop    ebp
100060f5:	c3                   	ret    

100060f6 <NFrame::postResizeCleanup()>:
100060f6:	55                   	push   ebp
100060f7:	89 e5                	mov    ebp,esp
100060f9:	83 ec 08             	sub    esp,0x8
100060fc:	83 ec 0c             	sub    esp,0xc
100060ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006102:	e8 fc ff ff ff       	call   10006103 <NFrame::postResizeCleanup()+0xd>	10006103: R_386_PC32	NFrame::tryInvalidate()
10006107:	83 c4 10             	add    esp,0x10
1000610a:	90                   	nop
1000610b:	c9                   	leave  
1000610c:	c3                   	ret    
1000610d:	90                   	nop

1000610e <NFrame::repaintAux(Video*, Region, bool)>:
1000610e:	55                   	push   ebp
1000610f:	89 e5                	mov    ebp,esp
10006111:	57                   	push   edi
10006112:	56                   	push   esi
10006113:	53                   	push   ebx
10006114:	81 ec 2c 01 00 00    	sub    esp,0x12c
1000611a:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
1000611d:	88 85 d4 fe ff ff    	mov    BYTE PTR [ebp-0x12c],al
10006123:	8d 45 84             	lea    eax,[ebp-0x7c]
10006126:	83 ec 08             	sub    esp,0x8
10006129:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000612c:	50                   	push   eax
1000612d:	e8 fc ff ff ff       	call   1000612e <NFrame::repaintAux(Video*, Region, bool)+0x20>	1000612e: R_386_PC32	NFrame::getDrawRegion()
10006132:	83 c4 0c             	add    esp,0xc
10006135:	83 ec 0c             	sub    esp,0xc
10006138:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000613b:	e8 fc ff ff ff       	call   1000613c <NFrame::repaintAux(Video*, Region, bool)+0x2e>	1000613c: R_386_PC32	NFrame::getAbsX()
10006140:	83 c4 10             	add    esp,0x10
10006143:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
10006146:	83 ec 0c             	sub    esp,0xc
10006149:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000614c:	e8 fc ff ff ff       	call   1000614d <NFrame::repaintAux(Video*, Region, bool)+0x3f>	1000614d: R_386_PC32	NFrame::getAbsY()
10006151:	83 c4 10             	add    esp,0x10
10006154:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10006157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000615a:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
10006160:	83 ec 04             	sub    esp,0x4
10006163:	83 ec 1c             	sub    esp,0x1c
10006166:	89 e0                	mov    eax,esp
10006168:	89 c3                	mov    ebx,eax
1000616a:	8d 45 14             	lea    eax,[ebp+0x14]
1000616d:	ba 07 00 00 00       	mov    edx,0x7
10006172:	89 df                	mov    edi,ebx
10006174:	89 c6                	mov    esi,eax
10006176:	89 d1                	mov    ecx,edx
10006178:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000617a:	83 ec 1c             	sub    esp,0x1c
1000617d:	89 e0                	mov    eax,esp
1000617f:	89 c3                	mov    ebx,eax
10006181:	8d 45 84             	lea    eax,[ebp-0x7c]
10006184:	ba 07 00 00 00       	mov    edx,0x7
10006189:	89 df                	mov    edi,ebx
1000618b:	89 c6                	mov    esi,eax
1000618d:	89 d1                	mov    ecx,edx
1000618f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006191:	ff b5 d0 fe ff ff    	push   DWORD PTR [ebp-0x130]
10006197:	e8 fc ff ff ff       	call   10006198 <NFrame::repaintAux(Video*, Region, bool)+0x8a>	10006198: R_386_PC32	getRegionIntersection(Region, Region)
1000619c:	83 c4 3c             	add    esp,0x3c
1000619f:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
100061a2:	83 ec 0c             	sub    esp,0xc
100061a5:	50                   	push   eax
100061a6:	e8 fc ff ff ff       	call   100061a7 <NFrame::repaintAux(Video*, Region, bool)+0x99>	100061a7: R_386_PC32	free
100061ab:	83 c4 10             	add    esp,0x10
100061ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100061b1:	8b 00                	mov    eax,DWORD PTR [eax]
100061b3:	83 c0 04             	add    eax,0x4
100061b6:	8b 00                	mov    eax,DWORD PTR [eax]
100061b8:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
100061be:	83 ec 0c             	sub    esp,0xc
100061c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100061c4:	83 ec 1c             	sub    esp,0x1c
100061c7:	89 e2                	mov    edx,esp
100061c9:	89 c3                	mov    ebx,eax
100061cb:	b8 07 00 00 00       	mov    eax,0x7
100061d0:	89 d7                	mov    edi,edx
100061d2:	89 de                	mov    esi,ebx
100061d4:	89 c1                	mov    ecx,eax
100061d6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100061d8:	ff 75 10             	push   DWORD PTR [ebp+0x10]
100061db:	8d 45 a0             	lea    eax,[ebp-0x60]
100061de:	50                   	push   eax
100061df:	e8 fc ff ff ff       	call   100061e0 <NFrame::repaintAux(Video*, Region, bool)+0xd2>	100061e0: R_386_PC32	NFrame::Graphics::Graphics(Video*, Region)
100061e4:	83 c4 30             	add    esp,0x30
100061e7:	83 ec 0c             	sub    esp,0xc
100061ea:	83 ec 20             	sub    esp,0x20
100061ed:	89 e0                	mov    eax,esp
100061ef:	89 c3                	mov    ebx,eax
100061f1:	8d 45 a0             	lea    eax,[ebp-0x60]
100061f4:	ba 08 00 00 00       	mov    edx,0x8
100061f9:	89 df                	mov    edi,ebx
100061fb:	89 c6                	mov    esi,eax
100061fd:	89 d1                	mov    ecx,edx
100061ff:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006201:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006204:	8b 85 d0 fe ff ff    	mov    eax,DWORD PTR [ebp-0x130]
1000620a:	ff d0                	call   eax
1000620c:	83 c4 30             	add    esp,0x30
1000620f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10006212:	8d 85 68 ff ff ff    	lea    eax,[ebp-0x98]
10006218:	8d 5a 14             	lea    ebx,[edx+0x14]
1000621b:	ba 07 00 00 00       	mov    edx,0x7
10006220:	89 c7                	mov    edi,eax
10006222:	89 de                	mov    esi,ebx
10006224:	89 d1                	mov    ecx,edx
10006226:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006228:	83 ec 0c             	sub    esp,0xc
1000622b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000622e:	e8 fc ff ff ff       	call   1000622f <NFrame::repaintAux(Video*, Region, bool)+0x121>	1000622f: R_386_PC32	NFrame::getAbsX()
10006233:	83 c4 10             	add    esp,0x10
10006236:	89 85 78 ff ff ff    	mov    DWORD PTR [ebp-0x88],eax
1000623c:	83 ec 0c             	sub    esp,0xc
1000623f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006242:	e8 fc ff ff ff       	call   10006243 <NFrame::repaintAux(Video*, Region, bool)+0x135>	10006243: R_386_PC32	NFrame::getAbsY()
10006247:	83 c4 10             	add    esp,0x10
1000624a:	89 85 7c ff ff ff    	mov    DWORD PTR [ebp-0x84],eax
10006250:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006256:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
1000625c:	83 ec 04             	sub    esp,0x4
1000625f:	83 ec 1c             	sub    esp,0x1c
10006262:	89 e0                	mov    eax,esp
10006264:	89 c3                	mov    ebx,eax
10006266:	8d 85 68 ff ff ff    	lea    eax,[ebp-0x98]
1000626c:	ba 07 00 00 00       	mov    edx,0x7
10006271:	89 df                	mov    edi,ebx
10006273:	89 c6                	mov    esi,eax
10006275:	89 d1                	mov    ecx,edx
10006277:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006279:	83 ec 1c             	sub    esp,0x1c
1000627c:	89 e0                	mov    eax,esp
1000627e:	89 c3                	mov    ebx,eax
10006280:	8d 45 14             	lea    eax,[ebp+0x14]
10006283:	ba 07 00 00 00       	mov    edx,0x7
10006288:	89 df                	mov    edi,ebx
1000628a:	89 c6                	mov    esi,eax
1000628c:	89 d1                	mov    ecx,edx
1000628e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006290:	ff b5 d0 fe ff ff    	push   DWORD PTR [ebp-0x130]
10006296:	e8 fc ff ff ff       	call   10006297 <NFrame::repaintAux(Video*, Region, bool)+0x189>	10006297: R_386_PC32	getRegionIntersection(Region, Region)
1000629b:	83 c4 3c             	add    esp,0x3c
1000629e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100062a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100062a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
100062ab:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100062ae:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100062b2:	0f 84 8d 01 00 00    	je     10006445 <NFrame::repaintAux(Video*, Region, bool)+0x337>
100062b8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100062bb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100062be:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100062c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100062c4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100062c7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100062ca:	8b 00                	mov    eax,DWORD PTR [eax]
100062cc:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
100062cf:	84 c0                	test   al,al
100062d1:	74 1a                	je     100062ed <NFrame::repaintAux(Video*, Region, bool)+0x1df>
100062d3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100062d6:	8b 00                	mov    eax,DWORD PTR [eax]
100062d8:	8a 40 69             	mov    al,BYTE PTR [eax+0x69]
100062db:	84 c0                	test   al,al
100062dd:	0f 84 5c 01 00 00    	je     1000643f <NFrame::repaintAux(Video*, Region, bool)+0x331>
100062e3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100062e6:	8b 00                	mov    eax,DWORD PTR [eax]
100062e8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100062eb:	eb c1                	jmp    100062ae <NFrame::repaintAux(Video*, Region, bool)+0x1a0>
100062ed:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100062f0:	8b 00                	mov    eax,DWORD PTR [eax]
100062f2:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
100062f8:	8d 9d 30 ff ff ff    	lea    ebx,[ebp-0xd0]
100062fe:	89 9d cc fe ff ff    	mov    DWORD PTR [ebp-0x134],ebx
10006304:	83 ec 04             	sub    esp,0x4
10006307:	6a 01                	push   0x1
10006309:	83 ec 1c             	sub    esp,0x1c
1000630c:	89 e0                	mov    eax,esp
1000630e:	89 c3                	mov    ebx,eax
10006310:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006316:	ba 07 00 00 00       	mov    edx,0x7
1000631b:	89 df                	mov    edi,ebx
1000631d:	89 c6                	mov    esi,eax
1000631f:	89 d1                	mov    ecx,edx
10006321:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006323:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10006326:	ff b5 d0 fe ff ff    	push   DWORD PTR [ebp-0x130]
1000632c:	ff b5 cc fe ff ff    	push   DWORD PTR [ebp-0x134]
10006332:	e8 fc ff ff ff       	call   10006333 <NFrame::repaintAux(Video*, Region, bool)+0x225>	10006333: R_386_PC32	NFrame::repaintAux(Video*, Region, bool)
10006337:	83 c4 2c             	add    esp,0x2c
1000633a:	8d 85 14 ff ff ff    	lea    eax,[ebp-0xec]
10006340:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
10006346:	83 ec 04             	sub    esp,0x4
10006349:	83 ec 1c             	sub    esp,0x1c
1000634c:	89 e0                	mov    eax,esp
1000634e:	89 c3                	mov    ebx,eax
10006350:	8d 85 30 ff ff ff    	lea    eax,[ebp-0xd0]
10006356:	ba 07 00 00 00       	mov    edx,0x7
1000635b:	89 df                	mov    edi,ebx
1000635d:	89 c6                	mov    esi,eax
1000635f:	89 d1                	mov    ecx,edx
10006361:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006363:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006366:	83 ec 1c             	sub    esp,0x1c
10006369:	89 e2                	mov    edx,esp
1000636b:	89 c3                	mov    ebx,eax
1000636d:	b8 07 00 00 00       	mov    eax,0x7
10006372:	89 d7                	mov    edi,edx
10006374:	89 de                	mov    esi,ebx
10006376:	89 c1                	mov    ecx,eax
10006378:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000637a:	ff b5 d0 fe ff ff    	push   DWORD PTR [ebp-0x130]
10006380:	e8 fc ff ff ff       	call   10006381 <NFrame::repaintAux(Video*, Region, bool)+0x273>	10006381: R_386_PC32	getRegionUnion(Region, Region)
10006385:	83 c4 3c             	add    esp,0x3c
10006388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000638b:	8b 00                	mov    eax,DWORD PTR [eax]
1000638d:	83 ec 0c             	sub    esp,0xc
10006390:	50                   	push   eax
10006391:	e8 fc ff ff ff       	call   10006392 <NFrame::repaintAux(Video*, Region, bool)+0x284>	10006392: R_386_PC32	free
10006396:	83 c4 10             	add    esp,0x10
10006399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000639c:	89 c3                	mov    ebx,eax
1000639e:	8d 85 14 ff ff ff    	lea    eax,[ebp-0xec]
100063a4:	ba 19 00 00 00       	mov    edx,0x19
100063a9:	89 df                	mov    edi,ebx
100063ab:	89 c6                	mov    esi,eax
100063ad:	89 d1                	mov    ecx,edx
100063af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100063b1:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100063b7:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
100063bd:	83 ec 04             	sub    esp,0x4
100063c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100063c3:	83 ec 1c             	sub    esp,0x1c
100063c6:	89 e2                	mov    edx,esp
100063c8:	89 c3                	mov    ebx,eax
100063ca:	b8 07 00 00 00       	mov    eax,0x7
100063cf:	89 d7                	mov    edi,edx
100063d1:	89 de                	mov    esi,ebx
100063d3:	89 c1                	mov    ecx,eax
100063d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100063d7:	83 ec 1c             	sub    esp,0x1c
100063da:	89 e0                	mov    eax,esp
100063dc:	89 c3                	mov    ebx,eax
100063de:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
100063e4:	ba 07 00 00 00       	mov    edx,0x7
100063e9:	89 df                	mov    edi,ebx
100063eb:	89 c6                	mov    esi,eax
100063ed:	89 d1                	mov    ecx,edx
100063ef:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100063f1:	ff b5 d0 fe ff ff    	push   DWORD PTR [ebp-0x130]
100063f7:	e8 fc ff ff ff       	call   100063f8 <NFrame::repaintAux(Video*, Region, bool)+0x2ea>	100063f8: R_386_PC32	getRegionDifference(Region, Region)
100063fc:	83 c4 3c             	add    esp,0x3c
100063ff:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [ebp-0xb4]
10006405:	83 ec 0c             	sub    esp,0xc
10006408:	50                   	push   eax
10006409:	e8 fc ff ff ff       	call   1000640a <NFrame::repaintAux(Video*, Region, bool)+0x2fc>	1000640a: R_386_PC32	free
1000640e:	83 c4 10             	add    esp,0x10
10006411:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006417:	8d 95 f8 fe ff ff    	lea    edx,[ebp-0x108]
1000641d:	b9 19 00 00 00       	mov    ecx,0x19
10006422:	89 c7                	mov    edi,eax
10006424:	89 d6                	mov    esi,edx
10006426:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006428:	8b 85 30 ff ff ff    	mov    eax,DWORD PTR [ebp-0xd0]
1000642e:	83 ec 0c             	sub    esp,0xc
10006431:	50                   	push   eax
10006432:	e8 fc ff ff ff       	call   10006433 <NFrame::repaintAux(Video*, Region, bool)+0x325>	10006433: R_386_PC32	free
10006437:	83 c4 10             	add    esp,0x10
1000643a:	e9 6f fe ff ff       	jmp    100062ae <NFrame::repaintAux(Video*, Region, bool)+0x1a0>
1000643f:	90                   	nop
10006440:	e9 69 fe ff ff       	jmp    100062ae <NFrame::repaintAux(Video*, Region, bool)+0x1a0>
10006445:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [ebp-0xb4]
1000644b:	83 ec 0c             	sub    esp,0xc
1000644e:	50                   	push   eax
1000644f:	e8 fc ff ff ff       	call   10006450 <NFrame::repaintAux(Video*, Region, bool)+0x342>	10006450: R_386_PC32	free
10006454:	83 c4 10             	add    esp,0x10
10006457:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000645a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
1000645d:	85 c0                	test   eax,eax
1000645f:	75 48                	jne    100064a9 <NFrame::repaintAux(Video*, Region, bool)+0x39b>
10006461:	80 bd d4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x12c],0x0
10006468:	74 3f                	je     100064a9 <NFrame::repaintAux(Video*, Region, bool)+0x39b>
1000646a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000646d:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
10006470:	83 ec 0c             	sub    esp,0xc
10006473:	50                   	push   eax
10006474:	e8 fc ff ff ff       	call   10006475 <NFrame::repaintAux(Video*, Region, bool)+0x367>	10006475: R_386_PC32	free
10006479:	83 c4 10             	add    esp,0x10
1000647c:	8d 45 c0             	lea    eax,[ebp-0x40]
1000647f:	83 ec 0c             	sub    esp,0xc
10006482:	6a 01                	push   0x1
10006484:	6a 00                	push   0x0
10006486:	6a 00                	push   0x0
10006488:	6a 00                	push   0x0
1000648a:	50                   	push   eax
1000648b:	e8 fc ff ff ff       	call   1000648c <NFrame::repaintAux(Video*, Region, bool)+0x37e>	1000648c: R_386_PC32	createRectangleRegion(int, int, int, int)
10006490:	83 c4 1c             	add    esp,0x1c
10006493:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006496:	8d 58 4c             	lea    ebx,[eax+0x4c]
10006499:	8d 45 c0             	lea    eax,[ebp-0x40]
1000649c:	ba 19 00 00 00       	mov    edx,0x19
100064a1:	89 df                	mov    edi,ebx
100064a3:	89 c6                	mov    esi,eax
100064a5:	89 d1                	mov    ecx,edx
100064a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100064a9:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
100064ad:	0f 84 80 00 00 00    	je     10006533 <NFrame::repaintAux(Video*, Region, bool)+0x425>
100064b3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100064b6:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
100064bc:	8d 5a 30             	lea    ebx,[edx+0x30]
100064bf:	ba 07 00 00 00       	mov    edx,0x7
100064c4:	89 c7                	mov    edi,eax
100064c6:	89 de                	mov    esi,ebx
100064c8:	89 d1                	mov    ecx,edx
100064ca:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100064cc:	83 ec 0c             	sub    esp,0xc
100064cf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100064d2:	e8 fc ff ff ff       	call   100064d3 <NFrame::repaintAux(Video*, Region, bool)+0x3c5>	100064d3: R_386_PC32	NFrame::getAbsX()
100064d7:	83 c4 10             	add    esp,0x10
100064da:	89 c2                	mov    edx,eax
100064dc:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [ebp-0x114]
100064e2:	01 d0                	add    eax,edx
100064e4:	89 85 ec fe ff ff    	mov    DWORD PTR [ebp-0x114],eax
100064ea:	83 ec 0c             	sub    esp,0xc
100064ed:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100064f0:	e8 fc ff ff ff       	call   100064f1 <NFrame::repaintAux(Video*, Region, bool)+0x3e3>	100064f1: R_386_PC32	NFrame::getAbsY()
100064f5:	83 c4 10             	add    esp,0x10
100064f8:	89 c2                	mov    edx,eax
100064fa:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [ebp-0x110]
10006500:	01 d0                	add    eax,edx
10006502:	89 85 f0 fe ff ff    	mov    DWORD PTR [ebp-0x110],eax
10006508:	83 ec 0c             	sub    esp,0xc
1000650b:	6a 00                	push   0x0
1000650d:	83 ec 1c             	sub    esp,0x1c
10006510:	89 e0                	mov    eax,esp
10006512:	89 c3                	mov    ebx,eax
10006514:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
1000651a:	ba 07 00 00 00       	mov    edx,0x7
1000651f:	89 df                	mov    edi,ebx
10006521:	89 c6                	mov    esi,eax
10006523:	89 d1                	mov    ecx,edx
10006525:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006527:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000652a:	e8 fc ff ff ff       	call   1000652b <NFrame::repaintAux(Video*, Region, bool)+0x41d>	1000652b: R_386_PC32	fillRegion(Video*, Region, unsigned int)
1000652f:	83 c4 30             	add    esp,0x30
10006532:	90                   	nop
10006533:	90                   	nop
10006534:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006537:	8d 65 f4             	lea    esp,[ebp-0xc]
1000653a:	5b                   	pop    ebx
1000653b:	5e                   	pop    esi
1000653c:	5f                   	pop    edi
1000653d:	5d                   	pop    ebp
1000653e:	c2 04 00             	ret    0x4
10006541:	90                   	nop

10006542 <NFrame::NFrame(Region)>:
10006542:	55                   	push   ebp
10006543:	89 e5                	mov    ebp,esp
10006545:	57                   	push   edi
10006546:	56                   	push   esi
10006547:	53                   	push   ebx
10006548:	83 ec 2c             	sub    esp,0x2c
1000654b:	ba 08 00 00 00       	mov    edx,0x8	1000654c: R_386_32	vtable for NFrame
10006550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006553:	89 10                	mov    DWORD PTR [eax],edx
10006555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006558:	83 c0 04             	add    eax,0x4
1000655b:	83 ec 0c             	sub    esp,0xc
1000655e:	50                   	push   eax
1000655f:	e8 fc ff ff ff       	call   10006560 <NFrame::NFrame(Region)+0x1e>	10006560: R_386_PC32	LinkedList2<NFrame*>::LinkedList2()
10006564:	83 c4 10             	add    esp,0x10
10006567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000656a:	83 c0 14             	add    eax,0x14
1000656d:	83 ec 0c             	sub    esp,0xc
10006570:	50                   	push   eax
10006571:	e8 fc ff ff ff       	call   10006572 <NFrame::NFrame(Region)+0x30>	10006572: R_386_PC32	Region::Region()
10006576:	83 c4 10             	add    esp,0x10
10006579:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000657c:	83 c0 30             	add    eax,0x30
1000657f:	83 ec 0c             	sub    esp,0xc
10006582:	50                   	push   eax
10006583:	e8 fc ff ff ff       	call   10006584 <NFrame::NFrame(Region)+0x42>	10006584: R_386_PC32	Region::Region()
10006588:	83 c4 10             	add    esp,0x10
1000658b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000658e:	83 c0 4c             	add    eax,0x4c
10006591:	83 ec 0c             	sub    esp,0xc
10006594:	50                   	push   eax
10006595:	e8 fc ff ff ff       	call   10006596 <NFrame::NFrame(Region)+0x54>	10006596: R_386_PC32	Region::Region()
1000659a:	83 c4 10             	add    esp,0x10
1000659d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065a0:	c6 40 68 00          	mov    BYTE PTR [eax+0x68],0x0
100065a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065a7:	c6 40 69 00          	mov    BYTE PTR [eax+0x69],0x0
100065ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065ae:	c7 40 6c 00 00 00 00 	mov    DWORD PTR [eax+0x6c],0x0
100065b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065b8:	c6 40 70 00          	mov    BYTE PTR [eax+0x70],0x0
100065bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065bf:	c7 40 74 0a 00 00 00 	mov    DWORD PTR [eax+0x74],0xa
100065c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065c9:	c7 40 78 0a 00 00 00 	mov    DWORD PTR [eax+0x78],0xa
100065d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065d3:	c7 40 7c 64 00 00 00 	mov    DWORD PTR [eax+0x7c],0x64
100065da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065dd:	c7 80 80 00 00 00 4b 00 00 00 	mov    DWORD PTR [eax+0x80],0x4b
100065e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065ea:	c7 80 84 00 00 00 18 00 00 00 	mov    DWORD PTR [eax+0x84],0x18
100065f4:	8d 45 cc             	lea    eax,[ebp-0x34]
100065f7:	83 ec 0c             	sub    esp,0xc
100065fa:	6a 01                	push   0x1
100065fc:	6a 00                	push   0x0
100065fe:	6a 00                	push   0x0
10006600:	6a 00                	push   0x0
10006602:	50                   	push   eax
10006603:	e8 fc ff ff ff       	call   10006604 <NFrame::NFrame(Region)+0xc2>	10006604: R_386_PC32	createRectangleRegion(int, int, int, int)
10006608:	83 c4 1c             	add    esp,0x1c
1000660b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000660e:	8d 58 4c             	lea    ebx,[eax+0x4c]
10006611:	8d 45 cc             	lea    eax,[ebp-0x34]
10006614:	ba 19 00 00 00       	mov    edx,0x19
10006619:	89 df                	mov    edi,ebx
1000661b:	89 c6                	mov    esi,eax
1000661d:	89 d1                	mov    ecx,edx
1000661f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006624:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
1000662b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000662e:	8d 58 14             	lea    ebx,[eax+0x14]
10006631:	8d 45 0c             	lea    eax,[ebp+0xc]
10006634:	ba 19 00 00 00       	mov    edx,0x19
10006639:	89 df                	mov    edi,ebx
1000663b:	89 c6                	mov    esi,eax
1000663d:	89 d1                	mov    ecx,edx
1000663f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006641:	90                   	nop
10006642:	8d 65 f4             	lea    esp,[ebp-0xc]
10006645:	5b                   	pop    ebx
10006646:	5e                   	pop    esi
10006647:	5f                   	pop    edi
10006648:	5d                   	pop    ebp
10006649:	c3                   	ret    

1000664a <NFrame::NFrame(int, int, int, int)>:
1000664a:	55                   	push   ebp
1000664b:	89 e5                	mov    ebp,esp
1000664d:	57                   	push   edi
1000664e:	56                   	push   esi
1000664f:	53                   	push   ebx
10006650:	83 ec 4c             	sub    esp,0x4c
10006653:	ba 08 00 00 00       	mov    edx,0x8	10006654: R_386_32	vtable for NFrame
10006658:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000665b:	89 10                	mov    DWORD PTR [eax],edx
1000665d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006660:	83 c0 04             	add    eax,0x4
10006663:	83 ec 0c             	sub    esp,0xc
10006666:	50                   	push   eax
10006667:	e8 fc ff ff ff       	call   10006668 <NFrame::NFrame(int, int, int, int)+0x1e>	10006668: R_386_PC32	LinkedList2<NFrame*>::LinkedList2()
1000666c:	83 c4 10             	add    esp,0x10
1000666f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006672:	83 c0 14             	add    eax,0x14
10006675:	83 ec 0c             	sub    esp,0xc
10006678:	50                   	push   eax
10006679:	e8 fc ff ff ff       	call   1000667a <NFrame::NFrame(int, int, int, int)+0x30>	1000667a: R_386_PC32	Region::Region()
1000667e:	83 c4 10             	add    esp,0x10
10006681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006684:	83 c0 30             	add    eax,0x30
10006687:	83 ec 0c             	sub    esp,0xc
1000668a:	50                   	push   eax
1000668b:	e8 fc ff ff ff       	call   1000668c <NFrame::NFrame(int, int, int, int)+0x42>	1000668c: R_386_PC32	Region::Region()
10006690:	83 c4 10             	add    esp,0x10
10006693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006696:	83 c0 4c             	add    eax,0x4c
10006699:	83 ec 0c             	sub    esp,0xc
1000669c:	50                   	push   eax
1000669d:	e8 fc ff ff ff       	call   1000669e <NFrame::NFrame(int, int, int, int)+0x54>	1000669e: R_386_PC32	Region::Region()
100066a2:	83 c4 10             	add    esp,0x10
100066a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100066a8:	c6 40 68 00          	mov    BYTE PTR [eax+0x68],0x0
100066ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100066af:	c6 40 69 00          	mov    BYTE PTR [eax+0x69],0x0
100066b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100066b6:	c7 40 6c 00 00 00 00 	mov    DWORD PTR [eax+0x6c],0x0
100066bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100066c0:	c6 40 70 00          	mov    BYTE PTR [eax+0x70],0x0
100066c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100066c7:	c7 40 74 0a 00 00 00 	mov    DWORD PTR [eax+0x74],0xa
100066ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100066d1:	c7 40 78 0a 00 00 00 	mov    DWORD PTR [eax+0x78],0xa
100066d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100066db:	c7 40 7c 64 00 00 00 	mov    DWORD PTR [eax+0x7c],0x64
100066e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100066e5:	c7 80 80 00 00 00 4b 00 00 00 	mov    DWORD PTR [eax+0x80],0x4b
100066ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100066f2:	c7 80 84 00 00 00 18 00 00 00 	mov    DWORD PTR [eax+0x84],0x18
100066fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100066ff:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10006706:	8d 45 b0             	lea    eax,[ebp-0x50]
10006709:	83 ec 0c             	sub    esp,0xc
1000670c:	6a 01                	push   0x1
1000670e:	6a 00                	push   0x0
10006710:	6a 00                	push   0x0
10006712:	6a 00                	push   0x0
10006714:	50                   	push   eax
10006715:	e8 fc ff ff ff       	call   10006716 <NFrame::NFrame(int, int, int, int)+0xcc>	10006716: R_386_PC32	createRectangleRegion(int, int, int, int)
1000671a:	83 c4 1c             	add    esp,0x1c
1000671d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006720:	8d 58 4c             	lea    ebx,[eax+0x4c]
10006723:	8d 45 b0             	lea    eax,[ebp-0x50]
10006726:	ba 19 00 00 00       	mov    edx,0x19
1000672b:	89 df                	mov    edi,ebx
1000672d:	89 c6                	mov    esi,eax
1000672f:	89 d1                	mov    ecx,edx
10006731:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006733:	8d 45 cc             	lea    eax,[ebp-0x34]
10006736:	83 ec 0c             	sub    esp,0xc
10006739:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000673c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000673f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10006742:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006745:	50                   	push   eax
10006746:	e8 fc ff ff ff       	call   10006747 <NFrame::NFrame(int, int, int, int)+0xfd>	10006747: R_386_PC32	createRectangleRegion(int, int, int, int)
1000674b:	83 c4 1c             	add    esp,0x1c
1000674e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006751:	8d 58 14             	lea    ebx,[eax+0x14]
10006754:	8d 45 cc             	lea    eax,[ebp-0x34]
10006757:	ba 19 00 00 00       	mov    edx,0x19
1000675c:	89 df                	mov    edi,ebx
1000675e:	89 c6                	mov    esi,eax
10006760:	89 d1                	mov    ecx,edx
10006762:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006764:	90                   	nop
10006765:	8d 65 f4             	lea    esp,[ebp-0xc]
10006768:	5b                   	pop    ebx
10006769:	5e                   	pop    esi
1000676a:	5f                   	pop    edi
1000676b:	5d                   	pop    ebp
1000676c:	c3                   	ret    
1000676d:	90                   	nop

1000676e <NFrame::addChild(NFrame*)>:
1000676e:	55                   	push   ebp
1000676f:	89 e5                	mov    ebp,esp
10006771:	83 ec 08             	sub    esp,0x8
10006774:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006777:	83 c0 04             	add    eax,0x4
1000677a:	83 ec 08             	sub    esp,0x8
1000677d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006780:	50                   	push   eax
10006781:	e8 fc ff ff ff       	call   10006782 <NFrame::addChild(NFrame*)+0x14>	10006782: R_386_PC32	LinkedList2<NFrame*>::prependNode(NFrame*)
10006786:	83 c4 10             	add    esp,0x10
10006789:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000678c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000678f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
10006792:	90                   	nop
10006793:	c9                   	leave  
10006794:	c3                   	ret    
10006795:	90                   	nop

10006796 <NFrame::getDirtyRegion()>:
10006796:	55                   	push   ebp
10006797:	89 e5                	mov    ebp,esp
10006799:	57                   	push   edi
1000679a:	56                   	push   esi
1000679b:	53                   	push   ebx
1000679c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000679f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100067a2:	8d 58 4c             	lea    ebx,[eax+0x4c]
100067a5:	b8 07 00 00 00       	mov    eax,0x7
100067aa:	89 d7                	mov    edi,edx
100067ac:	89 de                	mov    esi,ebx
100067ae:	89 c1                	mov    ecx,eax
100067b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100067b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100067b5:	5b                   	pop    ebx
100067b6:	5e                   	pop    esi
100067b7:	5f                   	pop    edi
100067b8:	5d                   	pop    ebp
100067b9:	c2 04 00             	ret    0x4

100067bc <NFrame::getDrawRegion()>:
100067bc:	55                   	push   ebp
100067bd:	89 e5                	mov    ebp,esp
100067bf:	57                   	push   edi
100067c0:	56                   	push   esi
100067c1:	53                   	push   ebx
100067c2:	83 ec 7c             	sub    esp,0x7c
100067c5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100067c8:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
100067cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100067ce:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
100067d1:	8d 45 c4             	lea    eax,[ebp-0x3c]
100067d4:	83 ec 0c             	sub    esp,0xc
100067d7:	6a 01                	push   0x1
100067d9:	6a 00                	push   0x0
100067db:	51                   	push   ecx
100067dc:	52                   	push   edx
100067dd:	50                   	push   eax
100067de:	e8 fc ff ff ff       	call   100067df <NFrame::getDrawRegion()+0x23>	100067df: R_386_PC32	createRectangleRegion(int, int, int, int)
100067e3:	83 c4 1c             	add    esp,0x1c
100067e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100067e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
100067ec:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100067ef:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
100067f3:	0f 84 c0 00 00 00    	je     100068b9 <NFrame::getDrawRegion()+0xfd>
100067f9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100067fc:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100067ff:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10006802:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10006805:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10006808:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000680b:	8b 00                	mov    eax,DWORD PTR [eax]
1000680d:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10006810:	84 c0                	test   al,al
10006812:	0f 85 9b 00 00 00    	jne    100068b3 <NFrame::getDrawRegion()+0xf7>
10006818:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000681b:	8b 10                	mov    edx,DWORD PTR [eax]
1000681d:	8d 45 a8             	lea    eax,[ebp-0x58]
10006820:	8d 5a 14             	lea    ebx,[edx+0x14]
10006823:	ba 07 00 00 00       	mov    edx,0x7
10006828:	89 c7                	mov    edi,eax
1000682a:	89 de                	mov    esi,ebx
1000682c:	89 d1                	mov    ecx,edx
1000682e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006830:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10006833:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006836:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
10006839:	01 d0                	add    eax,edx
1000683b:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
1000683e:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10006841:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006844:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
10006847:	01 d0                	add    eax,edx
10006849:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
1000684c:	8d 45 8c             	lea    eax,[ebp-0x74]
1000684f:	89 45 84             	mov    DWORD PTR [ebp-0x7c],eax
10006852:	83 ec 04             	sub    esp,0x4
10006855:	83 ec 1c             	sub    esp,0x1c
10006858:	89 e0                	mov    eax,esp
1000685a:	89 c3                	mov    ebx,eax
1000685c:	8d 45 a8             	lea    eax,[ebp-0x58]
1000685f:	ba 07 00 00 00       	mov    edx,0x7
10006864:	89 df                	mov    edi,ebx
10006866:	89 c6                	mov    esi,eax
10006868:	89 d1                	mov    ecx,edx
1000686a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000686c:	83 ec 1c             	sub    esp,0x1c
1000686f:	89 e0                	mov    eax,esp
10006871:	89 c3                	mov    ebx,eax
10006873:	8d 45 c4             	lea    eax,[ebp-0x3c]
10006876:	ba 07 00 00 00       	mov    edx,0x7
1000687b:	89 df                	mov    edi,ebx
1000687d:	89 c6                	mov    esi,eax
1000687f:	89 d1                	mov    ecx,edx
10006881:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006883:	ff 75 84             	push   DWORD PTR [ebp-0x7c]
10006886:	e8 fc ff ff ff       	call   10006887 <NFrame::getDrawRegion()+0xcb>	10006887: R_386_PC32	getRegionUnion(Region, Region)
1000688b:	83 c4 3c             	add    esp,0x3c
1000688e:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10006891:	83 ec 0c             	sub    esp,0xc
10006894:	50                   	push   eax
10006895:	e8 fc ff ff ff       	call   10006896 <NFrame::getDrawRegion()+0xda>	10006896: R_386_PC32	free
1000689a:	83 c4 10             	add    esp,0x10
1000689d:	8d 45 c4             	lea    eax,[ebp-0x3c]
100068a0:	8d 55 8c             	lea    edx,[ebp-0x74]
100068a3:	b9 19 00 00 00       	mov    ecx,0x19
100068a8:	89 c7                	mov    edi,eax
100068aa:	89 d6                	mov    esi,edx
100068ac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100068ae:	e9 3c ff ff ff       	jmp    100067ef <NFrame::getDrawRegion()+0x33>
100068b3:	90                   	nop
100068b4:	e9 36 ff ff ff       	jmp    100067ef <NFrame::getDrawRegion()+0x33>
100068b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100068bc:	89 45 84             	mov    DWORD PTR [ebp-0x7c],eax
100068bf:	83 ec 04             	sub    esp,0x4
100068c2:	83 ec 1c             	sub    esp,0x1c
100068c5:	89 e0                	mov    eax,esp
100068c7:	89 c3                	mov    ebx,eax
100068c9:	8d 45 c4             	lea    eax,[ebp-0x3c]
100068cc:	ba 07 00 00 00       	mov    edx,0x7
100068d1:	89 df                	mov    edi,ebx
100068d3:	89 c6                	mov    esi,eax
100068d5:	89 d1                	mov    ecx,edx
100068d7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100068d9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100068dc:	83 ec 1c             	sub    esp,0x1c
100068df:	89 e2                	mov    edx,esp
100068e1:	8d 58 14             	lea    ebx,[eax+0x14]
100068e4:	b8 07 00 00 00       	mov    eax,0x7
100068e9:	89 d7                	mov    edi,edx
100068eb:	89 de                	mov    esi,ebx
100068ed:	89 c1                	mov    ecx,eax
100068ef:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100068f1:	ff 75 84             	push   DWORD PTR [ebp-0x7c]
100068f4:	e8 fc ff ff ff       	call   100068f5 <NFrame::getDrawRegion()+0x139>	100068f5: R_386_PC32	getRegionDifference(Region, Region)
100068f9:	83 c4 3c             	add    esp,0x3c
100068fc:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100068ff:	83 ec 0c             	sub    esp,0xc
10006902:	50                   	push   eax
10006903:	e8 fc ff ff ff       	call   10006904 <NFrame::getDrawRegion()+0x148>	10006904: R_386_PC32	free
10006908:	83 c4 10             	add    esp,0x10
1000690b:	90                   	nop
1000690c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000690f:	8d 65 f4             	lea    esp,[ebp-0xc]
10006912:	5b                   	pop    ebx
10006913:	5e                   	pop    esi
10006914:	5f                   	pop    edi
10006915:	5d                   	pop    ebp
10006916:	c2 04 00             	ret    0x4
10006919:	90                   	nop

1000691a <NFrame::regenerateRegion()>:
1000691a:	55                   	push   ebp
1000691b:	89 e5                	mov    ebp,esp
1000691d:	57                   	push   edi
1000691e:	56                   	push   esi
1000691f:	53                   	push   ebx
10006920:	83 ec 6c             	sub    esp,0x6c
10006923:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10006926:	8d 45 94             	lea    eax,[ebp-0x6c]
10006929:	8d 5a 14             	lea    ebx,[edx+0x14]
1000692c:	ba 07 00 00 00       	mov    edx,0x7
10006931:	89 c7                	mov    edi,eax
10006933:	89 de                	mov    esi,ebx
10006935:	89 d1                	mov    ecx,edx
10006937:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006939:	8b 75 9c             	mov    esi,DWORD PTR [ebp-0x64]
1000693c:	8b 5d 98             	mov    ebx,DWORD PTR [ebp-0x68]
1000693f:	8b 4d a8             	mov    ecx,DWORD PTR [ebp-0x58]
10006942:	8b 55 a4             	mov    edx,DWORD PTR [ebp-0x5c]
10006945:	8d 45 b0             	lea    eax,[ebp-0x50]
10006948:	83 ec 0c             	sub    esp,0xc
1000694b:	56                   	push   esi
1000694c:	53                   	push   ebx
1000694d:	51                   	push   ecx
1000694e:	52                   	push   edx
1000694f:	50                   	push   eax
10006950:	e8 fc ff ff ff       	call   10006951 <NFrame::regenerateRegion()+0x37>	10006951: R_386_PC32	createRectangleRegion(int, int, int, int)
10006955:	83 c4 1c             	add    esp,0x1c
10006958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000695b:	8d 58 14             	lea    ebx,[eax+0x14]
1000695e:	8d 45 b0             	lea    eax,[ebp-0x50]
10006961:	ba 19 00 00 00       	mov    edx,0x19
10006966:	89 df                	mov    edi,ebx
10006968:	89 c6                	mov    esi,eax
1000696a:	89 d1                	mov    ecx,edx
1000696c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000696e:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
10006971:	83 ec 0c             	sub    esp,0xc
10006974:	50                   	push   eax
10006975:	e8 fc ff ff ff       	call   10006976 <NFrame::regenerateRegion()+0x5c>	10006976: R_386_PC32	free
1000697a:	83 c4 10             	add    esp,0x10
1000697d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006980:	8a 40 69             	mov    al,BYTE PTR [eax+0x69]
10006983:	84 c0                	test   al,al
10006985:	74 68                	je     100069ef <NFrame::regenerateRegion()+0xd5>
10006987:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000698a:	8d 45 94             	lea    eax,[ebp-0x6c]
1000698d:	8d 5a 30             	lea    ebx,[edx+0x30]
10006990:	ba 19 00 00 00       	mov    edx,0x19
10006995:	89 c7                	mov    edi,eax
10006997:	89 de                	mov    esi,ebx
10006999:	89 d1                	mov    ecx,edx
1000699b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000699d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100069a0:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
100069a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100069a6:	8b 58 18             	mov    ebx,DWORD PTR [eax+0x18]
100069a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100069ac:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
100069af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100069b2:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
100069b5:	8d 45 cc             	lea    eax,[ebp-0x34]
100069b8:	83 ec 08             	sub    esp,0x8
100069bb:	6a 02                	push   0x2
100069bd:	56                   	push   esi
100069be:	53                   	push   ebx
100069bf:	51                   	push   ecx
100069c0:	52                   	push   edx
100069c1:	50                   	push   eax
100069c2:	e8 fc ff ff ff       	call   100069c3 <NFrame::regenerateRegion()+0xa9>	100069c3: R_386_PC32	createAntRegion(int, int, int, int, int)
100069c7:	83 c4 1c             	add    esp,0x1c
100069ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100069cd:	8d 58 30             	lea    ebx,[eax+0x30]
100069d0:	8d 45 cc             	lea    eax,[ebp-0x34]
100069d3:	ba 19 00 00 00       	mov    edx,0x19
100069d8:	89 df                	mov    edi,ebx
100069da:	89 c6                	mov    esi,eax
100069dc:	89 d1                	mov    ecx,edx
100069de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100069e0:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
100069e3:	83 ec 0c             	sub    esp,0xc
100069e6:	50                   	push   eax
100069e7:	e8 fc ff ff ff       	call   100069e8 <NFrame::regenerateRegion()+0xce>	100069e8: R_386_PC32	free
100069ec:	83 c4 10             	add    esp,0x10
100069ef:	90                   	nop
100069f0:	8d 65 f4             	lea    esp,[ebp-0xc]
100069f3:	5b                   	pop    ebx
100069f4:	5e                   	pop    esi
100069f5:	5f                   	pop    edi
100069f6:	5d                   	pop    ebp
100069f7:	c3                   	ret    

100069f8 <NFrame::isHiddenOverall()>:
100069f8:	55                   	push   ebp
100069f9:	89 e5                	mov    ebp,esp
100069fb:	83 ec 08             	sub    esp,0x8
100069fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006a01:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10006a04:	84 c0                	test   al,al
10006a06:	75 20                	jne    10006a28 <NFrame::isHiddenOverall()+0x30>
10006a08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006a0b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10006a0e:	85 c0                	test   eax,eax
10006a10:	74 1a                	je     10006a2c <NFrame::isHiddenOverall()+0x34>
10006a12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006a15:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10006a18:	83 ec 0c             	sub    esp,0xc
10006a1b:	50                   	push   eax
10006a1c:	e8 fc ff ff ff       	call   10006a1d <NFrame::isHiddenOverall()+0x25>	10006a1d: R_386_PC32	NFrame::isHiddenOverall()
10006a21:	83 c4 10             	add    esp,0x10
10006a24:	84 c0                	test   al,al
10006a26:	74 04                	je     10006a2c <NFrame::isHiddenOverall()+0x34>
10006a28:	b0 01                	mov    al,0x1
10006a2a:	eb 02                	jmp    10006a2e <NFrame::isHiddenOverall()+0x36>
10006a2c:	b0 00                	mov    al,0x0
10006a2e:	c9                   	leave  
10006a2f:	c3                   	ret    

10006a30 <NFrame::tryInvalidate()>:
10006a30:	55                   	push   ebp
10006a31:	89 e5                	mov    ebp,esp
10006a33:	57                   	push   edi
10006a34:	56                   	push   esi
10006a35:	53                   	push   ebx
10006a36:	83 ec 2c             	sub    esp,0x2c
10006a39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006a3c:	8a 40 69             	mov    al,BYTE PTR [eax+0x69]
10006a3f:	84 c0                	test   al,al
10006a41:	74 5c                	je     10006a9f <NFrame::tryInvalidate()+0x6f>
10006a43:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10006a46:	8d 45 cc             	lea    eax,[ebp-0x34]
10006a49:	8d 5a 30             	lea    ebx,[edx+0x30]
10006a4c:	ba 07 00 00 00       	mov    edx,0x7
10006a51:	89 c7                	mov    edi,eax
10006a53:	89 de                	mov    esi,ebx
10006a55:	89 d1                	mov    ecx,edx
10006a57:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006a59:	83 ec 0c             	sub    esp,0xc
10006a5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006a5f:	e8 fc ff ff ff       	call   10006a60 <NFrame::tryInvalidate()+0x30>	10006a60: R_386_PC32	NFrame::getAbsX()
10006a64:	83 c4 10             	add    esp,0x10
10006a67:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10006a6a:	83 ec 0c             	sub    esp,0xc
10006a6d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006a70:	e8 fc ff ff ff       	call   10006a71 <NFrame::tryInvalidate()+0x41>	10006a71: R_386_PC32	NFrame::getAbsY()
10006a75:	83 c4 10             	add    esp,0x10
10006a78:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10006a7b:	83 ec 1c             	sub    esp,0x1c
10006a7e:	89 e0                	mov    eax,esp
10006a80:	89 c3                	mov    ebx,eax
10006a82:	8d 45 cc             	lea    eax,[ebp-0x34]
10006a85:	ba 07 00 00 00       	mov    edx,0x7
10006a8a:	89 df                	mov    edi,ebx
10006a8c:	89 c6                	mov    esi,eax
10006a8e:	89 d1                	mov    ecx,edx
10006a90:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006a92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006a95:	e8 fc ff ff ff       	call   10006a96 <NFrame::tryInvalidate()+0x66>	10006a96: R_386_PC32	NFrame::markRegionAsDirty(Region)
10006a9a:	83 c4 20             	add    esp,0x20
10006a9d:	eb 23                	jmp    10006ac2 <NFrame::tryInvalidate()+0x92>
10006a9f:	83 ec 0c             	sub    esp,0xc
10006aa2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006aa5:	e8 fc ff ff ff       	call   10006aa6 <NFrame::tryInvalidate()+0x76>	10006aa6: R_386_PC32	NFrame::isHiddenOverall()
10006aaa:	83 c4 10             	add    esp,0x10
10006aad:	83 f0 01             	xor    eax,0x1
10006ab0:	84 c0                	test   al,al
10006ab2:	74 0e                	je     10006ac2 <NFrame::tryInvalidate()+0x92>
10006ab4:	83 ec 0c             	sub    esp,0xc
10006ab7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006aba:	e8 fc ff ff ff       	call   10006abb <NFrame::tryInvalidate()+0x8b>	10006abb: R_386_PC32	NFrame::invalidate()
10006abf:	83 c4 10             	add    esp,0x10
10006ac2:	8d 65 f4             	lea    esp,[ebp-0xc]
10006ac5:	5b                   	pop    ebx
10006ac6:	5e                   	pop    esi
10006ac7:	5f                   	pop    edi
10006ac8:	5d                   	pop    ebp
10006ac9:	c3                   	ret    

10006aca <NFrame::getAbsX()>:
10006aca:	55                   	push   ebp
10006acb:	89 e5                	mov    ebp,esp
10006acd:	83 ec 08             	sub    esp,0x8
10006ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006ad3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10006ad6:	85 c0                	test   eax,eax
10006ad8:	74 1e                	je     10006af8 <NFrame::getAbsX()+0x2e>
10006ada:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006add:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10006ae0:	83 ec 0c             	sub    esp,0xc
10006ae3:	50                   	push   eax
10006ae4:	e8 fc ff ff ff       	call   10006ae5 <NFrame::getAbsX()+0x1b>	10006ae5: R_386_PC32	NFrame::getAbsX()
10006ae9:	83 c4 10             	add    esp,0x10
10006aec:	89 c2                	mov    edx,eax
10006aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006af1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
10006af4:	01 d0                	add    eax,edx
10006af6:	eb 06                	jmp    10006afe <NFrame::getAbsX()+0x34>
10006af8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006afb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
10006afe:	c9                   	leave  
10006aff:	c3                   	ret    

10006b00 <NFrame::getAbsY()>:
10006b00:	55                   	push   ebp
10006b01:	89 e5                	mov    ebp,esp
10006b03:	83 ec 08             	sub    esp,0x8
10006b06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006b09:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10006b0c:	85 c0                	test   eax,eax
10006b0e:	74 1e                	je     10006b2e <NFrame::getAbsY()+0x2e>
10006b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006b13:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10006b16:	83 ec 0c             	sub    esp,0xc
10006b19:	50                   	push   eax
10006b1a:	e8 fc ff ff ff       	call   10006b1b <NFrame::getAbsY()+0x1b>	10006b1b: R_386_PC32	NFrame::getAbsY()
10006b1f:	83 c4 10             	add    esp,0x10
10006b22:	89 c2                	mov    edx,eax
10006b24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006b27:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
10006b2a:	01 d0                	add    eax,edx
10006b2c:	eb 06                	jmp    10006b34 <NFrame::getAbsY()+0x34>
10006b2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006b31:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
10006b34:	c9                   	leave  
10006b35:	c3                   	ret    

10006b36 <NFrame::repaint(Video*, Region)>:
10006b36:	55                   	push   ebp
10006b37:	89 e5                	mov    ebp,esp
10006b39:	57                   	push   edi
10006b3a:	56                   	push   esi
10006b3b:	53                   	push   ebx
10006b3c:	83 ec 7c             	sub    esp,0x7c
10006b3f:	8d 45 b0             	lea    eax,[ebp-0x50]
10006b42:	83 ec 08             	sub    esp,0x8
10006b45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006b48:	50                   	push   eax
10006b49:	e8 fc ff ff ff       	call   10006b4a <NFrame::repaint(Video*, Region)+0x14>	10006b4a: R_386_PC32	NFrame::getDirtyRegion()
10006b4e:	83 c4 0c             	add    esp,0xc
10006b51:	8d 45 94             	lea    eax,[ebp-0x6c]
10006b54:	89 45 84             	mov    DWORD PTR [ebp-0x7c],eax
10006b57:	83 ec 04             	sub    esp,0x4
10006b5a:	83 ec 1c             	sub    esp,0x1c
10006b5d:	89 e0                	mov    eax,esp
10006b5f:	89 c3                	mov    ebx,eax
10006b61:	8d 45 10             	lea    eax,[ebp+0x10]
10006b64:	ba 07 00 00 00       	mov    edx,0x7
10006b69:	89 df                	mov    edi,ebx
10006b6b:	89 c6                	mov    esi,eax
10006b6d:	89 d1                	mov    ecx,edx
10006b6f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006b71:	83 ec 1c             	sub    esp,0x1c
10006b74:	89 e0                	mov    eax,esp
10006b76:	89 c3                	mov    ebx,eax
10006b78:	8d 45 b0             	lea    eax,[ebp-0x50]
10006b7b:	ba 07 00 00 00       	mov    edx,0x7
10006b80:	89 df                	mov    edi,ebx
10006b82:	89 c6                	mov    esi,eax
10006b84:	89 d1                	mov    ecx,edx
10006b86:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006b88:	ff 75 84             	push   DWORD PTR [ebp-0x7c]
10006b8b:	e8 fc ff ff ff       	call   10006b8c <NFrame::repaint(Video*, Region)+0x56>	10006b8c: R_386_PC32	getRegionDifference(Region, Region)
10006b90:	83 c4 3c             	add    esp,0x3c
10006b93:	8d 45 cc             	lea    eax,[ebp-0x34]
10006b96:	89 45 84             	mov    DWORD PTR [ebp-0x7c],eax
10006b99:	83 ec 04             	sub    esp,0x4
10006b9c:	6a 01                	push   0x1
10006b9e:	83 ec 1c             	sub    esp,0x1c
10006ba1:	89 e0                	mov    eax,esp
10006ba3:	89 c3                	mov    ebx,eax
10006ba5:	8d 45 94             	lea    eax,[ebp-0x6c]
10006ba8:	ba 07 00 00 00       	mov    edx,0x7
10006bad:	89 df                	mov    edi,ebx
10006baf:	89 c6                	mov    esi,eax
10006bb1:	89 d1                	mov    ecx,edx
10006bb3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006bb5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006bb8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006bbb:	ff 75 84             	push   DWORD PTR [ebp-0x7c]
10006bbe:	e8 fc ff ff ff       	call   10006bbf <NFrame::repaint(Video*, Region)+0x89>	10006bbf: R_386_PC32	NFrame::repaintAux(Video*, Region, bool)
10006bc3:	83 c4 2c             	add    esp,0x2c
10006bc6:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10006bc9:	83 ec 0c             	sub    esp,0xc
10006bcc:	50                   	push   eax
10006bcd:	e8 fc ff ff ff       	call   10006bce <NFrame::repaint(Video*, Region)+0x98>	10006bce: R_386_PC32	free
10006bd2:	83 c4 10             	add    esp,0x10
10006bd5:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
10006bd8:	83 ec 0c             	sub    esp,0xc
10006bdb:	50                   	push   eax
10006bdc:	e8 fc ff ff ff       	call   10006bdd <NFrame::repaint(Video*, Region)+0xa7>	10006bdd: R_386_PC32	free
10006be1:	83 c4 10             	add    esp,0x10
10006be4:	90                   	nop
10006be5:	8d 65 f4             	lea    esp,[ebp-0xc]
10006be8:	5b                   	pop    ebx
10006be9:	5e                   	pop    esi
10006bea:	5f                   	pop    edi
10006beb:	5d                   	pop    ebp
10006bec:	c3                   	ret    
10006bed:	90                   	nop

10006bee <NFrame::paintSolid(NFrame::Graphics, unsigned int)>:
10006bee:	55                   	push   ebp
10006bef:	89 e5                	mov    ebp,esp
10006bf1:	57                   	push   edi
10006bf2:	56                   	push   esi
10006bf3:	53                   	push   ebx
10006bf4:	83 ec 1c             	sub    esp,0x1c
10006bf7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006bfa:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10006bfd:	83 ec 0c             	sub    esp,0xc
10006c00:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
10006c03:	83 ec 1c             	sub    esp,0x1c
10006c06:	89 e0                	mov    eax,esp
10006c08:	89 c3                	mov    ebx,eax
10006c0a:	8d 45 10             	lea    eax,[ebp+0x10]
10006c0d:	ba 07 00 00 00       	mov    edx,0x7
10006c12:	89 df                	mov    edi,ebx
10006c14:	89 c6                	mov    esi,eax
10006c16:	89 d1                	mov    ecx,edx
10006c18:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006c1a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10006c1d:	e8 fc ff ff ff       	call   10006c1e <NFrame::paintSolid(NFrame::Graphics, unsigned int)+0x30>	10006c1e: R_386_PC32	fillRegion(Video*, Region, unsigned int)
10006c22:	83 c4 30             	add    esp,0x30
10006c25:	90                   	nop
10006c26:	8d 65 f4             	lea    esp,[ebp-0xc]
10006c29:	5b                   	pop    ebx
10006c2a:	5e                   	pop    esi
10006c2b:	5f                   	pop    edi
10006c2c:	5d                   	pop    ebp
10006c2d:	c3                   	ret    

10006c2e <NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)>:
10006c2e:	55                   	push   ebp
10006c2f:	89 e5                	mov    ebp,esp
10006c31:	57                   	push   edi
10006c32:	56                   	push   esi
10006c33:	53                   	push   ebx
10006c34:	83 ec 2c             	sub    esp,0x2c
10006c37:	83 ec 0c             	sub    esp,0xc
10006c3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006c3d:	e8 fc ff ff ff       	call   10006c3e <NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)+0x10>	10006c3e: R_386_PC32	NFrame::getAbsY()
10006c42:	83 c4 10             	add    esp,0x10
10006c45:	89 c2                	mov    edx,eax
10006c47:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
10006c4a:	8d 1c 02             	lea    ebx,[edx+eax*1]
10006c4d:	83 ec 0c             	sub    esp,0xc
10006c50:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006c53:	e8 fc ff ff ff       	call   10006c54 <NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)+0x26>	10006c54: R_386_PC32	NFrame::getAbsX()
10006c58:	83 c4 10             	add    esp,0x10
10006c5b:	89 c2                	mov    edx,eax
10006c5d:	8b 45 2c             	mov    eax,DWORD PTR [ebp+0x2c]
10006c60:	01 c2                	add    edx,eax
10006c62:	8d 45 cc             	lea    eax,[ebp-0x34]
10006c65:	83 ec 0c             	sub    esp,0xc
10006c68:	ff 75 38             	push   DWORD PTR [ebp+0x38]
10006c6b:	ff 75 34             	push   DWORD PTR [ebp+0x34]
10006c6e:	53                   	push   ebx
10006c6f:	52                   	push   edx
10006c70:	50                   	push   eax
10006c71:	e8 fc ff ff ff       	call   10006c72 <NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)+0x44>	10006c72: R_386_PC32	createRectangleRegion(int, int, int, int)
10006c76:	83 c4 1c             	add    esp,0x1c
10006c79:	83 ec 0c             	sub    esp,0xc
10006c7c:	ff 75 3c             	push   DWORD PTR [ebp+0x3c]
10006c7f:	83 ec 20             	sub    esp,0x20
10006c82:	89 e0                	mov    eax,esp
10006c84:	89 c3                	mov    ebx,eax
10006c86:	8d 45 0c             	lea    eax,[ebp+0xc]
10006c89:	ba 08 00 00 00       	mov    edx,0x8
10006c8e:	89 df                	mov    edi,ebx
10006c90:	89 c6                	mov    esi,eax
10006c92:	89 d1                	mov    ecx,edx
10006c94:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006c96:	83 ec 1c             	sub    esp,0x1c
10006c99:	89 e0                	mov    eax,esp
10006c9b:	89 c3                	mov    ebx,eax
10006c9d:	8d 45 cc             	lea    eax,[ebp-0x34]
10006ca0:	ba 07 00 00 00       	mov    edx,0x7
10006ca5:	89 df                	mov    edi,ebx
10006ca7:	89 c6                	mov    esi,eax
10006ca9:	89 d1                	mov    ecx,edx
10006cab:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006cad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006cb0:	e8 fc ff ff ff       	call   10006cb1 <NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)+0x83>	10006cb1: R_386_PC32	NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)
10006cb5:	83 c4 50             	add    esp,0x50
10006cb8:	90                   	nop
10006cb9:	8d 65 f4             	lea    esp,[ebp-0xc]
10006cbc:	5b                   	pop    ebx
10006cbd:	5e                   	pop    esi
10006cbe:	5f                   	pop    edi
10006cbf:	5d                   	pop    ebp
10006cc0:	c3                   	ret    
10006cc1:	90                   	nop

10006cc2 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)>:
10006cc2:	55                   	push   ebp
10006cc3:	89 e5                	mov    ebp,esp
10006cc5:	57                   	push   edi
10006cc6:	56                   	push   esi
10006cc7:	53                   	push   ebx
10006cc8:	81 ec bc 00 00 00    	sub    esp,0xbc
10006cce:	83 7d 3c ff          	cmp    DWORD PTR [ebp+0x3c],0xffffffff
10006cd2:	75 46                	jne    10006d1a <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x58>
10006cd4:	6a 00                	push   0x0
10006cd6:	6a 0c                	push   0xc
10006cd8:	68 d8 82 00 10       	push   0x100082d8	10006cd9: R_386_32	.text
10006cdd:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006ce3:	50                   	push   eax
10006ce4:	e8 fc ff ff ff       	call   10006ce5 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x23>	10006ce5: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
10006ce9:	83 c4 10             	add    esp,0x10
10006cec:	83 ec 08             	sub    esp,0x8
10006cef:	81 ec 88 00 00 00    	sub    esp,0x88
10006cf5:	89 e0                	mov    eax,esp
10006cf7:	89 c3                	mov    ebx,eax
10006cf9:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006cff:	ba 22 00 00 00       	mov    edx,0x22
10006d04:	89 df                	mov    edi,ebx
10006d06:	89 c6                	mov    esi,eax
10006d08:	89 d1                	mov    ecx,edx
10006d0a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006d0c:	e8 fc ff ff ff       	call   10006d0d <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x4b>	10006d0d: R_386_PC32	getFontHandle(FontStyle)
10006d11:	81 c4 90 00 00 00    	add    esp,0x90
10006d17:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
10006d1a:	83 ec 0c             	sub    esp,0xc
10006d1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006d20:	e8 fc ff ff ff       	call   10006d21 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x5f>	10006d21: R_386_PC32	NFrame::getAbsX()
10006d25:	83 c4 10             	add    esp,0x10
10006d28:	01 45 2c             	add    DWORD PTR [ebp+0x2c],eax
10006d2b:	83 ec 0c             	sub    esp,0xc
10006d2e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006d31:	e8 fc ff ff ff       	call   10006d32 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x70>	10006d32: R_386_PC32	NFrame::getAbsY()
10006d36:	83 c4 10             	add    esp,0x10
10006d39:	01 45 30             	add    DWORD PTR [ebp+0x30],eax
10006d3c:	8b 45 2c             	mov    eax,DWORD PTR [ebp+0x2c]
10006d3f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10006d42:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10006d49:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10006d50:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10006d53:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
10006d56:	01 d0                	add    eax,edx
10006d58:	8a 00                	mov    al,BYTE PTR [eax]
10006d5a:	84 c0                	test   al,al
10006d5c:	0f 84 9e 00 00 00    	je     10006e00 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x13e>
10006d62:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10006d65:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
10006d68:	01 d0                	add    eax,edx
10006d6a:	8a 00                	mov    al,BYTE PTR [eax]
10006d6c:	3c 0a                	cmp    al,0xa
10006d6e:	75 15                	jne    10006d85 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0xc3>
10006d70:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10006d73:	01 45 30             	add    DWORD PTR [ebp+0x30],eax
10006d76:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10006d7d:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006d80:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
10006d83:	eb 73                	jmp    10006df8 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x136>
10006d85:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10006d88:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
10006d8b:	01 d0                	add    eax,edx
10006d8d:	8a 00                	mov    al,BYTE PTR [eax]
10006d8f:	0f be c0             	movsx  eax,al
10006d92:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10006d95:	89 8d 44 ff ff ff    	mov    DWORD PTR [ebp-0xbc],ecx
10006d9b:	83 ec 0c             	sub    esp,0xc
10006d9e:	ff 75 38             	push   DWORD PTR [ebp+0x38]
10006da1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
10006da4:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
10006da7:	50                   	push   eax
10006da8:	ff 75 3c             	push   DWORD PTR [ebp+0x3c]
10006dab:	83 ec 1c             	sub    esp,0x1c
10006dae:	89 e0                	mov    eax,esp
10006db0:	89 c3                	mov    ebx,eax
10006db2:	8d 45 10             	lea    eax,[ebp+0x10]
10006db5:	ba 07 00 00 00       	mov    edx,0x7
10006dba:	89 df                	mov    edi,ebx
10006dbc:	89 c6                	mov    esi,eax
10006dbe:	89 d1                	mov    ecx,edx
10006dc0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006dc2:	ff b5 44 ff ff ff    	push   DWORD PTR [ebp-0xbc]
10006dc8:	e8 fc ff ff ff       	call   10006dc9 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x107>	10006dc9: R_386_PC32	drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)
10006dcd:	83 c4 40             	add    esp,0x40
10006dd0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10006dd3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10006dd6:	0f b7 d0             	movzx  edx,ax
10006dd9:	8b 45 2c             	mov    eax,DWORD PTR [ebp+0x2c]
10006ddc:	01 d0                	add    eax,edx
10006dde:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
10006de1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10006de4:	c1 e8 10             	shr    eax,0x10
10006de7:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10006dea:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006ded:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
10006df0:	7e 06                	jle    10006df8 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x136>
10006df2:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006df5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10006df8:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10006dfb:	e9 50 ff ff ff       	jmp    10006d50 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x8e>
10006e00:	90                   	nop
10006e01:	8d 65 f4             	lea    esp,[ebp-0xc]
10006e04:	5b                   	pop    ebx
10006e05:	5e                   	pop    esi
10006e06:	5f                   	pop    edi
10006e07:	5d                   	pop    ebp
10006e08:	c3                   	ret    
10006e09:	90                   	nop

10006e0a <NWindow::NWindow(int, int, int, int, char const*, int)>:
10006e0a:	55                   	push   ebp
10006e0b:	89 e5                	mov    ebp,esp
10006e0d:	57                   	push   edi
10006e0e:	56                   	push   esi
10006e0f:	53                   	push   ebx
10006e10:	83 ec 3c             	sub    esp,0x3c
10006e13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e16:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10006e19:	8d 45 cc             	lea    eax,[ebp-0x34]
10006e1c:	83 ec 0c             	sub    esp,0xc
10006e1f:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10006e22:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10006e25:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10006e28:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006e2b:	50                   	push   eax
10006e2c:	e8 fc ff ff ff       	call   10006e2d <NWindow::NWindow(int, int, int, int, char const*, int)+0x23>	10006e2d: R_386_PC32	createRectangleRegion(int, int, int, int)
10006e31:	83 c4 1c             	add    esp,0x1c
10006e34:	83 ec 1c             	sub    esp,0x1c
10006e37:	89 e0                	mov    eax,esp
10006e39:	89 c3                	mov    ebx,eax
10006e3b:	8d 45 cc             	lea    eax,[ebp-0x34]
10006e3e:	ba 07 00 00 00       	mov    edx,0x7
10006e43:	89 df                	mov    edi,ebx
10006e45:	89 c6                	mov    esi,eax
10006e47:	89 d1                	mov    ecx,edx
10006e49:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006e4b:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10006e4e:	e8 fc ff ff ff       	call   10006e4f <NWindow::NWindow(int, int, int, int, char const*, int)+0x45>	10006e4f: R_386_PC32	NFrame::NFrame(Region)
10006e53:	83 c4 20             	add    esp,0x20
10006e56:	ba 08 00 00 00       	mov    edx,0x8	10006e57: R_386_32	vtable for NWindow
10006e5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e5e:	89 10                	mov    DWORD PTR [eax],edx
10006e60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e63:	c7 80 88 00 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x88],0x3
10006e6d:	c6 45 cb 00          	mov    BYTE PTR [ebp-0x35],0x0
10006e71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e74:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
10006e77:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
10006e7a:	83 7d 1c 00          	cmp    DWORD PTR [ebp+0x1c],0x0
10006e7e:	75 06                	jne    10006e86 <NWindow::NWindow(int, int, int, int, char const*, int)+0x7c>
10006e80:	8d 45 cb             	lea    eax,[ebp-0x35]
10006e83:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
10006e86:	83 ec 0c             	sub    esp,0xc
10006e89:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
10006e8c:	e8 fc ff ff ff       	call   10006e8d <NWindow::NWindow(int, int, int, int, char const*, int)+0x83>	10006e8d: R_386_PC32	strlen
10006e91:	83 c4 10             	add    esp,0x10
10006e94:	40                   	inc    eax
10006e95:	83 ec 0c             	sub    esp,0xc
10006e98:	50                   	push   eax
10006e99:	e8 fc ff ff ff       	call   10006e9a <NWindow::NWindow(int, int, int, int, char const*, int)+0x90>	10006e9a: R_386_PC32	malloc
10006e9e:	83 c4 10             	add    esp,0x10
10006ea1:	89 c2                	mov    edx,eax
10006ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006ea6:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
10006eac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006eaf:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
10006eb5:	83 ec 08             	sub    esp,0x8
10006eb8:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
10006ebb:	50                   	push   eax
10006ebc:	e8 fc ff ff ff       	call   10006ebd <NWindow::NWindow(int, int, int, int, char const*, int)+0xb3>	10006ebd: R_386_PC32	strcpy
10006ec1:	83 c4 10             	add    esp,0x10
10006ec4:	83 ec 0c             	sub    esp,0xc
10006ec7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006eca:	e8 fc ff ff ff       	call   10006ecb <NWindow::NWindow(int, int, int, int, char const*, int)+0xc1>	10006ecb: R_386_PC32	NWindow::clipCornersIfNeededToMakeShadows()
10006ecf:	83 c4 10             	add    esp,0x10
10006ed2:	90                   	nop
10006ed3:	8d 65 f4             	lea    esp,[ebp-0xc]
10006ed6:	5b                   	pop    ebx
10006ed7:	5e                   	pop    esi
10006ed8:	5f                   	pop    edi
10006ed9:	5d                   	pop    ebp
10006eda:	c3                   	ret    
10006edb:	90                   	nop

10006edc <NWindow::clipCornersIfNeededToMakeShadows()>:
10006edc:	55                   	push   ebp
10006edd:	89 e5                	mov    ebp,esp
10006edf:	57                   	push   edi
10006ee0:	56                   	push   esi
10006ee1:	53                   	push   ebx
10006ee2:	81 ec 8c 00 00 00    	sub    esp,0x8c
10006ee8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006eeb:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10006eee:	83 e0 04             	and    eax,0x4
10006ef1:	85 c0                	test   eax,eax
10006ef3:	0f 85 96 01 00 00    	jne    1000708f <NWindow::clipCornersIfNeededToMakeShadows()+0x1b3>
10006ef9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006efc:	8a 40 70             	mov    al,BYTE PTR [eax+0x70]
10006eff:	83 f0 01             	xor    eax,0x1
10006f02:	84 c0                	test   al,al
10006f04:	0f 84 85 01 00 00    	je     1000708f <NWindow::clipCornersIfNeededToMakeShadows()+0x1b3>
10006f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f0d:	c7 80 88 00 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x88],0x3
10006f17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f1a:	8b 98 88 00 00 00    	mov    ebx,DWORD PTR [eax+0x88]
10006f20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f23:	8b 88 88 00 00 00    	mov    ecx,DWORD PTR [eax+0x88]
10006f29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f2c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
10006f2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f32:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
10006f35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f38:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10006f3b:	01 c6                	add    esi,eax
10006f3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f40:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
10006f46:	29 c6                	sub    esi,eax
10006f48:	8d 45 cc             	lea    eax,[ebp-0x34]
10006f4b:	83 ec 0c             	sub    esp,0xc
10006f4e:	53                   	push   ebx
10006f4f:	51                   	push   ecx
10006f50:	52                   	push   edx
10006f51:	56                   	push   esi
10006f52:	50                   	push   eax
10006f53:	e8 fc ff ff ff       	call   10006f54 <NWindow::clipCornersIfNeededToMakeShadows()+0x78>	10006f54: R_386_PC32	createRectangleRegion(int, int, int, int)
10006f58:	83 c4 1c             	add    esp,0x1c
10006f5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f5e:	8b 98 88 00 00 00    	mov    ebx,DWORD PTR [eax+0x88]
10006f64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f67:	8b 88 88 00 00 00    	mov    ecx,DWORD PTR [eax+0x88]
10006f6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f70:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
10006f73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f76:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
10006f79:	01 c2                	add    edx,eax
10006f7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f7e:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
10006f84:	89 d6                	mov    esi,edx
10006f86:	29 c6                	sub    esi,eax
10006f88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f8b:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
10006f8e:	8d 45 b0             	lea    eax,[ebp-0x50]
10006f91:	83 ec 0c             	sub    esp,0xc
10006f94:	53                   	push   ebx
10006f95:	51                   	push   ecx
10006f96:	56                   	push   esi
10006f97:	52                   	push   edx
10006f98:	50                   	push   eax
10006f99:	e8 fc ff ff ff       	call   10006f9a <NWindow::clipCornersIfNeededToMakeShadows()+0xbe>	10006f9a: R_386_PC32	createRectangleRegion(int, int, int, int)
10006f9e:	83 c4 1c             	add    esp,0x1c
10006fa1:	8d 45 94             	lea    eax,[ebp-0x6c]
10006fa4:	89 85 74 ff ff ff    	mov    DWORD PTR [ebp-0x8c],eax
10006faa:	83 ec 04             	sub    esp,0x4
10006fad:	83 ec 1c             	sub    esp,0x1c
10006fb0:	89 e0                	mov    eax,esp
10006fb2:	89 c3                	mov    ebx,eax
10006fb4:	8d 45 b0             	lea    eax,[ebp-0x50]
10006fb7:	ba 07 00 00 00       	mov    edx,0x7
10006fbc:	89 df                	mov    edi,ebx
10006fbe:	89 c6                	mov    esi,eax
10006fc0:	89 d1                	mov    ecx,edx
10006fc2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006fc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006fc7:	83 ec 1c             	sub    esp,0x1c
10006fca:	89 e2                	mov    edx,esp
10006fcc:	8d 58 14             	lea    ebx,[eax+0x14]
10006fcf:	b8 07 00 00 00       	mov    eax,0x7
10006fd4:	89 d7                	mov    edi,edx
10006fd6:	89 de                	mov    esi,ebx
10006fd8:	89 c1                	mov    ecx,eax
10006fda:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006fdc:	ff b5 74 ff ff ff    	push   DWORD PTR [ebp-0x8c]
10006fe2:	e8 fc ff ff ff       	call   10006fe3 <NWindow::clipCornersIfNeededToMakeShadows()+0x107>	10006fe3: R_386_PC32	getRegionDifference(Region, Region)
10006fe7:	83 c4 3c             	add    esp,0x3c
10006fea:	8d 85 78 ff ff ff    	lea    eax,[ebp-0x88]
10006ff0:	89 85 74 ff ff ff    	mov    DWORD PTR [ebp-0x8c],eax
10006ff6:	83 ec 04             	sub    esp,0x4
10006ff9:	83 ec 1c             	sub    esp,0x1c
10006ffc:	89 e0                	mov    eax,esp
10006ffe:	89 c3                	mov    ebx,eax
10007000:	8d 45 cc             	lea    eax,[ebp-0x34]
10007003:	ba 07 00 00 00       	mov    edx,0x7
10007008:	89 df                	mov    edi,ebx
1000700a:	89 c6                	mov    esi,eax
1000700c:	89 d1                	mov    ecx,edx
1000700e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007010:	83 ec 1c             	sub    esp,0x1c
10007013:	89 e0                	mov    eax,esp
10007015:	89 c3                	mov    ebx,eax
10007017:	8d 45 94             	lea    eax,[ebp-0x6c]
1000701a:	ba 07 00 00 00       	mov    edx,0x7
1000701f:	89 df                	mov    edi,ebx
10007021:	89 c6                	mov    esi,eax
10007023:	89 d1                	mov    ecx,edx
10007025:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007027:	ff b5 74 ff ff ff    	push   DWORD PTR [ebp-0x8c]
1000702d:	e8 fc ff ff ff       	call   1000702e <NWindow::clipCornersIfNeededToMakeShadows()+0x152>	1000702e: R_386_PC32	getRegionDifference(Region, Region)
10007032:	83 c4 3c             	add    esp,0x3c
10007035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007038:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
1000703b:	83 ec 0c             	sub    esp,0xc
1000703e:	50                   	push   eax
1000703f:	e8 fc ff ff ff       	call   10007040 <NWindow::clipCornersIfNeededToMakeShadows()+0x164>	10007040: R_386_PC32	free
10007044:	83 c4 10             	add    esp,0x10
10007047:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
1000704a:	83 ec 0c             	sub    esp,0xc
1000704d:	50                   	push   eax
1000704e:	e8 fc ff ff ff       	call   1000704f <NWindow::clipCornersIfNeededToMakeShadows()+0x173>	1000704f: R_386_PC32	free
10007053:	83 c4 10             	add    esp,0x10
10007056:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10007059:	83 ec 0c             	sub    esp,0xc
1000705c:	50                   	push   eax
1000705d:	e8 fc ff ff ff       	call   1000705e <NWindow::clipCornersIfNeededToMakeShadows()+0x182>	1000705e: R_386_PC32	free
10007062:	83 c4 10             	add    esp,0x10
10007065:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
10007068:	83 ec 0c             	sub    esp,0xc
1000706b:	50                   	push   eax
1000706c:	e8 fc ff ff ff       	call   1000706d <NWindow::clipCornersIfNeededToMakeShadows()+0x191>	1000706d: R_386_PC32	free
10007071:	83 c4 10             	add    esp,0x10
10007074:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007077:	8d 58 14             	lea    ebx,[eax+0x14]
1000707a:	8d 85 78 ff ff ff    	lea    eax,[ebp-0x88]
10007080:	ba 19 00 00 00       	mov    edx,0x19
10007085:	89 df                	mov    edi,ebx
10007087:	89 c6                	mov    esi,eax
10007089:	89 d1                	mov    ecx,edx
1000708b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000708d:	eb 0d                	jmp    1000709c <NWindow::clipCornersIfNeededToMakeShadows()+0x1c0>
1000708f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007092:	c7 80 88 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x88],0x0
1000709c:	90                   	nop
1000709d:	8d 65 f4             	lea    esp,[ebp-0xc]
100070a0:	5b                   	pop    ebx
100070a1:	5e                   	pop    esi
100070a2:	5f                   	pop    edi
100070a3:	5d                   	pop    ebp
100070a4:	c3                   	ret    
100070a5:	90                   	nop

100070a6 <NWindow::postResizeCleanup()>:
100070a6:	55                   	push   ebp
100070a7:	89 e5                	mov    ebp,esp
100070a9:	83 ec 08             	sub    esp,0x8
100070ac:	83 ec 0c             	sub    esp,0xc
100070af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100070b2:	e8 fc ff ff ff       	call   100070b3 <NWindow::postResizeCleanup()+0xd>	100070b3: R_386_PC32	NWindow::clipCornersIfNeededToMakeShadows()
100070b7:	83 c4 10             	add    esp,0x10
100070ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100070bd:	83 ec 0c             	sub    esp,0xc
100070c0:	50                   	push   eax
100070c1:	e8 fc ff ff ff       	call   100070c2 <NWindow::postResizeCleanup()+0x1c>	100070c2: R_386_PC32	NFrame::tryInvalidate()
100070c6:	83 c4 10             	add    esp,0x10
100070c9:	90                   	nop
100070ca:	c9                   	leave  
100070cb:	c3                   	ret    

100070cc <NWindow::paintHandler(NFrame::Graphics)>:
100070cc:	55                   	push   ebp
100070cd:	89 e5                	mov    ebp,esp
100070cf:	57                   	push   edi
100070d0:	56                   	push   esi
100070d1:	53                   	push   ebx
100070d2:	83 ec 4c             	sub    esp,0x4c
100070d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100070d8:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
100070db:	83 e0 08             	and    eax,0x8
100070de:	85 c0                	test   eax,eax
100070e0:	0f 85 5a 04 00 00    	jne    10007540 <NWindow::paintHandler(NFrame::Graphics)+0x474>
100070e6:	c7 45 e4 18 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x18
100070ed:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100070f4:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100070fb:	c7 45 d8 c0 c0 c0 00 	mov    DWORD PTR [ebp-0x28],0xc0c0c0
10007102:	c7 45 d4 ff ff ff 00 	mov    DWORD PTR [ebp-0x2c],0xffffff
10007109:	c7 45 d0 ff ff ff 00 	mov    DWORD PTR [ebp-0x30],0xffffff
10007110:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
10007117:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
1000711e:	c7 45 c4 c0 c0 c0 00 	mov    DWORD PTR [ebp-0x3c],0xc0c0c0
10007125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007128:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
1000712b:	83 e0 01             	and    eax,0x1
1000712e:	85 c0                	test   eax,eax
10007130:	0f 85 0d 02 00 00    	jne    10007343 <NWindow::paintHandler(NFrame::Graphics)+0x277>
10007136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007139:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
1000713c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000713f:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10007142:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007145:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
1000714b:	89 d1                	mov    ecx,edx
1000714d:	29 c1                	sub    ecx,eax
1000714f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007152:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
10007155:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007158:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
1000715e:	83 ec 08             	sub    esp,0x8
10007161:	68 c0 c0 c0 00       	push   0xc0c0c0
10007166:	51                   	push   ecx
10007167:	52                   	push   edx
10007168:	50                   	push   eax
10007169:	6a 00                	push   0x0
1000716b:	83 ec 20             	sub    esp,0x20
1000716e:	89 e0                	mov    eax,esp
10007170:	89 c3                	mov    ebx,eax
10007172:	8d 45 0c             	lea    eax,[ebp+0xc]
10007175:	ba 08 00 00 00       	mov    edx,0x8
1000717a:	89 df                	mov    edi,ebx
1000717c:	89 c6                	mov    esi,eax
1000717e:	89 d1                	mov    ecx,edx
10007180:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007182:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007185:	e8 fc ff ff ff       	call   10007186 <NWindow::paintHandler(NFrame::Graphics)+0xba>	10007186: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
1000718a:	83 c4 40             	add    esp,0x40
1000718d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007190:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007193:	83 e0 02             	and    eax,0x2
10007196:	85 c0                	test   eax,eax
10007198:	0f 85 14 01 00 00    	jne    100072b2 <NWindow::paintHandler(NFrame::Graphics)+0x1e6>
1000719e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100071a1:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
100071a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100071a7:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
100071ad:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100071b0:	8b 4a 18             	mov    ecx,DWORD PTR [edx+0x18]
100071b3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100071b6:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
100071bc:	29 d1                	sub    ecx,edx
100071be:	89 ca                	mov    edx,ecx
100071c0:	83 ea 18             	sub    edx,0x18
100071c3:	83 ec 08             	sub    esp,0x8
100071c6:	68 ff ff ff 00       	push   0xffffff
100071cb:	50                   	push   eax
100071cc:	52                   	push   edx
100071cd:	6a 00                	push   0x0
100071cf:	6a 00                	push   0x0
100071d1:	83 ec 20             	sub    esp,0x20
100071d4:	89 e0                	mov    eax,esp
100071d6:	89 c3                	mov    ebx,eax
100071d8:	8d 45 0c             	lea    eax,[ebp+0xc]
100071db:	ba 08 00 00 00       	mov    edx,0x8
100071e0:	89 df                	mov    edi,ebx
100071e2:	89 c6                	mov    esi,eax
100071e4:	89 d1                	mov    ecx,edx
100071e6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100071e8:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
100071eb:	e8 fc ff ff ff       	call   100071ec <NWindow::paintHandler(NFrame::Graphics)+0x120>	100071ec: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
100071f0:	83 c4 40             	add    esp,0x40
100071f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100071f6:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
100071f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100071fc:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
10007202:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007205:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
10007208:	8d 4a e8             	lea    ecx,[edx-0x18]
1000720b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000720e:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
10007214:	29 d1                	sub    ecx,edx
10007216:	89 ca                	mov    edx,ecx
10007218:	83 ec 08             	sub    esp,0x8
1000721b:	68 ff ff ff 00       	push   0xffffff
10007220:	50                   	push   eax
10007221:	6a 18                	push   0x18
10007223:	6a 00                	push   0x0
10007225:	52                   	push   edx
10007226:	83 ec 20             	sub    esp,0x20
10007229:	89 e0                	mov    eax,esp
1000722b:	89 c3                	mov    ebx,eax
1000722d:	8d 45 0c             	lea    eax,[ebp+0xc]
10007230:	ba 08 00 00 00       	mov    edx,0x8
10007235:	89 df                	mov    edi,ebx
10007237:	89 c6                	mov    esi,eax
10007239:	89 d1                	mov    ecx,edx
1000723b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000723d:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007240:	e8 fc ff ff ff       	call   10007241 <NWindow::paintHandler(NFrame::Graphics)+0x175>	10007241: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007245:	83 c4 40             	add    esp,0x40
10007248:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000724b:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
1000724e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007251:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007254:	83 e0 10             	and    eax,0x10
10007257:	85 c0                	test   eax,eax
10007259:	74 07                	je     10007262 <NWindow::paintHandler(NFrame::Graphics)+0x196>
1000725b:	b8 c0 c0 c0 00       	mov    eax,0xc0c0c0
10007260:	eb 05                	jmp    10007267 <NWindow::paintHandler(NFrame::Graphics)+0x19b>
10007262:	b8 00 00 00 00       	mov    eax,0x0
10007267:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000726a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
1000726d:	8d 4a e8             	lea    ecx,[edx-0x18]
10007270:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007273:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
10007279:	29 d1                	sub    ecx,edx
1000727b:	89 ca                	mov    edx,ecx
1000727d:	83 c2 08             	add    edx,0x8
10007280:	83 ec 08             	sub    esp,0x8
10007283:	6a ff                	push   0xffffffff
10007285:	50                   	push   eax
10007286:	68 e0 82 00 10       	push   0x100082e0	10007287: R_386_32	.text
1000728b:	6a 06                	push   0x6
1000728d:	52                   	push   edx
1000728e:	83 ec 20             	sub    esp,0x20
10007291:	89 e0                	mov    eax,esp
10007293:	89 c3                	mov    ebx,eax
10007295:	8d 45 0c             	lea    eax,[ebp+0xc]
10007298:	ba 08 00 00 00       	mov    edx,0x8
1000729d:	89 df                	mov    edi,ebx
1000729f:	89 c6                	mov    esi,eax
100072a1:	89 d1                	mov    ecx,edx
100072a3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100072a5:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
100072a8:	e8 fc ff ff ff       	call   100072a9 <NWindow::paintHandler(NFrame::Graphics)+0x1dd>	100072a9: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
100072ad:	83 c4 40             	add    esp,0x40
100072b0:	eb 52                	jmp    10007304 <NWindow::paintHandler(NFrame::Graphics)+0x238>
100072b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100072b5:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
100072b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100072bb:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
100072c1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100072c4:	8b 4a 18             	mov    ecx,DWORD PTR [edx+0x18]
100072c7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100072ca:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
100072d0:	29 d1                	sub    ecx,edx
100072d2:	89 ca                	mov    edx,ecx
100072d4:	83 ec 08             	sub    esp,0x8
100072d7:	68 ff ff ff 00       	push   0xffffff
100072dc:	50                   	push   eax
100072dd:	52                   	push   edx
100072de:	6a 00                	push   0x0
100072e0:	6a 00                	push   0x0
100072e2:	83 ec 20             	sub    esp,0x20
100072e5:	89 e0                	mov    eax,esp
100072e7:	89 c3                	mov    ebx,eax
100072e9:	8d 45 0c             	lea    eax,[ebp+0xc]
100072ec:	ba 08 00 00 00       	mov    edx,0x8
100072f1:	89 df                	mov    edi,ebx
100072f3:	89 c6                	mov    esi,eax
100072f5:	89 d1                	mov    ecx,edx
100072f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100072f9:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
100072fc:	e8 fc ff ff ff       	call   100072fd <NWindow::paintHandler(NFrame::Graphics)+0x231>	100072fd: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007301:	83 c4 40             	add    esp,0x40
10007304:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007307:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
1000730a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000730d:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
10007313:	83 ec 08             	sub    esp,0x8
10007316:	6a ff                	push   0xffffffff
10007318:	6a 00                	push   0x0
1000731a:	50                   	push   eax
1000731b:	6a 06                	push   0x6
1000731d:	6a 08                	push   0x8
1000731f:	83 ec 20             	sub    esp,0x20
10007322:	89 e0                	mov    eax,esp
10007324:	89 c3                	mov    ebx,eax
10007326:	8d 45 0c             	lea    eax,[ebp+0xc]
10007329:	ba 08 00 00 00       	mov    edx,0x8
1000732e:	89 df                	mov    edi,ebx
10007330:	89 c6                	mov    esi,eax
10007332:	89 d1                	mov    ecx,edx
10007334:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007336:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007339:	e8 fc ff ff ff       	call   1000733a <NWindow::paintHandler(NFrame::Graphics)+0x26e>	1000733a: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
1000733e:	83 c4 40             	add    esp,0x40
10007341:	eb 30                	jmp    10007373 <NWindow::paintHandler(NFrame::Graphics)+0x2a7>
10007343:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007346:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007349:	83 ec 08             	sub    esp,0x8
1000734c:	68 c0 c0 c0 00       	push   0xc0c0c0
10007351:	83 ec 20             	sub    esp,0x20
10007354:	89 e0                	mov    eax,esp
10007356:	89 c3                	mov    ebx,eax
10007358:	8d 45 0c             	lea    eax,[ebp+0xc]
1000735b:	ba 08 00 00 00       	mov    edx,0x8
10007360:	89 df                	mov    edi,ebx
10007362:	89 c6                	mov    esi,eax
10007364:	89 d1                	mov    ecx,edx
10007366:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007368:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
1000736b:	e8 fc ff ff ff       	call   1000736c <NWindow::paintHandler(NFrame::Graphics)+0x2a0>	1000736c: R_386_PC32	NFrame::paintSolid(NFrame::Graphics, unsigned int)
10007370:	83 c4 30             	add    esp,0x30
10007373:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007376:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007379:	83 e0 04             	and    eax,0x4
1000737c:	85 c0                	test   eax,eax
1000737e:	0f 85 bd 01 00 00    	jne    10007541 <NWindow::paintHandler(NFrame::Graphics)+0x475>
10007384:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007387:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
1000738a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000738d:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10007390:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007393:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
10007399:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000739c:	8b 59 18             	mov    ebx,DWORD PTR [ecx+0x18]
1000739f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100073a2:	8b 89 88 00 00 00    	mov    ecx,DWORD PTR [ecx+0x88]
100073a8:	29 cb                	sub    ebx,ecx
100073aa:	89 d9                	mov    ecx,ebx
100073ac:	83 ec 08             	sub    esp,0x8
100073af:	6a 00                	push   0x0
100073b1:	52                   	push   edx
100073b2:	50                   	push   eax
100073b3:	6a 00                	push   0x0
100073b5:	51                   	push   ecx
100073b6:	83 ec 20             	sub    esp,0x20
100073b9:	89 e0                	mov    eax,esp
100073bb:	89 c3                	mov    ebx,eax
100073bd:	8d 45 0c             	lea    eax,[ebp+0xc]
100073c0:	ba 08 00 00 00       	mov    edx,0x8
100073c5:	89 df                	mov    edi,ebx
100073c7:	89 c6                	mov    esi,eax
100073c9:	89 d1                	mov    ecx,edx
100073cb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100073cd:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
100073d0:	e8 fc ff ff ff       	call   100073d1 <NWindow::paintHandler(NFrame::Graphics)+0x305>	100073d1: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
100073d5:	83 c4 40             	add    esp,0x40
100073d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100073db:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
100073de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100073e1:	8b 90 88 00 00 00    	mov    edx,DWORD PTR [eax+0x88]
100073e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100073ea:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
100073ed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100073f0:	8b 59 1c             	mov    ebx,DWORD PTR [ecx+0x1c]
100073f3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100073f6:	8b 89 88 00 00 00    	mov    ecx,DWORD PTR [ecx+0x88]
100073fc:	29 cb                	sub    ebx,ecx
100073fe:	89 d9                	mov    ecx,ebx
10007400:	83 ec 08             	sub    esp,0x8
10007403:	6a 00                	push   0x0
10007405:	52                   	push   edx
10007406:	50                   	push   eax
10007407:	51                   	push   ecx
10007408:	6a 00                	push   0x0
1000740a:	83 ec 20             	sub    esp,0x20
1000740d:	89 e0                	mov    eax,esp
1000740f:	89 c3                	mov    ebx,eax
10007411:	8d 45 0c             	lea    eax,[ebp+0xc]
10007414:	ba 08 00 00 00       	mov    edx,0x8
10007419:	89 df                	mov    edi,ebx
1000741b:	89 c6                	mov    esi,eax
1000741d:	89 d1                	mov    ecx,edx
1000741f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007421:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007424:	e8 fc ff ff ff       	call   10007425 <NWindow::paintHandler(NFrame::Graphics)+0x359>	10007425: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007429:	83 c4 40             	add    esp,0x40
1000742c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000742f:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007435:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10007438:	83 ec 08             	sub    esp,0x8
1000743b:	6a 00                	push   0x0
1000743d:	6a 01                	push   0x1
1000743f:	50                   	push   eax
10007440:	6a 00                	push   0x0
10007442:	6a 00                	push   0x0
10007444:	83 ec 20             	sub    esp,0x20
10007447:	89 e0                	mov    eax,esp
10007449:	89 c3                	mov    ebx,eax
1000744b:	8d 45 0c             	lea    eax,[ebp+0xc]
1000744e:	ba 08 00 00 00       	mov    edx,0x8
10007453:	89 df                	mov    edi,ebx
10007455:	89 c6                	mov    esi,eax
10007457:	89 d1                	mov    ecx,edx
10007459:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000745b:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
1000745e:	e8 fc ff ff ff       	call   1000745f <NWindow::paintHandler(NFrame::Graphics)+0x393>	1000745f: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007463:	83 c4 40             	add    esp,0x40
10007466:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007469:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
1000746c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000746f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
10007472:	83 ec 08             	sub    esp,0x8
10007475:	6a 00                	push   0x0
10007477:	50                   	push   eax
10007478:	6a 01                	push   0x1
1000747a:	6a 00                	push   0x0
1000747c:	6a 00                	push   0x0
1000747e:	83 ec 20             	sub    esp,0x20
10007481:	89 e0                	mov    eax,esp
10007483:	89 c3                	mov    ebx,eax
10007485:	8d 45 0c             	lea    eax,[ebp+0xc]
10007488:	ba 08 00 00 00       	mov    edx,0x8
1000748d:	89 df                	mov    edi,ebx
1000748f:	89 c6                	mov    esi,eax
10007491:	89 d1                	mov    ecx,edx
10007493:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007495:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007498:	e8 fc ff ff ff       	call   10007499 <NWindow::paintHandler(NFrame::Graphics)+0x3cd>	10007499: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
1000749d:	83 c4 40             	add    esp,0x40
100074a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100074a3:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
100074a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100074a9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
100074ac:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100074af:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
100074b2:	8d 4a ff             	lea    ecx,[edx-0x1]
100074b5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100074b8:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
100074be:	29 d1                	sub    ecx,edx
100074c0:	89 ca                	mov    edx,ecx
100074c2:	83 ec 08             	sub    esp,0x8
100074c5:	6a 00                	push   0x0
100074c7:	6a 01                	push   0x1
100074c9:	50                   	push   eax
100074ca:	52                   	push   edx
100074cb:	6a 00                	push   0x0
100074cd:	83 ec 20             	sub    esp,0x20
100074d0:	89 e0                	mov    eax,esp
100074d2:	89 c3                	mov    ebx,eax
100074d4:	8d 45 0c             	lea    eax,[ebp+0xc]
100074d7:	ba 08 00 00 00       	mov    edx,0x8
100074dc:	89 df                	mov    edi,ebx
100074de:	89 c6                	mov    esi,eax
100074e0:	89 d1                	mov    ecx,edx
100074e2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100074e4:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
100074e7:	e8 fc ff ff ff       	call   100074e8 <NWindow::paintHandler(NFrame::Graphics)+0x41c>	100074e8: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
100074ec:	83 c4 40             	add    esp,0x40
100074ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100074f2:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
100074f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100074f8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
100074fb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100074fe:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
10007501:	8d 4a ff             	lea    ecx,[edx-0x1]
10007504:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007507:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
1000750d:	29 d1                	sub    ecx,edx
1000750f:	89 ca                	mov    edx,ecx
10007511:	83 ec 08             	sub    esp,0x8
10007514:	6a 00                	push   0x0
10007516:	50                   	push   eax
10007517:	6a 01                	push   0x1
10007519:	6a 00                	push   0x0
1000751b:	52                   	push   edx
1000751c:	83 ec 20             	sub    esp,0x20
1000751f:	89 e0                	mov    eax,esp
10007521:	89 c3                	mov    ebx,eax
10007523:	8d 45 0c             	lea    eax,[ebp+0xc]
10007526:	ba 08 00 00 00       	mov    edx,0x8
1000752b:	89 df                	mov    edi,ebx
1000752d:	89 c6                	mov    esi,eax
1000752f:	89 d1                	mov    ecx,edx
10007531:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007533:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007536:	e8 fc ff ff ff       	call   10007537 <NWindow::paintHandler(NFrame::Graphics)+0x46b>	10007537: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
1000753b:	83 c4 40             	add    esp,0x40
1000753e:	eb 01                	jmp    10007541 <NWindow::paintHandler(NFrame::Graphics)+0x475>
10007540:	90                   	nop
10007541:	8d 65 f4             	lea    esp,[ebp-0xc]
10007544:	5b                   	pop    ebx
10007545:	5e                   	pop    esi
10007546:	5f                   	pop    edi
10007547:	5d                   	pop    ebp
10007548:	c3                   	ret    
10007549:	90                   	nop

1000754a <NDesktopWindow::NDesktopWindow(int, int, int, int, int)>:
1000754a:	55                   	push   ebp
1000754b:	89 e5                	mov    ebp,esp
1000754d:	83 ec 08             	sub    esp,0x8
10007550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007553:	83 ec 0c             	sub    esp,0xc
10007556:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10007559:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000755c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000755f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10007562:	50                   	push   eax
10007563:	e8 fc ff ff ff       	call   10007564 <NDesktopWindow::NDesktopWindow(int, int, int, int, int)+0x1a>	10007564: R_386_PC32	NFrame::NFrame(int, int, int, int)
10007568:	83 c4 20             	add    esp,0x20
1000756b:	ba 08 00 00 00       	mov    edx,0x8	1000756c: R_386_32	vtable for NDesktopWindow
10007570:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007573:	89 10                	mov    DWORD PTR [eax],edx
10007575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007578:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
1000757b:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
10007581:	90                   	nop
10007582:	c9                   	leave  
10007583:	c3                   	ret    

10007584 <NDesktopWindow::paintHandler(NFrame::Graphics)>:
10007584:	55                   	push   ebp
10007585:	89 e5                	mov    ebp,esp
10007587:	57                   	push   edi
10007588:	56                   	push   esi
10007589:	53                   	push   ebx
1000758a:	83 ec 1c             	sub    esp,0x1c
1000758d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007590:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10007593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007596:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
1000759c:	89 c1                	mov    ecx,eax
1000759e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100075a1:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
100075a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100075a7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
100075aa:	83 ec 08             	sub    esp,0x8
100075ad:	51                   	push   ecx
100075ae:	52                   	push   edx
100075af:	50                   	push   eax
100075b0:	6a 00                	push   0x0
100075b2:	6a 00                	push   0x0
100075b4:	83 ec 20             	sub    esp,0x20
100075b7:	89 e0                	mov    eax,esp
100075b9:	89 c3                	mov    ebx,eax
100075bb:	8d 45 0c             	lea    eax,[ebp+0xc]
100075be:	ba 08 00 00 00       	mov    edx,0x8
100075c3:	89 df                	mov    edi,ebx
100075c5:	89 c6                	mov    esi,eax
100075c7:	89 d1                	mov    ecx,edx
100075c9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100075cb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
100075ce:	e8 fc ff ff ff       	call   100075cf <NDesktopWindow::paintHandler(NFrame::Graphics)+0x4b>	100075cf: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
100075d3:	83 c4 40             	add    esp,0x40
100075d6:	90                   	nop
100075d7:	8d 65 f4             	lea    esp,[ebp-0xc]
100075da:	5b                   	pop    ebx
100075db:	5e                   	pop    esi
100075dc:	5f                   	pop    edi
100075dd:	5d                   	pop    ebp
100075de:	c3                   	ret    
100075df:	90                   	nop

100075e0 <NButton::NButton(int, int, int, int)>:
100075e0:	55                   	push   ebp
100075e1:	89 e5                	mov    ebp,esp
100075e3:	83 ec 08             	sub    esp,0x8
100075e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100075e9:	83 ec 0c             	sub    esp,0xc
100075ec:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100075ef:	ff 75 14             	push   DWORD PTR [ebp+0x14]
100075f2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
100075f5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100075f8:	50                   	push   eax
100075f9:	e8 fc ff ff ff       	call   100075fa <NButton::NButton(int, int, int, int)+0x1a>	100075fa: R_386_PC32	NFrame::NFrame(int, int, int, int)
100075fe:	83 c4 20             	add    esp,0x20
10007601:	ba 08 00 00 00       	mov    edx,0x8	10007602: R_386_32	vtable for NButton
10007606:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007609:	89 10                	mov    DWORD PTR [eax],edx
1000760b:	90                   	nop
1000760c:	c9                   	leave  
1000760d:	c3                   	ret    

1000760e <NButton::paintHandler(NFrame::Graphics)>:
1000760e:	55                   	push   ebp
1000760f:	89 e5                	mov    ebp,esp
10007611:	57                   	push   edi
10007612:	56                   	push   esi
10007613:	53                   	push   ebx
10007614:	81 ec 4c 03 00 00    	sub    esp,0x34c
1000761a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000761d:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
10007623:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007626:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10007629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000762c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
1000762f:	83 ec 08             	sub    esp,0x8
10007632:	68 c0 c0 c0 00       	push   0xc0c0c0
10007637:	52                   	push   edx
10007638:	50                   	push   eax
10007639:	6a 00                	push   0x0
1000763b:	6a 00                	push   0x0
1000763d:	83 ec 20             	sub    esp,0x20
10007640:	89 e0                	mov    eax,esp
10007642:	89 c3                	mov    ebx,eax
10007644:	8d 45 0c             	lea    eax,[ebp+0xc]
10007647:	ba 08 00 00 00       	mov    edx,0x8
1000764c:	89 df                	mov    edi,ebx
1000764e:	89 c6                	mov    esi,eax
10007650:	89 d1                	mov    ecx,edx
10007652:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007654:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
1000765a:	e8 fc ff ff ff       	call   1000765b <NButton::paintHandler(NFrame::Graphics)+0x4d>	1000765b: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
1000765f:	83 c4 40             	add    esp,0x40
10007662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007665:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
1000766b:	6a 00                	push   0x0
1000766d:	6a 0c                	push   0xc
1000766f:	68 e2 82 00 10       	push   0x100082e2	10007670: R_386_32	.text
10007674:	8d 85 b8 fc ff ff    	lea    eax,[ebp-0x348]
1000767a:	50                   	push   eax
1000767b:	e8 fc ff ff ff       	call   1000767c <NButton::paintHandler(NFrame::Graphics)+0x6e>	1000767c: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
10007680:	83 c4 10             	add    esp,0x10
10007683:	83 ec 08             	sub    esp,0x8
10007686:	81 ec 88 00 00 00    	sub    esp,0x88
1000768c:	89 e0                	mov    eax,esp
1000768e:	89 c3                	mov    ebx,eax
10007690:	8d 85 b8 fc ff ff    	lea    eax,[ebp-0x348]
10007696:	ba 22 00 00 00       	mov    edx,0x22
1000769b:	89 df                	mov    edi,ebx
1000769d:	89 c6                	mov    esi,eax
1000769f:	89 d1                	mov    ecx,edx
100076a1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100076a3:	e8 fc ff ff ff       	call   100076a4 <NButton::paintHandler(NFrame::Graphics)+0x96>	100076a4: R_386_PC32	getFontHandle(FontStyle)
100076a8:	81 c4 90 00 00 00    	add    esp,0x90
100076ae:	83 ec 08             	sub    esp,0x8
100076b1:	50                   	push   eax
100076b2:	6a 00                	push   0x0
100076b4:	68 e8 82 00 10       	push   0x100082e8	100076b5: R_386_32	.text
100076b9:	6a 00                	push   0x0
100076bb:	6a 00                	push   0x0
100076bd:	83 ec 20             	sub    esp,0x20
100076c0:	89 e0                	mov    eax,esp
100076c2:	89 c3                	mov    ebx,eax
100076c4:	8d 45 0c             	lea    eax,[ebp+0xc]
100076c7:	ba 08 00 00 00       	mov    edx,0x8
100076cc:	89 df                	mov    edi,ebx
100076ce:	89 c6                	mov    esi,eax
100076d0:	89 d1                	mov    ecx,edx
100076d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100076d4:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
100076da:	e8 fc ff ff ff       	call   100076db <NButton::paintHandler(NFrame::Graphics)+0xcd>	100076db: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
100076df:	83 c4 40             	add    esp,0x40
100076e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100076e5:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
100076eb:	6a 00                	push   0x0
100076ed:	6a 0c                	push   0xc
100076ef:	68 e2 82 00 10       	push   0x100082e2	100076f0: R_386_32	.text
100076f4:	8d 85 40 fd ff ff    	lea    eax,[ebp-0x2c0]
100076fa:	50                   	push   eax
100076fb:	e8 fc ff ff ff       	call   100076fc <NButton::paintHandler(NFrame::Graphics)+0xee>	100076fc: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
10007700:	83 c4 10             	add    esp,0x10
10007703:	83 ec 08             	sub    esp,0x8
10007706:	81 ec 88 00 00 00    	sub    esp,0x88
1000770c:	89 e0                	mov    eax,esp
1000770e:	89 c3                	mov    ebx,eax
10007710:	8d 85 40 fd ff ff    	lea    eax,[ebp-0x2c0]
10007716:	ba 22 00 00 00       	mov    edx,0x22
1000771b:	89 df                	mov    edi,ebx
1000771d:	89 c6                	mov    esi,eax
1000771f:	89 d1                	mov    ecx,edx
10007721:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007723:	e8 fc ff ff ff       	call   10007724 <NButton::paintHandler(NFrame::Graphics)+0x116>	10007724: R_386_PC32	getFontHandle(FontStyle)
10007728:	81 c4 90 00 00 00    	add    esp,0x90
1000772e:	83 ec 08             	sub    esp,0x8
10007731:	50                   	push   eax
10007732:	6a 00                	push   0x0
10007734:	68 14 83 00 10       	push   0x10008314	10007735: R_386_32	.text
10007739:	6a 19                	push   0x19
1000773b:	6a 00                	push   0x0
1000773d:	83 ec 20             	sub    esp,0x20
10007740:	89 e0                	mov    eax,esp
10007742:	89 c3                	mov    ebx,eax
10007744:	8d 45 0c             	lea    eax,[ebp+0xc]
10007747:	ba 08 00 00 00       	mov    edx,0x8
1000774c:	89 df                	mov    edi,ebx
1000774e:	89 c6                	mov    esi,eax
10007750:	89 d1                	mov    ecx,edx
10007752:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007754:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
1000775a:	e8 fc ff ff ff       	call   1000775b <NButton::paintHandler(NFrame::Graphics)+0x14d>	1000775b: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
1000775f:	83 c4 40             	add    esp,0x40
10007762:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007765:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
1000776b:	6a 00                	push   0x0
1000776d:	6a 0c                	push   0xc
1000776f:	68 e2 82 00 10       	push   0x100082e2	10007770: R_386_32	.text
10007774:	8d 85 c8 fd ff ff    	lea    eax,[ebp-0x238]
1000777a:	50                   	push   eax
1000777b:	e8 fc ff ff ff       	call   1000777c <NButton::paintHandler(NFrame::Graphics)+0x16e>	1000777c: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
10007780:	83 c4 10             	add    esp,0x10
10007783:	83 ec 08             	sub    esp,0x8
10007786:	81 ec 88 00 00 00    	sub    esp,0x88
1000778c:	89 e0                	mov    eax,esp
1000778e:	89 c3                	mov    ebx,eax
10007790:	8d 85 c8 fd ff ff    	lea    eax,[ebp-0x238]
10007796:	ba 22 00 00 00       	mov    edx,0x22
1000779b:	89 df                	mov    edi,ebx
1000779d:	89 c6                	mov    esi,eax
1000779f:	89 d1                	mov    ecx,edx
100077a1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100077a3:	e8 fc ff ff ff       	call   100077a4 <NButton::paintHandler(NFrame::Graphics)+0x196>	100077a4: R_386_PC32	getFontHandle(FontStyle)
100077a8:	81 c4 90 00 00 00    	add    esp,0x90
100077ae:	83 ec 08             	sub    esp,0x8
100077b1:	50                   	push   eax
100077b2:	6a 00                	push   0x0
100077b4:	68 f4 83 00 10       	push   0x100083f4	100077b5: R_386_32	.text
100077b9:	6a 32                	push   0x32
100077bb:	6a 00                	push   0x0
100077bd:	83 ec 20             	sub    esp,0x20
100077c0:	89 e0                	mov    eax,esp
100077c2:	89 c3                	mov    ebx,eax
100077c4:	8d 45 0c             	lea    eax,[ebp+0xc]
100077c7:	ba 08 00 00 00       	mov    edx,0x8
100077cc:	89 df                	mov    edi,ebx
100077ce:	89 c6                	mov    esi,eax
100077d0:	89 d1                	mov    ecx,edx
100077d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100077d4:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
100077da:	e8 fc ff ff ff       	call   100077db <NButton::paintHandler(NFrame::Graphics)+0x1cd>	100077db: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
100077df:	83 c4 40             	add    esp,0x40
100077e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100077e5:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
100077eb:	6a 00                	push   0x0
100077ed:	6a 0c                	push   0xc
100077ef:	68 e2 82 00 10       	push   0x100082e2	100077f0: R_386_32	.text
100077f4:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
100077fa:	50                   	push   eax
100077fb:	e8 fc ff ff ff       	call   100077fc <NButton::paintHandler(NFrame::Graphics)+0x1ee>	100077fc: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
10007800:	83 c4 10             	add    esp,0x10
10007803:	83 ec 08             	sub    esp,0x8
10007806:	81 ec 88 00 00 00    	sub    esp,0x88
1000780c:	89 e0                	mov    eax,esp
1000780e:	89 c3                	mov    ebx,eax
10007810:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10007816:	ba 22 00 00 00       	mov    edx,0x22
1000781b:	89 df                	mov    edi,ebx
1000781d:	89 c6                	mov    esi,eax
1000781f:	89 d1                	mov    ecx,edx
10007821:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007823:	e8 fc ff ff ff       	call   10007824 <NButton::paintHandler(NFrame::Graphics)+0x216>	10007824: R_386_PC32	getFontHandle(FontStyle)
10007828:	81 c4 90 00 00 00    	add    esp,0x90
1000782e:	83 ec 08             	sub    esp,0x8
10007831:	50                   	push   eax
10007832:	6a 00                	push   0x0
10007834:	68 30 84 00 10       	push   0x10008430	10007835: R_386_32	.text
10007839:	6a 4b                	push   0x4b
1000783b:	6a 00                	push   0x0
1000783d:	83 ec 20             	sub    esp,0x20
10007840:	89 e0                	mov    eax,esp
10007842:	89 c3                	mov    ebx,eax
10007844:	8d 45 0c             	lea    eax,[ebp+0xc]
10007847:	ba 08 00 00 00       	mov    edx,0x8
1000784c:	89 df                	mov    edi,ebx
1000784e:	89 c6                	mov    esi,eax
10007850:	89 d1                	mov    ecx,edx
10007852:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007854:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
1000785a:	e8 fc ff ff ff       	call   1000785b <NButton::paintHandler(NFrame::Graphics)+0x24d>	1000785b: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
1000785f:	83 c4 40             	add    esp,0x40
10007862:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007865:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
1000786b:	6a 00                	push   0x0
1000786d:	6a 10                	push   0x10
1000786f:	68 e2 82 00 10       	push   0x100082e2	10007870: R_386_32	.text
10007874:	8d 85 d8 fe ff ff    	lea    eax,[ebp-0x128]
1000787a:	50                   	push   eax
1000787b:	e8 fc ff ff ff       	call   1000787c <NButton::paintHandler(NFrame::Graphics)+0x26e>	1000787c: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
10007880:	83 c4 10             	add    esp,0x10
10007883:	83 ec 08             	sub    esp,0x8
10007886:	81 ec 88 00 00 00    	sub    esp,0x88
1000788c:	89 e0                	mov    eax,esp
1000788e:	89 c3                	mov    ebx,eax
10007890:	8d 85 d8 fe ff ff    	lea    eax,[ebp-0x128]
10007896:	ba 22 00 00 00       	mov    edx,0x22
1000789b:	89 df                	mov    edi,ebx
1000789d:	89 c6                	mov    esi,eax
1000789f:	89 d1                	mov    ecx,edx
100078a1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100078a3:	e8 fc ff ff ff       	call   100078a4 <NButton::paintHandler(NFrame::Graphics)+0x296>	100078a4: R_386_PC32	getFontHandle(FontStyle)
100078a8:	81 c4 90 00 00 00    	add    esp,0x90
100078ae:	83 ec 08             	sub    esp,0x8
100078b1:	50                   	push   eax
100078b2:	6a 00                	push   0x0
100078b4:	68 e8 82 00 10       	push   0x100082e8	100078b5: R_386_32	.text
100078b9:	6a 64                	push   0x64
100078bb:	6a 00                	push   0x0
100078bd:	83 ec 20             	sub    esp,0x20
100078c0:	89 e0                	mov    eax,esp
100078c2:	89 c3                	mov    ebx,eax
100078c4:	8d 45 0c             	lea    eax,[ebp+0xc]
100078c7:	ba 08 00 00 00       	mov    edx,0x8
100078cc:	89 df                	mov    edi,ebx
100078ce:	89 c6                	mov    esi,eax
100078d0:	89 d1                	mov    ecx,edx
100078d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100078d4:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
100078da:	e8 fc ff ff ff       	call   100078db <NButton::paintHandler(NFrame::Graphics)+0x2cd>	100078db: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
100078df:	83 c4 40             	add    esp,0x40
100078e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100078e5:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
100078eb:	6a 00                	push   0x0
100078ed:	6a 18                	push   0x18
100078ef:	68 e2 82 00 10       	push   0x100082e2	100078f0: R_386_32	.text
100078f4:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
100078fa:	50                   	push   eax
100078fb:	e8 fc ff ff ff       	call   100078fc <NButton::paintHandler(NFrame::Graphics)+0x2ee>	100078fc: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
10007900:	83 c4 10             	add    esp,0x10
10007903:	83 ec 08             	sub    esp,0x8
10007906:	81 ec 88 00 00 00    	sub    esp,0x88
1000790c:	89 e0                	mov    eax,esp
1000790e:	89 c3                	mov    ebx,eax
10007910:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
10007916:	ba 22 00 00 00       	mov    edx,0x22
1000791b:	89 df                	mov    edi,ebx
1000791d:	89 c6                	mov    esi,eax
1000791f:	89 d1                	mov    ecx,edx
10007921:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007923:	e8 fc ff ff ff       	call   10007924 <NButton::paintHandler(NFrame::Graphics)+0x316>	10007924: R_386_PC32	getFontHandle(FontStyle)
10007928:	81 c4 90 00 00 00    	add    esp,0x90
1000792e:	83 ec 08             	sub    esp,0x8
10007931:	50                   	push   eax
10007932:	6a 00                	push   0x0
10007934:	68 e8 82 00 10       	push   0x100082e8	10007935: R_386_32	.text
10007939:	68 82 00 00 00       	push   0x82
1000793e:	6a 00                	push   0x0
10007940:	83 ec 20             	sub    esp,0x20
10007943:	89 e0                	mov    eax,esp
10007945:	89 c3                	mov    ebx,eax
10007947:	8d 45 0c             	lea    eax,[ebp+0xc]
1000794a:	ba 08 00 00 00       	mov    edx,0x8
1000794f:	89 df                	mov    edi,ebx
10007951:	89 c6                	mov    esi,eax
10007953:	89 d1                	mov    ecx,edx
10007955:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007957:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
1000795d:	e8 fc ff ff ff       	call   1000795e <NButton::paintHandler(NFrame::Graphics)+0x350>	1000795e: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
10007962:	83 c4 40             	add    esp,0x40
10007965:	90                   	nop
10007966:	8d 65 f4             	lea    esp,[ebp-0xc]
10007969:	5b                   	pop    ebx
1000796a:	5e                   	pop    esi
1000796b:	5f                   	pop    edi
1000796c:	5d                   	pop    ebp
1000796d:	c3                   	ret    

1000796e <LinkedList2<NFrame*>::LinkedList2()>:
1000796e:	55                   	push   ebp
1000796f:	89 e5                	mov    ebp,esp
10007971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007974:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000797a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000797d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10007984:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007987:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
1000798e:	90                   	nop
1000798f:	5d                   	pop    ebp
10007990:	c3                   	ret    
10007991:	90                   	nop

10007992 <LinkedList2<NFrame*>::prependNode(NFrame*)>:
10007992:	55                   	push   ebp
10007993:	89 e5                	mov    ebp,esp
10007995:	83 ec 18             	sub    esp,0x18
10007998:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
1000799f:	83 ec 0c             	sub    esp,0xc
100079a2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100079a5:	e8 fc ff ff ff       	call   100079a6 <LinkedList2<NFrame*>::prependNode(NFrame*)+0x14>	100079a6: R_386_PC32	malloc
100079aa:	83 c4 10             	add    esp,0x10
100079ad:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100079b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100079b3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100079b6:	89 10                	mov    DWORD PTR [eax],edx
100079b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100079bb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
100079be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100079c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100079c4:	83 ec 0c             	sub    esp,0xc
100079c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100079ca:	e8 fc ff ff ff       	call   100079cb <LinkedList2<NFrame*>::prependNode(NFrame*)+0x39>	100079cb: R_386_PC32	LinkedList2<NFrame*>::isEmpty()
100079cf:	83 c4 10             	add    esp,0x10
100079d2:	84 c0                	test   al,al
100079d4:	74 09                	je     100079df <LinkedList2<NFrame*>::prependNode(NFrame*)+0x4d>
100079d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100079d9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100079dc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
100079df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100079e2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100079e5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100079e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100079eb:	8b 00                	mov    eax,DWORD PTR [eax]
100079ed:	8d 50 01             	lea    edx,[eax+0x1]
100079f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100079f3:	89 10                	mov    DWORD PTR [eax],edx
100079f5:	90                   	nop
100079f6:	c9                   	leave  
100079f7:	c3                   	ret    

100079f8 <LinkedList2<NFrame*>::isEmpty()>:
100079f8:	55                   	push   ebp
100079f9:	89 e5                	mov    ebp,esp
100079fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100079fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10007a01:	85 c0                	test   eax,eax
10007a03:	0f 94 c0             	sete   al
10007a06:	5d                   	pop    ebp
10007a07:	c3                   	ret    

10007a08 <Region::Region(int, int, int, int)>:
10007a08:	55                   	push   ebp
10007a09:	89 e5                	mov    ebp,esp
10007a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a0e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10007a11:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10007a14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a17:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10007a1a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10007a1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a20:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10007a26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a29:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
10007a30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a33:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10007a36:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
10007a39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a3c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10007a3f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
10007a42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a45:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
10007a49:	90                   	nop
10007a4a:	5d                   	pop    ebp
10007a4b:	c3                   	ret    

10007a4c <LinkedList2<Font*>::LinkedList2()>:
10007a4c:	55                   	push   ebp
10007a4d:	89 e5                	mov    ebp,esp
10007a4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10007a58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a5b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10007a62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a65:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10007a6c:	90                   	nop
10007a6d:	5d                   	pop    ebp
10007a6e:	c3                   	ret    
10007a6f:	90                   	nop

10007a70 <LinkedList2<Font*>::length()>:
10007a70:	55                   	push   ebp
10007a71:	89 e5                	mov    ebp,esp
10007a73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a76:	8b 00                	mov    eax,DWORD PTR [eax]
10007a78:	5d                   	pop    ebp
10007a79:	c3                   	ret    

10007a7a <LinkedList2<Font*>::appendNode(Font*)>:
10007a7a:	55                   	push   ebp
10007a7b:	89 e5                	mov    ebp,esp
10007a7d:	83 ec 18             	sub    esp,0x18
10007a80:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10007a87:	83 ec 0c             	sub    esp,0xc
10007a8a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007a8d:	e8 fc ff ff ff       	call   10007a8e <LinkedList2<Font*>::appendNode(Font*)+0x14>	10007a8e: R_386_PC32	LinkedList2<Font*>::isEmpty()
10007a92:	83 c4 10             	add    esp,0x10
10007a95:	84 c0                	test   al,al
10007a97:	74 23                	je     10007abc <LinkedList2<Font*>::appendNode(Font*)+0x42>
10007a99:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
10007aa0:	83 ec 0c             	sub    esp,0xc
10007aa3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10007aa6:	e8 fc ff ff ff       	call   10007aa7 <LinkedList2<Font*>::appendNode(Font*)+0x2d>	10007aa7: R_386_PC32	malloc
10007aab:	83 c4 10             	add    esp,0x10
10007aae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10007ab1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ab4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10007ab7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10007aba:	eb 2f                	jmp    10007aeb <LinkedList2<Font*>::appendNode(Font*)+0x71>
10007abc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007abf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
10007ac2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10007ac5:	c7 45 ec 08 00 00 00 	mov    DWORD PTR [ebp-0x14],0x8
10007acc:	83 ec 0c             	sub    esp,0xc
10007acf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10007ad2:	e8 fc ff ff ff       	call   10007ad3 <LinkedList2<Font*>::appendNode(Font*)+0x59>	10007ad3: R_386_PC32	malloc
10007ad7:	83 c4 10             	add    esp,0x10
10007ada:	89 c2                	mov    edx,eax
10007adc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10007adf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10007ae2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10007ae5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10007ae8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10007aeb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10007aee:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10007af1:	89 10                	mov    DWORD PTR [eax],edx
10007af3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10007af6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10007afd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b00:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10007b03:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10007b06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b09:	8b 00                	mov    eax,DWORD PTR [eax]
10007b0b:	8d 50 01             	lea    edx,[eax+0x1]
10007b0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b11:	89 10                	mov    DWORD PTR [eax],edx
10007b13:	90                   	nop
10007b14:	c9                   	leave  
10007b15:	c3                   	ret    

10007b16 <LinkedList2<Font*>::isEmpty()>:
10007b16:	55                   	push   ebp
10007b17:	89 e5                	mov    ebp,esp
10007b19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10007b1f:	85 c0                	test   eax,eax
10007b21:	0f 94 c0             	sete   al
10007b24:	5d                   	pop    ebp
10007b25:	c3                   	ret    

10007b26 <NFrame::invalidateRectangularBoundingBox()>:
10007b26:	55                   	push   ebp
10007b27:	89 e5                	mov    ebp,esp
10007b29:	57                   	push   edi
10007b2a:	56                   	push   esi
10007b2b:	53                   	push   ebx
10007b2c:	83 ec 2c             	sub    esp,0x2c
10007b2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b32:	8b 78 1c             	mov    edi,DWORD PTR [eax+0x1c]
10007b35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b38:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
10007b3b:	83 ec 0c             	sub    esp,0xc
10007b3e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007b41:	e8 fc ff ff ff       	call   10007b42 <NFrame::invalidateRectangularBoundingBox()+0x1c>	10007b42: R_386_PC32	NFrame::getAbsY()
10007b46:	83 c4 10             	add    esp,0x10
10007b49:	89 c3                	mov    ebx,eax
10007b4b:	83 ec 0c             	sub    esp,0xc
10007b4e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007b51:	e8 fc ff ff ff       	call   10007b52 <NFrame::invalidateRectangularBoundingBox()+0x2c>	10007b52: R_386_PC32	NFrame::getAbsX()
10007b56:	83 c4 10             	add    esp,0x10
10007b59:	89 c2                	mov    edx,eax
10007b5b:	8d 45 cc             	lea    eax,[ebp-0x34]
10007b5e:	83 ec 0c             	sub    esp,0xc
10007b61:	57                   	push   edi
10007b62:	56                   	push   esi
10007b63:	53                   	push   ebx
10007b64:	52                   	push   edx
10007b65:	50                   	push   eax
10007b66:	e8 fc ff ff ff       	call   10007b67 <NFrame::invalidateRectangularBoundingBox()+0x41>	10007b67: R_386_PC32	createRectangleRegion(int, int, int, int)
10007b6b:	83 c4 1c             	add    esp,0x1c
10007b6e:	83 ec 1c             	sub    esp,0x1c
10007b71:	89 e0                	mov    eax,esp
10007b73:	89 c3                	mov    ebx,eax
10007b75:	8d 45 cc             	lea    eax,[ebp-0x34]
10007b78:	ba 07 00 00 00       	mov    edx,0x7
10007b7d:	89 df                	mov    edi,ebx
10007b7f:	89 c6                	mov    esi,eax
10007b81:	89 d1                	mov    ecx,edx
10007b83:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007b85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007b88:	e8 fc ff ff ff       	call   10007b89 <NFrame::invalidateRectangularBoundingBox()+0x63>	10007b89: R_386_PC32	NFrame::markRegionAsDirty(Region)
10007b8d:	83 c4 20             	add    esp,0x20
10007b90:	90                   	nop
10007b91:	8d 65 f4             	lea    esp,[ebp-0xc]
10007b94:	5b                   	pop    ebx
10007b95:	5e                   	pop    esi
10007b96:	5f                   	pop    edi
10007b97:	5d                   	pop    ebp
10007b98:	c3                   	ret    
10007b99:	90                   	nop

10007b9a <NFrame::raiseChild(NFrame*)>:
10007b9a:	55                   	push   ebp
10007b9b:	89 e5                	mov    ebp,esp
10007b9d:	83 ec 08             	sub    esp,0x8
10007ba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ba3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
10007ba6:	85 c0                	test   eax,eax
10007ba8:	74 0c                	je     10007bb6 <NFrame::raiseChild(NFrame*)+0x1c>
10007baa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007bad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
10007bb0:	8b 00                	mov    eax,DWORD PTR [eax]
10007bb2:	85 c0                	test   eax,eax
10007bb4:	75 04                	jne    10007bba <NFrame::raiseChild(NFrame*)+0x20>
10007bb6:	b0 00                	mov    al,0x0
10007bb8:	eb 39                	jmp    10007bf3 <NFrame::raiseChild(NFrame*)+0x59>
10007bba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007bbd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
10007bc0:	8b 00                	mov    eax,DWORD PTR [eax]
10007bc2:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10007bc5:	75 04                	jne    10007bcb <NFrame::raiseChild(NFrame*)+0x31>
10007bc7:	b0 00                	mov    al,0x0
10007bc9:	eb 28                	jmp    10007bf3 <NFrame::raiseChild(NFrame*)+0x59>
10007bcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007bce:	83 c0 04             	add    eax,0x4
10007bd1:	83 ec 08             	sub    esp,0x8
10007bd4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10007bd7:	50                   	push   eax
10007bd8:	e8 fc ff ff ff       	call   10007bd9 <NFrame::raiseChild(NFrame*)+0x3f>	10007bd9: R_386_PC32	LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)
10007bdd:	83 c4 10             	add    esp,0x10
10007be0:	83 ec 08             	sub    esp,0x8
10007be3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10007be6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007be9:	e8 fc ff ff ff       	call   10007bea <NFrame::raiseChild(NFrame*)+0x50>	10007bea: R_386_PC32	NFrame::addChild(NFrame*)
10007bee:	83 c4 10             	add    esp,0x10
10007bf1:	b0 01                	mov    al,0x1
10007bf3:	c9                   	leave  
10007bf4:	c3                   	ret    
10007bf5:	90                   	nop

10007bf6 <NFrame::getPixelOwner(Video*, int, int, bool)>:
10007bf6:	55                   	push   ebp
10007bf7:	89 e5                	mov    ebp,esp
10007bf9:	57                   	push   edi
10007bfa:	56                   	push   esi
10007bfb:	53                   	push   ebx
10007bfc:	83 ec 4c             	sub    esp,0x4c
10007bff:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10007c02:	88 45 b4             	mov    BYTE PTR [ebp-0x4c],al
10007c05:	8d 45 c0             	lea    eax,[ebp-0x40]
10007c08:	83 ec 08             	sub    esp,0x8
10007c0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007c0e:	50                   	push   eax
10007c0f:	e8 fc ff ff ff       	call   10007c10 <NFrame::getPixelOwner(Video*, int, int, bool)+0x1a>	10007c10: R_386_PC32	NFrame::getDrawRegion()
10007c14:	83 c4 0c             	add    esp,0xc
10007c17:	83 ec 0c             	sub    esp,0xc
10007c1a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007c1d:	e8 fc ff ff ff       	call   10007c1e <NFrame::getPixelOwner(Video*, int, int, bool)+0x28>	10007c1e: R_386_PC32	NFrame::getAbsX()
10007c22:	83 c4 10             	add    esp,0x10
10007c25:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10007c28:	83 ec 0c             	sub    esp,0xc
10007c2b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007c2e:	e8 fc ff ff ff       	call   10007c2f <NFrame::getPixelOwner(Video*, int, int, bool)+0x39>	10007c2f: R_386_PC32	NFrame::getAbsY()
10007c33:	83 c4 10             	add    esp,0x10
10007c36:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10007c39:	83 ec 0c             	sub    esp,0xc
10007c3c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10007c3f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10007c42:	83 ec 1c             	sub    esp,0x1c
10007c45:	89 e0                	mov    eax,esp
10007c47:	89 c3                	mov    ebx,eax
10007c49:	8d 45 c0             	lea    eax,[ebp-0x40]
10007c4c:	ba 07 00 00 00       	mov    edx,0x7
10007c51:	89 df                	mov    edi,ebx
10007c53:	89 c6                	mov    esi,eax
10007c55:	89 d1                	mov    ecx,edx
10007c57:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007c59:	e8 fc ff ff ff       	call   10007c5a <NFrame::getPixelOwner(Video*, int, int, bool)+0x64>	10007c5a: R_386_PC32	isPointInRegion(Region, int, int)
10007c5e:	83 c4 30             	add    esp,0x30
10007c61:	84 c0                	test   al,al
10007c63:	74 17                	je     10007c7c <NFrame::getPixelOwner(Video*, int, int, bool)+0x86>
10007c65:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10007c68:	83 ec 0c             	sub    esp,0xc
10007c6b:	50                   	push   eax
10007c6c:	e8 fc ff ff ff       	call   10007c6d <NFrame::getPixelOwner(Video*, int, int, bool)+0x77>	10007c6d: R_386_PC32	free
10007c71:	83 c4 10             	add    esp,0x10
10007c74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007c77:	e9 83 00 00 00       	jmp    10007cff <NFrame::getPixelOwner(Video*, int, int, bool)+0x109>
10007c7c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10007c7f:	83 ec 0c             	sub    esp,0xc
10007c82:	50                   	push   eax
10007c83:	e8 fc ff ff ff       	call   10007c84 <NFrame::getPixelOwner(Video*, int, int, bool)+0x8e>	10007c84: R_386_PC32	free
10007c88:	83 c4 10             	add    esp,0x10
10007c8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007c8e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
10007c91:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10007c94:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10007c98:	74 60                	je     10007cfa <NFrame::getPixelOwner(Video*, int, int, bool)+0x104>
10007c9a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10007c9d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10007ca0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10007ca3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10007ca6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10007ca9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10007cac:	8b 00                	mov    eax,DWORD PTR [eax]
10007cae:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10007cb1:	84 c0                	test   al,al
10007cb3:	75 42                	jne    10007cf7 <NFrame::getPixelOwner(Video*, int, int, bool)+0x101>
10007cb5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10007cb8:	8b 00                	mov    eax,DWORD PTR [eax]
10007cba:	0f b6 55 b4          	movzx  edx,BYTE PTR [ebp-0x4c]
10007cbe:	83 ec 0c             	sub    esp,0xc
10007cc1:	52                   	push   edx
10007cc2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10007cc5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10007cc8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10007ccb:	50                   	push   eax
10007ccc:	e8 fc ff ff ff       	call   10007ccd <NFrame::getPixelOwner(Video*, int, int, bool)+0xd7>	10007ccd: R_386_PC32	NFrame::getPixelOwner(Video*, int, int, bool)
10007cd1:	83 c4 20             	add    esp,0x20
10007cd4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10007cd7:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10007cdb:	74 b7                	je     10007c94 <NFrame::getPixelOwner(Video*, int, int, bool)+0x9e>
10007cdd:	80 7d b4 00          	cmp    BYTE PTR [ebp-0x4c],0x0
10007ce1:	74 0f                	je     10007cf2 <NFrame::getPixelOwner(Video*, int, int, bool)+0xfc>
10007ce3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ce6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10007ce9:	85 c0                	test   eax,eax
10007ceb:	74 05                	je     10007cf2 <NFrame::getPixelOwner(Video*, int, int, bool)+0xfc>
10007ced:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007cf0:	eb 0d                	jmp    10007cff <NFrame::getPixelOwner(Video*, int, int, bool)+0x109>
10007cf2:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10007cf5:	eb 08                	jmp    10007cff <NFrame::getPixelOwner(Video*, int, int, bool)+0x109>
10007cf7:	90                   	nop
10007cf8:	eb 9a                	jmp    10007c94 <NFrame::getPixelOwner(Video*, int, int, bool)+0x9e>
10007cfa:	b8 00 00 00 00       	mov    eax,0x0
10007cff:	8d 65 f4             	lea    esp,[ebp-0xc]
10007d02:	5b                   	pop    ebx
10007d03:	5e                   	pop    esi
10007d04:	5f                   	pop    edi
10007d05:	5d                   	pop    ebp
10007d06:	c3                   	ret    
10007d07:	90                   	nop

10007d08 <NFrame::unhide()>:
10007d08:	55                   	push   ebp
10007d09:	89 e5                	mov    ebp,esp
10007d0b:	83 ec 08             	sub    esp,0x8
10007d0e:	83 ec 08             	sub    esp,0x8
10007d11:	6a 00                	push   0x0
10007d13:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007d16:	e8 fc ff ff ff       	call   10007d17 <NFrame::unhide()+0xf>	10007d17: R_386_PC32	NFrame::hide(bool)
10007d1b:	83 c4 10             	add    esp,0x10
10007d1e:	90                   	nop
10007d1f:	c9                   	leave  
10007d20:	c3                   	ret    
10007d21:	90                   	nop

10007d22 <NFrame::hide(bool)>:
10007d22:	55                   	push   ebp
10007d23:	89 e5                	mov    ebp,esp
10007d25:	83 ec 18             	sub    esp,0x18
10007d28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10007d2b:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10007d2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007d31:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10007d34:	38 45 f4             	cmp    BYTE PTR [ebp-0xc],al
10007d37:	74 31                	je     10007d6a <NFrame::hide(bool)+0x48>
10007d39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007d3c:	8a 55 f4             	mov    dl,BYTE PTR [ebp-0xc]
10007d3f:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
10007d42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007d45:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10007d48:	84 c0                	test   al,al
10007d4a:	74 10                	je     10007d5c <NFrame::hide(bool)+0x3a>
10007d4c:	83 ec 0c             	sub    esp,0xc
10007d4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007d52:	e8 fc ff ff ff       	call   10007d53 <NFrame::hide(bool)+0x31>	10007d53: R_386_PC32	NFrame::invalidate()
10007d57:	83 c4 10             	add    esp,0x10
10007d5a:	eb 0e                	jmp    10007d6a <NFrame::hide(bool)+0x48>
10007d5c:	83 ec 0c             	sub    esp,0xc
10007d5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007d62:	e8 fc ff ff ff       	call   10007d63 <NFrame::hide(bool)+0x41>	10007d63: R_386_PC32	NFrame::invalidateRectangularBoundingBox()
10007d67:	83 c4 10             	add    esp,0x10
10007d6a:	90                   	nop
10007d6b:	c9                   	leave  
10007d6c:	c3                   	ret    
10007d6d:	90                   	nop

10007d6e <NFrame::getWidth()>:
10007d6e:	55                   	push   ebp
10007d6f:	89 e5                	mov    ebp,esp
10007d71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007d74:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10007d77:	5d                   	pop    ebp
10007d78:	c3                   	ret    
10007d79:	90                   	nop

10007d7a <NFrame::getHeight()>:
10007d7a:	55                   	push   ebp
10007d7b:	89 e5                	mov    ebp,esp
10007d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007d80:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
10007d83:	5d                   	pop    ebp
10007d84:	c3                   	ret    
10007d85:	90                   	nop

10007d86 <NFrame::startDragState()>:
10007d86:	55                   	push   ebp
10007d87:	89 e5                	mov    ebp,esp
10007d89:	57                   	push   edi
10007d8a:	56                   	push   esi
10007d8b:	53                   	push   ebx
10007d8c:	83 ec 2c             	sub    esp,0x2c
10007d8f:	83 ec 08             	sub    esp,0x8
10007d92:	6a 01                	push   0x1
10007d94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007d97:	e8 fc ff ff ff       	call   10007d98 <NFrame::startDragState()+0x12>	10007d98: R_386_PC32	NFrame::hide(bool)
10007d9c:	83 c4 10             	add    esp,0x10
10007d9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007da2:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
10007da5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007da8:	8b 58 18             	mov    ebx,DWORD PTR [eax+0x18]
10007dab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007dae:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
10007db1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007db4:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
10007db7:	8d 45 cc             	lea    eax,[ebp-0x34]
10007dba:	83 ec 08             	sub    esp,0x8
10007dbd:	6a 02                	push   0x2
10007dbf:	56                   	push   esi
10007dc0:	53                   	push   ebx
10007dc1:	51                   	push   ecx
10007dc2:	52                   	push   edx
10007dc3:	50                   	push   eax
10007dc4:	e8 fc ff ff ff       	call   10007dc5 <NFrame::startDragState()+0x3f>	10007dc5: R_386_PC32	createAntRegion(int, int, int, int, int)
10007dc9:	83 c4 1c             	add    esp,0x1c
10007dcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007dcf:	8d 58 30             	lea    ebx,[eax+0x30]
10007dd2:	8d 45 cc             	lea    eax,[ebp-0x34]
10007dd5:	ba 19 00 00 00       	mov    edx,0x19
10007dda:	89 df                	mov    edi,ebx
10007ddc:	89 c6                	mov    esi,eax
10007dde:	89 d1                	mov    ecx,edx
10007de0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10007de2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007de5:	c6 40 69 01          	mov    BYTE PTR [eax+0x69],0x1
10007de9:	90                   	nop
10007dea:	8d 65 f4             	lea    esp,[ebp-0xc]
10007ded:	5b                   	pop    ebx
10007dee:	5e                   	pop    esi
10007def:	5f                   	pop    edi
10007df0:	5d                   	pop    ebp
10007df1:	c3                   	ret    

10007df2 <NFrame::endDragState()>:
10007df2:	55                   	push   ebp
10007df3:	89 e5                	mov    ebp,esp
10007df5:	83 ec 08             	sub    esp,0x8
10007df8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007dfb:	c6 40 69 00          	mov    BYTE PTR [eax+0x69],0x0
10007dff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007e02:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
10007e05:	83 ec 0c             	sub    esp,0xc
10007e08:	50                   	push   eax
10007e09:	e8 fc ff ff ff       	call   10007e0a <NFrame::endDragState()+0x18>	10007e0a: R_386_PC32	free
10007e0e:	83 c4 10             	add    esp,0x10
10007e11:	83 ec 0c             	sub    esp,0xc
10007e14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007e17:	e8 fc ff ff ff       	call   10007e18 <NFrame::endDragState()+0x26>	10007e18: R_386_PC32	NFrame::unhide()
10007e1c:	83 c4 10             	add    esp,0x10
10007e1f:	90                   	nop
10007e20:	c9                   	leave  
10007e21:	c3                   	ret    

10007e22 <NFrame::setSize(int, int)>:
10007e22:	55                   	push   ebp
10007e23:	89 e5                	mov    ebp,esp
10007e25:	83 ec 08             	sub    esp,0x8
10007e28:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
10007e2c:	7f 07                	jg     10007e35 <NFrame::setSize(int, int)+0x13>
10007e2e:	c7 45 0c 01 00 00 00 	mov    DWORD PTR [ebp+0xc],0x1
10007e35:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10007e39:	7f 07                	jg     10007e42 <NFrame::setSize(int, int)+0x20>
10007e3b:	c7 45 10 01 00 00 00 	mov    DWORD PTR [ebp+0x10],0x1
10007e42:	83 ec 0c             	sub    esp,0xc
10007e45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007e48:	e8 fc ff ff ff       	call   10007e49 <NFrame::setSize(int, int)+0x27>	10007e49: R_386_PC32	NFrame::hasTitleBar()
10007e4d:	83 c4 10             	add    esp,0x10
10007e50:	84 c0                	test   al,al
10007e52:	74 1a                	je     10007e6e <NFrame::setSize(int, int)+0x4c>
10007e54:	83 7d 0c 4a          	cmp    DWORD PTR [ebp+0xc],0x4a
10007e58:	7f 07                	jg     10007e61 <NFrame::setSize(int, int)+0x3f>
10007e5a:	c7 45 0c 4b 00 00 00 	mov    DWORD PTR [ebp+0xc],0x4b
10007e61:	83 7d 10 27          	cmp    DWORD PTR [ebp+0x10],0x27
10007e65:	7f 07                	jg     10007e6e <NFrame::setSize(int, int)+0x4c>
10007e67:	c7 45 10 28 00 00 00 	mov    DWORD PTR [ebp+0x10],0x28
10007e6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007e71:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10007e74:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10007e77:	75 0b                	jne    10007e84 <NFrame::setSize(int, int)+0x62>
10007e79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007e7c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
10007e7f:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
10007e82:	74 4b                	je     10007ecf <NFrame::setSize(int, int)+0xad>
10007e84:	83 ec 0c             	sub    esp,0xc
10007e87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007e8a:	e8 fc ff ff ff       	call   10007e8b <NFrame::setSize(int, int)+0x69>	10007e8b: R_386_PC32	NFrame::tryInvalidate()
10007e8f:	83 c4 10             	add    esp,0x10
10007e92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007e95:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10007e98:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
10007e9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007e9e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10007ea1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
10007ea4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ea7:	8b 00                	mov    eax,DWORD PTR [eax]
10007ea9:	83 c0 08             	add    eax,0x8
10007eac:	8b 00                	mov    eax,DWORD PTR [eax]
10007eae:	83 ec 0c             	sub    esp,0xc
10007eb1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007eb4:	ff d0                	call   eax
10007eb6:	83 c4 10             	add    esp,0x10
10007eb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ebc:	8b 00                	mov    eax,DWORD PTR [eax]
10007ebe:	8b 00                	mov    eax,DWORD PTR [eax]
10007ec0:	83 ec 0c             	sub    esp,0xc
10007ec3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007ec6:	ff d0                	call   eax
10007ec8:	83 c4 10             	add    esp,0x10
10007ecb:	b0 01                	mov    al,0x1
10007ecd:	eb 02                	jmp    10007ed1 <NFrame::setSize(int, int)+0xaf>
10007ecf:	b0 00                	mov    al,0x0
10007ed1:	c9                   	leave  
10007ed2:	c3                   	ret    
10007ed3:	90                   	nop

10007ed4 <NFrame::hasTitleBar()>:
10007ed4:	55                   	push   ebp
10007ed5:	89 e5                	mov    ebp,esp
10007ed7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007eda:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007edd:	83 e0 08             	and    eax,0x8
10007ee0:	85 c0                	test   eax,eax
10007ee2:	75 11                	jne    10007ef5 <NFrame::hasTitleBar()+0x21>
10007ee4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ee7:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007eea:	83 e0 01             	and    eax,0x1
10007eed:	85 c0                	test   eax,eax
10007eef:	75 04                	jne    10007ef5 <NFrame::hasTitleBar()+0x21>
10007ef1:	b0 01                	mov    al,0x1
10007ef3:	eb 02                	jmp    10007ef7 <NFrame::hasTitleBar()+0x23>
10007ef5:	b0 00                	mov    al,0x0
10007ef7:	5d                   	pop    ebp
10007ef8:	c3                   	ret    
10007ef9:	90                   	nop

10007efa <NFrame::getX()>:
10007efa:	55                   	push   ebp
10007efb:	89 e5                	mov    ebp,esp
10007efd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f00:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
10007f03:	5d                   	pop    ebp
10007f04:	c3                   	ret    
10007f05:	90                   	nop

10007f06 <NFrame::getY()>:
10007f06:	55                   	push   ebp
10007f07:	89 e5                	mov    ebp,esp
10007f09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f0c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
10007f0f:	5d                   	pop    ebp
10007f10:	c3                   	ret    
10007f11:	90                   	nop

10007f12 <NFrame::setPosition(int, int)>:
10007f12:	55                   	push   ebp
10007f13:	89 e5                	mov    ebp,esp
10007f15:	83 ec 08             	sub    esp,0x8
10007f18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f1b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
10007f1e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10007f21:	75 0b                	jne    10007f2e <NFrame::setPosition(int, int)+0x1c>
10007f23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f26:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
10007f29:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
10007f2c:	74 7b                	je     10007fa9 <NFrame::setPosition(int, int)+0x97>
10007f2e:	83 ec 0c             	sub    esp,0xc
10007f31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007f34:	e8 fc ff ff ff       	call   10007f35 <NFrame::setPosition(int, int)+0x23>	10007f35: R_386_PC32	NFrame::tryInvalidate()
10007f39:	83 c4 10             	add    esp,0x10
10007f3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f3f:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10007f42:	84 c0                	test   al,al
10007f44:	74 36                	je     10007f7c <NFrame::setPosition(int, int)+0x6a>
10007f46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f49:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
10007f4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f4f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
10007f52:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10007f55:	29 c1                	sub    ecx,eax
10007f57:	89 c8                	mov    eax,ecx
10007f59:	01 c2                	add    edx,eax
10007f5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f5e:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
10007f61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f64:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
10007f67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f6a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
10007f6d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10007f70:	29 c1                	sub    ecx,eax
10007f72:	89 c8                	mov    eax,ecx
10007f74:	01 c2                	add    edx,eax
10007f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f79:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
10007f7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f7f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10007f82:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
10007f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f88:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10007f8b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
10007f8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f91:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10007f94:	83 f0 01             	xor    eax,0x1
10007f97:	84 c0                	test   al,al
10007f99:	74 0e                	je     10007fa9 <NFrame::setPosition(int, int)+0x97>
10007f9b:	83 ec 0c             	sub    esp,0xc
10007f9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007fa1:	e8 fc ff ff ff       	call   10007fa2 <NFrame::setPosition(int, int)+0x90>	10007fa2: R_386_PC32	NFrame::tryInvalidate()
10007fa6:	83 c4 10             	add    esp,0x10
10007fa9:	90                   	nop
10007faa:	c9                   	leave  
10007fab:	c3                   	ret    

10007fac <NFrame::raise()>:
10007fac:	55                   	push   ebp
10007fad:	89 e5                	mov    ebp,esp
10007faf:	83 ec 18             	sub    esp,0x18
10007fb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007fb5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10007fb8:	85 c0                	test   eax,eax
10007fba:	74 2c                	je     10007fe8 <NFrame::raise()+0x3c>
10007fbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007fbf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10007fc2:	83 ec 08             	sub    esp,0x8
10007fc5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007fc8:	50                   	push   eax
10007fc9:	e8 fc ff ff ff       	call   10007fca <NFrame::raise()+0x1e>	10007fca: R_386_PC32	NFrame::raiseChild(NFrame*)
10007fce:	83 c4 10             	add    esp,0x10
10007fd1:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10007fd4:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10007fd8:	74 0e                	je     10007fe8 <NFrame::raise()+0x3c>
10007fda:	83 ec 0c             	sub    esp,0xc
10007fdd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007fe0:	e8 fc ff ff ff       	call   10007fe1 <NFrame::raise()+0x35>	10007fe1: R_386_PC32	NFrame::invalidate()
10007fe5:	83 c4 10             	add    esp,0x10
10007fe8:	90                   	nop
10007fe9:	c9                   	leave  
10007fea:	c3                   	ret    
10007feb:	90                   	nop

10007fec <NFrame::repaintCursorRegion(Video*, Region)>:
10007fec:	90                   	nop
10007fed:	c3                   	ret    

10007fee <NFrame::isFullscreen()>:
10007fee:	55                   	push   ebp
10007fef:	89 e5                	mov    ebp,esp
10007ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ff4:	8a 40 70             	mov    al,BYTE PTR [eax+0x70]
10007ff7:	5d                   	pop    ebp
10007ff8:	c3                   	ret    
10007ff9:	90                   	nop

10007ffa <NFrame::toggleFullscreen(Video*)>:
10007ffa:	55                   	push   ebp
10007ffb:	89 e5                	mov    ebp,esp
10007ffd:	53                   	push   ebx
10007ffe:	83 ec 04             	sub    esp,0x4
10008001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008004:	8a 40 70             	mov    al,BYTE PTR [eax+0x70]
10008007:	84 c0                	test   al,al
10008009:	74 47                	je     10008052 <NFrame::toggleFullscreen(Video*)+0x58>
1000800b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000800e:	c6 40 70 00          	mov    BYTE PTR [eax+0x70],0x0
10008012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008015:	8b 90 80 00 00 00    	mov    edx,DWORD PTR [eax+0x80]
1000801b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000801e:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
10008021:	83 ec 04             	sub    esp,0x4
10008024:	52                   	push   edx
10008025:	50                   	push   eax
10008026:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008029:	e8 fc ff ff ff       	call   1000802a <NFrame::toggleFullscreen(Video*)+0x30>	1000802a: R_386_PC32	NFrame::setSize(int, int)
1000802e:	83 c4 10             	add    esp,0x10
10008031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008034:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
10008037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000803a:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
1000803d:	83 ec 04             	sub    esp,0x4
10008040:	52                   	push   edx
10008041:	50                   	push   eax
10008042:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008045:	e8 fc ff ff ff       	call   10008046 <NFrame::toggleFullscreen(Video*)+0x4c>	10008046: R_386_PC32	NFrame::setPosition(int, int)
1000804a:	83 c4 10             	add    esp,0x10
1000804d:	e9 88 00 00 00       	jmp    100080da <NFrame::toggleFullscreen(Video*)+0xe0>
10008052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008055:	c6 40 70 01          	mov    BYTE PTR [eax+0x70],0x1
10008059:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000805c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
1000805f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008062:	89 50 74             	mov    DWORD PTR [eax+0x74],edx
10008065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008068:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
1000806b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000806e:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
10008071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008074:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
10008077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000807a:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
1000807d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008080:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10008083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008086:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
1000808c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000808f:	c6 40 68 01          	mov    BYTE PTR [eax+0x68],0x1
10008093:	83 ec 04             	sub    esp,0x4
10008096:	6a 00                	push   0x0
10008098:	6a 00                	push   0x0
1000809a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000809d:	e8 fc ff ff ff       	call   1000809e <NFrame::toggleFullscreen(Video*)+0xa4>	1000809e: R_386_PC32	NFrame::setPosition(int, int)
100080a2:	83 c4 10             	add    esp,0x10
100080a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100080a8:	c6 40 68 00          	mov    BYTE PTR [eax+0x68],0x0
100080ac:	83 ec 0c             	sub    esp,0xc
100080af:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100080b2:	e8 fc ff ff ff       	call   100080b3 <NFrame::toggleFullscreen(Video*)+0xb9>	100080b3: R_386_PC32	Video::getHeight()
100080b7:	83 c4 10             	add    esp,0x10
100080ba:	89 c3                	mov    ebx,eax
100080bc:	83 ec 0c             	sub    esp,0xc
100080bf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100080c2:	e8 fc ff ff ff       	call   100080c3 <NFrame::toggleFullscreen(Video*)+0xc9>	100080c3: R_386_PC32	Video::getWidth()
100080c7:	83 c4 10             	add    esp,0x10
100080ca:	83 ec 04             	sub    esp,0x4
100080cd:	53                   	push   ebx
100080ce:	50                   	push   eax
100080cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100080d2:	e8 fc ff ff ff       	call   100080d3 <NFrame::toggleFullscreen(Video*)+0xd9>	100080d3: R_386_PC32	NFrame::setSize(int, int)
100080d7:	83 c4 10             	add    esp,0x10
100080da:	90                   	nop
100080db:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100080de:	c9                   	leave  
100080df:	c3                   	ret    

100080e0 <NFrame::getTitlebarHeight()>:
100080e0:	55                   	push   ebp
100080e1:	89 e5                	mov    ebp,esp
100080e3:	83 ec 08             	sub    esp,0x8
100080e6:	83 ec 0c             	sub    esp,0xc
100080e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100080ec:	e8 fc ff ff ff       	call   100080ed <NFrame::getTitlebarHeight()+0xd>	100080ed: R_386_PC32	NFrame::hasTitleBar()
100080f1:	83 c4 10             	add    esp,0x10
100080f4:	84 c0                	test   al,al
100080f6:	74 0b                	je     10008103 <NFrame::getTitlebarHeight()+0x23>
100080f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100080fb:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
10008101:	eb 05                	jmp    10008108 <NFrame::getTitlebarHeight()+0x28>
10008103:	b8 00 00 00 00       	mov    eax,0x0
10008108:	c9                   	leave  
10008109:	c3                   	ret    

1000810a <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)>:
1000810a:	55                   	push   ebp
1000810b:	89 e5                	mov    ebp,esp
1000810d:	83 ec 18             	sub    esp,0x18
10008110:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10008117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000811a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000811d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10008120:	83 ec 0c             	sub    esp,0xc
10008123:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008126:	e8 fc ff ff ff       	call   10008127 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x1d>	10008127: R_386_PC32	LinkedList2<NFrame*>::isEmpty()
1000812b:	83 c4 10             	add    esp,0x10
1000812e:	83 f0 01             	xor    eax,0x1
10008131:	84 c0                	test   al,al
10008133:	74 0e                	je     10008143 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x39>
10008135:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008138:	8b 00                	mov    eax,DWORD PTR [eax]
1000813a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
1000813d:	75 04                	jne    10008143 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x39>
1000813f:	b0 01                	mov    al,0x1
10008141:	eb 02                	jmp    10008145 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x3b>
10008143:	b0 00                	mov    al,0x0
10008145:	84 c0                	test   al,al
10008147:	74 30                	je     10008179 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x6f>
10008149:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000814c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000814f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008152:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
10008155:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008158:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000815b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000815e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008161:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10008164:	83 ec 08             	sub    esp,0x8
10008167:	6a 08                	push   0x8
10008169:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000816c:	e8 fc ff ff ff       	call   1000816d <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x63>	1000816d: R_386_PC32	operator delete(void*, unsigned long)
10008171:	83 c4 10             	add    esp,0x10
10008174:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10008177:	eb a7                	jmp    10008120 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x16>
10008179:	83 ec 0c             	sub    esp,0xc
1000817c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000817f:	e8 fc ff ff ff       	call   10008180 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x76>	10008180: R_386_PC32	LinkedList2<NFrame*>::isEmpty()
10008184:	83 c4 10             	add    esp,0x10
10008187:	83 f0 01             	xor    eax,0x1
1000818a:	84 c0                	test   al,al
1000818c:	74 14                	je     100081a2 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x98>
1000818e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10008192:	74 0e                	je     100081a2 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x98>
10008194:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008197:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000819a:	85 c0                	test   eax,eax
1000819c:	74 04                	je     100081a2 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x98>
1000819e:	b0 01                	mov    al,0x1
100081a0:	eb 02                	jmp    100081a4 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x9a>
100081a2:	b0 00                	mov    al,0x0
100081a4:	84 c0                	test   al,al
100081a6:	74 59                	je     10008201 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0xf7>
100081a8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100081ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100081ae:	8b 00                	mov    eax,DWORD PTR [eax]
100081b0:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
100081b3:	75 3e                	jne    100081f3 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0xe9>
100081b5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100081b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100081bb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100081be:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100081c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100081c4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
100081c7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100081ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100081cd:	83 ec 08             	sub    esp,0x8
100081d0:	6a 08                	push   0x8
100081d2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100081d5:	e8 fc ff ff ff       	call   100081d6 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0xcc>	100081d6: R_386_PC32	operator delete(void*, unsigned long)
100081da:	83 c4 10             	add    esp,0x10
100081dd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100081e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100081e3:	85 c0                	test   eax,eax
100081e5:	75 09                	jne    100081f0 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0xe6>
100081e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100081ea:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100081ed:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
100081f0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100081f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100081f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100081f9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100081fc:	e9 78 ff ff ff       	jmp    10008179 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x6f>
10008201:	83 ec 0c             	sub    esp,0xc
10008204:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008207:	e8 fc ff ff ff       	call   10008208 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0xfe>	10008208: R_386_PC32	LinkedList2<NFrame*>::isEmpty()
1000820c:	83 c4 10             	add    esp,0x10
1000820f:	84 c0                	test   al,al
10008211:	74 0a                	je     1000821d <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x113>
10008213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008216:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
1000821d:	90                   	nop
1000821e:	c9                   	leave  
1000821f:	c3                   	ret    

10008220 <_GLOBAL__sub_I_mouseX>:
10008220:	83 ec 18             	sub    esp,0x18
10008223:	68 00 00 00 00       	push   0x0	10008224: R_386_32	tightMouseRegionOld
10008228:	e8 fc ff ff ff       	call   10008229 <_GLOBAL__sub_I_mouseX+0x9>	10008229: R_386_PC32	Region::Region()
1000822d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10008230: R_386_32	tightMouseRegionNew
10008234:	e8 fc ff ff ff       	call   10008235 <_GLOBAL__sub_I_mouseX+0x15>	10008235: R_386_PC32	Region::Region()
10008239:	83 c4 1c             	add    esp,0x1c
1000823c:	c3                   	ret    
1000823d:	66 90                	xchg   ax,ax
1000823f:	90                   	nop

10008240 <PHYS_RAM_TABLE_SIZE>:
10008240:	13 05 00 00                                         ....

10008244 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10008244:	24 05 00 00                                         $...

10008248 <PHYS_RAM_TABLE>:
10008248:	00 06 00 00                                         ....

1000824c <PHYS_DMA_MEMORY_1>:
1000824c:	00 00 01 00                                         ....

10008250 <PHYS_PHYS_PAGE_BITMAP>:
10008250:	00 00 02 00                                         ....

10008254 <PHYS_VIRT_PAGE_BITMAP>:
10008254:	00 00 04 00                                         ....

10008258 <PHYS_DMA_MEMORY_2>:
10008258:	00 00 06 00                                         ....

1000825c <PHYS_ALLOCED_VIRT_PAGES>:
1000825c:	00 00 10 00                                         ....

10008260 <PHYS_KRNL_PAGE_DIRECTORY>:
10008260:	00 10 00 00                                         ....

10008264 <VIRT_KERNEL_BASE>:
10008264:	00 00 00 c0                                         ....

10008268 <VIRT_LOW_MEGS>:
10008268:	00 00 00 c2                                         ....

1000826c <VIRT_CPU_SPECIFIC>:
1000826c:	00 00 40 c2                                         ..@.

10008270 <VIRT_RECURSIVE_SPOT_1>:
10008270:	00 00 80 c2                                         ....

10008274 <VIRT_RECURSIVE_SPOT_2>:
10008274:	00 00 c0 c2                                         ....

10008278 <VIRT_DMA_MEMORY_1>:
10008278:	00 00 01 c2                                         ....

1000827c <SIZE_DMA_MEMORY_1>:
1000827c:	00 00 01 00                                         ....

10008280 <VIRT_KRNL_PAGE_DIRECTORY>:
10008280:	00 10 00 c2                                         ....

10008284 <VIRT_PHYS_PAGE_BITMAP>:
10008284:	00 00 02 c2                                         ....

10008288 <SIZE_PHYS_PAGE_BITMAP>:
10008288:	00 00 02 00                                         ....

1000828c <VIRT_VIRT_PAGE_BITMAP>:
1000828c:	00 00 04 c2                                         ....

10008290 <SIZE_VIRT_PAGE_BITMAP>:
10008290:	00 80 00 00                                         ....

10008294 <VIRT_RAM_TABLE>:
10008294:	00 06 00 c2                                         ....

10008298 <VIRT_RAM_TABLE_SIZE>:
10008298:	13 05 00 c2                                         ....

1000829c <VIRT_HIGHEST_UNUSED_ADDRESS>:
1000829c:	24 05 00 c2                                         $...

100082a0 <SIZE_APP_STACK_USER>:
100082a0:	00 00 18 00                                         ....

100082a4 <SIZE_APP_STACK_KRNL>:
100082a4:	00 00 08 00                                         ....

100082a8 <SIZE_APP_STACK_TOTAL>:
100082a8:	00 00 20 00                                         .. .

100082ac <VIRT_APP_DATA>:
100082ac:	00 00 00 10                                         ....

100082b0 <VIRT_APP_STACK_USER_TOP>:
100082b0:	00 00 00 02                                         ....

100082b4 <VIRT_APP_STACK_KRNL_TOP>:
100082b4:	00 00 e8 01                                         ....

100082b8 <VIRT_HEAP_MIN>:
100082b8:	00 00 00 c8                                         ....

100082bc <VIRT_HEAP_MAX>:
100082bc:	ff ff ff ef                                         ....

100082c0 <VIRT_SBRK_MIN>:
100082c0:	00 00 00 f0                                         ....

100082c4 <VIRT_SBRK_MAX>:
100082c4:	00 00 c0 ff                                         ....

100082c8 <VIRT_ALLOCED_VIRT_PAGES>:
100082c8:	00 00 10 c2                                         ....

100082cc <VIRT_ACPI_DRIVER>:
100082cc:	00 40 48 c2                                         .@H.

100082d0 <TERMINAL_KEYBUFFER_IN_SIZE>:
100082d0:	80 00 00 00                                         ....

100082d4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100082d4:	80 00 00 00 2a 53 59 53 54 45 4d 00 58 00 53 65     ....*SYSTEM.X.Se
100082e4:	72 69 66 00 54 68 65 20 71 75 69 63 6b 20 62 72     rif.The quick br
100082f4:	6f 77 6e 20 66 6f 78 20 6a 75 6d 70 73 20 6f 76     own fox jumps ov
10008304:	65 72 20 61 20 6c 61 7a 79 20 64 6f 67 2e 00 00     er a lazy dog...
10008314:	31 3e 43 3a 2f 55 73 65 72 73 2f 41 6c 65 78 2f     1>C:/Users/Alex/
10008324:	44 65 73 6b 74 6f 70 2f 42 61 6e 61 6e 61 2f 6b     Desktop/Banana/k
10008334:	65 72 6e 65 6c 2f 6c 69 62 6b 2f 73 74 72 69 6e     ernel/libk/strin
10008344:	67 2e 68 28 33 36 2c 38 29 3a 20 77 61 72 6e 69     g.h(36,8): warni
10008354:	6e 67 20 47 41 45 34 42 46 37 39 39 3a 20 64 65     ng GAE4BF799: de
10008364:	63 6c 61 72 61 74 69 6f 6e 20 6f 66 20 27 63 68     claration of 'ch
10008374:	61 72 2a 20 73 74 72 63 68 72 28 63 68 61 72 2a     ar* strchr(char*
10008384:	2c 20 69 6e 74 29 27 20 63 6f 6e 66 6c 69 63 74     , int)' conflict
10008394:	73 20 77 69 74 68 20 62 75 69 6c 74 2d 69 6e 20     s with built-in 
100083a4:	64 65 63 6c 61 72 61 74 69 6f 6e 20 27 63 68 61     declaration 'cha
100083b4:	72 2a 20 73 74 72 63 68 72 28 63 6f 6e 73 74 20     r* strchr(const 
100083c4:	63 68 61 72 2a 2c 20 69 6e 74 29 27 20 5b 2d 57     char*, int)' [-W
100083d4:	62 75 69 6c 74 69 6e 2d 64 65 63 6c 61 72 61 74     builtin-declarat
100083e4:	69 6f 6e 2d 6d 69 73 6d 61 74 63 68 5d 00 00 00     ion-mismatch]...
100083f4:	4e 42 75 74 74 6f 6e 28 69 6e 74 20 78 2c 20 69     NButton(int x, i
10008404:	6e 74 20 79 2c 20 69 6e 74 20 77 2c 20 69 6e 74     nt y, int w, int
10008414:	20 68 29 20 3a 20 4e 46 72 61 6d 65 28 78 2c 20      h) : NFrame(x, 
10008424:	79 2c 20 77 2c 20 68 29 00 00 00 00 70 61 69 6e     y, w, h)....pain
10008434:	74 52 65 63 74 61 6e 67 6c 65 28 67 2c 20 30 2c     tRectangle(g, 0,
10008444:	20 30 2c 20 72 67 6e 2e 77 69 64 74 68 2c 20 72      0, rgn.width, r
10008454:	67 6e 2e 68 65 69 67 68 74 2c 20 63 6f 6c 29 3b     gn.height, col);
10008464:	00 20 53 54 4f 50 20 45 52 52 4f 52 20 00 00 00     . STOP ERROR ...
10008474:	41 20 70 72 6f 62 6c 65 6d 20 68 61 73 20 6f 63     A problem has oc
10008484:	63 75 72 65 64 20 61 6e 64 20 42 61 6e 61 6e 61     cured and Banana
10008494:	20 63 61 6e 6e 6f 74 20 63 6f 6e 74 69 6e 75 65      cannot continue
100084a4:	2e 00 43 6c 69 70 64 72 61 77 20 69 73 20 6e 6f     ..Clipdraw is no
100084b4:	77 20 72 75 6e 6e 69 6e 67 2e 2e 2e 0a 00 53 79     w running.....Sy
100084c4:	73 74 65 6d 20 66 6f 6e 74 20 68 61 6e 64 6c 65     stem font handle
100084d4:	20 3d 20 25 64 0a 00 55 6e 74 69 74 6c 65 64 20      = %d..Untitled 
100084e4:	57 69 6e 64 6f 77 00 90                             Window..

100084ec <vtable for NButton>:
	...
	100084f4: R_386_32	NFrame::postResizeCleanup()
	100084f8: R_386_32	NButton::paintHandler(NFrame::Graphics)
	100084fc: R_386_32	NFrame::regenerateRegion()

10008500 <vtable for NDesktopWindow>:
	...
	10008508: R_386_32	NFrame::postResizeCleanup()
	1000850c: R_386_32	NDesktopWindow::paintHandler(NFrame::Graphics)
	10008510: R_386_32	NFrame::regenerateRegion()

10008514 <vtable for NWindow>:
	...
	1000851c: R_386_32	NWindow::postResizeCleanup()
	10008520: R_386_32	NWindow::paintHandler(NFrame::Graphics)
	10008524: R_386_32	NFrame::regenerateRegion()

10008528 <vtable for NFrame>:
	...
	10008530: R_386_32	NFrame::postResizeCleanup()
	10008534: R_386_32	__cxa_pure_virtual
	10008538: R_386_32	NFrame::regenerateRegion()
1000853c:	43 55 52 53 4f 52 20 4c 4f 41 44 3a 20 42 41 44     CURSOR LOAD: BAD
1000854c:	20 31 0a 00 43 55 52 53 4f 52 20 4c 4f 41 44 3a      1..CURSOR LOAD:
1000855c:	20 42 41 44 20 32 0a 00 4e 52 4d 4c 00 57 41 49      BAD 2..NRML.WAI
1000856c:	54 00 54 4c 44 52 00 54 45 58 54 00 56 45 52 54     T.TLDR.TEXT.VERT
1000857c:	00 48 4f 52 5a 00 48 41 4e 44 00 43 55 52 53 4f     .HORZ.HAND.CURSO
1000858c:	52 20 4c 4f 41 44 3a 20 42 41 44 20 33 0a 00 43     R LOAD: BAD 3..C
1000859c:	3a 2f 42 61 6e 61 6e 61 2f 43 75 72 73 6f 72 73     :/Banana/Cursors
100085ac:	2f 53 54 41 4e 44 41 52 44 2e 43 55 52 00 61 62     /STANDARD.CUR.ab
100085bc:	6f 72 74 00 00 00 00 3f 4d 65 6d 6f 72 79 20 61     ort....?Memory a
100085cc:	6c 6c 6f 63 61 74 69 6f 6e 20 65 72 72 6f 72 00     llocation error.
100085dc:	42 61 64 20 66 69 6c 65 20 66 6f 72 6d 61 74 00     Bad file format.
100085ec:	4e 6f 20 66 6f 6e 74 20 66 61 63 65 20 66 6f 75     No font face fou
100085fc:	6e 64 00 49 6e 76 61 6c 69 64 20 69 6e 70 75 74     nd.Invalid input
1000860c:	20 76 61 6c 75 65 00 49 6e 76 61 6c 69 64 20 73      value.Invalid s
1000861c:	74 79 6c 65 00 49 6e 76 61 6c 69 64 20 73 69 7a     tyle.Invalid siz
1000862c:	65 00 47 6c 79 70 68 20 6e 6f 74 20 66 6f 75 6e     e.Glyph not foun
1000863c:	64 00 53 46 4e 43 00 53 46 4e 32 00 32 4e 46 53     d.SFNC.SFN2.2NFS
1000864c:	00 43 3a 2f 42 61 6e 61 6e 61 2f 46 6f 6e 74 73     .C:/Banana/Fonts
1000865c:	2f 53 46 4e 2f 00 2e 53 46 4e 00 4c 6f 61 64 69     /SFN/..SFN.Loadi
1000866c:	6e 67 20 66 6f 6e 74 20 27 25 73 27 0a 00 63 61     ng font '%s'..ca
1000867c:	6e 6e 6f 74 20 63 72 65 61 74 65 20 66 69 6c 65     nnot create file
1000868c:	2e 0a 00 63 61 6e 6e 6f 74 20 63 72 65 61 74 65     ...cannot create
1000869c:	20 72 65 61 64 2e 0a 00 62 75 74 20 77 65 20 6f      read...but we o
100086ac:	6e 6c 79 20 72 65 61 64 20 25 64 20 62 79 74 65     nly read %d byte
100086bc:	73 2e 0a 00 65 78 69 73 74 69 6e 67 20 68 61 6e     s...existing han
100086cc:	64 6c 65 20 3d 20 25 64 0a 00 65 78 69 73 74 69     dle = %d..existi
100086dc:	6e 67 20 66 6f 6e 74 20 3d 20 30 78 25 58 0a 00     ng font = 0x%X..
100086ec:	65 78 69 73 74 69 6e 67 46 6f 6e 74 2d 3e 73 73     existingFont->ss
100086fc:	66 6e 44 61 74 61 20 3d 20 30 78 25 58 0a 00        fnData = 0x%X..
