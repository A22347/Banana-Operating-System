
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <NiMain(void*)>:
10000000:	55                   	push   ebp
10000001:	57                   	push   edi
10000002:	56                   	push   esi
10000003:	53                   	push   ebx
10000004:	83 ec 0c             	sub    esp,0xc
10000007:	e8 fc ff ff ff       	call   10000008 <NiMain(void*)+0x8>	10000008: R_386_PC32	NiInstallSysHooks()
1000000c:	e8 fc ff ff ff       	call   1000000d <NiMain(void*)+0xd>	1000000d: R_386_PC32	NiLoadCursors()
10000011:	83 ec 0c             	sub    esp,0xc
10000014:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000016: R_386_32	screen
1000001a:	e8 fc ff ff ff       	call   1000001b <NiMain(void*)+0x1b>	1000001b: R_386_PC32	Video::getWidth()
1000001f:	89 c6                	mov    esi,eax
10000021:	58                   	pop    eax
10000022:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000024: R_386_32	screen
10000028:	e8 fc ff ff ff       	call   10000029 <NiMain(void*)+0x29>	10000029: R_386_PC32	Video::getHeight()
1000002d:	5a                   	pop    edx
1000002e:	89 c7                	mov    edi,eax
10000030:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000032: R_386_32	screen
10000036:	e8 fc ff ff ff       	call   10000037 <NiMain(void*)+0x37>	10000037: R_386_PC32	Video::getWidth()
1000003b:	c7 04 24 1c 04 00 00 	mov    DWORD PTR [esp],0x41c
10000042:	89 c5                	mov    ebp,eax
10000044:	e8 fc ff ff ff       	call   10000045 <NiMain(void*)+0x45>	10000045: R_386_PC32	malloc
10000049:	59                   	pop    ecx
1000004a:	89 c3                	mov    ebx,eax
1000004c:	58                   	pop    eax
1000004d:	6a 20                	push   0x20
1000004f:	55                   	push   ebp
10000050:	57                   	push   edi
10000051:	56                   	push   esi
10000052:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000054: R_386_32	screen
10000058:	53                   	push   ebx
10000059:	e8 fc ff ff ff       	call   1000005a <NiMain(void*)+0x5a>	1000005a: R_386_PC32	NIContext::NIContext(Video*, int, int, int, int)
1000005e:	83 c4 14             	add    esp,0x14
10000061:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000063: R_386_32	ctxt
10000067:	68 24 04 00 00       	push   0x424
1000006c:	e8 fc ff ff ff       	call   1000006d <NiMain(void*)+0x6d>	1000006d: R_386_PC32	malloc
10000071:	89 c6                	mov    esi,eax
10000073:	58                   	pop    eax
10000074:	5a                   	pop    edx
10000075:	53                   	push   ebx
10000076:	56                   	push   esi
10000077:	e8 fc ff ff ff       	call   10000078 <NiMain(void*)+0x78>	10000078: R_386_PC32	NIDesktop::NIDesktop(NIContext*)
1000007c:	68 80 00 00 00       	push   0x80
10000081:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000083: R_386_32	desktop
10000087:	6a 00                	push   0x0
10000089:	68 00 00 00 00       	push   0x0	1000008a: R_386_32	NiDisplayRAM(void*)
1000008e:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000090: R_386_32	kernelProcess
10000094:	e8 fc ff ff ff       	call   10000095 <NiMain(void*)+0x95>	10000095: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000099:	83 c4 20             	add    esp,0x20
1000009c:	68 80 00 00 00       	push   0x80
100000a1:	6a 00                	push   0x0
100000a3:	68 00 00 00 00       	push   0x0	100000a4: R_386_32	NiClockEventThread(void*)
100000a8:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000aa: R_386_32	kernelProcess
100000ae:	e8 fc ff ff ff       	call   100000af <NiMain(void*)+0xaf>	100000af: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
100000b3:	c7 04 24 94 02 00 00 	mov    DWORD PTR [esp],0x294
100000ba:	e8 fc ff ff ff       	call   100000bb <NiMain(void*)+0xbb>	100000bb: R_386_PC32	malloc
100000bf:	59                   	pop    ecx
100000c0:	89 c3                	mov    ebx,eax
100000c2:	5e                   	pop    esi
100000c3:	6a 01                	push   0x1
100000c5:	6a 01                	push   0x1
100000c7:	6a 00                	push   0x0
100000c9:	6a 00                	push   0x0
100000cb:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000cd: R_386_32	ctxt
100000d1:	50                   	push   eax
100000d2:	e8 fc ff ff ff       	call   100000d3 <NiMain(void*)+0xd3>	100000d3: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000d7:	83 c4 18             	add    esp,0x18
100000da:	53                   	push   ebx
100000db:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000dd: R_386_32	desktop
100000e1:	e8 fc ff ff ff       	call   100000e2 <NiMain(void*)+0xe2>	100000e2: R_386_PC32	NIDesktop::addWindow(NIWindow*)
100000e6:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
100000ed:	e8 fc ff ff ff       	call   100000ee <NiMain(void*)+0xee>	100000ee: R_386_PC32	malloc
100000f2:	6a 00                	push   0x0
100000f4:	89 c3                	mov    ebx,eax
100000f6:	6a 00                	push   0x0
100000f8:	68 1b 6b 00 10       	push   0x10006b1b	100000f9: R_386_32	.text
100000fd:	50                   	push   eax
100000fe:	e8 fc ff ff ff       	call   100000ff <NiMain(void*)+0xff>	100000ff: R_386_PC32	Process::Process(char const*, Process*, char**)
10000103:	83 c4 14             	add    esp,0x14
10000106:	53                   	push   ebx
10000107:	e8 fc ff ff ff       	call   10000108 <NiMain(void*)+0x108>	10000108: R_386_PC32	Process::createUserThread()
1000010c:	83 c4 10             	add    esp,0x10
1000010f:	83 ec 0c             	sub    esp,0xc
10000112:	6a 02                	push   0x2
10000114:	e8 fc ff ff ff       	call   10000115 <NiMain(void*)+0x115>	10000115: R_386_PC32	blockTask(TaskState)
10000119:	eb f1                	jmp    1000010c <NiMain(void*)+0x10c>
1000011b:	90                   	nop

1000011c <NiBegin(void*)>:
1000011c:	83 ec 18             	sub    esp,0x18
1000011f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000123:	e8 fc ff ff ff       	call   10000124 <NiBegin(void*)+0x8>	10000124: R_386_PC32	NiMain(void*)

10000128 <_ssfn__bitreverse16>:
10000128:	89 c2                	mov    edx,eax
1000012a:	01 c0                	add    eax,eax
1000012c:	d1 fa                	sar    edx,1
1000012e:	25 aa aa 00 00       	and    eax,0xaaaa
10000133:	81 e2 55 55 00 00    	and    edx,0x5555
10000139:	09 c2                	or     edx,eax
1000013b:	89 d0                	mov    eax,edx
1000013d:	c1 e2 02             	shl    edx,0x2
10000140:	c1 f8 02             	sar    eax,0x2
10000143:	81 e2 cc cc 00 00    	and    edx,0xcccc
10000149:	25 33 33 00 00       	and    eax,0x3333
1000014e:	09 d0                	or     eax,edx
10000150:	89 c2                	mov    edx,eax
10000152:	c1 e0 04             	shl    eax,0x4
10000155:	c1 fa 04             	sar    edx,0x4
10000158:	25 f0 f0 00 00       	and    eax,0xf0f0
1000015d:	81 e2 0f 0f 00 00    	and    edx,0xf0f
10000163:	09 c2                	or     edx,eax
10000165:	89 d1                	mov    ecx,edx
10000167:	c1 e2 08             	shl    edx,0x8
1000016a:	c1 f9 08             	sar    ecx,0x8
1000016d:	0f b7 c2             	movzx  eax,dx
10000170:	09 c8                	or     eax,ecx
10000172:	c3                   	ret    

10000173 <_ssfn__zhuffman_decode>:
10000173:	55                   	push   ebp
10000174:	57                   	push   edi
10000175:	56                   	push   esi
10000176:	53                   	push   ebx
10000177:	83 78 04 0f          	cmp    DWORD PTR [eax+0x4],0xf
1000017b:	7f 1d                	jg     1000019a <_ssfn__zhuffman_decode+0x27>
1000017d:	8b 18                	mov    ebx,DWORD PTR [eax]
1000017f:	8d 4b 01             	lea    ecx,[ebx+0x1]
10000182:	89 08                	mov    DWORD PTR [eax],ecx
10000184:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
10000187:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
1000018a:	d3 e3                	shl    ebx,cl
1000018c:	83 c1 08             	add    ecx,0x8
1000018f:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
10000192:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000195:	83 f9 18             	cmp    ecx,0x18
10000198:	eb e1                	jmp    1000017b <_ssfn__zhuffman_decode+0x8>
1000019a:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
1000019d:	89 f9                	mov    ecx,edi
1000019f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
100001a5:	0f b7 0c 4a          	movzx  ecx,WORD PTR [edx+ecx*2]
100001a9:	89 cb                	mov    ebx,ecx
100001ab:	85 c9                	test   ecx,ecx
100001ad:	74 15                	je     100001c4 <_ssfn__zhuffman_decode+0x51>
100001af:	c1 f9 09             	sar    ecx,0x9
100001b2:	89 da                	mov    edx,ebx
100001b4:	d3 ef                	shr    edi,cl
100001b6:	29 48 04             	sub    DWORD PTR [eax+0x4],ecx
100001b9:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
100001bc:	81 e2 ff 01 00 00    	and    edx,0x1ff
100001c2:	eb 58                	jmp    1000021c <_ssfn__zhuffman_decode+0xa9>
100001c4:	89 d5                	mov    ebp,edx
100001c6:	89 c3                	mov    ebx,eax
100001c8:	be 0a 00 00 00       	mov    esi,0xa
100001cd:	89 f8                	mov    eax,edi
100001cf:	e8 54 ff ff ff       	call   10000128 <_ssfn__bitreverse16>
100001d4:	3b 84 b5 20 04 00 00 	cmp    eax,DWORD PTR [ebp+esi*4+0x420]
100001db:	7c 03                	jl     100001e0 <_ssfn__zhuffman_decode+0x6d>
100001dd:	46                   	inc    esi
100001de:	eb f4                	jmp    100001d4 <_ssfn__zhuffman_decode+0x61>
100001e0:	83 ca ff             	or     edx,0xffffffff
100001e3:	83 fe 10             	cmp    esi,0x10
100001e6:	74 34                	je     1000021c <_ssfn__zhuffman_decode+0xa9>
100001e8:	8d 14 36             	lea    edx,[esi+esi*1]
100001eb:	b9 10 00 00 00       	mov    ecx,0x10
100001f0:	01 ea                	add    edx,ebp
100001f2:	29 f1                	sub    ecx,esi
100001f4:	d3 f8                	sar    eax,cl
100001f6:	0f b7 8a 00 04 00 00 	movzx  ecx,WORD PTR [edx+0x400]
100001fd:	0f b7 92 64 04 00 00 	movzx  edx,WORD PTR [edx+0x464]
10000204:	29 c8                	sub    eax,ecx
10000206:	29 73 04             	sub    DWORD PTR [ebx+0x4],esi
10000209:	89 f1                	mov    ecx,esi
1000020b:	8d 84 10 d0 02 00 00 	lea    eax,[eax+edx*1+0x2d0]
10000212:	d3 ef                	shr    edi,cl
10000214:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
10000217:	0f b7 54 45 04       	movzx  edx,WORD PTR [ebp+eax*2+0x4]
1000021c:	5b                   	pop    ebx
1000021d:	89 d0                	mov    eax,edx
1000021f:	5e                   	pop    esi
10000220:	5f                   	pop    edi
10000221:	5d                   	pop    ebp
10000222:	c3                   	ret    

10000223 <_ssfn__zexpand>:
10000223:	55                   	push   ebp
10000224:	57                   	push   edi
10000225:	56                   	push   esi
10000226:	53                   	push   ebx
10000227:	83 ec 0c             	sub    esp,0xc
1000022a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
1000022d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
10000230:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
10000233:	29 f9                	sub    ecx,edi
10000235:	83 f9 08             	cmp    ecx,0x8
10000238:	74 04                	je     1000023e <_ssfn__zexpand+0x1b>
1000023a:	31 c0                	xor    eax,eax
1000023c:	eb 3c                	jmp    1000027a <_ssfn__zexpand+0x57>
1000023e:	80 3f 53             	cmp    BYTE PTR [edi],0x53
10000241:	75 f7                	jne    1000023a <_ssfn__zexpand+0x17>
10000243:	80 7f 01 46          	cmp    BYTE PTR [edi+0x1],0x46
10000247:	75 f1                	jne    1000023a <_ssfn__zexpand+0x17>
10000249:	80 7f 02 4e          	cmp    BYTE PTR [edi+0x2],0x4e
1000024d:	75 eb                	jne    1000023a <_ssfn__zexpand+0x17>
1000024f:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
10000252:	89 c3                	mov    ebx,eax
10000254:	89 d6                	mov    esi,edx
10000256:	50                   	push   eax
10000257:	50                   	push   eax
10000258:	55                   	push   ebp
10000259:	57                   	push   edi
1000025a:	e8 fc ff ff ff       	call   1000025b <_ssfn__zexpand+0x38>	1000025b: R_386_PC32	realloc
1000025f:	83 c4 10             	add    esp,0x10
10000262:	85 c0                	test   eax,eax
10000264:	74 d4                	je     1000023a <_ssfn__zexpand+0x17>
10000266:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10000269:	29 fe                	sub    esi,edi
1000026b:	01 c6                	add    esi,eax
1000026d:	01 e8                	add    eax,ebp
1000026f:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
10000272:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10000275:	b8 01 00 00 00       	mov    eax,0x1
1000027a:	83 c4 0c             	add    esp,0xc
1000027d:	5b                   	pop    ebx
1000027e:	5e                   	pop    esi
1000027f:	5f                   	pop    edi
10000280:	5d                   	pop    ebp
10000281:	c3                   	ret    

10000282 <_ssfn__zbuild_huffman>:
10000282:	55                   	push   ebp
10000283:	57                   	push   edi
10000284:	56                   	push   esi
10000285:	53                   	push   ebx
10000286:	89 c3                	mov    ebx,eax
10000288:	81 ec a0 00 00 00    	sub    esp,0xa0
1000028e:	31 c0                	xor    eax,eax
10000290:	89 0c 24             	mov    DWORD PTR [esp],ecx
10000293:	8d 6c 24 5c          	lea    ebp,[esp+0x5c]
10000297:	b9 11 00 00 00       	mov    ecx,0x11
1000029c:	89 ef                	mov    edi,ebp
1000029e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
100002a2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100002a4:	b9 00 01 00 00       	mov    ecx,0x100
100002a9:	89 df                	mov    edi,ebx
100002ab:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100002ad:	3b 04 24             	cmp    eax,DWORD PTR [esp]
100002b0:	7d 0f                	jge    100002c1 <_ssfn__zbuild_huffman+0x3f>
100002b2:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
100002b6:	0f b6 0c 06          	movzx  ecx,BYTE PTR [esi+eax*1]
100002ba:	40                   	inc    eax
100002bb:	ff 44 8c 5c          	inc    DWORD PTR [esp+ecx*4+0x5c]
100002bf:	eb ec                	jmp    100002ad <_ssfn__zbuild_huffman+0x2b>
100002c1:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
100002c9:	b9 01 00 00 00       	mov    ecx,0x1
100002ce:	b8 01 00 00 00       	mov    eax,0x1
100002d3:	89 c7                	mov    edi,eax
100002d5:	d3 e7                	shl    edi,cl
100002d7:	39 7c 8d 00          	cmp    DWORD PTR [ebp+ecx*4+0x0],edi
100002db:	0f 8f 10 01 00 00    	jg     100003f1 <_ssfn__zbuild_huffman+0x16f>
100002e1:	41                   	inc    ecx
100002e2:	83 f9 10             	cmp    ecx,0x10
100002e5:	75 ec                	jne    100002d3 <_ssfn__zbuild_huffman+0x51>
100002e7:	31 ff                	xor    edi,edi
100002e9:	31 f6                	xor    esi,esi
100002eb:	b8 01 00 00 00       	mov    eax,0x1
100002f0:	8b 6c 84 5c          	mov    ebp,DWORD PTR [esp+eax*4+0x5c]
100002f4:	89 7c 84 1c          	mov    DWORD PTR [esp+eax*4+0x1c],edi
100002f8:	66 89 bc 43 00 04 00 00 	mov    WORD PTR [ebx+eax*2+0x400],di
10000300:	66 89 b4 43 64 04 00 00 	mov    WORD PTR [ebx+eax*2+0x464],si
10000308:	01 ef                	add    edi,ebp
1000030a:	85 ed                	test   ebp,ebp
1000030c:	74 11                	je     1000031f <_ssfn__zbuild_huffman+0x9d>
1000030e:	ba 01 00 00 00       	mov    edx,0x1
10000313:	88 c1                	mov    cl,al
10000315:	d3 e2                	shl    edx,cl
10000317:	39 fa                	cmp    edx,edi
10000319:	0f 8c d2 00 00 00    	jl     100003f1 <_ssfn__zbuild_huffman+0x16f>
1000031f:	89 fa                	mov    edx,edi
10000321:	b9 10 00 00 00       	mov    ecx,0x10
10000326:	01 ff                	add    edi,edi
10000328:	29 c1                	sub    ecx,eax
1000032a:	01 ee                	add    esi,ebp
1000032c:	d3 e2                	shl    edx,cl
1000032e:	89 94 83 20 04 00 00 	mov    DWORD PTR [ebx+eax*4+0x420],edx
10000335:	40                   	inc    eax
10000336:	83 f8 10             	cmp    eax,0x10
10000339:	75 b5                	jne    100002f0 <_ssfn__zbuild_huffman+0x6e>
1000033b:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000033e:	c7 83 60 04 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x460],0x10000
10000348:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000034c:	31 ff                	xor    edi,edi
1000034e:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
10000352:	0f 8d 9d 00 00 00    	jge    100003f5 <_ssfn__zbuild_huffman+0x173>
10000358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000035c:	0f b6 34 38          	movzx  esi,BYTE PTR [eax+edi*1]
10000360:	89 f2                	mov    edx,esi
10000362:	85 f6                	test   esi,esi
10000364:	0f 84 81 00 00 00    	je     100003eb <_ssfn__zbuild_huffman+0x169>
1000036a:	8d 0c 36             	lea    ecx,[esi+esi*1]
1000036d:	8b 6c b4 1c          	mov    ebp,DWORD PTR [esp+esi*4+0x1c]
10000371:	8d 04 19             	lea    eax,[ecx+ebx*1]
10000374:	89 e9                	mov    ecx,ebp
10000376:	89 04 24             	mov    DWORD PTR [esp],eax
10000379:	0f b7 80 00 04 00 00 	movzx  eax,WORD PTR [eax+0x400]
10000380:	29 c1                	sub    ecx,eax
10000382:	89 c8                	mov    eax,ecx
10000384:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10000387:	0f b7 89 64 04 00 00 	movzx  ecx,WORD PTR [ecx+0x464]
1000038e:	01 c8                	add    eax,ecx
10000390:	83 fe 09             	cmp    esi,0x9
10000393:	88 94 03 84 04 00 00 	mov    BYTE PTR [ebx+eax*1+0x484],dl
1000039a:	66 89 bc 43 a4 05 00 00 	mov    WORD PTR [ebx+eax*2+0x5a4],di
100003a2:	7f 42                	jg     100003e6 <_ssfn__zbuild_huffman+0x164>
100003a4:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
100003a8:	89 e8                	mov    eax,ebp
100003aa:	e8 79 fd ff ff       	call   10000128 <_ssfn__bitreverse16>
100003af:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
100003b3:	b9 10 00 00 00       	mov    ecx,0x10
100003b8:	29 f1                	sub    ecx,esi
100003ba:	d3 f8                	sar    eax,cl
100003bc:	88 d1                	mov    cl,dl
100003be:	89 04 24             	mov    DWORD PTR [esp],eax
100003c1:	89 f2                	mov    edx,esi
100003c3:	b8 01 00 00 00       	mov    eax,0x1
100003c8:	c1 e2 09             	shl    edx,0x9
100003cb:	d3 e0                	shl    eax,cl
100003cd:	09 fa                	or     edx,edi
100003cf:	89 c1                	mov    ecx,eax
100003d1:	81 3c 24 ff 01 00 00 	cmp    DWORD PTR [esp],0x1ff
100003d8:	7f 0c                	jg     100003e6 <_ssfn__zbuild_huffman+0x164>
100003da:	8b 04 24             	mov    eax,DWORD PTR [esp]
100003dd:	01 0c 24             	add    DWORD PTR [esp],ecx
100003e0:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
100003e4:	eb eb                	jmp    100003d1 <_ssfn__zbuild_huffman+0x14f>
100003e6:	45                   	inc    ebp
100003e7:	89 6c b4 1c          	mov    DWORD PTR [esp+esi*4+0x1c],ebp
100003eb:	47                   	inc    edi
100003ec:	e9 5d ff ff ff       	jmp    1000034e <_ssfn__zbuild_huffman+0xcc>
100003f1:	31 c0                	xor    eax,eax
100003f3:	eb 05                	jmp    100003fa <_ssfn__zbuild_huffman+0x178>
100003f5:	b8 01 00 00 00       	mov    eax,0x1
100003fa:	81 c4 a0 00 00 00    	add    esp,0xa0
10000400:	5b                   	pop    ebx
10000401:	5e                   	pop    esi
10000402:	5f                   	pop    edi
10000403:	5d                   	pop    ebp
10000404:	c3                   	ret    

10000405 <_ssfn_fc.part.1>:
10000405:	55                   	push   ebp
10000406:	57                   	push   edi
10000407:	8d b8 6c f5 00 00    	lea    edi,[eax+0xf56c]
1000040d:	56                   	push   esi
1000040e:	53                   	push   ebx
1000040f:	8d 98 28 f5 00 00    	lea    ebx,[eax+0xf528]
10000415:	83 ec 0c             	sub    esp,0xc
10000418:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
1000041b:	74 5d                	je     1000047a <_ssfn_fc.part.1+0x75>
1000041d:	31 f6                	xor    esi,esi
1000041f:	8b 03                	mov    eax,DWORD PTR [ebx]
10000421:	83 3c 30 00          	cmp    DWORD PTR [eax+esi*1],0x0
10000425:	74 35                	je     1000045c <_ssfn_fc.part.1+0x57>
10000427:	31 ed                	xor    ebp,ebp
10000429:	8b 03                	mov    eax,DWORD PTR [ebx]
1000042b:	8b 04 30             	mov    eax,DWORD PTR [eax+esi*1]
1000042e:	8b 04 28             	mov    eax,DWORD PTR [eax+ebp*1]
10000431:	85 c0                	test   eax,eax
10000433:	74 0c                	je     10000441 <_ssfn_fc.part.1+0x3c>
10000435:	83 ec 0c             	sub    esp,0xc
10000438:	50                   	push   eax
10000439:	e8 fc ff ff ff       	call   1000043a <_ssfn_fc.part.1+0x35>	1000043a: R_386_PC32	free
1000043e:	83 c4 10             	add    esp,0x10
10000441:	83 c5 04             	add    ebp,0x4
10000444:	81 fd 00 04 00 00    	cmp    ebp,0x400
1000044a:	75 dd                	jne    10000429 <_ssfn_fc.part.1+0x24>
1000044c:	83 ec 0c             	sub    esp,0xc
1000044f:	8b 03                	mov    eax,DWORD PTR [ebx]
10000451:	ff 34 30             	push   DWORD PTR [eax+esi*1]
10000454:	e8 fc ff ff ff       	call   10000455 <_ssfn_fc.part.1+0x50>	10000455: R_386_PC32	free
10000459:	83 c4 10             	add    esp,0x10
1000045c:	83 c6 04             	add    esi,0x4
1000045f:	81 fe 00 04 00 00    	cmp    esi,0x400
10000465:	75 b8                	jne    1000041f <_ssfn_fc.part.1+0x1a>
10000467:	83 ec 0c             	sub    esp,0xc
1000046a:	ff 33                	push   DWORD PTR [ebx]
1000046c:	e8 fc ff ff ff       	call   1000046d <_ssfn_fc.part.1+0x68>	1000046d: R_386_PC32	free
10000471:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
10000477:	83 c4 10             	add    esp,0x10
1000047a:	83 c3 04             	add    ebx,0x4
1000047d:	39 fb                	cmp    ebx,edi
1000047f:	75 97                	jne    10000418 <_ssfn_fc.part.1+0x13>
10000481:	83 c4 0c             	add    esp,0xc
10000484:	5b                   	pop    ebx
10000485:	5e                   	pop    esi
10000486:	5f                   	pop    edi
10000487:	5d                   	pop    ebp
10000488:	c3                   	ret    

10000489 <_ssfn_l>:
10000489:	57                   	push   edi
1000048a:	56                   	push   esi
1000048b:	53                   	push   ebx
1000048c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10000490:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10000494:	39 ce                	cmp    esi,ecx
10000496:	89 f3                	mov    ebx,esi
10000498:	0f 9d c1             	setge  cl
1000049b:	c1 eb 1f             	shr    ebx,0x1f
1000049e:	09 d9                	or     ecx,ebx
100004a0:	89 fb                	mov    ebx,edi
100004a2:	c1 eb 1f             	shr    ebx,0x1f
100004a5:	08 d9                	or     cl,bl
100004a7:	0f 85 e9 00 00 00    	jne    10000596 <_ssfn_l+0x10d>
100004ad:	39 d7                	cmp    edi,edx
100004af:	0f 8d e1 00 00 00    	jge    10000596 <_ssfn_l+0x10d>
100004b5:	8b 88 9c f5 00 00    	mov    ecx,DWORD PTR [eax+0xf59c]
100004bb:	8d 51 08             	lea    edx,[ecx+0x8]
100004be:	8d 4f 08             	lea    ecx,[edi+0x8]
100004c1:	c1 fa 04             	sar    edx,0x4
100004c4:	c1 f9 04             	sar    ecx,0x4
100004c7:	39 ca                	cmp    edx,ecx
100004c9:	75 1a                	jne    100004e5 <_ssfn_l+0x5c>
100004cb:	8b 90 a0 f5 00 00    	mov    edx,DWORD PTR [eax+0xf5a0]
100004d1:	8d 4e 08             	lea    ecx,[esi+0x8]
100004d4:	83 c2 08             	add    edx,0x8
100004d7:	c1 f9 04             	sar    ecx,0x4
100004da:	c1 fa 04             	sar    edx,0x4
100004dd:	39 ca                	cmp    edx,ecx
100004df:	0f 84 b1 00 00 00    	je     10000596 <_ssfn_l+0x10d>
100004e5:	89 c3                	mov    ebx,eax
100004e7:	8b 80 80 f5 00 00    	mov    eax,DWORD PTR [eax+0xf580]
100004ed:	39 83 84 f5 00 00    	cmp    DWORD PTR [ebx+0xf584],eax
100004f3:	7f 3e                	jg     10000533 <_ssfn_l+0xaa>
100004f5:	05 00 02 00 00       	add    eax,0x200
100004fa:	89 83 84 f5 00 00    	mov    DWORD PTR [ebx+0xf584],eax
10000500:	52                   	push   edx
10000501:	01 c0                	add    eax,eax
10000503:	52                   	push   edx
10000504:	50                   	push   eax
10000505:	ff b3 6c f5 00 00    	push   DWORD PTR [ebx+0xf56c]
1000050b:	e8 fc ff ff ff       	call   1000050c <_ssfn_l+0x83>	1000050c: R_386_PC32	realloc
10000510:	83 c4 10             	add    esp,0x10
10000513:	89 83 6c f5 00 00    	mov    DWORD PTR [ebx+0xf56c],eax
10000519:	85 c0                	test   eax,eax
1000051b:	75 16                	jne    10000533 <_ssfn_l+0xaa>
1000051d:	c7 83 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf580],0x0
10000527:	c7 83 84 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf584],0x0
10000531:	eb 63                	jmp    10000596 <_ssfn_l+0x10d>
10000533:	83 bb 80 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf580],0x0
1000053a:	75 26                	jne    10000562 <_ssfn_l+0xd9>
1000053c:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000542:	8b 93 94 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf594]
10000548:	66 89 10             	mov    WORD PTR [eax],dx
1000054b:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000551:	8b 93 98 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf598]
10000557:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
1000055b:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10000562:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000568:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000056e:	66 89 3c 50          	mov    WORD PTR [eax+edx*2],di
10000572:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10000578:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
1000057e:	66 89 74 50 02       	mov    WORD PTR [eax+edx*2+0x2],si
10000583:	89 bb 9c f5 00 00    	mov    DWORD PTR [ebx+0xf59c],edi
10000589:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10000590:	89 b3 a0 f5 00 00    	mov    DWORD PTR [ebx+0xf5a0],esi
10000596:	5b                   	pop    ebx
10000597:	5e                   	pop    esi
10000598:	5f                   	pop    edi
10000599:	c3                   	ret    

1000059a <_ssfn_b>:
1000059a:	55                   	push   ebp
1000059b:	57                   	push   edi
1000059c:	56                   	push   esi
1000059d:	53                   	push   ebx
1000059e:	83 ec 4c             	sub    esp,0x4c
100005a1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
100005a5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
100005a9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100005ad:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
100005b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100005b5:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
100005b9:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100005bd:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
100005c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100005c5:	8b 7c 24 70          	mov    edi,DWORD PTR [esp+0x70]
100005c9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
100005cd:	8b 4c 24 74          	mov    ecx,DWORD PTR [esp+0x74]
100005d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100005d5:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100005d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100005dd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100005e4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100005e8:	83 f8 04             	cmp    eax,0x4
100005eb:	75 28                	jne    10000615 <_ssfn_b+0x7b>
100005ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100005f1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
100005f5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
100005f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
100005fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000601:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
10000605:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10000609:	83 c4 4c             	add    esp,0x4c
1000060c:	5b                   	pop    ebx
1000060d:	5e                   	pop    esi
1000060e:	5f                   	pop    edi
1000060f:	5d                   	pop    ebp
10000610:	e9 74 fe ff ff       	jmp    10000489 <_ssfn_l>
10000615:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10000619:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
1000061d:	75 0e                	jne    1000062d <_ssfn_b+0x93>
1000061f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10000623:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
10000627:	0f 84 19 01 00 00    	je     10000746 <_ssfn_b+0x1ac>
1000062d:	be 02 00 00 00       	mov    esi,0x2
10000632:	89 d8                	mov    eax,ebx
10000634:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
10000638:	99                   	cdq    
10000639:	f7 fe                	idiv   esi
1000063b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
1000063f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10000643:	89 e8                	mov    eax,ebp
10000645:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
10000649:	99                   	cdq    
1000064a:	f7 fe                	idiv   esi
1000064c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
10000650:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000654:	89 f8                	mov    eax,edi
10000656:	29 d8                	sub    eax,ebx
10000658:	99                   	cdq    
10000659:	f7 fe                	idiv   esi
1000065b:	01 c3                	add    ebx,eax
1000065d:	89 c8                	mov    eax,ecx
1000065f:	29 e8                	sub    eax,ebp
10000661:	99                   	cdq    
10000662:	f7 fe                	idiv   esi
10000664:	01 e8                	add    eax,ebp
10000666:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000066a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000066e:	29 f8                	sub    eax,edi
10000670:	99                   	cdq    
10000671:	f7 fe                	idiv   esi
10000673:	01 f8                	add    eax,edi
10000675:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
10000679:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
1000067d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000681:	29 c8                	sub    eax,ecx
10000683:	99                   	cdq    
10000684:	f7 fe                	idiv   esi
10000686:	01 c8                	add    eax,ecx
10000688:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000068c:	89 d8                	mov    eax,ebx
1000068e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
10000692:	99                   	cdq    
10000693:	f7 fe                	idiv   esi
10000695:	8d 0c 38             	lea    ecx,[eax+edi*1]
10000698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
1000069c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
100006a0:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
100006a4:	99                   	cdq    
100006a5:	f7 fe                	idiv   esi
100006a7:	8d 2c 38             	lea    ebp,[eax+edi*1]
100006aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100006ae:	29 d8                	sub    eax,ebx
100006b0:	99                   	cdq    
100006b1:	f7 fe                	idiv   esi
100006b3:	83 ec 0c             	sub    esp,0xc
100006b6:	01 d8                	add    eax,ebx
100006b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100006bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100006c0:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
100006c4:	99                   	cdq    
100006c5:	f7 fe                	idiv   esi
100006c7:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
100006cb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100006cf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100006d3:	29 c8                	sub    eax,ecx
100006d5:	99                   	cdq    
100006d6:	f7 fe                	idiv   esi
100006d8:	8d 1c 08             	lea    ebx,[eax+ecx*1]
100006db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100006df:	29 e8                	sub    eax,ebp
100006e1:	99                   	cdq    
100006e2:	f7 fe                	idiv   esi
100006e4:	8d 34 28             	lea    esi,[eax+ebp*1]
100006e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100006eb:	8d 78 01             	lea    edi,[eax+0x1]
100006ee:	57                   	push   edi
100006ef:	56                   	push   esi
100006f0:	53                   	push   ebx
100006f1:	55                   	push   ebp
100006f2:	51                   	push   ecx
100006f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100006f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100006fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100006ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
10000703:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10000707:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
1000070b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
1000070f:	e8 86 fe ff ff       	call   1000059a <_ssfn_b>
10000714:	83 c4 24             	add    esp,0x24
10000717:	57                   	push   edi
10000718:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
1000071c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000720:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
10000724:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
10000728:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
1000072c:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
10000730:	56                   	push   esi
10000731:	53                   	push   ebx
10000732:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10000736:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
1000073a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
1000073e:	e8 57 fe ff ff       	call   1000059a <_ssfn_b>
10000743:	83 c4 30             	add    esp,0x30
10000746:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
1000074b:	0f 85 9c fe ff ff    	jne    100005ed <_ssfn_b+0x53>
10000751:	83 c4 4c             	add    esp,0x4c
10000754:	5b                   	pop    ebx
10000755:	5e                   	pop    esi
10000756:	5f                   	pop    edi
10000757:	5d                   	pop    ebp
10000758:	c3                   	ret    

10000759 <_ssfn__zreceive>:
10000759:	56                   	push   esi
1000075a:	53                   	push   ebx
1000075b:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
1000075e:	7d 1d                	jge    1000077d <_ssfn__zreceive+0x24>
10000760:	8b 18                	mov    ebx,DWORD PTR [eax]
10000762:	8d 4b 01             	lea    ecx,[ebx+0x1]
10000765:	89 08                	mov    DWORD PTR [eax],ecx
10000767:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
1000076a:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
1000076d:	d3 e3                	shl    ebx,cl
1000076f:	83 c1 08             	add    ecx,0x8
10000772:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
10000775:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000778:	83 f9 18             	cmp    ecx,0x18
1000077b:	7e e3                	jle    10000760 <_ssfn__zreceive+0x7>
1000077d:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
10000780:	29 50 04             	sub    DWORD PTR [eax+0x4],edx
10000783:	89 f3                	mov    ebx,esi
10000785:	88 d1                	mov    cl,dl
10000787:	d3 eb                	shr    ebx,cl
10000789:	88 d1                	mov    cl,dl
1000078b:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
1000078e:	bb 01 00 00 00       	mov    ebx,0x1
10000793:	d3 e3                	shl    ebx,cl
10000795:	8d 43 ff             	lea    eax,[ebx-0x1]
10000798:	5b                   	pop    ebx
10000799:	21 f0                	and    eax,esi
1000079b:	5e                   	pop    esi
1000079c:	c3                   	ret    

1000079d <ssfn_utf8>:
1000079d:	56                   	push   esi
1000079e:	53                   	push   ebx
1000079f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
100007a3:	8b 11                	mov    edx,DWORD PTR [ecx]
100007a5:	0f b6 32             	movzx  esi,BYTE PTR [edx]
100007a8:	89 f0                	mov    eax,esi
100007aa:	84 c0                	test   al,al
100007ac:	0f be d8             	movsx  ebx,al
100007af:	78 04                	js     100007b5 <ssfn_utf8+0x18>
100007b1:	89 d8                	mov    eax,ebx
100007b3:	eb 7d                	jmp    10000832 <ssfn_utf8+0x95>
100007b5:	f7 c6 20 00 00 00    	test   esi,0x20
100007bb:	75 14                	jne    100007d1 <ssfn_utf8+0x34>
100007bd:	8a 42 01             	mov    al,BYTE PTR [edx+0x1]
100007c0:	c1 e3 06             	shl    ebx,0x6
100007c3:	83 e0 3f             	and    eax,0x3f
100007c6:	81 e3 c0 07 00 00    	and    ebx,0x7c0
100007cc:	42                   	inc    edx
100007cd:	09 d8                	or     eax,ebx
100007cf:	eb 5f                	jmp    10000830 <ssfn_utf8+0x93>
100007d1:	f7 c6 10 00 00 00    	test   esi,0x10
100007d7:	75 20                	jne    100007f9 <ssfn_utf8+0x5c>
100007d9:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
100007dd:	c1 e3 0c             	shl    ebx,0xc
100007e0:	c1 e0 06             	shl    eax,0x6
100007e3:	0f b7 db             	movzx  ebx,bx
100007e6:	25 c0 0f 00 00       	and    eax,0xfc0
100007eb:	83 c2 02             	add    edx,0x2
100007ee:	09 d8                	or     eax,ebx
100007f0:	8a 1a                	mov    bl,BYTE PTR [edx]
100007f2:	83 e3 3f             	and    ebx,0x3f
100007f5:	09 d8                	or     eax,ebx
100007f7:	eb 37                	jmp    10000830 <ssfn_utf8+0x93>
100007f9:	31 c0                	xor    eax,eax
100007fb:	83 e6 08             	and    esi,0x8
100007fe:	75 32                	jne    10000832 <ssfn_utf8+0x95>
10000800:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
10000804:	c1 e3 12             	shl    ebx,0x12
10000807:	c1 e0 0c             	shl    eax,0xc
1000080a:	81 e3 00 00 1c 00    	and    ebx,0x1c0000
10000810:	25 00 f0 03 00       	and    eax,0x3f000
10000815:	83 c2 03             	add    edx,0x3
10000818:	09 d8                	or     eax,ebx
1000081a:	8a 1a                	mov    bl,BYTE PTR [edx]
1000081c:	83 e3 3f             	and    ebx,0x3f
1000081f:	09 d8                	or     eax,ebx
10000821:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
10000825:	c1 e3 06             	shl    ebx,0x6
10000828:	81 e3 c0 0f 00 00    	and    ebx,0xfc0
1000082e:	09 d8                	or     eax,ebx
10000830:	89 11                	mov    DWORD PTR [ecx],edx
10000832:	ff 01                	inc    DWORD PTR [ecx]
10000834:	5b                   	pop    ebx
10000835:	5e                   	pop    esi
10000836:	c3                   	ret    

10000837 <_ssfn_c>:
10000837:	55                   	push   ebp
10000838:	57                   	push   edi
10000839:	56                   	push   esi
1000083a:	53                   	push   ebx
1000083b:	83 ec 14             	sub    esp,0x14
1000083e:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
10000844:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10000848:	85 c0                	test   eax,eax
1000084a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
10000850:	0f 84 e6 00 00 00    	je     1000093c <_ssfn_c+0x105>
10000856:	31 ff                	xor    edi,edi
10000858:	83 78 10 00          	cmp    DWORD PTR [eax+0x10],0x0
1000085c:	0f 84 f3 00 00 00    	je     10000955 <_ssfn_c+0x11e>
10000862:	85 d2                	test   edx,edx
10000864:	0f 84 eb 00 00 00    	je     10000955 <_ssfn_c+0x11e>
1000086a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
1000086d:	0f 84 e2 00 00 00    	je     10000955 <_ssfn_c+0x11e>
10000873:	89 d6                	mov    esi,edx
10000875:	89 cd                	mov    ebp,ecx
10000877:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
1000087a:	89 c3                	mov    ebx,eax
1000087c:	85 d2                	test   edx,edx
1000087e:	74 38                	je     100008b8 <_ssfn_c+0x81>
10000880:	8d 0c 13             	lea    ecx,[ebx+edx*1]
10000883:	31 c0                	xor    eax,eax
10000885:	89 0c 24             	mov    DWORD PTR [esp],ecx
10000888:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
1000088b:	0f b7 14 41          	movzx  edx,WORD PTR [ecx+eax*2]
1000088f:	66 85 d2             	test   dx,dx
10000892:	74 24                	je     100008b8 <_ssfn_c+0x81>
10000894:	01 da                	add    edx,ebx
10000896:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
1000089a:	8a 0a                	mov    cl,BYTE PTR [edx]
1000089c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
100008a0:	84 c9                	test   cl,cl
100008a2:	0f 84 9e 00 00 00    	je     10000946 <_ssfn_c+0x10f>
100008a8:	3a 0f                	cmp    cl,BYTE PTR [edi]
100008aa:	0f 85 90 00 00 00    	jne    10000940 <_ssfn_c+0x109>
100008b0:	47                   	inc    edi
100008b1:	42                   	inc    edx
100008b2:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
100008b6:	eb e2                	jmp    1000089a <_ssfn_c+0x63>
100008b8:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
100008bc:	8d 44 24 10          	lea    eax,[esp+0x10]
100008c0:	50                   	push   eax
100008c1:	e8 fc ff ff ff       	call   100008c2 <_ssfn_c+0x8b>	100008c2: R_386_PC32	ssfn_utf8
100008c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100008ca:	29 f2                	sub    edx,esi
100008cc:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
100008cf:	5a                   	pop    edx
100008d0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
100008d4:	89 06                	mov    DWORD PTR [esi],eax
100008d6:	03 5b 10             	add    ebx,DWORD PTR [ebx+0x10]
100008d9:	89 df                	mov    edi,ebx
100008db:	31 db                	xor    ebx,ebx
100008dd:	8a 17                	mov    dl,BYTE PTR [edi]
100008df:	80 fa ff             	cmp    dl,0xff
100008e2:	75 08                	jne    100008ec <_ssfn_c+0xb5>
100008e4:	81 c3 ff ff 00 00    	add    ebx,0xffff
100008ea:	eb 2a                	jmp    10000916 <_ssfn_c+0xdf>
100008ec:	88 d1                	mov    cl,dl
100008ee:	83 e1 c0             	and    ecx,0xffffffc0
100008f1:	80 f9 c0             	cmp    cl,0xc0
100008f4:	75 16                	jne    1000090c <_ssfn_c+0xd5>
100008f6:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
100008fa:	c1 e2 08             	shl    edx,0x8
100008fd:	83 c7 02             	add    edi,0x2
10000900:	81 e2 00 3f 00 00    	and    edx,0x3f00
10000906:	09 ca                	or     edx,ecx
10000908:	01 d3                	add    ebx,edx
1000090a:	eb 27                	jmp    10000933 <_ssfn_c+0xfc>
1000090c:	80 f9 80             	cmp    cl,0x80
1000090f:	75 08                	jne    10000919 <_ssfn_c+0xe2>
10000911:	83 e2 3f             	and    edx,0x3f
10000914:	01 d3                	add    ebx,edx
10000916:	47                   	inc    edi
10000917:	eb 1a                	jmp    10000933 <_ssfn_c+0xfc>
10000919:	39 d8                	cmp    eax,ebx
1000091b:	74 38                	je     10000955 <_ssfn_c+0x11e>
1000091d:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
10000921:	83 e2 40             	and    edx,0x40
10000924:	80 fa 01             	cmp    dl,0x1
10000927:	19 d2                	sbb    edx,edx
10000929:	83 c2 06             	add    edx,0x6
1000092c:	0f af d1             	imul   edx,ecx
1000092f:	8d 7c 17 06          	lea    edi,[edi+edx*1+0x6]
10000933:	43                   	inc    ebx
10000934:	81 fb ff ff 10 00    	cmp    ebx,0x10ffff
1000093a:	76 a1                	jbe    100008dd <_ssfn_c+0xa6>
1000093c:	31 ff                	xor    edi,edi
1000093e:	eb 15                	jmp    10000955 <_ssfn_c+0x11e>
10000940:	40                   	inc    eax
10000941:	e9 42 ff ff ff       	jmp    10000888 <_ssfn_c+0x51>
10000946:	29 f7                	sub    edi,esi
10000948:	05 00 f0 00 00       	add    eax,0xf000
1000094d:	89 7d 00             	mov    DWORD PTR [ebp+0x0],edi
10000950:	e9 7b ff ff ff       	jmp    100008d0 <_ssfn_c+0x99>
10000955:	83 c4 14             	add    esp,0x14
10000958:	89 f8                	mov    eax,edi
1000095a:	5b                   	pop    ebx
1000095b:	5e                   	pop    esi
1000095c:	5f                   	pop    edi
1000095d:	5d                   	pop    ebp
1000095e:	c3                   	ret    

1000095f <_ssfn_zlib_decode>:
1000095f:	55                   	push   ebp
10000960:	57                   	push   edi
10000961:	56                   	push   esi
10000962:	53                   	push   ebx
10000963:	81 ec c8 19 00 00    	sub    esp,0x19c8
10000969:	6a 08                	push   0x8
1000096b:	e8 fc ff ff ff       	call   1000096c <_ssfn_zlib_decode+0xd>	1000096c: R_386_PC32	malloc
10000970:	83 c4 10             	add    esp,0x10
10000973:	89 c2                	mov    edx,eax
10000975:	85 c0                	test   eax,eax
10000977:	0f 84 eb 04 00 00    	je     10000e68 <_ssfn_zlib_decode+0x509>
1000097d:	8b 84 24 d0 19 00 00 	mov    eax,DWORD PTR [esp+0x19d0]
10000984:	89 94 24 e0 09 00 00 	mov    DWORD PTR [esp+0x9e0],edx
1000098b:	89 84 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],eax
10000992:	89 94 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],edx
10000999:	31 c0                	xor    eax,eax
1000099b:	83 c2 08             	add    edx,0x8
1000099e:	89 94 24 e4 09 00 00 	mov    DWORD PTR [esp+0x9e4],edx
100009a5:	c6 80 80 70 03 10 08 	mov    BYTE PTR [eax+0x10037080],0x8	100009a7: R_386_32	.bss
100009ac:	40                   	inc    eax
100009ad:	3d 90 00 00 00       	cmp    eax,0x90
100009b2:	75 f1                	jne    100009a5 <_ssfn_zlib_decode+0x46>
100009b4:	c6 80 80 70 03 10 09 	mov    BYTE PTR [eax+0x10037080],0x9	100009b6: R_386_32	.bss
100009bb:	40                   	inc    eax
100009bc:	3d 00 01 00 00       	cmp    eax,0x100
100009c1:	75 f1                	jne    100009b4 <_ssfn_zlib_decode+0x55>
100009c3:	c6 80 80 70 03 10 07 	mov    BYTE PTR [eax+0x10037080],0x7	100009c5: R_386_32	.bss
100009ca:	40                   	inc    eax
100009cb:	3d 18 01 00 00       	cmp    eax,0x118
100009d0:	75 f1                	jne    100009c3 <_ssfn_zlib_decode+0x64>
100009d2:	c7 05 98 71 03 10 08 08 08 08 	mov    DWORD PTR ds:0x10037198,0x8080808	100009d4: R_386_32	.bss
100009dc:	c7 05 9c 71 03 10 08 08 08 08 	mov    DWORD PTR ds:0x1003719c,0x8080808	100009de: R_386_32	.bss
100009e6:	31 c0                	xor    eax,eax
100009e8:	c6 80 60 70 03 10 05 	mov    BYTE PTR [eax+0x10037060],0x5	100009ea: R_386_32	.bss
100009ef:	40                   	inc    eax
100009f0:	83 f8 20             	cmp    eax,0x20
100009f3:	75 f3                	jne    100009e8 <_ssfn_zlib_decode+0x89>
100009f5:	c7 84 24 d4 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d4],0x0
10000a00:	c7 84 24 d8 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d8],0x0
10000a0b:	ba 01 00 00 00       	mov    edx,0x1
10000a10:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000a17:	e8 3d fd ff ff       	call   10000759 <_ssfn__zreceive>
10000a1c:	ba 02 00 00 00       	mov    edx,0x2
10000a21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000a25:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000a2c:	e8 28 fd ff ff       	call   10000759 <_ssfn__zreceive>
10000a31:	89 c6                	mov    esi,eax
10000a33:	85 c0                	test   eax,eax
10000a35:	0f 85 09 01 00 00    	jne    10000b44 <_ssfn_zlib_decode+0x1e5>
10000a3b:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000a42:	83 e2 07             	and    edx,0x7
10000a45:	74 0c                	je     10000a53 <_ssfn_zlib_decode+0xf4>
10000a47:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000a4e:	e8 06 fd ff ff       	call   10000759 <_ssfn__zreceive>
10000a53:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000a5a:	8b 8c 24 d8 09 00 00 	mov    ecx,DWORD PTR [esp+0x9d8]
10000a61:	31 c0                	xor    eax,eax
10000a63:	31 db                	xor    ebx,ebx
10000a65:	85 d2                	test   edx,edx
10000a67:	7f 14                	jg     10000a7d <_ssfn_zlib_decode+0x11e>
10000a69:	84 db                	test   bl,bl
10000a6b:	74 22                	je     10000a8f <_ssfn_zlib_decode+0x130>
10000a6d:	89 94 24 d4 09 00 00 	mov    DWORD PTR [esp+0x9d4],edx
10000a74:	89 8c 24 d8 09 00 00 	mov    DWORD PTR [esp+0x9d8],ecx
10000a7b:	eb 12                	jmp    10000a8f <_ssfn_zlib_decode+0x130>
10000a7d:	40                   	inc    eax
10000a7e:	83 ea 08             	sub    edx,0x8
10000a81:	88 8c 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],cl
10000a88:	b3 01                	mov    bl,0x1
10000a8a:	c1 e9 08             	shr    ecx,0x8
10000a8d:	eb d6                	jmp    10000a65 <_ssfn_zlib_decode+0x106>
10000a8f:	83 f8 04             	cmp    eax,0x4
10000a92:	74 1d                	je     10000ab1 <_ssfn_zlib_decode+0x152>
10000a94:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000a9b:	40                   	inc    eax
10000a9c:	8d 4a 01             	lea    ecx,[edx+0x1]
10000a9f:	89 8c 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],ecx
10000aa6:	8a 12                	mov    dl,BYTE PTR [edx]
10000aa8:	88 94 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],dl
10000aaf:	eb de                	jmp    10000a8f <_ssfn_zlib_decode+0x130>
10000ab1:	0f b6 84 24 ec 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ec]
10000ab9:	0f b6 94 24 ee 01 00 00 	movzx  edx,BYTE PTR [esp+0x1ee]
10000ac1:	0f b6 9c 24 ed 01 00 00 	movzx  ebx,BYTE PTR [esp+0x1ed]
10000ac9:	c1 e3 08             	shl    ebx,0x8
10000acc:	01 c3                	add    ebx,eax
10000ace:	0f b6 84 24 ef 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ef]
10000ad6:	c1 e0 08             	shl    eax,0x8
10000ad9:	01 d0                	add    eax,edx
10000adb:	89 da                	mov    edx,ebx
10000add:	81 f2 ff ff 00 00    	xor    edx,0xffff
10000ae3:	39 d0                	cmp    eax,edx
10000ae5:	0f 85 69 03 00 00    	jne    10000e54 <_ssfn_zlib_decode+0x4f5>
10000aeb:	8b 94 24 dc 09 00 00 	mov    edx,DWORD PTR [esp+0x9dc]
10000af2:	8d 04 1a             	lea    eax,[edx+ebx*1]
10000af5:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000afc:	73 14                	jae    10000b12 <_ssfn_zlib_decode+0x1b3>
10000afe:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000b05:	e8 19 f7 ff ff       	call   10000223 <_ssfn__zexpand>
10000b0a:	85 c0                	test   eax,eax
10000b0c:	0f 84 42 03 00 00    	je     10000e54 <_ssfn_zlib_decode+0x4f5>
10000b12:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000b19:	8b 84 24 dc 09 00 00 	mov    eax,DWORD PTR [esp+0x9dc]
10000b20:	39 f3                	cmp    ebx,esi
10000b22:	74 09                	je     10000b2d <_ssfn_zlib_decode+0x1ce>
10000b24:	8a 14 32             	mov    dl,BYTE PTR [edx+esi*1]
10000b27:	88 14 30             	mov    BYTE PTR [eax+esi*1],dl
10000b2a:	46                   	inc    esi
10000b2b:	eb e5                	jmp    10000b12 <_ssfn_zlib_decode+0x1b3>
10000b2d:	01 da                	add    edx,ebx
10000b2f:	01 c3                	add    ebx,eax
10000b31:	89 94 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],edx
10000b38:	89 9c 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebx
10000b3f:	e9 fc 02 00 00       	jmp    10000e40 <_ssfn_zlib_decode+0x4e1>
10000b44:	83 f8 03             	cmp    eax,0x3
10000b47:	0f 84 07 03 00 00    	je     10000e54 <_ssfn_zlib_decode+0x4f5>
10000b4d:	4e                   	dec    esi
10000b4e:	75 2d                	jne    10000b7d <_ssfn_zlib_decode+0x21e>
10000b50:	b9 20 01 00 00       	mov    ecx,0x120
10000b55:	ba 80 70 03 10       	mov    edx,0x10037080	10000b56: R_386_32	.bss
10000b5a:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000b61:	e8 1c f7 ff ff       	call   10000282 <_ssfn__zbuild_huffman>
10000b66:	85 c0                	test   eax,eax
10000b68:	0f 84 e6 02 00 00    	je     10000e54 <_ssfn_zlib_decode+0x4f5>
10000b6e:	b9 20 00 00 00       	mov    ecx,0x20
10000b73:	ba 60 70 03 10       	mov    edx,0x10037060	10000b74: R_386_32	.bss
10000b78:	e9 78 01 00 00       	jmp    10000cf5 <_ssfn_zlib_decode+0x396>
10000b7d:	ba 05 00 00 00       	mov    edx,0x5
10000b82:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000b89:	8d 5c 24 12          	lea    ebx,[esp+0x12]
10000b8d:	e8 c7 fb ff ff       	call   10000759 <_ssfn__zreceive>
10000b92:	89 df                	mov    edi,ebx
10000b94:	ba 05 00 00 00       	mov    edx,0x5
10000b99:	89 c5                	mov    ebp,eax
10000b9b:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ba2:	e8 b2 fb ff ff       	call   10000759 <_ssfn__zreceive>
10000ba7:	ba 04 00 00 00       	mov    edx,0x4
10000bac:	89 c6                	mov    esi,eax
10000bae:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000bb5:	e8 9f fb ff ff       	call   10000759 <_ssfn__zreceive>
10000bba:	b9 13 00 00 00       	mov    ecx,0x13
10000bbf:	83 c0 04             	add    eax,0x4
10000bc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000bc6:	31 c0                	xor    eax,eax
10000bc8:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000bca:	31 ff                	xor    edi,edi
10000bcc:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10000bd0:	7e 1f                	jle    10000bf1 <_ssfn_zlib_decode+0x292>
10000bd2:	ba 03 00 00 00       	mov    edx,0x3
10000bd7:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000bde:	47                   	inc    edi
10000bdf:	e8 75 fb ff ff       	call   10000759 <_ssfn__zreceive>
10000be4:	0f b6 97 5f 6c 00 10 	movzx  edx,BYTE PTR [edi+0x10006c5f]	10000be7: R_386_32	.text
10000beb:	88 44 14 12          	mov    BYTE PTR [esp+edx*1+0x12],al
10000bef:	eb db                	jmp    10000bcc <_ssfn_zlib_decode+0x26d>
10000bf1:	b9 13 00 00 00       	mov    ecx,0x13
10000bf6:	89 da                	mov    edx,ebx
10000bf8:	8d 84 24 ec 01 00 00 	lea    eax,[esp+0x1ec]
10000bff:	e8 7e f6 ff ff       	call   10000282 <_ssfn__zbuild_huffman>
10000c04:	85 c0                	test   eax,eax
10000c06:	0f 84 48 02 00 00    	je     10000e54 <_ssfn_zlib_decode+0x4f5>
10000c0c:	8d 46 01             	lea    eax,[esi+0x1]
10000c0f:	81 c5 01 01 00 00    	add    ebp,0x101
10000c15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000c19:	31 f6                	xor    esi,esi
10000c1b:	01 e8                	add    eax,ebp
10000c1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000c21:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10000c25:	0f 8e 9f 00 00 00    	jle    10000cca <_ssfn_zlib_decode+0x36b>
10000c2b:	8d 94 24 ec 01 00 00 	lea    edx,[esp+0x1ec]
10000c32:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c39:	e8 35 f5 ff ff       	call   10000173 <_ssfn__zhuffman_decode>
10000c3e:	83 f8 12             	cmp    eax,0x12
10000c41:	0f 87 0d 02 00 00    	ja     10000e54 <_ssfn_zlib_decode+0x4f5>
10000c47:	83 f8 0f             	cmp    eax,0xf
10000c4a:	7f 07                	jg     10000c53 <_ssfn_zlib_decode+0x2f4>
10000c4c:	88 44 34 25          	mov    BYTE PTR [esp+esi*1+0x25],al
10000c50:	46                   	inc    esi
10000c51:	eb ce                	jmp    10000c21 <_ssfn_zlib_decode+0x2c2>
10000c53:	83 f8 10             	cmp    eax,0x10
10000c56:	75 22                	jne    10000c7a <_ssfn_zlib_decode+0x31b>
10000c58:	ba 02 00 00 00       	mov    edx,0x2
10000c5d:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c64:	e8 f0 fa ff ff       	call   10000759 <_ssfn__zreceive>
10000c69:	85 f6                	test   esi,esi
10000c6b:	8d 58 03             	lea    ebx,[eax+0x3]
10000c6e:	0f 84 e0 01 00 00    	je     10000e54 <_ssfn_zlib_decode+0x4f5>
10000c74:	8a 44 34 24          	mov    al,BYTE PTR [esp+esi*1+0x24]
10000c78:	eb 31                	jmp    10000cab <_ssfn_zlib_decode+0x34c>
10000c7a:	83 f8 11             	cmp    eax,0x11
10000c7d:	75 16                	jne    10000c95 <_ssfn_zlib_decode+0x336>
10000c7f:	ba 03 00 00 00       	mov    edx,0x3
10000c84:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c8b:	e8 c9 fa ff ff       	call   10000759 <_ssfn__zreceive>
10000c90:	8d 58 03             	lea    ebx,[eax+0x3]
10000c93:	eb 14                	jmp    10000ca9 <_ssfn_zlib_decode+0x34a>
10000c95:	ba 07 00 00 00       	mov    edx,0x7
10000c9a:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ca1:	e8 b3 fa ff ff       	call   10000759 <_ssfn__zreceive>
10000ca6:	8d 58 0b             	lea    ebx,[eax+0xb]
10000ca9:	31 c0                	xor    eax,eax
10000cab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000caf:	29 f2                	sub    edx,esi
10000cb1:	39 da                	cmp    edx,ebx
10000cb3:	0f 8c 9b 01 00 00    	jl     10000e54 <_ssfn_zlib_decode+0x4f5>
10000cb9:	8d 54 34 25          	lea    edx,[esp+esi*1+0x25]
10000cbd:	89 d9                	mov    ecx,ebx
10000cbf:	89 d7                	mov    edi,edx
10000cc1:	01 de                	add    esi,ebx
10000cc3:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000cc5:	e9 57 ff ff ff       	jmp    10000c21 <_ssfn_zlib_decode+0x2c2>
10000cca:	0f 85 84 01 00 00    	jne    10000e54 <_ssfn_zlib_decode+0x4f5>
10000cd0:	89 e9                	mov    ecx,ebp
10000cd2:	8d 54 24 25          	lea    edx,[esp+0x25]
10000cd6:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000cdd:	e8 a0 f5 ff ff       	call   10000282 <_ssfn__zbuild_huffman>
10000ce2:	85 c0                	test   eax,eax
10000ce4:	0f 84 6a 01 00 00    	je     10000e54 <_ssfn_zlib_decode+0x4f5>
10000cea:	8d 44 24 25          	lea    eax,[esp+0x25]
10000cee:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10000cf2:	8d 14 28             	lea    edx,[eax+ebp*1]
10000cf5:	8d 84 24 cc 11 00 00 	lea    eax,[esp+0x11cc]
10000cfc:	e8 81 f5 ff ff       	call   10000282 <_ssfn__zbuild_huffman>
10000d01:	85 c0                	test   eax,eax
10000d03:	0f 84 4b 01 00 00    	je     10000e54 <_ssfn_zlib_decode+0x4f5>
10000d09:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000d10:	8d 94 24 e8 09 00 00 	lea    edx,[esp+0x9e8]
10000d17:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d1e:	e8 50 f4 ff ff       	call   10000173 <_ssfn__zhuffman_decode>
10000d23:	89 c3                	mov    ebx,eax
10000d25:	3d ff 00 00 00       	cmp    eax,0xff
10000d2a:	7f 34                	jg     10000d60 <_ssfn_zlib_decode+0x401>
10000d2c:	85 c0                	test   eax,eax
10000d2e:	0f 88 20 01 00 00    	js     10000e54 <_ssfn_zlib_decode+0x4f5>
10000d34:	39 ac 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],ebp
10000d3b:	77 1d                	ja     10000d5a <_ssfn_zlib_decode+0x3fb>
10000d3d:	89 ea                	mov    edx,ebp
10000d3f:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d46:	e8 d8 f4 ff ff       	call   10000223 <_ssfn__zexpand>
10000d4b:	85 c0                	test   eax,eax
10000d4d:	0f 84 01 01 00 00    	je     10000e54 <_ssfn_zlib_decode+0x4f5>
10000d53:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000d5a:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
10000d5d:	45                   	inc    ebp
10000d5e:	eb b0                	jmp    10000d10 <_ssfn_zlib_decode+0x3b1>
10000d60:	3d 00 01 00 00       	cmp    eax,0x100
10000d65:	75 0c                	jne    10000d73 <_ssfn_zlib_decode+0x414>
10000d67:	89 ac 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebp
10000d6e:	e9 cd 00 00 00       	jmp    10000e40 <_ssfn_zlib_decode+0x4e1>
10000d73:	8d 80 ff fe ff ff    	lea    eax,[eax-0x101]
10000d79:	8b 14 85 80 6d 00 10 	mov    edx,DWORD PTR [eax*4+0x10006d80]	10000d7c: R_386_32	.text
10000d80:	8b 1c 85 00 6e 00 10 	mov    ebx,DWORD PTR [eax*4+0x10006e00]	10000d83: R_386_32	.text
10000d87:	85 d2                	test   edx,edx
10000d89:	74 0e                	je     10000d99 <_ssfn_zlib_decode+0x43a>
10000d8b:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d92:	e8 c2 f9 ff ff       	call   10000759 <_ssfn__zreceive>
10000d97:	01 c3                	add    ebx,eax
10000d99:	8d 94 24 cc 11 00 00 	lea    edx,[esp+0x11cc]
10000da0:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000da7:	e8 c7 f3 ff ff       	call   10000173 <_ssfn__zhuffman_decode>
10000dac:	85 c0                	test   eax,eax
10000dae:	0f 88 a0 00 00 00    	js     10000e54 <_ssfn_zlib_decode+0x4f5>
10000db4:	8b 14 85 80 6c 00 10 	mov    edx,DWORD PTR [eax*4+0x10006c80]	10000db7: R_386_32	.text
10000dbb:	8b 3c 85 00 6d 00 10 	mov    edi,DWORD PTR [eax*4+0x10006d00]	10000dbe: R_386_32	.text
10000dc2:	85 d2                	test   edx,edx
10000dc4:	74 0e                	je     10000dd4 <_ssfn_zlib_decode+0x475>
10000dc6:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000dcd:	e8 87 f9 ff ff       	call   10000759 <_ssfn__zreceive>
10000dd2:	01 c7                	add    edi,eax
10000dd4:	89 e8                	mov    eax,ebp
10000dd6:	2b 84 24 e0 09 00 00 	sub    eax,DWORD PTR [esp+0x9e0]
10000ddd:	39 f8                	cmp    eax,edi
10000ddf:	7c 73                	jl     10000e54 <_ssfn_zlib_decode+0x4f5>
10000de1:	8d 44 1d 00          	lea    eax,[ebp+ebx*1+0x0]
10000de5:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000dec:	73 19                	jae    10000e07 <_ssfn_zlib_decode+0x4a8>
10000dee:	89 ea                	mov    edx,ebp
10000df0:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000df7:	e8 27 f4 ff ff       	call   10000223 <_ssfn__zexpand>
10000dfc:	85 c0                	test   eax,eax
10000dfe:	74 54                	je     10000e54 <_ssfn_zlib_decode+0x4f5>
10000e00:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000e07:	89 ee                	mov    esi,ebp
10000e09:	29 fe                	sub    esi,edi
10000e0b:	4f                   	dec    edi
10000e0c:	75 19                	jne    10000e27 <_ssfn_zlib_decode+0x4c8>
10000e0e:	85 db                	test   ebx,ebx
10000e10:	0f 84 fa fe ff ff    	je     10000d10 <_ssfn_zlib_decode+0x3b1>
10000e16:	8a 06                	mov    al,BYTE PTR [esi]
10000e18:	01 eb                	add    ebx,ebp
10000e1a:	45                   	inc    ebp
10000e1b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000e1e:	39 dd                	cmp    ebp,ebx
10000e20:	75 f8                	jne    10000e1a <_ssfn_zlib_decode+0x4bb>
10000e22:	e9 e9 fe ff ff       	jmp    10000d10 <_ssfn_zlib_decode+0x3b1>
10000e27:	85 db                	test   ebx,ebx
10000e29:	0f 84 e1 fe ff ff    	je     10000d10 <_ssfn_zlib_decode+0x3b1>
10000e2f:	8d 04 1e             	lea    eax,[esi+ebx*1]
10000e32:	89 ef                	mov    edi,ebp
10000e34:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000e35:	39 f0                	cmp    eax,esi
10000e37:	75 fb                	jne    10000e34 <_ssfn_zlib_decode+0x4d5>
10000e39:	01 dd                	add    ebp,ebx
10000e3b:	e9 d0 fe ff ff       	jmp    10000d10 <_ssfn_zlib_decode+0x3b1>
10000e40:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10000e45:	0f 84 c0 fb ff ff    	je     10000a0b <_ssfn_zlib_decode+0xac>
10000e4b:	8b 84 24 e0 09 00 00 	mov    eax,DWORD PTR [esp+0x9e0]
10000e52:	eb 14                	jmp    10000e68 <_ssfn_zlib_decode+0x509>
10000e54:	83 ec 0c             	sub    esp,0xc
10000e57:	ff b4 24 ec 09 00 00 	push   DWORD PTR [esp+0x9ec]
10000e5e:	e8 fc ff ff ff       	call   10000e5f <_ssfn_zlib_decode+0x500>	10000e5f: R_386_PC32	free
10000e63:	83 c4 10             	add    esp,0x10
10000e66:	31 c0                	xor    eax,eax
10000e68:	81 c4 bc 19 00 00    	add    esp,0x19bc
10000e6e:	5b                   	pop    ebx
10000e6f:	5e                   	pop    esi
10000e70:	5f                   	pop    edi
10000e71:	5d                   	pop    ebp
10000e72:	c3                   	ret    

10000e73 <ssfn_load>:
10000e73:	55                   	push   ebp
10000e74:	57                   	push   edi
10000e75:	56                   	push   esi
10000e76:	53                   	push   ebx
10000e77:	83 ec 1c             	sub    esp,0x1c
10000e7a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10000e7e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10000e82:	85 ff                	test   edi,edi
10000e84:	0f 84 d0 01 00 00    	je     1000105a <ssfn_load+0x1e7>
10000e8a:	85 f6                	test   esi,esi
10000e8c:	0f 84 c8 01 00 00    	je     1000105a <ssfn_load+0x1e7>
10000e92:	80 3e 1f             	cmp    BYTE PTR [esi],0x1f
10000e95:	0f 85 a8 00 00 00    	jne    10000f43 <ssfn_load+0xd0>
10000e9b:	80 7e 01 8b          	cmp    BYTE PTR [esi+0x1],0x8b
10000e9f:	0f 85 9e 00 00 00    	jne    10000f43 <ssfn_load+0xd0>
10000ea5:	80 7e 02 08          	cmp    BYTE PTR [esi+0x2],0x8
10000ea9:	74 0a                	je     10000eb5 <ssfn_load+0x42>
10000eab:	bd fe ff ff ff       	mov    ebp,0xfffffffe
10000eb0:	e9 aa 01 00 00       	jmp    1000105f <ssfn_load+0x1ec>
10000eb5:	8a 46 03             	mov    al,BYTE PTR [esi+0x3]
10000eb8:	a8 04                	test   al,0x4
10000eba:	75 05                	jne    10000ec1 <ssfn_load+0x4e>
10000ebc:	83 c6 0a             	add    esi,0xa
10000ebf:	eb 08                	jmp    10000ec9 <ssfn_load+0x56>
10000ec1:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
10000ec5:	8d 74 16 0c          	lea    esi,[esi+edx*1+0xc]
10000ec9:	a8 08                	test   al,0x8
10000ecb:	74 07                	je     10000ed4 <ssfn_load+0x61>
10000ecd:	46                   	inc    esi
10000ece:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000ed2:	eb f7                	jmp    10000ecb <ssfn_load+0x58>
10000ed4:	a8 10                	test   al,0x10
10000ed6:	74 07                	je     10000edf <ssfn_load+0x6c>
10000ed8:	46                   	inc    esi
10000ed9:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000edd:	eb f7                	jmp    10000ed6 <ssfn_load+0x63>
10000edf:	83 ec 0c             	sub    esp,0xc
10000ee2:	56                   	push   esi
10000ee3:	e8 fc ff ff ff       	call   10000ee4 <ssfn_load+0x71>	10000ee4: R_386_PC32	_ssfn_zlib_decode
10000ee8:	83 c4 10             	add    esp,0x10
10000eeb:	89 c6                	mov    esi,eax
10000eed:	85 c0                	test   eax,eax
10000eef:	74 ba                	je     10000eab <ssfn_load+0x38>
10000ef1:	50                   	push   eax
10000ef2:	50                   	push   eax
10000ef3:	8b 87 78 f5 00 00    	mov    eax,DWORD PTR [edi+0xf578]
10000ef9:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
10000f00:	50                   	push   eax
10000f01:	ff b7 70 f5 00 00    	push   DWORD PTR [edi+0xf570]
10000f07:	e8 fc ff ff ff       	call   10000f08 <ssfn_load+0x95>	10000f08: R_386_PC32	realloc
10000f0c:	83 c4 10             	add    esp,0x10
10000f0f:	89 87 70 f5 00 00    	mov    DWORD PTR [edi+0xf570],eax
10000f15:	85 c0                	test   eax,eax
10000f17:	75 0f                	jne    10000f28 <ssfn_load+0xb5>
10000f19:	c7 87 78 f5 00 00 00 00 00 00 	mov    DWORD PTR [edi+0xf578],0x0
10000f23:	e9 1a 01 00 00       	jmp    10001042 <ssfn_load+0x1cf>
10000f28:	8b 97 78 f5 00 00    	mov    edx,DWORD PTR [edi+0xf578]
10000f2e:	8d 4a 01             	lea    ecx,[edx+0x1]
10000f31:	89 8f 78 f5 00 00    	mov    DWORD PTR [edi+0xf578],ecx
10000f37:	89 34 90             	mov    DWORD PTR [eax+edx*4],esi
10000f3a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000f3d:	01 87 7c f5 00 00    	add    DWORD PTR [edi+0xf57c],eax
10000f43:	50                   	push   eax
10000f44:	6a 04                	push   0x4
10000f46:	68 38 6b 00 10       	push   0x10006b38	10000f47: R_386_32	.text
10000f4b:	56                   	push   esi
10000f4c:	e8 fc ff ff ff       	call   10000f4d <ssfn_load+0xda>	10000f4d: R_386_PC32	memcmp
10000f51:	83 c4 10             	add    esp,0x10
10000f54:	89 c5                	mov    ebp,eax
10000f56:	85 c0                	test   eax,eax
10000f58:	75 29                	jne    10000f83 <ssfn_load+0x110>
10000f5a:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10000f5d:	01 f3                	add    ebx,esi
10000f5f:	83 c6 08             	add    esi,0x8
10000f62:	39 de                	cmp    esi,ebx
10000f64:	0f 83 f5 00 00 00    	jae    1000105f <ssfn_load+0x1ec>
10000f6a:	50                   	push   eax
10000f6b:	50                   	push   eax
10000f6c:	56                   	push   esi
10000f6d:	57                   	push   edi
10000f6e:	e8 fc ff ff ff       	call   10000f6f <ssfn_load+0xfc>	10000f6f: R_386_PC32	ssfn_load
10000f73:	83 c4 10             	add    esp,0x10
10000f76:	85 c0                	test   eax,eax
10000f78:	0f 85 e1 00 00 00    	jne    1000105f <ssfn_load+0x1ec>
10000f7e:	03 76 04             	add    esi,DWORD PTR [esi+0x4]
10000f81:	eb df                	jmp    10000f62 <ssfn_load+0xef>
10000f83:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10000f86:	83 e0 0f             	and    eax,0xf
10000f89:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10000f8d:	53                   	push   ebx
10000f8e:	6a 04                	push   0x4
10000f90:	68 3d 6b 00 10       	push   0x10006b3d	10000f91: R_386_32	.text
10000f95:	56                   	push   esi
10000f96:	e8 fc ff ff ff       	call   10000f97 <ssfn_load+0x124>	10000f97: R_386_PC32	memcmp
10000f9b:	83 c4 10             	add    esp,0x10
10000f9e:	89 c5                	mov    ebp,eax
10000fa0:	85 c0                	test   eax,eax
10000fa2:	0f 85 03 ff ff ff    	jne    10000eab <ssfn_load+0x38>
10000fa8:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10000fab:	8d 44 1e fc          	lea    eax,[esi+ebx*1-0x4]
10000faf:	51                   	push   ecx
10000fb0:	6a 04                	push   0x4
10000fb2:	68 42 6b 00 10       	push   0x10006b42	10000fb3: R_386_32	.text
10000fb7:	50                   	push   eax
10000fb8:	e8 fc ff ff ff       	call   10000fb9 <ssfn_load+0x146>	10000fb9: R_386_PC32	memcmp
10000fbd:	83 c4 10             	add    esp,0x10
10000fc0:	85 c0                	test   eax,eax
10000fc2:	0f 85 e3 fe ff ff    	jne    10000eab <ssfn_load+0x38>
10000fc8:	80 7c 24 0f 04       	cmp    BYTE PTR [esp+0xf],0x4
10000fcd:	0f 87 d8 fe ff ff    	ja     10000eab <ssfn_load+0x38>
10000fd3:	0f b7 4e 0e          	movzx  ecx,WORD PTR [esi+0xe]
10000fd7:	39 cb                	cmp    ebx,ecx
10000fd9:	0f 86 cc fe ff ff    	jbe    10000eab <ssfn_load+0x38>
10000fdf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
10000fe2:	39 c3                	cmp    ebx,eax
10000fe4:	0f 86 c1 fe ff ff    	jbe    10000eab <ssfn_load+0x38>
10000fea:	3b 5e 14             	cmp    ebx,DWORD PTR [esi+0x14]
10000fed:	0f 86 b8 fe ff ff    	jbe    10000eab <ssfn_load+0x38>
10000ff3:	3b 5e 18             	cmp    ebx,DWORD PTR [esi+0x18]
10000ff6:	0f 86 af fe ff ff    	jbe    10000eab <ssfn_load+0x38>
10000ffc:	3b 5e 1c             	cmp    ebx,DWORD PTR [esi+0x1c]
10000fff:	0f 86 a6 fe ff ff    	jbe    10000eab <ssfn_load+0x38>
10001005:	39 c1                	cmp    ecx,eax
10001007:	0f 83 9e fe ff ff    	jae    10000eab <ssfn_load+0x38>
1000100d:	0f b6 5c 24 0f       	movzx  ebx,BYTE PTR [esp+0xf]
10001012:	8d 1c 9f             	lea    ebx,[edi+ebx*4]
10001015:	8b 83 a4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a4]
1000101b:	40                   	inc    eax
1000101c:	89 83 a4 f5 00 00    	mov    DWORD PTR [ebx+0xf5a4],eax
10001022:	52                   	push   edx
10001023:	c1 e0 02             	shl    eax,0x2
10001026:	52                   	push   edx
10001027:	50                   	push   eax
10001028:	ff 33                	push   DWORD PTR [ebx]
1000102a:	e8 fc ff ff ff       	call   1000102b <ssfn_load+0x1b8>	1000102b: R_386_PC32	realloc
1000102f:	83 c4 10             	add    esp,0x10
10001032:	89 03                	mov    DWORD PTR [ebx],eax
10001034:	85 c0                	test   eax,eax
10001036:	75 0f                	jne    10001047 <ssfn_load+0x1d4>
10001038:	c7 83 a4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5a4],0x0
10001042:	83 cd ff             	or     ebp,0xffffffff
10001045:	eb 18                	jmp    1000105f <ssfn_load+0x1ec>
10001047:	8b 93 a4 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf5a4]
1000104d:	89 74 90 fc          	mov    DWORD PTR [eax+edx*4-0x4],esi
10001051:	89 f8                	mov    eax,edi
10001053:	e8 ad f3 ff ff       	call   10000405 <_ssfn_fc.part.1>
10001058:	eb 05                	jmp    1000105f <ssfn_load+0x1ec>
1000105a:	bd fc ff ff ff       	mov    ebp,0xfffffffc
1000105f:	83 c4 1c             	add    esp,0x1c
10001062:	89 e8                	mov    eax,ebp
10001064:	5b                   	pop    ebx
10001065:	5e                   	pop    esi
10001066:	5f                   	pop    edi
10001067:	5d                   	pop    ebp
10001068:	c3                   	ret    

10001069 <ssfn_free>:
10001069:	57                   	push   edi
1000106a:	56                   	push   esi
1000106b:	53                   	push   ebx
1000106c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001070:	85 db                	test   ebx,ebx
10001072:	74 7e                	je     100010f2 <ssfn_free+0x89>
10001074:	89 d8                	mov    eax,ebx
10001076:	e8 8a f3 ff ff       	call   10000405 <_ssfn_fc.part.1>
1000107b:	83 bb 70 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf570],0x0
10001082:	74 32                	je     100010b6 <ssfn_free+0x4d>
10001084:	31 f6                	xor    esi,esi
10001086:	8b 83 70 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf570]
1000108c:	39 b3 78 f5 00 00    	cmp    DWORD PTR [ebx+0xf578],esi
10001092:	7e 16                	jle    100010aa <ssfn_free+0x41>
10001094:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
10001097:	85 c0                	test   eax,eax
10001099:	74 0c                	je     100010a7 <ssfn_free+0x3e>
1000109b:	83 ec 0c             	sub    esp,0xc
1000109e:	50                   	push   eax
1000109f:	e8 fc ff ff ff       	call   100010a0 <ssfn_free+0x37>	100010a0: R_386_PC32	free
100010a4:	83 c4 10             	add    esp,0x10
100010a7:	46                   	inc    esi
100010a8:	eb dc                	jmp    10001086 <ssfn_free+0x1d>
100010aa:	83 ec 0c             	sub    esp,0xc
100010ad:	50                   	push   eax
100010ae:	e8 fc ff ff ff       	call   100010af <ssfn_free+0x46>	100010af: R_386_PC32	free
100010b3:	83 c4 10             	add    esp,0x10
100010b6:	31 f6                	xor    esi,esi
100010b8:	8b 04 b3             	mov    eax,DWORD PTR [ebx+esi*4]
100010bb:	85 c0                	test   eax,eax
100010bd:	74 0c                	je     100010cb <ssfn_free+0x62>
100010bf:	83 ec 0c             	sub    esp,0xc
100010c2:	50                   	push   eax
100010c3:	e8 fc ff ff ff       	call   100010c4 <ssfn_free+0x5b>	100010c4: R_386_PC32	free
100010c8:	83 c4 10             	add    esp,0x10
100010cb:	46                   	inc    esi
100010cc:	83 fe 05             	cmp    esi,0x5
100010cf:	75 e7                	jne    100010b8 <ssfn_free+0x4f>
100010d1:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100010d7:	85 c0                	test   eax,eax
100010d9:	74 0c                	je     100010e7 <ssfn_free+0x7e>
100010db:	83 ec 0c             	sub    esp,0xc
100010de:	50                   	push   eax
100010df:	e8 fc ff ff ff       	call   100010e0 <ssfn_free+0x77>	100010e0: R_386_PC32	free
100010e4:	83 c4 10             	add    esp,0x10
100010e7:	b9 72 3d 00 00       	mov    ecx,0x3d72
100010ec:	31 c0                	xor    eax,eax
100010ee:	89 df                	mov    edi,ebx
100010f0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100010f2:	5b                   	pop    ebx
100010f3:	5e                   	pop    esi
100010f4:	5f                   	pop    edi
100010f5:	c3                   	ret    

100010f6 <ssfn_mem>:
100010f6:	55                   	push   ebp
100010f7:	31 c0                	xor    eax,eax
100010f9:	57                   	push   edi
100010fa:	56                   	push   esi
100010fb:	53                   	push   ebx
100010fc:	83 ec 08             	sub    esp,0x8
100010ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10001103:	85 d2                	test   edx,edx
10001105:	0f 84 8e 00 00 00    	je     10001199 <ssfn_mem+0xa3>
1000110b:	b8 c8 f5 00 00       	mov    eax,0xf5c8
10001110:	31 c9                	xor    ecx,ecx
10001112:	8b 9c 8a a4 f5 00 00 	mov    ebx,DWORD PTR [edx+ecx*4+0xf5a4]
10001119:	41                   	inc    ecx
1000111a:	8d 04 98             	lea    eax,[eax+ebx*4]
1000111d:	83 f9 05             	cmp    ecx,0x5
10001120:	75 f0                	jne    10001112 <ssfn_mem+0x1c>
10001122:	03 82 7c f5 00 00    	add    eax,DWORD PTR [edx+0xf57c]
10001128:	31 c9                	xor    ecx,ecx
1000112a:	8b b4 8a 28 f5 00 00 	mov    esi,DWORD PTR [edx+ecx*4+0xf528]
10001131:	89 34 24             	mov    DWORD PTR [esp],esi
10001134:	85 f6                	test   esi,esi
10001136:	74 48                	je     10001180 <ssfn_mem+0x8a>
10001138:	31 db                	xor    ebx,ebx
1000113a:	8b 34 24             	mov    esi,DWORD PTR [esp]
1000113d:	8b 3c 9e             	mov    edi,DWORD PTR [esi+ebx*4]
10001140:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
10001144:	85 ff                	test   edi,edi
10001146:	74 2a                	je     10001172 <ssfn_mem+0x7c>
10001148:	31 f6                	xor    esi,esi
1000114a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
1000114e:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
10001151:	85 ed                	test   ebp,ebp
10001153:	74 0f                	je     10001164 <ssfn_mem+0x6e>
10001155:	0f b7 7d 00          	movzx  edi,WORD PTR [ebp+0x0]
10001159:	0f b6 6d 02          	movzx  ebp,BYTE PTR [ebp+0x2]
1000115d:	0f af fd             	imul   edi,ebp
10001160:	8d 44 38 08          	lea    eax,[eax+edi*1+0x8]
10001164:	46                   	inc    esi
10001165:	81 fe 00 01 00 00    	cmp    esi,0x100
1000116b:	75 dd                	jne    1000114a <ssfn_mem+0x54>
1000116d:	05 00 04 00 00       	add    eax,0x400
10001172:	43                   	inc    ebx
10001173:	81 fb 00 01 00 00    	cmp    ebx,0x100
10001179:	75 bf                	jne    1000113a <ssfn_mem+0x44>
1000117b:	05 00 04 00 00       	add    eax,0x400
10001180:	41                   	inc    ecx
10001181:	83 f9 11             	cmp    ecx,0x11
10001184:	75 a4                	jne    1000112a <ssfn_mem+0x34>
10001186:	83 ba 6c f5 00 00 00 	cmp    DWORD PTR [edx+0xf56c],0x0
1000118d:	74 0a                	je     10001199 <ssfn_mem+0xa3>
1000118f:	8b 92 84 f5 00 00    	mov    edx,DWORD PTR [edx+0xf584]
10001195:	01 d2                	add    edx,edx
10001197:	01 d0                	add    eax,edx
10001199:	83 c4 08             	add    esp,0x8
1000119c:	5b                   	pop    ebx
1000119d:	5e                   	pop    esi
1000119e:	5f                   	pop    edi
1000119f:	5d                   	pop    ebp
100011a0:	c3                   	ret    

100011a1 <ssfn_select>:
100011a1:	55                   	push   ebp
100011a2:	57                   	push   edi
100011a3:	56                   	push   esi
100011a4:	53                   	push   ebx
100011a5:	83 ec 1c             	sub    esp,0x1c
100011a8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
100011ac:	85 db                	test   ebx,ebx
100011ae:	75 0a                	jne    100011ba <ssfn_select+0x19>
100011b0:	be fc ff ff ff       	mov    esi,0xfffffffc
100011b5:	e9 13 01 00 00       	jmp    100012cd <ssfn_select+0x12c>
100011ba:	89 d8                	mov    eax,ebx
100011bc:	e8 44 f2 ff ff       	call   10000405 <_ssfn_fc.part.1>
100011c1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100011c5:	81 e6 00 e0 ff ff    	and    esi,0xffffe000
100011cb:	0f 85 e9 00 00 00    	jne    100012ba <ssfn_select+0x119>
100011d1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100011d5:	83 e8 08             	sub    eax,0x8
100011d8:	3d b8 00 00 00       	cmp    eax,0xb8
100011dd:	0f 87 de 00 00 00    	ja     100012c1 <ssfn_select+0x120>
100011e3:	81 7c 24 34 fe 00 00 00 	cmp    DWORD PTR [esp+0x34],0xfe
100011eb:	75 76                	jne    10001263 <ssfn_select+0xc2>
100011ed:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
100011f2:	74 bc                	je     100011b0 <ssfn_select+0xf>
100011f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100011f8:	80 38 00             	cmp    BYTE PTR [eax],0x0
100011fb:	74 b3                	je     100011b0 <ssfn_select+0xf>
100011fd:	31 ed                	xor    ebp,ebp
100011ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10001203:	80 3c 28 00          	cmp    BYTE PTR [eax+ebp*1],0x0
10001207:	74 03                	je     1000120c <ssfn_select+0x6b>
10001209:	45                   	inc    ebp
1000120a:	eb f3                	jmp    100011ff <ssfn_select+0x5e>
1000120c:	8d 43 14             	lea    eax,[ebx+0x14]
1000120f:	89 df                	mov    edi,ebx
10001211:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001215:	8b 87 a4 f5 00 00    	mov    eax,DWORD PTR [edi+0xf5a4]
1000121b:	31 d2                	xor    edx,edx
1000121d:	89 04 24             	mov    DWORD PTR [esp],eax
10001220:	39 14 24             	cmp    DWORD PTR [esp],edx
10001223:	7e 33                	jle    10001258 <ssfn_select+0xb7>
10001225:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10001229:	8b 07                	mov    eax,DWORD PTR [edi]
1000122b:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
1000122e:	50                   	push   eax
1000122f:	8d 41 20             	lea    eax,[ecx+0x20]
10001232:	55                   	push   ebp
10001233:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10001237:	50                   	push   eax
10001238:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
1000123c:	e8 fc ff ff ff       	call   1000123d <ssfn_select+0x9c>	1000123d: R_386_PC32	memcmp
10001241:	83 c4 10             	add    esp,0x10
10001244:	85 c0                	test   eax,eax
10001246:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000124a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
1000124e:	75 05                	jne    10001255 <ssfn_select+0xb4>
10001250:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
10001253:	eb 34                	jmp    10001289 <ssfn_select+0xe8>
10001255:	42                   	inc    edx
10001256:	eb c8                	jmp    10001220 <ssfn_select+0x7f>
10001258:	83 c7 04             	add    edi,0x4
1000125b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
1000125f:	75 b4                	jne    10001215 <ssfn_select+0x74>
10001261:	eb 65                	jmp    100012c8 <ssfn_select+0x127>
10001263:	81 7c 24 34 ff 00 00 00 	cmp    DWORD PTR [esp+0x34],0xff
1000126b:	74 15                	je     10001282 <ssfn_select+0xe1>
1000126d:	83 7c 24 34 04       	cmp    DWORD PTR [esp+0x34],0x4
10001272:	7f 54                	jg     100012c8 <ssfn_select+0x127>
10001274:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001278:	83 bc 83 a4 f5 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0xf5a4],0x0
10001280:	74 46                	je     100012c8 <ssfn_select+0x127>
10001282:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
10001289:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000128d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
10001294:	89 83 b8 f5 00 00    	mov    DWORD PTR [ebx+0xf5b8],eax
1000129a:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
100012a4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100012a8:	89 83 bc f5 00 00    	mov    DWORD PTR [ebx+0xf5bc],eax
100012ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100012b2:	89 83 c0 f5 00 00    	mov    DWORD PTR [ebx+0xf5c0],eax
100012b8:	eb 13                	jmp    100012cd <ssfn_select+0x12c>
100012ba:	be fb ff ff ff       	mov    esi,0xfffffffb
100012bf:	eb 0c                	jmp    100012cd <ssfn_select+0x12c>
100012c1:	be fa ff ff ff       	mov    esi,0xfffffffa
100012c6:	eb 05                	jmp    100012cd <ssfn_select+0x12c>
100012c8:	be fd ff ff ff       	mov    esi,0xfffffffd
100012cd:	83 c4 1c             	add    esp,0x1c
100012d0:	89 f0                	mov    eax,esi
100012d2:	5b                   	pop    ebx
100012d3:	5e                   	pop    esi
100012d4:	5f                   	pop    edi
100012d5:	5d                   	pop    ebp
100012d6:	c3                   	ret    

100012d7 <ssfn_render>:
100012d7:	55                   	push   ebp
100012d8:	57                   	push   edi
100012d9:	56                   	push   esi
100012da:	53                   	push   ebx
100012db:	81 ec dc 05 01 00    	sub    esp,0x105dc
100012e1:	8b ac 24 f0 05 01 00 	mov    ebp,DWORD PTR [esp+0x105f0]
100012e8:	c7 84 24 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc8],0x0
100012f3:	85 ed                	test   ebp,ebp
100012f5:	0f 94 c2             	sete   dl
100012f8:	83 bc 24 f8 05 01 00 00 	cmp    DWORD PTR [esp+0x105f8],0x0
10001300:	0f 94 c0             	sete   al
10001303:	08 c2                	or     dl,al
10001305:	74 0a                	je     10001311 <ssfn_render+0x3a>
10001307:	b9 fc ff ff ff       	mov    ecx,0xfffffffc
1000130c:	e9 14 1e 00 00       	jmp    10003125 <ssfn_render+0x1e4e>
10001311:	8b 84 24 f8 05 01 00 	mov    eax,DWORD PTR [esp+0x105f8]
10001318:	31 c9                	xor    ecx,ecx
1000131a:	8a 00                	mov    al,BYTE PTR [eax]
1000131c:	84 c0                	test   al,al
1000131e:	0f 84 01 1e 00 00    	je     10003125 <ssfn_render+0x1e4e>
10001324:	3c 0d                	cmp    al,0xd
10001326:	75 0f                	jne    10001337 <ssfn_render+0x60>
10001328:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000132f:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
10001335:	eb 31                	jmp    10001368 <ssfn_render+0x91>
10001337:	3c 0a                	cmp    al,0xa
10001339:	75 37                	jne    10001372 <ssfn_render+0x9b>
1000133b:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10001342:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
10001348:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
1000134b:	8b 85 c4 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c4]
10001351:	85 c0                	test   eax,eax
10001353:	75 06                	jne    1000135b <ssfn_render+0x84>
10001355:	8b 85 c0 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c0]
1000135b:	01 d0                	add    eax,edx
1000135d:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10001364:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
10001368:	b9 01 00 00 00       	mov    ecx,0x1
1000136d:	e9 b3 1d 00 00       	jmp    10003125 <ssfn_render+0x1e4e>
10001372:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001375:	85 c0                	test   eax,eax
10001377:	74 3e                	je     100013b7 <ssfn_render+0xe0>
10001379:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
1000137c:	8d b4 24 c0 00 00 00 	lea    esi,[esp+0xc0]
10001383:	56                   	push   esi
10001384:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
1000138b:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001392:	e8 a0 f4 ff ff       	call   10000837 <_ssfn_c>
10001397:	5b                   	pop    ebx
10001398:	85 c0                	test   eax,eax
1000139a:	0f 85 71 02 00 00    	jne    10001611 <ssfn_render+0x33a>
100013a0:	8b 95 bc f5 00 00    	mov    edx,DWORD PTR [ebp+0xf5bc]
100013a6:	81 e2 00 01 00 00    	and    edx,0x100
100013ac:	0f 84 fd 01 00 00    	je     100015af <ssfn_render+0x2d8>
100013b2:	e9 1d 02 00 00       	jmp    100015d4 <ssfn_render+0x2fd>
100013b7:	8b 85 b8 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5b8]
100013bd:	c7 45 18 00 00 00 00 	mov    DWORD PTR [ebp+0x18],0x0
100013c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100013c8:	3d fd 00 00 00       	cmp    eax,0xfd
100013cd:	7f 08                	jg     100013d7 <ssfn_render+0x100>
100013cf:	89 c3                	mov    ebx,eax
100013d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100013d5:	eb 3f                	jmp    10001416 <ssfn_render+0x13f>
100013d7:	31 db                	xor    ebx,ebx
100013d9:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
100013e1:	eb 33                	jmp    10001416 <ssfn_render+0x13f>
100013e3:	85 c0                	test   eax,eax
100013e5:	0f 84 64 01 00 00    	je     1000154f <ssfn_render+0x278>
100013eb:	43                   	inc    ebx
100013ec:	3b 5c 24 10          	cmp    ebx,DWORD PTR [esp+0x10]
100013f0:	7e 28                	jle    1000141a <ssfn_render+0x143>
100013f2:	85 c0                	test   eax,eax
100013f4:	0f 85 17 02 00 00    	jne    10001611 <ssfn_render+0x33a>
100013fa:	31 db                	xor    ebx,ebx
100013fc:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
10001404:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
1000140c:	74 92                	je     100013a0 <ssfn_render+0xc9>
1000140e:	c7 44 24 0c ff 00 00 00 	mov    DWORD PTR [esp+0xc],0xff
10001416:	31 c0                	xor    eax,eax
10001418:	eb d2                	jmp    100013ec <ssfn_render+0x115>
1000141a:	8b 74 9d 00          	mov    esi,DWORD PTR [ebp+ebx*4+0x0]
1000141e:	f6 85 bc f5 00 00 03 	test   BYTE PTR [ebp+0xf5bc],0x3
10001425:	74 bc                	je     100013e3 <ssfn_render+0x10c>
10001427:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001432:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10001439:	39 94 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],edx
10001440:	7e 50                	jle    10001492 <ssfn_render+0x1bb>
10001442:	8b 3c 96             	mov    edi,DWORD PTR [esi+edx*4]
10001445:	0f b6 57 08          	movzx  edx,BYTE PTR [edi+0x8]
10001449:	c1 fa 04             	sar    edx,0x4
1000144c:	33 95 bc f5 00 00    	xor    edx,DWORD PTR [ebp+0xf5bc]
10001452:	80 e2 03             	and    dl,0x3
10001455:	75 32                	jne    10001489 <ssfn_render+0x1b2>
10001457:	0f b6 57 0b          	movzx  edx,BYTE PTR [edi+0xb]
1000145b:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
10001461:	75 26                	jne    10001489 <ssfn_render+0x1b2>
10001463:	8d 84 24 c0 00 00 00 	lea    eax,[esp+0xc0]
1000146a:	50                   	push   eax
1000146b:	89 f8                	mov    eax,edi
1000146d:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001474:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000147b:	e8 b7 f3 ff ff       	call   10000837 <_ssfn_c>
10001480:	59                   	pop    ecx
10001481:	85 c0                	test   eax,eax
10001483:	0f 85 04 01 00 00    	jne    1000158d <ssfn_render+0x2b6>
10001489:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001490:	eb a0                	jmp    10001432 <ssfn_render+0x15b>
10001492:	85 c0                	test   eax,eax
10001494:	0f 85 51 ff ff ff    	jne    100013eb <ssfn_render+0x114>
1000149a:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100014a5:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100014ac:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
100014b3:	0f 8e f9 1b 00 00    	jle    100030b2 <ssfn_render+0x1ddb>
100014b9:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100014bc:	0f b6 50 0b          	movzx  edx,BYTE PTR [eax+0xb]
100014c0:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
100014c6:	74 09                	je     100014d1 <ssfn_render+0x1fa>
100014c8:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100014cf:	eb d4                	jmp    100014a5 <ssfn_render+0x1ce>
100014d1:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100014d8:	57                   	push   edi
100014d9:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100014e0:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100014e7:	e8 4b f3 ff ff       	call   10000837 <_ssfn_c>
100014ec:	5a                   	pop    edx
100014ed:	85 c0                	test   eax,eax
100014ef:	74 d7                	je     100014c8 <ssfn_render+0x1f1>
100014f1:	e9 97 00 00 00       	jmp    1000158d <ssfn_render+0x2b6>
100014f6:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100014f9:	0f b6 50 08          	movzx  edx,BYTE PTR [eax+0x8]
100014fd:	c1 fa 04             	sar    edx,0x4
10001500:	31 ca                	xor    edx,ecx
10001502:	80 e2 03             	and    dl,0x3
10001505:	0f 84 b7 1b 00 00    	je     100030c2 <ssfn_render+0x1deb>
1000150b:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001512:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001519:	8b 8d bc f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf5bc]
1000151f:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001526:	7f ce                	jg     100014f6 <ssfn_render+0x21f>
10001528:	83 e1 03             	and    ecx,0x3
1000152b:	83 f9 03             	cmp    ecx,0x3
1000152e:	75 1f                	jne    1000154f <ssfn_render+0x278>
10001530:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000153b:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001542:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001549:	0f 8f 9c 1b 00 00    	jg     100030eb <ssfn_render+0x1e14>
1000154f:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000155a:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001561:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10001568:	7e 3e                	jle    100015a8 <ssfn_render+0x2d1>
1000156a:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
1000156d:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10001574:	57                   	push   edi
10001575:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
1000157c:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001583:	e8 af f2 ff ff       	call   10000837 <_ssfn_c>
10001588:	5a                   	pop    edx
10001589:	85 c0                	test   eax,eax
1000158b:	74 12                	je     1000159f <ssfn_render+0x2c8>
1000158d:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10001594:	8b 14 96             	mov    edx,DWORD PTR [esi+edx*4]
10001597:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
1000159a:	e9 4c fe ff ff       	jmp    100013eb <ssfn_render+0x114>
1000159f:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100015a6:	eb b2                	jmp    1000155a <ssfn_render+0x283>
100015a8:	31 c0                	xor    eax,eax
100015aa:	e9 3c fe ff ff       	jmp    100013eb <ssfn_render+0x114>
100015af:	8b 9d b8 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5b8]
100015b5:	c7 84 24 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc0],0x0
100015c0:	81 fb fd 00 00 00    	cmp    ebx,0xfd
100015c6:	7f 16                	jg     100015de <ssfn_render+0x307>
100015c8:	89 da                	mov    edx,ebx
100015ca:	31 c0                	xor    eax,eax
100015cc:	39 da                	cmp    edx,ebx
100015ce:	7e 15                	jle    100015e5 <ssfn_render+0x30e>
100015d0:	85 c0                	test   eax,eax
100015d2:	75 3d                	jne    10001611 <ssfn_render+0x33a>
100015d4:	b9 f9 ff ff ff       	mov    ecx,0xfffffff9
100015d9:	e9 47 1b 00 00       	jmp    10003125 <ssfn_render+0x1e4e>
100015de:	bb 04 00 00 00       	mov    ebx,0x4
100015e3:	eb e5                	jmp    100015ca <ssfn_render+0x2f3>
100015e5:	85 c0                	test   eax,eax
100015e7:	75 28                	jne    10001611 <ssfn_render+0x33a>
100015e9:	83 bc 95 a4 f5 00 00 00 	cmp    DWORD PTR [ebp+edx*4+0xf5a4],0x0
100015f1:	74 1b                	je     1000160e <ssfn_render+0x337>
100015f3:	8b 4c 95 00          	mov    ecx,DWORD PTR [ebp+edx*4+0x0]
100015f7:	8b 09                	mov    ecx,DWORD PTR [ecx]
100015f9:	85 c9                	test   ecx,ecx
100015fb:	74 11                	je     1000160e <ssfn_render+0x337>
100015fd:	8b 71 10             	mov    esi,DWORD PTR [ecx+0x10]
10001600:	80 3c 31 00          	cmp    BYTE PTR [ecx+esi*1],0x0
10001604:	78 08                	js     1000160e <ssfn_render+0x337>
10001606:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
10001609:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
1000160c:	01 c8                	add    eax,ecx
1000160e:	42                   	inc    edx
1000160f:	eb bb                	jmp    100015cc <ssfn_render+0x2f5>
10001611:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001614:	b9 fd ff ff ff       	mov    ecx,0xfffffffd
10001619:	85 d2                	test   edx,edx
1000161b:	0f 84 04 1b 00 00    	je     10003125 <ssfn_render+0x1e4e>
10001621:	80 7a 0b 00          	cmp    BYTE PTR [edx+0xb],0x0
10001625:	0f 84 fa 1a 00 00    	je     10003125 <ssfn_render+0x1e4e>
1000162b:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
10001631:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10001635:	85 ff                	test   edi,edi
10001637:	0f 84 e8 1a 00 00    	je     10003125 <ssfn_render+0x1e4e>
1000163d:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
10001644:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
10001648:	c1 ef 10             	shr    edi,0x10
1000164b:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
1000164f:	83 ff 10             	cmp    edi,0x10
10001652:	0f 87 af fc ff ff    	ja     10001307 <ssfn_render+0x30>
10001658:	8d 70 06             	lea    esi,[eax+0x6]
1000165b:	89 85 74 f5 00 00    	mov    DWORD PTR [ebp+0xf574],eax
10001661:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10001665:	8b b5 bc f5 00 00    	mov    esi,DWORD PTR [ebp+0xf5bc]
1000166b:	89 f7                	mov    edi,esi
1000166d:	81 e7 00 02 00 00    	and    edi,0x200
10001673:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10001677:	75 34                	jne    100016ad <ssfn_render+0x3d6>
10001679:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
1000167d:	8b 8c bd 28 f5 00 00 	mov    ecx,DWORD PTR [ebp+edi*4+0xf528]
10001684:	85 c9                	test   ecx,ecx
10001686:	74 25                	je     100016ad <ssfn_render+0x3d6>
10001688:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000168c:	0f b6 ff             	movzx  edi,bh
1000168f:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
10001692:	85 c9                	test   ecx,ecx
10001694:	74 17                	je     100016ad <ssfn_render+0x3d6>
10001696:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
1000169b:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
1000169e:	85 c9                	test   ecx,ecx
100016a0:	74 0b                	je     100016ad <ssfn_render+0x3d6>
100016a2:	89 8d 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],ecx
100016a8:	e9 25 0d 00 00       	jmp    100023d2 <ssfn_render+0x10fb>
100016ad:	0f b6 4a 0b          	movzx  ecx,BYTE PTR [edx+0xb]
100016b1:	f7 c6 40 00 00 00    	test   esi,0x40
100016b7:	75 1a                	jne    100016d3 <ssfn_render+0x3fc>
100016b9:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
100016bd:	7e 10                	jle    100016cf <ssfn_render+0x3f8>
100016bf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100016c3:	83 c7 04             	add    edi,0x4
100016c6:	83 e7 fc             	and    edi,0xfffffffc
100016c9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100016cd:	eb 04                	jmp    100016d3 <ssfn_render+0x3fc>
100016cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
100016d3:	c6 44 24 28 00       	mov    BYTE PTR [esp+0x28],0x0
100016d8:	f7 c6 02 00 00 00    	test   esi,0x2
100016de:	74 14                	je     100016f4 <ssfn_render+0x41d>
100016e0:	8a 5a 08             	mov    bl,BYTE PTR [edx+0x8]
100016e3:	c0 eb 05             	shr    bl,0x5
100016e6:	89 df                	mov    edi,ebx
100016e8:	83 f7 01             	xor    edi,0x1
100016eb:	83 e7 01             	and    edi,0x1
100016ee:	89 fb                	mov    ebx,edi
100016f0:	88 5c 24 28          	mov    BYTE PTR [esp+0x28],bl
100016f4:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
100016f9:	83 e6 01             	and    esi,0x1
100016fc:	74 10                	je     1000170e <ssfn_render+0x437>
100016fe:	f6 42 08 10          	test   BYTE PTR [edx+0x8],0x10
10001702:	75 0a                	jne    1000170e <ssfn_render+0x437>
10001704:	8d 51 40             	lea    edx,[ecx+0x40]
10001707:	c1 fa 06             	sar    edx,0x6
1000170a:	88 54 24 48          	mov    BYTE PTR [esp+0x48],dl
1000170e:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
10001712:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001717:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000171b:	99                   	cdq    
1000171c:	f7 f9                	idiv   ecx
1000171e:	89 c1                	mov    ecx,eax
10001720:	31 c0                	xor    eax,eax
10001722:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001727:	74 0c                	je     10001735 <ssfn_render+0x45e>
10001729:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000172d:	be 04 00 00 00       	mov    esi,0x4
10001732:	99                   	cdq    
10001733:	f7 fe                	idiv   esi
10001735:	01 c8                	add    eax,ecx
10001737:	0f b6 74 24 48       	movzx  esi,BYTE PTR [esp+0x48]
1000173c:	b9 fa ff ff ff       	mov    ecx,0xfffffffa
10001741:	01 f0                	add    eax,esi
10001743:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
10001747:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000174f:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
10001754:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001758:	3d ff f4 00 00       	cmp    eax,0xf4ff
1000175d:	0f 8f c2 19 00 00    	jg     10003125 <ssfn_render+0x1e4e>
10001763:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
10001768:	0f 85 f0 00 00 00    	jne    1000185e <ssfn_render+0x587>
1000176e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10001772:	8d 74 85 00          	lea    esi,[ebp+eax*4+0x0]
10001776:	83 be 28 f5 00 00 00 	cmp    DWORD PTR [esi+0xf528],0x0
1000177d:	75 2f                	jne    100017ae <ssfn_render+0x4d7>
1000177f:	83 ec 0c             	sub    esp,0xc
10001782:	68 00 04 00 00       	push   0x400
10001787:	e8 fc ff ff ff       	call   10001788 <ssfn_render+0x4b1>	10001788: R_386_PC32	malloc
1000178c:	83 c4 10             	add    esp,0x10
1000178f:	89 86 28 f5 00 00    	mov    DWORD PTR [esi+0xf528],eax
10001795:	85 c0                	test   eax,eax
10001797:	75 08                	jne    100017a1 <ssfn_render+0x4ca>
10001799:	83 c9 ff             	or     ecx,0xffffffff
1000179c:	e9 84 19 00 00       	jmp    10003125 <ssfn_render+0x1e4e>
100017a1:	89 c7                	mov    edi,eax
100017a3:	b9 00 01 00 00       	mov    ecx,0x100
100017a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100017ac:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100017ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100017b2:	0f b6 dc             	movzx  ebx,ah
100017b5:	8b 86 28 f5 00 00    	mov    eax,DWORD PTR [esi+0xf528]
100017bb:	8d 1c 98             	lea    ebx,[eax+ebx*4]
100017be:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
100017c1:	75 3a                	jne    100017fd <ssfn_render+0x526>
100017c3:	83 ec 0c             	sub    esp,0xc
100017c6:	68 00 04 00 00       	push   0x400
100017cb:	e8 fc ff ff ff       	call   100017cc <ssfn_render+0x4f5>	100017cc: R_386_PC32	malloc
100017d0:	89 03                	mov    DWORD PTR [ebx],eax
100017d2:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
100017d9:	83 c4 10             	add    esp,0x10
100017dc:	89 c2                	mov    edx,eax
100017de:	0f b6 c4             	movzx  eax,ah
100017e1:	c1 ea 10             	shr    edx,0x10
100017e4:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
100017eb:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
100017ee:	85 d2                	test   edx,edx
100017f0:	74 a7                	je     10001799 <ssfn_render+0x4c2>
100017f2:	b9 00 01 00 00       	mov    ecx,0x100
100017f7:	31 c0                	xor    eax,eax
100017f9:	89 d7                	mov    edi,edx
100017fb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100017fd:	8b 84 24 c0 00 00 00 	mov    eax,DWORD PTR [esp+0xc0]
10001804:	83 ec 0c             	sub    esp,0xc
10001807:	0f b6 cc             	movzx  ecx,ah
1000180a:	89 c2                	mov    edx,eax
1000180c:	0f b6 c0             	movzx  eax,al
1000180f:	c1 ea 10             	shr    edx,0x10
10001812:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001819:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
1000181c:	8d 1c 82             	lea    ebx,[edx+eax*4]
1000181f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001823:	83 c0 08             	add    eax,0x8
10001826:	50                   	push   eax
10001827:	e8 fc ff ff ff       	call   10001828 <ssfn_render+0x551>	10001828: R_386_PC32	malloc
1000182c:	89 03                	mov    DWORD PTR [ebx],eax
1000182e:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10001834:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
1000183b:	83 c4 10             	add    esp,0x10
1000183e:	89 c2                	mov    edx,eax
10001840:	0f b6 cc             	movzx  ecx,ah
10001843:	c1 ea 10             	shr    edx,0x10
10001846:	0f b6 c0             	movzx  eax,al
10001849:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001850:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
10001853:	83 3c 82 00          	cmp    DWORD PTR [edx+eax*4],0x0
10001857:	75 0e                	jne    10001867 <ssfn_render+0x590>
10001859:	e9 3b ff ff ff       	jmp    10001799 <ssfn_render+0x4c2>
1000185e:	8d 45 1c             	lea    eax,[ebp+0x1c]
10001861:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10001867:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
1000186d:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10001871:	74 2a                	je     1000189d <ssfn_render+0x5c6>
10001873:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001878:	74 23                	je     1000189d <ssfn_render+0x5c6>
1000187a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000187d:	bb 04 00 00 00       	mov    ebx,0x4
10001882:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10001886:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
1000188a:	89 cf                	mov    edi,ecx
1000188c:	29 c7                	sub    edi,eax
1000188e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001892:	0f af c7             	imul   eax,edi
10001895:	99                   	cdq    
10001896:	f7 fb                	idiv   ebx
10001898:	99                   	cdq    
10001899:	f7 f9                	idiv   ecx
1000189b:	eb 02                	jmp    1000189f <ssfn_render+0x5c8>
1000189d:	31 c0                	xor    eax,eax
1000189f:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100018a5:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
100018a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100018ad:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
100018b5:	66 89 32             	mov    WORD PTR [edx],si
100018b8:	c6 44 24 14 fe       	mov    BYTE PTR [esp+0x14],0xfe
100018bd:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100018c3:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
100018c6:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
100018cc:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100018d2:	8a 59 04             	mov    bl,BYTE PTR [ecx+0x4]
100018d5:	01 c3                	add    ebx,eax
100018d7:	88 5a 04             	mov    BYTE PTR [edx+0x4],bl
100018da:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100018e0:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
100018e6:	8a 49 05             	mov    cl,BYTE PTR [ecx+0x5]
100018e9:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
100018ec:	8b 8d 24 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf524]
100018f2:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
100018f8:	8a 12                	mov    dl,BYTE PTR [edx]
100018fa:	83 e2 3f             	and    edx,0x3f
100018fd:	01 d0                	add    eax,edx
100018ff:	88 41 03             	mov    BYTE PTR [ecx+0x3],al
10001902:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
10001906:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000190c:	8d 50 08             	lea    edx,[eax+0x8]
1000190f:	b0 ff                	mov    al,0xff
10001911:	89 d7                	mov    edi,edx
10001913:	f3 aa                	rep stos BYTE PTR es:[edi],al
10001915:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000191b:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
1000191f:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001925:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
10001929:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000192d:	c1 e0 04             	shl    eax,0x4
10001930:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10001934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001938:	c1 e0 04             	shl    eax,0x4
1000193b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
1000193f:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
10001945:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
10001949:	3b 44 24 50          	cmp    eax,DWORD PTR [esp+0x50]
1000194d:	0f 8e 4d 0a 00 00    	jle    100023a0 <ssfn_render+0x10c9>
10001953:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10001957:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
1000195b:	8a 4e 01             	mov    cl,BYTE PTR [esi+0x1]
1000195e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
10001961:	8a 12                	mov    dl,BYTE PTR [edx]
10001963:	0f b6 5e 02          	movzx  ebx,BYTE PTR [esi+0x2]
10001967:	83 e2 40             	and    edx,0x40
1000196a:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
1000196e:	88 c2                	mov    dl,al
10001970:	21 ca                	and    edx,ecx
10001972:	fe c2                	inc    dl
10001974:	75 14                	jne    1000198a <ssfn_render+0x6b3>
10001976:	80 7c 24 1c 01       	cmp    BYTE PTR [esp+0x1c],0x1
1000197b:	19 c0                	sbb    eax,eax
1000197d:	8d 44 06 06          	lea    eax,[esi+eax*1+0x6]
10001981:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001985:	e9 09 0a 00 00       	jmp    10002393 <ssfn_render+0x10bc>
1000198a:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
1000198e:	8b 7d 18             	mov    edi,DWORD PTR [ebp+0x18]
10001991:	c1 e0 04             	shl    eax,0x4
10001994:	0f b6 77 0b          	movzx  esi,BYTE PTR [edi+0xb]
10001998:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000199d:	99                   	cdq    
1000199e:	f7 fe                	idiv   esi
100019a0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100019a4:	0f b6 c1             	movzx  eax,cl
100019a7:	c1 e0 04             	shl    eax,0x4
100019aa:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100019af:	99                   	cdq    
100019b0:	f7 fe                	idiv   esi
100019b2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100019b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100019ba:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
100019be:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
100019c2:	c1 e2 10             	shl    edx,0x10
100019c5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
100019ca:	74 0e                	je     100019da <ssfn_render+0x703>
100019cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100019d0:	83 44 24 18 06       	add    DWORD PTR [esp+0x18],0x6
100019d5:	8b 58 02             	mov    ebx,DWORD PTR [eax+0x2]
100019d8:	eb 0c                	jmp    100019e6 <ssfn_render+0x70f>
100019da:	c1 e0 08             	shl    eax,0x8
100019dd:	83 44 24 18 05       	add    DWORD PTR [esp+0x18],0x5
100019e2:	09 d0                	or     eax,edx
100019e4:	09 c3                	or     ebx,eax
100019e6:	8d 0c 1f             	lea    ecx,[edi+ebx*1]
100019e9:	8a 01                	mov    al,BYTE PTR [ecx]
100019eb:	84 c0                	test   al,al
100019ed:	0f 88 17 05 00 00    	js     10001f0a <ssfn_render+0xc33>
100019f3:	89 c7                	mov    edi,eax
100019f5:	83 e7 3f             	and    edi,0x3f
100019f8:	a8 40                	test   al,0x40
100019fa:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
100019fe:	74 10                	je     10001a10 <ssfn_render+0x739>
10001a00:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
10001a04:	89 f8                	mov    eax,edi
10001a06:	41                   	inc    ecx
10001a07:	c1 e0 08             	shl    eax,0x8
10001a0a:	09 c2                	or     edx,eax
10001a0c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
10001a10:	8d 41 01             	lea    eax,[ecx+0x1]
10001a13:	c7 85 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf580],0x0
10001a1d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001a21:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001a2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001a30:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10001a34:	83 c0 04             	add    eax,0x4
10001a37:	c1 f8 02             	sar    eax,0x2
10001a3a:	01 c7                	add    edi,eax
10001a3c:	8b 8c 24 cc 00 00 00 	mov    ecx,DWORD PTR [esp+0xcc]
10001a43:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001a47:	0f 8f d7 01 00 00    	jg     10001c24 <ssfn_render+0x94d>
10001a4d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001a50:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
10001a54:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
10001a58:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001a5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001a60:	0f b6 07             	movzx  eax,BYTE PTR [edi]
10001a63:	c1 e0 04             	shl    eax,0x4
10001a66:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a6b:	99                   	cdq    
10001a6c:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001a70:	01 c6                	add    esi,eax
10001a72:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10001a76:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10001a7a:	c1 e0 04             	shl    eax,0x4
10001a7d:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a82:	99                   	cdq    
10001a83:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001a87:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001a8b:	01 c3                	add    ebx,eax
10001a8d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10001a91:	89 c8                	mov    eax,ecx
10001a93:	01 c9                	add    ecx,ecx
10001a95:	c1 f8 02             	sar    eax,0x2
10001a98:	83 e1 06             	and    ecx,0x6
10001a9b:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
10001a9f:	d3 f8                	sar    eax,cl
10001aa1:	83 e0 03             	and    eax,0x3
10001aa4:	89 c1                	mov    ecx,eax
10001aa6:	83 f8 02             	cmp    eax,0x2
10001aa9:	74 4a                	je     10001af5 <ssfn_render+0x81e>
10001aab:	83 f8 03             	cmp    eax,0x3
10001aae:	0f 84 e4 00 00 00    	je     10001b98 <ssfn_render+0x8c1>
10001ab4:	49                   	dec    ecx
10001ab5:	74 20                	je     10001ad7 <ssfn_render+0x800>
10001ab7:	89 b5 9c f5 00 00    	mov    DWORD PTR [ebp+0xf59c],esi
10001abd:	89 b5 94 f5 00 00    	mov    DWORD PTR [ebp+0xf594],esi
10001ac3:	89 9d a0 f5 00 00    	mov    DWORD PTR [ebp+0xf5a0],ebx
10001ac9:	89 9d 98 f5 00 00    	mov    DWORD PTR [ebp+0xf598],ebx
10001acf:	83 c7 02             	add    edi,0x2
10001ad2:	e9 41 01 00 00       	jmp    10001c18 <ssfn_render+0x941>
10001ad7:	83 c7 02             	add    edi,0x2
10001ada:	50                   	push   eax
10001adb:	50                   	push   eax
10001adc:	89 e8                	mov    eax,ebp
10001ade:	53                   	push   ebx
10001adf:	56                   	push   esi
10001ae0:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10001ae4:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10001ae8:	e8 9c e9 ff ff       	call   10000489 <_ssfn_l>
10001aed:	83 c4 10             	add    esp,0x10
10001af0:	e9 23 01 00 00       	jmp    10001c18 <ssfn_render+0x941>
10001af5:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
10001af9:	83 c7 04             	add    edi,0x4
10001afc:	c1 e0 04             	shl    eax,0x4
10001aff:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b04:	99                   	cdq    
10001b05:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b09:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001b0d:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10001b11:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001b15:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001b19:	c1 e0 04             	shl    eax,0x4
10001b1c:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b21:	99                   	cdq    
10001b22:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b26:	83 ec 0c             	sub    esp,0xc
10001b29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10001b2d:	6a 00                	push   0x0
10001b2f:	53                   	push   ebx
10001b30:	56                   	push   esi
10001b31:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001b35:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
10001b39:	99                   	cdq    
10001b3a:	f7 f9                	idiv   ecx
10001b3c:	01 d8                	add    eax,ebx
10001b3e:	50                   	push   eax
10001b3f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10001b43:	2b 44 24 70          	sub    eax,DWORD PTR [esp+0x70]
10001b47:	99                   	cdq    
10001b48:	f7 f9                	idiv   ecx
10001b4a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10001b4e:	50                   	push   eax
10001b4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001b53:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001b57:	2b 85 a0 f5 00 00    	sub    eax,DWORD PTR [ebp+0xf5a0]
10001b5d:	99                   	cdq    
10001b5e:	f7 f9                	idiv   ecx
10001b60:	03 85 a0 f5 00 00    	add    eax,DWORD PTR [ebp+0xf5a0]
10001b66:	50                   	push   eax
10001b67:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10001b6b:	2b 85 9c f5 00 00    	sub    eax,DWORD PTR [ebp+0xf59c]
10001b71:	99                   	cdq    
10001b72:	f7 f9                	idiv   ecx
10001b74:	03 85 9c f5 00 00    	add    eax,DWORD PTR [ebp+0xf59c]
10001b7a:	50                   	push   eax
10001b7b:	89 e8                	mov    eax,ebp
10001b7d:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001b83:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001b89:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001b8d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001b91:	e8 04 ea ff ff       	call   1000059a <_ssfn_b>
10001b96:	eb 7d                	jmp    10001c15 <ssfn_render+0x93e>
10001b98:	83 ec 0c             	sub    esp,0xc
10001b9b:	83 c7 06             	add    edi,0x6
10001b9e:	6a 00                	push   0x0
10001ba0:	53                   	push   ebx
10001ba1:	56                   	push   esi
10001ba2:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001ba6:	c1 e0 04             	shl    eax,0x4
10001ba9:	0f af 44 24 24       	imul   eax,DWORD PTR [esp+0x24]
10001bae:	99                   	cdq    
10001baf:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
10001bb3:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001bb7:	50                   	push   eax
10001bb8:	0f b6 47 fe          	movzx  eax,BYTE PTR [edi-0x2]
10001bbc:	c1 e0 04             	shl    eax,0x4
10001bbf:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10001bc4:	99                   	cdq    
10001bc5:	f7 7c 24 38          	idiv   DWORD PTR [esp+0x38]
10001bc9:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
10001bcd:	50                   	push   eax
10001bce:	0f b6 47 fd          	movzx  eax,BYTE PTR [edi-0x3]
10001bd2:	c1 e0 04             	shl    eax,0x4
10001bd5:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10001bda:	99                   	cdq    
10001bdb:	f7 7c 24 3c          	idiv   DWORD PTR [esp+0x3c]
10001bdf:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001be3:	50                   	push   eax
10001be4:	0f b6 47 fc          	movzx  eax,BYTE PTR [edi-0x4]
10001be8:	c1 e0 04             	shl    eax,0x4
10001beb:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001bf0:	99                   	cdq    
10001bf1:	f7 7c 24 40          	idiv   DWORD PTR [esp+0x40]
10001bf5:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
10001bf9:	50                   	push   eax
10001bfa:	89 e8                	mov    eax,ebp
10001bfc:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001c02:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001c08:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001c0c:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001c10:	e8 85 e9 ff ff       	call   1000059a <_ssfn_b>
10001c15:	83 c4 30             	add    esp,0x30
10001c18:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001c1f:	e9 18 fe ff ff       	jmp    10001a3c <ssfn_render+0x765>
10001c24:	8b 85 94 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf594]
10001c2a:	3b 85 9c f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf59c]
10001c30:	75 0e                	jne    10001c40 <ssfn_render+0x969>
10001c32:	8b bd a0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5a0]
10001c38:	39 bd 98 f5 00 00    	cmp    DWORD PTR [ebp+0xf598],edi
10001c3e:	74 2e                	je     10001c6e <ssfn_render+0x997>
10001c40:	8b 8d 80 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf580]
10001c46:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001c4c:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
10001c50:	8b 95 80 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf580]
10001c56:	8b 85 6c f5 00 00    	mov    eax,DWORD PTR [ebp+0xf56c]
10001c5c:	8b 8d 98 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf598]
10001c62:	66 89 4c 50 02       	mov    WORD PTR [eax+edx*2+0x2],cx
10001c67:	83 85 80 f5 00 00 02 	add    DWORD PTR [ebp+0xf580],0x2
10001c6e:	b3 fe                	mov    bl,0xfe
10001c70:	83 bd 80 f5 00 00 04 	cmp    DWORD PTR [ebp+0xf580],0x4
10001c77:	0f 8e 16 07 00 00    	jle    10002393 <ssfn_render+0x10bc>
10001c7d:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10001c85:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001c8d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10001c95:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10001c9d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10001ca5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10001ca9:	39 7c 24 2c          	cmp    DWORD PTR [esp+0x2c],edi
10001cad:	0f 8d de 06 00 00    	jge    10002391 <ssfn_render+0x10ba>
10001cb3:	8b 85 80 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf580]
10001cb9:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001cc4:	83 e8 03             	sub    eax,0x3
10001cc7:	31 f6                	xor    esi,esi
10001cc9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001ccd:	89 f8                	mov    eax,edi
10001ccf:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
10001cd3:	c1 f8 02             	sar    eax,0x2
10001cd6:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10001cda:	8b bc 24 cc 00 00 00 	mov    edi,DWORD PTR [esp+0xcc]
10001ce1:	39 7c 24 54          	cmp    DWORD PTR [esp+0x54],edi
10001ce5:	0f 8e 16 01 00 00    	jle    10001e01 <ssfn_render+0xb2a>
10001ceb:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001cf1:	8d 47 01             	lea    eax,[edi+0x1]
10001cf4:	01 c0                	add    eax,eax
10001cf6:	0f b7 1c 02          	movzx  ebx,WORD PTR [edx+eax*1]
10001cfa:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10001cfe:	0f b7 5c 02 04       	movzx  ebx,WORD PTR [edx+eax*1+0x4]
10001d03:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10001d07:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001d0b:	7d 0c                	jge    10001d19 <ssfn_render+0xa42>
10001d0d:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001d11:	0f 8f db 00 00 00    	jg     10001df2 <ssfn_render+0xb1b>
10001d17:	eb 0a                	jmp    10001d23 <ssfn_render+0xa4c>
10001d19:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001d1d:	0f 8e cf 00 00 00    	jle    10001df2 <ssfn_render+0xb1b>
10001d23:	0f b7 4c 02 fe       	movzx  ecx,WORD PTR [edx+eax*1-0x2]
10001d28:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001d2c:	0f b7 4c 02 02       	movzx  ecx,WORD PTR [edx+eax*1+0x2]
10001d31:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001d35:	89 d8                	mov    eax,ebx
10001d37:	c1 fa 04             	sar    edx,0x4
10001d3a:	c1 f8 04             	sar    eax,0x4
10001d3d:	39 c2                	cmp    edx,eax
10001d3f:	75 0a                	jne    10001d4b <ssfn_render+0xa74>
10001d41:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10001d45:	01 c8                	add    eax,ecx
10001d47:	d1 f8                	sar    eax,1
10001d49:	eb 1a                	jmp    10001d65 <ssfn_render+0xa8e>
10001d4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001d4f:	2b 4c 24 4c          	sub    ecx,DWORD PTR [esp+0x4c]
10001d53:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
10001d57:	2b 5c 24 34          	sub    ebx,DWORD PTR [esp+0x34]
10001d5b:	0f af c1             	imul   eax,ecx
10001d5e:	99                   	cdq    
10001d5f:	f7 fb                	idiv   ebx
10001d61:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10001d65:	c1 f8 04             	sar    eax,0x4
10001d68:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001d6d:	74 04                	je     10001d73 <ssfn_render+0xa9c>
10001d6f:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
10001d73:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10001d78:	75 3f                	jne    10001db9 <ssfn_render+0xae2>
10001d7a:	80 7c 24 48 00       	cmp    BYTE PTR [esp+0x48],0x0
10001d7f:	74 38                	je     10001db9 <ssfn_render+0xae2>
10001d81:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001d85:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001d8b:	f7 db                	neg    ebx
10001d8d:	01 c2                	add    edx,eax
10001d8f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001d93:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001d97:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001d9b:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001d9f:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10001da3:	38 5c 11 08          	cmp    BYTE PTR [ecx+edx*1+0x8],bl
10001da7:	74 10                	je     10001db9 <ssfn_render+0xae2>
10001da9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10001dad:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001db1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001db5:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001db9:	31 d2                	xor    edx,edx
10001dbb:	39 f2                	cmp    edx,esi
10001dbd:	75 0b                	jne    10001dca <ssfn_render+0xaf3>
10001dbf:	66 89 84 54 d0 00 00 00 	mov    WORD PTR [esp+edx*2+0xd0],ax
10001dc7:	46                   	inc    esi
10001dc8:	eb 28                	jmp    10001df2 <ssfn_render+0xb1b>
10001dca:	0f b7 8c 54 d0 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd0]
10001dd2:	39 c1                	cmp    ecx,eax
10001dd4:	7d 03                	jge    10001dd9 <ssfn_render+0xb02>
10001dd6:	42                   	inc    edx
10001dd7:	eb e2                	jmp    10001dbb <ssfn_render+0xae4>
10001dd9:	89 f1                	mov    ecx,esi
10001ddb:	49                   	dec    ecx
10001ddc:	66 8b 9c 4c d0 00 00 00 	mov    bx,WORD PTR [esp+ecx*2+0xd0]
10001de4:	39 d1                	cmp    ecx,edx
10001de6:	66 89 9c 4c d2 00 00 00 	mov    WORD PTR [esp+ecx*2+0xd2],bx
10001dee:	7f eb                	jg     10001ddb <ssfn_render+0xb04>
10001df0:	eb cd                	jmp    10001dbf <ssfn_render+0xae8>
10001df2:	8d 47 02             	lea    eax,[edi+0x2]
10001df5:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10001dfc:	e9 d9 fe ff ff       	jmp    10001cda <ssfn_render+0xa03>
10001e01:	83 fe 01             	cmp    esi,0x1
10001e04:	7e 1f                	jle    10001e25 <ssfn_render+0xb4e>
10001e06:	f7 c6 01 00 00 00    	test   esi,0x1
10001e0c:	74 24                	je     10001e32 <ssfn_render+0xb5b>
10001e0e:	8d 46 ff             	lea    eax,[esi-0x1]
10001e11:	66 8b 94 44 d0 00 00 00 	mov    dx,WORD PTR [esp+eax*2+0xd0]
10001e19:	66 89 94 74 cc 00 00 00 	mov    WORD PTR [esp+esi*2+0xcc],dx
10001e21:	89 c6                	mov    esi,eax
10001e23:	eb 0d                	jmp    10001e32 <ssfn_render+0xb5b>
10001e25:	85 f6                	test   esi,esi
10001e27:	0f 84 c7 00 00 00    	je     10001ef4 <ssfn_render+0xc1d>
10001e2d:	be 01 00 00 00       	mov    esi,0x1
10001e32:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001e38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001e3c:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
10001e40:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001e44:	39 d1                	cmp    ecx,edx
10001e46:	7d 0b                	jge    10001e53 <ssfn_render+0xb7c>
10001e48:	8a 54 24 20          	mov    dl,BYTE PTR [esp+0x20]
10001e4c:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001e50:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10001e53:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001e5e:	31 c0                	xor    eax,eax
10001e60:	31 d2                	xor    edx,edx
10001e62:	8d 4e ff             	lea    ecx,[esi-0x1]
10001e65:	39 d1                	cmp    ecx,edx
10001e67:	7e 7d                	jle    10001ee6 <ssfn_render+0xc0f>
10001e69:	0f b7 84 54 d0 00 00 00 	movzx  eax,WORD PTR [esp+edx*2+0xd0]
10001e71:	0f b7 8c 54 d2 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd2]
10001e79:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001e7d:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001e81:	79 02                	jns    10001e85 <ssfn_render+0xbae>
10001e83:	31 c0                	xor    eax,eax
10001e85:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001e89:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
10001e8d:	39 cf                	cmp    edi,ecx
10001e8f:	7e 04                	jle    10001e95 <ssfn_render+0xbbe>
10001e91:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001e95:	85 d2                	test   edx,edx
10001e97:	74 12                	je     10001eab <ssfn_render+0xbd4>
10001e99:	0f b7 8c 54 ce 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xce]
10001ea1:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001ea5:	39 c8                	cmp    eax,ecx
10001ea7:	7d 02                	jge    10001eab <ssfn_render+0xbd4>
10001ea9:	89 c8                	mov    eax,ecx
10001eab:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10001eaf:	7d 2b                	jge    10001edc <ssfn_render+0xc05>
10001eb1:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001eb5:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
10001ebb:	8d 3c 01             	lea    edi,[ecx+eax*1]
10001ebe:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
10001ec2:	88 4c 24 34          	mov    BYTE PTR [esp+0x34],cl
10001ec6:	38 4c 3b 08          	cmp    BYTE PTR [ebx+edi*1+0x8],cl
10001eca:	75 05                	jne    10001ed1 <ssfn_render+0xbfa>
10001ecc:	c6 44 24 34 ff       	mov    BYTE PTR [esp+0x34],0xff
10001ed1:	8a 4c 24 34          	mov    cl,BYTE PTR [esp+0x34]
10001ed5:	40                   	inc    eax
10001ed6:	88 4c 3b 08          	mov    BYTE PTR [ebx+edi*1+0x8],cl
10001eda:	eb cf                	jmp    10001eab <ssfn_render+0xbd4>
10001edc:	83 c2 02             	add    edx,0x2
10001edf:	b0 01                	mov    al,0x1
10001ee1:	e9 7c ff ff ff       	jmp    10001e62 <ssfn_render+0xb8b>
10001ee6:	83 e6 fe             	and    esi,0xfffffffe
10001ee9:	84 c0                	test   al,al
10001eeb:	74 07                	je     10001ef4 <ssfn_render+0xc1d>
10001eed:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
10001ef4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001ef8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
10001efc:	01 7c 24 44          	add    DWORD PTR [esp+0x44],edi
10001f00:	83 44 24 30 10       	add    DWORD PTR [esp+0x30],0x10
10001f05:	e9 9b fd ff ff       	jmp    10001ca5 <ssfn_render+0x9ce>
10001f0a:	88 c2                	mov    dl,al
10001f0c:	80 e2 60             	and    dl,0x60
10001f0f:	0f 85 95 02 00 00    	jne    100021aa <ssfn_render+0xed3>
10001f15:	83 e0 1f             	and    eax,0x1f
10001f18:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001f1c:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10001f23:	c1 fb 04             	sar    ebx,0x4
10001f26:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10001f2a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10001f2e:	40                   	inc    eax
10001f2f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001f33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001f37:	c1 f8 04             	sar    eax,0x4
10001f3a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001f3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001f42:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001f47:	99                   	cdq    
10001f48:	f7 fe                	idiv   esi
10001f4a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001f4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001f52:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
10001f57:	99                   	cdq    
10001f58:	f7 fe                	idiv   esi
10001f5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001f5e:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001f64:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001f68:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10001f6c:	8d 14 3b             	lea    edx,[ebx+edi*1]
10001f6f:	39 d6                	cmp    esi,edx
10001f71:	7d 0a                	jge    10001f7d <ssfn_render+0xca6>
10001f73:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001f77:	8d 14 3b             	lea    edx,[ebx+edi*1]
10001f7a:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10001f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001f81:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001f89:	0f af c3             	imul   eax,ebx
10001f8c:	31 ff                	xor    edi,edi
10001f8e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10001f92:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10001f96:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10001f9a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001f9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001fa2:	29 d8                	sub    eax,ebx
10001fa4:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
10001fa8:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
10001fac:	0f 8d b1 00 00 00    	jge    10002063 <ssfn_render+0xd8c>
10001fb2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10001fb6:	99                   	cdq    
10001fb7:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001fbb:	89 c6                	mov    esi,eax
10001fbd:	31 c0                	xor    eax,eax
10001fbf:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001fc4:	74 0e                	je     10001fd4 <ssfn_render+0xcfd>
10001fc6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10001fca:	bb 04 00 00 00       	mov    ebx,0x4
10001fcf:	29 f8                	sub    eax,edi
10001fd1:	99                   	cdq    
10001fd2:	f7 fb                	idiv   ebx
10001fd4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10001fd8:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001fe3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10001fe7:	0f af 74 24 30       	imul   esi,DWORD PTR [esp+0x30]
10001fec:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001ff3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10001ff7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001ffb:	39 d8                	cmp    eax,ebx
10001ffd:	7d 4e                	jge    1000204d <ssfn_render+0xd76>
10001fff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002003:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
10002008:	99                   	cdq    
10002009:	f7 fb                	idiv   ebx
1000200b:	8d 14 06             	lea    edx,[esi+eax*1]
1000200e:	83 e0 07             	and    eax,0x7
10002011:	c1 fa 03             	sar    edx,0x3
10002014:	0f b6 54 11 02       	movzx  edx,BYTE PTR [ecx+edx*1+0x2]
10002019:	0f a3 c2             	bt     edx,eax
1000201c:	72 0e                	jb     1000202c <ssfn_render+0xd55>
1000201e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10002022:	43                   	inc    ebx
10002023:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
1000202a:	eb c0                	jmp    10001fec <ssfn_render+0xd15>
1000202c:	31 c0                	xor    eax,eax
1000202e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10002032:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10002036:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
1000203c:	40                   	inc    eax
1000203d:	03 54 24 58          	add    edx,DWORD PTR [esp+0x58]
10002041:	88 5c 10 07          	mov    BYTE PTR [eax+edx*1+0x7],bl
10002045:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
10002049:	7d e3                	jge    1000202e <ssfn_render+0xd57>
1000204b:	eb d1                	jmp    1000201e <ssfn_render+0xd47>
1000204d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002051:	47                   	inc    edi
10002052:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
10002056:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
1000205a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
1000205e:	e9 45 ff ff ff       	jmp    10001fa8 <ssfn_render+0xcd1>
10002063:	b3 fe                	mov    bl,0xfe
10002065:	f6 85 bc f5 00 00 40 	test   BYTE PTR [ebp+0xf5bc],0x40
1000206c:	0f 85 21 03 00 00    	jne    10002393 <ssfn_render+0x10bc>
10002072:	31 c0                	xor    eax,eax
10002074:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10002078:	80 7c 24 14 fd       	cmp    BYTE PTR [esp+0x14],0xfd
1000207d:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10002081:	0f 95 c0             	setne  al
10002084:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002088:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000208c:	4f                   	dec    edi
1000208d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10002091:	81 44 24 20 fc 00 00 00 	add    DWORD PTR [esp+0x20],0xfc
10002099:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
1000209d:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
100020a4:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
100020a8:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
100020ac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100020b0:	31 c0                	xor    eax,eax
100020b2:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
100020b5:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
100020b9:	83 c1 04             	add    ecx,0x4
100020bc:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
100020c0:	0f 8d c0 02 00 00    	jge    10002386 <ssfn_render+0x10af>
100020c6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
100020ca:	8d 77 01             	lea    esi,[edi+0x1]
100020cd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
100020d1:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
100020d5:	4f                   	dec    edi
100020d6:	be 01 00 00 00       	mov    esi,0x1
100020db:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
100020df:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
100020e3:	7e 63                	jle    10002148 <ssfn_render+0xe71>
100020e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100020e9:	b9 01 00 00 00       	mov    ecx,0x1
100020ee:	89 ca                	mov    edx,ecx
100020f0:	39 4c 24 44          	cmp    DWORD PTR [esp+0x44],ecx
100020f4:	7e 45                	jle    1000213b <ssfn_render+0xe64>
100020f6:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100020fc:	80 7c 02 08 ff       	cmp    BYTE PTR [edx+eax*1+0x8],0xff
10002101:	75 34                	jne    10002137 <ssfn_render+0xe60>
10002103:	89 c7                	mov    edi,eax
10002105:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10002109:	2b 7c 24 10          	sub    edi,DWORD PTR [esp+0x10]
1000210d:	38 5c 3a 08          	cmp    BYTE PTR [edx+edi*1+0x8],bl
10002111:	74 0c                	je     1000211f <ssfn_render+0xe48>
10002113:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10002117:	01 d7                	add    edi,edx
10002119:	38 5c 38 08          	cmp    BYTE PTR [eax+edi*1+0x8],bl
1000211d:	75 18                	jne    10002137 <ssfn_render+0xe60>
1000211f:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10002123:	38 5c 02 07          	cmp    BYTE PTR [edx+eax*1+0x7],bl
10002127:	74 06                	je     1000212f <ssfn_render+0xe58>
10002129:	38 5c 02 09          	cmp    BYTE PTR [edx+eax*1+0x9],bl
1000212d:	75 08                	jne    10002137 <ssfn_render+0xe60>
1000212f:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
10002133:	88 5c 02 08          	mov    BYTE PTR [edx+eax*1+0x8],bl
10002137:	41                   	inc    ecx
10002138:	40                   	inc    eax
10002139:	eb b3                	jmp    100020ee <ssfn_render+0xe17>
1000213b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000213f:	46                   	inc    esi
10002140:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
10002144:	b0 01                	mov    al,0x1
10002146:	eb 97                	jmp    100020df <ssfn_render+0xe08>
10002148:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
1000214c:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10002150:	bb 01 00 00 00       	mov    ebx,0x1
10002155:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002159:	7e 3d                	jle    10002198 <ssfn_render+0xec1>
1000215b:	b8 01 00 00 00       	mov    eax,0x1
10002160:	89 c2                	mov    edx,eax
10002162:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
10002166:	7e 23                	jle    1000218b <ssfn_render+0xeb4>
10002168:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
1000216c:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
10002172:	8d 14 07             	lea    edx,[edi+eax*1]
10002175:	0f b6 7c 16 08       	movzx  edi,BYTE PTR [esi+edx*1+0x8]
1000217a:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
1000217e:	75 08                	jne    10002188 <ssfn_render+0xeb1>
10002180:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
10002184:	88 4c 16 08          	mov    BYTE PTR [esi+edx*1+0x8],cl
10002188:	40                   	inc    eax
10002189:	eb d5                	jmp    10002160 <ssfn_render+0xe89>
1000218b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000218f:	43                   	inc    ebx
10002190:	01 74 24 34          	add    DWORD PTR [esp+0x34],esi
10002194:	b0 01                	mov    al,0x1
10002196:	eb bd                	jmp    10002155 <ssfn_render+0xe7e>
10002198:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
1000219b:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
1000219f:	01 c9                	add    ecx,ecx
100021a1:	29 4c 24 30          	sub    DWORD PTR [esp+0x30],ecx
100021a5:	e9 08 ff ff ff       	jmp    100020b2 <ssfn_render+0xddb>
100021aa:	b3 fe                	mov    bl,0xfe
100021ac:	80 fa 20             	cmp    dl,0x20
100021af:	0f 85 de 01 00 00    	jne    10002393 <ssfn_render+0x10bc>
100021b5:	89 c3                	mov    ebx,eax
100021b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
100021bb:	c1 e3 08             	shl    ebx,0x8
100021be:	81 e3 00 1f 00 00    	and    ebx,0x1f00
100021c4:	09 c3                	or     ebx,eax
100021c6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
100021ca:	43                   	inc    ebx
100021cb:	40                   	inc    eax
100021cc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100021d0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
100021d4:	40                   	inc    eax
100021d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
100021d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100021dd:	c1 f8 04             	sar    eax,0x4
100021e0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100021e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100021e8:	c1 f8 04             	sar    eax,0x4
100021eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100021ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100021f3:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
100021f8:	99                   	cdq    
100021f9:	f7 fe                	idiv   esi
100021fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100021ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002203:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
10002208:	99                   	cdq    
10002209:	f7 fe                	idiv   esi
1000220b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000220f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002213:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002219:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
1000221d:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10002221:	39 d6                	cmp    esi,edx
10002223:	7d 0b                	jge    10002230 <ssfn_render+0xf59>
10002225:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
10002229:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
1000222d:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10002230:	83 c1 04             	add    ecx,0x4
10002233:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000223e:	8d 04 19             	lea    eax,[ecx+ebx*1]
10002241:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002245:	3b 4c 24 44          	cmp    ecx,DWORD PTR [esp+0x44]
10002249:	72 35                	jb     10002280 <ssfn_render+0xfa9>
1000224b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000224f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10002253:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002258:	2b 74 24 14          	sub    esi,DWORD PTR [esp+0x14]
1000225c:	03 54 24 38          	add    edx,DWORD PTR [esp+0x38]
10002260:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10002267:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
1000226b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10002273:	31 d2                	xor    edx,edx
10002275:	31 ff                	xor    edi,edi
10002277:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
1000227b:	e9 cc 00 00 00       	jmp    1000234c <ssfn_render+0x1075>
10002280:	8a 11                	mov    dl,BYTE PTR [ecx]
10002282:	89 d0                	mov    eax,edx
10002284:	83 e0 7f             	and    eax,0x7f
10002287:	84 d2                	test   dl,dl
10002289:	8d 78 01             	lea    edi,[eax+0x1]
1000228c:	78 09                	js     10002297 <ssfn_render+0xfc0>
1000228e:	41                   	inc    ecx
1000228f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002293:	89 ca                	mov    edx,ecx
10002295:	eb 3d                	jmp    100022d4 <ssfn_render+0xffd>
10002297:	48                   	dec    eax
10002298:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
1000229f:	83 f8 fe             	cmp    eax,0xfffffffe
100022a2:	74 16                	je     100022ba <ssfn_render+0xfe3>
100022a4:	8d 5a 01             	lea    ebx,[edx+0x1]
100022a7:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
100022ae:	8a 59 01             	mov    bl,BYTE PTR [ecx+0x1]
100022b1:	88 9c 14 d0 05 00 00 	mov    BYTE PTR [esp+edx*1+0x5d0],bl
100022b8:	eb dd                	jmp    10002297 <ssfn_render+0xfc0>
100022ba:	83 c1 02             	add    ecx,0x2
100022bd:	eb 86                	jmp    10002245 <ssfn_render+0xf6e>
100022bf:	42                   	inc    edx
100022c0:	8d 73 01             	lea    esi,[ebx+0x1]
100022c3:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
100022ca:	8a 42 ff             	mov    al,BYTE PTR [edx-0x1]
100022cd:	88 84 1c d0 05 00 00 	mov    BYTE PTR [esp+ebx*1+0x5d0],al
100022d4:	ff 4c 24 2c          	dec    DWORD PTR [esp+0x2c]
100022d8:	8b 9c 24 cc 00 00 00 	mov    ebx,DWORD PTR [esp+0xcc]
100022df:	83 7c 24 2c fe       	cmp    DWORD PTR [esp+0x2c],0xfffffffe
100022e4:	75 d9                	jne    100022bf <ssfn_render+0xfe8>
100022e6:	01 f9                	add    ecx,edi
100022e8:	e9 58 ff ff ff       	jmp    10002245 <ssfn_render+0xf6e>
100022ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100022f1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
100022f5:	99                   	cdq    
100022f6:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
100022fa:	0f af c8             	imul   ecx,eax
100022fd:	31 c0                	xor    eax,eax
100022ff:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10002304:	74 0e                	je     10002314 <ssfn_render+0x103d>
10002306:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
1000230a:	bb 04 00 00 00       	mov    ebx,0x4
1000230f:	29 f8                	sub    eax,edi
10002311:	99                   	cdq    
10002312:	f7 fb                	idiv   ebx
10002314:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10002318:	31 db                	xor    ebx,ebx
1000231a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000231e:	31 f6                	xor    esi,esi
10002320:	8d 84 24 d0 05 01 00 	lea    eax,[esp+0x105d0]
10002327:	01 c1                	add    ecx,eax
10002329:	39 74 24 1c          	cmp    DWORD PTR [esp+0x1c],esi
1000232d:	7f 30                	jg     1000235f <ssfn_render+0x1088>
1000232f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10002333:	85 c0                	test   eax,eax
10002335:	79 02                	jns    10002339 <ssfn_render+0x1062>
10002337:	31 c0                	xor    eax,eax
10002339:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000233d:	47                   	inc    edi
1000233e:	01 5c 24 38          	add    DWORD PTR [esp+0x38],ebx
10002342:	b2 01                	mov    dl,0x1
10002344:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
10002348:	01 5c 24 2c          	add    DWORD PTR [esp+0x2c],ebx
1000234c:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
10002350:	7c 9b                	jl     100022ed <ssfn_render+0x1016>
10002352:	84 d2                	test   dl,dl
10002354:	74 3b                	je     10002391 <ssfn_render+0x10ba>
10002356:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
1000235d:	eb 32                	jmp    10002391 <ssfn_render+0x10ba>
1000235f:	89 d8                	mov    eax,ebx
10002361:	99                   	cdq    
10002362:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10002366:	8a 84 08 00 00 ff ff 	mov    al,BYTE PTR [eax+ecx*1-0x10000]
1000236d:	3c ff                	cmp    al,0xff
1000236f:	74 0e                	je     1000237f <ssfn_render+0x10a8>
10002371:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10002375:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
1000237b:	88 44 16 08          	mov    BYTE PTR [esi+edx*1+0x8],al
1000237f:	46                   	inc    esi
10002380:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
10002384:	eb a3                	jmp    10002329 <ssfn_render+0x1052>
10002386:	84 c0                	test   al,al
10002388:	74 07                	je     10002391 <ssfn_render+0x10ba>
1000238a:	89 94 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],edx
10002391:	b3 fe                	mov    bl,0xfe
10002393:	ff 44 24 50          	inc    DWORD PTR [esp+0x50]
10002397:	88 5c 24 14          	mov    BYTE PTR [esp+0x14],bl
1000239b:	e9 9f f5 ff ff       	jmp    1000193f <ssfn_render+0x668>
100023a0:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100023a6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
100023a9:	8a 52 0c             	mov    dl,BYTE PTR [edx+0xc]
100023ac:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
100023af:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100023b5:	0f b6 72 07          	movzx  esi,BYTE PTR [edx+0x7]
100023b9:	0f b6 5a 06          	movzx  ebx,BYTE PTR [edx+0x6]
100023bd:	89 f0                	mov    eax,esi
100023bf:	89 d9                	mov    ecx,ebx
100023c1:	43                   	inc    ebx
100023c2:	39 de                	cmp    esi,ebx
100023c4:	7e 08                	jle    100023ce <ssfn_render+0x10f7>
100023c6:	48                   	dec    eax
100023c7:	29 c8                	sub    eax,ecx
100023c9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
100023cc:	eb 04                	jmp    100023d2 <ssfn_render+0x10fb>
100023ce:	c6 42 07 00          	mov    BYTE PTR [edx+0x7],0x0
100023d2:	83 bc 24 f4 05 01 00 00 	cmp    DWORD PTR [esp+0x105f4],0x0
100023da:	0f 84 c9 0c 00 00    	je     100030a9 <ssfn_render+0x1dd2>
100023e0:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
100023e6:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
100023ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100023f0:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100023f3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100023f7:	0f ba e0 0c          	bt     eax,0xc
100023fb:	72 22                	jb     1000241f <ssfn_render+0x1148>
100023fd:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10002400:	83 e0 0f             	and    eax,0xf
10002403:	3c 03                	cmp    al,0x3
10002405:	74 18                	je     1000241f <ssfn_render+0x1148>
10002407:	0f b6 4e 0c          	movzx  ecx,BYTE PTR [esi+0xc]
1000240b:	84 c9                	test   cl,cl
1000240d:	74 10                	je     1000241f <ssfn_render+0x1148>
1000240f:	0f b6 56 0b          	movzx  edx,BYTE PTR [esi+0xb]
10002413:	0f af d7             	imul   edx,edi
10002416:	89 d0                	mov    eax,edx
10002418:	99                   	cdq    
10002419:	f7 f9                	idiv   ecx
1000241b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000241f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002423:	39 85 c4 f5 00 00    	cmp    DWORD PTR [ebp+0xf5c4],eax
10002429:	7d 06                	jge    10002431 <ssfn_render+0x115a>
1000242b:	89 85 c4 f5 00 00    	mov    DWORD PTR [ebp+0xf5c4],eax
10002431:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
10002437:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
1000243b:	0f b7 13             	movzx  edx,WORD PTR [ebx]
1000243e:	0f af 54 24 0c       	imul   edx,DWORD PTR [esp+0xc]
10002443:	89 d0                	mov    eax,edx
10002445:	99                   	cdq    
10002446:	f7 f9                	idiv   ecx
10002448:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
1000244c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002450:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
10002453:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
10002457:	0f b6 43 03          	movzx  eax,BYTE PTR [ebx+0x3]
1000245b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000245f:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
10002464:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002468:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000246d:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002471:	99                   	cdq    
10002472:	f7 f9                	idiv   ecx
10002474:	31 d2                	xor    edx,edx
10002476:	83 ff 10             	cmp    edi,0x10
10002479:	0f 9f c2             	setg   dl
1000247c:	42                   	inc    edx
1000247d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
10002481:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
10002485:	7d 08                	jge    1000248f <ssfn_render+0x11b8>
10002487:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000248b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
1000248f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
10002493:	39 c2                	cmp    edx,eax
10002495:	7d 04                	jge    1000249b <ssfn_render+0x11c4>
10002497:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000249b:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
100024a0:	74 4c                	je     100024ee <ssfn_render+0x1217>
100024a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100024a6:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100024ab:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100024af:	99                   	cdq    
100024b0:	f7 f9                	idiv   ecx
100024b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100024b6:	81 e2 00 08 00 00    	and    edx,0x800
100024bc:	74 04                	je     100024c2 <ssfn_render+0x11eb>
100024be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100024c2:	01 d0                	add    eax,edx
100024c4:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
100024ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100024ce:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
100024d2:	0f b6 43 06          	movzx  eax,BYTE PTR [ebx+0x6]
100024d6:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100024db:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100024df:	99                   	cdq    
100024e0:	f7 f9                	idiv   ecx
100024e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
100024e6:	89 85 8c f5 00 00    	mov    DWORD PTR [ebp+0xf58c],eax
100024ec:	eb 22                	jmp    10002510 <ssfn_render+0x1239>
100024ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100024f2:	c7 85 8c f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf58c],0x0
100024fc:	d1 f8                	sar    eax,1
100024fe:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
10002506:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000250a:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
10002510:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002517:	8b 18                	mov    ebx,DWORD PTR [eax]
10002519:	85 db                	test   ebx,ebx
1000251b:	0f 84 2e 09 00 00    	je     10002e4f <ssfn_render+0x1b78>
10002521:	0f bf 50 04          	movsx  edx,WORD PTR [eax+0x4]
10002525:	89 d1                	mov    ecx,edx
10002527:	89 d0                	mov    eax,edx
10002529:	66 c1 f9 0b          	sar    cx,0xb
1000252d:	c1 f8 1f             	sar    eax,0x1f
10002530:	31 c2                	xor    edx,eax
10002532:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
10002536:	29 44 24 54          	sub    DWORD PTR [esp+0x54],eax
1000253a:	88 c8                	mov    al,cl
1000253c:	83 e0 10             	and    eax,0x10
1000253f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
10002543:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002547:	83 c0 40             	add    eax,0x40
1000254a:	c1 f8 06             	sar    eax,0x6
1000254d:	89 84 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],eax
10002554:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002558:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
1000255c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
10002560:	7d 08                	jge    1000256a <ssfn_render+0x1293>
10002562:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002566:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
1000256a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000256d:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
10002575:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002579:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
10002581:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
10002585:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000258a:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000258e:	99                   	cdq    
1000258f:	f7 f9                	idiv   ecx
10002591:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
10002595:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000259c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
1000259f:	0f b6 f4             	movzx  esi,ah
100025a2:	89 c2                	mov    edx,eax
100025a4:	89 74 24 5c          	mov    DWORD PTR [esp+0x5c],esi
100025a8:	c1 ea 10             	shr    edx,0x10
100025ab:	0f b6 fa             	movzx  edi,dl
100025ae:	89 7c 24 58          	mov    DWORD PTR [esp+0x58],edi
100025b2:	0f b6 f8             	movzx  edi,al
100025b5:	c1 e8 18             	shr    eax,0x18
100025b8:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
100025bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100025c0:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100025c7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
100025ca:	0f b6 fc             	movzx  edi,ah
100025cd:	89 c2                	mov    edx,eax
100025cf:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
100025d6:	c1 ea 10             	shr    edx,0x10
100025d9:	0f b6 c0             	movzx  eax,al
100025dc:	0f b6 f2             	movzx  esi,dl
100025df:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
100025e6:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
100025ed:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
100025f1:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100025f8:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
100025ff:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002603:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002607:	0f af c2             	imul   eax,edx
1000260a:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
1000260e:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
10002612:	8d 04 90             	lea    eax,[eax+edx*4]
10002615:	01 d8                	add    eax,ebx
10002617:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
1000261e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10002622:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
10002629:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
1000262e:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
10002635:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10002639:	39 74 24 4c          	cmp    DWORD PTR [esp+0x4c],esi
1000263d:	0f 8d e2 04 00 00    	jge    10002b25 <ssfn_render+0x184e>
10002643:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000264a:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002651:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002655:	0f bf 57 06          	movsx  edx,WORD PTR [edi+0x6]
10002659:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
1000265d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002661:	39 d0                	cmp    eax,edx
10002663:	0f 8d bc 04 00 00    	jge    10002b25 <ssfn_render+0x184e>
10002669:	85 c0                	test   eax,eax
1000266b:	0f 88 94 04 00 00    	js     10002b05 <ssfn_render+0x182e>
10002671:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002677:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
1000267b:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
1000267f:	c1 e1 08             	shl    ecx,0x8
10002682:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
1000268a:	89 c8                	mov    eax,ecx
1000268c:	0f af c3             	imul   eax,ebx
1000268f:	99                   	cdq    
10002690:	f7 fe                	idiv   esi
10002692:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
10002699:	c1 f8 08             	sar    eax,0x8
1000269c:	89 84 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],eax
100026a3:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
100026a9:	0f af c3             	imul   eax,ebx
100026ac:	99                   	cdq    
100026ad:	f7 fe                	idiv   esi
100026af:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
100026b3:	c1 f8 08             	sar    eax,0x8
100026b6:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
100026bd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
100026c1:	2b 84 24 94 00 00 00 	sub    eax,DWORD PTR [esp+0x94]
100026c8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
100026cf:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100026d6:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
100026da:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
100026de:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
100026e2:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
100026e6:	0f 8d 19 04 00 00    	jge    10002b05 <ssfn_render+0x182e>
100026ec:	85 c0                	test   eax,eax
100026ee:	0f 88 ff 03 00 00    	js     10002af3 <ssfn_render+0x181c>
100026f4:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100026fb:	83 78 14 00          	cmp    DWORD PTR [eax+0x14],0x0
100026ff:	75 42                	jne    10002743 <ssfn_render+0x146c>
10002701:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002705:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
1000270c:	b9 10 00 00 00       	mov    ecx,0x10
10002711:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
10002714:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
1000271b:	89 c2                	mov    edx,eax
1000271d:	0f b6 fc             	movzx  edi,ah
10002720:	d3 ea                	shr    edx,cl
10002722:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
10002729:	0f b6 f2             	movzx  esi,dl
1000272c:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002730:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
10002737:	d3 e8                	shr    eax,cl
10002739:	0f b6 c0             	movzx  eax,al
1000273c:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
10002743:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002749:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
1000274d:	0f b7 18             	movzx  ebx,WORD PTR [eax]
10002750:	c1 e1 08             	shl    ecx,0x8
10002753:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
10002757:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
1000275f:	89 c8                	mov    eax,ecx
10002761:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
10002769:	0f af c3             	imul   eax,ebx
1000276c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
10002774:	99                   	cdq    
10002775:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
1000277d:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002781:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
10002789:	89 84 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],eax
10002790:	c1 f8 08             	sar    eax,0x8
10002793:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
1000279a:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
100027a0:	0f af c3             	imul   eax,ebx
100027a3:	99                   	cdq    
100027a4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
100027a8:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
100027ac:	c1 f8 08             	sar    eax,0x8
100027af:	89 84 24 b4 00 00 00 	mov    DWORD PTR [esp+0xb4],eax
100027b6:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
100027bd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100027c1:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
100027c5:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
100027c9:	0f 8d 3b 02 00 00    	jge    10002a0a <ssfn_render+0x1733>
100027cf:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
100027d3:	c1 fa 08             	sar    edx,0x8
100027d6:	3b 94 24 a8 00 00 00 	cmp    edx,DWORD PTR [esp+0xa8]
100027dd:	75 25                	jne    10002804 <ssfn_render+0x152d>
100027df:	0f b6 4c 24 48       	movzx  ecx,BYTE PTR [esp+0x48]
100027e4:	8b bc 24 a0 00 00 00 	mov    edi,DWORD PTR [esp+0xa0]
100027eb:	b8 00 01 00 00       	mov    eax,0x100
100027f0:	81 64 24 48 00 ff ff ff 	and    DWORD PTR [esp+0x48],0xffffff00
100027f8:	29 c8                	sub    eax,ecx
100027fa:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
100027fe:	39 c7                	cmp    edi,eax
10002800:	7e 1c                	jle    1000281e <ssfn_render+0x1547>
10002802:	eb 16                	jmp    1000281a <ssfn_render+0x1543>
10002804:	c7 44 24 2c 00 01 00 00 	mov    DWORD PTR [esp+0x2c],0x100
1000280c:	3b 94 24 ac 00 00 00 	cmp    edx,DWORD PTR [esp+0xac]
10002813:	75 09                	jne    1000281e <ssfn_render+0x1547>
10002815:	0f b6 44 24 68       	movzx  eax,BYTE PTR [esp+0x68]
1000281a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000281e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
10002822:	0f b7 00             	movzx  eax,WORD PTR [eax]
10002825:	0f af c2             	imul   eax,edx
10002828:	89 84 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],eax
1000282f:	0f b6 44 24 6c       	movzx  eax,BYTE PTR [esp+0x6c]
10002834:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10002839:	c1 f8 08             	sar    eax,0x8
1000283c:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
10002843:	8b 84 24 98 00 00 00 	mov    eax,DWORD PTR [esp+0x98]
1000284a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
1000284e:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
10002852:	39 74 24 44          	cmp    DWORD PTR [esp+0x44],esi
10002856:	0f 8d a1 01 00 00    	jge    100029fd <ssfn_render+0x1726>
1000285c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002860:	c1 f8 08             	sar    eax,0x8
10002863:	3b 84 24 b0 00 00 00 	cmp    eax,DWORD PTR [esp+0xb0]
1000286a:	75 3b                	jne    100028a7 <ssfn_render+0x15d0>
1000286c:	0f b6 4c 24 44       	movzx  ecx,BYTE PTR [esp+0x44]
10002871:	ba 00 01 00 00       	mov    edx,0x100
10002876:	81 64 24 44 00 ff ff ff 	and    DWORD PTR [esp+0x44],0xffffff00
1000287e:	29 ca                	sub    edx,ecx
10002880:	89 f1                	mov    ecx,esi
10002882:	2b 8c 24 98 00 00 00 	sub    ecx,DWORD PTR [esp+0x98]
10002889:	39 d1                	cmp    ecx,edx
1000288b:	7c 0e                	jl     1000289b <ssfn_render+0x15c4>
1000288d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002891:	81 fa 00 01 00 00    	cmp    edx,0x100
10002897:	74 22                	je     100028bb <ssfn_render+0x15e4>
10002899:	89 d1                	mov    ecx,edx
1000289b:	0f af 4c 24 2c       	imul   ecx,DWORD PTR [esp+0x2c]
100028a0:	89 cf                	mov    edi,ecx
100028a2:	c1 ff 08             	sar    edi,0x8
100028a5:	eb 14                	jmp    100028bb <ssfn_render+0x15e4>
100028a7:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
100028ae:	3b 84 24 b4 00 00 00 	cmp    eax,DWORD PTR [esp+0xb4]
100028b5:	74 04                	je     100028bb <ssfn_render+0x15e4>
100028b7:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
100028bb:	03 44 24 74          	add    eax,DWORD PTR [esp+0x74]
100028bf:	01 7c 24 30          	add    DWORD PTR [esp+0x30],edi
100028c3:	8b b4 24 b8 00 00 00 	mov    esi,DWORD PTR [esp+0xb8]
100028ca:	0f b6 54 06 08       	movzx  edx,BYTE PTR [esi+eax*1+0x8]
100028cf:	81 fa ff 00 00 00    	cmp    edx,0xff
100028d5:	75 37                	jne    1000290e <ssfn_render+0x1637>
100028d7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
100028de:	81 44 24 40 ff 00 00 00 	add    DWORD PTR [esp+0x40],0xff
100028e6:	0f af c7             	imul   eax,edi
100028e9:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
100028ed:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
100028f4:	0f af c7             	imul   eax,edi
100028f7:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
100028fb:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
10002902:	0f af c7             	imul   eax,edi
10002905:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
10002909:	e9 e2 00 00 00       	jmp    100029f0 <ssfn_render+0x1719>
1000290e:	81 fa fe 00 00 00    	cmp    edx,0xfe
10002914:	74 2d                	je     10002943 <ssfn_render+0x166c>
10002916:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002919:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
1000291c:	85 c9                	test   ecx,ecx
1000291e:	74 23                	je     10002943 <ssfn_render+0x166c>
10002920:	01 c8                	add    eax,ecx
10002922:	8b 1c 90             	mov    ebx,DWORD PTR [eax+edx*4]
10002925:	89 d9                	mov    ecx,ebx
10002927:	89 9c 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],ebx
1000292e:	c1 e9 10             	shr    ecx,0x10
10002931:	0f b6 f7             	movzx  esi,bh
10002934:	0f b6 c1             	movzx  eax,cl
10002937:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
1000293b:	0f b6 c3             	movzx  eax,bl
1000293e:	c1 eb 18             	shr    ebx,0x18
10002941:	eb 14                	jmp    10002957 <ssfn_render+0x1680>
10002943:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10002947:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000294b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
1000294f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
10002953:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002957:	81 fb ff 00 00 00    	cmp    ebx,0xff
1000295d:	75 25                	jne    10002984 <ssfn_render+0x16ad>
1000295f:	0f af c7             	imul   eax,edi
10002962:	0f af f7             	imul   esi,edi
10002965:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
10002969:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
1000296d:	69 c7 ff 00 00 00    	imul   eax,edi,0xff
10002973:	0f af cf             	imul   ecx,edi
10002976:	01 74 24 38          	add    DWORD PTR [esp+0x38],esi
1000297a:	01 4c 24 34          	add    DWORD PTR [esp+0x34],ecx
1000297e:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
10002982:	eb 6c                	jmp    100029f0 <ssfn_render+0x1719>
10002984:	0f af f3             	imul   esi,ebx
10002987:	0f af c3             	imul   eax,ebx
1000298a:	b9 ff 00 00 00       	mov    ecx,0xff
1000298f:	8b 94 24 88 00 00 00 	mov    edx,DWORD PTR [esp+0x88]
10002996:	29 d9                	sub    ecx,ebx
10002998:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
1000299c:	0f af d1             	imul   edx,ecx
1000299f:	b9 ff 00 00 00       	mov    ecx,0xff
100029a4:	01 d0                	add    eax,edx
100029a6:	0f af c7             	imul   eax,edi
100029a9:	99                   	cdq    
100029aa:	f7 f9                	idiv   ecx
100029ac:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
100029b0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
100029b4:	0f af 84 24 8c 00 00 00 	imul   eax,DWORD PTR [esp+0x8c]
100029bc:	01 f0                	add    eax,esi
100029be:	89 ce                	mov    esi,ecx
100029c0:	0f af c7             	imul   eax,edi
100029c3:	99                   	cdq    
100029c4:	f7 f9                	idiv   ecx
100029c6:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
100029ca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
100029ce:	0f af cb             	imul   ecx,ebx
100029d1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
100029d5:	0f af df             	imul   ebx,edi
100029d8:	0f af 84 24 90 00 00 00 	imul   eax,DWORD PTR [esp+0x90]
100029e0:	01 5c 24 40          	add    DWORD PTR [esp+0x40],ebx
100029e4:	01 c8                	add    eax,ecx
100029e6:	0f af c7             	imul   eax,edi
100029e9:	99                   	cdq    
100029ea:	f7 fe                	idiv   esi
100029ec:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
100029f0:	81 44 24 44 00 01 00 00 	add    DWORD PTR [esp+0x44],0x100
100029f8:	e9 51 fe ff ff       	jmp    1000284e <ssfn_render+0x1577>
100029fd:	81 44 24 48 00 01 00 00 	add    DWORD PTR [esp+0x48],0x100
10002a05:	e9 b7 fd ff ff       	jmp    100027c1 <ssfn_render+0x14ea>
10002a0a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10002a0f:	74 30                	je     10002a41 <ssfn_render+0x176a>
10002a11:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002a15:	31 d2                	xor    edx,edx
10002a17:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a1b:	31 d2                	xor    edx,edx
10002a1d:	89 c1                	mov    ecx,eax
10002a1f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10002a23:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a27:	31 d2                	xor    edx,edx
10002a29:	89 c6                	mov    esi,eax
10002a2b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10002a2f:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a33:	31 d2                	xor    edx,edx
10002a35:	89 c3                	mov    ebx,eax
10002a37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002a3b:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a3f:	eb 1c                	jmp    10002a5d <ssfn_render+0x1786>
10002a41:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002a45:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
10002a49:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10002a4d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002a51:	c1 e9 08             	shr    ecx,0x8
10002a54:	c1 ee 08             	shr    esi,0x8
10002a57:	c1 eb 08             	shr    ebx,0x8
10002a5a:	c1 e8 08             	shr    eax,0x8
10002a5d:	83 f8 0f             	cmp    eax,0xf
10002a60:	0f 86 8d 00 00 00    	jbe    10002af3 <ssfn_render+0x181c>
10002a66:	89 ca                	mov    edx,ecx
10002a68:	81 f9 ff 00 00 00    	cmp    ecx,0xff
10002a6e:	76 05                	jbe    10002a75 <ssfn_render+0x179e>
10002a70:	ba ff 00 00 00       	mov    edx,0xff
10002a75:	b9 10 00 00 00       	mov    ecx,0x10
10002a7a:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
10002a81:	d3 e2                	shl    edx,cl
10002a83:	3d ff 00 00 00       	cmp    eax,0xff
10002a88:	89 d1                	mov    ecx,edx
10002a8a:	76 05                	jbe    10002a91 <ssfn_render+0x17ba>
10002a8c:	b8 ff 00 00 00       	mov    eax,0xff
10002a91:	c1 e0 18             	shl    eax,0x18
10002a94:	09 c8                	or     eax,ecx
10002a96:	81 fe ff 00 00 00    	cmp    esi,0xff
10002a9c:	76 05                	jbe    10002aa3 <ssfn_render+0x17cc>
10002a9e:	be ff 00 00 00       	mov    esi,0xff
10002aa3:	c1 e6 08             	shl    esi,0x8
10002aa6:	09 f0                	or     eax,esi
10002aa8:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002aae:	76 05                	jbe    10002ab5 <ssfn_render+0x17de>
10002ab0:	bb ff 00 00 00       	mov    ebx,0xff
10002ab5:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002ab9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002abd:	d3 e3                	shl    ebx,cl
10002abf:	09 c3                	or     ebx,eax
10002ac1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10002ac8:	89 1c b0             	mov    DWORD PTR [eax+esi*4],ebx
10002acb:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002acf:	39 5c 24 4c          	cmp    DWORD PTR [esp+0x4c],ebx
10002ad3:	75 1e                	jne    10002af3 <ssfn_render+0x181c>
10002ad5:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
10002adc:	7e 07                	jle    10002ae5 <ssfn_render+0x180e>
10002ade:	89 b4 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],esi
10002ae5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002ae9:	39 5c 24 7c          	cmp    DWORD PTR [esp+0x7c],ebx
10002aed:	7d 04                	jge    10002af3 <ssfn_render+0x181c>
10002aef:	89 5c 24 7c          	mov    DWORD PTR [esp+0x7c],ebx
10002af3:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002af7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002afb:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10002aff:	0f 85 ca fb ff ff    	jne    100026cf <ssfn_render+0x13f8>
10002b05:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002b0c:	ff 44 24 4c          	inc    DWORD PTR [esp+0x4c]
10002b10:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002b14:	25 fc ff 00 00       	and    eax,0xfffc
10002b19:	01 84 24 80 00 00 00 	add    DWORD PTR [esp+0x80],eax
10002b20:	e9 10 fb ff ff       	jmp    10002635 <ssfn_render+0x135e>
10002b25:	f6 85 bc f5 00 00 10 	test   BYTE PTR [ebp+0xf5bc],0x10
10002b2c:	0f 84 90 01 00 00    	je     10002cc2 <ssfn_render+0x19eb>
10002b32:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002b3a:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
10002b41:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002b45:	40                   	inc    eax
10002b46:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002b4a:	29 c7                	sub    edi,eax
10002b4c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10002b50:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002b54:	8d 44 18 02          	lea    eax,[eax+ebx*1+0x2]
10002b58:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002b5c:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
10002b60:	7e 09                	jle    10002b6b <ssfn_render+0x1894>
10002b62:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002b66:	40                   	inc    eax
10002b67:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002b6b:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002b72:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002b79:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
10002b7d:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002b81:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002b85:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002b89:	0f af c2             	imul   eax,edx
10002b8c:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
10002b90:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
10002b94:	8d 44 90 fc          	lea    eax,[eax+edx*4-0x4]
10002b98:	03 07                	add    eax,DWORD PTR [edi]
10002b9a:	89 c7                	mov    edi,eax
10002b9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002ba0:	c1 e0 18             	shl    eax,0x18
10002ba3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002ba7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002bab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002baf:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002bb4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002bb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002bbc:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002bc0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
10002bc4:	0f 8e f8 00 00 00    	jle    10002cc2 <ssfn_render+0x19eb>
10002bca:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002bd1:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
10002bd8:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002bdc:	0f bf 56 06          	movsx  edx,WORD PTR [esi+0x6]
10002be0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002be4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002be8:	39 d0                	cmp    eax,edx
10002bea:	0f 8d d2 00 00 00    	jge    10002cc2 <ssfn_render+0x19eb>
10002bf0:	31 db                	xor    ebx,ebx
10002bf2:	85 c0                	test   eax,eax
10002bf4:	79 23                	jns    10002c19 <ssfn_render+0x1942>
10002bf6:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002bfd:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002c01:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002c05:	25 fc ff 00 00       	and    eax,0xfffc
10002c0a:	01 c7                	add    edi,eax
10002c0c:	eb aa                	jmp    10002bb8 <ssfn_render+0x18e1>
10002c0e:	85 c0                	test   eax,eax
10002c10:	79 20                	jns    10002c32 <ssfn_render+0x195b>
10002c12:	43                   	inc    ebx
10002c13:	39 5c 24 70          	cmp    DWORD PTR [esp+0x70],ebx
10002c17:	7c dd                	jl     10002bf6 <ssfn_render+0x191f>
10002c19:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c20:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002c24:	01 d8                	add    eax,ebx
10002c26:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002c2a:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002c2e:	7c de                	jl     10002c0e <ssfn_render+0x1937>
10002c30:	eb c4                	jmp    10002bf6 <ssfn_render+0x191f>
10002c32:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002c36:	7e 06                	jle    10002c3e <ssfn_render+0x1967>
10002c38:	3b 5c 24 34          	cmp    ebx,DWORD PTR [esp+0x34]
10002c3c:	7f d4                	jg     10002c12 <ssfn_render+0x193b>
10002c3e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
10002c41:	b8 10 00 00 00       	mov    eax,0x10
10002c46:	0f b6 f6             	movzx  esi,dh
10002c49:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10002c4d:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
10002c51:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002c55:	89 d0                	mov    eax,edx
10002c57:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002c5b:	d3 e8                	shr    eax,cl
10002c5d:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002c61:	0f b6 c0             	movzx  eax,al
10002c64:	d3 ea                	shr    edx,cl
10002c66:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002c6a:	0f b6 f2             	movzx  esi,dl
10002c6d:	29 c1                	sub    ecx,eax
10002c6f:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002c73:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002c78:	29 f2                	sub    edx,esi
10002c7a:	c1 f9 08             	sar    ecx,0x8
10002c7d:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002c82:	01 c8                	add    eax,ecx
10002c84:	c1 fa 08             	sar    edx,0x8
10002c87:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002c8b:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
10002c8f:	d3 e0                	shl    eax,cl
10002c91:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002c95:	03 74 24 40          	add    esi,DWORD PTR [esp+0x40]
10002c99:	2b 54 24 3c          	sub    edx,DWORD PTR [esp+0x3c]
10002c9d:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002ca1:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002ca6:	d3 e6                	shl    esi,cl
10002ca8:	c1 fa 08             	sar    edx,0x8
10002cab:	03 54 24 3c          	add    edx,DWORD PTR [esp+0x3c]
10002caf:	c1 e2 08             	shl    edx,0x8
10002cb2:	09 d0                	or     eax,edx
10002cb4:	0b 44 24 44          	or     eax,DWORD PTR [esp+0x44]
10002cb8:	09 c6                	or     esi,eax
10002cba:	89 34 9f             	mov    DWORD PTR [edi+ebx*4],esi
10002cbd:	e9 50 ff ff ff       	jmp    10002c12 <ssfn_render+0x193b>
10002cc2:	f6 85 bc f5 00 00 20 	test   BYTE PTR [ebp+0xf5bc],0x20
10002cc9:	0f 84 80 01 00 00    	je     10002e4f <ssfn_render+0x1b78>
10002ccf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10002cd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002cd7:	d1 fa                	sar    edx,1
10002cd9:	40                   	inc    eax
10002cda:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002cde:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002ce2:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
10002ce6:	7e 09                	jle    10002cf1 <ssfn_render+0x1a1a>
10002ce8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002cec:	40                   	inc    eax
10002ced:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002cf1:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002cf8:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002cff:	0f b7 4b 08          	movzx  ecx,WORD PTR [ebx+0x8]
10002d03:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002d07:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10002d0b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002d0f:	01 d0                	add    eax,edx
10002d11:	0f af c1             	imul   eax,ecx
10002d14:	0f bf 4b 0a          	movsx  ecx,WORD PTR [ebx+0xa]
10002d18:	2b 4c 24 1c          	sub    ecx,DWORD PTR [esp+0x1c]
10002d1c:	8d 44 88 fc          	lea    eax,[eax+ecx*4-0x4]
10002d20:	03 03                	add    eax,DWORD PTR [ebx]
10002d22:	89 c7                	mov    edi,eax
10002d24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002d28:	c1 e0 18             	shl    eax,0x18
10002d2b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002d2f:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002d37:	01 d0                	add    eax,edx
10002d39:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10002d3d:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002d42:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10002d46:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002d4a:	39 5c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebx
10002d4e:	0f 8e fb 00 00 00    	jle    10002e4f <ssfn_render+0x1b78>
10002d54:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002d5b:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002d5f:	01 d8                	add    eax,ebx
10002d61:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002d68:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002d6c:	0f bf 53 06          	movsx  edx,WORD PTR [ebx+0x6]
10002d70:	39 d0                	cmp    eax,edx
10002d72:	0f 8d d7 00 00 00    	jge    10002e4f <ssfn_render+0x1b78>
10002d78:	31 f6                	xor    esi,esi
10002d7a:	85 c0                	test   eax,eax
10002d7c:	0f 89 ad 00 00 00    	jns    10002e2f <ssfn_render+0x1b58>
10002d82:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002d89:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002d8d:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002d91:	25 fc ff 00 00       	and    eax,0xfffc
10002d96:	01 c7                	add    edi,eax
10002d98:	eb ac                	jmp    10002d46 <ssfn_render+0x1a6f>
10002d9a:	85 c0                	test   eax,eax
10002d9c:	0f 88 82 00 00 00    	js     10002e24 <ssfn_render+0x1b4d>
10002da2:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
10002da5:	b8 10 00 00 00       	mov    eax,0x10
10002daa:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002dae:	2b 44 24 40          	sub    eax,DWORD PTR [esp+0x40]
10002db2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002db6:	89 d8                	mov    eax,ebx
10002db8:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002dbc:	d3 e8                	shr    eax,cl
10002dbe:	0f b6 cf             	movzx  ecx,bh
10002dc1:	0f b6 c0             	movzx  eax,al
10002dc4:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
10002dc8:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002dcc:	d3 eb                	shr    ebx,cl
10002dce:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002dd2:	0f b6 db             	movzx  ebx,bl
10002dd5:	29 c1                	sub    ecx,eax
10002dd7:	29 da                	sub    edx,ebx
10002dd9:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002dde:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002de3:	c1 f9 08             	sar    ecx,0x8
10002de6:	c1 fa 08             	sar    edx,0x8
10002de9:	01 c8                	add    eax,ecx
10002deb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
10002def:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002df3:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002df7:	d3 e0                	shl    eax,cl
10002df9:	2b 54 24 30          	sub    edx,DWORD PTR [esp+0x30]
10002dfd:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002e01:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002e06:	c1 fa 08             	sar    edx,0x8
10002e09:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
10002e0d:	c1 e2 08             	shl    edx,0x8
10002e10:	09 d0                	or     eax,edx
10002e12:	8d 14 19             	lea    edx,[ecx+ebx*1]
10002e15:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
10002e19:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002e1d:	d3 e2                	shl    edx,cl
10002e1f:	09 c2                	or     edx,eax
10002e21:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
10002e24:	46                   	inc    esi
10002e25:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
10002e29:	0f 8c 53 ff ff ff    	jl     10002d82 <ssfn_render+0x1aab>
10002e2f:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e36:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002e3a:	01 f0                	add    eax,esi
10002e3c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002e40:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002e44:	0f 8c 50 ff ff ff    	jl     10002d9a <ssfn_render+0x1ac3>
10002e4a:	e9 33 ff ff ff       	jmp    10002d82 <ssfn_render+0x1aab>
10002e4f:	f6 85 bd f5 00 00 08 	test   BYTE PTR [ebp+0xf5bd],0x8
10002e56:	74 04                	je     10002e5c <ssfn_render+0x1b85>
10002e58:	f7 5c 24 20          	neg    DWORD PTR [esp+0x20]
10002e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002e60:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002e64:	89 85 90 f5 00 00    	mov    DWORD PTR [ebp+0xf590],eax
10002e6a:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e71:	66 01 78 0a          	add    WORD PTR [eax+0xa],di
10002e75:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002e7c:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002e7f:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002e83:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002e89:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
10002e8d:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002e92:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002e96:	99                   	cdq    
10002e97:	f7 f9                	idiv   ecx
10002e99:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10002e9d:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10002ea3:	25 80 00 00 00       	and    eax,0x80
10002ea8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002eac:	0f 85 f7 01 00 00    	jne    100030a9 <ssfn_render+0x1dd2>
10002eb2:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002eb5:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
10002eb9:	0f 84 ea 01 00 00    	je     100030a9 <ssfn_render+0x1dd2>
10002ebf:	8b 94 24 f8 05 01 00 	mov    edx,DWORD PTR [esp+0x105f8]
10002ec6:	83 ec 0c             	sub    esp,0xc
10002ec9:	03 94 24 d4 00 00 00 	add    edx,DWORD PTR [esp+0xd4]
10002ed0:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
10002ed7:	51                   	push   ecx
10002ed8:	8d 8c 24 dc 00 00 00 	lea    ecx,[esp+0xdc]
10002edf:	e8 53 d9 ff ff       	call   10000837 <_ssfn_c>
10002ee4:	83 c4 10             	add    esp,0x10
10002ee7:	85 c0                	test   eax,eax
10002ee9:	0f 84 ba 01 00 00    	je     100030a9 <ssfn_render+0x1dd2>
10002eef:	83 bc 24 c4 00 00 00 20 	cmp    DWORD PTR [esp+0xc4],0x20
10002ef7:	0f 86 ac 01 00 00    	jbe    100030a9 <ssfn_render+0x1dd2>
10002efd:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002f03:	8d 48 06             	lea    ecx,[eax+0x6]
10002f06:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002f0c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
10002f10:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10002f14:	0f 8e 8f 01 00 00    	jle    100030a9 <ssfn_render+0x1dd2>
10002f1a:	8a 19                	mov    bl,BYTE PTR [ecx]
10002f1c:	88 5c 24 18          	mov    BYTE PTR [esp+0x18],bl
10002f20:	8a 18                	mov    bl,BYTE PTR [eax]
10002f22:	83 e3 40             	and    ebx,0x40
10002f25:	80 7c 24 18 ff       	cmp    BYTE PTR [esp+0x18],0xff
10002f2a:	75 14                	jne    10002f40 <ssfn_render+0x1c69>
10002f2c:	80 79 01 ff          	cmp    BYTE PTR [ecx+0x1],0xff
10002f30:	75 0e                	jne    10002f40 <ssfn_render+0x1c69>
10002f32:	80 fb 01             	cmp    bl,0x1
10002f35:	19 c0                	sbb    eax,eax
10002f37:	8d 4c 01 06          	lea    ecx,[ecx+eax*1+0x6]
10002f3b:	e9 60 01 00 00       	jmp    100030a0 <ssfn_render+0x1dc9>
10002f40:	0f b6 71 04          	movzx  esi,BYTE PTR [ecx+0x4]
10002f44:	0f b6 51 03          	movzx  edx,BYTE PTR [ecx+0x3]
10002f48:	c1 e6 10             	shl    esi,0x10
10002f4b:	0f b6 79 02          	movzx  edi,BYTE PTR [ecx+0x2]
10002f4f:	84 db                	test   bl,bl
10002f51:	74 08                	je     10002f5b <ssfn_render+0x1c84>
10002f53:	8b 79 02             	mov    edi,DWORD PTR [ecx+0x2]
10002f56:	83 c1 06             	add    ecx,0x6
10002f59:	eb 0c                	jmp    10002f67 <ssfn_render+0x1c90>
10002f5b:	c1 e2 08             	shl    edx,0x8
10002f5e:	83 c1 05             	add    ecx,0x5
10002f61:	89 d0                	mov    eax,edx
10002f63:	09 f0                	or     eax,esi
10002f65:	09 c7                	or     edi,eax
10002f67:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002f6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002f6e:	01 f8                	add    eax,edi
10002f70:	8a 10                	mov    dl,BYTE PTR [eax]
10002f72:	88 d3                	mov    bl,dl
10002f74:	83 e3 e0             	and    ebx,0xffffffe0
10002f77:	80 fb c0             	cmp    bl,0xc0
10002f7a:	0f 85 20 01 00 00    	jne    100030a0 <ssfn_render+0x1dc9>
10002f80:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
10002f84:	c1 e2 08             	shl    edx,0x8
10002f87:	83 c0 02             	add    eax,0x2
10002f8a:	81 e2 00 1f 00 00    	and    edx,0x1f00
10002f90:	09 da                	or     edx,ebx
10002f92:	8d 72 01             	lea    esi,[edx+0x1]
10002f95:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10002f99:	8b b4 24 c4 00 00 00 	mov    esi,DWORD PTR [esp+0xc4]
10002fa0:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
10002fa4:	83 7c 24 1c ff       	cmp    DWORD PTR [esp+0x1c],0xffffffff
10002fa9:	0f 84 f1 00 00 00    	je     100030a0 <ssfn_render+0x1dc9>
10002faf:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
10002fb3:	0f b7 10             	movzx  edx,WORD PTR [eax]
10002fb6:	c1 e3 10             	shl    ebx,0x10
10002fb9:	81 e3 00 00 0f 00    	and    ebx,0xf0000
10002fbf:	09 d3                	or     ebx,edx
10002fc1:	39 de                	cmp    esi,ebx
10002fc3:	0f 82 cf 00 00 00    	jb     10003098 <ssfn_render+0x1dc1>
10002fc9:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
10002fcc:	89 d7                	mov    edi,edx
10002fce:	c1 e7 10             	shl    edi,0x10
10002fd1:	81 e7 00 00 0f 00    	and    edi,0xf0000
10002fd7:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10002fdb:	0f b7 78 03          	movzx  edi,WORD PTR [eax+0x3]
10002fdf:	0b 7c 24 20          	or     edi,DWORD PTR [esp+0x20]
10002fe3:	39 fe                	cmp    esi,edi
10002fe5:	0f 87 ad 00 00 00    	ja     10003098 <ssfn_render+0x1dc1>
10002feb:	29 de                	sub    esi,ebx
10002fed:	c0 ea 04             	shr    dl,0x4
10002ff0:	89 b4 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],esi
10002ff7:	0f b6 d2             	movzx  edx,dl
10002ffa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002ffe:	89 d3                	mov    ebx,edx
10003000:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
10003004:	c1 e3 10             	shl    ebx,0x10
10003007:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
1000300a:	09 da                	or     edx,ebx
1000300c:	c0 e8 04             	shr    al,0x4
1000300f:	c1 e0 18             	shl    eax,0x18
10003012:	09 c2                	or     edx,eax
10003014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003018:	03 50 18             	add    edx,DWORD PTR [eax+0x18]
1000301b:	01 c2                	add    edx,eax
1000301d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003020:	8d 7c 06 fc          	lea    edi,[esi+eax*1-0x4]
10003024:	39 d7                	cmp    edi,edx
10003026:	76 78                	jbe    100030a0 <ssfn_render+0x1dc9>
10003028:	8a 1a                	mov    bl,BYTE PTR [edx]
1000302a:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
10003031:	89 de                	mov    esi,ebx
10003033:	83 e6 7f             	and    esi,0x7f
10003036:	39 c6                	cmp    esi,eax
10003038:	73 1d                	jae    10003057 <ssfn_render+0x1d80>
1000303a:	48                   	dec    eax
1000303b:	bb 02 00 00 00       	mov    ebx,0x2
10003040:	29 f0                	sub    eax,esi
10003042:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
10003049:	0f b6 02             	movzx  eax,BYTE PTR [edx]
1000304c:	84 c0                	test   al,al
1000304e:	78 03                	js     10003053 <ssfn_render+0x1d7c>
10003050:	8d 58 02             	lea    ebx,[eax+0x2]
10003053:	01 da                	add    edx,ebx
10003055:	eb cd                	jmp    10003024 <ssfn_render+0x1d4d>
10003057:	be 01 00 00 00       	mov    esi,0x1
1000305c:	84 db                	test   bl,bl
1000305e:	78 03                	js     10003063 <ssfn_render+0x1d8c>
10003060:	8d 70 01             	lea    esi,[eax+0x1]
10003063:	0f be 04 32          	movsx  eax,BYTE PTR [edx+esi*1]
10003067:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000306b:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10003070:	0f b6 5b 0b          	movzx  ebx,BYTE PTR [ebx+0xb]
10003074:	99                   	cdq    
10003075:	f7 fb                	idiv   ebx
10003077:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
1000307c:	74 0d                	je     1000308b <ssfn_render+0x1db4>
1000307e:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10003085:	66 01 47 0a          	add    WORD PTR [edi+0xa],ax
10003089:	eb 15                	jmp    100030a0 <ssfn_render+0x1dc9>
1000308b:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
10003092:	66 01 46 0c          	add    WORD PTR [esi+0xc],ax
10003096:	eb 08                	jmp    100030a0 <ssfn_render+0x1dc9>
10003098:	83 c0 08             	add    eax,0x8
1000309b:	e9 00 ff ff ff       	jmp    10002fa0 <ssfn_render+0x1cc9>
100030a0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
100030a4:	e9 5d fe ff ff       	jmp    10002f06 <ssfn_render+0x1c2f>
100030a9:	8b 8c 24 c8 00 00 00 	mov    ecx,DWORD PTR [esp+0xc8]
100030b0:	eb 73                	jmp    10003125 <ssfn_render+0x1e4e>
100030b2:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100030bd:	e9 50 e4 ff ff       	jmp    10001512 <ssfn_render+0x23b>
100030c2:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100030c9:	57                   	push   edi
100030ca:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100030d1:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100030d8:	e8 5a d7 ff ff       	call   10000837 <_ssfn_c>
100030dd:	5f                   	pop    edi
100030de:	85 c0                	test   eax,eax
100030e0:	0f 84 25 e4 ff ff    	je     1000150b <ssfn_render+0x234>
100030e6:	e9 a2 e4 ff ff       	jmp    1000158d <ssfn_render+0x2b6>
100030eb:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100030ee:	f6 40 08 30          	test   BYTE PTR [eax+0x8],0x30
100030f2:	75 0c                	jne    10003100 <ssfn_render+0x1e29>
100030f4:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100030fb:	e9 3b e4 ff ff       	jmp    1000153b <ssfn_render+0x264>
10003100:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10003107:	57                   	push   edi
10003108:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
1000310f:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10003116:	e8 1c d7 ff ff       	call   10000837 <_ssfn_c>
1000311b:	59                   	pop    ecx
1000311c:	85 c0                	test   eax,eax
1000311e:	74 d4                	je     100030f4 <ssfn_render+0x1e1d>
10003120:	e9 68 e4 ff ff       	jmp    1000158d <ssfn_render+0x2b6>
10003125:	81 c4 dc 05 01 00    	add    esp,0x105dc
1000312b:	89 c8                	mov    eax,ecx
1000312d:	5b                   	pop    ebx
1000312e:	5e                   	pop    esi
1000312f:	5f                   	pop    edi
10003130:	5d                   	pop    ebp
10003131:	c3                   	ret    

10003132 <ssfn_bbox>:
10003132:	55                   	push   ebp
10003133:	57                   	push   edi
10003134:	56                   	push   esi
10003135:	53                   	push   ebx
10003136:	83 ec 3c             	sub    esp,0x3c
10003139:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
1000313e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
10003142:	0f 94 c0             	sete   al
10003145:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
1000314a:	0f 94 c2             	sete   dl
1000314d:	09 d0                	or     eax,edx
1000314f:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
10003154:	0f 94 c2             	sete   dl
10003157:	09 d0                	or     eax,edx
10003159:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
1000315e:	0f 94 c2             	sete   dl
10003161:	09 d0                	or     eax,edx
10003163:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
10003168:	0f 94 c2             	sete   dl
1000316b:	08 d0                	or     al,dl
1000316d:	0f 85 7c 01 00 00    	jne    100032ef <ssfn_bbox+0x1bd>
10003173:	85 db                	test   ebx,ebx
10003175:	0f 84 74 01 00 00    	je     100032ef <ssfn_bbox+0x1bd>
1000317b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000317f:	31 f6                	xor    esi,esi
10003181:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003187:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
1000318b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003191:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10003195:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000319b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
1000319f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100031a5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100031a9:	80 38 00             	cmp    BYTE PTR [eax],0x0
100031ac:	0f 84 42 01 00 00    	je     100032f4 <ssfn_bbox+0x1c2>
100031b2:	8d 54 24 18          	lea    edx,[esp+0x18]
100031b6:	b9 06 00 00 00       	mov    ecx,0x6
100031bb:	89 d7                	mov    edi,edx
100031bd:	89 f0                	mov    eax,esi
100031bf:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
100031c9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100031cb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
100031d3:	31 ff                	xor    edi,edi
100031d5:	bd 01 00 00 00       	mov    ebp,0x1
100031da:	50                   	push   eax
100031db:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100031df:	8d 44 24 20          	lea    eax,[esp+0x20]
100031e3:	50                   	push   eax
100031e4:	53                   	push   ebx
100031e5:	e8 fc ff ff ff       	call   100031e6 <ssfn_bbox+0xb4>	100031e6: R_386_PC32	ssfn_render
100031ea:	83 c4 10             	add    esp,0x10
100031ed:	89 c6                	mov    esi,eax
100031ef:	85 c0                	test   eax,eax
100031f1:	74 6f                	je     10003262 <ssfn_bbox+0x130>
100031f3:	0f 88 fb 00 00 00    	js     100032f4 <ssfn_bbox+0x1c2>
100031f9:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
100031ff:	85 c0                	test   eax,eax
10003201:	0f 84 ed 00 00 00    	je     100032f4 <ssfn_bbox+0x1c2>
10003207:	85 ed                	test   ebp,ebp
10003209:	74 0b                	je     10003216 <ssfn_bbox+0xe4>
1000320b:	8b bb 88 f5 00 00    	mov    edi,DWORD PTR [ebx+0xf588]
10003211:	66 01 7c 24 22       	add    WORD PTR [esp+0x22],di
10003216:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
1000321a:	74 12                	je     1000322e <ssfn_bbox+0xfc>
1000321c:	8b 83 8c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf58c]
10003222:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
10003226:	7d 2f                	jge    10003257 <ssfn_bbox+0x125>
10003228:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000322c:	eb 29                	jmp    10003257 <ssfn_bbox+0x125>
1000322e:	0f b7 08             	movzx  ecx,WORD PTR [eax]
10003231:	0f bf 6c 24 1c       	movsx  ebp,WORD PTR [esp+0x1c]
10003236:	39 cd                	cmp    ebp,ecx
10003238:	7d 05                	jge    1000323f <ssfn_bbox+0x10d>
1000323a:	66 89 4c 24 1c       	mov    WORD PTR [esp+0x1c],cx
1000323f:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
10003243:	66 8b 4c 24 1e       	mov    cx,WORD PTR [esp+0x1e]
10003248:	84 d2                	test   dl,dl
1000324a:	75 04                	jne    10003250 <ssfn_bbox+0x11e>
1000324c:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
10003250:	01 ca                	add    edx,ecx
10003252:	66 89 54 24 1e       	mov    WORD PTR [esp+0x1e],dx
10003257:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
1000325b:	31 ed                	xor    ebp,ebp
1000325d:	e9 78 ff ff ff       	jmp    100031da <ssfn_bbox+0xa8>
10003262:	f6 83 bc f5 00 00 02 	test   BYTE PTR [ebx+0xf5bc],0x2
10003269:	74 23                	je     1000328e <ssfn_bbox+0x15c>
1000326b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
1000326e:	f6 40 08 20          	test   BYTE PTR [eax+0x8],0x20
10003272:	75 1a                	jne    1000328e <ssfn_bbox+0x15c>
10003274:	8b 83 c0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c0]
1000327a:	b9 04 00 00 00       	mov    ecx,0x4
1000327f:	99                   	cdq    
10003280:	f7 f9                	idiv   ecx
10003282:	66 03 44 24 22       	add    ax,WORD PTR [esp+0x22]
10003287:	29 f8                	sub    eax,edi
10003289:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
1000328e:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
10003294:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10003298:	74 29                	je     100032c3 <ssfn_bbox+0x191>
1000329a:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
1000329f:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
100032a3:	89 01                	mov    DWORD PTR [ecx],eax
100032a5:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100032a9:	8b 83 c4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c4]
100032af:	89 01                	mov    DWORD PTR [ecx],eax
100032b1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100032b5:	89 38                	mov    DWORD PTR [eax],edi
100032b7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100032bb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100032bf:	89 38                	mov    DWORD PTR [eax],edi
100032c1:	eb 31                	jmp    100032f4 <ssfn_bbox+0x1c2>
100032c3:	0f bf 44 24 1c       	movsx  eax,WORD PTR [esp+0x1c]
100032c8:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
100032cc:	89 07                	mov    DWORD PTR [edi],eax
100032ce:	0f bf 44 24 24       	movsx  eax,WORD PTR [esp+0x24]
100032d3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
100032d7:	89 07                	mov    DWORD PTR [edi],eax
100032d9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100032dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100032e3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100032e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100032ed:	eb 05                	jmp    100032f4 <ssfn_bbox+0x1c2>
100032ef:	be fc ff ff ff       	mov    esi,0xfffffffc
100032f4:	83 c4 3c             	add    esp,0x3c
100032f7:	89 f0                	mov    eax,esi
100032f9:	5b                   	pop    ebx
100032fa:	5e                   	pop    esi
100032fb:	5f                   	pop    edi
100032fc:	5d                   	pop    ebp
100032fd:	c3                   	ret    

100032fe <ssfn_text>:
100032fe:	55                   	push   ebp
100032ff:	57                   	push   edi
10003300:	56                   	push   esi
10003301:	53                   	push   ebx
10003302:	83 ec 1c             	sub    esp,0x1c
10003305:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10003309:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
1000330d:	85 f6                	test   esi,esi
1000330f:	0f 84 b2 00 00 00    	je     100033c7 <ssfn_text+0xc9>
10003315:	85 ed                	test   ebp,ebp
10003317:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
1000331c:	0f 84 a5 00 00 00    	je     100033c7 <ssfn_text+0xc9>
10003322:	83 ec 0c             	sub    esp,0xc
10003325:	6a 18                	push   0x18
10003327:	e8 fc ff ff ff       	call   10003328 <ssfn_text+0x2a>	10003328: R_386_PC32	malloc
1000332c:	83 c4 10             	add    esp,0x10
1000332f:	89 c3                	mov    ebx,eax
10003331:	85 c0                	test   eax,eax
10003333:	0f 84 8e 00 00 00    	je     100033c7 <ssfn_text+0xc9>
10003339:	31 c0                	xor    eax,eax
1000333b:	b9 06 00 00 00       	mov    ecx,0x6
10003340:	89 df                	mov    edi,ebx
10003342:	80 3e 00             	cmp    BYTE PTR [esi],0x0
10003345:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000334b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
1000334e:	74 79                	je     100033c9 <ssfn_text+0xcb>
10003350:	8d 43 0c             	lea    eax,[ebx+0xc]
10003353:	52                   	push   edx
10003354:	52                   	push   edx
10003355:	50                   	push   eax
10003356:	8d 43 0a             	lea    eax,[ebx+0xa]
10003359:	50                   	push   eax
1000335a:	8d 43 06             	lea    eax,[ebx+0x6]
1000335d:	50                   	push   eax
1000335e:	8d 43 04             	lea    eax,[ebx+0x4]
10003361:	50                   	push   eax
10003362:	56                   	push   esi
10003363:	55                   	push   ebp
10003364:	e8 fc ff ff ff       	call   10003365 <ssfn_text+0x67>	10003365: R_386_PC32	ssfn_bbox
10003369:	83 c4 20             	add    esp,0x20
1000336c:	85 c0                	test   eax,eax
1000336e:	75 59                	jne    100033c9 <ssfn_text+0xcb>
10003370:	83 ec 0c             	sub    esp,0xc
10003373:	0f bf 4b 04          	movsx  ecx,WORD PTR [ebx+0x4]
10003377:	0f bf 43 06          	movsx  eax,WORD PTR [ebx+0x6]
1000337b:	0f af c8             	imul   ecx,eax
1000337e:	c1 e1 02             	shl    ecx,0x2
10003381:	51                   	push   ecx
10003382:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10003386:	e8 fc ff ff ff       	call   10003387 <ssfn_text+0x89>	10003387: R_386_PC32	malloc
1000338b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
1000338f:	89 c7                	mov    edi,eax
10003391:	89 03                	mov    DWORD PTR [ebx],eax
10003393:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
10003397:	83 c4 10             	add    esp,0x10
1000339a:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000339c:	50                   	push   eax
1000339d:	56                   	push   esi
1000339e:	53                   	push   ebx
1000339f:	55                   	push   ebp
100033a0:	e8 fc ff ff ff       	call   100033a1 <ssfn_text+0xa3>	100033a1: R_386_PC32	ssfn_render
100033a5:	83 c4 10             	add    esp,0x10
100033a8:	85 c0                	test   eax,eax
100033aa:	7e 04                	jle    100033b0 <ssfn_text+0xb2>
100033ac:	01 c6                	add    esi,eax
100033ae:	eb ec                	jmp    1000339c <ssfn_text+0x9e>
100033b0:	74 17                	je     100033c9 <ssfn_text+0xcb>
100033b2:	83 ec 0c             	sub    esp,0xc
100033b5:	ff 33                	push   DWORD PTR [ebx]
100033b7:	e8 fc ff ff ff       	call   100033b8 <ssfn_text+0xba>	100033b8: R_386_PC32	free
100033bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
100033bf:	e8 fc ff ff ff       	call   100033c0 <ssfn_text+0xc2>	100033c0: R_386_PC32	free
100033c4:	83 c4 10             	add    esp,0x10
100033c7:	31 db                	xor    ebx,ebx
100033c9:	83 c4 1c             	add    esp,0x1c
100033cc:	89 d8                	mov    eax,ebx
100033ce:	5b                   	pop    ebx
100033cf:	5e                   	pop    esi
100033d0:	5f                   	pop    edi
100033d1:	5d                   	pop    ebp
100033d2:	c3                   	ret    
100033d3:	90                   	nop

100033d4 <NIContext::drvPutpixel4(int, int, unsigned int)>:
100033d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100033d8:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
100033de:	8b 10                	mov    edx,DWORD PTR [eax]
100033e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100033e4:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
100033e7:	90                   	nop

100033e8 <NIContext::drvDarken4(int, int, int)>:
100033e8:	55                   	push   ebp
100033e9:	57                   	push   edi
100033ea:	56                   	push   esi
100033eb:	53                   	push   ebx
100033ec:	83 ec 20             	sub    esp,0x20
100033ef:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
100033f3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100033f7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100033fb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
100033ff:	8b 87 08 04 00 00    	mov    eax,DWORD PTR [edi+0x408]
10003405:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10003409:	8b 10                	mov    edx,DWORD PTR [eax]
1000340b:	56                   	push   esi
1000340c:	53                   	push   ebx
1000340d:	50                   	push   eax
1000340e:	ff 52 34             	call   DWORD PTR [edx+0x34]
10003411:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10003415:	89 c2                	mov    edx,eax
10003417:	0f b6 ec             	movzx  ebp,ah
1000341a:	c1 ea 10             	shr    edx,0x10
1000341d:	0f af e9             	imul   ebp,ecx
10003420:	0f b6 d2             	movzx  edx,dl
10003423:	0f b6 c0             	movzx  eax,al
10003426:	0f af d1             	imul   edx,ecx
10003429:	0f af c1             	imul   eax,ecx
1000342c:	c1 ea 07             	shr    edx,0x7
1000342f:	8b 8f 08 04 00 00    	mov    ecx,DWORD PTR [edi+0x408]
10003435:	c1 e8 07             	shr    eax,0x7
10003438:	8b 39                	mov    edi,DWORD PTR [ecx]
1000343a:	c1 e2 10             	shl    edx,0x10
1000343d:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
10003441:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
10003445:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
10003449:	c1 ed 07             	shr    ebp,0x7
1000344c:	c1 e5 08             	shl    ebp,0x8
1000344f:	09 ea                	or     edx,ebp
10003451:	09 c2                	or     edx,eax
10003453:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
10003457:	8b 47 24             	mov    eax,DWORD PTR [edi+0x24]
1000345a:	83 c4 2c             	add    esp,0x2c
1000345d:	5b                   	pop    ebx
1000345e:	5e                   	pop    esi
1000345f:	5f                   	pop    edi
10003460:	5d                   	pop    ebp
10003461:	ff e0                	jmp    eax
10003463:	90                   	nop

10003464 <NIContext::renderTTF(int, int, unsigned int, char*, int*)>:
10003464:	55                   	push   ebp
10003465:	b9 00 40 00 00       	mov    ecx,0x4000
1000346a:	57                   	push   edi
1000346b:	b0 ff                	mov    al,0xff
1000346d:	56                   	push   esi
1000346e:	53                   	push   ebx
1000346f:	83 ec 3c             	sub    esp,0x3c
10003472:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
10003476:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
1000347a:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
1000347d:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
10003481:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003483:	85 db                	test   ebx,ebx
10003485:	75 10                	jne    10003497 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x33>
10003487:	83 ec 0c             	sub    esp,0xc
1000348a:	68 47 6b 00 10       	push   0x10006b47	1000348b: R_386_32	.text
1000348f:	e8 fc ff ff ff       	call   10003490 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x2c>	10003490: R_386_PC32	KePanic(char const*)
10003494:	83 c4 10             	add    esp,0x10
10003497:	50                   	push   eax
10003498:	50                   	push   eax
10003499:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000349d:	50                   	push   eax
1000349e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100034a2:	50                   	push   eax
100034a3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100034a7:	50                   	push   eax
100034a8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100034ac:	50                   	push   eax
100034ad:	56                   	push   esi
100034ae:	68 00 00 00 00       	push   0x0	100034af: R_386_32	ssfn_ctx
100034b3:	e8 fc ff ff ff       	call   100034b4 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x50>	100034b4: R_386_PC32	ssfn_bbox
100034b8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100034bb:	c7 44 24 3c 40 00 40 00 	mov    DWORD PTR [esp+0x3c],0x400040
100034c3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100034c7:	c7 44 24 40 00 01 00 00 	mov    DWORD PTR [esp+0x40],0x100
100034cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100034d3:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
100034d8:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100034dc:	0d 00 00 00 ff       	or     eax,0xff000000
100034e1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100034e5:	83 c4 1c             	add    esp,0x1c
100034e8:	56                   	push   esi
100034e9:	8d 44 24 20          	lea    eax,[esp+0x20]
100034ed:	50                   	push   eax
100034ee:	68 00 00 00 00       	push   0x0	100034ef: R_386_32	ssfn_ctx
100034f3:	e8 fc ff ff ff       	call   100034f4 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x90>	100034f4: R_386_PC32	ssfn_render
100034f8:	83 c4 10             	add    esp,0x10
100034fb:	89 03                	mov    DWORD PTR [ebx],eax
100034fd:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
10003501:	31 db                	xor    ebx,ebx
10003503:	89 f0                	mov    eax,esi
10003505:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
10003509:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
1000350d:	7e 3f                	jle    1000354e <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xea>
1000350f:	31 ff                	xor    edi,edi
10003511:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
10003516:	39 f8                	cmp    eax,edi
10003518:	7e 2c                	jle    10003546 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xe2>
1000351a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000351d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
10003520:	83 f8 ff             	cmp    eax,0xffffffff
10003523:	74 1d                	je     10003542 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xde>
10003525:	8b 95 08 04 00 00    	mov    edx,DWORD PTR [ebp+0x408]
1000352b:	25 ff ff ff 00       	and    eax,0xffffff
10003530:	8b 0a                	mov    ecx,DWORD PTR [edx]
10003532:	50                   	push   eax
10003533:	56                   	push   esi
10003534:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10003538:	01 f8                	add    eax,edi
1000353a:	50                   	push   eax
1000353b:	52                   	push   edx
1000353c:	ff 51 24             	call   DWORD PTR [ecx+0x24]
1000353f:	83 c4 10             	add    esp,0x10
10003542:	43                   	inc    ebx
10003543:	47                   	inc    edi
10003544:	eb cb                	jmp    10003511 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xad>
10003546:	29 c3                	sub    ebx,eax
10003548:	46                   	inc    esi
10003549:	83 c3 40             	add    ebx,0x40
1000354c:	eb b5                	jmp    10003503 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x9f>
1000354e:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
10003553:	83 c4 3c             	add    esp,0x3c
10003556:	5b                   	pop    ebx
10003557:	5e                   	pop    esi
10003558:	5f                   	pop    edi
10003559:	5d                   	pop    ebp
1000355a:	c3                   	ret    
1000355b:	90                   	nop

1000355c <NIContext::~NIContext()>:
1000355c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	10003560: R_386_32	ssfn_ctx
10003564:	e9 00 db ff ff       	jmp    10001069 <ssfn_free>
10003569:	90                   	nop

1000356a <NIContext::NIContext(Video*, int, int, int, int)>:
1000356a:	55                   	push   ebp
1000356b:	ba 00 00 00 00       	mov    edx,0x0	1000356c: R_386_32	ssfn_ctx
10003570:	57                   	push   edi
10003571:	b9 72 3d 00 00       	mov    ecx,0x3d72
10003576:	56                   	push   esi
10003577:	89 d7                	mov    edi,edx
10003579:	53                   	push   ebx
1000357a:	81 ec 48 02 00 00    	sub    esp,0x248
10003580:	8b 9c 24 5c 02 00 00 	mov    ebx,DWORD PTR [esp+0x25c]
10003587:	8b 84 24 60 02 00 00 	mov    eax,DWORD PTR [esp+0x260]
1000358e:	89 83 08 04 00 00    	mov    DWORD PTR [ebx+0x408],eax
10003594:	8b 84 24 64 02 00 00 	mov    eax,DWORD PTR [esp+0x264]
1000359b:	89 83 0c 04 00 00    	mov    DWORD PTR [ebx+0x40c],eax
100035a1:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
100035a8:	89 83 10 04 00 00    	mov    DWORD PTR [ebx+0x410],eax
100035ae:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
100035b5:	89 83 14 04 00 00    	mov    DWORD PTR [ebx+0x414],eax
100035bb:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
100035c2:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
100035c8:	31 c0                	xor    eax,eax
100035ca:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100035cc:	68 00 40 00 00       	push   0x4000
100035d1:	e8 fc ff ff ff       	call   100035d2 <NIContext::NIContext(Video*, int, int, int, int)+0x68>	100035d2: R_386_PC32	malloc
100035d6:	c7 83 04 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x404],0x0
100035e0:	89 03                	mov    DWORD PTR [ebx],eax
100035e2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
100035e9:	e8 fc ff ff ff       	call   100035ea <NIContext::NIContext(Video*, int, int, int, int)+0x80>	100035ea: R_386_PC32	malloc
100035ee:	83 c4 0c             	add    esp,0xc
100035f1:	89 c6                	mov    esi,eax
100035f3:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100035f5: R_386_32	kernelProcess
100035f9:	68 60 6b 00 10       	push   0x10006b60	100035fa: R_386_32	.text
100035fe:	50                   	push   eax
100035ff:	e8 fc ff ff ff       	call   10003600 <NIContext::NIContext(Video*, int, int, int, int)+0x96>	10003600: R_386_PC32	Directory::Directory(char const*, Process*)
10003604:	83 c4 10             	add    esp,0x10
10003607:	85 f6                	test   esi,esi
10003609:	75 10                	jne    1000361b <NIContext::NIContext(Video*, int, int, int, int)+0xb1>
1000360b:	83 ec 0c             	sub    esp,0xc
1000360e:	68 74 6b 00 10       	push   0x10006b74	1000360f: R_386_32	.text
10003613:	e8 fc ff ff ff       	call   10003614 <NIContext::NIContext(Video*, int, int, int, int)+0xaa>	10003614: R_386_PC32	KePanic(char const*)
10003618:	83 c4 10             	add    esp,0x10
1000361b:	83 ec 0c             	sub    esp,0xc
1000361e:	56                   	push   esi
1000361f:	e8 fc ff ff ff       	call   10003620 <NIContext::NIContext(Video*, int, int, int, int)+0xb6>	10003620: R_386_PC32	Directory::open()
10003624:	83 c4 10             	add    esp,0x10
10003627:	85 c0                	test   eax,eax
10003629:	75 e0                	jne    1000360b <NIContext::NIContext(Video*, int, int, int, int)+0xa1>
1000362b:	83 ec 0c             	sub    esp,0xc
1000362e:	8b 06                	mov    eax,DWORD PTR [esi]
10003630:	8d 4c 24 20          	lea    ecx,[esp+0x20]
10003634:	51                   	push   ecx
10003635:	8d 94 24 30 01 00 00 	lea    edx,[esp+0x130]
1000363c:	52                   	push   edx
1000363d:	6a 00                	push   0x0
1000363f:	68 10 01 00 00       	push   0x110
10003644:	56                   	push   esi
10003645:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003648:	83 c4 20             	add    esp,0x20
1000364b:	85 c0                	test   eax,eax
1000364d:	0f 85 a0 01 00 00    	jne    100037f3 <NIContext::NIContext(Video*, int, int, int, int)+0x289>
10003653:	81 7c 24 14 10 01 00 00 	cmp    DWORD PTR [esp+0x14],0x110
1000365b:	0f 85 92 01 00 00    	jne    100037f3 <NIContext::NIContext(Video*, int, int, int, int)+0x289>
10003661:	8d ac 24 30 01 00 00 	lea    ebp,[esp+0x130]
10003668:	83 c9 ff             	or     ecx,0xffffffff
1000366b:	83 ec 0c             	sub    esp,0xc
1000366e:	89 ef                	mov    edi,ebp
10003670:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
10003672:	8b bb 04 04 00 00    	mov    edi,DWORD PTR [ebx+0x404]
10003678:	89 ca                	mov    edx,ecx
1000367a:	f7 d2                	not    edx
1000367c:	52                   	push   edx
1000367d:	e8 fc ff ff ff       	call   1000367e <NIContext::NIContext(Video*, int, int, int, int)+0x114>	1000367e: R_386_PC32	malloc
10003682:	89 44 bb 04          	mov    DWORD PTR [ebx+edi*4+0x4],eax
10003686:	47                   	inc    edi
10003687:	89 bb 04 04 00 00    	mov    DWORD PTR [ebx+0x404],edi
1000368d:	5a                   	pop    edx
1000368e:	59                   	pop    ecx
1000368f:	55                   	push   ebp
10003690:	50                   	push   eax
10003691:	e8 fc ff ff ff       	call   10003692 <NIContext::NIContext(Video*, int, int, int, int)+0x128>	10003692: R_386_PC32	strcpy
10003696:	5f                   	pop    edi
10003697:	58                   	pop    eax
10003698:	68 8f 6b 00 10       	push   0x10006b8f	10003699: R_386_32	.text
1000369d:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
100036a1:	57                   	push   edi
100036a2:	e8 fc ff ff ff       	call   100036a3 <NIContext::NIContext(Video*, int, int, int, int)+0x139>	100036a3: R_386_PC32	strcpy
100036a7:	58                   	pop    eax
100036a8:	5a                   	pop    edx
100036a9:	55                   	push   ebp
100036aa:	57                   	push   edi
100036ab:	e8 fc ff ff ff       	call   100036ac <NIContext::NIContext(Video*, int, int, int, int)+0x142>	100036ac: R_386_PC32	strcat
100036b0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
100036b7:	e8 fc ff ff ff       	call   100036b8 <NIContext::NIContext(Video*, int, int, int, int)+0x14e>	100036b8: R_386_PC32	malloc
100036bc:	83 c4 0c             	add    esp,0xc
100036bf:	89 c5                	mov    ebp,eax
100036c1:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100036c3: R_386_32	kernelProcess
100036c7:	57                   	push   edi
100036c8:	50                   	push   eax
100036c9:	e8 fc ff ff ff       	call   100036ca <NIContext::NIContext(Video*, int, int, int, int)+0x160>	100036ca: R_386_PC32	File::File(char const*, Process*)
100036ce:	83 c4 10             	add    esp,0x10
100036d1:	85 ed                	test   ebp,ebp
100036d3:	0f 84 52 ff ff ff    	je     1000362b <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
100036d9:	50                   	push   eax
100036da:	50                   	push   eax
100036db:	6a 01                	push   0x1
100036dd:	55                   	push   ebp
100036de:	e8 fc ff ff ff       	call   100036df <NIContext::NIContext(Video*, int, int, int, int)+0x175>	100036df: R_386_PC32	File::open(FileOpenMode)
100036e3:	83 c4 10             	add    esp,0x10
100036e6:	85 c0                	test   eax,eax
100036e8:	74 0c                	je     100036f6 <NIContext::NIContext(Video*, int, int, int, int)+0x18c>
100036ea:	83 ec 0c             	sub    esp,0xc
100036ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100036f0:	55                   	push   ebp
100036f1:	e9 b4 00 00 00       	jmp    100037aa <NIContext::NIContext(Video*, int, int, int, int)+0x240>
100036f6:	50                   	push   eax
100036f7:	8d 44 24 17          	lea    eax,[esp+0x17]
100036fb:	50                   	push   eax
100036fc:	8d 44 24 20          	lea    eax,[esp+0x20]
10003700:	50                   	push   eax
10003701:	55                   	push   ebp
10003702:	e8 fc ff ff ff       	call   10003703 <NIContext::NIContext(Video*, int, int, int, int)+0x199>	10003703: R_386_PC32	File::stat(unsigned long long*, bool*)
10003707:	83 c4 10             	add    esp,0x10
1000370a:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
1000370f:	74 0e                	je     1000371f <NIContext::NIContext(Video*, int, int, int, int)+0x1b5>
10003711:	83 ec 0c             	sub    esp,0xc
10003714:	55                   	push   ebp
10003715:	e8 fc ff ff ff       	call   10003716 <NIContext::NIContext(Video*, int, int, int, int)+0x1ac>	10003716: R_386_PC32	File::close()
1000371a:	e9 85 00 00 00       	jmp    100037a4 <NIContext::NIContext(Video*, int, int, int, int)+0x23a>
1000371f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10003723:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10003727:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000372b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
1000372f:	83 ec 0c             	sub    esp,0xc
10003732:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10003736:	e8 fc ff ff ff       	call   10003737 <NIContext::NIContext(Video*, int, int, int, int)+0x1cd>	10003737: R_386_PC32	malloc
1000373b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000373f:	58                   	pop    eax
10003740:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003743:	8d 54 24 20          	lea    edx,[esp+0x20]
10003747:	52                   	push   edx
10003748:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
1000374c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003750:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003754:	55                   	push   ebp
10003755:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003758:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000375c:	83 c4 1c             	add    esp,0x1c
1000375f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003763:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003767:	68 a4 6b 00 10       	push   0x10006ba4	10003768: R_386_32	.text
1000376c:	e8 fc ff ff ff       	call   1000376d <NIContext::NIContext(Video*, int, int, int, int)+0x203>	1000376d: R_386_PC32	Dbg::kprintf(char const*, ...)
10003771:	83 c4 10             	add    esp,0x10
10003774:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003778:	85 c0                	test   eax,eax
1000377a:	75 15                	jne    10003791 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
1000377c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003780:	89 c1                	mov    ecx,eax
10003782:	c1 f9 1f             	sar    ecx,0x1f
10003785:	3b 4c 24 1c          	cmp    ecx,DWORD PTR [esp+0x1c]
10003789:	75 06                	jne    10003791 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
1000378b:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
1000378f:	74 24                	je     100037b5 <NIContext::NIContext(Video*, int, int, int, int)+0x24b>
10003791:	83 ec 0c             	sub    esp,0xc
10003794:	55                   	push   ebp
10003795:	e8 fc ff ff ff       	call   10003796 <NIContext::NIContext(Video*, int, int, int, int)+0x22c>	10003796: R_386_PC32	File::close()
1000379a:	58                   	pop    eax
1000379b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000379f:	e8 fc ff ff ff       	call   100037a0 <NIContext::NIContext(Video*, int, int, int, int)+0x236>	100037a0: R_386_PC32	free
100037a4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100037a7:	89 2c 24             	mov    DWORD PTR [esp],ebp
100037aa:	ff 50 08             	call   DWORD PTR [eax+0x8]
100037ad:	83 c4 10             	add    esp,0x10
100037b0:	e9 76 fe ff ff       	jmp    1000362b <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
100037b5:	50                   	push   eax
100037b6:	50                   	push   eax
100037b7:	57                   	push   edi
100037b8:	68 b8 6b 00 10       	push   0x10006bb8	100037b9: R_386_32	.text
100037bd:	e8 fc ff ff ff       	call   100037be <NIContext::NIContext(Video*, int, int, int, int)+0x254>	100037be: R_386_PC32	Dbg::kprintf(char const*, ...)
100037c2:	5a                   	pop    edx
100037c3:	59                   	pop    ecx
100037c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
100037c8:	68 00 00 00 00       	push   0x0	100037c9: R_386_32	ssfn_ctx
100037cd:	e8 fc ff ff ff       	call   100037ce <NIContext::NIContext(Video*, int, int, int, int)+0x264>	100037ce: R_386_PC32	ssfn_load
100037d2:	5b                   	pop    ebx
100037d3:	5f                   	pop    edi
100037d4:	50                   	push   eax
100037d5:	68 c9 6b 00 10       	push   0x10006bc9	100037d6: R_386_32	.text
100037da:	e8 fc ff ff ff       	call   100037db <NIContext::NIContext(Video*, int, int, int, int)+0x271>	100037db: R_386_PC32	Dbg::kprintf(char const*, ...)
100037df:	89 2c 24             	mov    DWORD PTR [esp],ebp
100037e2:	e8 fc ff ff ff       	call   100037e3 <NIContext::NIContext(Video*, int, int, int, int)+0x279>	100037e3: R_386_PC32	File::close()
100037e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100037ea:	89 2c 24             	mov    DWORD PTR [esp],ebp
100037ed:	ff 50 08             	call   DWORD PTR [eax+0x8]
100037f0:	83 c4 10             	add    esp,0x10
100037f3:	83 ec 0c             	sub    esp,0xc
100037f6:	56                   	push   esi
100037f7:	e8 fc ff ff ff       	call   100037f8 <NIContext::NIContext(Video*, int, int, int, int)+0x28e>	100037f8: R_386_PC32	Directory::close()
100037fc:	8b 06                	mov    eax,DWORD PTR [esi]
100037fe:	89 34 24             	mov    DWORD PTR [esp],esi
10003801:	ff 50 08             	call   DWORD PTR [eax+0x8]
10003804:	b8 00 00 00 00       	mov    eax,0x0	10003805: R_386_32	ssfn_ctx
10003809:	e8 f7 cb ff ff       	call   10000405 <_ssfn_fc.part.1>
1000380e:	c7 05 14 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x14,0x0	10003810: R_386_32	ssfn_ctx
10003818:	c7 05 18 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x18,0x0	1000381a: R_386_32	ssfn_ctx
10003822:	c7 05 b8 f5 00 00 ff 00 00 00 	mov    DWORD PTR ds:0xf5b8,0xff	10003824: R_386_32	ssfn_ctx
1000382c:	c7 05 bc f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5bc,0x0	1000382e: R_386_32	ssfn_ctx
10003836:	c7 05 c0 f5 00 00 10 00 00 00 	mov    DWORD PTR ds:0xf5c0,0x10	10003838: R_386_32	ssfn_ctx
10003840:	c7 05 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5c4,0x0	10003842: R_386_32	ssfn_ctx
1000384a:	81 c4 4c 02 00 00    	add    esp,0x24c
10003850:	5b                   	pop    ebx
10003851:	5e                   	pop    esi
10003852:	5f                   	pop    edi
10003853:	5d                   	pop    ebp
10003854:	c3                   	ret    
10003855:	90                   	nop

10003856 <NiCreateEvent(NIWindow*, int, bool)>:
10003856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000385a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
1000385e:	81 e2 ff ff 03 00    	and    edx,0x3ffff
10003864:	89 d1                	mov    ecx,edx
10003866:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
10003869:	c1 e1 0d             	shl    ecx,0xd
1000386c:	81 e2 ff 1f 00 80    	and    edx,0x80001fff
10003872:	09 ca                	or     edx,ecx
10003874:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10003877:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
1000387b:	8a 50 07             	mov    dl,BYTE PTR [eax+0x7]
1000387e:	c1 e1 07             	shl    ecx,0x7
10003881:	83 e2 7f             	and    edx,0x7f
10003884:	09 ca                	or     edx,ecx
10003886:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10003889:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
1000388d:	89 10                	mov    DWORD PTR [eax],edx
1000388f:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003891: R_386_32	mouseDesktop
10003895:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
1000389b:	66 89 48 08          	mov    WORD PTR [eax+0x8],cx
1000389f:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100038a5:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100038ab:	66 89 48 0a          	mov    WORD PTR [eax+0xa],cx
100038af:	89 d1                	mov    ecx,edx
100038b1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
100038b4:	66 81 e1 ff 03       	and    cx,0x3ff
100038b9:	66 81 e2 00 fc       	and    dx,0xfc00
100038be:	09 ca                	or     edx,ecx
100038c0:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
100038c4:	c2 04 00             	ret    0x4

100038c7 <NiKeyhandler(KeyboardToken, bool*)>:
100038c7:	57                   	push   edi
100038c8:	56                   	push   esi
100038c9:	53                   	push   ebx
100038ca:	83 ec 20             	sub    esp,0x20
100038cd:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100038cf: R_386_32	mouseDesktop
100038d3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
100038d7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100038da:	8b 00                	mov    eax,DWORD PTR [eax]
100038dc:	85 c0                	test   eax,eax
100038de:	0f 84 f9 00 00 00    	je     100039dd <NiKeyhandler(KeyboardToken, bool*)+0x116>
100038e4:	8b 10                	mov    edx,DWORD PTR [eax]
100038e6:	85 d2                	test   edx,edx
100038e8:	0f 84 ef 00 00 00    	je     100039dd <NiKeyhandler(KeyboardToken, bool*)+0x116>
100038ee:	80 7c 24 32 01       	cmp    BYTE PTR [esp+0x32],0x1
100038f3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100038f7:	19 c0                	sbb    eax,eax
100038f9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
100038fd:	81 e6 ff 1f 00 80    	and    esi,0x80001fff
10003903:	83 c0 09             	add    eax,0x9
10003906:	25 ff ff 03 00       	and    eax,0x3ffff
1000390b:	c1 e0 0d             	shl    eax,0xd
1000390e:	09 f0                	or     eax,esi
10003910:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003914:	80 64 24 0f 7f       	and    BYTE PTR [esp+0xf],0x7f
10003919:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
1000391f:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
10003924:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
1000392a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
1000392f:	8b 83 1c 04 00 00    	mov    eax,DWORD PTR [ebx+0x41c]
10003935:	89 c3                	mov    ebx,eax
10003937:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000393b:	66 81 e3 ff 03       	and    bx,0x3ff
10003940:	66 25 00 fc          	and    ax,0xfc00
10003944:	09 d8                	or     eax,ebx
10003946:	8a 99 04 01 00 00    	mov    bl,BYTE PTR [ecx+0x104]
1000394c:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
10003951:	83 e3 01             	and    ebx,0x1
10003954:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10003958:	c1 e3 04             	shl    ebx,0x4
1000395b:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
10003960:	8a 81 00 01 00 00    	mov    al,BYTE PTR [ecx+0x100]
10003966:	8a 89 01 01 00 00    	mov    cl,BYTE PTR [ecx+0x101]
1000396c:	83 e0 01             	and    eax,0x1
1000396f:	83 e1 01             	and    ecx,0x1
10003972:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10003979:	c1 e1 03             	shl    ecx,0x3
1000397c:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
10003980:	83 e0 eb             	and    eax,0xffffffeb
10003983:	09 f0                	or     eax,esi
10003985:	09 d8                	or     eax,ebx
10003987:	83 e0 f7             	and    eax,0xfffffff7
1000398a:	09 c8                	or     eax,ecx
1000398c:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	1000398e: R_386_32	desktopHasFocus
10003993:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
10003997:	75 19                	jne    100039b2 <NiKeyhandler(KeyboardToken, bool*)+0xeb>
10003999:	83 ec 1c             	sub    esp,0x1c
1000399c:	b9 06 00 00 00       	mov    ecx,0x6
100039a1:	8d 74 24 24          	lea    esi,[esp+0x24]
100039a5:	89 e7                	mov    edi,esp
100039a7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100039a9:	52                   	push   edx
100039aa:	e8 fc ff ff ff       	call   100039ab <NiKeyhandler(KeyboardToken, bool*)+0xe4>	100039ab: R_386_PC32	NIWindow::postEvent(NiEvent)
100039af:	83 c4 20             	add    esp,0x20
100039b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100039b3: R_386_32	desktopWindowDummy
100039b7:	85 c0                	test   eax,eax
100039b9:	74 22                	je     100039dd <NiKeyhandler(KeyboardToken, bool*)+0x116>
100039bb:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	100039bd: R_386_32	desktopHasFocus
100039c2:	74 19                	je     100039dd <NiKeyhandler(KeyboardToken, bool*)+0x116>
100039c4:	83 ec 1c             	sub    esp,0x1c
100039c7:	b9 06 00 00 00       	mov    ecx,0x6
100039cc:	8d 74 24 24          	lea    esi,[esp+0x24]
100039d0:	89 e7                	mov    edi,esp
100039d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100039d4:	50                   	push   eax
100039d5:	e8 fc ff ff ff       	call   100039d6 <NiKeyhandler(KeyboardToken, bool*)+0x10f>	100039d6: R_386_PC32	NIWindow::postEvent(NiEvent)
100039da:	83 c4 20             	add    esp,0x20
100039dd:	83 c4 20             	add    esp,0x20
100039e0:	5b                   	pop    ebx
100039e1:	5e                   	pop    esi
100039e2:	5f                   	pop    edi
100039e3:	c3                   	ret    

100039e4 <NiLoadCursors()>:
100039e4:	55                   	push   ebp
100039e5:	57                   	push   edi
100039e6:	56                   	push   esi
100039e7:	53                   	push   ebx
100039e8:	83 ec 38             	sub    esp,0x38
100039eb:	68 14 01 00 00       	push   0x114
100039f0:	e8 fc ff ff ff       	call   100039f1 <NiLoadCursors()+0xd>	100039f1: R_386_PC32	malloc
100039f5:	83 c4 0c             	add    esp,0xc
100039f8:	89 c5                	mov    ebp,eax
100039fa:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100039fc: R_386_32	kernelProcess
10003a00:	68 7c 6e 00 10       	push   0x10006e7c	10003a01: R_386_32	.text
10003a05:	50                   	push   eax
10003a06:	e8 fc ff ff ff       	call   10003a07 <NiLoadCursors()+0x23>	10003a07: R_386_PC32	File::File(char const*, Process*)
10003a0b:	58                   	pop    eax
10003a0c:	5a                   	pop    edx
10003a0d:	6a 01                	push   0x1
10003a0f:	55                   	push   ebp
10003a10:	e8 fc ff ff ff       	call   10003a11 <NiLoadCursors()+0x2d>	10003a11: R_386_PC32	File::open(FileOpenMode)
10003a15:	83 c4 10             	add    esp,0x10
10003a18:	85 c0                	test   eax,eax
10003a1a:	74 0a                	je     10003a26 <NiLoadCursors()+0x42>
10003a1c:	83 ec 0c             	sub    esp,0xc
10003a1f:	68 9b 6e 00 10       	push   0x10006e9b	10003a20: R_386_32	.text
10003a24:	eb 4c                	jmp    10003a72 <NiLoadCursors()+0x8e>
10003a26:	50                   	push   eax
10003a27:	8d 44 24 17          	lea    eax,[esp+0x17]
10003a2b:	50                   	push   eax
10003a2c:	8d 44 24 20          	lea    eax,[esp+0x20]
10003a30:	50                   	push   eax
10003a31:	55                   	push   ebp
10003a32:	e8 fc ff ff ff       	call   10003a33 <NiLoadCursors()+0x4f>	10003a33: R_386_PC32	File::stat(unsigned long long*, bool*)
10003a37:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10003a3b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10003a3f:	89 34 24             	mov    DWORD PTR [esp],esi
10003a42:	e8 fc ff ff ff       	call   10003a43 <NiLoadCursors()+0x5f>	10003a43: R_386_PC32	malloc
10003a47:	89 c3                	mov    ebx,eax
10003a49:	58                   	pop    eax
10003a4a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003a4d:	8d 54 24 20          	lea    edx,[esp+0x20]
10003a51:	52                   	push   edx
10003a52:	53                   	push   ebx
10003a53:	57                   	push   edi
10003a54:	56                   	push   esi
10003a55:	55                   	push   ebp
10003a56:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003a59:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10003a5d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10003a61:	83 c4 20             	add    esp,0x20
10003a64:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
10003a68:	74 12                	je     10003a7c <NiLoadCursors()+0x98>
10003a6a:	83 ec 0c             	sub    esp,0xc
10003a6d:	68 af 6e 00 10       	push   0x10006eaf	10003a6e: R_386_32	.text
10003a72:	e8 fc ff ff ff       	call   10003a73 <NiLoadCursors()+0x8f>	10003a73: R_386_PC32	Dbg::kprintf(char const*, ...)
10003a77:	e9 24 01 00 00       	jmp    10003ba0 <NiLoadCursors()+0x1bc>
10003a7c:	6a 00                	push   0x0
10003a7e:	31 ed                	xor    ebp,ebp
10003a80:	68 04 01 00 00       	push   0x104
10003a85:	52                   	push   edx
10003a86:	50                   	push   eax
10003a87:	e8 fc ff ff ff       	call   10003a88 <NiLoadCursors()+0xa4>	10003a88: R_386_PC32	__udivdi3
10003a8c:	83 c4 10             	add    esp,0x10
10003a8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003a93:	8d 04 83             	lea    eax,[ebx+eax*4]
10003a96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003a9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
10003a9e:	0f 8d f3 00 00 00    	jge    10003b97 <NiLoadCursors()+0x1b3>
10003aa4:	8d 34 ab             	lea    esi,[ebx+ebp*4]
10003aa7:	50                   	push   eax
10003aa8:	6a 04                	push   0x4
10003aaa:	68 c3 6e 00 10       	push   0x10006ec3	10003aab: R_386_32	.text
10003aaf:	56                   	push   esi
10003ab0:	e8 fc ff ff ff       	call   10003ab1 <NiLoadCursors()+0xcd>	10003ab1: R_386_PC32	memcmp
10003ab5:	83 c4 10             	add    esp,0x10
10003ab8:	85 c0                	test   eax,eax
10003aba:	0f 84 b8 00 00 00    	je     10003b78 <NiLoadCursors()+0x194>
10003ac0:	50                   	push   eax
10003ac1:	6a 04                	push   0x4
10003ac3:	68 c8 6e 00 10       	push   0x10006ec8	10003ac4: R_386_32	.text
10003ac8:	56                   	push   esi
10003ac9:	e8 fc ff ff ff       	call   10003aca <NiLoadCursors()+0xe6>	10003aca: R_386_PC32	memcmp
10003ace:	83 c4 10             	add    esp,0x10
10003ad1:	85 c0                	test   eax,eax
10003ad3:	74 7b                	je     10003b50 <NiLoadCursors()+0x16c>
10003ad5:	50                   	push   eax
10003ad6:	6a 04                	push   0x4
10003ad8:	68 cd 6e 00 10       	push   0x10006ecd	10003ad9: R_386_32	.text
10003add:	56                   	push   esi
10003ade:	e8 fc ff ff ff       	call   10003adf <NiLoadCursors()+0xfb>	10003adf: R_386_PC32	memcmp
10003ae3:	83 c4 10             	add    esp,0x10
10003ae6:	85 c0                	test   eax,eax
10003ae8:	74 6d                	je     10003b57 <NiLoadCursors()+0x173>
10003aea:	57                   	push   edi
10003aeb:	6a 04                	push   0x4
10003aed:	68 d2 6e 00 10       	push   0x10006ed2	10003aee: R_386_32	.text
10003af2:	56                   	push   esi
10003af3:	e8 fc ff ff ff       	call   10003af4 <NiLoadCursors()+0x110>	10003af4: R_386_PC32	memcmp
10003af8:	83 c4 10             	add    esp,0x10
10003afb:	85 c0                	test   eax,eax
10003afd:	74 5f                	je     10003b5e <NiLoadCursors()+0x17a>
10003aff:	51                   	push   ecx
10003b00:	6a 04                	push   0x4
10003b02:	68 d7 6e 00 10       	push   0x10006ed7	10003b03: R_386_32	.text
10003b07:	56                   	push   esi
10003b08:	e8 fc ff ff ff       	call   10003b09 <NiLoadCursors()+0x125>	10003b09: R_386_PC32	memcmp
10003b0d:	83 c4 10             	add    esp,0x10
10003b10:	85 c0                	test   eax,eax
10003b12:	74 51                	je     10003b65 <NiLoadCursors()+0x181>
10003b14:	52                   	push   edx
10003b15:	6a 04                	push   0x4
10003b17:	68 dc 6e 00 10       	push   0x10006edc	10003b18: R_386_32	.text
10003b1c:	56                   	push   esi
10003b1d:	e8 fc ff ff ff       	call   10003b1e <NiLoadCursors()+0x13a>	10003b1e: R_386_PC32	memcmp
10003b22:	83 c4 10             	add    esp,0x10
10003b25:	85 c0                	test   eax,eax
10003b27:	74 43                	je     10003b6c <NiLoadCursors()+0x188>
10003b29:	50                   	push   eax
10003b2a:	6a 04                	push   0x4
10003b2c:	68 e1 6e 00 10       	push   0x10006ee1	10003b2d: R_386_32	.text
10003b31:	56                   	push   esi
10003b32:	e8 fc ff ff ff       	call   10003b33 <NiLoadCursors()+0x14f>	10003b33: R_386_PC32	memcmp
10003b37:	83 c4 10             	add    esp,0x10
10003b3a:	85 c0                	test   eax,eax
10003b3c:	74 35                	je     10003b73 <NiLoadCursors()+0x18f>
10003b3e:	83 ec 0c             	sub    esp,0xc
10003b41:	68 e6 6e 00 10       	push   0x10006ee6	10003b42: R_386_32	.text
10003b46:	e8 fc ff ff ff       	call   10003b47 <NiLoadCursors()+0x163>	10003b47: R_386_PC32	Dbg::kprintf(char const*, ...)
10003b4b:	83 c4 10             	add    esp,0x10
10003b4e:	eb 47                	jmp    10003b97 <NiLoadCursors()+0x1b3>
10003b50:	b8 00 02 00 00       	mov    eax,0x200
10003b55:	eb 21                	jmp    10003b78 <NiLoadCursors()+0x194>
10003b57:	b8 00 03 00 00       	mov    eax,0x300
10003b5c:	eb 1a                	jmp    10003b78 <NiLoadCursors()+0x194>
10003b5e:	b8 00 01 00 00       	mov    eax,0x100
10003b63:	eb 13                	jmp    10003b78 <NiLoadCursors()+0x194>
10003b65:	b8 00 04 00 00       	mov    eax,0x400
10003b6a:	eb 0c                	jmp    10003b78 <NiLoadCursors()+0x194>
10003b6c:	b8 00 05 00 00       	mov    eax,0x500
10003b71:	eb 05                	jmp    10003b78 <NiLoadCursors()+0x194>
10003b73:	b8 00 06 00 00       	mov    eax,0x600
10003b78:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10003b7a: R_386_32	___mouse_data
10003b7e:	b9 00 01 00 00       	mov    ecx,0x100
10003b83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10003b87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10003b89:	45                   	inc    ebp
10003b8a:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10003b92:	e9 03 ff ff ff       	jmp    10003a9a <NiLoadCursors()+0xb6>
10003b97:	83 ec 0c             	sub    esp,0xc
10003b9a:	53                   	push   ebx
10003b9b:	e8 fc ff ff ff       	call   10003b9c <NiLoadCursors()+0x1b8>	10003b9c: R_386_PC32	free
10003ba0:	83 c4 10             	add    esp,0x10
10003ba3:	83 c4 2c             	add    esp,0x2c
10003ba6:	5b                   	pop    ebx
10003ba7:	5e                   	pop    esi
10003ba8:	5f                   	pop    edi
10003ba9:	5d                   	pop    ebp
10003baa:	c3                   	ret    
10003bab:	90                   	nop

10003bac <NIDesktop::desktopDecode(int)>:
10003bac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003bb0:	3d ff 0f 00 00       	cmp    eax,0xfff
10003bb5:	7e 06                	jle    10003bbd <NIDesktop::desktopDecode(int)+0x11>
10003bb7:	25 ff ff ff 00       	and    eax,0xffffff
10003bbc:	c3                   	ret    
10003bbd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
10003bc1:	0f b6 c0             	movzx  eax,al
10003bc4:	8b 44 82 08          	mov    eax,DWORD PTR [edx+eax*4+0x8]
10003bc8:	c3                   	ret    
10003bc9:	90                   	nop

10003bca <NIDesktop::NIDesktop(NIContext*)>:
10003bca:	55                   	push   ebp
10003bcb:	57                   	push   edi
10003bcc:	31 ff                	xor    edi,edi
10003bce:	56                   	push   esi
10003bcf:	53                   	push   ebx
10003bd0:	83 ec 1c             	sub    esp,0x1c
10003bd3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
10003bd7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
10003bdb:	c7 86 14 04 00 00 1e 00 00 00 	mov    DWORD PTR [esi+0x414],0x1e
10003be5:	89 2e                	mov    DWORD PTR [esi],ebp
10003be7:	c7 86 18 04 00 00 1e 00 00 00 	mov    DWORD PTR [esi+0x418],0x1e
10003bf1:	c7 86 20 04 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x420],0x0
10003bfb:	89 f9                	mov    ecx,edi
10003bfd:	89 fb                	mov    ebx,edi
10003bff:	83 e1 03             	and    ecx,0x3
10003c02:	c1 fb 02             	sar    ebx,0x2
10003c05:	69 c9 ff 00 00 00    	imul   ecx,ecx,0xff
10003c0b:	83 e3 07             	and    ebx,0x7
10003c0e:	89 f8                	mov    eax,edi
10003c10:	69 d3 ff 00 00 00    	imul   edx,ebx,0xff
10003c16:	c1 f8 05             	sar    eax,0x5
10003c19:	bb 03 00 00 00       	mov    ebx,0x3
10003c1e:	69 c0 ff 00 00 00    	imul   eax,eax,0xff
10003c24:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
10003c28:	31 d2                	xor    edx,edx
10003c2a:	f7 f3                	div    ebx
10003c2c:	31 d2                	xor    edx,edx
10003c2e:	c1 e0 10             	shl    eax,0x10
10003c31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003c35:	89 c8                	mov    eax,ecx
10003c37:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003c3b:	f7 f3                	div    ebx
10003c3d:	31 d2                	xor    edx,edx
10003c3f:	09 c1                	or     ecx,eax
10003c41:	bb 07 00 00 00       	mov    ebx,0x7
10003c46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003c4a:	f7 f3                	div    ebx
10003c4c:	c1 e0 08             	shl    eax,0x8
10003c4f:	09 c1                	or     ecx,eax
10003c51:	89 4c be 08          	mov    DWORD PTR [esi+edi*4+0x8],ecx
10003c55:	47                   	inc    edi
10003c56:	81 ff 80 00 00 00    	cmp    edi,0x80
10003c5c:	75 9d                	jne    10003bfb <NIDesktop::NIDesktop(NIContext*)+0x31>
10003c5e:	83 ec 0c             	sub    esp,0xc
10003c61:	8b 85 10 04 00 00    	mov    eax,DWORD PTR [ebp+0x410]
10003c67:	0f af 85 0c 04 00 00 	imul   eax,DWORD PTR [ebp+0x40c]
10003c6e:	c1 e0 02             	shl    eax,0x2
10003c71:	50                   	push   eax
10003c72:	e8 fc ff ff ff       	call   10003c73 <NIDesktop::NIDesktop(NIContext*)+0xa9>	10003c73: R_386_PC32	malloc
10003c77:	89 86 08 04 00 00    	mov    DWORD PTR [esi+0x408],eax
10003c7d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
10003c84:	e8 fc ff ff ff       	call   10003c85 <NIDesktop::NIDesktop(NIContext*)+0xbb>	10003c85: R_386_PC32	malloc
10003c89:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10003c8b: R_386_32	mouseDesktop
10003c8f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10003c96:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003c9c:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
10003c9f:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003ca1: R_386_32	guiMouseHandler
	10003ca5: R_386_32	NiHandleMouse(int, int, int, int)
10003ca9:	83 c4 2c             	add    esp,0x2c
10003cac:	5b                   	pop    ebx
10003cad:	5e                   	pop    esi
10003cae:	5f                   	pop    edi
10003caf:	5d                   	pop    ebp
10003cb0:	c3                   	ret    

10003cb1 <NiShutdownHandler(void*)>:
10003cb1:	56                   	push   esi
10003cb2:	53                   	push   ebx
10003cb3:	31 db                	xor    ebx,ebx
10003cb5:	52                   	push   edx
10003cb6:	83 ec 0c             	sub    esp,0xc
10003cb9:	a1 00 00 00 00       	mov    eax,ds:0x0	10003cba: R_386_32	mouseDesktop
10003cbe:	8b 00                	mov    eax,DWORD PTR [eax]
10003cc0:	ff b0 08 04 00 00    	push   DWORD PTR [eax+0x408]
10003cc6:	e8 fc ff ff ff       	call   10003cc7 <NiShutdownHandler(void*)+0x16>	10003cc7: R_386_PC32	Video::getHeight()
10003ccb:	83 c4 10             	add    esp,0x10
10003cce:	39 d8                	cmp    eax,ebx
10003cd0:	7e 45                	jle    10003d17 <NiShutdownHandler(void*)+0x66>
10003cd2:	31 f6                	xor    esi,esi
10003cd4:	83 ec 0c             	sub    esp,0xc
10003cd7:	a1 00 00 00 00       	mov    eax,ds:0x0	10003cd8: R_386_32	mouseDesktop
10003cdc:	8b 00                	mov    eax,DWORD PTR [eax]
10003cde:	ff b0 08 04 00 00    	push   DWORD PTR [eax+0x408]
10003ce4:	e8 fc ff ff ff       	call   10003ce5 <NiShutdownHandler(void*)+0x34>	10003ce5: R_386_PC32	Video::getWidth()
10003ce9:	83 c4 10             	add    esp,0x10
10003cec:	39 f0                	cmp    eax,esi
10003cee:	7e 24                	jle    10003d14 <NiShutdownHandler(void*)+0x63>
10003cf0:	8d 04 33             	lea    eax,[ebx+esi*1]
10003cf3:	a8 01                	test   al,0x1
10003cf5:	74 1a                	je     10003d11 <NiShutdownHandler(void*)+0x60>
10003cf7:	a1 00 00 00 00       	mov    eax,ds:0x0	10003cf8: R_386_32	mouseDesktop
10003cfc:	8b 00                	mov    eax,DWORD PTR [eax]
10003cfe:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10003d04:	8b 10                	mov    edx,DWORD PTR [eax]
10003d06:	6a 00                	push   0x0
10003d08:	53                   	push   ebx
10003d09:	56                   	push   esi
10003d0a:	50                   	push   eax
10003d0b:	ff 52 24             	call   DWORD PTR [edx+0x24]
10003d0e:	83 c4 10             	add    esp,0x10
10003d11:	46                   	inc    esi
10003d12:	eb c0                	jmp    10003cd4 <NiShutdownHandler(void*)+0x23>
10003d14:	43                   	inc    ebx
10003d15:	eb 9f                	jmp    10003cb6 <NiShutdownHandler(void*)+0x5>
10003d17:	58                   	pop    eax
10003d18:	5b                   	pop    ebx
10003d19:	5e                   	pop    esi
10003d1a:	c3                   	ret    
10003d1b:	90                   	nop

10003d1c <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)>:
10003d1c:	55                   	push   ebp
10003d1d:	57                   	push   edi
10003d1e:	56                   	push   esi
10003d1f:	53                   	push   ebx
10003d20:	83 ec 2c             	sub    esp,0x2c
10003d23:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003d27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003d2a:	8b 28                	mov    ebp,DWORD PTR [eax]
10003d2c:	83 7d 04 00          	cmp    DWORD PTR [ebp+0x4],0x0
10003d30:	0f 84 a2 00 00 00    	je     10003dd8 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xbc>
10003d36:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
10003d39:	85 db                	test   ebx,ebx
10003d3b:	0f 84 8f 00 00 00    	je     10003dd0 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xb4>
10003d41:	3b 5c 24 44          	cmp    ebx,DWORD PTR [esp+0x44]
10003d45:	0f 84 85 00 00 00    	je     10003dd0 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xb4>
10003d4b:	83 ec 0c             	sub    esp,0xc
10003d4e:	53                   	push   ebx
10003d4f:	e8 fc ff ff ff       	call   10003d50 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x34>	10003d50: R_386_PC32	NIWindow::invalidate()
10003d54:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
10003d58:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
10003d5c:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d5d: R_386_32	milliTenthsSinceBoot
10003d61:	83 ec 0c             	sub    esp,0xc
10003d64:	89 86 0c 04 00 00    	mov    DWORD PTR [esi+0x40c],eax
10003d6a:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	10003d6c: R_386_32	milliTenthsSinceBoot
10003d70:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10003d74:	89 96 10 04 00 00    	mov    DWORD PTR [esi+0x410],edx
10003d7a:	25 ff 1f 00 00       	and    eax,0x1fff
10003d7f:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003d81: R_386_32	mouseDesktop
10003d85:	0d 00 60 00 80       	or     eax,0x80006000
10003d8a:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10003d90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10003d94:	66 89 4c 24 2c       	mov    WORD PTR [esp+0x2c],cx
10003d99:	66 25 00 7c          	and    ax,0x7c00
10003d9d:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10003da3:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10003da9:	66 89 4c 24 2e       	mov    WORD PTR [esp+0x2e],cx
10003dae:	66 81 e2 ff 03       	and    dx,0x3ff
10003db3:	b9 06 00 00 00       	mov    ecx,0x6
10003db8:	09 d0                	or     eax,edx
10003dba:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
10003dbf:	8d 74 24 24          	lea    esi,[esp+0x24]
10003dc3:	89 e7                	mov    edi,esp
10003dc5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10003dc7:	53                   	push   ebx
10003dc8:	e8 fc ff ff ff       	call   10003dc9 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xad>	10003dc9: R_386_PC32	NIWindow::postEvent(NiEvent)
10003dcd:	83 c4 20             	add    esp,0x20
10003dd0:	8b 6d 04             	mov    ebp,DWORD PTR [ebp+0x4]
10003dd3:	e9 54 ff ff ff       	jmp    10003d2c <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x10>
10003dd8:	83 c4 2c             	add    esp,0x2c
10003ddb:	5b                   	pop    ebx
10003ddc:	5e                   	pop    esi
10003ddd:	5f                   	pop    edi
10003dde:	5d                   	pop    ebp
10003ddf:	c3                   	ret    

10003de0 <NIDesktop::getTopmostWindowAtPixel(int, int)>:
10003de0:	57                   	push   edi
10003de1:	56                   	push   esi
10003de2:	53                   	push   ebx
10003de3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003de7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10003deb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003dee:	8b 00                	mov    eax,DWORD PTR [eax]
10003df0:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10003df3:	85 db                	test   ebx,ebx
10003df5:	74 52                	je     10003e49 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x69>
10003df7:	8b 00                	mov    eax,DWORD PTR [eax]
10003df9:	85 c0                	test   eax,eax
10003dfb:	74 4e                	je     10003e4b <NIDesktop::getTopmostWindowAtPixel(int, int)+0x6b>
10003dfd:	8b 90 6c 02 00 00    	mov    edx,DWORD PTR [eax+0x26c]
10003e03:	39 ca                	cmp    edx,ecx
10003e05:	7e 04                	jle    10003e0b <NIDesktop::getTopmostWindowAtPixel(int, int)+0x2b>
10003e07:	89 d8                	mov    eax,ebx
10003e09:	eb e5                	jmp    10003df0 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x10>
10003e0b:	8b b0 74 02 00 00    	mov    esi,DWORD PTR [eax+0x274]
10003e11:	01 d6                	add    esi,edx
10003e13:	39 ce                	cmp    esi,ecx
10003e15:	7e f0                	jle    10003e07 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x27>
10003e17:	89 ce                	mov    esi,ecx
10003e19:	29 d6                	sub    esi,edx
10003e1b:	8b 90 64 02 00 00    	mov    edx,DWORD PTR [eax+0x264]
10003e21:	8d 34 b2             	lea    esi,[edx+esi*4]
10003e24:	8b 90 68 02 00 00    	mov    edx,DWORD PTR [eax+0x268]
10003e2a:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003e2d:	01 d7                	add    edi,edx
10003e2f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
10003e33:	7f d2                	jg     10003e07 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x27>
10003e35:	03 90 70 02 00 00    	add    edx,DWORD PTR [eax+0x270]
10003e3b:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003e3f:	29 f2                	sub    edx,esi
10003e41:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10003e45:	7e c0                	jle    10003e07 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x27>
10003e47:	eb 02                	jmp    10003e4b <NIDesktop::getTopmostWindowAtPixel(int, int)+0x6b>
10003e49:	31 c0                	xor    eax,eax
10003e4b:	5b                   	pop    ebx
10003e4c:	5e                   	pop    esi
10003e4d:	5f                   	pop    edi
10003e4e:	c3                   	ret    
10003e4f:	90                   	nop

10003e50 <NIDesktop::renderScanline(int, int, int)>:
10003e50:	55                   	push   ebp
10003e51:	57                   	push   edi
10003e52:	56                   	push   esi
10003e53:	53                   	push   ebx
10003e54:	83 ec 3c             	sub    esp,0x3c
10003e57:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
10003e5c:	0f 88 cb 05 00 00    	js     1000442d <NIDesktop::renderScanline(int, int, int)+0x5dd>
10003e62:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
10003e66:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
10003e6a:	8b 00                	mov    eax,DWORD PTR [eax]
10003e6c:	39 98 10 04 00 00    	cmp    DWORD PTR [eax+0x410],ebx
10003e72:	0f 8e b5 05 00 00    	jle    1000442d <NIDesktop::renderScanline(int, int, int)+0x5dd>
10003e78:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
10003e7d:	0f 88 aa 05 00 00    	js     1000442d <NIDesktop::renderScanline(int, int, int)+0x5dd>
10003e83:	8b 90 0c 04 00 00    	mov    edx,DWORD PTR [eax+0x40c]
10003e89:	3b 54 24 58          	cmp    edx,DWORD PTR [esp+0x58]
10003e8d:	0f 9c c0             	setl   al
10003e90:	3b 54 24 5c          	cmp    edx,DWORD PTR [esp+0x5c]
10003e94:	0f 9c c1             	setl   cl
10003e97:	09 c8                	or     eax,ecx
10003e99:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10003e9d:	c1 e9 1f             	shr    ecx,0x1f
10003ea0:	08 c8                	or     al,cl
10003ea2:	89 c5                	mov    ebp,eax
10003ea4:	0f 85 83 05 00 00    	jne    1000442d <NIDesktop::renderScanline(int, int, int)+0x5dd>
10003eaa:	0f af d3             	imul   edx,ebx
10003ead:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10003eb1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
10003eb5:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
10003eb9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003ebd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10003ec1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10003ec5:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003ec7: R_386_32	render
10003ecb:	89 e8                	mov    eax,ebp
10003ecd:	89 d7                	mov    edi,edx
10003ecf:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003ed1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10003ed5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10003ed9:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003edb: R_386_32	shadow
10003edf:	b0 80                	mov    al,0x80
10003ee1:	89 d7                	mov    edi,edx
10003ee3:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003ee5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
10003ee9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003eec:	8b 00                	mov    eax,DWORD PTR [eax]
10003eee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003ef2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003ef6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10003efa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003efe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003f01:	85 c0                	test   eax,eax
10003f03:	0f 84 2e 04 00 00    	je     10004337 <NIDesktop::renderScanline(int, int, int)+0x4e7>
10003f09:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10003f0d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
10003f0f:	85 db                	test   ebx,ebx
10003f11:	0f 84 20 04 00 00    	je     10004337 <NIDesktop::renderScanline(int, int, int)+0x4e7>
10003f17:	39 1d 00 00 00 00    	cmp    DWORD PTR ds:0x0,ebx	10003f19: R_386_32	movingWin
10003f1d:	75 06                	jne    10003f25 <NIDesktop::renderScanline(int, int, int)+0xd5>
10003f1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003f23:	eb d5                	jmp    10003efa <NIDesktop::renderScanline(int, int, int)+0xaa>
10003f25:	8b 93 90 02 00 00    	mov    edx,DWORD PTR [ebx+0x290]
10003f2b:	89 d1                	mov    ecx,edx
10003f2d:	83 e1 12             	and    ecx,0x12
10003f30:	83 f9 12             	cmp    ecx,0x12
10003f33:	74 ea                	je     10003f1f <NIDesktop::renderScanline(int, int, int)+0xcf>
10003f35:	0f ba e2 09          	bt     edx,0x9
10003f39:	72 e4                	jb     10003f1f <NIDesktop::renderScanline(int, int, int)+0xcf>
10003f3b:	83 ec 0c             	sub    esp,0xc
10003f3e:	53                   	push   ebx
10003f3f:	e8 fc ff ff ff       	call   10003f40 <NIDesktop::renderScanline(int, int, int)+0xf0>	10003f40: R_386_PC32	NIWindow::request()
10003f44:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
10003f4a:	8b 93 74 02 00 00    	mov    edx,DWORD PTR [ebx+0x274]
10003f50:	83 c4 10             	add    esp,0x10
10003f53:	01 c2                	add    edx,eax
10003f55:	3b 54 24 54          	cmp    edx,DWORD PTR [esp+0x54]
10003f59:	0f 8e 0e 01 00 00    	jle    1000406d <NIDesktop::renderScanline(int, int, int)+0x21d>
10003f5f:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
10003f66:	0f 85 01 01 00 00    	jne    1000406d <NIDesktop::renderScanline(int, int, int)+0x21d>
10003f6c:	f6 83 90 02 00 00 40 	test   BYTE PTR [ebx+0x290],0x40
10003f73:	0f 85 17 02 00 00    	jne    10004190 <NIDesktop::renderScanline(int, int, int)+0x340>
10003f79:	8b 83 68 02 00 00    	mov    eax,DWORD PTR [ebx+0x268]
10003f7f:	8b b3 68 02 00 00    	mov    esi,DWORD PTR [ebx+0x268]
10003f85:	8b bb 70 02 00 00    	mov    edi,DWORD PTR [ebx+0x270]
10003f8b:	01 f7                	add    edi,esi
10003f8d:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
10003f91:	39 c7                	cmp    edi,eax
10003f93:	0f 8e f7 01 00 00    	jle    10004190 <NIDesktop::renderScanline(int, int, int)+0x340>
10003f99:	3b 44 24 58          	cmp    eax,DWORD PTR [esp+0x58]
10003f9d:	0f 8c c4 00 00 00    	jl     10004067 <NIDesktop::renderScanline(int, int, int)+0x217>
10003fa3:	3b 44 24 5c          	cmp    eax,DWORD PTR [esp+0x5c]
10003fa7:	0f 8f e3 01 00 00    	jg     10004190 <NIDesktop::renderScanline(int, int, int)+0x340>
10003fad:	8b bb 90 02 00 00    	mov    edi,DWORD PTR [ebx+0x290]
10003fb3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
10003fb7:	81 e7 00 01 00 00    	and    edi,0x100
10003fbd:	83 ff 01             	cmp    edi,0x1
10003fc0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10003fc4:	19 c9                	sbb    ecx,ecx
10003fc6:	8b bb 6c 02 00 00    	mov    edi,DWORD PTR [ebx+0x26c]
10003fcc:	83 e1 03             	and    ecx,0x3
10003fcf:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10003fd3:	83 c1 02             	add    ecx,0x2
10003fd6:	6b ff fc             	imul   edi,edi,0xfffffffc
10003fd9:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
10003fdd:	89 c7                	mov    edi,eax
10003fdf:	29 f7                	sub    edi,esi
10003fe1:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10003fe5:	39 54 24 20          	cmp    DWORD PTR [esp+0x20],edx
10003fe9:	7f 24                	jg     1000400f <NIDesktop::renderScanline(int, int, int)+0x1bf>
10003feb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
10003fef:	8d 34 96             	lea    esi,[esi+edx*4]
10003ff2:	03 b3 64 02 00 00    	add    esi,DWORD PTR [ebx+0x264]
10003ff8:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003ffb:	3b 7c 24 2c          	cmp    edi,DWORD PTR [esp+0x2c]
10003fff:	7f 0e                	jg     1000400f <NIDesktop::renderScanline(int, int, int)+0x1bf>
10004001:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10004005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10004009:	29 f7                	sub    edi,esi
1000400b:	39 c7                	cmp    edi,eax
1000400d:	7d 0b                	jge    1000401a <NIDesktop::renderScanline(int, int, int)+0x1ca>
1000400f:	42                   	inc    edx
10004010:	89 d6                	mov    esi,edx
10004012:	2b 74 24 54          	sub    esi,DWORD PTR [esp+0x54]
10004016:	39 f1                	cmp    ecx,esi
10004018:	7d cb                	jge    10003fe5 <NIDesktop::renderScanline(int, int, int)+0x195>
1000401a:	89 d6                	mov    esi,edx
1000401c:	2b 74 24 54          	sub    esi,DWORD PTR [esp+0x54]
10004020:	39 f1                	cmp    ecx,esi
10004022:	0f 9f c1             	setg   cl
10004025:	85 f6                	test   esi,esi
10004027:	0f 9f c2             	setg   dl
1000402a:	20 d1                	and    cl,dl
1000402c:	74 39                	je     10004067 <NIDesktop::renderScanline(int, int, int)+0x217>
1000402e:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10004030: R_386_32	render
10004035:	75 30                	jne    10004067 <NIDesktop::renderScanline(int, int, int)+0x217>
10004037:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000403c:	74 09                	je     10004047 <NIDesktop::renderScanline(int, int, int)+0x1f7>
1000403e:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10004040: R_386_32	shadow
10004045:	eb 1e                	jmp    10004065 <NIDesktop::renderScanline(int, int, int)+0x215>
10004047:	8d 34 f5 5d 00 00 00 	lea    esi,[esi*8+0x5d]
1000404e:	0f b6 90 00 00 00 00 	movzx  edx,BYTE PTR [eax+0x0]	10004051: R_386_32	shadow
10004055:	0f af d6             	imul   edx,esi
10004058:	d1 fe                	sar    esi,1
1000405a:	c1 fa 08             	sar    edx,0x8
1000405d:	01 f2                	add    edx,esi
1000405f:	88 90 00 00 00 00    	mov    BYTE PTR [eax+0x0],dl	10004061: R_386_32	shadow
10004065:	89 cd                	mov    ebp,ecx
10004067:	40                   	inc    eax
10004068:	e9 12 ff ff ff       	jmp    10003f7f <NIDesktop::renderScanline(int, int, int)+0x12f>
1000406d:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10004071:	0f 8d 19 01 00 00    	jge    10004190 <NIDesktop::renderScanline(int, int, int)+0x340>
10004077:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
1000407e:	0f 85 0c 01 00 00    	jne    10004190 <NIDesktop::renderScanline(int, int, int)+0x340>
10004084:	f6 83 90 02 00 00 40 	test   BYTE PTR [ebx+0x290],0x40
1000408b:	0f 85 ff 00 00 00    	jne    10004190 <NIDesktop::renderScanline(int, int, int)+0x340>
10004091:	8b 83 68 02 00 00    	mov    eax,DWORD PTR [ebx+0x268]
10004097:	8b b3 68 02 00 00    	mov    esi,DWORD PTR [ebx+0x268]
1000409d:	8b bb 70 02 00 00    	mov    edi,DWORD PTR [ebx+0x270]
100040a3:	01 f7                	add    edi,esi
100040a5:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
100040a9:	39 c7                	cmp    edi,eax
100040ab:	0f 8e df 00 00 00    	jle    10004190 <NIDesktop::renderScanline(int, int, int)+0x340>
100040b1:	3b 44 24 58          	cmp    eax,DWORD PTR [esp+0x58]
100040b5:	0f 8c cf 00 00 00    	jl     1000418a <NIDesktop::renderScanline(int, int, int)+0x33a>
100040bb:	3b 44 24 5c          	cmp    eax,DWORD PTR [esp+0x5c]
100040bf:	0f 8f cb 00 00 00    	jg     10004190 <NIDesktop::renderScanline(int, int, int)+0x340>
100040c5:	8b bb 90 02 00 00    	mov    edi,DWORD PTR [ebx+0x290]
100040cb:	81 e7 00 01 00 00    	and    edi,0x100
100040d1:	83 ff 01             	cmp    edi,0x1
100040d4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
100040d8:	19 c9                	sbb    ecx,ecx
100040da:	89 c7                	mov    edi,eax
100040dc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
100040e0:	29 f7                	sub    edi,esi
100040e2:	83 64 24 10 03       	and    DWORD PTR [esp+0x10],0x3
100040e7:	8b 4c 24 54          	mov    ecx,DWORD PTR [esp+0x54]
100040eb:	83 44 24 10 02       	add    DWORD PTR [esp+0x10],0x2
100040f0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
100040f4:	49                   	dec    ecx
100040f5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
100040f9:	29 cf                	sub    edi,ecx
100040fb:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
100040ff:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
10004103:	7c 3b                	jl     10004140 <NIDesktop::renderScanline(int, int, int)+0x2f0>
10004105:	8b bb 6c 02 00 00    	mov    edi,DWORD PTR [ebx+0x26c]
1000410b:	8b b3 74 02 00 00    	mov    esi,DWORD PTR [ebx+0x274]
10004111:	8d 14 37             	lea    edx,[edi+esi*1]
10004114:	39 ca                	cmp    edx,ecx
10004116:	7e dc                	jle    100040f4 <NIDesktop::renderScanline(int, int, int)+0x2a4>
10004118:	89 ca                	mov    edx,ecx
1000411a:	29 fa                	sub    edx,edi
1000411c:	39 d6                	cmp    esi,edx
1000411e:	7e 20                	jle    10004140 <NIDesktop::renderScanline(int, int, int)+0x2f0>
10004120:	8b b3 64 02 00 00    	mov    esi,DWORD PTR [ebx+0x264]
10004126:	8d 34 96             	lea    esi,[esi+edx*4]
10004129:	0f b7 3e             	movzx  edi,WORD PTR [esi]
1000412c:	3b 7c 24 2c          	cmp    edi,DWORD PTR [esp+0x2c]
10004130:	7f c2                	jg     100040f4 <NIDesktop::renderScanline(int, int, int)+0x2a4>
10004132:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10004136:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000413a:	29 f7                	sub    edi,esi
1000413c:	39 c7                	cmp    edi,eax
1000413e:	7c b4                	jl     100040f4 <NIDesktop::renderScanline(int, int, int)+0x2a4>
10004140:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004144:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
10004148:	76 40                	jbe    1000418a <NIDesktop::renderScanline(int, int, int)+0x33a>
1000414a:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	1000414c: R_386_32	render
10004151:	75 37                	jne    1000418a <NIDesktop::renderScanline(int, int, int)+0x33a>
10004153:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
10004158:	74 09                	je     10004163 <NIDesktop::renderScanline(int, int, int)+0x313>
1000415a:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	1000415c: R_386_32	shadow
10004161:	eb 22                	jmp    10004185 <NIDesktop::renderScanline(int, int, int)+0x335>
10004163:	0f b6 90 00 00 00 00 	movzx  edx,BYTE PTR [eax+0x0]	10004166: R_386_32	shadow
1000416a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
1000416e:	8d 0c f5 5d 00 00 00 	lea    ecx,[esi*8+0x5d]
10004175:	0f af d1             	imul   edx,ecx
10004178:	d1 f9                	sar    ecx,1
1000417a:	c1 fa 08             	sar    edx,0x8
1000417d:	01 d1                	add    ecx,edx
1000417f:	88 88 00 00 00 00    	mov    BYTE PTR [eax+0x0],cl	10004181: R_386_32	shadow
10004185:	bd 01 00 00 00       	mov    ebp,0x1
1000418a:	40                   	inc    eax
1000418b:	e9 07 ff ff ff       	jmp    10004097 <NIDesktop::renderScanline(int, int, int)+0x247>
10004190:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
10004196:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
1000419a:	0f 8f 82 01 00 00    	jg     10004322 <NIDesktop::renderScanline(int, int, int)+0x4d2>
100041a0:	8b 93 74 02 00 00    	mov    edx,DWORD PTR [ebx+0x274]
100041a6:	01 c2                	add    edx,eax
100041a8:	3b 54 24 54          	cmp    edx,DWORD PTR [esp+0x54]
100041ac:	0f 8e 70 01 00 00    	jle    10004322 <NIDesktop::renderScanline(int, int, int)+0x4d2>
100041b2:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
100041b6:	29 c2                	sub    edx,eax
100041b8:	8b 83 64 02 00 00    	mov    eax,DWORD PTR [ebx+0x264]
100041be:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
100041c5:	8d 04 90             	lea    eax,[eax+edx*4]
100041c8:	0f b7 30             	movzx  esi,WORD PTR [eax]
100041cb:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
100041cf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
100041d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100041d7:	0f 85 d8 00 00 00    	jne    100042b5 <NIDesktop::renderScanline(int, int, int)+0x465>
100041dd:	8b 83 90 02 00 00    	mov    eax,DWORD PTR [ebx+0x290]
100041e3:	a8 40                	test   al,0x40
100041e5:	0f 85 ca 00 00 00    	jne    100042b5 <NIDesktop::renderScanline(int, int, int)+0x465>
100041eb:	25 00 01 00 00       	and    eax,0x100
100041f0:	83 f8 01             	cmp    eax,0x1
100041f3:	19 c9                	sbb    ecx,ecx
100041f5:	83 e1 fe             	and    ecx,0xfffffffe
100041f8:	83 c1 03             	add    ecx,0x3
100041fb:	8b 83 68 02 00 00    	mov    eax,DWORD PTR [ebx+0x268]
10004201:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10004205:	8b bb 90 02 00 00    	mov    edi,DWORD PTR [ebx+0x290]
1000420b:	8d 74 30 fc          	lea    esi,[eax+esi*1-0x4]
1000420f:	81 e7 00 01 00 00    	and    edi,0x100
10004215:	01 ce                	add    esi,ecx
10004217:	03 83 70 02 00 00    	add    eax,DWORD PTR [ebx+0x270]
1000421d:	89 fa                	mov    edx,edi
1000421f:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
10004223:	01 c8                	add    eax,ecx
10004225:	83 ff 01             	cmp    edi,0x1
10004228:	19 ff                	sbb    edi,edi
1000422a:	f7 d7                	not    edi
1000422c:	83 e7 03             	and    edi,0x3
1000422f:	29 f8                	sub    eax,edi
10004231:	80 be 00 00 00 00 00 	cmp    BYTE PTR [esi+0x0],0x0	10004233: R_386_32	render
10004238:	75 31                	jne    1000426b <NIDesktop::renderScanline(int, int, int)+0x41b>
1000423a:	85 d2                	test   edx,edx
1000423c:	74 09                	je     10004247 <NIDesktop::renderScanline(int, int, int)+0x3f7>
1000423e:	c6 86 00 00 00 00 00 	mov    BYTE PTR [esi+0x0],0x0	10004240: R_386_32	shadow
10004245:	eb 1f                	jmp    10004266 <NIDesktop::renderScanline(int, int, int)+0x416>
10004247:	0f b6 be 00 00 00 00 	movzx  edi,BYTE PTR [esi+0x0]	1000424a: R_386_32	shadow
1000424e:	6b e9 f8             	imul   ebp,ecx,0xfffffff8
10004251:	83 c5 7d             	add    ebp,0x7d
10004254:	0f af fd             	imul   edi,ebp
10004257:	d1 fd                	sar    ebp,1
10004259:	c1 ff 08             	sar    edi,0x8
1000425c:	01 fd                	add    ebp,edi
1000425e:	89 ea                	mov    edx,ebp
10004260:	88 96 00 00 00 00    	mov    BYTE PTR [esi+0x0],dl	10004262: R_386_32	shadow
10004266:	bd 01 00 00 00       	mov    ebp,0x1
1000426b:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	1000426d: R_386_32	render
10004272:	75 37                	jne    100042ab <NIDesktop::renderScanline(int, int, int)+0x45b>
10004274:	f6 83 91 02 00 00 01 	test   BYTE PTR [ebx+0x291],0x1
1000427b:	74 09                	je     10004286 <NIDesktop::renderScanline(int, int, int)+0x436>
1000427d:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	1000427f: R_386_32	shadow
10004284:	eb 20                	jmp    100042a6 <NIDesktop::renderScanline(int, int, int)+0x456>
10004286:	8d 3c cd 65 00 00 00 	lea    edi,[ecx*8+0x65]
1000428d:	0f b6 b0 00 00 00 00 	movzx  esi,BYTE PTR [eax+0x0]	10004290: R_386_32	shadow
10004294:	0f af f7             	imul   esi,edi
10004297:	d1 ff                	sar    edi,1
10004299:	c1 fe 08             	sar    esi,0x8
1000429c:	01 f7                	add    edi,esi
1000429e:	89 fa                	mov    edx,edi
100042a0:	88 90 00 00 00 00    	mov    BYTE PTR [eax+0x0],dl	100042a2: R_386_32	shadow
100042a6:	bd 01 00 00 00       	mov    ebp,0x1
100042ab:	41                   	inc    ecx
100042ac:	83 f9 04             	cmp    ecx,0x4
100042af:	0f 85 46 ff ff ff    	jne    100041fb <NIDesktop::renderScanline(int, int, int)+0x3ab>
100042b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100042b9:	03 93 68 02 00 00    	add    edx,DWORD PTR [ebx+0x268]
100042bf:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100042c5:	03 83 68 02 00 00    	add    eax,DWORD PTR [ebx+0x268]
100042cb:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
100042cf:	39 d0                	cmp    eax,edx
100042d1:	7e 4f                	jle    10004322 <NIDesktop::renderScanline(int, int, int)+0x4d2>
100042d3:	3b 54 24 58          	cmp    edx,DWORD PTR [esp+0x58]
100042d7:	7c 46                	jl     1000431f <NIDesktop::renderScanline(int, int, int)+0x4cf>
100042d9:	3b 54 24 5c          	cmp    edx,DWORD PTR [esp+0x5c]
100042dd:	7f 43                	jg     10004322 <NIDesktop::renderScanline(int, int, int)+0x4d2>
100042df:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	100042e1: R_386_32	render
100042e6:	75 37                	jne    1000431f <NIDesktop::renderScanline(int, int, int)+0x4cf>
100042e8:	c6 82 00 00 00 00 01 	mov    BYTE PTR [edx+0x0],0x1	100042ea: R_386_32	render
100042ef:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100042f3:	2b 83 6c 02 00 00    	sub    eax,DWORD PTR [ebx+0x26c]
100042f9:	0f af 83 70 02 00 00 	imul   eax,DWORD PTR [ebx+0x270]
10004300:	89 c1                	mov    ecx,eax
10004302:	89 d0                	mov    eax,edx
10004304:	2b 83 68 02 00 00    	sub    eax,DWORD PTR [ebx+0x268]
1000430a:	01 c8                	add    eax,ecx
1000430c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
1000430f:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
10004313:	8b 04 81             	mov    eax,DWORD PTR [ecx+eax*4]
10004316:	89 04 95 00 00 00 00 	mov    DWORD PTR [edx*4+0x0],eax	10004319: R_386_32	renderData
1000431d:	74 64                	je     10004383 <NIDesktop::renderScanline(int, int, int)+0x533>
1000431f:	42                   	inc    edx
10004320:	eb 9d                	jmp    100042bf <NIDesktop::renderScanline(int, int, int)+0x46f>
10004322:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
10004329:	75 0c                	jne    10004337 <NIDesktop::renderScanline(int, int, int)+0x4e7>
1000432b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000432f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10004332:	e9 e8 fb ff ff       	jmp    10003f1f <NIDesktop::renderScanline(int, int, int)+0xcf>
10004337:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
1000433b:	3b 4c 24 5c          	cmp    ecx,DWORD PTR [esp+0x5c]
1000433f:	7d 42                	jge    10004383 <NIDesktop::renderScanline(int, int, int)+0x533>
10004341:	80 b9 00 00 00 00 00 	cmp    BYTE PTR [ecx+0x0],0x0	10004343: R_386_32	render
10004348:	75 36                	jne    10004380 <NIDesktop::renderScanline(int, int, int)+0x530>
1000434a:	c6 81 00 00 00 00 01 	mov    BYTE PTR [ecx+0x0],0x1	1000434c: R_386_32	render
10004351:	50                   	push   eax
10004352:	50                   	push   eax
10004353:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10004357:	8d 14 08             	lea    edx,[eax+ecx*1]
1000435a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
1000435e:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004364:	ff 34 90             	push   DWORD PTR [eax+edx*4]
10004367:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
1000436b:	e8 fc ff ff ff       	call   1000436c <NIDesktop::renderScanline(int, int, int)+0x51c>	1000436c: R_386_PC32	NIDesktop::desktopDecode(int)
10004370:	83 c4 10             	add    esp,0x10
10004373:	89 04 8d 00 00 00 00 	mov    DWORD PTR [ecx*4+0x0],eax	10004376: R_386_32	renderData
1000437a:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
1000437e:	74 03                	je     10004383 <NIDesktop::renderScanline(int, int, int)+0x533>
10004380:	41                   	inc    ecx
10004381:	eb b8                	jmp    1000433b <NIDesktop::renderScanline(int, int, int)+0x4eb>
10004383:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
10004387:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000438a:	8b 00                	mov    eax,DWORD PTR [eax]
1000438c:	85 c0                	test   eax,eax
1000438e:	74 67                	je     100043f7 <NIDesktop::renderScanline(int, int, int)+0x5a7>
10004390:	8b 00                	mov    eax,DWORD PTR [eax]
10004392:	85 c0                	test   eax,eax
10004394:	74 61                	je     100043f7 <NIDesktop::renderScanline(int, int, int)+0x5a7>
10004396:	80 b8 78 02 00 00 01 	cmp    BYTE PTR [eax+0x278],0x1
1000439d:	74 58                	je     100043f7 <NIDesktop::renderScanline(int, int, int)+0x5a7>
1000439f:	89 e8                	mov    eax,ebp
100043a1:	84 c0                	test   al,al
100043a3:	74 52                	je     100043f7 <NIDesktop::renderScanline(int, int, int)+0x5a7>
100043a5:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
100043a9:	3b 5c 24 5c          	cmp    ebx,DWORD PTR [esp+0x5c]
100043ad:	7d 48                	jge    100043f7 <NIDesktop::renderScanline(int, int, int)+0x5a7>
100043af:	8a 83 00 00 00 00    	mov    al,BYTE PTR [ebx+0x0]	100043b1: R_386_32	shadow
100043b5:	3c 80                	cmp    al,0x80
100043b7:	74 3b                	je     100043f4 <NIDesktop::renderScanline(int, int, int)+0x5a4>
100043b9:	8b 14 9d 00 00 00 00 	mov    edx,DWORD PTR [ebx*4+0x0]	100043bc: R_386_32	renderData
100043c0:	0f b6 f0             	movzx  esi,al
100043c3:	89 d1                	mov    ecx,edx
100043c5:	0f b6 c6             	movzx  eax,dh
100043c8:	c1 e9 10             	shr    ecx,0x10
100043cb:	0f af c6             	imul   eax,esi
100043ce:	0f b6 c9             	movzx  ecx,cl
100043d1:	0f b6 d2             	movzx  edx,dl
100043d4:	0f af ce             	imul   ecx,esi
100043d7:	0f af d6             	imul   edx,esi
100043da:	c1 e9 07             	shr    ecx,0x7
100043dd:	c1 e8 07             	shr    eax,0x7
100043e0:	c1 e1 10             	shl    ecx,0x10
100043e3:	c1 e0 08             	shl    eax,0x8
100043e6:	c1 ea 07             	shr    edx,0x7
100043e9:	09 c1                	or     ecx,eax
100043eb:	09 ca                	or     edx,ecx
100043ed:	89 14 9d 00 00 00 00 	mov    DWORD PTR [ebx*4+0x0],edx	100043f0: R_386_32	renderData
100043f4:	43                   	inc    ebx
100043f5:	eb b2                	jmp    100043a9 <NIDesktop::renderScanline(int, int, int)+0x559>
100043f7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
100043fb:	83 ec 0c             	sub    esp,0xc
100043fe:	8b 00                	mov    eax,DWORD PTR [eax]
10004400:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004406:	8b 10                	mov    edx,DWORD PTR [eax]
10004408:	68 00 00 00 00       	push   0x0	10004409: R_386_32	renderData
1000440d:	6a 00                	push   0x0
1000440f:	6a 01                	push   0x1
10004411:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10004415:	6a 00                	push   0x0
10004417:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
1000441b:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
1000441f:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
10004426:	50                   	push   eax
10004427:	ff 52 38             	call   DWORD PTR [edx+0x38]
1000442a:	83 c4 30             	add    esp,0x30
1000442d:	83 c4 3c             	add    esp,0x3c
10004430:	5b                   	pop    ebx
10004431:	5e                   	pop    esi
10004432:	5f                   	pop    edi
10004433:	5d                   	pop    ebp
10004434:	c3                   	ret    
10004435:	90                   	nop

10004436 <NIDesktop::rangeRefresh(int, int, int, int, bool*)>:
10004436:	57                   	push   edi
10004437:	56                   	push   esi
10004438:	53                   	push   ebx
10004439:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
1000443d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10004441:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
10004445:	3b 5c 24 18          	cmp    ebx,DWORD PTR [esp+0x18]
10004449:	7d 29                	jge    10004474 <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0x3e>
1000444b:	85 f6                	test   esi,esi
1000444d:	74 06                	je     10004455 <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0x1f>
1000444f:	80 3c 1e 00          	cmp    BYTE PTR [esi+ebx*1],0x0
10004453:	74 1c                	je     10004471 <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0x3b>
10004455:	8b 07                	mov    eax,DWORD PTR [edi]
10004457:	39 98 10 04 00 00    	cmp    DWORD PTR [eax+0x410],ebx
1000445d:	7e 15                	jle    10004474 <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0x3e>
1000445f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10004463:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10004467:	53                   	push   ebx
10004468:	57                   	push   edi
10004469:	e8 fc ff ff ff       	call   1000446a <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0x34>	1000446a: R_386_PC32	NIDesktop::renderScanline(int, int, int)
1000446e:	83 c4 10             	add    esp,0x10
10004471:	43                   	inc    ebx
10004472:	eb d1                	jmp    10004445 <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0xf>
10004474:	5b                   	pop    ebx
10004475:	5e                   	pop    esi
10004476:	5f                   	pop    edi
10004477:	c3                   	ret    

10004478 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)>:
10004478:	55                   	push   ebp
10004479:	57                   	push   edi
1000447a:	56                   	push   esi
1000447b:	53                   	push   ebx
1000447c:	83 ec 34             	sub    esp,0x34
1000447f:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
10004483:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
10004487:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
1000448b:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
10004491:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004495:	8d 4a 20             	lea    ecx,[edx+0x20]
10004498:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
1000449c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100044a0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
100044a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100044a8:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
100044ae:	6a 00                	push   0x0
100044b0:	51                   	push   ecx
100044b1:	52                   	push   edx
100044b2:	8d 50 20             	lea    edx,[eax+0x20]
100044b5:	52                   	push   edx
100044b6:	50                   	push   eax
100044b7:	53                   	push   ebx
100044b8:	e8 fc ff ff ff       	call   100044b9 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0x41>	100044b9: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
100044bd:	8b 86 6c 02 00 00    	mov    eax,DWORD PTR [esi+0x26c]
100044c3:	8b 3b                	mov    edi,DWORD PTR [ebx]
100044c5:	8b 96 74 02 00 00    	mov    edx,DWORD PTR [esi+0x274]
100044cb:	8b 8f 10 04 00 00    	mov    ecx,DWORD PTR [edi+0x410]
100044d1:	01 c2                	add    edx,eax
100044d3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
100044d7:	83 e9 05             	sub    ecx,0x5
100044da:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
100044de:	83 c4 20             	add    esp,0x20
100044e1:	8d 4a 05             	lea    ecx,[edx+0x5]
100044e4:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
100044e8:	7f 05                	jg     100044ef <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0x77>
100044ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100044ee:	49                   	dec    ecx
100044ef:	8b 96 68 02 00 00    	mov    edx,DWORD PTR [esi+0x268]
100044f5:	89 d5                	mov    ebp,edx
100044f7:	83 fa 05             	cmp    edx,0x5
100044fa:	7d 05                	jge    10004501 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0x89>
100044fc:	bd 05 00 00 00       	mov    ebp,0x5
10004501:	03 96 70 02 00 00    	add    edx,DWORD PTR [esi+0x270]
10004507:	83 ed 05             	sub    ebp,0x5
1000450a:	8b bf 0c 04 00 00    	mov    edi,DWORD PTR [edi+0x40c]
10004510:	8d 77 fb             	lea    esi,[edi-0x5]
10004513:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10004517:	8d 72 05             	lea    esi,[edx+0x5]
1000451a:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
1000451e:	7f 03                	jg     10004523 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xab>
10004520:	8d 77 ff             	lea    esi,[edi-0x1]
10004523:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
10004528:	75 07                	jne    10004531 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xb9>
1000452a:	89 c2                	mov    edx,eax
1000452c:	83 f8 05             	cmp    eax,0x5
1000452f:	eb 09                	jmp    1000453a <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xc2>
10004531:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10004535:	01 c2                	add    edx,eax
10004537:	83 fa 05             	cmp    edx,0x5
1000453a:	7d 05                	jge    10004541 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xc9>
1000453c:	ba 05 00 00 00       	mov    edx,0x5
10004541:	83 ea 05             	sub    edx,0x5
10004544:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
10004549:	74 12                	je     1000455d <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xe5>
1000454b:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
1000454f:	8d 48 05             	lea    ecx,[eax+0x5]
10004552:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
10004556:	7f 05                	jg     1000455d <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xe5>
10004558:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000455c:	49                   	dec    ecx
1000455d:	50                   	push   eax
1000455e:	50                   	push   eax
1000455f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10004563:	56                   	push   esi
10004564:	55                   	push   ebp
10004565:	51                   	push   ecx
10004566:	52                   	push   edx
10004567:	53                   	push   ebx
10004568:	e8 fc ff ff ff       	call   10004569 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xf1>	10004569: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
1000456d:	8b 03                	mov    eax,DWORD PTR [ebx]
1000456f:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004575:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004577:	c7 44 24 70 00 00 00 00 	mov    DWORD PTR [esp+0x70],0x0
1000457f:	8b 83 20 04 00 00    	mov    eax,DWORD PTR [ebx+0x420]
10004585:	05 00 00 00 00       	add    eax,0x0	10004586: R_386_32	___mouse_data
1000458a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
1000458e:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10004594:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
10004598:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
1000459e:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
100045a2:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
100045a6:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
100045a9:	83 c4 4c             	add    esp,0x4c
100045ac:	5b                   	pop    ebx
100045ad:	5e                   	pop    esi
100045ae:	5f                   	pop    edi
100045af:	5d                   	pop    ebp
100045b0:	ff e0                	jmp    eax

100045b2 <NIDesktop::completeRefresh()>:
100045b2:	56                   	push   esi
100045b3:	31 f6                	xor    esi,esi
100045b5:	53                   	push   ebx
100045b6:	83 ec 0c             	sub    esp,0xc
100045b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100045bd:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
100045c3:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
100045c9:	8d 4a 20             	lea    ecx,[edx+0x20]
100045cc:	6a 00                	push   0x0
100045ce:	51                   	push   ecx
100045cf:	52                   	push   edx
100045d0:	8d 50 20             	lea    edx,[eax+0x20]
100045d3:	52                   	push   edx
100045d4:	50                   	push   eax
100045d5:	53                   	push   ebx
100045d6:	e8 fc ff ff ff       	call   100045d7 <NIDesktop::completeRefresh()+0x25>	100045d7: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
100045db:	83 c4 20             	add    esp,0x20
100045de:	8b 03                	mov    eax,DWORD PTR [ebx]
100045e0:	39 b0 10 04 00 00    	cmp    DWORD PTR [eax+0x410],esi
100045e6:	7e 15                	jle    100045fd <NIDesktop::completeRefresh()+0x4b>
100045e8:	ff b0 0c 04 00 00    	push   DWORD PTR [eax+0x40c]
100045ee:	6a 00                	push   0x0
100045f0:	56                   	push   esi
100045f1:	46                   	inc    esi
100045f2:	53                   	push   ebx
100045f3:	e8 fc ff ff ff       	call   100045f4 <NIDesktop::completeRefresh()+0x42>	100045f4: R_386_PC32	NIDesktop::renderScanline(int, int, int)
100045f8:	83 c4 10             	add    esp,0x10
100045fb:	eb e1                	jmp    100045de <NIDesktop::completeRefresh()+0x2c>
100045fd:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004603:	83 ec 0c             	sub    esp,0xc
10004606:	8b 0a                	mov    ecx,DWORD PTR [edx]
10004608:	6a 00                	push   0x0
1000460a:	8b 83 20 04 00 00    	mov    eax,DWORD PTR [ebx+0x420]
10004610:	05 00 00 00 00       	add    eax,0x0	10004611: R_386_32	___mouse_data
10004615:	50                   	push   eax
10004616:	ff b3 18 04 00 00    	push   DWORD PTR [ebx+0x418]
1000461c:	ff b3 14 04 00 00    	push   DWORD PTR [ebx+0x414]
10004622:	52                   	push   edx
10004623:	ff 51 30             	call   DWORD PTR [ecx+0x30]
10004626:	83 c4 24             	add    esp,0x24
10004629:	5b                   	pop    ebx
1000462a:	5e                   	pop    esi
1000462b:	c3                   	ret    

1000462c <NIDesktop::addWindow(NIWindow*)>:
1000462c:	56                   	push   esi
1000462d:	53                   	push   ebx
1000462e:	83 ec 0c             	sub    esp,0xc
10004631:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10004635:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
10004639:	56                   	push   esi
1000463a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
1000463d:	e8 fc ff ff ff       	call   1000463e <NIDesktop::addWindow(NIWindow*)+0x12>	1000463e: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
10004642:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10004649:	6a ff                	push   0xffffffff
1000464b:	6a ff                	push   0xffffffff
1000464d:	56                   	push   esi
1000464e:	53                   	push   ebx
1000464f:	e8 fc ff ff ff       	call   10004650 <NIDesktop::addWindow(NIWindow*)+0x24>	10004650: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
10004654:	83 c4 24             	add    esp,0x24
10004657:	5b                   	pop    ebx
10004658:	5e                   	pop    esi
10004659:	c3                   	ret    

1000465a <NIDesktop::raiseWindow(NIWindow*)>:
1000465a:	53                   	push   ebx
1000465b:	83 ec 10             	sub    esp,0x10
1000465e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10004662:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10004666:	50                   	push   eax
10004667:	ff 73 04             	push   DWORD PTR [ebx+0x4]
1000466a:	e8 fc ff ff ff       	call   1000466b <NIDesktop::raiseWindow(NIWindow*)+0x11>	1000466b: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
1000466f:	58                   	pop    eax
10004670:	5a                   	pop    edx
10004671:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10004675:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10004678:	e8 fc ff ff ff       	call   10004679 <NIDesktop::raiseWindow(NIWindow*)+0x1f>	10004679: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
1000467d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10004684:	6a ff                	push   0xffffffff
10004686:	6a ff                	push   0xffffffff
10004688:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000468c:	53                   	push   ebx
1000468d:	e8 fc ff ff ff       	call   1000468e <NIDesktop::raiseWindow(NIWindow*)+0x34>	1000468e: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
10004692:	83 c4 28             	add    esp,0x28
10004695:	5b                   	pop    ebx
10004696:	c3                   	ret    
10004697:	90                   	nop

10004698 <NIDesktop::deleteWindow(NIWindow*)>:
10004698:	53                   	push   ebx
10004699:	83 ec 10             	sub    esp,0x10
1000469c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100046a0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100046a4:	50                   	push   eax
100046a5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
100046a8:	e8 fc ff ff ff       	call   100046a9 <NIDesktop::deleteWindow(NIWindow*)+0x11>	100046a9: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
100046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
100046b4:	6a ff                	push   0xffffffff
100046b6:	6a ff                	push   0xffffffff
100046b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100046bc:	53                   	push   ebx
100046bd:	e8 fc ff ff ff       	call   100046be <NIDesktop::deleteWindow(NIWindow*)+0x26>	100046be: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
100046c2:	83 c4 28             	add    esp,0x28
100046c5:	5b                   	pop    ebx
100046c6:	c3                   	ret    
100046c7:	90                   	nop

100046c8 <NIDesktop::handleMouse(int, int, int, int)>:
100046c8:	55                   	push   ebp
100046c9:	57                   	push   edi
100046ca:	56                   	push   esi
100046cb:	53                   	push   ebx
100046cc:	81 ec 74 01 00 00    	sub    esp,0x174
100046d2:	8b 9c 24 88 01 00 00 	mov    ebx,DWORD PTR [esp+0x188]
100046d9:	8b b4 24 8c 01 00 00 	mov    esi,DWORD PTR [esp+0x18c]
100046e0:	8b bc 24 90 01 00 00 	mov    edi,DWORD PTR [esp+0x190]
100046e7:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
100046ed:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
100046f3:	8d 4a 20             	lea    ecx,[edx+0x20]
100046f6:	6a 00                	push   0x0
100046f8:	51                   	push   ecx
100046f9:	52                   	push   edx
100046fa:	8d 50 20             	lea    edx,[eax+0x20]
100046fd:	52                   	push   edx
100046fe:	50                   	push   eax
100046ff:	53                   	push   ebx
10004700:	e8 fc ff ff ff       	call   10004701 <NIDesktop::handleMouse(int, int, int, int)+0x39>	10004701: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004705:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
1000470b:	8b 8b 1c 04 00 00    	mov    ecx,DWORD PTR [ebx+0x41c]
10004711:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10004715:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
10004719:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
1000471f:	8b 8c 24 ac 01 00 00 	mov    ecx,DWORD PTR [esp+0x1ac]
10004726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000472a:	89 8b 1c 04 00 00    	mov    DWORD PTR [ebx+0x41c],ecx
10004730:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10004734:	8d 14 30             	lea    edx,[eax+esi*1]
10004737:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
1000473b:	89 93 14 04 00 00    	mov    DWORD PTR [ebx+0x414],edx
10004741:	01 f8                	add    eax,edi
10004743:	83 c4 20             	add    esp,0x20
10004746:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
1000474c:	85 d2                	test   edx,edx
1000474e:	79 0a                	jns    1000475a <NIDesktop::handleMouse(int, int, int, int)+0x92>
10004750:	c7 83 14 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x414],0x0
1000475a:	85 c0                	test   eax,eax
1000475c:	79 0a                	jns    10004768 <NIDesktop::handleMouse(int, int, int, int)+0xa0>
1000475e:	c7 83 18 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x418],0x0
10004768:	8b 13                	mov    edx,DWORD PTR [ebx]
1000476a:	8b 82 0c 04 00 00    	mov    eax,DWORD PTR [edx+0x40c]
10004770:	3b 83 14 04 00 00    	cmp    eax,DWORD PTR [ebx+0x414]
10004776:	7f 07                	jg     1000477f <NIDesktop::handleMouse(int, int, int, int)+0xb7>
10004778:	48                   	dec    eax
10004779:	89 83 14 04 00 00    	mov    DWORD PTR [ebx+0x414],eax
1000477f:	8b 82 10 04 00 00    	mov    eax,DWORD PTR [edx+0x410]
10004785:	3b 83 18 04 00 00    	cmp    eax,DWORD PTR [ebx+0x418]
1000478b:	7f 07                	jg     10004794 <NIDesktop::handleMouse(int, int, int, int)+0xcc>
1000478d:	48                   	dec    eax
1000478e:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
10004794:	55                   	push   ebp
10004795:	ff b3 18 04 00 00    	push   DWORD PTR [ebx+0x418]
1000479b:	ff b3 14 04 00 00    	push   DWORD PTR [ebx+0x414]
100047a1:	53                   	push   ebx
100047a2:	e8 fc ff ff ff       	call   100047a3 <NIDesktop::handleMouse(int, int, int, int)+0xdb>	100047a3: R_386_PC32	NIDesktop::getTopmostWindowAtPixel(int, int)
100047a7:	83 c4 10             	add    esp,0x10
100047aa:	89 04 24             	mov    DWORD PTR [esp],eax
100047ad:	8b 84 24 8c 01 00 00 	mov    eax,DWORD PTR [esp+0x18c]
100047b4:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
100047b7:	83 e0 01             	and    eax,0x1
100047ba:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
100047be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100047c2:	0f 85 fe 0c 00 00    	jne    100054c6 <NIDesktop::handleMouse(int, int, int, int)+0xdfe>
100047c8:	8b 2d 00 00 00 00    	mov    ebp,DWORD PTR ds:0x0	100047ca: R_386_32	prevClickon
100047ce:	85 ed                	test   ebp,ebp
100047d0:	0f 85 f0 0c 00 00    	jne    100054c6 <NIDesktop::handleMouse(int, int, int, int)+0xdfe>
100047d6:	8b 2d 00 00 00 00    	mov    ebp,DWORD PTR ds:0x0	100047d8: R_386_32	desktopWindowDummy
100047dc:	85 ed                	test   ebp,ebp
100047de:	0f 84 6b 02 00 00    	je     10004a4f <NIDesktop::handleMouse(int, int, int, int)+0x387>
100047e4:	09 fe                	or     esi,edi
100047e6:	74 72                	je     1000485a <NIDesktop::handleMouse(int, int, int, int)+0x192>
100047e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
100047ed:	0f 84 e8 00 00 00    	je     100048db <NIDesktop::handleMouse(int, int, int, int)+0x213>
100047f3:	8b 84 24 ec 00 00 00 	mov    eax,DWORD PTR [esp+0xec]
100047fa:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100047fc: R_386_32	mouseDesktop
10004800:	89 ac 24 e8 00 00 00 	mov    DWORD PTR [esp+0xe8],ebp
10004807:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
1000480d:	25 ff 1f 00 00       	and    eax,0x1fff
10004812:	66 89 8c 24 f0 00 00 00 	mov    WORD PTR [esp+0xf0],cx
1000481a:	80 cc a0             	or     ah,0xa0
1000481d:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10004823:	89 84 24 ec 00 00 00 	mov    DWORD PTR [esp+0xec],eax
1000482a:	66 89 8c 24 f2 00 00 00 	mov    WORD PTR [esp+0xf2],cx
10004832:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10004838:	66 25 00 bc          	and    ax,0xbc00
1000483c:	66 81 e2 ff 03       	and    dx,0x3ff
10004841:	83 ec 1c             	sub    esp,0x1c
10004844:	09 d0                	or     eax,edx
10004846:	66 89 84 24 08 01 00 00 	mov    WORD PTR [esp+0x108],ax
1000484e:	8d b4 24 04 01 00 00 	lea    esi,[esp+0x104]
10004855:	e9 ea 00 00 00       	jmp    10004944 <NIDesktop::handleMouse(int, int, int, int)+0x27c>
1000485a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000485e:	83 e0 01             	and    eax,0x1
10004861:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
10004866:	74 73                	je     100048db <NIDesktop::handleMouse(int, int, int, int)+0x213>
10004868:	85 c0                	test   eax,eax
1000486a:	0f 85 e6 00 00 00    	jne    10004956 <NIDesktop::handleMouse(int, int, int, int)+0x28e>
10004870:	8b 84 24 04 01 00 00 	mov    eax,DWORD PTR [esp+0x104]
10004877:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004879: R_386_32	mouseDesktop
1000487d:	89 ac 24 00 01 00 00 	mov    DWORD PTR [esp+0x100],ebp
10004884:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
1000488a:	25 ff 1f 00 00       	and    eax,0x1fff
1000488f:	66 89 8c 24 08 01 00 00 	mov    WORD PTR [esp+0x108],cx
10004897:	80 cc c0             	or     ah,0xc0
1000489a:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100048a0:	89 84 24 04 01 00 00 	mov    DWORD PTR [esp+0x104],eax
100048a7:	66 89 8c 24 0a 01 00 00 	mov    WORD PTR [esp+0x10a],cx
100048af:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100048b5:	66 25 00 dc          	and    ax,0xdc00
100048b9:	66 81 e2 ff 03       	and    dx,0x3ff
100048be:	83 ec 1c             	sub    esp,0x1c
100048c1:	09 d0                	or     eax,edx
100048c3:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100048c5: R_386_32	desktopHasFocus
100048ca:	66 89 84 24 20 01 00 00 	mov    WORD PTR [esp+0x120],ax
100048d2:	8d b4 24 1c 01 00 00 	lea    esi,[esp+0x11c]
100048d9:	eb 69                	jmp    10004944 <NIDesktop::handleMouse(int, int, int, int)+0x27c>
100048db:	f6 44 24 0c 01       	test   BYTE PTR [esp+0xc],0x1
100048e0:	74 74                	je     10004956 <NIDesktop::handleMouse(int, int, int, int)+0x28e>
100048e2:	8b 84 24 1c 01 00 00 	mov    eax,DWORD PTR [esp+0x11c]
100048e9:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100048eb: R_386_32	mouseDesktop
100048ef:	89 ac 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],ebp
100048f6:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
100048fc:	25 ff 1f 00 00       	and    eax,0x1fff
10004901:	66 89 8c 24 20 01 00 00 	mov    WORD PTR [esp+0x120],cx
10004909:	80 cc e0             	or     ah,0xe0
1000490c:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10004912:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
10004919:	66 89 8c 24 22 01 00 00 	mov    WORD PTR [esp+0x122],cx
10004921:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10004927:	66 25 00 fc          	and    ax,0xfc00
1000492b:	66 81 e2 ff 03       	and    dx,0x3ff
10004930:	83 ec 1c             	sub    esp,0x1c
10004933:	09 d0                	or     eax,edx
10004935:	66 89 84 24 38 01 00 00 	mov    WORD PTR [esp+0x138],ax
1000493d:	8d b4 24 34 01 00 00 	lea    esi,[esp+0x134]
10004944:	89 e7                	mov    edi,esp
10004946:	b9 06 00 00 00       	mov    ecx,0x6
1000494b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000494d:	55                   	push   ebp
1000494e:	e8 fc ff ff ff       	call   1000494f <NIDesktop::handleMouse(int, int, int, int)+0x287>	1000494f: R_386_PC32	NIWindow::postEvent(NiEvent)
10004953:	83 c4 20             	add    esp,0x20
10004956:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000495a:	83 e0 02             	and    eax,0x2
1000495d:	f6 84 24 8c 01 00 00 02 	test   BYTE PTR [esp+0x18c],0x2
10004965:	74 6e                	je     100049d5 <NIDesktop::handleMouse(int, int, int, int)+0x30d>
10004967:	85 c0                	test   eax,eax
10004969:	0f 85 e0 00 00 00    	jne    10004a4f <NIDesktop::handleMouse(int, int, int, int)+0x387>
1000496f:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
10004976:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004978: R_386_32	mouseDesktop
1000497c:	89 ac 24 30 01 00 00 	mov    DWORD PTR [esp+0x130],ebp
10004983:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10004989:	25 ff 1f 00 00       	and    eax,0x1fff
1000498e:	66 89 8c 24 38 01 00 00 	mov    WORD PTR [esp+0x138],cx
10004996:	0d 00 40 01 00       	or     eax,0x14000
1000499b:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100049a1:	89 84 24 34 01 00 00 	mov    DWORD PTR [esp+0x134],eax
100049a8:	66 89 8c 24 3a 01 00 00 	mov    WORD PTR [esp+0x13a],cx
100049b0:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100049b6:	66 25 00 5c          	and    ax,0x5c00
100049ba:	66 81 e2 ff 03       	and    dx,0x3ff
100049bf:	83 ec 1c             	sub    esp,0x1c
100049c2:	09 d0                	or     eax,edx
100049c4:	66 89 84 24 50 01 00 00 	mov    WORD PTR [esp+0x150],ax
100049cc:	8d b4 24 4c 01 00 00 	lea    esi,[esp+0x14c]
100049d3:	eb 68                	jmp    10004a3d <NIDesktop::handleMouse(int, int, int, int)+0x375>
100049d5:	85 c0                	test   eax,eax
100049d7:	74 76                	je     10004a4f <NIDesktop::handleMouse(int, int, int, int)+0x387>
100049d9:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
100049e0:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100049e2: R_386_32	mouseDesktop
100049e6:	89 ac 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebp
100049ed:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
100049f3:	25 ff 1f 00 00       	and    eax,0x1fff
100049f8:	66 89 8c 24 50 01 00 00 	mov    WORD PTR [esp+0x150],cx
10004a00:	0d 00 60 01 00       	or     eax,0x16000
10004a05:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10004a0b:	89 84 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],eax
10004a12:	66 89 8c 24 52 01 00 00 	mov    WORD PTR [esp+0x152],cx
10004a1a:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10004a20:	66 25 00 7c          	and    ax,0x7c00
10004a24:	66 81 e2 ff 03       	and    dx,0x3ff
10004a29:	83 ec 1c             	sub    esp,0x1c
10004a2c:	09 d0                	or     eax,edx
10004a2e:	66 89 84 24 68 01 00 00 	mov    WORD PTR [esp+0x168],ax
10004a36:	8d b4 24 64 01 00 00 	lea    esi,[esp+0x164]
10004a3d:	89 e7                	mov    edi,esp
10004a3f:	b9 06 00 00 00       	mov    ecx,0x6
10004a44:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004a46:	55                   	push   ebp
10004a47:	e8 fc ff ff ff       	call   10004a48 <NIDesktop::handleMouse(int, int, int, int)+0x380>	10004a48: R_386_PC32	NIWindow::postEvent(NiEvent)
10004a4c:	83 c4 20             	add    esp,0x20
10004a4f:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004a51: R_386_32	movingWin
10004a56:	0f 84 2b 02 00 00    	je     10004c87 <NIDesktop::handleMouse(int, int, int, int)+0x5bf>
10004a5c:	83 3d 00 00 00 00 01 	cmp    DWORD PTR ds:0x0,0x1	10004a5e: R_386_32	movingType
10004a63:	0f 85 1e 02 00 00    	jne    10004c87 <NIDesktop::handleMouse(int, int, int, int)+0x5bf>
10004a69:	c6 44 24 0c 00       	mov    BYTE PTR [esp+0xc],0x0
10004a6e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
10004a73:	75 0c                	jne    10004a81 <NIDesktop::handleMouse(int, int, int, int)+0x3b9>
10004a75:	a0 d8 a1 03 10       	mov    al,ds:0x1003a1d8	10004a76: R_386_32	.bss
10004a7a:	83 e0 01             	and    eax,0x1
10004a7d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
10004a81:	bf 01 00 00 00       	mov    edi,0x1
10004a86:	8b 2d 00 00 00 00    	mov    ebp,DWORD PTR ds:0x0	10004a88: R_386_32	movingWin
10004a8c:	8b 85 74 02 00 00    	mov    eax,DWORD PTR [ebp+0x274]
10004a92:	48                   	dec    eax
10004a93:	39 f8                	cmp    eax,edi
10004a95:	0f 8e c3 00 00 00    	jle    10004b5e <NIDesktop::handleMouse(int, int, int, int)+0x496>
10004a9b:	89 f8                	mov    eax,edi
10004a9d:	be 01 00 00 00       	mov    esi,0x1
10004aa2:	83 e0 07             	and    eax,0x7
10004aa5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10004aa9:	a1 00 00 00 00       	mov    eax,ds:0x0	10004aaa: R_386_32	movingWin
10004aae:	8b 80 70 02 00 00    	mov    eax,DWORD PTR [eax+0x270]
10004ab4:	48                   	dec    eax
10004ab5:	39 f0                	cmp    eax,esi
10004ab7:	0f 8e 9b 00 00 00    	jle    10004b58 <NIDesktop::handleMouse(int, int, int, int)+0x490>
10004abd:	8d 04 37             	lea    eax,[edi+esi*1]
10004ac0:	83 e0 3f             	and    eax,0x3f
10004ac3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
10004ac7:	0f 85 85 00 00 00    	jne    10004b52 <NIDesktop::handleMouse(int, int, int, int)+0x48a>
10004acd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004ad1:	2b 05 d4 a1 03 10    	sub    eax,DWORD PTR ds:0x1003a1d4	10004ad3: R_386_32	.bss
10004ad7:	01 f0                	add    eax,esi
10004ad9:	78 2d                	js     10004b08 <NIDesktop::handleMouse(int, int, int, int)+0x440>
10004adb:	8b 13                	mov    edx,DWORD PTR [ebx]
10004add:	3b 82 0c 04 00 00    	cmp    eax,DWORD PTR [edx+0x40c]
10004ae3:	7d 23                	jge    10004b08 <NIDesktop::handleMouse(int, int, int, int)+0x440>
10004ae5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10004ae9:	2b 15 d0 a1 03 10    	sub    edx,DWORD PTR ds:0x1003a1d0	10004aeb: R_386_32	.bss
10004aef:	51                   	push   ecx
10004af0:	01 fa                	add    edx,edi
10004af2:	51                   	push   ecx
10004af3:	8d 48 01             	lea    ecx,[eax+0x1]
10004af6:	6a 00                	push   0x0
10004af8:	51                   	push   ecx
10004af9:	50                   	push   eax
10004afa:	8d 42 01             	lea    eax,[edx+0x1]
10004afd:	50                   	push   eax
10004afe:	52                   	push   edx
10004aff:	53                   	push   ebx
10004b00:	e8 fc ff ff ff       	call   10004b01 <NIDesktop::handleMouse(int, int, int, int)+0x439>	10004b01: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004b05:	83 c4 20             	add    esp,0x20
10004b08:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
10004b0d:	75 43                	jne    10004b52 <NIDesktop::handleMouse(int, int, int, int)+0x48a>
10004b0f:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
10004b15:	01 f0                	add    eax,esi
10004b17:	2b 05 d4 a1 03 10    	sub    eax,DWORD PTR ds:0x1003a1d4	10004b19: R_386_32	.bss
10004b1d:	78 33                	js     10004b52 <NIDesktop::handleMouse(int, int, int, int)+0x48a>
10004b1f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
10004b21:	3b 81 0c 04 00 00    	cmp    eax,DWORD PTR [ecx+0x40c]
10004b27:	7d 29                	jge    10004b52 <NIDesktop::handleMouse(int, int, int, int)+0x48a>
10004b29:	8b 93 18 04 00 00    	mov    edx,DWORD PTR [ebx+0x418]
10004b2f:	01 fa                	add    edx,edi
10004b31:	2b 15 d0 a1 03 10    	sub    edx,DWORD PTR ds:0x1003a1d0	10004b33: R_386_32	.bss
10004b37:	3b 91 10 04 00 00    	cmp    edx,DWORD PTR [ecx+0x410]
10004b3d:	7d 13                	jge    10004b52 <NIDesktop::handleMouse(int, int, int, int)+0x48a>
10004b3f:	8b 89 08 04 00 00    	mov    ecx,DWORD PTR [ecx+0x408]
10004b45:	8b 29                	mov    ebp,DWORD PTR [ecx]
10004b47:	6a 00                	push   0x0
10004b49:	52                   	push   edx
10004b4a:	50                   	push   eax
10004b4b:	51                   	push   ecx
10004b4c:	ff 55 24             	call   DWORD PTR [ebp+0x24]
10004b4f:	83 c4 10             	add    esp,0x10
10004b52:	46                   	inc    esi
10004b53:	e9 51 ff ff ff       	jmp    10004aa9 <NIDesktop::handleMouse(int, int, int, int)+0x3e1>
10004b58:	47                   	inc    edi
10004b59:	e9 28 ff ff ff       	jmp    10004a86 <NIDesktop::handleMouse(int, int, int, int)+0x3be>
10004b5e:	8b 0d d4 a1 03 10    	mov    ecx,DWORD PTR ds:0x1003a1d4	10004b60: R_386_32	.bss
10004b64:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
10004b6a:	29 c8                	sub    eax,ecx
10004b6c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
10004b71:	0f 85 c1 08 00 00    	jne    10005438 <NIDesktop::handleMouse(int, int, int, int)+0xd70>
10004b77:	89 c2                	mov    edx,eax
10004b79:	85 c0                	test   eax,eax
10004b7b:	79 02                	jns    10004b7f <NIDesktop::handleMouse(int, int, int, int)+0x4b7>
10004b7d:	31 d2                	xor    edx,edx
10004b7f:	8b b5 70 02 00 00    	mov    esi,DWORD PTR [ebp+0x270]
10004b85:	8d 2c 06             	lea    ebp,[esi+eax*1]
10004b88:	8b 03                	mov    eax,DWORD PTR [ebx]
10004b8a:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
10004b90:	39 c5                	cmp    ebp,eax
10004b92:	7d 04                	jge    10004b98 <NIDesktop::handleMouse(int, int, int, int)+0x4d0>
10004b94:	29 d5                	sub    ebp,edx
10004b96:	eb 0a                	jmp    10004ba2 <NIDesktop::handleMouse(int, int, int, int)+0x4da>
10004b98:	89 c5                	mov    ebp,eax
10004b9a:	29 d5                	sub    ebp,edx
10004b9c:	0f 88 e5 00 00 00    	js     10004c87 <NIDesktop::handleMouse(int, int, int, int)+0x5bf>
10004ba2:	85 ed                	test   ebp,ebp
10004ba4:	0f 84 dd 00 00 00    	je     10004c87 <NIDesktop::handleMouse(int, int, int, int)+0x5bf>
10004baa:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10004bae:	29 cf                	sub    edi,ecx
10004bb0:	89 f9                	mov    ecx,edi
10004bb2:	79 02                	jns    10004bb6 <NIDesktop::handleMouse(int, int, int, int)+0x4ee>
10004bb4:	31 ff                	xor    edi,edi
10004bb6:	01 ce                	add    esi,ecx
10004bb8:	39 f0                	cmp    eax,esi
10004bba:	7e 04                	jle    10004bc0 <NIDesktop::handleMouse(int, int, int, int)+0x4f8>
10004bbc:	29 fe                	sub    esi,edi
10004bbe:	eb 08                	jmp    10004bc8 <NIDesktop::handleMouse(int, int, int, int)+0x500>
10004bc0:	29 f8                	sub    eax,edi
10004bc2:	89 c6                	mov    esi,eax
10004bc4:	79 02                	jns    10004bc8 <NIDesktop::handleMouse(int, int, int, int)+0x500>
10004bc6:	31 f6                	xor    esi,esi
10004bc8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10004bcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004bd0:	01 fe                	add    esi,edi
10004bd2:	2b 05 d0 a1 03 10    	sub    eax,DWORD PTR ds:0x1003a1d0	10004bd4: R_386_32	.bss
10004bd8:	8d 48 01             	lea    ecx,[eax+0x1]
10004bdb:	52                   	push   edx
10004bdc:	52                   	push   edx
10004bdd:	6a 00                	push   0x0
10004bdf:	56                   	push   esi
10004be0:	57                   	push   edi
10004be1:	51                   	push   ecx
10004be2:	50                   	push   eax
10004be3:	53                   	push   ebx
10004be4:	e8 fc ff ff ff       	call   10004be5 <NIDesktop::handleMouse(int, int, int, int)+0x51d>	10004be5: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004be9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004bed:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004bef: R_386_32	movingWin
10004bf3:	83 c4 18             	add    esp,0x18
10004bf6:	2b 05 d0 a1 03 10    	sub    eax,DWORD PTR ds:0x1003a1d0	10004bf8: R_386_32	.bss
10004bfc:	03 81 74 02 00 00    	add    eax,DWORD PTR [ecx+0x274]
10004c02:	6a 00                	push   0x0
10004c04:	56                   	push   esi
10004c05:	57                   	push   edi
10004c06:	50                   	push   eax
10004c07:	48                   	dec    eax
10004c08:	50                   	push   eax
10004c09:	53                   	push   ebx
10004c0a:	e8 fc ff ff ff       	call   10004c0b <NIDesktop::handleMouse(int, int, int, int)+0x543>	10004c0b: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004c0f:	83 c4 20             	add    esp,0x20
10004c12:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10004c18:	8b 0b                	mov    ecx,DWORD PTR [ebx]
10004c1a:	2b 05 d0 a1 03 10    	sub    eax,DWORD PTR ds:0x1003a1d0	10004c1c: R_386_32	.bss
10004c20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10004c24:	3b 81 10 04 00 00    	cmp    eax,DWORD PTR [ecx+0x410]
10004c2a:	7d 20                	jge    10004c4c <NIDesktop::handleMouse(int, int, int, int)+0x584>
10004c2c:	8b 89 08 04 00 00    	mov    ecx,DWORD PTR [ecx+0x408]
10004c32:	57                   	push   edi
10004c33:	57                   	push   edi
10004c34:	8b 31                	mov    esi,DWORD PTR [ecx]
10004c36:	6a 00                	push   0x0
10004c38:	6a 01                	push   0x1
10004c3a:	55                   	push   ebp
10004c3b:	50                   	push   eax
10004c3c:	52                   	push   edx
10004c3d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
10004c41:	51                   	push   ecx
10004c42:	ff 56 28             	call   DWORD PTR [esi+0x28]
10004c45:	83 c4 20             	add    esp,0x20
10004c48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10004c4c:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004c4e: R_386_32	movingWin
10004c52:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10004c58:	2b 05 d0 a1 03 10    	sub    eax,DWORD PTR ds:0x1003a1d0	10004c5a: R_386_32	.bss
10004c5e:	03 81 74 02 00 00    	add    eax,DWORD PTR [ecx+0x274]
10004c64:	8b 0b                	mov    ecx,DWORD PTR [ebx]
10004c66:	3b 81 10 04 00 00    	cmp    eax,DWORD PTR [ecx+0x410]
10004c6c:	7f 19                	jg     10004c87 <NIDesktop::handleMouse(int, int, int, int)+0x5bf>
10004c6e:	8b 89 08 04 00 00    	mov    ecx,DWORD PTR [ecx+0x408]
10004c74:	48                   	dec    eax
10004c75:	56                   	push   esi
10004c76:	56                   	push   esi
10004c77:	8b 31                	mov    esi,DWORD PTR [ecx]
10004c79:	6a 00                	push   0x0
10004c7b:	6a 01                	push   0x1
10004c7d:	55                   	push   ebp
10004c7e:	50                   	push   eax
10004c7f:	52                   	push   edx
10004c80:	51                   	push   ecx
10004c81:	ff 56 28             	call   DWORD PTR [esi+0x28]
10004c84:	83 c4 20             	add    esp,0x20
10004c87:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c88: R_386_32	movingWin
10004c8c:	85 c0                	test   eax,eax
10004c8e:	0f 84 57 03 00 00    	je     10004feb <NIDesktop::handleMouse(int, int, int, int)+0x923>
10004c94:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	10004c96: R_386_32	movingType
10004c9a:	8d 57 fe             	lea    edx,[edi-0x2]
10004c9d:	83 fa 02             	cmp    edx,0x2
10004ca0:	0f 87 45 03 00 00    	ja     10004feb <NIDesktop::handleMouse(int, int, int, int)+0x923>
10004ca6:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
10004cab:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
10004cb0:	75 0d                	jne    10004cbf <NIDesktop::handleMouse(int, int, int, int)+0x5f7>
10004cb2:	8a 0d d8 a1 03 10    	mov    cl,BYTE PTR ds:0x1003a1d8	10004cb4: R_386_32	.bss
10004cb8:	83 e1 01             	and    ecx,0x1
10004cbb:	88 4c 24 14          	mov    BYTE PTR [esp+0x14],cl
10004cbf:	8b 88 70 02 00 00    	mov    ecx,DWORD PTR [eax+0x270]
10004cc5:	8b b0 74 02 00 00    	mov    esi,DWORD PTR [eax+0x274]
10004ccb:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
10004ccf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004cd3:	01 cd                	add    ebp,ecx
10004cd5:	01 f0                	add    eax,esi
10004cd7:	2b 2d d4 a1 03 10    	sub    ebp,DWORD PTR ds:0x1003a1d4	10004cd9: R_386_32	.bss
10004cdd:	2b 05 d0 a1 03 10    	sub    eax,DWORD PTR ds:0x1003a1d0	10004cdf: R_386_32	.bss
10004ce3:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
10004ce9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004ced:	01 ca                	add    edx,ecx
10004cef:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10004cf5:	2b 15 d4 a1 03 10    	sub    edx,DWORD PTR ds:0x1003a1d4	10004cf7: R_386_32	.bss
10004cfb:	01 f0                	add    eax,esi
10004cfd:	2b 05 d0 a1 03 10    	sub    eax,DWORD PTR ds:0x1003a1d0	10004cff: R_386_32	.bss
10004d03:	83 ff 03             	cmp    edi,0x3
10004d06:	74 0d                	je     10004d15 <NIDesktop::handleMouse(int, int, int, int)+0x64d>
10004d08:	83 ff 04             	cmp    edi,0x4
10004d0b:	75 0c                	jne    10004d19 <NIDesktop::handleMouse(int, int, int, int)+0x651>
10004d0d:	89 f0                	mov    eax,esi
10004d0f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
10004d13:	eb 04                	jmp    10004d19 <NIDesktop::handleMouse(int, int, int, int)+0x651>
10004d15:	89 ca                	mov    edx,ecx
10004d17:	89 cd                	mov    ebp,ecx
10004d19:	89 d7                	mov    edi,edx
10004d1b:	83 fa 32             	cmp    edx,0x32
10004d1e:	7d 05                	jge    10004d25 <NIDesktop::handleMouse(int, int, int, int)+0x65d>
10004d20:	bf 32 00 00 00       	mov    edi,0x32
10004d25:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10004d29:	83 f8 32             	cmp    eax,0x32
10004d2c:	7d 08                	jge    10004d36 <NIDesktop::handleMouse(int, int, int, int)+0x66e>
10004d2e:	c7 44 24 04 32 00 00 00 	mov    DWORD PTR [esp+0x4],0x32
10004d36:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
10004d3a:	83 fd 32             	cmp    ebp,0x32
10004d3d:	7d 08                	jge    10004d47 <NIDesktop::handleMouse(int, int, int, int)+0x67f>
10004d3f:	c7 44 24 0c 32 00 00 00 	mov    DWORD PTR [esp+0xc],0x32
10004d47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004d4b:	83 f8 32             	cmp    eax,0x32
10004d4e:	7d 08                	jge    10004d58 <NIDesktop::handleMouse(int, int, int, int)+0x690>
10004d50:	c7 44 24 08 32 00 00 00 	mov    DWORD PTR [esp+0x8],0x32
10004d58:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
10004d5c:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
10004d60:	7d 08                	jge    10004d6a <NIDesktop::handleMouse(int, int, int, int)+0x6a2>
10004d62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004d66:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10004d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004d6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004d72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
10004d76:	7d 08                	jge    10004d80 <NIDesktop::handleMouse(int, int, int, int)+0x6b8>
10004d78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004d7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004d80:	be 01 00 00 00       	mov    esi,0x1
10004d85:	bd 01 00 00 00       	mov    ebp,0x1
10004d8a:	8d 04 2e             	lea    eax,[esi+ebp*1]
10004d8d:	89 f2                	mov    edx,esi
10004d8f:	83 e0 3f             	and    eax,0x3f
10004d92:	83 e2 07             	and    edx,0x7
10004d95:	09 d0                	or     eax,edx
10004d97:	0f 85 a1 00 00 00    	jne    10004e3e <NIDesktop::handleMouse(int, int, int, int)+0x776>
10004d9d:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004d9f: R_386_32	movingWin
10004da3:	8b 81 68 02 00 00    	mov    eax,DWORD PTR [ecx+0x268]
10004da9:	89 c2                	mov    edx,eax
10004dab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10004daf:	01 ea                	add    edx,ebp
10004db1:	78 2f                	js     10004de2 <NIDesktop::handleMouse(int, int, int, int)+0x71a>
10004db3:	8b 03                	mov    eax,DWORD PTR [ebx]
10004db5:	3b 90 0c 04 00 00    	cmp    edx,DWORD PTR [eax+0x40c]
10004dbb:	7d 25                	jge    10004de2 <NIDesktop::handleMouse(int, int, int, int)+0x71a>
10004dbd:	8b 89 6c 02 00 00    	mov    ecx,DWORD PTR [ecx+0x26c]
10004dc3:	50                   	push   eax
10004dc4:	50                   	push   eax
10004dc5:	6a 00                	push   0x0
10004dc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10004dcb:	8d 44 28 01          	lea    eax,[eax+ebp*1+0x1]
10004dcf:	50                   	push   eax
10004dd0:	8d 44 31 01          	lea    eax,[ecx+esi*1+0x1]
10004dd4:	52                   	push   edx
10004dd5:	01 f1                	add    ecx,esi
10004dd7:	50                   	push   eax
10004dd8:	51                   	push   ecx
10004dd9:	53                   	push   ebx
10004dda:	e8 fc ff ff ff       	call   10004ddb <NIDesktop::handleMouse(int, int, int, int)+0x713>	10004ddb: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004ddf:	83 c4 20             	add    esp,0x20
10004de2:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
10004de6:	83 f2 01             	xor    edx,0x1
10004de9:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
10004ded:	0f 9f c0             	setg   al
10004df0:	84 c2                	test   dl,al
10004df2:	74 4a                	je     10004e3e <NIDesktop::handleMouse(int, int, int, int)+0x776>
10004df4:	39 ef                	cmp    edi,ebp
10004df6:	7e 46                	jle    10004e3e <NIDesktop::handleMouse(int, int, int, int)+0x776>
10004df8:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004dfa: R_386_32	movingWin
10004dfe:	89 ea                	mov    edx,ebp
10004e00:	03 91 68 02 00 00    	add    edx,DWORD PTR [ecx+0x268]
10004e06:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10004e0a:	78 32                	js     10004e3e <NIDesktop::handleMouse(int, int, int, int)+0x776>
10004e0c:	8b 03                	mov    eax,DWORD PTR [ebx]
10004e0e:	3b 90 0c 04 00 00    	cmp    edx,DWORD PTR [eax+0x40c]
10004e14:	7d 28                	jge    10004e3e <NIDesktop::handleMouse(int, int, int, int)+0x776>
10004e16:	8b 91 6c 02 00 00    	mov    edx,DWORD PTR [ecx+0x26c]
10004e1c:	01 f2                	add    edx,esi
10004e1e:	89 d1                	mov    ecx,edx
10004e20:	3b 90 10 04 00 00    	cmp    edx,DWORD PTR [eax+0x410]
10004e26:	7d 16                	jge    10004e3e <NIDesktop::handleMouse(int, int, int, int)+0x776>
10004e28:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004e2e:	8b 10                	mov    edx,DWORD PTR [eax]
10004e30:	6a 00                	push   0x0
10004e32:	51                   	push   ecx
10004e33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10004e37:	50                   	push   eax
10004e38:	ff 52 24             	call   DWORD PTR [edx+0x24]
10004e3b:	83 c4 10             	add    esp,0x10
10004e3e:	45                   	inc    ebp
10004e3f:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
10004e43:	0f 85 41 ff ff ff    	jne    10004d8a <NIDesktop::handleMouse(int, int, int, int)+0x6c2>
10004e49:	46                   	inc    esi
10004e4a:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
10004e4e:	0f 85 31 ff ff ff    	jne    10004d85 <NIDesktop::handleMouse(int, int, int, int)+0x6bd>
10004e54:	8b 2d 00 00 00 00    	mov    ebp,DWORD PTR ds:0x0	10004e56: R_386_32	movingWin
10004e5a:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
10004e5f:	0f 85 2a 05 00 00    	jne    1000538f <NIDesktop::handleMouse(int, int, int, int)+0xcc7>
10004e65:	8b 95 68 02 00 00    	mov    edx,DWORD PTR [ebp+0x268]
10004e6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004e6f:	85 d2                	test   edx,edx
10004e71:	8d 0c 02             	lea    ecx,[edx+eax*1]
10004e74:	8b 85 6c 02 00 00    	mov    eax,DWORD PTR [ebp+0x26c]
10004e7a:	8d 70 01             	lea    esi,[eax+0x1]
10004e7d:	0f 89 b9 00 00 00    	jns    10004f3c <NIDesktop::handleMouse(int, int, int, int)+0x874>
10004e83:	55                   	push   ebp
10004e84:	55                   	push   ebp
10004e85:	6a 00                	push   0x0
10004e87:	51                   	push   ecx
10004e88:	6a 00                	push   0x0
10004e8a:	56                   	push   esi
10004e8b:	50                   	push   eax
10004e8c:	53                   	push   ebx
10004e8d:	e8 fc ff ff ff       	call   10004e8e <NIDesktop::handleMouse(int, int, int, int)+0x7c6>	10004e8e: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004e92:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004e94: R_386_32	movingWin
10004e98:	8b 03                	mov    eax,DWORD PTR [ebx]
10004e9a:	8b 91 6c 02 00 00    	mov    edx,DWORD PTR [ecx+0x26c]
10004ea0:	83 c4 20             	add    esp,0x20
10004ea3:	3b 90 10 04 00 00    	cmp    edx,DWORD PTR [eax+0x410]
10004ea9:	7d 21                	jge    10004ecc <NIDesktop::handleMouse(int, int, int, int)+0x804>
10004eab:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004eb1:	56                   	push   esi
10004eb2:	56                   	push   esi
10004eb3:	8b 30                	mov    esi,DWORD PTR [eax]
10004eb5:	6a 00                	push   0x0
10004eb7:	6a 01                	push   0x1
10004eb9:	8b a9 68 02 00 00    	mov    ebp,DWORD PTR [ecx+0x268]
10004ebf:	01 fd                	add    ebp,edi
10004ec1:	55                   	push   ebp
10004ec2:	52                   	push   edx
10004ec3:	6a 00                	push   0x0
10004ec5:	50                   	push   eax
10004ec6:	ff 56 28             	call   DWORD PTR [esi+0x28]
10004ec9:	83 c4 20             	add    esp,0x20
10004ecc:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004ece: R_386_32	movingWin
10004ed2:	8b 82 6c 02 00 00    	mov    eax,DWORD PTR [edx+0x26c]
10004ed8:	55                   	push   ebp
10004ed9:	55                   	push   ebp
10004eda:	6a 00                	push   0x0
10004edc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
10004ee0:	03 aa 68 02 00 00    	add    ebp,DWORD PTR [edx+0x268]
10004ee6:	55                   	push   ebp
10004ee7:	6a 00                	push   0x0
10004ee9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
10004eed:	8d 54 30 01          	lea    edx,[eax+esi*1+0x1]
10004ef1:	52                   	push   edx
10004ef2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
10004ef6:	50                   	push   eax
10004ef7:	53                   	push   ebx
10004ef8:	e8 fc ff ff ff       	call   10004ef9 <NIDesktop::handleMouse(int, int, int, int)+0x831>	10004ef9: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004efd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004f01:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004f03: R_386_32	movingWin
10004f07:	8b 0b                	mov    ecx,DWORD PTR [ebx]
10004f09:	03 82 6c 02 00 00    	add    eax,DWORD PTR [edx+0x26c]
10004f0f:	83 c4 20             	add    esp,0x20
10004f12:	3b 81 10 04 00 00    	cmp    eax,DWORD PTR [ecx+0x410]
10004f18:	0f 8d cd 00 00 00    	jge    10004feb <NIDesktop::handleMouse(int, int, int, int)+0x923>
10004f1e:	8b 89 08 04 00 00    	mov    ecx,DWORD PTR [ecx+0x408]
10004f24:	56                   	push   esi
10004f25:	56                   	push   esi
10004f26:	8b 31                	mov    esi,DWORD PTR [ecx]
10004f28:	6a 00                	push   0x0
10004f2a:	6a 01                	push   0x1
10004f2c:	03 ba 68 02 00 00    	add    edi,DWORD PTR [edx+0x268]
10004f32:	57                   	push   edi
10004f33:	50                   	push   eax
10004f34:	6a 00                	push   0x0
10004f36:	51                   	push   ecx
10004f37:	e9 a9 00 00 00       	jmp    10004fe5 <NIDesktop::handleMouse(int, int, int, int)+0x91d>
10004f3c:	55                   	push   ebp
10004f3d:	55                   	push   ebp
10004f3e:	6a 00                	push   0x0
10004f40:	51                   	push   ecx
10004f41:	52                   	push   edx
10004f42:	56                   	push   esi
10004f43:	50                   	push   eax
10004f44:	53                   	push   ebx
10004f45:	e8 fc ff ff ff       	call   10004f46 <NIDesktop::handleMouse(int, int, int, int)+0x87e>	10004f46: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004f4a:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004f4c: R_386_32	movingWin
10004f50:	8b 03                	mov    eax,DWORD PTR [ebx]
10004f52:	8b 8a 6c 02 00 00    	mov    ecx,DWORD PTR [edx+0x26c]
10004f58:	83 c4 20             	add    esp,0x20
10004f5b:	3b 88 10 04 00 00    	cmp    ecx,DWORD PTR [eax+0x410]
10004f61:	7d 1d                	jge    10004f80 <NIDesktop::handleMouse(int, int, int, int)+0x8b8>
10004f63:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004f69:	56                   	push   esi
10004f6a:	56                   	push   esi
10004f6b:	8b 30                	mov    esi,DWORD PTR [eax]
10004f6d:	6a 00                	push   0x0
10004f6f:	6a 01                	push   0x1
10004f71:	57                   	push   edi
10004f72:	51                   	push   ecx
10004f73:	ff b2 68 02 00 00    	push   DWORD PTR [edx+0x268]
10004f79:	50                   	push   eax
10004f7a:	ff 56 28             	call   DWORD PTR [esi+0x28]
10004f7d:	83 c4 20             	add    esp,0x20
10004f80:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f81: R_386_32	movingWin
10004f85:	8b 90 68 02 00 00    	mov    edx,DWORD PTR [eax+0x268]
10004f8b:	8b 80 6c 02 00 00    	mov    eax,DWORD PTR [eax+0x26c]
10004f91:	55                   	push   ebp
10004f92:	55                   	push   ebp
10004f93:	6a 00                	push   0x0
10004f95:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
10004f99:	01 d5                	add    ebp,edx
10004f9b:	55                   	push   ebp
10004f9c:	52                   	push   edx
10004f9d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
10004fa1:	8d 54 30 01          	lea    edx,[eax+esi*1+0x1]
10004fa5:	52                   	push   edx
10004fa6:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
10004faa:	50                   	push   eax
10004fab:	53                   	push   ebx
10004fac:	e8 fc ff ff ff       	call   10004fad <NIDesktop::handleMouse(int, int, int, int)+0x8e5>	10004fad: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004fb1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004fb5:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004fb7: R_386_32	movingWin
10004fbb:	8b 13                	mov    edx,DWORD PTR [ebx]
10004fbd:	03 81 6c 02 00 00    	add    eax,DWORD PTR [ecx+0x26c]
10004fc3:	83 c4 20             	add    esp,0x20
10004fc6:	3b 82 10 04 00 00    	cmp    eax,DWORD PTR [edx+0x410]
10004fcc:	7d 1d                	jge    10004feb <NIDesktop::handleMouse(int, int, int, int)+0x923>
10004fce:	8b 92 08 04 00 00    	mov    edx,DWORD PTR [edx+0x408]
10004fd4:	56                   	push   esi
10004fd5:	56                   	push   esi
10004fd6:	8b 32                	mov    esi,DWORD PTR [edx]
10004fd8:	6a 00                	push   0x0
10004fda:	6a 01                	push   0x1
10004fdc:	57                   	push   edi
10004fdd:	50                   	push   eax
10004fde:	ff b1 68 02 00 00    	push   DWORD PTR [ecx+0x268]
10004fe4:	52                   	push   edx
10004fe5:	ff 56 28             	call   DWORD PTR [esi+0x28]
10004fe8:	83 c4 20             	add    esp,0x20
10004feb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
10004fef:	0f 84 4f 03 00 00    	je     10005344 <NIDesktop::handleMouse(int, int, int, int)+0xc7c>
10004ff5:	f6 84 24 8c 01 00 00 01 	test   BYTE PTR [esp+0x18c],0x1
10004ffd:	0f 84 41 03 00 00    	je     10005344 <NIDesktop::handleMouse(int, int, int, int)+0xc7c>
10005003:	8b 04 24             	mov    eax,DWORD PTR [esp]
10005006:	39 05 00 00 00 00    	cmp    DWORD PTR ds:0x0,eax	10005008: R_386_32	clickonWhenMouseFirstClicked
1000500c:	0f 85 32 03 00 00    	jne    10005344 <NIDesktop::handleMouse(int, int, int, int)+0xc7c>
10005012:	8b 0d d8 a1 03 10    	mov    ecx,DWORD PTR ds:0x1003a1d8	10005014: R_386_32	.bss
10005018:	83 e1 01             	and    ecx,0x1
1000501b:	0f 85 b7 01 00 00    	jne    100051d8 <NIDesktop::handleMouse(int, int, int, int)+0xb10>
10005021:	a1 00 00 00 00       	mov    eax,ds:0x0	10005022: R_386_32	milliTenthsSinceBoot
10005026:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	10005028: R_386_32	milliTenthsSinceBoot
1000502c:	2b 05 c8 a1 03 10    	sub    eax,DWORD PTR ds:0x1003a1c8	1000502e: R_386_32	.bss
10005032:	be b7 0b 00 00       	mov    esi,0xbb7
10005037:	1b 15 cc a1 03 10    	sbb    edx,DWORD PTR ds:0x1003a1cc	10005039: R_386_32	.bss
1000503d:	39 c6                	cmp    esi,eax
1000503f:	19 d1                	sbb    ecx,edx
10005041:	0f 82 5b 01 00 00    	jb     100051a2 <NIDesktop::handleMouse(int, int, int, int)+0xada>
10005047:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000504a:	8b 90 6c 02 00 00    	mov    edx,DWORD PTR [eax+0x26c]
10005050:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10005056:	29 d0                	sub    eax,edx
10005058:	83 f8 18             	cmp    eax,0x18
1000505b:	0f 8f 41 01 00 00    	jg     100051a2 <NIDesktop::handleMouse(int, int, int, int)+0xada>
10005061:	8b 04 24             	mov    eax,DWORD PTR [esp]
10005064:	f6 80 90 02 00 00 01 	test   BYTE PTR [eax+0x290],0x1
1000506b:	0f 85 31 01 00 00    	jne    100051a2 <NIDesktop::handleMouse(int, int, int, int)+0xada>
10005071:	80 b8 78 02 00 00 00 	cmp    BYTE PTR [eax+0x278],0x0
10005078:	74 44                	je     100050be <NIDesktop::handleMouse(int, int, int, int)+0x9f6>
1000507a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
1000507d:	8b 80 7c 02 00 00    	mov    eax,DWORD PTR [eax+0x27c]
10005083:	89 87 68 02 00 00    	mov    DWORD PTR [edi+0x268],eax
10005089:	8b 87 80 02 00 00    	mov    eax,DWORD PTR [edi+0x280]
1000508f:	89 87 6c 02 00 00    	mov    DWORD PTR [edi+0x26c],eax
10005095:	8b 87 84 02 00 00    	mov    eax,DWORD PTR [edi+0x284]
1000509b:	89 87 70 02 00 00    	mov    DWORD PTR [edi+0x270],eax
100050a1:	8b 87 88 02 00 00    	mov    eax,DWORD PTR [edi+0x288]
100050a7:	89 87 74 02 00 00    	mov    DWORD PTR [edi+0x274],eax
100050ad:	50                   	push   eax
100050ae:	50                   	push   eax
100050af:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
100050b3:	53                   	push   ebx
100050b4:	e8 fc ff ff ff       	call   100050b5 <NIDesktop::handleMouse(int, int, int, int)+0x9ed>	100050b5: R_386_PC32	NIDesktop::invalidateAllDueToFullscreen(NIWindow*)
100050b9:	83 c4 10             	add    esp,0x10
100050bc:	eb 60                	jmp    1000511e <NIDesktop::handleMouse(int, int, int, int)+0xa56>
100050be:	8b 3c 24             	mov    edi,DWORD PTR [esp]
100050c1:	8b 04 24             	mov    eax,DWORD PTR [esp]
100050c4:	8b 80 68 02 00 00    	mov    eax,DWORD PTR [eax+0x268]
100050ca:	89 97 80 02 00 00    	mov    DWORD PTR [edi+0x280],edx
100050d0:	89 87 7c 02 00 00    	mov    DWORD PTR [edi+0x27c],eax
100050d6:	c7 87 68 02 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x268],0x0
100050e0:	c7 87 6c 02 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x26c],0x0
100050ea:	8b 87 70 02 00 00    	mov    eax,DWORD PTR [edi+0x270]
100050f0:	89 87 84 02 00 00    	mov    DWORD PTR [edi+0x284],eax
100050f6:	8b 87 74 02 00 00    	mov    eax,DWORD PTR [edi+0x274]
100050fc:	89 87 88 02 00 00    	mov    DWORD PTR [edi+0x288],eax
10005102:	8b 03                	mov    eax,DWORD PTR [ebx]
10005104:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
1000510a:	89 87 70 02 00 00    	mov    DWORD PTR [edi+0x270],eax
10005110:	8b 03                	mov    eax,DWORD PTR [ebx]
10005112:	8b 80 10 04 00 00    	mov    eax,DWORD PTR [eax+0x410]
10005118:	89 87 74 02 00 00    	mov    DWORD PTR [edi+0x274],eax
1000511e:	8b 04 24             	mov    eax,DWORD PTR [esp]
10005121:	8b 3c 24             	mov    edi,DWORD PTR [esp]
10005124:	80 b0 78 02 00 00 01 	xor    BYTE PTR [eax+0x278],0x1
1000512b:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
1000512f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10005133:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005135: R_386_32	mouseDesktop
10005139:	83 ec 1c             	sub    esp,0x1c
1000513c:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10005142:	25 ff 1f 00 00       	and    eax,0x1fff
10005147:	66 89 4c 24 4c       	mov    WORD PTR [esp+0x4c],cx
1000514c:	0d 00 80 01 80       	or     eax,0x80018000
10005151:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10005157:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
1000515b:	66 89 4c 24 4e       	mov    WORD PTR [esp+0x4e],cx
10005160:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10005166:	66 25 00 9c          	and    ax,0x9c00
1000516a:	66 81 e2 ff 03       	and    dx,0x3ff
1000516f:	b9 06 00 00 00       	mov    ecx,0x6
10005174:	09 d0                	or     eax,edx
10005176:	66 89 44 24 48       	mov    WORD PTR [esp+0x48],ax
1000517b:	8d 74 24 44          	lea    esi,[esp+0x44]
1000517f:	89 e7                	mov    edi,esp
10005181:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10005187:	e8 fc ff ff ff       	call   10005188 <NIDesktop::handleMouse(int, int, int, int)+0xac0>	10005188: R_386_PC32	NIWindow::postEvent(NiEvent)
1000518c:	83 c4 14             	add    esp,0x14
1000518f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10005193:	e8 fc ff ff ff       	call   10005194 <NIDesktop::handleMouse(int, int, int, int)+0xacc>	10005194: R_386_PC32	NIWindow::rerender()
10005198:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000519b:	e8 fc ff ff ff       	call   1000519c <NIDesktop::handleMouse(int, int, int, int)+0xad4>	1000519c: R_386_PC32	NIDesktop::completeRefresh()
100051a0:	eb 18                	jmp    100051ba <NIDesktop::handleMouse(int, int, int, int)+0xaf2>
100051a2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100051a5:	8b 3c 24             	mov    edi,DWORD PTR [esp]
100051a8:	8b 00                	mov    eax,DWORD PTR [eax]
100051aa:	39 38                	cmp    DWORD PTR [eax],edi
100051ac:	74 0f                	je     100051bd <NIDesktop::handleMouse(int, int, int, int)+0xaf5>
100051ae:	50                   	push   eax
100051af:	50                   	push   eax
100051b0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
100051b4:	53                   	push   ebx
100051b5:	e8 fc ff ff ff       	call   100051b6 <NIDesktop::handleMouse(int, int, int, int)+0xaee>	100051b6: R_386_PC32	NIDesktop::raiseWindow(NIWindow*)
100051ba:	83 c4 10             	add    esp,0x10
100051bd:	a1 00 00 00 00       	mov    eax,ds:0x0	100051be: R_386_32	milliTenthsSinceBoot
100051c2:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	100051c4: R_386_32	milliTenthsSinceBoot
100051c8:	a3 c8 a1 03 10       	mov    ds:0x1003a1c8,eax	100051c9: R_386_32	.bss
100051cd:	89 15 cc a1 03 10    	mov    DWORD PTR ds:0x1003a1cc,edx	100051cf: R_386_32	.bss
100051d3:	e9 6c 01 00 00       	jmp    10005344 <NIDesktop::handleMouse(int, int, int, int)+0xc7c>
100051d8:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100051da: R_386_32	movingWin
100051df:	0f 85 5f 01 00 00    	jne    10005344 <NIDesktop::handleMouse(int, int, int, int)+0xc7c>
100051e5:	8b 93 18 04 00 00    	mov    edx,DWORD PTR [ebx+0x418]
100051eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
100051ee:	8b 3c 24             	mov    edi,DWORD PTR [esp]
100051f1:	8b 80 74 02 00 00    	mov    eax,DWORD PTR [eax+0x274]
100051f7:	89 d1                	mov    ecx,edx
100051f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100051fd:	2b 8f 6c 02 00 00    	sub    ecx,DWORD PTR [edi+0x26c]
10005203:	83 e8 0e             	sub    eax,0xe
10005206:	39 c8                	cmp    eax,ecx
10005208:	7f 4c                	jg     10005256 <NIDesktop::handleMouse(int, int, int, int)+0xb8e>
1000520a:	80 bf 78 02 00 00 00 	cmp    BYTE PTR [edi+0x278],0x0
10005211:	75 43                	jne    10005256 <NIDesktop::handleMouse(int, int, int, int)+0xb8e>
10005213:	f6 87 90 02 00 00 01 	test   BYTE PTR [edi+0x290],0x1
1000521a:	75 3a                	jne    10005256 <NIDesktop::handleMouse(int, int, int, int)+0xb8e>
1000521c:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
10005222:	c7 83 20 04 00 00 00 04 00 00 	mov    DWORD PTR [ebx+0x420],0x400
1000522c:	a3 d4 a1 03 10       	mov    ds:0x1003a1d4,eax	1000522d: R_386_32	.bss
10005231:	89 3d 00 00 00 00    	mov    DWORD PTR ds:0x0,edi	10005233: R_386_32	movingWin
10005237:	c7 05 00 00 00 00 03 00 00 00 	mov    DWORD PTR ds:0x0,0x3	10005239: R_386_32	movingType
10005241:	50                   	push   eax
10005242:	89 15 d0 a1 03 10    	mov    DWORD PTR ds:0x1003a1d0,edx	10005244: R_386_32	.bss
10005248:	50                   	push   eax
10005249:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
1000524d:	53                   	push   ebx
1000524e:	e8 fc ff ff ff       	call   1000524f <NIDesktop::handleMouse(int, int, int, int)+0xb87>	1000524f: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10005253:	83 c4 10             	add    esp,0x10
10005256:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
1000525c:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000525f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
10005262:	8b 80 70 02 00 00    	mov    eax,DWORD PTR [eax+0x270]
10005268:	89 d1                	mov    ecx,edx
1000526a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000526e:	2b 8f 68 02 00 00    	sub    ecx,DWORD PTR [edi+0x268]
10005274:	83 e8 0e             	sub    eax,0xe
10005277:	39 c8                	cmp    eax,ecx
10005279:	7f 6d                	jg     100052e8 <NIDesktop::handleMouse(int, int, int, int)+0xc20>
1000527b:	80 bf 78 02 00 00 00 	cmp    BYTE PTR [edi+0x278],0x0
10005282:	75 64                	jne    100052e8 <NIDesktop::handleMouse(int, int, int, int)+0xc20>
10005284:	f6 87 90 02 00 00 01 	test   BYTE PTR [edi+0x290],0x1
1000528b:	75 5b                	jne    100052e8 <NIDesktop::handleMouse(int, int, int, int)+0xc20>
1000528d:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	1000528f: R_386_32	movingWin
10005294:	75 3c                	jne    100052d2 <NIDesktop::handleMouse(int, int, int, int)+0xc0a>
10005296:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
1000529c:	c7 83 20 04 00 00 00 05 00 00 	mov    DWORD PTR [ebx+0x420],0x500
100052a6:	89 3d 00 00 00 00    	mov    DWORD PTR ds:0x0,edi	100052a8: R_386_32	movingWin
100052ac:	55                   	push   ebp
100052ad:	c7 05 00 00 00 00 04 00 00 00 	mov    DWORD PTR ds:0x0,0x4	100052af: R_386_32	movingType
100052b7:	55                   	push   ebp
100052b8:	89 15 d4 a1 03 10    	mov    DWORD PTR ds:0x1003a1d4,edx	100052ba: R_386_32	.bss
100052be:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
100052c2:	a3 d0 a1 03 10       	mov    ds:0x1003a1d0,eax	100052c3: R_386_32	.bss
100052c7:	53                   	push   ebx
100052c8:	e8 fc ff ff ff       	call   100052c9 <NIDesktop::handleMouse(int, int, int, int)+0xc01>	100052c9: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
100052cd:	83 c4 10             	add    esp,0x10
100052d0:	eb 16                	jmp    100052e8 <NIDesktop::handleMouse(int, int, int, int)+0xc20>
100052d2:	c7 05 00 00 00 00 02 00 00 00 	mov    DWORD PTR ds:0x0,0x2	100052d4: R_386_32	movingType
100052dc:	c7 83 20 04 00 00 00 03 00 00 	mov    DWORD PTR [ebx+0x420],0x300
100052e6:	eb 5c                	jmp    10005344 <NIDesktop::handleMouse(int, int, int, int)+0xc7c>
100052e8:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100052ea: R_386_32	movingWin
100052ef:	75 53                	jne    10005344 <NIDesktop::handleMouse(int, int, int, int)+0xc7c>
100052f1:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
100052f7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
100052fa:	2b 87 6c 02 00 00    	sub    eax,DWORD PTR [edi+0x26c]
10005300:	83 f8 18             	cmp    eax,0x18
10005303:	7f 3f                	jg     10005344 <NIDesktop::handleMouse(int, int, int, int)+0xc7c>
10005305:	80 bf 78 02 00 00 00 	cmp    BYTE PTR [edi+0x278],0x0
1000530c:	75 36                	jne    10005344 <NIDesktop::handleMouse(int, int, int, int)+0xc7c>
1000530e:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
10005314:	89 3d 00 00 00 00    	mov    DWORD PTR ds:0x0,edi	10005316: R_386_32	movingWin
1000531a:	2b 97 68 02 00 00    	sub    edx,DWORD PTR [edi+0x268]
10005320:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	10005322: R_386_32	movingType
1000532a:	89 15 d4 a1 03 10    	mov    DWORD PTR ds:0x1003a1d4,edx	1000532c: R_386_32	.bss
10005330:	57                   	push   edi
10005331:	a3 d0 a1 03 10       	mov    ds:0x1003a1d0,eax	10005332: R_386_32	.bss
10005336:	57                   	push   edi
10005337:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
1000533b:	53                   	push   ebx
1000533c:	e8 fc ff ff ff       	call   1000533d <NIDesktop::handleMouse(int, int, int, int)+0xc75>	1000533d: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10005341:	83 c4 10             	add    esp,0x10
10005344:	8b 03                	mov    eax,DWORD PTR [ebx]
10005346:	83 ec 0c             	sub    esp,0xc
10005349:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
1000534f:	8b 0a                	mov    ecx,DWORD PTR [edx]
10005351:	6a 00                	push   0x0
10005353:	8b 83 20 04 00 00    	mov    eax,DWORD PTR [ebx+0x420]
10005359:	05 00 00 00 00       	add    eax,0x0	1000535a: R_386_32	___mouse_data
1000535e:	50                   	push   eax
1000535f:	ff b3 18 04 00 00    	push   DWORD PTR [ebx+0x418]
10005365:	ff b3 14 04 00 00    	push   DWORD PTR [ebx+0x414]
1000536b:	52                   	push   edx
1000536c:	ff 51 30             	call   DWORD PTR [ecx+0x30]
1000536f:	8b 84 24 ac 01 00 00 	mov    eax,DWORD PTR [esp+0x1ac]
10005376:	a3 d8 a1 03 10       	mov    ds:0x1003a1d8,eax	10005377: R_386_32	.bss
1000537b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
1000537f:	a3 00 00 00 00       	mov    ds:0x0,eax	10005380: R_386_32	prevClickon
10005384:	81 c4 8c 01 00 00    	add    esp,0x18c
1000538a:	5b                   	pop    ebx
1000538b:	5e                   	pop    esi
1000538c:	5f                   	pop    edi
1000538d:	5d                   	pop    ebp
1000538e:	c3                   	ret    
1000538f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10005393:	89 6c 24 28          	mov    DWORD PTR [esp+0x28],ebp
10005397:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005399: R_386_32	mouseDesktop
1000539d:	83 ec 0c             	sub    esp,0xc
100053a0:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
100053a6:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100053a8: R_386_32	movingWin
100053b0:	66 89 4c 24 3c       	mov    WORD PTR [esp+0x3c],cx
100053b5:	25 ff 1f 00 00       	and    eax,0x1fff
100053ba:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100053c0:	0d 00 20 00 80       	or     eax,0x80002000
100053c5:	66 89 4c 24 3e       	mov    WORD PTR [esp+0x3e],cx
100053ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100053ce:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100053d4:	66 25 00 3c          	and    ax,0x3c00
100053d8:	66 81 e2 ff 03       	and    dx,0x3ff
100053dd:	89 bd 70 02 00 00    	mov    DWORD PTR [ebp+0x270],edi
100053e3:	09 d0                	or     eax,edx
100053e5:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
100053ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100053ee:	89 85 74 02 00 00    	mov    DWORD PTR [ebp+0x274],eax
100053f4:	55                   	push   ebp
100053f5:	e8 fc ff ff ff       	call   100053f6 <NIDesktop::handleMouse(int, int, int, int)+0xd2e>	100053f6: R_386_PC32	NIWindow::rerender()
100053fa:	5a                   	pop    edx
100053fb:	59                   	pop    ecx
100053fc:	55                   	push   ebp
100053fd:	53                   	push   ebx
100053fe:	e8 fc ff ff ff       	call   100053ff <NIDesktop::handleMouse(int, int, int, int)+0xd37>	100053ff: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10005403:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
1000540a:	6a ff                	push   0xffffffff
1000540c:	6a ff                	push   0xffffffff
1000540e:	55                   	push   ebp
1000540f:	53                   	push   ebx
10005410:	e8 fc ff ff ff       	call   10005411 <NIDesktop::handleMouse(int, int, int, int)+0xd49>	10005411: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
10005415:	5e                   	pop    esi
10005416:	b9 06 00 00 00       	mov    ecx,0x6
1000541b:	8d 74 24 44          	lea    esi,[esp+0x44]
1000541f:	89 e7                	mov    edi,esp
10005421:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005423:	55                   	push   ebp
10005424:	e8 fc ff ff ff       	call   10005425 <NIDesktop::handleMouse(int, int, int, int)+0xd5d>	10005425: R_386_PC32	NIWindow::postEvent(NiEvent)
10005429:	c7 83 20 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x420],0x0
10005433:	e9 b0 fb ff ff       	jmp    10004fe8 <NIDesktop::handleMouse(int, int, int, int)+0x920>
10005438:	89 85 68 02 00 00    	mov    DWORD PTR [ebp+0x268],eax
1000543e:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005440: R_386_32	movingWin
10005448:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
1000544e:	2b 05 d0 a1 03 10    	sub    eax,DWORD PTR ds:0x1003a1d0	10005450: R_386_32	.bss
10005454:	89 85 6c 02 00 00    	mov    DWORD PTR [ebp+0x26c],eax
1000545a:	50                   	push   eax
1000545b:	50                   	push   eax
1000545c:	55                   	push   ebp
1000545d:	53                   	push   ebx
1000545e:	e8 fc ff ff ff       	call   1000545f <NIDesktop::handleMouse(int, int, int, int)+0xd97>	1000545f: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10005463:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10005467:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
1000546b:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000546d: R_386_32	mouseDesktop
10005471:	83 ec 0c             	sub    esp,0xc
10005474:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
1000547a:	25 ff 1f 00 00       	and    eax,0x1fff
1000547f:	66 89 4c 24 4c       	mov    WORD PTR [esp+0x4c],cx
10005484:	0d 00 40 00 80       	or     eax,0x80004000
10005489:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
1000548f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10005493:	66 89 4c 24 4e       	mov    WORD PTR [esp+0x4e],cx
10005498:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
1000549e:	66 25 00 5c          	and    ax,0x5c00
100054a2:	66 81 e2 ff 03       	and    dx,0x3ff
100054a7:	b9 06 00 00 00       	mov    ecx,0x6
100054ac:	09 d0                	or     eax,edx
100054ae:	66 89 44 24 48       	mov    WORD PTR [esp+0x48],ax
100054b3:	8d 74 24 44          	lea    esi,[esp+0x44]
100054b7:	89 e7                	mov    edi,esp
100054b9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100054bb:	55                   	push   ebp
100054bc:	e8 fc ff ff ff       	call   100054bd <NIDesktop::handleMouse(int, int, int, int)+0xdf5>	100054bd: R_386_PC32	NIWindow::postEvent(NiEvent)
100054c1:	e9 be f7 ff ff       	jmp    10004c84 <NIDesktop::handleMouse(int, int, int, int)+0x5bc>
100054c6:	85 f6                	test   esi,esi
100054c8:	0f 84 f2 00 00 00    	je     100055c0 <NIDesktop::handleMouse(int, int, int, int)+0xef8>
100054ce:	39 2d 00 00 00 00    	cmp    DWORD PTR ds:0x0,ebp	100054d0: R_386_32	clickonWhenMouseFirstClicked
100054d4:	74 08                	je     100054de <NIDesktop::handleMouse(int, int, int, int)+0xe16>
100054d6:	39 2d 00 00 00 00    	cmp    DWORD PTR ds:0x0,ebp	100054d8: R_386_32	prevClickon
100054dc:	75 6e                	jne    1000554c <NIDesktop::handleMouse(int, int, int, int)+0xe84>
100054de:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
100054e3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
100054e7:	19 c0                	sbb    eax,eax
100054e9:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
100054ed:	81 e2 ff 1f 00 80    	and    edx,0x80001fff
100054f3:	83 c0 05             	add    eax,0x5
100054f6:	25 ff ff 03 00       	and    eax,0x3ffff
100054fb:	c1 e0 0d             	shl    eax,0xd
100054fe:	09 d0                	or     eax,edx
10005500:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10005504:	a1 00 00 00 00       	mov    eax,ds:0x0	10005505: R_386_32	mouseDesktop
10005509:	80 64 24 47 7f       	and    BYTE PTR [esp+0x47],0x7f
1000550e:	83 ec 1c             	sub    esp,0x1c
10005511:	8b 90 14 04 00 00    	mov    edx,DWORD PTR [eax+0x414]
10005517:	66 89 54 24 64       	mov    WORD PTR [esp+0x64],dx
1000551c:	8b 90 18 04 00 00    	mov    edx,DWORD PTR [eax+0x418]
10005522:	8b 80 1c 04 00 00    	mov    eax,DWORD PTR [eax+0x41c]
10005528:	66 89 54 24 66       	mov    WORD PTR [esp+0x66],dx
1000552d:	89 c2                	mov    edx,eax
1000552f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10005533:	66 81 e2 ff 03       	and    dx,0x3ff
10005538:	66 25 00 fc          	and    ax,0xfc00
1000553c:	09 d0                	or     eax,edx
1000553e:	66 89 44 24 60       	mov    WORD PTR [esp+0x60],ax
10005543:	8d 74 24 5c          	lea    esi,[esp+0x5c]
10005547:	e9 c7 01 00 00       	jmp    10005713 <NIDesktop::handleMouse(int, int, int, int)+0x104b>
1000554c:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
10005550:	0f 84 cf 01 00 00    	je     10005725 <NIDesktop::handleMouse(int, int, int, int)+0x105d>
10005556:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
1000555a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
1000555d:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000555f: R_386_32	mouseDesktop
10005563:	89 7c 24 58          	mov    DWORD PTR [esp+0x58],edi
10005567:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
1000556d:	83 ec 1c             	sub    esp,0x1c
10005570:	66 89 4c 24 7c       	mov    WORD PTR [esp+0x7c],cx
10005575:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	10005577: R_386_32	clickonWhenMouseFirstClicked
1000557b:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10005581:	25 ff 1f 00 00       	and    eax,0x1fff
10005586:	66 89 4c 24 7e       	mov    WORD PTR [esp+0x7e],cx
1000558b:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10005591:	0d 00 a0 01 00       	or     eax,0x1a000
10005596:	66 81 e2 ff 03       	and    dx,0x3ff
1000559b:	89 44 24 78          	mov    DWORD PTR [esp+0x78],eax
1000559f:	b9 06 00 00 00       	mov    ecx,0x6
100055a4:	66 25 00 bc          	and    ax,0xbc00
100055a8:	09 d0                	or     eax,edx
100055aa:	66 89 44 24 78       	mov    WORD PTR [esp+0x78],ax
100055af:	8d 74 24 74          	lea    esi,[esp+0x74]
100055b3:	89 e7                	mov    edi,esp
100055b5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100055b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100055bb:	e9 5d 01 00 00       	jmp    1000571d <NIDesktop::handleMouse(int, int, int, int)+0x1055>
100055c0:	85 ff                	test   edi,edi
100055c2:	0f 85 06 ff ff ff    	jne    100054ce <NIDesktop::handleMouse(int, int, int, int)+0xe06>
100055c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100055cc:	83 e0 01             	and    eax,0x1
100055cf:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
100055d4:	0f 84 3e 02 00 00    	je     10005818 <NIDesktop::handleMouse(int, int, int, int)+0x1150>
100055da:	85 c0                	test   eax,eax
100055dc:	0f 85 43 01 00 00    	jne    10005725 <NIDesktop::handleMouse(int, int, int, int)+0x105d>
100055e2:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
100055e6:	74 06                	je     100055ee <NIDesktop::handleMouse(int, int, int, int)+0xf26>
100055e8:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	100055ea: R_386_32	clickonWhenMouseFirstClicked
100055ee:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
100055f2:	89 6c 24 70          	mov    DWORD PTR [esp+0x70],ebp
100055f6:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100055f8: R_386_32	mouseDesktop
100055fc:	83 ec 1c             	sub    esp,0x1c
100055ff:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10005605:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005607: R_386_32	desktopHasFocus
1000560c:	66 89 8c 24 94 00 00 00 	mov    WORD PTR [esp+0x94],cx
10005614:	25 ff 1f 00 00       	and    eax,0x1fff
10005619:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
1000561f:	80 cc c0             	or     ah,0xc0
10005622:	66 89 8c 24 96 00 00 00 	mov    WORD PTR [esp+0x96],cx
1000562a:	89 84 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],eax
10005631:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10005637:	66 25 00 dc          	and    ax,0xdc00
1000563b:	66 81 e2 ff 03       	and    dx,0x3ff
10005640:	b9 06 00 00 00       	mov    ecx,0x6
10005645:	09 d0                	or     eax,edx
10005647:	66 89 84 24 90 00 00 00 	mov    WORD PTR [esp+0x90],ax
1000564f:	8d b4 24 8c 00 00 00 	lea    esi,[esp+0x8c]
10005656:	89 e7                	mov    edi,esp
10005658:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000565a:	55                   	push   ebp
1000565b:	e8 fc ff ff ff       	call   1000565c <NIDesktop::handleMouse(int, int, int, int)+0xf94>	1000565c: R_386_PC32	NIWindow::postEvent(NiEvent)
10005660:	83 c4 20             	add    esp,0x20
10005663:	f6 85 91 02 00 00 10 	test   BYTE PTR [ebp+0x291],0x10
1000566a:	0f 85 b5 00 00 00    	jne    10005725 <NIDesktop::handleMouse(int, int, int, int)+0x105d>
10005670:	8b 93 18 04 00 00    	mov    edx,DWORD PTR [ebx+0x418]
10005676:	8b 85 6c 02 00 00    	mov    eax,DWORD PTR [ebp+0x26c]
1000567c:	39 c2                	cmp    edx,eax
1000567e:	0f 8e a1 00 00 00    	jle    10005725 <NIDesktop::handleMouse(int, int, int, int)+0x105d>
10005684:	83 c0 18             	add    eax,0x18
10005687:	39 c2                	cmp    edx,eax
10005689:	0f 8f 96 00 00 00    	jg     10005725 <NIDesktop::handleMouse(int, int, int, int)+0x105d>
1000568f:	8b 85 70 02 00 00    	mov    eax,DWORD PTR [ebp+0x270]
10005695:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
1000569b:	03 85 68 02 00 00    	add    eax,DWORD PTR [ebp+0x268]
100056a1:	8d 48 eb             	lea    ecx,[eax-0x15]
100056a4:	39 d1                	cmp    ecx,edx
100056a6:	7f 7d                	jg     10005725 <NIDesktop::handleMouse(int, int, int, int)+0x105d>
100056a8:	83 e8 03             	sub    eax,0x3
100056ab:	39 c2                	cmp    edx,eax
100056ad:	7d 76                	jge    10005725 <NIDesktop::handleMouse(int, int, int, int)+0x105d>
100056af:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
100056b6:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100056b8: R_386_32	mouseDesktop
100056bc:	89 ac 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ebp
100056c3:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
100056c9:	25 ff 1f 00 00       	and    eax,0x1fff
100056ce:	66 89 8c 24 90 00 00 00 	mov    WORD PTR [esp+0x90],cx
100056d6:	0d 00 c0 01 00       	or     eax,0x1c000
100056db:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100056e1:	89 84 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],eax
100056e8:	66 89 8c 24 92 00 00 00 	mov    WORD PTR [esp+0x92],cx
100056f0:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100056f6:	66 25 00 dc          	and    ax,0xdc00
100056fa:	66 81 e2 ff 03       	and    dx,0x3ff
100056ff:	83 ec 1c             	sub    esp,0x1c
10005702:	09 d0                	or     eax,edx
10005704:	66 89 84 24 a8 00 00 00 	mov    WORD PTR [esp+0xa8],ax
1000570c:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
10005713:	89 e7                	mov    edi,esp
10005715:	b9 06 00 00 00       	mov    ecx,0x6
1000571a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000571c:	55                   	push   ebp
1000571d:	e8 fc ff ff ff       	call   1000571e <NIDesktop::handleMouse(int, int, int, int)+0x1056>	1000571e: R_386_PC32	NIWindow::postEvent(NiEvent)
10005722:	83 c4 20             	add    esp,0x20
10005725:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10005729:	83 e0 02             	and    eax,0x2
1000572c:	f6 84 24 8c 01 00 00 02 	test   BYTE PTR [esp+0x18c],0x2
10005734:	74 71                	je     100057a7 <NIDesktop::handleMouse(int, int, int, int)+0x10df>
10005736:	85 c0                	test   eax,eax
10005738:	0f 85 11 f3 ff ff    	jne    10004a4f <NIDesktop::handleMouse(int, int, int, int)+0x387>
1000573e:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
10005745:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005747: R_386_32	mouseDesktop
1000574b:	89 ac 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],ebp
10005752:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10005758:	25 ff 1f 00 00       	and    eax,0x1fff
1000575d:	66 89 8c 24 c0 00 00 00 	mov    WORD PTR [esp+0xc0],cx
10005765:	0d 00 40 01 00       	or     eax,0x14000
1000576a:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10005770:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
10005777:	66 89 8c 24 c2 00 00 00 	mov    WORD PTR [esp+0xc2],cx
1000577f:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10005785:	66 25 00 5c          	and    ax,0x5c00
10005789:	66 81 e2 ff 03       	and    dx,0x3ff
1000578e:	83 ec 1c             	sub    esp,0x1c
10005791:	09 d0                	or     eax,edx
10005793:	66 89 84 24 d8 00 00 00 	mov    WORD PTR [esp+0xd8],ax
1000579b:	8d b4 24 d4 00 00 00 	lea    esi,[esp+0xd4]
100057a2:	e9 96 f2 ff ff       	jmp    10004a3d <NIDesktop::handleMouse(int, int, int, int)+0x375>
100057a7:	85 c0                	test   eax,eax
100057a9:	0f 84 a0 f2 ff ff    	je     10004a4f <NIDesktop::handleMouse(int, int, int, int)+0x387>
100057af:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
100057b6:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100057b8: R_386_32	mouseDesktop
100057bc:	89 ac 24 d0 00 00 00 	mov    DWORD PTR [esp+0xd0],ebp
100057c3:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
100057c9:	25 ff 1f 00 00       	and    eax,0x1fff
100057ce:	66 89 8c 24 d8 00 00 00 	mov    WORD PTR [esp+0xd8],cx
100057d6:	0d 00 60 01 00       	or     eax,0x16000
100057db:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100057e1:	89 84 24 d4 00 00 00 	mov    DWORD PTR [esp+0xd4],eax
100057e8:	66 89 8c 24 da 00 00 00 	mov    WORD PTR [esp+0xda],cx
100057f0:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100057f6:	66 25 00 7c          	and    ax,0x7c00
100057fa:	66 81 e2 ff 03       	and    dx,0x3ff
100057ff:	83 ec 1c             	sub    esp,0x1c
10005802:	09 d0                	or     eax,edx
10005804:	66 89 84 24 f0 00 00 00 	mov    WORD PTR [esp+0xf0],ax
1000580c:	8d b4 24 ec 00 00 00 	lea    esi,[esp+0xec]
10005813:	e9 25 f2 ff ff       	jmp    10004a3d <NIDesktop::handleMouse(int, int, int, int)+0x375>
10005818:	85 c0                	test   eax,eax
1000581a:	0f 84 05 ff ff ff    	je     10005725 <NIDesktop::handleMouse(int, int, int, int)+0x105d>
10005820:	8b 84 24 a4 00 00 00 	mov    eax,DWORD PTR [esp+0xa4]
10005827:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005829: R_386_32	mouseDesktop
1000582d:	89 ac 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],ebp
10005834:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
1000583a:	25 ff 1f 00 00       	and    eax,0x1fff
1000583f:	66 89 8c 24 a8 00 00 00 	mov    WORD PTR [esp+0xa8],cx
10005847:	80 cc e0             	or     ah,0xe0
1000584a:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10005850:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
10005857:	66 89 8c 24 aa 00 00 00 	mov    WORD PTR [esp+0xaa],cx
1000585f:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10005865:	66 25 00 fc          	and    ax,0xfc00
10005869:	66 81 e2 ff 03       	and    dx,0x3ff
1000586e:	83 ec 1c             	sub    esp,0x1c
10005871:	09 d0                	or     eax,edx
10005873:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005875: R_386_32	clickonWhenMouseFirstClicked
1000587d:	66 89 84 24 c0 00 00 00 	mov    WORD PTR [esp+0xc0],ax
10005885:	8d b4 24 bc 00 00 00 	lea    esi,[esp+0xbc]
1000588c:	e9 82 fe ff ff       	jmp    10005713 <NIDesktop::handleMouse(int, int, int, int)+0x104b>

10005891 <NiHandleMouse(int, int, int, int)>:
10005891:	83 ec 18             	sub    esp,0x18
10005894:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10005898:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
1000589c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100058a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100058a4:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100058a6: R_386_32	mouseDesktop
100058aa:	e8 fc ff ff ff       	call   100058ab <NiHandleMouse(int, int, int, int)+0x1a>	100058ab: R_386_PC32	NIDesktop::handleMouse(int, int, int, int)
100058af:	83 c4 2c             	add    esp,0x2c
100058b2:	c3                   	ret    

100058b3 <drawVGAChar(int, int, int)>:
100058b3:	55                   	push   ebp
100058b4:	57                   	push   edi
100058b5:	56                   	push   esi
100058b6:	53                   	push   ebx
100058b7:	31 db                	xor    ebx,ebx
100058b9:	83 ec 1c             	sub    esp,0x1c
100058bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100058c0:	c1 e0 04             	shl    eax,0x4
100058c3:	89 04 24             	mov    DWORD PTR [esp],eax
100058c6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100058ca:	c1 e0 04             	shl    eax,0x4
100058cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100058d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100058d5:	c1 e0 03             	shl    eax,0x3
100058d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100058dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
100058df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
100058e3:	8a 84 18 00 00 00 00 	mov    al,BYTE PTR [eax+ebx*1+0x0]	100058e6: R_386_32	cp
100058ea:	8d 3c 19             	lea    edi,[ecx+ebx*1]
100058ed:	31 f6                	xor    esi,esi
100058ef:	84 c0                	test   al,al
100058f1:	79 22                	jns    10005915 <drawVGAChar(int, int, int)+0x62>
100058f3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100058f7:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100058f9: R_386_32	screen
100058fd:	8b 0a                	mov    ecx,DWORD PTR [edx]
100058ff:	6a 00                	push   0x0
10005901:	57                   	push   edi
10005902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10005906:	8d 2c 06             	lea    ebp,[esi+eax*1]
10005909:	55                   	push   ebp
1000590a:	52                   	push   edx
1000590b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
1000590e:	83 c4 10             	add    esp,0x10
10005911:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
10005915:	d1 e0                	shl    eax,1
10005917:	46                   	inc    esi
10005918:	83 fe 08             	cmp    esi,0x8
1000591b:	75 d2                	jne    100058ef <drawVGAChar(int, int, int)+0x3c>
1000591d:	43                   	inc    ebx
1000591e:	83 fb 10             	cmp    ebx,0x10
10005921:	75 b9                	jne    100058dc <drawVGAChar(int, int, int)+0x29>
10005923:	83 c4 1c             	add    esp,0x1c
10005926:	5b                   	pop    ebx
10005927:	5e                   	pop    esi
10005928:	5f                   	pop    edi
10005929:	5d                   	pop    ebp
1000592a:	c3                   	ret    

1000592b <NiDisplayRAM(void*)>:
1000592b:	57                   	push   edi
1000592c:	56                   	push   esi
1000592d:	53                   	push   ebx
1000592e:	f0 ff 0d 00 00 00 00 	lock dec DWORD PTR ds:0x0	10005931: R_386_32	irqDisableCounter
10005935:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10005937: R_386_32	irqDisableCounter
1000593c:	75 01                	jne    1000593f <NiDisplayRAM(void*)+0x14>
1000593e:	fb                   	sti    
1000593f:	a1 00 00 00 00       	mov    eax,ds:0x0	10005940: R_386_32	swapBalance
10005944:	31 f6                	xor    esi,esi
10005946:	03 05 00 00 00 00    	add    eax,DWORD PTR ds:0x0	10005948: R_386_32	Phys::usedPages
1000594c:	6b c0 64             	imul   eax,eax,0x64
1000594f:	99                   	cdq    
10005950:	f7 3d 00 00 00 00    	idiv   DWORD PTR ds:0x0	10005952: R_386_32	Phys::usablePages
10005956:	89 c3                	mov    ebx,eax
10005958:	31 ff                	xor    edi,edi
1000595a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000595b: R_386_32	screen
1000595f:	8b 10                	mov    edx,DWORD PTR [eax]
10005961:	68 ff ff ff 00       	push   0xffffff
10005966:	56                   	push   esi
10005967:	57                   	push   edi
10005968:	47                   	inc    edi
10005969:	50                   	push   eax
1000596a:	ff 52 24             	call   DWORD PTR [edx+0x24]
1000596d:	83 c4 10             	add    esp,0x10
10005970:	83 ff 68             	cmp    edi,0x68
10005973:	75 e5                	jne    1000595a <NiDisplayRAM(void*)+0x2f>
10005975:	46                   	inc    esi
10005976:	83 fe 10             	cmp    esi,0x10
10005979:	75 dd                	jne    10005958 <NiDisplayRAM(void*)+0x2d>
1000597b:	8d 43 63             	lea    eax,[ebx+0x63]
1000597e:	3d c6 00 00 00       	cmp    eax,0xc6
10005983:	76 1b                	jbe    100059a0 <NiDisplayRAM(void*)+0x75>
10005985:	b9 64 00 00 00       	mov    ecx,0x64
1000598a:	89 d8                	mov    eax,ebx
1000598c:	99                   	cdq    
1000598d:	56                   	push   esi
1000598e:	f7 f9                	idiv   ecx
10005990:	83 c0 30             	add    eax,0x30
10005993:	50                   	push   eax
10005994:	6a 00                	push   0x0
10005996:	6a 00                	push   0x0
10005998:	e8 fc ff ff ff       	call   10005999 <NiDisplayRAM(void*)+0x6e>	10005999: R_386_PC32	drawVGAChar(int, int, int)
1000599d:	83 c4 10             	add    esp,0x10
100059a0:	b9 0a 00 00 00       	mov    ecx,0xa
100059a5:	50                   	push   eax
100059a6:	89 d8                	mov    eax,ebx
100059a8:	99                   	cdq    
100059a9:	f7 f9                	idiv   ecx
100059ab:	89 d3                	mov    ebx,edx
100059ad:	99                   	cdq    
100059ae:	83 c3 30             	add    ebx,0x30
100059b1:	f7 f9                	idiv   ecx
100059b3:	8d 42 30             	lea    eax,[edx+0x30]
100059b6:	50                   	push   eax
100059b7:	6a 00                	push   0x0
100059b9:	6a 01                	push   0x1
100059bb:	e8 fc ff ff ff       	call   100059bc <NiDisplayRAM(void*)+0x91>	100059bc: R_386_PC32	drawVGAChar(int, int, int)
100059c0:	83 c4 0c             	add    esp,0xc
100059c3:	53                   	push   ebx
100059c4:	6a 00                	push   0x0
100059c6:	6a 02                	push   0x2
100059c8:	e8 fc ff ff ff       	call   100059c9 <NiDisplayRAM(void*)+0x9e>	100059c9: R_386_PC32	drawVGAChar(int, int, int)
100059cd:	83 c4 0c             	add    esp,0xc
100059d0:	6a 25                	push   0x25
100059d2:	6a 00                	push   0x0
100059d4:	6a 03                	push   0x3
100059d6:	e8 fc ff ff ff       	call   100059d7 <NiDisplayRAM(void*)+0xac>	100059d7: R_386_PC32	drawVGAChar(int, int, int)
100059db:	83 c4 0c             	add    esp,0xc
100059de:	6a 20                	push   0x20
100059e0:	6a 00                	push   0x0
100059e2:	6a 04                	push   0x4
100059e4:	e8 fc ff ff ff       	call   100059e5 <NiDisplayRAM(void*)+0xba>	100059e5: R_386_PC32	drawVGAChar(int, int, int)
100059e9:	83 c4 0c             	add    esp,0xc
100059ec:	6a 52                	push   0x52
100059ee:	6a 00                	push   0x0
100059f0:	6a 05                	push   0x5
100059f2:	e8 fc ff ff ff       	call   100059f3 <NiDisplayRAM(void*)+0xc8>	100059f3: R_386_PC32	drawVGAChar(int, int, int)
100059f7:	83 c4 0c             	add    esp,0xc
100059fa:	6a 41                	push   0x41
100059fc:	6a 00                	push   0x0
100059fe:	6a 06                	push   0x6
10005a00:	e8 fc ff ff ff       	call   10005a01 <NiDisplayRAM(void*)+0xd6>	10005a01: R_386_PC32	drawVGAChar(int, int, int)
10005a05:	83 c4 0c             	add    esp,0xc
10005a08:	6a 4d                	push   0x4d
10005a0a:	6a 00                	push   0x0
10005a0c:	6a 07                	push   0x7
10005a0e:	e8 fc ff ff ff       	call   10005a0f <NiDisplayRAM(void*)+0xe4>	10005a0f: R_386_PC32	drawVGAChar(int, int, int)
10005a13:	83 c4 0c             	add    esp,0xc
10005a16:	6a 20                	push   0x20
10005a18:	6a 00                	push   0x0
10005a1a:	6a 08                	push   0x8
10005a1c:	e8 fc ff ff ff       	call   10005a1d <NiDisplayRAM(void*)+0xf2>	10005a1d: R_386_PC32	drawVGAChar(int, int, int)
10005a21:	83 c4 0c             	add    esp,0xc
10005a24:	6a 75                	push   0x75
10005a26:	6a 00                	push   0x0
10005a28:	6a 09                	push   0x9
10005a2a:	e8 fc ff ff ff       	call   10005a2b <NiDisplayRAM(void*)+0x100>	10005a2b: R_386_PC32	drawVGAChar(int, int, int)
10005a2f:	83 c4 0c             	add    esp,0xc
10005a32:	6a 73                	push   0x73
10005a34:	6a 00                	push   0x0
10005a36:	6a 0a                	push   0xa
10005a38:	e8 fc ff ff ff       	call   10005a39 <NiDisplayRAM(void*)+0x10e>	10005a39: R_386_PC32	drawVGAChar(int, int, int)
10005a3d:	83 c4 0c             	add    esp,0xc
10005a40:	6a 65                	push   0x65
10005a42:	6a 00                	push   0x0
10005a44:	6a 0b                	push   0xb
10005a46:	e8 fc ff ff ff       	call   10005a47 <NiDisplayRAM(void*)+0x11c>	10005a47: R_386_PC32	drawVGAChar(int, int, int)
10005a4b:	83 c4 0c             	add    esp,0xc
10005a4e:	6a 64                	push   0x64
10005a50:	6a 00                	push   0x0
10005a52:	6a 0c                	push   0xc
10005a54:	e8 fc ff ff ff       	call   10005a55 <NiDisplayRAM(void*)+0x12a>	10005a55: R_386_PC32	drawVGAChar(int, int, int)
10005a59:	5a                   	pop    edx
10005a5a:	59                   	pop    ecx
10005a5b:	6a 00                	push   0x0
10005a5d:	68 4c 1d 00 00       	push   0x1d4c
10005a62:	e8 fc ff ff ff       	call   10005a63 <NiDisplayRAM(void*)+0x138>	10005a63: R_386_PC32	milliTenthSleep(unsigned long long)
10005a67:	83 c4 10             	add    esp,0x10
10005a6a:	e9 d0 fe ff ff       	jmp    1000593f <NiDisplayRAM(void*)+0x14>

10005a6f <NiClockEventThread(void*)>:
10005a6f:	57                   	push   edi
10005a70:	56                   	push   esi
10005a71:	53                   	push   ebx
10005a72:	83 ec 20             	sub    esp,0x20
10005a75:	f0 ff 0d 00 00 00 00 	lock dec DWORD PTR ds:0x0	10005a78: R_386_32	irqDisableCounter
10005a7c:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10005a7e: R_386_32	irqDisableCounter
10005a83:	75 01                	jne    10005a86 <NiClockEventThread(void*)+0x17>
10005a85:	fb                   	sti    
10005a86:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10005a88: R_386_32	desktopWindowDummy
10005a8c:	85 db                	test   ebx,ebx
10005a8e:	74 24                	je     10005ab4 <NiClockEventThread(void*)+0x45>
10005a90:	8d 74 24 08          	lea    esi,[esp+0x8]
10005a94:	6a 00                	push   0x0
10005a96:	6a 0f                	push   0xf
10005a98:	53                   	push   ebx
10005a99:	56                   	push   esi
10005a9a:	e8 fc ff ff ff       	call   10005a9b <NiClockEventThread(void*)+0x2c>	10005a9b: R_386_PC32	NiCreateEvent(NIWindow*, int, bool)
10005a9f:	b9 06 00 00 00       	mov    ecx,0x6
10005aa4:	83 ec 20             	sub    esp,0x20
10005aa7:	89 e7                	mov    edi,esp
10005aa9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005aab:	53                   	push   ebx
10005aac:	e8 fc ff ff ff       	call   10005aad <NiClockEventThread(void*)+0x3e>	10005aad: R_386_PC32	NIWindow::postEvent(NiEvent)
10005ab1:	83 c4 30             	add    esp,0x30
10005ab4:	50                   	push   eax
10005ab5:	50                   	push   eax
10005ab6:	6a 00                	push   0x0
10005ab8:	68 05 0d 00 00       	push   0xd05
10005abd:	e8 fc ff ff ff       	call   10005abe <NiClockEventThread(void*)+0x4f>	10005abe: R_386_PC32	milliTenthSleep(unsigned long long)
10005ac2:	83 c4 10             	add    esp,0x10
10005ac5:	eb bf                	jmp    10005a86 <NiClockEventThread(void*)+0x17>

10005ac7 <monikaBsod(char*)>:
10005ac7:	55                   	push   ebp
10005ac8:	57                   	push   edi
10005ac9:	31 ff                	xor    edi,edi
10005acb:	56                   	push   esi
10005acc:	53                   	push   ebx
10005acd:	31 db                	xor    ebx,ebx
10005acf:	83 ec 24             	sub    esp,0x24
10005ad2:	a1 00 00 00 00       	mov    eax,ds:0x0	10005ad3: R_386_32	screen
10005ad7:	8b 10                	mov    edx,DWORD PTR [eax]
10005ad9:	68 ff ff ff 00       	push   0xffffff
10005ade:	50                   	push   eax
10005adf:	ff 52 40             	call   DWORD PTR [edx+0x40]
10005ae2:	83 c4 10             	add    esp,0x10
10005ae5:	8a 8b 00 00 00 00    	mov    cl,BYTE PTR [ebx+0x0]	10005ae7: R_386_32	justMonika
10005aeb:	8d 43 01             	lea    eax,[ebx+0x1]
10005aee:	84 c9                	test   cl,cl
10005af0:	79 0e                	jns    10005b00 <monikaBsod(char*)+0x39>
10005af2:	8d 51 80             	lea    edx,[ecx-0x80]
10005af5:	83 c3 02             	add    ebx,0x2
10005af8:	8a 88 00 00 00 00    	mov    cl,BYTE PTR [eax+0x0]	10005afa: R_386_32	justMonika
10005afe:	eb 04                	jmp    10005b04 <monikaBsod(char*)+0x3d>
10005b00:	89 c3                	mov    ebx,eax
10005b02:	b2 01                	mov    dl,0x1
10005b04:	0f b6 c1             	movzx  eax,cl
10005b07:	83 e1 03             	and    ecx,0x3
10005b0a:	89 c6                	mov    esi,eax
10005b0c:	6b c9 55             	imul   ecx,ecx,0x55
10005b0f:	c1 fe 05             	sar    esi,0x5
10005b12:	c1 f8 02             	sar    eax,0x2
10005b15:	83 e6 03             	and    esi,0x3
10005b18:	83 e0 07             	and    eax,0x7
10005b1b:	6b f6 55             	imul   esi,esi,0x55
10005b1e:	6b c0 24             	imul   eax,eax,0x24
10005b21:	c1 e6 10             	shl    esi,0x10
10005b24:	c1 e0 08             	shl    eax,0x8
10005b27:	09 f0                	or     eax,esi
10005b29:	31 f6                	xor    esi,esi
10005b2b:	09 c8                	or     eax,ecx
10005b2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10005b31:	0f b6 c2             	movzx  eax,dl
10005b34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10005b38:	8d 04 37             	lea    eax,[edi+esi*1]
10005b3b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10005b3f:	7f 10                	jg     10005b51 <monikaBsod(char*)+0x8a>
10005b41:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
10005b45:	81 ff ff af 04 00    	cmp    edi,0x4afff
10005b4b:	7e 98                	jle    10005ae5 <monikaBsod(char*)+0x1e>
10005b4d:	31 db                	xor    ebx,ebx
10005b4f:	eb 25                	jmp    10005b76 <monikaBsod(char*)+0xaf>
10005b51:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005b53: R_386_32	screen
10005b57:	b9 80 02 00 00       	mov    ecx,0x280
10005b5c:	8b 2a                	mov    ebp,DWORD PTR [edx]
10005b5e:	46                   	inc    esi
10005b5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
10005b63:	99                   	cdq    
10005b64:	f7 f9                	idiv   ecx
10005b66:	50                   	push   eax
10005b67:	52                   	push   edx
10005b68:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005b6a: R_386_32	screen
10005b6e:	ff 55 24             	call   DWORD PTR [ebp+0x24]
10005b71:	83 c4 10             	add    esp,0x10
10005b74:	eb c2                	jmp    10005b38 <monikaBsod(char*)+0x71>
10005b76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10005b7a:	0f be 04 18          	movsx  eax,BYTE PTR [eax+ebx*1]
10005b7e:	84 c0                	test   al,al
10005b80:	74 1d                	je     10005b9f <monikaBsod(char*)+0xd8>
10005b82:	b9 19 00 00 00       	mov    ecx,0x19
10005b87:	52                   	push   edx
10005b88:	50                   	push   eax
10005b89:	89 d8                	mov    eax,ebx
10005b8b:	43                   	inc    ebx
10005b8c:	99                   	cdq    
10005b8d:	f7 f9                	idiv   ecx
10005b8f:	83 c0 0a             	add    eax,0xa
10005b92:	42                   	inc    edx
10005b93:	50                   	push   eax
10005b94:	52                   	push   edx
10005b95:	e8 fc ff ff ff       	call   10005b96 <monikaBsod(char*)+0xcf>	10005b96: R_386_PC32	drawVGAChar(int, int, int)
10005b9a:	83 c4 10             	add    esp,0x10
10005b9d:	eb d7                	jmp    10005b76 <monikaBsod(char*)+0xaf>
10005b9f:	f4                   	hlt    
10005ba0:	eb fd                	jmp    10005b9f <monikaBsod(char*)+0xd8>

10005ba2 <NiInstallSysHooks()>:
10005ba2:	83 ec 14             	sub    esp,0x14
10005ba5:	6a 00                	push   0x0
10005ba7:	68 00 00 00 00       	push   0x0	10005ba8: R_386_32	NiShutdownHandler(void*)
10005bac:	e8 fc ff ff ff       	call   10005bad <NiInstallSysHooks()+0xb>	10005bad: R_386_PC32	KeRegisterAtexit(void (*)(void*), void*)
10005bb1:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005bb3: R_386_32	guiPanicHandler
	10005bb7: R_386_32	monikaBsod(char*)
10005bbb:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005bbd: R_386_32	guiKeyboardHandler
	10005bc1: R_386_32	NiKeyhandler(KeyboardToken, bool*)
10005bc5:	c7 05 bc 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xbc,0x0	10005bc7: R_386_32	systemCallHandlers
	10005bcb: R_386_32	NiSystemCallHandler(regs*)
10005bcf:	83 c4 1c             	add    esp,0x1c
10005bd2:	c3                   	ret    

10005bd3 <NiLinkCommandDestroyWindow(unsigned long, NiLinkWindowStruct*)>:
10005bd3:	83 ec 18             	sub    esp,0x18
10005bd6:	68 fa 6e 00 10       	push   0x10006efa	10005bd7: R_386_32	.text
10005bdb:	e8 fc ff ff ff       	call   10005bdc <NiLinkCommandDestroyWindow(unsigned long, NiLinkWindowStruct*)+0x9>	10005bdc: R_386_PC32	Dbg::kprintf(char const*, ...)
10005be0:	58                   	pop    eax
10005be1:	5a                   	pop    edx
10005be2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10005be6:	ff b0 a0 00 00 00    	push   DWORD PTR [eax+0xa0]
10005bec:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005bee: R_386_32	desktop
10005bf2:	e8 fc ff ff ff       	call   10005bf3 <NiLinkCommandDestroyWindow(unsigned long, NiLinkWindowStruct*)+0x20>	10005bf3: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10005bf7:	59                   	pop    ecx
10005bf8:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005bfa: R_386_32	desktop
10005bfe:	e8 fc ff ff ff       	call   10005bff <NiLinkCommandDestroyWindow(unsigned long, NiLinkWindowStruct*)+0x2c>	10005bff: R_386_PC32	NIDesktop::completeRefresh()
10005c03:	31 c0                	xor    eax,eax
10005c05:	31 d2                	xor    edx,edx
10005c07:	83 c4 1c             	add    esp,0x1c
10005c0a:	c3                   	ret    

10005c0b <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)>:
10005c0b:	56                   	push   esi
10005c0c:	53                   	push   ebx
10005c0d:	83 ec 10             	sub    esp,0x10
10005c10:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10005c14:	68 16 6f 00 10       	push   0x10006f16	10005c15: R_386_32	.text
10005c19:	e8 fc ff ff ff       	call   10005c1a <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0xf>	10005c1a: R_386_PC32	Dbg::kprintf(char const*, ...)
10005c1e:	c7 04 24 94 02 00 00 	mov    DWORD PTR [esp],0x294
10005c25:	e8 fc ff ff ff       	call   10005c26 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x1b>	10005c26: R_386_PC32	malloc
10005c2a:	89 c6                	mov    esi,eax
10005c2c:	58                   	pop    eax
10005c2d:	5a                   	pop    edx
10005c2e:	ff b3 b0 00 00 00    	push   DWORD PTR [ebx+0xb0]
10005c34:	ff b3 ac 00 00 00    	push   DWORD PTR [ebx+0xac]
10005c3a:	ff b3 a8 00 00 00    	push   DWORD PTR [ebx+0xa8]
10005c40:	ff b3 a4 00 00 00    	push   DWORD PTR [ebx+0xa4]
10005c46:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005c48: R_386_32	ctxt
10005c4c:	56                   	push   esi
10005c4d:	e8 fc ff ff ff       	call   10005c4e <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x43>	10005c4e: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10005c52:	8b 83 b4 00 00 00    	mov    eax,DWORD PTR [ebx+0xb4]
10005c58:	83 c4 18             	add    esp,0x18
10005c5b:	89 86 90 02 00 00    	mov    DWORD PTR [esi+0x290],eax
10005c61:	56                   	push   esi
10005c62:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005c64: R_386_32	desktop
10005c68:	e8 fc ff ff ff       	call   10005c69 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x5e>	10005c69: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10005c6d:	59                   	pop    ecx
10005c6e:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005c70: R_386_32	desktop
10005c74:	e8 fc ff ff ff       	call   10005c75 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x6a>	10005c75: R_386_PC32	NIDesktop::completeRefresh()
10005c79:	89 b3 a0 00 00 00    	mov    DWORD PTR [ebx+0xa0],esi
10005c7f:	31 c0                	xor    eax,eax
10005c81:	83 c4 14             	add    esp,0x14
10005c84:	31 d2                	xor    edx,edx
10005c86:	5b                   	pop    ebx
10005c87:	5e                   	pop    esi
10005c88:	c3                   	ret    

10005c89 <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)>:
10005c89:	53                   	push   ebx
10005c8a:	83 ec 14             	sub    esp,0x14
10005c8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10005c91:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
10005c97:	53                   	push   ebx
10005c98:	e8 fc ff ff ff       	call   10005c99 <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)+0x10>	10005c99: R_386_PC32	NIWindow::rerender()
10005c9d:	8b 83 90 02 00 00    	mov    eax,DWORD PTR [ebx+0x290]
10005ca3:	83 c4 10             	add    esp,0x10
10005ca6:	89 c2                	mov    edx,eax
10005ca8:	83 e2 ef             	and    edx,0xffffffef
10005cab:	a8 20                	test   al,0x20
10005cad:	89 93 90 02 00 00    	mov    DWORD PTR [ebx+0x290],edx
10005cb3:	74 0c                	je     10005cc1 <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)+0x38>
10005cb5:	83 ec 0c             	sub    esp,0xc
10005cb8:	53                   	push   ebx
10005cb9:	e8 fc ff ff ff       	call   10005cba <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)+0x31>	10005cba: R_386_PC32	NIWindow::drawResizeMarker()
10005cbe:	83 c4 10             	add    esp,0x10
10005cc1:	83 ec 0c             	sub    esp,0xc
10005cc4:	6a 00                	push   0x0
10005cc6:	6a ff                	push   0xffffffff
10005cc8:	6a ff                	push   0xffffffff
10005cca:	53                   	push   ebx
10005ccb:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005ccd: R_386_32	desktop
10005cd1:	e8 fc ff ff ff       	call   10005cd2 <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)+0x49>	10005cd2: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
10005cd6:	31 c0                	xor    eax,eax
10005cd8:	31 d2                	xor    edx,edx
10005cda:	83 c4 28             	add    esp,0x28
10005cdd:	5b                   	pop    ebx
10005cde:	c3                   	ret    

10005cdf <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)>:
10005cdf:	55                   	push   ebp
10005ce0:	57                   	push   edi
10005ce1:	56                   	push   esi
10005ce2:	53                   	push   ebx
10005ce3:	83 ec 0c             	sub    esp,0xc
10005ce6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
10005cea:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
10005cee:	8d 41 ff             	lea    eax,[ecx-0x1]
10005cf1:	3d fe 0f 00 00       	cmp    eax,0xffe
10005cf6:	76 75                	jbe    10005d6d <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0x8e>
10005cf8:	a1 00 00 00 00       	mov    eax,ds:0x0	10005cf9: R_386_32	desktop
10005cfd:	85 c9                	test   ecx,ecx
10005cff:	8b b8 08 04 00 00    	mov    edi,DWORD PTR [eax+0x408]
10005d05:	75 1b                	jne    10005d22 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0x43>
10005d07:	8b 00                	mov    eax,DWORD PTR [eax]
10005d09:	8b 88 0c 04 00 00    	mov    ecx,DWORD PTR [eax+0x40c]
10005d0f:	0f af 88 10 04 00 00 	imul   ecx,DWORD PTR [eax+0x410]
10005d16:	c1 e1 02             	shl    ecx,0x2
10005d19:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10005d1b:	31 c0                	xor    eax,eax
10005d1d:	e9 9d 00 00 00       	jmp    10005dbf <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xe0>
10005d22:	8b 19                	mov    ebx,DWORD PTR [ecx]
10005d24:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
10005d27:	8b 69 08             	mov    ebp,DWORD PTR [ecx+0x8]
10005d2a:	8b 51 0c             	mov    edx,DWORD PTR [ecx+0xc]
10005d2d:	8d 3c 9f             	lea    edi,[edi+ebx*4]
10005d30:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10005d37:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10005d39:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	10005d3b: R_386_32	desktop
10005d3f:	8b 0e                	mov    ecx,DWORD PTR [esi]
10005d41:	01 d8                	add    eax,ebx
10005d43:	8b 89 0c 04 00 00    	mov    ecx,DWORD PTR [ecx+0x40c]
10005d49:	57                   	push   edi
10005d4a:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10005d4e:	57                   	push   edi
10005d4f:	6a 00                	push   0x0
10005d51:	52                   	push   edx
10005d52:	99                   	cdq    
10005d53:	55                   	push   ebp
10005d54:	f7 f9                	idiv   ecx
10005d56:	50                   	push   eax
10005d57:	89 d8                	mov    eax,ebx
10005d59:	99                   	cdq    
10005d5a:	f7 f9                	idiv   ecx
10005d5c:	50                   	push   eax
10005d5d:	56                   	push   esi
10005d5e:	e8 fc ff ff ff       	call   10005d5f <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0x80>	10005d5f: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10005d63:	83 c4 20             	add    esp,0x20
10005d66:	b8 04 00 00 00       	mov    eax,0x4
10005d6b:	eb 52                	jmp    10005dbf <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xe0>
10005d6d:	83 f9 01             	cmp    ecx,0x1
10005d70:	75 2d                	jne    10005d9f <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xc0>
10005d72:	a1 00 00 00 00       	mov    eax,ds:0x0	10005d73: R_386_32	desktop
10005d77:	b9 00 02 00 00       	mov    ecx,0x200
10005d7c:	8d b8 08 02 00 00    	lea    edi,[eax+0x208]
10005d82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10005d84:	a1 00 00 00 00       	mov    eax,ds:0x0	10005d85: R_386_32	desktop
10005d89:	8b 00                	mov    eax,DWORD PTR [eax]
10005d8b:	8b 88 0c 04 00 00    	mov    ecx,DWORD PTR [eax+0x40c]
10005d91:	c1 e1 10             	shl    ecx,0x10
10005d94:	0b 88 10 04 00 00    	or     ecx,DWORD PTR [eax+0x410]
10005d9a:	89 c8                	mov    eax,ecx
10005d9c:	99                   	cdq    
10005d9d:	eb 22                	jmp    10005dc1 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xe2>
10005d9f:	83 c8 ff             	or     eax,0xffffffff
10005da2:	83 f9 02             	cmp    ecx,0x2
10005da5:	89 c2                	mov    edx,eax
10005da7:	75 18                	jne    10005dc1 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xe2>
10005da9:	83 ec 0c             	sub    esp,0xc
10005dac:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005dae: R_386_32	desktop
10005db2:	e8 fc ff ff ff       	call   10005db3 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xd4>	10005db3: R_386_PC32	NIDesktop::completeRefresh()
10005db7:	83 c4 10             	add    esp,0x10
10005dba:	b8 02 00 00 00       	mov    eax,0x2
10005dbf:	31 d2                	xor    edx,edx
10005dc1:	83 c4 0c             	add    esp,0xc
10005dc4:	5b                   	pop    ebx
10005dc5:	5e                   	pop    esi
10005dc6:	5f                   	pop    edi
10005dc7:	5d                   	pop    ebp
10005dc8:	c3                   	ret    

10005dc9 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)>:
10005dc9:	55                   	push   ebp
10005dca:	57                   	push   edi
10005dcb:	56                   	push   esi
10005dcc:	53                   	push   ebx
10005dcd:	81 ec 28 08 00 00    	sub    esp,0x828
10005dd3:	8b bc 24 3c 08 00 00 	mov    edi,DWORD PTR [esp+0x83c]
10005dda:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
10005de1:	0f b7 f7             	movzx  esi,di
10005de4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10005de8:	c1 ef 10             	shr    edi,0x10
10005deb:	8b 84 24 40 08 00 00 	mov    eax,DWORD PTR [esp+0x840]
10005df2:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
10005df8:	53                   	push   ebx
10005df9:	e8 fc ff ff ff       	call   10005dfa <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x31>	10005dfa: R_386_PC32	NIWindow::request()
10005dfe:	83 c4 10             	add    esp,0x10
10005e01:	81 fe ff ff 00 00    	cmp    esi,0xffff
10005e07:	75 02                	jne    10005e0b <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x42>
10005e09:	31 f6                	xor    esi,esi
10005e0b:	81 ff ff ff 00 00    	cmp    edi,0xffff
10005e11:	74 05                	je     10005e18 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x4f>
10005e13:	89 3c 24             	mov    DWORD PTR [esp],edi
10005e16:	eb 09                	jmp    10005e21 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x58>
10005e18:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10005e1e:	89 04 24             	mov    DWORD PTR [esp],eax
10005e21:	8b ab 70 02 00 00    	mov    ebp,DWORD PTR [ebx+0x270]
10005e27:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
10005e2b:	0f af ee             	imul   ebp,esi
10005e2e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10005e32:	39 0c 24             	cmp    DWORD PTR [esp],ecx
10005e35:	7e 73                	jle    10005eaa <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0xe1>
10005e37:	8d 84 24 10 08 00 00 	lea    eax,[esp+0x810]
10005e3e:	8d 0c 08             	lea    ecx,[eax+ecx*1]
10005e41:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
10005e47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10005e4b:	01 c8                	add    eax,ecx
10005e4d:	c6 80 00 f8 ff ff 00 	mov    BYTE PTR [eax-0x800],0x0
10005e54:	89 e8                	mov    eax,ebp
10005e56:	89 c1                	mov    ecx,eax
10005e58:	29 e9                	sub    ecx,ebp
10005e5a:	39 8b 70 02 00 00    	cmp    DWORD PTR [ebx+0x270],ecx
10005e60:	7e 40                	jle    10005ea2 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0xd9>
10005e62:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10005e69:	89 d7                	mov    edi,edx
10005e6b:	8b 94 24 34 08 00 00 	mov    edx,DWORD PTR [esp+0x834]
10005e72:	8b 8a b8 00 00 00    	mov    ecx,DWORD PTR [edx+0xb8]
10005e78:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
10005e7b:	83 f9 ff             	cmp    ecx,0xffffffff
10005e7e:	74 1f                	je     10005e9f <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0xd6>
10005e80:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10005e83:	39 0c 82             	cmp    DWORD PTR [edx+eax*4],ecx
10005e86:	74 11                	je     10005e99 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0xd0>
10005e88:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10005e8c:	03 93 6c 02 00 00    	add    edx,DWORD PTR [ebx+0x26c]
10005e92:	c6 82 00 f8 ff ff 01 	mov    BYTE PTR [edx-0x800],0x1
10005e99:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10005e9c:	89 0c 3a             	mov    DWORD PTR [edx+edi*1],ecx
10005e9f:	40                   	inc    eax
10005ea0:	eb b4                	jmp    10005e56 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x8d>
10005ea2:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
10005ea6:	89 c5                	mov    ebp,eax
10005ea8:	eb 84                	jmp    10005e2e <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x65>
10005eaa:	8b 83 90 02 00 00    	mov    eax,DWORD PTR [ebx+0x290]
10005eb0:	89 c2                	mov    edx,eax
10005eb2:	83 e2 ef             	and    edx,0xffffffef
10005eb5:	a8 20                	test   al,0x20
10005eb7:	89 93 90 02 00 00    	mov    DWORD PTR [ebx+0x290],edx
10005ebd:	74 0c                	je     10005ecb <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x102>
10005ebf:	83 ec 0c             	sub    esp,0xc
10005ec2:	53                   	push   ebx
10005ec3:	e8 fc ff ff ff       	call   10005ec4 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0xfb>	10005ec4: R_386_PC32	NIWindow::drawResizeMarker()
10005ec8:	83 c4 10             	add    esp,0x10
10005ecb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
10005ed0:	74 1c                	je     10005eee <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x125>
10005ed2:	83 ec 0c             	sub    esp,0xc
10005ed5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10005ed9:	50                   	push   eax
10005eda:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10005ede:	56                   	push   esi
10005edf:	53                   	push   ebx
10005ee0:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005ee2: R_386_32	desktop
10005ee6:	e8 fc ff ff ff       	call   10005ee7 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x11e>	10005ee7: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
10005eeb:	83 c4 20             	add    esp,0x20
10005eee:	81 c4 1c 08 00 00    	add    esp,0x81c
10005ef4:	31 c0                	xor    eax,eax
10005ef6:	5b                   	pop    ebx
10005ef7:	31 d2                	xor    edx,edx
10005ef9:	5e                   	pop    esi
10005efa:	5f                   	pop    edi
10005efb:	5d                   	pop    ebp
10005efc:	c3                   	ret    

10005efd <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10005efd:	83 ec 10             	sub    esp,0x10
10005f00:	6a 00                	push   0x0
10005f02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10005f06:	6a ff                	push   0xffffffff
10005f08:	e8 fc ff ff ff       	call   10005f09 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0xc>	10005f09: R_386_PC32	NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)
10005f0d:	58                   	pop    eax
10005f0e:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005f10: R_386_32	desktop
10005f14:	e8 fc ff ff ff       	call   10005f15 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x18>	10005f15: R_386_PC32	NIDesktop::completeRefresh()
10005f19:	31 c0                	xor    eax,eax
10005f1b:	31 d2                	xor    edx,edx
10005f1d:	83 c4 1c             	add    esp,0x1c
10005f20:	c3                   	ret    

10005f21 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10005f21:	53                   	push   ebx
10005f22:	83 ec 14             	sub    esp,0x14
10005f25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10005f29:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
10005f2f:	53                   	push   ebx
10005f30:	e8 fc ff ff ff       	call   10005f31 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x10>	10005f31: R_386_PC32	NIWindow::request()
10005f35:	89 1c 24             	mov    DWORD PTR [esp],ebx
10005f38:	e8 fc ff ff ff       	call   10005f39 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x18>	10005f39: R_386_PC32	NIWindow::drawBasicWindow()
10005f3d:	31 c0                	xor    eax,eax
10005f3f:	31 d2                	xor    edx,edx
10005f41:	83 c4 18             	add    esp,0x18
10005f44:	5b                   	pop    ebx
10005f45:	c3                   	ret    

10005f46 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)>:
10005f46:	55                   	push   ebp
10005f47:	57                   	push   edi
10005f48:	56                   	push   esi
10005f49:	53                   	push   ebx
10005f4a:	83 ec 38             	sub    esp,0x38
10005f4d:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
10005f51:	8b 9d a0 00 00 00    	mov    ebx,DWORD PTR [ebp+0xa0]
10005f57:	53                   	push   ebx
10005f58:	e8 fc ff ff ff       	call   10005f59 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x13>	10005f59: R_386_PC32	NIWindow::getEventCount()
10005f5d:	83 c4 10             	add    esp,0x10
10005f60:	85 c0                	test   eax,eax
10005f62:	74 54                	je     10005fb8 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x72>
10005f64:	89 e6                	mov    esi,esp
10005f66:	8d bd c0 00 00 00    	lea    edi,[ebp+0xc0]
10005f6c:	50                   	push   eax
10005f6d:	50                   	push   eax
10005f6e:	53                   	push   ebx
10005f6f:	56                   	push   esi
10005f70:	e8 fc ff ff ff       	call   10005f71 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x2b>	10005f71: R_386_PC32	NIWindow::grabEvent()
10005f75:	b9 06 00 00 00       	mov    ecx,0x6
10005f7a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005f7c:	8b 83 68 02 00 00    	mov    eax,DWORD PTR [ebx+0x268]
10005f82:	89 85 a4 00 00 00    	mov    DWORD PTR [ebp+0xa4],eax
10005f88:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
10005f8e:	89 85 a8 00 00 00    	mov    DWORD PTR [ebp+0xa8],eax
10005f94:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10005f9a:	89 85 ac 00 00 00    	mov    DWORD PTR [ebp+0xac],eax
10005fa0:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10005fa6:	89 85 b0 00 00 00    	mov    DWORD PTR [ebp+0xb0],eax
10005fac:	53                   	push   ebx
10005fad:	e8 fc ff ff ff       	call   10005fae <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x68>	10005fae: R_386_PC32	NIWindow::getEventCount()
10005fb2:	83 c4 10             	add    esp,0x10
10005fb5:	99                   	cdq    
10005fb6:	eb 05                	jmp    10005fbd <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x77>
10005fb8:	83 c8 ff             	or     eax,0xffffffff
10005fbb:	89 c2                	mov    edx,eax
10005fbd:	83 c4 2c             	add    esp,0x2c
10005fc0:	5b                   	pop    ebx
10005fc1:	5e                   	pop    esi
10005fc2:	5f                   	pop    edi
10005fc3:	5d                   	pop    ebp
10005fc4:	c3                   	ret    

10005fc5 <NiLinkCommandUpsync(unsigned long, NiLinkWindowStruct*)>:
10005fc5:	83 ec 18             	sub    esp,0x18
10005fc8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10005fcc:	8b 82 a0 00 00 00    	mov    eax,DWORD PTR [edx+0xa0]
10005fd2:	8b 8a a4 00 00 00    	mov    ecx,DWORD PTR [edx+0xa4]
10005fd8:	89 88 68 02 00 00    	mov    DWORD PTR [eax+0x268],ecx
10005fde:	8b 8a a8 00 00 00    	mov    ecx,DWORD PTR [edx+0xa8]
10005fe4:	89 88 6c 02 00 00    	mov    DWORD PTR [eax+0x26c],ecx
10005fea:	8b 8a ac 00 00 00    	mov    ecx,DWORD PTR [edx+0xac]
10005ff0:	89 88 70 02 00 00    	mov    DWORD PTR [eax+0x270],ecx
10005ff6:	8b 92 b0 00 00 00    	mov    edx,DWORD PTR [edx+0xb0]
10005ffc:	89 90 74 02 00 00    	mov    DWORD PTR [eax+0x274],edx
10006002:	50                   	push   eax
10006003:	e8 fc ff ff ff       	call   10006004 <NiLinkCommandUpsync(unsigned long, NiLinkWindowStruct*)+0x3f>	10006004: R_386_PC32	NIWindow::rerender()
10006008:	31 c0                	xor    eax,eax
1000600a:	31 d2                	xor    edx,edx
1000600c:	83 c4 1c             	add    esp,0x1c
1000600f:	c3                   	ret    

10006010 <NiLinkCommandReadFlags(unsigned long, NiLinkWindowStruct*)>:
10006010:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10006014:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
1000601a:	8b 8a 90 02 00 00    	mov    ecx,DWORD PTR [edx+0x290]
10006020:	89 88 b4 00 00 00    	mov    DWORD PTR [eax+0xb4],ecx
10006026:	8b 8a 68 02 00 00    	mov    ecx,DWORD PTR [edx+0x268]
1000602c:	89 88 a4 00 00 00    	mov    DWORD PTR [eax+0xa4],ecx
10006032:	8b 8a 6c 02 00 00    	mov    ecx,DWORD PTR [edx+0x26c]
10006038:	89 88 a8 00 00 00    	mov    DWORD PTR [eax+0xa8],ecx
1000603e:	8b 8a 70 02 00 00    	mov    ecx,DWORD PTR [edx+0x270]
10006044:	89 88 ac 00 00 00    	mov    DWORD PTR [eax+0xac],ecx
1000604a:	8b 92 74 02 00 00    	mov    edx,DWORD PTR [edx+0x274]
10006050:	89 90 b0 00 00 00    	mov    DWORD PTR [eax+0xb0],edx
10006056:	31 c0                	xor    eax,eax
10006058:	31 d2                	xor    edx,edx
1000605a:	c3                   	ret    

1000605b <NiLinkCommandUpdateFlags(unsigned long, NiLinkWindowStruct*)>:
1000605b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000605f:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
10006065:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [eax+0xb4]
1000606b:	89 82 90 02 00 00    	mov    DWORD PTR [edx+0x290],eax
10006071:	31 c0                	xor    eax,eax
10006073:	31 d2                	xor    edx,edx
10006075:	c3                   	ret    

10006076 <NiLinkCommandBeTheDesktop(unsigned long, unsigned char*)>:
10006076:	31 d2                	xor    edx,edx
10006078:	b8 01 00 00 00       	mov    eax,0x1
1000607d:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	1000607f: R_386_32	desktopWindowDummy
10006084:	75 0d                	jne    10006093 <NiLinkCommandBeTheDesktop(unsigned long, unsigned char*)+0x1d>
10006086:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000608a:	31 d2                	xor    edx,edx
1000608c:	a3 00 00 00 00       	mov    ds:0x0,eax	1000608d: R_386_32	desktopWindowDummy
10006091:	31 c0                	xor    eax,eax
10006093:	c3                   	ret    

10006094 <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)>:
10006094:	53                   	push   ebx
10006095:	83 ec 08             	sub    esp,0x8
10006098:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000609c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000609d: R_386_32	desktop
100060a1:	85 d2                	test   edx,edx
100060a3:	75 0c                	jne    100060b1 <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x1d>
100060a5:	c7 80 20 04 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x420],0x0
100060af:	eb 20                	jmp    100060d1 <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x3d>
100060b1:	83 fa 01             	cmp    edx,0x1
100060b4:	75 0c                	jne    100060c2 <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x2e>
100060b6:	c7 80 20 04 00 00 00 02 00 00 	mov    DWORD PTR [eax+0x420],0x200
100060c0:	eb 0f                	jmp    100060d1 <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x3d>
100060c2:	83 fa 02             	cmp    edx,0x2
100060c5:	75 0a                	jne    100060d1 <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x3d>
100060c7:	c7 80 20 04 00 00 00 01 00 00 	mov    DWORD PTR [eax+0x420],0x100
100060d1:	8b 88 14 04 00 00    	mov    ecx,DWORD PTR [eax+0x414]
100060d7:	8b 90 18 04 00 00    	mov    edx,DWORD PTR [eax+0x418]
100060dd:	53                   	push   ebx
100060de:	53                   	push   ebx
100060df:	8d 59 20             	lea    ebx,[ecx+0x20]
100060e2:	6a 00                	push   0x0
100060e4:	53                   	push   ebx
100060e5:	51                   	push   ecx
100060e6:	8d 4a 20             	lea    ecx,[edx+0x20]
100060e9:	51                   	push   ecx
100060ea:	52                   	push   edx
100060eb:	50                   	push   eax
100060ec:	e8 fc ff ff ff       	call   100060ed <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x59>	100060ed: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
100060f1:	83 c4 14             	add    esp,0x14
100060f4:	a1 00 00 00 00       	mov    eax,ds:0x0	100060f5: R_386_32	desktop
100060f9:	8b 10                	mov    edx,DWORD PTR [eax]
100060fb:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
10006101:	8b 19                	mov    ebx,DWORD PTR [ecx]
10006103:	6a 00                	push   0x0
10006105:	8b 90 20 04 00 00    	mov    edx,DWORD PTR [eax+0x420]
1000610b:	81 c2 00 00 00 00    	add    edx,0x0	1000610d: R_386_32	___mouse_data
10006111:	52                   	push   edx
10006112:	ff b0 18 04 00 00    	push   DWORD PTR [eax+0x418]
10006118:	ff b0 14 04 00 00    	push   DWORD PTR [eax+0x414]
1000611e:	51                   	push   ecx
1000611f:	ff 53 30             	call   DWORD PTR [ebx+0x30]
10006122:	31 c0                	xor    eax,eax
10006124:	31 d2                	xor    edx,edx
10006126:	83 c4 28             	add    esp,0x28
10006129:	5b                   	pop    ebx
1000612a:	c3                   	ret    

1000612b <NiSystemCallHandler(regs*)>:
1000612b:	53                   	push   ebx
1000612c:	83 ec 08             	sub    esp,0x8
1000612f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10006133:	fa                   	cli    
10006134:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	10006136: R_386_32	irqDisableCounter
1000613a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
1000613f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
10006142:	80 88 76 02 00 00 80 	or     BYTE PTR [eax+0x276],0x80
10006149:	8b 59 20             	mov    ebx,DWORD PTR [ecx+0x20]
1000614c:	83 fb 08             	cmp    ebx,0x8
1000614f:	0f 84 02 01 00 00    	je     10006257 <NiSystemCallHandler(regs*)+0x12c>
10006155:	77 4f                	ja     100061a6 <NiSystemCallHandler(regs*)+0x7b>
10006157:	83 fb 04             	cmp    ebx,0x4
1000615a:	0f 84 c2 00 00 00    	je     10006222 <NiSystemCallHandler(regs*)+0xf7>
10006160:	77 13                	ja     10006175 <NiSystemCallHandler(regs*)+0x4a>
10006162:	85 db                	test   ebx,ebx
10006164:	0f 84 94 00 00 00    	je     100061fe <NiSystemCallHandler(regs*)+0xd3>
1000616a:	83 fb 03             	cmp    ebx,0x3
1000616d:	0f 84 9d 00 00 00    	je     10006210 <NiSystemCallHandler(regs*)+0xe5>
10006173:	eb 7f                	jmp    100061f4 <NiSystemCallHandler(regs*)+0xc9>
10006175:	83 fb 06             	cmp    ebx,0x6
10006178:	0f 84 b6 00 00 00    	je     10006234 <NiSystemCallHandler(regs*)+0x109>
1000617e:	8b 41 24             	mov    eax,DWORD PTR [ecx+0x24]
10006181:	0f 87 bc 00 00 00    	ja     10006243 <NiSystemCallHandler(regs*)+0x118>
10006187:	83 ec 0c             	sub    esp,0xc
1000618a:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
10006190:	53                   	push   ebx
10006191:	e8 fc ff ff ff       	call   10006192 <NiSystemCallHandler(regs*)+0x67>	10006192: R_386_PC32	NIWindow::request()
10006196:	89 1c 24             	mov    DWORD PTR [esp],ebx
10006199:	e8 fc ff ff ff       	call   1000619a <NiSystemCallHandler(regs*)+0x6f>	1000619a: R_386_PC32	NIWindow::drawBasicWindow()
1000619e:	83 c4 10             	add    esp,0x10
100061a1:	e9 f7 00 00 00       	jmp    1000629d <NiSystemCallHandler(regs*)+0x172>
100061a6:	83 fb 0c             	cmp    ebx,0xc
100061a9:	0f 84 d6 00 00 00    	je     10006285 <NiSystemCallHandler(regs*)+0x15a>
100061af:	77 21                	ja     100061d2 <NiSystemCallHandler(regs*)+0xa7>
100061b1:	83 fb 0a             	cmp    ebx,0xa
100061b4:	0f 84 ac 00 00 00    	je     10006266 <NiSystemCallHandler(regs*)+0x13b>
100061ba:	0f 87 b6 00 00 00    	ja     10006276 <NiSystemCallHandler(regs*)+0x14b>
100061c0:	50                   	push   eax
100061c1:	50                   	push   eax
100061c2:	ff 71 24             	push   DWORD PTR [ecx+0x24]
100061c5:	ff 71 28             	push   DWORD PTR [ecx+0x28]
100061c8:	e8 fc ff ff ff       	call   100061c9 <NiSystemCallHandler(regs*)+0x9e>	100061c9: R_386_PC32	NiLinkCommandReadFlags(unsigned long, NiLinkWindowStruct*)
100061cd:	e9 ed 00 00 00       	jmp    100062bf <NiSystemCallHandler(regs*)+0x194>
100061d2:	83 fb 0e             	cmp    ebx,0xe
100061d5:	0f 84 d7 00 00 00    	je     100062b2 <NiSystemCallHandler(regs*)+0x187>
100061db:	0f 82 c2 00 00 00    	jb     100062a3 <NiSystemCallHandler(regs*)+0x178>
100061e1:	31 d2                	xor    edx,edx
100061e3:	b8 04 00 00 00       	mov    eax,0x4
100061e8:	81 fb 96 78 34 a5    	cmp    ebx,0xa5347896
100061ee:	0f 84 ce 00 00 00    	je     100062c2 <NiSystemCallHandler(regs*)+0x197>
100061f4:	83 c8 ff             	or     eax,0xffffffff
100061f7:	89 c2                	mov    edx,eax
100061f9:	e9 c4 00 00 00       	jmp    100062c2 <NiSystemCallHandler(regs*)+0x197>
100061fe:	50                   	push   eax
100061ff:	50                   	push   eax
10006200:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10006203:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10006206:	e8 fc ff ff ff       	call   10006207 <NiSystemCallHandler(regs*)+0xdc>	10006207: R_386_PC32	NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)
1000620b:	e9 af 00 00 00       	jmp    100062bf <NiSystemCallHandler(regs*)+0x194>
10006210:	50                   	push   eax
10006211:	50                   	push   eax
10006212:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10006215:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10006218:	e8 fc ff ff ff       	call   10006219 <NiSystemCallHandler(regs*)+0xee>	10006219: R_386_PC32	NiLinkCommandDestroyWindow(unsigned long, NiLinkWindowStruct*)
1000621d:	e9 9d 00 00 00       	jmp    100062bf <NiSystemCallHandler(regs*)+0x194>
10006222:	53                   	push   ebx
10006223:	53                   	push   ebx
10006224:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10006227:	ff 71 28             	push   DWORD PTR [ecx+0x28]
1000622a:	e8 fc ff ff ff       	call   1000622b <NiSystemCallHandler(regs*)+0x100>	1000622b: R_386_PC32	NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)
1000622f:	e9 8b 00 00 00       	jmp    100062bf <NiSystemCallHandler(regs*)+0x194>
10006234:	52                   	push   edx
10006235:	52                   	push   edx
10006236:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10006239:	ff 71 28             	push   DWORD PTR [ecx+0x28]
1000623c:	e8 fc ff ff ff       	call   1000623d <NiSystemCallHandler(regs*)+0x112>	1000623d: R_386_PC32	NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)
10006241:	eb 7c                	jmp    100062bf <NiSystemCallHandler(regs*)+0x194>
10006243:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
10006249:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [eax+0xb4]
1000624f:	89 82 90 02 00 00    	mov    DWORD PTR [edx+0x290],eax
10006255:	eb 46                	jmp    1000629d <NiSystemCallHandler(regs*)+0x172>
10006257:	50                   	push   eax
10006258:	50                   	push   eax
10006259:	ff 71 24             	push   DWORD PTR [ecx+0x24]
1000625c:	ff 71 28             	push   DWORD PTR [ecx+0x28]
1000625f:	e8 fc ff ff ff       	call   10006260 <NiSystemCallHandler(regs*)+0x135>	10006260: R_386_PC32	NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)
10006264:	eb 59                	jmp    100062bf <NiSystemCallHandler(regs*)+0x194>
10006266:	50                   	push   eax
10006267:	6a 01                	push   0x1
10006269:	ff 71 24             	push   DWORD PTR [ecx+0x24]
1000626c:	ff 71 28             	push   DWORD PTR [ecx+0x28]
1000626f:	e8 fc ff ff ff       	call   10006270 <NiSystemCallHandler(regs*)+0x145>	10006270: R_386_PC32	NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)
10006274:	eb 49                	jmp    100062bf <NiSystemCallHandler(regs*)+0x194>
10006276:	50                   	push   eax
10006277:	50                   	push   eax
10006278:	ff 71 24             	push   DWORD PTR [ecx+0x24]
1000627b:	ff 71 28             	push   DWORD PTR [ecx+0x28]
1000627e:	e8 fc ff ff ff       	call   1000627f <NiSystemCallHandler(regs*)+0x154>	1000627f: R_386_PC32	NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)
10006283:	eb 3a                	jmp    100062bf <NiSystemCallHandler(regs*)+0x194>
10006285:	31 d2                	xor    edx,edx
10006287:	b8 01 00 00 00       	mov    eax,0x1
1000628c:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	1000628e: R_386_32	desktopWindowDummy
10006293:	75 2d                	jne    100062c2 <NiSystemCallHandler(regs*)+0x197>
10006295:	8b 41 24             	mov    eax,DWORD PTR [ecx+0x24]
10006298:	a3 00 00 00 00       	mov    ds:0x0,eax	10006299: R_386_32	desktopWindowDummy
1000629d:	31 c0                	xor    eax,eax
1000629f:	31 d2                	xor    edx,edx
100062a1:	eb 1f                	jmp    100062c2 <NiSystemCallHandler(regs*)+0x197>
100062a3:	50                   	push   eax
100062a4:	50                   	push   eax
100062a5:	ff 71 24             	push   DWORD PTR [ecx+0x24]
100062a8:	ff 71 28             	push   DWORD PTR [ecx+0x28]
100062ab:	e8 fc ff ff ff       	call   100062ac <NiSystemCallHandler(regs*)+0x181>	100062ac: R_386_PC32	NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)
100062b0:	eb 0d                	jmp    100062bf <NiSystemCallHandler(regs*)+0x194>
100062b2:	50                   	push   eax
100062b3:	50                   	push   eax
100062b4:	ff 71 24             	push   DWORD PTR [ecx+0x24]
100062b7:	ff 71 28             	push   DWORD PTR [ecx+0x28]
100062ba:	e8 fc ff ff ff       	call   100062bb <NiSystemCallHandler(regs*)+0x190>	100062bb: R_386_PC32	NiLinkCommandUpsync(unsigned long, NiLinkWindowStruct*)
100062bf:	83 c4 10             	add    esp,0x10
100062c2:	f0 ff 0d 00 00 00 00 	lock dec DWORD PTR ds:0x0	100062c5: R_386_32	irqDisableCounter
100062c9:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100062cb: R_386_32	irqDisableCounter
100062d0:	75 01                	jne    100062d3 <NiSystemCallHandler(regs*)+0x1a8>
100062d2:	fb                   	sti    
100062d3:	83 c4 08             	add    esp,0x8
100062d6:	5b                   	pop    ebx
100062d7:	c3                   	ret    

100062d8 <NIWindow::postEvent(NiEvent)>:
100062d8:	55                   	push   ebp
100062d9:	57                   	push   edi
100062da:	56                   	push   esi
100062db:	53                   	push   ebx
100062dc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100062e0:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
100062e3:	83 fd 18             	cmp    ebp,0x18
100062e6:	74 25                	je     1000630d <NIWindow::postEvent(NiEvent)+0x35>
100062e8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
100062eb:	8d 74 24 18          	lea    esi,[esp+0x18]
100062ef:	6b d0 18             	imul   edx,eax,0x18
100062f2:	b9 06 00 00 00       	mov    ecx,0x6
100062f7:	8d 7c 13 1c          	lea    edi,[ebx+edx*1+0x1c]
100062fb:	40                   	inc    eax
100062fc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100062fe:	99                   	cdq    
100062ff:	b9 18 00 00 00       	mov    ecx,0x18
10006304:	45                   	inc    ebp
10006305:	f7 f9                	idiv   ecx
10006307:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
1000630a:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
1000630d:	5b                   	pop    ebx
1000630e:	5e                   	pop    esi
1000630f:	5f                   	pop    edi
10006310:	5d                   	pop    ebp
10006311:	c3                   	ret    

10006312 <NIWindow::getEventCount()>:
10006312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10006316:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10006319:	c3                   	ret    

1000631a <NIWindow::grabEvent()>:
1000631a:	57                   	push   edi
1000631b:	b9 06 00 00 00       	mov    ecx,0x6
10006320:	56                   	push   esi
10006321:	53                   	push   ebx
10006322:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10006326:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
1000632a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
1000632d:	6b c2 18             	imul   eax,edx,0x18
10006330:	01 d8                	add    eax,ebx
10006332:	8d 70 1c             	lea    esi,[eax+0x1c]
10006335:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006337:	b9 18 00 00 00       	mov    ecx,0x18
1000633c:	81 60 20 ff 1f 00 80 	and    DWORD PTR [eax+0x20],0x80001fff
10006343:	8d 42 01             	lea    eax,[edx+0x1]
10006346:	ff 4b 10             	dec    DWORD PTR [ebx+0x10]
10006349:	99                   	cdq    
1000634a:	f7 f9                	idiv   ecx
1000634c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10006350:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
10006353:	5b                   	pop    ebx
10006354:	5e                   	pop    esi
10006355:	5f                   	pop    edi
10006356:	c2 04 00             	ret    0x4
10006359:	90                   	nop

1000635a <NIWindow::invalidate()>:
1000635a:	53                   	push   ebx
1000635b:	83 ec 08             	sub    esp,0x8
1000635e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10006362:	80 bb 5c 02 00 00 00 	cmp    BYTE PTR [ebx+0x25c],0x0
10006369:	74 28                	je     10006393 <NIWindow::invalidate()+0x39>
1000636b:	83 bb 64 02 00 00 00 	cmp    DWORD PTR [ebx+0x264],0x0
10006372:	74 1f                	je     10006393 <NIWindow::invalidate()+0x39>
10006374:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10006377:	85 c0                	test   eax,eax
10006379:	74 18                	je     10006393 <NIWindow::invalidate()+0x39>
1000637b:	83 ec 0c             	sub    esp,0xc
1000637e:	50                   	push   eax
1000637f:	e8 fc ff ff ff       	call   10006380 <NIWindow::invalidate()+0x26>	10006380: R_386_PC32	free
10006384:	59                   	pop    ecx
10006385:	ff b3 64 02 00 00    	push   DWORD PTR [ebx+0x264]
1000638b:	e8 fc ff ff ff       	call   1000638c <NIWindow::invalidate()+0x32>	1000638c: R_386_PC32	free
10006390:	83 c4 10             	add    esp,0x10
10006393:	c7 83 64 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x264],0x0
1000639d:	c7 83 60 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x260],0x0
100063a7:	c6 83 5c 02 00 00 00 	mov    BYTE PTR [ebx+0x25c],0x0
100063ae:	c6 43 0c 00          	mov    BYTE PTR [ebx+0xc],0x0
100063b2:	83 8b 90 02 00 00 10 	or     DWORD PTR [ebx+0x290],0x10
100063b9:	83 c4 08             	add    esp,0x8
100063bc:	5b                   	pop    ebx
100063bd:	c3                   	ret    

100063be <NIWindow::putpixel(int, int, unsigned int)>:
100063be:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
100063c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100063c6:	8b 91 70 02 00 00    	mov    edx,DWORD PTR [ecx+0x270]
100063cc:	0f af c2             	imul   eax,edx
100063cf:	0f af 91 60 02 00 00 	imul   edx,DWORD PTR [ecx+0x260]
100063d6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
100063da:	39 c2                	cmp    edx,eax
100063dc:	7c 0a                	jl     100063e8 <NIWindow::putpixel(int, int, unsigned int)+0x2a>
100063de:	8b 51 08             	mov    edx,DWORD PTR [ecx+0x8]
100063e1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100063e5:	89 0c 82             	mov    DWORD PTR [edx+eax*4],ecx
100063e8:	c3                   	ret    
100063e9:	90                   	nop

100063ea <NIWindow::drawBasicWindow()>:
100063ea:	55                   	push   ebp
100063eb:	57                   	push   edi
100063ec:	56                   	push   esi
100063ed:	31 f6                	xor    esi,esi
100063ef:	53                   	push   ebx
100063f0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
100063f4:	39 b5 74 02 00 00    	cmp    DWORD PTR [ebp+0x274],esi
100063fa:	7e 31                	jle    1000642d <NIWindow::drawBasicWindow()+0x43>
100063fc:	31 db                	xor    ebx,ebx
100063fe:	83 fe 19             	cmp    esi,0x19
10006401:	0f 9e c3             	setle  bl
10006404:	31 ff                	xor    edi,edi
10006406:	4b                   	dec    ebx
10006407:	81 e3 d5 d4 d4 ff    	and    ebx,0xffd4d4d5
1000640d:	81 c3 ff ff ff 00    	add    ebx,0xffffff
10006413:	39 bd 70 02 00 00    	cmp    DWORD PTR [ebp+0x270],edi
10006419:	7e 0f                	jle    1000642a <NIWindow::drawBasicWindow()+0x40>
1000641b:	53                   	push   ebx
1000641c:	56                   	push   esi
1000641d:	57                   	push   edi
1000641e:	47                   	inc    edi
1000641f:	55                   	push   ebp
10006420:	e8 fc ff ff ff       	call   10006421 <NIWindow::drawBasicWindow()+0x37>	10006421: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10006425:	83 c4 10             	add    esp,0x10
10006428:	eb e9                	jmp    10006413 <NIWindow::drawBasicWindow()+0x29>
1000642a:	46                   	inc    esi
1000642b:	eb c7                	jmp    100063f4 <NIWindow::drawBasicWindow()+0xa>
1000642d:	5b                   	pop    ebx
1000642e:	5e                   	pop    esi
1000642f:	5f                   	pop    edi
10006430:	5d                   	pop    ebp
10006431:	c3                   	ret    

10006432 <NIWindow::rerender()>:
10006432:	57                   	push   edi
10006433:	56                   	push   esi
10006434:	53                   	push   ebx
10006435:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10006439:	80 bb 5c 02 00 00 00 	cmp    BYTE PTR [ebx+0x25c],0x0
10006440:	74 0c                	je     1000644e <NIWindow::rerender()+0x1c>
10006442:	83 ec 0c             	sub    esp,0xc
10006445:	53                   	push   ebx
10006446:	e8 fc ff ff ff       	call   10006447 <NIWindow::rerender()+0x15>	10006447: R_386_PC32	NIWindow::invalidate()
1000644b:	83 c4 10             	add    esp,0x10
1000644e:	8b b3 74 02 00 00    	mov    esi,DWORD PTR [ebx+0x274]
10006454:	83 ec 0c             	sub    esp,0xc
10006457:	89 b3 60 02 00 00    	mov    DWORD PTR [ebx+0x260],esi
1000645d:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
10006464:	50                   	push   eax
10006465:	e8 fc ff ff ff       	call   10006466 <NIWindow::rerender()+0x34>	10006466: R_386_PC32	malloc
1000646a:	0f af b3 70 02 00 00 	imul   esi,DWORD PTR [ebx+0x270]
10006471:	89 83 64 02 00 00    	mov    DWORD PTR [ebx+0x264],eax
10006477:	0f af 73 04          	imul   esi,DWORD PTR [ebx+0x4]
1000647b:	89 34 24             	mov    DWORD PTR [esp],esi
1000647e:	e8 fc ff ff ff       	call   1000647f <NIWindow::rerender()+0x4d>	1000647f: R_386_PC32	malloc
10006483:	83 c4 10             	add    esp,0x10
10006486:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10006489:	31 c0                	xor    eax,eax
1000648b:	39 83 60 02 00 00    	cmp    DWORD PTR [ebx+0x260],eax
10006491:	0f 8e 91 00 00 00    	jle    10006528 <NIWindow::rerender()+0xf6>
10006497:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000649e:	8b 8b 64 02 00 00    	mov    ecx,DWORD PTR [ebx+0x264]
100064a4:	01 d1                	add    ecx,edx
100064a6:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
100064ad:	75 61                	jne    10006510 <NIWindow::rerender()+0xde>
100064af:	f6 83 90 02 00 00 80 	test   BYTE PTR [ebx+0x290],0x80
100064b6:	75 58                	jne    10006510 <NIWindow::rerender()+0xde>
100064b8:	83 f8 06             	cmp    eax,0x6
100064bb:	7f 1e                	jg     100064db <NIWindow::rerender()+0xa9>
100064bd:	8b 34 85 00 00 00 00 	mov    esi,DWORD PTR [eax*4+0x0]	100064c0: R_386_32	curveLookup7
100064c4:	66 89 31             	mov    WORD PTR [ecx],si
100064c7:	8b 8b 64 02 00 00    	mov    ecx,DWORD PTR [ebx+0x264]
100064cd:	8b 34 85 00 00 00 00 	mov    esi,DWORD PTR [eax*4+0x0]	100064d0: R_386_32	curveLookup7
100064d4:	66 89 74 11 02       	mov    WORD PTR [ecx+edx*1+0x2],si
100064d9:	eb 47                	jmp    10006522 <NIWindow::rerender()+0xf0>
100064db:	8b b3 74 02 00 00    	mov    esi,DWORD PTR [ebx+0x274]
100064e1:	8d 7e fa             	lea    edi,[esi-0x6]
100064e4:	39 c7                	cmp    edi,eax
100064e6:	7f 28                	jg     10006510 <NIWindow::rerender()+0xde>
100064e8:	29 c6                	sub    esi,eax
100064ea:	8b 34 b5 00 00 00 00 	mov    esi,DWORD PTR [esi*4+0x0]	100064ed: R_386_32	curveLookup7
100064f1:	66 89 31             	mov    WORD PTR [ecx],si
100064f4:	8b 8b 74 02 00 00    	mov    ecx,DWORD PTR [ebx+0x274]
100064fa:	8b b3 64 02 00 00    	mov    esi,DWORD PTR [ebx+0x264]
10006500:	29 c1                	sub    ecx,eax
10006502:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10006505: R_386_32	curveLookup7
10006509:	66 89 4c 16 02       	mov    WORD PTR [esi+edx*1+0x2],cx
1000650e:	eb 12                	jmp    10006522 <NIWindow::rerender()+0xf0>
10006510:	66 c7 01 00 00       	mov    WORD PTR [ecx],0x0
10006515:	8b 8b 64 02 00 00    	mov    ecx,DWORD PTR [ebx+0x264]
1000651b:	66 c7 44 11 02 00 00 	mov    WORD PTR [ecx+edx*1+0x2],0x0
10006522:	40                   	inc    eax
10006523:	e9 63 ff ff ff       	jmp    1000648b <NIWindow::rerender()+0x59>
10006528:	8b 83 90 02 00 00    	mov    eax,DWORD PTR [ebx+0x290]
1000652e:	c6 83 5c 02 00 00 01 	mov    BYTE PTR [ebx+0x25c],0x1
10006535:	a8 02                	test   al,0x2
10006537:	75 31                	jne    1000656a <NIWindow::rerender()+0x138>
10006539:	a8 04                	test   al,0x4
1000653b:	74 18                	je     10006555 <NIWindow::rerender()+0x123>
1000653d:	8b 8b 74 02 00 00    	mov    ecx,DWORD PTR [ebx+0x274]
10006543:	31 c0                	xor    eax,eax
10006545:	0f af 8b 70 02 00 00 	imul   ecx,DWORD PTR [ebx+0x270]
1000654c:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
1000654f:	0f af 4b 04          	imul   ecx,DWORD PTR [ebx+0x4]
10006553:	f3 aa                	rep stos BYTE PTR es:[edi],al
10006555:	f6 83 90 02 00 00 08 	test   BYTE PTR [ebx+0x290],0x8
1000655c:	74 0c                	je     1000656a <NIWindow::rerender()+0x138>
1000655e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
10006562:	5b                   	pop    ebx
10006563:	5e                   	pop    esi
10006564:	5f                   	pop    edi
10006565:	e9 80 fe ff ff       	jmp    100063ea <NIWindow::drawBasicWindow()>
1000656a:	5b                   	pop    ebx
1000656b:	5e                   	pop    esi
1000656c:	5f                   	pop    edi
1000656d:	c3                   	ret    

1000656e <NIWindow::changeContext(NIContext*, int, int)>:
1000656e:	55                   	push   ebp
1000656f:	57                   	push   edi
10006570:	56                   	push   esi
10006571:	53                   	push   ebx
10006572:	83 ec 18             	sub    esp,0x18
10006575:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10006579:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
1000657d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
10006581:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10006585:	53                   	push   ebx
10006586:	e8 fc ff ff ff       	call   10006587 <NIWindow::changeContext(NIContext*, int, int)+0x19>	10006587: R_386_PC32	NIWindow::invalidate()
1000658b:	89 33                	mov    DWORD PTR [ebx],esi
1000658d:	89 ab 68 02 00 00    	mov    DWORD PTR [ebx+0x268],ebp
10006593:	89 bb 6c 02 00 00    	mov    DWORD PTR [ebx+0x26c],edi
10006599:	83 c4 10             	add    esp,0x10
1000659c:	8b 86 18 04 00 00    	mov    eax,DWORD PTR [esi+0x418]
100065a2:	83 f8 08             	cmp    eax,0x8
100065a5:	7f 09                	jg     100065b0 <NIWindow::changeContext(NIContext*, int, int)+0x42>
100065a7:	c7 43 04 01 00 00 00 	mov    DWORD PTR [ebx+0x4],0x1
100065ae:	eb 15                	jmp    100065c5 <NIWindow::changeContext(NIContext*, int, int)+0x57>
100065b0:	83 f8 10             	cmp    eax,0x10
100065b3:	7f 09                	jg     100065be <NIWindow::changeContext(NIContext*, int, int)+0x50>
100065b5:	c7 43 04 02 00 00 00 	mov    DWORD PTR [ebx+0x4],0x2
100065bc:	eb 07                	jmp    100065c5 <NIWindow::changeContext(NIContext*, int, int)+0x57>
100065be:	c7 43 04 04 00 00 00 	mov    DWORD PTR [ebx+0x4],0x4
100065c5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
100065c9:	83 c4 0c             	add    esp,0xc
100065cc:	5b                   	pop    ebx
100065cd:	5e                   	pop    esi
100065ce:	5f                   	pop    edi
100065cf:	5d                   	pop    ebp
100065d0:	e9 5d fe ff ff       	jmp    10006432 <NIWindow::rerender()>
100065d5:	90                   	nop

100065d6 <NIWindow::NIWindow(NIContext*, int, int, int, int)>:
100065d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100065da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100065de:	c7 80 8c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x28c],0x0
100065e8:	89 90 70 02 00 00    	mov    DWORD PTR [eax+0x270],edx
100065ee:	c6 80 78 02 00 00 00 	mov    BYTE PTR [eax+0x278],0x0
100065f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100065f9:	c7 80 90 02 00 00 00 02 00 00 	mov    DWORD PTR [eax+0x290],0x200
10006603:	89 90 74 02 00 00    	mov    DWORD PTR [eax+0x274],edx
10006609:	c6 80 5c 02 00 00 00 	mov    BYTE PTR [eax+0x25c],0x0
10006610:	c7 80 64 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x264],0x0
1000661a:	c7 80 60 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x260],0x0
10006624:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
1000662b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10006632:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
10006639:	e9 30 ff ff ff       	jmp    1000656e <NIWindow::changeContext(NIContext*, int, int)>

1000663e <NIWindow::request()>:
1000663e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10006642:	80 b8 5c 02 00 00 00 	cmp    BYTE PTR [eax+0x25c],0x0
10006649:	75 05                	jne    10006650 <NIWindow::request()+0x12>
1000664b:	e9 e2 fd ff ff       	jmp    10006432 <NIWindow::rerender()>
10006650:	c3                   	ret    
10006651:	90                   	nop

10006652 <NIWindow::SHADOW_TEST()>:
10006652:	55                   	push   ebp
10006653:	57                   	push   edi
10006654:	56                   	push   esi
10006655:	53                   	push   ebx
10006656:	83 ec 28             	sub    esp,0x28
10006659:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
1000665d:	53                   	push   ebx
1000665e:	e8 fc ff ff ff       	call   1000665f <NIWindow::SHADOW_TEST()+0xd>	1000665f: R_386_PC32	NIWindow::request()
10006663:	83 c4 10             	add    esp,0x10
10006666:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
1000666c:	39 83 60 02 00 00    	cmp    DWORD PTR [ebx+0x260],eax
10006672:	74 10                	je     10006684 <NIWindow::SHADOW_TEST()+0x32>
10006674:	83 ec 0c             	sub    esp,0xc
10006677:	68 31 6f 00 10       	push   0x10006f31	10006678: R_386_32	.text
1000667c:	e8 fc ff ff ff       	call   1000667d <NIWindow::SHADOW_TEST()+0x2b>	1000667d: R_386_PC32	KePanic(char const*)
10006681:	83 c4 10             	add    esp,0x10
10006684:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
10006688:	0f 85 3a 01 00 00    	jne    100067c8 <NIWindow::SHADOW_TEST()+0x176>
1000668e:	c7 44 24 04 05 00 00 00 	mov    DWORD PTR [esp+0x4],0x5
10006696:	31 ff                	xor    edi,edi
10006698:	39 bb 74 02 00 00    	cmp    DWORD PTR [ebx+0x274],edi
1000669e:	0f 8e 24 01 00 00    	jle    100067c8 <NIWindow::SHADOW_TEST()+0x176>
100066a4:	8b 83 64 02 00 00    	mov    eax,DWORD PTR [ebx+0x264]
100066aa:	8d 04 b8             	lea    eax,[eax+edi*4]
100066ad:	0f b7 30             	movzx  esi,WORD PTR [eax]
100066b0:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
100066b4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
100066b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100066bc:	89 34 24             	mov    DWORD PTR [esp],esi
100066bf:	8b ab 70 02 00 00    	mov    ebp,DWORD PTR [ebx+0x270]
100066c5:	8b 8b 74 02 00 00    	mov    ecx,DWORD PTR [ebx+0x274]
100066cb:	2b 6c 24 0c          	sub    ebp,DWORD PTR [esp+0xc]
100066cf:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
100066d2:	0f 8e da 00 00 00    	jle    100067b2 <NIWindow::SHADOW_TEST()+0x160>
100066d8:	83 ff 05             	cmp    edi,0x5
100066db:	7e 1f                	jle    100066fc <NIWindow::SHADOW_TEST()+0xaa>
100066dd:	8d 41 fb             	lea    eax,[ecx-0x5]
100066e0:	39 f8                	cmp    eax,edi
100066e2:	7e 18                	jle    100066fc <NIWindow::SHADOW_TEST()+0xaa>
100066e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100066e8:	83 c0 05             	add    eax,0x5
100066eb:	3b 04 24             	cmp    eax,DWORD PTR [esp]
100066ee:	7d 0c                	jge    100066fc <NIWindow::SHADOW_TEST()+0xaa>
100066f0:	8d 45 fb             	lea    eax,[ebp-0x5]
100066f3:	3b 04 24             	cmp    eax,DWORD PTR [esp]
100066f6:	0f 8f ae 00 00 00    	jg     100067aa <NIWindow::SHADOW_TEST()+0x158>
100066fc:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
10006700:	be ea 01 00 00       	mov    esi,0x1ea
10006705:	29 f9                	sub    ecx,edi
10006707:	89 f0                	mov    eax,esi
10006709:	83 c1 04             	add    ecx,0x4
1000670c:	99                   	cdq    
1000670d:	f7 f9                	idiv   ecx
1000670f:	89 c1                	mov    ecx,eax
10006711:	89 f0                	mov    eax,esi
10006713:	99                   	cdq    
10006714:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
10006718:	83 f8 0a             	cmp    eax,0xa
1000671b:	7d 05                	jge    10006722 <NIWindow::SHADOW_TEST()+0xd0>
1000671d:	b8 0a 00 00 00       	mov    eax,0xa
10006722:	39 c1                	cmp    ecx,eax
10006724:	7d 02                	jge    10006728 <NIWindow::SHADOW_TEST()+0xd6>
10006726:	89 c1                	mov    ecx,eax
10006728:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
1000672b:	b8 ea 01 00 00       	mov    eax,0x1ea
10006730:	83 c5 04             	add    ebp,0x4
10006733:	99                   	cdq    
10006734:	f7 fd                	idiv   ebp
10006736:	89 c6                	mov    esi,eax
10006738:	83 f8 0a             	cmp    eax,0xa
1000673b:	7d 05                	jge    10006742 <NIWindow::SHADOW_TEST()+0xf0>
1000673d:	be 0a 00 00 00       	mov    esi,0xa
10006742:	8b 04 24             	mov    eax,DWORD PTR [esp]
10006745:	8d 68 05             	lea    ebp,[eax+0x5]
10006748:	b8 ea 01 00 00       	mov    eax,0x1ea
1000674d:	99                   	cdq    
1000674e:	f7 fd                	idiv   ebp
10006750:	39 c6                	cmp    esi,eax
10006752:	7d 02                	jge    10006756 <NIWindow::SHADOW_TEST()+0x104>
10006754:	89 c6                	mov    esi,eax
10006756:	89 f0                	mov    eax,esi
10006758:	89 ca                	mov    edx,ecx
1000675a:	0f af c6             	imul   eax,esi
1000675d:	0f af d1             	imul   edx,ecx
10006760:	0f af f1             	imul   esi,ecx
10006763:	01 d0                	add    eax,edx
10006765:	8d 04 c6             	lea    eax,[esi+eax*8]
10006768:	c1 f8 08             	sar    eax,0x8
1000676b:	83 f8 66             	cmp    eax,0x66
1000676e:	7e 4c                	jle    100067bc <NIWindow::SHADOW_TEST()+0x16a>
10006770:	8d 50 9a             	lea    edx,[eax-0x66]
10006773:	d1 fa                	sar    edx,1
10006775:	8d 42 66             	lea    eax,[edx+0x66]
10006778:	83 f8 73             	cmp    eax,0x73
1000677b:	7e 3f                	jle    100067bc <NIWindow::SHADOW_TEST()+0x16a>
1000677d:	83 ea 0d             	sub    edx,0xd
10006780:	c1 fa 02             	sar    edx,0x2
10006783:	8d 42 73             	lea    eax,[edx+0x73]
10006786:	83 f8 7f             	cmp    eax,0x7f
10006789:	7f 1f                	jg     100067aa <NIWindow::SHADOW_TEST()+0x158>
1000678b:	50                   	push   eax
1000678c:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
10006792:	01 f8                	add    eax,edi
10006794:	50                   	push   eax
10006795:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10006799:	03 83 68 02 00 00    	add    eax,DWORD PTR [ebx+0x268]
1000679f:	50                   	push   eax
100067a0:	ff 33                	push   DWORD PTR [ebx]
100067a2:	e8 fc ff ff ff       	call   100067a3 <NIWindow::SHADOW_TEST()+0x151>	100067a3: R_386_PC32	NIContext::drvDarken4(int, int, int)
100067a7:	83 c4 10             	add    esp,0x10
100067aa:	ff 04 24             	inc    DWORD PTR [esp]
100067ad:	e9 0d ff ff ff       	jmp    100066bf <NIWindow::SHADOW_TEST()+0x6d>
100067b2:	47                   	inc    edi
100067b3:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
100067b7:	e9 dc fe ff ff       	jmp    10006698 <NIWindow::SHADOW_TEST()+0x46>
100067bc:	83 f8 0a             	cmp    eax,0xa
100067bf:	7d ca                	jge    1000678b <NIWindow::SHADOW_TEST()+0x139>
100067c1:	b8 0a 00 00 00       	mov    eax,0xa
100067c6:	eb c3                	jmp    1000678b <NIWindow::SHADOW_TEST()+0x139>
100067c8:	83 c4 1c             	add    esp,0x1c
100067cb:	5b                   	pop    ebx
100067cc:	5e                   	pop    esi
100067cd:	5f                   	pop    edi
100067ce:	5d                   	pop    ebp
100067cf:	c3                   	ret    

100067d0 <NIWindow::realdraw()>:
100067d0:	55                   	push   ebp
100067d1:	57                   	push   edi
100067d2:	56                   	push   esi
100067d3:	53                   	push   ebx
100067d4:	83 ec 18             	sub    esp,0x18
100067d7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
100067db:	53                   	push   ebx
100067dc:	e8 fc ff ff ff       	call   100067dd <NIWindow::realdraw()+0xd>	100067dd: R_386_PC32	NIWindow::request()
100067e1:	83 c4 10             	add    esp,0x10
100067e4:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100067ea:	39 83 60 02 00 00    	cmp    DWORD PTR [ebx+0x260],eax
100067f0:	74 10                	je     10006802 <NIWindow::realdraw()+0x32>
100067f2:	83 ec 0c             	sub    esp,0xc
100067f5:	68 31 6f 00 10       	push   0x10006f31	100067f6: R_386_32	.text
100067fa:	e8 fc ff ff ff       	call   100067fb <NIWindow::realdraw()+0x2b>	100067fb: R_386_PC32	KePanic(char const*)
100067ff:	83 c4 10             	add    esp,0x10
10006802:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
10006806:	75 55                	jne    1000685d <NIWindow::realdraw()+0x8d>
10006808:	31 f6                	xor    esi,esi
1000680a:	39 b3 74 02 00 00    	cmp    DWORD PTR [ebx+0x274],esi
10006810:	7e 4b                	jle    1000685d <NIWindow::realdraw()+0x8d>
10006812:	8b 83 64 02 00 00    	mov    eax,DWORD PTR [ebx+0x264]
10006818:	8d 04 b0             	lea    eax,[eax+esi*4]
1000681b:	0f b7 28             	movzx  ebp,WORD PTR [eax]
1000681e:	0f b7 78 02          	movzx  edi,WORD PTR [eax+0x2]
10006822:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006828:	89 c2                	mov    edx,eax
1000682a:	29 fa                	sub    edx,edi
1000682c:	39 ea                	cmp    edx,ebp
1000682e:	7e 2a                	jle    1000685a <NIWindow::realdraw()+0x8a>
10006830:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10006833:	0f af c6             	imul   eax,esi
10006836:	01 e8                	add    eax,ebp
10006838:	ff 34 82             	push   DWORD PTR [edx+eax*4]
1000683b:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
10006841:	01 f0                	add    eax,esi
10006843:	50                   	push   eax
10006844:	8b 83 68 02 00 00    	mov    eax,DWORD PTR [ebx+0x268]
1000684a:	01 e8                	add    eax,ebp
1000684c:	45                   	inc    ebp
1000684d:	50                   	push   eax
1000684e:	ff 33                	push   DWORD PTR [ebx]
10006850:	e8 fc ff ff ff       	call   10006851 <NIWindow::realdraw()+0x81>	10006851: R_386_PC32	NIContext::drvPutpixel4(int, int, unsigned int)
10006855:	83 c4 10             	add    esp,0x10
10006858:	eb c8                	jmp    10006822 <NIWindow::realdraw()+0x52>
1000685a:	46                   	inc    esi
1000685b:	eb ad                	jmp    1000680a <NIWindow::realdraw()+0x3a>
1000685d:	83 c4 0c             	add    esp,0xc
10006860:	5b                   	pop    ebx
10006861:	5e                   	pop    esi
10006862:	5f                   	pop    edi
10006863:	5d                   	pop    ebp
10006864:	c3                   	ret    
10006865:	90                   	nop

10006866 <NIWindow::drawResizeMarker()>:
10006866:	53                   	push   ebx
10006867:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
1000686b:	f6 83 90 02 00 00 01 	test   BYTE PTR [ebx+0x290],0x1
10006872:	0f 85 f6 01 00 00    	jne    10006a6e <NIWindow::drawResizeMarker()+0x208>
10006878:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
1000687f:	0f 85 e9 01 00 00    	jne    10006a6e <NIWindow::drawResizeMarker()+0x208>
10006885:	68 55 55 55 00       	push   0x555555
1000688a:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006890:	83 e8 05             	sub    eax,0x5
10006893:	50                   	push   eax
10006894:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
1000689a:	83 e8 0d             	sub    eax,0xd
1000689d:	50                   	push   eax
1000689e:	53                   	push   ebx
1000689f:	e8 fc ff ff ff       	call   100068a0 <NIWindow::drawResizeMarker()+0x3a>	100068a0: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100068a4:	68 55 55 55 00       	push   0x555555
100068a9:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100068af:	83 e8 05             	sub    eax,0x5
100068b2:	50                   	push   eax
100068b3:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100068b9:	83 e8 0b             	sub    eax,0xb
100068bc:	50                   	push   eax
100068bd:	53                   	push   ebx
100068be:	e8 fc ff ff ff       	call   100068bf <NIWindow::drawResizeMarker()+0x59>	100068bf: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100068c3:	83 c4 20             	add    esp,0x20
100068c6:	68 55 55 55 00       	push   0x555555
100068cb:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100068d1:	83 e8 05             	sub    eax,0x5
100068d4:	50                   	push   eax
100068d5:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100068db:	83 e8 09             	sub    eax,0x9
100068de:	50                   	push   eax
100068df:	53                   	push   ebx
100068e0:	e8 fc ff ff ff       	call   100068e1 <NIWindow::drawResizeMarker()+0x7b>	100068e1: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100068e5:	68 55 55 55 00       	push   0x555555
100068ea:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100068f0:	83 e8 05             	sub    eax,0x5
100068f3:	50                   	push   eax
100068f4:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100068fa:	83 e8 07             	sub    eax,0x7
100068fd:	50                   	push   eax
100068fe:	53                   	push   ebx
100068ff:	e8 fc ff ff ff       	call   10006900 <NIWindow::drawResizeMarker()+0x9a>	10006900: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10006904:	83 c4 20             	add    esp,0x20
10006907:	68 55 55 55 00       	push   0x555555
1000690c:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006912:	83 e8 05             	sub    eax,0x5
10006915:	50                   	push   eax
10006916:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
1000691c:	83 e8 05             	sub    eax,0x5
1000691f:	50                   	push   eax
10006920:	53                   	push   ebx
10006921:	e8 fc ff ff ff       	call   10006922 <NIWindow::drawResizeMarker()+0xbc>	10006922: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10006926:	68 55 55 55 00       	push   0x555555
1000692b:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006931:	83 e8 07             	sub    eax,0x7
10006934:	50                   	push   eax
10006935:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
1000693b:	83 e8 0b             	sub    eax,0xb
1000693e:	50                   	push   eax
1000693f:	53                   	push   ebx
10006940:	e8 fc ff ff ff       	call   10006941 <NIWindow::drawResizeMarker()+0xdb>	10006941: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10006945:	83 c4 20             	add    esp,0x20
10006948:	68 55 55 55 00       	push   0x555555
1000694d:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006953:	83 e8 07             	sub    eax,0x7
10006956:	50                   	push   eax
10006957:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
1000695d:	83 e8 09             	sub    eax,0x9
10006960:	50                   	push   eax
10006961:	53                   	push   ebx
10006962:	e8 fc ff ff ff       	call   10006963 <NIWindow::drawResizeMarker()+0xfd>	10006963: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10006967:	68 55 55 55 00       	push   0x555555
1000696c:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006972:	83 e8 07             	sub    eax,0x7
10006975:	50                   	push   eax
10006976:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
1000697c:	83 e8 07             	sub    eax,0x7
1000697f:	50                   	push   eax
10006980:	53                   	push   ebx
10006981:	e8 fc ff ff ff       	call   10006982 <NIWindow::drawResizeMarker()+0x11c>	10006982: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10006986:	83 c4 20             	add    esp,0x20
10006989:	68 55 55 55 00       	push   0x555555
1000698e:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006994:	83 e8 07             	sub    eax,0x7
10006997:	50                   	push   eax
10006998:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
1000699e:	83 e8 05             	sub    eax,0x5
100069a1:	50                   	push   eax
100069a2:	53                   	push   ebx
100069a3:	e8 fc ff ff ff       	call   100069a4 <NIWindow::drawResizeMarker()+0x13e>	100069a4: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100069a8:	68 55 55 55 00       	push   0x555555
100069ad:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100069b3:	83 e8 09             	sub    eax,0x9
100069b6:	50                   	push   eax
100069b7:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100069bd:	83 e8 09             	sub    eax,0x9
100069c0:	50                   	push   eax
100069c1:	53                   	push   ebx
100069c2:	e8 fc ff ff ff       	call   100069c3 <NIWindow::drawResizeMarker()+0x15d>	100069c3: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100069c7:	83 c4 20             	add    esp,0x20
100069ca:	68 55 55 55 00       	push   0x555555
100069cf:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100069d5:	83 e8 09             	sub    eax,0x9
100069d8:	50                   	push   eax
100069d9:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100069df:	83 e8 07             	sub    eax,0x7
100069e2:	50                   	push   eax
100069e3:	53                   	push   ebx
100069e4:	e8 fc ff ff ff       	call   100069e5 <NIWindow::drawResizeMarker()+0x17f>	100069e5: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100069e9:	68 55 55 55 00       	push   0x555555
100069ee:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100069f4:	83 e8 09             	sub    eax,0x9
100069f7:	50                   	push   eax
100069f8:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100069fe:	83 e8 05             	sub    eax,0x5
10006a01:	50                   	push   eax
10006a02:	53                   	push   ebx
10006a03:	e8 fc ff ff ff       	call   10006a04 <NIWindow::drawResizeMarker()+0x19e>	10006a04: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10006a08:	83 c4 20             	add    esp,0x20
10006a0b:	68 55 55 55 00       	push   0x555555
10006a10:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006a16:	83 e8 0b             	sub    eax,0xb
10006a19:	50                   	push   eax
10006a1a:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006a20:	83 e8 07             	sub    eax,0x7
10006a23:	50                   	push   eax
10006a24:	53                   	push   ebx
10006a25:	e8 fc ff ff ff       	call   10006a26 <NIWindow::drawResizeMarker()+0x1c0>	10006a26: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10006a2a:	68 55 55 55 00       	push   0x555555
10006a2f:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006a35:	83 e8 0b             	sub    eax,0xb
10006a38:	50                   	push   eax
10006a39:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006a3f:	83 e8 05             	sub    eax,0x5
10006a42:	50                   	push   eax
10006a43:	53                   	push   ebx
10006a44:	e8 fc ff ff ff       	call   10006a45 <NIWindow::drawResizeMarker()+0x1df>	10006a45: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10006a49:	83 c4 20             	add    esp,0x20
10006a4c:	68 55 55 55 00       	push   0x555555
10006a51:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006a57:	83 e8 0d             	sub    eax,0xd
10006a5a:	50                   	push   eax
10006a5b:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006a61:	83 e8 05             	sub    eax,0x5
10006a64:	50                   	push   eax
10006a65:	53                   	push   ebx
10006a66:	e8 fc ff ff ff       	call   10006a67 <NIWindow::drawResizeMarker()+0x201>	10006a67: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10006a6b:	83 c4 10             	add    esp,0x10
10006a6e:	5b                   	pop    ebx
10006a6f:	c3                   	ret    

10006a70 <List<NIWindow*>::insertAtHead(NIWindow*)>:
10006a70:	53                   	push   ebx
10006a71:	83 ec 14             	sub    esp,0x14
10006a74:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10006a78:	6a 0c                	push   0xc
10006a7a:	e8 fc ff ff ff       	call   10006a7b <List<NIWindow*>::insertAtHead(NIWindow*)+0xb>	10006a7b: R_386_PC32	malloc
10006a7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10006a83:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10006a8a:	89 10                	mov    DWORD PTR [eax],edx
10006a8c:	83 c4 10             	add    esp,0x10
10006a8f:	8b 13                	mov    edx,DWORD PTR [ebx]
10006a91:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10006a94:	85 d2                	test   edx,edx
10006a96:	74 05                	je     10006a9d <List<NIWindow*>::insertAtHead(NIWindow*)+0x2d>
10006a98:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
10006a9b:	eb 03                	jmp    10006aa0 <List<NIWindow*>::insertAtHead(NIWindow*)+0x30>
10006a9d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10006aa0:	89 03                	mov    DWORD PTR [ebx],eax
10006aa2:	83 c4 08             	add    esp,0x8
10006aa5:	5b                   	pop    ebx
10006aa6:	c3                   	ret    
10006aa7:	90                   	nop

10006aa8 <List<NIWindow*>::deleteElement(NIWindow*&)>:
10006aa8:	57                   	push   edi
10006aa9:	56                   	push   esi
10006aaa:	53                   	push   ebx
10006aab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10006aaf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10006ab3:	8b 19                	mov    ebx,DWORD PTR [ecx]
10006ab5:	85 db                	test   ebx,ebx
10006ab7:	74 5e                	je     10006b17 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
10006ab9:	8b 30                	mov    esi,DWORD PTR [eax]
10006abb:	89 da                	mov    edx,ebx
10006abd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
10006ac0:	8b 3a                	mov    edi,DWORD PTR [edx]
10006ac2:	85 c0                	test   eax,eax
10006ac4:	74 08                	je     10006ace <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
10006ac6:	39 f7                	cmp    edi,esi
10006ac8:	73 04                	jae    10006ace <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
10006aca:	89 c2                	mov    edx,eax
10006acc:	eb ef                	jmp    10006abd <List<NIWindow*>::deleteElement(NIWindow*&)+0x15>
10006ace:	39 f7                	cmp    edi,esi
10006ad0:	75 45                	jne    10006b17 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
10006ad2:	39 d3                	cmp    ebx,edx
10006ad4:	75 18                	jne    10006aee <List<NIWindow*>::deleteElement(NIWindow*&)+0x46>
10006ad6:	89 01                	mov    DWORD PTR [ecx],eax
10006ad8:	85 c0                	test   eax,eax
10006ada:	75 09                	jne    10006ae5 <List<NIWindow*>::deleteElement(NIWindow*&)+0x3d>
10006adc:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
10006ae3:	eb 1e                	jmp    10006b03 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
10006ae5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10006aec:	eb 15                	jmp    10006b03 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
10006aee:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
10006af1:	85 c0                	test   eax,eax
10006af3:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10006af6:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
10006af9:	74 05                	je     10006b00 <List<NIWindow*>::deleteElement(NIWindow*&)+0x58>
10006afb:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
10006afe:	eb 03                	jmp    10006b03 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
10006b00:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
10006b03:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
10006b0b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10006b0f:	5b                   	pop    ebx
10006b10:	5e                   	pop    esi
10006b11:	5f                   	pop    edi
10006b12:	e9 fc ff ff ff       	jmp    10006b13 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6b>	10006b13: R_386_PC32	operator delete(void*, unsigned long)
10006b17:	5b                   	pop    ebx
10006b18:	5e                   	pop    esi
10006b19:	5f                   	pop    edi
10006b1a:	c3                   	ret    
10006b1b:	43                   	inc    ebx
10006b1c:	3a 2f                	cmp    ch,BYTE PTR [edi]
10006b1e:	42                   	inc    edx
10006b1f:	61                   	popa   
10006b20:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006b21:	61                   	popa   
10006b22:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006b23:	61                   	popa   
10006b24:	2f                   	das    
10006b25:	53                   	push   ebx
10006b26:	79 73                	jns    10006b9b <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
10006b28:	74 65                	je     10006b8f <List<NIWindow*>::deleteElement(NIWindow*&)+0xe7>
10006b2a:	6d                   	ins    DWORD PTR es:[edi],dx
10006b2b:	2f                   	das    
10006b2c:	64 65 73 6b          	fs gs jae 10006b9b <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
10006b30:	74 6f                	je     10006ba1 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf9>
10006b32:	70 2e                	jo     10006b62 <List<NIWindow*>::deleteElement(NIWindow*&)+0xba>
10006b34:	65 78 65             	gs js  10006b9c <List<NIWindow*>::deleteElement(NIWindow*&)+0xf4>
10006b37:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
10006b3a:	4e                   	dec    esi
10006b3b:	43                   	inc    ebx
10006b3c:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
10006b3f:	4e                   	dec    esi
10006b40:	32 00                	xor    al,BYTE PTR [eax]
10006b42:	32 4e 46             	xor    cl,BYTE PTR [esi+0x46]
10006b45:	53                   	push   ebx
10006b46:	00 4e 49             	add    BYTE PTR [esi+0x49],cl
10006b49:	43                   	inc    ebx
10006b4a:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006b4b:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006b4c:	74 65                	je     10006bb3 <List<NIWindow*>::deleteElement(NIWindow*&)+0x10b>
10006b4e:	78 74                	js     10006bc4 <List<NIWindow*>::deleteElement(NIWindow*&)+0x11c>
10006b50:	3a 3a                	cmp    bh,BYTE PTR [edx]
10006b52:	64 72 76             	fs jb  10006bcb <List<NIWindow*>::deleteElement(NIWindow*&)+0x123>
10006b55:	52                   	push   edx
10006b56:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10006b58:	64 65 72 54          	fs gs jb 10006bb0 <List<NIWindow*>::deleteElement(NIWindow*&)+0x108>
10006b5c:	54                   	push   esp
10006b5d:	46                   	inc    esi
10006b5e:	34 00                	xor    al,0x0
10006b60:	43                   	inc    ebx
10006b61:	3a 2f                	cmp    ch,BYTE PTR [edi]
10006b63:	42                   	inc    edx
10006b64:	61                   	popa   
10006b65:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006b66:	61                   	popa   
10006b67:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006b68:	61                   	popa   
10006b69:	2f                   	das    
10006b6a:	46                   	inc    esi
10006b6b:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006b6c:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006b6d:	74 73                	je     10006be2 <List<NIWindow*>::deleteElement(NIWindow*&)+0x13a>
10006b6f:	2f                   	das    
10006b70:	53                   	push   ebx
10006b71:	46                   	inc    esi
10006b72:	4e                   	dec    esi
10006b73:	00 43 41             	add    BYTE PTR [ebx+0x41],al
10006b76:	4e                   	dec    esi
10006b77:	4e                   	dec    esi
10006b78:	4f                   	dec    edi
10006b79:	54                   	push   esp
10006b7a:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
10006b7e:	44                   	inc    esp
10006b7f:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10006b82:	4e                   	dec    esi
10006b83:	54                   	push   esp
10006b84:	20 44 49 52          	and    BYTE PTR [ecx+ecx*2+0x52],al
10006b88:	45                   	inc    ebp
10006b89:	43                   	inc    ebx
10006b8a:	54                   	push   esp
10006b8b:	4f                   	dec    edi
10006b8c:	52                   	push   edx
10006b8d:	59                   	pop    ecx
10006b8e:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
10006b91:	2f                   	das    
10006b92:	42                   	inc    edx
10006b93:	61                   	popa   
10006b94:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006b95:	61                   	popa   
10006b96:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006b97:	61                   	popa   
10006b98:	2f                   	das    
10006b99:	46                   	inc    esi
10006b9a:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006b9b:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006b9c:	74 73                	je     10006c11 <List<NIWindow*>::deleteElement(NIWindow*&)+0x169>
10006b9e:	2f                   	das    
10006b9f:	53                   	push   ebx
10006ba0:	46                   	inc    esi
10006ba1:	4e                   	dec    esi
10006ba2:	2f                   	das    
10006ba3:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
10006ba6:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006ba7:	74 20                	je     10006bc9 <List<NIWindow*>::deleteElement(NIWindow*&)+0x121>
10006ba9:	69 73 20 6f 66 20 73 	imul   esi,DWORD PTR [ebx+0x20],0x7320666f
10006bb0:	69 7a 65 20 25 64 0a 	imul   edi,DWORD PTR [edx+0x65],0xa642520
10006bb7:	00 4c 6f 61          	add    BYTE PTR [edi+ebp*2+0x61],cl
10006bbb:	64 65 64 20 66 6f    	fs gs and BYTE PTR fs:[esi+0x6f],ah
10006bc1:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006bc2:	74 3a                	je     10006bfe <List<NIWindow*>::deleteElement(NIWindow*&)+0x156>
10006bc4:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
10006bca:	53                   	push   ebx
10006bcb:	46                   	inc    esi
10006bcc:	4e                   	dec    esi
10006bcd:	5f                   	pop    edi
10006bce:	52                   	push   edx
10006bcf:	45                   	inc    ebp
10006bd0:	53                   	push   ebx
10006bd1:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10006bd7:	00 4d 65             	add    BYTE PTR [ebp+0x65],cl
10006bda:	6d                   	ins    DWORD PTR es:[edi],dx
10006bdb:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006bdc:	72 79                	jb     10006c57 <List<NIWindow*>::deleteElement(NIWindow*&)+0x1af>
10006bde:	20 61 6c             	and    BYTE PTR [ecx+0x6c],ah
10006be1:	6c                   	ins    BYTE PTR es:[edi],dx
10006be2:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006be3:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
10006be6:	69 6f 6e 20 65 72 72 	imul   ebp,DWORD PTR [edi+0x6e],0x72726520
10006bed:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006bee:	72 00                	jb     10006bf0 <List<NIWindow*>::deleteElement(NIWindow*&)+0x148>
10006bf0:	42                   	inc    edx
10006bf1:	61                   	popa   
10006bf2:	64 20 66 69          	and    BYTE PTR fs:[esi+0x69],ah
10006bf6:	6c                   	ins    BYTE PTR es:[edi],dx
10006bf7:	65 20 66 6f          	and    BYTE PTR gs:[esi+0x6f],ah
10006bfb:	72 6d                	jb     10006c6a <_ssfn__compute_huffman_codes::length_dezigzag+0xa>
10006bfd:	61                   	popa   
10006bfe:	74 00                	je     10006c00 <List<NIWindow*>::deleteElement(NIWindow*&)+0x158>
10006c00:	4e                   	dec    esi
10006c01:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006c02:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10006c05:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006c06:	74 20                	je     10006c28 <List<NIWindow*>::deleteElement(NIWindow*&)+0x180>
10006c08:	66 61                	popaw  
10006c0a:	63 65 20             	arpl   WORD PTR [ebp+0x20],sp
10006c0d:	66 6f                	outs   dx,WORD PTR ds:[esi]
10006c0f:	75 6e                	jne    10006c7f <_ssfn__compute_huffman_codes::length_dezigzag+0x1f>
10006c11:	64 00 49 6e          	add    BYTE PTR fs:[ecx+0x6e],cl
10006c15:	76 61                	jbe    10006c78 <_ssfn__compute_huffman_codes::length_dezigzag+0x18>
10006c17:	6c                   	ins    BYTE PTR es:[edi],dx
10006c18:	69 64 20 69 6e 70 75 74 	imul   esp,DWORD PTR [eax+eiz*1+0x69],0x7475706e
10006c20:	20 76 61             	and    BYTE PTR [esi+0x61],dh
10006c23:	6c                   	ins    BYTE PTR es:[edi],dx
10006c24:	75 65                	jne    10006c8b <_ssfn__zdist_extra+0xb>
10006c26:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10006c29:	76 61                	jbe    10006c8c <_ssfn__zdist_extra+0xc>
10006c2b:	6c                   	ins    BYTE PTR es:[edi],dx
10006c2c:	69 64 20 73 74 79 6c 65 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x656c7974
10006c34:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10006c37:	76 61                	jbe    10006c9a <_ssfn__zdist_extra+0x1a>
10006c39:	6c                   	ins    BYTE PTR es:[edi],dx
10006c3a:	69 64 20 73 69 7a 65 00 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x657a69
10006c42:	47                   	inc    edi
10006c43:	6c                   	ins    BYTE PTR es:[edi],dx
10006c44:	79 70                	jns    10006cb6 <_ssfn__zdist_extra+0x36>
10006c46:	68 20 6e 6f 74       	push   0x746f6e20
10006c4b:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10006c4e:	75 6e                	jne    10006cbe <_ssfn__zdist_extra+0x3e>
10006c50:	64 00 66 90          	add    BYTE PTR fs:[esi-0x70],ah
10006c54:	66 90                	xchg   ax,ax
10006c56:	66 90                	xchg   ax,ax
10006c58:	66 90                	xchg   ax,ax
10006c5a:	66 90                	xchg   ax,ax
10006c5c:	66 90                	xchg   ax,ax
10006c5e:	66 90                	xchg   ax,ax

10006c60 <_ssfn__compute_huffman_codes::length_dezigzag>:
10006c60:	10 11 12 00 08 07 09 06 0a 05 0b 04 0c 03 0d 02     ................
10006c70:	0e 01 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

10006c80 <_ssfn__zdist_extra>:
	...
10006c90:	01 00 00 00 01 00 00 00 02 00 00 00 02 00 00 00     ................
10006ca0:	03 00 00 00 03 00 00 00 04 00 00 00 04 00 00 00     ................
10006cb0:	05 00 00 00 05 00 00 00 06 00 00 00 06 00 00 00     ................
10006cc0:	07 00 00 00 07 00 00 00 08 00 00 00 08 00 00 00     ................
10006cd0:	09 00 00 00 09 00 00 00 0a 00 00 00 0a 00 00 00     ................
10006ce0:	0b 00 00 00 0b 00 00 00 0c 00 00 00 0c 00 00 00     ................
10006cf0:	0d 00 00 00 0d 00 00 00 00 00 00 00 00 00 00 00     ................

10006d00 <_ssfn__zdist_base>:
10006d00:	01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00     ................
10006d10:	05 00 00 00 07 00 00 00 09 00 00 00 0d 00 00 00     ................
10006d20:	11 00 00 00 19 00 00 00 21 00 00 00 31 00 00 00     ........!...1...
10006d30:	41 00 00 00 61 00 00 00 81 00 00 00 c1 00 00 00     A...a...........
10006d40:	01 01 00 00 81 01 00 00 01 02 00 00 01 03 00 00     ................
10006d50:	01 04 00 00 01 06 00 00 01 08 00 00 01 0c 00 00     ................
10006d60:	01 10 00 00 01 18 00 00 01 20 00 00 01 30 00 00     ......... ...0..
10006d70:	01 40 00 00 01 60 00 00 00 00 00 00 00 00 00 00     .@...`..........

10006d80 <_ssfn__zlength_extra>:
	...
10006da0:	01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00     ................
10006db0:	02 00 00 00 02 00 00 00 02 00 00 00 02 00 00 00     ................
10006dc0:	03 00 00 00 03 00 00 00 03 00 00 00 03 00 00 00     ................
10006dd0:	04 00 00 00 04 00 00 00 04 00 00 00 04 00 00 00     ................
10006de0:	05 00 00 00 05 00 00 00 05 00 00 00 05 00 00 00     ................
	...

10006e00 <_ssfn__zlength_base>:
10006e00:	03 00 00 00 04 00 00 00 05 00 00 00 06 00 00 00     ................
10006e10:	07 00 00 00 08 00 00 00 09 00 00 00 0a 00 00 00     ................
10006e20:	0b 00 00 00 0d 00 00 00 0f 00 00 00 11 00 00 00     ................
10006e30:	13 00 00 00 17 00 00 00 1b 00 00 00 1f 00 00 00     ................
10006e40:	23 00 00 00 2b 00 00 00 33 00 00 00 3b 00 00 00     #...+...3...;...
10006e50:	43 00 00 00 53 00 00 00 63 00 00 00 73 00 00 00     C...S...c...s...
10006e60:	83 00 00 00 a3 00 00 00 c3 00 00 00 e3 00 00 00     ................
10006e70:	02 01 00 00 00 00 00 00 00 00 00 00 43 3a 2f 42     ............C:/B
10006e80:	61 6e 61 6e 61 2f 43 75 72 73 6f 72 73 2f 53 54     anana/Cursors/ST
10006e90:	41 4e 44 41 52 44 2e 43 55 52 00 43 55 52 53 4f     ANDARD.CUR.CURSO
10006ea0:	52 20 4c 4f 41 44 3a 20 42 41 44 20 31 0a 00 43     R LOAD: BAD 1..C
10006eb0:	55 52 53 4f 52 20 4c 4f 41 44 3a 20 42 41 44 20     URSOR LOAD: BAD 
10006ec0:	32 0a 00 4e 52 4d 4c 00 57 41 49 54 00 54 4c 44     2..NRML.WAIT.TLD
10006ed0:	52 00 54 45 58 54 00 56 45 52 54 00 48 4f 52 5a     R.TEXT.VERT.HORZ
10006ee0:	00 48 41 4e 44 00 43 55 52 53 4f 52 20 4c 4f 41     .HAND.CURSOR LOA
10006ef0:	44 3a 20 42 41 44 20 33 0a 00 4e 69 4c 69 6e 6b     D: BAD 3..NiLink
10006f00:	43 6f 6d 6d 61 6e 64 44 65 73 74 72 6f 79 57 69     CommandDestroyWi
10006f10:	6e 64 6f 77 0a 00 4e 69 4c 69 6e 6b 43 6f 6d 6d     ndow..NiLinkComm
10006f20:	61 6e 64 43 72 65 61 74 65 57 69 6e 64 6f 77 0a     andCreateWindow.
10006f30:	00 41 53 53 45 52 54 49 4f 4e 20 46 41 49 4c 55     .ASSERTION FAILU
10006f40:	52 45 20 28 41 29 2e 00                             RE (A)..
